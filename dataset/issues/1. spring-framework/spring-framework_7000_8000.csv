"#","No","Issue Title","Issue Details","State","Labels","User name","created","Updated"
"","1872","Merge pull request #1 from spring-projects/master","源码同步","closed","","ganyinglong","2018-07-07T04:06:32Z","2018-07-09T13:21:22Z"
"","1957","Remove duplicate blank in log message of  ExecutorConfigurationSuppor…","…t#initialize  (obvious fix)","closed","","PascalSchumacher","2018-09-12T19:17:55Z","2018-09-12T19:32:44Z"
"","1830","SPR-16831 Allow null value for second attribute for ConcurrentModel.a…","…ddAttribute(String, Object) according to the documentation","closed","","ddelamotte","2018-05-17T08:47:34Z","2018-05-17T11:05:21Z"
"","1863","SPR-16958 - Introduce GSON based MessageConverter","With this commit we introduce a GSON bases message converter for both JMS as well as the generic messaging infrastructure.  fixes: SPR-16958","closed","in: messaging,","mdeinum","2018-06-21T06:19:59Z","2021-11-24T14:38:06Z"
"","1893","Suggest use of ConfigurableApplicationContext","Why it's not ConfigurableApplicationContext","closed","","vincenthsin","2018-07-21T13:25:05Z","2018-07-24T06:20:46Z"
"","1946","5.0.x","while testing org.apache.cxf.systest.ws.algsuite.action.ActionTest.java in apache-cxf i see  java.lang.NoClassDefFoundError: Could not initialize class org.springframework.beans.CachedIntrospectionResults  HINT: CachedIntrospectionResults available in CLASSPATH via      org.springframework  spring-beans  5.0.7.RELEASE  Specifically i need to understand: HOW org.springframework.beans.BeanUtils.class references CachedIntrospectionResults HOW org.springframework.beans.BeanWrapperImpl.class references CachedIntrospectionResults  *gruss*","closed","","mgainty","2018-08-28T17:39:07Z","2018-08-29T05:05:09Z"
"","1742","SPR-16604 - Prevent response body from being read at DefaultResponseErrorHandler.hasError() on unknown HTTP status code","When response contains HTTP status code not defined in `HttpStatus` enum, `DefaultResponseErrorHandler.hasError(ClientHttpResponse response)` calls `getHttpStatusCode(ClientHttpResponse response)` which reads response body and throws `UnknownHttpStatusCodeException`. In this case `false` value will be returned (which means response doesn't have error) and `ResponseExtractor.extract()` in `RestTemplate` is called with response which body has been already read.  Issue: [SPR-16604](https://jira.spring.io/browse/SPR-16604)","closed","","denysivano","2018-03-16T15:31:31Z","2018-03-28T09:23:32Z"
"","1901","Make ""PathVariable reflects value up to 1st semicolon"" consistent","When I was reading 66d73017d5406e46c176a44e5204922d167bef93, I noticed that assertions for ""reactive"" and ones for ""servlet"" are different. This PR tries to make ""servlet"" codes align with ""reactive"" ones to be consistent with an assumption that ""reactive"" ones are correct.","closed","","izeye","2018-07-26T14:03:06Z","2018-07-27T13:10:04Z"
"","1936","More defensive about bad URLs","We can safely catch Throwable here without affecting the logic  Issue: SPR-17198","closed","","dsyer","2018-08-22T09:44:13Z","2018-08-23T07:32:52Z"
"","1825","SPR-16809 - Use ""internalSet"" instead of normal setter.","Using ""internalSet"" instead of normal setter can avoid checking int param, because if `constants.asNumber()` works as expected and does't throw exception, the param checking in normal setter will never fail. Issue: SPR-16809","closed","","nkjackzhang","2018-05-10T08:06:34Z","2022-02-18T19:11:09Z"
"","1790","Improve timestamp support for postgresql database","Use specific PGTimestamp postgresql class for timestamp binding to avoid ERROR: could not determine data type of parameter error  This is a proposed improvement for https://jira.spring.io/browse/SPR-16719","closed","in: data,","amergey","2018-04-12T15:05:09Z","2021-12-21T08:06:14Z"
"","1891","SPR-17074 Replace iteration over Map::keySet with Map::entrySet","Use more efficient iteration over Map::entrySet in frequently called methods.","closed","","stsypanov","2018-07-21T10:40:02Z","2018-07-21T11:54:27Z"
"","1911","SPR-17074 Use lambda for lazy instantiation","Use lambdas to prevent unnecessary String concatenation / objects instantiation.","closed","","stsypanov","2018-07-31T10:38:15Z","2018-07-31T12:25:08Z"
"","1752","Polish: map entries should be iterated when both the key and value are needed","use java 8 language features to iterate on maps and transform data set by streams","closed","","igor-suhorukov","2018-03-25T09:38:14Z","2018-03-27T23:06:51Z"
"","1952","4.3.x","UrlBasedViewResolver:  org/springframework/web/servlet/view/UrlBasedViewResolver.java	  LINE 529 Modify:   `view.setUrl(getPrefix() + viewName + getSuffix());`  TO:  ``` String fullUrl=getPrefix() + viewName + getSuffix(); fullUrl=fullUrl.replaceAll(""/+"",""/""); view.setUrl(fullUrl); ```   If the user accidentally configures multiple slashes that Jetty cannot run, replace multiple slashes with one.","closed","","leefine","2018-09-07T03:30:03Z","2018-09-07T07:48:23Z"
"","1921","SPR-17144 - Fix ContextPathCompositeHandler response completion","Updated ContextPathCompositeHandler so that it does not discard the result of setting the response as complete. This was causing a 200 status code to be returned instead of the intended 404 status code.  Issues: SPR-17144","closed","","maubergine","2018-08-08T10:26:32Z","2018-08-08T13:47:29Z"
"","1878","Merge pull request","update from origin","closed","","zhaoshengxuan108","2018-07-09T12:33:18Z","2018-07-09T12:35:26Z"
"","1826","SPR-16797 - Update CollectionFactory to support Immutables","Update CollectionFactory to support Guava's ImmutableCollections (List, Set, Multiset) and ImmutableMaps (Map, BiMap, SortedMap).","closed","","dancerjohn","2018-05-10T11:34:38Z","2018-05-10T12:40:10Z"
"","1933","SPR-17195 Fix unusable assertions in HeaderAssertions","Two header assertions (expires, lastModified) accept int parameter whereas HttpHeaders class stores those headers as long. It makes them always fail as Object::equals is used for comparing.  The change casts incoming values to long.","closed","","konradczajka","2018-08-19T08:17:50Z","2018-08-19T16:59:34Z"
"","1803","Fix typo","trivial wording fix in javadoc","closed","","dimitrisli","2018-04-21T12:50:18Z","2018-04-24T08:08:35Z"
"","1975","Updated referenced dependency on project reactor to working version","Tried to use the referenced `io.projectreactor.netty:reactor-netty` however the dependency was not found. Changing it to `io.projectreactor.netty:reactor-netty:0.8.0.RELEASE` leads to the dependency being found but getting a `ClassNotFoundException` at runtime.  After switching to: `io.projectreactor.ipc:reactor-netty` everything started working.","closed","","kylec32","2018-10-02T05:11:52Z","2018-10-02T08:17:48Z"
"","1845","Update reactor-netty to the latest groupId/package and API changes","This superseeds #1831","closed","","smaldini","2018-05-31T16:41:44Z","2018-05-31T19:40:22Z"
"","1918","Polish build script","This simplifies build script by removing the following unnecessary properties from `wrapper` task configuration:  - `description`: has no effect as no such property exists in Gradle's [`Wrapper`](https://docs.gradle.org/current/dsl/org.gradle.api.tasks.wrapper.Wrapper.html#N2855B) which can be verified with:  ```shell $ ./gradlew tasks | grep wrapper wrapper - Generates Gradle wrapper files. ```  - `gradleVersion`: not needed as `wrapper` task should preferably be [invoked with `--gradle-version`](https://docs.gradle.org/current/userguide/gradle_wrapper.html#sec:upgrading_wrapper) option which also eliminates the need to modify the build script on each upgrade of Gradle:  ```shell $ ./gradlew wrapper --gradle-version 4.8.1 ```","closed","","vpavic","2018-08-06T18:25:21Z","2018-08-13T11:14:06Z"
"","1956","Error details in RestTemplate client and server exceptions","This pull request supersedes #21667 that contains the original description and discussion.","closed","type: enhancement,","jerzykrlk","2018-09-11T20:31:23Z","2019-11-18T07:04:59Z"
"","1922","Fix typos detected by github.com/client9/misspell","This pull request fixes several minor typos in the source code. Although I am not a native English speaker, [misspell](https://github.com/client9/misspell) detected obvious mistakes for us. I've fixed them except for false positives.  ``` $ misspell . gradle/docs.gradle:92:9: ""ouput"" is a misspelling of ""output"" spring-aop/src/main/java/org/springframework/aop/support/DynamicMethodMatcherPointcut.java:27:6: ""overriden"" is a misspelling of ""overridden"" spring-aop/src/test/java/org/springframework/aop/aspectj/MethodInvocationProceedingJoinPointTests.java:221:15: ""realy"" is a misspelling of ""really"" spring-beans/src/main/java/org/springframework/beans/factory/parsing/ComponentDefinition.java:55:80: ""ommitted"" is a misspelling of ""omitted"" spring-beans/src/main/java/org/springframework/beans/support/PagedListHolder.java:32:21: ""targetted"" is a misspelling of ""targeted"" spring-context/src/main/java/org/springframework/context/ConfigurableApplicationContext.java:200:24: ""inbetween"" is a misspelling of ""between"" spring-context/src/main/java/org/springframework/jmx/export/assembler/AbstractReflectiveMBeanInfoAssembler.java:342:54: ""managment"" is a misspelling of ""management"" spring-context/src/main/java/org/springframework/scheduling/concurrent/ScheduledExecutorTask.java:135:66: ""inbetween"" is a misspelling of ""between"" spring-context/src/test/java/org/springframework/aop/framework/ProxyFactoryBeanTests.java:401:19: ""wiht"" is a misspelling of ""with"" spring-context/src/test/java/org/springframework/context/index/CandidateComponentsTestClassLoader.java:51:4: ""specifed"" is a misspelling of ""specified"" spring-context/src/test/java/org/springframework/jmx/export/naming/AbstractNamingStrategyTests.java:32:23: ""strat"" is a misspelling of ""start"" spring-context/src/test/java/org/springframework/jmx/export/naming/PropertiesFileNamingStrategyTests.java:28:20: ""strat"" is a misspelling of ""start"" spring-context/src/test/java/org/springframework/jmx/export/naming/PropertiesFileNamingStrategyTests.java:31:9: ""strat"" is a misspelling of ""start"" spring-context/src/test/java/org/springframework/jmx/export/naming/PropertiesNamingStrategyTests.java:32:20: ""strat"" is a misspelling of ""start"" spring-context/src/test/java/org/springframework/jmx/export/naming/PropertiesNamingStrategyTests.java:37:9: ""strat"" is a misspelling of ""start"" spring-context/src/test/java/org/springframework/validation/beanvalidation/SpringValidatorAdapterTests.java:188:25: ""whith"" is a misspelling of ""with"" spring-context/src/test/resources/org/springframework/context/access/ContextSingletonBeanFactoryLocatorTests-context.xml:6:90: ""withing"" is a misspelling of ""within"" spring-context-support/src/main/java/org/springframework/scheduling/commonj/ScheduledTimerListener.java:180:13: ""inbetween"" is a misspelling of ""between"" spring-context-support/src/test/java/org/springframework/validation/beanvalidation2/SpringValidatorAdapterTests.java:171:25: ""whith"" is a misspelling of ""with"" spring-context-support/src/test/resources/org/springframework/scheduling/quartz/quartz-hsql.sql:5:10: ""lenghts"" is a misspelling of ""lengths"" spring-core/src/main/java/org/springframework/core/io/buffer/DataBuffer.java:195:28: ""withing"" is a misspelling of ""within"" spring-core/src/main/java/org/springframework/core/io/support/LocalizedResourceHelper.java:36:34: ""inbetween"" is a misspelling of ""between"" spring-core/src/main/java/org/springframework/core/io/support/LocalizedResourceHelper.java:63:29: ""inbetween"" is a misspelling of ""between"" spring-jdbc/src/main/java/org/springframework/jdbc/object/BatchSqlUpdate.java:50:51: ""commiting"" is a misspelling of ""committing"" spring-jdbc/src/test/java/org/springframework/jdbc/support/SQLExceptionSubclassTranslatorTests.java:95:87: ""ECT"" is a misspelling of ""ETC"" spring-jdbc/src/test/java/org/springframework/jdbc/support/SQLExceptionSubclassTranslatorTests.java:96:20: ""ECT"" is a misspelling of ""ETC"" spring-jms/src/main/java/org/springframework/jms/listener/AbstractPollingMessageListenerContainer.java:62:11: ""enviroment"" is a misspelling of ""environment"" spring-jms/src/main/java/org/springframework/jms/support/destination/BeanFactoryDestinationResolver.java:84:24: ""Destinaton"" is a misspelling of ""Destination"" spring-oxm/src/main/java/org/springframework/oxm/support/package-info.java:4:38: ""withing"" is a misspelling of ""within"" spring-test/src/main/java/org/springframework/test/web/reactive/server/WebTestClient.java:202:16: ""efficently"" is a misspelling of ""efficiently"" spring-tx/src/main/java/org/springframework/dao/CannotAcquireLockException.java:20:34: ""aquire"" is a misspelling of ""acquire"" spring-web/src/main/java/org/springframework/http/codec/xml/JaxbContextContainer.java:29:34: ""isntances"" is a misspelling of ""instances"" spring-web/src/main/java/org/springframework/http/converter/protobuf/ExtensionRegistryInitializer.java:32:79: ""contructors"" is a misspelling of ""contractors"" spring-web/src/main/java/org/springframework/web/cors/CorsProcessor.java:37:54: ""recommandation"" is a misspelling of ""recommendation"" spring-web/src/main/java/org/springframework/web/cors/CorsUtils.java:26:49: ""recommandation"" is a misspelling of ""recommendation"" spring-web/src/main/java/org/springframework/web/cors/reactive/CorsProcessor.java:31:54: ""recommandation"" is a misspelling of ""recommendation"" spring-web/src/main/java/org/springframework/web/util/pattern/PatternParseException.java:98:32: ""preceeding"" is a misspelling of ""preceding"" spring-web/src/main/java/org/springframework/web/util/pattern/PatternParseException.java:108:60: ""preceeded"" is a misspelling of ""preceded"" spring-web/src/test/java/org/springframework/web/bind/ServletRequestDataBinderTests.java:207:21: ""fidn"" is a misspelling of ""find"" spring-web/src/test/java/org/springframework/web/bind/support/WebRequestDataBinderTests.java:304:21: ""fidn"" is a misspelling of ""find"" spring-web/src/test/java/org/springframework/web/util/HtmlCharacterEntityReferencesTests.java:159:53: ""defintion"" is a misspelling of ""definition"" spring-webmvc/src/main/resources/org/springframework/web/servlet/config/spring-mvc.xsd:1122:29: ""registerd"" is a misspelling of ""registered"" spring-webmvc/src/test/resources/org/springframework/web/context/ref1.xml:6:90: ""withing"" is a misspelling of ""within"" spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/handler/AbstractTransportHandler.java:28:50: ""inplementations"" is a misspelling of ""implementations"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:39:265: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:49:241: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:65:142: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:81:418: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:87:722: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:117:45: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:117:161: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:149:251: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:161:798: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:181:130: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:183:378: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:205:290: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:213:72: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:219:180: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:257:106: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:257:522: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:273:362: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:275:174: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:277:417: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:281:344: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:289:135: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:355:265: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:365:241: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:381:142: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:397:418: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:403:722: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:433:45: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:433:161: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:465:251: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:477:798: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:497:130: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:499:378: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:521:290: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:529:72: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:535:180: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:573:106: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:573:522: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:589:362: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:591:174: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:593:417: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:597:344: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:605:135: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:671:265: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:681:241: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:697:142: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:713:418: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:719:722: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:749:45: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:749:161: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:781:251: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:793:798: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:813:130: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:815:378: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:837:290: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:845:72: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:851:180: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:889:106: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:889:522: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:905:362: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:907:174: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:909:417: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:913:344: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:921:135: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:987:265: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:997:241: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1013:142: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1029:418: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1035:722: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1065:45: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1065:161: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1097:251: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1109:798: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1129:130: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1131:378: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1153:290: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1161:72: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1167:180: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1205:106: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1205:522: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1221:362: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1223:174: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1225:417: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1229:344: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1237:135: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1303:265: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1313:241: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1329:142: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1345:418: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1351:722: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1381:45: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1381:161: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1413:251: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1425:798: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1445:130: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1447:378: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1469:290: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1477:72: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1483:180: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1521:106: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1521:522: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1537:362: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1539:174: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1541:417: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1545:344: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1553:135: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1619:265: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1629:241: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1645:142: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1661:418: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1667:722: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1697:45: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1697:161: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1729:251: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1741:798: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1761:130: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1763:378: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1785:290: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1793:72: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1799:180: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1837:106: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1837:522: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1853:362: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1855:174: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1857:417: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1861:344: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1869:135: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1935:265: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1945:241: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1961:142: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1977:418: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:1983:722: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2013:45: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2013:161: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2045:251: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2057:798: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2077:130: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2079:378: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2101:290: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2109:72: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2115:180: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2153:106: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2153:522: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2169:362: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2171:174: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2173:417: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2177:344: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2185:135: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2251:265: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2261:241: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2277:142: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2293:418: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2299:722: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2329:45: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2329:161: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2361:251: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2373:798: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2393:130: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2395:378: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2417:290: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2425:72: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2431:180: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2469:106: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2469:522: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2485:362: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2487:174: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2489:417: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2493:344: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2501:135: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2567:265: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2577:241: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2593:142: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2609:418: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2615:722: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2645:45: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2645:161: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2677:251: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2689:798: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2709:130: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2711:378: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2733:290: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2741:72: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2747:180: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2785:106: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2785:522: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2801:362: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2803:174: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2805:417: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2809:344: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2817:135: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2883:265: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2893:241: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2909:142: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2925:418: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2931:722: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2961:45: ""facilisi"" is a misspelling of ""facilities"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2961:161: ""ridiculus"" is a misspelling of ""ridiculous"" spring-webflux/src/test/resources/org/springframework/web/reactive/function/client/largeTextFile.txt:2993:251: ""facilisi"" is a misspelling of ""facilities"" src/docs/asciidoc/core/core-databuffer-codec.adoc:99:0: ""Withing"" is a misspelling of ""Within"" src/docs/asciidoc/core/core-databuffer-codec.adoc:170:0: ""Withing"" is a misspelling of ""Within"" src/docs/asciidoc/tocbot-3.0.2/tocbot.js:100:3529: ""collpased"" is a misspelling of ""collapsed"" src/docs/asciidoc/tocbot-3.0.2/tocbot.js:100:6144: ""collpased"" is a misspelling of ""collapsed"" src/docs/asciidoc/tocbot-3.0.2/tocbot.js:111:983: ""collpased"" is a misspelling of ""collapsed"" src/docs/asciidoc/tocbot-3.0.2/tocbot.js:111:1146: ""collpased"" is a misspelling of ""collapsed"" src/docs/asciidoc/tocbot-3.0.2/tocbot.js:111:1268: ""collpase"" is a misspelling of ""collapse"" src/docs/asciidoc/tocbot-3.0.2/tocbot.js:133:2403: ""threshhold"" is a misspelling of ""threshold"" src/docs/asciidoc/tocbot-3.0.2/tocbot.js:133:2429: ""threshhold"" is a misspelling of ""threshold"" src/docs/asciidoc/tocbot-3.0.2/tocbot.js:133:2444: ""threshhold"" is a misspelling of ""threshold"" src/docs/asciidoc/tocbot-3.0.2/tocbot.js:133:2646: ""threshhold"" is a misspelling of ""threshold"" src/docs/asciidoc/tocbot-3.0.2/tocbot.js:133:2836: ""threshhold"" is a misspelling of ""threshold"" src/docs/asciidoc/web/webmvc-view.adoc:464:18: ""Tempalte"" is a misspelling of ""Template"" src/test/java/org/springframework/aop/framework/autoproxy/AdvisorAutoProxyCreatorIntegrationTests.java:46:32: ""managment"" is a misspelling of ""management"" src/docs/asciidoc/web/webmvc.adoc:3914:33: ""bandwith"" is a misspelling of ""bandwidth"" ```","closed","","seratch","2018-08-08T10:28:41Z","2018-08-08T14:13:22Z"
"","1822","Added Basic Authorization for UrlResource. Fixes gh-6138","This pull request adds Basic Authorization for UrlResource. This is fix for https://github.com/spring-projects/spring-boot/issues/6138","open","in: core,","x-x-z","2018-05-08T12:09:26Z","2021-11-11T09:57:40Z"
"","1774","MockHttpServletRequest return the requested Content-Type.","This PR updates MockHttpServletRequest does not overwrite Content-Type.  Issues: [SPR-16679](https://jira.spring.io/browse/SPR-16679)","closed","","ishiis","2018-04-02T15:36:13Z","2018-04-18T13:34:16Z"
"","1768","Rename SingleColumnRowMapperTest to align with the other tests","This PR renames `SingleColumnRowMapperTest` to align with the other tests.","closed","","izeye","2018-03-30T06:02:19Z","2018-03-30T10:53:33Z"
"","1819","Remove inconsistent spaces","This PR removes inconsistent spaces.","closed","","izeye","2018-05-05T05:24:38Z","2018-05-05T09:54:36Z"
"","1955","Remove duplicate assertions in AsyncExecutionTests","This PR removes duplicate assertions in `AsyncExecutionTests` which have already been covered with `until()` invocations.","closed","","izeye","2018-09-11T14:43:58Z","2018-09-11T15:24:06Z"
"","1843","Polish doc","This PR polishes the reference doc.","closed","","izeye","2018-05-31T00:24:41Z","2018-05-31T08:41:41Z"
"","1818","Polish DatabaseStartupValidator","This PR polishes `DatabaseStartupValidator`.","closed","","izeye","2018-05-05T04:54:29Z","2018-05-05T09:54:17Z"
"","1898","Polish DatabaseStartupValidator.afterPropertiesSet()","This PR polishes `DatabaseStartupValidator.afterPropertiesSet()` by:  - Removing an unnecessary local variable, `dataSource`. - Using `TimeUnit.sleep()`.","closed","","izeye","2018-07-26T13:25:56Z","2018-07-26T13:41:34Z"
"","1938","Polish","This PR fixes some typos and polishes trivial stuff.","closed","","izeye","2018-08-22T15:41:09Z","2018-08-23T13:10:48Z"
"","1811","Polish","This PR fixes some typos and polishes trivial stuff.","closed","","izeye","2018-04-26T15:36:08Z","2018-04-27T23:41:54Z"
"","1967","Fix trivial errors in core-beans documentation","This PR fixes some trivial errors in core-beans reference documentation","closed","","cac03","2018-09-25T16:56:48Z","2018-09-25T18:23:10Z"
"","1970","Fix trivial errors in data-access and core-aop docs","This PR fixes some syntax errors and typos in the reference documentation.  In particular if merged it will:  * Fix syntax error in core-aop docs which caused incorrect document generation * Surround @ Pointcut values with quotation marks * Replace 'I' with 'you' in the 'In the XML style I can declare the first two pointcuts' sentence * Fix compileror typo * Remove redundant parenthesis * Remove redundant commas * Add 'can' to the 'You configure additional aspects in similar fashion' sentence * Replace 'You can annotation any method' with 'You can annotate any method' * Add space to 'non-recoverablepersistence' * Replace 'we shows' with 'we show' * Fix 'java.utils.Map' typo * Add space to 'byusing' * Add space to '`Lifecycle`by' * Replace 'You cN' with 'You can' * Replace 'encourag' with 'encourage'","closed","","cac03","2018-09-30T18:24:40Z","2018-09-30T18:29:32Z"
"","1871","SPR-15404 Detailed RestTemplate http client/server error exceptions","This one has been discussed here: https://jira.spring.io/browse/SPR-15404  Fine-grained exceptions could make handling various HTTP errors more natural - see the JIRA issue details.","closed","","jerzykrlk","2018-07-06T17:38:48Z","2018-08-06T14:47:15Z"
"","1895","Eliminate ambiguity","This is a minor modification, but it can eliminate the original ambiguity.","closed","","vincenthsin","2018-07-25T03:42:32Z","2018-07-25T07:37:14Z"
"","1801","Added bean DSL function to get all beans of a given type","This is a DSL equivalent of autowiring a list of a bean type into a component.  The issue was originally raised in [this](https://stackoverflow.com/q/49936982/4465208) StackOverflow question, which contains a code example as well.","closed","","zsmb13","2018-04-20T08:34:29Z","2018-05-09T07:33:22Z"
"","1775","Fix '<=' symbol in SpEL documentation","This fix is already on the `master`.","closed","status: superseded,","fabriziocucci","2018-04-04T11:22:01Z","2021-11-24T14:26:30Z"
"","1951","Add Kotlin DSL for working with MockMvc","This DSL make working with `MockMvc` much cleaner.  Example:  ``` 	@Test 	fun json() { 		mockMvc.performGet(""/person/{name}"", ""Lee"") {    // 1 			builder { accept(MediaType.APPLICATION_JSON) } // 2 			printRequestAndResponse() // 3 			expect { // 4 				status { isOk } 				content { contentType(""application/json;charset=UTF-8"") } 				jsonPath(""$.name"") { value(""Lee"") } 				json(""""""{""someBoolean"": false}"""""", strict = false) 			} 		} 	} ```  Highlights: 1. Extension methods to mockMvc to start dsl 1. Builder block for configuring request 1. Useful equivalent to `andDo(print())` that avoids static imports 1. Expect block that highlights response expectations  This code is based on the work of @petrbalat and myself in https://github.com/petrbalat/kd4smt","closed","type: enhancement,","checketts","2018-09-06T13:06:24Z","2019-03-04T17:20:45Z"
"","1931","SPR-17194 - Change the type of parameters for expires and lastModified to long","This commit changes the type of parameters so that HeaderAssertions can assert expires and lastModified properly.  Issue: SPR-17194","closed","","making","2018-08-17T16:23:43Z","2018-09-05T21:30:55Z"
"","1949","SPR-17248 - Add API to retrieve the body of a request as a flux","This can be used to test SSE streams with the WebTestClient","closed","status: declined,","bkolb","2018-09-05T17:48:35Z","2019-11-08T18:27:45Z"
"","1829","SPR-16819 - Improve handling of unknown status codes by WebClient","These changes are aimed to improve handling of unknown status codes by reactive `WebClient`.  In `ClientResponse` the `getRawStatusCode()` method was introduced that allows to obtain raw status code value from response after the corresponding method in reactive `ClientHttpResponse` was provided (see [SPR-16748](https://jira.spring.io/browse/SPR-16748)).  Also the `retrieve()` method in default  `WebClient` implementation and `statusError()` in `ExchangeFilterFunctions` were changed in order to provide support of unknown status codes. The new `onStatusCode()` (`WebClient.ResponseSpec`) and `statusCodeError()` (`ExchangeFilterFunctions`) methods allow to specify exception function which should be applied on matching the status code (`int` value) against the specified predicate. The `StatusCodePredicates` provides convenient way to create predicates for these methods.  https://jira.spring.io/browse/SPR-16819","closed","","denysivano","2018-05-13T21:37:21Z","2018-07-12T19:43:27Z"
"","1836","Fix JMS Doc typo","There is no such class `ReplyQosSettings`.  __cherry-pick to 5.0.x__","closed","","garyrussell","2018-05-25T14:28:17Z","2018-06-08T16:38:24Z"
"","1899","Modify a parameter name in document","The “text” is more meaningful than ""test"" in context.","closed","","vincenthsin","2018-07-26T13:28:42Z","2018-07-26T15:45:19Z"
"","1833","SPR-16855 - Make FormHttpMessageWriter easier to extend","The serializeForm method of the FormHttpMessageWriter class is not easy to extend functionality, making a simple modification to make it easier to extend.","closed","","XYUU","2018-05-21T05:25:07Z","2018-06-13T21:27:29Z"
"","1762","Fix inclusion of license in jar","The path to license.txt and notice.txt is pointing to a non-existent directory.","closed","","rognan","2018-03-29T15:59:51Z","2018-03-29T16:33:50Z"
"","1856","Add instructions for importing into Eclipse using Buildship","The old instructions use an obsolete Gradle plugin and Buildship is the recommended tool for Eclipse users from Gradleware. It  provides a superior user experience (e.g. workspace classpath resolution).","closed","","dsyer","2018-06-12T17:15:46Z","2018-06-12T18:11:29Z"
"","1792","SPR-16738 Introduce new interface CacheDecorator.","The new interface allows users to customize the cache decorator of a given CacheManager. This new interface has 2 methods: one for decorating the cacheManager, and another one for checking whether or not the cache decoration should happen.  We now have a TransactionAwareCacheDecorator that implements the interface and the AbstractTransactionSupportingCacheManager uses it to configure the cache decoration.  All cache managers extending from AbstractTransactionSupportingCacheManager need new constructors and this is why the changes in EhCacheCacheManager and JCacheCacheManager are needed.  Finally TransactionAwareCacheDecorator has been renamed to TransactionAwareCache to correctly correspond with the implemented interfaces.","closed","","ptahchiev","2018-04-17T18:19:24Z","2018-05-03T13:37:48Z"
"","1823","Changed min accepted day of month to 1","The minimum accepted day was 0, but as the comment in the `setDaysOfMonth` method says, the days of month start with 1. So an invalid cron expression could be created, causing an exception in the `findNextDay` method.","closed","status: superseded,","ftoresan","2018-05-09T16:36:18Z","2021-11-24T14:30:59Z"
"","1780","Fixed inaccurate links to webflux.md","The link in the overall [Same in Spring MVC] section is incorrect and has been modified.","closed","","hojak99","2018-04-09T04:07:15Z","2018-04-09T08:37:08Z"
"","1779","Fixed inaccurate links to webflux.md","The link in the overall [Same in Spring MVC] section is incorrect and has been modified.","closed","","hojak99","2018-04-09T02:46:02Z","2018-04-09T04:04:38Z"
"","1857","fixed issue where expired timestamp on cookie.toString method produce…","The expires date is not correctly generated. The max age duration as seconds is added to the system time in millis.  @rstoyanchev - not sure if you already caught this ?","closed","","baskuis","2018-06-13T18:04:46Z","2018-06-14T17:21:24Z"
"","1923","Polishing javadocs: IllegalStateException no longer thrown","The dependency to Apache Commons has been removed in https://github.com/spring-projects/spring-framework/commit/51252ebbcaa9e65aee83311aec25ca3c7c6d7d37#diff-95dc9d8756aa91afb2ac28454f1b634c, but the javadoc still mentions it.","closed","","scadgek","2018-08-08T13:48:59Z","2018-08-08T13:51:35Z"
"","1859","SPR-16947: AbstractJackson2HttpMessageConverter incorrectly logs at WARN level after upgrading to Jackson 2.9","Support new exception message wording since Jackson 2.9  The wording changed from ""Can not find"" to ""Cannot find"" via https://github.com/FasterXML/jackson-databind/pull/1682  Issues: [SPR-16947](https://jira.spring.io/browse/SPR-16947)","closed","","mches","2018-06-17T01:19:50Z","2018-06-18T04:31:26Z"
"","1925","SPR-17170 - ObjectProvider offers ifAvailable/ifUnique variants with Function","SPR-17170","closed","","quaff","2018-08-13T04:11:36Z","2022-02-18T19:11:10Z"
"","1816","SPR-16789 Task ""docsZip"" copies duplicate reference files","Specify task ""docsZip"" source directory. Issue: SPR-16789","closed","","nkjackzhang","2018-05-03T07:21:32Z","2018-05-10T06:53:11Z"
"","1834","SPR-16856 - Allows the BodyExtractor and HttpMessageConverterExtractor to specify a correct MediaType to extract","Some server-side responses to ContentType are incorrect, but we expect to use the right way to extract data. Now I can specify a correct MediaType to extract.","closed","","XYUU","2018-05-21T06:54:46Z","2018-05-23T14:57:42Z"
"","1763","Polish: simplify boolean method return value","Simplify boolean literal statements wrapped into if-then-else ones. MethodReference.java - apply De Morgan's laws to simplify logical expression","closed","","igor-suhorukov","2018-03-29T20:18:18Z","2018-03-29T20:40:41Z"
"","1770","fix a error comment","ShallowETagHeaderFilter.generateETagHeaderValue  's comments is error, I fixed","closed","","snaigle","2018-03-30T08:20:43Z","2018-03-30T10:23:32Z"
"","1977","Optimize HTTP headers parsing","Several benchmarks underlined a few hotspots for CPU and GC pressure in the Spring Framework codebase:  * `org.springframework.util.MimeType.(String, String, Map)` * `org.springframework.util.LinkedCaseInsensitiveMap.convertKey(String)`  Both are linked with HTTP request headers parsing and manipulation during the request processing phase.  The first one is linked to repeated calls to `HttpHeaders.getContentType` within a single request handling. The media type parsing operation is expensive and the result doesn't change between calls, since the request headers are immutable at that point.  This commit improves this by caching the parsed `MediaType` for the `""Content-Type""` request header in the `ReadOnlyHttpHeaders` class. This change is available for both Spring MVC and Spring WebFlux.  The second one is linked to insertions/lookups in the `LinkedCaseInsensitiveMap`, which is the data structure behind `HttpHeaders`. Those operations are creating a lot of garbage (including a lot of `String` created by `toLowerCase`). We could choose a more efficient data structure for storing HTTP headers data.  As a first step, this commit is focusing on Spring WebFlux and introduces `MultiValueMap` implementations mapped by native HTTP headers for the following servers: Tomcat, Jetty, Reactor Netty and Undertow. Such implementations avoid unnecessary copying of the request headers and leverages as much as possible optimized operations provided by the native implementations.  This change has a few consequences:  * `HttpHeaders` can now wrap a `MultiValueMap` directly * The default constructor of `HttpHeaders` is still backed by a `LinkedCaseInsensitiveMap` * The HTTP request headers for the websocket HTTP handshake now need to be cloned, because native headers are likely to be pooled/recycled by the server implementation, hence gone when the initial HTTP exchange is done  Issue: SPR-17250","closed","","bclozel","2018-10-03T19:32:25Z","2022-01-31T20:19:05Z"
"","1978","SPR-17338. Do not throw ServerWebInputException when mandatory request parameter is present","ServerWebInputException is throw each time Http request with mandatory request parameters is handled in AbstractNamedValueArgumentResolver. Even though this does not brake request handling flow, exception (and stack trace)  is generated each time and it has performance impact.   The solution: Default value should be evaluated only if request parameter is empty:   [JIAR ticket](https://jira.spring.io/browse/SPR-17338)","closed","","DmytoMrachkovskyi","2018-10-04T16:27:44Z","2018-10-05T18:01:29Z"
"","1810","SPR-16773 fix NPE in error-buffered HttpUrlConnection","See https://jira.spring.io/browse/SPR-16773","closed","","MarkusKull","2018-04-26T11:35:04Z","2018-05-01T19:37:23Z"
"","1750","SPR-16627 - Address race condition within spring that causes about-to-be-created-bean exceptions","See full details here:  https://jira.spring.io/browse/SPR-16627","closed","","toaler","2018-03-22T22:44:40Z","2018-03-26T22:49:05Z"
"","1888","Polish WebSession javadoc","See [SPR-17051](https://jira.spring.io/browse/SPR-17051).","closed","","vpavic","2018-07-19T09:23:08Z","2018-07-19T09:29:27Z"
"","1889","Set SameSite default to Lax","See [SPR-16418 (comment)](https://jira.spring.io/browse/SPR-16418?focusedCommentId=160945&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-160945):  > Isn't `Strict` as a default value for `SameSite` attribute bit too aggressive? If site A issues a session cookie with `SameSite` set to `Strict` that would effectively mean that if users follows a link to site A from any other site, they wouldn't be logged in even though they have a valid session. This can be a bit confusing. > > See [this article](https://scotthelme.co.uk/csrf-is-dead/) for some considerations around the topic. The [owasp.org](https://www.owasp.org/index.php/SameSite) also supports Lax as default since it _provides a reasonable balance between security and usability_.  /cc @rwinch","closed","","vpavic","2018-07-20T21:30:22Z","2018-11-30T01:51:51Z"
"","1917","SPR-17123 - Revise StringUitls.collectionToCommaDelimitedString","Revised: StringUtils.collectionToCommaDelimitedString function.  issue: SPR-17123","closed","","rinx","2018-08-06T09:55:16Z","2018-08-06T12:12:38Z"
"","1884","5.0.x","research","closed","","zopfds","2018-07-13T08:16:49Z","2018-07-13T08:47:55Z"
"","1934","Fix usage of deprecated functionality in docs","Replaced calls to ChannelRegistration.setInterceptors to ChannelRegistration.interceptor. Replaced usage of ChannelInterceptorAdapter with ChannelInterceptor.","closed","","kylec32","2018-08-20T03:32:42Z","2018-08-20T07:45:48Z"
"","1789","Polishing for SPR-16710","Remove unnecessary modifier public for BookingController. Using WebMvcConfigurerAdapter instead of WebMvcConfigurer to avoid unimplemented methods error. Close context after test.","closed","","nkjackzhang","2018-04-12T09:13:39Z","2018-04-12T09:41:08Z"
"","1788","Polishing for SPR-16710","Remove unnecessary modifier `public` for `BookingController`. Using `WebMvcConfigurerAdapter` instead of `WebMvcConfigurer` to avoid unimplemented methods error.","closed","","nkjackzhang","2018-04-12T08:54:26Z","2018-04-12T09:32:40Z"
"","1776","SPR-16690 - Remove duplicate RestTemplate headers","Remove duplicate accept header information.  https://jira.spring.io/browse/SPR-16690","closed","","geo-m","2018-04-05T01:07:15Z","2018-04-12T20:38:56Z"
"","1965","Polish Aware Javadoc","Refer to method initializeBean of AbstractAutowireCapableBeanFactory is more appropriate than the class itself in context.","closed","","rupertw","2018-09-22T06:58:22Z","2018-09-29T15:07:19Z"
"","1783","Add support for Jetty Reactive Streams HTTP client","Ready to be reviewed before merging in `master` since I would like to begin having feedback with real applications using Spring Framework snapshots.  Notice that this PR is implemented with buffer copy instead of optimized buffer wrapping because the latter hangs since `Callback#succeeded` doesn't allow releasing the buffer and requesting more data at different times (required for `Mono` for example).  Simone is aware of that issue and will see if it can be changed on Jetty side (not sure yet). That could be changed with an additional commit if that becomes possible in the future.  Issue: [SPR-15092](https://jira.spring.io/browse/SPR-15092)","closed","","sdeleuze","2018-04-10T12:36:35Z","2021-04-28T09:57:17Z"
"","1916","5.0.x","pull the latest version","closed","","greenpupil","2018-08-03T08:47:48Z","2018-08-03T08:51:05Z"
"","1835","Merge class-level and method-level @Sql declarations","Pull request for #20570","closed","type: enhancement,","asympro","2018-05-25T13:35:11Z","2019-07-21T14:40:26Z"
"","1839","SPR-14818 - Implement MissingServletRequestAttributeException","Provides a way to programatically detect when specific attributes are not provided.","closed","","carterkozak","2018-05-28T00:29:26Z","2018-07-18T16:56:00Z"
"","1982","Fix construction of NullSafeComparator in nullsLow","Previously, both nullsLow(Comparator) and nullsHigh(Comparator) returned a NullSafeComparator which treated nulls as being high. This commit corrects the typo in nullsLow.","closed","","Homlet","2018-10-05T11:16:34Z","2018-10-05T11:21:12Z"
"","1880","Fix typo","Previously committed to wrong branch. Sorry...  Apparently, this is an Obvious Fix.","closed","","GuiRitter","2018-07-10T13:31:34Z","2018-07-10T13:49:23Z"
"","1979","Fix formatting","Prefix the opening brace with a single space in some classes. Replace tab character with space in javadoc of AttributeAccessor. Also fix some other trivial formatting errors.","closed","","rupertw","2018-10-04T17:52:49Z","2018-10-05T07:56:41Z"
"","1838","Protect getters consistently in AbstractRequestLoggingFilter","Picked it up when writing some code in a Kotlin app.","closed","","lwis","2018-05-25T20:21:22Z","2018-05-29T20:05:41Z"
"","1903","SPR-17074 pass argument of addAll/putAll into constructor","Pass argument of `Collection::addAll`/`Map::putAll` directly into constructor. This is shorter and allocates collection/map of exact size","closed","","stsypanov","2018-07-26T20:15:07Z","2018-07-30T19:33:20Z"
"","1786","Fix CorsWebFilter of WebFlux example","pass `new PathPatternParser()` to `UrlBasedCorsConfigurationSource` constructor","closed","","Jim-Lin","2018-04-11T07:30:27Z","2018-04-11T09:53:53Z"
"","1813","fix a typo","origin: Different types of advice include ""around,"" ""before"" and ""after"" advice. (Advice types are discussed below.)   fixed: Different types of advice include ""around"", ""before"" and ""after"" advice. (Advice types are discussed below.)","closed","","Nickolas-Evans","2018-04-28T08:50:08Z","2018-04-28T08:54:30Z"
"","1804","Fix typo","Obvious Fix Fix broken navigation links.","closed","","hasheniuk","2018-04-23T22:27:47Z","2018-04-24T08:17:34Z"
"","1887","Update webflux-functional.adoc","Obvious Fix  Correct method signature in code example.","closed","","crewmanmud","2018-07-17T22:04:35Z","2018-08-08T16:10:51Z"
"","1926","Use an import instead of FQCN","No that JCacheCache extends AbstractValueAdaptingCache instead of directly implementing Cache an import statement can be used in favor of using the FQCN for the field and constructor arguments.","closed","","mdeinum","2018-08-13T08:18:19Z","2018-08-13T08:23:54Z"
"","1800","Implement a ClientHttpRequestFactory which uses AsyncHttpClient","My team have implemented a ClientHttpRequestFactory which uses  AsyncHttpClient for async http calls.","closed","","bino013","2018-04-20T02:19:03Z","2018-05-02T14:57:47Z"
"","1808","SPR-16771 - prevent useless init in DefaultWebClientBuilder","Move init of exchangeStrategies to default ctor in DefaultWebClientBuilder  When the copy constructor is used the exchangeStrategies need not to be initialized as they are set in the copyconstructor  fixes SPR-16771","closed","","joshiste","2018-04-25T19:14:01Z","2018-04-26T08:31:10Z"
"","1945","SPR-17219 - Use completionService to replace of ExecutorService","modify the implement of submit method","closed","in: core,","qudh1","2018-08-27T06:18:35Z","2021-11-24T14:44:17Z"
"","1773","minor changes","minor changes","closed","","akanaya","2018-04-02T14:42:47Z","2018-04-02T14:48:44Z"
"","1904","Merge pull request #1 from spring-projects/master","merge","closed","","imyuyu","2018-07-27T08:21:52Z","2018-07-27T08:36:06Z"
"","1744","SPR-16608 - Builder class for RequestEntity.","Makes it easier to use with restTemplate and build more readable http clients.","closed","","andrebonna","2018-03-18T01:46:29Z","2018-03-19T12:59:01Z"
"","1802","Put CacheControl.empty() in else part.","Make sure the constructor of `CacheControl` being invoked only once. Add a blank line after this part.","closed","","nkjackzhang","2018-04-20T10:22:20Z","2018-05-10T06:48:44Z"
"","1874","section 3.2.5 : typo correction","Kindly review: Corrected a typo for section 3.2.5.  Was : each **entry** in the map   Should be : each **key** in the map","closed","","akmalick","2018-07-08T10:17:46Z","2018-07-08T12:39:05Z"
"","1828","[SPR-16816] Catching quartz fails to initialize, shutdown scheduler and rethrows","jira: https://jira.spring.io/browse/SPR-16816  For some reason, there is an occasional exception arise from database queries when using quartz's cluster mode. when this exception occurs, the Spring container will close and exit, leaving Java Process suspending.  If an exception is thrown in `afterPropertiesSet`, the `destroy` method will not be called, subsequently, these threads will not be closed in the meanwhile.  So I prepare to catch the invocation of `registerJobsAndTriggers` and manually call the destroy method when it throwing an exception.","closed","","ScienJus","2018-05-13T05:16:48Z","2018-05-15T22:51:52Z"
"","1927","Use an import instead of FQCN in StaxStreamXMLReader","javax.xml.stream.Location is already there as an import there is no need to use the FQCN in the handleDtd method.","closed","","mdeinum","2018-08-13T08:36:57Z","2021-04-29T15:57:15Z"
"","1820","Change method signature to return covariant type","It is more convenient to get a MethodSignature as a return type instead of SIgnature since it is a method invocation proceeding join point.","closed","","olegponomarev","2018-05-06T00:38:37Z","2018-05-07T10:58:45Z"
"","1862","SPR-16957 - Shared ByteBufferPool for Undertow WebSocket sessions","Issues: SPR-16957  https://jira.spring.io/browse/SPR-16957","closed","","napstr","2018-06-20T18:00:43Z","2018-06-25T21:40:45Z"
"","1919","Add backslash escape support to containsSqlScriptDelimiters","Issue: SPR-17120  This change makes containsSqlScriptDelimiters keep track of backslash escapes while it determines if the current character is inside a literal.  N.B backslash escaped quotes are supported by MySQL / MariaDB but I don't believe they're supported by HSQLDB.","closed","","geordiecoder","2018-08-06T19:56:27Z","2018-08-13T12:57:58Z"
"","1906","Fix typo in notes on future deprecation of the RestTemplate","Issue: SPR-16993  Obvious Fix","closed","","PascalSchumacher","2018-07-27T17:10:41Z","2018-07-27T18:13:31Z"
"","1905","Fix typo in notes on future deprecation of the RestTemplate (Obvious Fix)","Issue: SPR-16993","closed","","PascalSchumacher","2018-07-27T17:08:35Z","2018-07-27T17:12:00Z"
"","1805","SPR-16766 - Improve performance of StringUtils#trimWhitespace","Issue: SPR-16766 Cutting whitespaces once prevents calling System#arrayCopy on every deleted char. With using String#substring method it would be called just once.","closed","","hasheniuk","2018-04-24T19:11:18Z","2018-05-01T09:16:35Z"
"","1749","FactoryBeanRegistrySupport atomicity issues","Issue: SPR-16625","closed","","lmagyar89","2018-03-22T20:12:19Z","2018-07-03T16:18:32Z"
"","1745","Refactor concurrency within org.springframework.beans.factory.support.DefaultSingletonBeanRegistry","Issue: SPR-16620","closed","","lmagyar89","2018-03-20T23:59:34Z","2018-07-03T16:18:34Z"
"","1787","SPR-15859 - Restore org.springframework.cglib.core.KeyFactoryCustomizer.class","Issue: SPR-15859","closed","","aspan","2018-04-11T13:31:18Z","2018-04-11T13:43:12Z"
"","1908","SPR-17105 HttpMethod improvement: stop resizing inner map during initialization.","Issue: https://jira.spring.io/browse/SPR-17105  Putting all 8 values in the map triggers map's resizing (when it's filled with 6 values), which could be avoided, changing load factor to 1.","closed","","stefankiv","2018-07-30T13:08:58Z","2018-07-30T16:55:39Z"
"","1847","Introduce Stream support in PropertySources","Issue: https://jira.spring.io/browse/SPR-16894","closed","","dreis2211","2018-06-03T11:44:45Z","2018-07-05T22:00:47Z"
"","1761","Optimize ClassUtils.forName() for more cases","Issue: https://jira.spring.io/browse/SPR-16667","closed","","dreis2211","2018-03-29T15:47:13Z","2018-03-30T10:53:02Z"
"","1747","Use Collection.removeIf() where possible","Issue: https://jira.spring.io/browse/SPR-16622","closed","","dreis2211","2018-03-22T08:26:38Z","2018-03-22T10:37:09Z"
"","1913","SPR-17110 - Add support for adding cookies as headers in MockHttpServletResponse","Issue: [SPR-17110](https://jira.spring.io/browse/SPR-17110)","closed","","vpavic","2018-08-01T12:51:18Z","2018-08-03T15:06:54Z"
"","1912","SPR-17109 - Publish binding event for replaced attributes in MockHttpSession","Issue: [SPR-17109](https://jira.spring.io/browse/SPR-17109)","closed","","vpavic","2018-08-01T11:01:19Z","2018-08-01T11:22:31Z"
"","1767","Upgrade to Gradle 4.6","Issue: [SPR-16475](https://jira.spring.io/browse/SPR-16475)  This required a change in spring-beans.gradle due to a change in Gradle.   The commit where Gradle changed the field ```values``` to ```mutableValues``` and ```immutableValues``` can be [found here](https://github.com/gradle/gradle/commit/12ef6b4fb67d6a1fe4a1957b07b35971765ab9b0#diff-f23ae203a040e535b062a9ea165a12b9).  The commit where Gradle changed the method ```getValues``` to ```getMutableValues``` can be [found here](https://github.com/gradle/gradle/commit/e80043aaebf4e9416f9c62a0a01107c2d957f1f3#diff-f23ae203a040e535b062a9ea165a12b9)","closed","","rognan","2018-03-30T02:50:26Z","2018-04-04T17:40:53Z"
"","1831","WIP: Update to the new Reactor Netty API","Issue: [SPR-16387](https://jira.spring.io/browse/SPR-16387)","closed","","violetagg","2018-05-17T19:34:15Z","2018-06-01T19:12:17Z"
"","1954","Option to create Exception response to MockRestResponseCreators","Issue: [SPR-14458](https://jira.spring.io/browse/SPR-14458). This accommodates for a `SocketTimeoutException` happening during calling of the `RestTemplate` that has a `MockRestServiceServer` bound to it. The only other way that I could find to do this is by doing the following:  ```java RestTemplate restTemplate = new RestTemplate(); restTemplate.setInterceptors(Collections.singletonList(new MyWhackoPersonalInterceptor())); SimpleClientHttpRequestFactory requestFactory = new SimpleClientHttpRequestFactory(); requestFactory.setConnectTimeout(1); requestFactory.setReadTimeout(1); restTemplate.setRequestFactory(requestFactory); MockRestServiceServer mockServer = MockRestServiceServer.bindTo(restTemplate)     .build(); mockServer.expect(requestTo(""/something"")).andRespond(     request -> {         try {             Thread.sleep(5000);         } catch (InterruptedException e) {}         return new MockClientHttpResponse(""{}"".getBytes(), HttpStatus.OK);     } );  restTemplate.getForEntity(""/something"", String.class); ```  which would contain considerable redundancy between this declaration and potential future declarations. Do you have any thoughts on this change?","closed","in: web,","chtompki","2018-09-09T21:09:13Z","2019-11-19T15:27:55Z"
"","1814","isNotEmpty methods for Collection,Object,String Utils","isNotEmpty methods for following classes- 1) CollectionUtils 2) ObjectUtils 3) StringUtils","closed","","omkar9999","2018-04-29T03:10:12Z","2018-04-29T08:02:05Z"
"","1850","Add JDBC SqlValue classes for arrays","Introduce two SqlValue classes for more convenient use of arrays from Spring JDBC.  - AbstractSqlArrayValue abstract base class for array values - SqlArrayValue concrete implementation class that uses JDBC 4.0 to   create an array  Issue: SPR-16904","open","type: enhancement,","marschall","2018-06-05T05:28:12Z","2021-12-21T09:25:48Z"
"","1986","Refactor the handleNullValue method","Instead of nesting all the logic inside an if when the variable value is null, that statement is eliminated, improving the readability, eliminating the indentation.","closed","","arnoldmartinez","2018-10-09T20:55:45Z","2018-10-10T09:23:35Z"
"","1976","Leverage ObjectProvider instead of autowired containers","In order to be able to leverage WebFlux configuration in a functional way, `WebHttpHandlerBuilder` and `RouterFunctionMapping` should leverage new `ObjectProvider` capabilities to get a sorted list of beans by type instead of using autowired containers.  @bclozel @jhoeller After a second look, it is not required to refactor [`DelegatingWebFluxConfiguration`](https://github.com/spring-projects/spring-framework/blob/master/spring-webflux/src/main/java/org/springframework/web/reactive/config/DelegatingWebFluxConfiguration.java) since in functional mode the autowired setter can be called externally using `ObjectProvider` capabilities + I don't think we could reach consistent design via a constructor approach.  @poutsma Are you ok with these changes?  Issue: [SPR-17327](https://jira.spring.io/browse/SPR-17327)","closed","","sdeleuze","2018-10-03T09:24:48Z","2018-10-03T12:51:04Z"
"","1758","SPR-16663 - Update NamedParameterUtils.parseSqlStatement","In my opinion, we should parse `:{x}` style parameter as `x` is parameter using `NamedParameterUtils.parseSqlStatement`, so the condition `j - i > 2` is the correct condition, not `j - i > 3`, because if `i` is the index of `:` in `:{x}`, and `j` is the index of `}` in `:{x}`,  `j - i == 3` is true. Also add a test case for SPR-16663.","closed","","nkjackzhang","2018-03-29T04:00:32Z","2018-03-30T03:57:20Z"
"","1772","Add cpp to mime.types","In most cases, the extend name of ""c++"" file is`cpp`, not `c++`.","closed","","nkjackzhang","2018-04-02T12:00:27Z","2018-04-04T01:47:15Z"
"","1928","Proxy support for Netty4ClientHttpRequestFactory","Implementation for https://jira.spring.io/browse/SPR-17175  @rstoyanchev please take a look","closed","status: declined,","fred84","2018-08-14T15:00:52Z","2020-04-02T15:18:25Z"
"","1909","SPR-16989 Response body limit filter","Implementation for https://jira.spring.io/browse/SPR-16989 .This is default implementation without throwing exception on response size limit exceed.  @rstoyanchev please take a look.","closed","","fred84","2018-07-30T16:48:54Z","2018-08-02T18:31:55Z"
"","1958","Refactor String#replaceAll","If we repeatedly call String#replaceAll, we internally repeatedly call the regular expression pattern compilation every time as following: ```java     public String replaceAll(String regex, String replacement) {         return Pattern.compile(regex).matcher(this).replaceAll(replacement);     } ``` The modifications are to keep the compiled pattern. Therefore, compiling a relatively expensive regular expression pattern does not have to be done every time.","closed","","durigon","2018-09-16T04:57:25Z","2018-09-18T07:03:12Z"
"","1807","Avoid message listener recovery in case of persistence exceptions from external transaction manager","If we get an exception, but the transaction completed, log to indicate we rolled back the transaction, but do not re-throw the exception. If the transaction did not complete, then throw the exception as there was likely an infrastructure failure and this listener needs to retry.","closed","type: enhancement,","drewtul","2018-04-25T11:40:05Z","2022-01-19T15:15:52Z"
"","1882","modify constructor of class CustomNumberEditor","if numberClass is a subclass of Number, then the constructor determines that the Number subclass is not required.","closed","","archervanderwaal","2018-07-11T15:03:40Z","2018-07-23T12:28:36Z"
"","1881","Polishing","If MethodMatcher matches false,get methodInterceptor will be unnecessary; so we should  get methodInterceptor only when MethodMatcher matches true.","closed","","plx927","2018-07-11T01:41:43Z","2018-07-18T10:46:16Z"
"","1873","improve performance of projection instantiation","I've run into poor performance of projection creation with Spring Data JPA. Using async profiler I've measured 10 hottest methods for my particular case: ```           ns  percent  samples  top   ----------  -------  -------  ---   1719680599   17.75%     1719  org.springframework.util.ConcurrentReferenceHashMap.calculateShift   1075919136   11.11%     1076  org.springframework.util.ConcurrentReferenceHashMap.    995216304   10.27%      995  org.springframework.aop.framework.JdkDynamicAopProxy.findDefinedEqualsAndHashCodeMethods    549197362    5.67%      549  java.util.LinkedList.toArray    505954398    5.22%      506  java.lang.String.regionMatches    441133709    4.55%      441  java.util.concurrent.ConcurrentHashMap.get    187450280    1.93%      187  /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/server/libjvm.so    166974974    1.72%      167  java.util.ArrayList$Itr.    160991064    1.66%      161  org.springframework.aop.framework.JdkDynamicAopProxy.getProxy    155019312    1.60%      155  org.apache.logging.slf4j.SLF4JLogger.isEnabledFor ```  The simple way to slightly improve this is to get rid of `LinkedList` in `org.springframework.aop.framework.AdvisedSupport` and use plain constructor call in `org.springframework.util.ConcurrentReferenceHashMap.`.  `LinkedList::toArray` is obviously slower than `ArrayList::toArray`.  In `ConcurrentReferenceHashMap`  method `createReferenceArray` can use plain constructor to instantiate array which yields equal performance when compiled with C2 but 3 times better performance in interpreter mode.","closed","","stsypanov","2018-07-07T21:28:44Z","2018-07-18T18:31:04Z"
"","1875","SPR-17019 - Background init tasks via @Scheduled(cron=""@start"")","I would like to use `@Scheduled` to perform some initialization tasks in background. The syntax is inspired by `@reboot` in `crontab`.  https://jira.spring.io/browse/SPR-17019  WDYT?","open","in: core,","panchenko","2018-07-08T19:19:10Z","2021-11-10T12:03:12Z"
"","1848","Prevent instantiation of AnnotatedElementUtils","I think. The Util class should not be able to create objects. So I added the abstract keyword to the AnnotatedElementUtils class","closed","","cheese10yun","2018-06-03T17:44:47Z","2018-09-14T17:31:53Z"
"","1915","[DOC] Delete MockServer when using RestTemplate with MockMvc","I think the `mockServer.verify()` call shouldn't be in this example (as I don't see it defined) but please ignore if I'm wrong.","closed","","jasssonpet","2018-08-02T15:37:01Z","2018-08-03T07:08:31Z"
"","1907","Specify param nullability in ModelAndView and ModelMap","I think no need to file JIRA ticket for this?  And a question: The javadoc of `ModelMap#containsAttribute` says `attributeName` should be never null, but it's safe to pass in a null value (no exception thrown). So should it have `@NonNull` ?","closed","","sorra","2018-07-28T10:38:10Z","2018-07-31T08:19:27Z"
"","1892","Polishing","I think AspectJProxyFactory is the extension of ProxyFactory,AspectJProxyFactory can reuse the functionality of ProxyFactory; but i found both class has such method: ```   public  T getProxy()   public  getProxy(ClassLoader classLoader) ``` so i make AspectJProxyFactory extends ProxyFactory directly, eliminate duplicate code. In addition, i add a convenience method that create Proxy in ProxyFactory, though ProxyFactory has some convenience method by TargetSource, its not useful, because common developer may not what is TargetSource，TargetSource is inner API, but they know target object。","closed","","plx927","2018-07-21T12:26:13Z","2018-07-22T18:16:49Z"
"","1935","4.3.x","I read 4.3.18 docs,  when I use Instantiation with a static factory method if the method is  static method,it is can not create a bean the method  method must be not a static method.  mycode  public class PersonFactory {     private PersonFactory(){}     private static Person person = new Person(1);      public Person createPerson() {         return person;     }  }  xml","closed","","xuweiming","2018-08-21T04:37:06Z","2018-08-21T07:07:47Z"
"","1959","4.0.x","i need source code,thank you!","closed","","Tomcatss","2018-09-16T10:06:39Z","2018-09-18T16:48:17Z"
"","1941","Spr-17211 - async tests refactoring","I fixed the problem with a fragile tests for **asynchronous events.**   Also I add the **AsyncAssert** utility for write an asynchronous test with a better performance than test which use a **Thread.sleep(1000)**  I've a next result for pass of changed tests on my computer: before **~30 sec.** after  **~12 sec.**","closed","","antkorwin","2018-08-24T06:36:37Z","2018-09-04T12:53:38Z"
"","1942","Editing pass for the core content","I finished editing the remaining core content (got some of it last week). I edited for the usual stuff: spelling, punctuation, grammar, formatting, usage, and vvoice.","closed","","Buzzardo","2018-08-24T21:23:26Z","2018-09-18T09:40:06Z"
"","1964","Editing pass for the integration and languages chapters.","I edited for spelling, puncutation, grammar, usage, and corporate voice. I also added a bunch of cross-references and links to the Javadoc.  I also corrected the rendering problems that I had accidentally created in previous commits (because I was adjusting headings and adding callouts to listings.","closed","","Buzzardo","2018-09-21T21:17:11Z","2018-09-24T08:58:59Z"
"","1930","Editing pass for the Spring Framework Reference Guide","I edited for spelling, punctuation, grammar, usage, and corporate voice. I also added cross-references and links to the Javadoc in a number of places.  I plan to add more commits to this PR as I work through more files.","closed","","Buzzardo","2018-08-16T20:49:28Z","2018-08-23T08:58:32Z"
"","1827","SPR-16812 extract createRunnable() in ScheduledAnnotationBeanPostProcessor","I am interested in overriding this method and having some custom logic in it. At the moment this project uses 4.3, so it would be nice it this change is backported.  ~Please let me know if this change is trivial enough or if I should create a ticket.~  https://jira.spring.io/browse/SPR-16812","closed","","panchenko","2018-05-11T11:06:55Z","2018-06-14T05:58:49Z"
"","1962","#SPR-17286 fix proposal","https://jira.spring.io/browse/SPR-17286","closed","","Emmenemoi","2018-09-18T17:32:16Z","2018-09-18T19:17:01Z"
"","1950","SPR-17223 - Support for methods that are declared in interfaces and implemented in super class","https://jira.spring.io/browse/SPR-17223","closed","in: core,","s-mop","2018-09-06T03:26:31Z","2021-12-03T11:23:15Z"
"","1943","SPR-17215 - prevent instantiation of utility classes","https://jira.spring.io/browse/SPR-17215  I think the utility class should not create objects. Most utility classes in the Spring Framework are therefore abstract classes. But SocketUtils, NamedParameterBatchUpdateUtils and ReflectUtils are not abstract classes. I added the abstract keyword to these classes, to prevent instantiation and to adapt coding conventions.","closed","","sjh836","2018-08-26T14:42:07Z","2018-08-27T13:35:16Z"
"","1861","SPR-16956 - Propagate read-only status as FlushMode.MANUAL to Hibernate Session","https://jira.spring.io/browse/SPR-16956","closed","","vladmihalcea","2018-06-19T09:08:35Z","2018-07-05T22:06:27Z"
"","1798","Handle null as null in Yaml","https://jira.spring.io/browse/SPR-15425","closed","","candrews","2018-04-18T20:44:04Z","2018-08-24T08:40:13Z"
"","1932","WIP: CaffeineCacheManager: Allow configuration of custom caches","Hi,  This pull request is a work in progress suggestion how the CaffeineCacheManager could be extended to allow the configuration of individual caches. Currently it's only possible to provide a global configuration for the CacheManager (or use a workaround and utilize multiple CacheManager Instances). In one of our projects we need to provide a way that we can add / change caches through configuration-files (using spring-boot).  I started a discussion on [Stackoverflow](https://stackoverflow.com/questions/51890588/configuration-for-specific-caffeine-caches-in-spring) and there is already at least one other [pull-request](https://github.com/spring-projects/spring-framework/pull/1506) which was not updated in the last months. Although #1506 does also deal with the issue, I tried to keep and extend the existing functionality.   This PR is currently WIP which requires some 'external' input on the idea and I would be grateful for any feedback.   Cheers","closed","","deveth0","2018-08-18T13:45:55Z","2019-01-07T08:18:43Z"
"","1879","4.3.x","Hi","closed","","ra2ldip","2018-07-10T12:20:40Z","2018-07-10T12:24:50Z"
"","1785","Remove unnecessary iterator allocation in type handlers","HandlerMethodReturnValueHandlerComposite and AbstractMethodMessageHandler iterate using index over collections implementing RandomAccess to avoid unnecessary iterators.","closed","","carterkozak","2018-04-10T22:59:35Z","2018-04-12T01:55:08Z"
"","1769","Fix the wrong link typo","From `mvc-special-bean-types` to `mvc-servlet-special-bean-types`","closed","","linzhaoming","2018-03-30T08:00:59Z","2018-03-30T10:26:06Z"
"","1953","SPR-17255 - Fix typo on javadoc","fixes: SPR-17255 `ForwardedHeaderFilter` instead of `ForwardedHeaderFiller`","closed","","rfigueroa","2018-09-07T15:51:34Z","2018-09-07T16:00:08Z"
"","1910","Fix documentation","Fix wrong corresponding return code of SC_NOT_FOUND","closed","","unlimitedsola","2018-07-30T21:17:23Z","2018-07-30T21:33:49Z"
"","1937","Update CONTRIBUTING.md","Fix typo","closed","","hengyunabc","2018-08-22T10:34:21Z","2018-08-22T11:04:17Z"
"","1902","Update PropertySourcesPlaceholderConfigurer.java","Fix the error message when PropertySources are not applied","closed","","bytekoder","2018-07-26T18:38:06Z","2018-07-26T18:49:33Z"
"","1974","SPR-17321","Fix MockCookie parsing when attribute is omitted.","closed","","mikebell90","2018-10-01T20:48:55Z","2018-10-02T11:22:45Z"
"","1781","Fix java 9 link","Fix java 9 Link","closed","","hojak99","2018-04-09T08:37:33Z","2018-04-09T09:14:19Z"
"","1812","Fix broken anchor link.","Fix broken anchor link.","closed","","nkjackzhang","2018-04-27T02:58:16Z","2018-05-10T06:53:00Z"
"","1837","SPR-16837 - When remove a bean, and then remove this bean's alias","fix a bug : https://jira.spring.io/projects/SPR/issues/SPR-16837?filter=allopenissues","closed","status: declined,","fomeiherz","2018-05-25T17:15:06Z","2021-12-21T10:47:16Z"
"","1948","SPR-17233 - Fix `ListBasedXMLEventReader.getElementText()`","Fix `ListBasedXMLEventReader.getElementText()`","closed","","aholowko","2018-09-01T14:36:29Z","2018-09-07T10:17:03Z"
"","1755","Use Map.forEach instead of manual Map.Entry iteration wherever possible","Fix  ""entrySet() should be iterated when both the key and value are needed"" and then apply  [Map.forEach refactoring](https://jira.spring.io/browse/SPR-16646)","closed","","igor-suhorukov","2018-03-27T22:57:43Z","2018-03-27T23:09:04Z"
"","1753","SPR-16642 - DefaultMessageListenerContainer JMS Pool leak with CACHE_CONSUMER and Bitronix in error path","f the error handling path in the DefaultMessageListenerContainer the JMS connection is closed and re-opened.  Combining this with CACHE_CONSUMER with bitronix results in an error from DualSessionWrapper due to the Connection being involved in multiple XA transactions during the close attempt, which bitronix rejects and DMLC logs, swallows and continues.  This results in the Connection not being closed and a new Connection obtained from the bitronix pool resulting in a gradual leak from the pool.  Utilising dedicated connections alleviates this and enables CACHE_CONSUMER to function without issue. So making this a configuration option to not use the shared connection whilst CACHE_* is enabled means we can avoid this path and only have a single thread using a dedicated connection avoiding the multiple active transaction close issue.","closed","","drewtul","2018-03-26T16:54:51Z","2018-03-28T10:56:17Z"
"","1894","polishing","Double check cachedAdvisorBeanNames, to prevent use synchronized each time.","closed","","plx927","2018-07-24T13:57:16Z","2018-07-24T14:48:12Z"
"","1914","SPR-17074 Replace pointless wrapping with Arrays.asList with iteration over array","Don't wrap array into `Arrays.asList` for iteration where simple counting loop can be used.","closed","","stsypanov","2018-08-02T09:57:05Z","2018-08-26T18:29:57Z"
"","1963","Allow configuration of Jetty WebSocket's max receive packet size","Currently, Jetty's WebSocket packet size for receive direction is limited by a constant (DEFAULT_FRAME_MAX_SIZE = 64Kb). This causes a problem while receiving e.g. multimedia contents such as jpg images. The pull requests tries to provide a configuration of this max packet size.  Honesty, I am not sure if it is the best idea using @Value annotation. But at least, this pull request shows the demand for a proper configuration.","closed","","botorabi","2018-09-19T13:11:58Z","2018-12-24T08:53:35Z"
"","1920","SPR-17133: Fix content negotiation","Currently the content negotiation process does not include media type parameters as HTTP RFC shows it should. This PR to implement changes as described by https://jira.spring.io/browse/SPR-17133.","closed","","jam01","2018-08-06T21:12:27Z","2018-08-16T13:40:50Z"
"","1806","Fix typos.","Consist with the ""xml code"" example in next part.","closed","","nkjackzhang","2018-04-25T07:10:45Z","2018-04-25T10:17:40Z"
"","1966","SPR-17299 - Fix javadoc error","Comments on applying the annotation Autowired to constructor are error, we can refer to the javadoc of class AutowiredAnnotationBeanPostProcessor for correct description.  Issue: SPR-17299","closed","","rupertw","2018-09-23T17:52:45Z","2018-09-29T15:05:59Z"
"","1985","SPR-16931: Unable to use Kotlin enums with @Validated beans","Can this solve the issue?   Description of the solution at [Spring JIRA](https://jira.spring.io/browse/SPR-16931?focusedCommentId=162542&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-162542)","closed","","ruslanys","2018-10-09T15:28:30Z","2018-10-16T15:10:48Z"
"","1760","Polish: remove unreachable statement","Branch can not be reached because the condition duplicates a previous condition in the same sequence of ""if/else if"" statements from [line 109](https://github.com/igor-suhorukov/spring-framework/blob/d2f9090766a3f4f92266de7a0552b23ae1a05f60/spring-expression/src/main/java/org/springframework/expression/spel/ast/TypeReference.java#L109)","closed","","igor-suhorukov","2018-03-29T07:04:46Z","2018-03-29T13:04:06Z"
"","1842","Use correct access for execute(Map parameters)","Because `execute(Map parameters)` actually has `public` access.","closed","","nkjackzhang","2018-05-30T03:30:19Z","2018-05-30T09:27:20Z"
"","1824","Fix a typo in javadoc","And use {@code} instead.","closed","","nkjackzhang","2018-05-10T06:57:44Z","2018-05-14T10:55:23Z"
"","1746","SPR-16630 - Delete white space befor and after the delimiter","An error occurs if a blank character exists before and after the delimiter of the MIME type parameter.  example: ``` Caused by: org.springframework.util.InvalidMimeTypeException: Invalid mime type ""multipart/x-mixed-replace;boundary = --myboundary"": Invalid token character ' ' in token ""boundary "" 	at org.springframework.util.MimeTypeUtils.parseMimeType ```","closed","","toru-s","2018-03-22T06:03:58Z","2018-03-28T00:07:29Z"
"","1960","Fix DefaultHandlerExceptionResolver Javadoc comments to match behaviour","An ""obvious fix"".   Most notably, a `MissingServletRequestParameterException` actually results in a 400 response, not 500.","closed","","simonbowring","2018-09-17T10:15:53Z","2018-09-17T10:42:23Z"
"","1741","Support Kotlin parameter default values in handler methods","Allows using default parameter values for any method parameters resolved via `AbstractNamedValueMethodArgumentResolver`, similar to `defaultValue` parameter of e.g. `@RequestParam` annotation, but skipping the converter chain.  Issues: [SPR-16598](https://jira.spring.io/browse/SPR-16598).","closed","","diesieben07","2018-03-16T00:19:01Z","2022-02-18T19:11:09Z"
"","1846","SPR-16891 allow multi send","Allow users to specify both send to and send to user annotations (possibly multiple) for an endpoint.","closed","","bulletshot60","2018-06-01T18:00:22Z","2018-06-11T16:48:53Z"
"","1980","Use custom set of beans rather than all beans for EventListener candidates","Allow applications to specify a custom set of beans rather than the default implementation for EventListener candidates","closed","in: core,","rahulsh1","2018-10-05T01:52:45Z","2021-11-24T14:41:27Z"
"","1981","Memoized implementation of PathMatchingResourcePatternResolver","Allow applications that use uber jar to benefit from cached entries rather than using the slow jar lookup  for component scanning.","closed","in: core,","rahulsh1","2018-10-05T03:15:03Z","2021-11-16T12:19:17Z"
"","1797","SPR-16741 - Provide XML assertions in WebTestClient","Adds XML-based assertions in `org.springframework.test.web.reactive.server.WebTestClient.BodyContentSpec` for asserting against the XML body as well as xPath, similar to those assertions offered when using `MockMvcResultMatchers.xpath()`.  Issue: [SPR-16741](https://jira.spring.io/browse/SPR-16741)","closed","","edeandrea","2018-04-18T18:09:21Z","2018-07-21T02:31:07Z"
"","1940","Support both view and filters for Jackson 2","Adds support for combining view and filters in AbstractJackson2HttpMessageConverter instead of only using view if both are defined.  Issue: SPR-17209","closed","","Raniz85","2018-08-23T14:17:52Z","2018-08-24T10:03:51Z"
"","1793","SPR-16729 - Add generic matches assertion to JsonPathAssertions","Adds a generic matches assertion to JsonPathAssertions that can use a generic Hamcrest Matcher.  Issue: SPR-16729","closed","","edeandrea","2018-04-17T19:36:56Z","2018-04-18T07:23:14Z"
"","1794","SPR-16729 - Add generic matches assertion to JsonPathAssertions","Adds a generic matches assertion to JsonPathAssertions that can use a generic Hamcrest Matcher.  Issue: [SPR-16729](https://jira.spring.io/browse/SPR-16729)","closed","","edeandrea","2018-04-17T19:51:48Z","2018-07-21T02:32:23Z"
"","1791","Fix probable typo in javadoc","Add missing letter","closed","","nkjackzhang","2018-04-13T11:07:14Z","2018-04-13T16:28:31Z"
"","1795","Fix typo in javadoc","Add missing character.","closed","","nkjackzhang","2018-04-18T09:24:40Z","2018-04-18T10:01:29Z"
"","1924","SPR-17140 - Add method flushMessageBuffer to ConcurrentWebSocketSessionDecorator","Add method flushMessageBuffer to ConcurrentWebSocketSessionDecorator. The perpose of this method is to clear buffer and reset limitExceed flag, when the buffer limit exceeded.  Issue: [SPR-17140](https://jira.spring.io/browse/SPR-17140)","closed","","HenryOrz","2018-08-10T09:08:01Z","2018-08-10T14:04:42Z"
"","1778","SPR-16642 - DefaultMessageListenerContainer JMS Pool leak with CACHE_CONSUMER and Bitronix in error path","Add a boolean flag to control the use of a dedicated connection for caching.  This enables using a dedicated connection per task which may be required for some XA Transaction managers to avoid connection closing issues in the error handling path resulting in a leak from a connection pool.  This has been seen with CACHE_CONSUMER and btm at least.","open","in: messaging,","drewtul","2018-04-05T13:51:29Z","2021-11-16T12:17:25Z"
"","1756","Polish: ""equals(Object obj)"" and ""hashCode()"" should be overridden in pairs","According to the Java Language Specification, there is a contract between equals(Object) and hashCode()","closed","","igor-suhorukov","2018-03-28T07:02:56Z","2018-03-28T21:09:05Z"
"","1759","Polish: nested ""enum""s should not be declared static","According to [the docs](https://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.9):  Nested enum types are implicitly static.","closed","","igor-suhorukov","2018-03-29T06:45:54Z","2018-04-03T07:18:02Z"
"","1832","SPR-16838 PathMatchingResourcePatternResolver should enforce consistent alphabetical sorting of directory content","A sort was added in SPR-14085 but the default File#compareTo depends upon the underlying system. The ordering of the ressources returned by PathMatchingResourcePatternResolver#retrieveMatchingFiles may differ between OS (Windows, Unix). This leads to subtle bugs hard to track. This PR replace the default sort with one based on the file name.","closed","","benbenw","2018-05-18T09:37:24Z","2018-06-15T20:14:08Z"
"","1900","Fix log level guard in DatabaseStartupValidator.afterPropertiesSet()","A log level has been changed in 9a43d2ec208d2e8cd0866431acf26af3529f8677 but a log level guard for it hasn't been updated. This PR updates the log level guard to align with the log level.","closed","","izeye","2018-07-26T13:41:21Z","2018-07-26T13:48:56Z"
"","1877","Fix typo","`read read `was mentioned 2 times in the `New in 3.2` Chapter. Issue was opened here: https://jira.spring.io/browse/GREENHOUSE-557 and is very old at this point.","closed","","maximAtanasov","2018-07-09T08:48:46Z","2018-07-09T13:55:25Z"
"","21546","Optimize Kotlin reflection runtime efficiency","`kotlin-reflect` is a big 2 MB JAR, producing [important CPU and memory spikes](https://jira.spring.io/secure/attachment/25773/flamegraph-java-jackson.svg) at startup on the JVM.  It would be interesting to explore if it could be replaced by a lighter incarnation like https://github.com/Kotlin/kotlinx.reflect.lite or use [`kotlinx-metadata-jvm`](https://github.com/JetBrains/kotlin/blob/master/libraries/kotlinx-metadata/jvm/ReadMe.md) at build time to generate some kind of reflection index. [`jackson-module-kotlin`](https://github.com/FasterXML/jackson-module-kotlin) should also work with similar approach (not blocking now that we have Kotlin Serialization support).","open","in: kotlin,","spring-projects-issues","2018-07-04T15:10:58Z","2022-05-10T14:13:25Z"
"","1885","Preserve ""type"" parameter in media type for Atom Feed/Entry message conversion","`AtomFeedHttpMessageConverter` and `RssChannelHttpMessageConverter` currently discard any media type parameters that are supplied to `write()`. They are overwritten when adding the charset parameter.  Issue: SPR-17040  Submitted ICLA.","closed","type: enhancement,","markhobson","2018-07-14T12:10:05Z","2019-11-14T17:39:10Z"
"","1944","Use String::isEmpty instead of """".equals(arg) when arg is not null","```java boolean b = """".equals(arg); ``` can be replaced with  ```java boolean b = arg.isEmpty(); ``` where `arg` is proven to be not null. This is shorter, more readable and slightly faster.","closed","","stsypanov","2018-08-26T19:55:11Z","2019-02-19T11:28:53Z"
"","1854","SPR-16936 Fix PathVariable javadoc","`@PathVariable`'s javadoc states that it supports `MultiValueMap` parameters (introduced by commit df0902), but by reading through the code, that does not seem to be the case (compare, e.g., `PathVariableMapMethodArgumentResolver` to `RequestParamMapMethodArgumentResolver`).  Moreover, parsing `MultipleValueMap` is done according to the `;` character, and placing such a character in a path (e.g., consider something like `/app/{param}/show` would just break the path.  This patch fixes `PathVariable`'s javadoc by removing the mention of `MultiValueMap`.","closed","","mureinik","2018-06-12T08:57:18Z","2018-06-13T04:20:52Z"
"","1751","SPR-16628 - Improve NoSuchBeanDefinitionException to include a reference to the dependent bean","[SPR-16628](https://jira.spring.io/browse/SPR-16628)  This PR allows a `NoSuchBeanDefinitionException` to refer to the dependent bean which improves clarity and traceability.  Additionally this information will be useful in a Spring Boot Failure Analyzer.","closed","","andersonkyle","2018-03-23T00:19:40Z","2018-03-23T16:43:41Z"
"","1809","Fix typos.","1.Consist with ""xml code"" examples. 2.""xml()"" is a static method and will use default builder config, so use createXmlMapper(true) instead. 3.fix mvc namespace tag tpyo.","closed","","nkjackzhang","2018-04-26T02:03:02Z","2018-04-26T08:09:44Z"
"","1896","Optimize throws advice interceptor","1. I found `MethodAfterAdviceInterceptor` implements  `AfterAdvice`, so i think `MethodBeforeAdviceInterceptor ` also should implements `BeforeAdvice` to indicate that is a **BeforeAdvice**.  2. Recently when i search spring source code, i found when `ThrowsAdviceInterceptor`is  constructed, it just found methods which name is `afterThrowing` and last param is ThrowableSubclass; but sometimes developer may be disorder the 4 param due to careless(eg: afterThrowing( Object[] args, Method method, Object target, ServletException ex) ), now the error only can be found when exception occur, i think framework should be reminder developer in time, when `ThrowsAdviceInterceptor`  is constructed, if we find he/she write error, we should tell he/she that error occurs as soon as possible.","open","type: enhancement,","plx927","2018-07-25T16:35:00Z","2022-01-18T10:54:27Z"
"","1844","Fixes in the code examples for WebFlux functional endpoints","- Add import to o.s.w.reactive.function.server.RouterFunctions.route - When creating response body with a Publisher, one need to provide the type","closed","","violetagg","2018-05-31T13:13:00Z","2018-06-21T11:35:45Z"
"","21612","Minor performance improvements for 5.1 [SPR-17074]","**[Сергей Цыпанов](https://jira.spring.io/secure/ViewProfile.jspa?name=stsypanov)** opened **[SPR-17074](https://jira.spring.io/browse/SPR-17074?redirect=false)** and commented  This is a ticket for minor performance improvements for 5.1. My intention is to use it in connection with pull-requests created for changes introduced via code static analysis, benchmarking, and profiling.  - https://github.com/spring-projects/spring-framework/pull/1891 - https://github.com/spring-projects/spring-framework/pull/1903 - https://github.com/spring-projects/spring-framework/pull/1911    ---  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1891, and commits https://github.com/spring-projects/spring-framework/commit/457d586859ba03741a992c40fd8667cd547186e2, https://github.com/spring-projects/spring-framework/commit/f8340838b32ab4ae002dd720025073c16fa01c65, https://github.com/spring-projects/spring-framework/commit/69c6a40c501789165732c7fe6d1f7cfddf72881b, https://github.com/spring-projects/spring-framework/commit/5051850fa9042bc1cac187f63557b05877ceb14f, https://github.com/spring-projects/spring-framework/commit/b5c691bdac421416361406e8bc87d539201c7251, https://github.com/spring-projects/spring-framework/commit/2938a95435ba1827bcf603076812f8efa8805510","closed","type: enhancement,","spring-projects-issues","2018-07-21T10:31:03Z","2019-01-11T12:47:01Z"
"","21575","Replace common usage of LinkedList with ArrayList/ArrayDeque [SPR-17037]","**[Сергей Цыпанов](https://jira.spring.io/secure/ViewProfile.jspa?name=stsypanov)** opened **[SPR-17037](https://jira.spring.io/browse/SPR-17037?redirect=false)** and commented  LinkedList is an outdated collection which is still used in the code of Spring Framework as queue or list. LinkedList consumes more memory and is generally slower than ArrayList/ArrayDeque. This can cause perormance problems, see e.g. [https://github.com/spring-projects/spring-framework/pull/1873](https://github.com/spring-projects/spring-framework/pull/1873).  In most of cases it's possible to replace LinkedList with ArrayList/ArrayDeque after proper review.   ---  **Affects:** 5.0.7  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9c08a482d1e321791e84b3ffe5cc71b3b75f74ef, https://github.com/spring-projects/spring-framework/commit/11fc086309ec8b3654a52dd3ca3bc167daf1cfb4","closed","in: core,","spring-projects-issues","2018-07-13T11:02:07Z","2018-07-26T08:09:30Z"
"","21674","Java 10: ""Illegal method name"" when test functions in Kotlin contain spaces in name [SPR-17137]","**[Ömer Yildiz](https://jira.spring.io/secure/ViewProfile.jspa?name=mcescher)** opened **[SPR-17137](https://jira.spring.io/browse/SPR-17137?redirect=false)** and commented  ```java // Kotlin code:  @RunWith(SpringRunner::class) @JooqTest class Test {          fun `this will fail`() {  }  } ```     Running this Kotlin test in a java 9 or 10 environment throws the following error:  ``` org.springframework.aop.framework.AopConfigException: Could not generate CGLIB subclass of class [class Test]: Common causes of this problem include using a final class or a non-visible class; nested exception is org.springframework.cglib.core.CodeGenerationException: java.lang.reflect.InvocationTargetException-->null	at org.springframework.aop.framework.CglibAopProxy.getProxy(CglibAopProxy.java:209) 	at org.springframework.aop.framework.ProxyFactory.getProxy(ProxyFactory.java:110) 	at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.createProxy(AbstractAutoProxyCreator.java:473) 	at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.wrapIfNecessary(AbstractAutoProxyCreator.java:355) 	at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization(AbstractAutoProxyCreator.java:304) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:437) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1706) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:413) 	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:119) 	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83) 	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:44) 	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:246) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:227) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:289) 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:291) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:246) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) 	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) 	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190) 	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) 	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) 	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) 	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) 	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) Caused by: org.springframework.cglib.core.CodeGenerationException: java.lang.reflect.InvocationTargetException-->null 	at org.springframework.cglib.core.AbstractClassGenerator.generate(AbstractClassGenerator.java:345) 	at org.springframework.cglib.proxy.Enhancer.generate(Enhancer.java:492) 	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:93) 	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:91) 	at org.springframework.cglib.core.internal.LoadingCache$2.call(LoadingCache.java:54) 	at java.base/java.util.concurrent.FutureTask.run$$$capture(FutureTask.java:264) 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java) 	at org.springframework.cglib.core.internal.LoadingCache.createEntry(LoadingCache.java:61) 	at org.springframework.cglib.core.internal.LoadingCache.get(LoadingCache.java:34) 	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData.get(AbstractClassGenerator.java:116) 	at org.springframework.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:291) 	at org.springframework.cglib.proxy.Enhancer.createHelper(Enhancer.java:480) 	at org.springframework.cglib.proxy.Enhancer.createClass(Enhancer.java:337) 	at org.springframework.aop.framework.ObjenesisCglibAopProxy.createProxyClassAndInstance(ObjenesisCglibAopProxy.java:58) 	at org.springframework.aop.framework.CglibAopProxy.getProxy(CglibAopProxy.java:205) 	... 31 more Caused by: java.lang.reflect.InvocationTargetException 	at java.base/jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source) 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.base/java.lang.reflect.Method.invoke(Method.java:564) 	at org.springframework.cglib.core.ReflectUtils.defineClass(ReflectUtils.java:459) 	at org.springframework.cglib.core.AbstractClassGenerator.generate(AbstractClassGenerator.java:336) 	... 45 more Caused by: java.lang.ClassFormatError: Illegal method name ""this will fail"" in class Test$$EnhancerBySpringCGLIB$$9a76c928 	at java.base/java.lang.ClassLoader.defineClass1(Native Method) 	at java.base/java.lang.ClassLoader.defineClass(ClassLoader.java:1007) 	... 50 more ```     It doesn't matter if `@JooqTest` or `@DataJpaTest` is used. As soon as Spring attempts to proxy (with the transaction handler) the test class it fails.  ---  **Affects:** 5.0.5  **Issue Links:** - #14113 Test instances should not be proxied in the TestContext framework - #21739 Revisit `@Bean` introspection between `@Configuration` classes and 'lite' beans  3 votes, 9 watchers","closed","type: bug,","spring-projects-issues","2018-08-07T09:38:31Z","2022-06-13T14:27:21Z"
"","21360","Provide example of a WebSocketHandler implementation for WebFlux  [SPR-16820]","**[zhw](https://jira.spring.io/secure/ViewProfile.jspa?name=zhw)** opened **[SPR-16820](https://jira.spring.io/browse/SPR-16820?redirect=false)** and commented  In HttpServerOperations.sendWebsocket() Method   ```java if (replace(ops)) { return FutureMono.from(ops.handshakerResult) .then(Mono.defer(() -> Mono.from(websocketHandler.apply(ops, ops)))) .doAfterSuccessOrError(ops); } ```  Spring will auto close connection after sending handshake info if My WebSocketHandler  return any value except  Mono.never()     if My WebSocketHandler return Mono.never()     the connection will keep alive but Server can't recevie message from Browser(Chrome)     but I can send message from Server to Browser   ---  **Affects:** 5.0.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ade2eab169a385ffe0bc5402815d2b830b708b01, https://github.com/spring-projects/spring-framework/commit/543f1902397db77e3277130abea377b8a1d4a63f, https://github.com/spring-projects/spring-framework/commit/b385ff1d9fc4bb00f1070b727cd5d073a9e78ce9, https://github.com/spring-projects/spring-framework/commit/c7adf28f61c13b6a14ba94813354806ebbd6bfbb","closed","in: web,","spring-projects-issues","2018-05-14T02:39:58Z","2018-05-17T17:30:43Z"
"","21372","ClassPathResource.isReadable() returns true for directory in runnable jar result in download empty file [SPR-16832]","**[Zhenbang Wei](https://jira.spring.io/secure/ViewProfile.jspa?name=znbang)** opened **[SPR-16832](https://jira.spring.io/browse/SPR-16832?redirect=false)** and commented  1. create a spring boot 2.0 project with web module 2. create a directory src/main/resources/static/hello 3. build a runnable jar and run it 4. open http://localhost:8080/hello 5. an empty file is downloaded instead of 404  This is because AbstractFileResolvingResource.isReadable() always returns true and ClassPathResource doesn't override isReadable().  ---  **Affects:** 4.3.17, 5.0.6  **Issue Links:** - #21373 java.nio.file.Path support in FileSystemResource (with regular createRelative behavior, superseding PathResource)","closed","type: enhancement,","spring-projects-issues","2018-05-17T09:07:59Z","2019-01-11T17:10:35Z"
"","21428","MethodParameter needs to apply tighter assertions [SPR-16889]","**[Zhang Jie](https://jira.spring.io/secure/ViewProfile.jspa?name=nkjackzhang)** opened **[SPR-16889](https://jira.spring.io/browse/SPR-16889?redirect=false)** and commented  1.`validateIndex()` dosen't assert `parameterIndex >= -1` is true (as error message says), result in invalid codes (e.g. `new MethodParameter(method, -100)` which works as if `parameterIndex` is -1), is it by design?. 2.`getParameterName()` and `getParameter()` throw `ArrayIndexOutOfBoundsException` when `parameterIndex < 0` is true (i.e. for method return type). I don't know whether it is by design, if it is, may it throw `IllegalStateException` or something else instead?   ---  **Affects:** 5.0.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c38cb43527bdfe3a523413e2112f1793244d7d11","closed","type: enhancement,","spring-projects-issues","2018-06-01T04:12:43Z","2018-07-26T08:09:30Z"
"","21349","Use ""internalSet"" instead of normal setter. [SPR-16809]","**[Zhang Jie](https://jira.spring.io/secure/ViewProfile.jspa?name=nkjackzhang)** opened **[SPR-16809](https://jira.spring.io/browse/SPR-16809?redirect=false)** and commented  Using ""internalSet"" instead of normal setter can avoid checking int param, because if **constants.asNumber()** works as expected and does't throw exception, the param checking in normal setter will never fail.   ---  **Affects:** 5.0.6  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1825","open","in: data,","spring-projects-issues","2018-05-10T08:49:17Z","2019-01-11T16:45:50Z"
"","21329","Task ""docsZip"" copies duplicate reference files [SPR-16789]","**[Zhang Jie](https://jira.spring.io/secure/ViewProfile.jspa?name=nkjackzhang)** opened **[SPR-16789](https://jira.spring.io/browse/SPR-16789?redirect=false)** and commented  When I tried to build ""docs.zip"" using task ""docsZip"", I found that the files whitch were under directories ""html5"" and ""pdf"" also appeared under directory ""spring-framework-reference"" within ""docs.zip"" file. After debugging, I found that, with config ""from (asciidoctor)"", task ""docsZip"" not only copied files under **${project}/build/asciidoc/**, but also copied files under **${project}/build/asciidoc/html5/** and **${project}/build/asciidoc/pdf/**, so files were copied duplicately. Besides, unnessesary directories like ""images"", ""tocbot-3.0.2"", also appeared under directory ""pdf"", because the plugin ""asciidoctor-gradle-plugin"" didn't copy specific per backend.  ---  **Affects:** 5.0.5  **Issue Links:** - #21339 docs.zip does not contain resources at the root anymore  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1816, and commits https://github.com/spring-projects/spring-framework/commit/edb33331ede4b79407f64906410a650cf5ebc471, https://github.com/spring-projects/spring-framework/commit/cdf483fd50ed7600b13eb76dbcbf26762de4a210","closed","type: enhancement,","spring-projects-issues","2018-05-03T07:18:45Z","2019-01-11T16:40:46Z"
"","21251","Proper exception for controller method return types that do not work with MvcUriComponentsBuilder (e.g. final classes) [SPR-16710]","**[Zhang Jie](https://jira.spring.io/secure/ViewProfile.jspa?name=nkjackzhang)** opened **[SPR-16710](https://jira.spring.io/browse/SPR-16710?redirect=false)** and commented  I create Controller and test case as [mvc-reference](https://docs.spring.io/spring/docs/4.3.16.RELEASE/spring-framework-reference/htmlsingle/#mvc-links-to-controllers) says:  ```java @Controller @RequestMapping(""/hotels/{hotel}"") public class BookingController {      @GetMapping(""/bookings/{booking}"")     public String getBooking(@PathVariable Long booking) {      // ...     } } ```  ```java @Test public void testFromMethodCall() { 	// some necessary code 	UriComponents uriComponents = MvcUriComponentsBuilder                 .fromMethodCall(on(BookingController.class).getBooking(21L)).buildAndExpand(42); 	URI uri = uriComponents.encode().toUri(); 	System.out.println(uri); } ```  Then I get error as follow:  > java.lang.IllegalArgumentException: Cannot subclass final class java.lang.String > at org.springframework.cglib.proxy.Enhancer.generateClass(Enhancer.java:565) > at org.springframework.cglib.core.DefaultGeneratorStrategy.generate(DefaultGeneratorStrategy.java:25) > at org.springframework.cglib.core.AbstractClassGenerator.generate(AbstractClassGenerator.java:329) > at org.springframework.cglib.proxy.Enhancer.generate(Enhancer.java:492) > at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:93) > at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:91) > at org.springframework.cglib.core.internal.LoadingCache$2.call(LoadingCache.java:54) > at java.util.concurrent.FutureTask.run(FutureTask.java:266) > at org.springframework.cglib.core.internal.LoadingCache.createEntry(LoadingCache.java:61) > at org.springframework.cglib.core.internal.LoadingCache.get(LoadingCache.java:34) > at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData.get(AbstractClassGenerator.java:116) > at org.springframework.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:291) > at org.springframework.cglib.proxy.Enhancer.createHelper(Enhancer.java:480) > at org.springframework.cglib.proxy.Enhancer.createClass(Enhancer.java:337) > at org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder.initProxy(MvcUriComponentsBuilder.java:645) > at org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder.access$000(MvcUriComponentsBuilder.java:99) > at org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder$ControllerMethodInvocationInterceptor.intercept(MvcUriComponentsBuilder.java:769) > at com.example.myproject.controller.BookingController$$EnhancerBySpringCGLIB$$76dd56da.getBooking(\) > at com.example.myproject.GeneralTest.testFromMethodCall(GeneralTest.java:264)  After searching in the source code, I find that, **MvcUriComponentsBuilder.on()** will create proxy for return value of controll method using **ControllerMethodInvocationInterceptor** class, just as [source](https://github.com/spring-projects/spring-framework/blob/8da0e46ff253bab5783713078eae8898708996ba/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.java#L768) says, but my controller method returns **String**, which's a **final** class, so cglib can't create subclass for it, then the error occurs.  Does **MvcUriComponentsBuilder.on()** have any restriction when work with controller method whicht return type is final class?   ---  **Affects:** 4.3.16  **Backported to:** [4.3.17](https://github.com/spring-projects/spring-framework/milestone/166?closed=1)","closed","type: enhancement,","spring-projects-issues","2018-04-11T07:18:51Z","2018-05-08T08:07:34Z"
"","21219","Add cpp to mime.types as text/plain [SPR-16678]","**[Zhang Jie](https://jira.spring.io/secure/ViewProfile.jspa?name=nkjackzhang)** opened **[SPR-16678](https://jira.spring.io/browse/SPR-16678?redirect=false)** and commented  In most cases, the extend name of ""c++"" file is **cpp**, not **c\+\+**. For Compatibility, I just add **cpp** to **text/plain** list.  ---  **Affects:** 4.3.14, 5.0.4  **Issue Links:** - #20105 o/s/mail/javamail mime.types PNG mapped to image/x-png  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1772, and commits https://github.com/spring-projects/spring-framework/commit/1ab0850303737e78d3e50e5846cacee0c15c2297, https://github.com/spring-projects/spring-framework/commit/9601d4bb5b40f3abba3d81b2347c7e43d07be64c  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","type: enhancement,","spring-projects-issues","2018-04-02T12:08:25Z","2019-01-11T15:04:54Z"
"","21204","NamedParameterUtils.parseSqlStatement should parse :{x} style parameter correctly [SPR-16663]","**[Zhang Jie](https://jira.spring.io/secure/ViewProfile.jspa?name=nkjackzhang)** opened **[SPR-16663](https://jira.spring.io/browse/SPR-16663?redirect=false)** and commented  In my opinion, we should parse **:{x}** style parameter as **x** is parameter using **NamedParameterUtils.parseSqlStatement**, so the condition **j - i > 2** is the correct condition, not **j - i > 3**, because if **i** is the index of **:** in **:{x}**, and **j** is the index of **}** in **:{x}**, **j - i == 3** is true.  ---  **Affects:** 4.3.14, 5.0.4  **Issue Links:** - #20887 NamedParameterJdbcTemplate fails on PostgreSQL array  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1758, and commits https://github.com/spring-projects/spring-framework/commit/82cb5dbf2ba238e0f962e4323c21321afa556471, https://github.com/spring-projects/spring-framework/commit/f3dd22da5b6a40922dca8a41f400281239152490  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","type: bug,","spring-projects-issues","2018-03-29T02:31:59Z","2019-01-13T20:26:52Z"
"","21252","Class org.springframework.expression.spel.ast.PropertyOrFieldReference devour exception [SPR-16711]","**[zchong](https://jira.spring.io/secure/ViewProfile.jspa?name=zchong)** opened **[SPR-16711](https://jira.spring.io/browse/SPR-16711?redirect=false)** and commented  in controller code like this  ```java @RequestMapping(""/test"")     public String test() {         String message = null;         message.equals(""test"");         return ""this is test url"";     } ```  It will produce an Nullpoint Exception. but in log, It shows 'SpelEvaluationException: EL1008E: Property or field 'timestamp' cannot be found on object of type 'java.util.HashMap'' because the method 'org.springframework.expression.spel.ast.PropertyOrFieldReference.readProperty' replaced the Nullpoint Exception. This will interfere with debugging.   ---  **Affects:** 4.3.10","closed","in: core,","spring-projects-issues","2018-04-11T09:43:26Z","2019-01-12T05:19:00Z"
"","21589","WebSession/WebSessionStore API are silent on saving a session that may have been invalidated [SPR-17051]","**[Yuriy Sazonets](https://jira.spring.io/secure/ViewProfile.jspa?name=haizz)** opened **[SPR-17051](https://jira.spring.io/browse/SPR-17051?redirect=false)** and commented  DefaultWebSessionManager#save checks whether previously retrieved session is active (started) and not expired, but doesn't check if it actually exists in the session store.  Consider scenario: 1. Long-running WebSocket request A. 2. Logout during request A => session id gets changed. 3. Request A ends and gets committed. 4. DefaultWebSessionManager#save gets invoked with old session id (which is not valid anymore) and proceeds with saving. 5. ReactiveRedisOperationsSessionRepository#save doesn't validate if the session passed in exists in the store, and just applies the delta (which in this case is only lastAccessedTime), which results in an broken session entry with only lastAccessedTime attribute. 6. Subsequent requests to old session id fail because session data is inconsistent in the repository.  This causes major problems in production code. More details (and sample project to reproduce the issue) here: https://github.com/spring-projects/spring-session/issues/1111   ---  **Affects:** 5.0.7","closed","type: enhancement,","spring-projects-issues","2018-07-17T12:42:56Z","2018-07-26T08:09:33Z"
"","21308","Undesirable assertion message in MockPart [SPR-16767]","**[Yuki Yoshida](https://jira.spring.io/secure/ViewProfile.jspa?name=yuki%20yoshida)** opened **[SPR-16767](https://jira.spring.io/browse/SPR-16767?redirect=false)** and commented  Hi, I found a bit undesirable assertion messages.  org.springframework.mock.web.MockMultipartFile  and  org.springframework.mock.web.MockPart  has below statement.  ```java Assert.hasLength(name, ""Name must not be null""); ```  I think ""Name must not be empty"" is disirable, actually almost code in spring-framework use ""empty"".             ---  **Affects:** 5.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9bc4e70e93f0bef596a319174a04699ad050b215, https://github.com/spring-projects/spring-framework/commit/f7376bdde3d78762603751f0922d4d70ff46f4e6","closed","type: task,","spring-projects-issues","2018-04-25T03:32:26Z","2018-05-08T08:53:24Z"
"","21750","@Pattern error message ""{0}"" is not resolved. [SPR-17217]","**[yoshikawaa](https://jira.spring.io/secure/ViewProfile.jspa?name=yoshikawaa1)** opened **[SPR-17217](https://jira.spring.io/browse/SPR-17217?redirect=false)** and commented  ### Application Spring Boot Web MVC Application Spring Boot 2.0.4.RELEASE Sample : https://github.com/yoshikawaa/spring-boot-pattern-demo  ### Problem There are cases where `@Pattern` error message `{0}` is not resolved.  * ValidationMessages.properties  ```properties javax.validation.constraints.Pattern.message = {0} must match ""{regexp}"". ```  * application.properties  ```properties spring.messages.basename = ValidationMessages ```  * Form  ```java public class DemoForm {     @Pattern(regexp = ""\\d{3}"")    // -> message [ valid must match ""\d{3}"".  ]     private String valid;     @Pattern(regexp = ""\\d{1,3}"") // -> message [ {0} must match ""\d{1,3}"".  ]     private String invalid;     // omit getter and setter } ```  My validation is that if **a range of digits** is used in a regular expression, the mechanism for resolving {0} does not work properly.  ```java Controller     @PostMapping     public String post(@Valid DemoForm form, BindingResult result) {         result.getFieldErrors().forEach(e -> logger.info(""field:{},error:{}"", e.getField(), e.getDefaultMessage()));         // log [ field:valid,error:{0} must match ""\d{3}"". ]         // log [ field:invalid,error:{0} must match ""\d{1,3}"". ]         return ""demo"";     } ```  When logging `BindingResult` with Controller, you can see that `LocalValidatorFactoryBean` (Hibernate Validator) resolves message variable `{regexp}` beforehand. After that, when Spring MVC resolve the message, it is considered that the regular expression in the message is obstructing resolution of `{0}`.  ---  **Affects:** 5.0.8  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/14163","open","type: bug,","spring-projects-issues","2018-08-27T01:21:07Z","2020-07-16T15:13:01Z"
"","21548","org.springframework.orm.hibernate5.SpringBeanContainer ignores the fallback bean instance producer [SPR-17010]","**[Yoann Rodiere](https://jira.spring.io/secure/ViewProfile.jspa?name=fenrhil)** opened **[SPR-17010](https://jira.spring.io/browse/SPR-17010?redirect=false)** and commented  #20852 added support for Hibernate ORM's BeanContainer SPI, but the implementation ignores one of the parameters passed to the bean container: `fallbackProducer`. Hibernate ORM expects implementors to use this fallback producer whenever a bean could not be found (i.e., in the case of Spring, when the bean factory throws something like a BeanNotFoundException, I think).  Why it can be useful: for example, [Hibernate Search](http://hibernate.org/search/) uses the same SPI to instantiate some required beans, but provides a specific `fallbackProducer` which may in particular take advantage of a legacy annotation ([@Factory](https://github.com/hibernate/hibernate-search/blob/master/engine/src/main/java/org/hibernate/search/annotations/Factory.java), [example](https://github.com/hibernate/hibernate-search/blob/master/orm/src/test/java/org/hibernate/search/test/filter/RoleFilterFactory.java#L40)). Even with advanced default behavior inside Spring's BeanFactory, Spring cannot reasonably be expected to understand that kind of annotation.  Ignoring this `fallbackProducer` parameter means that users migrating to Spring 5.1.RC1 who used to instantiate their beans through reflections or features native to Hibernate may have errors on startup because Spring doesn't find some beans, even though Hibernate would be able to find the beans by itself if given the chance.     An example of what was expected can be found in the CDI implementation built in Hibernate ORM:  * https://github.com/hibernate/hibernate-orm/blob/master/hibernate-core/src/main/java/org/hibernate/resource/beans/container/internal/ContainerManagedLifecycleStrategy.java#L100 * https://github.com/hibernate/hibernate-orm/blob/master/hibernate-core/src/main/java/org/hibernate/resource/beans/container/internal/ContainerManagedLifecycleStrategy.java#L172  As for tests, the built-in CDI implementation tests this exact feature (fallback instantiation) there: https://github.com/hibernate/hibernate-orm/blob/master/hibernate-core/src/test/java/org/hibernate/test/cdi/general/nonregistrymanaged/standard/NonRegistryManagedStandardCdiSupportTest.java#L110  ---  **Affects:** 5.1 RC1  **Issue Links:** - #20852 Support Hibernate 5.3's ManagedBeanRegistry for dependency injection - #21963 SpringBeanContainer for Hibernate 5 does not deal with NoSuchBeanDefinitionException  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d2eb4d2671d2d49ea34ab7bfef477e92f107444a","closed","type: bug,","spring-projects-issues","2018-07-05T13:09:48Z","2019-01-11T12:49:47Z"
"","21476","The BeanPropertyRowMapper does not work for field names ending with ""numbers"" which worked for 3.1 [SPR-16937]","**[Yash Bajaj](https://jira.spring.io/secure/ViewProfile.jspa?name=yashbajaj)** opened **[SPR-16937](https://jira.spring.io/browse/SPR-16937?redirect=false)** and commented  **Class name** : BeanPropertyRowMapper  **Package** : package org.springframework.jdbc.core  Issue : The field name that has an ""underscore"" in it, lets say person_name_1 is a column name in a database which is also present in the result set. Using BeanPropertyRowMapper, you could map the result set to a model class in your codebase. If you are in a JAVA environment, you probably would choose to use personName1 as the choice of the field name. In the Spring-JDBC 3.1 version, the mapper would map them correctly. But, in the Spring-JDBC 4.3 version, the mapper is not able to map it.  **Official documentation -** https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/BeanPropertyRowMapper.html  Column values are mapped based on matching the column name as obtained from result set meta-data to public setters for the corresponding properties. The names are matched either directly or by transforming a name separating the parts with underscores to the same name using ""camel"" case.  **Root** cause : If you look into the class from the latest version, the initialize method calls the underScoreName() method here - [https://github.com/spring-projects/spring-framework/blob/master/spring-jdbc/src/main/java/org/springframework/jdbc/core/BeanPropertyRowMapper.java#L245 ](https://github.com/spring-projects/spring-framework/blob/master/spring-jdbc/src/main/java/org/springframework/jdbc/core/BeanPropertyRowMapper.java#L245)  This method's logic maps personName1 to person_name1.  Whereas if you look into the class  from the 3.1 version, the initialize method calls the the underScoreName() method here - https://github.com/spring-projects/spring-framework/blob/3.1.x/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/BeanPropertyRowMapper.java#L165  This method's logic maps personName1 to person_name_1.  This is not a backward compatible logic change. The existing systems would break whose column names end with a number.  Could you please look into it or let me know if there's something that I'm missing or this isn't a valid usecase at all?           ---  **Affects:** 4.3.17, 5.0.6  **Issue Links:** - #15177 BeanPropertyRowMapper underscoreName - #17807 BeanPropertyRowMapper should always call toLowerCase with US encoding","closed","in: core,","spring-projects-issues","2018-06-12T08:54:45Z","2022-05-26T02:10:15Z"
"","21698","URI not working in WebClient [SPR-17162]","**[yannxia](https://jira.spring.io/secure/ViewProfile.jspa?name=yannxia)** opened **[SPR-17162](https://jira.spring.io/browse/SPR-17162?redirect=false)** and commented  ```java final URI uri = UriComponentsBuilder.fromUriString(destinationAddress).queryParams(serverHttpRequest.getQueryParams()).build().toUri();         Mono clientResponse = webClient.method(Objects.requireNonNull(serverHttpRequest.getMethod()))             .uri(uri)             .headers(httpHeaders -> httpHeaders.putAll(serverHttpRequest.getHeaders()))             .body(BodyInserters.fromPublisher(serverHttpRequest.getBody(), DataBuffer.class))             .exchange() ```  if uri contains chinese character. then body will be empty....  another way.  ```java final String uri = UriComponentsBuilder.fromUriString(destinationAddress).queryParams(serverHttpRequest.getQueryParams()).build().toUriString();         log.debug(""forward request to "" + uri);          Mono clientResponse = webClient.method(Objects.requireNonNull(serverHttpRequest.getMethod()))             .uri(uri)             .headers(httpHeaders -> httpHeaders.putAll(serverHttpRequest.getHeaders()))             .body(BodyInserters.fromPublisher(serverHttpRequest.getBody(), DataBuffer.class))             .exchange()             .map(DefaultRepetitionReadClientResponse::new); ```   it's be OK.   uri is   ```java http://`host`:9032/test/chinese-param?a=1222121&b=中文 ```    ---  **Affects:** 5.0.3","closed","in: web,","spring-projects-issues","2018-08-10T11:11:14Z","2019-01-11T13:40:24Z"
"","21843","@annotation pointcut is not matched with complex hierarchy and generics [SPR-17310]","**[Yanming Zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=quaff)** opened **[SPR-17310](https://jira.spring.io/browse/SPR-17310?redirect=false)** and commented  ``` Persistable   <-  BaseUser   <-  User ```  ``` BaseManager   <-  BaseUserManager  <-     UserManager  ```  ```   BaseManagerImpl  <-  BaseUserManagerImpl  <-     UserManagerImpl ```  The mostSpecificMethod should return method UserManagerImpl.save(User), but return BaseUserManagerImpl.save(BaseUser) which doesn't annotated, it will cause `@annotation` pointcut broken.   ---  **Affects:** 5.1 GA  **Attachments:** - [DeclaringClassTest.zip](https://jira.spring.io/secure/attachment/26032/DeclaringClassTest.zip) (_10.66 kB_) - [spr17310.zip](https://jira.spring.io/secure/attachment/26031/spr17310.zip) (_10.24 kB_)","open","in: core,","spring-projects-issues","2018-09-28T03:26:21Z","2019-03-01T03:17:36Z"
"","21834","WebSocket is broken with Websphere Liberty 18.0.0.3 [SPR-17301]","**[Yanming Zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=quaff)** opened **[SPR-17301](https://jira.spring.io/browse/SPR-17301?redirect=false)** and commented  https://github.com/spring-projects/spring-framework/blob/master/spring-websocket/src/main/java/org/springframework/web/socket/server/support/AbstractHandshakeHandler.java#L99  ```java websphereWsPresent = ClassUtils.isPresent( 		""com.ibm.websphere.wsoc.WsWsocServerContainer"", classLoader); ```  classLoader can not found this class, I guess it isolated by OSGi.   ---  **Affects:** 5.0.7","closed","status: invalid,","spring-projects-issues","2018-09-25T07:36:12Z","2019-01-12T05:18:08Z"
"","21725","Deprecate TransactionSynchronizationAdapter","**[Yanming Zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=quaff)** opened **[SPR-17190](https://jira.spring.io/browse/SPR-17190?redirect=false)** and commented  Those legacy adapter class should be marked as `@Deprecated` and removed in the future, such as `TransactionSynchronizationAdapter` and `HandlerInterceptorAdapter`.  --- No further details from [SPR-17190](https://jira.spring.io/browse/SPR-17190?redirect=false)","closed","type: task,","spring-projects-issues","2018-08-16T13:59:14Z","2021-05-11T07:09:13Z"
"","21723","SmartLifecycle should provide default methods [SPR-17188]","**[Yanming Zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=quaff)** opened **[SPR-17188](https://jira.spring.io/browse/SPR-17188?redirect=false)** and commented  Normally the motivation of Using SmartLifecycle instead of Lifecycle is make it auto startup, so we should return true by default, and most SmartLifecycle doesn't care about concurrent shutdown, we should provide a default stop method to avoid misuse shutdown order.  ```java default boolean isAutoStartup() {      return true; } default void stop(Runnable callback) {      this.stop();      callback.run(); } ```  ---  **Affects:** 5.0.8  **Issue Links:** - #21699 Use default methods on Smart/GenericApplicationListener  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1929","closed","type: enhancement,","spring-projects-issues","2018-08-16T00:41:45Z","2019-01-11T13:39:55Z"
"","21706","Lambda-based mapping of an ObjectProvider's object when available or unique [SPR-17170]","**[Yanming Zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=quaff)** opened **[SPR-17170](https://jira.spring.io/browse/SPR-17170?redirect=false)** and commented  ObjectProvider should accept Function as argument like Consumer #20550  ```java 	public default  Optional ifAvailable(Function dependencyFunction) throws BeansException { 		T dependency = getIfAvailable(); 		if (dependency != null) { 			return Optional.ofNullable(dependencyFunction.apply(dependency)); 		} 		return Optional.empty(); 	}  	public default  Optional ifUnique(Function dependencyFunction) throws BeansException { 		T dependency = getIfUnique(); 		if (dependency != null) { 			return Optional.ofNullable(dependencyFunction.apply(dependency)); 		} 		return Optional.empty(); 	} ```  ---  No further details from [SPR-17170](https://jira.spring.io/browse/SPR-17170?redirect=false)","open","type: enhancement,","spring-projects-issues","2018-08-13T03:08:44Z","2019-01-11T13:40:11Z"
"","21600","Fix outdated javadoc of ConfigurationClassPostProcessor [SPR-17062]","**[Yanming Zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=quaff)** opened **[SPR-17062](https://jira.spring.io/browse/SPR-17062?redirect=false)** and commented  https://github.com/spring-projects/spring-framework/commit/bb971cecf15e8c7983cbaf7767851236d132889c#diff-69d29ef31d8e2982897a09a37a0adb4e  ConfigurationClassPostProcessor is Ordered.LOWEST_PRECEDENCE with PriorityOrdered, not Ordered#HIGHEST_PRECEDENCE with Ordered.  ---  **Issue Links:** - #15258 Allow BeanDefinitionRegistryPostProcessor to register other BeanDefinitionRegistryPostProcessors  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0b60447c4914d0e05b9dbd3eb136f80e27e37bd7, https://github.com/spring-projects/spring-framework/commit/c66f9d8880164b0dbeb0ac6a1a9de90306cc6750, https://github.com/spring-projects/spring-framework/commit/322b0f431f0b672252b53669c3b16aa44561be6e  **Backported to:** [4.3.19](https://github.com/spring-projects/spring-framework/milestone/168?closed=1)","closed","type: task,","spring-projects-issues","2018-07-19T03:42:58Z","2019-01-11T12:47:18Z"
"","21582","Remove Serializable from TransactionInterceptor and TransactionManager [SPR-17044]","**[Yanming Zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=quaff)** opened **[SPR-17044](https://jira.spring.io/browse/SPR-17044?redirect=false)** and commented  Java serialization is an anti-pattern now, most TransactionManagers rely on DataSource which is not serializable, and neither define `serialVersionUID` nor `readObject()` will cause potential exception, I think is time to remove java.io.Serializable from TransactionInterceptor and *TransactionManager. Any one can explain what is the purpose to make them serializable?   --- No further details from [SPR-17044](https://jira.spring.io/browse/SPR-17044?redirect=false)","closed","status: declined,","spring-projects-issues","2018-07-16T00:59:58Z","2018-07-17T19:36:59Z"
"","21343","AspectJ annotation pointcuts fail to evaluate against interface-based proxies [SPR-16803]","**[Yanming Zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=quaff)** opened **[SPR-16803](https://jira.spring.io/browse/SPR-16803?redirect=false)** and commented  If target object is JDK dynamic proxy, Aspectj annotation pointcut match failed since proxy class method lost annotations, here is a simple test  ```java import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertNotEquals; import static org.junit.Assert.assertNotNull;  import java.lang.reflect.Method;  import org.aopalliance.intercept.MethodInterceptor; import org.aopalliance.intercept.MethodInvocation; import org.junit.Test; import org.springframework.aop.framework.ProxyFactory; import org.springframework.aop.support.AopUtils; import org.springframework.transaction.annotation.Transactional;  public class AopUtilsTest {  	@Test 	public void getMostSpecificMethod() throws Exception { 		MyInterface proxy = (MyInterface) new ProxyFactory(MyInterface.class, new MyMethodInterceptor()) 				.getProxy(MyInterface.class.getClassLoader()); 		Method interfaceMethod = MyInterface.class.getMethod(""test""); 		Method proxyMethod = proxy.getClass().getMethod(""test""); 		Method mostSpecificMethod = AopUtils.getMostSpecificMethod(interfaceMethod, proxy.getClass()); 		assertNotEquals(proxyMethod, interfaceMethod); 		assertEquals(interfaceMethod, mostSpecificMethod); //failed 		assertNotNull(mostSpecificMethod.getAnnotation(Transactional.class)); 	}  	public static interface MyInterface {  		@Transactional 		public String test();  	}  	public static class MyMethodInterceptor implements MethodInterceptor {  		@Override 		public Object invoke(MethodInvocation mi) throws Throwable { 			return null; 		}  	}  }  ```  We should add a short-circuit  ```java if(Proxy.isProxyClass(targetClass))      return method; ```  I'm not sure this change should apply for AopUtils.getMostSpecificMethod() or ClassUtils.getMostSpecificMethod()  ---  **Affects:** 5.0.6  **Attachments:** - [spr16803.zip](https://jira.spring.io/secure/attachment/25709/spr16803.zip) (_7.46 kB_)  **Issue Links:** - #21264 AspectJ execution pointcut does not detect methods in superinterface anymore - #21298 AopUtils.getMostSpecificMethod should expose dynamic proxy class methods - #21218 Mixed use BeanNameAutoProxyCreator and AnnotationAwareAspectJAutoProxyCreator to proxy same bean - #21541 Spring 5.x DataSource proxying does not work with Oracle UCP on JDK 9+  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bba5dcaab39b613404129899a0204499442a3141, https://github.com/spring-projects/spring-framework/commit/416dee722617718b9bb8080d80673f0ab749d9fd","closed","in: core,","spring-projects-issues","2018-05-09T11:02:56Z","2019-01-11T16:46:04Z"
"","21889","when use SimpMessagingTemplate  and Controller was init before WebSocketConfig,  Start SpringBootApplication No handlers  Exception occur. [SPR-17355]","**[xiaojie.sha](https://jira.spring.io/secure/ViewProfile.jspa?name=xiaojie.sha)** opened **[SPR-17355](https://jira.spring.io/browse/SPR-17355?redirect=false)** and commented  hi,  I am using spring boot 1.5.7 and websocket, mvc.  Start SpringBootApplication No handlers Exception occur, when use SimpMessagingTemplate and Controller was init before WebSocketConfig  my webSocket config is   `@Configuration` `@EnableWebSocketMessageBroker` public class WebSocketConfig extends AbstractWebSocketMessageBrokerConfigurer   ...... Implements of  AbstractWebSocketMessageBrokerConfigurer         // `@Controller`   (in Controller class )   `@Autowired` private SimpMessagingTemplate simpMessagingTemplate;     Debug code, I found in class DelegatingWebSocketMessageBrokerConfiguration, method public void setConfigurers(List\ configurers) was invoked after configureMessageBroker. but configureMessageBroker used configurers which is init by setConfigurers method.  so handlers are not registered.     I found when Controller was init before WebSocketConfig ,  and  when Controller used  SimpMessagingTemplate, the No handlers Exception was occur.  I use   `@DependsOn`(value = {""webSocketConfig""})  fix the Exception occur. but i think this is not a good way.     **Should framework guarantee  setConfigurers was invoked before  such as configureMessageBroker, configureClientOutboundChannel , configureWebSocketTransport and so on?**     I found same issue in stackoverflow, but no better answer,  is there any 'right way' to solve this problem ?  https://stackoverflow.com/questions/37638396/getting-a-failed-to-start-bean-subprotocolwebsockethandler-exception-while-try/37911959      Exception Detail  2018-10-09 16:02:56,060 ERROR [main] org.springframework.boot.SpringApplication:771 - Application startup failed org.springframework.context.ApplicationContextException: Failed to start bean 'subProtocolWebSocketHandler'; nested exception is java.lang.IllegalArgumentException: No handlers at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:178) ~[spring-context-4.3.11.RELEASE.jar:4.3.11.RELEASE] at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:167) ~[spring-context-4.3.11.RELEASE.jar:4.3.11.RELEASE] at org.springframework.context.support.DefaultLifecycleProcessor.access$200(DefaultLifecycleProcessor.java:50) ~[spring-context-4.3.11.RELEASE.jar:4.3.11.RELEASE] at org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:348) ~[spring-context-4.3.11.RELEASE.jar:4.3.11.RELEASE] at org.springframework.context.support.DefaultLifecycleProcessor.startBeans(DefaultLifecycleProcessor.java:151) ~[spring-context-4.3.11.RELEASE.jar:4.3.11.RELEASE] at org.springframework.context.support.DefaultLifecycleProcessor.onRefresh(DefaultLifecycleProcessor.java:114) ~[spring-context-4.3.11.RELEASE.jar:4.3.11.RELEASE] at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:880) ~[spring-context-4.3.11.RELEASE.jar:4.3.11.RELEASE] at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.finishRefresh(EmbeddedWebApplicationContext.java:144) ~[spring-boot-1.5.7.RELEASE.jar:1.5.7.RELEASE] at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:546) ~[spring-context-4.3.11.RELEASE.jar:4.3.11.RELEASE] at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122) ~[spring-boot-1.5.7.RELEASE.jar:1.5.7.RELEASE] at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:693) [spring-boot-1.5.7.RELEASE.jar:1.5.7.RELEASE] at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:360) [spring-boot-1.5.7.RELEASE.jar:1.5.7.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:303) [spring-boot-1.5.7.RELEASE.jar:1.5.7.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118) [spring-boot-1.5.7.RELEASE.jar:1.5.7.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1107) [spring-boot-1.5.7.RELEASE.jar:1.5.7.RELEASE] at com.qxwz.ark.marble.ArkMarbleMain.main(ArkMarbleMain.java:24) [ark-marble-biz-1.3.0.jar:na] Caused by: java.lang.IllegalArgumentException: No handlers at org.springframework.util.Assert.isTrue(Assert.java:92) ~[spring-core-4.3.11.RELEASE.jar:4.3.11.RELEASE] at org.springframework.web.socket.messaging.SubProtocolWebSocketHandler.start(SubProtocolWebSocketHandler.java:244) ~[spring-websocket-4.3.11.RELEASE.jar:4.3.11.RELEASE] at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:175) ~[spring-context-4.3.11.RELEASE.jar:4.3.11.RELEASE] ... 15 common frames omitted  ---  **Affects:** 4.3.19","closed","status: declined,","spring-projects-issues","2018-10-09T09:07:44Z","2019-01-13T19:58:47Z"
"","21426","NPE in MutatorWebTestClientConfigurer (in SecurityMockServerConfigurers) [SPR-16887]","**[William Pietri](https://jira.spring.io/secure/ViewProfile.jspa?name=wpietri)** opened **[SPR-16887](https://jira.spring.io/browse/SPR-16887?redirect=false)** and commented  At lines 260-262 in SecurityMockServerConfigurers.java there is this code:  `public void afterConfigurerAdded(WebTestClient.Builder builder, @Nullable WebHttpHandlerBuilder webHttpHandlerBuilder, @Nullable ClientHttpConnector clientHttpConnector) {` `    webHttpHandlerBuilder.filters(addSetupMutatorFilter());` `}`  Here, `webHttpHandlerBuilder` is marked as Nullable, but that pretty clearly isn't right. I suspect this is caused by other null-related issues in the code.  In my case, this is getting triggered by something like:  {{`@Test` public void userInfoAllowedForLoggedInUsers() {}} `  client.mutateWith(SecurityMockServerConfigurers.mockUser().roles(""USER"")).` `     get().uri(""/user-info"").exchange().` `     expectStatus().isOk();` `}`  Here's the related stack trace:  ` at org.springframework.security.test.web.reactive.server.SecurityMockServerConfigurers$MutatorWebTestClientConfigurer.afterConfigurerAdded(SecurityMockServerConfigurers.java:261)` ` at org.springframework.security.test.web.reactive.server.SecurityMockServerConfigurers$UserExchangeMutator.afterConfigurerAdded(SecurityMockServerConfigurers.java:240)` ` at org.springframework.test.web.reactive.server.DefaultWebTestClientBuilder.apply(DefaultWebTestClientBuilder.java:153)` ` at org.springframework.test.web.reactive.server.DefaultWebTestClient.mutateWith(DefaultWebTestClient.java:141)`         ---  **Affects:** 5.0.5","closed","in: core,","spring-projects-issues","2018-05-31T20:13:43Z","2019-01-12T05:18:44Z"
"","21879","Integer overflow while uploading big files (> 2.1 GB) using webflux [SPR-17345]","**[wendigo](https://jira.spring.io/secure/ViewProfile.jspa?name=wendigo)** opened **[SPR-17345](https://jira.spring.io/browse/SPR-17345?redirect=false)** and commented  While uploading big files (> 2.1 GB) request ends with integer overflow that happens exactly here:  https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/http/codec/multipart/SynchronossPartHttpMessageReader.java#L141  Content-Length being Long is converted to int.      ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6fe8cb949fea77d931ffe99f1bceae2e135d22bc, https://github.com/spring-projects/spring-framework/commit/9064ef59f90dc4ee0fad390ad306fbf4b6ee3576  **Backported to:** [5.0.10](https://github.com/spring-projects/spring-framework/milestone/191?closed=1)","closed","type: bug,","spring-projects-issues","2018-10-05T11:50:53Z","2018-10-31T14:44:04Z"
"","21423","SchedulerFactoryBean should not override explicit ""org.quartz.scheduler.instanceName"" setting with bean name [SPR-16884]","**[WangYan](https://jira.spring.io/secure/ViewProfile.jspa?name=bigbearbro)** opened **[SPR-16884](https://jira.spring.io/browse/SPR-16884?redirect=false)** and commented  The property 'instanceName' can not be set correctly while using yml file.  quartz:      job-store-type: jdbc      properties:        org:          quartz:            scheduler:              instanceName: someInstanceName     and I continue debugging in  SchedulerFactoryBean #initSchedulerFactory#Line604  if (this.schedulerName != null) {  mergedProps.put(StdSchedulerFactory.PROP_SCHED_INSTANCE_NAME, this.schedulerName);  }  this.schedulerName is always used as default value 'quartzScheduler'.     ---  **Affects:** 5.0.6  **Issue Links:** - #5499 Multiple schedulers  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/50c95427960c620d86068ac2deae8a6220eac636","closed","type: enhancement,","spring-projects-issues","2018-05-31T15:18:46Z","2019-01-14T04:30:56Z"
"","21524","Improve performance for embedded Tomcat + static resources [SPR-16986]","**[Wang](https://jira.spring.io/secure/ViewProfile.jspa?name=the3rd)** opened **[SPR-16986](https://jira.spring.io/browse/SPR-16986?redirect=false)** and commented  org.springframework.web.context.support.ServletContextResource:  ~~~java          public InputStream getInputStream() throws IOException { 		InputStream is = this.servletContext.getResourceAsStream(this.path);  // **!!!HERE!!!** 		if (is == null) { 			throw new FileNotFoundException(""Could not open "" + getDescription()); 		} 		return is; 	}  	public boolean isReadable() { 		InputStream is = this.servletContext.getResourceAsStream(this.path);  // **!!!HERE!!!** 		if (is != null) { 			try { 				is.close(); 			} 			catch (IOException ex) { 				// ignore 			} 			return true; 		} 		else { 			return false; 		} 	} ~~~  But. org.apache.catalina.webresources.CachedResource  ~~~java     public InputStream getInputStream() {         byte[] content = getContent();         if (content == null) {             // Can't cache InputStreams             return webResource.getInputStream();  // **!!!HERE!!!**         }         return new ByteArrayInputStream(content);     }      @Override     public byte[] getContent() {         byte[] cachedContent = this.cachedContent;         if (cachedContent == null) {             if (getContentLength() > objectMaxSizeBytes) {                 return null;             }             cachedContent = webResource.getContent(); // **!!!HERE!!!**             this.cachedContent = cachedContent;         }         return cachedContent;     } ~~~  Tomcat CAN NOT cache stream.  And extract it from jar every request, so CPU is higher.   ---  **Affects:** 4.3.17  **Attachments:** - [20180629164828.png](https://jira.spring.io/secure/attachment/25759/20180629164828.png) (_23.13 kB_)","closed","status: invalid,","spring-projects-issues","2018-06-29T08:49:18Z","2019-01-12T05:18:37Z"
"","21417","RequestMapping works on private methods [SPR-16878]","**[Vipin VijayKumar](https://jira.spring.io/secure/ViewProfile.jspa?name=vipin.vijay.kumar9@gmail.com)** opened **[SPR-16878](https://jira.spring.io/browse/SPR-16878?redirect=false)** and commented  Where would we use `@RequestMapping` with private methods? Is there a specific use case  The reason why I am asking this is that I noticed that `@RequestMapping` worked on private methods as well. Why is this so?  Is it because spring access these methods through reflections so access modifiers aren't really considered? Is this a bug or a feature that has uses?      --- No further details from [SPR-16878](https://jira.spring.io/browse/SPR-16878?redirect=false)","closed","in: core,","spring-projects-issues","2018-05-28T10:02:33Z","2019-01-12T16:21:13Z"
"","21882","Send static file action is invoked before applying the relevant headers  [SPR-17348]","**[Violeta Georgieva](https://jira.spring.io/secure/ViewProfile.jspa?name=violetagg)** opened **[SPR-17348](https://jira.spring.io/browse/SPR-17348?redirect=false)** and commented  Hi,  There is the following code for sending static file in  ```java org.springframework.http.server.reactive.ReactorServerHttpResponse ```  ```java public Mono writeWith(File file, longposition, longcount) {     return doCommit(() -> this.response.sendFile(file.toPath(), position, count).then()); }  protected Mono doCommit(@Nullable Supplier> writeAction) {     if (!this.state.compareAndSet(State.NEW, State.COMMITTING)) {         if (logger.isDebugEnabled()) {             logger.debug(""Skipping doCommit (response already committed)."");         }         return Mono.empty();     }      this.commitActions.add(() ->         Mono.fromRunnable(() -> {             applyStatusCode();             applyHeaders();             applyCookies();             this.state.set(State.COMMITTED);     }));      if (writeAction != null) {         this.commitActions.add(writeAction);     }      List> actions = this.commitActions.stream() .map(Supplier::get).collect(Collectors.toList());      return Flux.concat(actions).then(); } ```  As a result of  ```java .map(Supplier::get) ```  ,  ```java this.response.sendFile(file.toPath(), position, count) ```  will be executed before applying the relevant headers. In case there is a compression predicate that uses the information from the headers in order to instruct Reactor Netty whether to compress or not then the predicate may return wrong instructions because of the missing headers.  Original issue is reported here https://github.com/reactor/reactor-netty/issues/430   Can you please check this?  Thanks in a advance, Violeta  ---  **Affects:** 5.0.9  **Issue Links:** - #21138 WebFlux commitActions are called after status, headers and cookies are set","closed","status: declined,","spring-projects-issues","2018-10-05T15:52:58Z","2019-01-12T16:20:51Z"
"","21517","Spring context indexer is not designed for the Java 9 module path [SPR-16979]","**[Viktar Tumanau](https://jira.spring.io/secure/ViewProfile.jspa?name=tumanvik)** opened **[SPR-16979](https://jira.spring.io/browse/SPR-16979?redirect=false)** and commented  Spring-context and spring-context-indexer have the same package: org.springframework.context.index. This problem is known in java 9 as split package. Due to modularity it is not possible to use spring-context-indexer with spring-context.   I tried to create a patch - to move all source code from indexer to context, but I could not even build it. Are you planning to add java 9 modularity support?   ---  **Affects:** 5.0.7  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f7d22a0b420339d03bfb1295966f5ee22ddfeb29","closed","type: enhancement,","spring-projects-issues","2018-06-27T06:47:24Z","2018-07-26T08:09:32Z"
"","21826","Command line arguments to set json properties has no impact [SPR-17293]","**[Vijendra](https://jira.spring.io/secure/ViewProfile.jspa?name=vijendra)** opened **[SPR-17293](https://jira.spring.io/browse/SPR-17293?redirect=false)** and commented   am using spring boot 2.0.4 and creating an executable jar.  I have below properties defined in my application.properties   `configserviceendpoint=devendpoint`  I am following [spring docs](https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html) to pass the properties as .json and tried running the application using below commands  > java -Dspring.application.json='{""configserviceendpoint"":""prod end point""}' -jar myapp.jar  > java -jar myapp.jar --spring.application.json='{""configserviceendpoint"":""prod end point""}'  While trying to access the property in my code it still shows the value defined in `application.properties` and not the one which is being passed in command as .json  Thanks.  ---  No further details from [SPR-17293](https://jira.spring.io/browse/SPR-17293?redirect=false)","closed","status: invalid,","spring-projects-issues","2018-09-21T11:35:58Z","2019-01-13T20:04:50Z"
"","21230","spring-webmvc-5.0.4.RELEASE.jar is missing package org.springframework.web.servlet.view.jasperreports along with all its classes [SPR-16689]","**[Vijay Soni](https://jira.spring.io/secure/ViewProfile.jspa?name=vksoni)** opened **[SPR-16689](https://jira.spring.io/browse/SPR-16689?redirect=false)** and commented  While migrating from spring boot 1.5.10 to 2.0.0. I noticed that JasperReportsPdfView class was missing.  After digging it a bit more I found that spring-boot 1.5.10 uses spring-webmvc-4.3.14.RELEASE.jar which contained this class. But spring-boot 2.0.0 uses spring-webmvc-5.0.4.RELEASE.jar and it is missing the whole package org.springframework.web.servlet.view.jasperreports and all classes inside it.  Has this package been moved to somewhere else deliberately?   --- No further details from [SPR-16689](https://jira.spring.io/browse/SPR-16689?redirect=false)","closed","status: declined,","spring-projects-issues","2018-04-04T09:53:12Z","2018-04-04T12:50:57Z"
"","21622","@RequestBody validation kotlin support improvement [SPR-17085]","**[Viacheslav Petriaiev](https://jira.spring.io/secure/ViewProfile.jspa?name=vpetriaiev)** opened **[SPR-17085](https://jira.spring.io/browse/SPR-17085?redirect=false)** and commented  Hello, I have the next issue  javax.validation annotations (for example `@NotEmpty`) is not working properly with kotlin data class  Not working data class  ```java data class User(@NotNull val login: String? = null) ```  Working data class  ```java data class User(@field:NotNull val login: String? = null) ```  Thanks  ---  **Affects:** 5.0.7  **Issue Links:** - #21381 Validation failure not exposed next to binding failure for immutable form class","closed","status: invalid,","spring-projects-issues","2018-07-25T09:39:24Z","2019-01-12T05:18:26Z"
"","21737","RestTemplate doesn't load certs from truststore and fails on https calls [SPR-17204]","**[venkata](https://jira.spring.io/secure/ViewProfile.jspa?name=backlashwave)** opened **[SPR-17204](https://jira.spring.io/browse/SPR-17204?redirect=false)** and commented  I have been trying make https calls internally. I can standard HttpsURLConnection and it would load the certs for default jre/lib/security and make the call successfully. But if I use RestTemplate it would fail even when give pass the truststore details as jvm arguments to the boot application.     I tried switching to okhttpclient request factory and passed a client to it and it still fails but succeeds when using only OkHttpClient instead of RestTemplate. notice that I use the same client instance.  -------success------ OkHttpClient client = new OkHttpClient.Builder() .authenticator(new Authenticator() { `@Override` public Request authenticate(Route route, Response response) throws IOException { if (response.request().header(""Authorization"") != null) { return null; // Give up, we've already attempted to authenticate. }      	              System.out.println(""Authenticating for response: "" + response);     	              System.out.println(""Challenges: "" + response.challenges());     	              String credential = Credentials.basic(""foo"", ""bar"");     	              return response.request().newBuilder()     	                  .header(""Authorization"", credential)     	                  .build();     	            }     	          })     	          .build();     	     	Request request = new Request.Builder().url(""https://someurl"").build();     	     	try (Response response = client.newCall(request).execute()) {     	      if (!response.isSuccessful()) throw new IOException(""Unexpected code "" + response);          	      System.out.println(response.body().string());     	    }  -------failure----------------------------- RestTemplate restTemplate = new RestTemplate(new OkHttp3ClientHttpRequestFactory(client));      String response = restTemplate.getForObject( ""https://someurl"",               String.class);               System.out.println(response);            ---  **Affects:** 5.0.8","closed","status: invalid,","spring-projects-issues","2018-08-22T16:27:06Z","2019-01-12T05:18:18Z"
"","21828","Support for removeHeader in MockHttpServletRequest [SPR-17295]","**[Veit Guna](https://jira.spring.io/secure/ViewProfile.jspa?name=vguna)** opened **[SPR-17295](https://jira.spring.io/browse/SPR-17295?redirect=false)** and commented  The `MockHttpServletRequest` supports methods like `removeParameter` or `removeAttribute` but sadly not `removeHeader`.  It can be quite handy to have one method, that creates a default mock request, having default values, and then in some specific tests being able to modify the default request as needed.  Would be cool if that could be added.     ---  **Affects:** 5.0.9  **Issue Links:** - #21821 Remove/overwrite header in MockHttpServletRequest - #21924 Allow setting headers in MockHttpServletRequest  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a21ce4255866b0dc6d1051a0b469af8363a972a8, https://github.com/spring-projects/spring-framework/commit/255015fc6b0547cfc2fbf3feec3d7e85333d1d40, https://github.com/spring-projects/spring-framework/commit/e978f90a19b7ae67ebc4883f4cec0868182c182a, https://github.com/spring-projects/spring-framework/commit/a76b8deda58926d9850aa6a5076a920a631ce098, https://github.com/spring-projects/spring-framework/commit/51ba322947a17a477ca1b93784224a8711de0a6c  **Backported to:** [5.0.10](https://github.com/spring-projects/spring-framework/milestone/191?closed=1), [4.3.20](https://github.com/spring-projects/spring-framework/milestone/169?closed=1)","closed","type: enhancement,","spring-projects-issues","2018-09-21T12:55:41Z","2019-01-11T14:12:07Z"
"","21564","'Caused by: java.lang.NegativeArraySizeException: null' on RabbitMQ Listener [SPR-17026]","**[Veit Guna](https://jira.spring.io/secure/ViewProfile.jspa?name=vguna)** opened **[SPR-17026](https://jira.spring.io/browse/SPR-17026?redirect=false)** and commented  Hi.  We're running a high load REST service using Oracle JDK 1.8.0_162, Tomcat 7.0.85, RabbitMQ 3.6.10, Newrelic Agent 4.0.0, Prometheus Agent 0.9, Spring 4.3.14 and  spring-rabbit 1.7.6 on a AWS EC2/ECS cluster.  The service works with RabbitMQ queues where we listen for messages in several listeners. Lately we encountered that one of the listeners started to throw exceptions like the one below. As you can see in the Stacktrace, there's no sign of our code involved. Just JDK and Spring classes. It seems to die by looking up a method on the listener `Class`. It started on one of our nodes, then some days/deploys later on other nodes as well - leading to massive errors (~150k) per day.  The listener has several queue binding methods and the error was thrown by different methods on this class.  Googling showed a similar problem here: #17516  There it was about some JVM crashing/JDK bug (what doesn't happen for us) and some sign of NewRelic Agent might being involved. But both ""bugs"" have been solved years ago.  So I'm wondering if you guys have encountered similar problems in the past with a similar setup.  Listener:  ```java @Component public class Listener {      @Autowired     private RabbitOperations rabbitOperations;      @RabbitListener(bindings = {             @QueueBinding(                     exchange = @Exchange(value = MessageA.EXCHANGE, type = ExchangeTypes.TOPIC, durable = ""true""),                     value = @Queue(                             value = Queues.IN_NEW_QUEUE, durable = ""true"",                             arguments = @Argument(name = ""x-expires"", value = Queues.Q_EXPIRES, type = ""java.lang.Long"")                             ),                     key = ""#"")     })     public void someMethod(@Payload @Valid MessageA message) { 		...     }      @RabbitListener(bindings = {             @QueueBinding(                     exchange = @Exchange(value = MessageB.EXCHANGE, type = ExchangeTypes.TOPIC, durable = ""true""),                     value = @Queue(                             value = Queues.IN_STATE_CHANGE_QUEUE, durable = ""true"",                             arguments = @Argument(name = ""x-expires"", value = Queues.Q_EXPIRES, type = ""java.lang.Long"")                             ),                     key = Message.TOPIC_PLATFORM + ""#""),             @QueueBinding(                     exchange = @Exchange(value = MessageB.EXCHANGE, type = ExchangeTypes.TOPIC, durable = ""true""),                     value = @Queue(                             value = Queues.IN_STATE_CHANGE_QUEUE, durable = ""true"",                             arguments = @Argument(name = ""x-expires"", value = Queues.Q_EXPIRES, type = ""java.lang.Long"")                             ),                     key = Message.TOPIC_TEST + "".#"")})     public void someMethodB(@Payload @Valid MessageB message) { 		...     }      @RabbitListener(bindings = {             @QueueBinding(                     exchange = @Exchange(value = MessageC.EXCHANGE, type = ExchangeTypes.TOPIC, durable = ""true""),                     value = @Queue(                             value = Queues.IN_TRACKING_CHANGE_QUEUE, durable = ""true"",                             arguments = @Argument(name = ""x-expires"", value = Queues.Q_EXPIRES, type = ""java.lang.Long"")                             ),                     key = Message.TOPIC_PLATFORM + ""#""),             @QueueBinding(                     exchange = @Exchange(value = MessageC.EXCHANGE, type = ExchangeTypes.TOPIC, durable = ""true""),                     value = @Queue(                             value = Queues.IN_TRACKING_CHANGE_QUEUE, durable = ""true"",                             arguments = @Argument(name = ""x-expires"", value = Queues.Q_EXPIRES, type = ""java.lang.Long"")                             ),                     key = Message.TOPIC_TEST + "".#"")})     public void someMethodC(@Payload @Valid MessageC message) { 		...     }          ... }   ```  Exception that was thrown:  ```java 2018-07-06 10:50:09,478 [ERROR]  pool-14-thread-9     c.n.messaging.RabbitErrorHandler - Too many errors in Rabbit message listeners; message rejected. org.springframework.amqp.rabbit.listener.exception.ListenerExecutionFailedException: Listener method 'public void com.acme.Listener.someMethod(com.acme.Message)' threw exception 	at org.springframework.amqp.rabbit.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:140) 	at org.springframework.amqp.rabbit.listener.adapter.MessagingMessageListenerAdapter.onMessage(MessagingMessageListenerAdapter.java:106) 	at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:856) 	at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:779) 	at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer.access$001(SimpleMessageListenerContainer.java:105) 	at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer$1.invokeListener(SimpleMessageListenerContainer.java:208) 	at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer.invokeListener(SimpleMessageListenerContainer.java:1349) 	at org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.executeListener(AbstractMessageListenerContainer.java:760) 	at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer.doReceiveAndExecute(SimpleMessageListenerContainer.java:1292) 	at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer.receiveAndExecute(SimpleMessageListenerContainer.java:1262) 	at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer.access$1800(SimpleMessageListenerContainer.java:105) 	at org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer$AsyncMessageProcessingConsumer.run(SimpleMessageListenerContainer.java:1518) 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) 	at java.lang.Thread.run(Thread.java:748) Caused by: java.lang.NegativeArraySizeException: null 	at java.lang.Class.getDeclaredMethods0(Native Method) 	at java.lang.Class.privateGetDeclaredMethods(Class.java:2701) 	at java.lang.Class.getDeclaredMethod(Class.java:2128) 	at org.springframework.core.LocalVariableTableParameterNameDiscoverer$LocalVariableTableVisitor.resolveMember(LocalVariableTableParameterNameDiscoverer.java:245) 	at org.springframework.core.LocalVariableTableParameterNameDiscoverer$LocalVariableTableVisitor.visitEnd(LocalVariableTableParameterNameDiscoverer.java:231) 	at org.springframework.asm.ClassReader.readMethod(ClassReader.java:1172) 	at org.springframework.asm.ClassReader.accept(ClassReader.java:729) 	at org.springframework.asm.ClassReader.accept(ClassReader.java:527) 	at org.springframework.core.LocalVariableTableParameterNameDiscoverer.inspectClass(LocalVariableTableParameterNameDiscoverer.java:114) 	at org.springframework.core.LocalVariableTableParameterNameDiscoverer.getParameterNames(LocalVariableTableParameterNameDiscoverer.java:73) 	at org.springframework.core.PrioritizedParameterNameDiscoverer.getParameterNames(PrioritizedParameterNameDiscoverer.java:53) 	at org.springframework.core.MethodParameter.getParameterName(MethodParameter.java:553) 	at org.springframework.messaging.handler.annotation.support.PayloadArgumentResolver.getParameterName(PayloadArgumentResolver.java:150) 	at org.springframework.messaging.handler.annotation.support.PayloadArgumentResolver.validate(PayloadArgumentResolver.java:193) 	at org.springframework.messaging.handler.annotation.support.PayloadArgumentResolver.resolveArgument(PayloadArgumentResolver.java:129) 	at org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:112) 	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:135) 	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:107) 	at org.springframework.amqp.rabbit.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:49) 	at org.springframework.amqp.rabbit.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:126) 	... 14 common frames omitted   ```      ---  **Affects:** 4.3.14","open","in: messaging,","spring-projects-issues","2018-07-10T07:45:27Z","2019-03-14T08:14:31Z"
"","21647","Add support for adding cookies as headers in MockHttpServletResponse [SPR-17110]","**[Vedran Pavic](https://jira.spring.io/secure/ViewProfile.jspa?name=vpavic)** opened **[SPR-17110](https://jira.spring.io/browse/SPR-17110?redirect=false)** and commented  Adding cookies that contain directives that aren't directly supported in Servlet API, such as `SameSite` for example, requires writing cookie directly using `HttpServletResponse#addHeader`, instead of commonly used `HttpServletResponse#addCookie`.  As `MockHttpServletResponse` doesn't have any special treatment for `Set-Cookie` header (i.e. doesn't parse and add cookies that were added directly as headers), testing of code that writes cookies in the manner described above is quite a painful experience.  ---  **Affects:** 4.3.18, 5.0.8, 5.1 RC1  **Issue Links:** - #21854 MockCookie parsing fails if cookie does not include attributes  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1913, and commits https://github.com/spring-projects/spring-framework/commit/bb2db87c2f3e038de4da504db479b097dbd081d7","closed","type: enhancement,","spring-projects-issues","2018-08-01T12:50:33Z","2019-01-11T12:50:28Z"
"","21646","MockHttpSession doesn't publish session binding event for replaced attributes [SPR-17109]","**[Vedran Pavic](https://jira.spring.io/secure/ViewProfile.jspa?name=vpavic)** opened **[SPR-17109](https://jira.spring.io/browse/SPR-17109?redirect=false)** and commented  At present, `MockHttpSession` invokes `HttpSessionBindingListener` instances when attribute is set `#valueBound` and when it is removed `#valueUnbound`.  However, in case when an existing attribute is being updated, if replaced value is an `HttpSessionBindingListener` instance `#valueUnbound` should be invoked as well.  For reference, see Tomcat's `StandardSession` [1] and Spring Session's `HttpSessionAdapter` [2].  [1] https://github.com/apache/tomcat/blob/trunk/java/org/apache/catalina/session/StandardSession.java#L1444-L1457 [2] https://github.com/spring-projects/spring-session/blob/master/spring-session-core/src/main/java/org/springframework/session/web/http/HttpSessionAdapter.java#L143-L150   ---  **Affects:** 4.3.18, 5.0.8, 5.1 RC1  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1912, and commits https://github.com/spring-projects/spring-framework/commit/70dbaf9751961fc9105241830fd206b873fb738c","closed","type: enhancement,","spring-projects-issues","2018-08-01T10:59:36Z","2018-08-17T09:42:44Z"
"","21884","Generate a CacheCreatedEvent from the Spring Caching Abstraction [SPR-17350]","**[Tyler K Van Gorder](https://jira.spring.io/secure/ViewProfile.jspa?name=tkvangorder)** opened **[SPR-17350](https://jira.spring.io/browse/SPR-17350?redirect=false)** and commented  Now that Spring Boot 2.x uses Micrometer for its metrics abstraction, it is helpful to have the caching abstraction instrumented such that metrics around cache size, hits, misses, puts, and evictions are published through Micrometer.  Spring Boot does do some limited auto-configuration to instrument the caching abstraction but is limited to only those caches that are known at startup time. This limitation is due to the fact that there is no way to observe when a new, dynamic cache has been created by the Spring Caching abstraction.  The current functionality means that any methods that are marked as `@Cacheable` will NOT have their metrics recorded through Micrometer.  To solve this problem without having to embed knowledge of Micrometer into each cache manager implementation, it would be better to have those cache managers publish an application event, CacheCreatedEvent.  This would allow for Spring Boot to auto-configure a listener for that event and bind all caches, dynamic or otherwise, to Micrometer's meter registry.  Looking at the code, the CaceCreateEvent should be emitted from the CacheManager.getCache(String name) method. The event should have both the cache name and the cache manager that was used to create the cache.  Most of the cache manager implementations extend AbstractCacheManager, and therefore this will be a good place to publish the event. However, there are a couple of additional CacheManager implementations (CaffineCacheMAnager, ConcurrentMapCacheManager) that do not extends the abstract base class and will also need to be modified to publish the event.   ---  **Affects:** 5.0.9, 5.1 GA  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/14576  4 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2018-10-05T21:49:11Z","2020-08-06T09:08:19Z"
"","21425","SqlServerMaxValueIncrementer variant based on MS SQL sequences (avoiding deadlocks) [SPR-16886]","**[Tyler K Van Gorder](https://jira.spring.io/secure/ViewProfile.jspa?name=tkvangorder)** opened **[SPR-16886](https://jira.spring.io/browse/SPR-16886?redirect=false)** and commented  We are currently refactoring a legacy scheduler application to use spring cloud data flow and spring cloud task. The tasks are mostly spring batch applications and we have been encountering deadlock issues in the batch meta tables when using MS SQL Server.  Digging into this a bit further, we discovered our issue related to the the strategy being used for sequences and there is already an issue in [Spring Batch](https://jira.spring.io/browse/BATCH-2147).  The use of a sequence table (likely because older versions of SQL Server didn't have support for sequences) and the strategy to delete records from that table result in deadlocks.  We were able to work around this issue by customizing the creation of the Job repository such that a custom Incrementer is installed that uses sequences instead.  So, why are we filing this issue here?  We realized we are likely to have the same issue in Spring Cloud Task's meta-tables. We had to do some more Spring gymnastics to override the Incrementer there, it was not as easy as Spring Batch, but we managed.  We also need to make sure Spring Cloud Data Flow is using the same incrementer and that is even [harder to override......](https://github.com/spring-cloud/spring-cloud-dataflow/blob/ef31de324ee20322199bf32ef482b5ae6af7e892/spring-cloud-dataflow-server-core/src/main/java/org/springframework/cloud/dataflow/server/config/features/TaskConfiguration.java#L86-L89)  All of these issues lead back to need for a better strategy for getting max values when using MS SQL Server.      ---  **Affects:** 4.3.17, 5.0.6","open","type: enhancement,","spring-projects-issues","2018-05-31T17:43:38Z","2022-04-06T10:03:21Z"
"","21729","HeaderAssertions.lastModified/expires takes an int value but it should be long [SPR-17194]","**[Toshiaki Maki](https://jira.spring.io/secure/ViewProfile.jspa?name=making)** opened **[SPR-17194](https://jira.spring.io/browse/SPR-17194?redirect=false)** and commented  https://github.com/spring-projects/spring-framework/blob/v5.0.8.RELEASE/spring-test/src/main/java/org/springframework/test/web/reactive/server/HeaderAssertions.java#L152-L164   `lastModified`/`expires` should take a `long` value as `int` can express up to `1970-01-25T20:31:23.647Z` ...  ---  **Affects:** 5.0.8, 5.1 RC2  **Issue Links:** - #21730 Some WebTestClient HeaderAssertions' methods unusable (_**""is duplicated by""**_)  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1931","closed","type: bug,","spring-projects-issues","2018-08-17T15:34:09Z","2019-01-11T13:39:37Z"
"","21678","BindingAwareConcurrentModel should properly react to null value [SPR-17141]","**[Toshiaki Maki](https://jira.spring.io/secure/ViewProfile.jspa?name=making)** opened **[SPR-17141](https://jira.spring.io/browse/SPR-17141?redirect=false)** and commented  [`BindingAwareConcurrentModel`](https://docs.spring.io/spring/docs/5.0.8.RELEASE/javadoc-api/org/springframework/validation/support/BindingAwareConcurrentModel.html) extends `ConcurrentHashMap` so the value in `put(key, value)` must not be null. This could happen when Spring WebFlux and `Rendering` are used.  Here is a simple reproducible code  ```java import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.reactive.result.view.Rendering;  @SpringBootApplication @Controller public class DemoWebFluxExceptionApplication {      public static void main(String[] args) {         SpringApplication.run(DemoWebFluxExceptionApplication.class, args);     }      @GetMapping(""/"")     public Rendering hello(Model model) throws Exception {         String value = this.couldBeNull();         return Rendering.view(""demo"").modelAttribute(""value"", value).build();     }      String couldBeNull() {         return null;     } } ```  -Actually, `ConcurrentModel` which is the parent annotates `value` as [`Nullable`](https://docs.spring.io/spring/docs/5.0.8.RELEASE/javadoc-api/org/springframework/ui/ConcurrentModel.html#addAttribute-java.lang.String-java.lang.Object-).- (sorry, I found javadoc saids the value must not be null)  `ConcurrentModel` should ignore the entry if the value if `null` or javadoc for `org.springframework.web.reactive.result.view.Rendering.Builder` should clarify that the value must not be null.  ---  **Affects:** 5.0.8  **Reference URL:** #21371  **Issue Links:** - #21371 ConcurrentModel.addAttribute(name, value) javadoc should not declare null value as acceptable","closed","type: enhancement,","spring-projects-issues","2018-08-07T16:29:27Z","2019-01-14T04:29:18Z"
"","21171","An error occurs if a blank character exists before and after the delimiter of the MIME type parameter. [SPR-16630]","**[Toru Suzuki](https://jira.spring.io/secure/ViewProfile.jspa?name=toru-s)** opened **[SPR-16630](https://jira.spring.io/browse/SPR-16630?redirect=false)** and commented  An error occurs if a blank character exists before and after the delimiter of the MIME type parameter.  example:  ``` Caused by: org.springframework.util.InvalidMimeTypeException: Invalid mime type ""multipart/x-mixed-replace;boundary = --myboundary"": Invalid token character ' ' in token ""boundary "" 	at org.springframework.util.MimeTypeUtils.parseMimeType ```    ---  **Affects:** 4.3.14  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1746  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","in: core,","spring-projects-issues","2018-03-23T05:17:43Z","2018-04-03T20:34:26Z"
"","21471","RestController fails with java.lang.ClassCastException: java.lang.String cannot be cast to org.springframework.core.io.support.ResourceRegion [SPR-16932]","**[Torsten Werner](https://jira.spring.io/secure/ViewProfile.jspa?name=bollin)** opened **[SPR-16932](https://jira.spring.io/browse/SPR-16932?redirect=false)** and commented  I have a simple `@RestController` implementing a method returning List\. Spring 5 fails with a ClassCastException when accessing [http://localhost:8080.](http://localhost:8080./) I have created a sample project at https://github.com/torstenwerner/springwebmvcexception that reproduces the problem. Please look at the file DemoApi.java for the implementation. The web controller works with spring 4.3 and returns JSON serialized by jackson.   ---  **Affects:** 5.0.6  **Reference URL:** https://github.com/torstenwerner/springwebmvcexception  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/96eba8b99772f3b5ac041b5a9856eb7754ee63ca, https://github.com/spring-projects/spring-framework/commit/05ff8b722d13d8a59adf8890ccd751ea90fc7acb","closed","type: bug,","spring-projects-issues","2018-06-11T19:28:02Z","2018-06-12T15:44:03Z"
"","21464","FilePart.transferTo should accept java.nio.file.Path [SPR-16925]","**[Tomasz Elendt](https://jira.spring.io/secure/ViewProfile.jspa?name=telendt)** opened **[SPR-16925](https://jira.spring.io/browse/SPR-16925?redirect=false)** and commented  In Spring 5.0 `http.codec.multipart.FilePart` interface got introduced with `transferTo(File dest)` method. I think it's very unfortunate that there's a public interface being added to Spring 5.x (that specify JDK 8+ in its minimum requirements) that uses `java.io.File` instead of `java.nio.file.Path`. Interestingly, the `File` object is completely not needed and the only implementation of that interface calls [`desc.toPath`](https://github.com/spring-projects/spring-framework/blob/v5.0.6.RELEASE/spring-web/src/main/java/org/springframework/http/codec/multipart/SynchronossPartHttpMessageReader.java#L330) (and does not use any File-specific method).  For those not familiar with differences -- `java.nio.file.Path` is an interface representing a file, that has been added in Java 7. It has many advantages over old `java.io.File`, one of which that it might be associated with custom (non-default) filesystem.  A more concrete example -- if `transferTo` accepted `java.nio.file.Path` (and there were no `path.toFile` calls) one could use in-memory filesystem, like [Jimfs](https://github.com/google/jimfs) in their controller tests.  I filed this bug report having specifically `http.codec.multipart.FilePart` API in mind, but I think that Spring should migrate to `java.nio.file.Path` in other places as well. Especially now, that support of older Java versions is dropped. I also think that no new code should be added that uses `java.io.File`   - not sure if that can be verified by some static analysis tool.  ---  **Affects:** 5.0 GA  **Issue Links:** - #21373 java.nio.file.Path support in FileSystemResource (with regular createRelative behavior, superseding PathResource)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1e5f8cc2321d0f466cfb3133d169781c480ab3c7","closed","type: enhancement,","spring-projects-issues","2018-06-10T22:12:31Z","2019-01-11T15:41:58Z"
"","21185","Unsafe async operator in JSON tokenizer [SPR-16644]","**[Tomas Cernaj](https://jira.spring.io/secure/ViewProfile.jspa?name=tcernaj)** opened **[SPR-16644](https://jira.spring.io/browse/SPR-16644?redirect=false)** and commented  While reviewing the implementation of `Jackson2Tokenizer`, I've noticed the use of the [Flux.flatMap](https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html#flatMap-java.util.function.Function-java.util.function.Function-java.util.function.Supplier-) operator in a context that needs to sequentially work on `DataBuffer` input in [Jackson2Tokenizer:85](https://github.com/spring-projects/spring-framework/blob/3bfa56dff24e3e8088a1f2413ca1df38e28c3bd2/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2Tokenizer.java#L85):  ```java return dataBuffers.flatMap(tokenizer::tokenize, Flux::error, tokenizer::endOfInput); ```  The Javadoc of the `flatMap` operator clearly states that ordering of the elements might not be preserved. In fact, in a similar implementation of mine I've observed this behavior with large chunked input. Using [Flux.concatMap](https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html#concatMap-java.util.function.Function-) fixed the behavior.  Do you agree that instead of `flatMap` the above line should use `concatMap`?   ---  **Affects:** 5.0.4","closed","status: declined,","spring-projects-issues","2018-03-26T18:32:05Z","2019-01-12T16:21:36Z"
"","21648","Spring Modules Validation does not work with spring framwork 4.3.18 [SPR-17111]","**[Tom](https://jira.spring.io/secure/ViewProfile.jspa?name=tomcat2228)** opened **[SPR-17111](https://jira.spring.io/browse/SPR-17111?redirect=false)** and commented  Found out spring-modules-validation 0.8 won't work with springframework 4.3.18.  The major reason is it is using ClassUtils.forName(String), but in the newer springframework, the ClassUtils.forName(String) API was deprecated. The new API is  public static [Class](https://docs.oracle.com/javase/6/docs/api/java/lang/Class.html?is-external=true) forName([String](https://docs.oracle.com/javase/6/docs/api/java/lang/String.html?is-external=true) name, [ClassLoader](https://docs.oracle.com/javase/6/docs/api/java/lang/ClassLoader.html?is-external=true) classLoader) throws [ClassNotFoundException](https://docs.oracle.com/javase/6/docs/api/java/lang/ClassNotFoundException.html?is-external=true), [LinkageError](https://docs.oracle.com/javase/6/docs/api/java/lang/ClassNotFoundException.html?is-external=true)    Cannot find update version of spring-modules-validation which uses newer ClassUtils.forname(String, ClassLoader)   Try to download the source of spring-modules-validation and compile with springframework 4.3.18, not just ClassUtils.forName got compile error, but also it depends on spring-webmvc-2.5.2.  Please share the information if spring already have newer version of spring-modules-validation which works with springframework 4.3.18.  Thanks,   ---  **Affects:** 4.3.18","closed","in: core,","spring-projects-issues","2018-08-01T17:21:04Z","2019-01-12T16:20:59Z"
"","21664","Memory leak in CommonAnnotationBeanPostProcessor [SPR-17127]","**[Timur Strekalov](https://jira.spring.io/secure/ViewProfile.jspa?name=timurstrekalov)** opened **[SPR-17127](https://jira.spring.io/browse/SPR-17127?redirect=false)** and commented  `org.springframework.context.annotation.CommonAnnotationBeanPostProcessor#findResourceMetadata` puts metadata into the `org.springframework.context.annotation.CommonAnnotationBeanPostProcessor#injectionMetadataCache`, but nothing ever cleans it, leading to a memory leak in case bean definitions for beans with different names get added and removed. This is particularly visible when using Spring Integration's dynamic flows.  Note that this issue could be considered a duplicate of #21663, since the code for `findResourceMetadata` and `findAutowiringMetadata` is exactly the same, but I figured I'd report two separate issues anyway.  ---  **Affects:** 5.0.8  **Issue Links:** - #21663 BeanDefinition-aware BeanPostProcessors should clear cache in case of bean definition reset (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2018-08-06T12:15:41Z","2019-01-12T16:44:26Z"
"","21663","BeanDefinition-aware BeanPostProcessors should clear cache in case of bean definition reset [SPR-17126]","**[Timur Strekalov](https://jira.spring.io/secure/ViewProfile.jspa?name=timurstrekalov)** opened **[SPR-17126](https://jira.spring.io/browse/SPR-17126?redirect=false)** and commented  `org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor#findAutowiringMetadata` puts metadata into the `org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor#injectionMetadataCache`, but nothing ever cleans it, leading to a memory leak in case bean definitions for beans with different names get added and removed. This is particularly visible when using Spring Integration's dynamic flows.  ---  **Affects:** 5.0.8  **Issue Links:** - #21664 Memory leak in CommonAnnotationBeanPostProcessor (_**""is duplicated by""**_) - #21457 Optimize AbstractAutowireCapableBeanFactory.populateBean(String, RootBeanDefinition, BeanWrapper) to avoid redundant Java Bean introspection - #20796 dependentBeanMap won't be rebuilt after destroySingleton and recreate it  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e64c6dfa3d7b1e34c7f6368c0512d498f0e3ed83, https://github.com/spring-projects/spring-framework/commit/28565e25fa6e93bc3ea16d7f9e5fbf0127261cc7","closed","type: enhancement,","spring-projects-issues","2018-08-06T12:12:28Z","2019-01-11T14:01:26Z"
"","21757","Spring Webflux: No Error Page for BAD_REQUEST (400)  [SPR-17224]","**[tillmannheigel](https://jira.spring.io/secure/ViewProfile.jspa?name=tillmannheigel)** opened **[SPR-17224](https://jira.spring.io/browse/SPR-17224?redirect=false)** and commented  **Description:**  When a requests comes in with a (e.g.) bad encoded url, Spring Webflux does respond with the expected errorPage only with the headers. The origin of the problem is the `ReactorHttpHandlerAdapter` which is for any `URISyntaxException`returning an Mono.empty() so that it never shows the error pages.  **Example:**  ```java GET http://localhost:8080/?foo=\{bar} => HTTP/1.1 400 Bad Request transfer-encoding: chunked ```  Is this is the expected behaviour? Is there any workaround to give some more information to the user?  Thanks in advance! Tillmann   ---  **Affects:** 5.1 RC2","closed","status: declined,","spring-projects-issues","2018-08-29T07:24:58Z","2019-01-12T16:20:54Z"
"","21264","AspectJ execution pointcut does not detect methods in superinterface anymore [SPR-16723]","**[Tiberiu Tofan](https://jira.spring.io/secure/ViewProfile.jspa?name=tibtof)** opened **[SPR-16723](https://jira.spring.io/browse/SPR-16723?redirect=false)** and commented  After upgrading from Spring Boot 2.0.0.M7 (Sprig AOP 5.0.2) to Spring Boot 2.0.1.RELEASE (Spring AOP 5.0.5) the following advice doesn't work anymore:  ```java @Around(""execution(* org.springframework.data.mongodb.repository.MongoRepository.deleteById(..)) && args(id)"") ```  It looks like the pointcut ignores methods that are declared only in a super interface. If I actually override the methods in my MongoRepository, the advice is applied.  A workaround for this is to use the interface where the method is actually declared as a execution pointcut, and specify the target separately:  ```java @Around(""target(org.springframework.data.mongodb.repository.MongoRepository) && execution(* org.springframework.data.repository.CrudRepository.deleteById(*)) && args(id)"") ```  ---  **Affects:** 5.0.5  **Issue Links:** - #21216 Comprehensively cache annotated methods for interfaces and superclasses - #21218 Mixed use BeanNameAutoProxyCreator and AnnotationAwareAspectJAutoProxyCreator to proxy same bean - #21274 Unnecessary proxying with MethodMapTransactionAttributeSource - #21298 AopUtils.getMostSpecificMethod should expose dynamic proxy class methods - #21343 AspectJ annotation pointcuts fail to evaluate against interface-based proxies - #21541 Spring 5.x DataSource proxying does not work with Oracle UCP on JDK 9+","closed","in: core,","spring-projects-issues","2018-04-13T10:15:13Z","2019-01-11T16:45:06Z"
"","21611","spring-webflux ModelAttributeMethodArgumentResolver validateIfApplicable [SPR-17073]","**[Tian Wang](https://jira.spring.io/secure/ViewProfile.jspa?name=dwandw)** opened **[SPR-17073](https://jira.spring.io/browse/SPR-17073?redirect=false)** and commented  spring-web the same function code is  ```java Object[] validationHints = determineValidationHints(ann); ```  spring-webflux is   ```java Object hintArray = (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints}); ```  should be   ```java Object[] hintArray = (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints}); ```        ---  **Affects:** 5.0.5  **Issue Links:** - #21381 Validation failure not exposed next to binding failure for immutable form class  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3c65c170531d70b5815423436f77bf57150a555d, https://github.com/spring-projects/spring-framework/commit/192113de607515ab7737864e4a24200c28d2c76c","closed","type: bug,","spring-projects-issues","2018-07-20T17:57:27Z","2019-01-11T12:47:03Z"
"","21594","Qualified beans are not autowired [SPR-17056]","**[Thomas OLIVIERI](https://jira.spring.io/secure/ViewProfile.jspa?name=tholivieri)** opened **[SPR-17056](https://jira.spring.io/browse/SPR-17056?redirect=false)** and commented  Hello,  When defining multiple beans with the same qualifier, I expect the beans to end up in a list that can be autowired. It all works fine until a certain (weird) point.   I have a bean called MyBean:  ```java public MyBean(String name, Function function) {     this.name = name;     this.function = function; } ```   I configure multiple beans of the same type (see: RootConfiguration.java):  ```java @Bean @Qualifier(""myBean"") MyBean myBean1() {     return new MyBean(""bean1"", this::functionMyBean1); }  // ...  private String functionMyBean1(String in) {     return in; }  // ... ```   Then I can retrieve them all using:  ```java @Autowired private List myBeans; ```   The weird issue is that if I overload the bean creation method to define the function passed as the constructor parameter, then the bean is not added to the autowired list:  ```java @Bean @Qualifier(""myBean"") MyBean myBean1() {     return new MyBean(""bean1"", this::myBean1); }  private String myBean1(String in) { // overloaded method -> bean is not added     return in; } ```   That's not a big issue since the workaround is obvious but I really would like to understand what's going on behind the scenes so the DI does not work as expected. Note that the bean that is not injected in the list is eventually created, but never acknowledged as part of its ""siblings"".  Thanks in advance for your insight !   ---  **Affects:** 5.0.5  **Reference URL:** https://github.com/tdolivieri/spring-qualified-beans","open","in: core,","spring-projects-issues","2018-07-18T09:27:47Z","2019-01-11T12:47:39Z"
"","21199","Incorrect Javadocs for ReflectionUtils.doWithLocalFields [SPR-16658]","**[Thai H](https://jira.spring.io/secure/ViewProfile.jspa?name=tha2015)** opened **[SPR-16658](https://jira.spring.io/browse/SPR-16658?redirect=false)** and commented  Javadocs for org.springframework.util.ReflectionUtils.doWithLocalFields() method is not correct.  ""Invoke the given callback on all fields in the target class, going up the class hierarchy to get all declared fields.""  The method just processes the fields belong to the provided class, not parent classes.  Reference: https://github.com/spring-projects/spring-framework/blob/master/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java#L690   ---  **Affects:** 4.3.14, 5.0.4  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","in: core,","spring-projects-issues","2018-03-28T18:35:36Z","2018-04-03T20:34:26Z"
"","21549","Missing CommonAnnotationBeanPostProcessor in SB 1.5 and 4.x spring with java 10 [SPR-17011]","**[tdanylchuk](https://jira.spring.io/secure/ViewProfile.jspa?name=tdanylchuk)** opened **[SPR-17011](https://jira.spring.io/browse/SPR-17011?redirect=false)** and commented  Originally I've tried to run spring boot 1.5.x with java 10 and found that one feature was disabled: support of  ""javax.annotation.PostConstruct"" and ""javax.annotation.PreDestroy""  After investigation I found that `CommonAnnotationBeanPostProcessor` isn't being initialized because of this check in `org.springframework.context.annotation.AnnotationConfigUtils:179`     Issue with boot 2.0 and spring 5.0 cannot be reproduced.  in SB 1.5 and spring 4.3.x with java 10 class ```javax.annotation.Resource``` not found.  Adding jsr250 dependency solves issue:  ```java   javax.annotation  jsr250-api  1.0  ```         ---  **Affects:** 4.3.12  **Reference URL:** https://github.com/spring-projects/spring-retry/issues/118","closed","status: declined,","spring-projects-issues","2018-07-05T15:07:08Z","2019-01-12T16:21:00Z"
"","21581","Hibernate 5: restore ability to inject ""cacheRegionFactory"" of LocalSessionFactoryBean [SPR-17043]","**[Taras Tielkes](https://jira.spring.io/secure/ViewProfile.jspa?name=plethora)** opened **[SPR-17043](https://jira.spring.io/browse/SPR-17043?redirect=false)** and commented  Spring provided a convenience property for ""`cacheRegionFactory`"" in the Hibernate 3.x and 4.x packages. The current support for Hibernate 5.x no longer provides this flexibility. This is quite unfortunate, as there are some scenarios where customization of the underlying cache infrastructure is desired, and injection of various Spring-managed dependencies is the natural approach.  Please note that the ""`hibernate.cache.region.factory_class`"" property is somewhat misleading: in addition to an implementation class, an actual object instance implementing `org.hibernate.cache.spi.RegionFactory` is equally valid: please see `org.hibernate.cache.internal.RegionFactoryInitiator#initiateService`.  At the moment we are using Hibernate 5.1.x, and I have not verified that the approach described below is equally applicable to 5.0.x/5.1.x/5.2.x/5.3.x APIs.  That said, the current workaround I am using is to subclass the hibernate5 `LocalSessionFactoryBean` as follows:  ```java public class MyLocalSessionFactoryBean extends LocalSessionFactoryBean {      private RegionFactory regionFactory;      @Required     public void setRegionFactory(RegionFactory regionFactory) {         this.regionFactory = regionFactory;     }      @Override     protected SessionFactory buildSessionFactory(LocalSessionFactoryBuilder sfb) {         sfb.getProperties().put(AvailableSettings.CACHE_REGION_FACTORY, regionFactory);         return sfb.buildSessionFactory();     } } ```  (inspired by `org.springframework.orm.hibernate5.LocalSessionFactoryBuilder#setMultiTenantConnectionProvider`)  If possible (across the range of Hibernate versions currently supported by Spring), it would be nice to have the ""`cacheRegionFactory`"" restored for 5.1. A backport to 5.0.x would be a bonus :)  ---  **Affects:** 4.3.18, 5.0.7  **Issue Links:** - #20852 Support Hibernate 5.3's ManagedBeanRegistry for dependency injection - #15683 Impossible to customise Hibernate RegionFactory - #21368 Apply Hibernate Integrator through LocalSessionFactoryBean  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/93d91219fd47e2bab9a64e75ffc4ecc1290595f3","closed","type: enhancement,","spring-projects-issues","2018-07-15T21:19:25Z","2019-01-11T12:48:31Z"
"","21141","Can't enable my custom WebFluxConfiguration when testing with WebTestClient using bindToController [SPR-16600]","**[Takuya Iwanaga](https://jira.spring.io/secure/ViewProfile.jspa?name=t-iwanaga)** opened **[SPR-16600](https://jira.spring.io/browse/SPR-16600?redirect=false)** and commented  WebTestClient is the very convenient class to test controller classes. We currently use it with WebTestClient#bindToController, but we noticed that we cannot register our custom WebFluxConfiguration because DefaultControllerSpec context registers DelegatingWebFluxConfiguration by hardcode and there is no extention point so far  Here is the corresponded line. https://github.com/spring-projects/spring-framework/blob/master/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultControllerSpec.java#L141  In the custom WebFluxConfiguration, we defines our custom RequestMappingHandlerMapping by subclassing WebFluxConfigurationSupport and override WebFluxConfigurationSupport#createRequestMappingHandlerMapping. We'd like to enable this configuration while testing.  Are there any standard way or workaround solutions?    ---  **Affects:** 5.0.4  7 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2018-03-16T05:36:19Z","2018-03-19T01:52:16Z"
"","21886","Replace context by provider() in Kotlin bean DSL [SPR-17352]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-17352](https://jira.spring.io/browse/SPR-17352?redirect=false)** and commented  Spring Framework 5.1.0 exposed by mistake context in the Kotlin bean DSL API in order to fix #20816. Now that `BeanFactory#getBeanprovider` is available, it should be exposed via a `provider()` function in order to provide a more clean API.  ---  **Issue Links:** - #20816 Kotlin bean definition DSL should provide access to getBeansOfType() (_**""supersedes""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/af6a5566a30adcace0a05ed7285e7f40e49d8f0b","closed","type: enhancement,","spring-projects-issues","2018-10-08T10:56:00Z","2019-01-11T14:13:55Z"
"","21861","Leverage ObjectProvider instead of autowired containers [SPR-17327]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-17327](https://jira.spring.io/browse/SPR-17327?redirect=false)** and commented  In order to be able to leverage WebFlux configuration in a functional way, `WebHttpHandlerBuilder` and `RouterFunctionMapping` should leverage new `ObjectProvider` capabilities to get a sorted list of beans by type instead of using autowired containers.   ---  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1976","closed","type: task,","spring-projects-issues","2018-10-03T09:15:35Z","2018-10-15T07:48:40Z"
"","21859","Support callable references without request param in Kotlin router DSL [SPR-17325]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-17325](https://jira.spring.io/browse/SPR-17325?redirect=false)** and commented  The goal is to avoid to put an unused request parameter just for the sake of callable references support.   --- No further details from [SPR-17325](https://jira.spring.io/browse/SPR-17325?redirect=false)","closed","type: enhancement,","spring-projects-issues","2018-10-02T14:30:37Z","2019-03-04T17:55:45Z"
"","21845","Bean registration with Kotlin DSL using callable reference with autowired parameters  [SPR-17312]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-17312](https://jira.spring.io/browse/SPR-17312?redirect=false)** and commented  I had this feature in mind for a long time, but this seems that autowiring of Kotlin top level functions is straightforward and require no reflection, but just leveraging Kotlin type system.  ```java inline fun  BeanDefinitionDsl.bean(crossinline f: Function0): Any = context.registerBean { f.invoke() }  inline fun  BeanDefinitionDsl.bean(crossinline f: Function1): Any = context.registerBean { f.invoke(context.getBean()) }  inline fun  BeanDefinitionDsl.bean(crossinline f: Function2): Any = context.registerBean { f.invoke(context.getBean(), context.getBean()) }  // To be defined the number of parameter we want to support ```  A typical use case is autowiring of router parameters, for example:  ```java fun routes(userHandler: UserHandler) = router { 	GET(""/"", userHandler::listView) 	GET(""/api/user"", userHandler::listApi) 	GET(""/conf"", userHandler::conf) }  beans { 	bean() 	bean() 	bean(::routes) } ```  That would be a very nice Spring Framework 5.2 feature IMO ;-)   --- No further details from [SPR-17312](https://jira.spring.io/browse/SPR-17312?redirect=false)","closed","type: enhancement,","spring-projects-issues","2018-09-29T00:14:46Z","2019-03-27T13:51:15Z"
"","21808","Expose more AbstractBeanDefinition methods in BeanDefinition [SPR-17275]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-17275](https://jira.spring.io/browse/SPR-17275?redirect=false)** and commented  When using functional bean registration, `BeanDefinitionCustomizer` lambda gives access to a `BeanDefinition` lambda parameter that does not give access to various `AbstractBeanDefinition` methods, requiring a cast to `AbstractBeanDefinition` which is not elegant and make our API not very discoverable for those use cases.  I think it could be useful to expose those methods in `BeanDefinition` interface:   * setAbstract * setAutowireMode * getAutowireMode * setDependencyCheck * getDependencyCheck * setInitMethodName * getInitMethodName * getDestroyMethodName * setDestroyMethodName * setRole * getRole * setDescription * getDescription  Those ones are candidates as well, but I have no real use case in mind for them for the moment, so they are not mandatory to expose: * addQualifier * getQualifiers * hasQualifier * getQualifier * setLenientConstructorResolution * isLenientConstructorResolution * setResourceDescription * getResourceDescription  ---  **Issue Links:** - #21825 GenericApplicationContext.registerBean should support non-default constructors  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f7839675f6e6097144fb2d4125c8bbc85fd11cc3, https://github.com/spring-projects/spring-framework/commit/c4aea626fe1772e4522ba14457d496e2b77f3c6a, https://github.com/spring-projects/spring-framework/commit/97cea7f36e264c2b193ae71609a44b6bd34e31b7","closed","type: enhancement,","spring-projects-issues","2018-09-13T15:36:21Z","2019-01-11T14:12:43Z"
"","21807","Add a BeanFactory#getBeanProvider Kotlin extension [SPR-17274]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-17274](https://jira.spring.io/browse/SPR-17274?redirect=false)** and commented  We should add a `BeanFactory#getBeanProvider` Kotlin extension that leverages reified type parameters.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/068565172e5d95f971dd6ee9a126d148d8ea028d","closed","type: enhancement,","spring-projects-issues","2018-09-13T14:38:19Z","2018-09-21T07:52:16Z"
"","21805","Ordered list access for BeanFactory.getBeanProvider(), superseding ObjectProvider [SPR-17272]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-17272](https://jira.spring.io/browse/SPR-17272?redirect=false)** and commented  Unlike `DependencyObjectProvider` which seems to support this use case, the `ObjectProvider` implementation returned by `DefaultListableBeanFactory#getBeanProvider(ResolvableType)` does not seems to support `List` correctly.  This test is green:  ```java @Test public void registerBeanAndGetBeanProvider() {      GenericApplicationContext context = new GenericApplicationContext();      context.registerBean(ViewResolver.class, () -> new MustacheViewResolver());      assertNotNull(context.getDefaultListableBeanFactory().getBeanProvider(ResolvableType.forClass(ViewResolver.class)).getIfAvailable()); } ```  This test is red:  ```java @Test public void registerBeanAndGetBeanProviderList() {      GenericApplicationContext context = new GenericApplicationContext();      context.registerBean(ViewResolver.class, () -> new MustacheViewResolver());      assertNotNull(context.getDefaultListableBeanFactory().getBeanProvider(ResolvableType.forClassWithGenerics(List.class, ViewResolver.class)).getIfAvailable()); } ```  This difference of behavior prevents [Kofu configuration](https://github.com/spring-projects/spring-fu/blob/9f452e068e53442d833af509a80e253f2585ee16/kofu/src/main/kotlin/org/springframework/boot/autoconfigure/web/reactive/ReactiveWebServerConfiguration.kt#L89) and Dave Syer [FuncApplication](https://github.com/dsyer/spring-boot-micro-apps/blob/master/src/main/java/com/example/func/FuncApplication.java#L339) to instantiate `WebFluxAutoConfiguration.WebFluxConfig` in a functional way and get view resolution support.  ---  **Affects:** 5.1 RC3  **Issue Links:** - #16046 ObjectProvider iterable/stream access for ""beans of type"" resolution in `@Bean` methods - #21731 Autowiring inconsistency: `@Qualifier` works with HashMap but not with Map  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/65c8fa400f7b6b42c97468eba9c5f12beaccac41, https://github.com/spring-projects/spring-framework/commit/41d4cb5cbf608a3ef6b0585f675091c427dba5d7, https://github.com/spring-projects/spring-framework/commit/75627617c971333e60a9635f4b762853e3989da5  0 votes, 8 watchers","closed","type: enhancement,","spring-projects-issues","2018-09-13T09:33:13Z","2019-01-13T04:25:10Z"
"","21780","Add support for empty router in RouterFunctionDsl [SPR-17247]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-17247](https://jira.spring.io/browse/SPR-17247?redirect=false)** and commented   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/48c660fa41ec954a566ea1891018aa83fece9667","closed","type: enhancement,","spring-projects-issues","2018-09-05T14:51:51Z","2018-09-07T13:48:36Z"
"","21778","Provide code samples in Kotlin in addition to Java [SPR-17245]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-17245](https://jira.spring.io/browse/SPR-17245?redirect=false)** and commented  Even if we have a dedicated Kotlin section in our reference documentation, all the code samples are in Java, requiring an effort for Kotlin users to translate it. I would like to make our documentation more natively Kotlin friendly by translating our code example to Kotlin.  This could be done via a Kotlin tab (in addition to the Java one) on each code sample block, and by generating 2 versions of the documentation: one in Java, one in Kotlin.   ---  1 votes, 3 watchers","closed","type: documentation,","spring-projects-issues","2018-09-05T07:47:32Z","2019-08-31T09:51:52Z"
"","21673","Detect GraalVM with system property in SerializableTypeWrapper [SPR-17136]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-17136](https://jira.spring.io/browse/SPR-17136?redirect=false)** and commented  In #21530, we checked if we were compiling/running as GraalVM native images by testing if `Class` was `Serializable` or not, but we can't rely on that check since with 1.0.0 RC5  `Class` is `Serializable` with GraalVM as well.  The result is that with GraalVM 1.0.0 RC5 `FuncApplication` from https://github.com/dsyer/spring-boot-allocations fails with following stacktrace:  ``` Caused by: com.oracle.svm.core.jdk.UnsupportedFeatureError: Proxy class defined by interfaces [interface java.lang.reflect.ParameterizedType, interface org.springframework.core.SerializableTypeWrapper$SerializableTypeProxy, interface java.io.Serializable] not found. Generating proxy classes at runtime is not supported. Proxy classes need to be defined at image build time by specifying the list of interfaces that they implement. To define proxy classes use -H:DynamicProxyConfigurationFiles= and -H:DynamicProxyConfigurationResources= options.     at java.lang.Throwable.(Throwable.java:265)     at java.lang.Error.(Error.java:70)     at com.oracle.svm.core.jdk.UnsupportedFeatureError.(UnsupportedFeatureError.java:31)     at com.oracle.svm.core.jdk.Target_com_oracle_svm_core_util_VMError.unsupportedFeature(VMErrorSubstitutions.java:109)     at com.oracle.svm.reflect.proxy.DynamicProxySupport.getProxyClass(DynamicProxySupport.java:112)     at com.oracle.svm.core.jdk.proxy.Target_java_lang_reflect_Proxy.getProxyClass0(ProxySubstitutions.java:50)     at java.lang.reflect.Proxy.newProxyInstance(Proxy.java:719)     at org.springframework.core.SerializableTypeWrapper.forTypeProvider(SerializableTypeWrapper.java:127) ```  We should probably use the same check than in [SPR-17005](https://jira.spring.io/browse/SPR-17005?focusedCommentId=160890&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-160890) in order to adapt execution path for GraalVM native images.  ---  **Affects:** 5.1 RC1  **Reference URL:** https://github.com/oracle/graal/blob/master/sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/ImageInfo.java  **Issue Links:** - #21529 Initial GraalVM native images (Substrate VM) support (_**""is depended on by""**_) - #21530 Support platforms where Class is not Serializable in SerializableTypeWrapper - #21543 DefaultParameterNameDiscoverer should automatically adapt to Graal constraints  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2d05f2ed47d62a4f23421fe8d6046e239ecdfb09","closed","type: enhancement,","spring-projects-issues","2018-08-07T09:09:59Z","2020-07-27T10:29:25Z"
"","21661","Upgrade to Jetty reactive HTTP client 1.0.1 [SPR-17124]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-17124](https://jira.spring.io/browse/SPR-17124?redirect=false)** and commented  Fix [this potential timeout issue](https://github.com/jetty-project/jetty-reactive-httpclient/issues/7).  ---  **Reference URL:** https://github.com/jetty-project/jetty-reactive-httpclient/releases/tag/1.0.1  **Issue Links:** - #19658 Jetty HTTP client integration with WebClient  **Referenced from:** commits https://github.com/spring-projects/spring-boot/commit/f74dd7d58cdc4201898b25c8266e9c3a91ef52b7","closed","type: task,","spring-projects-issues","2018-08-06T09:55:36Z","2019-01-11T14:01:32Z"
"","21659","Make WebFlux multipart support fully Reactive [SPR-17122]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-17122](https://jira.spring.io/browse/SPR-17122?redirect=false)** and commented  Spring Framework 5.0 and 5.1 provides support for reactive multipart leveraging [Synchronoss nio-multipart](https://github.com/synchronoss/nio-multipart) library which comes with several limitations. Spring WebFlux feeds data to the parser, which then provides a callback when the entire content for the part is ready, potentially creating temporary files when the content is too big to avoid consuming too much memory. These limitations mainly comes from the fact that their [StreamStorage abstraction](https://github.com/synchronoss/nio-stream-storage) is based on `InputStream` / `OutputStream`.  As proposed initially by [Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma), we should probably write our own reactive multipart implementation to overcome these limitation and provide a fully reactive behavior where the content of the file is Reactive Streams compliant (bytes comes to the user as they are received) in order to give more control to the user. If we provide this, I tend to think that we don't have to create temporary files.  ---  **Issue Links:** - #21180 Race-Condition in Multipart upload proxy scenario","closed","type: enhancement,","spring-projects-issues","2018-08-06T09:04:31Z","2020-06-24T08:36:30Z"
"","21620","Optimize class detection by sharing the ClassLoader [SPR-17083]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-17083](https://jira.spring.io/browse/SPR-17083?redirect=false)** and commented   --- No further details from [SPR-17083](https://jira.spring.io/browse/SPR-17083?redirect=false)","closed","type: task,","spring-projects-issues","2018-07-25T08:58:40Z","2019-01-11T12:46:45Z"
"","21618","Deprecate ExtensionRegistryInitializer in protobuf support [SPR-17081]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-17081](https://jira.spring.io/browse/SPR-17081?redirect=false)** and commented  In order to be consistent with #20331, and since it does not provide clear added value, this issue is about deprecating `ExtensionRegistryInitializer` and using `ExtensionRegistry` parameter instead in `ProtobufHttpMessageConverter` and `ProtobufJsonFormatHttpMessageConverter` constructors.  ---  **Issue Links:** - #20331 Support Protobuf serialization in WebFlux  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/36bbbab02da4d5c4500523f23a5ce28fa6a87dfb","closed","type: task,","spring-projects-issues","2018-07-24T15:16:47Z","2019-01-11T12:46:36Z"
"","21607","Support running Kotlin Spring apps without kotlin-reflect.jar [SPR-17069]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-17069](https://jira.spring.io/browse/SPR-17069?redirect=false)** and commented  As described in #21546 and as benchmarked in the attached flamegraph, using `kotlin-reflect.jar` is not a free lunch, and for functional Spring application without Jackson, it does not bring any value so we should support running Spring Framework 5.1 without this dependency as part of our performance improvement theme.  ---  **Attachments:** - [flamegraph-java-jackson.svg](https://jira.spring.io/secure/attachment/25773/flamegraph-java-jackson.svg) (_825.06 kB_)  **Issue Links:** - #21546 Support for kotlinx.reflect.lite  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f8f8d28f08a118a072448271130b2ee02f72a282","closed","type: enhancement,","spring-projects-issues","2018-07-20T10:06:18Z","2020-12-18T15:25:35Z"
"","21596","Leverage Jetty BOM [SPR-17058]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-17058](https://jira.spring.io/browse/SPR-17058?redirect=false)** and commented  Spring Framework should leverage `org.eclipse.jetty:jetty-bom` in order to avoid mixing different versions in the classpath.  ---  **Issue Links:** - #19658 Jetty HTTP client integration with WebClient  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3c9049d53040dffb40be2f4abae002216ec7b7e9","closed","type: task,","spring-projects-issues","2018-07-18T12:02:52Z","2019-01-11T12:47:48Z"
"","21555","Add ServerResponse extensions for json, xml and html [SPR-17017]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-17017](https://jira.spring.io/browse/SPR-17017?redirect=false)** and commented   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fd69c90fcb9998e4fbbd57fbb20a3a63e1494390","closed","type: enhancement,","spring-projects-issues","2018-07-06T12:22:34Z","2018-07-26T08:09:36Z"
"","21547","Avoid ServerResponse static imports in WebFlux router DSL [SPR-17009]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-17009](https://jira.spring.io/browse/SPR-17009?redirect=false)** and commented  Provide functions like `ok()` in `RouterFunctionDsl` to avoid `ServerResponse` static imports.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-fu/commit/bdb9c24df337fcf677a963d34a3a056981f2d30e","closed","type: enhancement,","spring-projects-issues","2018-07-05T10:10:25Z","2018-07-26T08:09:32Z"
"","21538","Perform explicit class checks in ReactiveAdapterRegistry [SPR-17000]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-17000](https://jira.spring.io/browse/SPR-17000?redirect=false)** and commented  In order to allow Spring Framework applications running as GraalVM native images, we should perform explicit class checks instead of catching `Throwable` in order to avoid `UnsupportedFeatureError: Unresolved element found` errors.  ---  **Issue Links:** - #21529 Initial GraalVM native images (Substrate VM) support (_**""is depended on by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9b7a492bc95c8c1f3e3abfe055defa3722a0aa45, https://github.com/spring-projects/spring-framework/commit/dcbaecea2a73c10580e184b927c3747a6c6fd900","closed","type: enhancement,","spring-projects-issues","2018-07-03T11:18:45Z","2020-07-27T10:30:43Z"
"","21530","Support platforms where Class is not Serializable in SerializableTypeWrapper [SPR-16992]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-16992](https://jira.spring.io/browse/SPR-16992?redirect=false)** and commented  When running Spring applications as native images via GraalVM, `Class` is not `Serializable` which trigger the following error as described [here](https://github.com/oracle/graal/issues/507#issuecomment-401771950):  ```java Exception in thread ""main"" java.lang.reflect.InvocationTargetException  at java.lang.Throwable.(Throwable.java:310)  at java.lang.Exception.(Exception.java:102)  at java.lang.ReflectiveOperationException.(ReflectiveOperationException.java:89)  at java.lang.reflect.InvocationTargetException.(InvocationTargetException.java:72)  at com.oracle.svm.reflect.proxies.Proxy_1_Converter_main.invoke(Unknown Source)  at java.lang.reflect.Method.invoke(Method.java:498)  at com.oracle.svm.core.JavaMainWrapper.run(JavaMainWrapper.java:173)  Caused by: java.lang.IllegalArgumentException: Unsupported Type class: java.lang.Class  at java.lang.Throwable.(Throwable.java:265)  at java.lang.Exception.(Exception.java:66)  at java.lang.RuntimeException.(RuntimeException.java:62)  at java.lang.IllegalArgumentException.(IllegalArgumentException.java:52)  at org.springframework.core.SerializableTypeWrapper.forTypeProvider(SerializableTypeWrapper.java:161)  at org.springframework.core.SerializableTypeWrapper.forGenericInterfaces(SerializableTypeWrapper.java:102)  at org.springframework.core.ResolvableType.getInterfaces(ResolvableType.java:476)  at org.springframework.core.ResolvableType.as(ResolvableType.java:436)  at org.springframework.core.convert.support.GenericConversionService.getRequiredTypeInfo(GenericConversionService.java:292)  at org.springframework.core.convert.support.GenericConversionService.addConverterFactory(GenericConversionService.java:111)  at org.springframework.core.convert.support.DefaultConversionService.addScalarConverters(DefaultConversionService.java:135)  at org.springframework.core.convert.support.DefaultConversionService.addDefaultConverters(DefaultConversionService.java:88)  at org.springframework.core.convert.support.DefaultConversionService.(DefaultConversionService.java:52)  at Converter.(Converter.java:6)  at Converter.main(Converter.java:9)  ... 3 more ```  `SerializableTypeWrapper` should support platforms where `Class` is not `Serializable`.  ---  **Issue Links:** - #21529 Initial GraalVM native images (Substrate VM) support (_**""is depended on by""**_) - #21543 DefaultParameterNameDiscoverer should automatically adapt to Graal constraints - #21673 Detect GraalVM with system property in SerializableTypeWrapper  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/06f9fb9aeb24c751d75721ff776e579d2c0b084e, https://github.com/spring-projects/spring-framework/commit/2ade122543d7cb407861efbc273da26303016c6b","closed","type: enhancement,","spring-projects-issues","2018-07-02T11:29:46Z","2020-07-27T10:30:53Z"
"","21529","Initial GraalVM native images (Substrate VM) support [SPR-16991]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-16991](https://jira.spring.io/browse/SPR-16991?redirect=false)** and commented  We have began to work with [Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer) on improving support for running Spring Framework based application as native images via [Substrate VM](https://github.com/oracle/graal/blob/master/substratevm/) from [GraalVM](https://github.com/oracle/graal) project.  Oracle is currently working on improving support for Spring based on our feedback, so this issue is mainly intended to track those efforts, but also to track fine tuning we could do to improve Spring Framework support for such platform.  Since Spring relies on reflection and proxies, these documents are worth to read: * [Substrate VM Java Limitations](https://github.com/oracle/graal/blob/master/substratevm/LIMITATIONS.md) * [Dynamic proxies on Substrate VM](https://github.com/oracle/graal/blob/master/substratevm/DYNAMIC_PROXY.md) * [Reflection on Substrate VM](https://github.com/oracle/graal/blob/master/substratevm/REFLECTION.md)  It has been possible to run a minimal WebFlux.fn + Netty application successfully using functional bean registration, see [this Spring Fu issue for more details](https://github.com/spring-projects/spring-fu/issues/29#issuecomment-398791917). Startup time as native image is **very** fast (30 ms). The self-sufficient executable size is 50 MB and the resident memory is 35 MB.  In parallel to this work, we are also trying to get regular Spring Framework / Boot applications working and to identify how much configuration will be needed (for now we generate it manually). Latest pending issue is being able to run `ConversionService`, see [graal#507](https://github.com/oracle/graal/issues/507) for more details.  ---  **Issue Links:** - #21545 RestTemplate (and probably server side as well) should be able to bootstrap itself if com.sun.org.apache.xalan.* is not available  (_**""depends on""**_) - #21530 Support platforms where Class is not Serializable in SerializableTypeWrapper (_**""depends on""**_) - #21538 Perform explicit class checks in ReactiveAdapterRegistry (_**""depends on""**_) - #21543 DefaultParameterNameDiscoverer should automatically adapt to Graal constraints (_**""depends on""**_) - #21673 Detect GraalVM with system property in SerializableTypeWrapper (_**""depends on""**_) - #21732 Be more defensive in UrlResource about cleaning the path (_**""depends on""**_) - #21786 Usage of ClassLoader.loadClass() in ConfigurationClassParser (_**""depends on""**_) - #21552 Make DefaultListableBeanFactory's javax.inject.Provider implementation invisible for nested class introspection (_**""depends on""**_)  22 votes, 56 watchers","closed","has: votes-jira,","spring-projects-issues","2018-07-02T10:22:16Z","2020-07-27T10:28:42Z"
"","21453","Remove JSONP support [SPR-16914]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-16914](https://jira.spring.io/browse/SPR-16914?redirect=false)** and commented  Since JSONP support is going to be deprecated in 4.3.x and 5.0.x branches, let's remove it in 5.1 in favor of CORS support which is now widely supported in browsers.  ---  **Issue Links:** - #21338 Deprecate JSONP support and update MappingJackson2JsonView defaults  **Referenced from:** commits https://github.com/spring-projects/spring-integration/commit/eb1efdb0ff3aed093f96730758b2e3ce84b4098a","closed","type: task,","spring-projects-issues","2018-06-07T07:32:55Z","2019-01-11T15:42:11Z"
"","21436","Make RouterFunctionDsl extensible [SPR-16897]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-16897](https://jira.spring.io/browse/SPR-16897?redirect=false)** and commented  The `internal router` function makes it impossible for external modules to extend `RouterFunctionDsl`.   --- No further details from [SPR-16897](https://jira.spring.io/browse/SPR-16897?redirect=false)","closed","type: task,","spring-projects-issues","2018-06-04T13:32:14Z","2018-07-26T08:09:33Z"
"","21422","Revisit PropertyResolver Kotlin extensions [SPR-16883]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-16883](https://jira.spring.io/browse/SPR-16883?redirect=false)** and commented  Currently the `get` operator extension for `PropertyResolver` used to access for example on `Environnement` is calling `getRequiredProperty` which prevents to use Kotlin null safety to get default value like `val name = env[""name""] ?: ""default""`.  This issue intend to use `getProperty` instead of `getRequiredProperty` to achieve this behavior. This is a breaking change but I think this is worth doing it since use case of nullable return value + fallback seems to be very common based on Kotlin developer feedback.  This issue also introduce `getProperty(...)` and `getRequiredProperty(...)` Kotlin extensions.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a7a29a82265f54e61d38d9622051bb4726227623","closed","type: enhancement,","spring-projects-issues","2018-05-31T10:06:52Z","2018-07-26T08:09:30Z"
"","21363","Filter synthetic in addition to bridge in ReflectionUtils#USER_DECLARED_METHODS [SPR-16823]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-16823](https://jira.spring.io/browse/SPR-16823?redirect=false)** and commented  This change makes sense if we consider `USER_DECLARED_METHODS` name (Javadoc will have to be updated), could improve performances and is asked by Kotlin team as it prevents them to use `synthetic` only flag for default methods support (see [KT-24415](https://youtrack.jetbrains.com/issue/KT-24415)).   ---  **Reference URL:** https://youtrack.jetbrains.com/issue/KT-24415","closed","type: enhancement,","spring-projects-issues","2018-05-14T16:10:40Z","2018-06-12T15:44:03Z"
"","21253","Add a default constructor to Reactive UrlBasedCorsConfigurationSource [SPR-16712]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-16712](https://jira.spring.io/browse/SPR-16712?redirect=false)** and commented  Triggered by [this documentation PR](https://github.com/spring-projects/spring-framework/pull/1786), I think instead of updating the documentation `org.springframework.web.cors.reactive.UrlBasedCorsConfigurationSource` should provide a default constructor instantiating a new `PathPatternParser`. That would be consistent with Spring MVC `UrlBasedCorsConfigurationSource` and would make sense for most use cases.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/89d069b09d7151becf7d907b1a77fea5d949c6e9, https://github.com/spring-projects/spring-framework/commit/eda272047117642afbb706b846cdfa78bce31939","closed","type: enhancement,","spring-projects-issues","2018-04-11T09:49:50Z","2018-05-08T08:53:23Z"
"","21718","Removed Jackson view property ""renderedAttributes"" still mentioned in Spring Framework docs [SPR-17182]","**[Sviatoslav Hryb](https://jira.spring.io/secure/ViewProfile.jspa?name=shryb)** opened **[SPR-17182](https://jira.spring.io/browse/SPR-17182?redirect=false)** and commented  Section **Web on Servlet Stack**, paragraph **1.10.9. Jackson** contains mention of removed property **RenderedAttributes** as far as I know the methods `getRenderedAttributes()` and `setRenderedAttributes(Set renderedAttributes)` of class `MappingJackson2JsonView` were deprecated, removed and superseded by `getModelKeys()` and `setModelKeys(java.util.Set modelKeys)` respectively.  Also there is incorrect mention of this property in API [MappingJackson2JsonView](https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/view/json/MappingJackson2JsonView.html) in **JavaDoc** above method `filterModel(java.util.Map model)`. When we press it we are redirected to the method `setModelKeys(java.util.Set modelKeys)`  ---  **Affects:** 4.3.18, 5.0.8  **Attachments:** - [Spring_Api_removed_property_a.png](https://jira.spring.io/secure/attachment/25892/Spring_Api_removed_property_a.png) (_33.81 kB_) - [Spring_Doc_removed_property_a.png](https://jira.spring.io/secure/attachment/25893/Spring_Doc_removed_property_a.png) (_49.62 kB_)  **Issue Links:** - #17179 Remove pre-3.2 deprecated classes and methods - #21716 Rewrite *1.10.8. PDF, Excel* paragraph in Spring Framework Documentation  **Backported to:** [4.3.19](https://github.com/spring-projects/spring-framework/milestone/168?closed=1)","closed","type: documentation,","spring-projects-issues","2018-08-14T15:37:25Z","2019-01-11T13:39:48Z"
"","21716","Rewrite *1.10.8. PDF, Excel* paragraph in Spring Framework Documentation [SPR-17180]","**[Sviatoslav Hryb](https://jira.spring.io/secure/ViewProfile.jspa?name=shryb)** opened **[SPR-17180](https://jira.spring.io/browse/SPR-17180?redirect=false)** and commented  Section **Web on Servlet Stack** paragraph **1.10.8. PDF, Excel** should be rewritten, because of the following: 1. Almost all the text in the paragraph refers to another paragraph **1.10.11. XSLT** and mentions it as **previous**. Therefore its almost impossible to read it and someone must first read the next section. (Only version 5.x.x is affected) 2. The paragraph contains fragments of code with deprecated and removed classes `AbstractExcelView`, `AbstractJExcelView`  ---  **Affects:** 5.0.8  **Reference URL:** https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-view-document  **Attachments:** - [Spring_Deprecated_Class_1_a.png](https://jira.spring.io/secure/attachment/25890/Spring_Deprecated_Class_1_a.png) (_29.86 kB_) - [Spring_Deprecated_Class_2_a.png](https://jira.spring.io/secure/attachment/25889/Spring_Deprecated_Class_2_a.png) (_37.08 kB_) - [Spring_wrong_secton_order_a.png](https://jira.spring.io/secure/attachment/25891/Spring_wrong_secton_order_a.png) (_98.08 kB_)  **Issue Links:** - #21718 Removed Jackson view property ""renderedAttributes"" still mentioned in Spring Framework docs  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c0c9e08bf9b0844fdfd05cb96cbc74a7b83e7c52, https://github.com/spring-projects/spring-framework/commit/4b2a0471e19f2d366d71cd7ebeda884d30ace9d3","closed","type: documentation,","spring-projects-issues","2018-08-14T14:09:53Z","2019-01-11T13:39:46Z"
"","21703","Incorrect CORS code fragment in Spring Framework Documentation [SPR-17167]","**[Sviatoslav Hryb](https://jira.spring.io/secure/ViewProfile.jspa?name=shryb)** opened **[SPR-17167](https://jira.spring.io/browse/SPR-17167?redirect=false)** and commented  Section **Web on Servlet Stack**, paragraph **1.7.5. CORS Filter** and section **Web on Servlet Stack**, paragraph **1.7.5. CORS WebFilter** contain snippet of code with incorrect statements. The incorrect statements are: * `config.addAllowedHeader("""");`  * `config.addAllowedMethod("""");`  These statements have no sense. There may be a problem with HTML. According to [Spring Framework Reference Documentation 4.3.9](https://docs.spring.io/spring/docs/4.3.9.RELEASE/spring-framework-reference/pdf/spring-framework-reference.pdf) I think there should be following statements: * `config.addAllowedHeader(""*"");`  * `config.addAllowedMethod(""*"");`    ---  **Affects:** 5.0.8  **Reference URL:** https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-cors  **Attachments:** - [Typo_Spring_a.png](https://jira.spring.io/secure/attachment/25888/Typo_Spring_a.png) (_88.73 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8d08935c49c2b56b812e34d186776ea5b08b4e31, https://github.com/spring-projects/spring-framework/commit/6ed03c24ac4de596fc517013614b67b1f1b07105","closed","type: documentation,","spring-projects-issues","2018-08-11T17:47:09Z","2018-08-17T09:42:43Z"
"","21641","Incorrect query param code fragment in Spring Framework Documentation [SPR-17104]","**[Sviatoslav Hryb](https://jira.spring.io/secure/ViewProfile.jspa?name=shryb)** opened **[SPR-17104](https://jira.spring.io/browse/SPR-17104?redirect=false)** and commented  Section **Web on Servlet Stack**, paragraph **1.5.3. URI Encoding** and section **Web on Servlet Stack**, paragraph **1.6.3. URI Encoding** contain snippet of code with incorrect result. As there is invoking of method `queryParam(""q"", ""{q}"")` the result should be : `/hotel%20list/New%20York?q=foo%2Bbar` but not `/hotel%20list/New%20York?foo%2Bbar`  ---  **Affects:** 5.0.8  **Reference URL:** https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html  **Attachments:** - [Spring_URI_Bug_a.png](https://jira.spring.io/secure/attachment/25790/Spring_URI_Bug_a.png) (_14.75 kB_)","closed","in: web,","spring-projects-issues","2018-07-30T10:30:02Z","2019-01-13T20:19:10Z"
"","21580","Incorrect Class reference in documentation [SPR-17042]","**[Sviatoslav Hryb](https://jira.spring.io/secure/ViewProfile.jspa?name=shryb)** opened **[SPR-17042](https://jira.spring.io/browse/SPR-17042?redirect=false)** and commented  Section **Core technologies**, paragraph **3.8.2. Configuring a Bean Validation Provider** contains mention of **ValidationConstraint** implementation class. But if I have understand right it should be **ConstraintValidator** implementation class.   ---  **Affects:** 4.3.18, 5.0.7  **Reference URL:** https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html  **Attachments:** - [Validation_Desc_Vague.png](https://jira.spring.io/secure/attachment/25767/Validation_Desc_Vague.png) (_49.38 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/333ec7400e5345f32d4140aa11208f4a668df6a1, https://github.com/spring-projects/spring-framework/commit/4c8d81bcb4df3b885c1caf2a6b887ad4d0659a76, https://github.com/spring-projects/spring-framework/commit/e9e864b093a7201a2e2e374462a8b0e7191857a4  **Backported to:** [4.3.19](https://github.com/spring-projects/spring-framework/milestone/168?closed=1)","closed","type: documentation,","spring-projects-issues","2018-07-14T17:24:19Z","2018-07-26T08:09:33Z"
"","21560","Update documentation references to Number/Currency/PercentStyleFormatter [SPR-17022]","**[Sviatoslav Hryb](https://jira.spring.io/secure/ViewProfile.jspa?name=shryb)** opened **[SPR-17022](https://jira.spring.io/browse/SPR-17022?redirect=false)** and commented  Section **Core technologies**, paragraph **3.6.1. Formatter SPI** contains reference to not existed classes: **NumberFormatter**, **CurrencyFormatter** and **PercentFormatter**. But as far as I know and see that classes were deprecated and removed from Spring. Also paragraph **3.6.2. Annotation-driven Formatting** contains snippet of code with aforementioned classes.  ---  **Affects:** 5.0.7  **Reference URL:** https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html  **Attachments:** - [Bug_Removed_Classes_1a.png](https://jira.spring.io/secure/attachment/25763/Bug_Removed_Classes_1a.png) (_32.03 kB_) - [Bug_Removed_Classes_2a.png](https://jira.spring.io/secure/attachment/25762/Bug_Removed_Classes_2a.png) (_27.94 kB_)  **Issue Links:** - #16823 Support for JSR-354 Money & Currency  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1e9b2b1c07277cb1706391e6ec2b7921a2d15b85, https://github.com/spring-projects/spring-framework/commit/d283424c82770cc45876c94263869fb04748a3e7, https://github.com/spring-projects/spring-framework/commit/39d455073a423ba6b3dc691c9c6130b395c93308  **Backported to:** [4.3.19](https://github.com/spring-projects/spring-framework/milestone/168?closed=1)","closed","type: documentation,","spring-projects-issues","2018-07-09T12:11:08Z","2019-01-11T12:49:21Z"
"","21351","Incorrect Java Syntax in Spring Framework Documentation [SPR-16811]","**[Sviatoslav Hryb](https://jira.spring.io/secure/ViewProfile.jspa?name=shryb)** opened **[SPR-16811](https://jira.spring.io/browse/SPR-16811?redirect=false)** and commented  Section **Data Access**, paragraph **3.7.4. Handling complex types for stored procedure calls** contains incorrect and not understandable fragments of Java code.  1. One snippet of Java code doesn't contain a name of a variable of class **TestItem ([image1](https://jira.spring.io/secure/attachment/25712/Improper_Code_1.png))**: 2. Another snippet of code has several following problems: ([image2](https://jira.spring.io/secure/attachment/25711/Improper_Code_2.png)).  * doesn't contain a name of a variable of class **TestItem** * it is not perceivable why we need aforementioned variable * there is only an invocation of the method **declareParameter** without mentioned corresponding object of some class that invoke it.    ---  **Affects:** 4.3.17, 5.0.6  **Reference URL:** https://docs.spring.io/spring/docs/5.0.6.RELEASE/spring-framework-reference/data-access.html#orm-general  **Attachments:** - [Improper_Code_1.png](https://jira.spring.io/secure/attachment/25712/Improper_Code_1.png) (_34.19 kB_) - [Improper_Code_2.png](https://jira.spring.io/secure/attachment/25711/Improper_Code_2.png) (_44.01 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9d1789e71837b4cca9e254875f89311cdf257168, https://github.com/spring-projects/spring-framework/commit/2818051aff9cbfee196261c00f7182a685636790, https://github.com/spring-projects/spring-framework/commit/765d18eb94db2220eb32048964f579965047fe0c  **Backported to:** [4.3.18](https://github.com/spring-projects/spring-framework/milestone/167?closed=1)","closed","type: documentation,","spring-projects-issues","2018-05-10T14:44:08Z","2018-06-12T15:44:03Z"
"","21885","Nested DeferredImportSelector are not detected properly anymore [SPR-17351]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-17351](https://jira.spring.io/browse/SPR-17351?redirect=false)** and commented  When `ConfigurationClassParser#processImports` processes classes it will defer the processing of `DeferredImportSelector` at the very end, adding them to a list rather than processing them right away.  This used to work recursively as well (i.e. if a deferred import selector imports itself a deferred import selector it would be queued). This is broken as of 5.0   ---  **Affects:** 5.0.9  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/062805fcb3012d5bdad6c93c6b9e33b62ffc4312","closed","in: core,","spring-projects-issues","2018-10-08T09:34:47Z","2018-10-15T07:48:38Z"
"","21740","Support repeatable annotations for condition evaluation [SPR-17207]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-17207](https://jira.spring.io/browse/SPR-17207?redirect=false)** and commented  Condition evaluation currently doesn't support `@Repeatable`. The first thing I found is `ConditionEvaluator#shouldSkip` calls `!metadata.isAnnotated(Conditional.class.getName())` which returns true for some reason when it is invoked with a modified version of `@Profile` that is `@Repeatable`.   I am not entirely sold on the idea as, for instance, adding `@Profile` would probably be over the top considering the profile expression we've introduced in Spring Framework 5.1. It might be useful for others, though (support for repeatable `@ConfigurationProperty` is [quite popular on the Spring Boot issue tracker](https://github.com/spring-projects/spring-boot/issues/2541)).   ---  **Affects:** 5.0.8  0 votes, 5 watchers","open","in: core,","spring-projects-issues","2018-08-23T12:42:08Z","2019-01-11T14:03:08Z"
"","21699","Use default methods on Smart/GenericApplicationListener [SPR-17163]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-17163](https://jira.spring.io/browse/SPR-17163?redirect=false)** and commented  Most implementations of `SmartApplicationListener` and `GenericApplicationListener` do not care about the source type so they implement `supportsSourceType` with `return true`.  Also, `getOrder()` is imposed by the contract and may have a default.  The rationale is that this interface is used in case multiple event types are supported and/or you want more fine grained control. Ideally, only the absolutely necessary methods should be implemented, leaving the same default as a regular `ApplicationListener` implementation.  ---  **Affects:** 5.0.8  **Issue Links:** - #21723 SmartLifecycle should provide default methods  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c437a0d1c3067e781ae3ae73ba197640402e6555","closed","type: enhancement,","spring-projects-issues","2018-08-10T12:46:56Z","2019-01-11T13:59:58Z"
"","19660","Spring internal configuration classes can no longer use @EventListener [SPR-17160]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-17160](https://jira.spring.io/browse/SPR-17160?redirect=false)** and commented  Due to [this optimization](https://github.com/spring-projects/spring-framework/blob/master/spring-context/src/main/java/org/springframework/context/event/EventListenerMethodProcessor.java#L191-L200), Spring projects can no longer use `@EventListener`.  Spring Boot does use it in a few places where a single component needs to listener for two event types and avoid being called for every event. We can move to `ApplicationListener` if necessary but it would be nice to have a strategy to narrow down the event types.  ---  **Affects:** 5.1 RC2  **Issue Links:** - #21472 Avoid unnecessary synthesizable annotation processing - #21739 Revisit `@Bean` introspection between `@Configuration` classes and 'lite' beans  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1d59e52f118fe36b1321bc51e58759d8cd93c377","closed","in: core,","spring-projects-issues","2018-08-10T08:35:41Z","2019-01-13T05:17:36Z"
"","21691","Introduce DataSize type [SPR-17154]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-17154](https://jira.spring.io/browse/SPR-17154?redirect=false)** and commented  There is no data type to represent a size at the moment and it would be interesting to have such type, in particular for binding purpose   ---  **Affects:** 5.1 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f931a3fb593acc11465057f72e8640412cb02bf6, https://github.com/spring-projects/spring-framework/commit/8a1588ae295614858089c3382364825aa9f8b7e7  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2018-08-09T16:05:13Z","2018-08-17T09:42:44Z"
"","21604","Provide a hook point that a Configuration class was skipped [SPR-17066]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-17066](https://jira.spring.io/browse/SPR-17066?redirect=false)** and commented  Spring Boot has a `ConditionEvaluationReport` that keeps track of conditions evaluations but can lead to wrong information as an important bit of information is not available.  Consider the following example  ```java @Configuration @MyRegisterBeanCondition @Import(Child.class) public class Config { ... } ```  As the condition is in the `REGISTER_BEAN` phase, the configuration class will be parsed and its import directive will be applied, parsing `Child` in the process.  If the condition doesn't match `TrackedConditionEvaluator` will figure out that `Config` was excluded after all. As a result `Child` will not instantiated either. This process of figuring out that a `REGISTER_BEAN` condition didn't match and therefore the class shouldn't be imported is internal to the framework and there is no way for Spring Boot to know.  It would be nice to have a way to access this information. Ideally in a push model-like so that the report can update itself when the context realizes that a given class shouldn't be processed after all.   ---  **Affects:** 4.3.18","open","in: core,","spring-projects-issues","2018-07-19T13:38:16Z","2019-01-14T22:32:02Z"
"","21435","Fix faulty BeanPostProcessorChecker logs with @EnableCaching [SPR-16896]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-16896](https://jira.spring.io/browse/SPR-16896?redirect=false)** and commented  When `@EnableCaching` is used in an application, `BeanPostProcessorChecker` issues an info log for infrastructure config  ``` 2018-06-04 14:22:41.511  INFO   --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.cache.annotation.ProxyCachingConfiguration' of type [org.springframework.cache.annotation.ProxyCachingConfiguration$$EnhancerBySpringCGLIB$$5439ed96] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2018-06-04 14:22:41.528  INFO   --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.cache.jcache.config.ProxyJCacheConfiguration' of type [org.springframework.cache.jcache.config.ProxyJCacheConfiguration$$EnhancerBySpringCGLIB$$2d6f79f6] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) ```    ---  **Affects:** 4.3.17, 5.0.6  **Backported to:** [4.3.18](https://github.com/spring-projects/spring-framework/milestone/167?closed=1)","closed","in: core,","spring-projects-issues","2018-06-04T12:23:27Z","2018-06-12T15:44:03Z"
"","21432","Generated poms have a dependenciesManagement section with bom import [SPR-16893]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-16893](https://jira.spring.io/browse/SPR-16893?redirect=false)** and commented  Generated pom from the Gradle build have a `dependencyManagement` section with bom imports for reactor and netty. Those shouldn't be there at all  For example: http://repo1.maven.org/maven2/org/springframework/spring-websocket/5.0.0.RELEASE/spring-websocket-5.0.0.RELEASE.pom   ---  **Affects:** 5.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/afcc4304818d1a6c7d1388e7a8cfc2799a1c3718, https://github.com/spring-projects/spring-framework/commit/417354da8a57d8a7653f6645a40051edcd810482","closed","type: task,","spring-projects-issues","2018-06-02T15:27:55Z","2018-06-14T16:20:41Z"
"","21387","Publish updated XSD with versioned alternatives [SPR-16847]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-16847](https://jira.spring.io/browse/SPR-16847?redirect=false)** and commented  As of Spring Framework 5, XSD are not versioned anymore and the versioned artifacts have been removed. Yet, users are relying on those versioned artifacts, especially here:  http://www.springframework.org/schema/beans/  Previously, each release on the docs server creates a symlink without a version to the latest version of the XSD (i.e. `spring-beans.xsd` is a symlink to `spring-beans-4.3.xsd`).  When we publish a new release, the 4.x version is still served. We should find a way to publish the 5.x version as well.  This is especially important as XSD on `master` were recently changed.   ---  **Affects:** 5.0.6","closed","in: core,","spring-projects-issues","2018-05-19T08:43:11Z","2022-02-18T20:42:21Z"
"","21339","docs.zip does not contain resources at the root anymore [SPR-16799]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-16799](https://jira.spring.io/browse/SPR-16799?redirect=false)** and commented  The change in #21329 actually broke the documentation release process as we expect html and pdfs to be available at the root. It looks like so far we've relied on duplicate information for this (which sounds indeed a bit weird).  I've copied over the files on the docs server to keep things consistent for now but we need to revisit this approach.  ---  **Affects:** 5.0.6  **Issue Links:** - #21329 Task ""docsZip"" copies duplicate reference files  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/da6e9c6d5487c2465f5950f82adec408a9351d1a, https://github.com/spring-projects/spring-framework/commit/e9f4dec08caee84bead364c0815e767586412f3a","closed","type: documentation,","spring-projects-issues","2018-05-08T10:50:15Z","2019-01-11T16:39:44Z"
"","21246","EnableWebSocket registers a non functional task scheduler to the context [SPR-16705]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-16705](https://jira.spring.io/browse/SPR-16705?redirect=false)** and commented  `@EnableWebSocket` may register a `defaultSockJsTaskScheduler` bean that could fallback to `NoOpScheduler` is no task scheduling is required (sic).  This conflicts with the default behaviour of `@EnableScheduling`. By default, it will look up for the unique presence of a `TaskScheduler` and, if one is found, it will use it.  Unfortunately, as soon as those two are in combinations (and `@EnableWebSocket` runs before `@EnableScheduling`), it breaks any app as a scheduling task is attempting to register itself to a no op scheduler.  The latter case is unfortunately quite common with Spring Boot as some auto-configurations (i.e. Spring Session Redis) rely on `@EnableScheduling` and users have `@EnableWebSocket` on their app to signal they want to use that feature.  ---  **Affects:** 5.0.5  **Issue Links:** - #20737 WebSocketConfigurationSupport.defaultSockJsTaskScheduler adds NoOpScheduler to context that is not usable in any way (_**""is duplicated by""**_)","closed","in: web,","spring-projects-issues","2018-04-10T08:18:03Z","2019-01-12T16:44:36Z"
"","21228","Kotlin API generation expects the Javadoc to be available [SPR-16687]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-16687](https://jira.spring.io/browse/SPR-16687?redirect=false)** and commented  The `dokka` plugin configuration has the following section  ```groovy externalDocumentationLink {     url = new URL(""http://docs.spring.io/spring-framework/docs/${version}/javadoc-api/"") } ```  When the release is performed, this points to a location where the Javadoc hasn't been published yet (as publication of the Javadoc happens after the staging phase). Whatever is intended here, it cannot work as the `package-list` file can't be there.  This is interesting as this change was introduced in [5.0 RC4|SPR-15659] but only started to fail recently due to [an upgrade of the dokka plugin](https://github.com/spring-projects/spring-framework/commit/c6f5acf15d261f82ba888a6c4ffc525c4fc1ca70).  It looks like others [are affected](https://github.com/Kotlin/dokka/issues/213)  Looking at the [Kotlin API doc for the previous release](https://docs.spring.io/spring-framework/docs/5.0.4.RELEASE/kdoc-api/spring-framework/org.springframework.context.support/-bean-definition-dsl/index.html) I don't think this ever worked.   ---  **Affects:** 5.0.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2fa060f0e9933aa2e9ea290cec05f19232afa97e, https://github.com/spring-projects/spring-framework/commit/c7c743872aa7ee9143f95fc74d654914df4938fa, https://github.com/spring-projects/spring-framework/commit/3fb8d16ff79d902ab5c2deee43da979dd92bcac4","closed","type: task,","spring-projects-issues","2018-04-03T19:14:00Z","2018-05-08T08:53:23Z"
"","21290","spring platform missing jackson-core dependency [SPR-16749]","**[Stijn Haezebrouck](https://jira.spring.io/secure/ViewProfile.jspa?name=shaezebrouck)** opened **[SPR-16749](https://jira.spring.io/browse/SPR-16749?redirect=false)** and commented  This is a spring platform issue, which the spring platform bom that an application can extend in maven.  As there is no project ""spring platform"" project defined, I am placing this on Spring Framework. Please reassign this to the correct project if that should not be correct.  Setting the following parent  ```      io.spring.platform     platform-bom     Brussels-SR8       ```  Or using versions Brussels-SR8, we have dependency org.glassfish.jersey.media:jersey-media-json-jackson bringing in com.fasterxml.jackson.core:jackson-core  By dependency, version :2.8.11.20180217 is brought in which is not found. In the spring io platform documentation on page https://docs.spring.io/platform/docs/Brussels-SR8/reference/htmlsingle/#appendix-dependency-versions Version 2.8.11 is listed (but not 2.8.11.20180217). When looking in the pom files platform-bom-Brussels-SR8.pom and spring-boot-dependencies-1.5.11.RELEASE.pom, I see no declaration for jackson-core. Hence, setting Brussels-SR8 (or SR9) as the parent breaks our build.    ---  **Affects:** General Backlog","closed","status: invalid,","spring-projects-issues","2018-04-20T08:42:54Z","2019-01-12T05:18:57Z"
"","21181","Multipart Upload with Commons Fileupload on lazy mode downloads data on cleanup [SPR-16640]","**[Steven Peh](https://jira.spring.io/secure/ViewProfile.jspa?name=speh)** opened **[SPR-16640](https://jira.spring.io/browse/SPR-16640?redirect=false)** and commented  Using Spring Boot v2.0.0 Apache Commons FileUpload v1.3.3  When set to resolveLazily, Spring boot will not parse the multipart request and download to local temp folder until needed. This works as expected, however if the app subsequently cancels the intent to accept the upload request, i.e. after applying authorization checks and the connection request is not authorized, during the clean up phase, Spring Boot actually initializes the multi-part to download the data so that it can cleanup.  Here's the chain of execution, all within spring boot code base:  CommonsMultipartResolver .cleanupMultipart() { ...cleanupFileItems(request.getMultiFileMap()) -> AbstractMultipartHttpServletRequest.getMultipartFiles() { if (this.multipartFiles == null) { <-- this will be true when resolveLazily is set initializeMultipart(); <-- here's the culprit ... The initializeMultipart will invoke parseRequest(..) to download the multipart upload data on cleanup which doesn't make sense when we have set resolveLazily and we have rejected/cancel the request for various reasons (access control being one of them).  Its also a cyber security issue here as unauthorized requests can upload arbitrary data, though only temporarily it can still be a very large file that use up storage, to the server.  ---  **Affects:** 4.3.14, 5.0.4  **Issue Links:** - #7471 Support MultipartFile-array property  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/10cb2ccaefa2736000ae94155ce357c1f2a6590e, https://github.com/spring-projects/spring-framework/commit/c1cb0311aa495e3b2cc9b3ec326c8db0b0768e10  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","type: bug,","spring-projects-issues","2018-03-26T01:28:23Z","2019-01-11T15:09:00Z"
"","21167","STOMP broker relay only allows up to 15 client connections [SPR-16626]","**[Stephen Franklin](https://jira.spring.io/secure/ViewProfile.jspa?name=sdf0621)** opened **[SPR-16626](https://jira.spring.io/browse/SPR-16626?redirect=false)** and commented  I'm using Spring Messaging and Websocket to connect to RabbitMQ. I'm only able to make 15 client websocket connections to RabbitMQ, plus one system connection. Attempting to connect more than 15 clients times out after 45 seconds with the following exception:  ERROR 20500 --- [ient-loop-nio-4] o.s.m.s.s.StompBrokerRelayMessageHandler : TCP connection failure in session f: Failed to connect: Acquire operation took longer then configured maximum time  java.util.concurrent.TimeoutException: Acquire operation took longer then configured maximum time at io.netty.channel.pool.FixedChannelPool.\(...)(Unknown Source) ~[netty-transport-4.1.21.Final.jar:4.1.21.Final]  This can be reproduced using the websocket guide at https://spring.io/guides/gs/messaging-stomp-websocket/ by configuring the stomp broker relay to connect to an external broker and attempting to connect more than 15 times.   ---  **Affects:** 5.0.4","closed","type: enhancement,","spring-projects-issues","2018-03-22T21:38:40Z","2018-04-03T20:34:29Z"
"","21466","ScriptUtils fails to split statements of a SQL script [SPR-16927]","**[Steffen Harbich](https://jira.spring.io/secure/ViewProfile.jspa?name=stha)** opened **[SPR-16927](https://jira.spring.io/browse/SPR-16927?redirect=false)** and commented  Consider the following script (quartz `tables_mysql_innodb.sql`):  ```sql # # In your Quartz properties file, you'll need to set # org.quartz.jobStore.driverDelegateClass = org.quartz.impl.jdbcjobstore.StdJDBCDelegate # # # By: Ron Cordell - roncordell # I didn't see this anywhere, so I thought I'd post it here. This is the script from Quartz to create the tables in a MySQL database, modified to use INNODB instead of MYISAM.  DROP TABLE IF EXISTS QRTZ_FIRED_TRIGGERS; DROP TABLE IF EXISTS QRTZ_PAUSED_TRIGGER_GRPS; ... ```  It is executed using QuartzAutoConfiguration's QuartzDataSourceInitializer for mysql. The `ScriptUtils` class will finally parse this script as 2 statements in line 464 (https://github.com/spring-projects/spring-framework/blob/master/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ScriptUtils.java#L464) which is wrong I think. Executing those statements results in a syntax exception because only one statement can be executed at a time:  ``` com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'DROP TABLE IF EXISTS QRTZ_PAUSED_TRIGGER_GRPS; DROP TABLE IF EXISTS QRTZ_SCHEDUL' at line 9 ```  If I remove the comments from the script then everything works fine as expected. I suspect that parsing of apostrophe in comment doesn't work as intended.  ---  **Affects:** 5.0.6  **Reference URL:** https://stackoverflow.com/questions/50793308","closed","status: invalid,","spring-projects-issues","2018-06-11T10:44:46Z","2019-03-25T12:40:30Z"
"","21621","@Validated services cannot autowire themselves [SPR-17084]","**[Stefanos Kalantzis](https://jira.spring.io/secure/ViewProfile.jspa?name=kidlike)** opened **[SPR-17084](https://jira.spring.io/browse/SPR-17084?redirect=false)** and commented  If a Service class is annotated with the Validated annotation, then the same class cannot autowire itself.  ``` @Service @Validated public class SomeService {     @Autowired     private SomeService someService; } ```  This is the exception that is thrown when the Spring Context tries to load:  ``` org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'someService' defined in file [/home/user/company/code/project/target/classes/com/company/project/controller/SomeService.class]: Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name 'someService': Bean with name 'someService' has been injected into other beans [someService] in its raw version as part of a circular reference, but has eventually been wrapped. This means that said other beans do not use the final version of the bean. This is often the result of over-eager type matching - consider using 'getBeanNamesOfType' with the 'allowEagerInit' flag turned off, for example. 	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:749) ~[spring-beans-4.3.14.RELEASE.jar:4.3.14.RELEASE] 	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:189) ~[spring-beans-4.3.14.RELEASE.jar:4.3.14.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1193) ~[spring-beans-4.3.14.RELEASE.jar:4.3.14.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1095) ~[spring-beans-4.3.14.RELEASE.jar:4.3.14.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:513) ~[spring-beans-4.3.14.RELEASE.jar:4.3.14.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483) ~[spring-beans-4.3.14.RELEASE.jar:4.3.14.RELEASE] 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) ~[spring-beans-4.3.14.RELEASE.jar:4.3.14.RELEASE] 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.3.14.RELEASE.jar:4.3.14.RELEASE] 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) ~[spring-beans-4.3.14.RELEASE.jar:4.3.14.RELEASE] 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) ~[spring-beans-4.3.14.RELEASE.jar:4.3.14.RELEASE] 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:761) ~[spring-beans-4.3.14.RELEASE.jar:4.3.14.RELEASE] 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:867) ~[spring-context-4.3.14.RELEASE.jar:4.3.14.RELEASE] 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:543) ~[spring-context-4.3.14.RELEASE.jar:4.3.14.RELEASE] 	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122) ~[spring-boot-1.5.10.RELEASE.jar:1.5.10.RELEASE] 	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:693) [spring-boot-1.5.10.RELEASE.jar:1.5.10.RELEASE] 	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:360) [spring-boot-1.5.10.RELEASE.jar:1.5.10.RELEASE] 	at org.springframework.boot.SpringApplication.run(SpringApplication.java:303) [spring-boot-1.5.10.RELEASE.jar:1.5.10.RELEASE] 	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118) [spring-boot-1.5.10.RELEASE.jar:1.5.10.RELEASE] 	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1107) [spring-boot-1.5.10.RELEASE.jar:1.5.10.RELEASE] 	at com.company.project.ProjectApplication.main(ProjectApplication.java:16) [classes/:na] Caused by: org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name 'someService': Bean with name 'someService' has been injected into other beans [someService] in its raw version as part of a circular reference, but has eventually been wrapped. This means that said other beans do not use the final version of the bean. This is often the result of over-eager type matching - consider using 'getBeanNamesOfType' with the 'allowEagerInit' flag turned off, for example. 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:585) ~[spring-beans-4.3.14.RELEASE.jar:4.3.14.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483) ~[spring-beans-4.3.14.RELEASE.jar:4.3.14.RELEASE] 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) ~[spring-beans-4.3.14.RELEASE.jar:4.3.14.RELEASE] 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.3.14.RELEASE.jar:4.3.14.RELEASE] 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) ~[spring-beans-4.3.14.RELEASE.jar:4.3.14.RELEASE] 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-4.3.14.RELEASE.jar:4.3.14.RELEASE] 	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:208) ~[spring-beans-4.3.14.RELEASE.jar:4.3.14.RELEASE] 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1138) ~[spring-beans-4.3.14.RELEASE.jar:4.3.14.RELEASE] 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1066) ~[spring-beans-4.3.14.RELEASE.jar:4.3.14.RELEASE] 	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:835) ~[spring-beans-4.3.14.RELEASE.jar:4.3.14.RELEASE] 	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:741) ~[spring-beans-4.3.14.RELEASE.jar:4.3.14.RELEASE] 	... 19 common frames omitted ```    ---  **Affects:** 4.3.14","open","in: core,","spring-projects-issues","2018-07-25T08:58:57Z","2019-01-11T12:46:43Z"
"","21414","When adding @ExceptionHandler for java.lang.Exception, handlers for nested exceptions stop working [SPR-16875]","**[Stanislav Bytsko](https://jira.spring.io/secure/ViewProfile.jspa?name=zbstof)** opened **[SPR-16875](https://jira.spring.io/browse/SPR-16875?redirect=false)** and commented  Consider Controller:  ``` @GetMapping public ResponseEntity doNastyStuff() throws Exception {     throw new MyOuterException(""Unexpected"", new MyInnerException(""Expected"")); } ```  and Controller Advice:  ``` @ExceptionHandler public ResponseEntity handleInner(MyInnerException exception) {     return status(I_AM_A_TEAPOT).body(exception.getMessage()); } ```  When get mapping is invoked, MyOuterException is thrown, but is caught in advice as MyInnerException and HTTP 418 is returned But, if we add second, catch-all `@ExceptionHandler`:  ``` @ExceptionHandler public ResponseEntity handleGeneric(Exception exception) {     return status(INTERNAL_SERVER_ERROR).body(exception.getMessage()); } ```  ... then invoking our controller will return 500, which is unexpected and requires us to implement workarounds in order to handle MyInnerException, like the following additional exception handler:  ``` @ExceptionHandler public ResponseEntity handleOuter(MyOuterException exception) {     if (getMostSpecificCause(exception) instanceof MyInnerException) {         return status(I_AM_A_TEAPOT).body(getMostSpecificCause(exception).getMessage());     } else {         return status(INTERNAL_SERVER_ERROR).body(exception.getMessage());     } } ```  Moreover, if we modify controller to return deeply nested exception:  ``` @GetMapping public ResponseEntity doNastyStuff() throws Exception {     throw new MyOuterException(""Unexpected Outer"", new MyMiddleException(""Unexpected Middle"", new MyInnerException(""Expected""))); } ```  ... then original `handleInner` exception handler stops working, even when no `handleGeneric` is present, so workaround is pretty much required  I think this behaviour is counter-intuitive, and all exceptions should be handled, no matter how deep in the chain of exception causes they are contained. Moreover, chain of exceptions should be parsed from deepest to shallowest, as usually root cause is the most specific one, and the one at the surface is the broadest   ---  **Affects:** 5.0.6","closed","status: declined,","spring-projects-issues","2018-05-26T16:24:09Z","2019-05-01T18:12:32Z"
"","21848","Support STOMP receipts with the simple broker  [SPR-17315]","**[spencercw](https://jira.spring.io/secure/ViewProfile.jspa?name=spencercw)** opened **[SPR-17315](https://jira.spring.io/browse/SPR-17315?redirect=false)** and commented  I'm trying to set up a project using WebSockets with the 'subscribe and snapshot' pattern (i.e., subscribing to a stream of updates and requesting a snapshot for initialisation).  From what I've been able to gather, the intended way to get the initial snapshot is to use `@SubscribeMapping`. I have put together a simple test class:  ```java @Controller public class GreetingController {     private Logger logger = LoggerFactory.getLogger(GreetingController.class);      private final SimpMessagingTemplate messagingTemplate;      private AtomicInteger value = new AtomicInteger();      @Autowired     public GreetingController(SimpMessagingTemplate messagingTemplate) {         this.messagingTemplate = messagingTemplate;     }      @SubscribeMapping(""/greetings"")     public int init() {         int x = value.get();         logger.info(""init "" + x);         return x;     }      @Scheduled(fixedRate = 1000)     public void poll() {         int x = value.incrementAndGet();         logger.info(""pushing "" + x);         messagingTemplate.convertAndSend(""/topic/greetings"", x);     } } ```  My client first subscribes to /topic/greetings and then /app/greetings. By doing it in this order, updates may be delivered to the client before the initial snapshot (which is fine), but the reverse order would create a brief period where an update could be generated after the snapshot but not delivered to the client.  You can see in the log below, both subscription messages are received in thread 'http-nio-8080-exec-9'. From there they are passed to the 'clientInboundChannel' thread pool. The topic subscription is handled by 'clientInboundChannel-5' while the app subscription is handled by 'clientInboundChannel-7'.  There is a race condition here because the topic subscription could be delayed long enough for an update to be generated after the app subscription has completed but before the topic subscription has completed, which would not be delivered to the client. I can artificially induce this by putting a breakpoint in SimpleBrokerMessageHandler.handleMessageInternal() and suspending only that thread.  As far as I can tell, it should be safe if I limit the thread pool to one thread, but that's obviously not ideal. Am I doing something wrong; is there some better way to do this?  ```java 2018-09-30 15:46:27.330 TRACE 32092 --- [nio-8080-exec-9] o.s.messaging.simp.stomp.StompDecoder    : Decoded SUBSCRIBE {id=[sub-0], destination=[/topic/greetings]} session=null 2018-09-30 15:46:27.330 TRACE 32092 --- [nio-8080-exec-9] o.s.w.s.m.StompSubProtocolHandler        : From client: SUBSCRIBE /topic/greetings id=sub-0 session=ok5b3h1f 2018-09-30 15:46:27.331 TRACE 32092 --- [nio-8080-exec-9] ConfigServletWebServerApplicationContext : Publishing event in org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@536dbea0: SessionSubscribeEvent[GenericMessage [payload=byte[0], headers={simpMessageType=SUBSCRIBE, stompCommand=SUBSCRIBE, nativeHeaders={id=[sub-0], destination=[/topic/greetings]}, simpSessionAttributes={}, simpHeartbeat=[J@63b1df68, simpSubscriptionId=sub-0, simpSessionId=ok5b3h1f, simpDestination=/topic/greetings}]] 2018-09-30 15:46:27.331 DEBUG 32092 --- [nboundChannel-5] o.s.m.s.b.SimpleBrokerMessageHandler     : Processing SUBSCRIBE /topic/greetings id=sub-0 session=ok5b3h1f 2018-09-30 15:46:27.331 DEBUG 32092 --- [nio-8080-exec-9] o.a.t.websocket.server.WsFrameServer     : WebSocket frame received. fin [true], rsv [4], OpCode [1], payload length [13] 2018-09-30 15:46:27.332 TRACE 32092 --- [nio-8080-exec-9] s.w.s.h.LoggingWebSocketHandlerDecorator : Handling TextMessage payload=[SUBSCRIBE ..], byteCount=48, last=true] in WebSocketServerSockJsSession[id=ok5b3h1f] 2018-09-30 15:46:27.332 TRACE 32092 --- [nio-8080-exec-9] o.s.messaging.simp.stomp.StompDecoder    : Decoded SUBSCRIBE {id=[sub-1], destination=[/app/greetings]} session=null 2018-09-30 15:46:27.332 TRACE 32092 --- [nio-8080-exec-9] o.s.w.s.m.StompSubProtocolHandler        : From client: SUBSCRIBE /app/greetings id=sub-1 session=ok5b3h1f 2018-09-30 15:46:27.332 TRACE 32092 --- [nio-8080-exec-9] ConfigServletWebServerApplicationContext : Publishing event in org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@536dbea0: SessionSubscribeEvent[GenericMessage [payload=byte[0], headers={simpMessageType=SUBSCRIBE, stompCommand=SUBSCRIBE, nativeHeaders={id=[sub-1], destination=[/app/greetings]}, simpSessionAttributes={}, simpHeartbeat=[J@6148f8ed, simpSubscriptionId=sub-1, simpSessionId=ok5b3h1f, simpDestination=/app/greetings}]] 2018-09-30 15:46:27.332 DEBUG 32092 --- [nio-8080-exec-9] o.a.tomcat.util.net.SocketWrapperBase    : Socket: [org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper@3fdb1e3c:org.apache.tomcat.util.net.NioChannel@311ce66f:java.nio.channels.SocketChannel[connected local=0:0:0:0:0:0:0:1/0:0:0:0:0:0:0:1:8080 remote=/0:0:0:0:0:0:0:1:32205]], Read from buffer: [0] 2018-09-30 15:46:27.332 DEBUG 32092 --- [nio-8080-exec-9] org.apache.tomcat.util.net.NioEndpoint   : Socket: [org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper@3fdb1e3c:org.apache.tomcat.util.net.NioChannel@311ce66f:java.nio.channels.SocketChannel[connected local=0:0:0:0:0:0:0:1/0:0:0:0:0:0:0:1:8080 remote=/0:0:0:0:0:0:0:1:32205]], Read direct from socket: [0] 2018-09-30 15:46:27.332 DEBUG 32092 --- [nboundChannel-7] .WebSocketAnnotationMethodMessageHandler : Searching methods to handle SUBSCRIBE /app/greetings id=sub-1 session=ok5b3h1f, lookupDestination='/greetings' 2018-09-30 15:46:27.334 TRACE 32092 --- [nboundChannel-7] .WebSocketAnnotationMethodMessageHandler : Found 1 handler methods: [{[/greetings],messageType=[SUBSCRIBE]}] 2018-09-30 15:46:27.334 DEBUG 32092 --- [nboundChannel-7] .WebSocketAnnotationMethodMessageHandler : Invoking hello.GreetingController#init[0 args] 2018-09-30 15:46:27.334 DEBUG 32092 --- [nboundChannel-7] o.s.b.f.s.DefaultListableBeanFactory     : Returning cached instance of singleton bean 'greetingController' 2018-09-30 15:46:27.334 TRACE 32092 --- [nboundChannel-7] o.s.m.h.i.InvocableHandlerMethod         : Invoking 'hello.GreetingController.init' with arguments [] 2018-09-30 15:46:27.334  INFO 32092 --- [nboundChannel-7] hello.GreetingController                 : init 9 2018-09-30 15:46:27.334 TRACE 32092 --- [nboundChannel-7] o.s.m.h.i.InvocableHandlerMethod         : Method [hello.GreetingController.init] returned [9] 2018-09-30 15:46:27.336 TRACE 32092 --- [nboundChannel-7] HandlerMethodReturnValueHandlerComposite : Processing return value with org.springframework.messaging.simp.annotation.support.SubscriptionMethodReturnValueHandler@4cb10416 2018-09-30 15:46:27.336 DEBUG 32092 --- [nboundChannel-7] a.s.SubscriptionMethodReturnValueHandler : Reply to @SubscribeMapping: 9 ```    ---  **Affects:** 5.0.9","open","type: enhancement,","spring-projects-issues","2018-09-30T15:36:48Z","2019-01-29T21:30:54Z"
"","21289","No support for non-standard HTTP status codes in reactive ClientHttpResponse [SPR-16748]","**[Spencer Gibb](https://jira.spring.io/secure/ViewProfile.jspa?name=spencergibb)** opened **[SPR-16748](https://jira.spring.io/browse/SPR-16748?redirect=false)** and commented  `ClientHttpResponse` does not have a way to retrieve http status codes as an int without using the `HttpStatus` enum. This causes responses with custom status codes to fail with the following exception.  ```java java.lang.IllegalArgumentException: No matching constant for [432]  	at org.springframework.http.HttpStatus.valueOf(HttpStatus.java:520) 	at org.springframework.http.client.reactive.ReactorClientHttpResponse.getStatusCode(ReactorClientHttpResponse.java:72) 	at org.springframework.http.client.reactive.ClientHttpResponseDecorator.getStatusCode(ClientHttpResponseDecorator.java:55) 	at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$exchange$4(ExchangeFunctions.java:85) 	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:100) 	at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:185) 	at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:185) 	at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:185) 	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:108) 	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:108) 	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:108) 	at reactor.core.publisher.FluxRetryPredicate$RetryPredicateSubscriber.onNext(FluxRetryPredicate.java:81) 	at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:140) 	at reactor.ipc.netty.channel.PooledClientContextHandler.fireContextActive(PooledClientContextHandler.java:84) 	at reactor.ipc.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:573) 	at reactor.ipc.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:134) 	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362) 	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348) 	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340) 	at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:102) 	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362) 	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348) 	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340) 	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:438) 	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:310) 	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:284) 	at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:253) 	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362) 	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348) 	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340) 	at io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241) 	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362) 	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348) 	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340) 	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1434) 	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362) 	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348) 	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:965) 	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163) 	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:645) 	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:580) 	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:497) 	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:459) 	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:886) 	at java.lang.Thread.run(Thread.java:748) 	Suppressed: java.lang.Exception: #block terminated with an error 		at reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:133) 		at reactor.core.publisher.Mono.block(Mono.java:1199) 		at org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultRequestBodyUriSpec.exchange(DefaultWebTestClient.java:282) 		at org.springframework.cloud.gateway.test.HttpStatusTests.nonStandardCodeWorks(HttpStatusTests.java:70) 		at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 		at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 		at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 		at java.lang.reflect.Method.invoke(Method.java:498) 		at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) 		at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) 		at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) 		at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) 		at org.springframework.test.context.junit4.statements.RunBeforeTestExecutionCallbacks.evaluate(RunBeforeTestExecutionCallbacks.java:73) 		at org.springframework.test.context.junit4.statements.RunAfterTestExecutionCallbacks.evaluate(RunAfterTestExecutionCallbacks.java:83) 		at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26) 		at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:75) 		at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86) 		at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84) 		at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) 		at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:251) 		at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97) 		at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) 		at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) 		at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) 		at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) 		at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) 		at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) 		at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70) 		at org.junit.runners.ParentRunner.run(ParentRunner.java:363) 		at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190) 		at org.junit.runner.JUnitCore.run(JUnitCore.java:137) 		at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) 		at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) 		at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) 		at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) ```  `ServerHttpResponse` also does not have a way to set status codes without using the enum, though `AbstractServerHttpResponse` does.  ---  **Affects:** 5.0.5  **Reference URL:** https://github.com/spring-cloud/spring-cloud-gateway/issues/284  **Issue Links:** - #20622 Returning non-standard HTTP status code causes exceptions on WebFlux - #20913 ServerResponse should allow the usage of unassigned HTTP status codes - #21359 Improve handling of unknown status codes by WebClient","closed","type: enhancement,","spring-projects-issues","2018-04-19T19:01:51Z","2019-10-09T15:41:43Z"
"","21824","Document the need for consistent access to form data through ServerWebExchange [SPR-17291]","**[Spencer Gibb](https://jira.spring.io/secure/ViewProfile.jspa?name=sgibb)** opened **[SPR-17291](https://jira.spring.io/browse/SPR-17291?redirect=false)** and commented  Either `@RequestBody` or other subscription (such as spring-cloud-gateway)     See also https://github.com/spring-projects/spring-boot/issues/14520  ---  **Affects:** 5.0.9  **Reference URL:** https://github.com/spring-cloud/spring-cloud-gateway/issues/541  **Issue Links:** - #21094 HiddenHttpMethodFilter breaks HandlerFunction with BodyExtractors.toFormData  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/963044525350a84d20a5ea0b5e21cdff4cd609c6  0 votes, 5 watchers","closed","type: task,","spring-projects-issues","2018-09-19T19:17:12Z","2019-01-14T04:27:20Z"
"","21839","WebSocketSession#close never emit when using ReactorHttpServer [SPR-17306]","**[Sola](https://jira.spring.io/secure/ViewProfile.jspa?name=soladev)** opened **[SPR-17306](https://jira.spring.io/browse/SPR-17306?redirect=false)** and commented  Given the following handler snippet,  ```java @Override public Mono handle(WebSocketSession session) {   return session.send(Flux.error(new Throwable())       .onErrorResume(e -> session.close(CloseStatus.GOING_AWAY))       .then(Mono.empty())); } ```  when using ReactorHttpServer, the Mono from session#close never emit. !image-2018-09-27-05-12-22-853.png|thumbnail!   ---  **Affects:** 5.0.9  **Attachments:** - [image-2018-09-27-05-12-22-853.png](https://jira.spring.io/secure/attachment/26029/image-2018-09-27-05-12-22-853.png) (_121.37 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/42b7c5a79b3651dfac622ca1429656832787c0ba, https://github.com/spring-projects/spring-framework/commit/b462ca22a52974e652d1274f2af70b459668f2a0, https://github.com/spring-projects/spring-framework/commit/bf4d00cb62714d43a7b28f190ecfd46f0e656bc5, https://github.com/spring-projects/spring-framework/commit/1320fed7fef6d8be480a020d46ae9a0bff4a131f  **Backported to:** [5.0.11](https://github.com/spring-projects/spring-framework/milestone/192?closed=1)","closed","type: task,","spring-projects-issues","2018-09-26T21:12:42Z","2018-11-05T20:55:36Z"
"","21810","WebSocket is not closed after calling session#close [SPR-17277]","**[Sola](https://jira.spring.io/secure/ViewProfile.jspa?name=soladev)** opened **[SPR-17277](https://jira.spring.io/browse/SPR-17277?redirect=false)** and commented  following is reproducible code  ```kotlin package com.example.demo  import org.assertj.core.api.Assertions import org.junit.Test import org.junit.runner.RunWith import org.springframework.boot.autoconfigure.SpringBootApplication import org.springframework.boot.test.context.SpringBootTest import org.springframework.boot.web.server.LocalServerPort import org.springframework.context.annotation.Bean import org.springframework.test.context.junit4.SpringRunner import org.springframework.web.reactive.handler.SimpleUrlHandlerMapping import org.springframework.web.reactive.socket.WebSocketHandler import org.springframework.web.reactive.socket.WebSocketMessage import org.springframework.web.reactive.socket.WebSocketSession import org.springframework.web.reactive.socket.client.ReactorNettyWebSocketClient import org.springframework.web.reactive.socket.server.support.WebSocketHandlerAdapter import reactor.core.publisher.Flux import reactor.core.publisher.Mono import java.net.URI import java.util.* import java.util.concurrent.atomic.AtomicInteger  /**  * @author Sola  */ @RunWith(SpringRunner::class) @SpringBootTest(     webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT,     classes = [WebSocketCloseTest.TestApplication::class] ) class WebSocketCloseTest {      @SpringBootApplication     class TestApplication {          @Bean         fun handlerMapping() = SimpleUrlHandlerMapping().apply {             val map = HashMap()             map[""/test/echo""] =                     EchoHandler()              val mapping = SimpleUrlHandlerMapping()             mapping.urlMap = map             mapping.order = -1 // before annotated controllers             return mapping         }          @Bean         fun handlerAdapter() = WebSocketHandlerAdapter()          class EchoHandler : WebSocketHandler {              override fun handle(session: WebSocketSession): Mono {                 return session.send(                     session.receive().filter {                         it.type == WebSocketMessage.Type.TEXT                     }.map {                         val payloadAsText = it.payloadAsText                         println(""Server Received: $payloadAsText"")                         session.textMessage(payloadAsText)                     }.doOnTerminate {                         println(""Client Closed!"")                     }                 )             }          }      }      private val ws = ReactorNettyWebSocketClient()      @LocalServerPort     private var port: Int = 0      @Test     fun `web socket should work as expected`() {         ws.execute(URI(""ws://localhost:$port/test/echo"")) { session ->             val output = Flux.range(1, 10).map { session.textMessage(it.toString()) }             val count = AtomicInteger(1)             val input = session.receive().take(10).flatMap {                 val text = it.payloadAsText                 Assertions.assertThat(count.getAndIncrement()).isEqualTo(text.toInt())                 Mono.empty()             }             session.send(output.mergeWith(input)).doOnTerminate {                 println(""END!"")                 session.close()             }         }.block()         readLine()     }  } ```  What is expected: The ""Client Closed"" message should be printed on stdout.   ---  **Affects:** 5.0.9","closed","status: invalid,","spring-projects-issues","2018-09-16T22:05:33Z","2019-01-12T05:18:12Z"
"","21748","Prevent instantiation of NamedParameterBatchUpdateUtils [SPR-17215]","**[sjh836](https://jira.spring.io/secure/ViewProfile.jspa?name=sjh836)** opened **[SPR-17215](https://jira.spring.io/browse/SPR-17215?redirect=false)** and commented  I think the utility class should not create objects. Most utility classes in the Spring Framework are therefore abstract classes. But SocketUtils, NamedParameterBatchUpdateUtils and ReflectUtils are not abstract classes. I added the abstract keyword to these classes, to prevent instantiation and to adapt coding conventions.   ---  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1943, and commits https://github.com/spring-projects/spring-framework/commit/08ba53dd0e0206fcfd72658c58371ccbe5a1ffaa, https://github.com/spring-projects/spring-framework/commit/1dac0df38b3063bb6edecf766028af58c5169868","closed","type: enhancement,","spring-projects-issues","2018-08-26T14:38:16Z","2018-09-07T13:48:36Z"
"","21573","Support the ""Server-Timing"" Header","**[sja](https://jira.spring.io/secure/ViewProfile.jspa?name=sja1)** opened **[SPR-17035](https://jira.spring.io/browse/SPR-17035?redirect=false)** and commented  It would be really great, if the {Server-Timing}-Header would be supported. Either as part of the Spring Boot Devtools or as Part of MVC?  This may be implemented as Servlet Interceptor and gives Web-Debug tools like the Chrome Devtools or Firefox Developer Tools the chance to display something like persistence query times, Disk-I/O-wait and such.  Maybe some numbers are already present beacause of Spring's metrics support.  ---  **Reference URL:** https://www.w3.org/TR/server-timing/","open","type: enhancement,","spring-projects-issues","2018-07-12T13:00:15Z","2021-02-25T14:56:38Z"
"","21502","ControllerAdvice with custom annotations not working [SPR-16964]","**[Simon Oelerich](https://jira.spring.io/secure/ViewProfile.jspa?name=simon-gmasil)** opened **[SPR-16964](https://jira.spring.io/browse/SPR-16964?redirect=false)** and commented  Creating an **_ControllerAdvice_** with _*assignableTypes*_ works fine.  Custom _*annotations*_ are not recognized as follows:  ```java @ControllerAdvice(annotations = AdminsOnly.class) public class AdminControllerAdvice { ... } ```  ```java @Controller @AdminsOnly public AdminController { ... } ```  ```java public @interface AdminsOnly { } ```  With this type of _*ControllerAdvice*_ the _*AdminController*_ will not use the advice.  ---  The following is working fine as a workaround:  ```java @ControllerAdvice(assignableTypes = AdminsOnly.class) public class AdminControllerAdvice { ... } ```  ```java @Controller public AdminController implements AdminsOnly { ... } ```  ```java public interface AdminsOnly { } ```  ---  **Affects:** 5.0.6, 5.0.7","closed","status: declined,","spring-projects-issues","2018-06-20T19:29:09Z","2020-08-26T08:30:09Z"
"","21467","JMS message listener container hangs after runningAllowed() returns false [SPR-16928]","**[Simon Lindhén](https://jira.spring.io/secure/ViewProfile.jspa?name=cadmium)** opened **[SPR-16928](https://jira.spring.io/browse/SPR-16928?redirect=false)** and commented  When using [AbstractJmsListeningContainer#runningAllowed](https://docs.spring.io/autorepo/docs/spring-framework/3.2.8.RELEASE/javadoc-api/org/springframework/jms/listener/AbstractJmsListeningContainer.html#runningAllowed()) to disable a listener it hangs on `lifecycleMonitor.wait()` in `DefaultMessageListenerContainer.AsyncMessageListenerInvoker.executeOngoingLoop()` and never wakes up. This means that `runningAllowed()` will never be called again so the listener can't be re-enabled.   ---  **Affects:** 5.0.6","open","in: messaging,","spring-projects-issues","2018-06-11T12:33:40Z","2019-01-11T15:41:20Z"
"","21220","MockHttpServletRequest does not return the requested Content-Type [SPR-16679]","**[Shunichi Ishii](https://jira.spring.io/secure/ViewProfile.jspa?name=ishiis)** opened **[SPR-16679](https://jira.spring.io/browse/SPR-16679?redirect=false)** and commented  A problem occurred that the requested Content-Type was changed. Using Hmac Authentication, it is a problem that the requested Content-Type was changed.  In the following my test code, requested Content-Type is application/json. Using @ AutoConfigureMockMvc.  ```java @RunWith(SpringRunner.class) @SpringBootTest @AutoConfigureMockMvc public class ExampleControllerTests {     @Autowired     private MockMvc mockMvc;      @Test     public void testCreate() throws Exception {         mockMvc.perform(MockMvcRequestBuilders.post(""/"")                 .contentType(MediaType.APPLICATION_JSON)                 .content(""{\""key\"":\""value\""}""))                 .andDo(MockMvcResultHandlers.print())                 .andExpect(MockMvcResultMatchers.status().is(HttpStatus.OK.value()));     } } ```  But, Content-Type in MockHttpServletRequest is application/json;charset=UTF-8. Charset is added to Content-Type.  ```java MockHttpServletRequest:       HTTP Method = POST       Request URI = /        Parameters = {}           Headers = {Content-Type=[application/json;charset=UTF-8]}              Body = {""key"":""value""}     Session Attrs = {} ```  In research, charset is added to Content-Type when MockHttpServletRequest.setCharacterEncoding is called from Servlet.   ---  **Affects:** 5.0.4  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1774","closed","status: declined,","spring-projects-issues","2018-04-02T15:20:45Z","2019-01-12T16:21:31Z"
"","21711","Add proxy capability to Netty4ClientHttpRequestFactory [SPR-17175]","**[Sergey Galkin](https://jira.spring.io/secure/ViewProfile.jspa?name=fred84)** opened **[SPR-17175](https://jira.spring.io/browse/SPR-17175?redirect=false)** and commented  We are heavily using RestTemplate and recently received requirement to use SOCKS5 proxy with authentication. So our requirements list for http client is: - configurable timeout - socks5 proxy with auth - client ssl certificates  After researching available http clients I see following possible solutions: - replace RestTemplate with reactive WebClient - create ReactiveWebClientRequestFactory and use it with RestTemplate - add proxy capability to Netty4ClientHttpRequestFactory and use it with existing RestTemplate  Last option requires minimal changes. The only downside is that Netty4ClientHttpRequestFactory is deprecated. Is it worth creating PR for this improvement?   ---  **Affects:** 5.0.8","closed","status: declined,","spring-projects-issues","2018-08-13T11:09:00Z","2020-04-02T15:18:04Z"
"","21527","Add ExchangeFilterFunction that enforces limit on the response size [SPR-16989]","**[Sergey Galkin](https://jira.spring.io/secure/ViewProfile.jspa?name=fred84)** opened **[SPR-16989](https://jira.spring.io/browse/SPR-16989?redirect=false)** and commented  I'm sending lots of http request with notifications to other system. I expected small acknowledgment in response (less than 1 KB), but from time to time one of this system start to return huge responses (several MB), which provide no value to me and only consume resources.  For such cases it will be handy if I will be able to configure WebClient to read only limited amount of data from response and keep using bodyToMono method:  ``` retrieve(1024).bodyToMono() ```  Currently we to replaced `bodyToMono` with custom extractor as a workaround.  ``` ... .exchange() .flatMap(response -> response   .body((t, m) -> t   .getBody()   .takeUntil(buffer -> byteCounter.addAndGet(buffer.readableByteCount()) > logLimit)) .collect(...) ```  ---  **Affects:** 5.0.7  **Issue Links:** - #21655 DataBufferUtils#takeUntilByteCount checks one extra buffer but does not release it - #21563 DataBufferUtils#join could leak buffers in case of error from the source  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/aec98268feb84f4a82a5aaad0ded2be82dbc5779","closed","type: enhancement,","spring-projects-issues","2018-07-01T09:10:30Z","2019-01-11T16:08:33Z"
"","21474","Support springProperties for springProfile name in logback-spring.xml  [SPR-16935]","**[Sergey Andrusevich](https://jira.spring.io/secure/ViewProfile.jspa?name=sandrusevich)** opened **[SPR-16935](https://jira.spring.io/browse/SPR-16935?redirect=false)** and commented  **Use case**:  Application on certain environments should write logs into the file. In order to turn this on/off we provide property in application.yml configuration which tells for which spring profile it is allowed or not allowed (like '!prod' for example).  The **logback-spring.xml** configuration for such case looks as follows:  ```java                                                           ${FILE_LOG_PATTERN}                          ${LOG_FILE}                              ${LOG_FILE}.%d{yyyy-MM-dd}.log                                                                                ```  In the Spring-Boot version **1.5.x** it doesn't work. From the source code (**org.springframework.boot.logging.logback.SpringProfileAction**) there is a piece of logic which isn't applied:  ```java private boolean acceptsProfiles(InterpretationContext ic, Attributes attributes) {       String[] profileNames = StringUtils.trimArrayElements(StringUtils .commaDelimitedListToStringArray(attributes.getValue(NAME_ATTRIBUTE)));      if (profileNames.length != 0) {          for (String profileName : profileNames) {             OptionHelper.substVars(profileName, ic, this.context);         }          return this.environment != null &&               this.environment.acceptsProfiles(profileNames);      }     return false;  } ```  Here   ``` OptionHelper.substVars(profileName, ic, this.context) ```  should return substituted value from the properties or from environment variables. But it isn't assigned to anything and in the next check where environment accepts profiles it still passes expression but not actual value.  The change like that could fix it:  ```java String[] profiles = new String[profileNames.length];  for (int i = 0; i < profileNames.length; i++) {      profiles[i] = OptionHelper.substVars(profileNames[i], ic, this.context);  }  return this.environment != null &&        this.environment.acceptsProfiles(profiles); ```    --- No further details from [SPR-16935](https://jira.spring.io/browse/SPR-16935?redirect=false)","closed","status: invalid,","spring-projects-issues","2018-06-12T07:46:32Z","2019-01-12T05:18:40Z"
"","21819","Concurrency Exception during bean configuration related to not thread safe getBeanPostProcessor access [SPR-17286]","**[Sebastien Fuchs](https://jira.spring.io/secure/ViewProfile.jspa?name=sfuchs)** opened **[SPR-17286](https://jira.spring.io/browse/SPR-17286?redirect=false)** and commented  Happens during initialisation of projects using Akka actors enriched by Spring beans ex:  Spring service -> akka actor created and autowired during postConstruct.  Log:  ```java [INFO] F8: Caused by: java.util.ConcurrentModificationException: null [INFO] F8: 	at java.util.ArrayList$Itr.checkForComodification(ArrayList.java:909) [INFO] F8: 	at java.util.ArrayList$Itr.next(ArrayList.java:859) [INFO] F8: 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.predictBeanType(AbstractAutowireCapableBeanFactory.java:614) [INFO] F8: 	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:555) [INFO] F8: 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:432) [INFO] F8: 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:395) [INFO] F8: 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:389) [INFO] F8: 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveNamedBean(DefaultListableBeanFactory.java:1002) [INFO] F8: 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:345) [INFO] F8: 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:340) [INFO] F8: 	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1092) [INFO] F8: 	at com.asaoweb.exmessaging.server.actors.SpringActorProducer.produce(SpringActorProducer.java:36) [INFO] F8: 	at akka.actor.Props.newActor(Props.scala:212) [INFO] F8: 	at akka.actor.ActorCell.newActor(ActorCell.scala:624) [INFO] F8: 	at akka.actor.ActorCell.create(ActorCell.scala:650) ```     ---  **Affects:** 4.3.19  **Issue Links:** - #17034 Concurrent registration/iteration in PropertySourcesPropertyResolver - #21980 StandardEvaluationContext does not support concurrent variable access  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d15abfdb3fd08d2d3ebe15a6bf9a639c156972e7, https://github.com/spring-projects/spring-framework/commit/fa06faa3ec081119d56c29f3322829015474e97b, https://github.com/spring-projects/spring-framework/commit/1756f837013a9fe4384ff75b364ae5705f831e01, https://github.com/spring-projects/spring-framework/commit/0d1bf52122de3cea0e57732d8c0066d8a1ca22f8, https://github.com/spring-projects/spring-framework/commit/4642c32c0f57993ff1d1e8b4cfdccbc7792bbedb  **Backported to:** [5.0.10](https://github.com/spring-projects/spring-framework/milestone/191?closed=1)","closed","in: core,","spring-projects-issues","2018-09-18T16:54:54Z","2019-01-11T14:12:21Z"
"","21283","Support JSON streaming formats besides application/stream+json","**[Sebastiaan van Erk](https://jira.spring.io/secure/ViewProfile.jspa?name=sebster)** opened **[SPR-16742](https://jira.spring.io/browse/SPR-16742?redirect=false)** and commented  The mime type used by Spring Web Reactive for streaming json does not seem to be correct. The mime type ""application/stream+json"" is for an obsolete standard for activity streams:  https://tools.ietf.org/id/draft-snell-activity-streams-type-01.html  It has been superseded by the standard:  https://www.w3.org/TR/activitystreams-core/  with mime type ""application/activity+json"".  However, an activity stream is not the same as streaming json, so neither of these mime types should be used.  I was unable to find any standard mime type for json streaming, so I'm not sure what the resolution should be. The mime type should not be in the standards tree (since it is not a standard mime type), and the ""x-"" tree seems to be deprecated (since 1996) (see https://en.wikipedia.org/wiki/Media_type).  But I'm not sure that using a deprecated media type in the standards tree which is not officially registered, was invented for a different purpose, and has been superseded, is the way to go.  ---  **Affects:** 5.0.5  **Issue Links:** - #20331 Support Protobuf serialization in WebFlux  1 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2018-04-18T14:08:48Z","2020-07-28T15:41:02Z"
"","21356","Process cannot exit when the SchedulerFactoryBean fails to initialize [SPR-16816]","**[ScienJus](https://jira.spring.io/secure/ViewProfile.jspa?name=scienjus)** opened **[SPR-16816](https://jira.spring.io/browse/SPR-16816?redirect=false)** and commented  For some reason, there is an occasional exception arise from database queries when using quartz's cluster mode. when this exception occurs, the Spring container will close and exit, leaving Java Process suspending.  Through the jstack logs I found that some quartz threads are still running. because they are user threads, the Java process does not exit.  The threads are supposed to close through the `destroy` method in `SchedulerFactoryBean`, but unfortunately, if an exception is thrown in `afterPropertiesSet`, the `destroy` method will not be called, subsequently, these threads will not be closed in the meanwhile.  Here are the jstack logs and error logs. You can see that `registerJobsAndTriggers` throws an exception after the scheduler started. So I prepare to catch the invokation of the method and manually call the destroy method when it throwing an exception.  ```java Caused by: org.quartz.JobPersistenceException: Couldn't retrieve trigger: No record found for selection of Trigger with key: 'DEFAULT.bikeLowPowerUpcomingJobTrigger' and statement: SELECT * FROM QRTZ_CRON_TRIGGERS WHERE SCHED_NAME = 'molaQuartzScheduler' AND TRIGGER_NAME = ? AND TRIGGER_GROUP = ?    at org.quartz.impl.jdbcjobstore.JobStoreSupport.retrieveTrigger(JobStoreSupport.java:1533)    at org.quartz.impl.jdbcjobstore.JobStoreSupport$12.execute(JobStoreSupport.java:1522)    at org.quartz.impl.jdbcjobstore.JobStoreCMT.executeInLock(JobStoreCMT.java:245)    at org.quartz.impl.jdbcjobstore.JobStoreSupport.executeWithoutLock(JobStoreSupport.java:3739)    at org.quartz.impl.jdbcjobstore.JobStoreSupport.retrieveTrigger(JobStoreSupport.java:1519)    at org.quartz.core.QuartzScheduler.getTrigger(QuartzScheduler.java:1530)    at org.quartz.impl.StdScheduler.getTrigger(StdScheduler.java:508)    at org.springframework.scheduling.quartz.SchedulerAccessor.addTriggerToScheduler(SchedulerAccessor.java:291)    at org.springframework.scheduling.quartz.SchedulerAccessor.registerJobsAndTriggers(SchedulerAccessor.java:235)    at org.springframework.scheduling.quartz.SchedulerFactoryBean.afterPropertiesSet(SchedulerFactoryBean.java:510) ```  I‘d like to create a pull request if you agree with this solution.   ---  **Affects:** 4.3.17, 5.0.6  **Attachments:** - [error.log](https://jira.spring.io/secure/attachment/25717/error.log) (_11.16 kB_) - [jstack.log](https://jira.spring.io/secure/attachment/25716/jstack.log) (_23.58 kB_)  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1828, and commits https://github.com/spring-projects/spring-framework/commit/849b6ccb8b9371f28c64d4c6652f700519a7bb7a, https://github.com/spring-projects/spring-framework/commit/009824598c0254412d79eefffd7ea17db7b5da0f, https://github.com/spring-projects/spring-framework/commit/a3bcdbe37197006fbfd157e40489603cf574d17b  **Backported to:** [4.3.18](https://github.com/spring-projects/spring-framework/milestone/167?closed=1)","closed","in: core,","spring-projects-issues","2018-05-12T14:56:38Z","2018-06-12T15:44:04Z"
"","21261","Inconsistent getTypeForFactoryMethod results for parameterized factory method [SPR-16720]","**[Sandeep Donthula](https://jira.spring.io/secure/ViewProfile.jspa?name=sandeep0940)** opened **[SPR-16720](https://jira.spring.io/browse/SPR-16720?redirect=false)** and commented  Hi,  We were trying to upgrade Spring 4.2 to 4.3 version. And facing below issue while beans getting created.  Class: `@Component` `@RequiredArgsConstructor`(onConstructor = `@__`(`@Autowired`)) public class ClientFactory { public \ T getRetryableServiceClient(final Class\ clazz, final String qualifier) { } }  package com.coral.client; public interface Client { }  public class AdaptorFactory { `@Autowired` private NodeExecutionServiceClient nodeExecutionServiceClient; }  Bean                               Bean creation of this was failing with error  Exiting with throwable: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'adaptorFactory': Unsatisfied dependency expressed through field 'nodeExecutionServiceClient'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'com.nodeexecutionservice.NodeExecutionServiceClient' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {`@org`.springframework.beans.factory.annotation.Autowired(required=true)}  I debugged into source code of spring and found issue  Referring to this particular commit : https://github.com/spring-projects/spring-framework/commit/b9c4f1fa95a4b65e5baa6f507c0e2bfb4624b8af#diff-cc936e219ae3ea6fcf88f74629262bbd  getTypeForFactoryMethod  commonType comes as - com.nodeexecutionservice.NodeExecutionServiceClient uniqueCandidate comes as - com.coral.client.Client      if (commonType != null) {          // Clear return type found: all factory methods return same type.          mbd.factoryMethodReturnType = (uniqueCandidate != null ?                    ResolvableType.forMethodReturnType(uniqueCandidate) : ResolvableType.forClass(commonType));     }     return commonType;  from the above code - ResolvableType of 'commonType' returned. But ResolvableType of 'uniqueCandidate' got saved in cache. My Generic question is ideally whatever we are returning, we should save that in cache as we are referring cache in the method call at the starting.  In my case while resolving 'uniqueCandidate', '?' got saved in cache. It returned NodeExecutionServiceClient for the first call but for other subsequent calls, it's returning '?' which is causing issue.  Why this is written like, return one resolvable type but same something else in cache which is ideally wrong ? And when 'commonType' is getting resolved correctly, rather than using why 'uniqueCandidate' is getting saved in cache ?  ---  **Affects:** 4.3.14  **Issue Links:** - #19578 getBeanNamesForType(ResolvableType) doesn't match generic factory method return type for yet-to-be-created bean  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4763154193fab3b06f04e85cf289ecd1d33056b7, https://github.com/spring-projects/spring-framework/commit/c6a7732a30b169f342c4200aedc88e01c71c43d4, https://github.com/spring-projects/spring-framework/commit/6184c4ecc904fe58374245c454a6bc768ace6d37  **Backported to:** [4.3.17](https://github.com/spring-projects/spring-framework/milestone/166?closed=1)","closed","in: core,","spring-projects-issues","2018-04-12T09:29:45Z","2019-01-11T16:45:08Z"
"","21883","Request backport of SPR-17307 [SPR-17349]","**[Samuel Bratton](https://jira.spring.io/secure/ViewProfile.jspa?name=sbratton)** opened **[SPR-17349](https://jira.spring.io/browse/SPR-17349?redirect=false)** and commented  Hi,  Thanks for the performance improvement #21840.   I would like to request it be back ported to 4.x and 5.0. Our goal is to benefit from the performance improvement in apps built on spring boot 1.5.x  and spring boot 2.0.x    ---  **Affects:** 4.3.19, 5.0.9  **Issue Links:** - #21840 Unnecessary sort in AbstractApplicationEventMulticaster","closed","in: core,","spring-projects-issues","2018-10-05T15:54:30Z","2019-01-11T14:15:10Z"
"","21841","Improve performance by maintaining sort of application listeners [SPR-17308]","**[Samuel Bratton](https://jira.spring.io/secure/ViewProfile.jspa?name=sbratton)** opened **[SPR-17308](https://jira.spring.io/browse/SPR-17308?redirect=false)** and commented  There's a slight but measurable performance hit due to sorting application listeners in AbstractApplicationEventMulticaster.java, even with as few as 2 listeners. The cost is incurred on every call to getApplicationListeners()when listeners are sorted (https://github.com/spring-projects/spring-framework/blob/e366b20037bf59119ea638353b2f5917ce484fe7/spring-context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java#L390) By maintaining a sorted list as entries are added/removed this cost is reduced. There is a proposed change which can be mad a pull request here: https://github.com/sebratton/spring-framework/tree/sort-application-listeners  ---  **Affects:** 4.3.19, 5.0.9  **Issue Links:** - #21840 Unnecessary sort in AbstractApplicationEventMulticaster (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2018-09-27T06:30:29Z","2019-01-11T14:18:06Z"
"","21745","Document default EmbeddedValueResolver support for property placeholders [SPR-17212]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-17212](https://jira.spring.io/browse/SPR-17212?redirect=false)** and commented  ## Overview  #18712 introduced support for ""registering a default embedded value resolver for the default environment now, in case of none having been registered through post-processors (like `PropertyPlaceholderConfigurer` and `PropertySourcesPlaceholderConfigurer` do, with configurable placeholder syntax etc).""  However, the existing documentation -- stating that a _static_ `PropertySourcesPlaceholderConfigurer` bean is required in order for values coming from `@PropertySource` declarations to be honored -- has _not_ been updated to reflect the change introduced in Spring Framework 4.3.  ## Deliverables  - Update JavaDoc for `@Configuration`, `@PropertySource`, and `@Bean` as appropriate. - Update affected sections of the Reference Manual if necessary.  ---  **Affects:** 4.3.18  **Issue Links:** - #13183 automatic registration of PSPC when `@PropertySource` is used - #18712 Placeholder resolution for annotation attributes is not active by default  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f55a6051dfe0ea51fc82196cb6ca3c9a4e1570ff  1 votes, 1 watchers","closed","type: documentation,","spring-projects-issues","2018-08-24T15:22:21Z","2019-01-13T04:26:39Z"
"","21741","Fix grammar in JavaDoc for fully qualified links [SPR-17208]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-17208](https://jira.spring.io/browse/SPR-17208?redirect=false)** and commented  ## Overview  It was brought to our attention in a [discussion on GitHub](https://github.com/spring-projects/spring-framework/pull/1938#discussion_r212014834) that JavaDoc links created from a fully qualified class name (FQCN) end up as only the simple class name in the generated HTML.  For example, in the JavaDoc for the constructor for `JCacheCache`, we have the following.  ```java /**  * Create an {@link org.springframework.cache.jcache.JCacheCache} instance.  * @param jcache backing JCache Cache instance  */ public JCacheCache(Cache jcache) { 	this(jcache, true); } ```  The Spring Team has always _assumed_ that the generated HTML would look like the following.  > Create an `org.springframework.cache.jcache.JCacheCache` instance.  In fact, that is what Eclipse IDE generates in the JavaDoc view. The above was literally copied and pasted from Eclipse.  However, the [generated HTML on docs.spring.io](https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/jcache/JCacheCache.html#JCacheCache-javax.cache.Cache-) actually looks like the following.  > Create an `JCacheCache` instance.  This makes the statement grammatically incorrect since `JCacheCache` starts with a consonant instead of a vowel (i.e., if it were instead `org.springframework.cache.jcache.JCacheCache`).  ## Deliverables  1. Determine if there is a flag that instructs JavaDoc to emit the FQCN instead of the simple class name. 2. If there is no such configuration option/flag, devise a means to update all affected JavaDoc within the code base accordingly -- for example, via regular expressions.    ---  **Affects:** 5.1 RC2  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/1938#discussion_r212014834  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2bb15f7ed221bb1206a4551ebc93e2c94dd116e4, https://github.com/spring-projects/spring-framework/commit/35c847a708d58876bed07869c78676af042d9fcd","closed","type: documentation,","spring-projects-issues","2018-08-23T13:10:35Z","2019-01-14T04:28:45Z"
"","21710","Fix broken links and address warnings for JavaDoc [SPR-17174]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-17174](https://jira.spring.io/browse/SPR-17174?redirect=false)** and commented  ## Status Quo  Executing `gradlew api` currently emits the following warnings.  ``` javadoc: warning - Multiple sources of package comments found for package ""javax.transaction"" javadoc: warning - Multiple sources of package comments found for package ""javax.servlet"" javadoc: warning - Multiple sources of package comments found for package ""javax.servlet.http"" javadoc: warning - Multiple sources of package comments found for package ""javax.servlet.descriptor"" javadoc: warning - Multiple sources of package comments found for package ""javax.servlet.annotation"" /spring-framework/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/ServerRequest.java:339: warning - Tag @linkplain: reference not found: Locale.LanguageRange languages /spring-framework/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/ServerRequest.java:339: warning - Tag @linkplain: reference not found: Locale.LanguageRange languages /spring-framework/spring-websocket/src/main/java/org/springframework/web/socket/messaging/SubProtocolHandler.java:42: warning - Tag @link: reference not found: Messages /spring-framework/spring-beans/src/main/java/org/springframework/beans/support/MutableSortDefinition.java:151: warning - @propertyDescription is an unknown tag. /spring-framework/spring-beans/src/main/java/org/springframework/beans/support/MutableSortDefinition.java:151: warning - Tags @propertyGetter, @propertySetter and @propertyDescription can only be used in JavaFX properties getters and setters. /spring-framework/spring-beans/src/main/java/org/springframework/beans/support/MutableSortDefinition.java:151: warning - Tags @propertyGetter, @propertySetter and @propertyDescription can only be used in JavaFX properties getters and setters. /spring-framework/spring-beans/src/main/java/org/springframework/beans/support/MutableSortDefinition.java:151: warning - @propertyDescription is an unknown tag. /spring-framework/spring-beans/src/main/java/org/springframework/beans/support/MutableSortDefinition.java:151: warning - Tags @propertyGetter, @propertySetter and @propertyDescription can only be used in JavaFX properties getters and setters. /spring-framework/spring-beans/src/main/java/org/springframework/beans/support/MutableSortDefinition.java:151: warning - Tags @propertyGetter, @propertySetter and @propertyDescription can only be used in JavaFX properties getters and setters. /spring-framework/spring-beans/src/main/java/org/springframework/beans/support/MutableSortDefinition.java:151: warning - Tags @propertyGetter, @propertySetter and @propertyDescription can only be used in JavaFX properties getters and setters. /spring-framework/spring-beans/src/main/java/org/springframework/beans/support/MutableSortDefinition.java:151: warning - Tags @propertyGetter, @propertySetter and @propertyDescription can only be used in JavaFX properties getters and setters. /spring-framework/spring-web/src/main/java/org/springframework/web/client/DefaultResponseErrorHandler.java:64: warning - Tag @link: reference not found: HttpStatus.Series#CLIENT_ERROR CLIENT_ERROR /spring-framework/spring-web/src/main/java/org/springframework/web/client/DefaultResponseErrorHandler.java:64: warning - Tag @link: reference not found: HttpStatus.Series#SERVER_ERROR SERVER_ERROR /spring-framework/spring-web/src/main/java/org/springframework/web/client/ExtractingResponseErrorHandler.java:57: warning - Tag @link: reference not found: HttpMessageConverters /spring-framework/spring-web/src/main/java/org/springframework/web/client/ExtractingResponseErrorHandler.java:57: warning - Tag @link: reference not found: HttpStatus.Series#CLIENT_ERROR /spring-framework/spring-web/src/main/java/org/springframework/web/client/ExtractingResponseErrorHandler.java:57: warning - Tag @link: reference not found: HttpStatus.Series#SERVER_ERROR /spring-framework/spring-web/src/main/java/org/springframework/web/client/DefaultResponseErrorHandler.java:64: warning - Tag @link: reference not found: HttpStatus.Series#CLIENT_ERROR CLIENT_ERROR /spring-framework/spring-web/src/main/java/org/springframework/web/client/DefaultResponseErrorHandler.java:64: warning - Tag @link: reference not found: HttpStatus.Series#SERVER_ERROR SERVER_ERROR /spring-framework/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java:92: warning - Tag @link: reference not found: org.springframework.web.reactive.client.WebClient WebClient /spring-framework/spring-webflux/src/main/java/org/springframework/web/reactive/socket/client/UndertowWebSocketClient.java:123: warning - #DEFAULT_POOL_BUFFER_SIZE (referenced by @value tag) is an unknown reference. /spring-framework/spring-core/src/main/java/org/springframework/cglib/proxy/Enhancer.java:772: warning - Tag @link: reference not found: EnhancerFactoryData /spring-framework/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/ServerRequest.java:339: warning - Tag @linkplain: reference not found: Locale.LanguageRange languages /spring-framework/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/ServerRequest.java:339: warning - Tag @linkplain: reference not found: Locale.LanguageRange languages /spring-framework/spring-core/src/main/java/org/springframework/util/function/SingletonSupplier.java:37: warning - Tag @link: reference not found: java.util.function Supplier /spring-framework/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurer.java:88: warning - Tag @link: reference not found: Formatters /spring-framework/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurer.java:88: warning - Tag @link: reference not found: Formatters /spring-framework/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurer.java:88: warning - Tag @link: reference not found: Formatters /spring-framework/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurer.java:88: warning - Tag @link: reference not found: Formatters /spring-framework/spring-web/src/main/java/org/springframework/web/server/handler/FilteringWebHandler.java:35: warning - Tag @link: reference not found: WebFilters /spring-framework/spring-web/src/main/java/org/springframework/http/codec/xml/XmlEventDecoder.java:79: warning - Tag @link: reference not found: XMLEvents /spring-framework/spring-tx/src/main/java/org/springframework/transaction/jta/WebLogicJtaTransactionManager.java:76: warning - Tag @see: reference not found: weblogic.transaction.UserTransaction#begin(String) /spring-framework/spring-tx/src/main/java/org/springframework/transaction/jta/WebLogicJtaTransactionManager.java:76: warning - Tag @see: reference not found: weblogic.transaction.Transaction#setProperty /spring-framework/spring-tx/src/main/java/org/springframework/transaction/jta/WebLogicJtaTransactionManager.java:76: warning - Tag @see: reference not found: weblogic.transaction.TransactionManager#forceResume /spring-framework/spring-tx/src/main/java/org/springframework/transaction/jta/WebLogicJtaTransactionManager.java:76: warning - Tag @see: reference not found: weblogic.transaction.TransactionHelper /spring-framework/spring-jdbc/src/main/java/org/springframework/jdbc/support/rowset/ResultSetWrappingSqlRowSet.java:64: warning - Tag @link: reference not found: SQLExceptions /spring-framework/spring-jdbc/src/main/java/org/springframework/jdbc/support/rowset/ResultSetWrappingSqlRowSetMetaData.java:37: warning - Tag @link: reference not found: SQLExceptions /spring-framework/spring-webflux/src/main/java/org/springframework/web/reactive/config/WebFluxConfigurer.java:102: warning - Tag @link: reference not found: Formatters /spring-framework/spring-webflux/src/main/java/org/springframework/web/reactive/config/WebFluxConfigurer.java:102: warning - Tag @link: reference not found: Formatters /spring-framework/spring-webflux/src/main/java/org/springframework/web/reactive/config/WebFluxConfigurer.java:102: warning - Tag @link: reference not found: Formatters /spring-framework/spring-webflux/src/main/java/org/springframework/web/reactive/config/WebFluxConfigurer.java:102: warning - Tag @link: reference not found: Formatters /spring-framework/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/WebSphereDataSourceAdapter.java:70: warning - Tag @see: reference not found: com.ibm.websphere.rsadapter.JDBCConnectionSpec /spring-framework/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/WebSphereDataSourceAdapter.java:70: warning - Tag @see: reference not found: com.ibm.websphere.rsadapter.WSDataSource#getConnection(com.ibm.websphere.rsadapter.JDBCConnectionSpec) /spring-framework/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/WebSphereDataSourceAdapter.java:135: warning - Tag @see: reference not found: com.ibm.websphere.rsadapter.WSDataSource#getConnection(com.ibm.websphere.rsadapter.JDBCConnectionSpec) /spring-framework/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/WebSphereDataSourceAdapter.java:163: warning - Tag @see: reference not found: com.ibm.websphere.rsadapter.JDBCConnectionSpec /spring-framework/spring-web/src/main/java/org/springframework/web/server/session/CookieWebSessionIdResolver.java:91: warning - Tag @link: reference not found: ResponseCookie.ResponseCookieBuilder  ResponseCookieBuilder /spring-framework/spring-web/src/main/java/org/springframework/web/server/session/CookieWebSessionIdResolver.java:91: warning - Tag @link: reference not found: ResponseCookie.ResponseCookieBuilder#build() build() /spring-framework/spring-web/src/main/java/org/springframework/web/server/session/CookieWebSessionIdResolver.java:91: warning - Tag @link: reference not found: ResponseCookie.ResponseCookieBuilder  ResponseCookieBuilder /spring-framework/spring-web/src/main/java/org/springframework/web/server/session/CookieWebSessionIdResolver.java:91: warning - Tag @link: reference not found: ResponseCookie.ResponseCookieBuilder#build() build() /spring-framework/spring-web/src/main/java/org/springframework/http/server/reactive/HttpHandler.java:43: warning - Tag @link: reference not found: org.springframework.web.server /spring-framework/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyCodec.java:41: warning - Tag @link: reference not found: Messages /spring-framework/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyCodec.java:41: warning - Tag @link: reference not found: Messages /spring-framework/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyCodec.java:41: warning - Tag @link: reference not found: Messages /spring-framework/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyCodec.java:41: warning - Tag @link: reference not found: Messages /spring-framework/spring-web/src/main/java/org/springframework/http/client/InterceptingClientHttpRequestFactory.java:34: warning - Tag @link: reference not found: ClientHttpRequestInterceptors /spring-framework/spring-web/src/main/java/org/springframework/http/client/OkHttp3ClientHttpRequestFactory.java:78: warning - Tag @see: reference not found: OkHttpClient.Builder#readTimeout(long, TimeUnit) /spring-framework/spring-web/src/main/java/org/springframework/http/client/OkHttp3ClientHttpRequestFactory.java:89: warning - Tag @see: reference not found: OkHttpClient.Builder#writeTimeout(long, TimeUnit) /spring-framework/spring-web/src/main/java/org/springframework/http/client/OkHttp3ClientHttpRequestFactory.java:100: warning - Tag @see: reference not found: OkHttpClient.Builder#connectTimeout(long, TimeUnit) /spring-framework/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/TransportHandlingSockJsService.java:66: warning - Tag @link: reference not found: TransportHandlers /spring-framework/spring-core/src/main/java/org/springframework/cglib/core/AbstractClassGenerator.java:245: warning - Tag @see cannot be used in inline documentation.  It can only be used in the following types of documentation: overview, package, class/interface, constructor, field, method. /spring-framework/spring-core/src/main/java/org/springframework/cglib/core/AbstractClassGenerator.java:245: warning - Tag @see cannot be used in inline documentation.  It can only be used in the following types of documentation: overview, package, class/interface, constructor, field, method. /spring-framework/spring-test/src/main/java/org/springframework/test/web/reactive/server/WebTestClient.java:369: warning - Tag @link: reference not found: WebClient.Builder /spring-framework/spring-test/src/main/java/org/springframework/test/web/reactive/server/WebTestClient.java:369: warning - Tag @link: reference not found: WebClient.Builder /spring-framework/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/HandlerExceptionResolverComposite.java:35: warning - Tag @link: reference not found: HandlerExceptionResolvers /spring-framework/spring-web/src/main/java/org/springframework/http/converter/protobuf/ProtobufJsonFormatHttpMessageConverter.java:48: warning - Tag @link: reference not found: JsonFormat.Parser /spring-framework/spring-web/src/main/java/org/springframework/http/converter/protobuf/ProtobufJsonFormatHttpMessageConverter.java:48: warning - Tag @link: reference not found: JsonFormat.Printer /spring-framework/spring-web/src/main/java/org/springframework/http/converter/protobuf/ProtobufJsonFormatHttpMessageConverter.java:58: warning - Tag @link: reference not found: JsonFormat.Parser /spring-framework/spring-web/src/main/java/org/springframework/http/converter/protobuf/ProtobufJsonFormatHttpMessageConverter.java:58: warning - Tag @link: reference not found: JsonFormat.Printer /spring-framework/spring-web/src/main/java/org/springframework/http/converter/protobuf/ProtobufJsonFormatHttpMessageConverter.java:73: warning - Tag @link: reference not found: JsonFormat.Parser /spring-framework/spring-web/src/main/java/org/springframework/http/converter/protobuf/ProtobufJsonFormatHttpMessageConverter.java:73: warning - Tag @link: reference not found: JsonFormat.Printer /spring-framework/spring-web/src/main/java/org/springframework/http/converter/protobuf/ProtobufJsonFormatHttpMessageConverter.java:48: warning - Tag @link: reference not found: JsonFormat.Parser /spring-framework/spring-web/src/main/java/org/springframework/http/converter/protobuf/ProtobufJsonFormatHttpMessageConverter.java:48: warning - Tag @link: reference not found: JsonFormat.Printer /spring-framework/spring-web/src/main/java/org/springframework/http/converter/protobuf/ProtobufJsonFormatHttpMessageConverter.java:58: warning - Tag @link: reference not found: JsonFormat.Parser /spring-framework/spring-web/src/main/java/org/springframework/http/converter/protobuf/ProtobufJsonFormatHttpMessageConverter.java:58: warning - Tag @link: reference not found: JsonFormat.Printer /spring-framework/spring-web/src/main/java/org/springframework/http/converter/protobuf/ProtobufJsonFormatHttpMessageConverter.java:73: warning - Tag @link: reference not found: JsonFormat.Parser /spring-framework/spring-web/src/main/java/org/springframework/http/converter/protobuf/ProtobufJsonFormatHttpMessageConverter.java:73: warning - Tag @link: reference not found: JsonFormat.Printer /spring-framework/spring-web/src/main/java/org/springframework/http/converter/protobuf/ProtobufJsonFormatHttpMessageConverter.java:90: warning - Tag @link: reference not found: JsonFormat.Parser /spring-framework/spring-web/src/main/java/org/springframework/http/converter/protobuf/ProtobufJsonFormatHttpMessageConverter.java:90: warning - Tag @link: reference not found: JsonFormat.Printer /spring-framework/spring-context/src/main/java/org/springframework/context/support/ResourceBundleMessageSource.java:79: warning - Tag @link: reference not found: ResourceBundle.Control /spring-framework/spring-context/src/main/java/org/springframework/context/support/ResourceBundleMessageSource.java:283: warning - Tag @link: reference not found: ResourceBundle.Control /spring-framework/spring-context/src/main/java/org/springframework/context/support/ResourceBundleMessageSource.java:305: warning - Tag @link: reference not found: ResourceBundle.Control /spring-framework/spring-web/src/main/java/org/springframework/http/client/InterceptingClientHttpRequestFactory.java:34: warning - Tag @link: reference not found: ClientHttpRequestInterceptors /spring-framework/spring-web/src/main/java/org/springframework/http/codec/xml/XmlEventDecoder.java:79: warning - Tag @link: reference not found: XMLEvents /spring-framework/spring-jdbc/src/main/java/org/springframework/jdbc/support/rowset/ResultSetWrappingSqlRowSet.java:64: warning - Tag @link: reference not found: SQLExceptions /spring-framework/spring-jdbc/src/main/java/org/springframework/jdbc/support/rowset/ResultSetWrappingSqlRowSetMetaData.java:37: warning - Tag @link: reference not found: SQLExceptions /spring-framework/spring-test/src/main/java/org/springframework/test/web/reactive/server/WebTestClient.java:369: warning - Tag @link: reference not found: WebClient.Builder /spring-framework/spring-core/src/main/java/org/springframework/util/function/SingletonSupplier.java:37: warning - Tag @link: reference not found: java.util.function Supplier /spring-framework/spring-web/src/main/java/org/springframework/web/client/ExtractingResponseErrorHandler.java:57: warning - Tag @link: reference not found: HttpMessageConverters /spring-framework/spring-web/src/main/java/org/springframework/web/server/handler/FilteringWebHandler.java:35: warning - Tag @link: reference not found: WebFilters /spring-framework/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/HandlerExceptionResolverComposite.java:35: warning - Tag @link: reference not found: HandlerExceptionResolvers /spring-framework/spring-webflux/src/main/java/org/springframework/web/reactive/config/WebFluxConfigurer.java:102: warning - Tag @link: reference not found: Formatters /spring-framework/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurer.java:88: warning - Tag @link: reference not found: Formatters /spring-framework/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurer.java:88: warning - Tag @link: reference not found: Formatters /spring-framework/spring-web/src/main/java/org/springframework/http/codec/xml/XmlEventDecoder.java:79: warning - Tag @link: reference not found: XMLEvents 100 warnings  BUILD SUCCESSFUL in 1m 32s ```  ## Deliverables  1. Fix broken links in JavaDoc 2. Address remaining warnings if possible    ---  **Affects:** 5.0.8, 5.1 RC1","closed","type: documentation,","spring-projects-issues","2018-08-13T09:45:27Z","2018-08-17T09:42:44Z"
"","21709","Generate ""Use"" pages in aggregated Spring API documentation (Javadoc) [SPR-17173]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-17173](https://jira.spring.io/browse/SPR-17173?redirect=false)** and commented  #19988 introduced support for JavaDoc _Use_ pages for JavaDoc generated per module in the Spring Framework. That JavaDoc is published via individual JARs (e.g., to Maven Central).  This issue picks up where #19988 left off by introducing support for JavaDoc _Use_ pages for the aggregated API documentation published to https://docs.spring.io/spring-framework/docs/.  ---  **Affects:** 5.0.8  **Issue Links:** - #19988 Add ""use"" in Spring API documentation (Javadoc)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e306d3e83a740eb5c84a5d0faac90a63c65aa09c, https://github.com/spring-projects/spring-framework/commit/13c090b41d45d5c3e0e278ad44d784f5a5cdc7aa","closed","type: documentation,","spring-projects-issues","2018-08-13T09:41:57Z","2019-01-11T13:40:04Z"
"","21544","Relax explicit TestContextBootstrapper resolution [SPR-17006]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-17006](https://jira.spring.io/browse/SPR-17006?redirect=false)** and commented  ## Status Quo  The resolution process for explicit `TestContextBootstrapper` registration via `@BootstrapWith` currently throws an `IllegalStateException` if more than one declaration of `@BootstrapWith` is detected.  As mentioned in [Moduliths Issue #5](https://github.com/olivergierke/moduliths/issues/5), the resolution can be relaxed by checking the concrete types registered via `@BootstrapWith`.  ## Proposals  1. If multiple `@BootstrapWith` declarations are detected but each register the exact same type of boostrapper, no exception should occur. 2. If multiple `@BootstrapWith` declarations are detected and all types registered exist within the same class hierarchy, no exception should occur, and the most specific type should be used. 3. Otherwise, throw an `IllegalStateException`. 4. If `@BootstrapWith` is declared locally, _directly_ on a test class, that declaration should _override_ any such declarations that are _meta-present_.  ## Deliverables  1. [x] Proposal #1 already works. 2. [ ] Consider implementing proposal #2. 3. [x] Implement proposal #4 (directly present annotation overrides meta-present annotations). 4. [x] Ensure that an exception is still thrown otherwise.  ---  **Affects:** 4.3.10  **Reference URL:** https://github.com/olivergierke/moduliths/issues/5  **Issue Links:** - #17203 Explicit failure if multiple `@BootstrapWith` annotations are used on the same test","closed","type: enhancement,","spring-projects-issues","2018-07-04T11:23:45Z","2019-01-13T04:37:01Z"
"","21542","Configure Eclipse test source sets in Gradle build [SPR-17004]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-17004](https://jira.spring.io/browse/SPR-17004?redirect=false)** and commented  ## Overview  Since Eclipse Photon supports separation of test source sets in the classpath, we should configure that within the Gradle build.  ## Workaround  The following workaround has been proposed by [howlger](https://github.com/howlger) until Gradle and Buildship properly support the new feature in Eclipse.  ```groovy apply plugin: 'eclipse' eclipse.classpath.file.whenMerged {  	// separate output folders required to set the 'test' attribute 	entries.find { it.path == 'src/main/java' }.output = 'bin/main' 	def testSrc = entries.find { it.path == 'src/test/java' } 	testSrc.output = 'bin/test' 	testSrc.entryAttributes['test'] = 'true'  	// libraries visible for test sources only? 	entries.forEach { entry -> 		def entryIn = { it.find { file(entry.path).equals(it) } } 		if (entry.kind == 'lib') { 			entry.entryAttributes['test'] = 				entryIn(configurations.testRuntimeClasspath) && 				!entryIn(configurations.runtimeClasspath) 		} 	} } ```  ## Related Issues  - [Gradle Issue](https://github.com/gradle/gradle/issues/4802#issuecomment-396165166) - [Buildship Issue](https://github.com/eclipse/buildship/issues/689)  ## Deliverables  - Configure test source sets in the Eclipse classpath. - Update wiki.    --- No further details from [SPR-17004](https://jira.spring.io/browse/SPR-17004?redirect=false)","open","type: task,","spring-projects-issues","2018-07-04T09:56:19Z","2018-07-27T12:39:20Z"
"","21213","Use Gradle 4.6's built-in support for the JUnit Platform [SPR-16672]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-16672](https://jira.spring.io/browse/SPR-16672?redirect=false)** and commented  Once we've upgraded to Gradle 4.6 in #21020, we should then switch to built-in support for the JUnit Platform in the standard Gradle `test` task within the `spring-test` project.  ---  **Issue Links:** - #21020 Upgrade to Gradle 4.8(.1) (_**""depends on""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/56774baa2a0a15711f3895bc9d5082b1e7351dab","closed","type: task,","spring-projects-issues","2018-03-30T09:58:48Z","2019-01-11T15:04:49Z"
"","21194","Cannot autowire individual constructor argument in @Nested test class [SPR-16653]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-16653](https://jira.spring.io/browse/SPR-16653?redirect=false)** and commented  ## Overview  Due to a bug in `javac` in JDK versions prior to JDK 9, it is currently impossible to use `@Autowired`, `@Qualifier`, and `@Value` on individual constructor arguments if the constructor is in a JUnit Jupiter `@Nested` test class (i.e., an _inner_ class) and the code was compiled using JDK < 9.  See #21193 and [JUnit Jupiter issue #1345](https://github.com/junit-team/junit5/issues/1345) for further details.  ## Deliverables  - Ensure that `@Autowired`, `@Qualifier`, and `@Value` can be used on individual constructor arguments in `@Nested` test classes.  ---  **Affects:** 5.0 GA  **Issue Links:** - #21193 Annotation lookup on parameter in inner class constructor fails when using javac from JDK versions prior to 9 (_**""depends on""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9244090ba04011902568aba4b854668312c025e1","closed","type: bug,","spring-projects-issues","2018-03-28T16:13:07Z","2019-01-11T15:07:28Z"
"","21193","Annotation lookup on parameter in inner class constructor fails when using javac from JDK versions prior to 9 [SPR-16652]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-16652](https://jira.spring.io/browse/SPR-16652?redirect=false)** and commented  ## Overview  An [issue in JUnit Jupiter](https://github.com/junit-team/junit5/issues/1345) has brought it to my attention that there is a bug in `javac` in JDK versions prior to JDK 9. The bug was fixed in JDK 9 (see linked JDK bug issues below).  #### JDK Bugs  - https://bugs.openjdk.java.net/browse/JDK-8025806 - https://bugs.openjdk.java.net/browse/JDK-8024694  For example, if an _inner class_ is compiled using `javac` on JDK 8 and its constructor has parameters that are annotated, then a lookup for such annotations via `java.lang.reflect.Parameter` might fail with an exception similar to the following (if the constructor declares only one argument).  ``` Caused by: java.lang.ArrayIndexOutOfBoundsException: 1 	at java.lang.reflect.Parameter.getDeclaredAnnotations(Parameter.java:305) 	at java.lang.reflect.Parameter.declaredAnnotations(Parameter.java:342) 	at java.lang.reflect.Parameter.getAnnotation(Parameter.java:287) 	at java.lang.reflect.AnnotatedElement.isAnnotationPresent(AnnotatedElement.java:258) ```  If the constructor declares multiple arguments, looking up an annotation on a parameter will actually search for the annotation on the parameter to its left in the constructor signature.  The following is a quote from one of the JDK bugs explaining the root cause.  > Root cause is javac generates RuntimeVisibleParameterAnnotations without an annotation slot for the synthetic/mandated parameters.  ## Workaround  For JUnit Jupiter I have come up with the following workaround for finding the `AnnotatedElement` on which annotations should be searched.  ```java private AnnotatedElement getAnnotatedElement() { 	Executable executable = getDeclaringExecutable();  	// Take into account a bug in javac in JDK 8: 	if (executable instanceof Constructor // 			&& isInnerClass(executable.getDeclaringClass()) // 			&& (executable.getParameters().length == executable.getParameterAnnotations().length + 1)) { 		return executable.getParameters()[this.index - 1]; 	}  	return this.parameter; } ```  Note that the above code snippet comes from the implementation of `ParameterContext` in JUnit Jupiter which is somewhat analogous to Spring's `MethodParameter`.  Also, please keep in mind that the `Parameter` returned by the above method could literally be the `Parameter` for the preceding constructor parameter... except that it _sees_ the annotations from the subsequent parameter. Thus, it should only be used to look up annotations: it should not be used to retrieve the parameter's name, type, etc.  ## Deliverables  - Revise annotation lookup methods in `MethodParameter` so that annotations are properly discovered on parameters in constructors for inner classes compiled using JDK < 9.  ---  **Affects:** 4.3.14, 5.0.4  **Issue Links:** - #21194 Cannot autowire individual constructor argument in `@Nested` test class (_**""is depended on by""**_) - #21275 Generic constructor argument (e.g. ObjectProvider) fails to resolve for inner class  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9244090ba04011902568aba4b854668312c025e1, https://github.com/spring-projects/spring-framework/commit/5f6b04251e1643d7ba22fcff708fcf196a36dcc6, https://github.com/spring-projects/spring-framework/commit/4b9e3a9211b9c81148b2c2ebd54091a1fa037483, https://github.com/spring-projects/spring-framework/commit/53d01392d70daef1d198e6563fd8f96d0d0166a0  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","in: core,","spring-projects-issues","2018-03-28T15:34:57Z","2019-01-13T04:48:07Z"
"","21818","@within not working Spring AOP [SPR-17285]","**[sahil-ag](https://jira.spring.io/secure/ViewProfile.jspa?name=sahil-ag1)** opened **[SPR-17285](https://jira.spring.io/browse/SPR-17285?redirect=false)** and commented  `@within` point-cut doesn't seem to be working when we extend a class and annotate the extended class. This also doesn't seem to take into account the `@inherited` annotation  Sample project: https://github.com/sahil-ag/Spring-AOP-Sample  Project works when we use `@target` but should also be working for `@within`   --- No further details from [SPR-17285](https://jira.spring.io/browse/SPR-17285?redirect=false)","closed","in: core,","spring-projects-issues","2018-09-18T16:20:51Z","2020-02-19T09:55:02Z"
"","21665","Cannot mock @Service annotated Kotlin class with member extension function that has generics [SPR-17128]","**[s1monw1](https://jira.spring.io/secure/ViewProfile.jspa?name=s1monw1)** opened **[SPR-17128](https://jira.spring.io/browse/SPR-17128?redirect=false)** and commented  I was trying to mock a non-final, non-private Kotlin class with a simple `Mockito.mock()` call and got the following exception. Turns out, the problem is an embedded member extension function in combination with Spring's `Service` annotation. See below for an example.  ``` org.mockito.exceptions.base.MockitoException:  Mockito cannot mock this class: class XYService   Mockito can only mock non-private & non-final classes. If you're not sure why you're getting this error, please report to the mailing list.  Java : 1.8 JVM vendor name : Oracle Corporation JVM vendor version : 25.181-b13 JVM name : Java HotSpot(TM) 64-Bit Server VM JVM version : 1.8.0_181-b13 JVM info : mixed mode OS name : Mac OS X OS version : 10.13.6  Underlying exception : java.lang.IllegalArgumentException: object is not an instance of declaring class  at XYTest.mockTest(AnotherServiceTests.kt:45)  at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)  at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)  at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)  at java.lang.reflect.Method.invoke(Method.java:498)  at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:436)  at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:115)  at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$6(TestMethodTestDescriptor.java:170)  at org.junit.jupiter.engine.execution.ThrowableCollector.execute(ThrowableCollector.java:40)  at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:166)  at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:113)  at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:58)  at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor$NodeExecutor.lambda$executeRecursively$3(HierarchicalTestExecutor.java:112)  at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)  at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor$NodeExecutor.executeRecursively(HierarchicalTestExecutor.java:108)  at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor$NodeExecutor.execute(HierarchicalTestExecutor.java:79)  at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor$NodeExecutor.lambda$executeRecursively$2(HierarchicalTestExecutor.java:120)  at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)  at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)  at java.util.Iterator.forEachRemaining(Iterator.java:116)  at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)  at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)  at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)  at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)  at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)  at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)  at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)  at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor$NodeExecutor.lambda$executeRecursively$3(HierarchicalTestExecutor.java:120)  at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)  at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor$NodeExecutor.executeRecursively(HierarchicalTestExecutor.java:108)  at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor$NodeExecutor.execute(HierarchicalTestExecutor.java:79)  at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor$NodeExecutor.lambda$executeRecursively$2(HierarchicalTestExecutor.java:120)  at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)  at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)  at java.util.Iterator.forEachRemaining(Iterator.java:116)  at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)  at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)  at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)  at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)  at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)  at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)  at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)  at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor$NodeExecutor.lambda$executeRecursively$3(HierarchicalTestExecutor.java:120)  at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)  at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor$NodeExecutor.executeRecursively(HierarchicalTestExecutor.java:108)  at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor$NodeExecutor.execute(HierarchicalTestExecutor.java:79)  at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:55)  at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:43)  at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:170)  at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:154)  at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:90)  at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:74)  at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)  at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)  at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) Caused by: java.lang.IllegalArgumentException: object is not an instance of declaring class  at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)  at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)  at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)  at java.lang.reflect.Method.invoke(Method.java:498)  at net.bytebuddy.description.type.TypeDescription$Generic$AnnotationReader$ForTypeArgument.resolve(TypeDescription.java:3210)  at net.bytebuddy.description.type.TypeDescription$Generic$AnnotationReader$Delegator$Chained.resolve(TypeDescription.java:2995)  at net.bytebuddy.description.type.TypeDescription$Generic$AnnotationReader$ForTypeArgument.resolve(TypeDescription.java:3183)  at net.bytebuddy.description.type.TypeDescription$Generic$AnnotationReader$Delegator.asList(TypeDescription.java:2949)  at net.bytebuddy.description.type.TypeDescription$Generic$OfWildcardType$ForLoadedType.getDeclaredAnnotations(TypeDescription.java:4164)  at net.bytebuddy.description.type.TypeDescription$Generic$OfWildcardType$Latent.getDeclaredAnnotations(TypeDescription.java:4319)  at net.bytebuddy.description.type.TypeDescription$Generic$OfWildcardType$Latent.getDeclaredAnnotations(TypeDescription.java:4319)  at net.bytebuddy.implementation.attribute.AnnotationAppender$ForTypeAnnotations.apply(AnnotationAppender.java:639)  at net.bytebuddy.implementation.attribute.AnnotationAppender$ForTypeAnnotations.onWildcard(AnnotationAppender.java:582)  at net.bytebuddy.implementation.attribute.AnnotationAppender$ForTypeAnnotations.onWildcard(AnnotationAppender.java:333)  at net.bytebuddy.description.type.TypeDescription$Generic$OfWildcardType.accept(TypeDescription.java:4072)  at net.bytebuddy.implementation.attribute.AnnotationAppender$ForTypeAnnotations.onParameterizedType(AnnotationAppender.java:601)  at net.bytebuddy.implementation.attribute.AnnotationAppender$ForTypeAnnotations.onParameterizedType(AnnotationAppender.java:333)  at net.bytebuddy.description.type.TypeDescription$Generic$OfParameterizedType.accept(TypeDescription.java:4429)  at net.bytebuddy.implementation.attribute.MethodAttributeAppender$ForInstrumentedMethod.apply(MethodAttributeAppender.java:183)  at net.bytebuddy.implementation.attribute.MethodAttributeAppender$Compound.apply(MethodAttributeAppender.java:425)  at net.bytebuddy.dynamic.scaffold.TypeWriter$MethodPool$Record$ForDefinedMethod$WithBody.applyAttributes(TypeWriter.java:615)  at net.bytebuddy.dynamic.scaffold.TypeWriter$MethodPool$Record$ForDefinedMethod$WithBody.applyBody(TypeWriter.java:607)  at net.bytebuddy.dynamic.scaffold.TypeWriter$MethodPool$Record$ForDefinedMethod.apply(TypeWriter.java:526)  at net.bytebuddy.dynamic.scaffold.TypeWriter$Default$ForCreation.create(TypeWriter.java:4170)  at net.bytebuddy.dynamic.scaffold.TypeWriter$Default.make(TypeWriter.java:1633)  at net.bytebuddy.dynamic.scaffold.subclass.SubclassDynamicTypeBuilder.make(SubclassDynamicTypeBuilder.java:174)  at net.bytebuddy.dynamic.scaffold.subclass.SubclassDynamicTypeBuilder.make(SubclassDynamicTypeBuilder.java:155)  at net.bytebuddy.dynamic.DynamicType$Builder$AbstractBase.make(DynamicType.java:2639)  at net.bytebuddy.dynamic.DynamicType$Builder$AbstractBase$Delegator.make(DynamicType.java:2741)  at org.mockito.internal.creation.bytebuddy.SubclassBytecodeGenerator.mockClass(SubclassBytecodeGenerator.java:120)  at org.mockito.internal.creation.bytebuddy.TypeCachingBytecodeGenerator$1.call(TypeCachingBytecodeGenerator.java:37)  at org.mockito.internal.creation.bytebuddy.TypeCachingBytecodeGenerator$1.call(TypeCachingBytecodeGenerator.java:34)  at net.bytebuddy.TypeCache.findOrInsert(TypeCache.java:138)  at net.bytebuddy.TypeCache$WithInlineExpunction.findOrInsert(TypeCache.java:346)  at net.bytebuddy.TypeCache.findOrInsert(TypeCache.java:161)  at net.bytebuddy.TypeCache$WithInlineExpunction.findOrInsert(TypeCache.java:355)  at org.mockito.internal.creation.bytebuddy.TypeCachingBytecodeGenerator.mockClass(TypeCachingBytecodeGenerator.java:32)  at org.mockito.internal.creation.bytebuddy.SubclassByteBuddyMockMaker.createMockType(SubclassByteBuddyMockMaker.java:71)  at org.mockito.internal.creation.bytebuddy.SubclassByteBuddyMockMaker.createMock(SubclassByteBuddyMockMaker.java:42)  at org.mockito.internal.creation.bytebuddy.ByteBuddyMockMaker.createMock(ByteBuddyMockMaker.java:25)  at org.mockito.internal.util.MockUtil.createMock(MockUtil.java:35)  at org.mockito.internal.MockitoCore.mock(MockitoCore.java:65)  at org.mockito.Mockito.mock(Mockito.java:1855)  at org.mockito.Mockito.mock(Mockito.java:1768)  ... 55 more ```  Reproduce it with this simple Test:  ```  @Service  class TestClass {  fun  List.x() = ""x""  }   @Test  fun mockTest() {  Mockito.mock(TestClass::class.java)  } ```  Two ways to make it work: 1) Remove `@Service` and make the class `open` or 2) Remove the generics from the member extension method, e.g. `fun String.x = ""x""`  Thanks in advance.  kotlin: '1.2.51' springBoot: '2.0.3.RELEASE'   ---  **Affects:** 5.0.7  1 votes, 4 watchers","open","in: kotlin,","spring-projects-issues","2018-08-06T13:06:35Z","2022-01-19T11:03:06Z"
"","21756","getMappingForMethod failed when implement a interface method(with @RequestMapping) in super class [SPR-17223]","**[s-mop](https://jira.spring.io/secure/ViewProfile.jspa?name=s-mop)** opened **[SPR-17223](https://jira.spring.io/browse/SPR-17223?redirect=false)** and commented  Here is the demo codes:  ```java @RequestMapping(value = ""order/customer"") @RestController public interface CunstomerOrderClient {         @PostMapping(""rating"")     String rating(); } ```  ```java public class AbstractOrderService {         public String rating() {         return ""rated"";     } } ```  ```java @Service public class CustomerOrderService extends AbstractOrderService implements CunstomerOrderClient {     } ```  ""order/customer/rating"" dosnt registered as I expected   I tried to find reason and get these codes in spring-webmvc:      org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping.getMappingForMethod(Method, Class)  ```java protected RequestMappingInfo getMappingForMethod(Method method, Class handlerType) {     RequestMappingInfo info = createRequestMappingInfo(method);      if (info != null) {          RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType);          if (typeInfo != null) { info = typeInfo.combine(info); }      }      return info;  } ```  and    org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping.createRequestMappingInfo(AnnotatedElement)  ```java private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element) {      RequestMapping requestMapping = AnnotatedElementUtils.findMergedAnnotation(element, RequestMapping.class);      RequestCondition condition = (element instanceof Class ? getCustomTypeCondition((Class) element) : getCustomMethodCondition((Method) element));     return (requestMapping != null ? createRequestMappingInfo(requestMapping, condition) : null);  } ```  These codes seems like try to find `@ReqeuestMapping` in super class or interface of witch i defined my 'ranking' method     Of course they can't find `@ReqeuestMapping` because the 'ranking' method is defined in AbstractOrderService, and AbstractOrderService is not implements CunstomerOrderClient.  ---  **Affects:** 5.0.5  **Issue Links:** - #15682 Enable REST controller method parameter annotations on an interface - #22028 AOP support for SPR-17223 & #1950  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1950","closed","type: enhancement,","spring-projects-issues","2018-08-29T06:00:45Z","2021-12-03T11:16:27Z"
"","21210","Unable to bind a null value for UUID column with PostgreSQL [SPR-16669]","**[Rémi Aubel](https://jira.spring.io/secure/ViewProfile.jspa?name=r%C3%A9mi)** opened **[SPR-16669](https://jira.spring.io/browse/SPR-16669?redirect=false)** and commented  PostgreSQL database defines the type UUID (this type does not exist in `java.sql.Types`).  I want to use this kind of PreparedStatement:  ``` SELECT ... WHERE :VAL IS NOT NULL AND :VAL =  ```  And I want to bind a null value for `VAL`. In this specific case, PostgreSQL JDBC driver requires the data type to be specified. And since the UUID data type does not exist in `java.sql.Types`, we must specify the type name as well, by calling `PreparedStatement.setNull(\_, java.sql.Types.OTHER, ""uuid"")`. With plain old java (`Connection` and `PreparedStatement`), this works fine.  Using `NamedParameterJdbcTemplate` (and providing the ""data type"" and ""data type name"" in a `MapSqlParameterSource`), I'm not able to make it work. Under the hood, `StatementCreatorUtils.setNull(\_, \_, type, typeName)` delegates to `PreparedStatement.setNull(\_, type)` (with no type name) when type is `Types.OTHER`.  Shouldn't it call `PreparedStatement.setNull(_, type, typeName)` when `typeName` is provided (non null) instead?  ---  **Affects:** 4.3.14, 5.0.4  **Issue Links:** - #13215 Can't insert into nvarchar2 using SimpleJdbcInsert whereas it works with SimpleJdbcTemplate  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9a722b4558ca7985fb54a06ff76e3934abe898cb, https://github.com/spring-projects/spring-framework/commit/5629fa2c9f94ed43aedfd87181164fcbc154fffc  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","type: regression,","spring-projects-issues","2018-03-29T19:30:12Z","2019-01-11T15:06:29Z"
"","21887","MockAsyncContext not found. Did request wrapper not delegate startAsync? [SPR-17353]","**[Réda Housni Alaoui](https://jira.spring.io/secure/ViewProfile.jspa?name=reda-alaoui)** opened **[SPR-17353](https://jira.spring.io/browse/SPR-17353?redirect=false)** and commented  I am using Spring Security 3.2.4. I am migrating from Spring framework 5.0.1 to 5.1.0.  My old test:  ```java Map authRequest = new HashMap<>(); authRequest.put(""login"", ""tom""); authRequest.put(""password"", ""titi"");  MockHttpServletResponse response =     mockMvc()         .perform(             post(""/api/authentication/"")                 .contentType(MediaType.APPLICATION_JSON)                 .content(objectMapper.writeValueAsBytes(authRequest)))         .andExpect(status().isOk())         .andReturn()         .getResponse();  Cookie authCookie = response.getCookie(AUTH_TOKEN_KEY); assertThat(authCookie).isNotNull(); assertThat(authCookie.getValue()).isNotNull();  response =     mockMvc()         .perform(get(""/fake/hello-world"").cookie(authCookie))         .andExpect(status().isOk())         .andReturn()         .getResponse();  assertThat(         Stream.of(response.getCookies())             .filter(cookie -> AUTH_TOKEN_KEY.equals(cookie.getName())))     .hasSize(1);  ```  Fails with:  ```java java.lang.IllegalArgumentException: MockAsyncContext not found. Did request wrapper not delegate startAsync?java.lang.IllegalArgumentException: MockAsyncContext not found. Did request wrapper not delegate startAsync?  at org.springframework.util.Assert.notNull(Assert.java:198) at org.springframework.test.web.servlet.TestDispatcherServlet.service(TestDispatcherServlet.java:77) at javax.servlet.http.HttpServlet.service(HttpServlet.java:770) at org.springframework.mock.web.MockFilterChain$ServletFilterProxy.doFilter(MockFilterChain.java:166) at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:118) at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:84) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:113) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:103) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:113) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:154) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:45) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:199) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:110) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:110) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:57) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:87) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:50) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:96) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:192) at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:160) at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133) at org.springframework.test.web.servlet.MockMvc.perform(MockMvc.java:182) at com.cos.framework.http.security.security.AuthTokenSecurityContextHandlerTest.testCookie(AuthTokenSecurityContextHandlerTest.java:97) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.base/java.lang.reflect.Method.invoke(Method.java:566) at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) at org.springframework.test.context.junit4.statements.RunBeforeTestExecutionCallbacks.evaluate(RunBeforeTestExecutionCallbacks.java:74) at org.springframework.test.context.junit4.statements.RunAfterTestExecutionCallbacks.evaluate(RunAfterTestExecutionCallbacks.java:84) at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26) at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:75) at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86) at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84) at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:251) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70) at org.junit.runners.ParentRunner.run(ParentRunner.java:363) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190) at org.junit.runner.JUnitCore.run(JUnitCore.java:137) at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)  ```  Maybe **TestDispatcherServlet** is more restrictive?  Anyway my application is not meant to support async. But **MockHttpServletRequestBuilder** creates async supported requests every time:  ```java  /**  * Build a {@link MockHttpServletRequest}.  */ @Override public final MockHttpServletRequest buildRequest(ServletContext servletContext) {    MockHttpServletRequest request = createServletRequest(servletContext);     request.setAsyncSupported(true);    request.setMethod(this.method);     String requestUri = this.url.getRawPath();    request.setRequestURI(requestUri); ```  Without setting an async context.  ---  **Affects:** 5.1 GA  **Issue Links:** - #21236 ClassCastException in TestDispatcherServlet  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/29ff8a8d121af3223b33236215068762ea74d46f, https://github.com/spring-projects/spring-framework/commit/fc2f3ecf44ae3e43ebbdcbce4b446a07102de086, https://github.com/spring-projects/spring-framework/commit/f61f6f2ef002c2fec706a4c3e716f9f99c05bda7  **Backported to:** [5.0.10](https://github.com/spring-projects/spring-framework/milestone/191?closed=1), [4.3.20](https://github.com/spring-projects/spring-framework/milestone/169?closed=1)","closed","type: regression,","spring-projects-issues","2018-10-08T14:24:49Z","2019-01-11T14:13:50Z"
"","21146","Java 9: spring-jcl org.apache.commons.logging package conflicts with commons-logging [SPR-16605]","**[Réda Housni Alaoui](https://jira.spring.io/secure/ViewProfile.jspa?name=reda-alaoui)** opened **[SPR-16605](https://jira.spring.io/browse/SPR-16605?redirect=false)** and commented  ``` Error:java: module maven.artifact reads package org.apache.commons.logging from both commons.logging and spring.jcl ```    ---  **Affects:** 5.0.4","closed","status: declined,","spring-projects-issues","2018-03-16T15:53:05Z","2019-01-12T16:21:40Z"
"","21789","UriComponentsBuilder.uriComponents doesn't properly clone unmodifiable queryParams [SPR-17256]","**[Ruslan Stelmachenko](https://jira.spring.io/secure/ViewProfile.jspa?name=djxak)** opened **[SPR-17256](https://jira.spring.io/browse/SPR-17256?redirect=false)** and commented  When `UriComponentsBuilder.uriComponents` clones `queryParams` from given `UriComponents`, it leaves them as **unmodifiable** `MultiValueMap`.  This prevents to futher adding query params with the same name into the builder.  For example:  ```java UriComponentsBuilder 		.fromUriString(""http://localhost:8081"") 		.uriComponents(UriComponentsBuilder.fromUriString(""/{path}?sort={sort}"").build()) 		.queryParam(""sort"", ""another_value"") 		.build(); ```  The `.queryParam(""sort"", ""another_value"")` line throws an exception on attempt to add another value to unmodifiable `MultiValueMap`.  While this code works:  ```java UriComponentsBuilder 		.fromUriString(""http://localhost:8081/{path}?sort={sort}"") 		.queryParam(""sort"", ""another_value"") 		.build(); ```  The interested part of code to investigate this problem is:  `org.springframework.web.util.HierarchicalUriComponents#copyToUriComponentsBuilder` Here is line `builder.queryParams(getQueryParams())` which sets the builder's `queryParams` to unmodifiable `MultiValueMap`.  I think we can clone unmodifiable queryParams here to be modifiable, or maybe better inside `org.springframework.web.util.UriComponentsBuilder#queryParams` methods to make this logic independent of `UriComponents` implementation.  ---  To make the intention more clear: this pattern of use `UriComponentsBuilder` is actually used in `org.springframework.web.util.DefaultUriBuilderFactory.DefaultUriBuilder#initUriComponentsBuilder` where I first faced this problem.  It allows to set `baseUrl` and then `uriString` to concatenate them. So this code also throws an exception:  ```java new DefaultUriBuilderFactory(""http://localhost:8081"") 		.uriString(""/{path}?sort={sort}"") 		.queryParam(""sort"", ""another_value"") 		.build(params); ```  ---  **Affects:** 5.0.8, 5.1 RC2  **Issue Links:** - #17777 ConcurrentModificationException when calling SimpMessagingTemplate.convertAndSend  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/28208310dc18a4b7e1ee42003d7f9766bdfad922, https://github.com/spring-projects/spring-framework/commit/1d58fac54d6d4d67e4921596df9beb50fe94b9d1, https://github.com/spring-projects/spring-framework/commit/c06b9525ac780f4020d9d78059633eba9b887de6  **Backported to:** [5.0.10](https://github.com/spring-projects/spring-framework/milestone/191?closed=1)","closed","type: bug,","spring-projects-issues","2018-09-08T05:04:12Z","2019-07-11T15:13:05Z"
"","21409","Facing java.lang.UnsupportedOperationException on websphere 8.5.5.11 [SPR-16870]","**[Rushikesh Sawant](https://jira.spring.io/secure/ViewProfile.jspa?name=rushisawant)** opened **[SPR-16870](https://jira.spring.io/browse/SPR-16870?redirect=false)** and commented  Using spring 4.3.1 / hibernate 4.2.7 & websphere 8.5.5.11 Also we have used WebSphereExtendedJtaPlatform instead of WebSphereExtendedJTATransactionLookup. We recently migrated to websphere from weblogic application server.I see that the commit happens, but this exception is thrown after each commit  [5/21/18 14:22:01:131 EDT] 00000161 RegisteredSyn E WTRN0074E: Exception caught from before_completion synchronization operation: java.lang.UnsupportedOperationException at org.hibernate.service.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter.setRollbackOnly(WebSphereExtendedJtaPlatform.java:139) at org.hibernate.engine.transaction.internal.jta.CMTTransaction.markRollbackOnly(CMTTransaction.java:131) at org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl.setRollbackOnly(TransactionCoordinatorImpl.java:306) at org.hibernate.engine.transaction.synchronization.internal.SynchronizationCallbackCoordinatorImpl.setRollbackOnly(SynchronizationCallbackCoordinatorImpl.java:127) at org.hibernate.engine.transaction.synchronization.internal.SynchronizationCallbackCoordinatorImpl.beforeCompletion(SynchronizationCallbackCoordinatorImpl.java:117) at org.hibernate.engine.transaction.synchronization.internal.RegisteredSynchronization.beforeCompletion(RegisteredSynchronization.java:53) at org.hibernate.service.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter$1.invoke(WebSphereExtendedJtaPlatform.java:176) at com.sun.proxy.$Proxy100.beforeCompletion(Unknown Source) at com.ibm.ws.jtaextensions.SynchronizationCallbackWrapper.beforeCompletion(SynchronizationCallbackWrapper.java:66) at com.ibm.tx.jta.impl.RegisteredSyncs.coreDistributeBefore(RegisteredSyncs.java:291) at com.ibm.ws.tx.jta.RegisteredSyncs.distributeBefore(RegisteredSyncs.java:153) at com.ibm.ws.tx.jta.TransactionImpl.prePrepare(TransactionImpl.java:2384) at com.ibm.ws.tx.jta.TransactionImpl.stage1CommitProcessing(TransactionImpl.java:588) at com.ibm.tx.jta.impl.TransactionImpl.processCommit(TransactionImpl.java:1029) at com.ibm.tx.jta.impl.TransactionImpl.commit(TransactionImpl.java:963) at com.ibm.ws.tx.jta.TranManagerImpl.commit(TranManagerImpl.java:439) at com.ibm.tx.jta.impl.TranManagerSet.commit(TranManagerSet.java:191) at com.ibm.ws.uow.UOWManagerImpl.uowCommit(UOWManagerImpl.java:807) at com.ibm.ws.uow.embeddable.EmbeddableUOWManagerImpl.uowEnd(EmbeddableUOWManagerImpl.java:881) at com.ibm.ws.uow.UOWManagerImpl.uowEnd(UOWManagerImpl.java:782) at com.ibm.ws.uow.embeddable.EmbeddableUOWManagerImpl.runUnderNewUOW(EmbeddableUOWManagerImpl.java:818) at com.ibm.ws.uow.embeddable.EmbeddableUOWManagerImpl.runUnderUOW(EmbeddableUOWManagerImpl.java:370) at org.springframework.transaction.jta.WebSphereUowTransactionManager.execute(WebSphereUowTransactionManager.java:290) at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:298) at org.springframework.transaction.aspectj.AbstractTransactionAspect.ajc$around$org_springframework_transaction_aspectj_AbstractTransactionAspect$1$2a73e96c(AbstractTransactionAspect.aj:70)  Can anyone explain on this? If this is issue what would be the solution for this?   --- No further details from [SPR-16870](https://jira.spring.io/browse/SPR-16870?redirect=false)","closed","status: invalid,","spring-projects-issues","2018-05-24T10:11:29Z","2019-01-12T05:18:47Z"
"","21434","AntPathMatcher.extractPathWithinPattern() seems broken returns incorrect result [SPR-16895]","**[Rupesh Soni](https://jira.spring.io/secure/ViewProfile.jspa?name=thetailstartguy)** opened **[SPR-16895](https://jira.spring.io/browse/SPR-16895?redirect=false)** and commented  Checked on 5.0.5 & 5.0.6  extractPathWithinPattern(""/foo/*/{bar}"", ""/foo/drink/abc"")  returns ""**drink/abc**"".  In contrary 4.0.9 returns ""**drink**"", which is the correct.     ---  **Affects:** 5.0.5, 5.0.6  **Issue Links:** - #15146 URI template with wildcards and variable gives invalid PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE request attribute value","closed","in: core,","spring-projects-issues","2018-06-03T16:49:04Z","2019-01-13T20:26:09Z"
"","21832","Misleading description in Autowired javadoc [SPR-17299]","**[rupertw](https://jira.spring.io/secure/ViewProfile.jspa?name=rupertw)** opened **[SPR-17299](https://jira.spring.io/browse/SPR-17299?redirect=false)** and commented  Comments on applying the annotation Autowired to constructor are error,  ``` * Only one constructor (at max) of any given bean class may carry this annotation, * indicating the constructor to autowire when used as a Spring bean. Such a * constructor does not have to be public. ```  we can refer to the javadoc of class AutowiredAnnotationBeanPostProcessor for correct description.  ``` * Only one constructor (at max) of any given bean class may carry this * annotation with the 'required' parameter set to {@code true}, * indicating the constructor to autowire when used as a Spring bean. * If multiple non-required constructors carry the annotation, they * will be considered as candidates for autowiring. The constructor with * the greatest number of dependencies that can be satisfied by matching * beans in the Spring container will be chosen. If none of the candidates * can be satisfied, then a default constructor (if present) will be used. * An annotated constructor does not have to be public. ```    ---  **Affects:** 5.1 GA  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1966  **Backported to:** [5.0.10](https://github.com/spring-projects/spring-framework/milestone/191?closed=1), [4.3.20](https://github.com/spring-projects/spring-framework/milestone/169?closed=1)","closed","in: core,","spring-projects-issues","2018-09-23T17:45:39Z","2018-10-15T07:48:39Z"
"","21334","Use superclass of MessageFormat in MessageSourceSupport so more Formats can be used [SPR-16794]","**[Ruben Dijkstra](https://jira.spring.io/secure/ViewProfile.jspa?name=shredder121)** opened **[SPR-16794](https://jira.spring.io/browse/SPR-16794?redirect=false)** and commented  Optionally, a patch present: https://github.com/spring-projects/spring-framework/compare/master...Shredder121:message-source-support-formats  While looking to see if it was reported already, I stumbled upon #14252, which I believe has been fixed already? At least, I see a way to use customized MessageFormat instances now.  But I spotted we're only using the format function, which means we do not need the MessageFormat type, but can use Format instead.  Best regards,  Ruben  ---  1 votes, 2 watchers","open","in: core,","spring-projects-issues","2018-05-04T10:34:38Z","2021-11-12T12:17:46Z"
"","21875","Disconnected client exception logging should differentiate remote service exceptions too [SPR-17341]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-17341](https://jira.spring.io/browse/SPR-17341?redirect=false)** and commented  Currently HttpWebHandlerAdapter suppresses logging of unhandled exceptions from writing to the response that are associated with a client going away. This is useful with streaming responses and was introduced in #18523. However as is clear from #21790 similar exceptions may also occur during request handling while making calls to a remote service, and arguably logging for those should not be suppressed.  This ticket is to explore the possibility of differentiating between the two and suppressing logging only of the former, but not of the latter kind. One option may be to wrap exceptions from `ServerHttpResponse#writeWith` with something like the Reactor Netty AbortedException and use that to differentiate between server response writing and other socket exception.  ---  **Affects:** 5.0.9  **Issue Links:** - #21790 o.s.h.s.r.ReactorHttpHandlerAdapter is polluting the logs - #18523 WebFlux SSE controller does not detect disconnected client","closed","status: invalid,","spring-projects-issues","2018-10-04T18:56:32Z","2019-03-21T00:34:51Z"
"","21851","Sanity checks for HTTP range requests [SPR-17318]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-17318](https://jira.spring.io/browse/SPR-17318?redirect=false)** and commented  When serving static resources, or as of 5.0 also when a controller returns a `Resource`, if the ""Range"" header is present, one or more subsets of the content may be served instead of the entire content. Some basic validations to the requested ranges should be applied as recommended in [RFC 7233 Section 3.1](https://tools.ietf.org/html/rfc7233#section-3.1):  ``` A server that supports range requests MAY ignore or reject a Range header field that consists of more than two overlapping ranges, or a set of many small ranges that are not listed in ascending order, since both are indications of either a broken client or a deliberate denial-of-service attack. ```    ---  **Affects:** 4.3.20, 5.0.9, 5.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/044772641d12b9281185f6cf50f8485b8747132c, https://github.com/spring-projects/spring-framework/commit/423aa28ed584b4ff6e5bad218c09beef5e91951e, https://github.com/spring-projects/spring-framework/commit/c8e320019ffe7298fc4cbeeb194b2bfd6389b6d9  **Backported to:** [5.0.10](https://github.com/spring-projects/spring-framework/milestone/191?closed=1), [4.3.20](https://github.com/spring-projects/spring-framework/milestone/169?closed=1)","closed","type: enhancement,","spring-projects-issues","2018-10-01T14:31:58Z","2018-10-16T18:38:09Z"
"","21776","Externally managed mode for ReactorResourceFactory [SPR-17243]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-17243](https://jira.spring.io/browse/SPR-17243?redirect=false)** and commented  ReactorResourceFactory has setters for ConnectionProvider and LoopResources that need to be used to make customizations but that doesn't make it clear if those instances should be managed or not. We should probably also add Supplier-based variants for customizations and leave the setters for providing externally managed instances.  ---  **Affects:** 5.1 RC2  **Issue Links:** - #21733 ReactorHttpResources should clear HttpResources in global mode  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d537a1cfb48b628af19d45641be87e6dec2460e8, https://github.com/spring-projects/spring-framework/commit/2163fa94a7f0b8bf5de1398f0a79249f342f497c","closed","type: enhancement,","spring-projects-issues","2018-09-04T13:11:49Z","2019-01-11T14:13:32Z"
"","21774","Add example of WebClient timeout settings [SPR-17241]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-17241](https://jira.spring.io/browse/SPR-17241?redirect=false)** and commented  Based on discussion under https://github.com/reactor/reactor-netty/pull/427#issuecomment-417880114 for Reactor Netty.   ---  **Affects:** 5.0.8  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/92b3f2aee7c742ad55bd2ae657937d2f449de5e1","closed","in: web,","spring-projects-issues","2018-09-04T11:19:02Z","2018-09-21T07:52:16Z"
"","21715","Add JettyResourceFactory [SPR-17179]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-17179](https://jira.spring.io/browse/SPR-17179?redirect=false)** and commented  Currently the default constructor of `JettyClientHttpConnector` creates a new `HttpClient` instance. Arguably this is a little too easy, since unless the connector is re-used across `WebClient` instances, each will be created with its own resources.  We should instead provide help with creating a Spring-managed Jetty `HttpClient` instance that can then be shared among clients, and whose resources could also then be shared with a Jetty server (e.g. with WebFlux in non-blocking mode).  The proposed changes are to remove `SmartLifecycle` from `JettyClientHttpConnector` and create a `JettyHttpClientFactory` instead hat manages an `HttpClient` instance within a Spring `ApplicationContext`. The connector would then accept a `JettyHttpClientFactory` or an `HttpClient` instance.  This would also be consistent with the changes for the `ReactorClientHttpConnector` as part of #21501.        ---  **Affects:** 5.1 RC1  **Issue Links:** - #19658 Jetty HTTP client integration with WebClient - #21501 Make it easier to tidy up the resources used by a WebClient  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0dd9e8ce022d2dce6d612ba52681ac97fdc39d4e, https://github.com/spring-projects/spring-framework/commit/1eb06fcd9093c3aee754bd0084daa2c2229c14c1","closed","type: enhancement,","spring-projects-issues","2018-08-14T13:20:59Z","2019-01-11T13:40:19Z"
"","21682","Exception hierarchy under WebClientResponseException for the WebClient [SPR-17145]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-17145](https://jira.spring.io/browse/SPR-17145?redirect=false)** and commented  Same idea as for #19967 but for the WebClient.  The WebClient does have the `onStatus` transformer methods to customize the exceptions, but there is no need for everyone to re-create the same.  ---  **Affects:** 5.0.8  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a0dfdfcac3bec6ffdf72ef2b02938a82c04f2a98","closed","type: enhancement,","spring-projects-issues","2018-08-08T11:33:10Z","2019-01-11T14:00:45Z"
"","21655","DataBufferUtils#takeUntilByteCount checks one extra buffer but does not release it  [SPR-17118]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-17118](https://jira.spring.io/browse/SPR-17118?redirect=false)** and commented  The current implementation relies on `Flux#takeWhile` to be invoked with one extra buffer beyond the buffer for which the max byte count was reached. However that extra buffer is not released. Arguably it should not even have to wait for for an extra buffer, when it already knows the max byte count was reached.  ---  **Affects:** 5.0.8  **Issue Links:** - #21563 DataBufferUtils#join could leak buffers in case of error from the source - #21527 Add ExchangeFilterFunction that enforces limit on the response size","closed","type: enhancement,","spring-projects-issues","2018-08-02T11:28:44Z","2019-01-11T12:50:39Z"
"","21637","Option to handle failures by setting status to 500 in FrameworkServlet [SPR-17100]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-17100](https://jira.spring.io/browse/SPR-17100?redirect=false)** and commented  As per discussion [under spring-boot#13511](https://github.com/spring-projects/spring-boot/issues/13511#issuecomment-408103039), unhandled exceptions that bubble to the servlet container are then logged by it only to be handled right after via an error dispatch by Boot's error controller mechanism. We should have an option to just set the status to 500, and save the exception to the well known Servlet request attribute, which would avoid the stack trace being logged.   ---  **Affects:** 5.0.8  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/29ce6685cad0f6caf829c49024b1885ab31d62e0","closed","type: enhancement,","spring-projects-issues","2018-07-27T13:01:41Z","2018-08-17T06:55:23Z"
"","21577","Support stricter encoding of URI variables in UriComponents [SPR-17039]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-17039](https://jira.spring.io/browse/SPR-17039?redirect=false)** and commented  Historically `UriComponents` has always encoded only characters that are illegal in a given part of the URI (e.g. ""/"" is illegal in a path segment), and that does not include characters that are legal but have some other reserved meaning (e.g. "";"" in a path segment, or also ""+"" in a query param).  `UriComponents` has also always relied on expanding URI variables first, and then encoding the expanded String, which makes it impossible to apply stricter encoding to URI variable values which is usually what's expected intuitively, because once expanded it's impossible to tell the values apart from the rest of the template. Typically the expectation is that expanded values will have by fully encoded.  While the RestTemplate and WebClient can be configured with a `UriBuilderFactory` that supports different encoding mode strategy, currently there is really no answer when using `UriComponents` directly.  ---  **Affects:** 5.0.7  **Issue Links:** - #21565 HtmlUnitRequestBuilder decodes plus sign in query parameter (_**""is depended on by""**_) - #22161 UriComponentsBuilder.toUriString() is broken - #21399 Spring is inconsistent in the encoding/decoding of URLs (_**""supersedes""**_) - #20750 Encoding of URI Variables on RestTemplate (_**""supersedes""**_) - #21259 UriComponentsBuilder does not encode ""+"" properly (_**""supersedes""**_)  1 votes, 9 watchers","closed","type: enhancement,","spring-projects-issues","2018-07-13T21:27:38Z","2020-10-15T09:54:51Z"
"","21570","Add sections on logging in WebFlux and Spring MVC docs [SPR-17032]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-17032](https://jira.spring.io/browse/SPR-17032?redirect=false)** and commented  Various points need to be explained: * Basic info on what to expect at DEBUG and TRACE. * Single category to control all web logging, #21550. * Fallback logging for http and codec pacakges. * Control over logging sensitive data with sample config, #21567. * Log categories outside the package hierarchy (reactive streams bridge).  ---  **Affects:** 5.0.7  This issue is a sub-task of #21485  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/31024b1f933cd951a67cb543ad51126b44b7da59","closed","type: task,","spring-projects-issues","2018-07-11T15:53:20Z","2019-01-11T12:49:06Z"
"","21567","Provide control over logging of potentially sensitive request details  [SPR-17029]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-17029](https://jira.spring.io/browse/SPR-17029?redirect=false)** and commented  Following the changes for #21437, potentially sensitive data including request params / form data may be logged at DEBUG level, and headers at TRACE level.  The initial approach implemented was to log such data at DEBUG and TRACE level by default along with a loud warning on startup and a flag to disable such logging. However the warning is only useful in the beginning and creates a lot of noise on every startup Ultimately it cannot effectively help avoid potential issues when running in production.  The current thinking is to log at DEBUG and TRACE level still, by default but use slightly different output that shows the data is there but masked, along with a flag to enable showing it, and a toned down log message on startup.  For example on startup:  ``` enableLoggingRequestDetails='false': request parameters and headers will be masked to prevent unsafe logging of potentially sensitive data ```  Then at runtime:  ``` GET ""/myPath.do"", parameters={masked}, headers={masked} ```  ---  **Affects:** 5.0.7  This issue is a sub-task of #21485  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1b1bc7f5b53be7af5b5413fd6a3dfaf1fa07a032","closed","type: task,","spring-projects-issues","2018-07-10T20:31:49Z","2019-01-11T12:49:40Z"
"","21563","DataBufferUtils#join could leak buffers in case of error from the source [SPR-17025]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-17025](https://jira.spring.io/browse/SPR-17025?redirect=false)** and commented  This came up from a discussion about having a client filter to enforce a limit on the content length of the response. Possibly buffering the content received before the limit and having an exception with the buffered content. `DataBufferUtils#join` could be very useful, if inserted after the limit enforcement.  Even beyond such a filter, the join method is used in a lot of decoders, and can leak pooled buffers in case of errors while reading. This could be considered an improvement but I've marked it as a bug only because I don't see any options to work around the issue.  This issue should also look at all the places (like codecs) where we are queuing buffer in queues and clean them accordingly in case of errors.        ---  **Affects:** 5.0.7  **Issue Links:** - #21527 Add ExchangeFilterFunction that enforces limit on the response size - #21592 ClientResponse's body ignored on UnsupportedMediaTypeException - #21801 Proper way to dispose of Response - #21941 Review DataBuffer handling code for proper release in case of error or cancellation - #21322 DataBufferUtils does not release DataBuffer on error cases - #21655 DataBufferUtils#takeUntilByteCount checks one extra buffer but does not release it - #21779 Use doOnDiscard to free internally queued data buffers  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/259b2ca5f4de3fd97ae8a06ab6c5b4b49fb69c99, https://github.com/spring-projects/spring-framework/commit/a00607348c28c864b0bf81cc99cc8a9a9a1ab3fb, https://github.com/spring-projects/spring-framework/commit/196c0adf47868467ec9242daea81ce7e0246a152","closed","type: bug,","spring-projects-issues","2018-07-09T20:43:40Z","2019-01-11T12:49:38Z"
"","21550","Single category for all WebFlux logging [SPR-17012]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-17012](https://jira.spring.io/browse/SPR-17012?redirect=false)** and commented  The following must be on for WebFlux DEBUG logging:  * ""org.springframework.core.codec"" * ""org.springframework.http.codec"" * ""org.springframework.web""  When ""org.springframework.web"" is on, intuitively the expectation is to see all web-related logging, but in WebFlux where codecs add essential logging, it's easy to overlook this or know to enable those extra log categories. Even if you do know, it's rather cumbersome to work with 3 categories where logically it's one thing you want (client or server web logging).  The idea is that each HttpMessageReader or HttpMessageWriter would fall back on a shared secondary logger with a category such as `""org.springframework.web..http.codecs""`, or something similar, as long as it starts with ""org.springframework.web"".  Such a shared logger could be passed as a hint to Encoder and Decoder implementations in spring-core, which is something we already do for a shared log prefix and for suppressing logging sensitive information.  This should give the desired effect of a single root category for web logging. It also provides control, so if you enable all 3 of the above you get normal, class name based logging. Or vice versa it's possible to suppress the fallback category explicitly. We could even detect this at startup and log a message under that shared logger which explains why it's on.  ---  **Affects:** 5.0.7  This issue is a sub-task of #21485  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/31bfc1dc2b7cb75531b691ed5d9ea0da1f2c5d7a, https://github.com/spring-projects/spring-framework/commit/4d6f2df3cbdf956ec22e5dbefe18e79a290b4ea8, https://github.com/spring-projects/spring-framework/commit/fac2e35f967a808b71c6710796af316d65149d04, https://github.com/spring-projects/spring-framework/commit/4bd22eeb13987aff934273a60ebc59cb05229bc4, https://github.com/spring-projects/spring-framework/commit/833aee9b2d6727f80cfd22a8758de9dd2c0043ed","closed","type: task,","spring-projects-issues","2018-07-05T17:41:47Z","2019-01-11T12:49:44Z"
"","21531","Update docs on RestTemplate to indicate it's superceded by WebClient [SPR-16993]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-16993](https://jira.spring.io/browse/SPR-16993?redirect=false)** and commented  The Javadoc of the RestTemplate and the documentation should suggest more explicitly that WebClient supercedes the RestTemplate, that it will not have new features, and may be deprecated at some point in the future.  ---  **Affects:** 5.0.7  **Issue Links:** - #21424 RestTemplate should support streaming download and upload  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/91d17cf62882a436d506694ee840d59a2d751fed, https://github.com/spring-projects/spring-framework/commit/aa656c47b87b75f5bf28f864c28d8a220ac25fbc, https://github.com/spring-projects/spring-framework/commit/5f96d7c46c468f00a56b031e2d37df31ede91d43","closed","type: documentation,","spring-projects-issues","2018-07-02T15:39:58Z","2019-01-11T16:06:12Z"
"","21504","Add correlation id to log messages in WebFlux [SPR-16966]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-16966](https://jira.spring.io/browse/SPR-16966?redirect=false)** and commented  In order to improve logging for WebFlux requests, as part of #21437, e.g. to avoid duplicate information (e.g. request path) being logged multiple times, log messages for a given request need to insert a common log id, so that the messages can be correlated regardless of the thread id.  This can be done be exposing a well-known request attribute via `ServerWebExchange` and a convenience method on `ServerWebExchange` to access it.  ---  **Affects:** 5.0.7  This issue is a sub-task of #21485  **Issue Links:** - #21437 Fine-tune logging for web requests  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bc3cf0eeb8b96a75a7a8a6351665975ed8b5081d, https://github.com/spring-projects/spring-framework/commit/39d58744416cde93dc58f3c9412f4412720afa68, https://github.com/spring-projects/spring-framework/commit/5dc49b16ea21ebac20d124d929f872d5aa060254, https://github.com/spring-projects/spring-framework/commit/fd90b73748112122c57b0346d48d08e3574accd7, https://github.com/spring-projects/spring-framework/commit/82310660fdf1381db25970c751b0c32792590e43, https://github.com/spring-projects/spring-framework/commit/5cdc26770e4a89835c03ac8912b048b1c32760cd","closed","type: task,","spring-projects-issues","2018-06-21T01:08:22Z","2019-01-11T16:10:19Z"
"","21492","Create wiki page on debug/trace logging [SPR-16954]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-16954](https://jira.spring.io/browse/SPR-16954?redirect=false)** and commented  The goal is to describe more formally and to build a shared understanding of good practices around DEBUG and TRACE logging (suggested by [Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)).  ---  **Affects:** 5.0.7  This issue is a sub-task of #21485","closed","type: documentation,","spring-projects-issues","2018-06-18T15:16:58Z","2019-01-11T16:10:45Z"
"","21485","Improve logging for development (DEBUG vs TRACE) [SPR-16946]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-16946](https://jira.spring.io/browse/SPR-16946?redirect=false)** and commented  This started in [Spring Boot #902](https://github.com/spring-projects/spring-boot/issues/902), then #21437, and I'm opening this general ticket to revisit logging for development purposes more broadly, at the container level and any other module.  The general idea is that logging at DEBUG level should be user-friendly and carefully calibrated to be minimal, yet helpful by including the most relevant bits of information that are useful over and over again (vs debugging a specific issue). That means being relatively Spartan at DEBUG level, and showing more at TRACE as two tiers of debugging information.  Often it is difficult to know in isolation if a piece of information is useful, if it is duplicated, if it adds too much noise, or if it reads well. It's only possible to spot the issues and decide what looks best by viewing the overall logging.  I'll append some specific examples of core logging related to web startup, but a general review would probably be needed.  ---  **Affects:** 5.0.7  **Sub-tasks:** - #21437 Fine-tune logging for web requests - #21492 Create wiki page on debug/trace logging - #21504 Add correlation id to log messages in WebFlux - #21550 Single category for all WebFlux logging - #21567 Provide control over logging of potentially sensitive request details - #21570 Add sections on logging in WebFlux and Spring MVC docs  **Issue Links:** - #12428 Change logging level to info in PropertiesLoaderSupport when logging message that resource is not found and ignoreResourceNotFound is true (_**""is duplicated by""**_) - #21437 Fine-tune logging for web requests - #21627 Improve/unify debug logging at BeanDefinitionReader and BeanFactory level","closed","type: enhancement,","spring-projects-issues","2018-06-15T21:36:13Z","2019-01-11T15:41:06Z"
"","21479","ResponseCookie prints incorrect max-age and expires values [SPR-16940]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-16940](https://jira.spring.io/browse/SPR-16940?redirect=false)** and commented  Max-Age uses `Duration.toString()` but should get the seconds instead. Expires uses seconds instead of milliseconds.   ---  **Affects:** 5.0.7  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1857, and commits https://github.com/spring-projects/spring-framework/commit/ebdcc015a49727b34f98aafde7f97dd7f6850fbd, https://github.com/spring-projects/spring-framework/commit/425c311d3cb871a22b21b9a469c6bfe9181dc104","closed","type: bug,","spring-projects-issues","2018-06-14T14:02:36Z","2018-07-26T08:09:30Z"
"","21463","Provide getter to expose the DispatcherServlet instance used in MockMvc [SPR-16924]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-16924](https://jira.spring.io/browse/SPR-16924?redirect=false)** and commented  Originally reported in [Spring Boot #13241](https://github.com/spring-projects/spring-boot/issues/13241) this is for cases where a request handling component such as an annotated controller happens to delegate to the `DispatcherServlet` at runtime, and therefore needs to be injected with it.  The specific use case is a technique that relies on batching multiple requests and responses through the ""multipart/mixed"" format, as in [this Google API](https://developers.google.com/drive/api/v3/batch) for example.   ---  **Affects:** 5.0.6  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/13241  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a31204938ab31435730c8dddddd5e5787ea9e5ce  4 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2018-06-08T17:41:00Z","2018-07-26T08:09:34Z"
"","21437","Fine-tune logging for web requests [SPR-16898]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-16898](https://jira.spring.io/browse/SPR-16898?redirect=false)** and commented  This was originally reported in Spring Boot, ticket [#902](https://github.com/spring-projects/spring-boot/issues/902) but the only way to address it effectively is in the Spring Framework. The below is curated from the original ticket.  **current debug output**  ``` 2014-05-20 09:28:27.058 DEBUG 10695 --- [nio-8080-exec-7] o.s.web.servlet.DispatcherServlet        : DispatcherServlet with name 'dispatcherServlet' processing GET request for [/example] 2014-05-20 09:28:27.058 DEBUG 10695 --- [nio-8080-exec-7] s.w.s.m.m.a.RequestMappingHandlerMapping : Looking up handler method for path /example 2014-05-20 09:28:27.059 DEBUG 10695 --- [nio-8080-exec-7] s.w.s.m.m.a.RequestMappingHandlerMapping : Returning handler method [public java.lang.Object project.app.ApplicationController.example()] 2014-05-20 09:28:27.059 DEBUG 10695 --- [nio-8080-exec-7] o.s.web.servlet.DispatcherServlet        : Last-Modified value for [/example] is: -1 2014-05-20 09:28:27.059 DEBUG 10695 --- [nio-8080-exec-7] o.s.w.s.v.ContentNegcodeotiatingViewResolver : Requested media types are [text/html, application/xhtml+xml, image/webp, application/xml;q=0.9, */*;q=0.8] based on Accept header types and producible media types [*/*]) 2014-05-20 09:28:27.060 DEBUG 10695 --- [nio-8080-exec-7] o.s.w.s.v.ContentNegotiatingViewResolver : Returning [org.springframework.boot.autoconfigure.groovy.template.web.GroovyTemplateView: unnamed; URL [null]] based on requested media type 'text/html' 2014-05-20 09:28:27.060 DEBUG 10695 --- [nio-8080-exec-7] o.s.web.servlet.DispatcherServlet        : Rendering view [org.springframework.boot.autoconfigure.groovy.template.web.GroovyTemplateView: unnamed; URL [null]] in DispatcherServlet with name 'dispatcherServlet' 2014-05-20 09:28:27.084 DEBUG 10695 --- [nio-8080-exec-7] o.s.web.servlet.DispatcherServlet        : Successfully completed request ```  There are useful bits on these lines, but there is also a lot of noise. It is hard to find the interesting bits.  Contrast the above debug output with the output below. I think the Rails team has done a nice job of fitting a lot of data on as few of lines as possible in a very readable format.  ``` Started GET ""/?foo=bar&baz=bat"" for 127.0.0.1 at 2014-05-20 09:44:50 -0400 Processing by StaticController#index as HTML   Parameters: {""foo""=>""bar"", ""baz""=>""bat""}   Rendered static/index.html.erb within layouts/application (0.2ms)   Rendered shared/_messages.html.erb (0.1ms) Completed 200 OK in 8ms (Views: 7.7ms | ActiveRecord: 0.0ms) ```  Also, I really miss the Parameters: `{""foo""=>""bar"", ""baz""=>""bat""}` when I'm reading through the org.springframework.web logs.  ---  **Affects:** 5.0.6  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/902  This issue is a sub-task of #21485  **Issue Links:** - #21504 Add correlation id to log messages in WebFlux - #21485 Improve logging for development (DEBUG vs TRACE)  0 votes, 7 watchers","closed","type: task,","spring-projects-issues","2018-06-04T16:08:47Z","2019-01-13T20:26:07Z"
"","21401","Flawed implementations of ResourceResolverChain and ResourceTransformerChain [SPR-16862]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-16862](https://jira.spring.io/browse/SPR-16862?redirect=false)** and commented  The ResourceResolverChain and ResourceTransformerChain implementations in WebFlux use a List with a mutable index. This works as expected as long as resolvers and transformers use the chain instance when first called. However, if they use the chain from a nested, potentially asynchronous call that executes later, the chain index would almost certainly have a different value.   Looking at the implementations, those that make a nested call, and are impacted, include VersionResourceResolver, WebJarsResourceResolver, CssLinkResourceTransformer and AppCacheManifestTransformer.  Unfortunately the issue went undetected by any tests since in many cases delegating to the chain from any point might still produce the right end results, with the PathResourceResolver at the end.      ---  **Affects:** 5.0.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f121aa5e31b1885aff931a5f0caea0712ea69b73, https://github.com/spring-projects/spring-framework/commit/a71bd7c03f76237e486a184d0361b461f8b295a8","closed","type: bug,","spring-projects-issues","2018-05-22T15:18:27Z","2018-06-12T15:44:03Z"
"","21353","UriComponentsBuilder injected into a WebFlux controller method argument uses the full URI [SPR-16813]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-16813](https://jira.spring.io/browse/SPR-16813?redirect=false)** and commented  While making changes for #21209 I noticed that ServerWebExchangeArgumentResolver prepares a UriComponentsBuilder based on the full URI including full path and query params where it should be relative to the root of the web application, i.e. using scheme, host, and port only.  By comparison on the Spring MVC side `ServletUriComponentsBuilder.fromServletMapping(request)` is used.  ---  **Affects:** 5.0.6  **Issue Links:** - #21209 Centralize handling of ""Forwarded"" headers to ForwardedHeaderFilter  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fd36af6fcfe415e39ba314761010756043a1722d, https://github.com/spring-projects/spring-framework/commit/7f954ebc32c3fe8c7e458735d92193729511a07f","closed","type: bug,","spring-projects-issues","2018-05-11T13:30:58Z","2019-01-11T16:45:58Z"
"","21314","Implement ReactorNettyWebSocketSession.close [SPR-16774]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-16774](https://jira.spring.io/browse/SPR-16774?redirect=false)** and commented  Currently it raises IllegalStateException but it appears [there is](https://github.com/reactor/reactor-netty/pull/334/files#diff-d9d0a44a10934edd0c6a4b8c245ed5e3R453) a way.   ---  **Affects:** 5.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/725d685799f577b2d92e71a344c502f485a392a9, https://github.com/spring-projects/spring-framework/commit/417bb302c32e796dc112233c0c2abcf7f2322f41","closed","type: enhancement,","spring-projects-issues","2018-04-26T14:21:34Z","2018-05-08T08:53:24Z"
"","21293","Validate contextPath in RedirectView [SPR-16752]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-16752](https://jira.spring.io/browse/SPR-16752?redirect=false)** and commented  Normalization is not explicitly discussed in the Servlet spec, so we need to check and validate that when prepending the contextPath for context-relative redirects.   ---  **Affects:** 4.3.16  **Backported to:** [4.3.17](https://github.com/spring-projects/spring-framework/milestone/166?closed=1)","closed","type: enhancement,","spring-projects-issues","2018-04-20T19:56:47Z","2018-05-08T08:07:34Z"
"","21292","RSocket client and server support [SPR-16751]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-16751](https://jira.spring.io/browse/SPR-16751?redirect=false)** and commented  [RSocket](http://rsocket.io/) is a protocol for multiplexed streams comparable to gRPC in terms of interaction models, but transport independent (TCP, WebSockte, HTTP/2, Aeron) and with protocol-level support for Reactive Streams back pressure, among other unique features. RSocket does have multi-language client and server support but does not have built-in rpc-style code generation.  The [rsocket-java](https://github.com/rsocket/rsocket-java) project is built on Reactor Netty and Reactor Core, so the programming model and technology stack is closely aligned with WebFlux.  This ticket is to provide client and server RSocket support for Spring applications.  ---  **Affects:** 5.0.5  **Sub-tasks:** - #21987 Reactive infrastructure for annotated method invocation in spring-messaging  **Issue Links:** - #20905 Provide gRPC support  14 votes, 26 watchers","closed","has: votes-jira,","spring-projects-issues","2018-04-20T15:59:37Z","2019-04-02T02:59:46Z"
"","21273","Expose configuration options for ""selector"" header  [SPR-16732]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-16732](https://jira.spring.io/browse/SPR-16732?redirect=false)** and commented  The name of the selector header in `DefaultSubscriptionRegistry` has a setter but is currently not exposed in the Java config and XML namespace.   ---  **Affects:** 4.3.16, 5.0.5  **Backported to:** [4.3.17](https://github.com/spring-projects/spring-framework/milestone/166?closed=1)","closed","type: enhancement,","spring-projects-issues","2018-04-16T20:52:15Z","2018-05-08T08:07:34Z"
"","21272","Flag misguided evaluation attempts in OperatorMatches [SPR-16731]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-16731](https://jira.spring.io/browse/SPR-16731?redirect=false)** and commented  Raise `SpelEvaluationException` with `SpelMessage.FLAWED_PATTERN` in case of a pattern that cannot be efficiently evaluated and therefore needs to be redesigned.   ---  **Affects:** 4.3.16, 5.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9d37c099a8fcffb1923b031c35de721b47abf210, https://github.com/spring-projects/spring-framework/commit/6a727e1ed77a846c5fe53abe3f4df01fae222090, https://github.com/spring-projects/spring-framework/commit/d4a55a257b798130a89b27408198ef235e7cc67f  **Backported to:** [4.3.17](https://github.com/spring-projects/spring-framework/milestone/166?closed=1)","closed","type: enhancement,","spring-projects-issues","2018-04-16T20:49:36Z","2018-05-08T08:07:34Z"
"","21269","Restore handling of 0 bytes read in ServletServerHttpRequest [SPR-16728]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-16728](https://jira.spring.io/browse/SPR-16728?redirect=false)** and commented  Commit [a6d527](https://github.com/spring-projects/spring-framework/commit/a6d527e57aedd94a2e23cc8d35572076dbf0e417) introduced a proactive call to onAllDataRead when InputStream returns -1, but also does the same for 0 bytes read (accidentally).  This came to light via [Spring Boot #12870](https://github.com/spring-projects/spring-boot/issues/12870) but it's not clear yet if that is the cause.   ---  **Affects:** 5.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/567733d2a1e2095316c4898dd645b1c85ce145ae, https://github.com/spring-projects/spring-framework/commit/551505bd93003e983fb97bbf30221a45de138178","closed","type: bug,","spring-projects-issues","2018-04-16T13:41:17Z","2018-05-08T08:53:24Z"
"","21244","Incomplete backport of DefaultSubscriptionRegistry changes for SPR-16588 [SPR-16703]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-16703](https://jira.spring.io/browse/SPR-16703?redirect=false)** and commented  While `SimpleEvaluationContext` and co have been fully backported in 4.3.15, its use in `DefaultSubscriptionRegistry` was unfortunately missing.  ---  **Affects:** 4.3.15  **Issue Links:** - #21130 Support for SimpleEvaluationContext in SpEL","closed","type: task,","spring-projects-issues","2018-04-09T14:25:00Z","2019-01-11T16:29:00Z"
"","21209","Centralize handling of ""Forwarded"" headers to ForwardedHeaderFilter [SPR-16668]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-16668](https://jira.spring.io/browse/SPR-16668?redirect=false)** and commented  Currently ""Forwarded"" headers are consumed indirectly when building links with `ServletUriComponentsBuilder`, `MvcUriComponentsBuilder` or in CORS checks. While the behavior is documented, it can be overlooked, and it would be better to differ the treatment of such headers to the `ForwadedHeaderFilter` which requires an explicit choice, handles such headers more efficiently (once per request), is more comprehensive as a solution (e.g. applies to redirects too), and provides a `removeOnly` flag which can discard such headers when the application is not behind a trusted proxy.  On the implementation level we would keep the current `UriComponentsBuilder.fromHttpRequest` which encapsulates the actual handling of such headers, and switch the above to use `UriComponentsBuilder.fromUri` instead.  In the mean time, applications can use the `ForwadedHeaderFilter` which removes those headers (by wrapping the request), either consuming or ignoring them, and thus providing a single point of handling.  ---  **Affects:** 5.0.4  **Issue Links:** - [DATAREST-1264](https://jira.spring.io/browse/DATAREST-1264) Adapt to changed forwarded header behavior - #21402 Process X-Forwarded-Ssl headers properly - #21201 UriComponentsBuilder Forwarded header parsing can throw java.lang.NumberFormatException - #21353 UriComponentsBuilder injected into a WebFlux controller method argument uses the full URI - #21850 Misleading JavaDoc in ServletUriComponentsBuilder - #21402 Process X-Forwarded-Ssl headers properly  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4da43de7e1df1fb4f73c0a496b81d7c863c4a50c  0 votes, 6 watchers","closed","type: task,","spring-projects-issues","2018-03-29T18:38:53Z","2019-01-11T15:06:02Z"
"","21176","Generate multipart boundary using SecureRandom  [SPR-16635]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-16635](https://jira.spring.io/browse/SPR-16635?redirect=false)** and commented  From RFC 2046:  ``` The boundary delimiter MUST NOT appear inside any of the encapsulated parts, on a line by itself or as the prefix of any line.  This implies that it is crucial that the composing agent be able to choose and specify a unique boundary parameter value that does not contain the boundary parameter value of an enclosing multipart as a prefix. ```  Currently `Random` is used to generate the boundary which guarantees the above will not occur by accident. In certain scenarios, based on an advanced and esoteric type of attack, it is theoretically possible for the boundary to be guessed and intermixed with content received as input from an outside source.  We should switch to using `SecureRandom` to completely eliminate that possibility.  Note however that the use of `SecureRandom` also introduces the possibility for lack of entropy depending on how the JVM is configured. This is a more general issue, however, not specific to the Spring Framework, but we need to provide guidance in the docs.  ---  **Affects:** 4.3.14  **Issue Links:** - #21512 Lazily initialize SecureRandom in MimeTypeUtils  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f6ea7407e6cd2f4da52187dfb8503143633002c8, https://github.com/spring-projects/spring-framework/commit/e02ff3a0da50744b0980d5d665fd242eedea7675, https://github.com/spring-projects/spring-framework/commit/d007c25585517d59be4d72a5004f837a9e1205d3, https://github.com/spring-projects/spring-framework/commit/ab2410c754b67902f002bfcc0c3895bd7772d39f  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","type: enhancement,","spring-projects-issues","2018-03-23T15:33:38Z","2021-09-08T10:39:28Z"
"","21175","Support use of reactive clients in @MessageMapping methods [SPR-16634]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-16634](https://jira.spring.io/browse/SPR-16634?redirect=false)** and commented  We already support `CompletableFuture` as a return value. It should be straight-forward to add support for single-value reactive types such as `Mono`, `Single`, or any other based on the `ReactiveAdapterRegistry`.  ---  **Affects:** 5.0.4  **Issue Links:** - #21870 MonoToListenableFutureAdapter.cancel problems  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0def1640f271a97d8328d35e70b26eb9af20d164","closed","type: enhancement,","spring-projects-issues","2018-03-23T14:36:05Z","2019-01-11T15:10:29Z"
"","21162","@RequestPart in WebFlux does not support List of parts [SPR-16621]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-16621](https://jira.spring.io/browse/SPR-16621?redirect=false)** and commented  `RequestPartMethodArgumentResolver` supports `Part` (single value), and it will also provide a `Flux` (multiple values) but it does not support `List`.    ---  **Affects:** 5.0.4","closed","type: enhancement,","spring-projects-issues","2018-03-21T21:48:08Z","2018-07-26T08:09:36Z"
"","21157","Clean duplicate slash and backslash in resource URLs [SPR-16616]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-16616](https://jira.spring.io/browse/SPR-16616?redirect=false)** and commented  Most Servlet containers clean the Servlet path, but not all do, and not all do it consistently for forward and backslashes. We should proactively clean the path, in order to improve the impact of the path validation checks we already have in place.   ---  **Affects:** 4.3.14  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/695bf2961feffd35b5560ccc982a2189dcca611f, https://github.com/spring-projects/spring-framework/commit/f046a066eceefa0799d1bc89bd6e1318f39bdf69, https://github.com/spring-projects/spring-framework/commit/98ad23bef8e2e04143f8f5b201380543a8d8c0c3, https://github.com/spring-projects/spring-framework/commit/f59ea610dfcf55cd0b42f6dd76a9b3dab0218aaa, https://github.com/spring-projects/spring-framework/commit/b9ebdaaf3710db473a2e1fec8641c316483a22aa, https://github.com/spring-projects/spring-framework/commit/13356a7ee2240f740737c5c83bdccdacc30603ab, https://github.com/spring-projects/spring-framework/commit/91b803a2310344d925e5d4b1709bbcea90375548, https://github.com/spring-projects/spring-framework/commit/0e28bee0f155b9bf240b4bafc4646e4810cb23f8  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","type: task,","spring-projects-issues","2018-03-19T21:15:30Z","2018-04-03T20:34:28Z"
"","21147","ResourceDecoder incorrectly matches to Object.class [SPR-16606]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-16606](https://jira.spring.io/browse/SPR-16606?redirect=false)** and commented  This is due to the following check `clazz.isAssignableFrom(ByteArrayResource.class)`, which is in reverse order to what it should be.   ---  **Affects:** 5.0.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/30583a62cfeef79ccbd18daf9c6045d89688e22b","closed","type: bug,","spring-projects-issues","2018-03-16T18:59:54Z","2018-04-03T20:34:27Z"
"","21735","CDI 2.0 (JSR365) Implementation for JSF 2.3 CDI Activation [SPR-17202]","**[Ronel Manata](https://jira.spring.io/secure/ViewProfile.jspa?name=ronelm2000)** opened **[SPR-17202](https://jira.spring.io/browse/SPR-17202?redirect=false)** and commented  I require a way to properly implement `@Inject` `@Push` PushContext for  support (along with their WebsocketEvent listeners), but in their documentation, the only way for that to be properly implemented is for JSF 2.3 to be properly integrated because JSF manages these only by CDI 2.0.  However, in order to properly integrate JSF 2.3 (setting faces-config.xml version to 2.3), you need a BeanManager instance, which can only be achieved by properly implementing JSR365 (CDI 2.0).  The only alternative for me would be adding Weld (or OpenWebBeans) as a CDI, which can get ugly pretty fast without downright migrating.  PS: As for integrating CDI and JSR356, there should be no problem as Spring Websockets does implement JSR356 as far as I know.  PSS: I know the workaround here will only be to actually implement a websocket client within the xhtml file and bootstrapping WebSockets as normal, but that either defeats the purpose of JSF to a degree or requires a custom JSF tag to mimic f:websocket functionality.   --- No further details from [SPR-17202](https://jira.spring.io/browse/SPR-17202?redirect=false)","closed","type: enhancement,","spring-projects-issues","2018-08-22T08:17:45Z","2018-08-22T09:22:35Z"
"","21459","beans.support type mismatch on PropertyComparator() class [SPR-16920]","**[Ron White](https://jira.spring.io/secure/ViewProfile.jspa?name=rwhite35)** opened **[SPR-16920](https://jira.spring.io/browse/SPR-16920?redirect=false)** and commented  Hi! Build/Compiling Spring Boot (2.0.2 Release) with Gradle 4.8, Goovy 2.4.12, Ant 1.9.11 on MacBookPro running JVM 1.8.0_25.    Failed to compile on package org.springframework.beans.support class PropertyComparator. It seems there is a type mismatch at/around line 135.  Here is the error: — error: incompatible types: PropertyComparator cannot be converted to Comparator                 source.sort(new PropertyComparator<>(sortDefinition)); where CAP#1 is a fresh type-variable:  CAP#1 extends Object from capture of ? —  Was able to get the class to compile by removing the generic at line 136:  136        // source.sort(new PropertyComparator<>(sortDefinition)); 137         source.sort(new PropertyComparator(sortDefinition));  If there is a better solution, please let me know.    Thanks rwhite35   ---  **Affects:** 5.0.1  **Reference URL:** https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/support/PropertyComparator.html","open","in: core,","spring-projects-issues","2018-06-08T12:35:27Z","2021-11-12T12:17:47Z"
"","21767","Reactive Web Client - Using HTTP proxy implicitly creates a tunnel [SPR-17234]","**[Ron Klein](https://jira.spring.io/secure/ViewProfile.jspa?name=ronklein)** opened **[SPR-17234](https://jira.spring.io/browse/SPR-17234?redirect=false)** and commented  ## Expected behavior  When I run a local proxy (port 7000), and use `curl`, the command looks like this:  `curl ""http://httpbin.org/status/200"" -x localhost:7000`  What happens, and this is the expected behavior, is that `curl` establishes a TCP connection to localhost:7000, and runs the HTTP request against the local proxy, rather than the target (httpbin).  ## Actual behavior  If I use the following code:  ```java public static void main(String[] args) {   ReactorClientHttpConnector connector = new ReactorClientHttpConnector(options -> {     options.httpProxy(addressSpec -> addressSpec.address(InetSocketAddress.createUnresolved(""localhost"", 7000)));   });   WebClient webClient = WebClient.builder()       .clientConnector(connector)       .build();    String url = ""http://httpbin.org/status/200"";   Mono exchange = webClient.get().uri(URI.create(url)).exchange();   ClientResponse response = exchange.block();   System.out.println(response.statusCode().value()); } ```        then the http client would first execute a `CONNECT` command (method) against the local proxy, and then would execute the original HTTP request (`GET`) inside the TCP level channel/tunnel it created from the executed `CONNECT` method. I would expect that the default behavior when using a HTTP proxy would be the same as the one provided by `curl`, demonstrated above.  Spring Boot Version: 2.0.4.RELEASE OS: Mac 10.13.6   --- No further details from [SPR-17234](https://jira.spring.io/browse/SPR-17234?redirect=false)","closed","status: invalid,","spring-projects-issues","2018-09-01T16:23:34Z","2019-01-12T05:18:17Z"
"","21642","Initialize pre-filled HashMaps with large enough capacity (e.g. in HttpMethod) [SPR-17105]","**[Roman Stefankiv](https://jira.spring.io/secure/ViewProfile.jspa?name=stefankiv)** opened **[SPR-17105](https://jira.spring.io/browse/SPR-17105?redirect=false)** and commented  This is small enhancement but still, applicable.  Enum **HttpMethod** stores all its values internally in the hash map. It is instantiated with capacity **8** but default load factor:  ```java GET, HEAD, POST, PUT, PATCH, DELETE, OPTIONS, TRACE;  private static final Map mappings = new HashMap<>(8);  static {     for (HttpMethod httpMethod : values()) {         mappings.put(httpMethod.name(), httpMethod);     } } ```  Putting all 8 values in the map triggers map's resizing (when it's filled with 6 values), which could be avoided, changing load factor to **1**.  ---  **Affects:** 5.0.8  **Reference URL:** https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/http/HttpMethod.java#L38  **Issue Links:** - #21616 Spring-context optimization: LinkedMultiValueMap and ArrayList should be initialized with specified capacity for preventing collections from resizing - #21712 ClassUtils uses more memory than necessary  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/91fa2ed0d4ae30c8a5d705623b9e18a718104a23, https://github.com/spring-projects/spring-framework/commit/4a147d26fcd086ffc4d495e34b6d1b54854c345b","closed","type: enhancement,","spring-projects-issues","2018-07-30T12:15:44Z","2019-01-11T12:50:52Z"
"","21182","race condition when sending stomp message on connect [SPR-16641]","**[Rogier Goede](https://jira.spring.io/secure/ViewProfile.jspa?name=rogiergoede)** opened **[SPR-16641](https://jira.spring.io/browse/SPR-16641?redirect=false)** and commented  See attached maven project. The test opens a connection to the service and checks that it receives a message. This sometimes works. If you uncomment the waitTenMilliseconds() in StompPing it works. I don't know for sure if this is a problem with the client or with the server. In our production code we also see that this problem occurs when you send a message from another source right after connecting. Here waiting does not help. You will always miss messages.  ---  **Affects:** 4.3.14  **Attachments:** - [stompracecondition.tgz](https://jira.spring.io/secure/attachment/25435/stompracecondition.tgz) (_2.74 kB_) - [stompracecondition2.tgz](https://jira.spring.io/secure/attachment/25460/stompracecondition2.tgz) (_2.79 kB_)  **Issue Links:** - #21172 Race-Condition between Listening to SessionSubscribeEvent and sending initial data to this subscribed user","closed","type: enhancement,","spring-projects-issues","2018-03-26T12:56:20Z","2019-01-11T15:08:53Z"
"","21772","WebTestClient.bindToRouterFunction(...) with exception handler not working [SPR-17239]","**[rodolphocouto](https://jira.spring.io/secure/ViewProfile.jspa?name=rodolphocouto)** opened **[SPR-17239](https://jira.spring.io/browse/SPR-17239?redirect=false)** and commented  This bug occurs when the WebTestClient is used to test a router function with custom exception handler, for example:     ```java WebTestClient     .bindToRouterFunction(myRouter())     .handlerStrategies(HandlerStrategies.builder()         .exceptionHandler(new CustomExceptionHandler()) // IS NOT CALLED :(         .build())     .build() ```        With annotated controllers, the same custom exception is called, for example:     ```java WebTestClient     .bindToController(new MyController())     .controllerAdvice(new CustomExceptionHandler()) // IS CALLED :)     .build() ```      ---  **Affects:** 5.0.8  **Reference URL:** https://github.com/rodolphocouto/spring-framework-issues/tree/master/SPR-17239","closed","type: enhancement,","spring-projects-issues","2018-09-03T21:26:46Z","2018-10-15T12:55:41Z"
"","21200","PathMatchingResourcePatternResolver with strange behavior on search via pattern [SPR-16659]","**[Roberto Germano Vieweg Neto](https://jira.spring.io/secure/ViewProfile.jspa?name=betoneto.tbo)** opened **[SPR-16659](https://jira.spring.io/browse/SPR-16659?redirect=false)** and commented  I'm trying to use the **PathMatchingResourcePatternResolver** to list some resources of an runtime-created **URLClassLoader**. The issue is about **listing sub-directories** in a specific package.  This is my case:  I have 2 JARs and 1 directory as the source of my class loader, like this:  ``` /my-default.jar     /reports         /report-1         /report-2         /report-3 /my-customization.jar     /product-x         /reports             /report-2     >>> customization of report-2 from my-default.jar             /report-4-newone /path/to/local/storage     /reports         /report-created-by-enduser ```  _NOTE: each `report` folder has 1 or more `.JRXML` files_  My URLClassLoader is create with this URLs:  ```java URLClassLoader cl = new URLClassLoader(new URL[] {      new URL(""file:/c:/path/to/local/storage""),      new URL(""jar:file:/path/to/my-customization.jar!/product-x/""),      new URL(""jar:file:/path/to/my-default.jar!/"")  }); ```  Now I need to **list all sub directories** in classpath starting with **reports/** (for that I used the pattern _classpath:reports/*_):  ```java PathMatchingResourcePatternResolver resolver = new PathMatchingResourcePatternResolver(cl); Resource[] resources = resolver.getResources(""classpath:reports/*""); ```  This returns **wrong results** (only 1 result, as so with another pattern `classpath:/reports/*`):  ``` file:/c:/path/to/local/storage/reports/report-created-by-enduser ```  The expected result in URLs (pay attention on the classpath precedence) is:  ``` file:/c:/path/to/local/storage/reports/report-created-by-enduser jar:file:/path/to/my-customization.jar!/product-x/reports/report-2 jar:file:/path/to/my-customization.jar!/product-x/reports/report-4-newone jar:file:/path/to/my-default.jar!/reports/report-1 jar:file:/path/to/my-default.jar!/reports/report-3 ```  Here are other results by different patterns:  ``` resolver.getResources(""classpath:/reports/*"") = [ file:/c:/path/to/local/storage/reports/report-created-by-enduser ]  resolver.getResources(""classpath:/reports/*/"") = [ ]  resolver.getResources(""classpath:/reports/*/*"") = [ file:/c:/path/to/local/storage/reports/report-created-by-enduser ]  resolver.getResources(""classpath:reports/**/*.jrxml"") = [ ] ```  Note, when I get the specific resource providing the full path it returns the correct resource:  ``` resolver.getResources(""classpath:/reports/report-2/report-2.jrxml"") = [ jar:file:/path/to/my-customization.jar!/product-x/reports/report-2/report-2.jrxml ]  resolver.getResources(""classpath:/reports/report-1/report-1.jrxml"") = [ jar:file:/path/to/my-default.jar!/reports/report-1/report-1.jrxml ] ```    ---  **Affects:** 4.3.10  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/12661","closed","in: core,","spring-projects-issues","2018-03-28T20:51:42Z","2019-01-12T16:21:33Z"
"","21876","JdbcTemplate - Add support for multitenancy [SPR-17342]","**[robert-niestroj](https://jira.spring.io/secure/ViewProfile.jspa?name=robert-niestroj)** opened **[SPR-17342](https://jira.spring.io/browse/SPR-17342?redirect=false)** and commented  **Please add support for multitenancy in JdbcTemplate.**  Scenario: i have an app which uses JPA for CRUD, but for reporting uses native queries executed via JdbcTemplate. Hibernate in our app is working in multitenancy mode with the strategy per schema on MySQL. I tried several things but could not implement similar multitenancy in JdbcTemplate.  Basiclly i do connection.createStatement(""USE "" + tenantSchema ); in hibernates multitenancyConnectionProvider.     I would like to do something similar in JdbcTemplate.   ---  **Reference URL:** https://stackoverflow.com/questions/52541380/spring-jdbctemplate-how-to-prepend-every-query","closed","type: enhancement,","spring-projects-issues","2018-10-04T20:28:06Z","2020-02-18T16:06:48Z"
"","21373","java.nio.file.Path support in FileSystemResource (with regular createRelative behavior, superseding PathResource) [SPR-16833]","**[Robert Saenger](https://jira.spring.io/secure/ViewProfile.jspa?name=meinc)** opened **[SPR-16833](https://jira.spring.io/browse/SPR-16833?redirect=false)** and commented  org.springframework.core.io.PathResource#createRelative(String) doesn't work correctly if the underlying path refers to a file and not to a directory. The problem of the implementation is, that it doesn't properly distinguish between files an directories. In both cases the implementation returns a Resource whose path is simply extended by the given relative path. This is correct if the path points to a directory but invalid if the path points to a file, e.g. \/\ is always invalid it should be \/\.  Suggested fix ist to change the implementation as follows:  ```java /**  * This implementation creates a PathResource, applying the given path relative  * to the path of the underlying file of this resource descriptor. It properly  * distinguishes whether the underlying file of this resource descriptor is a  * file or directory.  *  * @see java.nio.file.Files#isDirectory(Path, java.nio.file.LinkOption...)  * @see java.nio.file.Path#resolve(String)  * @see java.nio.file.Path#resolveSibling(String)  */ @Override public Resource createRelative(final String relativePath) throws IOException {       return new PathResource(Files.isDirectory(path) ? path.resolve(relativePath) : path.resolveSibling(relativePath)); } ```  Since the implementation prevents access to the instance variable path, it is not possible to fix the problem via inheritance and overriding the method. Thus as workaround the entire class may be copied and modified as described above.     ---  **Affects:** 5.0.2  **Issue Links:** - #15237 Introduce java.nio.file.Path based Resource implementation - #21372 ClassPathResource.isReadable() returns true for directory in runnable jar result in download empty file - #21378 PathMatchingResourcePatternResolver should enforce OS-independent sorting of directory content - #21464 FilePart.transferTo should accept java.nio.file.Path - #20304 Revise FileSystemResource / FileSystemUtils / FileCopyUtils towards NIO.2 - #21853 HTTP 404 for static resources with last modified = 0L (breaks Docker images build with Jib)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/38f9a7b07201677411b8da686e722d85e44f126b","closed","type: enhancement,","spring-projects-issues","2018-05-17T11:56:31Z","2019-01-11T17:10:39Z"
"","21829","Support @RequestParam, @RequestHeader, etc. as meta-annotations [SPR-17296]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-17296](https://jira.spring.io/browse/SPR-17296?redirect=false)** and commented  It would be nice if `@RequestHeader` could be used for a meta-annotation. This would make it easier if a header was being used consistently throughout the entire application. For example, a user might do something like this:  ```java @Retention(RetentionPolicy.RUNTIME) @RequestHeader(name = ""user-id"") public @interface CurrentUserId { } ```  --- No further details from [SPR-17296](https://jira.spring.io/browse/SPR-17296?redirect=false)","open","type: enhancement,","spring-projects-issues","2018-09-22T21:05:49Z","2022-06-07T13:49:28Z"
"","21746","Create a WebFilter for ServerWebExchange Reactor Context [SPR-17213]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-17213](https://jira.spring.io/browse/SPR-17213?redirect=false)** and commented  Similar to RequestContextFilter, it would be nice if there was a WebFilter that populated the ServerWebExchange in the Reactor Context. This would be benefit to Spring Security's OAuth support. It would also likely provide value for logging, metrics, etc.  ---  **Affects:** 5.1 RC2  **Issue Links:** - #21477 Unable to retrieve user from reactive context in RequestCondition - #20239 RequestContextHolder for Reactive Web  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2018-08-24T18:11:15Z","2019-04-16T14:09:39Z"
"","21535","Create HttpHeaders.setBearerAuth(String) [SPR-16997]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-16997](https://jira.spring.io/browse/SPR-16997?redirect=false)** and commented  Similar to #21452 it would be nice if a method to provided a [Bearer token](https://tools.ietf.org/html/rfc6750#section-1.2) would be provided. Something like: `Create Consumer bearerToken(String)`. For example, the following:     ```java webClient     .get()     .headers(bearerToken(""foo""))     ... ```  would add a header of  ```java Authorization: Bearer foo ```  ---  **Affects:** 5.0.7  **Issue Links:** - #21452 Create HttpHeaders.setBasicAuth(String username, String password)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2ac6a15f6f559042dcf26d687b2297c6d0d6f985","closed","type: enhancement,","spring-projects-issues","2018-07-02T19:27:35Z","2019-01-11T16:06:42Z"
"","21526","Add MockClientHttpRequest.getBodyAsString [SPR-16988]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-16988](https://jira.spring.io/browse/SPR-16988?redirect=false)** and commented  Similar to `MockServerHttpResponse` the class  `MockClientHttpRequest` should have a `getBodyAsString`  method   ---  **Affects:** 5.0.7  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7f555785dd00049eb9d6e885d5f75b6003292131","closed","type: enhancement,","spring-projects-issues","2018-06-29T16:02:01Z","2018-07-26T08:09:32Z"
"","21452","Create HttpHeaders.setBasicAuth(String username, String password) [SPR-16913]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-16913](https://jira.spring.io/browse/SPR-16913?redirect=false)** and commented  A disadvantage of the current WebClient HTTP Basic support is that you must have an `ExchangeFilterFunction` registered to process the client attribute. Since the support for HTTP Basic was added for `WebClient` the API has been modified the addition of `RequestHeadersSpec.headers(Consumer)` has been added which would work very well for HTTP Basic support without the need for an `ExchangeFilterFunction`.  We should create a static method `Consumer httpBasic(String username, String password)` that adds HTTP Basic authentication to the headers. This approach does not require an `ExchangeFilterFunction` to be registered for the header to be added to the request.     ---  **Issue Links:** - #21535 Create HttpHeaders.setBearerAuth(String) - #21860 BasicAuthorizationInterceptor should add its header conditionally  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e485abbe5628e1817c66e96d7703d523cec8a2cb, https://github.com/spring-projects/spring-framework/commit/a663454fad556dd8bf17e4b4fe0482a39a3620c6, https://github.com/spring-projects/spring-framework/commit/6bcf6ffb06da7193e93cf990b5d86a7deb208781","closed","type: enhancement,","spring-projects-issues","2018-06-06T20:48:55Z","2019-01-11T15:42:09Z"
"","21412","WebClient.Builder option to customize every request [SPR-16873]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-16873](https://jira.spring.io/browse/SPR-16873?redirect=false)** and commented  Similar to how there are defaultCookies and defaultHeaders it would be nice if there were support for `defaultAttributes(Consumer>)`  The execution the `Consumer` should be delayed until the request is created so that the `Consumer` can rely on external factors. For example, when using `WebClient` in a Servlet environment Spring Security's `SecurityContext` is stored on a `ThreadLocal` and could be populated as a default attribute.  It is important to note that we cannot rely on an `ExchangeFilterFunction` to populate the attribute because this may happen on another `Thread`.   ---  **Affects:** 5.0.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8bffb6a798424b83fa1b20f344650732d2f2c985","closed","type: enhancement,","spring-projects-issues","2018-05-25T16:45:21Z","2018-07-26T08:09:33Z"
"","21391","Update MockHttpServletRequest default method to GET [SPR-16851]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-16851](https://jira.spring.io/browse/SPR-16851?redirect=false)** and commented  It would be very nice if the default MockHttpServletRequest method were valid. I'd like to suggest updating the default method to a GET.   ---  **Affects:** 5.0.6","closed","type: enhancement,","spring-projects-issues","2018-05-21T17:26:44Z","2018-12-24T18:11:34Z"
"","21346","WebClient support same body types for x-www-form-urlencoded and json [SPR-16806]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-16806](https://jira.spring.io/browse/SPR-16806?redirect=false)** and commented  When using `WebClient` a content type of `application/x-www-form-urlencoded` can produces a `MultiValueMap` but not a `Map`. However, a content type of `application/json` can produce a `Map` but not a `MutliValueMap`.  OAuth response types are often either `application/x-www-form-urlencoded` or `application/json` but we would like them to both be able to produce the same body of either a `Map` or a `MultiValueMap`. It would be very nice if `WebClient`'s default body types would allow  `application/x-www-form-urlencoded` to produce a `Map` and/or `application/json` to produce a `MultiValueMap`   ---  **Affects:** 5.0.6","closed","type: enhancement,","spring-projects-issues","2018-05-09T18:26:04Z","2018-07-25T00:04:50Z"
"","21345","Improve UnsupportedMediaTypeException and UnsupportedMediaTypeStatusException to include body type [SPR-16805]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-16805](https://jira.spring.io/browse/SPR-16805?redirect=false)** and commented  If I have the following  ```java webClient.post() 		.uri(""/"") 		.accept(MediaType.APPLICATION_FORM_URLENCODED) 		.retrieve() 		.bodyToMono(new ParameterizedTypeReference>() {}) 		.block(); ```  I get an error stating  ``` org.springframework.web.reactive.function.UnsupportedMediaTypeException: Content type 'application/x-www-form-urlencoded' not supported ```  However, changing the type to be converted the following works perfectly well.  ```java webClient.post() 		.uri(""/"") 		.accept(MediaType.APPLICATION_FORM_URLENCODED) 		.retrieve() 		.bodyToMono(new ParameterizedTypeReference>() {}) 		.block(); ```  This makes the error message confusing since the type is not supported with a specific body type.   It would be nice if `WebClient` would report the following when a `UnsupportedMediaTypeException`  is thrown:  * The Java type that the response is being converted to * A mapping of Java Types and Media Types that are supported  NOTE: I'm not certain if this is applicable, but it would be nice if we validated something similar is included for writing a body. It should also apply to WebTestClient which shares some but not all code with WebClient.  ---  **Affects:** 5.0.6  **Issue Links:** - #21880 UnsupportedMediaTypeException Should Contain Details of the Resolvable Type (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3af5f00ee71a22be2a8e246c214749f3d6a6318f","closed","type: enhancement,","spring-projects-issues","2018-05-09T16:54:05Z","2019-01-11T16:45:47Z"
"","21344","WebClient support application/x-www-form-urlencoded by default [SPR-16804]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-16804](https://jira.spring.io/browse/SPR-16804?redirect=false)** and commented  In OAuth it is common for the response type to be `application/x-www-form-urlencoded`. The default WebClient does not support reading content type of `application/x-www-form-urlencoded`. By default something like this:  ```java webClient.post()     .uri(""/"")     .accept(MediaType.APPLICATION_FORM_URLENCODED)     .retrieve()     .bodyToMono(new ParameterizedTypeReference>() {})      ...   ```  produces an exception similar to the following:  ``` org.springframework.web.reactive.function.UnsupportedMediaTypeException: Content type 'application/x-www-form-urlencoded' not supported  	at org.springframework.web.reactive.function.BodyExtractors.lambda$readWithMessageReaders$20(BodyExtractors.java:254) 	at java.util.Optional.orElseGet(Optional.java:267) 	at org.springframework.web.reactive.function.BodyExtractors.readWithMessageReaders(BodyExtractors.java:250) 	at org.springframework.web.reactive.function.BodyExtractors.lambda$toMono$2(BodyExtractors.java:92) 	at org.springframework.web.reactive.function.client.DefaultClientResponse.body(DefaultClientResponse.java:86) 	at org.springframework.web.reactive.function.client.DefaultClientResponse.bodyToMono(DefaultClientResponse.java:131) 	at org.springframework.web.reactive.function.client.DefaultWebClient$DefaultResponseSpec.lambda$bodyToMono$1(DefaultWebClient.java:416) ```  While it is fairly simple to configure support using:  ```java ExchangeStrategies strategies = ExchangeStrategies.builder() 		.codecs(configurer -> { 			// ... 			configurer.registerDefaults(true); 			configurer.customCodecs().reader(new FormHttpMessageReader()); 		}) 		.build(); this.webClient = WebClient.builder() 		// ... 		.exchangeStrategies(strategies) 		.build(); ```  It would be very convenient and simple if `WebClient` supported `application/x-www-form-urlencoded` by default.   ---  **Affects:** 5.0.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7fd0cac6f2fb0cd5162e5580f535655069a71a4c, https://github.com/spring-projects/spring-framework/commit/4ff4d5a181aca7f73da01edbc6716468a9da3234","closed","type: enhancement,","spring-projects-issues","2018-05-09T16:20:40Z","2018-07-26T08:09:31Z"
"","21333","Add WebFilter + Native Netty Support [SPR-16793]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-16793](https://jira.spring.io/browse/SPR-16793?redirect=false)** and commented  It would be very nice to support WebFilter + Native Netty support. If we could do this, then it would be possible to support Spring Security + Netty applications.   ---  **Affects:** 5.0.5","closed","type: enhancement,","spring-projects-issues","2018-05-03T22:23:53Z","2019-01-11T16:39:32Z"
"","21312","MockServerWebExchange should allow setting a WebSession [SPR-16772]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-16772](https://jira.spring.io/browse/SPR-16772?redirect=false)** and commented  I've run into a few testing situations that involve saving something in the `WebSession` and then trying to retrieve it. This is more complicated than necessary at the moment because `MockServerWebExchange` does not allow setting the `WebSession` It would be nice if the `WebSession` could just be set so that these scenarios could easily be tested.   ---  **Affects:** 5.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/15182b29a43d451b8595158d15145c88d7bb6d36, https://github.com/spring-projects/spring-framework/commit/eef592d901df1a3f477253c864b7ade9673d8da8","closed","type: enhancement,","spring-projects-issues","2018-04-25T21:56:17Z","2019-01-13T20:26:31Z"
"","21274","Unnecessary proxying with MethodMapTransactionAttributeSource [SPR-16733]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-16733](https://jira.spring.io/browse/SPR-16733?redirect=false)** and commented  The changes for in [b5922f75](https://github.com/spring-projects/spring-framework/commit/b5922f75bb286d0dcf168ef0b5788f531a31d83e) means that now unnecessary objects are proxied.  `MethodMapTransactionAttributeSource` now uses [now uses](https://github.com/spring-projects/spring-framework/commit/b5922f75bb286d0dcf168ef0b5788f531a31d83e#diff-1cb5aa2cda327d3a37dd3029e1fc8680R148) `ReflectionUtils.getAllDeclaredMethods` which means that when something like `addTransactionalMethod(""sample.Foo.*"", ...)` is invoked, all the methods (including the methods on `Object`) are added to the `transactionAttributeMap`.  Then when a method from `Object` is queried on any class (i.e. `MethodMapTransactionAttributeSource.getTransactionAttribute(finalizeMethod,JdbcTemplate.class)`) the result is true, so every object ends up getting proxied.  A complete example of the issue can be seen at https://github.com/rwinch/spring-aop-proxy-issue/blob/master/src/test/java/sample/ProxyTests.java  ---  **Affects:** 5.0.6  **Issue Links:** - #21264 AspectJ execution pointcut does not detect methods in superinterface anymore","closed","in: core,","spring-projects-issues","2018-04-17T03:35:26Z","2019-01-11T16:44:23Z"
"","21165","Update ContentNegotiationStrategy to never return an empty List [SPR-16624]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-16624](https://jira.spring.io/browse/SPR-16624?redirect=false)** and commented  Currently the implementations of `ContentNegotiationStrategy` might return an empty List which should be interpreted as `MediaType.ALL`. This means that all consumers of this API must translate the response. It would be nice if `ContentNegotiationStrategy` would never return an empty `List` and instead return `MediaType.ALL`.  The same changes should be made to `RequestedContentTypeResolver`   ---  **Affects:** 5.0.4  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/10907  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2018-03-22T15:48:55Z","2018-04-03T20:34:25Z"
"","21660","Consistent nullability for StringUtils array/collection input parameters [SPR-17123]","**[rinx](https://jira.spring.io/secure/ViewProfile.jspa?name=rinx)** opened **[SPR-17123](https://jira.spring.io/browse/SPR-17123?redirect=false)** and commented  Spring Framework 5.1 provides a function named StringUtils.collectionToCommaDelimitedString which is defined here:  https://github.com/spring-projects/spring-framework/blob/master/spring-core/src/main/java/org/springframework/util/StringUtils.java#L1289  has argument type ""Collection coll"".  However, it calls collectionToDelimitedString which accepts ""Nullable"" collection. I think collectionToCommaDelimitedString should be able to handle ""Nullable"" collection.   ---  **Affects:** 5.1 RC1  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1917, and commits https://github.com/spring-projects/spring-framework/commit/69c6a40c501789165732c7fe6d1f7cfddf72881b","closed","in: core,","spring-projects-issues","2018-08-06T09:52:44Z","2018-08-17T09:42:44Z"
"","21758","Suffix support for BigInteger in SPEL [SPR-17225]","**[Rimal](https://jira.spring.io/secure/ViewProfile.jspa?name=rimal)** opened **[SPR-17225](https://jira.spring.io/browse/SPR-17225?redirect=false)** and commented  Can we please add a suffix support for BigInteger as well in SpEL.   Currently, we can add a long value as 12345456L (with the L suffix) but for a BigInteger, we need to mention it as new `java.math.BigInteger('9248040402')`.  It would be really helpful if we could mention a BigInteger as 9248040402BI or something on these lines.   --- No further details from [SPR-17225](https://jira.spring.io/browse/SPR-17225?redirect=false)","open","type: enhancement,","spring-projects-issues","2018-08-29T08:23:56Z","2018-08-29T10:54:43Z"
"","21240","memory leak in class ConcurrentReferenceHashMap [SPR-16699]","**[Rene Ke](https://jira.spring.io/secure/ViewProfile.jspa?name=rene.keyi)** opened **[SPR-16699](https://jira.spring.io/browse/SPR-16699?redirect=false)** and commented  looks like we met the similar issue (#16021) when using 4.3.5.RELEASE, the memory not goes down and can't get garbage-collected, you can check attached heap dump screenshot.  ---  **Attachments:** - [heapdump.png](https://jira.spring.io/secure/attachment/25468/heapdump.png) (_103.27 kB_)  **Issue Links:** - #16021 memory leak in class org.springframework.core.ResolvableType","closed","in: core,","spring-projects-issues","2018-04-06T20:33:28Z","2019-01-14T04:31:31Z"
"","21650","HttpComponentsStreamingClientHttpRequest fails if restTemplate has interceptors [SPR-17113]","**[raoofm](https://jira.spring.io/secure/ViewProfile.jspa?name=raoofm)** opened **[SPR-17113](https://jira.spring.io/browse/SPR-17113?redirect=false)** and commented  need to set Interceptors as empty, since InterceptingHttpAccessor.getRequestFactory returns InterceptingClientHttpRequestFactory which in turn makes an instance of InterceptingClientHttpRequest which does not extend StreamingHttpOutputMessage and AbstractHttpMessageConverter.write checks if (outputMessage instanceof StreamingHttpOutputMessage) { which will be false and ResourceHttpMessageConverter.writeInternal which calls outputMessage.getBody() where outputMessage is an instance of HTTPOutputMessage and not StreamingHttpOutputMessage, should return something like InterceptingStreamingClientHttpRequestFactory For now when we set empty Interceptors, returns the correct delegate (HttpComponentsClientHttpRequestFactory)  ---  **Issue Links:** - #20926 InterceptingClientHttpRequest is always buffered despite the delegate - #17312 All HttpMessageConverters should support StreamingHttpOutputMessage","closed","type: enhancement,","spring-projects-issues","2018-08-01T20:32:14Z","2019-01-14T04:30:17Z"
"","21639","ok coming [SPR-17102]","**[raoofm](https://jira.spring.io/secure/ViewProfile.jspa?name=raoofm)** opened **[SPR-17102](https://jira.spring.io/browse/SPR-17102?redirect=false)** and commented   --- No further details from [SPR-17102](https://jira.spring.io/browse/SPR-17102?redirect=false)","closed","status: invalid,","spring-projects-issues","2018-07-27T20:57:06Z","2019-01-12T05:18:24Z"
"","21714","Consistent warn logging for handled exceptions [SPR-17178]","**[Ran Cohen](https://jira.spring.io/secure/ViewProfile.jspa?name=ranc)** opened **[SPR-17178](https://jira.spring.io/browse/SPR-17178?redirect=false)** and commented  I had a controller, and a field in the controller marked as Long. I tried using a url with the field being 0.88, and nothing happend.  After extensive debug, I found a Bind exception, and the reason I thought nothing happend is that the class RequestMappingHandlerAdapter in the method invokeHandlerMethod has a try... finally, no catch.  I wasted a few hours trying to figure out what happend.  Please fix it.  ---  **Affects:** 4.3.14  **Issue Links:** - #21916 ExceptionHandlerExceptionResolver started to log on WARN level - #21932 AbstractHandlerExceptionResolver logs handled exceptions at WARN  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8e980d9a63b3bae633a7e310e94aaf52b9d490ec, https://github.com/spring-projects/spring-framework/commit/41e6aa6de2f2d8f8a322d41241ee99e75b39c1b2, https://github.com/spring-projects/spring-framework/commit/a409233e80c46791149e74de79bef90fecf7a67f, https://github.com/spring-projects/spring-framework/commit/bf7fa39a48af5d2b6c5448f08b15e60b2ad870f6, https://github.com/spring-projects/spring-framework/commit/04141dee65ff5e078e2a9137ff7052351f6ab66c, https://github.com/spring-projects/spring-framework/commit/6ea3441adf5bbd9e618f4dad3a2cb3a0e0b22fbe, https://github.com/spring-projects/spring-framework/commit/de453ace86074886b87184bf09a770e07e933d45  **Backported to:** [4.3.19](https://github.com/spring-projects/spring-framework/milestone/168?closed=1)","closed","type: enhancement,","spring-projects-issues","2018-08-14T08:49:33Z","2019-01-11T13:40:22Z"
"","21203","org.springframework.web.reactive.function.UnsupportedMediaTypeException: Content type 'application/json;charset=UTF-8' not supported [SPR-16662]","**[Ramachandran Srinivsan](https://jira.spring.io/secure/ViewProfile.jspa?name=myselfram)** opened **[SPR-16662](https://jira.spring.io/browse/SPR-16662?redirect=false)** and commented  org.springframework.web.reactive.function.UnsupportedMediaTypeException: Content type 'application/json;charset=UTF-8' not supported at org.springframework.web.reactive.function.BodyInserters.lambda$null$11(BodyInserters.java:353) ~[spring-webflux-5.0.4.RELEASE.jar:5.0.4.RELEASE] at java.util.Optional.orElseGet(Optional.java:267) ~[na:1.8.0_161] at org.springframework.web.reactive.function.BodyInserters.lambda$bodyInserterFor$12(BodyInserters.java:349) ~[spring-webflux-5.0.4.RELEASE.jar:5.0.4.RELEASE] at org.springframework.web.reactive.function.server.DefaultServerResponseBuilder$BodyInserterServerResponse.writeToInternal(DefaultServerResponseBuilder.java:404) ~[spring-webflux-5.0.4.RELEASE.jar:5.0.4.RELEASE] at org.springframework.web.reactive.function.server.DefaultServerResponseBuilder$AbstractServerResponse.writeTo(DefaultServerResponseBuilder.java:336) ~[spring-webflux-5.0.4.RELEASE.jar:5.0.4.RELEASE] at org.springframework.boot.autoconfigure.web.reactive.error.AbstractErrorWebExceptionHandler.write(AbstractErrorWebExceptionHandler.java:250) ~[spring-boot-autoconfigure-2.0.0.RELEASE.jar:2.0.0.RELEASE] at org.springframework.boot.autoconfigure.web.reactive.error.AbstractErrorWebExceptionHandler.lambda$handle$1(AbstractErrorWebExceptionHandler.java:242) ~[spring-boot-autoconfigure-2.0.0.RELEASE.jar:2.0.0.RELEASE] at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:118) [reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1069) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:198) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1626) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:138) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:172) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150) [reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1626) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1440) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1314) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.Mono.subscribe(Mono.java:3080) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.Operators.complete(Operators.java:125) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:45) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.Mono.subscribe(Mono.java:3080) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:97) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:185) [reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:251) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:100) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.Operators.error(Operators.java:175) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:129) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:53) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.Mono.subscribe(Mono.java:3080) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:97) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.Operators.error(Operators.java:175) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.MonoError.subscribe(MonoError.java:52) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150) [reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1069) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:198) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:198) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1069) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.MonoIgnoreThen$ThenAcceptInner.onNext(MonoIgnoreThen.java:290) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1626) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.MonoIgnoreThen$ThenAcceptInner.onSubscribe(MonoIgnoreThen.java:279) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:161) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:53) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:148) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150) [reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:76) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.innerNext(FluxConcatMap.java:271) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:803) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:115) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1626) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:156) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1440) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1314) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:59) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.Mono.subscribe(Mono.java:3080) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:418) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:210) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:128) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:61) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.FluxConcatMap.subscribe(FluxConcatMap.java:121) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.MonoNext.subscribe(MonoNext.java:40) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.Mono.subscribe(Mono.java:3080) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:167) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:70) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.MonoPeekTerminal.subscribe(MonoPeekTerminal.java:61) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.ipc.netty.channel.ChannelOperations.applyHandler(ChannelOperations.java:380) ~[reactor-netty-0.7.5.RELEASE.jar:0.7.5.RELEASE] at reactor.ipc.netty.http.server.HttpServerOperations.onHandlerStart(HttpServerOperations.java:397) ~[reactor-netty-0.7.5.RELEASE.jar:0.7.5.RELEASE] at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163) ~[netty-common-4.1.22.Final.jar:4.1.22.Final] at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:404) ~[netty-common-4.1.22.Final.jar:4.1.22.Final] at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:463) ~[netty-transport-4.1.22.Final.jar:4.1.22.Final] at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:886) ~[netty-common-4.1.22.Final.jar:4.1.22.Final] at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_161]   ---  **Affects:** 5.0.4  **Attachments:** - [spring-webflux-reactive-rest-api-demo-master.jar](https://jira.spring.io/secure/attachment/25443/spring-webflux-reactive-rest-api-demo-master.jar) (_11.57 kB_)","closed","in: web,","spring-projects-issues","2018-03-29T02:30:31Z","2019-01-11T15:05:46Z"
"","21202","org.springframework.core.codec.CodecException: No SSE encoder configured and the data is not String. [SPR-16661]","**[Ramachandran Srinivsan](https://jira.spring.io/secure/ViewProfile.jspa?name=myselfram)** opened **[SPR-16661](https://jira.spring.io/browse/SPR-16661?redirect=false)** and commented  org.springframework.core.codec.CodecException: No SSE encoder configured and the data is not String. at org.springframework.http.codec.ServerSentEventHttpMessageWriter.encodeData(ServerSentEventHttpMessageWriter.java:164) ~[spring-web-5.0.4.RELEASE.jar:5.0.4.RELEASE] at org.springframework.http.codec.ServerSentEventHttpMessageWriter.lambda$encode$0(ServerSentEventHttpMessageWriter.java:138) ~[spring-web-5.0.4.RELEASE.jar:5.0.4.RELEASE] at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:100) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:108) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] at com.mongodb.reactivestreams.client.internal.ObservableToPublisher$1.onNext(ObservableToPublisher.java:68) ~[mongodb-driver-reactivestreams-1.7.1.jar:na] at com.mongodb.async.client.AbstractSubscription.onNext(AbstractSubscription.java:135) ~[mongodb-driver-async-3.6.3.jar:na] at com.mongodb.async.client.AbstractSubscription.processResultsQueue(AbstractSubscription.java:203) ~[mongodb-driver-async-3.6.3.jar:na] at com.mongodb.async.client.AbstractSubscription.tryProcessResultsQueue(AbstractSubscription.java:159) ~[mongodb-driver-async-3.6.3.jar:na] at com.mongodb.async.client.AbstractSubscription.addToQueue(AbstractSubscription.java:117) ~[mongodb-driver-async-3.6.3.jar:na] at com.mongodb.async.client.MongoIterableSubscription$2.onResult(MongoIterableSubscription.java:101) ~[mongodb-driver-async-3.6.3.jar:na] at com.mongodb.async.client.MongoIterableSubscription$2.onResult(MongoIterableSubscription.java:87) ~[mongodb-driver-async-3.6.3.jar:na] at com.mongodb.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:135) ~[mongodb-driver-core-3.6.3.jar:na] at com.mongodb.operation.AsyncQueryBatchCursor.next(AsyncQueryBatchCursor.java:99) ~[mongodb-driver-core-3.6.3.jar:na] at com.mongodb.async.client.MongoIterableSubscription.requestMoreData(MongoIterableSubscription.java:87) ~[mongodb-driver-async-3.6.3.jar:na] at com.mongodb.async.client.MongoIterableSubscription$1.onResult(MongoIterableSubscription.java:55) ~[mongodb-driver-async-3.6.3.jar:na] at com.mongodb.async.client.MongoIterableSubscription$1.onResult(MongoIterableSubscription.java:48) ~[mongodb-driver-async-3.6.3.jar:na] at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:49) ~[mongodb-driver-core-3.6.3.jar:na] at com.mongodb.async.client.AsyncOperationExecutorImpl$1$1.onResult(AsyncOperationExecutorImpl.java:70) ~[mongodb-driver-async-3.6.3.jar:na] at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:49) ~[mongodb-driver-core-3.6.3.jar:na] at com.mongodb.operation.FindOperation$3.onResult(FindOperation.java:822) ~[mongodb-driver-core-3.6.3.jar:na] at com.mongodb.operation.OperationHelper$ReferenceCountedReleasingWrappedCallback.onResult(OperationHelper.java:353) ~[mongodb-driver-core-3.6.3.jar:na] at com.mongodb.operation.CommandOperationHelper$1.onResult(CommandOperationHelper.java:389) ~[mongodb-driver-core-3.6.3.jar:na] at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:49) ~[mongodb-driver-core-3.6.3.jar:na] at com.mongodb.connection.DefaultServer$DefaultServerProtocolExecutor$2.onResult(DefaultServer.java:207) ~[mongodb-driver-core-3.6.3.jar:na] at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:49) ~[mongodb-driver-core-3.6.3.jar:na] at com.mongodb.connection.CommandProtocolImpl$1.onResult(CommandProtocolImpl.java:102) ~[mongodb-driver-core-3.6.3.jar:na] at com.mongodb.connection.DefaultConnectionPool$PooledConnection$1.onResult(DefaultConnectionPool.java:458) ~[mongodb-driver-core-3.6.3.jar:na] at com.mongodb.connection.UsageTrackingInternalConnection$2.onResult(UsageTrackingInternalConnection.java:110) ~[mongodb-driver-core-3.6.3.jar:na] at com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(ErrorHandlingResultCallback.java:49) ~[mongodb-driver-core-3.6.3.jar:na] at com.mongodb.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:381) ~[mongodb-driver-core-3.6.3.jar:na] at com.mongodb.connection.InternalStreamConnection$2$1.onResult(InternalStreamConnection.java:359) ~[mongodb-driver-core-3.6.3.jar:na] at com.mongodb.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:651) ~[mongodb-driver-core-3.6.3.jar:na] at com.mongodb.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(InternalStreamConnection.java:618) ~[mongodb-driver-core-3.6.3.jar:na] at com.mongodb.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:487) ~[mongodb-driver-core-3.6.3.jar:na] at com.mongodb.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:484) ~[mongodb-driver-core-3.6.3.jar:na] at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:236) ~[mongodb-driver-core-3.6.3.jar:na] at com.mongodb.connection.InternalStreamConnection.readAsync(InternalStreamConnection.java:484) ~[mongodb-driver-core-3.6.3.jar:na] at com.mongodb.connection.InternalStreamConnection.access$1100(InternalStreamConnection.java:74) ~[mongodb-driver-core-3.6.3.jar:na] at com.mongodb.connection.InternalStreamConnection$MessageHeaderCallback.onResult(InternalStreamConnection.java:608) ~[mongodb-driver-core-3.6.3.jar:na] at com.mongodb.connection.InternalStreamConnection$MessageHeaderCallback.onResult(InternalStreamConnection.java:593) ~[mongodb-driver-core-3.6.3.jar:na] at com.mongodb.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:487) ~[mongodb-driver-core-3.6.3.jar:na] at com.mongodb.connection.InternalStreamConnection$5.completed(InternalStreamConnection.java:484) ~[mongodb-driver-core-3.6.3.jar:na] at com.mongodb.connection.netty.NettyStream.readAsync(NettyStream.java:236) ~[mongodb-driver-core-3.6.3.jar:na] at com.mongodb.connection.netty.NettyStream.handleReadResponse(NettyStream.java:266) ~[mongodb-driver-core-3.6.3.jar:na] at com.mongodb.connection.netty.NettyStream.access$600(NettyStream.java:66) ~[mongodb-driver-core-3.6.3.jar:na] at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:325) ~[mongodb-driver-core-3.6.3.jar:na] at com.mongodb.connection.netty.NettyStream$InboundBufferHandler.channelRead0(NettyStream.java:322) ~[mongodb-driver-core-3.6.3.jar:na] at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:105) ~[netty-transport-4.1.22.Final.jar:4.1.22.Final] at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362) ~[netty-transport-4.1.22.Final.jar:4.1.22.Final] at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348) ~[netty-transport-4.1.22.Final.jar:4.1.22.Final] at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340) ~[netty-transport-4.1.22.Final.jar:4.1.22.Final] at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1414) ~[netty-transport-4.1.22.Final.jar:4.1.22.Final] at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362) ~[netty-transport-4.1.22.Final.jar:4.1.22.Final] at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348) ~[netty-transport-4.1.22.Final.jar:4.1.22.Final] at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:945) ~[netty-transport-4.1.22.Final.jar:4.1.22.Final] at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:146) ~[netty-transport-4.1.22.Final.jar:4.1.22.Final] at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:645) ~[netty-transport-4.1.22.Final.jar:4.1.22.Final] at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:580) ~[netty-transport-4.1.22.Final.jar:4.1.22.Final] at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:497) ~[netty-transport-4.1.22.Final.jar:4.1.22.Final] at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:459) ~[netty-transport-4.1.22.Final.jar:4.1.22.Final] at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:886) ~[netty-common-4.1.22.Final.jar:4.1.22.Final] at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) ~[netty-common-4.1.22.Final.jar:4.1.22.Final] at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_161]   ---  **Affects:** 5.0.4  **Attachments:** - [spring-webflux-reactive-rest-api-demo-master.jar](https://jira.spring.io/secure/attachment/25442/spring-webflux-reactive-rest-api-demo-master.jar) (_11.57 kB_) - [spring-webflux-reactive-rest-api-demo-master.zip](https://jira.spring.io/secure/attachment/25457/spring-webflux-reactive-rest-api-demo-master.zip) (_47.50 kB_)","closed","status: invalid,","spring-projects-issues","2018-03-29T02:28:06Z","2019-01-12T05:19:07Z"
"","21878","Memoized implementation for PathMatchingResourcePatternResolver [SPR-17344]","**[Rahul Shinde](https://jira.spring.io/secure/ViewProfile.jspa?name=rsjira22)** opened **[SPR-17344](https://jira.spring.io/browse/SPR-17344?redirect=false)** and commented  For applications that get bundled as an uber jar, while benchmarking the startup timings, it was found that there is always a fixed cost associated with every lookup that is performed by PathMatchingResourcePatternResolver (PMRPR) while component scanning.  This is a result of opening up the jar file and traversing the entries each time when PMRPR is used to find the resources.  With 10K+ beans and large number of packages for component-scanning, this adds up pretty quick.   After adding a Memoized implementation of the PathMatchingResourcePatternResolver, the refresh timings dropped around 2-4 minutes depending on the hardware spec.  The Memoized implementation builds a cache when a given jar is looked up the very first time. For subsequent lookups, it simply does a binary search over the cached entries.   This memoized implementation is attached to the ApplicationContext by overriding getResourcePatternResolver(..)  It would be good to have this as an option for applications that want to use a memoized version of PMRPR.         ---  **Affects:** 5.0.9, 5.1 GA  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1981","closed","in: core,","spring-projects-issues","2018-10-05T03:22:27Z","2020-04-15T12:59:28Z"
"","21877","Allow applications to specify a custom set of beans rather than the default for EventListener candidates [SPR-17343]","**[Rahul Shinde](https://jira.spring.io/secure/ViewProfile.jspa?name=rsjira22)** opened **[SPR-17343](https://jira.spring.io/browse/SPR-17343?redirect=false)** and commented  While benchmarking an application that has more than 10K+ beans, around 8 - 10 seconds was spent in identifying just the EventListener candidates during startup.   Since we have the information for EventListener implementations beforehand, would like to provide that to avoid introspection of all other beans in the registry.  Applications can then extend EventListenerMethodProcessor and provide their own implementation that specifies subset of bean names to inspect.      ---  **Affects:** 5.0.9, 5.1 GA  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1980","closed","in: core,","spring-projects-issues","2018-10-05T01:53:41Z","2021-11-24T14:41:49Z"
"","21752","Use CompletionService to replace ExecutorSerive in the method org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.submit(Callable) [SPR-17219]","**[qudh1](https://jira.spring.io/secure/ViewProfile.jspa?name=qudh1)** opened **[SPR-17219](https://jira.spring.io/browse/SPR-17219?redirect=false)** and commented  The CompletionService is basically a Queue which returns the Futures in the order which they complete.It would be better to use CompletionService to replace ExecutorSerive in the method org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.submit(Callable\).  Current code is   ```java @Override @Override public  Future submit(Callable task) { ExecutorService executor = getThreadPoolExecutor(); try { return executor.submit(task); } catch (RejectedExecutionException ex) { throw new TaskRejectedException(""Executor ["" + executor + ""] did not accept task: "" + task, ex); } } ```  Code implement by CompletionService is   ```java  @Override @Override public  Future submit(Callable task) { ExecutorService executor = getThreadPoolExecutor(); CompletionService completionService = new ExecutorCompletionService<>(executor);  try { return completionService.submit(task); } catch (RejectedExecutionException ex) { throw new TaskRejectedException(""Executor ["" + executor + ""] did not accept task: "" + task, ex); } }  ```    ---  **Affects:** 5.0.8  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1945","closed","in: core,","spring-projects-issues","2018-08-27T09:47:58Z","2021-11-24T14:44:36Z"
"","21413","Support for form parameters with HTTP DELETE [SPR-16874]","**[Putinas Piliponis](https://jira.spring.io/secure/ViewProfile.jspa?name=lapkritinis)** opened **[SPR-16874](https://jira.spring.io/browse/SPR-16874?redirect=false)** and commented  I have issue, that identical methods different only by annotation `@DeleteMapping` vs `@GetMapping`- `@DeleteMapping` doesn't recognise passed params.  Here are methods. I am using forked version of `gs-rest-service` example. Full fork can be found here: https://github.com/Lapkritinis/gs-rest-service  Note: I have written MockMvc test and it passes, BUT real world Rest API fails with error: ""Required String parameter 'name' is not present""  Here are the methods in question. I removed default intentionally.  ```java     @DeleteMapping(value = ""/greeting"")     public Greeting notWorking(@RequestParam(value=""name"") String name) {         return new Greeting(counter.incrementAndGet(),                             String.format(template, name));     }      @GetMapping(value = ""/greeting"")     public Greeting working(@RequestParam(value=""name"", defaultValue = ""World"") String name) {         return new Greeting(counter.incrementAndGet(),                 String.format(template, name));     } ```    ---  **Affects:** 5.0.6  **Reference URL:** https://github.com/Lapkritinis/gs-rest-service","closed","type: enhancement,","spring-projects-issues","2018-05-25T18:23:27Z","2018-07-26T08:09:33Z"
"","21325","Support wildcard patterns in @PropertySource locations [SPR-16785]","**[Pratapi Hemant Patel](https://jira.spring.io/secure/ViewProfile.jspa?name=hemantsonu20@gmail.com)** opened **[SPR-16785](https://jira.spring.io/browse/SPR-16785?redirect=false)** and commented  Currently `@PropertySource` supports only absolute path  ```java @PropertySource(""classpath:prod/a.properties"") // supported ```  But regex are not supported.  ```java @PropertySource(""classpath:prod/*.properties"") // not supported ```    ---  **Affects:** 4.3.16  **Reference URL:** https://stackoverflow.com/questions/50079355/add-all-properties-in-a-given-resources-folder-to-springs-environment-class","open","status: pending-design-work,","spring-projects-issues","2018-05-01T06:16:23Z","2020-08-25T14:36:20Z"
"","21523","Spring adding 'chunked' transfer encoding even if this header already exists [SPR-16985]","**[Pradeep Gadi](https://jira.spring.io/secure/ViewProfile.jspa?name=pradeepgadi@gmail.com)** opened **[SPR-16985](https://jira.spring.io/browse/SPR-16985?redirect=false)** and commented  In our Middleware project we forward rest response from another service as it is to angular UI. The response we are getting to the Middleware already having transfer-encoding →chunked header. while returning the same response from our middleware to angular UI spring adding transfer-encoding again. see below response  content-type →application/json;charset=UTF-8 date →Fri, 29 Jun 2018 07:02:06 GMT transfer-encoding →chunked, chunked     Because of this F5 not able to send the response properly. Spring should not add transfer-encoding If this header already present in the response.     ---  **Affects:** 5.0.5  **Issue Links:** - #19776 HTTP Response should not contain both Transfer-Encoding and Content-Length headers","closed","in: web,","spring-projects-issues","2018-06-29T07:21:28Z","2021-10-25T04:08:29Z"
"","21769","AnnotationTransactionAspect weaves to all public methods in CGLIB proxy include toString, hashCode etc. [SPR-17236]","**[Plyushchev Anton](https://jira.spring.io/secure/ViewProfile.jspa?name=tatatatitatata)** opened **[SPR-17236](https://jira.spring.io/browse/SPR-17236?redirect=false)** and commented  When setting up the LTW and my own transactional aspect, I came across the strange behavior of AnnotationTransactionAspect.   The test project is available on the github. Consists of SpringBootApplication, Service and Repository. On Service and Repository using annotations Transactional. Application settings consist of:  ```java @SpringBootApplication @EnableLoadTimeWeaving(aspectjWeaving = EnableLoadTimeWeaving.AspectJWeaving.AUTODETECT) @EnableTransactionManagement(mode = AdviceMode.ASPECTJ) ```  And in aop.xml:  ```java  ```  1. When you start with VM options:  ```java -javaagent:src/lib/spring-instrument-5.0.8.RELEASE.jar ```  CGLIB proxy for Repository is created and AnnotationTransactionAspect weaves to all CGLIB proxy public methods, include toString, hashCode etc. And AnnotationTransactionAspect doesn't weave to MyServiceMethod 1. When you start with VM options:  ```java -javaagent:src/lib/aspectjweaver-1.9.1.jar ```  It won't run because need to specify a custom LoadTimeWeaver or start your Java virtual machine with Spring's agent. 1. When you start with both VM options:  ```java -javaagent:src/lib/spring-instrument-5.0.8.RELEASE.jar  ```  ```java -javaagent:src/lib/aspectjweaver-1.9.1.jar ```  AnnotationTransactionAspect weaves to MyServiceMethod, MyRepositoryMethod (like expected) and to all MyRepository CGLIB proxy methods (include second weaves to MyRepositoryMethod).  It seems like bad behavior AnnotationTransactionAspect or poor documentation for LTW and agents: spring-instrument, aspectjweaver.      ---  **Affects:** 5.0.8  **Reference URL:** https://github.com/tatatatitatata/test-AOP","open","in: core,","spring-projects-issues","2018-09-03T08:16:22Z","2019-01-11T14:02:07Z"
"","21443","Add JDBC SqlValue classes for arrays [SPR-16904]","**[Philippe Marschall](https://jira.spring.io/secure/ViewProfile.jspa?name=marschall)** opened **[SPR-16904](https://jira.spring.io/browse/SPR-16904?redirect=false)** and commented  We are looking at converting some of our inlist usage to SQL arrays. We were a bit surprised that using arrays with `JdbcTemplate` requires implementing a custom `SqlValue`.  We propose introducing two classes.  - An abstract base class that binds and frees the array but that leaves creating the array to a concrete subclass. - A concrete subclass that creates the array using `Connection.createArrayOf(String, Object[])`  The reason for this is that users might want to or may even have to use vendor extensions for creating arrays. We know of two such vendor extensions that might be interesting:  - Oracle requires using a vendor method to create an array as Oracle does not support anonymous arrays. - PostgreS offers a vendor method for creating arrays from arrays of primitive arrays, therefore eliminating the need for boxing.  We do not propose to include subclasses for them.  Potentially, for convenience reasons `java.util.Collection` types could also be supported, for now we decided against this.   ---  **Affects:** 5.0 GA  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1850","closed","status: superseded,","spring-projects-issues","2018-06-05T05:25:07Z","2021-12-21T09:25:39Z"
"","21806","BeanValidationPostProcessor(afterInitialization=true) fails for cglib proxied bean [SPR-17273]","**[Philipp Foermer](https://jira.spring.io/secure/ViewProfile.jspa?name=pfoermer)** opened **[SPR-17273](https://jira.spring.io/browse/SPR-17273?redirect=false)** and commented  **Is** An instance of ""org.springframework.validation.beanvalidation.BeanValidationPostProcessor"" with property ""afterInitialization=true"" fails to validate a bean instance for which a cglib proxy has been created around.  Example: If a bean class declares a javax.validation.NotNull constraint for a bean property, then the validation fails on the cglib proxy instance as Spring uses delegation for proxies and the bean property is null on the cglib proxy instance.  ```java @Repository public class LegacyDao {      @NotNull     private SessionFactory sessionFactory;       public void setSessionFactory(SessionFactory sessionFactory) {        this.sessionFactory = sessionFactory;     }  }  ```  For LegacyDao Spring creates an AOP proxy around for PersistenceExceptionTranslator, because of the Repository annotation. If LegacyDao is validated by BeanValidationPostProcessor(afterInitialization=true), then the validation fails.   **Exepected behaviour** Validation performed by BeanValidationPostProcessor for a proxy instance should be done on the ultimate target object and not on intermediate proxy instances.      ---  **Affects:** 4.3.17  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/77887ef739d3cb6a85bee6cc1027fc200bea3698","closed","type: enhancement,","spring-projects-issues","2018-09-13T12:48:21Z","2018-09-21T07:52:16Z"
"","21172","Race-Condition between Listening to SessionSubscribeEvent and sending initial data to this subscribed user [SPR-16631]","**[Philip Riecks](https://jira.spring.io/secure/ViewProfile.jspa?name=rieckpil)** opened **[SPR-16631](https://jira.spring.io/browse/SPR-16631?redirect=false)** and commented  My use case is the following: We have several UI dashboards which connect to our backend Spring Boot Application (I tried it with Spring Boot Release 1.5.10 and 2.0.0) via Websocket. When a new dashboard connects to our backend we want to send initial data (e.g. the last state of a production machine) which is ""cached"" in a HashMap. Therefor I listen to the SessionSubscribeEvent and check the subscribed topic and if we have data for this topic in our cache I send initial data to exactly this user using the created session id. While testing this approach (I use a dashboard which is interested in three machines which all have a valid cache entry on the backend) I sometimes get all the requested machines with the connection and sometimes none or only two or one.  I enabled TRACE logging for the org.springframework.messaging package and checked the logs. While searching through the logs I found that my EventListener method is sometimes too ""fast"" with sending the initial data and the internal processing of the SUBSCRIBE message of my dashboard has not finished and therefor my dashboard won't get the data.  I attached a screenshot of the logs and my central classes involved in this process. The logfile is showing the case when I don't get initial data for my machine M1 but for M2 and M3. While using Thread.sleep(X); everything works fine.  ```java // My Cache and EventListener for the SubscribeEvent @Component @Slf4j public class WebSocketCache {    private ConcurrentHashMap>> webSocketCache;   private final ObjectMapper mapper;   private final SimpMessageSendingOperations messagingTemplate;    public WebSocketCache(SimpMessageSendingOperations messagingTemplate, ObjectMapper mapper) {     this.messagingTemplate = messagingTemplate;     this.mapper = mapper;   }    /**    * Inits the cache.    */   @PostConstruct   public void init() {     webSocketCache = new ConcurrentHashMap>>();     webSocketCache.put(""machineState"", new ConcurrentHashMap<>());     webSocketCache.put(""unitrelease"", new ConcurrentHashMap<>());   }    /**    * Handle machine state message published event.    *    * @param broadcastTelegram the broadcast telegram    */   @EventListener   public void handleMachineStateMessagePublishedEvent(BroadcastTelegram broadcastTelegram) {      String machineId = broadcastTelegram.getMachineId();     String messageType = broadcastTelegram.getMessageType();      if (webSocketCache.get(messageType).containsKey(machineId)) {       webSocketCache.get(messageType).replace(machineId, broadcastTelegram);     } else {       webSocketCache.get(messageType).put(machineId, broadcastTelegram);     }   }    /**    * Send latest dashboard data when a new dashboards subscribes to a topic.    *    * @param event the event    * @throws InterruptedException thrown when thread is interrupted    */   @EventListener   public void onWebSocketSessionSubscribeEvent(SessionSubscribeEvent event) throws InterruptedException {      StompHeaderAccessor headers = StompHeaderAccessor.wrap(event.getMessage());     String destinationTopic = headers.getDestination().split(""topic"")[1].split(""/"")[1];     String machineId = headers.getDestination().split(""topic"")[1].split(""/"")[2];      if (webSocketCache.get(destinationTopic).containsKey(machineId)) {       SimpMessageHeaderAccessor headerAccessor = SimpMessageHeaderAccessor.create(SimpMessageType.MESSAGE);       headerAccessor.setSessionId(headers.getSessionId());       headerAccessor.setLeaveMutable(true);        // This is necassry due to racing conditions with a thread of the Spring websocket framework which is processing the new SUBSCRIBE message internally.       // This other thread has finished processing the SUBSCRIBE message before we are able to send data       // Thread.sleep(10);        BroadcastTelegram cachedBroadcastTelegram = webSocketCache.get(destinationTopic).get(machineId);       try {         System.out.println(""Sending cached data to new initialized dashboard: "" + headers.getSessionId() + "" for machine: "" + cachedBroadcastTelegram.getMachineId());         System.out.println(""Message: "" + mapper.writeValueAsString(cachedBroadcastTelegram));         messagingTemplate.convertAndSendToUser(headers.getSessionId(), ""/topic/"" + cachedBroadcastTelegram.getMessageType() + ""/"" + cachedBroadcastTelegram.getMachineId(),             mapper.writeValueAsString(cachedBroadcastTelegram), headerAccessor.getMessageHeaders());       } catch (MessagingException | JsonProcessingException ex) {         log.warn(""Couldn't initialize dashboard with because of exception: "" + ex.getMessage());       }     }   }  } ```  ```java // The Websocket config @Configuration @EnableWebSocketMessageBroker public class WebSocketConfiguration implements WebSocketMessageBrokerConfigurer {    @Override   public void configureMessageBroker(MessageBrokerRegistry config) {     config.enableSimpleBroker(""/topic"", ""/user"");     config.setApplicationDestinationPrefixes(""/app"");     config.setUserDestinationPrefix(""/user"");   }    @Override   public void registerStompEndpoints(StompEndpointRegistry registry) {     registry.addEndpoint(""/socket"").setAllowedOrigins(""*"").withSockJS();   } }  ```  ---  **Affects:** 5.0 GA  **Attachments:** - [2018-03-23 08_01_36-workspace-sts-3.8.4.RELEASE - Spring - dps-das-worker-service_src_main_java_com_.png](https://jira.spring.io/secure/attachment/25432/2018-03-23+08_01_36-workspace-sts-3.8.4.RELEASE+-+Spring+-+dps-das-worker-service_src_main_java_com_.png) (_660.51 kB_)  **Issue Links:** - #21182 race condition when sending stomp message on connect  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ddb2bdf8c60c58a37e73fde060786e3d087b99aa, https://github.com/spring-projects/spring-framework/commit/3b4c7a40c0676b1013c20d69be535230e7e68433","closed","status: declined,","spring-projects-issues","2018-03-23T07:15:26Z","2019-01-12T16:21:37Z"
"","21760","Http method interceptor to handle method not allowed [SPR-17227]","**[Philip Kaufmann](https://jira.spring.io/secure/ViewProfile.jspa?name=pkaufmann)** opened **[SPR-17227](https://jira.spring.io/browse/SPR-17227?redirect=false)** and commented  Hello there  In our daily work with http resources, we found it very useful to control whether a specific HTTP method (e.g. PUT) is allowed or not. In the latter case, we like to handle the error code 405 by ourselves.  For example: a PUT on a ""task"" resource is not possible anymore, if the ""task"" has the state completed. We then want to respond with a Method not allowed (405).  We wrote a prototype to see if there's any interest in implementing this into the spring framework mvc module directly. Please see the reference URL.  We wrote a method interceptor that evaluates an expression similar to **`@PreAuthorize`**, that intercepts calls before any validation takes place. Allowing to return very early and not fill the handler method with boilerplate code.  e.g.  ```java @HttpMethodAllowed(""!isCompleted(#name)"") @PutMapping(value = ""/task/{name}"") public String putWithMethodAllowed(@PathVariable String name) { 	return name; } ```  This feature, if generalized, could also be used to return other client errors e.g. a 404 not found.     Remark for the prototype:  For simplicity, we only check if there are any more methods with the same path and add them to the ""Allow"" header. In future, we're also willing to implement a way that we check, if those methods are annotated with **`@HttpMethodAllowed`**, run the given method with the variables there and check, if it's still allowed or not to give a better response in the ""Allow"" header.  To manage this, we only take **`@PathVariable`** into consideration, we're not checking for queryparams or requestbodies etc.      ---  **Reference URL:** https://github.com/pkaufi/httpmethodallowed  2 votes, 3 watchers","closed","status: declined,","spring-projects-issues","2018-08-30T06:23:28Z","2020-03-06T14:43:46Z"
"","21771","Not working matcher Example  [SPR-17238]","**[Phil](https://jira.spring.io/secure/ViewProfile.jspa?name=sunflower-seed)** opened **[SPR-17238](https://jira.spring.io/browse/SPR-17238?redirect=false)** and commented  In the referenced source code and **also** in the documentation this exapmle is mentioned:  `emailAddress=(.?),`  As far as i can the this wont work, because the e-mail Address length is usually more than one char.  I propose to change it to  `emailAddress=(.*?),`  which works in my use case.   ---  **Reference URL:** https://github.com/spring-projects/spring-security/blob/master/web/src/main/java/org/springframework/security/web/authentication/preauth/x509/SubjectDnX509PrincipalExtractor.java#L39","closed","status: invalid,","spring-projects-issues","2018-09-03T17:33:33Z","2019-01-12T05:18:15Z"
"","21697","Create replacement API for handling merged annotations [SPR-17161]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-17161](https://jira.spring.io/browse/SPR-17161?redirect=false)** and commented  The existing `AnnotationUtils` and `AnnotatedElementUtils` have grown quite a bit over the years and could do with being revisited now that we have pretty comprehensive support for merged annotations throughout the framework.  Some common issues with the current utils classes include:  * Quite a broad API (~58 public methods between them) that can make it hard for users to find the right method. * Some performance concerns. The classes often appear near the top when profiling applications and a typical application will synthesize quite a few annotations. * Difficult to evolve. We have some ideas around using annotation processing at compile time to pre-compute some information. It's quite hard to currently plug this in to the existing code. * Complicated meta-data relationships. There's quite a complicated relationship between `AnnotatedTypeMetadata` and the utils and the meta-data API is different.  A new API could help us to determine which methods are really needed and provide the potential for more intelligent caching or pre-computed data.  ---  **Affects:** 5.1 RC1","closed","type: enhancement,","spring-projects-issues","2018-08-10T10:57:32Z","2019-03-23T18:36:58Z"
"","21551","Add support for cache-control: immutable [SPR-17013]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-17013](https://jira.spring.io/browse/SPR-17013?redirect=false)** and commented  Originally raised in the Spring Boot issue tracker ([#13715](https://github.com/spring-projects/spring-boot/issues/13715)):  > We are facing an issue where even we set all appropriate options delineated at: https://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html the caching still does not work completely on Firefox. The goal is to have static files cached on local browser for users, with no re-fetching if the cache has not expired. Whereas what we see is that the cache gets invalidated every other time (caches only half of the time, and the response code flip-flops between 200 and 304). Turns out that firefox relies on `cache-control: immutable` to make sure the cache does not get invalidated. >  > Looking at https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/http/CacheControl.html , there is no option to set that `immutable` flag, is it possible to add the option?    --- No further details from [SPR-17013](https://jira.spring.io/browse/SPR-17013?redirect=false)","closed","status: declined,","spring-projects-issues","2018-07-06T02:29:44Z","2020-04-01T14:21:23Z"
"","21506","Add checkstyle [SPR-16968]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-16968](https://jira.spring.io/browse/SPR-16968?redirect=false)** and commented  Adding checkstyle to the Spring Framework build would help catch common coding issues and aid contributors.   ---  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1865","closed","type: task,","spring-projects-issues","2018-06-21T17:03:36Z","2018-07-26T08:09:35Z"
"","21472","Avoid unnecessary synthesizable annotation processing [SPR-16933]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-16933](https://jira.spring.io/browse/SPR-16933?redirect=false)** and commented  I've been looking at the performance involved with using the `SimpleMetadataReader` and I suspect that it might be possible to improve `AnnotationUtils`.  I started with the following application that simulates the class parsing involved in a typical Spring Boot application  https://gist.github.com/philwebb/a22ea7bf5b575abd058a748fe12838d0  This app takes about 130ms to read the metadata from those 106 classes. If I change the code to use an empty ASM visitor, parsing takes ~30ms Reading just class bytes into an array takes ~22ms (so ASM parsing itself is quite fast)  If I remove the code that visits annotations so no `AnnotationAttributes` are read, it takes ~60ms.  Looking at the profiler a lot of time is spent in `AnnotationUtils` so I created a second sample:  https://gist.github.com/philwebb/f7cdc99401af8e063853b2ed574e9277  The `NAMES` being used here are the same as were ultimately used with the first sample. This one is reading annotation data for 413 classes (starting from their String name) and it takes ~93ms.    ---  **Affects:** 5.0.7  **Attachments:** - [Screen Shot 2018-06-11 at 5.13.56 PM.png](https://jira.spring.io/secure/attachment/25744/Screen+Shot+2018-06-11+at+5.13.56+PM.png) (_174.80 kB_)  **Issue Links:** - #20609 Annotations on generic interface methods not found by AnnotationUtils - #21208 Reduce ClassUtils.forName overhead (in particular for annotation introspection purposes) - #21216 Comprehensively cache annotated methods for interfaces and superclasses - #21271 Avoid repeated superclass introspection in AnnotationUtils.findAnnotation - #19660 Spring internal configuration classes can no longer use `@EventListener` - #21702 `@Scheduled` task runs twice on bean with target-class scoped proxy (when injected)  0 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2018-06-12T00:30:54Z","2019-03-03T14:19:13Z"
"","21441","Spring Boot DevTools on 5.1 fails with java.lang.LinkageError: loader attempted duplicate class definition [SPR-16902]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-16902](https://jira.spring.io/browse/SPR-16902?redirect=false)** and commented  Spring Boot recently upgrade to Framework 5.1 SNAPSHOTS and we're now seeing ""loader attempted duplicate class definition"" errors with our devtools integration tests on Java 9 and Java 10 (Java 8 is fine).  [Here's an example of a failing build](https://ci.spring.io/teams/spring-boot/pipelines/spring-boot/jobs/jdk9-build/builds/1283).  ``` Caused by: org.springframework.aop.framework.AopConfigException: Could not generate CGLIB subclass of class org.springframework.boot.autoconfigure.http.HttpMessageConverters: Common causes of this problem include using a final class or a non-visible class; nested exception is org.springframework.cglib.core.CodeGenerationException: java.lang.LinkageError-->loader (instance of  jdk/internal/loader/ClassLoaders$AppClassLoader): attempted  duplicate class definition for name: ""org/springframework/boot/autoconfigure/http/HttpMessageConverters$$EnhancerBySpringCGLIB$$1d90bff9"" 	at org.springframework.aop.framework.CglibAopProxy.getProxy(CglibAopProxy.java:208) ~[spring-aop-5.1.0.BUILD-SNAPSHOT.jar:5.1.0.BUILD-SNAPSHOT] 	at org.springframework.aop.framework.ProxyFactory.getProxy(ProxyFactory.java:110) ~[spring-aop-5.1.0.BUILD-SNAPSHOT.jar:5.1.0.BUILD-SNAPSHOT] 	at org.springframework.context.annotation.ContextAnnotationAutowireCandidateResolver.buildLazyResolutionProxy(ContextAnnotationAutowireCandidateResolver.java:117) ~[spring-context-5.1.0.BUILD-SNAPSHOT.jar:5.1.0.BUILD-SNAPSHOT] 	at org.springframework.context.annotation.ContextAnnotationAutowireCandidateResolver.getLazyResolutionProxyIfNecessary(ContextAnnotationAutowireCandidateResolver.java:52) ~[spring-context-5.1.0.BUILD-SNAPSHOT.jar:5.1.0.BUILD-SNAPSHOT] 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1062) ~[spring-beans-5.1.0.BUILD-SNAPSHOT.jar:5.1.0.BUILD-SNAPSHOT] 	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:818) ~[spring-beans-5.1.0.BUILD-SNAPSHOT.jar:5.1.0.BUILD-SNAPSHOT] 	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:724) ~[spring-beans-5.1.0.BUILD-SNAPSHOT.jar:5.1.0.BUILD-SNAPSHOT] 	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:197) ~[spring-beans-5.1.0.BUILD-SNAPSHOT.jar:5.1.0.BUILD-SNAPSHOT] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1276) ~[spring-beans-5.1.0.BUILD-SNAPSHOT.jar:5.1.0.BUILD-SNAPSHOT] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1133) ~[spring-beans-5.1.0.BUILD-SNAPSHOT.jar:5.1.0.BUILD-SNAPSHOT] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543) ~[spring-beans-5.1.0.BUILD-SNAPSHOT.jar:5.1.0.BUILD-SNAPSHOT] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:503) ~[spring-beans-5.1.0.BUILD-SNAPSHOT.jar:5.1.0.BUILD-SNAPSHOT] 	... 34 common frames omitted Caused by: org.springframework.cglib.core.CodeGenerationException: java.lang.LinkageError-->loader (instance of  jdk/internal/loader/ClassLoaders$AppClassLoader): attempted  duplicate class definition for name: ""org/springframework/boot/autoconfigure/http/HttpMessageConverters$$EnhancerBySpringCGLIB$$1d90bff9"" 	at org.springframework.cglib.core.ReflectUtils.defineClass(ReflectUtils.java:502) ~[spring-core-5.1.0.BUILD-SNAPSHOT.jar:5.1.0.BUILD-SNAPSHOT] 	at org.springframework.cglib.core.AbstractClassGenerator.generate(AbstractClassGenerator.java:359) ~[spring-core-5.1.0.BUILD-SNAPSHOT.jar:5.1.0.BUILD-SNAPSHOT] 	at org.springframework.cglib.proxy.Enhancer.generate(Enhancer.java:582) ~[spring-core-5.1.0.BUILD-SNAPSHOT.jar:5.1.0.BUILD-SNAPSHOT] 	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:106) ~[spring-core-5.1.0.BUILD-SNAPSHOT.jar:5.1.0.BUILD-SNAPSHOT] 	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:104) ~[spring-core-5.1.0.BUILD-SNAPSHOT.jar:5.1.0.BUILD-SNAPSHOT] 	at org.springframework.cglib.core.internal.LoadingCache$2.call(LoadingCache.java:54) ~[spring-core-5.1.0.BUILD-SNAPSHOT.jar:5.1.0.BUILD-SNAPSHOT] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na] 	at org.springframework.cglib.core.internal.LoadingCache.createEntry(LoadingCache.java:61) ~[spring-core-5.1.0.BUILD-SNAPSHOT.jar:5.1.0.BUILD-SNAPSHOT] 	at org.springframework.cglib.core.internal.LoadingCache.get(LoadingCache.java:34) ~[spring-core-5.1.0.BUILD-SNAPSHOT.jar:5.1.0.BUILD-SNAPSHOT] 	at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData.get(AbstractClassGenerator.java:130) ~[spring-core-5.1.0.BUILD-SNAPSHOT.jar:5.1.0.BUILD-SNAPSHOT] 	at org.springframework.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:315) ~[spring-core-5.1.0.BUILD-SNAPSHOT.jar:5.1.0.BUILD-SNAPSHOT] 	at org.springframework.cglib.proxy.Enhancer.createHelper(Enhancer.java:569) ~[spring-core-5.1.0.BUILD-SNAPSHOT.jar:5.1.0.BUILD-SNAPSHOT] 	at org.springframework.cglib.proxy.Enhancer.createClass(Enhancer.java:416) ~[spring-core-5.1.0.BUILD-SNAPSHOT.jar:5.1.0.BUILD-SNAPSHOT] 	at org.springframework.aop.framework.ObjenesisCglibAopProxy.createProxyClassAndInstance(ObjenesisCglibAopProxy.java:58) ~[spring-aop-5.1.0.BUILD-SNAPSHOT.jar:5.1.0.BUILD-SNAPSHOT] 	at org.springframework.aop.framework.CglibAopProxy.getProxy(CglibAopProxy.java:205) ~[spring-aop-5.1.0.BUILD-SNAPSHOT.jar:5.1.0.BUILD-SNAPSHOT] 	... 45 common frames omitted Caused by: java.lang.LinkageError: loader (instance of  jdk/internal/loader/ClassLoaders$AppClassLoader): attempted  duplicate class definition for name: ""org/springframework/boot/autoconfigure/http/HttpMessageConverters$$EnhancerBySpringCGLIB$$1d90bff9"" 	at java.base/java.lang.ClassLoader.defineClass1(Native Method) ~[na:na] 	at java.base/java.lang.System$2.defineClass(System.java:2120) ~[na:na] 	at java.base/java.lang.invoke.MethodHandles$Lookup.defineClass(MethodHandles.java:964) ~[na:na] 	at java.base/jdk.internal.reflect.GeneratedMethodAccessor25.invoke(Unknown Source) ~[na:na] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na] 	at java.base/java.lang.reflect.Method.invoke(Method.java:564) ~[na:na] 	at org.springframework.cglib.core.ReflectUtils.defineClass(ReflectUtils.java:498) ~[spring-core-5.1.0.BUILD-SNAPSHOT.jar:5.1.0.BUILD-SNAPSHOT] 	... 59 common frames omitted ```  The same tests on Spring Boot 2.0 (which uses Framework 5.0) pass fine on Java 8, 9 and 10.  My guess is this relates to #20414 and is probably caused by our slightly unusual DevTools classloader arrangement.  ---  **Affects:** 5.1 RC1  **Issue Links:** - #20414 MethodHandles.Lookup.defineClass for CGLIB class definition purposes - #21556 Revise ClassUtils.isPresent for exposing resolution exceptions in jlinked modules  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6887802526dbef2857c4c0106153c0650ec5e4aa","closed","in: core,","spring-projects-issues","2018-06-04T23:05:28Z","2019-01-11T15:42:18Z"
"","21288","Request body is missing if returned Mono completes before input body Mono [SPR-16747]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-16747](https://jira.spring.io/browse/SPR-16747?redirect=false)** and commented  Originally raise [on the Spring Boot issue tracker](https://github.com/spring-projects/spring-boot/issues/12921) with a [sample that reproduces the issue](https://github.com/myhau/spring-boot-2-reactive-missing-body-issue).  It's not immediately clear to me if this is an error in the demo, or if it's a bug but I don't think any Spring Boot code is directly involved.    --- No further details from [SPR-16747](https://jira.spring.io/browse/SPR-16747?redirect=false)","closed","status: invalid,","spring-projects-issues","2018-04-19T16:46:28Z","2019-01-12T05:18:59Z"
"","21484","Doc: AsyncConfigurer causes dependencies to be created early [SPR-16945]","**[Petr Stuchlik](https://jira.spring.io/secure/ViewProfile.jspa?name=stuchl4n3k)** opened **[SPR-16945](https://jira.spring.io/browse/SPR-16945?redirect=false)** and commented  JavaDoc for `@EnableAsync` suggests implementing AsyncConfigurer to customize AsyncUncaughtExceptionHandler. This works fine and one would typically extend AsyncConfigurerSupport in his configuration class. This can, however, lead to a rather nasty issue (or difficult-to-debug at least) when also expressing a direct bean dependency in this configuration class.  **The issue is that this dependency causes the bean (and all its dependencies) to be created very early - at the time when BeanPostProcessors are registered. That prevents these beans to be processed (e.g. by AspectJ processors).**  This happens because ProxyAsyncConfiguration finds the AsyncConfigurer and causes this config to be created along with its dependencies, when other processors are not available yet.  **For workaround, one can often annotate the bean dependency in the config as `@Lazy`.**  After lengthy investigation why my beans are not CGLIB-proxied I've found this cause. Having learned how the ProxyAsyncConfiguration is bootstrapped I no longer find this behavior surprising. But if this was stated somewhere in the JavaDoc at least I'd have more hair on my head at this moment.  You can see the referenced PoC on GitHub for more details.  ---  **Affects:** 4.3.18, 5.0.7  **Reference URL:** https://github.com/stuchl4n3k/spring-async-configurer-issue  **Issue Links:** - #21483 Doc: ThreadPoolTaskExecutor's defaults vs setting queueCapacity for common pool scenarios - #21559 Lazily retrieve delegate beans in AsyncConfigurer and CachingConfigurer  **Backported to:** [4.3.19](https://github.com/spring-projects/spring-framework/milestone/168?closed=1)","closed","in: core,","spring-projects-issues","2018-06-15T13:39:04Z","2019-01-11T15:41:15Z"
"","21309","WebFlux: cancellation due timeout is not propagated from client to server [SPR-16768]","**[Peti Koch](https://jira.spring.io/secure/ViewProfile.jspa?name=petikoch)** opened **[SPR-16768](https://jira.spring.io/browse/SPR-16768?redirect=false)** and commented  We are a local group of developers and we are studying the ""reactive"" inter-process communication using WebFlux (within Spring Boot 2.0.1).  One of our examples (https://github.com/ReactiveMeetupLucerne/SpringWebFluxWithSpringBoot2.0, question 5) looks like this:  ``` WebClient.create(""http://localhost:8080"")         .get()         .uri(""/question5/slowflightprice"")         .retrieve()         .bodyToFlux(Integer.class)         .timeout(Duration.ofSeconds(1))         .subscribe(                 price -> LOGGER.info(""Got price: {}"", price),                 throwable -> LOGGER.warn(""{}: {}"", throwable.getClass().getSimpleName(), throwable.getMessage()),                 () -> System.exit(0)         );  ```  ""server"":  ``` @GetMapping(value = ""/question5/slowflightprice"", produces = MediaType.TEXT_EVENT_STREAM_VALUE) Flux flightprice() {     return Flux.interval(Duration.ofSeconds(10)).take(1)             .doOnSubscribe(subscription -> LOGGER.info(""price is requested""))             .flatMap(tick -> Flux.just(250))             .doOnCancel(() -> LOGGER.info(""cancelled""))             .doOnNext(price -> LOGGER.info(""published price: {}"", price)); } ```  (full code: https://github.com/ReactiveMeetupLucerne/SpringWebFluxWithSpringBoot2.0/tree/master/src/main/java/question5)  We expected that the cancellation due to a timeout is propagated ""somehow"" to the server, but it doesn't. The ""server"" continues its work although the client has unsubscribed.  We think this is a typical use case and it is important that cancellations (unsubscribing) are propagated between processes.  PS: In a second example using a stream of elements, the cancellation works fine: https://github.com/ReactiveMeetupLucerne/SpringWebFluxWithSpringBoot2.0/tree/master/src/main/java/question4 The unsubscription is done there using `take(1000)` instead of `timeout`   ---  **Affects:** 5.0.5","closed","status: superseded,","spring-projects-issues","2018-04-25T12:31:17Z","2020-07-20T08:00:40Z"
"","21355","No default dashboard for Eureka Server in Finchley.RC1  [SPR-16815]","**[Peter Saat](https://jira.spring.io/secure/ViewProfile.jspa?name=pjsaat)** opened **[SPR-16815](https://jira.spring.io/browse/SPR-16815?redirect=false)** and commented  It's been asked on stackoverflow and the only answer is to downgrade:  https://stackoverflow.com/questions/50069134/unable-to-render-eureka-dashboard?rq=1   --- No further details from [SPR-16815](https://jira.spring.io/browse/SPR-16815?redirect=false)","closed","status: invalid,","spring-projects-issues","2018-05-11T21:44:56Z","2019-01-12T05:18:51Z"
"","21571","RFC 2616 against null values in @RequestBody [SPR-17033]","**[Peter Rader](https://jira.spring.io/secure/ViewProfile.jspa?name=grim01re)** opened **[SPR-17033](https://jira.spring.io/browse/SPR-17033?redirect=false)** and commented  RFC2616 points out in page 31 the structure of HTTP messages:  `generic-message = start-line` `                  *(message-header CRLF)` `                  CRLF` `                  [ message-body ]`  As you can see, we have a CRLF at the end of each header and one additional CRLF to seperate body from header.   Assuming we have no body, the end of the HTTP message will end with the bytes   CR-LF CR-LF  What is the problem? We technically can not tell if a value is present and have a length of 0 bytes OR no body is posted what must be interpreted as null.  This is a problem if we have this construct:  `@RequestMapping ` `public void test(@RequestBody(required=false) String httpBody) {` `}`  We have a special case here. The parameter httpBody is expected to contain the HTTP's `[ message-body ]` scope. In httpBody must contain all bytes right after the CR-LF CR-LF.  The effect of this problem is that if we post a empty string: the parameter httpBody must be a empty string and can never be null.   Vice versa for a (required=true): If we send a empty string, spring will decline the 100% correct request (having a empty string as body) as invalid because a empty string is interpreted as no-value where a value is required.  You could say: > Hey, lets check the header ""Message-Length"", it the header is present and the length is 0, it is a empty string and if no ""Message-Length"" is sent, its a null-value.  This is a good solution .... but: This does not work for security reasons in browsers. In browsers are commonly used the `XMLHttpRequest`-Object. The XMLHttpRequest is not allowed to set the `Content-Length` header-field.  **My suggestion:**  Let us introduce a specific header (respectievly the RFC6648 against x-header-constructs) to evaluate if the message-body should be interpreted as an empty string or null.   ---  **Affects:** 5.0.7  **Reference URL:** https://tools.ietf.org/html/rfc2616#page-31","closed","type: enhancement,","spring-projects-issues","2018-07-11T17:48:24Z","2022-02-18T20:48:33Z"
"","21248","@GroupSequenceProvider Not Provided the Bean [SPR-16707]","**[Peter Luttrell](https://jira.spring.io/secure/ViewProfile.jspa?name=pluttrell)** opened **[SPR-16707](https://jira.spring.io/browse/SPR-16707?redirect=false)** and commented  Using SpringBoot 2.0.1, the BeanValidation support is provided by the HibernateValidator. The HibernateValidator provides a feature that is not part of the BeanValidations spec that allows you to define a `@GroupSequenceProvider` to control the list and order of groups used during validation: https://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/?v=6.0#_code_groupsequenceprovider_code  I've tried to use this, and execution path enters the GroupSequenceProvider that I've defined for an entity, but the bean supplied to the getValidationGroups method is always null, so we can't dynamically assigned the groups based on the state of the supplied value.  Here's a simple example:  ```java @RestController public class CarController {   @PostMapping(""/cars"")   Car register(@RequestBody @Valid Car car) {     return car;   } } ```  ```java @GroupSequenceProvider(CarGroupSequenceProvider.class) public class Car {    @NotEmpty   private String make;    @NotEmpty(groups = RegistrationGroup.class)   private String vin;    private String registrationCode;    public String getMake() { return make; }   public void setMake(String make) { this.make = make; }   public String getVin() { return vin; }   public void setVin(String vin) { this.vin = vin; }   public String getRegistrationCode() { return registrationCode; }    public void setRegistrationCode(String registrationCode) { this.registrationCode = registrationCode; } } ```  ```java public interface RegistrationGroup {} ```  ```java public class CarGroupSequenceProvider implements DefaultGroupSequenceProvider {    public CarGroupSequenceProvider() {}    @Override   public List> getValidationGroups(Car car) {     List> defaultGroupSequence = new ArrayList<>();     if(car.getRegistrationCode() != null){       defaultGroupSequence.add(RegistrationGroup.class);     }     return defaultGroupSequence;   } } ```  In this last code snippet, the parameter `car` is always null, so we can't look at the state of it to determine if additional Groups should be defined.   ---  **Affects:** 5.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/22edab852da456bea728daf84df09f0047e1d13f  1 votes, 2 watchers","closed","status: declined,","spring-projects-issues","2018-04-10T19:26:46Z","2019-01-12T16:21:29Z"
"","21516","CachedIntrospectionResults should build complete descriptor for setter/getter across interface hierarchy [SPR-16978]","**[Petar Tahchiev](https://jira.spring.io/secure/ViewProfile.jspa?name=ptahchiev)** opened **[SPR-16978](https://jira.spring.io/browse/SPR-16978?redirect=false)** and commented  Hello, consider the following setup:  ``` // code from spring-security public interface UserDetails extends Serializable {   Collection getAuthorities();    String getPassword();    String getUsername();    boolean isAccountNonExpired();    boolean isAccountNonLocked();    boolean isCredentialsNonExpired();    boolean isEnabled(); }  public interface MyUserDetails extends UserDetails {     Locale getLocale();      void setLocale(final Locale locale);      /* setters for super properties */      void setUsername(String username);      void setPassword(String password); }  public interface CustomerDetails extends MyUsersDetails {   String getPhone();    void setPhone(String phone); } ```  Now invoke ` BeanUtils.getPropertyDescriptor(CustomerDetails.class, ""username"");` and you will see that the returned `PropertyDescriptor` has correct `writeMethod` but the `readMethod` is null. As a result, if I try to submit a `CustomerDetails` form in spring-mvc I get this error:  ``` 2018-06-26 18:13:33,604 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/storefront].[dispatcherServlet] [https-jsse-nio-127.0.0.1-8112-exec-5] ERROR: Servlet.service() for servlet [dispatcherServlet] in context with path [/storefront] threw exception [Request processing failed; nested exception is java.lang.IllegalArgumentException: Method must not be null] with root cause java.lang.IllegalArgumentException: Method must not be null 	at org.springframework.util.Assert.notNull(Assert.java:193) 	at org.springframework.core.MethodParameter.(MethodParameter.java:120) 	at org.springframework.core.MethodParameter.(MethodParameter.java:106) 	at org.springframework.data.web.MapDataBinder$MapPropertyAccessor.setPropertyValue(MapDataBinder.java:193) 	at org.springframework.beans.AbstractPropertyAccessor.setPropertyValue(AbstractPropertyAccessor.java:67) 	at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:97) 	at org.springframework.validation.DataBinder.applyPropertyValues(DataBinder.java:839) 	at org.springframework.validation.DataBinder.doBind(DataBinder.java:735) 	at org.springframework.web.bind.WebDataBinder.doBind(WebDataBinder.java:197) 	at org.springframework.validation.DataBinder.bind(DataBinder.java:720 ```  I believe this is because in `CachedIntrospectionResults` a look goes through all super interfaces:  ``` while (clazz != null && clazz != Object.class) {      Class[] ifcs = clazz.getInterfaces();      for (Class ifc : ifcs) {               if (!ClassUtils.isJavaLanguageInterface(ifc)) {                        for (PropertyDescriptor pd : getBeanInfo(ifc).getPropertyDescriptors()) { ```  until `Object` is reached and for each finds the property descriptor. However when it reaches `MyUserDetails` it finds the setter method and creates a `PropertyDescriptor` with null read method which is wrong because the read method is defined in the parent interface.  ---  **Affects:** 5.0.7  **Issue Links:** - #18772 Java 8 default methods not detected as bean properties - #20869 CachedIntrospectionResults should use BeanInfoFactory when introspecting implemented interfaces - #21110 Consider caching interface-derived BeanInfo instances in CachedIntrospectionResults  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bf5fe46fa912eb86ad6fb340d3e56cacda568865","closed","type: enhancement,","spring-projects-issues","2018-06-26T15:28:49Z","2019-01-11T16:09:28Z"
"","21279","Allow users to inject custom cacheDecorator [SPR-16738]","**[Petar Tahchiev](https://jira.spring.io/secure/ViewProfile.jspa?name=ptahchiev)** opened **[SPR-16738](https://jira.spring.io/browse/SPR-16738?redirect=false)** and commented  In my spring-boot application I need to be able to turn on/off the caching of the app at runtime. I found a very neat way but to make it work I have introduced some changes in the `AbstractTransactionSupportingCacheManager` (PR will follow in a minute).  First of all in my spring-boot application I define a custom `CacheManagerCustomizer`:  ```     @Bean     public CacheManagerCustomizer defaultSpringCacheManagerCustomizer() {          return cacheManager -> {             CacheDecorator cacheDecorator = ((AbstractCacheManager) cacheManager).getCacheDecorator();             if (cacheDecorator != null) {                 ((AbstractCacheManager) cacheManager).setCacheDecorator(new NemesisCacheKeyAwareCacheDecorator(cacheDecorator));              } else {                 ((AbstractCacheManager) cacheManager).setCacheDecorator(new NemesisCacheKeyAwareCacheDecorator());             }         };     } ```  and this works fine - now I plug-in a custom `NemesisCacheKeyAwareCacheDecorator` which checks at runtime if a given flag is on and so returns the underlying `Cache` or if it is off and so it returns `null` denoting that no such cache was found.  However as you can see the `AbstractCacheManager` now has an attribute `cacheDecorator` of type `CacheDecorator`:  ``` public interface CacheDecorator {  	/** 	 * Decorate the given cache if necessary. 	 * 	 * @param cache the cache to decorate 	 * @return the decorated cache 	 */ 	Cache decorateCache(Cache cache);  	boolean shouldDecorate(); } ```  and so the `AbstractCacheManager`'s `decorate` method becomes:  ``` 	protected Cache decorateCache(Cache cache) { 		return this.cacheDecorator != null && this.cacheDecorator.shouldDecorate() ? this.cacheDecorator.decorateCache(cache) : cache; 	}  ```  Then the `AbstractTransactionSupportingCacheManager` becomes much simpler as the logic of `transactionAware` is now delegated to a new `TransactionAwareCacheDecorator`  ``` public class TransactionAwareCacheDecorator implements CacheDecorator {  	/** 	 * Whether this CacheDecorator is transaction aware and should expose transaction-aware Cache objects. 	 * Default is ""false"". Set this to ""true"" to synchronize cache put/evict 	 * operations with ongoing Spring-managed transactions, performing the actual cache 	 * put/evict operation only in the after-commit phase of a successful transaction. 	 */ 	private boolean transactionAware;  	public TransactionAwareCacheDecorator(boolean transactionAware) { 		this.transactionAware = transactionAware; 	}  	@Override 	public Cache decorateCache(Cache cache) { 		return new TransactionAwareCache(cache); 	}  	@Override 	public boolean shouldDecorate() { 		return this.transactionAware; 	} } ```  and the `AbstractTransactionSupportingCacheManager` becomes:  ``` public abstract class AbstractTransactionSupportingCacheManager extends AbstractCacheManager {  	/** 	 * Constructor that creates CacheManager with transactionAware flag set to false. 	 */ 	public AbstractTransactionSupportingCacheManager() { 		this(false); 	}  	/** 	 * Constructor that creates CacheManager with the given transactionAware flag. 	 * 	 * @param transactionAware Set whether this CacheManager should expose transaction-aware Cache objects. 	 *                         Default is ""false"". Set this to ""true"" to synchronize cache put/evict 	 *                         operations with ongoing Spring-managed transactions, performing the actual cache 	 *                         put/evict operation only in the after-commit phase of a successful transaction. 	 */ 	public AbstractTransactionSupportingCacheManager(boolean transactionAware) { 		super(new TransactionAwareCacheDecorator(transactionAware)); 	} } ```  Of course `JCacheCacheManager` and `EhCacheCacheManager` needs new constructors but I think this is much better than relying on setter methods and manually invoking `afterPropertiesSet`.  As a result I think with these chages the caching API becomes much more powerful and with absolutely NO changes in spring-boot I am able to fulfil my requirements. I even have a custom actuator endpoint to start/stop the cacheManager at runtime!   ---  2 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2018-04-17T18:18:59Z","2018-05-03T13:36:30Z"
"","21262","Enhance the Cache API [SPR-16721]","**[Petar Tahchiev](https://jira.spring.io/secure/ViewProfile.jspa?name=ptahchiev)** opened **[SPR-16721](https://jira.spring.io/browse/SPR-16721?redirect=false)** and commented  I'd like to suggest a few improvements to the `org.springframework.cache.Cache` API. Would it be possible to add a method to see the entries of the cache (`entries()`)? If not can you at least add a method to check if the cache is empty (`isEmpty()`)?   --- No further details from [SPR-16721](https://jira.spring.io/browse/SPR-16721?redirect=false)","closed","type: enhancement,","spring-projects-issues","2018-04-12T17:56:47Z","2018-07-13T12:32:38Z"
"","21291","Accept header handling is inconsistent [SPR-16750]","**[Petar Cvitanusic](https://jira.spring.io/secure/ViewProfile.jspa?name=petar@cvitanusic.com)** opened **[SPR-16750](https://jira.spring.io/browse/SPR-16750?redirect=false)** and commented  The fix for #20798 is breaking a bunch of our tests. I do agree with the fix in #20798 that Spring returns a 200 when the base is the same. For example Accepting ""application/json"" but returning ""application/msword"" is totally valid.  We have a controller method that returns attachments that can be different content types. In some cases spring throws a 406, in others it produces a 200.  The controller method does not specify what it produces, rather we specify the Content-Type header for the ResponseEntity:  ```java @RequestMapping(method = RequestMethod.GET, value = ""..."") public ResponseEntity<...> getAttachment(HttpServletRequest request) {      } ```     Scenario: 1. Accept header is ""application/json"" 2. Content type returned is ""image/png"" 3. Spring throws a 406. This is correct.    1. Accept header is ""application/json"" 2. Content type returned is ""image/jpeg"" 3. Spring returns a 200. This seems wrong to me.  ---  **Affects:** 5.0.3, 5.0.4, 5.0.5  **Reference URL:** #20798","closed","status: declined,","spring-projects-issues","2018-04-20T15:30:16Z","2019-01-14T04:31:23Z"
"","21421","ReflectivePropertyAccessor should cache sorted methods [SPR-16882]","**[Pavel Khokhlov](https://jira.spring.io/secure/ViewProfile.jspa?name=pavel_hp)** opened **[SPR-16882](https://jira.spring.io/browse/SPR-16882?redirect=false)** and commented  After migration from SPEL 4.3.9.RELEASE -> 4.3.10.RELEASE we noticed performance degradation with SPEL Expression (at least 2.5x times).  In attachment you can find [^benchmark.zip]  You can see JMH report (I used jdk1.8.0_151)  This is 4.3.10.RELEASE  ``` /Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Home/bin/java -Dfile.encoding=UTF-8 -classpath /Users/pkhokhlov/JProjects/benchmark/target/test-classes:/Users/pkhokhlov/.m2/repository/org/openjdk/jmh/jmh-core/1.21/jmh-core-1.21.jar:/Users/pkhokhlov/.m2/repository/net/sf/jopt-simple/jopt-simple/4.6/jopt-simple-4.6.jar:/Users/pkhokhlov/.m2/repository/org/apache/commons/commons-math3/3.2/commons-math3-3.2.jar:/Users/pkhokhlov/.m2/repository/org/openjdk/jmh/jmh-generator-annprocess/1.21/jmh-generator-annprocess-1.21.jar:/Users/pkhokhlov/.m2/repository/org/springframework/spring-expression/4.3.10.RELEASE/spring-expression-4.3.10.RELEASE.jar:/Users/pkhokhlov/.m2/repository/org/springframework/spring-core/4.3.10.RELEASE/spring-core-4.3.10.RELEASE.jar:/Users/pkhokhlov/.m2/repository/commons-logging/commons-logging/1.2/commons-logging-1.2.jar org.openjdk.jmh.Main org.spel.bug.SpelBenchmark.* 1. JMH version: 1.21 1. VM version: JDK 1.8.0_151, Java HotSpot(TM) 64-Bit Server VM, 25.151-b12 1. VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Home/jre/bin/java 1. VM options: -Dfile.encoding=UTF-8 1. Warmup: 2 iterations, 10 s each 1. Measurement: 2 iterations, 10 s each 1. Timeout: 10 min per iteration 1. Threads: 1 thread, will synchronize iterations 1. Benchmark mode: Throughput, ops/time 1. Benchmark: org.spel.bug.SpelBenchmark.spel# Run progress: 0.00% complete, ETA 00:00:40 1. Fork: 1 of 1 1. Warmup Iteration   1: 197599.695 ops/s 1. Warmup Iteration   2: 225828.094 ops/s Iteration   1: 225044.963 ops/s Iteration   2: 228451.901 ops/s Result ""org.spel.bug.SpelBenchmark.spel"":   226748.432 ops/s 1. Run complete. Total time: 00:00:40REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial experiments, perform baseline and negative tests that provide experimental control, make sure the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts. Do not assume the numbers tell you what you want them to tell.Benchmark            Mode  Cnt       Score   Error  Units SpelBenchmark.spel  thrpt    2  226748.432          ops/s ```  This is 4.3.9.RELEASE  ``` /Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Home/bin/java -Dfile.encoding=UTF-8 -classpath /Users/pkhokhlov/JProjects/benchmark/target/test-classes:/Users/pkhokhlov/.m2/repository/org/openjdk/jmh/jmh-core/1.21/jmh-core-1.21.jar:/Users/pkhokhlov/.m2/repository/net/sf/jopt-simple/jopt-simple/4.6/jopt-simple-4.6.jar:/Users/pkhokhlov/.m2/repository/org/apache/commons/commons-math3/3.2/commons-math3-3.2.jar:/Users/pkhokhlov/.m2/repository/org/openjdk/jmh/jmh-generator-annprocess/1.21/jmh-generator-annprocess-1.21.jar:/Users/pkhokhlov/.m2/repository/org/springframework/spring-expression/4.3.9.RELEASE/spring-expression-4.3.9.RELEASE.jar:/Users/pkhokhlov/.m2/repository/org/springframework/spring-core/4.3.9.RELEASE/spring-core-4.3.9.RELEASE.jar:/Users/pkhokhlov/.m2/repository/commons-logging/commons-logging/1.2/commons-logging-1.2.jar org.openjdk.jmh.Main org.spel.bug.SpelBenchmark.* 1. JMH version: 1.21 1. VM version: JDK 1.8.0_151, Java HotSpot(TM) 64-Bit Server VM, 25.151-b12 1. VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Home/jre/bin/java 1. VM options: -Dfile.encoding=UTF-8 1. Warmup: 2 iterations, 10 s each 1. Measurement: 2 iterations, 10 s each 1. Timeout: 10 min per iteration 1. Threads: 1 thread, will synchronize iterations 1. Benchmark mode: Throughput, ops/time 1. Benchmark: org.spel.bug.SpelBenchmark.spel# Run progress: 0.00% complete, ETA 00:00:40 1. Fork: 1 of 1 1. Warmup Iteration   1: 511243.723 ops/s 1. Warmup Iteration   2: 564409.791 ops/s Iteration   1: 579457.251 ops/s Iteration   2: 582177.903 ops/s Result ""org.spel.bug.SpelBenchmark.spel"":   580817.577 ops/s 1. Run complete. Total time: 00:00:40REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial experiments, perform baseline and negative tests that provide experimental control, make sure the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts. Do not assume the numbers tell you what you want them to tell.Benchmark            Mode  Cnt       Score   Error  Units SpelBenchmark.spel  thrpt    2  580817.577          ops/s ```     ---  **Affects:** 4.3.10  **Attachments:** - [benchmark.zip](https://jira.spring.io/secure/attachment/25738/benchmark.zip) (_2.76 kB_)  **Issue Links:** - #20324 PropertyOrFieldReference invalidly reuses cached PropertyAccessor - #21481 Performance degradation in SPEL expression evaluation  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4a6e9a55572ae57c0f7eea40ef530855b9ab339d, https://github.com/spring-projects/spring-framework/commit/bfcc1a1f6ae58d3a62765ddd21f6bd5b5182463d, https://github.com/spring-projects/spring-framework/commit/da049f480b2c6543dd8e77821c60197e86d4fcdb, https://github.com/spring-projects/spring-framework/commit/e2ccd55d146c245ee3e6d46783e3c288999894ff  **Backported to:** [4.3.18](https://github.com/spring-projects/spring-framework/milestone/167?closed=1)  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2018-05-31T09:10:49Z","2019-01-11T17:07:17Z"
"","21759","Documentation for @Transactional timeout (in seconds) [SPR-17226]","**[Paul Chapman](https://jira.spring.io/secure/ViewProfile.jspa?name=chapmanp)** opened **[SPR-17226](https://jira.spring.io/browse/SPR-17226?redirect=false)** and commented  The transaction timeout is in seconds which IMHO is not obvious, most Java time values default to milliseconds.  Although it is in the Reference Documentation, the Javadoc doesn't mention it at all. When you are in an IDE, it is the first place you look.      ---  **Affects:** 4.3.18, 5.0.8  **Reference URL:** https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/transaction/annotation/Transactional.html  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/648fa60f483918b3855f052709b2c563b2862fcc, https://github.com/spring-projects/spring-framework/commit/56194a10513e5272909e69c3afb56013e4a720bb, https://github.com/spring-projects/spring-framework/commit/8c6f3505c42efe05120c7acb180497f67cedc026  **Backported to:** [4.3.19](https://github.com/spring-projects/spring-framework/milestone/168?closed=1)","closed","type: task,","spring-projects-issues","2018-08-29T15:49:29Z","2018-09-07T13:48:36Z"
"","21173","Spring WebFlux + Undertow + HTTP/2 is not working with a POST request [SPR-16632]","**[Pascal Le Levier](https://jira.spring.io/secure/ViewProfile.jspa?name=necoutezpas)** opened **[SPR-16632](https://jira.spring.io/browse/SPR-16632?redirect=false)** and commented  Hello,  I'm currently trying to create a Spring Boot 2 project using webflux and the HTTP/2 protocol While I was trying the Undertow server, I found that making a POST with some request body was always failing with a Stackoverflow error while a simple GET is working as expected.  This bug makes the use of Undertow as a reactive http/2 server almost impossible (unless we don't post a request body)  You can find a very simple test project to reproduce the bug in the reference URL of the issue.  Controller code :  ```java @RestController public class Example {      @GetMapping(""/"")     public Mono getTest() {         Test test = new Test();         test.name = ""hello"";         return Mono.just(test);     }      @PostMapping(""/"")     public Mono getTest(@RequestBody final Test test) {         return Mono.just(test);     } }  public class Test {     @NotNull     public String name; } ```  Request body :  ``` {   ""name"": ""Pascal"" } ```  **Server stack trace**  ``` 23-03-2018 11:47:53.873 [XNIO-1 I/O-3] ERROR io.undertow.request.executeRootHandler - UT005071: Undertow request failed HttpServerExchange{ POST / request {accept=[*/*], accept-encoding=[gzip, deflate], user-agent=[nghttp2/1.31.0], content-length=[23], Host=[localhost:8443]} response HttpServerExchange{ POST / request {accept=[*/*], accept-encoding=[gzip, deflate], user-agent=[nghttp2/1.31.0], content-length=[23], Host=[localhost:8443]} response {}}} java.lang.StackOverflowError: null 	at io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel.read(AbstractFramedStreamSourceChannel.java:496) 	at io.undertow.protocols.http2.Http2StreamSourceChannel.read(Http2StreamSourceChannel.java:147) 	at org.xnio.conduits.StreamSourceChannelWrappingConduit.read(StreamSourceChannelWrappingConduit.java:43) 	at org.xnio.conduits.ConduitStreamSourceChannel.read(ConduitStreamSourceChannel.java:127) 	at io.undertow.channels.DetachableStreamSourceChannel.read(DetachableStreamSourceChannel.java:209) 	at io.undertow.server.HttpServerExchange$ReadDispatchChannel.read(HttpServerExchange.java:2332) 	at org.springframework.http.server.reactive.UndertowServerHttpRequest$RequestBodyPublisher.read(UndertowServerHttpRequest.java:172) 	at org.springframework.http.server.reactive.UndertowServerHttpRequest$RequestBodyPublisher.read(UndertowServerHttpRequest.java:128) 	at org.springframework.http.server.reactive.AbstractListenerReadPublisher.readAndPublish(AbstractListenerReadPublisher.java:145) 	at org.springframework.http.server.reactive.AbstractListenerReadPublisher.access$1000(AbstractListenerReadPublisher.java:47) 	at org.springframework.http.server.reactive.AbstractListenerReadPublisher$State$4.onDataAvailable(AbstractListenerReadPublisher.java:317) 	at org.springframework.http.server.reactive.AbstractListenerReadPublisher.onDataAvailable(AbstractListenerReadPublisher.java:85) 	at org.springframework.http.server.reactive.UndertowServerHttpRequest$RequestBodyPublisher.checkOnDataAvailable(UndertowServerHttpRequest.java:156) 	at org.springframework.http.server.reactive.AbstractListenerReadPublisher.changeToDemandState(AbstractListenerReadPublisher.java:177) 	[... SAME STACK TRACE OVER HUNDRED TIMES ...] 	at org.springframework.http.server.reactive.AbstractListenerReadPublisher.access$900(AbstractListenerReadPublisher.java:47) 	at org.springframework.http.server.reactive.AbstractListenerReadPublisher$State$4.onDataAvailable(AbstractListenerReadPublisher.java:319) 	at org.springframework.http.server.reactive.AbstractListenerReadPublisher.onDataAvailable(AbstractListenerReadPublisher.java:85) 	at org.springframework.http.server.reactive.UndertowServerHttpRequest$RequestBodyPublisher.checkOnDataAvailable(UndertowServerHttpRequest.java:156) 	at org.springframework.http.server.reactive.AbstractListenerReadPublisher.changeToDemandState(AbstractListenerReadPublisher.java:177) 	at org.springframework.http.server.reactive.AbstractListenerReadPublisher.access$900(AbstractListenerReadPublisher.java:47) 	at org.springframework.http.server.reactive.AbstractListenerReadPublisher$State$4.onDataAvailable(AbstractListenerReadPublisher.java:319) 	at org.springframework.http.server.reactive.AbstractListenerReadPublisher.onDataAvailable(AbstractListenerReadPublisher.java:85) 	at org.springframework.http.server.reactive.UndertowServerHttpRequest$RequestBodyPublisher.checkOnDataAvailable(UndertowServerHttpRequest.java:156) 	at org.springframework.http.server.reactive.AbstractListenerReadPublisher.changeToDemandState(AbstractListenerReadPublisher.java:177) ```  After this error log, two new logs are written (client have already received a status code 500 at this moment), it seems only to be a side effect of the error, but we can clearly see that the problem is related to the request body, which is missing because of the previous error  ``` 23-03-2018 12:30:19.210 [XNIO-1 I/O-3] WARN  o.s.b.a.w.r.e.DefaultErrorWebExceptionHandler.log - Failed to handle request [POST https://localhost:8443/]: Response status 400 with reason ""Request body is missing: public reactor.core.publisher.Mono com.necoutezpas.springboottest.controller.Example.getTest(com.necoutezpas.springboottest.model.Test)"" 23-03-2018 12:30:19.242 [XNIO-1 I/O-3] ERROR o.s.w.s.a.HttpWebHandlerAdapter.handleFailure - Failed to handle request [POST https://localhost:8443/] java.lang.IllegalStateException: UT000002: The response has already been started 	at io.undertow.server.HttpServerExchange.setStatusCode(HttpServerExchange.java:1406) 	at org.springframework.http.server.reactive.UndertowServerHttpResponse.applyStatusCode(UndertowServerHttpResponse.java:79) 	at org.springframework.http.server.reactive.AbstractServerHttpResponse.lambda$doCommit$4(AbstractServerHttpResponse.java:213) 	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) 	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1382) 	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) 	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) 	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) 	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) 	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499) 	at org.springframework.http.server.reactive.AbstractServerHttpResponse.doCommit(AbstractServerHttpResponse.java:225) 	at org.springframework.http.server.reactive.AbstractServerHttpResponse.lambda$writeWith$1(AbstractServerHttpResponse.java:176) 	at org.springframework.http.server.reactive.ChannelSendOperator$WriteBarrier.onNext(ChannelSendOperator.java:158) 	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:115) 	at reactor.core.publisher.FluxJust$WeakScalarSubscription.request(FluxJust.java:91) 	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:156) 	at org.springframework.http.server.reactive.ChannelSendOperator$WriteBarrier.onSubscribe(ChannelSendOperator.java:140) 	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90) 	at reactor.core.publisher.FluxJust.subscribe(FluxJust.java:68) 	at reactor.core.publisher.FluxMapFuseable.subscribe(FluxMapFuseable.java:63) 	at org.springframework.http.server.reactive.ChannelSendOperator.subscribe(ChannelSendOperator.java:74) 	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150) 	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1069) 	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241) 	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:198) 	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1626) 	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:138) 	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230) 	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:172) 	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54) 	at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74) 	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150) 	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67) 	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67) 	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1626) 	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1440) 	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1314) 	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54) 	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52) 	at reactor.core.publisher.Mono.subscribe(Mono.java:3080) 	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75) 	at reactor.core.publisher.Operators.complete(Operators.java:125) 	at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:45) 	at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44) 	at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44) 	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) 	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) 	at reactor.core.publisher.Mono.subscribe(Mono.java:3080) 	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:97) 	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:165) 	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:185) 	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:251) 	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:100) 	at reactor.core.publisher.Operators.error(Operators.java:175) 	at reactor.core.publisher.MonoError.subscribe(MonoError.java:52) 	at reactor.core.publisher.Mono.subscribe(Mono.java:3080) 	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:97) 	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onError(FluxPeekFuseable.java:222) 	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onError(FluxPeekFuseable.java:222) 	at reactor.core.publisher.Operators$MonoSubscriber.onError(Operators.java:1112) 	at reactor.core.publisher.MonoIgnoreThen$ThenAcceptInner.onError(MonoIgnoreThen.java:300) 	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:165) 	at reactor.core.publisher.MonoZip$ZipInner.onError(MonoZip.java:337) 	at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:207) 	at reactor.core.publisher.Operators$MonoSubscriber.onError(Operators.java:1112) 	at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:87) 	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onError(Operators.java:1309) 	at reactor.core.publisher.Operators.error(Operators.java:175) 	at reactor.core.publisher.MonoError.subscribe(MonoError.java:52) 	at reactor.core.publisher.Mono.subscribe(Mono.java:3080) 	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75) 	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:245) 	at org.springframework.http.server.reactive.AbstractListenerReadPublisher$State.onAllDataRead(AbstractListenerReadPublisher.java:392) 	at org.springframework.http.server.reactive.AbstractListenerReadPublisher.onAllDataRead(AbstractListenerReadPublisher.java:94) 	at org.springframework.http.server.reactive.UndertowServerHttpRequest$RequestBodyPublisher.lambda$registerListeners$0(UndertowServerHttpRequest.java:144) 	at io.undertow.server.HttpServerExchange.invokeExchangeCompleteListeners(HttpServerExchange.java:1276) 	at io.undertow.server.HttpServerExchange.terminateResponse(HttpServerExchange.java:1558) 	at io.undertow.server.Connectors.terminateResponse(Connectors.java:143) 	at io.undertow.server.protocol.http2.Http2ReceiveListener$3.handleEvent(Http2ReceiveListener.java:189) 	at io.undertow.server.protocol.http2.Http2ReceiveListener$3.handleEvent(Http2ReceiveListener.java:186) 	at org.xnio.ChannelListeners.invokeChannelListener(ChannelListeners.java:92) 	at io.undertow.protocols.http2.Http2DataStreamSinkChannel.flush(Http2DataStreamSinkChannel.java:292) 	at org.xnio.conduits.StreamSinkChannelWrappingConduit.flush(StreamSinkChannelWrappingConduit.java:123) 	at org.xnio.conduits.ConduitStreamSinkChannel.flush(ConduitStreamSinkChannel.java:162) 	at io.undertow.channels.DetachableStreamSinkChannel.flush(DetachableStreamSinkChannel.java:119) 	at io.undertow.server.HttpServerExchange.closeAndFlushResponse(HttpServerExchange.java:1714) 	at io.undertow.server.HttpServerExchange.access$000(HttpServerExchange.java:92) 	at io.undertow.server.HttpServerExchange$2.handleEvent(HttpServerExchange.java:1655) 	at io.undertow.server.HttpServerExchange$2.handleEvent(HttpServerExchange.java:1651) 	at org.xnio.ChannelListeners.invokeChannelListener(ChannelListeners.java:92) 	at org.xnio.ChannelListeners$DrainListener.handleEvent(ChannelListeners.java:1145) 	at org.xnio.ChannelListeners$DrainListener.handleEvent(ChannelListeners.java:1125) 	at org.xnio.ChannelListeners.invokeChannelListener(ChannelListeners.java:92) 	at io.undertow.channels.DetachableStreamSourceChannel$SetterDelegatingListener.handleEvent(DetachableStreamSourceChannel.java:231) 	at io.undertow.channels.DetachableStreamSourceChannel$SetterDelegatingListener.handleEvent(DetachableStreamSourceChannel.java:218) 	at org.xnio.ChannelListeners.invokeChannelListener(ChannelListeners.java:92) 	at org.xnio.conduits.ReadReadyHandler$ChannelListenerHandler.readReady(ReadReadyHandler.java:66) 	at org.xnio.conduits.StreamSourceChannelWrappingConduit$1.handleEvent(StreamSourceChannelWrappingConduit.java:85) 	at org.xnio.conduits.StreamSourceChannelWrappingConduit$1.handleEvent(StreamSourceChannelWrappingConduit.java:83) 	at org.xnio.ChannelListeners.invokeChannelListener(ChannelListeners.java:92) 	at io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel$1.run(AbstractFramedStreamSourceChannel.java:282) 	at io.undertow.server.protocol.framed.AbstractFramedChannel$FrameReadListener.handleEvent(AbstractFramedChannel.java:929) 	at io.undertow.server.protocol.framed.AbstractFramedChannel$FrameReadListener.handleEvent(AbstractFramedChannel.java:923) 	at org.xnio.ChannelListeners.invokeChannelListener(ChannelListeners.java:92) 	at org.xnio.conduits.ReadReadyHandler$ChannelListenerHandler.readReady(ReadReadyHandler.java:66) 	at io.undertow.protocols.ssl.SslConduit$SslReadReadyHandler.readReady(SslConduit.java:1145) 	at io.undertow.protocols.ssl.SslConduit$1.run(SslConduit.java:168) 	at org.xnio.nio.WorkerThread.safeRun(WorkerThread.java:582) 	at org.xnio.nio.WorkerThread.run(WorkerThread.java:466) ```  **Client trace**  ``` nghttp -v --data=test.json https://localhost:8443 [  0.012] Connected [WARNING] Certificate verification failed: self signed certificate The negotiated protocol: h2 [  0.133] send SETTINGS frame            (niv=2)           [SETTINGS_MAX_CONCURRENT_STREAMS(0x03):100]           [SETTINGS_INITIAL_WINDOW_SIZE(0x04):65535] [  0.133] send PRIORITY frame            (dep_stream_id=0, weight=201, exclusive=0) [  0.133] send PRIORITY frame            (dep_stream_id=0, weight=101, exclusive=0) [  0.133] send PRIORITY frame            (dep_stream_id=0, weight=1, exclusive=0) [  0.133] send PRIORITY frame            (dep_stream_id=7, weight=1, exclusive=0) [  0.133] send PRIORITY frame            (dep_stream_id=3, weight=1, exclusive=0) [  0.133] send HEADERS frame            ; END_HEADERS | PRIORITY           (padlen=0, dep_stream_id=11, weight=16, exclusive=0)           ; Open new stream           :method: POST           :path: /           :scheme: https           :authority: localhost:8443           accept: */*           accept-encoding: gzip, deflate           user-agent: nghttp2/1.31.0           content-length: 23 [  0.133] send DATA frame            ; END_STREAM [  0.139] recv SETTINGS frame            (niv=4)           [SETTINGS_HEADER_TABLE_SIZE(0x01):4096]           [SETTINGS_MAX_FRAME_SIZE(0x05):16384]           [SETTINGS_INITIAL_WINDOW_SIZE(0x04):65535]           [SETTINGS_MAX_CONCURRENT_STREAMS(0x03):1000] [  0.139] send SETTINGS frame            ; ACK           (niv=0) [  0.139] recv SETTINGS frame            ; ACK           (niv=0) [  0.256] recv (stream_id=13) :status: 500 [  0.256] recv (stream_id=13, sensitive) content-length: 0 [  0.256] recv (stream_id=13, sensitive) date: Fri, 23 Mar 2018 10:58:58 GMT [  0.256] recv HEADERS frame            ; END_STREAM | END_HEADERS           (padlen=0)           ; First response header [  0.256] send GOAWAY frame            (last_stream_id=0, error_code=NO_ERROR(0x00), opaque_data(0)=[]) ```  Am I missing something or misconfiguring something?  Please note that I enable h2c in the UndertowConfig configuration class. But the bug does not seem related since removing it  does not fix the problem  ---  **Affects:** 5.0.4  **Reference URL:** https://github.com/plelevier/spring-boot2-tests  **Issue Links:** - #21088 StackOverflowError when using WebFlux multipart file data handler with Undertow (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2018-03-23T11:42:33Z","2019-01-12T16:44:40Z"
"","21846","Spring Boot loads factories using wrong classloader [SPR-17313]","**[PantherDD](https://jira.spring.io/secure/ViewProfile.jspa?name=pantherdd)** opened **[SPR-17313](https://jira.spring.io/browse/SPR-17313?redirect=false)** and commented  When loading the Spring factories, `SpringApplication.getSpringFactoriesInstances()` [uses the thread context classloader](https://github.com/spring-projects/spring-boot/blob/0c00508b3cdec4d30641dd26d8503299e0391fd3/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#L449) instead of the one passed at construction (inside the `ResourceLoader`). Using `Thread.currentThread().getContextClassLoader()` has caused an issue in my setup, as I was expecting the passed-in classloader to be used.  If you agree this is a bug, please use `getClassLoader()` in this method too, like the rest of the class does.  Also, there seem to be a total of [38 places in Spring Boot where this thread context classloader is used](https://github.com/spring-projects/spring-boot/search?q=getContextClassLoader). Not sure if those are legitimate uses, but I'd be nice to check them whether they can also use the `ResourceLoader` instead, so as to avoid further bugs popping up because of the same root cause.   ---  **Reference URL:** https://github.com/spring-projects/spring-boot/blob/0c00508b3cdec4d30641dd26d8503299e0391fd3/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#L449","closed","in: core,","spring-projects-issues","2018-09-29T20:38:03Z","2019-01-12T05:18:06Z"
"","21235","NoSuchBeanDefinitionException when bean is created throught a factory which retuns a super type of bean [SPR-16694]","**[Osvaldo Pina](https://jira.spring.io/secure/ViewProfile.jspa?name=osvado.pina)** opened **[SPR-16694](https://jira.spring.io/browse/SPR-16694?redirect=false)** and commented  The problem appears when: 1-The bean and bean factory are registered through an ImportBeanDefinitionRegistrar 2-A bean is created through a factory that returns a bean supertype 3-The reference required to be injected is any subtype of factory method return 4-The bean instance is not created when the injection search happens  Upon inspecting what was happening, I discovered that the AbstractAutowireCapableBeanFactory.determineTargetType method sets the resolvedTargetType to be the value returned by the bean factory, without considering that the actual bean type could be a subtype of it.  ```java 	protected Class determineTargetType(String beanName, RootBeanDefinition mbd, Class... typesToMatch) { 		Class targetType = mbd.getTargetType(); 		if (targetType == null) { 			targetType = (mbd.getFactoryMethodName() != null ? 					getTypeForFactoryMethod(beanName, mbd, typesToMatch) : 					resolveBeanClass(mbd, beanName, typesToMatch)); 			if (ObjectUtils.isEmpty(typesToMatch) || getTempClassLoader() == null) { 				mbd.resolvedTargetType = targetType; 			} 		} 		return targetType; 	}  ```  The problem only occurs if the bean search occurs before the bean instance is created because the AbstractAutowireCapableBeanFactory.doCreateBean sets the resolvedTargetType as the actual instance type.  ```java 		... 		if (beanType != NullBean.class) { 			mbd.resolvedTargetType = beanType; 		} 		...  ```  if this is actually confirmed as a bug a possible solution would be to consider both the bean class and the factory class in determining the bean's final class  ```java protected Class determineTargetType(String beanName, RootBeanDefinition mbd, Class... typesToMatch) { 		Class targetType = mbd.getTargetType(); 		if (targetType == null) { 			targetType = getBeanType(beanName, 					resolveBeanClass(mbd, beanName, typesToMatch), 					mbd.getFactoryMethodName() != null ? getTypeForFactoryMethod(beanName, mbd, typesToMatch) : null);  			if (ObjectUtils.isEmpty(typesToMatch) || getTempClassLoader() == null) { 				mbd.resolvedTargetType = targetType; 			} 		} 		return targetType; 	}  	private Class getBeanType(String beanName, Class beanType, Class beanFactoryType) {  		if (beanType == null && beanFactoryType == null) { 			return null; 		} 		else if (beanType != null && beanFactoryType != null) { 			if (!beanType.isAssignableFrom(beanFactoryType) && !beanFactoryType.isAssignableFrom(beanType)) { 				throw new BeanCreationException(beanName, "" bean type [""  + beanType.getName() + 						""] that is incompatible with bean factory type ["" + beanFactoryType + ""}""); 			} 			else { 				return beanType; 			} 		} 		else { 			return beanType != null ? beanType : beanFactoryType; 		}  	}  ```  Threre are 2 unit tests atteached that shows the problem   ---  **Affects:** 4.3.15, 5.0.4  **Attachments:** - [bug-spring.zip](https://jira.spring.io/secure/attachment/25466/bug-spring.zip) (_16.91 kB_)","open","in: core,","spring-projects-issues","2018-04-05T17:01:43Z","2019-01-11T15:02:22Z"
"","21794","Javadoc for BufferingClientHttpRequestFactory is missing the end of a sentence [SPR-17261]","**[oneiros-de](https://jira.spring.io/secure/ViewProfile.jspa?name=oneiros-de)** opened **[SPR-17261](https://jira.spring.io/browse/SPR-17261?redirect=false)** and commented  The Javadoc of `BufferingClientHttpRequestFactory` contains the sentence  > Using this wrapper allows for multiple reads of the  The rest of the sentence is missing.  The source for this is  ```java Using this wrapper allows for multiple reads of the  * @linkplain ClientHttpResponse#getBody() response body}. ```  Apparently the text after ""the"" is somehow swallowed by Javadoc.   ---  **Affects:** 4.3.18, 5.0.8, 5.1 RC2  **Reference URL:** https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/http/client/BufferingClientHttpRequestFactory.html  **Backported to:** [5.0.10](https://github.com/spring-projects/spring-framework/milestone/191?closed=1), [4.3.20](https://github.com/spring-projects/spring-framework/milestone/169?closed=1)","closed","type: documentation,","spring-projects-issues","2018-09-10T08:23:19Z","2018-09-21T07:52:16Z"
"","21294","MockMvc equalTo Long throws assertion error [SPR-16753]","**[Ondřej MÍCHAL](https://jira.spring.io/secure/ViewProfile.jspa?name=xandre)** opened **[SPR-16753](https://jira.spring.io/browse/SPR-16753?redirect=false)** and commented  Controller:  ```java @GetMapping(""/test"") public @ResponseBody Long test() {     return 31L; } ```  Test:  ```java Long id = 31L; mvc.perform(get(""/test""))         .andExpect(jsonPath(""$"", equalTo(id))); ```  I think this should pass but throws  ``` java.lang.AssertionError: JSON path ""$"" Expected: <31L>      but: was <31> Expected :<31L>       Actual   :<31> ```    ---  **Affects:** 5.0.4","closed","status: declined,","spring-projects-issues","2018-04-22T04:26:19Z","2019-01-12T16:21:23Z"
"","21724","Mention asynchronous JPA bootstrapping in the reference documentation [SPR-17189]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-17189](https://jira.spring.io/browse/SPR-17189?redirect=false)** and commented  It would be great if the support for asynchronous `EntityManagerFactory` bootstrap was mentioned somewhere in the reference documentation, so that documentation for downstream support in Spring Data JPA could refer to that for explanation why and when deferred repository initialization is needed.  ---  **Issue Links:** - #18305 Background initialization option for JPA EntityManagerFactory / Hibernate SessionFactory - #21540 LocalSessionFactoryBean and HibernateTransactionManager for JPA EntityManagerFactory setup - [DATAJPA-1397](https://jira.spring.io/browse/DATAJPA-1397) Add support for deferred repository initialization  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/50b6f9da1dec8b4402490b91114e3e007e75162c","closed","type: documentation,","spring-projects-issues","2018-08-16T09:45:50Z","2019-01-11T13:40:02Z"
"","21411","Allow registration of application event listeners in a functional way [SPR-16872]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-16872](https://jira.spring.io/browse/SPR-16872?redirect=false)** and commented  `ConfigurableApplicationContext` currently exposes `addApplicationListener(…)` which unfortunately isn't usable with lambdas as they don't retain generics information that's used downstream to properly route events to.     It would be cool if there was an overload `addApplicationListener(Class type, Consumer consumer)` that internally creates a `GenericApplicationListenerAdapter` to carry the type information forward.  ---  **Issue Links:** - #20002 Introduce API to select application listeners - #21508 Resolved ApplicationListener event type should get cached","open","type: enhancement,","spring-projects-issues","2018-05-25T10:01:12Z","2019-01-11T17:07:58Z"
"","21286","Support status for multidimensional maps in data binding not documented properly and maybe buggy [SPR-16745]","**[Oliver Bertuch](https://jira.spring.io/secure/ViewProfile.jspa?name=poikilotherm)** opened **[SPR-16745](https://jira.spring.io/browse/SPR-16745?redirect=false)** and commented  Dear devs of Spring,  I am currently developing some scientific reviewing software (https://github.com/peerpub/peerpub) and I try to use a multidimensional `Map` in my forms.  While single dimension maps work straight forward, adding more than 2 dimensions always results in errors. The code used to test this can be found here: https://github.com/peerpub/peerpub/tree/oliver_test_publisherform/src/main/java/de/fzj/peerpub/doc/publisher  Accessing the data within the view for adding a publisher is no problem. Trying to submit the test form, the following exception is thrown:  ``` Request processing failed; nested exception is org.springframework.beans.InvalidPropertyException: Invalid property 'map[test][attribute][default]' of bean class [de.fzj.peerpub.doc.publisher.PublisherTestForm]: Illegal attempt to get property 'map' threw exception; nested exception is org.springframework.beans.NullValueInNestedPathException: Invalid property 'map[test][attribute][default]' of bean class [de.fzj.peerpub.doc.publisher.PublisherTestForm]: Cannot access indexed value of property referenced in indexed property path 'map[test][attribute][default]': returned null] with root cause  org.springframework.beans.NullValueInNestedPathException: Invalid property 'map[test][attribute][default]' of bean class [de.fzj.peerpub.doc.publisher.PublisherTestForm]: Cannot access indexed value of property referenced in indexed property path 'map[test][attribute][default]': returned null ```  Another (smaller) project where this error can be reproduced: https://github.com/poikilotherm/spring-mvc-test-utils/tree/support_mapOmap Just try to run the smoke test and watch it fail. I was trying to extend this helpfull utility by `@f-lopes` (see also https://github.com/f-lopes/spring-mvc-test-utils/issues/5) but as soon as I use more than 2 dimensions, I get data binding exceptions.  Within the docs, StackOverflow, the framework source code, JIRA, etc. I could not find a hint if this is supported (and how) or not. From my point of view it should be, of course... ;-)  Could you devs have the patience of the saints and enlighten my pleb mind with your knowledge?   ---  **Affects:** 5.0.5  **Reference URL:** https://github.com/f-lopes/spring-mvc-test-utils/issues/5","open","in: core,","spring-projects-issues","2018-04-19T11:23:15Z","2019-01-11T16:43:49Z"
"","21307","Improve performance of StringUtils#trimWhitespace method [SPR-16766]","**[Oleksandr Hasheniuk](https://jira.spring.io/secure/ViewProfile.jspa?name=oleksandr)** opened **[SPR-16766](https://jira.spring.io/browse/SPR-16766?redirect=false)** and commented  Cutting whitespaces once prevents calling System#arrayCopy on every deleted char. With using String#substring method it would be called just once.   ---  **Affects:** 5.0.5  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1805, and commits https://github.com/spring-projects/spring-framework/commit/6545cab42c238170f770b1e574088238574275e9, https://github.com/spring-projects/spring-framework/commit/5a1d7f9c4bd9ffcb8d7caa506972ca7a392d2604","closed","type: enhancement,","spring-projects-issues","2018-04-24T18:57:36Z","2018-05-08T08:53:23Z"
"","21815","getBean(Class) lookup performance degredation [SPR-17282]","**[nytro77](https://jira.spring.io/secure/ViewProfile.jspa?name=nytro77)** opened **[SPR-17282](https://jira.spring.io/browse/SPR-17282?redirect=false)** and commented  When upgrading from 5.0.9 to 5.1.0.RC3 i experienced severe performance degredation in some parts of an application that happens to call ApplicationContext.getBean(Class) many times in for loops.  I have reproduced the problem in the referenced project.  500k lookups of the same bean takes 1,5 seconds in 5.0.9 but 11 seconds in 5.1.0.RC3 on my computer.  When activating TRACE logging both versions prints `Returning cached instance of singleton bean 'thebean'` from `org.springframework.beans.factory.support.DefaultListableBeanFactory`  but something clearly has broken regarding the cache   ---  **Affects:** 5.1 RC3  **Reference URL:** https://github.com/nytro77/spring-get-cached-bean-bug  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c634b2fae786a67c6f075a1130e5079192731bf1","closed","in: core,","spring-projects-issues","2018-09-17T23:12:28Z","2019-01-11T14:12:11Z"
"","21151","Provide a way for ActiveProfilesResolver to read current profiles [SPR-16610]","**[Nikolay Martynov](https://jira.spring.io/secure/ViewProfile.jspa?name=mar-kolya)** opened **[SPR-16610](https://jira.spring.io/browse/SPR-16610?redirect=false)** and commented  #### Overview  Currently I can implement my own `ActiveProfilesResolver` which allows me to provide a list of profiles for a test class. Unfortunately there is no way for an `ActiveProfilesResolver` to access the list of profiles that the test class was started with. This means it essentially can only provide a complete list of profiles; it cannot add to it.  #### Use Case  We have different profiles determining different environments - say dev, qa, prod. These profiles are used both for tests and for actually running services. But for tests we also would like to be able to introduce additional configuration - say we would like to make timeouts bigger. The most natural way is to introduce an additional 'test' profile that gets applied on top of the existing environment profile, but unfortunately `ActiveProfilesResolver` doesn't seem to allow us to do that at the moment.  Please let me know if additional information is required.  Thanks!   --- No further details from [SPR-16610](https://jira.spring.io/browse/SPR-16610?redirect=false)","closed","in: test,","spring-projects-issues","2018-03-18T20:08:49Z","2019-01-25T10:27:18Z"
"","21386","webflux truncates payload [SPR-16846]","**[Nikolay Gorylenko](https://jira.spring.io/secure/ViewProfile.jspa?name=n0mer)** opened **[SPR-16846](https://jira.spring.io/browse/SPR-16846?redirect=false)** and commented  sample of truncated payload (webflux 5.0.5, payload extracted from ServerRequest via .bodyToMono(String.class)):     > {""object"":""page"",""entry"":[{""id"":""161041321255998"",""time"":1526695801986,""messaging"":[{""sender"":{""id"":""1675373035849843""},""recipient"":{""id"":""161041321255998""},""timestamp"":1526695800993,""message"":{""mid"":""mid.$cAACSd3rlhiVpp254oVjdikvx-1mL"",""seq"":536336,""attachments"":[{""title"":""Cupcake Corner Bakery"",""url"":""https:\/\/l.facebook.com\/l.php?u=https\u00253A\u00252F\u00252Fwww.bing.com\u00252Fmaps\u00252Fdefault.aspx\u00253Fv\u00253D2\u002526pc\u00253DFACEBK\u002526mid\u00253D8100\u002526where1\u00253DPiotra\u00252BMicha\u002525C5\u00252582owskiego\u00252B14\u0025252C\u00252B31-326\u00252B\u002525D0\u0025259A\u002525D1\u00252580\u0 >    spring-web 5.0.5 (full payload extracted via `@RequestBody` into String variable):     > {""object"":""page"",""entry"":[{""id"":""161041321255998"",""time"":1526701141870,""messaging"":[{""sender"":{""id"":""1675373035849843""},""recipient"":{""id"":""161041321255998""},""timestamp"":1526701140949,""message"":{""mid"":""mid.$cAACSd3rlhiVpp7_z1VjdnqpzbMei"",""seq"":536509,""attachments"":[{""title"":""Cupcake Corner Bakery"",""url"":""https:\/\/l.facebook.com\/l.php?u=https\u00253A\u00252F\u00252Fwww.bing.com\u00252Fmaps\u00252Fdefault.aspx\u00253Fv\u00253D2\u002526pc\u00253DFACEBK\u002526mid\u00253D8100\u002526where1\u00253DPiotra\u00252BMicha\u002525C5\u00252582owskiego\u00252B14\u0025252C\u00252B31-326\u00252B\u002525D0\u0025259A\u002525D1\u00252580\u002525D0\u002525B0\u002525D0\u002525BA\u002525D0\u002525BE\u002525D0\u002525B2\u002526FORM\u00253DFBKPL1\u002526mkt\u00253Den-US&h=ATM-Sf5N5LphePMuIUa6vwD-qLpC2Lp-hPDo_tvQRa5xlzMy6mLjPP9pdGqmsHmyA4PVrDc_0-X5-8cgAdcUYg78AN3g2qKQBOa95fE0451S_iRPaXR4g67VtMZsUc0&s=1"",""type"":""location"",""payload"":{""coordinates"":{""lat"":50.06582,""long"":19.92785}}}]}}]}]}    ---  **Affects:** 5.0.5  **Attachments:** - [data.json](https://jira.spring.io/secure/attachment/25743/data.json) (_942 bytes_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/3a33b18f47312cedfb92f56496562004443a0188","closed","in: web,","spring-projects-issues","2018-05-19T03:39:54Z","2020-11-10T20:22:06Z"
"","21397","Make it possible to disable Scheduled job via cron expression [SPR-16858]","**[Nikolay Bogdanov](https://jira.spring.io/secure/ViewProfile.jspa?name=nikolaikopernik)** opened **[SPR-16858](https://jira.spring.io/browse/SPR-16858?redirect=false)** and commented  To disable a spring job which uses cron expression you need at least 2 properties:  ```java     ...     @Value(""${jobs.name.enable}"")     private boolean jobEnable;      @Scheduled(cron = ""0 0 0 1 * ?"")     public void execute() \{         if(jobEnable){             //JOB HERE         }     }     ... } ```  But there is no way to configure it to don't start any execution at all, but its relatively valuable feature (you can google it, but here is an example https://stackoverflow.com/questions/13835221/quartz-cron-expression-that-will-never-execute)  So the idea of this issue is to enable support for some ""never"" value for cron expression which will prevent this job from execution forever, so you can use only 1 parameter to configure your job. Example:  ```java   @Scheduled(cron = ""never"") ```  The exact value to disable a job is negotiable.   ---  **Affects:** 5.0.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3a5def047f2aeb8b01d94febdabb52c013c1f676","closed","type: enhancement,","spring-projects-issues","2018-05-22T09:23:55Z","2018-08-17T09:42:43Z"
"","21368","Apply Hibernate Integrator through LocalSessionFactoryBean [SPR-16828]","**[Niko Wittenbeck](https://jira.spring.io/secure/ViewProfile.jspa?name=nikowitt)** opened **[SPR-16828](https://jira.spring.io/browse/SPR-16828?redirect=false)** and commented  Hi there,  using Spring 5.0.6 and a custom LocalSessionFactoryBean for Hibernate 5, I'd like to register a Hibernate integrator progammatically. This needs to be done via BootstrapServiceRegistryBuilder#applyIntegrator.     In the LocalSessionFactory bean, BootstrapServiceRegistryBuilder is only aquired in getMetadataSources():  ```java public MetadataSources getMetadataSources() { (...)  BootstrapServiceRegistryBuilder builder = new BootstrapServiceRegistryBuilder(); (...)  this.metadataSources = new MetadataSources(builder.build());  }  return this.metadataSources;  } ```  This means, in order to simply apply an integrator, I have to override getMetadataSources to apply additional stuff to the BootstrapServiceRegistryBuilder. As private fields are used (metadataSourcesAccessed, metadataSources), ugly code duplication needs to be done.   So IMHO it would be great if the builder could easily be accessed in another way.  ---  **Affects:** 5.0.6  **Issue Links:** - #20852 Support Hibernate 5.3's ManagedBeanRegistry for dependency injection - #21581 Hibernate 5: restore ability to inject ""cacheRegionFactory"" of LocalSessionFactoryBean  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b6d95567e84bbf5f3f25f5c403ac0ed57b376076","closed","type: enhancement,","spring-projects-issues","2018-05-16T06:41:33Z","2019-01-11T17:10:33Z"
"","21277","Actuator doesn't play nice with reactive WebFilters (HttpStatus == null) [SPR-16736]","**[Nicolas Portmann](https://jira.spring.io/secure/ViewProfile.jspa?name=tkp1n)** opened **[SPR-16736](https://jira.spring.io/browse/SPR-16736?redirect=false)** and commented  The reactive web stack allows configuration of a `WebFilter` with a `beforeCommit` handler.  Requests handled by controllers returning `Mono>`, will have the HTTP status code set in the `beforeCommit` handler. Other endpoints (such as actuator) have a HTTP status of `null` in the `beforeCommit` handler. The same applies to controllers returning `Mono` (which actuator might do internally, I haven't checked)  A consistant and documented behaviour would be much appreciated.  A sample to reproduce the issue is attached as Reference URL.   ---  **Affects:** 5.0.5  **Reference URL:** https://github.com/tkp1n/status-null-demo","closed","in: web,","spring-projects-issues","2018-04-17T14:20:26Z","2019-01-11T16:44:48Z"
"","21174","Potential Memory Leak in WebFlux [SPR-16633]","**[Nicolas Portmann](https://jira.spring.io/secure/ViewProfile.jspa?name=tkp1n)** opened **[SPR-16633](https://jira.spring.io/browse/SPR-16633?redirect=false)** and commented  The PooledByteBufAllocator from Netty creates ThreadLocal caches even for non-Netty Threads. These caches quickly move to Old Gen and do not get collected during normal G1 collections.  Why is this a problem?  If any operation which is executed with `subscribeOn(Schedulers.elastic())` causes Netty ByteBuf allocations (lets say using a TcpClient or returning WebFlux responses), a new TheadLocal cache is setup by Netty. Whilst the threads from Schedulers.elastic() eventually get reclaimed, the associated cache does not - at least not during normal G1 collections.  Running the application with `-Dio.netty.allocator.useCacheForAllThreads=false` fixes above issue by only using ThreadLocal caches in Netty Threads. Maybe this should be the default as  - whilst it hurts performance a little with above usage - fixes the potential leak.   ---  0 votes, 5 watchers","closed","in: web,","spring-projects-issues","2018-03-23T12:21:30Z","2019-01-12T16:44:39Z"
"","21148","ThreadPoolTaskExecutor should cancel all remaining Future handles on shutdown [SPR-16607]","**[Nicolas Labrot](https://jira.spring.io/secure/ViewProfile.jspa?name=nithril)** opened **[SPR-16607](https://jira.spring.io/browse/SPR-16607?redirect=false)** and commented  `ThreadPoolTaskExecutor#submitListenable` returns a future that will not be canceled when the executor is `shutdown`. By consequence `Future#get` will block indefinitely.  I would like to propose that the list of `Runnable` returned by `this.executor.shutdownNow();` is used to cancel the `ListenableFuture`.  ---  **Affects:** 5.0.4  **Issue Links:** - #21079 DefaultMessageListenerContainer should interrupt worker threads when not returning on shutdown  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3c1adf7f6af0dff9bda74f40dabe8cf428a62003, https://github.com/spring-projects/spring-framework/commit/99399084a6b1960d152ee46aa59da5304a019439","closed","type: enhancement,","spring-projects-issues","2018-03-16T23:12:31Z","2019-01-11T15:11:25Z"
"","21840","Unnecessary sort in AbstractApplicationEventMulticaster [SPR-17307]","**[Nick Hristov](https://jira.spring.io/secure/ViewProfile.jspa?name=nickhh)** opened **[SPR-17307](https://jira.spring.io/browse/SPR-17307?redirect=false)** and commented  `org.springframework.context.event.AbstractApplicationEventMulticaster.ListenerRetriever#getApplicationListeners` method performs an unnecessary sort:  It creates a list which is a combination of `this.applicationListeners` and `this.applicationListenerBeans` and sorts that list. However, the sorting is unnecessary if either one of the two collections is empty. Furthermore, due to the fact that the sorting utilizes the reflection lookups, this sort can become an expensive unnecessary overhead in some use cases.  In my case, I load large amounts of data (> 1K of objects) via Spring Data Mongo which fires off events for every object loaded in the system.  So the sort operation ends up taking about 38% of the overall cost of the processing, more than any other component in my use case.    ---  **Affects:** 5.0.5  **Attachments:** - [Screen Shot 2018-09-26 at 8.36.54 PM.png](https://jira.spring.io/secure/attachment/26030/Screen+Shot+2018-09-26+at+8.36.54+PM.png) (_413.86 kB_)  **Issue Links:** - #21841 Improve performance by maintaining sort of application listeners (_**""is duplicated by""**_) - #21602 Cache order result per Class in OrderUtils (for AnnotationAwareOrderComparator) - #21858 ApplicationListener is missing from Collection returned by getApplicationListeners() if it was added after the multicaster was initialised - #21883 Request backport of SPR-17307  **Backported to:** [5.0.10](https://github.com/spring-projects/spring-framework/milestone/191?closed=1)","closed","type: enhancement,","spring-projects-issues","2018-09-27T03:52:04Z","2019-01-11T14:18:08Z"
"","21585","Add ability to specify request mapping within @RestController [SPR-17047]","**[Nemykin Roman](https://jira.spring.io/secure/ViewProfile.jspa?name=rnemykin)** opened **[SPR-17047](https://jira.spring.io/browse/SPR-17047?redirect=false)** and commented  Often spring application has rest API and usually we have some controller  ```java @RestController @RequestMapping(""/api/v1"") public class ApiController { } ```  It would be greate if we could rewrite it to  ```java @RestController(path = ""/api/v1"") public class ApiController { } ```  ---  **Issue Links:** - #21979 Add Path to `@Controller` (_**""is duplicated by""**_)","open","in: web,","spring-projects-issues","2018-07-16T14:28:17Z","2019-01-13T04:35:35Z"
"","21370","ServerHttpRequest.Builder should allow setting SslInfo [SPR-16830]","**[nebhale](https://jira.spring.io/secure/ViewProfile.jspa?name=nebhale)** opened **[SPR-16830](https://jira.spring.io/browse/SPR-16830?redirect=false)** and commented  In Spring Framework 5.0.2 `ServerHttpRequest#getSslInfo()` was added in order to expose a connection's TLS information to handlers. Currently, the `ServerHttpRequest.Builder` does not have a method allowing mutators of the request to mutate the TLS information. This prevents a `WebFilter` from intercepting the request and modifying this information.  The `ServerHttpRequest.Builder` should gain the functionality to mutate the TLS information for a request, preferably in an additive way, e.g. adding to rather than replacing the peer certificates.   ---  **Affects:** 5.0.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fbd12e9d16c84c372a1e851bd73e6915670427fc, https://github.com/spring-projects/spring-framework/commit/e3e975d7f984211d1f8b46b3a64985e8465382f1","closed","type: enhancement,","spring-projects-issues","2018-05-16T20:06:08Z","2018-06-12T15:44:03Z"
"","21495","Share ByteBufferPool between UndertowWebSocketClient connections (avoiding risk of memory leaks) [SPR-16957]","**[Napster](https://jira.spring.io/secure/ViewProfile.jspa?name=napster)** opened **[SPR-16957](https://jira.spring.io/browse/SPR-16957?redirect=false)** and commented  Class in question: org.springframework.web.reactive.socket.client.UndertowWebSocketClient  This class handles websocket sessions. For each such websocket session UndertowWebSocketClient#createConnectionBuilder is called, which will instantiate a DefaultByteBufferPool.  DefaultByteBufferPool uses non-static ThreadLocal internally to store instances of an inner class. ThreadLocal#remove is never called, meaning, the reference will only ever be dropped if the Thread itself is garbage collected.  We need three ingredients to cause a hefty memory leak: Usage of ThreadLocal without removal (as described above), using some kind of thread pool (usage of which is ubiquitous), and repeated instantiation of the ThreadLocal. The latter is supplied by Spring's UndertowWebSocketClient implementation, which, as stated above, creates a new DefaultByteBufferPool for each connection.  Now, it might be debatable whether this is caused by some underlying issue in Undertow, and I'll happily open a ticket on their Jira, but it seems to me that using a new DefaultByteBufferPool for each websocket connection is the real culprit. While I could not find much information about the correct usage of the buffer pool in the docs, undertows internal usage of ByteBufferPools seems to indicate that a single one of these is enough for a whole webserver, for example.  I suggest a solution where a single ByteBufferPool is used by an UndertowWebSocketClient (as opposed to one for each connection). An overloaded constructor could be added allowing the caller to supply such a ByteBufferPool, otherwise creating a default buffer pool. UndertowWebSocketClient#setPoolBufferSize (and possibly UndertowWebSocketClient#getPoolBufferSize) would have to be deprecated because the ByteBufferPool interface does not (and neither do the implementations) allow changing that value. In fact I have already deployed a version of our application with such a modified UndertowWebSocketClient and it seems to be doing fine. If the suggestion fits Spring's vision for the UndertowWebSocketClient, I'd be happy to open a PR.  Attached are screenshots of a heap analysis tool demonstrating the symptoms of the problem described in this ticket.   ---  **Affects:** 5.0.7  **Attachments:** - [shot_2018-06-20_00-30-27.png](https://jira.spring.io/secure/attachment/25746/shot_2018-06-20_00-30-27.png) (_141.47 kB_) - [shot_2018-06-20_03-50-29.png](https://jira.spring.io/secure/attachment/25747/shot_2018-06-20_03-50-29.png) (_171.09 kB_)  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1862","closed","type: bug,","spring-projects-issues","2018-06-20T02:25:29Z","2018-07-26T08:09:33Z"
"","21243","StackOverFlowError and memory leaking when sending large files slowly with Webflux + Undertow [SPR-16702]","**[Napster](https://jira.spring.io/secure/ViewProfile.jspa?name=napster)** opened **[SPR-16702](https://jira.spring.io/browse/SPR-16702?redirect=false)** and commented  Experiencing a StackOverFlowException when serving a text/plain output with about 9k lines / total size of about 700kB in production. Reproducing turns out to be a bit finicky. I provided sample code and a sample curl request below, but it might not trigger always and usually requires a lot more data attempted to be sent to be triggered in a test environment.  This is happening when using undertow with Spring Boot 2.0.0 and 2.0.1, with java 8 and java 9. Removing undertow (and using the default, which would be netty), it does not happen.  ```java java.lang.StackOverflowError: null 	at io.undertow.server.protocol.http.HttpResponseConduit.write(HttpResponseConduit.java:615) ~[undertow-core-1.4.23.Final.jar:1.4.23.Final] 	at io.undertow.conduits.AbstractFixedLengthStreamSinkConduit.write(AbstractFixedLengthStreamSinkConduit.java:106) ~[undertow-core-1.4.23.Final.jar:1.4.23.Final] 	at org.xnio.conduits.ConduitStreamSinkChannel.write(ConduitStreamSinkChannel.java:150) ~[xnio-api-3.3.8.Final.jar:3.3.8.Final] 	at io.undertow.channels.DetachableStreamSinkChannel.write(DetachableStreamSinkChannel.java:240) ~[undertow-core-1.4.23.Final.jar:1.4.23.Final] 	at io.undertow.server.HttpServerExchange$WriteDispatchChannel.write(HttpServerExchange.java:2094) ~[undertow-core-1.4.23.Final.jar:1.4.23.Final] 	at org.springframework.http.server.reactive.UndertowServerHttpResponse$ResponseBodyProcessor.writeByteBuffer(UndertowServerHttpResponse.java:196) ~[spring-web-5.0.5.RELEASE.jar:5.0.5.RELEASE] 	at org.springframework.http.server.reactive.UndertowServerHttpResponse$ResponseBodyProcessor.write(UndertowServerHttpResponse.java:176) ~[spring-web-5.0.5.RELEASE.jar:5.0.5.RELEASE] 	at org.springframework.http.server.reactive.UndertowServerHttpResponse$ResponseBodyProcessor.write(UndertowServerHttpResponse.java:147) ~[spring-web-5.0.5.RELEASE.jar:5.0.5.RELEASE] 	at org.springframework.http.server.reactive.AbstractListenerWriteProcessor$State$3.onWritePossible(AbstractListenerWriteProcessor.java:276) ~[spring-web-5.0.5.RELEASE.jar:5.0.5.RELEASE] 	at org.springframework.http.server.reactive.AbstractListenerWriteProcessor.onWritePossible(AbstractListenerWriteProcessor.java:103) ~[spring-web-5.0.5.RELEASE.jar:5.0.5.RELEASE] 	at org.springframework.http.server.reactive.AbstractListenerWriteProcessor.writeIfPossible(AbstractListenerWriteProcessor.java:212) ~[spring-web-5.0.5.RELEASE.jar:5.0.5.RELEASE] 	at org.springframework.http.server.reactive.AbstractListenerWriteProcessor.access$300(AbstractListenerWriteProcessor.java:44) ~[spring-web-5.0.5.RELEASE.jar:5.0.5.RELEASE] 	at org.springframework.http.server.reactive.AbstractListenerWriteProcessor$State$3.onWritePossible(AbstractListenerWriteProcessor.java:294) ~[spring-web-5.0.5.RELEASE.jar:5.0.5.RELEASE] 	at org.springframework.http.server.reactive.AbstractListenerWriteProcessor.onWritePossible(AbstractListenerWriteProcessor.java:103) ~[spring-web-5.0.5.RELEASE.jar:5.0.5.RELEASE] 	at org.springframework.http.server.reactive.AbstractListenerWriteProcessor.writeIfPossible(AbstractListenerWriteProcessor.java:212) ~[spring-web-5.0.5.RELEASE.jar:5.0.5.RELEASE] 	at org.springframework.http.server.reactive.AbstractListenerWriteProcessor.access$300(AbstractListenerWriteProcessor.java:44) ~[spring-web-5.0.5.RELEASE.jar:5.0.5.RELEASE] 	at org.springframework.http.server.reactive.AbstractListenerWriteProcessor$State$3.onWritePossible(AbstractListenerWriteProcessor.java:294) ~[spring-web-5.0.5.RELEASE.jar:5.0.5.RELEASE] 	at org.springframework.http.server.reactive.AbstractListenerWriteProcessor.onWritePossible(AbstractListenerWriteProcessor.java:103) ~[spring-web-5.0.5.RELEASE.jar:5.0.5.RELEASE] 	at org.springframework.http.server.reactive.AbstractListenerWriteProcessor.writeIfPossible(AbstractListenerWriteProcessor.java:212) ~[spring-web-5.0.5.RELEASE.jar:5.0.5.RELEASE] 	at org.springframework.http.server.reactive.AbstractListenerWriteProcessor.access$300(AbstractListenerWriteProcessor.java:44) ~[spring-web-5.0.5.RELEASE.jar:5.0.5.RELEASE] . . . ```  curl -i -v -o /dev/null --limit-rate 1m localhost:8080/count\?till=5000000  ```java @RestController public class TestController {      @GetMapping(""/count"")     public Mono test(@RequestParam(""till"") long till) {         return Mono.fromCallable(() ->                 count(till)         );     }      private String count(long till) {         StringBuilder sb = new StringBuilder();         for (int ii = 0; ii < till; ii++) {             sb.append(ii).append(""\n"");         }         return sb.toString();     } }  ```  ---  **Affects:** 5.0.5  **Attachments:** - [EPollSelectorImpl.png](https://jira.spring.io/secure/attachment/25472/EPollSelectorImpl.png) (_139.41 kB_) - [fullstacktrace.log](https://jira.spring.io/secure/attachment/25469/fullstacktrace.log) (_179.38 kB_)  **Issue Links:** - #21088 StackOverflowError when using WebFlux multipart file data handler with Undertow","closed","type: bug,","spring-projects-issues","2018-04-08T15:34:58Z","2019-01-11T16:28:59Z"
"","21140","AcceptHeaderLocaleResolver chooses wrong Locale for language match [SPR-16599]","**[Naozumi Taromaru](https://jira.spring.io/secure/ViewProfile.jspa?name=taromaru)** opened **[SPR-16599](https://jira.spring.io/browse/SPR-16599?redirect=false)** and commented  Order of Locale in Accept-Language Header is slighted in AcceptHeaderLocaleResolver.  For example:  supportedLocales of AcceptHeaderLocaleResolver: ja, en_US, en Accept-Language of Request: ja-JP,en-US;q=0.5 Expected: ja Actual: en_US  ""ja-JP,en-US;q=0.5"" is meaning as ""ja-JP ＞ ja ＞ en-US ＞ en"". (Reference: Last ""For example"" of https://tools.ietf.org/html/rfc4647#section-3.4.1) And ""ja"" is supported. So expected Locale is ""ja"".  Suggestion:  Change ""languageMatch = candidate;"" at https://github.com/spring-projects/spring-framework/blob/v5.0.4.RELEASE/spring-webmvc/src/main/java/org/springframework/web/servlet/i18n/AcceptHeaderLocaleResolver.java#L132 to ""return candidate;"". And delete languageMatch(always null).  ---  **Affects:** 5.0.4  **Reference URL:** #21002  **Issue Links:** - #21002 AcceptHeaderLocaleResolver should match country locales against supported language locales  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6e1cac9145385c9b9dbcefbeec46b1a86985bc19, https://github.com/spring-projects/spring-framework/commit/f8588e364a4846723ac4be6a914b13404ef412ea  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","type: bug,","spring-projects-issues","2018-03-16T04:28:59Z","2019-01-14T04:31:50Z"
"","21624","Add ability to retrieve associated ClientRequest from WebClientResponseException [SPR-17087]","**[Mykola Varahash](https://jira.spring.io/secure/ViewProfile.jspa?name=mvarahash)** opened **[SPR-17087](https://jira.spring.io/browse/SPR-17087?redirect=false)** and commented  If you have few chained client requests and one of it failed you will get WebClientResponseException, but it is hard to determinate which request actually failed.  ---  **Issue Links:** - #22087 [Improvement request] Obtain request context from WebClientException. (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3258ac1ec4159b3fe69cc9daad4ab054b90d0e6c","closed","type: enhancement,","spring-projects-issues","2018-07-25T16:01:52Z","2019-01-11T12:46:52Z"
"","21177","WebClient retrieve() does not handle Void.class as recommended [SPR-16636]","**[Mykola Varahash](https://jira.spring.io/secure/ViewProfile.jspa?name=mvarahash)** opened **[SPR-16636](https://jira.spring.io/browse/SPR-16636?redirect=false)** and commented  Currently, when user tries to consume response body content in the following way:  ```java WebClient client = ...; Mono result = client.get().retrieve().bodyToMono(Void.class); result.block(); ```  and a response actually contains body content, then the underlying http connection will not be closed and returned to connections pool.  ---  **Affects:** 5.0.4  **Issue Links:** - #20567 Fix behavior of ClientResponse bodyToMono and bodyToFlux with Void.class  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/729d0d27968176e2d0b4ff00dfec334219210f61, https://github.com/spring-projects/spring-framework/commit/e28a995ab7e41604704264bbd39a0f08852f65d3","closed","type: bug,","spring-projects-issues","2018-03-23T18:49:33Z","2019-01-11T15:10:49Z"
"","21863","JsonPath won't work in Kotlin test cases [SPR-17329]","**[Muhammad](https://jira.spring.io/secure/ViewProfile.jspa?name=mhewedy)** opened **[SPR-17329](https://jira.spring.io/browse/SPR-17329?redirect=false)** and commented  I've an API /users returns   ```java [{""username"":""ali"",""age"":30},{""username"":""wael"",""age"":40}] ```  I am trying to test the api in kotlin:  ```java mockMvc.perform(get(""/users"")                 .contentType(""application/json""))                 .andDo { print() }                 .andExpect { status().isOk }                 .andExpect { jsonPath(""\$[*].username"").value(arrayContainingInAnyOrder(""invalid"", ""always"", ""success"")) } ```  It never fails, however the predicate is false.  I've created a sample spring-boot project that run the same test case in Java (which fails, and it should) and in Kotlin and it did not fail.  I've created two additional test cases to test jsonpath in isolation from spring test, and it reported that, both java and kotlin is working fine.  The link to project on github: https://github.com/springexamples/spring-kotlin-test-jsonpath   ---  **Reference URL:** https://github.com/springexamples/spring-kotlin-test-jsonpath","closed","status: invalid,","spring-projects-issues","2018-10-03T12:07:20Z","2019-01-13T19:59:25Z"
"","21749","HibernateTransactionManager should lazily acquire JDBC Connection (like HibernateJpaDialect) [SPR-17216]","**[mishraawake](https://jira.spring.io/secure/ViewProfile.jspa?name=mishraawake)** opened **[SPR-17216](https://jira.spring.io/browse/SPR-17216?redirect=false)** and commented  We are trying to implement the feature “provider_disables_autocommit” in our application. Problem context in our application: We have a manager class which has complex business logic. We configured HibernateTransactionManager around the methods of manager class. In many cases, we simply returns from the manager without touching the database. This option of hibernate seems very promising to us. However, we observe there are some caveat with the option. . To implement this is via spring HibernateTransactionManager, we have to set txManager.setPrepareConnection(false), txManager.setAutodetectDataSource(false) , otherwise it tries to acquire connection when transaction is starting. Is there a negative impact of this?  ---  **Affects:** 5.0.8  **Issue Links:** - #21540 LocalSessionFactoryBean and HibernateTransactionManager for JPA EntityManagerFactory setup - #21494 Propagate read-only status to Hibernate Session through setDefaultReadOnly - #22089 HibernateTransactionManager (unintentionally) bound to Hibernate 5.2 SharedSessionContractImplementor - #21811 Notification for db connection acquired when LazyConnectionDataSourceProxy is used  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/78cad0fdd3c0e0cac6f5460380605a4d970b8825","closed","type: enhancement,","spring-projects-issues","2018-08-26T15:52:57Z","2019-01-11T14:02:53Z"
"","19562","Content-Length should be set in the request when using reactive WebClient [SPR-16949]","**[Mirko Adebahr](https://jira.spring.io/secure/ViewProfile.jspa?name=mirko.adebahr)** opened **[SPR-16949](https://jira.spring.io/browse/SPR-16949?redirect=false)** and commented  As of #21431, the `content-length` header should be set in the request for `Mono` publishers when using the reactive `WebClient`. Still, as far as I can see the header is not set in the HTTP request.  This is what I think is the problem:  1. `AbstractClientHttpRequest::doCommit`: `applyHeaders()` is called as commit action -> Headers are applied to `httpRequest` in `ReactorClientHttpRequest` 2. After this, `body.doOnNext(data -> headers.setContentLength(data.readableByteCount()))` is called (see `EncoderHttpMessageWriter::write`)  The `doOnNext` seems to be executed too late to have an effect on the headers in the HTTP request.  ---  **Affects:** 5.0.7  **Issue Links:** - #21431 AbstractJackson2Encoder::getContentLength should not return null for MonoJust/FluxJust publisher  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/280da61d5c9594e6541725ea67af9dda1a5943a7, https://github.com/spring-projects/spring-framework/commit/6189e17d7ce7c3f20f51be00b4c0b10af4cc3ceb, https://github.com/spring-projects/spring-framework/commit/4a26f93a0dcc9e1839b2bc1e4a6684d085a6f80e, https://github.com/spring-projects/spring-framework/commit/d1c9401dc23a6a2eadb16a171824f25cd08bd98e","closed","type: enhancement,","spring-projects-issues","2018-06-18T06:51:35Z","2019-01-11T16:10:37Z"
"","21431","AbstractJackson2Encoder::getContentLength should not return null for MonoJust/FluxJust publisher [SPR-16892]","**[Mirko Adebahr](https://jira.spring.io/secure/ViewProfile.jspa?name=mirko.adebahr)** opened **[SPR-16892](https://jira.spring.io/browse/SPR-16892?redirect=false)** and commented  We're trying to use `WebClient` for creating a non-blocking POST request. The request results in a 400 Bad Request due to a missing `content-length` header. As the requested endpoint belongs to a 3rd party application, we cannot change that server's behaviour.  In #21085, the `EncoderHttpMessageWriter` was enhanced to automatically set the `content-length` Header if the provided publisher is a `Mono`. Unfortunately, this does not help when using `Jackson2JsonEncoder` for encoding as `getContentLength` will always return `null`.  In my understanding, for `MonoJust`s and `FluxJust`s it should be possible to determine the content length and set the header value accordingly.  ---  **Affects:** 5.0.6  **Issue Links:** - #21085 EncoderHttpMessageWriter never sets Content-Length - #19562 Content-Length should be set in the request when using reactive WebClient  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/010352163ba4d7f754c019912dc67cb31ef5702a, https://github.com/spring-projects/spring-framework/commit/4a26f93a0dcc9e1839b2bc1e4a6684d085a6f80e, https://github.com/spring-projects/spring-framework/commit/7bfd68381610c145a780744b4507d4c5c0237610, https://github.com/spring-projects/spring-framework/commit/d1c9401dc23a6a2eadb16a171824f25cd08bd98e","closed","type: enhancement,","spring-projects-issues","2018-06-01T15:45:51Z","2020-03-22T02:13:18Z"
"","21145","DefaultResponseErrorHandler wastes the body of a response with an unknown status [SPR-16604]","**[Milos Cubrilo](https://jira.spring.io/secure/ViewProfile.jspa?name=mcubrilo)** opened **[SPR-16604](https://jira.spring.io/browse/SPR-16604?redirect=false)** and commented  `RestTemplate.handleResponse` calls `ResponseErrorHandler.hasError(response)` to check if it should delegate error handling to `ResponseErrorHandler` instance.  In case of an unknown status code, `DefaultResponseErrorHandler.hasError` swallows the exception thrown by `DefaultResponseErrorHandler.getHttpStatusCode(response)` and returns `false`.  This causes `RestTemplate` code to proceed with standard response handling, but without possibility to read message body, which has already been consumed during `UnknownHttpStatusCodeException` creation in `DefaultResponseErrorHandler.getHttpStatusCode(response)` call.  ---  **Affects:** 4.3.14  **Issue Links:** - #20529 RestTemplate doesn't consistently tolerate unknown HTTP status codes - #20656 DefaultResponseErrorHandler.hasError doesn't tolerate unknown status codes - #19892 DefaultResponseErrorHandler should have its methods protected - #21993 DefaultResponseErrorHandler does not handle status values outside of HttpStatus enum - #21971 RestTemplate does not throw exception for custom error codes  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1742, and commits https://github.com/spring-projects/spring-framework/commit/3b3f27d5ffc0f9ea9e7361a59a0acbf0c3b20d12, https://github.com/spring-projects/spring-framework/commit/d95bbb6b1b7dc5a0d2cd24fb4628aef038bd665c","closed","type: bug,","spring-projects-issues","2018-03-16T13:22:18Z","2019-01-11T15:12:26Z"
"","21374","Extending ScheduledTaskRegistrar functionality [SPR-16834]","**[Mike Pryakhin](https://jira.spring.io/secure/ViewProfile.jspa?name=mpryahin)** opened **[SPR-16834](https://jira.spring.io/browse/SPR-16834?redirect=false)** and commented  I'm using the `@EnableScheduling` annotation and it works great, but I need to extend its usage from in-VM scheduler to a cluster-wide scheduler so that there is only one app instance scheduling periodic tasks at any point in time.  I've implemented this by extending the ScheduledTaskRegistrar class and defining methods for scheduling and canceling tasks and calling those methods from the Curator Framework leader election implementation. But I encountered one inconvenience that prevents me from injecting my custom ScheduledTaskRegistrar implementation into the ScheduledAnnotationBeanPostProcessor. This is due to the corresponding variable is initialized right in its [declaration](https://github.com/spring-projects/spring-framework/blob/b03905e2b0ddbba87f523862fe7ee931292d214c/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java#L133). So that I have nothing to do but copy-paste the implementation and make this field settable via the constructor.  It would we fantastic if you consider adding this ability to the original class.  ---  **Affects:** 5.0.6  **Issue Links:** - #21352 Extract ScheduledAnnotationBeanPostProcessor.createRunnable()  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9aed9bf823fa6ba3944caa99f90aad02850ec16f  3 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2018-05-17T12:56:16Z","2019-01-11T17:10:49Z"
"","21473","UriUtils query param ""safe"" encoding mode (%-encode sub-delims) [SPR-16934]","**[Mike Placentra](https://jira.spring.io/secure/ViewProfile.jspa?name=mikepii)** opened **[SPR-16934](https://jira.spring.io/browse/SPR-16934?redirect=false)** and commented  Currently `UriUtils.encodeQueryParam()` does not encode sub-delimiters as defined in RFC 3986 since they're valid characters. It would be useful to have an additional ""safe"" mode for this function which percent-encodes sub-delimiters for better compatibility with decoders.  In particular, Tomcat decodes + as a space in the value returned by `HttpServletRequest#getRequestParameter` (for `@RequestParam`, as Rossen Stoyanchev noted in #21399), which is troublesome for Spring users since the decoder and encoder available to them in the platform are incompatible. For example, if you use `UriUtils.encodeQueryParam()` to add a ""next page token"" query param to an URL returned by your _list foobars_ controller, and the token contains a + (such as those returned by some AWS APIs which are opaquely base64-encoded), the token will be corrupted when you read it back into the controller method using `@RequestParam` (the + will become a space).   In #19394 there was some discussion of adding this sort of functionality on a broader scope to `UriComponentsBuilder`, etc, but I'm proposing starting with just `UriUtils.encodeQueryParam()` so at least users don't need to use another project's encoder (such as Guava's) as a workaround.  See my [branch](https://github.com/spring-projects/spring-framework/compare/master...mikepii:safe-uri-encode?expand=1) as an example for clarity, I'll clean up the commit log and submit a PR for the review process if this ticket makes sense.  ---  **Issue Links:** - #19394 UriComponentBuilder doesn't work with encoded HTTP URL having '+'.","closed","type: enhancement,","spring-projects-issues","2018-06-12T01:43:37Z","2019-01-11T15:41:39Z"
"","21525","AspectJ aspect for @javax.transaction.Transactional is not initialised by default [SPR-16987]","**[Mike B](https://jira.spring.io/secure/ViewProfile.jspa?name=mikebl71)** opened **[SPR-16987](https://jira.spring.io/browse/SPR-16987?redirect=false)** and commented  If I  a) use Spring transaction management in the AspectJ mode ( `@EnableTransactionManagement`(mode = AdviceMode.ASPECTJ) )  b) use the javax.transaction.Transactional annotation instead of org.springframework.transaction.annotation.Transactional  then  a) it doesn't work out of the box - transactions are not created around annotated methods.  b) I get ""Skipping transactional joinpoint [] because no transaction manager has been configured"" in the logs (if I enable spring debug logging).  This seems to be because the default configuration in AspectJTransactionManagementConfiguration only initialises AnnotationTransactionAspect but not JtaAnnotationTransactionAspect. So the JtaAnnotationTransactionAspect gets woven in by aspectJ compiler and executed but because it is not initialised with the transaction manager it cannot create transactions.  As a workaround, I can initialise it myself but declaring  `@Bean` `@Role`(BeanDefinition.ROLE_INFRASTRUCTURE) public JtaAnnotationTransactionAspect jtaTransactionAspect() { return JtaAnnotationTransactionAspect.aspectOf(); }  But could you please add it to the default configuration so that it works out of the box.  ---  **Affects:** 5.0.7  **Issue Links:** - #16423 Support standard javax.transaction.Transactional in AspectJ  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5b24040b5e1dc2ba90aacd656403c3b5f90d8aee","closed","type: enhancement,","spring-projects-issues","2018-06-29T14:24:30Z","2019-01-11T16:07:51Z"
"","21844","SpringBeanContainer not working with Hibernate Search's ParameterizedBridge [SPR-17311]","**[mihxil](https://jira.spring.io/secure/ViewProfile.jspa?name=mihxil)** opened **[SPR-17311](https://jira.spring.io/browse/SPR-17311?redirect=false)** and commented  I tried to upgrade my project using spring and hibernate to spring 5.1.  I use customized search mappings via org.hibernate.search.cfg.SearchMapping and have some instances were we customize a bridge via org.hibernate.search.cfg.FieldMapping#bridge.     I noticed that the classes I supply there must now be instantiated with spring. This surprised me a bit, but well.     The issue arises if the class is also a org.hibernate.search.bridge.ParameterizedBridge, and we set some 'params'  (org.hibernate.search.cfg.FieldBridgeMapping#param)     Different fields with the same bridge implementation but with _different params_, now receive the same instance of the class, so things gets mixed up. The param of one field influences the behaviour of another field.  It boils down to that parameterized bridges get unusable. The first thought was, since the instance are now managed by spring, that I could also configure them there, but it seems that they are matched on class only, so I have to extend the bridge for every instance with different params, more or less mooting the complete point of parametrization.  It could be that I missed something, but I couldn't easily find out what that would be.      ---  **Affects:** 5.1 GA","open","type: bug,","spring-projects-issues","2018-09-28T11:14:14Z","2018-10-12T08:20:49Z"
"","21494","Propagate read-only status to Hibernate Session through setDefaultReadOnly [SPR-16956]","**[MIhalcea Vlad](https://jira.spring.io/secure/ViewProfile.jspa?name=mih_vlad)** opened **[SPR-16956](https://jira.spring.io/browse/SPR-16956?redirect=false)** and commented  By default,  `@Transactional(readOnly = true)` sets the FlushMode to MANUAL. However, Hibernate can save up lots of memory by discarding the associated hydrated state if we also set the `session.setDefaultReadOnly(true)`.  Not only that we save memory, but we also save CPU cycles because, if the user tries to do a manual flush, we won't propagate it to any entity since they are virtually read-only.  ---  **Affects:** 5.0.7  **Issue Links:** - #20850 Support for Hibernate ORM 5.3 - #20852 Support Hibernate 5.3's ManagedBeanRegistry for dependency injection - #20314 Propagate read-only status as FlushMode.MANUAL to Query instances - #22089 HibernateTransactionManager (unintentionally) bound to Hibernate 5.2 SharedSessionContractImplementor - #21540 LocalSessionFactoryBean and HibernateTransactionManager for JPA EntityManagerFactory setup - #21749 HibernateTransactionManager should lazily acquire JDBC Connection (like HibernateJpaDialect) - #21553 HibernateJpaDialect cannot translate JDBCException to custom DataAccessException  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1861, and commits https://github.com/spring-projects/spring-framework/commit/010ba33d03cd6cf37515be3aabc5d9f5e999a4cb, https://github.com/spring-projects/spring-framework/commit/d22d4082616921acebc365f3d0ad2f1b2b99e395  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2018-06-19T09:06:44Z","2019-08-21T14:07:23Z"
"","21817","MockHttpServletResponse doesn't propagate Content-Language response header [SPR-17284]","**[Michał Szymborski](https://jira.spring.io/secure/ViewProfile.jspa?name=mszymborski)** opened **[SPR-17284](https://jira.spring.io/browse/SPR-17284?redirect=false)** and commented  When trying to test our language fallback scenario using spring-test, I've noticed that the following scenario is failing, while it works just fine when reproduced with curl (the actual content of the test has been replaced due to the proprietary nature of the project):     `mockMvc.perform(post(SOME_URL)` `     .header(HttpHeaders.ACCEPT_LANGUAGE, NOT_SUPPORTED_LANGUAGE)` `     .content(serializeRequest()))` `     .andExpect(header().string(HttpHeaders.CONTENT_LANGUAGE, FALLBACK_LANGUAGE));{color`}    As I ventured on to find the cuplrit I've noticed that this is handled as a special case of a header in MockHttpServletResponse:     `[https://github.com/spring-projects/spring-framework/blob/v5.0.9.RELEASE/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletResponse.java#L592]{color`}    After the locale is set, unlike in the first two if cases, the header is not actually added to the response, causing failure in the tests. For reference this is how the header is set in the controller:     `return ResponseEntity` `    .status(HttpStatus.OK)` `    .header(HttpHeaders.CONTENT_LANGUAGE, language)` `    .body(serializedDto);{color`}  I would expect the header to actually be set, unless there's something I've missed when browsing through the mechanism - if so, I would love if you could point me to the relevant resources to understand this better.  ---  **Affects:** 5.0.9  **Issue Links:** - #19773 Mock MVC / RequestBuilder should handle Accept-Language header appropriately  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d551710c32e2cd3977c22baf7dd6b0ac3524622d, https://github.com/spring-projects/spring-framework/commit/1489457025e64de16bfccf376e509cf313bf3e90  **Backported to:** [5.0.10](https://github.com/spring-projects/spring-framework/milestone/191?closed=1)","closed","type: bug,","spring-projects-issues","2018-09-18T13:37:52Z","2019-01-11T14:12:26Z"
"","21513","StandardServletMultipartResolver should support also HTTP PUT method [SPR-16975]","**[Michal Aron](https://jira.spring.io/secure/ViewProfile.jspa?name=michalaron)** opened **[SPR-16975](https://jira.spring.io/browse/SPR-16975?redirect=false)** and commented  StandardServletMultipartResolver should support HTTP PUT method as well.  In the referenced StackOverflow question (in the accepted answer), there is justification that the limitation for POST method is chosen because of W3C RFC and the deduction that ""PUT request represent a single resource. But multiparts means multiple resources in a single body."".  But I do not think this argument is really convincing, when reading the original W3C RFC - it is rather vague, the term ""entity enclosed with the request"" may have more meanings and does not have to necessarily forbid ""multiple body parts"", therefore I think the derived limitation to POST method only is too strict.  The other answer to the same question (https://stackoverflow.com/a/20374337/3626641) gives pretty good argument that ""custom object that contains multiple fields, including one or more files, should be ok, it could still be considered as being one resource in REST terms"".  This is exactly the situation I am facing on my project and I believe I am not the only one - there are multiple examples of people having to extend the StandardServletMultipartResolver to support POST as as well - e.g. [https://stackoverflow.com/questions/7981640/spring-3-0-fileupload-only-with-post/33658066](https://stackoverflow.com/questions/7981640/spring-3-0-fileupload-only-with-post/33658066#33658066))  On our project, we have a method for updating complex form in one request (including both JSON part and file part, so we need to use multipart request), but the method should be still PUT in my opinion, as according to RESTful design best practices, an idempotent update (even a complex one), should be handled using PUT method.  By the way, we are migrating the project from JAX-RS / Apache CXF endpoints to Spring WEB REST controllers and with the previous solution, PUT multipart requests worked fine.         ---  **Affects:** 4.3.16  **Reference URL:** https://stackoverflow.com/questions/20373912/spring-mvc-framework-multipartresolver-with-put-method?lq=1","closed","type: enhancement,","spring-projects-issues","2018-06-25T15:16:05Z","2018-07-26T08:09:36Z"
"","21510","The WebHttpHandlerBuilder copy constructor does not copy the applicationcontext [SPR-16972]","**[Michael Wirth](https://jira.spring.io/secure/ViewProfile.jspa?name=michael_wirth)** opened **[SPR-16972](https://jira.spring.io/browse/SPR-16972?redirect=false)** and commented  The copy constructor **WebHttpHandlerBuilder(WebHttpHandlerBuilder other)** does not clone the **applicationcontext**.  I guess the constructor was not updated when the applicationcontext was added.  As result my tests fail because of the missing applicationcontext. I try to call an Acutator endpoint to test the security configuration, but this test fails because the EndpointRequestMatcher requires the applicationcontext.    https://github.com/spring-projects/spring-framework/blame/master/spring-web/src/main/java/org/springframework/web/server/adapter/WebHttpHandlerBuilder.java#L125  ---  **Affects:** 5.0.7  **Issue Links:** - #21597 Testing actuator endpoint authorization with webclient throws exception (_**""is duplicated by""**_) - #20845 Provide access to ApplicationContext via ServerWebExchange  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2a15962d7fef281134a71a67de7020a7e64aba8b, https://github.com/spring-projects/spring-framework/commit/e388ddfdded607d57471432f5e27abe1cb77ceae","closed","type: bug,","spring-projects-issues","2018-06-24T18:18:40Z","2019-01-11T16:08:47Z"
"","21350","Model attributes added within postHandle of a HandlerInterceptor are not ignored on String redirect if ignoreDefaultModelOnRedirect of RequestMappingHandlerAdapter is set to true [SPR-16810]","**[Michael Vitz](https://jira.spring.io/secure/ViewProfile.jspa?name=mvitz)** opened **[SPR-16810](https://jira.spring.io/browse/SPR-16810?redirect=false)** and commented  In our current project we use some `HandlerInterceptor`s to add some model attributes before the views are rendered.  Everything worked until we added a String based redirect `redirect:/foo` to on of our controllers. After that the added model attributes are exposed as query parameters.  This is unexpected because `ignoreDefaultModelOnRedirect` of `RequestMappingHandlerAdapter` is set to `true` and I would expect this to hold even though the attributes are added by a `HandlerInterceptor`.  I debuged a lot and it seems that the redirect is finally handled in `InternalResourceViewResolver`. It inherits the `createView` method from `UrlBasedViewResolver` which creates a new `RedirectView` which by default sets `exposeModelAttributes` to `true`.   ---  **Affects:** 5.0.6  **Reference URL:** https://github.com/mvitz/spring-webmvcinterceptorredirectbug","closed","status: declined,","spring-projects-issues","2018-05-10T10:33:23Z","2019-01-12T16:21:21Z"
"","21671","Ability to determine if a conflicting request mapping is already registered [SPR-17134]","**[Michael Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=michael@hurts.ca)** opened **[SPR-17134](https://jira.spring.io/browse/SPR-17134?redirect=false)** and commented  I have a ContextRefreshedEvent listener that registers some generic controller endpoints for database tables that don't have specialized implementations. For example, `/api/someTable/{id`}.  The specialized implementations are regular `@RequestMapping` methods that are registered on startup before the ContextRefreshedEvent listener runs.  In most cases I'm able to detect that a specialized endpoint already exists when registering the generic ones by catching IllegalStateExceptions from requestMappingHandlerMapping.registerMapping(...).  ```java RequestMappingInfo mapping = RequestMappingInfo.paths(""/api/someTable/{id}"")     .methods(RequestMethod.GET)     .build(); try {     logger.trace(""Registering {}"", mapping.getPatternsCondition());     requestMappingHandlerMapping.registerMapping(mapping, controller, method); } catch (IllegalStateException e) {     logger.debug(""Not registering {} - specific handler already exists"",         mapping.getPatternsCondition()); }  ```  But this feels fragile, and doesn't catch all cases. AbstractHandlerMethodMapping.assertUniqueMethodMapping() looks for an ambiguous mapping by comparing the RequestMappingInfo objects with .equals(). I found at least two cases where this is insufficient: 1. Differing parameter names: If my generic endpoint is `""/api/someTable/{id}""` but my specialized endpoint has `@RequestMapping(""/api/someTable/{someId}"")`, I won't get the IllegalStateException at registration time. 2. If the specialized endpoint has multiple paths, for example `@RequestMapping({""/api/someTable/{id}"", ""/api/v1/synonym/{id}"")`, and I register the generic endpoint with RequestMappingInfo.paths(... both paths ...), I'm OK. If I instead try to register it as two separate registrations, each with one path, the .equals() returns false and the IllegalStateException isn't thrown on registration.  In both cases, trying to call the endpoint will give an exception ""Ambiguous handler methods mapped ..."" in AbstractHandlerMethodMapping.lookupHandlerMethod(), but it's too late then.  What I'd really like to have is a way to determine at registration time that a particular URL pattern will be ambiguous with an existing one.  If that's not practical, alternatives might be to provide a way to look up the handler for a URL string, or to enumerate all mapping patterns.     Environment: Spring Boot 1.5.14  ---  **Affects:** 4.3.18","closed","type: enhancement,","spring-projects-issues","2018-08-07T01:08:46Z","2019-01-13T20:16:49Z"
"","21754","@Value support for comma-delimited paths into Path array [SPR-17221]","**[Michael Osipov](https://jira.spring.io/secure/ViewProfile.jspa?name=michael-o)** opened **[SPR-17221](https://jira.spring.io/browse/SPR-17221?redirect=false)** and commented  Consider the following properties file:  ``` repo.git.snippets.excludes=.git,.gitignore,snippets.ini,README.md ```  I cannot simply say:  ```java @Value(""${repo.git.snippets.excludes}"") private Path[] snippetsExcludes; ```  An array of one element is inject. If I say:  ```java @Value(""${repo.git.snippets.excludes}"") private String[] snippetsExcludes_; ```  It seems like the splitter along with the editors do only work on strings.  See also screenshot from debugger.   ---  **Affects:** 5.0.8  **Attachments:** - [broken-split.png](https://jira.spring.io/secure/attachment/25996/broken-split.png) (_14.02 kB_)","open","type: enhancement,","spring-projects-issues","2018-08-28T13:33:34Z","2020-05-26T12:00:42Z"
"","21449","Add controller mapping relative UriComponentsBuilder [SPR-16910]","**[Michael Osipov](https://jira.spring.io/secure/ViewProfile.jspa?name=michael-o)** opened **[SPR-16910](https://jira.spring.io/browse/SPR-16910?redirect=false)** and commented  Consider the following snippet:     ```java import java.io.InputStream;  import org.springframework.http.ResponseEntity; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RestController; import org.springframework.web.util.UriComponents; import org.springframework.web.util.UriComponentsBuilder;  @RestController @RequestMapping(""/rest/documents"") public class DocumentsController {  	@PostMapping(consumes = ""application/zip"") 	public ResponseEntity createDocument(InputStream is, UriComponentsBuilder uriBuilder) {  		UriComponents uc = uriBuilder.path(""/rest/documents/{id}"").buildAndExpand(""6667f88a-5783-11e8-857e-001f29e7988e"");  		return ResponseEntity.created(uc.toUri()).build(); 	}  } ```  Unfortunately, I have to duplicate `/rest/documents` with the `UriComponentsBuilder`. It'd be nice if this components could be controller mapping relative. I'd like to do `uriBuilder.path(""/{id}"").buildAndExpand(""6667f88a-5783-11e8-857e-001f29e7988e"")` only.  ---  **Affects:** 5.0.6","closed","type: enhancement,","spring-projects-issues","2018-06-06T07:20:35Z","2019-01-13T20:25:58Z"
"","21328","Webflux: Default Resource as fallback for non-existing resources [SPR-16788]","**[Michael Gmeiner](https://jira.spring.io/secure/ViewProfile.jspa?name=gmeiner.m)** opened **[SPR-16788](https://jira.spring.io/browse/SPR-16788?redirect=false)** and commented  I'm currently migrating a spring-boot app to spring-boot 2 and webflux. Everything looks great and webflux is an amazing integration of Project Reactor into the spring ecosystem. So first thanks for the great work!  Our app serves a SPA which takes use of the History-API, which means there are urls they can only be accessed via a client side router and do not have a corresponding resource in the serving app. That means it should return the index for every resource which cannot be found on the server because the client side router takes care of that. Before Webflux I implemented this with customizing the _WebMvcConfigurer like this:_  ```java @Configuration class WebMvcConfig @Autowired constructor(val resourceProperties: ResourceProperties): WebMvcConfigurer {      override fun addResourceHandlers( registry: ResourceHandlerRegistry ) {         registry.addResourceHandler( ""/**"" )                 .addResourceLocations( *resourceProperties.staticLocations )                 .setCachePeriod( 0 ) // no cache                 .resourceChain( resourceProperties.chain.isCache )                 .addResolver(object: PathResourceResolver() {                     override fun resolveResource(request: HttpServletRequest?, requestPath: String, locations: MutableList, chain: ResourceResolverChain): Resource {                          return super.resolveResource(request, requestPath, locations, chain) ?: super.resolveResource( request, ""/index.html"", locations, chain )                      }                 })     } }  ```   In Webflux this could be also possbile when i register my own lookup function for resources which just overrides the   org.springframework.web.reactive.function.server.PathResourceLookupFunction  But that is not possible because the _PathResourceLookupFunction_ class is package private.  My question is now if it would be possible to make the _PathResourceLookupFunction_ class public and make it easy to add something like a fallback resource for it?  Or: provide a function on RouterFunctions to create resource mappings with fallback option:  For example like:  ```java RouterFunctions.resourcesWithFallback(""/**"", ClassPathResource(""static/""), ClassPathResource(""static/index.html"")) ```  Please let me know your thoughts about that or if you have any other suggestions to achieve that. If you're ok with some possible solution i described above i could also provide a PR for this.   Thanks in advance   ---  **Affects:** 5.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bfb2effddb7d2cb9b50c1088b3971028633ad8f2","closed","type: enhancement,","spring-projects-issues","2018-05-02T14:13:18Z","2020-05-15T11:00:14Z"
"","21410","SimpleAliasRegistry misses log out in case of bean override [SPR-16871]","**[Michael Decker](https://jira.spring.io/secure/ViewProfile.jspa?name=kenori)** opened **[SPR-16871](https://jira.spring.io/browse/SPR-16871?redirect=false)** and commented  As we realized in [Non unique bean producer method names are not invoked #13252](https://github.com/spring-projects/spring-boot/issues/13252), `org.springframework.core.SimpleAliasRegistry.registerAlias(String, String)` does not have any log output, if a bean is overridden, only an exception:  ```java if (!allowAliasOverriding()) {     throw new IllegalStateException(""Cannot register alias '"" + alias + ""' for name '"" +             name + ""': It is already registered for name '"" + registeredName + ""'.""); } ```  But these implementation does have a log output, if they override a bean:  ```yaml org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader: INFO org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: INFO org.springframework.beans.factory.support.FactoryBeanRegistrySupport: INFO org.springframework.beans.factory.support.AbstractBeanFactory: INFO org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: INFO org.springframework.beans.factory.support.DefaultListableBeanFactory: INFO ```  Perhaps it's even possible to have a common approach to log this. For example `org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener: DEBUG` is a great help to understand auto configuration conditional issues. Something similar for such an issue would be great.   ---  **Affects:** 5.0.6  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/13252  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/74fcdea2d96e6c88d232c487e6e2ca6b9978773a, https://github.com/spring-projects/spring-framework/commit/8a56db6e4ebc2db71fc0524bbeea22b7acae7d2a","closed","type: enhancement,","spring-projects-issues","2018-05-25T07:48:49Z","2018-06-12T15:44:03Z"
"","21192","Revise StringUtils.parseLocale(String) for proper handling of corner cases [SPR-16651]","**[Michael Decker](https://jira.spring.io/secure/ViewProfile.jspa?name=kenori)** opened **[SPR-16651](https://jira.spring.io/browse/SPR-16651?redirect=false)** and commented  We are using Spring Boot 2.0.0.RELEASE (jdk1.8.0_144, Windows 10)  We had to realize, that `org.springframework.util.StringUtils.parseLocaleString(String)` does not return always the same instance, as it was created from:  ``` from '' (und) to 'null (null)' from 'sr_BA_#Latn' (sr-Latn-BA) to 'sr_BA_#Latn (sr-BA)' from 'ja_JP_JP_#u-ca-japanese' (ja-JP-u-ca-japanese-x-lvariant-JP) to 'ja_JP_JP_#u-ca-japanese (ja-JP-x-lvariant-JP)' from 'sr_ME_#Latn' (sr-Latn-ME) to 'sr_ME_#Latn (sr-ME)' from 'sr__#Latn' (sr-Latn) to 'sr_#LATN (sr)' from 'th_TH_TH_#u-nu-thai' (th-TH-u-nu-thai-x-lvariant-TH) to 'th_TH_TH_#u-nu-thai (th-TH-x-lvariant-TH)' from 'sr_RS_#Latn' (sr-Latn-RS) to 'sr_RS_#Latn (sr-RS)' ```  The test is:  ```java  import static org.junit.Assert.assertEquals; import static org.springframework.util.StringUtils.parseLocale; import static org.springframework.util.StringUtils.parseLocaleString;  import java.util.List; import java.util.Locale; import java.util.stream.Collectors; import java.util.stream.Stream;  import org.junit.Test;  public class SpringStringUtilsParseLocaleTest {    @Test   public void testParseLocale() {     List failing = Stream.of(Locale.getAvailableLocales()) //         .filter(locale -> !locale.equals(parseLocale(locale.toString()))) //         .map(locale -> String.format(""from '%s' (%s) to '%s (%s)'"", locale, toLanguageTag(locale),             parseLocale(locale.toString()), toLanguageTag(parseLocale(locale.toString())))) //         .collect(Collectors.toList());      // assertEquals(Collections.emptyList(), failing);     assertEquals("""", failing.stream().collect(Collectors.joining(""\n"")));   }    @Test   public void testParseLocaleString() {     List failing = Stream.of(Locale.getAvailableLocales()) //         .filter(locale -> !locale.equals(parseLocaleString(locale.toString()))) //         .map(locale -> String.format(""from '%s' (%s) to '%s (%s)'"", locale, toLanguageTag(locale),             parseLocaleString(locale.toString()), toLanguageTag(parseLocaleString(locale.toString())))) //         .collect(Collectors.toList());      // assertEquals(Collections.emptyList(), failing);     assertEquals("""", failing.stream().collect(Collectors.joining(""\n"")));   }    private static String toLanguageTag(Locale locale) {     return locale == null ? null : locale.toLanguageTag();   }  } ```  ---  **Affects:** 5.0.4  **Issue Links:** - #19283 StringUtils.parseLocaleString(): does not parse locale string in java 7 for Serbian (Latin) - #11228 StringUtils#parseLocaleString(String) does not work for empty locale - #12254 StringUtils#parseLocaleString(String) with Variant when no Country - #20736 StringToLocaleConverter should allow BCP 47 values - #21241 CookieLocaleResolver is not RFC6265 compliant when setting a locale and time zone  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cab35aa788a1edbd647b4a8bd6e798524838f67e, https://github.com/spring-projects/spring-framework/commit/55563c16b5744288c0cb73fde0a07ba9e4d97e09, https://github.com/spring-projects/spring-framework/commit/88e4006790dccbabc0ee4448a0b70c6912584818","closed","type: enhancement,","spring-projects-issues","2018-03-28T14:11:49Z","2019-01-11T15:07:40Z"
"","21854","MockCookie parsing fails if cookie does not include attributes [SPR-17321]","**[Michael Bell](https://jira.spring.io/secure/ViewProfile.jspa?name=mbell)** opened **[SPR-17321](https://jira.spring.io/browse/SPR-17321?redirect=false)** and commented  In brief, the `MockServletRequest` and `MockServletResponse` cannot handle a cookie of `name=value` . They require `name=value; (optionalattribute)`. Without the semi-colon, `MockCookie.parse()`, introduced in Spring 5.1 RC2 throws an `ArrayIndexOutOfBoundsException`.  ```java @Test(expected = ArrayIndexOutOfBoundsException.class) public void springTestParsingBug() {     // Demonstrates Spring can't handle this     MockCookie.parse(""a=1""); }  @Test public void springTestParsingBugWorkaround() {     // Demonstrates Spring test needs an attribute     MockCookie.parse(""a=1; HttpOnly""); }  @Test public void springTestParsingBugWorkaround2() {     // Demonstrates Spring test needs an attribute     MockCookie.parse(""a=1;""); } ```  Regression was introduced in the work discussed in #21647.     ---  **Affects:** 5.1 GA  **Issue Links:** - #21647 Add support for adding cookies as headers in MockHttpServletResponse","closed","type: bug,","spring-projects-issues","2018-10-01T20:23:48Z","2019-01-11T14:16:04Z"
"","21338","Deprecate JSONP support and update MappingJackson2JsonView defaults [SPR-16798]","**[Meyyalagan Chandrasekaran](https://jira.spring.io/secure/ViewProfile.jspa?name=meyy)** opened **[SPR-16798](https://jira.spring.io/browse/SPR-16798?redirect=false)** and commented  MappingJacksonJsonView class started supporting JSONP callback by default which can make applications vulnerable to JSONP Hijacking when developers upgrade their application to Spring 4.1 without realizing JSONP support coming with upgrade.   It would be helpful if we can avoid cross-domain requests by default unless developers wanted to turn it on explicitly.  ---  **Reference URL:** #12994  **Issue Links:** - #12994 Support JSON-P Callback parameters in MappingJacksonJsonView - #21453 Remove JSONP support  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/874859493bbda59739c38c7e52eb3625f247b93a, https://github.com/spring-projects/spring-framework/commit/b80c13b722bb207ddf43f53a007ee3ddc1dd2e26  **Backported to:** [4.3.18](https://github.com/spring-projects/spring-framework/milestone/167?closed=1)","closed","type: enhancement,","spring-projects-issues","2018-05-08T02:56:41Z","2019-01-14T04:31:12Z"
"","21892","Make CaffeineCache generic typesafe [SPR-17359]","**[member sound](https://jira.spring.io/secure/ViewProfile.jspa?name=membersound)** opened **[SPR-17359](https://jira.spring.io/browse/SPR-17359?redirect=false)** and commented  Unfortunately `org.springframework.cache.caffeine.CaffeineCache` cannot be created with a classtype-specific Caffeine:  The following won't work, because `CaffeineCache` is not generic:  {{ new CaffeineCache(""MYCACHE"",    Caffeine.newBuilder()       .expireAfterWrite(30, TimeUnit.SECONDS)       .build()); //this is the problem  }}  But it would be nice doing so, because all the CaffeineCache methods could be typesafe then.   ---  **Affects:** 5.0.9","closed","type: enhancement,","spring-projects-issues","2018-10-10T10:49:37Z","2018-10-10T12:03:43Z"
"","21836","Encryption support for values in application.properties [SPR-17303]","**[member sound](https://jira.spring.io/secure/ViewProfile.jspa?name=membersound)** opened **[SPR-17303](https://jira.spring.io/browse/SPR-17303?redirect=false)** and commented  Spring-Cloud has a feature to encrypt values in `application.properties` with a ""{cipher}"". But that requires the usage of a private keystore, and the installation of JCE java. Which is way too much if your intention is eg to just hide sensitive passwords from GIT.  So spring lacks a simple properties encryption feature.  It would be nice to add such a feature, similar to `jasypt`: https://github.com/ulisesbocchio/jasypt-spring-boot  With Jasypt, properties can be stored as:  `my.property=ENC()`  Then by simply providing an environment variable, or java vararg, the encrypted values are decrypted by a PropertySource PostProcessor.     Yet I don't know if spring-cloud is the correct library for such a basic feature. Or maybe spring-security? But it would be very helpful having that feature integrated in spring officially.  ---  No further details from [SPR-17303](https://jira.spring.io/browse/SPR-17303?redirect=false)","open","in: core,","spring-projects-issues","2018-09-25T08:46:52Z","2021-11-11T10:13:58Z"
"","21816","GeneratedKeyHolder.getKey() should accept on-duplicate-key result on MySQL [SPR-17283]","**[member sound](https://jira.spring.io/secure/ViewProfile.jspa?name=membersound)** opened **[SPR-17283](https://jira.spring.io/browse/SPR-17283?redirect=false)** and commented  There is an issue in `spring-jdbc` since 2015:  Root cause seems to be using `mysql` with `ON DUPLICATE KEY UPDATE id=LAST_INSERT_ID(id)`;  If the database row already exists, some columns should only be updated and the correct id of the column should be returned, without an extra SELECT. Therefore the `LAST_INSERT_UD` function is used.  Problem, as described in the question: ""The keyholder is assuming two rows have been modified (even though only one has been) and is incorrectly returning the ID plus the next sequential ID (i.e. the ID plus 1).""  You can reproduce it by creating initial data in mysql, and updating that data as follows:  ```java create mytable (id bigint AUTO INCREMENT, fixed_val varchar, dynamic_val varchar, primary key(id));  INSERT INTO my_table (fixed_val, dynamic_val) VALUES (""fixed1"", ""val1""); INSERT INTO my_table (fixed_val, dynamic_val) VALUES (""fixed2"", ""val2"");  @Autowired private JdbcTemplate jdbcTemplate;  private static final String SQL = ""INSERT INTO my_table                 (fixed_val, dynamic_val) VALUES (?,?)                 ON DUPLICATE KEY UPDATE id = last_insert_id(id), dynamic_val = VALUES(dynamic_val)"";  public long upsert() { 	KeyHolder key = new GeneratedKeyHolder();  	jdbcTemplate.update(con -> { 		final PreparedStatement ps = con.prepareStatement(SQL, Statement.RETURN_GENERATED_KEYS); 		ps.setObject(""fixed1"", ""val3""); 		return ps; 	}, key);  	return key.getKey().longValue(); }  upsert(); ```  Exception:  ```java org.springframework.dao.InvalidDataAccessApiUsageException: The getKeys method should only be used when keys for a single row are returned.  The current key list contains keys for multiple rows: [{GENERATED_KEY=2}, {GENERATED_KEY=3}] 	at org.springframework.jdbc.support.GeneratedKeyHolder.getKeys(GeneratedKeyHolder.java:96) ~[spring-jdbc-5.0.9.RELEASE.jar:5.0.9.RELEASE] 	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204) ~[spring-core-5.0.9.RELEASE.jar:5.0.9.RELEASE] 	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:746) ~[spring-aop-5.0.9.RELEASE.jar:5.0.9.RELEASE] 	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.0.9.RELEASE.jar:5.0.9.RELEASE] 	at org.springframework.cache.interceptor.CacheInterceptor.lambda$invoke$0(CacheInterceptor.java:53) ~[spring-context-5.0.9.RELEASE.jar:5.0.9.RELEASE] 	at org.springframework.cache.interceptor.CacheAspectSupport.invokeOperation(CacheAspectSupport.java:336) ~[spring-context-5.0.9.RELEASE.jar:5.0.9.RELEASE] 	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:391) ~[spring-context-5.0.9.RELEASE.jar:5.0.9.RELEASE] 	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:316) ~[spring-context-5.0.9.RELEASE.jar:5.0.9.RELEASE] 	at org.springframework.cache.interceptor.CacheInterceptor.invoke(CacheInterceptor.java:61) ~[spring-context-5.0.9.RELEASE.jar:5.0.9.RELEASE] 	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185) ~[spring-aop-5.0.9.RELEASE.jar:5.0.9.RELEASE] 	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688) ~[spring-aop-5.0.9.RELEASE.jar:5.0.9.RELEASE] 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:514) [na:na] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) [na:na] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1135) [na:na] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635) [na:na] 	at java.base/java.lang.Thread.run(Thread.java:844) [na:na] ```    ---  **Affects:** 5.0.9  **Reference URL:** https://stackoverflow.com/questions/30107388/mysql-on-duplicate-key-update-with-primary-key-and-unique-key","closed","type: enhancement,","spring-projects-issues","2018-09-18T13:07:43Z","2018-09-19T08:12:36Z"
"","21799","MockRestServiceServer.verify() not working in a CompletableFuture [SPR-17266]","**[member sound](https://jira.spring.io/secure/ViewProfile.jspa?name=membersound)** opened **[SPR-17266](https://jira.spring.io/browse/SPR-17266?redirect=false)** and commented  When sending multiple async requests via `RestTemplate` using `CompletableFuture`, and when ignoring any exceptions (eg collecting only the requests that have been successful), the `MockRestServiceServer.verify()` method will not let the `@Test` fail!  Example:  ```java @RunWith(SpringRunner.class) @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT) @AutoConfigureMockMvc public class MockRestServiceServerTest {    @Autowired    private MockMvc mvc;     @Autowired    private RestTemplate restTemplate;     private MockRestServiceServer mockServer;     @Before    public void initmock() {       this.mockServer = MockRestServiceServer.bindTo(restTemplate).ignoreExpectOrder(true).build();    }     @After    public void verify() {       //this should let the test fail, but does not       mockServer.verify();    }     @Test    public void test() throws Exception {       mockServer.expect(once(), requestTo(""/remoteurl"")).andRespond(withSuccess());       mvc.perform(MockMvcRequestBuilders             .post(""/test""))             .andExpect(status().isOk());    } }  ```        ```java @RestController public class TestServlet {    @Autowired    private RestTemplate restTemplate;     @PostMapping(""/test"")    public String test() {       //simulate 3 concurrent requests       List requests = new ArrayList<>();       requests.add("""");       requests.add("""");       requests.add("""");        final AtomicInteger counter = new AtomicInteger(1);        List>> futures =             requests.stream()                   .map(hostReq ->                      CompletableFuture.supplyAsync(                         () -> {                            System.out.println(""sending remote request: "" + counter.getAndIncrement());                            return restTemplate.postForEntity(""/remoteurl"", null, String.class);                         })                         .exceptionally(ex -> {                            System.out.println(""ignoring ex"");                            return null; //ignoring exceptions                         }))                   .collect(Collectors.toList());        futures.stream()             .map(CompletableFuture::join)             .filter(Objects::nonNull)             .collect(Collectors.toList());        return ""OK"";    } }  ```     The rest template sends 3 requests out, and 2 exceptions are logged (because we set up the mock with `once()`.  So far so good, but the `MockRestServiceServer` seems not to record the failed requests, and `.verify()` always passes! But it should fail because 3 requests have been send, instead of the expected one only.   ---  **Affects:** 5.0.8","closed","type: enhancement,","spring-projects-issues","2018-09-11T09:37:31Z","2019-04-04T21:16:33Z"
"","21332","Get the last element from ""LinkedMultiValueMap"" [SPR-16792]","**[Md](https://jira.spring.io/secure/ViewProfile.jspa?name=nanofaroque04)** opened **[SPR-16792](https://jira.spring.io/browse/SPR-16792?redirect=false)** and commented  Currently, we can get the first element of list by using the Key but there is no way to get the last element.    ---  **Affects:** 5.0.5  **Reference URL:** https://github.com/spring-projects/spring-framework/blob/master/spring-core/src/main/java/org/springframework/util/LinkedMultiValueMap.java","closed","in: core,","spring-projects-issues","2018-05-03T20:05:07Z","2019-07-11T10:25:47Z"
"","21652","SharedEntityManagerCreator should support deferred access to StoredProcedureQuery output parameters [SPR-17115]","**[mconner](https://jira.spring.io/secure/ViewProfile.jspa?name=mconner)** opened **[SPR-17115](https://jira.spring.io/browse/SPR-17115?redirect=false)** and commented  On executing a stored proc, SharedEntityManagerCreator creates a DeferredQueryInvocationHandler, which creates a temporary EntityManager (if no transactional entity manager is found) and invokes the method (execute), and because it is in the list of queryTerminatingMethods  – it appears to have been recently added with #21366 -- it closes the entity manager of the returned query. As such, this:     ```java StoredProcedureQuery query = em.createStoredProcedureQuery(STORED_PROC_NAME)   .registerStoredProcedureParameter(1, String.class, ParameterMode.OUT)   .registerStoredProcedureParameter(2, String.class, ParameterMode.OUT)   .registerStoredProcedureParameter(3, String.class, ParameterMode.OUT)   .registerStoredProcedureParameter(4, Date.class, ParameterMode.OUT); query.execute(); String host = (String) query.getOutputParameterValue(1); << error here  ```  fails with the message:     ```java java.lang.IllegalStateException: Attempting to execute an operation on a closed EntityManager.java.lang.IllegalStateException: Attempting to execute an operation on a closed EntityManager. at org.eclipse.persistence.internal.jpa.EntityManagerImpl.verifyOpen(EntityManagerImpl.java:1924) ~[eclipselink-2.6.5.jar:2.6.5.v20170607-b3d05bd] at org.eclipse.persistence.internal.jpa.StoredProcedureQueryImpl.getOutputParameterValue(StoredProcedureQueryImpl.java:476) ~[eclipselink-2.6.5.jar:2.6.5.v20170607-b3d05bd] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_102] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_102] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_102] at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_102] at org.springframework.orm.jpa.SharedEntityManagerCreator$DeferredQueryInvocationHandler.invoke(SharedEntityManagerCreator.java:380) ~[spring-orm-5.0.8.RELEASE.jar:5.0.8.RELEASE] at com.sun.proxy.$Proxy451.getOutputParameterValue(Unknown Source) ~[?:?] ```  because eclipselink checks to see if the entity manager is open, and it is not.    Adding `@Transactional` to the method appears to be a workaround.                   ---  **Affects:** 5.0.7  **Issue Links:** - #21366 Connection acquired while calling a stored procedure via JPA is not released  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c46dacc209bf36d175896ebd6d5e7aa82866653d","closed","type: enhancement,","spring-projects-issues","2018-08-01T21:07:49Z","2019-01-11T12:50:30Z"
"","21144","Test JIRA [SPR-16603]","**[mayu mepuv](https://jira.spring.io/secure/ViewProfile.jspa?name=mayumepuv)** opened **[SPR-16603](https://jira.spring.io/browse/SPR-16603?redirect=false)** and commented  Test and manipulate Jira   ---  **Attachments:** - [téléchargé.png](https://jira.spring.io/secure/attachment/25421/t%C3%A9l%C3%A9charg%C3%A9.png) (_3.88 kB_)  1 votes, 1 watchers","closed","status: invalid,","spring-projects-issues","2018-03-16T09:14:00Z","2019-01-12T05:19:14Z"
"","21143","Doc: @Scope not inherited from base class [SPR-16602]","**[Max Huang](https://jira.spring.io/secure/ViewProfile.jspa?name=milian.jr@gmail.com)** opened **[SPR-16602](https://jira.spring.io/browse/SPR-16602?redirect=false)** and commented  [Bean definition inheritance documentation](https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans-child-bean-definitions) states the following:  _*A child bean definition inherits scope*, constructor argument values, property values, and method overrides from the parent, with the option to add new values. Any scope, initialization method, destroy method, and/or static factory method settings that you specify will override the corresponding parent settings._  _The remaining settings are always taken from the child definition: depends on, autowire mode, dependency check, singleton, lazy init._  Based on the above statement, the scope of the child bean below should be prototype, however, it shows the child's scope as singleton.  ```java @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE) public abstract class Parent {  }   @Component public class Child extends Parent {  }  @Component public class CustomBeanFactory implements BeanFactoryPostProcessor {     @Override     public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {         System.out.println(beanFactory.getBeanDefinition(""child"").getScope()); // displays singleton     } } ```  Is the above behavior due to the the child bean takes in the default scope (which is a singleton) and overrides the parent's scope?   ---  **Affects:** 4.3.14, 5.0.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/914b2470dc8f55a6dc4fed1b39834d3a18d858fe, https://github.com/spring-projects/spring-framework/commit/881817678fafb7ace42264242cb90a733ec310b8  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","type: documentation,","spring-projects-issues","2018-03-16T07:51:34Z","2021-02-22T16:48:20Z"
"","21154","Allow to make FormHttpMessageConverter add the charset in the Content-Type header [SPR-16613]","**[Mauro Molinari](https://jira.spring.io/secure/ViewProfile.jspa?name=mauromol)** opened **[SPR-16613](https://jira.spring.io/browse/SPR-16613?redirect=false)** and commented  When writing out a form that does not need multipart encoding, `FormHttpMessageConverter` does this in `org.springframework.http.converter.FormHttpMessageConverter.writeForm(MultiValueMap, MediaType, HttpOutputMessage)`: if the request headers do not specify a Content-Type (which is the case most of the times, when you use `RestTemplate` and the `RequestEntity` is built automatically from the supplied HTTP method and body object), `application/x-www-form-urlencoded` is added as the content type and the charset used for encoding parameter values is by default (if not specified otherwise) UTF-8. So, the default behaviour of `FormHttpMessageConverter` is to encode parameters with UTF-8 and assume the server does the same (to decode them) when just `application/x-www-form-urlencoded` is specified as a content type. However, there are cases in which the server may use another ""implicit"" encoding for this kind of data: Tomcat, for instance, uses ISO-8859-1 in its default configuration (or at least it did so until version 6 or 7, I've not checked what happens in more recent versions). Today I also encountered another web server, running PHP scripts, that assumes ISO-8859-1 if no encoding is specified in the Content-Type.  The solution to this problem is, either: * set a different charset on the `FormHttpMessageConverter`, like ISO-8859-1 in the above example: this is however cumbersome (it requires to cycle through all the default registered `HttpMessageConverters` on the `RestTemplate` to find the correct one and change the encoding) and it also limits the characters that can be correctly encoded and transferred to the server (as an example: ISO-8859-1 is missing the € sign) * otherwise, you have to find a way to make `FormHttpMessageConverter` explicitly set the charset in the Content-Type, like this: `Content-Type: application/x-www-form-urlencoded;charset=UTF-8`  IMHO, I can't think of a good reason for which `FormHttpMessageConverter` shouldn't do the latter by default (compatibility reasons with very old servers??). In my real-world scenario I see that I can make the server correctly use UTF-8 to decode my form data when I explicitly set the charset in the content type, overriding the default ISO-8859-1 that is used otherwise.  Extending `FormHttpMessageConverter` to do this is really a pain, because this class was not designed with extensibility in mind: there's not getter for the private `charset` field, many methods (like `writeForm(...)` and `isMultipart(...)`) are private, no getter for `partConverters`, etc.   ---  **Affects:** 5.0.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2e4963fca3647be299fa75383548e23e2448a2ce, https://github.com/spring-projects/spring-framework/commit/5861e9685bfa6556ffdd56e76df6bd83829fbba6, https://github.com/spring-projects/spring-framework/commit/1897d8e85843174e18d164b2eebb08c14b988999  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2018-03-19T13:43:29Z","2018-04-03T20:34:29Z"
"","21478","Self autowiring does not use cglib for transactional and scheduled beans [SPR-16939]","**[Matej Spiller-Muys](https://jira.spring.io/secure/ViewProfile.jspa?name=mspiller)** opened **[SPR-16939](https://jira.spring.io/browse/SPR-16939?redirect=false)** and commented  We are using method with `@Scheduled` annotations inside beans that have `@Transactional` methods (including `@Scheduled`). The scheduled task is called using proxied been and the `@Transactional` works as expected.  However as soon as we add self autowiring (so we can manage `@Transactional` between method calls), then scheduled task method is called directly without proxy.  **It does not work:** 1. settings property: spring.aop.proxy-target-class=true 2. `@EnableAspectJAutoProxy`(proxyTargetClass = true) 3. `@EnableTransactionManagement`(proxyTargetClass = true)  The only workaround is to manually add `@Scope`(proxyMode = ScopedProxyMode.TARGET_CLASS) to each problematic bean. But this is error prone.  It should respect global proxy-target-class (it is default anyway in spring 5.0).  I have attached the example.  The same problem is in Spring 4.3.  **Excepted stacktrace from `@Scheduled`:** ... at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:284) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185) at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688) at springtest.MyServiceImpl$$EnhancerBySpringCGLIB$$ad7504a5.scheduled(\) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at org.springframework.scheduling.support.ScheduledMethodRunnable.run(ScheduledMethodRunnable.java:65)  **Actual stacktrace from `@Scheduled`:** java.lang.Exception at springtest.MyServiceImpl.scheduled(MyServiceImpl.java:20) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at org.springframework.scheduling.support.ScheduledMethodRunnable.run(ScheduledMethodRunnable.java:65)    ---  **Affects:** 5.0.7  **Attachments:** - [springtest.zip](https://jira.spring.io/secure/attachment/25745/springtest.zip) (_4.12 kB_)","open","in: core,","spring-projects-issues","2018-06-14T09:23:02Z","2021-11-10T10:04:14Z"
"","21768","Validation is not executed when type conversion failed on immutable form [SPR-17235]","**[Masatoshi Tada](https://jira.spring.io/secure/ViewProfile.jspa?name=masatoshi%20tada)** opened **[SPR-17235](https://jira.spring.io/browse/SPR-17235?redirect=false)** and commented  When I use immutable form, I found validation behavior on the immutable form is not same as on the mutable form. Please see attached images. On the mutable form, validation is completely executed even if type conversion failed. But on the immutable form, validation is not executed. Please try my sample on github (https://github.com/MasatoshiTada/spring-mvc-form-sample).  ---  **Affects:** 5.1 RC2  **Reference URL:** https://github.com/MasatoshiTada/spring-mvc-form-sample  **Attachments:** - [01-immutable.png](https://jira.spring.io/secure/attachment/26006/01-immutable.png) (_29.49 kB_) - [02-mutable.png](https://jira.spring.io/secure/attachment/26005/02-mutable.png) (_35.54 kB_)  **Issue Links:** - #21381 Validation failure not exposed next to binding failure for immutable form class","open","in: web,","spring-projects-issues","2018-09-02T08:50:44Z","2019-01-11T14:02:09Z"
"","21394","No type-based error code used by immutable form class when type conversion error occurs [SPR-16854]","**[Masatoshi Tada](https://jira.spring.io/secure/ViewProfile.jspa?name=masatoshi%20tada)** opened **[SPR-16854](https://jira.spring.io/browse/SPR-16854?redirect=false)** and commented  I created src/main/resources/messages.properties and added some messages like below.  ``` NotBlank={0} is required NotNull={0} is required typeMismatch.java.time.LocalDate={0} must be 'yyyy-MM-dd'  message=Message birthday=Birthday ```  When type conversion error occurs, the message of `typeMismatch.java.time.LocalDate` is not used.     ---  **Affects:** 5.0.6  **Reference URL:** https://github.com/MasatoshiTada/spring-mvc-form-sample/tree/master/01-immutable  **Attachments:** - [type-conversion-error.png](https://jira.spring.io/secure/attachment/25726/type-conversion-error.png) (_165.85 kB_)  **Issue Links:** - #21380 `@DateTimeFormat` annotations are necessary both on field and constructor parameter in the immutable form class - #21381 Validation failure not exposed next to binding failure for immutable form class  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/955665b419ec237029abfa0824ca8a47d410a423","closed","type: enhancement,","spring-projects-issues","2018-05-22T00:33:14Z","2019-01-13T04:43:43Z"
"","21381","Validation failure not exposed next to binding failure for immutable form class [SPR-16841]","**[Masatoshi Tada](https://jira.spring.io/secure/ViewProfile.jspa?name=masatoshi%20tada)** opened **[SPR-16841](https://jira.spring.io/browse/SPR-16841?redirect=false)** and commented  Immutable sample -> https://github.com/MasatoshiTada/spring-mvc-form-sample/tree/master/01-immutable Mutable sample -> https://github.com/MasatoshiTada/spring-mvc-form-sample/tree/master/02-mutable     ""Message"" is constrained by `@NotBlank` and ""Birthday"" is constrained by `@NotNull` and `@DateTimeFormat`(pattern = ""yyyy-MM-dd"").  1. Behavior of mutable sample    Both values are validated (see ""mutable.png"")  2. Behavior of immutable sample    The only ""Birthday"" is validated (see ""immutable.png"")  ---  **Affects:** 5.0.6  **Reference URL:** https://github.com/MasatoshiTada/spring-mvc-form-sample/blob/master/01-immutable/src/main/java/com/example/immutable/SampleForm.java  **Attachments:** - [immutable.png](https://jira.spring.io/secure/attachment/25725/immutable.png) (_82.00 kB_) - [immutable-20180717.png](https://jira.spring.io/secure/attachment/25770/immutable-20180717.png) (_54.22 kB_) - [mutable.png](https://jira.spring.io/secure/attachment/25724/mutable.png) (_87.24 kB_) - [mutable-20180717.png](https://jira.spring.io/secure/attachment/25771/mutable-20180717.png) (_23.37 kB_)  **Issue Links:** - #20994 Cannot create BindStatus for valid field on immutable form object in case of bind errors - #21768 Validation is not executed when type conversion failed on immutable form - #21611 spring-webflux ModelAttributeMethodArgumentResolver validateIfApplicable - #21622 `@RequestBody` validation kotlin support improvement - #21394 No type-based error code used by immutable form class when type conversion error occurs  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/955665b419ec237029abfa0824ca8a47d410a423","closed","type: enhancement,","spring-projects-issues","2018-05-18T12:14:06Z","2019-01-13T04:44:55Z"
"","21380","@DateTimeFormat annotations are necessary both on field and constructor parameter in the immutable form class [SPR-16840]","**[Masatoshi Tada](https://jira.spring.io/secure/ViewProfile.jspa?name=masatoshi%20tada)** opened **[SPR-16840](https://jira.spring.io/browse/SPR-16840?redirect=false)** and commented  public class SampleForm {      @NotBlank     private String message;          @NotNull     @DateTimeFormat(pattern = ""yyyy-MM-dd"")     private LocalDate birthday;          public SampleForm(String message, @DateTimeFormat(pattern = ""yyyy-MM-dd"") LocalDate birthday) {         this.message = message;         this.birthday = birthday;     }          public String getMessage() {         return message;     }          public LocalDate getBirthday() {         return birthday;     }  }  If field's annotation is missing, a value in textbox become ""yy/MM/dd"" when returning to input view. If constructor parameter's annotation is missing, a validation error occurs in spite of inputting correct value. So I have to add annotations to both of field and constructor parameter. I think this is verbose.  ---  **Affects:** 5.0.6  **Reference URL:** https://github.com/MasatoshiTada/spring-mvc-form-sample/blob/master/01-immutable/src/main/java/com/example/immutable/SampleForm.java  **Issue Links:** - #15682 Enable REST controller method parameter annotations on an interface - #21394 No type-based error code used by immutable form class when type conversion error occurs  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/955665b419ec237029abfa0824ca8a47d410a423","closed","type: enhancement,","spring-projects-issues","2018-05-18T11:56:31Z","2019-01-11T17:10:06Z"
"","21728","WebFlux JSON request body garbled under heavy load [SPR-17193]","**[Martin Kutter](https://jira.spring.io/secure/ViewProfile.jspa?name=martinkutter)** opened **[SPR-17193](https://jira.spring.io/browse/SPR-17193?redirect=false)** and commented  Running a load test against a webflux application, I experienced garbled requests under (moderately) heavy load: once in a while (i.e. 1 in 10 to 50.000 requests), the deserialization of the request body into the `@RequestBody` field yields wrong results.  In these bad results, field values are set to another field's value - but truncated to the lenght of the original field.     Example:  Original Request:  ``` {""subject""`:  {""username"":""USERNAME""}  ,""action"":""HTTP:ACTION"",""resource"":""https://resource.url""}   ```  Garbeled Request (example):  ``` {""subject"":  {""username"":""USERNAME""}  ,""action"":""https://res"",""resource"":""https://resource.url""}   ```     The error only appears with authentication (basic auth) enabled.     I've created a test project to reproduce and better describe the error:  https://github.com/mkutter/netty-webflux-load   ---  **Affects:** 5.0.8  **Reference URL:** https://github.com/mkutter/netty-webflux-load","closed","type: enhancement,","spring-projects-issues","2018-08-17T13:28:04Z","2019-04-12T18:38:37Z"
"","21296","Jackson configuration does not work for WebTestClient [SPR-16755]","**[Martin Kalina](https://jira.spring.io/secure/ViewProfile.jspa?name=mkalina)** opened **[SPR-16755](https://jira.spring.io/browse/SPR-16755?redirect=false)** and commented  I have a SpringBoot (2.0.1.RELEASE) reactive web application (see attachment).  I set in application.properties: `spring.jackson.deserialization.USE_BIG_DECIMAL_FOR_FLOATS=true`  I try to deserialize float value into a map It works when application is started and called through external REST client:  `curl --request PATCH \ --url [http://localhost:8080/] \ --header 'content-type: application/json' \ --data '{""x"":1.5}'`  It does not work when WebTestClient is used:  `mvn test -Dtest=WebClientIT`     ---  **Affects:** 5.0.5  **Attachments:** - [test-web-client.tar.gz](https://jira.spring.io/secure/attachment/25688/test-web-client.tar.gz) (_60.08 kB_)","closed","status: invalid,","spring-projects-issues","2018-04-23T06:47:59Z","2019-01-13T20:26:34Z"
"","21853","HTTP 404 for static resources with last modified = 0L (breaks Docker images build with Jib) [SPR-17320]","**[Martin Bonato](https://jira.spring.io/secure/ViewProfile.jspa?name=martin.bonato@prime-sign.com)** opened **[SPR-17320](https://jira.spring.io/browse/SPR-17320?redirect=false)** and commented  The [ResourceHTTPRequestHandler](https://github.com/spring-projects/spring-framework/blob/master/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java) returns HTTP 404 Not Found for static resources that have a file modification date of 0L (i.e. the unix epoch 00:00:00 GMT, January 1, 1970). This breaks resolving static resources in web applications build as Docker images with [Jib](https://github.com/GoogleContainerTools/jib).  One of the goals of Docker images build with Jib are ""reproducible builds"". That is, Docker images build from the same sources should result in the same docker image with the same SHAs for the Docker image and it's layers. To achieve this, Jib sets the modification date of every file it includes to 0 (see [ReproducibleLayerBuilder](https://github.com/GoogleContainerTools/jib/blob/master/jib-core/src/main/java/com/google/cloud/tools/jib/image/ReproducibleLayerBuilder.java#L117)). When the [ResourceHTTPRequestHandler](https://github.com/spring-projects/spring-framework/blob/master/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java) resolves a static resource from the classpath or the filesystem it checks the resource's lastModified date ([ResourceHttpRequestHandler line 467|[https://github.com/spring-projects/spring-framework/blob/7aa933437c874122fef10a3cb8282359312e8d6e/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java#L467]](https://github.com/spring-projects/spring-framework/blob/7aa933437c874122fef10a3cb8282359312e8d6e/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java#L467:). The AbstractResource however, throws a FileNotFoundException when the file last-modified date is 0:     ```java     public long lastModified() throws IOException {         long lastModified = getFileForLastModifiedCheck().lastModified();         if (lastModified == 0L) {             throw new FileNotFoundException(getDescription() +                     "" cannot be resolved in the file system for resolving its last-modified timestamp"");         }         return lastModified;     } ```  In consequence, static resources in the classpath or filesystem in Docker images build with Jib are not resolvable by Spring WebMVCs standard ResourceHttpRequestHandler.  This renders Spring WebApplications build with Jib unusable in most cases.  Resources having a last modified date of 0L should not be treated special by Spring, however ...  Up to Java 6 the contract of [java.io.File.getLastModifed()](https://docs.oracle.com/javase/6/docs/api/java/io/File.html#lastModified()) defined a return value of 0L as being returned _if the file does not exist or if an I/O error occurs_. From Java 7 it also considers 0L as vaild return value in the Javadoc of [getLastModified()](https://docs.oracle.com/javase/7/docs/api/java/io/File.html#lastModified())  _Where it is required to distinguish an I/O exception from the case where `0L` is returned, or where several attributes of the same file are required at the same time, or where the time of last access or the creation time are required, then the [`Files.readAttributes`](https://docs.oracle.com/javase/7/docs/api/java/nio/file/Files.html#readAttributes(java.nio.file.Path,%20java.lang.Class,%20java.nio.file.LinkOption...)) method may be used._  IMHO, Spring should not throw a FileNotFoundException in case getLastModified() returns 0L but should either just return 0L itself or try to read file attributes in such cases.  ---  **Issue Links:** - #17460 Spring's AbstractResource (used in spring-mvc) is unusable in Docker. - #20045 Last modified check of Resource created from Tomcat war:file: URL fails with FileNotFoundException - #20881 PropertySourcesPlaceholderConfigurer can not ignore resource if not found - #21373 java.nio.file.Path support in FileSystemResource (with regular createRelative behavior, superseding PathResource)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b7e4a56e5c2b4773479fc9c7a301f523d314b587, https://github.com/spring-projects/spring-framework/commit/ff0afcff0615d2d1bf88ec579f8964c2b98e63ef, https://github.com/spring-projects/spring-framework/commit/b53995b5d4df43bb4e12bee179bffccfac080487, https://github.com/spring-projects/spring-framework/commit/cf3635b42df3a8a0a14c5f12f2b2846155ce4bb1  **Backported to:** [5.0.10](https://github.com/spring-projects/spring-framework/milestone/191?closed=1), [4.3.20](https://github.com/spring-projects/spring-framework/milestone/169?closed=1)  1 votes, 2 watchers","closed","in: core,","spring-projects-issues","2018-10-01T19:28:15Z","2019-01-11T14:15:55Z"
"","21669","(Fixed) Oauth server works yet in endpoint Principal is null [SPR-17132]","**[Martijn](https://jira.spring.io/secure/ViewProfile.jspa?name=martijn)** opened **[SPR-17132](https://jira.spring.io/browse/SPR-17132?redirect=false)** and commented  I have build a oauth2 server using Spring boot 2.0.8 which uses Spring 5.0.8. The oauth server works and I receive an access token. I can verify that my ResourceServerConfigurerAdapter works because when I access a url with the incorrect access token I get an authentication error so the authentication server + resource server section works.   I want to create an endpoint that other microservices use call to get the current loggedin user. So I created an endpoint like this:  ```java @GetMapping(""/user"")  public Principal user( Principal principal) {   return auth;  } ```  I startup Postman, request a new access token, do a call to /user with the access token supplied as bearer token and start the request. No matter what I do principal is always null. I have even added `@AuthenticationPrincipal` to the Principal principal argument and yet principal is null. I have also tried the following:  ```java SecurityContextHolder.getContext().getAuthentication() ```  This also returns null. How is it possible that Principal and getAuthentication() return null?   ---  **Affects:** 5.0.8","closed","status: invalid,","spring-projects-issues","2018-08-06T20:23:26Z","2019-01-12T05:18:20Z"
"","21239","ClassCastException in MockMvc when testing async calls with Spring Security [SPR-16698]","**[martian](https://jira.spring.io/secure/ViewProfile.jspa?name=martian)** opened **[SPR-16698](https://jira.spring.io/browse/SPR-16698?redirect=false)** and commented  See discussion in _Reference URL_.  ``` java.lang.ClassCastException: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$SecurityContextAsyncContext cannot be cast to org.springframework.mock.web.MockAsyncContext 	at org.springframework.test.web.servlet.TestDispatcherServlet.initAsyncDispatchLatch(TestDispatcherServlet.java:90) 	at org.springframework.test.web.servlet.TestDispatcherServlet.service(TestDispatcherServlet.java:68) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742) 	at org.springframework.mock.web.MockFilterChain$ServletFilterProxy.doFilter(MockFilterChain.java:160) 	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:127) 	at org.springframework.web.filter.ShallowEtagHeaderFilter.doFilterInternal(ShallowEtagHeaderFilter.java:110) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ```  ---  **Affects:** 4.3.15, 5.0.5  **Reference URL:** https://github.com/spring-projects/spring-framework/commit/6e4bbac6f7d54fe8f7c4c0ac6a94e924cb24765e  **Issue Links:** - #21236 ClassCastException in TestDispatcherServlet (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2018-04-06T13:49:14Z","2019-01-12T16:44:37Z"
"","21866","SpringBeanContainer should use returned instance from BeanFactory after initializing [SPR-17332]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-17332](https://jira.spring.io/browse/SPR-17332?redirect=false)** and commented  The `SpringBeanContainer` calls `BeanFactory.initializeBean` this method can however return a proxied/wrapped instance of the original bean. However this proxied instance isn't being used.    ---  **Affects:** 5.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d9e72535328ff56e447a9ec69b95263da8a8495b","closed","type: bug,","spring-projects-issues","2018-10-04T06:53:35Z","2018-10-15T07:48:39Z"
"","21792","STOMP over websockets only considers first value in header [SPR-17259]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-17259](https://jira.spring.io/browse/SPR-17259?redirect=false)** and commented  When connecting with a stomp client the following header is present **`Sec-WebSocket-Protocol: v10.stomp, v11.stomp, v12.stomp`**. However only the first element of the header is taken into account.   Leading to an exception (logged at DEBUG level) in the `StompSubProtocolHandler`. I would expect that all versions would be taken into account and that a suitable one would be selected. However this does not appear to be the case.   Looking at the code of the `StompSubProtocolHandler `makes me believe it was designed to do so. But a change somewhere in the messaging infrastructure (or header parsing) broke this.  Not sure if this relates to earlier versions of Spring WebSocket as well as I encountered this while writing web socket demo for a book.   ---  **Affects:** 5.1 RC3  **Issue Links:** - #21791 StompSubProtocolHandler supports Stomp 1.1 and 1.2 not 1.0","closed","in: web,","spring-projects-issues","2018-09-09T13:46:19Z","2019-01-12T16:44:22Z"
"","21791","StompSubProtocolHandler supports Stomp 1.1 and 1.2 not 1.0 [SPR-17258]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-17258](https://jira.spring.io/browse/SPR-17258?redirect=false)** and commented  According to the javadoc of StompSubProtocolHandler it should support Stomp 1.0, 1.1 and 1.2. However looking at the sources it only supports 1.1 and 1.2.   ---  **Affects:** 5.1 RC3  **Issue Links:** - #21792 STOMP over websockets only considers first value in header  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cf9641686bcd17c3d256405743a61e63a4744c92","closed","type: task,","spring-projects-issues","2018-09-09T13:26:18Z","2019-01-11T14:13:15Z"
"","21708","Polish code for ""unused"" imports [SPR-17172]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-17172](https://jira.spring.io/browse/SPR-17172?redirect=false)** and commented  While polishing some code I also noticed some imports that aren't actually used in the code but rather are referenced in the javadoc.   ```java /**  * Synchronize the invocation of the underlying method if several threads are  * attempting to load a value for the same key. The synchronization leads to  * a couple of limitations:  *   * {@link #unless()} is not supported  * Only one cache may be specified  * No other cache-related operation can be combined  *   * This is effectively a hint and the actual cache provider that you are  * using may not support it in a synchronized fashion. Check your provider  * documentation for more details on the actual semantics.  * @since 4.3  * @see org.springframework.cache.Cache#get(Object, Callable)  */  ```  Here `Callable` is only referenced in the javadoc but not used throughout the class (`@Cacheable` in this case).   What to do with those imports? Should those be left, or use the FQCN in the javadoc to cleanup the import?  ---  **Affects:** 5.1 RC1","closed","status: declined,","spring-projects-issues","2018-08-13T09:04:56Z","2019-01-13T04:29:56Z"
"","21696","Support dependency injection in JPA AttributeConverter for EclipseLink [SPR-17159]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-17159](https://jira.spring.io/browse/SPR-17159?redirect=false)** and commented  With JPA 2.2 it is finally possible to do injection into AttributeConverters. The standard describes that when using CDI that injection. It would be nice if when using Spring injection would be supported as well.   JPA 2.1 introduced injecting in EntityListeners with CDI would be nice if injection would work for that as well.   Added bonus would be if this would work with both JPA and plain Hibernate.   ---  **Affects:** 5.1 RC1  **Reference URL:** https://github.com/javaee/jpa-spec/issues/109  **Issue Links:** - #20852 Support Hibernate 5.3's ManagedBeanRegistry for dependency injection","open","type: enhancement,","spring-projects-issues","2018-08-10T08:27:34Z","2021-04-25T19:47:36Z"
"","21627","Improve/unify debug logging at BeanDefinitionReader and BeanFactory level [SPR-17090]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-17090](https://jira.spring.io/browse/SPR-17090?redirect=false)** and commented  There are several implementations of the `BeanDefinitionReader` interface (as well as the `ConfigurationClassBeanDefinitionReader`. Each of them has some sort of DEBUG/TRACE logging however each does log different things.   Some do log the resource read (properties based), others don't. Others do log the number of bean definitions read (groovy) others don't. Would be nice if the messages from the different implementations would be unified somehow. Like at least that each reader shows the resource being read and number of beans for instance and also on a consistent level.      This relates to the more general ticket #21485 regarding improving logging.   ---  **Affects:** 4.3.18, 5.0.7  **Issue Links:** - #21485 Improve logging for development (DEBUG vs TRACE)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f13f041fae58cbb8bd45a7321d4d88e4e91be93e, https://github.com/spring-projects/spring-framework/commit/c037e75f26ac5ef69e4d5fc3045e101ca674dcaf","closed","type: enhancement,","spring-projects-issues","2018-07-26T06:05:33Z","2019-01-11T12:45:54Z"
"","21496","Provide Gson/JSON-B MessageConverter for spring-messaging (aligned with spring-web)","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-16958](https://jira.spring.io/browse/SPR-16958?redirect=false)** and commented  When using messaging there are `MessageConverter` implementations using Jackson to marshall message from/to JSON. However there doesn't seem to be one for GSON whereas there is GSON support in the web area.   Now when using both messaging and web and when using GSON and want to use JSON for marshaling you need both providers on the class path. It would be nice if we could use GSON in the messaging area as well.    ---  **Affects:** 5.0.7  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1863","closed","type: enhancement,","spring-projects-issues","2018-06-20T07:04:00Z","2020-09-25T08:53:59Z"
"","21455","Use non-deprecated interfaces in HibernateJpaVendorAdapter [SPR-16916]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-16916](https://jira.spring.io/browse/SPR-16916?redirect=false)** and commented  The `HibernateJpaVendorAdapter` pre-defines the values for the `entityManagerInterface` and `entityManagerFactoryInterface`.  The current values reference deprecated interfaces (on Hibernate 5.2) and the Hibernate team suggests to use `SessionFactory` and `Session` instead as those now extend `EntityManagerFactory` and `EntityManager`.  Current values  ``` this.entityManagerFactoryInterface = org.hibernate.jpa.HibernateEntityManagerFactory.class; this.entityManagerInterface = org.hibernate.jpa.HibernateEntityManager.class; ```  Suggested values  ``` this.entityManagerFactoryInterface = org.hibernate.SessionFactory.class; this.entityManagerInterface = org.hibernate.Session.class; ```    ---  **Affects:** 5.0.6","closed","type: enhancement,","spring-projects-issues","2018-06-07T09:52:27Z","2020-08-24T17:27:28Z"
"","21454","Session from SessionFactory.getCurrentSession not synchronized with current JPA transaction on Hibernate 5.2 [SPR-16915]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-16915](https://jira.spring.io/browse/SPR-16915?redirect=false)** and commented  When using Hibernate 5.2 and using an unwrapped (or cast) `SessionFactory` to get the current session using `getCurrentSession` this doesn't get synchronized with the current transaction.   This is mainly due to the change in Hibernate 5.2 that `Session` now extends `EntityManager` which will create an unsynchronized `EntityManager` leading to an exception when the transaction will commit.   This all happens in the `invokeProxyMethod` in the `AbstractEntityManagerFactoryBean`. I guess that method should also treat the `getCurrentSession` method like it does the `createEntityManager` method with `SynchronizationType.SYNCHRONIZED` is used.   **NOTE:** This only happens with Hibernate 5.2 (or up) with lower versions there (probably) isn't an issue as there `Session` doesn't extend `EntityManager`.  ---  **Affects:** 4.3.17, 5.0.6  **Issue Links:** - #21540 LocalSessionFactoryBean and HibernateTransactionManager for JPA EntityManagerFactory setup","closed","type: enhancement,","spring-projects-issues","2018-06-07T09:44:42Z","2019-01-13T20:25:54Z"
"","21429","Move KeyStoreFactoryBean, KeyManagersFactoryBean and TrustManagersFactoryBean to Spring [SPR-16890]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-16890](https://jira.spring.io/browse/SPR-16890?redirect=false)** and commented  Spring WebServices provides the convenient `KeyStoreFactoryBean`, `KeyManagersFactoryBean` and `TrustManagersFactoryBean` which makes configuring things like a `KeyStore` and related objects easier.   As a lot of sites are now using SSL and other components require sometimes a `KeyStore`. It would be nice if we could use these `FactoryBean` implementations to configure such and without requiring to have Spring WS on the classpath.    ---  **Affects:** 4.3.17, 5.0.6","open","type: enhancement,","spring-projects-issues","2018-06-01T06:55:41Z","2018-06-02T17:36:48Z"
"","21313","NPE in SimpleClient-HttpURLConnection with errorstream-buffering [SPR-16773]","**[Markus](https://jira.spring.io/secure/ViewProfile.jspa?name=kull)** opened **[SPR-16773](https://jira.spring.io/browse/SPR-16773?redirect=false)** and commented  For an Jersey-Client we enabled [errorstream-buffering](https://docs.oracle.com/javase/8/docs/technotes/guides/net/http-keepalive.html#WhatsnewInJDK5) in HttpUrlConnection. Due to global properties this also affected Spring-SimpleClientHttpRequestFactory and subsequently caused NullPointerException for httpstatus-errors. Seems to happen everytime for 4XX or 5XX with non-empty body.  It seems that Java8-HttpUrlConnection doesnt expect when buffered errorstream is attempted to drain after already closed. The drain-after-close occurs because DefaultResponseErrorHandler reads and closes the response-inputstream, and a later finally-block in RestTemplate#doExecute drains+closes again.     ``` java.lang.NullPointerException  at sun.net.www.protocol.http.HttpURLConnection$ErrorStream.read(HttpURLConnection.java:3690)  at sun.net.www.protocol.http.HttpURLConnection$ErrorStream.read(HttpURLConnection.java:3685)  at org.springframework.util.StreamUtils.drain(StreamUtils.java:201)  at org.springframework.http.client.SimpleClientHttpResponse.close(SimpleClientHttpResponse.java:103)  at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:747)  at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:686)   ```     I will put up a MergeRequest shortly  ---  **Affects:** 4.3.16, 5.0.5  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/1810  **Issue Links:** - #18612 HTTP persistent connections for HTTP Invoker and RestTemplate  **Backported to:** [4.3.17](https://github.com/spring-projects/spring-framework/milestone/166?closed=1)","closed","type: bug,","spring-projects-issues","2018-04-26T11:05:51Z","2019-01-11T16:41:14Z"
"","21702","@Scheduled task runs twice on bean with target-class scoped proxy (when injected) [SPR-17166]","**[Markus Malkusch](https://jira.spring.io/secure/ViewProfile.jspa?name=malkusch)** opened **[SPR-17166](https://jira.spring.io/browse/SPR-17166?redirect=false)** and commented  When a proxied bean has a `@Scheduled` annotation, that task is executed twice as if there would be two beans. As a user I would expect that a proxied bean still behaves and acts as there would be only one bean. I would expect the task to be executed only once.  If you run the [example](https://github.com/spring-projects/spring-framework-issues/pull/182), you notice two outputs every second, while I would expect only one output per second.  ---  **Affects:** 4.3.18, 5.0.8  **Reference URL:** https://github.com/spring-projects/spring-framework-issues/pull/182  **Issue Links:** - #21472 Avoid unnecessary synthesizable annotation processing  **Backported to:** [4.3.19](https://github.com/spring-projects/spring-framework/milestone/168?closed=1)","closed","in: core,","spring-projects-issues","2018-08-11T14:50:07Z","2019-01-11T13:59:55Z"
"","21440","Inconsistent handling of dependent lifecycle beans in DefaultLifecycleProcessor [SPR-16901]","**[Markus Heiden](https://jira.spring.io/secure/ViewProfile.jspa?name=markus_heiden)** opened **[SPR-16901](https://jira.spring.io/browse/SPR-16901?redirect=false)** and commented  DefaultLifecycleProcessor.LifecycleGroup#stop() fails to wait for all members, if there are dependencies between the members.  IMO the problem lies in this loop of LifecycleGroup#stop():  ```java for (LifecycleGroupMember member : this.members) {   if (this.lifecycleBeans.containsKey(member.name)) {     doStop(this.lifecycleBeans, member.name, latch, countDownBeanNames);   }   else if (member.bean instanceof SmartLifecycle) {     // already removed, must have been a dependent     latch.countDown();   } } ```  The loop iterates **all** members. doStop() removes the current member **and** its dependent members from this.lifecycleBeans and passes a callback to **all** of them which counts the latch down. This way the latch gets counted down for the current member **and** its dependent members.  Later on when the iteration reaches one of the dependent members from above, the else block gets executed, because the dependent member has already been removed from this.lifecycleBeans. This counts the latch down again for the dependent member.  This way the latch reaches 0 before all beans called their stop callback and the application context gets destroyed even though some of the members are still running.  I don't understand why the else block is needed at all. IMO it should be simply removed.  ---  **Affects:** 5.0.6  **Issue Links:** - #11020 ApplicationContext very slow to shutdown with bean of type org.springframework.scheduling.quartz.SchedulerFactoryBean - [INT-4486](https://jira.spring.io/browse/INT-4486) The SmartLifecycle.stop(Runnable callback) implementation must always call callback, in the end  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6f41d4ec4d2accfb93ccd01729fd9ca083d962fb, https://github.com/spring-projects/spring-framework/commit/b3ca2d50a28b540b429c2f5a3936a3eaefe60a4f, https://github.com/spring-projects/spring-framework/commit/b71795ba3655cb8a640870ae44883b7a53145ba5, https://github.com/spring-projects/spring-framework/commit/6cf197864c0f967f0c3eb98e5a1a0faecdb717af  0 votes, 5 watchers","closed","in: core,","spring-projects-issues","2018-06-04T22:17:09Z","2019-01-11T15:42:20Z"
"","21831","Support for non-blocking event listener methods [SPR-17298]","**[Mark Paluch](https://jira.spring.io/secure/ViewProfile.jspa?name=mp911de)** opened **[SPR-17298](https://jira.spring.io/browse/SPR-17298?redirect=false)** and commented  In a non-blocking application flow, it's desirable to prevent event listeners from blocking and yet have a notion of managed event completion (i.e. an event listener needs to interact with a remote system but must not block). Event listener methods could return future/async types so the event multicaster can synchronize on execution/initiate execution to use non-blocking event listeners in a reactive (or at least non-blocking) arrangement.  Event listener methods could either return: * A future (in particular `ListenableFuture`, `CompletableFuture`, or `CompletionStage`, either `Void`, `T`, or `Collection` component types) * A `Publisher` (or any other supported reactive type such as RxJava 2's `Observable` with `Void` or `T` component types).  Example:  ```java @Component public class MyListener {        @EventListener     public Mono handleContextRefresh(ContextRefreshedEvent event) {         ...     }      @EventListener     public Flux handleBusinessEvent(MyBusinessEvent event) {         ...     }      @EventListener     public CompletableFuture handleBusinessEvent(MyOtherBusinessEvent event) {         ...     } } ```    This feature could allow to implement functionality in event listeners in an non-blocking programming model to prevent blocking calls.  Result handles should be used to attach at least some sort of exception handling to prevent exceptions from going unnoticed. For reactive types, the multicaster subscribes to the reactive type to materialize the outcome.  Values emitted from a result handle (i.e. non-void returns like `CompletableFuture`, `Publisher`) could be emitted again as events.  This ticket seems to relate to #21025.  ---  **Issue Links:** - #21025 Use of ApplicationEventPublisher in a reactive call stack  1 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2018-09-23T17:40:39Z","2019-07-05T14:28:20Z"
"","21456","Return bean names of typed FactoryBeans using BeanFactoryUtils.beanNamesForTypeIncludingAncestors(…) if allowEagerInit is false [SPR-16917]","**[Mark Paluch](https://jira.spring.io/secure/ViewProfile.jspa?name=mp911de)** opened **[SPR-16917](https://jira.spring.io/browse/SPR-16917?redirect=false)** and commented  Currently, `BeanFactoryUtils.beanNamesForTypeIncludingAncestors(…)` does not return bean names for `FactoryBean` s that are properly typed with generics if `allowEagerInit` is set to `false`. It would be helpful, when properly typed (non-`Object` generics) `FactoryBean` s would be parsed for their type. See a reproducer below.  This ticket originates in [DATACASS-564](https://jira.spring.io/browse/DATACASS-564) where `allowEagerInit` is set to `true` and context reload fails due to a non-resolved property placeholder in the bean class name.  Beans:  ```java public class BeanRegisterPostProcessorLookupTest {  	@Test 	public void test() {  		GenericXmlApplicationContext context = new GenericXmlApplicationContext(); 		context.load(BeanRegisterPostProcessorLookupTest.class, ""BeanRegisterPostProcessorLookupTest.xml""); 		context.refresh(); 	}  	interface MySession {  	}  	private static class MySessionFactory extends AbstractFactoryBean {  		@Override 		public Class getObjectType() { 			return MySession.class; 		}  		@Override 		protected MySession createInstance() { 			return mock(MySession.class); 		} 	}  	private static class MyBeanFactoryPostProcessor implements BeanFactoryPostProcessor {  		@Override 		public void postProcessBeanFactory(ConfigurableListableBeanFactory factory) throws BeansException {  			String[] names = BeanFactoryUtils.beanNamesForTypeIncludingAncestors(factory, MySession.class, true, false);  			assertThat(names, arrayWithSize(2)); 		} 	} } ```  XML declaration:  ```xml   	 	  	   ```    ---  **Issue Links:** - [DATACASS-564](https://jira.spring.io/browse/DATACASS-564) Placeholders not replaced in bean definition during postprocessing","open","in: core,","spring-projects-issues","2018-06-07T12:17:18Z","2019-01-11T15:41:42Z"
"","21337","Allow creation of immutable collections through CollectionFactory [SPR-16797]","**[Mark Paluch](https://jira.spring.io/secure/ViewProfile.jspa?name=mp911de)** opened **[SPR-16797](https://jira.spring.io/browse/SPR-16797?redirect=false)** and commented  Modelling application classes as immutable objects is a widely used pattern in Java and Kotlin which constantly gains adoption. We should allow creation of immutable collection types (`Map`, `List`, `Set`) through `CollectionFactory` or an adequate API that allows specification of the target type and the elements the result should contain.  It would be great to support: * Java 9 immutable collections * Google Guava collections * Vavr Collections (previously JavaSlang)      ---  **Issue Links:** - [DATACMNS-1381](https://jira.spring.io/browse/DATACMNS-1381) Support for immutable collection types  2 votes, 7 watchers","open","type: enhancement,","spring-projects-issues","2018-05-07T07:41:25Z","2018-06-05T16:09:20Z"
"","21578","Support for the ""type"" parameter for Atom Feed/Entry message conversion [SPR-17040]","**[Mark Hobson](https://jira.spring.io/secure/ViewProfile.jspa?name=markhobson)** opened **[SPR-17040](https://jira.spring.io/browse/SPR-17040?redirect=false)** and commented  `AtomFeedHttpMessageConverter` and `RssChannelHttpMessageConverter` currently discard any media type parameters that are supplied to `write()`. They are overwritten when adding the charset parameter.  ---  **Affects:** 4.3.18, 5.0.7  **Issue Links:** - #21670 Use parameters declared in consumes or produces condition to narrow the request mapping  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1885","closed","status: superseded,","spring-projects-issues","2018-07-14T12:03:49Z","2019-11-14T13:48:14Z"
"","21486","AbstractJackson2HttpMessageConverter incorrectly logs at WARN level after upgrading to Jackson 2.9 [SPR-16947]","**[Mark Chesney](https://jira.spring.io/secure/ViewProfile.jspa?name=mches)** opened **[SPR-16947](https://jira.spring.io/browse/SPR-16947?redirect=false)** and commented  The verbiage of exception messages changed from ""Can not find"" to ""Cannot find"" in Jackson 2.9 with PR [#1682](https://github.com/FasterXML/jackson-databind/pull/1682)  e.g.  `WARN o.s.h.c.j.MappingJackson2HttpMessageConverter : Failed to evaluate Jackson deserialization for type [[collection type; class com.google.common.collect.ImmutableList...`  ---  **Affects:** 4.3.18, 5.0.7  **Issue Links:** - #18735 MappingJackson2HttpMessageConverter should not always log a warning  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1859  **Backported to:** [4.3.19](https://github.com/spring-projects/spring-framework/milestone/168?closed=1)","closed","type: bug,","spring-projects-issues","2018-06-17T01:01:29Z","2019-01-11T15:41:08Z"
"","21681","ContextPathCompositeHandler returns 200 when no path found [SPR-17144]","**[Marius Rubin](https://jira.spring.io/secure/ViewProfile.jspa?name=maubergine)** opened **[SPR-17144](https://jira.spring.io/browse/SPR-17144?redirect=false)** and commented  In scenarios where a call to a WebFlux application using ContextPathCompositeHandler do not match against a context path then the response can still be status code 200, rather than 404.  It looks like this is because the ContextPathCompositeHandler calls response.setComplete() but returns Mono.empty() when no handlers for a given path have been found.  This results in the callback chain for response.setComplete(), including the commit, and applyStatusCode() invocation to be discarded.  As a result, while the response status has been set to 404, this is not what gets written to outbound buffer.  This project: https://github.com/maubergine/cpch-bug-example illustrates the issue and the effect of updating the code (PR to be raised shortly).   ---  **Affects:** 5.0.8, 5.1 RC1  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1921","closed","type: bug,","spring-projects-issues","2018-08-08T10:23:48Z","2018-08-17T09:42:43Z"
"","21237","Message converter fails to find named part in multipart request [SPR-16696]","**[Marek Slama](https://jira.spring.io/secure/ViewProfile.jspa?name=mslama)** opened **[SPR-16696](https://jira.spring.io/browse/SPR-16696?redirect=false)** and commented  When I send multipart request to server using RestTemplate and ByteArrayResource server returns error that it cannot find named part in request: ""Required request part 'metadata' is not present.""  I compared requests from Java and Postman and I see that Content-Disposition from Java does not contain filename. Java client (fails): Content-Disposition: form-data; name=""metadata"" Postman (passes): Content-Disposition: form-data; name=""metadata""; filename=""metadata.bin""  When I override method getFilename on ByteArrayResource and return some non null value it fixes issue. But I think message converter on server side should handle even case when name=""metadata"" is last item in Content-Disposition.  I could not test with latest Spring release as we have older JBoss and it does not accept metadata-complete attribute in web.xml. Request contains 4 parts, not found part is first.   ---  **Affects:** 4.3.15","closed","status: declined,","spring-projects-issues","2018-04-06T11:39:59Z","2019-01-12T16:21:30Z"
"","21798","Execute Incoming Messages in the Same Thread per Websocket Session Id [SPR-17265]","**[Marcus Held](https://jira.spring.io/secure/ViewProfile.jspa?name=plumpy)** opened **[SPR-17265](https://jira.spring.io/browse/SPR-17265?redirect=false)** and commented  In my project I have the case that a client can potentially send a lot of messages simultaneously (which we prefer to avoid, but still can happen. Esp. with hacked clients). This leads to many different threads to modify the state of the same entity which then cause optimistic locking exceptions.  To avoid this I'd like to process all messages of the same client in the same thread. This behavior could be achieved by configuring a `ThreadPoolTaskExecutor` that distributes the messages accordingly. This strategy was suggested in this [stackoverflow question](https://stackoverflow.com/a/47465794/9857590).   ---  1 votes, 2 watchers","open","in: web,","spring-projects-issues","2018-09-10T11:59:57Z","2019-01-11T14:12:50Z"
"","21644","Send Subscription Information in SessionUnsubscribeEvent [SPR-17107]","**[Marcus Held](https://jira.spring.io/secure/ViewProfile.jspa?name=plumpy)** opened **[SPR-17107](https://jira.spring.io/browse/SPR-17107?redirect=false)** and commented  I'd like to have more information of the subscription in the SessionUnsubscribeEvent to react on specific subscriptions.  Currently I can only investigate the Unsubscribe Message in the SessionUnsubscribeEvent and in there I can see the subscribe id. But with this subscribe id I might can not work at this point in time because the corresponding subscription might not be in the user registry anymore at this point. Therefore I'd like to have the information of the subscription in the SessionUnsubscribeEvent itself (in particular, I'm interested in the subscribe destination)   --- No further details from [SPR-17107](https://jira.spring.io/browse/SPR-17107?redirect=false)","closed","type: enhancement,","spring-projects-issues","2018-07-31T14:45:17Z","2018-08-02T09:58:44Z"
"","21643","Preserve-publish-order is mentioned in documentation of 5.0.x [SPR-17106]","**[Marcus Held](https://jira.spring.io/secure/ViewProfile.jspa?name=plumpy)** opened **[SPR-17106](https://jira.spring.io/browse/SPR-17106?redirect=false)** and commented  The preserver-publish-order configuration is mentioned in the documentation of 5.0.x but it got only implemented for 5.1.x  Compare [this documentation](https://docs.spring.io/spring/docs/5.0.x/spring-framework-reference/web.html#websocket-stomp-handle-broker-relay) with [the code](https://github.com/spring-projects/spring-framework/blob/v5.0.8.RELEASE/spring-messaging/src/main/java/org/springframework/messaging/simp/config/MessageBrokerRegistry.java)  ---  **Affects:** 5.0.8  **Issue Links:** - #18562 Preserve order of broker messages","closed","in: web,","spring-projects-issues","2018-07-30T13:26:42Z","2019-01-11T12:50:50Z"
"","21488","Update docs on working with STOMP subscriptions [SPR-16950]","**[Marcus Held](https://jira.spring.io/secure/ViewProfile.jspa?name=plumpy)** opened **[SPR-16950](https://jira.spring.io/browse/SPR-16950?redirect=false)** and commented  While performance testing my application I figured out that I can only handle a handful of users when using Spring Websocket with RabbitMQ as a message broker. As soon as I replace the the message broker with the simple message broker I don't have anymore issues.  I was able to reproduce the behavior in a sample project, which you can find on github: [https://github.com/mld-ger/spring-websocket-performance-issue/tree/master](https://github.com/mld-ger/spring-websocket-performance-issue/tree/master). In the repository is a second branch  called `simple-broker` where the issue does not occur ( [see the diff here](https://github.com/mld-ger/spring-websocket-performance-issue/compare/simple-broker) ). All instructions how to setup the project should be in the readme of the linked project.  Also, this issue is connected to this stackoverflow question which I opened last week: https://stackoverflow.com/questions/50833472/performance-issue-with-spring-websocket-rabbitmq-and-stomp/   ---  **Affects:** 5.0.7  **Attachments:** - [flight_recording_websocket_bug.jfr](https://jira.spring.io/secure/attachment/25753/flight_recording_websocket_bug.jfr) (_5.18 MB_) - [recoring_with_broadcast.jfr](https://jira.spring.io/secure/attachment/25757/recoring_with_broadcast.jfr) (_4.68 MB_) - [response_times_with_broadcast.png](https://jira.spring.io/secure/attachment/25755/response_times_with_broadcast.png) (_30.62 kB_) - [Screen Shot 2018-06-25 at 10.33.39.png](https://jira.spring.io/secure/attachment/25751/Screen+Shot+2018-06-25+at+10.33.39.png) (_41.19 kB_) - [Screen Shot 2018-06-25 at 10.33.47.png](https://jira.spring.io/secure/attachment/25752/Screen+Shot+2018-06-25+at+10.33.47.png) (_37.50 kB_) - [threads_with_broadcast.png](https://jira.spring.io/secure/attachment/25756/threads_with_broadcast.png) (_33.77 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9b3d80c5e43d4960464dbe54c800e99ed6b36acb, https://github.com/spring-projects/spring-framework/commit/2fdb8c9c8c0025c533d99e3a8c793af5cae404ac  0 votes, 5 watchers","closed","type: task,","spring-projects-issues","2018-06-18T12:33:17Z","2018-07-26T08:09:35Z"
"","21419","Stored procedures are resolved against the public PostgreSQL schema [SPR-16880]","**[Marco R.](https://jira.spring.io/secure/ViewProfile.jspa?name=watery)** opened **[SPR-16880](https://jira.spring.io/browse/SPR-16880?redirect=false)** and commented  I'm connecting a Spring Integration 5.0.5 web application to a PostgreSql 10 instance using an Apache Commons DBCP2 `BasicDataSource` bean, but the framework isn't finding my stored procedures because it tries to resolve their names against the _public_ schema, instead of the right one.  I'm not sure where the problem is located, I tried to follow the code within the debugger, but didn't came very far.  Given the following PostgreSQL server:  ```java  | `-- databases     |     `-- ""postgres""         |         `-- schemas             |             `-- ""information_schema""             `-- ""pg_catalog""             `-- ""public""             `-- ""target"" * ```  _*: This is the schema backing the application._  Is the following Spring configuration complete to support my scenario or am I missing something?  ```java                                   ```  If everything is fine here, then I've seen that in `GenericCallMetaDataProvider#processProcedureColumns()` both `catalogName` and `schemaName` are null.  The only way I found to have the correct values there is by editing `CallMetaDataProviderFactory#createMetaDataProvider()` like this:  ```java else if (""PostgreSQL"".equals(databaseProductName)) { 					provider = new PostgresCallMetaDataProvider((databaseMetaData)); 					context.setSchemaName(""target""); 					context.setCatalogName(""postgres""); 				} ```  Of course that's not the right place / way to set those values, it just made my application work.   --- No further details from [SPR-16880](https://jira.spring.io/browse/SPR-16880?redirect=false)","closed","status: invalid,","spring-projects-issues","2018-05-29T11:19:53Z","2019-01-12T05:18:46Z"
"","21559","Lazily retrieve delegate beans in AsyncConfigurer and CachingConfigurer [SPR-17021]","**[Marcin Grzejszczak](https://jira.spring.io/secure/ViewProfile.jspa?name=marcin.grzejszczak)** opened **[SPR-17021](https://jira.spring.io/browse/SPR-17021?redirect=false)** and commented  Having such code  ```java @Configuration @EnableAsync public class FrontendAsyncConfigurerSupport extends AsyncConfigurerSupport {      @Autowired BeanFactory beanFactory;      @Override     public Executor getAsyncExecutor() {         return beanFactory.getBean(ThreadPoolTaskExecutor.class);     }      @Override public AsyncUncaughtExceptionHandler getAsyncUncaughtExceptionHandler() {         return null;     }          @Bean     ThreadPoolTaskExecutor myTaskExecutor() {         ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();         executor.setCorePoolSize(10);         executor.setMaxPoolSize(10);         executor.setQueueCapacity(500);         executor.setThreadNamePrefix(""AsyncExecutor-"");         executor.initialize();         return executor;     } }  ```  The `myTaskExecutor` is not applicable to get wrapped via proxy. In Spring Cloud Sleuth we're doing our best so that all instrumentation gets done automatically, behind the scenes. In this case a user has to manually call Sleuth internals to wrap the `ThreadPoolTaskExecutor` in a tracing representation.  ---  **Affects:** 5.0.7  **Reference URL:** https://github.com/spring-cloud/spring-cloud-sleuth/issues/1022  **Issue Links:** - #21484 Doc: AsyncConfigurer causes dependencies to be created early  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f6fdffd6634369d30f59ade1adc39d778d1d7e42","closed","in: core,","spring-projects-issues","2018-07-09T11:40:14Z","2019-01-11T12:49:25Z"
"","21180","Race-Condition in Multipart upload proxy scenario [SPR-16639]","**[Marc-Christian Schulze](https://jira.spring.io/secure/ViewProfile.jspa?name=marc-christian.schulze)** opened **[SPR-16639](https://jira.spring.io/browse/SPR-16639?redirect=false)** and commented  I'm facing exceptions in my WebFlux Spring Boot application that are all related to the handling of multipart web requests. Once these requests hit the threshold and need to be stored temporarly in the filesystem sporadic race conditions occur.  My Dependencies: * Spring Boot 2.0.0.RC1 * Spring 5.0.4.RELEASE * reactor-netty 0.7.5.RELEASE * reactor-core 3.1.5.RELEASE * reactor-spring 1.0.1.RELEASE  Typically it fails with the reason that it was unable to create the directory `/tmp/nio-stream-storage` but if I look into the `/tmp` directory I can see that it was not present before and has been created. If I run the application again it fails sporadically while looking up the temporary files inside of the folder `/tmp/nio-stream-storage`:  ``` java.lang.IllegalStateException: Unable to create the inputStream. 	at org.synchronoss.cloud.nio.stream.storage.FileStreamStorage.newFileInputStream(FileStreamStorage.java:324) 	at org.synchronoss.cloud.nio.stream.storage.FileStreamStorage.getInputStream(FileStreamStorage.java:245) 	at org.springframework.core.io.buffer.DataBufferUtils.lambda$readInputStream$1(DataBufferUtils.java:97) 	at reactor.core.publisher.FluxUsing.subscribe(FluxUsing.java:75) 	at reactor.core.publisher.FluxPeekFuseable.subscribe(FluxPeekFuseable.java:86) 	at reactor.core.publisher.Flux.subscribe(Flux.java:6873) 	at reactor.core.publisher.FluxConcatArray$ConcatArraySubscriber.onComplete(FluxConcatArray.java:200) 	at reactor.core.publisher.FluxConcatArray.subscribe(FluxConcatArray.java:80) 	at reactor.core.publisher.FluxDefer.subscribe(FluxDefer.java:54) 	at reactor.core.publisher.Flux.subscribe(Flux.java:6873) 	at reactor.core.publisher.FluxConcatArray$ConcatArraySubscriber.onComplete(FluxConcatArray.java:200) 	at reactor.core.publisher.FluxConcatArray.subscribe(FluxConcatArray.java:80) 	at reactor.core.publisher.Flux.subscribe(Flux.java:6873) 	at reactor.core.publisher.FluxConcatArray$ConcatArraySubscriber.onComplete(FluxConcatArray.java:200) 	at reactor.core.publisher.FluxConcatArray.subscribe(FluxConcatArray.java:80) 	at reactor.core.publisher.Flux.subscribe(Flux.java:6873) 	at reactor.core.publisher.FluxConcatIterable$ConcatIterableSubscriber.onComplete(FluxConcatIterable.java:141) 	at reactor.core.publisher.FluxConcatIterable.subscribe(FluxConcatIterable.java:60) 	at reactor.core.publisher.Flux.subscribe(Flux.java:6873) 	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:418) 	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:210) 	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:128) 	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:61) 	at reactor.core.publisher.FluxConcatMap.subscribe(FluxConcatMap.java:121) 	at reactor.core.publisher.Flux.subscribe(Flux.java:6873) 	at reactor.core.publisher.FluxConcatArray$ConcatArraySubscriber.onComplete(FluxConcatArray.java:200) 	at reactor.core.publisher.FluxConcatArray.subscribe(FluxConcatArray.java:80) 	at reactor.core.publisher.FluxMap.subscribe(FluxMap.java:59) 	at reactor.core.publisher.FluxContextStart.subscribe(FluxContextStart.java:49) 	at reactor.core.publisher.Flux.subscribe(Flux.java:6873) 	at reactor.ipc.netty.channel.ChannelOperationsHandler.drain(ChannelOperationsHandler.java:461) 	at reactor.ipc.netty.channel.ChannelOperationsHandler.flush(ChannelOperationsHandler.java:191) 	at io.netty.channel.AbstractChannelHandlerContext.invokeFlush0(AbstractChannelHandlerContext.java:776) 	at io.netty.channel.AbstractChannelHandlerContext.invokeWriteAndFlush(AbstractChannelHandlerContext.java:802) 	at io.netty.channel.AbstractChannelHandlerContext.write(AbstractChannelHandlerContext.java:814) 	at io.netty.channel.AbstractChannelHandlerContext.writeAndFlush(AbstractChannelHandlerContext.java:794) 	at io.netty.channel.AbstractChannelHandlerContext.writeAndFlush(AbstractChannelHandlerContext.java:831) 	at io.netty.channel.DefaultChannelPipeline.writeAndFlush(DefaultChannelPipeline.java:1049) 	at io.netty.channel.AbstractChannel.writeAndFlush(AbstractChannel.java:300) 	at reactor.ipc.netty.NettyOutbound.lambda$sendObject$6(NettyOutbound.java:298) 	at reactor.ipc.netty.FutureMono$DeferredFutureMono.subscribe(FutureMono.java:134) 	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:148) 	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56) 	at reactor.core.publisher.Mono.subscribe(Mono.java:3080) 	at reactor.core.publisher.FluxConcatIterable$ConcatIterableSubscriber.onComplete(FluxConcatIterable.java:141) 	at reactor.core.publisher.FluxConcatIterable.subscribe(FluxConcatIterable.java:60) 	at reactor.core.publisher.MonoSourceFlux.subscribe(MonoSourceFlux.java:47) 	at reactor.core.publisher.Mono.subscribe(Mono.java:3080) 	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:172) 	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:53) 	at reactor.ipc.netty.channel.ChannelOperations.applyHandler(ChannelOperations.java:380) 	at reactor.ipc.netty.http.client.HttpClientOperations.onHandlerStart(HttpClientOperations.java:501) 	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163) 	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:403) 	at io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:304) 	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:858) 	at java.lang.Thread.run(Thread.java:748) Caused by: java.io.FileNotFoundException: /tmp/nio-stream-storage/nio-body-1-85f003fe-a58a-4b79-8563-e4b3e6054a40.tmp (No such file or directory) 	at java.io.FileInputStream.open0(Native Method) 	at java.io.FileInputStream.open(FileInputStream.java:195) 	at java.io.FileInputStream.(FileInputStream.java:138) 	at org.synchronoss.cloud.nio.stream.storage.NameAwarePurgableFileInputStream.(NameAwarePurgableFileInputStream.java:49) 	at org.synchronoss.cloud.nio.stream.storage.FileStreamStorage.newFileInputStream(FileStreamStorage.java:322) 	... 56 common frames omitted ```  This smells like a race condition in the handling of this temporary directory and files contained in.  BTW, Is it actually intended that WebFlux writes uploaded multipart files to disk? I thought the actual intention of being reactive is to leverage backpressure propagation.  Unfortunately, I can't provide a reproducible example. However, reducing my code to a skeleton it would look like (basically a multi-file upload proxy):  ``` @ResponseBody @RequestMapping(path = ""/somePath"", method = RequestMethod.POST, consumes = MediaType.MULTIPART_FORM_DATA_VALUE) public Flux entrypoint( @RequestBody Flux parts ) {   return parts.filter(part -> FilePart.class.isInstance(part))     .cast(FilePart.class)     .flatMap(part -> {       MultipartBodyBuilder builder = new MultipartBodyBuilder();       builder.asyncPart(""file"", part.content(), DataBuffer.class).headers(h -> {         h.setContentDispositionFormData(""file"", part.filename());         h.setContentType(MediaType.APPLICATION_OCTET_STREAM);       });        return client          .post()          .uri(""http://somewhere/path"")          .contentType(MediaType.MULTIPART_FORM_DATA)          .syncBody(builder.build())          .retrieve()          .bodyToMono(SomeElement.class);     }); } ```  ---  **Affects:** 5.0.4  **Issue Links:** - #21659 Make WebFlux multipart support fully Reactive - #21268 SynchronossPartGenerator should reuse PartBodyStreamStorageFactory  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a989ea0867f36ddf1f0e58b71aade8a2500ffe7d","closed","in: core,","spring-projects-issues","2018-03-23T20:09:47Z","2019-12-05T11:34:20Z"
"","21142","CodecException: No suitable writer found for part [SPR-16601]","**[Marc-Christian Schulze](https://jira.spring.io/secure/ViewProfile.jspa?name=marc-christian.schulze)** opened **[SPR-16601](https://jira.spring.io/browse/SPR-16601?redirect=false)** and commented  Following test case (full example attached):  ```java Flux content = Flux.empty();  MultipartBodyBuilder builder = new MultipartBodyBuilder(); builder.asyncPart(""file"", content, DataBuffer.class).headers(h -> { 	h.setContentDispositionFormData(""file"", ""someFile.bin""); 	h.setContentType(MediaType.APPLICATION_OCTET_STREAM); });  WebClient.create(""http://whatever.de"")  		.post()  		.uri(""/any/path"")  		.contentType(MediaType.MULTIPART_FORM_DATA)  		.body(BodyInserters.fromMultipartData(builder.build()))  		.exchange()  		.block(); ```  Throws an exception:  ``` org.springframework.core.codec.CodecException: No suitable writer found for part: file ```  Dependencies: * org.springframework:spring-webflux:5.0.4.RELEASE * io.projectreactor.ipc:reactor-netty:0.7.5.RELEASE    ---  **Affects:** 5.0.4  **Attachments:** - [sample.tar.gz](https://jira.spring.io/secure/attachment/25420/sample.tar.gz) (_1.04 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/842c29103f0289ae7517e78052460a9517ed4bfd","closed","type: enhancement,","spring-projects-issues","2018-03-16T07:14:59Z","2018-04-03T20:34:26Z"
"","21271","Avoid repeated superclass introspection in AnnotationUtils.findAnnotation [SPR-16730]","**[Marc Boudreault](https://jira.spring.io/secure/ViewProfile.jspa?name=marc.boudreault)** opened **[SPR-16730](https://jira.spring.io/browse/SPR-16730?redirect=false)** and commented  Hello,  We ran load tests and found that findAnnotation was one of the top method using CPU despite it uses caching.  We could correct this situation by caching NULL values with this simple change:  ``` --- C:\Project\AnnotationUtils.java	2018-04-16 16:16:04.974657900 -0400 +++ C:\Project\src\main\java\org\springframework\core\annotation\AnnotationUtils.java	2018-03-12 16:58:54.540000000 -0400  @@ -136,6 +148,14 @@  			new ConcurrentReferenceHashMap(256);    	private static transient Log logger; +	 +	private static final Annotation NULL_ANNOTATION = new Annotation() { + +		@Override +		public Class annotationType() { +			// TODO Auto-generated method stub +			return null; +		}};      	/** @@ -558,13 +578,14 @@  	@SuppressWarnings(""unchecked"")  	public static  A findAnnotation(Method method, Class annotationType) {  		Assert.notNull(method, ""Method must not be null""); +		  		if (annotationType == null) {  			return null;  		}    		AnnotationCacheKey cacheKey = new AnnotationCacheKey(method, annotationType);  		A result = (A) findAnnotationCache.get(cacheKey); - +		  		if (result == null) {  			Method resolvedMethod = BridgeMethodResolver.findBridgedMethod(method);  			result = findAnnotation((AnnotatedElement) resolvedMethod, annotationType); @@ -595,9 +616,13 @@  			if (result != null) {  				result = synthesizeAnnotation(result, method);  				findAnnotationCache.put(cacheKey, result); +			}else { +				findAnnotationCache.put(cacheKey, NULL_ANNOTATION);  			}  		} - +		if(NULL_ANNOTATION == result) { +			result = null; +		}  		return result;  	}   @@ -691,8 +716,13 @@  			if (result != null && synthesize) {  				result = synthesizeAnnotation(result, clazz);  				findAnnotationCache.put(cacheKey, result); +			}else if(result == null && synthesize) { +				findAnnotationCache.put(cacheKey, NULL_ANNOTATION);  			}  		} +		if(NULL_ANNOTATION == result) { +			result = null; +		}   		return result;  	} ```  Often findAnnotation returns null - adding a key with NULL_ANNOTATION as the value resolved the issue.  NULL_ANNOTATION is reverted to null prior returning.  After this change we observed an appreciable 4-5% performance improvement in our app across the board.  ---  **Affects:** 4.3.10  **Issue Links:** - #16501 ReflectionUtils slow down application startup on WebSphere - #18199 Performance regression on startup (in particular in AnnotationUtils) - #21216 Comprehensively cache annotated methods for interfaces and superclasses - #20609 Annotations on generic interface methods not found by AnnotationUtils - #21602 Cache order result per Class in OrderUtils (for AnnotationAwareOrderComparator) - #21472 Avoid unnecessary synthesizable annotation processing  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d78e27f1e9be6c0aeea293c2be19c706cc6c29cd, https://github.com/spring-projects/spring-framework/commit/26652a6b8323ece74866fcf5bd928496b24009f5","closed","type: enhancement,","spring-projects-issues","2018-04-16T20:34:12Z","2019-01-11T16:44:22Z"
"","21676","Improve documentation for FactoryBean's getObject automatic call through @ManagedResource [SPR-17139]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-17139](https://jira.spring.io/browse/SPR-17139?redirect=false)** and commented  I have the following situation about `FactoryBean` for the `getObject()` execution.  I have for example:  ```java @Bean ActiveMQConnectionFactoryFactoryBean connectionFactoryInstanceARemoteHostFactoryBean(){ 	logger.info(""@Bean connectionFactoryInstanceARemoteHostFactoryBean ...""); 	ActiveMQConnectionFactoryFactoryBean factoryBean = new ActiveMQConnectionFactoryFactoryBean(); 	.... 	logger.info(""	{}"", factoryBean.toString()); 	return factoryBean; } ```  Where:  ```java public class ActiveMQConnectionFactoryFactoryBean implements FactoryBean{  ...         @Override 	public ActiveMQConnectionFactory getObject() throws Exception {             ...         }  } ```  From above: * The `@Bean` method is created/managed by Spring * In _other_ `@Bean` method that works with `@Conditional` I can call and execute manually the `getObject()` method.  Until here all work how is expected.  My problem is with `RabbitMQ`, I have the following:  ```java @Bean RabbitMQCachingConnectionFactoryFactoryBean cachingConnectionFactoryInstanceARemoteHostFactoryBean() { 	logger.info(""@Bean cachingConnectionFactoryInstanceARemoteHostFactoryBean ...""); 	RabbitMQCachingConnectionFactoryFactoryBean factoryBean = new RabbitMQCachingConnectionFactoryFactoryBean();         ... 	logger.info(""	{}"", factoryBean.toString()); 	return factoryBean; } ```  and  ```java public class RabbitMQCachingConnectionFactoryFactoryBean implements FactoryBean {     ...    @Override    public CachingConnectionFactory getObject() throws Exception {  ```  Thus the following: * The `@Bean` method is created/managed by Spring * In _other_ `@Bean` method that works with `@Conditional` I can call and execute manually the `getObject()` method.  When `@Conditional` is false that _other_ `@Bean` never calls and execute manually the `getObject()` method. It is expected.  **Problem**: but because `implements FactoryBean` works with `ActiveMQConnectionFactory` and it is declared how:  ```java @ManagedResource public class CachingConnectionFactory extends AbstractConnectionFactory 		implements InitializingBean, ShutdownListener, PublisherCallbackChannelConnectionFactory { ```  I did realise that because the component is marked with `@ManagedResource`, Spring through JMX, calls _automatically_ the `getObject()` method. Arising errors.  I have the following:  ```java @Configuration @EnableMBeanExport public class JmxConfig {  } ```  If I comment `@EnableMBeanExport` the app starts up without problem. But I need use JMX for other components, I need Spring does not execute automatically that `@ManagedResource`.  This behaviour about JMX triggers automatically the `getObject()` method when the `FactoryBean`'s type is marked with `@ManagedResource` (i.e: `CachingConnectionFactory`) is not covered neither [1.8.3. Customizing instantiation logic with a FactoryBean](https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans-factory-extension-factorybean) nor [4. JMX](https://docs.spring.io/spring/docs/current/spring-framework-reference/integration.html#jmx)   ---  **Affects:** 5.0.8","open","in: core,","spring-projects-issues","2018-08-07T13:22:29Z","2019-11-15T12:00:46Z"
"","21480","Spring WebSocket: Change in runtime StompBroker to other server [SPR-16941]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-16941](https://jira.spring.io/browse/SPR-16941?redirect=false)** and commented  I have two `ActiveMQ` servers already started. Consider primary and secondary.  The following works fine when the app is started  ```java @Override public void configureMessageBroker(MessageBrokerRegistry config) {     config.enableStompBrokerRelay(""/topic"",""/queue"").setRelayHost(""192.168.1.88"")                                                   .setRelayPort(61613);                                                                   config.setApplicationDestinationPrefixes(""/app"");     config.setUserDestinationPrefix(""/user""); } ```  Consider the current `StompBroker` shown above as valid and works how is expected when the app is started and it works by default with the primary `ActiveMQ` server. Now consider if the primary server goes down. I need edit/change in runtime `StompBroker` to work with the secondary.  With the current API, seems is not possible change in runtime the `StompBrokerRelay` to be updated again to use other secondary server.  Not sure if my approach about to work with `StompBrokerRelay` is correct or if I should 'retrieve' other Bean or component and apply the new changes.   ---  **Affects:** 5.0 GA, 5.0.7  **Reference URL:** https://stackoverflow.com/questions/50650296/spring-websocket-how-update-and-reflect-the-changes-in-runtime-for-the-messageb","closed","status: declined,","spring-projects-issues","2018-06-14T18:05:35Z","2020-10-29T21:56:57Z"
"","21400","Spring WebSocket: Indicate Stomp disconnect event would be executed twice [SPR-16861]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-16861](https://jira.spring.io/browse/SPR-16861?redirect=false)** and commented  I am working with spring websocket, but with a true broker. It with `ActiveMQ`.  Through my custom `ChannelInterceptorAdapter`. I have confirmed that the `STOMP` disconnect event is triggered twice when I close the connection _manually_ from the client (Web Browser). (Apart: some times, very rarely, for the other two events Connect and Connected this same behavior happens, again very rarely)  According with the replies of Sergy and Rossen it is normal or is expected in someway. It without matter if is handled that event through either `ChannelInterceptorAdapter` or `SessionDisconnectEvent`.  Consider in add a special note about this behaviour in the current reference documentation. Perhaps in the [4.4.14. Events and Interception](https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#websocket-stomp-appplication-context-events) section. Where these classes appears together.   ---  **Affects:** 4.3.17, 5.0.5  **Reference URL:** https://stackoverflow.com/questions/31634973/stomp-disconnects-its-processing-twice-in-channel-interceptor-and-simplebrokerme  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c44de3c5df5fb57630727d9491dd6ea5ab47563f  **Backported to:** [4.3.18](https://github.com/spring-projects/spring-framework/milestone/167?closed=1)","closed","type: task,","spring-projects-issues","2018-05-22T13:35:50Z","2018-06-12T15:44:03Z"
"","21393","Spring websocket: consider add a Send Event through the AbstractSubProtocolEvent hierarchy [SPR-16853]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-16853](https://jira.spring.io/browse/SPR-16853?redirect=false)** and commented  For Spring websocket  Being curious. Why not create for the `AbstractSubProtocolEvent` hierarchy a class that handles the `send` event? The other events are practically covered. More details in the SO link.  Question apart: from the [StompCommand](https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/messaging/simp/stomp/StompCommand.html) enum. Why not all all the types are reflected to be handled through the `AbstractSubProtocolEvent` hierarchy too?  Thank you   ---  **Affects:** 5.0 GA, 5.0.5  **Reference URL:** https://stackoverflow.com/questions/50457199/spring-websocket-how-intercept-the-send-event-through-the-abstractsubprotocolev","closed","in: web,","spring-projects-issues","2018-05-21T22:35:53Z","2019-01-11T17:09:45Z"
"","21392","Spring MVC: @EnableScheduling needs to be redeclared for each application context [SPR-16852]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-16852](https://jira.spring.io/browse/SPR-16852?redirect=false)** and commented  The following is not critical, but  I have:  ```java @Configuration @EnableScheduling public class SchedulingConfig implements SchedulingConfigurer {  	private static final Logger logger = LoggerFactory.getLogger(SchedulingConfig.class.getSimpleName());  	@Override 	public void configureTasks(ScheduledTaskRegistrar taskRegistrar) { 		taskRegistrar.setScheduler(taskScheduler()); 	}  	@Bean(destroyMethod=""shutdown"")     public TaskScheduler taskScheduler() { 		logger.info(""taskScheduler method executed ...""); 		ThreadPoolTaskScheduler threadPoolTaskScheduler = new ThreadPoolTaskScheduler(); 		threadPoolTaskScheduler.setPoolSize(4); 		threadPoolTaskScheduler.setThreadNamePrefix(""scheduler-""); 		return threadPoolTaskScheduler;     }  } ```  When `SchedulingConfig` is scanned only for the `RootApplicationContext` (and known that the `ServletApplicationContext` must be able to use/access the `RootApplicationContext` beans) my `@Components` working with `@Schedule` in the `ServletApplicationContext` does not work.  The current solution is scan `SchedulingConfig` from the `ServletApplicationContext`  Thus seems mandatory scans twice this `SchedulingConfig` from the `RootApplicationContext` (consider a batch process where web is **not** involved) and `ServletApplicationContext` (consider `Websocket`, sending messages to a `JMS` destination, working `SimpMessagingTemplate` )  It is similar than (prior when to be fixed of course):  * [Spring MVC and AOP: @EnableAspectJAutoProxy needs to be redeclared for each application context](#19319)  I am assuming this situation would be the same or reflected for a `@Configuration` class working with `@EnableAsync`     ---  **Affects:** 4.3.17, 5.0.5  **Issue Links:** - #19319 Spring MVC and AOP: `@EnableAspectJAutoProxy` needs to be redeclared for each application context  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b39ce80c879101ab132dcc794cee5e12abb5a668, https://github.com/spring-projects/spring-framework/commit/5935b7aefe6223f14bbc92289b92ff8aa0f8abba  **Backported to:** [4.3.18](https://github.com/spring-projects/spring-framework/milestone/167?closed=1)","closed","in: core,","spring-projects-issues","2018-05-21T17:42:04Z","2019-01-14T04:31:01Z"
"","21326","Enhance JavaConfig Spring MVC configuration to handle easily the 404 scenario [SPR-16786]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-16786](https://jira.spring.io/browse/SPR-16786?redirect=false)** and commented  Currently for `Spring Framework` improvements in `5.0.x` series, just curious if is possible do more practical the `JavaConfig` configuration to handle the `404` scenario, and of course that be functional.  I have read many tutorials and SO posts: * Practically _'none'_ work * Work but _based_ in `Spring Boot` API  The goal is avoid the following:  ```java HTTP Status 404 – Not Found Type Status Report  Message webapp/abcxyz123  Description The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.  Apache Tomcat/9.0.7 ```  Thus the user must not know that the app is based in Java, a custom view (either jsp o html) should be shown after to handled the `NoHandlerFoundException` class.   Consider the scenario of an invalid URL in the web browser where I know there are no `@RequestMapping` s to work around there (assume the user arrives to the address bar and writes anything)  Now, to be honest, _thinking in other possible solution_: if for `Rest` exists the valuable `ResponseEntityExceptionHandler` class where it handles a set of exceptions, even including one for `NoHandlerFoundException` that returns a `ResponseEntity` object, why not create a new one, i.e: `ResponseMVCExceptionHandler`, for only `Spring MVC`, where the method that handles the `NoHandlerFoundException` object returns the `ModelAndView` instead.   ---  **Affects:** 4.3.16, 5.0 GA, 5.0.5  **Reference URL:** https://stackoverflow.com/questions/50121353/spring-mvc-5-handle-404-through-javaconfig-when-a-url-cant-be-handled-by-an  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e4b4d3e2f6aa3eced7456d5b68301286dcb3b76b, https://github.com/spring-projects/spring-framework/commit/e2115594c03cd2a9bbf6374be73d167c476ab414","closed","type: enhancement,","spring-projects-issues","2018-05-02T12:54:25Z","2019-01-11T16:40:50Z"
"","21315","Spring MVC in runtime fails when the locale is changed according with BCP 47 [SPR-16775]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-16775](https://jira.spring.io/browse/SPR-16775?redirect=false)** and commented  I have the following infrastructure:  ```java @Bean public LocaleChangeInterceptor localeChangeInterceptor(){ 	LocaleChangeInterceptor localeChangeInterceptor = new LocaleChangeInterceptor(); 	localeChangeInterceptor.setParamName(""language""); 	return localeChangeInterceptor; }  @Bean(name=""localeResolver"") public LocaleResolver cookieLocaleResolver(){ 	CookieLocaleResolver cookieLocaleResolver = new CookieLocaleResolver(); 	cookieLocaleResolver.setCookieName(""language""); 	cookieLocaleResolver.setDefaultLocale(Locale.forLanguageTag(""en-US"")); 	return cookieLocaleResolver; } ```  I have confirmed that in `runtime` the following works:  (A): `[http://localhost:8080/thymeleaf-02/locale/changelocale?language=es_ES]` Observe that the URL uses `_`, and the app works.  (B) `[http://localhost:8080/thymeleaf-02/locale/changelocale?language=es-ES]` Observe that the URL uses `-`, and the app fails with:  ``` HTTP Status 500 – Internal Server Error Type Exception Report  Message Request processing failed; nested exception is java.lang.IllegalArgumentException: Locale part ""es-ES"" contains invalid characters  Description The server encountered an unexpected condition that prevented it from fulfilling the request.  Exception  org.springframework.web.util.NestedServletException: Request processing failed; nested exception is java.lang.IllegalArgumentException: Locale part ""es-ES"" contains invalid characters 	 ...  Root Cause  java.lang.IllegalArgumentException: Locale part ""es-ES"" contains invalid characters 	org.springframework.util.StringUtils.validateLocalePart(StringUtils.java:817) ```  According with my experience in: #20999  Is valid use - and not _. Currently my `@Test` methods pass with `-` but fails in `runtime`. Is it a bug? Or missing configuration? Because I think `runtime` and `testing` should have the same behavior.  I know that `BCP 47` for this case is about the `Accept-Language` header and the URL is working through a parameter. But I hope you see my point.  Not sure if it is the expected behavior, but could be confuse for the developer.  Thank You.  ---  **Affects:** 5.0.4  **Issue Links:** - #20999 MockHttpServletRequest.addHeader fails for invalid LanguageRange in Accept-Language","closed","status: invalid,","spring-projects-issues","2018-04-26T17:41:25Z","2019-07-09T17:26:54Z"
"","21299","Improve MockMvcResultMatchers to work with Thymelaf (something equivalent about 'forwardedUrl') [SPR-16758]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-16758](https://jira.spring.io/browse/SPR-16758?redirect=false)** and commented  I am working with `Spring Framework` 5.0.4 and I have the same situation than this post in SO  [Spring Boot - MockMVC forwardedUrl using Thymeleaf](https://stackoverflow.com/questions/43770678/spring-boot-mockmvc-forwardedurl-using-thymeleaf)  When I work with `JSP` for a `GET` request I can test the following in peace:  ```java .andExpect(status().isOk()) .andExpect(status().isOk())  .andExpect(view().name(is(""persona/findOne"")))  .andExpect(forwardedUrl(""/WEB-INF/view/jsp/persona/findOne.jsp""))   ```  Thus I would understand that the `forwardedUrl` method for a `JSP` scenario is testing what is the final file path that the view name was interpreted by a `ViewResolver`, in this case the `InternalResourceViewResolver`, but it does not apply as is expected for `Thymleaf`  Ok, through `Gradle Test Report` I got the `forwardedUrl` with the same `null` value. But I can confirm that _the reply content_ contains within the `body` all the `html` code retrieved and rendered and filled with the `Model`  Thus I think is valuable for the developers add a new method to know or test what is the `html` final file path interpreted for the `Thymeleaf` view resolver.  ```java .andExpect(status().isOk()) .andExpect(status().isOk())  .andExpect(view().name(is(""persona/findOne"")))  .andExpect(someNewMethod(""/static/persona/findOne.html""))   <--- apply same logic or control than in JSP   ```  Where `static` is a directory located within the `src/main/resources`  My project is based in `Spring Framework` and the SO post is based in `Spring Boot`, but both is working with `src/main/resources`, in my case because I am working with multimodules and I have this situation [How refer the /WEB-INF/ content how a dependency for a module for Testing](https://discuss.gradle.org/t/how-refer-the-web-inf-content-how-a-dependency-for-a-module-for-testing/26671) where the solution is work around with `src/main/resources` instead of `WEB-INF`      ---  **Affects:** 4.3.15, 5.0 GA, 5.0.4","closed","type: enhancement,","spring-projects-issues","2018-04-23T21:22:10Z","2019-01-11T16:43:36Z"
"","21221","execute @Before and @After aspect for Runnable.run method which invoked through lambda expression. [SPR-16680]","**[Manoj Kumar](https://jira.spring.io/secure/ViewProfile.jspa?name=manojkumar)** opened **[SPR-16680](https://jira.spring.io/browse/SPR-16680?redirect=false)** and commented  How to create a pointcut for Runnable.run method So that `@Before` and `@After` aspect can be invoked in java 8 lambda expression.  1. Create pointcut for Runnable.run method 2. Create `@Before` aspect for pointcut in step 1 .  ---> Print Before runnbale 3. Create `@Aefore` aspect for pointcut in step 1 .  ---> Print After runnable  When below line invoked  executor.runAsync(() -> { System.out.println(""Runnable invoked""); })  Output expected :  Before runnable Runnable invoked After runnable   --- No further details from [SPR-16680](https://jira.spring.io/browse/SPR-16680?redirect=false)","closed","in: core,","spring-projects-issues","2018-04-02T18:27:42Z","2019-01-12T05:19:03Z"
"","21888","lookupPath for Request not getting normalized path leading to HTTP Status 404 – Not Found for relative path forward requests [SPR-17354]","**[manish9396](https://jira.spring.io/secure/ViewProfile.jspa?name=manish9396)** opened **[SPR-17354](https://jira.spring.io/browse/SPR-17354?redirect=false)** and commented  Tomcat upgraded behavior to return non-normalized requestURI in ApplicationDispatcher. https://github.com/apache/tomcat80/commit/21f57c23780950fcf838ffe9a0fba17cc5247691#diff-8b91a9296e19012bf6be4bdf975fab0dR499  Spring relies on `request.getRequestURI()` for lookupPath which is used to find matching servlet. https://github.com/spring-projects/spring-framework/blob/v4.3.16.RELEASE/spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java#L232  As a result of this, after upgrading to the latest tomcat, v8.0.45 and above, v8.5.16 and above, forwarding to relative paths leads to 404 not found, error being reported as,     ```java o.s.web.servlet.PageNotFound No mapping found for HTTP request with URI [/context/asdf/../asdf/zxcv] in DispatcherServlet with name 'DispatcherServlet' ```      ---  **Affects:** 4.3.16  **Attachments:** - [RelativePathBug.tar.gz](https://jira.spring.io/secure/attachment/26060/RelativePathBug.tar.gz) (_36.13 kB_) - [RelativePathBug.tar.gz](https://jira.spring.io/secure/attachment/26057/RelativePathBug.tar.gz) (_2.13 kB_) - [Tomcat-8.0.43-path-resolved.png](https://jira.spring.io/secure/attachment/26059/Tomcat-8.0.43-path-resolved.png) (_11.90 kB_) - [Tomcat-8.0.53-path-not-resolved.png](https://jira.spring.io/secure/attachment/26058/Tomcat-8.0.53-path-not-resolved.png) (_22.65 kB_)","closed","status: invalid,","spring-projects-issues","2018-10-09T07:48:05Z","2019-01-12T05:18:00Z"
"","21731","Autowiring inconsistency: @Qualifier works with HashMap but not with Map [SPR-17197]","**[Manfred Quasten](https://jira.spring.io/secure/ViewProfile.jspa?name=manfred.quasten@t-online.de)** opened **[SPR-17197](https://jira.spring.io/browse/SPR-17197?redirect=false)** and commented  bean definition:  ```xml        ...      ```  ```java public InstanceRepositoryImpl {  @Autowired  InstanceRepositoryImpl(@Qualifier(""instances"") final Map instances ) {  this.instances= instances;  }  } ```     Error Message:  ``` No qualifying bean of type 'java.util.Map' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Qualifier(value=instances)} ```  When I change `Map` to `HashMap` it works: no exception is thrown.  It should work using the `Map` interface. The  `@Qualifier` annotation specifies the name; the bean exists.  ---  **Affects:** 5.0.3  **Issue Links:** - #19901 Accept empty Collection injection for single constructor scenarios - #21805 Ordered list access for BeanFactory.getBeanProvider(), superseding ObjectProvider","closed","type: enhancement,","spring-projects-issues","2018-08-20T12:17:07Z","2019-01-11T13:39:44Z"
"","21686","@Bean in @TestConfiguration is ignored [SPR-17149]","**[Maksym Novoseltsev](https://jira.spring.io/secure/ViewProfile.jspa?name=mnvooseltsev)** opened **[SPR-17149](https://jira.spring.io/browse/SPR-17149?redirect=false)** and commented  I have faced an issue that _`@Bean`_ that defined in the _`@TestConfiguration`_ is never created and actually ignored. This applies only when you use _`@Import`_ annotation to include _`@TestConfiguration`_ in your test. When _`@TestConfiguration`_ is defined as inner static class, everything works as expected.  Please, see Reference URL for demo project example.  BTW, _`@MockBean`_ works correctly in both cases.  ---  **Affects:** 5.0.8  **Reference URL:** https://github.com/mnovoseltsev/testconfiguration-bug","closed","status: declined,","spring-projects-issues","2018-08-08T14:44:00Z","2019-01-13T04:31:17Z"
"","21340","LocalSessionFactoryBean and Hibernate 5.2: NullPointerException in afterPropertiesSet [SPR-16800]","**[Maksym Demin](https://jira.spring.io/secure/ViewProfile.jspa?name=maximd)** opened **[SPR-16800](https://jira.spring.io/browse/SPR-16800?redirect=false)** and commented  I migrate from Hibernate 5.1 & Spring 4.X to the newest Hibernate 5.2 and Spring 5.0. Also I move from XML setup to the XMLfree configuration. I get NullPointerException when I try to configure SessionFactory. Here is my code:     ```java @Configuration @EnableTransactionManagement @PropertySource({ ""classpath:core.properties"" }) @ComponentScan(value = ""com.test"") public class HibernateConfiguration {     private static Logger logger = Logger.getLogger(HibernateConfiguration.class);     private final static String HIBERNATE_DIALECT = ""org.hibernate.dialect.PostgreSQL95Dialect"";          @Autowired private Environment env;     @Autowired private ResourceLoader resourceLoader;              @Bean     public SessionFactory sessionFactory() throws IOException {         LocalSessionFactoryBean localSessionFactoryBean = new LocalSessionFactoryBean();         localSessionFactoryBean.setDataSource(dataSource());         localSessionFactoryBean.setPackagesToScan(new String[] { ""com.test.core.domain"" });         localSessionFactoryBean.setMappingLocations(loadResources());         localSessionFactoryBean.setHibernateProperties(hibernateProperties());         localSessionFactoryBean.afterPropertiesSet();         return localSessionFactoryBean.getObject();     }          private Resource[] loadResources() {         Resource[] resources = null;         try {             resources = ResourcePatternUtils.getResourcePatternResolver(resourceLoader)                     .getResources(""classpath:/hibernate/**/*.hbm.xml"");         } catch (IOException e) {             e.printStackTrace();         }         return resources;     }      @Bean     public DataSource dataSource() {         ComboPooledDataSource comboPooledDataSource = new ComboPooledDataSource();         try {             comboPooledDataSource.setDriverClass(Preconditions.checkNotNull(env.getProperty(""jdbc.driver-class-name"")));         } catch( PropertyVetoException pve ){             logger.error(""Cannot load datasource driver ("" + env.getProperty(""jdbc.driver-class-name"") +""): "" + pve.getMessage());             return null;         }         comboPooledDataSource.setJdbcUrl(Preconditions.checkNotNull(env.getProperty(""jdbc.url"")));         comboPooledDataSource.setUser(Preconditions.checkNotNull(env.getProperty(""jdbc.username"")));         comboPooledDataSource.setPassword(Preconditions.checkNotNull(env.getProperty(""jdbc.password"")));         comboPooledDataSource.setMinPoolSize(20);         comboPooledDataSource.setMaxPoolSize(50);         comboPooledDataSource.setCheckoutTimeout(15);         comboPooledDataSource.setMaxStatements(0);         comboPooledDataSource.setIdleConnectionTestPeriod(30);         return comboPooledDataSource;     }      @Bean     @Autowired     public HibernateTransactionManager transactionManager(SessionFactory sessionFactory) throws Exception{         HibernateTransactionManager transactionManager = new HibernateTransactionManager();         transactionManager.setSessionFactory(sessionFactory());         return transactionManager;     }      @Bean     public PersistenceExceptionTranslationPostProcessor exceptionTranslation(){         return new PersistenceExceptionTranslationPostProcessor();     }      private static Properties hibernateProperties() {         Properties properties = new Properties();         properties.setProperty(""hibernate.dialect"", HIBERNATE_DIALECT);         properties.setProperty(""hibernate.bytecode.use_reflection_optimizer"", ""true"");         properties.setProperty(""hibernate.show_sql"", ""false"");         properties.setProperty(""hibernate.hbm2ddl.auto"", ""validate"");         properties.setProperty(""hibernate.default_batch_fetch_size"", ""1000"");         properties.setProperty(""hibernate.max_fetch_depth"", ""2"");         properties.setProperty(""hibernate.generate_statistics"", ""false"");         properties.setProperty(""hibernate.default_schema"", ""EDRIVE"");        properties.setProperty(""hibernate.connection.CharSet"", ""utf8"");         properties.setProperty(""hibernate.connection.characterEncoding"", ""utf8"");         properties.setProperty(""hibernate.connection.useUnicode"", ""true"");         properties.setProperty(""hibernate.connection.release_mode"", ""after_transaction"");        properties.setProperty(""hibernate.jdbc.batch_size"", ""50"");         properties.setProperty(""hibernate.jdbc.fetch_size"", ""500"");         properties.setProperty(""hibernate.jdbc.use_scrollable_resultset"", ""false"");        properties.setProperty(""hibernate.cache.region.factory_class"", ""org.hibernate.cache.ehcache.SingletonEhCacheRegionFactory"");         properties.setProperty(""hibernate.cache.use_query_cache"", ""true"");         properties.setProperty(""hibernate.cache.use_second_level_cache"", ""true"");         properties.setProperty(""hibernate.cache.use_structured_entries"", ""false"");        properties.setProperty(""hibernate.current_session_context_class"", ""org.springframework.orm.hibernate5.SpringSessionContext"");         return properties;     } }  ```        Exception is:  ``` 2018-05-09 10:05:27 ERROR ContextLoader:316 - Context initialization failed2018-05-09 10:05:27 ERROR ContextLoader:316 - Context initialization failedorg.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'cloudBean': Unsatisfied dependency expressed through field 'configuration'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'configuration': Unsatisfied dependency expressed through field 'configurationDao'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'configurationDAOImpl': Unsatisfied dependency expressed through field 'databaseUtilities'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'databaseUtilities': Unsatisfied dependency expressed through field 'sessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sessionFactory' defined in class path resource [com/test/core/config/HibernateConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.hibernate.SessionFactory]: Factory method 'sessionFactory' threw exception; nested exception is java.lang.NullPointerException at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:587) at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:91) at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:373) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1348) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:578) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:501) at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:317) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:315) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:760) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:869) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550) at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:409) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:291) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:103) at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4884) at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5347) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145) at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1410) at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1400) at java.util.concurrent.FutureTask.run(FutureTask.java:266) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at java.lang.Thread.run(Thread.java:748)Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'configuration': Unsatisfied dependency expressed through field 'configurationDao'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'configurationDAOImpl': Unsatisfied dependency expressed through field 'databaseUtilities'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'databaseUtilities': Unsatisfied dependency expressed through field 'sessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sessionFactory' defined in class path resource [com/test/core/config/HibernateConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.hibernate.SessionFactory]: Factory method 'sessionFactory' threw exception; nested exception is java.lang.NullPointerException at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:587) at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:91) at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:373) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1348) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:578) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:501) at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:317) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:315) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:251) at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1138) at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1065) at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:584) ... 24 moreCaused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'configurationDAOImpl': Unsatisfied dependency expressed through field 'databaseUtilities'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'databaseUtilities': Unsatisfied dependency expressed through field 'sessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sessionFactory' defined in class path resource [com/test/core/config/HibernateConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.hibernate.SessionFactory]: Factory method 'sessionFactory' threw exception; nested exception is java.lang.NullPointerException at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:587) at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:91) at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:373) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1348) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:578) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:501) at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:317) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:315) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:251) at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1138) at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1065) at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:584) ... 37 moreCaused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'databaseUtilities': Unsatisfied dependency expressed through field 'sessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sessionFactory' defined in class path resource [com/test/core/config/HibernateConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.hibernate.SessionFactory]: Factory method 'sessionFactory' threw exception; nested exception is java.lang.NullPointerException at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:587) at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:91) at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:373) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1348) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:578) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:501) at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:317) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:315) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:251) at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1138) at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1065) at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:584) ... 50 moreCaused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sessionFactory' defined in class path resource [com/test/core/config/HibernateConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.hibernate.SessionFactory]: Factory method 'sessionFactory' threw exception; nested exception is java.lang.NullPointerException at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:587) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1254) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1103) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:541) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:501) at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:317) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:315) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:251) at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1138) at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1065) at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:584) ... 63 moreCaused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.hibernate.SessionFactory]: Factory method 'sessionFactory' threw exception; nested exception is java.lang.NullPointerException at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185) at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:579) ... 75 moreCaused by: java.lang.NullPointerException at org.hibernate.metamodel.internal.AttributeFactory.getMetaModelType(AttributeFactory.java:202) at org.hibernate.metamodel.internal.AttributeFactory.buildPluralAttribute(AttributeFactory.java:176) at org.hibernate.metamodel.internal.AttributeFactory.buildAttribute(AttributeFactory.java:82) at org.hibernate.metamodel.internal.MetadataContext.wrapUp(MetadataContext.java:213) at org.hibernate.metamodel.internal.MetamodelImpl.initialize(MetamodelImpl.java:221) at org.hibernate.internal.SessionFactoryImpl.(SessionFactoryImpl.java:300) at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:462) at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:710) at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:726) at org.springframework.orm.hibernate5.LocalSessionFactoryBean.buildSessionFactory(LocalSessionFactoryBean.java:535) at org.springframework.orm.hibernate5.LocalSessionFactoryBean.afterPropertiesSet(LocalSessionFactoryBean.java:519) at com.test.core.config.HibernateConfiguration.sessionFactory(HibernateConfiguration.java:46) at com.test.core.config.HibernateConfiguration$$EnhancerBySpringCGLIB$$fed04caf.CGLIB$sessionFactory$2() at com.test.core.config.HibernateConfiguration$$EnhancerBySpringCGLIB$$fed04caf$$FastClassBySpringCGLIB$$761ae7b.invoke() at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228) at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:361) at com.test.core.config.HibernateConfiguration$$EnhancerBySpringCGLIB$$fed04caf.sessionFactory() at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154) ... 76 more ```  Java 8.0.172, Spring 5.0.6.RELEASE, Hibernate 5.2.17.Final, PostgreSQL 10.3, CentOS 7.4.1708.      ---  **Affects:** 5.0.6","open","in: core,","spring-projects-issues","2018-05-09T07:28:04Z","2019-01-11T16:46:00Z"
"","21761","Spring WebSocket Stomp tomcat cluster with user destinations sends message to wrong subscriber. [SPR-17228]","**[Maksim Orlov](https://jira.spring.io/secure/ViewProfile.jspa?name=maksim%20orlov)** opened **[SPR-17228](https://jira.spring.io/browse/SPR-17228?redirect=false)** and commented  Tomcat uses _AtomicLong_ for generating _*id*_ for web socket sessions  ```java private static AtomicLong ids = new AtomicLong(0); ```  at  ```java org.apache.tomcat.websocket.WsSession; ```  then the id transferred to Spring WebSocket package  ```java public void initializeNativeSession(Session session) { 		super.initializeNativeSession(session);  		this.id = session.getId(); ```  at  ```java org.springframework.web.socket.adapter.standard.StandardWebSocketSession; ```  In case of user destination subscriptions  ```javascript stompClient.subscribe(""/user/queue/events"", callback, {  }); ```  controller class  ```java @MessageMapping(""/thread"") @SendToUser(destinations = ""/queue/events"", broadcast = false) public String handleThread(String rt) {    return new Long(Thread.currentThread().getId()).toString(); } ```  will pass message to user queue on RabbitMQ with name **""events-user0""**.  Sending message to ""/app/thread""  ```javascript stompClient.send(""/app/thread"", {priority: 9}, ""Hello, STOMP""); ```  will trigger controller with `@MessageMapping`. But in case when there is the second node and other client (different login) will also subscribe to ""/user/queue/events"" and its **_session id_** is the same as on the first node (because names just simple sequences ) The second user will receive the message instead of the first user, because first node created RibbitMQ queue with name **""events-user0""** and the second node subscribed to the _+same+_ queue.  The generated unique ids for the WebSocket session or different names for Broker queues can handle this issue.  ---  **Affects:** 5.0.7  **Reference URL:** #17258  **Attachments:** - [config.java](https://jira.spring.io/secure/attachment/26001/config.java) (_4.87 kB_) - [rabbit_queues.jpg](https://jira.spring.io/secure/attachment/26002/rabbit_queues.jpg) (_88.79 kB_)  **Issue Links:** - #17258 Use UUID.randomUUID() for session id's in SockJsClient  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b17e7c321a6dcfc13a31098ba19477bc1e40f71c, https://github.com/spring-projects/spring-framework/commit/3302798e2ff515205183f9a26a2aca8d92cc5352","closed","type: enhancement,","spring-projects-issues","2018-08-30T10:42:31Z","2019-01-14T04:28:07Z"
"","21777","Kotlin DSL (RouterFunctionDsl) doesn't support RenderingResponse in router function [SPR-17244]","**[Maksim Kostromin](https://jira.spring.io/secure/ViewProfile.jspa?name=daggerok)** opened **[SPR-17244](https://jira.spring.io/browse/SPR-17244?redirect=false)** and commented  With java, to render template engine views i can use RouterFunction in routes bean:  ```java @SpringBootApplication public class Application {   @Bean RouterFunction routes(final ApplicationHandlers handlers) {     return //...skipped         .andOther(route(GET(""/"").and(accept(TEXT_HTML)), handlers::index))         ;   } // main skipped.. ```  so with that, I can use both, ServerResponse:  ```java Mono index(final ServerRequest request) {   return ok().contentType(TEXT_HTML)              .render(""index"", singletonMap(""message"", ""Hello, World!""))       ; } ```  and RenderingResponse:  ```java Mono index(final ServerRequest request) {   return create(""index"").modelAttribute(""message"", ""Hello, World!"")                         .build()       ; } ```  but unfortunately I can't do similar with Kotlin DSL:  ```kotlin  @SpringBootApplication class App {   @Bean fun routes() = router {     resources(""/**"", ClassPathResource(""/static""))     (""/"").nest {       GET(""/"") {         create(""index"")             .modelAttribute(""message"", ""hey"")             .build()       }     }   } } ```  see screenshot-1.png in attachment:  !screenshot-1.png|thumbnail!  Only Mono\ handler like so:  ```kotlin      ok().contentType(TEXT_HTML)         .render(""index"", mapOf(""message"" to ""hey"")) ```  will works correctly... RenderingResponse extends ServerResponse, but unfortunately Mono\ doesn't extend  Mono\  at the moment I can force it only with unchecked cast  see screenshot-2.png from attachment:  !screenshot-2.png|thumbnail!  ```kotlin GET(""/"") {   val res = create(""index"")       .modelAttribute(""message"", ""hey"")       .build()   res as Mono } ```  I think it's bug  here some described source code repo: https://github.com/daggerok/spring-boot-oauth2/blob/master/src/main/java/daggerok/App.kt#L32  — Regards, Maksim Kostromin   ---  **Affects:** 5.1 RC2  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/14300  **Attachments:** - [screenshot-1.png](https://jira.spring.io/secure/attachment/26008/screenshot-1.png) (_135.95 kB_) - [screenshot-2.png](https://jira.spring.io/secure/attachment/26009/screenshot-2.png) (_144.91 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f8a0e3d08436f2ebe787c18d5744cfdd21aa9805","closed","type: bug,","spring-projects-issues","2018-09-04T20:06:22Z","2018-09-07T14:26:59Z"
"","21610","CookieWebSessionIdResolver doesn't recognise https scheme when used with ForwardedHeaderFilter [SPR-17072]","**[Mahan Hashemizadeh](https://jira.spring.io/secure/ViewProfile.jspa?name=mahanhz)** opened **[SPR-17072](https://jira.spring.io/browse/SPR-17072?redirect=false)** and commented  CookieWebSessionIdResolver sets the secure flag if it detects that the scheme is https.  **Note:** **SPR-16980** adds the ability to configure this yourself.  If ones setup is such that SSL termination occurs at the load balancer then the server will always think that the request is http.  In the Spring Webflux documentation it states that one can use the ForwardedHeaderFilter (https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#webflux-filters-forwarded-headers) to address this issue.  However this does not work (appears that the CookieWebSessionIdResolver is evaluated before the forwarded header filter has had a chance to mutate the uri).  I have created a github repository to reproduce this: https://github.com/mahanhz/secureflag  To check that my custom forwarded header filter works I compared the session cookie secure flag to the **Strict-Transport-Security** header in **StrictTransportSecurityServerHttpHeadersWriter** of spring-security (which sets the header using the same approach).  When the sample application is run using http via gradle:  **SPRING_PROFILES_ACTIVE=default,usingHttp ./gradlew bootRun**  Then there is no secure flag on the session cookie and there is also no **Strict-Transport-Security** header which is what I would expect.  However when the sample application is run using https via gradle:  **./gradlew bootRun**  Then there is still no secure flag on the session cookie but the **Strict-Transport-Security** header is now present which indicates that CookieWebSessionIdResolver does not recognise that the uri is https but StrictTransportSecurityServerHttpHeadersWriter does.  ---  **Issue Links:** - #21518 Provide more control for setting the secure flag on the session cookie  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a8a1fc6de5be2307eb56844ac1df1a09168f2ad9, https://github.com/spring-projects/spring-framework/commit/2e4f5a7923993cc1d135d8a1bf75dc5a09c29d65, https://github.com/spring-projects/spring-framework/commit/41aa4218af442f94f889ad03082ffddcd4e7da1c","closed","type: enhancement,","spring-projects-issues","2018-07-20T17:52:00Z","2019-01-11T12:47:06Z"
"","21518","Provide more control for setting the secure flag on the session cookie [SPR-16980]","**[Mahan Hashemizadeh](https://jira.spring.io/secure/ViewProfile.jspa?name=mahanhz)** opened **[SPR-16980](https://jira.spring.io/browse/SPR-16980?redirect=false)** and commented  CookieWebSessionIdResolver sets the secure flag if it detects that the scheme is https.  Could this be adjusted so that we can set this value ourselves, in the same way that we can set the cookie name? Or maybe even via a property like it is in the servlet world (server.servlet.session.cookie.secure)?  Currently my workaround is to extend CookieWebSessionIdResolver and override setSessionId:  ```java public class MySecureCookieWebSessionIdResolver extends CookieWebSessionIdResolver {      @Override     public void setSessionId(final ServerWebExchange exchange, final String id) {         String name = getCookieName();         String path = exchange.getRequest().getPath().contextPath().value() + ""/"";         exchange.getResponse().getCookies().set(name, ResponseCookie.from(name, id).path(path).maxAge(getCookieMaxAge()).httpOnly(true).secure(true).build());     } } ```  And then create a configuration bean:  ```java @Bean public WebSessionIdResolver webSessionIdResolver() {     return new MySecureCookieWebSessionIdResolver(); } ```  ---  **Issue Links:** - #20964 CookieWebSessionIdResolver should leverage SameSite Cookie Attribute - #21610 CookieWebSessionIdResolver doesn't recognise https scheme when used with ForwardedHeaderFilter","closed","type: enhancement,","spring-projects-issues","2018-06-28T10:11:50Z","2019-01-11T16:07:38Z"
"","19778","Cyclic bean methods cause IllegalArgumentException instead of BeanCurrentlyInCreationException [SPR-17358]","**[Madhura Bhave](https://jira.spring.io/secure/ViewProfile.jspa?name=mbhave)** opened **[SPR-17358](https://jira.spring.io/browse/SPR-17358?redirect=false)** and commented  Following some recent changes on master, tests related to `BeanCurrentlyInCreationException` in Spring Boot have [started failing](https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/diagnostics/analyzer/BeanCurrentlyInCreationFailureAnalyzerTests.java#L54). These tests expect the cyclic beans to throw a `BeanCurrentlyInCreationException` but instead we get a `IllegalArgumentException: wrong number of arguments`.   It might be related to the change [here.](https://github.com/spring-projects/spring-framework/commit/f662e3b85eb4c41087fcf5bb35f23fbfb1020b42#diff-cc936e219ae3ea6fcf88f74629262bbdR778)  ---  **Affects:** 5.1.1  **Issue Links:** - #21894 ""IllegalArgumentException: wrong number of arguments"" is thrown instead of NoUniqueBeanDefinitionException (_**""is duplicated by""**_) - #13532 Convenient programmatic bean retrieval with qualifiers  0 votes, 5 watchers","closed","in: core,","spring-projects-issues","2018-10-10T00:42:49Z","2019-01-11T14:14:24Z"
"","21447","StringUtils.cleanPath should not strip off the entire path for `file:./` [SPR-16908]","**[Madhura Bhave](https://jira.spring.io/secure/ViewProfile.jspa?name=mbhave)** opened **[SPR-16908](https://jira.spring.io/browse/SPR-16908?redirect=false)** and commented  `StringUtils.cleanPath(""file:../"")` returns `file:../` and it doesn't seem right that `StringUtils.cleanPath(""file:./"")` returns `file:`   ---  **Affects:** 5.0.6  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/13147  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d3b06a15f25f2474f87936d6cad0db43f56bac95, https://github.com/spring-projects/spring-framework/commit/7a02e438e7fa64840ee645fd4873bb074e694625  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2018-06-05T21:20:51Z","2018-07-26T08:09:29Z"
"","21242","Improve Kotlin + bean validation documentation [SPR-16701]","**[Maciej Sawicki](https://jira.spring.io/secure/ViewProfile.jspa?name=humberd)** opened **[SPR-16701](https://jira.spring.io/browse/SPR-16701?redirect=false)** and commented  [GitHub example project with tests](https://github.com/Humberd/spring-annotation-kotlin) [Stackoverflow question](https://stackoverflow.com/questions/49712645/spring-does-not-create-constraintvalidator)  When I define a class implementing _CustomValidator_ and it uses an annotation, for example _ValidateRoles_, which is defined in Kotlin, then the field validation with this annotation doesn't work. Whereas when I define the same annotation in Java the field is validated correctly.  Consider these 2 the same annotations. One is in Java and one is in Kotlin.  ```java @Constraint(validatedBy = RolesValidatorJava.class) @Retention(RetentionPolicy.RUNTIME) @Target({ElementType.FIELD}) public @interface ValidateRolesJava {     String message() default ""{com.example.demo.validators.ValidateRolesJava.message}"";      Class[] groups() default {};      Class[] payload() default {}; }  @Constraint(validatedBy = arrayOf(RolesValidatorKotlin::class)) @Retention(AnnotationRetention.RUNTIME) @Target(AnnotationTarget.FIELD, AnnotationTarget.PROPERTY) annotation class ValidateRolesKotlin(     val message: String = ""{com.example.demo.validators.ValidateRolesKotlin.message}"",     val groups: Array> = arrayOf(),     val payload: Array> = arrayOf() ) ```  Consider 2 Validators one for each Annotation, each returning false upon validation  ```java public class RolesValidatorJava implements ConstraintValidator> {     @Override     public boolean isValid(Collection value, ConstraintValidatorContext context) {         return false;     } }  class RolesValidatorKotlin : ConstraintValidator> {     override fun isValid(value: Collection?, context: ConstraintValidatorContext?): Boolean {         return false     } } ```  Now we have 2 the same request bodies, but with different annotations  ```java class JavaBodyDTO {     @NotNull     @ValidateRolesJava     var roles: Set = emptySet() }  class KotlinBodyDTO {     @NotNull     @ValidateRolesKotlin     var roles: Set = emptySet() } ```  Each response should return 400  ```java @PostMapping(""/updateRolesJava"") fun updateRolesJava(@RequestBody @Valid body: JavaBodyDTO): ResponseEntity {     // this should never reach because validator invalidates body     return ResponseEntity(HttpStatus.OK) }  @PostMapping(""/updateRolesKotlin"") fun updateRolesKotlin(@RequestBody @Valid body: KotlinBodyDTO): ResponseEntity {     // this should never reach because validator invalidates body, but the validation doesn't work     return ResponseEntity(HttpStatus.OK) } ```    ---  **Affects:** 5.0.5  **Reference URL:** https://github.com/Humberd/spring-annotation-kotlin  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e4298e8366bb5429cff9b51f05c4c86373179b5b, https://github.com/spring-projects/spring-framework/commit/1be585562faa405f491fa7e941140fac9618b4e5","closed","type: task,","spring-projects-issues","2018-04-08T10:43:58Z","2018-05-08T08:53:23Z"
"","21857","Quartz job bean can't have constructor with injected parameters [SPR-17323]","**[m-kay](https://jira.spring.io/secure/ViewProfile.jspa?name=m-kay)** opened **[SPR-17323](https://jira.spring.io/browse/SPR-17323?redirect=false)** and commented  When configuring a Quartz JobDetail with a bean which does not have a default constructor but only a constructor with argumnets to be injected the AutowireCapableBeanJobFactory fails to create the job. When removing the parameters from the constructor and use field injection everything works fine, however field injection is not recommended.  I'm using spring boot 2.0.5 with the starter spring-boot-starter-quartz and my configuration looks like following:     ```java @Configuration public class QuartzConfig {   @Bean(name = ""myQuartzJobDetail"")  public JobDetailFactoryBean myQuartzJobDetail() {   JobDetailFactoryBean jobDetailFactory = new JobDetailFactoryBean();   jobDetailFactory.setJobClass(MyJob.class);   jobDetailFactory.setDurability(true);   return jobDetailFactory;  }   @Bean  public CronTriggerFactoryBean advertisementUpdaterTrigger(@Qualifier(""myQuartzJobDetail"") JobDetail job) {   CronTriggerFactoryBean cronTriggerFactoryBean = new CronTriggerFactoryBean();   cronTriggerFactoryBean.setCronExpression(""0 0/1 * * * ? *"");   cronTriggerFactoryBean.setJobDetail(job);   return cronTriggerFactoryBean;  }  } ```  MyJob which does not work  ```java @Component @Scope(BeanDefinition.SCOPE_PROTOTYPE) class MyJob extends QuartzJobBean {    private SomeService someService;   @Autowired  public MyJob(SomeService someService) {   this.someService = someService;  }   protected void executeInternal(JobExecutionContext context){   System.out.println(""data from service "" + someService.getData());  } } ```  MyJob which works  ```java @Component @Scope(BeanDefinition.SCOPE_PROTOTYPE) class MyJob extends QuartzJobBean {   @Autowired  private SomeService someService;   protected void executeInternal(JobExecutionContext context){   System.out.println(""data from service "" + someService.getData());  } } ```     In my opinion the job factory should not create a new instance but rather get the instance from the application context and let the context create the instance if the scope is set to prototype.     ---  **Issue Links:** - #19337 Ability to suppress ""rejectedValue"" in error responses  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/19f33479322c17543b48d2a2ee9d68e95a3925f0","closed","type: enhancement,","spring-projects-issues","2018-10-02T13:38:28Z","2019-01-11T14:16:01Z"
"","21656","Handling multiple @XXXMapping annotations on same handler method [SPR-17119]","**[László Stahorszki](https://jira.spring.io/secure/ViewProfile.jspa?name=rolaca11)** opened **[SPR-17119](https://jira.spring.io/browse/SPR-17119?redirect=false)** and commented  When using the _`@GetMapping`, `@PostMapping`, ..._ shorthand annotations, except for the first one, all these annotation are ignored.  Of course it means that only the first `@RequestMapping` annotation is being used.  After short looking around, I'd guess instead of using the  ```java RequestMapping requestMapping = AnnotatedElementUtils.findMergedAnnotation(element, RequestMapping.class); ```  in _org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping_:257, maybe using  ```java Set requestMapping = AnnotatedElementUtils.findAllMergedAnnotations(element, RequestMapping.class); ```  plus required refactors with it could improve the situation.  Thanks in advance,  László Stahorszki  ---  **Affects:** 5.1 RC1","closed","type: enhancement,","spring-projects-issues","2018-08-02T12:46:54Z","2020-03-12T16:55:09Z"
"","21629","AbstractAuthenticationToken shadows Authentication methods, in some cases with bad return types [SPR-17092]","**[László Stahorszki](https://jira.spring.io/secure/ViewProfile.jspa?name=rolaca11)** opened **[SPR-17092](https://jira.spring.io/browse/SPR-17092?redirect=false)** and commented  I was trying to implement a Delegating token, when I realized that in the _Authentication.java_ there is a method declaration:  ```java Collection getAuthorities(); ```  A method with same signature is implemented in the _AbstractAuthenticationToken.java_:  ```java public Collection getAuthorities() {    return authorities; } ```  As you can see, the return type is slightly different, so when I'm creating a _AbstractAuthenticationToken_ that delegates to other _Authentication_, I have to cast the return type, which is kinda ugly:  ```java @Override public Collection getAuthorities() {     return (Collection) delegate.getAuthorities(); } ```  I think the method in _AbstractAuthenticationToken_ should override the method in the interface and have the same return type to avoid this kind of headache   ---  **Affects:** 5.0.8","closed","status: invalid,","spring-projects-issues","2018-07-26T11:31:52Z","2019-01-12T05:18:25Z"
"","21509","Scoped data container [SPR-16971]","**[László Stahorszki](https://jira.spring.io/secure/ViewProfile.jspa?name=rolaca11)** opened **[SPR-16971](https://jira.spring.io/browse/SPR-16971?redirect=false)** and commented  My suggestion would be some kind of a generic data container, whose scope can be parameterized. There could be some annotation, let's say  ```java @ScopedContainer(scope = ""some_scope"") ```  that can be applied to fields, or setter methods.  A typical use-case would be, when I want to store some data in a bean of scope _singleton_, but I need the data _List_ to be session scoped. I could then write a code:  ```java @Component public class MySingletonBean {      @ScopedContainer(scope=""session"")     private List dataForSession;      public List getStrings() {         return dataForSession;     }     ... } ```  A work around for this feature is creating a generic bean for every scope and using proxy to inject, but I think we could all at some point make use of some feature like this.   --- No further details from [SPR-16971](https://jira.spring.io/browse/SPR-16971?redirect=false)","open","in: core,","spring-projects-issues","2018-06-24T17:53:25Z","2019-01-11T16:08:43Z"
"","21166","FactoryBeanRegistrySupport atomicity issues [SPR-16625]","**[László Magyar](https://jira.spring.io/secure/ViewProfile.jspa?name=magyarl)** opened **[SPR-16625](https://jira.spring.io/browse/SPR-16625?redirect=false)** and commented  Within org.springframework.beans.factory.support.FactoryBeanRegistrySupport found some issues with atomic operation. Please check PR.  ---  **Affects:** 4.3.14, 5.0.4  **Issue Links:** - #21119 SimpleAliasRegistry registerAlias not atomic - #21161 Consistent thread-safe iteration in DefaultSingletonBeanRegistry - #21168 Address race condition within spring that causes about-to-be-created-bean exceptions  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1749  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","in: core,","spring-projects-issues","2018-03-22T19:55:30Z","2019-01-11T15:11:22Z"
"","21161","Consistent thread-safe iteration in DefaultSingletonBeanRegistry [SPR-16620]","**[László Magyar](https://jira.spring.io/secure/ViewProfile.jspa?name=magyarl)** opened **[SPR-16620](https://jira.spring.io/browse/SPR-16620?redirect=false)** and commented  Refactor concurrency within org.springframework.beans.factory.support.DefaultSingletonBeanRegistry  ---  **Affects:** 4.3.14, 5.0.4  **Issue Links:** - #21166 FactoryBeanRegistrySupport atomicity issues  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1745  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","in: core,","spring-projects-issues","2018-03-20T23:45:51Z","2019-01-11T15:11:06Z"
"","21881","AnnotationMetadata.getAnnotationAttributes inconsistency for empty array in ASM implementation [SPR-17347]","**[LutherWest](https://jira.spring.io/secure/ViewProfile.jspa?name=lutherwest)** opened **[SPR-17347](https://jira.spring.io/browse/SPR-17347?redirect=false)** and commented  Different implementations of `AnnotationMetadata` provides different annotation attributes. Currently, it makes `ImportBeanDefinitionRegistrar` inconsistent due to provided `AnnotationMetadata` in `registerBeanDefinitions(...)` method.     For the test case below, `StandardAnnotationMetadata` will return an empty `String` array (as expected). But `AnnotationMetadataReadingVisitor` will return `Hello world!`.     Please, consider the following test case:  ```java @SpringBootTest(classes = ClassAnnotationMetadataTest.class) @ClassAnnotationMetadataTest.SimpleAnnotation(arrayProperty = {}) // force emptiness @RunWith(SpringRunner.class) public class ClassAnnotationMetadataTest {      @Autowired     private ResourceLoader resourceLoader;      private MetadataReaderFactory metadataReaderFactory;      @Before     public void setup() {         this.metadataReaderFactory = new CachingMetadataReaderFactory(resourceLoader);     }      @Test     public void annotationMetadataResultInconsistency() throws IOException {         AnnotationMetadata meta1 = new StandardAnnotationMetadata(ClassAnnotationMetadataTest.class);         AnnotationMetadata meta2 = metadataReaderFactory.getMetadataReader(ClassAnnotationMetadataTest.class.getName())                 .getAnnotationMetadata();          Assertions.assertThat(meta1)                 .isInstanceOf(StandardAnnotationMetadata.class)                 .extracting(meta -> meta.getAnnotationAttributes(SimpleAnnotation.class.getName()))                 .containsAnyOf(entry(""arrayProperty"", new String[]{ }));         Assertions.assertThat(meta2)                 .isInstanceOf(AnnotationMetadataReadingVisitor.class)                 .extracting(meta -> meta.getAnnotationAttributes(SimpleAnnotation.class.getName()))                 .containsAnyOf(entry(""arrayProperty"", new String[]{ }));     }      @Retention(RetentionPolicy.RUNTIME)     @Target(ElementType.TYPE)     public @interface SimpleAnnotation {         String[] arrayProperty() default ""Hello world!"";     } } ```     **A bit more details, which I can found:**  https://github.com/spring-projects/spring-framework/blob/master/spring-core/src/main/java/org/springframework/core/type/classreading/RecursiveAnnotationAttributesVisitor.java#L46  This line will trigger registration of default values for annotation.  For given test case, explicitly specified empty array will be treated as absence of value (associated AnnotationAttributes object won't contain 'arrayProperty' value) and default one will be picked up.     **Finally**  Is it expected behavior?  ---  **Affects:** 5.0.7  **Issue Links:** - #21584 AnnotationMetadataReadingVisitor.getMetaAnnotationTypes(String) may return null but it is not marked `@Nullable`  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/53430760f34f7326213637710a39f1924dd52797, https://github.com/spring-projects/spring-framework/commit/83909e6e1e1c70090ebdbb791bf9a8a21e901430  **Backported to:** [5.0.10](https://github.com/spring-projects/spring-framework/milestone/191?closed=1)","closed","in: core,","spring-projects-issues","2018-10-05T13:42:08Z","2019-01-13T04:23:40Z"
"","21236","ClassCastException in TestDispatcherServlet [SPR-16695]","**[Lukas Krecan](https://jira.spring.io/secure/ViewProfile.jspa?name=dart0)** opened **[SPR-16695](https://jira.spring.io/browse/SPR-16695?redirect=false)** and commented  `ClassCastException` when testing async endpoint using Spring Boot 1.5.11 `@SpringBootTest(webEnvironment = RANDOM_PORT)` with Spring Security.  Apparently, Spring Security wraps `MockAsyncContext` which causes `TestDispatcherServlet` to fail.  ``` java.lang.ClassCastException: org.springframework.security.web.servletapi.HttpServlet3RequestFactory$SecurityContextAsyncContext cannot be cast to org.springframework.mock.web.MockAsyncContext  	at org.springframework.test.web.servlet.TestDispatcherServlet.initAsyncDispatchLatch(TestDispatcherServlet.java:90) 	at org.springframework.test.web.servlet.TestDispatcherServlet.service(TestDispatcherServlet.java:68) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790) 	at org.springframework.mock.web.MockFilterChain$ServletFilterProxy.doFilter(MockFilterChain.java:160) 	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:127) 	at org.springframework.boot.web.filter.ApplicationContextHeaderFilter.doFilterInternal(ApplicationContextHeaderFilter.java:55) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:127) 	at org.springframework.boot.actuate.trace.WebRequestTraceFilter.doFilterInternal(WebRequestTraceFilter.java:111) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:127) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317) 	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127) 	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) 	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) 	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ```  ---  **Affects:** 4.3.15  **Issue Links:** - #21239 ClassCastException in MockMvc when testing async calls with Spring Security (_**""is duplicated by""**_) - #21189 Concurrent result may be missed due to a race condition in MockMvc - #21887 MockAsyncContext not found. Did request wrapper not delegate startAsync?  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7a896d7d80a9bdbbbbe5f987c3f79c7578cbb66c, https://github.com/spring-projects/spring-framework/commit/6deee3e8180e3b4f0c775ff27b81ee6b5728ac90, https://github.com/spring-projects/spring-framework/commit/313308208e857c5f4e56be8d50c76065ed59cdc2  **Backported to:** [4.3.16](https://github.com/spring-projects/spring-framework/milestone/165?closed=1)  1 votes, 7 watchers","closed","type: bug,","spring-projects-issues","2018-04-06T06:29:26Z","2019-01-11T15:02:30Z"
"","19476","Add WebSocket support to WebFlux Functional API (and Kotlin DSL) [SPR-16770]","**[Lucas](https://jira.spring.io/secure/ViewProfile.jspa?name=lucasvalenteds)** opened **[SPR-16770](https://jira.spring.io/browse/SPR-16770?redirect=false)** and commented  Allows to implement WebSockets without annotations via WebFlux Functional DSL.  It seems that only HTTP requests can be handled by the router { } block at the moment, but it would be nice to support WS too.   ---  **Reference URL:** https://kotlinlang.slack.com/archives/C0B8ZTWE4/p1524600160000590","open","type: enhancement,","spring-projects-issues","2018-04-25T15:18:49Z","2018-12-13T12:53:05Z"
"","21634","SimpleJdbcInsert doesn't support ""keyword"" column  [SPR-17097]","**[lmtoo](https://jira.spring.io/secure/ViewProfile.jspa?name=lmtoo)** opened **[SPR-17097](https://jira.spring.io/browse/SPR-17097?redirect=false)** and commented  I have a table, defined as follows:  ```sql create table im.t_process_instance_attributescreate table im.t_process_instance_attributes( ownerId int default '0' not null, `key` varchar(50) default '' not null, value varchar(200) null, primary key (ownerId, `key`)); ```  While `SimpleJdbcInsert` generated insert sql is:  ``` INSERT INTO t_process_instance_attributes (ownerId, key, value) VALUES(?, ?, ?) ```   Key column doesn't have escape symbol, and `BadSqlGrammarException` is thrown.  --- No further details from [SPR-17097](https://jira.spring.io/browse/SPR-17097?redirect=false)","closed","status: duplicate,","spring-projects-issues","2018-07-27T08:24:55Z","2019-04-14T14:10:25Z"
"","21830","Fallback for default persistence unit root location if classpath root is unresolvable [SPR-17297]","**[Liu Jichun](https://jira.spring.io/secure/ViewProfile.jspa?name=jliu666)** opened **[SPR-17297](https://jira.spring.io/browse/SPR-17297?redirect=false)** and commented   ---  **Affects:** 5.0.9, 5.1 GA  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/14279","open","type: enhancement,","spring-projects-issues","2018-09-23T13:28:17Z","2018-10-12T08:30:55Z"
"","21751","Provide fine-grained configuration support for HTTP message converters created in WebMvcConfigurationSupport#addDefaultHttpMessageConverters [SPR-17218]","**[lgoldstein](https://jira.spring.io/secure/ViewProfile.jspa?name=lgoldstein1)** opened **[SPR-17218](https://jira.spring.io/browse/SPR-17218?redirect=false)** and commented  The current code creates and initializes said converters without providing the user any way to intervene and modify the defaults. E.g., provide some external `ObjectMapper` to the `MappingJackson2HttpMessageConverter`, modify the default charset of `StringHttpMessageConverter` etc... The only recourse currently available is to override `extendMessageConverters`, somehow detect the converter(s) of interest and re-initialize them - potentially repeating already existing code ([a.k.a. the D.R.Y. principle](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself)). I propose the following (IMO simple) feature - add a `preConfigureDefaultHttpMessageConverter` method that allows users to re-configure the initial converter - e.g.:  ```java  // if returns null then discard the converter protected > C preConfigureDefaultHttpMessageConverter(C converter, ApplicationContext context) {     return converter;    // by default do nothing }  protected > C addDefaultHttpMessageConverter(         List> messageConverters, C converter, ApplicationContext context) {     converter = preConfigureDefaultHttpMessageConverter(converter, context);     if (converter != null) {         messageConverters.add(converter);     }     return converter;    // echo the effective converter }  protected final void addDefaultHttpMessageConverters(List> messageConverters) {     StringHttpMessageConverter stringHttpMessageConverter = new StringHttpMessageConverter();     stringHttpMessageConverter.setWriteAcceptCharset(false);  // see SPR-7316     addDefaultHttpMessageConverter(messageConverters, new ByteArrayHttpMessageConverter(), applicationContext);     addDefaultHttpMessageConverter(messageConverters, stringHttpMessageConverter, applicationContext);     ...etc... } ```    ---  **Affects:** 5.0.8","closed","type: enhancement,","spring-projects-issues","2018-08-27T07:51:35Z","2019-01-29T16:24:30Z"
"","21721","Expose InterfaceTypeFilter and AllTypeFilter classes as public [SPR-17186]","**[lgoldstein](https://jira.spring.io/secure/ViewProfile.jspa?name=lgoldstein1)** opened **[SPR-17186](https://jira.spring.io/browse/SPR-17186?redirect=false)** and commented  When scanning for components one needs to provide `TypeFilter`-s for including/excluding candidates. There are currently 2 useful implementations that are defined as `private` classes with `public` constructors - namely `org.springframework.data.repository.config.RepositoryComponentProvider.InterfaceTypeFilter` and `org.springframework.data.repository.config.RepositoryComponentProvider.AllTypeFilter`. After examining their code there does not seem to be any special reason for ""hiding"" them - especially since they are so useful. I propose making them `public` and perhaps moving them to their own class file instead of being inner classes. This should pose no backward compatibility issues since existing code does not ""see"" these classes anyway.   ---  **Affects:** 5.0.8  **Issue Links:** - [DATACMNS-1372](https://jira.spring.io/browse/DATACMNS-1372) Expose InterfaceTypeFilter and AllTypeFilter classes as public (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2018-08-15T10:37:06Z","2018-08-15T10:47:10Z"
"","21316","ResourceBundleMessageSource should avoid ResourceBundle.Control on Jigsaw [SPR-16776]","**[Leonardo Zanivan](https://jira.spring.io/secure/ViewProfile.jspa?name=panga)** opened **[SPR-16776](https://jira.spring.io/browse/SPR-16776?redirect=false)** and commented  ResourceBundleMessageSource broken when using Java 9 module system.  Using a custom ResourceBundle.Control isn't supported by Java 9 Module system.  Strack trace:  ```java java.lang.UnsupportedOperationException: ResourceBundle.Control not supported in named modulesjava.lang.UnsupportedOperationException: ResourceBundle.Control not supported in named modules at java.base/java.util.ResourceBundle.checkNamedModule(ResourceBundle.java:1547) at java.base/java.util.ResourceBundle.getBundle(ResourceBundle.java:1508) at spring.context@5.0.5.RELEASE/org.springframework.context.support.ResourceBundleMessageSource.doGetBundle(ResourceBundleMessageSource.java:223) at spring.context@5.0.5.RELEASE/org.springframework.context.support.ResourceBundleMessageSource.getResourceBundle(ResourceBundleMessageSource.java:189) at spring.context@5.0.5.RELEASE/org.springframework.context.support.ResourceBundleMessageSource.resolveCodeWithoutArguments(ResourceBundleMessageSource.java:132) at spring.context@5.0.5.RELEASE/org.springframework.context.support.AbstractMessageSource.getMessageInternal(AbstractMessageSource.java:212) at spring.context@5.0.5.RELEASE/org.springframework.context.support.AbstractMessageSource.getMessage(AbstractMessageSource.java:169) at spring.context@5.0.5.RELEASE/org.springframework.context.support.AbstractApplicationContext.getMessage(AbstractApplicationContext.java:1276) at spring.webmvc@5.0.5.RELEASE/org.springframework.web.servlet.support.RequestContext.getMessage(RequestContext.java:725) ```  The error is caused by the following line which is using a custom ResourceBundle.Control.  https://github.com/spring-projects/spring-framework/blob/master/spring-context/src/main/java/org/springframework/context/support/ResourceBundleMessageSource.java#L223  **Steps to reproduce:**  Petclinic is the sample ported application to Spring Boot 2.0.1 and Java 9 module system.  1. Clone:  https://github.com/panga/spring-petclinic-java9modules  2. Build with JDK 10:  ```java mvn clean package ```  3. Run application with module-path:  ```java mvn exec:exec ```  _Note: mvn spring-boot:run goal will execute in classpath mode, thus the erros doesn't happen._  4. Open browser with url:  [http://localhost:8080/owners?lastName=test](http://localhost:8080/owners?lastName=test)  5. Verify the stack trace in the console.  ---  **Affects:** 5.0.5  **Issue Links:** - #17265 ResourceBundleMessageSource should allow for custom PropertyResourceBundle subclass","closed","in: core,","spring-projects-issues","2018-04-27T01:53:31Z","2019-01-11T16:41:41Z"
"","21869","bodyToMono doesn't work with ServletHttpHandlerAdapter in Undertow [SPR-17335]","**[Leif Åstrand](https://jira.spring.io/secure/ViewProfile.jspa?name=lastrand)** opened **[SPR-17335](https://jira.spring.io/browse/SPR-17335?redirect=false)** and commented  When using ServletHttpHandlerAdapter to deploy a RouterFunction as part of a traditional servlet application, any use of bodyToMono will cause an IllegalStateException if the application is run in Undertow. The same application works nicely in at least Jetty and Tomcat.  The problem disappears if the handler function is changed to use a synchronous Mono (i.e. Mono.just(""Something"")) or some other asynchronous Mono (e.g. Mono.delay).  To reproduce, run the attached application using ""mvn spring-boot:run"", browse to http://localhost:8080/ and click the Echo button.  Using UndertowHttpHandlerAdapter is not an alternative in this case since I need a generic servlet that can be included in any web application.  The exception looks like  ```java java.lang.IllegalStateException: UT000146: HttpServerExchange cannot have both async IO resumed and dispatch() called in the same cyclejava.lang.IllegalStateException: UT000146: HttpServerExchange cannot have both async IO resumed and dispatch() called in the same cycle at io.undertow.server.HttpServerExchange$ReadDispatchChannel.resumeReads(HttpServerExchange.java:2131) ~[undertow-core-1.4.25.Final.jar:1.4.25.Final] at io.undertow.servlet.spec.ServletInputStreamImpl.isReady(ServletInputStreamImpl.java:104) ~[undertow-servlet-1.4.25.Final.jar:1.4.25.Final] at org.springframework.http.server.reactive.ServletServerHttpRequest$RequestBodyPublisher.checkOnDataAvailable(ServletServerHttpRequest.java:268) ~[spring-web-5.0.9.RELEASE.jar:5.0.9.RELEASE] at org.springframework.http.server.reactive.AbstractListenerReadPublisher.changeToDemandState(AbstractListenerReadPublisher.java:181) ~[spring-web-5.0.9.RELEASE.jar:5.0.9.RELEASE] at org.springframework.http.server.reactive.AbstractListenerReadPublisher.access$900(AbstractListenerReadPublisher.java:47) ~[spring-web-5.0.9.RELEASE.jar:5.0.9.RELEASE] at org.springframework.http.server.reactive.AbstractListenerReadPublisher$State$2.request(AbstractListenerReadPublisher.java:284) ~[spring-web-5.0.9.RELEASE.jar:5.0.9.RELEASE] at org.springframework.http.server.reactive.AbstractListenerReadPublisher$ReadSubscription.request(AbstractListenerReadPublisher.java:202) ~[spring-web-5.0.9.RELEASE.jar:5.0.9.RELEASE] at reactor.core.publisher.MonoCollectList$MonoBufferAllSubscriber.onSubscribe(MonoCollectList.java:90) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at org.springframework.http.server.reactive.AbstractListenerReadPublisher$State$1.subscribe(AbstractListenerReadPublisher.java:243) ~[spring-web-5.0.9.RELEASE.jar:5.0.9.RELEASE] at org.springframework.http.server.reactive.AbstractListenerReadPublisher.subscribe(AbstractListenerReadPublisher.java:72) ~[spring-web-5.0.9.RELEASE.jar:5.0.9.RELEASE] at reactor.core.publisher.FluxSource.subscribe(FluxSource.java:52) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.MonoCollectList.subscribe(MonoCollectList.java:59) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:71) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.MonoFilterFuseable.subscribe(MonoFilterFuseable.java:47) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:59) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:59) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.FluxSourceMonoFuseable.subscribe(FluxSourceMonoFuseable.java:38) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.FluxMapFuseable.subscribe(FluxMapFuseable.java:63) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.MonoNext.subscribe(MonoNext.java:40) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.MonoDefaultIfEmpty.subscribe(MonoDefaultIfEmpty.java:37) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150) [reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1083) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:108) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1640) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:532) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:149) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:532) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.MonoCallableOnAssembly.subscribe(MonoCallableOnAssembly.java:82) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.MonoMap.subscribe(MonoMap.java:55) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150) [reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1640) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:532) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:68) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:532) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:103) [reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onSubscribe(FluxDefaultIfEmpty.java:82) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.MonoCallableOnAssembly.subscribe(MonoCallableOnAssembly.java:82) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.MonoDefaultIfEmpty.subscribe(MonoDefaultIfEmpty.java:37) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.Mono.subscribe(Mono.java:3088) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:172) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at reactor.core.publisher.Mono.subscribe(Mono.java:3088) ~[reactor-core-3.1.9.RELEASE.jar:3.1.9.RELEASE] at org.springframework.http.server.reactive.ServletHttpHandlerAdapter.service(ServletHttpHandlerAdapter.java:192) ~[spring-web-5.0.9.RELEASE.jar:5.0.9.RELEASE] at io.undertow.servlet.handlers.ServletHandler.handleRequest(ServletHandler.java:74) ~[undertow-servlet-1.4.25.Final.jar:1.4.25.Final] at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:129) ~[undertow-servlet-1.4.25.Final.jar:1.4.25.Final] at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-5.0.9.RELEASE.jar:5.0.9.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.0.9.RELEASE.jar:5.0.9.RELEASE] at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61) ~[undertow-servlet-1.4.25.Final.jar:1.4.25.Final] at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131) ~[undertow-servlet-1.4.25.Final.jar:1.4.25.Final] at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109) ~[spring-web-5.0.9.RELEASE.jar:5.0.9.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.0.9.RELEASE.jar:5.0.9.RELEASE] at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61) ~[undertow-servlet-1.4.25.Final.jar:1.4.25.Final] at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131) ~[undertow-servlet-1.4.25.Final.jar:1.4.25.Final] at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93) ~[spring-web-5.0.9.RELEASE.jar:5.0.9.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.0.9.RELEASE.jar:5.0.9.RELEASE] at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61) ~[undertow-servlet-1.4.25.Final.jar:1.4.25.Final] at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131) ~[undertow-servlet-1.4.25.Final.jar:1.4.25.Final] at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200) ~[spring-web-5.0.9.RELEASE.jar:5.0.9.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.0.9.RELEASE.jar:5.0.9.RELEASE] at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61) ~[undertow-servlet-1.4.25.Final.jar:1.4.25.Final] at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131) ~[undertow-servlet-1.4.25.Final.jar:1.4.25.Final] at io.undertow.servlet.handlers.FilterHandler.handleRequest(FilterHandler.java:84) ~[undertow-servlet-1.4.25.Final.jar:1.4.25.Final] at io.undertow.servlet.handlers.security.ServletSecurityRoleHandler.handleRequest(ServletSecurityRoleHandler.java:62) ~[undertow-servlet-1.4.25.Final.jar:1.4.25.Final] at io.undertow.servlet.handlers.ServletChain$1.handleRequest(ServletChain.java:64) ~[undertow-servlet-1.4.25.Final.jar:1.4.25.Final] at io.undertow.servlet.handlers.ServletDispatchingHandler.handleRequest(ServletDispatchingHandler.java:36) ~[undertow-servlet-1.4.25.Final.jar:1.4.25.Final] at io.undertow.servlet.handlers.security.SSLInformationAssociationHandler.handleRequest(SSLInformationAssociationHandler.java:132) ~[undertow-servlet-1.4.25.Final.jar:1.4.25.Final] at io.undertow.servlet.handlers.security.ServletAuthenticationCallHandler.handleRequest(ServletAuthenticationCallHandler.java:57) ~[undertow-servlet-1.4.25.Final.jar:1.4.25.Final] at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43) ~[undertow-core-1.4.25.Final.jar:1.4.25.Final] at io.undertow.security.handlers.AbstractConfidentialityHandler.handleRequest(AbstractConfidentialityHandler.java:46) ~[undertow-core-1.4.25.Final.jar:1.4.25.Final] at io.undertow.servlet.handlers.security.ServletConfidentialityConstraintHandler.handleRequest(ServletConfidentialityConstraintHandler.java:64) ~[undertow-servlet-1.4.25.Final.jar:1.4.25.Final] at io.undertow.security.handlers.AuthenticationMechanismsHandler.handleRequest(AuthenticationMechanismsHandler.java:60) ~[undertow-core-1.4.25.Final.jar:1.4.25.Final] at io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler.handleRequest(CachedAuthenticatedSessionHandler.java:77) ~[undertow-servlet-1.4.25.Final.jar:1.4.25.Final] at io.undertow.security.handlers.AbstractSecurityContextAssociationHandler.handleRequest(AbstractSecurityContextAssociationHandler.java:43) ~[undertow-core-1.4.25.Final.jar:1.4.25.Final] at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43) ~[undertow-core-1.4.25.Final.jar:1.4.25.Final] at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43) ~[undertow-core-1.4.25.Final.jar:1.4.25.Final] at io.undertow.servlet.handlers.SessionRestoringHandler.handleRequest(SessionRestoringHandler.java:119) ~[undertow-servlet-1.4.25.Final.jar:1.4.25.Final] at io.undertow.servlet.handlers.ServletInitialHandler.handleFirstRequest(ServletInitialHandler.java:292) ~[undertow-servlet-1.4.25.Final.jar:1.4.25.Final] at io.undertow.servlet.handlers.ServletInitialHandler.access$100(ServletInitialHandler.java:81) ~[undertow-servlet-1.4.25.Final.jar:1.4.25.Final] at io.undertow.servlet.handlers.ServletInitialHandler$2.call(ServletInitialHandler.java:138) ~[undertow-servlet-1.4.25.Final.jar:1.4.25.Final] at io.undertow.servlet.handlers.ServletInitialHandler$2.call(ServletInitialHandler.java:135) ~[undertow-servlet-1.4.25.Final.jar:1.4.25.Final] at io.undertow.servlet.core.ServletRequestContextThreadSetupAction$1.call(ServletRequestContextThreadSetupAction.java:48) ~[undertow-servlet-1.4.25.Final.jar:1.4.25.Final] at io.undertow.servlet.core.ContextClassLoaderSetupAction$1.call(ContextClassLoaderSetupAction.java:43) ~[undertow-servlet-1.4.25.Final.jar:1.4.25.Final] at io.undertow.servlet.handlers.ServletInitialHandler.dispatchRequest(ServletInitialHandler.java:272) ~[undertow-servlet-1.4.25.Final.jar:1.4.25.Final] at io.undertow.servlet.handlers.ServletInitialHandler.access$000(ServletInitialHandler.java:81) ~[undertow-servlet-1.4.25.Final.jar:1.4.25.Final] at io.undertow.servlet.handlers.ServletInitialHandler$1.handleRequest(ServletInitialHandler.java:104) ~[undertow-servlet-1.4.25.Final.jar:1.4.25.Final] at io.undertow.server.Connectors.executeRootHandler(Connectors.java:336) ~[undertow-core-1.4.25.Final.jar:1.4.25.Final] at io.undertow.server.HttpServerExchange$1.run(HttpServerExchange.java:830) ~[undertow-core-1.4.25.Final.jar:1.4.25.Final] at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) ~[na:1.8.0_112] at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) ~[na:1.8.0_112] at java.lang.Thread.run(Thread.java:745) ~[na:1.8.0_112] Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: Assembly trace from producer [reactor.core.publisher.MonoFlatMap] : reactor.core.publisher.Mono.flatMap(Mono.java:2081) org.springframework.web.reactive.function.server.RouterFunctions.lambda$toWebHandler$7(RouterFunctions.java:223) org.springframework.web.server.handler.WebHandlerDecorator.handle(WebHandlerDecorator.java:49) org.springframework.web.server.handler.FilteringWebHandler.handle(FilteringWebHandler.java:62) org.springframework.web.server.handler.WebHandlerDecorator.handle(WebHandlerDecorator.java:49) org.springframework.web.server.handler.ExceptionHandlingWebHandler.handle(ExceptionHandlingWebHandler.java:61) org.springframework.web.server.adapter.HttpWebHandlerAdapter.handle(HttpWebHandlerAdapter.java:184) org.springframework.http.server.reactive.ServletHttpHandlerAdapter.service(ServletHttpHandlerAdapter.java:192) io.undertow.servlet.handlers.ServletHandler.handleRequest(ServletHandler.java:74) io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:129) org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61) io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131) org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109) org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61) io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131) org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93) org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61) io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131) org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200) org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61) io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131) io.undertow.servlet.handlers.FilterHandler.handleRequest(FilterHandler.java:84) io.undertow.servlet.handlers.security.ServletSecurityRoleHandler.handleRequest(ServletSecurityRoleHandler.java:62) io.undertow.servlet.handlers.ServletChain$1.handleRequest(ServletChain.java:64) io.undertow.servlet.handlers.ServletDispatchingHandler.handleRequest(ServletDispatchingHandler.java:36) io.undertow.servlet.handlers.security.SSLInformationAssociationHandler.handleRequest(SSLInformationAssociationHandler.java:132) io.undertow.servlet.handlers.security.ServletAuthenticationCallHandler.handleRequest(ServletAuthenticationCallHandler.java:57) io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43) io.undertow.security.handlers.AbstractConfidentialityHandler.handleRequest(AbstractConfidentialityHandler.java:46) io.undertow.servlet.handlers.security.ServletConfidentialityConstraintHandler.handleRequest(ServletConfidentialityConstraintHandler.java:64) io.undertow.security.handlers.AuthenticationMechanismsHandler.handleRequest(AuthenticationMechanismsHandler.java:60) io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler.handleRequest(CachedAuthenticatedSessionHandler.java:77) io.undertow.security.handlers.AbstractSecurityContextAssociationHandler.handleRequest(AbstractSecurityContextAssociationHandler.java:43) io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43) io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43) io.undertow.servlet.handlers.SessionRestoringHandler.handleRequest(SessionRestoringHandler.java:119) io.undertow.servlet.handlers.ServletInitialHandler.handleFirstRequest(ServletInitialHandler.java:292) io.undertow.servlet.handlers.ServletInitialHandler.access$100(ServletInitialHandler.java:81) io.undertow.servlet.handlers.ServletInitialHandler$2.call(ServletInitialHandler.java:138) io.undertow.servlet.handlers.ServletInitialHandler$2.call(ServletInitialHandler.java:135) io.undertow.servlet.core.ServletRequestContextThreadSetupAction$1.call(ServletRequestContextThreadSetupAction.java:48) io.undertow.servlet.core.ContextClassLoaderSetupAction$1.call(ContextClassLoaderSetupAction.java:43) io.undertow.servlet.handlers.ServletInitialHandler.dispatchRequest(ServletInitialHandler.java:272) io.undertow.servlet.handlers.ServletInitialHandler.access$000(ServletInitialHandler.java:81) io.undertow.servlet.handlers.ServletInitialHandler$1.handleRequest(ServletInitialHandler.java:104) io.undertow.server.Connectors.executeRootHandler(Connectors.java:336) io.undertow.server.HttpServerExchange$1.run(HttpServerExchange.java:830)Error has been observed by the following operator(s): |_ Mono.flatMap(RouterFunctions.java:223) |_ Mono.error(ResponseStatusExceptionHandler.java:57) |_ Mono.onErrorResume(ExceptionHandlingWebHandler.java:68) ```    ---  **Affects:** 5.0.9  **Attachments:** - [undertow-webflux.zip](https://jira.spring.io/secure/attachment/26040/undertow-webflux.zip) (_3.24 kB_)","closed","status: invalid,","spring-projects-issues","2018-10-04T12:00:02Z","2019-01-12T05:18:01Z"
"","21574","CronSequenceGenerator - Friday 13th issue [SPR-17036]","**[Lauri Kimmel](https://jira.spring.io/secure/ViewProfile.jspa?name=laurikimmel)** opened **[SPR-17036](https://jira.spring.io/browse/SPR-17036?redirect=false)** and commented  Unit test below is failing with message `Overflow in day for expression ""0 0 0 13 * FRI""`  ```java     public void testFriday13Failure() {          String cronExpression = ""0 0 0 13 * FRI"";          assertThat(CronSequenceGenerator.isValidExpression(cronExpression), is(true));          CronSequenceGenerator gen = new CronSequenceGenerator(cronExpression);          Instant instant = Instant.parse(""2018-07-13T11:47:14Z"");          gen.next(Date.from(instant));      }  ```  2018-07-13 is Friday 13th; 2019-09-13 is next Friday 13th; there are 427 days between which is exceeding max limit 366 in `CronSequenceGenerator.findNextDay()`.  ---  **Affects:** 4.3.10  **Issue Links:** - #13621 Cron expression with fixed weekday and fixed date may or may not lead to IllegalStateException (runaway search for next trigger)","closed","in: core,","spring-projects-issues","2018-07-13T09:39:39Z","2020-08-03T14:57:20Z"
"","21874","MapMethodArgumentResolver precludes custom argument resolvers with Map and custom annotation [SPR-17340]","**[Laplie](https://jira.spring.io/secure/ViewProfile.jspa?name=anderson)** opened **[SPR-17340](https://jira.spring.io/browse/SPR-17340?redirect=false)** and commented  Spring argument resolvers are listed first in  ```java RequestMappingHandlerAdapter.getDefaultArgumentResolvers() ```  As a result, the built-in argument resolvers always have precedence.  In a controller method such as:     ```java @PostMapping(""/foo"") public String doSomething(@MyCustomAnnotation Map argument) ```     Where ""`@MyCustomAnnotation`"" triggers a custom argument resolver, the custom argument resolver is NEVER used because Spring has a built-in resolver for Map.class     There are 2 possible simple solutions I can think of to this problem: 1. Respect the `@Order` annotation on method resolvers and sort the resolver list 2. Put the custom method resolvers BEFORE the builtin method resolvers.  In the meantime, the workaround that I have to use is not using a Map for my argument         ---  **Affects:** 5.0.6","closed","type: enhancement,","spring-projects-issues","2018-10-04T18:45:05Z","2019-03-19T21:52:55Z"
"","21169","When @DependsOn throws a NoSuchBeanDefinitionException it should include the dependent bean for clarity [SPR-16628]","**[Kyle Anderson](https://jira.spring.io/secure/ViewProfile.jspa?name=kanderson)** opened **[SPR-16628](https://jira.spring.io/browse/SPR-16628?redirect=false)** and commented  When a bean annotated with `@DependsOn` references a bean name that doesn't exist, a NoSuchBeanDefinitionException is thrown.  **Example:**  ``` org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'myMissingBean' available ```  I think this exception can be improved to contain information pertaining to the bean that was annotated with `@DependsOn`.  **Example:**  ``` org.springframework.beans.factory.NoSuchBeanDefinitionException: 'com.example.MyBean' depends on a bean named 'myMissingBean' but it wasn't available ```  This would add a little extra clarity and traceability.   ---  **Affects:** 4.3.14, 5.0.4  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/1751  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","type: enhancement,","spring-projects-issues","2018-03-22T23:58:46Z","2018-04-03T20:34:26Z"
"","21804","FactoryBean registered via BeanDefinitionRegistryPostProcessor does not register servlet Filters [SPR-17271]","**[Krzysztof Slonka](https://jira.spring.io/secure/ViewProfile.jspa?name=krzysztofslonka)** opened **[SPR-17271](https://jira.spring.io/browse/SPR-17271?redirect=false)** and commented  I'm developing a library that creates common filters for WebMvc (Filter class) and for WebFlux (WebFilter class). I have adapters for both of these classes.  I would like to be able to only declare my custom filter class (MyFilter) as a Bean and then have a BeanDefinitionRegistryPostProcessor automatically wrap and create adapters for each class when needed (WebMvc or WebFlux depending on the user needs). I do not want to register a separate adapter bean for every MyFilter instance that I need.  I was able to do this for WebFlux, but creating a BeanDefinitionRegistryPostProcessor for WebMvc adapters seems to not work.  I can't use BeanFactoryPostProcessor and declare adapters as singletons because the initialization will happen before `@Autowired` fields and properties are injected and that will cause NPE.  You can find code for this issue as well as test cases at https://github.com/slonka/webmvc-filter-factory-wrapper   ---  Why is there a difference in how WebFlux / WebMvc registers filters?  How Can I solve this issue for WebMvc?  If I can achieve my goal in a different way I would be happy to do so.  ---  **Affects:** 5.0.5  **Reference URL:** https://github.com/slonka/webmvc-filter-factory-wrapper","closed","type: enhancement,","spring-projects-issues","2018-09-13T09:14:27Z","2019-01-13T04:25:47Z"
"","21734","WebClient's first request is slow [SPR-17200]","**[Krzysztof Slonka](https://jira.spring.io/secure/ViewProfile.jspa?name=krzysztofslonka)** opened **[SPR-17200](https://jira.spring.io/browse/SPR-17200?redirect=false)** and commented  I discovered an issue with first request and shared state in WebClient. In short, the first request takes a lot of time to complete (~300 ms on my machine) compared to the following requests (~5 ms).  The performance compared to RestTemplate is a bit problematic in case of integration tests with WireMock. I described more details in a repository with code examples: https://github.com/slonka/webclient-debug     I'd be grateful for some insights whether this can be improved via configuration or changes to WebClient source code that would initialize static fields eagerly before first request.     Please let me know if I can provide any more information.   ---  **Affects:** 5.0.8  **Reference URL:** https://github.com/slonka/webclient-debug","closed","type: enhancement,","spring-projects-issues","2018-08-21T14:01:15Z","2018-08-29T16:06:34Z"
"","21617","Json serialization / conversion of basic String not quoted [SPR-17080]","**[krodyrobi](https://jira.spring.io/secure/ViewProfile.jspa?name=krodyrobi)** opened **[SPR-17080](https://jira.spring.io/browse/SPR-17080?redirect=false)** and commented  ```java @GetMapping(value = ""/test"", produces = MediaType.APPLICATION_JSON_UTF8_VALUE) public String test() {   return ""test""; }  @GetMapping(value = ""/test2"", produces = MediaType.APPLICATION_JSON_UTF8_VALUE) public Mono test2() {  return Mono.just(""test""); } ```  **Expected:**  Body: ""test""  Headers: application/json;charset=UTF-8  **Actual:**  Body: test  Headers: application/json;charset=UTF-8     **Versions:**  spring-boot 2.0.3.RELEASE + starter-web + starter-webflux Project created through http://start.spring.io/  ---  **Affects:** 5.0.7  **Issue Links:** - #20397 String to JSON conversion does not produce valid JSON (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2018-07-24T14:05:44Z","2019-01-12T16:44:27Z"
"","21744","Fix fragile tests for asynchronous events [SPR-17211]","**[Korovin Anatoliy](https://jira.spring.io/secure/ViewProfile.jspa?name=antkorwin)** opened **[SPR-17211](https://jira.spring.io/browse/SPR-17211?redirect=false)** and commented  I tried to run all tests several times (in the `spring-context` module), and sometimes I got an error, sometimes not.  Some of these errors:  - `org.springframework.scheduling.concurrent.AbstractSchedulingTaskExecutorTests#submitCallableWithGetAfterShutdown` - `org.springframework.scheduling.concurrent.AbstractSchedulingTaskExecutorTests#submitFailingListenableCallable`  I fixed it and also made a refactoring some of async tests..  I will soon create a PR.   ---  **Affects:** 5.1 RC2  **Attachments:** - [1.PNG](https://jira.spring.io/secure/attachment/25991/1.PNG) (_81.11 kB_) - [2.PNG](https://jira.spring.io/secure/attachment/25990/2.PNG) (_23.83 kB_)  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1941, and commits https://github.com/spring-projects/spring-framework/commit/ab086f4225c6e39ad322c162d997981bc27ac5f8","closed","type: task,","spring-projects-issues","2018-08-24T02:58:04Z","2018-09-07T13:48:36Z"
"","21438","LiveBeansView should support double quotes in application context id [SPR-16899]","**[Konstantin Aleev](https://jira.spring.io/secure/ViewProfile.jspa?name=kaleev)** opened **[SPR-16899](https://jira.spring.io/browse/SPR-16899?redirect=false)** and commented  result.append(""{\n\""context\"": \"""").append(context.getId()).append(""\"",\n""); in org.springframework.context.support.LiveBeansView.generateJson(Set\) creates invalid JSON if context id already has double quotes.     The problem could be reproduced by assigning some string with double quotes to 'spring.application.name' in Spring Boot application.  ---  **Affects:** 5.0.6  **Issue Links:** - #18773 LiveBeansView doesn't contain singletons registered programmatically - #21327 LiveBeansView is not really fit for purpose any more","closed","type: enhancement,","spring-projects-issues","2018-06-04T18:05:20Z","2021-02-09T17:23:26Z"
"","21730","Some WebTestClient HeaderAssertions' methods unusable [SPR-17195]","**[Konrad Czajka](https://jira.spring.io/secure/ViewProfile.jspa?name=nte)** opened **[SPR-17195](https://jira.spring.io/browse/SPR-17195?redirect=false)** and commented  [HeaderAssertions::expires(int)](https://github.com/spring-projects/spring-framework/blob/a8fbac8472ffaf5df2aad9cdb0f9c649c9b5b128/spring-test/src/main/java/org/springframework/test/web/reactive/server/HeaderAssertions.java#L184) and [HeaderAssertions::lastModified(int)](https://github.com/spring-projects/spring-framework/blob/a8fbac8472ffaf5df2aad9cdb0f9c649c9b5b128/spring-test/src/main/java/org/springframework/test/web/reactive/server/HeaderAssertions.java#L191) accept integers whereas [HttpHeaders](https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/http/HttpHeaders.java) stores (and return) both headers as longs. As `Object::equals` is used for comparison the methods always fail.  They should either cast incoming values to long before comparing them or become deprecated in favor of ""long"" overloads.  ---  **Issue Links:** - #21729 HeaderAssertions.lastModified/expires takes an int value but it should be long (_**""duplicates""**_)  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1933","closed","status: duplicate,","spring-projects-issues","2018-08-19T08:11:25Z","2019-01-12T16:44:24Z"
"","21811","Notification for db connection acquired when LazyConnectionDataSourceProxy is used [SPR-17278]","**[Keshav Gupta](https://jira.spring.io/secure/ViewProfile.jspa?name=guptakeshav24)** opened **[SPR-17278](https://jira.spring.io/browse/SPR-17278?redirect=false)** and commented  We are using LazyConnectionDataSourceProxy to lazily fetch DB connection. When DB connection is fetched from pool there is no notification fired which can tell that db connection has been acquired. This is really helpful whenever some action needs to be taken on acquiring db connection(eg. logging).  ---  **Issue Links:** - #16195 Add close() method to LazyConnectionDataSourceProxy - #21749 HibernateTransactionManager should lazily acquire JDBC Connection (like HibernateJpaDialect)","open","type: enhancement,","spring-projects-issues","2018-09-17T06:33:53Z","2019-01-11T14:12:46Z"
"","21763","Make org.springframework.jdbc.datasource.DataSourceTransactionManager extendable [SPR-17230]","**[Ken Rune Helland](https://jira.spring.io/secure/ViewProfile.jspa?name=kenh)** opened **[SPR-17230](https://jira.spring.io/browse/SPR-17230?redirect=false)** and commented  ### Make org.springframework.jdbc.datasource.DataSourceTransactionManager extendable  I need to change how this class does begin, commit and rollback transaction due to a legacy sybase database (do ""Begin transaction"" rather than ""Set chained mode on""). Ideally I should be able to extend the class and override doBegin(), doCommit() and doRollback(), but because the inner class DataSourceTransactionObject is private this is not possible.  **Suggjested solution:** Make inner class DataSourceTransactionObject proteced so it is accessible for subclasses.   --- No further details from [SPR-17230](https://jira.spring.io/browse/SPR-17230?redirect=false)","closed","type: enhancement,","spring-projects-issues","2018-08-31T07:46:10Z","2018-09-02T20:09:47Z"
"","21514","SpringBootTest does not work with Java 10/modules [SPR-16976]","**[Keir Lawson](https://jira.spring.io/secure/ViewProfile.jspa?name=keirlawson)** opened **[SPR-16976](https://jira.spring.io/browse/SPR-16976?redirect=false)** and commented  I attempted to port the Spring web testing example at https://github.com/spring-guides/gs-testing-web to Java 10 and modules, however I find when running my tests via Maven that the `@SpringBootTest` annotation is no longer able to locate my application class despite the code working previously before modularisation.I receive the following error when running mvn test  ```java java.lang.IllegalStateException: Unable to find a @SpringBootConfiguration, you need to use @ContextConfiguration or @SpringBootTest(classes=...) with your test ```  Adding the application class explicitly as this message suggests then results in  ```java java.lang.reflect.InaccessibleObjectException: Unable to make field private static java.lang.Object hello.Application$$EnhancerBySpringCGLIB$$d7dfca41.CGLIB$CALLBACK_FILTER accessible: module gs.testing.web does not ""opens hello"" to unnamed module @2fc6f97f ```  The changes I made to the initial repo can be viewed here: https://github.com/spring-guides/gs-testing-web/compare/master...keirlawson:j10_modules   --- No further details from [SPR-16976](https://jira.spring.io/browse/SPR-16976?redirect=false)","closed","status: invalid,","spring-projects-issues","2018-06-26T12:11:29Z","2019-01-12T05:18:38Z"
"","21633","Classpath scanning on inner classes fails against JDK 11 bytecode level [SPR-17096]","**[Kedar Joshi](https://jira.spring.io/secure/ViewProfile.jspa?name=kedarjoshi)** opened **[SPR-17096](https://jira.spring.io/browse/SPR-17096?redirect=false)** and commented  After upgrading to Spring 5.1 RC1 my application started failing with following exception -   ``` Caused by: java.lang.UnsupportedOperationException  at org.springframework.asm.ClassVisitor.visitNestHostExperimental(ClassVisitor.java:156) ~[spring-core-5.1.0.RC1.jar:5.1.0.RC1]  at org.springframework.asm.ClassReader.accept(ClassReader.java:541) ~[spring-core-5.1.0.RC1.jar:5.1.0.RC1]  at org.springframework.asm.ClassReader.accept(ClassReader.java:391) ~[spring-core-5.1.0.RC1.jar:5.1.0.RC1]  at org.springframework.core.type.classreading.SimpleMetadataReader.(SimpleMetadataReader.java:65) ~[spring-core-5.1.0.RC1.jar:5.1.0.RC1]  at org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(SimpleMetadataReaderFactory.java:103) ~[spring-core-5.1.0.RC1.jar:5.1.0.RC1]  at org.springframework.core.type.classreading.CachingMetadataReaderFactory.getMetadataReader(CachingMetadataReaderFactory.java:123) ~[spring-core-5.1.0.RC1.jar:5.1.0.RC1]    ```  Turned out, this is happening when spring tries to process classes which have inner class themselves. e.g.  **in.workingtheory.Application** class has an inner class **FailureGeneration**. Application will not start unless I remove this inner class altogether or remove class **in.workingtheory.Application** from class path scanning.  This is only reproducible on JDK 11 and Spring 5.1 RC1 but works fine on JDK 10.  Sample project for reproducing this issue is attached.  +Environment+  Oracle JDK 11 Build 23 (64 Bit) Spring framework 5.1 RC1  ---  **Affects:** 5.1 RC1  **Attachments:** - [Spring-5.1.zip](https://jira.spring.io/secure/attachment/25787/Spring-5.1.zip) (_5.59 kB_)  **Issue Links:** - #20944 Upgrade to ASM 6.2 - #21640 LocalVariableTableParameterNameDiscoverer runs into UnsupportedOperationException in ClassVisitor.visitNestMemberExperimental() - #20937 Compatibility with JDK 11  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e82efbc7e3739626cd46a924658a29ecbe6c813b","closed","in: core,","spring-projects-issues","2018-07-26T17:14:38Z","2019-01-11T12:45:56Z"
"","21481","Performance degradation in SPEL expression evaluation [SPR-16942]","**[Kanthi Vaidya](https://jira.spring.io/secure/ViewProfile.jspa?name=kvaidya)** opened **[SPR-16942](https://jira.spring.io/browse/SPR-16942?redirect=false)** and commented  We are planning to move from Spring 4.3.6 to Spring 5. We noticed a considerable dip in performance. About 50% degradation.  #21421 talks about a specific hot spot. Please look at attached benchmarks in that JIRA.        Juergen, I saw your code changes for caching the SortedMethods. We don't benefit much if you don't make your ConcurrentHashMap of sorted methods  a static variable.  Even after making the ConcurrentHashMap a static variable, we still don't get back the original performance of the prior spring versions. It definitely helps of course.  This is just one hotspot. More benchmarking and profiling is needed to identify other hot spots. And it probably makes sense to add a test case to the CI infrastructure to catch any such degradations.  This performance degradation, is preventing us from migration to Spring 5.     ---  **Affects:** 5.0.7  **Issue Links:** - #21130 Support for SimpleEvaluationContext in SpEL - #21421 ReflectivePropertyAccessor should cache sorted methods  0 votes, 5 watchers","open","in: core,","spring-projects-issues","2018-06-14T18:43:03Z","2020-01-10T11:52:14Z"
"","21736","Optimize for Flux to/from Mono conversions by Reactor [SPR-17203]","**[Kamil](https://jira.spring.io/secure/ViewProfile.jspa?name=eximius)** opened **[SPR-17203](https://jira.spring.io/browse/SPR-17203?redirect=false)** and commented  I'm providing test case  If you run `$ ./gradlew test` then test will fail with:  ```java java.lang.AssertionError: PublisherProbe should not have been cancelled but it was 	at reactor.test.publisher.PublisherProbe.assertWasNotCancelled(PublisherProbe.java:73) 	at com.example.demo.MyControllerTests.shouldAllowRetrieval(MyControllerTests.java:47) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) 	at java.lang.reflect.Method.invoke(Unknown Source) 	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:436) 	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:115)  ```  but if you edit `build.gradle` file and change Spring version back to `5.0.7.RELEASE `(comment line 18) then test will pass.     It is believed that this commit broke it: https://github.com/spring-projects/spring-framework/commit/d1c9401dc23a6a2eadb16a171824f25cd08bd98e#diff-5d32a8109e4c3e46a7a012dfca5c0384R109   ---  **Affects:** 5.0.8  **Attachments:** - [spring_reactor_bug.zip](https://jira.spring.io/secure/attachment/25989/spring_reactor_bug.zip) (_58.10 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1bdbc7bdef75709bec7abc3972db23c8211b17d1  1 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2018-08-22T10:16:50Z","2018-09-07T13:48:36Z"
"","21278","Better support for testing JSON [SPR-16737]","**[Kamil](https://jira.spring.io/secure/ViewProfile.jspa?name=eximius)** opened **[SPR-16737](https://jira.spring.io/browse/SPR-16737?redirect=false)** and commented  Reactive `WebTestClient` is using [JsonPath](https://github.com/json-path/JsonPath) assertions like: ``` jsonPath(""$[0]['gender']"")  ```but writing this as Strings is really cumbersome, and JSON is rather common thing to return in REST controllers.  It would be so good, if you could provide ""AssertJ like"" fluent API to test JSONs... ```  ---  **Issue Links:** - #21270 WebTestClient does not provide Hamcrest Matcher assertions for JSONPath  1 votes, 2 watchers","closed","in: test,","spring-projects-issues","2018-04-17T16:05:13Z","2019-01-11T16:44:37Z"
"","21588","`@RequestParam` throws `java.lang.NullPointerException: The mapper returned a null value.` [SPR-17050]","**[Kamil Bar](https://jira.spring.io/secure/ViewProfile.jspa?name=nevehanter)** opened **[SPR-17050](https://jira.spring.io/browse/SPR-17050?redirect=false)** and commented  The reactive controller method with request parameter fails with   ``` java.lang.NullPointerException: The mapper returned a null value. ```  and returns HTTP 500 instead of the HTTP 400 with some conversion error message when called with empty parameter value, i.e.   ``` integer?parameter= ```  or  ``` boolean?parameter= ```     I've pushed [sample project](https://github.com/NeveHanter/spring_boot_request_param_bug) using spring-boot `2.0.3.RELEASE` with failing JUnit 5 tests for integer and boolean types of parameter and one successful test with string type parameter.  I've posted this bug also on spring-boot issue tracker https://github.com/spring-projects/spring-boot/issues/13786 but was redirected here.   ---  **Affects:** 5.0.7  **Reference URL:** https://github.com/NeveHanter/spring_boot_request_param_bug  3 votes, 3 watchers","closed","type: bug,","spring-projects-issues","2018-07-17T08:30:18Z","2018-07-26T08:09:34Z"
"","21489","spring.ftl does not support turning off escaping for some macros on Spring 5 [SPR-16951]","**[Kaj Hejer](https://jira.spring.io/secure/ViewProfile.jspa?name=kajh)** opened **[SPR-16951](https://jira.spring.io/browse/SPR-16951?redirect=false)** and commented  After updating to Spring 5 all output from Spring freemarker macros are escaped. In <`@spring`.message> the message is escaped and in <`@spring`.formRadioButtons> the separator attribute is escaped f.x. ""\"".  This has been discussed at https://stackoverflow.com/questions/50871832/spring-5-and-escaping-in-springs-freemarker-macros  Config:  ```java @Bean public FreeMarkerConfigurer freeMarkerConfigurer() {     FreeMarkerConfigurer config = new FreeMarkerConfigurer();     config.setTemplateLoaderPath(""/WEB-INF/templates/ftl/"");         Properties props = new Properties();     props.put(""template_update_delay"", getFreemarkerUpdateDelay());     props.put(""template_exception_handler"", getFreemarkerExceptionHandler());     props.put(""url_escaping_charset"", WebConstants.CHAR_SET_UTF_8);     config.setFreemarkerSettings(props);     config.setDefaultEncoding(WebConstants.CHAR_SET_UTF_8);     return config; } ```  We use Freemarker 2.3.28 and Spring 5.0.7.RELEASE  ---  **Affects:** 5.0.7  **Issue Links:** - #19306 spring.ftl doesn't work on freemarker 2.3.24+'s auto escaping feature  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/08e1c8cfafaf67bbb8add6e219fd2627fbf6319a, https://github.com/spring-projects/spring-framework/commit/75f26eec9818b1b65ef5a9b67049c4592d598198","closed","type: regression,","spring-projects-issues","2018-06-18T13:04:37Z","2019-01-11T16:10:49Z"
"","21537","Map injection fails to find bean produced with @Bean when additional method with same name exists [SPR-16999]","**[Kai Burjack](https://jira.spring.io/secure/ViewProfile.jspa?name=kaiburjack)** opened **[SPR-16999](https://jira.spring.io/browse/SPR-16999?redirect=false)** and commented  I wanted to use the Map beans injection to quickly iterate over all beans implementing a given type and also to index into a bean via its name. However, we just identified a case that does not work (but probably should).  The case is, when a `@Configuration` class including a `@Bean` factory method also declares another (non-`@Bean`) method with the same name (but of course different parameter types) then the Map injection won't find the bean defined by the `@Bean` method.  Here is a test case:   ```java @Configuration public class Test {   @Autowired   private Map testBeans;   @Bean   Runnable testBean() {     return () -> {};   }   private void testBean(boolean param) {   }   public static void main(String[] args) {     new AnnotationConfigApplicationContext(Test.class);   } } ```  This fails with injection failure of ""testBeans"" because Spring could not find any beans implementing Runnable. That, however, is not true. Since when removing the Map property and instead performing a manual lookup on the context via getBean(""testBean"") or even getBean(Runnable.class), it will find the bean.   When removing the private void testBean(boolean) method, Map injection works again.   ---  **Affects:** 4.3.18, 5.0.7  **Backported to:** [4.3.19](https://github.com/spring-projects/spring-framework/milestone/168?closed=1)","closed","in: core,","spring-projects-issues","2018-07-03T09:46:51Z","2018-07-26T08:09:32Z"
"","21229","Reduce log verbosity on server-side after client unsubscribes from SSE stream [SPR-16688]","**[Kacper Klepacz](https://jira.spring.io/secure/ViewProfile.jspa?name=ilovkatie)** opened **[SPR-16688](https://jira.spring.io/browse/SPR-16688?redirect=false)** and commented  Cancelling SSE subscription on client side (e.g.: when u are not interested in it anymore) via Disposable.dispose() is causing following error on server side:  ```java 2018-04-10 15:17:57.402 ERROR 8220 --- [ctor-http-nio-4] o.s.w.s.adapter.HttpWebHandlerAdapter    : Unhandled failure: An established connection was aborted by the software in your host machine, response already set (status=200) 2018-04-10 15:17:57.411 ERROR 8220 --- [ctor-http-nio-4] o.s.h.s.r.ReactorHttpHandlerAdapter      : Handling completed with error  java.io.IOException: An established connection was aborted by the software in your host machine 	at sun.nio.ch.SocketDispatcher.writev0(Native Method) ~[na:1.8.0_161] 	at sun.nio.ch.SocketDispatcher.writev(SocketDispatcher.java:55) ~[na:1.8.0_161] 	at sun.nio.ch.IOUtil.write(IOUtil.java:148) ~[na:1.8.0_161] 	at sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:504) ~[na:1.8.0_161] 	at io.netty.channel.socket.nio.NioSocketChannel.doWrite(NioSocketChannel.java:418) ~[netty-transport-4.1.22.Final.jar:4.1.22.Final] 	at io.netty.channel.AbstractChannel$AbstractUnsafe.flush0(AbstractChannel.java:934) ~[netty-transport-4.1.22.Final.jar:4.1.22.Final] 	at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.flush0(AbstractNioChannel.java:360) ~[netty-transport-4.1.22.Final.jar:4.1.22.Final] 	at io.netty.channel.AbstractChannel$AbstractUnsafe.flush(AbstractChannel.java:901) ~[netty-transport-4.1.22.Final.jar:4.1.22.Final] 	at io.netty.channel.DefaultChannelPipeline$HeadContext.flush(DefaultChannelPipeline.java:1376) ~[netty-transport-4.1.22.Final.jar:4.1.22.Final] 	at io.netty.channel.AbstractChannelHandlerContext.invokeFlush0(AbstractChannelHandlerContext.java:776) ~[netty-transport-4.1.22.Final.jar:4.1.22.Final] 	at io.netty.channel.AbstractChannelHandlerContext.invokeFlush(AbstractChannelHandlerContext.java:768) ~[netty-transport-4.1.22.Final.jar:4.1.22.Final] 	at io.netty.channel.AbstractChannelHandlerContext.flush(AbstractChannelHandlerContext.java:749) ~[netty-transport-4.1.22.Final.jar:4.1.22.Final] 	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.flush(CombinedChannelDuplexHandler.java:533) ~[netty-transport-4.1.22.Final.jar:4.1.22.Final] 	at io.netty.channel.ChannelOutboundHandlerAdapter.flush(ChannelOutboundHandlerAdapter.java:115) ~[netty-transport-4.1.22.Final.jar:4.1.22.Final] 	at io.netty.channel.CombinedChannelDuplexHandler.flush(CombinedChannelDuplexHandler.java:358) ~[netty-transport-4.1.22.Final.jar:4.1.22.Final] 	at io.netty.channel.AbstractChannelHandlerContext.invokeFlush0(AbstractChannelHandlerContext.java:776) ~[netty-transport-4.1.22.Final.jar:4.1.22.Final] 	at io.netty.channel.AbstractChannelHandlerContext.invokeFlush(AbstractChannelHandlerContext.java:768) ~[netty-transport-4.1.22.Final.jar:4.1.22.Final] 	at io.netty.channel.AbstractChannelHandlerContext.flush(AbstractChannelHandlerContext.java:749) ~[netty-transport-4.1.22.Final.jar:4.1.22.Final] 	at io.netty.channel.ChannelDuplexHandler.flush(ChannelDuplexHandler.java:117) ~[netty-transport-4.1.22.Final.jar:4.1.22.Final] 	at io.netty.channel.AbstractChannelHandlerContext.invokeFlush0(AbstractChannelHandlerContext.java:776) ~[netty-transport-4.1.22.Final.jar:4.1.22.Final] 	at io.netty.channel.AbstractChannelHandlerContext.invokeFlush(AbstractChannelHandlerContext.java:768) ~[netty-transport-4.1.22.Final.jar:4.1.22.Final] 	at io.netty.channel.AbstractChannelHandlerContext.flush(AbstractChannelHandlerContext.java:749) ~[netty-transport-4.1.22.Final.jar:4.1.22.Final] 	at reactor.ipc.netty.channel.ChannelOperationsHandler$PublisherSender.onComplete(ChannelOperationsHandler.java:535) ~[reactor-netty-0.7.5.RELEASE.jar:0.7.5.RELEASE] 	at reactor.core.publisher.FluxContextStart$ContextStartSubscriber.onComplete(FluxContextStart.java:122) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] 	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:245) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] 	at reactor.core.publisher.FluxConcatArray$ConcatArraySubscriber.onComplete(FluxConcatArray.java:184) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] 	at reactor.core.publisher.FluxConcatArray.subscribe(FluxConcatArray.java:80) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] 	at reactor.core.publisher.FluxMap.subscribe(FluxMap.java:59) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] 	at reactor.core.publisher.FluxContextStart.subscribe(FluxContextStart.java:49) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] 	at reactor.core.publisher.Flux.subscribe(Flux.java:6873) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] 	at reactor.ipc.netty.channel.ChannelOperationsHandler.drain(ChannelOperationsHandler.java:461) ~[reactor-netty-0.7.5.RELEASE.jar:0.7.5.RELEASE] 	at reactor.ipc.netty.channel.ChannelOperationsHandler.flush(ChannelOperationsHandler.java:191) ~[reactor-netty-0.7.5.RELEASE.jar:0.7.5.RELEASE] 	at io.netty.channel.AbstractChannelHandlerContext.invokeFlush0(AbstractChannelHandlerContext.java:776) ~[netty-transport-4.1.22.Final.jar:4.1.22.Final] 	at io.netty.channel.AbstractChannelHandlerContext.invokeFlush(AbstractChannelHandlerContext.java:768) ~[netty-transport-4.1.22.Final.jar:4.1.22.Final] 	at io.netty.channel.AbstractChannelHandlerContext.access$1500(AbstractChannelHandlerContext.java:38) ~[netty-transport-4.1.22.Final.jar:4.1.22.Final] 	at io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask.write(AbstractChannelHandlerContext.java:1129) ~[netty-transport-4.1.22.Final.jar:4.1.22.Final] 	at io.netty.channel.AbstractChannelHandlerContext$AbstractWriteTask.run(AbstractChannelHandlerContext.java:1070) ~[netty-transport-4.1.22.Final.jar:4.1.22.Final] 	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute$$$capture(AbstractEventExecutor.java:163) ~[netty-common-4.1.22.Final.jar:4.1.22.Final] 	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java) ~[netty-common-4.1.22.Final.jar:4.1.22.Final] 	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:404) ~[netty-common-4.1.22.Final.jar:4.1.22.Final] 	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:463) ~[netty-transport-4.1.22.Final.jar:4.1.22.Final] 	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:886) ~[netty-common-4.1.22.Final.jar:4.1.22.Final] 	at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_161]  2018-04-10 15:18:34.700  INFO 8220 --- [pool-1-thread-1] com.example.SampleEmitter                : Added a2eae85c-ee7b-4c1a-a65a-bdecdb34c4d7 2018-04-10 15:18:34.710 ERROR 8220 --- [ctor-http-nio-4] r.ipc.netty.channel.ChannelOperations    : [HttpServer] Error processing connection. Requesting close the channel  java.io.IOException: An established connection was aborted by the software in your host machine 	at sun.nio.ch.SocketDispatcher.writev0(Native Method) ~[na:1.8.0_161] 	at sun.nio.ch.SocketDispatcher.writev(SocketDispatcher.java:55) ~[na:1.8.0_161] 	at sun.nio.ch.IOUtil.write(IOUtil.java:148) ~[na:1.8.0_161] 	at sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:504) ~[na:1.8.0_161] 	at io.netty.channel.socket.nio.NioSocketChannel.doWrite(NioSocketChannel.java:418) ~[netty-transport-4.1.22.Final.jar:4.1.22.Final] 	at io.netty.channel.AbstractChannel$AbstractUnsafe.flush0(AbstractChannel.java:934) ~[netty-transport-4.1.22.Final.jar:4.1.22.Final] 	at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.flush0(AbstractNioChannel.java:360) ~[netty-transport-4.1.22.Final.jar:4.1.22.Final] 	at io.netty.channel.AbstractChannel$AbstractUnsafe.flush(AbstractChannel.java:901) ~[netty-transport-4.1.22.Final.jar:4.1.22.Final] 	at io.netty.channel.DefaultChannelPipeline$HeadContext.flush(DefaultChannelPipeline.java:1376) ~[netty-transport-4.1.22.Final.jar:4.1.22.Final] 	at io.netty.channel.AbstractChannelHandlerContext.invokeFlush0(AbstractChannelHandlerContext.java:776) [netty-transport-4.1.22.Final.jar:4.1.22.Final] 	at io.netty.channel.AbstractChannelHandlerContext.invokeFlush(AbstractChannelHandlerContext.java:768) [netty-transport-4.1.22.Final.jar:4.1.22.Final] 	at io.netty.channel.AbstractChannelHandlerContext.flush(AbstractChannelHandlerContext.java:749) [netty-transport-4.1.22.Final.jar:4.1.22.Final] 	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.flush(CombinedChannelDuplexHandler.java:533) ~[netty-transport-4.1.22.Final.jar:4.1.22.Final] 	at io.netty.channel.ChannelOutboundHandlerAdapter.flush(ChannelOutboundHandlerAdapter.java:115) ~[netty-transport-4.1.22.Final.jar:4.1.22.Final] 	at io.netty.channel.CombinedChannelDuplexHandler.flush(CombinedChannelDuplexHandler.java:358) ~[netty-transport-4.1.22.Final.jar:4.1.22.Final] 	at io.netty.channel.AbstractChannelHandlerContext.invokeFlush0(AbstractChannelHandlerContext.java:776) [netty-transport-4.1.22.Final.jar:4.1.22.Final] 	at io.netty.channel.AbstractChannelHandlerContext.invokeFlush(AbstractChannelHandlerContext.java:768) [netty-transport-4.1.22.Final.jar:4.1.22.Final] 	at io.netty.channel.AbstractChannelHandlerContext.flush(AbstractChannelHandlerContext.java:749) [netty-transport-4.1.22.Final.jar:4.1.22.Final] 	at io.netty.channel.ChannelDuplexHandler.flush(ChannelDuplexHandler.java:117) ~[netty-transport-4.1.22.Final.jar:4.1.22.Final] 	at io.netty.channel.AbstractChannelHandlerContext.invokeFlush0(AbstractChannelHandlerContext.java:776) [netty-transport-4.1.22.Final.jar:4.1.22.Final] 	at io.netty.channel.AbstractChannelHandlerContext.invokeFlush(AbstractChannelHandlerContext.java:768) [netty-transport-4.1.22.Final.jar:4.1.22.Final] 	at io.netty.channel.AbstractChannelHandlerContext.flush(AbstractChannelHandlerContext.java:749) [netty-transport-4.1.22.Final.jar:4.1.22.Final] 	at reactor.ipc.netty.channel.ChannelOperationsHandler$PublisherSender.onComplete(ChannelOperationsHandler.java:535) ~[reactor-netty-0.7.5.RELEASE.jar:0.7.5.RELEASE] 	at reactor.core.publisher.FluxContextStart$ContextStartSubscriber.onComplete(FluxContextStart.java:122) [reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] 	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:245) [reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] 	at reactor.core.publisher.FluxConcatArray$ConcatArraySubscriber.onComplete(FluxConcatArray.java:184) [reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] 	at reactor.core.publisher.FluxConcatArray.subscribe(FluxConcatArray.java:80) [reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] 	at reactor.core.publisher.FluxMap.subscribe(FluxMap.java:59) [reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] 	at reactor.core.publisher.FluxContextStart.subscribe(FluxContextStart.java:49) [reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] 	at reactor.core.publisher.Flux.subscribe(Flux.java:6873) [reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] 	at reactor.ipc.netty.channel.ChannelOperationsHandler.drain(ChannelOperationsHandler.java:461) [reactor-netty-0.7.5.RELEASE.jar:0.7.5.RELEASE] 	at reactor.ipc.netty.channel.ChannelOperationsHandler.flush(ChannelOperationsHandler.java:191) [reactor-netty-0.7.5.RELEASE.jar:0.7.5.RELEASE] 	at io.netty.channel.AbstractChannelHandlerContext.invokeFlush0(AbstractChannelHandlerContext.java:776) [netty-transport-4.1.22.Final.jar:4.1.22.Final] 	at io.netty.channel.AbstractChannelHandlerContext.invokeFlush(AbstractChannelHandlerContext.java:768) [netty-transport-4.1.22.Final.jar:4.1.22.Final] 	at io.netty.channel.AbstractChannelHandlerContext.access$1500(AbstractChannelHandlerContext.java:38) [netty-transport-4.1.22.Final.jar:4.1.22.Final] 	at io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask.write(AbstractChannelHandlerContext.java:1129) [netty-transport-4.1.22.Final.jar:4.1.22.Final] 	at io.netty.channel.AbstractChannelHandlerContext$AbstractWriteTask.run(AbstractChannelHandlerContext.java:1070) [netty-transport-4.1.22.Final.jar:4.1.22.Final] 	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute$$$capture(AbstractEventExecutor.java:163) [netty-common-4.1.22.Final.jar:4.1.22.Final] 	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java) [netty-common-4.1.22.Final.jar:4.1.22.Final] 	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:404) [netty-common-4.1.22.Final.jar:4.1.22.Final] 	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:463) [netty-transport-4.1.22.Final.jar:4.1.22.Final] 	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:886) [netty-common-4.1.22.Final.jar:4.1.22.Final] 	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_161] ```  Client example:  ```java             Disposable disposable = WebClient.create(""http://localhost:8080"")                     .get()                     .uri(""/objects"")                     .retrieve()                     .bodyToFlux(MyObject.class)                     .subscribe(n -> log.info(""Next: {}"", n.getId()),                             e -> log.error(""Error: {}"", e),                             () -> log.info(""Completed""));                  //I want to gracefully cancel subscription when I'm not interested in it anymore (for sake of this example - after 10 seconds)                 Thread.sleep(10000);                 disposable.dispose(); ```  Full, ready-to-run example available here: https://github.com/kklepacz/webflux-cancel-subscription  ---  **Affects:** 5.0.4  **Attachments:** - [tomcat_windows.txt](https://jira.spring.io/secure/attachment/25471/tomcat_windows.txt) (_18.96 kB_) - [undertow_windows.txt](https://jira.spring.io/secure/attachment/25470/undertow_windows.txt) (_7.75 kB_)  **Issue Links:** - #22189 Improve error handling in reactive SSE support when the remote channel is closed  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/75a41db071a4fb0a07bf95e4db48c8e93c9dd2d0, https://github.com/spring-projects/spring-framework/commit/7aba6ca9d661399c983890f0134a37f40b8e835c","closed","type: enhancement,","spring-projects-issues","2018-04-04T08:15:24Z","2020-03-23T10:16:29Z"
"","21415","Move synchronization point creation just before transaction begins to enable routing datasources to act on transaction definition [SPR-16876]","**[Kaan Ozdokmeci](https://jira.spring.io/secure/ViewProfile.jspa?name=kaan.ozdokmeci)** opened **[SPR-16876](https://jira.spring.io/browse/SPR-16876?redirect=false)** and commented  In org.springframework.transaction.support.AbstractPlatformTransactionManager#getTransactionmethod,  the synchronization point is created after the transaction is created and a connection is attached to it via the doBegin method.  Having the synchronization point created afterwards prevents the ability to utilize an AbstractRoutingDatasource that is able to pick between read-only and read-write datasources for the transaction by inspecting   org.springframework.transaction.support.TransactionSynchronizationManager#isCurrentTransactionReadOnly  when determining the appropriate datasource.     Is there any reason not to move synchronization point creation before the doBegin method so that routing datasources can act on the transaction definition?  If not happy to send a PR.   --- No further details from [SPR-16876](https://jira.spring.io/browse/SPR-16876?redirect=false)","open","in: data,","spring-projects-issues","2018-05-27T07:00:09Z","2021-02-22T10:34:16Z"
"","21442","500 returned for invalid mime type instead of 406 [SPR-16903]","**[Julien Hoarau](https://jira.spring.io/secure/ViewProfile.jspa?name=jhoarau)** opened **[SPR-16903](https://jira.spring.io/browse/SPR-16903?redirect=false)** and commented  If I call my service with a bogus accept header: `Accept: v=3.0` I would expect a 400 or a 406 but instead I get a 500  `NotAcceptableStatusException` seems to be thrown initially but is changed to `InvalidMediaTypeException` down the line  ``` org.springframework.http.InvalidMediaTypeException: Invalid mime type ""v=3.0"": does not contain '/'org.springframework.http.InvalidMediaTypeException: Invalid mime type ""v=3.0"": does not contain '/' at org.springframework.http.MediaType.parseMediaType(MediaType.java:534) at org.springframework.http.MediaType.parseMediaTypes(MediaType.java:558) at org.springframework.http.MediaType.parseMediaTypes(MediaType.java:577) at org.springframework.http.HttpHeaders.getAccept(HttpHeaders.java:443) at org.springframework.web.reactive.function.server.DefaultServerRequest$DefaultHeaders.accept(DefaultServerRequest.java:220) at org.springframework.boot.autoconfigure.web.reactive.error.DefaultErrorWebExceptionHandler.lambda$acceptsTextHtml$3(DefaultErrorWebExceptionHandler.java:190) at org.springframework.web.reactive.function.server.RouterFunctions$DefaultRouterFunction.route(RouterFunctions.java:396) at org.springframework.web.reactive.function.server.RouterFunctions$SameComposedRouterFunction.route(RouterFunctions.java:317) at org.springframework.boot.autoconfigure.web.reactive.error.AbstractErrorWebExceptionHandler.handle(AbstractErrorWebExceptionHandler.java:239) at org.springframework.web.server.handler.ExceptionHandlingWebHandler.lambda$handle$0(ExceptionHandlingWebHandler.java:68) at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:88) at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onError(FluxPeekFuseable.java:222) at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onError(MonoPeekTerminal.java:270) at reactor.core.publisher.FluxContextStart$ContextStartSubscriber.onError(FluxContextStart.java:117) at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:135) at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73) at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:115) at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1637) at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:156) at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1451) at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:68) at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90) at reactor.core.publisher.MonoCurrentContext.subscribe(MonoCurrentContext.java:33) at reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:59) at reactor.core.publisher.Mono.subscribe(Mono.java:3080) at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:97) at reactor.core.publisher.Operators$MonoSubscriber.onError(Operators.java:1123) at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreInner.onError(MonoIgnoreThen.java:229) at reactor.core.publisher.FluxContextStart$ContextStartSubscriber.onError(FluxContextStart.java:117) at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onError(MonoPeekTerminal.java:270) at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:834) at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:834) at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:185) at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:251) at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:185) at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:251) at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:100) at reactor.core.publisher.Operators.error(Operators.java:175) at reactor.core.publisher.MonoError.subscribe(MonoError.java:52) at reactor.core.publisher.Mono.subscribe(Mono.java:3080) at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:97) at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:185) at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:251) at reactor.core.publisher.FluxContextStart$ContextStartSubscriber.onError(FluxContextStart.java:117) at reactor.core.publisher.Operators$MonoSubscriber.onError(Operators.java:1123) at reactor.core.publisher.MonoIgnoreThen$ThenAcceptInner.onError(MonoIgnoreThen.java:300) at reactor.core.publisher.FluxContextStart$ContextStartSubscriber.onError(FluxContextStart.java:117) at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:185) at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:251) at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:165) at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:165) at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:120) at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onError(Operators.java:1320) at reactor.core.publisher.Operators$MonoSubscriber.onError(Operators.java:1123) at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreInner.onError(MonoIgnoreThen.java:229) at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:100) at reactor.core.publisher.Operators.error(Operators.java:175) at reactor.core.publisher.MonoError.subscribe(MonoError.java:52) at reactor.core.publisher.Mono.subscribe(Mono.java:3080) at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:97) at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onError(Operators.java:1320) at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:185) at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:251) at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onError(MonoPeekTerminal.java:270) at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:165) at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:165) at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onError(Operators.java:1320) at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:87) at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.innerError(FluxConcatMap.java:296) at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onError(FluxConcatMap.java:815) at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:120) at reactor.core.publisher.Operators.error(Operators.java:175) at reactor.core.publisher.MonoError.subscribe(MonoError.java:52) at reactor.core.publisher.MonoMap.subscribe(MonoMap.java:55) at reactor.core.publisher.Mono.subscribe(Mono.java:3080) at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:418) at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:210) at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:128) at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:61) at reactor.core.publisher.FluxConcatMap.subscribe(FluxConcatMap.java:121) at reactor.core.publisher.MonoNext.subscribe(MonoNext.java:40) at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44) at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52) at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52) at reactor.core.publisher.MonoPeekTerminal.subscribe(MonoPeekTerminal.java:61) at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150) at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1080) at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:241) at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:323) at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1637) at reactor.core.publisher.MonoZip$ZipInner.onSubscribe(MonoZip.java:312) at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54) at reactor.core.publisher.Mono.subscribe(Mono.java:3080) at reactor.core.publisher.MonoZip.subscribe(MonoZip.java:128) at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52) at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52) at reactor.core.publisher.Mono.subscribe(Mono.java:3080) at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75) at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:141) at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67) at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:97) at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92) at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:76) at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.innerNext(FluxConcatMap.java:271) at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:803) at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1080) at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241) at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92) at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:115) at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1080) at reactor.core.publisher.MonoAny$AnySubscriber.onNext(MonoAny.java:109) at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:115) at reactor.core.publisher.FluxFlattenIterable$FlattenIterableSubscriber.drainAsync(FluxFlattenIterable.java:391) at reactor.core.publisher.FluxFlattenIterable$FlattenIterableSubscriber.drain(FluxFlattenIterable.java:633) at reactor.core.publisher.FluxFlattenIterable$FlattenIterableSubscriber.onNext(FluxFlattenIterable.java:238) at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:87) at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:243) at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:268) at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1065) at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:144) at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:104) at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1637) at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:170) at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:103) at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:79) at reactor.core.publisher.MonoCurrentContext.subscribe(MonoCurrentContext.java:33) at reactor.core.publisher.MonoFilterFuseable.subscribe(MonoFilterFuseable.java:47) at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) at reactor.core.publisher.MonoFilterFuseable.subscribe(MonoFilterFuseable.java:44) at reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:56) at reactor.core.publisher.MonoFilterFuseable.subscribe(MonoFilterFuseable.java:47) at reactor.core.publisher.MonoFlattenIterable.subscribe(MonoFlattenIterable.java:101) at reactor.core.publisher.FluxMapFuseable.subscribe(FluxMapFuseable.java:63) at reactor.core.publisher.MonoAny.subscribe(MonoAny.java:48) at reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:59) at reactor.core.publisher.MonoDefaultIfEmpty.subscribe(MonoDefaultIfEmpty.java:37) at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150) at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:108) at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:97) at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67) at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:76) at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:97) at reactor.core.publisher.FluxFlatMap$FlatMapMain.tryEmit(FluxFlatMap.java:484) at reactor.core.publisher.FluxFlatMap$FlatMapInner.onNext(FluxFlatMap.java:916) at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67) at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:76) at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:97) at reactor.core.publisher.FluxFlatMap$FlatMapMain.tryEmitScalar(FluxFlatMap.java:432) at reactor.core.publisher.FluxFlatMap$FlatMapMain.onNext(FluxFlatMap.java:366) at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:232) at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:190) at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:332) at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:128) at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:61) at reactor.core.publisher.FluxFlatMap.subscribe(FluxFlatMap.java:97) at reactor.core.publisher.FluxFilter.subscribe(FluxFilter.java:52) at reactor.core.publisher.MonoNext.subscribe(MonoNext.java:40) at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44) at reactor.core.publisher.Mono.subscribe(Mono.java:3080) at reactor.core.publisher.FluxFlatMap$FlatMapMain.onNext(FluxFlatMap.java:372) at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:232) at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:190) at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:332) at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:128) at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:61) at reactor.core.publisher.FluxFlatMap.subscribe(FluxFlatMap.java:97) at reactor.core.publisher.FluxFilter.subscribe(FluxFilter.java:52) at reactor.core.publisher.MonoNext.subscribe(MonoNext.java:40) at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44) at reactor.core.publisher.MonoFilter.subscribe(MonoFilter.java:46) at reactor.core.publisher.MonoMap.subscribe(MonoMap.java:55) at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) at reactor.core.publisher.Mono.subscribe(Mono.java:3080) at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:418) at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:210) at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:128) at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:61) at reactor.core.publisher.FluxConcatMap.subscribe(FluxConcatMap.java:121) at reactor.core.publisher.MonoNext.subscribe(MonoNext.java:40) at reactor.core.publisher.MonoDefaultIfEmpty.subscribe(MonoDefaultIfEmpty.java:37) at reactor.core.publisher.MonoFilter.subscribe(MonoFilter.java:46) at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44) at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44) at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52) at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44) at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52) at reactor.core.publisher.Mono.subscribe(Mono.java:3080) at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:167) at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56) at reactor.core.publisher.Mono.subscribe(Mono.java:3080) at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75) at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:142) at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:78) at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1639) at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1451) at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1325) at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54) at reactor.core.publisher.Mono.subscribe(Mono.java:3080) at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75) at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:96) at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:142) at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:773) at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:543) at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:523) at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:409) at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:254) at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:190) at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:332) at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:128) at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:61) at reactor.core.publisher.FluxFlatMap.subscribe(FluxFlatMap.java:97) at reactor.core.publisher.FluxFilter.subscribe(FluxFilter.java:52) at reactor.core.publisher.MonoNext.subscribe(MonoNext.java:40) at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44) at reactor.core.publisher.MonoFilter.subscribe(MonoFilter.java:46) at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44) at reactor.core.publisher.MonoMap.subscribe(MonoMap.java:55) at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52) at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150) at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1080) at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:100) at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:130) at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:130) at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:142) at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:245) at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1082) at reactor.core.publisher.MonoProcessor.onNext(MonoProcessor.java:389) at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:185) at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67) at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1080) at reactor.core.publisher.MonoSupplier.subscribe(MonoSupplier.java:61) at reactor.core.publisher.Mono.subscribe(Mono.java:3080) at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75) at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:96) at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:349) at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onComplete(FluxConcatMap.java:265) at reactor.core.publisher.Operators.complete(Operators.java:125) at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:111) at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:61) at reactor.core.publisher.FluxConcatMap.subscribe(FluxConcatMap.java:121) at reactor.core.publisher.MonoNext.subscribe(MonoNext.java:40) at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44) at reactor.core.publisher.MonoPeek.subscribe(MonoPeek.java:71) at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52) at reactor.core.publisher.Mono.subscribe(Mono.java:3080) at reactor.core.publisher.MonoProcessor.add(MonoProcessor.java:531) at reactor.core.publisher.MonoProcessor.subscribe(MonoProcessor.java:444) at reactor.core.publisher.MonoMap.subscribe(MonoMap.java:52) at reactor.core.publisher.MonoFilter.subscribe(MonoFilter.java:46) at reactor.core.publisher.MonoMap.subscribe(MonoMap.java:55) at reactor.core.publisher.MonoMap.subscribe(MonoMap.java:55) at reactor.core.publisher.MonoDefaultIfEmpty.subscribe(MonoDefaultIfEmpty.java:37) at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52) at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52) at reactor.core.publisher.MonoSubscriberContext.subscribe(MonoSubscriberContext.java:47) at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52) at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:148) at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56) at reactor.core.publisher.MonoSubscriberContext.subscribe(MonoSubscriberContext.java:47) at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150) at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:104) at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1080) at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:144) at reactor.core.publisher.FluxSubscribeOnValue$ScheduledScalar.run(FluxSubscribeOnValue.java:178) at reactor.core.scheduler.ElasticScheduler$DirectScheduleTask.run(ElasticScheduler.java:292) at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:50) at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:27) at java.util.concurrent.FutureTask.run$$$capture(FutureTask.java:266) at java.util.concurrent.FutureTask.run(FutureTask.java) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at java.lang.Thread.run(Thread.java:748) Suppressed: org.springframework.web.server.NotAcceptableStatusException: Response status 406 with reason ""Could not find acceptable representation"" at org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping.handleNoMatch(RequestMappingInfoHandlerMapping.java:180) at org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping.lookupHandlerMethod(AbstractHandlerMethodMapping.java:327) at org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:266) at org.springframework.web.reactive.handler.AbstractHandlerMapping.getHandler(AbstractHandlerMapping.java:147) at org.springframework.web.reactive.DispatcherHandler.lambda$handle$0(DispatcherHandler.java:157) at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:357) ... 205 common frames omittedCaused by: org.springframework.util.InvalidMimeTypeException: Invalid mime type ""v=3.0"": does not contain '/' at org.springframework.util.MimeTypeUtils.parseMimeType(MimeTypeUtils.java:194) at org.springframework.http.MediaType.parseMediaType(MediaType.java:531) ... 280 common frames omitted ```  ---  **Affects:** 5.0.6","closed","status: invalid,","spring-projects-issues","2018-06-05T04:12:54Z","2019-01-13T20:26:05Z"
"","21268","SynchronossPartGenerator should reuse PartBodyStreamStorageFactory [SPR-16727]","**[Julien Hoarau](https://jira.spring.io/secure/ViewProfile.jspa?name=jhoarau)** opened **[SPR-16727](https://jira.spring.io/browse/SPR-16727?redirect=false)** and commented  `SynchronossPartGenerator` creates a new `NioMultipartParser` with:  ``` NioMultipartParser parser = Multipart.multipart(context).forNIO(listener); ```  This will create a new `DefaultPartBodyStreamStorageFactory` each time. `DefaultPartBodyStreamStorageFactory` constructor will call `File.exists`, this could be ""slow""  on some system. We should have a single instance of DefaultPartBodyStreamStorageFactory and reuse it.  ---  **Issue Links:** - #21180 Race-Condition in Multipart upload proxy scenario","closed","type: enhancement,","spring-projects-issues","2018-04-16T01:38:38Z","2019-01-11T16:45:13Z"
"","21267","AbstractMessageReaderArgumentResolver.readBody should defer creating the error [SPR-16726]","**[Julien Hoarau](https://jira.spring.io/secure/ViewProfile.jspa?name=jhoarau)** opened **[SPR-16726](https://jira.spring.io/browse/SPR-16726?redirect=false)** and commented  In `AbstractMessageReaderArgumentResolver.readBody` we always build the empty body  exception even if we won't throw it, we should defer that.  ``` protected Mono readBody(...) { ... Mono mono = reader.readMono(actualType, elementType, request, response, readHints); mono = mono.onErrorResume(ex -> Mono.error(handleReadError(bodyParameter, ex))); if (isBodyRequired || (adapter != null && !adapter.supportsEmpty())) {   mono = mono.switchIfEmpty(Mono.error(handleMissingBody(bodyParameter))); } ... }  private ServerWebInputException handleMissingBody(MethodParameter param) {   return new ServerWebInputException(""Request body is missing: "" + param.getExecutable().toGenericString()); } ```  For performance reason we should only create the exception on error instead of creating it preemptively.   ---  **Affects:** 5.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/babe6c59c4a47f17cc765f429ecb9b7640ac902b, https://github.com/spring-projects/spring-framework/commit/d3ed7b624d6572836208f03405f2d3c0f0298ae6, https://github.com/spring-projects/spring-framework/commit/daa2d37ad401ddf24530e17bd235c92d6fa8a0fc","closed","type: enhancement,","spring-projects-issues","2018-04-16T01:27:37Z","2018-05-08T08:53:23Z"
"","21862","Streaming parsing of JSON with WebClient [SPR-17328]","**[Julian Orth](https://jira.spring.io/secure/ViewProfile.jspa?name=jorth)** opened **[SPR-17328](https://jira.spring.io/browse/SPR-17328?redirect=false)** and commented  Hi,  AsyncRestTemplate was deprecated in #19962 in favor of WebClient. However, WebClient does not seem to support all of the use cases that AsyncRestTemplate supports (and which RestTemplate does not support.)  ##### Example  Consider the following JSON:  ``` {     ""a"": [         {             ""x"": 2,             ""y"": 1         }     ],     ""b"": [         {             ""x"": 3,             ""y"": 1         }     ] }  ```  where both arrays (`a` and `b`) have 1,000,000,000 elements each. The goal is to calculate the sum of all `x - y` over both arrays. (E.g. `(2 - 1) + (3 - 1) = 3` in the example above.)   ##### Solution with AsyncRestTemplate  With AsyncRestTemplate, this is easy: Call `AsyncRestTemplate#execute` with a `ResponseExtractor`, plug the `InputStream` into a Jackson `JsonParser`, use `ObjectMapper` to deserialize each array element ad-hoc into  ``` class V {    int x;    int y; }, ```  update the sum, proceed to the next element. Since only one Object of type `V` needs to be in memory at a time, the memory requirements are constant and low.  Overall, performing this streaming processing of the JSON can probably be done in 25 lines of code using Jackson and AsyncRestTemplate.  ##### The Problem with WebClient  With WebClient, this kind of processing seems to be practically impossible. Jackson appears to only support async parsing at the token level. Anything at a higher level (e.g. ObjectMapper) needs to have all tokens available in a blocking way to parse them.  Therefore, to implement the kind of streaming processing described above, I would have to manually keep track of the JSON tokens parsed and then plug them into an ObjectMapper all at once when I've detected the end of an array element. This is basically what Spring currently does to support streaming of top-level arrays:  ``` WebClient.create().get().exchange().flatMapMany(r -> r.bodyToFlux(V.class))  ```  However, even to support only this very limited streaming of top-level array elements, Spring had to re-implement about 200 lines of Jackson logic to keep track of the current depth in the token stream (`Jackson2Tokenizer`).  ##### Question  Since AsyncRestTemplate is deprecated, there no longer seems to be an encouraged and practical way in Spring 5 to do asynchronous streaming of JSON data. There are several ways to improve this situation: 1. Un-deprecate AsyncRestTemplate 2. Upstream complete async support in Jackson 3. Provide a much expanded version of Jackson2Tokenizer to the public that handles more complicated cases such as the one described above  What are your thoughts on the matter and do you have plans to address this problem in a future release?  Thanks Julian  PS: A similar problem exists on the server side. With web-mvc, an object returned from a REST endpoint would be streamed into the output stream via Jackson, keeping the memory requirements low. With webflux, a Mono\ returned from a REST endpoint will first be serialized into a String before it is written to the output stream.  ---  **Affects:** 5.0.9","closed","type: enhancement,","spring-projects-issues","2018-10-03T10:04:59Z","2019-02-14T15:14:11Z"
"","21847","Internal Server Error: Required attribute 'org.springframework.web.reactive.function.server.RouterFunctions.request' is missing [SPR-17314]","**[Juergen Zimmermann](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.zimmermann)** opened **[SPR-17314](https://jira.spring.io/browse/SPR-17314?redirect=false)** and commented  After upgrading from 5.1.0.RC3 to 5.1.0.RELEASE (i.e. Spring Boot 2.1.0.M3 to 2.1.0.M4) I'm getting an internal server error with the message ""_Required attribute 'org.springframework.web.reactive.function.server.RouterFunctions.request' is missing_"". I'm using Windows 10, OpenJDK 11, and Gradle 4.10.2. A testcase is attached. Just invoke `gradle bootRun`. For the client, e.g. curl http://localhost:8080/123. You can switch between Spring Boot 2.1.0.M3 and M4 at the lines 8 and 9 in `build.gradle.kts`.  ---  **Affects:** 5.1 GA  **Attachments:** - [testcase.zip](https://jira.spring.io/secure/attachment/26033/testcase.zip) (_57.14 kB_)  **Issue Links:** - #21837 Required attribute 'RouterFunctions.request' is missing (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2018-09-30T06:02:45Z","2019-01-12T16:44:21Z"
"","21640","LocalVariableTableParameterNameDiscoverer runs into UnsupportedOperationException in ClassVisitor.visitNestMemberExperimental() [SPR-17103]","**[Juergen Zimmermann](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.zimmermann)** opened **[SPR-17103](https://jira.spring.io/browse/SPR-17103?redirect=false)** and commented  When I use _OpenJDK 11_ with Spring Framework _5.1.0.RC1_ instead of _5.0.8.RELEASE_ then I get the stacktrace below. I attach a Gradle-based testcase. To reproduce the stacktrace: **gradle bootJar** **java -jar ./build/libs/testcase-1.0.jar --debug**  To switch back to Spring Framework 5.0.8.RELEASE: in build.gradle comment line 27+28, and uncomment lines 30+31.  `The stacktrace:` `org.springframework.boot.context.properties.bind.BindException: Failed to bind properties under 'spring.cloud.gateway' to org.springframework.cloud.gateway.config.GatewayProperties` ` at org.springframework.boot.context.properties.bind.Binder.handleBindError(Binder.java:250) ~[spring-boot-2.0.3.RELEASE.jar!/:2.0.3.RELEASE]` ` at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:226) ~[spring-boot-2.0.3.RELEASE.jar!/:2.0.3.RELEASE]` ` at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:210) ~[spring-boot-2.0.3.RELEASE.jar!/:2.0.3.RELEASE]` ` at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:192) ~[spring-boot-2.0.3.RELEASE.jar!/:2.0.3.RELEASE]` ` at org.springframework.boot.context.properties.ConfigurationPropertiesBinder.bind(ConfigurationPropertiesBinder.java:82) ~[spring-boot-2.0.3.RELEASE.jar!/:2.0.3.RELEASE]` ` at org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor.bind(ConfigurationPropertiesBindingPostProcessor.java:107) ~[spring-boot-2.0.3.RELEASE.jar!/:2.0.3.RELEASE]` ` at org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor.postProcessBeforeInitialization(ConfigurationPropertiesBindingPostProcessor.java:93) ~[spring-boot-2.0.3.RELEASE.jar!/:2.0.3.RELEASE]` ` at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:419) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1735) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:576) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:498) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:290) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1205) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1132) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:824) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:727) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:478) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1282) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1126) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:538) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:498) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:290) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.DefaultListableBeanFactory.addCandidateEntry(DefaultListableBeanFactory.java:1402) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1368) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveMultipleBeans(DefaultListableBeanFactory.java:1269) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1163) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1132) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:824) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:727) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:478) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1282) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1126) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:538) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:498) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:290) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1205) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1132) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:824) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:727) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:478) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1282) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1126) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:538) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:498) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:578) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.context.support.AbstractApplicationContext.getBeansOfType(AbstractApplicationContext.java:1214) ~[spring-context-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.BeanFactoryUtils.beansOfTypeIncludingAncestors(BeanFactoryUtils.java:290) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.web.reactive.DispatcherHandler.initStrategies(DispatcherHandler.java:125) ~[spring-webflux-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.web.reactive.DispatcherHandler.setApplicationContext(DispatcherHandler.java:120) ~[spring-webflux-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.context.support.ApplicationContextAwareProcessor.invokeAwareInterfaces(ApplicationContextAwareProcessor.java:120) ~[spring-context-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.context.support.ApplicationContextAwareProcessor.postProcessBeforeInitialization(ApplicationContextAwareProcessor.java:96) ~[spring-context-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:419) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1735) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:576) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:498) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1091) ~[spring-context-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.web.server.adapter.WebHttpHandlerBuilder.applicationContext(WebHttpHandlerBuilder.java:153) ~[spring-web-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration$AnnotationConfig.httpHandler(HttpHandlerAutoConfiguration.java:59) ~[spring-boot-autoconfigure-2.0.3.RELEASE.jar!/:2.0.3.RELEASE]` ` at org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration$AnnotationConfig$$EnhancerBySpringCGLIB$$3760f407.CGLIB$httpHandler$0() ~[spring-boot-autoconfigure-2.0.3.RELEASE.jar!/:2.0.3.RELEASE]` ` at org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration$AnnotationConfig$$EnhancerBySpringCGLIB$$3760f407$$FastClassBySpringCGLIB$$b3e7674b.invoke() ~[spring-boot-autoconfigure-2.0.3.RELEASE.jar!/:2.0.3.RELEASE]` ` at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244) ~[spring-core-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:361) ~[spring-context-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration$AnnotationConfig$$EnhancerBySpringCGLIB$$3760f407.httpHandler() ~[spring-boot-autoconfigure-2.0.3.RELEASE.jar!/:2.0.3.RELEASE]` ` at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na]` ` at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:na]` ` at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]` ` at java.base/java.lang.reflect.Method.invoke(Method.java:566) ~[na:na]` ` at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:586) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1282) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1126) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:538) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:498) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204) ~[spring-beans-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.boot.web.reactive.context.ReactiveWebServerApplicationContext.getHttpHandler(ReactiveWebServerApplicationContext.java:155) ~[spring-boot-2.0.3.RELEASE.jar!/:2.0.3.RELEASE]` ` at org.springframework.boot.web.reactive.context.ReactiveWebServerApplicationContext.createWebServer(ReactiveWebServerApplicationContext.java:99) ~[spring-boot-2.0.3.RELEASE.jar!/:2.0.3.RELEASE]` ` at org.springframework.boot.web.reactive.context.ReactiveWebServerApplicationContext.onRefresh(ReactiveWebServerApplicationContext.java:73) ~[spring-boot-2.0.3.RELEASE.jar!/:2.0.3.RELEASE]` ` at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:542) ~[spring-context-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.boot.web.reactive.context.ReactiveWebServerApplicationContext.refresh(ReactiveWebServerApplicationContext.java:61) ~[spring-boot-2.0.3.RELEASE.jar!/:2.0.3.RELEASE]` ` at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:759) ~[spring-boot-2.0.3.RELEASE.jar!/:2.0.3.RELEASE]` ` at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:395) ~[spring-boot-2.0.3.RELEASE.jar!/:2.0.3.RELEASE]` ` at org.springframework.boot.SpringApplication.run(SpringApplication.java:327) ~[spring-boot-2.0.3.RELEASE.jar!/:2.0.3.RELEASE]` ` at testcase.ApplicationKt.main(Application.kt:46) ~[classes!/:na]` ` at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na]` ` at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:na]` ` at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]` ` at java.base/java.lang.reflect.Method.invoke(Method.java:566) ~[na:na]` ` at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:48) ~[testcase-1.0.jar:na]` ` at org.springframework.boot.loader.Launcher.launch(Launcher.java:87) ~[testcase-1.0.jar:na]` ` at org.springframework.boot.loader.Launcher.launch(Launcher.java:50) ~[testcase-1.0.jar:na]` ` at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:51) ~[testcase-1.0.jar:na]` `Caused by: java.lang.UnsupportedOperationException: null` ` at org.springframework.asm.ClassVisitor.visitNestMemberExperimental(ClassVisitor.java:244) ~[spring-core-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.asm.ClassReader.accept(ClassReader.java:651) ~[spring-core-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.asm.ClassReader.accept(ClassReader.java:391) ~[spring-core-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.core.LocalVariableTableParameterNameDiscoverer.inspectClass(LocalVariableTableParameterNameDiscoverer.java:116) ~[spring-core-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.core.LocalVariableTableParameterNameDiscoverer.getParameterNames(LocalVariableTableParameterNameDiscoverer.java:74) ~[spring-core-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.core.PrioritizedParameterNameDiscoverer.getParameterNames(PrioritizedParameterNameDiscoverer.java:55) ~[spring-core-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.validation.beanvalidation.LocalValidatorFactoryBean$1.getParameterNames(LocalValidatorFactoryBean.java:324) ~[spring-context-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.hibernate.validator.internal.util.ExecutableParameterNameProvider.getParameterNames(ExecutableParameterNameProvider.java:37) ~[hibernate-validator-6.0.10.Final.jar!/:6.0.10.Final]` ` at org.hibernate.validator.internal.metadata.aggregated.ParameterMetaData$Builder.build(ParameterMetaData.java:169) ~[hibernate-validator-6.0.10.Final.jar!/:6.0.10.Final]` ` at org.hibernate.validator.internal.metadata.aggregated.ExecutableMetaData$Builder.findParameterMetaData(ExecutableMetaData.java:435) ~[hibernate-validator-6.0.10.Final.jar!/:6.0.10.Final]` ` at org.hibernate.validator.internal.metadata.aggregated.ExecutableMetaData$Builder.build(ExecutableMetaData.java:388) ~[hibernate-validator-6.0.10.Final.jar!/:6.0.10.Final]` ` at org.hibernate.validator.internal.metadata.aggregated.BeanMetaDataImpl$BuilderDelegate.build(BeanMetaDataImpl.java:788) ~[hibernate-validator-6.0.10.Final.jar!/:6.0.10.Final]` ` at org.hibernate.validator.internal.metadata.aggregated.BeanMetaDataImpl$BeanMetaDataBuilder.build(BeanMetaDataImpl.java:648) ~[hibernate-validator-6.0.10.Final.jar!/:6.0.10.Final]` ` at org.hibernate.validator.internal.metadata.BeanMetaDataManager.createBeanMetaData(BeanMetaDataManager.java:192) ~[hibernate-validator-6.0.10.Final.jar!/:6.0.10.Final]` ` at org.hibernate.validator.internal.metadata.BeanMetaDataManager.lambda$getBeanMetaData$0(BeanMetaDataManager.java:160) ~[hibernate-validator-6.0.10.Final.jar!/:6.0.10.Final]` ` at java.base/java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:330) ~[na:na]` ` at org.hibernate.validator.internal.metadata.BeanMetaDataManager.getBeanMetaData(BeanMetaDataManager.java:159) ~[hibernate-validator-6.0.10.Final.jar!/:6.0.10.Final]` ` at org.hibernate.validator.internal.engine.ValidatorImpl.buildNewLocalExecutionContext(ValidatorImpl.java:749) ~[hibernate-validator-6.0.10.Final.jar!/:6.0.10.Final]` ` at org.hibernate.validator.internal.engine.ValidatorImpl.validateCascadedAnnotatedObjectForCurrentGroup(ValidatorImpl.java:603) ~[hibernate-validator-6.0.10.Final.jar!/:6.0.10.Final]` ` at org.hibernate.validator.internal.engine.ValidatorImpl.validateCascadedConstraints(ValidatorImpl.java:568) ~[hibernate-validator-6.0.10.Final.jar!/:6.0.10.Final]` ` at org.hibernate.validator.internal.engine.ValidatorImpl.validateInContext(ValidatorImpl.java:389) ~[hibernate-validator-6.0.10.Final.jar!/:6.0.10.Final]` ` at org.hibernate.validator.internal.engine.ValidatorImpl.validate(ValidatorImpl.java:169) ~[hibernate-validator-6.0.10.Final.jar!/:6.0.10.Final]` ` at org.springframework.validation.beanvalidation.SpringValidatorAdapter.validate(SpringValidatorAdapter.java:108) ~[spring-context-5.1.0.RC1.jar!/:5.1.0.RC1]` ` at org.springframework.boot.context.properties.ConfigurationPropertiesJsr303Validator.validate(ConfigurationPropertiesJsr303Validator.java:52) ~[spring-boot-2.0.3.RELEASE.jar!/:2.0.3.RELEASE]` ` at org.springframework.boot.context.properties.bind.validation.ValidationBindHandler.lambda$validate$1(ValidationBindHandler.java:101) ~[spring-boot-2.0.3.RELEASE.jar!/:2.0.3.RELEASE]` ` at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183) ~[na:na]` ` at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:177) ~[na:na]` ` at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948) ~[na:na]` ` at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484) ~[na:na]` ` at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474) ~[na:na]` ` at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150) ~[na:na]` ` at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173) ~[na:na]` ` at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[na:na]` ` at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:497) ~[na:na]` ` at org.springframework.boot.context.properties.bind.validation.ValidationBindHandler.validate(ValidationBindHandler.java:101) ~[spring-boot-2.0.3.RELEASE.jar!/:2.0.3.RELEASE]` ` at org.springframework.boot.context.properties.bind.validation.ValidationBindHandler.validate(ValidationBindHandler.java:83) ~[spring-boot-2.0.3.RELEASE.jar!/:2.0.3.RELEASE]` ` at org.springframework.boot.context.properties.bind.validation.ValidationBindHandler.onFinish(ValidationBindHandler.java:72) ~[spring-boot-2.0.3.RELEASE.jar!/:2.0.3.RELEASE]` ` at org.springframework.boot.context.properties.bind.Binder.handleBindResult(Binder.java:236) ~[spring-boot-2.0.3.RELEASE.jar!/:2.0.3.RELEASE]` ` at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:223) ~[spring-boot-2.0.3.RELEASE.jar!/:2.0.3.RELEASE]` ` ... 112 common frames omitted`  ---  **Affects:** 5.1 RC1  **Attachments:** - [testcase.zip](https://jira.spring.io/secure/attachment/25789/testcase.zip) (_54.78 kB_)  **Issue Links:** - #21633 Classpath scanning on inner classes fails against JDK 11 bytecode level - #20944 Upgrade to ASM 6.2","closed","in: core,","spring-projects-issues","2018-07-30T07:16:17Z","2019-01-11T12:50:46Z"
"","21636","Improve guidance on basic auth in WebFlux and refine approach to deprecations [SPR-17099]","**[Juergen Zimmermann](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.zimmermann)** opened **[SPR-17099](https://jira.spring.io/browse/SPR-17099?redirect=false)** and commented  I replaced the deprecated _ExchangeFilterFunction.basicAuthentication(USERNAME, PASSWORD)_ with this Kotlin fragment:  `ExchangeFilterFunction.ofRequestProcessor { request ->` `  request.headers().setBasicAuth(USERNAME, PASSWORD)` `  request.toMono()` `}`     `Now I get the following stacktrace:`  `java.lang.UnsupportedOperationException` ` at java.base/java.util.Collections$UnmodifiableMap.put(Collections.java:1453)` ` at org.springframework.http.HttpHeaders.set(HttpHeaders.java:1512)` ` at org.springframework.http.HttpHeaders.setBasicAuth(HttpHeaders.java:750)` ` at org.springframework.http.HttpHeaders.setBasicAuth(HttpHeaders.java:720)` ` at de.hska.kunde.rest.KundeRestTest$beforeAll$1.apply(KundeRestTest.kt:108)` ` at de.hska.kunde.rest.KundeRestTest$beforeAll$1.apply(KundeRestTest.kt:93)` ` at org.springframework.web.reactive.function.client.ExchangeFilterFunction.lambda$ofRequestProcessor$3(ExchangeFilterFunction.java:77)` ` at org.springframework.web.reactive.function.client.ExchangeFilterFunction.lambda$apply$2(ExchangeFilterFunction.java:66)` ` at org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec.exchange(DefaultWebClient.java:321)` ` at org.springframework.web.reactive.function.client.DefaultWebClient$DefaultRequestBodyUriSpec.retrieve(DefaultWebClient.java:367)` ` at de.hska.kunde.rest.KundeRestTest$Lesen.Suche mit vorhandenem Nachnamen(KundeRestTest.kt:268)` ` at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)` ` at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)` ` at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)` ` at java.base/java.lang.reflect.Method.invoke(Method.java:564)` ` at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:515)` ` ...` ` at java.base/java.lang.Thread.run(Thread.java:844)`   ---  **Affects:** 5.1 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4a18488f30a382ef3bb706053e8aa83faa240a25","closed","type: task,","spring-projects-issues","2018-07-27T11:33:29Z","2018-08-17T09:42:43Z"
"","21891","Comparators.nullsLow creates wrong kind of NullSafeComparator [SPR-17357]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-17357](https://jira.spring.io/browse/SPR-17357?redirect=false)** and commented  Due to a typo, `Comparators.nullsLow` passes in `false` into `NullSafeComparator`'s `nullsLow` argument. This has been fixed through PR 1982 on master but needs to be backported to 5.0.10 as well, tracking the fix through this JIRA issue now.   ---  **Affects:** 5.0.9, 5.1 GA  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1982, and commits https://github.com/spring-projects/spring-framework/commit/8d1499e1688357c886cf362fd93911e8f55cd2ff  **Backported to:** [5.0.10](https://github.com/spring-projects/spring-framework/milestone/191?closed=1)","closed","in: core,","spring-projects-issues","2018-10-09T21:57:58Z","2018-10-15T07:48:40Z"
"","21890","BeanFactory.getBeanProvider stream does not include beans from parent context [SPR-17356]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-17356](https://jira.spring.io/browse/SPR-17356?redirect=false)** and commented  In contrast to an `@Autowired ObjectProvider`, the `BeanFactory.getBeanProvider` variant does not traverse beans in ancestor contexts. This accidental inconsistency needs to be fixed for 5.1.1.   ---  **Affects:** 5.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/44afed426aaf5a78bcc41e11873d42f5fde73210","closed","in: core,","spring-projects-issues","2018-10-09T09:39:58Z","2018-10-15T07:48:39Z"
"","21825","GenericApplicationContext.registerBean should support non-default constructors [SPR-17292]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-17292](https://jira.spring.io/browse/SPR-17292?redirect=false)** and commented  While `AnnotationConfigApplicationContext.registerBean` supports `@Autowired` resolution on constructors in case of no instance supplier given, the original method on `GenericApplicationContext` performs default instantiation only. Making `GenericApplicationContext.registerBean` smarter in detecting a Kotlin primary constructor or simple non-default public constructor scenarios makes it aligned with `AnnotationConfigApplicationContext` and more useful in general, in particular for Kotlin DSLs.  ---  **Issue Links:** - #21775 Bean definition DSL does not generate unique bean names - #21808 Expose more AbstractBeanDefinition methods in BeanDefinition - #20569 Streamline and reduce Kotlin delegates  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/47d6e9122751efc78f41632483302d365bb1a2ca, https://github.com/spring-projects/spring-framework/commit/d3c08552e9f9c5e0061cd1b518e4167d4a02ef9b","closed","type: enhancement,","spring-projects-issues","2018-09-19T20:05:44Z","2019-01-11T14:11:59Z"
"","21814","Deprecate autowire attribute on @Bean annotation [SPR-17281]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-17281](https://jira.spring.io/browse/SPR-17281?redirect=false)** and commented  Autowiring by name or type is rather outdated in the meantime, in particular in the context of annotation-driven configuration but also for functional configuration. Let's therefore deprecate the `autowire` attribute on the `@Bean` annotation as of 5.1, which also goes nicely with the introduction of the similarly (but differently purposed and potentially confusing) named `autowireCandidate` in 5.1 (#20752).  ---  **Issue Links:** - #20752 Support for autowire-candidate with `@Bean`  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c8869d99f58c697bf69a6761a27ced75ad771980","closed","in: core,","spring-projects-issues","2018-09-17T17:05:02Z","2019-01-13T04:24:48Z"
"","21812","Avoid regex pattern matching for simple String replacement steps [SPR-17279]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-17279](https://jira.spring.io/browse/SPR-17279?redirect=false)** and commented   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/34663300a6952e1c708e0ec39296e4fdf3d85feb","closed","in: core,","spring-projects-issues","2018-09-17T11:04:27Z","2018-09-21T07:52:16Z"
"","21800","Upgrade to ASM 7.0 [SPR-17267]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-17267](https://jira.spring.io/browse/SPR-17267?redirect=false)** and commented  ASM master has been upgraded to 7.0 beta level, supporting JDK 11 features in a non-experimental form. Let's upgrade to it for Spring Framework 5.1 GA, applying further patches towards ASM 7.0 GA in 5.1.x releases as needed.  ---  **Affects:** 5.1 RC1  **Issue Links:** - #20937 Compatibility with JDK 11 (_**""is depended on by""**_) - #19083 Upgrade to ASM 6.0 - #20944 Upgrade to ASM 6.2 - #21905 Upgrade to Objenesis 3.0","closed","in: core,","spring-projects-issues","2018-09-11T10:15:41Z","2019-01-11T14:13:04Z"
"","21707","Avoid argument resolution overhead for no-arg factory methods [SPR-17171]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-17171](https://jira.spring.io/browse/SPR-17171?redirect=false)** and commented  `ConstructorResolver`'s argument resolution around `createArgumentArray` is effectively bypassed for no-arg constructors but not for no-arg factory methods. Let's streamline this towards a straight invocation of the factory method itself in such a scenario.   ---  **Affects:** 5.1 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/347852e86ab72b16949abeb70f1d470276f7edb2","closed","type: enhancement,","spring-projects-issues","2018-08-13T08:12:34Z","2018-08-17T09:42:44Z"
"","21693","Upgrade to Reactor Californium RC1 [SPR-17156]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-17156](https://jira.spring.io/browse/SPR-17156?redirect=false)** and commented  Let's use this ticket for tracking the Reactor release candidate for our 5.1 RC3.  ---  **Affects:** 5.1 RC2  **Issue Links:** - #20932 Upgrade to Reactor Core 3.2","closed","type: task,","spring-projects-issues","2018-08-09T16:25:33Z","2019-01-11T14:00:28Z"
"","21692","Upgrade to Gradle 4.10 [SPR-17155]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-17155](https://jira.spring.io/browse/SPR-17155?redirect=false)** and commented  Since other projects in the Spring portfolio have upgraded to Gradle 4.9 in the meantime, let's go beyond 4.8 as well... probably aiming straight for 4.10 for Spring Framework 5.0 RC3.  ---  **Affects:** 5.1 RC1  **Issue Links:** - #21020 Upgrade to Gradle 4.8(.1)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2f04cbba51cc5b9ecbd50d88163753858d52e35a, https://github.com/spring-projects/spring-framework/commit/9cb8b4bb0a6c9b715d4bf51abee6b65ccc9bea9d, https://github.com/spring-projects/spring-framework/commit/a689daadf9e4b47c2cbcfa20dff0658e5e1cbda3, https://github.com/spring-projects/spring-framework/commit/fb3c1881ca4a31bae111cc1511612bc2feb105fe","closed","type: task,","spring-projects-issues","2018-08-09T16:23:05Z","2019-01-11T14:00:07Z"
"","21683","Annotations on generic superclass methods not found by AnnotationUtils [SPR-17146]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-17146](https://jira.spring.io/browse/SPR-17146?redirect=false)** and commented  Following up on #20609, we should also apply the same policy to superclass methods, even if annotation inheritance expectations across generics might be less common there.  Due to the inconsistency with generic interfaces and the inconsistency between `AnnotationUtils` and `AnnotatedElementUtils` (since only the former finds annotations on generic interface methods), this qualifies as a follow-up bug that needs to be fixed in the 5.0.x line as well.  ---  **Affects:** 5.0.8, 5.1 RC1  **Issue Links:** - #20609 Annotations on generic interface methods not found by AnnotationUtils  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4521a79b2dfd4802bcbe2fba4c841510b5f0da54, https://github.com/spring-projects/spring-framework/commit/688ef9ad46d15b47997f155ffc90731bdc44c1c6","closed","in: core,","spring-projects-issues","2018-08-08T13:17:33Z","2019-01-11T14:00:43Z"
"","21680","Deprecate support classes for Sun's JDK HTTP server [SPR-17143]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-17143](https://jira.spring.io/browse/SPR-17143?redirect=false)** and commented  Spring's support for the Sun HTTP Server, as included in JDK 6 to 8, is rather outdated in the meantime. JDK 11 factored out all such server pieces, including JAX-WS, so this does not have a first-class role at all anymore. For Spring's purposes, an embedded Tomcat/Jetty/Undertow is a fully-featured replacement.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2b051b8b321768a4cfef83077db65c6328ffd60f","closed","type: task,","spring-projects-issues","2018-08-07T17:45:03Z","2018-08-17T09:42:43Z"
"","21668","InitializingBean/DisposableBean javadoc should not just refer to singletons [SPR-17131]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-17131](https://jira.spring.io/browse/SPR-17131?redirect=false)** and commented  `InitializingBean` and `DisposableBean` as well as `DestructionAwareBeanPostProcessor` just talk about singletons in their javadoc for historic reasons. They should refer to singletons and scoped beans, not suggesting a limitation to singletons only.  ---  **Affects:** 4.3.18, 5.0.8, 5.1 RC1  **Issue Links:** - #21632 Revise BeanFactory vs ApplicationContext section in reference docs  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c814f5821ae70b99afdbb6f6ebc5c1ae1b2a4838, https://github.com/spring-projects/spring-framework/commit/f155d21c9508ae7d22a9d0d5544db15d6c750521, https://github.com/spring-projects/spring-framework/commit/73da153e5ca76992c2645b8120de6d1a8c977f20  **Backported to:** [4.3.19](https://github.com/spring-projects/spring-framework/milestone/168?closed=1)","closed","in: core,","spring-projects-issues","2018-08-06T17:40:20Z","2019-01-11T14:00:54Z"
"","21666","Upgrade to JUnit Jupiter 5.3 [SPR-17129]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-17129](https://jira.spring.io/browse/SPR-17129?redirect=false)** and commented  JUnit 5.3 is in its milestone phase at this point, delivering a release candidate soon and aiming for general availability in early September. Let's pick it up for Spring Framework 5.1 GA if the timing works out, possibly rolling JUnit 5.3 RC1 into next week's Spring Framework 5.1 RC2 (under the same ticket here).  ---  **Affects:** 5.1 RC1  **Issue Links:** - #20954 Upgrade to JUnit Jupiter 5.2 - #22069 Upgrade to JUnit 5.3.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bffa4b88afea035d209cffe63e643c2b8688802f, https://github.com/spring-projects/spring-framework/commit/69e4f21f9023c319f36e49b239b5388485b22480, https://github.com/spring-projects/spring-framework/commit/454cd933d474db8a42b64abe5acd0008dd849b38, https://github.com/spring-projects/spring-framework/commit/de38af684309eadefa3b5e817dfb7e4e24a04017","closed","type: task,","spring-projects-issues","2018-08-06T14:48:54Z","2019-01-11T14:01:36Z"
"","21654","Deprecate CommonJ scheduling support in favor of JSR-236 Concurrency Utilities [SPR-17117]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-17117](https://jira.spring.io/browse/SPR-17117?redirect=false)** and commented  Spring's CommonJ scheduling support is outdated in the meantime, with `WorkManagerTaskExecutor` and `TimerManagerTaskScheduler` effectively superseded by the JSR-236 based `DefaultManagedTaskExecutor` and `DefaultManagedTaskScheduler`, respectively. Since the latter are commonly supported on EE 7 servers now, including WebLogic and WebSphere, there is no need to sustain CommonJ any longer.  ---  **Issue Links:** - #5902 Support for CommonJ Timer and WorkManager - #12844 Support Concurrency Utilities for Java EE (JSR-236)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6735e2387c3aba886228120eab7aa0cd9c26647b","closed","in: core,","spring-projects-issues","2018-08-02T10:21:55Z","2019-01-11T12:50:41Z"
"","21653","Turn SchedulingTaskExecutor into marker interface with default prefersShortLivedTasks implementation [SPR-17116]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-17116](https://jira.spring.io/browse/SPR-17116?redirect=false)** and commented  `SchedulingTaskExecutor` is effectively a marker interface its implementations typically implement `prefersShortLivedTasks()` to always return `true`, with callers assuming `false` for regular `TaskExecutor` implementations. Let's make this clearer and more convenient by introducing a corresponding default method.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/50550717d68449c310bfad3acd3e03849ccf22f1","closed","in: core,","spring-projects-issues","2018-08-02T10:15:06Z","2018-08-17T09:42:44Z"
"","21632","Revise BeanFactory vs ApplicationContext section in reference docs [SPR-17095]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-17095](https://jira.spring.io/browse/SPR-17095?redirect=false)** and commented  The discussion about the `BeanFactory` versus `ApplicationContext` container levels is incomplete and outdated, needing an overhaul and references to concrete implementations.  ---  **Issue Links:** - #21668 InitializingBean/DisposableBean javadoc should not just refer to singletons  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/514c28b7c02591bf28b1eeeaeab14d2d128d4a30, https://github.com/spring-projects/spring-framework/commit/8277ea579485412bd7a1623cc22c94289fb72d68, https://github.com/spring-projects/spring-framework/commit/7ac99c1c2d5844fec6c33e6b86e2c9eb38e4c5a6  **Backported to:** [4.3.19](https://github.com/spring-projects/spring-framework/milestone/168?closed=1)","closed","type: documentation,","spring-projects-issues","2018-07-26T16:42:09Z","2019-01-11T12:45:58Z"
"","21625","MethodBeforeAdviceInterceptor should implement BeforeAdvice marker [SPR-17088]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-17088](https://jira.spring.io/browse/SPR-17088?redirect=false)** and commented  Since `AfterReturningAdviceInterceptor` implements the `AfterAdvice` marker interface, `MethodBeforeAdviceInterceptor` should implements `BeforeAdvice` correspondingly.   ---  **Backported to:** [4.3.19](https://github.com/spring-projects/spring-framework/milestone/168?closed=1)","closed","in: core,","spring-projects-issues","2018-07-25T17:57:38Z","2018-07-26T08:09:31Z"
"","21623","Introduce ResolvableType.toClass() shortcut [SPR-17086]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-17086](https://jira.spring.io/browse/SPR-17086?redirect=false)** and commented  With a `ResolvableType` argument coming into a method, there is often a need to use it as a `Class`, e.g. for basic assignability checks or for comparison purposes. Let's introduce a `Resolvable.toClass()` method which serves as a convenient non-null shortcut for `resolve(Object.class)` (since the basic `resolve()` method is nullable, a fallback has to be specified, and we can simply assume `Object.class` as fallback for `toClass()`).  For many purposes, this is also an alternative to `ResolvableType.getRawClass()`: non-null and also taking resolved top-level type variables into account. However, if code wants to actually check the top-level raw type in a parameterized arrangement, e.g. expecting a fixed outer collection declaration, then `getRawClass()` remains the right method to use, typically skipping non-null results from it.   --- No further details from [SPR-17086](https://jira.spring.io/browse/SPR-17086?redirect=false)","closed","type: enhancement,","spring-projects-issues","2018-07-25T11:06:55Z","2018-07-26T08:09:32Z"
"","21613","Programmatic ObjectProvider retrieval through BeanFactory API [SPR-17075]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-17075](https://jira.spring.io/browse/SPR-17075?redirect=false)** and commented  After several discussions around #21511, #16046 and #13532, it turns out that programmatic retrieval of an `ObjectProvider` handle - as opposed to it just being obtainable through annotation-driven injection - would significantly enrich functional bean definitions.  So as of 5.1, `BeanFactory.getBeanProvider` provides a convenient and powerful enough entry point for the time being. Stream access to multiple matching beans is covered in #16046 now; just programmatic bean retrieval with qualifiers is left to #13532 still.  ---  **Issue Links:** - #21511 Support for Supplier as a deferred bean creation - #16046 ObjectProvider iterable/stream access for ""beans of type"" resolution in `@Bean` methods - #16761 Add generics / parameterized type support to ListableBeanFactory getBeanNamesForType/getBeansOfType methods - #13532 Convenient programmatic bean retrieval with qualifiers - #15860 BeanFactory lacks method for getting bean by type with specified constructor arguments","closed","type: enhancement,","spring-projects-issues","2018-07-23T12:11:59Z","2019-01-13T04:35:13Z"
"","21606","Tighten (IntroductionAware)MethodMatcher contract [SPR-17068]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-17068](https://jira.spring.io/browse/SPR-17068?redirect=false)** and commented  `MethodMatcher` historically accepts a `null` target class despite usually being invoked with a non-null class (the method's declaring class if no explicit target class given) by `DefaultAdvisorChainFactory`. Tightening this towards a non-null guarantee, also using the same fallback in `ReflectiveMethodInvocation`'s dispatch to a dynamic `MethodMatcher`, simplifies some matcher implementations and provides a clearer experience overall.  `IntroductionAwareMethodMatcher` requires some explicit `IntroductionAdvisor` checks across the advisor chain which are worth avoiding if no such method matcher is applicable to begin with. For this to work, `MethodMatchers.union/intersect` needs to differentiate between regular and introduction-aware method matchers, providing dedicated aggregate types for each. `DefaultAdvisorChainFactory` may then lazily determine introductions only when encountering an actual `IntroductionAwareMethodMatcher`.   ---  **Affects:** 5.0.8  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/252f52ab07d524d0a35cfa884d5bbf53a6abce61","closed","in: core,","spring-projects-issues","2018-07-19T22:01:24Z","2018-07-26T08:09:34Z"
"","21602","Cache order result per Class in OrderUtils (for AnnotationAwareOrderComparator) [SPR-17064]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-17064](https://jira.spring.io/browse/SPR-17064?redirect=false)** and commented  As a follow-up to #21271, it turns out that `AnnotationAwareOrderComparator` can become a hotspot. Caching annotation-derived order results per `Class`, ideally at `OrderUtils` level, should provide significant benefits in scenarios with repeated sort attempts.  ---  **Affects:** 5.0.6  **Issue Links:** - #21271 Avoid repeated superclass introspection in AnnotationUtils.findAnnotation - #21508 Resolved ApplicationListener event type should get cached - #21840 Unnecessary sort in AbstractApplicationEventMulticaster  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4d3a899a53c6842a9dccede91170c25f90dc4451, https://github.com/spring-projects/spring-framework/commit/d0bbbf4cae48da18c7778b196e2c98f2ac940fae","closed","type: enhancement,","spring-projects-issues","2018-07-19T09:02:58Z","2019-01-11T12:47:27Z"
"","21566","Publicly expose ResolvableType in RootBeanDefinition [SPR-17028]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-17028](https://jira.spring.io/browse/SPR-17028?redirect=false)** and commented  As noted in #18463, `RootBeanDefinition` currently allows for setting a target type as `ResolvableType` but has no public accessor to retrieve it as such. Let's close that gap for 5.1.  ---  **Issue Links:** - #18463 Provide registerBean variants based on ResolvableType - #19149 Allow programmatic registration of bean definitions with a ResolvableType - #21601 Use available type information in functional bean definitions for resolving FactoryBean type  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3a4b5c2ade840427e983a75cf2ff79939ced339c","closed","type: enhancement,","spring-projects-issues","2018-07-10T17:24:12Z","2019-01-11T12:49:42Z"
"","21540","LocalSessionFactoryBean and HibernateTransactionManager for JPA EntityManagerFactory setup [SPR-17002]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-17002](https://jira.spring.io/browse/SPR-17002?redirect=false)** and commented  As outlined in #21494 and #21454, it is desirable for the Hibernate `LocalSessionFactoryBean` to be usable for JPA `EntityManagerFactory` setup as well: that is, in a first-class fashion with out-of-the-box integration with other JPA facilities such as `@PersistenceContext` injection, making it a replacement for `LocalContainerEntityManagerFactoryBean` for Hibernate JPA setup purposes. The same goes for `HibernateTransactionManager` which should work fine as a replacement for `JpaTransactionManager` in such a scenario, just with stronger Hibernate-specific behavior.  ---  **Issue Links:** - #20850 Support for Hibernate ORM 5.3 - #20852 Support Hibernate 5.3's ManagedBeanRegistry for dependency injection - #21454 Session from SessionFactory.getCurrentSession not synchronized with current JPA transaction on Hibernate 5.2 - #19024 Hibernate5 LocalSessionFactoryBean does not translate javax.persistence exceptions - #21494 Propagate read-only status to Hibernate Session through setDefaultReadOnly - #21724 Mention asynchronous JPA bootstrapping in the reference documentation - #21749 HibernateTransactionManager should lazily acquire JDBC Connection (like HibernateJpaDialect) - #21553 HibernateJpaDialect cannot translate JDBCException to custom DataAccessException","closed","type: enhancement,","spring-projects-issues","2018-07-03T21:38:26Z","2019-01-11T12:50:16Z"
"","21533","Consistent throwing of HttpMessageNotReadableException in HttpMessageConverter implementations [SPR-16995]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-16995](https://jira.spring.io/browse/SPR-16995?redirect=false)** and commented  Some `HttpMessageConverter` are inconsistent in their throwing of `IOException` versus `HttpMessageNotReadableException`, unnecessarily wrapping the former or throwing a mix of the latter and the general `HttpMessageConversionException`. Most importantly, `ProtobufHttpMessageConverter` needs a thorough revision here, as well as the JAXB2 based converters.  Let's streamline this for 5.1 and backport it to 5.0.8 as far as feasible.  ---  **Affects:** 5.0.7  **Issue Links:** - #18023 Read large data using InputStreamResource at ResourceHttpMessageConverter - #18170 HttpMessageConverterExtractor should wrap HttpMessageNotReadableException in RestClientExceptions - #20147 Pass input message to HttpMessageNotReadableException for better logging  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ac1e2879e54896030d926696518c9ca65c927d37, https://github.com/spring-projects/spring-framework/commit/d08b72a75a4671f456f240eff9ca39885be7d475","closed","type: task,","spring-projects-issues","2018-07-02T18:37:30Z","2019-01-11T16:06:58Z"
"","21532","ConcurrentReferenceHashMap does not enforce visibility of cached EntrySet [SPR-16994]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-16994](https://jira.spring.io/browse/SPR-16994?redirect=false)** and commented  `ConcurrentReferenceHashMap.entrySet()` tries to reuse a cached `EntrySet` instance but stores it in a regular field which doesn't guarantee visibility to other threads. Operating against a `volatile` field is the cleaner arrangement here.  Also, `ConcurrentReferenceHashMap` does not implement `isEmpty()`, relying on `AbstractMap`'s computation of the full size. This can be optimized by simply backing out once a non-empty hash segment has been found.  ---  **Affects:** 4.3.18, 5.0.7  **Issue Links:** - #16066 Memory leak in ConcurrentReferenceHashMap - #16342 ConcurrentReferenceHashMap doesn't limit upper concurrency level - #21126 Inconsistent handling of null values through Java 8 accessors in ConcurrentReferenceHashMap  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/44b2657c8effc6eb5e8724a033c7a2f71b8dd6d0, https://github.com/spring-projects/spring-framework/commit/ce0323fa8c5bb037308a84881269f97ec611cfa5, https://github.com/spring-projects/spring-framework/commit/779cf8d240941118e0097aa47984c9b414e45050  **Backported to:** [4.3.19](https://github.com/spring-projects/spring-framework/milestone/168?closed=1)","closed","in: core,","spring-projects-issues","2018-07-02T17:38:36Z","2019-01-11T16:06:20Z"
"","21465","LinkedCaseInsensitiveMap should explicitly implement putIfAbsent and computeIfAbsent [SPR-16926]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-16926](https://jira.spring.io/browse/SPR-16926?redirect=false)** and commented  Explicit implementations of `putIfAbsent` and `computeIfAbsent` allow for reusing the converted key within those steps. Also, both variants should return the old value (if any) even for a differently cased key; this also needs to be revised in the regular `put` implementation.  ---  **Issue Links:** - #12624 LinkedCaseInsensitiveMap does not correctly implement putAll() - #18553 LinkedCaseInsensitiveMap doesn't implement getOrDefault properly - #21120 JdbcTemplate.queryForMap should return first value of equally named columns","closed","type: enhancement,","spring-projects-issues","2018-06-11T08:43:38Z","2021-04-27T12:04:12Z"
"","21420","AbstractRequestLoggingFilter.isIncludeHeaders() is accidentally public [SPR-16881]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-16881](https://jira.spring.io/browse/SPR-16881?redirect=false)** and commented  The `includeHeaders` property introduced in #18818 accidentally has a `public` getter whereas all other such properties on `AbstractRequestLoggingFilter` are protected.  ---  **Affects:** 4.3.17, 5.0.6  **Issue Links:** - #18818 Add option to log headers to AbstractRequestLoggingFilter  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1838, and commits https://github.com/spring-projects/spring-framework/commit/a2d7cc7a69550a106a76fdd347fdf15a85edef23, https://github.com/spring-projects/spring-framework/commit/c75423216cc5dd710350d56686aae750a2a130ef  **Backported to:** [4.3.18](https://github.com/spring-projects/spring-framework/milestone/167?closed=1)","closed","type: bug,","spring-projects-issues","2018-05-29T12:36:54Z","2019-01-11T17:07:13Z"
"","21331","Restore YamlProcessor duplicate key handling against SnakeYAML 1.18+ (plus compatibility with 1.21) [SPR-16791]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-16791](https://jira.spring.io/browse/SPR-16791?redirect=false)** and commented  SnakeYAML breaks our `StrictMapAppenderConstructor` by using a different `createDefaultMap()` signature as of SnakeYAML 1.21. It turns out that beyond this current issue, duplicate key detection is broken for SnakeYAML 1.18+ since the YAML parser has some duplicate key handling built in now, never calling `Map.put` a second time and therefore bypassing our check on the decorated map.  Let's upgrade to SnakeYAML's new policy as of Spring Framework 5.0.6, using `LoaderOptions.setAllowDuplicateKeys(false)`, deprecating our now pointless `StrictMapAppenderConstructor` (and removing it altogether for 5.1). [Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll), [Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson), this might affect Boot as well (remembering #18082).  ---  **Affects:** 5.0.5  **Issue Links:** - #18082 YamlProcessor subclasses can no longer instantiate StrictMapAppenderConstructor - #21310 YamlPropertiesFactoryBean loses entries in the YAML document that have an empty array value","closed","in: core,","spring-projects-issues","2018-05-03T15:30:25Z","2019-01-11T16:39:15Z"
"","21320","Expose AspectJ 1.9(.1) in Maven POMs [SPR-16780]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-16780](https://jira.spring.io/browse/SPR-16780?redirect=false)** and commented  While Spring Framework 5.0.x keeps exposing AspectJ 1.8.13 in its Maven POMs, just using AspectJ 1.9 for JDK 9 compatibility in the framework build, we can fully upgrade to AspectJ 1.9 in Spring Framework 5.1... in particular with AspectJ 1.9.1 being available now.  ---  **Affects:** 5.0.5  **Issue Links:** - #21227 Upgrade to AspectJ 1.9 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d979bbad2db223ae8a72697b484418d3dc29b554","closed","in: core,","spring-projects-issues","2018-04-27T16:37:51Z","2019-01-11T16:40:15Z"
"","21319","Consistent target method resolution for event and caching expressions [SPR-16779]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-16779](https://jira.spring.io/browse/SPR-16779?redirect=false)** and commented  Along with #21298, it turned out that target method resolution for event and caching resolution was not entirely consistent. Most importantly, they maintained a rather expensive separate `ConcurrentHashMap` cache for target methods which is easy enough to fold into `ApplicationListenerMethodAdapter` and `CacheOperationContext` themselves.  ---  **Affects:** 5.0.5  **Issue Links:** - #21298 AopUtils.getMostSpecificMethod should expose dynamic proxy class methods","closed","type: enhancement,","spring-projects-issues","2018-04-27T15:27:44Z","2019-01-11T16:41:49Z"
"","21298","AopUtils.getMostSpecificMethod should expose dynamic proxy class methods [SPR-16757]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-16757](https://jira.spring.io/browse/SPR-16757?redirect=false)** and commented  After the changes for #21218, `AopUtils.getMostSpecificMethod` does not resolve proxy class methods anymore. It turns out that this is a regression for some scenarios, in particular for dynamic proxies as targets with their redeclaration of all interface methods at the most specific level. In order for `Method.getDeclaringClass()` to expose the concrete type again in such scenarios, we should rather revisit that algorithm to not specifically handle proxy class methods, just consistently skipping resolution for CGLIB cases (in particular configuration classes and lookup-method classes) as we did in a few places before already.  ---  **Affects:** 5.0.5  **Issue Links:** - #21264 AspectJ execution pointcut does not detect methods in superinterface anymore - #21216 Comprehensively cache annotated methods for interfaces and superclasses - #21218 Mixed use BeanNameAutoProxyCreator and AnnotationAwareAspectJAutoProxyCreator to proxy same bean - #21343 AspectJ annotation pointcuts fail to evaluate against interface-based proxies - #21541 Spring 5.x DataSource proxying does not work with Oracle UCP on JDK 9+ - #21319 Consistent target method resolution for event and caching expressions","closed","type: regression,","spring-projects-issues","2018-04-23T12:04:54Z","2019-01-11T16:43:29Z"
"","21280","AnnotationAwareOrderComparator uses Order instead of Priority for DecoratingProxy [SPR-16739]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-16739](https://jira.spring.io/browse/SPR-16739?redirect=false)** and commented  `AnnotationAwareOrderComparator.getPriority` delegates to `OrderUtils.getOrder` instead of `OrderUtils.getPriority` for a `DecoratingProxy` instance.   ---  **Affects:** 4.3.16, 5.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8d67a982ece90ed00deb98014656c6c4cb35a50e, https://github.com/spring-projects/spring-framework/commit/2f4010e8d33dcceaaeff8c8c06a8c07508dfec1d, https://github.com/spring-projects/spring-framework/commit/f800df12e318ce6341fed9a629db514960db708c  **Backported to:** [4.3.17](https://github.com/spring-projects/spring-framework/milestone/166?closed=1)","closed","in: core,","spring-projects-issues","2018-04-17T21:33:42Z","2018-05-08T08:07:34Z"
"","21258","Revise JCA MessageEndpoint exception logging and propagation [SPR-16717]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-16717](https://jira.spring.io/browse/SPR-16717?redirect=false)** and commented  As noted on the referenced pull request, `JmsMessageEndpoint` as well as `GenericMessageEndpoint` deal with exceptions in a suboptimal way... not only in the `finally` block but generally when propagating exceptions from `onMessage` without any logging. This is worth revisiting according to JCA exception handling limitations.   ---  **Affects:** 4.3.16, 5.0.5  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/1784  **Backported to:** [4.3.17](https://github.com/spring-projects/spring-framework/milestone/166?closed=1)","closed","type: enhancement,","spring-projects-issues","2018-04-11T22:33:06Z","2018-05-08T08:07:34Z"
"","21227","Upgrade to AspectJ 1.9 GA [SPR-16686]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-16686](https://jira.spring.io/browse/SPR-16686?redirect=false)** and commented  AspectJ 1.9 is finally GA!  ---  **Affects:** 5.0.4  **Issue Links:** - #18941 Compatibility with JDK 9 GA - #20626 Upgrade to AspectJ 1.9 RC1 - #21320 Expose AspectJ 1.9(.1) in Maven POMs  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/40d5e7cc80c3376cc0c3cd5cfaf89253e17d2ba6","closed","in: core,","spring-projects-issues","2018-04-03T15:32:45Z","2019-01-11T15:03:44Z"
"","21226","Upgrade framework build to JPA 2.2 and JTA 1.3 [SPR-16685]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-16685](https://jira.spring.io/browse/SPR-16685?redirect=false)** and commented  ---  **Issue Links:** - #18061 Compatibility with Bean Validation 2.0 and JPA 2.2 - #21015 Upgrade framework build to Tomcat 9.0 and Undertow 2.0 - #20850 Support for Hibernate ORM 5.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e170cb0f79fef17d43e769a23e66adaba9dc2c19","closed","type: task,","spring-projects-issues","2018-04-03T12:43:04Z","2019-01-11T15:03:37Z"
"","21216","Comprehensively cache annotated methods for interfaces and superclasses [SPR-16675]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-16675](https://jira.spring.io/browse/SPR-16675?redirect=false)** and commented  `AnnotationUtils` has had an internal annotated interface cache (#12286) as well as a general lookup cache (#16501) for a while. However, recent performance benchmarks showed that further significant gain can be achieved by turning the interface cache into an annotated base type cache, caching metadata about superclasses as well... in particular about non-annotated base classes that are never worth searching. We're also narrowing potential base type lookups to a set of candidate methods that carry any annotations to begin with, avoiding an often `NoSuchMethodException`-triggering `Class.getMethod` lookup for a base method in favor of matching against the candidate `Method` set from our cache.  ---  **Affects:** 5.0.4  **Issue Links:** - #12286 Major performance slowdown in AnnotationUtils.findAnnotation - #12106 Transactional attribute is not resolved on CgLib proxies created by FactoryBeans - #16501 ReflectionUtils slow down application startup on WebSphere - #21208 Reduce ClassUtils.forName overhead (in particular for annotation introspection purposes) - #21264 AspectJ execution pointcut does not detect methods in superinterface anymore - #21298 AopUtils.getMostSpecificMethod should expose dynamic proxy class methods - #21218 Mixed use BeanNameAutoProxyCreator and AnnotationAwareAspectJAutoProxyCreator to proxy same bean - #21271 Avoid repeated superclass introspection in AnnotationUtils.findAnnotation - #21472 Avoid unnecessary synthesizable annotation processing  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2018-03-31T12:24:07Z","2019-01-14T04:31:35Z"
"","21212","SimpleMailMessage's handling of to/cc/bcc arrays is inconsistent [SPR-16671]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-16671](https://jira.spring.io/browse/SPR-16671?redirect=false)** and commented  `SimpleMailMessage` has some pretty old inconsistent handling of its `to`, `cc` and `bcc` arrays: copying them in the copy constructor but passing the original (mutable) arrays on in `copyTo(MailMessage)`, and wrongly checking the array elements for `null` in the `hashCode` implementation. Let's finally streamline those in 5.0.5 and 4.3.15 towards consistent array copying and consistent use of `ObjectUtils.nullSafeHashCode`.  Last but not least, `SimpleMailMessage.hashCode()` should not include `text` which is the most expensive to calculate and very unlikely to change if all other fields are the same anyway.   ---  **Affects:** 4.3.14, 5.0.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4cf179535908846e918ab2bfeb3f49a2b82398e2, https://github.com/spring-projects/spring-framework/commit/1cc513d7db1ae20a1cd25a798b875bb7fabb231f  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","type: bug,","spring-projects-issues","2018-03-29T21:08:01Z","2018-04-03T20:34:29Z"
"","21187","Use Map.forEach instead of manual Map.Entry iteration wherever possible [SPR-16646]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-16646](https://jira.spring.io/browse/SPR-16646?redirect=false)** and commented  As a leftover of our general Java 8+ codebase revision and a follow-up to several recent polishing commits, one grand sweep is missing still: the use of `Map.forEach` instead of manual `Map.Entry` iteration in all places where no return clauses or checked exceptions are involved. That said, we do not switch to use of the `Stream` API for simple scenarios yet, just to streamlined map entry iteration for the time being.  Inspired by https://github.com/spring-projects/spring-framework/pull/1752, broadly applied to existing `Map.Entry` iteration cases as well.  ---  **Affects:** 5.0.4  **Issue Links:** - #17780 Upgrade framework codebase to JDK 8+  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e3d0ef6015f14ceb7baf380ca0598904d75731d5, https://github.com/spring-projects/spring-framework/commit/4aae6a6dda54dc594285b3cc4df93fb6ff041c53","closed","type: task,","spring-projects-issues","2018-03-26T21:56:50Z","2019-01-11T15:09:07Z"
"","21762","EL1072 when evaluating compiled expression using method SpelExpression.getValue(Object rootObject, Class expectedResultType) [SPR-17229]","**[Juan Domínguez González](https://jira.spring.io/secure/ViewProfile.jspa?name=jdomigon)** opened **[SPR-17229](https://jira.spring.io/browse/SPR-17229?redirect=false)** and commented  When using method SpelExpression.getValue(Object rootObject, Class\ expectedResultType) for evaluating an expression involving a simple boolean comparison it fails when using the bytecode compiled expression.  The trace shows a NPE in Operator.equalityCheck, accesing the evaluation context for a typeComparator:  `org.springframework.expression.spel.ast.Operator.equalityCheck(Operator.java:222)`  `spel.Ex2141.getValue(Unknown Source)`  `org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:209)`  The problem, apparently resides in method `SpelExpression.getValue(Object, Class)`. In line 209, it calls method `getValue(Object, EvaluationContext)` on its `compiledAst` but passes null instead of an evaluation context.   ---  **Affects:** 4.3.16  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/51cee658d5da9de2f0749129d7f0904fd0e2af91, https://github.com/spring-projects/spring-framework/commit/e332e32a88e0a5356dbf212290ea6f49cf47c589, https://github.com/spring-projects/spring-framework/commit/1a626ab948d7a5d12d024fa7a483ee450111f60a  **Backported to:** [4.3.19](https://github.com/spring-projects/spring-framework/milestone/168?closed=1)","closed","in: core,","spring-projects-issues","2018-08-30T11:11:32Z","2018-09-07T13:48:35Z"
"","21468","EL1044E when parsing expression combining null-safe and list navigation [SPR-16929]","**[Juan Domínguez González](https://jira.spring.io/secure/ViewProfile.jspa?name=jdomigon)** opened **[SPR-16929](https://jira.spring.io/browse/SPR-16929?redirect=false)** and commented  When parsing an expression which combines null-safe and list/array navigation it fails with a parse exception.  Example: accessing first element of a (possibly null) list/array of strings: `stringList?[0]`  `org.springframework.expression.spel.SpelParseException: EL1041E: After parsing a valid expression, there is still more data in the expression: 'select(?[)`  I'm not sure if the syntax I've used is correct, but, to me it seems the most natural one.  Combining the null safe operator and navigation using get, seems to work: e.j: `stringList?.get(0)`  Alternative syntaxes, such as `(stringList?)[0]` or `stringList?.[0]`, also fail to compile..   ---  **Affects:** 4.3.16","open","in: core,","spring-projects-issues","2018-06-11T12:49:30Z","2022-04-27T16:48:51Z"
"","21217","Add ""secure"" attribute to RequestMapping annotation [SPR-16676]","**[Joshua White](https://jira.spring.io/secure/ViewProfile.jspa?name=joshuawhite929)** opened **[SPR-16676](https://jira.spring.io/browse/SPR-16676?redirect=false)** and commented  I have a use case where I only want to have a controller handle a request if the request is over a secure channel.  For this use case, secure and insecure requests are both valid and need to be handled differently.  Adding ""secure"" attribute, possible with an Enum indicating true/false to the RequestMapping would allow me to do this in a declarative way rather than having to check the servletRequest  (ex. servletRequest.isSecure()) for this attribute directly.  If this seems reasonable, I'd like to discuss the approach and submit a pull request.    ---  **Affects:** 5.0.4","closed","type: enhancement,","spring-projects-issues","2018-03-31T17:04:13Z","2020-04-07T06:16:20Z"
"","21259","UriComponentsBuilder does not encode ""+"" properly [SPR-16718]","**[Joseph Mason](https://jira.spring.io/secure/ViewProfile.jspa?name=joeyvmason)** opened **[SPR-16718](https://jira.spring.io/browse/SPR-16718?redirect=false)** and commented  I noticed this issue after upgrading from Spring 4 to Spring 5. Basically, certain API calls we had been making with no issues before starting failing. Looking into it deeper, the issue is that the `UriComponentsBuilder` is not functioning the same as it was before. It's not clear to me if this is a bug or if there's a different way that this class needs to be used now.  This test passes when using Spring 4:  ```java     @Test     public void shouldEncodePlusSignInUrlProperly() throws Exception {         //given         UriComponentsBuilder uriComponentsBuilder = UriComponentsBuilder.newInstance()                 .scheme(""https"")                 .host(""test.com"")                 .port(443);          //when         uriComponentsBuilder.queryParam(""foo"", ""bar+"");          //then         assertThat(uriComponentsBuilder.buildAndExpand().encode().toString()).isEqualTo(""https://test.com:443?foo=bar%2B"");     } ```  But when using Spring 5, it will fail. Instead of this:  ```java https://test.com:443?foo=bar%2B ```  it produces:  ```java https://test.com:443?foo=bar+ ```  ---  **Affects:** 5.0 GA, 5.0.1, 5.0.2, 5.0.3, 5.0.4, 5.0.5  **Issue Links:** - #19394 UriComponentBuilder doesn't work with encoded HTTP URL having '+'. - #20968 [docs] Explain URI template encoding - #21577 Support stricter encoding of URI variables in UriComponents (_**""is superseded by""**_)  0 votes, 6 watchers","closed","in: web,","spring-projects-issues","2018-04-11T23:10:25Z","2019-05-16T14:47:25Z"
"","21670","Use parameters declared in consumes or produces condition to narrow the request mapping [SPR-17133]","**[Jose Montoya](https://jira.spring.io/secure/ViewProfile.jspa?name=jam01)** opened **[SPR-17133](https://jira.spring.io/browse/SPR-17133?redirect=false)** and commented  At [Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)'s request I'm creating this ticket with the intention to put forward a cleaner description of use cases to maybe facilitate discussion. This issue that has been argued before in #17949 and #15531 and sprung an atom specific one #21578. There's also a StackOverflow question related to this topic [here](https://stackoverflow.com/questions/32071006/does-http-content-negotiation-respect-media-type-parameters).  As shown by [RFC 7231 Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content Section 5.3.2 Accept](https://tools.ietf.org/html/rfc7231#section-5.3.2), media type parameters are to be included in the content negotiation process. Even if perhaps not called out explicitly in that section it is unarguably most evident that parameters participate in the process from the example in Page 39, where `text/plain;format=flowed` is considered independently from `text/plain`. If we have consensus with that claim then we can move to some use cases. Following the logic from the RFC, but without adding quality attributes at this point:  #### Setup:  For a given resource the server explicitly Produces `type/sub; param1=foo` only, which is implicitly included in `type/sub` and `type/*`  ##### Use case 1, sub-type wildcard:  The client Accepts `type/*` The server should return the content as identified by `type/sub; param1=foo`, as it's the most specific one included.  ##### Use case 2, specific sub-type:  The client Accepts `type/sub` Same as UC-1.  ##### Use case 3, specific param match:  The client Accepts `type/sub; param1=foo` The server should return the content as identified by `type/sub; param1=foo`, as it's an exact match.  ##### Use case 4, specific param no match:  The client Accepts `type/sub; param1=bar` The server should return a 406 (Not Acceptable), the param1 values are not equal.  ##### Use case 5, multiple specific param no match:  The client Accepts `type/sub; param1=foo; param2=bar` The server should return a 406 (Not Acceptable), the param1 vales are equal, but param2 means the client only accepts something more specific than what the server produces. What the client wants does not include what the server produces.  ## First issue:  In [spring-core/MimeType](https://github.com/spring-projects/spring-framework/blob/5.0.x/spring-core/src/main/java/org/springframework/util/MimeType.java) there are two methods for comparing media types `isCompatibleWith` and `includes`, none of them take into consideration parameters. UC-4 and UC-5 currently fail by returning `200 (OK)` with the content of `type/sub; param1=foo` but headers `Content-Type=type/sub; param1=bar` and `Content-Type=type/sub; param1=foo; param2=bar`, respectively. This is obviously erroneous behavior.  ### Fix:  `MimeType.isCompatibleWith` should be enhanced to consider parameters as follows: ""Parameters are incompatible only when they contain the same parameter with different values."" `MimeType.includes` should be enhanced to consider parameters as follows: ""Parameters are not included when this MimeType contains more parameters than the supplied, when this contains a parameter that the supplied does not, or when they both contain the same parameter with different values."" This would not be inconsistent with both methods' current implementation.  ## Second issue  [spring-webmvc/ProducesRequestCondition](https://github.com/spring-projects/spring-framework/blob/5.0.x/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/ProducesRequestCondition.java)'s `matchMediaType` method utilizes `isCompatibleWith` which is a symmetric comparison, ie. even if we introduced parameters into its logic, UC-5 would fail by returning `200 (OK)` with the content of `type/sub; param1=foo` but with header `Content-Type=type/sub; param1=foo; param2=bar`. This should be an asymmetric comparison because even though two media types may be mutually compatible the client may receive something that is not included by what it is explicitly requesting.  ### Fix:  `ProducesRequestCondition.matchMediaType` should be modified to use the enhanced `includes` instead of `isCompatibleWith`.  ---  **Affects:** 5.1 RC1  **Reference URL:** #15531  **Issue Links:** - #21578 Support for the ""type"" parameter for Atom Feed/Entry message conversion  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1920  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2018-08-06T20:51:28Z","2021-07-26T04:30:37Z"
"","21553","HibernateJpaDialect cannot translate JDBCException to custom DataAccessException [SPR-17015]","**[Joram Agten](https://jira.spring.io/secure/ViewProfile.jspa?name=joram.agten)** opened **[SPR-17015](https://jira.spring.io/browse/SPR-17015?redirect=false)** and commented  If using both jdbc and hibernate-orm (hibernate 5) in a spring project, only jdbc translates db error codes to custom `DataAccessException` when configuring them in `sql-error-codes.xml`. Hibernate-orm only maps to the standard set of `DataAccessException`. In `org.springframework.orm.hibernate3.HibernateExceptionTranslator#convertHibernateAccessException` the `jdbcExceptionTranslator` is used. This allows with the configuration of `sql-error-codes.xml` to map exceptions to custom `DataAccessException` 's  In `org.springframework.orm.hibernate5.HibernateExceptionTranslator#convertHibernateAccessException` (and also the one for hibernate4) this `jdbcExceptionTranslator` is no longer used.  temporary solved with attached `DataAccessExceptionTranslatorHibernateJpaDialect.java` this is then configured as `jpaDialect` on the `entityManagerFactory`  ---  **Affects:** 4.3.13  **Attachments:** - [DataAccessExceptionTranslatorHibernateJpaDialect.java](https://jira.spring.io/secure/attachment/25761/DataAccessExceptionTranslatorHibernateJpaDialect.java) (_1.24 kB_)  **Issue Links:** - #21540 LocalSessionFactoryBean and HibernateTransactionManager for JPA EntityManagerFactory setup - #21494 Propagate read-only status to Hibernate Session through setDefaultReadOnly  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d9e8d3bbe13715ee122757deb896a75c9b8cde1d","closed","type: enhancement,","spring-projects-issues","2018-07-06T08:51:13Z","2019-01-11T12:49:51Z"
"","21717","SimpleClientHttpResponse.close() does not call close() on URLConnection.getInputStream() if SimpleClientHttpResponse.getBody() was not called before [SPR-17181]","**[Jonas Woerlein](https://jira.spring.io/secure/ViewProfile.jspa?name=jonaswoerlein)** opened **[SPR-17181](https://jira.spring.io/browse/SPR-17181?redirect=false)** and commented  We've noticed `SimpleClientHttpResponse.close()` does not call `close()` on `URLConnection.getInputStream()` if `SimpleClientHttpResponse.getBody()` was not called before as the `responseStream` field is lazily initalized within the latter method.  [JDK8 documentation](https://docs.oracle.com/javase/8/docs/technotes/guides/net/http-keepalive.html) states the `InputStream` returned by `URLConnection.getInputStream()` has to be read till the end or explicitly `close()`d to allow the JDK's protocol handler to clean up the connection and put it into a connection cache for reuse by future HTTP requests.  By debugging, we found the `KeepAliveStream` being returned by `URLConnection.getInputStream()` to be created not on calling this method but on parsing the HTTP response.  Caused by this issue, we experience HTTP connections created or reused by a PUT request not being reused for any subsequent requests. This leads to higher network load and increased latency due to additional TLS handshakes.  The requests were emitted with RestTemplate  ```java restTemplate.put(""https://www.example.com/resource"", body) ```  The server responds with something like  ``` HTTP/1.1 200 OK  Connection: Keep-Alive  Content-Length: 61  Content-Type: application/json;charset=utf-8  Date: Tue, 14 Aug 2018 10:37:08 GMT  Keep-Alive: timeout=5, max=100  Server: Apache    ```  So there is a response body, but as it contains no interesting information, taking the status into consideration is sufficient for us.  The current workaround is to read the body into a String but ignore it, like so:  ```java RequestEntity requestEntity = RequestEntity            .put(UriComponentsBuilder.fromHttpUrl(""https://www.example.com/resource"")).build().toUri()).body(body);  restTemplate.exchange(requestEntity, String.class); ```  This way, the `HttpMessageConverterExtractor` calls `SimpleClientHttpResponse.getBody()` and thus initializes the `responseStream` field.  When the `RestTemplate` then `close()`s the SimpleClientHttpResponse, the `responseStream` is also closed.  As we believe creating a String object which is never read is bad practice, we would appreciate the Spring Team to consider changing the behavior in `SimpleClientHttpResponse`. Calling `getBody()` in `close()` if `responseStream` is `null` might be the solution to this issue.  We encountered this issue with version 4.3.12, but it also exists in 5.0.7 so I marked this version as affected. The issue might be related to #12775.  ---  **Affects:** 4.3.18, 5.0.7  **Issue Links:** - #12775 SimpleClientHttpResponse disconnects the underlying HttpURLConnection when closing - #18612 HTTP persistent connections for HTTP Invoker and RestTemplate - #12015 Provide a way to read an InputStream with RestTemplate  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/23fc6f6b1d9a77a5b391502572d137e3bdd7e5f4","closed","type: enhancement,","spring-projects-issues","2018-08-14T14:16:29Z","2019-01-13T20:14:28Z"
"","21324","Bean/@Configuration reverse dependency insight feature [SPR-16784]","**[Jon Schneider](https://jira.spring.io/secure/ViewProfile.jspa?name=jschneider)** opened **[SPR-16784](https://jira.spring.io/browse/SPR-16784?redirect=false)** and commented  I have two cases I run across regularly enough:  1. Configuration of some bean or `@Configuration` fails due to the lack of an injectable resource, generating an unhelpful stack trace like this:  !image-2018-04-30-13-39-55-761.png!  2. Configuration of some bean or `@Configuration` succeeds, but I want to disable the feature in my application and don't know enough about the chain of events that leads to this configuration. For example, I wanted to disable Cassandra persistence in a Spinnaker project last week, and while it is was obvious enough to see Spinnaker Cassandra components logging after a successful app startup, it wasn't easy to track what caused these components to come into existence in the first place.  Build tools have a ""reverse dependency insight"" feature that is used to understand the chain of events that lead to binary dependencies existing in certain configurations, and I think a similar mechanism for Spring-managed beans would also be useful.  !image-2018-04-30-13-42-55-115.png!   ---  **Affects:** 5.0.5  **Attachments:** - [image-2018-04-30-13-39-55-761.png](https://jira.spring.io/secure/attachment/25704/image-2018-04-30-13-39-55-761.png) (_287.90 kB_) - [image-2018-04-30-13-42-55-115.png](https://jira.spring.io/secure/attachment/25702/image-2018-04-30-13-42-55-115.png) (_289.12 kB_)","open","in: core,","spring-projects-issues","2018-04-30T18:42:59Z","2019-01-11T16:40:28Z"
"","21186","Self autowiring does not work for transactional beans [SPR-16645]","**[Jon Rimmer](https://jira.spring.io/secure/ViewProfile.jspa?name=jonrimmer)** opened **[SPR-16645](https://jira.spring.io/browse/SPR-16645?redirect=false)** and commented  The ability for beans to self autowire was added in: #13096  However, this does not work if the bean to self wire is transactional, e.g. has at least one method annotated with `@transactional` when transactions are enabled.  See the linked GitHub project for a very simple reproduction.  ---  **Affects:** 5.0.4  **Reference URL:** https://github.com/jonrimmer/spring-self-autowiring-is-broken  **Issue Links:** - #13096 Support `@Autowired-like` self injection","closed","in: core,","spring-projects-issues","2018-03-26T18:41:29Z","2019-01-14T04:31:41Z"
"","21384","Spring overrides user requested STOMP version  [SPR-16844]","**[Jon Kranes](https://jira.spring.io/secure/ViewProfile.jspa?name=jkranes)** opened **[SPR-16844](https://jira.spring.io/browse/SPR-16844?redirect=false)** and commented  There is currently no way for a client application to set the accepted STOMP version value.  In the org.springframework.messaging.simp.stomp.DefaultStompSession.afterConnected() method, the code calls   ```java accessor.setAcceptVersion(""1.1,1.2""); ```  This overrides any version that the application may have requested in the StompHeaders.   The preferred behavior would be to check the StompHeaders for an ""accept-version"" header and if found use that value instead of the hard-coded ""1.1,1.2"" value.  The specific use case I have for this feature is that there is currently a bug in the Apache Artemis message broker that affects STOMP 1.2 but not STOMP 1.1.  Therefore to avoid this bug I would like to specify STOMP 1.1 but using a Spring based client I am unable to do so.   ---  **Affects:** 5.0.5","closed","type: enhancement,","spring-projects-issues","2018-05-18T12:25:46Z","2018-06-12T15:44:04Z"
"","21265","Incoming JMS not logged correctly by MessagingMessageListenerAdapter [SPR-16724]","**[John](https://jira.spring.io/secure/ViewProfile.jspa?name=john.dorien)** opened **[SPR-16724](https://jira.spring.io/browse/SPR-16724?redirect=false)** and commented  When JMS listerner configured in spring reads JMS from queue/topic it can log the message just by enabling corresponding logger. For produced (outgoing) messages it works without problem. For consumed (incoming) messages logging is done by [MessagingMessageListenerAdapter](https://github.com/spring-projects/spring-framework/blob/19d311dcb251474dfaf731a83ba9a5b53b191068/spring-jms/src/main/java/org/springframework/jms/listener/adapter/MessagingMessageListenerAdapter.java#L75)  in method: onMessage but it is logged after transformation to MessagingMessage which is by default LazyResolutionMessage which means it breaks logging as no payload or headers are logged from this message class. Is there some easy way to log messages and avoud this lazy message?   ---  **Affects:** 4.3.10, 5.0.5","open","in: messaging,","spring-projects-issues","2018-04-13T12:42:41Z","2019-01-11T16:45:14Z"
"","21211","JndiRmiServiceExporter fails to export service on IBM j9 JDK [SPR-16670]","**[John Zimmermann](https://jira.spring.io/secure/ViewProfile.jspa?name=johnz1385)** opened **[SPR-16670](https://jira.spring.io/browse/SPR-16670?redirect=false)** and commented  I have a service which I am attempting to export via the JndiRmiServiceExporter.  \ \ \ \ \ \ \ \ \ \ \ \ \  Since upgrading to Spring 5.x I've encountered the following error with the IBM j9 deployed on WebSphere 9.x. The same code is also deployed on Oracle Weblogic 12.2.1.3 with the Sun/Oracle JDK and works perfectly fine. Has anyone reported a similar issue or are there any suggestions how to go about handling this?  I have temporarily resolved this by using a customized version of Spring's JndiRmiServiceExporter to behave like the 4.x version did .. with the only notable difference is the absence of :  PortableRemoteObject.exportObject(this.exportedObject); PortableRemoteObject.unexportObject(this.exportedObject);  With these re-added, everything behaves correctly. It seems based on github commits these lines were removed in association with JDK9 compatibility.  [3/4/18 19:26:50:041 EST] 00000065 webapp        E com.ibm.ws.webcontainer.webapp.WebApp notifyServletContextCreated SRVE0283E: Exception caught while initializing context: {0} org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.remoting.rmi.JndiRmiServiceExporter#0' defined in class path resource [com/mypackages/clientContext.xml]: Invocation of init method failed; nested exception is javax.naming.NamingException: ClientAdminService [Root exception is java.rmi.NoSuchObjectException: object not exported] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1710) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:583) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:502) at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:312) at org.springframework.beans.factory.support.AbstractBeanFactory$$Lambda$24.0000000017529EF0.getObject(Unknown Source) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:310) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:760) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:868) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:144) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:109) at com.mypackages.ApplicationContextHolder.\(ApplicationContextHolder.java:33) at com.mypackages.ApplicationContext.getInstance(ApplicationContext.java:63) at com.mypackages.ApplicationContextLoaderListener.contextInitialized(ApplicationContextLoaderListener.java:41) at com.mypackages.LoggingServiceContextListener.contextInitialized(LoggingServiceContextListener.java:49) at com.ibm.ws.webcontainer.webapp.WebApp.notifyServletContextCreated(WebApp.java:1834) at com.ibm.ws.webcontainer.webapp.WebAppImpl.initialize(WebAppImpl.java:442) at com.ibm.ws.webcontainer.webapp.WebGroupImpl.addWebApplication(WebGroupImpl.java:88) at com.ibm.ws.webcontainer.VirtualHostImpl.addWebApplication(VirtualHostImpl.java:171) at com.ibm.ws.webcontainer.WSWebContainer.addWebApp(WSWebContainer.java:904) at com.ibm.ws.webcontainer.WSWebContainer.addWebApplication(WSWebContainer.java:789) at com.ibm.ws.webcontainer.component.WebContainerImpl.install(WebContainerImpl.java:427) at com.ibm.ws.webcontainer.component.WebContainerImpl.start(WebContainerImpl.java:719) at com.ibm.ws.runtime.component.ApplicationMgrImpl.start(ApplicationMgrImpl.java:1247) at com.ibm.ws.runtime.component.DeployedApplicationImpl.fireDeployedObjectStart(DeployedApplicationImpl.java:1514) at com.ibm.ws.runtime.component.DeployedModuleImpl.start(DeployedModuleImpl.java:704) at com.ibm.ws.runtime.component.DeployedApplicationImpl.start(DeployedApplicationImpl.java:1096) at com.ibm.ws.runtime.component.ApplicationMgrImpl.startApplication(ApplicationMgrImpl.java:799) at com.ibm.ws.runtime.component.ApplicationMgrImpl$5.run(ApplicationMgrImpl.java:2315) at com.ibm.ws.security.auth.ContextManagerImpl.runAs(ContextManagerImpl.java:5466) at com.ibm.ws.security.auth.ContextManagerImpl.runAsSystem(ContextManagerImpl.java:5682) at com.ibm.ws.security.core.SecurityContext.runAsSystem(SecurityContext.java:255) at com.ibm.ws.runtime.component.ApplicationMgrImpl.start(ApplicationMgrImpl.java:2320) at com.ibm.ws.runtime.component.CompositionUnitMgrImpl.start(CompositionUnitMgrImpl.java:436) at com.ibm.ws.runtime.component.CompositionUnitImpl.start(CompositionUnitImpl.java:123) at com.ibm.ws.runtime.component.CompositionUnitMgrImpl.start(CompositionUnitMgrImpl.java:379) at com.ibm.ws.runtime.component.CompositionUnitMgrImpl.access$500(CompositionUnitMgrImpl.java:127) at com.ibm.ws.runtime.component.CompositionUnitMgrImpl$CUInitializer.run(CompositionUnitMgrImpl.java:985) at com.ibm.wsspi.runtime.component.WsComponentImpl$_AsynchInitializer.run(WsComponentImpl.java:524) at com.ibm.ws.util.ThreadPool$Worker.run(ThreadPool.java:1909) Caused by: javax.naming.NamingException: ClientAdminService [Root exception is java.rmi.NoSuchObjectException: object not exported] at com.ibm.ws.naming.jndicos.CNContextImpl.doRebind(CNContextImpl.java:2148) at com.ibm.ws.naming.jndicos.CNContextImpl.rebind(CNContextImpl.java:698) at com.ibm.ws.naming.util.WsnInitCtx.rebind(WsnInitCtx.java:233) at com.ibm.ws.naming.util.WsnInitCtx.rebind(WsnInitCtx.java:245) at org.apache.aries.jndi.DelegateContext.rebind(DelegateContext.java:177) at javax.naming.InitialContext.rebind(InitialContext.java:444) at org.springframework.jndi.JndiTemplate.lambda$rebind$2(JndiTemplate.java:213) at org.springframework.jndi.JndiTemplate$$Lambda$142.000000001C87D5A0.doInContext(Unknown Source) at org.springframework.jndi.JndiTemplate.execute(JndiTemplate.java:91) at org.springframework.jndi.JndiTemplate.rebind(JndiTemplate.java:212) at org.springframework.remoting.rmi.JndiRmiServiceExporter.rebind(JndiRmiServiceExporter.java:132) at org.springframework.remoting.rmi.JndiRmiServiceExporter.prepare(JndiRmiServiceExporter.java:120) at org.springframework.remoting.rmi.JndiRmiServiceExporter.afterPropertiesSet(JndiRmiServiceExporter.java:104) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1769) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1706) ... 41 more Caused by: java.rmi.NoSuchObjectException: object not exported at sun.rmi.transport.ObjectTable.getStub(ObjectTable.java:137) at java.rmi.server.RemoteObject.toStub(RemoteObject.java:117) at com.ibm.rmi.util.JDKBridge.getJRMPStub(JDKBridge.java:89) at com.ibm.rmi.javax.rmi.PortableRemoteObject.toStub(PortableRemoteObject.java:187) at com.ibm.CORBA.iiop.PortableRemoteObject.toStub(PortableRemoteObject.java:61) at javax.rmi.PortableRemoteObject.toStub(PortableRemoteObject.java:127) at com.ibm.ws.naming.util.Helpers.processRemoteObjectForBinding(Helpers.java:700) at com.ibm.ws.naming.jndicos.CNContextImpl.doRebind(CNContextImpl.java:2061) ... 55 more   ---  **Affects:** 5.0.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/78681c6369425a878934780fb6efa4e5ea24bded","closed","type: bug,","spring-projects-issues","2018-03-29T20:11:05Z","2018-04-03T20:34:29Z"
"","21444","Spring Websocket: header simpHeartbeat cannot be read [SPR-16905]","**[Johannes Flügel](https://jira.spring.io/secure/ViewProfile.jspa?name=johannesfluegel)** opened **[SPR-16905](https://jira.spring.io/browse/SPR-16905?redirect=false)** and commented  In  ```java org.springframework.web.socket.messaging.StompSubProtocolHandler ```  it is tried to read the value of the simpHeartbeat header via  ```java long[] heartbeat = (long[]) connectAckHeaders.getHeader(SimpMessageHeaderAccessor.HEART_BEAT_HEADER); ```  (note: HEART_BEAT_HEADER = ""simpHeartbeat"") It always returns null, because the headers of connectAckHeaders only contain the keys simpMessageType, simpConnectMessage, and simpSessionId. If you want to get the value of simpHeartbeat, first get  ```java connectAckHeaders.getHeader(""simpConnectMessage"") ```  which returns a GenericMessage. Its headers contain the key simpHeartbeat.   ---  **Affects:** 4.3.17  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/42b4a2feefa643484b2c0b01ec23998a0b5499df","closed","status: declined,","spring-projects-issues","2018-06-05T14:23:53Z","2019-01-12T16:21:11Z"
"","21311","Prevent unnecessary ExchangeStrategies.withDefaults() in DefaultWebClientBuilder [SPR-16771]","**[Johannes Edmeier](https://jira.spring.io/secure/ViewProfile.jspa?name=joshi)** opened **[SPR-16771](https://jira.spring.io/browse/SPR-16771?redirect=false)** and commented  When the copy constructor of DefaultWebClient is used the exchangeStrategies is first initialized with ExchangeStrategies.withDefaults() and directly updated afterwards so the expensive initializations for the ExchangeStrategies are totally wasted.  To fix this just move the field initialization into the default constructor.   ---  **Affects:** 5.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2a0540cb5f32fad5d45ccae141a23c58306539a4","closed","type: enhancement,","spring-projects-issues","2018-04-25T19:02:30Z","2018-05-08T08:53:23Z"
"","21850","Misleading JavaDoc in ServletUriComponentsBuilder [SPR-17317]","**[johann-sonntagbauer](https://jira.spring.io/secure/ViewProfile.jspa?name=johann-sonntagbauer)** opened **[SPR-17317](https://jira.spring.io/browse/SPR-17317?redirect=false)** and commented  After the upgrade to Spring 5.1.0 the implementation of ServlerUriComponentsBuilder changed that X-Forwarded-* Headers are not respected any longer.   But some JavaDoc comments on the methods suggest otherwise.  This leads to misleading assumptions because JavaDoc and implementation are different.     Example:  #fromCurrentServletMapping  JavaDoc: This method extracts values from ""Forwarded"" and ""X-Forwarded-*"" headers if found  This method delegates to      #fromServletMapping which notes in the JavaDoc that   As of 5.1, this method ignores ""Forwarded"" and ""X-Forwarded-*"" headers ...  ---  **Affects:** 5.1 GA  **Issue Links:** - #21209 Centralize handling of ""Forwarded"" headers to ForwardedHeaderFilter  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bb5c8ed4e8061eaf8ba990f1d54c3a6f761cf868","closed","type: task,","spring-projects-issues","2018-10-01T11:59:56Z","2019-01-11T14:16:56Z"
"","21364","Support request attributes for HttpRequest/ClientHttpRequest [SPR-16824]","**[Joe Grandja](https://jira.spring.io/secure/ViewProfile.jspa?name=jgrandja)** opened **[SPR-16824](https://jira.spring.io/browse/SPR-16824?redirect=false)** and commented  It would be convenient to provide the capability for setting request attributes that would be accessible via `HttpRequest` or `ClientHttpRequest`.  This would allow a `ClientHttpRequestInterceptor` to be able to access one or more request attributes from the provided `HttpRequest`.  The 2 types of request attributes would be per-request and shared attributes (used for all requests).  This feature capability would benefit the new OAuth 2.0 Client features currently being built for Spring Security 5.1.  The specific feature being addressed is the [client_credentials grant](https://github.com/spring-projects/spring-security/issues/4982) flow with [RestTemplate support](https://github.com/spring-projects/spring-security/issues/4920). This grant flow is implemented as follows: 1. The OAuth 2.0 Client (`RestTemplate`) checks to see if it has an Access Token before initiating a protected resource request. 2. If the Access Token is available, than obtain it via the `OAuth2AuthorizedClientService` and add the Bearer scheme Authorization header before making the protected resource request. 3.  If the Access Token is NOT available, than initiate/complete the `client_credentials` grant flow which results in an Access Token being returned from the Authorization Server. Save the Access Token to the `OAuth2AuthorizedClientService` and continue with Step 2.  For this OAuth 2.0 Client flow, we have the following request/shared attributes:  **Per-request attributes:** `clientRegistrationId`, `resourceOwnerPrincipal`  **Shared (all-requests) attributes:** `ClientRegistrationRepository`, `OAuth2AuthorizedClientService`  And the flow is implemented with 2x `ClientHttpRequestInterceptor`: 1. `[OAuth2BearerTokenAuthorizationInterceptor](https://github.com/jgrandja/oauth2-client-demo/blob/master/client-app/src/main/java/org/springframework/security/oauth2/client/web/http/OAuth2BearerTokenAuthorizationInterceptor.java)` - sets the Access Token on the Authorization Header using the Bearer authentication scheme 2. `[OAuth2ClientCredentialsGrantInterceptor](https://github.com/jgrandja/oauth2-client-demo/blob/master/client-app/src/main/java/org/springframework/security/oauth2/client/web/http/OAuth2ClientCredentialsGrantInterceptor.java)` - performs the `client_credentials` grant flow  With the current implementation of `RestTemplate`, these 2x `ClientHttpRequestInterceptor's` need to be created for each request associating the request/shared attributes to each instance. The ideal scenario would be that the implementations would access these request/shared attributes via the passed in `HttpRequest`.  I have this flow working in a [sample](https://github.com/jgrandja/oauth2-client-demo/commit/0a461a0b892b0ac9e0fd023c5c9208e77af909ac) with a custom implementation of `ClientHttpRequestFactory` and the associated `ClientHttpRequest`.  The implementations are mainly in this [package](https://github.com/jgrandja/oauth2-client-demo/tree/master/client-app/src/main/java/org/springframework/security/oauth2/client/web/http) and the user-facing API is in `[OAuth2ClientRestTemplateBuilder](https://github.com/jgrandja/oauth2-client-demo/blob/master/client-app/src/main/java/org/springframework/security/oauth2/client/web/http/OAuth2ClientRestTemplateBuilder.java)`. The sample uses `OAuth2ClientRestTemplateBuilder` in `[MessagesController](https://github.com/jgrandja/oauth2-client-demo/blob/master/client-app/src/main/java/sample/web/MessagesController.java)`.  It would be ideal if we can integrate this capability into `RestTemplate` as it would provide greater flexibility for the OAuth 2.0 Client features we are in the process of building. This would not only be useful for the `client_credentials` grant but will also be needed for the `refresh_token` grant.   ---  **Affects:** 5.1 RC1","closed","type: enhancement,","spring-projects-issues","2018-05-14T16:39:12Z","2018-05-16T20:58:32Z"
"","21599","Multipart: Invalid boundary with RestTemplate [SPR-17061]","**[Joe Amoros](https://jira.spring.io/secure/ViewProfile.jspa?name=jamoros)** opened **[SPR-17061](https://jira.spring.io/browse/SPR-17061?redirect=false)** and commented  Greetings!  I recently upgraded from 4.3.16 to 5.0.7. Everything is running smoothly except when trying to upload a file using the RestTemplate. This was working before the upgrade.   Client:  ```java     public  ResponseEntity uploadMultipartFile(String requestParamName, byte[] byteArray, String fileName,Class responseType) {          ByteArrayResource byteArrayAsResource = new ByteArrayResource(byteArray) {             @Override             public String getFilename() {                 return fileName;             }         };          MultipartBodyBuilder bodyBuilder = new MultipartBodyBuilder(); bodyBuilder.part(requestParamName, byteArrayAsResource);          return getRestTemplate().postForEntity(buildUriWithVariables(new HashMap<>()), bodyBuilder.build(), responseType);  ```     It seems that Apache (2.4.7) is intercepting the request with the following error:  ```java [Wed Jul 18 14:56:55.932180 2018] [:error] [pid 1313:tid 140177733252864] [client 10.139.48.106] ModSecurity:  Multipart parsing error (init): Multipart: Invalid boundary in C-T (characters). [hostname ""porta.com""]  [uri ""/restless/documentUpload/multipleUpload""] [unique_id ""W0@Nd38AAAEAAAUhtbcAAABW""]   [Wed Jul 18 14:56:55.932308 2018] [:error] [pid 1313:tid 140177733252864] [client 10.139.48.106] ModSecurity:  Access denied with code 400 (phase 2). Match of ""eq 0"" against ""REQBODY_ERROR"" required.  [file ""/etc/modsecurity/modsecurity.conf""] [line ""54""] [id ""200001""] [msg ""Failed to parse request body.""]  [data ""Multipart: Invalid boundary in C-T (characters).""] [severity ""CRITICAL""] [hostname ""portal.com""]  [uri ""/restless/documentUpload/multipleUpload""] [unique_id ""W0@Nd38AAAEAAAUhtbcAAABW""]  ```     Below is what the body and response looks like, I omitted the file body.  ```java  ""POST /documentUpload/multipleUpload?j_username=kl@api.com&j_password=Test&ert=json&uploaderEmail=usertest@com HTTP/1.1[\r][\n]"">  ""Accept: application/json, application/*+json[\r][\n]"">  ""Content-Type: multipart/form-data;boundary=rkPSkaQIu7ALPaIp-aTzHLIECYcOgFKCufq5;charset=UTF-8[\r][\n]"">  ""Content-Length: 32096[\r][\n]"">  ""Host: portal.com[\r][\n]"">  ""Connection: Keep-Alive[\r][\n]"">  ""User-Agent: Apache-HttpClient/4.5.3 (Java/1.8.0_112)[\r][\n]"">  ""[\r][\n]""> POST /documentUpload/multipleUpload?j_username=kl@api.com&j_password=Testert=json&uploaderEmail=usertest@com HTTP/1.1> Accept: application/json, application/*+json> Content-Type: multipart/form-data;boundary=rkPSkaQIu7ALPaIp-aTzHLIECYcOgFKCufq5;charset=UTF-8> Content-Length: 32096> Host: portal.com> Connection: Keep-Alive> User-Agent: Apache-HttpClient/4.5.3 (Java/1.8.0_112)>  ""--rkPSkaQIu7ALPaIp-aTzHLIECYcOgFKCufq5[\r][\n]"">  ""Content-Disposition: form-data; name=""files""; filename=""99999888_inv_LP1003.99999888_invStmt_20161001_20161231_invStmt_.pdf""[\r][\n]"">  ""Content-Type: application/pdf[\r][\n]"">  ""Content-Length: 31830[\r][\n]"">""HTTP/1.1 400 Bad Request[\r][\n]""> ""Date: Wed, 18 Jul 2018 17:55:22 GMT[\r][\n]""> ""Server: Portal[\r][\n]""> ""Content-Length: 226[\r][\n]""> ""Connection: close[\r][\n]""> ""Content-Type: text/html; charset=iso-8859-1[\r][\n]""> ""[\r][\n]"">  HTTP/1.1 400 Bad Request> Date: Wed, 18 Jul 2018 17:55:22 GMT> Server: Portal> Content-Length: 226> Connection: close> Content-Type: text/html; charset=iso-8859-1>  ```     If I am doing something wrong any help would be greatly appreciated. I thought it was possible the boundary having ;charset after it, but I am not sure how to remove it. After two days I'm exhausted trying to figure this out.  Thank you!!  ---  **Affects:** 5.0.7  **Reference URL:** https://stackoverflow.com/questions/51390193/upgrading-to-spring-5-broke-resttemplate-multipartfile-upload  **Issue Links:** - #21568 Boundary info in Content-Type multipart request header not parsed correctly because of charset (_**""duplicates""**_)  1 votes, 2 watchers","closed","in: web,","spring-projects-issues","2018-07-18T20:40:10Z","2019-01-12T16:56:49Z"
"","21477","Unable to retrieve user from reactive context in RequestCondition [SPR-16938]","**[Jocelyn Ntakpe](https://jira.spring.io/secure/ViewProfile.jspa?name=jntakpe)** opened **[SPR-16938](https://jira.spring.io/browse/SPR-16938?redirect=false)** and commented  It seems it's not possible to use reactive types in RequestCondition.  For instance when extending RequestCondition if we need to retrieve an object from reactive context  ```java override fun getMatchingCondition(exchange: ServerWebExchange): TypeAllowedRequestCondition? {         Mono.just(""data"").log().subscribeOn(Schedulers.newElastic(""elastic"")).publishOn(Schedulers.newElastic(""elastic"")).block()         return null } ```  It fails with the message :  ```java 2018-06-12 22:43:26.025  INFO [testApp,46413d416c4da32e,96722e0562cab28e,false] 4975 --- [      elastic-3] reactor.Mono.Just.1                      : | request(unbounded) 2018-06-12 22:43:26.025  INFO [testApp,46413d416c4da32e,96722e0562cab28e,false] 4975 --- [      elastic-3] reactor.Mono.Just.1                      : | onNext(data) 2018-06-12 22:43:26.026  INFO [testApp,46413d416c4da32e,96722e0562cab28e,false] 4975 --- [      elastic-3] reactor.Mono.Just.1                      : | onComplete() java.lang.IllegalStateException: block()/blockFirst()/blockLast() are blocking, which is not supported in thread parallel-1``` ```  ---  **Affects:** 5.0.7  **Issue Links:** - #21746 Create a WebFilter for ServerWebExchange Reactor Context","closed","status: declined,","spring-projects-issues","2018-06-13T07:59:08Z","2019-01-12T16:21:07Z"
"","21295","IllegalStateException: InputStream has already been read when returning ResponseEntity [SPR-16754]","**[Jessy James](https://jira.spring.io/secure/ViewProfile.jspa?name=mcdl)** opened **[SPR-16754](https://jira.spring.io/browse/SPR-16754?redirect=false)** and commented  With the recent upgrade to Spring-Boot-2, also Spring-5 came in and I guess it is related to the upgrade from 4 to 5. So here's the issue. I have a controller which provides a download for the user by returning a ResponseEntity\. After the recent upgrade I now see frequently these errors in the log:  ``` Apr 22 01:40:00 ru downloader.jar[7010]: 2018-04-22 01:40:00.083 ERROR 7030 --- [p-nio-80-exec-1] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.IllegalStateException: InputStream has already been read - do not use InputStreamResource if a stream needs to be read multiple times] with root cause Apr 22 01:40:00 ru downloader.jar[7010]: java.lang.IllegalStateException: InputStream has already been read - do not use InputStreamResource if a stream needs to be read multiple times Apr 22 01:40:00 ru downloader.jar[7010]:         at org.springframework.core.io.InputStreamResource.getInputStream(InputStreamResource.java:97) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.springframework.http.converter.ResourceHttpMessageConverter.writeContent(ResourceHttpMessageConverter.java:130) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.springframework.http.converter.ResourceHttpMessageConverter.writeInternal(ResourceHttpMessageConverter.java:124) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.springframework.http.converter.ResourceHttpMessageConverter.writeInternal(ResourceHttpMessageConverter.java:45) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.springframework.http.converter.AbstractHttpMessageConverter.write(AbstractHttpMessageConverter.java:224) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:274) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:224) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:82) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:119) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:866) Apr 22 01:40:00 ru downloader.jar[7010]:         at javax.servlet.http.HttpServlet.service(HttpServlet.java:635) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851) Apr 22 01:40:00 ru downloader.jar[7010]:         at javax.servlet.http.HttpServlet.service(HttpServlet.java:742) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:60) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:158) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:126) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:111) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:84) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) Apr 22 01:40:00 ru downloader.jar[7010]:         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) Apr 22 01:40:00 ru downloader.jar[7010]:         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) Apr 22 01:40:00 ru downloader.jar[7010]:         at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) Apr 22 01:40:00 ru downloader.jar[7010]:         at java.lang.Thread.run(Thread.java:748) ```  I tried some scenarios locally and couldn't reproduce it. Also it happens not all the time, just sometimes it fails in said ways. The stack trace doesn't contain anything from my code. With Spring-Boot-1 I never had those errors.  This is an exemplary extract of my Controller:  ```  	@RequestMapping(method = RequestMethod.GET) 	public ResponseEntity download(@ModelAttribute(""providerId"") String providerId, 			@ModelAttribute(""slug"") String slug, HttpServletRequest request) 			throws IOException, SomeOfMyExceptions {                 // ...                 BodyBuilder builder = null; // Nice class name,                  if (isPartial) { 			builder = status(PARTIAL_CONTENT); 			builder.header(""Content-Range"", range);  		} else { 			builder = ok(); 			if (acceptsRange) { 				builder.header(""Accept-Ranges"", ""bytes""); 			} else { 				builder.header(""Accept-Ranges"", ""none""); 			} 		}  		builder.contentType(contentType); 		download.contentLength().ifPresent(builder::contentLength); 		download.etag().ifPresent(builder::eTag); 		download.lastModified().ifPresent(builder::lastModified);  		builder.header(""Content-Disposition"", String.format(""attachment; filename=\""%s\"""", filename));  		return builder.body(new InputStreamResource(stream)); } ```  ---  **Affects:** 5.0.5  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/12939  **Issue Links:** - #21460 AbstractMessageConverterMethodProcessor doesn't respect already handled headers and result-codes  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/72cfe41f30bdc4a27cc32d6f41bce2fa2b3373af, https://github.com/spring-projects/spring-framework/commit/e9a8a5065bf30826bc0209b6e4db472348e51ce0","closed","type: bug,","spring-projects-issues","2018-04-22T08:09:46Z","2019-01-11T16:43:22Z"
"","21667","More error details in RestTemplate client and server exception [SPR-17130]","**[Jerzy Krolak](https://jira.spring.io/secure/ViewProfile.jspa?name=jerzykrlk)** opened **[SPR-17130](https://jira.spring.io/browse/SPR-17130?redirect=false)** and commented  The default `RestTemplate` HTTP error exceptions might contain some preview of the response body, along with the HTTP status code.  So that, instead of this:  ```java org.springframework.web.client.HttpClientErrorException.BadRequest: 400 Bad Request     at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:91) ~[spring-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]     at org.springframework.web.client.RestTemplate.handleResponse(RestTemplate.java:641) ~[spring-web-4.2.4.RELEASE.jar:4.2.4.RELEASE] ```  ... I could see this:  ```java org.springframework.web.client.HttpClientErrorException.BadRequest: 400 Bad Request [page not found...]     at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:91) ~[spring-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]     at org.springframework.web.client.RestTemplate.handleResponse(RestTemplate.java:641) ~[spring-web-4.2.4.RELEASE.jar:4.2.4.RELEASE] ```  or even this:  ```java org.springframework.web.client.HttpClientErrorException.Conflict: 409 Conflict [{ ""error"": {  ""errors"": [   {    ""domain"": ""global"",    ""reason"": ""conflict"",    ""message"": ""You already own this bucket. Please select another name.""   }  ],  ""code"": 409,  ""message"": ""You already own this bucket. Please select another name.""  } }]     at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:91) ~[spring-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]     at org.springframework.web.client.RestTemplate.handleResponse(RestTemplate.java:641) ~[spring-web-4.2.4.RELEASE.jar:4.2.4.RELEASE] ```  This should not introduce too much overhead, as the response is already there, in `byte [] body`.  ---  **Affects:** 5.0.8  **Issue Links:** - #19967 Exception hierarchy under HttpClientException and HttpServerException for the RestTemplate  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1956","closed","status: superseded,","spring-projects-issues","2018-08-06T15:17:08Z","2019-11-13T14:26:31Z"
"","21591","putIfAbsent not atomic in JCache implementation [SPR-17053]","**[Jens Wilke](https://jira.spring.io/secure/ViewProfile.jspa?name=cruftex)** opened **[SPR-17053](https://jira.spring.io/browse/SPR-17053?redirect=false)** and commented  The implementation of `Cache.putIfAbsent` for JCache is not atomic as the methods contract requires.  ```java @Override public ValueWrapper putIfAbsent(Object key, Object value) {  boolean set = this.cache.putIfAbsent(key, toStoreValue(value));  return (set ? null : get(key)); } ```  The semantic could be implemented correctly via the `Cache.invoke` and the `EntryProcessor`. If okay I can do an PR.  This is only a very minor issue. So far I can see `putIfAbsent` is actually not used.   ---  **Affects:** 5.0.7","open","in: core,","spring-projects-issues","2018-07-17T13:37:27Z","2019-01-11T12:47:45Z"
"","21590","No error handler support for Cacheable sync=true [SPR-17052]","**[Jens Wilke](https://jira.spring.io/secure/ViewProfile.jspa?name=cruftex)** opened **[SPR-17052](https://jira.spring.io/browse/SPR-17052?redirect=false)** and commented  Code from `CacheAspectSupport`:  ```java // Special handling of synchronized invocation if (contexts.isSynchronized()) { ... 	try { 		return wrapCacheValue(method, cache.get(key, () -> { 			return unwrapReturnValue(invokeOperation(invoker)); 		})); 	} 	catch (Cache.ValueRetrievalException ex) { 		// The invoker wraps any Throwable in a ThrowableWrapper instance so we 		// can just make sure that one bubbles up the stack. 		throw (CacheOperationInvoker.ThrowableWrapper) ex.getCause(); 	} } ```  * In the code path for `@Cachable(sync=true)` `CacheErrorHandler` is not visited. * cast to (CacheOperationInvoker.ThrowableWrapper) is not totally sane, it could be omitted since then the unwrapping would happen in `CacheInterceptor.invoke`    ---  **Affects:** 5.0.7","open","in: core,","spring-projects-issues","2018-07-17T13:32:22Z","2020-12-29T18:56:58Z"
"","21630","Classification of ClassCastExceptions doesn't work in JDK 11 (OpenJDK) [SPR-17093]","**[Jens Schauder](https://jira.spring.io/secure/ViewProfile.jspa?name=schauder)** opened **[SPR-17093](https://jira.spring.io/browse/SPR-17093?redirect=false)** and commented  `SimpleApplicationEventMulticaster.matchesClassCastMessage` fails to match cases it should match in JDK 11.  The reason seems to be that instead of starting with the class name or module/class name the message now starts with ""class "" followed by the class name, which (I think) is the result of the `Class.toString()` method.  I came across this due to a failing build with Spring Data JDBC examples (https://travis-ci.org/spring-projects/spring-data-examples/jobs/407985295)  ---  **Affects:** 4.3.18, 5.0.7, 5.1 RC1  **Issue Links:** - #20981 Lambda error detection might not work on JDK 9 - #19412 SimpleApplicationEventMulticaster should not generally suppress ClassCastException - #19711 SimpleApplicationEventMulticaster should not rely on ClassCastException having a message - #20937 Compatibility with JDK 11  **Referenced from:** commits https://github.com/spring-projects/spring-data-examples/commit/f31c83a1f9756b920b4556383ad0e087652d8ceb  **Backported to:** [4.3.19](https://github.com/spring-projects/spring-framework/milestone/168?closed=1)","closed","in: core,","spring-projects-issues","2018-07-26T11:48:43Z","2019-01-11T12:46:04Z"
"","21461","Optional of List and bean validation [SPR-16922]","**[Jelena Borotic](https://jira.spring.io/secure/ViewProfile.jspa?name=jborotic)** opened **[SPR-16922](https://jira.spring.io/browse/SPR-16922?redirect=false)** and commented  I use Spring and Bean validation to validate request body in controllers. In case request is ok, program behaves normally, but if there is some constraint violation, I get InvalidProperty exception:     ```java org.springframework.beans.InvalidPropertyException: Invalid property 'offices[0]' of bean class [com.infobip.ott.sender.transactional.validationTest.Company]: Illegal attempt to get property 'offices' threw exception; nested exception is org.springframework.beans.InvalidPropertyException: Invalid property 'offices[0]' of bean class [com.infobip.ott.sender.transactional.validationTest.Company]: Property referenced in indexed property path 'offices[0]' is neither an array nor a List nor a Set nor a Map; returned value was [Optional[[com.infobip.ott.sender.transactional.validationTest.Address@573a2ea7]]]org.springframework.beans.InvalidPropertyException: Invalid property 'offices[0]' of bean class [com.infobip.ott.sender.transactional.validationTest.Company]: Illegal attempt to get property 'offices' threw exception; nested exception is org.springframework.beans.InvalidPropertyException: Invalid property 'offices[0]' of bean class [com.infobip.ott.sender.transactional.validationTest.Company]: Property referenced in indexed property path 'offices[0]' is neither an array nor a List nor a Set nor a Map; returned value was [Optional[[com.infobip.ott.sender.transactional.validationTest.Address@573a2ea7]]] at org.springframework.beans.AbstractNestablePropertyAccessor.getPropertyValue(AbstractNestablePropertyAccessor.java:707) at org.springframework.beans.AbstractNestablePropertyAccessor.getNestedPropertyAccessor(AbstractNestablePropertyAccessor.java:839) at org.springframework.beans.AbstractNestablePropertyAccessor.getPropertyAccessorForPropertyPath(AbstractNestablePropertyAccessor.java:816) at org.springframework.beans.AbstractNestablePropertyAccessor.getPropertyValue(AbstractNestablePropertyAccessor.java:610) at org.springframework.validation.AbstractPropertyBindingResult.getActualFieldValue(AbstractPropertyBindingResult.java:104) at org.springframework.validation.AbstractBindingResult.getRawFieldValue(AbstractBindingResult.java:284) at org.springframework.validation.beanvalidation.SpringValidatorAdapter.getRejectedValue(SpringValidatorAdapter.java:296) at org.springframework.validation.beanvalidation.SpringValidatorAdapter.processConstraintViolations(SpringValidatorAdapter.java:152) at org.springframework.validation.beanvalidation.SpringValidatorAdapter.validate(SpringValidatorAdapter.java:119) at org.springframework.boot.autoconfigure.validation.ValidatorAdapter.validate(ValidatorAdapter.java:69) at org.springframework.validation.DataBinder.validate(DataBinder.java:871) at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodArgumentResolver.validateIfApplicable(AbstractMessageConverterMethodArgumentResolver.java:260) at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.resolveArgument(RequestResponseBodyMethodProcessor.java:136) at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:124) at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:161) at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:131) at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102) at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877) at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783) at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974) at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877) at javax.servlet.http.HttpServlet.service(HttpServlet.java:707) at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851) at javax.servlet.http.HttpServlet.service(HttpServlet.java:790) at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:865) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1655) at org.eclipse.jetty.websocket.server.WebSocketUpgradeFilter.doFilter(WebSocketUpgradeFilter.java:215) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1642) at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1642) at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1642) at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1642) at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1642) at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:533) at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:146) at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:548) at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132) at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:257) at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1595) at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255) at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1253) at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203) at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:473) at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1564) at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201) at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1155) at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144) at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:126) at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132) at org.eclipse.jetty.server.Server.handle(Server.java:531) at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:352) at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:260) at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:281) at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:102) at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:118) at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333) at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310) at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168) at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.produce(EatWhatYouKill.java:132) at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:760) at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:678) at java.base/java.lang.Thread.run(Thread.java:844) ```   Example that demonstrates the problem:   ```java public class Address {      @Pattern(regexp = ""[^\\d]*"")     private final String street;      private final int number;      public Address(String street, int number) {         this.street = street;         this.number = number;     }      public String getStreet() {         return street;     }      public int getNumber() {         return number;     } } ```  ```java public class Company {      private final String name;      @Valid     @Size(min=2)     private final List offices;      public Company(String name, List offices) {         this.name = name;         this.offices = offices;     }      public String getName() {         return name;     }      public Optional> getOffices() {         return Optional.ofNullable(offices);     } } ```  ```java @RestController public class ValidationController {      @PostMapping(""/example/validation"")     public Company createCompany(@RequestBody @Validated Company company) {         return company;     } } ```  Exception is thrown in org.springframework.beans.AbstractNestablePropertyAccessor class in _getPropertyValue_ method because passed object is nether List, Map, Set or Array and due to that, can not be unwraped.   We would like this class to be immutable. Initializing offices to an empty list in case of null would create problems with validation (due to minimum size constraint) and returning a non-optional list would reduce the readability and understanding of the code.  Introspector recognizes this property correctly (as an Optional). Since Optional is a class from standard Java library, and Spring 5 is baselined with Java 8, could it be supported as well?      --- No further details from [SPR-16922](https://jira.spring.io/browse/SPR-16922?redirect=false)","open","in: core,","spring-projects-issues","2018-06-08T13:42:12Z","2022-01-10T16:48:24Z"
"","21784","Add support for Component-level EventListener registrations between Components [SPR-17251]","**[Jeffrey Schultz](https://jira.spring.io/secure/ViewProfile.jspa?name=jeffreyschultz)** opened **[SPR-17251](https://jira.spring.io/browse/SPR-17251?redirect=false)** and commented  I am interested in having the ability to use either XML or Java Config to register implementations of the EventListener with components that provide addXXXListener(XXXListener) and removeXXXListener(XXXListener) methods. The EventListener registrations should follow the bean lifecycle and unregister themselves with the event source when being disposed.  I know that a custom bean could be developed that can handle invocations of the addXXXListener/removeXXXListener methods and pass a reference of the EventListener object, but would like to see what the Spring team thinks of this feature.  Even if you decide this doesn't fall inline with the overall direction of Spring, could you at least provide some pointers that I could follow to investigate its implementation? The Application Event support is great, but I am looking for a more point to point way of handling messaging within applications. I could take the Spring Integration approach, but I feel this would be overkill for this particular implementation.   --- No further details from [SPR-17251](https://jira.spring.io/browse/SPR-17251?redirect=false)","open","in: core,","spring-projects-issues","2018-09-06T19:36:48Z","2019-01-11T14:13:13Z"
"","21701","Allow multiple @Import statements for migration from xml [SPR-17165]","**[Jeff](https://jira.spring.io/secure/ViewProfile.jspa?name=jspringcoder)** opened **[SPR-17165](https://jira.spring.io/browse/SPR-17165?redirect=false)** and commented  In migrating from xml defined configuration java defined configuration, it is not possible to load xml and .class configurations in arbitrary orders. This makes mixing the two somewhat impossible and forces us to stay with the xml configurations. In our case, our xml configs are huge, and migrating them all at once isn't desired.  For example:  The below is the desired configuration. The PropertiesConfig is loaded first, as it loads all property placeholders for use in all of the xml files.  At the end, I'd like to add a MongoConfig.class to add more mongo-spring-data defined beans within the application that reference the beans defined in applicationContext-mongo.xml.  Unfortunately, I can't order the loading of configuration classes between xml and .class files - I have to either load all class files first then all xml files, or load all xml files first, then all class files.  The implementation below gives me the error: ""Duplicate annotation of non-repeatable type `@Import`""  ```java @Configuration @Import({PropertiesConfig.class}) @ImportResource({ ""classpath:META-INF/spring/applicationContext-assets.xml"", ""classpath:META-INF/spring/applicationContext-mongo.xml"", ""classpath:META-INF/spring/applicationContext-security.xml"", ""classpath:META-INF/spring/applicationContext.xml""}) @Import({MongoConfig.class}) public class CoreConfig {      // more config here.  } ```    Please allow spring to have ordered loading of configuration files wheather they are xml or .class configurations by making the Import annotations repeatable, or provide another solution.  ---  No further details from [SPR-17165](https://jira.spring.io/browse/SPR-17165?redirect=false)","open","type: enhancement,","spring-projects-issues","2018-08-10T19:29:05Z","2020-05-12T13:33:12Z"
"","21321","RestTemplate - providing custom ResponseErrorHandler does not prevent an error with http 401 responses [SPR-16781]","**[Jeff Synnestvedt](https://jira.spring.io/secure/ViewProfile.jspa?name=bluejeff31)** opened **[SPR-16781](https://jira.spring.io/browse/SPR-16781?redirect=false)** and commented  When a rest template is customized with a ResponseErrorHandler  that does not return true on **hasError**  or does not throw an exception in **handleError** for an http 401 response then something like the following is thrown:  ```java org.springframework.web.client.ResourceAccessException: I/O error on POST request for ""http://localhost:36639/someservice"": cannot retry due to server authentication, in streaming mode; nested exception is java.net.HttpRetryException: cannot retry due to server authentication, in streaming mode at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:741) at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:684) at org.springframework.web.client.RestTemplate.exchange(RestTemplate.java:629) at com.example.demo.DemoApplicationTests.error401_withcustomhandler_noerrors(DemoApplicationTests.java:118) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) at org.springframework.test.context.junit4.statements.RunBeforeTestExecutionCallbacks.evaluate(RunBeforeTestExecutionCallbacks.java:73) at org.springframework.test.context.junit4.statements.RunAfterTestExecutionCallbacks.evaluate(RunAfterTestExecutionCallbacks.java:83) at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26) at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:75) at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86) at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84) at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:251) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70) at org.junit.runners.ParentRunner.run(ParentRunner.java:363) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190) at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)Caused by: java.net.HttpRetryException: cannot retry due to server authentication, in streaming mode at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1674) at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1474) at java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:480) at org.springframework.http.client.SimpleClientHttpResponse.getRawStatusCode(SimpleClientHttpResponse.java:55) at org.springframework.boot.actuate.metrics.web.client.RestTemplateExchangeTags.getStatusMessage(RestTemplateExchangeTags.java:94) at org.springframework.boot.actuate.metrics.web.client.RestTemplateExchangeTags.status(RestTemplateExchangeTags.java:86) at org.springframework.boot.actuate.metrics.web.client.DefaultRestTemplateExchangeTagsProvider.getTags(DefaultRestTemplateExchangeTagsProvider.java:43) at org.springframework.boot.actuate.metrics.web.client.MetricsClientHttpRequestInterceptor.getTimeBuilder(MetricsClientHttpRequestInterceptor.java:97) at org.springframework.boot.actuate.metrics.web.client.MetricsClientHttpRequestInterceptor.intercept(MetricsClientHttpRequestInterceptor.java:70) at org.springframework.http.client.InterceptingClientHttpRequest$InterceptingRequestExecution.execute(InterceptingClientHttpRequest.java:92) at org.springframework.http.client.InterceptingClientHttpRequest.executeInternal(InterceptingClientHttpRequest.java:76) at org.springframework.http.client.AbstractBufferingClientHttpRequest.executeInternal(AbstractBufferingClientHttpRequest.java:48) at org.springframework.http.client.AbstractClientHttpRequest.execute(AbstractClientHttpRequest.java:53) at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:727) ... 35 more ```     I am expecting that if my error handler doesn't want to consider 401's errors then it shouldn't throw an error further down the stack.  ---  **Affects:** 5.0.5  **Reference URL:** https://github.com/spring-projects/spring-framework-issues/pull/179  **Attachments:** - [bug.zip](https://jira.spring.io/secure/attachment/25701/bug.zip) (_4.17 kB_)  **Issue Links:** - #14004 Update reference documentation on handling 401 response in the RestTemplate (_**""duplicates""**_)  1 votes, 3 watchers","closed","in: web,","spring-projects-issues","2018-04-30T14:34:55Z","2021-07-27T08:01:26Z"
"","21605","Support a custom CorsConfigurationSource [SPR-17067]","**[Jared Jacobs](https://jira.spring.io/secure/ViewProfile.jspa?name=jmj)** opened **[SPR-17067](https://jira.spring.io/browse/SPR-17067?redirect=false)** and commented  It looks like Spring only supports a single, global, statically defined CORS configuration, since `AbstractHandlerMapping.globalCorsConfigSource` is initialized to `new UrlBasedCorsConfigurationSource()` and there’s no way to replace it with a different `CorsConfigurationSource` implementation.  We’d like to let certain users access their own data via our REST APIs from a cross-origin domain that _they_ configure. We can manage the storage of their settings, but we need to register our own `CorsConfigurationSource` with Spring somehow. It will check what user is making the request and then return the appropriate `CorsConfiguration` for the user. We’d want to handle a preflight request without credentials (for which we can’t yet identify the user) permissively, but reject any other cross-origin request that has missing or invalid credentials.  Thanks for considering it!   ---  **Affects:** 5.0.7  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7e9b7102b7d2f590243613c7459b10d25fdcc8ff","closed","type: enhancement,","spring-projects-issues","2018-07-19T18:10:40Z","2018-08-17T09:42:44Z"
"","21254","InMemoryWebSessionStore method to access map of sessions [SPR-16713]","**[Jan Truksa](https://jira.spring.io/secure/ViewProfile.jspa?name=jtruksa)** opened **[SPR-16713](https://jira.spring.io/browse/SPR-16713?redirect=false)** and commented  Would it be possible to have in org.springframework.web.server.session.WebSessionStore method like:  ```java Mono> getSessions() ```  With default implementation like:  ```java public Mono> getSessions() { 	return Mono.just(Collections.unmodifiableMap(sessions)); } ```  The thing I'm going to do is simple session management like list all active sessions, manually invalidate session by admin, etc. Obviously, I can just re-implement some implementation of WebSessionStore like InMemoryWebSessionStore and use this implementation in my application, but I would appreciate some native support.  On the other hand is it even good practice to expose sessions like this, when there isn't native support?  ---  **Affects:** 5.0.7  **Issue Links:** - #21558 InMemoryWebSessionStore could leak memory if sessions created but never used  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6218db98310da5e37bfdaba1f8ed73d89c33c0d7, https://github.com/spring-projects/spring-framework/commit/43fbd632542222444ab228175da82a80ecf1daf5","closed","type: enhancement,","spring-projects-issues","2018-04-11T13:57:22Z","2019-01-11T16:45:25Z"
"","21336","ControllerLinkBuilder#toUriComponentsBuilder encoded twice [SPR-16796]","**[Jan Mares](https://jira.spring.io/secure/ViewProfile.jspa?name=jan.mares)** opened **[SPR-16796](https://jira.spring.io/browse/SPR-16796?redirect=false)** and commented  In the following example:  ```java ControllerLinkBuilder builder = ControllerLinkBuilder.linkTo(     ControllerLinkBuilder.methodOn(Controller.class).getAttachment(attachmentName) ); System.out.println(builder.toString()); System.out.println(builder.toUriComponentsBuilder().build().toString()); System.out.println(builder.toUriComponentsBuilder().toUriString()); System.out.println(builder.toUriComponentsBuilder().build(true).toString()); ```  Will produce for URLs with special chars (space in the example):  ``` http://localhost:8080/attachment/my%20logo.png http://localhost:8080/attachment/my%2520logo.png http://localhost:8080/attachment/my%252520logo.png http://localhost:8080/attachment/my%2520logo.png ```  Workaround:  ```java UriComponentsBuilder uriComponentsBuilder = UriComponentsBuilder.fromUriString(builder.toString()); ```    ---  **Affects:** 5.0.5","closed","status: invalid,","spring-projects-issues","2018-05-06T21:15:47Z","2019-01-12T05:18:53Z"
"","21284","Exception swallowed in ResponseEntityExceptionHandler [SPR-16743]","**[Jan Mares](https://jira.spring.io/secure/ViewProfile.jspa?name=jan.mares)** opened **[SPR-16743](https://jira.spring.io/browse/SPR-16743?redirect=false)** and commented  Problem - after calling other service with RestTemplate, the call fails because of deserialization failure, but the exception is not logged  Expected behaviour - stack trace of the exception can be found in the logs  Actual behaviour - only this line appears in the log and the server returns 500  ``` c.d.s.p.c.c.e.BadRequestExceptionHandler : Unknown exception type: org.springframework.web.client.RestClientException ```  Reason - exception is swallowed in  ResponseEntityExceptionHandler (https://github.com/spring-projects/spring-framework/blob/v5.0.5.RELEASE/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ResponseEntityExceptionHandler.java#L188) because not only type of the exception, but also the type of its cause is used to match method in ExceptionHandlerMethodResolver(https://github.com/spring-projects/spring-framework/blob/v5.0.5.RELEASE/spring-web/src/main/java/org/springframework/web/method/annotation/ExceptionHandlerMethodResolver.java#L136)  Code:  ```java @ControllerAdvice public class BadRequestExceptionHandler extends ResponseEntityExceptionHandler {       @ExceptionHandler(value = {BadRequestException.class})     protected ResponseEntity handleBadRequest(BadRequestException ex, WebRequest request) 	{         return handleExceptionInternal(ex, ex.getMessage(), new HttpHeaders(), HttpStatus.BAD_REQUEST, request);     } } ```  The swallowing most probably happens, because exception org.springframework.web.client.RestClientException is thrown with HttpMessageNotReadableException as its cause. When ExceptionHandlerMethodResolver looks for a handler method in resolveMethodByThrowable, first it does not find one, but when it tries a cause of the exception (HttpMessageNotReadableException) it finds one in ResponseEntityExceptionHandler::handleException. That results in this method being called, but the instance passed to the method is not the one of HttpMessageNotReadableException, but of RestClientException and therefore it does not match any of the instanceof ifs in the method and falls in the last else, resulting in logging only that little fragment shown above.  IMHO trying to match against cause as well as the exception itself is dangerous and rather unexpected. As we reuse code, we need to reuse the exceptions that come with it. But in this case an exception of type HttpMessageNotReadableException thrown from contoller trying to deserialize the request is something completely different to the same exception wrapped in RestClientException when trying to parse a response of dependant microservice. Also, why only one level down, why not two levels - cause of a cause, or three cause of a cause of a cause ...  Hacky temporary solution - as we cannot override handleException in ResponseEntityExceptionHandler , we had to override handleInternalException in the following way:  ```java @Override protected ResponseEntity handleExceptionInternal(      final Exception ex,      final Object body,      final HttpHeaders headers,      final HttpStatus status,      final WebRequest request ) {      if (HttpStatus.INTERNAL_SERVER_ERROR.equals(status)) {           // due to problem with cause and the fact the handleException in the parent is final           logger.warn(""Potentially unlogged exception. Re-logging: "", ex);      }      return super.handleExceptionInternal(ex, body, headers, status, request); } ```  which is not very nice.  ---  **Affects:** 4.3.16, 5.0.5  **Issue Links:** - #18863 `@ExceptionHandler` should match cause as well (e.g. for exception thrown from argument formatter)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a200df6c8d68474be3ad3ebcedeb3c0c397e5e29, https://github.com/spring-projects/spring-framework/commit/318d04cd2b519b539a1acfff2ee7507d7aff6873, https://github.com/spring-projects/spring-framework/commit/7b894fe73bd585edc0a9eaa3c6013424040c8569, https://github.com/spring-projects/spring-framework/commit/193c289080ed40563a5f6c3bf926076182ab7841, https://github.com/spring-projects/spring-framework/commit/ed44262a71f15c9bf4673d49b14094caf276fea2, https://github.com/spring-projects/spring-framework/commit/f2cc70ecf9034eaf2ef1a658f9d751e030a6c0ff  **Backported to:** [4.3.17](https://github.com/spring-projects/spring-framework/milestone/166?closed=1)","closed","type: bug,","spring-projects-issues","2018-04-18T19:24:36Z","2019-01-13T04:47:28Z"
"","21727","Expose the remote IP in ServerHttpRequest and WebSocketSession [SPR-17192]","**[James Covington](https://jira.spring.io/secure/ViewProfile.jspa?name=bwcsemaj)** opened **[SPR-17192](https://jira.spring.io/browse/SPR-17192?redirect=false)** and commented  Servlet-based `WebSocketSession` essentially has the functionality of getting the remote address. I was hoping it would be possible to get this feature for WebFlux's WebSocket. It is pretty critical for my project to obtain the client's IP Address.   ---  **Affects:** 5.0.8  **Reference URL:** https://stackoverflow.com/questions/51192630/how-do-you-get-clients-ip-address-spring-webflux-websocket/51564173","closed","type: enhancement,","spring-projects-issues","2018-08-13T08:17:21Z","2018-09-21T07:52:15Z"
"","21797","Handler Interceptor Adapter in Spring WebFlux [SPR-17264]","**[jakubdyszkiewicz](https://jira.spring.io/secure/ViewProfile.jspa?name=jakubdyszkiewicz)** opened **[SPR-17264](https://jira.spring.io/browse/SPR-17264?redirect=false)** and commented  My team is in the middle of migrating our Spring MVC extensions to WebFlux.  We've got a feature that lets our clients customize metric of controller method. To do that we've created our annotation that is processed by HandlerInterceptorAdapter.  What's more, our metrics convention is a controller method name, not a path.  The problem is that I can't see any equivalent of this in Spring WebFlux. I can't use WebFilter because Spring does not know yet which endpoint will be called, therefore I can't process annotation. How can I implement that?  The closest workaround I found is to use `RequestMappingHandlerMapping` and somehow build a map of `Map`, but this is cumbersome in my opinion  Thanks  ---  **Issue Links:** - #21900 Set BEST_MATCHING_HANDLER_ATTRIBUTE in WebFlux.fn  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2018-09-10T10:54:56Z","2019-01-11T14:12:55Z"
"","21764","Spring WebFlux - Custom messages validation in different languages [SPR-17231]","**[jakubdyszkiewicz](https://jira.spring.io/secure/ViewProfile.jspa?name=jakubdyszkiewicz)** opened **[SPR-17231](https://jira.spring.io/browse/SPR-17231?redirect=false)** and commented  Hello,  I've got a problem with providing custom messages in different languages for bean validation using WebFlux. It does not use messages for locale I send in header.  I think this is a bug because `LocalValidatorFactoryBean` uses `LocaleContextMessageInterpolator`. Hibernate Validator calls the `public String interpolate(String message, Context context) method`, which relays on the `LocaleContextHolder`. It uses a `ThreadLocal` which can't be used in WebFlux.  I created sample repository, I hope you find it helpful https://github.com/jakubdyszkiewicz/webflux-validation  There is the issue I created by mistake in spring-boot project https://github.com/spring-projects/spring-boot/issues/14253  Dmytro Nosan provided workaround, but I think it should work out of the box.  Thanks   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/d059b1a450492f003700c24e88fdeb9ea3236737","open","type: enhancement,","spring-projects-issues","2018-08-31T09:01:44Z","2022-07-01T08:26:34Z"
"","21556","Revise ClassUtils.isPresent for exposing resolution exceptions in jlinked modules [SPR-17018]","**[J. Pablo Fernández](https://jira.spring.io/secure/ViewProfile.jspa?name=pupeno)** opened **[SPR-17018](https://jira.spring.io/browse/SPR-17018?redirect=false)** and commented  I know this is not a bug in 5.0.7 because it's modular Java is not supported, but I think this will be a bug once it is. I'm using the ModiTect maven plugin to inject many of the Spring jars with a definition of their module (module-info.java). I'm happy to share the results as it might help speed things up for others.  One of the issues I run into is this exception:  ``` Exception in thread ""main"" org.springframework.beans.factory.BeanDefinitionStoreException: org.springframework.beans.factory.aspectj.AnnotationBeanConfigurerAspect not found. Could not configure Spring Data JPA auditing-feature because spring-aspects.jar is not on the classpath! If you want to use auditing please add spring-aspects.jar to the classpath.         at spring.data.jpa@2.0.8.RELEASE/org.springframework.data.jpa.repository.config.JpaAuditingRegistrar.registerBeanConfigurerAspectIfNecessary(JpaAuditingRegistrar.java:124)         at spring.data.jpa@2.0.8.RELEASE/org.springframework.data.jpa.repository.config.JpaAuditingRegistrar.registerBeanDefinitions(JpaAuditingRegistrar.java:88)         at spring.context@5.0.7.RELEASE/org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.lambda$loadBeanDefinitionsFromRegistrars$1(ConfigurationClassBeanDefinitionReader.java:358)         at java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)         at spring.context@5.0.7.RELEASE/org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitionsFromRegistrars(ConfigurationClassBeanDefinitionReader.java:357)         at spring.context@5.0.7.RELEASE/org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitionsForConfigurationClass(ConfigurationClassBeanDefinitionReader.java:145)         at spring.context@5.0.7.RELEASE/org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitions(ConfigurationClassBeanDefinitionReader.java:117)         at spring.context@5.0.7.RELEASE/org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:328)         at spring.context@5.0.7.RELEASE/org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:233)         at spring.context@5.0.7.RELEASE/org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:273)         at spring.context@5.0.7.RELEASE/org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:93)         at spring.context@5.0.7.RELEASE/org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:694)         at spring.context@5.0.7.RELEASE/org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:532)         at spring.boot@2.0.3.RELEASE/org.springframework.boot.SpringApplication.refresh(SpringApplication.java:759)         at spring.boot@2.0.3.RELEASE/org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:395)         at spring.boot@2.0.3.RELEASE/org.springframework.boot.SpringApplication.run(SpringApplication.java:327)         at spring.boot@2.0.3.RELEASE/org.springframework.boot.SpringApplication.run(SpringApplication.java:1255)         at spring.boot@2.0.3.RELEASE/org.springframework.boot.SpringApplication.run(SpringApplication.java:1243)         at tech.flexpoint.dashmanserver/tech.flexpoint.dashmanserver.DashmanServerApplication.main(DashmanServerApplication.java:13) ```  I don't think this is an access problem because I already defined the module this way (being on the side of making it work at all costs):  ``` module spring.aspects {     exports org.springframework.beans.factory.aspectj;     opens org.springframework.beans.factory.aspectj; } ```  and of course spring.core requires spring.aspects.  I think the problem is that the actual code won't work with the ClassLoader when jlinked. This wouldn't be the first time I found class loaders behaving differently on Java 9 or 10:  https://stackoverflow.com/questions/49702287/getresourceasstream-returning-null-in-java-10  One of the issues is that I cannot replicate this problem while I can attach a debugger, so, I can't figure exactly what's going on. I'm reporting this here in case someone that's much more familiar with the code can point me in the right direction on how to figure out what's happening here and maybe coming up with a fix.     ---  **Affects:** 5.0.7  **Reference URL:** https://stackoverflow.com/questions/51207237/class-not-found-in-spring-when-using-java-modules-and-jlink  **Issue Links:** - #21441 Spring Boot DevTools on 5.1 fails with java.lang.LinkageError: loader attempted duplicate class definition  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/833343f17ccac95cf195dfa56a3cd52c3cc31654","closed","type: enhancement,","spring-projects-issues","2018-07-06T20:51:30Z","2019-01-11T12:49:58Z"
"","21399","Spring is inconsistent in the encoding/decoding of URLs [SPR-16860]","**[J. Pablo Fernández](https://jira.spring.io/secure/ViewProfile.jspa?name=pupeno)** opened **[SPR-16860](https://jira.spring.io/browse/SPR-16860?redirect=false)** and commented  I have a Spring Boot server application and a client that uses RestTemplate to talk to it. I'm finding that RestTemplate doesn't encode plus signs (""+"") while Spring decodes them as spaces.  For example, this snippet of code:  ```java String foo = ""fo+o""; String bar = ""ba r""; restTemplate.exchange(""http://example.com/?foo={foo}&bar={bar}"", HttpMethod.GET, null, foo, bar) ```  will make a request to  ``` http://example.com/?foo=fo+o&bar=ba%20r ```  which means, inside Spring, the variable foo will contain ""fo o"" and the variable bar will contain ""ba r"". Using UriTemplate directly, it's easier to reproduce the generation of that URL:  ```java String foo = ""fo+o""; String bar = ""ba r""; UriTemplate uriTemplate = new UriTemplate(""http://example.com/?foo={foo}&bar={bar}""); Map vars = new HashMap<>(); vars.put(""foo"", foo); vars.put(""bar"", bar); URI uri = uriTemplate.expand(vars); System.out.println(uri); ```  which prints  ``` http://example.com/?foo=fo+o&bar=ba%20r ```  Not even UriComponentsBuilder encodes the plus sign:  ```java String foo = ""fo+o""; String bar = ""ba r""; UriComponentsBuilder ucb = UriComponentsBuilder.fromUriString(""http://example.com/?foo={foo}&bar={bar}""); System.out.println(ucb.build().expand(foo, bar).toUri()); System.out.println(ucb.build().expand(foo, bar).toString()); System.out.println(ucb.build().expand(foo, bar).toUriString()); System.out.println(ucb.build().expand(foo, bar).encode().toUri()); System.out.println(ucb.build().expand(foo, bar).encode().toString()); System.out.println(ucb.build().expand(foo, bar).encode().toUriString()); System.out.println(ucb.buildAndExpand(foo, bar).toUri()); System.out.println(ucb.buildAndExpand(foo, bar).toString()); System.out.println(ucb.buildAndExpand(foo, bar).toUriString()); System.out.println(ucb.buildAndExpand(foo, bar).encode().toUri()); System.out.println(ucb.buildAndExpand(foo, bar).encode().toString()); System.out.println(ucb.buildAndExpand(foo, bar).encode().toUriString()); ```  That prints:  ``` http://example.com/?foo=fo+o&bar=ba%20r http://example.com/?foo=fo+o&bar=ba r http://example.com/?foo=fo+o&bar=ba r http://example.com/?foo=fo+o&bar=ba%20r http://example.com/?foo=fo+o&bar=ba%20r http://example.com/?foo=fo+o&bar=ba%20r http://example.com/?foo=fo+o&bar=ba%20r http://example.com/?foo=fo+o&bar=ba r http://example.com/?foo=fo+o&bar=ba r http://example.com/?foo=fo+o&bar=ba%20r http://example.com/?foo=fo+o&bar=ba%20r http://example.com/?foo=fo+o&bar=ba%20r ```  all of which are incorrect, not encoding the plus sign.  I have posted questions about this on StackOverflow that further point to other bug reports and there's a lot of confusion around this subject:  https://stackoverflow.com/questions/50270372/why-is-spring-de-coding-the-plus-character-on-application-json-get-requests  https://stackoverflow.com/questions/50432395/whats-the-proper-way-to-escape-url-variables-with-springs-resttemplate-when-ca  ---  **Affects:** 5.0.5  **Issue Links:** - #22006 Not encoding '+' in URLs anymore breaks backwards compatibility with apps running on spring 4 (_**""is duplicated by""**_) - #21577 Support stricter encoding of URI variables in UriComponents (_**""is superseded by""**_)  0 votes, 6 watchers","closed","in: web,","spring-projects-issues","2018-05-22T11:49:39Z","2019-06-14T17:54:56Z"
"","21439","POST body is consumed by OrderedHiddenHttpMethodFilter, breaking request.getInputStream() [SPR-16900]","**[J. Luke Scott](https://jira.spring.io/secure/ViewProfile.jspa?name=jlukescott)** opened **[SPR-16900](https://jira.spring.io/browse/SPR-16900?redirect=false)** and commented  When a POST request is made to Spring MVC, `OrderedHiddenHttpMethodFilter` is calling `request.getParameter()` which eventually calls `request.getInputStream()` under the covers, and reads the full stream into a parameter map. By doing so, the input stream for all POST requests is flushed and further calls to `request.getInputStream()` return this exhausted stream object, which makes it appear that the request contains no body.  `OrderedHiddenHttpMethodFilter` is a Spring MVC filter which is used for adding a `HttpMethodRequestWrapper` instance to POST requests, so that client applications can use POST requests to mimic PUTs (a contentious but generally accepted design kludge for antiquated HTTP limitations).  I understand that POST requests are sometimes used in web forms to call PUT operations on the server side, but this is essentially a hack to loosen up the HTTP spec. This introduces a side effect which makes the request object behave in inconsistent ways, which is a clue that this hack is probably unacceptable and should be done a different way. For instance, this problem could easily be solved in a more modern way by updating the client application to run Javascript to perform PUT requests with JSON payloads after locally processing form content.  Our application is an API gateway which uses Spring MVC to accept incoming requests; it determines what caching and security logic should be performed and forwards calls (and their payloads) on to origin services. `OrderedHiddenHttpMethodFilter` introduces arbitrary and inconsistent behavior that forces us to introduce even worse hacks to disable it. If we choose not to disable `OrderedHiddenHttpMethodFilter`, then we would be stuck re-assembling the POST body by serializing `request.getParameters()` (with no guarantee of accuracy, both because of changes to ordering and also because we're not sure which parameters came in from the URL vs. the POST body).  In my opinion, at the very least we should be able to disable `OrderedHiddenHttpMethodFilter` in a well-supported and sensible way. But it would probably be better to disable this `HttpMethodRequestWrapper` behavior altogether, and instead provide it as a configurable add-on that applications can enable only if they choose to implement the POST/PUT hack in their client code.  NOTE: This is the same underlying behavior as #13745 - but in that bug report, the client was sending non-standard HTTP header/payload combinations, so it was correctly closed as ""By Design"".   ---  **Affects:** 4.3.12","closed","status: invalid,","spring-projects-issues","2018-06-04T19:36:57Z","2019-01-14T04:30:53Z"
"","21250","SimpleJdbcCall with rowMapper set fails on execution (on Postgres) [SPR-16709]","**[Ivan Vasilev](https://jira.spring.io/secure/ViewProfile.jspa?name=ivan.vasilev)** opened **[SPR-16709](https://jira.spring.io/browse/SPR-16709?redirect=false)** and commented  Further to my previous issue #21152.  spring-jdbc: 4.3.15 org.postgresql:postgresql: 9.4.1212.jre7  I've got 4.3.15 yesterday. And tested it with demo project which I attached to #21152. Test passes, so issue is resolved, thank you.  I wrote a stored function that returns a table row. When I call it returning a map of values, everything works properly. But when I set **jdbcCall.returningResultSet(""resultvalue"", rowMapper)**, something goes wrong:  > org.springframework.jdbc.BadSqlGrammarException: CallableStatementCallback; bad SQL grammar [{? = call find_customer(?, ?)}]; nested exception is org.postgresql.util.PSQLException: A CallableStatement function was executed and the out parameter 1 was of type java.sql.Types=4 however type java.sql.Types=1111 was registered. > at org.postgresql.jdbc.PgCallableStatement.executeWithFlags(PgCallableStatement.java:140) > at org.postgresql.jdbc.PgPreparedStatement.execute(PgPreparedStatement.java:157) > at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) > at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) > at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) > at java.lang.reflect.Method.invoke(Method.java:498) > at org.apache.tomcat.jdbc.pool.StatementFacade$StatementProxy.invoke(StatementFacade.java:114) > at com.sun.proxy.$Proxy90.execute(Unknown Source) > at org.springframework.jdbc.core.JdbcTemplate$6.doInCallableStatement(JdbcTemplate.java:1144) > at org.springframework.jdbc.core.JdbcTemplate$6.doInCallableStatement(JdbcTemplate.java:1141) > at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:1089) > at org.springframework.jdbc.core.JdbcTemplate.call(JdbcTemplate.java:1141) > at org.springframework.jdbc.core.simple.AbstractJdbcCall.executeCallInternal(AbstractJdbcCall.java:406) > at org.springframework.jdbc.core.simple.AbstractJdbcCall.doExecute(AbstractJdbcCall.java:366) > at org.springframework.jdbc.core.simple.SimpleJdbcCall.execute(SimpleJdbcCall.java:197) > at com.example.demo.DemoApplicationTests.callProcedureReturningResultSetWithRowMapper(DemoApplicationTests.java:54)  I attach the sample project below.  ---  **Affects:** 4.3.15  **Attachments:** - [demo.zip](https://jira.spring.io/secure/attachment/25473/demo.zip) (_5.50 kB_)  **Issue Links:** - #21152 CallMetaDataContext.reconcileParameters doesn't catch output parameters with DatabaseMetaData.procedureColumnResult type (on Postgres)","open","in: data,","spring-projects-issues","2018-04-11T07:00:40Z","2021-07-02T08:16:36Z"
"","21152","CallMetaDataContext.reconcileParameters doesn't catch output parameters with DatabaseMetaData.procedureColumnResult type (on Postgres) [SPR-16611]","**[Ivan Vasilev](https://jira.spring.io/secure/ViewProfile.jspa?name=ivan.vasilev)** opened **[SPR-16611](https://jira.spring.io/browse/SPR-16611?redirect=false)** and commented  I added a comment [here](#9308) but I think, it'll be better to create a new issue.  I use spring-jdbc with postgres driver. To call stored procedure which returns a table row, I use the following code:  ```java         MapSqlParameterSource params = new MapSqlParameterSource()                 .addValue(""in_id"", name);          Map resultMap = new SimpleJdbcCall(jdbcTemplate)                 .withFunctionName(STORED_FUNCTION_NAME)                 .execute(params); ```  It produces following exception:  > org.springframework.dao.InvalidDataAccessApiUsageException: Required input parameter 'id' is missing > at org.springframework.jdbc.core.CallableStatementCreatorFactory$CallableStatementCreatorImpl.createCallableStatement(CallableStatementCreatorFactory.java:211) > at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:1083) > at org.springframework.jdbc.core.JdbcTemplate.call(JdbcTemplate.java:1141) > at org.springframework.jdbc.core.simple.AbstractJdbcCall.executeCallInternal(AbstractJdbcCall.java:405) > at org.springframework.jdbc.core.simple.AbstractJdbcCall.doExecute(AbstractJdbcCall.java:365) > at org.springframework.jdbc.core.simple.SimpleJdbcCall.execute(SimpleJdbcCall.java:198) > at com.example.demo.DemoApplicationTests.callProcedure(DemoApplicationTests.java:35)  It wants me insert an output parameter.  I searched a little and found following: * [PgDatabaseMetaData](https://github.com/pgjdbc/pgjdbc/blob/master/pgjdbc/src/main/java/org/postgresql/jdbc/PgDatabaseMetaData.java#L1228) returns java.sql.DatabaseMetaData.procedureColumnResult. * [CallMetaDataContext](https://github.com/spring-projects/spring-framework/blob/master/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataContext.java#L331) doesn't check parameter type for equality to this value. It checks for DatabaseMetaData.procedureColumnReturn only.  I created a sample project (in attachment). It uses Flyway to initialize and Testcontainers to use real postgres db. Change driver name and url if you do not want to use docker.  ---  **Affects:** 4.3.13  **Attachments:** - [demo.zip](https://jira.spring.io/secure/attachment/25422/demo.zip) (_28.39 kB_)  **Issue Links:** - #21099 PostgresTableMetaDataProvider.isGetGeneratedKeysSimulated() does not detect Postgres 10 - #21250 SimpleJdbcCall with rowMapper set fails on execution (on Postgres)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b7c423813db7921b726b493b97357eb01d527dd1, https://github.com/spring-projects/spring-framework/commit/301ba014278855681681e3bc1371bbd10a0d4489  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","type: bug,","spring-projects-issues","2018-03-19T09:03:05Z","2019-01-14T04:31:46Z"
"","21871","DelegatingCompletableFuture.cancel() returns false for already cancelled future [SPR-17337]","**[Ivan Sopov](https://jira.spring.io/secure/ViewProfile.jspa?name=isopov)** opened **[SPR-17337](https://jira.spring.io/browse/SPR-17337?redirect=false)** and commented  Sorry - JIRA failed me many times in filling this issue (one time I retyped it from the beginning), so I filled it on Gist: https://gist.github.com/isopov/b2dca9d7152f577741c8451d91e97e37 This is somewhat related to #21870  ---  **Affects:** 5.1 GA  **Issue Links:** - #21870 MonoToListenableFutureAdapter.cancel problems","open","in: core,","spring-projects-issues","2018-10-04T13:35:15Z","2019-01-11T14:15:42Z"
"","21870","MonoToListenableFutureAdapter.cancel problems [SPR-17336]","**[Ivan Sopov](https://jira.spring.io/secure/ViewProfile.jspa?name=isopov)** opened **[SPR-17336](https://jira.spring.io/browse/SPR-17336?redirect=false)** and commented  org.springframework.messaging.support.MonoToListenableFutureAdapter.cancel method is strange. Consider adapter for the case that cannot be cancelled.  ```java Future foo = new MonoToListenableFutureAdapter<>(Mono.empty()); System.out.println(foo.cancel(true)); System.out.println(foo.isCancelled()); ```  This prints:  ``` true false ```  This clearly violates cancel method javadoc ""Subsequent calls to isCancelled will always return true if this method returned true"" And I believe cancel should've returned false itself since it should ""return false if the task could not be cancelled, typically because it has already completed normally""  Also curent implementation gives result true several times under race if actual cancellation is happening. Consider the following JCStress-based test:  ```java @JCStressTest @Outcome(id = ""true, false"", expect = Expect.ACCEPTABLE) @Outcome(id = ""false, true"", expect = Expect.ACCEPTABLE) @Outcome(expect = Expect.FORBIDDEN, desc = ""Other cases are forbidden."") @State public class MonoToListenableFutureAdapterCancelTest {     private final Future future = new MonoToListenableFutureAdapter<>(Mono.fromFuture(new CompletableFuture<>()));     @Actor     public void cancel1(ZZ_Result r) {         r.r1 = future.cancel(true);     }     @Actor     public void cancel2(ZZ_Result r) {         r.r2 = future.cancel(true);     } } ```  It fails with ""true, true"" result while result ""false, true"" and ""true, false"" are also observed.  ---  **Affects:** 5.1 GA  **Issue Links:** - #21175 Support use of reactive clients in `@MessageMapping` methods - #21871 DelegatingCompletableFuture.cancel() returns false for already cancelled future  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c01f350abee4dee43873d79acf0ec85980d98755, https://github.com/spring-projects/spring-framework/commit/928c5414014ef5f812198422c0e4be03cad936ce, https://github.com/spring-projects/spring-framework/commit/bef22ec9b5aad7a030a033e2271b1e7be6adf37d","closed","type: enhancement,","spring-projects-issues","2018-10-04T13:06:32Z","2019-01-13T04:24:13Z"
"","21195","Serving static files slowdown  [SPR-16654]","**[Ivan Martos](https://jira.spring.io/secure/ViewProfile.jspa?name=ivanm)** opened **[SPR-16654](https://jira.spring.io/browse/SPR-16654?redirect=false)** and commented  After we upgraded our project to Spring Boot 2.0.0.RELEASE (that comes with spring-webmc-5.0.4.RELEASE), we experienced major slowdown for serving static files using  ```java org.springframework.web.servlet.config.annotation.WebMvcConfigurer ```  When we were using Spring Boot 1.5.9.RELEASE average response time for images was about 40ms. After the upgrade it has risen up to average 1400ms. Code is the same, only thing that changed was spring boot version (with modifications required for update to newer version of spring boot).  After we reverted back to Spring boot 1.5.9 (with spring-webmc-4.3.13.RELEASE) serving static files was once again very fast. I'm attaching access logs with response times.   ---  **Affects:** 5.0.4  **Attachments:** - [new-spring-cpu.nps](https://jira.spring.io/secure/attachment/25699/new-spring-cpu.nps) (_9.13 kB_) - [new-spring-memory.nps](https://jira.spring.io/secure/attachment/25700/new-spring-memory.nps) (_121.10 kB_) - [spring_new_access.log](https://jira.spring.io/secure/attachment/25440/spring_new_access.log) (_3.34 kB_) - [spring_old_access.log](https://jira.spring.io/secure/attachment/25439/spring_old_access.log) (_12.34 kB_)  0 votes, 5 watchers","closed","status: declined,","spring-projects-issues","2018-03-28T16:22:48Z","2020-10-29T08:01:18Z"
"","21631","WebTestClient ignores WebSessionManager bean [SPR-17094]","**[Isamu Nojima](https://jira.spring.io/secure/ViewProfile.jspa?name=nosix)** opened **[SPR-17094](https://jira.spring.io/browse/SPR-17094?redirect=false)** and commented  I am using Webflux in Spring Boot 2.0.3.RELEASE to create REST API. With that implementation, I customize and use the webSessionManager as below. (Sorry, the code is written in Kotlin.)  ```java // Kotlin @EnableWebFluxSecurity @Configuration class SecurityConfiguration {     @Bean     fun webSessionManager(): WebSessionManager {         return DefaultWebSessionManager().apply {             sessionIdResolver = HeaderWebSessionIdResolver().apply {                 headerName = ""X-Sample""             }             sessionStore = InMemoryWebSessionStore()         }     }      // ... } ```  And in order to test the REST API, I created a test code as follows. (`addUser` and `signin` are extension functions.)  ```java // Kotlin @RunWith(SpringRunner::class) @SpringBootTest @AutoConfigureWebTestClient @FixMethodOrder(MethodSorters.NAME_ASCENDING) class UserTests {     @Autowired     private lateinit var client: WebTestClient      @Test     fun testGetUserInfo() {         client.addUser(defaultUser)         val sessionKey = client.signin(defaultUser)          client.get().uri(userPath)                 .header(""X-Sample"", sessionKey)                 .exchange()                 .expectStatus().isOk                 .expectBody()                 .jsonInStrict(""""""                 {                   ""user"": {                     ""mail_address"": ""user@example.com""                   }                 }                 """""".trimIndent())     }      // ... } ```  **The test failed. It is refused by authorization. However, if I start the server and run it from curl it will succeed in the authorization.**  After investigating the cause, it turned out that `org.springframework.test.web.reactive.server.AbstractMockServerSpec` set webSessionManager to `DefaultWebSessionManager`. The default is used, not the webSessionManager I customized. For this reason, it could not get the session ID. * [AbstractMockServerSpec.java#L41](https://github.com/spring-projects/spring-framework/blob/c2a5fcd3538e031525d3656f1b7c9d5f4702ee06/spring-test/src/main/java/org/springframework/test/web/reactive/server/AbstractMockServerSpec.java#L41) * [AbstractMockServerSpec.java#L72-L78](https://github.com/spring-projects/spring-framework/blob/c2a5fcd3538e031525d3656f1b7c9d5f4702ee06/spring-test/src/main/java/org/springframework/test/web/reactive/server/AbstractMockServerSpec.java#L72-L78)  I think that it is better to have the following implementation, what do you think?  ```java // Java abstract class AbstractMockServerSpec>         implements WebTestClient.MockServerSpec {      // ...      private WebSessionManager sessionManager = null;      // ...      @Override     public WebTestClient.Builder configureClient() {         WebHttpHandlerBuilder builder = initHttpHandlerBuilder();         builder.filters(theFilters -> theFilters.addAll(0, this.filters));         if (this.sessionManager != null) {             builder.sessionManager(this.sessionManager);         }         this.configurers.forEach(configurer -> configurer.beforeServerCreated(builder));         return new DefaultWebTestClientBuilder(builder);     }      // ... } ```  ---  **Affects:** 5.0.7  **Issue Links:** - #20233 Provide hook for framework customizations of the WebTestClient MockServerSpec","closed","type: bug,","spring-projects-issues","2018-07-26T13:02:25Z","2019-01-11T12:46:02Z"
"","21365","RequestParamMethodArgumentResolver don't correctly parse arguments [SPR-16825]","**[Ilya Denisov](https://jira.spring.io/secure/ViewProfile.jspa?name=dk61_777)** opened **[SPR-16825](https://jira.spring.io/browse/SPR-16825?redirect=false)** and commented  Hello, I have a problem, when one client sending a lot of requestes, this method org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver#resolveArgument, of class org.springframework.web.method.annotation.RequestParamMethodArgumentResolver, don't correctly parse request parameters from request.  I catch this issue and I see the queryString of request is ""_dc=1526309441487&page=1&start=0&limit=100"", by this invoke webRequest.getNativeRequest(HttpServletRequest.class).getQueryString(). But I see it parse queryString from another request with queryString ""_dc=1526309441461&page=1&start=0&limit=100&sort=%5B%7B%22property%22%3A%22name%22%2C%22direction%22%3A%22ASC%22%7D%5D"". _dc it is param timestamp.  Request: !screen2.png!  Parsed data: !screen1.png!  P.S. (`@RequestParam`(required = false) SortParams sort)   ---  **Affects:** 4.3.17  **Attachments:** - [screen1.png](https://jira.spring.io/secure/attachment/25721/screen1.png) (_23.26 kB_) - [screen2.png](https://jira.spring.io/secure/attachment/25720/screen2.png) (_39.37 kB_)","closed","status: invalid,","spring-projects-issues","2018-05-15T08:02:03Z","2019-01-12T05:18:49Z"
"","21342","Documentation refers to org.projectreactor:reactor-net which seem not to exist on projectreactor Bismuth [SPR-16802]","**[Ilpo Kettunen](https://jira.spring.io/secure/ViewProfile.jspa?name=ikettu)** opened **[SPR-16802](https://jira.spring.io/browse/SPR-16802?redirect=false)** and commented  Documentation for STOMP External broker configuration mention org.projectreactor:reactor-net as needed dependency. But current Springframework depend on projectreactor Bismuth-SR9 which do not have that package anymore.  See: https://docs.spring.io/spring/docs/5.0.6.RELEASE/spring-framework-reference/web.html#websocket-stomp-handle-broker-relay   ---  **Affects:** 5.0.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/82a8e42ff937a0064d20f378debafe80a5b4c4d5, https://github.com/spring-projects/spring-framework/commit/9179a4fa303d695892fc364f3421f57d74964da0","closed","in: web,","spring-projects-issues","2018-05-09T10:19:09Z","2018-06-12T15:44:03Z"
"","21257","SpringFailOnTimeout loses original exception when triggering timeout in finally block [SPR-16716]","**[Igor](https://jira.spring.io/secure/ViewProfile.jspa?name=sukhigo)** opened **[SPR-16716](https://jira.spring.io/browse/SPR-16716?redirect=false)** and commented  Invalid exception throw in ""finally"" block. Need to save ""causeof"" exception from ""try"" block   ---  **Affects:** 4.3.16, 5.0.5  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1784, and commits https://github.com/spring-projects/spring-framework/commit/fecbcd4e936ba66e33479617eff20a1d3187e312, https://github.com/spring-projects/spring-framework/commit/4f3a7dd9b4b4b95ccebf276185163cbdd815cb8d, https://github.com/spring-projects/spring-framework/commit/02e09098e4d2b2036226847a5b2de595c5794400  **Backported to:** [4.3.17](https://github.com/spring-projects/spring-framework/milestone/166?closed=1)","closed","type: bug,","spring-projects-issues","2018-04-11T21:05:10Z","2018-05-08T08:07:34Z"
"","21658","WhitelabelErrorViewConfiguration does not show trace property [SPR-17121]","**[Igor Manushin](https://jira.spring.io/secure/ViewProfile.jspa?name=imanushin)** opened **[SPR-17121](https://jira.spring.io/browse/SPR-17121?redirect=false)** and commented  **TLDR:** default Spring error view is unable to show stacktrace.  Please see problematic below (it is small). Target issue affects Spring MVC (and possible Spring Flux) v5+  Configuration:  ``` server:   error:     include-exception: true     include-stacktrace: always ```  In this case _DefaultErrorAttributes_ creates separate property _trace_ which has exception stacktrace. Then this model will be used by _WhitelabelErrorViewConfiguration_ (see below)  Part of _DefaultErrorAttributes_:  ``` private void addStackTrace(Map errorAttributes, Throwable error) {      StringWriter stackTrace = new StringWriter();      error.printStackTrace(new PrintWriter(stackTrace));      stackTrace.flush();      errorAttributes.put(""trace"", stackTrace.toString()); } ```  _WhitelabelErrorViewConfiguration_ class:  ``` 	@Configuration 	@ConditionalOnProperty(prefix = ""server.error.whitelabel"", name = ""enabled"", matchIfMissing = true) 	@Conditional(ErrorTemplateMissingCondition.class) 	protected static class WhitelabelErrorViewConfiguration {  		private final SpelView defaultErrorView = new SpelView( 				""Whitelabel Error Page"" 						+ ""This application has no explicit mapping for /error, so you are seeing this as a fallback."" 						+ ""${timestamp}"" 						+ ""There was an unexpected error (type=${error}, status=${status})."" 						+ ""${message}"");  		@Bean(name = ""error"") 		@ConditionalOnMissingBean(name = ""error"") 		public View defaultErrorView() { 			return this.defaultErrorView; 		}  		// If the user adds @EnableWebMvc then the bean name view resolver from 		// WebMvcAutoConfiguration disappears, so add it back in to avoid disappointment. 		@Bean 		@ConditionalOnMissingBean 		public BeanNameViewResolver beanNameViewResolver() { 			BeanNameViewResolver resolver = new BeanNameViewResolver(); 			resolver.setOrder(Ordered.LOWEST_PRECEDENCE - 10); 			return resolver; 		}  	} ```    ---  **Affects:** 5.0.8","closed","in: core,","spring-projects-issues","2018-08-03T14:06:36Z","2019-01-12T05:18:21Z"
"","21649","Add ability to configure read/connect timeouts for TestRestTemplate [SPR-17112]","**[Igor Manushin](https://jira.spring.io/secure/ViewProfile.jspa?name=imanushin)** opened **[SPR-17112](https://jira.spring.io/browse/SPR-17112?redirect=false)** and commented  This jira is for [TestRestTemplate](https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/test/web/client/TestRestTemplate.html) class.  It is unable to simple set readTimeout/connectTimeout of it, so it is not simple to verify long-running rest services.  Possible solutions: * Add new property into configuration (for example - org.spring.boot.test.rest.template.default.read.timeout = ...) * Add ability to specify read timeout for calls (for example - add ability to override getForEntity) * Add ability to specify read/connect timeouts for the RestTemplate  Matched question on the stackoverflow (for rest template): https://stackoverflow.com/questions/13837012/spring-resttemplate-timeout   ---  **Affects:** 5.0.8","closed","status: invalid,","spring-projects-issues","2018-08-01T18:14:53Z","2019-01-12T05:18:23Z"
"","21330","Spring Guide recommends to use obsolete method [SPR-16790]","**[Igor Manushin](https://jira.spring.io/secure/ViewProfile.jspa?name=imanushin)** opened **[SPR-16790](https://jira.spring.io/browse/SPR-16790?redirect=false)** and commented  See document https://spring.io/guides/gs/rest-service-cors/#_enabling_cors  Code below tries to use deprecated WebMvcConfigurerAdapter, instead of inline interface implementation:  ``` @Bean public WebMvcConfigurer corsConfigurer() {     return new WebMvcConfigurerAdapter() {         @Override         public void addCorsMappings(CorsRegistry registry) {             registry.addMapping(""/greeting-javaconfig"").allowedOrigins(""http://localhost:9000"");         }     }; } ```    ---  **Affects:** 5.0.5  **Reference URL:** https://github.com/spring-guides/gs-rest-service-cors/issues/18","closed","in: core,","spring-projects-issues","2018-05-03T10:48:33Z","2019-01-12T05:18:54Z"
"","21300","Jaxb2XmlDecoder is unable to decode a single element [SPR-16759]","**[Igor Manushin](https://jira.spring.io/secure/ViewProfile.jspa?name=imanushin)** opened **[SPR-16759](https://jira.spring.io/browse/SPR-16759?redirect=false)** and commented  Spring is unable to deserialize the body of the following method:    ```java @PostMapping(...) public void post(@RequestBody SomeObject) {       .... } ```  Root cause - `Jaxb2XmlDecoder` does not implement method ""decodeToMono""   ---  **Affects:** 5.0.5  **Reference URL:** https://stackoverflow.com/questions/42496821/spring-boot-way-to-marshall-demarshall-xml","closed","in: core,","spring-projects-issues","2018-04-24T09:01:29Z","2018-05-08T08:53:23Z"
"","21803","Add Armeria as a reactive server and client [SPR-17270]","**[Hyangtack Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=hyangtack)** opened **[SPR-17270](https://jira.spring.io/browse/SPR-17270?redirect=false)** and commented  Hello. This is Hyangtack from Armeria team.  We are developing Armeria which is a microservice server framework based on Netty. (https://github.com/line/armeria)  Is there any chance that we can add Armeria into Spring framework as a reactive server and client?  If Armeria is added to Spring, we think that: * Armeria can utilize Spring's powerful features which are necessary for building a web application, such as dependency injection, transaction management, AOP, etc. * Spring can utilize powerful support for Apache Thrift and gRPC provided by Armeria, including the documentation service. (https://line.github.io/armeria/server-docservice.html) * Both Spring REST services and Armeria RPC services can run on a single server port which supports HTTP/2 on both OpenSSL-based TLS and cleartext connections. The Armeria server also supports PROXY protocol which is interoperable with load balancers such as HAProxy and AWS ELB.  So we think that it would be useful for the developers who use both Spring and Armeria, including ourselves at LINE corporation. Please check my pull request on Armeria repository, and let us know what you think. Thanks!  https://github.com/line/armeria/pull/1326      ---  **Reference URL:** https://github.com/line/armeria/pull/1326  9 votes, 9 watchers","closed","type: enhancement,","spring-projects-issues","2018-09-13T06:37:05Z","2019-01-11T14:12:40Z"
"","21755","Kotlin inner class nested configuration causes IndexOutOfBoundsException [SPR-17222]","**[Hugh Hamill](https://jira.spring.io/secure/ViewProfile.jspa?name=hughwphamill)** opened **[SPR-17222](https://jira.spring.io/browse/SPR-17222?redirect=false)** and commented  With Reference to the following project which reproduces the issue  https://github.com/hughwphamill/spring-nested-test-configuration-issue  ## Problem  Application Context fails to load with `java.lang.IndexOutOfBoundsException` where there is a nested inner `@Configuration` class in a Kotlin project  ## Cause  [MethodParameter.java](https://github.com/spring-projects/spring-framework/blob/280da61d5c9594e6541725ea67af9dda1a5943a7/spring-core/src/main/java/org/springframework/core/MethodParameter.java#L781)  ```java if (function != null) {      List parameters = function.getParameters();      KParameter parameter = parameters         .stream()         .filter(p -> KParameter.Kind.VALUE.equals(p.getKind()))         .collect(Collectors.toList())          .get(index);          return (parameter.getType().isMarkedNullable() || parameter.isOptional());  } ```  When checking for required constructor parameters in `DependencyDescriptor` the statement above filters out Parameter 0 which is a reference to the outer class and has `kind` value of `INSTANCE`.  It then attempts to access the parameter based on the initial input index, but the stream has been filtered down to empty.     ``` java.lang.IllegalStateException: Failed to load ApplicationContext  at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:125)  at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:108)  at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:117)  at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)  at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:44)  at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:246)  at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:227)  at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:289)  at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)  at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:291)  at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:246)  at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97)  at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)  at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)  at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)  at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)  at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)  at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)  at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)  at org.junit.runners.ParentRunner.run(ParentRunner.java:363)  at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190)  at org.junit.runner.JUnitCore.run(JUnitCore.java:137)  at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)  at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)  at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)  at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)  Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'springNestedTestConfigurationIssueApplicationLoadFailure.NestedTestConfiguration': Unexpected exception during bean creation; nested exception is java.lang.IndexOutOfBoundsException: Index: 0, Size: 0  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:508)  at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:317)  at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)  at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:315)  at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)  at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:759)  at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:869)  at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)  at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:762)  at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:398)  at org.springframework.boot.SpringApplication.run(SpringApplication.java:330)  at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:139)  at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:99)  at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:117)  ... 25 more  Caused by: java.lang.IndexOutOfBoundsException: Index: 0, Size: 0  at java.util.ArrayList.rangeCheck(ArrayList.java:657)  at java.util.ArrayList.get(ArrayList.java:433)  at org.springframework.core.MethodParameter$KotlinDelegate.isOptional(MethodParameter.java:774)  at org.springframework.core.MethodParameter.isOptional(MethodParameter.java:342)  at org.springframework.beans.factory.config.DependencyDescriptor.isRequired(DependencyDescriptor.java:174)  at org.springframework.beans.factory.support.SimpleAutowireCandidateResolver.isRequired(SimpleAutowireCandidateResolver.java:40)  at org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver.isRequired(QualifierAnnotationAutowireCandidateResolver.java:321)  at org.springframework.beans.factory.support.DefaultListableBeanFactory.isRequired(DefaultListableBeanFactory.java:1231)  at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1100)  at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1062)  at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:818)  at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:724)  at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:197)  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1267)  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1124)  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:535)  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:495)  ... 38 more ```    ---  **Affects:** 5.0.8  **Reference URL:** https://github.com/hughwphamill/spring-nested-test-configuration-issue  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8d45e3e7ef2722f47ba3e5d402e80ec686effe4f, https://github.com/spring-projects/spring-framework/commit/89fca1b94932f2844bc04d8afb1e3d0e76705b6b","closed","in: core,","spring-projects-issues","2018-08-28T15:54:41Z","2020-07-12T11:49:29Z"
"","21390","JmsTemplate with TransactionSession does not call rollback, while sending message error.  [SPR-16850]","**[hezhou](https://jira.spring.io/secure/ViewProfile.jspa?name=hezhou66)** opened **[SPR-16850](https://jira.spring.io/browse/SPR-16850?redirect=false)** and commented  JmsTemplate with sessionTransacted does not call rollback method when sending message error,maybe jms provider has received this message but network time out. But then users will use this session's producer to send a new message, and commit it, which will commit all the two message.   In this situation, users will be very confused about the first error message.  why JmsTemplate does cant call rollback when error , but auto call commit method when sending success.   ---  **Affects:** 4.3.17","open","in: messaging,","spring-projects-issues","2018-05-21T12:57:14Z","2019-01-11T17:09:34Z"
"","21306","Transaction session has not rollback，causing message chaos [SPR-16765]","**[hezhou](https://jira.spring.io/secure/ViewProfile.jspa?name=hezhou66)** opened **[SPR-16765](https://jira.spring.io/browse/SPR-16765?redirect=false)** and commented  JmsTemplate with sessionTransacted does not call rollback method when sending message error,maybe jms provider has received this message but network time out. But then users will use this session's producer to send a new message, and commit it, which will commit all the two message.   In this situation, users will be very confused about the first error message.  why JmsTemplate does not call rollback when error , but auto call commit method when sending success.  ---  **Affects:** 4.3.16  **Issue Links:** - #21305 Transaction session has not rollback，causing message chaos (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2018-04-24T15:24:41Z","2019-01-12T16:44:33Z"
"","21305","Transaction session has not rollback，causing message chaos [SPR-16764]","**[hezhou](https://jira.spring.io/secure/ViewProfile.jspa?name=hezhou66)** opened **[SPR-16764](https://jira.spring.io/browse/SPR-16764?redirect=false)** and commented  JmsTemplate with sessionTransacted does not call rollback method when sending message error,maybe jms provider has received this message but network time out. But then users will use this session's producer to send a new message, and commit it, which will commit all the two message.   In this situation, users will be very confused about the first error message.  why JmsTemplate does cant call rollback when error , but auto call commit method when sending success.  ---  **Affects:** 4.3.16  **Issue Links:** - #21306 Transaction session has not rollback，causing message chaos (_**""is duplicated by""**_)","open","in: messaging,","spring-projects-issues","2018-04-24T15:23:18Z","2019-01-11T16:42:16Z"
"","21170","JmsTemplate with CachingConnectionFactory does not refresh resources, while sending message error. This may causes message loss [SPR-16629]","**[hezhou](https://jira.spring.io/secure/ViewProfile.jspa?name=hezhou66)** opened **[SPR-16629](https://jira.spring.io/browse/SPR-16629?redirect=false)** and commented  JmsTemplate with CachingConnectionFactory does not refresh resources, while sending message error. For example ,due to networking issues or server issues the server may take longer to answer than expected.. the client may timeout the call throwing an exception and the client could eventually retry another call with the same session, but the server could then answer a previous command.  This may cause message loss.  DefaultMessageListener will renew the resource while receiveMessage error. why JmsTemplate not do like this.   ---  **Affects:** 4.3.14","open","in: messaging,","spring-projects-issues","2018-03-23T03:09:03Z","2019-01-11T15:09:41Z"
"","21747","Compiled elvis operator does not work correctly when default value is a complex expression [SPR-17214]","**[heyouxian](https://jira.spring.io/secure/ViewProfile.jspa?name=heyouxian)** opened **[SPR-17214](https://jira.spring.io/browse/SPR-17214?redirect=false)** and commented  Following exception raised when I execute `""record.get('MR_dlEARFCN')?:record.put('MR_dlEARFCN',expression.dl_CarrierFreq?.longValue())""`  ``` Caused by: java.lang.ArrayIndexOutOfBoundsException: -1  at org.springframework.asm.Frame.merge(Frame.java:1501) ~[spring-core-5.0.8.RELEASE.jar:5.0.8.RELEASE]  at org.springframework.asm.Frame.merge(Frame.java:1478) ~[spring-core-5.0.8.RELEASE.jar:5.0.8.RELEASE]  at org.springframework.asm.MethodWriter.visitMaxs(MethodWriter.java:1520) ~[spring-core-5.0.8.RELEASE.jar:5.0.8.RELEASE]  at org.springframework.expression.spel.standard.SpelCompiler.createExpressionClass(SpelCompiler.java:175) ~[spring-expression-5.0.8.RELEASE.jar:5.0.8.RELEASE]  at org.springframework.expression.spel.standard.SpelCompiler.compile(SpelCompiler.java:104) ~[spring-expression-5.0.8.RELEASE.jar:5.0.8.RELEASE]  at org.springframework.expression.spel.standard.SpelExpression.compileExpression(SpelExpression.java:517) ~[spring-expression-5.0.8.RELEASE.jar:5.0.8.RELEASE]  at org.springframework.expression.spel.standard.SpelExpression.checkCompile(SpelExpression.java:487) ~[spring-expression-5.0.8.RELEASE.jar:5.0.8.RELEASE]  at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:372) ~[spring-expression-5.0.8.RELEASE.jar:5.0.8.RELEASE] ```  If I change expression to `""record.get('MR_dlEARFCN')==null?record.put('MR_dlEARFCN',expression.dl_CarrierFreq?.longValue()):null""`, the following exception is raised:  ``` Caused by: java.lang.IllegalStateException: Failed to instantiate CompiledExpression  at org.springframework.expression.spel.standard.SpelCompiler.compile(SpelCompiler.java:110) ~[spring-expression-5.0.8.RELEASE.jar:5.0.8.RELEASE]  at org.springframework.expression.spel.standard.SpelExpression.compileExpression(SpelExpression.java:517) ~[spring-expression-5.0.8.RELEASE.jar:5.0.8.RELEASE]  at org.springframework.expression.spel.standard.SpelExpression.checkCompile(SpelExpression.java:487) ~[spring-expression-5.0.8.RELEASE.jar:5.0.8.RELEASE]  at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:372) ~[spring-expression-5.0.8.RELEASE.jar:5.0.8.RELEASE]  ... 17 more Caused by: java.lang.VerifyError: (class: spel/Ex62, method: getValue signature: (Ljava/lang/Object;Lorg/springframework/expression/EvaluationContext;)Ljava/lang/Object;) Inconsistent stack height 1 != 0  at java.lang.Class.getDeclaredConstructors0(Native Method) ~[?:1.8.0_121]  at java.lang.Class.privateGetDeclaredConstructors(Class.java:2671) ~[?:1.8.0_121]  at java.lang.Class.getConstructor0(Class.java:3075) ~[?:1.8.0_121]  at java.lang.Class.getDeclaredConstructor(Class.java:2178) ~[?:1.8.0_121]  at org.springframework.util.ReflectionUtils.accessibleConstructor(ReflectionUtils.java:503) ~[spring-core-5.0.8.RELEASE.jar:5.0.8.RELEASE]  at org.springframework.expression.spel.standard.SpelCompiler.compile(SpelCompiler.java:107) ~[spring-expression-5.0.8.RELEASE.jar:5.0.8.RELEASE]  at org.springframework.expression.spel.standard.SpelExpression.compileExpression(SpelExpression.java:517) ~[spring-expression-5.0.8.RELEASE.jar:5.0.8.RELEASE]  at org.springframework.expression.spel.standard.SpelExpression.checkCompile(SpelExpression.java:487) ~[spring-expression-5.0.8.RELEASE.jar:5.0.8.RELEASE]  at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:372) ~[spring-expression-5.0.8.RELEASE.jar:5.0.8.RELEASE] ```    I have to use `""record.put('MR_dlEARFCN',record.get('MR_dlEARFCN')==null?expression.dl_CarrierFreq?.longValue():record.get('MR_dlEARFCN'))"" ` to make it work.   ---  **Affects:** 4.3.18, 5.0.8  **Backported to:** [4.3.19](https://github.com/spring-projects/spring-framework/milestone/168?closed=1)","closed","in: core,","spring-projects-issues","2018-08-26T09:12:28Z","2018-09-07T13:48:36Z"
"","21677","limitExceeded is never reset in ConcurrentWebSocketSessionDecorator [SPR-17140]","**[HenryOrz](https://jira.spring.io/secure/ViewProfile.jspa?name=henryorz)** opened **[SPR-17140](https://jira.spring.io/browse/SPR-17140?redirect=false)** and commented  In a spring-websocket application, Once _*org.springframework.web.socket.handler.ConcurrentWebSocketSessionDecorator*_ bufferSizeLimit was exceeded, the method _*sendMessage()*_ does't work anymore.  There is a limitExceeded flag in ConcurrentWebSocketSessionDecorator, when the bufferSizeLimit was exceeded, the flag will set to true, but it's never reset to false. The method _*tryFlushMessageBuffer()*_ which called by _*sendMessage()*_ will check the limitExceeded flag, so the _*sendMessage()*_ does't work after bufferSizeLimit  was exceeded  Thanks [Artem Bilan](https://stackoverflow.com/users/2756547/artem-bilan) for answer my question on [stackoverflow](https://stackoverflow.com/questions/51723413/how-to-flush-buffer-when-concurrentwebsocketsessiondecorator-buffersizelimit-exc)  ---  **Affects:** 4.3.18, 5.0.8  **Reference URL:** https://stackoverflow.com/questions/51723413/how-to-flush-buffer-when-concurrentwebsocketsessiondecorator-buffersizelimit-exc  **Issue Links:** - #20638 Prevent WebSocket buffer overflow through application-level flow control  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/309ffc6d0d2e62c85c09ad0ed0eca86eedad8df8","closed","type: enhancement,","spring-projects-issues","2018-08-07T14:02:32Z","2021-02-05T13:17:47Z"
"","21628","Override JsonPathAssertions ""equals"" method to fail always [SPR-17091]","**[Henning Vogt](https://jira.spring.io/secure/ViewProfile.jspa?name=vogthenn)** opened **[SPR-17091](https://jira.spring.io/browse/SPR-17091?redirect=false)** and commented  org.springframework.test.web.reactive.server.JsonPathAssertions does not have an equals method, thus this Unit-test will always pass:  ```java  ResponseSpec spec = this.client.get().uri(""/aaa/select?q=*:*"").exchange();  spec.expectStatus().is4xxClientError().expectBody()  .jsonPath(""$.message"").equals(""test""); ```  I'd suggest to override equals in JsonPathAssertions, makin it ""fail()"" always, pointing the user to the correct isEqualTo() method. (probably throw an AssertionError or something like that...?)   ---  **Affects:** 5.0.7  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fcbf06f0505cb4e5fbefae0c162e40eb42519a61","closed","type: enhancement,","spring-projects-issues","2018-07-26T08:25:34Z","2018-08-17T09:42:43Z"
"","21382","""Want"" two-way-ssl not containing SSL-Certificate is not checkable due to contract violation [SPR-16842]","**[Henning Vogt](https://jira.spring.io/secure/ViewProfile.jspa?name=vogthenn)** opened **[SPR-16842](https://jira.spring.io/browse/SPR-16842?redirect=false)** and commented  Hi, If two-way-ssl is on ""want"" mode (as opposed to the stricter ""need""), and client does not deliver a certificate, getSslInfo() does not work, since init method fails:  ```java java.lang.IllegalArgumentException: No SSL certificates 	at org.springframework.util.Assert.notNull(Assert.java:193) 	at org.springframework.http.server.reactive.DefaultSslInfo.(DefaultSslInfo.java:44) 	at org.springframework.http.server.reactive.ServletServerHttpRequest.initSslInfo(ServletServerHttpRequest.java:190) 	at org.springframework.http.server.reactive.AbstractServerHttpRequest.getSslInfo(AbstractServerHttpRequest.java:162) ```  ...but according to the description, it's supposed to work:  ```java /**  * Return the SSL session information if the request has been transmitted  * over a secure protocol including SSL certificates, if available.  * @return the session information, or \{@code null} if none available  * @since 5.0.2 */  @Nullable default SslInfo getSslInfo() \{ return null; } ```     ---  **Affects:** 5.0.5  **Issue Links:** - #21050 With two-way-ssl exchange.getRequest().getSslInfo() always null  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1e4a3a2370b9ded44a62155aea59c0d81c36149f, https://github.com/spring-projects/spring-framework/commit/a158ff4c3dda5b2b8b659be826fef8e824346f69","closed","type: bug,","spring-projects-issues","2018-05-18T12:14:17Z","2019-01-11T17:10:19Z"
"","21225","AbstractNestablePropertyAccessor#getWrappedInstance() throw java.lang.IllegalStateException: No wrapped object [SPR-16684]","**[hengyunabc](https://jira.spring.io/secure/ViewProfile.jspa?name=hengyunabc)** opened **[SPR-16684](https://jira.spring.io/browse/SPR-16684?redirect=false)** and commented  wrappedObject is **`@Nullable`** :  ```java @Nullable Object wrappedObject; ```  But getWrappedInstance() throw exception:  ```java public final Object getWrappedInstance() {      Assert.state(this.wrappedObject != null, ""No wrapped object"");      return this.wrappedObject; } ```  spring 4 is ok, why spring 5 throw exception?   --- No further details from [SPR-16684](https://jira.spring.io/browse/SPR-16684?redirect=false)","open","in: core,","spring-projects-issues","2018-04-03T11:15:13Z","2021-11-12T12:17:46Z"
"","21276","Parsing of ServerSentEvents not working correctly when using reactive WebClient [SPR-16735]","**[Harmen Renkema](https://jira.spring.io/secure/ViewProfile.jspa?name=harmen.renkema)** opened **[SPR-16735](https://jira.spring.io/browse/SPR-16735?redirect=false)** and commented  We are running into some issues when streaming objects using WebClient from spring-webflux.  We've tracked them to the stream parsing in ServerSentEventHttpMessageReader.read(..).  The issues we're encountering: 1. for every event supplied by the backend we get 2 ServerSentEvents from WebClient. One populated with our data, and one fully populated with null values. (detailed example data below) 2. when the events supplied by the backend have newlines in their data section, every now and then the eventstream is split incorrectly. This results in incomplete json being fed into jackson, causing it to throw a JsonEOFException. This occurs at least once every couple of thousand of messages.  ---  Example for the first issue: We have a backend that provides the following stream.  ``` id:1 event:myEvent data:{ data:  ""id"" : 1, data:  ""type"" : ""myEvent"", data:  ""body"" : ""{ \""drink\"": \""coffee\"", \""snack\"": \""muffin\""}"", data:  ""timestamp"" : ""2018-04-17T07:19:44.769Z"" data:}  id:2 event:myEvent data:{ data:  ""id"" : 2, data:  ""type"" : ""myEvent"", data:  ""body"" : ""{ \""drink\"": \""coffee\"", \""snack\"": \""muffin\""}"", data:  ""timestamp"" : ""2018-04-17T07:19:58.859Z"" data:}  id:3 event:myEvent data:{ data:  ""id"" : 3, data:  ""type"" : ""myEvent"", data:  ""body"" : ""{ \""drink\"": \""coffee\"", \""snack\"": \""muffin\""}"", data:  ""timestamp"" : ""2018-04-17T07:19:59.313Z"" data:} ```  When I use WebClient like this:  ```java webClient.get() 	.accept(TEXT_EVENT_STREAM) 	.retrieve() 	.bodyToFlux(new ParameterizedTypeReference>() {}) 	.subscribe(System.out::println); ```  I end up with the following ServerSentEvents:  ``` ServerSentEvent [id = '1', event='myEvent', retry=null, comment='null', data={id=1, type=myEvent, body={ ""drink"": ""coffee"", ""snack"": ""muffin""}, timestamp=2018-04-17T07:19:44.769Z}] ServerSentEvent [id = 'null', event='null', retry=null, comment='null', data=null] ServerSentEvent [id = '2', event='myEvent', retry=null, comment='null', data={id=2, type=myEvent, body={ ""drink"": ""coffee"", ""snack"": ""muffin""}, timestamp=2018-04-17T07:19:58.859Z}] ServerSentEvent [id = 'null', event='null', retry=null, comment='null', data=null] ServerSentEvent [id = '3', event='myEvent', retry=null, comment='null', data={id=3, type=myEvent, body={ ""drink"": ""coffee"", ""snack"": ""muffin""}, timestamp=2018-04-17T07:19:59.313Z}] ServerSentEvent [id = 'null', event='null', retry=null, comment='null', data=null] ```  ---  **Affects:** 5.0.4  **Issue Links:** - #21285 Decoding ServerSentEvent fails when using generic type (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2018-04-17T09:16:57Z","2019-01-13T15:35:38Z"
"","21297","ConfigurationClassBeanDefinitionReader registers duplicate BeanDefinition for nested scoped component [SPR-16756]","**[Hans Schäfer](https://jira.spring.io/secure/ViewProfile.jspa?name=hanshosea.schaefer@ing-diba.de)** opened **[SPR-16756](https://jira.spring.io/browse/SPR-16756?redirect=false)** and commented  I'm using Spring Boot Version 1.5.12.RELEASE, which depends on Springframework 4.3.16.RELEASE.   Defining a scoped spring bean as an static inner class of another spring bean class leads to an error. The bean is considered as an imported configClass. Soe ConfigurationClassBeanDefinitionReader registeres a second beanDefiniton for the imported configuration class (line 137) => 2 Beans defined.  If you define the spring bean not as an inner class but in its own source file, no error happens.   ---  **Affects:** 4.3.16  **Attachments:** - [Application.java](https://jira.spring.io/secure/attachment/25689/Application.java) (_372 bytes_) - [pom.xml](https://jira.spring.io/secure/attachment/25691/pom.xml) (_838 bytes_) - [ScannedComponent.java](https://jira.spring.io/secure/attachment/25690/ScannedComponent.java) (_721 bytes_)  **Backported to:** [4.3.17](https://github.com/spring-projects/spring-framework/milestone/166?closed=1)","closed","in: core,","spring-projects-issues","2018-04-23T11:37:17Z","2018-05-08T08:07:34Z"
"","21842","Itextpdf Package Rename  [SPR-17309]","**[hammadirshad](https://jira.spring.io/secure/ViewProfile.jspa?name=hammadirshad)** opened **[SPR-17309](https://jira.spring.io/browse/SPR-17309?redirect=false)** and commented  Itextpdf moves its package from com.lowagie to com.itextpdf Due to this AbstractPdfView is not compatible with the new version of Itextpdf    --- No further details from [SPR-17309](https://jira.spring.io/browse/SPR-17309?redirect=false)","closed","","spring-projects-issues","2018-09-27T09:07:31Z","2021-11-12T12:50:36Z"
"","21263","Set a correct 'Content-Length' Header in MappingJackson2HttpMessageConverter or its super class [SPR-16722]","**[half-dead](https://jira.spring.io/secure/ViewProfile.jspa?name=half-dead)** opened **[SPR-16722](https://jira.spring.io/browse/SPR-16722?redirect=false)** and commented  tomcat 8.5.27, Spring boot 1.5.10, spring 4.3.14  I have a simple controller just like this:  ```java @RequestMapping(""/test"") public Map test() {   return Collections.emptyMap(); } ```  when requesting to this endpoint via a CURL command, it always returns a  'Transfer-Encoding: chunked' response  After some digging, I found out it's because the MappingJackson2HttpMessageConverter didn't set a correct 'Content-Length' header, so tomcat added a 'Transfer-Encoding: chunked' header at the end.  ---  **Affects:** 4.3.14  **Issue Links:** - #16565 Content-length header missing when serializing to XML","closed","type: enhancement,","spring-projects-issues","2018-04-13T08:39:14Z","2019-01-11T16:45:01Z"
"","21833","UriComponentsBuilder.fromUriString(String) dont allow use # in queryParam [SPR-17300]","**[HackPacku](https://jira.spring.io/secure/ViewProfile.jspa?name=hackpacku)** opened **[SPR-17300](https://jira.spring.io/browse/SPR-17300?redirect=false)** and commented  UriComponentsBuilder builder = UriComponentsBuilder.fromUriString(url)  .queryParam(""pageSize"", ""10"") .queryParam(""example"", ""example#test123"")  It will teake test123 as .fragment(""test123"")  url will be   **example/report?pageSize=10&example=example**  expected  **example/report?pageSize=10&example=example%23test123**   --- No further details from [SPR-17300](https://jira.spring.io/browse/SPR-17300?redirect=false)","closed","status: declined,","spring-projects-issues","2018-09-24T14:01:41Z","2019-01-12T16:20:53Z"
"","21726","SimpleAliasRegistry.hasAlias does not properly resolve multiple chained aliases [SPR-17191]","**[hachi029](https://jira.spring.io/secure/ViewProfile.jspa?name=hachi029)** opened **[SPR-17191](https://jira.spring.io/browse/SPR-17191?redirect=false)** and commented  here are test cases:  SimpleAliasRegistry sar = new SimpleAliasRegistry(); sar.registerAlias(""name"", ""alias_a""); sar.registerAlias(""name"", ""alias_b""); sar.registerAlias(""real_name"", ""name"");  assertTrue((sar).hasAlias(""real_name"", ""alias_b"")); //case 1 sar.registerAlias(""name"", ""alias_d""); assertFalse((sar).hasAlias(""real_name"", ""alias_b"")); //case 2   ---  **Affects:** 4.3.18  **Backported to:** [4.3.19](https://github.com/spring-projects/spring-framework/milestone/168?closed=1)","closed","in: core,","spring-projects-issues","2018-08-17T05:30:24Z","2018-08-17T09:42:44Z"
"","21159","CookieLocaleResolver formats integer differently against SessionLocaleResolver [SPR-16618]","**[Ha Na Han Kim](https://jira.spring.io/secure/ViewProfile.jspa?name=krkhnh)** opened **[SPR-16618](https://jira.spring.io/browse/SPR-16618?redirect=false)** and commented  I'm using Spring Boot v1.5.9.RELEASE.  When I made a LocaleResolver like this,  ```java @Bean public LocaleResolver localeResolver() { 	final SessionLocaleResolver lr = new SessionLocaleResolver(); 	lr.setDefaultLocale(locale); 	return lr; } ```  Formatting ""80000"" integer using Vietnam locale returns ""80.000""(dot).  But when I use CookieLocaleResolver instead,  ```java @Bean public LocaleResolver localeResolver() { 	final CookieLocaleResolver lr = new CookieLocaleResolver(); 	lr.setDefaultLocale(locale); 	lr.setCookieMaxAge((int) TimeUnit.SECONDS.convert(365, TimeUnit.DAYS)); 	return lr; } ```  Formatting using Vietnam locale returns ""80,000""(comma).   ---  **Affects:** 4.3.13","closed","status: invalid,","spring-projects-issues","2018-03-20T06:55:37Z","2019-01-12T05:19:13Z"
"","21823","Disable Backoff when connection is lost [SPR-17290]","**[Guillaume](https://jira.spring.io/secure/ViewProfile.jspa?name=ghuillaume)** opened **[SPR-17290](https://jira.spring.io/browse/SPR-17290?redirect=false)** and commented  In my app, I have hundreds of JMS listeners which are plugged on the same topic. I would like these listeners to stop immediately when an error occurs, for example when the JMS provider is down.     I've created my own implementation of `org.springframework.util.backoff.BackOff` so that the method nextBackOff always return STOP, and I set that BackOff to all my listeners :  ```java this.jmsContainer.setBackOff(new DisabledBackOff()); ```     The problem is in the `DefaultMessageListenerContainer.refreshConnectionUntilSuccessful()` :  ```java BackOffExecution execution = this.backOff.start();  while (isRunning()) {  try {  if (sharedConnectionEnabled()) {  refreshSharedConnection(); ```  This code start the BackOffExecution and then immediately try to recover the connection. Then the method `BackOffExecution.nextBackOff()` is called and the recoverring is stopped.  To avoid the first refresh, I've no choice to raise an Exception when `this.backOff.start()` is called, but my JMS listener won't be stopped. And it's not a clean solution...  I think `nextBackOff` should be called before any refresh is intended. Or maybe there is another solution ?   ---  **Affects:** 5.0.9","open","in: messaging,","spring-projects-issues","2018-09-19T08:18:13Z","2019-01-11T14:11:54Z"
"","21287","Support combining class-level @RequestMappings by inheritance [SPR-16746]","**[Grzegorz Pijański](https://jira.spring.io/secure/ViewProfile.jspa?name=gpijanski)** opened **[SPR-16746](https://jira.spring.io/browse/SPR-16746?redirect=false)** and commented  Let's say that we have **ProductController**. It's reasonable to annotate it with class-level  **`@RequestMapping`(""/product"")** in order to group all methods under same mapping. But what if some endpoints need to have **""/admin""** prefix?  Right now this is not possible.  Putting **`@RequestMapping`(""/product"")** or **`@RequestMapping`(""/admin/product"")** on every method in this controller is tedious  and having separate **ProductController** and **ProductAdminController** is not best solution either.  It would be great if SpringWeb could introduce **`@Prefix`(""/admin"")** annotation, that would prefix class-level  **`@RequestMapping`**  It would be even nicer when it was possible to support combining class-level **`@RequestMappings`** by inheritance.  The example below:  ```java @RestController @RequestMapping(""/admin"") public class AdminController { } ```  ```java @RestController @RequestMapping(""/product"", useSuperclassMapping = true) public class ProductAdminController extends AdminController { } ```  And instead of **""/product""**, **ProductAdminController**'s method  could be called as **""/admin/product""**.   ---  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2018-04-19T13:34:06Z","2018-05-07T20:19:44Z"
"","21835","java.lang.AbstractMethodError: org.apache.commons.logging.LogFactory.setAttribute(..) [SPR-17302]","**[gregh3269](https://jira.spring.io/secure/ViewProfile.jspa?name=gregh3269)** opened **[SPR-17302](https://jira.spring.io/browse/SPR-17302?redirect=false)** and commented  Hello,  Upgrading to v5.1.0 now gives me an error on startup :     java.lang.AbstractMethodError: org.apache.commons.logging.LogFactory.setAttribute(Ljava/lang/String;Ljava/lang/Object;)V at org.apache.commons.logging.LogFactory.getFactory(LogFactory.java:638)  .....     Seems something to do with the spring-jcl jar,  I checked the jars before/after the upgrade and they are identical (other than the version changes).     I use the bridge logging to commons-logging.  If I exclude the spring-jcl jar the app starts up OK.  v5.0.8 was OK.     Here are my dependancies  \ \commons-logging\ \commons-logging\ \1.2\ \ \ \ \org.apache.logging.log4j\ \log4j-core\ \2.11.1\ \ \ \org.apache.logging.log4j\ \log4j-api\ \2.11.1\ \ \ \org.apache.logging.log4j\ \log4j-web\ \2.11.1\ \ \ \ \org.apache.logging.log4j\ \log4j-jcl\ \2.11.1\ \ \ \org.apache.logging.log4j\ \log4j-slf4j-impl\ \2.11.1\ \ \ \ \org.apache.logging.log4j\ \log4j-1.2-api\ \2.11.1\ \ \ \ \org.slf4j\ \slf4j-api\ \1.7.25\ \  Cheers Greg     ---  **Affects:** 5.1 GA  **Issue Links:** - #21127 Allow spring-jcl to be found by Commons Logging's service discovery - #22118 spring-jcl routes logging inefficiently against SLF4J with log4j-to-slf4j setup  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d6dfde3e5bb7131d6dc5bcdeb409f00017799bbb","closed","in: core,","spring-projects-issues","2018-09-25T07:58:52Z","2019-01-11T14:17:44Z"
"","21402","Process X-Forwarded-Ssl headers properly [SPR-16863]","**[Greg Turnquist](https://jira.spring.io/secure/ViewProfile.jspa?name=gregturn)** opened **[SPR-16863](https://jira.spring.io/browse/SPR-16863?redirect=false)** and commented  Spring HATEOAS has extra support built for handing X-Forwarded-Ssl headers, in [the following code](https://github.com/spring-projects/spring-hateoas/blob/61972998ac8cd7dd94d077c39a47c5d557e13a50/src/main/java/org/springframework/hateoas/mvc/ControllerLinkBuilder.java#L301-L330).  There is additionally a [ForwardedHeader](https://github.com/spring-projects/spring-hateoas/blob/61972998ac8cd7dd94d077c39a47c5d557e13a50/src/main/java/org/springframework/hateoas/mvc/ForwardedHeader.java) class used to parse Forwarded headers. It would be ideal if this header was handled by Spring MVC directly so Spring HATEOAS didn't have to bake in support as well. That would allow us to concentrate such functionality truly in one place.  ---  **Affects:** 5.0.6  **Reference URL:** https://github.com/spring-projects/spring-hateoas/pull/112  **Issue Links:** - #21209 Centralize handling of ""Forwarded"" headers to ForwardedHeaderFilter - #21209 Centralize handling of ""Forwarded"" headers to ForwardedHeaderFilter  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c7c3e5585bc28f7a7df2b08e9c24187d1c64f637, https://github.com/spring-projects/spring-framework/commit/3eac2dd31e0e2fa582c9da4bc7d2ca1385871b9d","closed","type: enhancement,","spring-projects-issues","2018-05-22T18:18:54Z","2019-01-11T17:09:15Z"
"","21215","@RequestMethod with ""params"" doesn't distinguish whether a value is specified or not [SPR-16674]","**[Graham Cox](https://jira.spring.io/secure/ViewProfile.jspa?name=grahamcox82)** opened **[SPR-16674](https://jira.spring.io/browse/SPR-16674?redirect=false)** and commented  If I have handler methods annotated with `@RequestMethod`, with varying degrees of the ""params"" property, Spring doesn't differentiate as I'd hoped.  Specifically, in this case:  ``` @Controller @RequestMapping(value = [""/oauth2/auth""], method = [RequestMethod.GET]) class AuthorizationController {     @RequestMapping(params = [""response_type=code""])     fun startAuthorizationCode() {         LOG.debug(""Starting authorization with response_type=code"")     }     @RequestMapping(params = [""response_type""])     fun startAuthorizationUnknownType(@RequestParam(""response_type"") responseType: String) {         LOG.warn(""Unknown response_type value: {}"", responseType)     }     @RequestMapping     fun startAuthorizationNoType() {         LOG.warn(""Missing mandatory parameter: response_type"")     } } ```  If I call ""GET /oauth2/auth"" then I correctly trigger ""startAuthorizationNoType"" - as the only matching handler.  If I call ""GET /oauth2/auth?response_type=different"" then I correctly trigger ""startAuthorizationUnknownType"" - as the more specific match.  Unfortunately, the other case fails. A call to ""GET /oauth2/auth?response_type=code"" triggers:  ``` java.lang.IllegalStateException: Ambiguous handler methods mapped for HTTP path 'http://localhost:8080/oauth2/auth': {public void uk.co.grahamcox.worlds.openid.AuthorizationController.startAuthorizationCode(), public void uk.co.grahamcox.worlds.openid.AuthorizationController.startAuthorizationUnknownType(java.lang.String)} 	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.lookupHandlerMethod(AbstractHandlerMethodMapping.java:370) 	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:317) 	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:62) 	at org.springframework.web.servlet.handler.AbstractHandlerMapping.getHandler(AbstractHandlerMapping.java:351) 	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.getHandler(WebMvcMetricsFilter.java:132) 	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:119) 	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:111) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ```  I was hoping that this would instead trigger ""startAuthorizationCode"" as the most specific match of the three, but this proved not to be the case.   ---  **Affects:** 5.0.4","closed","type: enhancement,","spring-projects-issues","2018-03-30T18:58:33Z","2018-07-26T08:09:32Z"
"","21528","Error creating bean with name 'org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration$EnableWebMvcConfiguration when starting spring boot on Wildfly 11,12,13. [SPR-16990]","**[Giuseppe M Pereira](https://jira.spring.io/secure/ViewProfile.jspa?name=giuseppemp)** opened **[SPR-16990](https://jira.spring.io/browse/SPR-16990?redirect=false)** and commented  Bug report  ```java //  ""WFLYCTL0080: Failed services"" => {""jboss.undertow.deployment.default-server.default-host.\""/dynamo-application-0.0.1-SNAPSHOT\"""" => ""java.lang.RuntimeException: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration$EnableWebMvcConfiguration': Injection of autowired dependencies failed; nested exception is org.springframework.aop.framework.AopConfigException: Unexpected AOP exception; nested exception is org.springframework.aop.framework.AopConfigException: Unable to instantiate proxy using Objenesis, and regular proxy instantiation via default constructor fails as well; nested exception is java.lang.InstantiationException: org.springframework.boot.autoconfigure.web.HttpMessageConverters$$EnhancerBySpringCGLIB$$3ba87c15     Caused by: java.lang.RuntimeException: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration$EnableWebMvcConfiguration': Injection of autowired dependencies failed; nested exception is org.springframework.aop.framework.AopConfigException: Unexpected AOP exception; nested exception is org.springframework.aop.framework.AopConfigException: Unable to instantiate proxy using Objenesis, and regular proxy instantiation via default constructor fails as well; nested exception is java.lang.InstantiationException: org.springframework.boot.autoconfigure.web.HttpMessageConverters$$EnhancerBySpringCGLIB$$3ba87c15     Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration$EnableWebMvcConfiguration': Injection of autowired dependencies failed; nested exception is org.springframework.aop.framework.AopConfigException: Unexpected AOP exception; nested exception is org.springframework.aop.framework.AopConfigException: Unable to instantiate proxy using Objenesis, and regular proxy instantiation via default constructor fails as well; nested exception is java.lang.InstantiationException: org.springframework.boot.autoconfigure.web.HttpMessageConverters$$EnhancerBySpringCGLIB$$3ba87c15     Caused by: org.springframework.aop.framework.AopConfigException: Unexpected AOP exception; nested exception is org.springframework.aop.framework.AopConfigException: Unable to instantiate proxy using Objenesis, and regular proxy instantiation via default constructor fails as well; nested exception is java.lang.InstantiationException: org.springframework.boot.autoconfigure.web.HttpMessageConverters$$EnhancerBySpringCGLIB$$3ba87c15     Caused by: org.springframework.aop.framework.AopConfigException: Unable to instantiate proxy using Objenesis, and regular proxy instantiation via default constructor fails as well; nested exception is java.lang.InstantiationException: org.springframework.boot.autoconfigure.web.HttpMessageConverters$$EnhancerBySpringCGLIB$$3ba87c15     Caused by: java.lang.InstantiationException: org.springframework.boot.autoconfigure.web.HttpMessageConverters$$EnhancerBySpringCGLIB$$3ba87c15     Caused by: java.lang.NoSuchMethodException: org.springframework.boot.autoconfigure.web.HttpMessageConverters$$EnhancerBySpringCGLIB$$3ba87c15.()""}, ```  Getting following exception when loading spring boot war on wildfly 13. However, it works if I start my project with maven from the console with mvn spring-boot:run as jar build.   ---  **Affects:** 5.0.7  **Referenced from:** commits https://github.com/spring-projects/spring-boot/commit/58e886fddf8a1077efedcb99c8038b6e7aaf55b8","closed","status: invalid,","spring-projects-issues","2018-07-02T02:53:19Z","2019-01-12T05:18:36Z"
"","21827","Safe Navigation operator doesn't work as expected [SPR-17294]","**[Giulio Quaresima](https://jira.spring.io/secure/ViewProfile.jspa?name=giulio.quaresima)** opened **[SPR-17294](https://jira.spring.io/browse/SPR-17294?redirect=false)** and commented  When I use the [Safe Navigation operator](https://docs.spring.io/spring/docs/4.3.19.RELEASE/spring-framework-reference/html/expressions.html#expressions-operator-safe-navigation) my expectation is that it is always safe to evaluate an expression with null values. But in some contexts I get the SpelEvaluationException with the message ""EL1012E:(pos 11): Cannot index into a null value"".  See the example attached.   ---  **Affects:** 4.3.19  **Attachments:** - [SpringSpelBug.java](https://jira.spring.io/secure/attachment/26025/SpringSpelBug.java) (_1.74 kB_)","open","in: core,","spring-projects-issues","2018-09-21T12:50:51Z","2019-06-04T18:33:53Z"
"","21389","Confusing javadoc in YamlProcessor.setDocumentMatchers [SPR-16849]","**[Georgios Andrianakis](https://jira.spring.io/secure/ViewProfile.jspa?name=geoand)** opened **[SPR-16849](https://jira.spring.io/browse/SPR-16849?redirect=false)** and commented  Currently the Javadoc of _YamlProcessor.setDocumentMatchers_ states, that it can be used with something like:     ```java YamlProcessor.mapMatcher({""environment"": ""prod""}) ```      which is somewhat confusing since _mapMatcher_ is not a method of YamlProcessor.   I propose that the javadoc shows a use case like the one that is used in the tests (see [here](https://github.com/spring-projects/spring-framework/blob/f5e8f4983f7653169f3da8a3287499fce93cadd4/spring-beans/src/main/java/org/springframework/beans/factory/config/YamlProcessor.java#L83))   I can of course create a PR for this if it's something that you deem is worth changing     Thanks   ---  **Affects:** 4.3.17, 5.0.6  **Reference URL:** https://github.com/spring-projects/spring-framework/blob/f5e8f4983f7653169f3da8a3287499fce93cadd4/spring-beans/src/main/java/org/springframework/beans/factory/config/YamlProcessor.java#L83  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/455d8ac7b931f7c91406ae018badda0959cb02ff, https://github.com/spring-projects/spring-framework/commit/357ca2167509b06648c60fc7a0b7a0b371466e66, https://github.com/spring-projects/spring-framework/commit/7ece0e219e3bfdcffc00c574a9cc891cff4060df  **Backported to:** [4.3.18](https://github.com/spring-projects/spring-framework/milestone/167?closed=1)","closed","in: core,","spring-projects-issues","2018-05-21T12:10:00Z","2018-06-12T15:44:03Z"
"","21383","Problem with passing null parameter to MapSqlParameterSource  [SPR-16843]","**[Georgi Lengarski](https://jira.spring.io/secure/ViewProfile.jspa?name=lengarski)** opened **[SPR-16843](https://jira.spring.io/browse/SPR-16843?redirect=false)** and commented  I have following problem when pass null to MapSqlParameterSource     {{    final MapSqlParameterSource paramMap = new MapSqlParameterSource() .addValue(""ALERT_ID"", null);}} |Code|Warning| |:---|:---| |NP|Null passed for non-null parameter of org.springframework.jdbc.core.namedparam.MapSqlParameterSource.addValue(String, Object) in bug.DocDao.test()| | |Bug type NP_NONNULL_PARAM_VIOLATION (click for details) In class bug.DocDaoIn method bug.DocDao.test()Called method org.springframework.jdbc.core.namedparam.MapSqlParameterSource.addValue(String, Object)Argument 2 is definitely null but must not be nullAt DocDao.java:[line 15]|  In my case null is valid value for database. Sample code is attached here https://github.com/lengarski/bug  Here is the response from spotbugs [spotbugs/spotbugs#642](https://github.com/spotbugs/spotbugs/issues/642)  ---  **Affects:** 5.0.5  **Issue Links:** - #21371 ConcurrentModel.addAttribute(name, value) javadoc should not declare null value as acceptable  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d9c63182d90eafaa98d950bf2ae748a050eb7bd8, https://github.com/spring-projects/spring-framework/commit/99534a31baddb36573f3e3fa57d329b613f4bb09","closed","type: bug,","spring-projects-issues","2018-05-18T12:16:05Z","2019-01-29T05:30:07Z"
"","21201","UriComponentsBuilder Forwarded header parsing can throw java.lang.NumberFormatException [SPR-16660]","**[George Kearns](https://jira.spring.io/secure/ViewProfile.jspa?name=gkearns)** opened **[SPR-16660](https://jira.spring.io/browse/SPR-16660?redirect=false)** and commented  The UriComponentsBuilder.adaptForwardedHost method blindly executes Integer.parseInt on the string value following the "":"" in the header being parsed; that string may cause a java.lang.NumberFormatException if it is not parseable to an int.  To reproduce, send a header like this: X-Forwarded-Host=[]somewhere.com://badport/  Produces stack trace: java.lang.NumberFormatException: For input string: ""//badport/"" at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) at java.lang.Integer.parseInt(Integer.java:569) at java.lang.Integer.parseInt(Integer.java:615) at org.springframework.web.util.UriComponentsBuilder.adaptForwardedHost(UriComponentsBuilder.java:716) at org.springframework.web.util.UriComponentsBuilder.adaptFromForwardedHeaders(UriComponentsBuilder.java:690) at org.springframework.web.util.WebUtils.isSameOrigin(WebUtils.java:833) at org.springframework.web.cors.DefaultCorsProcessor.processRequest(DefaultCorsProcessor.java:76) at org.springframework.web.servlet.handler.AbstractHandlerMapping$CorsInterceptor.preHandle(AbstractHandlerMapping.java:507) at org.springframework.web.servlet.HandlerExecutionChain.applyPreHandle(HandlerExecutionChain.java:133) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:962) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861) at javax.servlet.http.HttpServlet.service(HttpServlet.java:635) at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) at javax.servlet.http.HttpServlet.service(HttpServlet.java:742) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:728) at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:469) at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:392) at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:311) at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:395) at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:254) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:177) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:80) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342) at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:799) at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868) at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1455) at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) at java.lang.Thread.run(Thread.java:748)  ---  **Affects:** 4.3.14, 5.0.4  **Issue Links:** - #21191 ServletUriComponentsBuilder should replace context path when X-Forwarded-Prefix is present - #21209 Centralize handling of ""Forwarded"" headers to ForwardedHeaderFilter  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","type: bug,","spring-projects-issues","2018-03-28T21:35:13Z","2019-01-11T15:05:26Z"
"","21562","Evaluate @Cacheable(condition) once per method invocation only [SPR-17024]","**[George Georgovassilis](https://jira.spring.io/secure/ViewProfile.jspa?name=g.georgovassilis)** opened **[SPR-17024](https://jira.spring.io/browse/SPR-17024?redirect=false)** and commented  Cacheable(condition) is evaluated twice for every invocation on the proxied object. For a failing test see https://github.com/ggeorgovassilis/spring-cache-double-condition-evaluation/tree/master  This is a potential performance bottleneck as conditions may delegate to objects which query a database or perform costly cryptographic operations.   ---  **Affects:** 5.0.7  **Reference URL:** https://github.com/ggeorgovassilis/spring-cache-double-condition-evaluation/tree/master  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/faef363e8537a7a85e5b1fe46130be6f06a5c2fe","closed","type: enhancement,","spring-projects-issues","2018-07-09T16:04:40Z","2018-07-26T08:09:31Z"
"","21598","Spring security default login page is not rendered correctly when using SSL [SPR-17060]","**[Georg Mittendorfer](https://jira.spring.io/secure/ViewProfile.jspa?name=mio)** opened **[SPR-17060](https://jira.spring.io/browse/SPR-17060?redirect=false)** and commented  When using SSL and accessing the spring security default login page via https it is not rendered correctly as one of the stylesheets is not used.  See reference url for an online example (link might change)  The reason for this is that this stylesheet is linked via a http link. Changing that to https fixes the issue for me.  The code for the login page seems to be generated in org.springframework.security.web.server.ui.LoginPageGeneratingWebFilter#createPage  Current:  ```  ```  Possible fix:  ``` ​  ```    ---  **Affects:** 5.0.6","closed","status: invalid,","spring-projects-issues","2018-07-18T16:54:00Z","2019-01-12T05:18:27Z"
"","21597","Testing actuator endpoint authorization with webclient throws exception [SPR-17059]","**[Georg Mittendorfer](https://jira.spring.io/secure/ViewProfile.jspa?name=mio)** opened **[SPR-17059](https://jira.spring.io/browse/SPR-17059?redirect=false)** and commented  I try to test my actuator endpoints. I followed the instructions here: https://docs.spring.io/spring-security/site/docs/current/reference/html5/#test-webflux  My actuator endpoint is secured as follows:  ```java @Bean public SecurityWebFilterChain springSecurityFilterChain(ServerHttpSecurity http) {   return http.authorizeExchange()     .matchers(EndpointRequest.toAnyEndpoint()).hasRole(""ENDPOINT_ADMIN"") // throws     .anyExchange().authenticated()     .and().httpBasic()     .and().formLogin()     .and().csrf().disable()     .build(); }  ```  That works (HTTP 200/401/403) when running the application. But the following tests (some examples) do not work (HTTP 500)""  ```java @Test public void whenActuatorInfoThen401Unauthorized() {   restClient.get().uri(""/actuator/info"").exchange().expectStatus().isUnauthorized(); }  @WithMockUser(roles = ""ENDPOINT_ADMIN"") @Test public void givenEndpointAdminWhenActuatorInfoThen200Ok() {   restClient.get().uri(""/actuator/info"").exchange().expectStatus().isOk(); }  @Test public void whenUnknownPathThen401Unauthorized() {   restClient.get().uri(""/foo/bar"").exchange().expectStatus().isUnauthorized(); }  @WithMockUser @Test public void givenUserWhenUnknownPathThen404NotFound() {   restClient.get().uri(""/foo/bar"").exchange().expectStatus().isNotFound(); } ```  I get:     ``` 16:59:36.257 [main] ERROR o.s.b.a.w.r.e.DefaultErrorWebExceptionHandler - Failed to handle request [GET /actuator/info] java.lang.IllegalStateException: No WebApplicationContext found. 	at org.springframework.util.Assert.state(Assert.java:73) 	at org.springframework.boot.security.reactive.ApplicationContextServerWebExchangeMatcher.createContext(ApplicationContextServerWebExchangeMatcher.java:91) 	at org.springframework.boot.security.reactive.ApplicationContextServerWebExchangeMatcher.getContext(ApplicationContextServerWebExchangeMatcher.java:73) 	at org.springframework.boot.security.reactive.ApplicationContextServerWebExchangeMatcher.matches(ApplicationContextServerWebExchangeMatcher.java:57) 	at org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher.lambda$matches$0(OrServerWebExchangeMatcher.java:51) 	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onNext(FluxFlatMap.java:347) 	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:244) 	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:202) 	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:332) 	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:140) 	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:64) 	at reactor.core.publisher.FluxFlatMap.subscribe(FluxFlatMap.java:97) 	at reactor.core.publisher.FluxFilter.subscribe(FluxFilter.java:52) 	at reactor.core.publisher.MonoNext.subscribe(MonoNext.java:40) 	at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44) 	at reactor.core.publisher.MonoFilter.subscribe(MonoFilter.java:46) 	at reactor.core.publisher.MonoMap.subscribe(MonoMap.java:55) 	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) 	at reactor.core.publisher.MonoLiftFuseable.subscribe(MonoLiftFuseable.java:56) 	at reactor.core.publisher.Mono.subscribe(Mono.java:3080) 	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:418) 	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:210) 	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:140) 	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:64) 	at reactor.core.publisher.FluxConcatMap.subscribe(FluxConcatMap.java:121) 	at reactor.core.publisher.MonoNext.subscribe(MonoNext.java:40) 	at reactor.core.publisher.MonoDefaultIfEmpty.subscribe(MonoDefaultIfEmpty.java:37) 	at reactor.core.publisher.MonoFilter.subscribe(MonoFilter.java:46) 	at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44) 	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) 	at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44) 	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53) 	at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44) 	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53) 	at reactor.core.publisher.MonoLift.subscribe(MonoLift.java:46) 	at reactor.core.publisher.Mono.subscribe(Mono.java:3080) 	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:172) 	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56) 	at reactor.core.publisher.MonoLiftFuseable.subscribe(MonoLiftFuseable.java:56) 	at reactor.core.publisher.Mono.subscribe(Mono.java:3080) 	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75) 	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:142) 	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:78) 	at org.springframework.security.test.context.support.ReactorContextTestExecutionListener$DelegateTestExecutionListener$SecuritySubContext.onComplete(ReactorContextTestExecutionListener.java:114) 	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1642) 	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1454) 	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1328) 	at org.springframework.security.test.context.support.ReactorContextTestExecutionListener$DelegateTestExecutionListener$SecuritySubContext.onSubscribe(ReactorContextTestExecutionListener.java:99) 	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54) 	at reactor.core.publisher.MonoLiftFuseable.subscribe(MonoLiftFuseable.java:56) 	at reactor.core.publisher.Mono.subscribe(Mono.java:3080) 	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75) 	at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:96) 	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:142) 	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:773) 	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:543) 	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:523) 	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:409) 	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:266) 	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:202) 	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:332) 	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:140) 	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:64) 	at reactor.core.publisher.FluxFlatMap.subscribe(FluxFlatMap.java:97) 	at reactor.core.publisher.FluxFilter.subscribe(FluxFilter.java:52) 	at reactor.core.publisher.MonoNext.subscribe(MonoNext.java:40) 	at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44) 	at reactor.core.publisher.MonoFilter.subscribe(MonoFilter.java:46) 	at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44) 	at reactor.core.publisher.MonoMap.subscribe(MonoMap.java:55) 	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) 	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) 	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53) 	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150) 	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1083) 	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:100) 	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:130) 	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:130) 	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:142) 	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:245) 	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1085) 	at reactor.core.publisher.MonoProcessor.onNext(MonoProcessor.java:389) 	at org.springframework.security.test.context.support.ReactorContextTestExecutionListener$DelegateTestExecutionListener$SecuritySubContext.onNext(ReactorContextTestExecutionListener.java:104) 	at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:185) 	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67) 	at org.springframework.security.test.context.support.ReactorContextTestExecutionListener$DelegateTestExecutionListener$SecuritySubContext.onNext(ReactorContextTestExecutionListener.java:104) 	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1083) 	at reactor.core.publisher.MonoSupplier.subscribe(MonoSupplier.java:61) 	at reactor.core.publisher.MonoLiftFuseable.subscribe(MonoLiftFuseable.java:56) 	at reactor.core.publisher.Mono.subscribe(Mono.java:3080) 	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75) 	at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:96) 	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:349) 	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onComplete(FluxConcatMap.java:265) 	at reactor.core.publisher.Operators.complete(Operators.java:128) 	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:123) 	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:64) 	at reactor.core.publisher.FluxConcatMap.subscribe(FluxConcatMap.java:121) 	at reactor.core.publisher.MonoNext.subscribe(MonoNext.java:40) 	at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44) 	at reactor.core.publisher.MonoPeek.subscribe(MonoPeek.java:71) 	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53) 	at reactor.core.publisher.MonoLift.subscribe(MonoLift.java:46) 	at reactor.core.publisher.Mono.subscribe(Mono.java:3080) 	at reactor.core.publisher.MonoProcessor.add(MonoProcessor.java:531) 	at reactor.core.publisher.MonoProcessor.subscribe(MonoProcessor.java:444) 	at reactor.core.publisher.MonoMap.subscribe(MonoMap.java:52) 	at reactor.core.publisher.MonoFilter.subscribe(MonoFilter.java:46) 	at reactor.core.publisher.MonoMap.subscribe(MonoMap.java:55) 	at reactor.core.publisher.MonoMap.subscribe(MonoMap.java:55) 	at reactor.core.publisher.MonoDefaultIfEmpty.subscribe(MonoDefaultIfEmpty.java:37) 	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) 	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53) 	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53) 	at reactor.core.publisher.MonoLift.subscribe(MonoLift.java:46) 	at reactor.core.publisher.Mono.subscribe(Mono.java:3080) 	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:172) 	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56) 	at reactor.core.publisher.MonoLiftFuseable.subscribe(MonoLiftFuseable.java:56) 	at reactor.core.publisher.Mono.subscribe(Mono.java:3080) 	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75) 	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:142) 	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:78) 	at org.springframework.security.test.context.support.ReactorContextTestExecutionListener$DelegateTestExecutionListener$SecuritySubContext.onComplete(ReactorContextTestExecutionListener.java:114) 	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1642) 	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1454) 	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1328) 	at org.springframework.security.test.context.support.ReactorContextTestExecutionListener$DelegateTestExecutionListener$SecuritySubContext.onSubscribe(ReactorContextTestExecutionListener.java:99) 	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54) 	at reactor.core.publisher.MonoLiftFuseable.subscribe(MonoLiftFuseable.java:56) 	at reactor.core.publisher.Mono.subscribe(Mono.java:3080) 	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75) 	at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:96) 	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:142) 	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:773) 	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:543) 	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:523) 	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:409) 	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:266) 	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:202) 	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:332) 	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:140) 	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:64) 	at reactor.core.publisher.FluxFlatMap.subscribe(FluxFlatMap.java:97) 	at reactor.core.publisher.FluxFilter.subscribe(FluxFilter.java:52) 	at reactor.core.publisher.MonoNext.subscribe(MonoNext.java:40) 	at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44) 	at reactor.core.publisher.MonoFilter.subscribe(MonoFilter.java:46) 	at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44) 	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) 	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53) 	at reactor.core.publisher.MonoLift.subscribe(MonoLift.java:46) 	at reactor.core.publisher.Mono.subscribe(Mono.java:3080) 	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:172) 	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56) 	at reactor.core.publisher.MonoLiftFuseable.subscribe(MonoLiftFuseable.java:56) 	at reactor.core.publisher.Mono.subscribe(Mono.java:3080) 	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75) 	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:142) 	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:78) 	at org.springframework.security.test.context.support.ReactorContextTestExecutionListener$DelegateTestExecutionListener$SecuritySubContext.onComplete(ReactorContextTestExecutionListener.java:114) 	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1642) 	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1454) 	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1328) 	at org.springframework.security.test.context.support.ReactorContextTestExecutionListener$DelegateTestExecutionListener$SecuritySubContext.onSubscribe(ReactorContextTestExecutionListener.java:99) 	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54) 	at reactor.core.publisher.MonoLiftFuseable.subscribe(MonoLiftFuseable.java:56) 	at reactor.core.publisher.Mono.subscribe(Mono.java:3080) 	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75) 	at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:96) 	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:142) 	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:773) 	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:543) 	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:523) 	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:409) 	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:266) 	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:202) 	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:332) 	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:140) 	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:64) 	at reactor.core.publisher.FluxFlatMap.subscribe(FluxFlatMap.java:97) 	at reactor.core.publisher.FluxFilter.subscribe(FluxFilter.java:52) 	at reactor.core.publisher.MonoNext.subscribe(MonoNext.java:40) 	at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44) 	at reactor.core.publisher.MonoFilter.subscribe(MonoFilter.java:46) 	at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44) 	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) 	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53) 	at reactor.core.publisher.MonoLift.subscribe(MonoLift.java:46) 	at reactor.core.publisher.Mono.subscribe(Mono.java:3080) 	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:172) 	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56) 	at reactor.core.publisher.MonoLiftFuseable.subscribe(MonoLiftFuseable.java:56) 	at reactor.core.publisher.Mono.subscribe(Mono.java:3080) 	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75) 	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:174) 	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:142) 	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:78) 	at org.springframework.security.test.context.support.ReactorContextTestExecutionListener$DelegateTestExecutionListener$SecuritySubContext.onComplete(ReactorContextTestExecutionListener.java:114) 	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1642) 	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1454) 	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1328) 	at org.springframework.security.test.context.support.ReactorContextTestExecutionListener$DelegateTestExecutionListener$SecuritySubContext.onSubscribe(ReactorContextTestExecutionListener.java:99) 	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54) 	at reactor.core.publisher.MonoLiftFuseable.subscribe(MonoLiftFuseable.java:56) 	at reactor.core.publisher.Mono.subscribe(Mono.java:3080) 	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75) 	at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:96) 	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:142) 	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:773) 	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:543) 	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:523) 	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:409) 	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:266) 	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:202) 	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:332) 	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:140) 	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:64) 	at reactor.core.publisher.FluxFlatMap.subscribe(FluxFlatMap.java:97) 	at reactor.core.publisher.FluxFilter.subscribe(FluxFilter.java:52) 	at reactor.core.publisher.MonoNext.subscribe(MonoNext.java:40) 	at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44) 	at reactor.core.publisher.MonoFilter.subscribe(MonoFilter.java:46) 	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) 	at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44) 	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) 	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53) 	at reactor.core.publisher.MonoLift.subscribe(MonoLift.java:46) 	at reactor.core.publisher.Mono.subscribe(Mono.java:3080) 	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:172) 	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56) 	at reactor.core.publisher.MonoLiftFuseable.subscribe(MonoLiftFuseable.java:56) 	at reactor.core.publisher.Mono.subscribe(Mono.java:3080) 	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75) 	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:141) 	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:104) 	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1640) 	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:170) 	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:103) 	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:79) 	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54) 	at reactor.core.publisher.MonoFilterFuseable.subscribe(MonoFilterFuseable.java:47) 	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) 	at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44) 	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) 	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53) 	at reactor.core.publisher.MonoSubscriberContext.subscribe(MonoSubscriberContext.java:47) 	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53) 	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53) 	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53) 	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150) 	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:115) 	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:115) 	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1083) 	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241) 	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1083) 	at reactor.core.publisher.MonoCollectList$MonoBufferAllSubscriber.onComplete(MonoCollectList.java:117) 	at reactor.core.publisher.FluxIterable$IterableSubscription.fastPath(FluxIterable.java:334) 	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:199) 	at reactor.core.publisher.MonoCollectList$MonoBufferAllSubscriber.onSubscribe(MonoCollectList.java:90) 	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:140) 	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:64) 	at reactor.core.publisher.MonoCollectList.subscribe(MonoCollectList.java:59) 	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150) 	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67) 	at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:76) 	at reactor.core.publisher.FluxFilterWhen$FluxFilterWhenSubscriber.drain(FluxFilterWhen.java:287) 	at reactor.core.publisher.FluxFilterWhen$FluxFilterWhenSubscriber.onNext(FluxFilterWhen.java:131) 	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:244) 	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:202) 	at reactor.core.publisher.FluxFilterWhen$FluxFilterWhenSubscriber.onSubscribe(FluxFilterWhen.java:190) 	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:140) 	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:64) 	at reactor.core.publisher.FluxFilterWhen.subscribe(FluxFilterWhen.java:68) 	at reactor.core.publisher.MonoNext.subscribe(MonoNext.java:40) 	at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44) 	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) 	at reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:59) 	at reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:59) 	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) 	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53) 	at reactor.core.publisher.MonoPeekTerminal.subscribe(MonoPeekTerminal.java:61) 	at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74) 	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53) 	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53) 	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53) 	at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44) 	at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44) 	at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44) 	at reactor.core.publisher.MonoLift.subscribe(MonoLift.java:46) 	at reactor.core.publisher.Mono.subscribe(Mono.java:3080) 	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:172) 	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56) 	at reactor.core.publisher.MonoLiftFuseable.subscribe(MonoLiftFuseable.java:56) 	at reactor.core.publisher.Mono.subscribe(Mono.java:3080) 	at reactor.core.publisher.Mono.subscribeWith(Mono.java:3188) 	at reactor.core.publisher.Mono.subscribe(Mono.java:3074) 	at reactor.core.publisher.Mono.subscribe(Mono.java:3041) 	at reactor.core.publisher.Mono.subscribe(Mono.java:3013) 	at org.springframework.test.web.reactive.server.HttpHandlerConnector.lambda$connect$1(HttpHandlerConnector.java:89) 	at org.springframework.mock.http.client.reactive.MockClientHttpRequest.lambda$null$2(MockClientHttpRequest.java:125) 	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:45) 	at reactor.core.publisher.MonoLift.subscribe(MonoLift.java:46) 	at reactor.core.publisher.Mono.subscribe(Mono.java:3080) 	at reactor.core.publisher.FluxConcatIterable$ConcatIterableSubscriber.onComplete(FluxConcatIterable.java:147) 	at reactor.core.publisher.FluxConcatIterable.subscribe(FluxConcatIterable.java:61) 	at reactor.core.publisher.MonoSourceFlux.subscribe(MonoSourceFlux.java:47) 	at reactor.core.publisher.MonoLift.subscribe(MonoLift.java:46) 	at reactor.core.publisher.Mono.subscribe(Mono.java:3080) 	at reactor.core.publisher.Mono.subscribeWith(Mono.java:3188) 	at reactor.core.publisher.Mono.subscribe(Mono.java:3074) 	at reactor.core.publisher.Mono.subscribe(Mono.java:3041) 	at reactor.core.publisher.Mono.subscribe(Mono.java:3013) 	at org.springframework.test.web.reactive.server.HttpHandlerConnector.connect(HttpHandlerConnector.java:100) 	at org.springframework.test.web.reactive.server.WiretapConnector.connect(WiretapConnector.java:73) 	at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.exchange(ExchangeFunctions.java:79) 	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:141) 	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:53) 	at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44) 	at reactor.core.publisher.MonoLift.subscribe(MonoLift.java:46) 	at reactor.core.publisher.Mono.block(Mono.java:1198) 	at org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultRequestBodyUriSpec.exchange(DefaultWebTestClient.java:282) ```  By replacing the the matcher in the configuration with a path matcher everything works as expected:  ```java [...] .pathMatchers(""/actuator"", ""/actuator/*"").hasRole(""ENDPOINT_ADMIN"") // working [...] ```  Disclaimer: I am not sure if this is a bug or simply a mistake I made in my test. If it was the latter please ignore.  ---  **Affects:** 5.0.6  **Issue Links:** - #21510 The WebHttpHandlerBuilder copy constructor does not copy the applicationcontext (_**""duplicates""**_)","closed","status: invalid,","spring-projects-issues","2018-07-18T15:10:31Z","2019-01-14T04:30:26Z"
"","21657","ScriptUtils.containsSqlScriptDelimiters does not take into account escaped quotes [SPR-17120]","**[geordiecoder](https://jira.spring.io/secure/ViewProfile.jspa?name=geordiecoder)** opened **[SPR-17120](https://jira.spring.io/browse/SPR-17120?redirect=false)** and commented  `ScriptUtils#containsSqlScriptDelimiters()` does not take into account escaped quotes when looking for delimiters in the script.  The delimiter in the following example won't be found, since the method gets out of step with the literals. The result being the fallback delimiter `""\n""` being used, breaking the script (since `ScriptUtils` will attempt to execute just the first line):  ```sql INSERT INTO some_table (id, val) VALUES    (1,'this won\'t work'); ```  Edit: This happens with a MySQL database. With HSQLDB I believe you can't escape quotes in this way, but rather with a second quote, which wouldn't exhibit the problem. If `ScriptUtils` is only meant to be used with HSQLDB then apologies, and please close this!   ---  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/1919  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bdac39150f7137ab244590131d3d8b825ccc9e5d, https://github.com/spring-projects/spring-framework/commit/24ed6de6aaece130fa38e758712cedf6987212d0","closed","type: enhancement,","spring-projects-issues","2018-08-02T20:23:00Z","2018-08-17T09:42:43Z"
"","21450","CommonsPool2TargetSource release target giving error ""Returned object not currently part of this pool"" [SPR-16911]","**[Gaurav](https://jira.spring.io/secure/ViewProfile.jspa?name=gauravtyagi77)** opened **[SPR-16911](https://jira.spring.io/browse/SPR-16911?redirect=false)** and commented  After upgrading to spring 5 and replacing CommonsPoolTargetSource with CommonsPool2TargetSource when I try to fire releasetraget method it's giving error ""Returned object not currently part of this pool"" while same code was working with spring 4.1.6 and CommonsPoolTargetSource class.   ---  **Affects:** 5.0.4  **Attachments:** - [Beans.xml](https://jira.spring.io/secure/attachment/25741/Beans.xml) (_1.33 kB_) - [GenericLifeCycleProcessor.java](https://jira.spring.io/secure/attachment/25739/GenericLifeCycleProcessor.java) (_735 bytes_) - [PaymentInstructionActivationSchedulingExecutor.java](https://jira.spring.io/secure/attachment/25740/PaymentInstructionActivationSchedulingExecutor.java) (_1.55 kB_)","closed","in: core,","spring-projects-issues","2018-06-06T12:23:49Z","2019-01-12T05:18:41Z"
"","21366","Connection acquired while calling a stored procedure via JPA is not released [SPR-16826]","**[Gaurav Khandelwal](https://jira.spring.io/secure/ViewProfile.jspa?name=gaurav.khandelwal)** opened **[SPR-16826](https://jira.spring.io/browse/SPR-16826?redirect=false)** and commented  When a DB stored procedure is called via Spring JPA, connection acquired from Connection Pool is not release back after calling.     Inside Class org.springframework.orm.jpa.SharedEntityManagerCreator and method invoke()  entity manager is only closed if method name matches ""queryTerminatingMethods"" set which does not include ""execute"" method used for calling Stored Procedure.  ---  **Affects:** 4.3.17, 5.0.6  **Attachments:** - [Connection Not Closed.JPG](https://jira.spring.io/secure/attachment/25722/Connection+Not+Closed.JPG) (_102.95 kB_)  **Issue Links:** - #21652 SharedEntityManagerCreator should support deferred access to StoredProcedureQuery output parameters  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/997ca5cd3fbfc7e508324cc16beb2b49da7da852, https://github.com/spring-projects/spring-framework/commit/3978d5500db9b347ae8f7c0a3c9a1556b42de89d, https://github.com/spring-projects/spring-framework/commit/3c8c99664fcf444d72183a5bf8eec609c7706dbf  **Backported to:** [4.3.18](https://github.com/spring-projects/spring-framework/milestone/167?closed=1)","closed","type: bug,","spring-projects-issues","2018-05-15T15:07:16Z","2019-01-11T16:45:40Z"
"","21880","UnsupportedMediaTypeException Should Contain Details of the Resolvable Type [SPR-17346]","**[garyodam](https://jira.spring.io/secure/ViewProfile.jspa?name=garyodam)** opened **[SPR-17346](https://jira.spring.io/browse/SPR-17346?redirect=false)** and commented  When a HttpMessageReader can't be found to read a message in org.springframework.web.reactive.function.BodyExtractors#readWithMessageReaders an UnsupportedMediaTypeException is thrown. The UnsupportedMediaTypeException only includes content type from the input message in the exception when the canRead method used to check whether a HttpMessageReader can read the message can return false if the HttpMessageReader doesn't support the resolvable type of the message as well as its' content type.  I encountered the error message:  ```none org.springframework.web.reactive.function.UnsupportedMediaTypeException: Content type 'application/x-jackson-smile;charset=UTF-8' not supported  ```  This was misleading because the problem was nothing to do with not supporting the content type. It was because the SmileFactory that the WebClient had in its exchange strategy did not have the GuavaModule added to it. Had the error message indicated that the type that I was trying to deserialze to could be the problem as well as content type then I think it's likely I would have recognized the root cause without resorting to debugging the code to see what was happening.  I've attached a sample project. The problem should be apparent from running spring.webflux.BodyExtractorsTest or mvn test. There's some extra docs in spring.webflux.BodyExtractorsTest.  ---  **Affects:** 5.0.9  **Attachments:** - [body-extrators.zip](https://jira.spring.io/secure/attachment/26041/body-extrators.zip) (_6.08 kB_)  **Issue Links:** - #21345 Improve UnsupportedMediaTypeException and UnsupportedMediaTypeStatusException to include body type (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2018-10-05T13:22:08Z","2019-01-11T14:14:51Z"
"","21852","Consider caching PayloadArgumentResolver MethodParameter parsing [SPR-17319]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-17319](https://jira.spring.io/browse/SPR-17319?redirect=false)** and commented  Currently, the `validate()` method parses the parameter annotations on every call.  It should be possible to cache the results and only parse on the first call.   ---  **Affects:** 5.1 GA","open","type: enhancement,","spring-projects-issues","2018-10-01T19:12:31Z","2018-10-12T08:37:28Z"
"","21469","Javadoc for FunctionReference mentions SpEL Lambdas [SPR-16930]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-16930](https://jira.spring.io/browse/SPR-16930?redirect=false)** and commented   ---  **Affects:** 4.3.17, 5.0.6  **Reference URL:** https://stackoverflow.com/questions/50797608/using-spring-el-to-set-value-as-lambda/50798960#50798960  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/78d3164543d58e6d86a283dc997214d4875bcdd2, https://github.com/spring-projects/spring-framework/commit/6df7ba2447e7b3ee3fd37dff491bfe82f893f0af, https://github.com/spring-projects/spring-framework/commit/4aafbe5a8441b892d19173569b73637483d8eea0  **Backported to:** [4.3.18](https://github.com/spring-projects/spring-framework/milestone/167?closed=1)","closed","in: core,","spring-projects-issues","2018-06-11T13:35:21Z","2018-06-12T15:44:03Z"
"","21303","Misleading error message when evaluating T operator [SPR-16762]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-16762](https://jira.spring.io/browse/SPR-16762?redirect=false)** and commented  `MethodReference.findAccessorForMethod()` - when the `targetObject` is a class, the exception message says   ``` EL1031E: Problem locating method of on type class java.lang.Class ```  instead of referencing the actual type being evaluated.  ```java catch (AccessException ex) { 	throw new SpelEvaluationException(getStartPosition(), ex, 			SpelMessage.PROBLEM_LOCATING_METHOD, name, targetObject.getClass()); ```  If `targetObject` is already a class, use that instead of `getClass()`.   ---  **Affects:** 4.3.16, 5.0.5  **Reference URL:** https://stackoverflow.com/questions/49998401/spring-el-invoking-static-interface-method  **Backported to:** [4.3.17](https://github.com/spring-projects/spring-framework/milestone/166?closed=1)","closed","in: core,","spring-projects-issues","2018-04-24T14:11:19Z","2018-05-08T08:07:34Z"
"","21249","Null check needed in AnnotationUtils.getAnnotation [SPR-16708]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-16708](https://jira.spring.io/browse/SPR-16708?redirect=false)** and commented  ``` 2018-04-10 16:53:57,156 DEBUG [main] [org.springframework.core.annotation.AnnotationUtils] - Failed to meta-introspect annotation interface org.springframework.beans.factory.annotation.Autowired: java.lang.NullPointerException ```  For example, when looking for `@Lazy` on `@Autowired` from `isLazy()` in `ContextAnnotationAutowireCandidateResolver`.  Perhaps check for null in the first argument to `synthesizeAnnotation` or suppress logging of NPE.  ```java public static  A getAnnotation(Annotation annotation, Class annotationType) {      if (annotationType.isInstance(annotation)) {           return synthesizeAnnotation((A) annotation);      }      Class annotatedElement = annotation.annotationType();      try {           return synthesizeAnnotation(annotatedElement.getAnnotation(annotationType), annotatedElement);      }      catch (Throwable ex) {           handleIntrospectionFailure(annotatedElement, ex);           return null;      } } ```    ---  **Affects:** 5.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/433877e5cb6230e9c3a325d596c23281872c1c0f, https://github.com/spring-projects/spring-framework/commit/da80502ea6ed4860f5bf7b668300644cdfe3bb5a","closed","in: core,","spring-projects-issues","2018-04-10T21:04:32Z","2018-05-08T08:53:24Z"
"","21448","Improve generic warnings when implementing BodyExtractor [SPR-16909]","**[GanMing](https://jira.spring.io/secure/ViewProfile.jspa?name=xyuu)** opened **[SPR-16909](https://jira.spring.io/browse/SPR-16909?redirect=false)** and commented   I was looking forward to extracting a tool class from methods such as readToMono, readToFlux, and findReader in BodyExtractors. This would improve the problem of generic warnings.   Or is there a better way?In short, it would be great to get rid of that annoying warning and make it more reliable to use.  ```java BodyExtractor>, ReactiveHttpInputMessage> bodyExtractor = (msg, context) -> { 		ResolvableType elementType = ResolvableType.forClassWithGenerics(Map.class, String.class, Object.class); 		HttpMessageReader> reader = context.messageReaders() 				.stream().filter(messageReader -> messageReader.canRead(elementType, MediaType.APPLICATION_JSON)) 				.findFirst() 				//What actually intimidates me is the following unchecked generic cast-cause warning, because it interferes with the developer's focus. 				.map(r -> (HttpMessageReader>) r) 				.orElseThrow(() -> new IllegalStateException( 						""No HttpMessageReader for \"""" + MediaType.APPLICATION_JSON_VALUE + ""\"" and \"""" + elementType + ""\"""")); 		return reader.readMono(elementType, msg, context.hints()); 	}; ```    ---  **Reference URL:** #21396","closed","type: enhancement,","spring-projects-issues","2018-06-06T01:24:24Z","2019-01-14T04:30:49Z"
"","21396","Protected methods in HttpMessageConverterExtractor and DecoderHttpMessageReader to extract MediaType [SPR-16856]","**[GanMing](https://jira.spring.io/secure/ViewProfile.jspa?name=xyuu)** opened **[SPR-16856](https://jira.spring.io/browse/SPR-16856?redirect=false)** and commented  Some server-side responses to ContentType are incorrect, but we expect to use the right way to extract data. Now I can specify a correct MediaType to extract.  Usually we may need to access many third party services. It is extremely difficult for us to ask all service providers to return ContentType to us according to the standard requirements. So we need to have a capability to specify the MediaType itself.   ---  **Affects:** 5.0.6  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1834, and commits https://github.com/spring-projects/spring-framework/commit/fd946b815736408c0e9d517c82671b40d3951d0f","closed","type: task,","spring-projects-issues","2018-05-22T02:49:46Z","2019-01-13T15:33:21Z"
"","21395","Make FormHttpMessageWriter easier to extend [SPR-16855]","**[GanMing](https://jira.spring.io/secure/ViewProfile.jspa?name=xyuu)** opened **[SPR-16855](https://jira.spring.io/browse/SPR-16855?redirect=false)** and commented  I intend to use FormHttpMessageWriter on WebClient, mainly because I think the core function of FormHttpMessageWriter is serializeForm, if you declare it as private, you completely lose the possibility of inheritance. For example, if I need a function similar to the FormHttpMessageWriter, just want to add a verification signature after the Writer, then I need to completely copy the entire class, and then simply modify a line or two in the inside, these practices need to endure the exact same Code, IDEA duplicate code warning. In fact, if serializeForm is turned into protected, it will not expand the scope too much, and at the same time, it will simply avoid copying the content and make the code look more beautiful.     for example:  ```java 	class SignFormHttpMessageWriter extends FormHttpMessageWriter { 		private final Function signer;  		public SignFormHttpMessageWriter(Function signer) { 			this.signer = signer; 		}  		@Override 		protected StringBuilder serializeForm(MultiValueMap form, Charset charset) { 			return signer.apply(super.serializeForm(form, charset)); 		} 	}   		FormHttpMessageWriter writer = new SignFormHttpMessageWriter(sb->{ 			String sign = sha256(sb.toString()); 			return sb.append(""&sign="").append(sign); 		}); 		WebClient client = WebClient.builder().build(); 		MultiValueMap data = new LinkedMultiValueMap<>(); 		//fill the data ... 		client.post().body((o, c) -> 			writer.write(Mono.just(data), 					null, 					MediaType.APPLICATION_FORM_URLENCODED, 					o,c.hints()) 		); ```    ---  **Affects:** 5.0.6  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1833, and commits https://github.com/spring-projects/spring-framework/commit/0b61c748f699a2d13282f8bd2ba867ae88b8ceae","closed","type: enhancement,","spring-projects-issues","2018-05-22T02:43:46Z","2018-07-26T08:09:32Z"
"","21865","Immutable object binding fails with JSON-B [SPR-17331]","**[Frank P Moley III](https://jira.spring.io/secure/ViewProfile.jspa?name=fpmoles)** opened **[SPR-17331](https://jira.spring.io/browse/SPR-17331?redirect=false)** and commented  When you create a project leveraging yasson implementation of JSON-B and try to pass a JSON payload using a POST or PUT in Spring MVC, you get:  ""Could not read JSON: Can't create instance; nested exception is javax.json.bind.JsonbException: Can't create instance"" if the object is marked to be immutable using Lombok `@Value` annotation. If you mark it as `@Data` it work fine. If you step back to Jackson using immutable it works fine.      See attached code repository example and supplied tests.      ---  **Affects:** 5.1 GA  **Reference URL:** https://github.com/fpmoles/kata-spring-immutable-jsonb","closed","status: invalid,","spring-projects-issues","2018-10-04T01:06:30Z","2019-01-12T05:18:02Z"
"","21679","More easily set the order on DefaultSimpUserRegistry [SPR-17142]","**[Filip Hrisafov](https://jira.spring.io/secure/ViewProfile.jspa?name=filiphr)** opened **[SPR-17142](https://jira.spring.io/browse/SPR-17142?redirect=false)** and commented  With #21561 a setter was added on `DefaultSimpUserRegistry`. However, it is a bit ""difficult"" to set the order. I see two ways of doing it:  * Provide a custom `WebSocketMessageBrokerConfigurationSupport` - which I don't like as I want to use the customizers * Provide a `BeanPostProcessor` - which I would also like to avoid as it seems like an overkill for calling a setter on a specific bean  ---  **Affects:** 5.1 RC1  **Issue Links:** - #21561 Add setter for order for DefaultSimpUserRegistry  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/430065c31d2c8f6cd332f87bb045e124390fc3aa","closed","type: enhancement,","spring-projects-issues","2018-08-07T17:20:12Z","2019-01-11T14:00:37Z"
"","21561","Add setter for order for DefaultSimpUserRegistry [SPR-17023]","**[Filip Hrisafov](https://jira.spring.io/secure/ViewProfile.jspa?name=filiphr)** opened **[SPR-17023](https://jira.spring.io/browse/SPR-17023?redirect=false)** and commented  Currently the `DefaultSimpUserRegistry` and `MultiServerUserRegistry` are using the `Ordered.LOWEST_PRECEDENCE`.  We have listeners that are listening on `SessionConnectedEvent` and in some of our logic we are checking the `SimpUserRegistry`. However, if our listener is triggered before the registry ones then there is no user in the registry (if this is the first connection).  I currently managed to register my listener after the registry ones. However, I am not sure that this is deterministic enough. I just annotated it with `@Order`  ---  **Affects:** 5.0.7  **Issue Links:** - #21679 More easily set the order on DefaultSimpUserRegistry","closed","type: enhancement,","spring-projects-issues","2018-07-09T15:02:17Z","2019-01-14T04:30:33Z"
"","21341","Add description for StompBrokerRelayMessageHandler [SPR-16801]","**[Filip Hrisafov](https://jira.spring.io/secure/ViewProfile.jspa?name=filiphr)** opened **[SPR-16801](https://jira.spring.io/browse/SPR-16801?redirect=false)** and commented  Currently the `StompBrokerRelayMessageHandler` uses the `relayHost` and `relayPort` in its [toString](https://github.com/spring-projects/spring-framework/blob/master/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java#L555) method and also when connecting the ""system"" session ([here](https://github.com/spring-projects/spring-framework/blob/master/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java#L406)).  In case no custom `TcpOperations` are provided then this is all good. However, if one needs to provide customized `TcpOperations` then the information that is logged is misleading.  Currently I misusing the `relayHost` to put my custom information (like the list of the round robin addresses). However, this is quite brittle, as it relays on the fact that I know how the internals of the `StompBrokerRelayMessageHandler` are done and the fact that those fields are not used when custom `TcpOperations` are provided.  I would propose to add a `description` to the `StompBrokerRelayMessageHandler` to allow the callers to provide customization for this information. Of course this would also require to add that to `StompBrokerRelayRegistration` in order to be able to pass it to the message handler. The description can even be a `Supplier`, which would allow to provide even more accurate information (in combination with the `ClientOptions.Builder` that can be passed to the `ReactorNettyTcpClient`)  An additional benefit of this would be in the case when a Spring Boot actuator endpoint is used where one can use the `BrokerAvailabilityEvent` to show the up / down status for STOMP. This is not yet part of Boot, but we have a custom endpoint that does this.  ---  **Issue Links:** - #17057 Spring Websockets Broker relay supporting a cluster of STOMP endpoint addresses  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/37b0ed9fcb74c42dd6a8de24834d5ac7e75392f6, https://github.com/spring-projects/spring-framework/commit/c555fef6f2782f96634f4e21cd219e468fca58fb","closed","type: enhancement,","spring-projects-issues","2018-05-09T08:43:56Z","2019-01-11T16:46:08Z"
"","21788","Typo on ServletUriComponentsBuilder javadoc comments [SPR-17255]","**[figueroaRicardo](https://jira.spring.io/secure/ViewProfile.jspa?name=figueroaricardo)** opened **[SPR-17255](https://jira.spring.io/browse/SPR-17255?redirect=false)** and commented  There is an typo in some of the javadoc comments for `ServletUriComponentsBuilder` there is reference to `ForwardedHeaderFiller` instead of `ForwardedHeaderFiller`   ---  **Affects:** 5.1 RC3  **Backported to:** [5.0.10](https://github.com/spring-projects/spring-framework/milestone/191?closed=1), [4.3.20](https://github.com/spring-projects/spring-framework/milestone/169?closed=1)","closed","type: documentation,","spring-projects-issues","2018-09-07T15:48:52Z","2018-09-21T07:52:16Z"
"","21354","Spring-jdbc 5.0.5 NamedParameterJdbcTemplate.batchUpdate ORA-01000  [SPR-16814]","**[Fedor](https://jira.spring.io/secure/ViewProfile.jspa?name=bokovikov)** opened **[SPR-16814](https://jira.spring.io/browse/SPR-16814?redirect=false)** and commented  After migrating from Spring 4.1.7 to Spring 5.0.5 we have ORA-01000: maximum open cursors exceeded when using with Oracle 12c and ojdbc7-driver.  Exception raised after following code  ```java @SuppressWarnings(""unchecked"") private void updateHiddenOffers(Map[] updateBatchParams) {  int[] updateResults = namedJdbcTemplate.batchUpdate(UPDATE_HIDDEN_OFFER_SQL, updateBatchParams); ```  The issue is very similar to #20687.   But we dont have ability to update ojdbc driver.  Is it fixed in 5.0.6 version?  ---  **Affects:** 5.0.5  **Issue Links:** - #20687 Doc: ParameterMetaData.getParameterType performance on Oracle 12c","closed","status: declined,","spring-projects-issues","2018-05-11T16:29:55Z","2019-01-14T04:31:08Z"
"","21446","DestinationVariable: handle objects, not String only [SPR-16907]","**[Eugene Ustimenko](https://jira.spring.io/secure/ViewProfile.jspa?name=eugene%20ustimenko)** opened **[SPR-16907](https://jira.spring.io/browse/SPR-16907?redirect=false)** and commented  I'd like to use `@DestinationVariable` with objects, not only with strings.  Now I should write code  ```java @SendToUser(""/queue/reply/{fleetId}"") public Simple simple(@DestinationVariable String fleetId) {} ```  But I'd like to write and process the following:  ```java @SendToUser(""/queue/reply/{message.fleetId}"") public Simple simple(@DestinationVariable(""message"") Message message) {}  class Message {     String fleetId; ... } ```  instead of this way:  ```java @Autowired  private SimpMessagingTemplate messagingTemplate;  public void simple(Message message) {     messagingTemplate.convertAndSendToUser(message.fleetId, ""/queue/reply"", message); }  class Message {  String fleetId; ... } ```    ---  **Affects:** 5.0.6","closed","in: web,","spring-projects-issues","2018-06-05T20:34:48Z","2019-01-11T15:42:04Z"
"","21586","Configuring a RestTemplate with EncodingMode.VALUES_ONLY does not encode special characters [SPR-17048]","**[Etienne Dysli Metref](https://jira.spring.io/secure/ViewProfile.jspa?name=edyslimetref)** opened **[SPR-17048](https://jira.spring.io/browse/SPR-17048?redirect=false)** and commented  Contrary to what [Spring Web's documentation](https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#web-uri-encoding) states, changing the encoding method by configuring the `DefaultUriBuilderFactory` used by `RestTemplate` with `setEncodingMode(EncodingMode.VALUES_ONLY)` does not have the expected effect. It [should](https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/util/DefaultUriBuilderFactory.EncodingMode.html) ""apply [UriUtils.encode(String, Charset)](https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/util/UriUtils.html#encode-java.lang.String-java.nio.charset.Charset-) to each URI variable value"" which in turn will ""encode all characters that are either illegal, or have any reserved meaning, anywhere within a URI, as defined in RFC 3986"". However I'm still seeing `+`, `:` or `/` in query parameter values that are not %-encoded.  The following test case fails with `java.lang.AssertionError: Request URI expected:<[https://host?parameter=%2B%3A%2F](https://host/?parameter=%2B%3A%2F)> but was:<[https://host?parameter=+:/](https://host/?parameter=+:/)>`. (executing it with dependencies org.springframework.boot:spring-boot-starter:2.0.3.RELEASE, org.springframework:spring-web:5.0.7.RELEASE, org.springframework.boot:spring-boot-starter-test:2.0.3.RELEASE)  ```java package com.example.demo.encoding;  import static org.springframework.test.web.client.match.MockRestRequestMatchers.method; import static org.springframework.test.web.client.match.MockRestRequestMatchers.requestTo; import static org.springframework.test.web.client.response.MockRestResponseCreators.withSuccess;  import java.nio.charset.StandardCharsets;  import org.junit.Test; import org.junit.runner.RunWith; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.test.autoconfigure.web.client.RestClientTest; import org.springframework.boot.web.client.RestTemplateBuilder; import org.springframework.http.HttpMethod; import org.springframework.stereotype.Component; import org.springframework.test.context.junit4.SpringRunner; import org.springframework.test.web.client.MockRestServiceServer; import org.springframework.web.client.RestTemplate; import org.springframework.web.util.DefaultUriBuilderFactory; import org.springframework.web.util.DefaultUriBuilderFactory.EncodingMode; import org.springframework.web.util.UriComponents; import org.springframework.web.util.UriComponentsBuilder; import org.springframework.web.util.UriUtils;  @RunWith(SpringRunner.class) @RestClientTest(DemoClient.class) public class EncodingTest {   @Autowired private MockRestServiceServer mockServer;   @Autowired private DemoClient client;    @Test   public void encodeAllCharactersInParameter() {     mockServer.expect(requestTo(encodedQueryUrl(""https://host"", ""+:/"")))       .andExpect(method(HttpMethod.GET))       .andRespond(withSuccess());     client.request(""https://host"", ""+:/"");     mockServer.verify();   }    private String encodedQueryUrl(final String baseUrl, final String parameter) {     return String.format(""%s?parameter=%s"", baseUrl,       UriUtils.encode(parameter, StandardCharsets.UTF_8));   } }  @Component class DemoClient {   private final RestTemplate restTemplate;    public DemoClient(RestTemplateBuilder restTemplateBuilder) {     DefaultUriBuilderFactory factory = new DefaultUriBuilderFactory();     factory.setEncodingMode(EncodingMode.VALUES_ONLY);     restTemplateBuilder.uriTemplateHandler(factory);     this.restTemplate = restTemplateBuilder.build();   }    public Object request(final String url, final String parameter) {     UriComponents queryUrl = UriComponentsBuilder.fromHttpUrl(url)       .queryParam(""parameter"", parameter).build().encode();     return restTemplate.getForObject(queryUrl.toUri(), Object.class);   } } ```    ---  **Affects:** 5.0.7  **Reference URL:** https://stackoverflow.com/questions/51241321/how-to-have-a-resttemplate-encode-all-characters-with-uricomponents-and-encoding","closed","status: invalid,","spring-projects-issues","2018-07-16T15:50:16Z","2019-01-12T05:18:31Z"
"","21430","Enable use of both @SendTo and @SendToUser on the same method [SPR-16891]","**[Ethan Mcgee](https://jira.spring.io/secure/ViewProfile.jspa?name=emcgee@afs)** opened **[SPR-16891](https://jira.spring.io/browse/SPR-16891?redirect=false)** and commented  It would be really nice if it were possible using spring messaging to return an individual message to both the user and simultaneously broadcast that message to everyone on different queues.  The user component could react to the personal message while other components on the page could react to the global message.  With this in mind, my proposal is that a wrapper annotation be added that allows multiple `@SendTo` and `@SendToUser` annotations to be applied.  Then if that annotation is present, each annotation is added individually.  An example of what I am proposing is below.  ``` @MessageMapping(""/document.save.{id}"") @SendTos(     globalSends = {         @SendTo(""/topic/document.updated"")     },     userSends = {         @SendToUser(value = ""/topic/document.save.complete.{id}"", broadcast = false)     } )  public Document save(@RequestBody Document document, @DestinationVariable Long id) {     Document doc = documentService.storeDocument(document);     return doc;  }    ```  ---  **Affects:** 5.0.6  **Issue Links:** - #18811 Annotated class with `@SendToUser` overrides `@SendTo` on method  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1846, and commits https://github.com/spring-projects/spring-framework/commit/f4bffea739a0162585ad5cf71065f179efcd46a6","closed","type: enhancement,","spring-projects-issues","2018-06-01T15:33:06Z","2019-01-13T04:40:37Z"
"","21521","ForwardedHeaderFilter does not respect Servlet forwarding [SPR-16983]","**[Eric Sirianni](https://jira.spring.io/secure/ViewProfile.jspa?name=sirianni)** opened **[SPR-16983](https://jira.spring.io/browse/SPR-16983?redirect=false)** and commented  `ForwardedHeaderFilter` captures the `requestUri` on initial request (e.g. `/foo`).  That request URI can be altered due to a server-side forward - for example:  ``` request.getRequestDispatcher(""/bar"").forward(request, response) ```  When the request is re-dispatched, code calling `HttpServletRequest.getRequestURI()` receives the old value (e.g. `/foo`) instead of the new value (e.g. `/bar`).  Even if the filter is registered with `DispatcherType.FORWARD`, the issue remains that the filter implements `OncePerRequestFilter`.  ---  **Affects:** 5.0.7  **Issue Links:** - #21954 ResourceUrlEncodingFilter does not work with HttpServletRequestWrapper  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/feeec344e530aeb32c0d9d36588b7fb821ac0e9e  2 votes, 4 watchers","closed","type: bug,","spring-projects-issues","2018-06-28T19:01:14Z","2019-01-11T16:07:31Z"
"","21719","@Profile not working as expected [SPR-17183]","**[Eric M Fenderbosch](https://jira.spring.io/secure/ViewProfile.jspa?name=efenderbosch)** opened **[SPR-17183](https://jira.spring.io/browse/SPR-17183?redirect=false)** and commented  When defining beans using `@Profile`, the correct bean is not injected. For example, this `@Configuration` snippet actually injects the `@Bean` that comes first, regardless of which profile is active. Full demo project w/ test is here: https://github.com/efenderbosch/spring-profile-bug  `@Bean` `@Profile(""!prod"")` `public Service service(ServiceProperties props, Environment env) {` `    return new NotProdService(env.getActiveProfiles()[0]);` `}`  `@Bean` `@Profile(""prod"")` `public Service service(ServiceProperties props) {` `    return new ProdService(props);` `}`      ---  **Affects:** 5.0.8  **Reference URL:** https://github.com/efenderbosch/spring-profile-bug","closed","in: core,","spring-projects-issues","2018-08-14T17:43:20Z","2019-01-13T20:09:12Z"
"","21282","Provide XML-based assertions in WebTestClient [SPR-16741]","**[Eric Deandrea](https://jira.spring.io/secure/ViewProfile.jspa?name=edeandrea)** opened **[SPR-16741](https://jira.spring.io/browse/SPR-16741?redirect=false)** and commented  [WebTestClient](https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/reactive/server/WebTestClient.html) is missing the ability to perform assertions against XML content like you can do with [MockMvc](https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/MockMvc.html) (like with [MockMvcResultMatchers.xpath](https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/result/MockMvcResultMatchers.html#xpath-java.lang.String-java.lang.Object...-)). This is essential for building enterprise applications which have to support both XML & JSON.  I propose we add similar things to `org.springframework.test.web.reactive.server.WebTestClient.BodyContentSpec` as well as a new XpathAssertions class (similar to [JsonPathAssertions](https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/reactive/server/JsonPathAssertions.html)) that ties into `org.springframework.test.util.XpathExpectationsHelper`.  ---  **Affects:** 5.0.5  **Issue Links:** - #21270 WebTestClient does not provide Hamcrest Matcher assertions for JSONPath  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0c62d6b5dabc33c3baa969980ada3dc578ab08c8, https://github.com/spring-projects/spring-framework/commit/2734f01067fb231ee3fd3d6dd100e0ae6ed6ed0b","closed","type: enhancement,","spring-projects-issues","2018-04-18T11:49:02Z","2019-01-11T16:43:43Z"
"","21270","WebTestClient does not provide Hamcrest Matcher assertions for JSONPath [SPR-16729]","**[Eric Deandrea](https://jira.spring.io/secure/ViewProfile.jspa?name=edeandrea)** opened **[SPR-16729](https://jira.spring.io/browse/SPR-16729?redirect=false)** and commented  Seems that the reactive [WebTestClient](https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/reactive/server/WebTestClient.html) is missing some valuable assertions that are available on [MockMvc](https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/MockMvc.html).  With MockMvc I can do things like  ```java this.mockMvc.perform(get(""/some/url""))   .andExpect(jsonPath(""$.someNestedObject.*"", Matchers.hasSize(5)))   .andExpect(jsonPath(""$.someNestedObject.anotherObject"").value(Matchers.startsWith(""Some String""))); ```  The WebTestClient.jsonPath method doesn't have an overloaded  ```java jsonPath(String expression, Matcher matcher) ```  method like its [MockMvcResultMatchers](https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/result/MockMvcResultMatchers.html#jsonPath-java.lang.String-org.hamcrest.Matcher-) counterpart does. Also JsonPathAssertions doesn't have an overloaded  ```java value(Matcher matcher) ```  method like its JsonPathResultMatchers counterpart does. Under the covers both [JsonPathResultMatchers](https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/result/JsonPathResultMatchers.html) & [JsonPathAssertions](https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/reactive/server/JsonPathAssertions.html) utilize the exact same [JsonPathExpectationsHelper](https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/util/JsonPathExpectationsHelper.html) which exposes the  ```java public  void assertValue(String content, Matcher matcher) ```  method which is needed.  Is there a particular reason this is missing or is it an oversight? Also seems that there is 0 support for assertions against XML using WebTestClient. Again, is there a specific reason as to why not?  ---  **Affects:** 5.0.5  **Issue Links:** - #21278 Better support for testing JSON - #21282 Provide XML-based assertions in WebTestClient - #21116 Introduce consumeWith() methods in WebTestClient assertions  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/20de5003ffbc8d8ffdd442f9db46195db46a6b4d","closed","type: enhancement,","spring-projects-issues","2018-04-16T17:52:11Z","2019-01-11T16:44:16Z"
"","21765","Custom web input exceptions in WebFlux [SPR-17232]","**[Enzo Bonggio](https://jira.spring.io/secure/ViewProfile.jspa?name=enzo.bonggio)** opened **[SPR-17232](https://jira.spring.io/browse/SPR-17232?redirect=false)** and commented  1. Having a PostMapping like this  ```java @PostMapping(""/body"") public Mono body(@Valid @RequestBody BodyClass bodyClass) { return Mono.empty().then(); } ```     2. When we send a request with a null body  ```java @Autowired private TestRestTemplate restTemplate  ```  ```java def ""test post body null""() {     given:     def bodyClass = null     def headers = new HttpHeaders()     headers.setContentType(MediaType.APPLICATION_JSON);     def request = new HttpEntity>(bodyClass, headers);     when:     def response = restTemplate.postForEntity(""/body"", request, ErrorResponse.class)     then:     assert response.statusCode == HttpStatus.BAD_REQUEST } ```     3. We need to handle ServerWebInputException that is thrown from **_AbstractMessageReaderArgumentResolver_**   ```java private ServerWebInputException handleMissingBody(MethodParameter param) {      return new ServerWebInputException(""Request body is missing: "" + param.getExecutable().toGenericString()); } ```     Right now there is no way to override method that is thrown from AbstractMessageReaderArgumentResolver   At least we should send MethodParameter in the constructor of ServerWebInputException or tell a way to override that implementation      ---  **Affects:** 5.0.8","closed","type: enhancement,","spring-projects-issues","2018-08-31T16:32:21Z","2018-11-27T10:00:04Z"
"","21407","PathVariable with nested router function throws IllegalArgumentException [SPR-16868]","**[Emre Karabacak](https://jira.spring.io/secure/ViewProfile.jspa?name=_emrekarabacak_)** opened **[SPR-16868](https://jira.spring.io/browse/SPR-16868?redirect=false)** and commented  Making GET request to endpoint which takes parameter as path variable throws IllegalStateException with Spring Boot 2.0.2.RELEASE version. But when I change version to Spring Boot 2.0.1.RELEASE, it works. I attached my sample code and screenshots. Also you can find the exception stack trace below :  ``` java.lang.IllegalArgumentException: No path variable with name ""id"" available 	at org.springframework.web.reactive.function.server.ServerRequest.pathVariable(ServerRequest.java:225) ~[spring-webflux-5.0.6.RELEASE.jar:5.0.6.RELEASE] 	at com.emre.reactivedemo.handler.UserHandler.getUser(UserHandler.java:36) ~[classes/:na] 	at org.springframework.web.reactive.function.server.support.HandlerFunctionAdapter.handle(HandlerFunctionAdapter.java:61) ~[spring-webflux-5.0.6.RELEASE.jar:5.0.6.RELEASE] 	at org.springframework.web.reactive.DispatcherHandler.invokeHandler(DispatcherHandler.java:168) ~[spring-webflux-5.0.6.RELEASE.jar:5.0.6.RELEASE] 	at org.springframework.web.reactive.DispatcherHandler.lambda$handle$1(DispatcherHandler.java:160) ~[spring-webflux-5.0.6.RELEASE.jar:5.0.6.RELEASE] 	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:118) ~[reactor-core-3.1.7.RELEASE.jar:3.1.7.RELEASE] 	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67) ~[reactor-core-3.1.7.RELEASE.jar:3.1.7.RELEASE] 	at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:76) ~[reactor-core-3.1.7.RELEASE.jar:3.1.7.RELEASE] 	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.innerNext(FluxConcatMap.java:271) ~[reactor-core-3.1.7.RELEASE.jar:3.1.7.RELEASE] 	at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:803) ~[reactor-core-3.1.7.RELEASE.jar:3.1.7.RELEASE] 	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:108) ~[reactor-core-3.1.7.RELEASE.jar:3.1.7.RELEASE] 	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67) ~[reactor-core-3.1.7.RELEASE.jar:3.1.7.RELEASE] 	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67) ~[reactor-core-3.1.7.RELEASE.jar:3.1.7.RELEASE] 	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67) ~[reactor-core-3.1.7.RELEASE.jar:3.1.7.RELEASE] 	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1637) ~[reactor-core-3.1.7.RELEASE.jar:3.1.7.RELEASE] 	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1451) ~[reactor-core-3.1.7.RELEASE.jar:3.1.7.RELEASE] 	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1325) ~[reactor-core-3.1.7.RELEASE.jar:3.1.7.RELEASE] 	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54) ~[reactor-core-3.1.7.RELEASE.jar:3.1.7.RELEASE] 	at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44) ~[reactor-core-3.1.7.RELEASE.jar:3.1.7.RELEASE] 	at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44) ~[reactor-core-3.1.7.RELEASE.jar:3.1.7.RELEASE] 	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52) ~[reactor-core-3.1.7.RELEASE.jar:3.1.7.RELEASE] 	at reactor.core.publisher.Mono.subscribe(Mono.java:3080) ~[reactor-core-3.1.7.RELEASE.jar:3.1.7.RELEASE] 	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75) ~[reactor-core-3.1.7.RELEASE.jar:3.1.7.RELEASE] 	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:78) ~[reactor-core-3.1.7.RELEASE.jar:3.1.7.RELEASE] 	at reactor.core.publisher.Operators.complete(Operators.java:125) ~[reactor-core-3.1.7.RELEASE.jar:3.1.7.RELEASE] 	at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:45) ~[reactor-core-3.1.7.RELEASE.jar:3.1.7.RELEASE] 	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52) ~[reactor-core-3.1.7.RELEASE.jar:3.1.7.RELEASE] 	at reactor.core.publisher.Mono.subscribe(Mono.java:3080) ~[reactor-core-3.1.7.RELEASE.jar:3.1.7.RELEASE] 	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75) ~[reactor-core-3.1.7.RELEASE.jar:3.1.7.RELEASE] 	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:78) ~[reactor-core-3.1.7.RELEASE.jar:3.1.7.RELEASE] 	at reactor.core.publisher.Operators.complete(Operators.java:125) ~[reactor-core-3.1.7.RELEASE.jar:3.1.7.RELEASE] 	at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:45) ~[reactor-core-3.1.7.RELEASE.jar:3.1.7.RELEASE] 	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52) ~[reactor-core-3.1.7.RELEASE.jar:3.1.7.RELEASE] 	at reactor.core.publisher.Mono.subscribe(Mono.java:3080) ~[reactor-core-3.1.7.RELEASE.jar:3.1.7.RELEASE] 	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75) ~[reactor-core-3.1.7.RELEASE.jar:3.1.7.RELEASE] 	at reactor.core.publisher.Operators.complete(Operators.java:125) ~[reactor-core-3.1.7.RELEASE.jar:3.1.7.RELEASE] 	at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:45) ~[reactor-core-3.1.7.RELEASE.jar:3.1.7.RELEASE] 	at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44) ~[reactor-core-3.1.7.RELEASE.jar:3.1.7.RELEASE] 	at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44) ~[reactor-core-3.1.7.RELEASE.jar:3.1.7.RELEASE] 	at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44) ~[reactor-core-3.1.7.RELEASE.jar:3.1.7.RELEASE] 	at reactor.core.publisher.MonoMap.subscribe(MonoMap.java:55) ~[reactor-core-3.1.7.RELEASE.jar:3.1.7.RELEASE] 	at reactor.core.publisher.Mono.subscribe(Mono.java:3080) ~[reactor-core-3.1.7.RELEASE.jar:3.1.7.RELEASE] 	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:418) ~[reactor-core-3.1.7.RELEASE.jar:3.1.7.RELEASE] 	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:210) ~[reactor-core-3.1.7.RELEASE.jar:3.1.7.RELEASE] 	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:128) ~[reactor-core-3.1.7.RELEASE.jar:3.1.7.RELEASE] 	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:61) ~[reactor-core-3.1.7.RELEASE.jar:3.1.7.RELEASE] 	at reactor.core.publisher.FluxConcatMap.subscribe(FluxConcatMap.java:121) ~[reactor-core-3.1.7.RELEASE.jar:3.1.7.RELEASE] 	at reactor.core.publisher.MonoNext.subscribe(MonoNext.java:40) ~[reactor-core-3.1.7.RELEASE.jar:3.1.7.RELEASE] 	at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44) ~[reactor-core-3.1.7.RELEASE.jar:3.1.7.RELEASE] 	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) ~[reactor-core-3.1.7.RELEASE.jar:3.1.7.RELEASE] 	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) ~[reactor-core-3.1.7.RELEASE.jar:3.1.7.RELEASE] 	at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44) ~[reactor-core-3.1.7.RELEASE.jar:3.1.7.RELEASE] 	at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44) ~[reactor-core-3.1.7.RELEASE.jar:3.1.7.RELEASE] 	at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44) ~[reactor-core-3.1.7.RELEASE.jar:3.1.7.RELEASE] 	at reactor.core.publisher.Mono.subscribe(Mono.java:3080) ~[reactor-core-3.1.7.RELEASE.jar:3.1.7.RELEASE] 	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:167) ~[reactor-core-3.1.7.RELEASE.jar:3.1.7.RELEASE] 	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56) ~[reactor-core-3.1.7.RELEASE.jar:3.1.7.RELEASE] 	at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:70) ~[reactor-core-3.1.7.RELEASE.jar:3.1.7.RELEASE] 	at reactor.core.publisher.MonoPeekTerminal.subscribe(MonoPeekTerminal.java:61) ~[reactor-core-3.1.7.RELEASE.jar:3.1.7.RELEASE] 	at reactor.ipc.netty.channel.ChannelOperations.applyHandler(ChannelOperations.java:380) ~[reactor-netty-0.7.7.RELEASE.jar:0.7.7.RELEASE] 	at reactor.ipc.netty.http.server.HttpServerOperations.onHandlerStart(HttpServerOperations.java:397) ~[reactor-netty-0.7.7.RELEASE.jar:0.7.7.RELEASE] 	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163) ~[netty-common-4.1.24.Final.jar:4.1.24.Final] 	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:404) ~[netty-common-4.1.24.Final.jar:4.1.24.Final] 	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:463) ~[netty-transport-4.1.24.Final.jar:4.1.24.Final] 	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:884) ~[netty-common-4.1.24.Final.jar:4.1.24.Final] 	at java.base/java.lang.Thread.run(Thread.java:844) ~[na:na] ```  ---  **Affects:** 5.0.6  **Attachments:** - [reactive-demo.zip](https://jira.spring.io/secure/attachment/25731/reactive-demo.zip) (_163.67 kB_) - [Screen Shot 2018-05-22 at 22.48.56.png](https://jira.spring.io/secure/attachment/25732/Screen+Shot+2018-05-22+at+22.48.56.png) (_291.77 kB_) - [Screen Shot 2018-05-22 at 22.51.20.png](https://jira.spring.io/secure/attachment/25733/Screen+Shot+2018-05-22+at+22.51.20.png) (_337.91 kB_)  **Issue Links:** - #21418 Nested PathPatternPredicate doesn't expose path variables (_**""is duplicated by""**_) - #21233 PathPatternPredicate leaves path variables in request even if predicate doesn't match  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8c30b8e628a83690427adf5048591ed188214969, https://github.com/spring-projects/spring-framework/commit/a7ffe092abc098c95bcc9e0e1e9ed2dc216c64f7","closed","type: bug,","spring-projects-issues","2018-05-23T17:25:01Z","2019-01-11T17:09:31Z"
"","21796","Testing causes many http-nio-auto threads to spawn [SPR-17263]","**[Egbert](https://jira.spring.io/secure/ViewProfile.jspa?name=egbertw)** opened **[SPR-17263](https://jira.spring.io/browse/SPR-17263?redirect=false)** and commented  In a test suite with many integration tests I'm experiencing some problems with many application contexts being started and remaining active.  All (integration) tests are annotated with:  ```java @DirtiesContext(classMode = DirtiesContext.ClassMode.BEFORE_EACH_TEST_METHOD) ```  When running a few hundred tests, I'm experiencing an `OutOfMemoryError`. After some debugging it turns out that a large amount of memory is accumulated in over 100 application contexts and bean factories.  Additionally, hundreds of threads called `http-nio-auto-\*\-exec-*` are created and keep running.  I tried setting  ``` spring.test.context.cache.maxSize=1 spring.cache.type=none ```  in the `application.properties` for the test, but it seems this is not used. The method `org.springframework.test.context.cache.ContextCacheUtils#retrieveMaxCacheSize` also doesn't seem to be invoked ever during tests, according to my breakpoints.  Cleanup doesn't seem to be executed properly. I'm uncertain if this is a bug in my configuration or the application context cache, but I can't seem to find any similar issues anywhere.   ---  **Affects:** 5.0.7","closed","in: test,","spring-projects-issues","2018-09-10T09:48:25Z","2019-01-11T14:12:57Z"
"","21738","@RequestMapping get 406 Not Acceptable when I use MediaType.IMAGE_PNG_VALUE [SPR-17205]","**[Eduardo Cintra](https://jira.spring.io/secure/ViewProfile.jspa?name=eduardocintramaia@gmail.com)** opened **[SPR-17205](https://jira.spring.io/browse/SPR-17205?redirect=false)** and commented  I have a method in my controller that return a image, but exists some rules that can throws a exception, when this occurs I'm get a 406 error ""406 Not Acceptable"" instead of the Exception.  My method:  `@RequestMapping`(value = ""/test"", method = RequestMethod.GET, produces = MediaType.IMAGE_PNG_VALUE) `@RequestMapping`(value = ""/test"", method = RequestMethod.GET, produces = MediaType.IMAGE_PNG_VALUE)  public `@ResponseBody` byte[] test() {  throw new RuntimeException()  //code that return byte[] image }  Can anyone help me?  ---  **Attachments:** - [invalid.png](https://jira.spring.io/secure/attachment/25992/invalid.png) (_33.32 kB_) - [valid.png](https://jira.spring.io/secure/attachment/25993/valid.png) (_36.48 kB_)  **Issue Links:** - #20865 `@RequestMapping` produces condition should not impact error responses  (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2018-08-22T20:03:53Z","2019-01-13T04:28:20Z"
"","21223","getRemoteAddress in ServerRequest  [SPR-16682]","**[Dolphin](https://jira.spring.io/secure/ViewProfile.jspa?name=adaikiss)** opened **[SPR-16682](https://jira.spring.io/browse/SPR-16682?redirect=false)** and commented  I can't get remote address in WebFlux functional handlers since relevant methods are in ServerWebExchange which is not exposed. That sounds a legitimate use case, so it would be nice to provide such capability.  Currently,  I'm getting remote ip through reflection:  ```java Method exchangeMethod = request.getClass().getDeclaredMethod(""exchange""); exchangeMethod.setAccessible(true); ServerWebExchange exchange = (ServerWebExchange) exchangeMethod.invoke(request); exchangeMethod.setAccessible(false); InetSocketAddress addr = exchange.getRequest().getRemoteAddress(); ```  ---  **Issue Links:** - #21222 getRemoteAddress in ServerRequest  (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2018-04-03T10:19:07Z","2019-01-11T15:03:32Z"
"","21222","getRemoteAddress in ServerRequest  [SPR-16681]","**[Dolphin](https://jira.spring.io/secure/ViewProfile.jspa?name=adaikiss)** opened **[SPR-16681](https://jira.spring.io/browse/SPR-16681?redirect=false)** and commented  I can't get client ip in WebFlux functional handlers since relevant methods are in `ServerWebExchange `(ServerHttpRequest#getRemoteAddress) which is not exposed. That sounds a legitimate use case, so it would be nice to provide such capability.  ---  **Issue Links:** - #21223 getRemoteAddress in ServerRequest  (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ed439eefcfe944dc022645b7a6394e0fbc70f5c8, https://github.com/spring-projects/spring-framework/commit/941186a359cbfb3627464a4f9c995a445ac45f63, https://github.com/spring-projects/spring-framework/commit/7e2726f40018ad83be9ae1d9d5b59f59e981d66a","closed","type: enhancement,","spring-projects-issues","2018-04-03T09:54:54Z","2019-01-11T15:03:28Z"
"","21795","ArrayIndexOutOfBoundsException without details in DispatcherServlet due-to advice class [SPR-17262]","**[Dmytro](https://jira.spring.io/secure/ViewProfile.jspa?name=herzegovina_flor)** opened **[SPR-17262](https://jira.spring.io/browse/SPR-17262?redirect=false)** and commented  Hi,  The but is tied to the Spring MVC module (version 4.3.11) and AOP (2.5 version). I have recently bumped into java.lang.ArrayIndexOutOfBoundsException exception without any root causes or error messages. The following case: 1. From signature:  ```java public String someMethod(final Model model, final RedirectAttributes redirectModel)  ```  was removed RedirectAttributes argument.  1. DispatcherServet#doDispatch monitors any exception, in particular ""dispatchException"" object keeps a link to exception.    But when exception occurred in AOP part it does not have any message errors. 2. AOP has pointcut for annotation and advice class checks arguments from the `someMethod` (is followed above). Here occurs the exception  ```java ProceedingJoinPoint#getArgs()[1] ```  So, from the advice class I can see the message of exception, but it is not possible to see it  from DispatchServet. Image is attached.  If you need more details, please write comments      ---  **Attachments:** - [584ec9a4-06a4-48ff-abad-9b03e2b49efd.jpg](https://jira.spring.io/secure/attachment/26018/584ec9a4-06a4-48ff-abad-9b03e2b49efd.jpg) (_13.27 kB_)","closed","in: core,","spring-projects-issues","2018-09-10T08:54:47Z","2019-02-08T21:31:17Z"
"","21214","WebServiceTemplateBuilder [Spring Boot] [SPR-16673]","**[Dmytro Nosan](https://jira.spring.io/secure/ViewProfile.jspa?name=dnosan)** opened **[SPR-16673](https://jira.spring.io/browse/SPR-16673?redirect=false)** and commented  Currently, spring boot has a 'RestTemplateBuilder'. I think it would be great to have the same for WebServiceTemplate  p.s. I removed all packages.   ---  **Affects:** Contributions Welcome  **Attachments:** - [Jaxb2MarshallerAutoConfiguration.java](https://jira.spring.io/secure/attachment/25452/Jaxb2MarshallerAutoConfiguration.java) (_1.67 kB_) - [Jaxb2MarshallerAutoConfigurationTests.java](https://jira.spring.io/secure/attachment/25458/Jaxb2MarshallerAutoConfigurationTests.java) (_3.70 kB_) - [Jaxb2MarshallerBuilder.java](https://jira.spring.io/secure/attachment/25451/Jaxb2MarshallerBuilder.java) (_49.31 kB_) - [Jaxb2MarshallerBuilderTest.java](https://jira.spring.io/secure/attachment/25453/Jaxb2MarshallerBuilderTest.java) (_23.54 kB_) - [Jaxb2MarshallerCustomizer.java](https://jira.spring.io/secure/attachment/25447/Jaxb2MarshallerCustomizer.java) (_387 bytes_) - [WebServiceTemplateAutoConfiguration.java](https://jira.spring.io/secure/attachment/25450/WebServiceTemplateAutoConfiguration.java) (_1.69 kB_) - [WebServiceTemplateAutoConfigurationTests.java](https://jira.spring.io/secure/attachment/25459/WebServiceTemplateAutoConfigurationTests.java) (_3.84 kB_) - [WebServiceTemplateBuilder.java](https://jira.spring.io/secure/attachment/25449/WebServiceTemplateBuilder.java) (_35.87 kB_) - [WebServiceTemplateBuilderTest.java](https://jira.spring.io/secure/attachment/25454/WebServiceTemplateBuilderTest.java) (_12.99 kB_) - [WebServiceTemplateCustomizer.java](https://jira.spring.io/secure/attachment/25448/WebServiceTemplateCustomizer.java) (_414 bytes_)","closed","status: invalid,","spring-projects-issues","2018-03-30T14:46:18Z","2019-01-12T05:19:04Z"
"","21155","Composed MessageSource [SPR-16614]","**[Dmytro Nosan](https://jira.spring.io/secure/ViewProfile.jspa?name=dnosan)** opened **[SPR-16614](https://jira.spring.io/browse/SPR-16614?redirect=false)** and commented  Sometimes to localize some bean we have to use several sources. e.g.  ```java MessageSource m1 = db.getTranslations() MessageSource m2 = someService.getTranslations(); ```  and then we will use a custom method for localizing  ```java private String translate(MessageSource m1, MessageSource m2, String code, Locale locale) { 		try { 			return m1.getMessage(code, null, locale); 		} catch (NoSuchMessageException ex) { 			return m2.getMessage(code, null, locale); 		} 	} ```  But this method has several disadvantages: 1. If m1 has (useCodeAsDefaultMessage) we will never get a message from m2. 2. A lot of exceptions could be thrown 3. What would we do, if we need one or more MessageSource(s)?  My idea is to create a new ComposedMessageSource class which should handle: 1. Resolve message from both MessageSources 2. Resolve situation when one of the MessageSources has a property **useCodeAsDefaultMessage** (we should find the best option for localization) 3. Unnecessary exception generation  also, it would be great to have a utility class for composing MessageSources.  ```java public abstract class MessageSources { 	@Nullable 	public static MessageSource compose(@Nullable MessageSource messageSource, @Nullable MessageSource parentMessageSource){ ... } ```    ---  **Affects:** 5.0.4  **Attachments:** - [ComposedMessageSource.java](https://jira.spring.io/secure/attachment/25429/ComposedMessageSource.java) (_4.30 kB_) - [ComposedMessageSourceTests.java](https://jira.spring.io/secure/attachment/25424/ComposedMessageSourceTests.java) (_5.75 kB_) - [MessageSource.java](https://jira.spring.io/secure/attachment/25428/MessageSource.java) (_3.86 kB_) - [MessageSources.java](https://jira.spring.io/secure/attachment/25425/MessageSources.java) (_1.28 kB_) - [MessageSourcesTest.java](https://jira.spring.io/secure/attachment/25423/MessageSourcesTest.java) (_686 bytes_)","open","in: core,","spring-projects-issues","2018-03-19T13:51:59Z","2019-01-11T15:11:44Z"
"","21872","ServerWebInputException is throw each time Http request with mandatory request parameters is handled. [SPR-17338]","**[Dmytro Mrachkovskyi](https://jira.spring.io/secure/ViewProfile.jspa?name=dmytro%20mrachkovskyi)** opened **[SPR-17338](https://jira.spring.io/browse/SPR-17338?redirect=false)** and commented  ServerWebInputException is throw each time Http request with mandatory request parameters is handled in AbstractNamedValueArgumentResolver. Even though this does not brake request handling flow, exception (and stack trace)  is generated each time and it has performance impact.   Root-cause:   In  ```java    org.springframework.web.reactive.result.method.annotation.AbstractNamedValueArgumentResolver#resolveArgument    return this.resolveName(resolvedName.toString(), nestedParameter, exchange) .flatMap((arg) -> mappingFunction()) .switchIfEmpty(this.getDefaultValue(namedValueInfo, parameter, bindingContext, model, exchange));  ```  switchIfEmpty takes default value as an argument. As for mandatory arguments there is no default value ServerWebInputException will be thrown in getDefaultValue() method and wrapped into Mono.error(ex). This error mono will never be used until mandatory request parameter exists, but Exception it self is crated when there is no need in it.  Fix. Default value should be evaluated only if request parameter is empty:   ```java package org.springframework.web.reactive.result.method.annotation;  public abstract class AbstractNamedValueArgumentResolver extends HandlerMethodArgumentResolverSupport {  ...  private Mono getDefaultValue(NamedValueInfo namedValueInfo, MethodParameter parameter,         BindingContext bindingContext, Model model, ServerWebExchange exchange) {         return Mono.fromSupplier(() -> {             Object value = null;             if (namedValueInfo.defaultValue != null) {                 value = resolveStringValue(namedValueInfo.defaultValue);             }             else if (namedValueInfo.required && !parameter.isOptional()) {                 handleMissingValue(namedValueInfo.name, parameter, exchange);             }             value = handleNullValue(namedValueInfo.name, value, parameter.getNestedParameterType());             value = applyConversion(value, namedValueInfo, parameter, bindingContext, exchange);             handleResolvedValue(value, namedValueInfo.name, parameter, model, exchange);             return value;         }); } ```    ---  **Affects:** 5.0.9, 5.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/983bce125f3e7b4e0be809cc60ae372c0083d441, https://github.com/spring-projects/spring-framework/commit/842297699db5752001570ff85be85e80d575404c  **Backported to:** [5.0.10](https://github.com/spring-projects/spring-framework/milestone/191?closed=1)","closed","type: enhancement,","spring-projects-issues","2018-10-04T14:52:52Z","2018-10-15T07:48:40Z"
"","21164","Implement possibility to add tasks to StopWatch [SPR-16623]","**[Dmitry Katsubo](https://jira.spring.io/secure/ViewProfile.jspa?name=dma_k)** opened **[SPR-16623](https://jira.spring.io/browse/SPR-16623?redirect=false)** and commented  In my case I would like to run several tasks in parallel and then combine them into one [`StopWatch`](https://github.com/spring-projects/spring-framework/blob/master/spring-core/src/main/java/org/springframework/util/StopWatch.java). The difficulty is that `StopWatch` does not allow concurrent modification e.g. adding to `List taskList` is not thread-safe. To overcome that, the time for each spawned subtask can be accumulated in `long timeMillis` or `TaskInfo` and then added to `StopWatch`. To achieve that I suggest to make all fields of `StopWatch` protected. This will allow the subclass to extend the `StopWatch` with methods like this:  ```java public class MyStopWatch extends StopWatch {   public synchronized void addAsyncTask(String taskName, long timeMillis) {     lastTaskInfo = new TaskInfo(taskName, timeMillis);     taskList.add(lastTaskInfo);     taskCount++;   }    public synchronized void addAsyncTask(TaskInfo taskInfo) {     lastTaskInfo = taskInfo;     taskList.add(taskInfo);     taskCount++;   }    public synchronized void addAllAsyncTasks(StopWatch sourceStopWatch) {     taskList.addAll(sourceStopWatch.taskList);     taskCount += sourceStopWatch.taskList.size();   }    public synchronized void stop() {     super.stop();   } } ```  One may argue of course that total time (`long totalTimeMillis`) will not be representative, but it could be just treated as ""total time for synchronous tasks"".   ---  **Affects:** 5.0.1","closed","in: core,","spring-projects-issues","2018-03-22T10:28:45Z","2020-01-17T08:02:55Z"
"","21645","Introduce @Reset as alternative to @DirtiesContext in TestContext framework [SPR-17108]","**[Dipanshu](https://jira.spring.io/secure/ViewProfile.jspa?name=goyal)** opened **[SPR-17108](https://jira.spring.io/browse/SPR-17108?redirect=false)** and commented  ## Overview  I have been using the `SpringRunner` in lots of tests and used a common way which is using `@ContextConfiguration` to load beans and create the `ApplicationContext`. However sometimes I need to have some way to tell Spring that some beans need to be freshly recreated in the same `ApplicationContext`.  I understand there is one way to do this using `@DirtiesContext` which destroys the existing `ApplicationContext` and creates a new one. But when I use this, beans which are not even dirty are also destroyed with the `ApplicationContext` which creates a performance issue.  Why do we want to remove supporting beans which are not even used in that particular test?  Example: database connection beans - Why do we want to re-establish a DB connection because only a single bean is modified and we have used `@DirtiesContext`.  We need some way to reset the `ApplicationContext` that would replace dirty beans with fresh ones.  ## Proposal  A new `@Reset` annotation could be introduced to achieve that.   --- No further details from [SPR-17108](https://jira.spring.io/browse/SPR-17108?redirect=false)","closed","type: enhancement,","spring-projects-issues","2018-07-31T18:31:51Z","2019-01-13T20:18:47Z"
"","21335","MockMvc + WebClient (HtmlUnit) + ModelAndView throws 404 (NotFound) [SPR-16795]","**[Dilshod Tadjibaev](https://jira.spring.io/secure/ViewProfile.jspa?name=dilshod)** opened **[SPR-16795](https://jira.spring.io/browse/SPR-16795?redirect=false)** and commented  I have Spring 4.3 version.  I am trying to follow this example for my unit testing:https://docs.spring.io/spring/docs/current/spring-framework-reference/testing.html#spring-mvc-test-server-htmlunit-mah using MockMvc + WebClient (HtmlUnit) but this fails with 404 error if the controller returns ModelAndView. But this works if the controller returns String.   --- No further details from [SPR-16795](https://jira.spring.io/browse/SPR-16795?redirect=false)","closed","in: test,","spring-projects-issues","2018-05-06T05:12:15Z","2019-01-11T16:39:25Z"
"","21255","Revise cache safety check to avoid performance regression in EAR packaged applications on WildFly [SPR-16714]","**[Diego Pettisani](https://jira.spring.io/secure/ViewProfile.jspa?name=diepet)** opened **[SPR-16714](https://jira.spring.io/browse/SPR-16714?redirect=false)** and commented  We had a performance issue after upgraded from Spring **3.2.2** to **3.2.16**.  Our application is packaged in an EAR file having several ""skinny"" WARs, so the content inside the EAR is:  ``` . |-- lib |   -- spring-core-3.2.16.jar |   -- spring-beans-3.2.16.jar |   -- company-platform.jar |   -- etc. etc. |-- META-INF |   -- application.xml |-- app1.war |   -- WEB-INF |      -- web.xml |      -- webapp-beans.xml |-- app2.war |   -- WEB-INF |      -- web.xml |      -- webapp-beans.xml | -- more wars..... . ```  In each **web.xml** file we have this configuration:  ```xml ...  	contextConfigLocation 	WEB-INF/webapp-beans.xml   	parentContextKey 	ear.context   	org.springframework.web.context.ContextLoaderListener  ... ```  The parent context has several hundred of beans.  We developed an internal platform for our applications that often calls the following **BeanFactory** method:  ```java org.springframework.beans.factory.BeanFactory.getBean(Class) ```  In turn, The above **getBean(Class)** method calls the following **DefaultListableBeanFactory** method:  ```java org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(Class, boolean, boolean) ```  After upgraded to Spring **3.2.16** the call to the above **getBeanNamesForType()** method was very slow and CPU consuming. The root cause is the following class loader check:  ```java if (ClassUtils.isCacheSafe(type, getBeanClassLoader())) { 	cache.put(type, resolvedBeanNames); } ```  added for fixing a memory leak highlighted in the #16145 and released in Spring **3.2.9**.  The check inside the if condition:  ```java ClassUtils.isCacheSafe(type, getBeanClassLoader()) ```  returns always false because:  * **type** is an object of the EAR class loader * **getBeanClassLoader()** returns always the WAR class loader * the EAR class loader and the WAR class loader are different and they are sibling in the class loader hierarchy  So the following internal caches of the **DefaultListableBeanFactory** class:  ```java /** Map of singleton and non-singleton bean names, keyed by dependency type */ private final Map, String[]> allBeanNamesByType = new ConcurrentHashMap, String[]>(64);  /** Map of singleton-only bean names, keyed by dependency type */ private final Map, String[]> singletonBeanNamesByType = new ConcurrentHashMap, String[]>(64); ```  will always be empty and they will never be used.  Furthermore informations:  * The application server used is Wildfly 10.0.0.Final * The JDK used is JDK8 update 74. * I supposed that upgrading our application to the Spring 4.x or 5.x version will not fix the performance regression because the class loader check is still there.  ---  **Affects:** 3.2.18, 4.3.16, 5.0.5  **Attachments:** - [SPR_16714_short_term_solution_for_Spring_3.2.16.zip](https://jira.spring.io/secure/attachment/25474/SPR_16714_short_term_solution_for_Spring_3.2.16.zip) (_3.26 kB_)  **Issue Links:** - #16145 Memory leak when using annotation based auto-wiring in child context  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/46e3a919fed710fe9e3404f57a4e0d801e0685db, https://github.com/spring-projects/spring-framework/commit/2989f01013f4983e9cb2c968cd619e598ab6543d, https://github.com/spring-projects/spring-framework/commit/0efa7a05ad71ee33d89800810932760a5e8d2271, https://github.com/spring-projects/spring-framework/commit/295929cc16f9ee48118c9903112b46aefdeaff55  **Backported to:** [4.3.17](https://github.com/spring-projects/spring-framework/milestone/166?closed=1)","closed","type: enhancement,","spring-projects-issues","2018-04-11T15:39:24Z","2019-01-11T16:45:33Z"
"","21793","Framework for idempotent requests [SPR-17260]","**[Deryl Spielman](https://jira.spring.io/secure/ViewProfile.jspa?name=dukethrash)** opened **[SPR-17260](https://jira.spring.io/browse/SPR-17260?redirect=false)** and commented  ##### Story  As a distributed systems developer I want a framework that can elegantly handle idempotency in web requests So that failed and retried requests do not produce side-effects So that we don't have to build this in to every microservice  ##### Background  When dealing with a distributed system a web request can fail at any time during the option whether it's a client or server timing out, server/client crashing, network failure, server succeeding but failing to give the response, etc.. The pattern I've seen is providing an ""idempotency-key"", which acts as a unique identifier the client passes to the server so that in the event of failure the server will not repeat the request if the operation has already succeeded with that idempotency-key.  A simple example would be a user approves a document, which generates two e-mails. One to the user and one to the document creator. The implementation may be two microservices, a document approval service and an e-mail notification service. If there is any failure after the approval the two e-mails could be lost unless you persist the fact that they needed to be sent, and a process exists that can retry unsent e-mail notifications and stamp them as sent. We don't want the same e-mail to be sent twice so an ""idempotency-key"" is saved with e-mail notification and calls to the e-mail notification service will provide this key. The notification service would then read the idempotency-key and not send the e-mail if the key already exists.  See Stripe's blog and implementation of this: * https://stripe.com/blog/idempotency * https://stripe.com/docs/api#idempotent_requests   Imagine this example but now we need the same for deleting a document, or for any kind of request that involves two or more services. The ability to pick up where you left off in an operation is difficult to build and multiply this by the amount of distributed services you interact with. This calls for a framework that can turn this pattern in to an abstraction, which is what Spring Framework does so well and similar to how Spring Session has made it easy to abstract the http session.  ##### Potential solution  1. Provide a spring boot starter or dependency that gives you idempotency out of the box 2. Web requests are filtered for a header named ""idempotency-key"" 3. A web client passes in ""idempotency-key"" with its request 4. On the server, the controller method annotated with `@Idempotent` are intercepted and looked up against a persistent store    * Perhaps the developer can provide a custom `@Component` class that is identified in the `@Idempotent` annotation if custom look up logic is needed 5. If the request is found with the idempotency-key then it is returned, otherwise the request is honored    ---  1 votes, 2 watchers","closed","in: core,","spring-projects-issues","2018-09-09T17:21:11Z","2019-01-25T21:37:59Z"
"","21592","ClientResponse's body ignored on UnsupportedMediaTypeException [SPR-17054]","**[Denys Ivano](https://jira.spring.io/secure/ViewProfile.jspa?name=denys)** opened **[SPR-17054](https://jira.spring.io/browse/SPR-17054?redirect=false)** and commented  When remote service responses with `Content-Type` that can't be read by `HttpMessageReader`, an instance of `UnsupportedMediaTypeException` is being thrown (see `BodyExtractors.readWithMessageReaders()`). But `ClientResponse`'s body is being ignored in this case.  From `ClientResponse`'s Javadoc:  ```java * NOTE: When given access to a {@link ClientResponse}, * through the {@code WebClient} * {@link WebClient.RequestHeadersSpec#exchange() exchange()} method, * you must always use one of the body or toEntity methods to ensure resources * are released and avoid potential issues with HTTP connection pooling. * You can use {@code bodyToMono(Void.class)} if no response content is * expected. However keep in mind that if the response does have content, the * connection will be closed and will not be placed back in the pool. ```  So in order to release resources and avoid potential issues with HTTP connection pool, the response body must be consumed.  I've created a test that reproduces this issue:  ```java @Test public void shouldConsumeBodyOnUnsupportedMediaTypeException() {     AtomicBoolean bodyConsumed = new AtomicBoolean();     ExchangeFunction exchangeFunction = mock(ExchangeFunction.class);     ClientResponse response = ClientResponse.create(HttpStatus.OK)             .header(HttpHeaders.CONTENT_TYPE, ""application/unknown"") //                .header(HttpHeaders.CONTENT_TYPE, ""application/json"")             .body(Flux.defer(() -> {                 DataBufferFactory dataBufferFactory = new DefaultDataBufferFactory();                 return Flux.just(""{\""name\"": \""Hello World!\""}"").                         map(s -> {                             bodyConsumed.set(true);                             byte[] bytes = s.getBytes(StandardCharsets.UTF_8);                             return dataBufferFactory.wrap(bytes);                         });             }))             .build();      when(exchangeFunction.exchange(any())).thenReturn(Mono.just(response));      WebClient webClient = WebClient.builder()             .exchangeFunction(exchangeFunction)             .build();      Mono result = webClient.get()             .retrieve()             .bodyToMono(TestResponse.class)             .map(TestResponse::getName);      StepVerifier.create(result)             .expectError(UnsupportedMediaTypeException.class) //                .expectNext(""Hello World!"") //                .expectComplete()             .verify(Duration.ZERO);      assertTrue(""Response body wasn't consumed"", bodyConsumed.get()); }  private static class TestResponse {      private String name;      public String getName() {         return name;     }      public void setName(String name) {         this.name = name;     } } ```  ---  **Issue Links:** - #21563 DataBufferUtils#join could leak buffers in case of error from the source - #22014 WebClient throws ""Only one connection receive subscriber allowed"" when response has content but no Content-Type header  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a410d90439e5f4a682287f144c98801f40afcc41, https://github.com/spring-projects/spring-framework/commit/d0ada5653f02954c7d1b5014e798400e6846828e","closed","type: bug,","spring-projects-issues","2018-07-17T14:30:15Z","2019-01-11T12:47:43Z"
"","21359","Improve handling of unknown status codes by WebClient [SPR-16819]","**[Denys Ivano](https://jira.spring.io/secure/ViewProfile.jspa?name=denys)** opened **[SPR-16819](https://jira.spring.io/browse/SPR-16819?redirect=false)** and commented  Currently, there are some issues with using `WebClient` for calling HTTP services which return unknown status codes (couldn't be resolved through `HttpStatus` enum).  1. `ClientResponse` interface doesn't provide an opportunity to obtain status code value as `int`. Using `exchange()` method is safe with unknown status codes, but the raw status code value couldn't be obtained without reflexion. In 5.0.6 the method `getRawStatusCode()` was introduced in `ClientHttpResponse` (see #21289). `DefaultClientResponse` (default implementation of `ClientResponse`) wraps `ClientHttpResponse`, so the status code can be obtained by introducing new method in reactive `ClientResponse` interface.  2. It's not possible to use `retrieve()` with unknown status codes because it always throws `IllegalArgumentException`:  ```java java.lang.IllegalArgumentException: No matching constant for [999] 	at org.springframework.http.HttpStatus.valueOf(HttpStatus.java:520) 	at org.springframework.http.client.reactive.ReactorClientHttpResponse.getStatusCode(ReactorClientHttpResponse.java:71) 	at org.springframework.web.reactive.function.client.DefaultClientResponse.statusCode(DefaultClientResponse.java:72) 	at org.springframework.web.reactive.function.client.DefaultWebClient$DefaultResponseSpec.lambda$bodyToPublisher$4(DefaultWebClient.java:438) 	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:174) 	at java.util.ArrayList$ArrayListSpliterator.tryAdvance(ArrayList.java:1359) 	at java.util.stream.ReferencePipeline.forEachWithCancel(ReferencePipeline.java:126) 	at java.util.stream.AbstractPipeline.copyIntoWithCancel(AbstractPipeline.java:498) 	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:485) 	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) 	at java.util.stream.FindOps$FindOp.evaluateSequential(FindOps.java:152) 	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) 	at java.util.stream.ReferencePipeline.findFirst(ReferencePipeline.java:464) 	at org.springframework.web.reactive.function.client.DefaultWebClient$DefaultResponseSpec.bodyToPublisher(DefaultWebClient.java:439) 	at org.springframework.web.reactive.function.client.DefaultWebClient$DefaultResponseSpec.lambda$bodyToMono$0(DefaultWebClient.java:400) ```  That's because the default implementation uses error handling based on `HttpStatus` enum value. It would be a good idea to use raw status value instead and provide an opportunity to register error handlers based on raw status code value.  I've submited [PR 1829](https://github.com/spring-projects/spring-framework/pull/1829) which is going to resolve these issues.  ---  **Affects:** 5.0.6  **Issue Links:** - #20529 RestTemplate doesn't consistently tolerate unknown HTTP status codes - #20104 webflux handler fails in case invalid method was requested - #21289 No support for non-standard HTTP status codes in reactive ClientHttpResponse  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1829, and commits https://github.com/spring-projects/spring-framework/commit/038af9a303aa631a66384542eef8c3f0c955d2f8","closed","type: enhancement,","spring-projects-issues","2018-05-13T20:14:27Z","2019-01-11T16:45:35Z"
"","21218","Mixed use BeanNameAutoProxyCreator and AnnotationAwareAspectJAutoProxyCreator to proxy same bean [SPR-16677]","**[David](https://jira.spring.io/secure/ViewProfile.jspa?name=lnamp)** opened **[SPR-16677](https://jira.spring.io/browse/SPR-16677?redirect=false)** and commented  As described in [this question](https://stackoverflow.com/questions/49558599/mix-use-beannameautoproxycreator-and-annotationawareaspectjautoproxycreator-to-p). Looking forward to your reply ! Best wishes!  ---  **Affects:** 4.3.10  **Reference URL:** https://stackoverflow.com/questions/49558599/mix-use-beannameautoproxycreator-and-annotationawareaspectjautoproxycreator-to-p  **Issue Links:** - #21216 Comprehensively cache annotated methods for interfaces and superclasses - #21264 AspectJ execution pointcut does not detect methods in superinterface anymore - #21298 AopUtils.getMostSpecificMethod should expose dynamic proxy class methods - #21343 AspectJ annotation pointcuts fail to evaluate against interface-based proxies","closed","type: enhancement,","spring-projects-issues","2018-04-01T11:17:09Z","2019-01-11T15:05:04Z"
"","21156","UnsupportedMediaTypeException on text/plain;charset=utf-8 [SPR-16615]","**[David Turanski](https://jira.spring.io/secure/ViewProfile.jspa?name=dturanski)** opened **[SPR-16615](https://jira.spring.io/browse/SPR-16615?redirect=false)** and commented  WebClient throws UnsupportedMediaTypeException on `text/plain;charset=utf-8`. AFAICT this is because utf-8 is lowercase. `supportedMediaTypes` in https://github.com/spring-projects/spring-framework/blob/master/spring-webflux/src/main/java/org/springframework/web/reactive/function/BodyExtractors.java#L257 contains `text/plain;charset=UTF-8` so I assume it's a case issue.   ---  **Affects:** 5.0.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2ff35daf9bc83a89c6ca579e4440e48627b9a56a","closed","status: declined,","spring-projects-issues","2018-03-19T15:54:06Z","2019-01-12T16:21:39Z"
"","21801","Proper way to dispose of Response [SPR-17268]","**[David Terk](https://jira.spring.io/secure/ViewProfile.jspa?name=david.terk)** opened **[SPR-17268](https://jira.spring.io/browse/SPR-17268?redirect=false)** and commented  Recently there was a fix that addressed some potential memory leaks if there were errors in the response to the Webclient.  Fix is here  #21563  If using exchange() what is the proper way to dispose of a response?  Can leaks still occur on bodyToMono(String.class) ? Trying to understand if this fix was specific to cases where bytebuffers are used e.g.   ```java return join(response.body(BodyExtractors.toDataBuffers()))  .map(dataBuffer -> {  byte[] bytes = new byte[dataBuffer.readableByteCount()];  dataBuffer.read(bytes);  DataBufferUtils.release(dataBuffer);  return bytes;  }).then(); ```  or everywhere.  The above snippet is used directly in WebClients default error handler - so would like to know if this is the only ""safe"" way to deal with disposing a response if a non 200 status code has taken place after using exchange.     ---  **Affects:** 5.0.8  **Reference URL:** #21563  **Issue Links:** - #21563 DataBufferUtils#join could leak buffers in case of error from the source","closed","type: bug,","spring-projects-issues","2018-09-11T18:21:26Z","2019-01-14T04:27:45Z"
"","21790","Suppress Reactor Netty ""disconnected client"" exceptions the logs [SPR-17257]","**[David Terk](https://jira.spring.io/secure/ViewProfile.jspa?name=david.terk)** opened **[SPR-17257](https://jira.spring.io/browse/SPR-17257?redirect=false)** and commented  I am seeing  WARN 15 — [-server-epoll-9] o.s.h.s.r.ReactorHttpHandlerAdapter : Handling completed with error: Connection has been closed  All over my logs.  Nearly every request through my gateway.  Why would this happen?  All requests are completing without ANY errors.  Sorry but I don't have much more info than that.  I am using Spring Cloud Gateway.  Seems to happen on calls which make a POST.  I am finding that I need to turn off logging on both  org.springframework.http.server.reactive.ReactorHttpHandlerAdapter org.springframework.web.server.adapter.HttpWebHandlerAdapter  Otherwise there is an unbelievable amount of logs being generated from what appears to be requests and responses that are functioning normally.     Would be useful to show the trace to have an idea where it is coming from.  ---  **Affects:** 5.0.8, 5.1.2  **Issue Links:** - #21875 Disconnected client exception logging should differentiate remote service exceptions too  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2018-09-08T17:32:02Z","2019-08-06T15:42:40Z"
"","21534","Nevermind [SPR-16996]","**[David Tanner](https://jira.spring.io/secure/ViewProfile.jspa?name=david.tanner)** opened **[SPR-16996](https://jira.spring.io/browse/SPR-16996?redirect=false)** and commented  Nevermind   --- No further details from [SPR-16996](https://jira.spring.io/browse/SPR-16996?redirect=false)","closed","status: invalid,","spring-projects-issues","2018-07-02T19:22:46Z","2019-01-12T05:18:35Z"
"","21487","Implement annotation and machinery used with SpringJUnit4ClassRunner to augment classpath [SPR-16948]","**[David M. Karr](https://jira.spring.io/secure/ViewProfile.jspa?name=dkarr)** opened **[SPR-16948](https://jira.spring.io/browse/SPR-16948?redirect=false)** and commented  My project has a bunch of component and integration tests that require additional classpath entries when they are run. These settings are made in the pom.xml, so the build works fine. However, I'd like to be able to run the tests in Eclipse without any additional set up tasks.  Currently, when I run the tests in Eclipse, I have to remember to first edit the run configuration, to add the required classpath entry.  In this case, I only have to add to it one directory that is part of the project.  I've already asked about this on StackOverflow (https://stackoverflow.com/questions/50884000/how-to-augment-the-classpath-used-by-springjunit4classrunner ), and I was told there's no existing way to do this.   ---  **Affects:** 5.0.7","open","in: test,","spring-projects-issues","2018-06-17T15:58:05Z","2019-01-11T16:10:31Z"
"","21418","Nested PathPatternPredicate doesn't expose path variables [SPR-16879]","**[David Kovac](https://jira.spring.io/secure/ViewProfile.jspa?name=qavid)** opened **[SPR-16879](https://jira.spring.io/browse/SPR-16879?redirect=false)** and commented  Given the following `RouterFunction`:  ```java @Bean public RouterFunction routerFunction() {     return nest(path(""/test/{something}""),             route(GET(""/info""), this::variables)                     .andRoute(GET(""/info/{foo}""), this::variables))             .andRoute(method(HttpMethod.GET), this::variables); } ```  and handler:  ```java private Mono variables(ServerRequest request) {     return ServerResponse.ok().body(fromObject(request.pathVariables())); } ```   when client sends a request GET /test/spring/info  path variable (_something_) is never merged (not added to request attributes) as variables.isEmpty() in PathPatternPredicate#mergeTemplateVariables is in this case false. As a result no path variables will be returned in response.Expected: something=spring.  Path variable will be merged only in case there is another PathPatternPredicate with path variable, like GET(""/info/{foo}""). Response for request GET /test/spring/info/bar will now contain something=spring and foo=bar.     Exposing of path variables was broken in 5.0.6 by #21233.  **Expected behavior**: path variables should be exposed if pattern matches  ---  **Affects:** 5.0.6  **Reference URL:** https://github.com/spring-projects/spring-framework-issues/tree/master/SPR-16879  **Issue Links:** - #21407 PathVariable with nested router function throws IllegalArgumentException (_**""duplicates""**_) - #21233 PathPatternPredicate leaves path variables in request even if predicate doesn't match  **Referenced from:** pull request https://github.com/spring-projects/spring-framework-issues/pull/180, and commits https://github.com/spring-projects/spring-framework-issues/commit/b34056d697746cc74e15c6f118ace2c9e2ef2521, https://github.com/spring-projects/spring-framework-issues/commit/472b271a9c62ec2d1deeee95f91a244981fecb4c","closed","in: web,","spring-projects-issues","2018-05-29T02:34:09Z","2019-01-13T20:26:13Z"
"","21275","Generic constructor argument (e.g. ObjectProvider) fails to resolve for inner class [SPR-16734]","**[David Kensche](https://jira.spring.io/secure/ViewProfile.jspa?name=avidd)** opened **[SPR-16734](https://jira.spring.io/browse/SPR-16734?redirect=false)** and commented  I have a class containing an inner class configuration that inherits from JpaBaseConfiguration. It therefore overrides the protected super constructor. Upon application startup I get a misleading error message stating that there is no `ObjectProvider`. However, the root cause for this is that the inner class itself is listed as first argument in the list of constructor arguments, leading to an off-by-1 error, therefore not satisfying the condition to create the ObjectProvider automatically.  This again resulted for me in hours of searching for dependency conflicts as the internet suggests this is a dependency conflict.  Here is the code example:  ``` @SpringBootApplication @EnableJms public class ShowcaseManager {     ...      @Configuration     @EnableTransactionManagement     public static class JpaConfiguration extends JpaBaseConfiguration {          protected JpaConfiguration(DataSource dataSource, JpaProperties properties,                 ObjectProvider jtaTransactionManager,                 ObjectProvider transactionManagerCustomizers) {             super(dataSource, properties, jtaTransactionManager, transactionManagerCustomizers);         }        ...     } } ```  ---  **Affects:** 4.3.16, 5.0.5  **Reference URL:** https://bugs.java.com/view_bug.do?bug_id=5087240  **Issue Links:** - #21193 Annotation lookup on parameter in inner class constructor fails when using javac from JDK versions prior to 9  **Backported to:** [4.3.17](https://github.com/spring-projects/spring-framework/milestone/166?closed=1)","closed","in: core,","spring-projects-issues","2018-04-17T08:02:35Z","2019-01-11T16:44:31Z"
"","21820","Regression in 5.1 RC3: BeanDefinitionOverrideException against mock config [SPR-17287]","**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=davidkarlsen)** opened **[SPR-17287](https://jira.spring.io/browse/SPR-17287?redirect=false)** and commented  Using spring boot 2.1.0.M3, which is spring-framework v5.1.0RC3, I get:     ```  ava.lang.IllegalStateException: Failed to load ApplicationContext Caused by: org.springframework.beans.factory.support.BeanDefinitionOverrideException: Invalid bean definition with name 'cachedConnectionFactory' defined in class path resource [com/edb/fs/tac/jfr/srv/ws/infra/mq/MqConfig.class]: Cannot register bean definition [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=true; factoryBeanName=mqConfig; factoryMethodName=connectionFactory; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [com/edb/fs/tac/jfr/srv/ws/infra/mq/MqConfig.class]] for bean 'cachedConnectionFactory': There is already [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=camelCxfTransportTest.MockConfig; factoryMethodName=cachedConnectionFactory; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [com/edb/fs/tac/jfr/srv/ws/CamelCxfTransportTest$MockConfig.class]] bound.  ```     which I do not do with latest GA releases of sb / sf.     The mock config is used as an inner config bean in another test:  ```  @Configuration static class MockConfig {  @Bean  public DestinationManager destinationManager() {  return new DestinationManager();  }   @Bean  public ConfigurationManager configurationManager() {  return new ConfigurationManager();  }   @Bean  public MockConnectionFactory cachedConnectionFactory( ConfigurationManager configurationManager,  DestinationManager destinationManager ) {  return new MockConnectionFactory(destinationManager,configurationManager);  }   @Bean  public JmsTransactionManager jmsTransactionManager(ConnectionFactory connectionFactory) {  return new JmsTransactionManager(connectionFactory);  }   @Bean  public JmsTemplate jmsTemplate(ConnectionFactory connectionFactory) {  return new JmsTemplate(connectionFactory);  } }  ```  My failing smoke test:  ```  @ExtendWith( SpringExtension.class ) @ActiveProfiles( {  ""eammock"",  ""noOpCache"",  ""dev"" }) @SpringBootTest( classes = \{ Application.class } ) public class ApplicationBootupSmokeTest  extends AbstractTest {   @Inject  private ConfigurableWebApplicationContext webApplicationContext;   @Test  public void testAbleToCreateWebAppContext() {  assertThat(webApplicationContext ).isNotNull();  assertThat(webApplicationContext.isActive() ).isTrue();  } }  ```     I don't think the other test should pick up the 1st tests inner mock-config?  ---  **Affects:** 5.1 RC3  **Issue Links:** - #21838 Regression in Spring 5.1","closed","in: core,","spring-projects-issues","2018-09-18T18:11:18Z","2019-01-12T05:18:11Z"
"","21587","Regression in test-context caching [SPR-17049]","**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=davidkarlsen)** opened **[SPR-17049](https://jira.spring.io/browse/SPR-17049?redirect=false)** and commented  Found in  5.1.0-SNAPSHOT  ### Error Message  Failed to load ApplicationContext  ### Stacktrace  ``` java.lang.IllegalStateException: Failed to load ApplicationContext Caused by: org.springframework.beans.factory.support.BeanDefinitionOverrideException: Invalid bean definition with name 'cachedConnectionFactory' defined in class path resource [com/edb/fs/tac/jfr/srv/ws/infra/mq/MqConfig.class]: Cannot register bean definition [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=true; factoryBeanName=mqConfig; factoryMethodName=connectionFactory; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [com/edb/fs/tac/jfr/srv/ws/infra/mq/MqConfig.class]] for bean 'cachedConnectionFactory': There is already [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=camelCxfTransportTest.MockConfig; factoryMethodName=cachedConnectionFactory; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [com/edb/fs/tac/jfr/srv/ws/CamelCxfTransportTest$MockConfig.class]] bound. ```     The case:  The MqConfig has been loaded in a previous test (but the configuration class is not active for the test in which the exception is thrown.  In the test that throws the error I have an inner config class which has the connection factory as a mock:  ```java @DirtiesContext(classMode = DirtiesContext.ClassMode.BEFORE_EACH_TEST_METHOD ) @ContextConfiguration( classes = {  WsServiceConfig.class,  ContextConfig.class,  CamelCxfTransportConfig.class}  ) @SpringBootTest(classes = \{ApplicationConfiguration.class, CamelCxfTransportTest.MockConfig.class }) public class CamelCxfTransportTest extends AbstractCamelTest {   @Configuration  static class MockConfig {  @Bean  public DestinationManager destinationManager() {  return new DestinationManager();  }   @Bean  public ConfigurationManager configurationManager() {  return new ConfigurationManager();  }   @Bean  public MockConnectionFactory cachedConnectionFactory( ConfigurationManager configurationManager,  DestinationManager destinationManager ) {  return new MockConnectionFactory(destinationManager,configurationManager);  }   @Bean  public JmsTransactionManager jmsTransactionManager(ConnectionFactory connectionFactory) {  return new JmsTransactionManager(connectionFactory);  }   @Bean  public JmsTemplate jmsTemplate(ConnectionFactory connectionFactory) {  return new JmsTemplate(connectionFactory);  }  ....rest of normal testcode...  } ```   production-config:  ```java @Configuration @ConfigurationProperties(""mq"") public class MqConfig {   //this one is a value since: https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-external-config-vs-value  @Value(""#\{T(com.ibm.msg.client.wmq.WMQConstants).${mq.reconnectOptionsConstant}}"")  private int reconnectOptions;  // ...properties...setters..getters...   @Bean(""cachedConnectionFactory"")  @Primary  public ConnectionFactory connectionFactory(UserCredentialsConnectionFactoryAdapter userCredentialsConnectionFactoryAdapter ) {  CachingConnectionFactory cachingConnectionFactory = new CachingConnectionFactory();  cachingConnectionFactory.setReconnectOnException(reconnectOnException);  cachingConnectionFactory.setSessionCacheSize(sessionCacheSize);  cachingConnectionFactory.setTargetConnectionFactory(userCredentialsConnectionFactoryAdapter);   return cachingConnectionFactory;  }   @Bean  protected UserCredentialsConnectionFactoryAdapter userCredentialsConnectionFactoryAdapter( MQConnectionFactory mqConnectionFactory ) {  UserCredentialsConnectionFactoryAdapter userCredentialsConnectionFactoryAdapter = new UserCredentialsConnectionFactoryAdapter();  userCredentialsConnectionFactoryAdapter.setUsername(username);  userCredentialsConnectionFactoryAdapter.setPassword(password);  userCredentialsConnectionFactoryAdapter.setTargetConnectionFactory(mqConnectionFactory);   return userCredentialsConnectionFactoryAdapter;  }   @Bean  protected MQConnectionFactory mqConnectionFactory()  throws JMSException  {  MQConnectionFactory mqConnectionFactory = new MQConnectionFactory();  mqConnectionFactory.setTransportType(com.ibm.msg.client.wmq.WMQConstants.WMQ_CM_CLIENT);  mqConnectionFactory.setConnectionNameList(connectionNameList);  mqConnectionFactory.setQueueManager(queueManager);  mqConnectionFactory.setChannel(channel);  mqConnectionFactory.setClientReconnectTimeout(reconnectTimeout);  mqConnectionFactory.setClientReconnectOptions(reconnectOptions);   return mqConnectionFactory;  }   @Bean  public JmsTransactionManager jmsTransactionManager(ConnectionFactory connectionFactory) {  JmsTransactionManager jmsTransactionManager = new JmsTransactionManager();  jmsTransactionManager.setConnectionFactory(connectionFactory);   return jmsTransactionManager;  } ```  which leads me to think that something has changed wrt test-context caching, as a bean is available to the testclass when it should not even be visible.  If I run the test-class isolated (mvn.... test=thetestclass) it will pass fine, hence I think it is due to context caching.   ---  **Affects:** 5.1 RC1","closed","in: test,","spring-projects-issues","2018-07-16T16:32:28Z","2019-01-11T12:48:33Z"
"","21541","Spring 5.x DataSource proxying does not work with Oracle UCP on JDK 9+ [SPR-17003]","**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=davidkarlsen)** opened **[SPR-17003](https://jira.spring.io/browse/SPR-17003?redirect=false)** and commented  See discussion and referenced-stacktrace at SO.  An AOP clash appears due to similar signatures in:  * https://docs.oracle.com/en/database/oracle/oracle-database/12.2/jjuar/oracle/ucp/jdbc/UCPConnectionBuilder.html  * https://docs.oracle.com/javase/10/docs/api/java/sql/ConnectionBuilder.html     ---  **Affects:** 5.0.7  **Reference URL:** https://stackoverflow.com/questions/50946614/using-spring-with-java-9-and-oracle-ucp  **Issue Links:** - #21264 AspectJ execution pointcut does not detect methods in superinterface anymore - #21298 AopUtils.getMostSpecificMethod should expose dynamic proxy class methods - #21343 AspectJ annotation pointcuts fail to evaluate against interface-based proxies  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bccff73e2b4911bc5009a8d4335cfac915736ea3, https://github.com/spring-projects/spring-framework/commit/e21db2619bd95991548d15147144b94bca7a4cad","closed","type: bug,","spring-projects-issues","2018-07-04T09:34:04Z","2019-08-21T12:28:12Z"
"","21371","ConcurrentModel.addAttribute(name, value) javadoc should not declare null value as acceptable [SPR-16831]","**[David DELAMOTTE](https://jira.spring.io/secure/ViewProfile.jspa?name=ddelamotte)** opened **[SPR-16831](https://jira.spring.io/browse/SPR-16831?redirect=false)** and commented  According to the Spring documentation: https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/ui/ConcurrentModel.html#addAttribute-java.lang.String-java.lang.Object-  This method is supposed to accept a null second parameter but there is an Assert.notNull that breaks this behaviour.     ---  **Affects:** 5.0.6  **Reference URL:** https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/ui/ConcurrentModel.html#addAttribute-java.lang.String-java.lang.Object-  **Issue Links:** - #21383 Problem with passing null parameter to MapSqlParameterSource - #21678 BindingAwareConcurrentModel should properly react to null value  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1830","closed","in: core,","spring-projects-issues","2018-05-17T08:31:53Z","2019-01-11T17:10:41Z"
"","21867","ClassUtils could use long form of Class.forName [SPR-17333]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-17333](https://jira.spring.io/browse/SPR-17333?redirect=false)** and commented  In `ClassUtils.isPresent()` we prefer `ClassLoader.loadClass()` to `Class.forName()`, even though there is a form of `Class.forName()` that includes the `ClassLoader`, and also provides the option to _not_ initialize the class (which seems ideal for `isPresent()`).  (N.B. in Substrate VM `Class.forName(className, false, currentLoader)` works, for a class that is present, whereas `classLoader.loadClass()` fails.)  ---  **Affects:** 5.1 GA  **Issue Links:** - #21984 ClassUtils.forName fails to load class from ContextTypeMatchClassLoader  **Referenced from:** commits https://github.com/spring-projects/spring-boot/commit/b1d4cf4ea83a12f04635900512f3286026f501aa","closed","type: enhancement,","spring-projects-issues","2018-10-04T08:12:41Z","2019-01-11T14:15:29Z"
"","21786","Usage of ClassLoader.loadClass() in ConfigurationClassParser [SPR-17253]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-17253](https://jira.spring.io/browse/SPR-17253?redirect=false)** and commented  In `ConfigurationClassParser` we explicitly call `ClassLoader.loadClass()` which is a bit odd, given that we have `ClassUtils` to do that work for us, and that is the ""normal"" pattern in Spring internally. It wouldn't affect any regular apps if we refactored to use `ClassUtils` (I tried it and the tests all pass). It would affect AOT native images in a positive way: the `ClassLoader` is null in that case, but `Class.forName()` actually works.  ---  **Affects:** 5.0.8  **Issue Links:** - #21529 Initial GraalVM native images (Substrate VM) support (_**""is depended on by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ad5447253cf375b9bfec83965ae3c2b1e97d0e64, https://github.com/spring-projects/spring-framework/commit/c803ad7998e5b6b59975e844fce69b9171a59731","closed","type: enhancement,","spring-projects-issues","2018-09-07T10:05:02Z","2019-01-11T14:13:10Z"
"","21739","Revisit @Bean introspection between @Configuration classes and 'lite' beans [SPR-17206]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-17206](https://jira.spring.io/browse/SPR-17206?redirect=false)** and commented  There is a lot of evidence that `ConfigurationClassPostProcessor` is bad for startup time. There is also some evidence that part of the problem is lite bean configuration - we have to scan all methods of all bean definition classes looking for `@Bean`. To investigate this I made a version of `ConfigurationClassPostProcessor` that only uses classes from `spring.components`. It is _much_ faster when there are no `@Configuration` classes.  The rationale for introducing lite beans was IIRC so that you wouldn't pay the cost of CGLib proxying. But that is so much faster now than it was when we invented `@Configuration` I don't believe it adds up any more - the cost of processing annotations is much higher. And we have to recursively search all nested classes of all bean definitions. Ugh.  If lite beans were optional, Spring Boot could switch them off, and we can flush out all the usages (which are probably mostly accidental at this point).  ---  **Affects:** 5.0.8  **Issue Links:** - #21136 JUnit Jupiter `@Nested` class cannot share enclosing class's ApplicationContext if nested class is deemed to be a configuration candidate - #21674 Java 10: ""Illegal method name"" when test functions in Kotlin contain spaces in name - #19660 Spring internal configuration classes can no longer use `@EventListener` - #15238 Do not consider all `@Component` instances as `@Configuration` candidates - #12837 Automatically detect and register nested `@Configuration` classes - #15163 Consider `@Import` classes as lite `@Configuration` - #21379 A lite configuration class's member classes are processed when it's imported but not when it's registered directly - #16391 `@ComponentScan` should get processed without `@Configuration` as well - #21945 Add bean definition attribute for ConfigurationClassPostProcessor to skip ""lite"" bean detection  2 votes, 8 watchers","closed","in: core,","spring-projects-issues","2018-08-23T08:30:17Z","2019-01-13T04:27:32Z"
"","21732","Be more defensive in UrlResource about cleaning the path [SPR-17198]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-17198](https://jira.spring.io/browse/SPR-17198?redirect=false)** and commented  This method from `UrlResource` throws `UnsupportedFeatureError` in GraalVM:  ```java private URL getCleanedUrl(URL originalUrl, String originalPath) {      try {           return new URL(StringUtils.cleanPath(originalPath));      }      catch (MalformedURLException ex) {           // Cleaned URL path cannot be converted to URL           // -> take original URL.           return originalUrl;      } } ```  So the `originalUrl` would have been fine, but it cannot get past this private method to read the input stream. We could be more defensive there.  ---  **Affects:** 5.0.8  **Reference URL:** https://github.com/oracle/graal/issues/623  **Issue Links:** - #21529 Initial GraalVM native images (Substrate VM) support (_**""is depended on by""**_) - #19974 UrlResource getFilename should not contain query parameters","closed","type: enhancement,","spring-projects-issues","2018-08-20T14:50:05Z","2020-07-27T10:29:10Z"
"","21712","ClassUtils uses more memory than necessary [SPR-17176]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-17176](https://jira.spring.io/browse/SPR-17176?redirect=false)** and commented  I'm not smart enough to know this, but Raphael Winterhalter (Byte Buddy maintainer) is, and he pointed out to me that in `ClassUtils` we have some `HashMaps` whose size we know ahead of time, and which are created with an initial capacity, but no explicit load factor. The default load factor is 0.75, so when the table gets to 3/4 capacity it is automatically doubled, but then we never use the extra elements, in this case at least. A `HashMap` always has a power of 2 capacity internally, so if you know for sure you are going to use less than `2^n` entries, you should create the map with `new HashMap(2^n, 1)` (I think).  It's kind of hard to test we have optimized this kind of thing, and unlikely to have a dramatic effect on anything but the smallest app. But maybe worth reviewing occasionally.  FWIW I found 64 instances of `new HashMap<>\(n)` in Spring framework code. The largest value of `n` was 64. Not all of them will have a fixed size, like in `ClassUtils` but many might. I suppose even smaller values might be significant if you create lots of them.     There are 112 instances of `new ConcurrentHashMap<>\(n)` and some of them are larger (up to 1024). I don't know what the optimum load factor is for a concurrent hash map, if you know the size of the final map.  ---  **Affects:** 5.0.8  **Issue Links:** - #21642 Initialize pre-filled HashMaps with large enough capacity (e.g. in HttpMethod)","closed","type: enhancement,","spring-projects-issues","2018-08-13T16:28:41Z","2019-01-11T13:40:14Z"
"","21705","ClassUtils optimization for less expensive static initialization [SPR-17169]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-17169](https://jira.spring.io/browse/SPR-17169?redirect=false)** and commented  Spring core `ClassUtils` is always an annoying blip on the flame graphs of startup benchmarks. It pops up because it indirectly calls `java.lang.invoke.MethodHandleNatives.linkCallSite()` which is expensive it seems, or at least when called in a static initializer. You can avoid the cost completely if you switch from iterating over a map using a lambda to explicit old-style iteration:  ```java for (Map.Entry, Class> entry : primitiveWrapperTypeMap.entrySet()) {      Class key = entry.getKey();      Class value = entry.getValue();      primitiveTypeToWrapperMap.put(value, key);      registerCommonClasses(key); } ```  instead of  ```java primitiveWrapperTypeMap.forEach((key, value) -> {      primitiveTypeToWrapperMap.put(value, key);      registerCommonClasses(key); }); ```  The improvement in micro apps startup is dramatic: about 3.5%.   ---  **Affects:** 5.0.8  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/df51ff03862c6a299f2ff243828ec23608899311, https://github.com/spring-projects/spring-framework/commit/1d8e5f4d853a51834710536efec72e6819ca9970","closed","type: enhancement,","spring-projects-issues","2018-08-12T17:59:06Z","2018-08-17T09:42:42Z"
"","21689","spring.components needs a special include filter for efficient usage when you need to include all [SPR-17152]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-17152](https://jira.spring.io/browse/SPR-17152?redirect=false)** and commented  The `ClassPathScanningCandidateComponentProvider` is used by Spring Data in such a way that it could in principle take advantage of the `spring.components` index, but in practice it does not. The problem is that Spring Data is looking for components that match a name, and there is no special purpose include filter for that, so it ends up using a regex matcher that always matches (which is wasteful and cannot be applied to the indexed components).  One solution would be to provide a special `AlwaysMatchesFilter` that could be applied in Spring Data and include it in the `indexSupportsIncludeFilter()` test. Another would be to simply treat the case of no filters as meaning by convention ""include all"".   ---  **Affects:** 5.0.8","closed","type: enhancement,","spring-projects-issues","2018-08-09T10:59:00Z","2018-08-10T07:07:04Z"
"","21688","BeanFactoryUtils.transformedBeanName() creates a lot of GC pressure [SPR-17151]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-17151](https://jira.spring.io/browse/SPR-17151?redirect=false)** and commented  This is something that popped up while analysing a pathological Spring Data app with 2000 repositories, but it points at a potential general optimization that might help in Spring. The problem is that `BeanFactoryUtils.transformedBeanName()` is called for every bean in the context when someone wants to do `DefaultListableBeanFactory.getBeansOfType()` which is quite common in Spring Data and Spring Boot (and other frameworks). This in turn creates a new `String` for every factory bean which in turn shows up in the GC pressure graph in Flight Recorder (25% of GC pressure on startup of this extreme example). If the results were somehow cacheable in `DefaultListableBeanFactory` that would help.   ---  **Affects:** 5.0.8  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/eddbf13d5d0804e6b4a705933b776969318dec93","closed","type: enhancement,","spring-projects-issues","2018-08-09T10:13:20Z","2018-08-17T09:42:44Z"
"","21675","Insulate BeanInfo from segmentation errors at runtime with GraalVM [SPR-17138]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-17138](https://jira.spring.io/browse/SPR-17138?redirect=false)** and commented  GraalVM (and possibly other reflection sensitive tools) barfs really badly on the standard `BeanInfo`:  ```  ./target/bunc     .   ____          _            __ _ _  /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \ ( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \  \\/  ___)| |_)| | | | | || (_| |  ) ) ) )   '  |____| .__|_| |_|_| |_\__, | / / / /  =========|_|==============|___/=/_/_/_/  :: Spring Boot ::                          [ [ SubstrateSegfaultHandler caught signal 11 ] ]  General Purpose Register Set Values:     RAX 000055f1af7d6478   RBX 00007f00afa6e1e8   RCX 00007f00afa6e1e8   RDX 000055f1af51d7a8   RBP 000055f1aeb6ba80   RSI 0000000000000010   RDI 000055f1af7d5d08   RSP 00007fff306e0860   R8  0000000000000010   R9  00000000c0100701   R10 00007f00afa6e158   R11 000000000000000e   R12 0000000000000010   R13 0000000000000026   R14 000000000000002e   R15 000055f1b1409260   EFL 0000000000010246   RIP 000055f1aead90fc   ... ```  etc.  I guess it might just be a bug in GraalVM (https://github.com/oracle/graal/issues/522), but it is also possible to ""fix"" it by using a custom `BeanInfo`:  ```java class SpringBootBeanInfo implements BeanInfo {  	private final PropertyDescriptor[] propertyDescriptors;  	public SpringBootBeanInfo(Class beanClass) throws IntrospectionException { 		this.propertyDescriptors = extractPropertyDescriptors(beanClass); 	}  	private PropertyDescriptor[] extractPropertyDescriptors(Class beanClass) 			throws IntrospectionException { 		Map getters = new LinkedHashMap<>(); 		Map setters = new LinkedHashMap<>(); 		Method[] methods = ReflectionUtils.getAllDeclaredMethods(beanClass); 		for (Method method : methods) { 			collectGetterSetterMethod(method, getters, setters); 		} 		List descriptors = new ArrayList<>(methods.length); 		for (Map.Entry entry : getters.entrySet()) { 			String name = entry.getKey(); 			Method getter = entry.getValue(); 			Method setter = setters.remove(name); 			if (setter != null && !getter.getReturnType() 					.isAssignableFrom(setter.getParameterTypes()[0])) { 				setter = null; 			} 			descriptors.add(new SlimPropertyDescriptor(name, getter, setter)); 		} 		for (Map.Entry entry : setters.entrySet()) { 			Method setter = entry.getValue(); 			String name = entry.getKey(); 			// System.err.println(""**************** "" + setter); 			descriptors.add(new SlimPropertyDescriptor(name, null, setter)); 		} 		return descriptors.toArray(new SlimPropertyDescriptor[descriptors.size()]); 	}  	private void collectGetterSetterMethod(Method method, Map getters, 			Map setters) { 		int argSize = method.getParameterTypes().length; 		if (!Modifier.isStatic(method.getModifiers()) 				&& Modifier.isPublic(method.getModifiers()) && argSize <= 1) { 			String name = method.getName(); 			if (argSize == 0 && name.length() > 3 && name.startsWith(""get"") 					&& !name.equals(""getClass"")) { 				getters.putIfAbsent(name.substring(3), method); 			} 			else if (argSize == 0 && name.length() > 2 && name.startsWith(""is"") 					&& method.getReturnType() == boolean.class) { 				getters.putIfAbsent(name.substring(2), method); 			} 			else if (argSize == 1 && name.length() > 3 && name.startsWith(""set"")) { 				setters.putIfAbsent(name.substring(3), method); 			} 		} 	}  	@Override 	public BeanDescriptor getBeanDescriptor() { 		throw new UnsupportedOperationException(); 	}  	@Override 	public EventSetDescriptor[] getEventSetDescriptors() { 		throw new UnsupportedOperationException(); 	}  	@Override 	public int getDefaultEventIndex() { 		throw new UnsupportedOperationException(); 	}  	@Override 	public int getDefaultPropertyIndex() { 		throw new UnsupportedOperationException(); 	}  	@Override 	public MethodDescriptor[] getMethodDescriptors() { 		throw new UnsupportedOperationException(); 	}  	@Override 	public BeanInfo[] getAdditionalBeanInfo() { 		throw new UnsupportedOperationException(); 	}  	@Override 	public Image getIcon(int iconKind) { 		throw new UnsupportedOperationException(); 	}  	@Override 	public PropertyDescriptor[] getPropertyDescriptors() { 		return this.propertyDescriptors; 	}  }  class SlimPropertyDescriptor extends PropertyDescriptor {  	private Method readMethod; 	private Method writeMethod;  	public SlimPropertyDescriptor(String name, Method getter, Method setter) 			throws IntrospectionException { 		super(name, getter, setter); 	}  	@Override 	public synchronized void setReadMethod(Method readMethod) 			throws IntrospectionException { 		this.readMethod = readMethod; 	}  	@Override 	public synchronized void setWriteMethod(Method writeMethod) 			throws IntrospectionException { 		this.writeMethod = writeMethod; 	}  	@Override 	public Method getReadMethod() { 		return readMethod; 	}  	@Override 	public Method getWriteMethod() { 		return writeMethod; 	} } ```  The key is to override the getters and setters there in `PropertyDescriptor`.   ---  **Affects:** 5.0.8","closed","in: core,","spring-projects-issues","2018-08-07T12:06:39Z","2020-07-27T10:33:51Z"
"","21615","WebFlux returns 406 but Spring MVC renders ""text/plain"" request based on Publisher and String [SPR-17078]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-17078](https://jira.spring.io/browse/SPR-17078?redirect=false)** and commented  I assume this is a Framework issue (might be Spring Boot I guess, since that's what I use to test it).  Controller:  ```java @GetMapping(""/straight"") public Mono>> straight() {      return Mono.just(ResponseEntity.ok().header(""x-foo"", ""spam"")                .body(Mono.from(Flux.just(""foo"", ""bar"")))); } ```  Test:  ```java @Test public void straight() throws Exception {      ResponseEntity result = rest.exchange(RequestEntity                .get(new URI(""/straight"")).accept(MediaType.TEXT_PLAIN).build(),                String.class);      assertThat(result.getBody()).isEqualTo(""foo"");      assertThat(result.getHeaders()).containsKey(""x-foo""); } ```  The test passes with MVC and fails with Webflux (406 not acceptable).   ---  **Affects:** 5.0.7","open","type: enhancement,","spring-projects-issues","2018-07-24T10:15:45Z","2018-08-16T12:01:19Z"
"","21614","MVC not rendering response headers for ResponseEntity> [SPR-17076]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-17076](https://jira.spring.io/browse/SPR-17076?redirect=false)** and commented  Controller:  ```java @GetMapping(""/one"") public ResponseEntity> one() {      return ResponseEntity.ok().header(""x-foo"", ""spam"")                .body(Flux.just(new Foo(""foo""), new Foo(""bar""))); } ```  Failing test:  ```java @Test public void one() {      ResponseEntity result = rest.getForEntity(""/one"", String.class);      assertThat(result.getBody()).contains(""\""value\"":\""bar\""}"");      assertThat(result.getHeaders()).containsKey(""x-foo""); } ```  The same code works as expected with webflux (just changing dependency).   ---  **Affects:** 5.0.7","closed","type: bug,","spring-projects-issues","2018-07-23T13:55:34Z","2018-07-26T08:09:36Z"
"","21608","Revise ResolvableType.as for introspection performance (limiting serializability) [SPR-17070]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-17070](https://jira.spring.io/browse/SPR-17070?redirect=false)** and commented  After #21508? we now have some caching in `GenericApplicationListenerAdapter` which helps a bit. Unfortunately I still see the app losing 2.5% of startup time to `GenericApplicationListenerAdapter` while the multicaster checks each listener for supported event types. The culprit is `ResolvableType.as()` (where it looks for all interfaces).  I tried this and it works and is **much** faster:  ```java @Nullable static ResolvableType resolveDeclaredEventType(Class listenerType) {      ResolvableType eventType = eventTypeCache.get(listenerType);      if (eventType == null) {           Method method = null;           for (Method candidate : ReflectionUtils.getUniqueDeclaredMethods(listenerType)) {                if (candidate.getName().equals(""onApplicationEvent"")) {                         method = candidate;                         break;                }           }           if (method !=null) {                eventType = ResolvableType.forMethodParameter(method, 0);           } else {                eventType = ResolvableType.forClass(listenerType).as(ApplicationListener.class).getGeneric();           }           eventTypeCache.put(listenerType, eventType);      }      return (eventType != ResolvableType.NONE ? eventType : null); } ```  Whether or not that is general enough is beyond me, but it has a big effect on the tiny apps I have been benchmarking.  ---  **Affects:** 5.1 RC1  **Reference URL:** #21508  **Issue Links:** - #21508 Resolved ApplicationListener event type should get cached - #21609 Avoid repeated factory class introspection in AbstractAutowireCapableBeanFactory  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cfbacfd89bfb4ef93d1603f4ceca7a4906fc5c3f","closed","type: enhancement,","spring-projects-issues","2018-07-20T14:40:08Z","2019-01-14T04:30:24Z"
"","21601","Use available type information in functional bean definitions for resolving FactoryBean type [SPR-17063]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-17063](https://jira.spring.io/browse/SPR-17063?redirect=false)** and commented  I encountered a nasty problem with some functional bean registrations, caused by early an instantiation cascade driven from a `BeanFactoryPostProcessor` in Spring Data. The issue comes back to the BFPP wanting to find bean definitions of a certain type, so it uses `BeanFactory.getType(String)`, which could have used the `ResolvableType` information that was available for the functional bean definition, but didn't and fell back to instantiating the bean to check its runtime concrete type. The offending code is in `AbstractBeanFactory`.  ---  **Issue Links:** - #21595 Support for null bean in functional bean registration - #21566 Publicly expose ResolvableType in RootBeanDefinition  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/52d124de6fd6f36972b829e880f2b0a6cca65e35","closed","type: enhancement,","spring-projects-issues","2018-07-19T08:42:15Z","2019-01-11T12:47:16Z"
"","21595","Support for null bean in functional bean registration [SPR-17057]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-17057](https://jira.spring.io/browse/SPR-17057?redirect=false)** and commented  You can return `null` from a `@Bean` method and it does some clever stuff internally using a final package private class (which is therefore inaccessible to users) called `NullBean`. The result is just a bean that cannot satisfy any dependencies. It would make sense if the functional form of the same bean could do the same trick, either returning `null` from the `Supplier` or some other contract that allows the `BeanFactory` to behave the same way.  ---  **Affects:** 5.0.7  **Issue Links:** - #21572 Consistent non-exposure of null beans in the BeanFactory API - #21601 Use available type information in functional bean definitions for resolving FactoryBean type  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/28f7b262940debda61acf0b7bb18103b9228a0cf","closed","type: enhancement,","spring-projects-issues","2018-07-18T10:38:58Z","2019-01-11T12:47:50Z"
"","21552","Make DefaultListableBeanFactory's javax.inject.Provider implementation invisible for nested class introspection [SPR-17014]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-17014](https://jira.spring.io/browse/SPR-17014?redirect=false)** and commented  `DefaultListableBeanFactory` has some nested types that are designed to protect the runtime against class not found errors when certain libraries are not on the classpath (in particular JSR330). Unfortunately, some static analysis tools cannot get past the fact that one of those inner classes implements an interface `Provider` that is not available at runtime.  Here's a program that fails when javax.inject is not on the classpath:  ```java public class Test {  public static void main(String[] args) throws Exception {    Class clazz = Class.forName( ""org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider"");    System.out.println(clazz.getEnclosingClass());  } }  ```  It seems like a ""feature"" of the JDK, but I think we can easily work around it by extracting the private nested class into a package private one.  ---  **Affects:** 5.0.7  **Reference URL:** https://github.com/oracle/graal/issues/511  **Issue Links:** - #21529 Initial GraalVM native images (Substrate VM) support (_**""is depended on by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b4fc7943e127cc4b0e1409f9b7ebaab4f42334cf","closed","in: core,","spring-projects-issues","2018-07-06T07:56:17Z","2020-07-27T10:29:50Z"
"","21545","RestTemplate (and probably server side as well) should be able to bootstrap itself if com.sun.org.apache.xalan.* is not available  [SPR-17007]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-17007](https://jira.spring.io/browse/SPR-17007?redirect=false)** and commented  If `SourceHttpMessageConverter` fails to initialize itself it blows up a `RestTemplate` and then the whole bean factory on startup:  ``` Caused by: javax.xml.transform.TransformerFactoryConfigurationError: Provider com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl not found 	at java.lang.Throwable.(Throwable.java:265) 	at java.lang.Error.(Error.java:70) 	at javax.xml.transform.TransformerFactoryConfigurationError.(TransformerFactoryConfigurationError.java:91) 	at javax.xml.transform.FactoryFinder.newInstance(FactoryFinder.java:181) 	at javax.xml.transform.FactoryFinder.find(FactoryFinder.java:261) 	at javax.xml.transform.TransformerFactory.newInstance(TransformerFactory.java:106) 	at org.springframework.http.converter.xml.SourceHttpMessageConverter.(SourceHttpMessageConverter.java:86) 	at org.springframework.web.client.RestTemplate.(RestTemplate.java:181) 	at org.springframework.boot.autoconfigure.http.HttpMessageConverters.getDefaultConverters(HttpMessageConverters.java:204) 	at org.springframework.boot.autoconfigure.http.HttpMessageConverters.(HttpMessageConverters.java:106) 	at org.springframework.boot.autoconfigure.http.HttpMessageConverters.(HttpMessageConverters.java:92) 	at org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration.messageConverters(HttpMessageConvertersAutoConfiguration.java:72) ```  The presence of a default implementation  of `TransformerFactory` appears to be platform dependent, so `RestTemplate` and friends probably ought not to rely on their existence. E.g. a defensive type check might be needed.  ---  **Affects:** 5.0.7  **Issue Links:** - #21529 Initial GraalVM native images (Substrate VM) support (_**""is depended on by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b09fad13a1f9517abd901587c9299bf5b65ed061","closed","type: enhancement,","spring-projects-issues","2018-07-04T12:51:40Z","2020-07-27T10:30:22Z"
"","21543","DefaultParameterNameDiscoverer should automatically adapt to Graal constraints [SPR-17005]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-17005](https://jira.spring.io/browse/SPR-17005?redirect=false)** and commented  `ParameterNameDiscoverer` is used in a number of places in Spring, not least of which is in the core DI features. `AbstractAutowireCapableBeanFactory` exposes a setter and a getter, but it's not available in any public interfaces that are easy to access, so it seems like you have to resort to downcasting:  ``` ((AbstractAutowireCapableBeanFactory) context.getDefaultListableBeanFactory()) 		.setParameterNameDiscoverer(...); ```  MVC and Webflux also use parameter name discovery for controller methods. This can be avoided if users explicitly add annotations, or simply don't use the flexible method signature features.  The default parameter name discoverer uses reflection and also ASM, and both of these strategies is problematic or unavailable in native images (c.f. GraalVM). It seems like the `AbstractAutowireCapableBeanFactory` actually works fine  with a `NoopParameterNameDiscoverer` (that just returns null), unless it has to do autowire by name (which is pretty uncommon I should think).  ---  **Issue Links:** - #21529 Initial GraalVM native images (Substrate VM) support (_**""is depended on by""**_) - #21530 Support platforms where Class is not Serializable in SerializableTypeWrapper - #21673 Detect GraalVM with system property in SerializableTypeWrapper  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e8034f2f967ec61a9f5393ec3f93c1d8e373f155","closed","type: enhancement,","spring-projects-issues","2018-07-04T11:12:45Z","2020-07-27T10:30:33Z"
"","21522","CGLIB source code not included in source jar [SPR-16984]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-16984](https://jira.spring.io/browse/SPR-16984?redirect=false)** and commented  The ASM source code is available in the source jars that Spring repackages, but CGLib is not. It makes debugging hard.  ---  **Affects:** 5.0.7  **Issue Links:** - #21912 org.springframework.cglib (in particular org.springframework.cglib.proxy.Enhancer) are missing from the source code bundle (_**""is duplicated by""**_)","closed","in: core,","spring-projects-issues","2018-06-28T20:55:18Z","2019-11-15T12:12:52Z"
"","21511","Support for Supplier as a deferred bean creation [SPR-16973]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-16973](https://jira.spring.io/browse/SPR-16973?redirect=false)** and commented  It's nice that Spring supports this kind of idiom for lazy initialization of `Bar`:     ```java  @Bean  public Foo foo(Provider bar) {     return new Foo(bar);  }   @Bean  @Lazy  public Bar bar() {     return new Bar(""bar"");  } ```     It would be nice if it supported `Supplier` in place of `Provider` especially now that Java 8 is the baseline.  ---  **Affects:** 5.0.7  **Issue Links:** - #21433 Introduce Stream support in PropertySources and PropertyValues - #21613 Programmatic ObjectProvider retrieval through BeanFactory API","closed","type: enhancement,","spring-projects-issues","2018-06-25T07:52:03Z","2019-01-11T16:09:02Z"
"","21508","Resolved ApplicationListener event type should get cached [SPR-16970]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-16970](https://jira.spring.io/browse/SPR-16970?redirect=false)** and commented  There's a lot of cacheing already in `AbstractApplicationEventMulticaster`, but it still shows up as a blip on the flame graphs (roughly 3% of a stripped down Spring Boot app with functional bean registrations). Every `ApplicationListener` is queried to compute its event type for every event that is processed (if it is not already a `GenericApplicationListener`, which most are not). The computation of the generic type is what fills the flame graph. `GenericApplicationListenerAdapter` and/or `AbstractApplicationEventMulticaster` could probably be optimized to improve this.     ---  **Affects:** 5.0.7  **Issue Links:** - #21411 Allow registration of application event listeners in a functional way - #21602 Cache order result per Class in OrderUtils (for AnnotationAwareOrderComparator) - #21608 Revise ResolvableType.as for introspection performance (limiting serializability)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/478d7255d230bba123d879cd92ca460f75956168","closed","type: enhancement,","spring-projects-issues","2018-06-24T13:32:47Z","2019-01-11T16:08:51Z"
"","21499","Null bean value exception message confusing [SPR-16961]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-16961](https://jira.spring.io/browse/SPR-16961?redirect=false)** and commented  When a `@Bean` method returns null it becomes non-autowirable, but the exception message only says that there are ""no beans"" of the required type. In fact there was one, but it was null, and that would be more useful information.  ---  **Affects:** 5.0.7  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/13531  **Issue Links:** - #21498 Odd behaviour with null bean instance when an alternative autowire candidate is available","open","in: core,","spring-projects-issues","2018-06-20T08:24:35Z","2019-01-11T16:09:41Z"
"","21498","Odd behaviour with null bean instance when an alternative autowire candidate is available [SPR-16960]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-16960](https://jira.spring.io/browse/SPR-16960?redirect=false)** and commented  Since Spring 5.0 a `@Bean` can return `null` and the effect is to leave the bean definition in the registry, but make the value not autowirable. However, if there is another bean of the same type that is not null, it does not become autowirable. Probably it should? The exception from Spring doesn't mention the existence of either bean (the null or the not null one):     ``` norg.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'java.lang.String' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)} at org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoMatchingBeanFound(DefaultListableBeanFactory.java:1509) ...   ```  ---  **Affects:** 5.0.7  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/13531  **Issue Links:** - #21499 Null bean value exception message confusing","open","in: core,","spring-projects-issues","2018-06-20T08:17:50Z","2019-01-11T16:09:39Z"
"","21497","Support for conditional registration of functional bean definitions [SPR-16959]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-16959](https://jira.spring.io/browse/SPR-16959?redirect=false)** and commented  There is a gap in the the functional bean registration features in `BeanDefinitionBuilder` and `GenericApplicationContext`. Once you register a `Supplier` you have committed to provide an instance of the class you register, whereas in a lot of use cases you don't know whether or not you want to provide it until the bean factory is available (e.g. conditional on another instance of the same class being available). I guess the change needs to be in the `BeanDefinitionRegistry` interface, for example to support a `Predicate<``ConditionContext``>` as well as the `Supplier`. If the interface doesn't change, I suppose returning `null` from the `Supplier` might be an option, but that seems a bit ugly, and might be too late, since the `BeanDefinition` has already been registered at that point.  ---  **Issue Links:** - #18353 Programmatic bean registration within configuration classes","open","type: enhancement,","spring-projects-issues","2018-06-20T07:55:48Z","2020-04-01T12:49:15Z"
"","21327","LiveBeansView is not really fit for purpose any more [SPR-16787]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-16787](https://jira.spring.io/browse/SPR-16787?redirect=false)** and commented  I wanted to try and visualize the object graph. Various options exist, but the only ones that work rely on the LiveBeansView that comes from spring-context (also exposed by Spring Boot as an endpoint, which is used by all the viable visualization tools I found). Unfortunately, I think a modern Spring Boot application has too many beans that are not obviously dependent on one another according to the LiveBeansView, even though they clearly are. Probably this feature used to work  when all your beans were declared explicitly in XML files. Now that we have `@Configuration` and auto-configuration the same rules do not apply.     The quickest way to see the problem is probably with STS if you have it. Run an app in the Boot dashboard and open its ""Properties"" view. It renders the LiveBeansView as a tree (which isn't very helpful anyway, but that's a different story). Browse through it and you will see dozens of beans that are unconnected to anything else. E.g. `@Configuration` classes do not have an imprint of the beans they created.     Perhaps we can add more data to the LiveBeansView, either in the existing fields (""links"" etc.) or in some new fields that express the changes that seem to have taken place?  ---  **Affects:** 4.3.16  **Attachments:** - [2018-05-02-103154_1368x768_scrot.png](https://jira.spring.io/secure/attachment/25705/2018-05-02-103154_1368x768_scrot.png) (_326.78 kB_)  **Issue Links:** - #21438 LiveBeansView should support double quotes in application context id","closed","in: core,","spring-projects-issues","2018-05-02T13:54:52Z","2020-09-25T17:21:02Z"
"","21301","Re-package WebClient so it isn't in the same jar as the server-side pieces [SPR-16760]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-16760](https://jira.spring.io/browse/SPR-16760?redirect=false)** and commented  If WebClient is a general purpose HTTP client (which I take to be the case, and seems to fit with the messaging from the Framework team) then I feel quite strongly that it should be packaged separately from the server-side components. If all I want is a client, I shouldn't have the server stuff on the classpath. I don't think I'm the only one to be bitten by this (e.g. https://github.com/rabbitmq/hop/issues/122 It also leads to Spring Boot making a false assumption about my intention to start a server.   ---  **Affects:** 5.0.5  0 votes, 9 watchers","closed","status: declined,","spring-projects-issues","2018-04-24T12:08:55Z","2019-01-12T16:21:22Z"
"","21241","CookieLocaleResolver is not RFC6265 compliant when setting a locale and time zone [SPR-16700]","**[Dario Seidl](https://jira.spring.io/secure/ViewProfile.jspa?name=darioseidl)** opened **[SPR-16700](https://jira.spring.io/browse/SPR-16700?redirect=false)** and commented  When setting a time zone in addition to the locale, the `CookieLocaleResolver` writes the locale followed by a _space_, followed by the time zone id.  ```java addCookie(response,               (locale != null ? toLocaleValue(locale) : ""-"") + (timeZone != null ? ' ' + timeZone.getID() : """")); ```  According the RFC6265, a space is not allowed within a cookie value. This is an issue, for example with Tomcat 8.5+, which defaults to RFC6265 cookies and throws the following error:  ``` java.lang.IllegalArgumentException: An invalid character [32] was present in the Cookie value 	at org.apache.tomcat.util.http.Rfc6265CookieProcessor.validateCookieValue(Rfc6265CookieProcessor.java:182) 	at org.apache.tomcat.util.http.Rfc6265CookieProcessor.generateHeader(Rfc6265CookieProcessor.java:115) 	at org.apache.catalina.connector.Response.generateCookieString(Response.java:1019) 	at org.apache.catalina.connector.Response.addCookie(Response.java:967) 	at org.apache.catalina.connector.ResponseFacade.addCookie(ResponseFacade.java:386) 	at javax.servlet.http.HttpServletResponseWrapper.addCookie(HttpServletResponseWrapper.java:58) 	at org.springframework.security.web.firewall.FirewalledResponse.addCookie(FirewalledResponse.java:68) 	at javax.servlet.http.HttpServletResponseWrapper.addCookie(HttpServletResponseWrapper.java:58) 	at org.springframework.web.util.CookieGenerator.addCookie(CookieGenerator.java:197) 	at org.springframework.web.servlet.i18n.CookieLocaleResolver.setLocaleContext(CookieLocaleResolver.java:252) 	at org.springframework.web.servlet.support.RequestContext.changeLocale(RequestContext.java:384) 	at at.rechnerherz.tnt.dev.LocaleController.setLocale(LocaleController.kt:40) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:498) 	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209) 	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136) 	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102) 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:870) 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:776) 	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991) 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925) 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:978) 	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:881) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661) 	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:855) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) 	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) 	at at.rechnerherz.tnt.config.logback.MDCFilter.doFilter(MDCFilter.kt:29) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) 	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:158) 	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:126) 	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:111) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) 	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:84) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320) 	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127) 	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) 	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) 	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) 	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) 	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) 	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) 	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) 	at at.rechnerherz.tnt.config.auth.JwtCookiePreAuthenticationFilter.doFilterInternal(JwtCookiePreAuthenticationFilter.kt:52) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) 	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) 	at org.springframework.security.web.csrf.CsrfFilter.doFilterInternal(CsrfFilter.java:124) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) 	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:96) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) 	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:66) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) 	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) 	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) 	at org.springframework.security.web.access.channel.ChannelProcessingFilter.doFilter(ChannelProcessingFilter.java:157) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) 	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215) 	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178) 	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:357) 	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:270) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) 	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) 	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) 	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) 	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) 	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199) 	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) 	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496) 	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) 	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81) 	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) 	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342) 	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803) 	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) 	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790) 	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459) 	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) 	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) 	at java.lang.Thread.run(Thread.java:748) ```  The issue could be solved by replacing the space with another character or by Base64 encoding the value. (As similar issue in spring-session was solved by either allowing to specify the separator https://github.com/spring-projects/spring-session/issues/615 or using Base64 encoding: https://github.com/spring-projects/spring-session/issues/611)  ---  **Affects:** 5.0.4  **Issue Links:** - #6227 Spring i18n needs TimeZone resolution as well as Locale resolution. - #21192 Revise StringUtils.parseLocale(String) for proper handling of corner cases - #17624 LocaleChangeInterceptor not protected against CSRF - #20736 StringToLocaleConverter should allow BCP 47 values - #22048 StringUtils.parseLocaleString parses invalid locales successfully  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b3d6283d7d36331eb0223108bb12769ede29c1eb, https://github.com/spring-projects/spring-framework/commit/88e4006790dccbabc0ee4448a0b70c6912584818","closed","type: enhancement,","spring-projects-issues","2018-04-07T20:29:54Z","2019-01-11T16:28:50Z"
"","21416","Subclass-resolved generic return type declarations for handler methods [SPR-16877]","**[Daniel Theuke](https://jira.spring.io/secure/ViewProfile.jspa?name=st-ddt)** opened **[SPR-16877](https://jira.spring.io/browse/SPR-16877?redirect=false)** and commented  If you have a generic AbstractController that specifies a method with a `@RequestMapping` and you don't overwrite it in the SpecificController then the GenericHttpMessageConverter won't get the actual data type that was returned from the method.  Due to this behavior it is impossible to use inheritance with generics for type dependent data formats such as CSV.     Provided data type: java.util.List\  Actual/Expected data type: java.util.List\  See the attached demo project for an easy way to reproduce.  ---  There is a workaround for that though, override all the inherited methods in the SpecificController and just delegate to super.     `@Override` public List\ getList() {      return super.getList(); }     However this is easy to forget, hard to spot and just adds plenty of noise to the controllers.  ---  I haven't made any recent tests with Spring 4.x, but IIRC that version is also affected.  ---  **Affects:** 5.0.6  **Attachments:** - [demo.zip](https://jira.spring.io/secure/attachment/25735/demo.zip) (_3.93 kB_)  **Issue Links:** - #19944 Revise generic type handling in GsonHttpMessageConverter (_**""duplicates""**_) - #15682 Enable REST controller method parameter annotations on an interface  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b915e42c387195ed956fd908602094139148aac3","closed","type: enhancement,","spring-projects-issues","2018-05-27T21:39:05Z","2019-01-13T04:41:25Z"
"","21742","Support both filters and views in AbstractJackson2HttpMessageConverter [SPR-17209]","**[Daniel Raniz Raneland](https://jira.spring.io/secure/ViewProfile.jspa?name=raniz)** opened **[SPR-17209](https://jira.spring.io/browse/SPR-17209?redirect=false)** and commented  Currently, if you set a view class on the _MappingJacksonValue_ it will pick that and ignore any filter provider.  Both of these could be supported by changing:  ```java ObjectWriter objectWriter; if (serializationView != null) { 	objectWriter = this.objectMapper.writerWithView(serializationView); } else if (filters != null) { 	objectWriter = this.objectMapper.writer(filters); } else { 	objectWriter = this.objectMapper.writer(); } if (javaType != null && javaType.isContainerType()) { 	objectWriter = objectWriter.forType(javaType); } ```  into  ```java ObjectWriter objectWriter = this.objectMapper.writer(); if (filters != null) {     objectWriter = objectWriter.with(filters); } if (serializationView != null) {     objectWriter = objectWriter.withView(serializationView); } if (javaType != null && javaType.isContainerType()) {     objectWriter = objectWriter.forType(javaType); } ```  We're using version 4.3.17, but as far as I can tell (by looking at  [GitHub](https://github.com/spring-projects/spring-framework/blob/83faee67d5b9e4c247d8cec3f151f030a7d00d3d/spring-web/src/main/java/org/springframework/http/converter/json/AbstractJackson2HttpMessageConverter.java#L272)) this is still the case for 5.0.  ---  **Affects:** 4.3.17  **Issue Links:** - #11815 Integrate Jackson `@JsonView` - #17187 Support Jackson `@JsonFilter`  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1940, and commits https://github.com/spring-projects/spring-framework/commit/a44fe4cbe4e2f02260f0dd5b14db6fd390b74e22, https://github.com/spring-projects/spring-framework/commit/03f1920106456c76ceddcb7fd486345a4d0de0bb, https://github.com/spring-projects/spring-framework/commit/069704f4a03f8b142d68695d0d1292096d069d6a  **Backported to:** [4.3.19](https://github.com/spring-projects/spring-framework/milestone/168?closed=1)","closed","type: enhancement,","spring-projects-issues","2018-08-23T13:49:08Z","2019-01-13T04:27:03Z"
"","21470","Unable to use Kotlin enums with @Validated beans [SPR-16931]","**[Daniel Jones](https://jira.spring.io/secure/ViewProfile.jspa?name=jonesd9)** opened **[SPR-16931](https://jira.spring.io/browse/SPR-16931?redirect=false)** and commented  I have a configuration properties kotlin class with a kotlin enum property. If the class is annotated with `@Validated` an exception occurs in hibernate-validator's `ParameterMetadata` class due to an `IndexOutOfBoundsException`.  This seems to happen due to the underlying `ParameterNameDiscoverer`, `KotlinReflectionParameterNameDiscoverer`.  I think this is due to the validator class expecting a 2-parameter constructor (name, ordinal) but `KotlinReflectionParameterNameDiscoverer` returns an empty array.  Example configuration properties class:  ```java @ConfigurationProperties(""my.prefix"") @Validated data class MyProperties(                 var enumProp: MyEnum = MyEnum.ONE  ) {     enum class MyEnum {         ONE, TWO     } }  ```    ---  **Affects:** 5.0.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2c5a1af236e6c90460b2279fd0a871d0fc6c9d6e, https://github.com/spring-projects/spring-framework/commit/73db2081cd734ae6f26b84b10e8a5049631f7b53  **Backported to:** [5.0.11](https://github.com/spring-projects/spring-framework/milestone/192?closed=1)","closed","in: core,","spring-projects-issues","2018-06-11T15:48:06Z","2018-10-29T11:07:57Z"
"","21785","Object[] bean becomes Object[][] when passed to another bean [SPR-17252]","**[Daniel Czosnek](https://jira.spring.io/secure/ViewProfile.jspa?name=daczczcz)** opened **[SPR-17252](https://jira.spring.io/browse/SPR-17252?redirect=false)** and commented  I have a simple config class:  ```java @Configuration public class Config {    @Bean    public String string(@Qualifier(""testyTest"") Object[] objects){       return Arrays.toString(objects);    }    @Bean    public Object[] testyTest() {       return null;    } } ```  And a class that uses this config:     ```java public class Test {    public static void main(String[] args) {       AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(Config.class);       Object[] o = context.getBean(Object[].class);       System.out.println(Arrays.toString(o));       String s = context.getBean(String.class);       System.out.println(s);    } } ```     The `String` being printed is different from the `Object[]`:  > [] >  > [[Ljava.lang.Object;@1283bb96]  It turns out, that the `@Bean` that returns `String is receiving an Object[1][] array which has an Object[0] array as its sole element (despite using @Qualifier`). However, `context.getBean(Object[].class)` returns `Object[0]` correctly.   ---  **Affects:** 5.0.8","open","in: core,","spring-projects-issues","2018-09-07T09:36:57Z","2019-01-11T14:13:11Z"
"","21503","Trailing slashes in UriTemplate or request URI cause matching errors [SPR-16965]","**[Daniel Botero](https://jira.spring.io/secure/ViewProfile.jspa?name=dboterov)** opened **[SPR-16965](https://jira.spring.io/browse/SPR-16965?redirect=false)** and commented  When the UriTemplate and the requested URL are not exactly the same (specifically when one of them has a trailing slash) the match/matches gives wrong results, as show below:  ``` Case 1: All have trailing slashes Template:	/service/resource/{param1}/{param2}/ URL:		/service/resource/123456/30005340/ Matches:	true Match:		{param1=123456, param2=30005340} ------------------------  Case 2: No trailing slashes Template:	/service/resource/{param1}/{param2} URL:		/service/resource/123456/30005340 Matches:	true Match:		{param1=123456, param2=30005340} ------------------------  Case 3: Only UriTemplate has trailing slash Template:	/service/resource/{param1}/{param2}/ URL:		/service/resource/123456/30005340 Matches:	false Match:		{} ------------------------  Case 4: Only URL has trailing slash Template:	/service/resource/{param1}/{param2} URL:		/service/resource/123456/30005340/ Matches:	true Match:		{param1=123456/30005340, param2=} ------------------------ ```  The strangest case is   ---  **Affects:** 4.3.12","closed","status: declined,","spring-projects-issues","2018-06-20T19:47:30Z","2019-01-12T16:21:03Z"
"","21160","EmbeddedDatabaseBuilder needs more flexibility [SPR-16619]","**[Dan Lipofsky](https://jira.spring.io/secure/ViewProfile.jspa?name=dlipofsky)** opened **[SPR-16619](https://jira.spring.io/browse/SPR-16619?redirect=false)** and commented  `H2EmbeddedDatabaseConfigurer` is not public or protected so I can't extend it, and even if I could `EmbeddedDatabaseBuilder` does not have a pass-through method to set the configurer on the underlying `EmbeddedDatabaseFactory`.  All I really want to do is change the URL flags in `H2EmbeddedDatabaseConfigurer` but there is no way to do it.  Please please add a pass-through method to the builder to set the configurer on the factory and also make the existing configures public.   ---  **Affects:** 4.3.13, 5.0.4","open","type: enhancement,","spring-projects-issues","2018-03-20T15:20:49Z","2018-06-17T11:47:45Z"
"","21700","lookup() from @Resource No Longer Protected [SPR-17164]","**[Dan Lamet](https://jira.spring.io/secure/ViewProfile.jspa?name=dlamet)** opened **[SPR-17164](https://jira.spring.io/browse/SPR-17164?redirect=false)** and commented  CommonAnnotationBeanPostProcessor performs a lookup on the annotation in question.  Part of that is a resource.lookup() call to determine the value.  Spring 4 does this safely while Spring 5 does not.     ```java // Spring 4 private static final Method lookupAttribute = ClassUtils.getMethodIfAvailable(Resource.class, ""lookup"");         ...  this.lookupType = resourceType; String lookupValue = (lookupAttribute != null ? (String) ReflectionUtils.invokeMethod(lookupAttribute, resource) : null);  this.mappedName = (StringUtils.hasLength(lookupValue) ? lookupValue : resource.mappedName()); ```  ```java // Spring 5   this.lookupType = resourceType; this.lookupType = resourceType;   String lookupValue = resource.lookup();   this.mappedName = (StringUtils.hasLength(lookupValue) ? lookupValue : resource.mappedName()); ```  The lookup() call fails in both cases, but Spring 4 recovers and some followup code finds the value.  Restore the robust invocation used in Spring 4.      ---  **Affects:** 5.0.8","closed","status: declined,","spring-projects-issues","2018-08-10T18:35:27Z","2019-01-12T16:20:56Z"
"","21385","Java 9: Avoid illegal reflective access warning for SpEL method reference [SPR-16845]","**[Cristian Vasile Mocanu](https://jira.spring.io/secure/ViewProfile.jspa?name=cvmocanu)** opened **[SPR-16845](https://jira.spring.io/browse/SPR-16845?redirect=false)** and commented  When running spring under Java 9 (build 9.0.4+11), I get the following in the console (running with `--illegal-access=warn`):  ``` WARNING: Illegal reflective access by org.springframework.util.ReflectionUtils (file:/home/cvmocanu/.m2/repository/org/springframework/spring-core/5.0.6.RELEASE/spring-core-5.0.6.RELEASE.jar) to method sun.nio.fs.UnixPath.toAbsolutePath() WARNING: Illegal reflective access by org.springframework.util.ReflectionUtils (file:/home/cvmocanu/.m2/repository/org/springframework/spring-core/5.0.6.RELEASE/spring-core-5.0.6.RELEASE.jar) to method sun.nio.fs.UnixPath.toString() ```  Running with `--illegal-access=debug`, reveals the stacktrace:  ``` WARNING: Illegal reflective access by org.springframework.util.ReflectionUtils (file:/home/cvmocanu/.m2/repository/org/springframework/spring-core/5.0.6.RELEASE/spring-core-5.0.6.RELEASE.jar) to method sun.nio.fs.UnixPath.toAbsolutePath() 	at org.springframework.util.ReflectionUtils.makeAccessible(ReflectionUtils.java:472) 	at org.springframework.expression.spel.support.ReflectiveMethodExecutor.execute(ReflectiveMethodExecutor.java:112) 	at org.springframework.expression.spel.ast.MethodReference.getValueInternal(MethodReference.java:129) 	at org.springframework.expression.spel.ast.MethodReference.getValueInternal(MethodReference.java:85) 	at org.springframework.expression.spel.ast.CompoundExpression.getValueRef(CompoundExpression.java:57) 	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:87) 	at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:120) 	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:242) 	at org.springframework.context.expression.StandardBeanExpressionResolver.evaluate(StandardBeanExpressionResolver.java:161) 	at org.springframework.beans.factory.support.AbstractBeanFactory.evaluateBeanDefinitionString(AbstractBeanFactory.java:1452) 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.doEvaluate(BeanDefinitionValueResolver.java:266) 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.evaluate(BeanDefinitionValueResolver.java:223) 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:191) 	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:636) 	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:148) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1274) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1131) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:541) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:501) 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBean(BeanDefinitionValueResolver.java:312) 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:124) 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveManagedList(BeanDefinitionValueResolver.java:401) 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:159) 	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:636) 	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:148) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1274) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1131) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:541) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:501) 	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:317) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:315) WARNING: Illegal reflective access by org.springframework.util.ReflectionUtils (file:/home/cvmocanu/.m2/repository/org/springframework/spring-core/5.0.6.RELEASE/spring-core-5.0.6.RELEASE.jar) to method sun.nio.fs.UnixPath.toString() 	at org.springframework.util.ReflectionUtils.makeAccessible(ReflectionUtils.java:472) 	at org.springframework.expression.spel.support.ReflectiveMethodExecutor.execute(ReflectiveMethodExecutor.java:112) 	at org.springframework.expression.spel.ast.MethodReference.getValueInternal(MethodReference.java:129) 	at org.springframework.expression.spel.ast.MethodReference.access$000(MethodReference.java:49) 	at org.springframework.expression.spel.ast.MethodReference$MethodValueRef.getValue(MethodReference.java:347) 	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:88) 	at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:120) 	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:242) 	at org.springframework.context.expression.StandardBeanExpressionResolver.evaluate(StandardBeanExpressionResolver.java:161) 	at org.springframework.beans.factory.support.AbstractBeanFactory.evaluateBeanDefinitionString(AbstractBeanFactory.java:1452) 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.doEvaluate(BeanDefinitionValueResolver.java:266) 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.evaluate(BeanDefinitionValueResolver.java:223) 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:191) 	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:636) 	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:148) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1274) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1131) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:541) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:501) 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBean(BeanDefinitionValueResolver.java:312) 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:124) 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveManagedList(BeanDefinitionValueResolver.java:401) 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:159) 	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:636) 	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:148) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1274) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1131) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:541) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:501) 	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:317) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:315) ```  The warning comes from this SpEL expression:  ```  ```  where propertiesFilePath is of type `java.nio.file.Path`.   ---  **Affects:** 5.0.6","closed","type: enhancement,","spring-projects-issues","2018-05-18T14:59:29Z","2018-11-19T12:16:21Z"
"","21375","Unable to inject string /map in xml bean [SPR-16835]","**[CRISTIAN LORENZETTO](https://jira.spring.io/secure/ViewProfile.jspa?name=publicocean1)** opened **[SPR-16835](https://jira.spring.io/browse/SPR-16835?redirect=false)** and commented  I cant inject a string in a bean using xml. Actually i m using constructor(Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'java.lang.String' available: expected at least 1 bean which qualifies ....).   Some developers use `@Value` annotation but there is 2 problems.  1) if i use `@Value` i suppose to use my component forcely with spring. I can have a indipendent component indipendent by injection framework. Why forcely to write code in the source related to spring?   2) @ Value writes in the code the label to use . But a class can have multiple instance , for each one to have a different value. so it is wrong conceptually if there is no other way    3) if i create a second bean with name equals to the string value , the first bean is created correctly accepting that string. It is seams really another bug   4) strangelly using index in constructor now works            --- No further details from [SPR-16835](https://jira.spring.io/browse/SPR-16835?redirect=false)","open","in: core,","spring-projects-issues","2018-05-17T15:54:47Z","2021-11-12T12:17:47Z"
"","21358","Optional it is not working with generic context object  [SPR-16818]","**[CRISTIAN LORENZETTO](https://jira.spring.io/secure/ViewProfile.jspa?name=publicocean1)** opened **[SPR-16818](https://jira.spring.io/browse/SPR-16818?redirect=false)** and commented  i have a method like   `@RequestMapping`(value=""/"",method = RequestMethod.GET) public String welcome(final HTTPRequesterContext ctx, `@Nullable` ISecurityContext sc,  Model m, WebRequest reqq, HttpServletRequest req1)  argument sc is null(no object) some cases. But when it is is null it create exception.   I tried also to use Optional< ISecurityContext> but there is another issue because  ISecurityContext is a interface and exception tell there is no constructor.     --- No further details from [SPR-16818](https://jira.spring.io/browse/SPR-16818?redirect=false)","closed","status: invalid,","spring-projects-issues","2018-05-13T17:58:50Z","2019-01-12T05:18:50Z"
"","21483","Doc: ThreadPoolTaskExecutor's defaults vs setting queueCapacity for common pool scenarios [SPR-16944]","**[Constantino Cronemberger](https://jira.spring.io/secure/ViewProfile.jspa?name=ccronemberger)** opened **[SPR-16944](https://jira.spring.io/browse/SPR-16944?redirect=false)** and commented  According to ThreadPoolExecutor Javadoc:  ""If there are more than corePoolSize but less than maximumPoolSize threads running, a new thread will be created only if the queue is full.""  In the class ThreadPoolTaskExecutor the default values are: 1 for the corePoolSize and Integer.MAX_VALUE for maxPoolSize and queueCapacity.  This means that a second thread will be created only when we have MAX_VALUE elements in the queue. This is is not reasonable.  I think queueCapacity should not have a default value.  ---  **Issue Links:** - #21484 Doc: AsyncConfigurer causes dependencies to be created early  **Backported to:** [4.3.19](https://github.com/spring-projects/spring-framework/milestone/168?closed=1)","closed","in: core,","spring-projects-issues","2018-06-15T12:00:43Z","2019-01-11T15:41:13Z"
"","21782","org.springframework.http.server.reactive.ServletHttpHandlerAdapter being a servlet implementation doesn't have default constructor which cause problem on some servers(WebLogic) [SPR-17249]","**[codecracker2014](https://jira.spring.io/secure/ViewProfile.jspa?name=codecracker2014)** opened **[SPR-17249](https://jira.spring.io/browse/SPR-17249?redirect=false)** and commented  org.springframework.http.server.reactive.ServletHttpHandlerAdapter being a servlet implementation doesn't have default constructor which cause problem on some servers(WebLogic). As container tries to create new instance of servlet with default constructor which not available in case of ServletHttpHandlerAdapter.      Servlet api used: 3.1.0  Server: Weblogic 12.2.1.0.0   --- No further details from [SPR-17249](https://jira.spring.io/browse/SPR-17249?redirect=false)","closed","status: invalid,","spring-projects-issues","2018-09-06T13:09:10Z","2019-01-12T05:18:14Z"
"","21849","TransactionalEventListener [SPR-17316]","**[clembo590](https://jira.spring.io/secure/ViewProfile.jspa?name=clembo590)** opened **[SPR-17316](https://jira.spring.io/browse/SPR-17316?redirect=false)** and commented  When using  `@TransactionalEventListener`(phase = TransactionPhase.AFTER_COMMIT)  public void notificationOnCommit(Data myDataSaved){}  it is possible to receive the event even though the data has not been saved successfully.  `I posted an example with the use of normal ""``@EventListener`""  --> the behaviour is ""as expected"" because of the use of ""TransactionSynchronizationManager.isActualTransactionActive()""     my guess is that when using ""`TransactionalEventListener""`  it does not work correctly because in the class ""ApplicationListenerMethodTransactionalAdapter"" the method ""onApplicationEvent"" is calling ""TransactionSynchronizationManager.isSynchronizationActive()"" instead of  ""TransactionSynchronizationManager.isActualTransactionActive()""      ---  **Affects:** 5.0.8  **Attachments:** - [com.cbo.transac.zip](https://jira.spring.io/secure/attachment/26035/com.cbo.transac.zip) (_72.56 kB_)","closed","status: declined,","spring-projects-issues","2018-10-01T08:43:34Z","2019-01-12T16:20:52Z"
"","21860","BasicAuthorizationInterceptor should add its header conditionally [SPR-17326]","**[Christopher Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=w_c_smith)** opened **[SPR-17326](https://jira.spring.io/browse/SPR-17326?redirect=false)** and commented  `BasicAuthorizationInterceptor` made including auth headers in a `RestTemplate` much easier, but it has the downside of adding its header unconditionally. This means that there's no reliable way for the consumer to override the header for a particular request (such as one made using delegated credentials).  I suggest making the `add` operation conditional on the `Authorization` header's not already being present in the request headers.  ---  **Affects:** 4.3.16  **Issue Links:** - #21452 Create HttpHeaders.setBasicAuth(String username, String password)","closed","type: enhancement,","spring-projects-issues","2018-10-03T08:35:32Z","2019-01-11T14:16:10Z"
"","21821","Remove/overwrite header in MockHttpServletRequest [SPR-17288]","**[Christopher Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=w_c_smith)** opened **[SPR-17288](https://jira.spring.io/browse/SPR-17288?redirect=false)** and commented  `MockHttpServletRequest` supports adding arbitrary headers, but subsequent calls to `addHeader` always append the new values. While the internal `doAddHeaderValue` takes a boolean to specify replacement, it's not visible externally. When using the class for testing, it is often useful to construct it with the usual headers in a `setup` method, but there's no way to then overwrite a header per-test.  It would be useful to be able to remove an existing header from the request (either to leave it missing or to then replace it with a new value).  ---  **Affects:** 4.3.19  **Issue Links:** - #21828 Support for removeHeader in MockHttpServletRequest","closed","type: enhancement,","spring-projects-issues","2018-09-19T06:05:02Z","2019-01-11T14:12:35Z"
"","21388","HierarchicalUriComponents#toUri should encode if necessary [SPR-16848]","**[Christopher Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=w_c_smith)** opened **[SPR-16848](https://jira.spring.io/browse/SPR-16848?redirect=false)** and commented  The `HierarchicalUriComponents` class keeps track of whether its components are URL-encoded with a property. The `#toUri()` method, which is documented upstream as simply ""returns a URI"", performs a check to see whether the components are already encoded, but if they aren't, it returns a new `URI` instance built by passing the still-unencoded components (specifically `path` and `query`); in the case where encoding is in fact needed, this results in returning an invalid `URI`.  The standard usage pattern appears to be to have the client be sure to call `#encode()` between `builder.build()` and `#toUri()`, but this requirement is not clearly documented in the API, and correct behavior can be ensured by always using encoded path and query, since a correct `URI` is always encoded (i.e., there is no case where `build(false).toUri()` produces correct output).  In `#toUri()` (and I think `#toUriString()`), the path and query should be encoded before passing to `new URI` (or concatenated to the string) if `!this.encoded`.   ---  **Affects:** 4.3.16","closed","status: declined,","spring-projects-issues","2018-05-21T04:23:05Z","2019-01-12T16:21:16Z"
"","21576","com.jayway.jsonpath project moved to io.restassured.jsonpath [SPR-17038]","**[Christopher Barham](https://jira.spring.io/secure/ViewProfile.jspa?name=chas66)** opened **[SPR-17038](https://jira.spring.io/browse/SPR-17038?redirect=false)** and commented  ```xml      com.jayway.jsonpath     json-path     2.4.0  ```  has moved to:  ```xml       io.rest-assured     json-path     3.1.0  ```     but `spring-test` relies on the old maven project coordinates to:  https://github.com/spring-projects/spring-framework/blob/master/spring-test/src/main/java/org/springframework/test/util/JsonPathExpectationsHelper.java#L22   ---  **Affects:** 5.0.7  **Reference URL:** https://github.com/spring-projects/spring-framework/blob/master/spring-test/src/main/java/org/springframework/test/util/JsonPathExpectationsHelper.java#L22","closed","status: invalid,","spring-projects-issues","2018-07-13T13:15:28Z","2019-06-11T11:36:31Z"
"","21153","[docs] disarranged table in section View Technologies / Freemarker [SPR-16612]","**[Christoph Strebin](https://jira.spring.io/secure/ViewProfile.jspa?name=cstrebin)** opened **[SPR-16612](https://jira.spring.io/browse/SPR-16612?redirect=false)** and commented  In 5.0.4 documentation, table ""Table of macro definitions"", section View Technologies / Freemarker, the ""VTL definition"" column has been deleted. Now the table is disarranged. E.g. ""message (output a string from a resource bundle based on the code parameter)"" was the ""macro"" column in the first data row in [4.3.9](https://docs.spring.io/spring/docs/4.3.9.RELEASE/spring-framework-reference/html/view.html#views-form-macros), now it became the header of the third column.  While the definition of priority trivial (""... misaligned text"") may be appropriate here, I chose minor because this makes it barely understandable, so it's not just cosmetic.   ---  **Affects:** 5.0.4  **Reference URL:** https://docs.spring.io/spring/docs/5.0.4.RELEASE/spring-framework-reference/web.html#mvc-views-form-macros  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/578c04ea17cb3ddd645725284b3392f37ce4661e","closed","type: documentation,","spring-projects-issues","2018-03-19T10:34:00Z","2018-04-03T20:34:26Z"
"","21433","Introduce Stream support in PropertySources and PropertyValues [SPR-16894]","**[Christoph Dreis](https://jira.spring.io/secure/ViewProfile.jspa?name=christoph.dreis)** opened **[SPR-16894](https://jira.spring.io/browse/SPR-16894?redirect=false)** and commented  Hi,  while doing a [PR ](https://github.com/spring-projects/spring-boot/pull/13343/files)in Spring-Boot polishing some stream creations, I figured that I could do even more cleanups if Spring-Framework would deliver a default implementation for stream support in PropertySources - providing an imho more modern way of interacting with them. E.g. something like that:  ```java  /**  * Returns a sequential {@code Stream} for the {@link PropertySource objects}  * contained in this instance.  */ default Stream> stream() {  return StreamSupport.stream(spliterator(), false); } ```     Let me know what you think of the proposal and the attached PR. I'd be happy if the pull request is accepted.  Cheers,  Christoph  ---  **Affects:** 5.0.6  **Issue Links:** - #16046 ObjectProvider iterable/stream access for ""beans of type"" resolution in `@Bean` methods - #21511 Support for Supplier as a deferred bean creation  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1847, and commits https://github.com/spring-projects/spring-framework/commit/d8c7270c000de59a9227c40b701347c847f8f815","closed","type: enhancement,","spring-projects-issues","2018-06-03T11:42:42Z","2019-01-13T04:40:23Z"
"","21208","Reduce ClassUtils.forName overhead (in particular for annotation introspection purposes) [SPR-16667]","**[Christoph Dreis](https://jira.spring.io/secure/ViewProfile.jspa?name=christoph.dreis)** opened **[SPR-16667](https://jira.spring.io/browse/SPR-16667?redirect=false)** and commented  Hi,  while analyzing the calls to **ClassUtils.forName()** in my Spring-Boot app I noticed that there might be an opportunity to optimize some more calls of commonly known classes. E.g. when looking for calls to Java classes I saw the following distribution for a total of 13000 calls (roughly 3000 coming from Java classes):  |Class|Calls| |:---|:---| |java.lang.Cloneable|1168| |java.io.Serializable|790| |java.lang.String|473| |java.lang.Enum|292| |java.util.List|150| |java.lang.Object|82| |java.lang.Long|74| |java.util.Map|52| |java.util.Collection|52| |java.lang.Class|41| |java.util.Optional|39| |java.lang.Integer|32| |...|...|  As you notice especially **Serializable** and **Cloneable** take up a big portion here, which are missing from the common class cache. Also **Enum** and the Collection framework interfaces contribute to the calls.  An isolated JMH benchmark for Serializable shows the following results: |Benchmark|Mode|Cnt|Score|Error|Units| |:---|:---|:---|:---|:---|:---| |MyBenchmark.testNew|thrpt|10|102632276,261|± 37687656,076|ops/s| |MyBenchmark.testNew: gc.alloc.rate|thrpt|10|0,001|±        0,001|MB/sec| |MyBenchmark.testNew: gc.alloc.rate.norm|thrpt|10|? 10??| |B/op| |MyBenchmark.testOld|thrpt|10|1072135,584|±    38640,911|ops/s| |MyBenchmark.testOld:·gc.alloc.rate|thrpt|10|138,990|± 5,010|MB/sec| |MyBenchmark.testOld:·gc.alloc.rate.norm|thrpt|10|136,001|±        0,001|B/op|  I understand that drawing the line is a difficult thing to do - in fact I had the same problem - but I'd argue we could add the Collection interfaces, Enum and Optional and the interfaces contained in the **javaLanguageInterfaces** field to the common class cache. That seems like a reasonable collection of commonly known classes.  I'd be happy to hear your opinion on the attached PR.  Cheers, Christoph  ---  **Affects:** 4.3.14, 5.0.4  **Issue Links:** - #18199 Performance regression on startup (in particular in AnnotationUtils) - #16341 Metadata reading should never use ASM for java.* and javax.* types (in particular on JDK 8) - #20869 CachedIntrospectionResults should use BeanInfoFactory when introspecting implemented interfaces - #21216 Comprehensively cache annotated methods for interfaces and superclasses - #21472 Avoid unnecessary synthesizable annotation processing  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1761, and commits https://github.com/spring-projects/spring-framework/commit/4da27c2a734e89bd44f5fcadacdce9f1a830d396, https://github.com/spring-projects/spring-framework/commit/5d54adfb9a3582d1d89f5979c514601fe787685b, https://github.com/spring-projects/spring-framework/commit/22a8a668c94381ec220eb526aae1bbcab87238d0, https://github.com/spring-projects/spring-framework/commit/7a8d41e5d6d4ac85d6d74d80c311800d78e0a721  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","type: enhancement,","spring-projects-issues","2018-03-29T15:43:03Z","2019-01-11T15:05:55Z"
"","21163","Use Collection.removeIf() where possible [SPR-16622]","**[Christoph Dreis](https://jira.spring.io/secure/ViewProfile.jspa?name=christoph.dreis)** opened **[SPR-16622](https://jira.spring.io/browse/SPR-16622?redirect=false)** and commented  Hi,  I just noticed some places in the code where we could make use of **Collection.removeIf()** in order to clean things up a bit.  Let me know what you think of the attached PR.  Cheers, Christoph   ---  **Affects:** 5.0.4  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1747","closed","in: core,","spring-projects-issues","2018-03-22T08:24:23Z","2018-04-03T20:34:25Z"
"","21822","Reduce the use of mutable objects [SPR-17289]","**[Christian Helmbold](https://jira.spring.io/secure/ViewProfile.jspa?name=christian.helmbold)** opened **[SPR-17289](https://jira.spring.io/browse/SPR-17289?redirect=false)** and commented  The Spring Framework makes use of mutable objects in many places, but that hinders comprehensiblity and violates the principle of least astonishment. This is a general concern, but a concrete example is [DefaultConversionService#addCollectionConverters](https://github.com/spring-projects/spring-framework/blob/8aa6e5bfea2c7314deaa1b432554e9e914b09ee7/spring-core/src/main/java/org/springframework/core/convert/support/DefaultConversionService.java#L109).  This is closely related to the use of mutable objects in Spring in general and methods like `afterPropertiesSet` in particular. I suggest to construct objects in one go and pass everything to the constructor.  This is probably a bigger, fundamental issue, but I want to raise it, because I encountered different situations where the behavior of Spring was hard to understand and led to wasted hours of debugging. I hope this issue can be a starting point to move Spring to more immutability and one-step object construction -- and, in the end, to a cleaner, more comprehensible framework.   ---  **Affects:** 5.0.8","open","in: core,","spring-projects-issues","2018-09-19T07:47:16Z","2019-01-11T14:12:28Z"
"","21651","SchedulerAccessor needs to catch primary key violation on reschedule (due to Quartz race condition) [SPR-17114]","**[Christian Greene](https://jira.spring.io/secure/ViewProfile.jspa?name=greenechri)** opened **[SPR-17114](https://jira.spring.io/browse/SPR-17114?redirect=false)** and commented  Related to #6506. While ""rescheduling"" a Quartz job's trigger within cluster of applications that are starting, Quartz can throw a Primary Key Violation error while trying to add a trigger that some other node in the cluster already added. A catch-and-ignore was put into `ScheduleAccessor#addTriggerToScheduler` to solve the #6506 error, however it only catches primary key violations when `Scheduler.scheduleJob` is called but doesn't cover when `Scheduler.rescheduleJob` is called (if the job's `triggerExists)`.  The error causes the context to fail to load and thus the application fails to start. Can the `try-catch` be expanded to wrap the entire `if (triggerExists)` else clause?  Stack trace attached in log file.     ---  **Affects:** 5.0.6  **Reference URL:** #6506  **Attachments:** - [AdminServer_snippet.log](https://jira.spring.io/secure/attachment/25793/AdminServer_snippet.log) (_249.46 kB_)  **Issue Links:** - #6506 SchedulerFactoryBean has race condition in Quartz cluster  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ecf6c381be8c4aadf4c393a5da81d63dd9689ac6, https://github.com/spring-projects/spring-framework/commit/7da02fb7e3352e3e8d551f58d24574a5248f0eba, https://github.com/spring-projects/spring-framework/commit/fa97aab8be10df62cc13bb799604e15bc94b6a61  **Backported to:** [4.3.19](https://github.com/spring-projects/spring-framework/milestone/168?closed=1)","closed","in: core,","spring-projects-issues","2018-08-01T20:53:03Z","2019-01-14T04:30:16Z"
"","21507","FluxSink emitting does not happen when next called during Flux create [SPR-16969]","**[Chris Roberts](https://jira.spring.io/secure/ViewProfile.jspa?name=springalong)** opened **[SPR-16969](https://jira.spring.io/browse/SPR-16969?redirect=false)** and commented  Not sure if an issue, or I'm misunderstanding webflux operation. I'm trying to create a Flux\ which is used by the client when data is available, ie: streamed string by string  Spring boot 2.0.1, using chrome  http://localhost:8080/demo -> Flux stream , streams the results  http://localhost:8080/demo2 -> Flux create, streams the results     Spring boot 2.0.3:  http://localhost:8080/demo -> Flux stream , streams the results  http://localhost:8080/demo2 -> Flux create, does not stream but waits for the all results     The reactor docs say:   ""The more advanced form of programmatic creation of a `Flux`, `create` can work asynchronously or synchronously and is suitable for multiple emissions per round.""                     ---  **Affects:** 5.0.7  **Reference URL:** http://projectreactor.io/docs/core/release/reference/  **Attachments:** - [DemoController.java](https://jira.spring.io/secure/attachment/25749/DemoController.java) (_1.15 kB_) - [pom.xml](https://jira.spring.io/secure/attachment/25750/pom.xml) (_1.35 kB_)","closed","status: declined,","spring-projects-issues","2018-06-22T07:34:56Z","2019-01-12T16:21:01Z"
"","21536","Beans with @EventListener gets instantiated when event is sent even if the beans are not used [SPR-16998]","**[Chris K.](https://jira.spring.io/secure/ViewProfile.jspa?name=kamuffe)** opened **[SPR-16998](https://jira.spring.io/browse/SPR-16998?redirect=false)** and commented  We use Spring in context with Vaadin 8.2 with the Spring addon.  Each View is a Spring managed bean. We have e.g. the following views:  ```java @SpringView( name = CalendarView.VIEW_NAME ) public class AdminCalendarView {   @PostConstruct   private void postConstruct()   {     ...   }    @EventListener   public void toggleLeftZone( UpdateZoneEvent event )   {     ...   } }  ```     and     ```java @SpringView( name = CalendarView.VIEW_NAME ) public class UserCalendarView {    @PostConstruct   private void postConstruct()   {     ...   }    @EventListener   public void toggleLeftZone( UpdateZoneEvent event )   {     ...   } }  ```     SpringView:  ```java @Target({ java.lang.annotation.ElementType.TYPE }) @Retention(java.lang.annotation.RetentionPolicy.RUNTIME) @Documented @SpringComponent @ViewScope public @interface SpringView  {   ... }  ```  ViewScope:  ```java @Scope(ViewScopeImpl.VAADIN_VIEW_SCOPE_NAME) //VAADIN_VIEW_SCOPE_NAME = ""vaadin-view""; @Target({ ElementType.TYPE, ElementType.METHOD }) @Retention(RetentionPolicy.RUNTIME) @Documented public @interface ViewScope {  }  ```  Note: * these are 2 different views based on the logged in user with corresponding permissions * These views are NO singeltons but Vaadin Session Scope     When a user (NOT ADMIN) is logged in and navigates to the UserCalendarView it is instantiated by Spring. If the UpdateZoneEvent raises this View gets notified.     BUT: Also AdminCalendarView gets instantiated and receives this event.  This is not intended since the admin View MUST NOT created in a non admin user session. This is a huge performance and security problem since beans are instantiated which are not used in a particular session and therefore must not created in a user session.     It is possible to receive this event (or any event) only for **already created beans**?     Thanks a lot for your help.   ---  **Affects:** 5.0.6  **Attachments:** - [demo.zip](https://jira.spring.io/secure/attachment/26065/demo.zip) (_67.97 kB_)","open","in: core,","spring-projects-issues","2018-07-03T08:49:16Z","2019-12-06T15:25:11Z"
"","21404","MvcResult-->mockResponse-->headers will lose a apart of  headers [SPR-16865]","**[chen](https://jira.spring.io/secure/ViewProfile.jspa?name=chengyan)** opened **[SPR-16865](https://jira.spring.io/browse/SPR-16865?redirect=false)** and commented  **my code(use apache shiro)**  !image-2018-05-23-16-50-20-505.png!  **headers Info**  !image-2018-05-23-16-51-17-444.png!  **view in chrome**  **!image-2018-05-23-16-54-26-465.png!**  **this problem lead to we can't test after login**   ---  **Affects:** 5.0.6  **Attachments:** - [image-2018-05-23-16-50-20-505.png](https://jira.spring.io/secure/attachment/25729/image-2018-05-23-16-50-20-505.png) (_44.30 kB_) - [image-2018-05-23-16-51-17-444.png](https://jira.spring.io/secure/attachment/25728/image-2018-05-23-16-51-17-444.png) (_20.08 kB_) - [image-2018-05-23-16-54-26-465.png](https://jira.spring.io/secure/attachment/25727/image-2018-05-23-16-54-26-465.png) (_19.31 kB_)","closed","status: declined,","spring-projects-issues","2018-05-23T08:56:10Z","2019-01-12T16:21:15Z"
"","21662","Database migrations for Quartz scheduler is not working [SPR-17125]","**[Chandan Kumar](https://jira.spring.io/secure/ViewProfile.jspa?name=nrchandan)** opened **[SPR-17125](https://jira.spring.io/browse/SPR-17125?redirect=false)** and commented  Spring-boot's auto-configure for Quartz is failing at the data migration step. This appears to be either a fault of the SQL migration file or the ScriptUtils.splitSqlScript of the Spring-JDBC project. I think it might be the splitSQLScript method, since the SQL file seems to be working fine if run manually through MySQL CLI.  ScriptUtils:  https://github.com/spring-projects/spring-framework/blob/master/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ScriptUtils.java#L139  SQL Migration file:  https://github.com/quartz-scheduler/quartz/blob/master/quartz-core/src/main/resources/org/quartz/impl/jdbcjobstore/tables_mysql_innodb.sql  As a workaround, I have copied the migration to my project, which seems to be working fine.      --- No further details from [SPR-17125](https://jira.spring.io/browse/SPR-17125?redirect=false)","open","in: data,","spring-projects-issues","2018-08-06T09:59:12Z","2019-01-11T14:01:30Z"
"","21398","Security vulnerability fixes for CVE-2018-1270, CVE-2018-1273, CVE-2018-1271, CVE-2018-1274 [SPR-16859]","**[Chaitrali Talegaonkar](https://jira.spring.io/secure/ViewProfile.jspa?name=chaitrali)** opened **[SPR-16859](https://jira.spring.io/browse/SPR-16859?redirect=false)** and commented  CVE-2018-1270 CVE-2018-1273 CVE-2018-1271 (spring-messaging Spring Data Commons spring-webmvc)  Filenames: spring-expression-4.3.5 spring-webmvc-4.3.5  Following are jars/third party components : Spring-boot-starter-web-1.4.3 Spring-boot-starter-security-1.4.3 Spring-boot-starter-1.4.3 spring-context-4.3.5 foundation/db-impl spring-context-3.2.13 spring-webmvc-4.3.5 spring-cloud-starter-consul-discovery-1.0.0.RELEASE     We are seeing vulnerabilities for above components. Can you please let us know timelines for porting fixes for above CVEs in these(spring-messaging,Spring Data Commons,spring-webmvc) modules?   --- No further details from [SPR-16859](https://jira.spring.io/browse/SPR-16859?redirect=false)","closed","in: core,","spring-projects-issues","2018-05-22T09:45:50Z","2019-01-12T05:18:48Z"
"","21864","HeaderResultMatchers susceptible to slight variations in the date format [SPR-17330]","**[cfloersch](https://jira.spring.io/secure/ViewProfile.jspa?name=cfloersch)** opened **[SPR-17330](https://jira.spring.io/browse/SPR-17330?redirect=false)** and commented  So the server now appears to format HTTP date headers using a single or double digit DAY depending on the time of month. However, the HeaderResultMatchers.dateValue() still uses a two digit DAY zero padded if necessary when doing the matching.  This results in test failing 100% when run between the 1st and 9th of any given month.  Both dates should use the same format. Or better yet the matcher should operate on Date objects rather than formatted strings.  Example build failure  [ERROR] Failures: [ERROR] SimpleControllerTest.testGetCustomHeader:152 Response header 'Last-Modified' expected: but was:   ---  **Affects:** 5.0.9  **Attachments:** - [DateFailure.zip](https://jira.spring.io/secure/attachment/26049/DateFailure.zip) (_6.00 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b89cb20b1d63ce482444776e5544e549a4a1deeb, https://github.com/spring-projects/spring-framework/commit/658c7f99d7a2ce6a931bf6b0c61d662ca6f57afb  **Backported to:** [5.0.10](https://github.com/spring-projects/spring-framework/milestone/191?closed=1)","closed","type: enhancement,","spring-projects-issues","2018-10-03T18:43:19Z","2019-03-11T15:57:30Z"
"","21802","Route matching unit testing [SPR-17269]","**[Caleb Cushing](https://jira.spring.io/secure/ViewProfile.jspa?name=xenoterracide)** opened **[SPR-17269](https://jira.spring.io/browse/SPR-17269?redirect=false)** and commented  Problem statement, I write  ```java @Controller(""/api""} class Api {      @GetMapping(""/{id}}       String byId( long id ) {... } } ```  Then I test with MockMvc, or WebTestClient, the return is a 404, now is it a 404 because no route was matched, or because the ID wasn't found? layer spring security into this, and you'll find yourself asking, did I get that result because of  A, B, or C reasons.  What I'd like is a way to unit test a route match. does my request actually match the route I think it does. Does the route I think exists even exist? The only way I've come up with to do this is to inject mock services into my controllers and verify  method X is called. However I think the routing layer could have a more convenient way to be tested separately from the controller(s)   --- No further details from [SPR-17269](https://jira.spring.io/browse/SPR-17269?redirect=false)","closed","type: enhancement,","spring-projects-issues","2018-09-11T19:09:44Z","2018-10-12T20:13:00Z"
"","21695","Repeatable @Scope [SPR-17158]","**[Caleb Cushing](https://jira.spring.io/secure/ViewProfile.jspa?name=xenoterracide)** opened **[SPR-17158](https://jira.spring.io/browse/SPR-17158?redirect=false)** and commented  so one of the problems, I'm looking at with logging, is the idea, that a request doesn't imply a transaction, and a transaction doesn't imply a request. I'd like to have my scope eagerly instantiated if either begins, the ideally they would share that bean until the last scope ended. That might be hard though... might be easier to create a different bean for each scope.  ``` @Bean  @Scope(""transaction"")  @Scope(""request"")  static CloseableThreadContext.Instance requestContext(      @Value( ""${dex.environment}"" ) String env,      String hostname  )  {// spring will close      CloseableThreadContext.Instance ctx = CloseableThreadContext.put( ""env"", env );      ctx.put( ""hostname"", hostname );      return ctx;  } ```  ---  **Issue Links:** - #21694 eager `@Scoped` beans","open","in: core,","spring-projects-issues","2018-08-09T17:20:27Z","2019-01-13T04:30:30Z"
"","21694","eager @Scoped beans [SPR-17157]","**[Caleb Cushing](https://jira.spring.io/secure/ViewProfile.jspa?name=xenoterracide)** opened **[SPR-17157](https://jira.spring.io/browse/SPR-17157?redirect=false)** and commented  I tried this, but including the autowired `HttpServletRequest`  ```java @Bean @RequestScope static CloseableThreadContext.Instance requestContext(     @Value( ""${dex.environment}"" ) String env,     String hostname ) {// spring will close     CloseableThreadContext.Instance ctx = CloseableThreadContext.put( ""env"", env );     ctx.put( ""hostname"", hostname );     return ctx; } ```  was thinking that I could simply propagate the context with with it, I then tried adding `@Lazy(false)` to the definition, but it still didn't instantiate object until I fetched, and called a method on it.  I would like a way to say `@Eager` on scoped beans (note: this example has `@RequestScope` but I was also trying to do it with a registered/known working `SimpleTransactionScope` and `SimpleThreadScope`  I don't want that to be the default behavior for scoped beans, just an option to create them as soon as scope comes into being.  ---  **Issue Links:** - #21695 Repeatable `@Scope`","open","in: core,","spring-projects-issues","2018-08-09T17:15:49Z","2019-01-13T04:30:52Z"
"","21687","@Request scope ends before @ControllerAdvice has run [SPR-17150]","**[Caleb Cushing](https://jira.spring.io/secure/ViewProfile.jspa?name=xenoterracide)** opened **[SPR-17150](https://jira.spring.io/browse/SPR-17150?redirect=false)** and commented  I can try to create a boot project if needed. But here's what I've done. First we're using log4j2, and recently migrated, I noticed an error was being thrown, and according to it it was logged for a path that that error couldn't possibly have happened... so I looked into it further and realized that the `@Bean` inside of my `@Component` wasn't being closed properly. So I fixed that as so...  ``` @Configuraton ... class ...     @Bean     @RequestScope     static CloseableThreadContext.Instance requestContext( @Value( ""${environment}"" ) String env, String hostname ) {         // spring will close         CloseableThreadContext.Instance ctx = CloseableThreadContext.put( ""env"", env );         ctx.put( ""hostname"", hostname );         return ctx;     } ```  and then we have a filter  ``` @Component public class RequestLogFilter extends OncePerRequestFilter {      private final ObjectFactory requestContext;      public RequestLogFilter( ObjectFactory requestContext ) {         this.requestContext = Objects.requireNonNull( requestContext );     }      @Override     protected void doFilterInternal(         HttpServletRequest request, HttpServletResponse response, FilterChain filterChain )         throws ServletException, IOException {         CloseableThreadContext.Instance ctx = requestContext.getObject();         String session = Optional.ofNullable( request.getSession( false ) )             .map( HttpSession::getId )             .orElse( Characters.EMPTY );          String user = Optional.ofNullable( SecurityContextHolder.getContext().getAuthentication() )             .map( Authentication::getPrincipal )             .filter( Predicates.instanceOf( UserDetails.class ) )             .map( UserDetails.class::cast )             .map( UserDetails::getUsername )             .orElse( Characters.EMPTY );          ctx.put( ""path"", request.getRequestURI() );         ctx.put( ""accept"", request.getHeader( ""accept"" ) );         ctx.put( ""user-agent"", request.getHeader( ""user-agent"" ) );         ctx.put( ""session"", session );         ctx.put( ""user"", user );         filterChain.doFilter( request, response );     } } ```  here's a sample of our current logs  ``` 550026	http-nio-8080-exec-46	INFO	com.mckesson.dex.servlet.WebInitializer.SessionListener	Session (DE6760D17C8538FF3B81F81F79BAAE13) created with timeout set to 43200000 ms MDC: {path=/j_spring_security_check, hostname=ci, session=941D521ED54F657946C2B47D91C85EC7, env=ci, user=, accept=text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8, user-agent=Mozilla/5.0 (Windows NT 6.2; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36} 550097	http-nio-8080-exec-9	INFO	com.mckesson.dex.controller.rest.StandardExceptionHandler	org.apache.logging.log4j.CloseableThreadContext$Instance@17e726c 550100	http-nio-8080-exec-9	ERROR	controller.rest.StandardExceptionHandler	Bad Request MDC: {env=ci, hostname=dex-ci} org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; nested exception is java.lang.NumberFormatException: For input string: ""null"" ```  now I""m sure you'll say, there is an MDC in for the `StandardExceptionHandler` which is what is annotated with controller advice. Well in this cases that's only because I added  another injection point to get the requestContext...  ```java     @ResponseBody     @ExceptionHandler( {UncategorizedSQLException.class, Exception.class} )     @ResponseStatus( HttpStatus.INTERNAL_SERVER_ERROR )     public ErrorResponse oracleFails( final Exception e ){         return createErrorResponse( HttpStatus.INTERNAL_SERVER_ERROR, null, e );     }      private ErrorResponse createErrorResponse( HttpStatus status,  String message, Exception exception ) {         CloseableThreadContext.Instance object = requestContext.getObject();         log().info( ""{}"", object );         log().error( status::getReasonPhrase, exception );         return new ErrorResponse( status.getReasonPhrase(), message, status.value() );     } ```    --- No further details from [SPR-17150](https://jira.spring.io/browse/SPR-17150?redirect=false)","closed","in: web,","spring-projects-issues","2018-08-08T22:01:44Z","2019-01-11T14:00:06Z"
"","21626","Documentation for running hibernate with bytecode enhancement on a spring stack [SPR-17089]","**[Caleb Cushing](https://jira.spring.io/secure/ViewProfile.jspa?name=xenoterracide)** opened **[SPR-17089](https://jira.spring.io/browse/SPR-17089?redirect=false)** and commented  I've been going a bit crazy trying to figure out what's not being done correctly.... Vlad (of hibernate) suggests it's a problem with spring, after finding a couple of tickets, and a book reference, I'm not sure it isn't at least a doc issue.  here's a full description of my problem with vlad's comments, and a link to a stack overflow  https://discourse.hibernate.org/t/property-not-lazy-loading-with-runtime-bytecode-enhancement-hibernate-5-2/1115  a book reference I found  https://books.google.com/books?id=VfEwBgAAQBAJ&pg=PA169&lpg=PA169&dq=spring+boot+hibernate+bytecode+enhancement&source=bl&ots=fshVwCS6hr&sig=AaDRg6c2yBm9It9Nn8BOiR_OrLY&hl=en&sa=X&ved=2ahUKEwjT1b3-h7vcAhVm7YMKHZ_qDlY4ChDoATABegQIARAB#v=onepage&q=spring%20boot%20hibernate%20bytecode%20enhancement&f=false  #18459  ---  **Issue Links:** - #18459 Proper load-time weaving support for Hibernate 5","open","type: task,","spring-projects-issues","2018-07-25T21:08:56Z","2019-01-11T12:46:49Z"
"","21357","Hamcrest dependency missing when using Junit 5 [SPR-16817]","**[Caleb Cushing](https://jira.spring.io/secure/ViewProfile.jspa?name=xenoterracide)** opened **[SPR-16817](https://jira.spring.io/browse/SPR-16817?redirect=false)** and commented  I'm not sure what the best way to resolve this is as if using junit 4, it's not a problem, but if using junit 5 you'd need to import hamcrest-library. perhaps hamcrest-library should be a transient dependency of spring-test, in the context of a gradle build it would need to set it to api, not sure how jigsaw deals with such things...  (using SB 2.0.2 parent)  ```java     testImplementation(""org.springframework:spring-test"")     testImplementation(""org.springframework.boot:spring-boot-test"")     testImplementation(""org.springframework.boot:spring-boot-test-autoconfigure"")     testImplementation(""org.springframework.security:spring-security-test"") //    testImplementation(""org.hamcrest:hamcrest-library"")  ```  ```java > Task :compileTestJava FAILED C:\Users\xeno\IdeaProjects\rpf\lib\sec\src\test\java\com\xenoterracide\rpf\sec\repository\UserRepositoryTest.java:40: error: cannot access Matcher             .andExpect( header().string( HttpHeaders.LINK,                                 ^   class file for org.hamcrest.Matcher not found   ```  looks like this class is my issue  ```java package org.springframework.test.web.servlet.result;  import java.util.Map; import javax.xml.xpath.XPathExpressionException;  import org.hamcrest.Matcher;  import org.springframework.test.web.servlet.ResultMatcher; import org.springframework.util.AntPathMatcher; import org.springframework.web.util.UriComponentsBuilder;  import static org.springframework.test.util.AssertionErrors.*;  /**  * Static factory methods for {@link ResultMatcher}-based result actions.  *  * Eclipse Users  * Consider adding this class as a Java editor favorite. To navigate to  * this setting, open the Preferences and type ""favorites"".  *  * @author Rossen Stoyanchev  * @author Brian Clozel  * @author Sam Brannen  * @since 3.2  */ public abstract class MockMvcResultMatchers {  ```     ```java testCompileClasspath - Compile classpath for source set 'test'. +--- com.xenoterracide.entities:entities-api:0.2.1-SNAPSHOT |    \--- org.springframework.data:spring-data-commons:2.0.7.RELEASE |         +--- org.springframework:spring-core:5.0.6.RELEASE |         |    \--- org.springframework:spring-jcl:5.0.6.RELEASE |         +--- org.springframework:spring-beans:5.0.6.RELEASE |         |    \--- org.springframework:spring-core:5.0.6.RELEASE (*) |         \--- org.slf4j:slf4j-api:1.7.25 +--- com.xenoterracide.entities:entities-jpa:0.2.0-SNAPSHOT |    +--- com.xenoterracide.entities:entities-api:0.2.1-SNAPSHOT (*) |    +--- org.springframework.data:spring-data-commons:2.0.7.RELEASE (*) |    +--- org.hibernate.javax.persistence:hibernate-jpa-2.1-api -> 1.0.0.Final |    +--- org.hibernate.validator:hibernate-validator:6.0.9.Final |    |    +--- javax.validation:validation-api:2.0.1.Final |    |    +--- org.jboss.logging:jboss-logging:3.3.2.Final |    |    \--- com.fasterxml:classmate:1.3.4 |    \--- org.hibernate:hibernate-core:5.2.17.Final |         +--- org.jboss.logging:jboss-logging:3.3.1.Final -> 3.3.2.Final |         +--- org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.0.Final |         +--- org.javassist:javassist:3.22.0-GA |         +--- antlr:antlr:2.7.7 |         +--- org.jboss:jandex:2.0.3.Final |         +--- com.fasterxml:classmate:1.3.0 -> 1.3.4 |         +--- dom4j:dom4j:1.6.1 |         \--- org.hibernate.common:hibernate-commons-annotations:5.0.1.Final |              \--- org.jboss.logging:jboss-logging:3.3.0.Final -> 3.3.2.Final +--- org.hibernate.javax.persistence:hibernate-jpa-2.1-api -> 1.0.0.Final +--- javax.validation:validation-api -> 2.0.1.Final +--- org.hibernate.validator:hibernate-validator -> 6.0.9.Final (*) +--- org.springframework:spring-core -> 5.0.6.RELEASE (*) +--- org.springframework:spring-context -> 5.0.6.RELEASE |    +--- org.springframework:spring-aop:5.0.6.RELEASE |    |    +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |    \--- org.springframework:spring-core:5.0.6.RELEASE (*) |    +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    \--- org.springframework:spring-expression:5.0.6.RELEASE |         \--- org.springframework:spring-core:5.0.6.RELEASE (*) +--- org.springframework:spring-tx -> 5.0.6.RELEASE |    +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    \--- org.springframework:spring-core:5.0.6.RELEASE (*) +--- org.springframework.data:spring-data-commons -> 2.0.7.RELEASE (*) +--- org.springframework.data:spring-data-jpa -> 2.0.7.RELEASE |    +--- org.springframework.data:spring-data-commons:2.0.7.RELEASE (*) |    +--- org.springframework:spring-orm:5.0.6.RELEASE |    |    +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |    +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    +--- org.springframework:spring-jdbc:5.0.6.RELEASE |    |    |    +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |    |    +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    |    \--- org.springframework:spring-tx:5.0.6.RELEASE (*) |    |    \--- org.springframework:spring-tx:5.0.6.RELEASE (*) |    +--- org.springframework:spring-context:5.0.6.RELEASE (*) |    +--- org.springframework:spring-aop:5.0.6.RELEASE (*) |    +--- org.springframework:spring-tx:5.0.6.RELEASE (*) |    +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    +--- org.aspectj:aspectjrt:1.8.12 -> 1.8.13 |    \--- org.slf4j:slf4j-api:1.7.25 +--- org.springframework.boot:spring-boot-starter-data-rest -> 2.0.2.RELEASE |    +--- org.springframework.boot:spring-boot-starter:2.0.2.RELEASE |    |    +--- org.springframework.boot:spring-boot:2.0.2.RELEASE |    |    |    +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    |    \--- org.springframework:spring-context:5.0.6.RELEASE (*) |    |    +--- org.springframework.boot:spring-boot-autoconfigure:2.0.2.RELEASE |    |    |    \--- org.springframework.boot:spring-boot:2.0.2.RELEASE (*) |    |    +--- org.springframework.boot:spring-boot-starter-logging:2.0.2.RELEASE |    |    |    +--- ch.qos.logback:logback-classic:1.2.3 |    |    |    |    +--- ch.qos.logback:logback-core:1.2.3 |    |    |    |    \--- org.slf4j:slf4j-api:1.7.25 |    |    |    +--- org.apache.logging.log4j:log4j-to-slf4j:2.10.0 |    |    |    |    +--- org.slf4j:slf4j-api:1.7.25 |    |    |    |    \--- org.apache.logging.log4j:log4j-api:2.10.0 |    |    |    \--- org.slf4j:jul-to-slf4j:1.7.25 |    |    |         \--- org.slf4j:slf4j-api:1.7.25 |    |    +--- javax.annotation:javax.annotation-api:1.3.2 |    |    +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    \--- org.yaml:snakeyaml:1.19 |    +--- org.springframework.boot:spring-boot-starter-json:2.0.2.RELEASE |    |    +--- org.springframework.boot:spring-boot-starter:2.0.2.RELEASE (*) |    |    +--- org.springframework:spring-web:5.0.6.RELEASE |    |    |    +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |    |    \--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    +--- com.fasterxml.jackson.core:jackson-databind:2.9.5 |    |    |    +--- com.fasterxml.jackson.core:jackson-annotations:2.9.0 |    |    |    \--- com.fasterxml.jackson.core:jackson-core:2.9.5 |    |    +--- com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.9.5 |    |    |    +--- com.fasterxml.jackson.core:jackson-core:2.9.5 |    |    |    \--- com.fasterxml.jackson.core:jackson-databind:2.9.5 (*) |    |    +--- com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.5 |    |    |    +--- com.fasterxml.jackson.core:jackson-annotations:2.9.0 |    |    |    +--- com.fasterxml.jackson.core:jackson-core:2.9.5 |    |    |    \--- com.fasterxml.jackson.core:jackson-databind:2.9.5 (*) |    |    \--- com.fasterxml.jackson.module:jackson-module-parameter-names:2.9.5 |    |         +--- com.fasterxml.jackson.core:jackson-core:2.9.5 |    |         \--- com.fasterxml.jackson.core:jackson-databind:2.9.5 (*) |    +--- org.springframework.boot:spring-boot-starter-web:2.0.2.RELEASE |    |    +--- org.springframework.boot:spring-boot-starter:2.0.2.RELEASE (*) |    |    +--- org.springframework.boot:spring-boot-starter-json:2.0.2.RELEASE (*) |    |    +--- org.springframework.boot:spring-boot-starter-tomcat:2.0.2.RELEASE |    |    |    +--- javax.annotation:javax.annotation-api:1.3.2 |    |    |    +--- org.apache.tomcat.embed:tomcat-embed-core:8.5.31 |    |    |    +--- org.apache.tomcat.embed:tomcat-embed-el:8.5.31 |    |    |    \--- org.apache.tomcat.embed:tomcat-embed-websocket:8.5.31 |    |    |         \--- org.apache.tomcat.embed:tomcat-embed-core:8.5.31 |    |    +--- org.hibernate.validator:hibernate-validator:6.0.9.Final (*) |    |    +--- org.springframework:spring-web:5.0.6.RELEASE (*) |    |    \--- org.springframework:spring-webmvc:5.0.6.RELEASE |    |         +--- org.springframework:spring-aop:5.0.6.RELEASE (*) |    |         +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |         +--- org.springframework:spring-context:5.0.6.RELEASE (*) |    |         +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |         +--- org.springframework:spring-expression:5.0.6.RELEASE (*) |    |         \--- org.springframework:spring-web:5.0.6.RELEASE (*) |    \--- org.springframework.data:spring-data-rest-webmvc:3.0.7.RELEASE |         +--- org.springframework.data:spring-data-rest-core:3.0.7.RELEASE |         |    +--- org.springframework:spring-tx:5.0.6.RELEASE (*) |         |    +--- org.springframework.hateoas:spring-hateoas:0.23.0.RELEASE -> 0.24.0.RELEASE |         |    |    +--- org.springframework:spring-aop:4.3.12.RELEASE -> 5.0.6.RELEASE (*) |         |    |    +--- org.springframework:spring-beans:4.3.12.RELEASE -> 5.0.6.RELEASE (*) |         |    |    +--- org.springframework:spring-context:4.3.12.RELEASE -> 5.0.6.RELEASE (*) |         |    |    +--- org.springframework:spring-core:4.3.12.RELEASE -> 5.0.6.RELEASE (*) |         |    |    +--- org.springframework:spring-web:4.3.12.RELEASE -> 5.0.6.RELEASE (*) |         |    |    +--- org.springframework:spring-webmvc:4.3.12.RELEASE -> 5.0.6.RELEASE (*) |         |    |    \--- org.slf4j:slf4j-api:1.7.25 |         |    +--- org.springframework.data:spring-data-commons:2.0.7.RELEASE (*) |         |    +--- org.springframework.plugin:spring-plugin-core:1.2.0.RELEASE |         |    |    +--- org.springframework:spring-beans:4.0.9.RELEASE -> 5.0.6.RELEASE (*) |         |    |    +--- org.springframework:spring-context:4.0.9.RELEASE -> 5.0.6.RELEASE (*) |         |    |    +--- org.springframework:spring-aop:4.0.9.RELEASE -> 5.0.6.RELEASE (*) |         |    |    \--- org.slf4j:slf4j-api:1.7.10 -> 1.7.25 |         |    +--- org.atteo:evo-inflector:1.2.2 |         |    +--- com.fasterxml.jackson.core:jackson-annotations:2.9.0 |         |    +--- com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.9.5 (*) |         |    \--- org.slf4j:slf4j-api:1.7.25 |         +--- org.springframework:spring-webmvc:5.0.6.RELEASE (*) |         +--- com.fasterxml.jackson.core:jackson-databind:2.9.5 (*) |         +--- com.fasterxml.jackson.core:jackson-annotations:2.9.0 |         \--- org.slf4j:slf4j-api:1.7.25 +--- org.springframework.boot:spring-boot-starter-security -> 2.0.2.RELEASE |    +--- org.springframework.boot:spring-boot-starter:2.0.2.RELEASE (*) |    +--- org.springframework:spring-aop:5.0.6.RELEASE (*) |    +--- org.springframework.security:spring-security-config:5.0.5.RELEASE |    |    +--- org.springframework.security:spring-security-core:5.0.5.RELEASE |    |    |    +--- org.springframework:spring-aop:5.0.6.RELEASE (*) |    |    |    +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |    |    +--- org.springframework:spring-context:5.0.6.RELEASE (*) |    |    |    +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    |    \--- org.springframework:spring-expression:5.0.6.RELEASE (*) |    |    +--- org.springframework:spring-aop:5.0.6.RELEASE (*) |    |    +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |    +--- org.springframework:spring-context:5.0.6.RELEASE (*) |    |    \--- org.springframework:spring-core:5.0.6.RELEASE (*) |    \--- org.springframework.security:spring-security-web:5.0.5.RELEASE |         +--- org.springframework.security:spring-security-core:5.0.5.RELEASE (*) |         +--- org.springframework:spring-aop:5.0.6.RELEASE (*) |         +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |         +--- org.springframework:spring-context:5.0.6.RELEASE (*) |         +--- org.springframework:spring-core:5.0.6.RELEASE (*) |         +--- org.springframework:spring-expression:5.0.6.RELEASE (*) |         \--- org.springframework:spring-web:5.0.6.RELEASE (*) +--- com.xenoterracide.rpf:is:0.1.0-SNAPSHOT |    \--- org.springframework.boot:spring-boot-starter:2.0.2.RELEASE (*) +--- org.junit.jupiter:junit-jupiter-api:5.+ -> 5.1.1 |    +--- org.apiguardian:apiguardian-api:1.0.0 |    +--- org.opentest4j:opentest4j:1.0.0 |    \--- org.junit.platform:junit-platform-commons:1.1.1 |         \--- org.apiguardian:apiguardian-api:1.0.0 +--- org.assertj:assertj-core:3.+ -> 3.9.1 +--- org.springframework.boot:spring-boot-starter-data-jpa -> 2.0.2.RELEASE |    +--- org.springframework.boot:spring-boot-starter:2.0.2.RELEASE (*) |    +--- org.springframework.boot:spring-boot-starter-aop:2.0.2.RELEASE |    |    +--- org.springframework.boot:spring-boot-starter:2.0.2.RELEASE (*) |    |    +--- org.springframework:spring-aop:5.0.6.RELEASE (*) |    |    \--- org.aspectj:aspectjweaver:1.8.13 |    +--- org.springframework.boot:spring-boot-starter-jdbc:2.0.2.RELEASE |    |    +--- org.springframework.boot:spring-boot-starter:2.0.2.RELEASE (*) |    |    +--- com.zaxxer:HikariCP:2.7.9 |    |    |    \--- org.slf4j:slf4j-api:1.7.25 |    |    \--- org.springframework:spring-jdbc:5.0.6.RELEASE (*) |    +--- org.hibernate:hibernate-core:5.2.17.Final (*) |    +--- javax.transaction:javax.transaction-api:1.2 |    +--- org.springframework.data:spring-data-jpa:2.0.7.RELEASE (*) |    \--- org.springframework:spring-aspects:5.0.6.RELEASE |         \--- org.aspectj:aspectjweaver:1.8.13 +--- org.apache.commons:commons-lang3 -> 3.7 +--- nl.jqno.equalsverifier:equalsverifier:2.+ -> 2.4.6 +--- org.springframework:spring-test -> 5.0.6.RELEASE |    \--- org.springframework:spring-core:5.0.6.RELEASE (*) +--- org.springframework.boot:spring-boot-test -> 2.0.2.RELEASE |    \--- org.springframework.boot:spring-boot:2.0.2.RELEASE (*) +--- org.springframework.boot:spring-boot-test-autoconfigure -> 2.0.2.RELEASE |    +--- org.springframework.boot:spring-boot-test:2.0.2.RELEASE (*) |    \--- org.springframework.boot:spring-boot-autoconfigure:2.0.2.RELEASE (*) +--- org.springframework.security:spring-security-test -> 5.0.5.RELEASE |    +--- org.springframework.security:spring-security-core:5.0.5.RELEASE (*) |    +--- org.springframework.security:spring-security-web:5.0.5.RELEASE (*) |    +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    \--- org.springframework:spring-test:5.0.6.RELEASE (*) \--- org.skyscreamer:jsonassert -> 1.5.0      \--- com.vaadin.external.google:android-json:0.0.20131108.vaadin1   ```    ---  **Affects:** 5.0.6","closed","status: declined,","spring-projects-issues","2018-05-13T06:19:24Z","2019-01-12T16:21:18Z"
"","21281","Regression RequestRejectedException: The request was rejected because the URL was not normalized [SPR-16740]","**[Caleb Cushing](https://jira.spring.io/secure/ViewProfile.jspa?name=xenoterracide)** opened **[SPR-16740](https://jira.spring.io/browse/SPR-16740?redirect=false)** and commented  it's possible this regression belongs to a more specific component of spring, but I'm not sure where the best spot to report this is at this time  in Brussels-SR6, this code worked, now updating to SR9 and it's broken  ```java @Bean( name = ""viewResolver"" ) public InternalResourceViewResolver viewResolver() {     InternalResourceViewResolver viewResolver = new InternalResourceViewResolver();     viewResolver.setViewClass( JstlView.class );     viewResolver.setPrefix( ""/jsp/"" );     viewResolver.setSuffix( "".jsp"" );     return viewResolver; } ```  this configuration was adapted from an older XML configuration a while ago.  Now when trying to visit a jsp? or at least some I get this.  ```java Apr 17, 2018 4:25:56 PM org.apache.catalina.core.StandardWrapperValve invoke SEVERE: Servlet.service() for servlet [jsp] in context with path [] threw exception org.springframework.security.web.firewall.RequestRejectedException: The request was rejected because the URL was not normalized. 	at org.springframework.security.web.firewall.StrictHttpFirewall.getFirewalledRequest(StrictHttpFirewall.java:248) 	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:193) 	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177) 	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347) 	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) 	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198) 	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) 	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496) 	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) 	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81) 	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) 	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342) 	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803) 	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) 	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790) 	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459) 	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) 	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) 	at java.lang.Thread.run(Thread.java:748) ```  i'm guessing this has something to do with one of the recent security vulns. internally when I debug the servelet context is `//jsp/...`. note: I think we were using `/jsp/` instead of `/jsp` because we didn't want to match `/jspFoo.jsp`, only the nested path.  **Update** That doesn't just fix it... we have a failing test with SAML. `Forwarded URL expected: but was:`  not sure yet if it' simple to fix, at a glance it calls this piece of controller  ```java     private static final String TEST_SAML_RESPONSE_VIEW = ""testSamlResponse"";      @RequestMapping( value = ""/generateSamlResponse"", method = RequestMethod.POST )     public String doPost( Model model, HttpServletRequest request ) {          final String serverName = request.getParameter( ""redirectHost"" );         final String propertyFileName = request.getParameter( ""propertiesFileName"" );         final SamlAssertionProperties properties = samlTestService.loadConfigration( ""classpath:/"" + propertyFileName );          // Override properties from file with user selections and generate assertion         updateProperties( request, properties );         final String assertion = samlTestService.buildAssertion( properties );         final String url = StringUtilsDex.isEmpty( serverName ) ? ""/saml/SSO"" : serverName;         model.addAttribute( ""assertion"", assertion );         model.addAttribute( ""url"", url );         return TEST_SAML_RESPONSE_VIEW;     } ```  **Update 2** This became an issue as of Brussels SR7     **Update 3** this looks like how we actually need to fix this, worth stating that `login` in this case is the name of the view. I don't know that removing the /jsp/ mappings are necessary, but neither do they seem to be relevant. Not sure how it ends up being `//jsp/..`  ```java --- a/dex-ui/src/main/webapp/WEB-INF/web.xml +++ b/dex-ui/src/main/webapp/WEB-INF/web.xml @@ -30,41 +30,6 @@                 *.jsp          -        -               jsp -               /jsp/login.jsp -        - -        -               jsp -               /jsp/error.jsp -        - -        -               jsp -               /jsp/version.jsp -        - -        -               jsp -               /accessdenied.jsp -        - -        -               jsp -               /jsp/register.jsp -        - -        -               jsp -               /forgotPassword.jsp -        - -        -               jsp -               /verifyUser.jsp -        -                          400                 /public/error/400 @@ -86,7 +51,7 @@                  -               /jsp/login.jsp +               login           ```    ---  **Affects:** 4.3.16  **Attachments:** - [image-2018-04-20-12-08-57-772.png](https://jira.spring.io/secure/attachment/25589/image-2018-04-20-12-08-57-772.png) (_122.58 kB_) - [image-2018-04-20-13-15-25-857.png](https://jira.spring.io/secure/attachment/25590/image-2018-04-20-13-15-25-857.png) (_149.34 kB_) - [jsp-regression.zip](https://jira.spring.io/secure/attachment/25692/jsp-regression.zip) (_81.94 kB_)","closed","status: declined,","spring-projects-issues","2018-04-17T21:46:32Z","2019-01-12T16:21:25Z"
"","21493","ExchangeFilterFunctions.basicAuthentication use error [SPR-16955]","**[cafebaby](https://jira.spring.io/secure/ViewProfile.jspa?name=zhouzhou19950825)** opened **[SPR-16955](https://jira.spring.io/browse/SPR-16955?redirect=false)** and commented  I use the requestFilter in WebClient and use the ExchangeFilterFunctions.basicAuthentication to perform basic authentication as described in the documentation. I use Spring Security's httbasic() to do server security authentication, but the result is still 401 authentication failure.     my code:  WebClient client = WebClient.builder().baseUrl(""http://localhost:8081"")  .filter(ExchangeFilterFunctions.basicAuthentication(""admin"", ""admin"")).build();  Mono\ result = client.post().uri(""/upload"")  .syncBody(parts).retrieve()  .onStatus(HttpStatus::is4xxClientError,  response -> Mono  .create(x -> x.success(new Exception(""error code:"" + response.statusCode().value() + """"))))  .bodyToMono(String.class);   ---  **Reference URL:** https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#webflux-http2","closed","status: declined,","spring-projects-issues","2018-06-18T23:17:34Z","2019-01-12T16:21:05Z"
"","21403","ResourceHandlerRegistry example in ref docs needs to use setCacheControl [SPR-16864]","**[cafebaby](https://jira.spring.io/secure/ViewProfile.jspa?name=zhouzhou19950825)** opened **[SPR-16864](https://jira.spring.io/browse/SPR-16864?redirect=false)** and commented  I found the text block description error, configuring ""ResourceHandlerRegistry"" in spring Webflux, and I first did not conform to the document description, because he did not have a method of setCachePeriod, only setCacheControl (CacheControl.maxAge (31556926, TimeUnit.SECONDS)), hoping to correct the contents of the document. Thank you！   ---  **Affects:** 5.0.6  **Reference URL:** https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#webflux-config  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1943a1f5bd06235af9c695cb1404188d3f0432f4, https://github.com/spring-projects/spring-framework/commit/eed663ff7e33f24b614db087353599b321e18436","closed","type: task,","spring-projects-issues","2018-05-22T23:47:18Z","2018-06-12T15:44:04Z"
"","21266","@RequestBody in webflux [SPR-16725]","**[cafebaby](https://jira.spring.io/secure/ViewProfile.jspa?name=zhouzhou19950825)** opened **[SPR-16725](https://jira.spring.io/browse/SPR-16725?redirect=false)** and commented  such as code:  ```java @PostMapping(""/geusers"")  public User handle(@RequestBody User user) { return user; } ```     I use `@RequestBody` in a webflux environment and I use PostMan to do a post request to return  ``` {  ""timestamp"": ""2018-04-14T09:15:21.500+0000"",  ""path"": ""/geusers"",  ""status"": 415,  ""error"": ""Unsupported Media Type"",  ""message"": ""Content type 'multipart/form-data;boundary=--------------------------387298693777412632384516' not supported""  } ```  Then I changed the get request again. [link title](https://github.com/zhouzhou19950825/springwebflux)   --- No further details from [SPR-16725](https://jira.spring.io/browse/SPR-16725?redirect=false)","closed","status: declined,","spring-projects-issues","2018-04-14T09:24:12Z","2019-01-12T16:21:27Z"
"","21245","Redirection issues for spring-webflux [SPR-16704]","**[cafebaby](https://jira.spring.io/secure/ViewProfile.jspa?name=zhouzhou19950825)** opened **[SPR-16704](https://jira.spring.io/browse/SPR-16704?redirect=false)** and commented  According to the redirection test described in the official website ""WebFlux Reference Documentation"", I found that the redirection is not the same as described in the spring MVC format. For example: ""redirect:/some/resource"", the access will be reported abnormally when running.  The exception information is as follows:  ``` java.lang.IllegalStateException: Could not resolve view with name 'redirect:/complete'. 	at org.springframework.web.reactive.result.view.ViewResolutionResultHandler.lambda$resolveViews$3(ViewResolutionResultHandler.java:277) ~[spring-webflux-5.0.4.RELEASE.jar:5.0.4.RELEASE] 	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:107) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] 	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] 	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1069) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] 	at reactor.core.publisher.MonoCollectList$MonoBufferAllSubscriber.onComplete(MonoCollectList.java:117) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] 	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:460) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] 	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:349) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] 	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onComplete(FluxConcatMap.java:265) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] 	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:460) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] 	at reactor.core.publisher.Operators.complete(Operators.java:125) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] 	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:111) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] 	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:61) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] 	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] 	at reactor.core.publisher.FluxConcatMap.subscribe(FluxConcatMap.java:121) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] 	at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] 	at reactor.core.publisher.MonoCollectList.subscribe(MonoCollectList.java:59) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] 	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] 	at reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:59) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] 	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] 	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] 	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] 	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] 	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] 	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] 	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] 	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1626) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] 	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:532) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] 	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1440) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] 	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1314) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] 	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] 	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] 	at reactor.core.publisher.MonoCallableOnAssembly.subscribe(MonoCallableOnAssembly.java:82) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] 	at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] 	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] 	at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] 	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] 	at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] 	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] 	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] 	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] 	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1069) ~[reactor-core-3.1.5.RELEASE.jar:3.1.5.RELEASE] ```  The meaning of the error message is to use the return value as the String type to match the corresponding view instead of selecting the redirect.  By looking at the source code ViewResolutionResultHandler class. Finding the method in the handleResultResult  ```java else if (CharSequence.class.isAssignableFrom(clazz) && !hasModelAnnotation(parameter)) { 	viewsMono = resolveViews(returnValue.toString(), locale); } else if (Rendering.class.isAssignableFrom(clazz)) { 	Rendering render = (Rendering) returnValue; 	HttpStatus status = render.status(); 	if (status != null) { 		exchange.getResponse().setStatusCode(status); 	} 	exchange.getResponse().getHeaders().putAll(render.headers()); 	model.addAllAttributes(render.modelAttributes()); 	Object view = render.view(); 	if (view == null) { 		view = getDefaultViewName(exchange); 	} ```  Discovered string is forwarded as view name.  I don't know if I understand right, but at the moment I feel my opinion is right.   ---  **Affects:** 5.0.4","closed","status: invalid,","spring-projects-issues","2018-04-10T08:06:52Z","2019-01-12T05:19:01Z"
"","21168","Address race condition within spring that causes about-to-be-created-bean exceptions [SPR-16627]","**[Brian Toal](https://jira.spring.io/secure/ViewProfile.jspa?name=btoal@salesforce.com)** opened **[SPR-16627](https://jira.spring.io/browse/SPR-16627?redirect=false)** and commented  Typically DefaultListableBeanFactory.doGetBeanNamesForType is triggered via ApplicationContext.refresh via EventListenerMethodProcessor.getEventListnerFactories() in a single thread prior to when the application context is available for use. See typical stack:  > ConstructorResolver.instantiateUsingFactoryMethod(String, RootBeanDefinition, Object[]) line: 355	 > DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).instantiateUsingFactoryMethod(String, RootBeanDefinition, Object[]) line: 1250	 > DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).createBeanInstance(String, RootBeanDefinition, Object[]) line: 1099	 > DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).getSingletonFactoryBeanForTypeCheck(String, RootBeanDefinition) line: 946	 > DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).getTypeForFactoryBean(String, RootBeanDefinition) line: 833	 > DefaultListableBeanFactory(AbstractBeanFactory).isTypeMatch(String, ResolvableType) line: 557	 > DefaultListableBeanFactory.doGetBeanNamesForType(ResolvableType, boolean, boolean) line: 428	 > DefaultListableBeanFactory.getBeanNamesForType(Class, boolean, boolean) line: 399	 > DefaultListableBeanFactory.getBeanNamesForType(Class) line: 385	 > AnnotationConfigApplicationContext(AbstractApplicationContext).getBeanNamesForType(Class) line: 1182  However in application thats setup doesn't cause DefaultListableBeanFactory.doGetBeanNamesForType to run prior to AC.refresh finishing, then there is thread safety issue when two threads race calling DefaultListableBeanFactory.getBeanNamesForType  > t0 T1 AbstractBeanFactory.isTypeMatch checks for bean via getSingleton which returns null > t1 T2 AbstractBeanFactory.isTypeMatch checks for bean via getSingleton which returns null > t2 T1 AbstractAutowireCapableBeanFactory.getSingletonFactoryBeanForTypeCheck acquires getSingletonMutex lock > t3 T2 AbstractAutowireCapableBeanFactory.getSingletonFactoryBeanForTypeCheck blocks on getSingletonMutex lock > t4 T1 Creates bean instance by callingCreateBeanInstance all the way down to   > ConstructorResovler.instantiateUsingFactoryMethod  which calls getBean that > creates the non existing instance and puts it into the registry. > t5 T1 Releases getSingletonMutex lock > t6 T2 Acquires lock and attempts to create factory bean instance, however when > runtime gets to instantiateUsingFactoryMethod and the beanFactory.containsSingleton > occurs to check if the factory bean has been added to the bean factory, which it was > in T4, which causes the ImplicitlyAppeardSingletonException to be thrown.  To prevent this from happening the proposed change is to always have AbstractAutowireCapableBeanFactory.getSingletonFactoryBeanForTypeCheck check after it acquires the mutex if the singleton factory bean has been added in the registry, guarding it from failing with ImplicitlyAppeardSingletonException when another thread added the factory bean to the registry sometime between t1 and t5.  See the following project of an example of how this issue is reproduced:  https://github.com/toaler/spring-race-issue  Specifically:  https://github.com/toaler/spring-race-issue/blob/master/src/test/java/sandbox/SpringCreateFactoryBeanSingletonRaceTest.java  A potential fix for this issue has been submitted here.  If you flip the spring version using in the maven pom from existing version, to the version built from the PR, you'll see the about-to-be-created-bean exception without the fix, and normal behavior with the fix.  https://github.com/spring-projects/spring-framework/pull/1750  ---  **Affects:** 4.3.14, 5.0.3  **Issue Links:** - #21166 FactoryBeanRegistrySupport atomicity issues  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1750  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","in: core,","spring-projects-issues","2018-03-22T22:38:02Z","2019-01-11T15:11:18Z"
"","21783","Improve WebFlux performance for header management [SPR-17250]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-17250](https://jira.spring.io/browse/SPR-17250?redirect=false)** and commented  In a [recent reactor netty issue](https://github.com/reactor/reactor-netty/issues/392), small apps are being used to benchmark different frameworks. While working on that, [Violeta Georgieva](https://jira.spring.io/secure/ViewProfile.jspa?name=violetagg) found a few interesting points we could take a look at, as opportunities for performance improvements and micro-benchmark cases.  ## Hotspots  The benchmark has underlined a few hostpots in the Spring Framework codebase: * `org.springframework.util.LinkedCaseInsensitiveMap.convertKey(String)` (own time, 5th overall) * `org.springframework.util.MimeType.(String, String, Map)` (own time, 10th overall)  ### LinkedCaseInsensitiveMap  The `convertKey` method is used evenly by `get` and `put` operations on the map itself. This is calling `String.toLowerCase` many times, which involves a complex logic (it depends on the `Locale`) and creates new `String` instances. In general, copying headers from the native request and looking them up in our data structure is not efficient.  ### Request Content-Type parsing  `HttpHeaders.getContentType` is the main offender for `get` operations, called in several places: * `org.springframework.web.server.adapter.DefaultServerWebExchange.initFormData(ServerHttpRequest, ServerCodecConfigurer)` * `org.springframework.web.reactive.function.BodyExtractors.contentType(HttpMessage)` * `org.springframework.web.server.adapter.DefaultServerWebExchange.initMultipartData(ServerHttpRequest, ServerCodecConfigurer)` * `org.springframework.http.codec.DecoderHttpMessageReader.getContentType(HttpMessage)` * and more  In general, we're spending a lot of time on `org.springframework.util.MimeType.(String, String, Map)` and `org.springframework.http.MediaType.parseMediaType(String)` when parsing the content type of the request.  ## Possible solutions  We could use a more optimized data structure behind `HttpHeaders`. A data structure that uses `equalsIgnoreCase` or even case insensitive `hashcode` should be better. Many server implementations don't even use `Map` implementations, given that requests often contain just a few headers and the cost of setting up a `Map` outweighs the lookup performance gains.  Benchmarks show that even a `new TreeMap(String.CASE_INSENSITIVE_ORDER)` shows better performance.  Other implementations tend to wrap the `String` instances to store their case insensitive hash internally and use that for comparisons.  For Spring WebFlux, we could even wrap the native HTTP request headers and never copy those values in other data structures. This requires dedicated implementations for each server (Tomcat, Jetty, Reactor Netty and Undertow), but since most of those are using pooled resources for headers, we might improve a lot the GC pressure applied for each HTTP exchange handling.  ## Microbenchmark results  Here are microbenchmark results on `HttpHeaders` variants, no other Spring infrastructure piece involved. The ""GET requests"" case is reading a few headers from the request; the ""POST requests"" case is reading multiple times the ""Content-Type"" and ""Content-Length"" headers, as Spring does.  The baseline is just performing those read operations from an existing map. the other variants are doing what Spring is supposed to do, treating that map as the native request headers. In the regular `HttpHeaders` case, we're copying headers into our instance and performing the lookup operations. Other variants are trying the same with other map implementations.  This shows that the copying/allocations are using resources and changing the underlying implementation only slightly improves performance. This means we should instead look into leveraging the native headers directly and avoid copying in the first place.  ```java Benchmark                                                Mode  Cnt         Score        Error  Units  1. GET requests MyBenchmark.baselineGetRequest                          thrpt    5   890408.644 ±  25882.489  ops/s 1. current HttpHeaders implementation MyBenchmark.httpHeadersGetRequest                       thrpt    5   632354.108 ±   9054.069  ops/s 1. current implementation, but with a shortcut for linked map lookups MyBenchmark.fixedCaseInsensitiveHeadersGetRequest       thrpt    5   671559.477 ±  22871.242  ops/s 1. same thing, but backed by a case insensitive TreeMap MyBenchmark.treeMapHttpHeadersGetRequest                thrpt    5   734720.620 ±  17370.468  ops/s 1. same thing, but backed by a dedicated map implementation MyBenchmark.headersMapHttpHeadersGetRequest             thrpt    5   695399.245 ±  24594.272  ops/s  1. POST requests 1. baseline benchmark MyBenchmark.baselinePostRequest                         thrpt    5  8672650.691 ± 135878.532  ops/s 1. current HttpHeaders implementation MyBenchmark.httpHeadersPostRequest                      thrpt    5   994670.287 ±  19372.729  ops/s 1. current implementation, but with a shortcut for linked map lookups MyBenchmark.fixedCaseInsensitiveHttpHeadersPostRequest  thrpt    5  1058808.241 ± 131617.683  ops/s 1. same thing, but backed by a case insensitive TreeMap MyBenchmark.treeMapHttpHeadersPostRequest               thrpt    5  1525237.824 ±  27530.672  ops/s 1. current implementation, but caching the content type once resolved MyBenchmark.httpHeadersContentTypeCachePostRequest      thrpt    5  1584504.796 ±  65863.946  ops/s 1. caching the content type + backed by a dedicated map implementation MyBenchmark.optimizedHttpHeadersPostRequest             thrpt    5  2310686.814 ±  93787.128  ops/s ```  ---  **Affects:** 5.1 RC2  **Reference URL:** https://github.com/reactor/reactor-netty/issues/392  **Issue Links:** - #21929 CORS detection for reactive stack on tomcat/netty is broken - #22164 HttpHeaders.EMPTY is not immutable - #21926 Remove transfer-encoding check in EncoderHttpMessageWriter and related workaround in ReactorServerHttpResponse - #22120 Consistent handling of null header values in HttpHeaders  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/10d5de7d630587bfa96f4f6998ab141693d55386, https://github.com/spring-projects/spring-framework/commit/58b3af94758ea8e6f5521dfecfcf3ab9d3610456, https://github.com/spring-projects/spring-framework/commit/f12c28e402e584075f26b91a4a482e98e4b9dcb8, https://github.com/spring-projects/spring-framework/commit/ce7278aaf4f20348862267c2081c20dc5bd77128  0 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2018-09-06T16:43:58Z","2019-01-11T14:13:07Z"
"","21775","Bean definition DSL does not generate unique bean names [SPR-17242]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-17242](https://jira.spring.io/browse/SPR-17242?redirect=false)** and commented  When using the bean definition DSL, using the simplest variant of the DSL for defining beans like this creates issues:  ```java val beans = beans {     bean { fooRouter() } // defines a RouterFunction     bean { barRouter() } // defines a RouterFunction } ```  If no bean name is provided by the bean registration DSL call, `GenericApplicationContext.registerBean` will register it by default with the bean class name, which means that it's easy to override another definition, and impossible to define multiple beans of the same type without manually defining bean names.  Could we add other strategies that fall back on default bean names, to be more in line with the annotation/XML models? Could we try and derive that information from other parts of the DSL?  ---  **Affects:** 5.0.8  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/14295  **Issue Links:** - #21825 GenericApplicationContext.registerBean should support non-default constructors  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b6d32ef55f6fcc7aeaf5a874f125e0172a8e5362","closed","type: enhancement,","spring-projects-issues","2018-09-04T12:13:38Z","2019-01-11T14:13:35Z"
"","21753","WebClient does not write Mono.empty() request body [SPR-17220]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-17220](https://jira.spring.io/browse/SPR-17220?redirect=false)** and commented  #19562 introduced a bug where empty `Mono` bodies are not properly written by `EncoderHttpMessageWriter` implementations. See the linked Spring Boot issue for a sample application demonstrating this problem.  ---  **Affects:** 5.0.8  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/14174  **Issue Links:** - #22038 HTTP GET from Chrome with WebFlux Rest Controller never completes  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6189e17d7ce7c3f20f51be00b4c0b10af4cc3ceb, https://github.com/spring-projects/spring-framework/commit/280da61d5c9594e6541725ea67af9dda1a5943a7","closed","type: bug,","spring-projects-issues","2018-08-27T12:07:53Z","2019-01-11T14:02:23Z"
"","21743","PathPatternPredicate still changes variables after failed AndPredicate [SPR-17210]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-17210](https://jira.spring.io/browse/SPR-17210?redirect=false)** and commented  `PathPatternPredicate` is a `RequestPredicate` implementation that has side-effects on the request; it modifies the state of request attributes, by adding URI template variables information to it.  This issue is a variant of #21233, but this time using the ""and"" predicate to chain several predicates.  Consider the following sample:  ```java route(path(""/spring/{project}"").and(method(HttpMethod.POST)), myHandler::variables) 		.andRoute(all(), myHandler::variables); ```  Given a `GET /spring/framework` request, the following happens: 1. the path pattern predicate matches and sets the uri template variables 2. the and predicate tests the method predicate, which doesn't match 3. the ""all"" predicate matches, and its handler has access to uri template variables that should not be present  ---  **Affects:** 5.0.8, 5.1 RC2  **Issue Links:** - #21635 Provide matched pattern information in WebFlux fn - #21233 PathPatternPredicate leaves path variables in request even if predicate doesn't match  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a680880a9bd86b160283ed22de925955b48e70df","closed","type: bug,","spring-projects-issues","2018-08-23T17:18:15Z","2019-01-11T14:02:42Z"
"","21733","ReactorHttpResources should clear HttpResources in global mode [SPR-17199]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-17199](https://jira.spring.io/browse/SPR-17199?redirect=false)** and commented  When configured in global mode, `ReactorResourceFactory` creates `ConnectionProvider` and `LoopResources` instances, then set those into Reactor `HttpResources`.  When the `ReactorResourceFactory` bean is being destroyed, those resources are being cleaned with their respective `destroy` method, without touching the global `HttpResources` itself.  When running multiple contexts in a row within the same JVM, here is what happens: 1. Global resources are created by `ReactorResourceFactory` and set on `HttpResources` 2. the application context is detroyed, `ReactorResourceFactory` cleans those resources 3. Given the nature of `HttpResources`, it is still holding a reference to those resources, even though they've been disposed 4. Another test runs and is just using a reactor netty server or client, not using a `ReactorResourceFactory` bean; it checks that `HttpResources` holds an instance already and is trying to use it 5. Netty fails while submitting a task as those resources are disposed already  Reactor Netty just checks the presence of an `HttpResources` instance but does not test that the contained resources are valid (or were disposed from a 3rd party). In global mode, `ReactorResourceFactory` should call `HttpResources.disposeLoopsAndConnections()` directly.  ---  **Affects:** 5.1 RC2  **Issue Links:** - #21776 Externally managed mode for ReactorResourceFactory  **Referenced from:** commits https://github.com/spring-projects/spring-boot/commit/2af8a9617b4a67b41fd1fcdfc98a86548af01596","closed","type: bug,","spring-projects-issues","2018-08-21T13:58:52Z","2019-01-11T13:39:39Z"
"","21722","Handle Optional Controller handler return types [SPR-17187]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-17187](https://jira.spring.io/browse/SPR-17187?redirect=false)** and commented  #17871 showed that `Optional` return types are not being considered by the return value handler in charge of `ResponseEntity` types. This means those types are treated as response bodies.  When serialized by Jackson, empty `Optional` are serialied as `null` JSON values (literal `""null""` in the response body).  This is existing behavior, but one could argue that an `Optional` return type is not valid for a controller handler.  Several solutions here: * we could ensure that this type is handled by the `HttpEntityMethodProcessor` * just fail at startup time / runtime * do nothing, since this variant is not widely used by developers  ---  **Affects:** 5.0.8  **Issue Links:** - #17871 	ResponseEntity factory method inferring FOUND / NOT_FOUND from Optional  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/432cdd7802b9d1109eb02925d45782b6c99b9e01","closed","status: declined,","spring-projects-issues","2018-08-15T13:22:41Z","2022-02-18T20:51:08Z"
"","21635","Provide matched pattern information in WebFlux fn [SPR-17098]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-17098](https://jira.spring.io/browse/SPR-17098?redirect=false)** and commented  The annotation model in Spring WebFlux currently adds, as a exchange attribute, the information about the matched pattern for the current handler. This information is used by micrometer and the metrics support in Spring Boot to record metrics.  Spring WebFlux fn. is missing a similar feature - not having this feature is causing issues, such as cardinality explosion in URI tags.  Note that this is not only supported in the WebFlux annotation model, but also Spring MVC, RestTemplate and WebClient. This is the last piece of support missing.   ---  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/12757  **Issue Links:** - #21928 WebFlux.fn puts wrong type of HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE - #21743 PathPatternPredicate still changes variables after failed AndPredicate  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2018-07-27T09:13:39Z","2019-01-11T12:46:08Z"
"","21619","ResponseEntityResultHandler does not overwrite existing response headers [SPR-17082]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-17082](https://jira.spring.io/browse/SPR-17082?redirect=false)** and commented  The current implementation of the `ResponseEntityResultHandler` only writes each `ResponseEntity` response header on the response only if there's none already for that header name.  This behavior is not consistent with what's being done in Spring MVC with the `HttpEntityMethodProcessor` - it also creates issues for some use cases (see reference URL for an example).  Given the following code snippet:  ```java @GetMapping(path=""/test"", produces=""text/plain"") @ResponseBody public Mono handler() {    return Mono.error(new IllegalArgumentException(""error""));  }  @ExceptionHandler(IllegalArgumentException.class) public ResponseEntity errorhandler(IllegalArgumentException ex) {   return ResponseEntity.badRequest()              .contentType(MediaType.APPLICATION_JSON)              .body(jsonBody); }  ```   In such a case, here's what happens: 1. the handler is selected and invoked 2. the text/plain content-type handler is written to the response 3. it's getting an error signal instead of the response body 4. the exception handler is invoked, all response entity headers are applied to the response, expect the ones that are already present in the response 5. Content-Type is already there, so it's not written and the client will get an HTTP 406 instead  ---  **Affects:** 5.0.7  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/13635  **Issue Links:** - #21948 Cannot overwrite content-type response header with WebFlux  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/195f3f07e7ea01b58ffc5633447f48c63128d662, https://github.com/spring-projects/spring-framework/commit/407bd96cf3cdf931c1b115955427d91d452974c0","closed","type: bug,","spring-projects-issues","2018-07-24T20:12:34Z","2019-01-11T12:46:47Z"
"","21572","Consistent non-exposure of null beans in the BeanFactory API [SPR-17034]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-17034](https://jira.spring.io/browse/SPR-17034?redirect=false)** and commented  Currently the core container allows to create null beans like this:  ```java @Bean public HandlerMapping myHandlerMapping() {   return null; } ```  This can be quite useful to back off and consume resources if that bean is not required (or a no-op), given the application configuration.  A recent change in the Spring MVC infrastructure setup uncovered several issues, since in many places we're asking for those infrastructure beans without guarding against null values.  Given the previous `myHandlerMapping` bean declaration, asking `BeanFactory` for beans can then return `null` instances in several cases:  ```java // the map will contain ""myHandlerMapping"", null Map matchingBeans = 					BeanFactoryUtils.beansOfTypeIncludingAncestors(context, HandlerMapping.class, true, false);  // this works assertThat(context.getBean(""resourceHandlerMapping"")).isEqualTo(null);  /*  * this throws org.springframework.beans.factory.BeanNotOfRequiredTypeException:   * Bean named 'resourceHandlerMapping' is expected to be of type   * 'org.springframework.web.servlet.HandlerMapping' but was actually of type   * 'org.springframework.beans.factory.support.NullBean' */ assertThat(context.getBean(""resourceHandlerMapping"", HandlerMapping.class)).isEqualTo(null); ```  Looking at the previous examples, we could improve the consistency of the behavior, or document a bit more the null case and what it means.  ---  **Affects:** 5.0.7  **Reference URL:** https://github.com/spring-projects/spring-framework/commit/a40d25a760249e59e9c077648f844591c3acac8b  **Attachments:** - [DispatcherServlet-5.0.7.BUILD-SNAPSHOT.png](https://jira.spring.io/secure/attachment/25765/DispatcherServlet-5.0.7.BUILD-SNAPSHOT.png) (_97.57 kB_) - [DispatcherServlet-5.1.0.BUILD-SNAPSHOT.png](https://jira.spring.io/secure/attachment/25766/DispatcherServlet-5.1.0.BUILD-SNAPSHOT.png) (_87.17 kB_)  **Issue Links:** - #20582 CastClass exception when wiring Map of beans (NullBean instead of 'null' in the map) - #20711 CastClass exception (NullBean instead of 'null' value) when getting map of beans directly from ApplicationContext - #16046 ObjectProvider iterable/stream access for ""beans of type"" resolution in `@Bean` methods - #20384 Autowire contract is not honored in cases where FactoryBean or `@Bean` return null - #20737 WebSocketConfigurationSupport.defaultSockJsTaskScheduler adds NoOpScheduler to context that is not usable in any way - #20752 Support for autowire-candidate with `@Bean` - #21595 Support for null bean in functional bean registration  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/77d72f1e0164c1004abd15f01422bcc380afbb75, https://github.com/spring-projects/spring-framework/commit/680afa75d838c8377238e01033e692c5735fe01b, https://github.com/spring-projects/spring-framework/commit/def6fbba89864ee1d8d654f4b2ba2a2d3d14a73e  0 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2018-07-12T10:19:48Z","2019-01-13T04:35:56Z"
"","21376","Restrict allowed HTTP methods in HiddenHttpMethodFilter [SPR-16836]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-16836](https://jira.spring.io/browse/SPR-16836?redirect=false)** and commented  Currently the `HiddenHttpMethodFilter` allows requests to change the HTTP method to any method. Both Servlet and Reactive variants should restrict the allowed HTTP methods to : PUT, PATCH and DELETE.   ---  **Backported to:** [4.3.18](https://github.com/spring-projects/spring-framework/milestone/167?closed=1)","closed","type: enhancement,","spring-projects-issues","2018-05-17T16:43:49Z","2018-07-05T21:31:08Z"
"","21322","DataBufferUtils does not release DataBuffer on error cases [SPR-16782]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-16782](https://jira.spring.io/browse/SPR-16782?redirect=false)** and commented  `DataBufferUtils` can write `DataBuffer` streams to file channels; the current API does leave full control to the developer and the javadoc is pretty clear on the fact that developers are in charge of releasing `DataBuffer` instances.  Now let's take an example; we'd like to fetch a large file using the `WebClient` and pipe it into a file on disk. An initial approach could be:  ```java Flux data = WebClient.create().get()     .uri(""http://example.org/largefile.bin"")     .retrieve()     .bodyToFlux(DataBuffer.class);    // We'd like to write it to a file on disk Path file = Files.createTempFile(""spring"", null); WritableByteChannel channel = Files.newByteChannel(file, StandardOpenOption.WRITE);  DataBufferUtils.write(data, channel)       // the release consumer releases buffer written on disk, one by one       .subscribe(DataBufferUtils.releaseConsumer(), throwable -> {         // when an error occurs, we don't have access to the current buffer         // nor the following ones: we can't release anything properly.       });   } ```  As explained in the comments, if an `IOException` happens the current `DataBuffer` is not released, neither are the ones that might be instantiated already and about to be published to the pipeline.  I think we should document this or assist developers here, as there is no obvious workaround here. `DataBufferUtils` is an utils class, so we need to make sure to strike the right balance between doing the right thing automatically and providing flexibility.  ---  **Issue Links:** - #21563 DataBufferUtils#join could leak buffers in case of error from the source - #21941 Review DataBuffer handling code for proper release in case of error or cancellation  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1a0522b8057dead47c90404d629c7597d0787dce, https://github.com/spring-projects/spring-framework/commit/952315c333abf3ab587731b567d809f0a20da5f7  **Backported to:** [5.0.10](https://github.com/spring-projects/spring-framework/milestone/191?closed=1)  4 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2018-04-30T14:42:19Z","2019-01-11T16:40:35Z"
"","21302","Send custom ""disconnect"" SSE event for finite Flux [SPR-16761]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-16761](https://jira.spring.io/browse/SPR-16761?redirect=false)** and commented  Currently, sending a finite Flux as a Server Sent Event stream looks like this:  ```java @RestController public class SseController {   @GetMapping(path = ""/feed"", produces = MediaType.TEXT_EVENT_STREAM_VALUE)  public Flux users() {    return Flux.just(new User(""Sebastien"", ""Deleuze""), new User(""Rossen"", ""Stoyanchev""));  } } ```  As expected, the server sends those 2 data messages and then closes the connection.  On the client side, `EventSource.onmessage` is called for each message and then `EventSource.onerror` is called; the browser probably expects SSE streams to be infinite and interprets that as an error and tries to reconnect. There are various strategies to prevent that on the server and the client side.  The core issue here is that, by default, the client has no way to make a distinction between each case: * the server is sending an infinite stream but an error occurred * the server is sending a finite stream and the stream completed * the server is sending a finite stream and an error occurred  Again, the SSE spec seems to be about infinite streams in a lot of ways, because it doesn't mention any way to close the connection from the server in a clean, expected way.  We previously considered leaving the connection opened (see #19147) but decided against it to avoid wasting resources on the server.  This issue is about considering an alternative solution: sending a custom SSE ""disconnect"" event that could be concatenated at the end of the stream when it completes without error. This would be backwards compatible, because developers would need to add a specific event listener on that event type to handle it (it would not appear in the `onmessage` callback).  With that event, developers have a chance to call `EventSource.close()` to properly close the connection and prevent reconnecting automatically, for example.  ---  **Affects:** 5.0.5  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2018-04-24T13:42:36Z","2019-01-11T16:42:03Z"
"","21238","Document HttpClient connection socket timeout behavior for CONNECT and SSL connections [SPR-16697]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-16697](https://jira.spring.io/browse/SPR-16697?redirect=false)** and commented  `HttpComponentsClientHttpRequestFactory` currently provides ways to customize different timeouts, including the `setReadTimeout` which sets the ""socket read timeout"" (in other words, the ""maximum period inactivity between two consecutive data packets"").  All of those are applied on the `RequestConfig`, which is effective only ""once connection route has been fully established"" (see [HTTPCLIENT-1892](https://issues.apache.org/jira/browse/HTTPCLIENT-1892)). In case of HTTP requests that require first a SSL handshake or a CONNECT request to a proxy, the `RequestConfig` does not apply on the time spent waiting for a socket at that point.  This has to be configured at the `HttpClient` level itself, using the default `SocketConfig` or even configuring finer options on the connection manager itself (connection pooling behavior, per-host configuration, etc).  This clearly isn't the goal of the `HttpComponentsClientHttpRequestFactory` and should be dealt with using directly the `HttpClient` builder API.  This issue is about documenting this fact on the `setConnectTimeout` method.  ---  **Affects:** 5.0.5  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/11379  **Issue Links:** - #20743 HttpComponentsClientHttpRequestFactory timeout with RestTemplate (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2dde000475d60b07bfe17f6233f2284aa03a5cc2","closed","type: enhancement,","spring-projects-issues","2018-04-06T13:41:31Z","2019-01-11T15:02:13Z"
"","21234","Provide HttpWebHandlerAdapter callbacks for tracing/metrics [SPR-16693]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-16693](https://jira.spring.io/browse/SPR-16693?redirect=false)** and commented  Tracing and metrics services typically need to deal with `ServerWebExchange` (they need to fetch information from request attributes) and at the same time they need to be called after error handling to get the proper HTTP status information.  The `HttpWebHandlerAdapter` could provide dedicated callbacks for libraries to hook into; that way, they'd be informed about new requests as soon as they're about to be handled (before even being impacted by `WebFilter`/error handling overhead - and they'd be notified once the response has been handled, as late as possible in the process.  This should provide accurate, low resource, consistent data to those metrics and tracing libraries.  See this [Spring Boot issue for reference](https://github.com/spring-projects/spring-boot/issues/11514).   ---  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/11514","closed","type: enhancement,","spring-projects-issues","2018-04-05T13:32:06Z","2018-04-12T20:55:05Z"
"","21233","PathPatternPredicate leaves path variables in request even if predicate doesn't match [SPR-16692]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-16692](https://jira.spring.io/browse/SPR-16692?redirect=false)** and commented  Given the following `RouterFunction`:  ```java @Bean public RouterFunction router(TestHandler testHandler) {  	return RouterFunctions.nest(path(""/test/{something}""), 			RouterFunctions.route(GET(""/info""), testHandler::withTemplateVariables)) 			.andRoute(method(HttpMethod.GET), testHandler::withoutTemplateVariables); } ```  And its companion handler:  ```java @Component public class TestHandler {  	public Mono withTemplateVariables(ServerRequest request) { 		Map attr = (Map) 				request.attribute(RouterFunctions.URI_TEMPLATE_VARIABLES_ATTRIBUTE).orElse(Collections.emptyMap()); 		return ServerResponse.ok().render(""index""); 	}  	public Mono withoutTemplateVariables(ServerRequest request) { 		Map attr = (Map) 				request.attribute(RouterFunctions.URI_TEMPLATE_VARIABLES_ATTRIBUTE).orElse(Collections.emptyMap()); 		return ServerResponse.ok().render(""index""); 	} } ```  When a client sends a request like `GET /test/spring`, the following happens:  1. first, the request matches the `path(""/test/{something}"")` predicate and adds the path variable to the request 2. then, the nested predicate is tested `GET(""/info"")` but does not match 3. finally, `.andRoute(method(HttpMethod.GET)` matches and its handler is called 4. calling `request.pathVariables()` inside that handler shows state that is relevant to the previously matched predicates, not the current one  Is there a way to invalidate that request attribute?  ---  **Affects:** 5.0.5  **Issue Links:** - #21418 Nested PathPatternPredicate doesn't expose path variables - #21407 PathVariable with nested router function throws IllegalArgumentException - #21743 PathPatternPredicate still changes variables after failed AndPredicate  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a63f04df095afcfb5fdc1be800d374197629c5e0, https://github.com/spring-projects/spring-framework/commit/51325afbcc021ede4fe9cb020f72aa5edcee936d","closed","type: bug,","spring-projects-issues","2018-04-04T16:32:49Z","2019-01-13T20:26:47Z"
"","21231","RestTemplate adds duplicate accept header information [SPR-16690]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-16690](https://jira.spring.io/browse/SPR-16690?redirect=false)** and commented  When `RestTemplate` inspects the available message converters and gets the list of content-types that can be read, duplicate entries are not removed.  See [AcceptHeaderRequestCallback::doWithRequest](https://github.com/spring-projects/spring-framework/blob/e3d0ef6/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java#L843-L862).  This can lead to Accept request headers such as:  ``` ""Accept"": ""text/plain, text/plain, application/json, application/json, application/*+json, application/*+json, */*, */*"", ```    ---  **Affects:** 5.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/44cf002c00228e0a7abd7aa2152702deeb561cf3, https://github.com/spring-projects/spring-framework/commit/69e3fde295d4c04e3b5de9d0c7d747f021cbd9aa","closed","type: bug,","spring-projects-issues","2018-04-04T10:08:11Z","2019-02-11T12:01:11Z"
"","21178","Support AssertJ variant in MockMvc [SPR-16637]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-16637](https://jira.spring.io/browse/SPR-16637?redirect=false)** and commented  This [Spring Boot issue](https://github.com/spring-projects/spring-boot/issues/5729#issuecomment-375745237) shows that many developers would like to use AssertJ-style assertions with MockMvc. This would also be a nice complement to the existing Kotlin support, since Kotlin users seem to favor this style of assertions.  The linked Spring Boot issue contains a fairly advanced branch with a working prototype.   ---  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/5729  8 votes, 12 watchers","open","type: enhancement,","spring-projects-issues","2018-03-23T19:52:21Z","2021-01-25T11:01:45Z"
"","21158","Spring JSTL form tag removes context path if servletRelativeAction starts with context path [SPR-16617]","**[Brett Ryan](https://jira.spring.io/secure/ViewProfile.jspa?name=brett.ryan)** opened **[SPR-16617](https://jira.spring.io/browse/SPR-16617?redirect=false)** and commented  Using the spring jstl form tag attribute `servletRelativeAction` with a value that starts with the context path strips off this from the value rendered.  # Steps to Reproduce  1. Create a new webapp deployed at location `/foo` with a spring MVC context mapped to `/` 2. Create a form JSP using the following content ```html    <%@ page pageEncoding=""UTF-8"" trimDirectiveWhitespaces=""true"" %>    <%@ taglib uri=""http://www.springframework.org/tags/form"" prefix=""form"" %>                  ``` 1. Create a mapping to the above form and observe the output.  # Expected Behavior  Form should render as follows:  ```html      ```  ## Actual Behavior  Form is actually rendered without the leading context path for the first form entry:  ```html     ```  # Workaround  Do not use the spring JSTL form implementation and instead use `` to provide the output context path.  ```html <%@taglib prefix=""c"" uri=""http://java.sun.com/jsp/jstl/core"" %> "" method=""POST"">  ```  Alternatively using the spring `` implementation use the `action` attribute by providing the pageContext's context path:  ```html   ```    ---  **Affects:** 5.0.4","open","in: web,","spring-projects-issues","2018-03-20T04:51:08Z","2019-01-11T15:11:42Z"
"","21458","EnableAsync breaks load order of beans [SPR-16919]","**[Björn Eickvonder](https://jira.spring.io/secure/ViewProfile.jspa?name=eicki)** opened **[SPR-16919](https://jira.spring.io/browse/SPR-16919?redirect=false)** and commented  We use Spring 4.3.17.RELEASE and started using the EnableAsync annotation.  But just adding this to a single configuration class breaks our application. At the same time we include a ConversionServiceFactoryBean to enable mapping String values in configuration to Set\ in a bean. This works perfect, but once we add EnableAsync the ConversionServiceFactoryBean is created to late.  I traced the problem down to the following * The ProxyAsyncConfiguration defines a bean of type AsyncAnnotationBeanPostProcessor * The AbstractAsyncConfiguration uses Autowired to setConfigurers  ```java /**  * Collect any {@link AsyncConfigurer} beans through autowiring.  */ @Autowired(required = false) void setConfigurers(Collection configurers) {   ... } ```  And this is somehow breaking the order how beans are instantiated, if I remove the Autowiring here it works again.   ---  **Affects:** 4.3.17","open","in: core,","spring-projects-issues","2018-06-08T11:09:18Z","2019-01-11T15:41:49Z"
"","21150","Raise error if both @EnableWebMvc and @EnableWebFlux used [SPR-16609]","**[Bjorn Harvold](https://jira.spring.io/secure/ViewProfile.jspa?name=bjornharvold)** opened **[SPR-16609](https://jira.spring.io/browse/SPR-16609?redirect=false)** and commented  Hi,  I just upgraded our existing application from Spring Boot 1.5.9 to Spring Boot 2 and Spring 5. I switched to Undertow and I wrote some reactive code. The tests and the app works fine locally.  In a nutshell, I added a new reactive configuration like so:  ```java @Configuration @EnableWebFlux public class WebFluxConfig {  } ```  and then implemented some reactive Mongo repositories.  I already have an existing configuration for `@EnableWebMvc`.  ```java @Configuration @EnableWebMvc @Slf4j public class WebMvcConfig implements WebMvcConfigurer {     private final ObjectMapper objectMapper;      @Autowired     public WebMvcConfig(ObjectMapper objectMapper) {         this.objectMapper = objectMapper;     }      @Override     public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {         configurer.enable();     }      /**      * Messages to support internationalization/localization.      */     @Bean(name = ""messageSource"")     public MessageSource messageSource() {         ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource();         messageSource.setBasename(""i18n/messages"");         messageSource.setUseCodeAsDefaultMessage(true);          return messageSource;     }      @Override     public void configureMessageConverters(List> converters) { //        log.info(""Configuring http message converters..."");         MappingJackson2HttpMessageConverter jacksonConverter = new MappingJackson2HttpMessageConverter();         List jsonTypes = new ArrayList<>(3);         jsonTypes.add(ApplicationMediaType.APPLICATION_JSON);         jsonTypes.add(ApplicationMediaType.APPLICATION_TRAVELIKO_V1_JSON);         jsonTypes.add(ApplicationMediaType.APPLICATION_TRAVELIKO_V2_JSON);         jacksonConverter.setSupportedMediaTypes(jsonTypes);         jacksonConverter.setObjectMapper(objectMapper);         converters.add(jacksonConverter);          List xmlTypes = new ArrayList<>(1);         xmlTypes.add(ApplicationMediaType.APPLICATION_XML);         Jaxb2RootElementHttpMessageConverter xmlConverter = new Jaxb2RootElementHttpMessageConverter();         xmlConverter.setSupportedMediaTypes(xmlTypes);         converters.add(xmlConverter);     }      @Override     public void addFormatters(FormatterRegistry registry) {         registry.addFormatterForFieldAnnotation(new Jsr310DateTimeFormatAnnotationFormatterFactory());     }      @Bean(name = ""methodValidationPostProcessor"")     public MethodValidationPostProcessor methodValidationPostProcessor() {         MethodValidationPostProcessor methodValidationPostProcessor = new MethodValidationPostProcessor();         methodValidationPostProcessor.setValidator(localValidatorFactoryBean());          return methodValidationPostProcessor;     }      @Bean(name = ""localValidatorFactoryBean"")     public LocalValidatorFactoryBean localValidatorFactoryBean() {         LocalValidatorFactoryBean localValidatorFactoryBean = new LocalValidatorFactoryBean();         localValidatorFactoryBean.setMessageInterpolator(                 new ResourceBundleMessageInterpolator(                         new MessageSourceResourceBundleLocator(messageSource())                 )         );          return localValidatorFactoryBean;     }      @Bean(name = ""localeResolver"")     public LocaleResolver localeResolver() {         return new CustomAcceptHeaderLocaleResolver();     }      @Override     public void addInterceptors(InterceptorRegistry registry) { //        log.info(""Adding interceptors..."");         registry.addInterceptor(new DateTimeZoneHandlerInterceptor());         registry.addInterceptor(new UserLocationHandlerInterceptor()); //        registry.addInterceptor(new LocaleChangeInterceptor()); // default paramName is 'locale' Not supported by out AcceptHeaderLocaleResolver     }      @Override     public void addArgumentResolvers(List argumentResolvers) { //        log.info(""Adding argument resolvers..."");         argumentResolvers.add(new DateTimeZoneHandlerMethodArgumentResolver());         argumentResolvers.add(new LocationHandlerMethodArgumentResolver());     }   } ```  The application has been in production for a couple of years already so the configuration is solid.  However, when I try to deploy this Spring Boot 2 / Undertow app to Google App Engine (JAR), I get this error:  ```java build	18-Mar-2018 21:36:57	[[1;34mINFO[m] GCLOUD: 2018-03-18 14:36:48.909  WARN 1 --- [           main] ConfigServletWebServerApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'mvcUriComponentsContributor' defined in class path resource [org/springframework/web/servlet/config/annotation/DelegatingWebMvcConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.web.method.support.CompositeUriComponentsContributor]: Factory method 'mvcUriComponentsContributor' threw exception; nested exception is java.lang.IllegalStateException: @Bean method WebMvcConfigurationSupport.requestMappingHandlerAdapter called as bean reference for type [org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter] but overridden by non-compatible bean instance of type [org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter]. Overriding bean of same name declared in: class path resource [org/springframework/web/reactive/config/DelegatingWebFluxConfiguration.class] build	18-Mar-2018 21:36:57	[[1;34mINFO[m] GCLOUD: 2018-03-18 14:36:49.257 ERROR 1 --- [           main] o.s.boot.SpringApplication               : Application run failed build	18-Mar-2018 21:36:57	[[1;34mINFO[m] GCLOUD:  build	18-Mar-2018 21:36:57	[[1;34mINFO[m] GCLOUD: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'mvcUriComponentsContributor' defined in class path resource [org/springframework/web/servlet/config/annotation/DelegatingWebMvcConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.web.method.support.CompositeUriComponentsContributor]: Factory method 'mvcUriComponentsContributor' threw exception; nested exception is java.lang.IllegalStateException: @Bean method WebMvcConfigurationSupport.requestMappingHandlerAdapter called as bean reference for type [org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter] but overridden by non-compatible bean instance of type [org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter]. Overriding bean of same name declared in: class path resource [org/springframework/web/reactive/config/DelegatingWebFluxConfiguration.class] build	18-Mar-2018 21:36:57	[[1;34mINFO[m] GCLOUD: 	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:587) ~[spring-beans-5.0.4.RELEASE.jar!/:5.0.4.RELEASE] build	18-Mar-2018 21:36:57	[[1;34mINFO[m] GCLOUD: 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1250) ~[spring-beans-5.0.4.RELEASE.jar!/:5.0.4.RELEASE] build	18-Mar-2018 21:36:57	[[1;34mINFO[m] GCLOUD: 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1099) ~[spring-beans-5.0.4.RELEASE.jar!/:5.0.4.RELEASE] build	18-Mar-2018 21:36:57	[[1;34mINFO[m] GCLOUD: 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545) ~[spring-beans-5.0.4.RELEASE.jar!/:5.0.4.RELEASE] build	18-Mar-2018 21:36:57	[[1;34mINFO[m] GCLOUD: 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:502) ~[spring-beans-5.0.4.RELEASE.jar!/:5.0.4.RELEASE] build	18-Mar-2018 21:36:57	[[1;34mINFO[m] GCLOUD: 	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:312) ~[spring-beans-5.0.4.RELEASE.jar!/:5.0.4.RELEASE] build	18-Mar-2018 21:36:57	[[1;34mINFO[m] GCLOUD: 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) ~[spring-beans-5.0.4.RELEASE.jar!/:5.0.4.RELEASE] build	18-Mar-2018 21:36:57	[[1;34mINFO[m] GCLOUD: 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:310) ~[spring-beans-5.0.4.RELEASE.jar!/:5.0.4.RELEASE] build	18-Mar-2018 21:36:57	[[1;34mINFO[m] GCLOUD: 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200) ~[spring-beans-5.0.4.RELEASE.jar!/:5.0.4.RELEASE] build	18-Mar-2018 21:36:57	[[1;34mINFO[m] GCLOUD: 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:760) ~[spring-beans-5.0.4.RELEASE.jar!/:5.0.4.RELEASE] build	18-Mar-2018 21:36:57	[[1;34mINFO[m] GCLOUD: 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:868) ~[spring-context-5.0.4.RELEASE.jar!/:5.0.4.RELEASE] build	18-Mar-2018 21:36:57	[[1;34mINFO[m] GCLOUD: 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549) ~[spring-context-5.0.4.RELEASE.jar!/:5.0.4.RELEASE] build	18-Mar-2018 21:36:57	[[1;34mINFO[m] GCLOUD: 	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:140) ~[spring-boot-2.0.0.RELEASE.jar!/:2.0.0.RELEASE] build	18-Mar-2018 21:36:57	[[1;34mINFO[m] GCLOUD: 	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:752) [spring-boot-2.0.0.RELEASE.jar!/:2.0.0.RELEASE] build	18-Mar-2018 21:36:57	[[1;34mINFO[m] GCLOUD: 	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:388) [spring-boot-2.0.0.RELEASE.jar!/:2.0.0.RELEASE] build	18-Mar-2018 21:36:57	[[1;34mINFO[m] GCLOUD: 	at org.springframework.boot.SpringApplication.run(SpringApplication.java:327) [spring-boot-2.0.0.RELEASE.jar!/:2.0.0.RELEASE] build	18-Mar-2018 21:36:57	[[1;34mINFO[m] GCLOUD: 	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1246) [spring-boot-2.0.0.RELEASE.jar!/:2.0.0.RELEASE] build	18-Mar-2018 21:36:57	[[1;34mINFO[m] GCLOUD: 	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1234) [spring-boot-2.0.0.RELEASE.jar!/:2.0.0.RELEASE] build	18-Mar-2018 21:36:57	[[1;34mINFO[m] GCLOUD: 	at com.traveliko.platform.web.api.TravelikoWebApiApplication.main(TravelikoWebApiApplication.java:16) [classes!/:5.0.12] build	18-Mar-2018 21:36:57	[[1;34mINFO[m] GCLOUD: 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_131] build	18-Mar-2018 21:36:57	[[1;34mINFO[m] GCLOUD: 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_131] build	18-Mar-2018 21:36:57	[[1;34mINFO[m] GCLOUD: 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_131] build	18-Mar-2018 21:36:57	[[1;34mINFO[m] GCLOUD: 	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_131] build	18-Mar-2018 21:36:57	[[1;34mINFO[m] GCLOUD: 	at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:48) [app.jar:5.0.12] build	18-Mar-2018 21:36:57	[[1;34mINFO[m] GCLOUD: 	at org.springframework.boot.loader.Launcher.launch(Launcher.java:87) [app.jar:5.0.12] build	18-Mar-2018 21:36:57	[[1;34mINFO[m] GCLOUD: 	at org.springframework.boot.loader.Launcher.launch(Launcher.java:50) [app.jar:5.0.12] build	18-Mar-2018 21:36:57	[[1;34mINFO[m] GCLOUD: 	at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:51) [app.jar:5.0.12] build	18-Mar-2018 21:36:57	[[1;34mINFO[m] GCLOUD: Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.web.method.support.CompositeUriComponentsContributor]: Factory method 'mvcUriComponentsContributor' threw exception; nested exception is java.lang.IllegalStateException: @Bean method WebMvcConfigurationSupport.requestMappingHandlerAdapter called as bean reference for type [org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter] but overridden by non-compatible bean instance of type [org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter]. Overriding bean of same name declared in: class path resource [org/springframework/web/reactive/config/DelegatingWebFluxConfiguration.class] build	18-Mar-2018 21:36:57	[[1;34mINFO[m] GCLOUD: 	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185) ~[spring-beans-5.0.4.RELEASE.jar!/:5.0.4.RELEASE] build	18-Mar-2018 21:36:57	[[1;34mINFO[m] GCLOUD: 	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:579) ~[spring-beans-5.0.4.RELEASE.jar!/:5.0.4.RELEASE] build	18-Mar-2018 21:36:57	[[1;34mINFO[m] GCLOUD: 	... 26 common frames omitted build	18-Mar-2018 21:36:57	[[1;34mINFO[m] GCLOUD: Caused by: java.lang.IllegalStateException: @Bean method WebMvcConfigurationSupport.requestMappingHandlerAdapter called as bean reference for type [org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter] but overridden by non-compatible bean instance of type [org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter]. Overriding bean of same name declared in: class path resource [org/springframework/web/reactive/config/DelegatingWebFluxConfiguration.class] build	18-Mar-2018 21:36:57	[[1;34mINFO[m] GCLOUD: 	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.resolveBeanReference(ConfigurationClassEnhancer.java:415) ~[spring-context-5.0.4.RELEASE.jar!/:5.0.4.RELEASE] build	18-Mar-2018 21:36:57	[[1;34mINFO[m] GCLOUD: 	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:364) ~[spring-context-5.0.4.RELEASE.jar!/:5.0.4.RELEASE] build	18-Mar-2018 21:36:57	[[1;34mINFO[m] GCLOUD: 	at org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration$$EnhancerBySpringCGLIB$$e7b0733e.requestMappingHandlerAdapter() ~[spring-webmvc-5.0.4.RELEASE.jar!/:5.0.4.RELEASE] build	18-Mar-2018 21:36:57	[[1;34mINFO[m] GCLOUD: 	at org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport.mvcUriComponentsContributor(WebMvcConfigurationSupport.java:857) ~[spring-webmvc-5.0.4.RELEASE.jar!/:5.0.4.RELEASE] build	18-Mar-2018 21:36:57	[[1;34mINFO[m] GCLOUD: 	at org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration$$EnhancerBySpringCGLIB$$e7b0733e.CGLIB$mvcUriComponentsContributor$36() ~[spring-webmvc-5.0.4.RELEASE.jar!/:5.0.4.RELEASE] build	18-Mar-2018 21:36:57	[[1;34mINFO[m] GCLOUD: 	at org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration$$EnhancerBySpringCGLIB$$e7b0733e$$FastClassBySpringCGLIB$$a9b2a816.invoke() ~[spring-webmvc-5.0.4.RELEASE.jar!/:5.0.4.RELEASE] build	18-Mar-2018 21:36:57	[[1;34mINFO[m] GCLOUD: 	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228) ~[spring-core-5.0.4.RELEASE.jar!/:5.0.4.RELEASE] build	18-Mar-2018 21:36:57	[[1;34mINFO[m] GCLOUD: 	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:361) ~[spring-context-5.0.4.RELEASE.jar!/:5.0.4.RELEASE] build	18-Mar-2018 21:36:57	[[1;34mINFO[m] GCLOUD: 	at org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration$$EnhancerBySpringCGLIB$$e7b0733e.mvcUriComponentsContributor() ~[spring-webmvc-5.0.4.RELEASE.jar!/:5.0.4.RELEASE] build	18-Mar-2018 21:36:57	[[1;34mINFO[m] GCLOUD: 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_131] build	18-Mar-2018 21:36:57	[[1;34mINFO[m] GCLOUD: 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_131] build	18-Mar-2018 21:36:57	[[1;34mINFO[m] GCLOUD: 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_131] build	18-Mar-2018 21:36:57	[[1;34mINFO[m] GCLOUD: 	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_131] build	18-Mar-2018 21:36:57	[[1;34mINFO[m] GCLOUD: 	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154) ~[spring-beans-5.0.4.RELEASE.jar!/:5.0.4.RELEASE] build	18-Mar-2018 21:36:57	[[1;34mINFO[m] GCLOUD: 	... 27 common frames omitted ```    ---  **Affects:** 5.0.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/32faf09a8069ee33822216317d5965db2d1e9064","closed","type: enhancement,","spring-projects-issues","2018-03-18T15:14:55Z","2018-07-26T08:09:33Z"
"","21568","Boundary info in Content-Type multipart request header not parsed correctly because of charset [SPR-17030]","**[bissorc](https://jira.spring.io/secure/ViewProfile.jspa?name=bissorc)** opened **[SPR-17030](https://jira.spring.io/browse/SPR-17030?redirect=false)** and commented  I’m using Spring Rest Template to upload a file. Code looks as follows:  ``` MultipartBodyBuilder builder = new MultipartBodyBuilder(); builder.part(""file"", ""2;3;4"".getBytes()); MultiValueMap> body = builder.build(); HttpHeaders headers = new HttpHeaders(); headers.setAccept(Collections.singletonList(MediaType.ALL)); headers.setContentType(MediaType.MULTIPART_FORM_DATA); HttpEntity> requestEntity = new HttpEntity(body, headers); RestTemplate restTemplate = new RestTemplate(); restTemplate.postForLocation(""***"", requestEntity, String.class); ```  This leads to the following raw request:  ``` POST *** HTTP/1.1 Accept: */* Content-Type: multipart/form-data;boundary=059h2BBM-KlM_XP2rY8W1X3_jnzFLcYY;charset=UTF-8 User-Agent: Java/1.8.0_121 Host: ***:*** Connection: keep-alive Content-Length: 187  --059h2BBM-KlM_XP2rY8W1X3_jnzFLcYY Content-Disposition: form-data; name=""file"" Content-Type: text/plain;charset=UTF-8 Content-Length: 5  2;3;4 --059h2BBM-KlM_XP2rY8W1X3_jnzFLcYY— ```  The problem is the following line:  ``` Content-Type: multipart/form-data;boundary=059h2BBM-KlM_XP2rY8W1X3_jnzFLcYY;charset=UTF-8 ```  Spring Rest Template adds `;charset=UTF-8` to the content type and this leads to problems when. I found no possibility to remove the charset. From my point of view this is a bug since the charset should not be part of the content type?!  ---  **Affects:** 5.0.7  **Issue Links:** - #21599 Multipart: Invalid boundary with RestTemplate (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f89511e7fe9c32ad28de2c00a6197ca9ad6ce937, https://github.com/spring-projects/spring-framework/commit/390bb871d85f56aaeed98aeb45d688fcf35af8e7","closed","type: bug,","spring-projects-issues","2018-07-11T07:35:13Z","2019-01-11T12:49:01Z"
"","21451","AbstractMethodMessageHandler does not rethrow Errors [SPR-16912]","**[Bernhard Streit](https://jira.spring.io/secure/ViewProfile.jspa?name=bstbln)** opened **[SPR-16912](https://jira.spring.io/browse/SPR-16912?redirect=false)** and commented  We're using Spring Cloud AWS to receive messages from SQS.  Now, due to a bug, one of our services threw an OutOfMemoryError.  Having a redrive policy to a dead-letter queue set on the SQS queue, I assumed that with deletion policy NO_REDRIVE, the messages would get returned to the queue.  But that is **not** happening, as the AbstractMethodMessageHandler, that re-throws exceptions in case they occur, does **not** do that with errors (to be more precise, with all Throwables that are not of type Exception):  ```java try { 	[...]  } catch (Exception ex) { 	processHandlerMethodException(handlerMethod, ex, message); } catch (Throwable ex) { 	if (logger.isErrorEnabled()) { 		logger.error(""Error while processing message "" + message, ex); 	} } ```  That has the effect that the SimpleMessageListenerContainer of Spring Cloud AWS Messaging assumes the execution finished without any error, and hence deletes the message from the queue:  ```java  try {         executeMessage(queueMessage);         applyDeletionPolicyOnSuccess(receiptHandle); } catch (MessagingException messagingException) {         applyDeletionPolicyOnError(receiptHandle, messagingException); } ```  executeMessage() returns silently, as the throwable was swallowed, and hence, applyDeletionPolicy**OnSuccess**() is executed next.  In case of an Exception, it would execute applyDeletionPolicy**OnError**, but not in case of an error.  **Question:** Is the Spring Framework violating the contract, by swallowing the Error? IMHO it should be re-thrown, just like ordinary Exceptions are.  Or is the SimpleMessageListenerContainer wrong to assume that if executeMessage has returned normally, the processing went fine without any problem? If yes, how can it figure out that an error has occurred?    ---  **Affects:** 4.3.17, 5.0.6  **Issue Links:** - #15732 `@ExceptionHandler` cannot handler java.lang.Error despite the annotation accept ? extends Throwable - #18995 `@MessageExceptionHandler` should match cause as well (analogous to `@ExceptionHandler`)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1d6f71718de570db41ea2fe6fce66977dc1cd864, https://github.com/spring-projects/spring-framework/commit/f39adcf8658945a4fc44b029104d35b3eb691667, https://github.com/spring-projects/spring-framework/commit/0c8cfa05b520f65dd00814ba5f6b1d8de6805d56, https://github.com/spring-projects/spring-framework/commit/646d7f9e57d1a6bbbd8403cc57f2b9fd4ae732b2  **Backported to:** [4.3.18](https://github.com/spring-projects/spring-framework/milestone/167?closed=1)","closed","type: bug,","spring-projects-issues","2018-06-06T13:22:46Z","2019-01-13T04:39:58Z"
"","21781","Provide API in WebTestClient to test SSE [SPR-17248]","**[Bernd Kolb](https://jira.spring.io/secure/ViewProfile.jspa?name=bkolb)** opened **[SPR-17248](https://jira.spring.io/browse/SPR-17248?redirect=false)** and commented  **Summary** As I user I want to test a continuous, infinite stream of events. I have a controller that provides a `Flux","closed","type: enhancement,","spring-projects-issues","2018-09-05T17:15:34Z","2022-07-04T13:39:22Z"
"","21378","PathMatchingResourcePatternResolver should enforce OS-independent sorting of directory content [SPR-16838]","**[Benoit](https://jira.spring.io/secure/ViewProfile.jspa?name=benbenw)** opened **[SPR-16838](https://jira.spring.io/browse/SPR-16838?redirect=false)** and commented  A sort was added in #18657 but the default File#compareTo depends upon the underlying system.  The ordering of the ressources returned by PathMatchingResourcePatternResolver#retrieveMatchingFiles may differ between OS (Windows, Unix).  This leads to subtle bugs hard to track.   This PR replace the default sort with one based on the file name.  ---  **Affects:** 5.0.6  **Issue Links:** - #18657 PathMatchingResourcePatternResolver should enforce consistent alphabetical sorting of directory content - #21373 java.nio.file.Path support in FileSystemResource (with regular createRelative behavior, superseding PathResource)  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1832, and commits https://github.com/spring-projects/spring-framework/commit/bb6ab5dc91bfc6d65c8ed7cc89f226c9bfc59df8","closed","type: enhancement,","spring-projects-issues","2018-05-18T09:30:34Z","2019-01-11T17:09:55Z"
"","21813","Kotlin Extension Property support for BeanWrapper [SPR-17280]","**[Benjamin Winterberg](https://jira.spring.io/secure/ViewProfile.jspa?name=winterbe)** opened **[SPR-17280](https://jira.spring.io/browse/SPR-17280?redirect=false)** and commented  It would be really helpful for my current project if `BeanWrapper` would support resolving Kotlin Extension Properties.  Please see the following example for demonstration purpose:  ``` data class Person(val firstName: String, val lastName: String)  val Person.fullName: String     get() = ""$firstName $lastName""  ...  val person = Person(""Peter"", ""Parker"") val beanWrapper = PropertyAccessorFactory.forBeanPropertyAccess(subject) assertEquals(""Peter Parker"", beanWrapper.getPropertyValue(""fullName"")) ```  Extension Properties are a great way to structure large domain models without cluttering classes with usecase specific domain logic. We currently migrate large parts of our Java domain models to Kotlin. Since we use BeanWrapper for a few major features of our application, we currently have to work around Kotlin extension properties by using reflection to access those properties in case beanWrapper.isReadableProperty yields false.  It would be really helpful if BeanWrapper would support this out of the box, e.g. by passing packages including Kotlin extensions as a second optional argument:  ``` val beanWrapper = PropertyAccessorFactory.forBeanPropertyAccess(subject, extensionPackages) ```    --- No further details from [SPR-17280](https://jira.spring.io/browse/SPR-17280?redirect=false)","closed","in: core,","spring-projects-issues","2018-09-17T11:48:53Z","2022-01-19T11:02:38Z"
"","21196","IllegalStateException when using ServerEndpointExporter and running the project as a war in Jetty [SPR-16655]","**[Artur](https://jira.spring.io/secure/ViewProfile.jspa?name=artur)** opened **[SPR-16655](https://jira.spring.io/browse/SPR-16655?redirect=false)** and commented  Moved from https://github.com/spring-projects/spring-boot/issues/12657  Run into with Vaadin Flow when enabling JSR-356 websocket support for Spring Boot applications. The websocket endpoints are registered using `VaadinWebsocketEndpointExporter extends ServerEndpointExporter`. This works fine for the embedded case, i.e. launching the application class in Eclipse/IDEA but if you create a war file and deploy to Jetty, then it fails.  `ServerEndpointExporter` has an internal assertion in `afterPropertiesSet`, which fails because the Server Container is not available.  ``` Caused by: java.lang.IllegalStateException: javax.websocket.server.ServerContainer not available     at org.springframework.util.Assert.state(Assert.java:73)     at org.springframework.web.socket.server.standard.ServerEndpointExporter.afterPropertiesSet(ServerEndpointExporter.java:106)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1769)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1706) ... ```  You can see the problem if you do  ``` git clone git@github.com:vaadin/flow.git git checkout be6bb15a24ba2dcdb0a0f411bd34512ba3ddeaa2 # This is the current master without any workaround cd flow mvn install -DskipTests ```  as `flow-tests/test-spring-war` will fail with `IllegalStateException`  Some more info in https://github.com/vaadin/flow/blob/be6bb15a24ba2dcdb0a0f411bd34512ba3ddeaa2/flow-spring-addon/src/main/java/com/vaadin/flow/spring/VaadinWebsocketEndpointExporter.java#L38   ---  **Affects:** 5.0.4","closed","status: declined,","spring-projects-issues","2018-03-28T16:40:56Z","2019-01-12T16:21:34Z"
"","21377","When we remove bean from the application context, its aliases must be cleared as well [SPR-16837]","**[Artem Bilan](https://jira.spring.io/secure/ViewProfile.jspa?name=abilan)** opened **[SPR-16837](https://jira.spring.io/browse/SPR-16837?redirect=false)** and commented  The simple test-case to reproduce:  ```java @Test public void aliasesConflict() { 	GenericApplicationContext applicationContext = new GenericApplicationContext(); 	applicationContext.setAllowBeanDefinitionOverriding(false);  	String beanName = ""foo""; 	String alias = ""bar"";  	applicationContext.registerBean(beanName, String.class); 	applicationContext.registerAlias(beanName, alias);  	applicationContext.removeBeanDefinition(beanName);  	applicationContext.registerBean(""foo2"", String.class); 	applicationContext.registerAlias(""foo2"", alias);  	applicationContext.close(); } ```  Ends up with an exception:  ``` java.lang.IllegalStateException: Cannot register alias 'bar' for name 'foo2': It is already registered for name 'foo'.  	at org.springframework.core.SimpleAliasRegistry.registerAlias(SimpleAliasRegistry.java:60) 	at org.springframework.context.support.GenericApplicationContext.registerAlias(GenericApplicationContext.java:341) ```  The point is: there is no a bean for that alias any more, so why do we keep it?  Thanks   ---  **Affects:** 5.0.6  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1837","open","in: core,","spring-projects-issues","2018-05-17T19:30:47Z","2019-01-11T17:10:46Z"
"","21565","HtmlUnitRequestBuilder decodes plus sign in query parameter [SPR-17027]","**[Arne Landwehr](https://jira.spring.io/secure/ViewProfile.jspa?name=arnelandwehr)** opened **[SPR-17027](https://jira.spring.io/browse/SPR-17027?redirect=false)** and commented  `UriComponentsBuilder` doesn't encode ""+"" signs anymore if they are part of a query parameter (#21259), which is the desired behavior according to [this](https://jira.spring.io/browse/SPR-16202?focusedCommentId=156781&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-156781).  Unfortunately, `HtmlUnitRequestBuilder` tries to decode the not encoded plus sign and we therefore end up with a space which breaks the URI.  Here is our concrete setup:  We have a spring boot 2 app with Thymeleaf and automatic UI tests.  Thymeleaf template:  ```html","closed","type: bug,","spring-projects-issues","2018-07-10T09:26:02Z","2019-01-11T12:49:32Z"
"","21260","Improve Timestamp support with postgres [SPR-16719]","**[Arnaud Mergey](https://jira.spring.io/secure/ViewProfile.jspa?name=amergey)** opened **[SPR-16719](https://jira.spring.io/browse/SPR-16719?redirect=false)** and commented  I was facing this ""seem to be"" famous issue by setting a timestamp binding against postgres.  Following test fails with **ERROR: could not determine data type of parameter $1**  ```java @Test public void testGetCurrentDate() {      NamedParameterJdbcTemplate template = new NamedParameterJdbcTemplate(datasources.get(dbType));      PlatformTransactionManager manager = new DataSourceTransactionManager(datasources.get(dbType));      final Timestamp ts = new Timestamp(System             .currentTimeMillis());      new TransactionTemplate(manager).execute(new TransactionCallbackWithoutResult() {          @Override         protected void doInTransactionWithoutResult(TransactionStatus status) {             template.update(""create table test_timestamp (col timestamp)"", Collections.emptyMap());             template.update(""insert into test_timestamp (col) values (:TS) "", Collections.singletonMap(""TS"", ts));         }     });      Assert.assertEquals((Integer) 1, new TransactionTemplate(manager).execute(new TransactionCallback() {          @Override         public Integer doInTransaction(TransactionStatus status) {             MapSqlParameterSource paramsSource = new MapSqlParameterSource();             paramsSource.addValue(""TS"", ts, Types.TIMESTAMP, ""timestamp"");              return template.queryForObject(""select 1 from test_timestamp where :TS is not null and col=:TS "", paramsSource,                     Integer.class);          }     }));  } ```  I found a discution with postgres that explain why: http://www.postgresql-archive.org/quot-could-not-determine-data-type-of-parameter-quot-with-timestamp-td5995489.html  They give a workaround for that (Setting a PGTimestamp instance instead of Timestamp). I was wondering if it is something that could be implemented inside Spring JDBC to increase portability accross multiple databases. It seems there are already some specific code in StatementCreatorUtil related to similar things.  If you think that it is something that makes sense, I can make a pull request   ---  **Affects:** 5.0.5  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1790","closed","in: data,","spring-projects-issues","2018-04-12T07:50:16Z","2021-12-21T08:06:46Z"
"","21856","Add RequestPredicate Visitor to WebFlux.fn [SPR-17322]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-17322](https://jira.spring.io/browse/SPR-17322?redirect=false)** and commented  Next to the `RouterFunctions.Visitor`, we should have a `RequestPredicates.Visitor`, which allows one to iterate over the matching predicates.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b1b28d46414c6aff08684705fc3997718dcf5205, https://github.com/spring-projects/spring-framework/commit/88cb126511779608d377b33793a8b00cfded7602","closed","type: enhancement,","spring-projects-issues","2018-10-02T09:33:48Z","2019-01-13T20:01:34Z"
"","21837","Required attribute 'RouterFunctions.request' is missing [SPR-17304]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-17304](https://jira.spring.io/browse/SPR-17304?redirect=false)** and commented  Using nested router functions in Spring 5.1 results in the following exception:  > Required attribute 'org.springframework.web.reactive.function.server.RouterFunctions.request' is missing.  This is probably due to attributes not being properly propagated through the nested requests.  ---  **Affects:** 5.1 GA  **Issue Links:** - #21847 Internal Server Error: Required attribute 'org.springframework.web.reactive.function.server.RouterFunctions.request' is missing (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ff7ccf0d4eeb081858f270bb154f911a1960f871  1 votes, 4 watchers","closed","type: bug,","spring-projects-issues","2018-09-26T18:44:39Z","2019-01-11T14:17:52Z"
"","21779","Use doOnDiscard to free internally queued data buffers [SPR-17246]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-17246](https://jira.spring.io/browse/SPR-17246?redirect=false)** and commented  We should leverage the upcoming Reactor core feature `onDiscardQueueWithClear`  to free the internally queued `DataBuffer` instances when the publisher is cancelled or terminated on an error (see [reactor core pr #1155](https://github.com/reactor/reactor-core/pull/1155)).  This issue was initially part of #21563.  ---  **Issue Links:** - #21563 DataBufferUtils#join could leak buffers in case of error from the source - #21941 Review DataBuffer handling code for proper release in case of error or cancellation  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8a4835368dadf1df14a149dd997722edf3efd8c5","closed","type: enhancement,","spring-projects-issues","2018-09-05T09:32:27Z","2019-01-11T14:13:37Z"
"","21554","Improve RouterFunctions reference documentation [SPR-17016]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-17016](https://jira.spring.io/browse/SPR-17016?redirect=false)** and commented  With the implementation of #21491, we should improve the reference [documentation for HandlerFunctions](https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#webflux-fn-handler-functions) to use `RouterFunctions.route()`.  ---  **Issue Links:** - #21491 Create DSL for RouterFunction and RouterFunctions  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fedbb09ad900ab47dec2d15da90b3ba3ed4a67e6","closed","type: task,","spring-projects-issues","2018-07-06T09:50:51Z","2019-01-11T12:49:49Z"
"","21491","Create DSL for RouterFunction and RouterFunctions [SPR-16953]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-16953](https://jira.spring.io/browse/SPR-16953?redirect=false)** and commented  We should add a (Java) DSL to org.springframework.web.servlet.function that makes it easier to discover the routing possibilities that all the request predicates offer.  So, instead of writing  ``` RouterFunction routerFunction = route(GET(""/pets/{id}"", request -> ServerResponse.ok.build()) ```  where both `route` and `GET` are statically imported, it should be more discoverable.  For instance, by introducing a builder with methods that directly express common request predicates, eg. `routeGET(String, HandlerFunction)` instead of `route(RequestPredicate, HandlerFunction`.  ---  **Issue Links:** - #21490 Introduce Servlet version HandlerFunction and RouterFunction - #21554 Improve RouterFunctions reference documentation  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/91e96d8084acb7d92a1a2f086f30cd3381b26440, https://github.com/spring-projects/spring-framework/commit/8202052b389b47dbf3be1678f3e22291b99b8334","closed","type: enhancement,","spring-projects-issues","2018-06-18T13:50:18Z","2019-01-13T20:25:31Z"
"","21490","Introduce Servlet version HandlerFunction and RouterFunction [SPR-16952]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-16952](https://jira.spring.io/browse/SPR-16952?redirect=false)** and commented  In Spring 5.0, we introduced the functional web framework consisting of `HandlerFunction`, `RouterFunction`, and related types that runs on Reactive runtimes like Netty (in short: webflux.fn, or the package `org.springframework.web.reactive.function.server`).  Users have since expressed interest in a similar framework, but then running on synchronous, servlet environments. This framework will not built on Reactor, but rather use Java 8 `Stream` and `Optional` instead. Package will most likely be `org.springframework.web.servlet.function`, short name webmvc.fn.  ---  **Issue Links:** - #21491 Create DSL for RouterFunction and RouterFunctions","closed","type: enhancement,","spring-projects-issues","2018-06-18T13:21:28Z","2019-04-04T10:19:21Z"
"","21369","Improve toString in path extension and query parameter predicates [SPR-16829]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-16829](https://jira.spring.io/browse/SPR-16829?redirect=false)** and commented  Unlike the other `RequestPredicate` implementations, the `RequestPredicates.queryParam` and `RequestPredicates.pathExtension` predicates are implemented as inline lambda's. Lambda's do not have a usable `toString`, making them useless for logging purposes.  We should move the lambda's for these extensions to inner classes, so that they can have a proper `toString`}.   --- No further details from [SPR-16829](https://jira.spring.io/browse/SPR-16829?redirect=false)","closed","type: enhancement,","spring-projects-issues","2018-05-16T08:53:37Z","2018-06-12T15:44:03Z"
"","21247","Provide simple way to create ServerRequest [SPR-16706]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-16706](https://jira.spring.io/browse/SPR-16706?redirect=false)** and commented  Similar to #21096, but for the server side: provide a builder for the ServerRequest.  ---  **Issue Links:** - #21096 Provide simple way to create ClientResponse","closed","type: enhancement,","spring-projects-issues","2018-04-10T09:39:36Z","2019-01-11T16:45:20Z"
"","21191","ServletUriComponentsBuilder should replace context path when X-Forwarded-Prefix is present [SPR-16650]","**[Antonio Petrelli](https://jira.spring.io/secure/ViewProfile.jspa?name=apetrelli)** opened **[SPR-16650](https://jira.spring.io/browse/SPR-16650?redirect=false)** and commented  `ServletUriComponentsBuilder.fromContextPath`, if the X-Forwarded-Prefix header is present, prepends the header value to the context path. It should, instead, **replace** it, since this is what ForwardedHeaderFilter does.  In my case I see URLs in Spring Data Rest results are affected.  Workaround: use `ForwardedHeaderFilter` instead of relying on `ServletUriComponentsBuilder`.  ---  **Affects:** 4.3.14  **Issue Links:** - #17105 Support for X-Forwarded-Prefix in ServletUriComponentsBuilder - #18842 ForwardedHeaderFilter could support X-Forwarded-Prefix as well - #21201 UriComponentsBuilder Forwarded header parsing can throw java.lang.NumberFormatException  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/986d219391d2e1312cccd08ea51f4a4fb5058020, https://github.com/spring-projects/spring-framework/commit/240d6f52c90fac68146bd38cea79ea6e099c6a00  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","type: bug,","spring-projects-issues","2018-03-27T10:43:56Z","2019-01-11T15:07:36Z"
"","21482","Critical point in the ConversionUtils [SPR-16943]","**[Anton Teroshyn](https://jira.spring.io/secure/ViewProfile.jspa?name=renigal1)** opened **[SPR-16943](https://jira.spring.io/browse/SPR-16943?redirect=false)** and commented  When viewing Spring version 5.0.* sources. , I noticed a violation in the exception handling technique, in ConversionUtils: **... catch (Throwable ex) ...**. I tested it, and as results, if during a conversion, we get **OutOfMemoryError**, it will catch it and wrap it as a **ConversionFailedException**. I think this will have a bad effect on the JVM.   ```java //... @Nullable public static Object invokeConverter(GenericConverter converter, @Nullable Object source, TypeDescriptor sourceType, TypeDescriptor targetType) { try  { return converter.convert(source, sourceType, targetType); }  catch (ConversionFailedException ex)  { throw ex; }  catch (Throwable ex)  { throw new ConversionFailedException(sourceType, targetType, source, ex); }  } //... ```  Manually throwing **OutOfMemoryError**:  ```java [13:47:03 15.06] ERROR DispatcherServlet[507]: Context initialization failed org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'authManager': Invocation of init method failed; nested exception is org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.String] to type [com.example.web.managers.MyModel] for value ''; nested exception is java.lang.OutOfMemoryError: Fatality! 	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeInitialization(InitDestroyAnnotationBeanPostProcessor.java:138) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:423) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1696) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:583) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:502) 	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:312) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:310) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:756) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:868) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549) 	at org.springframework.web.servlet.FrameworkServlet.configureAndRefreshWebApplicationContext(FrameworkServlet.java:676) 	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:642) 	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:690) 	at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:558) 	at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:499) 	at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:172) 	at javax.servlet.GenericServlet.init(GenericServlet.java:158) 	at org.apache.catalina.core.StandardWrapper.initServlet(StandardWrapper.java:1227) 	at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1140) 	at org.apache.catalina.core.StandardWrapper.load(StandardWrapper.java:1027) 	at org.apache.catalina.core.StandardContext.loadOnStartup(StandardContext.java:5038) 	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5348) 	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145) 	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:753) 	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:729) 	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:717) 	at org.apache.catalina.startup.HostConfig.manageApp(HostConfig.java:1733) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:498) 	at org.apache.tomcat.util.modeler.BaseModelMBean.invoke(BaseModelMBean.java:300) 	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819) 	at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:801) 	at org.apache.catalina.mbeans.MBeanFactory.createStandardContext(MBeanFactory.java:484) 	at org.apache.catalina.mbeans.MBeanFactory.createStandardContext(MBeanFactory.java:433) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:498) 	at org.apache.tomcat.util.modeler.BaseModelMBean.invoke(BaseModelMBean.java:300) 	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819) 	at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:801) 	at javax.management.remote.rmi.RMIConnectionImpl.doOperation(RMIConnectionImpl.java:1468) 	at javax.management.remote.rmi.RMIConnectionImpl.access$300(RMIConnectionImpl.java:76) 	at javax.management.remote.rmi.RMIConnectionImpl$PrivilegedOperation.run(RMIConnectionImpl.java:1309) 	at javax.management.remote.rmi.RMIConnectionImpl.doPrivilegedOperation(RMIConnectionImpl.java:1401) 	at javax.management.remote.rmi.RMIConnectionImpl.invoke(RMIConnectionImpl.java:829) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:498) 	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:357) 	at sun.rmi.transport.Transport$1.run(Transport.java:200) 	at sun.rmi.transport.Transport$1.run(Transport.java:197) 	at java.security.AccessController.doPrivileged(Native Method) 	at sun.rmi.transport.Transport.serviceCall(Transport.java:196) 	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:568) 	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:826) 	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:683) 	at java.security.AccessController.doPrivileged(Native Method) 	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:682) 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) 	at java.lang.Thread.run(Thread.java:748) Caused by: org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.String] to type [com.example.web.managers.MyModel] for value ''; nested exception is java.lang.OutOfMemoryError: Fatality! 	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:46) 	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:191) 	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:174) 	at com.example.web.managers.AuthManager.init(AuthManager.java:51) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:498) 	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleElement.invoke(InitDestroyAnnotationBeanPostProcessor.java:369) 	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMetadata.invokeInitMethods(InitDestroyAnnotationBeanPostProcessor.java:312) 	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeInitialization(InitDestroyAnnotationBeanPostProcessor.java:135) 	... 66 more Caused by: java.lang.OutOfMemoryError: Fatality! 	at com.example.support.converters.test.AnyToModelTestConverter.convert(AnyToModelTestConverter.java:18) 	at com.example.support.converters.test.AnyToModelTestConverter.convert(AnyToModelTestConverter.java:10) 	at org.springframework.core.convert.support.GenericConversionService$ConverterAdapter.convert(GenericConversionService.java:385) 	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:40) 	... 76 more ```  p.s. Also, the same behavior is investigating in [DATACMNS-576](https://jira.spring.io/browse/DATACMNS-576)   ---  **Affects:** 5.0.7","closed","in: core,","spring-projects-issues","2018-06-15T11:03:32Z","2019-01-12T16:21:06Z"
"","21285","Decoding ServerSentEvent fails when using generic type [SPR-16744]","**[Anton Brok-Volchansky](https://jira.spring.io/secure/ViewProfile.jspa?name=ant_bv)** opened **[SPR-16744](https://jira.spring.io/browse/SPR-16744?redirect=false)** and commented  First element is decoded correct, but stream fails on the second element:  ```java @Test public void sseAsEventOfObject() { 	ParameterizedTypeReference> type = new ParameterizedTypeReference>() {};  	Flux> result = this.webClient.get() 			.uri(""/sseeventperson"") 			.accept(TEXT_EVENT_STREAM) 			.retrieve() 			.bodyToFlux(type);  	StepVerifier.create(result) 			.consumeNextWith( event -> { 				assertEquals(""1"", event.id()); 				assertEquals(new Person(""Jonathan"", ""Smith""), event.data()); 			}) 			.consumeNextWith( event -> { 				assertEquals(""2"", event.id()); 				assertEquals(new Person(""Jonathan"", ""Doe""), event.data()); 			}) 			.expectComplete() 			.verify(Duration.ofSeconds(5555L)); } ```  (Other code is ommited) When using _String_ as generic parameter, there is no problem at all (as well as in your tests there are no problem when they run). But when I debug the SSE reader and SSE writer in case of use _Person_, I see two new line between elements instead of one.  ---  **Affects:** 5.0.4, 5.0.5  **Issue Links:** - #21276 Parsing of ServerSentEvents not working correctly when using reactive WebClient (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/da98ff72d28ad69b8aa6cd42a85f5b667c1464cb, https://github.com/spring-projects/spring-framework/commit/66bd2776717f9916aed9b1d1680682db677cca08","closed","type: bug,","spring-projects-issues","2018-04-19T08:58:24Z","2019-01-11T16:43:45Z"
"","21873","Make Method     protected void processConstraintViolations of Spring Validator Adaptor Public [SPR-17339]","**[Ankur Pathak](https://jira.spring.io/secure/ViewProfile.jspa?name=ankur%20pathak)** opened **[SPR-17339](https://jira.spring.io/browse/SPR-17339?redirect=false)** and commented  This method of SpringValidatorAdaptor should be public or their should be some similar public interface:  protected void processConstraintViolations(Set> violations, Errors errors) {}  It allows to convert Set\ to BindingResult(BindException). So it has pottential of being used outside spring framework may be jax-rs, jax-ws in following manner: 1. We can validate the bean using bean validation api. 2. Convert Set\ to BindingResult using above method 3. Use that binding result to report good validation messages in any rest or soap java web api frmeaork.  Making that method protected is conflicting with above use case. Or we can have similar pblic interface to convert Ser\ to BindingResult.  Even some api framework like jax-ws jesey  have integration for bean validation api and through constraintvoilationexception. this exception has set\. Right now we don;t have any interface in LocalValidatorFactory to convert it to bindingresult. The advantage bindingresult  has is by using it we can easily prepare validation errors for user in any framework.   ---  **Affects:** 5.0.9, 5.1 GA","closed","status: declined,","spring-projects-issues","2018-10-04T14:54:16Z","2021-01-08T16:50:04Z"
"","21809","Not Getting Actual Value Of Path Variable If Its Value Is Email [SPR-17276]","**[Ankur Pathak](https://jira.spring.io/secure/ViewProfile.jspa?name=ankur%20pathak)** opened **[SPR-17276](https://jira.spring.io/browse/SPR-17276?redirect=false)** and commented  I was getting HttpMediaTypeNotAcceptableException for   ```java @PutMapping(/api/register/email/{email}) ```  for url: http://localhost:8080/api/register/email/ankurpathak@live.in.  I did some R & D and came to find out its because of extension based  content negotiation feature of spring mvc.  So I turned it off in:  ```java @Override public void configureContentNegotiation(ContentNegotiationConfigurer configurer) {     configurer.favorPathExtension(false)             . favorParameter(false)             . ignoreAcceptHeader(false)             . defaultContentType(MediaType.APPLICATION_JSON)             .useRegisteredExtensionsOnly(true); } ```  The exception HttpMediaTypeNotAcceptableException stopped comming.  But the value of path variable was ankurpathak@live instead of right value [ankurpathak@live.in.|mailto:ankurpathak@live.in.]  I tried all setting of content negotiation manager but  coudn't get the right value. How we can send the modified value of path variable inside controller? We should always send the unmodified value of path  variable and leave it on user to parse it if required. I may we wrong in my interpretation of the case. If so please correct.  I am using Spring MVC with Spring Boot 2.0.5.RELEASE.   ---  **Affects:** 5.0.9  **Reference URL:** https://stackoverflow.com/questions/7197268/spring-mvc-httpmediatypenotacceptableexception","closed","status: invalid,","spring-projects-issues","2018-09-16T02:27:12Z","2019-01-12T05:18:13Z"
"","21770","Adding Support For @BeanParam Like JaxRs in Spring MVC [SPR-17237]","**[Ankur Pathak](https://jira.spring.io/secure/ViewProfile.jspa?name=ankur%20pathak)** opened **[SPR-17237](https://jira.spring.io/browse/SPR-17237?redirect=false)** and commented  We can collect various parametes of Http Request like Path, Query, Header inside bean   using `@BeanParam` in JaxRs  public class MyBean  {  `@FormParam`(""myData"") private String data;  `@HeaderParam`(""myHeader"") private String header;  `@PathParam`(""id"") public void setResourceId(String id)  {...}  ... }  We should have something similar to same in Spring to collect them inside Bean and also apply Bean Validation Api for them at once. Listing all those param as method parameter list  is inelegant way of handling them and does not allow to transfer them at once from one layer to other layer.   ---  **Affects:** 5.1 RC2  **Reference URL:** https://docs.oracle.com/javaee/7/api/javax/ws/rs/BeanParam.html","closed","type: enhancement,","spring-projects-issues","2018-09-03T09:29:20Z","2022-05-12T08:26:31Z"
"","21720","Support For JDBC Exception Translation For Amazon Redshift and Snowflake Database [SPR-17185]","**[Ankur Pathak](https://jira.spring.io/secure/ViewProfile.jspa?name=ankur%20pathak)** opened **[SPR-17185](https://jira.spring.io/browse/SPR-17185?redirect=false)** and commented  Spring Exception Translation is very helpful when we are coding JDBC based  application. But it lacks support for Amazon Redshift and Snowflake(https://www.snowflake.com) database. It would  be great if we can have support for these two databases.   ---  **Affects:** 4.3.14, 5.0.3","open","type: enhancement,","spring-projects-issues","2018-08-15T07:45:43Z","2019-01-12T05:33:28Z"
"","21569","View Controller In Spring WebFlux [SPR-17031]","**[Ankur Pathak](https://jira.spring.io/secure/ViewProfile.jspa?name=ankur%20pathak)** opened **[SPR-17031](https://jira.spring.io/browse/SPR-17031?redirect=false)** and commented  Their is no support for View Controller In Spring Web Flux. Why not have `addViewControllers(ViewControllerRegistry registry)` method in `WebFluxConfigurer` similar to `WebMvcConfigurer`?  Their is no support for Welcome page like `index.html` also.   ---  **Affects:** 5.0 GA  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/9785","closed","type: enhancement,","spring-projects-issues","2018-07-11T13:18:41Z","2020-05-20T16:44:35Z"
"","21462","Bean Validation API 2.0 does not work with Kotlin in MVC [SPR-16923]","**[Ankur Pathak](https://jira.spring.io/secure/ViewProfile.jspa?name=ankur%20pathak)** opened **[SPR-16923](https://jira.spring.io/browse/SPR-16923?redirect=false)** and commented  class Name : Serializable  { `@NotBlank` var value: String? = null }  class Names  { `@NotEmpty` var names: MutableList<`@Valid` `@NotNull` Name>? = null }  Bean Validation 2 constrains `@Valid` `@NotNull` does not work on Generics  Type Param in Kotlin with Spring Web MVC.  But if you replace kotlin Names class with java version of same it works.  public class Names {  `@NotEmpty` private List<`@NotNull` `@Valid` Name> names;  public List\ getNames() { return names; }  public void setNames(List\ names) { this.names = names; } }  But Bean Validation 2 constrains `@Valid` `@NotNull`  work on Generics  Type Param in Java with Spring Web MVC.                  ---  **Affects:** 5.0.1","open","in: kotlin,","spring-projects-issues","2018-06-08T17:06:37Z","2022-01-19T11:04:16Z"
"","21406","MatrixVariable with Encoding does not work. [SPR-16867]","**[Anitha](https://jira.spring.io/secure/ViewProfile.jspa?name=aramaswa)** opened **[SPR-16867](https://jira.spring.io/browse/SPR-16867?redirect=false)** and commented  With both MatrixVariable enabled and UrlDecode disabled, then the PathVariables are not matched correctly.  I'm on : 5.0.6.RELEASE/spring-webmvc-5.0.6.RELEASE-sources.jar  I have a case where I have PathVariables and MatrixVariables (plus I have encoded string as MatrixVariable value).   My WebConfig looks like this:  ```java @Configuration public class WebConfig implements WebMvcConfigurer {   @Override  public void configurePathMatch(PathMatchConfigurer configurer) {    UrlPathHelper urlPathHelper = new UrlPathHelper();    urlPathHelper.setRemoveSemicolonContent(false);    urlPathHelper.setUrlDecode(false);    urlPathHelper.setAlwaysUseFullPath(true);    configurer.setUrlPathHelper(urlPathHelper);  } } ```  With this after the MatrixVariable extraction happens in **RequestMappingInfoHandlerMapping** with decoded params pointing to a newly created map, the new truncated pathVariable values are not reflected in URI_TEMPLATE_VARIABLES_ATTRIBUTE of the request. Whereas without decoding, it is referring to the old map uriVariables and things work fine.   I hope it explains the problem clearly.   ---  **Affects:** 5.0.6  **Issue Links:** - #14773 MatrixVariable values are not decoded  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/85e8634810ea7f5dabd1683cfd7da9495deffbd5, https://github.com/spring-projects/spring-framework/commit/051ab05d32cae6b06ad2141df39cd1b53f38fb32","closed","type: bug,","spring-projects-issues","2018-05-23T14:20:43Z","2019-01-11T17:09:25Z"
"","21445","PathVariable always Consider as String [SPR-16906]","**[Anees Ahmed Mohammed](https://jira.spring.io/secure/ViewProfile.jspa?name=ibneazeez)** opened **[SPR-16906](https://jira.spring.io/browse/SPR-16906?redirect=false)** and commented  Pathvariable always consider as String Object.   `@RequestMapping`(value = ""{entityName}/{id}"",method = RequestMethod.GET)`@RequestMapping`(value = ""{entityName}/{id}"",method = RequestMethod.GET) public `@ResponseBody` Object getEntity(`@PathVariable`(""entityName"") String entityName,`@PathVariable`(""id"") Object id) { return entityDAO.getEntityById(entityName, id); }     But still, PathVariable for Id is considered as String.  ---  **Reference URL:** https://stackoverflow.com/questions/50648263/dynamic-type-caste-spring-pathvariable","closed","in: core,","spring-projects-issues","2018-06-05T16:01:08Z","2019-01-13T20:26:02Z"
"","21868","Asynchronous EntityManagerFactory bootstrapping to complete on context refresh completion [SPR-17334]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-17334](https://jira.spring.io/browse/SPR-17334?redirect=false)** and commented  When a `LocalEntityManagerFactory` bean is configured with a bootstrap executor, there's a race between application context refresh and native entity manager factory bootstrapping. This makes things awkward for any logic that wants to run once bootstrapping has completed, for example something that relies on Hibernate DDL processing.  I've attached a small example that hopefully illustrates the problem. When imported into your IDE and run, `EmfBootstrappingRaceApplication` should thrown an exception when executing the `SELECT` query using `JdbcTemplate`. The failure will not occur if `factory.setBootstrapExecutor(executor);` is commented out. The failure will occur intermittently if the artificial delay introduced by the async executor is removed.   ---  **Affects:** 4.3.19, 5.0.9, 5.1 GA  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/14658  **Attachments:** - [emf-bootstrapping-race.zip](https://jira.spring.io/secure/attachment/26039/emf-bootstrapping-race.zip) (_49.57 kB_)","open","type: enhancement,","spring-projects-issues","2018-10-04T10:37:25Z","2018-10-12T08:29:50Z"
"","21858","ApplicationListener is missing from Collection returned by getApplicationListeners() if it was added after the multicaster was initialised [SPR-17324]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-17324](https://jira.spring.io/browse/SPR-17324?redirect=false)** and commented  In Boot, if context refresh fails, we publish an `ApplicationFailedEvent`. We can't rely on the context's multicaster being available at this point so we create our own. It is initialised with the collection of listeners returned by `AbstractApplicationContext.getApplicationListeners()`. Unfortunately, any listeners that were added after the context's multicaster was initialised are missing from this collection so they do not receive the `ApplicationFailedEvent`.  In `AbstractApplicationContext.addApplicationListener(ApplicationListener)`, would it be possible to always call `this.applicationListeners.add(listener)` rather than only calling it when `this.applicationEventMulticaster` is `null`?  ---  **Affects:** 5.0.9  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/14490  **Issue Links:** - #21840 Unnecessary sort in AbstractApplicationEventMulticaster  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c8c0737ce712569a7e03a97dfe7ef11cbbc33e39, https://github.com/spring-projects/spring-framework/commit/d61a7ed1f0e0ae91e8aeb29af0447e1d2f473846  **Backported to:** [5.0.10](https://github.com/spring-projects/spring-framework/milestone/191?closed=1)","closed","in: core,","spring-projects-issues","2018-10-02T14:11:37Z","2019-01-11T14:15:57Z"
"","21787","Truncate large response bodies when logging in RequestResponseBodyMethodProcessor [SPR-17254]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-17254](https://jira.spring.io/browse/SPR-17254?redirect=false)** and commented  The usability of the new debug request and response logging is hurt a little bit when a large response body is being returned. A concrete example is Spring Boot Actuator's Prometheus endpoint that is called by Prometheus to get all of an application's metrics. The logging for such a request looks like this:     ``` 2018-09-06 09:35:08.428 DEBUG 39735 --- [nio-8081-exec-1] m.m.a.RequestResponseBodyMethodProcessor : Using 'text/plain;version=0.0.4;charset=utf-8;q=1', given [text/plain;version=0.0.4;q=1, */*;q=0.1] and supported [text/plain;version=0.0.4;charset=utf-8] 2018-09-06 09:35:08.428 DEBUG 39735 --- [nio-8081-exec-1] m.m.a.RequestResponseBodyMethodProcessor : Writing [""# HELP jvm_memory_max_bytes The maximum amount of memory in bytes that can be used for memory management 1. TYPE jvm_memory_max_bytes gauge jvm_memory_max_bytes{application=""initializr-stats-generator"",area=""nonheap"",id=""Code Cache"",} 2.5165824E8 jvm_memory_max_bytes{application=""initializr-stats-generator"",area=""nonheap"",id=""Metaspace"",} -1.0 jvm_memory_max_bytes{application=""initializr-stats-generator"",area=""nonheap"",id=""Compressed Class Space"",} 1.073741824E9 jvm_memory_max_bytes{application=""initializr-stats-generator"",area=""heap"",id=""PS Eden Space"",} 1.402994688E9 jvm_memory_max_bytes{application=""initializr-stats-generator"",area=""heap"",id=""PS Survivor Space"",} 1.1010048E7 jvm_memory_max_bytes{application=""initializr-stats-generator"",area=""heap"",id=""PS Old Gen"",} 2.863661056E9 1. HELP jvm_buffer_total_capacity_bytes An estimate of the total capacity of the buffers in this pool 1. TYPE jvm_buffer_total_capacity_bytes gauge jvm_buffer_total_capacity_bytes{application=""initializr-stats-generator"",id=""direct"",} 16384.0 jvm_buffer_total_capacity_bytes{application=""initializr-stats-generator"",id=""mapped"",} 0.0 1. HELP process_files_open The open file descriptor count 1. TYPE process_files_open gauge process_files_open{application=""initializr-stats-generator"",} 128.0 1. HELP jvm_gc_live_data_size_bytes Size of old generation memory pool after a full GC 1. TYPE jvm_gc_live_data_size_bytes gauge jvm_gc_live_data_size_bytes{application=""initializr-stats-generator"",} 2.4477432E7 1. HELP tomcat_threads_current   1. TYPE tomcat_threads_current gauge tomcat_threads_current{application=""initializr-stats-generator"",name=""http-nio-8081"",} 10.0 1. HELP tomcat_cache_access_total   1. TYPE tomcat_cache_access_total counter tomcat_cache_access_total{application=""initializr-stats-generator"",} 0.0 1. HELP tomcat_servlet_request_max_seconds   1. TYPE tomcat_servlet_request_max_seconds gauge tomcat_servlet_request_max_seconds{application=""initializr-stats-generator"",name=""default"",} 0.0 1. HELP tomcat_threads_busy   1. TYPE tomcat_threads_busy gauge tomcat_threads_busy{application=""initializr-stats-generator"",name=""http-nio-8081"",} 1.0 1. HELP jvm_threads_peak The peak live thread count since the Java virtual machine started or peak was reset 1. TYPE jvm_threads_peak gauge jvm_threads_peak{application=""initializr-stats-generator"",} 36.0 1. HELP system_cpu_count The number of processors available to the Java virtual machine 1. TYPE system_cpu_count gauge system_cpu_count{application=""initializr-stats-generator"",} 8.0 1. HELP tomcat_global_sent_bytes_total   1. TYPE tomcat_global_sent_bytes_total counter tomcat_global_sent_bytes_total{application=""initializr-stats-generator"",name=""http-nio-8081"",} 0.0 1. HELP tomcat_global_error_total   1. TYPE tomcat_global_error_total counter tomcat_global_error_total{application=""initializr-stats-generator"",name=""http-nio-8081"",} 0.0 1. HELP system_cpu_usage The ""recent cpu usage"" for the whole system 1. TYPE system_cpu_usage gauge system_cpu_usage{application=""initializr-stats-generator"",} 0.0 1. HELP logback_events_total Number of error level events that made it to the logs 1. TYPE logback_events_total counter logback_events_total{application=""initializr-stats-generator"",level=""error"",} 0.0 logback_events_total{application=""initializr-stats-generator"",level=""warn"",} 0.0 logback_events_total{application=""initializr-stats-generator"",level=""info"",} 15.0 logback_events_total{application=""initializr-stats-generator"",level=""debug"",} 31.0 logback_events_total{application=""initializr-stats-generator"",level=""trace"",} 0.0 1. HELP process_files_max The maximum file descriptor count 1. TYPE process_files_max gauge process_files_max{application=""initializr-stats-generator"",} 10240.0 1. HELP tomcat_sessions_created_total   1. TYPE tomcat_sessions_created_total counter tomcat_sessions_created_total{application=""initializr-stats-generator"",} 0.0 1. HELP jvm_memory_committed_bytes The amount of memory in bytes that is committed for the Java virtual machine to use 1. TYPE jvm_memory_committed_bytes gauge jvm_memory_committed_bytes{application=""initializr-stats-generator"",area=""nonheap"",id=""Code Cache"",} 8847360.0 jvm_memory_committed_bytes{application=""initializr-stats-generator"",area=""nonheap"",id=""Metaspace"",} 4.3384832E7 jvm_memory_committed_bytes{application=""initializr-stats-generator"",area=""nonheap"",id=""Compressed Class Space"",} 6160384.0 jvm_memory_committed_bytes{application=""initializr-stats-generator"",area=""heap"",id=""PS Eden Space"",} 2.65814016E8 jvm_memory_committed_bytes{application=""initializr-stats-generator"",area=""heap"",id=""PS Survivor Space"",} 1.1010048E7 jvm_memory_committed_bytes{application=""initializr-stats-generator"",area=""heap"",id=""PS Old Gen"",} 1.69345024E8 1. HELP jvm_classes_loaded The number of classes that are currently loaded in the Java virtual machine 1. TYPE jvm_classes_loaded gauge jvm_classes_loaded{application=""initializr-stats-generator"",} 8396.0 1. HELP tomcat_sessions_expired_total   1. TYPE tomcat_sessions_expired_total counter tomcat_sessions_expired_total{application=""initializr-stats-generator"",} 0.0 1. HELP jvm_buffer_memory_used_bytes An estimate of the memory that the Java virtual machine is using for this buffer pool 1. TYPE jvm_buffer_memory_used_bytes gauge jvm_buffer_memory_used_bytes{application=""initializr-stats-generator"",id=""direct"",} 16384.0 jvm_buffer_memory_used_bytes{application=""initializr-stats-generator"",id=""mapped"",} 0.0 1. HELP jvm_gc_pause_seconds Time spent in GC pause 1. TYPE jvm_gc_pause_seconds summary jvm_gc_pause_seconds_count{action=""end of minor GC"",application=""initializr-stats-generator"",cause=""Metadata GC Threshold"",} 1.0 jvm_gc_pause_seconds_sum{action=""end of minor GC"",application=""initializr-stats-generator"",cause=""Metadata GC Threshold"",} 0.025 jvm_gc_pause_seconds_count{action=""end of major GC"",application=""initializr-stats-generator"",cause=""Metadata GC Threshold"",} 1.0 jvm_gc_pause_seconds_sum{action=""end of major GC"",application=""initializr-stats-generator"",cause=""Metadata GC Threshold"",} 0.073 1. HELP jvm_gc_pause_seconds_max Time spent in GC pause 1. TYPE jvm_gc_pause_seconds_max gauge jvm_gc_pause_seconds_max{action=""end of minor GC"",application=""initializr-stats-generator"",cause=""Metadata GC Threshold"",} 0.025 jvm_gc_pause_seconds_max{action=""end of major GC"",application=""initializr-stats-generator"",cause=""Metadata GC Threshold"",} 0.073 1. HELP jvm_threads_live The current number of live threads including both daemon and non-daemon threads 1. TYPE jvm_threads_live gauge jvm_threads_live{application=""initializr-stats-generator"",} 34.0 1. HELP tomcat_servlet_request_seconds   1. TYPE tomcat_servlet_request_seconds summary tomcat_servlet_request_seconds_count{application=""initializr-stats-generator"",name=""default"",} 0.0 tomcat_servlet_request_seconds_sum{application=""initializr-stats-generator"",name=""default"",} 0.0 1. HELP tomcat_sessions_rejected_total   1. TYPE tomcat_sessions_rejected_total counter tomcat_sessions_rejected_total{application=""initializr-stats-generator"",} 0.0 1. HELP process_uptime_seconds The uptime of the Java virtual machine 1. TYPE process_uptime_seconds gauge process_uptime_seconds{application=""initializr-stats-generator"",} 5.233 1. HELP process_start_time_seconds Start time of the process since unix epoch. 1. TYPE process_start_time_seconds gauge process_start_time_seconds{application=""initializr-stats-generator"",} 1.53621930324E9 1. HELP tomcat_global_request_seconds   1. TYPE tomcat_global_request_seconds summary tomcat_global_request_seconds_count{application=""initializr-stats-generator"",name=""http-nio-8081"",} 0.0 tomcat_global_request_seconds_sum{application=""initializr-stats-generator"",name=""http-nio-8081"",} 0.0 1. HELP jvm_gc_max_data_size_bytes Max size of old generation memory pool 1. TYPE jvm_gc_max_data_size_bytes gauge jvm_gc_max_data_size_bytes{application=""initializr-stats-generator"",} 2.863661056E9 1. HELP process_cpu_usage The ""recent cpu usage"" for the Java Virtual Machine process 1. TYPE process_cpu_usage gauge process_cpu_usage{application=""initializr-stats-generator"",} 0.0 1. HELP jvm_buffer_count An estimate of the number of buffers in the pool 1. TYPE jvm_buffer_count gauge jvm_buffer_count{application=""initializr-stats-generator"",id=""direct"",} 2.0 jvm_buffer_count{application=""initializr-stats-generator"",id=""mapped"",} 0.0 1. HELP tomcat_cache_hit_total   1. TYPE tomcat_cache_hit_total counter tomcat_cache_hit_total{application=""initializr-stats-generator"",} 0.0 1. HELP jvm_gc_memory_allocated_bytes_total Incremented for an increase in the size of the young generation memory pool after one GC to before the next 1. TYPE jvm_gc_memory_allocated_bytes_total counter jvm_gc_memory_allocated_bytes_total{application=""initializr-stats-generator"",} 1.762172E8 1. HELP tomcat_global_request_max_seconds   1. TYPE tomcat_global_request_max_seconds gauge tomcat_global_request_max_seconds{application=""initializr-stats-generator"",name=""http-nio-8081"",} 0.0 1. HELP tomcat_sessions_active_max   1. TYPE tomcat_sessions_active_max gauge tomcat_sessions_active_max{application=""initializr-stats-generator"",} 0.0 1. HELP tomcat_sessions_alive_max_seconds   1. TYPE tomcat_sessions_alive_max_seconds gauge tomcat_sessions_alive_max_seconds{application=""initializr-stats-generator"",} 0.0 1. HELP tomcat_sessions_active_current   1. TYPE tomcat_sessions_active_current gauge tomcat_sessions_active_current{application=""initializr-stats-generator"",} 0.0 1. HELP jvm_gc_memory_promoted_bytes_total Count of positive increases in the size of the old generation memory pool before GC to after GC 1. TYPE jvm_gc_memory_promoted_bytes_total counter jvm_gc_memory_promoted_bytes_total{application=""initializr-stats-generator"",} 1.7393152E7 1. HELP jvm_memory_used_bytes The amount of used memory 1. TYPE jvm_memory_used_bytes gauge jvm_memory_used_bytes{application=""initializr-stats-generator"",area=""nonheap"",id=""Code Cache"",} 8839168.0 jvm_memory_used_bytes{application=""initializr-stats-generator"",area=""nonheap"",id=""Metaspace"",} 4.0413216E7 jvm_memory_used_bytes{application=""initializr-stats-generator"",area=""nonheap"",id=""Compressed Class Space"",} 5576504.0 jvm_memory_used_bytes{application=""initializr-stats-generator"",area=""heap"",id=""PS Eden Space"",} 1.43610296E8 jvm_memory_used_bytes{application=""initializr-stats-generator"",area=""heap"",id=""PS Survivor Space"",} 0.0 jvm_memory_used_bytes{application=""initializr-stats-generator"",area=""heap"",id=""PS Old Gen"",} 2.4477432E7 1. HELP tomcat_threads_config_max   1. TYPE tomcat_threads_config_max gauge tomcat_threads_config_max{application=""initializr-stats-generator"",name=""http-nio-8081"",} 200.0 1. HELP jvm_threads_daemon The current number of live daemon threads 1. TYPE jvm_threads_daemon gauge jvm_threads_daemon{application=""initializr-stats-generator"",} 32.0 1. HELP jvm_classes_unloaded_total The total number of classes unloaded since the Java virtual machine has started execution 1. TYPE jvm_classes_unloaded_total counter jvm_classes_unloaded_total{application=""initializr-stats-generator"",} 0.0 1. HELP tomcat_global_received_bytes_total   1. TYPE tomcat_global_received_bytes_total counter tomcat_global_received_bytes_total{application=""initializr-stats-generator"",name=""http-nio-8081"",} 0.0 1. HELP tomcat_servlet_error_total   1. TYPE tomcat_servlet_error_total counter tomcat_servlet_error_total{application=""initializr-stats-generator"",name=""default"",} 0.0 1. HELP system_load_average_1m The sum of the number of runnable entities queued to available processors and the number of runnable entities running on the available processors averaged over a period of time 1. TYPE system_load_average_1m gauge system_load_average_1m{application=""initializr-stats-generator"",} 2.48779296875 ""] ```  I think it would be useful to truncate the response body at debug level and log the full body at trace level. While I haven't seen an example of it, if similar logging is performed for request bodies, I wonder if it may make sense to make a similar improvement on that side of the exchange as well.   ---  **Affects:** 5.1 RC2  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/14292  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/db8e9eafb208860f53911c5f352074142b7f74ea, https://github.com/spring-projects/spring-framework/commit/12240c7524ee81deab6049dbfa59b5963f4ff2e7, https://github.com/spring-projects/spring-framework/commit/e62298eaadf2e6b0587c18dd309bd7b2f2686e74","closed","type: enhancement,","spring-projects-issues","2018-09-07T14:05:58Z","2018-09-21T07:52:16Z"
"","21773","Polish capitalisation of units on DataSize and javadoc of DataUnit [SPR-17240]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-17240](https://jira.spring.io/browse/SPR-17240?redirect=false)** and commented  `DataSize` currently camel-cases the units as if bytes is a separate word. For example, it has a method named `ofKiloBytes`. Given that kilobytes is the unit, I would expect that method to be `ofKilobytes`. The same applies to the methods for megabytes, gigabytes, and terabytes. If this proposal is accepted, the javadoc for the values on `DataUnit` should also be updated.   ---  **Affects:** 5.1 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2c1dca5b5e5089af3ed092ffb1fd2b7fd65db776","closed","type: enhancement,","spring-projects-issues","2018-09-04T09:29:00Z","2018-09-07T13:48:36Z"
"","21584","AnnotationMetadataReadingVisitor.getMetaAnnotationTypes(String) may return null but it is not marked @Nullable [SPR-17046]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-17046](https://jira.spring.io/browse/SPR-17046?redirect=false)** and commented  I've noticed that `AnnotationMetadataReadingVisitor.getMetaAnnotationTypes(String)` will return `null` rather than the documented empty `Set` in two scenarios:  1. getMetaAnnotationTypes is called with the name of an annotation that is not present 2. getMetaAnnotationTypes is called with the name of an annotation that is present but that is not on the classpath  I've attached a small sample that hopefully illustrates both. It tests with Framework 5.1 snapshots but I believe that 5.0 is also affected and perhaps 4.3.x too.  ---  **Affects:** 5.0.7  **Attachments:** - [null-meta-annotation-types.zip](https://jira.spring.io/secure/attachment/25769/null-meta-annotation-types.zip) (_49.32 kB_)  **Issue Links:** - #21881 AnnotationMetadata.getAnnotationAttributes inconsistency for empty array in ASM implementation","closed","in: core,","spring-projects-issues","2018-07-16T13:53:54Z","2019-01-11T12:48:40Z"
"","21583","AOP and use of redirect view can lead to unbounded caching in AbstractAutoProxyCreator [SPR-17045]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-17045](https://jira.spring.io/browse/SPR-17045?redirect=false)** and commented  Please see the referenced Spring Boot issue for details. I have attached a minimal Boot app that reproduces the problem.  In short, the problem is that `InternalResourceViewResolver` calls `AutowireCapableBeanFactory.initializeBean(Object existingBean, String beanName)` using the complete URL as the `beanName`. The bean name is then used by `AbstractAutoProxyCreator.wrapIfNecessary(Object, String, Object)` as the key when it caches the fact that no advice applies to it. When the possible redirect URLs are unbounded this leads to an unbounded number of entries being added to the cache.  ---  **Affects:** 4.3.18  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/13771  **Attachments:** - [gh-13771.zip](https://jira.spring.io/secure/attachment/25768/gh-13771.zip) (_49.37 kB_)  **Issue Links:** - #13413 RequestDataValueProcessor not called in RedirectView - #19784 Decouple o.s.w.reactive.result.view.UrlBasedViewResolver from ApplicationContext  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b8d2a16c310dd48d00a2d45e39915b219445c6ce, https://github.com/spring-projects/spring-framework/commit/ae1d500bc3e5f44ac8343284e366cf6a51eafb71, https://github.com/spring-projects/spring-framework/commit/19e944bd4f0487bff173c3abcdbd9c7529bbd88c  **Backported to:** [4.3.19](https://github.com/spring-projects/spring-framework/milestone/168?closed=1)  1 votes, 4 watchers","closed","in: core,","spring-projects-issues","2018-07-16T08:37:27Z","2019-01-11T12:48:29Z"
"","21520","Throw a specific exception when an attempt to override a bean definition is rejected [SPR-16982]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-16982](https://jira.spring.io/browse/SPR-16982?redirect=false)** and commented  We'd like to [disable bean overriding by default in Boot](https://github.com/spring-projects/spring-boot/issues/13609). To allow us to provide good diagnostics, it would be very useful if, when rejecting an attempted override, `DefaultListableBeanFactory` threw a custom subclass of `BeanDefinitionStoreException` with accessors for both the existing a new bean definitions.   ---  **Affects:** 5.1 RC1  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/13609  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/182243d20d8c4793d65ab6ea8d4a50d59e2e6545","closed","type: enhancement,","spring-projects-issues","2018-06-28T16:00:19Z","2018-07-26T08:09:36Z"
"","21519","Reduce the impact on startup time of adding Reactor to the classpath [SPR-16981]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-16981](https://jira.spring.io/browse/SPR-16981?redirect=false)** and commented  I've been looking at the performance of `ConfigurationClassPostProcessor`, particularly the overhead that it adds when are no full or lite configuration classes in the context. As part of this, I've observed that adding Reactor to the classpath has a large impact. Without Reactor on the classpath I see `postProcessBeanDefinitionRegistry` take 10-20ms. With Reactor on the classpath it can take as much as 100ms to do the same thing (add 0 bean definitions).  The cost is incurred when `ConfigurationClassUtils` is loaded as it, ultimately, leads to a couple of hundred Reactor classes being loaded. Here's the beginning of the `-verbose:class` output:  ``` [Loaded org.springframework.context.annotation.ConfigurationClassUtils from file:/Users/awilkinson/dev/workspaces/spring/spring-boot/master/configuration-class-parser-overhead/target/classes/] [Loaded org.springframework.core.type.ClassMetadata from file:/Users/awilkinson/.m2/repository/org/springframework/spring-core/5.0.5.RELEASE/spring-core-5.0.5.RELEASE.jar] [Loaded org.springframework.core.type.AnnotationMetadata from file:/Users/awilkinson/.m2/repository/org/springframework/spring-core/5.0.5.RELEASE/spring-core-5.0.5.RELEASE.jar] [Loaded org.springframework.core.Conventions from file:/Users/awilkinson/.m2/repository/org/springframework/spring-core/5.0.5.RELEASE/spring-core-5.0.5.RELEASE.jar] [Loaded org.springframework.core.ReactiveAdapterRegistry from file:/Users/awilkinson/.m2/repository/org/springframework/spring-core/5.0.5.RELEASE/spring-core-5.0.5.RELEASE.jar] [Loaded org.springframework.core.ReactiveAdapterRegistry$ReactorRegistrar from file:/Users/awilkinson/.m2/repository/org/springframework/spring-core/5.0.5.RELEASE/spring-core-5.0.5.RELEASE.jar] [Loaded org.reactivestreams.Publisher from file:/Users/awilkinson/.m2/repository/org/reactivestreams/reactive-streams/1.0.2/reactive-streams-1.0.2.jar] [Loaded reactor.core.publisher.Mono from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.Scannable from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoOperator from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoCacheTime from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded org.reactivestreams.Subscriber from file:/Users/awilkinson/.m2/repository/org/reactivestreams/reactive-streams/1.0.2/reactive-streams-1.0.2.jar] [Loaded org.reactivestreams.Processor from file:/Users/awilkinson/.m2/repository/org/reactivestreams/reactive-streams/1.0.2/reactive-streams-1.0.2.jar] [Loaded reactor.core.CoreSubscriber from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.Disposable from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded org.reactivestreams.Subscription from file:/Users/awilkinson/.m2/repository/org/reactivestreams/reactive-streams/1.0.2/reactive-streams-1.0.2.jar] [Loaded java.util.function.LongSupplier from /Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Home/jre/lib/rt.jar] [Loaded reactor.core.publisher.MonoProcessor from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.SignalPeek from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.Fuseable from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoLogFuseable from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoLog from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoZip from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoFirst from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoCreate from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.Flux from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.FluxFromMonoOperator from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoExpand from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoFilterFuseable from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoFilter from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded java.util.concurrent.Callable from /Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Home/jre/lib/rt.jar] [Loaded reactor.core.Fuseable$ScalarCallable from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoError from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoMapFuseable from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoMap from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoHandleFuseable from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoHandle from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoFlatMap from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoFromPublisher from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded java.util.concurrent.CompletionStage from /Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Home/jre/lib/rt.jar] [Loaded reactor.core.publisher.MonoCompletionStage from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoDefer from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoDelay from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoCallable from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoFromFluxOperator from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoSourceFluxFuseable from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoSourceFlux from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoSourceFuseable from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoSource from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoRunnable from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoSupplier from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoIgnorePublisher from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoJust from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoSequenceEqual from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoCurrentContext from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoSubscriberContext from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoUsing from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoWhen from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoTimeout from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoCancelOn from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.AssemblyOp from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoOnAssembly from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoDefaultIfEmpty from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoDelayElement from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoDelayUntil from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded java.util.function.Consumer from /Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Home/jre/lib/rt.jar] [Loaded reactor.core.publisher.MonoDelaySubscription from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoDematerialize from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoPeekTerminal from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoDoFinallyFuseable from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoDoFinally from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoDoOnEach from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoElapsed from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoFilterWhen from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoFlatMapMany from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoFlattenIterable from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.FluxCallable from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoHasElement from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoHide from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoIgnoreElement from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoMaterialize from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoOnErrorResume from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoDetach from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoPublishMulticast from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoSubscribeOnValue from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoSubscribeOnCallable from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoPublishOn from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoRepeat from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoRepeatPredicate from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoRepeatWhen from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoRetry from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoRetryPredicate from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoRetryWhen from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded java.util.NoSuchElementException from /Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Home/jre/lib/rt.jar] [Loaded reactor.core.publisher.MonoSingleMono from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoSubscribeOn from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoSwitchIfEmpty from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoTakeUntilOther from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoIgnoreThen from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoPeekFuseable from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoPeek from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded java.lang.invoke.LambdaForm$DMH/192794887 from java.lang.invoke.LambdaForm] [Loaded org.springframework.core.ReactiveAdapterRegistry$ReactorRegistrar$$Lambda$9/1391942103 from org.springframework.core.ReactiveAdapterRegistry$ReactorRegistrar] [Loaded org.springframework.core.ReactiveTypeDescriptor from file:/Users/awilkinson/.m2/repository/org/springframework/spring-core/5.0.5.RELEASE/spring-core-5.0.5.RELEASE.jar] [Loaded org.springframework.core.ReactiveAdapterRegistry$ReactorRegistrar$$Lambda$10/1136497418 from org.springframework.core.ReactiveAdapterRegistry$ReactorRegistrar] [Loaded java.lang.invoke.LambdaForm$DMH/863125040 from java.lang.invoke.LambdaForm] [Loaded org.springframework.core.ReactiveAdapterRegistry$ReactorRegistrar$$Lambda$11/1693847660 from org.springframework.core.ReactiveAdapterRegistry$ReactorRegistrar] [Loaded org.springframework.core.ReactiveAdapter from file:/Users/awilkinson/.m2/repository/org/springframework/spring-core/5.0.5.RELEASE/spring-core-5.0.5.RELEASE.jar] [Loaded reactor.core.publisher.FluxOperator from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.FluxIndexFuseable from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.FluxIndex from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoCount from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.FluxLogFuseable from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.FluxLog from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.FluxConcatArray from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.FluxConcatIterable from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.FluxConcatMap from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.FluxJoin from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoNext from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoCollect from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoStreamCollector from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.MonoElementAt from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.FluxCreate from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.FluxZip from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.FluxMapFuseable from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.FluxMap from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.FluxFirstEmitting from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.FluxMerge from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.FluxFlatMap from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.FluxSourceMonoFuseable from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.FluxSourceMono from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.FluxSourceFuseable from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.FluxSource from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] [Loaded reactor.core.publisher.FluxExpand from file:/Users/awilkinson/.m2/repository/io/projectreactor/reactor-core/3.1.6.RELEASE/reactor-core-3.1.6.RELEASE.jar] … ```  The javadoc on `ReactiveAdapterRegistry.getSharedInstance()` indicates that the instance is lazily built. This is undone by `Conventions` which stores the shared instance in a static field, thereby triggering creation of the instance as soon as the class is loaded.  The registry is only used in `getVariableNameForParameter` and `getVariableNameForReturnType`. In the application that I have been examining, neither method is called during startup. Perhaps the initialisation of the registry could be deferred until it's needed?  Beyond deferring the initialisation, I wonder if there's something that can be done to reduce the impact when it is eventually needed? The cost in terms of time and metaspace usage of loading 250 classes seems rather high.  ---  **Affects:** 5.0.7  **Issue Links:** - #20766 CPU utilization too high for a simple server  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b68e692854d4494c141259c924c667c21784c3eb, https://github.com/spring-projects/spring-framework/commit/3e64388b20e4f885b29f388e3e5bca55cd1a4cec","closed","type: enhancement,","spring-projects-issues","2018-06-28T11:58:00Z","2019-01-11T16:07:42Z"
"","21515","Classpath scanning does not work in tests using the module path [SPR-16977]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-16977](https://jira.spring.io/browse/SPR-16977?redirect=false)** and commented  It appears the classpath scanning doesn't work when Surefire launches the JVM configured to use the module path. `target/classes` is placed on the module path and `target/test-classes` is patched into this module but classpath scanning only finds classes in `target/test-classes`.  I have attached a minimal sample that should reproduce the problem when built (`mvn test`) with Java 10. The sysout from the test should show that only the test class has been found:  ``` [INFO] Running com.example.ScanningTest [file [/Users/awilkinson/dev/temp/module-path-scanning/target/test-classes/com/example/ScanningTest.class]] ```  To my rather untrained eye, building with `-X` and examining the arguments that Surefire uses to launch the forked JVM (in `target/surefire`) suggests that Surefire's configuration of the JVM is correct.  When the sample is modified to work with Java 8 (remove `module-info.java` and change the compiler plugin configuration to remove `10`) the class in `target/classes` is also found:  ``` [INFO] Running com.example.ScanningTest [file [/Users/awilkinson/dev/temp/module-path-scanning/target/test-classes/com/example/ScanningTest.class], file [/Users/awilkinson/dev/temp/module-path-scanning/target/classes/com/example/One.class]] ```  ---  **Affects:** 5.0.7  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/13581  **Attachments:** - [module-path-scanning.zip](https://jira.spring.io/secure/attachment/25754/module-path-scanning.zip) (_3.66 kB_)  **Issue Links:** - #20937 Compatibility with JDK 11  2 votes, 7 watchers","closed","status: superseded,","spring-projects-issues","2018-06-26T14:50:34Z","2022-05-24T14:33:00Z"
"","21512","Lazily initialize SecureRandom in MimeTypeUtils [SPR-16974]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-16974](https://jira.spring.io/browse/SPR-16974?redirect=false)** and commented  Creating a new instance of `SecureRandom` can have a large cost in terms of elapsed time. On Linux, the JVM uses `/dev/random` by default which will block until there is sufficient entropy available to produce a random value. As things stand, whenever `MimeTypeUtils` is loaded, this cost will be incurred, irrespective of whether or not `generateMultipartBoundary()` is ever called. I think it would be better if the `SecureRandom` instance was initialized lazily so that the cost is only incurred when the instance is needed.  ---  **Affects:** 5.0.7  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/6174  **Issue Links:** - #21176 Generate multipart boundary using SecureRandom  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/847202c8f8e595218c0432715f6e5466ab9ab881, https://github.com/spring-projects/spring-framework/commit/4402336c449f21e58bd99231de9875cbc52dac6c","closed","type: enhancement,","spring-projects-issues","2018-06-25T14:38:30Z","2019-01-11T16:09:11Z"
"","21501","Make it easier to tidy up the resources used by a WebClient [SPR-16963]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-16963](https://jira.spring.io/browse/SPR-16963?redirect=false)** and commented  It's really easy to create a `WebClient` using its builder but this can trigger the creation of a number of threads that can't then be cleaned up when the client's no longer needed.  I'd like to keep the easy creation but also be able to close it so that I'm left with the same number of threads running as there were before the client was created. If `WebClient` is to replace `RestTemplate`, I think this'll be of increased importance as people may want to use it as a library outside of an application context.  ---  **Affects:** 5.0.7  **Issue Links:** - #21715 Add JettyResourceFactory  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7a0c03e05e0206e350e24ee647970b064ce5f21f, https://github.com/spring-projects/spring-framework/commit/1bc08c61e1edd3f3afc655ef03f3d5bcf2017b8f","closed","type: enhancement,","spring-projects-issues","2018-06-20T15:40:27Z","2019-09-06T02:28:30Z"
"","21500","Improve testability of new Profiles support [SPR-16962]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-16962](https://jira.spring.io/browse/SPR-16962?redirect=false)** and commented  The introduction of the `Profiles` type in #17063 has made verifying that a call to `Environment.acceptsProfiles` has been made more difficult. When `String` was used, verification with Mockito was easy:  ```java verify(this.environment).acceptsProfiles(""dev""); ```  With the new `Profiles` type this will fail as `ParsedProfiles` does not override `equals`:  ```java verify(this.environment).acceptsProfiles(Profiles.of(""dev"")); ```  The best that I have come up with is to capture the argument that's passed into `acceptsProfiles`, abuse `matches` to capture the names of the profiles, and assert that they are as expected:  ```java ArgumentCaptor profiles = ArgumentCaptor.forClass(Profiles.class); verify(this.environment).acceptsProfiles(profiles.capture()); List profileNames = new ArrayList(); profiles.getValue().matches((profile) -> { 	profileNames.add(profile); 	return false; }); assertThat(profileNames).containsExactly(""dev""); ```  ---  **Affects:** 5.1 RC1  **Issue Links:** - #17063 Support AND operator in `@Profile` annotation","open","type: enhancement,","spring-projects-issues","2018-06-20T10:40:30Z","2019-01-13T04:38:40Z"
"","21457","Optimize AbstractAutowireCapableBeanFactory.populateBean(String, RootBeanDefinition, BeanWrapper) to avoid redundant Java Bean introspection [SPR-16918]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-16918](https://jira.spring.io/browse/SPR-16918?redirect=false)** and commented  In a typical Spring Boot app, a significant amount of the startup cost is due to `org.springframework.beans.CachedIntrospectionResults.forClass(Class)`. There's a direct cost in terms of the CPU time taken for introspection and a secondary cost due to increased memory usage and GC pressure.  In the vast majority of cases, the introspection results are retrieved beneath `AbstractAutowireCapableBeanFactory.populateBean(String, RootBeanDefinition, BeanWrapper)` so that it can retrieve the property descriptors and then filter them. If I short-circuit `populateBean` so that it returns early if the bean definition's property values are empty, an app that took 2.7 seconds to start then starts in as little as 2.3 seconds.  The short circuiting loses two pieces of functionality:  1. The opportunity for `InstantationAwareBeanPostProcessors` to add property values 2. `@Required` support  Boot itself doesn't make use of either of these so the current ~400ms cost is a high price to pay. I'd like to explore the possibility of lowering or removing this cost.  As far as I can tell only one of the built-in post-processors, `RequiredAnnotationBeanPostProcessor`, uses the property descriptors, and it only does so if the bean definition hasn't been marked to skip the required check. One possibility may be to retrieve the property descriptors lazily and for Boot to somehow mark its bean definitions with `skipRequiredCheck`.  ---  **Affects:** 5.0.6  **Issue Links:** - #21663 BeanDefinition-aware BeanPostProcessors should clear cache in case of bean definition reset  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/81cb740e0ae23b6bd167f5c42ceae8294a27a14a  0 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2018-06-07T14:41:57Z","2019-01-11T15:41:44Z"
"","21405","Restore lenient null return value for ConditionContext.getBeanFactory() [SPR-16866]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-16866](https://jira.spring.io/browse/SPR-16866?redirect=false)** and commented  Following the nullability changes in 5.0, three methods on `ConditionContext` may no longer return `null`, but may now throw an `IlegalStateException` instead. Those methods are:  * `getRegistry()` * `getBeanFactory()` * `getClassLoader()`  It would be useful if their javadoc documented that an `IllegalStateException` may now be thrown.   ---  **Affects:** 5.0.6  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/13226  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/50d6d90ed8fa7e7a9c4277a9e77f8ae0d6a045dc, https://github.com/spring-projects/spring-framework/commit/46a89d9534cbb5596a2754a7655f678b27d504da","closed","in: core,","spring-projects-issues","2018-05-23T11:57:50Z","2018-06-12T15:44:04Z"
"","21379","A lite configuration class's member classes are processed when it's imported but not when it's registered directly [SPR-16839]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-16839](https://jira.spring.io/browse/SPR-16839?redirect=false)** and commented  The problem's hopefully illustrated by the following two tests:  ```java package com.example.demo;  import org.junit.Test; import org.springframework.context.annotation.AnnotationConfigApplicationContext; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.context.annotation.Import;  public class ImportVersusDirectRegistrationTests {  	@Test 	public void thingIsAvailableWhenOuterConfigurationIsRegisteredDirectly() { 		try (AnnotationConfigApplicationContext directRegistration = new AnnotationConfigApplicationContext()) { 			directRegistration.register(AccidentalLiteConfiguration.class); 			directRegistration.refresh(); 			directRegistration.getBean(Thing.class); 		} 	}  	@Test 	public void thingIsAvailableWhenOuterConfigurationIsImported() { 		try (AnnotationConfigApplicationContext viaImport = new AnnotationConfigApplicationContext()) { 			viaImport.register(Importer.class); 			viaImport.refresh(); 			viaImport.getBean(Thing.class); 		} 	}  }  @Import(AccidentalLiteConfiguration.class) class Importer {  }  class AccidentalLiteConfiguration {  	@Configuration 	class InnerConfiguration {  		@Bean 		public Thing thing() { 			return new Thing(); 		}  	}  }  class Thing {  } ```  `thingIsAvailableWhenOuterConfigurationIsImported` will pass but `thingIsAvailableWhenOuterConfigurationIsRegisteredDirectly` will fail. This appears to be because member classes of a lite configuration class are only processed when the lite configuration class has been imported. They are not processed when it's been registered directly with the application context.  ---  **Affects:** 5.0.6  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/13129  **Issue Links:** - #21945 Add bean definition attribute for ConfigurationClassPostProcessor to skip ""lite"" bean detection - #21739 Revisit `@Bean` introspection between `@Configuration` classes and 'lite' beans  **Referenced from:** commits https://github.com/spring-projects/spring-boot/commit/5cc1a830b2bee8e01c02bb5758664663aea8ec59  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2018-05-18T11:33:20Z","2019-01-13T04:45:19Z"
"","21362","Provide a mechanism to be notified that a bean has been created [SPR-16822]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-16822](https://jira.spring.io/browse/SPR-16822?redirect=false)** and commented  We have some code in Spring Boot that's intended to perform initialisation of a `DataSource` just before it's first made available to application code.  It currently uses a `BeanPostProcessor` and uses the post-processing of any `DataSource` as the trigger for initializing a `DataSource`. For reasons that escape me, this `DataSource` may not be the same `DataSource` as the one that is being post-processed so it performs a lookup of a bean while another bean is being post-processed. That has caused several problems.  I think we could simplify the above-described logic so that we only perform initialisation of the `DataSource` bean that is being post-processed, thereby avoiding the problematic lookup. However, this action that's targeted to a specific bean doesn't feel like a perfect fit for the broader contract of a `BeanPostProcessor`. A callback that can be registered for a specific bean would be a better fit for our needs.  We'd like any callback that may be introduced to happen after bean post-processing. The crucial thing is that the callback is invoked before the bean can be used by application code. When I was trying to figure out what to do about the referenced Boot issue, a callback at around the point where `AbstractBeanFactory.afterPrototypeCreation(String)` or `DefaultSingletonBeanRegistry.afterSingletonCreation(String)` is called seemed to be a good fit. However, this is only based on a visual inspection of the code. I haven't verified that it would work as hoped.   ---  **Affects:** 5.0.6  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/13042  2 votes, 8 watchers","open","type: enhancement,","spring-projects-issues","2018-05-14T13:16:07Z","2022-06-17T13:03:47Z"
"","21323","Singleton from a FactoryBean may be post-processed twice if the first post-processing triggers a second attempt to get the bean [SPR-16783]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-16783](https://jira.spring.io/browse/SPR-16783?redirect=false)** and commented  Please see the referenced Spring Boot issue for my analysis of the failure and a sample project that can reproduce it.  I've also tried to create a more minimal reproduction of the problem. I've managed to reproduce a similar failure, but not the exact same one. The following code will fail when run:  ```java package com.example.demo;  import org.springframework.beans.BeansException; import org.springframework.beans.factory.BeanFactory; import org.springframework.beans.factory.BeanFactoryAware; import org.springframework.beans.factory.FactoryBean; import org.springframework.beans.factory.config.BeanPostProcessor; import org.springframework.context.ApplicationContext; import org.springframework.context.ApplicationContextAware; import org.springframework.context.ApplicationEvent; import org.springframework.context.ApplicationListener; import org.springframework.context.annotation.AnnotationConfigApplicationContext; import org.springframework.context.annotation.Bean;  public class DuplicatePostProcessing {  	@Bean 	public ExampleFactoryBean exampleFactory() { 		return new ExampleFactoryBean(); 	}  	@Bean 	public static ExampleBeanPostProcessor exampleBeanPostProcessor() { 		return new ExampleBeanPostProcessor(); 	}  	@Bean 	public ExampleApplicationEventListener exampleApplicationEventListener() { 		return new ExampleApplicationEventListener(); 	}  	public static void main(String[] args) { 		new AnnotationConfigApplicationContext(DuplicatePostProcessing.class).getBean(ExampleBean.class); 	}  	static class ExampleFactoryBean implements FactoryBean {  		private final ExampleBean exampleBean = new ExampleBean();  		@Override 		public ExampleBean getObject() throws Exception { 			return this.exampleBean; 		}  		@Override 		public Class getObjectType() { 			return ExampleBean.class; 		}  		@Override 		public boolean isSingleton() { 			return true; 		}  	}  	static class ExampleBeanPostProcessor implements BeanPostProcessor, ApplicationContextAware {  		private ApplicationContext applicationContext;   		@Override 		public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException { 			return bean; 		}  		@Override 		public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException { 			if (bean instanceof ExampleBean) { 				this.applicationContext.publishEvent(new ExampleApplicationEvent(this)); 			} 			return bean; 		}  		@Override 		public void setApplicationContext(ApplicationContext applicationContext) throws BeansException { 			this.applicationContext = applicationContext; 		}  	}  	static class ExampleApplicationEvent extends ApplicationEvent {  		public ExampleApplicationEvent(Object source) { 			super(source); 		}  	}  	static class ExampleApplicationEventListener implements ApplicationListener, BeanFactoryAware {  		private BeanFactory beanFactory;  		@Override 		public void onApplicationEvent(ExampleApplicationEvent event) { 			this.beanFactory.getBean(ExampleBean.class); 		}  		@Override 		public void setBeanFactory(BeanFactory beanFactory) throws BeansException { 			this.beanFactory = beanFactory; 		}  	}  	static class ExampleBean {  	}  } ```  It looks like it's blowing the stack but, rather than failing with a stack overflow, it outputs 400+ lines like the following:  ``` 16:44:30.704 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Returning cached instance of singleton bean 'exampleFactory' ```  It then fails with:  ``` Exception in thread ""main"" java.lang.NoClassDefFoundError: Could not initialize class org.springframework.beans.factory.BeanCreationException 	at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.getObjectFromFactoryBean(FactoryBeanRegistrySupport.java:116) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getObjectForBeanInstance(AbstractBeanFactory.java:1640) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:254) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:220) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveNamedBean(DefaultListableBeanFactory.java:1018) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:345) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:340) 	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1092) 	at com.example.demo.DuplicatePostProcessing.main(DuplicatePostProcessing.java:33) ```    ---  **Affects:** 4.3.16, 5.0.5  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/12280  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9281f820f1a2fa1cf860228418db458cb1d09c0d, https://github.com/spring-projects/spring-framework/commit/be4c07fc3241e65c3660e95c61e2ec163cb152a6, https://github.com/spring-projects/spring-framework/commit/fbd83015b131975a3927158a3f9556ff8a011de2  **Backported to:** [4.3.17](https://github.com/spring-projects/spring-framework/milestone/166?closed=1)  0 votes, 6 watchers","closed","type: bug,","spring-projects-issues","2018-04-30T15:48:33Z","2018-05-08T08:07:34Z"
"","21318","WebFlux handles requests with an illegal Host header inconsistently [SPR-16778]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-16778](https://jira.spring.io/browse/SPR-16778?redirect=false)** and commented  The various request adapters in WebFlux do not all handle a request with an illegal `Host` header in the same way. `ReactorHttpHandlerAdapter` catches a `URISyntaxException` and maps it to a 400 response. `UndertowHttpHandlerAdapter` and `ServletHttpHandlerAdapter` do not catch `URISyntaxException` which results in a 500 response.  ---  **Affects:** 5.0.5  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/12987  **Issue Links:** - #20119 DDoS Spring 5 RouterFunction apps  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b0aa08a6715de8584dc0e4889e0ef6113c8640d9, https://github.com/spring-projects/spring-framework/commit/8d157cb5b54c8fc2af116ef62831ef35a4a95a65","closed","type: enhancement,","spring-projects-issues","2018-04-27T12:33:20Z","2019-01-11T16:41:32Z"
"","21310","YamlPropertiesFactoryBean loses entries in the YAML document that have an empty array value [SPR-16769]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-16769](https://jira.spring.io/browse/SPR-16769?redirect=false)** and commented  This is related to #19986, although I think this issue is a bug rather than an enhancement.  `YamlPropertiesFactoryBean` handles an entry with an empty value differently to an entry with a value that is an empty array. An empty value becomes an empty string in the resulting `Properties` whereas the entry with an empty array value doesn't appear in the `Properties` at all.  Here are four tests that show this difference in behaviour (as well as the behaviour of `YamlMapFactoryBean`:  ```java 	@Test 	public void mapWithEmptyArrayValue() throws IOException { 		YamlMapFactoryBean factory = new YamlMapFactoryBean(); 		factory.setResources(new ByteArrayResource(""a: alpha\ntest: []"".getBytes())); 		factory.afterPropertiesSet(); 		assertThat(factory.getObject()).containsKey(""test""); 	}  	@Test 	public void mapWithEmptyValue() throws IOException { 		YamlMapFactoryBean factory = new YamlMapFactoryBean(); 		factory.setResources(new ByteArrayResource(""a: alpha\ntest:"".getBytes())); 		factory.afterPropertiesSet(); 		assertThat(factory.getObject()).containsKey(""test""); 	}  	@Test 	public void propertiesWithEmptyArrayValue() throws IOException { 		YamlPropertiesFactoryBean factory = new YamlPropertiesFactoryBean(); 		factory.setResources(new ByteArrayResource(""a: alpha\ntest: []"".getBytes())); 		factory.afterPropertiesSet(); 		assertThat(factory.getObject()).containsKey(""test""); 	}  	@Test 	public void propertiesWithEmptyValue() throws IOException { 		YamlPropertiesFactoryBean factory = new YamlPropertiesFactoryBean(); 		factory.setResources(new ByteArrayResource(""a: alpha\ntest:"".getBytes())); 		factory.afterPropertiesSet(); 		assertThat(factory.getObject()).containsKey(""test""); 	} ```  `propertiesWithEmptyArrayValue` fails due to the entry being lost.  ---  **Affects:** 4.3.16, 5.0.5  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/12965  **Issue Links:** - #19986 Allow to map null value from yaml - #19303 YAML + PropertyPlaceholderConfigurer needs to process non-String values as well - #21331 Restore YamlProcessor duplicate key handling against SnakeYAML 1.18+ (plus compatibility with 1.21)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/43f2334e82bdbe3a2a41120ae68130360f1f88e8, https://github.com/spring-projects/spring-framework/commit/e51330e905473d2f193f667dbf4b93207a6454d3","closed","in: core,","spring-projects-issues","2018-04-25T13:35:42Z","2019-01-11T16:42:36Z"
"","21224","Closing a MockHttpServletResponse's PrintWriter does not commit the response [SPR-16683]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-16683](https://jira.spring.io/browse/SPR-16683?redirect=false)** and commented  The [javadoc](https://docs.oracle.com/javaee/7/api/javax/servlet/ServletResponse.html#getWriter--) for getting the response's writer states that ""calling `flush()` on the `PrintWriter` commits the response"". The [javadoc for `Writer.close`](https://docs.oracle.com/javase/7/docs/api/java/io/Writer.html#close()) states that it ""closes the stream, flushing it first"". Therefore, I think that closing a `MockHttpServletResponse.ResponsePrintWriter` should result in the response being committed.   ---  **Affects:** 4.3.16, 5.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d3f3b41f521fe9be23042b386bc4a992cd37b541","closed","type: enhancement,","spring-projects-issues","2018-04-03T10:41:42Z","2018-07-26T08:09:32Z"
"","21190","Reduce the effect of different base package configuration on component scanning performance and make the effect more intuitive [SPR-16649]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-16649](https://jira.spring.io/browse/SPR-16649?redirect=false)** and commented  The base package configuration that's used for component scanning can have a significant impact on the time that the scan can take. In some cases the impact of narrowing the scan can be counter-intuitive as it actually takes longer to scan fewer packages. I've attached a small sample that reproduces the behaviour that I'll describe below.  In a large application (200 packages, each with 50 classes) scanning all 200 packages takes 601ms when those packages are available directly on the filesystem:  ``` $ ./gradlew run -Ppackages=single  > Task :run Scanning single took 601ms   BUILD SUCCESSFUL in 10s 2 actionable tasks: 2 executed ```  If the scanning is narrowed to the 100 packages that are of interest, the time taken decreases to 403ms:  ``` ./gradlew run -Ppackages=multi  > Task :run Scanning multi took 403ms   BUILD SUCCESSFUL in 1s 2 actionable tasks: 1 executed, 1 up-to-date ```  Halving the number of packages that are scanned has reduced the time taken by roughly a third.  If the application is packaged as a jar file, the time taken to scan all 200 packages increases slightly to 657ms:  ``` $ ./gradlew distZip && unzip build/distributions/component-scanning-performance.zip -d build/distributions && build/distributions/component-scanning-performance/bin/component-scanning-performance single  BUILD SUCCESSFUL in 2s 4 actionable tasks: 3 executed, 1 up-to-date Archive:  build/distributions/component-scanning-performance.zip    creating: build/distributions/component-scanning-performance/    creating: build/distributions/component-scanning-performance/lib/   inflating: build/distributions/component-scanning-performance/lib/component-scanning-performance.jar   inflating: build/distributions/component-scanning-performance/lib/spring-context-5.0.4.RELEASE.jar   inflating: build/distributions/component-scanning-performance/lib/spring-aop-5.0.4.RELEASE.jar   inflating: build/distributions/component-scanning-performance/lib/spring-beans-5.0.4.RELEASE.jar   inflating: build/distributions/component-scanning-performance/lib/spring-expression-5.0.4.RELEASE.jar   inflating: build/distributions/component-scanning-performance/lib/spring-core-5.0.4.RELEASE.jar   inflating: build/distributions/component-scanning-performance/lib/spring-jcl-5.0.4.RELEASE.jar    creating: build/distributions/component-scanning-performance/bin/   inflating: build/distributions/component-scanning-performance/bin/component-scanning-performance   inflating: build/distributions/component-scanning-performance/bin/component-scanning-performance.bat Scanning single took 657ms ```  If we then narrow the scan to focus on the 100 packages of interest, the time taken for the scan increases significantly to 1084ms:  ``` $ build/distributions/component-scanning-performance/bin/component-scanning-performance multi Scanning multi took 1084ms ```  On the surface, I find it unintuitive that narrowing the packages that need to be scanned takes longer when the packages are in a jar file. This problem is exacerbated by the fact that the scan is faster when the scan is narrowed when the packages are on the file system. This means that, for optimal scanning performance, you may need one configuration during development and test and another in production.  The scan's slower in the jar file case as, when a package exists in a jar file, the whole jar is scanned. This means that when the scan is narrowed by providing 100 sub-packages rather than a single parent package, the whole jar is scanned 100 times rather than once. Would it be possible to provide an entry point to scanning that takes multiple base packages? Then, if multiple base packages resolve to the same jar, the jar could be scanned once to find matches across all the base packages.   ---  **Affects:** 4.3.14, 5.0.4  **Attachments:** - [component-scanning-performance.zip](https://jira.spring.io/secure/attachment/25436/component-scanning-performance.zip) (_4.67 MB_)  0 votes, 5 watchers","open","type: enhancement,","spring-projects-issues","2018-03-27T09:37:21Z","2021-07-26T11:26:24Z"
"","21189","Concurrent result may be missed due to a race condition in MockMvc [SPR-16648]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-16648](https://jira.spring.io/browse/SPR-16648?redirect=false)** and commented  From Rossen on the referenced Spring Boot issue:  > The async value is [set on MvcResult](https://github.com/spring-projects/spring-framework/blob/19875d8e3f4dbeaca6c1441ae204e673a9e0c2b8/spring-test/src/main/java/org/springframework/test/web/servlet/TestDispatcherServlet.java#L74) through an interceptor, and that releases `perform(asyncDispatch(..))` to proceed. However there is a small window of time after that until the concurrentResult is set, see lines [316 vs 325](https://github.com/spring-projects/spring-framework/blob/19875d8e3f4dbeaca6c1441ae204e673a9e0c2b8/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java#L316-L327). If you put a break on line 325 to slow down setting the concurrentResult, the main thread proceeds with the asyncDispatch and then hangs upon entering in the controller method. >  > It looks like at some point [we did have](https://github.com/spring-projects/spring-framework/commit/119e793994796bc4e7ebfd7d57fe3b219c07c68b) a latch to wait for the dispatch, but that was removed in a [follow-up fix](https://github.com/spring-projects/spring-framework/commit/74de35df1ecccd13e982d6a684bddfcd69183b09). Not really sure how it went undetected for so long. Maybe the window is small enough, or perhaps something about this test that makes it a little more likely to fail.  I've been unable to reproduce the failure on macOS, but our Concourse CI environment (Docker container running on Linux) has been affected reasonably frequently, IIRC. That's the environment in which I captured the thread dump in the referenced Boot issue.  ---  **Affects:** 4.3.14, 5.0.4  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/12609  **Issue Links:** - #16141 Spring MVC Test can fail to obtain async result due to timing issue - #21236 ClassCastException in TestDispatcherServlet  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6e4bbac6f7d54fe8f7c4c0ac6a94e924cb24765e, https://github.com/spring-projects/spring-framework/commit/f9e6ea548241194b46e7eed1e47960e2c30119b7  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","type: bug,","spring-projects-issues","2018-03-27T08:57:37Z","2019-01-11T15:09:25Z"
"","21184","Provide a mechanism to indicate that a WebFlux request mapping is blocking and should be called on a separate thread [SPR-16643]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-16643](https://jira.spring.io/browse/SPR-16643?redirect=false)** and commented  Spring Boot's new Actuator endpoint model allows users to write endpoints with operations that may block. We need to adapt those operations to both WebMVC and WebFlux. When adapting to WebFlux, we identify operations that may block and use `publishOn` so that the work is performed on a different thread. We currently use the operation's return type to determine whether or not it will block, erring on the side of assuming that it will.  If Framework provided a mechanism for indicating whether or not a request mapping would block (an `@Blocking` annotation has been discussed) and automatically did the `publishOn`, we could adopt this approach in Spring Boot's Actuator and provide a consistent experience across Framework and Boot.   ---  **Affects:** 5.0.4","closed","type: enhancement,","spring-projects-issues","2018-03-26T17:03:12Z","2020-06-26T07:32:45Z"
"","21609","Avoid repeated factory class introspection in AbstractAutowireCapableBeanFactory [SPR-17071]","**[Andy Clement](https://jira.spring.io/secure/ViewProfile.jspa?name=aclement)** opened **[SPR-17071](https://jira.spring.io/browse/SPR-17071?redirect=false)** and commented  This is a follow on from a comment I made in #21608. I happened to notice a lot of repeated calls to `ReflectionUtils.getUniqueDeclaredMethods()` from `AbstractAutowireCapableBeanFactory.getTypeForFactoryMethod()`. On startup of petclinic I recorded how many times it asked for the same set of unique methods from the same type:  ``` 53 Asking class org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration for unique declared methods  21 Asking class org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointAutoConfiguration for unique declared methods  16 Asking class org.springframework.boot.devtools.autoconfigure.LocalDevToolsAutoConfiguration$RestartConfiguration for unique declared methods  12 Asking class org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration for unique declared methods  12 Asking class org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter for unique declared methods  12 Asking class org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration for unique declared methods  12 Asking class org.springframework.boot.actuate.autoconfigure.metrics.MetricsAutoConfiguration$MeterBindersConfiguration for unique declared methods  12 Asking class org.springframework.boot.actuate.autoconfigure.metrics.MetricsAutoConfiguration$JvmMeterBindersConfiguration for unique declared methods  11 Asking class org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration for unique declared methods  9 Asking class org.springframework.cache.jcache.config.ProxyJCacheConfiguration for unique declared methods  ... ```  (There are more, I just trimmed it there...).  I tried a couple of things, caching or adding a `getFilteredUniqueDeclaredMethods()` and passing in the condition from the immediately following `for(...)` loop.  The caching seemed to make ~130ms difference in my fatjar startup benchmark times (from 3.88 > 3.75) but also no doubt helped with reducing a bunch of object allocation.  Worth changing?  ---  **Affects:** 5.1 RC1  **Issue Links:** - #21608 Revise ResolvableType.as for introspection performance (limiting serializability) - [DATACMNS-1357](https://jira.spring.io/browse/DATACMNS-1357) Use shared DefaultConversionService in ProxyProjectionFactory and ResultProcessor  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f58854f4b941a87f912d0a19fe7cd27f496a4ee7","closed","type: enhancement,","spring-projects-issues","2018-07-20T16:51:06Z","2019-01-11T12:47:08Z"
"","21149","Provide a Builder for RequestEntity [SPR-16608]","**[André Bonna](https://jira.spring.io/secure/ViewProfile.jspa?name=andre.bonna)** opened **[SPR-16608](https://jira.spring.io/browse/SPR-16608?redirect=false)** and commented  That will make it easier to create more readable http clients with restTemplate.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8651b8d4c1b09d3bb75bb0cf56791970a72751d8","closed","type: enhancement,","spring-projects-issues","2018-03-18T01:44:01Z","2018-03-18T21:33:26Z"
"","21206","Block NioEventLoop on use RestController and WebClient together (React-netty) [SPR-16665]","**[Andrey Stepanov](https://jira.spring.io/secure/ViewProfile.jspa?name=drunstep)** opened **[SPR-16665](https://jira.spring.io/browse/SPR-16665?redirect=false)** and commented  DefaultLoopResources create 2 EventLoopGroup for clients and servers with same 4 threads with prefix 'reactor-http-nio-'  When RestController receive http request, thread 'reactor-http-nio-2' handle incoming request and send http request using WebClient (see method 'createAccessToken')  ```java     @PostConstruct     public void init() {         this.webClient = WebClient.builder()                 .baseUrl(baseUrl)                 .defaultHeader(HttpHeaders.ACCEPT, MediaType.APPLICATION_JSON_VALUE)                 .defaultHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE)                 .filter(logRequest())                 .filter(logResponse())                 .build();     }      public AccessToken createAccessToken(String username) {         return webClient.method(HttpMethod.POST)                 .uri(""/resources/accessTokens?userId={username}&key={key}"", username, this.apiKey)                 .retrieve()                 .bodyToMono(AccessToken.class).block(Duration.ofSeconds(10));     } ```  WebClient use same EventLoopGroup  (see ColocatedEventLoopGroup) and will use thread with name 'reactor-http-nio-2' which blocked  in '.block(Duration.ofSeconds(10))'  Workaround: ""Use separate EventLoopGroup for client and server requests""  P.S: I found issue #20734, but example is wrong. Need use react-netty for incoming and outgoing requests.   ---  **Affects:** 5.0.5","closed","status: invalid,","spring-projects-issues","2018-03-29T08:37:50Z","2019-01-14T04:31:38Z"
"","21183","DefaultMessageListenerContainer: CACHE_CONSUMER with dedicated connections for Bitronix transactions [SPR-16642]","**[Andrew Tulloch](https://jira.spring.io/secure/ViewProfile.jspa?name=drewtul)** opened **[SPR-16642](https://jira.spring.io/browse/SPR-16642?redirect=false)** and commented  If the error handling path in the DefaultMessageListenerContainer the JMS connection is closed and re-opened.  Combining this with CACHE_CONSUMER with bitronix results in an error from DualSessionWrapper due to the Connection being involved in multiple XA transactions during the close attempt, which bitronix rejects and DMLC logs, swallows and continues.  This results in the Connection not being closed and a new Connection obtained from the bitronix pool resulting in a gradual leak from the pool.  Utilising dedicated connections alleviates this and enables CACHE_CONSUMER to function without issue. So making this a configuration option to not use the shared connection whilst CACHE_* is enabled means we can avoid this path and only have a single thread using a dedicated connection avoiding the multiple active transaction close issue.   ---  **Affects:** 5.0.4  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1778","open","type: enhancement,","spring-projects-issues","2018-03-26T16:46:35Z","2018-06-05T16:11:22Z"
"","21348","Support use of MultipartFile as input to RestTemplate or WebClient [SPR-16808]","**[Andrew Neeson](https://jira.spring.io/secure/ViewProfile.jspa?name=andyrokit)** opened **[SPR-16808](https://jira.spring.io/browse/SPR-16808?redirect=false)** and commented  I had a need to proxy a `MultipartFile` from a controller to a `RestTemplate`.  I did not want the contents of this file to be stored locally (as with `FileSystemResource` or `ByteArrayResource`) so I created a `MultipartFileResource`.  I though this would be a useful addition to Spring's resource types, so I intended to submit a pull request.  Upon searching for similar issues I found #18147.  After reading through the comments, my understanding was that the resource wasn't created because of issues opening the InputStream twice.  Once for the `getInputStream()` call and another by the `contentLength()` call (by virtue of `AbstractResource` using the inputstream to calculate this value).  However a `MultipartFile already provides the content length (without accessing the InputStream).  So why not use that?  I.e.`  ```java @Override public long contentLength() throws IOException {  return multipartFile.getSize(); } ```     Assuming that: * That was that only problem with #18147 * The above suggestion solves it   I would like Spring to include a `MultipartFileResource`.  I'd be happy to submit a PR.     ---  **Affects:** 5.0.6  **Issue Links:** - #18147 resttemplate multipart post with InputStreamResource not working","closed","type: enhancement,","spring-projects-issues","2018-05-10T08:41:29Z","2019-01-11T16:45:44Z"
"","21505","SpringClassRule does not support the Arquillian MethodRuleChain [SPR-16967]","**[Andrew Gumbrecht](https://jira.spring.io/secure/ViewProfile.jspa?name=andygeede)** opened **[SPR-16967](https://jira.spring.io/browse/SPR-16967?redirect=false)** and commented  `SpringClassRule#findSpringMethodRuleField` checks for and enforces the presence of `SpringMethodRule` as a field.  It should also check for a `MethodRuleChain`, which is used for strict ordering of rules:  ```java @Rule  public final MethodRuleChain chainMethod = MethodRuleChain.outer(new ArquillianTest()).around(new SpringMethodRule()); ```  If the `MethodRuleChain` contains the `SpringMethodRule` then this is a valid configuration.  Failure to use a `MethodRuleChain` causes sporadic test failures when the rule order is not observed.  The `ClassRule` works as expected:  ```java @ClassRule  public static final RuleChain chainClass = RuleChain.outerRule(new ArquillianTestClass()).around(new SpringClassRule()); ```    ---  **Affects:** 5.0.7  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b0ece0e967d825e8b395f188cba945d76563014b","closed","type: enhancement,","spring-projects-issues","2018-06-21T06:45:55Z","2018-07-26T08:09:33Z"
"","21704","UriComponentsBuilder does not encode ""$"" properly [SPR-17168]","**[Andras Tornai](https://jira.spring.io/secure/ViewProfile.jspa?name=tornaia)** opened **[SPR-17168](https://jira.spring.io/browse/SPR-17168?redirect=false)** and commented     ```java @Test public void encodeAndExpandDollarSignParameter() {    UriComponents uri = UriComponentsBuilder          .fromPath(""/whatever"").queryParam(""q"", ""{value}"").encode().build()          .expand(""JavaClass$1.class"");     assertEquals(""/whatever?q=JavaClass%241.class"", uri.toString()); } ```  Expected :/whatever?q=JavaClass%241.class Actual :/whatever?q=JavaClass%5C%241.class  Thus on server side the JavaClass$1.class value becomes JavaClass\$1.class  I made some investigation and this extra \ is there because of this statement: https://github.com/spring-projects/spring-framework/commit/d81ec55a60a40dbfdda4846034e3170e23773394#diff-07a4953c743ebcffceaf745f59544ac7R266 - maybe it helps  Do I use UriComponentsBuilder incorrectly?   ---  **Affects:** 5.0.8  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/99f012971185bedd86d59cf7e19c8e8b581e36e7, https://github.com/spring-projects/spring-framework/commit/f23496ae32c7d0d1ea58a492101ee2e1abcc88e6","closed","type: bug,","spring-projects-issues","2018-08-12T15:43:30Z","2019-01-11T14:00:01Z"
"","21684","CheckboxTag incorrectly processing hidden field through RequestDataValueProcessor [SPR-17147]","**[Ander Ruiz](https://jira.spring.io/secure/ViewProfile.jspa?name=anderruiz)** opened **[SPR-17147](https://jira.spring.io/browse/SPR-17147?redirect=false)** and commented  CheckBoxTag may create a hidden field which name will be ""_checkBoxName"" and its value is usually ""on"". The problem is that when this field is sent to RequestDataValueProcessor interface, instead of sending it as a ""hidden"" field it is sent as if it was a ""checkbox"", which is incorrect, in version 5.0.7 this line:  ```java tagWriter.writeAttribute(""value"", processFieldValue(name, ""on"", getInputType())); ```  should be changed to:  ```java tagWriter.writeAttribute(""value"", processFieldValue(name, ""on"", ""hidden"")); ```  At least the following classes suffer the same issue  spring-webmvc/src/main/java/org/springframework/web/servlet/tags/form/CheckboxesTag.java spring-webmvc/src/main/java/org/springframework/web/servlet/tags/form/CheckboxTag.java  i.e. SelectTag is handling the hidden field properly   ---  **Affects:** 4.3.18, 5.0.7  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fa72186e28b3541e618be69741317d2655d9f19e, https://github.com/spring-projects/spring-framework/commit/9580bbd59f1488ce620f6127adca8fae7b37bf7b, https://github.com/spring-projects/spring-framework/commit/bd060a19ac91aba9bf9ee557b8f6cc91c2a42396  **Backported to:** [4.3.19](https://github.com/spring-projects/spring-framework/milestone/168?closed=1)","closed","type: bug,","spring-projects-issues","2018-08-08T13:53:59Z","2018-08-17T09:42:43Z"
"","21690","TrackedConditionEvaluator skips loading bean definitions for configuration classes that should not be skipped [SPR-17153]","**[Anastasiia Smirnova](https://jira.spring.io/secure/ViewProfile.jspa?name=aloren)** opened **[SPR-17153](https://jira.spring.io/browse/SPR-17153?redirect=false)** and commented  I've found this issue while using Spring boot and files a ticket to Spring Boot:  https://github.com/spring-projects/spring-boot/issues/14018  Currently we are facing a complex issue with autoconfigurations that are marked with `@EnableScheduling`. I have created [sample project](https://github.com/Aloren/spring-boot-autoconfiguration-issue) that reproduces an issue.  It consists of 4 modules: - library-0 module   This module defines `Library0AutoConfiguration` that has `@EnableScheduling` and `@AutoConfigureBefore(name = ""org.library1.Library1AutoConfiguration"")`. It will not start because of unsatisfied `@ConditionalOnBean` (bean is not present in context). - library-1 module   This module defines `Library1AutoConfiguration` that has `@AutoConfigureBefore(name = ""org.library2.Library2AutoConfiguration"")`. - library-2 module   This module defines `Library2AutoConfiguration` that has `@EnableScheduling` and `@Conditional` on bean of type `Library1.class`. - service module   This module imports: `library-0`, `library-1` and `library-2` and enables autoconfiguration.   There is test `ServiceConfigurationTest` that can be run to reproduce an issue:     ```java @SpringBootTest(         webEnvironment = SpringBootTest.WebEnvironment.NONE,         classes = ServiceConfiguration.class ) @RunWith(SpringRunner.class) public class ServiceConfigurationTest {    @Autowired     Library1 library1;     @Autowired     Library2 library2;    @Test     public void beans_should_be_present() throws Exception {         assertNotNull(library1);         assertNotNull(library2);     } } ```  Actual result: both `Library1AutoConfiguration` and `Library2AutoConfiguration` should start, because they do not have dependency on `Library0AutoConfiguration`, but instead `Library2AutoConfiguration` will not start and test will fail.Removing `@EnableScheduling` from `Library0AutoConfiguration` fixes an issue.  We have found that `TrackedConditionEvaluator.shouldSkip` for `org.springframework.scheduling.annotation.SchedulingConfiguration` skips loading bean definitions for `Library2AutoConfiguration`.     Spring Boot version 1.5.13  Spring 4.3.17        ---  **Issue Links:** - #20765 Configuration class's superclass may be incorrectly skipped if first importer isn't skipped till register bean phase of condition evaluation","open","in: core,","spring-projects-issues","2018-08-09T11:30:05Z","2019-01-11T14:00:10Z"
"","21475","@PathVariable's javadoc wrongly states it supports MultiValueMaps [SPR-16936]","**[Allon Mureinik](https://jira.spring.io/secure/ViewProfile.jspa?name=mureinik)** opened **[SPR-16936](https://jira.spring.io/browse/SPR-16936?redirect=false)** and commented  `@PathVariable`'s javadoc states that it supports `MultiValueMap` parameters (introduced by #16952), but by reading through the code, that does not seem to be the case (compare `PathVariableMapMethodArgumentResolver` to `RequestParamMapMethodArgumentResolver`).  Moreover, parsing `MultipleValueMap` is done according to the "";"", and placing such a character in a path (e.g., consider something like ""/app/{param}/show"" would just break the path.  The documentation should be amended to remove the mention of `MultiValueMap`.     ---  **Affects:** 4.3.17, 5.0.6  **Issue Links:** - #16952 Improve Reference documentation `@PathVariable`, `@RequestHeader` & `@RequestParam` using Map  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1854, and commits https://github.com/spring-projects/spring-framework/commit/a9dd927870e6a2ce97bc58fa0ed0e529f8aed8ea, https://github.com/spring-projects/spring-framework/commit/0b64bcd319abf39be435dd7b631c2045d60a8039, https://github.com/spring-projects/spring-framework/commit/2573a543b260297b29fb3b365200ea943a0cd0cc, https://github.com/spring-projects/spring-framework/commit/224fcc171281b84706dcd4c0545fb722c3d36b03  **Backported to:** [4.3.18](https://github.com/spring-projects/spring-framework/milestone/167?closed=1)","closed","type: task,","spring-projects-issues","2018-06-12T08:51:43Z","2019-01-13T20:25:51Z"
"","21367","Capitalize strings with the correctly implementation [SPR-16827]","**[Allan Garcez](https://jira.spring.io/secure/ViewProfile.jspa?name=vandalvnl)** opened **[SPR-16827](https://jira.spring.io/browse/SPR-16827?redirect=false)** and commented  Hey everyone,   I am a brazilian student and decide to use Spring as my main framework to developer my API's, so I find an inconsistency in StringUtils.capitalize. This method only capitalize the first letter of first word in string, when the ""correctly way"" is capitalize all first letter in all words (like in CSS text-transform property). So, I decide to code a solution for this, and add methods to my class sugestion.      All unit tests in project are aprove and I hope you will accept and implement this class to the Spring ecosystem    ---  **Reference URL:** https://github.com/vandalvnl/capitalize-utils","closed","status: declined,","spring-projects-issues","2018-05-16T02:13:42Z","2019-11-19T14:34:31Z"
"","21638","Add the ability to specify active profiles in @SpringJUnitConfig [SPR-17101]","**[Alexey Trofimov](https://jira.spring.io/secure/ViewProfile.jspa?name=altro)** opened **[SPR-17101](https://jira.spring.io/browse/SPR-17101?redirect=false)** and commented  It would be cool if you could set the profile for testing right in this annotation.  Now, i must write 2 annotations in every test:  `@SpringJUnitConfig` `@ActiveProfiles`(""test"")  Want write something like this:  `@SpringJUnitConfig`(profiles = ""test"")  I think, most JUnit tests uses custom test profile.  Why not using system property? Because if you develop with IDE, for example, IntelliJ IDEA, you can run test by one click and IDEA must know, which profile must be used for this test.   --- No further details from [SPR-17101](https://jira.spring.io/browse/SPR-17101?redirect=false)","closed","type: enhancement,","spring-projects-issues","2018-07-27T16:01:46Z","2018-08-01T08:30:19Z"
"","21685","JdbcTemplate method names for lambdas [SPR-17148]","**[Alexandru-Constantin Bledea](https://jira.spring.io/secure/ViewProfile.jspa?name=apixandru)** opened **[SPR-17148](https://jira.spring.io/browse/SPR-17148?redirect=false)** and commented  I have encountered many times after changing the java8 code to use lambdas rather than strict objects that the compiler chooses the wrong method.  Because both RowCallbackHandler and ResultSetExtractor have the same lambda signature, the compiler can get confused sometimes and call the method that i wasn't intending to call.  I have found that in few places calls to jdbcTemplate.query(...,(rs) -> something(rs)) will be interpreted as calls to the RowCallbackHandler rather than ResultSetExtractor and there is no indication that this is happening.  Perhaps now with lambdas becoming more common place it would make sense to deprecate these methods and replace them with more explicit calls like queryWithHandler and queryWithExtractor so that we can be sure that we're calling the correct type?      --- No further details from [SPR-17148](https://jira.spring.io/browse/SPR-17148?redirect=false)","open","in: data,","spring-projects-issues","2018-08-08T14:07:26Z","2019-01-11T14:00:40Z"
"","21603","SimpleJdbcCall - Provide flexibility when building the call string [SPR-17065]","**[Alexandru-Constantin Bledea](https://jira.spring.io/secure/ViewProfile.jspa?name=apixandru)** opened **[SPR-17065](https://jira.spring.io/browse/SPR-17065?redirect=false)** and commented  Currently SimpleJdbcCall allows overriding the call string by overriding getCallString() but it would be great if there was a way to intercept the building of this string.  Not sure if there is a better way, but when using SimpleJdbcCall, if we want to use a oracle pipelined function we have to wrap the call into a table call.  Currently my PipelineEnabledSimpleJdbcCall has the implementation     ```java public String getCallString() {     String callString = super.getCallString();     if (functionTypePipelined && callString != null && callString.startsWith(""{call "") && callString.endsWith(""{"")){          String rawCall = callString.substring(6, callString.length() - 1);          return ""SELECT * FROM TABLE("" + rawCall + "")"";     }     return callString; }  ```     It would be great if we had a buildQuery(Params... parameters) method that would allow me to build the call that i want without hacking it like i'm doing now. AbstractJdbcCall has some good logic that tells us which parameters are ignored and which ones aren't so it would be great if we could just send in the parameters that we really care about.      --- No further details from [SPR-17065](https://jira.spring.io/browse/SPR-17065?redirect=false)","open","type: enhancement,","spring-projects-issues","2018-07-18T20:32:32Z","2018-07-19T10:02:02Z"
"","21460","AbstractMessageConverterMethodProcessor doesn't respect already handled headers and result-codes [SPR-16921]","**[Alexander Schuetz](https://jira.spring.io/secure/ViewProfile.jspa?name=fenvariel)** opened **[SPR-16921](https://jira.spring.io/browse/SPR-16921?redirect=false)** and commented  We support ranged requests at specific entrypoints in our REST-API (especially for embedding videos and other large documents).  Since we don't work on files and the data is potentially large we cannot use File-resources and don't want to use byte[]. Instead we are using InputStreamResource which only contains the requested range of data as stream.  The controller method sets the status code 206 and also sets the following headers: * ETag * Content-Disposition * Accept-Ranges * Content-Range  In version 4.3.17.RELEASE everything works fine and i.e. videos are displayed correctly in browsers Chrome, Firefox and InternetExporer.  Upgrading to version 5.0.2 breaks this functionality, since AbstractMessageConverterMethodProcessor tries to handle the ranged-request itself and doesn't recognize that it has already been handled. Thus it calls InputStreamResource.getContentLength() and tries to read the InputStream afterwards which results in an Exception, since the stream can only be read once. => status code 500 is returned.     We needed to return to spring version 4 because of this behaviour.  ---  **Affects:** 5.0.2  **Issue Links:** - #21295 IllegalStateException: InputStream has already been read when returning ResponseEntity  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/818e4b077640056d6e65ef37be1bec76537fa991","closed","type: bug,","spring-projects-issues","2018-06-08T12:45:39Z","2019-01-14T04:30:47Z"
"","21304","ResourceHttpRequestHandler throws IOException, when trying to access pre-existing folders [SPR-16763]","**[Alexander L. Mikhailov](https://jira.spring.io/secure/ViewProfile.jspa?name=zeppelin)** opened **[SPR-16763](https://jira.spring.io/browse/SPR-16763?redirect=false)** and commented  Adding a resource mapping for ""/"", will cause _DispatcherServlet_ to fail with _IOException_, if URI matches a pre-existing folder in _/webapp_.  ```  ```  ``` Server ErrorCaused by:java.io.IOException: Is a directory 	at sun.nio.ch.FileDispatcherImpl.read0(Native Method) 	at sun.nio.ch.FileDispatcherImpl.read(FileDispatcherImpl.java:46) 	at sun.nio.ch.IOUtil.readIntoNativeBuffer(IOUtil.java:223) 	at sun.nio.ch.IOUtil.read(IOUtil.java:197) 	at sun.nio.ch.FileChannelImpl.read(FileChannelImpl.java:159) 	at sun.nio.ch.ChannelInputStream.read(ChannelInputStream.java:65) 	at sun.nio.ch.ChannelInputStream.read(ChannelInputStream.java:109) 	at sun.nio.ch.ChannelInputStream.read(ChannelInputStream.java:103) 	at java.io.InputStream.read(InputStream.java:101) 	at org.springframework.util.StreamUtils.copy(StreamUtils.java:137) 	at org.springframework.http.converter.ResourceHttpMessageConverter.writeContent(ResourceHttpMessageConverter.java:110) 	at org.springframework.http.converter.ResourceHttpMessageConverter.writeInternal(ResourceHttpMessageConverter.java:102) 	at org.springframework.http.converter.ResourceHttpMessageConverter.writeInternal(ResourceHttpMessageConverter.java:45) 	at org.springframework.http.converter.AbstractHttpMessageConverter.write(AbstractHttpMessageConverter.java:226) 	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:480) 	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:51) 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967) 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901) 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) 	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:687) 	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790) ```  (see https://github.com/alexlmikh/spring-mvc-ioexception)   ---  **Affects:** 4.3.16  **Reference URL:** https://github.com/alexlmikh/spring-mvc-ioexception","closed","in: core,","spring-projects-issues","2018-04-24T14:16:35Z","2019-01-12T05:18:55Z"
"","21616","Spring-context optimization: LinkedMultiValueMap and ArrayList should be initialized with specified capacity for preventing collections from resizing [SPR-17079]","**[Alexander Fedorov](https://jira.spring.io/secure/ViewProfile.jspa?name=alexofo83i)** opened **[SPR-17079](https://jira.spring.io/browse/SPR-17079?redirect=false)** and commented  Spring-context library should be tuned in memory allocation point of view. We use JMC and JFR API for aggregating memory allocation events. Minor GC could be tuned with help of investigating of memory allocation events inside new TLAB. Major GC could be tuned with help of investigating of memory allocation events outside TLAB. We focused on reducing Minor GC overhead.  Following Setup Categories used:  ``` spring.interceptor.resolveCaches org.springframework.cache.interceptor.AbstractCacheResolver.resolveCaches() spring.interceptor.CacheAspectSupport org.springframework.cache.interceptor.CacheAspectSupport.execute() spring.expression org.springframework.expression.spel.CodeFlow spring.core org.springframework.core.BridgeMethodResolver.findBridgedMethod()  logger.info org.slf4j.impl.Log4jLoggerAdapter.info() logger.info weblogic.i18n.logging.NonCatalogLogger.info()  logger.warning weblogic.i18n.logging.NonCatalogLogger.warning() spring.beans org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean() spring.aop org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.() spring.aop org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.() spring.aop org.springframework.aop.aspectj.RuntimeTestWalker$ThisInstanceOfResidueTestVisitor.() ```  1. AbstractCacheResolver.resolveCaches  !screenshot-1.png|thumbnail!  ```  package org.springframework.cache.interceptor;   public abstract class AbstractCacheResolver implements CacheResolver, InitializingBean {  	@Override 	public Collection resolveCaches(CacheOperationInvocationContext context) { 		Collection cacheNames = getCacheNames(context); 		if (cacheNames == null) { 			return Collections.emptyList(); 		} 		else { 			Collection result = new ArrayList(); 			for (String cacheName : cacheNames) { 				Cache cache = this.cacheManager.getCache(cacheName); 				if (cache == null) { 					throw new IllegalArgumentException(""Cannot find cache named '"" + 							cacheName + ""' for "" + context.getOperation()); 				} 				result.add(cache); 			} 			return result; 		} 	} ```  Here a screenshot of diff between 4.1.x and 5.0.x versions:  !screenshot-2.png|thumbnail!  Need specify ArrayList capacity right in creation.  2. CacheAspectSupport$CacheOperationContexts.init()  !screenshot-4.png|thumbnail!  ``` package org.springframework.cache.interceptor;  public abstract class CacheAspectSupport extends AbstractCacheInvoker 		implements InitializingBean, SmartInitializingSingleton, ApplicationContextAware {   	private class CacheOperationContexts {  		private final MultiValueMap, CacheOperationContext> contexts = 				new LinkedMultiValueMap, CacheOperationContext>();  		public CacheOperationContexts(Collection operations, Method method, 				Object[] args, Object target, Class targetClass) {  			for (CacheOperation operation : operations) { 				this.contexts.add(operation.getClass(), getOperationContext(operation, method, args, target, targetClass)); 			} 		}  		public Collection get(Class operationClass) { 			Collection result = this.contexts.get(operationClass); 			return (result != null ? result : Collections.emptyList()); 		} 	}  ```  Here a screenshot of diff between 4.1.x and 5.0.x versions: !screenshot-3.png|thumbnail!  Should be added capacity for Map. it help reduce resize and unnecessary memory allocation.  Possible solutions:  ``` 	private class CacheOperationContexts {  		private final MultiValueMap, CacheOperationContext> contexts;// = 				//new LinkedMultiValueMap, CacheOperationContext>();  		public CacheOperationContexts(Collection operations, Method method, 				Object[] args, Object target, Class targetClass) { 			contexts = new LinkedMultiValueMap, CacheOperationContext>( (int) Math.round( operations.size()/0.75) ); 			for (CacheOperation operation : operations) { 				this.contexts.add(operation.getClass(), getOperationContext(operation, method, args, target, targetClass)); 			} 		}  		public Collection get(Class operationClass) { 			Collection result = (contexts != null? this.contexts.get(operationClass): null ); 			return (result != null ? result : Collections.emptyList()); 		} 	}  ```  +   ```  	@Override 	public Collection resolveCaches(CacheOperationInvocationContext context) { 		Collection cacheNames = getCacheNames(context); 		if (cacheNames == null) { 			return Collections.emptyList(); 		} 		else { 			Collection result = new ArrayList( (int) Math.round(cacheNames.size() ) ); 			for (String cacheName : cacheNames) { 				Cache cache = this.cacheManager.getCache(cacheName); 				if (cache == null) { 					throw new IllegalArgumentException(""Cannot find cache named '"" + 							cacheName + ""' for "" + context.getOperation()); 				} 				result.add(cache); 			} 			return result; 		} 	} ```  ---  **Affects:** 5.0.7  **Attachments:** - [AbstractCacheResolver.bak](https://jira.spring.io/secure/attachment/25779/AbstractCacheResolver.bak) (_2.92 kB_) - [AbstractCacheResolver.java](https://jira.spring.io/secure/attachment/25780/AbstractCacheResolver.java) (_2.91 kB_) - [CacheAspectSupport.bak](https://jira.spring.io/secure/attachment/25781/CacheAspectSupport.bak) (_23.71 kB_) - [CacheAspectSupport.java](https://jira.spring.io/secure/attachment/25782/CacheAspectSupport.java) (_23.88 kB_) - [screenshot-1.png](https://jira.spring.io/secure/attachment/25783/screenshot-1.png) (_61.40 kB_) - [screenshot-2.png](https://jira.spring.io/secure/attachment/25784/screenshot-2.png) (_109.90 kB_) - [screenshot-3.png](https://jira.spring.io/secure/attachment/25777/screenshot-3.png) (_101.69 kB_) - [screenshot-4.png](https://jira.spring.io/secure/attachment/25778/screenshot-4.png) (_71.86 kB_)  **Issue Links:** - #21642 Initialize pre-filled HashMaps with large enough capacity (e.g. in HttpMethod)","closed","type: enhancement,","spring-projects-issues","2018-07-24T10:29:49Z","2019-01-11T12:47:14Z"
"","21838","Regression in Spring 5.1 [SPR-17305]","**[Alex](https://jira.spring.io/secure/ViewProfile.jspa?name=dusty)** opened **[SPR-17305](https://jira.spring.io/browse/SPR-17305?redirect=false)** and commented  I'm trying to upgrade my project from Boot 2.0.x to Boot 2.1.x in order to leverage Spring 5.1 but the application won't start due a problem configuring the websocket support.  I've a class defined this way:  > public class StompWebSocketConfig extends WebSocketMessageBrokerConfigurationSupport implements WebSocketMessageBrokerConfigurer     with this method:  > `@Bean` > `@Override` > public WebSocketHandler subProtocolWebSocketHandler()  > {   return new CustomSubProtocolWebSocketHandler(clientInboundChannel(), clientOutboundChannel(), sessionService); } >    And while trying to run the application I get this error:     > *************************** >  > APPLICATION FAILED TO START >  > *************************** >  > Description: >  > The bean 'subProtocolWebSocketHandler', defined in class path resource [wf/bitcoin/chainmaster/StompWebSocketConfig.class], could not be registered. A bean with that name has already been defined in class path resource [org/springframework/web/socket/config/annotation/DelegatingWebSocketMessageBrokerConfiguration.class] and overriding is disabled. >  > Action: >  > Consider renaming one of the beans or enabling overriding by setting spring.main.allow-bean-definition-overriding=true >  > [WARNING] > java.lang.reflect.InvocationTargetException > at sun.reflect.NativeMethodAccessorImpl.invoke0 (Native Method) > at sun.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62) > at sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43) > at java.lang.reflect.Method.invoke (Method.java:498) > at org.springframework.boot.maven.AbstractRunMojo$LaunchRunner.run (AbstractRunMojo.java:558) > at java.lang.Thread.run (Thread.java:748) > Caused by: org.springframework.beans.factory.support.BeanDefinitionOverrideException: Invalid bean definition with name 'subProtocolWebSocketHandler' defined in class path resource [wf/bitcoin/chainmaster/StompWebSocketConfig.class]: Cannot register bean definition [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=stompWebSocketConfig; factoryMethodName=subProtocolWebSocketHandler; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [.../StompWebSocketConfig.class]] for bean 'subProtocolWebSocketHandler': There is already [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=org.springframework.web.socket.config.annotation.DelegatingWebSocketMessageBrokerConfiguration; factoryMethodName=subProtocolWebSocketHandler; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [org/springframework/web/socket/config/annotation/DelegatingWebSocketMessageBrokerConfiguration.class]] bound. > at org.springframework.beans.factory.support.DefaultListableBeanFactory.registerBeanDefinition (DefaultListableBeanFactory.java:896) > at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitionsForBeanMethod (ConfigurationClassBeanDefinitionReader.java:274)     ---  **Affects:** 5.1 GA  **Issue Links:** - #21820 Regression in 5.1 RC3: BeanDefinitionOverrideException against mock config","closed","status: invalid,","spring-projects-issues","2018-09-26T20:08:53Z","2019-01-13T20:02:50Z"
"","21427","Unexpected bean creation order in collection [SPR-16888]","**[Alex](https://jira.spring.io/secure/ViewProfile.jspa?name=dusty)** opened **[SPR-16888](https://jira.spring.io/browse/SPR-16888?redirect=false)** and commented  I have several `@Component` implementing an interface I1, and I've a `@Service` with an `@autowired` List\.  All of those components and services have a `@PostConstruct` where they autoconfigure based on configuration properties.  The problem is that while executing the `@PostConstruct` in the `@Service` component, sometimes the `@PostConstruct` of his injected components has not yet been called.  To be more clear: my service correctly gets the list of all components implementing a certain interface, but sometimes (randomly), they are not completely initialized when executing his `@PostConstruct` method.   ---  **Affects:** 5.0.6","open","in: core,","spring-projects-issues","2018-05-31T20:20:32Z","2019-01-11T17:07:27Z"
"","21317","An illegal reflective access operation has occurred [SPR-16777]","**[Alex Rader](https://jira.spring.io/secure/ViewProfile.jspa?name=rrader)** opened **[SPR-16777](https://jira.spring.io/browse/SPR-16777?redirect=false)** and commented  WARNING: An illegal reflective access operation has occurred WARNING: Illegal reflective access by org.springframework.cglib.core.ReflectUtils$1 (file:/home/user/.gradle/caches/modules-2/files-2.1/org.springframework/spring-core/5.0.5.RELEASE/1bd9feb1d9dac6accd27f5244b6c47cfcb55045c/spring-core-5.0.5.RELEASE.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain) WARNING: Please consider reporting this to the maintainers of org.springframework.cglib.core.ReflectUtils$1 WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations WARNING: All illegal access operations will be denied in a future release  ---  **Issue Links:** - #20414 MethodHandles.Lookup.defineClass for CGLIB class definition purposes (_**""is duplicated by""**_)","closed","status: duplicate,","spring-projects-issues","2018-04-27T07:15:27Z","2019-01-14T04:31:19Z"
"","21207","Make it possible to disable Scheduling Tasks by application property [SPR-16666]","**[Alex Rader](https://jira.spring.io/secure/ViewProfile.jspa?name=rrader)** opened **[SPR-16666](https://jira.spring.io/browse/SPR-16666?redirect=false)** and commented  https://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html  ```java @SpringBootApplication @EnableScheduling public class Application {      public static void main(String[] args) throws Exception {         SpringApplication.run(Application.class);     } } ```  When Scheduling is enabled some times we need to deploy our application on multiple server, but want to run tasks only on one server, so we need a property in application.properties file to specify if task should run  https://stackoverflow.com/questions/49533543/spring-and-scheduled-tasks-on-multiple-instances   --- No further details from [SPR-16666](https://jira.spring.io/browse/SPR-16666?redirect=false)","closed","type: enhancement,","spring-projects-issues","2018-03-29T14:07:33Z","2018-12-05T17:45:57Z"
"","21205","Kotlin transaction function/wrapper [SPR-16664]","**[Alex Rader](https://jira.spring.io/secure/ViewProfile.jspa?name=rrader)** opened **[SPR-16664](https://jira.spring.io/browse/SPR-16664?redirect=false)** and commented  Please add a transaction function/wrapper, something like https://github.com/ewolff/scala-spring/blob/master/src/main/scala/de/adesso/scalaspring/tx/TransactionManagement.scala  It will be more consistent in Kotlin.  ```java transactional { // do stuff in transaction } ```    --- No further details from [SPR-16664](https://jira.spring.io/browse/SPR-16664?redirect=false)","closed","status: superseded,","spring-projects-issues","2018-03-29T06:48:57Z","2022-02-18T20:44:25Z"
"","21188","Add kotlinx.serialization JSON support to Spring MVC","**[Alex Rader](https://jira.spring.io/secure/ViewProfile.jspa?name=rrader)** opened **[SPR-16647](https://jira.spring.io/browse/SPR-16647?redirect=false)** and commented  Please add support for Kotlin serialization library  https://github.com/kotlin/kotlinx.serialization   ---  4 votes, 9 watchers","closed","type: enhancement,","spring-projects-issues","2018-03-27T08:46:09Z","2020-09-14T21:26:27Z"
"","21557","@Scheduled to execute once on start [SPR-17019]","**[Alex Panchenko](https://jira.spring.io/secure/ViewProfile.jspa?name=apanchenko)** opened **[SPR-17019](https://jira.spring.io/browse/SPR-17019?redirect=false)** and commented  In some cases an initialization operation could take some time and it would be better executing it in background. In crontab it's possible to have tasks scheduled `@reboot`, so I think a similar approach would work the best.   ---  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1875","open","in: core,","spring-projects-issues","2018-07-09T07:56:05Z","2019-01-11T12:49:56Z"
"","21352","Extract ScheduledAnnotationBeanPostProcessor.createRunnable() [SPR-16812]","**[Alex Panchenko](https://jira.spring.io/secure/ViewProfile.jspa?name=apanchenko)** opened **[SPR-16812](https://jira.spring.io/browse/SPR-16812?redirect=false)** and commented  I am interested in executing some additional code around the methods annotated with `@Scheduled`.  Also possibly I would wrap it with `DelegatingErrorHandlingRunnable` myself in order to customize exception logging (e.g. use logger based on the class name).  Currently `ScheduledAnnotationBeanPostProcessor.processScheduled()` first always creates `ScheduledMethodRunnable` and then schedules it accordingly, so the easiest way to achieve my idea would be extracting a new method.  ---  **Affects:** 4.3.17, 5.0.6  **Issue Links:** - #21374 Extending ScheduledTaskRegistrar functionality  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1827, and commits https://github.com/spring-projects/spring-framework/commit/9aed9bf823fa6ba3944caa99f90aad02850ec16f","closed","in: core,","spring-projects-issues","2018-05-11T12:50:25Z","2019-01-11T16:45:56Z"
"","21256","WebClient does not seem to deserialize parameterized types [SPR-16715]","**[Alejandro Imass](https://jira.spring.io/secure/ViewProfile.jspa?name=aimass)** opened **[SPR-16715](https://jira.spring.io/browse/SPR-16715?redirect=false)** and commented  Hi,  I am no expert in Spring Reactive but after a lot of headbanging and research I think this should just work, but it doesn't:  ```java public Mono> getFoos() {         return client.get()             .uri(""/foos"").accept(MediaTypes.HAL_JSON)             .retrieve()             .bodyToMono(new ParameterizedTypeReference>(){}); } ```  The identical example works with RestTemplate:  ```java ResponseEntity> responseEntity =      restTemplate.exchange(""/foos"", HttpMethod.GET, null,      new ParameterizedTypeReference>() {},      randomServerPort, 0, 100); PagedResources resources = responseEntity.getBody(); List foos = new ArrayList(resources.getContent()); ```  If this is an actual bug, is there a workaround? I have tried manually doing the de-serialization (i.e. using a Jackson object mapper directly by means Jackson's own TypeReference) but I've had no luck so far.... if you could point to an example workaround it would be great.  Or otherwise point out what is wrong with my code example, as no one on StackOverflow seems to know either.  TIA!  Alex    ---  **Affects:** 5.0.5  **Reference URL:** https://stackoverflow.com/questions/49420629/spring-5-reactive-webclient-does-not-seem-to-deserialize-parameterized-types","closed","status: declined,","spring-projects-issues","2018-04-11T16:18:49Z","2019-01-12T16:21:28Z"
"","21579","SpringBoot: ModelAttribute default property through yml file not working [SPR-17041]","**[Ajay Sharma](https://jira.spring.io/secure/ViewProfile.jspa?name=ajaysharmamca)** opened **[SPR-17041](https://jira.spring.io/browse/SPR-17041?redirect=false)** and commented  Age limit default value is not picked by `ModelAttribute`, However it was working fine with request parameter.  YML File     age:  `  default:`  `    limit: 60`     Below is old Code with Request Parameter Request        public ResponseEntity\ getPersonAccount(`@RequestParam` String name,`@Min`(value=0) `@RequestParam`(required = false, defaultValue = ""${age.default.limit}"") Integer limit ){  `}`  `Below is new Code with ModelAttribute Request`     `public ResponseEntity getPersonAccount(@ModelAttribute(""person"" ) Person person) {`}  `@Configuration` public class Person implements Serializable {  `   private String name;`  `   @Value(""${age.default.limit}"" )`  {   private Integer limit; getter/setter}}  `}`  `defaultValue = ""${age.default.limit}"" in request parameter was working fine from yml file. I only want to provide default value to new model object from yml file. I am looking solution for that only. getter/ setter are already there`      ---  **Affects:** 5.0.7","closed","in: core,","spring-projects-issues","2018-07-14T13:13:28Z","2019-01-12T05:18:32Z"
"","21179","Resttemplate is not supporting for docx and xlsx and pdf format  [SPR-16638]","**[Ajay  Kumar](https://jira.spring.io/secure/ViewProfile.jspa?name=ajaykadiya)** opened **[SPR-16638](https://jira.spring.io/browse/SPR-16638?redirect=false)** and commented  We developed a REST Web service with mulitipart and all the file extensions are supporting for post man and tested and able to open files from server locations.  If the above service consumed by client via Rest Template with MulitipartHashMap that file was corrupt and not able to open in sever locations.   --- No further details from [SPR-16638](https://jira.spring.io/browse/SPR-16638?redirect=false)","closed","in: core,","spring-projects-issues","2018-03-23T20:05:51Z","2019-01-12T05:19:12Z"
"","21766","'ListBasedXMLEventReader.getElementText()' doesn't work [SPR-17233]","**[aholowko](https://jira.spring.io/secure/ViewProfile.jspa?name=aholowko)** opened **[SPR-17233](https://jira.spring.io/browse/SPR-17233?redirect=false)** and commented  The `StaxUtils.createXMLEventReader(events)` method returns the implementation of `XMLEventReader` which works incorrectly. The problem is in the `getElementText` method. It throws the `XMLStreamException` with the message 'Not at START_ELEMENT' even when the reader is at valid position with START_ELEMENT. In the javadoc of the `XMLEventReader` interface we can read: `Precondition: the current event is START_ELEMENT.` Current implementation uses method `peek()` to verify the current event, but the `peek` method return the next event not the current.   ---  **Affects:** 5.0.8  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1948","closed","in: core,","spring-projects-issues","2018-09-01T14:29:23Z","2018-09-08T16:34:58Z"
"","21558","InMemoryWebSessionStore could leak memory if sessions created but never used [SPR-17020]","**[adrienleroy](https://jira.spring.io/secure/ViewProfile.jspa?name=adrienleroy)** opened **[SPR-17020](https://jira.spring.io/browse/SPR-17020?redirect=false)** and commented  In InMemoryWebSessionStore, expired sessions are checked and deleted when retrieveSession is called. In our case sessions are created but users never reuse the session id. So we never retrieve sessions and never clean them. We then have a memory leak.  I think that InMemoryWebSessionStore should not rely on session's creation/retrieval etc... to clean up its own sessions.  ---  **Affects:** 5.0.6  **Reference URL:** https://jira.spring.io/browse/SPR-15963?jql=text%20~%20%22InMemoryWebSessionStore%22  **Issue Links:** - #20515 InMemoryWebSessionStore Leaks Memory - #21254 InMemoryWebSessionStore method to access map of sessions  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/43fbd632542222444ab228175da82a80ecf1daf5, https://github.com/spring-projects/spring-framework/commit/6218db98310da5e37bfdaba1f8ed73d89c33c0d7, https://github.com/spring-projects/spring-framework/commit/32b75221b3afde6603f6f5f8dff8de34508da55c","closed","type: enhancement,","spring-projects-issues","2018-07-09T09:34:53Z","2019-01-11T12:49:28Z"
"","21408","MockMvc - IllegalStateException: Async result for handler was not set during specified timeToWait=-1 [SPR-16869]","**[Adrian S](https://jira.spring.io/secure/ViewProfile.jspa?name=adik993)** opened **[SPR-16869](https://jira.spring.io/browse/SPR-16869?redirect=false)** and commented  When trying to test Server-Sent Events endpoint created using rxjava2 and spring's `ReactiveTypeHandler` you encounter:  ```java java.lang.IllegalStateException: Async result for handler [io.reactivex.Flowable com.example.asyncssebug.MockMvcAsyncBugTest$TestApp.sse()] was not set during the specified timeToWait=-1java.lang.IllegalStateException: Async result for handler [io.reactivex.Flowable com.example.asyncssebug.MockMvcAsyncBugTest$TestApp.sse()] was not set during the specified timeToWait=-1  at org.springframework.test.web.servlet.DefaultMvcResult.getAsyncResult(DefaultMvcResult.java:145) at org.springframework.test.web.servlet.DefaultMvcResult.getAsyncResult(DefaultMvcResult.java:136) at org.springframework.test.web.servlet.request.MockMvcRequestBuilders.asyncDispatch(MockMvcRequestBuilders.java:269) ```  Example test code to reproduce bug along with walkaround:  ```java package com.example.asyncssebug;  import io.reactivex.Flowable; import org.junit.Test; import org.junit.runner.RunWith; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc; import org.springframework.boot.test.context.SpringBootTest; import org.springframework.http.MediaType; import org.springframework.test.context.junit4.SpringRunner; import org.springframework.test.web.servlet.MockMvc; import org.springframework.test.web.servlet.MvcResult; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController;  import java.awt.*; import java.util.concurrent.TimeUnit;  import static org.hamcrest.Matchers.nullValue; import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.asyncDispatch; import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get; import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content; import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.request; import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;  @RunWith(SpringRunner.class) @SpringBootTest(classes = MockMvcAsyncBugTest.TestApp.class) @AutoConfigureMockMvc public class MockMvcAsyncBugTest {      @RestController     @RequestMapping(""/events"")     @SpringBootApplication     public static class TestApp {          @GetMapping(produces = MediaType.TEXT_EVENT_STREAM_VALUE)         Flowable sse() {             return Flowable.intervalRange(0, 3, 0, 1, TimeUnit.SECONDS)                     .map(aLong -> String.format(""event%d"", aLong));         }     }      @Autowired     MockMvc mockMvc;      @Test     public void failsWithIllegalStateExceptionAsyncResultForHandlerWasNotSetDuringSpecifiedTimeToWait() throws Exception {         MvcResult mvcResult = mockMvc.perform(get(""/events""))                 .andExpect(request().asyncStarted())                 .andExpect(status().isOk())                 .andReturn();          mockMvc.perform(asyncDispatch(mvcResult))                 .andExpect(content().string(""data:event0\n\ndata:event1\n\ndata:event2\n\n""));     }      @Test     public void alsoFailsWithIllegalStateExceptionAsyncResultForHandlerWasNotSetDuringSpecifiedTimeToWait() throws Exception {         mockMvc.perform(get(""/events""))                 .andExpect(request().asyncStarted())                 .andExpect(request().asyncResult(nullValue()))                 .andExpect(status().isOk())                 .andExpect(content().string(""data:event0\n\ndata:event1\n\ndata:event2\n\n""))                 .andReturn();     }      @Test     public void walkaroundToMakeItWork() throws Exception {         MvcResult mvcResult = mockMvc.perform(get(""/events""))                 .andExpect(request().asyncStarted())                 .andExpect(status().isOk())                 .andReturn();         mvcResult.getAsyncResult(5000L); // walkaround         mockMvc.perform(asyncDispatch(mvcResult))                 .andExpect(content().string(""data:event0\n\ndata:event1\n\ndata:event2\n\n""));     } }  ```  Spring Boot version used is `2.0.2.RELEASE`  Seems like default `getAsyncResult(-1)` instead of waiting forever doesn't wait at all. As a walkaround you can add `mvcResult.getAsyncResult(5000L)` and then perform `asyncDispatch` on the `mvcResult`      ---  **Affects:** 5.0.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2a993bf9ff7c9a4fbb1edef8ea1e7f96ac0a1afc, https://github.com/spring-projects/spring-framework/commit/9d36fd0b68883847260863cec7131d4e77720522","closed","type: bug,","spring-projects-issues","2018-05-23T20:38:18Z","2021-09-07T10:09:43Z"
"","21232","Safari doesn't receive chunked data using WebFlux's SSE [SPR-16691]","**[Adrian Marszałek](https://jira.spring.io/secure/ViewProfile.jspa?name=szinek)** opened **[SPR-16691](https://jira.spring.io/browse/SPR-16691?redirect=false)** and commented  Complete source code:  ```java @Configuration class Routing {      @Bean     fun booksRouter(handler: BooksHandler) = router {         (""/books"" and accept(MediaType.APPLICATION_JSON)).nest {             GET(""/"", handler::getAll)         }     } }   data class Book(val title: String,                 val author: String)  @Component class BooksHandler(private val repository: BookRepository) {      fun getAll(request: ServerRequest): Mono {         val interval = Flux.interval(Duration.ofSeconds(1))          val books = listOf(Book(""title"", ""author""),                 Book(""title"", ""author""),                 Book(""title"", ""author""),                 Book(""title"", ""author"")).toFlux()         return ok().bodyToServerSentEvents(Flux.zip(interval, books).map({ it.t2 }))     } } ```  The whole project generated from Intializr: Spring Boot 2.0.0 with Kotlin 1.2.31. Run the application and access the resource directly through Safari: http://localhost:8080/books Instead of receiving a book every second, Safari waits for as long as the Flux.zip() takes and then it receives the whole list of books.   --- No further details from [SPR-16691](https://jira.spring.io/browse/SPR-16691?redirect=false)","closed","status: invalid,","spring-projects-issues","2018-04-04T10:59:16Z","2019-01-12T05:19:02Z"
"","21593","@AssertTrue validation failure in private isFoo method causes 500 INTERNAL_SERVER_ERROR [SPR-17055]","**[Adam Chesney](https://jira.spring.io/secure/ViewProfile.jspa?name=adamchesneyvelo)** opened **[SPR-17055](https://jira.spring.io/browse/SPR-17055?redirect=false)** and commented  Attached is a zipped up Spring Boot 2.1 SNAPSHOT web project showing the problem.  A method like this:  ```java @JsonIgnore @AssertTrue private boolean isNameNotFoo(){     return name != null && !name.equalsIgnoreCase(""foo""); } ```  In a nested element that appears in a List of items in a request object causes a 500 when it fails validation.  So this json is fine and returns 200:  ```json {""things"":[{""name"":""bar""}]} ```  But this json:  ```json {""things"":[{""name"":""foo""}]} ```  blows up with 500:  ``` > Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.IllegalStateException: JSR-303 validated property 'things[0].nameNotFoo' does not have a corresponding accessor for Spring data binding - check your DataBinder's configuration (bean property versus direct field access)] with root cause``org.springframework.beans.NotReadablePropertyException: Invalid property 'things[0].nameNotFoo' of bean class [com.example.validationfail.api.OuterThing]: Bean property 'things[0].nameNotFoo' is not readable or has an invalid getter method: Does the return type of the getter match the parameter type of the setter? > at org.springframework.beans.AbstractNestablePropertyAccessor.getPropertyValue(AbstractNestablePropertyAccessor.java:622) ~[spring-beans-5.1.0.BUILD-SNAPSHOT.jar:5.1.0.BUILD-SNAPSHOT] > at org.springframework.beans.AbstractNestablePropertyAccessor.getPropertyValue(AbstractNestablePropertyAccessor.java:612) ~[spring-beans-5.1.0.BUILD-SNAPSHOT.jar:5.1.0.BUILD-SNAPSHOT] > at org.springframework.validation.AbstractPropertyBindingResult.getActualFieldValue(AbstractPropertyBindingResult.java:104) ~[spring-context-5.1.0.BUILD-SNAPSHOT.jar:5.1.0.BUILD-SNAPSHOT] > at org.springframework.validation.AbstractBindingResult.getRawFieldValue(AbstractBindingResult.java:284) ~[spring-context-5.1.0.BUILD-SNAPSHOT.jar:5.1.0.BUILD-SNAPSHOT] ```  ---  **Affects:** 5.0.8  **Attachments:** - [validation-fail.zip](https://jira.spring.io/secure/attachment/25772/validation-fail.zip) (_101.23 kB_)","closed","status: invalid,","spring-projects-issues","2018-07-17T15:01:18Z","2020-09-15T12:03:48Z"
"","21424","RestTemplate should support streaming download and upload [SPR-16885]","**[Abhijit Sarkar](https://jira.spring.io/secure/ViewProfile.jspa?name=asarkar)** opened **[SPR-16885](https://jira.spring.io/browse/SPR-16885?redirect=false)** and commented  `ResourceHttpMessageConverter` has a `boolean supportsReadStreaming`, which if set, and the response type is `InputStreamResource`, returns `InputStreamResource`; otherwise it returns a `ByteArrayResource`. So clearly, the intent is supporting streaming download.  However, there is a problem: `RestTemplate` closes the response soon after the `HttpMessageConverter runs`. Thus, even if I asked for `InputStreamResource`, and got it, it's no good, because the response stream has been closed. I think it should be dependent on the response type.  On the writing side, implementations of `ClientHttpRequestFactory` has a `boolean bufferRequestBody` but `SimpleClientHttpRequestFactory` (JDK client) and `HttpComponentsClientHttpRequestFactory` (Apache HTTP client) support this feature, but not `OkHttp3ClientHttpRequestFactory`.  ---  **Affects:** 5.0.2  **Reference URL:** https://stackoverflow.com/a/48041200/839733  **Issue Links:** - #19448 Disable streaming when reading to Resources in RestTemplate (_**""duplicates""**_) - #21531 Update docs on RestTemplate to indicate it's superceded by WebClient","closed","type: enhancement,","spring-projects-issues","2018-05-31T16:09:41Z","2019-01-11T17:07:35Z"
"","21347","WebMvcConfigurer.configureMessageConverters behavior doesn't match documentation [SPR-16807]","**[Abhijit Sarkar](https://jira.spring.io/secure/ViewProfile.jspa?name=asarkar)** opened **[SPR-16807](https://jira.spring.io/browse/SPR-16807?redirect=false)** and commented  We were using `WebMvcConfigurerAdapter.configureMessageConverters`, and since it has been deprecated, moved to `WebMvcConfigurer`. In doing so, I noticed a change in behavior that is the reason for subtle bugs. Previously, the argument `List> converters` used to be empty; now it contains 11 converters. As a result, the converters we add don't get their chances.  The [Javadoc](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/servlet/config/annotation/WebMvcConfigurer.html#configureMessageConverters-java.util.List-) claims:  > Note that adding converters to the list, turns off default converter registration.  Obviously, that's not happening.   ---  **Affects:** 5.0.6","closed","in: web,","spring-projects-issues","2018-05-10T03:14:51Z","2019-01-11T16:45:43Z"
"","21198","Binding configuration properties dynamically is lot harder than it needs to be [SPR-16657]","**[Abhijit Sarkar](https://jira.spring.io/secure/ViewProfile.jspa?name=asarkar)** opened **[SPR-16657](https://jira.spring.io/browse/SPR-16657?redirect=false)** and commented  I've a use case where I need to bind configuration properties based on a prefix determined at runtime.  ``` interface Condition {     companion object {         const val PREFIX = ""touchstone.condition""     }      enum class Phase {         PRE, POST     }      fun run(chunkContext: ChunkContext): ExitStatus      fun phase(): Phase = Phase.PRE      fun order(): Int = 1      fun shouldRun(): Boolean = true      val qualifiedName: String         get() = listOf(PREFIX, phase().name, javaClass.simpleName)                 .joinToString(separator = ""."") { it.toLowerCase(Locale.ENGLISH) } } ```  Each implementation of the above interface can override the values `order` and `shouldRun` using usual Boot configuration overrides. This is not unlike how [Hystrix Configurations](https://github.com/Netflix/Hystrix/wiki/Configuration) work; in other words, not unprecedented. However, doing this in practice is a lot harder than it needs to be, due to unnecessary package-level access of some classes in the framework, and in general lack of support for the Open/closed principal. Let's break it down:  1. `ConfigurationPropertiesBinder.bind(Bindable target)` method is `public` and looks promising since creating a `Bindable` is not hard, but then it does  ``` Assert.state(annotation != null, ""Missing @ConfigurationProperties on "" + target); ```  which is a problem when dynamically creating a target. The annotation can be synthesized (more on that later), so it's not technically necessary for it to be specified at compile time.  2. Methods `getValidators` and `getBindHandler` called from `bind` are `private` scoped, so I had to copy-paste them with minor modifications.  3. `bind` creates a `Binder`, which uses quite a few classes with package-scoped constructor. Thus, in order to create a `Binder`, I'd to resort to the hack of putting the following class in `org.springframework.boot.context.properties` package. This is completely unnecessary.  ``` class BinderFactory {     companion object {         private fun propertyEditorInitializer(ctx: ApplicationContext): Consumer? {             return if (ctx is ConfigurableApplicationContext) {                 Consumer {                     ctx.beanFactory.copyRegisteredEditorsTo(it)                 }             } else null         }          fun newBinder(ctx: ApplicationContext): Binder {             val propertySources = PropertySourcesDeducer(ctx)                     .propertySources             return Binder(                     ConfigurationPropertySources.from(propertySources),                     PropertySourcesPlaceholdersResolver(propertySources),                     ConversionServiceDeducer(ctx).conversionService,                     propertyEditorInitializer(ctx)             )         }     } } ```  4. Having done all that, now I can write the following, apparently simple, code:  ``` val annotation = synthesizeAnnotation(qn) val target = bindable(annotation) val handler = bindHandler(annotation)  BinderFactory.newBinder(ctx).bind(qn, target, handler) qn to target.value.get() ```  where `synthesizeAnnotation` uses `AnnotationUtils.synthesizeAnnotation` to do what it claims. The rest of the private methods calls should be obvious from the context.  **Possible fix**:  1. An overloaded version of `bind` accepting a `ConfigurationProperties annotation` should solve this problem while maintaining backward compatibility. 2. Creating a `BinderFactory` class will not require changing the package scope of the various constructors used by `Binder` for those who want to use it directly without going through `ConfigurationPropertiesBinder`. 3. I see no reason why `bindHandler` as shown below can't be a `public static` method.  ``` private fun bindHandler(annotation: ConfigurationProperties): BindHandler {     var handler = BindHandler.DEFAULT     if (annotation.ignoreInvalidFields) {         handler = IgnoreErrorsBindHandler(handler)     }     if (!annotation.ignoreUnknownFields) {         val filter = UnboundElementsSourceFilter()         handler = NoUnboundElementsBindHandler(handler, filter)     }     return handler } ```    ---  **Affects:** 5.0.4","closed","in: core,","spring-projects-issues","2018-03-28T17:49:28Z","2019-01-12T05:19:08Z"
"","21197","MockBean name is NOT what is specified in the name attribute [SPR-16656]","**[Abhijit Sarkar](https://jira.spring.io/secure/ViewProfile.jspa?name=asarkar)** opened **[SPR-16656](https://jira.spring.io/browse/SPR-16656?redirect=false)** and commented  ``` @MockBean(name = ""condition"") lateinit var condition: Condition ```  ...  ``` condition = {Condition$MockitoMock$1144144523@4738} ""condition bean""  mockitoInterceptor = {MockMethodInterceptor@4781}    handler = {InvocationNotifierHandler@4782}    mockCreationSettings = {CreationSettings@4783}     typeToMock = {Class@2702} ""interface mypackage.condition.Condition""    extraInterfaces = {HashSet@4785}  size = 0    name = ""condition bean""    spiedInstance = null    defaultAnswer = {Answers@4786} ""RETURNS_DEFAULTS""    mockName = {MockNameImpl@4787} ""condition bean""    ... ```  As shown above, the word "" bean"" is appended to the given `MockBean` name ""condition"" for no apparent reason. When `name` is not specified, it's ok for the framework to choose whatever name it can come up with; however, when `name` is specified, there is a reason that the user specified it, and it shouldn't be tampered with.  This has larger side effects such that dynamic properties that rely on the bean name can't be used for testing. In one use case, I use the bean name to dynamically override some properties at runtime, not unlike [Hystrix Configuration](https://github.com/Netflix/Hystrix/wiki/Configuration), and this bug prevents me from using `MockBean` for testing that feature.   ---  **Affects:** 5.0.4","closed","in: core,","spring-projects-issues","2018-03-28T17:24:14Z","2019-01-12T05:19:09Z"
"","21361","Spring 5.0.5.RELEASE version doesnt support SpringBeanAutowiringInterceptor. [SPR-16821]","**[a279](https://jira.spring.io/secure/ViewProfile.jspa?name=addy279)** opened **[SPR-16821](https://jira.spring.io/browse/SPR-16821?redirect=false)** and commented  SpringBeanAutowiringInterceptor for EJB to autowire spring beans is no more working with Spring 5.0.5.RELEASE version.  Please guide me through to fix this issue or any alternative class to handle this?   --- No further details from [SPR-16821](https://jira.spring.io/browse/SPR-16821?redirect=false)","closed","in: core,","spring-projects-issues","2018-05-14T09:27:44Z","2019-03-04T19:51:03Z"
"","21713","Request for Reactive Server response with image content type Sample [SPR-17177]","**[A1ucard](https://jira.spring.io/secure/ViewProfile.jspa?name=a1ucard)** opened **[SPR-17177](https://jira.spring.io/browse/SPR-17177?redirect=false)** and commented  Hi,  I'm starting a new project and adopting spring webflux as reactive rest framework. I have a use case that return captcha image at the backend. I have a sample code as below which generate captcha image and return with spring framework but now I have no idea how to return the image with reactive way.   Spring MVC:   ```java @RequestMapping(value=""/captcha/{id:.+}"", produces = MediaType.IMAGE_JPEG_VALUE) public @ResponseBody byte[] captcha(@PathVariable(""id"") String captchaId,  HttpServletResponse res) throws Exception{       try{          byte [] captchaImg = (byte[])cacheService.getValue(captchaId,    AuthConstants.CACHE_CAPTCHA_IMG_KEY); return captchaImg; }catch(Exception e){ res.setStatus(HttpStatus.NOT_FOUND.value());         return null;     } } ```   This is my use case:  In reactive way which is failure code as below:     ```java public Mono captchaImage(ServerRequest request) {          return Mono.just(request.pathVariable(""id""))                 .flatMap(id->cacheService.getValue(id, AuthConstant.CACHE_CAPTCHA_IMG_KEY))                 .flatMap(captchaImage-> {                     System.out.println(""img:""+captchaImage);                     return ServerResponse                             .ok()                             .contentType(MediaType.IMAGE_JPEG)                             .body(BodyInserters.fromObject(captchaImage));                 });          }   ```   This code is failure and I can't find any information to get idea how to do it.  I need your help. Appreciate that you can provide snippet code.     Thanks,      --- No further details from [SPR-17177](https://jira.spring.io/browse/SPR-17177?redirect=false)","closed","status: invalid,","spring-projects-issues","2018-08-14T08:08:50Z","2019-01-12T05:18:19Z"
"","21539","We are facing the maximum open cursor issue [SPR-17001]","**[A V Vamsi krishna](https://jira.spring.io/secure/ViewProfile.jspa?name=vamckrisna)** opened **[SPR-17001](https://jira.spring.io/browse/SPR-17001?redirect=false)** and commented  +Error stack trace+   **  | | | Caused by: java.sql.SQLException: ORA-01000: maximum open cursors exceeded   at oracle.jdbc.driver.T4CTTIoer.processError(T4CTTIoer.java:450)  at oracle.jdbc.driver.T4CTTIoer.processError(T4CTTIoer.java:399)  at oracle.jdbc.driver.T4C8Oall.processError(T4C8Oall.java:1059)  at oracle.jdbc.driver.T4CTTIfun.receive(T4CTTIfun.java:522)  at oracle.jdbc.driver.T4CTTIfun.doRPC(T4CTTIfun.java:257)  at oracle.jdbc.driver.T4C8Oall.doOALL(T4C8Oall.java:587)  at oracle.jdbc.driver.T4CCallableStatement.doOall8(T4CCallableStatement.java:220)  at oracle.jdbc.driver.T4CCallableStatement.doOall8(T4CCallableStatement.java:48)  at oracle.jdbc.driver.T4CCallableStatement.executeForRows(T4CCallableStatement.java:938)  at oracle.jdbc.driver.OracleStatement.doExecuteWithTimeout(OracleStatement.java:1150)  at oracle.jdbc.driver.OraclePreparedStatement.executeInternal(OraclePreparedStatement.java:4798)  at oracle.jdbc.driver.OraclePreparedStatement.execute(OraclePreparedStatement.java:4901)  at oracle.jdbc.driver.OracleCallableStatement.execute(OracleCallableStatement.java:5631)  at oracle.jdbc.driver.OraclePreparedStatementWrapper.execute(OraclePreparedStatementWrapper.java:1385)  at weblogic.jdbc.wrapper.PreparedStatement.execute(PreparedStatement.java:105)  at org.springframework.jdbc.core.JdbcTemplate$6.doInCallableStatement(JdbcTemplate.java:1134)  at org.springframework.jdbc.core.JdbcTemplate$6.doInCallableStatement(JdbcTemplate.java:1131)  at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:1079) | |     ---  **Reference URL:** https://stackoverflow.com/questions/47044033/spring-5-0-1-namedjdbctemplate-batchupdate-ora-01000-maximum-open-cursors-excee  **Issue Links:** - #20687 Doc: ParameterMetaData.getParameterType performance on Oracle 12c","closed","for: stackoverflow,","spring-projects-issues","2018-07-02T18:48:01Z","2022-02-18T20:45:32Z"
"","21672","Please add OWASP Dependency Check to the build (pom.xml) [SPR-17135]","**[A Baker III](https://jira.spring.io/secure/ViewProfile.jspa?name=abakeriii)** opened **[SPR-17135](https://jira.spring.io/browse/SPR-17135?redirect=false)** and commented  Please add OWASP Dependency Check to the build (pom.xml). OWASP DC makes an outbound REST call to MITRE Common Vulnerabilities & Exposures (CVE) to perform a lookup for each dependant .jar to list any/all known vulnerabilities for each jar. This step is needed because a manual MITRE CVE lookup/check on the main component does not include checking for vulnerabilities in components or in dependant libraries.  OWASP Dependency check : https://www.owasp.org/index.php/OWASP_Dependency_Check has plug-ins for most Java build/make types (ant, maven, ivy, gradle).  Also, add the appropriate command to the nightly build to generate a report of all known vulnerabilities in any/all third party libraries/dependencies that get pulled in. example : mvn -Powasp -Dtest=false -DfailIfNoTests=false clean aggregate  Generating this report nightly/weekly will help inform the project's development team if any dependant libraries have a reported known vulnerailities. Project teams that keep up with removing vulnerabilities on a weekly basis will help protect businesses that rely on these open source componets.   ---  **Affects:** 4.3.19, 5.0.9, 5.1 RC2, 5.1 GA","closed","status: declined,","spring-projects-issues","2018-08-07T02:34:41Z","2018-11-28T18:23:18Z"
"","1897","Fixed a typo in documentation.","'AbstractFactoryBean#getEarlySingletonInstance' documentation mentions ""eager singleton"". I'm quite sure it should be fixed to ""early singleton"".","closed","","hannesss81","2018-07-26T10:13:37Z","2018-07-26T11:53:26Z"
"","1743","Fix AsciiDoc typos in AOP documentation","""Obvious Fix"" of AsciiDoc typos in AOP documentation.","closed","","foxwoods","2018-03-17T10:16:57Z","2018-04-06T02:34:17Z"
"","1777","Fix docs formatting","""Obvious Fix"" of AsciiDoc formatting errors in core appendix documentation and data buffer documentation.","closed","","foxwoods","2018-04-05T12:30:02Z","2018-04-06T02:30:22Z"
"","1883","4.3.x","Why can I use jar package to get the resources from jar package when ClassPathResource can get it, but document interpretation is not acceptable.","closed","","1309893329","2018-07-13T02:40:23Z","2018-07-13T05:48:46Z"
"","1984","分析spring-jdbc和spring-tx事务原理","","closed","","YallZhang","2018-10-08T15:30:04Z","2018-10-09T05:06:42Z"
"","1983","Update core-beans.adoc: fix bullet list layout","","closed","","nfadeev","2018-10-06T18:56:02Z","2018-10-07T11:48:53Z"
"","1973","fixed further typo","","closed","","0xflotus","2018-10-01T19:29:39Z","2018-10-01T19:54:03Z"
"","1972","do you mean 'compose'?","","closed","","0xflotus","2018-10-01T19:28:54Z","2018-10-01T19:53:33Z"
"","1971","fixed ContentNegotiationConfigurer","","closed","","0xflotus","2018-10-01T16:23:11Z","2018-10-01T19:50:50Z"
"","1961","Fix jdbc template error messages generation","","closed","","anton0xf","2018-09-18T15:10:47Z","2018-09-19T07:52:49Z"
"","1947","4.3.x","","closed","","ceohui","2018-08-31T08:05:29Z","2018-08-31T08:21:04Z"
"","1939","SPR-17130 details in exception message","","closed","","jerzykrlk","2018-08-22T20:58:01Z","2018-08-22T20:59:52Z"
"","1929","SPR-17188 - Declare SmartLifecycle with default methods","","closed","","quaff","2018-08-16T01:06:48Z","2018-08-16T10:35:42Z"
"","1890","SPR-17073","","closed","","dwandw","2018-07-21T07:00:56Z","2018-07-22T18:07:44Z"
"","1886","4.3.x","","closed","","laiqiming","2018-07-17T06:28:00Z","2018-07-17T06:39:46Z"
"","1876","4.3.13","","closed","","EthanLiang8","2018-07-09T02:58:14Z","2018-07-09T11:42:35Z"
"","1870","Adapt ReactorHttpsServer to Reactor Netty API with no SelfSignedCertificate","","closed","","violetagg","2018-07-05T17:20:40Z","2018-07-09T14:09:34Z"
"","1869","Small typo fixes in WebSocketHandler doc","","closed","","xiexed","2018-07-02T11:58:05Z","2018-07-10T12:15:19Z"
"","1868","Fix typo in Java doc","","closed","","dalbani","2018-06-29T09:04:36Z","2018-06-29T21:12:44Z"
"","1867","5.0.x","","closed","","wozhuchenfu","2018-06-26T05:44:35Z","2018-07-09T11:59:39Z"
"","1866","fix quality factor assertion","","closed","","idelvall","2018-06-24T10:25:01Z","2018-06-24T19:47:09Z"
"","1865","Add checkstyle","","closed","","philwebb","2018-06-21T18:37:17Z","2018-06-28T08:28:45Z"
"","1864","Merge remote-tracking branch 'spring-projects/master'","","closed","","DeanSun","2018-06-21T07:26:59Z","2018-06-21T07:31:04Z"
"","1860","Fix the link to CONTRIBUTING.md","","closed","","ryan4yin","2018-06-19T04:19:54Z","2018-06-19T07:09:01Z"
"","1858","Revert 1 master","","closed","","weizai118","2018-06-15T07:21:31Z","2018-06-15T11:04:14Z"
"","1855","更新本地代码为最新的","","closed","","pengjieran","2018-06-12T10:57:09Z","2018-06-12T10:59:27Z"
"","1853","pull","","closed","","gaoyining","2018-06-07T09:11:38Z","2018-06-07T09:25:08Z"
"","1852","Sorry,my mistake","","closed","","itcrazy0717","2018-06-06T06:41:38Z","2018-06-08T03:15:03Z"
"","1851","SPR-16858 @BeforeSchedule annotation definition and processing","","closed","","nikolaikopernik","2018-06-05T20:32:16Z","2018-06-06T15:05:03Z"
"","1849","Fix format typos in webmvc.adoc","","closed","","jasssonpet","2018-06-04T17:36:34Z","2018-06-05T14:06:39Z"
"","1841","Remove extra backquote in data-access.adoc","","closed","","nkjackzhang","2018-05-29T12:02:56Z","2018-05-30T01:58:00Z"
"","1840","5.0.x","","closed","","HackerRookie","2018-05-29T08:47:37Z","2018-05-29T09:02:38Z"
"","1821","Fixed exception logging in AbstractApplicationContext","","closed","","artaban","2018-05-07T10:45:04Z","2018-05-07T11:01:45Z"
"","1817","Tokenizer - removing unnecessary boxing of char","","closed","","sgrillon14","2018-05-03T08:26:52Z","2018-05-03T08:50:44Z"
"","1815","Grammatical change.","","closed","","JeremyLWright","2018-04-30T20:30:46Z","2018-04-30T20:34:05Z"
"","1799","remove ignored files","","closed","","punkratz312","2018-04-18T21:00:03Z","2018-04-20T04:20:27Z"
"","1796","Two very minor improvements to webflux documentation","","closed","","kiftio","2018-04-18T09:55:43Z","2018-04-18T10:01:54Z"
"","1784","Throw exception from user code in SpringFailOnTimeout even if a timeout occurs","","closed","","igor-suhorukov","2018-04-10T21:00:20Z","2018-04-12T21:32:18Z"
"","1782","Update upstream","","closed","","bee06","2018-04-09T09:45:06Z","2018-04-09T09:48:26Z"
"","1771","The bracket is dissymmetry, fix it","","closed","","linzhaoming","2018-04-01T01:29:03Z","2018-04-01T10:12:38Z"
"","1766","Polish: all branches in a conditional structure should not have exactly the same implementation","","closed","","igor-suhorukov","2018-03-29T21:15:11Z","2018-03-29T21:33:52Z"
"","1765","Polish: remove redundant check","","closed","","igor-suhorukov","2018-03-29T20:54:09Z","2018-03-29T21:33:39Z"
"","1764","Polish: short-circuit logic should be used in boolean contexts","","closed","","igor-suhorukov","2018-03-29T20:48:08Z","2018-03-29T21:33:23Z"
"","1757","Polish: avoid unnecessary autoboxing","","closed","","igor-suhorukov","2018-03-28T21:23:11Z","2018-03-28T21:48:13Z"
"","1754","4.3.x","","closed","","qq258926835","2018-03-27T10:10:25Z","2018-03-27T10:16:17Z"
"","1748","Correct link caption.","","closed","","sn42","2018-03-22T12:13:46Z","2018-03-22T12:22:01Z"