"#","No","Issue Title","Issue Details","State","Labels","User name","created","Updated"
"","1","Spring core JMS pom.xml","hiya,  javax.resource:connnector-api:1.5:jar doesnt seem to exist, and the geronimo dependency is available. So this merge request uses the geronimo equivalent instead.","closed","","joshlong","2011-02-09T16:26:03Z","2011-07-21T23:27:16Z"
"","12355","Problem by invoking method NamedParameterJdbcTemplate.query() if parameter contains a array [SPR-7699]","**[Zoran Savic](https://jira.spring.io/secure/ViewProfile.jspa?name=zosavic)** opened **[SPR-7699](https://jira.spring.io/browse/SPR-7699?redirect=false)** and commented  There is a problem by invoking the following method of the class NamedParameterJdbcTemplate: public \ List\ query(String sql, SqlParameterSource paramSource, RowMapper\ rowMapper)  The problem occurs if the parameter paramSource contains a array, for example: paramSource.addValue(""ids"", new SqlArrayLong(lAllId), Types.ARRAY, ""TA_NUMBER"");  where the class SqlArrayLong extends the Spring's AbstractSqlTypeValue, and ""TA_NUMBER"" is user defined type in the Oracle database: CREATE OR REPLACE TYPE  TA_NUMBER   as table of number;  If the implementation of SqlArrayLong.createTypeValue() looks like here: `@Override` public Object createTypeValue(Connection pCon, int pSqlType, String pTypeName) throws SQLException { OracleConnection lOracleConnection = (OracleConnection) pCon; String lTypeName = pTypeName; oracle.sql.ArrayDescriptor lDesc = oracle.sql.ArrayDescriptor.createDescriptor(lTypeName, lOracleConnection); return new oracle.sql.ARRAY(lDesc, lOracleConnection, mValues.toArray(new Long[mValues.size()])); }  the following exception occurs: Caused by: java.sql.SQLException: Deskriptor konnte nicht erstellt werden: ArrayDescriptor.createDescriptor: Invalid argument,'name' should not be an empty string and 'conn' should not be null. at oracle.sql.ArrayDescriptor.createDescriptor(ArrayDescriptor.java:152) at oracle.sql.ArrayDescriptor.createDescriptor(ArrayDescriptor.java:126) at com.test.dao.impl.SqlArrayLong.createTypeValue(SqlArrayLong.java:55) at org.springframework.jdbc.core.support.AbstractSqlTypeValue.setTypeValue(AbstractSqlTypeValue.java:58) at org.springframework.jdbc.core.StatementCreatorUtils.setValue(StatementCreatorUtils.java:267) at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValueInternal(StatementCreatorUtils.java:216) at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValue(StatementCreatorUtils.java:127) at org.springframework.jdbc.core.PreparedStatementCreatorFactory$PreparedStatementCreatorImpl.setValues(PreparedStatementCreatorFactory.java:298) at org.springframework.jdbc.core.PreparedStatementCreatorFactory$PreparedStatementCreatorImpl.createPreparedStatement(PreparedStatementCreatorFactory.java:251) at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:580)  The cause of this exception is the empty parameter 'name', actually it should contains the ""TA_NUMBER"". One workaround of this problem is to slightly change the above method: `@Override` public Object createTypeValue(Connection pCon, int pSqlType, String pTypeName) throws SQLException { OracleConnection lOracleConnection = (OracleConnection) pCon; String lTypeName = pTypeName; if (lTypeName == null) { lTypeName = ""BETRFPL.TA_NUMBER""; } oracle.sql.ArrayDescriptor lDesc = oracle.sql.ArrayDescriptor.createDescriptor(lTypeName, lOracleConnection); return new oracle.sql.ARRAY(lDesc, lOracleConnection, mValues.toArray(new Long[mValues.size()])); }  But, this is not nice, it would be better, if the parameter pTypeName already contains the correct value.   ---  **Affects:** 3.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/47c21bf73bf47827497d26825e28e159c417fe6c, https://github.com/spring-projects/spring-framework/commit/939da34869d6e7ba4716dadc92cc85580ede27cb","closed","type: bug,","spring-projects-issues","2010-10-29T10:42:03Z","2012-06-19T03:39:26Z"
"","11961","Upgrade the net.sf.ehcache restriction to [1.3,3.0) in the MANIFEST.MF [SPR-7302]","**[Yuriy Nemtsov](https://jira.spring.io/secure/ViewProfile.jspa?name=georgecalm)** opened **[SPR-7302](https://jira.spring.io/browse/SPR-7302?redirect=false)** and commented  Please increase the upper version range of the net.sf.ehcache in the org.springframework.context.support MANIFEST.MF. It is currently set to [1.3.0, 2.0.0). This restriction prevents the spring OSGi users from depending on the current ehcache 2.0 & 2.1 releases.  File: https://src.springframework.org/svn/spring-framework/trunk/org.springframework.context.support/template.mf  Update: - net.sf.ehcache.*;version=""[1.3.0, 2.0.0)"";resolution:=optional,  + net.sf.ehcache.*;version=""[1.3.0, 3.0.0)"";resolution:=optional,  Thank you.   ---  **Affects:** 3.0.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/91560774a091fbcb75a39e5d3d01c58b9365a807","closed","type: enhancement,","spring-projects-issues","2010-06-18T07:11:41Z","2012-06-19T03:43:30Z"
"","12127","Map One-to-Many ResultSet to Data Objects with JDBC [SPR-7469]","**[Yujie Liu](https://jira.spring.io/secure/ViewProfile.jspa?name=mettacloud)** opened **[SPR-7469](https://jira.spring.io/browse/SPR-7469?redirect=false)** and commented  Dear Honorable Spring developers,  My name is Yujie Liu and I am a Java developer from California, United States.  I like Spring Framework very much and have been using it in some projects.  I think it's time for me to contribute a little to the development.  I hope you like this idea.  When we use JDBC to query tables of one-to-many relationship, how to map the query result set to data objects is a very common question.  I developed a generic and simple solution to help doing this with a generic class implementing Spring's RowMapper interface as well as a simple interface for applications to implement for specific queries.  And this solution supports multiple levels of one-to-many relationship.  For example, there are 3 tables BOOK, AUTHOR and BOOK_AUTHOR_ASSOC.  One book can be written by multiple authors and thus table BOOK_AUTHOR_ASSOC is the one-to-many association table for the other 2 tables.  And we want to run some SQL statements to search for some books along with author information.  The AUTHOR table has the following columns and data: author_id    author_name 1            Jeff 2            Tom 3            Shirley  The BOOK table has the following columns and data: book_id   book_title 10        Java Programming 11        Spring is Cool  The BOOK_AUTHOR_ASSOC table has the following columns which are foreign keys to the other 2 tables: book_id   author_id 10        1 10        3 11        2  And we have these data object classes mapping to the tables: class Book { long bookId; String bookTitle; // getters and setters follow ... } class Author { long authorId; String authorName; // getters and setters follow ... } class BookWithAuthors { Book book; Author[] authors; // getters and setters follow ... } Let's say the SQL that joins the 3 tables is like this: SELECT b.**, a.** FROM book b LEFT JOIN (book_author_assoc baa LEFT JOIN author a ON baa.author_id = a.author_id) ON b.book_id = baa.book_id ORDER BY b.book_id, a.author_id  The result from the query is something like:  book_id  book_title  author_id  author_name 10   Java Programming    1      Jeff 10   Java Programming    3      Shirley 11   Spring is Cool      2      Tom  Our goal is to create objects of class BookWithAuthors and populate them with the query result.  In the above example result, from the 3 rows, we should create 2 BookWithAuthors objects.  And the first object should contain 2 Author object and the second object should contain 1 Author object.  The logic of doing this is to go through all the rows and look at book_id value of each row.  And when this book_id value changes, it means the row starts a new Book object.  And for each row, we need to compose an Author object.  When the row of a new book is encountered, we need to put the previous Author objects into the previous Book object.  I have made this procedure into a generic class MultiLevelRowMapper as shown below.  And the query specific logic is separate from the generic logic and put into implementation of interface MultiLevelObjectCreator.  I attached the complete code of these classes in the attachment.  The follows are only the function signatures that help demonstrate how to use them in an app.  The generic RowMapper class is: public class MultiLevelRowMapper implements RowMapper { private MultiLevelObjectCreator objectCreator; public MultiLevelRowMapper() {} public MultiLevelRowMapper(MultiLevelObjectCreator objectCreator) {...} public void setMultiLevelObjectCreator(MultiLevelObjectCreator objectCreator) {...} public Object mapRow(ResultSet rs, int rowCount) throws SQLException {...} }  The interface for apps to implement for query specific logic is: public interface MultiLevelObjectCreator { int getNumOfLevels(); boolean isNewHigherLevelRow(int level, Object prevObj, ResultSet rs) throws SQLException; Object createObject(int level, ResultSet rs) throws SQLException; void bindTwoLevelObjects(int level, Object obj, List lowerLevelObjs); }  The whole complexity of multiple-level query are taken care of in class MultiLevelRowMapper.  All an app needs to do is to implement the very simple interface MultiLevelObjectCreator that doesn't need any complex logic.  For the above book/author example, these are what an application needs to do:  Write the code in a function in a JdbcDaoSupport sub class like this:          String sql = ""SELECT b.*, a.* "" +             ""FROM book b LEFT JOIN (book_author_assoc baa LEFT JOIN author a "" +             ""ON baa.author_id = a.author_id) ON b.book_id = baa.book_id "" +             ""ORDER BY b.book_id, a.author_id""              // Implement MultiLevelObjectCreator as an inner class         MultiLevelObjectCreator objectCreator = new MultiLevelObjectCreator() {             /**              * In this example, first level is ""book"" level and the second              * level is ""author"" level.  So 2 in total.              */             public int getNumOfLevels() {                 return 2;             }                  /**              * This is called by class MultiLevelRowMapper to determine if the current              *  row means a new higher level object, i.e., a new book in this example              * Level number starts with 0.              */             public boolean isNewHigherLevelRow(int level, Object prevObj, ResultSet rs)                               throws SQLException {                 // Level 0 means book level.  The prevObj must be BookWithAuthors object.                 if (level == 0)                     // Compare the previous book ID with the book ID                     // from the current rowset.  If different, it means the current                     // row represents a new book.                     return (((BookWithAuthors) prevObj).getBook().getBookId() != rs.getLong(""book_id""));                      // If there were more than 2 levels,                 // we need have ""else if (level == 1) ..."" logic.                      else                     // This shouldn't happen.  Just in case.                     throw new RuntimeException(""Invalid level ""+level);             }                  /**              * This is called by class MultiLevelRowMapper create data object and              * populate it with resultset.              */             public Object createObject(int level, ResultSet rs) throws SQLException {                 if (level == 0) {                     // Level 0 is book level, create BookWithAuthors object                     BookWithAuthors bookWithAuthors = new BookWithAuthors();                     Book book = new Book();                     book.setBookId(rs.getLong(""book_id""));                     book.setBookTitle(rs.getString(""book_title""));                     bookWithAuthors.setBook(book);                     return bookWithAuthors;                 } else if (level == 1) {                     // Level 1 is author level                     Author author = new Author();                     author.setAuthorId(rs.getLong(""author_id""));                     author.setAuthorName(rs.getString(""author_name""));                     return author;                 } else {                     // This shouldn't happen.  Just in case.                     throw new RuntimeException(""Invalid level ""+level);                 }             }                  /**              * This is called by class MultiLevelRowMapper to bind objects of two levels,              * i.e., book and author in this example              */             public void bindTwoLevelObjects(int level, Object obj, List lowerLevelObjs) {                 // Bind level 0 object with level 1 objects, i.e., bind BookWithAuthors                 //   object that was created from createObject() with the list of                 //   Author objects for the book object, also created from createObject().                 if (level == 0) {                     if (lowerLevelObjs != null && !lowerLevelObjs.isEmpty()) {                         ((BookWithAuthors) obj).setAuthors((Author[]) lowerLevelObjs.toArray(new Author[lowerLevelObjs.size()]));                     }                 }                      // If there were more than 2 levels,                 //    we need have ""else if (level == 1) ..."" logic                 //    to bind level 1 object with level 2 objects and so on.                      else {                     // This shouldn't happen.  Just in case.                 }                  }         };              final MultiLevelRowMapper theRowMapper = new MultiLevelRowMapper(objectCreator);              getJdbcTemplate().query(sql.toString(), null, theRowMapper);              // The function call to MultiLevelRowMapper.getResult() will return a list of         //  well-populated BookWithAuthors objects.  The second level objects, Author[]         //  objects in each of them  are also well populated from the query result.         List books = theRowMapper.getResult();  Class MultiLevelRowMapper can handle any number of levels.  Let's expand the above example, and say, each author can have 0 to many awards.  We want to add an AWARD table as well as AUTHOR_AWARD_ASSOC table.  And we add a new class Award that maps to the AWARD table.  Also add an array of Award objects to Author object (or create a new class AuthorWithAwards).  Then we need to modify the above implementation of interface MultiLevelObjectCreator to support 3 levels instead of 2.  Simply return 3 in function getNumOfLevels(), implement ""else if (level == 1) ..."" in function isNewHigherLevelRow() and bindTwoLevelObjects(), and implement ""else if (level == 2) ..."" in function createObject().  Class MultiLevelRowMapper also supports one-to-zero association.  For example, if an author has no award, simply return null from createObject() for level 2 if the row indicates no award.  If you find this useful, you might want to consider adding these classes to SpringDA.  Thank you for reading this.  Sincerely, Yujie Liu   ---  **Attachments:** - [MultiLevelRowMapper.zip](https://jira.spring.io/secure/attachment/17010/MultiLevelRowMapper.zip) (_2.07 kB_)","closed","type: enhancement,","spring-projects-issues","2010-08-17T16:27:38Z","2015-09-22T16:55:22Z"
"","12228","since expressions in javadoc [SPR-7571]","**[Younghoe Ahn](https://jira.spring.io/secure/ViewProfile.jspa?name=younghoe)** opened **[SPR-7571](https://jira.spring.io/browse/SPR-7571?redirect=false)** and commented  Recently I have noticed the different since notations in Spring javadoc. ResourceLoader's since value is 10.03.2004 and ResourcePatternResolver's 1.0.2. I think that the unified notation become more important as there are serveral versions of Spring used concurrently.  I like the version-based since notation such as 'since 3.0'.   ---  **Affects:** 3.0.4","closed","type: enhancement,","spring-projects-issues","2010-09-19T05:40:29Z","2018-12-28T10:24:04Z"
"","12486","Freemarker View fail when used in a Spring Portlet MVC application [SPR-7830]","**[Younes Ouadi](https://jira.spring.io/secure/ViewProfile.jspa?name=younes)** opened **[SPR-7830](https://jira.spring.io/browse/SPR-7830?redirect=false)** and commented  I'm trying a basic ""Hello Freemarker Portlet"" with no luck. The deployment of the portlet in Liferay 6.0 goes fine. But when I'm trying to add the portlet to a page, I got the following exception: {{{Caused by: java.lang.NullPointerException at org.springframework.web.servlet.view.freemarker.FreeMarkerView.getTemplate(FreeMarkerView.java:350) at org.springframework.web.servlet.view.freemarker.FreeMarkerView.checkResource(FreeMarkerView.java:203) at org.springframework.web.servlet.view.UrlBasedViewResolver.loadView(UrlBasedViewResolver.java:421) at org.springframework.web.servlet.view.AbstractCachingViewResolver.createView(AbstractCachingViewResolver.java:158) at org.springframework.web.servlet.view.UrlBasedViewResolver.createView(UrlBasedViewResolver.java:384) at org.springframework.web.servlet.view.AbstractCachingViewResolver.resolveViewName(AbstractCachingViewResolver.java:69) at org.springframework.web.portlet.DispatcherPortlet.resolveViewName(DispatcherPortlet.java:1110) at org.springframework.web.portlet.DispatcherPortlet.render(DispatcherPortlet.java:1052) at org.springframework.web.portlet.DispatcherPortlet.doRenderService(DispatcherPortlet.java:761) at org.springframework.web.portlet.FrameworkPortlet.processRequest(FrameworkPortlet.java:522) ... 112 more}}}  Please, see the attachment for the full application. It is an Eclipse/Maven2 application.  Warm regards  Younes   ---  **Affects:** 3.0.3  **Reference URL:** http://forum.springsource.org/showthread.php?t=99935  **Attachments:** - [handson-portlet-spring-freemarker.zip](https://jira.spring.io/secure/attachment/17470/handson-portlet-spring-freemarker.zip) (_8.72 kB_)  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2010-12-21T02:21:15Z","2019-01-11T15:17:01Z"
"","11935","enhancement [SPR-7276]","**[Yarco Hayduk](https://jira.spring.io/secure/ViewProfile.jspa?name=yarco)** opened **[SPR-7276](https://jira.spring.io/browse/SPR-7276?redirect=false)** and commented  Don't know if this was suggested before, but it would be nice if I could use  like this :   so it could pick up all values from Enums automatically.  this would eliminate some boilerplate code in controllers such as:  `@ModelAttribute`(""creditCardTypes"") public Collection\ populateCreditCardTypes() { return Arrays.asList(CreditCardType.class.getEnumConstants()); }  This could be useful in other tags too....   --- No further details from [SPR-7276](https://jira.spring.io/browse/SPR-7276?redirect=false)","closed","type: enhancement,","spring-projects-issues","2010-06-10T06:57:26Z","2018-12-28T11:21:57Z"
"","11934","Enum handling + labels [SPR-7275]","**[Yarco Hayduk](https://jira.spring.io/secure/ViewProfile.jspa?name=yarco)** opened **[SPR-7275](https://jira.spring.io/browse/SPR-7275?redirect=false)** and commented  Looks like I was re-inventing the wheel (see forum reference). Can you guys add this to the official reference guide please. This would be useful for many people I think   ---  **Reference URL:** http://forum.springsource.org/showthread.php?p=304337  1 votes, 1 watchers","closed","status: bulk-closed,","spring-projects-issues","2010-06-10T05:27:33Z","2019-01-12T03:32:45Z"
"","12863","BeanFactoryPostProcessor not working for @Value [SPR-8213]","**[Yanming Zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=quaff)** opened **[SPR-8213](https://jira.spring.io/browse/SPR-8213?redirect=false)** and commented  I have the same problem with http://forum.springsource.org/showthread.php?t=105476  ---  **Affects:** 3.0.5  **Reference URL:** http://forum.springsource.org/showthread.php?t=105476  **Issue Links:** - #9610 Doc: `@Autowired` not working in BeanFactoryPostProcessor (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2011-04-06T01:37:40Z","2019-01-13T07:09:54Z"
"","12081","Concurrent prototype creation causes NullPointerException [SPR-7423]","**[yangwm](https://jira.spring.io/secure/ViewProfile.jspa?name=yangwm)** opened **[SPR-7423](https://jira.spring.io/browse/SPR-7423?redirect=false)** and commented  concurrent get bean test will be java.lang.NullPointerException:  Thread-71 people.toString()=Person{name=yangwm, age=25, hobby=basketball} Thread 71 end...1280993191703Thread-80----------------------------------------- java.lang.NullPointerException at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:669) at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:194) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:993) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:897) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:485) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:310) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190) at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1075) at first.GetPersonTest$PersonRun.run(GetPersonTest.java:43) at java.lang.Thread.run(Thread.java:717) Thread-143----------------------------------------- java.lang.NullPointerException at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:669) at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:194) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:993) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:897) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:485) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:310) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190) at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1075) at first.GetPersonTest$PersonRun.run(GetPersonTest.java:43) at java.lang.Thread.run(Thread.java:717)  ---  **Affects:** 3.0 GA, 3.0.3  **Attachments:** - [SPR-7423.zip](https://jira.spring.io/secure/attachment/16966/SPR-7423.zip) (_208.13 kB_) - [springstudy.zip](https://jira.spring.io/secure/attachment/16965/springstudy.zip) (_2.83 kB_) - [Trace.aj](https://jira.spring.io/secure/attachment/16967/Trace.aj) (_187 bytes_)  **Issue Links:** - #14304 Poor Performance with lots of Prototype Scoped Beans  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9857ba077b16312e78ca6dcf2a219326955daae5, https://github.com/spring-projects/spring-framework/commit/a9da12325995ab03cef56e8f51870081e36a3c9e  2 votes, 4 watchers","closed","in: core,","spring-projects-issues","2010-08-05T01:46:56Z","2019-01-11T14:07:53Z"
"","12216","Changes in resource loading for 3.0.4 breaks for zipped files [SPR-7559]","**[Will May](https://jira.spring.io/secure/ViewProfile.jspa?name=willmay)** opened **[SPR-7559](https://jira.spring.io/browse/SPR-7559?redirect=false)** and commented  In the AbstractFileResolvingResource.exists() method which was introduced in Spring Core 3.0.4, the call to URLConnection.getContentLength() assumes that it will return a negative number if the file doesn't exist. In actual fact, it will return -1 simply if the content length isn't known which is the case if the file is inside of a zip (or jar).  Bug introduced in commit rev. 3545 of Spring Core.   ---  **Affects:** 3.0.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e211c0906536d8f941e92950b2dc84c608865fc6","closed","in: core,","spring-projects-issues","2010-09-15T06:47:08Z","2019-01-11T15:08:49Z"
"","12466","BeanDefinitionVisitor improperly handles TypedStringValue [SPR-7810]","**[Vladimir Kulev](https://jira.spring.io/secure/ViewProfile.jspa?name=lightoze)** opened **[SPR-7810](https://jira.spring.io/browse/SPR-7810?redirect=false)** and commented  It's a clear bug with a clear resolution, just see how `TypedStringValue` is processed in `resolveValue()`:  ``` TypedStringValue typedStringValue = (TypedStringValue) value; String stringValue = typedStringValue.getValue(); if (stringValue != null) { 	String visitedString = resolveStringValue(stringValue); 	typedStringValue.setValue(visitedString); } return value; ```  And then how it's compared e.g. in `visitMap()`:  ``` Object val = entry.getValue(); Object newVal = resolveValue(val); ```  So `val` is the same object as `newVal`. You just need to create a clone of `typedStringValue` in `resolveValue()`.   ---  **Affects:** 3.0.5","closed","in: core,","spring-projects-issues","2010-12-10T05:50:55Z","2019-01-12T16:26:26Z"
"","12656","Not specifying a multipart resolver for a multipart POST of files results in org.springframework.web.bind.MissingServletRequestParameterException [SPR-8001]","**[Vishwas Nagaraja](https://jira.spring.io/secure/ViewProfile.jspa?name=vnagaraja@vmware.com)** opened **[SPR-8001](https://jira.spring.io/browse/SPR-8001?redirect=false)** and commented  Basically I am trying to upload a file using spring mvc... but I get a missing parameter exception. [org.springframework.web.bind.MissingServletRequestParameterException: Required MultipartFile parameter 'file' is not present]  On the client side:  ```java MultiValueMap parts = new LinkedMultiValueMap(); Resource resource = new ClassPathResource(""/appctx/applicationContext.xml""); parts.add(""file"", resource); HttpHeaders headers = new HttpHeaders(); headers.setContentType(new MediaType(""multipart"", ""form-data"")); HttpEntity request = new HttpEntity(parts, headers); ResponseEntity httpResponse = cliRestTemplate.exchange(fullUri(""/file/upload""), HttpMethod.POST, request, null); ```  On the server side:  ```java @RequestMapping(value = ""/file/upload"", method = RequestMethod.POST) @ResponseBody public void upload(@RequestParam(value=""file"") MultipartFile file, HttpServletResponse response) throws Exception {     String fileName = file.getOriginalFilename();     logger.info(""Received file to upload.  fileName='{}'"", fileName);     String resultUrl = getUrlForContent(fileName, file.getInputStream());     response.setStatus(200);     response.setContentType(""text/text"");     response.setContentLength(resultUrl.length());     response.getWriter().print(resultUrl); } ```  The way to fix this is to define a multipartresolver like this.  ```xml         ```  Since this configuration is is required, it would be great if spring threw an exception if it didn't find the multipart resolver.  Couple of suggestions include: a) Adding an annotation at the controller level that programmers can use to indicate that it can handle multipart request which can trigger the validation. b) Searching for the presence of a MultipartFile type as a parameter to the trigger the validation   ---  **Affects:** 3.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2568a3c2c6af84668f9a4039baf4ba4998a3c54b  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2011-02-24T12:48:00Z","2021-05-15T13:17:28Z"
"","12576","Interceptor Anonnation Configuration Needs to Support Regex  [SPR-7921]","**[vicina](https://jira.spring.io/secure/ViewProfile.jspa?name=vicina.info)** opened **[SPR-7921](https://jira.spring.io/browse/SPR-7921?redirect=false)** and commented  After introducing RESTful in Spring 3, the interceport anonnation configuration  needs to support regular expression path type for  as what it does in Spring Security 3 (the intercept-url element of http).   ---  **Affects:** 3.0.5  **Reference URL:** http://forum.springsource.org/showthread.php?t=102137","closed","type: enhancement,","spring-projects-issues","2011-01-30T11:17:08Z","2018-12-26T17:25:09Z"
"","12113","using ThreadPooTaskExecuter  in DefaultMessageListenerContainer results in wrong number of activeConsumers [SPR-7455]","**[Tovi Sofer](https://jira.spring.io/secure/ViewProfile.jspa?name=tovi)** opened **[SPR-7455](https://jira.spring.io/browse/SPR-7455?redirect=false)** and commented  I created standalone Spring application to consume messages from JMS queue. For that I used DefaultMessageListenerContainer. In order for the container to use thread-pool for the created invokers (and not create a new thread each time) I defined taskExecuter to be org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.class.  This works OK, except from number of active consumers: I defined concurrentConsumers to be 5 (max is 10), but when I look at jconsole I see activeConsumers=1. (concurrentConsumers is shown as 5). I didn't change any of ThreadPoolTaskExecuter default definitions - meaning corePoolSize is 1, etc. When I remove taskExecuter attribute from DefaultMessageListenerContainer definition (and therefore SimpleTaskExecuter is used) I see in jconsole 5 active consumers as expected.  Spring XML file:","closed","status: invalid,","spring-projects-issues","2010-08-12T03:25:53Z","2019-01-12T05:31:39Z"
"","12655","Make AspectJ-compiled @Aspect types eligible for auto-proxying [SPR-8000]","**[Torben Knerr](https://jira.spring.io/secure/ViewProfile.jspa?name=tknerr)** opened **[SPR-8000](https://jira.spring.io/browse/SPR-8000?redirect=false)** and commented  We have some aspect libraries written in `@AspectJ-style` syntax that we want to use with Spring AOP proxying.  As an example, take the `foo.bar.TestAspect` which applies to any method annotated with `foo.bar.SomeAnnotation`:  ``` @Aspect public class TestAspect { 	@Around(""execution(@foo.bar.SomeAnnotation * *(..))"") 	public Object testMe(ProceedingJoinPoint thisJoinPoint) throws Throwable 	{  		try 		{ 			System.out.println(""--- before""); 			return thisJoinPoint.proceed(); 		} 		finally 		{ 			System.out.println(""--- after""); 		} 	}  } ```  In order to make this work with Spring AOP we did the following:  1) adding auto-proxying:  ```  ```  2) defining the aspect as a bean:  ```  ```  (/) This works as expected, as long as `TestAspect` is compiled with a **regular Java compiler**.  But now, we also have some other aspects that have been compiled with the aspectj compiler. We hoped to get these aspects work with Spring AOP as well, but we were not successful with it.  As a simple test case, we used the above `TestAspect` and compiled it with the aspectj compiler instead of the regular Java compiler. Then we did the following changes to make sure the aspect is correctly instantiated and the classpath is correct:  1) we made sure that the aspect is instantiated via `aspectOf` factory method:  ```  ```  2) and also added the aspectj dependencies:  ```            aspectj        aspectjweaver        1.6.8                aspectj        aspectjrt        1.6.8  ```  (x) But now the aspect is not applied anymore because it was compiled using the **aspectj compiler** :-/  We did some research and found the following two year old entry in the Spring forums: http://forum.springsource.org/showthread.php?t=75210  It finally refers to the `isAspect()` method in `org.springframework.aop.aspectj.annotation.AbstractAspectJAdvisorFactory` which is implemented and documented like that:  ``` /**  * We consider something to be an AspectJ aspect suitable for use by the Spring AOP system  * if it has the @Aspect annotation, and was not compiled by ajc. The reason for this latter test  * is that aspects written in the code-style (AspectJ language) also have the annotation present  * when compiled by ajc with the -1.5 flag, yet they cannot be consumed by Spring AOP.  */ public boolean isAspect(Class clazz) {      return (hasAspectAnnotation(clazz) && !compiledByAjc(clazz)); } ```  I understand that the comment basically says ""aspects compiled with aspectj compiler are not supported"". But I'm also understanding that  ""`@AspectJ-style` syntax should be supported, but once an aspect has been compiled with aspectj-compiler we don't know whether it was actaully `@AspectJ-style` or code-style AspectJ language - so we better don't support it at all"".  So I have two questions: 1. why is the code-style AspectJ language not supported? Becuase it is too expressive? 2. knowing that `@AspectJ-style` syntax was used for an aspectj-compiled aspect, is there any other way to use that aspect with Spring AOP apart from ``? Maybe to somehow _force_ the creation of the proxy?  Thanks a lot and best regards, Torben    ---  **Affects:** 3.0.5  **Reference URL:** http://forum.springsource.org/showthread.php?t=75210  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2011-02-24T08:50:51Z","2015-09-22T17:34:32Z"
"","12382","SPEL throws exception when attempting to obtain static property from Map [SPR-7726]","**[tony kerz](https://jira.spring.io/secure/ViewProfile.jspa?name=tony_k)** opened **[SPR-7726](https://jira.spring.io/browse/SPR-7726?redirect=false)** and commented  \ \ \  yields:  Caused by: org.springframework.beans.factory.BeanExpressionException: Expression parsing failed; nested exception is java.lang.ClassCastException: java.lang.Class cannot be cast to java.util.Map at org.springframework.context.expression.StandardBeanExpressionResolver.evaluate(StandardBeanExpressionResolver.java:141) ~[spring-context-3.0.5.RELEASE.jar:3.0.5.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.evaluateBeanDefinitionString(AbstractBeanFactory.java:1287) ~[spring-beans-3.0.5.RELEASE.jar:3.0.5.RELEASE] at org.springframework.beans.factory.support.BeanDefinitionValueResolver.evaluate(BeanDefinitionValueResolver.java:210) ~[spring-beans-3.0.5.RELEASE.jar:3.0.5.RELEASE] at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:182) ~[spring-beans-3.0.5.RELEASE.jar:3.0.5.RELEASE] at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:630) ~[spring-beans-3.0.5.RELEASE.jar:3.0.5.RELEASE] at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:148) ~[spring-beans-3.0.5.RELEASE.jar:3.0.5.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1003) ~[spring-beans-3.0.5.RELEASE.jar:3.0.5.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:907) ~[spring-beans-3.0.5.RELEASE.jar:3.0.5.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:485) ~[spring-beans-3.0.5.RELEASE.jar:3.0.5.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) ~[spring-beans-3.0.5.RELEASE.jar:3.0.5.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:291) ~[spring-beans-3.0.5.RELEASE.jar:3.0.5.RELEASE] at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-3.0.5.RELEASE.jar:3.0.5.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:288) ~[spring-beans-3.0.5.RELEASE.jar:3.0.5.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190) ~[spring-beans-3.0.5.RELEASE.jar:3.0.5.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:580) ~[spring-beans-3.0.5.RELEASE.jar:3.0.5.RELEASE] at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:895) ~[spring-context-3.0.5.RELEASE.jar:3.0.5.RELEASE] at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:425) ~[spring-context-3.0.5.RELEASE.jar:3.0.5.RELEASE] at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:84) ~[spring-test-3.0.5.RELEASE.jar:3.0.5.RELEASE] at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:1) ~[spring-test-3.0.5.RELEASE.jar:3.0.5.RELEASE] at org.springframework.test.context.TestContext.loadApplicationContext(TestContext.java:280) ~[spring-test-3.0.5.RELEASE.jar:3.0.5.RELEASE] at org.springframework.test.context.TestContext.getApplicationContext(TestContext.java:304) ~[spring-test-3.0.5.RELEASE.jar:3.0.5.RELEASE] ... 24 common frames omitted Caused by: java.lang.ClassCastException: java.lang.Class cannot be cast to java.util.Map at org.springframework.context.expression.MapAccessor.canRead(MapAccessor.java:37) ~[spring-context-3.0.5.RELEASE.jar:3.0.5.RELEASE] at org.springframework.expression.spel.ast.PropertyOrFieldReference.readProperty(PropertyOrFieldReference.java:189) ~[spring-expression-3.0.5.RELEASE.jar:3.0.5.RELEASE] at org.springframework.expression.spel.ast.PropertyOrFieldReference.getValueInternal(PropertyOrFieldReference.java:71) ~[spring-expression-3.0.5.RELEASE.jar:3.0.5.RELEASE] at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:57) ~[spring-expression-3.0.5.RELEASE.jar:3.0.5.RELEASE] at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:93) ~[spring-expression-3.0.5.RELEASE.jar:3.0.5.RELEASE] at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:88) ~[spring-expression-3.0.5.RELEASE.jar:3.0.5.RELEASE] at org.springframework.context.expression.StandardBeanExpressionResolver.evaluate(StandardBeanExpressionResolver.java:138) ~[spring-context-3.0.5.RELEASE.jar:3.0.5.RELEASE] ... 44 common frames omitted   ---  **Affects:** 3.0.5","closed","in: core,","spring-projects-issues","2010-11-08T08:48:42Z","2019-01-12T16:26:37Z"
"","22085","make MessageHeaders get() and containsKey() methods case-insensitive [SPR-17553]","**[tony kerz](https://jira.spring.io/secure/ViewProfile.jspa?name=tony_k)** opened **[SPR-17553](https://jira.spring.io/browse/SPR-17553?redirect=false)** and commented  ok, I just came to the realization that tomcat converts header names to lower case, and I guess it is within it's right to do so because the servlet spec states that headers are case-insensitive:  http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2  it follows that any servlet container may do what ever it wants with the case of headers, so any search for a header by key must be done in a case-insensitive way.  coincidentally, I see that you have just been doing some cleanup associated with this as well: http://forum.springframework.org/showpost.php?s=2fa1e38186a0a8b234adf885aca690ca&p=337615&postcount=20  my issue is that if a Spring Integration Message passes over an HTTP transport, that although you may now do the right thing with respect to DefaultHttpHeaderMapper, the original case of the header name may have changed from when I placed it in the Message, so if I search for it via MessageHeaders get() or containsKey() I will not find it.  How would you guys feel about making MessageHeaders.get()/containsKey() operate in a case insensitive manner as does HttpServletRequest.getHeader()...?  http://download.oracle.com/javaee/6/api/javax/servlet/http/HttpServletRequest.html#getHeader%28java.lang.String%29   --- No further details from [SPR-17553](https://jira.spring.io/browse/SPR-17553?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2011-01-10T11:40:29Z","2019-01-12T00:10:24Z"
"","12663","MemoryLeak in Cglib2AopProxy.ProxyCallbackFilter [SPR-8008]","**[Tommy Becker](https://jira.spring.io/secure/ViewProfile.jspa?name=tbecker)** opened **[SPR-8008](https://jira.spring.io/browse/SPR-8008?redirect=false)** and commented  We are having issues with OOM errors during unit test runs. The runs setup and subsequently tear down a lot of Spring contexts, and we're noticing the BeanFactory instances are not getting cleaned up. Analysis of heap dumps shows that the Cglib2AopProxy.ProxyCallbackFilter, which is cached by cglib, maintains a chain of strong references back to the BeanFactory. Did some searching and it looks like the same type of problem as described in this older issue:  https://jira.springsource.org/browse/SPR-3620  Attached is a graphic showing the reference chain.  ---  **Affects:** 3.0.3  **Reference URL:** http://forum.springsource.org/showthread.php?t=104193  **Attachments:** - [References.png](https://jira.spring.io/secure/attachment/17679/References.png) (_36.56 kB_)  **Issue Links:** - #8684 Cglib2AopProxy weak reference causes perm space to fill up - #8302 ProxyFactory memory leak using cglib - #12556 ConfigurationClassEnhancer prevents BeanFactory from being GCd - #17158 Inconsistent hashCode/equals implementation in AbstractPointcutAdvisor results in CGLIB-related memory leak - #14484 Prevent memory leaks with `@Configuration` beans - #15411 Method injection causes memory leak - #15900 `@Async` with cglib based proxy causes memory leak in permgen  **Backported to:** [3.1.4](https://github.com/spring-projects/spring-framework/milestone/83?closed=1)  8 votes, 6 watchers","closed","in: core,","spring-projects-issues","2011-03-01T08:03:30Z","2019-01-13T07:10:54Z"
"","12556","ConfigurationClassEnhancer prevents BeanFactory from being GCd [SPR-7901]","**[Tommy Becker](https://jira.spring.io/secure/ViewProfile.jspa?name=tbecker)** opened **[SPR-7901](https://jira.spring.io/browse/SPR-7901?redirect=false)** and commented  We're experiencing OOM errors during unit test runs.  We make fairly heavy use of Java based context configuration in our application as well as the tests.  Upon investigation, I see that there are a number of ApplicationContext instances still referenced on the heap that should be collectable.  It appears that the way the ConfigurationClassEnhancer is registering its BeanMethodInterceptor with the CGLIB generated subclass is the problem.  In #10601, this was changed from Enhancer.registerCallbacks() to Enhancer.registerStaticCallbacks() to work around the fact that the former only applies the advice when method calls originate from the same thread that registered the callback.  However using the static callback mechanism results in a static reference from the generated subclass to the interceptor, which in turn keeps a reference to the BeanFactory.  So the BeanFactory is never eligible for GC, even after its been closed.  Although problems running unit tests reveled the problem, we're most likely experiencing it at runtime as well since our application does close contexts and start new ones dynamically in response to some events.  As a potential fix, it would be nice if the BeanMethodInterceptor could receive a callback itself when the BeanFactory it references is closed, so it can then unregister itself from the CGLIB proxy.  Alternatively, perhaps a WeakReference to the BeanFactory could be used from the interceptor.  ---  **Affects:** 3.0.3  **Attachments:** - [mylyn-context.zip](https://jira.spring.io/secure/attachment/17729/mylyn-context.zip) (_105.42 kB_)  **Issue Links:** - #12878 CGLIB enhanced `@Configuration` classes cannot be garbage collected (_**""is duplicated by""**_) - #12663 MemoryLeak in Cglib2AopProxy.ProxyCallbackFilter - #12878 CGLIB enhanced `@Configuration` classes cannot be garbage collected  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d2faef44fa2c6f55d8a9fdac77ada63657a86864, https://github.com/spring-projects/spring-framework/commit/43676bd660bcfdfea437fdb046ba05c6785d4121  5 votes, 3 watchers","closed","in: core,","spring-projects-issues","2011-01-21T09:51:51Z","2019-01-13T07:11:29Z"
"","12529","Provide servlet 3.0 web fragment to startup application context without web.xml modifications [SPR-7872]","**[Tomasz Nurkiewicz](https://jira.spring.io/secure/ViewProfile.jspa?name=nurkiewicz)** opened **[SPR-7872](https://jira.spring.io/browse/SPR-7872?redirect=false)** and commented  In servlet 3.0 compatible environments it would be nice to have `spring-web-fragment*.jar` available in repos, containing `/META-INF/web-fragment.xml` file. This JAR/file would be responsible for starting up web application context. Now `web.xml` modification is always required. By using dedicated web fragment user would only have to add this JAR to `/WEB-INF/lib` of WAR. The biggest challenge is to decide how should the minimal `applicationContext.xml`, shipped with web fragment JAR, look like. See discussion here.  ---  **Affects:** 3.0.5  **Issue Links:** - #10258 Support Servlet 3.0 (JSR-315)  4 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2011-01-11T14:59:27Z","2019-01-11T15:21:53Z"
"","12248","Add JavaScript support for Spring dynamic languages [SPR-7592]","**[Tomasz Nurkiewicz](https://jira.spring.io/secure/ViewProfile.jspa?name=nurkiewicz)** opened **[SPR-7592](https://jira.spring.io/browse/SPR-7592?redirect=false)** and commented  Spring currently supports Groovy, JRuby and BeanShell dynamic languages. I would like to suggest adding support for JavaScript. Because Rhino engine is embedded in Java 6 JRE, no additional libraries are needed since that version.  I have already implemented ([GitHub](http://github.com/nurkiewicz/spring-js)) rough version of this feature (including several unit tests) and explained it [here](http://nurkiewicz.blogspot.com/2010/09/javascript-dynamic-language-support-in.html).  ---  **Affects:** 3.0.4  **Issue Links:** - #16871 Support JavaScript Templating - #9888 ScriptFactory for JSR-223 (_**""is superseded by""**_)  8 votes, 9 watchers","closed","in: core,","spring-projects-issues","2010-09-24T11:24:57Z","2019-01-11T15:12:16Z"
"","12089","Passing lookup-method arguments to created bean constructor [SPR-7431]","**[Tomasz Nurkiewicz](https://jira.spring.io/secure/ViewProfile.jspa?name=nurkiewicz)** opened **[SPR-7431](https://jira.spring.io/browse/SPR-7431?redirect=false)** and commented  \ should allow specifying any number of parameters. These parameters should be passed directly to the constructor of the newly created bean. For example:  ```xml          ```  ```java public class SomeSpringBean {    protected abstract FlightValidator createValidator(Flight flight);  } ```  ```java public class FlightValidator {    public FlightValidator(Flight flight) {     //...   }  } ```  This configuration should be valid and `flight` instance given to createValidator() lookup method should be passed automatically to `FlighValidator` constructor.  Very rough implementation of this feature (only two lines of code modified!) is discussed [here](http://nurkiewicz.blogspot.com/2010/08/creating-prototype-spring-beans-on.html). Similar issue #7703 has been reported and rejected, but its author wanted the lookup-method parameters to be ignored.  ---  **Affects:** 3.0.3  **Attachments:** - [SPR-7431-patch.diff](https://jira.spring.io/secure/attachment/18091/SPR-7431-patch.diff) (_7.54 kB_)  **Issue Links:** - #9865 `@LookupMethod` annotation for use with component scanning - #15860 BeanFactory lacks method for getting bean by type with specified constructor arguments - #12084 Context startup should fail when lookup-method has arguments (_**""supersedes""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/eb0ab8431bc967aff0f186a4b0bc4562e073fd01  44 votes, 38 watchers","closed","has: votes-jira,","spring-projects-issues","2010-08-06T13:05:16Z","2019-01-13T07:13:32Z"
"","12084","Context startup should fail when lookup-method has arguments [SPR-7426]","**[Tomasz Nurkiewicz](https://jira.spring.io/secure/ViewProfile.jspa?name=nurkiewicz)** opened **[SPR-7426](https://jira.spring.io/browse/SPR-7426?redirect=false)** and commented  When \ tag references method with some arguments, Spring context starts up successfully ignoring the lookup method and not implementing it using CGLIB. But when the lookup method is called at runtime, AbstractMethodError is thrown. Spring should validate lookup method parameters existence at startup and fail if no no-arg method exist (or at least issue a warning).  ---  **Affects:** 3.0.3  **Issue Links:** - #12089 Passing lookup-method arguments to created bean constructor (_**""is superseded by""**_)","closed","type: enhancement,","spring-projects-issues","2010-08-05T15:10:51Z","2019-01-11T14:08:05Z"
"","12627","RestTemplate.putFor* [SPR-7972]","**[Tomasz Blachowicz](https://jira.spring.io/secure/ViewProfile.jspa?name=tblachowicz)** opened **[SPR-7972](https://jira.spring.io/browse/SPR-7972?redirect=false)** and commented  Currently the PUT methods on RestTemplate are void. I'm aware that in typical scenarios PUT does not return any value, but there are some cases where methods putForObject and/or putForEntity are required.  Prime example is connectivity with Apache CouchDB that return revision number of the document when updating the document using PUT method. More details can be seen here: http://wiki.apache.org/couchdb/HTTP_Document_API#PUT  ---  **Affects:** 3.0.5  **Issue Links:** - #15256 Please add a putForEntity and a putForLocation method to RestTemplate (_**""duplicates""**_) - #15256 Please add a putForEntity and a putForLocation method to RestTemplate (_**""is duplicated by""**_)  3 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2011-02-18T08:17:17Z","2019-01-11T16:13:45Z"
"","11913","spring context wrongly created when using aliases [SPR-7254]","**[Tomasz Bech](https://jira.spring.io/secure/ViewProfile.jspa?name=tbech)** opened **[SPR-7254](https://jira.spring.io/browse/SPR-7254?redirect=false)** and commented  Under some conditions, spring context is wrongly created. Problem appears when: - there are beans/code which requires eager creation of the beans (autowiring by type or getBeansByType()); - there are instances of FactoryBean-s; - some of the beans during eager creation cannot be instanciated; - aliases are used;  The original problem happened with cxf library and thousands of objects in spring context. Out of that, hopefully, I was able to build the testcase. It is attached - as separate project (maven). As it is, it fails with NullPointerException - this means that one of the BeanK has 'wrongly created object of type BeanW' injected. When you get rid of beanWAlias from the test.xml - test passes.  Look on BeanD - at first time it throws exception during construction - it leads to destorying of eagerly created singletons - but the destruction is not correct/full - beanK remains in the context. It is because 'alias' is used.   ---  **Affects:** 2.5.6  **Attachments:** - [springTest.zip](https://jira.spring.io/secure/attachment/16622/springTest.zip) (_9.56 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/de866a0ff65217bf0ce984aefc7b7346747e3710","closed","in: core,","spring-projects-issues","2010-06-01T22:38:09Z","2012-06-19T03:43:08Z"
"","12642","Support Quartz 1.8.x or better [SPR-7987]","**[ToM](https://jira.spring.io/secure/ViewProfile.jspa?name=tom_1st)** opened **[SPR-7987](https://jira.spring.io/browse/SPR-7987?redirect=false)** and commented  Hey Spring folks,  thanks for you great work on the framework. Got a small request:  I wanted to use Quartz however the version within spring is over 3 years old. Could someone update that version to 1.8.4?  Appreciated.  ---  **Affects:** 3.0.5  **Attachments:** - [org.springframework.context.support-quartz_2.0.0_support.patch](https://jira.spring.io/secure/attachment/18000/org.springframework.context.support-quartz_2.0.0_support.patch) (_43.67 kB_)  **Issue Links:** - #12923 Support Quartz 2.0.x  7 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2011-02-22T04:52:41Z","2019-01-11T16:19:36Z"
"","12669","Concurrency issue related to prototype creation and AOP(AspectJ) [SPR-8014]","**[Tom Ziemer](https://jira.spring.io/secure/ViewProfile.jspa?name=de_tom)** opened **[SPR-8014](https://jira.spring.io/browse/SPR-8014?redirect=false)** and commented  Sometimes, mostly after app-server restarts or simple ear-redeployments we encounter a bean creation issue:  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'fooBar' defined in class path resource [spring/foo-context.xml]: Initialization of bean failed; nested exception is java.lang.ArrayIndexOutOfBoundsException: 10  The project consists of around 500 beans, 20% prototypes. Only some singletons are advised, using  - Prototypes are injecting using org.springframework.beans.factory.config.ObjectFactoryCreatingFactoryBean.  If the issue occurs it always affects the first request and only the first request - all following requests pass. We were unable to reproduce the issue on a small-scale project. Nevertheless, we were able to trace the issue down to AspectJ and filed a bug: http://dev.eclipse.org/mhonarc/lists/aspectj-users/msg12764.html https://bugs.eclipse.org/bugs/show_bug.cgi?id=337855  As a workaround, we replaced AspectJ with SpringAOP, which appears to be working well.  While this certainly seems to be an AspectJ issue, the stacktrace below shows, that AbstractAdvisorAutoProxyCreator is also involved. This is rather surprising for me, since, as I said, only a few singletons are advised, yet it looks like AbstractAdvisorAutoProxyCreator is called during the ObjectFactoryCreatingFactoryBean.getObject() method which creates my AOP-free prototypes. Is this really intended and necessary?  Full stacktrace:  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'fooBar' defined in class path resource [spring/foo-context.xml]: Initialization of bean failed; nested exception is java.lang.ArrayIndexOutOfBoundsException: 10 at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:527) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:310) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190) at org.springframework.beans.factory.config.ObjectFactoryCreatingFactoryBean$TargetBeanObjectFactory.getObject(ObjectFactoryCreatingFactoryBean.java:146) at foo.bar.baz.a.b.c.foo(C.java:99) at foo.bar.baz.service.X.Y(Z.java:161) at foo.bar.baz.servlet.K.bar(M.java:136) at javax.servlet.http.HttpServlet.service(HttpServlet.java:727) at javax.servlet.http.HttpServlet.service(HttpServlet.java:820) at weblogic.servlet.internal.StubSecurityHelper$ServletServiceAction.run(StubSecurityHelper.java:227) at weblogic.servlet.internal.StubSecurityHelper.invokeServlet(StubSecurityHelper.java:125) at weblogic.servlet.internal.ServletStubImpl.execute(ServletStubImpl.java:292) at weblogic.servlet.internal.ServletStubImpl.execute(ServletStubImpl.java:175) at weblogic.servlet.internal.WebAppServletContext$ServletInvocationAction.run(WebAppServletContext.java:3587) at weblogic.security.acl.internal.AuthenticatedSubject.doAs(AuthenticatedSubject.java:321) at weblogic.security.service.SecurityManager.runAs(SecurityManager.java:121) at weblogic.servlet.internal.WebAppServletContext.securedExecute(WebAppServletContext.java:2200) at weblogic.servlet.internal.WebAppServletContext.execute(WebAppServletContext.java:2106) at weblogic.servlet.internal.ServletRequestImpl.run(ServletRequestImpl.java:1428) at weblogic.work.ExecuteThread.execute(ExecuteThread.java:201) at weblogic.work.ExecuteThread.run(ExecuteThread.java:173) java.lang.ArrayIndexOutOfBoundsException: 10 at java.util.ArrayList.add(ArrayList.java:352) at org.aspectj.weaver.ReferenceType.addDependentType(ReferenceType.java:115) at org.aspectj.weaver.ReferenceType.\(ReferenceType.java:95) at org.aspectj.weaver.TypeFactory.createParameterizedType(TypeFactory.java:43) at org.aspectj.weaver.reflect.JavaLangTypeToResolvedTypeConverter.fromType(JavaLangTypeToResolvedTypeConverter.java:88) at org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate.getSuperclass(Java15ReflectionBasedReferenceTypeDelegate.java:148) at org.aspectj.weaver.ReferenceType.getSuperclass(ReferenceType.java:906) at org.aspectj.weaver.patterns.KindedPointcut.fastMatch(KindedPointcut.java:144) at org.aspectj.weaver.internal.tools.PointcutExpressionImpl.couldMatchJoinPointsInType(PointcutExpressionImpl.java:82) at org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(AspectJExpressionPointcut.java:238) at org.springframework.aop.support.AopUtils.canApply(AopUtils.java:200) at org.springframework.aop.support.AopUtils.canApply(AopUtils.java:254) at org.springframework.aop.support.AopUtils.findAdvisorsThatCanApply(AopUtils.java:286) at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findAdvisorsThatCanApply(AbstractAdvisorAutoProxyCreator.java:117) at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findEligibleAdvisors(AbstractAdvisorAutoProxyCreator.java:87) at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.getAdvicesAndAdvisorsForBean(AbstractAdvisorAutoProxyCreator.java:68) at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.wrapIfNecessary(AbstractAutoProxyCreator.java:359) at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization(AbstractAutoProxyCreator.java:322) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:407) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1426) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:310) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190) at org.springframework.beans.factory.config.ObjectFactoryCreatingFactoryBean$TargetBeanObjectFactory.getObject(ObjectFactoryCreatingFactoryBean.java:146) at foo.bar.baz.a.b.c.foo(C.java:99) at foo.bar.baz.service.X.Y(Z.java:161) at foo.bar.baz.servlet.K.bar(M.java:136) at javax.servlet.http.HttpServlet.service(HttpServlet.java:727) at javax.servlet.http.HttpServlet.service(HttpServlet.java:820) at weblogic.servlet.internal.StubSecurityHelper$ServletServiceAction.run(StubSecurityHelper.java:227) at weblogic.servlet.internal.StubSecurityHelper.invokeServlet(StubSecurityHelper.java:125) at weblogic.servlet.internal.ServletStubImpl.execute(ServletStubImpl.java:292) at weblogic.servlet.internal.ServletStubImpl.execute(ServletStubImpl.java:175) at weblogic.servlet.internal.WebAppServletContext$ServletInvocationAction.run(WebAppServletContext.java:3587) at weblogic.security.acl.internal.AuthenticatedSubject.doAs(AuthenticatedSubject.java:321)   ---  **Affects:** 3.0.5","closed","in: core,","spring-projects-issues","2011-03-02T07:19:39Z","2019-01-12T05:30:57Z"
"","12056","Random ClassCastException when creating prototype-bean with nested map property [SPR-7398]","**[Tom Ziemer](https://jira.spring.io/secure/ViewProfile.jspa?name=de_tom)** opened **[SPR-7398](https://jira.spring.io/browse/SPR-7398?redirect=false)** and commented  Concurrent access to a prototype bean with a nested map property causes random java.lang.ClassCastExceptions.  Example:  \  \ \ \ \ \ \ \ \  Running the attached program randomly yields the following exception:  27.07.2010 16:29:18 org.springframework.beans.factory.support.DefaultListableBeanFactory preInstantiateSingletons INFO: Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@e5355f: defining beans [statefulBean]; root of factory hierarchy Exception in thread ""Thread-1100"" org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'statefulBean' defined in class path resource [spring/applicationContext.xml]: Error converting typed String value for bean property 'mappings'; nested exception is java.lang.ClassCastException: java.lang.Class cannot be cast to java.lang.String at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:194) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveManagedMap(BeanDefinitionValueResolver.java:382) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:161) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1317) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1076) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:517) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:310) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190) at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1075) at foo.bar.mapissue.MapIssueTest$RequestThread.doWork(MapIssueTest.java:57) at foo.bar.mapissue.MapIssueTest$RequestThread.run(MapIssueTest.java:49) at java.lang.Thread.run(Thread.java:619) Caused by: java.lang.ClassCastException: java.lang.Class cannot be cast to java.lang.String at org.springframework.beans.factory.config.TypedStringValue.getTargetTypeName(TypedStringValue.java:135) at org.springframework.beans.factory.config.TypedStringValue.resolveTargetType(TypedStringValue.java:158) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveTargetType(BeanDefinitionValueResolver.java:242) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:184) ... 12 more  Possible workaround: do not use an anonymous inner bean but create a util:map-style bean and reference it from the prototype:  \  \ \ \                                   Please note: - The issue does not occur all the time, running the test multiple times might be necessary. - Tested on Windows XP, SUN JVM 1.6.0_17, 1.6.0_18, 1.6.0_21    ---  **Affects:** 3.0.3  **Attachments:** - [mapissue.zip](https://jira.spring.io/secure/attachment/16940/mapissue.zip) (_4.85 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c3a639f07db882eac7613c1ebae96bc076fed1a9  1 votes, 2 watchers","closed","in: core,","spring-projects-issues","2010-07-27T01:46:55Z","2012-06-19T03:43:43Z"
"","12869","deadlock when shutting down embedded hsqldb instance [SPR-8220]","**[Tom Pasierb](https://jira.spring.io/secure/ViewProfile.jspa?name=tompasik)** opened **[SPR-8220](https://jira.spring.io/browse/SPR-8220?redirect=false)** and commented  Could you please provide synchronization on shutting down an instance of embedded database.  I'm using embedded HSQLDB database for some db aware unit tests and spring TestContext framework. When those tests are run during the build process of my project using maven surefire plugin, the TestContext caches spring application contexts. When there are multiple contexts that use the same embedded database only one instance is loaded. After all the tests are run and vm closes down it runs the shutdown hooks and those close spring application contexts. During this procedure the embedded datasources are closed and sometimes there's a hazard which causes deadlock and the build process hangs :-(  Please find below the deadlock info copied from jconsole - these are stacktraces of two blocked threads.  Name: Thread-2 State: BLOCKED on org.hsqldb.SessionManager@58773ac1 owned by: Thread-1 Total blocked: 2  Total waited: 0  Stack trace: org.hsqldb.SessionManager.closeAllSessions(Unknown Source) org.hsqldb.Database.close(Unknown Source) org.hsqldb.StatementCommand.getResult(Unknown Source) org.hsqldb.StatementCommand.execute(Unknown Source) org.hsqldb.Session.executeCompiledStatement(Unknown Source) org.hsqldb.Session.executeDirectStatement(Unknown Source) org.hsqldb.Session.execute(Unknown Source) - locked org.hsqldb.Session@60c58418   org.hsqldb.jdbc.JDBCStatement.fetchResult(Unknown Source)   org.hsqldb.jdbc.JDBCStatement.execute(Unknown Source) - locked org.hsqldb.jdbc.JDBCStatement@40773f4b   org.springframework.jdbc.datasource.embedded.AbstractEmbeddedDatabaseConfigurer.shutdown(AbstractEmbeddedDatabaseConfigurer.java:42)   org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactory.shutdownDatabase(EmbeddedDatabaseFactory.java:184)   org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactoryBean.destroy(EmbeddedDatabaseFactoryBean.java:57)   org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:184)   org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:487)   org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:463)   org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:431) - locked java.util.LinkedHashMap@54dc75fd   org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1048)   org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1022)   org.springframework.context.support.AbstractApplicationContext$3.run(AbstractApplicationContext.java:940)  Name: Thread-1 State: BLOCKED on org.hsqldb.Session@60c58418 owned by: Thread-2 Total blocked: 3  Total waited: 0  Stack trace: org.hsqldb.Session.close(Unknown Source) org.hsqldb.SessionManager.closeAllSessions(Unknown Source) - locked org.hsqldb.SessionManager@58773ac1   org.hsqldb.Database.close(Unknown Source)   org.hsqldb.StatementCommand.getResult(Unknown Source)   org.hsqldb.StatementCommand.execute(Unknown Source)   org.hsqldb.Session.executeCompiledStatement(Unknown Source)   org.hsqldb.Session.executeDirectStatement(Unknown Source)   org.hsqldb.Session.execute(Unknown Source) - locked org.hsqldb.Session@6f85c59c   org.hsqldb.jdbc.JDBCStatement.fetchResult(Unknown Source)   org.hsqldb.jdbc.JDBCStatement.execute(Unknown Source) - locked org.hsqldb.jdbc.JDBCStatement@4ac7bf90   org.springframework.jdbc.datasource.embedded.AbstractEmbeddedDatabaseConfigurer.shutdown(AbstractEmbeddedDatabaseConfigurer.java:42)   org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactory.shutdownDatabase(EmbeddedDatabaseFactory.java:184)   org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactoryBean.destroy(EmbeddedDatabaseFactoryBean.java:57)   org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:184)   org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:487)   org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:463)   org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:431) - locked java.util.LinkedHashMap@7ff1ad4a   org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1048)   org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1022)   org.springframework.context.support.AbstractApplicationContext$3.run(AbstractApplicationContext.java:940)    ---  **Affects:** 3.0.5  2 votes, 2 watchers","closed","status: declined,","spring-projects-issues","2011-04-06T13:56:51Z","2019-01-12T16:25:48Z"
"","11908","form:hidden tag should allow most (All?) of the same HTML attributes as form:input [SPR-7249]","**[Tom Duffey](https://jira.spring.io/secure/ViewProfile.jspa?name=tduffey)** opened **[SPR-7249](https://jira.spring.io/browse/SPR-7249?redirect=false)** and commented  The form:hidden tag should support the same HTML attributes as form:input.  After all, a ""hidden"" field is a HTML input field with type=""hidden.""  This is useful in practice when we want to attach events or styles to hidden inputs.  This sounds strange at first but I have found it used in a few different applications when migrating from Struts to Spring Web MVC.   ---  **Affects:** 3.0.2  **Attachments:** - [org.springframework.web.servlet-3.0.2.RELEASE-TDUFFEY.patch](https://jira.spring.io/secure/attachment/16602/org.springframework.web.servlet-3.0.2.RELEASE-TDUFFEY.patch) (_8.98 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/78c906caaadb1c41e35e2ee4b2f0377d60e97d1c","closed","type: enhancement,","spring-projects-issues","2010-05-31T08:00:31Z","2012-06-19T03:42:42Z"
"","12099","ThreadLocal leaking in AbstractBeanFactory and XmlBeanDefinitionReader [SPR-7441]","**[Tina Tian](https://jira.spring.io/secure/ViewProfile.jspa?name=tina.tian)** opened **[SPR-7441](https://jira.spring.io/browse/SPR-7441?redirect=false)** and commented  The ThreadLocal named prototypesCurrentlyInCreation in AbstractBeanFactory will be set null after finishing each round of creating Bean, but noboday will clean that ThreadLocal entry, so it will cause leaking. For example, when I create a Bean by AbstractBeanFactory in one thread, after I get the bean, there will be a ThreadLocal entry added to that thread's ThreadLocalMap, though that entry will be set a null value, the entry will be not in the thread's ThreadLocalMap until that thread is dead or reach the condition of garbage collection of jvm, and that condition may be satisfied only when shutting down application. The same thing will happen to XmlBeanDefinitionReader.    ---  **Attachments:** - [ThreadLocal-Leaking.diff](https://jira.spring.io/secure/attachment/16991/ThreadLocal-Leaking.diff) (_3.86 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ae3cfff3805ae488e4cd56da3cef24aee8d79ab5, https://github.com/spring-projects/spring-framework/commit/e56cfb81734c9a7eb0f989fb15ba56058d3e28a1","closed","type: bug,","spring-projects-issues","2010-08-10T02:04:02Z","2012-06-19T03:44:06Z"
"","12413","ConcurrentModificationException in DefaultListableBeanFactory when using your own bean factory to register beans [SPR-7757]","**[Tin Blaskovic](https://jira.spring.io/secure/ViewProfile.jspa?name=canobi)** opened **[SPR-7757](https://jira.spring.io/browse/SPR-7757?redirect=false)** and commented  Think of the following scenario - DefaultListableBeanFactory.preInstantiateSingletons starts to instantiate beans. One of those beans is created by your own custom factory, which not only creates that particular bean, but also registers (and instantiates) some more beans (e.g. pulling their definitions from outside of application context, i.e. from an external config file). In this scenario, the aforementioned method will throw a ConcurrentModificationException when iterating through the beanDefinitionNames list (because that list will get modified by registerBeanDefinition method in the middle of iteration). There are a few different approaches I can think of for enabling this scenario to work without errors, and as far as I could see, this in fact did work without errors in Spring 2.5 (before the beanDefinitionNames field was introduced). Is this something that would consider for implementation, or is the described usage scenarion something that you don't conceptually want to support in Spring core (although as I mentioned, this did work in Sprin 2.5 and earlier versions probably).   ---  **Affects:** 3.0 GA, 3.0.1, 3.0.2, 3.0.3, 3.0.4, 3.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/79aa661dd6350fa16b4b14ec020383524f77dedd, https://github.com/spring-projects/spring-framework/commit/f432f3043f8e953961827a8b5683d7738f65ddd2  4 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2010-11-22T01:00:36Z","2012-06-19T03:39:21Z"
"","11996","@ExceptionHandler doesn't work on CGLib-proxied controller in Portlet MVC [SPR-7337]","**[Timur Shipilov](https://jira.spring.io/secure/ViewProfile.jspa?name=tshipilov)** opened **[SPR-7337](https://jira.spring.io/browse/SPR-7337?redirect=false)** and commented  An exception handler is never invoked when the controller is proxied by CGLib in Portlet MVC. The issue already fixed for servlet MVC. Please refer to #10627 for details.  ---  **Affects:** 3.0.3  **Issue Links:** - #10627 `@ExceptionHandler` on CGLib-proxied controller is ineffectual  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7e9e8401f71517ff7d8f6f31677c7edfbd887521","closed","type: bug,","spring-projects-issues","2010-06-29T20:16:49Z","2019-01-13T07:14:00Z"
"","12461","Add support for package binding in the JibxMashaller [SPR-7805]","**[Tiago Stürmer Daitx](https://jira.spring.io/secure/ViewProfile.jspa?name=tdaitx)** opened **[SPR-7805](https://jira.spring.io/browse/SPR-7805?redirect=false)** and commented  As per https://jira.springframework.org/browse/SWS-229 JibxMashaller already supports all the mapped classes in the IBindingFactory (wonder why the [docs](http://static.springsource.org/spring-ws/sites/1.5/reference/html/oxm.html#oxm-jibx) don't say anything about that) but I needed a way to set it per package so I have created my own JibxMarshaller and have been using it successfully so far.  By default it will ignore _targetPackage_ property if _targetClass_ property is set to keep the usual behavior.  I have also updated it to fix https://jira.springsource.org/browse/SWS-659 as stated on the [forum](http://forum.springsource.org/showthread.php?t=42137) because I had a similar scenario where I needed multiple marshallers (one per root element). Since changing this method will break anyone who has been using the ""set class and get binding for all mapped classes"" feature/bug I'm adding two patches: one with all the changes and another with everything but the _supports(Class)_ method change.  BTW, I generated the patch against JibxMarshaller from Spring 3.0.5. Let me know if I really need to do it against SWS 1.5.9.  ---  **Affects:** 3.0.5  **Attachments:** - [jibxmarshaller-targetpackage-only.patch](https://jira.spring.io/secure/attachment/17426/jibxmarshaller-targetpackage-only.patch) (_2.66 kB_) - [jibxmarshaller-targetpackage-with-supports.patch](https://jira.spring.io/secure/attachment/17425/jibxmarshaller-targetpackage-with-supports.patch) (_2.99 kB_)  **Issue Links:** - #12460 JibxMarshaller supports method returns true for classes not in the configured binding  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fa4f90e6482ca9c6f7871052ef8469eec410a951","closed","type: enhancement,","spring-projects-issues","2010-12-03T19:02:58Z","2019-01-11T15:13:27Z"
"","12563","HttpMessageConverterExtractor throws RestClientException if no Content-Type header was found in HttpRespone [SPR-7908]","**[Thomas Ziem](https://jira.spring.io/secure/ViewProfile.jspa?name=tziem)** opened **[SPR-7908](https://jira.spring.io/browse/SPR-7908?redirect=false)** and commented  In cases if a HttpResponse contains no content (e.g. if status code is 204), no Content-Type header will be sent. But HttpMessageConverterExtractor expects always a Content-Type header:  ``` public T extractData(ClientHttpResponse response) throws IOException {     MediaType contentType = response.getHeaders().getContentType();     if (contentType == null) {         throw new RestClientException(""Cannot extract response: no Content-Type found"");     }     ... } ```  ---  **Affects:** 3.0.5  **Attachments:** - [RestTemplateTests.java](https://jira.spring.io/secure/attachment/17610/RestTemplateTests.java) (_2.59 kB_)  **Issue Links:** - #12970 HttpMessageConverterExtractor throws RestClientException if no Content-Type header was found in HttpRespone (_**""is duplicated by""**_) - [ROO-2274](https://jira.spring.io/browse/ROO-2274) Sending back ResponseEntity without Content-Type header causes RestClientExceptions when using RestTemplate  3 votes, 2 watchers","closed","in: web,","spring-projects-issues","2011-01-25T03:10:45Z","2019-01-11T16:13:31Z"
"","12559","Setting default charset in StringHttpMessageConverter [SPR-7904]","**[Thomas Ziem](https://jira.spring.io/secure/ViewProfile.jspa?name=tziem)** opened **[SPR-7904](https://jira.spring.io/browse/SPR-7904?redirect=false)** and commented  Currently, StringHttpMessageConverter uses ISO-8859-1 as default charset for reading and writing:  ``` public static final Charset DEFAULT_CHARSET = Charset.forName(""ISO-8859-1""); ```  ``` protected String readInternal(Class clazz, HttpInputMessage inputMessage) throws IOException {     MediaType contentType = inputMessage.getHeaders().getContentType();     Charset charset = contentType.getCharSet() != null ? contentType.getCharSet() : DEFAULT_CHARSET;     return FileCopyUtils.copyToString(new InputStreamReader(inputMessage.getBody(), charset)); } ```  It would be nice if it could be configured from outside.  ---  **Affects:** 3.0.5  **Issue Links:** - #14122 Backport constructor accepting Charset in StringHttpMessageConverter, from Spring for Android to Spring Web. (_**""duplicates""**_) - #12161 Make it easier to add new Message Converters to AnnotationMethodHandlerAdapter  **Backported to:** [3.1.2](https://github.com/spring-projects/spring-framework/milestone/81?closed=1)  3 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2011-01-24T03:41:22Z","2019-01-11T16:13:36Z"
"","12206","findDefaultEntityManagerFactory should consider EMF bean's primary flag [SPR-7549]","**[Thomas Strecker](https://jira.spring.io/secure/ViewProfile.jspa?name=icarus4ever)** opened **[SPR-7549](https://jira.spring.io/browse/SPR-7549?redirect=false)** and commented  I am generally very happay with all the magic Spring provides me. This week, however, I ran into a problem I can't seem to solve, namely having two persistence units and therefore entity manager factories in my application's context.  While everything works perfect when I declare and annotate the EntityManager in all relevant classes with the `@PersistenceContext`(unitName=""XYZ""), I am having a slightly different problem. While one of the persistence units' names is static (b/c I control it) the name of the other is dynamic. This may seem silly but is beyond my control.  So I tried to provide the one EMF with the ""primary=true"" and the other with the ""primary=false"" attributes, hoping that the context would inject the primary EMF into those classes where I didn't specify the name of the persistence unit, while the other classes would obtain the EMF specified through the unitName.  Unfortunately, PersistenceAnnotationBeanPostProcessor.findDefaultEntityManagerFactory() does not check for the ""primary"" attribute of the retrieved beans, therefore complaining that the default entity manager cannot be obtained.  I, therefore, suggest to implement this check in the post processor.  ---  **Affects:** 3.0.4  **Issue Links:** - #18899 Support for Hibernate ORM 5.2 - #19119 StackOverflowError for advisor search against factory-bean reference to FactoryBean - #19178 Avoid creation of lazy candidates when the primary bean is injected - #19633 SchedulingConfigurer's ScheduledTaskRegistrar should reliably shut down before TaskScheduler - #19635 Track bean dependencies for calls between `@Bean` methods within `@Configuration` classes  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2010-09-13T02:04:25Z","2019-01-13T07:13:04Z"
"","12750","Improve performance of bean lookup by type for DefaultListableBeanFactory [SPR-8095]","**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[SPR-8095](https://jira.spring.io/browse/SPR-8095?redirect=false)** and commented  This has been a problem in applications using `@Provider` combined with `@Autowired` where the bean look ups exhibit performance problems.  These are quotes from a user:  ""Under heavy load we are experiencing heavy lock contention in DefaultListableBeanFactory.findAutowireCandidates().""  ""Under heavy load this is severely limiting our throughput"".  ---  **Issue Links:** - #11536 Cache by-type lookups in DefaultListableBeanFactory (_**""duplicates""**_)  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2011-03-29T06:51:31Z","2019-01-11T12:40:58Z"
"","12350","Problem obtaining meta-data for Oracle packages using SimpleJdbcCall and 11g R2 driver [SPR-7694]","**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[SPR-7694](https://jira.spring.io/browse/SPR-7694?redirect=false)** and commented  Problem obtaining meta-data for Oracle packages using SimpleJdbcCall and 11g R2 driver. The 10g driver works fine.   ---  **Affects:** 3.0.5  **Reference URL:** http://forum.springsource.org/showthread.php?t=97330  **Attachments:** - [ShowMetaData.java](https://jira.spring.io/secure/attachment/17291/ShowMetaData.java) (_2.28 kB_)  1 votes, 6 watchers","closed","status: declined,","spring-projects-issues","2010-10-28T12:17:13Z","2015-09-22T16:55:21Z"
"","12290","Refactor SimpleJdbcInsert/Call to make it easier to provide custom meta data providers [SPR-7634]","**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[SPR-7634](https://jira.spring.io/browse/SPR-7634?redirect=false)** and commented  Make it easier to write and inject custom TableMetaDataProvider and CallMetaDataProvider implementations. See #12267 for a discussion around this.  ---  **Affects:** 3.0.4  **Issue Links:** - #12267 Provide a way to use a native JDBC extractor for metadata processing in SimpleJdbcInsert","closed","type: enhancement,","spring-projects-issues","2010-10-08T11:59:53Z","2019-01-11T14:32:05Z"
"","12267","Provide a way to use a native JDBC extractor for metadata processing in SimpleJdbcInsert [SPR-7611]","**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[SPR-7611](https://jira.spring.io/browse/SPR-7611?redirect=false)** and commented  To access metadata from synonyms in Oracle we need access to the native Oracle connection - so we need a way to set a native JDBC extractor.  ---  **Affects:** 3.0.4  **Issue Links:** - #12290 Refactor SimpleJdbcInsert/Call to make it easier to provide custom meta data providers  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0f924820e88563b5c916c39dcf97229de372bdcc, https://github.com/spring-projects/spring-framework/commit/63b8ae085aeb8b1148c28fc2784f2f7d0f4c237e  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2010-10-01T11:41:26Z","2019-01-11T14:26:15Z"
"","12213","Make it easier to override the TableMetaDataProvider for SimpleJdbcInsert and CallMetaDataProvider for SimpleJdbcCall [SPR-7556]","**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[SPR-7556](https://jira.spring.io/browse/SPR-7556?redirect=false)** and commented  Change the access of the ""reconcileColumnsToUse"" in TableMetaDataProvider and ""reconcileParameters"" in CallMetaDataProvider to protected   ---  **Affects:** 3.0.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b2b195e2cfb50a336060fe160a3ac1eb39cfb018","closed","type: enhancement,","spring-projects-issues","2010-09-14T09:30:45Z","2012-06-19T03:43:35Z"
"","11886","GC problem when having Spring jars in a higher ClassLoader without using clearClassLoader [SPR-7227]","**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[SPR-7227](https://jira.spring.io/browse/SPR-7227?redirect=false)** and commented  GC problem when re-deploying bundles in dm Server 2.0.1. Looks like the GenericTypeAwarePropertyDescriptor is holding a reference to the class.  Class Name                                                                                                      | Shallow Heap | Retained Heap  ---  class com.test.Bean1 @ 0x2c34fb70                                                                               |            0 |             0 '- beanClass org.springframework.beans.GenericTypeAwarePropertyDescriptor @ 0x26c94110                          |           96 |           152 '- value java.util.HashMap$Entry @ 0x26c92970                                                                |           24 |           176 '- [3] java.util.HashMap$Entry[16] @ 0x26c91740                                                           |           80 |           376 '- table java.util.HashMap @ 0x26c868d8                                                                |           40 |           416 '- propertyDescriptorCache org.springframework.beans.CachedIntrospectionResults @ 0x26c74858        |           16 |         4,136 '- value java.util.WeakHashMap$Entry @ 0x26c5e7e0                                                |           40 |         4,176 '- [2] java.util.WeakHashMap$Entry[16] @ 0x26230850                                           |           80 |        98,408 '- table java.util.WeakHashMap @ 0x2622bb40                                                |           48 |        98,488 '- m java.util.Collections$SynchronizedMap @ 0x262275d8                                 |           32 |        98,520 '- classCache class org.springframework.beans.CachedIntrospectionResults @ 0x2bc554c8|           16 |        98,704 '- [157] java.lang.Object[320] @ 0x26229208                                       |        1,296 |       101,208  ---  ---  **Affects:** 3.0.2  **Issue Links:** - #9552 [Performance] CachedIntrospectionResults has wrong approach to caching.","closed","in: core,","spring-projects-issues","2010-05-20T07:49:34Z","2019-01-13T21:45:53Z"
"","12414","Enhance Formatter interface to let it decide whether conversion is necessary [SPR-7758]","**[Thomas Achleitner](https://jira.spring.io/secure/ViewProfile.jspa?name=tufelix04)** opened **[SPR-7758](https://jira.spring.io/browse/SPR-7758?redirect=false)** and commented  1. user is presented a form with a backing object that contains multiple object (entity) properties (e.g. a search form with multiple lookup fields referencing entities) 2. on submit of the form spring mvc binding uses the conversion service to parse a string value to an object (entity)    1. the custom Formatter implementation does a roundtrip to the database to load the lookup entities 3. if a validation error occurs the form is presented to the user again    1. the choosen lookup entities are formatted through the custom formatter    2. the backing object now holds the dereferenced lookup entities 4. the user fixes the validation error and submits the form 5. on bind spring mvc for each property calls the conversion service to parse the string values even the ones that already have been parsed during the first submit  improvement: on binding the custom formatter should have the chance to decide, that properties not having changed should not be parse again (and so database roundtrips or complex conversion logic could be avoided because data of the backing object has not changed) 1. `if (formatter.isConversionNecessary(Object oldValue, String newValue)) ...`  I think this only makes sense (if at all) in mvc binding scenarios.  With PropertyEditor implementations we could avoid those roundtrips because the propertyeditor was able to access the current/original value.   ---  **Affects:** 3.0.5","closed","status: bulk-closed,","spring-projects-issues","2010-11-22T07:26:08Z","2019-01-12T03:32:05Z"
"","12482","getJdbcTemplate().queryForList() Cannot handle 721000 rows [SPR-7826]","**[Thom Hehl](https://jira.spring.io/secure/ViewProfile.jspa?name=thehl)** opened **[SPR-7826](https://jira.spring.io/browse/SPR-7826?redirect=false)** and commented  The code:      	List maps;     	try {     		maps = getJdbcTemplate().queryForList(query);     	} catch (Throwable tw) {     		throw new InvalidQueryException(""Invalid query:"" + query, tw);     	}     	LinkedList result = new LinkedList();     	for(Map map:maps){     		for(Map.Entry entry:map.entrySet()){     			result.add(entry.getValue());     		}     	}          	return result;  will throw an out of memory exception if the query returns 721000 rows of a 9 digit String. I replaced this query with the one that takes the element type parameter and it works fine. Probably a memory leak where the map gets created.   ---  **Affects:** 2.5.6  **Reference URL:** http://forum.springsource.org/showthread.php?t=99871","closed","in: core,","spring-projects-issues","2010-12-17T10:39:46Z","2019-01-12T16:26:25Z"
"","12140","Exception (SpelEvaluationException: EL1021E) when using spring:eval with Jetty [SPR-7482]","**[Thai Ha](https://jira.spring.io/secure/ViewProfile.jspa?name=hathanhthai)** opened **[SPR-7482](https://jira.spring.io/browse/SPR-7482?redirect=false)** and commented  I have a JSP page using spring:eval tag as below  ```xml  ```  When run the mvn jetty:run command (both jetty 6.1.22 and jetty 6.1.25), I always receive the below NullPointerException (see the stacktrace at the bottom) when I access JSP page on the second time (I don't receive any error for the first time).After debugging the code, I find out that sometimes EvalTag reuses instance variable evaluationContext for the next requests, which was initialized with the PageContext of the some previous request. Here is the code which caching evaluationContext through many requests  ``` if (this.evaluationContext == null) {     this.evaluationContext = createEvaluationContext(pageContext); } ....  String result = this.expression.getValue(this.evaluationContext, String.class); ... ```  Here are the steps which lead to the exception: 1. User sends a request to page 2. Jetty creates EvalTag#1, which will initialize EvalTag#1.evaluationContext using PageContextImpl#1 (at the moment, PageContextImpl#1.request=HttpServletRequest#1). The tag will be called successfully. 3. Result is returned to user. 4. Jetty recycles PageContextImpl#1 by calling release() method. PageContextImpl#1.request=null    Jetty recycles EvalTag#1 by calling release() method. But EvalTag#1.evaluationContext still != null.  EvalTag#1.evaluationContext still have references to PageContextImpl#1 indirectly 5. User clicks Refresh button to reload the page 6. Jetty reuses EvalTag#1 to evaluate expression and as a result, the old value of EvalTag#1.evaluationContext is also be reused. This time Jetty creates a new object PageContextImpl#2 (note: somehow Jetty doesn't reuse the PageContextImpl#1 here on my page). At the moment, Jetty will throw NPE when EvalTag#1.doEndTag() is called because EvalTag#1.evaluationContext...PageContextImpl#1.request is null (it should be EvalTag#1.evaluationContext...PageContextImpl#2.request)  For other pages (which this NPE doesn't happen), at step 7 the PageContextImpl#1 is reused by Jetty and PageContextImpl#1.request is initialized correctly by Jetty so the NPE doesn't happen.  I think EvalTag.evaluationContext should NOT be cached to avoid this error.  ```xml 2010-08-21 21:40:13,093 [501538@qtp-18977449-3] ERROR [org.mortbay.log] - Nested in org.apache.jasper.JasperException: org.springframework.expression.spel.SpelEvaluationException: EL1021E:(pos 0): A problem occurred whilst attempting to access the property 'command': 'Unexpected exception occurred accessing 'command' as an implicit variable': org.springframework.expression.spel.SpelEvaluationException: EL1021E:(pos 0): A problem occurred whilst attempting to access the property 'command': 'Unexpected exception occurred accessing 'command' as an implicit variable' 	at org.springframework.expression.spel.ast.PropertyOrFieldReference.readProperty(PropertyOrFieldReference.java:199) 	at org.springframework.expression.spel.ast.PropertyOrFieldReference.getValueInternal(PropertyOrFieldReference.java:71) 	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:52) 	at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:93) 	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:88) 	at org.springframework.web.servlet.tags.EvalTag.doEndTag(EvalTag.java:108) 	at org.apache.jsp.search_jsp._jspx_meth_spring_eval_3(org.apache.jsp.search_jsp:320) 	at org.apache.jsp.search_jsp._jspService(org.apache.jsp.search_jsp:120) 	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:109) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:820) 	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:389) 	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:486) 	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:380) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:820) 	at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:511) 	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1166) 	at com.opensymphony.sitemesh.webapp.SiteMeshFilter.doFilter(SiteMeshFilter.java:59) 	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157) 	at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:388) 	at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216) 	at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:182) 	at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765) 	at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:440) 	at org.mortbay.jetty.servlet.Dispatcher.forward(Dispatcher.java:327) 	at org.mortbay.jetty.servlet.Dispatcher.forward(Dispatcher.java:126) 	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238) 	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:250) 	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1031) 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:815) 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:717) 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:644) 	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:560) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:727) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:820) 	at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:511) 	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1166) 	at com.opensymphony.sitemesh.webapp.SiteMeshFilter.obtainContent(SiteMeshFilter.java:129) 	at com.opensymphony.sitemesh.webapp.SiteMeshFilter.doFilter(SiteMeshFilter.java:77) 	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157) 	at org.tuckey.web.filters.urlrewrite.RuleChain.handleRewrite(RuleChain.java:176) 	at org.tuckey.web.filters.urlrewrite.RuleChain.doRules(RuleChain.java:145) 	at org.tuckey.web.filters.urlrewrite.UrlRewriter.processRequest(UrlRewriter.java:92) 	at org.tuckey.web.filters.urlrewrite.UrlRewriteFilter.doFilter(UrlRewriteFilter.java:381) 	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157) 	at net.sf.ehcache.constructs.web.filter.GzipFilter.doFilter(GzipFilter.java:80) 	at net.sf.ehcache.constructs.web.filter.Filter.doFilter(Filter.java:86) 	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157) 	at myapp.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:83) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) 	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:343) 	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:109) 	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:83) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:355) 	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:97) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:355) 	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:100) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:355) 	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:78) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:355) 	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:54) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:355) 	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:35) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:355) 	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilter(BasicAuthenticationFilter.java:177) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:355) 	at org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter.doFilter(DefaultLoginPageGeneratingFilter.java:91) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:355) 	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:187) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:355) 	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:105) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:355) 	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:79) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:355) 	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:149) 	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:237) 	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:167) 	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157) 	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) 	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157) 	at org.springframework.web.multipart.support.MultipartFilter.doFilterInternal(MultipartFilter.java:113) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) 	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157) 	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:88) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) 	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157) 	at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:388) 	at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216) 	at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:182) 	at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765) 	at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:440) 	at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:230) 	at org.mortbay.jetty.handler.HandlerCollection.handle(HandlerCollection.java:114) 	at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152) 	at org.mortbay.jetty.Server.handle(Server.java:326) 	at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:542) 	at org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:943) 	at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:756) 	at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:218) 	at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404) 	at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:410) 	at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:582) Caused by: org.springframework.expression.AccessException: Unexpected exception occurred accessing 'command' as an implicit variable 	at org.springframework.web.servlet.tags.EvalTag$JspPropertyAccessor.resolveImplicitVariable(EvalTag.java:186) 	at org.springframework.web.servlet.tags.EvalTag$JspPropertyAccessor.canRead(EvalTag.java:159) 	at org.springframework.expression.spel.ast.PropertyOrFieldReference.readProperty(PropertyOrFieldReference.java:189) 	... 102 more Caused by: java.lang.NullPointerException 	at org.apache.jasper.runtime.PageContextImpl.doFindAttribute(PageContextImpl.java:541) 	at org.apache.jasper.runtime.PageContextImpl.findAttribute(PageContextImpl.java:527) 	at javax.servlet.jsp.el.ScopedAttributeELResolver.getValue(ScopedAttributeELResolver.java:123) 	at javax.el.CompositeELResolver.getValue(CompositeELResolver.java:175) 	at org.apache.jasper.runtime.VariableResolverImpl.resolveVariable(VariableResolverImpl.java:97) 	at org.springframework.web.servlet.tags.EvalTag$JspPropertyAccessor.resolveImplicitVariable(EvalTag.java:183) 	... 104 more ```  ---  **Issue Links:** - #12294 spring:eval causes SpelEvaluationException when page is opened in second user-session (_**""is duplicated by""**_)  3 votes, 5 watchers","closed","type: bug,","spring-projects-issues","2010-08-21T09:03:38Z","2019-01-11T14:09:38Z"
"","12360","Syntax error in Sample code. [SPR-7704]","**[Telkapalli Venkata Seshagiri](https://jira.spring.io/secure/ViewProfile.jspa?name=tvseshagiri)** opened **[SPR-7704](https://jira.spring.io/browse/SPR-7704?redirect=false)** and commented  In 3.0.x documentation, Section 3.2.3 Using the container, in Code snippet assignment operator is missing in following statement.  // use configured instance List userList service.getUsernameList();   --- No further details from [SPR-7704](https://jira.spring.io/browse/SPR-7704?redirect=false)","closed","","spring-projects-issues","2010-11-01T05:31:40Z","2019-01-11T15:30:57Z"
"","12752","Polymorphism for BeanWrapperImpl [SPR-8097]","**[Taylor S. Wicksell](https://jira.spring.io/secure/ViewProfile.jspa?name=taylor.wicksell)** opened **[SPR-8097](https://jira.spring.io/browse/SPR-8097?redirect=false)** and commented  **Problem:** Currently Spring does not seem to support polymorphic binding. By this I mean that if I define a Collection of type List\ objects, we cannot bind to properties on classes more specific than object. The most direct impact of this can be seen in the Web layer when using spring:form tags and trying to bind specialized fields to a parent type on a single path based on some kind of user selection. As an example, ```   ```would fail as that property is not on the type Object, but based on an input from the user we know they would like to provide a specific field which should be mappable to this path in some way.  ---- *Proposed Solution:* One idea we came up with to combat this issue was to modify the type introspection of BeanWrapperImpl (and its referenced classes) to allow for a cast syntax. In this way, our above example would now look like ```  ``` where the cast syntax would override the default instantiation type and allow us to bind specific properties of assignable classes. And of course the cast would be subject to checks for ClassCastException, etc.  --- *Test Case:* For reference, we've attached a simple test case outlining a scenario showcasing this issue. When this test case passes, we'll know we've achieved the feature(s) we are looking for. The only dependencies for this test case are junit and BeanWrapper/BeanWrapperImpl itself (so Spring Core). ```  ---  **Affects:** 3.1 M1  **Attachments:** - [PolymorphOther.java](https://jira.spring.io/secure/attachment/18558/PolymorphOther.java) (_8.02 kB_) - [PolymorphOther.java](https://jira.spring.io/secure/attachment/17791/PolymorphOther.java) (_5.89 kB_) - [PolymorphOther.java](https://jira.spring.io/secure/attachment/17780/PolymorphOther.java) (_5.70 kB_) - [spr8097-patch.txt](https://jira.spring.io/secure/attachment/17792/spr8097-patch.txt) (_5.81 kB_) - [spr8097-patch-3.1.0.M1](https://jira.spring.io/secure/attachment/18030/spr8097-patch-3.1.0.M1) (_5.76 kB_) - [spr8097-patch-3.1.0.M1-revision1.txt](https://jira.spring.io/secure/attachment/18557/spr8097-patch-3.1.0.M1-revision1.txt) (_15.98 kB_)  9 votes, 10 watchers","closed","status: bulk-closed,","spring-projects-issues","2011-03-29T07:29:48Z","2019-01-13T21:43:20Z"
"","12279","SybaseMaxValueIncrementer doesn't work with non-enterprise Sybase db [SPR-7623]","**[Tarald Saxi Stormark](https://jira.spring.io/secure/ViewProfile.jspa?name=tarald)** opened **[SPR-7623](https://jira.spring.io/browse/SPR-7623?redirect=false)** and commented  In SybaseMaxValueIncrementer the code line: stmt.executeUpdate(""insert into "" + getIncrementerName() + "" values()"");  yields SQLException. It should be stmt.executeUpdate(""insert into "" + getIncrementerName() + "" values(DEFAULT)""); instead.  See attached patch. This goes for all versions of SybaseMaxValueIncrementer.   ---  **Affects:** 2.5.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bd22bed10af6d8ae820f61878fb8930f10837746","closed","type: enhancement,","spring-projects-issues","2010-10-07T06:24:51Z","2012-06-19T03:39:49Z"
"","12096","Isnt ContentNegotiationViewResolver just MediaTypeViewResolver? Complete ContentNegotiation feature request [SPR-7438]","**[tanmoy banerjee](https://jira.spring.io/secure/ViewProfile.jspa?name=tanmoy.banerjee)** opened **[SPR-7438](https://jira.spring.io/browse/SPR-7438?redirect=false)** and commented  Hi,  The HTTP provides provisions to provide the best representation of the resource, by one of the 3 ways of content negotiotion (server-driven, agent-driven or transparent). Content negotiotion, however is just not format/mediatype negotiation as there are other aspects of it too, like the language, character set and encoding associated with the resource representation.  In Spring MVC3, the different aspects of content negotiation are done separately:  1. Currently Spring MVC handles language negotiation by its i18n handlers.  2. ContentNegotiationViewResolver only delegates different viewResolvers for different mediatypes.  3. The different header values can be obtained from the annotaion `@RequestHeader` to retrieve the different accept headers.  In this context, when contentNegotiationViewResolver is configured, I feel we should have a single bean which also does the negotiation for language (maybe by wiring the i18n handlers), and reads in the accept-charset and accept-encoding headers to provide the best resource representation.  I feel the current file should be just MediaTypeViewResolver and another file ContentNegotiationViewResolver should be there which will be able to do negotioation for language, media, charset and encoding all in one.  Let me know if this design is feasible for the stack.   ---  **Affects:** 3.0 GA, 3.0.1, 3.0.2  **Reference URL:** http://forum.springsource.org/showthread.php?t=93514","closed","type: enhancement,","spring-projects-issues","2010-08-09T14:49:37Z","2010-08-11T01:05:32Z"
"","12090","ModelAndView and ResponseEntities to work for both MVC old way and REST way [SPR-7432]","**[tanmoy banerjee](https://jira.spring.io/secure/ViewProfile.jspa?name=tanmoy.banerjee)** opened **[SPR-7432](https://jira.spring.io/browse/SPR-7432?redirect=false)** and commented  Hi,  In Spring pet-clinic, the implementation is an MVC application serving a browser client. Hence, ModelANdView with contentNegotiationViewResolver works fine.  From the pet-clinic application:  ``` @RequestMapping(value=""/owners/*/pets/{petId}/visits"", method=RequestMethod.GET) 	public ModelAndView visitsHandler(@PathVariable int petId) { 		ModelAndView mav = new ModelAndView(""visits""); 		mav.addObject(""visits"", this.clinic.loadPet(petId).getVisits()); 		return mav; 	}  ```  I was trying to create a simple application which has a Restful Service provider, with browser and non-browser clients. My sample application ( mvc application - for browser client) - given in the spring forum  ``` @RequestMapping(value = ""products/search"", method = RequestMethod.GET) 	public ModelAndView readAllProducts() { 		List products = productService.findAllProducts(); 		ModelAndView mav = new ModelAndView(); 		mav.addObject(""products"", products); 		mav.setViewName(""products""); 		return mav; 	}  @RequestMapping(value = ""products/new"", method = RequestMethod.POST) 	public String createProduct(@ModelAttribute Product product) { 		 	Product createdProduct = productService.saveOrUpdate(product); 	return ""redirect:/products/search""; 	} ```  Also, when the controller is created for a rest client,by creating similar methods a bit differently, mainly changing the `@ModelAttribute` to `@RequestBody` and the return type of the method to `@ResponseBody` Product from ModelAndView, it works fine.  (mvc restful application - for non-browser client)  ``` @RequestMapping(value = ""products/search"", method = RequestMethod.GET) 	public @ResponseBody 	List getProducts() { 		return productService.findAllProducts(); 	}  @RequestMapping(value = ""products/new"", method = RequestMethod.POST) 	public @ResponseBody 	Product createProduct(@RequestBody Product product) {  		return productService.saveOrUpdate(product); 	} ```  However, when the requirement is like this that the application should have a normal MVC behavior, as well as serve non-browser REST clients, currently there isn't a way out other than duplicating the methods/creating separate URIs though the resource to be delivered is the same.  I feel that this should be possible that when i type in the URI.html in a browser , i get the the JSP rendered HTML; while if I run a REST client (non-browser), it should be able to provide me the json/xml/atom as per the media type requested. Currently this is not easy/intuitive as the MVC is returning ModelAndView, or String view but this is not working out for a REST client for which forcefully using a ModelAndVIew doesn't make sense.  Similarly, for MVC, `@ModelAttribute` is to be used. For REST, where restTemplate POSTs to the URI, `@ModelAttribute` doesnt work and has to be replaced by `@RequestBody`.  ``` @Test 	public void testPostProduct() {  		URI createProductURI = getURI(PRODUCTS_NEW);  		Product product = mockNewProduct();  		HttpEntity entity = new HttpEntity(product);  		Product productReturned = this.restTemplate.postForObject( 				createProductURI, product, Product.class);  		Assert.assertEquals(product, productReturned);  	} ```  Let me know if  1. ModelAndView/ResponseBody - ResponseEntity can be made compatible to be used in either ways  2. Same for `@ModelAttribute` and `@RequestBody`  3. Are there anty architecture concerns/reasons for not providing such an option. Though I understand the two ways are for different purposes, I think the API should not restrict this.  Thanks,  Tanmoy    ---  **Reference URL:** http://forum.springsource.org/showthread.php?t=93358","closed","type: enhancement,","spring-projects-issues","2010-08-06T15:07:22Z","2012-06-19T03:18:55Z"
"","11892","ResponseEntity having body, headers and HttpStatus mixed up in responseEntity.getBody() [SPR-7233]","**[tanmoy banerjee](https://jira.spring.io/secure/ViewProfile.jspa?name=tanmoy.banerjee)** opened **[SPR-7233](https://jira.spring.io/browse/SPR-7233?redirect=false)** and commented  My ProductController method returns `@ResponseBody` ResponseEntity\ which contains custom HttpHeaders  ``` public @ResponseBody ResponseEntity readProductAndException(@PathVariable String productId) {         Product product = new Product(); 	ResponseEntity entity = null; .......... .......... 	HttpHeaders responseHeaders = new HttpHeaders(); 	responseHeaders.add(""ExceptionCause"", ""Some cause""); 	responseHeaders.add(""ExceptionClass"", ""Exception class""); 	entity = new ResponseEntity(product, responseHeaders,HttpStatus.OK); 	return entity; } ```  and produces the Json string as expected (plz. see the forum post for details)  In the RestClient, I was expecting that when I perform getForEntity(), I get back ResponseEntity\ from which I can get back Product product = responseEntity.getBody(). However, first of all,this line of code :  ``` ResponseEntity responseEntity = restTemplate.getForEntity( 				readProductURI, Product.class); ```  gives me the following exception:  ``` Exception in thread ""main"" org.springframework.web.client.ResourceAccessException: I/O error: Unrecognized field ""statusCode"" (Class com.company.sample.restpoc.domain.Product), not marked as ignorable  at [Source: sun.net.www.protocol.http.HttpURLConnection$HttpInputStream@10382a9; line: 1, column: 2]; nested exception is org.codehaus.jackson.map.JsonMappingException: Unrecognized field ""statusCode"" (Class com.company.sample.restpoc.domain.Product), not marked as ignorable  at [Source: sun.net.www.protocol.http.HttpURLConnection$HttpInputStream@10382a9; line: 1, column: 2] 	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:453) ```  Instead, I tried to find out what is being received in the client side and found out that the ResponseEntity.getBody() gives everything, the body, the headers, the HttpStatus when there are separate methods for getting the headers and the HttpStatus  ``` URI readProductURI = new URI( 				""http://localhost:8080/spring-rs-poc-1.0.0/products/view/"" 						+ productId);  		ResponseEntity responseEntity = restTemplate.getForEntity( 				readProductURI, Object.class);  		System.out.println(""Printing responseBody.getBody()""); 		 		Map map = (Map)responseEntity.getBody(); 		for (String key : map.keySet()) { 			System.out.println(""key : "" + key + "", value : ""+map.get(key)); 		} 		System.out.println(""Printing responseEntity.getHeaders()""); 		 		HttpHeaders headers = responseEntity.getHeaders(); 		Set keys = headers.keySet(); 		for (String header : keys) { 			System.out.println(""Header: ""+header); 			List values = headers.get(header); 			for (String value : values) { 				System.out.println(""Header Value: ""+ value); 			} 		}  ```  gives :  ``` Printing responseBody.getBody() key : statusCode, value : OK key : body, value : {price=null, sku=null, name=null, id=null, currency=null} key : headers, value : {ExceptionCause=[No matching resource], ExceptionClass=[com.company.sample.common.exception.BusinessException]}  Printing responseEntity.getHeaders() Header: Server Header Value: Apache-Coyote/1.1 Header: Content-Type Header Value: application/json Header: Transfer-Encoding Header Value: chunked Header: Date Header Value: Mon, 24 May 2010 12:29:24 GMT ```  This is apparently happening, I guess because my `@ResponseBody` is ResponseEntity\ which means when ResponseEntityResponseExtractor is calling the  ``` T body = delegate.extractData(response); ```  the InputStream has the HttpStatus, Body and Headers all mixed up and hence the exception is being thrown. However, the inputStream should have only Product, while the response.getHeaders should have the custom headers and response.getStatusCode() should have the HttpStatus. Similarly, I feel the ResponseEntity.getBody() should give only the body, while the getHeaders() and getStatusCode() should have the headers and status code respectively    ---  **Affects:** 3.0.2  **Reference URL:** http://forum.springsource.org/showthread.php?t=89796  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d0393ea109b6a17905941e5d35be9f48c0ce8eb0","closed","type: task,","spring-projects-issues","2010-05-24T22:18:27Z","2012-06-19T03:42:54Z"
"","17037","MessageHeaderAccessor copyHeaders... tuning [SPR-12431]","**[Tamás Frankó](https://jira.spring.io/secure/ViewProfile.jspa?name=mcleap)** opened **[SPR-12431](https://jira.spring.io/browse/SPR-12431?redirect=false)** and commented  I think there is a much more effective way to copy the headers in `MessageHeaderAccessor`. Usually we use HashMap to copy as new header, but its `get(...)` method is very expensive (because of creating hash for all of keys). I think the `entrySet()` is a better solution:  ```java public void copyHeaders(Map headersToCopy) { 	for (Map.Entry entry : headersToCopy.entrySet()) { 		this.setHeader(entry.getKey(), entry.getValue()); 	} }  public void copyHeadersIfAbsent(Map headersToCopy) { 	for (Map.Entry entry : headersToCopy.entrySet()) { 		this.setHeaderIfAbsent(entry.getKey(), entry.getValue()); 	} } ```  ---  **Issue Links:** - #16961 BeanFactoryAnnotationUtils,qualifiedBeanOfType, Inefficient use of keySet iterator. - #16968 org.springframework.ui.ModelMap.mergeAttributes(Map) makes inefficient use of keySet iterator  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/400738e804170e364df3fcf027613bf82f458423","closed","type: enhancement,","spring-projects-issues","2010-09-21T12:12:40Z","2019-01-11T19:29:09Z"
"","12324","spEL: map entry lookup via placeholder [SPR-7668]","**[Tamas SANDOR](https://jira.spring.io/secure/ViewProfile.jspa?name=tsandor)** opened **[SPR-7668](https://jira.spring.io/browse/SPR-7668?redirect=false)** and commented  I tried to refer to a map value via a placeholder, but it didn't work. Here's my example:  ```xml           ```  It should load the following files if **`ENVIRONMENT=qa1`** is specified:  ``` classpath:conf/environment/global_defaults.properties, classpath:conf/environment/hft_testing.properties, classpath:conf/environment/hft_testing_qa1.properties ```  but simply ignores resolving the archetype by the placeholder. If I hard-code it like this  ```xml  ```  it works, of course.   ---  **Affects:** 3.0.3","closed","in: core,","spring-projects-issues","2010-10-20T07:50:17Z","2019-01-12T16:26:39Z"
"","12052","As a developer, I would like to be able to specify the user/schema when using jdbc:embedded-database [SPR-7394]","**[Søren Boisen](https://jira.spring.io/secure/ViewProfile.jspa?name=sboisen)** opened **[SPR-7394](https://jira.spring.io/browse/SPR-7394?redirect=false)** and commented  In our applications we quite often use SQL queries with unqualified table names (not containing a schema specification).  When writing integration tests of the DAO objects using the jdbc namespace support from Spring 3.0 and an H2 in-memory database, tests of DAO methods that make use of these queries will fail with a message specifying that the table doesn't exist.  Currently we use a declaration similar to the following to initialize the test database:  ```xml                  ```  Ideally I would like to be able to specify the schema/user that should be used when connecting to the database, like so:  ```xml      ...  ```    ---  **Affects:** 3.0.3","closed","type: enhancement,","spring-projects-issues","2010-07-25T23:56:33Z","2015-09-22T16:49:59Z"
"","12677","JMS Namespace support of a parent [SPR-8022]","**[Sébastien Gérard](https://jira.spring.io/secure/ViewProfile.jspa?name=sebge2)** opened **[SPR-8022](https://jira.spring.io/browse/SPR-8022?redirect=false)** and commented  The lister-container from the JMS namespace does not support a parent definition. For instance:  ```                  ```  This feature provides two interesting features: reduce the configuration verbosity; common parts are shared between containers, for instance: a queue and a topic container.  The other advantage is modularity, indeed modules are not aware of deployment aspects (e.g., the connection factory to used, the transaction manager, etc.) and each of them defines its own listeners (also reduces the amount of XML lines). Only the deployment module defines deployment stuff.   ---  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2011-03-04T00:52:29Z","2014-05-26T00:42:33Z"
"","12232","script Groovy, unable to refresh it under Webapps context [SPR-7575]","**[sylvain maucourt](https://jira.spring.io/secure/ViewProfile.jspa?name=sylvek)** opened **[SPR-7575](https://jira.spring.io/browse/SPR-7575?redirect=false)** and commented  the refresh mechanism does not seem to work for groovy scripts with WebApplicationContext. I wrote a simple sample allowing to test the groovy bean refresh.  my rest controller:  `@Controller` `@RequestMapping`(value = { ""/v1/hello"", ""/hello"" }) public class HelloWorldController extends AbstractController {  `@RequestMapping`(value = ""{name}"", method = RequestMethod.GET) public HelloBean show(`@PathVariable`(""name"") final String name) { final HelloBean hello = new HelloBean(); Assert.notNull(name, ""Identifier must be provided."");  final HelloScript helloScript = (HelloScript) getContext().getBean(""hello"");  try { hello.setGroovy(helloScript.getHello()); hello.setName(name); } catch (DeveryflowException e) { LOGGER.error(""booo"", e); } return hello; } }  my applicationContext.xml:    and a simple test with ClassPathXmlApplicationContext. public static void main(final String[] args) throws Exception { ApplicationContext ctx = new ClassPathXmlApplicationContext(""applicationContext .xml"", ""scriptContext.xml""); System.out.println(((HelloScript) ctx.getBean(""hello"")).getHello()); // pause execution while I go off and make changes to the source file... System.in.read(); System.out.println(((HelloScript) ctx.getBean(""hello"")).getHello()); }  For the both, the update of groovy file is detected, for the first sample there is no change during the display, and for the second sample, it's working.  I tried several versions of tomcat and groovy. The problem is still here :-/   ---  **Affects:** 3.0.3  **Reference URL:** http://forum.springsource.org/showthread.php?t=95471  **Attachments:** - [trace.txt](https://jira.spring.io/secure/attachment/17127/trace.txt) (_3.22 kB_)","closed","in: core,","spring-projects-issues","2010-09-20T06:56:45Z","2019-01-12T05:31:35Z"
"","12636","CacheAspectSupport race-condition issue [SPR-7981]","**[Sylvain LAURENT](https://jira.spring.io/secure/ViewProfile.jspa?name=sylvain.laurent)** opened **[SPR-7981](https://jira.spring.io/browse/SPR-7981?redirect=false)** and commented  org.springframework.cache.interceptor.CacheAspectSupport in 3.1M1 has a race-condition bug in this code :  ``` if (cache.containsKey(key)) {      retVal = cache.get(key); } else {      retVal = invocation.call();      cache.put(key, retVal); } ```  It is possible that cache.containsKey(key) returns true but before cache.get(key) is called the cache entry might expire and thus cache.get(key) would return null.  In my opinion, the org.springframework.cache.Cache interface should propose an auto-populating get method like : V get(Object key, Callable invocation) that would ""atomically"" test the presence of the key in the cache and if absent use the Callable to fill it. CacheAspectSupport should of course use this new method to fix the race-condition.  Furthermore, enhanced implementations of this get method could provide different threading policies, like blocking threads if a first is currently invoking the Callable for the same key...   ---  **Affects:** 3.1 M1","closed","in: core,","spring-projects-issues","2011-02-20T13:30:56Z","2019-01-11T16:19:26Z"
"","12626","Cache KeyGenerator.extract() should allow to use the bean identity [SPR-7971]","**[Sylvain LAURENT](https://jira.spring.io/secure/ViewProfile.jspa?name=sylvain.laurent)** opened **[SPR-7971](https://jira.spring.io/browse/SPR-7971?redirect=false)** and commented  The new org.springframework.cache.KeyGenerator\ interface introduced with 3.1M1 does not allow to generate a key that would take the identity of the bean into account.  Imagine that a method of a service is annotated with `@Cacheable` and I deploy 2 instances of the service each with its own configuration. There is no way I can provide a KeyGenerator implementation that generates 2 different keys for the same arguments passed to the 2 different instances of the service.  The signature of the extract method should be augmented with a String that is the id of the target Spring bean in its beanFactory.   ---  **Affects:** 3.1 M1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5c3ceb8ef0b0a400e46616f210be1505aeed7c22  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2011-02-17T14:28:23Z","2012-06-19T03:39:25Z"
"","12119","Make IdToEntityConverter public and document this feature [SPR-7461]","**[Sylvain LAURENT](https://jira.spring.io/secure/ViewProfile.jspa?name=sylvain.laurent)** opened **[SPR-7461](https://jira.spring.io/browse/SPR-7461?redirect=false)** and commented  The MVC support in Roo heavily uses IdToEntityConverter which is actually not in Roo but in core spring. But this class is package protected so that it does not appear in Spring javadocs. Furthermore, it is registered by default as a conversion service, but it's not mentioned anywhere in the documentation.  In my opinion, this is an important feature of spring 3 and deserves to be advertised.   ---  **Affects:** 3.0.3  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2010-08-12T13:59:07Z","2018-12-28T11:51:13Z"
"","12094","Document the usage of @beanName with SpEL [SPR-7436]","**[Sylvain LAURENT](https://jira.spring.io/secure/ViewProfile.jspa?name=sylvain.laurent)** opened **[SPR-7436](https://jira.spring.io/browse/SPR-7436?redirect=false)** and commented  As a follow-up to #11832, please improve chapter 6 of the reference doc to explain that it is now possible to reference beans with the prefix ""@"".  ---  **Affects:** 3.0.3","closed","type: task,","spring-projects-issues","2010-08-07T15:10:18Z","2019-01-11T14:07:32Z"
"","11971","Improve  to use beans [SPR-7312]","**[Sylvain LAURENT](https://jira.spring.io/secure/ViewProfile.jspa?name=sylvain.laurent)** opened **[SPR-7312](https://jira.spring.io/browse/SPR-7312?redirect=false)** and commented  #11832 allowed to reference beans in expressions, which is nice, but it requires a BeanResolver to be setup in the EvaluationContext. Unfortunately org.springframework.web.servlet.tags.EvalTag does not setup such a resolver.  My own purpose is to be able to access request-scoped or session-scoped beans in a JSP with a  tag.  ---  **Affects:** 3.0.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/263fabb0fce0e03f6148beadbbcd9c040143e94c  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2010-06-22T00:30:04Z","2019-01-11T14:20:57Z"
"","12581","Spring Application getting into hung state while refreshing transacted JMS connection  [SPR-7926]","**[sumit goyal](https://jira.spring.io/secure/ViewProfile.jspa?name=sgoyal)** opened **[SPR-7926](https://jira.spring.io/browse/SPR-7926?redirect=false)** and commented  Greetings, We have a spring app, which listens to messages from a weblogic JMS. we are using weblogic client library 10.0.1, and Spring 3.0.3-Release. We use transaction'ed JMS sessions.  It could possibly be a dup of https://jira.springframework.org/browse/SPR-7366  Can someone pls have a look at the stack trace of JMS Listener threads and comment? Your help will be much appreciated.  Also adding my spring configuration below:           	     		     	     	     	     		     	                    	     	     	     	     	                    	     		     	     	     		${MNSClient.receive.jms.user}     	     	     		${MNSClient.receive.jms.password}     	                    	     		     	     	     		${MNSClient.receive.jms.connectionFactoryName}     	                         	     		     			${MNSClient.receive.jms.initialFactoryName}     			${MNSClient.receive.jms.providerUrl}     		     	               	     		     	     	     		${MNSClient.receive.jms.queueName}     	       ---  **Affects:** 3.0.3  **Attachments:** - [threadDump.txt](https://jira.spring.io/secure/attachment/17558/threadDump.txt) (_161.63 kB_)  **Issue Links:** - #12024 DefaultMessageListenerContainer transacted session race condition if no messages for a while when using shared/cached sessions (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2011-01-31T13:08:39Z","2019-01-12T16:49:11Z"
"","12990","Lazy initialization error with LOG4J turned on - failed to lazily initialize a collection of role: ...no session or session was closed [SPR-8342]","**[Sujith Radhakrishnan](https://jira.spring.io/secure/ViewProfile.jspa?name=sujithrs)** opened **[SPR-8342](https://jira.spring.io/browse/SPR-8342?redirect=false)** and commented  With log4J set to DEBUG ALL, I get the following error when a client access the server via amf remote-messaging.  INFO: [ERROR,LazyInitializationException] failed to lazily initialize a collection of role: ...., no session or session was closed org.hibernate.LazyInitializationException: failed to lazily initialize a collection of role: com.switchpt.tbm.entity.Projects.tbmJobDescs, no session or session was closed at org.hibernate.collection.AbstractPersistentCollection.throwLazyInitializationException(AbstractPersistentCollection.java:383) at org.hibernate.collection.AbstractPersistentCollection.throwLazyInitializationExceptionIfNotConnected(AbstractPersistentCollection.java:375) at org.hibernate.collection.AbstractPersistentCollection.readSize(AbstractPersistentCollection.java:122) at org.hibernate.collection.PersistentSet.size(PersistentSet.java:162) at org.springframework.core.style.DefaultValueStyler.style(DefaultValueStyler.java:104) at org.springframework.core.style.DefaultValueStyler.style(DefaultValueStyler.java:72)  It works fine if i disable the log.  Looks like the issue is caused by line# 159 in GenericConversionService.java: 156         public Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) { 157                 assertNotNull(sourceType, targetType); 158                 if (logger.isDebugEnabled()) { 159                         logger.debug(""Converting value "" + StylerUtils.style(source) + "" of "" + sourceType + "" to "" + targetType); 160                 } 161                 if (sourceType == TypeDescriptor.NULL) {  The log is trying to deserialize the data causing the issue...  ---  **Affects:** 3.0.5  **Issue Links:** - #12765 Test Spring 3.1 compatibility with Hibernate 3.6.x  2 votes, 3 watchers","closed","in: core,","spring-projects-issues","2010-11-19T15:38:00Z","2019-01-12T16:25:29Z"
"","12357","Spring 3.0.5 is Incompitible with Hibernate 3.6.0.Final [SPR-7701]","**[Sudhir nimavat](https://jira.spring.io/secure/ViewProfile.jspa?name=sudhir)** opened **[SPR-7701](https://jira.spring.io/browse/SPR-7701?redirect=false)** and commented  I use Spring 3.0.5-Release, hibernate core 3.6.0.Final, hibernate-entitymanager 3.6.0.Final  When application (spring tests using `@ContextConfiguration`) tries to load applicationContext.xml. I get following exception. It works with lower versions (hibernate 3.3.2 GA)  ``` java.lang.IllegalStateException: Failed to load ApplicationContext 	at org.springframework.test.context.TestContext.getApplicationContext(TestContext.java:308) 	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:109) 	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:75) 	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:321) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:220) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:301) 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:303) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:240) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:49) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184) 	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) 	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:236) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:180) 	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:46) 	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197) Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'complaintDao': Injection of persistence dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in class path resource [applicationContext-dao.xml]: Invocation of init method failed; nested exception is java.lang.IncompatibleClassChangeError: Implementing class 	at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.postProcessPropertyValues(PersistenceAnnotationBeanPostProcessor.java:341) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1074) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:517) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:291) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:288) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:580) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:895) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:425) 	at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:84) 	at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:1) 	at org.springframework.test.context.TestContext.loadApplicationContext(TestContext.java:280) 	at org.springframework.test.context.TestContext.getApplicationContext(TestContext.java:304) 	... 24 more Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in class path resource [applicationContext-dao.xml]: Invocation of init method failed; nested exception is java.lang.IncompatibleClassChangeError: Implementing class 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1420) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:291) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:288) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190) 	at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.findDefaultEntityManagerFactory(PersistenceAnnotationBeanPostProcessor.java:529) 	at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.findEntityManagerFactory(PersistenceAnnotationBeanPostProcessor.java:495) 	at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor$PersistenceElement.resolveEntityManager(PersistenceAnnotationBeanPostProcessor.java:656) 	at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor$PersistenceElement.getResourceToInject(PersistenceAnnotationBeanPostProcessor.java:629) 	at org.springframework.beans.factory.annotation.InjectionMetadata$InjectedElement.inject(InjectionMetadata.java:156) 	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:84) 	at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.postProcessPropertyValues(PersistenceAnnotationBeanPostProcessor.java:338) 	... 38 more Caused by: java.lang.IncompatibleClassChangeError: Implementing class 	at java.lang.ClassLoader.defineClass1(Native Method) 	at java.lang.ClassLoader.defineClassCond(ClassLoader.java:632) 	at java.lang.ClassLoader.defineClass(ClassLoader.java:616) 	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:141) 	at java.net.URLClassLoader.defineClass(URLClassLoader.java:283) 	at java.net.URLClassLoader.access$000(URLClassLoader.java:58) 	at java.net.URLClassLoader$1.run(URLClassLoader.java:197) 	at java.security.AccessController.doPrivileged(Native Method) 	at java.net.URLClassLoader.findClass(URLClassLoader.java:190) 	at java.lang.ClassLoader.loadClass(ClassLoader.java:307) 	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301) 	at java.lang.ClassLoader.loadClass(ClassLoader.java:248) 	at org.hibernate.ejb.Ejb3Configuration.(Ejb3Configuration.java:129) 	at org.hibernate.ejb.HibernatePersistence.createEntityManagerFactory(HibernatePersistence.java:55) 	at javax.persistence.Persistence.createEntityManagerFactory(Persistence.java:83) 	at org.springframework.orm.jpa.LocalEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalEntityManagerFactoryBean.java:92) 	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:308) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1477) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1417) 	... 51 more ```  ---  **Reference URL:** http://forum.springsource.org/showthread.php?t=97432  **Issue Links:** - #12765 Test Spring 3.1 compatibility with Hibernate 3.6.x","closed","","spring-projects-issues","2010-10-30T07:29:12Z","2019-01-11T15:31:05Z"
"","12536","Better abstraction for transactional configuration in DMLC [SPR-7879]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-7879](https://jira.spring.io/browse/SPR-7879?redirect=false)** and commented  We experienced a threads leak using Spring's DMLC on JBoss 4.2.3. We configured our DMLC as follows:  ```      ```  After some investigations and the help of the support we figured out that the following configuration helped fixing our threads leak issue  ```      ```  Our use case is that we have externalized basically the following:  * The connection factory and destination resolver (in order to be able to connect to another 3rd party JMS broker) * The JmsTransactionManager, whether we want to enable XA support or not  In the first configuration, it's obvious it is easy to share the configuration of this listener container, just import a strategy that defines the 3 beans above and you're good (we have some kind of ""profile"" capability using naming conventions). The problem is that the second configuration is the only way to get a proper usage with JBoss (connection/threads leak).  I don't know how easy it would be but the JmsTrasanctionManager that I use is the following  ```        ```  Couldn't we imagine a solution where the DMLC is smart enough to look at the transaction manager type and flip to the ""acknowledge=transacted"" mode? I understand the JMS API is related to the issue but reading the doc, it's hard to understand what would be the impact of each option.  ---  **Affects:** 3.0.5  **Issue Links:** - #13838 Improve Javadocs for DMLC Regarding JmsTransactionManager (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2011-01-13T01:26:37Z","2019-01-11T15:22:32Z"
"","12286","Major performance slowdown in AnnotationUtils.findAnnotation [SPR-7630]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-7630](https://jira.spring.io/browse/SPR-7630?redirect=false)** and commented  While migrating our app from 2.5.7 to 3.0.4 we have noticed a major slowdown in the application context's startup.  Our application is using Spring Batch and has 22 batches. I have ran a profiling session and noticed an _abusive_ call to `java.lang.Class.getMethod(String, Class[])`.  The culprit seems to be a change in `AnnotationUtils.findAnnotation(Method,Class)`.  Attached the back trace calls for both Spring 2.5 and 3.0.4. The only thing that changed between the profiling sessions is the Spring version and the profiler only starts the (same) application context.  I also have the yourkit snapshots if you are interested to run a snapshot comparison.  This is obviously blocking us to upgrade. Let me know if there anything I can do to help.  ---  **Affects:** 3.0.4  **Reference URL:** http://forum.springsource.org/showthread.php?p=323388#post323388  **Attachments:** - [spring25-batch-register-step-listeners-call-stack.png](https://jira.spring.io/secure/attachment/17185/spring25-batch-register-step-listeners-call-stack.png) (_108.12 kB_) - [spring25-getMethod.png](https://jira.spring.io/secure/attachment/17178/spring25-getMethod.png) (_19.30 kB_) - [spring25-register-item-listeners-call-stack.png](https://jira.spring.io/secure/attachment/17186/spring25-register-item-listeners-call-stack.png) (_91.53 kB_) - [spring-3.0.4.xls](https://jira.spring.io/secure/attachment/17187/spring-3.0.4.xls) (_594.00 kB_) - [spring-3.0.5-SNAP-getMethod.PNG](https://jira.spring.io/secure/attachment/17198/spring-3.0.5-SNAP-getMethod.PNG) (_16.06 kB_) - [spring-3.0.5-SNAP-register-item-listeners-call-stack.png](https://jira.spring.io/secure/attachment/17197/spring-3.0.5-SNAP-register-item-listeners-call-stack.png) (_46.23 kB_) - [spring3-getMethod.png](https://jira.spring.io/secure/attachment/17177/spring3-getMethod.png) (_59.53 kB_) - [spring3-register-item-listeners-call-stack.png](https://jira.spring.io/secure/attachment/17183/spring3-register-item-listeners-call-stack.png) (_67.84 kB_) - [spring3-register-step-listeners-call-stack.png](https://jira.spring.io/secure/attachment/17184/spring3-register-step-listeners-call-stack.png) (_66.47 kB_)  **Issue Links:** - #16501 ReflectionUtils slow down application startup on WebSphere - #21216 Comprehensively cache annotated methods for interfaces and superclasses  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3c067e5db6309964d33b14924afbba039ad7e62b  1 votes, 5 watchers","closed","in: core,","spring-projects-issues","2010-10-08T01:04:42Z","2019-01-11T14:31:33Z"
"","12272","ApplicationEventMulticaster does not support @Order [SPR-7616]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-7616](https://jira.spring.io/browse/SPR-7616?redirect=false)** and commented  The implementation of ApplicationEventMulticaster does not support the `@Order` annotation. It basically delegates all the ordering to OrderComparator which supports only the Ordered interface.  This is misleading and maybe a recurrent issue with these two ways to declare an order for a component. The javadoc of `@Order` and Ordered are good enough but I guess it's more an issue of knowing when `@Order` would work and when it will not.    ---  **Affects:** 3.0.4","closed","type: enhancement,","spring-projects-issues","2010-10-04T05:42:16Z","2012-05-26T05:14:47Z"
"","12086","Reason to break PropertiesFactoryBean contract from 2.5 to 3.0 [SPR-7428]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-7428](https://jira.spring.io/browse/SPR-7428?redirect=false)** and commented  I am wondering what the rationale would be to break PropertiesFactoryBean contract in 3.0  The protected method createInstance is now removed and since the class has only final fields, the class could just as be final as well. If that's what you intended, please make the class final but if you didn't, providing a backward compat way would be much appreciated.   ---  **Affects:** 3.0.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b054ca4a48f579f9fec768b06c97cf4def85b595","closed","type: enhancement,","spring-projects-issues","2010-08-06T08:28:54Z","2012-06-19T03:44:05Z"
"","12853","Add ability to lookup JNDI entry in SystemPropertyUtils [SPR-8219]","**[Stéphan Lascar](https://jira.spring.io/secure/ViewProfile.jspa?name=stephan.lascar)** opened **[SPR-8219](https://jira.spring.io/browse/SPR-8219?redirect=false)** and commented  Currently, there is support for ""System"" properties only, but in a Java EE environment it is often necessary to grab such variables from JNDI. The main idea is to use jndi variables like property variable even inside bean (exemple: ${conf.path} inside a bean where conf.path is a jndi variable).  All the necessary to do this is in SystemPropertyUtils.class. It could be nice to check JNDI variable before the system properties. If the JNDI variable is not set, SystemPropertyUtils will try system properties.    ---  **Affects:** 3.0.5  **Attachments:** - [SystemPropertyUtil.java](https://jira.spring.io/secure/attachment/17999/SystemPropertyUtil.java) (_643 bytes_)","closed","type: enhancement,","spring-projects-issues","2011-04-06T06:55:43Z","2011-04-06T17:32:17Z"
"","12612","Add Tomcat 7.0 to the JIRA ticket platform dropdowns [SPR-7957]","**[Stevo Slavić](https://jira.spring.io/secure/ViewProfile.jspa?name=sslavic)** opened **[SPR-7957](https://jira.spring.io/browse/SPR-7957?redirect=false)** and commented   ---  **Affects:** 3.1 M1","closed","status: invalid,","spring-projects-issues","2011-02-11T02:46:09Z","2019-01-12T05:31:02Z"
"","12610","EhCacheCacheManager throws assertion error for ehcache configuration with only default cache configured [SPR-7955]","**[Stevo Slavić](https://jira.spring.io/secure/ViewProfile.jspa?name=sslavic)** opened **[SPR-7955](https://jira.spring.io/browse/SPR-7955?redirect=false)** and commented  Using new spring 3.1 `@Cacheable` support, and EhCacheCacheManager I get an exception for a valid ehcache configuration - one with only default cache configured:  ```         ```  Assertion error is thrown from AbstractCacheManager.afterPropertiesSet method at line 46: ""Assert.notEmpty(cacheSet);""   ---  **Affects:** 3.1 M1  **Backported to:** [3.1.4](https://github.com/spring-projects/spring-framework/milestone/83?closed=1)  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2011-02-11T02:24:05Z","2015-09-24T09:07:44Z"
"","12513","Application event listeners not removed from listener registry on listener destroy [SPR-7856]","**[Stevo Slavić](https://jira.spring.io/secure/ViewProfile.jspa?name=sslavic)** opened **[SPR-7856](https://jira.spring.io/browse/SPR-7856?redirect=false)** and commented  See Spring Forum Reference, for more details and app that reproduces the issue.  ---  **Affects:** 3.0.5  **Reference URL:** http://forum.springsource.org/showthread.php?t=97899  **Attachments:** - [SPR-7856.patch](https://jira.spring.io/secure/attachment/18292/SPR-7856.patch) (_2.97 kB_) - [SPR-7856-2.patch](https://jira.spring.io/secure/attachment/18293/SPR-7856-2.patch) (_3.50 kB_)  **Issue Links:** - #19349 Inner bean behind BeanFactoryPostProcessor should be able to receive application events  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0fe49629c0ab60cc2a12c767848fec84d1049a90  10 votes, 6 watchers","closed","has: votes-jira,","spring-projects-issues","2011-01-03T06:46:25Z","2019-01-11T15:15:18Z"
"","12428","Change logging level to info in PropertiesLoaderSupport when logging message that resource is not found and ignoreResourceNotFound is true [SPR-7772]","**[Stevo Slavić](https://jira.spring.io/secure/ViewProfile.jspa?name=sslavic)** opened **[SPR-7772](https://jira.spring.io/browse/SPR-7772?redirect=false)** and commented  Please change logging level to info in PropertiesLoaderSupport when logging message that resource is not found and ignoreResourceNotFound is set to true. By default ignoreResourceNotFound is set to false and developer has to explicitly set it to true - thus being aware of the behavior and consequences. This message is currently logged at warning logging level which IMO is too much, creates unnecessary noise, and makes sys admins nervous.  ---  **Affects:** 3.0.5  **Reference URL:** http://forum.springsource.org/showthread.php?t=97681  **Attachments:** - [SPR-7772.patch](https://jira.spring.io/secure/attachment/17526/SPR-7772.patch) (_1.20 kB_)  **Issue Links:** - #21485 Improve logging for development (DEBUG vs TRACE) (_**""duplicates""**_)  6 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2010-11-30T09:02:35Z","2019-01-11T15:32:05Z"
"","12230","Publish updated spring-mvc.xsd with resources element definition [SPR-7573]","**[Stevo Slavić](https://jira.spring.io/secure/ViewProfile.jspa?name=sslavic)** opened **[SPR-7573](https://jira.spring.io/browse/SPR-7573?redirect=false)** and commented  Through #11776 support for mvc:resources has been added in Spring 3.0.4. Currently published neither [spring-mvc.xsd](http://www.springframework.org/schema/mvc/spring-mvc.xsd) nor [spring-mvc-3.0.xsd](http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd) mvc namespace schemas have this element. With spring-webmvc:3.0.4 as dependency there is no problem in runtime but during development this causes XML validation to fail.  Please publish updated spring-mvc.xsd and if agreed spring-mvc-3.0.4.xsd too.  ---  **Affects:** 3.0.4  **Reference URL:** http://forum.springsource.org/showthread.php?t=95446  **Issue Links:** - #12212 Publish spring-mvc-3.0.xsd (_**""duplicates""**_)","closed","type: task,","spring-projects-issues","2010-09-20T03:04:06Z","2019-01-11T15:05:21Z"
"","12596","BufferedImageView [SPR-7941]","**[Steven Goossens](https://jira.spring.io/secure/ViewProfile.jspa?name=steven-goossens)** opened **[SPR-7941](https://jira.spring.io/browse/SPR-7941?redirect=false)** and commented  There might be a need for a BufferedImageView when using the ContentNegotiatingViewResolver. The use of BufferedImageHttpMessageConverter in combination with `@RequestBody` might be an alternative, but this does not allow for content negotiation based on the extension in the request (e.g. *.jpeg, *.bmp, ..).  I attached an implementation inspired by the existing BufferedImageHttpMessageConverter and the existing View implementations.  An configuration example:  ``` 			                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 				                   ```  This configuration example shows that for each supported content type a separated BufferedImageView instance is required. I had hoped to create an implementation that could support multiple content types (e.g. ""image/jpeg,image/bmp,image/png"" or even ""image/*""), but unless I've missed something this didn't seem to work.  This submit is the result of some of my experiments when trying to learn about REST support in Spring MVC (I'm new to Spring). Among others I was trying to create a Captcha service. So I hope I didn't miss anything which is obvious to the seasoned Spring user.  P.S.: One thing that bothered me slightly about Spring MVC are the differences between (or coexistence of) HttpMessageConverters and Views. A single concept seems more desirable, then again, this might be impossible.   ---  **Affects:** 3.0.5  **Attachments:** - [BufferedImageView.java](https://jira.spring.io/secure/attachment/17588/BufferedImageView.java) (_5.99 kB_)","closed","type: enhancement,","spring-projects-issues","2011-02-06T04:35:08Z","2018-12-28T11:54:13Z"
"","11943","Spring aspects depends on javax.persistence/persistence-api 1.0. Conflicts with ROO including  hibernate-jpa-2.0-api [SPR-7284]","**[Steve Mosley](https://jira.spring.io/secure/ViewProfile.jspa?name=smozely)** opened **[SPR-7284](https://jira.spring.io/browse/SPR-7284?redirect=false)** and commented  I tried updating a ROO project to use spring 3.0.3.BUILD-SNAPSHOT to prove a fix in the 3.0.3 stuff.  What I found thou was an exception .... java.lang.NoSuchMethodError: javax.persistence.spi.PersistenceUnitInfo.getValidationMode()Ljavax/persistence/ValidationMode  Which seemed to be because spring aspects was including (groupid/artifactid/version)  javax.persistence/persistence-api/1.0 and ROO includes org.hibernate.javax.persistence/hibernate-jpa-2.0-api/1.0.0.Final  So putting an exclude on spring aspects for the  javax.persistence/persistence-api/1.0 fixed the issue for me.  But I guess I would have expected it to be an optional dependency on spring-aspects. Which is why I've raised it as an issue here  Steve  ---  **Affects:** 3.0.3  **Issue Links:** - #11485 AnnotationDrivenStaticEntityMockingControl in spring-aspects module require javax.persistence.Entity on compiler classpath","closed","in: core,","spring-projects-issues","2010-06-14T09:44:07Z","2019-01-11T14:11:27Z"
"","11910","Tiles 2.2.1 EL AttributeEvaluator not being setup correctly. EL doesn't work in Tiles definitions [SPR-7251]","**[Steve Mosley](https://jira.spring.io/secure/ViewProfile.jspa?name=smozely)** opened **[SPR-7251](https://jira.spring.io/browse/SPR-7251?redirect=false)** and commented  I'm trying to use EL in my tiles configuration. But the end result is after making sure the correct classes (JSP 2.1 and tiles-el) were on the classpath for Spring to attempt to setup an ELAttributeFactory for tiles the EL stuff isn't working. I can see it is still using the DirectAttributeEvaluator  To me it seems like the setup in  org.springframework.web.servlet.view.tiles2.TilesConfigurer via the TilesElActivator is only calling setAttributeEvaluatorFactory on the BasicTilesContainer. But it looks like it needs to be called at least on the BasicRendererFactory as well ... and probably on all the classes that implement AttributeEvaluatorFactoryAware.... all of which are setup through the BasicTilesContainerFactory  What I think may fix it in TilesConfigurer$SpringTilesContainerFactory override the BasicTilesContainerFactory#createAttributeEvaluatorFactory method to create the ELAttributeEvaluator earlier in the process ... and just remove the TilesELActivator stuff ... but the comments in the code seem to indicate that it was a conscious decision not to set it up that way.  - Steve    ---  **Affects:** 3.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/65655b949f2529e56ad979b1a75ab8264a5860a9","closed","type: bug,","spring-projects-issues","2010-06-01T16:02:12Z","2012-06-19T03:43:29Z"
"","12278","PropertyOverrideConfigurer turns 'ref' properties into 'value' properties [SPR-7622]","**[Stephen Crawley](https://jira.spring.io/secure/ViewProfile.jspa?name=crawley)** opened **[SPR-7622](https://jira.spring.io/browse/SPR-7622?redirect=false)** and commented  When you use the PropertyOverrideConfigurer to override an existing property that was declared as bean reference-valued, the property turns into a string-valued property.  This means that I cannot override a bean reference with another (named) bean reference.  I'm currently using an extended / hacked version of PropertyOverrideConfigurer that deals with this by setting the property value as follows:      PropertyValue existing = bd.getPropertyValues().getPropertyValue(property);     if (existing != null && existing.getValue() instanceof RuntimeBeanReference) {         bd.getPropertyValues().addPropertyValue(property,                  new RuntimeBeanReference(value));     } else {         bd.getPropertyValues().addPropertyValue(property, value);     }  In theory, this change could break existing wiring files, but it is hard to conceive of a case where someone would want to turn a 'ref' property into a 'value' property via the overrides.  As an alternative to my proposed solution, you could take the view that this is simply not supported, and change PropertyOverrideConfigurer to throw an exception if someone tries to override a 'ref' property.   ---  **Affects:** 3.0.3  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2010-10-05T19:18:29Z","2015-09-22T17:34:39Z"
"","12455","form:errors tag: include object errors in the documentation [SPR-7799]","**[Stephen Brandwood](https://jira.spring.io/secure/ViewProfile.jspa?name=steveb)** opened **[SPR-7799](https://jira.spring.io/browse/SPR-7799?redirect=false)** and commented  The documentation for the form:errors tag includes displaying of field errors by specifying a path and displaying of all errors with path=""*"", but it does not mention how to display object errors. The Javadocs do mention it, but it'd be nice to include it in the main docs for completeness sake and to allow developers to get a handle of the tag from the docs alone.  Ref: http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/htmlsingle/spring-framework-reference.html#view-jsp-formtaglib-errorstag   ---  **Affects:** 3.0.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fe0ffec8b93305a78274e3fc9f78edc584187141","closed","type: enhancement,","spring-projects-issues","2010-12-08T01:26:08Z","2012-06-19T03:39:25Z"
"","12620","Jaxb2Marshaller: add parameter for formatted output to oxm namespace [SPR-7965]","**[Stephan Vollmer](https://jira.spring.io/secure/ViewProfile.jspa?name=svollmer)** opened **[SPR-7965](https://jira.spring.io/browse/SPR-7965?redirect=false)** and commented  Currently, it is not possible to enable formatted output when the `oxm:jaxb2-marshaller` element is used. To set the property `javax.xml.bind.Marshaller.JAXB_FORMATTED_OUTPUT`, the marshaller needs to be declared as a normal bean. Setting the property requires quite a lot of XML code.  Compare these two examples:  ```xml                            org.example.XmlClass                                                                                                                 true                                      ```  I believe that it is quite a common requirement to enable formatted XML output and many users would benefit from it. Therefore, I suggest this improvement.  Cheers, Stephan   ---  **Affects:** 3.0.5  4 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2011-02-16T02:20:49Z","2018-12-28T11:44:02Z"
"","12531","Doc: gzip support in RestTemplate [SPR-7874]","**[Stephan Oudmaijer](https://jira.spring.io/secure/ViewProfile.jspa?name=soudmaijer)** opened **[SPR-7874](https://jira.spring.io/browse/SPR-7874?redirect=false)** and commented  The org.springframework.web.client.RestTemplate does not support gzip encoding. Please add an option to add headers to the request or provide built-in support for gzip encoding.  Now I have added a hack in my own GzipRestTemplate version:  ``` public class GzipRestTemplate extends RestTemplate {     @Override     protected  T doExecute(URI url, HttpMethod method, RequestCallback requestCallback, ResponseExtractor responseExtractor) throws RestClientException {         Assert.notNull(url, ""'url' must not be null"");         Assert.notNull(method, ""'method' must not be null"");         ClientHttpResponse response = null;         try {             ClientHttpRequest request = createRequest(url, method);             if( request.getHeaders() != null ) {                 request.getHeaders().add(""Accept-Encoding"", ""gzip,deflate""); //","closed","type: enhancement,","spring-projects-issues","2011-01-12T02:18:46Z","2013-10-28T08:15:04Z"
"","12735","javaconf + @Autowired + @PostConstruct + deep context import bug [SPR-8080]","**[Stepan Koltsov](https://jira.spring.io/secure/ViewProfile.jspa?name=yozh)** opened **[SPR-8080](https://jira.spring.io/browse/SPR-8080?redirect=false)** and commented  ``` @Configuration @Import(Conf2.class) public class Conf1 { }  @Configuration @Import(Conf3.class) public class Conf2 {      @PostConstruct     public void initializeSomething() {         System.out.println(""got ya"");         deflater();         deflater();         deflater();     }      @Bean     public Deflater deflater() {         System.out.println(""new deflater"");         return new Deflater();     }  }  @Configuration public class Conf3 {      @Autowired     private Deflater deflater;  }  new AnnotationConfigApplicationContext(Conf1.class); ```  Code prints:  ``` got ya new deflater new deflater new deflater new deflater ```  Expecting:  ``` got ya new deflater ```  It means that autoproxy does not work in this scenario: deflater() invocation is not cached.  ---  **Affects:** 3.1 M1  **Attachments:** - [mylyn-context.zip](https://jira.spring.io/secure/attachment/18205/mylyn-context.zip) (_392.10 kB_)  **Issue Links:** - #15140 LazyInitTargetSourceCreator  does not work in Java-based configuration  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8c9274e01743a87d7fb8519f7772c1b1677ecbe0, https://github.com/spring-projects/spring-framework/commit/224cf11fcbf4ca40776176bd80f0c64c7b534ee0, https://github.com/spring-projects/spring-framework/commit/2afeb08e3c387715374c81a82074bae4235b5082","closed","type: bug,","spring-projects-issues","2011-03-23T13:39:14Z","2019-01-11T12:41:14Z"
"","12634","@ComponentScan does not work when referenced from XML config [SPR-7979]","**[Stepan Koltsov](https://jira.spring.io/secure/ViewProfile.jspa?name=yozh)** opened **[SPR-7979](https://jira.spring.io/browse/SPR-7979?redirect=false)** and commented  Have simple configuration:  public abstract class Aaaaa { }  public class Bbbbb extends Aaaaa { }  `@Configuration` `@ComponentScan`( basePackages=""com.mycompany"", useDefaultFilters=false, includeFilters={ `@ComponentScan`.Filter(type=FilterType.ASSIGNABLE_TYPE, value=Aaaaa.class) } )public class Conf {      @Autowired     private Bbbbb bbbbb;  }  when loaded with  new AnnotationConfigApplicationContext(Conf.class)  works fine, however, when loaded with XML config that references Conf.class:  \ \ \  new ClassPathXmlApplicationContext(""classpath:com/mycompany/conf.xml"");  it fails with exception: cannot autowire Conf.bbbbb field. Full stack trace: https://gist.github.com/835493 .  ---  **Affects:** 3.1 M1  **Attachments:** - [mylyn-context.zip](https://jira.spring.io/secure/attachment/17998/mylyn-context.zip) (_236.68 kB_)  **Issue Links:** - #13361 `@ComponentScan`(includeFilters=`@Filter`(...)) fails when `@Import`'ed (_**""duplicates""**_) - #13670 `@ComponentScan` with includeFilters on `@Import-ed` context does not work - #13738 ClassPathBeanDefinitionScanner vs ClassPathBeanDefinitionScanner: difference in behavior when dealing with `@ComponentScan` excludeFilters  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d9f7fdd120409fff4491561215e5b2dda74e2b02  1 votes, 0 watchers","closed","in: core,","spring-projects-issues","2011-02-19T15:22:38Z","2019-01-13T07:11:03Z"
"","12452","@Bean that returns another @Bean does not work [SPR-7796]","**[Stepan Koltsov](https://jira.spring.io/secure/ViewProfile.jspa?name=yozh)** opened **[SPR-7796](https://jira.spring.io/browse/SPR-7796?redirect=false)** and commented  Code:  ``` public class Junk { }  @ContextConfiguration public class Conf {      @Bean     public Junk junk1() {         return new Junk();     }      @Bean     public Junk junk2() {         return junk1();     }  }  public class Main {      public static void main(String[] args) {         AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(Conf.class);         Junk junk1 = (Junk) context.getBean(""junk1"");         Junk junk2 = (Junk) context.getBean(""junk2"");         System.out.println(junk1 == junk2);     } } ```  prints false (means junk1 and junk2 are different objects, and junk1 is called twice).  I expect both ""junk1"" and ""junk2"" to be the same object.   ---  **Affects:** 3.0.5","closed","in: core,","spring-projects-issues","2010-12-06T17:31:12Z","2019-01-12T05:31:15Z"
"","12426","@Import + @Autowired + cyclic dependencies do not work together [SPR-7770]","**[Stepan Koltsov](https://jira.spring.io/secure/ViewProfile.jspa?name=yozh)** opened **[SPR-7770](https://jira.spring.io/browse/SPR-7770?redirect=false)** and commented  Classes:  ``` public class B {     @Autowired     private C c;      public C getC() {         return c;     } }  public class C {     @Autowired     private B b;      @PostConstruct     public void init() {         System.out.println(b.getC().toString());     } }  @Configuration @Import(ImportedConfiguration.class) public class DumbConfiguration {      @Bean     public C c() {         return new C();     }  }  @Configuration public class ImportedConfiguration {      @Bean     public B b() {         return new B();     }  }  new AnnotationConfigApplicationContext(DumbConfiguration.class); ```  Causes NullPointerException in C.init(), because B.c is not wired.   ---  **Affects:** 3.0.5  **Attachments:** - [SPR-7770.zip](https://jira.spring.io/secure/attachment/19441/SPR-7770.zip) (_6.11 kB_)  1 votes, 3 watchers","closed","in: core,","spring-projects-issues","2010-11-29T04:09:35Z","2019-01-12T16:26:31Z"
"","12425","SpringJUnit4ClassRunner is not compatible with java context configuration [SPR-7769]","**[Stepan Koltsov](https://jira.spring.io/secure/ViewProfile.jspa?name=yozh)** opened **[SPR-7769](https://jira.spring.io/browse/SPR-7769?redirect=false)** and commented  have test:  ``` @RunWith(SpringJUnit4ClassRunner.class) @Import(SomeTestContext.class) public class SomeTest {  .... } ```  get exception:  ``` Caused by: java.lang.IllegalArgumentException: Can not load an ApplicationContext with a NULL 'contextLoader'. Consider annotating your test class with @ContextConfiguration. 	at org.springframework.util.Assert.notNull(Assert.java:112) 	at org.springframework.test.context.TestContext.loadApplicationContext(TestContext.java:276) 	at org.springframework.test.context.TestContext.getApplicationContext(TestContext.java:304) 	... 24 more ```  ---  **Affects:** 3.0.2  **Issue Links:** - #10852 Provide TestContext support for `@Configuration` classes (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2010-11-28T11:40:27Z","2019-01-13T07:12:11Z"
"","12666","MVC binding fails silently for boolean fields with two accessors [SPR-8011]","**[Stefan Schmidt](https://jira.spring.io/secure/ViewProfile.jspa?name=sschmidt)** opened **[SPR-8011](https://jira.spring.io/browse/SPR-8011?redirect=false)** and commented  MVC binding does not kick in for JavaBeans which have a boolean field with two accessors (boolean isFoo() and Boolean getFoo()).  The issue is with boolean fields not being bound if they have two accessors. For example:  private Boolean twoAccessors;  public Boolean getTwoAccessors() { return twoAccessors; }  public boolean isTwoAccessors() { if (twoAccessors == null) return false; return twoAccessors; }  Note the return types of the accessors are mixed boxed primitive and primitive. This combination will silently not bind (no exception thrown), whereas all other combinations will work.   ---  **Affects:** 3.0.5  **Attachments:** - [spr8011.zip](https://jira.spring.io/secure/attachment/19425/spr8011.zip) (_110.61 kB_)","closed","status: declined,","spring-projects-issues","2011-03-02T01:21:12Z","2019-01-12T16:26:02Z"
"","12378","@RequestMapping should support alternative between a header and a url extension [SPR-7722]","**[Stefan Schmidt](https://jira.spring.io/secure/ViewProfile.jspa?name=sschmidt)** opened **[SPR-7722](https://jira.spring.io/browse/SPR-7722?redirect=false)** and commented  It would be nice if we can support request mappings in MVC controllers which kicks in if either a header is present (ie headers = ""Accept=application/json"") or a URL extension is used (ie /owners/1.json). While this scenario is currently possible with the ContentNegotiatingViewResolver it is not possible to configure the same effect through `@RequestMapping` in conjunction with `@ResponseBody`.  From a Spring Roo perspective this would be a nice feature to have. I was thinking if I could define a SPEL expression in some way in the `@RequestMapping` annotation that would be nice.  There are two other SPR tickets which are related to this: #11163 and #12012  ---  **Affects:** 3.1 M1  **Issue Links:** - #11163 `@RequestMapping` should support accept header and url extension (_**""duplicates""**_) - #13057 Content negotiation improvements (_**""is superseded by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f94aed83860ee46b8fbe5b1f48d19470f54b843b, https://github.com/spring-projects/spring-framework/commit/f05e2bc56f8e03466977d73a5e99c37651248803  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2010-11-08T00:23:49Z","2019-01-13T07:12:24Z"
"","12367","Introduce DEBUG logging statements in LocalValidatorFactoryBean [SPR-7711]","**[Stefan Schmidt](https://jira.spring.io/secure/ViewProfile.jspa?name=sschmidt)** opened **[SPR-7711](https://jira.spring.io/browse/SPR-7711?redirect=false)** and commented  For a first time Spring Framework user who is scaffolding a MVC UI with Spring Roo it might be confusing to see where exactly JSR 303 validation is triggered. In case of using `@Valid` in conjunction with JSR 303 annotations this happens during form binding in MVC `@Controllers`.  LocalValidatorFactoryBean handles JSR 303 validation by forwarding to the JSR 303 implementation (in Roo's case Hibernate Validator). It would be good if the control logic in the annotation method handler adapter produced debug logging stating what it was doing.  e.g. invoking Validator for `@Valid` form object Owner in OwnerController.  This is related to [ROO-1639](https://jira.spring.io/browse/ROO-1639).  ---  **Issue Links:** - [ROO-1639](https://jira.spring.io/browse/ROO-1639) `@NotNull` validation fails silently","closed","status: invalid,","spring-projects-issues","2010-11-02T07:28:36Z","2019-01-13T07:12:28Z"
"","12250","@InitBinder not called before @Controller method execution [SPR-7594]","**[Stefan Schmidt](https://jira.spring.io/secure/ViewProfile.jspa?name=sschmidt)** opened **[SPR-7594](https://jira.spring.io/browse/SPR-7594?redirect=false)** and commented  The following code in a `@Controller` will fails (extract from PetController.java):  ``` @RequestMapping(params = { ""find=ByOwner"", ""form"" }, method = RequestMethod.GET) public String findPetsByOwnerForm(Model model) {    model.addAttribute(""owners"", Owner.findAllOwners()); // throws ""ConverterNotFoundException: No converter found capable of converting from 'com.springsource.petclinic.domain.Owner' to 'java.lang.String'""      return ""pets/findPetsByOwner""; }  @InitBinder void registerConverters(WebDataBinder binder) {   if (binder.getConversionService() instanceof GenericConversionService) {      GenericConversionService conversionService = (GenericConversionService) binder.getConversionService();      conversionService.addConverter(getOwnerConverter());   } }  Converter getOwnerConverter() {   return new Converter() {     public String convert(Owner owner) {       return new StringBuilder().append(owner.getFirstName()).toString();     }   }; } ```  This is because registerConverters never gets called before findPetsByOwnerForm is being invoked, so the Owner to String converter does not get registered.  Steps to reproduce:  1. Create MYSQL database called 'petclinic', with username 'root' (change in src/main/resources/META-INF/spring/database.properties otherwise) 2. unpack attached application and run 'mvn tomcat:run' from project root 3. Create new Owner and Pet at http://localhost:8080/petclinic 4. Click on Pet > Find by Owner and see that the drop down is populated and the converter is registered and works 5. Restart application and click Pet > Find by Owner again - this time it fails for lack of registered converter 6. Click Pet > List all Pets and then Pet > Find by Owner and it works again (converter is registered)  Not sure if I have configured something incorrectly but it looks like a bug to me.    ---  **Affects:** 3.0.4  **Attachments:** - [petclinic.tar](https://jira.spring.io/secure/attachment/17141/petclinic.tar) (_420.00 kB_)  **Issue Links:** - [ROO-1387](https://jira.spring.io/browse/ROO-1387) ConverterNotFoundException: No converter found (_**""is depended on by""**_)","closed","status: invalid,","spring-projects-issues","2010-09-27T04:15:03Z","2019-01-12T05:31:32Z"
"","11988","Error message formatting fails if a JSR 303 @Pattern definition contains special characters [SPR-7329]","**[Stefan Schmidt](https://jira.spring.io/secure/ViewProfile.jspa?name=sschmidt)** opened **[SPR-7329](https://jira.spring.io/browse/SPR-7329?redirect=false)** and commented  A form backing object annotated with `@Pattern` as follows:  ``` @Pattern(regexp = ""\\b[A-Za-z0-9._%-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}\\b"") private String email; ```  If a wrong email is presented, the validation fails and the error message ('must match ""\b[A-Za-z0-9._%-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}\b""') is presented to the Spring  tag. This fails with:  ``` 2010-06-28 19:05:16,087 [http-8080-2] ERROR org.springframework.web.servlet.tags.form.ErrorsTag - unknown format type at  java.lang.IllegalArgumentException: unknown format type at  	at java.text.MessageFormat.makeFormat(MessageFormat.java:1442) 	at java.text.MessageFormat.applyPattern(MessageFormat.java:458) 	at java.text.MessageFormat.(MessageFormat.java:368) 	at org.springframework.context.support.MessageSourceSupport.createMessageFormat(MessageSourceSupport.java:115) 	at org.springframework.context.support.MessageSourceSupport.formatMessage(MessageSourceSupport.java:99) 	at org.springframework.context.support.AbstractMessageSource.renderDefaultMessage(AbstractMessageSource.java:275) 	at org.springframework.context.support.AbstractMessageSource.getMessage(AbstractMessageSource.java:152) 	at org.springframework.context.support.AbstractApplicationContext.getMessage(AbstractApplicationContext.java:1196) 	at org.springframework.web.servlet.support.RequestContext.getMessage(RequestContext.java:559) 	at org.springframework.web.servlet.support.BindStatus.initErrorMessages(BindStatus.java:177) 	at org.springframework.web.servlet.support.BindStatus.getErrorMessages(BindStatus.java:273) 	at org.springframework.web.servlet.tags.form.ErrorsTag.exposeAttributes(ErrorsTag.java:173) 	at org.springframework.web.servlet.tags.form.AbstractHtmlElementBodyTag.writeTagContent(AbstractHtmlElementBodyTag.java:48) 	at org.springframework.web.servlet.tags.form.AbstractFormTag.doStartTagInternal(AbstractFormTag.java:102) 	at org.springframework.web.servlet.tags.RequestContextAwareTag.doStartTag(RequestContextAwareTag.java:79) 	at org.apache.jsp.tag.web.form.fields.input_tagx.doTag(input_tagx.java:330) 	at org.apache.jsp.WEB_002dINF.views.people.create_jspx._jspx_meth_field_005finput_005f0(create_jspx.java:123) 	at org.apache.jsp.WEB_002dINF.views.people.create_jspx.access$0(create_jspx.java:104) 	at org.apache.jsp.WEB_002dINF.views.people.create_jspx$Helper.invoke0(create_jspx.java:163) 	at org.apache.jsp.WEB_002dINF.views.people.create_jspx$Helper.invoke(create_jspx.java:180) 	at org.apache.jsp.tag.web.form.create_tagx$Helper.invoke0(create_tagx.java:423) 	at org.apache.jsp.tag.web.form.create_tagx$Helper.invoke(create_tagx.java:464) 	at org.apache.jsp.tag.web.form.page_tagx._jspx_meth_c_005fif_005f1(page_tagx.java:218) 	at org.apache.jsp.tag.web.form.page_tagx.doTag(page_tagx.java:126) 	at org.apache.jsp.tag.web.form.create_tagx.doTag(create_tagx.java:197) 	at org.apache.jsp.WEB_002dINF.views.people.create_jspx._jspx_meth_form_005fcreate_005f0(create_jspx.java:99) 	at org.apache.jsp.WEB_002dINF.views.people.create_jspx._jspService(create_jspx.java:63) 	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) ```  As confirmation that the problem is the formatting of the error message by the Spring errors tag a change of the `@Pattern` definition in the form backing object to:  ``` @Pattern(regexp = ""\\b[A-Za-z0-9._%-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}\\b"", message=""email validation failed"") private String email; ```  With this adjustment (a cleaner error message) all works fine.   ---  **Affects:** 3.0.3  **Issue Links:** - [ROO-1039](https://jira.spring.io/browse/ROO-1039) Using {} in RegExp pattern causes IllegalArgumentException: unknown format type (_**""is depended on by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1dce03af7889106437c7d615ec822091253de713  1 votes, 2 watchers","closed","type: bug,","spring-projects-issues","2010-06-27T20:21:12Z","2012-06-19T03:43:00Z"
"","12043","org.aspectj.weaver.World.reset() not called on Context-Shutdown: Memory-Leak caused [SPR-7385]","**[Stefan Penndorf](https://jira.spring.io/secure/ViewProfile.jspa?name=stefan%20penndorf)** opened **[SPR-7385](https://jira.spring.io/browse/SPR-7385?redirect=false)** and commented  When using Spring together with AspektJ a memory leak occurs. This memory leak prevents the application context and associated instances from beeing cleaned up. Root of this memory leak is the class `org.aspectj.weaver.ResolvedType` which contains public static final fields which will be populated with an (runtime) instance of class `org.aspectj.weaver.World` / `org.aspectj.weaver.reflect.ReflectionWorld`. Following the reference tree the `ReflectionWorld` instance has a reference to an `org.springframework.aop.aspectj.AspectJExpressionPointcut$BeanNamePointcutDeignatorHandler` instance which inturn has a reference path to the ApplicationContext. This reference to the ApplicationContext ( a XmlWebApplicationContext in our case ) ""protects"" the context and some application beans (especially ApplicationListeners) from beeing cleaned up by the GC. Thus continious re-deploment the web application causes an `OutOfMemoryError` after a while.  There are two solutions that come into my mind:  1. Calling org.aspectj.weaver.World.reset() on application context shutdown/close. This method clears all World/ReflectionWorld instances in ResolvedType static final memebers thus making them eligible for garbage collection. This will be the option i'll try. I plan to create a Bean as an ApplicationListener which creates and starts a new thread if it receives a `ContextClosedEvent`. This new thread waits until `context.isActive() == false` and calls `World.reset()` than. Afterwards the Thread will end so that it can be cleaned up itself. The risk/bad thing with that option is, if another `ApplicationContext` exists in the same VM/Classloader using AspectJ this process could clear their static world as well. I really don't know if that is the case / if that really happens. In our case using Tomcat the webapp will be loaded in it's own Classloader so the application context only clears the aspectj world of it's own classloader and does not affect other applications deployen at the same tomcat.  2. From a spring perspektive the best thing could be removing the `org.springframework.aop.aspectj.AspectJExpressionPointcut$BeanNamePointcutDeignatorHandler` from the `pointcutDesignators` set of `org.aspectj.weaver.reflect.ReflectionWorld` thus enabling the cleanup of the application context with the overhead of the remaining AspectJ instances.    ---  **Affects:** 2.5.6  5 votes, 6 watchers","closed","in: core,","spring-projects-issues","2010-07-20T01:24:02Z","2019-01-12T16:37:46Z"
"","12695","ServletRequestDataBinder.bind should also consider wrapped ServletRequests when checking for Multipart,  to comply with HiddenHttpMethodFilter. [SPR-8040]","**[Stefan Ocke](https://jira.spring.io/secure/ViewProfile.jspa?name=stefanoc)** opened **[SPR-8040](https://jira.spring.io/browse/SPR-8040?redirect=false)** and commented  When using HiddenHttpMethodFilter, like for example Spring Roo generated apps do, the ServletRequest is wrappd into a HttpMethodRequestWrapper (at least in cases, where wrapping is necessary, for example for PUT requests emulated with POST and httpMethod parameter).  Later, when it comes to data binding the ServletRequestDataBinder.bind method checks for multipart requests:  ``` MutablePropertyValues mpvs = new ServletRequestParameterPropertyValues(request); 		if (request instanceof MultipartRequest) { 			MultipartRequest multipartRequest = (MultipartRequest) request; 			bindMultipart(multipartRequest.getMultiFileMap(), mpvs); 		} 		doBind(mpvs); ```  But if the multipart request has been wrapped into a HttpMethodRequestWrapper , this won't work anymore, since it is not an instance of MultipartRequest. Thus, no databinding for the Multipart files occurs.  NOTE: My setup ist the following:  - I am using a MultipartFilter in front of the WebMethodFilter, as suggested in bold letters in  the Javadoc of HiddenHttpMethodFilter - I am using binding for the uploaded files, instead of ""injecting"" them as parameters in the controller mehtods. For this, I register an according converter / bean editor from MultipartFile to byte array - For POST request, this setup works fine. For PUT (emulated by POST and httpMethod parameter), the problem described above arises.  ---  **Affects:** 3.0.5  **Issue Links:** - #12451 ServletRequestDataBinder does not bind MultipartFile with HiddenHttpMethodFilter and Multipart Request (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2011-03-12T03:02:40Z","2019-01-12T16:49:05Z"
"","12824","AbstractCachingViewResolver does not query cache correctly [SPR-8173]","**[Stefan Haberl](https://jira.spring.io/secure/ViewProfile.jspa?name=birnbuazn)** opened **[SPR-8173](https://jira.spring.io/browse/SPR-8173?redirect=false)** and commented  According to the JavaDoc on the ViewResolver interface a view resolver should return null, if it cannot handle a view, to allow for ViewResolver chaining.  AbstractCachingViewResolver currently correctly caches such null-views, but when querying the cache then ignores the null value and asks the subclass to create the View object again. This might be rather expensive (as in my case).  A patch that correctly queries the view cache is attached.  ---  **Affects:** 3.0.5, 3.1 RC1  **Attachments:** - [AbstractCachingViewResolver.java.patch](https://jira.spring.io/secure/attachment/17893/AbstractCachingViewResolver.java.patch) (_870 bytes_)  **Issue Links:** - #13168 AbstractCachingViewResolver does not cache negative lookups  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1bb6d29be23cb543a1a023ace669f1f7485d2d90, https://github.com/spring-projects/spring-framework/commit/c2eafdb2fb77ae0b58ce4853852634ffd4db60a1","closed","type: bug,","spring-projects-issues","2011-04-01T14:39:41Z","2019-01-11T13:04:12Z"
"","12538","DefaultHandlerExceptionResolver should not set response headers after calling sendError when handling HttpMediaTypeNotSupportedException [SPR-7882]","**[Stanislav Jursky](https://jira.spring.io/secure/ViewProfile.jspa?name=casey)** opened **[SPR-7882](https://jira.spring.io/browse/SPR-7882?redirect=false)** and commented  You SHOULD NOT write to a `javax.servlet.http.HttpServletResponse` after you call `javax.servlet.http.HttpServletResponse.sendError(int)` as it states in servlet API http://download.oracle.com/docs/cd/E17802_01/products/products/servlet/2.5/docs/servlet-2_5-mr2/javax/servlet/http/HttpServletResponse.html#sendError(int,%20java.lang.String)  This anti-pattern can be found in method `org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver.handleHttpMediaTypeNotSupported(HttpMediaTypeNotSupportedException, HttpServletRequest, HttpServletResponse, Object)`  For example in Tomcat this will lead to flag response as suspended hence no set header will be applied. Just move statement: `response.sendError(HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE);` right before returning new `ModelAndView` object just like you do in method `handleHttpRequestMethodNotSupported`  see ??SRV.5.5 Closure of Response Object?? and ??SRV.5.3 Convenience Methods?? in Servlet 2.5 specification for more information about `sendError` method  Thanks   ---  **Affects:** 3.0.5","closed","status: bulk-closed,","spring-projects-issues","2011-01-13T04:38:01Z","2019-01-12T03:31:40Z"
"","12519","@ExceptionHandler doesnt work with ResponseEntity [SPR-7862]","**[srinivas kvs](https://jira.spring.io/secure/ViewProfile.jspa?name=srinivas_vsk)** opened **[SPR-7862](https://jira.spring.io/browse/SPR-7862?redirect=false)** and commented  When the `@ExceptionHandler` method returns a ResponseEntity, it throws IllegalArgument exception while returning the responsenetity object.   ---  **Affects:** 3.0.5  **Reference URL:** http://forum.springsource.org/showthread.php?p=337899#post337899","closed","in: web,","spring-projects-issues","2011-01-06T10:31:20Z","2019-01-12T16:49:18Z"
"","11976","BeanFactory.getBean(Class) not working for FactoryBean [SPR-7318]","**[Simon Wong](https://jira.spring.io/secure/ViewProfile.jspa?name=simonwg)** opened **[SPR-7318](https://jira.spring.io/browse/SPR-7318?redirect=false)** and commented  Assume I have my own FactoryBean class  public class MyFactoryBean extends AbstractFactoryBean\ { // ... }  and I have defined the bean in applicationContext.xml  \  Everything works fine for applicationContext.getBean(""&myFactory""); to return the FactoryBean object  However, if I try to use applicationContext.getBean(MyFactoryBean.class), it will throw Exception  Exception in thread ""main"" org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named '&myFactory' is defined at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanDefinition(DefaultListableBeanFactory.java:521) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:254) at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1083)  The DefaultListableBeanFactory's getBean(Class\) method should have special handling for factory bean   ---  **Affects:** 3.0 GA, 3.0.1, 3.0.2, 3.0.3  **Attachments:** - [mylyn-context.zip](https://jira.spring.io/secure/attachment/16799/mylyn-context.zip) (_3.06 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cd271fca431260c8ce81dd75dc6198555bca6e46","closed","in: core,","spring-projects-issues","2010-06-23T20:01:32Z","2019-01-11T14:21:26Z"
"","11957","@ExceptionHandler did not take RequestToViewNameTranslator into resolution process [SPR-7298]","**[Simon Wong](https://jira.spring.io/secure/ViewProfile.jspa?name=simonwg)** opened **[SPR-7298](https://jira.spring.io/browse/SPR-7298?redirect=false)** and commented  The issue arose when I use `@ExceptionHandler` and trying to render the view through ContentNegotiatingViewResolver      @ExceptionHandler(Exception.class)     public Map myExceptionHandler(Exception e) {         Map modelMap = new HashMap();         modelMap.put(""modelKey"", new Object());              return modelMap;     }  I expect that it will pick the best view through media type, but it fails and get the following exception.  javax.servlet.ServletException: ModelAndView [ModelAndView: materialized View is [null]; model is {modelKey=java.lang.Object@1f2a9da}] neither contains a view name nor a View object in servlet with name 'dispatcher' org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1054) org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:801)  After some code tracing, I found that the AnnotationMethodHandlerExceptionResolver.getModelAndView() will return a new ModelAndView object.  ... else if (returnValue instanceof Map) { return new ModelAndView().addAllObjects((Map) returnValue); } ...  And in DispatcherServlet.doDispatch(), the default view name didn't be set again after the return of processHandlerException(), that construct a new ModelAndView object    ---  **Affects:** 3.0.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d49c067770241f6287abc94f9fb08d22b1966fca  1 votes, 2 watchers","closed","type: bug,","spring-projects-issues","2010-06-17T21:15:58Z","2012-06-19T03:43:02Z"
"","12296","Problam while render Tiles [SPR-7640]","**[sijo thomas](https://jira.spring.io/secure/ViewProfile.jspa?name=way2sijo)** opened **[SPR-7640](https://jira.spring.io/browse/SPR-7640?redirect=false)** and commented  i am working with tiles while rendering the pages it will go into a loop of errors...,All data base actions are going well.But while render showing problams...it shows the following errors..  10:55:39,877 ERROR RenderTag:228 - IO Error executing tag: JSPException including path '/padoss/socAdminMembersList.jsp'. org.apache.tiles.util.TilesIOException: JSPException including path '/padoss/socAdminMembersList.jsp'. at org.apache.tiles.servlet.context.ServletUtil.wrapServletException(ServletUtil.java:232) at org.apache.tiles.jsp.context.JspTilesRequestContext.include(JspTilesRequestContext.java:105) at org.apache.tiles.jsp.context.JspTilesRequestContext.dispatch(JspTilesRequestContext.java:96) at org.apache.tiles.renderer.impl.UntypedAttributeRenderer.write(UntypedAttributeRenderer.java:61) at org.apache.tiles.renderer.impl.AbstractBaseAttributeRenderer.render(AbstractBaseAttributeRenderer.java:103) at org.apache.tiles.impl.BasicTilesContainer.render(BasicTilesContainer.java:659) ...   --- No further details from [SPR-7640](https://jira.spring.io/browse/SPR-7640?redirect=false)","closed","","spring-projects-issues","2010-10-11T00:02:46Z","2019-01-13T21:44:33Z"
"","12261","SessionFactoryUtils.doGetSession creates new session holder without JTA transaction [SPR-7605]","**[Siarhei Sakovich](https://jira.spring.io/secure/ViewProfile.jspa?name=siarhei_sakovich)** opened **[SPR-7605](https://jira.spring.io/browse/SPR-7605?redirect=false)** and commented  Hibernate search indexing work fails when it try to load lazy `@ContainedIn` entity collection. Cause: hibernate session is closed during beforeCompletion:  org.hibernate.LazyInitializationException: failed to lazily initialize a collection of role: com.test.hibernate.ChildEntity.parents, no session or session was closed at org.hibernate.collection.AbstractPersistentCollection.throwLazyInitializationException(AbstractPersistentCollection.java:380) at org.hibernate.collection.AbstractPersistentCollection.throwLazyInitializationExceptionIfNotConnected(AbstractPersistentCollection.java:372) at org.hibernate.collection.AbstractPersistentCollection.readSize(AbstractPersistentCollection.java:119) at org.hibernate.collection.PersistentSet.size(PersistentSet.java:162) at org.hibernate.search.engine.DocumentBuilderContainedEntity.processContainedInInstances(DocumentBuilderContainedEntity.java:644) at org.hibernate.search.engine.DocumentBuilderContainedEntity.addWorkToQueue(DocumentBuilderContainedEntity.java:612) at org.hibernate.search.backend.impl.BatchedQueueingProcessor.addWorkToBuilderQueue(BatchedQueueingProcessor.java:270) at org.hibernate.search.backend.impl.BatchedQueueingProcessor.processWorkByLayer(BatchedQueueingProcessor.java:248) at org.hibernate.search.backend.impl.BatchedQueueingProcessor.prepareWorks(BatchedQueueingProcessor.java:147) at org.hibernate.search.backend.impl.PostTransactionWorkQueueSynchronization.beforeCompletion(PostTransactionWorkQueueSynchronization.java:70) at org.hibernate.search.backend.impl.EventSourceTransactionContext$DelegateToSynchronizationOnBeforeTx.doBeforeTransactionCompletion(EventSourceTransactionContext.java:144) at org.hibernate.engine.ActionQueue$BeforeTransactionCompletionProcessQueue.beforeTransactionCompletion(ActionQueue.java:530) at org.hibernate.engine.ActionQueue.beforeTransactionCompletion(ActionQueue.java:211) at org.hibernate.impl.SessionImpl.beforeTransactionCompletion(SessionImpl.java:563) at org.hibernate.jdbc.JDBCContext.beforeTransactionCompletion(JDBCContext.java:229) at org.hibernate.transaction.CacheSynchronization.beforeCompletion(CacheSynchronization.java:96) at com.arjuna.ats.internal.jta.resources.arjunacore.SynchronizationImple.beforeCompletion(SynchronizationImple.java:101) at com.arjuna.ats.arjuna.coordinator.TwoPhaseCoordinator.beforeCompletion(TwoPhaseCoordinator.java:271) at com.arjuna.ats.arjuna.coordinator.TwoPhaseCoordinator.end(TwoPhaseCoordinator.java:89) at com.arjuna.ats.arjuna.AtomicAction.commit(AtomicAction.java:176) at com.arjuna.ats.internal.jta.transaction.arjunacore.TransactionImple.commitAndDisassociate(TransactionImple.java:1396) at com.arjuna.ats.internal.jta.transaction.arjunacore.BaseTransaction.commit(BaseTransaction.java:138) at org.springframework.transaction.jta.JtaTransactionManager.doCommit(JtaTransactionManager.java:1009) at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:754) at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:723) at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:374) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:120) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172) at org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor.intercept(Cglib2AopProxy.java:621) at com.test.hibernate.TestService$$EnhancerByCGLIB$$f6772efb.update(\) at com.test.hibernate.TestHb.testHb(TestHb.java:26)  Configuration:  Spring context: \ ...  \ ..\ 	\ 		\org.hibernate.transaction.JBossTransactionManagerLookup\ 		\org.hibernate.transaction.JTATransactionFactory\..    \ \ 	\ \  jndi.properties: java.naming.factory.initial = org.apache.xbean.spring.jndi.SpringInitialContextFactory  jndi.xml: \ \ \ \ \ \ \ \ \ \ \ \ \ \  Full eclipse test project is attached   ---  **Affects:** 3.0.3  **Attachments:** - [test.zip](https://jira.spring.io/secure/attachment/17152/test.zip) (_84.52 kB_)","closed","status: declined,","spring-projects-issues","2010-09-30T07:37:56Z","2019-01-12T16:26:44Z"
"","12419","BufferedImageHttpMessageConverter not using defaultContentType [SPR-7763]","**[Shawn Clark](https://jira.spring.io/secure/ViewProfile.jspa?name=shawnclark)** opened **[SPR-7763](https://jira.spring.io/browse/SPR-7763?redirect=false)** and commented  Looking at the AnnotationMethodHandler.writeWithmessageConverters() (line: 972). The code loops through each of the acceptedMediaTypes asking the messageConverter if it canWrite(). Using an example acceptedMediaTypes from Firefox would look like:  ``` [text/html, application/xhtml+xml, application/xml;q=0.9, */*;q=0.8] ```  Each of the mediaTypes would be passed to the canWrite() and returned as false as it isn't within:  ``` [image/png, image/jpeg, image/x-png, image/vnd.wap.wbmp, image/bmp, image/gif] ```  Which is returned by the ImageIO.getWriterMIMETypes().  Now looking at the BufferedImageHttpMessageConverter there is the ability to specify the defaultContentType to use when no contentType is provided to the write() method. Unfortunately this method never gets called with the MediaType as null. To improve the BufferedImage converter it would make sense to have the isWriteable(MediaType) check for MediaType.ALL. Then within the write() method of the BufferedImageHttpMessageConverter it would use the defaultContentType when passed in a MediaType.ALL.  ``` private boolean isWritable(MediaType mediaType) {      if (mediaType == null || MediaType.ALL.equals(mediaType)) {           return true;      }      Iterator imageWriters = ImageIO.getImageWritersByMIMEType(mediaType.toString());      return imageWriters.hasNext(); } ```  This method looks very similar to the AbstractHttpMessageConverter.canWrite(MediaType) except that it compares the mediaType to the ImageIO available MIME types instead of the supportedMediaTypes.  ``` 	public void write(BufferedImage image, MediaType contentType, HttpOutputMessage outputMessage) 			throws IOException, HttpMessageNotWritableException {  		if (contentType == null || MediaType.ALL.equals(contentType)) { 			contentType = getDefaultContentType(); 		} 		 		... 	} ```  Sorry for not having the source code checked out to be able to provide a patch file.   ---  **Affects:** 3.0.5, 3.1.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/23912771154c54f63fdc0034c181edee07f9bb89, https://github.com/spring-projects/spring-framework/commit/0829cbfdd3adc4459e47b6c4e1411dba796f964a  3 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2010-11-23T16:27:29Z","2013-01-08T07:06:55Z"
"","11965","Getting ""Cannot deactivate transaction synchronization - not active"" when using two transactions as part of same thread. [SPR-7306]","**[Shashi Kale](https://jira.spring.io/secure/ViewProfile.jspa?name=shashi)** opened **[SPR-7306](https://jira.spring.io/browse/SPR-7306?redirect=false)** and commented  Hi,  We are using spring transactions and facing an exception when there are two transactions as part of the same thread.  The log for the use case is pasted below.  Code:  2010-06-08 11:01:06,847 DEBUG [com.arisglobal.aglite.jpa.AGJpaTransactionManager] - Creating new transaction with name [com.ags.agcli.bo.services.SiteVisitConductService.findAllParticipant]: PROPAGATION_REQUIRED,ISOLATION_DEFAULT,readOnly; '' 2010-06-08 11:01:06,847 DEBUG [com.arisglobal.aglite.jpa.AGJpaTransactionManager] - Opened new EntityManager [com.arisglobal.aglite.jpa.EclipseLinkEntityManagerDecorator@17e4c1e] for JPA transaction 2010-06-08 11:01:06,847 DEBUG [com.arisglobal.aglite.jpa.AGJpaTransactionManager] - Not exposing JPA transaction [com.arisglobal.aglite.jpa.EclipseLinkEntityManagerDecorator@17e4c1e] as JDBC transaction because JpaDialect [org.springframework.orm.jpa.vendor.EclipseLinkJpaDialect@1fcfca5] does not support JDBC Connection retrieval ...... 2010-06-08 11:01:06,847 DEBUG [com.arisglobal.aglite.jpa.AGJpaTransactionManager] - Found thread-bound EntityManager [com.arisglobal.aglite.jpa.EclipseLinkEntityManagerDecorator@17e4c1e] for JPA transaction 2010-06-08 11:01:06,847 DEBUG [com.arisglobal.aglite.jpa.AGJpaTransactionManager] - Participating in existing transaction ...... 2010-06-08 11:01:09,409 DEBUG [com.arisglobal.aglite.jpa.AGJpaTransactionManager] - Creating new transaction with name [com.arisglobal.aglite.ui.service.ListDataService.getData]: PROPAGATION_REQUIRED,ISOLATION_DEFAULT,readOnly; '' 2010-06-08 11:01:09,409 DEBUG [com.arisglobal.aglite.jpa.AGJpaTransactionManager] - Opened new EntityManager [com.arisglobal.aglite.jpa.EclipseLinkEntityManagerDecorator@1385ad5] for JPA transaction 2010-06-08 11:01:09,409 DEBUG [com.arisglobal.aglite.jpa.AGJpaTransactionManager] - Not exposing JPA transaction [com.arisglobal.aglite.jpa.EclipseLinkEntityManagerDecorator@1385ad5] as JDBC transaction because JpaDialect [org.springframework.orm.jpa.vendor.EclipseLinkJpaDialect@b09077] does not support JDBC Connection retrieval ...... 2010-06-08 11:01:09,409 DEBUG [com.arisglobal.aglite.jpa.AGJpaTransactionManager] - Found thread-bound EntityManager [com.arisglobal.aglite.jpa.EclipseLinkEntityManagerDecorator@1385ad5] for JPA transaction 2010-06-08 11:01:09,409 DEBUG [com.arisglobal.aglite.jpa.AGJpaTransactionManager] - Participating in existing transaction ...... 2010-06-08 11:01:09,425 TRACE [com.arisglobal.aglite.jpa.AGJpaTransactionManager] - Triggering beforeCommit synchronization 2010-06-08 11:01:09,425 TRACE [com.arisglobal.aglite.jpa.AGJpaTransactionManager] - Triggering beforeCompletion synchronization 2010-06-08 11:01:09,425 DEBUG [com.arisglobal.aglite.jpa.AGJpaTransactionManager] - Initiating transaction commit 2010-06-08 11:01:09,425 DEBUG [com.arisglobal.aglite.jpa.AGJpaTransactionManager] - Committing JPA transaction on EntityManager [com.arisglobal.aglite.jpa.EclipseLinkEntityManagerDecorator@1385ad5] 2010-06-08 11:01:09,425 TRACE [com.arisglobal.aglite.jpa.AGJpaTransactionManager] - Triggering afterCommit synchronization 2010-06-08 11:01:09,425 TRACE [com.arisglobal.aglite.jpa.AGJpaTransactionManager] - Triggering afterCompletion synchronization ...... 2010-06-08 11:01:09,456 TRACE [com.arisglobal.aglite.jpa.AGJpaTransactionManager] - Triggering beforeCommit synchronization 2010-06-08 11:01:09,456 TRACE [com.arisglobal.aglite.jpa.AGJpaTransactionManager] - Triggering beforeCompletion synchronization 2010-06-08 11:01:09,456 ERROR [com.arisglobal.aglite.ui.filter.DwrAjaxFilter] - Error: java.lang.reflect.InvocationTargetException at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) ...... ...... ...... Caused by: java.lang.IllegalStateException: Cannot deactivate transaction synchronization - not active at org.springframework.transaction.support.TransactionSynchronizationManager.clearSynchronization(TransactionSynchronizationManager.java:309) at org.springframework.transaction.support.TransactionSynchronizationManager.clear(TransactionSynchronizationManager.java:447) at org.springframework.transaction.support.AbstractPlatformTransactionManager.cleanupAfterCompletion(AbstractPlatformTransactionManager.java:1008) at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:804) at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:723) at sun.reflect.GeneratedMethodAccessor267.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:307) at org.springframework.osgi.service.importer.support.internal.aop.ServiceInvoker.doInvoke(ServiceInvoker.java:58) at org.springframework.osgi.service.importer.support.internal.aop.ServiceInvoker.invoke(ServiceInvoker.java:62) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172) at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:131) at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:119) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172) at org.springframework.osgi.service.util.internal.aop.ServiceTCCLInterceptor.invokeUnprivileged(ServiceTCCLInterceptor.java:56) at org.springframework.osgi.service.util.internal.aop.ServiceTCCLInterceptor.invoke(ServiceTCCLInterceptor.java:39) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172) at org.springframework.osgi.service.importer.support.LocalBundleContextAdvice.invoke(LocalBundleContextAdvice.java:59) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172) at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:131) at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:119) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:202) at $Proxy327.commit(Unknown Source) at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:412) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:118) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:202) at $Proxy249.findAllParticipant(Unknown Source) ... 56 more  We have inherited the JpaTransactionManager (class AGJpaTransactionManager) of spring in order to achieve some functionalities during data commit.  Please note that this is log for a single thread running. I have taken out some of the business logic related log statements.  As you can see there is a new transaction getting created when the previous transaction is underway.  I think when this transaction is completed the thread local synchronization details are cleared and the first transaction cannot get the synchronization details.  Regards, Shashi   ---  **Affects:** 3.0.1  **Reference URL:** http://forum.springsource.org/showthread.php?t=90542  3 votes, 9 watchers","closed","status: declined,","spring-projects-issues","2010-06-20T21:45:54Z","2019-01-12T16:37:53Z"
"","11906","Spring ORM with JPA 2.0 and Eclipselink throws ClassCastException. [SPR-7247]","**[Shashi Kale](https://jira.spring.io/secure/ViewProfile.jspa?name=shashi)** opened **[SPR-7247](https://jira.spring.io/browse/SPR-7247?redirect=false)** and commented  Hi,  I am using 3.0.1.RELEASE-A of spring along with Spring DM and am facing a similar issue. My code goes like  Query q = em.createQuery(""SELECT e FROM "" + entityClazz.getSimpleName() + "" e"");  I get  Caused by: java.lang.ClassCastException: $Proxy194 cannot be cast to javax.persistence.Query at $Proxy56.createQuery(Unknown Source) at com.arisglobal.aglite.dao.GenericCrudDAOImpl.findAll(GenericCrudDAOImpl.java:249) at java.lang.Thread.run(Thread.java:619) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:307) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:196)  Also, if I make the method in my DAO transactional it works all fine. It doesn't work only if I make it non transactional.  Thanks and Regards, Shashi  ---  **Affects:** 3.0.1  **Reference URL:** https://jira.springsource.org/browse/SPR-6733?focusedCommentId=54096#action_54096  **Issue Links:** - #11399 Spring 3.0 ORM with JPA 2.0 TypedQuery ClassCastException  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/882289b06e9f2adebd916cf8d02980327c6f9614","closed","type: bug,","spring-projects-issues","2010-05-30T16:21:24Z","2019-01-11T13:21:02Z"
"","12492","Version number on PDF/Compare PDF [SPR-7836]","**[Shahzada Hatim](https://jira.spring.io/secure/ViewProfile.jspa?name=shahzada.hatim)** opened **[SPR-7836](https://jira.spring.io/browse/SPR-7836?redirect=false)** and commented  It would be a good idea to put a version number on the very first page of spring documentation PDF file.  I had to resort to the dead tree (paper) format of the documentation and I printed out 3 KG of spring documentation in beginning of 2010. Now things have changed and I am not sure which ones.  I am planning to do a PDF comparison and only print the eratta of documentation. That is only possible if I can track which version of the documentation I did print.   --- No further details from [SPR-7836](https://jira.spring.io/browse/SPR-7836?redirect=false)","closed","","spring-projects-issues","2010-12-25T23:07:49Z","2019-01-11T15:17:08Z"
"","11936","JExcel example code has compilation errors [SPR-7277]","**[Shahzada Hatim](https://jira.spring.io/secure/ViewProfile.jspa?name=shahzada.hatim)** opened **[SPR-7277](https://jira.spring.io/browse/SPR-7277?redirect=false)** and commented  It should be  public class FillOverTimeReportExcelView  extends AbstractJExcelView { protected void buildExcelDocument(Map model, WritableWorkbook wb, HttpServletRequest request, HttpServletResponse response) throws Exception {              WritableSheet sheet = wb.createSheet(""Spring"",0);                  sheet.addCell(new Label(0, 0, ""Spring-Excel test""));          		             List words  = (List)model.get(""wordList"");             for (int i = 0; i < words.size(); i++) {                 sheet.addCell(new Label(2+i, 0, (String)words.get(i)));             }         }    ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/28a765f32b5b9e064a35bd3c8971d7691d8d93e8","closed","type: documentation,","spring-projects-issues","2010-06-10T18:18:22Z","2012-06-19T03:42:52Z"
"","12427","When working with CLOBS, OracleLobHandler swallows exception and this leads to the loss of data/transaction written with broken data [SPR-7771]","**[Serhiy Yevtushenko](https://jira.spring.io/secure/ViewProfile.jspa?name=serhiy.yevtushenko)** opened **[SPR-7771](https://jira.spring.io/browse/SPR-7771?redirect=false)** and commented  OracleClobHandler could loose data/commit broken transaction due to ignoring of exception, thrown by oracle, on closing stream, when working with CLOBs. Exception happens due to usage in org.springframework.jdbc.support.lob.OracleLobHandler of calls to org.springframework.util.FileCopyUtils.  How the problem was detected: The following problem was detected: a part of database records, which were containing CLOB fields, were written with empty content. These records should not have been written at all. Other records (for which size of CLOB was larger (bigger then 32K) were not written, and exceptions for them were found in log files.  None of the records should have not been written, because at that time the TEMP space on the Oracle database was full, and oracle was throwing exceptions, which were reported in Oracle logs.  Here is the part of log which was generated for the case, when exception was thrown: Caused by: org.springframework.dao.DataAccessResourceFailureException: Could not create Oracle LOB; nested exception is java.io.IOException: ORA-01652: unable to extend temp segment by 128 in tablespace TEMP1      at org.springframework.jdbc.support.lob.OracleLobHandler$OracleLobCreator.createLob(OracleLobHandler.java:368)     at org.springframework.jdbc.support.lob.OracleLobHandler$OracleLobCreator.setClobAsString(OracleLobHandler.java:265)     at org.springframework.jdbc.core.support.SqlLobValue.setTypeValue(SqlLobValue.java:190)     at org.springframework.jdbc.core.StatementCreatorUtils.setValue(StatementCreatorUtils.java:262)     at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValueInternal(StatementCreatorUtils.java:217)     at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValue(StatementCreatorUtils.java:145)     at org.springframework.jdbc.core.ArgTypePreparedStatementSetter.setValues(ArgTypePreparedStatementSetter.java:77)     at org.springframework.jdbc.core.JdbcTemplate$2.doInPreparedStatement(JdbcTemplate.java:796)     at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:591)     at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:792)     at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:850)     at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:854)     at com.ubs.scc.tem.domain.dao.message.jdbc.JdbcMessageDao.update(JdbcMessageDao.java:261)     at com.ubs.scc.tem.domain.dao.message.jdbc.JdbcMessageDao.save(JdbcMessageDao.java:134)     at sun.reflect.GeneratedMethodAccessor18.invoke(Unknown Source)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)     at java.lang.reflect.Method.invoke(Unknown Source)   Further investigation has shown, that the problem was caused by usage of 	FileCopyUtils method inside OracleLobHandler.  Reason of the problem was the following: When size of the clob was small (i.e. less than 32 K), whole LOB was kept inside buffer. Therefore, buffer was flushed to the database on the closing. As FileCopyUtils ignores (swallows) exceptions on closing on stream,(see code below) oracle errors were ignored)  public static int copy(InputStream in, OutputStream out) throws IOException { Assert.notNull(in, ""No InputStream specified""); Assert.notNull(out, ""No OutputStream specified""); try { int byteCount = 0; byte[] buffer = new byte[BUFFER_SIZE]; int bytesRead = -1; while ((bytesRead = in.read(buffer)) != -1) { out.write(buffer, 0, bytesRead); byteCount += bytesRead; } out.flush(); return byteCount; } finally { try { in.close(); } catch (IOException ex) { } try { out.close(); } catch (IOException ex) { } } }  For the bigger size of CLOBS, exceptions were happening in write calls.  Ways to fix: Either fix FileCopyUtils, in order to ensure, that when exception happens only in out.close calls, they got propagated (thrown), or do not use FileCopyUtils for database related purposes.   ---  **Affects:** 2.0.9, 2.5.6, 3.0 M1, 3.0 M2, 3.0 M3, 3.0 M4, 3.0 RC1, 3.0 RC2, 3.0 RC3, 3.0 GA, 3.0.1, 3.0.2, 3.0.3, 3.0.4, 3.0.5  **Attachments:** - [FileCopyUtils.java](https://jira.spring.io/secure/attachment/17413/FileCopyUtils.java) (_7.40 kB_)  1 votes, 3 watchers","closed","in: core,","spring-projects-issues","2010-11-29T04:48:32Z","2019-01-12T16:26:30Z"
"","12100","CastorMarshaller should have suppressXMLDeclaration [SPR-7442]","**[Sergi Almar](https://jira.spring.io/secure/ViewProfile.jspa?name=salmar)** opened **[SPR-7442](https://jira.spring.io/browse/SPR-7442?redirect=false)** and commented  CastorMarshaller has some of the properties the Marshaller from Castor has, but the suppressXMLDeclaration property is not defined. In order to inject the property in the same fashion as the other ones, avoiding overriding the customizeMarshaller method, CastorMarshaller should declare it.  ---  **Issue Links:** - #12943 Extension for CastorMarshaller - additional marshaller properties (_**""is superseded by""**_)","closed","type: enhancement,","spring-projects-issues","2010-08-10T02:07:04Z","2019-01-11T14:06:41Z"
"","12372","Documentation show wrong unthread safe code snippet  [SPR-7716]","**[Sebastien Tardif](https://jira.spring.io/secure/ViewProfile.jspa?name=sebtardif)** opened **[SPR-7716](https://jira.spring.io/browse/SPR-7716?redirect=false)** and commented  SimpleDateFormat is unthread safe below but Controller in Spring must be thread safe.  It is known has best practice to put flag on all Java class to tell if they are threadsafe or not. I think Spring source should be improved on this manner.  Extract from:  ``` @Controller public class MyFormController {      @InitBinder     public void initBinder(WebDataBinder binder) {         SimpleDateFormat dateFormat = new SimpleDateFormat(""yyyy-MM-dd"");         dateFormat.setLenient(false);         binder.registerCustomEditor(Date.class, new CustomDateEditor(dateFormat, false));     }      // ... } ```    ---  **Affects:** 3.0 GA  **Reference URL:** http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/mvc.html#mvc-ann-webdatabinder","closed","type: enhancement,","spring-projects-issues","2010-11-03T10:22:04Z","2014-09-19T11:57:13Z"
"","12469","EhCacheManagerFactoryBean should close stream obtained from configLocation [SPR-7813]","**[Sebastian Graca](https://jira.spring.io/secure/ViewProfile.jspa?name=titmus)** opened **[SPR-7813](https://jira.spring.io/browse/SPR-7813?redirect=false)** and commented  Method afterPropertiesSet obtains InputStream from configLocation but never closes it.   ---  **Affects:** 3.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/67d9b8b9436b79be82d524440919218b1e5d0129","closed","in: core,","spring-projects-issues","2010-12-11T09:42:50Z","2012-06-19T03:39:42Z"
"","12719","UrlBasedViewResolver should implement setExposedContextBeanNames (not InternalResourceViewResolver) [SPR-8064]","**[Scott Murphy](https://jira.spring.io/secure/ViewProfile.jspa?name=sdmurphy)** opened **[SPR-8064](https://jira.spring.io/browse/SPR-8064?redirect=false)** and commented  InternalResourceViewResolver has the ability to inject beans into a view.  This is very useful if you have some beans that have static content you want to render in all of your views.  #9244 implemented setExposedContextBeanNames(String[] exposedContextBeanNames) on InternalResourceViewResolver.  This was good, but limits to only using an InternalResourceViewResolver.  If you are using a org.springframework.web.servlet.view.UrlBasedViewResolver with Tiles you have to come up with your own solution like here http://stackoverflow.com/questions/2848415/accessing-spring-beans-from-a-tiles-view-jsp.  Since InternalResourceViewResolver extends UrlBasedViewResolver, why not just have UrlBasedViewResolver implement setExposedContextBeanNames(String[] exposedContextBeanNames) AND setExposeContextBeansAsAttributes(boolean exposeContextBeansAsAttributes) ?  If possible, maybe even move the methods all the way to org.springframework.web.servlet.view.AbstractCachingViewResolver ?  ---  **Affects:** 3.0.5, 3.0.6, 3.1 M1  **Attachments:** - [ContextExposingViewResolver.java](https://jira.spring.io/secure/attachment/18108/ContextExposingViewResolver.java) (_2.94 kB_)  **Issue Links:** - #9244 [InternalResourceView] Allow exposeContextBeansAsAttributes to be applied to specific beans  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a05b748d4224988bfaa8d47b13a54438d78b2102  5 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2011-03-17T17:51:44Z","2019-01-11T12:38:50Z"
"","12681","Velocity springFormCheckbox attribute string appends / when attribute string not properly quoted [SPR-8026]","**[Scott G](https://jira.spring.io/secure/ViewProfile.jspa?name=sgentry)** opened **[SPR-8026](https://jira.spring.io/browse/SPR-8026?redirect=false)** and commented  Utilize the macro on any backing bean, and add an attribute string with one value.  If you mistakenly leave off the quotes as such:  #springFormCheckbox(""command.someField"", ""value=SOME_CONSTANT"")  The output HTML is as such:  \ Properly escaping the value (""value='SOME_CONSTANT'"") OR adding a trailing space (""value=SOME_CONSTANT "") at the end of the attribute string will fix the problem.   ---  **Affects:** 3.0.5","closed","status: invalid,","spring-projects-issues","2011-03-08T09:50:31Z","2019-01-12T05:30:56Z"
"","12898","Static files in Petclinic tutorial in wrong directory [SPR-8250]","**[Scott Danzig](https://jira.spring.io/secure/ViewProfile.jspa?name=sdanzig)** opened **[SPR-8250](https://jira.spring.io/browse/SPR-8250?redirect=false)** and commented  Static files referenced by jsps in Petclinic sample app are not in ""static"".  I created the directory and moved these files in there.  Although I tested this successfully locally, I'd appreciate a thumbs up or down about whether the patch I submitted is created correctly.   ---  **Reference URL:** http://forum.springsource.org/showthread.php?p=346812&posted=1#post346812  **Attachments:** - [org.springframework.samples.petclinic.patch](https://jira.spring.io/secure/attachment/17640/org.springframework.samples.petclinic.patch) (_64.40 kB_)","closed","status: invalid,","spring-projects-issues","2011-02-20T17:44:26Z","2019-01-12T05:30:31Z"
"","12540","DefaultMessageListenerContainer log message [SPR-7884]","**[Scott C. Sosna](https://jira.spring.io/secure/ViewProfile.jspa?name=scsosna)** opened **[SPR-7884](https://jira.spring.io/browse/SPR-7884?redirect=false)** and commented  In DefaultMessageListenerContainer.recoverAfterListenerSetupFailure(), add an error log message saying something like ""Failure to setup listener, like JMS connection error.""  In a production environment, you're not likely to have info logging on, and without something like this you have no idea whether or not the listener is having problems connecting.   ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2011-01-13T11:53:13Z","2012-06-19T09:36:24Z"
"","12539","DefaultMessageListenerContainer loses messages [SPR-7883]","**[Scott C. Sosna](https://jira.spring.io/secure/ViewProfile.jspa?name=scsosna)** opened **[SPR-7883](https://jira.spring.io/browse/SPR-7883?redirect=false)** and commented  When using a transaction manager with a non-durable subscription, messages are lost.  Because the consumer isn't cached, Spring is opening/closing the subscription continually, in essence creating new subscriptions each time.  An overview of what's happening: -DefaultmessageListenerContainer.initalize(): with a transaction manager, the cache level is set to CACHE_NONE -AbstractJmsListeningContainer.doStart() - does not create shared connections based on cache level -DefaultMessageListenerContainer.executeOngoingLoop() - controlling loop that executes while the container is active -AbstractPollingMessageListenerContainer.doReceiveAndExecute() - attempts to receive a single message from the topic, calls the listener, and returns.  Because of the cache level, AbstractPollingMessageListenerContainer.doReceiveAndExecute() creates a new connection and new session before polling the messaging platform.  After receiving a message (and calling the listener) or timing out (no message available), the session and connection are closed and the method returns.  Only a single message is read in any one call.  Because the subscription ceases to exist once everything is closed, there are two possible scenarios for lost messages: 1) Additional messages are published while the listener is executing.  Once the listener consumers the message, the session/connection are closed.  When a non-durable subscription is closed, any messages unconsumed are lost, and therefore lost. 2) Additional messages published while the listener is not subscribed (i.e., between calls to doReceiveAndExecute()). There is no subscription and therefore the published messages just go to the bit bucket.    ---  **Affects:** 2.5.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/05041ff39aa57df2897f503a3fa2d03275d03e91  1 votes, 3 watchers","closed","status: invalid,","spring-projects-issues","2011-01-13T06:20:05Z","2019-01-12T05:31:12Z"
"","12535","handleListenerSetupFailure Debug Logging [SPR-7878]","**[Scott C. Sosna](https://jira.spring.io/secure/ViewProfile.jspa?name=scsosna)** opened **[SPR-7878](https://jira.spring.io/browse/SPR-7878?redirect=false)** and commented  When logging the message ""Setup of JMS message listener invoker failed for destination"", the code checks logger.isDebugEnabled but then logs to info.  Either  a) change to logger.debug() b) move the if check higher...do a ""if (logger.isDebugEnabled() || logger.isInfoEnabled()) {"" which would allow you to avoid building the message and throwing it away when neither debug or info are enabled.   ---  **Affects:** 2.5.6","closed","status: declined,","spring-projects-issues","2011-01-12T11:22:04Z","2019-01-12T16:26:18Z"
"","11945","@CookieValue values are not URL decoded [SPR-7286]","**[Scott Andrews](https://jira.spring.io/secure/ViewProfile.jspa?name=sandrews)** opened **[SPR-7286](https://jira.spring.io/browse/SPR-7286?redirect=false)** and commented  Method arguments injected into an `@RequestMapping` method via `@CookieValue` remain URL encoded while properties from `@RequestParam` are automatically decoded.  For consistency, `@CookieValue` should also be decoded before injection.  For example a pipe delimited value is injected as:  ``` value1%7Cvalue2 ```  Instead of:  ``` value1|value2 ```    ---  **Affects:** 3.0.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b2204ec94e5298597022773265fa209b97f6ae4e","closed","type: enhancement,","spring-projects-issues","2010-06-15T15:08:35Z","2012-06-19T03:43:39Z"
"","11942","Conversion service is attempting to convert types that should not be converted [SPR-7283]","**[Scott Andrews](https://jira.spring.io/secure/ViewProfile.jspa?name=sandrews)** opened **[SPR-7283](https://jira.spring.io/browse/SPR-7283?redirect=false)** and commented  There is a regression in the latest snapshots for 3.0.3 from 3.0.2.  The conversion service is attempting to convert incompatible types that share a common interface when defining a collection of these types.  Each of these types share a common interface, but are not convertible.  The content of this array should be respected as is and not converted.  ```                                 ```  Leads to:  ``` Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'traceResourceFinders': Initialization of bean failed; nested exception is org.springframework.beans.TypeMismatchException: Failed to convert property value of type 'java.util.ArrayList' to required type 'java.util.List' for property 'sourceList'; nested exception is org.springframework.core.convert.ConversionFailedException: Unable to convert value [com.springsource.insight.repo.analysis.EndPointFinder@586f87, com.springsource.insight.repo.analysis.ApplicationFinder@20b52, com.springsource.insight.repo.analysis.ApplicationInstanceFinder@3540ce, com.springsource.insight.repo.analysis.ApplicationInstanceEndPointFinder@31ac15, com.springsource.insight.repo.analysis.ServerFinder@18ac57] from type 'java.util.ArrayList' to type 'java.util.List'; nested exception is org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from [com.springsource.insight.repo.analysis.EndPointFinder] to [com.springsource.insight.repo.analysis.ApplicationFinder] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:527) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:291) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:288) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190) 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:322) 	... 81 more Caused by: org.springframework.beans.TypeMismatchException: Failed to convert property value of type 'java.util.ArrayList' to required type 'java.util.List' for property 'sourceList'; nested exception is org.springframework.core.convert.ConversionFailedException: Unable to convert value [com.springsource.insight.repo.analysis.EndPointFinder@586f87, com.springsource.insight.repo.analysis.ApplicationFinder@20b52, com.springsource.insight.repo.analysis.ApplicationInstanceFinder@3540ce, com.springsource.insight.repo.analysis.ApplicationInstanceEndPointFinder@31ac15, com.springsource.insight.repo.analysis.ServerFinder@18ac57] from type 'java.util.ArrayList' to type 'java.util.List'; nested exception is org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from [com.springsource.insight.repo.analysis.EndPointFinder] to [com.springsource.insight.repo.analysis.ApplicationFinder] 	at org.springframework.beans.BeanWrapperImpl.convertIfNecessary(BeanWrapperImpl.java:457) 	at org.springframework.beans.BeanWrapperImpl.convertForProperty(BeanWrapperImpl.java:499) 	at org.springframework.beans.BeanWrapperImpl.convertForProperty(BeanWrapperImpl.java:493) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.convertForProperty(AbstractAutowireCapableBeanFactory.java:1363) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1322) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1076) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:517) 	... 87 more Caused by: org.springframework.core.convert.ConversionFailedException: Unable to convert value [com.springsource.insight.repo.analysis.EndPointFinder@586f87, com.springsource.insight.repo.analysis.ApplicationFinder@20b52, com.springsource.insight.repo.analysis.ApplicationInstanceFinder@3540ce, com.springsource.insight.repo.analysis.ApplicationInstanceEndPointFinder@31ac15, com.springsource.insight.repo.analysis.ServerFinder@18ac57] from type 'java.util.ArrayList' to type 'java.util.List'; nested exception is org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from [com.springsource.insight.repo.analysis.EndPointFinder] to [com.springsource.insight.repo.analysis.ApplicationFinder] 	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:40) 	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:187) 	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:141) 	at org.springframework.beans.BeanWrapperImpl.convertIfNecessary(BeanWrapperImpl.java:447) 	... 93 more Caused by: org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from [com.springsource.insight.repo.analysis.EndPointFinder] to [com.springsource.insight.repo.analysis.ApplicationFinder] 	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:180) 	at org.springframework.core.convert.support.CollectionToCollectionConverter.convert(CollectionToCollectionConverter.java:63) 	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:37) 	... 96 more ```    ---  **Affects:** 3.0.3  **Attachments:** - [SPR-7283.patch](https://jira.spring.io/secure/attachment/16707/SPR-7283.patch) (_3.56 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/902938e95f19b7547421064720b016ba49e3c02e, https://github.com/spring-projects/spring-framework/commit/0e59fc4a158cd16b416b0c969ae319eb89f41e88","closed","type: bug,","spring-projects-issues","2010-06-14T04:49:43Z","2012-06-19T03:43:09Z"
"","14632","exposeForwardAttributes in TilesView should be protected or should have public setter [SPR-9998]","**[Saravanan Somu](https://jira.spring.io/secure/ViewProfile.jspa?name=spsaran)** opened **[SPR-9998](https://jira.spring.io/browse/SPR-9998?redirect=false)** and commented  In portlet container which has Servlet container 2.5, Tiles is not rendering. No error and loads blank page.  As per Rossen Stoyanchev, TilesView exposes a few standard forward request attributes in case the servlet container doesn't properly do that itself. This is based on the flag exposeForwardAttributes, which is set to true for pre-2.5 servlet container. When TilesView exposes these attributes the forward works ok. So my guess is that the container I'm using Pluto 2.x does not do that itself. You can try to set this flag to true by overriding TilesView.initServletContext(ServletContext).  exposeForwardAttributes is private and there is no public setter for that. Please make this variable as protected or add public setter for that.  Thanks.   ---  **Affects:** 3.1.3  **Reference URL:** http://forum.springsource.org/showthread.php?p=336160#post336160","closed","type: enhancement,","spring-projects-issues","2010-12-28T09:21:34Z","2015-09-22T18:55:04Z"
"","12066","HandlerInterceptor improvement - insufficient context (no handler method) information  [SPR-7408]","**[sandstorm](https://jira.spring.io/secure/ViewProfile.jspa?name=sandstorm)** opened **[SPR-7408](https://jira.spring.io/browse/SPR-7408?redirect=false)** and commented  When implementing `@Controllers`, one may have multiple handling methods, as opposed to the old fashion Controller-interface style-based ones.  The problem is that when implementing HandlerInterceptors one may not infer the handling method being invoked. For example if one wants to check if the current handling method being invoked has been annotated, thats impossible, and is 'of importance'.  Consider this method signature:  public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {  Currently the handler parameter represents the controller class and not any particular handling method. The actual proposal is this Object to be of class java.lang.Method if the class implementing that is annotated with `@Controller`, instead of implementing the Controller interface, otherwise it may retain the current semantics for compatibility reasons.  It is expected that in the case being discussed the Object handler parameter currently provides no benefit, and is of no use to anybody implementing a `@Controller`, therefore it is expected not to introduce any backwards compatibility issues thereof.  Several workarounds have been researched but this solution remains of particular neatness and simplicity.  The solution implementation is estimated to be simple, and cheap in terms of time, so please, Spring fellows, do something.  Thank you.   ---  2 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2010-07-30T09:15:34Z","2019-01-11T14:04:21Z"
"","12435","Vulnerability in LocaleChangeInterceptor [SPR-7779]","**[Sandro Ruch](https://jira.spring.io/secure/ViewProfile.jspa?name=sruch)** opened **[SPR-7779](https://jira.spring.io/browse/SPR-7779?redirect=false)** and commented  The current implementation of the LocaleChangeInterceptor does not an escaping of the value from the request. This can lead to a XSS issue if you use the standard implementation and you call:  http://someUrl?locale=%0D%0AContent-length:30%0D%0A%0D%0A%3Cscript%3Ealert%28123%29%3C/script%3E  In this case some component (which one??) of the framework will write a http-response header for the Content-language and write the provided header instead (Content-length here 30 byte) with content (here a javascript) before of the real content of the site!  Please find a patched version as attachment.  ---  **Affects:** 3.0.5  **Attachments:** - [LocaleChangeInterceptor.java](https://jira.spring.io/secure/attachment/17418/LocaleChangeInterceptor.java) (_3.43 kB_) - [LocaleChangeInterceptor.patch](https://jira.spring.io/secure/attachment/17502/LocaleChangeInterceptor.patch) (_1.08 kB_)  **Issue Links:** - #19283 StringUtils.parseLocaleString(): does not parse locale string in java 7 for Serbian (Latin)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7af890cc5f5ef28928ff050cc646303fdb49fd3a, https://github.com/spring-projects/spring-framework/commit/f4a2282d9d9f6e58029022c58311a1db07f7defc  3 votes, 5 watchers","closed","type: bug,","spring-projects-issues","2010-12-01T06:09:08Z","2019-01-11T15:32:30Z"
"","12871","Upgrade to JUnit 4.9 [SPR-8222]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-8222](https://jira.spring.io/browse/SPR-8222?redirect=false)** and commented  Track the progress of JUnit 4.9. Once it's released ensure that the Spring test suite builds and runs against it.  The issue depends on [EBR-742](https://issuetracker.springsource.com/browse/EBR-742).  ---  **Issue Links:** - #13265 Upgrade to JUnit 4.8.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f6483cad3c6334885b25a0b2280ad99f453106e8, https://github.com/spring-projects/spring-framework/commit/1de71c6e37ac4b1a5610aca499f0bbb3a0309a9b","closed","type: task,","spring-projects-issues","2011-04-06T16:54:34Z","2019-01-11T13:07:06Z"
"","12870","Upgrade to TestNG 6.5.2 [SPR-8221]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-8221](https://jira.spring.io/browse/SPR-8221?redirect=false)** and commented  Upgrade Spring's testing suite to build and run against TestNG 6.5.2.  ---  **Issue Links:** - #14034 Ensure that both JUnit and TestNG tests are executed in the Gradle build - #13915 Upgrade to JUnit 4.10  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/75578d4e88fd1a907802950b5b7daf271a5528e8  1 votes, 1 watchers","closed","type: task,","spring-projects-issues","2011-04-06T16:50:19Z","2019-01-11T13:06:57Z"
"","12748","Install jmxremote_optional.jar in JVM used for Spring CI builds [SPR-8093]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-8093](https://jira.spring.io/browse/SPR-8093?redirect=false)** and commented  #### Status Quo  At the moment, several of our JMX tests cannot be run on the CI server. See the [broken tests here](https://build.springsource.org/chain/viewChainResult.action?planKey=SPR-TRUNKQUICK&buildNumber=3489) (**) for an example.  Thus we have had to _disable_ them directly in the code. Otherwise, we get an _""Unsupported protocol: jmxmp""_ error.  The reason is that the `jmxremote_optional.jar` is not available in the classpath of the JVM.  #### Related Resources  - [EBR-349](https://issuetracker.springsource.com/browse/EBR-349) (**)  - `jmxremote_optional.jar` can be acquired from Oracle in the _[JMX Remote API 1.0.1_04 Reference Implementation](http://www.oracle.com/technetwork/java/javase/tech/download-jsp-141676.html)_ (**) download.  #### Notes  To solve this problem on my Mac workstation, I downloaded the _JMX Remote API 1.0.1_04 Reference Implementation_ (see link above) and extracted `jmxremote_optional.jar` into the `lib/ext` folder of my local JVM.  (**) denotes an _invisible_ link.  ---  **Issue Links:** - #12744 Clean up ignored JMX tests (_**""is depended on by""**_) - #13231 org.springframework.jmx.export.NotificationListenerTests is marked `@Ignore` but extends TestCase in 3.0.x branch","closed","type: task,","spring-projects-issues","2011-03-28T11:53:54Z","2019-01-13T07:10:33Z"
"","12747","Clean up ignored ORM tests [SPR-8092]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-8092](https://jira.spring.io/browse/SPR-8092?redirect=false)** and commented   --- No further details from [SPR-8092](https://jira.spring.io/browse/SPR-8092?redirect=false)","closed","in: core,","spring-projects-issues","2011-03-28T11:15:56Z","2012-06-19T03:39:53Z"
"","12746","NotificationListenerBean constructor accepts null NotificationListener [SPR-8091]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-8091](https://jira.spring.io/browse/SPR-8091?redirect=false)** and commented  #### Summary  `NotificationListenerBean(NotificationListener)` accepts a `null` argument.  This is typically acceptable, since the listener can be set later via the `setNotificationListener()` method; however, this breaks the `MBeanExporterTests.ignoreTestRegisterNullNotificationListenerType()` test. Thus it was obviously once expected that passing a `null` argument to the constructor would result in an `IllegalArgumentException`.  Note that `NotificationListenerBean`'s `afterPropertiesSet()` method does in fact check that the listener is non-null, but it may potentially not get called as is the case with the failing test.  #### TODO  - Determine if it's desired that `NotificationListenerBean(NotificationListener)` accepts a `null` argument. - If it is desired, delete the `MBeanExporterTests.ignoreTestRegisterNullNotificationListenerType()` test method. - If it's not desired, assert that the argument is non-null and reinstate the `MBeanExporterTests.ignoreTestRegisterNullNotificationListenerType()` test method (i.e., rename it to `testRegisterNullNotificationListenerType()`).    --- No further details from [SPR-8091](https://jira.spring.io/browse/SPR-8091?redirect=false)","closed","in: core,","spring-projects-issues","2011-03-28T11:07:25Z","2012-06-19T03:39:27Z"
"","12745","Fix broken tests in Log4jWebConfigurerTests [SPR-8090]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-8090](https://jira.spring.io/browse/SPR-8090?redirect=false)** and commented   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d6be4c5a2ad78d28bd2bc0fc325c85c91067e62c","closed","type: task,","spring-projects-issues","2011-03-28T08:27:48Z","2012-06-19T03:39:22Z"
"","12744","Clean up ignored JMX tests [SPR-8089]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-8089](https://jira.spring.io/browse/SPR-8089?redirect=false)** and commented  #### Summary  Most (all?) JMX tests are based on JUnit 3.8; some incorrectly attempt to use JUnit 4's `@Ignore` annotation. Furthermore, some of these _ignored_ tests actually work.  #### Caveat  The JMX test suite requires the presence of the `jmxremote_optional.jar` in order to avoid the ""_Unsupported protocol: jmxmp_"" error.  #### Further Resources  - [EBR-349](https://issuetracker.springsource.com/browse/EBR-349)  - `jmxremote_optional.jar` can be acquired from Oracle in the _[JMX Remote API 1.0.1_04 Reference Implementation](http://www.oracle.com/technetwork/java/javase/tech/download-jsp-141676.html)_ download.  ---  **Issue Links:** - #13104 Make ""timed"" and other environment-sensitive tests optional (_**""depends on""**_) - #12748 Install jmxremote_optional.jar in JVM used for Spring CI builds (_**""depends on""**_) - #13231 org.springframework.jmx.export.NotificationListenerTests is marked `@Ignore` but extends TestCase in 3.0.x branch  1 votes, 1 watchers","closed","in: core,","spring-projects-issues","2011-03-28T07:52:21Z","2019-01-13T07:10:36Z"
"","12687","Introduce TCP & UDP server port scanning utility [SPR-8032]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-8032](https://jira.spring.io/browse/SPR-8032?redirect=false)** and commented  #### Original Title  _Include FreePortScanner in a public module_  #### Status Quo  Spring's `[FreePortScanner](https://github.com/SpringSource/spring-framework/blob/master/spring-web/src/test/java/org/springframework/tests/web/FreePortScanner.java)` currently resides in the test source tree for the web module.  #### Goal  Include the `FreePortScanner` in a public module.  This could be considered a common utility and therefore moved to the `org.springframework.util` package.  Alternatively, if `FreePortScanner` is not included in core, it should at the very least be moved to the test module (e.g., in the `org.springframework.test.util` package) for use with integration tests.   ---  **Issue Links:** - [INT-2564](https://jira.spring.io/browse/INT-2564) Move SocketTestUtils.findAvailableServerSocket to Spring Integration Test Module  7 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2011-03-10T05:50:15Z","2013-07-24T10:17:12Z"
"","12685","Deprecate JUnit 3.8 base classes in the TestContext framework [SPR-8030]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-8030](https://jira.spring.io/browse/SPR-8030?redirect=false)** and commented  As of Spring 3.0, the Spring Framework is based on Java 5. Consequently, there is no longer a compelling reason to maintain code based JUnit 3.8.  `AbstractJUnit38SpringContextTests` and `AbstractTransactionalJUnit38SpringContextTests` in the TestContext framework should therefore be officially deprecated.   ---  **Affects:** 3.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c86bc2671ae95e6dd7d79a2f9cf61365184432c4, https://github.com/spring-projects/spring-framework/commit/657b145ea2b325005ca58376ce4af9dbeaf3e69f, https://github.com/spring-projects/spring-framework/commit/6993a8768a4313e613b7d69c4147f1dbeb29ca1b, https://github.com/spring-projects/spring-framework/commit/c736e6b873c7757d8f614dd8633b3c67292b287f","closed","type: task,","spring-projects-issues","2011-03-09T03:38:07Z","2012-06-19T03:39:40Z"
"","12615","TestContext framework should support declarative configuration of bean definition profiles [SPR-7960]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-7960](https://jira.spring.io/browse/SPR-7960?redirect=false)** and commented  #### Overview  Spring 3.1 introduces support for _bean definition profiles_, such as 'production', 'dev', etc.  The Spring TestContext framework should be extended to support declarative configuration of bean definition profiles on a per-ApplicationContext basis.  One option would be to provide an attribute in the `@ContextConfiguration` annotation to allow the `spring.profiles.active` value to be set declaratively.  #### Further Resources  - [Comment on SpringSource blog](http://blog.springsource.com/2011/02/11/spring-framework-3-1-m1-released/#comment-184808)  #### Example Tests Using `@ActiveProfiles`  The following examples -- which are taken from the Spring test suite -- show how to declare which active profiles to use when loading an application context via the new `@ActiveProfiles` annotation.  ---  ##### Testing Active Profiles with `@Configuration` Classes  \\ - `DefaultProfileConfig`: `@Configuration` class without a `@Profile` declaration - `DevProfileConfig`: `@Configuration` class with a `@Profile(""dev"")` declaration - `DefaultProfileAnnotationConfigTests`: JUnit 4 test that instructs the TestContext framework to load an application context from both the `DefaultProfileConfig` and `DevProfileConfig` `@Configuration` classes - `DevProfileAnnotationConfigTests`: extends `DefaultProfileAnnotationConfigTests` and instructs the TestContext framework to activate the ""_dev_"" profile via `@ActiveProfiles(""dev"")`  Note that the autowired `employee` is `null` in `DefaultProfileAnnotationConfigTests` but **not** `null` in `DevProfileAnnotationConfigTests`; whereas, the `pet` is non-null for both the _default_ and _dev_ profile.  ``` @Configuration public class DefaultProfileConfig {  	@Bean 	public Pet pet() { 		return new Pet(""Fido""); 	} } ```  \\  ``` @Profile(""dev"") @Configuration public class DevProfileConfig {  	@Bean 	public Employee employee() { 		Employee employee = new Employee(); 		employee.setName(""John Smith""); 		employee.setAge(42); 		employee.setCompany(""Acme Widgets, Inc.""); 		return employee; 	} } ```  \\  ``` @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(classes = { DefaultProfileConfig.class, DevProfileConfig.class },   loader = AnnotationConfigContextLoader.class) public class DefaultProfileAnnotationConfigTests {  	@Autowired 	protected Pet pet;  	@Autowired(required = false) 	protected Employee employee;  	@Test 	public void pet() { 		assertNotNull(pet); 		assertEquals(""Fido"", pet.getName()); 	}  	@Test 	public void employee() { 		assertNull(""employee bean should not be created for the default profile"", employee); 	} } ```  \\  ``` @ActiveProfiles(""dev"") public class DevProfileAnnotationConfigTests extends DefaultProfileAnnotationConfigTests {  	@Test 	@Override 	public void employee() { 		assertNotNull(""employee bean should be loaded for the 'dev' profile"", employee); 		assertEquals(""John Smith"", employee.getName()); 	}  } ```  ---  ##### Testing Active Profiles with XML Configuration  \\ The `DefaultProfileXmlConfigTests` and `DevProfileXmlConfigTests` classes are analogous to the `DefaultProfileAnnotationConfigTests` and `DevProfileAnnotationConfigTests` classes described above. The difference is that both of these test classes use the XML-based configuration found in `DefaultProfileXmlConfigTests-context.xml`, which combines the declaration of the _default_ and _dev_ profiles in a single XML file. Otherwise, the use of `@ActiveProfiles` and the behavior of the tests is identical.  ```xml                                                                                             ```  \\  ``` @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration public class DefaultProfileXmlConfigTests {  	@Autowired 	protected Pet pet;  	@Autowired(required = false) 	protected Employee employee;   	@Test 	public void pet() { 		assertNotNull(pet); 		assertEquals(""Fido"", pet.getName()); 	}  	@Test 	public void employee() { 		assertNull(""employee bean should not be created for the default profile"", employee); 	} } ```  \\  ``` @ActiveProfiles(""dev"") public class DevProfileXmlConfigTests extends DefaultProfileXmlConfigTests {  	@Test 	@Override 	public void employee() { 		assertNotNull(""employee bean should be loaded for the 'dev' profile"", employee); 		assertEquals(""John Smith"", employee.getName()); 	}  } ```  ---  **Affects:** 3.1 M1  **Issue Links:** - #13033 Introduce SmartContextLoader SPI (_**""depends on""**_) - #12410 Decide what to do with `@IfProfileValue` - #10852 Provide TestContext support for `@Configuration` classes - #9538 Introduce strategy for determining if a profile value is enabled for a particular test environment  5 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2011-02-13T10:07:54Z","2019-01-13T07:11:15Z"
"","12608","BeanDefinitionVisitor does not actually visit factory method names [SPR-7953]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-7953](https://jira.spring.io/browse/SPR-7953?redirect=false)** and commented   ---  **Affects:** 3.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c9c436128fad56c83a45d8aec9e9e2416d780dff, https://github.com/spring-projects/spring-framework/commit/c84ef76fc3ae492932cde7a08796458da2ce14cc","closed","in: core,","spring-projects-issues","2011-02-10T04:34:29Z","2012-06-19T03:39:35Z"
"","12508","Upgrade to TestNG 5.12.1 [SPR-7851]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-7851](https://jira.spring.io/browse/SPR-7851?redirect=false)** and commented  See https://issuetracker.springsource.com/browse/EBR-618   ---  **Affects:** 3.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b130a36af7a5c90ae6276a36bb8cd337549121db","closed","type: task,","spring-projects-issues","2010-12-29T21:29:02Z","2012-06-19T03:39:55Z"
"","12507","Upgrade to JUnit 4.8.1 [SPR-7850]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-7850](https://jira.spring.io/browse/SPR-7850?redirect=false)** and commented  See https://issuetracker.springsource.com/browse/EBR-617   ---  **Affects:** 3.0.5","closed","type: task,","spring-projects-issues","2010-12-29T21:28:28Z","2012-06-19T03:39:19Z"
"","12506","Revise testing chapter based on internal review [SPR-7849]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-7849](https://jira.spring.io/browse/SPR-7849?redirect=false)** and commented  Rob Harrop reviewed the testing chapter in September 2009.  Review his comments and revise the testing chapter accordingly.   ---  **Affects:** 3.0.5","closed","type: enhancement,","spring-projects-issues","2010-12-29T19:42:34Z","2012-06-19T03:39:48Z"
"","12505","Improve readability and formatting of the Container Extension Points section of the reference manual [SPR-7848]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-7848](https://jira.spring.io/browse/SPR-7848?redirect=false)** and commented   ---  **Affects:** 3.0.5","closed","type: enhancement,","spring-projects-issues","2010-12-29T18:48:15Z","2012-06-19T03:39:54Z"
"","12483","Provide meta-annotation support for test-related annotations [SPR-7827]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-7827](https://jira.spring.io/browse/SPR-7827?redirect=false)** and commented  #### Overview  Spring 3.0 already allows component stereotypes to be used in a _meta-annotation_ fashion, for example by creating a custom `@TransactionalService` stereotype annotation which combines `@Transactional` and `@Service` in a single, reusable, application-specific annotation.  As mentioned in various forums, [a JIRA comment](https://jira.springsource.org/browse/SPR-7754?focusedCommentId=61545&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#action_61545), and discussions I've had with Spring users, it would be beneficial to provide similar _meta-annotation_ support for test-related annotations.  Given a custom `@TransactionalTest` stereotype annotation (see code listing below), multiple test classes in the application's test suite could rely on centralized configuration of the context and transaction configuration and thus avoid unnecessary duplication. See `UserRepositoryIntegrationTests` for an example.  ###### Notes on JUnit  Naturally, Spring cannot provide meta-annotation support for JUnit's `@RunWith` annotation, since `@RunWith` is processed by JUnit internals. Developers would therefore still be required to specify `SpringJUnit4ClassRunner` as the runner for each individual test class.  ---  #### Deliverables  Provide meta-annotation support for the following annotations within the context of the TestContext framework.  1. [x] `@ContextConfiguration` 2. [x] `@WebAppConfiguration` 3. [x] `@ContextHierarchy` 4. [x] `@ActiveProfiles` 5. [x] `@DirtiesContext` 6. [x] `@TestExecutionListeners` 7. [x] `@IfProfileValue` 8. [x] `@ProfileValueSourceConfiguration` 9. [x] `@Transactional` 10. [x] `@BeforeTransaction` 11. [x] `@AfterTransaction` 12. [x] `@TransactionConfiguration` 13. [x] `@Rollback` 14. [x] `@Repeat` 15. [x] `@Timed`  ---  #### Code Examples  ``` @Transactional @ContextConfiguration({""/app-config.xml"", ""/test-data-access-config.xml""}) public @interface TransactionalTest {} ```  ``` @TransactionalTest @RunWith(SpringJUnit4ClassRunner.class) public class UserRepositoryIntegrationTests { /* ... */ } ```  ---  #### Further Resources  - JUnit: [All JUnit annotations should be able to be applied as meta-annotations](https://github.com/junit-team/junit/issues/194/) - JUnit: [@RunWith(MetaAnnotations.class)](https://github.com/junit-team/junit/issues/202)  ---  **Affects:** 3.0.5  **Issue Links:** - #15735 Document meta-annotation support in the TestContext framework (_**""is depended on by""**_) - #16081 ContextLoader is supplied composed annotation class instead of test class for default resource detection - #15734 Support composed annotations declared on interfaces - #15666 Support meta-annotation attribute overrides in the TestContext framework  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5e7021f3f7775a4382cb9b9d2a3072a40c1b637b, https://github.com/spring-projects/spring-framework/commit/2bd5a535e1e6dbae83b016376ffe114dc5cb1384, https://github.com/spring-projects/spring-framework/commit/412f74f679862cd2acc2f1794adcfee2c08b0d3f  8 votes, 11 watchers","closed","type: enhancement,","spring-projects-issues","2010-12-17T19:49:14Z","2019-01-13T07:11:48Z"
"","12107","Regression in ResourceDatabasePopulator: no longer supports newlines within statement properly [SPR-7449]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-7449](https://jira.spring.io/browse/SPR-7449?redirect=false)** and commented  #### Status Quo  The following lines from an SQL script worked with the `EmbeddedDatabaseBuilder` until I updated to the latest nightly snapshot (`org.springframework.jdbc-3.0.4.BUILD-20100810.004442-53`).  ``` INSERT INTO users(email_address, password, first_name, last_name, roles) values('sam.brannen@example.com', '$pr!ng', 'Sam', 'Brannen', 'ROLE_USER,ROLE_ADMIN'); ```  Execution of this script results in the following stacktrace:  ``` org.springframework.dao.DataAccessResourceFailureException: Failed to populate database; nested exception is java.sql.SQLException: Unexpected token INTOUSERS, requires INTO in statement [INSERT INTOusers] 	at org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactory.populateDatabase(EmbeddedDatabaseFactory.java:158) 	at org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactory.initDatabase(EmbeddedDatabaseFactory.java:138) 	at org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactory.getDatabase(EmbeddedDatabaseFactory.java:114) 	at org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder.build(EmbeddedDatabaseBuilder.java:112) ```  Removing the newline between `INTO` and `users` (as in the following script) works. Thus, recent changes (from 3.0.3 - 3.0.4) now swallow `\n` in SQL scripts, effectively concatenating adjacent lines.  ``` INSERT INTO users(email_address, password, first_name, last_name, roles) values('sam.brannen@example.com', '$pr!ng', 'Sam', 'Brannen', 'ROLE_USER,ROLE_ADMIN'); ```  #### Proposed Solution  `ResourceDatabasePopulator` should be modified to properly interpret _empty lines_ in contrast to simply swallowing all `\n` characters.   ---  **Affects:** 3.0.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1503a139e2ccb34c38bd4f3c506ffabea037881f, https://github.com/spring-projects/spring-framework/commit/e3400f77c94aec2aee6cc6806777ffd9e3464423","closed","in: core,","spring-projects-issues","2010-08-10T14:11:06Z","2012-06-19T03:42:44Z"
"","11981","SpEL: 'select last' operator for maps has inconsistent behavior [SPR-7323]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-7323](https://jira.spring.io/browse/SPR-7323?redirect=false)** and commented  The inconsistent behavior is due to improper tracking of the `lastKey` for maps in `Selection.getValueInternal(ExpressionState)`.  The following can be used to reproduce the bug:  ``` class MapTestBean {  	private final Map colors = new TreeMap();  	MapTestBean() { 		colors.put(""red"", ""rot""); 		colors.put(""brown"", ""braun""); 		colors.put(""blue"", ""blau""); 		colors.put(""yellow"", ""gelb""); 		colors.put(""beige"", ""beige""); 	}  	public Map getColors() { 		return colors; 	} } ```  ``` EvaluationContext context = new StandardEvaluationContext(new MapTestBean()); ExpressionParser parser = new SpelExpressionParser();  Expression exp = parser.parseExpression(""colors.$[key.startsWith('b')]""); Map colorsMap = (Map) exp.getValue(context);  assertEquals(1, colorsMap.size()); assertEquals(""brown"", colorsMap.keySet().iterator().next()); ```  The above test currently fails with:  ``` org.junit.ComparisonFailure: expected: but was: ```    ---  **Affects:** 3.0.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8bd0633697ce65445357d16fddedc6cbdbf44ce0, https://github.com/spring-projects/spring-framework/commit/db7531be607c5b7f09d1f9edd79f38d147305f44","closed","in: core,","spring-projects-issues","2010-06-26T04:32:19Z","2012-06-19T03:43:29Z"
"","12479","Optional Autowiring of Lists [SPR-7823]","**[Sajid Insaf](https://jira.spring.io/secure/ViewProfile.jspa?name=sajidinsaf)** opened **[SPR-7823](https://jira.spring.io/browse/SPR-7823?redirect=false)** and commented  I am trying to autowire a List but I want the Autowiring to be optional.  It is known that `@Autowired` does not work for List beans created through the util namespace so I am using javax.annotation.Resource to autowire the list.  However unlike `@Autowired`(required=false) I could not find an option to make the javax.annotation.Resource autowiring false.  Is there any way to do this? If not, can such a feature be provided?  Example:  This will throw an exception:  ---  package com.ex; public class B { `@Autowired`(required=false) `@Qualifier`(""aList"") List\ aList;      public List getAll() {        return aList;      }  }  \  \    \val1\    \val2\       \  This will work but the list can't be optional:  ---  package com.ex; public class B {       @javax.annotation.Resource(name=""aList"")      List aList;           public List getAll() {         return aList;       }  }  \  \    \val1\    \val2\       \  ---  **Reference URL:** http://forum.springsource.org/showthread.php?t=99804  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2010-12-16T08:52:44Z","2019-01-13T07:11:51Z"
"","12111","Spring can't find lower visibility constructor if a public default constructor exits [SPR-7453]","**[Sajid Insaf](https://jira.spring.io/secure/ViewProfile.jspa?name=sajidinsaf)** opened **[SPR-7453](https://jira.spring.io/browse/SPR-7453?redirect=false)** and commented  Spring appears to be unable to find constructors with arguments and access modifier less than public when default public constructor is present.  Consider the class:  package test; public SimpleBean { public SimpleBean() {} private SimpleBean(String x) {} }  Context configuration: \ \ \  Spring throws the following exception:  org.springframework.beans.factory.BeanCreationExce ption: Error creating bean with name 'simpleBean' defined in class path resource [test/Test-context.xml]: 1 constructor arguments specified but no matching constructor found in bean 'simpleBean' (hint: specify index and/or type arguments for simple parameters to avoid type ambiguities)  Everything works fine (no exceptions) if 1. The public default constructor is removed or its signature is changed to accept some argument. 2. The access modifier of the zero argument constructor is anything less than public.    ---  **Affects:** 2.5.6  **Reference URL:** http://forum.springsource.org/showthread.php?t=93609  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8a23ce917afb6cd19996508521a27f8ea97db29d","closed","in: core,","spring-projects-issues","2010-08-11T10:01:07Z","2012-06-19T03:44:13Z"
"","12323","RestTemplate API is misleading when it comes to url variable passing [SPR-7667]","**[Rune Lien](https://jira.spring.io/secure/ViewProfile.jspa?name=rulien)** opened **[SPR-7667](https://jira.spring.io/browse/SPR-7667?redirect=false)** and commented  The API on the RestTemplate is misleading when it comes to variable passing  When Map is used you would expect it to be possible to send an impl of HashMap without any issues , but since expand of URI code is  ``` Object[] values = new String[this.variableNames.size()]; 		for (int i = 0; i < this.variableNames.size(); i++) { 			String name = this.variableNames.get(i); 			if (!uriVariables.containsKey(name)) { 				throw new IllegalArgumentException(""'uriVariables' Map has no value for '"" + name + ""'""); 			} 			values[i] = uriVariables.get(name); 		} ```  you cannot ever send anything else but String.  The API should in my opinion be e.g public \ T getForObject(String url, Class\ responseType, Map urlVariables) ---> public \ T getForObject(String url, Class\ responseType, Map urlVariables)  To make it clear that String is the only allowed parameter value and to make impl take care of String conversion.   ---  **Affects:** 3.0.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a37a9e8a38cb91330c39d98dfac66647e1436afe","closed","type: bug,","spring-projects-issues","2010-10-20T04:51:59Z","2012-06-19T03:39:54Z"
"","12385","MediaType incorrectly calls the toString() method instead of name() method causing RestTemplate on Android to fail [SPR-7729]","**[Roy Clarkson](https://jira.spring.io/secure/ViewProfile.jspa?name=rclarkson)** opened **[SPR-7729](https://jira.spring.io/browse/SPR-7729?redirect=false)** and commented  While working on implementing RestTemplate on Android, we identified an issue with the instantiation of the StringHttpMessageConverter class.  It creates a new MediaType, passing it a Charset object.  toString() is called on this Charset object internally to MediaType, however the name() method should be used instead, as it returns the canonical name of the charset.  This appears to be a real problem on the Android platform as toString() does not return the canonical name of the charset.  This is currently preventing the release of RestTemplate for Android.  Thanks for the help.  Below you can see the stack trace where charset cannot be identified correctly.  11-09 17:01:12.643: ERROR/AndroidRuntime(598): FATAL EXCEPTION: main 11-09 17:01:12.643: ERROR/AndroidRuntime(598): java.lang.RuntimeException: Unable to start activity ComponentInfo{com.springsource.greenhouse/com.springsource.greenhouse.activities.ProfileActivity}: java.nio.charset.IllegalCharsetNameException: The illegal charset name is ""Charset[ISO-8859-1]"". 11-09 17:01:12.643: ERROR/AndroidRuntime(598):     at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2663) 11-09 17:01:12.643: ERROR/AndroidRuntime(598):     at android.app.ActivityThread.startActivityNow(ActivityThread.java:2503) 11-09 17:01:12.643: ERROR/AndroidRuntime(598):     at android.app.LocalActivityManager.moveToState(LocalActivityManager.java:127) 11-09 17:01:12.643: ERROR/AndroidRuntime(598):     at android.app.LocalActivityManager.startActivity(LocalActivityManager.java:339) 11-09 17:01:12.643: ERROR/AndroidRuntime(598):     at android.widget.TabHost$IntentContentStrategy.getContentView(TabHost.java:651) 11-09 17:01:12.643: ERROR/AndroidRuntime(598):     at android.widget.TabHost.setCurrentTab(TabHost.java:323) 11-09 17:01:12.643: ERROR/AndroidRuntime(598):     at android.widget.TabHost$2.onTabSelectionChanged(TabHost.java:129) 11-09 17:01:12.643: ERROR/AndroidRuntime(598):     at android.widget.TabWidget$TabClickListener.onClick(TabWidget.java:453) 11-09 17:01:12.643: ERROR/AndroidRuntime(598):     at android.view.View.performClick(View.java:2408) 11-09 17:01:12.643: ERROR/AndroidRuntime(598):     at android.view.View$PerformClick.run(View.java:8816) 11-09 17:01:12.643: ERROR/AndroidRuntime(598):     at android.os.Handler.handleCallback(Handler.java:587) 11-09 17:01:12.643: ERROR/AndroidRuntime(598):     at android.os.Handler.dispatchMessage(Handler.java:92) 11-09 17:01:12.643: ERROR/AndroidRuntime(598):     at android.os.Looper.loop(Looper.java:123) 11-09 17:01:12.643: ERROR/AndroidRuntime(598):     at android.app.ActivityThread.main(ActivityThread.java:4627) 11-09 17:01:12.643: ERROR/AndroidRuntime(598):     at java.lang.reflect.Method.invokeNative(Native Method) 11-09 17:01:12.643: ERROR/AndroidRuntime(598):     at java.lang.reflect.Method.invoke(Method.java:521) 11-09 17:01:12.643: ERROR/AndroidRuntime(598):     at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:868) 11-09 17:01:12.643: ERROR/AndroidRuntime(598):     at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:626) 11-09 17:01:12.643: ERROR/AndroidRuntime(598):     at dalvik.system.NativeStart.main(Native Method) 11-09 17:01:12.643: ERROR/AndroidRuntime(598): Caused by: java.nio.charset.IllegalCharsetNameException: The illegal charset name is ""Charset[ISO-8859-1]"". 11-09 17:01:12.643: ERROR/AndroidRuntime(598):     at java.nio.charset.Charset.checkCharsetName(Charset.java:202) 11-09 17:01:12.643: ERROR/AndroidRuntime(598):     at java.nio.charset.Charset.forNameInternal(Charset.java:461) 11-09 17:01:12.643: ERROR/AndroidRuntime(598):     at java.nio.charset.Charset.forName(Charset.java:542) 11-09 17:01:12.643: ERROR/AndroidRuntime(598):     at org.springframework.http.MediaType.checkParameters(MediaType.java:299) 11-09 17:01:12.643: ERROR/AndroidRuntime(598):     at org.springframework.http.MediaType.\(MediaType.java:263) 11-09 17:01:12.643: ERROR/AndroidRuntime(598):     at org.springframework.http.MediaType.\(MediaType.java:218) 11-09 17:01:12.643: ERROR/AndroidRuntime(598):     at org.springframework.http.converter.StringHttpMessageConverter.\(StringHttpMessageConverter.java:51) 11-09 17:01:12.643: ERROR/AndroidRuntime(598):     at org.springframework.web.client.RestTemplate.\(RestTemplate.java:139) 11-09 17:01:12.643: ERROR/AndroidRuntime(598):     at org.springframework.web.client.RestTemplate.\(RestTemplate.java:164) 11-09 17:01:12.643: ERROR/AndroidRuntime(598):     at org.springframework.social.greenhouse.GreenhouseTemplate.\(GreenhouseTemplate.java:106) 11-09 17:01:12.643: ERROR/AndroidRuntime(598):     at com.springsource.greenhouse.util.Prefs.getGreenhouseOperations(Prefs.java:111) 11-09 17:01:12.643: ERROR/AndroidRuntime(598):     at com.springsource.greenhouse.activities.ProfileActivity.refreshProfile(ProfileActivity.java:78) 11-09 17:01:12.643: ERROR/AndroidRuntime(598):     at com.springsource.greenhouse.activities.ProfileActivity.onStart(ProfileActivity.java:46) 11-09 17:01:12.643: ERROR/AndroidRuntime(598):     at android.app.Instrumentation.callActivityOnStart(Instrumentation.java:1129) 11-09 17:01:12.643: ERROR/AndroidRuntime(598):     at android.app.Activity.performStart(Activity.java:3781) 11-09 17:01:12.643: ERROR/AndroidRuntime(598):     at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2636) 11-09 17:01:12.643: ERROR/AndroidRuntime(598):     ... 18 more   ---  **Affects:** 3.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/465e093bfbfb511c328e739cecbddd16cf74454d","closed","type: bug,","spring-projects-issues","2010-11-09T14:30:02Z","2012-06-19T03:39:12Z"
"","12868","Update Spring Web documentation following HandlerMethod changes [SPR-8218]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-8218](https://jira.spring.io/browse/SPR-8218?redirect=false)** and commented  ---  **Affects:** 3.1 M1  This issue is a sub-task of #12864  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/127115671ccafb5bc10be2ce2e3a4c0722c79eca","closed","type: task,","spring-projects-issues","2011-04-06T05:24:58Z","2019-01-11T13:07:50Z"
"","12867","Update MVC namespace to use HandlerMethod infrastructure [SPR-8217]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-8217](https://jira.spring.io/browse/SPR-8217?redirect=false)** and commented  ---  **Affects:** 3.1 M1  This issue is a sub-task of #12864","closed","type: task,","spring-projects-issues","2011-04-06T05:21:03Z","2019-01-11T13:07:51Z"
"","12866","Create a version of ServletAnnotationControllerTests that runs with HandlerMethod infrastructure [SPR-8216]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-8216](https://jira.spring.io/browse/SPR-8216?redirect=false)** and commented  ---  This issue is a sub-task of #12864","closed","type: task,","spring-projects-issues","2011-04-06T04:25:51Z","2019-01-11T13:07:30Z"
"","12865","Move code into trunk [SPR-8215]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-8215](https://jira.spring.io/browse/SPR-8215?redirect=false)** and commented  ---  **Affects:** 3.1 M1  This issue is a sub-task of #12864","closed","type: task,","spring-projects-issues","2011-04-06T04:21:56Z","2019-01-11T13:07:33Z"
"","12864","Provide HandlerMethod-based implementations of HandlerMapping, HandlerAdapter, and HandlerExceptionResolver [SPR-8214]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-8214](https://jira.spring.io/browse/SPR-8214?redirect=false)** and commented  With annotation-based processing individual handler methods, more so than handlers, are the endpoints to map to incoming requests.  The purpose of this issue is to provide a HandlerMethod abstraction and along with it provide a HandlerMapping, HandlerAdapter, and HandlerExceptionResolver implementations that support the request mapping, the invocation, and the handling of exceptions for HandlerMethods.  The new classes will not replace the existing DefaultAnnotationHandlerMapping, AnnotationMethodHandlerAdapter, and AnnotationMethodHandlerExceptionResolver but will rather provide a more up-to-date, largely functionally equivalent, and more extensible alternative that will also be configured through the MVC namespace.  ---  **Affects:** 3.0.6, 3.1 M1  **Sub-tasks:** - #12865 Move code into trunk - #12866 Create a version of ServletAnnotationControllerTests that runs with HandlerMethod infrastructure - #12867 Update MVC namespace to use HandlerMethod infrastructure - #12868 Update Spring Web documentation following HandlerMethod changes - #12882 Adapt the existing WebArgumentResolver to the new HandlerMethodArgumentResolver interface from the MVC namespace","closed","type: enhancement,","spring-projects-issues","2011-04-06T04:19:15Z","2019-01-11T13:07:20Z"
"","12567","FormattingConversionServiceFactoryBean enhancements [SPR-7912]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-7912](https://jira.spring.io/browse/SPR-7912?redirect=false)** and commented  FormattingConversionServiceFactoryBean needs to be enhanced to support easy declarative configuration of all the different types of converters and formatters. It should also support programmatic registration for more complex cases through FormatterRegistrars (analogous to PropertyEditorRegistrars for registering PropertyEditors).  ---  **Affects:** 3.0.5  **Issue Links:** - #11111 Provide setters for pattern and dateStyle in FormattingConversionServiceFactoryBean - #11781 Support for custom global Joda DateTimeFormatters - #12388 Make it easier to register custom Formatters  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/abff2b959bf4cce52d4821ae97d66612b4ac6016, https://github.com/spring-projects/spring-framework/commit/149348c90781bde5d5ba77328b2f66c621122288","closed","type: enhancement,","spring-projects-issues","2011-01-26T08:58:47Z","2019-01-11T16:13:19Z"
"","12534","Simplify access to context information in @RequestMapping methods [SPR-7877]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-7877](https://jira.spring.io/browse/SPR-7877?redirect=false)** and commented  `@RequestMapping` methods support flexible method signatures but the size of those method signatures can grow long for a number of reasons. There are quite a few choices, parameters can be annotated, annotations can have attributes, and so on. Having options for more compact handler method signatures would lead to more readable code.  A number of handler method parameters are known ahead of time. Access to these can be provided through an MVC request context:  ```java @RequestMapping(method = RequestMethod.POST) public void processSubmit(MvcRequestContext context) {   context.request();   context.response();   context.session();   context.locale();   context.model();   context.inputStream();   context.outputStream();   context.sessionStatus(); } ```  Access to BindingResult is for a specific ModelAttribute:  ```java @RequestMapping(method = RequestMethod.POST) public void processSubmit(@Valid FormBean formBean, MvcRequestContext context) {   if (context.bindingResult(formBean).hasErrors()) {       // ...    } } ```  Not having to include that in the signature should be even more helpful if access to `@RequestParam` errors is implemented (#10069).  ---  **Affects:** 3.0.5  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2011-01-12T09:57:45Z","2019-01-11T15:22:15Z"
"","12429","Provide a formatter registry capability local to a controller [SPR-7773]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-7773](https://jira.spring.io/browse/SPR-7773?redirect=false)** and commented  Currently a single ConversionService is used globally in a DispatcherServlet. It would be useful for controllers to be able to register converters and formatters locally for a given DataBinder instance without affecting the global ConversionService instance (for example [ROO-1655](https://jira.spring.io/browse/ROO-1655)).  Something along the lines of: DataBinder.getFormatterRegistry().add(..)  ---  **Affects:** 3.0.5  **Issue Links:** - #10737 No way to register Formatter instances by field on DataBinder  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/dc39e3565c312e9c77b24e437834ada8b99b0828, https://github.com/spring-projects/spring-framework/commit/02da2e85ee0e58202b90d11c126e6050abe184b4  4 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2010-11-30T10:25:37Z","2019-01-11T15:31:52Z"
"","12154","Regression in Collection to array conversion [SPR-7496]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-7496](https://jira.spring.io/browse/SPR-7496?redirect=false)** and commented  The following code doesn't work in 3.0.4 but used to work in 3.0.3:  ``` FormattingConversionServiceFactoryBean factoryBean = new FormattingConversionServiceFactoryBean(); factoryBean.afterPropertiesSet(); ConversionService conversionService = factoryBean.getObject(); assertTrue(conversionService.canConvert(Collection.class, Integer[].class)); ```  Output from 3.0.3:  ``` TRACE: GenericConversionService - Checking if I can convert [TypeDescriptor java.util.Collection] to [TypeDescriptor java.lang.Integer[]] TRACE: GenericConversionService - Searching for converters indexed by sourceType [java.util.Collection] TRACE: GenericConversionService - and indexed by targetType [[Ljava.lang.Integer;] TRACE: GenericConversionService - and indexed by targetType [[Ljava.lang.Number;] TRACE: GenericConversionService - and indexed by targetType [[Ljava.lang.Object;] TRACE: GenericConversionService - Found matchable converters CollectionToArrayConverter@b23b25c TRACE: GenericConversionService - Matching CollectionToArrayConverter@b23b25c TRACE: GenericConversionService - Checking if I can convert [TypeDescriptor.NULL] to [TypeDescriptor java.lang.Integer] TRACE: GenericConversionService - Yes, I can convert TRACE: GenericConversionService - Matched converter CollectionToArrayConverter@b23b25c TRACE: GenericConversionService - Caching under ConverterCacheKey [sourceType = [TypeDescriptor java.util.Collection], targetType = [TypeDescriptor java.lang.Integer[]]] TRACE: GenericConversionService - Yes, I can convert ```  Output from 3.0.4 (truncated at the bottom):  ``` TRACE: GenericConversionService - Checking if I can convert [TypeDescriptor java.util.Collection] to [TypeDescriptor java.lang.Integer[]] TRACE: GenericConversionService - Searching for converters indexed by sourceType [java.util.Collection] TRACE: GenericConversionService - and indexed by targetType [[Ljava.lang.Integer;] TRACE: GenericConversionService - and indexed by targetType [[Ljava.lang.Number;] TRACE: GenericConversionService - and indexed by targetType [[Ljava.lang.Object;] TRACE: GenericConversionService - Found matchable converters CollectionToArrayConverter@b23b25c TRACE: GenericConversionService - Matching CollectionToArrayConverter@b23b25c TRACE: GenericConversionService - Checking if I can convert [TypeDescriptor java.lang.Object] to [TypeDescriptor java.lang.Integer] TRACE: GenericConversionService - Searching for converters indexed by sourceType [java.lang.Object] TRACE: GenericConversionService - and indexed by targetType [java.lang.Integer] TRACE: GenericConversionService - and indexed by targetType [java.lang.Comparable] TRACE: GenericConversionService - and indexed by targetType [java.lang.Number] TRACE: GenericConversionService - and indexed by targetType [java.io.Serializable] TRACE: GenericConversionService - and indexed by targetType [java.lang.Object] TRACE: GenericConversionService - Found matchable converters IdToEntityConverter@7546c1d4, ObjectToObjectConverter@785f8172 TRACE: GenericConversionService - Matching IdToEntityConverter@7546c1d4 TRACE: GenericConversionService - Did not match converter IdToEntityConverter@7546c1d4 TRACE: GenericConversionService - Matching ObjectToObjectConverter@785f8172 TRACE: GenericConversionService - Did not match converter ObjectToObjectConverter@785f8172 TRACE: GenericConversionService - Caching NO_MATCH under ConverterCacheKey [sourceType = [TypeDescriptor java.lang.Object], targetType = [TypeDescriptor java.lang.Integer]] TRACE: GenericConversionService - No, I cannot convert TRACE: GenericConversionService - Did not match converter CollectionToArrayConverter@b23b25c ... ```  Notice the difference in the TypeDescriptor built for the source in each case (line 1).  ---  **Affects:** 3.0.4  **Issue Links:** - #12177 SpEL regression with ArrayList to int array conversion  **Referenced from:** commits https://github.com/spring-projects/spring-webflow/commit/cef35b6a4511c66f11a3a4f5c8d4e03792d06e3e","closed","in: core,","spring-projects-issues","2010-08-25T09:15:43Z","2019-01-12T16:37:37Z"
"","12075","Add org.springframework.samples directory and update readme.txt to include information on spring-samples repository [SPR-7417]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-7417](https://jira.spring.io/browse/SPR-7417?redirect=false)** and commented  I will attach a patch.   ---  **Affects:** 3.0.3  **Attachments:** - [patch.txt](https://jira.spring.io/secure/attachment/16962/patch.txt) (_2.03 kB_)","closed","status: declined,","spring-projects-issues","2010-08-03T05:54:23Z","2014-09-19T13:00:42Z"
"","12236","Spring Quartz- Pending Jobs are not getting triggered in the order they were scheduled [SPR-7580]","**[Rohini Raman](https://jira.spring.io/secure/ViewProfile.jspa?name=rrk)** opened **[SPR-7580](https://jira.spring.io/browse/SPR-7580?redirect=false)** and commented  Hi, I am using Quartz+Spring for dynamic job scheduling. The problem is, sometimes the pending jobs are not getting triggered in the order they were scheduled. But if I use the quartz scheduler directly, the jobs are getting triggered properly.  I have attached small test program to reproduce this issue.  Following is my test output Thread Pool: 4 If you look at MYJOB-5, MYJOB-6, MYJOB-7 and MYJOB-8 Jobs, they are triggered properly (MYJOB-5, MYJOB-6, MYJOB-7,MYJOB-8)with quartz scheduler. But they are not triggered in the order(MYJOB-7,MYJOB-8, MYJOB-5,MYJOB-4) with spring-quartz scheduler .  With Quartz Scheduler  ---  INFO: ############  Quartz Start ############ INFO: MYJOB-1 Scheduled at: Tue Sep 21 13:47:22 EDT 2010 INFO: MYJOB-2 Scheduled at: Tue Sep 21 13:47:23 EDT 2010 INFO: Job Started - testQuartzGroup.MYJOB-1 Date:Tue Sep 21 13:47:23 EDT 2010 INFO: MYJOB-3 Scheduled at: Tue Sep 21 13:47:24 EDT 2010 INFO: Job Started - testQuartzGroup.MYJOB-2 Date:Tue Sep 21 13:47:24 EDT 2010 INFO: MYJOB-4 Scheduled at: Tue Sep 21 13:47:25 EDT 2010 INFO: Job Started - testQuartzGroup.MYJOB-3 Date:Tue Sep 21 13:47:25 EDT 2010 INFO: MYJOB-5 Scheduled at: Tue Sep 21 13:47:26 EDT 2010 INFO: Job Started - testQuartzGroup.MYJOB-4 Date:Tue Sep 21 13:47:26 EDT 2010 INFO: MYJOB-6 Scheduled at: Tue Sep 21 13:47:27 EDT 2010 INFO: MYJOB-7 Scheduled at: Tue Sep 21 13:47:28 EDT 2010 INFO: MYJOB-8 Scheduled at: Tue Sep 21 13:47:29 EDT 2010 INFO: Job Completed- testQuartzGroup.MYJOB-1 Date:Tue Sep 21 13:47:32 EDT 2010 INFO: Job Started - testQuartzGroup.MYJOB-5 Date:Tue Sep 21 13:47:32 EDT 2010 INFO: Job Completed- testQuartzGroup.MYJOB-2 Date:Tue Sep 21 13:47:33 EDT 2010 INFO: Job Started - testQuartzGroup.MYJOB-6 Date:Tue Sep 21 13:47:33 EDT 2010 INFO: Job Completed- testQuartzGroup.MYJOB-3 Date:Tue Sep 21 13:47:34 EDT 2010 INFO: Job Started - testQuartzGroup.MYJOB-7 Date:Tue Sep 21 13:47:34 EDT 2010 INFO: Job Completed- testQuartzGroup.MYJOB-4 Date:Tue Sep 21 13:47:35 EDT 2010 INFO: Job Started - testQuartzGroup.MYJOB-8 Date:Tue Sep 21 13:47:35 EDT 2010 INFO: Job Completed- testQuartzGroup.MYJOB-5 Date:Tue Sep 21 13:47:41 EDT 2010 INFO: Job Completed- testQuartzGroup.MYJOB-6 Date:Tue Sep 21 13:47:42 EDT 2010 INFO: Job Completed- testQuartzGroup.MYJOB-7 Date:Tue Sep 21 13:47:43 EDT 2010 INFO: Job Completed- testQuartzGroup.MYJOB-8 Date:Tue Sep 21 13:47:44 EDT 2010 INFO: ############  Quartz End ############  With Spring Quartz Scheduler  ---  INFO: ############  Spring Start ############ INFO: MYJOB-1 Scheduled at: Tue Sep 21 13:48:00 EDT 2010 INFO: MYJOB-2 Scheduled at: Tue Sep 21 13:48:01 EDT 2010 INFO: Job Started - testSpringGroup.MYJOB-1 Date:Tue Sep 21 13:48:01 EDT 2010 INFO: MYJOB-3 Scheduled at: Tue Sep 21 13:48:02 EDT 2010 INFO: Job Started - testSpringGroup.MYJOB-2 Date:Tue Sep 21 13:48:02 EDT 2010 INFO: MYJOB-4 Scheduled at: Tue Sep 21 13:48:03 EDT 2010 INFO: Job Started - testSpringGroup.MYJOB-3 Date:Tue Sep 21 13:48:03 EDT 2010 INFO: Job Started - testSpringGroup.MYJOB-4 Date:Tue Sep 21 13:48:04 EDT 2010 INFO: MYJOB-5 Scheduled at: Tue Sep 21 13:48:04 EDT 2010 INFO: MYJOB-6 Scheduled at: Tue Sep 21 13:48:05 EDT 2010 INFO: MYJOB-7 Scheduled at: Tue Sep 21 13:48:06 EDT 2010 INFO: MYJOB-8 Scheduled at: Tue Sep 21 13:48:07 EDT 2010 INFO: ############  Spring End ############ INFO: Job Completed- testSpringGroup.MYJOB-1 Date:Tue Sep 21 13:48:10 EDT 2010 INFO: Job Started - testSpringGroup.MYJOB-7 Date:Tue Sep 21 13:48:10 EDT 2010 INFO: Job Completed- testSpringGroup.MYJOB-2 Date:Tue Sep 21 13:48:11 EDT 2010 INFO: Job Started - testSpringGroup.MYJOB-8 Date:Tue Sep 21 13:48:11 EDT 2010 INFO: Job Completed- testSpringGroup.MYJOB-3 Date:Tue Sep 21 13:48:12 EDT 2010 INFO: Job Started - testSpringGroup.MYJOB-5 Date:Tue Sep 21 13:48:12 EDT 2010 INFO: Job Completed- testSpringGroup.MYJOB-4 Date:Tue Sep 21 13:48:13 EDT 2010 INFO: Job Started - testSpringGroup.MYJOB-6 Date:Tue Sep 21 13:48:13 EDT 2010 INFO: Job Completed- testSpringGroup.MYJOB-7 Date:Tue Sep 21 13:48:19 EDT 2010 INFO: Job Completed- testSpringGroup.MYJOB-8 Date:Tue Sep 21 13:48:20 EDT 2010 INFO: Job Completed- testSpringGroup.MYJOB-5 Date:Tue Sep 21 13:48:21 EDT 2010 INFO: Job Completed- testSpringGroup.MYJOB-6 Date:Tue Sep 21 13:48:22 EDT 2010  As this is a production issue, it would be great if could help me to resolve this ASAP. Thanks a lot.  ---  **Affects:** 2.5.6  **Reference URL:** http://forum.springsource.org/showthread.php?t=95567  **Attachments:** - [test.tar](https://jira.spring.io/secure/attachment/17129/test.tar) (_20.00 kB_) - [test.zip](https://jira.spring.io/secure/attachment/17128/test.zip) (_3.03 kB_)","closed","status: bulk-closed,","spring-projects-issues","2010-09-21T11:04:23Z","2019-01-13T21:44:44Z"
"","12088","The PortletWrappingController in spring-mvc-portlet is not supporting EventHandling for JSR268 wrapped portlets [SPR-7430]","**[Roger Rumao](https://jira.spring.io/secure/ViewProfile.jspa?name=rogerrum)** opened **[SPR-7430](https://jira.spring.io/browse/SPR-7430?redirect=false)** and commented  In the current version of Spring-mvc-portlet 3.0.3, The org.springframework.web.portlet.mvc.PortletWrappingController cannot handle the events for wrapped jsr268 portlets.  While handling the portlet event in DispatcherPortlet, it checks if the portletController is instanceof EventAwareController or not and sends the event to the  portletController.processEvent() only if its EventAwareController.  In case of wrapped portlet, the actual external portlet is wrapped within the org.springframework.web.portlet.mvc.PortletWrappingController and the Default PortletWrappingController in spring-mvc-portlet is not implementing the EventAwareController to provide the functionality to pass the event to wrapped portlet.  So if there is wrapped jsr 268 portlet which can support events, due to the above issue the event will never be processed.  Currently I am trying with myfaces portlet bridge 2.0.0 beta and try to include in the myfaces portlet in spring-mvc-portlet  For workaround to this issue. I have extended the org.springframework.web.portlet.mvc.PortletWrappingController in my application and created new class which implements EventAwareController Public class CustomPortletWrappingController extends AbstractController implements BeanNameAware, InitializingBean, DisposableBean, PortletContextAware, PortletConfigAware , EventAwareController {  and implement the method to pass the event to the wrapped portlet as public void handleEventRequest(EventRequest request, EventResponse response) { if(this.portletInstance instanceof GenericPortlet){ ((GenericPortlet)this.portletInstance).processEvent(request, response); } }  Which then passes the event to the wrapped portlet.   ---  **Affects:** 3.0.2, 3.0.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4af36454baab2af290335963e46a1c0b35e7c326","closed","type: enhancement,","spring-projects-issues","2010-08-06T10:52:28Z","2012-06-19T03:43:57Z"
"","12057","Dealing with Calendars in JdbcTemplate should be simpler [SPR-7399]","**[Rodrigo Rosenfeld Rosas](https://jira.spring.io/secure/ViewProfile.jspa?name=rosenfeld)** opened **[SPR-7399](https://jira.spring.io/browse/SPR-7399?redirect=false)** and commented  Currently, there is no way of telling JdbcTemplate which Calendar to use for a given database and default calendar is being used when unspecified.  My propose is to include some features that would allow programmers to handle timestamps stored in UTC more easily. Some changes that could be done:  1 - Add an interface, say ISpringDataSource that defines the methods getDatabaseCalendar() and setDatabaseCalendar(calendar). That way, on JdbcTemplate, the datasource should be tested if it implements ISpringDataSource and use that calendar when not specified instead of the default calendar.  2 - Add setters and getters to databaseCalendar in JdbcTemplate overriding the above case or when the datasource doesn't implement ISpringDataSource.  3 - Maybe, it would be great to add a static setDefaultDatabaseCalendar to JdbcTemplate, but maybe this would be dangerous too if multiple applications on a servlet container happens to use this method with databases that use different calendars.  With these changes it should be possible to run code like below:  ``` // example using ISpringDataSource and Apache commons-dbcp BasicDataSource:  class MyDataSource extends BasicDataSource implements ISpringDataSource {   private Calendar databaseCalendar = Calendar.getInstance(TimeZone.getTimeZone(""UTC""));   void setDatabaseCalendar(Calendar cal) { this.databaseCalendar = cal; }   Calendar getDatabaseCalendar() { return databaseCalendar; } }  DataSource ds = new MyDataSource(); ds.setUrl(...);  ... // password, username, driver class name, etc...  new JdbcTemplate(ds).queryForMap(""...""); // date, time and timestamp would be converted using UTC calendar  // Without using ISpringDataSource: JdbcTemplate jt = new JdbcTemplate(ds); jt.setDatabaseCalendar(utcCalendar); // or new JdbcTemplate(ds, utcCalendar) jt.queryForMap(""..."");  ```  Currently, these changes would be minimal, with most of it being done in two methods of JdbcUtil. The other changes would envolve passing the calendar to other helper classes.  But this would simplify a lot dealing with date and time stored in UTC in databases on fields without time zone infomation.  Thanks in advance,  Rodrigo.   --- No further details from [SPR-7399](https://jira.spring.io/browse/SPR-7399?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2010-07-27T03:19:32Z","2019-01-12T03:32:40Z"
"","12598","HDIV and Spring MVC integration [SPR-7943]","**[Roberto Velasco](https://jira.spring.io/secure/ViewProfile.jspa?name=rvelasco)** opened **[SPR-7943](https://jira.spring.io/browse/SPR-7943?redirect=false)** and commented  Nowadays there is an intregration between Spring MVC and HDIV that can be used by adding the HDIV filter and by using Spring MVC's custom tag extension. This means that it is possible to apply HDIV to a web application developed in Spring MVC in a declarative way, without making any change to the source code.  But this approach has a maintenability disadvantage that forces to release a new set of HDIV custom tags for every new version of Spring MVC. This does not happen to the HDIV core and web filter, as they are no intrusive extensions.  This problem arises because there isn't a clear extension point of the Spring MVC´s custom tags that will make possible a clear extension of the component's behaviour without having to create a new version of it.  Consecuently, it is necessary to create a new version of HDIV's custom tags for Spring MVC each time a new version of the framework is released.  Also there is the risk that the behaviour of the Spring MVC's custom tags may change in the future and become not compatible with HDIV.  The objective of this new feature is to have an official integration between HDIV and Spring MVC that eliminates the maintenance cost that exists today for new versions of Spring MVC. This integration will provide an integrated and compatible solution even for future versions of both frameworks.  In order to get this purpose, we propose the creation of a Java interface or contract that will be used by Spring MVC's custom tags. With this extension point it will no longer be necessary to create specific Spring MVC custom tags for HDIV, reducing the integration task to only implementing the interface.  I have attached an interface proposal (ParameterProcessing).  Spring MVC tags should use this new interface in order to avoid tags extension. I have attached two examples of Spring MVC tags (FormTag, HiddenTag) using this new interface.  HDIV needs to process al urls sent to the client and needs to intercept redirects. Currently we extend Spring MVC default viewResolver. Spring MVC ViewResolver should use the new interface in order to avoid the extension.  This Java interface for Spring MVC tags could be used for other objectives besides integrating with HDIV. For example it could be used for integrating Webflow with Spring MVC.  Webflow needs to add an extra parameter (flowexecutionkey) for possible requests created in a web application (links and forms) in order to indicate the active flow. Thanks to this new interface this parameter could be added in a trasparent and automatic way for programmers.  In fact, this functionality is included nowadays in the HDIV version for Spring MVC.   ---  **Affects:** 3.0.6  **Attachments:** - [FormTag.java](https://jira.spring.io/secure/attachment/17593/FormTag.java) (_14.42 kB_) - [HiddenInputTag.java](https://jira.spring.io/secure/attachment/17594/HiddenInputTag.java) (_1.35 kB_) - [mvc-showcase-spr-7943.zip](https://jira.spring.io/secure/attachment/17759/mvc-showcase-spr-7943.zip) (_474.38 kB_) - [ParameterProcessing.java](https://jira.spring.io/secure/attachment/17592/ParameterProcessing.java) (_3.10 kB_) - [spring-webmvc-spr-7943.zip](https://jira.spring.io/secure/attachment/17758/spring-webmvc-spr-7943.zip) (_40.07 kB_)  7 votes, 8 watchers","closed","type: enhancement,","spring-projects-issues","2011-02-06T11:20:51Z","2012-06-19T03:39:50Z"
"","12315","MockHttpSession methods should throw IllegalStateException if invalid [SPR-7659]","**[Robert Munteanu](https://jira.spring.io/secure/ViewProfile.jspa?name=rombert)** opened **[SPR-7659](https://jira.spring.io/browse/SPR-7659?redirect=false)** and commented  #### Status Quo  The Javadoc for several methods in `HttpSession` (see _Deliverables_ below) specifies that an _`IllegalStateException` (is thrown) if this method is called on an invalidated session_.  However, Spring's `MockHttpSession` does not implement this behavior.  #### Deliverables  Ensure that the following methods in `MockHttpSession` properly throw an `IllegalStateException` as defined in the Servlet specification.  1. [x] long getCreationTime() 2. [x] long getLastAccessedTime() 3. [x] Object getAttribute(String) 4. [x] Object getValue(String) 5. [x] Enumeration\ getAttributeNames() 6. [x] String[] getValueNames() 7. [x] void setAttribute(String, Object) 8. [x] void putValue(String , Object) 9. [x] void removeAttribute(String) 10. [x] void removeValue(String) 11. [x] void invalidate() -- Addressed in #14320 12. [x] boolean isNew()  ---  **Affects:** 3.0 GA  **Issue Links:** - #14320 MockHttpSession does not implement invalidate() properly","closed","type: enhancement,","spring-projects-issues","2010-10-15T03:19:20Z","2019-01-11T14:29:36Z"
"","11903","EL expressions with chained map indexes in some cases fail to evaluate [SPR-7244]","**[Robert Blumen](https://jira.spring.io/secure/ViewProfile.jspa?name=rblumen)** opened **[SPR-7244](https://jira.spring.io/browse/SPR-7244?redirect=false)** and commented  In some cases, an EL evaluated against a map of maps fails to evaluate. The EL has the form ""#root['foo']['bar']. See attached test case for an example.   ---  **Affects:** 3.0.2  **Attachments:** - [SpringElFails.java](https://jira.spring.io/secure/attachment/16599/SpringElFails.java) (_1.19 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5801af9ef59073bb4d81fa4cc98623a32722692e","closed","in: core,","spring-projects-issues","2010-05-28T05:10:17Z","2012-06-19T03:44:17Z"
"","12826","ExtendedBeanInfo Passes Empty Property Name to PropertyDescriptor Causing IntrospectionException: bad property name [SPR-8175]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-8175](https://jira.spring.io/browse/SPR-8175?redirect=false)** and commented  When handling an ArrayList, the ExtendedBeanInfo Passes Emtpy Property Name to PropertyDescriptor Causing IntrospectionException: bad property name. This occurs in the latest development build of trunk and can be seen in the Greenhouse application. I have attached a patch that provides a junit and a fix.  ---  **Reference URL:** http://forum.springsource.org/showthread.php?s=1c62fe0e73fde377348700ad8437a010&t=106697  **Attachments:** - [extendedbeaninfo-emptyproperty.patch](https://jira.spring.io/secure/attachment/17894/extendedbeaninfo-emptyproperty.patch) (_2.75 kB_) - [mylyn-context.zip](https://jira.spring.io/secure/attachment/17988/mylyn-context.zip) (_1.18 kB_)  **Issue Links:** - #12734 Support injection against setter methods with non-void return types - #14663 Overhaul non-void JavaBean write method support - #12995 Review ExtendedBeanInfo implementation  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0ee12563b038797a137ac67b13e5dd6d3d918a7f, https://github.com/spring-projects/spring-framework/commit/4a8be690998f43a9253305e09f96ad83058ef540, https://github.com/spring-projects/spring-framework/commit/158a392d80c183ae39bba8783c16c27b64dfbff4  2 votes, 1 watchers","closed","in: core,","spring-projects-issues","2011-04-01T22:53:53Z","2019-01-11T13:04:17Z"
"","12169","Petclinic tests fail against MySQL [SPR-7512]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-7512](https://jira.spring.io/browse/SPR-7512?redirect=false)** and commented  Building the petclinic sample at https://anonsvn.springframework.org/svn/spring-samples/petclinic/trunk when switched over to mysql causes some problems.  1) mysql table names are case sensitive. The orm.xml file and some of the tests (for counting rows in tables) use uppercase table names. Instead a consistent case should be used throughout. 2) All of the tests use embedded-database which cannot be switched to mysql. Instead a data source should be created and initialize-database should be used with ignore-failures=""ALL"".  I have attached a patch that corrects these problems.   ---  **Reference URL:** http://forum.springsource.org/showthread.php?p=316573  **Attachments:** - [spring-petclinic-jdbc.patch](https://jira.spring.io/secure/attachment/17049/spring-petclinic-jdbc.patch) (_6.05 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-petclinic/commit/7cbfaf1726cd9d7e1620538d4bfbd005e3a2f20e","closed","","spring-projects-issues","2010-08-31T08:33:46Z","2019-01-11T15:02:55Z"
"","12224","Parameter annotations such as @RequestParam not applied from an interface [SPR-7567]","**[Richard Larson](https://jira.spring.io/secure/ViewProfile.jspa?name=rel)** opened **[SPR-7567](https://jira.spring.io/browse/SPR-7567?redirect=false)** and commented  ```  public interface ListableController { 	 	@ModelAttribute(""results"") 	@RequestMapping(method = RequestMethod.GET) 	public List index( 			@RequestParam(defaultValue = ""1"") Integer page);  } //Page should be equal to one but is not. public class Foo implements ListableController { 	public List index(Integer page) { 		System.out.println(page + "" should be equal to one but is not.""); 		return new ArrayList(); 	} } ```  May possibly be related to #11985.  ---  **Affects:** 3.0.4  **Attachments:** - [MethodParameter.patch](https://jira.spring.io/secure/attachment/18570/MethodParameter.patch) (_1.74 kB_)  **Issue Links:** - #11985 HandlerMethodResolver does not handle hierarchy of generic interfaces with `@MVC` annotations  2 votes, 7 watchers","closed","status: bulk-closed,","spring-projects-issues","2010-09-17T11:26:13Z","2019-01-13T07:12:58Z"
"","12129","Regression in redirect URL encoding [SPR-7471]","**[Richard Larson](https://jira.spring.io/secure/ViewProfile.jspa?name=rel)** opened **[SPR-7471](https://jira.spring.io/browse/SPR-7471?redirect=false)** and commented  Using spring 3.0.4.BUILD-SNAPSHOT on August 18 2010, redirected views that include a question mark (and possibly other special characters) have the question mark url encoded which causes the url to no longer work. This bug was introduced probably as a result of the fix for  #12085 https://jira.springframework.org/browse/SPR-7427  For example: redirect:some/path/foo.html?id=1 would be incorrectly encoded as: some/path/foo.html%3Fid=1  Possibly the encodeUrl method should know how to separately encode the path portion of the url separately from the parameters ?  ---  **Affects:** 3.0.4  **Issue Links:** - #12085 URL in a redirect is not escaped by RedirectView  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/001d676decd995d6b7baa041ae1069eea602aaa0","closed","type: bug,","spring-projects-issues","2010-08-18T07:59:02Z","2019-01-11T14:10:13Z"
"","11985","HandlerMethodResolver does not handle hierarchy of generic interfaces with @MVC annotations [SPR-7355]","**[Richard Larson](https://jira.spring.io/secure/ViewProfile.jspa?name=rel)** opened **[SPR-7355](https://jira.spring.io/browse/SPR-7355?redirect=false)** and commented  Given the following type of construct 2 problems arise: 1) the bridged methods do not get matched and thus we get ""HTTP Status 405 - Request method 'POST' not supported"", for the update method.  2)The `@ModelAttribute` (""note"") annotation on the loadModel method is not picked up from the interface.  We are using standard Spring WebMVC annotation driven setup ( and ) with Hibernate JPA models.  This may be related to a previous issue: http://jira.springframework.org/browse/SPR-5191?page=com.atlassian.jirafisheyeplugin%3Acrucible-issuepanel  ``` public interface ModelController { 	@ModelAttribute(""note"") 	public Model loadModel(@RequestParam(required = false) Long id);  	@InitBinder 	public void initBinder(WebDataBinder binder); } ```  ``` public interface EditableController extends ModelController {  	@RequestMapping (method = RequestMethod.POST ) 	public String update(@Valid @ModelAttribute(""note"") Model command, 			BindingResult result);  	@RequestMapping(method = RequestMethod.GET) 	public void edit(@RequestParam Long id); } ```  ``` @Controller public class PersonController implements EditableController { 	public void edit(Long id) {...}  	public String update(Person command, BindingResult result) {...}  	public void initBinder(WebDataBinder binder) {...}  	public Person loadModel(Long id) {...}  } ```  ---  **Affects:** 3.0.2, 3.0.3  **Issue Links:** - #12224 Parameter annotations such as `@RequestParam` not applied from an interface","closed","type: bug,","spring-projects-issues","2010-07-06T07:00:13Z","2019-01-13T07:14:02Z"
"","12026","TransactionSynchronizationUtils.unwrapResourceIfNecessary() does not unwrap OSGi service proxies [SPR-7368]","**[Ric Klaren](https://jira.spring.io/secure/ViewProfile.jspa?name=rklaren)** opened **[SPR-7368](https://jira.spring.io/browse/SPR-7368?redirect=false)** and commented  We experienced deadlocks in our product while load testing. The issue occurs when mixing Hibernate Sessions with JdbcTemplate code. What basically happens:  1. The session in view filter creates a new Hibernate Session. 2. The HibernateTransactionManager registers a JDBC datasource in the thread local map using the real class. 3. Somewhere in a service call (and transaction) the user details are requested via the JdbcUserDetailsManager (from spring security) which is implemented as a JdbcTemplate. The JdbcTemplate has a JDK proxy of the datasource. This leads to a lookup in the thread local map with the proxy in stead of the real data source. Since TransactionSynchronizationUtils.unwrapResourceIfNecessary() does not unwrap JDK proxies the lookup fails. As a result the existing connection is not reused and a new connection is requested from the connection pool.  This deadlocks when the connection pool has no connections left.  (Checked the code up to 3.0.3 Release in which this is also present)   ---  **Affects:** 3.0 GA","closed","type: bug,","spring-projects-issues","2010-07-13T20:49:08Z","2012-06-19T03:43:37Z"
"","12358","Missing package imprts in bundle org.springframework.aspects [SPR-7702]","**[Reto Urfer](https://jira.spring.io/secure/ViewProfile.jspa?name=urferr)** opened **[SPR-7702](https://jira.spring.io/browse/SPR-7702?redirect=false)** and commented  After migrating to Spring Framework 3.0.5 I got an error message from AspectJ that the annotation org.springframework.scheduling.annotation.Async could not be found when loading AnnotationBeanConfigurerAspect.  After loading the plugin org.springframework.aspects into my Eclipse workspace PDE listed the following two missing Import-Package definitions: javax.persistence;version=""[1.0.0,3.0.0)"";resolution:=optional, org.springframework.scheduling.annotation;version=""[3.0.5,3.0.6)"";resolution:=optional  After adding them and replacing the Manifest.mf file in the original bundle the error message is gone.   ---  **Affects:** 3.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/efe1e64b0828417136dc91d3948e4aba04457cd0","closed","in: core,","spring-projects-issues","2010-10-31T03:54:41Z","2012-06-19T03:39:55Z"
"","12327","Backport fix of SPR-5582 to 2.5.6 branch [SPR-7671]","**[René Zanner](https://jira.spring.io/secure/ViewProfile.jspa?name=rzanner)** opened **[SPR-7671](https://jira.spring.io/browse/SPR-7671?redirect=false)** and commented  Please port the fix for the toString() call of TransactionAwarDataSourceProxy back to the 2.5.x branch!  This was already fixed for 3.x in #10253, but did not find it's way in the 2.x branch...  ---  **Affects:** 2.5.6","closed","status: declined,","spring-projects-issues","2010-10-21T07:56:12Z","2019-01-11T14:36:21Z"
"","12365","BadCredentialsException thrown with null authentication [SPR-7709]","**[refael dakar](https://jira.spring.io/secure/ViewProfile.jspa?name=refaeldakar)** opened **[SPR-7709](https://jira.spring.io/browse/SPR-7709?redirect=false)** and commented  When BadCredentialsException is thrown, the authentication object inside of it is null. That's because it's not filled in the ctor of AuthenticationException (the parent of BadCredentialsException ).  It would be nice to have this authentication inside BadCredentialsException  so i will be able to log it out when catching it.  Thanks,   ---  **Affects:** 3.0.4","closed","in: core,","spring-projects-issues","2010-11-02T04:32:43Z","2019-01-12T05:31:22Z"
"","11997","multipulforms .. [SPR-7338]","**[ramesh](https://jira.spring.io/secure/ViewProfile.jspa?name=lrameshbabuforu)** opened **[SPR-7338](https://jira.spring.io/browse/SPR-7338?redirect=false)** and commented   --- No further details from [SPR-7338](https://jira.spring.io/browse/SPR-7338?redirect=false)","closed","status: invalid,","spring-projects-issues","2010-06-29T22:46:40Z","2019-01-12T05:31:46Z"
"","12293","ExceptinHandler method behaves differently than request handler [SPR-7637]","**[Rajeev Sharma](https://jira.spring.io/secure/ViewProfile.jspa?name=rajeev1982)** opened **[SPR-7637](https://jira.spring.io/browse/SPR-7637?redirect=false)** and commented  I am new to Spring Framework. I am using `@ExceptionHandler` to handle exceptions in my controller. I thought the process of returning result from exception handler would be similar to a request handler but that is not the case. Below is my code.      @RequestMapping(value = ""/{userid}"", method = RequestMethod.GET)     public @ResponseBody     User getUser(@PathVariable(value = ""userid"") int userId) throws SpringTestException {     	logger.trace(""Getting user: "" + userId);     	User user = getUserDAO().getUser(userId);     	if (user == null) {     		throw new SpringTestException(1000, ""User does not exists"");     	}          	logger.trace(""Userid: "" + user.getId() + "", Name: "" + user.getName() + "", Email: ""     			+ user.getEmailId());     	return user;     }  This code fetches user from the database and returns it to the user in json. But when the user is not found in db I through an exception which is handled by an exception class and supposed to return error message in json format (""code"": 10000, ""message"": ""user does not exists""}). Below is my exception handler version 1.      @ExceptionHandler(SpringTestException.class)     public @ResponseBody     HttpResponse handleSpringTestException(SpringTestException e) {     	logger.trace(""Exception caught"");     	return new HttpResponse(e.getCode(), e.getMessage());     }  HttpResponse has two members ""code"" and ""message"".  When I make a curl call, I didn't get the response, instead got an exception with http-status 500.  < HTTP/1.1 500 Internal Server Error < Server: Apache-Coyote/1.1 < Content-Type: text/html;charset=utf-8 < Content-Length: 2960 < Date: Sun, 10 Oct 2010 12:35:33 GMT < Connection: close <  \\\Apache Tomcat/6.0.20 - Error report\\\\ \\\HTTP Status 500 - \\\\type\ Exception report\\\message\ \\\\\description\ \The server encountered an internal error () that prevented it from fulfilling this request.\\\\exception\ \org.springframework.web.util.NestedServletException: Request processing failed; nested exception is com.ivasoft.springtest.common.SpringTestException: User does not exists 	org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:656) 	org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:549) 	javax.servlet.http.HttpServlet.service(HttpServlet.java:617) 	javax.servlet.http.HttpServlet.service(HttpServlet.java:717) \\\\root cause\ \com.ivasoft.springtest.common.SpringTestException: User does not exists 	com.ivasoft.springtest.controllers.UserControllerIoC.getUser(UserControllerIoC.java:43) 	sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:616) 	org.springframework.web.bind.annotation.support.HandlerMethodInvoker.invokeHandlerMethod(HandlerMethodInvoker.java:176) 	org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.invokeHandlerMethod(AnnotationMethodHandlerAdapter.java:427) 	org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.handle(AnnotationMethodHandlerAdapter.java:415) 	org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:788) 	org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:717) 	org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:644) 	org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:549) 	javax.servlet.http.HttpServlet.service(HttpServlet.java:617) 	javax.servlet.http.HttpServlet.service(HttpServlet.java:717) * Closing connection #0 \\\\note\ \The full stack trace of the root cause is available in the Apache Tomcat/6.0.20 logs.\\\\Apache Tomcat/6.0.20\\\  I googled around for hours and found that ExceptionHandlers are handled by different Adaptor than that of request handlers so I need to configure something in my xml file. I did this in my xml config file.                               	     		     			     			     		     	       I got this response after configurations change (This is what I expected):  < HTTP/1.1 200 OK < Server: Apache-Coyote/1.1 < Content-Type: application/json < Transfer-Encoding: chunked < Date: Sun, 10 Oct 2010 12:37:43 GMT < * Connection #0 to host localhost left intact * Closing connection #0   {""message"":""User does not exists"",""code"":1000}  I don't know if the above configuration is correct (This is working but could be a hack found by some developer) as I found it in some forum.  Second level problem came when I used ResposeEntity as return value for my exception handler. I changed the exception handler to this      @ExceptionHandler(SpringTestException.class)     public @ResponseBody     ResponseEntity handleSpringTestException(SpringTestException e) {     	return new ResponseEntity(new HttpResponse(e.getCode(), e.getMessage()),     			HttpStatus.NOT_FOUND);     }  And I was exception the same response with status code 404, but got this response.  < HTTP/1.1 200 OK < Server: Apache-Coyote/1.1 < Content-Type: application/json < Transfer-Encoding: chunked < Date: Sun, 10 Oct 2010 12:39:13 GMT < * Connection #0 to host localhost left intact * Closing connection #0   {""statusCode"":""NOT_FOUND"",""headers"":{},""body"":{""message"":""User does not exists"",""code"":1000}}  Looks like the exception handlers behave differently that request handlers. I fail to understand why is it that way. I used following code to get required results.      @ExceptionHandler(SpringTestException.class)     public @ResponseBody     HttpResponse handleSpringTestException(SpringTestException e, HttpServletResponse response) {     	logger.trace(""Exception caught"");     	response.setStatus(HttpServletResponse.SC_NOT_FOUND);     	return new HttpResponse(e.getCode(), e.getMessage());     }  This makes my code dependent on HttpServletResponse object and this is not the same as what I would do in a request handler. I could use `@ResponseBody` ResponseEntity as return value to get the same result and that seems correct to me. If exception handlers and request handlers behave the same way it would be much easier and consistent for the framework to work with.    ---  **Affects:** 3.0.4  2 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2010-10-10T07:29:36Z","2019-01-11T14:32:08Z"
"","11907","JAXB2 fails to unmarshal unless classesToBeBound is set [SPR-7248]","**[Radim Kolar](https://jira.spring.io/secure/ViewProfile.jspa?name=hsn)** opened **[SPR-7248](https://jira.spring.io/browse/SPR-7248?redirect=false)** and commented  calling set context paths on JAXB2 unmarshaller is not enough to make him to unmarshall classes but It is enough for making him to marshall classes.  This is soap preply  ```xml            1.2.3.4       false       0       10      ```  and class generated by xjc with `@xmlrootelement` added by hand:  ``` package com.foois.ws.whois;  @XmlAccessorType(XmlAccessType.FIELD) @XmlRootElement(name = ""IPInfoResponse"") @XmlType(name = ""ipinfo"", propOrder = {     ""ip"",     ""whitelisted"",     ""hits"",     ""maxhits"",     ""blacklisted"" }) public class Ipinfo {      @XmlElement(required = true)     @XmlJavaTypeAdapter(NormalizedStringAdapter.class)     protected String ip;     protected boolean whitelisted;     @XmlElement(required = true)     protected BigInteger hits;     @XmlElement(required = true)     protected BigInteger maxhits;     protected Baninfo blacklisted; } ```  package-info.java  ``` @javax.xml.bind.annotation.XmlSchema(namespace = ""http://ws.foois.com/whois/"", elementFormDefault = javax.xml.bind.annotation.XmlNsForm.QUALIFIED) package com.foois.ws.whois; ```  then following code should work:  ``` def marshaller = new org.springframework.oxm.jaxb.Jaxb2Marshaller() /* marshaller.setClassesToBeBound([com.foois.ws.whois.Ipinfo.class,com.foois.ws.whois.Ipinforequest.class] as Class[]) */ marshaller.setContextPath(""com.foois.ws.whois"") marshaller.afterPropertiesSet() template.setMarshaller(marshaller) template.setUnmarshaller(marshaller) template.afterPropertiesSet() def ipinfo = new com.foois.ws.whois.Ipinforequest() ipinfo.setIp(ip.ip) com.foois.ws.whois.Ipinfo result1 = template.marshalSendAndReceive(""http://127.0.0.1:4344/axis2/services/whois/ipinfo"",ipinfo) ```  but it does not unless you set classes to be bound. unmarshaller is unable to scan package for XMLrootElement classes. Because example fails with:  Cannot cast object 'javax.xml.bind.JAXBElement@17b8d27' with class 'javax.xml.bind.JAXBElement' to class 'com.foois.ws.whois.Ipinfo'   --- No further details from [SPR-7248](https://jira.spring.io/browse/SPR-7248?redirect=false)","closed","status: invalid,","spring-projects-issues","2010-05-27T19:57:11Z","2019-01-12T05:31:57Z"
"","12243","Editable id attribute of form input fields with freemarker macros [SPR-7587]","**[Przemek Dyk](https://jira.spring.io/secure/ViewProfile.jspa?name=przemek_dyk)** opened **[SPR-7587](https://jira.spring.io/browse/SPR-7587?redirect=false)** and commented  It would be convenient to have the editable id attribute of form input fields with freemarker macros. Now its always status.expression. With my patch identifiers could be simpler, shorter and without dots (javascript programmers don't like id with dots). I believe this improvement is backward compatible.   ---  **Attachments:** - [freemarker-macros-id.patch](https://jira.spring.io/secure/attachment/17131/freemarker-macros-id.patch) (_12.16 kB_)","closed","type: enhancement,","spring-projects-issues","2010-09-23T06:05:17Z","2018-12-28T12:03:03Z"
"","11980","Single checkbox input macro for Velocity and Freemarker not mentioned in reference documentation [SPR-7322]","**[Przemek Dyk](https://jira.spring.io/secure/ViewProfile.jspa?name=przemek_dyk)** opened **[SPR-7322](https://jira.spring.io/browse/SPR-7322?redirect=false)** and commented  Single checkbox input macro for Velocity and Freemarker not mentioned in reference documentation   ---  **Affects:** 3.0.3  **Attachments:** - [velocity-freemarker-single-checkbox-doc.patch](https://jira.spring.io/secure/attachment/16791/velocity-freemarker-single-checkbox-doc.patch) (_844 bytes_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f9017ea05dc7d1b183bfebd978077557f638cd65","closed","type: task,","spring-projects-issues","2010-06-25T21:08:17Z","2012-06-19T03:42:54Z"
"","12156","ResponseEntity headers do not show cookie [SPR-7498]","**[praveenkumar kg](https://jira.spring.io/secure/ViewProfile.jspa?name=praveenkg)** opened **[SPR-7498](https://jira.spring.io/browse/SPR-7498?redirect=false)** and commented  I am using RestTemplate to test my API. Headers from  ResponseEntity seems to show only 'Set-Cookie' but for further requests it does not pull up the cookie in the header. Any particular reason why? I verified that response from the server do contain header cookie.  ``` ResponseEntity response = restTemplate.exchange(uri.toString(), HttpMethod.PUT, requestEntity, String.class, new HashMap()); 			 HttpHeaders headers = response.getHeaders(); Set keys = headers.keySet(); for (String header : keys)  { 	System.out.println(""Header: ""+header); 	List values = headers.get(header); 	for (String value : values)  	{ 		System.out.println(""Header Value: ""+ value); 	} } ```  Output showing 'Set-Cookie'  ``` Header: Server Header Value: Apache-Coyote/1.1 Header: X-Powered-By Header Value:  Header: Set-Cookie Header Value: JSESSIONID=0B66BF319B5D6E236A5F9679F72459F5.dev37; Path=/; Secure Header: Content-Type Header Value: application/xml;charset=ISO-8859-1 Header: Content-Language Header Value: en-US Header: Content-Length Header Value: 130 Header: Date Header Value: Wed, 25 Aug 2010 22:55:16 GMT ```  Output not showing Cookie in the header:  ``` Header: Server Header Value: Apache-Coyote/1.1 Header: X-Powered-By Header Value:  Header: Content-Type Header Value: application/xml;charset=ISO-8859-1 Header: Content-Language Header Value: en-US Header: Content-Length Header Value: 655 Header: Date Header Value: Wed, 25 Aug 2010 23:00:19 GMT  ```    ---  **Affects:** 3.0.2","closed","status: declined,","spring-projects-issues","2010-08-25T16:01:38Z","2019-01-22T14:33:00Z"
"","12020","Clarify ConversionServiceFactoryBean documentation [SPR-7362]","**[Pieter Nobels](https://jira.spring.io/secure/ViewProfile.jspa?name=pnobels)** opened **[SPR-7362](https://jira.spring.io/browse/SPR-7362?redirect=false)** and commented  I have two suggestions to improve documentation concerning ConversionService (5.5, last section):  1. The documentation to configure a custom Converter with a ConversionService currently only gives an example to create a conversionService bean. The documentation could be improved by stating somewhere that, to configure the conversionService bean for MVC, this should be stated in the conversion-service attribute of  (as is already the case in the last section of 5.6 concerning Formatting). 2. The documentation could clarify that, when configuring a ConversionServiceFactoryBean, no formatters will be enabled. To solve this, a FormattingConversionServiceFactoryBean has to be used. E.g., instead of the supplied example:  ```                          ```    ---  **Affects:** 3.0.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/87caa133634c9e0ebcd9aa7f7231552dd93bcbe6","closed","type: documentation,","spring-projects-issues","2010-07-09T23:18:25Z","2012-06-19T03:43:13Z"
"","12568","AbstractRequestLoggingFilter should log actual body even after consuming request parameters on Tomcat 6 [SPR-7913]","**[Philippe Mouawad](https://jira.spring.io/secure/ViewProfile.jspa?name=p.mouawad@ubik-ingenierie.com)** opened **[SPR-7913](https://jira.spring.io/browse/SPR-7913?redirect=false)** and commented  Hello, I am using Log4jNestedDiagnosticContextFilter to add some logging information. I noticed that enabling includePayload makes request.getParameter(""parameterName"") return null values :   I use Spring Security 3.0.5 and set custom filter like this: \     		   Regards Philippe   ---  **Affects:** 3.0.5, 4.1 GA  2 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2011-01-26T10:36:42Z","2015-02-20T04:13:14Z"
"","12602","EntityManagerFactoryUtils fails to apply transaction timeout for EclipseLink update and delete queries [SPR-7947]","**[Petri Hakala](https://jira.spring.io/secure/ViewProfile.jspa?name=hakalap)** opened **[SPR-7947](https://jira.spring.io/browse/SPR-7947?redirect=false)** and commented  Setting of timeouts in ``` EntityManagerFactoryUtils.applyTransactionTimeout()  ```for update or delete queries fails because EclipseLink throws IllegalArgumentException. ```    ---  **Affects:** 3.0.6, 3.1 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c6b36cc207dc0bbfa2b1ee7828dc27e1baae07ab, https://github.com/spring-projects/spring-framework/commit/2cb287a01b0190acac7bcdc0af8835227adada5d","closed","type: bug,","spring-projects-issues","2011-02-08T06:55:15Z","2019-01-11T16:15:43Z"
"","12262","Spring 3.0.2.RELEASE breaks classpath settings in manifest.mf [SPR-7606]","**[Peter Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=proggerpete)** opened **[SPR-7606](https://jira.spring.io/browse/SPR-7606?redirect=false)** and commented  I've got a project where I build an executable jar.  The executable jar has entries in the manifest.mf to set the classpath to .  This works fine with spring 2.5.6.  After upgrading to 3.0.2.RELEASE this classpath setting is now ignored.  I've attached a very basic maven project that demonstrates the issue. If you build the project with the 2.5.6 spring dependency class paths work fine. If you build with a 3.0.2 dependency the classpath stops working.   ---  **Affects:** 3.0.2  **Attachments:** - [BrokenClassPath.zip](https://jira.spring.io/secure/attachment/17153/BrokenClassPath.zip) (_3.38 kB_)","closed","in: core,","spring-projects-issues","2010-09-30T08:28:29Z","2019-01-12T05:31:29Z"
"","11887","Db2CallMetaDataProvider.metaDataSchemaNameToUse throws NPE if the DatabaseMetaData has no username [SPR-7228]","**[Peter Plosz](https://jira.spring.io/secure/ViewProfile.jspa?name=ploszpe)** opened **[SPR-7228](https://jira.spring.io/browse/SPR-7228?redirect=false)** and commented  We use kerberos to connect to our database, so the databaseMetaData.getUserName() returns null. This causes NPE in Db2CallMetaDataProvider.java:67 later when trying to call toUpperCase() on null.   ---  **Affects:** 3.0 GA, 3.0.1, 3.0.2","closed","type: bug,","spring-projects-issues","2010-05-20T21:38:13Z","2012-06-19T03:43:29Z"
"","12680","Section 15.3.2 - example description not matching example code [SPR-8025]","**[Peter Perhac](https://jira.spring.io/secure/ViewProfile.jspa?name=peter.perhac)** opened **[SPR-8025](https://jira.spring.io/browse/SPR-8025?redirect=false)** and commented  I was reading the documentation here: http://static.springsource.org/spring/docs/3.0.x/reference/mvc.html#mvc-ann-requestmapping and just below the first code listing there is the following in the text: ""The post() has a similar refinement"". However, there is no ""post()"" method in the code listing. I believe the method name the author had in mind was ""add(...)""?   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/983b5338ed0284388d8ac528821a918cdb3b2634","closed","type: enhancement,","spring-projects-issues","2011-03-08T07:47:42Z","2014-10-01T03:11:50Z"
"","12299","EhCacheFactoryBean doesn't read defaults from defaultCache [SPR-7643]","**[Peter H](https://jira.spring.io/secure/ViewProfile.jspa?name=mag01)** opened **[SPR-7643](https://jira.spring.io/browse/SPR-7643?redirect=false)** and commented  EhCacheFactoryBean javadoc http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/cache/ehcache/EhCacheFactoryBean.html states: ""If the specified named cache is not configured in the cache configuration descriptor, this FactoryBean will construct an instance of a Cache with the provided name and the specified cache properties and add it to the CacheManager for later retrieval. If some or all properties are not set at configuration time, this FactoryBean will use defaults.""  Where the last sentence is of our particular interest here. Currently the bahaviour is that when config for particular cache is missing etc., hardcoded defaults (right from EhCacheFactoryBean) are used. Contrary to this, when Hibernate uses an ehcache-based cache and its config is missing, a configuration from defaultCache is inherited so that this new cache has configuration identical to what's setup for defaultCache in ehcache.xml.  This is implemented right in ehcache code: net.sf.ehcache.hibernate.AbstractEhcacheProvider and net.sf.ehcache.hibernate.AbstractEhcacheRegionFactory in buildCache or getCache methods respectively where they in such cases call method addCache from net.sf.ehcache.CacheManager which actually performs the desired operation (create a cache with properties inherited from defaultCache).  net.sf.ehcache.hibernate.AbstractEhcacheProvider.buildCache:      public final Cache buildCache(String name, Properties properties) throws CacheException {         try {             net.sf.ehcache.Ehcache cache = manager.getEhcache(name);             if (cache == null) {                 LOG.warn(""Could not find a specific ehcache configuration for cache named ["" + name + ""]; using defaults."");                 manager.addCache(name);                 cache = manager.getEhcache(name);                 LOG.debug(""started EHCache region: "" + name);             }             HibernateUtil.validateEhcache(cache);             return new EhCache(cache);         } catch (net.sf.ehcache.CacheException e) {             throw new CacheException(e);         }     }   net.sf.ehcache.hibernate.AbstractEhcacheRegionFactory.getCache:      private Ehcache getCache(String name) throws CacheException {         try {             Ehcache cache = manager.getEhcache(name);             if (cache == null) {                 LOG.warn(""Couldn't find a specific ehcache configuration for cache named ["" + name + ""]; using defaults."");                 manager.addCache(name);                 cache = manager.getEhcache(name);                 LOG.debug(""started EHCache region: "" + name);             }             HibernateUtil.validateEhcache(cache);             return cache;         } catch (net.sf.ehcache.CacheException e) {             throw new CacheException(e);         }  net.sf.ehcache.CacheManager.addCache http://www.ehcache.org/apidocs/net/sf/ehcache/CacheManager.html#addCache(java.lang.String)      public void addCache(String cacheName) throws IllegalStateException, ObjectExistsException, CacheException {         checkStatus();              // NPE guard         if (cacheName == null || cacheName.length() == 0) {             return;         }              if (ehcaches.get(cacheName) != null) {             throw new ObjectExistsException(""Cache "" + cacheName + "" already exists"");         }         addCache(cloneDefaultCache(cacheName));     }  It would be really great to have the same type of behaviour implemented in EhCacheFactoryBean to achieve a better consistence in Spring+Hibernate apps sharing one CacheManager (i.e. using one config).   ---  **Affects:** 3.0.4","closed","type: enhancement,","spring-projects-issues","2010-10-11T09:38:58Z","2019-01-11T14:30:26Z"
"","12079","MQJMS0003 thrown for WebSphere MQ Queue connections with lookupOnStartup=false and proxyInterface=javax.jms.Queue [SPR-7421]","**[Peter H](https://jira.spring.io/secure/ViewProfile.jspa?name=mag01)** opened **[SPR-7421](https://jira.spring.io/browse/SPR-7421?redirect=false)** and commented  Hello,  we want to use a bean for JMS Queue definition with lookupOnStartup=false, however with WMQ we're stuck at ""MQJMS0003: Destination not understood or no longer valid"" exception when doing this  The bean config looks like the following  \ \ \ \ \  the jms container bean config isn't much special, using class org.springframework.jms.listener.DefaultMessageListenerContainer, laxy-init=true, concurrentConsumers=1, autoStartup=false  and without specifying lookupOnStartup and proxyInterface it works properly on the same environment. With these two props set we get a failure on initialization: WARN  DefaultMessageListenerContainer [] - Setup of JMS message listener invoker failed for destination 'queue:// QMGR/QUEUE' - trying to recover. Cause: MQJMS0003: Destination not understood or no longer valid  and can't get past it.  Also note that we're basically trying to let the application start even without the required JMS resources configured (so that the related functionality won't just work which is alright for us), but even with lazy-init set to true everywhere all the beans initialize and all JNDI lookups are performed, so currently the only way seems to be the above described lookupOnStartup=false way.   ---  **Affects:** 3.0.3","closed","type: enhancement,","spring-projects-issues","2010-08-03T11:37:51Z","2015-09-22T17:34:35Z"
"","12528","spring.formRadioButtons can't work if path is number [SPR-7871]","**[Peng Yong](https://jira.spring.io/secure/ViewProfile.jspa?name=refactor)** opened **[SPR-7871](https://jira.spring.io/browse/SPR-7871?redirect=false)** and commented  user.type is a int, and types is a hashmap.    The only legal comparisons are between two numbers, two strings, or two dates. Left  hand operand is a freemarker.template.SimpleNumber Right hand operand is a freemarker.template.SimpleScalar  The problematic instruction:  ---  ==> if stringStatusValue == value [on line 271, column 85 in spring.ftl] in user-directive spring.formRadioButtons [on line 48, column 21 in register.ftl] in user-directive layout.Layout [on line 3, column 1 in register.ftl]  ---  **Affects:** 3.0.5  **Attachments:** - [patch.txt](https://jira.spring.io/secure/attachment/17510/patch.txt) (_1.37 kB_)","closed","status: bulk-closed,","spring-projects-issues","2011-01-11T07:23:37Z","2019-01-13T07:11:38Z"
"","12457","@Configurable and @Autowired do not work in servlet [SPR-7801]","**[Pavel Micka](https://jira.spring.io/secure/ViewProfile.jspa?name=malejpavouk)** opened **[SPR-7801](https://jira.spring.io/browse/SPR-7801?redirect=false)** and commented  I am using Spring framework (2.5.6) in my app with Load time weaving (spring-agent with Tomcat 6) and everything works fine everywhere (in Spring beans, in non-Spring entities), except when I try to autowire field in a servlet annotated as `@Configurable`, then I get a nice NullPointerException...  Some spring beans are initialized prior to first servlet call.  ---      ---  `@Configurable`(dependencyCheck=true) public class CaptchaServlet extends HttpServlet{ `@Autowired` private CaptchaServiceIface captchaService;      @Override     public void init(ServletConfig config) throws ServletException {         super.init(config);     //    ApplicationContext ctx = WebApplicationContextUtils.getRequiredWebApplicationContext(config.getServletContext());     //    captchaService = (CaptchaServiceIface) ctx.getBean(""captchaService"");     }          @Override     protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {         Captcha c = captchaService.getCatpcha();         req.getSession().setAttribute(""captchaAnswer"", c.getAnswer());         resp.setContentType(""image/png"");         ImageIO.write(c.getImage(), ""png"", resp.getOutputStream());     }  }  ---  **Affects:** 2.5.6  1 votes, 3 watchers","closed","status: bulk-closed,","spring-projects-issues","2010-12-08T09:02:24Z","2019-01-13T07:11:57Z"
"","12054","tag produces incorrect action attribute under Glassfish v2.1.1 [SPR-7396]","**[Pavel Halas](https://jira.spring.io/secure/ViewProfile.jspa?name=phalas)** opened **[SPR-7396](https://jira.spring.io/browse/SPR-7396?redirect=false)** and commented  Seems the problem still exists in 3.0.2 and 3.0.3. Works fine in Tomcat 6.0.14, fails in Glassfish 2.1.1.  ---  **Affects:** 3.0.2, 3.0.3  **Issue Links:** - #9085  tag produces incorrect action attribute under Glassfish v2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/045c97f75e231b99ebeaab48b72ccb9e1e07004b","closed","in: web,","spring-projects-issues","2010-07-26T20:47:13Z","2019-01-11T13:38:29Z"
"","12451","ServletRequestDataBinder does not bind MultipartFile with HiddenHttpMethodFilter and Multipart Request [SPR-7795]","**[Paul Sideleau](https://jira.spring.io/secure/ViewProfile.jspa?name=ps466)** opened **[SPR-7795](https://jira.spring.io/browse/SPR-7795?redirect=false)** and commented  I have setup a MultipartFilter and HtmlHiddenMethodFilter following the instructions in #11260 and the javadoc.  I have a java bean that has a org.springframework.web.multipart.MultipartFile property. I attempt to bind my bean with the standard `@ModelAttribute` annotation. The rest of its properties get resolved correctly but the MultipartFile property is set to null.  I believe the issue is that on line 106 of the ServletRequestDataBinder it does an instanceof check: ""request instanceof MultipartRequest"" which will return false because its the HttpMethodRequestWrapper class from the HtmlHiddenMethodFilter.  However, if I move the property out of my javabean and bind it via a RequestParam annoation, it works correctly.  public ModelAndView uploadFile(`@RequestParam`(""file"") MultipartFile file) { // code }  ---  **Affects:** 3.0.4  **Issue Links:** - #12695 ServletRequestDataBinder.bind should also consider wrapped ServletRequests when checking for Multipart,  to comply with HiddenHttpMethodFilter. (_**""is duplicated by""**_) - #11260 HiddenHttpMethodFilter does not support multipart requests  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b3f039ae5f0b54a325cdb23f6720e5002b054cee  1 votes, 2 watchers","closed","type: bug,","spring-projects-issues","2010-12-06T14:21:59Z","2019-01-11T15:37:59Z"
"","12352","Jaxb2 Unmarshalling fails when using spring-oxm-3.0.5 from springframework (with spring-oxm-1.5.9 from spring-ws it works) [SPR-7696]","**[Paul Nyheim](https://jira.spring.io/secure/ViewProfile.jspa?name=hurragutt)** opened **[SPR-7696](https://jira.spring.io/browse/SPR-7696?redirect=false)** and commented  When Upgrading to Spring Framework version 3, we got an issue with our Spring WS Endpoints. Sometimes it would fail with the following exception:  ``` 12:19:14.742 [12122157@qtp-3705235-0] DEBUG o.s.w.s.server.SoapMessageDispatcher - Endpoint invocation resulted in exception - responding with Fault java.lang.ArrayIndexOutOfBoundsException: -4         at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.startPrefixMapping(UnmarshallingContext.java:806) ~[jaxb-impl-2.2.1.jar:2.2.1]         at com.sun.xml.bind.v2.runtime.unmarshaller.InterningXmlVisitor.startPrefixMapping(InterningXmlVisitor.java:81) ~[jaxb-impl-2.2.1.jar:2.2.1]         at com.sun.xml.bind.v2.runtime.unmarshaller.SAXConnector.startPrefixMapping(SAXConnector.java:116) ~[jaxb-impl-2.2.1.jar:2.2.1]         at org.springframework.xml.stream.StaxStreamXmlReader.startPrefixMapping(StaxStreamXmlReader.java:170) ~[spring-xml-1.5.9.jar:1.5.9]         at org.springframework.xml.stream.StaxStreamXmlReader.handleStartElement(StaxStreamXmlReader.java:145) ~[spring-xml-1.5.9.jar:1.5.9]         at org.springframework.xml.stream.StaxStreamXmlReader.parseInternal(StaxStreamXmlReader.java:80) ~[spring-xml-1.5.9.jar:1.5.9]         at org.springframework.xml.stream.AbstractStaxXmlReader.parse(AbstractStaxXmlReader.java:128) ~[spring-xml-1.5.9.jar:1.5.9]         at org.springframework.xml.stream.AbstractStaxXmlReader.parse(AbstractStaxXmlReader.java:111) ~[spring-xml-1.5.9.jar:1.5.9]         at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.unmarshal0(UnmarshallerImpl.java:211) ~[jaxb-impl-2.2.1.jar:2.2.1]         at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.unmarshal(UnmarshallerImpl.java:184) ~[jaxb-impl-2.2.1.jar:2.2.1]         at javax.xml.bind.helpers.AbstractUnmarshallerImpl.unmarshal(AbstractUnmarshallerImpl.java:119) ~[jaxb-api-2.2.1.jar:na]         at javax.xml.bind.helpers.AbstractUnmarshallerImpl.unmarshal(AbstractUnmarshallerImpl.java:102) ~[jaxb-api-2.2.1.jar:na]         at org.springframework.oxm.jaxb.Jaxb2Marshaller.unmarshal(Jaxb2Marshaller.java:581) ~[spring-oxm-3.0.5.RELEASE.jar:3.0.5.RELEASE]         at org.springframework.ws.support.MarshallingUtils.unmarshal(MarshallingUtils.java:62) ~[spring-ws-core-1.5.9.jar:1.5.9]         at org.springframework.ws.server.endpoint.adapter.MarshallingMethodEndpointAdapter.unmarshalRequest(MarshallingMethodEndpointAdapter.java:143) ~[spring-ws-core-1.5.9.jar:1.5.9]         at org.springframework.ws.server.endpoint.adapter.MarshallingMethodEndpointAdapter.invokeInternal(MarshallingMethodEndpointAdapter.java:134) ~[spring-ws-core-1.5.9.jar:1.5.9]         at org.springframework.ws.server.endpoint.adapter.AbstractMethodEndpointAdapter.invoke(AbstractMethodEndpointAdapter.java:58) ~[spring-ws-core-1.5.9.jar:1.5.9]         at org.springframework.ws.server.MessageDispatcher.dispatch(MessageDispatcher.java:228) [spring-ws-core-1.5.9.jar:1.5.9] ... ```  I noticed that my classpath would contain two versions of spring-oxm, one from spring-ws, and one from springframework. If I rearranged my dependencies, and made sure that only the old one from spring-ws was present on my classpath, all requests would work again. So there seems to be a problem introduced into spring-oxm when it was moved into springframework.  I have created a complete maven project that will recreate this issue. The pom.xml included contains two profiles * spring-oxm-from-springframework   * is active by default   * defines dependency to spring-oxm-3.0.5.RELEASE (and excludes spring-oxm from spring-ws) * spring-oxm-from-springws   * can be triggered with property `-Dx`   * defines dependency to spring-oxm-1.5.9  Invoking `mvn clean test` (_spring-oxm-from-springframework_ profile) on the project will fail one of the tests, while invoking it with the other profile `mvn clean test -Dx` (_spring-oxm-from-springws_) passes both tests  The difference between the two tests is different input payload xmls. (see `src/test/resources/` for input xmls) The content is identical, however on the different xml files, the namespace declarations are defined in the root element in one file, and on every element on the other file.  Content from xml files included below:  ```xml                                                     1                user                0001-01-01T00:00:00                false                                   10                   KWH                                                    ```  ```xml                                                     1                user                0001-01-01T00:00:00                false                                   10                   KWH                                                     ```  Both xml files are well-formed and valid according to the xsd's (`src/main/resources/data, src/main/resource/message`)  (Interesting sidenote, if I enable payload validation with the `org.springframework.ws.soap.server.endpoint.interceptor.PayloadValidatingInterceptor`, both profiles will fail the one test using `fails.xml`. Just change the `validateRequest` property of that bean declaration in `src/main/resources/ws.xml` to `true`. Now the test will fail with another stacktrace - similar in nature, but originating from inside xerces...)    ---  **Affects:** 3.0.5  **Attachments:** - [spring-oxm-bugreport.zip](https://jira.spring.io/secure/attachment/17292/spring-oxm-bugreport.zip) (_10.99 kB_)","closed","status: declined,","spring-projects-issues","2010-10-29T04:08:51Z","2019-01-12T16:26:38Z"
"","12046","Spring Framework fails to find bean property if the setter contains more than one capital after the word set (e.g., setTEmailAddr) [SPR-7388]","**[Paul DesRivieres](https://jira.spring.io/secure/ViewProfile.jspa?name=pdesrivieres)** opened **[SPR-7388](https://jira.spring.io/browse/SPR-7388?redirect=false)** and commented  If you use the Spring Framework to automatically bind parameters in your HttpServletRequest to your request context object, please be aware of this Spring bug confirmed in version 2.0 and 2.5.6.  If you have setters setF, setTg, and setDevId in your request context class, Spring will detect properties 'f', 'tg', and 'devId' bind those parameters to your setters. However, if you have setters setTBrandi, setTBid, setTEmailAddr, and setTLoginNumber, Spring will detect properties 'TBrandi', 'TBid', 'TEmailAddr', and 'TLoginNumber' rather than 'tBrandi', 'tBid', 'tEmailAddr', and 'tLoginNumber'. For these parameters you would need to manually call the setters or they won't be defined in your request context.  It seems the bug occurs when your setter has more than one capital letter in a row immediately after the set as setTg and setDevId work but not setTBid and setTEmailAddr.  Renaming the setter from setTEmailAddr to settEmailAddr does resolve the issue. 2010-07-20 15:11:05,498 [http-9080-1] DEBUG org.springframework.beans.CachedIntrospectionResults  - Found bean property 'tEmailAddr' of type [java.lang.String] ... 2010-07-20 15:11:05,502 [http-9080-1] DEBUG org.springframework.beans.BeanWrapperImpl  - Invoked write method [public void com.aol.mail.services.mps.common.ServiceRequest.settEmailAddr(java.lang.String)] with value of type [java.lang.String]  Paul D.  ---  **Affects:** 2.5.6  **Issue Links:** - #11157 Lenient property name casing (beyond standard JavaBeans conventions)","closed","type: enhancement,","spring-projects-issues","2010-07-21T03:59:25Z","2019-01-11T13:38:51Z"
"","12546","CurrencyEditor#getAsText() documents wrong return value [SPR-7890]","**[Paul Benedict](https://jira.spring.io/secure/ViewProfile.jspa?name=paul4christ79)** opened **[SPR-7890](https://jira.spring.io/browse/SPR-7890?redirect=false)** and commented  The method doc says ""This implementation returns null to indicate that there is no appropriate text representation."" This is not true. The currency code is returned.   ---  **Affects:** 3.0 GA, 3.1 RC1","closed","in: core,","spring-projects-issues","2011-01-16T23:13:37Z","2012-06-19T03:39:23Z"
"","12376","ConversionFailedException is not friendly for uses without TypeDescriptor [SPR-7720]","**[Paul Benedict](https://jira.spring.io/secure/ViewProfile.jspa?name=paul4christ79)** opened **[SPR-7720](https://jira.spring.io/browse/SPR-7720?redirect=false)** and commented  ConversionService defines several conversion methods -- only one dealing with TypeDescriptor. It would be ideal if my implementations of the other methods could throw ConversionService. My conversions are done manually between JAXB  POJOs where TypeDescriptors do not come into play. Unfortunately, a TypeDescriptor is required for the exception. Please add alternative ConversionService(cause) and ConversionService(message,cause) constructors.   ---  **Affects:** 3.0 GA  1 votes, 2 watchers","closed","in: core,","spring-projects-issues","2010-11-04T23:38:49Z","2015-09-22T16:49:59Z"
"","12095","GenericConversionService: Add setters to allow wire-up [SPR-7437]","**[Paul Benedict](https://jira.spring.io/secure/ViewProfile.jspa?name=paul4christ79)** opened **[SPR-7437](https://jira.spring.io/browse/SPR-7437?redirect=false)** and commented  I am using `GenericConversionService` to facilitate schemamodel transformations between a JAXB WS and a business service. When trying to wire `GenericConversionService` as a bean in my `ApplicationContext`, I noticed no setters exist for my use case.  I propose adding the following method:  ``` void setConverters(Converter[] converters); ```  Hopefully with that, I can use `{`} markup to instantiate the converter beans too and add them in.   ---  **Affects:** 3.0.3","closed","status: bulk-closed,","spring-projects-issues","2010-08-08T05:43:02Z","2019-01-12T03:32:36Z"
"","12049","Add receiveTimeout parameter to additional JmsTemplate.receiveXXXX methods [SPR-7391]","**[Paul Austin](https://jira.spring.io/secure/ViewProfile.jspa?name=p_d_austin)** opened **[SPR-7391](https://jira.spring.io/browse/SPR-7391?redirect=false)** and commented  Would it be possible to add a receiveTimeout option to additional receiveXXX methods rather than requiring a receiveTimeout for the whole JmsTemplate?  receive(long timeout); receive(String destinationName, long timeout); receiveAndConvert(long timeout);  etc...  I can create a patch if that would be easier.   ---  **Affects:** 3.0.3","closed","type: enhancement,","spring-projects-issues","2010-07-23T02:47:51Z","2014-05-19T05:16:43Z"
"","12067","@RequestMapping prepends a slash to the end of root-level URLs [SPR-7409]","**[Patrick Linskey](https://jira.spring.io/secure/ViewProfile.jspa?name=pcl)** opened **[SPR-7409](https://jira.spring.io/browse/SPR-7409?redirect=false)** and commented  The servlet spec says that the '/' servlet mapping also doubles as the default servlet for paths that don't map to anywhere else. So, to bind something to, say, 'http://example.com/foo', I could do the following:  ```      foo     /  ```  ``` @RequestMapping(value=""foo"") { ... } ```  This works fine. However, if I want to use Jetty to scope my WAR to /foo (maybe because I want to bind a different WAR to /bar), I run into problems, because when I change the `@RequestMapping`'s value to """", Spring automatically adds a leading / to the registered pattern:  ```      foo     /  ```  ``` @RequestMapping(value="""") { ... } ```  After doing this, my code no longer receives requests to http://example.com/foo, as Spring binds my class to http://example.com/foo/ instead.  The problem seems to be caused by the logic in [1] (and maybe [2]), which explicitly checks that the RequestMapping hierarchy begins with a leading /, and adds one if none exists. As a result, as far as I can tell, there is no way to use RequestMapping to bind to the non-slash-terminated root of a servlet namespace.  [1] org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping#determineUrlsForHandlerMethods [2] org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.ServletHandlerMethodResolver#resolveHandlerMethod()   ---  **Affects:** 3.0 GA","closed","in: web,","spring-projects-issues","2010-07-30T15:49:26Z","2019-01-11T14:04:23Z"
"","12541","Clarify that RestTemplate registers an AllEncompassingFormHttpMessageConverter by default [SPR-7885]","**[Patrick Grimard](https://jira.spring.io/secure/ViewProfile.jspa?name=pgrimard)** opened **[SPR-7885](https://jira.spring.io/browse/SPR-7885?redirect=false)** and commented  Looking at the javadoc for FormHttpMessageConverter, the example code states that FormHttpMessageConverter is registered by default when creating an instance of RestTemplate, but it does not actually register one.  This is the no-arg constructor for RestTemplate which does not show it registering a FormHttpMessageConverter at all.  I came across this issue when performing a postForLocation the log showed it was using XmlAwareFormHttpMessageConverter.  Not a big deal to just create a new list of HttpMessageConverters containging FormHttpMessageConverter and setting that on the instance of RestTemplate.  Just thought I'd point out the documentation is wrong.  public RestTemplate() { this.messageConverters.add(new ByteArrayHttpMessageConverter()); this.messageConverters.add(new StringHttpMessageConverter()); this.messageConverters.add(new ResourceHttpMessageConverter()); this.messageConverters.add(new SourceHttpMessageConverter()); this.messageConverters.add(new XmlAwareFormHttpMessageConverter()); if (jaxb2Present) { this.messageConverters.add(new Jaxb2RootElementHttpMessageConverter()); } if (jacksonPresent) { this.messageConverters.add(new MappingJacksonHttpMessageConverter()); } if (romePresent) { this.messageConverters.add(new AtomFeedHttpMessageConverter()); this.messageConverters.add(new RssChannelHttpMessageConverter()); } }   ---  **Affects:** 3.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/442ddb08457bf22afce9622ba9cd82c7415b6832, https://github.com/spring-projects/spring-framework/commit/977084a6b83590390e6ee93775d394d8326f2955  **Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)","closed","type: task,","spring-projects-issues","2011-01-13T12:44:33Z","2018-04-03T20:34:28Z"
"","12019","CLONE -oracle.xml.parser.schema.XSDException: Duplicated definition for: 'identifiedType' is back [SPR-7361]","**[Patrick Crocker](https://jira.spring.io/secure/ViewProfile.jspa?name=patrick.crocker@gmail.com)** opened **[SPR-7361](https://jira.spring.io/browse/SPR-7361?redirect=false)** and commented  We are currently working on an enterprise project for one of our biggest clients. We are using Spring 2.0 and Spring Web Flow 1.0 Rc4. While deploying the application to Oracle 9ias 10.1.2.0.2 in our development environment, we encountered the following error. We experienced the same error in Spring 2.0 RC2 and it was fixed in Spring 2.0 RC3 by Rick Evans. The ticket No is SPR - 2290. Kindly fix the bug. I will attach the XMLParser Oracle uses so you guys can test it. This is a critical error and we are unable to move forward.  EXCEPTION FROM THE LOG FILE:  ---  06/10/11 17:58:18 Started 06/10/11 17:58:21 drlm: jsp: init 06/10/11 17:58:21 drlm: context: init 06/10/11 17:58:21 drlm: Loading Spring root WebApplicationContext 06/10/11 17:58:52 drlm: Error initializing servlet org.springframework.beans.factory.BeanDefinitionStoreException: Line 8 in XML document from ServletContext resource [/WEB-INF/drlm-servlet.xml] is invalid; nested exception is oracle.xml.parser.schema.XSDException: Duplicated definition for: 'identifiedType' Caused by: oracle.xml.parser.schema.XSDException: Duplicated definition for: 'identifiedType' at oracle.xml.parser.v2.XMLError.flushErrorHandler(XMLError.java:444) at oracle.xml.parser.v2.XMLError.flushErrors1(XMLError.java:303) at oracle.xml.parser.v2.NonValidatingParser.parseDocument(NonValidatingParser.java:290) at oracle.xml.parser.v2.XMLParser.parse(XMLParser.java:196) at oracle.xml.jaxp.JXDocumentBuilder.parse(JXDocumentBuilder.java:151) at org.springframework.beans.factory.xml.DefaultDocumentLoader.loadDocument(DefaultDocumentLoader.java:77) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:405) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:357) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:334) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:126) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:142) at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:123) at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:91) at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:94) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:294) at org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.refresh(AbstractRefreshableWebApplicationContext.java:156) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:246) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:184) at org.springframework.web.context.ContextLoaderServlet.init(ContextLoaderServlet.java:83) at javax.servlet.GenericServlet.init(GenericServlet.java:258) at com.evermind.server.http.HttpApplication.loadServlet(HttpApplication.java:2354) at com.evermind.server.http.HttpApplication.findServlet(HttpApplication.java:4795) at com.evermind.server.http.HttpApplication.initPreloadServlets(HttpApplication.java:4889) at com.evermind.server.http.HttpApplication.initDynamic(HttpApplication.java:1015) at com.evermind.server.http.HttpApplication.\(HttpApplication.java:549) at com.evermind.server.Application.getHttpApplication(Application.java:890) at com.evermind.server.http.HttpServer.getHttpApplication(HttpServer.java:707) at com.evermind.server.http.HttpSite.initApplications(HttpSite.java:625) at com.evermind.server.http.HttpSite.setConfig(HttpSite.java:278) at com.evermind.server.http.HttpServer.setSites(HttpServer.java:278) at com.evermind.server.http.HttpServer.setConfig(HttpServer.java:179) at com.evermind.server.ApplicationServer.initializeHttp(ApplicationServer.java:2394) at com.evermind.server.ApplicationServer.setConfig(ApplicationServer.java:1551) at com.evermind.server.ApplicationServerLauncher.run(ApplicationServerLauncher.java:92) at java.lang.Thread.run(Thread.java:534) 06/10/11 17:58:52 drlm: Error preloading servlet javax.servlet.ServletException: Error initializing servlet at com.evermind.server.http.HttpApplication.findServlet(HttpApplication.java:4846) at com.evermind.server.http.HttpApplication.initPreloadServlets(HttpApplication.java:4889) at com.evermind.server.http.HttpApplication.initDynamic(HttpApplication.java:1015) at com.evermind.server.http.HttpApplication.\(HttpApplication.java:549) at com.evermind.server.Application.getHttpApplication(Application.java:890) at com.evermind.server.http.HttpServer.getHttpApplication(HttpServer.java:707) at com.evermind.server.http.HttpSite.initApplications(HttpSite.java:625) at com.evermind.server.http.HttpSite.setConfig(HttpSite.java:278) at com.evermind.server.http.HttpServer.setSites(HttpServer.java:278) at com.evermind.server.http.HttpServer.setConfig(HttpServer.java:179) at com.evermind.server.ApplicationServer.initializeHttp(ApplicationServer.java:2394) at com.evermind.server.ApplicationServer.setConfig(ApplicationServer.java:1551) at com.evermind.server.ApplicationServerLauncher.run(ApplicationServerLauncher.java:92) at java.lang.Thread.run(Thread.java:534) 06/10/11 17:58:52 drlm: drlm: init 06/10/11 17:58:52 drlm: Loading WebApplicationContext for Spring FrameworkServlet 'drlm' 06/10/11 17:58:52 drlm: Error initializing servlet org.springframework.beans.factory.BeanDefinitionStoreException: Line 8 in XML document from ServletContext resource [/WEB-INF/drlm-servlet.xml] is invalid; nested exception is oracle.xml.parser.schema.XSDException: Duplicated definition for: 'identifiedType' Caused by: oracle.xml.parser.schema.XSDException: Duplicated definition for: 'identifiedType' at oracle.xml.parser.v2.XMLError.flushErrorHandler(XMLError.java:444) at oracle.xml.parser.v2.XMLError.flushErrors1(XMLError.java:303) at oracle.xml.parser.v2.NonValidatingParser.parseDocument(NonValidatingParser.java:290) at oracle.xml.parser.v2.XMLParser.parse(XMLParser.java:196) at oracle.xml.jaxp.JXDocumentBuilder.parse(JXDocumentBuilder.java:151) at org.springframework.beans.factory.xml.DefaultDocumentLoader.loadDocument(DefaultDocumentLoader.java:77) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:405) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:357) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:334) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:126) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:142) at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:123) at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:91) at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:94) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:294) at org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.refresh(AbstractRefreshableWebApplicationContext.java:156) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:246) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:184) at org.springframework.web.context.ContextLoaderServlet.init(ContextLoaderServlet.java:83) at javax.servlet.GenericServlet.init(GenericServlet.java:258) at com.evermind.server.http.HttpApplication.loadServlet(HttpApplication.java:2354) at com.evermind.server.http.HttpApplication.findServlet(HttpApplication.java:4795) at com.evermind.server.http.HttpApplication.initPreloadServlets(HttpApplication.java:4889) at com.evermind.server.http.HttpApplication.initDynamic(HttpApplication.java:1015) at com.evermind.server.http.HttpApplication.\(HttpApplication.java:549) at com.evermind.server.Application.getHttpApplication(Application.java:890) at com.evermind.server.http.HttpServer.getHttpApplication(HttpServer.java:707) at com.evermind.server.http.HttpSite.initApplications(HttpSite.java:625) at com.evermind.server.http.HttpSite.setConfig(HttpSite.java:278) at com.evermind.server.http.HttpServer.setSites(HttpServer.java:278) at com.evermind.server.http.HttpServer.setConfig(HttpServer.java:179) at com.evermind.server.ApplicationServer.initializeHttp(ApplicationServer.java:2394) at com.evermind.server.ApplicationServer.setConfig(ApplicationServer.java:1551) at com.evermind.server.ApplicationServerLauncher.run(ApplicationServerLauncher.java:92) at java.lang.Thread.run(Thread.java:534) 06/10/11 17:58:52 drlm: Error preloading servlet javax.servlet.ServletException: Error initializing servlet at com.evermind.server.http.HttpApplication.findServlet(HttpApplication.java:4846) at com.evermind.server.http.HttpApplication.initPreloadServlets(HttpApplication.java:4889) at com.evermind.server.http.HttpApplication.initDynamic(HttpApplication.java:1015) at com.evermind.server.http.HttpApplication.\(HttpApplication.java:549) at com.evermind.server.Application.getHttpApplication(Application.java:890) at com.evermind.server.http.HttpServer.getHttpApplication(HttpServer.java:707) at com.evermind.server.http.HttpSite.initApplications(HttpSite.java:625) at com.evermind.server.http.HttpSite.setConfig(HttpSite.java:278) at com.evermind.server.http.HttpServer.setSites(HttpServer.java:278) at com.evermind.server.http.HttpServer.setConfig(HttpServer.java:179) at com.evermind.server.ApplicationServer.initializeHttp(ApplicationServer.java:2394) at com.evermind.server.ApplicationServer.setConfig(ApplicationServer.java:1551) at com.evermind.server.ApplicationServerLauncher.run(ApplicationServerLauncher.java:92) at java.lang.Thread.run(Thread.java:534) 06/10/11 17:58:52 drlm: dwr-invoker: init 06/10/11 17:58:53 drlm: Started  drlm-servlet.xml file:  ---  \  \  \           	              uk.ltd.getahead.dwr.DWRServlet   dwr-invoker    true                            		   		           flowController   				  drlmMainMenuController                                                     	              	   	                                            	   	   	              	  \  ---  **Affects:** 2.0 final","closed","in: core,","spring-projects-issues","2010-07-08T03:33:08Z","2019-01-13T21:45:28Z"
"","12639","Allow optional @PathVariable [SPR-7984]","**[Patras Vlad Sebastian](https://jira.spring.io/secure/ViewProfile.jspa?name=senoctar)** opened **[SPR-7984](https://jira.spring.io/browse/SPR-7984?redirect=false)** and commented  Allow mapping the same method to multiple URL's that differ in respect to what path variables they use. For example we do not want to transfer the id of the logged in user in the URL for security reasons and simplicity, but there are pages that can either show data for the logged in user or an other user, like a profile page. I would like to be able to map a method like this:  ``` @RequestMapping(value = {""/profile"", ""/profile/{userId}""}) public String showProfile(@PathVariable(""userId"") Integer userId) {   if (userId == null) {     userId = ;   }   //do stuff } ```  The first path of the request mapping to does not have a ""userId"" path variable, and it would be nice if userId (the method parameter) would be null in this case, rather than throwing IllegalStateException.  ---  **Affects:** 3.0.5  **Issue Links:** - #13049 A `@PathVariable` provided in the method parameter, but not in the `@RequestMapping`, will throw an IllegalStateException. (_**""is duplicated by""**_)  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2011-02-21T07:24:23Z","2019-01-13T07:10:59Z"
"","12366","Using array syntax generates invalid id in freemarker [SPR-7710]","**[Pablo](https://jira.spring.io/secure/ViewProfile.jspa?name=gpablo)** opened **[SPR-7710](https://jira.spring.io/browse/SPR-7710?redirect=false)** and commented  In freemarker, if I use the formInput macro with an array parameter:    spring generates a form with an invalid id: 'values[0]'  This is related to https://jira.springframework.org/browse/SPR-2380, which was the same bug but with jsp. It is possible that the same happens with velocity.  To fix it in freemarker, you can change, in spring.ftl:  160c160 <","closed","type: bug,","spring-projects-issues","2010-11-02T06:46:11Z","2019-01-11T15:30:01Z"
"","11882","At @Configuration - Class the @Value replacement with PropertyPlaceholderConfigurer-Bean doesn't work [SPR-7223]","**[P. Knoepfler](https://jira.spring.io/secure/ViewProfile.jspa?name=pknopf)** opened **[SPR-7223](https://jira.spring.io/browse/SPR-7223?redirect=false)** and commented  The propertyPlaceholderConfigurer-Method is called (before the myClass-Method call) and the 'myconfig.properties' File is found (new FileSystemResource(""/myconfig.properties"").exists() is true), but the myProperty is null. Is there a coding problem at MyConfig class or a bug at PropertyPlaceholderConfigurer/Value-Annotation?  `@Configuration` public class MyConfig { private `@Value`(""${myProperty}"") String myProperty;      public @Bean     MyClass myClass() {         System.out.println(""myProperty: "" + this.myProperty);         return new myClass(this.myProperty);     }          public @Bean     PropertyPlaceholderConfigurer propertyPlaceholderConfigurer() {         final PropertyPlaceholderConfigurer cfg = new PropertyPlaceholderConfigurer();         cfg.setLocation(new FileSystemResource(""/myconfig.properties""));         return cfg;     }  }   ---  **Affects:** 3.0.2  1 votes, 0 watchers","closed","in: core,","spring-projects-issues","2010-05-19T20:27:41Z","2019-01-12T16:37:57Z"
"","12715","Character encoding of  resources should be configurable [SPR-8060]","**[Osvaldas Grigas](https://jira.spring.io/secure/ViewProfile.jspa?name=prickus)** opened **[SPR-8060](https://jira.spring.io/browse/SPR-8060?redirect=false)** and commented   and  both setup a ResourceDatabasePopulator bean without setting its ""sqlScriptEncoding"" property, which means that platform's default encoding is always used when reading  resources.  Apart from being platform-dependent, this also makes it impossible to use e.g. Unicode characters in database population scripts. To fix it, add a ""script-encoding"" attribute to  and  elements.  Alternatively, individual  elements could have an ""encoding"" attribute, so that they are parsed into EncodedResource objects instead of plain Resource objects.   ---  **Affects:** 3.1 M1  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2011-03-16T02:26:19Z","2015-09-22T16:49:59Z"
"","12641","Adding contextPaths in oxm:jaxb2-marshaller  [SPR-7986]","**[omar elmandour](https://jira.spring.io/secure/ViewProfile.jspa?name=ramo)** opened **[SPR-7986](https://jira.spring.io/browse/SPR-7986?redirect=false)** and commented  Previously the declaration of a jaxb2Marshaller could be like that :  ```xml                      fr.recouv.scribe.ws.definition.modeles_v1         fr.recouv.scribe.ws.schema.modeles._2009._11         fr.recouv.scribe.ws.schema.commun._2009._11         fr.recouv.scribe.ws.definition.instances_v1         fr.recouv.scribe.ws.schema.instances._2010._11                       ```  We are trying to replace it with  ```xml   ```  Its is a bit unreadable. Would it be possible to add contextPaths element to solve ?   ---  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2011-02-22T02:59:32Z","2018-12-28T10:08:09Z"
"","12311","Support declarative SQL script execution in the TestContext framework [SPR-7655]","**[omar elmandour](https://jira.spring.io/secure/ViewProfile.jspa?name=ramo)** opened **[SPR-7655](https://jira.spring.io/browse/SPR-7655?redirect=false)** and commented  #### Overview  `AbstractTransactionalJUnit4SpringContextTests` and `AbstractTransactionalTestNGSpringContextTests` provide the ability to manually execute a specific SQL script for the current test via their protected `executeSqlScript()` methods. For more control over the configuration of such scripts, one can optionally use either `ResourceDatabasePopulator` or `ScriptUtils` directly.  The above provide several options for _programmatically_ executing scripts; however, it would be nice if the Spring TestContext Framework provided _declarative_ support via an annotation and an associated `TestExecutionListener`.  ---  #### Deliverables  1. [x] The semantics for locating SQL script resources should be consistent with `@ContextConfiguration`'s semantics for locating XML configuration files. 2. [x] There needs to be a mechanism for specifying which `DataSource` and `PlatformTransactionManager` to use from the test's `ApplicationContext`, including default conventions consistent with `TransactionalTestExecutionListener` and `@TransactionConfiguration` 3. [x] The annotation can be applied at either the class or method level with method-level overrides. 4. [x] The annotation can be used as a meta-annotation. 5. [x] The annotation must support all of the configuration options currently supported by `ResourceDatabasePopulator`   - for example, encoding, statement separator, comment prefix, block comment delimiters, error handling flags, etc. 6. [x] The annotation and listener must support execution phases for scripts, for example ""before test"" and ""after test"". 7. [x] The listener should execute the named scripts _within_ the current test's transaction if present, _outside of_ the current test's transaction if present, or always in a new transaction, depending on the value of a boolean flag in the annotation. 8. [x] The listener should delegate to `ResourceDatabasePopulator#execute` to actually execute the scripts. 9. [x] The listener should be registered by default in abstract base classes as well as in `TestContextBootstrapper` implementations.  ---  #### Proposed Annotation Names  - `@SqlGroup` as a _container_ with nested, _repeatable_ `@Sql` entries - `@ExecuteSql` as a _container_ with nested, _repeatable_ `@SqlScripts` entries - `@DatabaseInitializers` as a _container_ with nested, _repeatable_ `@DatabaseInitializer` entries  ---  #### Code Examples  ###### Defaults  ```java @Test // Detects default SQL script location @Sql public void example() { /* ... */ } ```  ###### Single Script  ```java @Test @Sql(""data.sql"") public void example() { /* ... */ } ```  ###### Multiple Scripts  ```java @Test @Sql({""schema.sql"", ""data.sql""}) public void example() { /* ... */ } ```  ###### Multiple Annotations with Container  ```java @Test @SqlGroup({ 	@Sql(""schema.sql""), 	@Sql( 		scripts = ""data.sql"", 		commentPrefix = ""//"", 		separator = ""@@"" 	) }) public void example() { /* ... */ } ```  ###### Multiple Annotations without Container (Java 8)  ```java @Test @Sql(""schema.sql""), @Sql( 	scripts = ""data.sql"", 	commentPrefix = ""//"", 	separator = ""@@"" ) }) public void example() { /* ... */ } ```  ---  **Affects:** 3.0 GA  **Issue Links:** - #16515 Introduce `@SqlConfig` for common SQL script configuration (_**""is depended on by""**_) - #16468 Document `@Sql` script support in the reference manual (_**""is depended on by""**_) - #16530 Improve transaction management for `@Sql` (_**""is depended on by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0c1249fe42cb9bc057ee34584c04dd8987718092, https://github.com/spring-projects/spring-framework/commit/abdb010fc81892fbe442d51c12924104a6b23667, https://github.com/spring-projects/spring-framework/commit/5fd6ebb548d250d00cf2105c71181f08be7f40e0, https://github.com/spring-projects/spring-framework/commit/ae29f48f5f6ab1573f118eda8a7b996a71d2b304  3 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2010-10-14T08:42:04Z","2019-01-13T07:12:39Z"
"","12417","Currency support [SPR-7761]","**[Olivier Bazoud](https://jira.spring.io/secure/ViewProfile.jspa?name=obazoud)** opened **[SPR-7761](https://jira.spring.io/browse/SPR-7761?redirect=false)** and commented  Like theme and locale, it will be nice to have a Currency (java.util.currency) management with : * a CurrencyContextHolder * a CurrencyResolver * a CurrencyChangeInterceptor  It will be a great feature for business application.  ---  **Issue Links:** - #16823 Support for JSR-354 Money & Currency (_**""is superseded by""**_)","closed","type: enhancement,","spring-projects-issues","2010-11-23T07:49:41Z","2019-01-11T15:33:25Z"
"","12246","@RequestParam fails when ConfigurableWebBindingInitializer has both messageCodesResolver and conversionService [SPR-7590]","**[Oliver Stacey](https://jira.spring.io/secure/ViewProfile.jspa?name=ostacey)** opened **[SPR-7590](https://jira.spring.io/browse/SPR-7590?redirect=false)** and commented  I'm seeing an issue that I think is a result of a bug.  I have an AnnotationMethodHandlerAdapter configured thus:  \ \ \ \ \  I also have a controller method with the following signature:  `@RequestMapping`(value=""/account/name"", method = RequestMethod.POST) public String setName(`@RequestParam`(""name"") String name, ModelMap model) {  When this method is invoked, I see a stack trace that looks like:  java.lang.IllegalStateException: Cannot access properties on null bean instance 'name'! org.springframework.util.Assert.state(Assert.java:384) org.springframework.validation.BeanPropertyBindingResult.createBeanWrapper(BeanPropertyBindingResult.java:99) org.springframework.validation.BeanPropertyBindingResult.getPropertyAccessor(BeanPropertyBindingResult.java:87) org.springframework.validation.AbstractPropertyBindingResult.initConversion(AbstractPropertyBindingResult.java:60) org.springframework.validation.DataBinder.setConversionService(DataBinder.java:501) org.springframework.web.bind.support.ConfigurableWebBindingInitializer.initBinder(ConfigurableWebBindingInitializer.java:167) org.springframework.web.bind.annotation.support.HandlerMethodInvoker.initBinder(HandlerMethodInvoker.java:376) org.springframework.web.bind.annotation.support.HandlerMethodInvoker.resolveRequestParam(HandlerMethodInvoker.java:505) org.springframework.web.bind.annotation.support.HandlerMethodInvoker.resolveHandlerArguments(HandlerMethodInvoker.java:339) org.springframework.web.bind.annotation.support.HandlerMethodInvoker.invokeHandlerMethod(HandlerMethodInvoker.java:170) org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.invokeHandlerMethod(AnnotationMethodHandlerAdapter.java:421) org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.handle(AnnotationMethodHandlerAdapter.java:409) org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:774) org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:719) org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:644) org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:560) javax.servlet.http.HttpServlet.service(HttpServlet.java:647) javax.servlet.http.HttpServlet.service(HttpServlet.java:729)  What I believe is happening here is as follows: * The handler adapter delegates to HandlerMethodInvoker, which attempts to resolve the `@RequestParam` argument. * HandlerMethodInvoker creates a WebRequestDataBinder with a null target. * HandlerMethodInvoker then delegates to ConfigurableWebBindingInitializer.initBinder() to initialize the new binder   * this method in turn calls DataBinder.setMessageCodesResolver(). As a side effect of setting the message code resolver, a BeanPropertyBindingResult is created inside the DataBinder; this also has a null target.   * then DataBinder.setConversionService() is called, which in turn calls BeanPropertyBindingResult.initConversionService(), which fails with the above exception because the target of the binding result is null.  It seems that the intention here is to support the ""null target"" case inside WebRequestDataBinder by making sure that bindingResult is never created. However, in this case the binder is accidentally created anyway.  I've attached a patch that overrides setMessageCodesResolver() in WebRequestDataBinder and changes it into a no-op when target is null. This seems like the cleanest simple fix. This should be applied to /trunk/org.springframework.web/src/main/java/org/springframework/web/bind/support/WebRequestDataBinder.java  However, I think there's an inherent contradiction between the approaches taken by DataBinder and WebRequestDataBinder that is likely to generate more bugs in the future. DataBinder seems to be written with the idea that its bindingResult is ""lazy loaded""; WebRequestDataBinder supports a case where the bindingResult should never be created. It seems like great care will need to be taken to ensure that no stray calls into DataBinder result in the creation of an unwanted bindingResult.   ---  **Affects:** 3.0 GA, 3.0.1, 3.0.2, 3.0.3, 3.0.4  **Attachments:** - [WebRequestDataBinder.java.patch](https://jira.spring.io/secure/attachment/17133/WebRequestDataBinder.java.patch) (_1.07 kB_)","closed","in: core,","spring-projects-issues","2010-09-24T01:38:15Z","2012-06-19T03:44:04Z"
"","12726","BeanUtils.getPropertyDescriptors(...) suffers from bug in java.beans.Introspector [SPR-8071]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-8071](https://jira.spring.io/browse/SPR-8071?redirect=false)** and commented  `BeanUtils.getPropertiesDescriptors(...)` uses `java.beans.Introspector to lookup PropertyDescriptors` for classes. In the case of boolean properties read methods of the properties are allowed to be named is `$propertyName` instead of `get$propertyName`.  Unfortunately Introspector does not return the read method correctly if a `Boolean` (instead of a primitive boolean) is used as return type of the method. If you're using read-only properties of that kind (no setter method), the property is not even found as `Boolean isFoo()` is not considered a read method and there's no write method available then. Strangely enough, just manually instantiating a `PropertyDescriptor` for that property discovers the read method as expected.  This leads to quite surprising, unexpected and hard to debug errors so that I think we should work around this issue in Introspector. Here's the testcase:  ```java public class IntrospectorBugTest {      @Test     public void findsReadMethodForPrimitiveBoolean() throws IntrospectionException {         assertFindsReadMethodForFooProperty(PrimitiveBooleanAccessor.class);     }      @Test     public void findsReadMethodForPrimitiveWithPropertyDescriptorDirectly() throws IntrospectionException {         PropertyDescriptor descriptor = new PropertyDescriptor(""foo"", PrimitiveBooleanAccessor.class);         assertThat(descriptor.getReadMethod(), is(notNullValue()));     }      @Test     public void findsReadMethodForNonPrimitiveBoolean() throws IntrospectionException {         assertFindsReadMethodForFooProperty(BooleanAccessor.class);     }      @Test     public void findsReadMethodWithPropertyDescriptorDirectly() throws IntrospectionException {         PropertyDescriptor descriptor = new PropertyDescriptor(""foo"", BooleanAccessor.class);         assertThat(descriptor.getReadMethod(), is(notNullValue()));     }      private static void assertFindsReadMethodForFooProperty(Class type)             throws IntrospectionException {          for (PropertyDescriptor descriptor : Introspector.getBeanInfo(type).getPropertyDescriptors()) {             if (descriptor.getName().equals(""foo"")) {                 assertThat(descriptor.getReadMethod(), is(notNullValue()));                 return;             }         }          fail(""Property foo not found!"");     }      private static class PrimitiveBooleanAccessor {          private Boolean foo;           public boolean isFoo() {             return foo;         }           public void setFoo(boolean foo) {             this.foo = foo;         }     }      private static class BooleanAccessor {          private Boolean foo;          public Boolean isFoo() {             return foo;         }          public void setFoo(Boolean foo) {             this.foo = foo;         }     } } ```  The third test fails, although the fourth in turn is green.   ---  **Affects:** 3.0.5, 3.1 M1","closed","type: enhancement,","spring-projects-issues","2011-03-22T01:47:25Z","2019-01-11T12:41:26Z"
"","12675","Ease creating Location headers in REST controllers [SPR-8020]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-8020](https://jira.spring.io/browse/SPR-8020?redirect=false)** and commented  With it's annotation model Spring MVC provides a convenient way to write REST based server side components. Unfortunately creating fully-qualified URLs for the `Location` header (for POST requests especially) requires us to have `HttpServletRequest` **and** `HttpServletResponse` in the controller methods signature just to hand it to a helper method to copy the static part of the request URL (everything up to the servlet context) into a String and piping it back to the response.  So as `HttpHeaders` already has a `setLocation(URI uri)` method, I wonder whether Spring MVC could simply ""expand"" this URI to prepend the path up to the servlet context in case the URI does **not** start with a protocol string. Beyond that, having a `@ResponseHeaders` annotation which allows you to bind the response headers to a controller method parameter of type `HttpHeaders` would round of the support. This way a controller could look something like this:  ``` @Controller public class CustomerController {    private static final String CUSTOMERS = ""/customers"";   private static final String CUSTOMER = CUSTOMERS + ""/{id}"";    @ResponseStatus(HttpStatus.CREATED)   @RequestMapping(value = CUSTOMERS, method = RequestMethod.POST)   public void createCustomer(@RequestBody Customer customer, @ResponseHeaders HttpHeaders headers) {     Customer result = repository.save(customer);     headers.setLocation(new UriTemplate(CUSTOMER).expand(result.getId()));   }    @RequestMapping(value = CUSTOMER, method = RequestMethod.GET)   public @ResponseBody Customer customer(@PathVariable(""id"") Long id) {     return repository.findOne(id);   } } ```    ---  **Affects:** 3.0.5, 3.1 M1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/60ee0bb8f41d8aa23804b9befafe5b6511318dd2  3 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2011-03-04T01:44:31Z","2012-06-19T03:39:19Z"
"","12670","Caching abstraction treats single method argument as array [SPR-8015]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-8015](https://jira.spring.io/browse/SPR-8015?redirect=false)** and commented  Given the following scenario  ``` class SampleClass {    @Cacheable(""mycache"")   public Something getSomething(String id) { ... }    @CacheEvict(value = ""mycache, key = ""#id"")   public void updateSomething(String id, Object payload) { ... } } ```  cache invalidation will not work correctly. Actually it's not working because the `DefaultKeyGenerator` simply hashes the given parameters as is. In case no `key` attribute is configured (just like in the above example) the parameters will be handed in as single-element-`Object[]` causing a different hash to be created than if the single object would be handed to the key generator directly. So you either have to define the key expression to create an array or alter the annotation on the caching side to `@Cacheable(value = ""mycache"", key = ""#id"")` which is rather repetitive.   ---  **Affects:** 3.1 M1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c3a635196bdf9c0253bc3cac46877edca1141d1a","closed","type: bug,","spring-projects-issues","2011-03-02T08:45:26Z","2012-06-19T03:39:53Z"
"","12660","GenericTypeResolver's getTypeVariableMap(...) and resolveType(...) should be public [SPR-8005]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-8005](https://jira.spring.io/browse/SPR-8005?redirect=false)** and commented  The mentioned methods would be extremely useful in Spring Data Mongo's `SimpleMongoConverter} to resolve generic {{Map`'s and `Collection`'s that are typed to a generic parameter of the class.   ---  **Affects:** 3.0.5, 3.1 M1  **Attachments:** - [mylyn-context.zip](https://jira.spring.io/secure/attachment/17673/mylyn-context.zip) (_1.79 kB_)  **Issue Links:** - [DATACMNS-104](https://jira.spring.io/browse/DATACMNS-104) Upgrade to Spring 3.0.7. (_**""is depended on by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/98d798dbe4aff32cc48c28a0c231717cede52d96, https://github.com/spring-projects/spring-framework/commit/c82dab649775c67ace3482cbbf5cdfc4d2504cd9, https://github.com/spring-projects/spring-framework/commit/ffa478462815844689fd16cca54b19ba605872fd","closed","type: enhancement,","spring-projects-issues","2011-02-28T08:58:21Z","2012-06-19T03:39:30Z"
"","12605","Workaround for Java bug in parsing specific decimal value [SPR-7950]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-7950](https://jira.spring.io/browse/SPR-7950?redirect=false)** and commented  Current Java versions suffer from a nasty bug that will pretty much stall the entire VM when trying to parse the value into a BigDecimal or Double. So in case somebody pipes this into a Spring MVC form for example, the CustomNumberEditor will suffer from this vulnerability.  Although Oracle seems to approach the issue now that it's publicly discussed, but users not able to upgrade to a very current version of Java will be affected.  http://www.exploringbinary.com/java-hangs-when-converting-2-2250738585072012e-308/   --- No further details from [SPR-7950](https://jira.spring.io/browse/SPR-7950?redirect=false)","closed","type: enhancement,","spring-projects-issues","2011-02-09T05:24:18Z","2013-01-16T01:37:00Z"
"","12586","Checking for @XmlRootElement annotation should be made optional in Jaxb2Marshaller  [SPR-7931]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-7931](https://jira.spring.io/browse/SPR-7931?redirect=false)** and commented  The `Jaxb2Marshaller` is only supporting classes annotated with `@XmlRootElement` currently and there's no way to override that behaviour as `supportsInternal(Class, boolean)` is private. There are cases when you want to (un)marshal classes that are `@XmlType` annotated only. Especially when working with XJC, you get the `@XmlRootElement` annotation only for classes that have their `xsd:simpleType` or `xsd:complexType` nested inside the `xsd:element` declaration (see [this blog entry](http://weblogs.java.net/blog/kohsuke/archive/2006/03/why_does_jaxb_p.html) for why that's the case). However, if you have a type that can be reused **and** used as a root element's type, XJC will not create the `@XmlRootElement` annotation but rather a factory method inside the `ObjectFactory` class. To get those classes (un)marshalled, you currently have to copy large parts of `Jaxb2Marshaller` as there's no way to disable the check for the annotation. So it would be cool if this was configurable through a bean property or at least changeable so that a subclass could potentially call `supportsInternal(clazz, false)`.  ---  **Issue Links:** - #14376 Jaxb2Marshaller should support JaxbElement (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/01d2082090fa59dfadff6bf092f99a4cd37f82f6","closed","type: enhancement,","spring-projects-issues","2011-02-02T10:18:28Z","2019-01-11T16:12:42Z"
"","12573","element shall have an ID attribute [SPR-7918]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-7918](https://jira.spring.io/browse/SPR-7918?redirect=false)** and commented  It would be useful to have an `id` attribute at the `` element to e.g. be able to export it to JMX easy. As the JMX support is using bean names heavily it's a bit ugly to use the generated bean name to expose it.   ---  **Affects:** 3.0.5","closed","type: enhancement,","spring-projects-issues","2011-01-28T02:58:14Z","2014-05-19T05:04:34Z"
"","12408","Shared EntityManager proxy does not expose JPA Provider EntityManager interface if not configured explicitly [SPR-7752]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-7752](https://jira.spring.io/browse/SPR-7752?redirect=false)** and commented  If you rely on JPA persistence provider auto-detection the shared `EntityManager` proxy created by a `EntityManagerFactoryBean` does not expose the JPA provider specific extended `EntityManager` interface that clients might want to cast the `EntityManager` to, just to check which persistence provider is currently used.  As we're dealing with a `PersistenceUnitInfo` and the `PersistenceProviderClassName` already and there's a 1:1 mapping between persistence provider and the `EntityManager` interface exposed we could also expose that one besides `javax.persistence.EntityManager`.  * `org.hibernate.ejb.HibernatePersistence` -> `org.hibernate.ejb.HibernateEntityManager` * `org.eclipse.persistence.jpa.PersistenceProvider` -> `org.eclipse.persistence.jpa.JpaEntityManager` * `org.apache.openjpa.persistence.PersistenceProviderImpl` -> `org.apache.openjpa.persistence.OpenJPAEntityManager`  DataNucleus does not expose an additional interface.   ---  **Affects:** 3.0.5  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2010-11-18T06:06:55Z","2011-12-12T07:13:03Z"
"","12135","Support lazy initialization for jee:jndi-lookup [SPR-7477]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-7477](https://jira.spring.io/browse/SPR-7477?redirect=false)** and commented  In multi environment scenarios using bean aliases is quite powerful (see attached slide). As handling environments usually involves JNDI lookups. The alias-approach requires beans involved being marked as lazy-init. Thus you will have to use a plain bean definition over the jee namespace. Simply adding a lazy-init attribute would fix that nicely.   ---  **Affects:** 3.0.4  **Attachments:** - [7477-git.patch](https://jira.spring.io/secure/attachment/17068/7477-git.patch) (_6.54 kB_) - [spring-env-beans.pdf](https://jira.spring.io/secure/attachment/17018/spring-env-beans.pdf) (_69.09 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c7a350cde7fe7adeccb8287a2106d7b6e2af8b3d","closed","type: enhancement,","spring-projects-issues","2010-08-20T02:26:03Z","2019-01-11T14:09:45Z"
"","12133","Reserved keywords/bean names for Spring EL should be documented [SPR-7475]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-7475](https://jira.spring.io/browse/SPR-7475?redirect=false)** and commented  The core Spring expression language provides access to bean by simply refering them by name. Besides that Spring has introduced some bean names that rather look like reserved variables such as `servletContext` and stuff. Currently there's no place you get an overview over keywords/reserved bean names Spring introduces by default. This should be documented in the reference docs.   ---  1 votes, 1 watchers","closed","status: bulk-closed,","spring-projects-issues","2010-08-19T04:03:49Z","2019-01-12T03:32:30Z"
"","12047","GenericTypeResolver returns Object for parameterized parameters [SPR-7389]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-7389](https://jira.spring.io/browse/SPR-7389?redirect=false)** and commented  Suppose you have a generic type `MyType` and a concrete type based on that types `T` to a parameterized type again `MyConcreteType extends MyType`. Using `GenericTypeResolver.resolveTypeArguments(MyConcreteType.class, MyType.class)` returns `Object` as resolved type where `Collection` would be expected.  I dived into the sources and it seems `extractClass(Class ownerClass, Type arg)` misses a check for `Type` being an instance of `ParameterizedType`. In this case it could simply return `((ParameterizedType) type).getRawType()`. Currently it simply returns `Object`.  ---  **Affects:** 3.0.3  **Issue Links:** - #10642 SimpleApplicationEventMulticaster does not filter ApplicationEvents correctly  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b7b7c067c689c1e2e5dcedcdf38cc44c3bbe3c05","closed","in: core,","spring-projects-issues","2010-07-21T18:53:06Z","2019-01-11T13:38:48Z"
"","12030","Introduce support for persistent mode for embedded databases [SPR-7372]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-7372](https://jira.spring.io/browse/SPR-7372?redirect=false)** and commented  Currently the embedded database support is limited to using H2, HSQL and the like in in-memory mode. For small applications one might want to use the persistent mode of these databases so that the data written into them is not lost between restarts.  As in most cases the persistence mode is determined via the JDBC URL, this probably can be switched on via a boolean flag. Alternatively we could have dedicated `DatabaseType` s.  ---  **Affects:** 3.0.3  **Issue Links:** - #17060 Introduce support for custom properties for embedded databases (_**""is superseded by""**_)  8 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2010-07-14T20:04:19Z","2019-02-22T14:44:52Z"
"","11999","Make SpringConfiguredBeanDefinitionParser public [SPR-7340]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-7340](https://jira.spring.io/browse/SPR-7340?redirect=false)** and commented  In case you want to create a custom namespace that transparently adds the functionality hidden behind `` it would be cool to simply instantiate `SpringConfiguredBeanDefinitionParser` and call `parse(...)` method on it.   ---  **Affects:** 3.0.3  1 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2010-06-30T03:28:50Z","2018-12-28T11:41:14Z"
"","11970","Clarify usage of CustomEditorConfigurer [SPR-7311]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-7311](https://jira.spring.io/browse/SPR-7311?redirect=false)** and commented  The JavaDoc of `CustomEditorConfigurer` is a little ambiguous on when a `PropertyEditorRegistry` should be configured and when using the `customEditors` property can/should be used.   ---  **Affects:** 3.0.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e11a40f80925d62d705dd029eff4f0ebd48906f9","closed","","spring-projects-issues","2010-06-21T23:07:18Z","2019-01-11T14:21:02Z"
"","11960","Documentation should mention @Primary [SPR-7301]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-7301](https://jira.spring.io/browse/SPR-7301?redirect=false)** and commented  The documentation (http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/beans.html) currently talks a lot about the `@Qualifier` annotation but does not mention `@Primary` with a single word.   ---  **Affects:** 3.0.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7cac5d60a18117c5b9b149b32a7e1ab32cf2ee98  1 votes, 1 watchers","closed","type: documentation,","spring-projects-issues","2010-06-18T06:42:30Z","2015-07-15T09:05:08Z"
"","11931","AnnotationUtils should contain methods to discover method parameter annotations [SPR-7272]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-7272](https://jira.spring.io/browse/SPR-7272?redirect=false)** and commented  `AnnotationUtils` currently provides methods to discover annotations on methods and types. In some cases you might want to find out if method parameters are annotated and somehow select these parameters to maybe grab exactly them on execution (e.g. in AOP cases).  Attached you'll find a patch against the current `AnnotationUtils` with a proposed implementation. I tried to stick to the filter style already used in `ReflectionUtils`. I already have that in a local Git branch, so if you think it's okay, I could simply commit it myself.   ---  **Affects:** 3.0.2  **Attachments:** - [parameter-annotations.patch](https://jira.spring.io/secure/attachment/16689/parameter-annotations.patch) (_11.23 kB_) - [parameter-annotations.patch](https://jira.spring.io/secure/attachment/16688/parameter-annotations.patch) (_10.58 kB_)  3 votes, 5 watchers","closed","status: bulk-closed,","spring-projects-issues","2010-06-09T22:18:54Z","2019-01-12T03:50:12Z"
"","12287","SpEL: Conversion of collection method parameters fails [SPR-7631]","**[Oliver Becker](https://jira.spring.io/secure/ViewProfile.jspa?name=obecker)** opened **[SPR-7631](https://jira.spring.io/browse/SPR-7631?redirect=false)** and commented  In the SpEL when a method is invoked that has a method parameter of a generic collection type (say Collection\), the elements of the passed collection (say Collection\) will not be converted. (Note: this works fine for setting properties.)  Here is a test case:  public class CollectionToCollectionConverterTest {      public static class Foo {              private Collection foos;              public final String value;              public Foo(String value) {             this.value = value;         }              public void setFoos(Collection foos) {             this.foos = foos;         }              public Collection getFoos() {             return this.foos;         }          }          @Test     public void testConvert() {         ExpressionParser parser = new SpelExpressionParser();         Foo root = new Foo(""bar"");         EvaluationContext context = new StandardEvaluationContext(root);              Collection foos = Collections.singletonList(""baz"");              // property access, works         Expression expression = parser.parseExpression(""foos"");         expression.setValue(context, foos);         Foo baz = root.getFoos().iterator().next();         Assert.assertEquals(""baz"", baz.value);              // method call, fails (ClassCastException)         expression = parser.parseExpression(""setFoos(#foos)"");         context.setVariable(""foos"", foos);         expression.getValue(context);         baz = root.getFoos().iterator().next();         Assert.assertEquals(""baz"", baz.value);     }  }   ---  **Affects:** 3.0.4","closed","in: core,","spring-projects-issues","2010-10-08T06:41:35Z","2012-06-19T03:39:51Z"
"","11963","GenericConversionService tries to convert equal types [SPR-7304]","**[Oliver Becker](https://jira.spring.io/secure/ViewProfile.jspa?name=obecker)** opened **[SPR-7304](https://jira.spring.io/browse/SPR-7304?redirect=false)** and commented  The convert() method of the GenericConversionService first looks for a converter before checking whether the source is an instance of the target type (line 173 and following). This is in my opinion an unnecessary (and expensive, see #11415) operation.  Moreover, since the ObjectToObjectConverter always belongs to the converters list in the GenericConversionService, a conversion will be performed if there is a proper constructor or valueOf method. In our case the respective class has a copy constructor (i.e. taking an instance of the same class as the parameter), which leads to an unwanted conversion. (By the way - assuming that a constructor with a parameter of type T is always the correct means for converting a value of T to an instance of this class is quite questionable.)  So: 1. don't try to convert instances of the target class 2. don't use constructors for the conversion  ---  **Affects:** 3.0.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/27b04036a9e6e7434bf3ef0942b417aa16b90574  1 votes, 1 watchers","closed","type: bug,","spring-projects-issues","2010-06-20T02:33:27Z","2019-01-11T14:22:17Z"
"","11948","StackOverflowError when converting nested Lists [SPR-7289]","**[Oliver Becker](https://jira.spring.io/secure/ViewProfile.jspa?name=obecker)** opened **[SPR-7289](https://jira.spring.io/browse/SPR-7289?redirect=false)** and commented  The following simple unit test demonstrates the problem:  ConversionService service = ConversionServiceFactory.createDefaultConversionService(); List list = Collections.singletonList(Collections.singletonList(""Foo"")); Assert.assertNotNull(service.convert(list, String.class));  Most probably the problem stems from the changed method in TypeDescriptor  public synchronized TypeDescriptor getElementTypeDescriptor() { if (this.elementType == null) { this.elementType = forElementType(resolveElementType()); } return this.elementType; }  and the fact that forElementType returns this in this case.  ---  **Affects:** 3.0.3  **Issue Links:** - #12219 TypeDescriptor.forElementType() is broken for nested collections (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/27b04036a9e6e7434bf3ef0942b417aa16b90574","closed","in: core,","spring-projects-issues","2010-06-16T01:19:49Z","2019-01-11T14:11:20Z"
"","12364","It would be nice to have in JpaTemplate counterparts supporting TypedQuery for methods findByNamedQuery, findByNamedParams, findByNamedQueryAndNamedParams [SPR-7708]","**[Oleksandr Alesinskyy](https://jira.spring.io/secure/ViewProfile.jspa?name=al0)** opened **[SPR-7708](https://jira.spring.io/browse/SPR-7708?redirect=false)** and commented  It would be nice to have in JpaTemplate counterparts supporting TypedQuery for methods findByNamedQuery, findByNamedParams, findByNamedQueryAndNamedParams. They may have another naming pattern to avoid a signature collisions for findByNamedQuery(final String queryName, final Object... values).  While an usage of SharedEntityManagerBean is a reasonable alternative for JpaTemplate there is quite a lot of an existing code that uses JpaTemplate so its improvement may pay for itself.   ---  **Affects:** 3.0.5","closed","status: invalid,","spring-projects-issues","2010-11-02T04:05:40Z","2019-01-12T05:31:23Z"
"","12069","Remove 'autodetect' autowire mode from reference docs [SPR-7411]","**[Oleksandr Alesinskyy](https://jira.spring.io/secure/ViewProfile.jspa?name=al0)** opened **[SPR-7411](https://jira.spring.io/browse/SPR-7411?redirect=false)** and commented  See _Table 3.2 Autowiring modes_ in the chapter _3.4.5 Autowiring collaborators_ . This mode is not supported by Spring anymore (unless older version of XSD is used).   ---  **Affects:** 3.0 GA, 3.0.1, 3.0.2, 3.0.3","closed","type: documentation,","spring-projects-issues","2010-07-31T13:32:35Z","2012-06-19T03:43:21Z"
"","12205","ConversionService.canConvert(..) is inconsistent with the behavior of ConversionService.convert(..) method. [SPR-7548]","**[Oleg Zhurakousky](https://jira.spring.io/secure/ViewProfile.jspa?name=oleg.zhurakousky@springsource.com)** opened **[SPR-7548](https://jira.spring.io/browse/SPR-7548?redirect=false)** and commented  This might actually be a bug, but for now i am treating it as an improvement request.  Basically there are couple of scenarios when _canConvert(..)_ method could return 'false' while the actual conversion is still possible. For example conversion of an empty parameterized or un-parameterized collection to a collection parameterized with different type or even unparameterized collection.  A more realistic scenario is when using SpEL to invoke method with parameterized collection as argument while passing differently parameterized or un-parameterized but _EMPTY_ collection. See code below  ``` private static class MethodWithCollection{ 	public void methodWithCollection(List fooCollection){} } // test code List emptyArray = new ArrayList(); MethodParameter methodParam = new MethodParameter(MethodWithCollection.class.getDeclaredMethod(""methodWithCollection"", List.class), 0); GenericConversionService conversionService = ConversionServiceFactory.createDefaultConversionService(); boolean canConvert = conversionService.canConvert(emptyArray, new TypeDescriptor(methodParam));. ```  The above will actually return FALSE However, if you still decide to continue with conversion it will happen successfully:  ``` Object convertedA = conversionService.convert(emptyArray, TypeDescriptor.forObject(emptyArray), new TypeDescriptor(methodParam)); ```  It will simply return an empty unconverted collection and rightfully so since empty collection is unconvertible and no attempt to convert it should be made..  In fact I believe this is closely related to the recent change in #12146.  So as you can see there is inconsistency between _canConvert(..)_ and _convert(..)_ methods  Unfortunately today there is no way for the _ConversionService.canConvert(..) method to know wether we are dealing with en empty collection or not since there is no method that takes the source object as an argument, only source type.  So I would propose to add a new method to a ConversionService  ``` boolean canConvert(Object source, TypeDescriptor targetType); ```  as well as few extra modifications to accommodate the above scenario.  Attached is a patch which takes care of this issue with additional test cases. It passes full Spring build.  ---  **Affects:** 3.0.4  **Attachments:** - [SPR-7548.txt](https://jira.spring.io/secure/attachment/17096/SPR-7548.txt) (_9.89 kB_)  **Issue Links:** - [INT-1441](https://jira.spring.io/browse/INT-1441) NPE in BeanFactoryTypeConverter when upgrading to Spring 3.0.5 (_**""is depended on by""**_) - #12146 StackOverflowError, ClassCastException and other issues with ConversionService  **Referenced from:** commits https://github.com/spring-projects/spring-integration/commit/4263202e717e42b1d69ef5d4778b68c83d251ad7  1 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2010-09-12T10:27:08Z","2019-01-11T15:10:22Z"
"","12195","Invoking method with parameterized Collection as an argument while passing an empty Collection results in NPE [SPR-7538]","**[Oleg Zhurakousky](https://jira.spring.io/secure/ViewProfile.jspa?name=oleg.zhurakousky@springsource.com)** opened **[SPR-7538](https://jira.spring.io/browse/SPR-7538?redirect=false)** and commented  The problem is somewhat related to the issue that was described in #12146 - resolving parameterized Collection when it is empty.  Currently, _TypeDescriptor.resolveCollectionElementType(..)_ method seem to rely only on _CollectionUtils.findCommonElementType(..)_ method to determine the type of the elements in the Collection instead of looking at its parameterized types, thus resulting in every empty Collection to be _Collection_ even though one might have declared it as _Collection_.  This creates a problem down the road when trying to invoke a method via SpEL while passing an empty (although properly parameterized) collection as an argument. When _ReflectiveMethodResolver_ invokes _ReflectionHelper.compareArguments(paramDescriptors, argumentTypes, typeConverter)_ to get _ReflectionHelper.ArgumentsMatchInfo_, it comes back as **ArgumentsMatch: REQUIRES_CONVERSION** (when conversion should not be required) and since there is no appropriate Converter _BeanFactoryTypeConverter_ delegates to:  ``` PropertyEditor editor = delegate.findCustomEditor(sourceType.getType(), null); editor.setValue(value);  ```  However in this case _findCustomeEditor_ method returns 'null' resulting in the NPE being thrown on the next line. See attached test.  I am classifying it as a bug for now, unless that is the intended behavior.  ---  **Affects:** 3.0.4  **Attachments:** - [NpeTest.java](https://jira.spring.io/secure/attachment/17090/NpeTest.java) (_1.72 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/99f7142e3f78e73cf191fedb41926189dee69dc5","closed","in: core,","spring-projects-issues","2010-09-10T09:41:22Z","2019-01-12T05:31:36Z"
"","12172","StringUtils does not trim white spaces when converts comma delimited strings to Set or String[] [SPR-7535]","**[Oleg Zhurakousky](https://jira.spring.io/secure/ViewProfile.jspa?name=oleg.zhurakousky@springsource.com)** opened **[SPR-7535](https://jira.spring.io/browse/SPR-7535?redirect=false)** and commented  Not sure if this was the intended behavior, but it seem like a bug to me. Details are best described in code:  ``` @Test public void testCommaDelimitedListToSet(){ 	Set testData = StringUtils.commaDelimitedListToSet(""many, moe, jack""); 	assertTrue(testData.contains(""many"")); 	assertFalse(testData.contains(""moe"")); // this should actually be 'true' 	assertTrue(testData.contains("" moe"")); // this should be 'false' } @Test public void testCommaDelimitedListToStringArray(){ 	String[] testData = StringUtils.commaDelimitedListToStringArray(""many, moe, jack""); 	assertTrue(testData[0].equals(""many"")); 	assertFalse(testData[1].equals(""moe"")); // this should actually be 'true' 	assertTrue(testData[1].equals("" moe"")); // this should be 'false' } ```    ---  **Affects:** 3.0.4","closed","type: enhancement,","spring-projects-issues","2010-09-09T10:24:01Z","2015-09-22T17:34:31Z"
"","12146","StackOverflowError, ClassCastException and other issues with ConversionService [SPR-7488]","**[Oleg Zhurakousky](https://jira.spring.io/secure/ViewProfile.jspa?name=oleg.zhurakousky@springsource.com)** opened **[SPR-7488](https://jira.spring.io/browse/SPR-7488?redirect=false)** and commented  We have the following scenario in Spring Integration. We are trying to extract MessageHeaders from the Message and map MessageHeaders as input parameter of the method that takes Properties type. SpEL uses ConversionService to convert MessageHeaders to Properties obviously trying to convert every element to a String. When it gets to $history header which is initially an empty ArrayList it attempts to convert it to a String. _*When ArrayList is empty we get StackOverflowError. When ArrayList contains at least one element everything is fine.*_  First ConversionService finds the right Converter which is ObjectToCollectionConverter. ObjectToCollectionConverter gets TypeDescriptor for target type and this is where things get really interesting. TypeDescriptor attempts to resolve common type of the Collection via call to CollectionUtils.findCommonElementType(collection) which is based on looking at the first element and comparing it to every other element after that and if they all match that is the common type otherwise it will return 'null'. That explains why everything works when ArrayList contained at least one element. However in our case its empty so TypeDescriptor is making another attempt to extract the collection type by using GenericCollectionTypeResolver.getCollectionType() and that is where it gets fishy because the first line of code there is:  ``` if (clazz.getName().startsWith(""java.util."")) { 	return null; } ```  ... which obviously results in null for our case and eventually results in elementType of this TypeDescriptor to be set to TypeDescriptor.NULL, which is then takes the actual type of the collection and makes it a target type via TypeDescriptor(object) where 'object' is the actual collection (instead of the its type or common type) _*thus resulting in the cycle causing StackOverflowError*_.  Questions: 1) If target type is Properties should MapToMapConverter simply call toString() on every value? Although I personally disagree that toString() method should be used as default for conversion it is my understanding that it is currently the assumption of the ConversionService. 2) Why GenericCollectionTypeResolver.getCollectionType() ignores java.util package?  I am attaching the test cases which reproduce all these plus few more minor issues in isolation.  ---  **Affects:** 3.0.4  **Attachments:** - [StackOverflowExceptionTest.java](https://jira.spring.io/secure/attachment/17022/StackOverflowExceptionTest.java) (_5.31 kB_)  **Issue Links:** - #12205 ConversionService.canConvert(..) is inconsistent with the behavior of ConversionService.convert(..) method.  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0a17e4175519914c6010c6ac7a6f5cfcd5387ac8","closed","in: core,","spring-projects-issues","2010-08-24T09:54:39Z","2019-01-11T14:09:12Z"
"","12223","Exception when @Scheduled and @Async placed on one bean [SPR-7566]","**[Nikita Koksharov](https://jira.spring.io/secure/ViewProfile.jspa?name=batman)** opened **[SPR-7566](https://jira.spring.io/browse/SPR-7566?redirect=false)** and commented  Here is my spring config:  \                        \  Here is my classes:  package com.tests;  import org.springframework.scheduling.annotation.*;  public class TestBean implements ITestBean {      @Scheduled(fixedDelay = 1000)     public void scheduleMethod() {          }          @Async     public void asyncMethod() {          }  }  package com.tests;  public interface ITestBean {      void asyncMethod();  }  On spring context creation i got follow exception:  Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'ru.flexis.officewars.battle.TestBean#0' defined in class path resource [test-context.xml]: Initialization of bean failed; nested exception is java.lang.IllegalStateException: failed to prepare task at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:527) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:291) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:288) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:580) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:895) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:425) at org.unitils.spring.util.ApplicationContextManager.createInstanceForValues(ApplicationContextManager.java:117) ... 46 more Caused by: java.lang.IllegalStateException: failed to prepare task at org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor$1.doWith(ScheduledAnnotationBeanPostProcessor.java:114) at org.springframework.util.ReflectionUtils.doWithMethods(ReflectionUtils.java:452) at org.springframework.util.ReflectionUtils.doWithMethods(ReflectionUtils.java:430) at org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor.postProcessAfterInitialization(ScheduledAnnotationBeanPostProcessor.java:98) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:407) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1426) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519) ... 55 more Caused by: java.lang.NoSuchMethodException: $Proxy12.scheduleMethod() at java.lang.Class.getMethod(Class.java:1605) at org.springframework.util.MethodInvoker.prepare(MethodInvoker.java:178) at org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor$1.doWith(ScheduledAnnotationBeanPostProcessor.java:111) ... 61 more Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'ru.flexis.officewars.battle.TestBean#0' defined in class path resource [test-context.xml]: Initialization of bean failed; nested exception is java.lang.IllegalStateException: failed to prepare task at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:527) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:291) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:288) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:580) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:895) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:425) at org.unitils.spring.util.ApplicationContextManager.createInstanceForValues(ApplicationContextManager.java:117) ... 46 more Caused by: java.lang.IllegalStateException: failed to prepare task at org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor$1.doWith(ScheduledAnnotationBeanPostProcessor.java:114) at org.springframework.util.ReflectionUtils.doWithMethods(ReflectionUtils.java:452) at org.springframework.util.ReflectionUtils.doWithMethods(ReflectionUtils.java:430) at org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor.postProcessAfterInitialization(ScheduledAnnotationBeanPostProcessor.java:98) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:407) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1426) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519) ... 55 more Caused by: java.lang.NoSuchMethodException: $Proxy12.scheduleMethod() at java.lang.Class.getMethod(Class.java:1605) at org.springframework.util.MethodInvoker.prepare(MethodInvoker.java:178) at org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor$1.doWith(ScheduledAnnotationBeanPostProcessor.java:111) ... 61 more   ---  **Affects:** 3.0.4  5 votes, 6 watchers","closed","in: core,","spring-projects-issues","2010-09-17T07:24:40Z","2019-01-12T16:26:46Z"
"","11927","Use generics in AopContext.currentProxy() [SPR-7268]","**[Nikita Koksharov](https://jira.spring.io/secure/ViewProfile.jspa?name=batman)** opened **[SPR-7268](https://jira.spring.io/browse/SPR-7268?redirect=false)** and commented  I consider to use generics in AopContext.currentProxy(). It will looks more convient:  AopContext.\currentProxy().method();  instead of:  ((TestBean)AopContext.currentProxy()).method();  Patch provided.   ---  **Affects:** 3.0.2  **Attachments:** - [SPR-7268.patch](https://jira.spring.io/secure/attachment/16635/SPR-7268.patch) (_682 bytes_)","closed","type: enhancement,","spring-projects-issues","2010-06-07T17:24:20Z","2018-12-26T17:20:19Z"
"","11921","Aop should inspect all methods not only ""public"" [SPR-7262]","**[Nikita Koksharov](https://jira.spring.io/secure/ViewProfile.jspa?name=batman)** opened **[SPR-7262](https://jira.spring.io/browse/SPR-7262?redirect=false)** and commented  In current implementation of aop matching were are only public methods can be inspected for matching aspects, but should see all. Because in ""proxy-target-class"" mode those ""private"" or ""protected"" methods not handled. See patch in attachments.   ---  **Affects:** 3.0.2  **Attachments:** - [SPR-7262.patch](https://jira.spring.io/secure/attachment/16630/SPR-7262.patch) (_580 bytes_)","closed","type: enhancement,","spring-projects-issues","2010-06-04T19:31:10Z","2018-12-28T10:44:42Z"
"","11920","Consider add to ""aspectj-autoproxy"" tag attribute ""exposeProxy"" [SPR-7261]","**[Nikita Koksharov](https://jira.spring.io/secure/ViewProfile.jspa?name=batman)** opened **[SPR-7261](https://jira.spring.io/browse/SPR-7261?redirect=false)** and commented  It would be useful to add ""exposeProxy"" attribute to ""aspectj-autoproxy"" tag, because this code did't work in spring bean:  ((TestBean)AopContext.currentProxy())  I can't get currentProxy of my bean.   ---  **Affects:** 3.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fe1e7f0d6ca6a397b2d72f8776ba7e4c1dd8c21f, https://github.com/spring-projects/spring-framework/commit/d684e494627190182e2bb0bd6acd9acff84d2114","closed","type: enhancement,","spring-projects-issues","2010-06-04T19:21:22Z","2012-06-19T03:43:14Z"
"","12238","ProxyFactoryBean getObject called before setInterceptorNames, silently creating an invalid proxy [SPR-7582]","**[nigel magnay](https://jira.spring.io/secure/ViewProfile.jspa?name=magnayn)** opened **[SPR-7582](https://jira.spring.io/browse/SPR-7582?redirect=false)** and commented  We have an application that uses a fairly standard pattern to declare a proxy for a bean:  ```xml          	     	     		     		   Interceptor1                            Interceptor2                               ...                            InterceptorN     		     	      ```  The instantiation order causes this bean to be being created in response to an unrelated autowiring request, e.g:  ```java @Autowired(required=false) List someOthers; ```  Which is internally executing `getBeanNamesForType()`.  This causes a chain of objects to be created, and the `ProxyFactoryBean` for `AService` to be called with `getObject()`.  However, this `getObject()` call is in advance of Spring having set the `interceptorNames`. Thus the proxy is created, and the `advisorChainInitialized` variable set to `true` with no interceptor names.  There's several things here  1. I don't see why spring is calling `getObject` on an uninitialized factory; it ought to have set the properties first. I don't believe there are circular dependencies here (since it is initiated by a request to find all instances of an unrelated class). I can remove the problem (for one bean, but this applies to many) by creating a derived type of `ProxyFactoryBean` that sets the target and `interceptorNames` on construction... but this seems to be a nasty workaround as I'd have to set it for many, many beans. If it believes there to be a circular dependency I'd expect an exception. 2. If `setInterceptorNames` finds that `advisorChainInitialized == true`, it ought to throw an exception, since it is clearly too late to influence the interception chain (so for example security interceptors mysteriously fail to work).  ---  **Affects:** 2.5.6  **Attachments:** - [spring-SPR-7582-workaround.patch](https://jira.spring.io/secure/attachment/17467/spring-SPR-7582-workaround.patch) (_1.71 kB_)  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1477  2 votes, 3 watchers","closed","in: core,","spring-projects-issues","2010-09-21T15:29:13Z","2021-12-14T16:23:46Z"
"","12522","JibxMarshaller doesn't use configured encoding property when unmarshalling documents [SPR-7865]","**[Nicole Treague](https://jira.spring.io/secure/ViewProfile.jspa?name=nicoletreague)** opened **[SPR-7865](https://jira.spring.io/browse/SPR-7865?redirect=false)** and commented  I noticed encoding problems when unmarshalling documents with UTF-8 special characters in them using JibxMarshaller.  I looked through the source code for JibxMarshaller, and the problem appears to be caused by the call to IUnmarshallingCOntext.unmarshalDocument() on line 322. This call passes in null as the character encoding, rather than using the ""encoding"" property configured for the class.  I was able to fix the encoding problem by creating a class that extends JibxMarshaller, overriding unmarshalInputStream(), and correcting the parameter passed in to IUnmarshallingContext.unmarshalDocument() to be ""UTF-8"" instead of null.  Javadoc for IUnmarshallingContext: http://jibx.sourceforge.net/api/org/jibx/runtime/IUnmarshallingContext.html   ---  **Affects:** 3.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bb5c81e0c50efc4f0669b7e5a9567b732fd84c58, https://github.com/spring-projects/spring-framework/commit/e25183eab1b5fbce42750e92e95248c0c24445b0  1 votes, 1 watchers","closed","type: bug,","spring-projects-issues","2011-01-07T09:10:17Z","2012-06-19T03:39:52Z"
"","12264","@PathVariable and @ModelAttribute incompatibility prevent me from having a nice ""update"" handler [SPR-7608]","**[Nicolas Romanetti](https://jira.spring.io/secure/ViewProfile.jspa?name=nicolas)** opened **[SPR-7608](https://jira.spring.io/browse/SPR-7608?redirect=false)** and commented  Spring MVC examples often refer to the creation of an entity using `@ModelAttribute`.  A common pattern is to update an existing entity. Generally you want to load the existing entity and then apply on it the allowed fields.  In my controller I have an handler for showing an entity, one for creating a new one... here are their signature:  `@RequestMapping`(""show/{pk}"") public String show(`@PathVariable`(""pk"") Account account, Model model)  `@RequestMapping`(value = ""create"", method = RequestMethod.POST) public String create(`@Valid` Account account, BindingResult bindingResult, Model model)  Now, of course I  need a handler, as nice as the one above to update the entity. Here it is:  `@RequestMapping`(value = ""update/{pk}"", method = { RequestMethod.PUT, RequestMethod.POST }) public String update(`@Valid` `@PathVariable`(""pk"") Account account, BindingResult bindingResult, Model model);  The handler above is not accepted by SPring MVC, however I think it should! Here is what I would expect: 1/ convert the pk to the Account entity using the corresponding Parser (it works for ""show"" handler above...) 2/ Once converted, since the account is placed just before the bindingResult, it should be used to bind the request parameters that is to update directly the entity. 3/Once updated, it should perform the validation.  Note: I am confident in updating directly the entity as I know I can restrict the allowed fields thanks to an InitBinder.  The code above throw an exception: org.springframework.web.bind.annotation.support.HandlerMethodInvocationException: Failed to invoke handler method [public java.lang.String fr.nnn.web.controller.AccountController.update(fr.nnn.domain.Account,org.springframework.validation.BindingResult,java.lang.Boolean,java.lang.Boolean,org.springframework.ui.Model)]; nested exception is java.lang.IllegalStateException: Errors/BindingResult argument declared without preceding model attribute. Check your handler method signature!  I tried to add the `@ModelAttribute`(""account"") annotation after `@PathVariable`(""pk"") but then another exception is thrown... stating that I cannot use both annotations at the same time.  Am I missing something or do you agree it would be a nice feature?  ---  **Affects:** 3.0.3  **Attachments:** - [HandlerMethodInvoker.java](https://jira.spring.io/secure/attachment/17395/HandlerMethodInvoker.java) (_41.13 kB_)  **Issue Links:** - #11467 Authorize `@ModelAttribute` to play along with `@RequestParam`/`@RequestHeader`/...  2 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2010-09-30T13:27:07Z","2019-01-13T07:12:50Z"
"","12245","Determination of the best pattern match to map a handler to an URL [SPR-7589]","**[Nicolas Demengel](https://jira.spring.io/secure/ViewProfile.jspa?name=ndemengel)** opened **[SPR-7589](https://jira.spring.io/browse/SPR-7589?redirect=false)** and commented  Hi people,  I might have found an odd behavior in the AbstractUrlHandlerMapping class : given two controllers, one annotated with `@RequestMapping`(""/**"") and the another one annotated with `@RequestMapping`(""/access/{resourceType}/{resourceSubType}/{resourceName}""), when the path ""/access/document/text/sometextdocument"" is evaluated I would expect the second controller to be chosen to handle the request but it is the first one that is taken.  Looking at the code of AbstractUrlHandlerMapping.lookupHandler() one can see that when several patterns are found that match the path, they are ordered using an AntPatternComparator to find the most pertinent one for it. Digging in further, this comparator orders patterns based on their level of incertitude, counting the occurrences of wildcards and brackets. In my opinion it should read patterns as we do (i.e. from left to right in our countries) to see if the pattern start makes it more suitable to handle the path that is evaluated.  I attached a JUnit test to illustrate my point.  Thanks  ---  **Affects:** 3.0.4  **Attachments:** - [AntPatternComparatorTest.java](https://jira.spring.io/secure/attachment/17132/AntPatternComparatorTest.java) (_1.45 kB_)  **Issue Links:** - #11407 RequestMapping with 3 PathVariable doesn't work (_**""duplicates""**_) - #13325 AntPathMatcher.AntPatternComparator algorithm wrong for hierarchical matches  1 votes, 1 watchers","closed","in: web,","spring-projects-issues","2010-09-24T01:34:57Z","2019-01-12T16:49:32Z"
"","12679","Setting ""file-encoding"" attribute in a ""context:property-placeholder"" element in spring xml configuration doesn't work [SPR-8024]","**[Nicolas Dejardin](https://jira.spring.io/secure/ViewProfile.jspa?name=ndejardin)** opened **[SPR-8024](https://jira.spring.io/browse/SPR-8024?redirect=false)** and commented  I mess a lot with UTF-8 encoded properties files and trying to solve some problem I came across this : When I have set the ""file-encoding"" attribute to ""UTF-8"" in a ""context:property-placeholder"" element in my spring xml configuration, I got a little problem with the application context is loaded.  so in my applicationContext.xml I have this :  ```  ```  and I get  ``` 10:56:16 ERROR (ContextLoader.java:220) Context initialization failed org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.beans.factory.config.PropertyPlaceholderConfigurer#0': Cannot resolve reference to bean 'UTF-8' while setting bean property 'fileEncoding'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'UTF-8' is defined 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:328) 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:106) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1325) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1086) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:517) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:291) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:288) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194) 	at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:626) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:407) 	at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:276) 	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:197) 	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:47) 	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4135) 	at org.apache.catalina.core.StandardContext.start(StandardContext.java:4630) 	at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1045) 	at org.apache.catalina.core.StandardHost.start(StandardHost.java:785) 	at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1045) 	at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:445) 	at org.apache.catalina.core.StandardService.start(StandardService.java:519) 	at org.apache.catalina.core.StandardServer.start(StandardServer.java:710) 	at org.apache.catalina.startup.Catalina.start(Catalina.java:581) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 	at java.lang.reflect.Method.invoke(Method.java:597) 	at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:288) 	at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:413) Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'UTF-8' is defined 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanDefinition(DefaultListableBeanFactory.java:527) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getMergedLocalBeanDefinition(AbstractBeanFactory.java:1083) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:274) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190) 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:322) 	... 29 more ```  I have tracked the exception to the class org.springframework.context.config.AbstractPropertyLoadingBeanDefinitionParser and in the doParse method the file-encoding attribute is used as a property reference and not a property value.   ---  **Affects:** 3.0.5, 3.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e0252ad0b12968ac4f4fd5bdc2e6b8fe8447b94a, https://github.com/spring-projects/spring-framework/commit/0862a2906662655a7cf6f8d03c65ed157630590d, https://github.com/spring-projects/spring-framework/commit/8534764e99827ee0b17d1cda04774dae1e3378e1  **Backported to:** [3.0.7](https://github.com/spring-projects/spring-framework/milestone/74?closed=1)  7 votes, 4 watchers","closed","type: bug,","spring-projects-issues","2011-03-07T02:22:29Z","2012-06-19T03:39:04Z"
"","12158","Support bean names containing '.' in PropertyOverrideConfigurer [SPR-7501]","**[Nico De Groote](https://jira.spring.io/secure/ViewProfile.jspa?name=ndgroote)** opened **[SPR-7501](https://jira.spring.io/browse/SPR-7501?redirect=false)** and commented  Replace the ""key.indexOf(this.beanNameSeparator)"" by the key.lastIndexOf()... in the processKey method.  ``` /**  * Process the given key as 'beanName.property' entry.  */ 	protected void processKey(ConfigurableListableBeanFactory factory, String key, String value) 			throws BeansException {  		int separatorIndex = key.indexOf(this.beanNameSeparator); 		if (separatorIndex == -1) { 			throw new BeanInitializationException(""Invalid key '"" + key + 					""': expected 'beanName"" + this.beanNameSeparator + ""property'""); 		} 		String beanName = key.substring(0, separatorIndex); 		String beanProperty = key.substring(separatorIndex+1); 		this.beanNames.add(beanName); 		applyPropertyValue(factory, beanName, beanProperty, value); 		if (logger.isDebugEnabled()) { 			logger.debug(""Property '"" + key + ""' set to value ["" + value + ""]""); 		} 	} ```  ---  **Affects:** 2.5.6  **Issue Links:** - #10509 Adding trim-capability to property configurers","closed","type: enhancement,","spring-projects-issues","2010-08-26T05:51:20Z","2019-01-11T15:04:21Z"
"","12275","Make MappingJacksonJsonView fields protected to make extending it easier [SPR-7619]","**[Nick Williams](https://jira.spring.io/secure/ViewProfile.jspa?name=guitarking117)** opened **[SPR-7619](https://jira.spring.io/browse/SPR-7619?redirect=false)** and commented  MappingJacksonJsonView is a very simple implementation of a JSON-rendering view. There are many cases where one might need to extend MappingJacksonJsonView to accomplish more complicated tasks. It would be nice if the ""objectMapper,"" ""encoding,"" ""prefixJson"" and ""renderedAttributes"" fields could be made protected instead of private to make extending MappingJacksonJsonView a little easier.  Thanks!   ---  **Affects:** 3.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f57bc1aaaafa0ccb94cfef57e34cf8aa099ade6f","closed","type: enhancement,","spring-projects-issues","2010-10-05T09:09:41Z","2013-02-08T13:24:51Z"
"","12618","@RequestParam binding to String array results in unexpected output when parameter value contains comma [SPR-7963]","**[Nick dos Remedios](https://jira.spring.io/secure/ViewProfile.jspa?name=nickdos)** opened **[SPR-7963](https://jira.spring.io/browse/SPR-7963?redirect=false)** and commented  Posted on stackoverflow.com: http://stackoverflow.com/q/4998748/249327  ``` @RequestMapping(value = ""/test"", method = RequestMethod.GET) public void test(@RequestParam(value = ""fq"", required = false) String[] filterQuery) {     logger.debug(fq = "" + StringUtils.join(filterQuery, ""|"")); } ```  Here is the output for different fq combinations:  1. `/test?fq=foo`  results in  `fq = foo` 2. `/test?fq=foo&fq=bar`  results in  `fq = foo|bar` 3. `/test?fq=foo,bar`  results in  `fq = foo|bar` 4. `/test?fq=foo,bar&fq=bash`  results in  `fq = foo,bar|bash` 5. `/test?fq=foo,bar&fq=`  results in  `fq = foo,bar|` \\    \\  Example 3 is the problem. I expect it to output: `fq = foo,bar` but instead I get `fq = foo|bar`.  Downgrading to version 3.0.4.RELEASE results in example 3 providing the expected output: `fq = foo,bar`.  I also see the same behaviour when binding to a form backing bean.   ---  **Affects:** 3.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/6a5277e0ef751862ebf1b09c935fdb24edb72db0","closed","status: declined,","spring-projects-issues","2011-02-14T21:42:27Z","2019-01-12T16:26:10Z"
"","12523","org.springframework.web.servlet.view.json.MappingJacksonJsonView does not set the Content-Length response header. [SPR-7866]","**[Nick Dimiduk](https://jira.spring.io/secure/ViewProfile.jspa?name=ndimiduk)** opened **[SPR-7866](https://jira.spring.io/browse/SPR-7866?redirect=false)** and commented  The implementation of MappingJacksonJsonView does not set the content-length header. Other views, such as the xml.MarshallingView provide this header; this behavior is inconsistent and confusing to developers using these classes to implement APIs.   ---  **Affects:** 3.0.5  **Attachments:** - [spr-7866.patch](https://jira.spring.io/secure/attachment/17500/spr-7866.patch) (_3.28 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/01a9dd97721c93fe80d8fd35bd5dc8de649b3595  1 votes, 3 watchers","closed","type: bug,","spring-projects-issues","2011-01-07T11:52:16Z","2012-06-19T03:39:46Z"
"","11889","WebDataBinder binding to wrong model attribute  [SPR-7230]","**[Nes Yarug](https://jira.spring.io/secure/ViewProfile.jspa?name=nes)** opened **[SPR-7230](https://jira.spring.io/browse/SPR-7230?redirect=false)** and commented  My Controller's initBinder method is throwing ""IllegalStateException: Invalid target for validator"". I believe this is because when the WebDataBinder gets created the wrong model attribute is passed to it's constructor.  This is my initBinder method:  Code:  `@Autowired` `@Qualifier`(""createAccountValidator"") Validator validator;  `@InitBinder` protected void initBinder(WebDataBinder binder) { binder.setValidator(validator); }  The exception is thrown when I try to display the form:  Code:      @RequestMapping(value = ""/createAccount"", method = RequestMethod.GET)     public String showForm(final HttpServletRequest request, final Model model) {          	if (!model.containsAttribute(""createAccountForm"")) {     		model.addAttribute(""createAccountForm"", new CreateAccountForm());     	}  The above code works fine. However when I add another attribute to the model (data I need for a dropdown while displaying the form), the exception is thrown with a reference to that model attribute as follows:  Handler execution resulted in exception - forwarding to resolved error view: ModelAndView: reference to view with name 'error'; model is {exception=java.lang.IllegalStateException: Invalid target for Validator [CreateAccountValidator@8384aed]: [DropdownData]}  I've debugged it down to the updateModelAttributes method in the org.springframework.web.bind.annotation.support.Ha ndlerMethodInvoker class:  Code:  // Expose model attributes as session attributes, if required. // Expose BindingResults for all attributes, making custom editors available. Map model = (mavModel != null ? mavModel : implicitModel); try { for (String attrName : new HashSet\(model.keySet())) { Object attrValue = model.get(attrName); boolean isSessionAttr = this.methodResolver.isSessionAttribute(attrName, (attrValue != null ? attrValue.getClass() : null)); if (isSessionAttr && !this.sessionStatus.isComplete()) { this.sessionAttributeStore.storeAttribute(webRequest, attrName, attrValue); } if (!attrName.startsWith(BindingResult.MODEL_KEY_PREFIX) && (isSessionAttr || isBindingCandidate(attrValue))) { String bindingResultKey = BindingResult.MODEL_KEY_PREFIX + attrName; if (mavModel != null && !model.containsKey(bindingResultKey)) { WebDataBinder binder = createBinder(webRequest, attrValue, attrName); initBinder(handler, attrName, binder, webRequest); mavModel.put(bindingResultKey, binder.getBindingResult()); } } } }    ---  **Affects:** 3.0.2  **Reference URL:** http://forum.springsource.org/showthread.php?t=89379","closed","status: declined,","spring-projects-issues","2010-05-22T20:39:27Z","2019-01-12T16:37:56Z"
"","12175","Introduce request parameter based content negotiation for ResponseBody / HttpMessageConverter approach [SPR-7517]","**[Neil Laurance](https://jira.spring.io/secure/ViewProfile.jspa?name=toolkit)** opened **[SPR-7517](https://jira.spring.io/browse/SPR-7517?redirect=false)** and commented  My client application may not support setting the HTTP Accept header.  When using views, I can configure a ContentNegotiatingViewResolver to ignore the accept header, and use a request parameter instead.  But if I want to use a ResponseBody / HttpMessageConverter approach, this only supports the HTTP Accept header.  From AnnotationMethodHandlerAdapter$ServletHandlerMethodInvoker#writeWithMessageConverters:      List acceptedMediaTypes = inputMessage.getHeaders().getAccept();  ---  **Affects:** 3.0 M1, 3.0 M2, 3.0 M3, 3.0 M4, 3.0 RC1, 3.0 RC2, 3.0 RC3, 3.0 GA, 3.0.1, 3.0.2, 3.0.3, 3.0.4  **Issue Links:** - #13057 Content negotiation improvements (_**""is superseded by""**_)  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2010-09-01T06:52:56Z","2019-01-11T15:03:09Z"
"","12292","XStreamMarshaller - Add support for configuring XStream with aliases by class (type) and also defining multiple attributes for the same class. [SPR-7636]","**[Neil Brown](https://jira.spring.io/secure/ViewProfile.jspa?name=brownn)** opened **[SPR-7636](https://jira.spring.io/browse/SPR-7636?redirect=false)** and commented  Suggest enhancing XStreamMarshaller to support the following additional features for configuring the underlying XStream instance -  1) Configuring an alias for all classes which are assignable to a specified XStream type (class) by exposing the XStream.aliasType(String,Class) API, in addition to XStream.alias(String,Class).  2) Enhancing XStreamMarshaller.setUseAttributeFor(Map\)  to support configuring more than one attribute for the same class. (This has previously been requested by other Spring users, e.g. see [SWS-196](https://jira.spring.io/browse/SWS-196)).  Code and unit tests for these enhancements are attached, written for Spring 3.0.4 / XStream 1.3.1.  Thanks,  Neil Brown. XLC Software, http://xlcsoftware.com Changes sponsored by http://www.brighttalk.com/   ---  **Affects:** 3.0.4  **Attachments:** - [CustomXStreamMarshaller.java](https://jira.spring.io/secure/attachment/17180/CustomXStreamMarshaller.java) (_5.88 kB_) - [CustomXStreamMarshallerTest.java](https://jira.spring.io/secure/attachment/17181/CustomXStreamMarshallerTest.java) (_8.70 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/043ec2c8b233b667128269e3af34c747f7af2f62","closed","type: enhancement,","spring-projects-issues","2010-10-10T05:32:32Z","2012-06-19T03:39:53Z"
"","12637","Support profile exclusivity and/or bean definition finality [SPR-7982]","**[Neale Upstone](https://jira.spring.io/secure/ViewProfile.jspa?name=nealeu)** opened **[SPR-7982](https://jira.spring.io/browse/SPR-7982?redirect=false)** and commented  There's a real opportunity to nail some corner cases with profiles, and conversely the risk of propagating some open-doors to bad practice.  Reading the example given at http://blog.springsource.com/2011/02/11/spring-framework-3-1-m1-released/, I can see a few areas I'd like to be explicit for fast failure:  1. To be able to define valid (/invalid) profile combinations. In your example, you can specify ""production,dev"", which is clearly not what is intended, and all too easy to do when profiles are less obviously exclusive.  This could be achieved by allowing profiles combinations to be specified in the application context. 2. To be able to configure specific bean definition override behaviour, by 'final' bean defs and/or by an override flag.  This could be done at the level of a bean or on the now nestable \ element.  ** This would have saved a LOT of time on the project I've recently been working on, mainly due to the number of components developed by different teams with varying levels of Spring experience **  I quite like the idea of allowing some combination of final and override as it would give expressiveness to developers intent.  `` would not only clearly denote that override was intended, but also allow validation that there was already a bean to override.  Either of these suggestions would prevent the 'prod,dev' profile from being bootstrapped.  Examples would be:  1)   ```         ```  2)   ```     ... jndi datasource bean defs      ... dev datasources  ```  ---  **Affects:** 3.1 M1  **Reference URL:** http://blog.springsource.com/2011/02/11/spring-framework-3-1-m1-released/#comment-185086  **Issue Links:** - #12839 Revised support for bean definition visibility and overriding (_**""is depended on by""**_) - #13172 `@Bean`(override=true) (_**""is duplicated by""**_) - #11690 Allow `@Bean` methods to override definitions in XML - #13818 Provide boolean logic on bean profiles, i.e. NOT profile. - #13370 Support not (!) operator for profile selection - #10181 Bean Configuration Overriding - #11829 Support `@Bean` method visibility  6 votes, 12 watchers","closed","type: enhancement,","spring-projects-issues","2011-02-21T02:17:57Z","2019-01-13T07:11:00Z"
"","12558","RestOperations / RestTemplate does not document responseType=null behaviour [SPR-7903]","**[Neale Upstone](https://jira.spring.io/secure/ViewProfile.jspa?name=nealeu)** opened **[SPR-7903](https://jira.spring.io/browse/SPR-7903?redirect=false)** and commented  When passing a null responseType, the RestOperations methods which take a responseType parameter, are implemented in RestTemplate to return a ResponseEntity with containing the response headers and status code, with no attempt made to convert the body.  This behaviour should be documented formally in the interface.  I suspect it may also be worth documenting RestTemplate itself with how to handle this scenario: http://stackoverflow.com/questions/3322381/spring-resttemplate-behavior-when-handling-responses-with-a-status-of-no-content   ---  **Affects:** 3.0.5","closed","status: declined,","spring-projects-issues","2011-01-24T02:27:37Z","2019-01-12T16:26:16Z"
"","11973","EclipseLink+Oracle exceptions not translated to DeadlockLoserDataAccessException [SPR-7315]","**[Nathan Bryant](https://jira.spring.io/secure/ViewProfile.jspa?name=nbryant)** opened **[SPR-7315](https://jira.spring.io/browse/SPR-7315?redirect=false)** and commented  The stack trace in the attached file should be translated to org.springframework.dao.DeadlockLoserDataAccessException, but is not.  What is happening is that Oracle throws java.sql.BatchUpdateException ""ORA-00060: deadlock detected while waiting for resource""  EclipseLink rethrows org.eclipse.persistence.exceptions.DatabaseException with the above as root cause  EclipseLink JPA layer rethrows javax.persistence.PersistenceException with the above as root cause  Spring translates this to org.springframework.orm.jpa.JpaSystemException but it should be DeadlockLoserDataAccessException   ---  **Affects:** 3.0.1  **Attachments:** - [eltrace.txt](https://jira.spring.io/secure/attachment/16759/eltrace.txt) (_10.12 kB_)  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2010-06-22T06:39:18Z","2015-09-22T17:34:32Z"
"","12394","support for boolean type in collection injection (Refer SPR-5881 ..seems to me fixed for constructor-arg type) [SPR-7738]","**[Muthuvelan Swaminathan](https://jira.spring.io/secure/ViewProfile.jspa?name=msnathan)** opened **[SPR-7738](https://jira.spring.io/browse/SPR-7738?redirect=false)** and commented  calling a method with primitive boolean argument through MethodInvokingFactoryBean fails.  For e.g in the case of jmx bean initialization  \ 		\ 		\ 		\ 			\ 			\ 			\true\ 			\true\ 			\true\ 			\true\ 		\ 		\ 	\  will fail with NoSuchMethodException  *********  ERROR  context.ContextLoader - Context initialization failed org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'ehCacheMBeanRegistration' defined in ServletContext resource [/META-INF/spring/applicationContext-monitor.xml]:  Invocation of init method failed; nested exception is java.lang.NoSuchMethodException: net.sf.ehcache.management.ManagementService.registerMBeans(net.sf.ehcache.CacheManager, com.sun.jmx.mbeanserver.JmxMBeanServer, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean)  **********  whereas there is method available with the following signature:  public static void registerMBeans( net.sf.ehcache.CacheManager cacheManager, MBeanServer mBeanServer, boolean registerCacheManager, boolean registerCaches, boolean registerCacheConfigurations, boolean registerCacheStatistics) throws CacheException {....   ---  **Affects:** 3.0.4  **Reference URL:** https://jira.springsource.org/browse/SPR-5881","closed","in: core,","spring-projects-issues","2010-11-11T08:55:41Z","2019-01-12T05:31:19Z"
"","12635","AdvisedSupport.MethodCacheKey.equals() seems wrong and causes potential memory leak. [SPR-7980]","**[Moshe Moshe](https://jira.spring.io/secure/ViewProfile.jspa?name=kaborka20)** opened **[SPR-7980](https://jira.spring.io/browse/SPR-7980?redirect=false)** and commented  Hi,  It seems that the `AdvisedSupport.MethodCacheKey.equals()` compares methods by reference and not using `Method.equals()`. This means if 2 Methods instances are `equals()` the `AdvisedSupport` will add both of them to the `methodCache` Map.  This can be easily recreated if you get the Method instance using reflection `Class.getMethod()` because it duplicates the method before returning it, meaning each call to `Class.getMethod()` returns a new instance of `Method`.  please see sample code:  ```java static public Object invokeMethod(Object obj, String methodName,             Object[] args) {          if (AopUtils.isJdkDynamicProxy(obj)) {             if (args == null) {                 args = new Object[0];             }             int arguments = args.length;             Class parameterTypes[] = new Class[arguments];             for (int i = 0; i < arguments; i++) {                 parameterTypes[i] = args[i].getClass();             }              Class _targetClass = AopUtils.getTargetClass(obj);             Class[] _targetInterfaces = _targetClass.getInterfaces();             Method method = null;             for (Class _targetInterface : _targetInterfaces) {                 method = org.apache.commons.beanutils.MethodUtils.getMatchingAccessibleMethod(_targetInterface, methodName,                                 parameterTypes);                 if (method != null) {                     break;                 }             }                         try {                 return java.lang.reflect.Proxy.getInvocationHandler(obj)                         .invoke(obj, method, args);             } catch (Throwable e) {                 throw new RuntimeException(e);             }         }          return null;     } ```  If you call this in a loop you can see the `methodCache` map size growing and growing up to OutOfMemory.  I believe that the correct code should be:  ```java private static class MethodCacheKey {  	private final Method method;  	private final int hashCode;  	public MethodCacheKey(Method method) { 		this.method = method; 		this.hashCode = method.hashCode(); 	}  	public boolean equals(Object other) { 		if (other == this) { 			return true; 		} 	   MethodCacheKey otherKey = (MethodCacheKey) other;             return this.method == otherKey.method || this.method.equals(otherKey.method);         }  	public int hashCode() { 		return this.hashCode; 	} } ```  Thank you.   ---  **Affects:** 3.0.5","closed","in: core,","spring-projects-issues","2011-02-20T10:01:53Z","2019-01-12T16:26:07Z"
"","12521","Aop-scoped-proxy FactoryBean triggers getObject for every method invocation [SPR-7864]","**[Morten Andersen-Gott](https://jira.spring.io/secure/ViewProfile.jspa?name=magott)** opened **[SPR-7864](https://jira.spring.io/browse/SPR-7864?redirect=false)** and commented  I first mentioned this on the Batch forum. When I configure my FactoryBean with step scope, getObject is called every time a method is invoked on a bean. I would expect this to only happen on the first invocation, and the resulting getBean being cached for the duration of the scope.  The forum post links to a test case in github.   ---  **Affects:** 3.0.5  **Reference URL:** http://forum.springframework.org/showthread.php?t=100735  2 votes, 5 watchers","closed","status: bulk-closed,","spring-projects-issues","2011-01-07T07:17:33Z","2019-01-12T03:31:47Z"
"","12233","Add support for bootsrapping for log4j init outside web container [SPR-7576]","**[Morten Andersen-Gott](https://jira.spring.io/secure/ViewProfile.jspa?name=magott)** opened **[SPR-7576](https://jira.spring.io/browse/SPR-7576?redirect=false)** and commented  For web environment Spring provides the Log4jConfigListener to get a log4j configuration that senses changes to the underlying configuration file. This can also be nice for non-web-apps. For example batches, which run in a SE environment, you sometimes want to tweek the log config to see what is going on.  I have created a very simple implementation which seem to work. Feel free to use it as an inspiration if you think it is something worth adding, otherwise, just ignore and close this issue :-)  Implementation: http://github.com/magott/magott-springbatch-poc/blob/master/src/main/java/no/magott/spring/configuration/logging/Log4jDynamicConfigurer.java  Test: http://github.com/magott/magott-springbatch-poc/blob/master/src/test/java/no/magott/spring/configuration/logging/Log4jConfigurationTest.java   ---  **Affects:** 3.0.4","closed","in: core,","spring-projects-issues","2010-09-20T13:04:31Z","2019-01-12T05:31:34Z"
"","12185","AfterTransactional not working as intended? [SPR-7527]","**[Morten Andersen-Gott](https://jira.spring.io/secure/ViewProfile.jspa?name=magott)** opened **[SPR-7527](https://jira.spring.io/browse/SPR-7527?redirect=false)** and commented  Doing a poc on spring transaction settings I came over some unexpected behavior. I did an assert in `@AfterTransaction` which failed unexpectedly. I have the testcase checked into github at: http://github.com/magott/spring-tx-gotchas/blob/master/src/test/java/no/magott/jz/txgotchas/TransactionalTest.java  I have enabeled logging and before the assert in `@AfterTransaction` fails, TransactionalTestExecutionListener logs that the transaction is committed.  I feel I might be missing something fairly obvious, but aren't you supposed to be able to to asserts on the persistent state of the datastore in `@AfterTransaction`?   ---  **Affects:** 3.0.4","closed","status: declined,","spring-projects-issues","2010-09-04T04:16:00Z","2019-01-12T16:26:51Z"
"","12018","JmsResourceHolder.commit should not ignores IllegalStateException [SPR-7360]","**[Morten Andersen-Gott](https://jira.spring.io/secure/ViewProfile.jspa?name=magott)** opened **[SPR-7360](https://jira.spring.io/browse/SPR-7360?redirect=false)** and commented  A problem has occures when using ActiveMq with Spring and a non-jms/non-jta transaction manager. The TransactionSynchronizationUtils will try to commit jms transactions in the invokeAfterCommit method. This method calls the JmsResourceHolder.commitAll(), which silently ignores all IllegalStateException with an inline comment suggesting that it should only happen in the event of a Jta transaction being active.  Looking at the javax.jms.Session javadoc it seems that this is not the case, it states: ""Invoking any other Session method on a closed session must throw a JMSException.IllegalStateException. Closing a closed session must not throw an exception"" see: http://download.oracle.com/docs/cd/E17477_01/javaee/1.4/api/javax/jms/Session.html#close  I first raised this issue with ActiveMq: http://issues.apache.org/activemq/browse/AMQ-2812 where Rob Davies pointed me to the relevant point in the jms javadoc stating that IllegalStateException should be thrown if any operation is done on a closed session.  We are experiencing this issue when the ActiveMq server is going down and not coming up before the commit is executed.  ---  **Affects:** 3.0.3  **Issue Links:** - #15455 spring-jms 3.0.4 introduces a change that breaks using JMSTemplate (and for that matter any JMS resource) with Oracle AQ when JMS Session are used in SESSION_TRANSACTED mode.  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d1d5e2d52ac732d05c5277b3337fe05b9d0cc712","closed","type: bug,","spring-projects-issues","2010-07-07T19:28:20Z","2019-01-11T14:23:26Z"
"","12485","Settings beans properties conditionally [SPR-7829]","**[mohammad abdellatif](https://jira.spring.io/secure/ViewProfile.jspa?name=mohammad.abdellatif)** opened **[SPR-7829](https://jira.spring.io/browse/SPR-7829?redirect=false)** and commented  Currently, in our company, we are planing to have one single implementation for our projects cross countries, we are configuring our projects POJOs using spring IoC container. We searched for a feature in spring IoC to have the ability to set properties according to country like following:   \ \","closed","type: enhancement,","spring-projects-issues","2010-12-21T02:03:07Z","2018-12-28T11:57:12Z"
"","12862","Add explicit support for setting the cookie header in HttpHeaders [SPR-8212]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-8212](https://jira.spring.io/browse/SPR-8212?redirect=false)** and commented  For many restful services cookies play an important role.  It would be nice if there were better support for populating the ""Cookie:"" header in HttpHeaders.  Something like:  addCookie(String name, String value)  or  setCookie(Map cookies)  Currently if I want to set a header I have to do something like:  headers.add(""Cookie:"", cookieResolver.getName()+""=""+cookieResolver.getValue()+"";"");  Which can be problematic.  Especially if I have multiple cookies I want to set.  Mike   ---  **Affects:** 3.0.5  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2011-04-05T16:04:24Z","2011-06-17T06:52:09Z"
"","12622","Enhance mvn:annotation-driven to support Jackson's JaxbAnnotationIntrospector [SPR-7967]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-7967](https://jira.spring.io/browse/SPR-7967?redirect=false)** and commented  mvc:annotation-driven is not very configurable.  I understand the desire for simplicity here but occationally I have the desire to customize a small aspect of what mvn:annotation-driven does and I end up having to rip out the use of mvc:annotation-driven entirely.  So I'm hoping that this feature request can make it into mvc:annotation-driven.  My situation is that I'm exposing some services in both XML and Json.  It would be great if I could use JaxB annotations on my model objects to expose both.  Jackson provides an the JaxbAnnotationIntrospector that supports this but it is not configured by default.  It would be great if the mvc:annotation-driven handler could be extended to support some way of setting this introspector on the MappingJacksonHttpMessageConverter.class it creates.  Documentation for this Introspector can be found here. http://wiki.fasterxml.com/JacksonJAXBAnnotations  I'm thinking perhaps just the ability to specify a custom ObjectMapper would suffice.     ---  **Affects:** 3.0.5","closed","type: enhancement,","spring-projects-issues","2011-02-16T13:38:00Z","2019-01-11T16:15:11Z"
"","12328","Support configuring Servlet container in Spring using Servlet 3.0 programmatic config [SPR-7672]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-7672](https://jira.spring.io/browse/SPR-7672?redirect=false)** and commented  This issue is a request to utilize Servlet 3.0 features to support the configuring of Servlets, Filters, Listeners, etc. using Spring configuration instead of forcing the user to configure that stuff in the web.xml.  This type of configuration has a number of benefits.  Some of those might be:  * Direct support for dependency injected spring beans as Servlets, Filters, etc.  Without the need to use indirection such as DelegatingFilterProxy and HttpRequestHandlerServlet * Support for configuration of servlet params (mappings, names, etc) with things such as SpringEL or PropertyPlaceholders * Support for modifying what servlets, filters, etc. may be configured in an application based on runtime environment (with runtime config scheduled for 3.1) * Potential simplification of Spring features/addons.  For example auto configuration of SpringSecurity Filter as part of SpringSecurity namespace handlers, or SpringMVC servlet config, CharacterEncodingFilter, RequestLifecycleListener, etc. * Bootstrapping of the Sring ApplicationContext without having to specify the the SpringContextLoaderListener in the web.xml by simply using conventions to determine if spring should start itself up or not. * Potential for much much more.  I've attached a basic proof of concept example project.  This example uses a ServletContainerInitializer to start a spring WebApplicationContext DURING ContainerStartup instead of after ServletContext Initialization.  Not sure if this would break any existing functionality or not.  My simple demo seems to work fine.  This ServletContainerInitializer looks for a file located in WEB-INF/applicationContext.xml or a contextConfigLocation init-param.  If it finds either of these then it creates a WebApplicationContext uses ContextLoader.  This now enables a WebApplicationContext to add servlet configuration to the container at startup time.  In my example I've created a simple bean that configures a DispatcherServlet in this web application and uses spring injected configuration to dictate how that Servlet gets configured.  This example is really ugly and more a proof of concept that you can use Spring to configure a servlet container as an alternative to web.xml.  This example doesn't appear to me to eliminate any of the flexibility, customizability, extensibility, etc of Spring.  Some initial thoughts about work that might be involved in this issue: * Perhaps some Spring objects that combine both a filter or Servlet with configuration for that filter or servlet such as name, url mapping, etc. * These foundational objects could then potentially be automatically configured using a Spring PostProcessor or something. * Some namespace handlers to simplify adding and configuring a filter, servlet, etc in spring. * Perhaps some higher level configuration features to help simplify configuration of frameworks such as SpringMVC or Spring Security.  Thoughts? Mike  ---  **Affects:** 3.0.5  **Attachments:** - [mylyn-context.zip](https://jira.spring.io/secure/attachment/18298/mylyn-context.zip) (_25.66 kB_) - [servlet-3.0-spring.zip](https://jira.spring.io/secure/attachment/17248/servlet-3.0-spring.zip) (_4.86 kB_)  **Issue Links:** - #18148 Make CharacterEncodingFilter more friendly for use in Servlet 3.0+ environments - #10258 Support Servlet 3.0 (JSR-315) - #12922 Declarative registration for ApplicationContextInitializer (_**""supersedes""**_)  3 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2010-10-21T16:32:14Z","2019-01-11T14:36:30Z"
"","12326","Add support for .gsp as a first class spring mvc view technology [SPR-7670]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-7670](https://jira.spring.io/browse/SPR-7670?redirect=false)** and commented  Nobody likes .jsp.  .gsp could be a great alternative to .jsp that is actually actively developed and maintained.  It would be great if first class support for .gsp were added as a view to springMVC.  If integration is obvious then at least cover that obvious integration in the reference documentation and perhaps an example?   ---  **Affects:** 3.0.4  3 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2010-10-20T23:29:08Z","2015-09-22T18:20:33Z"
"","12273","Add utility to ValidationUtils that converts a Set of 303 ContraintViolations to Errors [SPR-7617]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-7617](https://jira.spring.io/browse/SPR-7617?redirect=false)** and commented  JSR 303's ContraintViolation and ContraintViolationException classes create a great API for communicating validation errors from your service to view layers whether you're using JSR 303 or not.  ValidationUtils.invokeValidator() and `@Valid` works great for validating user input.  However, additional more complex validation may take place in an application's service layer or state can change between when the view layer validates and the service layer persists.  It would be nice if Spring provided a way to generically add a set of ConstraintViolations to Errors:  ``` public void controller(@ModelAttribute @Valid ExampleModel example, Errors errors, Model model) { 	if(errors.hasErrors()) { 		return list(example, model); 	} 	try { 		exampleService.createExampleModel(example); 	} catch(ConstraintViolationException e) { 		ValidationUtils.addConstraintViolations(e.getConstraintViolations()); 		return list(example, model); 	} 	model.addAttribute(""msg"", ""created""); 	return ""example""; } ```    ---  **Affects:** 3.0.4","closed","type: enhancement,","spring-projects-issues","2010-10-04T14:16:51Z","2015-09-22T17:34:31Z"
"","12269","Enable ability to specify interface types in Jdbc4NativeJdbcExtractor [SPR-7613]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-7613](https://jira.spring.io/browse/SPR-7613?redirect=false)** and commented  Many connection pool providers return proxies from the **.unwrap() method.  They use the proxy to block various methods ""dangerous"" to their pool like close(), etc.  One such implementation is Websphere's.  This renders the current Jdbc4NativeJdbcExtractor mostly useless as it will simply return a proxy of type Connection.  I think it would be more useful and more semantically correct to support specifying the interface type to be returned by the getNative**() methods.   ---  **Affects:** 3.0.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ccded10d861bf947b0eb674101d168c8925d89a3","closed","type: enhancement,","spring-projects-issues","2010-10-03T09:53:04Z","2012-06-19T03:44:10Z"
"","12256","[regression] JMS-131: Session is closed exception in 3.0.5 snapshot [SPR-7600]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-7600](https://jira.spring.io/browse/SPR-7600?redirect=false)** and commented  We use a custom Oracle Streams AQ integration built on Spring JMS.  Everything worked great in 3.0.3.  In 3.0.4 the fix to #12024 ran into #12136 which is now fixed.  Now with the 3.0.5 SNAPSHOT we're getting another error also caused by #12024.  The exception is below.  This appears to be caused by the addition of a commit in AbstractPollingMessageListenerContainer:354.  This commit is then happening again in AbstractPollingMessageListenerContainer:255.  Sep 28, 2010 2:26:32 PM org.springframework.jms.listener.DefaultMessageListenerContainer handleListenerSetupFailure WARNING: Setup of JMS message listener invoker failed for destination 'fulfillment' - trying to recover. Cause: Local JMS transaction failed to commit; nested exception is javax.jms.IllegalStateException: JMS-131: Session is closed org.springframework.jms.connection.SynchedLocalTransactionFailedException: Local JMS transaction failed to commit; nested exception is javax.jms.IllegalStateException: JMS-131: Session is closed at org.springframework.jms.connection.ConnectionFactoryUtils$JmsResourceSynchronization.processResourceAfterCommit(ConnectionFactoryUtils.java:407) at org.springframework.jms.connection.ConnectionFactoryUtils$JmsResourceSynchronization.processResourceAfterCommit(ConnectionFactoryUtils.java:1) at org.springframework.transaction.support.ResourceHolderSynchronization.afterCommit(ResourceHolderSynchronization.java:79) at org.springframework.transaction.support.TransactionSynchronizationUtils.invokeAfterCommit(TransactionSynchronizationUtils.java:133) at org.springframework.transaction.support.TransactionSynchronizationUtils.triggerAfterCommit(TransactionSynchronizationUtils.java:121) at org.springframework.transaction.support.AbstractPlatformTransactionManager.triggerAfterCommit(AbstractPlatformTransactionManager.java:953) at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:796) at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:723) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:255) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1058) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1050) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:947) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:619) Caused by: javax.jms.IllegalStateException: JMS-131: Session is closed at oracle.jms.AQjmsError.throwIllegalStateEx(AQjmsError.java:471) at oracle.jms.AQjmsSession.checkSessionStarted(AQjmsSession.java:4736) at oracle.jms.AQjmsSession.commit(AQjmsSession.java:1009) at org.springframework.jms.connection.JmsResourceHolder.commitAll(JmsResourceHolder.java:181) at org.springframework.jms.connection.ConnectionFactoryUtils$JmsResourceSynchronization.processResourceAfterCommit(ConnectionFactoryUtils.java:404) ... 14 more  ---  **Affects:** 3.0.4","closed","status: invalid,","spring-projects-issues","2010-09-28T13:32:28Z","2019-01-12T05:31:31Z"
"","12189","Create mvc: namespace handler that associates a controller with a url [SPR-7531]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-7531](https://jira.spring.io/browse/SPR-7531?redirect=false)** and commented  It would be nice if there were a handler similar to mvc:view-controller that instead of taking a view took a controller beanname.  It could use the same SimpleControllerHandlerAdapter and SimpleUrlHandlerMapping used by mvn:view-controller but would use a provided controller.  You could also potentially just add an attribute to view-controller.    or    Would be the equivalent of this xml config:  \ \ 	\ 		\ 		     \ 		\ 	\ 	\ \   ---  **Affects:** 3.0.4","closed","type: enhancement,","spring-projects-issues","2010-09-08T10:34:49Z","2011-12-15T07:17:55Z"
"","12310","Overloaded @PathVariable based handler methods fail with ambiguity when URL mapping is specified in XML [SPR-7654]","**[Mike Wille](https://jira.spring.io/secure/ViewProfile.jspa?name=digerata)** opened **[SPR-7654](https://jira.spring.io/browse/SPR-7654?redirect=false)** and commented  If the Controller URL-Mapping is configured in a urlMapping bean (SimpleUrlHandlerMapping), as opposed to directly in the Controller itself, overloaded controller methods become ambiguous.  For example, given the following URIs (or see forum post):  ``` /people/{id}.html /people/{id}/{type}.html ```  That are mapped to a single controller with the following overloaded controller methods:  ```java @RequestMapping(method = RequestMethod.GET) public ModelAndView viewProfile(@PathVariable(""id"") String id, HttpServletRequest request, HttpServletResponse response);  @RequestMapping(method = RequestMethod.GET) public ModelAndView viewProfile(@PathVariable(""id"") String id, @PathVariable(""type"") String type, HttpServletRequest request, HttpServletResponse response); ```  Accessing either URL will fire an exception about these two methods being ambiguous.  However, if the URI mapping is specified in the controller methods' RequestMapping annotation, everything works as expected.  In this case, method #1 above is simply calling method #2 with the type argument set to null.  (A common idiom.)  ---  **Affects:** 3.0.3  **Reference URL:** http://forum.springsource.org/showthread.php?t=96738  **Issue Links:** - #10427 Externalized request mapping as a 1st class alternative to `@RequestMapping` (_**""is superseded by""**_)  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2010-10-13T13:15:31Z","2019-01-13T07:12:40Z"
"","12859","Allow access to the raw Exception message in NestedRuntimeException/NestedCheckedException [SPR-8209]","**[Mike Quilleash](https://jira.spring.io/secure/ViewProfile.jspa?name=quilleashm)** opened **[SPR-8209](https://jira.spring.io/browse/SPR-8209?redirect=false)** and commented  The NestedRuntimeException/NestedCheckedException both override getMessage() and builds a composite message including cause information.  I do not want this output, I just want the raw message passed in.  Unfortunately this is currently very difficult as the getMessage() override obscures all access to the raw message.  Adding a getRawMessage() which just calls super.getMessage() would allow me to get at the message I want.  For now I have to do a horrible substring match/replace to remove the additional parts that are added.   ---  **Affects:** 3.0.4","closed","type: enhancement,","spring-projects-issues","2011-04-05T05:25:15Z","2015-09-22T17:34:33Z"
"","12031","WeakReferenceMonitor has race condition [SPR-7373]","**[Mike Quilleash](https://jira.spring.io/secure/ViewProfile.jspa?name=quilleashm)** opened **[SPR-7373](https://jira.spring.io/browse/SPR-7373?redirect=false)** and commented  WeakReferenceMonitor appears to have a subtle threading issue where an item can get added but ReleaseListener never gets called.  Sequence of events  - monitor(item1, handler) - Item1 added to trackedEntries - isMonitoringThreadRunning() returns false - New monitoring thread started  Some time later  Monitor thread  - Item1 becomes weakly reachable - Monitor thread detects reference in handleQueue - removeEntry(item1) and released - trackedEntries.isEmpty() returns true - while loop exits  Monitor thread pre-empted  Another thread  - monitor(item2, handler) - Item1 added to trackedEntries - sync - isMonitoringThreadRunning() returns true - release - done  Monitor thread rescheduled  - sync - Monitor thread sets monitoringThread to null - release - monitor thread quits  In this state item2 release handler will never be called when item2 becomes weakly reachable.  If another item is added then the monitor thread will be restarted and item2 will be released properly.  Subtle and unlikely to occur and less likely to persist if monitor() is called often.    ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f90125f9844146d4a36e4b6c594d832e5f21dda0","closed","in: core,","spring-projects-issues","2010-07-14T23:51:49Z","2012-06-19T03:44:00Z"
"","12370","Regression binding to nested properties on map values with auto-grow [SPR-7714]","**[Mike Bingham](https://jira.spring.io/secure/ViewProfile.jspa?name=mbingham)** opened **[SPR-7714](https://jira.spring.io/browse/SPR-7714?redirect=false)** and commented  After upgrading to Spring 3.0.5, we've encountered a regression when attempting to bind form inputs to nested map value properties with auto-grow.  To illustrate, in 3.0.5, the following test from BeanWrapperAutoGrowingTests works:  `@Test` public void setPropertyValueAutoGrowMap() { wrapper.setPropertyValue(""map[A]"", new Bean()); assertTrue(bean.getMap().get(""A"") instanceof Bean); }  However, the following test fails:  `@Test` public void setNestedPropertyValueAutoGrowMap() { wrapper.setPropertyValue(""map[A].nested"", new Bean()); assertTrue(bean.getMap().get(""A"").getNested() instanceof Bean); }  Both tests pass in 3.0.4.  ---  **Affects:** 3.0.5  **Issue Links:** - #12495 DataBinder/BeanWrapper regression: Binding to a nested Map property fails in 3.0.5, works in 3.0.4 (_**""is duplicated by""**_)","closed","in: core,","spring-projects-issues","2010-11-03T08:31:50Z","2019-01-12T16:49:24Z"
"","12010","Please provide a LICENSE file for spring-build subproject [SPR-7351]","**[Miguel Landaeta](https://jira.spring.io/secure/ViewProfile.jspa?name=nomadium)** opened **[SPR-7351](https://jira.spring.io/browse/SPR-7351?redirect=false)** and commented  The Debian Java team is preparing a package for Spring Framework 3.0. http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=575877  However, before this can be completed, all the dependences of Spring have to be packaged. In particular, we found that spring-build (http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=586523) doesn't include a file indicating the license and the copyright of this subproject.  Inspecting the source code available at https://src.springframework.org/svn/spring-build/trunk/, we found many files without a clear license, some are licensed under GPL, others are licensed under Apache 2.0, etc.  It's very important to have unambiguous copyright and license conditions for the Debian packages, otherwise they cannot be accepted and distributed.  It would be very nice if you could provide a LICENSE file in the root directory of this subproject clearly indicating the license and the copyright statements for that software.  Thanks in advance,  ---  **Affects:** 3.0.4  **Issue Links:** - #12011 Debian : Spring Build system has no licence / copyright (_**""duplicates""**_)","closed","type: task,","spring-projects-issues","2010-07-05T07:51:08Z","2019-01-11T14:23:52Z"
"","11929","JdbcCall and generics aware executeObject (unnecessary Class) [SPR-7270]","**[Michał Minicki](https://jira.spring.io/secure/ViewProfile.jspa?name=martel)** opened **[SPR-7270](https://jira.spring.io/browse/SPR-7270?redirect=false)** and commented  Hi. Why does the [executeObject](http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/jdbc/core/simple/SimpleJdbcCall.html#executeObject(java.lang.Class, org.springframework.jdbc.core.namedparam.SqlParameterSource)"") has to be passed an object class as a first parameter when the resulting class type could be taken from method return value?  Currently the executeObject method signature and body on SimpleJdbcCall is:  ``` public  T executeObject(Class returnType, SqlParameterSource args) { 	return (T) doExecute(args).get(getScalarOutParameterName()); } ```  While it would suffice to be just:  ``` public  T executeObject(SqlParameterSource args) { 	return (T) doExecute(args).get(getScalarOutParameterName()); } ```  Current architecture results in warnings for lists (Type safety: The expression of type List needs unchecked conversion to conform to List\). It wouldn't be the case if there was no class parameter in there:  ``` jdbcCall.addDeclaredRowMapper(""#result-set-1"", new RowMapper() { ... } );  SqlParameterSource in = new MapSqlParameterSource()...;  // results in a warning: List list = jdbcCall.executeObject(List.class, in);  // compiles cleanly List list = jdbcCall.executeObject(in); ```  Or am I missing something?   ---  **Affects:** 3.0.2  **Reference URL:** http://forum.springsource.org/showthread.php?t=90606","closed","type: enhancement,","spring-projects-issues","2010-06-09T17:08:20Z","2014-06-02T05:15:45Z"
"","12259","NPE in AbstractPollingMessageListenerContainer when committing transaction after message receive timeout [SPR-7603]","**[Michal Fijas](https://jira.spring.io/secure/ViewProfile.jspa?name=michalf)** opened **[SPR-7603](https://jira.spring.io/browse/SPR-7603?redirect=false)** and commented  We use AbstractPollingMessageListenerContainer with default receiveTimeout. When timeout expires the following code executes:  ``` noMessageReceived(invoker, sessionToUse); // Nevertheless call commit, in order to reset the transaction timeout (if any). commitIfNecessary(session, message); ```  but session is null, causing NPE in commitIfNecessary(). Shouldn't it be commitIfNecessary(sessionToUse, message) instead?  ---  **Affects:** 3.0.4  **Issue Links:** - #12136 Setup of JMS message listener invoker failed for destination when upgrading from 3.0.2 to 3.0.4 (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2010-09-30T04:34:56Z","2019-01-12T16:49:30Z"
"","12569","JavaMailSenderImpl misses a synchronized block for sending mails [SPR-7914]","**[Michael Wyraz](https://jira.spring.io/secure/ViewProfile.jspa?name=micw)** opened **[SPR-7914](https://jira.spring.io/browse/SPR-7914?redirect=false)** and commented  In JavaMailSenderImpl.doSend everything after Transport transport = getTransport(getSession()); until finally { transport.close(); } has to be in a synchronized(transport) block.  The reason is that JavaMail (at least the sun implementation) requires this. Otherwise connecting fails if assertions are enabled: java.lang.AssertionError at com.sun.mail.smtp.SMTPTransport.readServerResponse(SMTPTransport.java:1578) at com.sun.mail.smtp.SMTPTransport.openServer(SMTPTransport.java:1369) at com.sun.mail.smtp.SMTPTransport.protocolConnect(SMTPTransport.java:412) at javax.mail.Service.connect(Service.java:248) [...]  The failing code in the implementation is: protected int readServerResponse() throws MessagingException { assert Thread.holdsLock(this);  Probably ignoring this will result in strange race conditions. At least it avoids sending of mail with assertions enabled.   ---  **Affects:** 2.5.6  1 votes, 4 watchers","closed","status: bulk-closed,","spring-projects-issues","2011-01-27T06:53:07Z","2019-01-12T03:31:31Z"
"","12112","SpringTemplateLoader returns -1 for lastModified which breaks caching [SPR-7454]","**[Michael Wyraz](https://jira.spring.io/secure/ViewProfile.jspa?name=micw)** opened **[SPR-7454](https://jira.spring.io/browse/SPR-7454?redirect=false)** and commented  org.springframework.ui.freemarker.SpringTemplateLoader.getLastModified() returns -1. This prevents Freemarker from detecting template changes. Is simply should return resource.lastModified().   ---  **Affects:** 2.5.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9bd0bd9c3a279d22562296d7cd2e442e3d149b7d","closed","type: enhancement,","spring-projects-issues","2010-08-12T02:13:37Z","2012-06-19T03:43:03Z"
"","12462","Provide an annotation or xml config to allow beans to be configured for hot swapping [SPR-7806]","**[Michael Wiles](https://jira.spring.io/secure/ViewProfile.jspa?name=michaelwiles@gmail.com)** opened **[SPR-7806](https://jira.spring.io/browse/SPR-7806?redirect=false)** and commented  For testing, it is possible to configure a bean for hot swapping. However, in order to do this I require quite a lot of complex xml configuration.  A more convenient way to do this would be to add an annotation to spring enabled by annotations class to indicate the bean must be configured for hot swapping. The bean name of the target source (the reference you use to swap in a new bean) could then be the bean name + ""swap"" or a prefix on the bean name.  The xml equivalent might be to provide a flag at the top level config of a bean to indicate that it is enabled for hotswap.  Then on top this there could also be some flag that indicates whether to enable the hot swapping or not on or this kind of ""auto hotswap"" could only be available when running tests via spring's test runner. My hunch is that this would be fine, not sure how useful/valuable it would be in another context.   ---  **Reference URL:** http://forum.springsource.org/archive/index.php/t-46824.html","closed","type: enhancement,","spring-projects-issues","2010-12-09T01:54:15Z","2018-12-28T10:36:29Z"
"","12674","CharacterEncodingFilter should NOT extend OncePerRequestFilter (only GenericFilterBean) [SPR-8019]","**[Michael Vorburger](https://jira.spring.io/secure/ViewProfile.jspa?name=vorburger)** opened **[SPR-8019](https://jira.spring.io/browse/SPR-8019?redirect=false)** and commented  I would like to submit that it is wrong that the org.springframework.web.filter.CharacterEncodingFilter  extends the org.springframework.web.filter.OncePerRequestFilter, I think it should only the extend GenericFilterBean.  Here is why: As I've seen in a Struts-based application (but likely the same applies to other frameworks using the same typical pattern), where some kind of controller servlet uses javax.servlet.RequestDispatcher#forward(javax.servlet.ServletRequest, javax.servlet.ServletResponse) to forward to e.g. a JSP page (or presumably another view technology), a web container may partially ""reset"" the request - including the encoding set by this filter.  At least Jetty v7.3.0 definitely does this, see its fwdReset() method in org.eclipse.jetty.server.Response as called by forward() in org.eclipse.jetty.server.Dispatcher.  Because it's a OncePerRequestFilter, even if the Filter is called again on the same request object for the view the request was forwarded to, it won't force the encoding again. Note how that fwdReset() clears the characterEncoding and some more, but not the request attributes. (If you believe this is strange, may I let you take this up via a bug report on http://wiki.eclipse.org/Jetty/Contributor/Bug_Tracking ?)  I would also like to suggest that Spring documentation somewhere (JavaDoc & Guide?) should clearly highlight that the CharacterEncodingFilter should typically be declared with at least dispatcher>REQUEST\ AND \FORWARD\ (if not also INCLUDE, ERROR, ASYNC) ?  PS: This has been found while digging deep into all of this s...tuff ;) for solving http://mifosforge.jira.com/browse/MIFOS-4789.   ---  **Affects:** 3.0.5  1 votes, 1 watchers","closed","status: declined,","spring-projects-issues","2011-03-03T16:10:36Z","2019-01-12T16:26:00Z"
"","12443","Qualifiers in regular expressions in @RequestMapping do not work [SPR-7787]","**[Michael Simons](https://jira.spring.io/secure/ViewProfile.jspa?name=michael.simons)** opened **[SPR-7787](https://jira.spring.io/browse/SPR-7787?redirect=false)** and commented  One can use regular expression to narrow a path in a RequestMapping, which is nice.  Unfortunate a regex with a quantifier like  `@RequestMapping`(""/{user}/{year:\\d{1,4}}"")  leeds to the following exception:  ``` org.springframework.web.util.NestedServletException: Request processing failed; nested exception is java.util.regex.PatternSyntaxException: Unclosed counted closure near index 7 (\d{1,4)\Q}\E        ^ ```  Full stack is attached.  Thanks and kind regards.  ---  **Affects:** 3.0.5  **Attachments:** - [AntPathStringMatcher.java](https://jira.spring.io/secure/attachment/18279/AntPathStringMatcher.java) (_4.77 kB_) - [antpathstringmatcher-patch.diff](https://jira.spring.io/secure/attachment/18280/antpathstringmatcher-patch.diff) (_7.97 kB_) - [AntPathStringMatcher-v2.patch](https://jira.spring.io/secure/attachment/18289/AntPathStringMatcher-v2.patch) (_2.37 kB_) - [stacktrace.txt](https://jira.spring.io/secure/attachment/17427/stacktrace.txt) (_10.05 kB_)  **Sub-tasks:** - #13101 Capturing groups in regular expressions in `@RequestMapping` cause IndexOutOfBoundsException  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2d29439130a9c9f5ea61986246fe007f8d9d2d78  7 votes, 11 watchers","closed","type: bug,","spring-projects-issues","2010-12-04T09:44:25Z","2019-01-13T21:44:07Z"
"","12668","ResourceHttpRequestHandler status code 304 setting Content-Length header [SPR-8013]","**[Michael Pilone](https://jira.spring.io/secure/ViewProfile.jspa?name=mpilone)** opened **[SPR-8013](https://jira.spring.io/browse/SPR-8013?redirect=false)** and commented  I've been debugging an issue while using the Jetty ProxyServlet to proxy all requests to a backend server which uses the mvc:resources namespace element. I finally tracked the issue down to Jetty's ProxyServlet hanging while waiting for content from the backend server. Originally I thought this was a Jetty issue, but as I look at the HTTP headers, I think it is an issue with ResourceHttpRequestHandler.  ResourceHttpRequestHandler, at line 124 always sets the HTTP headers of Content-Length and Content-Type. Immediately after this call, at line 125, the response is returned if it is found that the resource hasn't changed and a 304 can be returned. What this means is that a ""304 Not Modified"" status is returned but the Content-Length header is also set.  I've found conflicting reports as to who is in the wrong here, but RFC 2616 section 10.3.5 says,  ""If the conditional GET used a strong cache validator (see section 13.3.3), the response SHOULD NOT include other entity-headers. Otherwise (i.e., the conditional GET used a weak validator), the response MUST NOT include other entity-headers; this prevents inconsistencies between cached entity-bodies and updated headers.""  of course, RFC 2616 section 4.4 says,  ""Any response message which ""MUST NOT"" include a message-body (such as the 1xx, 204, and 304 responses and any response to a HEAD request) is always terminated by the first empty line after the header fields, regardless of the entity-header fields present in the message.""  So, in either case (strong or weak validators), it seems like the ResourceHttpRequestHandler should not be setting a Content-Length header because clients could hang waiting for the content. However, clients should be smart enough to ignore content-length header on a 304. This is probably something that should be fixed on both sides!  The forum thread contains a simple workaround where the content length is reset to 0 if a 304 status is set.  ---  **Affects:** 3.0.5  **Reference URL:** http://forum.springsource.org/showthread.php?t=104505  **Issue Links:** - #12362 304 responses should not have non-0 Content-Length (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2011-03-02T05:40:09Z","2019-01-12T16:49:07Z"
"","12474","Use of semicolon delimited lists in REST URIs [SPR-7818]","**[Michael Moores](https://jira.spring.io/secure/ViewProfile.jspa?name=moores)** opened **[SPR-7818](https://jira.spring.io/browse/SPR-7818?redirect=false)** and commented  We are trying to use semicolon as the delimiter in a list of values being passed into a `@Controller`.  It looks like the URI data is truncated after the semicolon. Using a comma as the delimiter works fine, but semicolon is broke.  I think semicolon is legal.  I have a controller that looks like this:  ```java @Controller(value=""controller2"")  public class ProfileController2 {      @RequestMapping(method = GET, value = ""/users/{guid}/{p1};{p2}/xyz"")     @ResponseBody     public ResponseEntity getProfile2(             @PathVariable(""guid"") final String guid,              @PathVariable(""p1"") final String p1,              @PathVariable(""p2"") final String p2) {                     log.info(""get:guid/p1/p2:"" + guid + ""/"" + p1 + ""/"" + p2) ;                      ResponseEntity responseEntity = new ResponseEntity(guid + ""/"" + p1 + ""/"" + p2, HttpStatus.OK);          return responseEntity;     } } ```  Here is the debug log output:  ``` (initialization) 2010-12-13 13:06:20,033 DEBUG [org.springframework.beans.factory.support.DefaultListableBeanFactory] (ContainerBackgroundProcessor[StandardEngine[Catalina]]:) - Returning cached instance of singleton bean 'controller2' 2010-12-13 13:06:20,033 INFO  [org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping] (ContainerBackgroundProcessor[StandardEngine[Catalina]]:) - Mapped URL path [/users/{guid}/{p1};{p2}/xyz] onto handler 'controller2'  (actual request processing) 2010-12-13 13:06:25,109 DEBUG [org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping] (http-8098-1-ReqId:PNNnECYWSw66Mwb4w9E17g:) - No handler mapping found for [/users/guid123/P1] 2010-12-13 13:06:25,121 WARN  [org.springframework.web.servlet.PageNotFound] (http-8098-1-ReqId:PNNnECYWSw66Mwb4w9E17g:) - No mapping found for HTTP request with URI [/profile/users/guid123/P1] in DispatcherServlet with name 'profile' 2010-12-13 13:06:25,121 INFO  [com.real.uds.common.framework.exception.StandardErrorResponderBean] (http-8098-1-ReqId:PNNnECYWSw66Mwb4w9E17g:) - Error response status code 404 and error code InvalidRequest; the error message is No mapping found for HTTP r equest with URI [/profile/users/guid123/P1] in DispatcherServlet with name 'profile' 2010-12-13 13:06:25,152 DEBUG [org.springframework.web.context.support.XmlWebApplicationContext] (http-8098-1-ReqId:PNNnECYWSw66Mwb4w9E17g:) - Publishing event in WebApplicationContext for namespace 'profile-servlet': ServletRequestHandledEvent: url=[/profile/users/guid123/P1;P2/xyz]; client=[127.0.0.1]; method=[GET]; servlet=[profile]; session=[null]; user=[null]; time=[69ms]; status=[OK] ```  The same thing happens if i use a List as the `@PathVariable` type, passing in a string of semicolon delimited values as one input variable.  The data after the semicolon is lost.  When I look at the RFC, it looks like the semicolon should be supported, right?  ---  **Affects:** 3.0.5  **Reference URL:** http://forum.springsource.org/showthread.php?t=99477  **Issue Links:** - #10171 Support for matrix parameters (_**""duplicates""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2201dd8c45051230ad1a5a0e895cb5951edbfb74","closed","type: enhancement,","spring-projects-issues","2010-12-13T13:59:41Z","2019-01-11T15:18:43Z"
"","12515","Provide better documentation for support of JSR-330 (@Inject) [SPR-7858]","**[Michael Isvy](https://jira.spring.io/secure/ViewProfile.jspa?name=michael.isvy)** opened **[SPR-7858](https://jira.spring.io/browse/SPR-7858?redirect=false)** and commented  #### Status Quo  The current reference documentation about JSR-330 is not very thorough.  #### Goal  The Spring Reference Manual should cover the support for `@Inject`, `@Named`, `@Qualifier`, etc. in greater detail.  ---  **Issue Links:** - #17708 Document use of Provider interface at injection point (_**""depends on""**_)","closed","type: documentation,","spring-projects-issues","2011-01-04T02:05:26Z","2019-01-11T15:14:40Z"
"","12074","Typos, formatting issues, minor wording changes, minor fixes in code samples [SPR-7416]","**[Michael Isvy](https://jira.spring.io/secure/ViewProfile.jspa?name=michael.isvy)** opened **[SPR-7416](https://jira.spring.io/browse/SPR-7416?redirect=false)** and commented  I have noticed a few minor improvements that can be done to the Spring ref documentation. This issue is dedicated for all of the fixes I'll do to the documentation.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6adf8d18df2c31a4432d8bdd540acd5aea410e23","closed","type: enhancement,","spring-projects-issues","2010-08-03T00:40:13Z","2014-09-19T09:54:29Z"
"","11951","Marshaller properties - cast needed [SPR-7292]","**[Michael Isvy](https://jira.spring.io/secure/ViewProfile.jspa?name=michael.isvy)** opened **[SPR-7292](https://jira.spring.io/browse/SPR-7292?redirect=false)** and commented  Currently, I need to set a Marshaller's properties as follows:  ```java .  marshaller.setMarshallerProperties(Collections.singletonMap(Marshaller.JAXB_FORMATTED_OUTPUT, (Object) Boolean.TRUE)); ```  It would be nice if I didn't need to do the cast. In that case, the method should take an argument of type Map instead of Map.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5e5a8a09cfa977e2be35ccf057849bc28faa51a1  2 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2010-06-16T02:28:13Z","2012-06-19T03:44:06Z"
"","12303","ObjectToStringConverter check is too limited [SPR-7647]","**[Michael Hunger](https://jira.spring.io/secure/ViewProfile.jspa?name=mhunger)** opened **[SPR-7647](https://jira.spring.io/browse/SPR-7647?redirect=false)** and commented  The canConvert check of ObjectToStringConverter disables conversion of arbitrary objects to String. But in the convert method it just uses toString, so matches should always return true.  The problem arose when CollectionToString checked for the generic Member if it was convertible to String which uses ObjectToString converters check. So a Set\ was not converted into a string throwing an ExpressionLanguage error when rendering a jspx using field:display  This matches reads like the one I would expect in ""StringToObjectConverter""  public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) { Class sourceClass = sourceType.getObjectType(); return CharSequence.class.isAssignableFrom(sourceClass) || Number.class.isAssignableFrom(sourceClass) || Boolean.class.equals(sourceClass) || Character.class.equals(sourceClass) || StringWriter.class.isAssignableFrom(sourceClass) || sourceClass.isEnum() || ObjectToObjectConverter.hasValueOfMethodOrConstructor(sourceClass, String.class); }  public Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) { return (source != null ? source.toString() : null); }  after replacing the matches() method with a return true; in a copy of ObjectToStringConverter all worked fine.   ---  **Affects:** 3.0.4","closed","type: enhancement,","spring-projects-issues","2010-10-11T20:27:49Z","2015-09-22T16:49:59Z"
"","12589","Conversion Service - inconsistent handling of empty strings [SPR-7934]","**[Michael C. Maggio](https://jira.spring.io/secure/ViewProfile.jspa?name=mcmagi)** opened **[SPR-7934](https://jira.spring.io/browse/SPR-7934?redirect=false)** and commented  The FormattingConversionService's handling of empty strings appears to be different depending on whether or not a field has a format annotation.  For example, consider the following class.      public class MyForm     {         private String unformatted;         private String formatted;              public String getUnformatted() { return unformatted; }         public void setUnformatted(String v) { unformatted = v; }              @MyFormat         public String getFormatted() { return formatted; }         public void setFormatted(String v) { formatted = v; }     }  If I POST a form with formatted="""" and unformatted="""", then I will receive an instance of MyForm with formatted=null and unformatted="""".  The problem seems to be lines 231-233 of FormattingConversionService which executes the following immediately before invoking the parser:      if (text == null || text.length() == 0) {         return null;     }  This might seem trivial, but it has caused us some confusion with the JSR303 bean validators when testing for blank fields.  The unformatted fields will work fine with `@NotBlank`, but the formatted fields need BOTH `@NotBlank` and `@NotNull` to handle both empty strings and whitespace strings.  As a solution, I would recommend removing this check - at the very least the length check.   ---  **Affects:** 3.0.5","closed","status: declined,","spring-projects-issues","2011-02-03T13:27:28Z","2019-01-12T16:26:12Z"
"","12424","Trimming formatter annotation for String command fields [SPR-7768]","**[mdrg](https://jira.spring.io/secure/ViewProfile.jspa?name=mdrg)** opened **[SPR-7768](https://jira.spring.io/browse/SPR-7768?redirect=false)** and commented  I frequently needed to do some extra handling on String command fields to make them as clean as I wanted.  The `@NotBlank` Hibernate Validator allows me to avoid whitespace-filled inputs, but I also wanted to receive the fields without all these unwanted whitespaces, so I made this `@Trimmed` formatter.  It performs three different ""trimming"" operations, as below: - SIMPLE : just trim(), nothing else; - ALL_WHITESPACES : default operation, performs trim() and replaces any group of whitespace characters (\s) with a single whitespace; I defaulted to this because I believe most input fields on web pages do not care about multiple whitespaces and indeed would prefer that they do not happen at all; - EXCEPT_LINE_BREAK : the same as ALL_WHITESPACES, but groups with at least one line break inside them will be replaced by a single line break; this is intended for textarea inputs, where line breaks are allowed, but still avoiding multiple (annoying) line breaks one after another.  Also, some notes about this, that may be useful for a refactored version that - who knows - may be added to Spring: - My initial idea included some 'nullIfEmpty' flag, but it was not possible because returning null from the formatter triggered an NPE on the underlying Spring method; I'd like this if it could be done somehow; - I feel this is not optimal in performance terms because if I use `@NotBlank` and `@Trimmed` in the same field, I will be trimming a (valid) field twice, but I guess I can't invert the execution order; - The formatter implementation itself may be tweaked and somehow improved I guess, but it worked like this, and I didn't knew how could I improve it (specially regex usage); - an extra feature that I thought of would be custom replacements: another parameter would accept an array of regex-replacement String pairs; this is in fact more generic than the purpose of `@Trimmed` and I had no use for such feature, so I didn't implemented it.  This is about it. I made it for my own needs, but I guess it is generic enough to be useful for everybody.   ---  **Reference URL:** http://forum.springsource.org/showthread.php?p=329706  **Attachments:** - [Trimmed.java](https://jira.spring.io/secure/attachment/17407/Trimmed.java) (_548 bytes_) - [TrimmedAnnotationFormatterFactory.java](https://jira.spring.io/secure/attachment/17408/TrimmedAnnotationFormatterFactory.java) (_2.61 kB_)  3 votes, 5 watchers","closed","status: bulk-closed,","spring-projects-issues","2010-11-28T03:40:48Z","2019-01-12T03:31:59Z"
"","12604","Improve performance of DefaultSingletonBeanRegistry.getSingletonNames(..) for high-concurrent-load applications [SPR-7949]","**[mck](https://jira.spring.io/secure/ViewProfile.jspa?name=mck)** opened **[SPR-7949](https://jira.spring.io/browse/SPR-7949?redirect=false)** and commented  Under high-concurrent load situation, in an application using many prototype beans, contention occurs in DefaultSingletonBeanRegistry.getSingletonNames(..)  This method has uses singletonObjects as a mutex for all map operations. Using a ReadWriteLock this contention could be removed, as in our case 99% of the calls here are read-only.  We see hundreds of thread dumps like in a single jvm:  java.lang.Thread.State: BLOCKED (on object monitor) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:180) - waiting to lock  (a java.util.concurrent.ConcurrentHashMap)   at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:452)   at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:317)   at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:296)   at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:250)   at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1083)  java.lang.Thread.State: BLOCKED (on object monitor) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingletonNames(DefaultSingletonBeanRegistry.java:277) - waiting to lock  (a java.util.concurrent.ConcurrentHashMap)   at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:352)   at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:185)   at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:829)   at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:744)   at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:703)   at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.resolvedCachedArgument(AutowiredAnnotationBeanPostProcessor.java:436)   at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.access$0(AutowiredAnnotationBeanPostProcessor.java:432)   at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:469)   at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:84)   at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:283)   at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1074)   at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireBean(AbstractAutowireCapableBeanFactory.java:295)  java.lang.Thread.State: BLOCKED (on object monitor) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:180) - waiting to lock  (a java.util.concurrent.ConcurrentHashMap)   at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:452)   at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:317)   at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:296)   at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:250)   at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1083)  ---  **Affects:** 3.0.4, 3.0.5  **Attachments:** - [SPR-7949.patch](https://jira.spring.io/secure/attachment/17615/SPR-7949.patch) (_15.19 kB_)  **Issue Links:** - #11536 Cache by-type lookups in DefaultListableBeanFactory (_**""duplicates""**_) - #13828 Threads blocking on getSingleton method on DefaultSingletonBeanRegistry class  (_**""is duplicated by""**_)  17 votes, 16 watchers","closed","has: votes-jira,","spring-projects-issues","2011-02-09T04:04:59Z","2019-01-12T16:49:10Z"
"","11899","Spring MVC @RequestMapping annotations ignored [SPR-7240]","**[Matthew T. Adams](https://jira.spring.io/secure/ViewProfile.jspa?name=matthewadams)** opened **[SPR-7240](https://jira.spring.io/browse/SPR-7240?redirect=false)** and commented  `@RequestMapping` annotations work against Spring 3.0.2, but fail against Spring 2.5.6.SEC01.  Attached to this issue is a zip containing a Spring MVC project created in SpringSource Tool Suite 2.3.2 whose configuration I modified to work against Spring 2.5 (see src/main/WEB-INF/spring/context-config.xml).  Could be misconfiguration, but I'm unsure since it works against Spring 3.0.2.  Steps to reproduce:  To run against Spring 2.5 and observe bug, issue cmd mvn -f pom-2.5.xml clean install jetty:run then open http://localhost:8080/blargy/abc/def and observe 404 error.  To run against Spring 3.0 and observe correct behavior, issue cmd mvn -f pom-3.0.xml clean install jetty:run then open http://localhost:8080/blargy/abc/def and observe proper behavior.    ---  **Affects:** 2.5.6, 3.0.2  **Reference URL:** http://forum.springsource.org/showthread.php?t=89966  **Attachments:** - [spring-mvc-2.5-test.zip](https://jira.spring.io/secure/attachment/16597/spring-mvc-2.5-test.zip) (_15.42 kB_)  2 votes, 2 watchers","closed","status: declined,","spring-projects-issues","2010-05-26T10:25:17Z","2019-01-12T16:37:55Z"
"","12147","ClassPathScanningCandidateComponentProvider unable to search webapp Jars [SPR-7489]","**[Matt Young](https://jira.spring.io/secure/ViewProfile.jspa?name=solid)** opened **[SPR-7489](https://jira.spring.io/browse/SPR-7489?redirect=false)** and commented  I have implemented my own classpath scanning utility using spring's ClassPathScanningCandidateComponentProvider.  All the utility does is search the classpath for classes that are assignable to a given class.  This seems to work well if the class is compiled in as part of the war.  However if I have classes in a referenced jar file, the ClassPathScanningCandidateComponentProvider will not find them.  There does not seem to be a switch to set to search only the webapp or entire classpath so I am assuming this is a bug.  In either case, is the method source: [code] public static List\ getComponentClasses(Class clazz, String basePackage) { basePackage = (basePackage == null )? """" : basePackage;   List\ classes = new ArrayList\();          ClassPathScanningCandidateComponentProvider scanner=new ClassPathScanningCandidateComponentProvider(false);         scanner.addIncludeFilter(new AssignableTypeFilter(clazz));         for (BeanDefinition candidate : scanner.findCandidateComponents(basePackage)) {               try {                 Class cls = ClassUtils.resolveClassName(candidate.getBeanClassName(),                        scanner.getResourceLoader().getClassLoader());                   classes.add((Class) cls);               } catch (Throwable ex) {                   LOGGER.log(Level.FATAL,""Unable to parse bean candidate."",ex);               }           }           return classes;        }  [/code]  And here is how it is run: [code] MyClassScanner.getComponentClasses(org.quartz.Job.class,null); [/code]  I can't verify it but I am certain this worked in 2.5.6 and 3.0.0.RELEASE.  I suspect it was changed in 3.0.1   ---  **Affects:** 3.0.3, 3.0.4  **Reference URL:** http://forum.springsource.org/showthread.php?t=94077","closed","status: declined,","spring-projects-issues","2010-08-24T13:16:10Z","2019-01-12T16:37:40Z"
"","12609","form:select does not set selected option when a PropertyEditor is associated. [SPR-7954]","**[Matt Smiglarski](https://jira.spring.io/secure/ViewProfile.jspa?name=penthief)** opened **[SPR-7954](https://jira.spring.io/browse/SPR-7954?redirect=false)** and commented  If you use form:select tag with a path to field which has an associated  PropertyEditor, the call to ObjectUtils.nullSafeEquals() in SelectedValueComparator.isSelected() returns false because the original property is compared with the value from PropertyEditor.getAsText().  I hope this is clear -- for example if the propertyEditor.getAsText() returns ""foo"" for myOriginalObject then while debugging we see that the arguments to nullSafeEquals on line 75 of SelectedValueComparator will be myOriginalObject and ""foo"".  As a result it seems that  tags will not set the selected option when a property editor is associated (with any non-String field.)   ---  **Affects:** 3.0.5  1 votes, 2 watchers","closed","status: bulk-closed,","spring-projects-issues","2011-02-10T14:37:42Z","2019-01-12T03:31:25Z"
"","12231","PropertyPlaceholderHelper#findPlaceholderEndIndex does not work for custom placeholderPrefix [SPR-7574]","**[Matt Kusnierz](https://jira.spring.io/secure/ViewProfile.jspa?name=mpkusnierz)** opened **[SPR-7574](https://jira.spring.io/browse/SPR-7574?redirect=false)** and commented  The logic is incorrect within the findPlaceholderEndIndex method:  version 3.0.1 line 173 version 3.0.4 line 193  index = index + this.placeholderPrefix.length() - 1;  I think this line should read:  index = index + this.placeholderSuffix.length();  The code as it stands only works at the moment because the default prefix ""${"" is 2 characters and the default suffix ""}"" is 1 character.   ---  **Affects:** 3.0.4  **Reference URL:** http://forum.springsource.org/showthread.php?t=95476  **Attachments:** - [PropertyPlaceholderHelper-3.0.1.RELEASE-A.java](https://jira.spring.io/secure/attachment/17124/PropertyPlaceholderHelper-3.0.1.RELEASE-A.java) (_7.85 kB_) - [PropertyPlaceholderHelper-3.0.4.RELEASE.java](https://jira.spring.io/secure/attachment/17125/PropertyPlaceholderHelper-3.0.4.RELEASE.java) (_8.37 kB_) - [SpringPropertyPlaceholderHelper-3.0.1.RELEASE-A.jar](https://jira.spring.io/secure/attachment/17123/SpringPropertyPlaceholderHelper-3.0.1.RELEASE-A.jar) (_3.66 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/eda6268d9deed787b3b656843ed5fad02c7b15f1","closed","in: core,","spring-projects-issues","2010-09-20T04:36:24Z","2012-06-19T03:43:13Z"
"","12454","Cannot @Autowired java.util.concurrent.BlockingQueue [SPR-7798]","**[Marty Kube](https://jira.spring.io/secure/ViewProfile.jspa?name=martykube)** opened **[SPR-7798](https://jira.spring.io/browse/SPR-7798?redirect=false)** and commented  Cannot `@Autowire` to inject an instance of java.util.concurrent.BlockingQueue.  The above forum has a post from 2009.  I was able to reproduce this problem and have attached a minimal example.  This works with XML based bean configuration but not with the annotation `@Autowired`.  AppComponent.java:  ```   package com.example;  import java.util.concurrent.BlockingQueue;  import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.support.ClassPathXmlApplicationContext; import org.springframework.stereotype.Component;  @Component public class AppComponent {  	@Autowired 	public BlockingQueue queue;  	public static void main(String[] args) {  		new ClassPathXmlApplicationContext(""com/example/context.xml"").getBean(AppComponent.class); 	} } ```  Config.java:  ```   package com.example;  import java.util.concurrent.BlockingQueue; import java.util.concurrent.LinkedBlockingQueue;  import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration;  @Configuration public class Config {  	@Bean 	public BlockingQueue blockingQueue() { 		return new LinkedBlockingQueue(); 	} } ```  context.xml:  ```xml     	  ```  The runtime error is:  ``` Exception in thread ""main"" org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'appComponent': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: public java.util.concurrent.BlockingQueue com.example.AppComponent.queue; nested exception is org.springframework.beans.FatalBeanException: No element type declared for collection [java.util.concurrent.BlockingQueue] 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:285) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1074) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:517) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:291) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:288) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:580) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:895) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:425) 	at org.springframework.context.support.ClassPathXmlApplicationContext.(ClassPathXmlApplicationContext.java:139) 	at org.springframework.context.support.ClassPathXmlApplicationContext.(ClassPathXmlApplicationContext.java:83) 	at com.example.AppComponent.main(AppComponent.java:17) Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: public java.util.concurrent.BlockingQueue com.example.AppComponent.queue; nested exception is org.springframework.beans.FatalBeanException: No element type declared for collection [java.util.concurrent.BlockingQueue] 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:502) 	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:84) 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:282) 	... 13 more Caused by: org.springframework.beans.FatalBeanException: No element type declared for collection [java.util.concurrent.BlockingQueue] 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:740) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:703) 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:474) 	... 15 more ```  ---  **Affects:** 3.0.5  **Reference URL:** http://forum.springsource.org/showthread.php?t=72474  **Attachments:** - [inject-blocking.zip](https://jira.spring.io/secure/attachment/17443/inject-blocking.zip) (_3.54 MB_)  **Issue Links:** - #13164 Support injection of collection-typed beans using `@Autowired`+`@Qualifier` or `@Inject`+`@Named`  (_**""is superseded by""**_)","closed","in: core,","spring-projects-issues","2010-12-07T10:35:38Z","2019-01-13T07:11:59Z"
"","12676","java.lang.String not correctly serialized to JSON with default  configuration [SPR-8021]","**[Martin von Zweigbergk](https://jira.spring.io/secure/ViewProfile.jspa?name=mvz)** opened **[SPR-8021](https://jira.spring.io/browse/SPR-8021?redirect=false)** and commented  In the default list of message converters when using \, StringHttpMessageConverter comes before MappingJacksonHttpMessageConverter. Since StringHttpMessageConverter accepts all media types by default, this means that even if the client sends ""Accept: application/json"", it will get an unquoted string back, which is not valid JSON. It seems like StringHttpMessageConverter should be moved later in the list. The same probably applies to ByteArrayHttpMessageConverter.   ---  **Affects:** 3.0.5","closed","in: web,","spring-projects-issues","2011-03-04T06:55:44Z","2019-01-11T12:37:04Z"
"","12603","Wrong example for the Elvis operator [SPR-7948]","**[Martin Trummer](https://jira.spring.io/secure/ViewProfile.jspa?name=martin)** opened **[SPR-7948](https://jira.spring.io/browse/SPR-7948?redirect=false)** and commented  in ""6.5.14 The Elvis Operator"" (http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/expressions.html#d0e12053)  I think the following example is wrong: String name = parser.parseExpression(""null?:'Unknown'"").getValue(String.class);  it should be 'name' instead of 'null' in the expression: String name = parser.parseExpression(""name?:'Unknown'"").getValue(String.class);   ---  **Affects:** 3.0 GA","closed","status: invalid,","spring-projects-issues","2011-02-08T08:24:01Z","2019-01-12T05:31:04Z"
"","12244","LazyConnectionDataSourceProxy does not return thread-safe Connection handles [SPR-7588]","**[Martin Rose](https://jira.spring.io/secure/ViewProfile.jspa?name=mrose@accertify.com)** opened **[SPR-7588](https://jira.spring.io/browse/SPR-7588?redirect=false)** and commented  LazyConnectionDataSourceProxy.getTargetConnection is not thread safe.  If two threads both try to invoke a method on the connection that would result in a connection being initiated from the underlying datasource the check operation and the set operation are not guaranteed to be atomic.  Our use case has an instance where we share an auto-commit=true connection across threads and performs synchronization on the PreparedStatements/cursors retrieved from the Connection.  We are occasionally losing connections from our underlying datasource pool when two threads both try to initialize the proxy at the same time.  I'm not sure if LazyConnectionDataSourceProxy should be threadsafe. If it should be then the following method needs to become synchronized, else some documentation should be added stating that it is NOT.  private Connection getTargetConnection(Method operation) throws SQLException { if (this.target == null) { // No target Connection held -> fetch one. if (logger.isDebugEnabled()) { logger.debug(""Connecting to database for operation '"" + operation.getName() + ""'""); } // Fetch physical Connection from DataSource. this.target = (this.username != null) ? getTargetDataSource().getConnection(this.username, this.password) : getTargetDataSource().getConnection();   ---  **Affects:** 3.0.4","closed","type: enhancement,","spring-projects-issues","2010-09-23T18:44:35Z","2015-09-22T17:34:39Z"
"","12338","AbstractBindingResult.hashCode() throws NullPointerException [SPR-7682]","**[Martin Raie](https://jira.spring.io/secure/ViewProfile.jspa?name=martinraie)** opened **[SPR-7682](https://jira.spring.io/browse/SPR-7682?redirect=false)** and commented  If target object is null, AbstractBindingResult.hashCode() throws NullPointerException.  I'm using annotated model attribute in controller class and for some reason Spring creates BeanPropertyBindingResult object where target is null and sets it as a request attribute. I'm using it with Liferay and Liferay Journal Content portlet calls hashCode method on all request attributes. If my Spring portlet and Journal Content portlet are on the same page the latter gets NPE.  I believe AbstractBindingResult.hashCode() method should be modified in a way that it wouldn't throw NPE even if target object is null.   ---  **Affects:** 2.5.6, 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3fe2d037edc86e5055fc185886b066eada7184cd","closed","in: core,","spring-projects-issues","2010-10-26T00:58:46Z","2012-06-19T03:39:51Z"
"","12180","Need generic CloseSessionAfterView / KeepSessionOpenInView functionality [SPR-7522]","**[Martin Probst](https://jira.spring.io/secure/ViewProfile.jspa?name=martin.probst)** opened **[SPR-7522](https://jira.spring.io/browse/SPR-7522?redirect=false)** and commented  When using Spring with transactional data sources, such as Hibernate+JDBC, it's very convenient to use declarative transaction support through `@Transactional` & friends.  However what a lot of people need sooner or later is the ""OpenSessionInView"" functionality. That is, users don't want to, or in many cases cannot (easily), finish all database operations within the scope of the method, but rather need to keep a transaction open in the view.  The drawback of OpenSessionInView however is that TransactionDefinitions from the annotated methods will not be honoured (as far as I can see, that is). Also, this functionality is not limited to Hibernate itself, I think this is something generic that many transactional implementations will need at some point of time.  What I'm proposing is to create another transaction definition attribute ""closeSessionAfterView"" or ""keepSessionOpenInView"", and build support for that into AbstractPlatformTransactionManager. Users could register a filter (or maybe Spring could do that in DispatcherServlet automatically) that will _not_ open or configure it's own transaction, but rather tell the TransactionManager that it will handle transaction completion. The request is processed as usual, if a transaction is required it's opened and configured as usual, but it will not be closed (rolled back/committed) - this is handled by the CloseSessionAfterViewFilter.  The advantage is that sessions will be declared & configured where they are required, and users can opt-out of the session-in-view thing on a per method basis. This increases flexibility and locality of concerns. A generic implementation in the transaction support would be beneficial to many underlying transaction managers.  This needs some thought on how to handle nested transactions.  It's possible to implement something like this today - I did for a particular TransactionManager. Basically you implement a filter that tells the transaction manager it will handle transaction rollback/commit. On regular rollback or commit, you just mark the transaction as rollback only (or not), and then continue as usual. Once the view is done and execution reaches the filter, it does the actual closing of the transaction. Problem is that this is somewhat hacky, there is no support for method level configuration (e.g. `@Transactional`(keepSessionOpenInView=true)), and this should probably be a generic component for SpringTX.   ---  **Affects:** 3.0.4","closed","type: enhancement,","spring-projects-issues","2010-09-03T02:50:59Z","2018-12-27T10:37:18Z"
"","12422","Wrong data-type resolution using custom Converter [SPR-7766]","**[Martin Hanzalek](https://jira.spring.io/secure/ViewProfile.jspa?name=martinhanzalek)** opened **[SPR-7766](https://jira.spring.io/browse/SPR-7766?redirect=false)** and commented  We are using custom Converter in web-context:      public class ColorConverter implements Converter {         @Override         public Color convert(String source) {             if (!source.startsWith(""#""))                 source = ""#"" + source;             return Color.decode(source);         }     }  When used with Spring 3.0.3, request like:      http://localhost:8080/app/test.html?colors=aaaaaa&colors=bbbbbb  and controller:      @Controller     public class AController {         @RequestMapping(""/test.html"")         public void handle(@RequestParam(""colors"") List colors) {             System.out.println(colors);         }     }  it resolves correctly to List\.  However, when used with Spring 3.0.5 it resolves to List\ and doesn't convert values to Color-s - tehy remain String-s.  Can you correct that? Thanks.  ---  **Affects:** 3.0.5  **Attachments:** - [ROO-1780-example.tar](https://jira.spring.io/secure/attachment/17453/ROO-1780-example.tar) (_310.00 kB_)  **Issue Links:** - [ROO-1780](https://jira.spring.io/browse/ROO-1780) touble with generated finder on object class - #12437 `@RequestParam` - wanting List getting List  1 votes, 6 watchers","closed","type: bug,","spring-projects-issues","2010-11-26T05:36:20Z","2019-01-13T07:12:12Z"
"","12421","Spring EL: context:property-placeholder [SPR-7765]","**[Markus Torstensson](https://jira.spring.io/secure/ViewProfile.jspa?name=bratwurst)** opened **[SPR-7765](https://jira.spring.io/browse/SPR-7765?redirect=false)** and commented  In the following snippet of my application context I try to load some configuration from either a property file inside my classpath or from a location in the filesystem. The idea is to always load the test configuration and overwrite those properties if a real deployment configuration exist.  But SpEL doesn't kick in and resolve `#{configurationDirectory.path`} to a value.  ```xml                                                ```  This is what I get:  ``` 0 [main] WARN org.springframework.beans.factory.config.PropertyPlaceholderConfigurer - Could not load properties from URL [file:# {configurationDirectory.path}/config.cfg.properties|file:///#%20%20\{configurationDirectory.path}/config.cfg.properties]: ```  Is this intended behavior?  ---  **Affects:** 3.0.5  5 votes, 6 watchers","closed","status: bulk-closed,","spring-projects-issues","2010-11-25T06:26:55Z","2019-01-13T21:44:11Z"
"","12542","Internationalization with named parameter [SPR-7886]","**[Mark Sudau](https://jira.spring.io/secure/ViewProfile.jspa?name=marsud)** opened **[SPR-7886](https://jira.spring.io/browse/SPR-7886?redirect=false)** and commented  Actually internationalization is possible with parameters in the same way the JDK supports it. So you can use parameters like:  my.key=You really want to {0} {1} {2} for {4}?  The result can be: - You really want to spend 10 $ for MyFund? - You really want to accept 50 € for Helpless People?  In a JSP it will be used like   If there is a key having more than one parameter a translator might have problems zu resolve the parameters in the corret order. As a translator only knows the numbers and no name the translation may result in: - You really want to 10 $ spend for MyFund?  In deed this is not the same as the original above.  The suggestion is something like this my.newKey=You really want to {:actionParam} {:amountParam} {:currenyParam} for {:reasonParam}?  This can be resolved like   If there are no argumentNames the sequence of the argumentValues fits the actuall behaviour of {0} {1} aso.  To support namedParameters in a MessegaResource the Interface should also support something like public String getMessage (String code, String[] argNames, Object[] args, Locale locale)throws NoSuchMessageException; or public String getMessage (String code, Map args, Locale locale)throws NoSuchMessageException;   ---  **Affects:** 3.0.5","closed","type: enhancement,","spring-projects-issues","2011-01-14T00:38:15Z","2018-12-28T11:37:50Z"
"","12449","Support for interception of controller method invocation after binding has completed [SPR-7793]","**[Mark Pollack](https://jira.spring.io/secure/ViewProfile.jspa?name=mark.pollack)** opened **[SPR-7793](https://jira.spring.io/browse/SPR-7793?redirect=false)** and commented  Other MVC framework such as Ruby on Rails and ASP.NET MVC support interception after parameter binding has occured.  Spring MVC should support this extension point.  The use case driving this are storing of MVC event analytics data in NoSQL databases such as MongoDB.  The current filter support in MVC is before binding has taken place and therefore harder to access information that will be converted to objects at the time of controller invocation.  See https://github.com/SpringSource/spring-data-document/tree/master/spring-data-document-core/src/main/java/org/springframework/data/document/web/servlet  for an example implementation.  These are called 'action filters' in Ruby on Rails/ASP.NET MVC  http://guides.rubyonrails.org/action_controller_overview.html  http://www.asp.net/mvc/tutorials/understanding-action-filters-cs  ---  **Affects:** 3.0 GA  **Issue Links:** - #11103 `@MVC` should provide an ""onBind"" hook prior to automatic validation (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2010-12-06T07:09:55Z","2019-01-13T07:12:01Z"
"","12448","Make it easier to customize or extend the HandlerAdapter for annotated methods [SPR-7792]","**[Mark Pollack](https://jira.spring.io/secure/ViewProfile.jspa?name=mark.pollack)** opened **[SPR-7792](https://jira.spring.io/browse/SPR-7792?redirect=false)** and commented  It is very difficult to override any behavior on AnnotationMethodHandlerAdapter with a subclass.  This class should be more open to extension and automatic configuration in the namespace.  Avoiding the use of the namespace the registration of a custom AnnotationMethodHandlerAdapter is also complicated by the fact that other parts of the framework need to be configured when the HandlerAdapter changes.  These are typically done by the namespace handler for mvc, but as one can't register a custom HandlerAdapter in the namespace, one has to duplicate that non obvious configuration.  See https://github.com/SpringSource/spring-data-document/tree/master/spring-data-document-core/src/main/java/org/springframework/data/document/web  for cut-n-paste extension of AnnotationMethodHandlerAdapter that I had created and its registration is done in  https://github.com/SpringSource/spring-data-document-examples/tree/master/myrestaurants-analytics/src/main/java/com/springone/myrestaurants/config   ---  **Affects:** 3.0 GA","closed","type: enhancement,","spring-projects-issues","2010-12-06T07:04:17Z","2012-06-19T03:39:41Z"
"","12251","Add ability to add to beginning of TestExecutionListener list in TestContextManager [SPR-7595]","**[Mark Pollack](https://jira.spring.io/secure/ViewProfile.jspa?name=mark.pollack)** opened **[SPR-7595](https://jira.spring.io/browse/SPR-7595?redirect=false)** and commented  The Spring AMQP project has a need to start an external process (the rabbitmq broker) before any of the applications contexts are bootstrapped.   The method registerTestExecutionListeners only allows adding to the end of the execution listener list.  See org.springframework.amqp.rabbit.test.SpringRabbitJUnit4ClassRunner.createTestContextManager for brute force reflection workaround.  The TestContextManager is quite closed to extension as well, would be nice to open it up to be more subclass friendly.   ---  **Affects:** 3.0.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3f0462510e4edefc7d6ef830b0ea61e1ff623fd4","closed","type: enhancement,","spring-projects-issues","2010-09-27T08:49:54Z","2012-06-19T03:42:58Z"
"","12130","Spring Reference Doc identifies a sample that does not exist in the SVN repository (Extensible XML ) [SPR-7472]","**[Mark Mynsted](https://jira.spring.io/secure/ViewProfile.jspa?name=mmynsted)** opened **[SPR-7472](https://jira.spring.io/browse/SPR-7472?redirect=false)** and commented  The spring reference documentation here http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/extensible-xml.html identifies a sample named myns with a package space in org/springframework/samples/xml, but such a sample is absent from the samples managed in the samples section of SVN here https://src.springframework.org/svn/spring-samples/.  Here is an example comment from the reference:  \  Having the sample available would be very helpful.    ---  1 votes, 1 watchers","closed","status: declined,","spring-projects-issues","2010-08-18T08:19:31Z","2015-09-22T19:09:59Z"
"","12700","MBeanExporter should register MBeans later than the initialization phase [SPR-8045]","**[Mark Fisher](https://jira.spring.io/secure/ViewProfile.jspa?name=mark.fisher)** opened **[SPR-8045](https://jira.spring.io/browse/SPR-8045?redirect=false)** and commented  The MBeanExporter currently registers MBeans within the afterPropertiesSet() callback method (InitializingBean), and that can cause subtle lifecycle-related issues (e.g. creating FactoryBean products earlier than would otherwise be necessary). It might be better to take advantage of the Spring 3.0+ SmartLifecycle's auto-start functionality and to defer the MBean registration within the start() method after all beans have been initialized according to the order determined by their dependency relationships instead.   ---  **Affects:** 3.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/111537418855fd2742332e8cee78bcf415bcd1bf, https://github.com/spring-projects/spring-framework/commit/c7b106577fd17d0949dd6f8ca748556bf77850aa, https://github.com/spring-projects/spring-framework/commit/2ede219e664663e40020ea2c9eeb8c953b54a63c, https://github.com/spring-projects/spring-framework/commit/d1c780f5b54aeb42339ca49c181c56f501db9038, https://github.com/spring-projects/spring-framework/commit/7eee7d2e305b4a2b225e256d01391735422a5b08, https://github.com/spring-projects/spring-framework/commit/cec3ffa3caa3968082f1d69592a724deb179e569, https://github.com/spring-projects/spring-framework/commit/35067790f386b03834bb14b228da462153d27b0b, https://github.com/spring-projects/spring-framework/commit/2bd6e24b653bd58ea025b87be041ca0b9d8312fb","closed","type: enhancement,","spring-projects-issues","2011-03-12T07:41:02Z","2014-07-18T10:16:33Z"
"","12672","Allow nested  elements to be declared anywhere [SPR-8017]","**[Mark Fisher](https://jira.spring.io/secure/ViewProfile.jspa?name=mark.fisher)** opened **[SPR-8017](https://jira.spring.io/browse/SPR-8017?redirect=false)** and commented  This appears to be a schema issue since the 'beans' element is enabled within a sequence where it would always be the last type.  ---  **Affects:** 3.1 M1  **Issue Links:** - #14525 XML configuration: 'beans' element should be allowed between 'bean' elemebts (_**""is duplicated by""**_)  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2011-03-02T15:12:33Z","2019-01-11T12:37:18Z"
"","12590","Add support for type-based RuntimeBeanReference [SPR-7935]","**[Mark Fisher](https://jira.spring.io/secure/ViewProfile.jspa?name=mark.fisher)** opened **[SPR-7935](https://jira.spring.io/browse/SPR-7935?redirect=false)** and commented  The basic idea is to have a RuntimeBeanReference(Class type) alternative (in addition to the existing RuntimeBeanReference(String beanName)).  It would only work if there is exactly one bean within the context of that type (or maybe it could take into account 'primary' beans).  ---  **Issue Links:** - #12511 `@Primary` and primary attribute of  element are not considered for calls to getBean(Class)  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2011-02-03T13:53:27Z","2019-01-13T07:11:21Z"
"","12283","add Serializer/Deserializer strategy interfaces and default implementation [SPR-7627]","**[Mark Fisher](https://jira.spring.io/secure/ViewProfile.jspa?name=mark.fisher)** opened **[SPR-7627](https://jira.spring.io/browse/SPR-7627?redirect=false)** and commented  The code that has been developed in ""spring-commons-serializer"" should be moved into a new ""core.serializer"" package (and the ""commons"" project should be removed).  This will also include the SerializingConverter and DeserializingConverter ""adapter"" implementations of the Converter interface (for Object->byte[] and byte[]->Object respectively).   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c046419acd4d00d4ccf53b78cdabe0f99c9ec4ad","closed","type: enhancement,","spring-projects-issues","2010-10-07T14:58:45Z","2012-06-19T03:39:12Z"
"","11940","GenericConversionService canConvert() throws NPE for void.class [SPR-7281]","**[Mark Fisher](https://jira.spring.io/secure/ViewProfile.jspa?name=mark.fisher)** opened **[SPR-7281](https://jira.spring.io/browse/SPR-7281?redirect=false)** and commented   ---  **Affects:** 3.0.2  **Attachments:** - [GenericConversionServiceVoidTypeTests.java](https://jira.spring.io/secure/attachment/16700/GenericConversionServiceVoidTypeTests.java) (_1.24 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/379bc5a8a6acd37930f60d558ccc5273ad30fb0f","closed","in: core,","spring-projects-issues","2010-06-11T08:07:01Z","2012-06-19T03:44:16Z"
"","12545","AbstractJmsListeningContainer - No auto start [SPR-7889]","**[Mark Buyukisik](https://jira.spring.io/secure/ViewProfile.jspa?name=buyukim)** opened **[SPR-7889](https://jira.spring.io/browse/SPR-7889?redirect=false)** and commented  I am trying to upgrade from Spring 2.5.6 to Spring 3.0.5 and noticed that the AbstractJmsListeningContainer's initialize() method no longer checks the autoStartup flag.  Was this removal intentional?  The comments for the method suggest the start up should still happen in initialize() depending on the flag value.  I noticed this because I have an instance of DefaultMessageListenerContainer102 that assumes that the auto start will occur by default.    ---  **Affects:** 3.0.5","closed","status: invalid,","spring-projects-issues","2011-01-16T13:08:00Z","2019-01-12T05:31:11Z"
"","12418","Make resolved properties in PropertyPlaceholderConfigurer exposable [SPR-7762]","**[Marcel Overdijk](https://jira.spring.io/secure/ViewProfile.jspa?name=marceloverdijk)** opened **[SPR-7762](https://jira.spring.io/browse/SPR-7762?redirect=false)** and commented  Currently there is no way to directly access the properties resolved with a PropertyPlaceholderConfigurer. With 'directly access' I mean getting a Properties object.  This would be useful to make the properties exposable.  E.g. expose them to JSP application scope using a org.springframework.web.context.support.ServletContextAttributeExporter.  Quit often I have a property value in one the config files which is needed by tags executed on every JSP page.   ---  **Affects:** 3.0.5  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2010-11-23T14:17:47Z","2018-12-28T11:44:25Z"
"","12841","XML Marshalling classes require JDK 6 [SPR-8191]","**[Marcel Dullaart](https://jira.spring.io/secure/ViewProfile.jspa?name=legolas)** opened **[SPR-8191](https://jira.spring.io/browse/SPR-8191?redirect=false)** and commented  I tried using the org.springframework.oxm.xstream.XStreamMarshaller but failed due to a java.lang.NoClassDefFoundError: javax/xml/XMLStreamException. Examining the sources of the XStreamMarshaller revealed that it imports some classes from the javax.xml.stream package. Said package is not available om JDK 5.  Checking alternatives for XML marshalling showed that they all import classes from said package.   ---  **Affects:** 3.0.5","closed","status: invalid,","spring-projects-issues","2011-04-04T02:25:43Z","2019-01-12T05:30:37Z"
"","12503","spring-aws: StringIndexOutOfBoundsException when path is empty [SPR-7846]","**[Marc](https://jira.spring.io/secure/ViewProfile.jspa?name=mss)** opened **[SPR-7846](https://jira.spring.io/browse/SPR-7846?redirect=false)** and commented  (sorry but is there a better place for bugs in org.springframework.build.aws.maven?)  The plugin fails when a file is put on the root (= path is empty), see below. This happens when e.g. maven-bundle-plugin from apache felix updates the repository.xml.  Just fix SimpleStorageServiceWagon.getDestinationPath() (sorry, I have no git client on this machine):  private String getDestinationPath(String destination) { int index = destination.lastIndexOf('/'); if (index != -1) { return destination.substring(0, index); } else { return """"; } }  [INFO] LOCK s3://myawsbucket/release/repository.xml [INFO] ------------------------------------------------------------------------ [ERROR] BUILD ERROR [INFO] ------------------------------------------------------------------------ [INFO] Transfer failed  Embedded error: Transfer of resource repository.xml.lockfailed String index out of range: -1 [INFO] ------------------------------------------------------------------------ [DEBUG] Trace org.apache.maven.lifecycle.LifecycleExecutionException: Transfer failed at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:719) at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:556) at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:535) at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:387) at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:348) at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:180) at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:328) at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:138) at org.apache.maven.cli.MavenCli.main(MavenCli.java:362) at org.apache.maven.cli.compat.CompatibleMain.main(CompatibleMain.java:60) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315) at org.codehaus.classworlds.Launcher.launch(Launcher.java:255) at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430) at org.codehaus.classworlds.Launcher.main(Launcher.java:375) Caused by: org.apache.maven.plugin.MojoExecutionException: Transfer failed at org.apache.felix.obrplugin.RemoteFileManager.put(RemoteFileManager.java:220) at org.apache.felix.obrplugin.RemoteFileManager.lockFile(RemoteFileManager.java:294) at org.apache.felix.obrplugin.ObrDeploy.execute(ObrDeploy.java:214) at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:490) at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:694) ... 17 more Caused by: org.apache.maven.wagon.TransferFailedException: Transfer of resource repository.xml.lockfailed at org.springframework.aws.maven.AbstractWagon.put(AbstractWagon.java:277) at org.apache.felix.obrplugin.RemoteFileManager.put(RemoteFileManager.java:216) ... 21 more Caused by: java.lang.StringIndexOutOfBoundsException: String index out of range: -1 at java.lang.String.substring(String.java:1937) at org.springframework.aws.maven.SimpleStorageServiceWagon.getDestinationPath(SimpleStorageServiceWagon.java:191) at org.springframework.aws.maven.SimpleStorageServiceWagon.putResource(SimpleStorageServiceWagon.java:150) at org.springframework.aws.maven.AbstractWagon.put(AbstractWagon.java:262) ... 22 more   ---  1 votes, 1 watchers","closed","status: declined,","spring-projects-issues","2010-12-29T14:44:26Z","2019-01-12T16:26:21Z"
"","12575","@Async generates LazyInitializationExceptions when used in conjunction with Hibernate [SPR-7920]","**[marc schipperheyn](https://jira.spring.io/secure/ViewProfile.jspa?name=mschipperheyn)** opened **[SPR-7920](https://jira.spring.io/browse/SPR-7920?redirect=false)** and commented  When using `@Async` to execute a method asynchronously lazyinitialization exceptions occur on the entities used.      @Async     public void doSomething(Country country)     		throws Exception {     	for (Category cat : catMgr.getAll(country)) {     			doMore(cat);     	}     }          public void doMore(Category cat){     	List items = itemMgr.getItems(cat);     	for(Item item : items){     		item.getCity();//City is lazily associated => LazyInitializationException     	}     }    ---  **Affects:** 3.0.5  1 votes, 1 watchers","closed","in: core,","spring-projects-issues","2011-01-29T06:29:32Z","2019-01-12T16:26:14Z"
"","12501","jaxrs:server bean hides errors in entityManager initialization [SPR-7880]","**[marc schipperheyn](https://jira.spring.io/secure/ViewProfile.jspa?name=mschipperheyn)** opened **[SPR-7880](https://jira.spring.io/browse/SPR-7880?redirect=false)** and commented  If a problem occurs in the ""post-phase"" of entitymanager/sessionFactory initialization and a cxf jaxrs:server is configured, any exceptions occurring will be ""hidden"" from the user.  In order to reproduce, implement Hibernate Search and make sure that the java user does not have write permissions on the index directory.  The actual error that occurs will be  Caused by: org.hibernate.search.SearchException: Unable to create index directory: h:\java\projects\indexDir\nl.myproject.model.Offer for index nl.myproject.model.Offer at org.hibernate.search.store.DirectoryProviderHelper.makeSanityCheckedDirectory(DirectoryProviderHelper.java:252) at org.hibernate.search.store.DirectoryProviderHelper.getVerifiedIndexDir(DirectoryProviderHelper.java:236) at org.hibernate.search.store.FSDirectoryProvider.initialize(FSDirectoryProvider.java:62) at org.hibernate.search.store.DirectoryProviderFactory.createDirectoryProvider(DirectoryProviderFactory.java:166) ... 138 more  However, this error is never reported anywhere. What is actually reported is this:  SEVERE: Exception sending context initialized event to listener instance of class nl.myproject.webapp.MSA org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.apache.cxf.transport.servlet.ServletTransportFactory' defined in class path resource [META-INF/cxf/cxf-servlet.xml]: Error setting property values; nested exception is org.springframework.beans.PropertyBatchUpdateException; nested PropertyAccessExceptions (2) are: PropertyAccessException 1: org.springframework.beans.MethodInvocationException: Property 'bus' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.scheduling.quartz.SchedulerFactoryBean#0' defined in class path resource [applicationContext-schedule.xml]: Cannot resolve reference to bean 'facetReloadTrigger' while setting bean property 'triggers' with key [0]; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'facetReloadTrigger' defined in class path resource [applicationContext-schedule.xml]: Cannot resolve reference to bean 'facetReloadJob' while setting bean property 'jobDetail'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'facetReloadJob' defined in class path resource [applicationContext-schedule.xml]: Cannot resolve reference to bean 'searchManager' while setting bean property 'targetObject'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'searchManager': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire method: public void nl.myproject.service.impl.SearchManagerImpl.setSearchDao(nl.myproject.dao.SearchDao); nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'searchDao' defined in class path resource [applicationContext-dao.xml]: Cannot resolve reference to bean 'sessionFactory' while setting constructor argument; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sessionFactory' defined in URL [file:/H:/java/projects/mercados3/core/target/classes/applicationContext.xml]: Invocation of init method failed; nested exception is org.hibernate.HibernateException: could not init listeners PropertyAccessException 2: org.springframework.beans.MethodInvocationException: Property 'transportIds' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.scheduling.quartz.SchedulerFactoryBean#0' defined in class path resource [applicationContext-schedule.xml]: Cannot resolve reference to bean 'facetReloadTrigger' while setting bean property 'triggers' with key [0]; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'facetReloadTrigger' defined in class path resource [applicationContext-schedule.xml]: Cannot resolve reference to bean 'facetReloadJob' while setting bean property 'jobDetail'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'facetReloadJob' defined in class path resource [applicationContext-schedule.xml]: Cannot resolve reference to bean 'searchManager' while setting bean property 'targetObject'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'searchManager': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire method: public void nl.myproject.service.impl.SearchManagerImpl.setSearchDao(nl.myproject.dao.SearchDao); nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'searchDao' defined in class path resource [applicationContext-dao.xml]: Cannot resolve reference to bean 'sessionFactory' while setting constructor argument; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sessionFactory' defined in URL [file:/H:/java/projects/mercados3/core/target/classes/applicationContext.xml]: Invocation of init method failed; nested exception is org.hibernate.HibernateException: could not init listeners at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1361) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1086) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:517) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:291) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:288) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:580) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:895)  This does indicate the area of the problem but not the problem itself which makes it very hard to debug unless you exclude jaxrs: configuration from the configuration.  My jaxrs configuration is this  \  \                                         	     	     		     	     	     		     	       \  sessionFactory configuration:  \ \ \ \ \ 	hibernate.bytecode.provider=javaassist 	hibernate.connection.driver_class=${jdbc.driverClassName} 	hibernate.connection.is-connection-validation-required=true hibernate.dialect=${hibernate.dialect} hibernate.use_sql_comments=false hibernate.query.substitutions=true 	hibernate.generate_statistics=true hibernate.search.default.directory_provider=org.hibernate.search.store.FSDirectoryProvider hibernate.search.default.indexBase=${hibsearch.hibernate_index_dir} hibernate.search.reader.strategy = nl.myproject.dao.hibernate.search.MySharingBufferReaderProvider hibernate.search.autoregister_listeners=true hibernate.connection.autoReconnect=true 	hibernate.connection.autoReconnectForPools=true 	hibernate.show_sql=${hibernate.show_sql} 	    		hibernate.format_sql=${hibernate.format_sql} 	    		hibernate.cache.region.factory_class=net.sf.ehcache.hibernate.SingletonEhCacheRegionFactory hibernate.cache.provider_configuration_file_resource_path=/ehcache.xml  				hibernate.cache.use_query_cache=true hibernate.cache.use_second_level_cache=true hibernate.cache.region_prefix=msa \ \ 		\ 			\ 				\ 					\ 						\ 					\ 				\ 			\ 		\ 		\ 			\ 		\ \   ---  **Affects:** 3.0.5","closed","in: core,","spring-projects-issues","2011-01-13T03:02:19Z","2019-01-12T16:26:23Z"
"","12504","ValidationUtils: add support for Validation group interfaces [SPR-7847]","**[marc schipperheyn](https://jira.spring.io/secure/ViewProfile.jspa?name=mschipperheyn)** opened **[SPR-7847](https://jira.spring.io/browse/SPR-7847?redirect=false)** and commented  It would be convenient to have the ability to specify marker interface conforming to the validation JSR when calling ValidationUtils. e.g.  ValidationUtils.invokeValidator(validator,command,new Class[]{Save.class,Create.class},errors);  ---  **Affects:** 3.0.5  **Issue Links:** - #11039 Support for validation groups in `@Valid` used by spring MVC  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/207b2315eda924916e12cfc97c652d63a04c8053  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2010-12-29T16:18:22Z","2019-01-13T07:11:43Z"
"","12477","mvc:annotation-driven should register multipartResolver [SPR-7821]","**[marc schipperheyn](https://jira.spring.io/secure/ViewProfile.jspa?name=mschipperheyn)** opened **[SPR-7821](https://jira.spring.io/browse/SPR-7821?redirect=false)** and commented  From an auto-config point of view it's not logical to require the registration of separate multipartResolver when you are using mvc_annotation-driven.  Because if you don't register a multipartResolver, all your posted forms with multipart/form-data suddenly magically generate empty value objects.  I would also suggest that a default multipartResolver be registered regardless of mvc:annotation-driven use. The idea that ""some developers like it this way"" leading to pretty puzzling results for the 99% who don't (and forget to register one) is just plain weird.   ---  **Affects:** 3.0.5","closed","type: enhancement,","spring-projects-issues","2010-12-15T07:31:15Z","2015-09-22T18:55:04Z"
"","12349","org.springframework.beans.FatalBeanException argument type mismatch should identify argument [SPR-7693]","**[marc schipperheyn](https://jira.spring.io/secure/ViewProfile.jspa?name=mschipperheyn)** opened **[SPR-7693](https://jira.spring.io/browse/SPR-7693?redirect=false)** and commented  When you use BeanUtils to copy properties this error may occur. Unfortunately it doesn't identify the mismatched argument, requiring further digging. Identifying it would make sense  org.springframework.beans.FatalBeanException: Could not copy properties from source to target; nested exception is java.lang.IllegalArgumentException: argument type mismatch at org.springframework.beans.BeanUtils.copyProperties(BeanUtils.java:599) at org.springframework.beans.BeanUtils.copyProperties(BeanUtils.java:509)   ---  **Affects:** 3.0.4  2 votes, 2 watchers","closed","in: core,","spring-projects-issues","2010-10-28T03:30:51Z","2019-01-12T05:31:24Z"
"","12028","Binding exception multiple error codes chooses least specific as default [SPR-7370]","**[marc schipperheyn](https://jira.spring.io/secure/ViewProfile.jspa?name=mschipperheyn)** opened **[SPR-7370](https://jira.spring.io/browse/SPR-7370?redirect=false)** and commented  When a binding result generates for example a typeMismatch exception (e.g. enter string on Double field), the resulting FieldError will contain multiple codes going from very specific to general * typeMismatch.MyCommand.price * typeMismatch.price * typeMismatch.java.lang.Double * typeMismatch  The getCode function of the FieldError however, returns typeMismatch in stead of the more specific item if available. E.g. if a ValidationMessages file is available containing typeMismatch.java.lang.Double, you would want it to return that.    ---  **Affects:** 3.0.3  2 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2010-07-14T03:04:01Z","2015-09-22T17:34:30Z"
"","12006","No LocaleResolver for request level only [SPR-7347]","**[marc schipperheyn](https://jira.spring.io/secure/ViewProfile.jspa?name=mschipperheyn)** opened **[SPR-7347](https://jira.spring.io/browse/SPR-7347?redirect=false)** and commented  The Spring LocaleResolver according to the documentation Set the current locale to the given one. * `@param` request the request to be used for locale modification * `@param` response the response to be used for locale modification * `@param` locale the new locale, or \null\ to clear the locale  What you would expect is that it changes the locale of the request. However, what it in fact does is create a session and puts the new locale into the session variable.  This also means that it forces the creation of a session which I think is highly wasteful and undesirable, especially in the scenario ,problably common, where you use this for each in coming request.    ---  **Affects:** 3.0.3","closed","type: enhancement,","spring-projects-issues","2010-07-03T10:10:31Z","2010-07-11T21:58:17Z"
"","11995","Revisit AntPathMatcher's handling of patterns with file extensions [SPR-7336]","**[marc schipperheyn](https://jira.spring.io/secure/ViewProfile.jspa?name=mschipperheyn)** opened **[SPR-7336](https://jira.spring.io/browse/SPR-7336?redirect=false)** and commented  The AntPathMatchers in some cases prefers less specific matches over specific matches. This examples is from the case of WebContentInterceptor  ```xml    	 		1800 		1800 		-1 		-1 		-1 		-1 	  ```  The order doesn't matter. The issue occurs also if we put /**/ at the bottom  Example urlPath  ``` /en/offerform/step4.html?offerId=17 matches /**/offerform/**/*.html matches /**/offerform/*.html matches /**/ [shouldn't match at all AFAIC] matches /**/*.html ```  result: 1800. Should be -1  Example urlPath  ``` /en/cart/ matches /**/ matches /**/cart/ ```  result: -1 correct  It seems that the issue doesn't occur when the path ends with a / in stead of with an extension *.html   ---  **Affects:** 3.0.3  2 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2010-06-28T22:31:14Z","2021-12-09T12:16:44Z"
"","11993","HandlerExceptionResolvers should prevent caching of response [SPR-7334]","**[marc schipperheyn](https://jira.spring.io/secure/ViewProfile.jspa?name=mschipperheyn)** opened **[SPR-7334](https://jira.spring.io/browse/SPR-7334?redirect=false)** and commented  The WebContentInterceptor allows you to specify the cache seconds for a request. It processes them in the preHandle method.  However, the postHandle method is empty. It should check whether an error was thrown by the controller and prevent caching it there was.   ---  **Affects:** 3.0.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/df5e9b12115943c1fdc3151d8b6f0164bb1f8e5a","closed","type: enhancement,","spring-projects-issues","2010-06-28T22:42:21Z","2012-06-19T03:43:41Z"
"","12777","Correct SQL error codes for Sybase in sql-error-codes.xml [SPR-8125]","**[Mahesh Gadgil](https://jira.spring.io/secure/ViewProfile.jspa?name=maheshgadgil)** opened **[SPR-8125](https://jira.spring.io/browse/SPR-8125?redirect=false)** and commented  The following modifications are suggested for Sybase section of the sql-error-codes.xml. Ref. Sybase ASE 15.5 manual.  Drop following error codes from ""badSqlGrammarCodes"" section because they are not really bad grammer errors.  Error code - Actual error message from Sybase 207 -         non-existent column 208 -         object not found error 213 - column name or column values  don't match 257 - coversion of datatype is not allowed 512 - subquery returned more than one value  Add following codes to ""duplicatekeycodes"" section. 2615 - 'Attempt to insert duplicate row in table in clustered index' 2626 - Illegal attempt to insert duplicate key row in clustered index  Drop code 423 from ""dataIntegrityViolationCodes"" section as this is not a valid code in Sybase ASE.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/189cc262ad8a742e7d345b98adeeec68343349ca","closed","type: bug,","spring-projects-issues","2011-03-31T14:36:31Z","2012-06-19T03:39:07Z"
"","12724","@Configuration classes are not enhanced with @ComponentScan [SPR-8069]","**[Magnus Kvalheim](https://jira.spring.io/secure/ViewProfile.jspa?name=magnus.kvalheim)** opened **[SPR-8069](https://jira.spring.io/browse/SPR-8069?redirect=false)** and commented  I've tried to make use of spring's new features in 3.1 - namely `@Profile` and `@ComponentScan`  I have several profiles: test, dev and prod. (These creates embedded,basic or jndi datasources).  By using ComponentScan the classes annotated with `@Configuration` are not enhanced by cglib - so the `@bean` annotated methods are 'ignored' and not managed by container.  However - if I instead use `@Import` and explicitly specify the configuration classes - then they are properly enhanced.  Looking at documentation , 3.10.4 Defining bean metadata within components ""The `@Bean` methods in a Spring component are processed differently than their counterparts inside a Spring `@Configuration` class. The difference is that `@Component` classes are not enhanced with CGLIB to intercept the invocation of methods and fields. CGLIB proxying is the means by which invoking methods or fields within `@Configuration` classes `@Bean` methods create bean metadata references to collaborating objects. Methods are not invoked with normal Java semantics. In contrast, calling a method or field within a `@Component` classes `@Bean` method has standard Java semantics.""  I would expect `@Configuration` classes to be enhanced when scanned as they are when they are imported.  ---  **Affects:** 3.1 M1  **Issue Links:** - #12956 Allow recursive use of `@ComponentScan` (_**""is superseded by""**_)","closed","status: duplicate,","spring-projects-issues","2011-03-21T08:17:33Z","2019-01-13T07:10:42Z"
"","12638","@ExceptionHandler complains about unsupported argument for argument that is supported [SPR-7983]","**[Magnus Heino](https://jira.spring.io/secure/ViewProfile.jspa?name=magnus)** opened **[SPR-7983](https://jira.spring.io/browse/SPR-7983?redirect=false)** and commented  Works with 3.0.5.RELEASE.  Method:  `@ResponseStatus`(BAD_REQUEST) `@ExceptionHandler`({ ConstraintViolationException.class }) public void badRequest(final ConstraintViolationException e, final HttpServletResponse response) throws IOException {}  Exception:  java.lang.IllegalStateException: Unsupported argument [javax.validation.ConstraintViolationException] for `@ExceptionHandler` method: public void se.lantmateriet.dominium.web.ChangeTransactionController.badRequest(javax.validation.ConstraintViolationException,javax.servlet.http.HttpServletResponse) throws java.io.IOException at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver.resolveHandlerArguments(AnnotationMethodHandlerExceptionResolver.java:264) at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver.doResolveException(AnnotationMethodHandlerExceptionResolver.java:135) at org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:136) at org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:987) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:811) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:719) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:644) at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:549)  ---  **Affects:** 3.1 M1  **Issue Links:** - #13847 AnnoationMethodHandlerExceptionResolver identifies wrong exception handler  3 votes, 4 watchers","closed","in: core,","spring-projects-issues","2011-02-21T06:52:41Z","2019-01-11T16:19:03Z"
"","12592","Support for dependency injection and initialization of test instances using classpath scanning [SPR-7937]","**[Magnus Heino](https://jira.spring.io/secure/ViewProfile.jspa?name=magnus)** opened **[SPR-7937](https://jira.spring.io/browse/SPR-7937?redirect=false)** and commented  Maybe it's available already? I don't see anything about it though. This seems to work for me...  ``` public class AnnotationConfigApplicationContextLoader implements ContextLoader {      @Override     public String[] processLocations(final Class clazz, final String... locations) {         return locations;     }      @Override     public ApplicationContext loadContext(final String... locations) throws Exception {         return new AnnotationConfigApplicationContext(locations);     }  } ```  and then...  ``` @ContextConfiguration(locations=""se.lantmateriet.dominium"", loader=AnnotationConfigApplicationContextLoader.class) public class MyTests { ... } ```  ---  **Issue Links:** - #10852 Provide TestContext support for `@Configuration` classes","closed","type: enhancement,","spring-projects-issues","2011-02-04T00:26:09Z","2019-01-13T07:11:20Z"
"","12136","Setup of JMS message listener invoker failed for destination when upgrading from 3.0.2 to 3.0.4 [SPR-7478]","**[Magnus Heino](https://jira.spring.io/secure/ViewProfile.jspa?name=magnus)** opened **[SPR-7478](https://jira.spring.io/browse/SPR-7478?redirect=false)** and commented  Hi. I just upgraded from 3.0.2 to 3.0.4 and my log is flooded with WARN messages. The app still seems to work, but jms communication seems to take some extra time...  Looking at the code in the debugger, and the error message, a session seems to be null where expected not to. Is there a workaround, or something that I have missed in my config that is exposed now in 3.0.4, or is this a bug?  \ \ \ \ \ \ \ \ \ \ \ \ \ \ \    2010-08-20 12:00:44,312 [addressDefectTrackerContainer-2] DEBUG Initiating transaction rollback on listener exception at org.springframework.jms.listener.DefaultMessageListenerContainer.rollbackOnException(AbstractPollingMessageListenerContainer.java:388) java.lang.NullPointerException at org.springframework.jms.listener.AbstractMessageListenerContainer.commitIfNecessary(AbstractMessageListenerContainer.java:571) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:354) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:241) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1056) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1048) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:947) at java.lang.Thread.run(Thread.java:619) 2010-08-20 12:00:49,349 [addressDefectTrackerContainer-2] WARN Setup of JMS message listener invoker failed for destination 'Queue[LM.UTV_maghei.ORIGO.GEODATA.ADDRESS.DEFECTTRACKER]' - trying to recover. Cause: null at org.springframework.jms.listener.DefaultMessageListenerContainer.handleListenerSetupFailure(DefaultMessageListenerContainer.java:818) java.lang.NullPointerException at org.springframework.jms.listener.AbstractMessageListenerContainer.commitIfNecessary(AbstractMessageListenerContainer.java:571) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:354) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:241) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1056) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1048) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:947) at java.lang.Thread.run(Thread.java:619) 2010-08-20 12:00:49,350 [addressDefectTrackerContainer-2] INFO  Successfully refreshed JMS Connection at org.springframework.jms.listener.DefaultMessageListenerContainer.refreshConnectionUntilSuccessful(DefaultMessageListenerContainer.java:862)  ---  **Affects:** 3.0.4  **Issue Links:** - #12306 NPE in DefaultMessageListenerContainer while committing and no message was received (_**""is duplicated by""**_) - #12259 NPE in AbstractPollingMessageListenerContainer when committing transaction after message receive timeout (_**""is duplicated by""**_) - #12024 DefaultMessageListenerContainer transacted session race condition if no messages for a while when using shared/cached sessions  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3e5aca86d58f37ffd225c9e43e08296bdd12a638  4 votes, 9 watchers","closed","type: bug,","spring-projects-issues","2010-08-20T03:23:50Z","2019-01-11T14:09:55Z"
"","11894","CommonsClientHttpRequest (when using MultiThreadedHttpConnectionManager), doesn't release the connection after calling executeMethod [SPR-7235]","**[Machiel Groeneveld](https://jira.spring.io/secure/ViewProfile.jspa?name=machielg)** opened **[SPR-7235](https://jira.spring.io/browse/SPR-7235?redirect=false)** and commented  According to HttpClient documentation on threading: ""One main side effect of connection management is that connections must be manually released when no longer used""  When you don't release the connection, the connection isn't released and thus cannot be re-used by other threads. Thus the multi-threadedness doesn't work because the pool is always flooded.  The CommonsClientHttpRequest should call 'httpClient.releaseConnection' after running httpClient.executeMethod(httpMethod);  Documentation: http://hc.apache.org/httpclient-3.x/threading.html   ---  **Affects:** 3.0.2","closed","status: invalid,","spring-projects-issues","2010-05-25T02:09:52Z","2019-01-12T05:32:01Z"
"","12220","Inconsistent behaviour in AbstractApplicationEventMulticaster listener caching [SPR-7563]","**[Luke Taylor](https://jira.spring.io/secure/ViewProfile.jspa?name=luke)** opened **[SPR-7563](https://jira.spring.io/browse/SPR-7563?redirect=false)** and commented  I noticed recently that the concurrent login detection in the Spring Security ""tutorial"" sample is broken. On closer inspection, this is because the SessionRegistryImpl bean is not being notified of session-destruction events when a user logs out, so the user cannot log in again. SessionRegistryImpl is an ApplicationListener and stepping though the code in AbstractApplicationEventMulticaster.getApplicationListeners(ApplicationEvent event) seems to show inconsistent behaviour wrt the caching. The first time the method is called, the SessionRegistry bean name is found in defaultRetriever.applicationListenerBeans, is looked up in the BeanFactory and is returned in the collection of listeners. At the same time, a new ListenerRetriever instance is created and the bean name is added:  ``` BeanFactory beanFactory = getBeanFactory(); for (String listenerBeanName : this.defaultRetriever.applicationListenerBeans) {     ApplicationListener listener = beanFactory.getBean(listenerBeanName, ApplicationListener.class);     if (!allListeners.contains(listener) && supportsEvent(listener, eventType, sourceType)) {         retriever.applicationListenerBeans.add(listenerBeanName);         allListeners.add(listener);     } } ```  i.e. the bean name is added to the retriever, not the actual listener instance.  However, when the method is called again, the ListenerRetriever is invoked and returns an empty list. This is because the code related to retrieving the listener by name can never be invoked:  ``` if (!this.applicationListenerBeans.isEmpty()) {     BeanFactory beanFactory = getBeanFactory();     for (String listenerBeanName : this.applicationListenerBeans) {         ApplicationListener listener = beanFactory.getBean(listenerBeanName, ApplicationListener.class);         if (!this.preFiltered && !allListeners.contains(listener)) {             allListeners.add(listener);         }     } } ```  preFiltered is always true in this case, so as far as I can see the listeners will never be added list.   ---  **Affects:** 3.0.3, 3.0.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b7b2a259537a1e7a0862c2a5b1d29342bb310c99  1 votes, 4 watchers","closed","in: core,","spring-projects-issues","2010-09-15T14:05:48Z","2012-06-19T03:43:05Z"
"","12464","Impossible to use custom auto proxy creator and 'aop' or 'tx' namespaces. [SPR-7808]","**[Luke Daley](https://jira.spring.io/secure/ViewProfile.jspa?name=ldaley)** opened **[SPR-7808](https://jira.spring.io/browse/SPR-7808?redirect=false)** and commented  In the processing of diagnosing http://jira.codehaus.org/browse/GRAILS-6790 I discovered that Spring hard codes the potential auto proxy creators.  We need to use a custom auto proxy creator that is Groovy aware. The problem is in AopConfigUtils.registerOrEscalateApcAsRequired(). If an APC exists, this calls findPriorityForClass(String) with the name of the APC's class. In our case this is not a class that Spring knows about. The findPriorityForClass(String) method will throw an IllegalArgumentException if the given string is not in a predetermined list, which our class obviously isn't. It seems that rather than comparing classes, it should be checking to see if the APC has the desired capabilities.  This issue is effectively blocking http://jira.codehaus.org/browse/GRAILS-6790 because it means we cannot install our APC in a way that makes it accessible to  or  which is a subtle and frustrating bug for our users.   --- No further details from [SPR-7808](https://jira.spring.io/browse/SPR-7808?redirect=false)","closed","in: core,","spring-projects-issues","2010-12-09T23:39:19Z","2019-01-12T16:26:27Z"
"","12322","Cglib2AopProxy should be public and non-final [SPR-7666]","**[Luke Daley](https://jira.spring.io/secure/ViewProfile.jspa?name=ldaley)** opened **[SPR-7666](https://jira.spring.io/browse/SPR-7666?redirect=false)** and commented  The Cglib2AopProxy is marked as final which makes the createEnhancer() hook useless.  From my naive point of view, I can't see a valid reason for the class being final.   ---  **Affects:** 3.0.4  2 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2010-10-19T17:49:57Z","2018-12-28T10:37:28Z"
"","12574","Request mapping using @PathVariable doesn't work with URL-encoded values [SPR-7919]","**[Lukas Hämmerle](https://jira.spring.io/secure/ViewProfile.jspa?name=lhaemmerle)** opened **[SPR-7919](https://jira.spring.io/browse/SPR-7919?redirect=false)** and commented  I have defined the following request mapping: `@RequestMapping`(value = ""/services/{serviceKey}/vos"", method = RequestMethod.GET)  There is a problem if the value of {serviceKey} contains a ""/"", for example if {serviceKey}=http://example.com/foo This makes sense of course since the requestmapping cannot easily know that the / is part of a PathVariable.  However, I would have assumed that if the URL is URL-encoded as ""http%3A%2F%2Fexample.com%2Ffoo"" this should not be a problem. But apparently this values for some reason cannot mapped properly because it reports:  ""org.springframework.web.servlet.DispatcherServlet - DispatcherServlet with name 'dispatcher' processing GET request for [/core/services/http://example.com/foo/vos]""  If the already URL-encoded values is URL-encoded again to ""http%253A%252F%252Fexample.com%252Ffoo"", the mapping works:  ""org.springframework.web.servlet.DispatcherServlet - DispatcherServlet with name 'dispatcher' processing GET request for [/core/services/http%3A%2F%2Fexample.com%2Ffoo/vos]""  So, my question is whether there is a way how to make Spring accept the URL encoded value ""http%3A%2F%2Fexample.com%2Ffoo"" as PathVariable or whether this is a bug.  I tested this on Tomcat 6 and Jetty 7.  ---  **Affects:** 3.0.3  **Issue Links:** - #15727 URLs containing %2F (forward slash) are not mapped correctly to `@RequestMapping` methods  1 votes, 3 watchers","closed","status: duplicate,","spring-projects-issues","2011-01-28T08:55:55Z","2019-01-13T07:11:24Z"
"","12664","WebSphereUowTransactionManager does not reset transaction timeout for UOW_TYPE_GLOBAL_TRANSACTION to default value once set [SPR-8009]","**[Lukas Herman](https://jira.spring.io/secure/ViewProfile.jspa?name=lukas.herman)** opened **[SPR-8009](https://jira.spring.io/browse/SPR-8009?redirect=false)** and commented  The following code does not reflect the use case when Timer Manager executes bean method annotated with `@Transactional(timeout >= 0)`. This timeout value is propagated to next executed thread, causing timeout exceptions for `@Transactional()` methods relying on default timeout.  ``` if (definition.getTimeout() > TransactionDefinition.TIMEOUT_DEFAULT) {   this.uowManager.setUOWTimeout(uowType, definition.getTimeout()); } ```  A simple test case causes the '`defaultTransaction`' method fail with message: `WTRN0006W: Transaction 0000012E723....0000001 has timed out after 10 seconds.`  ```xml                                       ```  ``` public class TransactionTimeoutTest {     @Transactional(rollbackFor = Exception.class)     public void defaultTransaction() throws Exception {         Thread.sleep(11000);     }      @Transactional(timeout = 10, rollbackFor = Exception.class)     public void transactionTimeout10() throws Exception {         Thread.sleep(2000);     } } ```  According to the [WebSphere API](http://publib.boulder.ibm.com/infocenter/wasinfo/v6r0/index.jsp?topic=/com.ibm.websphere.javadoc.doc/public_html/spi/com/ibm/wsspi/uow/UOWManager.html), the correct code should be  ``` if (definition.getTimeout() > TransactionDefinition.TIMEOUT_DEFAULT) {   this.uowManager.setUOWTimeout(uowType, definition.getTimeout()); } else {   if (uowType == UOWManager.UOW_TYPE_GLOBAL_TRANSACTION) {     this.uowManager.setUOWTimeout(uowType, 0);   } } ```    ---  **Affects:** 3.1 M1  1 votes, 1 watchers","closed","status: declined,","spring-projects-issues","2011-03-01T09:14:27Z","2019-01-12T16:26:03Z"
"","12616","org.springframework.mail.MailMessage's setReplyTo method doesn't support multiple addresses [SPR-7961]","**[Luis Arias](https://jira.spring.io/secure/ViewProfile.jspa?name=kaaloo)** opened **[SPR-7961](https://jira.spring.io/browse/SPR-7961?redirect=false)** and commented  This is unfortunate because the underlying javax.mail.Message interface does support multiple replyTo addresses.  http://download.oracle.com/javaee/6/api/javax/mail/Message.html#setReplyTo(javax.mail.Address[])  Supporting this would be a very simple addition to the API as has been done for the setCc method.   ---  **Affects:** 3.0.5","closed","type: enhancement,","spring-projects-issues","2011-02-14T07:28:38Z","2020-06-11T16:02:05Z"
"","12625","Wrong path mapping combination between type-level and method-level @RequestMapping on @Controller [SPR-7970]","**[Ludovic Praud](https://jira.spring.io/secure/ViewProfile.jspa?name=ludovic.praud)** opened **[SPR-7970](https://jira.spring.io/browse/SPR-7970?redirect=false)** and commented  With the following code, the org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping fails to #determineUrlsForHandler.  ``` @Controller @RequestMapping(""/users"") public class DemoController {     @RequestMapping(value = ""/users"", method = GET)     public String getUsers()     {         return ""users/users"";     } } ```  The wanted URL mapping is `'/users/users'` but the generated path is `'/users'`. So when browsing `/users/users` we got HTTP 404.  The error is due to the use of `org.springframework.util.AntPathMatcher.combine(String, String)` to concatenate the type-level path and the method-level path that only return the method-level path which is not expected.  The combine method return the second method argument pattern2 when the pattern1 matches pattern2. I don't known if it is the `AntPathMatcher.combine(...)` method which is wrong or the use of it by `org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping.determineUrlsForHandler(String)`  ---  **Affects:** 3.0.5  **Issue Links:** - #13500 Path variable in class-level `@RequestMapping` not working properly  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9833a4c385205560921a714f64f5af7f797d7fdb","closed","type: bug,","spring-projects-issues","2011-02-17T10:32:28Z","2019-01-13T07:11:10Z"
"","12072","In http, put method can have request body but RequestParam Annotation doesn't work [SPR-7414]","**[Louis Huh](https://jira.spring.io/secure/ViewProfile.jspa?name=louishuh)** opened **[SPR-7414](https://jira.spring.io/browse/SPR-7414?redirect=false)** and commented      @RequestMapping(value=""/put"", method=RequestMethod.PUT)     @ResponseBody     public Result testPutParam(@RequestParam(""name"") String name) {     	     	Map m = new HashMap();     	     	m.put(""name"", name);     	m.put(""msisdn"", ""010-7464-5279"");     	     	return new SuccessResult(m);     }  RequestParam annotation doesn't work.  if I use RequestBody annotation instead, I can see request body  I call this api as below          HttpPut httpPut = new HttpPut(""http://localhost:8080/put"");         httpPut.addHeader(""Accept"", ""application/json"");     	     // Add data           List nameValuePairs = new ArrayList(1);           nameValuePairs.add(new BasicNameValuePair(""name"", ""louisHuh""));           httpPut.setEntity(new UrlEncodedFormEntity(nameValuePairs));       	     HttpClient client = new DefaultHttpClient();     HttpResponse response = client.execute(httpPut);    ---  **Reference URL:** http://forum.springsource.org/showthread.php?t=93045","closed","status: declined,","spring-projects-issues","2010-08-02T09:25:37Z","2019-01-12T16:37:45Z"
"","12471","Spring AOP documentation - add reference/example with Method Signature [SPR-7815]","**[Lou-ann Olpindo](https://jira.spring.io/secure/ViewProfile.jspa?name=lolpindo)** opened **[SPR-7815](https://jira.spring.io/browse/SPR-7815?redirect=false)** and commented  Request to add reference / samples of ProceedingPoint's getSignature() that can be case as MethodSignature  `@Around` Public Object someMethod(ProceedingJoinPoint point) {  MethodSignature signature = (MethodSignature) point.getSignature();  }  Although the spring docs about ProceedingPoint's getSignature with emphasis on checking for the java docs:  Access to the current JoinPoint Any advice method may declare as its first parameter, a parameter of type org.aspectj.lang.JoinPoint (please note that around advice is required to declare a first parameter of type ProceedingJoinPoint, which is a subclass of JoinPoint. The JoinPoint interface provides a number of useful methods such as getArgs()(returns the method arguments), getThis() (returns the proxy object), getTarget() (returns the target object), getSignature() (returns a description of the method that is being advised) and toString() (prints a useful description of the method being advised). Please do consult the Javadocs for full details.  It would be nice if we can add an example / reference on using MethodSignature.   --- No further details from [SPR-7815](https://jira.spring.io/browse/SPR-7815?redirect=false)","closed","in: core,","spring-projects-issues","2010-12-12T18:14:14Z","2018-12-28T10:35:32Z"
"","12149","Reduce footprint due to BeanDefinitions [SPR-7491]","**[Lou-ann Olpindo](https://jira.spring.io/secure/ViewProfile.jspa?name=lolpindo)** opened **[SPR-7491](https://jira.spring.io/browse/SPR-7491?redirect=false)** and commented  Opened on behalf of customer, Requesting for a change on implementing spring classes to reduce heap footprint on their BeanFactories, based on:  - combination of (a) the number of BeanDefinitions and (b) the size of an individual BeanDefinition instance - BeanDefinitions has a number of Maps and Sets that are instantiated but are never populated i.e RootBeanDefinition's externallyManagedConfigMembers, externallyManagedInitMethods, externallyManagedDestroyMethods which are used to process annotations. since not all use annotation, may of the collections are never populated and contribute to heap footprint  ---  **Issue Links:** - #15967 Reduce footprint due to RootBeanDefinition - #20740 Consistent and efficient access to BeanDefinition argument values  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e971ad56b60e45ebc8a3314f1365d08d5a07d83a  0 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2010-08-24T17:45:22Z","2019-01-11T14:08:59Z"
"","12728","SybaseMaxValueIncrementer causes db deadlock in multiple processes [SPR-8073]","**[Liu, Yinwei David](https://jira.spring.io/secure/ViewProfile.jspa?name=veaven)** opened **[SPR-8073](https://jira.spring.io/browse/SPR-8073?redirect=false)** and commented  In SybaseMaxValueIncrementer.getNextKey() method, it will call **Insert into SEQ** to insert new rows to the Seq table in order to get the sequence number, and then it will call **delete from "" + getIncrementerName() + "" where "" + getColumnName() + "" < "" + maxValue** to delete these rows from the SEQ table. Since this method has **synchronized**, so it won't cause any issue in single process application. However, since your application has multiple processes so it means two processes can concurrently insert the rows into SEQ table, however, when Spring call **Delete from SEQ**, then two processes gets db deadlock because they want to delete the data in another transaction of another process.  David   --- No further details from [SPR-8073](https://jira.spring.io/browse/SPR-8073?redirect=false)","closed","status: declined,","spring-projects-issues","2011-03-22T03:31:07Z","2019-01-12T16:25:55Z"
"","12723","Provide programmatic access to inner beans [SPR-8068]","**[Liu, Yinwei David](https://jira.spring.io/secure/ViewProfile.jspa?name=veaven)** opened **[SPR-8068](https://jira.spring.io/browse/SPR-8068?redirect=false)** and commented  Is it possible to add a new API to allow user access inner bean in the context?  According to the javadoc of ApplicationContext.getBeansOfType(Class type), it won't return the nested beans, **This method introspects top-level beans only. It does not check nested beans which might match the specified type as well.** Could you please let me know how we get nested bean from ApplicationContext?  e.g. we cannot get the bean b1 from application context by calling getBeansOfType.  ```                ```  ---  **Affects:** 3.0.5  **Issue Links:** - #12839 Revised support for bean definition visibility and overriding (_**""is depended on by""**_)  1 votes, 3 watchers","closed","status: bulk-closed,","spring-projects-issues","2011-03-20T21:54:28Z","2019-01-12T03:50:03Z"
"","12667","Dump the resolved Spring confing in the runtime via JMX [SPR-8012]","**[Liu, Yinwei David](https://jira.spring.io/secure/ViewProfile.jspa?name=veaven)** opened **[SPR-8012](https://jira.spring.io/browse/SPR-8012?redirect=false)** and commented  Hi,  Can we have a feature in Spring to dump the resolved Spring config in the runtime via JMX?  Currently, we can use properties substitution in the Spring config (SpEL, properties file), so the common issue is that we cannot know the real value of the runtime config file, because these data is getting in the runtime and does not exist in the config file. So, we would need the ability to dump the real config in the runtime.  E.g. we could have one bean below, we won't know the real hostPort because it comes from env variable. \ \ \ moreover, we could use SpEL, or other static method to retrieve config info from external system and use them in the config file: \ \ \  According to both exmaple, it is different for a developer to know what the real hostPort is, so it would be very useful if Spring can dump the bean info or config in the runtime via JMX.  Thanks, David   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/111fb71fe1ccb8d3a5e06e61461edd87d6d025f4  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2011-03-02T01:36:30Z","2015-09-22T18:20:31Z"
"","12665","JMX for ThreadPoolTaskExecutor [SPR-8010]","**[Liu, Yinwei David](https://jira.spring.io/secure/ViewProfile.jspa?name=veaven)** opened **[SPR-8010](https://jira.spring.io/browse/SPR-8010?redirect=false)** and commented  Hi,  Could we have a JMX support for the thread pool Executor classes? such as: org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.  Normally, we will configure ThreadPoolTaskExecutor in spring config and use it, however, there are some case that we want to change the pool size via JMX in the runtime. So, it will be very useful to have JMX to control ThreadPoolTaskExecutor.  Thanks, David   --- No further details from [SPR-8010](https://jira.spring.io/browse/SPR-8010?redirect=false)","closed","type: enhancement,","spring-projects-issues","2011-03-01T23:13:02Z","2018-12-28T10:56:12Z"
"","12163","JdbcTemplate failed to get data from StoredProc by using column alias [SPR-7506]","**[Liu, Yinwei David](https://jira.spring.io/secure/ViewProfile.jspa?name=veaven)** opened **[SPR-7506](https://jira.spring.io/browse/SPR-7506?redirect=false)** and commented  Hi,  Here is a bug in JdbcTemplate which cannot get data from StoredProc by using column alias.  To reproduce the issue: #1 Create a sybase stored proc: CREATE PROCEDURE dbo.sp_test_column_alias AS BEGIN select id as test_id,  title as test_name from movies         END  #2 Run java code below String sql = ""sp_test_column_alias""; ResultSet rs = ((ResultSetWrappingSqlRowSet) jdbc.queryForRowSet(sql)).getResultSet(); rs.next(); System.out.println(rs.getString(""test_name""));  #3 we will get an exception **Invalid column name** , it should use column label to get data instead of column name according to the method: ResultSet.getString(String columnLabel)  The issue is that Spring JDBCTemplate internal uses com.sun.rowset.CachedRowSetImpl to hold all data from a sp query, however, it fail to use label to get data.  David   ---  **Affects:** 3.0.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1247d2085b9e3a9bfa955752bad6866d917e6bed, https://github.com/spring-projects/spring-framework/commit/90636f66a85ff39c2b22676c45e9b0b79419aa93","closed","in: core,","spring-projects-issues","2010-08-29T21:51:18Z","2012-06-19T03:42:51Z"
"","12162","JaxWsPortClientInterceptor gets an incorrect PortName [SPR-7505]","**[Liu, Yinwei David](https://jira.spring.io/secure/ViewProfile.jspa?name=veaven)** opened **[SPR-7505](https://jira.spring.io/browse/SPR-7505?redirect=false)** and commented  Hi, It looks like a bug in JaxWsPortClientInterceptor that it uses the name of `@WebServiceClient` as the client PortName. In Spring 3.0.4, Spring tried to get some webservice info from `@WebService` annotation, please see the jira https://jira.springframework.org/browse/SPR-7412 . however, it should not get Port name from `@WebService` because one webservice could have multiple ports, and every ports have its own port name. Also, JaxWsPortClientInterceptor should not assume that the default PortName is the name of `@WebService` .  e.g. we could have one webservice client class below, it does not have the portname in `@WebServiceClient`. In this case, JaxWsPortClientInterceptor will use the name of WebServiceClient as its portname, and it leads to error.  `@WebServiceClient`(name = ""CalculatorService"", targetNamespace = ""http://xml.ms.com/ns/msjava/cxfutils/examples/calculator"") public class CalculatorService extends Service {  `@WebEndpoint`(name = ""CalculatorHTTPPort"") public Calculator getCalculatorHTTPPort() {...}  `@WebEndpoint`(name = ""CalculatorTCPPort"") public Calculator getCalculatorTCPPort() {...}  I think JaxWsPortClientInterceptor should not get Port name from its annotation, and it should not pick up servicename and targetNamespace from annotation. Also, the portname will be dynamically generated by the underlying webservice framework when portname is null and it can be decided at runtime. Could you please fix it? thanks.   ---  **Affects:** 3.0.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/66a5bb7c22ad08c892b9f43f83cb3d7b326159cf","closed","in: core,","spring-projects-issues","2010-08-29T20:31:03Z","2012-06-19T03:43:57Z"
"","11967","Provide high-level cache API in Spring container [SPR-7308]","**[Liu, Yinwei David](https://jira.spring.io/secure/ViewProfile.jspa?name=veaven)** opened **[SPR-7308](https://jira.spring.io/browse/SPR-7308?redirect=false)** and commented  Hi, Do you have any plan to provide a high level cache API in Spring container? such as TransacationManager which manages different transaction resource.  Currently, we have a lot different cache implementations, e.g. EHCache, H2, and so on. Each cache needs a different api to get data from the underlying cache. It is a kind of barrier to disallow people easily switch from one cache to another cache, we always need a extra layer to decouple the our code with the actual cache.  I think it would be great if Spring can provide a high level cache api which can allow people easily choose a underlying cache.  Please let me know your thoughts, thanks.  David  ---  **Affects:** 3.0.3  **Issue Links:** - #10491 HTTP cache and conditional requests support in RestTemplate  6 votes, 11 watchers","closed","type: enhancement,","spring-projects-issues","2010-06-21T12:44:47Z","2019-01-11T14:22:03Z"
"","11926","Error in JavaConfig and AspsectJ [SPR-7267]","**[Liu, Yinwei David](https://jira.spring.io/secure/ViewProfile.jspa?name=veaven)** opened **[SPR-7267](https://jira.spring.io/browse/SPR-7267?redirect=false)** and commented  Hi,  I have one simple example which uses javaconfig + Aspectj runtime wave. However, I always get a ClassNotFoundException exception when spring is getting started. I am not sure where the exception comes from, is it due to the incompatibility between Javaconfig and Aspectj?  Exception: java.lang.ClassNotFoundException: tx.BundleJavaConfig$$EnhancerByCGLIB$$e9005139 not found - unable to determine URL at org.aspectj.apache.bcel.util.ClassLoaderRepository.loadClass(ClassLoaderRepository.java:292) ~[aspectjweaver.jar:1.6.8]  Example: please see attached files.  Thanks.   ---  **Affects:** 3.0.2  **Attachments:** - [console.txt](https://jira.spring.io/secure/attachment/16639/console.txt) (_8.48 kB_) - [transactional_tests.zip](https://jira.spring.io/secure/attachment/16633/transactional_tests.zip) (_19.93 kB_) - [transactional_tests-cbeams.zip](https://jira.spring.io/secure/attachment/16638/transactional_tests-cbeams.zip) (_16.17 kB_)","closed","in: core,","spring-projects-issues","2010-06-07T14:04:16Z","2019-01-12T05:31:52Z"
"","11925","Spring failed to start Circular SmartLifecycle dependencies [SPR-7266]","**[Liu, Yinwei David](https://jira.spring.io/secure/ViewProfile.jspa?name=veaven)** opened **[SPR-7266](https://jira.spring.io/browse/SPR-7266?redirect=false)** and commented  If we have two beans Bar and Foo. Both beans implement SmartLifecycle, and they reference to each other. Spring will not be able to get started because it repetitively calls itself in DefaultLifecycleProcessor to start itself.  public class FooImpl implements Foo, SmartLifecycle{ Bar _bar; public int getPhase(){  return 1; } ... } public class BarImpl implements Bar, SmartLifecycle { Foo _foo; public int getPhase() { return 2; } ... }  What I expected is that the bean FooImpl start first, and then Bar gets started.  However, Spring is not able to resolve it so that we get exception StactkOverflow. I tried to override DefaultLifecycleProcessor to make it not start bean twice, then spring can successfully get started.  Can we fix this bug in DefaultLifecycleProcessor to be able to resolve the circular reference? thanks   ---  **Affects:** 3.0.2  **Attachments:** - [packages.zip](https://jira.spring.io/secure/attachment/16632/packages.zip) (_5.53 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/65622bd546f9b1d62e7860a925530c54fcccef72","closed","in: core,","spring-projects-issues","2010-06-07T13:46:32Z","2012-06-19T03:42:57Z"
"","12159","Memory leak in serializable bean factory management [SPR-7502]","**[Leo Liang](https://jira.spring.io/secure/ViewProfile.jspa?name=leoliang)** opened **[SPR-7502](https://jira.spring.io/browse/SPR-7502?redirect=false)** and commented  Since Spring3.0.0, Spring adds a static ConcurrentHashMap named serializableFactories in DefaultListableBeanFactory to support the BeanFactory's serialization. But we found that when we create more and more bean factories in our application, there seems a memory leak. After examined the DefaultListableBeanFactory's source, We found that spring uses a WeakReference to reference the serializableFactories' value. But actually, the segement could not be garbage collected even its weak reference value has been garbage collected.   ---  **Affects:** 3.0.1  **Attachments:** - [mylyn-context.zip](https://jira.spring.io/secure/attachment/17039/mylyn-context.zip) (_207.18 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b72cca54030d380ab70af0eed60d82074e2e3522","closed","in: core,","spring-projects-issues","2010-08-27T00:34:05Z","2015-02-03T21:48:02Z"
"","11987","Cache result of AopUtils.canApply [SPR-7328]","**[Leigh Anderson](https://jira.spring.io/secure/ViewProfile.jspa?name=bravesirrobin)** opened **[SPR-7328](https://jira.spring.io/browse/SPR-7328?redirect=false)** and commented  Profiling of our struts2/Spring 2.5.6 App in Tomcat showed AopUtils.canApply as being a hotspot in terms of CPU usage -- we make extensive use of AOP with annotations. The attached patch helps ameliorate this.  Patch is against SVN trunk as of 28/06/10.  ---  **Affects:** 2.5.6  **Attachments:** - [aop.patch](https://jira.spring.io/secure/attachment/16798/aop.patch) (_3.62 kB_)  **Issue Links:** - #12720 AsyncAnnotationBeanPostProcessor should cache AopUtils.canApply results, it's unusable in projects with a huge number of prototype beans otherwise  2 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2010-06-27T19:49:45Z","2019-01-11T14:20:52Z"
"","12467","Automatically detect when the context is dirtied in the TestContext framework [SPR-7811]","**[Leif Hanack](https://jira.spring.io/secure/ViewProfile.jspa?name=strug)** opened **[SPR-7811](https://jira.spring.io/browse/SPR-7811?redirect=false)** and commented  We have several hundred TestNG tests that are using either AbstractTestNGSpringContextTests or AbstractTransactionalTestNGSpringContextTests. We encounter one-offs telling us that e.g. a transaction is missing. With different runs different tests fail. Finding these tests that are the root cause is not easy. If a context is dirtied the next test that is using this dirty context can be far away.  Therefore it would be cool to have a kind of DirtiesContextDetector or s.th. similar to be part of Spring. For a resource that is injected into the test (`@Resource`) it should track if a setter (annotated with `@Required`) of that resource is called. If so a warning or error should be logged.  What do you think?  Regards, Leif   ---  **Affects:** 3.0.5  **Reference URL:** http://forum.springsource.org/showthread.php?t=99037","closed","type: enhancement,","spring-projects-issues","2010-12-10T05:58:35Z","2014-07-20T11:40:12Z"
"","12033","Documentation typo [SPR-7375]","**[Laurel Williams](https://jira.spring.io/secure/ViewProfile.jspa?name=laurelwilliams)** opened **[SPR-7375](https://jira.spring.io/browse/SPR-7375?redirect=false)** and commented  A very small typo in section ""3.9 Annotation-based container configuration""  In the sidebar title ""Are annotations better then XML for configuring Spring?"" correct the typo by changing ""then""  to  ""than"".  ---  **Affects:** 3.0.3  **Issue Links:** - #11991 Minor typo (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2010-07-15T00:19:46Z","2019-01-12T16:49:36Z"
"","12321","autowire-candidate=""false"" for scanned components [SPR-7665]","**[Laran Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=laranevans)** opened **[SPR-7665](https://jira.spring.io/browse/SPR-7665?redirect=false)** and commented  When I subclass a bean I run into problems because Spring tells me that I have two beans of type IParent.  What I'm trying to do is extend a base system which has a perfectly good Impl class. I need to extend the Impl to add additional functionality. I need to be sure that my subclass is wired in. Both the parent and child however are perfectly good impls.  I'm trying to ensure that the child is always wired in by setting autowire-candidate=""false"" on the parent in the Spring XML context config. This doesn't seem to be taking however. It still seems to have the parent in the pool of autowireable beans.  Here's my code:  [CODE] package com.foo; `@Component` public class Parent implements IParent {  } [/CODE] [CODE] package com.foo; `@Component` public class Child extends Parent { } [/CODE] [CODE] // baseContext.xml   [/CODE] [CODE] // extendedContext.xml \ [/CODE]   ---  **Affects:** 3.0.4","closed","type: enhancement,","spring-projects-issues","2010-10-19T13:46:20Z","2018-12-28T10:55:53Z"
"","12356","Add configurable SQL statement delimiter to ResourceDatabasePopulator and JDBC XML namespace. [SPR-7700]","**[Kyrill Alyoshin](https://jira.spring.io/secure/ViewProfile.jspa?name=kyrill007)** opened **[SPR-7700](https://jira.spring.io/browse/SPR-7700?redirect=false)** and commented  It sure would be nice if org.springframework.jdbc.datasource.init.ResourceDatabasePopulator provided a way to configure its SQL statement delimiter. Currently it is hard-coded to ';'. It works great for simple statements, but what if need to load a stored-procedure where ';' cannot be stripped out?  Also, the delimiter configuration should probably be extended to the XML namespace too, as in:  ```         ```  ---  **Affects:** 3.0.4  **Issue Links:** - #13459 Support per-script statement separator configuration for SQL scripts (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2010-10-29T12:38:23Z","2019-01-11T15:31:07Z"
"","12332","@Qualifier fails to resolve Lists containing enumerated types [SPR-7676]","**[Kyrill Alyoshin](https://jira.spring.io/secure/ViewProfile.jspa?name=kyrill007)** opened **[SPR-7676](https://jira.spring.io/browse/SPR-7676?redirect=false)** and commented  So, let's say we have an enumerated list declared as the following in my Spring XML:   \ONE\ \THREE\   When I am injecting it in a service bean like this:  `@Autowired` `@Qualifier`(""myList"") public void setEnumList(List\ enumList) { this.enumList = enumList; }  I am getting the following container startup exception:  org.springframework.beans.factory.NoSuchBeanDefinitionException: No matching bean of type [spring.BasicEnum] found for dependency [collection of spring.BasicEnum]: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {}  I've attached a test case micro project for this.  If `@Qualifier` is not used, and the list is injected through XML, then everything works as expected.  ---  **Affects:** 3.0.4  **Attachments:** - [spring_enum_list_with_qualifier.zip](https://jira.spring.io/secure/attachment/17251/spring_enum_list_with_qualifier.zip) (_1.68 MB_)  **Issue Links:** - #13164 Support injection of collection-typed beans using `@Autowired`+`@Qualifier` or `@Inject`+`@Named`  (_**""is superseded by""**_)","closed","in: core,","spring-projects-issues","2010-10-22T13:03:15Z","2019-01-13T07:12:35Z"
"","12282","Auto proxying does not seem to work for interfaces with ""generices"" parameter types [SPR-7626]","**[Kyrill Alyoshin](https://jira.spring.io/secure/ViewProfile.jspa?name=kyrill007)** opened **[SPR-7626](https://jira.spring.io/browse/SPR-7626?redirect=false)** and commented  So, let's say we have an interface:  ``` public CrudOperations {  void create(T entity); } ```  and an inheriting typed interface  ``` public VendorService extends CrudOperation { } ```  and an implementation Hibernate service  ``` public VendorServiceImpl implements VendorService {  public void create(Vendor vendor) {    //...get Hibernate session    session.save(vendor);  } } ```  'create' method in VSI will not be transactionally wired using standard Spring configuration mechanisms. (I suspect that the compile-generated bridge method is getting wired (i.e. public void create(Object vendor)).) I do get Session not thread-bound exception in my case.  The workaround is, of course, to manually start/join the transaction using TransactionTemplate inside the 'create' method. But it is nonetheless a curious bug.   ---  **Affects:** 3.0.4","closed","in: core,","spring-projects-issues","2010-10-07T12:23:06Z","2019-01-11T14:32:46Z"
"","12036","CronSequenceGenerator causes StackOverFlowError [SPR-7378]","**[Kyrill Alyoshin](https://jira.spring.io/secure/ViewProfile.jspa?name=kyrill007)** opened **[SPR-7378](https://jira.spring.io/browse/SPR-7378?redirect=false)** and commented  Interesting... '0 0 0 25 12 ?' midnight on Christmas days causes StackOverFlowError on container startup.  Here is the config:      I would have expected a different Christmas present. :-) :-) :-)   ---  **Affects:** 3.0.2","closed","in: core,","spring-projects-issues","2010-07-15T09:07:36Z","2019-01-12T05:31:42Z"
"","12624","LinkedCaseInsensitiveMap does not correctly implement putAll() [SPR-7969]","**[Kristian Andersen](https://jira.spring.io/secure/ViewProfile.jspa?name=kriand)** opened **[SPR-7969](https://jira.spring.io/browse/SPR-7969?redirect=false)** and commented  `org.springframework.util.LinkedCaseInsensitiveMap` does not override the `putAll()` method.  The inherited `java.util.HashMap.putAll()` calls an internal method `putImpl()` and this leads to inconsistent data in `LinkedCaseInsensitiveMap.` Entries added by calling `LinkedCaseInsensitiveMap.putAll()` can not be retrieved by `LinkedCaseInsensitiveMap.get()`  The attached testcase demonstrates this behaviour.  ---  **Affects:** 3.0.5, 3.1 RC1  **Attachments:** - [LinkedCaseInsensitiveMapTest.java](https://jira.spring.io/secure/attachment/17620/LinkedCaseInsensitiveMapTest.java) (_604 bytes_)  **Issue Links:** - #21465 LinkedCaseInsensitiveMap should explicitly implement putIfAbsent and computeIfAbsent  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b391629de100c4ba09d313c679cb9280a4a2a7a1, https://github.com/spring-projects/spring-framework/commit/5856db6f7259f92183668148cf643652814e9673","closed","in: core,","spring-projects-issues","2011-02-17T02:33:05Z","2019-01-11T16:14:49Z"
"","12318","Add multipart request support to portlet resource requests [SPR-7662]","**[korey shronts](https://jira.spring.io/secure/ViewProfile.jspa?name=kshronts)** opened **[SPR-7662](https://jira.spring.io/browse/SPR-7662?redirect=false)** and commented  Can multipart request support be added to portlet ResourceRequest processing?  Current implementation of DispatcherPortlet only processes multipart requests for ActionRequest(s).  ---  **Affects:** 3.0.4  **Issue Links:** - #12565 Handling Multipart request that is not an Action request ? (_**""is duplicated by""**_)  3 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2010-10-18T08:31:59Z","2019-01-11T14:37:29Z"
"","12300","mapping a parameter with a Dot [SPR-7644]","**[khigo](https://jira.spring.io/secure/ViewProfile.jspa?name=khaigo)** opened **[SPR-7644](https://jira.spring.io/browse/SPR-7644?redirect=false)** and commented  Hello, I want to map a request to a controller with a method that taks in parameter an attribute having a Dot.  exemple of 2 url url1: /mycontexte/product/12 url2: /mycontexte/product/12.1  both the 2 urls are intercepted by this method:  `@RequestMapping`(value = { ""/product/{productIdentifier}"" }, method = RequestMethod.GET) protected ModelAndView getDetailProductPage(`@PathVariable` String productIdentifier) { // do somthing here }  the probleme with the second url is that the value of productIdentifier is 12.1  So how can I map the request to handle the hole value of 12 and not 12.1  Thanks in advance   ---  **Affects:** 3.0 GA","closed","status: invalid,","spring-projects-issues","2010-10-11T12:21:20Z","2019-01-12T05:31:28Z"
"","12226","TypeDescriptor unable to dynamically resolve the type of nested collections [SPR-7569]","**[Kevin Wright](https://jira.spring.io/secure/ViewProfile.jspa?name=kev.lee.wright)** opened **[SPR-7569](https://jira.spring.io/browse/SPR-7569?redirect=false)** and commented  Then a methodParam of field is unavailable, TypeDescriptor will resolve the type of a collection by inspecting the first non-null value.  The approach doesn't work when the TypeDescriptor in question has been returned from the getElementDescriptor of another TypeDescriptor.  This is because the element examined to determine the parameter of the outer collection will not be used to populate the value field of the TypeDescriptor representing the inner collection.  A List will therefore be resolved as a List Deeper nestings, such as List will also be resolved as a List    ---  **Affects:** 3.0.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a0fead18801f292989e8e1373d585d091869fd0f, https://github.com/spring-projects/spring-framework/commit/ebe8052d559ef5fac8a93820cf5847a8de5e9e43  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2010-09-18T09:53:54Z","2015-09-22T17:34:30Z"
"","12219","TypeDescriptor.forElementType() is broken for nested collections [SPR-7562]","**[Kevin Wright](https://jira.spring.io/secure/ViewProfile.jspa?name=kev.lee.wright)** opened **[SPR-7562](https://jira.spring.io/browse/SPR-7562?redirect=false)** and commented  The start of forElementType() is defined as:  if (getType().equals(elementType)) { return this; }  Unfortunately, this fails when the TypeDescriptor represents a List When calling getElementType(), the call stack will be getElementType() -> getElementTypeDescriptor() -> forElementType() at which point, the elementType field will still be null.  The equality check will therefore see that List\ == List\, and so the TypeDescriptor will be returned as its own element descriptor. This leads to a recursive definition, where the descriptor now represents a List","closed","status: duplicate,","spring-projects-issues","2010-09-15T10:00:15Z","2019-01-12T16:49:34Z"
"","12571","util:map support for key-types other than String not working [SPR-7916]","**[Kevin Burke](https://jira.spring.io/secure/ViewProfile.jspa?name=kdburke)** opened **[SPR-7916](https://jira.spring.io/browse/SPR-7916?redirect=false)** and commented  When attempting to inject a bean created via the __ tag into a service, an error results when the key type of the map is any thing other than _java.lang.String_.  I have specified the key type using the key-type attribute of the tag, but to no avail.  The underlying Map that is required is _Map_, but according to the _DefaultListableBeanFactory_, a hard check  of _String.isAssignableFrom(keyType)_ is performed (line 753).  ``` else if (Map.class.isAssignableFrom(type) && type.isInterface()) {                   Class keyType = descriptor.getMapKeyType();                   if (keyType == null || !String.class.isAssignableFrom(keyType)) {                         if (descriptor.isRequired()) {                               throw new FatalBeanException(""Key type ["" + keyType + ""] of map ["" + type.getName() +                                           ""] must be assignable to [java.lang.String]""); ```  ---  **Affects:** 3.0.3  **Reference URL:** http://forum.springsource.org/showthread.php?p=342130#post342130  **Issue Links:** - #14040 Session not flushed with Hibernate 4.1.3, JTA and Spring transaction management integration (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2011-01-27T09:38:45Z","2019-01-12T16:49:14Z"
"","12717","BindException method signatures still use raw types [SPR-8062]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-8062](https://jira.spring.io/browse/SPR-8062?redirect=false)** and commented  The method signature of `BindingException` (for example the `getFieldErrors()` method) still refers to raw collection types such as `List`. These methods just delegate to `BindingResult`, which uses the correct type parameters.   ---  **Affects:** 3.0.5  **Attachments:** - [mylyn-context.zip](https://jira.spring.io/secure/attachment/17743/mylyn-context.zip) (_48.07 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f4e1cde33b077b1268cc5cae0c18c4b706653d25","closed","type: enhancement,","spring-projects-issues","2011-03-17T08:45:29Z","2012-06-19T03:39:45Z"
"","12553","Make HandlerInterceptor play nice with @ResponseBody [SPR-7897]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-7897](https://jira.spring.io/browse/SPR-7897?redirect=false)** and commented  Currently, if you try and use `@ResponseBody` and `HandlerInterceptor` together, you don't get the expected behaviour.  Specifically, the `@ResponseBody` is written and committed by `ServletHandlerMethodInvoker` before `HandlerInterceptor.postHandle` is called. I would have expected the order to be similar to if I had omitted the `@ResponseBody` and used a `MarshallingView` instead, i.e.  * `HandlerInterceptor.preHandle` * (handler is invoked) * `HandlerInterceptor.postHandle` * (response is written) * `HandlerInterceptor.afterCompletion`  With `@ResponseBody`, the 3rd and 4th steps are reversed.  Looking at the code, this wouldn't seem an easy refactoring to make, but could it be done?  ---  **Affects:** 3.0.5  **Issue Links:** - #20595 StringHttpMessageConverter flush out response immediately before execute posthandler - #15486 Provide better intercepting model for controllers returning `@ResponseBody` (_**""is superseded by""**_)  2 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2011-01-19T05:50:02Z","2019-01-13T07:11:32Z"
"","12517","ModelAndViewResolver still refers to raw Class type [SPR-7860]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-7860](https://jira.spring.io/browse/SPR-7860?redirect=false)** and commented  The `resolveModelAndView` method of `ModelAndViewResolver` still refers to the raw `Class` type, rather than `Class`  ---  **Affects:** 3.0.5  **Issue Links:** - #15691 Fix remaining compiler warnings and fail build if they return  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cfd16f9c943ed978d44409383b330c58e8f89a10","closed","type: enhancement,","spring-projects-issues","2011-01-05T03:12:51Z","2019-01-11T15:23:10Z"
"","12447","Enhance AnnotationConfigApplicationContext constructors to permit a parent context [SPR-7791]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-7791](https://jira.spring.io/browse/SPR-7791?redirect=false)** and commented  `AnnotationConfigApplicationContext` does not provide any constructors that accept a parent `ApplicationContext`. Furthermore, since `refresh()` is called from the `Class...` constructor, calling `setParent()` is of no help, since everything has been initialized already.  Please add an appropriately overloaded constructor to `AnnotationConfigApplicationContext`   ---  **Affects:** 3.0.5  8 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2010-12-06T01:53:29Z","2014-05-19T05:30:50Z"
"","12444","Chapter 7.2.1 of the ref manual still refers to the Spring-with-dependencies distribution [SPR-7788]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-7788](https://jira.spring.io/browse/SPR-7788?redirect=false)** and commented  Chapter 7.2.1 (Enabling `@AspectJ` Support) says:  ""These libraries are available in the 'lib' directory of an AspectJ installation (version 1.5.1 or later required), or in the 'lib/aspectj' directory of the Spring-with-dependencies distribution.""  This needs to be updated to refer to the current distribution names.  ---  **Issue Links:** - #11241 Add Gradle task for building zip with dependencies (_**""depends on""**_) - #13537 Documentation update regarding aspectjrt and aspectjweaver jars usage (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5fe08040178d3e216998c22b4ad50528f7d981c2","closed","type: documentation,","spring-projects-issues","2010-12-05T06:16:29Z","2019-01-11T15:39:31Z"
"","12389","AbstractApplicationContext should clear beanFactoryPostProcessors on close() [SPR-7733]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-7733](https://jira.spring.io/browse/SPR-7733?redirect=false)** and commented  It seems to be common practice in the Spring core to explicitly clear references to beans when the bean factory/context is shutdown, to prevent memory leaks due to misbehaving containers.  However, `AbstractApplicationContext` contains a `beanFactoryPostProcessors` list, and this list is not cleared on context shutdown. This list could contain custom beans, and so you can end up with large reachable bean graphs after the context has been shutdown.  Can this list be closed when `AbstractApplicationContext.close()` is called?   ---  **Affects:** 3.0.5  2 votes, 4 watchers","closed","in: core,","spring-projects-issues","2010-11-10T07:22:09Z","2019-01-12T16:26:36Z"
"","12339","Allow execution order of MVC interceptors to be explicitly specified [SPR-7683]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-7683](https://jira.spring.io/browse/SPR-7683?redirect=false)** and commented  When using the `` construct, the order in which the interceptors is executed is determined by the declaration order (as fetched in `AbstractUrlHandlerMapping.initInterceptors`). This is fine in simple cases, but more complex cases may have multiple XML bean definition files, with multiple `` declarations. In these cases, the execution order is far from obvious, verging on unpredictable.  I would like to see a way of explicitly specifying the order in which these interceptors should be executed. This would be similar to the `order` attribute in vanilla bean definitions, but would be usable with ``.   ---  **Affects:** 3.0.4  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2010-10-26T03:34:27Z","2014-09-19T14:25:14Z"
"","12167","Improve exception handling in PropertyPlaceholderConfigurer [SPR-7510]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-7510](https://jira.spring.io/browse/SPR-7510?redirect=false)** and commented  The `processProperties()` method of `PropertyPlaceholderConfigurer` has a catch-all for any `Exception` thrown by the visitor. The exception's message is extracted and passed to a re-thrown `BeanStoreDefinitionException`. However, the remainder of the original exception (including any stack trace) is lost.  This is a problem for unhelpful exceptions like `NullPointerException` where the exception message is useless.  Can the original exception be preserved, either by passing it as the root cause of the `BeanStoreDefinitionException`, or using a log-and-rethrow?   ---  **Affects:** 3.0.4","closed","type: enhancement,","spring-projects-issues","2010-08-31T03:47:49Z","2012-06-19T03:42:56Z"
"","12063","AutodetectCapableMBeanInfoAssembler still refers to raw java.lang.Class type [SPR-7405]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-7405](https://jira.spring.io/browse/SPR-7405?redirect=false)** and commented  The `AutodetectCapableMBeanInfoAssembler.includeBean` method still uses the raw `java.lang.Class` type. This should probably be `Class`.   ---  **Affects:** 3.0.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/faad0f4bb113dc6799ced543574daad742815d35","closed","type: enhancement,","spring-projects-issues","2010-07-29T03:09:33Z","2012-06-19T03:43:16Z"
"","11949","Extend JdbcTemplate to allow larger batch updates [SPR-7290]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-7290](https://jira.spring.io/browse/SPR-7290?redirect=false)** and commented  The current implementation of JdbcTemplate can only process JDBC batch updates such that a single batch is sent. This isn't really suitable for very large batches, due to memory constraints.  Please extend this so that you can specify not only the total number of updates, but the maximum size of each batch.  For example, 2,000,000 updates, sent in  batches of up to 100,000 each.  ---  **Affects:** 3.0.3  **Issue Links:** - #11000 JdbcTemplate batch update - Managing batchSize inferior to the number of rows to be updated (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2010-06-16T01:41:30Z","2019-01-11T14:11:18Z"
"","11928","Logging performance bottleneck in DispatcherServlet / UrlPathHelper [SPR-7269]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-7269](https://jira.spring.io/browse/SPR-7269?redirect=false)** and commented  `DispatcherServlet.getLastModified` constructs a new `UrlPathHelper` object each time it is called, which in turn calls `LogFactory.getLog`. Considering that `DispatcherServlet.getLastModified` is on the critical execution path, this adds up to a small but significant performance bottleneck.  From what I can see of `UrlPathHelper`, it should be threadsafe, and the `DispatcherServlet` should be able to keep a single instance as an object field, rather than instantiating a new one each time.   ---  **Affects:** 3.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/eb3a3a6de2ed5b58ae1288b06223011be7ed44ec","closed","type: enhancement,","spring-projects-issues","2010-06-07T23:43:10Z","2012-06-19T03:44:00Z"
"","11923","AutowireUtils requires ObjectFactory to be Serializable [SPR-7264]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-7264](https://jira.spring.io/browse/SPR-7264?redirect=false)** and commented  Since Spring 3.0, `AutowireUtils.resolveAutowiringValue()` has required that all `ObjectFactory`-implementing classes also implement `Serializable`. This means that when passing an `ObjectFactory` to `ConfigurableListableBeanFactory.registerResolvableDependency()`, this must be `Serializable`.  This was not the case in 2.5.6, however, and so code written to use this facility will not work in 3.0.x unless `Serializable` is introduced. This is invasive to the client code, and in many cases is highly inappropriate.  I'm not sure why this check is being made. `AutowireUtils` is constructing a `ObjectFactoryDelegatingInvocationHandler` which also implements `Serializable`, but there doesn't seem to be a reason for this.  Can this check be removed?   ---  **Affects:** 3.0 GA, 3.0.1, 3.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cc238207f9153551ebc7e229a989b4027a287dd4","closed","in: core,","spring-projects-issues","2010-06-07T00:21:05Z","2012-06-19T03:42:55Z"
"","11902","WebUtils shouldn't require HttpServletRequest [SPR-7243]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-7243](https://jira.spring.io/browse/SPR-7243?redirect=false)** and commented  `org.springframework.web.util.WebUtils` has methods such as `getSessionAttribute`, `getRequiredSessionAttribute` and `setSessionAttribute`, all of which take a `HttpServletRequest` parameter, get the `HttpSession` from it, and perform the operation.  There's no reason for these methods to require the `HttpServletRequest`, though, they should just be able to take the `HttpSession` directly.  I've been trying to retrofit some legacy code to use `WebUtils`, and I don't have access to the `HttpServletRequest`, just the `HttpSession`.  Can these methese methods be overloaded to take the `HttpSession`, please?   ---  **Affects:** 3.0.2","closed","type: enhancement,","spring-projects-issues","2010-05-28T03:41:32Z","2014-09-19T14:11:21Z"
"","12161","Make it easier to add new Message Converters to AnnotationMethodHandlerAdapter [SPR-7504]","**[Kenneth DeLong](https://jira.spring.io/secure/ViewProfile.jspa?name=kdelong)** opened **[SPR-7504](https://jira.spring.io/browse/SPR-7504?redirect=false)** and commented  See https://support.springsource.com/spring_support_client_getIncidentById/9995  I needed to use MarshallingHttpMessageConverter (so `@RequestBody` could bind a POST of XML to a POJO).  AnnotationMethodHandlerAdapter is preconfigured in its constructor with several MessagConverters, but not MarshallingHttpMessageConverter.  Using the  tag, it was nearly impossible to add this MessageConverter to the AMHA.  Per Spring Support, I had to write a BeanPostProcessor to look for the AMHA and then add the MTHC (and to add insult to injury, it was an array!).  There should be a simpler way to add MessageConverters; in fact, if they are found in the application context they should be added automatically, or they should be added via the mvc:annotation-config.  Or anything more elegant than the BeanPostProcessor.  Also section 19.9 of the reference document implies that MarshallingHttpMessageConverter is configured by default, but it's not.  ---  **Affects:** 3.0.4  **Reference URL:** https://support.springsource.com/spring_support_client_getIncidentById/9995  **Attachments:** - [7504.patch](https://jira.spring.io/secure/attachment/17101/7504.patch) (_3.35 kB_)  **Issue Links:** - #12559 Setting default charset in StringHttpMessageConverter - #11751 AnnotationDrivenBeanDefinitionParser should allow injection of custom HttpMessageConverter's - #11851  should supports the attributes of setting customized HttpMessageConverter bean list  0 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2010-08-29T19:04:07Z","2019-01-11T15:04:39Z"
"","12016","About @ModelAttribute, two commands, BindingResult [SPR-7358]","**[kendy lau](https://jira.spring.io/secure/ViewProfile.jspa?name=kendylxy)** opened **[SPR-7358](https://jira.spring.io/browse/SPR-7358?redirect=false)** and commented  How to deal with two `@ModelAttribute`(s) like the follows:  `@RequestMapping`(method = RequestMethod.POST)			 public String processSubmit(`@ModelAttribute`(""owner"") Owner owner, `@ModelAttribute`(""contact"") Contact contact,  		 BindingResult result, SessionStatus status) {      	new OwnerValidator().validate(owner, result);	     	if (result.hasErrors()) {	     		return ""owners/form"";     	}	     	else {	     		this.clinic.storeOwner(owner);     		status.setComplete();     		return ""redirect:/owners/"" + owner.getId();     	}	     }		  When error occures during the OwnerValidator validate the command owner, the BingingResult don't know which command object is the errors binded for.  the validator is like this  public class OwnerValidator {      public void validate(Owner owner, Errors errors) {		     	if (!StringUtils.hasLength(owner.getFirstName())) {	     		errors.rejectValue(""firstName"", ""required"", ""required"");     	}	     	if (!StringUtils.hasLength(owner.getLastName())) {	     		errors.rejectValue(""lastName"", ""required"", ""required"");     	}	  .....  ---  **Affects:** 3.0.2  **Attachments:** - [BUG_ModelAttribute.zip](https://jira.spring.io/secure/attachment/16838/BUG_ModelAttribute.zip) (_163.42 kB_)  **Issue Links:** - #11763 Mention position of Errors instance in method signature more explicitly - #9430 BindingResult argument only resolved right after model attribute argument","closed","status: declined,","spring-projects-issues","2010-07-06T20:30:03Z","2019-01-12T16:37:51Z"
"","12014","Two @ModelAttribute in [SPR-7356]","**[kendy lau](https://jira.spring.io/secure/ViewProfile.jspa?name=kendylxy)** opened **[SPR-7356](https://jira.spring.io/browse/SPR-7356?redirect=false)** and commented   --- No further details from [SPR-7356](https://jira.spring.io/browse/SPR-7356?redirect=false)","closed","","spring-projects-issues","2010-07-06T15:07:23Z","2019-01-11T14:23:29Z"
"","12456","Spring MVC/Tag Library when selecting multiple items uses constructor with 1 parameter to create new instances rather than using property editor to get existing instance! [SPR-7800]","**[Ken Egervari](https://jira.spring.io/secure/ViewProfile.jspa?name=egervari)** opened **[SPR-7800](https://jira.spring.io/browse/SPR-7800?redirect=false)** and commented  Hello, I have just uncovered a very sneaky bug that took me hours to figure out what was going wrong. I really hope this helps you.  I am not 100% sure what caused it, but I do know what fixed it.  I have two entities - one is Newsletter and the other is Role. Newsletter contains a list of roles.  A role is a very simple object consistent of an id and a name. Really, it can't get much simpler than that. It also has a 1-argument constructor that takes in a name and sets its name. This constructor was only used in tests actually as the roles are basically immutable once put into the database for the first time.  I Use the Spring taglib's select control and use multiple=true because I want the user to select many roles at the same time.  Now, I have a property editor that takes a value of ""1"" or ""6"" and looks it up in the database and pulls out the corresponding database object. I have been using this property editor for ages, and it works for about 35 entities and many more forms. I am possible the property editor is working and was not the problem.  When the form takes the Newsletter model object to render the form, it PROPERLY populates the \ html control. This is important. This means the property editor is being used correctly by spring.  However, posting the form when there are errors causes spring to ""forget"" the selections. Posting the form when there are no errors causes Hibernate to bomb - it reports that it cannot save transient instances. Why is this? Because Spring MVC created **new** role objects.  I inspected further, and Spring actually created new roles where the 'name' field on the role was the value of the \ control! So it was creating new roles for each selected role where each of these new roles had an id of 0! Boy, I'm sure you can imagine Hibernate having a field day with this due to a many-to-many relationship ;)  The solution was to delete this 1-argument constructor that had an argument called ""name"". I refactored all of my tests to use a factory method... and presto! That fixed it.  So... is there somewhere in Spring MVC where it will use a 1-argument constructor rather than call into the property editor? This is clearly what happened. Once I got rid of the 1-arg constructor, Spring had no problem using my property editor when I posted my form.  I just thought I should let you know as this bug is NASTY as it does something totally unexpected in all of my 10 years using Spring.  Thanks guys! Keep up the good work!   ---  **Affects:** 3.0.5  0 votes, 5 watchers","closed","status: declined,","spring-projects-issues","2010-12-08T02:29:54Z","2019-01-12T16:26:29Z"
"","12487","Expression evaluator should accept raw collection value for parameterized method argument [SPR-7831]","**[Ken Abbott](https://jira.spring.io/secure/ViewProfile.jspa?name=krabbott)** opened **[SPR-7831](https://jira.spring.io/browse/SPR-7831?redirect=false)** and commented  The evaluator incorrectly throws org.springframework.expression.spel.SpelEvaluationException: EL1004E: when matching a method parameter of parameterized type to an actual argument of the raw type. E.g.  public Object someMethod(List\ tasks);  //inferred element type is TaskInstance  List rawList = new List(); //inferred element type is Object  In a Spring weblow, expression ""someObject.someMethod(rawList)"" fails with EL1004E.  The error is in org.springframework.core.convert.TypeDescriptor.isAssignableTo(), which incorrectly checks the element type of the collection.      if (isCollection() && targetType.isCollection() || isArray() && targetType.isArray()) {          return targetType.getType().isAssignableFrom(getType()) &&                    getElementTypeDescriptor().isAssignableTo(targetType.getElementTypeDescriptor());     }  According to rules of type erasure for parameterized types, only the raw types must match.  This is a major issue because some data providers (e.g. jBPM, Ibatis) create and return raw collection types.  Stack trace follows: org.springframework.webflow.execution.ActionExecutionException: Exception thrown executing [AnnotatedAction@f4388b targetAction = [EvaluateAction@1ac5211 expression = redemptionModel.setInstructionGroupAccountViews(flowScope.instructionGroups), resultExpression = [null]], attributes = map[[empty]]] in state 'null' of flow 'redemption-detail-flow' -- action execution attributes were 'map[[empty]]' at org.springframework.webflow.execution.ActionExecutor.execute(ActionExecutor.java:60) at org.springframework.webflow.engine.ActionList.execute(ActionList.java:155) at org.springframework.webflow.engine.Flow.start(Flow.java:534) at org.springframework.webflow.engine.impl.FlowExecutionImpl.start(FlowExecutionImpl.java:364) at org.springframework.webflow.engine.impl.FlowExecutionImpl.start(FlowExecutionImpl.java:222) at org.springframework.webflow.executor.FlowExecutorImpl.launchExecution(FlowExecutorImpl.java:140) at org.springframework.webflow.mvc.servlet.FlowHandlerAdapter.handle(FlowHandlerAdapter.java:193) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:790) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:719) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:644) at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:549) at javax.servlet.http.HttpServlet.service(HttpServlet.java:617) at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.displaytag.filter.ResponseOverrideFilter.doFilter(ResponseOverrideFilter.java:125) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at com.fmr.commons.cs203.servlet.CS203CoreServletFilter.doFilter(CS203CoreServletFilter.java:86) at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:237) at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:167) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at com.opensymphony.module.sitemesh.filter.PageFilter.doFilter(PageFilter.java:39) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:368) at com.fidelity.shares.web.common.Log4jMDCFilter.doFilter(Log4jMDCFilter.java:70) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:380) at com.fidelity.shares.web.security.SecurityTokenFilter.doFilterHttp(SecurityTokenFilter.java:77) at com.fidelity.shares.web.security.SecurityTokenFilter.doFilter(SecurityTokenFilter.java:34) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:380) at com.fidelity.shares.web.security.TimeoutFilter.doFilterHttp(TimeoutFilter.java:111) at com.fidelity.shares.web.security.TimeoutFilter.doFilter(TimeoutFilter.java:51) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:380) at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:109) at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:83) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:380) at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:97) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:380) at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:78) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:380) at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:105) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:380) at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:187) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:380) at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:79) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:380) at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:169) at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:237) at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:167) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:293) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:849) at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583) at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:379) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:619) Caused by: org.springframework.binding.expression.EvaluationException: An ELException occurred getting the value for expression 'redemptionModel.setInstructionGroupAccountViews(flowScope.instructionGroups)' on context [class org.springframework.webflow.engine.impl.RequestControlContextImpl] at org.springframework.binding.expression.spel.SpringELExpression.getValue(SpringELExpression.java:86) at org.springframework.webflow.action.EvaluateAction.doExecute(EvaluateAction.java:75) at org.springframework.webflow.action.AbstractAction.execute(AbstractAction.java:188) at org.springframework.webflow.execution.AnnotatedAction.execute(AnnotatedAction.java:145) at org.springframework.webflow.execution.ActionExecutor.execute(ActionExecutor.java:51) ... 64 more Caused by: org.springframework.expression.spel.SpelEvaluationException: EL1004E:(pos 16): Method call: Method setInstructionGroupAccountViews(java.util.ArrayList) cannot be found on com.fidelity.shares.web.admin.model.event.redemption.RedemptionDetailModel type at org.springframework.expression.spel.ast.MethodReference.findAccessorForMethod(MethodReference.java:185) at org.springframework.expression.spel.ast.MethodReference.getValueInternal(MethodReference.java:107) at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:57) at org.springframework.expression.spel.ast.SpelNodeImpl.getTypedValue(SpelNodeImpl.java:102) at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:97) at org.springframework.binding.expression.spel.SpringELExpression.getValue(SpringELExpression.java:78) ... 68 more   ---  **Affects:** 3.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3bed6cfc7c4b7db1b56b3bb1f7d38be8d96b4857, https://github.com/spring-projects/spring-framework/commit/78646f1f32b914e77971b0afcc9b7d605131e308  **Backported to:** [3.2.6](https://github.com/spring-projects/spring-framework/milestone/94?closed=1)  15 votes, 15 watchers","closed","has: votes-jira,","spring-projects-issues","2010-12-21T07:12:25Z","2014-01-03T13:33:01Z"
"","12657","javax.inject.Provider instances injected by container not Serializable [SPR-8002]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-8002](https://jira.spring.io/browse/SPR-8002?redirect=false)** and commented  We received the following error on shutdown of Tomcat 6/7 when we have a session-scoped object holding a reference to a container-injected javax.inject.Provider. Expectation is Provider objects are serializable.  https://jira.springsource.org/browse/SPR-7359 seems related.  This effects Spring Social 1.0.0.M2.  WARNING: Cannot serialize session attribute org.springframework.social.web.signin.ProviderSignInAttempt for session 021F87191DA8875DC5BE4541977CFC7B java.io.NotSerializableException: DefaultListableBeanFactory has no serialization id at org.springframework.beans.factory.support.DefaultListableBeanFactory.writeReplace(DefaultListableBeanFactory.java:952) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at java.io.ObjectStreamClass.invokeWriteReplace(ObjectStreamClass.java:1032) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1115) at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1518) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1483) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1400) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1158) at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1518) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1483) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1400) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1158) at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:330) at org.apache.catalina.session.StandardSession.writeObject(StandardSession.java:1663) at org.apache.catalina.session.StandardSession.writeObjectData(StandardSession.java:1077) at org.apache.catalina.session.StandardManager.doUnload(StandardManager.java:411) at org.apache.catalina.session.StandardManager.unload(StandardManager.java:353) at org.apache.catalina.session.StandardManager.stopInternal(StandardManager.java:497) at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:222) at org.apache.catalina.core.StandardContext$4.call(StandardContext.java:5322) at org.apache.catalina.core.StandardContext$4.call(StandardContext.java:5305) at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303) at java.util.concurrent.FutureTask.run(FutureTask.java:138) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:680)  ---  **Affects:** 3.1 M1  **Issue Links:** - #12017 Document session-scoped proxy serialization issues on Tomcat","closed","in: core,","spring-projects-issues","2011-02-24T19:41:08Z","2019-01-12T16:26:06Z"
"","12650","MockHttpRequest to support ClientRequestInterceptor testing [SPR-7995]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7995](https://jira.spring.io/browse/SPR-7995?redirect=false)** and commented  ``` public class MockHttpRequest implements HttpRequest {  	private final HttpHeaders headers = new HttpHeaders();  	private HttpMethod method; 	 	private URI uri;  	public MockHttpRequest(String uri) { 		this(HttpMethod.GET, uri); 	}  	public MockHttpRequest(HttpMethod method, String uri) { 		try { 			this.uri = new URI(uri); 		} catch (URISyntaxException e) { 			throw new IllegalArgumentException(""Invalid uri: '""+ uri + ""'"", e); 		} 		this.method = method; 	} 	 	public HttpHeaders getHeaders() { 		return headers; 	}  	public HttpMethod getMethod() { 		return method; 	}  	public URI getURI() { 		return uri; 	}  } ```  ---  **Affects:** 3.1 M1  **Issue Links:** - #12606 Add first class support for client-side REST tests (_**""Cloned from""**_)","closed","type: enhancement,","spring-projects-issues","2011-02-23T11:04:46Z","2019-01-11T16:18:14Z"
"","12649","Rome is marked as required dependency for spring-web artifact [SPR-7994]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7994](https://jira.spring.io/browse/SPR-7994?redirect=false)** and commented  All projects using spring-web:3.1.0.M1 have Rome on their classpath, unless it is excluded.  It's my understanding Rome is a completely optional dependency.  ---  **Affects:** 3.1 M1  **Issue Links:** - #13089 Spring Web dependency on rome should be optional (_**""Cloned to""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7dcd71c5439026dbd2a67bf7f2f74f0e0341c3a4  2 votes, 1 watchers","closed","type: bug,","spring-projects-issues","2011-02-23T10:52:09Z","2019-01-11T16:17:58Z"
"","12646","Allow new HttpHeaders to be added via HttpRequestWrapper.getHeaders(); [SPR-7991]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7991](https://jira.spring.io/browse/SPR-7991?redirect=false)** and commented  RestTemplate 3.1: It is common for interceptors to add new headers to the request before it is executed.  It would be nice if support for this was provided natively by HttpRequestWrapper, or a HttpRequestDecorator subclass:  ``` public class HttpRequestDecorator extends HttpRequestWrapper {  	private HttpHeaders httpHeaders;  	private boolean targetHeadersAdded; 	 	public HttpRequestDecorator(HttpRequest targetRequest) { 		super(targetRequest); 	} 	 	public HttpHeaders getHeaders() { 		if (!targetHeadersAdded) { 			this.httpHeaders = new HttpHeaders(); 			httpHeaders.putAll(getRequest().getHeaders()); 			targetHeadersAdded = true; 		} 		return httpHeaders; 	}  } ```    ---  **Affects:** 3.1 M1","closed","type: enhancement,","spring-projects-issues","2011-02-23T07:34:49Z","2015-09-22T18:20:30Z"
"","12633","De-register JDBC drivers on EmbeddedDatabase shutdown [SPR-7978]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7978](https://jira.spring.io/browse/SPR-7978?redirect=false)** and commented  I notice Tomcat complains when we shutdown our embedded webapps we're leaving driver classes lying around.  Is it possible to forcibly de-register as shown in: https://issues.apache.org/jira/browse/DBCP-332.  Also see http://stackoverflow.com/questions/3320400/jdbc-driver-unregisted-when-the-web-application-stops.  ---  **Affects:** 3.0.5  **Issue Links:** - #15999 Embedded database connection closed by shutdown() method","closed","status: bulk-closed,","spring-projects-issues","2011-02-18T12:23:21Z","2019-01-12T03:31:16Z"
"","12632","DispatcherServlet WebApplicationContext not configurable and does not inherit properties of parent WebApplicationContext [SPR-7977]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7977](https://jira.spring.io/browse/SPR-7977?redirect=false)** and commented  The DispatcherServlet Context Environment does not appear to be customizable or associated with its parent root Web Application Context Environment.  This is causing problems for us.  Specifically, environment property lookups in JSP pages, `@Controllers`, and other DispatcherServlet-specific artifacts are failing, since all property source wiring was done against the root WebApplicationContext in the ContextInitializer.   ---  **Affects:** 3.1 M1","closed","in: web,","spring-projects-issues","2011-02-18T12:09:28Z","2019-01-11T16:14:27Z"
"","12631","Introduce MvcInterceptors for InterceptorsBeanDefinitionParser (mvc:interceptors) [SPR-7976]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7976](https://jira.spring.io/browse/SPR-7976?redirect=false)** and commented  Currently missing from Mvc `@Feature` set.  Had to use `@ImportResource` to define interceptors.  ---  **Affects:** 3.1 M1  This issue is a sub-task of #12694  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9779ca191c1be81cf336fad8d592fa6f20d90734","closed","in: core,","spring-projects-issues","2011-02-18T11:31:24Z","2019-01-11T16:14:07Z"
"","12630","Dependency injection not supported on @FeatureConfiguration classes [SPR-7975]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7975](https://jira.spring.io/browse/SPR-7975?redirect=false)** and commented  I'm unable to inject environment properties or ApplicationContext services such as ResourceLoader into `@FeatureConfiguration` classes.  This appears possible with `@Configuration` classes but not `@FeatureConfiguration` classes.  An example of a `@FeatureConfiguration` that fails:  ``` @FeatureConfiguration public class MvcFeatureConfig { 	     @Inject     private ResourceLoader resourceLoader; 	     @Feature     public MvcAnnotationDriven annotatedControllers(Validator validator,         @Value(""#{environment['facebook.appId']}"") String facebookAppId,         @Value(""#{environment['facebook.appSecret']}"") String facebookAppSecret) {                  return new MvcAnnotationDriven().validator(validator).             argumentResolvers(new DeviceWebArgumentResolver(),             new FacebookWebArgumentResolver(facebookAppId, facebookAppSecret),             new AccountWebArgumentResolver(),             new DateTimeZoneWebArgumentResolver(),             new LocationWebArgumentResolver());     } 	     @Feature     public MvcResources resourceHandler() {         return new MvcResources(""/resources/**"", resourceLoader.getResource(""/resources/""));     } } ```  This will first fail because Spring tries to subclass the String environment `@Values` facebookAppId and facebookAppSecret, instead of injecting them.  Changing those to member fields doesn't work either, as no injection gets performed on the `@Value` fields.  The ResourceLoader field also remains null, resulting in a NullPointerException when resourceHandler() is invoked.  ---  **Affects:** 3.1 M1  **Attachments:** - [mylyn-context.zip](https://jira.spring.io/secure/attachment/17715/mylyn-context.zip) (_948 bytes_)  **Issue Links:** - #12628 Process `@ImportResource` with current ResourceLoader - #12629 `@Feature` methods do not accept `@Value-annotated` parameters  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/704b229cc7448b9f53adb3271cd18ba9b1677703, https://github.com/spring-projects/spring-framework/commit/5cfbed8881de037693a04393a1d0075188dc91a6  1 votes, 2 watchers","closed","in: core,","spring-projects-issues","2011-02-18T10:57:25Z","2019-01-13T07:11:05Z"
"","12629","@Feature methods do not accept @Value-annotated parameters [SPR-7974]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7974](https://jira.spring.io/browse/SPR-7974?redirect=false)** and commented  The `@Feature` method that failed in my case is:  ``` @Feature public MvcAnnotationDriven annotatedControllers(Validator validator, @Value(""${facebook.appId}"") String facebookAppId,           @Value(""facebook.appSecret}"") String facebookAppSecret) {      return new MvcAnnotationDriven().validator(validator).           argumentResolvers(new DeviceWebArgumentResolver(),                         new FacebookWebArgumentResolver(facebookAppId, facebookAppSecret),                         new AccountWebArgumentResolver(),                         new DateTimeZoneWebArgumentResolver(),                         new LocationWebArgumentResolver()); } ```  Looks like Spring is trying to create a subclass of one of the environment property parameters.  Injection of environment properties seems to work fine for `@Configuration` method arguments.  The full stack trace:  ``` org.springframework.context.annotation.FeatureMethodExecutionException: org.springframework.context.annotation.ProxyCreationException: Cannot create subclass proxy for bean type java.lang.String because it is a final class. Make the class non-final or inject the bean by interface rather than by concrete class. 	at org.springframework.context.annotation.ConfigurationClassPostProcessor.processFeatureMethod(ConfigurationClassPostProcessor.java:353) 	at org.springframework.context.annotation.ConfigurationClassPostProcessor.access$0(ConfigurationClassPostProcessor.java:318) 	at org.springframework.context.annotation.ConfigurationClassPostProcessor$1.doWith(ConfigurationClassPostProcessor.java:233) 	at org.springframework.util.ReflectionUtils.doWithMethods(ReflectionUtils.java:459) 	at org.springframework.context.annotation.ConfigurationClassPostProcessor.processFeatureConfigurationClasses(ConfigurationClassPostProcessor.java:230) 	at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigurationClasses(ConfigurationClassPostProcessor.java:203) 	at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:176) 	at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:604) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:437) 	at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:294) 	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:215) 	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:47) 	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4135) 	at org.apache.catalina.core.StandardContext.start(StandardContext.java:4630) 	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:791) 	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:771) 	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:568) 	at org.apache.catalina.startup.HostConfig.deployDescriptor(HostConfig.java:637) 	at org.apache.catalina.startup.HostConfig.deployDescriptors(HostConfig.java:563) 	at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:498) 	at org.apache.catalina.startup.HostConfig.start(HostConfig.java:1282) 	at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:321) 	at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:142) 	at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1053) 	at org.apache.catalina.core.StandardHost.start(StandardHost.java:807) 	at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1045) 	at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:445) 	at org.apache.catalina.core.StandardService.start(StandardService.java:519) 	at org.apache.catalina.core.StandardServer.start(StandardServer.java:710) 	at org.apache.catalina.startup.Catalina.start(Catalina.java:581) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 	at java.lang.reflect.Method.invoke(Method.java:597) 	at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:289) 	at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:414) Caused by: org.springframework.context.annotation.ProxyCreationException: Cannot create subclass proxy for bean type java.lang.String because it is a final class. Make the class non-final or inject the bean by interface rather than by concrete class. 	at org.springframework.context.annotation.EarlyBeanReferenceProxyCreator.assertClassIsProxyCapable(EarlyBeanReferenceProxyCreator.java:127) 	at org.springframework.context.annotation.EarlyBeanReferenceProxyCreator.doCreateProxy(EarlyBeanReferenceProxyCreator.java:94) 	at org.springframework.context.annotation.EarlyBeanReferenceProxyCreator.createProxy(EarlyBeanReferenceProxyCreator.java:79) 	at org.springframework.context.annotation.ConfigurationClassPostProcessor.processFeatureMethod(ConfigurationClassPostProcessor.java:334) 	... 35 more ```  ---  **Affects:** 3.1 M1  **Attachments:** - [mylyn-context.zip](https://jira.spring.io/secure/attachment/17731/mylyn-context.zip) (_131.10 kB_)  **Issue Links:** - #12630 Dependency injection not supported on `@FeatureConfiguration` classes  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d471266d44199112b6e030615a395209e5265ec0","closed","in: core,","spring-projects-issues","2011-02-18T10:23:46Z","2019-01-13T07:11:07Z"
"","12628","Process @ImportResource with current ResourceLoader [SPR-7973]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7973](https://jira.spring.io/browse/SPR-7973?redirect=false)** and commented  I found the following odd with `@ImportResource` usage:  1. The `@ImportResource` ResourceLoader does not appear to be the same ResourceLoader as the ApplicationContext.  I am using a AnnotationConfigWebApplicationContext, and I got classpath-relative resources by default.  2. Configuration-class relative resource resolution does not work, and one might expect it to.  For example, if I import `@ImportResource`(""mvc-interceptors.xml"") from the com.springsource.greenhouse.config.mvc package, I'd expect ""mvc-interceptors.xml"" to be in that package, and not the root of the classpath.  Having to specify ""com/springsource/greenhouse/config/mvc/mvc-interceptors.xml"" is a lot more to type and feels strange.  ---  **Affects:** 3.1 M1  **Attachments:** - [mylyn-context.zip](https://jira.spring.io/secure/attachment/17723/mylyn-context.zip) (_26.03 kB_)  **Issue Links:** - #12630 Dependency injection not supported on `@FeatureConfiguration` classes  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4cdb04ab25a91043ef51d52c916ef2684e98174b","closed","type: enhancement,","spring-projects-issues","2011-02-18T10:07:53Z","2019-01-13T07:11:08Z"
"","12561","Add JdbcTemplate support for executing an insert statement that generates a single numeric key [SPR-7906]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7906](https://jira.spring.io/browse/SPR-7906?redirect=false)** and commented  Currently you have to use SimpleJdbcInsert for this, but it provides a different programming model and is not as well known.  One would most likely expect the common cases to be covered by JdbcTemplate.  The method signature might look something like:  ``` Number jdbcTemplate.insert(String sql, Object... args) ```  e.g.  ``` Number key = jdbcTemplate.insert(""insert into Connection (accountId, providerId, accessToken, secret, refreshToken) values (?, ?, ?, ?, ?)"", accountId, providerId, encrypt(connection.getAccessToken()), encrypt(connection.getSecret()), encrypt(connection.getRefreshToken())); ```  ---  **Affects:** 3.0.5  **Issue Links:** - #8175 org.springframework.jdbc.core.simple.SimpleJdbcTemplate needs an update function that takes a GeneratedKeyHolder  13 votes, 4 watchers","closed","has: votes-jira,","spring-projects-issues","2011-01-24T14:28:15Z","2019-01-11T16:13:29Z"
"","12495","DataBinder/BeanWrapper regression: Binding to a nested Map property fails in 3.0.5, works in 3.0.4 [SPR-7839]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7839](https://jira.spring.io/browse/SPR-7839?redirect=false)** and commented  This is effecting the mvc-showcase sample after upgrading from 3.0.4 to 3.0.5.  In the failing scenario, I'm attempting to bind to:  ``` public class JavaBean {      private NestedBean nested;  }  public class NestedBean {      private String foo;      private List list; 	     private Map map;  } ```  (Note: getters and setters have been omitted for brevity)  The actual binding expression is:  ``` http://localhost:8080/mvc-showcase/convert/bean?nested.foo=bar&nested.list[0].foo=baz&nested.map[key].list[0].foo=bip ```  During binding, the ""nested"" property is initially null and the expectation is ""auto-grow"" behavior will kick-in.  The stack trace of the runtime exception that is thrown is:  ``` org.springframework.beans.NullValueInNestedPathException: Invalid property 'nested.map[key]' of bean class [org.springframework.samples.mvc.convert.JavaBean]: Could not determine property type for auto-growing a default value 	org.springframework.beans.BeanWrapperImpl.createDefaultPropertyValue(BeanWrapperImpl.java:601) 	org.springframework.beans.BeanWrapperImpl.setDefaultValue(BeanWrapperImpl.java:593) 	org.springframework.beans.BeanWrapperImpl.getNestedBeanWrapper(BeanWrapperImpl.java:558) 	org.springframework.beans.BeanWrapperImpl.getBeanWrapperForPropertyPath(BeanWrapperImpl.java:532) 	org.springframework.beans.BeanWrapperImpl.getBeanWrapperForPropertyPath(BeanWrapperImpl.java:533) 	org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:890) 	org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:76) 	org.springframework.validation.DataBinder.applyPropertyValues(DataBinder.java:673) 	org.springframework.validation.DataBinder.doBind(DataBinder.java:569) 	org.springframework.web.bind.WebDataBinder.doBind(WebDataBinder.java:191) 	org.springframework.web.bind.ServletRequestDataBinder.bind(ServletRequestDataBinder.java:110) 	org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter$ServletHandlerMethodInvoker.doBind(AnnotationMethodHandlerAdapter.java:736) 	org.springframework.web.bind.annotation.support.HandlerMethodInvoker.doBind(HandlerMethodInvoker.java:805) 	org.springframework.web.bind.annotation.support.HandlerMethodInvoker.resolveHandlerArguments(HandlerMethodInvoker.java:359) 	org.springframework.web.bind.annotation.support.HandlerMethodInvoker.invokeHandlerMethod(HandlerMethodInvoker.java:171) 	org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.invokeHandlerMethod(AnnotationMethodHandlerAdapter.java:426) 	org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.handle(AnnotationMethodHandlerAdapter.java:414) 	org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:790) 	org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:719) 	org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:644) 	org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:549) 	javax.servlet.http.HttpServlet.service(HttpServlet.java:617) 	javax.servlet.http.HttpServlet.service(HttpServlet.java:717) 	org.springframework.samples.mvc.flash.FlashMapFilter.doFilterInternal(FlashMapFilter.java:33) 	org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76)  ```  ---  **Affects:** 3.0.5  **Issue Links:** - #12370 Regression binding to nested properties on map values with auto-grow (_**""duplicates""**_)  1 votes, 3 watchers","closed","type: bug,","spring-projects-issues","2010-12-27T15:29:29Z","2019-01-11T15:17:11Z"
"","12468","Allow custom request mapping conditions [SPR-7812]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7812](https://jira.spring.io/browse/SPR-7812?redirect=false)** and commented  As outlined by a user here: https://jira.springframework.org/browse/MOBILE-8, it would be useful if it was possible to map requests to `@Controller` methods by criteria other than path, parameter value, or header value.  [MOBILE-8](https://jira.spring.io/browse/MOBILE-8) shrewdly suggests support for mapping by SitePreference, to allow different `@Controller` methods to handle requests for different versions of the application's ""site"", such as the ""mobile"" site vs. the ""normal"" site.  Rather than baking in additional hard-coded mapping options, I recommend we consider adding support for mapping by boolean SpEL Expression, which can be used in conjunction with the other `@RequestMapping` attributes.  For example:  ``` @RequestMapping(value=""/"", method=RequestMethod.GET, expression=""currentSitePreference.mobile"") public String homeMobile(Model model) {     // prepare model needed by the mobile view     return ""home-mobile""; }  @RequestMapping(value=""/"", method=RequestMethod.GET) public String home(Model model) {     // prepare normal model     return ""home""; } ```  ---  **Affects:** 3.0.5  **Issue Links:** - #11251 Request attributes not conveniently accessible using `@Value` in `@Controllers` (_**""depends on""**_) - #10064 Add ControllerMethodRequestToViewNameTranslator  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4826cae0641f07ae38f3e08fd99a2fa3abc71cac, https://github.com/spring-projects/spring-framework/commit/aacdd36e0474bd5cb9b620f6b4494a82c63cb76d, https://github.com/spring-projects/spring-framework/commit/b6d7c85f6e2248d36b7d272a51ecee7dd20173e3, https://github.com/spring-projects/spring-framework/commit/96b0752ddb0e74a101047b1e554fe40616246244, https://github.com/spring-projects/spring-framework/commit/6007801537d826477789c95d2ad9651fa05a3aea, https://github.com/spring-projects/spring-framework/commit/bede025eb9437ca3dc38623099b47ef92c48c9a0","closed","type: enhancement,","spring-projects-issues","2010-12-10T06:53:02Z","2019-01-13T07:11:55Z"
"","12401","Support for generating links to static resources such as CSS and JS files hosted at a CDN such as Amazon Cloudfront [SPR-7745]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7745](https://jira.spring.io/browse/SPR-7745?redirect=false)** and commented  Would be nice extension of the resource handler work in Spring 3 in the cases where the resource handling is performed off-site with the help of a CDN such as Amazon Cloudfront.  The best practice in this environment is to upload two versions of each static resource: a uncompressed version, and a compressed version.  In development you would want to work with a local, uncompressed version, but in production you'd expect the gzipped version to be used and be served from the CDN.  See: http://internetmarketingbyme.com/74/gzip-compression-using-amazon-s3-cloudfront-cdn/ See: http://lanyrd.com/blog/2010/ical  ---  **Affects:** 3.0.5  **Issue Links:** - #16488 Create ResourceResolver for changing URL domain (_**""duplicates""**_) - #11800 Add support for versioning resources - #16488 Create ResourceResolver for changing URL domain  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2010-11-16T07:20:25Z","2019-01-11T15:35:42Z"
"","12400","NullPointerException thrown when evaluating an expression with a null evaluation result [SPR-7744]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7744](https://jira.spring.io/browse/SPR-7744?redirect=false)** and commented  A page that has all of its Boolean values set to true/false loads perfectly fine, however if I try to load a page that holds onto a Boolean with a null value I get this:  ``` java.lang.NullPointerException at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:97) at org.springframework.web.servlet.tags.EvalTag.doEndTag(EvalTag.java:113) at org.apache.jsp.WEB_002dINF.jsp.operatingDetails.show_jsp._jspx_meth_spring_005feval_005f0(show_jsp.java:3540) at org.apache.jsp.WEB_002dINF.jsp.operatingDetails.show_jsp._jspService(show_jsp.java:442) at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70) at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:377) at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:313) at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:260) at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) at ```  Usage snippet:  ``` :  ```    ---  **Affects:** 3.0.5  **Reference URL:** http://forum.springsource.org/showthread.php?t=98015  1 votes, 5 watchers","closed","in: core,","spring-projects-issues","2010-11-16T07:16:28Z","2019-01-12T16:26:32Z"
"","12388","Make it easier to register custom Formatters [SPR-7732]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7732](https://jira.spring.io/browse/SPR-7732?redirect=false)** and commented  Currently you must subclass FormattingConversionServiceFactoryBean to do this, which is not convenient.  You do not need to subclass to register custom Converters.  See http://forum.springsource.org/showthread.php?p=328893.  ---  **Affects:** 3.0.5  **Reference URL:** http://forum.springsource.org/showthread.php?p=328893  **Issue Links:** - #12567 FormattingConversionServiceFactoryBean enhancements - #11112 Provde setter for formatters in FormattingConversionServiceFactoryBean (_**""supersedes""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f26b499cbd2a58b0db47595ba48c89c350c11bbb, https://github.com/spring-projects/spring-framework/commit/93de9622fc2c794c6f6a9bc7cfff745a80595fe5  4 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2010-11-10T06:42:07Z","2019-01-11T15:28:41Z"
"","12363","Unexpected behavior with class-level @RequestMappings [SPR-7707]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7707](https://jira.spring.io/browse/SPR-7707?redirect=false)** and commented  I am observing unexpected behavior in Spring MVC 3.0.5 in our application with `@Controllers` that use class-level `@RequestMappings` in conjunction with a ""default"" or ""root"" path mapping specified at the method-level (relative to the class-level base path).  Rather than try to explain the problem, I'll just illustrate it from several simple use cases in which I've reproduced the unexpected behavior.  Consider the following `@Controller` definition and the `@RequestMapping` rules defined within:  ``` @Controller @RequestMapping(""/invite"") public class InviteController {      @RequestMapping(method=RequestMethod.GET)     public void invitePage(@FacebookUserId String facebookUserId, Model model) { ... } 	     @RequestMapping(value=""/accept"", method=RequestMethod.GET, params=""token"")     public String acceptInvitePage(@RequestParam String token, Model model, HttpServletResponse response);      @RequestMapping(value=""/accept"", method=RequestMethod.POST)     public String acceptInvite(@RequestParam String token, @Valid SignupForm form, BindingResult formBinding, Model model);  } ```  Now consider the following web requests:  ``` GET /invite GET /invite/bogus GET /invite/accept GET /invite/accept?token=123456789 ```  With the `@RequestMapping` configuration above, for each web request I list which handler method was invoked and if that was expected:  |GET /invite | invitePage (expected) | |GET /invite/bogus | 404 (expected) | |GET /invite/accept | invitePage (NOT expected. Expected 404 or 405, instead a 500 ultimately resulted due to RuntimeException since the invitePage handler was relying on view name translation to kick in, expecting only to be invoked for GET /invite requests) | |GET /invite/accept?token=123456789 | (acceptInvitePage (expected) |  Attempting to generalize what is happening here, it seems if I do not specify a `@RequestMapping` path value at the method level, that handler method is treated as the ""default fallback"" in the case of no other match.  However, this default rule seems to only apply if we access a sub-resource path that is referenced in another `@RequestMapping` rule, such as the '/accept' sub-path here.  If you access a completely unknown sub-path, such as 'bogus' here, a 404 is returned.  I find this confusing, and would expect a 404 in both cases.  With the `@Controller` code above, I am simply trying to state the following: - invitePage should be the handler for GET /invite requests - acceptInvitePage should be the handler for GET /invite/accept?token={token} requests. - acceptInvite should be the handler for POST /invite/accept requests. - Any other request within the GET /invite path should return a 404.   Unfortunately, if I send a GET request to /accept, invitePage will actually be invoked!  Even If I remove the acceptInvitePage handler method, a GET request to /accept will still result in invitePage being invoked.  Only if I remove the ""acceptInvitePage"" AND ""acceptInvite"" methods, will I then get a 404 if I send a request to GET /invite/accept (or any other path within /invite.)  I reported this issue to Juergen and he advised me to be explicit with my relative-root mappings at the method level by using ""/"" as the value instead of defining no value at all.  I tried that and ended up with code like this:  ``` @Controller @RequestMapping(""/invite"") public class InviteController {      @RequestMapping(value=""/"", method=RequestMethod.GET)     public void invitePage(@FacebookUserId String facebookUserId, Model model) { ... } 	     @RequestMapping(value=""/accept"", method=RequestMethod.GET, params=""token"")     public String acceptInvitePage(@RequestParam String token, Model model, HttpServletResponse response);      @RequestMapping(value=""/accept"", method=RequestMethod.POST)     public String acceptInvite(@RequestParam String token, @Valid SignupForm form, BindingResult formBinding, Model model);  } ```  Here's what happened with this configuration:  |GET /invite | 404 (NOT expected) | |GET /invite/bogus | 404 (expected) | |GET /invite/accept | 405 (good enough since only a POST is allowed if no token query parameter is present) | |GET /invite/accept?token=123456789 | acceptInvitePage (expected) |  Unfortunately, now the root mapping of GET /invite, and any other mapping like it where the ""/"" value is specified the method level, does not match.  That's a show stopper.  Juergen then suggested I try the /path/** syntax at the class-level.  I did that and got the following code and results:  ``` @Controller @RequestMapping(""/invite/**"") public class InviteController {      @RequestMapping(value=""/"", method=RequestMethod.GET)     public void invitePage(@FacebookUserId String facebookUserId, Model model) { ... } 	     @RequestMapping(value=""/accept"", method=RequestMethod.GET, params=""token"")     public String acceptInvitePage(@RequestParam String token, Model model, HttpServletResponse response);      @RequestMapping(value=""/accept"", method=RequestMethod.POST)     public String acceptInvite(@RequestParam String token, @Valid SignupForm form, BindingResult formBinding, Model model);  } ```  |GET /invite | invitePage (expected) | |GET /invite/bogus | 404 (expected) | |GET /invite/accept | invitePage (NOT expected - Spring MVC appears to fallback to this even though invitePage is mapped explicitly to ""/""! Expected 405 | |GET /invite/accept?token=123456789 | acceptInvitePage (expected) |  So this sort of works; however, the default fallback behavior appears to have changed.  Furthermore, I discovered this causes side effects that effect one of my other `@Controllers`, TwitterInviteController which handles a nested path under the /invite namespace.  Specifically, that `@Controller` is now defined like this:  ``` @Controller @RequestMapping(""/invite/twitter"") public class TwitterInviteController {      @RequestMapping(value=""/"", method=RequestMethod.GET)     public void friendFinder(Account account, Model model) { ... }  } ```  With the class-level mapping of /invite/** in InviteController, TwitterInviteController works: if I send a GET request to /invite/twitter, friendFinder is called.  However, if I change /invite/** in InviteController back to simply ""/invite/"", TwitterInviteController no longer works.  Accessing GET /invite/twitter returns a 404 and Spring MVC warns of no matching handler method.  I became concerned seeing a `@RequestMapping` rule in one `@Controller` effect another one defined independently.  Also shown above with /invite/**, sending a GET request to /invite/accept caused the invitePage handler mapped to ""/"" to be invoked.  I cannot explain why this happened, since I did define the ""/"" value explicitly.  Finally, I tried /invite/* just to see what would happened in that case.  I got the same behavior as the /invite option, which I did not expect.  So at this point, I am confused over what I should be doing here to get the behavior I want.  I am seriously considering defining all `@RequestMapping` path mappings explicitly at the method level for the time being, and not using the class-level mapping feature at all until its rules are more clearly defined.   ---  **Affects:** 3.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8762ec956c8d8e18979770a0ddc836b971e88fc1","closed","type: bug,","spring-projects-issues","2010-11-01T17:56:12Z","2012-06-19T03:39:36Z"
"","12354","Spring JDBC MultipleRowMapper [SPR-7698]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7698](https://jira.spring.io/browse/SPR-7698?redirect=false)** and commented  ``` /**  * An abstract template for row mapping operations that map multiple rows to a single object.  * This is useful when joining a one-to-many relationship where there can be multiple rows returned per root (or aggregate).  * For example, consider the relationship: ""a Presentation has one-to-many Speakers"".  * When joining with the Speaker table to build a Presentation object, multiple rows will be returned for a Presentation if it has more than one Speaker.  * This template is useful in that case.  * This class has been submitted for contribution to Spring JDBC; see SPR-7698.  * @author Keith Donald  */ public abstract class MultipleRowMapper {  	/** 	 * Map a single root object R, where there may be multiple R rows for each child C. 	 */ 	public R map(ResultSet rs) throws SQLException { 		R root = mapRoot(mapId(rs), rs); 		addChild(root, rs); 		while (rs.next()) { 			addChild(root, rs);			 		} 		return root; 	}  	/** 	 * Map root objects R into Collection where there may be multiple R rows for each child C. 	 */ 	public  L mapInto(L collection, ResultSet rs) throws SQLException { 		R root = null; 		I previousId = null; 		while (rs.next()) { 			I id = mapId(rs); 			if (!id.equals(previousId)) { 				root = mapRoot(id, rs); 				collection.add(root); 			} 			addChild(root, rs); 			previousId = id; 		} 		return collection; 	}  	// subclassing hooks 	 	/** 	 * Map the ID property for root entity R. 	 */ 	protected abstract I mapId(ResultSet rs) throws SQLException; 	 	/** 	 * Map root object R including its direct properties and excluding child association properties. 	 */ 	protected abstract R mapRoot(I id, ResultSet rs) throws SQLException;  	/** 	 * Map the next child object and add it to root object R.  	 */ 	protected abstract void addChild(R root, ResultSet rs) throws SQLException;  ```  Example usage for mapping an Event object, where an Event has one-to-many Venues.  ```  new RowMapper() { 	public Event mapRow(ResultSet rs, int row) throws SQLException { 		return new MultipleRowMapper() { 			protected Long mapId(ResultSet rs) throws SQLException { 				return rs.getLong(""id""); 			} 			protected Event mapRoot(Long id, ResultSet rs) throws SQLException { 				return new Event(id, rs.getString(""title""), DateTimeZone.forID(rs.getString(""timeZone"")), new DateTime(rs.getTimestamp(""startTime""), DateTimeZone.UTC), new DateTime(rs.getTimestamp(""endTime""), DateTimeZone.UTC), 					rs.getString(""slug""), rs.getString(""description""), rs.getString(""hashtag""), new ResourceReference(rs.getString(""groupSlug""), rs.getString(""groupName""))); 			} 			protected void addChild(Event event, ResultSet rs) throws SQLException { 				event.addVenue(new Venue(rs.getLong(""venueId""), rs.getString(""venueName""), rs.getString(""venuePostalAddress""),  					new Location(rs.getDouble(""venueLatitude""), rs.getDouble(""venueLongitude"")), rs.getString(""venueLocationHint""))); 			} 		}.map(rs); 	} };  ```  Example usage for mapping a Collection of EventSession objects, where an EventSession has one-to-many EventSessionLeaders:  ```  private ResultSetExtractor eventSessionsExtractor = new ResultSetExtractor() { 	public List extractData(ResultSet rs) throws SQLException { 		return new MultipleRowMapper() { 			protected Integer mapId(ResultSet rs) throws SQLException { 				return rs.getInt(""id""); 			} 			protected EventSession mapRoot(Integer id, ResultSet rs) throws SQLException { 				return new EventSession(id, rs.getString(""title""), new DateTime(rs.getTimestamp(""startTime""), DateTimeZone.UTC), new DateTime(rs.getTimestamp(""endTime""), DateTimeZone.UTC), 						rs.getString(""description""), rs.getString(""hashtag""), rs.getFloat(""rating""), new SubResourceReference(rs.getLong(""venue""), rs.getInt(""room""), rs.getString(""roomName"")), rs.getBoolean(""favorite"")); 			} 			protected void addChild(EventSession session, ResultSet rs) throws SQLException { 				session.addLeader(new EventSessionLeader(rs.getString(""name"")));					 			} 		}.mapInto(new ArrayList(), rs); 	} }; ```    ---  **Affects:** 3.0.5  1 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2010-10-29T09:15:24Z","2015-09-22T18:55:04Z"
"","12313","StringToCollectionConverter does not trim parsed collection elements [SPR-7657]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7657](https://jira.spring.io/browse/SPR-7657?redirect=false)** and commented  It should since its designed to accept user-entered comma-delimited input, where the user may insert whitespace between the comma delimiters.   ---  **Affects:** 3.0.4","closed","type: enhancement,","spring-projects-issues","2010-10-14T10:59:21Z","2012-06-19T03:39:41Z"
"","12309","Ability to render a single error message across a group of fields [SPR-7653]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7653](https://jira.spring.io/browse/SPR-7653?redirect=false)** and commented  I have a Birthday field that is selectable via 3 select boxes, one for Month / Day / Year.  I want to display a SINGLE error message in the label of the field if any of the values are not selected.  The  tag makes it easy to render a error per property, but that would muddy my label with up to 3 messages (if all 3 boxes were not selected).  I want a single error message if either Month, Day, or Year are null.  Right now I'm just rendering a error on Month and if the other two end up being null no error message is displayed at all, which is less than ideal.  So right now I have: Birthday (never shared, used to display age)   What I want to be able to express is something like   ... which would pick the first property in error across those three properties and print its error messages.   ---  **Affects:** 3.0.4","closed","type: enhancement,","spring-projects-issues","2010-10-13T11:47:17Z","2018-12-28T11:58:45Z"
"","12308","SpEl does not support conjunction (&&) and disjunction (||) logic [SPR-7652]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7652](https://jira.spring.io/browse/SPR-7652?redirect=false)** and commented  This seems like a gap since the Unified EL does support this.  ---  **Affects:** 3.0.4  **Issue Links:** - #14779 Improve exceptions for multi-operand expressions - #14145 Cannot reference FactoryBean in a SpEL expression","closed","type: enhancement,","spring-projects-issues","2010-10-13T10:31:13Z","2019-01-11T14:29:05Z"
"","12307","Support for SpEL as a scripting language usable with Hibernate Validator 4.1 @ScriptAssert [SPR-7651]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7651](https://jira.spring.io/browse/SPR-7651?redirect=false)** and commented  Have you seen the new `@ScriptAssert` constraint annotation in Hibernate Validator 4.1.0:  ``` * A class-level constraint, that evaluates a script expression against the * annotated element. This constraint can be used to implement validation * routines, that depend on multiple attributes of the annotated element. ```  It'd be great if SpEL could be plugged in as the script expression language:  ``` * For evaluation of expressions the Java Scripting API as defined by JSR 223 * (""Scripting for the JavaTM Platform"") is used. Therefore an * implementation of that API must part of the class path. This is automatically * the case when running on Java 6. For older Java versions, the JSR 223 RI can * be added manually to the class path. ```  I noticed this when I needed a `@FieldMatch` type capability for doing field confirmation constraints.  There is no such thing in JSR 303, Hibernate Validator, or Apachje Bean Validator, so I rolled my own class-level constraint from an example I found but then discovered this annotation after upgrading to Hibernate Validator 4.1.0.  References: http://stackoverflow.com/questions/1972933/cross-field-validation-with-hibernate-validator-jsr-303   ---  **Affects:** 3.0.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9008e08171c0e284f338d44dab672c48cf98a93e  6 votes, 5 watchers","open","type: enhancement,","spring-projects-issues","2010-10-13T10:29:44Z","2021-08-05T11:37:06Z"
"","12302","DateTimeZoneHandlerInterceptor that resolves current JodaTimeContext from Cookie [SPR-7646]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7646](https://jira.spring.io/browse/SPR-7646?redirect=false)** and commented  Patch attached.   ---  **Affects:** 3.0.4  **Attachments:** - [DateTimeZoneHandlerInterceptor.java](https://jira.spring.io/secure/attachment/17188/DateTimeZoneHandlerInterceptor.java) (_1.88 kB_)","closed","type: enhancement,","spring-projects-issues","2010-10-11T13:07:42Z","2018-12-28T11:05:27Z"
"","12301","Provide support for Http Client 4 now that it is available [SPR-7645]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7645](https://jira.spring.io/browse/SPR-7645?redirect=false)** and commented  The Commons Http Client project has been promoted to a top-level project called ""Http Components"" and released a major new version at http://hc.apache.org.  It is now recommended that those using Http Client 3.x upgrade to version 4.x.  It would be great to see support for Http Client 4.x in Spring Framework for use with RestTemplate.  As a side note, we've also noticed some resourcing issues with Http Client 3.1 reported by tc Server on app shutdown:  ``` 11-Oct-2010 19:20:21.156 SEVERE org.apache.catalina.loader.WebappClassLoader.clearReferencesThreads The web application [] appears to have started a thread named [MultiThreadedHttpConnectionManager cleanup] but has failed to stop it. This is very likely to create a memory leak. ```  When I was troubleshooting this leak I noticed the Http Client library has had a major upgrade.  ---  **Affects:** 3.0.4  **Attachments:** - [HttpComponentsClientHttpRequestFactory.tgz](https://jira.spring.io/secure/attachment/17583/HttpComponentsClientHttpRequestFactory.tgz) (_5.63 kB_)  **Issue Links:** - #10848 Upgrade Apache HttpClient to version 4.0 (_**""duplicates""**_)  1 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2010-10-11T13:03:37Z","2019-01-11T14:30:46Z"
"","12285","NullPointerException in error path of ConstructorResolver when constructing a @Bean from a factory method [SPR-7629]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7629](https://jira.spring.io/browse/SPR-7629?redirect=false)** and commented  I accidentally left off the SpEL expression delimiter #{} for `@Value` when defining the following `@Bean` signature:  ``` @Bean @Scope(value=""request"", proxyMode=ScopedProxyMode.INTERFACES) public TwitterOperations twitterApi(AccountProvider twitterAccountProvider, @Value(""#{request.getAttribute('account')}"") Account account) {     return twitterAccountProvider.getApi(accountId(account)); } ```  So instead of the above, my code read:  ``` @Bean @Scope(value=""request"", proxyMode=ScopedProxyMode.INTERFACES) public TwitterOperations twitterApi(AccountProvider twitterAccountProvider, @Value(""request.getAttribute('account')"") Account account) {     return twitterAccountProvider.getApi(accountId(account)); } ```  I confirmed using the debugger this generated a type conversion exception.  However, this exception was caught and then the following NullPointerException was thrown:  ``` java.lang.NullPointerException 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:551) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:983) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:879) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:485) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) 	org.springframework.beans.factory.support.AbstractBeanFactory$2.getObject(AbstractBeanFactory.java:329) 	org.springframework.web.context.request.AbstractRequestAttributesScope.get(AbstractRequestAttributesScope.java:43) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:325) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190) 	org.springframework.aop.target.SimpleBeanTargetSource.getTarget(SimpleBeanTargetSource.java:33) 	org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:182) 	$Proxy16.search(Unknown Source) 	com.springsource.greenhouse.groups.GroupsController.eventView(GroupsController.java:50) 	sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 	java.lang.reflect.Method.invoke(Method.java:597) 	org.springframework.web.bind.annotation.support.HandlerMethodInvoker.invokeHandlerMethod(HandlerMethodInvoker.java:176) 	org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.invokeHandlerMethod(AnnotationMethodHandlerAdapter.java:426) 	org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.handle(AnnotationMethodHandlerAdapter.java:414) 	org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:790) 	org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:719) 	org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:644) 	org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:549) 	javax.servlet.http.HttpServlet.service(HttpServlet.java:617) 	javax.servlet.http.HttpServlet.service(HttpServlet.java:717) 	org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:343) 	org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:109) 	org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:83) 	org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:355) 	org.springframework.security.oauth.provider.OAuthProviderProcessingFilter.doFilter(OAuthProviderProcessingFilter.java:172) 	org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:355) 	org.springframework.security.oauth.provider.OAuthProviderProcessingFilter.doFilter(OAuthProviderProcessingFilter.java:192) 	org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:355) 	org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:187) 	org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:355) 	org.springframework.security.oauth.provider.OAuthProviderProcessingFilter.doFilter(OAuthProviderProcessingFilter.java:192) 	org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:355) 	org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:97) 	org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:355) 	org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:100) 	org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:355) 	org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:78) 	org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:355) 	org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:54) 	org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:355) 	org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:35) 	org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:355) 	org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:187) 	org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:355) 	org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:105) 	org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:355) 	org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:79) 	org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:355) 	org.springframework.security.web.access.channel.ChannelProcessingFilter.doFilter(ChannelProcessingFilter.java:109) 	org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:355) 	org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:149) 	org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:237) 	org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:167) 	org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77) 	org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) 	org.springframework.web.flash.FlashMapFilter.doFilterInternal(FlashMapFilter.java:33) 	org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) ```  After correcting my error, things worked as expected but it took awhile for me to identify my mistake without a suitable error message to help me.   ---  **Affects:** 3.0.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/061063257ab8e16786d04eaddb5b5aba61dcd7f1","closed","in: core,","spring-projects-issues","2010-10-07T16:40:16Z","2012-06-19T03:39:25Z"
"","12284","@Bean cannot be used on static factory methods but error message does not inform of you of that [SPR-7628]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7628](https://jira.spring.io/browse/SPR-7628?redirect=false)** and commented  The following error was displayed in my case:  ``` @Bean @Scope(value=""request"", proxyMode=ScopedProxyMode.INTERFACES) public static TwitterOperations twitterApi(AccountProvider twitterAccountProvider,     @Value(""#{request.getAttribute('account')}"") Account account) {     return twitterAccountProvider.getApi(accountId(account)); } ```  ``` org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'twitterApi' defined in BeanDefinition defined in class path resource [com/springsource/greenhouse/config/AccountProvidersApiConfiguration.class]: Initialization of bean failed; nested exception is java.lang.IllegalStateException: Cannot create scoped proxy for bean 'scopedTarget.twitterApi': Target type could not be determined at the time of proxy creation. 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:527) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:291) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:288) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:563) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:895) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:425) 	at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:276) 	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:197) 	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:47) 	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4135) 	at org.apache.catalina.core.StandardContext.start(StandardContext.java:4630) 	at org.apache.catalina.core.StandardContext.reload(StandardContext.java:3391) 	at org.apache.catalina.loader.WebappLoader.backgroundProcess(WebappLoader.java:426) 	at org.apache.catalina.core.ContainerBase.backgroundProcess(ContainerBase.java:1309) 	at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1601) 	at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1610) 	at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1610) 	at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.run(ContainerBase.java:1590) 	at java.lang.Thread.run(Thread.java:637) Caused by: java.lang.IllegalStateException: Cannot create scoped proxy for bean 'scopedTarget.twitterApi': Target type could not be determined at the time of proxy creation. 	at org.springframework.aop.scope.ScopedProxyFactoryBean.setBeanFactory(ScopedProxyFactoryBean.java:94) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeAwareMethods(AbstractAutowireCapableBeanFactory.java:1439) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1408) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519) 	... 21 more  ```    ---  **Affects:** 3.0.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/061063257ab8e16786d04eaddb5b5aba61dcd7f1","closed","type: enhancement,","spring-projects-issues","2010-10-07T16:31:56Z","2012-06-19T03:39:04Z"
"","12208","Transactional unit test support without overhead of container [SPR-7551]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7551](https://jira.spring.io/browse/SPR-7551?redirect=false)** and commented  I prefer to unit test my data access objects without a dependency on a Spring container.  Since unit tests can require test-driven transactions, support for `@Transactional` test methods in this context would be preferable to working with the PlatformTransactionManager APIs.  I implemented this capability successfully using a JUnit MethodRule.  For example:  ```java public class JdbcAccountRepositoryTest {      private EmbeddedDatabase db;      private JdbcTemplate jdbcTemplate;      private JdbcAccountRepository accountRepository;      @Rule     public TransactionalMethodRule transactional = new TransactionalMethodRule();      @Before     public void setup() {         db = new GreenhouseTestDatabaseBuilder().member().connectedAccount().testData(getClass()).getDatabase();         jdbcTemplate = new JdbcTemplate(db);         accountRepository = new JdbcAccountRepository(jdbcTemplate, NoOpPasswordEncoder.getInstance(), new StubFileStorage(), ""http://localhost:8080/members/{profileKey}"");     }          @After     public void destroy() {         if (db != null) {             db.shutdown();         }     }      @Test     @Transactional         public void create() throws EmailAlreadyOnFileException {         Person person = new Person(""Jack"", ""Black"", ""jack@black.com"", ""foobie"", Gender.Male, new LocalDate(1977, 12, 1));         Account account = accountRepository.createAccount(person);         assertEquals(3L, (long) account.getId());         assertEquals(""Jack Black"", account.getFullName());         assertEquals(""jack@black.com"", account.getEmail());         assertEquals(""http://localhost:8080/members/3"", account.getProfileUrl());         assertEquals(""http://localhost:8080/resources/profile-pics/male/small.jpg"", account.getPictureUrl());     } } ```  The MethodRule implementation:  ```java package org.springframework.test.transaction;  import java.lang.reflect.Field;  import javax.sql.DataSource;  import org.junit.rules.MethodRule; import org.junit.runners.model.FrameworkMethod; import org.junit.runners.model.Statement; import org.springframework.jdbc.datasource.DataSourceTransactionManager; import org.springframework.transaction.PlatformTransactionManager; import org.springframework.transaction.TransactionStatus; import org.springframework.transaction.annotation.Transactional; import org.springframework.transaction.support.DefaultTransactionDefinition; import org.springframework.util.ReflectionUtils;  public class TransactionalMethodRule implements MethodRule {  	public Statement apply(Statement base, FrameworkMethod method, Object target) { 		if (method.getAnnotation(Transactional.class) != null) { 			return new TransactionalStatement(base, target); 		} else { 			return base; 		} 	}  	private class TransactionalStatement extends Statement { 		 		private final Statement base;  		private final Object target; 		 		public TransactionalStatement(Statement base, Object target) { 			this.base = base; 			this.target = target; 		}  		@Override 		public void evaluate() throws Throwable { 			DataSource dataSource = getDataSource(); 			PlatformTransactionManager tm = new DataSourceTransactionManager(dataSource); 			TransactionStatus txStatus = tm.getTransaction(new DefaultTransactionDefinition()); 			try { 				base.evaluate(); 			} catch (Throwable e) { 				tm.rollback(txStatus); 				throw e; 			} 			tm.commit(txStatus); 		} 	 		private DataSource getDataSource() { 			Field field = ReflectionUtils.findField(target.getClass(), ""db""); 			field.setAccessible(true);  			return (DataSource) ReflectionUtils.getField(field, target); 		}	  	} } ```  ---  **Affects:** 3.0.4  **Issue Links:** - #11259 Introduce a TestExecutionListener for DbUnit  1 votes, 2 watchers","open","type: enhancement,","spring-projects-issues","2010-09-13T09:25:32Z","2019-01-11T15:08:36Z"
"","12203","Provide name of errant SQL script when EmbeddedDatabase population fails [SPR-7546]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7546](https://jira.spring.io/browse/SPR-7546?redirect=false)** and commented  Currently this context is lost, which can make it difficult to track down the errant SQL source. It would be very helpful if the SQL resource context was provided.   ---  **Affects:** 3.0.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a15d023b454e5ab585f1279522401e8fe583a1d2","closed","type: enhancement,","spring-projects-issues","2010-09-12T00:03:15Z","2012-06-19T03:43:20Z"
"","12201","Consider mapping empty form values to [null] for Object properties [SPR-7544]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7544](https://jira.spring.io/browse/SPR-7544?redirect=false)** and commented  Currently empty form fields are mapped to """" (empty string).  This has several issues: 1. Neither a `@NotNull` JSR-303 constraint or a ""not null"" relational DB constraint fails in this case.  You're left with defining a min `@Size` constraint or relying on a implementation-specific `@NotEmpty`.  In addition, there is no DB min constraint you can define at the Db level.  Simply mapping """" to null would solve these problems and we could just rely on `@NotNull`/not null.  ---  **Affects:** 3.0.4  **Issue Links:** - #12969 Formatter subsystem's ParserConverter skips Parser invocation if input string is empty - #10090 With binder.setRequiredFields constraint set, submitting an empty value for a required request parameter not binding an empty string to backing JavaBean","closed","type: enhancement,","spring-projects-issues","2010-09-11T13:18:40Z","2019-01-11T15:09:57Z"
"","12200","Automatically expose @PathVariables in the Model [SPR-7543]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7543](https://jira.spring.io/browse/SPR-7543?redirect=false)** and commented  It'd be nice instead of having to do this:  ``` @RequestMapping(value=""/edit/{slug}"", method=RequestMethod.GET) public String getEditAppForm(@PathVariable String slug, Account account, Model model) {     model.addAttribute(connectedAppRepository.getAppForm(account.getId(), slug));     model.addAttribute(""slug"", slug);     return ""develop/apps/edit""; } ```  ... and using ${slug} in my template to access the `@PathVariable` value, I could simply do:  ``` @RequestMapping(value=""/edit/{slug}"", method=RequestMethod.GET) public String getEditAppForm(@PathVariable String slug, Account account, Model model) {     model.addAttribute(connectedAppRepository.getAppForm(account.getId(), slug));     return ""develop/apps/edit""; } ```  and reference something automatically exposed like ${pathVars.slug} in my template.  ---  **Affects:** 3.0.4  **Issue Links:** - #11152 Access URI template variables in view (_**""duplicates""**_) - #13391 Need a way to disable behavior added in ""Automatically expose `@PathVariables` in the Model"" SPR-7543 - #13130 Use AbstractView instead of HandlerMethodArgumentResolver to add `@PathVariable` values to the model  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ed9d9a402ba8ffa2cacebea35f6192bdc898ce4d","closed","type: enhancement,","spring-projects-issues","2010-09-11T12:58:48Z","2019-01-13T21:44:49Z"
"","12198","Make UriTemplate Serializable [SPR-7541]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7541](https://jira.spring.io/browse/SPR-7541?redirect=false)** and commented  I have a Principal object stored in the HttpSession that holds a reference to a UriTemplate.  Noticed UriTemplate was not serializable when a SerializationException occurred when writing the session to disc.  Can we consider making it serialization since it is a value object?   ---  **Affects:** 3.0.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a3f155220bec9ba8404c9975dfd0de1e82b470bb","closed","type: enhancement,","spring-projects-issues","2010-09-10T15:40:22Z","2012-06-19T03:43:53Z"
"","12196","Allow standard form ""retry on error"" logic to be handled by framework code instead of duplicated across @Controller code [SPR-7539]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7539](https://jira.spring.io/browse/SPR-7539?redirect=false)** and commented  The following lifecycle is extremely common in web apps: 1. bind request input to a backing bean 2. validate the bean 3. if there are bind/validation errors, re-render the form so the user can retry their submission  Steps 1 and 2 are currently handled by the `@MVC` framework, via JavaBean `@Controller` method arguments annotated with the `@Valid` annotation.  However, the 3rd step must always be performed manually by the developer.  This leads to duplication across `@Controllers`.  An example of this:  ``` @RequestMapping(value=""/apps"", method=RequestMethod.POST) public String createApp(Account account, @Valid AppForm form, BindingResult bindingResult) {    // duplicated    if (bindingResult.hasErrors()) {        return ""apps/new"";    }    return ""redirect:/develop/apps/"" + appRepository.createApp(account.getId(), form); }  @RequestMapping(value=""/apps/edit/{slug}"", method=RequestMethod.POST) public String updateApp(Account account, @PathVariable String slug, @Valid AppForm form, BindingResult bindingResult) {     // duplicated     if (bindingResult.hasErrors()) {         return ""apps/edit"";     }     return ""redirect:/develop/apps/"" + appRepository.updateApp(account.getId(), slug, form); } ```  The duplicated code takes more than half of the method body.  Imagine an app with hundreds of form controllers--the duplication adds up.  Something like the following would be ideal:  ``` @RequestMapping(value=""/apps"", method=RequestMethod.POST) public String createApp(Account account, @Valid AppForm form, BindingResult bindingResult) {    return ""redirect:/develop/apps/"" + appRepository.createApp(account.getId(), form); }  @RequestMapping(value=""/apps/edit/{slug}"", method=RequestMethod.POST) public String updateApp(Account account, @PathVariable String slug, @Valid AppForm form, BindingResult bindingResult) {     return ""redirect:/develop/apps/"" + appRepository.updateApp(account.getId(), slug, form); } ```  But the question is how can we get to something that is as simple as the above?  In some cases, we can rely on RequestToViewNameTranslation.  In other cases, additional metadata will be needed to tell Spring MVC which view to render on bind/validation errors.  ---  **Affects:** 3.0.4  **Issue Links:** - #11788 HandlerExceptionResolver for `@Valid`  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2010-09-10T11:49:30Z","2019-01-13T07:13:08Z"
"","12193","EmbeddedDatabaseFactory fails to shutdown database if population fails [SPR-7536]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7536](https://jira.spring.io/browse/SPR-7536?redirect=false)** and commented  This leads to a resource leak.  The offending code appears to be on line 158 of EmbeddedDatabaseFactory, populateDatabase method.   ---  **Affects:** 3.0.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c2dab9c20055c6d175849d9cecbd4ce10f854660","closed","type: bug,","spring-projects-issues","2010-09-10T00:25:41Z","2012-06-19T03:44:17Z"
"","12144","Detect and invoke ancestor-defined BFPPs in child contexts [SPR-7486]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7486](https://jira.spring.io/browse/SPR-7486?redirect=false)** and commented  Currently per the implementation of `AbstractApplicationContext.invokeBeanFactoryPostProcessors()`, BFPPs only apply to beans in the context in which they are registered.  In other words, a BFPP registered in a parent context will not be detected by children of that context.  This can lead to scenarios where a BFPP must be defined twice as a workaround, or where context modularity decisions must be changed in order to accomodate this constraint of the framework.  As in Keith's situation described below, he wants a property-placeholder defined in his root context to apply to beans defined in his child context.  Keith's original description:  > We just switched our application from relying on `@Value`(""#{propertiesBean.key""}} style property resolution triggering BeanExpression evaluation to `@Value`(""${key}"") injecting property placeholder subsitution.  In the process, we broke our application due to the differences in semantics and it took us a while to track this down.  Specifically, some of our beans that need ${key} substitution reside in the DispatcherServlet WebApplicationContext, which is a child of the Root Web ApplicationContext.  The Root context is where the property-placeholder element is actually declared, so substitution was never being performed on child beans (The actual value that was injected was the unsubstituted value, and no error was reported). >  > As someone who knows the internals of Spring pretty well, I can understand why this is the case -- the root context is driving this via context post processing, and is completely unaware of child contexts.  Unfortunately, I find this unintuitive from the average user's point of view.  One would expect #{} and ${}-style property resolution to have similar semantics. >  > I have to figure out how we're going to deal with this issue.  I prefer ${foo} style usage as I don't have to directly reference a bean name in my `@Components--I` can simply rely on logical property names sourced from a single application.properties file.  Unfortunately, to get this to work with my existing context structure, I'm going to have to declare some of the props in the root and others in the child context, which is less than ideal as I now have to manage multiple properties files.  Alternatively, I could put all my `@Components` in the root context.  ---  **Affects:** 3.0.4  **Attachments:** - [Spr7486Tests.java](https://jira.spring.io/secure/attachment/17020/Spr7486Tests.java) (_2.19 kB_)","closed","type: enhancement,","spring-projects-issues","2010-08-23T21:00:09Z","2019-01-13T21:45:04Z"
"","12142","@Configuration with AspectJ instead of CGLIB [SPR-7484]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7484](https://jira.spring.io/browse/SPR-7484?redirect=false)** and commented  Currently use of `@Configuration` requires cglib when defining scoped beans.  In general, cglib is not needed when AspectJ is already being used.  As a user, I'd like to be able to use the full-power of `@Configuration` with AspectJ, and without being required to add cglib to my classpath.  ---  **Affects:** 3.0.4  **Issue Links:** - #12840 Support for ByteBuddy as an alternative to CGLIB (_**""is depended on by""**_) - #14303 Upgrade to ASM 4.0 and CGLIB 3.0 - #12027 `@Async` support in spring-aspects with AspectJ  2 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2010-08-23T09:36:20Z","2019-01-13T07:13:22Z"
"","12137","Regression in comma-delimited String to Collection binding [SPR-7479]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7479](https://jira.spring.io/browse/SPR-7479?redirect=false)** and commented  The mvc-showcase sample here:  ``` https://src.springframework.org/svn/spring-samples/mvc-showcase ```  ... has a ""Type Conversion"" tab that illustrates the features of Spring MVC's type conversion capabilities, building on the ConversionService.  In a earlier 3.0.4.BUILD-SNAPSHOT, all showcases worked as expected.  In 3.0.4.RELEASE, the two showcases related to binding a comma delimited String (e.g. 1,2,3,4,5) to a Collection e.g (List\) fail.  What is being passed to the server is:  ``` http://localhost:8080/mvc-showcase/convert/collection?values=1,2,3,4,5 ```  The `@Controller` method that is mapped is:  ``` @RequestMapping(""collection"") public @ResponseBody String collection(@RequestParam Collection values) {     return ""Converted collection "" + values; } ```  The unexpected failure is a HTTP 400 Bad Request. The failure message that gets logged is:  ``` DEBUG: org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver - Resolving exception from handler [org.springframework.samples.mvc.convert.ConvertController@29684f9d]: org.springframework.beans.TypeMismatchException: Failed to convert value of type 'java.lang.String[]' to required type 'java.util.Collection'; nested exception is org.springframework.core.convert.ConversionFailedException: Unable to convert value ""1,2,3,4,5"" from type 'java.lang.String' to type 'java.lang.Integer'; nested exception is java.lang.NumberFormatException: For input string: ""1,2,3,4,5"" DEBUG: org.springframework.web.servlet.DispatcherServlet - Successfully completed request ```  It appears MVC is passing a String[] parameter value to the ConversionService instead of a String.  The ConversionService is responding properly given this, as it's impossible to convert a String[] with length 1 and [0]th element equal to ""1,2,3,4,5"" to a Collection\.  It seems in a previous snapshot of 3.0.4 a String was being passed in, as it worked, but something may have changed?  ---  **Affects:** 3.0.4  **Attachments:** - [screenshot-1.jpg](https://jira.spring.io/secure/attachment/18072/screenshot-1.jpg) (_253.03 kB_)  **Issue Links:** - #7471 Support MultipartFile-array property  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a251d6a6cc0ae65b58a8790f5d3ce4a72918d74a, https://github.com/spring-projects/spring-framework/commit/907febd86ee0da8c6d500c3317168a0a3f8b2895  1 votes, 7 watchers","closed","status: declined,","spring-projects-issues","2010-08-20T15:28:04Z","2019-01-12T16:37:41Z"
"","12131","Support for setting response status codes without requiring a custom body or header [SPR-7473]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7473](https://jira.spring.io/browse/SPR-7473?redirect=false)** and commented  I'm wondering what the programming model recommendation is when a `@Controller` needs return different status codes, but there is no requirement to return a custom body or header.  One way to do it would be to include a text 'status message' body, even if we expect the client will never use this message in practice:  ``` @RequestMapping(value=""/{id}/tweets"", method=RequestMethod.POST) public ResponseEntity postTweet(@PathVariable Long id, @RequestParam String status, Location currentLocation, @OAuthAccessToken(""Twitter"") OAuthConsumerToken accessToken) {     if (accessToken == null) {         return new ResponseEntity(""Account not connected twitter"", HttpStatus.PRECONDITION_FAILED);     }		     twitter.updateStatus(accessToken, status);     return new ResponseEntity(""Event tweet posted to Twitter"", HttpStatus.OK);		 } ```  Another way to do it would be to inject the HttpServletResponse:  ``` @RequestMapping(value=""/{id}/tweets"", method=RequestMethod.POST) public void postTweet(@PathVariable Long id, @RequestParam String status, Location currentLocation, @OAuthAccessToken(""Twitter"") OAuthConsumerToken accessToken, HttpServletResponse response) {     if (accessToken == null) {         response.setStatus(HttpServletResponse.PRECONDITION_FAILED);     }		     twitter.updateStatus(accessToken, status); } ```  I was wondering if you also thought this would be nice:  ``` @RequestMapping(value=""/{id}/tweets"", method=RequestMethod.POST) public HttpStatus postTweet(@PathVariable Long id, @RequestParam String status, Location currentLocation, @OAuthAccessToken(""Twitter"") OAuthConsumerToken accessToken) {     if (accessToken == null) {         return HttpStatus.PRECONDITION_FAILED;     }		     twitter.updateStatus(accessToken, status);     return HttpStatus.OK; } ```  Wondering what the recommendation is here, from a programming model perspective.  Ideally, I'd like to get consistency e.g.(use our HttpStatus object if possible), but depending on HttpResponseEntity here seems a little heavy since I don't need a body or header.   --- No further details from [SPR-7473](https://jira.spring.io/browse/SPR-7473?redirect=false)","closed","","spring-projects-issues","2010-08-18T11:13:08Z","2019-01-11T14:09:57Z"
"","12108","@Inject Autowiring by type fails on FactoryBeans and injected refs the FactoryBean depends on [SPR-7450]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7450](https://jira.spring.io/browse/SPR-7450?redirect=false)** and commented  Ran into a rather odd problem.  Testing against latest 3.0.4 nightly build.  The following fails with a no default constructor found exception:  ```  	  ```  The following works:  ```  	  	  	  ```  The injection points:  ``` @Inject public BadgeSystemFactoryBean(BadgeRepository badgeRepository) { 	this.badgeRepository = badgeRepository; }   @Inject public JdbcBadgeRepository(JdbcTemplate jdbcTemplate) { 	this.jdbcTemplate = jdbcTemplate; } ```  context:annotation-config is turned on.  Strangely, removing the FactoryBean and leaving just the Repository def relying on byType autowiring works:  ```  ```  Is there something special related to FactoryBean autowiring I'm missing?  ---  **Affects:** 3.0.3  **Issue Links:** - #12124 Document BeanFactoryPostProcessor implementation constraints (_**""is superseded by""**_)","closed","in: core,","spring-projects-issues","2010-08-10T23:45:56Z","2019-01-12T05:31:40Z"
"","12040","HttpMessageConverters: Support for reading/writing SynFeed objects [SPR-7382]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7382](https://jira.spring.io/browse/SPR-7382?redirect=false)** and commented  Currently the default mvc:annotation-driven HttpMessageConverter setup can read/write Atom Feed and Rss Channel objects.  It would nice if there was also support for reading/writing both Atom and RSS formats to/from a normalized object format.  This would make it easier to support both Atom and RSS in the same application for simple cases.  The Rome API provides a SynFeed abstraction for this purpose.  Is there are reason we've chosen not to work with SynFeed so far?  Articles on on native ROME usage with SynFeed: http://viralpatel.net/blogs/2009/04/reading-parsing-rss-feed-using-rome.html http://blogs.exist.com/oching/2008/08/26/generating-rss-feeds-with-rome/ http://xmlandmore.blogspot.com/2010/04/understanding-module-implementation-in.html (nice diagram of ROME's object model) http://wiki.java.net/bin/view/Javawsxml/Rome04HowRomeWorks  This article from JTeam also shows how they achieved something like this with their own RssMetadata object: http://blog.jteam.nl/2010/05/05/implementing-rss-feeds-with-new-features-of-spring-3/   ---  **Affects:** 3.0.3","closed","type: enhancement,","spring-projects-issues","2010-07-18T14:10:09Z","2015-09-22T18:55:04Z"
"","12038","Formatters bind empty form fields to [null] property values while DataBinder by default binds empty string [SPR-7380]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7380](https://jira.spring.io/browse/SPR-7380?redirect=false)** and commented  ParserConverter, which invokes parser.parse(String, Locale) on the Parser/Formatter SPIs maps [null] and """" inputs to [null].  The target Parser is not invoked in this case (and never sees the """" value).  This leads to an inconsistency when doing a form binding, where some properties are formatted and others are not.  In the formatted case, empty form fields always result in [null] property values, even if the target property is a String.  In the default case, empty form fields result in empty string """" values when the target property is a String.  ---  **Affects:** 3.0.3  **Issue Links:** - #12969 Formatter subsystem's ParserConverter skips Parser invocation if input string is empty","closed","type: enhancement,","spring-projects-issues","2010-07-15T15:33:13Z","2019-01-11T13:39:14Z"
"","12037","HTTP 405 (Method not supported) returned when 406 Status (Not Acceptable) was expected [SPR-7379]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7379](https://jira.spring.io/browse/SPR-7379?redirect=false)** and commented  I accidentally requested text content by setting my Accept header to ""Accepts=text/plain"".  I meant to request JSON content by setting the Accept header to ""application/json"".  The `@Controller` method that handled my invalid request returns a JavaBean value and is annotated with `@ResponseBody`.  No suitable HttpMessageConverter could be found capable of writing my JavaBean class given the text/plain Accept value.  I expected to receive a 406 when this occurred.  Instead I received a 405.  Client-side jQuery code where I accidentally requested dataType ""text"" instead of ""json"":  ``` Write JSON   $(""#writeJson"").click(function(){ 	$.ajax({ url: this.href, dataType: ""text"", 		success: function(json) { 			$(""#writeJsonResponse"").text("""").fadeIn().text(JSON.stringify(json)); 		} 	});					 	return false; });  ```  Confirmed using Firebug the above code sets the Accept header to: text/plain, \*/\*.  Also confirmed the response status was a 405 in Firebug and this showed in the server log:  ``` WARN : org.springframework.web.servlet.PageNotFound - Request method 'GET' not supported ```  Here is the `@Controller` code:  ``` @RequestMapping(value=""/json"", method=RequestMethod.GET) public @ResponseBody JavaBean writeJson() { 	return new JavaBean(); } ```  ---  **Affects:** 3.0.3  **Issue Links:** - #12004 HTTP 405 (Method not supported) returned when 404 Status (Not Found) was expected","closed","in: web,","spring-projects-issues","2010-07-15T14:53:53Z","2019-01-11T14:22:33Z"
"","12027","@Async support in spring-aspects with AspectJ [SPR-7369]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7369](https://jira.spring.io/browse/SPR-7369?redirect=false)** and commented  I am using AspectJ for all aspects in my application, which right now includes ITDs and the `@Transactional` spring-aspect.  I like the consistency in using AspectJ for AOP quite a bit, and would prefer to use it across the board rather than a hybrid approach.  I now have a requirement to make a method `@Async` and noticed there doesn't appear to be an equivalent spring-aspect for this.  It would be great to be able to make methods `@Async` with AspectJ in the same kind of way you can make methods `@Transactional`.  Perhaps Ramnivas could take a look at this?  ---  **Affects:** 3.0.3  **Issue Links:** - #12142 `@Configuration` with AspectJ instead of CGLIB  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/00984781af674438bab1759475836106771b7629, https://github.com/spring-projects/spring-framework/commit/e1fb19f4e160a81fffb754d83a27fe9068225eae","closed","type: enhancement,","spring-projects-issues","2010-07-14T01:18:47Z","2019-01-13T07:13:47Z"
"","12013","Add equivalent of JAX-RS @Consumes to Spring MVC [SPR-7354]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7354](https://jira.spring.io/browse/SPR-7354?redirect=false)** and commented  As a Spring MVC user, I would like the option to explicitly specify the media types a `@Controller` can accept.  If a client POSTs a request body that is not of one of those media types, the server should return the UNSUPPORTED_MEDIA_TYPE (415) status.  We should pursue semantic alignment with JAX-RS where possible.  See http://jackson.codehaus.org/javadoc/jax-rs/1.0/javax/ws/rs/Consumes.html for a description of how JAX-RS supports this feature.  ---  **Affects:** 3.0.3  **Issue Links:** - #12012 Add equivalent of JAX-RS `@Produces` to Spring MVC  4 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2010-07-06T01:56:51Z","2019-01-13T07:13:50Z"
"","12012","Add equivalent of JAX-RS @Produces to Spring MVC [SPR-7353]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7353](https://jira.spring.io/browse/SPR-7353?redirect=false)** and commented  As a Spring MVC user, I would like the option to explicitly specify the media types a `@Controller` can produce.  If a client does not accept at least one of those media types, the server should return the NOT_ACCEPTABLE (406) status.  We should pursue semantic alignment with JAX-RS where possible.  See http://jackson.codehaus.org/javadoc/jax-rs/1.0/javax/ws/rs/Produces.html for a description of how JAX-RS supports this feature.  ---  **Affects:** 3.0.3  **Issue Links:** - #12004 HTTP 405 (Method not supported) returned when 404 Status (Not Found) was expected - #12013 Add equivalent of JAX-RS `@Consumes` to Spring MVC - #11937 `@ResponseBody` usage limitations - #11368 Explicitly set response Content-Type in `@ResponseBody` (_**""supersedes""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ad2e0d45875651d9a707b514dd3966fa81a9048c, https://github.com/spring-projects/spring-framework/commit/c5833b192e3f3a280f8c63a9c45ca96776415a6b, https://github.com/spring-projects/spring-framework/commit/bb2cc8457fc2bd8f101b4b1e4a7d093ac0c465d3, https://github.com/spring-projects/spring-framework/commit/5fa7f24794cc23cd0a803d8d49024d34f7df328b, https://github.com/spring-projects/spring-framework/commit/100fed47f3206740bb4ccf2a5b845e049ddd9217  3 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2010-07-06T01:38:33Z","2019-01-13T07:13:51Z"
"","12008","Semantics of TypeDescriptor.UNKNOWN and TypeDescriptor.NULL are not clear [SPR-7349]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7349](https://jira.spring.io/browse/SPR-7349?redirect=false)** and commented  TypeDescriptor.NULL had been used to mean ""unknown"" before, though it was arguably misnamed. Now there is a TypeDescriptor.UNKNOWN, which (somewhat strangely) has a type of Object.class.  Do we need both NULL and UNKNOWN special objects?  We should talk this through and document the semantics carefully as this is a tricky area.   ---  **Affects:** 3.0.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d4f73c1d3da8529f52f43a8570cee82e2f9db293  1 votes, 1 watchers","closed","type: task,","spring-projects-issues","2010-07-03T16:21:27Z","2012-06-19T03:42:48Z"
"","12007","BeanWrapper Binding with ConversionService: Annotation-driven type conversion rules not applied to List elements [SPR-7348]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7348](https://jira.spring.io/browse/SPR-7348?redirect=false)** and commented  To reproduce: - Define a JavaBean with a List property that uses a type conversion annotation e.g. `@DateTimeFormat`(iso=Iso.DATE) List\ dates; - Attempt to bind element values e.g. dates[0]=2010-07-04&dates[1]=2011-07-04.  Instead of succeeding, the following binding error will be returned:  ``` org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors Field error in object 'javaBean' on field 'dates[0]': rejected value [2010-07-04]; codes [typeMismatch.javaBean.dates[0],typeMismatch.javaBean.dates,typeMismatch.dates[0],typeMismatch.dates,typeMismatch.java.util.Date,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [javaBean.dates[0],dates[0]]; arguments []; default message [dates[0]]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.util.Date' for property 'dates[0]'; nested exception is org.springframework.core.convert.ConversionFailedException: Unable to convert value ""2010-07-04"" from type 'java.lang.String' to type 'java.util.Date'; nested exception is org.springframework.core.convert.ConversionFailedException: Unable to convert value ""2010-07-04"" from type 'java.lang.String' to type 'java.util.Date'; nested exception is java.lang.IllegalArgumentException] Field error in object 'javaBean' on field 'dates[1]': rejected value [2011-07-04]; codes [typeMismatch.javaBean.dates[1],typeMismatch.javaBean.dates,typeMismatch.dates[1],typeMismatch.dates,typeMismatch.java.util.Date,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [javaBean.dates[1],dates[1]]; arguments []; default message [dates[1]]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.util.Date' for property 'dates[1]'; nested exception is org.springframework.core.convert.ConversionFailedException: Unable to convert value ""2011-07-04"" from type 'java.lang.String' to type 'java.util.Date'; nested exception is org.springframework.core.convert.ConversionFailedException: Unable to convert value ""2011-07-04"" from type 'java.lang.String' to type 'java.util.Date'; nested exception is java.lang.IllegalArgumentException] 	org.springframework.web.bind.annotation.support.HandlerMethodInvoker.doBind(HandlerMethodInvoker.java:809) 	org.springframework.web.bind.annotation.support.HandlerMethodInvoker.resolveHandlerArguments(HandlerMethodInvoker.java:358) 	org.springframework.web.bind.annotation.support.HandlerMethodInvoker.invokeHandlerMethod(HandlerMethodInvoker.java:170) 	org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.invokeHandlerMethod(AnnotationMethodHandlerAdapter.java:426) 	org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.handle(AnnotationMethodHandlerAdapter.java:414) 	org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:774) 	org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:719) 	org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:644) 	org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:549) 	javax.servlet.http.HttpServlet.service(HttpServlet.java:617) 	javax.servlet.http.HttpServlet.service(HttpServlet.java:717)  ```  This can be conveniently reproduced by checking out: https://src.springsource.org/svn/spring-samples/mvc-showcase/  ... deploying the app, and clicking on the ""JavaBean with String-to-propertyType conversion"" link in the ""Type Conversion"" section of the home page.  I tested against 3.0.4 snapshot, 3.0.3, 3.0.2, and 3.0.1, and apparently this never worked.  Interestingly, binding a String request parameter to a annotated `@Controller` List\ method argument works fine.  ---  **Affects:** 3.0.3  **Issue Links:** - #11170 Add Formatter support to generic collections  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/66abad25400aab7e6211f75449ec6bde08cae659","closed","type: bug,","spring-projects-issues","2010-07-03T15:26:52Z","2019-01-11T14:25:00Z"
"","12005","@RequestHeader negation expressions (e.g. !Accept=text/plain) are not applied [SPR-7346]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7346](https://jira.spring.io/browse/SPR-7346?redirect=false)** and commented  To reproduce: * Checkout https://src.springsource.org/svn/spring-samples/mvc-showcase * Deploy the application, view the root home page, and click ""Mapping by not presence of header"" link.  You'll see ""Mapped by regexp!"", indicating the wrong `@Controller` method was matched.  The method that should have been matched was MappingController.byHeaderNegation.  The method looks like:  ``` @RequestMapping(value=""/mapping/header"", method=RequestMethod.GET, headers=""!Accept=text/plain"") public @ResponseBody String byHeaderNegation() { 	return ""Mapped by path + method + header with negation!""; } ```  You can confirm using Firebug that the request information contains what should be required to match (""text/plain"" is not an Accept value and the resource URL and HTTP method is correct).   ---  **Affects:** 3.0.3  **Attachments:** - [ServletAnnotationMappingUtilsTest.java](https://jira.spring.io/secure/attachment/18284/ServletAnnotationMappingUtilsTest.java) (_8.18 kB_) - [ServletAnnotationMappingUtilsTest.java](https://jira.spring.io/secure/attachment/18282/ServletAnnotationMappingUtilsTest.java) (_6.59 kB_) - [SPR7346.patch](https://jira.spring.io/secure/attachment/18283/SPR7346.patch) (_927 bytes_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f8425a5f7b6bb8008acaf012d4b6c036117ef916  4 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2010-07-03T04:40:32Z","2019-01-11T14:24:36Z"
"","12004","HTTP 405 (Method not supported) returned when 404 Status (Not Found) was expected [SPR-7345]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7345](https://jira.spring.io/browse/SPR-7345?redirect=false)** and commented  Scenario: - Sent a HTTP request for text/html content - `@RequestMapping` only matches text/plain content - A 405 status code was returned when I had expected a 404  This can be reproduced by running the demo application here: https://src.springsource.org/svn/spring-samples/mvc-showcase  Deploy the application can click on the ""GET /simple/textonly"" link to see the 405 returned.  See the org.springframework.samples.mvc.simple.SimpleControllerRevisited for the `@Controller` implementation.  ---  **Affects:** 3.0.3  **Issue Links:** - #12037 HTTP 405 (Method not supported) returned when 406 Status (Not Acceptable) was expected - #12012 Add equivalent of JAX-RS `@Produces` to Spring MVC  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/4c4b3ef7646778e04340e37bacf21daf92da6134","closed","type: bug,","spring-projects-issues","2010-07-03T02:32:45Z","2019-01-13T07:13:55Z"
"","11989","Unable to resolve EL expressions in TIles Definitions with Tiles 2.2 [SPR-7330]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7330](https://jira.spring.io/browse/SPR-7330?redirect=false)** and commented  Reproduced against 3.0.4.BUILD-SNAPSHOT in the application here: git://git.springsource.org/greenhouse/greenhouse.git  A ${elExpression} in a definition simply prints unresolved, e.g. as ""${elExpression}"".  ELAttributeEvalautor is never invoked.  tiles-el.jar is on the classpath and EL support does appear to be activated by Spring.   ---  **Affects:** 3.0.3","closed","status: invalid,","spring-projects-issues","2010-06-28T07:05:14Z","2019-01-12T05:31:47Z"
"","11986","Allow custom WebArgumentResolvers to be configured using the mvc namespace [SPR-7327]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7327](https://jira.spring.io/browse/SPR-7327?redirect=false)** and commented  Currently there is no easy way to configure WebArgumentResolvers **and** use the namespace.  You can write a BeanPostProcessor to change AnnotationMethodHandlerAdapter after construction, but its API does not allow you to add a resolver, only set the entire collection.  The other option is to not use mvc:annotation-driven.  A child element of mvc:annotation-driven should do the trick:  ```xml                      ```    ---  **Affects:** 3.0.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/37e0a903500cb83eaa958953581c2f41c31cc818, https://github.com/spring-projects/spring-framework/commit/7aaad371204454bfb98118cbf84550cab3f6e0ac  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2010-06-27T16:34:15Z","2012-06-19T03:43:29Z"
"","11983","Introduce lightweight, StringTemplate-like templating built on SpEL [SPR-7325]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7325](https://jira.spring.io/browse/SPR-7325?redirect=false)** and commented  There are many places where templating is needed: - Generating HTML views - Generating emails - Generating PDFs and other types of documents  SpEL already has the concept of ""template expressions"" that are used to generate Strings.  It could be extended to support: - template reference (like #include or macro expansion); e.g., $searchbox()$ - conditional include of subtemplate (an IF statement); e.g., if(title)$\${title}$\$endif$ - template application to collection attributes; e.g., $names:bold()$  ... and with those basic capabilities, we would provide an embeddable and flexible templating system similar in spirit to StringTemplate.  See StringTemplate for more information http://www.stringtemplate.org.  There is also a nice fit between a templating system like this and the PresentationModel pattern outlined in #11982.  With the two combined, we could help foster simpler templating that is very natural for web developers to use. It would also be lightweight (part of spring-expression.jar) and easy to test.  Several Spring projects would benefit from a templating system in Spring Framework core: Spring MVC, Web Flow, and Integration, notably.  ---  **Affects:** 3.0.3  **Issue Links:** - #11982 Introduce PresentationModel as a simpler interface for MVC views to use to render fields  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2010-06-27T01:16:36Z","2019-01-11T14:20:21Z"
"","11982","Introduce PresentationModel as a simpler interface for MVC views to use to render fields [SPR-7324]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7324](https://jira.spring.io/browse/SPR-7324?redirect=false)** and commented  Goals: - Make it easier for web developers to create templates that generate semantic HTML markup - Make it easier for web developers to create and extend tags/macros that encapsulate the generation of HTML content - Make it possible for developers to introspect validation constraint metadata to generate client-side validation rules  ```java /**  * Represents the state and behavior of a presentation independently of the GUI controls used in the interface.  * Pulls the state and behavior of a view out into a model class that is part of the presentation.  * Coordinates with the domain layer and provides an interface to the view that minimizes decision making in the view.  * @author Keith Donald  */ public interface PresentationModel {  	/** 	 * Get the model for the field. 	 * @param fieldName the field name. 	 * @throws FieldNotFoundException if no such field exists 	 */ 	FieldModel getFieldModel(String fieldName);  } ```  ```java /**  * A model for a single data field containing dynamic information to display in the view.  * @author Keith Donald  */ public interface FieldModel {  	/** The value of the field formatted for rendering to the user */ 	String getRenderValue();  	/** Field value constraint metadata for generating client validation */ 	List getConstraints();  	/** Does this field have errors? */ 	boolean isError();    	/** The errors associated with this field */ 	List getErrors(); 	 	/** Selectable field values */ 	List getOptions(); 	  	/** Get the field model for a nested field */ 	FieldModel getNested(String field); } ```  Example template using PresentationModel:  ```html   	 		Booking Details 	 			 		 							 				Check In $if(booking.checkinDate.error)$$booking.checkinDate.errorMessage$$endif$ 				// default field value should be capable of being date format e.g. mm/dd/yyyy 				 				 				Check Out $if(booking.checkoutDate.error)$ $booking.checkoutDate.errorMessage$$endif$ 				 			 						 			 				Name 				  				Credit Card 				  				Expires 				 				$booking.creditCard.expiresMonth.options:{ 					$it.text$ 				}$					 				 				 				$booking.creditCard.expiresYear.options:{ 					$it.text$ 				}$ 				 			 				 			 		 	  ```  ---  **Affects:** 3.0.3  **Issue Links:** - #11983 Introduce lightweight, StringTemplate-like templating built on SpEL","closed","type: enhancement,","spring-projects-issues","2010-06-27T00:50:46Z","2019-01-11T14:20:29Z"
"","11944","Map properties do not auto-grow like Lists do when binding [SPR-7285]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7285](https://jira.spring.io/browse/SPR-7285?redirect=false)** and commented  ``` @RooJavaBean @RooToString public class JavaBean { 	 	private Integer number; 	 	@DateTimeFormat(iso=ISO.DATE) 	private Date date; 	 	// list will autogrow as its dereferenced e.g. numbers[0]=foo 	private List numbers; 	 	// map will autogrow as its deferenced e.g. fruits[1]=apple 	private Map fruits; 	 } ```  Binding to numbers works  Binding to fruits does not:  SpEl should also be tested  ``` org.springframework.beans.NullValueInNestedPathException: Invalid property 'fruits' of bean class [org.springframework.samples.mvc.convert.JavaBean]: Could not instantiate property type [java.util.Map] to auto-grow nested property path: java.lang.InstantiationException: java.util.Map 	org.springframework.beans.BeanWrapperImpl.newValue(BeanWrapperImpl.java:628) 	org.springframework.beans.BeanWrapperImpl.createDefaultPropertyValue(BeanWrapperImpl.java:600) 	org.springframework.beans.BeanWrapperImpl.setDefaultValue(BeanWrapperImpl.java:594) 	org.springframework.beans.BeanWrapperImpl.getNestedBeanWrapper(BeanWrapperImpl.java:558) 	org.springframework.beans.BeanWrapperImpl.getBeanWrapperForPropertyPath(BeanWrapperImpl.java:532) 	org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:886) 	org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:76) 	org.springframework.validation.DataBinder.applyPropertyValues(DataBinder.java:673) 	org.springframework.validation.DataBinder.doBind(DataBinder.java:569) 	org.springframework.web.bind.WebDataBinder.doBind(WebDataBinder.java:190) 	org.springframework.web.bind.ServletRequestDataBinder.bind(ServletRequestDataBinder.java:110) 	org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter$ServletHandlerMethodInvoker.doBind(AnnotationMethodHandlerAdapter.java:712) 	org.springframework.web.bind.annotation.support.HandlerMethodInvoker.doBind(HandlerMethodInvoker.java:804) 	org.springframework.web.bind.annotation.support.HandlerMethodInvoker.resolveHandlerArguments(HandlerMethodInvoker.java:358) 	org.springframework.web.bind.annotation.support.HandlerMethodInvoker.invokeHandlerMethod(HandlerMethodInvoker.java:170) 	org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.invokeHandlerMethod(AnnotationMethodHandlerAdapter.java:421) 	org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.handle(AnnotationMethodHandlerAdapter.java:409) 	org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:774) 	org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:719) 	org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:644) 	org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:549) 	javax.servlet.http.HttpServlet.service(HttpServlet.java:617) 	javax.servlet.http.HttpServlet.service(HttpServlet.java:717)  {codE} ```    ---  **Affects:** 3.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7f91153bba5a76099889f83d411adc6a40e8276e  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2010-06-14T21:59:31Z","2012-06-19T03:43:32Z"
"","11893","Support for Apple PList data exchange format  [SPR-7234]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7234](https://jira.spring.io/browse/SPR-7234?redirect=false)** and commented  PList is a format commonly used in Apple iPhone and Mac environments.  As a user, I'd like Spring to provide support for marshalling between PList documents and Java objects.   ---  **Affects:** 3.0.2","closed","type: enhancement,","spring-projects-issues","2010-05-25T01:35:07Z","2015-09-22T18:20:31Z"
"","11884","Introduce convenient boolean configuration attribute for enabling auto-refresh of Tiles definitions [SPR-7225]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7225](https://jira.spring.io/browse/SPR-7225?redirect=false)** and commented  As of Tiles 2.1, Tiles has an boolean attribute that, if set to true, will turn on ""auto refresh checking"" for TIles definitions.  This allows changes to Tiles definitions to be picked up in development without a server restart.  The current way of turning on a auto-refresh check is low-level.  With Tiles 2.1, you set a custom tilesProperties on your TilesConfigurer with the ""org.apache.tiles.definition.dao.LocaleUrlDefinitionDAO.CHECK_REFRESH"" property set to true.  (Reference: http://tiles.apache.org/2.1/framework/config-reference.html).  I believe the mechanism in Tiles 2.2 for enabling this check is different.  As a user, I'd like a simple boolean property on TilesConfigurer to enable auto-refresh checks that works with Tiles 2.1 and > e.g.:  ```  	 		 			/WEB-INF/layouts/tiles.xml, 			/WEB-INF/views/*/tiles.xml 		 	 	  ```    ---  **Affects:** 3.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0390c2b9fe21e28bca122b0ca4fcc5603f5cc370","closed","type: enhancement,","spring-projects-issues","2010-05-20T01:52:52Z","2013-10-08T12:54:31Z"
"","11883","Allow use of SpEL expressions inside Tiles Definitions [SPR-7224]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-7224](https://jira.spring.io/browse/SPR-7224?redirect=false)** and commented  This would be particularly useful for accessing i18n messages.  Example:  ```  	 				 	  ```  ``` 1. /WEB-INF/messages/messages.properties appName=My App ```    ---  **Affects:** 3.0.2","closed","type: enhancement,","spring-projects-issues","2010-05-20T01:34:22Z","2015-09-22T18:20:31Z"
"","12684","I want to use the ""bean profiling"" with XML based component-scanning. [SPR-8029]","**[Keesun Baik](https://jira.spring.io/secure/ViewProfile.jspa?name=keesun)** opened **[SPR-8029](https://jira.spring.io/browse/SPR-8029?redirect=false)** and commented  I want to use the ""Bean profiling"" with componen-scaning like this.  ```java @Service(profile=""DEV"") public class MyServiceForDev implements MyService {  	@Override 	public String getName() { 		return ""DEV""; 	}  } ```  Then, I don't have to explicitly modify applicationContex.xml to use bean profiling with XML and component-scanning.  ---  **Issue Links:** - #14142 Support XML-like bean overriding semantics for component-scanning","closed","status: invalid,","spring-projects-issues","2011-03-08T21:07:42Z","2019-01-12T05:30:55Z"
"","12652","@Autowired doesn't work with Bean Profile [SPR-7997]","**[Keesun Baik](https://jira.spring.io/secure/ViewProfile.jspa?name=keesun)** opened **[SPR-7997](https://jira.spring.io/browse/SPR-7997?redirect=false)** and commented  ```xml 	 	 	 		 	  	 		 	 ```  I made three classes, WhiteshipController -> DevWhiteshipService || ProdWhiteshipService and one interface, WhiteshipService. In the  WhiteshipController, I autowired WhiteshipService like this.  ```java @Controller public class WhiteshipController { 	 	@Autowired WhiteshipService service;  	public void setService(WhiteshipService service) { 		this.service = service; 	}  	@RequestMapping(""/hi"") 	public void hi(Model model){ 		model.addAttribute(""name"", service.getName()); 	}  } ```  But, the service property remains null. As the `@Autowired` annotation's required attribute's default value is true, It can't be null but throw Exception. But, I set the profile in Environment when I test.  ```java @Test public void di(){      GenericXmlApplicationContext ctx = new GenericXmlApplicationContext();      ctx.getEnvironment().setActiveProfiles(""dev"");      ctx.load(""classpath:/applicationContext.xml"");      ctx.refresh();           WhiteshipController controller = ctx.getBean(WhiteshipController.class);      assertThat(controller, is(notNullValue()));      assertThat(controller.service, is(notNullValue()));      assertThat(controller.service.getName(), is(""DEV"")); } ```  When I changed the configuration like below, the test is passed.  ```xml 	 		 	  	 		 	  	 		 	 ```  The difference is explicit dependency injection with \ elements. I feel something wrong with this. Please give any information with this. I'll attach the test project.   ---  **Affects:** 3.1 M1  **Reference URL:** http://blog.springsource.com/2011/02/11/spring-framework-3-1-m1-released/  **Attachments:** - [spring31.zip](https://jira.spring.io/secure/attachment/17658/spring31.zip) (_7.66 kB_)","closed","in: core,","spring-projects-issues","2011-02-24T01:29:56Z","2019-01-12T05:30:59Z"
"","12420","memory leak occurs in SpringMVC(DefaultListableBeanFactory.dependentBeanMap, DefaultListableBeanFactory.dependenciesForBeanMap)  [SPR-7764]","**[kang woonduk](https://jira.spring.io/secure/ViewProfile.jspa?name=emeroad)** opened **[SPR-7764](https://jira.spring.io/browse/SPR-7764?redirect=false)** and commented  memory leak occurs in SpringMVC(DefaultListableBeanFactory.dependentBeanMap, DefaultListableBeanFactory.dependenciesForBeanMap)  error condition 1. use SpringMVC 2. use default-autowire=""byType"" 3. Scope of Controller is prototype 4. ServletHttpRequest(or HttpSession, WebRequest) setter is exist in Controller  Too Many dependency info(String:Proxy0$xxxxx) is created in DefaultListableBeanFactory(dependentBeanMap, dependenciesForBeanMap)  ---  **Affects:** 3.0.5  **Attachments:** - [memory_leak_ProxyString.JPG](https://jira.spring.io/secure/attachment/17393/memory_leak_ProxyString.JPG) (_269.31 kB_) - [memory_leak.JPG](https://jira.spring.io/secure/attachment/17392/memory_leak.JPG) (_171.88 kB_) - [MemoryLeak-sample-webproject.zip](https://jira.spring.io/secure/attachment/17394/MemoryLeak-sample-webproject.zip) (_2.92 MB_)  **Issue Links:** - #13814 Scoped-proxy memory leak w/ `@Resource` injection (_**""duplicates""**_)  1 votes, 2 watchers","closed","in: core,","spring-projects-issues","2010-11-23T18:12:38Z","2019-01-13T07:12:14Z"
"","12416","SqlMapClientTemplate - SqlMapSession should close before Connection close [SPR-7760]","**[kang woonduk](https://jira.spring.io/secure/ViewProfile.jspa?name=emeroad)** opened **[SPR-7760](https://jira.spring.io/browse/SPR-7760?redirect=false)** and commented  SqlMapClientTemplate close SqlMapSession in the wrong order  error condition 1. use sqlMapclientTemplate and Ibatis 2. enable DBCP preparedStatement cache(option:poolPreparedStatements) 3. enable Ibatis preparedSTatement cache(default:true) 4. Do not use TransactionManager  An unexpected StatementClosed exception happened in MultiThread Env This problem happened any database.  Cause: java.sql.SQLException: org.apache.commons.dbcp.PoolablePreparedStatement with address: ""582f8014-012c-72e8-fe76-000002b1b128"" is closed.  org.springframework.jdbc.UncategorizedSQLException: SqlMapClient operation; uncategorized SQLException for SQL []; SQL state [null]; error code [0];    --- The error occurred in sampleSqlMap.xml.   --- The error occurred while applying a parameter map.   --- Check the sample.select-InlineParameterMap.   --- Check the statement (query failed).   --- Cause: java.sql.SQLException: org.apache.commons.dbcp.PoolablePreparedStatement with address: ""582f8014-012c-72e8-fe76-000002b1b128"" is closed.; nested exception is com.ibatis.common.jdbc.exception.NestedSQLException:    --- The error occurred in sampleSqlMap.xml.   --- The error occurred while applying a parameter map.   --- Check the sample.select-InlineParameterMap.   --- Check the statement (query failed).   --- Cause: java.sql.SQLException: org.apache.commons.dbcp.PoolablePreparedStatement with address: ""582f8014-012c-72e8-fe76-000002b1b128"" is closed. at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:83) at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:80) at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:80) at org.springframework.orm.ibatis.SqlMapClientTemplate.execute(SqlMapClientTemplate.java:203) at org.springframework.orm.ibatis.SqlMapClientTemplate.queryForList(SqlMapClientTemplate.java:293) at org.springframework.orm.ibatis.SqlMapClientTemplate.queryForList(SqlMapClientTemplate.java:287) at com.nhncorp.spring.bug.TestDao.select(TestDao.java:30) at com.nhncorp.spring.bug.alreadyPreparedStatementClosedTest$1.run(alreadyPreparedStatementClosedTest.java:47) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:662) Caused by: com.ibatis.common.jdbc.exception.NestedSQLException:    --- The error occurred in sampleSqlMap.xml.   --- The error occurred while applying a parameter map.   --- Check the sample.select-InlineParameterMap.   --- Check the statement (query failed).   --- Cause: java.sql.SQLException: org.apache.commons.dbcp.PoolablePreparedStatement with address: ""582f8014-012c-72e8-fe76-000002b1b128"" is closed. at com.ibatis.sqlmap.engine.mapping.statement.MappedStatement.executeQueryWithCallback(MappedStatement.java:201) at com.ibatis.sqlmap.engine.mapping.statement.MappedStatement.executeQueryForList(MappedStatement.java:139) at com.ibatis.sqlmap.engine.impl.SqlMapExecutorDelegate.queryForList(SqlMapExecutorDelegate.java:567) at com.ibatis.sqlmap.engine.impl.SqlMapExecutorDelegate.queryForList(SqlMapExecutorDelegate.java:541) at com.ibatis.sqlmap.engine.impl.SqlMapSessionImpl.queryForList(SqlMapSessionImpl.java:118) at org.springframework.orm.ibatis.SqlMapClientTemplate$3.doInSqlMapClient(SqlMapClientTemplate.java:295) at org.springframework.orm.ibatis.SqlMapClientTemplate$3.doInSqlMapClient(SqlMapClientTemplate.java:1) at org.springframework.orm.ibatis.SqlMapClientTemplate.execute(SqlMapClientTemplate.java:200) ... 7 more Caused by: java.sql.SQLException: org.apache.commons.dbcp.PoolablePreparedStatement with address: ""582f8014-012c-72e8-fe76-000002b1b128"" is closed. at org.apache.commons.dbcp.DelegatingStatement.checkOpen(DelegatingStatement.java:137) at org.apache.commons.dbcp.DelegatingPreparedStatement.execute(DelegatingPreparedStatement.java:169) at org.apache.commons.dbcp.DelegatingPreparedStatement.execute(DelegatingPreparedStatement.java:169) at com.ibatis.sqlmap.engine.execution.SqlExecutor.executeQuery(SqlExecutor.java:185) at com.ibatis.sqlmap.engine.mapping.statement.MappedStatement.sqlExecuteQuery(MappedStatement.java:221) at com.ibatis.sqlmap.engine.mapping.statement.MappedStatement.executeQueryWithCallback(MappedStatement.java:189) ... 14 more   ---  **Affects:** 3.0.5  **Attachments:** - [sqlMapClientTemplate_bug_report.zip](https://jira.spring.io/secure/attachment/17389/sqlMapClientTemplate_bug_report.zip) (_28.97 kB_) - [Wrong_resource_clear_procedure_fix.patch](https://jira.spring.io/secure/attachment/17388/Wrong_resource_clear_procedure_fix.patch) (_2.28 kB_)","closed","status: invalid,","spring-projects-issues","2010-11-22T18:02:42Z","2019-01-12T05:31:17Z"
"","12516","ServletRequestUtils.getIntParameter throws an exception for empty strings [SPR-7859]","**[Kaj Hejer](https://jira.spring.io/secure/ViewProfile.jspa?name=kajh)** opened **[SPR-7859](https://jira.spring.io/browse/SPR-7859?redirect=false)** and commented  The getIntParameter(ServletRequest request, String name) throws a ServletRequestBindingException if the value of the parameter is an empty string which is the case if a field in a webform is empty.  I think a better behaviour would be to just ignore empty strings.  I get the following exception:  org.springframework.web.bind.ServletRequestBindingException: Required int parameter 'patient_age' with value of '' is not a valid number; nested exception is java.lang.NumberFormatException: For input string: """"  Another issue here is the exception message which says ""Required int parameter"" even when getIntParameter is used an not getRequiredIntParameter. The reason for this is that getIntParameter delegates to getRequiredIntParameter to parse the input.   ---  **Affects:** 3.0.5","closed","status: bulk-closed,","spring-projects-issues","2011-01-05T02:21:14Z","2019-01-12T03:31:50Z"
"","12500","Spel - doesn't have IN operator [SPR-7844]","**[kailash pandey](https://jira.spring.io/secure/ViewProfile.jspa?name=pandeykailash)** opened **[SPR-7844](https://jira.spring.io/browse/SPR-7844?redirect=false)** and commented  I was trying Selection using this expression   where root represents list of DomainObject which has a field by the name of ""docType"" .  Requirement : wanted to Select all DomainObject where an underLying object's property docType.name matches to any of the member of listOfString variable. This listOfString variable is arbitrary list and has no connection with underlying objects.  On parsing this I always get parsing Exception Unexpected token. Expected 'rsquare(])' but was 'identifier'  Please provide the solution/alternative.  ---  ---  **Affects:** 3.0.2","closed","in: core,","spring-projects-issues","2010-12-29T09:55:44Z","2019-01-13T21:43:56Z"
"","12496","Spring SpEL - behavioural inconsistency when using greater than  (>) operator in an expression [SPR-7840]","**[kailash pandey](https://jira.spring.io/secure/ViewProfile.jspa?name=pandeykailash)** opened **[SPR-7840](https://jira.spring.io/browse/SPR-7840?redirect=false)** and commented  While evaulating a Selection expression like --> ""#root.?[someproperty_Of_Type_X > someobject_Of_Type_X]"", where #root is a List\,  If the property on left hand side is null, then SpEL evaulates this condition as TRUE (ideally which should not be the case, u can't evaluate to true with null) and returns such underlying objects as part of Selection result.  Bigger problem arises when similar expression (as mentioned above) are tested with other operators like less than ""","closed","in: core,","spring-projects-issues","2010-12-28T08:43:58Z","2019-01-11T15:15:53Z"
"","12194","Doc: @RequestMapping does not work, when class implements any interface [SPR-7537]","**[Kai Moritz](https://jira.spring.io/secure/ViewProfile.jspa?name=kai.moritz)** opened **[SPR-7537](https://jira.spring.io/browse/SPR-7537?redirect=false)** and commented  I am not sure, if this is really a bug, or just a configuration issue. Frankly speaking, I think it is the latter...  Nevertheless, I add it as a bug here, since it is a real cutback, which is not mentioned anywhere in the documentation.  When configuring a controller with `@Controller` and `@RequestMapping`, everything works fine until one adds an interface to the controller-class. When the class implements an interface, the annotated methods are not found and mapped.  The only resource dealing with this issue I was able to find is the following thread on stackoverflow.com: http://stackoverflow.com/questions/154042/spring-mvc-problem-using-controller-on-controller-implementing-an-interface/3683558  It says, that one should set the property ""proxy-target-class"" of  to true, to force the usage of cglib. But that property is missing in 3.0.x!   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/562747ef414b8de4224f3eb9a2ee1b93f12b0cc5, https://github.com/spring-projects/spring-framework/commit/2c559aa8c885a23df67e4607e604c17204db9c84  1 votes, 2 watchers","closed","status: declined,","spring-projects-issues","2010-09-10T03:50:54Z","2015-09-22T17:34:31Z"
"","12237","AnnotationSessionFactoryBean postProcessConfiguration() should not be final [SPR-7581]","**[Justin Sands](https://jira.spring.io/secure/ViewProfile.jspa?name=jsands)** opened **[SPR-7581](https://jira.spring.io/browse/SPR-7581?redirect=false)** and commented  In Hibernate 3.6, AnnotationConfiguration has been depricated in favor of simply using Configuration -- so there is no need to have the method postProcessAnnotationConfiguration(AnnotationConfiguration config) any more.  Instead, removing the final qualifier from postProcessConfiguration would suffice.   ---  **Affects:** 3.0.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4c154d3cabee9876265d7aee61070e236f03637e","closed","type: enhancement,","spring-projects-issues","2010-09-21T13:03:05Z","2012-06-19T03:43:22Z"
"","12266","ClassUtils.isAssignable should be commutative for wrapper and primitive types [SPR-7610]","**[Julien HENRY](https://jira.spring.io/secure/ViewProfile.jspa?name=henryju)** opened **[SPR-7610](https://jira.spring.io/browse/SPR-7610?redirect=false)** and commented  It seems there is an issue with ClassUtils.isAssignable and primitive/wrapper types:  ``` Boolean b1 = true; // boolean is assignable to Boolean boolean b2 = Boolean.TRUE; // Boolean is assignable to boolean assertTrue(ClassUtils.isAssignable(boolean.class, Boolean.class)); assertTrue(ClassUtils.isAssignable(Boolean.class, boolean.class)); //Fail ```  I think the fix in ClassUtils would be:  ``` public static boolean isAssignable(Class lhsType, Class rhsType) { 	Assert.notNull(lhsType, ""Left-hand side type must not be null""); 	Assert.notNull(rhsType, ""Right-hand side type must not be null""); 	return (lhsType.isAssignableFrom(rhsType) || 			lhsType.equals(primitiveWrapperTypeMap.get(rhsType)) || 			rhsType.equals(primitiveWrapperTypeMap.get(lhsType))); } ```    ---  **Affects:** 3.0.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d9b54a524d82597724100ab1a832e192f8412c79","closed","in: core,","spring-projects-issues","2010-10-01T07:53:25Z","2012-06-19T03:43:03Z"
"","12597","HttpStatus deprecations/links [SPR-7942]","**[Julian Reschke](https://jira.spring.io/secure/ViewProfile.jspa?name=julian.reschke@gmx.de)** opened **[SPR-7942](https://jira.spring.io/browse/SPR-7942?redirect=false)** and commented  1) HttpStatus contains constants for certain status codes that were recently removed from the IANA registry because they shouldn't have been added in the first place (never implemented, never in a finished spec). These should either be removed or deprecated (check for definitions referencing draft-ietf-webdav-protocol-05).  2) The description for status 208 and 508 should be updated to point to RFC 5842.    ---  **Affects:** 3.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/698d004260a950d54bd92ba3dfe3feb05039a0b6","closed","type: enhancement,","spring-projects-issues","2011-02-06T10:42:01Z","2012-06-19T03:39:17Z"
"","12593","HttpClientErrorException should provide access to response headers [SPR-7938]","**[Julian Reschke](https://jira.spring.io/secure/ViewProfile.jspa?name=julian.reschke@gmx.de)** opened **[SPR-7938](https://jira.spring.io/browse/SPR-7938?redirect=false)** and commented  It would be good if HttpClientErrorException would not only provide access to the response body but also to response headers,  ---  **Sub-tasks:** - #14095 Backport ""HttpClientErrorException should provide access to response headers""  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bca2357be784d62bbcc8f4e4d520fd5c778c712c, https://github.com/spring-projects/spring-framework/commit/c471bdde850171041788b013b9ff21cd0f12403e, https://github.com/spring-projects/spring-framework/commit/b992c3d3f27b44fe3203012e636ac7dca3cf4858  2 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2011-02-03T10:12:49Z","2019-01-11T16:12:32Z"
"","12490","HttpHeaders.getEtag() mangles the value [SPR-7834]","**[Julian Reschke](https://jira.spring.io/secure/ViewProfile.jspa?name=julian.reschke@gmx.de)** opened **[SPR-7834](https://jira.spring.io/browse/SPR-7834?redirect=false)** and commented  HttpHeaders.getEtag() apparently removes the quotes around the header field value.  This is a bug; the quotes are part of the entity tag, and furthermore, it breaks the handling of weak etags.  See http://greenbytes.de/tech/webdav/rfc2616.html#rfc.section.3.11   ---  **Affects:** 3.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e5d8fa077178345f9974d5ef239dfd2ca61c21d1","closed","type: bug,","spring-projects-issues","2010-12-22T04:32:24Z","2012-06-19T03:39:28Z"
"","12098","Doc: Load-time weaving limitations with Tomcat and Hibernate [SPR-7440]","**[Juergen Zimmermann](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.zimmermann)** opened **[SPR-7440](https://jira.spring.io/browse/SPR-7440?redirect=false)** and commented  When I use Hibernate to persist an object of a class which inherits from an abstract (entity) class: nothing happens if version=3.0"" inside web.xml  If I change version=""2.5"" then everything works fine. I'll attach a testcase. The war file is missing all Spring JARs and hibernate3.jar which can be downloaded at http://sourceforge.net/projects/hibernate/files/hibernate3/3.6.0.Beta2  When you enable logging for Hibernate and set org.hibernate.SQL to level DEBUG, then you'll see that there is a SQL INSERT statement when web.xml has version=""2.5"", but there is no INSERT statement when changing to version=""3.0"".  The issue described at https://jira.springframework.org/browse/SPR-7350 is gone. This is a new one.  ---  **Attachments:** - [testcase.src.zip](https://jira.spring.io/secure/attachment/16989/testcase.src.zip) (_12.15 kB_) - [testcase.war](https://jira.spring.io/secure/attachment/16990/testcase.war) (_6.13 MB_)  **Issue Links:** - #12765 Test Spring 3.1 compatibility with Hibernate 3.6.x - #18459 Proper load-time weaving support for Hibernate 5  2 votes, 6 watchers","open","in: core,","spring-projects-issues","2010-08-10T01:17:39Z","2021-11-24T20:05:39Z"
"","12077","Support for Arquillian-based Integration Tests [SPR-7419]","**[Juergen Zimmermann](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.zimmermann)** opened **[SPR-7419](https://jira.spring.io/browse/SPR-7419?redirect=false)** and commented  #### Overview  [Arquillian](http://www.jboss.org/arquillian) is a pretty new but powerful framework for running test cases (i.e., JUnit and TestNG) inside a _container_. Arquillian currently supports Tomcat 6 (embedded mode), Jetty 6.1 and 7 (embedded mode), JBoss 5 and 6 (remote and embedded), Glassfish 3 (remote and embedded).  I'd appreciate being able to test Spring web apps with an embedded Tomcat so that the same LTW mechanism would be used for both the test environment and the production environment.  #### Further Resources  - [Spring integration in Arquillian](http://community.jboss.org/message/563768) by JBoss - [Arquillian Spring Integration](https://community.jboss.org/thread/197356?start=0&tstart=0) discussion at JBoss - Jakub Narloch's [arquillian-container-spring](https://github.com/jmnarloch/arquillian-container-spring) project on GitHub    ---  **Affects:** 3.0.3","closed","type: enhancement,","spring-projects-issues","2010-08-03T07:00:43Z","2012-05-11T13:50:11Z"
"","12009","Hibernate 3.5.3 inside Spring 3.0.3 fails to validate named queries on Tomcat 7.0.0-beta [SPR-7350]","**[Juergen Zimmermann](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.zimmermann)** opened **[SPR-7350](https://jira.spring.io/browse/SPR-7350?redirect=false)** and commented  When I change the version number in web.xml from ""2.5"" to ""3.0"" and ""web-app_2_5.xsd"" to ""web-app_3_0.xsd"", then I get this stacktrace:  2010-07-04 09:03:56,858 INFO org.apache.naming.resources.WARDirContext - The name [META-INF/resources//WEB-INF/classes/'P'.class] is not valid javax.naming.InvalidNameException: META-INF/resources//WEB-INF/classes/'P'.class: close quote appears before end of component at javax.naming.NameImpl.extractComp(NameImpl.java:129) at javax.naming.NameImpl.\(NameImpl.java:267) at javax.naming.CompositeName.\(CompositeName.java:214) at org.apache.naming.resources.WARDirContext.doLookup(WARDirContext.java:200) at org.apache.naming.resources.BaseDirContext.lookup(BaseDirContext.java:461) at org.apache.naming.resources.BaseDirContext.lookup(BaseDirContext.java:469) at org.apache.naming.resources.ProxyDirContext.lookup(ProxyDirContext.java:303) at org.apache.catalina.loader.WebappClassLoader.findResourceInternal(WebappClassLoader.java:2816) at org.springframework.instrument.classloading.tomcat.TomcatInstrumentableClassLoader.findResourceInternal(TomcatInstrumentableClassLoader.java:113) at org.apache.catalina.loader.WebappClassLoader.findClassInternal(WebappClassLoader.java:2677) at org.apache.catalina.loader.WebappClassLoader.findClass(WebappClassLoader.java:1137) at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1631) at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1509) at org.hibernate.util.ReflectHelper.classForName(ReflectHelper.java:187) at org.hibernate.impl.SessionFactoryImpl.getImportedClassName(SessionFactoryImpl.java:888) at org.hibernate.hql.ast.util.SessionFactoryHelper.findQueryableUsingImports(SessionFactoryHelper.java:132) at org.hibernate.hql.ast.util.SessionFactoryHelper.findQueryableUsingImports(SessionFactoryHelper.java:120) at org.hibernate.hql.ast.util.LiteralProcessor.processConstant(LiteralProcessor.java:108) at org.hibernate.hql.ast.tree.IdentNode.resolve(IdentNode.java:140) at org.hibernate.hql.ast.tree.FromReferenceNode.resolve(FromReferenceNode.java:117) at org.hibernate.hql.ast.tree.FromReferenceNode.resolve(FromReferenceNode.java:113) at org.hibernate.hql.ast.HqlSqlWalker.resolve(HqlSqlWalker.java:867) at org.hibernate.hql.antlr.HqlSqlBaseWalker.expr(HqlSqlBaseWalker.java:1323) at org.hibernate.hql.antlr.HqlSqlBaseWalker.inRhs(HqlSqlBaseWalker.java:4552) at org.hibernate.hql.antlr.HqlSqlBaseWalker.comparisonExpr(HqlSqlBaseWalker.java:4175) at org.hibernate.hql.antlr.HqlSqlBaseWalker.logicalExpr(HqlSqlBaseWalker.java:1909) at org.hibernate.hql.antlr.HqlSqlBaseWalker.whereClause(HqlSqlBaseWalker.java:824) at org.hibernate.hql.antlr.HqlSqlBaseWalker.query(HqlSqlBaseWalker.java:610) at org.hibernate.hql.antlr.HqlSqlBaseWalker.selectStatement(HqlSqlBaseWalker.java:294) at org.hibernate.hql.antlr.HqlSqlBaseWalker.statement(HqlSqlBaseWalker.java:237) at org.hibernate.hql.ast.QueryTranslatorImpl.analyze(QueryTranslatorImpl.java:254) at org.hibernate.hql.ast.QueryTranslatorImpl.doCompile(QueryTranslatorImpl.java:185) at org.hibernate.hql.ast.QueryTranslatorImpl.compile(QueryTranslatorImpl.java:136) at org.hibernate.engine.query.HQLQueryPlan.\(HQLQueryPlan.java:101) at org.hibernate.engine.query.HQLQueryPlan.\(HQLQueryPlan.java:80) at org.hibernate.engine.query.QueryPlanCache.getHQLQueryPlan(QueryPlanCache.java:98) at org.hibernate.impl.SessionFactoryImpl.checkNamedQueries(SessionFactoryImpl.java:560) at org.hibernate.impl.SessionFactoryImpl.\(SessionFactoryImpl.java:422) at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1385) at org.hibernate.cfg.AnnotationConfiguration.buildSessionFactory(AnnotationConfiguration.java:954) at org.hibernate.ejb.Ejb3Configuration.buildEntityManagerFactory(Ejb3Configuration.java:891) at org.hibernate.ejb.HibernatePersistence.createContainerEntityManagerFactory(HibernatePersistence.java:74) at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:225) at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:308) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1469) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1409) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:386) at de.hska.util.SpringConfig.entityManagerFactory(SpringConfig.java:150) at de.hska.util.SpringConfig$$EnhancerByCGLIB$$dcebb33e.CGLIB$entityManagerFactory$3(\) at de.hska.util.SpringConfig$$EnhancerByCGLIB$$dcebb33e$$FastClassByCGLIB$$d770316a.invoke(\) at net.sf.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:215) at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:210) at de.hska.util.SpringConfig$$EnhancerByCGLIB$$dcebb33e.entityManagerFactory(\) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:142) at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:561) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:973) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:879) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:485) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:291) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:288) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.findDefaultEntityManagerFactory(PersistenceAnnotationBeanPostProcessor.java:529) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.findEntityManagerFactory(PersistenceAnnotationBeanPostProcessor.java:495) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor$PersistenceElement.resolveEntityManager(PersistenceAnnotationBeanPostProcessor.java:656) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor$PersistenceElement.getResourceToInject(PersistenceAnnotationBeanPostProcessor.java:629) at org.springframework.beans.factory.annotation.InjectionMetadata$InjectedElement.inject(InjectionMetadata.java:147) at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:84) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.postProcessPropertyValues(PersistenceAnnotationBeanPostProcessor.java:338) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1064) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:517) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:291) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:288) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:574) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:895) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:425) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:276) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:197) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:47) at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4323) at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4771) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:138) at org.apache.catalina.core.StandardContext.reload(StandardContext.java:3493) at org.apache.catalina.loader.WebappLoader.backgroundProcess(WebappLoader.java:413) at org.apache.catalina.core.ContainerBase.backgroundProcess(ContainerBase.java:1158) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1340) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1349) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1349) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.run(ContainerBase.java:1329) at java.lang.Thread.run(Thread.java:619)  ---  **Affects:** 3.0.3  **Attachments:** - [hska.v2.zip](https://jira.spring.io/secure/attachment/16904/hska.v2.zip) (_49.64 kB_) - [hska.zip](https://jira.spring.io/secure/attachment/16896/hska.zip) (_64.39 kB_) - [hskaDB.v2.zip](https://jira.spring.io/secure/attachment/16903/hskaDB.v2.zip) (_6.73 kB_) - [hskaDB.zip](https://jira.spring.io/secure/attachment/16895/hskaDB.zip) (_8.82 kB_) - [hska-without-spring-hibernate3.v2.war](https://jira.spring.io/secure/attachment/16902/hska-without-spring-hibernate3.v2.war) (_6.42 MB_) - [hska-without-spring-hibernate3.v3.war](https://jira.spring.io/secure/attachment/16907/hska-without-spring-hibernate3.v3.war) (_6.50 MB_) - [hska-without-spring-jars.war](https://jira.spring.io/secure/attachment/16894/hska-without-spring-jars.war) (_6.44 MB_) - [src.v3.zip](https://jira.spring.io/secure/attachment/16908/src.v3.zip) (_7.60 kB_)  **Issue Links:** - #11959 Tomcat 7.0-beta: web.xml cannot support 3.0","closed","status: invalid,","spring-projects-issues","2010-07-03T18:10:08Z","2019-01-13T07:13:53Z"
"","11959","Tomcat 7.0-beta: web.xml cannot support 3.0 [SPR-7300]","**[Juergen Zimmermann](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.zimmermann)** opened **[SPR-7300](https://jira.spring.io/browse/SPR-7300?redirect=false)** and commented  When running my app with Spring 3.0.3 on Tomcat 7.0-beta http://people.apache.org/~markt/dev/tomcat-7/v7.0.0 everything works as before when using Tomcat 6.0.26. Now I tried to change web.xml from version=""2.5"" to version=""3.0"", and to web-app_3_0.xsd. But now I'm getting this stacktrace:  java.lang.IllegalStateException: Cannot load configuration class: de.hska.util.SpringConfig at org.springframework.context.annotation.ConfigurationClassPostProcessor.enhanceConfigurationClasses(ConfigurationClassPostProcessor.java:246) at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanFactory(ConfigurationClassPostProcessor.java:160) at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:663) at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:602) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:407) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:276) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:197) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:47) at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4323) at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4771) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:138) at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:990) at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:772) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:138) at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:990) at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:275) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:138) at org.apache.catalina.core.StandardService.startInternal(StandardService.java:424) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:138) at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:648) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:138) at org.apache.catalina.startup.Catalina.start(Catalina.java:576) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:288) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:415) at org.springframework.context.annotation.ConfigurationClassPostProcessor.enhanceConfigurationClasses(ConfigurationClassPostProcessor.java:246) at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanFactory(ConfigurationClassPostProcessor.java:160) at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:663) at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:602) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:407) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:276) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:197) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:47) at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4323) at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4771) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:138) at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:990) at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:772) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:138) at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:990) at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:275) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:138) at org.apache.catalina.core.StandardService.startInternal(StandardService.java:424) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:138) at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:648) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:138) at org.apache.catalina.startup.Catalina.start(Catalina.java:576) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:288) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:415) Caused by: java.lang.OutOfMemoryError: PermGen space at net.sf.cglib.core.AbstractClassGenerator.\(AbstractClassGenerator.java:39) at net.sf.cglib.core.KeyFactory$Generator.\(KeyFactory.java:127) at net.sf.cglib.core.KeyFactory.create(KeyFactory.java:112) at net.sf.cglib.core.KeyFactory.create(KeyFactory.java:108) at net.sf.cglib.core.KeyFactory.create(KeyFactory.java:104) at net.sf.cglib.proxy.Enhancer.\(Enhancer.java:69) at org.springframework.context.annotation.ConfigurationClassEnhancer.newEnhancer(ConfigurationClassEnhancer.java:101) at org.springframework.context.annotation.ConfigurationClassEnhancer.enhance(ConfigurationClassEnhancer.java:89) at org.springframework.context.annotation.ConfigurationClassPostProcessor.enhanceConfigurationClasses(ConfigurationClassPostProcessor.java:238) at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanFactory(ConfigurationClassPostProcessor.java:160) at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:663) at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:602) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:407) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:276) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:197) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:47) at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4323) at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4771) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:138) at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:990) at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:772) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:138) at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:990) at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:275) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:138) at org.apache.catalina.core.StandardService.startInternal(StandardService.java:424) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:138) at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:648) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:138) at org.apache.catalina.startup.Catalina.start(Catalina.java:576) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)  ---  **Affects:** 3.0.3  **Issue Links:** - #12009 Hibernate 3.5.3 inside Spring 3.0.3 fails to validate named queries on Tomcat 7.0.0-beta","closed","in: core,","spring-projects-issues","2010-06-18T01:57:18Z","2019-01-12T05:31:49Z"
"","11958","Tomcat 7.0-beta: web.xml cannot support 3.0 [SPR-7299]","**[Juergen Zimmermann](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.zimmermann)** opened **[SPR-7299](https://jira.spring.io/browse/SPR-7299?redirect=false)** and commented  When running my app with Spring 3.0.3 on Tomcat 7.0-beta http://people.apache.org/~markt/dev/tomcat-7/v7.0.0 everything works as before when using Tomcat 6.0.26. Now I tried to change web.xml from version=""2.5"" to version=""3.0"", and to web-app_3_0.xsd. But now I'm getting this stacktrace:  java.lang.IllegalStateException: Cannot load configuration class: de.hska.util.SpringConfig at org.springframework.context.annotation.ConfigurationClassPostProcessor.enhanceConfigurationClasses(ConfigurationClassPostProcessor.java:246) at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanFactory(ConfigurationClassPostProcessor.java:160) at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:663) at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:602) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:407) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:276) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:197) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:47) at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4323) at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4771) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:138) at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:990) at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:772) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:138) at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:990) at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:275) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:138) at org.apache.catalina.core.StandardService.startInternal(StandardService.java:424) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:138) at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:648) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:138) at org.apache.catalina.startup.Catalina.start(Catalina.java:576) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:288) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:415) Caused by: java.lang.OutOfMemoryError: PermGen space at net.sf.cglib.core.AbstractClassGenerator.\(AbstractClassGenerator.java:39) at net.sf.cglib.core.KeyFactory$Generator.\(KeyFactory.java:127) at net.sf.cglib.core.KeyFactory.create(KeyFactory.java:112) at net.sf.cglib.core.KeyFactory.create(KeyFactory.java:108) at net.sf.cglib.core.KeyFactory.create(KeyFactory.java:104) at net.sf.cglib.proxy.Enhancer.\(Enhancer.java:69) at org.springframework.context.annotation.ConfigurationClassEnhancer.newEnhancer(ConfigurationClassEnhancer.java:101) at org.springframework.context.annotation.ConfigurationClassEnhancer.enhance(ConfigurationClassEnhancer.java:89) at org.springframework.context.annotation.ConfigurationClassPostProcessor.enhanceConfigurationClasses(ConfigurationClassPostProcessor.java:238) at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanFactory(ConfigurationClassPostProcessor.java:160) at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:663) at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:602) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:407) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:276) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:197) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:47) at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4323) at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4771) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:138) at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:990) at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:772) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:138) at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:990) at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:275) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:138) at org.apache.catalina.core.StandardService.startInternal(StandardService.java:424) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:138) at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:648) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:138) at org.apache.catalina.startup.Catalina.start(Catalina.java:576) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)   ---  **Affects:** 3.0.3","closed","in: core,","spring-projects-issues","2010-06-18T01:51:53Z","2019-01-12T05:31:51Z"
"","12235","Support for JDK 7's JDBC 4.1 (JSR-TBD) [SPR-7579]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-7579](https://jira.spring.io/browse/SPR-7579?redirect=false)** and commented  According to the September 2010 information published at http://openjdk.java.net/projects/jdk7/features/   --- No further details from [SPR-7579](https://jira.spring.io/browse/SPR-7579?redirect=false)","closed","type: enhancement,","spring-projects-issues","2010-09-21T00:19:10Z","2013-03-04T02:35:58Z"
"","12234","Support for JDK 7's concurrency and collections updates (JSR-166y) [SPR-7578]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-7578](https://jira.spring.io/browse/SPR-7578?redirect=false)** and commented  According to the September 2010 information published at http://openjdk.java.net/projects/jdk7/features/   --- No further details from [SPR-7578](https://jira.spring.io/browse/SPR-7578?redirect=false)","closed","type: enhancement,","spring-projects-issues","2010-09-21T00:16:49Z","2013-03-04T02:36:36Z"
"","11966","Expose MessageSource through Hibernate Validator 4.1's ResourceBundleLocator [SPR-7307]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-7307](https://jira.spring.io/browse/SPR-7307?redirect=false)** and commented  Since Hibernate Validator 4.1 is in release candidate status now, this is a candidate for immediate consideration. See http://relation.to/14950.lace for a ResourceBundleLocator example.  FWIW, we wanted to do this against Hibernate Validator 4.0 - but were unable to do so without copying and pasting most of their ResourceBundleMessageInterpolator class...  ---  **Issue Links:** - #11396 Access JSR-303 validation contraint attributes in localized messages  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3f31a1cf756207947eb56ad211c2c1345aef727e","closed","type: enhancement,","spring-projects-issues","2010-06-21T10:05:01Z","2019-01-11T14:22:20Z"
"","12647","Add a grouping annotation (such as @CacheEvictions) to group multiple @CacheEvict annotations in one place [SPR-7992]","**[Juan Carlos González](https://jira.spring.io/secure/ViewProfile.jspa?name=statelessness)** opened **[SPR-7992](https://jira.spring.io/browse/SPR-7992?redirect=false)** and commented  Unfortunately Java doesn't allow the same annotation to be specified multiple times so if you have multiple eviction policies, so for now you could use a meta-annotation (see the reference documentation) to define your own type and declare that along a traditional `@CacheEvict`:  `@Retention`(RetentionPolicy.RUNTIME) `@Target`({ElementType.METHOD}) `@CacheEvict`(value=""employees"", allEntries=""true"") public `@interface` EvictEmployees { }  `@EvictEmployees` `@CacheEvict`(""employee"") public void save(Employee employee)  Add a grouping annotation (such as `@CacheEvictions`) to group multiple `@CacheEvict` annotations in one place.   ---  **Affects:** 3.1 M1  **Reference URL:** http://blog.springsource.com/2011/02/23/spring-3-1-m1-caching/  2 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2011-02-23T08:34:04Z","2018-12-28T12:23:15Z"
"","12775","SimpleClientHttpResponse disconnects the underlying HttpURLConnection when closing [SPR-8123]","**[Juan Antonio Farré Basurte](https://jira.spring.io/secure/ViewProfile.jspa?name=juan.farre)** opened **[SPR-8123](https://jira.spring.io/browse/SPR-8123?redirect=false)** and commented  I've noticed that SimpleClientHttpResponse.close() (which it is documented you MUST always call it after completing the request) invokes HttpURLConnection.disconnect() for the wrapped connection. JDK javadoc for HttpURLConnection states the following:  Calling the close() methods on the InputStream or OutputStream of an HttpURLConnection after a request may free network resources associated with this instance but has no effect on any shared persistent connection. Calling the disconnect() method may close the underlying socket if a persistent connection is otherwise idle at that time.  So, when you close SimpleClientHttpResponse you may be disconnecting the underlying socket for a connection that could otherwise be reused (not the HttpURLConnection instance itself, but the underlying socket connection). I believe close should close any open InputStreams (if either HttpURLConnection.getErrorStream() or URLConnection.getInputStream() were invoked), but not invoke the disconnect method. If such functionality is required to be available for users of SimpleHttpUrlConnection, then I believe a new method should be added (for example disconnect()) that is not required to be called.  Thanks,  Juan  ---  **Affects:** 3.0.5  **Issue Links:** - #18612 HTTP persistent connections for HTTP Invoker and RestTemplate (_**""duplicates""**_) - #21717 SimpleClientHttpResponse.close() does not call close() on URLConnection.getInputStream() if SimpleClientHttpResponse.getBody() was not called before","closed","in: web,","spring-projects-issues","2011-03-31T08:58:03Z","2019-01-12T16:49:02Z"
"","12183","Synchronization in AnnotationMethodHandlerAdapter [SPR-7525]","**[Jozef Hovan](https://jira.spring.io/secure/ViewProfile.jspa?name=jozefhovan)** opened **[SPR-7525](https://jira.spring.io/browse/SPR-7525?redirect=false)** and commented  After upgrade from Spring framework 3.0.3 to 3.0.4 our web application started to throw IndexOutOfBoundsExceptions.  SEVERE: Servlet.service() for servlet ebroker threw exception java.lang.IndexOutOfBoundsException: Index: 0, Size: 0 at java.util.ArrayList.RangeCheck(ArrayList.java:547) at java.util.ArrayList.get(ArrayList.java:322) at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter$RequestMappingInfo.bestMatchedPattern(AnnotationMethodHandlerAdapter.java:1017) at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter$ServletHandlerMethodResolver.resolveHandlerMethod(AnnotationMethodHandlerAdapter.java:613) at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.invokeHandlerMethod(AnnotationMethodHandlerAdapter.java:422) at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.handle(AnnotationMethodHandlerAdapter.java:415) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:788) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:717) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:644) at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:560) at javax.servlet.http.HttpServlet.service(HttpServlet.java:637) at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)  ---  **Affects:** 3.0.4  **Issue Links:** - #10040 PathVariable mappings are greedy over hard coded mappings  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e035477e6ae363c8ed81ee11876f8a26a87909c1","closed","type: bug,","spring-projects-issues","2010-09-03T08:45:04Z","2019-01-11T15:01:39Z"
"","12460","JibxMarshaller supports method returns true for classes not in the configured binding [SPR-7804]","**[Josh Swan](https://jira.spring.io/secure/ViewProfile.jspa?name=swanjr)** opened **[SPR-7804](https://jira.spring.io/browse/SPR-7804?redirect=false)** and commented  As stated in the forum reference, the JibxMarshaller asks which classes the BindingFactory knows about. The problem is that a BindingFactory can see all the Jibx compiled classes whether the BindingFactory is configured for a specific binding file or not. This means the current implementation of the supports method will return true for classes in any binding file not just the one the JibxMarshaller is configured for. However, since the BindingFactory is configured for a specific binding it will ignore the other bindings when it tries to bind the XML to an object and throw the ""No unmarshaller for element"" error.  As shown in the forum by changing the JibxMarshaller's supports method to only check against the class that has been configured on the marshaller, the supports method will no longer act as a catch all for other binding file classes. Since the configured classes should represent the root xml elements in the xml document to be marshelled and Jibx automatically takes care of loading any referenced classes within the configured class, there should be no need to check against all the classes in specified binding file.  Right now I have created my own JibxMarshaller class with the supports method changed as mentioned in the forum post and so far I have had no issues. I noticed I wasn't able to inherit and override the supports method since the targetClass instance variable is not excessible to a subclass.  I am currently using Spring-ws 1.5.9 but I checked the source for the JibxMarshaller in the Spring 3.0 code base and it appears to have the same supports method implementation. Therefore, I would imagine it has the same issue but I haven't had time to test it explicitly.  ---  **Affects:** 3.0.5  **Reference URL:** http://forum.springsource.org/showthread.php?t=42137  **Issue Links:** - #12461 Add support for package binding in the JibxMashaller  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2010-11-23T06:56:40Z","2019-01-11T15:13:21Z"
"","12692","property-placeholder XSD is invalid and causes validation errors when used with attributes that worked in 3.0 like 'location' [SPR-8037]","**[Josh Long](https://jira.spring.io/secure/ViewProfile.jspa?name=joshlong)** opened **[SPR-8037](https://jira.spring.io/browse/SPR-8037?redirect=false)** and commented  Hiya,  the  spring-context-3.1.xsd definition for context:property-placeholder no longer validates correctly if you employ the 'location' attribute or any of the other attributes in Spring 3.0.  #12679 might also be related to this - I'm surprised his 'location' attribute worked.  In Spring 3.0, the XSD definition extended the 'propertyPlaceholder' type defintion, which included the 'location' attribute, etc. In 3.1, property-override still does extend that XSD type. So, it should just be a simple matter of replacing that extension in the 3.1 XSD for the property-placeholder element. here 's what was there in 3.0.                  ---  **Affects:** 3.1 M1  **Attachments:** - [mylyn-context.zip](https://jira.spring.io/secure/attachment/17726/mylyn-context.zip) (_11.48 kB_) - [mylyn-context.zip](https://jira.spring.io/secure/attachment/17719/mylyn-context.zip) (_966 bytes_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/76ce41855650efb18e8b242b9dd7320f682718d5","closed","in: core,","spring-projects-issues","2011-03-11T23:08:37Z","2019-01-11T12:40:21Z"
"","12607","UserCredentialsConnectionFactoryAdapter doesn't support the XAConnectionFactory interface  [SPR-7952]","**[Josh Long](https://jira.spring.io/secure/ViewProfile.jspa?name=joshlong)** opened **[SPR-7952](https://jira.spring.io/browse/SPR-7952?redirect=false)** and commented  I'm attaching a patch that supports XAConnectionFactory just as the class already supports ConnectionFactory. It authenticates where possible (using either the thread bound credentials, or the supplied credentials)   ---  **Attachments:** - [xa.patch](https://jira.spring.io/secure/attachment/17604/xa.patch) (_3.40 kB_)  1 votes, 1 watchers","closed","status: bulk-closed,","spring-projects-issues","2011-02-09T09:27:56Z","2019-01-12T03:31:28Z"
"","12437","@RequestParam - wanting List getting List [SPR-7781]","**[Josh Brackett](https://jira.spring.io/secure/ViewProfile.jspa?name=jbrackett)** opened **[SPR-7781](https://jira.spring.io/browse/SPR-7781?redirect=false)** and commented  In Spring 3.0.4 this works as expected but was regressed in 3.0.5  We have a parameter in a method that looks like this: `@RequestParam`(value = ""removeList"", required = false) List\ removeList  Where the parameter removeList on the page is a collection of checkboxes like below:  \ The method is getting Strings instead of Longs though so we get exceptions in the method when the type isn't what is expected.  ---  **Affects:** 3.0.5  **Issue Links:** - #12440 `@RequestParam` List list, will be filled up with String objects instead of Long objects (_**""is duplicated by""**_) - #12440 `@RequestParam` List list, will be filled up with String objects instead of Long objects - #12422 Wrong data-type resolution using custom Converter  1 votes, 6 watchers","closed","in: core,","spring-projects-issues","2010-12-01T13:48:49Z","2019-01-13T07:12:08Z"
"","12565","Handling Multipart request that is not an Action request ? [SPR-7910]","**[Joseph Vychtrle](https://jira.spring.io/secure/ViewProfile.jspa?name=vychtrle)** opened **[SPR-7910](https://jira.spring.io/browse/SPR-7910?redirect=false)** and commented  Hi,  I've been thinking if it is possible to handle Multipart request that is not an Action request. There is a reason why it seems impossible to me :  only ActionRequest implements getFile() kind of methods  What if I don't use a html form to upload a file and I don't want a view to be rendered after action request, which happens always after the action phase.  What if I want to create a post request (with file(s)) by ajax and use `@ResourceMapping` handler. How do I get it out of ResourceRequest ?  Thank you very much for your thoughts.  ---  **Affects:** 3.0.5  **Reference URL:** http://forum.springsource.org/showthread.php?p=341724  **Issue Links:** - #12318 Add multipart request support to portlet resource requests (_**""duplicates""**_)  1 votes, 0 watchers","closed","in: web,","spring-projects-issues","2011-01-25T08:50:49Z","2019-01-12T16:49:15Z"
"","12411","Spring InitBinder and PortletMultipartResolver - binding value to a model attribute fails [SPR-7755]","**[Joseph Vychtrle](https://jira.spring.io/secure/ViewProfile.jspa?name=vychtrle)** opened **[SPR-7755](https://jira.spring.io/browse/SPR-7755?redirect=false)** and commented  The forum thread describes it well, simply put, `@InitBinder`(""order"") does not bind the attribute under this name, but it uses the default attribute name, which is the name of the class implementation of the object returned.  It causes that the request parameters are not bind to the model object, returned by `@InitBinder`(""order"") method  If I switch request from multipart to standard text format, it works fine   ---  **Affects:** 3.0.4  **Reference URL:** http://forum.springsource.org/showthread.php?p=330646#post330646","closed","status: invalid,","spring-projects-issues","2010-11-19T14:13:27Z","2019-01-12T05:31:18Z"
"","12682","Portlet Annotation method handling [SPR-8027]","**[Josef Vychtrle](https://jira.spring.io/secure/ViewProfile.jspa?name=lisak)** opened **[SPR-8027](https://jira.spring.io/browse/SPR-8027?redirect=false)** and commented  Problem is, that in controller, if you have a default handler method and a more specific one (that specifies parameters etc.), the object RequestMappingInfo is created for both of them (used when resolving HandlerMethod), but for the ""specific"" one, ""RequestMappingInfo.methods"" field is sometimes always ""GET"" as a requirement.  I have two controllers with these handler methods, There is nothing like ""`@RequestMapping`(method = RequestMethod.GET)"", but still sometimes from unknown reasons, RequestMappingInfo.methods is populated with GET, which I'm describing later why it is a problem.  ``` @RequestMapping  // default render (action=list) public String showDefault(Model model) { 	return ""homeTabs""; } @RequestMapping(params = ""action=homeView"")  public String showHome(@RequestParam(""tabs1"") String tabs1, Model model) { 	System.out.println(""tabs1 : "" + tabs1); 	model.addAttribute(""tabs1"", tabs1); 	return ""homeTabs""; } ```  ``` if (mappingInfo.match(request)) { 	Method oldMappedMethod = targetHandlerMethods.put(mappingInfo, handlerMethod); 	if (oldMappedMethod != null && oldMappedMethod != handlerMethod) { 		throw .......... 	} } ```  Here then, the ""methods"" is GET for the specific handler method and the request is tested whether it is an instance of ClientDataRequest !?!? And it never is ... that's why the specific handler method is never chosen.  ``` public static boolean checkRequestMethod(Set methods, PortletRequest request) { 	if (!methods.isEmpty()) { 		if (!(request instanceof ClientDataRequest)) { 			return false; 		} 		String method = ((ClientDataRequest) request).getMethod(); 		if (!methods.contains(method)) { 			return false; 		} 	} 	return true; } ```  I'm using Liferay portlet container, and there is absolutely no ClientDataRequest employed.   ---  **Affects:** 3.1 M1","closed","type: enhancement,","spring-projects-issues","2011-03-08T11:15:59Z","2018-12-25T11:16:48Z"
"","12557","Mapping POST requests in Portlet environment is very unclear [SPR-7902]","**[Josef Vychtrle](https://jira.spring.io/secure/ViewProfile.jspa?name=lisak)** opened **[SPR-7902](https://jira.spring.io/browse/SPR-7902?redirect=false)** and commented  Hey,  I'm sending some ajax POST requests, using DefaultAnnotationHandlerMapping  > POST /web/guest/admin?p_p_id=1_WAR_brokerageportlet&p_p_lifecycle=0&p_p_state=normal&p_p_mode=view&p_p_col_id=column-1&p_p_col_count=1&_1_WAR_brokerageportlet_action=example22 HTTP/1.1  but no matter if it is a render or action request (lifecycle 0/1), following handler method is not used:  > `@Controller` > `@RequestMapping`(""VIEW"") > public class InvoicesController { > `@RequestMapping`(params = ""action=example22"", method = RequestMethod.POST) > public ResponseEntity\ responseEntityCustomHeaders() { > HttpHeaders headers = new HttpHeaders(); > headers.setContentType(MediaType.TEXT_PLAIN); >  > return new ResponseEntity\(""The String ResponseBody with custom header Content-Type=text/plain"",headers, HttpStatus.OK); > }  It must be `@RequestMapping`, because `@ActionMapping` doesn't return. I have to return some response to the client. I'm using spring-web-portlet almost a year, but I have never solved this...   ---  **Affects:** 3.0.5  **Attachments:** - [log](https://jira.spring.io/secure/attachment/17539/log) (_4.04 kB_)","closed","status: invalid,","spring-projects-issues","2011-01-23T19:28:47Z","2019-01-12T05:31:08Z"
"","12512","Portlet - DefaultAnnotationHandlerMapping @ActionMapping issue [SPR-7855]","**[Josef Vychtrle](https://jira.spring.io/secure/ViewProfile.jspa?name=lisak)** opened **[SPR-7855](https://jira.spring.io/browse/SPR-7855?redirect=false)** and commented  The issue I'm having is that I have UploadFormController for GET requests and PostUploadFormController for POST requests and if I declare `@ActionMapping` as it should be  > `@ActionMapping`(value = ""addDocOrder"") > public void addDocOrder(`@ModelAttribute`(""order"")..... >  >   And I get a request without parameters, then it ends up with ""No matching handler method found"" instead using the default `@RequestMapped` handler method . If I declared it like this :  > `@ActionMapping`(params = ""action=addDocOrder"") > public void addDocOrder(`@ModelAttribute`(""order"")..... >  >   It works, and the request is handled by the default `@RequestMapped` handler method...   ---  **Affects:** 3.0.4, 3.0.5  **Reference URL:** https://jira.springframework.org/browse/SPR-7685  **Attachments:** - [spring.log](https://jira.spring.io/secure/attachment/17486/spring.log) (_2.59 kB_)  1 votes, 0 watchers","closed","status: declined,","spring-projects-issues","2011-01-02T14:11:29Z","2019-01-12T16:26:20Z"
"","12643","Performance improvement in applicationContext.getBean() & AutoWired with complex beans [SPR-7988]","**[Jose Luis Freire](https://jira.spring.io/secure/ViewProfile.jspa?name=jfreire)** opened **[SPR-7988](https://jira.spring.io/browse/SPR-7988?redirect=false)** and commented  In an effort to improve the response time of our application we did some profiling and found out that too much time was being consumed by the Spring Framework itself.  The time was being consumed with applicationContext.getBean(), because in our application we almost don't have session scoped beans and in one request multiple beans can be instantiated.  Our beans are all annotated, with multiple Autowired properties, with several advices to process, and the timing of one bean instantiation was about from 50ms (the most simpler ones) to 150ms (the more complex ones) each.  In many of our pages, the bean instantiation was responsible for more than half of the total processing time.  In our profiling we found that the hotspot was in AopUtils.canApply() method.  What the Spring Framework is doing is evaluating the bean by reflection every time the bean is created, and with complex objects that operation can be really expensive.  The answer is simple, we should cache those results, but due to the complexity of this method we didn't felt comfortable in evaluating what was cacheable, so we choose other targets: - AopUtils.getMostSpecificMethod - AnnotationClassFilter.matches  We have very good results and we believe that in complex web applications where most of your beans aren't session scoped, the overall performance and responsiveness of the application can be greatly improved (in our tests, 10x).  What we're doing is trading memory for CPU.  To give credit where credit is due, we inspired our solution with Jonathan work (http://jawspeak.com/2010/11/28/spring-slow-autowiring-by-type-getbeannamesfortype-fix-10x-speed-boost-3600ms-to/)  Our test scenario is a simple page that instantiates the same bean 100 times. The total time dropped from more than 5s to about 500ms.  Attached is two screenshots of the profiler: 1) Profiling without cache 2) Profiling with cache  I'm also attaching the diffs for review.  By caching these two methods (AopUtils.getMostSpecificMethod(..), and AnnotationClassFilter.matches(..) and not AopUtils.canApply(..) we're probably giving a speed boost to all the framework, but I still believe that we must do some work with AopUtils, but I'll leave that to someone that understands more of the probable consequences.   ---  **Affects:** 3.0.5  **Attachments:** - [AnnotationClassFilter.java.diff](https://jira.spring.io/secure/attachment/17650/AnnotationClassFilter.java.diff) (_3.28 kB_) - [AopUtils.java.diff](https://jira.spring.io/secure/attachment/17651/AopUtils.java.diff) (_3.19 kB_) - [screenshot-1.jpg](https://jira.spring.io/secure/attachment/17648/screenshot-1.jpg) (_441.75 kB_) - [screenshot-2.jpg](https://jira.spring.io/secure/attachment/17649/screenshot-2.jpg) (_407.40 kB_)  9 votes, 14 watchers","closed","status: bulk-closed,","spring-projects-issues","2011-02-22T07:25:02Z","2019-01-12T03:31:13Z"
"","12476","Add support for @Request-/@ResponseBody to @ExceptionHandler methods [SPR-7820]","**[Joris Kuipers](https://jira.spring.io/secure/ViewProfile.jspa?name=jkuipers)** opened **[SPR-7820](https://jira.spring.io/browse/SPR-7820?redirect=false)** and commented  During a consultancy gig this came up: customer wants to be able to throw a custom exception from `@Controller` methods where the exception will contain an object that needs to be marshalled back to the client as JSON, since these methods respond to AJAX requests and thus the response will not be rendered directly by the browser. I tried to do this by adding a method to an abstract parent class of the relevant controllers that looked like this:  ``` @ExceptionHandler(MyCustomValidationErrorsException.class) @ResponseBody public MyCustomValidationErrors handleValidationErrors(MyCustomValidationErrorsException e) {     return e.getValidationErrors(); } ```  This prevents regular methods from having to specify `Object` as the return type, since they would otherwise need to return either a regular domain object or a `MyCustomValidationErrors` instance in the case of validation errors.  However, at the moment `@ResponseBody` is not supported for `@ExceptionHandler` methods, so this will simply ignore the annotation and render a view using the default view name resolution algorithm. I think this would be a very useful addition for the sketched use case, so I was wondering if this support could be added to the framework. I understand that there are other ways to achieve the desired functionality, but AFAICT it would require a relatively large amount of custom code that would duplicate much of the Spring MVC-provided functionality.  ---  **Affects:** 3.0.5  **Issue Links:** - #11567 `@ResponseBody` does not work with `@ExceptionHandler` (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2010-12-15T02:54:52Z","2019-01-13T07:11:53Z"
"","12475","Add  attribute to check for request params in addition to URL [SPR-7819]","**[Joris Kuipers](https://jira.spring.io/secure/ViewProfile.jspa?name=jkuipers)** opened **[SPR-7819](https://jira.spring.io/browse/SPR-7819?redirect=false)** and commented  During a consultancy gig this came up: customer wants to render an MVC view directly for certain URLs, but only if these requests have a certain request param like 'cancel'. Currently  can map URLs to views, but it's limited to match on the URL itself only and cannot take request params into account. It would be nice if we could add an additional, optional attribute to view-controller similar to how the 'params' attribute of `@RequestMapping` works. Note that this would be a fully backwards compatible extension of the mvc namespace.   ---  **Affects:** 3.0.5","closed","type: enhancement,","spring-projects-issues","2010-12-15T02:22:19Z","2012-02-28T05:58:04Z"
"","12403","Provide support for configuring the bindable properties of a form-backing object using field-level annotations [SPR-7747]","**[Joris Kuipers](https://jira.spring.io/secure/ViewProfile.jspa?name=jkuipers)** opened **[SPR-7747](https://jira.spring.io/browse/SPR-7747?redirect=false)** and commented  Currently one has to implement an `@InitBinder` annotated method to configure which properties of a form backing object can be used for binding request parameters to. It's often important to do this to prevent attackers from being able to bind to fields that shouldn't be exposed as writable to the web tier, esp. when domain objects are used directly as form backing objects. However, the current way of doing this involves referring to the properties of these form backing objects using hardcoded Strings (using the setAllowedFields or setDisallowedFields methods) from your controller methods, which is very refactoring-unfriendly and seems like an oldfashioned, pre-Java 5 approach.  I'd like to see support for annotating your classes used as form backing objects to indicate which fields are bindable. Non-annotated classes would behave like they do now for backwards compatibility, but adding an annotation to one or more fields would automatically exclude the non-annotated fields from participating in the binding process. Although this wouldn't cover all cases (some applications may have different actions that bind to the same type but with different binding restrictions, so this needs to be overridable on a case-by-case basis), I think it would cover the bulk of the binding restriction needs that people have. The easier we make it for users to apply proper security constraints to their application the better: right now it's simply too much of a hassle for some people to bother with configuring the WebDataBinder for each controller. Obviously I haven't completely thought this through, so the actual functionality might certainly be improved upon, but I'm sure this illustrates the general idea of what I'd like the framework to support.  ---  **Affects:** 3.0.5  **Issue Links:** - #18012 Add `@FormAttribute` attributes to customize x-www-form-urlencoded - #18408 Addressing Mass Assignment vulnerabilities with `@NoBind` annotation for domain objects - #19763 Data binding with immutable objects (Kotlin / Lombok / `@ConstructorProperties`)  7 votes, 3 watchers","open","type: enhancement,","spring-projects-issues","2010-11-17T06:37:50Z","2020-05-04T14:37:02Z"
"","12373","SelectedValueComparator#exhaustiveCompare should support using Converters and Formatters like PropertyEditors  [SPR-7717]","**[Joris Kuipers](https://jira.spring.io/secure/ViewProfile.jspa?name=jkuipers)** opened **[SPR-7717](https://jira.spring.io/browse/SPR-7717?redirect=false)** and commented  For traditional PropertyEditor-based binding of objects to form fields, SelectedValueComparator#exhaustiveCompare will convert objects to String if the candidate is a String: this results in nice, desired behavior when for example a form:options tag uses the String representation for itemValue instead of the actual object from the items collection. However, this behavior is not implemented when one uses the new Converter and Formatter based binding. Since this is the recommended way of doing binding in the latest Spring versions, it would be nice if this exhaustive compare functionality could also be supported for these new binding methods.   ---  **Affects:** 3.0.5","closed","type: enhancement,","spring-projects-issues","2010-11-03T14:46:47Z","2018-12-28T11:30:02Z"
"","12369","ResourceHttpRequestHandler shouldn't return 404 when mime-type of existing resource can't be determined (and maybe try harder) [SPR-7713]","**[Joris Kuipers](https://jira.spring.io/secure/ViewProfile.jspa?name=jkuipers)** opened **[SPR-7713](https://jira.spring.io/browse/SPR-7713?redirect=false)** and commented  Currently, the ResourceHttpRequestHandler returns a 404 NOT FOUND when a resource is requested for which ServletContext#getMimeType() returns null. This causes severe issues when common files have no associated mime type configured in the server, which might be avoidable by using some generic mime type and/or by trying an alternative approach like the Java Activation framework to determine the mime type if the servlet context can't. I ran into this on a WebLogic 10.3.2 server, which didn't even return a mime type for .gif, .png and .js files. Not sure if this was caused by a misconfiguration of the server or if WebLogic really doesn't have any pre-configured mime types for these files, but now the only solution was to add a bunch of mime type mappings to the web.xml.   ---  **Affects:** 3.0.5  **Attachments:** - [AdvancedResourceHttpRequestHandler.java](https://jira.spring.io/secure/attachment/17700/AdvancedResourceHttpRequestHandler.java) (_2.93 kB_)  **Backported to:** [3.0.7](https://github.com/spring-projects/spring-framework/milestone/74?closed=1)  5 votes, 4 watchers","closed","type: bug,","spring-projects-issues","2010-11-02T14:03:49Z","2012-06-19T03:39:28Z"
"","12362","304 responses should not have non-0 Content-Length [SPR-7706]","**[Joris Kuipers](https://jira.spring.io/secure/ViewProfile.jspa?name=jkuipers)** opened **[SPR-7706](https://jira.spring.io/browse/SPR-7706?redirect=false)** and commented  ServletWebRequest#checkNotModified will set a 304 response code, but doesn't set the Content-Length header to 0. This leads to exception on WebLogic, which gets all worked up about the fact that there's no response body even though the Content-Length headers claims there is:  \ \ \","closed","type: bug,","spring-projects-issues","2010-11-01T14:32:23Z","2019-01-11T15:30:59Z"
"","11918","ResponseStatus.reason() ignored for @ExceptionHandler methods [SPR-7259]","**[Joris Kuipers](https://jira.spring.io/secure/ViewProfile.jspa?name=jkuipers)** opened **[SPR-7259](https://jira.spring.io/browse/SPR-7259?redirect=false)** and commented  `AnnotationMethodHandlerExceptionResolver#getModelAndView(...)` only takes `ResponseStatus#value()` into consideration and ignores `ResponseStatus#reason()`. It should act like `ResponseStatusExceptionResolver#resolveResponseStatus(...)` and check if a reason is provided as well.   ---  **Affects:** 3.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4764fa53f0e1209753519dc4a7bfcd4a080c01e4","closed","type: bug,","spring-projects-issues","2010-06-03T22:59:05Z","2012-06-19T03:43:07Z"
"","11880","Missing and/or misspelled words in 3.0 framework reference [SPR-7221]","**[Jonathan Spooner](https://jira.spring.io/secure/ViewProfile.jspa?name=spoonerj30)** opened **[SPR-7221](https://jira.spring.io/browse/SPR-7221?redirect=false)** and commented  The following lines are found in: **3.6.2 ApplicationContextAware and BeanNameAware**  > ...a class that implements the org.springframework.-contxt-.ApplicationContextAware interface... > **Possible Solution:** ...a class that implements the org.springframework.+context+.ApplicationContextAware interface...  The following lines are found in: **3.11.5 Further information about how Java-based configuration works internally**  > -Behaviour- could be different according to the scope of your bean. > **Possible Solution:** +Behavior+ could be different according to the scope of your bean.  The following lines are found in: **3.9 Annotation-based container configuration**  > No matter the choice, Spring can -accomodate- both styles > **Possible Solution:** No matter the choice, Spring can +accommodate+ both styles    ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ecf2d8c5de624c09433bdbe43b34f57ac212f005","closed","type: task,","spring-projects-issues","2010-05-19T16:55:48Z","2012-06-19T03:43:01Z"
"","11901","As a developer I want to be able to specify the request method(s) a @ModelAttribute should apply to [SPR-7242]","**[Jonathan Ruckwood](https://jira.spring.io/secure/ViewProfile.jspa?name=jon_ruckwood)** opened **[SPR-7242](https://jira.spring.io/browse/SPR-7242?redirect=false)** and commented  I'm in a situation where there is prolific use of `@ModelAttribute` annotations in a project, however in most circumstances the model-data is only needed on either the POST or GET, consequently we are needlessly resolving attributes when they won't be used.  I'm proposing something along the lines of this:  ```java @ModelAttribute(""orderAddressList"", RequestMethod.GET) @ModelAttribute(""orderAddressList"", {RequestMethod.GET, RequestMethod.POST}) @ModelAttribute(""orderAddressList"") // Optional, without any RequestMethod the annotation works as it does currently. ```  The following should not be allowed, i.e. an exception should be thrown:  ```java @ModelAttribute(""foo"", RequestMethod.GET) public Foos getFoos() { 	return foos; }  @RequestMapping(method = RequestMethod.POST) public String doPost(@ModelAttribute(""foo"") Foos foos) { //","closed","type: enhancement,","spring-projects-issues","2010-05-28T03:15:16Z","2019-01-11T13:21:07Z"
"","12083","Update the AbstractPdfView class to point to the renamed itextpdf package names [SPR-7425]","**[Jonathan Nuñez Aguin](https://jira.spring.io/secure/ViewProfile.jspa?name=jonyfive)** opened **[SPR-7425](https://jira.spring.io/browse/SPR-7425?redirect=false)** and commented  Spring needs to update the AbstractPdfView class to point to the renamed itextpdf package names.  For now, the alternative is to download an old version of iText (2.1.7) that has the com.lowagie.* package names. The actual version for iText is 5.0.2.  ---  **Affects:** 3.0.3  **Issue Links:** - #12614 Update AbstractPdfView to use com.itextpdf.* package (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2010-08-05T09:15:20Z","2019-01-11T14:08:10Z"
"","12080","Document use of ApplicationEventPublisher [SPR-7422]","**[Jon Travis](https://jira.spring.io/secure/ViewProfile.jspa?name=jtravis)** opened **[SPR-7422](https://jira.spring.io/browse/SPR-7422?redirect=false)** and commented  Section 3.13.2 (Standard and Custom Events) of the reference manual is out of date wrt best practices.  - It does not talk about using ApplicationListener\ with a type argument, thus removing instanceof checks in the event callback - It does not espouse the use of ApplicationEventPublisher and ApplicationEventPublisherAware  In both cases, the javadoc for the corresponding bits is correct and up-to-date, it simply needs to be referenced in the manual.  ---  **Affects:** 3.0 GA  **Issue Links:** - #12053 Document generic use of ApplicationListener interface (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9008cf907ae2d537cc65640a79f0834823f113fb","closed","type: documentation,","spring-projects-issues","2010-08-03T12:11:27Z","2019-01-11T14:07:43Z"
"","11975","Transaction names should use the concrete class name [SPR-7317]","**[Jon Travis](https://jira.spring.io/secure/ViewProfile.jspa?name=jtravis)** opened **[SPR-7317](https://jira.spring.io/browse/SPR-7317?redirect=false)** and commented  We often see transaction names such as org...ApplicationListener#onApplicationEvent  This is generally not that useful, since many things can implement such an interface.  It would be much nicer if the concrete class name was used for the class portion of the transaction name  ---  **Affects:** 3.0.3  **Issue Links:** - #14435 Performance degradation for TransactionInterceptor  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4d56b896198960695b7d9812c00142b2c9e31b5b","closed","type: enhancement,","spring-projects-issues","2010-06-23T04:19:44Z","2019-01-11T14:21:30Z"
"","12701","Interactions Between WeakReferenceMonitor, WebSphereUowTransactionManager and WebSphere mean the monitored EJB never becomes weakly reachable [SPR-8046]","**[Jon Seymour](https://jira.spring.io/secure/ViewProfile.jspa?name=jonseymour)** opened **[SPR-8046](https://jira.spring.io/browse/SPR-8046?redirect=false)** and commented  There is an unfortunate interaction between WeakReferenceMonitor and WebSphereUowTransactionManager that causes the EJB monitored by the WeakReferenceMonitor thread never to be come weakly reachable. As a result, the classloader containing the WeakReferenceMonitor is pinned across application restarts, resulting in cumulative memory loss and the need to restart the app server in order to recover the lost memory.  The issue ultimately results from the fact that the UserTransactionWrapper (a WebSphere class) resulting from the jndi lookup performed by WebSphereUowTransactionManager does itself contain a reference the EJB that was on the thread at the time the transaction manager was initialized. As a result, the EJB is strongly reachable from the classloader and so the WeakReferenceMonitor never terminates. If the WeakReferenceMonitor never terminates, the contextClassLoader it refers to will always be strongly reachable meaning that the application class loader itself is never recovered.  The following path from the thread running the WeakReferenceMonitor was captured by taking a system dump of the JVM, post processing it with jextract.exe and then using the Eclipse Memory Analysis Tool (MAT) to analyse the path. The first word of each line is (sometimes) the field of the class from the line above that references an instance of the class to the right.  In this case, we have the weak reference monitor thread holding on the class loader. The class loader has an AOP proxy for a transaction interceptor which holds a reference to an instance of WebSphereUowTransactionManager. This holds an instance of UserTransactionWrapper obtained from a JNDI lookup and this ultimately has a reference to the very EJB instance being monitored by the WeakReferenceMonitor.  java.lang.Thread @ 0x56dd238  org.springframework.util.WeakReferenceMonitor Thread contextClassLoader com.ibm.ws.classloader.CompoundClassLoader @ 0x2c77168 class net.sf.cglib.proxy.Enhancer @ 0x3bf73188 SOURCE net.sf.cglib.core.AbstractClassGenerator$Source @ 0x59c5148 cache java.util.WeakHashMap @ 0x59c5160 table java.util.WeakHashMap$Entry[16] @ 0x59c53c0 java.util.WeakHashMap$Entry @ 0x5741080 java.util.HashMap @ 0x5740ff0 java.util.HashMap$Entry[64] @ 0xc367b80 java.util.HashMap$Entry @ 0x5755c08 net.sf.cglib.proxy.Enhancer$EnhancerKey$$KeyFactoryByCGLIB$$7fb24d72 @ 0x5740fc8 FIELD_2 org.springframework.aop.framework.Cglib2AopProxy$ProxyCallbackFilter @ 0x573ca40 org.springframework.aop.framework.AdvisedSupport @ 0x573ca58 advisorArray org.springframework.aop.Advisor[6] @ 0x573d1c8 org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl @ 0x561d9a8 aspectInstanceFactory org.springframework.aop.aspectj.annotation.LazySingletonAspectInstanceFactoryDecorator @ 0x5612120 materialized org.spring.framework.TransactionInterceptor @ 0x56f7e28 transactionManager org.springframework.transaction.jta.WebSphereUowTransactionManager @ 0x5995aa8 userTransaction com.ibm.ejs.container.UserTransactionWrapper @ 0x59c49f8 ivSavedCallbackBeanO com.ibm.ejs.container.BMStatelessBeanO @ 0x56db7c0 sessionBean, ivEjbInstance org.example.RemoteDomainServiceEJB @ 0x56db6c8    ---  **Affects:** 2.5.6","closed","status: bulk-closed,","spring-projects-issues","2011-03-12T08:43:31Z","2019-01-12T03:50:05Z"
"","12334","Memory consumed by AspectJ type analysis proportional to k * P * T [SPR-7678]","**[Jon Seymour](https://jira.spring.io/secure/ViewProfile.jspa?name=jonseymour)** opened **[SPR-7678](https://jira.spring.io/browse/SPR-7678?redirect=false)** and commented  I have been doing a heap dump analysis of a 64bit JVM that uses Java5, Spring and AspectJ point cuts.  I have observed the following:  * the number of ReflectionWorlds in the JVM is ~= the number of PointCuts declared to Spring (P) * the number of World.TypeMap entries (T) is proportional to the number of types reachable from declarations of beans that Spring can instantiate (T) * the number of ReferenceType instances in the JVM is ~= k * the number of World.TypeMap entries  In my case, P is 15, k is observed to be 10 and T is around 4,500.  In other words, the JVM contains 15 * 10 * 5,000 ~ 675,000 ReferenceType objects!  Given that the system only has 4,500 types in it, it seems somewhat absurd that there should be 675,000 ReferenceType objects, but this is what the measurements show.  Is it really necessary that AspectJ creates 10 ReferenceType objects per type?  Is it really necessary that each PointCut introduced by Spring has its own ReflectionWorld?  If these two issues could be fixed, the number of ReferenceType objects consumed by this application could be reduced by a factor of 150 which is not an insignificant saving.    ---  **Affects:** 3.0.5  **Attachments:** - [issue-7678-2.5.6-0001.patch](https://jira.spring.io/secure/attachment/17300/issue-7678-2.5.6-0001.patch) (_9.69 kB_) - [one-reflection-world-per-factory.patch](https://jira.spring.io/secure/attachment/17288/one-reflection-world-per-factory.patch) (_10.09 kB_) - [spring.patch](https://jira.spring.io/secure/attachment/17268/spring.patch) (_5.90 kB_)  3 votes, 5 watchers","closed","status: bulk-closed,","spring-projects-issues","2010-10-25T06:18:11Z","2022-03-25T11:47:17Z"
"","12333","Possible Double Release Problem With AbstractEnterpriseBean [SPR-7677]","**[Jon Seymour](https://jira.spring.io/secure/ViewProfile.jspa?name=jonseymour)** opened **[SPR-7677](https://jira.spring.io/browse/SPR-7677?redirect=false)** and commented  Inspection of AbstractEnterpriseBean.java reveals a double release problem with a consequence that multiple instances of a Spring context get created when only a single instance is expected.  The problem arises because the reference to the Spring context obtained from the beanFactoryLocator is released both by the ejbRemove path and also by the path invoked from the MonitorProcess daemon thread that is set up by the call to WeakReferenceMonitor.handle.  The following describes how this double release causes a slow resource leak in an EJB container that is using Spring.  Suppose that an EJB pool has 2 EJBs but the pool can grow to 4 under load.  4 EJBs are created and the reference count on the bean factory reference is then 4.  Now, two of the EJBs become idle and are removed from the container. The container calls ejbRemove twice for the removed beans, and the reference count is dropped to 2. The removed EJBs become weakly reachable and the MonitorProcess thread decrements the reference count again, and the reference count is decremented for each weakly reachable EJB thereby becoming zero. The BeanReference then releases the bean factory and removes it from the bean factory locator.  New calls via the remaining EJBs continue to use the existing bean factory reference, but newly instantiated EJBs will call the locator again and obtain a new copy of the factory, resulting in the JVM running with two copies of the factory instead of just one.  When AspectJ is involved, this also has the consequence of increasing the number of AspectJ related resources that are created and pinned by the application classloader.  It would seem that the number of unexpected extra Spring factories that could be created and co-exist in this way is limited only by a) the size of the containers EJB pool and b) the number of times the pool discards underutilized EJBs  The fix would appear to be to make the listener call unloadBeanFactory() to perform the release and to make the implementation of this method synchronized (at least as far as setting the beanFactoryReference to null).    ---  **Affects:** 2.5.6, 3.0.5","closed","in: core,","spring-projects-issues","2010-10-23T02:16:40Z","2019-01-12T05:31:27Z"
"","12298","Thread safety issue in InjectionMetaData affecting setter methods annotated with @Resource tags [SPR-7642]","**[Jon Seymour](https://jira.spring.io/secure/ViewProfile.jspa?name=jonseymour)** opened **[SPR-7642](https://jira.spring.io/browse/SPR-7642?redirect=false)** and commented  This issue was detected with Spring 2.5.6, but the same issue exists in Spring 3.0.4  The issue is very similar to the issue reported in 7635, but involves different code paths.  File: org/springframework/beans/factory/annotation/InjectionMetadata.java Lines: 150-155 (inject), 172-182 (checkPropertySkipping).  Assume a large number of threads are released at the interface of a freshly initialized Spring container containing several prototype bean definitions with `@Resource` annotations on a setter method.  Suppose that at least two threads enter the inject() method at the same time.  Both threads will see this.skip == null and proceed to call checkPropertySkipping(pvs) at line 151.  Both threads enter checkPropertySkipping. Thread 1 enters the first branch, and evaluates the expression pvs.contains(this.pd.getName()) and sees false. Thread 1 proceeds to the next if block, evaluats pvs instanceof MutablePropertyValues as true, then calls pvs.registerProcessedProperty. It then exits the method with a return value of false. this.skip is set to false, and the reflective method call is executed (line 159).  At this point Thread 2 resumes. When it evaluates pvs.contains(this.pd.getName()) it sees the value true and therefore takes the true branch of the nested if statement. this.skip is then set to true and the method returns without executing the reflective method call at line 159. All subsequent entrants into this method for this object will see this.skip as true and thus return early from the function without executing the reflective method call.  The net result is that only one instance has its `@Resource` annotated setter method call and all subsequent instances of the same bean fail to have their dependency injected as expected.  It will be noted that if thread 1 proceeds to completion without interference from Thread 2, then this.skip will be set to false and all instances will be initialized as expected (and, as normally observed, in a environment in which initialization occur gradually).  The obvious solution to this issue is to synchronize the execution of the block of code between lines 150 and 155.  ---  **Affects:** 2.5.6, 3.0.4  **Issue Links:** - #12291 Unresolved thread safety issue in AutowiredAnnotationBeanPostProcessor.AutowiredMethodElement  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7893b3ebf68946a942e55d12ba828bfd044e4d00, https://github.com/spring-projects/spring-framework/commit/ac5b1bcfabf30273e69359ba4ead29b4704eaa89","closed","in: core,","spring-projects-issues","2010-10-11T06:08:22Z","2019-01-11T14:30:19Z"
"","12291","Unresolved thread safety issue in AutowiredAnnotationBeanPostProcessor.AutowiredMethodElement [SPR-7635]","**[Jon Seymour](https://jira.spring.io/secure/ViewProfile.jspa?name=jonseymour)** opened **[SPR-7635](https://jira.spring.io/browse/SPR-7635?redirect=false)** and commented  There remains a thread safety issue in AutowiredAnnotationBeanPostProcessor.AutowiredMethodElement  This issue is unrelated to the issue reported in #10329 and represents a seperate exposure.  The issue was detected with Spring 2.5.6. Inspection reveals that the same issue exists in Spring 3.0.4.RELEASE  In the description that follows, Block A refers to the code starting at line 535 of    org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor and Block B refers to the code start at line 593 of the same class.  Both lines are within the inject(Object bean, String beanName, PropertyValues pvs) method of the AutowiredMethodElement inner class.  The blocks are quoted here for ease of reference:  // Block A - line 535      if (this.skip == null && this.pd != null && pvs != null && pvs.contains(this.pd.getName())) {                // Explicit value provided as part of the bean definition.                                                                                                          this.skip = Boolean.TRUE; Line 535        }  // Block B - line 593 if (this.skip == null) { if (this.pd != null && pvs instanceof MutablePropertyValues) { ((MutablePropertyValues) pvs).registerProcessedProperty(this.pd.getName()); // Line 595 } this.skip = Boolean.FALSE; // Line 597 }  The issue arises because the statements execute in Block A and Block B are not executed atomically. In particular, if a Thread 1 is suspended after Line 595 by the Java Scheduler, then pvs.contains(this.pd.getName()) will return true for some other thread, Thread 2, executing block A causing Thread 2 to take the branch in that block.  If Thread 2 is then suspended before reaching Line 535 and Thread 1 executes line 597 then thread 2 is resumed, this.skip will be set to TRUE and remain TRUE.  As a result all further executions of the inject method will fail to execute the body of the inject method resulting in the failure of Spring to inject autowired dependencies into all subsequent instances of the bean until such time as the bean factory is eventually refreshed. On the otherhand, if thread 1 executes to completion without being interleaved with Thread 2, this.skip will be set to false and the intended behaviour will be observed.  The issues can occur even without the specified thread interleavings, given Java Memory Model implementation considerations.  ---  **Affects:** 2.5.6, 3.0.4  **Issue Links:** - #12342 NullPointerException in InjectionMetadata - #12298 Thread safety issue in InjectionMetaData affecting setter methods annotated with `@Resource` tags  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5cb06f5da23da2dd951ed320b12244942c00a90a, https://github.com/spring-projects/spring-framework/commit/27a10c74d1b1daca99cffd00b0b4e03b96d747c2, https://github.com/spring-projects/spring-framework/commit/7893b3ebf68946a942e55d12ba828bfd044e4d00, https://github.com/spring-projects/spring-framework/commit/ac5b1bcfabf30273e69359ba4ead29b4704eaa89","closed","in: core,","spring-projects-issues","2010-10-09T22:13:58Z","2019-01-13T07:12:44Z"
"","12353","Multiple PropertyPlaceholderConfigurers using @Component don't have unique bean names [SPR-7697]","**[Jon Osborn](https://jira.spring.io/secure/ViewProfile.jspa?name=jonnio)** opened **[SPR-7697](https://jira.spring.io/browse/SPR-7697?redirect=false)** and commented  When using annotation based configurations and `@Configuration` with PropertyPlaceholderConfigurer and defining more than one without bean names causes the system to ignore the additional configurers without unique names. Using XML configuration, there is no requirement for a bean name/id, the name will be automatically and uniquely generated. Annotation based configuration should follow the same procedure. This is important when using third party software that might not have attached a name to their configurers. using `@Import` with two classes has no effect either.  `@Configuration` public class PropertiesConfiguration {      /**      * The configuration object for first property file      *      * @return the configuration      */     @Bean     PropertyPlaceholderConfigurer PropertyConfigurer() {         PropertyConfigurer propertyConfigurer =                 new PropertyPlaceholderConfigurer();         propertyConfigurer.setLocation(                 new ClassPathResource( ""first.properties"" ) );         propertyConfigurer.setPlaceholderPrefix( ""@{"" );         return propertyConfigurer;     }          @Bean     PropertyPlaceholderConfigurer PropertyConfigurerEncrypted() {         PropertyConfigurer propertyConfigurer =                 new PropertyPlaceholderConfigurer();         propertyConfigurer .setLocation(                 new ClassPathResource( ""second.properties"" ) );         propertyConfigurer.setPlaceholderPrefix( ""RSA{"" );         return propertyConfigurer ;     }  }   ---  **Affects:** 3.0.4  **Attachments:** - [test.zip](https://jira.spring.io/secure/attachment/19426/test.zip) (_5.10 kB_)","closed","","spring-projects-issues","2010-10-29T08:29:36Z","2019-01-11T14:33:36Z"
"","12048","TypeDescriptor.forElementType() does not work for TypeDescriptor obtained via TypeDescriptor.valueOf() [SPR-7390]","**[Jon Kranes](https://jira.spring.io/secure/ViewProfile.jspa?name=jkranes)** opened **[SPR-7390](https://jira.spring.io/browse/SPR-7390?redirect=false)** and commented  Based on JavaDoc for TypeDescriptor.forElementType(), I expect the expression:  ``` TypeDescriptor.valueOf(java.util.List.class).forElementType(String.class) ```  should produce a TypeDescriptor for parameterized List of type String, i.e. java.util.List\.  However, the implementation for a TypeDescriptor that was not originally constructed from a Field or MethodParameter simply does:  ``` return TypeDescriptor.valueOf(elementType); ```  The expected behavior is very useful as there appears to be no other way to programmatically construct a TypeDescriptor for a parameterized collection, without having reference to a Field or MethodParameter object.  The workaround is to create or refer to a field or method in some arbitrary class in order to use the Field or MethodParameter constructors, but this is awkward and would be unnecessary if the forElementType worked as expected.  Simple unit test:  ```     @Test     public void testForElementType() {         TypeDescriptor td = TypeDescriptor.valueOf(java.util.List.class).forElementType(String.class);         // Fails. getType() returns java.util.String         assertEquals(java.util.List.class, td.getType());           //Fails.  getElementType() returns null         assertEquals(String.class, td.getElementType());       } ```  ---  **Affects:** 3.0.3  **Issue Links:** - #12253 Construct org.springframework.core.convert.TypeDescriptor programatically for collections","closed","type: enhancement,","spring-projects-issues","2010-07-22T00:08:18Z","2019-01-11T13:38:46Z"
"","12850","ApplicationEvent should take generics into account when dispatching events [SPR-8201]","**[Jon Brisbin](https://jira.spring.io/secure/ViewProfile.jspa?name=jbrisbin)** opened **[SPR-8201](https://jira.spring.io/browse/SPR-8201?redirect=false)** and commented  The ApplicationEvent dispatcher should take generics information into account when deciding whether to call a particular `ApplicationListener`. This would allow the user to register an `ApplicationListener` for their event subclass like this:  ```java public class BeforeSaveEvent extends ApplicationEvent {} public class MyListener implements ApplicationListener{} ```  When a `BeforeSaveEvent` event is dispatched, only those `ApplicationListener` that have specified `MyDomainObject` in the generics clause will be dispatched to the configured listener (such as `MyListener`)  ---  **Affects:** 3.0.5  **Issue Links:** - #15847 improve ApplicationListener to support generic types (_**""duplicates""**_)  2 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2011-04-04T08:47:54Z","2019-01-11T13:08:18Z"
"","12441","OptionTag doesn't utilize conversion service to display [SPR-7785]","**[Johnny Zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=johnny2002)** opened **[SPR-7785](https://jira.spring.io/browse/SPR-7785?redirect=false)** and commented  I have a class ""Transaction"", then a list of ""Transaction"" as the items of  or . And I have registered a TransactionToStringConverter. While, I found the 2 tags can't utilize this converter, but  can utilize it correctly.  As I looked into the source code, I did an emergency fix as attached ""OptionWriter.java"".   ---  **Affects:** 3.0.5  **Reference URL:** http://forum.springsource.org/showthread.php?p=332456  **Attachments:** - [OptionWriter.java](https://jira.spring.io/secure/attachment/17421/OptionWriter.java) (_10.09 kB_)","closed","in: web,","spring-projects-issues","2010-12-02T05:20:01Z","2019-01-11T15:38:47Z"
"","11969","The SelectedValueComparator is too slow [SPR-7310]","**[Johnny Zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=johnny2002)** opened **[SPR-7310](https://jira.spring.io/browse/SPR-7310?redirect=false)** and commented  Since there are several  on the page, the rendering is very very slow. As I researched, if I remove the ""exhaustiveCompare"" and ""exhaustiveCollectionCompare"" methods, it will much faster. While, not everyone need exhaustive compare. So I suggest change this class configurable. 1. Change the methods to instance methods (remove ""static"") 2. Config it as a bean in application context (e.g. like ""messageSource""). The default config may enable ""exhaust compare"", while we can change to disable ""exhaust compare"".    ---  **Affects:** 3.0.3  **Attachments:** - [SelectedValueComparator.java](https://jira.spring.io/secure/attachment/16758/SelectedValueComparator.java) (_8.10 kB_)","closed","type: enhancement,","spring-projects-issues","2010-06-21T21:10:34Z","2015-09-22T17:34:31Z"
"","12514","Using common parameter 'synchronizeOnSession' requires complex setup [SPR-7857]","**[Johnathon](https://jira.spring.io/secure/ViewProfile.jspa?name=outdooricon)** opened **[SPR-7857](https://jira.spring.io/browse/SPR-7857?redirect=false)** and commented  It seems pretty common for  a lot of users to stick with using """" in their application context, as it contains a lot of commonly used default settings that don't require any more customization. However, if they want to use the 'synchronizeOnSession' feature (which would also seem to be a pretty common use case for Web applications), it's a much more complex setup, of which there seems to be little documentation as to how exactly to go from """" to an extracted xml configuration that allows you to have the same setup. My proposed solution for this would be to add the boolean 'synchronizeOnSession' attribute to """" (continuing to let the default be false) and pass that straight through to AnnotationMethodHandlerAdapter being set up in the AnnotationDrivenBeanDefinitionParser. This would remove the need for a complex setup just to be able to take advantage of this very useful parameter.   ---  **Affects:** 3.0.4","closed","type: enhancement,","spring-projects-issues","2011-01-03T08:59:55Z","2011-12-14T06:27:26Z"
"","12062","please add JMS JsonMessageConverter [SPR-7404]","**[John Thoms](https://jira.spring.io/secure/ViewProfile.jspa?name=jthoms)** opened **[SPR-7404](https://jira.spring.io/browse/SPR-7404?redirect=false)** and commented  org.springframework.jms.support.converter.JsonMessageConverter would handle marshalling of JMS payloads similiar to MappingJacksonHttpMessageConverter for http and spring-amqp/org.springframework.amqp.support.converter.JsonMessageConverter  ---  **Reference URL:** http://forum.springsource.org/showthread.php?p=311501  **Issue Links:** - #11909 Add JsonMessageConvertor to Spring JMS from Spring Extensions project SE-AMQP (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1adf82503bf76142914ef423355aea6d8af7e247, https://github.com/spring-projects/spring-framework/commit/7ec9292e549e8e3177e40d08f0743c0175f70ec7  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2010-07-28T08:31:45Z","2019-01-11T14:04:25Z"
"","12374","Deadlock between DefaultListableBeanFactory and DefaultSingletonBeanRegistry, perhaps due to lazily-instantiated aspect [SPR-7718]","**[John Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=sowberry)** opened **[SPR-7718](https://jira.spring.io/browse/SPR-7718?redirect=false)** and commented  Deploying EAR on Weblogic 10.0.  Root XmlWebApplicationContext ends up w/ about 300 bean definitions from 3 WARs, which takes long enough to instantiate to see this behavior.  Each WAR publishes web services specified in Spring contexts as Apache CXF endpoints.  Service implementations are annotated so that an aspect can monitor traffic to all services.  The traffic is reported to a monitoring process (deployed separately, but also a CXF webservice) at set intervals by Quartz jobs.  The Quartz jobs are not wired via Spring integration;  the Spring context just declares an org.quartz.Scheduler which gets injected into ""updater"" classes that add associated jobs right after instantiation (`@PostConstruct`).  This architecture has worked well for over a year, but we recently added a JAX-WS Handler to the traffic reporting, and this seemed to affect the timing of the context initialization enough that this deadlock started appearing (and it happens everytime without fail, usually for the same bean names as viewed in debugger, although the same EAR deployed on JBoss 4.2 works fine;  different classloader architecture).  What it looks like is that one of the Quartz jobs triggers while Spring is in the process of pre-instantiating singletons, and an aspect on the traffic reporting client (picked up via \ and annotated w/ AspectJ `@Aspect` and Spring `@Component`, pointcuts defined AspectJ-style) required for the Quartz job is lazily instantiated for some reason (a guess, from the LazySingletonAspectInstanceFactoryDecorator.getAspectInstance call in the stack trace), leading to the deadlock.  Tweaking the triggers so that the start date is some time after instantiation, e.g. 30 sec., is my current workaround, but I thought that if this is a bug in Spring (didn't see any other reports of this scenario in the forums or in general web search), it's worth fixing.  The last thing written to the log is:  [many other services being bound to endpoints...]  16:09:24,496  INFO ReflectionServiceFactoryBean:437 - Creating Service {http://services.mycompany.com/diagnostics}Diagnostics from class com.mycompany.services.Diagnostics 16:09:26,275  INFO QuartzScheduler:461 - Scheduler QuartzScheduler_$_NON_CLUSTERED started. 16:09:26,275  INFO PeriodicalUpdater:73 - ConfigurationManagerUpdater scheduled with interval 5000 ms. 16:09:29,268  INFO ServerImpl:91 - Setting the server's publish address to be /Diagnostics  Here's the thread dump:  Found one Java-level deadlock:  ---  ""QuartzScheduler_Worker-2"": waiting to lock monitor 0x001b702c (object 0x0a7e7e80, a java.util.concurrent. ConcurrentHashMap), which is held by ""[ACTIVE] ExecuteThread: '0' for queue: 'weblogic.kernel.Defa ult (self-tuning)'"" ""[ACTIVE] ExecuteThread: '0' for queue: 'weblogic.kernel.Default (self-tuning)'"" : waiting to lock monitor 0x001b6d4c (object 0x0a7e7be0, a java.util.concurrent. ConcurrentHashMap), which is held by ""QuartzScheduler_Worker-2""  Java stack information for the threads listed above:  ---  ""QuartzScheduler_Worker-2"": at org.springframework.beans.factory.support.DefaultListableBeanFactory. getBeanDefinitionNames(DefaultListableBeanFactory.java:192) - waiting to lock  (a java.util.concurrent.ConcurrentHashMap   )   at org.springframework.beans.factory.support.DefaultListableBeanFactory.   getBeanNamesForType(DefaultListableBeanFactory.java:209)   at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIn   cludingAncestors(BeanFactoryUtils.java:187)   at org.springframework.beans.factory.support.DefaultListableBeanFactory.   findAutowireCandidates(DefaultListableBeanFactory.java:652)   at org.springframework.beans.factory.support.DefaultListableBeanFactory.   resolveDependency(DefaultListableBeanFactory.java:610)   at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanP   ostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.j   ava:412)   at org.springframework.beans.factory.annotation.InjectionMetadata.inject   Fields(InjectionMetadata.java:105)   at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanP   ostProcessor.postProcessAfterInstantiation(AutowiredAnnotationBeanPostProcessor.   java:240)   at org.springframework.beans.factory.support.AbstractAutowireCapableBean   Factory.populateBean(AbstractAutowireCapableBeanFactory.java:959)   at org.springframework.beans.factory.support.AbstractAutowireCapableBean   Factory.doCreateBean(AbstractAutowireCapableBeanFactory.java:472)   at org.springframework.beans.factory.support.AbstractAutowireCapableBean   Factory$1.run(AbstractAutowireCapableBeanFactory.java:409)   at java.security.AccessController.doPrivileged(Native Method)   at org.springframework.beans.factory.support.AbstractAutowireCapableBean   Factory.createBean(AbstractAutowireCapableBeanFactory.java:380)   at org.springframework.beans.factory.support.AbstractBeanFactory$1.getOb   ject(AbstractBeanFactory.java:264)   at org.springframework.beans.factory.support.DefaultSingletonBeanRegistr   y.getSingleton(DefaultSingletonBeanRegistry.java:222)  - locked  (a java.util.concurrent.ConcurrentHashMap)   at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBe   an(AbstractBeanFactory.java:261)   at org.springframework.beans.factory.support.AbstractBeanFactory.getBean   (AbstractBeanFactory.java:185)   at org.springframework.beans.factory.support.AbstractBeanFactory.getBean   (AbstractBeanFactory.java:164)   at org.springframework.aop.aspectj.annotation.BeanFactoryAspectInstanceF   actory.getAspectInstance(BeanFactoryAspectInstanceFactory.java:76)   at org.springframework.aop.aspectj.annotation.LazySingletonAspectInstanc   eFactoryDecorator.getAspectInstance(LazySingletonAspectInstanceFactoryDecorator.   java:47)  - locked  (a org.springframework.aop.aspectj.annotation.Lazy   SingletonAspectInstanceFactoryDecorator)   at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMet   hodWithGivenArgs(AbstractAspectJAdvice.java:627)   at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMet   hod(AbstractAspectJAdvice.java:609)   at org.springframework.aop.aspectj.AspectJMethodBeforeAdvice.before(Aspe   ctJMethodBeforeAdvice.java:39)   at org.springframework.aop.framework.adapter.MethodBeforeAdviceIntercept   or.invoke(MethodBeforeAdviceInterceptor.java:49)   at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(   ReflectiveMethodInvocation.java:160)   at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.p   roceed(MethodInvocationProceedingJoinPoint.java:77)   at com.mycompany.services.commons.aspects.ClientProxyAspect.fillRequ   estInfo(ClientProxyAspect.java:68)   at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)   at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.   java:39)   at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAcces   sorImpl.java:25)   at java.lang.reflect.Method.invoke(Method.java:585)   at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMet   hodWithGivenArgs(AbstractAspectJAdvice.java:627)   at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMet   hod(AbstractAspectJAdvice.java:616)   at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAro   undAdvice.java:64)   at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(   ReflectiveMethodInvocation.java:160)   at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invok   e(ExposeInvocationInterceptor.java:89)   at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(   ReflectiveMethodInvocation.java:171)   at org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterc   eptor.intercept(Cglib2AopProxy.java:635)   at com.mycompany.services.bindings.trafficreporter.client.ws.ConfigurationW   SClient$$EnhancerByCGLIB$$b4564aa2.getConfiguration(\)   at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)   at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.   java:39)   at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAcces   sorImpl.java:25)   at java.lang.reflect.Method.invoke(Method.java:585)   at com.mycompany.services.trafficreporter.client.Clie   ntProxy.executeMethod(ClientProxy.java:159)   at com.mycompany.services.trafficreporter.client.Clie   ntProxy.getConfiguration(ClientProxy.java:95)   at com.mycompany.services.trafficreporter.manager.updater.Configurat   ionManagerJob.updateAction(ConfigurationManagerJob.java:63)   at com.mycompany.services.trafficreporter.manager.updater.UpdateJob.   execute(UpdateJob.java:83)   at org.quartz.core.JobRunShell.run(JobRunShell.java:202)   at org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.j   ava:534)   ""[ACTIVE] ExecuteThread: '0' for queue: 'weblogic.kernel.Default (self-tuning)'""   :   at org.springframework.beans.factory.support.DefaultSingletonBeanRegistr   y.getSingleton(DefaultSingletonBeanRegistry.java:180)  - waiting to lock  (a java.util.concurrent.ConcurrentHashMap   )   at org.springframework.beans.factory.support.DefaultSingletonBeanRegistr   y.getSingleton(DefaultSingletonBeanRegistry.java:166)   at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBe   an(AbstractBeanFactory.java:206)   at org.springframework.beans.factory.support.AbstractBeanFactory.getBean   (AbstractBeanFactory.java:185)   at org.springframework.beans.factory.support.AbstractBeanFactory.getBean   (AbstractBeanFactory.java:164)   at org.springframework.beans.factory.support.DefaultListableBeanFactory.   preInstantiateSingletons(DefaultListableBeanFactory.java:429)  - locked  (a java.util.concurrent.ConcurrentHashMap)   at org.springframework.context.support.AbstractApplicationContext.finish   BeanFactoryInitialization(AbstractApplicationContext.java:728)   at org.springframework.context.support.AbstractApplicationContext.refres   h(AbstractApplicationContext.java:380)  - locked  (a java.lang.Object)   at org.springframework.web.context.ContextLoader.createWebApplicationCon   text(ContextLoader.java:255)   at org.springframework.web.context.ContextLoader.initWebApplicationConte   xt(ContextLoader.java:199)   at org.springframework.web.context.ContextLoaderListener.contextInitiali   zed(ContextLoaderListener.java:45)   at weblogic.servlet.internal.EventsManager$FireContextListenerAction.run   (EventsManager.java:458)   at weblogic.security.acl.internal.AuthenticatedSubject.doAs(Authenticate   dSubject.java:321)   at weblogic.security.service.SecurityManager.runAs(Unknown Source)   at weblogic.servlet.internal.EventsManager.notifyContextCreatedEvent(Eve   ntsManager.java:168)   at weblogic.servlet.internal.WebAppServletContext.preloadResources(WebAp   pServletContext.java:1721)  - locked  (a weblogic.servlet.internal.WebAppServletContext)    at weblogic.servlet.internal.WebAppServletContext.start(WebAppServletCon  text.java:2890) at weblogic.servlet.internal.WebAppModule.startContexts(WebAppModule.jav a:948) at weblogic.servlet.internal.WebAppModule.start(WebAppModule.java:353) at weblogic.application.internal.flow.ModuleStateDriver$3.next(ModuleSta teDriver.java:204) at weblogic.application.utils.StateMachineDriver.nextState(StateMachineD river.java:26) at weblogic.application.internal.flow.ModuleStateDriver.start(ModuleStat eDriver.java:60) at weblogic.application.internal.flow.ScopedModuleDriver.start(ScopedMod uleDriver.java:200) at weblogic.application.internal.flow.ModuleListenerInvoker.start(Module ListenerInvoker.java:117) at weblogic.application.internal.flow.ModuleStateDriver$3.next(ModuleSta teDriver.java:204) at weblogic.application.utils.StateMachineDriver.nextState(StateMachineD river.java:26) at weblogic.application.internal.flow.ModuleStateDriver.start(ModuleStat eDriver.java:60) at weblogic.application.internal.flow.StartModulesFlow.activate(StartMod ulesFlow.java:26) at weblogic.application.internal.BaseDeployment$2.next(BaseDeployment.ja va:635) at weblogic.application.utils.StateMachineDriver.nextState(StateMachineD river.java:26) at weblogic.application.internal.BaseDeployment.activate(BaseDeployment. java:212) at weblogic.application.internal.DeploymentStateChecker.activate(Deploym entStateChecker.java:154) at weblogic.deploy.internal.targetserver.AppContainerInvoker.activate(Ap pContainerInvoker.java:80) at weblogic.deploy.internal.targetserver.BasicDeployment.activate(BasicD eployment.java:182) at weblogic.deploy.internal.targetserver.BasicDeployment.activateFromSer verLifecycle(BasicDeployment.java:359) at weblogic.management.deploy.internal.DeploymentAdapter$1.doActivate(De ploymentAdapter.java:51) at weblogic.management.deploy.internal.DeploymentAdapter.activate(Deploy mentAdapter.java:196) at weblogic.management.deploy.internal.AppTransition$2.transitionApp(App Transition.java:30) at weblogic.management.deploy.internal.ConfiguredDeployments.transitionA pps(ConfiguredDeployments.java:233) at weblogic.management.deploy.internal.ConfiguredDeployments.activate(Co nfiguredDeployments.java:169) at weblogic.management.deploy.internal.ConfiguredDeployments.deploy(Conf iguredDeployments.java:123) at weblogic.management.deploy.internal.DeploymentServerService.resume(De ploymentServerService.java:173) at weblogic.management.deploy.internal.DeploymentServerService.start(Dep loymentServerService.java:89) at weblogic.t3.srvr.SubsystemRequest.run(SubsystemRequest.java:64) at weblogic.work.ExecuteThread.execute(ExecuteThread.java:200) at weblogic.work.ExecuteThread.run(ExecuteThread.java:172)  Found 1 deadlock.  ---  **Affects:** 2.5.6  **Issue Links:** - #13117 Performance bottleneck and potential thread deadlock in DefaultSingletonBeanRegistry - #11684 Support initial delay attribute for `@Scheduled` and   11 votes, 14 watchers","closed","has: votes-jira,","spring-projects-issues","2010-11-03T20:18:34Z","2019-01-13T21:44:20Z"
"","12304","Property support for form:options title [SPR-7648]","**[John Glynn](https://jira.spring.io/secure/ViewProfile.jspa?name=jglynn)** opened **[SPR-7648](https://jira.spring.io/browse/SPR-7648?redirect=false)** and commented  Similar to itemLabel and itemValue, add support for assigning value of the 'title' attribute of the 'option' tag to come from a property of the item.  Attribute: itemTitle Required: false Runtime Expr: true Description: Name of the property mapped to 'title' attribute of the 'option' tag  ie.       ---  **Affects:** 3.0.4  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2010-10-12T09:03:33Z","2015-09-22T17:34:31Z"
"","12155","SQLErrorCodesFactory classloader issues [SPR-7497]","**[John Gibson](https://jira.spring.io/secure/ViewProfile.jspa?name=jgibson)** opened **[SPR-7497](https://jira.spring.io/browse/SPR-7497?redirect=false)** and commented  Despite the fix for #9791, this is still an issue.  Although the sql-error-codes.xml file is properly loaded with the JDBC bundle's classloader, the bean factory that operates on it does not.  This causes the creation of the SQLErrorCodes beans defined within sql-error-codes.xml to fail.  The problem isn't as obvious because these errors are logged at the DEBUG level.  I didn't test the override functionality (I think that it just tries to sql-error-codes.xml from the root of the classpath), but I suspect that for that to work properly in an OSGi environment that you would need to use the TCCL instead of the JDBC bundle's classloader.  As it stands now it looks like it will just search inside of the JDBC bundle itself and not find anything.  I've attached some logs that illustrate what does happen and what should happen.  I would've reopened #9791, but I don't think that I have permission to do so.  ---  **Affects:** 2.5.6  **Attachments:** - [actual_behavior.txt](https://jira.spring.io/secure/attachment/17025/actual_behavior.txt) (_37.39 kB_) - [expected_behavior.txt](https://jira.spring.io/secure/attachment/17026/expected_behavior.txt) (_6.15 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/82bcef037d71b096b8afa27e8aa712eb8eb83af0","closed","type: bug,","spring-projects-issues","2010-08-25T12:28:15Z","2019-01-11T14:08:51Z"
"","12035","When testing using JUnit 4 Suite, destroy-methods are called at the end of the test suite instead of per test [SPR-7377]","**[John Cheng](https://jira.spring.io/secure/ViewProfile.jspa?name=johnlicheng)** opened **[SPR-7377](https://jira.spring.io/browse/SPR-7377?redirect=false)** and commented  #### Expected Behavior  When running multiple test classes using JUnit4's Suite runner, I expect a Spring bean's destroy-method to be called at the end of each test. In other words, I expect to see:  ``` Start TestSuite  Start Test1   ... Bean.initMethod()   ... Bean.destroyMethod()  End Test1  Start Test2   ... Bean.initMethod()   ... Bean.destroyMethod()  End Test2 End TestSuite ```  This is because I need resources to be freed after Test1, so that I can cleanly re-acquire those resources when Test2 starts.  #### Current Behavior  A bean's init-method is called before each test. However, the destroy-method is called at the end of the test suite, in one batch. In other words,  ``` Start TestSuite  Start Test1   ... Bean.initMethod()  End Test1  Start Test2   ... Bean.initMethod()  End Test2  Bean.destroyMethod() (caused by Test2)  Bean.destroyMethod() (caused by Test1) End TestSuite ```  In the current behavior, resources acquired in Test1 will not be freed via the destroy-method when Test2 starts.  #### Steps to reproduce  I've attached sample code. It is in the form of an Eclipse project, but can be executed via ant:  ``` $ ant  | grep method jcheng@jackrabbit: ~/lms-projects/DEV_SPRING_3/Spring_Bug_Report_01 $ ant  | grep method     [junit] method: LifeCycleBean[0].init()     [junit] method: SampleJunitTest1.testOne()     [junit] method: LifeCycleBean[1].init()     [junit] method: SampleJunitTest2.testTwo()     [junit] method: LifeCycleBean[1].destroy()     [junit] method: LifeCycleBean[0].destroy() ```  Note that in the stderr output (when you run Ant), the LifeCycleBean's destroy-method is not called until the test suite ends.  ---  **Affects:** 3.0.3  **Attachments:** - [Spring_Bug_Report_01.tar.bz2](https://jira.spring.io/secure/attachment/16893/Spring_Bug_Report_01.tar.bz2) (_1.96 MB_)  **Issue Links:** - #6700 ANT does not call destroy-method after tests - #9544 `@PreDestroy` method in test instance not executed when run with SpringJUnit4ClassRunner  2 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2010-07-15T07:30:01Z","2019-01-13T07:13:44Z"
"","11978","Remove JavaScript tracking in Javadoc [SPR-7320]","**[John Cheng](https://jira.spring.io/secure/ViewProfile.jspa?name=johnlicheng)** opened **[SPR-7320](https://jira.spring.io/browse/SPR-7320?redirect=false)** and commented  The Javadoc in spring-framework-3.0.3.RELEASE-with-docs.zip contains Google Analytics and loopfuse.net tracking code. For manuals and documentation that is downloaded and used for personal reference, I'd prefer to not have JavaScript-based tracking by default. I think this kind of tracking, for downloaded files, exposes more private data than most people expect, and makes browsing documentation much slower.  I would like to request that for the Javadoc included in downloads, that they do not have any JavaScript tracking code.  I respect the desire to have tracking code for the online manuals and documentations. I am only asking for the change for the files included in downloads.   --- No further details from [SPR-7320](https://jira.spring.io/browse/SPR-7320?redirect=false)","closed","type: enhancement,","spring-projects-issues","2010-06-24T07:45:40Z","2014-09-19T13:58:16Z"
"","12186","Missing Information in Spring Framework 3.x Documentation [SPR-7528]","**[John Blum](https://jira.spring.io/secure/ViewProfile.jspa?name=jblum)** opened **[SPR-7528](https://jira.spring.io/browse/SPR-7528?redirect=false)** and commented  On Wednesday, September 1, 2010, I noticed that section 3.4.6. Checking for dependencies in Chapter 3, The IoC Container in the Reference Documentation had disappeared.  The section directly below it, 3.4.7 on Method Injection has now become section 3.4.6 and no information is currently available on dependency checking for the autowiring feature in Spring.  Interestingly enough, the PDF also exhibits the same missing information.   ---  **Affects:** 3.0.3","closed","status: declined,","spring-projects-issues","2010-09-04T16:24:20Z","2019-01-12T16:26:50Z"
"","12579","Unable to configure MappingJacksonHttpMessageConverter created by AnnotationDrivenBeanDefinitionParser [SPR-7924]","**[Joern Huxhorn](https://jira.spring.io/secure/ViewProfile.jspa?name=jhuxhorn)** opened **[SPR-7924](https://jira.spring.io/browse/SPR-7924?redirect=false)** and commented  org.springframework.web.servlet.config.AnnotationDrivenBeanDefinitionParser executes messageConverters.add(createConverterBeanDefinition(MappingJacksonHttpMessageConverter.class, source)); at line 187 in spring-webmvc-3.0.5.RELEASE  There is no way that I'm aware of to configure the created MappingJacksonHttpMessageConverter instance.  I'd need to set the ObjectMapper of this instance so it's able to use my MixIn configuration (special handling of certain data types defined using serializationConfig.addMixInAnnotations or deserializationConfig.addMixInAnnotations) and other ObjectMapper configuration.  Otherwise, serializing e.g. a java.awt.Dimension is guaranteed to explode.  Is there any way to configure it that I'm missing? I searched quite extensive but couldn't find anything so far. Any workaround would be highly appreciated, even a hacky, temporary one...  This issue may be related to #11397.  ---  **Affects:** 3.0.5","closed","type: bug,","spring-projects-issues","2011-01-31T08:49:22Z","2019-01-11T16:12:55Z"
"","11933","SimpleAliasRegistry.canonicalName can produce an endless loop [SPR-7274]","**[Joern Huxhorn](https://jira.spring.io/secure/ViewProfile.jspa?name=jhuxhorn)** opened **[SPR-7274](https://jira.spring.io/browse/SPR-7274?redirect=false)** and commented  The corresponding stacktrace looks like this:  ""main"" prio=5 tid=102800800 nid=0x100501000 runnable [1004ff000] java.lang.Thread.State: RUNNABLE at org.springframework.core.SimpleAliasRegistry.canonicalName(SimpleAliasRegistry.java:156) at org.springframework.beans.factory.support.AbstractBeanFactory.transformedBeanName(AbstractBeanFactory.java:966) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:230) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:322) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:106) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1317) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1076) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:517) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:291) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) - locked  (a java.util.concurrent.ConcurrentHashMap)   at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:288)   at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190)   at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:563) - locked  (a java.util.concurrent.ConcurrentHashMap)   at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:872)   at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:423) - locked  (a java.lang.Object)   at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:139)   at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:93)  The endless loop is in line 156: /** * Determine the raw name, resolving aliases to canonical names. * `@param` name the user-specified name * `@return` the transformed name   */   public String canonicalName(String name) {   String canonicalName = name;   // Handle aliasing.   String resolvedName = null;   do {   resolvedName = this.aliasMap.get(canonicalName);   if (resolvedName != null) {   canonicalName = resolvedName;   }   }   while (resolvedName != null); //","closed","in: core,","spring-projects-issues","2010-06-10T01:35:08Z","2012-06-19T03:43:25Z"
"","12217","@Async and @PostConstruct don't work in combination [SPR-7560]","**[Joern Barthel](https://jira.spring.io/secure/ViewProfile.jspa?name=jbar)** opened **[SPR-7560](https://jira.spring.io/browse/SPR-7560?redirect=false)** and commented  ## How to reproduce  Annotate a void public method with `@Async` and `@PostConstruct`. Setup an application context with the appropriate task:executor infrastructure to make `@Async` work.  ### Excepted behavior  `@PostConstruct` method should a) be executed in a different thread and b) not block the initialization of the application context.  ### Actual behaviour  `@PostConstruct` method is executed in main Thread and blocks. After method returns Spring bails with an exception:  ``` NoSuchBeanDefinitionException: No matching bean of type [] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {}  ```  ## Workaround  Only known workaround atm. is to manually execute the logic in the `@PostConstruct` method in a `Thread`.  ### Motivation  The application has quite a few state transfers which need to run initially and can easily be parallelized. Business logics accesses the result of those state transfers not necessarily immediately after initialization. Access to asynchronously generated values is easy using patterns such as Google Guava's `ValueFuture`.  ---  **Affects:** 3.0 GA  **Issue Links:** - #12218 Document limitations of `@Async` annotation  3 votes, 8 watchers","closed","status: bulk-closed,","spring-projects-issues","2010-09-15T06:52:44Z","2020-12-08T17:11:12Z"
"","11991","Minor typo [SPR-7332]","**[Joe Meineke](https://jira.spring.io/secure/ViewProfile.jspa?name=jmeineke)** opened **[SPR-7332](https://jira.spring.io/browse/SPR-7332?redirect=false)** and commented  file: spring-framework-reference.pdf, v 3.0  Page 88 - Sentence in grey box reads, ""Are annotations better then XML for configuring Spring?""  Change ""then"" to ""than""  ---  **Issue Links:** - #12033 Documentation typo (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0d405fd124c70c249e3c5c57313bd9aa9e84d12a","closed","type: task,","spring-projects-issues","2010-06-28T08:07:45Z","2019-01-11T14:19:45Z"
"","11979","Minor typo [SPR-7321]","**[Joe Meineke](https://jira.spring.io/secure/ViewProfile.jspa?name=jmeineke)** opened **[SPR-7321](https://jira.spring.io/browse/SPR-7321?redirect=false)** and commented  On page 16 in the ""Using Log4J"" section, there is a sentence that reads:  ""Spring also provides some utilities for configuring and initializing Log4j, so it have an optional compile time dependency on Log4j in some modules.""  It should read:  ""Spring also provides some utilities for configuring and initializing Log4j, so it has an optional compile time dependency on Log4j in some modules.""  Change ""have"" to ""has""   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ce6194c7c371c786e9a1aa6f0e31686148ab14b9","closed","type: task,","spring-projects-issues","2010-06-25T05:03:42Z","2012-06-19T03:43:28Z"
"","12178","CLOB with UTF-8 encoding does not work with PostgreSQL [SPR-7520]","**[Jochen Terstiege](https://jira.spring.io/secure/ViewProfile.jspa?name=jterstiege)** opened **[SPR-7520](https://jira.spring.io/browse/SPR-7520?redirect=false)*** and commented  This is a follow-up to ##12145.  The solution for that ticket works, but we use UTF-8 encoded strings.  The getAsciiStream() method in the PassThroughClob class destroys the string by using the hard-coded ""US-ASCII"" encoding. Would it help if this encoding could be configured somehow? Or are there any other solutions to store UTF-8 encoded CLOBs with PostgreSQL?  ---  **Affects:** 3.0.4","closed","type: enhancement,","spring-projects-issues","2010-09-02T05:53:34Z","2019-01-11T15:01:24Z"
"","12145","CLOB handling does not work with PostgreSQL [SPR-7487]","**[Jochen Terstiege](https://jira.spring.io/secure/ViewProfile.jspa?name=jterstiege)** opened **[SPR-7487](https://jira.spring.io/browse/SPR-7487?redirect=false)** and commented  When using the following configuration of DefaultLobHandler in combination with PostgreSQL we get a NPE when storing a CLOB (BLOBs work fine):  ```      ```  The JDBC driver calls the method getAsciiStream() on the PassTroughClob which always returns ""null"".  ``` Caused by: java.lang.NullPointerException 	at org.postgresql.jdbc2.AbstractJdbc2Statement.setClob(AbstractJdbc2Statement.java:2991) 	at com.mchange.v2.c3p0.impl.NewProxyPreparedStatement.setClob(NewProxyPreparedStatement.java:521) 	at org.springframework.jdbc.support.lob.DefaultLobHandler$DefaultLobCreator.setClobAsString(DefaultLobHandler.java:252) 	at org.springframework.orm.hibernate3.support.ClobStringType.nullSafeSetInternal(ClobStringType.java:86) 	at org.springframework.orm.hibernate3.support.AbstractLobType.nullSafeSet(AbstractLobType.java:180) 	at org.hibernate.type.CustomType.nullSafeSet(CustomType.java:169) 	at org.hibernate.persister.entity.AbstractEntityPersister.dehydrate(AbstractEntityPersister.java:2015) 	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2261) 	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2678) 	at org.hibernate.action.EntityInsertAction.execute(EntityInsertAction.java:79) 	at org.hibernate.engine.ActionQueue.execute(ActionQueue.java:279) 	at org.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:263) 	at org.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:167) 	at org.hibernate.event.def.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:321) 	at org.hibernate.event.def.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:50) 	at org.hibernate.impl.SessionImpl.flush(SessionImpl.java:1028) 	at org.hibernate.impl.SessionImpl.managedFlush(SessionImpl.java:366) 	at org.hibernate.transaction.JDBCTransaction.commit(JDBCTransaction.java:137) 	at org.springframework.orm.hibernate3.HibernateTransactionManager.doCommit(HibernateTransactionManager.java:656) 	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:754) 	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:723) 	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:147) 	at org.opensaga.runtime.transactions.SpringBasedTransactionService.execute(SpringBasedTransactionService.java:94) 	at org.opensaga.runtime.model.process.service.TransactionalTransitionService.execute(TransactionalTransitionService.java:115) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 	at java.lang.reflect.Method.invoke(Method.java:597) 	at org.springframework.expression.spel.support.ReflectiveMethodExecutor.execute(ReflectiveMethodExecutor.java:69) 	at org.springframework.expression.spel.ast.MethodReference.getValueInternal(MethodReference.java:104) 	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:57) 	at org.springframework.expression.spel.ast.SpelNodeImpl.getTypedValue(SpelNodeImpl.java:102) 	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:97) 	at org.springframework.binding.expression.spel.SpringELExpression.getValue(SpringELExpression.java:78) 	at org.springframework.webflow.action.EvaluateAction.doExecute(EvaluateAction.java:75) 	at org.springframework.webflow.action.AbstractAction.execute(AbstractAction.java:188) 	at org.springframework.webflow.execution.AnnotatedAction.execute(AnnotatedAction.java:145) 	at org.springframework.webflow.execution.ActionExecutor.execute(ActionExecutor.java:51) 	... 75 more ```  Relevant code from the JDBC driver:  ```     public void setClob(int i, Clob x) throws SQLException     {         checkClosed();          if (x == null)         {             setNull(i, Types.CLOB);             return;         }          InputStream l_inStream = x.getAsciiStream();         ... ```    ---  **Affects:** 3.0.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4e3227441b994838822357767f7339225138916d","closed","type: bug,","spring-projects-issues","2010-08-24T04:35:35Z","2012-06-19T03:44:07Z"
"","12065","Portlet EventRequest - An attribute added into the model inside an EventHandling method is not avilable in render method [SPR-7407]","**[Jishin V John](https://jira.spring.io/secure/ViewProfile.jspa?name=jishin)** opened **[SPR-7407](https://jira.spring.io/browse/SPR-7407?redirect=false)** and commented  I am facing a problem with event handling method in Spring portlet mvc 3.  Inside the event method (public final void receiveMessage) i added an attribute into the model  model.addAttribute(""receivedMessage"", msg);  but the attribute is not available in the render method executed after the event request (ofcourse, ${receivedMessage} in JSP is also empty).  i also tried request.setAttribute(""receivedMessage"", msg) But no result.  The complete code,  Code:  /** * Triggers an event request.   */   `@Controller`   `@RequestMapping`(""VIEW"")   public class ReceiveMessageController {    /** Log. */   private Log log = LogFactory.getLog(ReceiveMessageController.class);    `@RequestMapping`   public final String viewMessage(final RenderRequest request,   final RenderResponse response, final Model model) {   log.debug(""inside ReceiveMessageController.viewMessage"");        if (!model.containsAttribute(""receivedMessage"")) {           log.debug(""receivedMessage is empty"");           model.addAttribute(""receivedMessage"", ""no message"");       }       return ""message"";    }    `@EventMapping`(value = ""{http://jishin.org/events}onMessage"")   public final void receiveMessage(final EventRequest request,   final EventResponse response, final Model model) {   log.debug(""inside ReceiveMessageController.receiveMessage"");   Event event = request.getEvent();   String msg = (String) event.getValue();   log.debug(""ReceiveMessageController received message = "" + msg);        model.addAttribute(""receivedMessage"", msg);    }   }  The liferay portal log,  Quote:  INFO: DEBUG - inside ReceiveMessageController.receiveMessage  INFO: DEBUG - ReceiveMessageController received message = Hello World  INFO: DEBUG - inside ReceiveMessageController.viewMessage  INFO: DEBUG - receivedMessage is empty  Am i doing something wrong, or Is it a bug in Spring Portlet MVC 3 ?  Thanks in Advance, Jishin   ---  **Affects:** 3.0.3  **Reference URL:** http://forum.springsource.org/showthread.php?p=311816#post311816","closed","type: bug,","spring-projects-issues","2010-07-30T08:35:36Z","2012-06-19T03:43:22Z"
"","12204","PropertiesLoaderSupport assumes file-based Resources [SPR-7547]","**[Jing Xue](https://jira.spring.io/secure/ViewProfile.jspa?name=manifoldronin)** opened **[SPR-7547](https://jira.spring.io/browse/SPR-7547?redirect=false)** and commented  I set the location of a PropertyPlaceholderConfigurer to a ByteArrayResource and got this error upon starting up:  java.lang.IllegalStateException: resource loaded from byte array does not have a filename at org.springframework.core.io.AbstractResource.getFilename(AbstractResource.java:157) at org.springframework.core.io.support.PropertiesLoaderSupport.loadProperties(PropertiesLoaderSupport.java:182) at org.springframework.core.io.support.PropertiesLoaderSupport.mergeProperties(PropertiesLoaderSupport.java:161) at org.springframework.beans.factory.config.PropertyResourceConfigurer.postProcessBeanFactory(PropertyResourceConfigurer.java:69) at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:663) at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:603) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:407)    ---  **Affects:** 3.0.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b3ff9be78f62ff1d13ab874a4772f8fc6d189eb4, https://github.com/spring-projects/spring-framework/commit/1a7aebb0dd8e18f339e33b4460b9f0121569092d, https://github.com/spring-projects/spring-framework/commit/05bcc4028d63fe8896ca7959a47f0d17ae14ce51","closed","in: core,","spring-projects-issues","2010-09-12T09:49:55Z","2019-01-11T15:10:09Z"
"","12572","AbstractPdfView with different page sizes [SPR-7917]","**[Jim Dolinski](https://jira.spring.io/secure/ViewProfile.jspa?name=jdolinski)** opened **[SPR-7917](https://jira.spring.io/browse/SPR-7917?redirect=false)** and commented  We are converting Tiff files to PDF using iText and rendering the PDF using Spring's AbstractPdfView. The tiff files contain pages with different sizes and we must maintain the original page size within the PDF. I override the buildPdfMetadata method to convert the tiff to pdf.but do not know the page size until after the document has already been opened within the renderMergedOutputModel method.  IText requires the page size or margins be set prior to opening the document. However, I am not able to override the renderMergedOutputModel as it is final. Can we remove final or require the ""document.open()"" method to be implemented in the ""buildPdfDocument"" abstract method?    ---  **Affects:** 3.0.5  **Attachments:** - [PdfImageViewer.java](https://jira.spring.io/secure/attachment/17551/PdfImageViewer.java) (_4.18 kB_)","closed","type: enhancement,","spring-projects-issues","2011-01-27T10:34:38Z","2018-12-28T10:15:38Z"
"","12623","PropertyBatchUpdateException hide undescriptive errors [SPR-7968]","**[Jerome Lacoste](https://jira.spring.io/secure/ViewProfile.jspa?name=lacostej)** opened **[SPR-7968](https://jira.spring.io/browse/SPR-7968?redirect=false)** and commented  We're using 3.0.5 but I don't think the code has been updated  One of our BeanFactory isn't behaving properly and throwing a NullPointerException when lazy instantiating an object. That object is used as a property into another object.  This cause the following stacktrace:  ``` 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1361) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1086) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:517) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:295) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:292) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:580) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:900) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:455)  Caused byProperyBatchUpdateException [...] nested PropertyAccessExceptions are:  ... Error creating bean with name '...': FactoryBean threw exception on object creation; nested exception is java.lang.NullPointerException ```  As the stack trace is 'eaten' by the PropertyBatchUpdateException, this forced us to add some logging to the factory after the fact.  Might be interesting to do something there. Implementing getCause() in PropertyBatchUpdateException maybe ?   ---  **Affects:** 3.1 M1  1 votes, 2 watchers","closed","status: bulk-closed,","spring-projects-issues","2011-02-17T01:32:25Z","2019-01-12T03:31:19Z"
"","12210","DefaultServletHttpRequestHandler fails on Google App Engine [SPR-7553]","**[Jeremy Grelle](https://jira.spring.io/secure/ViewProfile.jspa?name=jeremyg484)** opened **[SPR-7553](https://jira.spring.io/browse/SPR-7553?redirect=false)** and commented  The DefaultServletHttpRequestHandler is not able to locate the container's default Servlet using any of the known names, and thus fails to start without the defaultServletName property being manually configured.  Google App Engine uses a heavily modified default configuration from the standard Jetty distro...in particular, it uses ""_ah_default"" as the name of the default Servlet.  This should be added to the list of ""known defaults"" in DefaultServletHttpRequestHandler.   ---  **Affects:** 3.0.4  **Reference URL:** http://forum.springsource.org/showthread.php?t=94397  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/562747ef414b8de4224f3eb9a2ee1b93f12b0cc5, https://github.com/spring-projects/spring-framework/commit/334a294e2a5c57250bfeb5847d16339b5b535862","closed","type: bug,","spring-projects-issues","2010-09-13T13:46:52Z","2012-06-19T03:42:44Z"
"","12060","Add support for versioning resources [SPR-7402]","**[Jeremy Grelle](https://jira.spring.io/secure/ViewProfile.jspa?name=jeremyg484)** opened **[SPR-7402](https://jira.spring.io/browse/SPR-7402?redirect=false)** and commented  As a user, I would like support for resource versioning so it is possible to get the benefits of caching with the ability to refresh changes.  Implementation option #1  ---  Automatic versioning with file timestamps e.g. /resources/main.123456789.css  Implementation option #2  ---  Manual versioning with version number e.g. /resources/version-1.0.0/main.css  Both options would require ResourceHttpRequestHandler to strip out the version number from the request URI to obtain the ""real"" resource path.  In addition, a view helper function or tag would be needed to generate versioned URLs e.g.  might generate http://localhost:8080/app/resources/main.123456789.css.  Resources: http://stackoverflow.com/questions/118884/what-is-an-elegant-way-to-force-browsers-to-reload-cached-css-js-files http://particletree.com/notebook/automatically-version-your-css-and-javascript-files/  ---  **Affects:** 3.0.2  This issue is a sub-task of #12058","closed","type: task,","spring-projects-issues","2010-07-27T05:46:17Z","2019-01-13T21:45:19Z"
"","12059","Add support for caching of compressed resources [SPR-7401]","**[Jeremy Grelle](https://jira.spring.io/secure/ViewProfile.jspa?name=jeremyg484)** opened **[SPR-7401](https://jira.spring.io/browse/SPR-7401?redirect=false)** and commented  The ResourceHttpRequestHandler adds runtime gzip compression of text/* mime-types by default.  For more efficient serving of these resources, the following additional approaches should be considered:  Implementation options #1: - Allow the user to specify a naming pattern for pre-compressed versions of their resources, such as '*.gz', and serve those in preference to runtime compression.  Implementation option #2: - Compress the first time a resource is requested.  After that, add the compressed version to a user-specified disk-level cache location.  Future requests for the resource are served from the cache.  ---  **Affects:** 3.0.4  This issue is a sub-task of #12058","closed","in: core,","spring-projects-issues","2010-07-27T05:46:16Z","2019-01-11T14:04:17Z"
"","12058","Improve handling of static resources  [SPR-7400]","**[Jeremy Grelle](https://jira.spring.io/secure/ViewProfile.jspa?name=jeremyg484)** opened **[SPR-7400](https://jira.spring.io/browse/SPR-7400?redirect=false)** and commented  Building on the newly added ResourceHttpRequestHandler, the following advance features should be re-considered:  * Minification should be applied to text-based resources where possible e.g. .js (should be possible to disable)  * Resource bundling should be supported.  This provides the ability to load multiple resources in one HTTP request, which can improve performance.  * Resource versioning should be supported.  This causes clients to refresh cached resources when a new version of the application is deployed.  This prevents clients from working with stale content after deployment of a new version. (should be possible to disable, when disabled no caching should be performed)  * The ability to serve GZip compressed resources should be further expanded to consider disk-cached pre-compressed versions of the resources  ---  **Affects:** 3.0.4  **Sub-tasks:** - #11800 Add support for versioning resources - #12059 Add support for caching of compressed resources - #12060 Add support for versioning resources  **Issue Links:** - #11776 Add ResourceHttpRequestHandler for efficiently serving static resouces (_**""depends on""**_) - #15561 Enhance ResourceHttpRequestHandler with ResourceResolver strategy (_**""duplicates""**_)  4 votes, 8 watchers","closed","type: enhancement,","spring-projects-issues","2010-07-27T05:46:03Z","2019-01-11T14:04:03Z"
"","12543","Doc: JBossLoadTimeWeaver on JBoss 6.0 [SPR-7887]","**[Jens Reimann](https://jira.spring.io/secure/ViewProfile.jspa?name=ctron)** opened **[SPR-7887](https://jira.spring.io/browse/SPR-7887?redirect=false)** and commented  The load time weaver used with AspectJ stopped working with JBoss 6.  I made a plain war file with one aspect written in AspecJ. The compile time weaving is working in JBoss 5.1 and 6. The load time weaving is triggered in JBoss 5.1 but when I deploy the same WAR file to JBoss 6 the load time weaving is not triggered although the load time weaver for JBoss is found and activated by Spring according to the log.  I also found that `@Transactional` only works using the proxy mode, once aspectj mode used there is no evaluation of `@Transactional`. So it looks like as if the Spring library suffers the same problem.  I can upload my sample war but since it is 7 MB I would wait until someone needs it.   ---  **Affects:** 3.0.5  **Attachments:** - [testwebaop1.war](https://jira.spring.io/secure/attachment/17553/testwebaop1.war) (_4.21 MB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/44b5df0db1dabc1a07910a28990ec03641885a55, https://github.com/spring-projects/spring-framework/commit/0c5a13cc967cb1ae2c92ee167e986da892991045","closed","in: core,","spring-projects-issues","2011-01-14T05:05:26Z","2019-01-11T15:21:08Z"
"","11890","Tomcat does not shutdown correctly when using @Scheduled [SPR-7231]","**[Jens Göring](https://jira.spring.io/secure/ViewProfile.jspa?name=jens_goering)** opened **[SPR-7231](https://jira.spring.io/browse/SPR-7231?redirect=false)** and commented  When using `@Scheduled`, Tomcat will freeze on shutdown when using Linux. The problem seems to be that ConcurrentTaskScheduler creates an ScheduledExecutorService that uses non-daemon threads which prevent Tomcat to shutdown. This bug is similar to #11566, but not the same, because I already have the fixed version and the code from the fix is never executed in my application.  I guess the difference is that I use `@Scheduled`. I attached an code example which is pretty much the same as in http://blog.springsource.com/2010/01/05/task-scheduling-simplifications-in-spring-3-0/  When this application is deployed to Tomcat, and Tomcat is than stopped, Tomcat freezes. I attached a stacktrace where the non-daemon timer thread can be identified.  A solution might be to add this to ScheduledTaskRegistrar.destroy():  ``` if (this.taskScheduler instanceof DisposableBean) {      ((DisposableBean)this.taskScheduler).destroy(); } ```  (which is similar to the fix of #11566)  And make ConcurrentTaskScheduler implement DisposableBean:  ``` public void destroy() throws Exception {      this.scheduledExecutor.shutdown(); } ```  These changes fix the problem for me.  Please let me know if you see another workaround but to not using `@Scheduled` or patching Spring.  ---  Jens Göring  ---  **Affects:** 3.0.2  **Attachments:** - [stacktrace.txt](https://jira.spring.io/secure/attachment/16588/stacktrace.txt) (_9.45 kB_) - [test.zip](https://jira.spring.io/secure/attachment/16589/test.zip) (_3.68 kB_)  **Issue Links:** - #11566 Tomcat does not shutdown correctly when using task:scheduled-taks","closed","in: core,","spring-projects-issues","2010-05-24T06:07:53Z","2019-01-13T21:45:51Z"
"","12562","TransactionSynchronizationUtils.unwrapResourceIfNecessary() does not unwrap additional proxy types [SPR-7907]","**[Jens Borrmann](https://jira.spring.io/secure/ViewProfile.jspa?name=jensb)** opened **[SPR-7907](https://jira.spring.io/browse/SPR-7907?redirect=false)** and commented  We export our SessionFactory as an OSGi service with context-class-loader=""service-provider"". The interceptor applied in this case (ServiceTCCLInterceptor) is not unwrapped in `TransactionSynchronizationUtils.unwrapResourceIfNecessary()`.  When accessing the database via HibernateTemplate this behavior prevents the SessionFactoryUtils from finding the SessionFactory created when opening the transaction. Thus, a new Hibernate session is created, for which the transaction will not be applied.  Similar bugs have been reported before: #10342 #12026  We see the same problem with proxies that are created when using a ProxyFactoryBean.  ```      ```  ---  **Affects:** 3.0.4  1 votes, 4 watchers","closed","status: bulk-closed,","spring-projects-issues","2011-01-25T01:50:39Z","2019-01-12T03:31:34Z"
"","12199","DispatcherPortlet should not throw a permanent UnavailableException when no handlermapping can be found [SPR-7542]","**[Jelmer Kuperus](https://jira.spring.io/secure/ViewProfile.jspa?name=jelmer)** opened **[SPR-7542](https://jira.spring.io/browse/SPR-7542?redirect=false)** and commented  In DispatcherPortlet the following method can be found  > protected void noHandlerFound(PortletRequest request, PortletResponse response) throws Exception { > .... > throw new UnavailableException(""No handler found for request""); > }  It is invoked when no handler mapping can be found  According to  http://portals.apache.org/pluto/portlet-api/apidocs/javax/portlet/UnavailableException.html  The 1 argument constructor indicates permanent unavailability  JSR 286 describes how a permanent UnavailableException should be handled in section PLT.5.4.7 Exceptions During Request Handling  > If a permanent unavailability is indicated by the UnavailableException, the portlet container must remove the portlet from service immediately, call the portlet's destroy method, and release the portlet object.xxiv A portlet that throws a permanent > 15 UnavailableException must be considered unavailable until the portlet application containing the portlet is restarted. > When temporary unavailability is indicated by the UnavailableException, then the portlet container may choose not to route any requests to the portlet during the time period of the temporary unavailability.  Clearly destroying the portlet and making it permanently unavailable is not the desired behavior when no handler mapping can be found  and because it's easy to trigger this condition, it actually has potential for being used for denial of service attacks on porlets developed using spring mvc  ---  **Affects:** 3.0.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/668207d59d72d5cb1eb169551314c5c290f685f8, https://github.com/spring-projects/spring-framework/commit/803b336354d630385c60d959d30d40feb154c488, https://github.com/spring-projects/spring-framework/commit/bf90a2ddb6724e84244de05bf30d498a65820271  1 votes, 2 watchers","closed","type: bug,","spring-projects-issues","2010-09-11T00:30:03Z","2019-01-13T21:44:53Z"
"","12153","DispatcherPortlet should not attempt to determine handler instance in case of action exception [SPR-7495]","**[Jelmer Kuperus](https://jira.spring.io/secure/ViewProfile.jspa?name=jelmer)** opened **[SPR-7495](https://jira.spring.io/browse/SPR-7495?redirect=false)** and commented  I have a portlet that  1. contains two render methods    one annotated with `@RenderMapping`(params = ""view=form"")    one annotated with `@RenderMapping`(params = ""view=success"")  2. contains an method annotated with `@ActionMapping`, this method can optionally throw an exception    at the end of the method i call response.setRenderParameter(""view"", ""success""); to indicate which    view to display  3. contains a method annotated with `@ExceptionHandler`  When the action (2) throws an exception The DispatcherPortlet will store the exception in the session and will enter the render phase where it will first try to fetch the HandlerExecutionChain but will fail because the exception was thrown before the response.setRenderParameter(""view"", ""success"") was called in the action method  I don't think this makes sense, if an exception was thrown which view you wanted to display in a success scenario is irrelevant    ---  **Affects:** 3.0.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bd05b046d0f2e893e48458932054e5109daf9b7a, https://github.com/spring-projects/spring-framework/commit/ba946c08dd4a8c010ff82126476a4c8d994ec8a4, https://github.com/spring-projects/spring-framework/commit/3eda5144ae6d4a9f1764439de0fcc79e85dc48db","closed","status: declined,","spring-projects-issues","2010-08-25T07:25:07Z","2019-01-12T16:37:39Z"
"","12306","NPE in DefaultMessageListenerContainer while committing and no message was received [SPR-7650]","**[Jean-Eric](https://jira.spring.io/secure/ViewProfile.jspa?name=jecuendet)** opened **[SPR-7650](https://jira.spring.io/browse/SPR-7650?redirect=false)** and commented  In the class AbstractPollingMessageListenerContainer used by DefaultMessageListenerContainer, if no message is received, the commit is called (this was added in 3.0.4) But the session passed to commitIfNecessary(session, message); is the wrong one. Instead, the variable sessionToUse should be passed: commitIfNecessary(sessionToUse, message);  This is the diff.  --- 3.0.4/AbstractPollingMessageListenerContainer.java       2010-08-18 13:41:34.000000000 +0200 +++ 3.0.5/AbstractPollingMessageListenerContainer.java        2010-10-13 10:12:38.505882405 +0200 @@ -351,7 +351,7 @@ } noMessageReceived(invoker, sessionToUse); // Nevertheless call commit, in order to reset the transaction timeout (if any).  ---      commitIfNecessary(session, message);  +                 commitIfNecessary(sessionToUse, message);               // Indicate that no message has been received.               return false;       }  ---  **Affects:** 3.0.4  **Issue Links:** - #12136 Setup of JMS message listener invoker failed for destination when upgrading from 3.0.2 to 3.0.4 (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2010-10-13T02:01:33Z","2019-01-13T21:44:30Z"
"","12601","Mapped interceptors are not applied to current handler [SPR-7946]","**[Javier Antoniucci](https://jira.spring.io/secure/ViewProfile.jspa?name=jantoniucci)** opened **[SPR-7946](https://jira.spring.io/browse/SPR-7946?redirect=false)** and commented  At AbstractUrlHandlerMapping.getHandlerInternal (line 210) a HandlerExecutionChain object called chain is created or casted from handler, then mappedInterceptors are added to the chain but the variable scope ends and chain is not assigned to the handler variable.  ``` if (handler != null && this.mappedInterceptors != null) {      Set mappedInterceptors =                    this.mappedInterceptors.getInterceptors(lookupPath, this.pathMatcher);      if (!mappedInterceptors.isEmpty()) {           HandlerExecutionChain chain;           if (handler instanceof HandlerExecutionChain) {                    chain = (HandlerExecutionChain) handler;           }           else {                    chain = new HandlerExecutionChain(handler);           }           chain.addInterceptors(mappedInterceptors.toArray(new HandlerInterceptor[mappedInterceptors.size()]));           // handler = chain; ???      } } ```  I tried this modification and works for me but may be I'm wrong.  ---  **Affects:** 3.0.5  **Issue Links:** - #12999 Consolidate support for HandlerInterceptor and MappedInterceptor types in AbstractHandlerMapping","closed","type: bug,","spring-projects-issues","2011-02-08T03:56:24Z","2019-01-11T16:15:46Z"
"","12174","@Transactional annotation on concrete (controller) class, breaks autowiring in SpringJUnit4ClassRunner [SPR-7516]","**[Jasper Blues](https://jira.spring.io/secure/ViewProfile.jspa?name=jasper.blues)** opened **[SPR-7516](https://jira.spring.io/browse/SPR-7516?redirect=false)** and commented  Steps to reproduce:  1. In a Spring MVC controller, create a handler method as follows:     `@RequestMapping`(value = ""/messages/inbox"", method = RequestMethod.GET)    `@Transactional`    public String inbox(Model model) {     }  ( ___Of course, normally we'd demarcate txns in the service layer. ___)  2. Create an integration test as follows:     `@Autowired`    private SomeMvcController controller;  3. Execute tests with Ant. Expected result - test executes. Actual result: Dependency injection fails, because the type $Proxy[21] is not the expected type.  * Test execution succeeds in IntelliJ. * Extracting an interface from the controller, to force a dynamic proxy in place of cglib proxy solves the problem.    ---  **Affects:** 3.0.2","closed","in: core,","spring-projects-issues","2010-09-01T04:44:30Z","2019-01-11T15:03:23Z"
"","12742","REQUIRES_NEW creates 2 extra transactions [SPR-8087]","**[Jason Westra](https://jira.spring.io/secure/ViewProfile.jspa?name=westraj)** opened **[SPR-8087](https://jira.spring.io/browse/SPR-8087?redirect=false)** and commented  I have a Spring bean with a method that matches an AOP txn-advice of ""REQUIRES_NEW"". In my test, I begin my own UserTransaction before calling the bean's method and I commit it after. I would expect to see 2 txns total (e.g., the original I started and the one Spring AOP & TX started because of the REQUIRES_NEW).  However, I see Spring is beginning &committing 2 extra transactions during the call to the bean's method.  I'm using Spring XML to define my point-cuts, not annotations. This happens with both Spring's proprietary ""bean(xxxx)"" and AspectJ-like ""execution"" point-cut definitions.  ``` 12:05:19,994 DEBUG [com.arjuna.ats.jta.logging.logger] (RMI TCP Connection(6)-127.0.0.1) BaseTransaction.begin 12:05:19,994 INFO  [TestTransactions] (RMI TCP Connection(6)-127.0.0.1) SHOULD BE SUSPENDING USER TRANSACTION! 12:05:19,995 DEBUG [org.springframework.transaction.jta.JtaTransactionManager] (RMI TCP Connection(6)-127.0.0.1) Using transaction object [org.springframework.transaction.jta.JtaTransactionObject@90d7ae1] 12:05:19,995 DEBUG [com.arjuna.ats.jta.logging.logger] (RMI TCP Connection(6)-127.0.0.1) BaseTransaction.getStatus 12:05:19,995 DEBUG [com.arjuna.ats.jta.logging.logger] (RMI TCP Connection(6)-127.0.0.1) TransactionImple.getStatus 12:05:19,995 DEBUG [org.springframework.transaction.jta.JtaTransactionManager] (RMI TCP Connection(6)-127.0.0.1) Suspending current transaction, creating new transaction with name [cdot.ctms.layer.delegate.test.SpringTxnTestBean.transactionRequiresNew] 12:05:19,995 DEBUG [com.arjuna.ats.jta.logging.logger] (RMI TCP Connection(6)-127.0.0.1) TransactionImpleManager.suspend 12:05:19,995 DEBUG [com.arjuna.ats.jta.logging.logger] (RMI TCP Connection(6)-127.0.0.1) BaseTransaction.begin 12:05:19,995 DEBUG [org.springframework.transaction.jta.JtaTransactionManager] (RMI TCP Connection(6)-127.0.0.1) Using transaction object [org.springframework.transaction.jta.JtaTransactionObject@5cce7de1] 12:05:19,995 DEBUG [com.arjuna.ats.jta.logging.logger] (RMI TCP Connection(6)-127.0.0.1) BaseTransaction.getStatus 12:05:19,995 DEBUG [com.arjuna.ats.jta.logging.logger] (RMI TCP Connection(6)-127.0.0.1) TransactionImple.getStatus 12:05:19,995 DEBUG [org.springframework.transaction.jta.JtaTransactionManager] (RMI TCP Connection(6)-127.0.0.1) Suspending current transaction, creating new transaction with name [cdot.ctms.layer.delegate.test.SpringTxnTestBean.transactionRequiresNew] 12:05:19,995 DEBUG [com.arjuna.ats.jta.logging.logger] (RMI TCP Connection(6)-127.0.0.1) TransactionImpleManager.suspend 12:05:19,995 DEBUG [com.arjuna.ats.jta.logging.logger] (RMI TCP Connection(6)-127.0.0.1) BaseTransaction.begin 12:05:19,996 DEBUG [org.springframework.transaction.jta.JtaTransactionManager] (RMI TCP Connection(6)-127.0.0.1) Using transaction object [org.springframework.transaction.jta.JtaTransactionObject@7d349e83] 12:05:19,996 DEBUG [com.arjuna.ats.jta.logging.logger] (RMI TCP Connection(6)-127.0.0.1) BaseTransaction.getStatus 12:05:19,996 DEBUG [com.arjuna.ats.jta.logging.logger] (RMI TCP Connection(6)-127.0.0.1) TransactionImple.getStatus 12:05:19,996 DEBUG [org.springframework.transaction.jta.JtaTransactionManager] (RMI TCP Connection(6)-127.0.0.1) Suspending current transaction, creating new transaction with name [cdot.ctms.layer.delegate.test.SpringTxnTestBean.transactionRequiresNew] 12:05:19,996 DEBUG [com.arjuna.ats.jta.logging.logger] (RMI TCP Connection(6)-127.0.0.1) TransactionImpleManager.suspend 12:05:19,996 DEBUG [com.arjuna.ats.jta.logging.logger] (RMI TCP Connection(6)-127.0.0.1) BaseTransaction.begin 12:05:19,996 DEBUG [SpringTxnTestBeanImpl] (RMI TCP Connection(6)-127.0.0.1) transactionRequiresNew: entering 12:05:19,996 DEBUG [SpringTxnTestBeanImpl] (RMI TCP Connection(6)-127.0.0.1) transactionRequiresNew: leaving 12:05:19,996 DEBUG [org.springframework.transaction.jta.JtaTransactionManager] (RMI TCP Connection(6)-127.0.0.1) Triggering beforeCommit synchronization 12:05:19,996 DEBUG [org.springframework.transaction.jta.JtaTransactionManager] (RMI TCP Connection(6)-127.0.0.1) Triggering beforeCompletion synchronization 12:05:19,996 DEBUG [com.arjuna.ats.jta.logging.logger] (RMI TCP Connection(6)-127.0.0.1) BaseTransaction.getStatus 12:05:19,996 DEBUG [com.arjuna.ats.jta.logging.logger] (RMI TCP Connection(6)-127.0.0.1) TransactionImple.getStatus 12:05:19,996 DEBUG [org.springframework.transaction.jta.JtaTransactionManager] (RMI TCP Connection(6)-127.0.0.1) Initiating transaction commit 12:05:19,996 DEBUG [com.arjuna.ats.jta.logging.logger] (RMI TCP Connection(6)-127.0.0.1) BaseTransaction.getStatus 12:05:19,996 DEBUG [com.arjuna.ats.jta.logging.logger] (RMI TCP Connection(6)-127.0.0.1) TransactionImple.getStatus 12:05:19,996 DEBUG [com.arjuna.ats.jta.logging.logger] (RMI TCP Connection(6)-127.0.0.1) BaseTransaction.commit 12:05:19,996 DEBUG [com.arjuna.ats.jta.logging.logger] (RMI TCP Connection(6)-127.0.0.1) TransactionImple.commitAndDisassociate 12:05:19,996 DEBUG [org.springframework.transaction.jta.JtaTransactionManager] (RMI TCP Connection(6)-127.0.0.1) Triggering afterCommit synchronization 12:05:19,997 DEBUG [org.springframework.transaction.jta.JtaTransactionManager] (RMI TCP Connection(6)-127.0.0.1) Triggering afterCompletion synchronization 12:05:19,997 DEBUG [org.springframework.transaction.jta.JtaTransactionManager] (RMI TCP Connection(6)-127.0.0.1) Resuming suspended transaction 12:05:19,997 DEBUG [com.arjuna.ats.jta.logging.logger] (RMI TCP Connection(6)-127.0.0.1) TransactionImpleManager.resume 12:05:19,997 DEBUG [org.springframework.transaction.jta.JtaTransactionManager] (RMI TCP Connection(6)-127.0.0.1) Triggering beforeCommit synchronization 12:05:19,997 DEBUG [org.springframework.transaction.jta.JtaTransactionManager] (RMI TCP Connection(6)-127.0.0.1) Triggering beforeCompletion synchronization 12:05:19,997 DEBUG [com.arjuna.ats.jta.logging.logger] (RMI TCP [org.springframework.transaction.jta.JtaTransactionManager] (RMI TCP Connection(6)-127.0.0.1) Initiating transaction commit 12:05:19,997 DEBUG [com.arjuna.ats.jta.logging.logger] (RMI TCP Connection(6)-127.0.0.1) BaseTransaction.commit 12:05:19,997 DEBUG [com.arjuna.ats.jta.logging.logger] (RMI TCP Connection(6)-127.0.0.1) TransactionImple.commitAndDisassociate 12:05:19,997 DEBUG [org.springframework.transaction.jta.JtaTransactionManager] (RMI TCP Connection(6)-127.0.0.1) Triggering afterCommit synchronization 12:05:19,997 DEBUG [org.springframework.transaction.jta.JtaTransactionManager] (RMI TCP Connection(6)-127.0.0.1) Triggering afterCompletion synchronization 12:05:19,997 DEBUG [org.springframework.transaction.jta.JtaTransactionManager] (RMI TCP Connection(6)-127.0.0.1) Resuming suspended transaction 12:05:19,997 DEBUG [com.arjuna.ats.jta.logging.logger] (RMI TCP Connection(6)-127.0.0.1) TransactionImpleManager.resume 12:05:19,997 DEBUG [org.springframework.transaction.jta.JtaTransactionManager] (RMI TCP Connection(6)-127.0.0.1) Triggering beforeCommit synchronization 12:05:19,997 DEBUG [org.springframework.transaction.jta.JtaTransactionManager] (RMI TCP Connection(6)-127.0.0.1) Triggering beforeCompletion synchronization 12:05:19,997 DEBUG [org.springframework.transaction.jta.JtaTransactionManager] (RMI TCP Connection(6)-127.0.0.1) Initiating transaction commit 12:05:19,997 DEBUG [com.arjuna.ats.jta.logging.logger] (RMI TCP Connection(6)-127.0.0.1) BaseTransaction.getStatus 12:05:19,998 DEBUG [com.arjuna.ats.jta.logging.logger] (RMI TCP Connection(6)-127.0.0.1) TransactionImple.getStatus 12:05:19,998 DEBUG [com.arjuna.ats.jta.logging.logger] (RMI TCP Connection(6)-127.0.0.1) BaseTransaction.commit 12:05:19,998 DEBUG [com.arjuna.ats.jta.logging.logger] (RMI TCP Connection(6)-127.0.0.1) TransactionImple.commitAndDisassociate 12:05:19,998 DEBUG [org.springframework.transaction.jta.JtaTransactionManager] (RMI TCP Connection(6)-127.0.0.1) Triggering afterCommit synchronization 12:05:19,998 DEBUG [org.springframework.transaction.jta.JtaTransactionManager] (RMI TCP Connection(6)-127.0.0.1) Triggering afterCompletion synchronization 12:05:19,998 DEBUG [org.springframework.transaction.jta.JtaTransactionManager] (RMI TCP Connection(6)-127.0.0.1) Resuming suspended transaction 12:05:19,998 DEBUG [com.arjuna.ats.jta.logging.logger] (RMI TCP Connection(6)-127.0.0.1) TransactionImpleManager.resume 12:05:19,998 INFO  [TestTransactions] (RMI TCP Connection(6)-127.0.0.1) TRANSACTION SHOULD BE UN-SUSPENDED NOW. 12:05:19,998 INFO  [TestTransactions] (RMI TCP Connection(6)-127.0.0.1) COMMITTING USER TRANSACTION 12:05:19,998 TRACE [cdot.util.TransactionHelper] (RMI TCP Connection(6)-127.0.0.1) Committing UserTransaction: org.jboss.tm.usertx.client.ServerVMClientUserTransaction@60dac573 12:05:19,998 DEBUG [com.arjuna.ats.jta.logging.logger] (RMI TCP Connection(6)-127.0.0.1) BaseTransaction.commit 12:05:19,998 DEBUG [com.arjuna.ats.jta.logging.logger] (RMI TCP Connection(6)-127.0.0.1) TransactionImple.commitAndDisassociate ```    ---  **Affects:** 2.5.5  **Reference URL:** http://forum.springsource.org/showthread.php?t=105888","closed","in: core,","spring-projects-issues","2011-03-25T09:08:44Z","2019-01-12T05:30:47Z"
"","12215","JMS integration with Tibco causes deadlock due to commitIfNecessary in AbstractPollingMessageListenerContainer [SPR-7558]","**[Jason  Harris](https://jira.spring.io/secure/ViewProfile.jspa?name=jsn.harris)** opened **[SPR-7558](https://jira.spring.io/browse/SPR-7558?redirect=false)** and commented  The new commitIfNecessary call to reset transaction timeout only happens in Spring JMS's AbstractPollingMessageListenerContainer.doReceiveAndExecute and when no message was received. This can cause a deadlock when integrated with Tibco JMS API and a prefetch value of NONE is set on the Queue. Workaround is to set a non-NONE prefetch value (.e.g. 1 or 5).Deadlocked pair of threads example below:  ""MessagePublisherContainer-1"" prio=10 tid=0x0899c400 nid=0x6d56 in Object.wait() [0x77074000..0x770750b0] java.lang.Thread.State: WAITING (on object monitor) at java.lang.Object.wait(Native Method) at java.lang.Object.wait(Object.java:485) at com.tibco.tibjms.TibjmsxLink.sendRequest(TibjmsxLink.java:320) - locked  (a com.tibco.tibjms.TibjmsxResponse)   at com.tibco.tibjms.TibjmsxSessionImp._confirmTransacted(TibjmsxSessionImp.java:2817)   at com.tibco.tibjms.TibjmsxSessionImp._confirm(TibjmsxSessionImp.java:3213) - locked  (a java.lang.Object)   at com.tibco.tibjms.TibjmsxSessionImp._commit(TibjmsxSessionImp.java:2501)   at com.tibco.tibjms.TibjmsxSessionImp.commit(TibjmsxSessionImp.java:4361)   at sun.reflect.GeneratedMethodAccessor108.invoke(Unknown Source)   at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)   at java.lang.reflect.Method.invoke(Method.java:597)   at org.springframework.jms.connection.CachingConnectionFactory$CachedSessionInvocationHandler.invoke(CachingConnectionFactory.java:344)   at $Proxy57.commit(Unknown Source)   at org.springframework.jms.support.JmsUtils.commitIfNecessary(JmsUtils.java:217)   at org.springframework.jms.listener.AbstractMessageListenerContainer.commitIfNecessary(AbstractMessageListenerContainer.java:575)   at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:354)   at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:261)   at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1056)   at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1048)   at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:947)   at java.lang.Thread.run(Thread.java:619)  ""TIBCO EMS TCPLink Reader (724129)"" daemon prio=10 tid=0x08754000 nid=0x6d55 waiting for monitor entry [0x766b6000..0x766b7030] java.lang.Thread.State: BLOCKED (on object monitor) at com.tibco.tibjms.TibjmsxSessionImp._stopConsumerReceive(TibjmsxSessionImp.java:578) - waiting to lock  (a java.lang.Object)   at com.tibco.tibjms.TibjmsxSessionImp._postMessage(TibjmsxSessionImp.java:1704) - locked  (a java.lang.Object)   at com.tibco.tibjms.TibjmsConnection._processDataMessage(TibjmsConnection.java:2611)   at com.tibco.tibjms.TibjmsConnection._processMessage(TibjmsConnection.java:2414)   at com.tibco.tibjms.TibjmsxLinkTcp$LinkReader.work(TibjmsxLinkTcp.java:288)   at com.tibco.tibjms.TibjmsxLinkTcp$LinkReader.run(TibjmsxLinkTcp.java:250)  ---  **Affects:** 3.0.4  **Issue Links:** - #16265 JMS integration with Tibco causes deadlock due to commitIfNecessary in AbstractPollingMessageListenerContainer - #19261 AbstractPollingMessageListenerContainer's workaround for Tibco causes performance delays during ems failover - #12024 DefaultMessageListenerContainer transacted session race condition if no messages for a while when using shared/cached sessions  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6d94c92d97ec449178cc79ac864e003ae2454ca4","closed","type: bug,","spring-projects-issues","2010-09-15T04:05:40Z","2019-01-11T15:08:41Z"
"","12341","DefaultAnnotationHandlerMapping does not allow for distributing Portlet 2.0 action names across controllers [SPR-7685]","**[Jaroslaw Woloch](https://jira.spring.io/secure/ViewProfile.jspa?name=jwoloch)** opened **[SPR-7685](https://jira.spring.io/browse/SPR-7685?redirect=false)** and commented  In spring portlet MVC  class  DefaultAnnotationHandlerMapping ignore value parameter for `@ActionMapping`. This parameter contains portlet 2 javax.portlet.ActionRequest#ACTION_NAME value, but 'detectHandlerMethods' ignore it uses only  `@ActionMappings`.params value to match requst params.  Example class:  ``` @Controller @RequestMapping(""VIEV"") class TestController1 {   @ActionMapping(value = ""action1"", params = ""param1=value1"")     public void testAction(@ModelAttribute(COMMAND_NAME) TestCommand command, ActionResponse response) {      ...     } ... } ```  ``` @Controller @RequestMapping(""VIEV"") class TestController2 {   @ActionMapping(value = ""action2"", params = ""param1=value1"")     public void testAction2(@ModelAttribute(COMMAND_NAME) TestCommand command, ActionResponse response) {      ...     } ... } ```  both action will be mapped as:  param1=value1=TestController1 param1=value1=TestController2  but always first class is used as handler for both url-s: http://...?...&_testportlet_javax.portlet.action=test1&_testportlet_param1=value1 http://..?...&_testportlet_javax.portlet.action=test2&_testportlet_param1=value1  Example solution for resolve this error:  append `@ActionMapping`.value as parameter named javax.porlet.ActionRequest.ACTION_NAME to params mapping in method DefaultAnnotationHandlerMapping.detectHandlerMethods(...)  replace this code:  ``` ... else if (ann instanceof EventMapping) {     EventMapping em = (EventMapping) ann;     eventName = em.value(); } else {     String[] specificParams = (String[]) AnnotationUtils.getValue(ann, ""params"");     params = StringUtils.mergeStringArrays(params, specificParams); 							} ... {/code}  with this: ```  ... else if (ann instanceof EventMapping) { EventMapping em = (EventMapping) ann; eventName = em.value(); } //this code willbe added to map value as prameter ActionRequest.ACTION_NAME for `@ActionMpping` else if (ann instanceof ActionMapping) { ActionMapping em = (ActionMapping) ann; String[] action = new String[] {ActionRequest.ACTION_NAME + ""="" + em.value()}; params = StringUtils.mergeStringArrays(params, action); params = StringUtils.mergeStringArrays(params, em.params()); } else { String[] specificParams = (String[]) AnnotationUtils.getValue(ann, ""params""); params = StringUtils.mergeStringArrays(params, specificParams); }  ``` ```    ---  **Affects:** 3.0.4, 3.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/66b4eb16a5866147f380a87b74d64de1808d49e1  4 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2010-10-26T07:29:07Z","2012-06-19T03:39:04Z"
"","12348","Convert TestContext to interface and introduce default implementation [SPR-7692]","**[Jaro Kuruc](https://jira.spring.io/secure/ViewProfile.jspa?name=koxo)** opened **[SPR-7692](https://jira.spring.io/browse/SPR-7692?redirect=false)** and commented  I am trying to unit test a custom TestExecutionListener, but it's impossible to do it because:  1. TestContext is a class and not interface, so can't be mocked without using ClassImposterizer 2. TestContext constructors require ContextCache, which is package private so can't be instantiated/mocked in a unit test.  Please make this more flexible.  ---  **Affects:** 3.0.5  **Issue Links:** - #11313 Make TestContext more accessible for testing custom TestExecutionListeners (_**""supersedes""**_) - #10102 TestContext to become subclassable (_**""supersedes""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/88fe2e9b00b68b05c35f2204dbc5783ff04d9bcc","closed","type: enhancement,","spring-projects-issues","2010-10-27T23:45:18Z","2019-01-11T14:33:58Z"
"","11885","DataSourceUtils does not respect c3p0 TimeoutException [SPR-7226]","**[Janning Vygen](https://jira.spring.io/secure/ViewProfile.jspa?name=janning)** opened **[SPR-7226](https://jira.spring.io/browse/SPR-7226?redirect=false)** and commented  See DataSourceUtils.prepareConnectionForTransaction(Connection con, TransactionDefinition definition)  In the catch Block every Exception is catched and silently dropped:  // Set read-only flag. if (definition != null && definition.isReadOnly()) { try { if (logger.isDebugEnabled()) { logger.debug(""Setting JDBC Connection ["" + con + ""] read-only""); } con.setReadOnly(true); } catch (Throwable ex) { // SQLException or UnsupportedOperationException // -> ignore, it's just a hint anyway. logger.debug(""Could not set JDBC Connection read-only"", ex); } }  In the case where i have c3p0.checkoutTimeout set, it silently drops the TimeoutException here.  The TimeoutConnection get thrown when Hibernate trys to start a connection (in doBeginTransaction()). So when your database is overloaded and you have a timeout of 3 Seconds it takes an effective time of 6 seconds to get the exception, when your transaction isReadOnly(). This is annoying, when you really want to have a timeout of 3 seconds in all cases.    ---  **Affects:** 3.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0c6b38b0b5749057d6e9dcb5f7917f27e6542fc3, https://github.com/spring-projects/spring-framework/commit/8800bab8a660f5ab9e2b100cee51af8a462d220c, https://github.com/spring-projects/spring-framework/commit/d7f72fbbd45798353ee5fea6686154426fd7bf65","closed","type: enhancement,","spring-projects-issues","2010-05-20T03:38:40Z","2012-06-19T03:43:43Z"
"","12126","DefaultMessageListenerContainer.setTaskExcecutor() binary compatibility broken [SPR-7468]","**[Janet Moyer](https://jira.spring.io/secure/ViewProfile.jspa?name=easternwahoo)** opened **[SPR-7468](https://jira.spring.io/browse/SPR-7468?redirect=false)** and commented  Attempting to migrate from Spring 2.5.6 to 3.0.3.  During Spring initialization, we get this exception: java.lang.NoSuchMethodError: org/springframework/jms/listener/DefaultMessageListenerContainer.setTaskExecutor(Lorg/springframework/core/task/TaskExecutor;)  Spring 3.0's DefaultMessageListenerContainer.setTaskExecutor() parameter changed from org.springframework.core.task.TaskExecutor to java.util.concurrent.Executor.  When using setTaskExecutor to inject a bean of type org.springframework.scheduling.commonj.WorkManagerTaskExecutor, it fails because WorkManagerTaskExecutor doesn't implement Executor.   ---  **Affects:** 3.0 GA","closed","status: declined,","spring-projects-issues","2010-08-17T13:58:14Z","2019-01-12T16:37:42Z"
"","11915","WebSphereUowTransactionManager does not rollback on RuntimeException [SPR-7256]","**[Janet Moyer](https://jira.spring.io/secure/ViewProfile.jspa?name=easternwahoo)** opened **[SPR-7256](https://jira.spring.io/browse/SPR-7256?redirect=false)** and commented  Running Spring 2.5.6 with SPR 5270 backport, and using TransactionTemplate. When our TransactionCallback implementation throws a RuntimeException, rollback should be automatically occur.  However, rollback is not invoked, and data is committed.  Our workaround is to invoke setRollbackOnly() on the TransactionStatus. For cases where AOP is used instead of the TransactionTemplate, this workaround won't work.  #11361 seems to correct this issue for Spring 3.0, but we're looking for a backport for 2.5.6.  ---  **Affects:** 2.5.6","closed","","spring-projects-issues","2010-06-03T05:41:23Z","2019-01-11T13:20:28Z"
"","12720","AsyncAnnotationBeanPostProcessor should cache AopUtils.canApply results, it's unusable in projects with a huge number of prototype beans otherwise [SPR-8065]","**[Jan-David Salchow](https://jira.spring.io/secure/ViewProfile.jspa?name=jdsalchow)** opened **[SPR-8065](https://jira.spring.io/browse/SPR-8065?redirect=false)** and commented  It turned out that AsyncAnnotationBeanPostProcessor.postProcessAfterInitialization slows projects with huge amounts of prototype beans down tremendously and there should be no harm in caching AopUtils.canApply :)  ---  **Issue Links:** - #11987 Cache result of AopUtils.canApply  4 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2011-03-18T02:44:02Z","2019-01-11T12:38:46Z"
"","12106","Transactional attribute is not resolved on CgLib proxies created by FactoryBeans [SPR-7448]","**[Jan Novotný](https://jira.spring.io/secure/ViewProfile.jspa?name=novoj)** opened **[SPR-7448](https://jira.spring.io/browse/SPR-7448?redirect=false)** and commented  When FactoryBean creates CgLib proxy via programmatic Spring proxy support (ie. ProxyFactory), `@Transactional` annotation on methods of original class are not picked by the transactional infrastructure. Reason is that the CgLib doesn't copies annotations on methods to the created final subclass and these annotations are not subject of inheritance.  See Jurgen Hoeller expression: https://jira.springframework.org/browse/SPR-975?page=com.atlassian.jira.plugin.system.issuetabpanels%253Aall-tabpanel  There is also open bug on CgLib - but I think it will never get resolved as the CgLib seems quite abadoned now: http://sourceforge.net/tracker/?func=detail&aid=2255414&group_id=56933&atid=482371  There is very simple solution that would address this issue (documented in attached file).  Issue is described in this blog post  in more detail.  Proposed solution is available at (see commentaries in referenced article): http://github.com/novoj/SpringTransactionTest  ---  **Affects:** 2.5.6  **Attachments:** - [CglibOptimizedAnnotationTransactionAttributeSource.java](https://jira.spring.io/secure/attachment/16993/CglibOptimizedAnnotationTransactionAttributeSource.java) (_1.41 kB_)  **Issue Links:** - #21216 Comprehensively cache annotated methods for interfaces and superclasses  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/99733aef2a18ec511b36c5a34cc2eaf6505c50e9","closed","type: bug,","spring-projects-issues","2010-08-10T12:13:29Z","2019-01-11T14:06:45Z"
"","11955","AnnotationMethodHandlerAdapter does not inject MultipartHttpServletRequest when wrapped by HiddenHttpMethodFilter [SPR-7296]","**[Jamie Goodfellow](https://jira.spring.io/secure/ViewProfile.jspa?name=jgoodfel)** opened **[SPR-7296](https://jira.spring.io/browse/SPR-7296?redirect=false)** and commented  I have a controller that takes in a MultipartHttpServletRequest in various methods.  I have found that the AnnotationMethodHandlerAdapter is able to call a method that handles POST calls, but not a method that handles PUT calls.  I have found this is related to the HiddenHttpMethodFilter, when a non-GET/POST method is used, the HiddenHttpMethodFilter wraps the request, which was previously wrapped/replaced by the MultipartHttpServletRequest.  The AnnotationMethodHandlerAdapter at this point detects the HttpServletRequest is not a MultipartHttpServletRequest, and throws an exception.  The exception stack trace is:  org.springframework.web.bind.annotation.support.HandlerMethodInvocationException: Failed to invoke handler method [public java.lang.String com.truecontext.prontoforms.pes.web.mvc.controller.prontoteams.projects.folders.SourcesController.update(org.springframework.web.multipart.MultipartHttpServletRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.truecontext.prontoforms.pes.web.mvc.model.pronto.source.MvcSourceConfigurationCreateUpdateData,org.springframework.validation.BindingResult,org.springframework.ui.Model)]; nested exception is java.lang.IllegalStateException: Standard argument type [org.springframework.web.multipart.MultipartHttpServletRequest] resolved to incompatible value of type [class org.springframework.web.filter.HiddenHttpMethodFilter$HttpMethodRequestWrapper]. Consider declaring the argument type in a less specific fashion. at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.invokeHandlerMethod(HandlerMethodInvoker.java:180) at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.invokeHandlerMethod(AnnotationMethodHandlerAdapter.java:421) at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.handle(AnnotationMethodHandlerAdapter.java:409) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:774) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:719) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:644) at org.springframework.web.servlet.FrameworkServlet.doPut(FrameworkServlet.java:571) at javax.servlet.http.HttpServlet.service(HttpServlet.java:640) at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at com.truecontext.prontoforms.pes.aspect.audit.impl.filter.AuditContextSettingFilter.doFilterInternal(AuditContextSettingFilter.java:50) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:74) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.springframework.web.multipart.support.MultipartFilter.doFilterInternal(MultipartFilter.java:113) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at com.truecontext.prontoforms.pes.web.filter.IncompleteUserFilter.doFilterInternal(IncompleteUserFilter.java:50) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.springframework.web.filter.AbstractRequestLoggingFilter.doFilterInternal(AbstractRequestLoggingFilter.java:193) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:343) at org.springframework.security.web.authentication.switchuser.SwitchUserFilter.doFilter(SwitchUserFilter.java:177) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:355) at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:109) at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:83) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:355) at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:97) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:355) at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:100) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:355) at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:78) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:355) at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:119) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:355) at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:54) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:355) at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:35) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:355) at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilter(BasicAuthenticationFilter.java:177) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:355) at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:188) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:355) at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:105) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:355) at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:79) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:355) at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:149) at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:237) at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:167) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:88) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.springframework.web.filter.ShallowEtagHeaderFilter.doFilterInternal(ShallowEtagHeaderFilter.java:57) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191) at com.springsource.insight.collection.tcserver.request.HttpRequestOperationCollectionValve.invoke(HttpRequestOperationCollectionValve.java:80) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:293) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:849) at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583) at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:379) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:619) Caused by: java.lang.IllegalStateException: Standard argument type [org.springframework.web.multipart.MultipartHttpServletRequest] resolved to incompatible value of type [class org.springframework.web.filter.HiddenHttpMethodFilter$HttpMethodRequestWrapper]. Consider declaring the argument type in a less specific fashion. at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.resolveCommonArgument(HandlerMethodInvoker.java:858) at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.resolveHandlerArguments(HandlerMethodInvoker.java:307) at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.invokeHandlerMethod(HandlerMethodInvoker.java:170) ... 82 more  The working method signature is:      @RequestMapping(value={""/prontoteams/{teamId}/projects/{projectId}/folders/{folderId}/sources"",""/prontoteams/{teamId}/projects/{projectId}/folders/{folderId}/sources/new""}, method=RequestMethod.POST, params=""submit"")     public String create(MultipartHttpServletRequest request, @PathVariable(""teamId"") String teamId, @PathVariable(""projectId"") String projectId, @PathVariable(""folderId"") String folderId, MvcSourceConfigurationCreateUpdateData data, BindingResult result, Model model)  {		  The non-working method signature (that resulted in the error above) is:      @RequestMapping(value={""/prontoteams/{teamId}/projects/{projectId}/folders/{folderId}/sources/{sourceId}"",""/prontoteams/{teamId}/projects/{projectId}/folders/{folderId}/sources/{sourceId}/edit""}, method=RequestMethod.PUT, params=""submit"")     public String update(MultipartHttpServletRequest request, @PathVariable(""teamId"") String teamId, @PathVariable(""projectId"") String projectId, @PathVariable(""folderId"") String folderId, @PathVariable(""sourceId"") String sourceId, MvcSourceConfigurationCreateUpdateData data, BindingResult result, Model model)  {		  The web.xml filter segment is:                	multipartRequestFilter     	org.springframework.web.multipart.support.MultipartFilter     	     		multipartResolverBeanName     		multipartResolver     	               	multipartRequestFilter     	/*     	     	 	  		               	httpMethodFilter     	org.springframework.web.filter.HiddenHttpMethodFilter               	httpMethodFilter     	/ui/*     	  Note that flipping the order of the filters also does not work, as the HttpMethodFilter is no longer able to detect the _method paramter in the request.   ---  **Affects:** 3.0.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/037c277351fb2260ee7c15c54bf5c599c7bb998d","closed","type: bug,","spring-projects-issues","2010-06-17T12:58:15Z","2012-06-19T03:44:00Z"
"","11952","CollectionsToCollectionsConverter no longer handles java.util.Collections$EmptyList -> java.util.Collections$EmptyList [SPR-7293]","**[Jamie Goodfellow](https://jira.spring.io/secure/ViewProfile.jspa?name=jgoodfel)** opened **[SPR-7293](https://jira.spring.io/browse/SPR-7293?redirect=false)** and commented  Prior to 3.0.3, this class was capable of converting from a java.util.Collections$EmptyList to java.util.Collections$EmptyList.  Starting from 3.0.3, this operation results in the exception: java.lang.IllegalArgumentException: Could not instantiate Collection type: java.util.Collections$EmptyList  The following Test case was verified to pass in 3.0.2 and fail in 3.0.3:  package org.springframework.core.convert.support;  import java.util.Collections; import java.util.List;  import org.junit.Test; import org.springframework.core.convert.TypeDescriptor;  public class CollectionToCollectionConverterTest {      @Test     public void testCollectionsEmptyList() throws Exception {     	CollectionToCollectionConverter converter = new CollectionToCollectionConverter(new GenericConversionService());     	     	TypeDescriptor type = new TypeDescriptor(getClass().getField(""list""), Class.forName(""java.util.Collections$EmptyList""));     	     	converter.convert(list, type, type);     }          public List list = Collections.emptyList();  }  This specific situation is a problem because Spring Security uses this mechanism to convert the filterChainMap in the filterChainProxy, and elements with filters=""none"" set the filter chain to Collections.EMPTY_LIST.  The Spring Security stack trace showing this error is:  Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.security.filterChainProxy': Initialization of bean failed; nested exception is org.springframework.beans.TypeMismatchException: Failed to convert property value of type 'java.util.LinkedHashMap' to required type 'java.util.Map' for property 'filterChainMap'; nested exception is org.springframework.core.convert.ConversionFailedException: Unable to convert value ""{/resources/**=[], /ui/error/session*=[], /favicon.ico=[], /**=[org.springframework.security.web.context.SecurityContextPersistenceFilter@a30589, org.springframework.security.web.authentication.logout.LogoutFilter@c07930, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@544b02, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@87286, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@96d92e, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@18c5b4f, org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter@1beb7ec, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@1cfb56, org.springframework.security.web.session.SessionManagementFilter@b8f952, org.springframework.security.web.access.ExceptionTranslationFilter@1f88953, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@1cbf6bb, org.springframework.security.web.authentication.switchuser.SwitchUserFilter@1b3a74d]}"" from type 'java.util.LinkedHashMap' to type 'java.util.Map'; nested exception is org.springframework.core.convert.ConversionFailedException: Unable to convert value ""[]"" from type 'java.util.Collections$EmptyList' to type 'java.util.Collections$EmptyList'; nested exception is java.lang.IllegalArgumentException: Could not instantiate Collection type: java.util.Collections$EmptyList at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:527) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:291) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:288) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:574) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:895) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:425) at com.truecontext.common.test.web.XmlWebApplicationContextLoader.loadContext(XmlWebApplicationContextLoader.java:47) at com.truecontext.common.test.web.XmlWebApplicationContextLoader.loadContext(XmlWebApplicationContextLoader.java:1) at org.springframework.test.context.TestContext.loadApplicationContext(TestContext.java:280) at org.springframework.test.context.TestContext.getApplicationContext(TestContext.java:304) ... 24 more Caused by: org.springframework.beans.TypeMismatchException: Failed to convert property value of type 'java.util.LinkedHashMap' to required type 'java.util.Map' for property 'filterChainMap'; nested exception is org.springframework.core.convert.ConversionFailedException: Unable to convert value ""{/resources/**=[], /ui/error/session*=[], /favicon.ico=[], /**=[org.springframework.security.web.context.SecurityContextPersistenceFilter@a30589, org.springframework.security.web.authentication.logout.LogoutFilter@c07930, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@544b02, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@87286, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@96d92e, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@18c5b4f, org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter@1beb7ec, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@1cfb56, org.springframework.security.web.session.SessionManagementFilter@b8f952, org.springframework.security.web.access.ExceptionTranslationFilter@1f88953, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@1cbf6bb, org.springframework.security.web.authentication.switchuser.SwitchUserFilter@1b3a74d]}"" from type 'java.util.LinkedHashMap' to type 'java.util.Map'; nested exception is org.springframework.core.convert.ConversionFailedException: Unable to convert value ""[]"" from type 'java.util.Collections$EmptyList' to type 'java.util.Collections$EmptyList'; nested exception is java.lang.IllegalArgumentException: Could not instantiate Collection type: java.util.Collections$EmptyList at org.springframework.beans.BeanWrapperImpl.convertIfNecessary(BeanWrapperImpl.java:457) at org.springframework.beans.BeanWrapperImpl.convertForProperty(BeanWrapperImpl.java:499) at org.springframework.beans.BeanWrapperImpl.convertForProperty(BeanWrapperImpl.java:493) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.convertForProperty(AbstractAutowireCapableBeanFactory.java:1363) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1322) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1076) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:517) ... 36 more Caused by: org.springframework.core.convert.ConversionFailedException: Unable to convert value ""{/resources/**=[], /ui/error/session*=[], /favicon.ico=[], /**=[org.springframework.security.web.context.SecurityContextPersistenceFilter@a30589, org.springframework.security.web.authentication.logout.LogoutFilter@c07930, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@544b02, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@87286, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@96d92e, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@18c5b4f, org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter@1beb7ec, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@1cfb56, org.springframework.security.web.session.SessionManagementFilter@b8f952, org.springframework.security.web.access.ExceptionTranslationFilter@1f88953, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@1cbf6bb, org.springframework.security.web.authentication.switchuser.SwitchUserFilter@1b3a74d]}"" from type 'java.util.LinkedHashMap' to type 'java.util.Map'; nested exception is org.springframework.core.convert.ConversionFailedException: Unable to convert value ""[]"" from type 'java.util.Collections$EmptyList' to type 'java.util.Collections$EmptyList'; nested exception is java.lang.IllegalArgumentException: Could not instantiate Collection type: java.util.Collections$EmptyList at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:40) at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:183) at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:141) at org.springframework.beans.BeanWrapperImpl.convertIfNecessary(BeanWrapperImpl.java:447) ... 42 more Caused by: org.springframework.core.convert.ConversionFailedException: Unable to convert value ""[]"" from type 'java.util.Collections$EmptyList' to type 'java.util.Collections$EmptyList'; nested exception is java.lang.IllegalArgumentException: Could not instantiate Collection type: java.util.Collections$EmptyList at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:40) at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:183) at org.springframework.core.convert.support.MapToMapConverter.convert(MapToMapConverter.java:68) at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:37) ... 45 more Caused by: java.lang.IllegalArgumentException: Could not instantiate Collection type: java.util.Collections$EmptyList at org.springframework.core.CollectionFactory.createCollection(CollectionFactory.java:256) at org.springframework.core.convert.support.CollectionToCollectionConverter.convert(CollectionToCollectionConverter.java:61) at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:37) ... 48 more  I believe this used to work because a check was made to see if the source was assignable to the target type.  If so, the source was returned.  I would either put this logic back in, or in the CollectionsFactory, specially handle the Collections$EmptyList list type.   ---  **Affects:** 3.0.3, 3.0.6, 3.1 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7eeb654eec3ac63c7a8a5df7ef279561bccff1e0, https://github.com/spring-projects/spring-framework/commit/e0d922d35202fdb9f309f2aeccd8293b09943ebd, https://github.com/spring-projects/spring-framework/commit/27b04036a9e6e7434bf3ef0942b417aa16b90574  **Backported to:** [3.0.7](https://github.com/spring-projects/spring-framework/milestone/74?closed=1)  3 votes, 8 watchers","closed","in: core,","spring-projects-issues","2010-06-16T12:41:19Z","2012-06-19T03:43:47Z"
"","11924","In Spring Documentation in Section 1.3.1 Dependency Management and Naming Conventions 2nd Para typo ""shot"" should read ""short"" [SPR-7265]","**[James Tregaskis](https://jira.spring.io/secure/ViewProfile.jspa?name=jtreg)** opened **[SPR-7265](https://jira.spring.io/browse/SPR-7265?redirect=false)** and commented   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5330dc48aa584d14fc9440667c59e13078fdc616","closed","type: task,","spring-projects-issues","2010-06-07T01:00:32Z","2012-06-19T03:43:11Z"
"","12409","Spring's JDBC connection access disables shared cache in EclipseLink [SPR-7753]","**[James Sutherland](https://jira.spring.io/secure/ViewProfile.jspa?name=jamesssss)** opened **[SPR-7753](https://jira.spring.io/browse/SPR-7753?redirect=false)** and commented  In the EclipseLinkJpaDialect Spring does the following,      @Override     public Object beginTransaction(EntityManager entityManager, TransactionDefinition definition)     		throws PersistenceException, SQLException, TransactionException {          	super.beginTransaction(entityManager, definition);     	if (!definition.isReadOnly() && !this.lazyDatabaseTransaction) {     		// This is the magic bit. As with the existing Spring TopLink integration,     		// begin an early transaction to force EclipseLink to get a JDBC Connection     		// so that Spring can manage transactions with JDBC as well as EclipseLink.     		UnitOfWork uow = (UnitOfWork) getSession(entityManager);     		uow.beginEarlyTransaction();     	}     	// Could return the UOW, if there were any advantage in having it later.     	return null;     }  This is done to force EclipseLink to read through a transactional connection, so that it can see changes made directly through JDBC.  But it has the side-affect of effectively disabling the shared cache in EclipseLink.  EclipseLink will no longer cache any objects read because a transactional connection is being used.  Which connection is used is configurable in EclipseLink by the user, so Spring should not be forcing any setting on the user, and not be using an internal API to do it.  The correct way to enable this is either to set the persistence unit property, ""eclipselink.jdbc.exclusive-connection.mode""=""Always"" (will allow a shared cache)  or ""eclipselink.transaction.join-existing""=""true"" (does not allow a shared cache)  If Spring desires different functionality than the EclipseLink defaults (not sure it should), then it should just default these properties if they have ""not"" already be configured by the user.  This would allow the user to choose if they want caching to work or not.  Otherwise just remove this code and let the user configure if they wish to allow caching or not.  ---  **Affects:** 4.1.1  **Issue Links:** - #12547 EclipseLink does not support read-only database connections - #16924 EclipseLinkJpaDialect does not support declarative transaction isolation  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e4753c9f8b11682d149a2292c6cd4d13c8b3ef77  2 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2010-11-18T07:14:40Z","2019-01-11T15:34:35Z"
"","12591","Hibernate LocalSessionFactoryBean schemaUpdate incompatible with automatic dialect detection [SPR-7936]","**[James Roper](https://jira.spring.io/secure/ViewProfile.jspa?name=jroper)** opened **[SPR-7936](https://jira.spring.io/browse/SPR-7936?redirect=false)** and commented  Hibernate is able to automatically detect the dialect if none is configured.  However, if none is configured on LocalSessionFactoryBean, and schemaUpdate is set to true, then the following exception is thrown:  ``` org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sessionFactory' defined in class path resource [applicationContext.xml]: Invocation of init method failed; nested exception is org.springframework.orm.hibernate3.HibernateSystemException: The dialect was not set. Set the property hibernate.dialect.; nested exception is org.hibernate.HibernateException: The dialect was not set. Set the property hibernate.dialect. 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1338) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:473) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:409) 	at java.security.AccessController.doPrivileged(Native Method) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:380) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:264) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:261) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:168) 	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.autowireResource(CommonAnnotationBeanPostProcessor.java:435) 	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.getResource(CommonAnnotationBeanPostProcessor.java:409) 	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor$ResourceElement.getResourceToInject(CommonAnnotationBeanPostProcessor.java:537) 	at org.springframework.beans.factory.annotation.InjectionMetadata$InjectedElement.inject(InjectionMetadata.java:180) 	at org.springframework.beans.factory.annotation.InjectionMetadata.injectFields(InjectionMetadata.java:105) 	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.postProcessAfterInstantiation(CommonAnnotationBeanPostProcessor.java:289) 	... 40 more Caused by: org.springframework.orm.hibernate3.HibernateSystemException: The dialect was not set. Set the property hibernate.dialect.; nested exception is org.hibernate.HibernateException: The dialect was not set. Set the property hibernate.dialect. 	at org.springframework.orm.hibernate3.SessionFactoryUtils.convertHibernateAccessException(SessionFactoryUtils.java:676) 	at org.springframework.orm.hibernate3.HibernateAccessor.convertHibernateAccessException(HibernateAccessor.java:412) 	at org.springframework.orm.hibernate3.HibernateTemplate.doExecute(HibernateTemplate.java:424) 	at org.springframework.orm.hibernate3.HibernateTemplate.execute(HibernateTemplate.java:339) 	at org.springframework.orm.hibernate3.LocalSessionFactoryBean.updateDatabaseSchema(LocalSessionFactoryBean.java:953) 	at org.springframework.orm.hibernate3.LocalSessionFactoryBean.afterSessionFactoryCreation(LocalSessionFactoryBean.java:843) 	at org.springframework.orm.hibernate3.AbstractSessionFactoryBean.afterPropertiesSet(AbstractSessionFactoryBean.java:213) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1369) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1335) 	... 55 more Caused by: org.hibernate.HibernateException: The dialect was not set. Set the property hibernate.dialect. 	at org.hibernate.dialect.Dialect.instantiateDialect(Dialect.java:305) 	at org.hibernate.dialect.Dialect.getDialect(Dialect.java:283) 	at org.hibernate.dialect.Dialect.getDialect(Dialect.java:298) 	at org.springframework.orm.hibernate3.LocalSessionFactoryBean$3.doInHibernate(LocalSessionFactoryBean.java:957) 	at org.springframework.orm.hibernate3.HibernateTemplate.doExecute(HibernateTemplate.java:419) 	... 61 more ```  The following implementation of updateDatabaseSchema() fixes the problem:  ```java public void updateDatabaseSchema() throws DataAccessException {     logger.info(""Updating database schema for Hibernate SessionFactory"");     SessionFactory sessionFactory = getSessionFactory();     final Dialect dialect = ((SessionFactoryImplementor)sessionFactory).getDialect();     HibernateTemplate hibernateTemplate = new HibernateTemplate(sessionFactory);     hibernateTemplate.setFlushMode(HibernateTemplate.FLUSH_NEVER);     hibernateTemplate.execute(         new HibernateCallback() {             public Object doInHibernate(Session session) throws HibernateException, SQLException             {                 Connection con = session.connection();                 DatabaseMetadata metadata = new DatabaseMetadata(con, dialect);                 String[] sql = getConfiguration().generateSchemaUpdateScript(dialect, metadata);                 executeSchemaScript(con, sql);                 return null;             }         }     ); } ```  ---  **Affects:** 3.0.5  **Issue Links:** - #12721 Introduce (Annotation)SessionFactoryBuilder types (_**""depends on""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f5768fe00be37efb8c71bdfa61a0d0c71c8ba218, https://github.com/spring-projects/spring-framework/commit/3bb01ee68b7f421f0d3ee5735a6c383a84483968","closed","type: enhancement,","spring-projects-issues","2011-02-03T20:27:45Z","2019-01-11T16:12:22Z"
"","12415","Javadocs on CustomDateEditor misleading [SPR-7759]","**[James Odeen](https://jira.spring.io/secure/ViewProfile.jspa?name=jodeen)** opened **[SPR-7759](https://jira.spring.io/browse/SPR-7759?redirect=false)** and commented  The javadocs on the `org.springframework.beans.propertyeditors.CustomDateEditor` class for it's 3-arg constructor is a bit misleading.   It basically claims that using this constructor will help to enforce that a 4 digit year is always entered. Due to the way that `SimpleDateFormat` works, you can enter extra zeros in the day or month fields and have it fool the length check and still parse correctly.  ``` SimpleDateFormat sdf = new SimpleDateFormat(""mm/dd/yyyy""); sdf.setLenient(false); CustomDateEditor cde = new CustomDateEditor(sdf, false, 10); cde.setAsText(""00001/01/3""); System.out.println(""Value:"" + cde.getValue().toString()); ```  Results in:  ``` Value:Mon Jan 01 00:01:00 MST 3 ```    ---  **Affects:** 3.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/125b843cf799fa6412d93b94a2691ff5c2af731a","closed","type: enhancement,","spring-projects-issues","2010-11-22T09:15:27Z","2012-06-19T03:39:20Z"
"","11909","Add JsonMessageConvertor to Spring JMS from Spring Extensions project SE-AMQP [SPR-7250]","**[James Hoare](https://jira.spring.io/secure/ViewProfile.jspa?name=jhoare)** opened **[SPR-7250](https://jira.spring.io/browse/SPR-7250?redirect=false)** and commented  See SI-Link http://jira.springframework.org/browse/INT-1144  My attachment doesn't go far enough as it should probably use the class mapper support. It would be great is we could see this in the next release.  Thanks  ---  **Affects:** 3.0.3  **Issue Links:** - #12062 please add JMS JsonMessageConverter (_**""duplicates""**_) - [INT-1144](https://jira.spring.io/browse/INT-1144) Add JsonMesssageConvertor support in jSI JMS (_**""is duplicated by""**_)","closed","type: enhancement,","spring-projects-issues","2010-05-31T19:35:16Z","2019-01-11T13:20:57Z"
"","12229","LocalSessionFactoryBean persist initial entities after creating database schema [SPR-7572]","**[James Earl Douglas](https://jira.spring.io/secure/ViewProfile.jspa?name=jamestastic)** opened **[SPR-7572](https://jira.spring.io/browse/SPR-7572?redirect=false)** and commented  When using LocalSessionFactoryBean.createDatabaseSchema(), I often also find myself needing to add some entities to the database.  It would be convenient if I could provide these initial data to LSFB and it would add them after creating the database schema.  The following changes to LSFB allow me to pass a list to the ""initialEntites"" property of LSFB.  These entites are persisted after the database schema is created.  ``` private Object[] initialEntities;  public void setInitialEntities(Object... entities) { 	this.initialEntities = entities; }  public void createDatabaseSchema() throws DataAccessException { 	logger.info(""Creating database schema for Hibernate SessionFactory""); 	DataSource dataSource = getDataSource(); 	if (dataSource != null) { 		// Make given DataSource available for the schema update. 		configTimeDataSourceHolder.set(dataSource); 	} 	try { 		HibernateTemplate hibernateTemplate = new HibernateTemplate( 				getSessionFactory()); 		hibernateTemplate.execute(new HibernateCallback() { 			public Object doInHibernate(Session session) 					throws HibernateException, SQLException { 				Connection con = session.connection(); 				Dialect dialect = Dialect.getDialect(getConfiguration() 						.getProperties()); 				String[] sql = getConfiguration() 						.generateSchemaCreationScript(dialect); 				executeSchemaScript(con, sql);  				if (initialEntities != null) { 					for (Object entity : initialEntities) { 						session.save(entity); 					} 				} 				return null; 			} 		}); 	} 	finally { 		if (dataSource != null) { 			configTimeDataSourceHolder.set(null); 		} 	} } ```    ---  **Affects:** 3.0.4","closed","type: enhancement,","spring-projects-issues","2010-09-19T13:47:56Z","2018-12-28T09:59:38Z"
"","12202","Update documentation and XSD for mvc:default-servlet-handler [SPR-7545]","**[James Earl Douglas](https://jira.spring.io/secure/ViewProfile.jspa?name=jamestastic)** opened **[SPR-7545](https://jira.spring.io/browse/SPR-7545?redirect=false)** and commented  It seems that the default-servlet-handler tag has not yet been added to the schema at http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd.  For now, I can get the expected feature by manually adding a DefaultServletHttpRequestHandler bean to my context, a la DefaultServletHandlerBeanDefinitionParser:  ```   	 		 			 		 	   ```  Furthermore, forcing  into my configuration does work, though Eclipse still finds it in error.  It appears that the related documentation is out of sync with the API. The documentation discusses the DefaultServletHttpHandler, but the class appears to be named DefaultServletHttpRequestHandler.  Reference: http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/mvc.html#mvc-default-servlet-handler  ---  **Affects:** 3.0.4  **Reference URL:** http://forum.springsource.org/showthread.php?p=318747#post318747  **Issue Links:** - #12212 Publish spring-mvc-3.0.xsd  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/aab05c4da95034cbbe52e551cef4a0f1dd5f930a, https://github.com/spring-projects/spring-framework/commit/d8ecc76d4cce50feb7c3691d201755535940e831","closed","type: task,","spring-projects-issues","2010-09-11T14:06:17Z","2019-01-11T15:09:46Z"
"","12176","Refactor ContentNegotiatingViewResolver to allow header name configuration [SPR-7518]","**[James Earl Douglas](https://jira.spring.io/secure/ViewProfile.jspa?name=jamestastic)** opened **[SPR-7518](https://jira.spring.io/browse/SPR-7518?redirect=false)** and commented  It would be convenient to be able to get the same behavior provided by ContentNegotiatingViewResolver for different headers, such as User-Agent.  An example use case would be to choose a view depending on whether the user is using a mobile device.  ContentNegotiatingViewResolver could be refactored to HeaderNegotiatingViewResolver, with a mutator for setting what is currently the ACCEPT_HEADER property.  To make this even more useful, a subclass UserAgentNegotiatingViewResolver could be created that knows about many different user agents already, such as those listed here: http://en.wikipedia.org/wiki/List_of_user_agents_for_mobile_phones  This issue references this question: http://stackoverflow.com/questions/3620169/springmvc-change-view-when-accessed-by-mobile   ---  **Affects:** 3.0.4  3 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2010-09-01T16:51:35Z","2014-03-28T06:04:33Z"
"","12073","Ability to ignore certain values when injecting dependencies. [SPR-7415]","**[James Earl Douglas](https://jira.spring.io/secure/ViewProfile.jspa?name=jamestastic)** opened **[SPR-7415](https://jira.spring.io/browse/SPR-7415?redirect=false)** and commented  In some cases, dependencies should only be injected if they have certain values.  For example, when properties are read by , sometimes certain expected properties might not be defined.  In this case, the user might want Spring to ignore places where it might otherwise inject that property.  Such a feature would allow the following code...  ```      ```  ...to be replaced by something like the following:  ```              ```    ---  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2010-08-02T10:52:25Z","2019-01-11T14:03:51Z"
"","12118","Need additional check for edge case for Rhino calls [SPR-7460]","**[James Cook](https://jira.spring.io/secure/ViewProfile.jspa?name=oravecz)** opened **[SPR-7460](https://jira.spring.io/browse/SPR-7460?redirect=false)** and commented  We use a lot of server-side Javascript running on Rhino. When I issue a call from Rhino for a java function that can accept open-ended parameters, it can cause some confusion.  For example: From JavaScript -- var bean = appContext.getBean('myBean');  In Java, there are several getBean(...) functions with different parameter sets.  Object getBean(String name) \ T getBean(String name, Class\ requiredType) Object getBean(String name, Object... args) \ T getBean(String name, Class\ requiredType, Object... args)  It just so happens that my call ends up routed to: Object getBean(String name, Object... args)  The name is 'myBean' as expected, but the args array is String[0].  This wouldn't be so bad, except later in the process, this check occurs in checkMergedBeanDefinition():  if (args != null && !mbd.isPrototype()) { throw new BeanDefinitionStoreException(...); }  So, if this is rewritten slightly, it will solve my dilemma.  if (args != null && args.length > 0 && !mbd.isPrototype()) { throw new BeanDefinitionStoreException(...); }  I suppose one could debate the merits of whether Rhino should be calling this method versus the single parameter method, but I assume they had a good reason for doing this. At the very least, it is probably an easier change to integrate in Spring than in Rhino. :)    ---  **Affects:** 3.0.3","closed","type: enhancement,","spring-projects-issues","2010-08-12T11:56:09Z","2018-12-28T10:26:30Z"
"","12050","Make ResourceBundleMessageSource more flexible (catching up with Java 6's java.util.ResourceBundle) [SPR-7392]","**[James Cook](https://jira.spring.io/secure/ViewProfile.jspa?name=oravecz)** opened **[SPR-7392](https://jira.spring.io/browse/SPR-7392?redirect=false)** and commented  I was having a great deal of trouble getting spring:message tag to recognize any keys from my resource bundles. When I changed my resource bundle from ReloadableResourceBundleMessageSource to ResourceBundleMessageSource, everything suddenly worked fine.  Obligatory code:  ```xml               ```  {code|messages.properties} site.title=My Title  ```  ```html           Simple jsp page          Message from context:        Locale:        Going Direct:        JSTL Format Tag:        Spring Message Tag:      ```  ``` Message from context: Hello World!  Locale: en_US  Going Direct: site.title  JSTL Format Tag: ???site.title???  Spring Message Tag: site.title ```  You can see that the spring:message tag and going after the message source directly results in no message being resolved. Same goes for the JSTL format tag. Now if I _only_ change the message source to ResourceBundleMessageSource, spring:message works as I would of originally expected:  ``` Message from context: Hello World!  Locale: en_US  Going Direct: My Title  JSTL Format Tag: ???site.title???  Spring Message Tag: My Title ```  Also, I just wanted to confirm that the definition of the messageSource bean _requires_ that it have an id = ""messageSource""? When I remove the id (which I tend to do for beans I won't be looking up), no messages are resolved.  ---  **Affects:** 3.0.3  **Reference URL:** http://forum.springsource.org/showpost.php?p=310752&postcount=7  **Issue Links:** - #17801 ResourceBundleThemeSource could expose the property fallbackToSystemLocale of ResourceBundleMessageSource  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/abf341c33a4241af73c00991307af92a3220a71b, https://github.com/spring-projects/spring-framework/commit/c81543e1a420617956dd145924e4423d610486bf  3 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2010-07-23T14:25:16Z","2019-01-11T13:38:39Z"
"","12377","formMultiSelect macro in spring.ftl causes freemarker.template.TemplateException [SPR-7721]","**[Jakub Głuszecki](https://jira.spring.io/secure/ViewProfile.jspa?name=jakub.gluszecki)** opened **[SPR-7721](https://jira.spring.io/browse/SPR-7721?redirect=false)** and commented  formMultiSelect macro from spring.ftl causes following exception:  > freemarker.template.TemplateException: Expected collection or sequence. list evaluated instead to freemarker.template.SimpleScalar on line 368, column 12 in spring.ftl.  This is the problematic line:  > <#assign isSelected = contains(status.value?default([""""]), value)>  status.value returns String instead of a Collection (value is converted to String in AbstractPropertyBindingResult#formatFieldValue) **status.actualValue** should be used instead.    ---  **Affects:** 3.0.4, 3.0.5, 3.1 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/61a5ab9d34d635caf4c6b041113e15dbe7b47a01, https://github.com/spring-projects/spring-framework/commit/bfabd58106a7f8d28838519a5f6713ff162243dc  2 votes, 2 watchers","closed","type: bug,","spring-projects-issues","2010-11-05T06:27:32Z","2012-06-19T03:39:46Z"
"","12239","RestTemplate.put returns void [SPR-7583]","**[Jacques Couzteau](https://jira.spring.io/secure/ViewProfile.jspa?name=couzteau)** opened **[SPR-7583](https://jira.spring.io/browse/SPR-7583?redirect=false)** and commented  I would like to evaluate the response code and the response body of a put call, however according to the docs put returns void,unlike get or post.  See http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/web/client/RestTemplate.html#put(java.lang.String, java.lang.Object, java.lang.Object...)   ---  **Affects:** 3.0.4","closed","in: web,","spring-projects-issues","2010-09-21T15:33:30Z","2019-01-11T15:12:37Z"
"","12551","Custom message converters registered with AnnotationMethodHandlerAdapter are not used, only the default ones are used. [SPR-7895]","**[Jack Woods](https://jira.spring.io/secure/ViewProfile.jspa?name=adeveloper)** opened **[SPR-7895](https://jira.spring.io/browse/SPR-7895?redirect=false)** and commented  Custom message converters registered with AnnotationMethodHandlerAdapter are not used, only the default ones registered with  are used. I found that the setMessageConverters() method of AnnotationMethodHandlerAdapter class is called two times, one for the default and another one for the bean defined in the spring xml file. The one defined in the spring xml file is never used when doing actual marshalling and unmarshalling.  For example the following jibx message converter is not used:  \ 	\ 		\ 			\ 		\ 	\ \ \ 	\ 	\ \	    In my opinion the jibx support in Spring OXM is rather poor. We need to define a separate converter for each target-class. We don't need to do that kind of thing when using Jersey with Jibx. We just need two `@Provider` classes that implement MessageBodyReader and MessageBodyWriter. I have attached JIBXBodyReader and JIBXBodyWriter for your reference.   ---  **Affects:** 3.0.5  **Reference URL:** http://forum.springframework.org/showthread.php?t=100244  **Attachments:** - [JIBXBodyReader.java](https://jira.spring.io/secure/attachment/17533/JIBXBodyReader.java) (_1.41 kB_) - [JIBXBodyWriter.java](https://jira.spring.io/secure/attachment/17532/JIBXBodyWriter.java) (_1.57 kB_)","closed","status: invalid,","spring-projects-issues","2011-01-18T14:25:25Z","2019-01-12T05:31:09Z"
"","12599","Make it possible to avoid logging warnings from DispatcherPortlet [SPR-7944]","**[Iwein Fuld](https://jira.spring.io/secure/ViewProfile.jspa?name=iwein)** opened **[SPR-7944](https://jira.spring.io/browse/SPR-7944?redirect=false)** and commented  When our portlet application is deployed the sysadmins prefer to enable warning logging for everything, but not see stacktraces in the logs unless there is something bad happening.  Unfortunately DispatcherPortlet is logging handler exceptions on warning level including stacktraces.  ``` protected ModelAndView processHandlerException( 			RenderRequest request, RenderResponse response, Object handler, Exception ex) 			throws Exception {  		ModelAndView exMv = null; 		for (Iterator it = this.handlerExceptionResolvers.iterator(); exMv == null && it.hasNext();) { 			HandlerExceptionResolver resolver = (HandlerExceptionResolver) it.next(); 			exMv = resolver.resolveException(request, response, handler, ex); 		} 		if (exMv != null) { 			if (logger.isDebugEnabled()) { 				logger.debug(""HandlerExceptionResolver returned ModelAndView ["" + exMv + ""] for exception""); 			} 			logger.warn(""Handler execution resulted in exception - forwarding to resolved error view"", ex); 			return exMv; 		} 		else { 			throw ex; 		} 	} ```  It is impossible to override this behavior without copying the class (as opposed to extending it). It would be better if it was possible to avoid this log message, like it also is in the case of the DispatcherServlet.   ---  **Affects:** 3.0.5","closed","type: enhancement,","spring-projects-issues","2011-02-07T07:43:55Z","2014-12-08T12:37:26Z"
"","12061","@Autowired does not pick up  [SPR-7403]","**[Iwein Fuld](https://jira.spring.io/secure/ViewProfile.jspa?name=iwein)** opened **[SPR-7403](https://jira.spring.io/browse/SPR-7403?redirect=false)** and commented  When using  ``` @Autowired org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor executor; ```  inside a test it doesn't pick up a bean created by  which is documented to create a bean of that particular type. I've reproduced this in a simple test project that you can find in my git repository: http://github.com/iwein/Spring-Integration-Sandbox/commit/52f039a7cd118fcc48060318f5a48ae1373a66ee   ---  **Affects:** 3.0.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3e0003a1a0a09b727aa702af8d9234620998dbab","closed","in: core,","spring-projects-issues","2010-07-27T19:49:56Z","2012-06-19T03:43:34Z"
"","12484","StringUtils incorrectly interprets UNIX-style hidden directories as file extensions [SPR-7828]","**[Ivan Mushketik](https://jira.spring.io/secure/ViewProfile.jspa?name=proger)** opened **[SPR-7828](https://jira.spring.io/browse/SPR-7828?redirect=false)** and commented  `StringUtils.getFilenameExtension(""/home/user/.m2/settings"")` returns ""m2/settings"".  `StringUtils.stripFilenameExtension(""/home/user/.m2/settings"")` returns ""/home/user/"".  Patch to StringUtils.java for Spring 3.0.4.RELEASE is attached.   ---  **Affects:** 3.0.4  **Attachments:** - [StringUtils.patch](https://jira.spring.io/secure/attachment/17461/StringUtils.patch) (_535 bytes_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9dd6f467b9e149d340ddea8837621c07b14820c4","closed","in: core,","spring-projects-issues","2010-12-18T02:44:51Z","2012-06-19T03:39:03Z"
"","12325","change visibility of `detectHandlersInAncestorContexts` in the org.springframework.web.servlet.handler.AbstractDetectingUrlHandlerMapping [SPR-7669]","**[Ivan Latysh](https://jira.spring.io/secure/ViewProfile.jspa?name=ivan.latysh)** opened **[SPR-7669](https://jira.spring.io/browse/SPR-7669?redirect=false)** and commented  detectHandlersInAncestorContexts has a public setter but no public getter. Please add a public getter or change visibility to protected.  Class is abstract and there absolutely no reason to have `detectHandlersInAncestorContexts` as a private member.   ---  **Affects:** 3.0.4","closed","type: enhancement,","spring-projects-issues","2010-10-20T22:11:40Z","2018-12-28T10:33:54Z"
"","12702","minor error in reference documentation, 16.2.4.4 The checkbox tag [SPR-8047]","**[Iurii Chernyi](https://jira.spring.io/secure/ViewProfile.jspa?name=crab)** opened **[SPR-8047](https://jira.spring.io/browse/SPR-8047?redirect=false)** and commented  Hello,  http://static.springsource.org/spring/docs/3.1.0.M1/spring-framework-reference/html/view.html#view-jsp-formtaglib-checkboxtag says :  'Approach Three - For any other bound value type, the input(checkbox) is marked as 'checked' if the configured setValue(Object) is equal to the bound value.'  it should say 'getValue(Object)' instead of 'setValue(Object)'  same error in http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/view.html#view-jsp-formtaglib-checkboxtag   ---  **Affects:** 3.0 M1, 3.0 M2, 3.0 M3, 3.0 M4, 3.0 RC1, 3.0 RC2, 3.0 RC3, 3.0 GA, 3.0.1, 3.0.2, 3.0.3, 3.0.4, 3.0.5, 3.1 M1","closed","status: declined,","spring-projects-issues","2011-03-13T06:26:04Z","2019-01-12T16:25:59Z"
"","12025","Bean does not get autowired by bean's class if it was auto-proxied and has an interfaces [SPR-7367]","**[Igor Mukhin](https://jira.spring.io/secure/ViewProfile.jspa?name=iimuhin)** opened **[SPR-7367](https://jira.spring.io/browse/SPR-7367?redirect=false)** and commented  ### To Reproduce  #### Configuration  Libs on path: Spring 3.0.3, AspectJ 1.6.9, CGLIB 2.2 (all with dependencies)  **Configure Spring Context**: annotation-config and aspectj-autoproxy  ```            ```  **Define an annotation**: an annotation for a method  ``` package org.example; @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.METHOD) public @interface Anno1 { } ```  **Define an aspect**: a simple aspect with pointcut to run around methods with `@Anno1`  ``` package org.example; @Component @Aspect public class Aspect1 {   @Around(""execution(@org.example.Anno1 * *(..))"")   public Object executeAround(ProceedingJoinPoint joinPoint) throws Throwable {     System.out.println(""Aspect1.executeAround() hit"");     return joinPoint.proceed();   } } ```  #### Interfaces and Beans  **Define an interface**  ``` package org.example; public interface InterfaceA {   public void method1(); } ```  *Define a bean (which implements the interface and uses `@Anno1`) *  ``` package org.example; @Component public class BeanA implements InterfaceA {   @Anno1   public void method1() {     System.out.println(""method1"");   } } ```  #### Next will throw NoSuchBeanDefinitionException  **Define a bean with autowire**  ``` package org.example; @Component public class BeanB {     @Autowire BeanA beanA; } ```  It is to expect that a bean with type BeanA gets autowired to field beanA, **but**  This will throw NoSuchBeanDefinitionException, as it somehow can't find a bean with type BeanA.class.  ### What I found out  #### Possibility 1: Remove interface from BeanA and the autowiring will work  ``` package org.example; @Component public class BeanA {   public void method1() {     System.out.println(""method1"");   } } ```  Now the autowiring will work.  #### Possibility 2: Define autowiring on interface, not on class  ``` package org.example; @Component public class BeanB {     @Autowire InterfaceA beanA; } ```  Now the autowiring will work.  #### Possibility 3: Remove `@Anno1` annotation (which removes auto-proxing)  ``` package org.example; @Component public class BeanA implements InterfaceA {   public void method1() {     System.out.println(""method1"");   } } ```  Now the autowiring will work.    ---  **Affects:** 3.0.3","closed","in: core,","spring-projects-issues","2010-07-13T19:31:33Z","2019-01-12T16:37:48Z"
"","12653","Support loading @Configuration-based singleton parent contexts [SPR-7998]","**[Igor Mihalik](https://jira.spring.io/secure/ViewProfile.jspa?name=imihalik)** opened **[SPR-7998](https://jira.spring.io/browse/SPR-7998?redirect=false)** and commented  With the progress of Java-based configuration in Spring 3.1 it would be great to have also support for Java-based configuration when defining parent context in ""web.xml"". Currently only xml based config is supported (at least that is what I found out, correct me if I'm wrong).  ContextLoaderListener automatically assumes the ""locatorFactorySelector"" param to point to xml based context and looks up the context bean with the name given by ""parentContextKey"".  It would be great to be able to provide a `@Configuration` class to ContextLoaderListener. Similar to ""contextConfigLocation"" which is able to take `@Configuration` class as value, for example:  ```    parentContextKey   com.foo.bar.ParentConfiguration  ```    ---  **Affects:** 3.1 M1","closed","type: enhancement,","spring-projects-issues","2011-02-24T02:13:04Z","2019-01-11T16:18:32Z"
"","12532","Problem with FormattingConversionService [SPR-7875]","**[Igor Mihalik](https://jira.spring.io/secure/ViewProfile.jspa?name=imihalik)** opened **[SPR-7875](https://jira.spring.io/browse/SPR-7875?redirect=false)** and commented  The commit: https://fisheye.springsource.org/browse/spring-framework/trunk/org.springframework.context/src/main/java/org/springframework/format/support/FormattingConversionService.java?r2=3255&r1=2658  probably introduced an error in ""FormattingConversionService"". The diff shows that fieldtype passed to key should be taken from sourcetype (not filedtype variable), cause it's then passed to getPrinter method (as it was before 3255 rev.). The one possible fix is to replace:  ``` annotationFormatterFactory.getPrinter(key.getAnnotation(), key.getFieldType()); ```  by:  ``` annotationFormatterFactory.getPrinter(key.getAnnotation(), sourceType.getType()); ```  or other possibility it to change:  ``` FieldFormatterKey key = new FieldFormatterKey(sourceType.getAnnotation(annotationType), fieldType); ```  by:  ``` FieldFormatterKey key = new FieldFormatterKey(sourceType.getAnnotation(annotationType), sourceType.getType()); ```  which probably better fits the changes made in mentioned commit.  ---  note: this bug was reported by customer via spring support portal  ---  **Affects:** 3.0.4, 3.0.5  **Attachments:** - [7875-patch.tar.gz](https://jira.spring.io/secure/attachment/17569/7875-patch.tar.gz) (_1.49 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7d1104e442e5d0003876106f901b9f420d2df1a7","closed","in: core,","spring-projects-issues","2011-01-12T07:01:37Z","2019-01-13T21:43:51Z"
"","12395","Performance improvement of spring:bind [SPR-7739]","**[Igor Mihalik](https://jira.spring.io/secure/ViewProfile.jspa?name=imihalik)** opened **[SPR-7739](https://jira.spring.io/browse/SPR-7739?redirect=false)** and commented  This is a patch proposal to improve speed of spring:bind. It is related to implementation of org.springframework.web.servlet.support.BindStatus. The patch should provide 25% speed improvement in the constructor. Relevant files are attached for reference.  ---  Note: this patch was submitted directly to SpringSource via support channel by customer.  ---  **Affects:** 3.0.5  **Attachments:** - [bindstatus-patch.zip](https://jira.spring.io/secure/attachment/17353/bindstatus-patch.zip) (_5.16 kB_)","closed","type: enhancement,","spring-projects-issues","2010-11-12T01:40:12Z","2019-01-13T21:44:15Z"
"","12673","ConfigurationClassBeanDefinitionReader:processFeatureAnnotations uses new SimpleMetadataReaderFactory() instead of using the metadataReaderFactory member [SPR-8018]","**[Iftach Bar](https://jira.spring.io/secure/ViewProfile.jspa?name=barnash)** opened **[SPR-8018](https://jira.spring.io/browse/SPR-8018?redirect=false)** and commented  Line 147: MetadataReader metadataReader = new SimpleMetadataReaderFactory().getMetadataReader(annotationType); shouldn't instance a new SimpleMetadataReaderFactory. This causes the classloader to be used for loading metadata to be taken from DefaultResourceLoader, which makes it be taken from the thread. This cannot be overriden if you want your application context to use a different classloader, which basically makes the feature of using a specific classloader with an application context a bit useless because you cannot use things like:  in your applicationContext.xml file.  I would suggest to use the member metadataReaderFactory to fix this issue.   ---  **Affects:** 3.1 M1","closed","status: declined,","spring-projects-issues","2011-03-02T22:56:27Z","2019-01-12T16:26:01Z"
"","11881","mvc:annotation-driven intends to autodetect JodaTime 1.3 but accidentally includes earlier versions as well [SPR-7222]","**[Holger Brands](https://jira.spring.io/secure/ViewProfile.jspa?name=hbrands)** opened **[SPR-7222](https://jira.spring.io/browse/SPR-7222?redirect=false)** and commented  When using mvc:annotation-driven, Spring tries to register default formatters for JodaTime, when JodaTime is on the classpath (class org.joda.time.DateTime is searched for). If it's found, formatters are registered, for example for LocalDate. But LocalDate was added in JodaTime 1.3 AFAIK. So when you have JodaTime 1.2,x on the classpath, the classpath check for DateTime is successful, but registering the default formatters fails with the appended root cause exception:  So, either the documentation should clearly state the supported JodaTime versions (excluding JodaTime < 1.3), or mvc:annotation-driven should work for JodaTime 1.2 also, e.g. with more fine-grained checks for the available classes.  ---  Exception trace: java.lang.ClassNotFoundException: org.joda.time.LocalDate at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1387) at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1233) at java.lang.Class.forName0(Native Method) at java.lang.Class.forName(Class.java:247) at sun.reflect.generics.factory.CoreReflectionFactory.makeNamedType(CoreReflectionFactory.java:95) at sun.reflect.generics.visitor.Reifier.visitClassTypeSignature(Reifier.java:107) at sun.reflect.generics.tree.ClassTypeSignature.accept(ClassTypeSignature.java:31) at sun.reflect.generics.visitor.Reifier.reifyTypeArguments(Reifier.java:50) at sun.reflect.generics.visitor.Reifier.visitClassTypeSignature(Reifier.java:120) at sun.reflect.generics.tree.ClassTypeSignature.accept(ClassTypeSignature.java:31) at sun.reflect.generics.repository.ClassRepository.getSuperInterfaces(ClassRepository.java:82) at java.lang.Class.getGenericInterfaces(Class.java:794) at org.springframework.core.GenericTypeResolver.doResolveTypeArguments(GenericTypeResolver.java:140) at org.springframework.core.GenericTypeResolver.resolveTypeArguments(GenericTypeResolver.java:135) at org.springframework.core.convert.support.GenericConversionService.getRequiredTypeInfo(GenericConversionService.java:220) at org.springframework.core.convert.support.GenericConversionService.addConverter(GenericConversionService.java:81) at org.springframework.format.datetime.joda.JodaTimeConverters.registerConverters(JodaTimeConverters.java:45) at org.springframework.format.datetime.joda.JodaTimeFormattingConfigurer.installJodaTimeFormatting(JodaTimeFormattingConfigurer.java:97) at org.springframework.format.support.FormattingConversionServiceFactoryBean.installFormatters(FormattingConversionServiceFactoryBean.java:101) at org.springframework.format.support.FormattingConversionServiceFactoryBean.afterPropertiesSet(FormattingConversionServiceFactoryBean.java:73) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1469) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1409) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:291) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:288) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:322) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:106) at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:603) at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:144) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:993) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:897) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:485) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBean(BeanDefinitionValueResolver.java:270) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:125) at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:603) at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:144) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:993) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:897) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:485) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:291) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:288) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:387) at org.springframework.context.support.AbstractApplicationContext.getBeansOfType(AbstractApplicationContext.java:1116) at org.springframework.beans.factory.BeanFactoryUtils.beansOfTypeIncludingAncestors(BeanFactoryUtils.java:266) at org.springframework.web.servlet.handler.AbstractUrlHandlerMapping.initInterceptors(AbstractUrlHandlerMapping.java:168) at org.springframework.web.servlet.handler.AbstractHandlerMapping.initApplicationContext(AbstractHandlerMapping.java:110) at org.springframework.web.servlet.handler.AbstractDetectingUrlHandlerMapping.initApplicationContext(AbstractDetectingUrlHandlerMapping.java:57) at org.springframework.context.support.ApplicationObjectSupport.initApplicationContext(ApplicationObjectSupport.java:119) at org.springframework.web.context.support.WebApplicationObjectSupport.initApplicationContext(WebApplicationObjectSupport.java:72) at org.springframework.context.support.ApplicationObjectSupport.setApplicationContext(ApplicationObjectSupport.java:73) at org.springframework.context.support.ApplicationContextAwareProcessor.invokeAwareInterfaces(ApplicationContextAwareProcessor.java:99) at org.springframework.context.support.ApplicationContextAwareProcessor.postProcessBeforeInitialization(ApplicationContextAwareProcessor.java:82) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:394) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1405) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:291) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:288) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:563) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:872) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:423) at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:442) at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:458) at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:339) at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:306) at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:127) at javax.servlet.GenericServlet.init(GenericServlet.java:212) at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1173) at org.apache.catalina.core.StandardWrapper.allocate(StandardWrapper.java:809) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:129) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:293) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:849) at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583) at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:454) at java.lang.Thread.run(Thread.java:619)  ---  **Affects:** 3.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f9736ec3f69b139c0a305701eea700a8e096d6db, https://github.com/spring-projects/spring-framework/commit/6fe5871e91225a32bf83d5211aa3c0f98d5192ce","closed","type: bug,","spring-projects-issues","2010-05-19T19:13:42Z","2019-01-13T21:45:55Z"
"","12525","BeanDefinitionRegistryPostProcessor registered via @Bean will not be invoked [SPR-7868]","**[Henryk Konsek](https://jira.spring.io/secure/ViewProfile.jspa?name=hekonsek)** opened **[SPR-7868](https://jira.spring.io/browse/SPR-7868?redirect=false)** and commented  I created simple bean implementing BeanDefinitionRegistryPostProcessor. All I want to do is to register some bean definition in the BeanDefinitionRegistryPostProcessor#postProcessBeanDefinitionRegistry method. The problem is that code working with ClassPathXmlApplicationContext doesn't work with AnnotationConfigApplicationContext.  My intelligent guess would be that BeanDefinitionRegistryPostProcessor#postProcessBeanDefinitionRegistry is called after JavaConfig bean postprocessor.  I'm attaching minimal Maven project with two unit tests (XmlTest & AnnotationTest) to demonstrate the issue.  ---  **Affects:** 3.0.5  **Attachments:** - [registryBug.zip](https://jira.spring.io/secure/attachment/17503/registryBug.zip) (_23.00 kB_)  **Issue Links:** - #14099 Method postProcessBeanDefinitionRegistry is not called if the bean implements BeanDefinitionRegistryPostProcessor (_**""is duplicated by""**_) - #12917 BeanFactoryPostProcessor breaks default post-processing of `@Configuration` classes - #15258 Allow BeanDefinitionRegistryPostProcessor to register other BeanDefinitionRegistryPostProcessors","closed","in: core,","spring-projects-issues","2011-01-09T10:37:48Z","2019-01-13T07:11:40Z"
"","12769","Sharing parent context between web apps broken when sharing the Spring libraries between applications [SPR-8115]","**[Henning Blohm](https://jira.spring.io/secure/ViewProfile.jspa?name=gnomie2000)** opened **[SPR-8115](https://jira.spring.io/browse/SPR-8115?redirect=false)** and commented  The fact that ContextLoaderListener uses ContextSingletonBeanFactoryLocator and that the latter holds on the BeanFactoryLocators by locatorFactorySelector specification leads to the following problem:  If web applications of different class loading namespaces individually use the ""beanRefContext.xml"" mechanism to refer to a shared parent context, all specifying the same locatorFactorySelector string, they all get the parent context of the one looking for it first.  Secondly, ContextSingletonBeanFactoryLocator represents a memory leak when not loaded with the single application but from a share classpath.  Issue #10481 has the same cause. Just wanted to create an issue that is more to the point.  ---  **Affects:** 3.0.5, 3.1 M1","closed","status: declined,","spring-projects-issues","2011-03-31T06:28:45Z","2019-01-12T16:25:51Z"
"","12384","CollectionToCollectionConverter does not convert if the source is empty [SPR-7728]","**[HC](https://jira.spring.io/secure/ViewProfile.jspa?name=hc)** opened **[SPR-7728](https://jira.spring.io/browse/SPR-7728?redirect=false)** and commented  CollectionToCollectionConverter returns the original source object if the collection is empty. Relevant source code is attached (see convertEmptyVector_shouldReturnEmptyArrayList unit test)  Best Regards  Horatiu  ---  **Affects:** 3.0.4  **Attachments:** - [CollectionToCollectionConverterTest.java](https://jira.spring.io/secure/attachment/17343/CollectionToCollectionConverterTest.java) (_1.44 kB_)  **Issue Links:** - #13198 MapToMapConverter invalidly returns source map for empty maps (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/58d68cef986aaaf4b6a296b234f8ca4744d357e3  **Backported to:** [3.0.7](https://github.com/spring-projects/spring-framework/milestone/74?closed=1)","closed","in: core,","spring-projects-issues","2010-11-09T06:39:39Z","2019-01-11T15:29:23Z"
"","12658","enhance JSR 303 support to enable ignoring constraint xml configuration  [SPR-8003]","**[Harrison Zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=harrison)** opened **[SPR-8003](https://jira.spring.io/browse/SPR-8003?redirect=false)** and commented  Spring 3 introduces support for JSR 303 (Bean validation), which has two approaches to define constraints on bean: by annotations and by xml configuration file. Per JSR 303 spec, xml approach can be disabled explictly by calling api Configuration.ignoreXmlConfiguration() in bootstrap process. However, it is currently impossible in Spring.   ---  **Affects:** 3.0.5","closed","type: enhancement,","spring-projects-issues","2011-02-27T22:29:24Z","2018-12-28T10:18:06Z"
"","12115","PropertiesLoaderSupport throws error ""'whatever' does not carry a filename"" if you feed a ByteArrayResource to it. [SPR-7457]","**[Haroldo de Oliveira Pinheiro](https://jira.spring.io/secure/ViewProfile.jspa?name=haroldo-ok-ats)** opened **[SPR-7457](https://jira.spring.io/browse/SPR-7457?redirect=false)** and commented  I'm having a problem where I'm trying to feed a ByteArrayResource to a PropertyPlaceholderConfigurer, and getting an error like ""PropertiesLoaderSupport throws error ""'whatever' does not carry a filename"" if you feed a ByteArrayResource to it."" I saw a previous similar issue at https://jira.springframework.org/browse/SPR-5068, where it was argued that doing so is unusual and unnecessary. But in my case, I'm using the ByteArrayResource to hold some values that are actually computed at runtime, and I wouldn't really like to have to create a temporary file just for that single reason.  The XML mapping is like this:  {{ \ \ \ \ \ \ \ \ }}  ApplicationConfigResourceArrayFactory:  {{ public class ApplicationConfigResourceArrayFactory implements FactoryBean, ResourceLoaderAware { private static final Logger logger = Logger.getLogger(ApplicationConfigResourceArrayFactory.class);      private static final String RESOURCE_PATH_PROPERTY = ""aplicacao.config"";	     private static final String RESOURCE_PATH_REFERENCE = ""@{"" + RESOURCE_PATH_PROPERTY + ""}"";	     private static final String COMENTARIO_PROPRIEDADES_SISTEMA = ""Propriedades do sistema montadas em tempo de execução."";          private ApplicationConfigService applicationConfigService;     private ResourceLoader resourceLoader;     private String[] configLocations;          @Override     public Object getObject() throws Exception {     	String[] nomes = this.getConfigLocations();     	List lista = new ArrayList(nomes.length);     	     	this.loadConfigFiles(lista, nomes);		     	this.loadComputedProperties(lista);     	     	return lista.toArray(new Resource[lista.size()]);     }          private void loadComputedProperties(List lista)     		throws IOException {     	Properties properties = new Properties();     	properties.put(RESOURCE_PATH_PROPERTY, this.getURIBase().toString());     	ByteArrayOutputStream bout = new ByteArrayOutputStream();     	properties.store(bout, COMENTARIO_PROPRIEDADES_SISTEMA);     	lista.add(new ByteArrayResource(bout.toByteArray(), COMENTARIO_PROPRIEDADES_SISTEMA));     }          private void loadConfigFiles(List lista, String[] nomes) {     	for (int i = 0; i != nomes.length; i++) {     		String caminho = nomes[i].replace(RESOURCE_PATH_REFERENCE, this.getURIBase().toString());     		logger.debug(""Caminho: "" + caminho);     		try {     			Resource[] resources = ((ResourcePatternResolver)this.getResourceLoader()).getResources(caminho);     			lista.addAll(Arrays.asList(resources));     		} catch (Exception e) {     			logger.warn(""Falhou em carregar os resources no caminho: "" + caminho, e);     		}     	}     }          @Override     @SuppressWarnings(""unchecked"")     public Class getObjectType() {     	return new Resource[0].getClass();     }          @Override     public boolean isSingleton() {     	return true;     }          private URI getURIBase() {     	return this.getApplicationConfigService().getApplicationConfigPath().toURI();     }          public ApplicationConfigService getApplicationConfigService() {     	if (this.applicationConfigService == null) {     		throw new ConfigurationException(""Serviço de configuração de aplicação não informado."");     	}     	return this.applicationConfigService;     }     public void setApplicationConfigService(     		ApplicationConfigService applicationConfigService) {     	this.applicationConfigService = applicationConfigService;     }          public String[] getConfigLocations() {     	if (this.configLocations == null) {     		throw new ConfigurationException(""Localização dos arquivos de configuração não foi informada."");     	}     	return this.configLocations;     }     public void setConfigLocation(String[] configLocations) {     	this.configLocations = configLocations;     }          public ResourceLoader getResourceLoader() {     	if (this.resourceLoader == null) {     		throw new ConfigurationException(""ResourceLoader não informado."");     	}     	return this.resourceLoader;     }     public void setResourceLoader(ResourceLoader resourceLoader) {     	this.resourceLoader = resourceLoader;     }  } }}   ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2010-08-12T07:13:32Z","2010-08-12T15:15:34Z"
"","12242","View returned from @ExceptionHandler does not take into account response content type [SPR-7586]","**[Harman](https://jira.spring.io/secure/ViewProfile.jspa?name=jany2k)** opened **[SPR-7586](https://jira.spring.io/browse/SPR-7586?redirect=false)** and commented  Hi,  I am using Spring Rest to process JSON request and return a JSON response, all works fine.  Now i want to return a html view to user in case JSON request processing throws an exception. For this i have used `@ExceptionHandler` to create a ModelAndView, but after returning the response DispatcherServlet uses MappingJacksonView to render the response.  Is there a way i can render a HTML Page( in case of error) for request with accept header as application/json  Quote:  ``` @ExceptionHanlder(value=MultipleItemsFoundExceptio n.class public ModelAndView handleMultipleItemError(MultipleItemsFoundExceptio n e, HttpServletResponse response){ ModelAndView mav = new ModelAndView(); mav.setViewName(""detail""); mav.addObject(""list"",e.getItemList()); response.setContentType(""text/html""); return mav; } ```    ---  **Affects:** 3.0.2  **Reference URL:** http://forum.springsource.org/showthread.php?p=320611#post320611","closed","type: bug,","spring-projects-issues","2010-09-22T14:23:57Z","2012-06-19T03:43:52Z"
"","12402","AnnotationMethodHandlerAdapter doesn't respect LastModified [SPR-7746]","**[Harald Radi](https://jira.spring.io/secure/ViewProfile.jspa?name=harald)** opened **[SPR-7746](https://jira.spring.io/browse/SPR-7746?redirect=false)** and commented  AnnotationMethodHandlerAdapter.getLastModified() always blindly returns -1 and unlike HttpRequestHandlerAdapter doesn't check whether handler implements LastModified.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/df5e4d6d56f00739a6cd280614003590b55d4f7b","closed","type: enhancement,","spring-projects-issues","2010-11-17T05:37:38Z","2011-10-10T01:28:41Z"
"","12227","AspectJExpressionPointcut does not use the right classloader when initializing the pointcut parser [SPR-7570]","**[Harald Radi](https://jira.spring.io/secure/ViewProfile.jspa?name=harald)** opened **[SPR-7570](https://jira.spring.io/browse/SPR-7570?redirect=false)** and commented  AspectJExpressionPointcut.initializePointcutParser() calls PointcutParser.getPointcutParserSupportingSpecifiedPrimitivesAndUsingContextClassloaderForResolution() which uses the current thread's context class loader to initialize the pointcut parser's world. the context classloader is never set to the classloader of the current beanfactory though (i'm calling ApplicationContext.refresh() initially).  either the context classloader needs to be set or p.setClassLoader(beanFactory.getClassLoader()) needs to be called somewhere in AspectJExpressionPointcut.    ---  **Affects:** 3.0.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f88f69e700abb5291049fc5edd08e0d71dec54b0","closed","in: core,","spring-projects-issues","2010-09-19T02:13:11Z","2019-01-11T15:06:10Z"
"","12225","BeanFactoryAdvisorRetrievalHelper.findAdvisorBeans() must not include ancestors when discovering advisors [SPR-7568]","**[Harald Radi](https://jira.spring.io/secure/ViewProfile.jspa?name=harald)** opened **[SPR-7568](https://jira.spring.io/browse/SPR-7568?redirect=false)** and commented  I know this would be a radical change (probably unlikely to be ever made) but the current mechanism has a few flaws:  1) the an AutoProxyCreator post processor is only applied when the context definition contains either , , or something similar. that means for a simple servlet context just containing controllers the AutoProxyCreator will never be applied regardless whether there are any advices defined in any parent contexts or not.    This leads to a rather unpredictable behavior as it is not really transparent when an AutoProxyCreator is applied and when not. Even worse, if it is applied it picks up all applicable advices from all parent contexts which makes it hard to predict which advices actually will get applied in the end.  2) If the application context containing the pointcut definition uses another classloader than the applicationcontext with a matching bean you're doomed (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=306915).  I'd rather suggest a PropertyPlaceholderConfigurer-like behavior where  sections only get applied to the application context they're defined in. that would make everything much more predictable.  (PS: unfortunately there is also no progress on the aspectj bugreport which could have partially solved my issue, hence i'm bugging you as well.)   ---  **Affects:** 3.0.4","closed","in: core,","spring-projects-issues","2010-09-18T02:44:37Z","2019-01-12T16:26:45Z"
"","12207","BeanFactory doesn't respect the order of manually registered BeanPostProcessors [SPR-7550]","**[Harald Radi](https://jira.spring.io/secure/ViewProfile.jspa?name=harald)** opened **[SPR-7550](https://jira.spring.io/browse/SPR-7550?redirect=false)** and commented  As stated on http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/beans.html ""[...]  You can control the order in which these BeanPostProcessor interfaces execute by setting the order property. You can set this property only if the BeanPostProcessor implements the Ordered interface; [...]"". Unfortunately this is not true, the list of BeanPostProcessors is a simple ArrayList in AbstractBeanFactory and AbstractAutowireCapableBeanFactory.applyBeanPostProcessors(Before|After)Initialization just iterates over it, the post processors are hence executed in the registration order regardless whether they implement Ordered or not.  In my particular case I need my BeanPostProcessor to run after any proxying of beans, otherwise i don't have the correct bean reference (need: proxy reference, actual: target reference).   ---  **Affects:** 3.0.4  **Attachments:** - [beans.html](https://jira.spring.io/secure/attachment/18353/beans.html) (_478.06 kB_) - [mylyn-context.zip](https://jira.spring.io/secure/attachment/18354/mylyn-context.zip) (_4.46 kB_) - [SPR-7550.PNG](https://jira.spring.io/secure/attachment/17100/SPR-7550.PNG) (_61.25 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2d9ced04b1d79090abc3f5587ad341ce4489af68","closed","in: core,","spring-projects-issues","2010-09-13T06:20:03Z","2019-01-12T16:26:47Z"
"","12518","add to the class org.springframework.http.HttpHeaders a method String getIfMatch() [SPR-7861]","**[Hans Desmet](https://jira.spring.io/secure/ViewProfile.jspa?name=desmethans)** opened **[SPR-7861](https://jira.spring.io/browse/SPR-7861?redirect=false)** and commented  During the processing of a conditional PUT request in a Spring MVC REST service, you have to read the request header If-Match.  You can do this with a method call getFirst(""If-Match"") on the HttpHeaders object, but it would be more elegant and less prone to typing errors if you could do it with a method call getIfMatch() on the HttpHeaders object   ---  **Affects:** 3.0.5","closed","type: enhancement,","spring-projects-issues","2011-01-06T08:36:28Z","2014-12-08T12:33:20Z"
"","12493","Response contains twice the Allow header when using @RequestMapping(method=RequestMethod.OPTIONS) [SPR-7837]","**[Hans Desmet](https://jira.spring.io/secure/ViewProfile.jspa?name=desmethans)** opened **[SPR-7837](https://jira.spring.io/browse/SPR-7837?redirect=false)** and commented  Given following configuration of the DispatcherServlet in web.xml  ---  \ \springDispatcher\ \org.springframework.web.servlet.DispatcherServlet\ \ \contextConfigLocation\ \/WEB-INF/springControllers.xml\ \ \ \dispatchOptionsRequest\ \true\ \ \1\ \ \ \springDispatcher\ \/\ \  And the following MVC Controller:  ---  `@Controller` `@RequestMapping`(""/persons"") public class PersonController { `@RequestMapping`(method = RequestMethod.OPTIONS) public ResponseEntity getPersonsOptions() { HttpHeaders headers = new HttpHeaders(); headers.setAllow(EnumSet.of(HttpMethod.GET, HttpMethod.POST)); return new ResponseEntity(headers, HttpStatus.OK); } }  When you do a request to the URI /persons with the HTTP method OPTIONS, you get a request which contains the Alow header TWICE:  ---  - once with the value GET, HEAD, POST, PUT, DELETE, TRACE, OPTIONS   this is incorrect and most likely generated by the standard HttpServlet behavior of OPTIONS requests - and once with te value GET,POST (this is correct)  ---  **Affects:** 3.0.5","closed","type: bug,","spring-projects-issues","2010-12-27T06:57:54Z","2019-01-13T07:11:46Z"
"","12166","JSP tag spring:eval does not apply @NumberFormat and @DateTimeFormat formatting on the expression when using the var attribute [SPR-7509]","**[Hans Desmet](https://jira.spring.io/secure/ViewProfile.jspa?name=desmethans)** opened **[SPR-7509](https://jira.spring.io/browse/SPR-7509?redirect=false)** and commented  When you put the output of spring:eval in a variabele (via the var attribute), spring:eval does not apply  `@NumberFormat` and `@DateTimeFormat` formatting on the expression.  When you put the output of spring:eval directly in the page, this bug does not occur.  ```xml                springDispatcher                org.springframework.web.servlet.DispatcherServlet                  1                   springDispatcher         /       ```  ```xml                   ```  ```java package org.example.entities;  import java.math.BigDecimal; import java.util.Date; import org.springframework.format.annotation.DateTimeFormat; import org.springframework.format.annotation.NumberFormat;  public class Person {      @NumberFormat     private BigDecimal income;      public void setIncome(BigDecimal income) {         this.income = income;     }      public BigDecimal getIncome() {         return income;     }     @DateTimeFormat(style = ""S-"")     private Date employed;      public void setEmployed(Date employed) {         this.employed = new Date(employed.getTime());     }      public Date getEmployed() {         return new Date(employed.getTime());     } } ```  ```java package org.example.web;  import java.math.BigDecimal; import java.util.Date; import org.example.entities.Person; import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.RequestMapping;  @Controller public class IndexController {      @RequestMapping(""/"")     public String index(Model model) {         Person person = new Person();         person.setIncome(new BigDecimal(2000));         person.setEmployed(new Date());         model.addAttribute(person);         return ""WEB-INF/JSP/index.jsp"";     } } ```  ```html                           spring:eval bug                                                 Spring eval correct: example 1                                                                                      Spring eval bug: example 1                                                            ${income}                                           Spring eval correct: example 2                                                                                      Spring eval bug: example 2                                                            ${employed}                             ```  ``` Spring eval correct: example 1     2.000  Spring eval bug: example 1     2000  Spring eval correct: example 2     31/08/10  Spring eval bug: example 2     Tue Aug 31 09:07:07 CEST 2010  ```    ---  **Affects:** 3.0.4  7 votes, 7 watchers","closed","status: bulk-closed,","spring-projects-issues","2010-08-31T01:09:40Z","2019-01-12T03:32:27Z"
"","11917","generates span with incorrect id:  [SPR-7258]","**[Hans Desmet](https://jira.spring.io/secure/ViewProfile.jspa?name=desmethans)** opened **[SPR-7258](https://jira.spring.io/browse/SPR-7258?redirect=false)** and commented   generates span with incorrect id: \  The character ""*"" is not allowed in the value of attribute ""id""   ---  **Affects:** 3.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/53cdb9dfeb89196c11239c780bfdd3655b56ad30","closed","type: bug,","spring-projects-issues","2010-06-03T21:16:23Z","2012-06-19T03:43:17Z"
"","12524","Add support for DELETE with body to RestTemplate [SPR-7867]","**[Hannes Schmidt](https://jira.spring.io/secure/ViewProfile.jspa?name=hannes.schmidt)** opened **[SPR-7867](https://jira.spring.io/browse/SPR-7867?redirect=false)** and commented  Spring's annotation-based REST controllers support almost any combination of HTTP method and request/respond payload. For example, it is possible to write a controller method that accepts  a DELETE with a request body object.  RestTemplate should IMHO mirror these capabilities and support request/response bodies for all methods regardless of whether a combination is allowed by the REST RFCs.  Alternatively, RestTemplate could make it easier to add support for these combinations in custom subclasses by making its various inner-classes protected.  ---  **Affects:** 3.0.5  **Issue Links:** - #18637 RestTemplate doesnt support DELETE with RequestBody (_**""is duplicated by""**_) - #16966 Add support for DELETE with body to RestTemplate through exchange method  5 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2011-01-07T16:53:39Z","2019-01-11T15:23:23Z"
"","12160","Spring closes javax.persistence.EntityManager instance after calling its getDelegate method.. [SPR-7503]","**[Gursel Koca](https://jira.spring.io/secure/ViewProfile.jspa?name=gurselkoca)** opened **[SPR-7503](https://jira.spring.io/browse/SPR-7503?redirect=false)** and commented  I am using eclipselink 2.0 as persistence provider. I want to use its native methods , therefore I have called getDelegate method of EntityManager, but returned object JpaEntityManager is in closed state.  As workaround, I have used unwrap method instead of getDelegate ..    ---  **Affects:** 3.0.3","closed","in: core,","spring-projects-issues","2010-08-27T05:12:07Z","2019-01-12T16:26:52Z"
"","12393","Why there no Exception when trying to inject a wrong value of java.util.Properties [SPR-7737]","**[guodong qu](https://jira.spring.io/secure/ViewProfile.jspa?name=qiuguo0205)** opened **[SPR-7737](https://jira.spring.io/browse/SPR-7737?redirect=false)** and commented  Here is the java code:  ```   package cn.com.test.spring.properties;  import java.util.Properties; import org.springframework.context.ApplicationContext; import org.springframework.context.support.ClassPathXmlApplicationContext;  public class PropertyTest { 	private Properties pro;  	public void setPro(Properties pro) { 		this.pro = pro; 	}  	public Properties getPro() { 		return pro; 	} 	 	public static void main(String[] args) { 		ApplicationContext context = new ClassPathXmlApplicationContext(""context_test_property.xml""); 		PropertyTest test = (PropertyTest)context.getBean(""PropertyTest""); 		System.out.println(test.getPro().get(""testString"")); 	} } ```  and here is the context file:  ```     	 		 	  ```  The result is printing ""null"" in the console. I wonder why there is no Exception thrown, thanks.   ---  **Affects:** 3.0.4","closed","in: core,","spring-projects-issues","2010-11-10T23:13:49Z","2019-01-12T16:26:34Z"
"","12423","Support for method-level @RequestMapping in @javax.annotation.ManagedBean controllers [SPR-7767]","**[Guillaume Bilodeau](https://jira.spring.io/secure/ViewProfile.jspa?name=gbilodeau)** opened **[SPR-7767](https://jira.spring.io/browse/SPR-7767?redirect=false)** and commented  Methods annotated with `@RequestMapping` are not registered as URL handlers if the class is itself annotated with `@ManagedBean` but is not annotated with `@RequestMapping`.  This works correctly with `@Controller` classes.  Support for this should be quite easy to add: in org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping.determineUrlsForHandler(String), method-level introspection is explicitly activated for classes without class-level `@RequestMapping` but with class-level `@Controller`.  Adding another if clause for `@ManagedBean` should do the trick.   ---  **Affects:** 3.0.4","closed","type: enhancement,","spring-projects-issues","2010-11-26T10:46:48Z","2011-12-14T13:59:37Z"
"","12274","Additional event on destroying beans after failed initialization [SPR-7618]","**[Grzegorz Olędzki](https://jira.spring.io/secure/ViewProfile.jspa?name=grzegorz.oledzki)** opened **[SPR-7618](https://jira.spring.io/browse/SPR-7618?redirect=false)** and commented  If an error happens during application context startup (e.g. exception in some beans' constructor) the application context switches to destroy mode. It would be useful if there was an event (`ApplicationEvent`) published after exception discovery and before any shutting down happens.  In the code it would be placed somewhere near (`AbstractApplicationContext`):  ``` try {  // ...   // refresh() } catch (BeansException ex) {    // HERE publish an event    destroyBeans(); } ```    ---  **Affects:** 3.0.2","closed","type: enhancement,","spring-projects-issues","2010-10-05T04:08:39Z","2018-12-28T11:53:38Z"
"","12709","Since the introduction of nested ""beans"" element, ""id"" is no longer of type xsd:ID [SPR-8054]","**[Grzegorz Grzybek](https://jira.spring.io/secure/ViewProfile.jspa?name=grzes)** opened **[SPR-8054](https://jira.spring.io/browse/SPR-8054?redirect=false)** and commented  Section 3.3.1 of reference documentation should be clarified. `id` is no longer unique per XML file. It's now `xsd:string`.   ---  **Affects:** 3.1 M1  **Attachments:** - [mylyn-context.zip](https://jira.spring.io/secure/attachment/17730/mylyn-context.zip) (_664 bytes_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/529817301f763ed3e858cda99cdd5b09d5304dd3","closed","type: bug,","spring-projects-issues","2011-03-14T02:17:33Z","2019-01-11T12:39:29Z"
"","11897","Transaction is not started when two spring contexts are created during tests using AspectJ load time weaving [SPR-7238]","**[Grzegorz Borkowski](https://jira.spring.io/secure/ViewProfile.jspa?name=grzegorzborkowski)** opened **[SPR-7238](https://jira.spring.io/browse/SPR-7238?redirect=false)** and commented  I run unit tests using Spring integration testing tools, that is, marking test classes with `@ContextConfiguration`(locations = {...}) , which implies that Spring uses the same context for all test having the same context location configuration. In the tests, I call some transactional service. Transactions are weaved during compile time with AspectJ. The problem is following: as long as there is only one Spring context created during tests (all test classes using the some context location configuration, so there is only one context created), everything runs smoothly. But when one test uses different context configuration, and there are two contexts created (which should be independent from each other), transactions don't get started, and I got exception ""no transaction in progress..."". It looks like two contexts that should be independent, actually have some impact on each other. More precisely, it works this way: tests methods based on first spring contexts pass, then test methods using second context are run, and they pass, but then another test methods using first spring context are run and they fail with ""No transaction"" exception. So it look like running second context spoils the first one. This is serious problem for us, which makes running tests very difficult. JUnit doesn't let us decide on the order in which test methods are run, which makes this really problematic.  I attach simple test case as maven project, run the test and see that they fail (if they are run in order: test 1, 2, 3). If you change the second test so that is uses the same context configuration like tests 1 and 3, everything works fine. But it test 2 uses different configuration, test 3 fails.  ---  **Affects:** 3.0.2  **Reference URL:** http://forum.springsource.org/showthread.php?p=301948#post301948  **Attachments:** - [springtestcase.zip](https://jira.spring.io/secure/attachment/16596/springtestcase.zip) (_17.86 kB_)  **Issue Links:** - #11019 TestContext framework should support one AspectJ instance per ApplicationContext (_**""duplicates""**_)  1 votes, 3 watchers","closed","in: core,","spring-projects-issues","2010-05-26T03:18:53Z","2019-01-12T16:49:38Z"
"","12749","Mapped interceptors are lost from AbstractUrlHandlerMapping [SPR-8094]","**[Gregor Magdolen](https://jira.spring.io/secure/ViewProfile.jspa?name=hrax)** opened **[SPR-8094](https://jira.spring.io/browse/SPR-8094?redirect=false)** and commented  In source for AbstractUrlHandlerMapping version 3.0.5 line 210 (method getHandlerInternal), when checking for mapped interceptors a HandlerExecutionChain is created, interceptors are inserted into the chain, but returned object from method is handler not handler chain, thus causing handler to loose all its mapped interceptors.   ---  **Affects:** 3.0.5","closed","type: bug,","spring-projects-issues","2011-03-29T04:51:22Z","2012-06-19T03:39:03Z"
"","12024","DefaultMessageListenerContainer transacted session race condition if no messages for a while when using shared/cached sessions [SPR-7366]","**[Greg Thoenen](https://jira.spring.io/secure/ViewProfile.jspa?name=gregthoen)** opened **[SPR-7366](https://jira.spring.io/browse/SPR-7366?redirect=false)** and commented  When using a DefaultMessageListenerContainer with transacted sessions, such as that created by the following spring integration bean definition:        If you receive no messages on the queue for whatever you have your transaction timeout set for your QueueConnectionFactory (it's one hour by default in Weblogic 10.3), you will see messages like this in the logs (as #8267 also seemed to be talking about):  2010-07-01 15:49:21,304 INFO  [tid=2242,tgn=Pooled Threads] [org.springframework.jms.listener.DefaultMessageListenerContainer.handleListenerSetupFailure():747] Setup of JMS message listener invoker failed for destination 'jms/myqueue' - trying to recover. Cause: Attempt to resume an inactive transaction: BEA1-000598DE4AF4FDE2FECA:error resuming transacted session's internal transaction weblogic.jms.common.TransactionRolledBackException: Attempt to resume an inactive transaction: BEA1-000598DE4AF4FDE2FECA:error resuming transacted session's internal transaction at weblogic.jms.dispatcher.DispatcherAdapter.convertToJMSExceptionAndThrow(DispatcherAdapter.java:110) at weblogic.jms.dispatcher.DispatcherAdapter.dispatchSyncNoTran(DispatcherAdapter.java:61) at weblogic.jms.client.JMSSession.receiveMessage(JMSSession.java:870) at weblogic.jms.client.JMSConsumer.receiveInternal(JMSConsumer.java:644) at weblogic.jms.client.JMSConsumer.receive(JMSConsumer.java:523) at weblogic.jms.client.WLConsumerImpl.receive(WLConsumerImpl.java:184) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveMessage(AbstractPollingMessageListenerContainer.java:405) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:308) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:261) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:982) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:881) at java.lang.Thread.run(Thread.java:619) Caused by: weblogic.jms.common.TransactionRolledBackException: Attempt to resume an inactive transaction: BEA1-000598DE4AF4FDE2FECA:error resuming transacted session's internal transaction at weblogic.jms.dispatcher.Request.handleThrowable(Request.java:87) at weblogic.jms.dispatcher.Request.getResult(Request.java:52) at weblogic.messaging.dispatcher.Request.wrappedFiniteStateMachine(Request.java:1124) at weblogic.messaging.dispatcher.DispatcherImpl.syncRequest(DispatcherImpl.java:184) at weblogic.messaging.dispatcher.DispatcherImpl.dispatchSyncNoTran(DispatcherImpl.java:287) at weblogic.jms.dispatcher.DispatcherAdapter.dispatchSyncNoTran(DispatcherAdapter.java:59) ... 10 more Caused by: weblogic.jms.common.TransactionRolledBackException: Attempt to resume an inactive transaction: BEA1-000598DE4AF4FDE2FECA:error resuming transacted session's internal transaction at weblogic.jms.frontend.FESession.transactedException(FESession.java:2062) at weblogic.jms.frontend.FESession.throwTransactedException(FESession.java:2077) at weblogic.jms.frontend.FESession.transactedInfect(FESession.java:2178) at weblogic.jms.frontend.FEConsumer.receive(FEConsumer.java:553) at weblogic.jms.frontend.FEConsumer.invoke(FEConsumer.java:805) at weblogic.messaging.dispatcher.Request.wrappedFiniteStateMachine(Request.java:961) ... 13 more Caused by: javax.transaction.InvalidTransactionException: Attempt to resume an inactive transaction: BEA1-000598DE4AF4FDE2FECA at weblogic.transaction.internal.TransactionManagerImpl.resume(TransactionManagerImpl.java:360) at weblogic.transaction.internal.ServerTransactionManagerImpl.resume(ServerTransactionManagerImpl.java:376) at weblogic.jms.frontend.FESession.transactedInfect(FESession.java:2123) ... 16 more 2010-07-01 15:49:21,351 INFO  [tid=2242,tgn=Pooled Threads] [org.springframework.jms.listener.DefaultMessageListenerContainer.refreshConnectionUntilSuccessful():791] Successfully refreshed JMS Connection 2010-07-01 15:49:21,367 DEBUG [tid=2243,tgn=Pooled Threads] [springframework.jms.support.destination.JndiDestinationResolver.lookup():111] Located object with JNDI name [jms/myqueue]  This will repeat every hour on the hour (or whatever you have your QueueConnectionFactory's transaction timeout set to) if you have no messages on the queue to receive for that hour, which is annoying, but not a big deal.  The main problem is that if you happen to receive a message right before the transaction timeout would occur - say, at 59 minutes and 50 seconds - and it takes more than 10 seconds to process the message, the JMS transaction will timeout so the message gets redelivered to another consumer while the first consumer still successfully processes it -- and because XA transactions are not being used, the db work from the first delivery commits before it tries to commit the JMS session [which throws an exception], and the 2nd delivery also succeeds so that you end up successfully processing the message twice.  Here's some output demonstrating this, where, for ease of reproducing, I set my QueueConnectionFactory transaction timeout to 5 minutes then purposely put a message on the queue a few seconds before I expected to have an ""inactive transaction"" message like above.  The receiver of the message is just sleeping for a random time b/w 2 and 3 minutes (so, it should be within the transaction timeout of 5 minutes, but the problem is that it gets picked up a few minutes into the transaction [i.e. since the last session commit/rollback].  Note that the ""tid="" part in the log lines is the thread id, for help in showing what thread is doing what.  2010-07-01 15:53:33,839 DEBUG [tid=3719,tgn=Pooled Threads] [org.springframework.jms.listener.DefaultMessageListenerContainer.doReceiveAndExecute():311] Received message of type [class weblogic.jms.common.ObjectMessageImpl] from consumer [weblogic.jms.client.WLConsumerImpl@23fea4a] of session [weblogic.jms.client.WLSessionImpl@23fe6da] 2010-07-01 15:53:34,198 INFO  [tid=3719,tgn=Pooled Threads] [mycompany.Test.receiveFromQueue():132] message received from queue: testmessage1 2010-07-01 15:53:34,198 INFO  [tid=3719,tgn=Pooled Threads] [mycompany.Test.receiveFromQueue():137] sleeping 2010-07-01 15:54:32,074 INFO  [tid=3798,tgn=Pooled Threads] [org.springframework.jms.listener.DefaultMessageListenerContainer.handleListenerSetupFailure():747] Setup of JMS message listener invoker failed for destination 'jms/myqueue' - trying to recover. Cause: Attempt to resume an inactive transaction: BEA1-000B98DE4AF4FDE2FECA:error resuming transacted session's internal transaction weblogic.jms.common.TransactionRolledBackException: Attempt to resume an inactive transaction: BEA1-000B98DE4AF4FDE2FECA:error resuming transacted session's internal transaction at weblogic.jms.dispatcher.DispatcherAdapter.convertToJMSExceptionAndThrow(DispatcherAdapter.java:110) at weblogic.jms.dispatcher.DispatcherAdapter.dispatchSyncNoTran(DispatcherAdapter.java:61) at weblogic.jms.client.JMSSession.receiveMessage(JMSSession.java:870) at weblogic.jms.client.JMSConsumer.receiveInternal(JMSConsumer.java:644) at weblogic.jms.client.JMSConsumer.receive(JMSConsumer.java:523) at weblogic.jms.client.WLConsumerImpl.receive(WLConsumerImpl.java:184) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveMessage(AbstractPollingMessageListenerContainer.java:405) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:308) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:261) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:982) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:881) at java.lang.Thread.run(Thread.java:619) Caused by: weblogic.jms.common.TransactionRolledBackException: Attempt to resume an inactive transaction: BEA1-000B98DE4AF4FDE2FECA:error resuming transacted session's internal transaction at weblogic.jms.dispatcher.Request.handleThrowable(Request.java:87) at weblogic.jms.dispatcher.Request.getResult(Request.java:52) at weblogic.messaging.dispatcher.Request.wrappedFiniteStateMachine(Request.java:1124) at weblogic.messaging.dispatcher.DispatcherImpl.syncRequest(DispatcherImpl.java:184) at weblogic.messaging.dispatcher.DispatcherImpl.dispatchSyncNoTran(DispatcherImpl.java:287) at weblogic.jms.dispatcher.DispatcherAdapter.dispatchSyncNoTran(DispatcherAdapter.java:59) ... 10 more Caused by: weblogic.jms.common.TransactionRolledBackException: Attempt to resume an inactive transaction: BEA1-000B98DE4AF4FDE2FECA:error resuming transacted session's internal transaction at weblogic.jms.frontend.FESession.transactedException(FESession.java:2062) at weblogic.jms.frontend.FESession.throwTransactedException(FESession.java:2077) at weblogic.jms.frontend.FESession.transactedInfect(FESession.java:2178) at weblogic.jms.frontend.FEConsumer.receive(FEConsumer.java:553) at weblogic.jms.frontend.FEConsumer.invoke(FEConsumer.java:805) at weblogic.messaging.dispatcher.Request.wrappedFiniteStateMachine(Request.java:961) ... 13 more Caused by: javax.transaction.InvalidTransactionException: Attempt to resume an inactive transaction: BEA1-000B98DE4AF4FDE2FECA at weblogic.transaction.internal.TransactionManagerImpl.resume(TransactionManagerImpl.java:360) at weblogic.transaction.internal.ServerTransactionManagerImpl.resume(ServerTransactionManagerImpl.java:376) at weblogic.jms.frontend.FESession.transactedInfect(FESession.java:2123) ... 16 more 2010-07-01 15:54:32,074 INFO  [tid=3798,tgn=Pooled Threads] [org.springframework.jms.listener.DefaultMessageListenerContainer.refreshConnectionUntilSuccessful():791] Successfully refreshed JMS Connection 2010-07-01 15:54:32,074 DEBUG [tid=3804,tgn=Pooled Threads] [springframework.jms.support.destination.JndiDestinationResolver.lookup():111] Located object with JNDI name [jms/myqueue] 2010-07-01 15:54:47,855 DEBUG [tid=3802,tgn=Pooled Threads] [org.springframework.jms.listener.DefaultMessageListenerContainer.handleListenerSetupFailure():739] Setup of JMS message listener invoker failed - already recovered by other invoker weblogic.jms.common.TransactionRolledBackException: Attempt to resume an inactive transaction: BEA1-000898DE4AF4FDE2FECA:error resuming transacted session's internal transaction at weblogic.jms.dispatcher.DispatcherAdapter.convertToJMSExceptionAndThrow(DispatcherAdapter.java:110) at weblogic.jms.dispatcher.DispatcherAdapter.dispatchSyncNoTran(DispatcherAdapter.java:61) at weblogic.jms.client.JMSSession.receiveMessage(JMSSession.java:870) at weblogic.jms.client.JMSConsumer.receiveInternal(JMSConsumer.java:644) at weblogic.jms.client.JMSConsumer.receive(JMSConsumer.java:523) at weblogic.jms.client.WLConsumerImpl.receive(WLConsumerImpl.java:184) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveMessage(AbstractPollingMessageListenerContainer.java:405) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:308) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:261) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:982) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:881) at java.lang.Thread.run(Thread.java:619) Caused by: weblogic.jms.common.TransactionRolledBackException: Attempt to resume an inactive transaction: BEA1-000898DE4AF4FDE2FECA:error resuming transacted session's internal transaction at weblogic.jms.dispatcher.Request.handleThrowable(Request.java:87) at weblogic.jms.dispatcher.Request.getResult(Request.java:52) at weblogic.messaging.dispatcher.Request.wrappedFiniteStateMachine(Request.java:1124) at weblogic.messaging.dispatcher.DispatcherImpl.syncRequest(DispatcherImpl.java:184) at weblogic.messaging.dispatcher.DispatcherImpl.dispatchSyncNoTran(DispatcherImpl.java:287) at weblogic.jms.dispatcher.DispatcherAdapter.dispatchSyncNoTran(DispatcherAdapter.java:59) ... 10 more Caused by: weblogic.jms.common.TransactionRolledBackException: Attempt to resume an inactive transaction: BEA1-000898DE4AF4FDE2FECA:error resuming transacted session's internal transaction at weblogic.jms.frontend.FESession.transactedException(FESession.java:2062) at weblogic.jms.frontend.FESession.throwTransactedException(FESession.java:2077) at weblogic.jms.frontend.FESession.transactedInfect(FESession.java:2178) at weblogic.jms.frontend.FEConsumer.receive(FEConsumer.java:553) at weblogic.jms.frontend.FEConsumer.invoke(FEConsumer.java:805) at weblogic.messaging.dispatcher.Request.wrappedFiniteStateMachine(Request.java:961) ... 13 more Caused by: javax.transaction.InvalidTransactionException: Attempt to resume an inactive transaction: BEA1-000898DE4AF4FDE2FECA at weblogic.transaction.internal.TransactionManagerImpl.resume(TransactionManagerImpl.java:360) at weblogic.transaction.internal.ServerTransactionManagerImpl.resume(ServerTransactionManagerImpl.java:376) at weblogic.jms.frontend.FESession.transactedInfect(FESession.java:2123) ... 16 more 2010-07-01 15:54:47,871 DEBUG [tid=3805,tgn=Pooled Threads] [springframework.jms.support.destination.JndiDestinationResolver.lookup():111] Located object with JNDI name [jms/myqueue] 2010-07-01 15:54:47,887 DEBUG [tid=3806,tgn=Pooled Threads] [springframework.jms.support.destination.JndiDestinationResolver.lookup():111] Located object with JNDI name [jms/myqueue] 2010-07-01 15:54:47,949 DEBUG [tid=3806,tgn=Pooled Threads] [org.springframework.jms.listener.DefaultMessageListenerContainer.doReceiveAndExecute():311] Received message of type [class weblogic.jms.common.ObjectMessageImpl] from consumer [weblogic.jms.client.WLConsumerImpl@38bae4a] of session [weblogic.jms.client.WLSessionImpl@370ffce] 2010-07-01 15:54:47,965 INFO  [tid=3806,tgn=Pooled Threads] [mycompany.Test.receiveFromQueue():132] message received from queue: testmessage1 2010-07-01 15:54:47,965 INFO  [tid=3806,tgn=Pooled Threads] [mycompany.Test.receiveFromQueue():137] sleeping 2010-07-01 15:56:52,529 INFO  [tid=3719,tgn=Pooled Threads] [mycompany.Test.receiveFromQueue():161] Done processing testmessage1 2010-07-01 15:57:16,763 INFO  [tid=3806,tgn=Pooled Threads] [mycompany.Test.receiveFromQueue():161] Done processing testmessage1 2010-07-01 15:57:24,139 WARN  [tid=3719,tgn=Pooled Threads] [org.springframework.jms.listener.DefaultMessageListenerContainer.handleListenerException():646] Execution of JMS message listener failed weblogic.jms.common.TransactionRolledBackException: Attempt to resume an inactive transaction: BEA1-000998DE4AF4FDE2FECA:error resuming transacted session's internal transaction at weblogic.jms.dispatcher.DispatcherAdapter.convertToJMSExceptionAndThrow(DispatcherAdapter.java:110) at weblogic.jms.dispatcher.DispatcherAdapter.dispatchSyncNoTran(DispatcherAdapter.java:61) at weblogic.jms.client.JMSSession.commit(JMSSession.java:1200) at weblogic.jms.client.JMSSession.commit(JMSSession.java:1174) at weblogic.jms.client.WLSessionImpl.commit(WLSessionImpl.java:108) at org.springframework.jms.support.JmsUtils.commitIfNecessary(JmsUtils.java:217) at org.springframework.jms.listener.AbstractMessageListenerContainer.commitIfNecessary(AbstractMessageListenerContainer.java:558) at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:465) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:323) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:261) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:982) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:881) at java.lang.Thread.run(Thread.java:619) Caused by: weblogic.jms.common.TransactionRolledBackException: Attempt to resume an inactive transaction: BEA1-000998DE4AF4FDE2FECA:error resuming transacted session's internal transaction at weblogic.jms.dispatcher.Request.handleThrowable(Request.java:87) at weblogic.jms.dispatcher.Request.getResult(Request.java:52) at weblogic.messaging.dispatcher.Request.wrappedFiniteStateMachine(Request.java:1124) at weblogic.messaging.dispatcher.DispatcherImpl.syncRequest(DispatcherImpl.java:184) at weblogic.messaging.dispatcher.DispatcherImpl.dispatchSyncNoTran(DispatcherImpl.java:287) at weblogic.jms.dispatcher.DispatcherAdapter.dispatchSyncNoTran(DispatcherAdapter.java:59) ... 11 more Caused by: weblogic.jms.common.TransactionRolledBackException: Attempt to resume an inactive transaction: BEA1-000998DE4AF4FDE2FECA:error resuming transacted session's internal transaction at weblogic.jms.frontend.FESession.transactedException(FESession.java:2062) at weblogic.jms.frontend.FESession.throwTransactedException(FESession.java:2077) at weblogic.jms.frontend.FESession.transactedInfect(FESession.java:2178) at weblogic.jms.frontend.FESession.acknowledge(FESession.java:1846) at weblogic.jms.frontend.FESession.invoke(FESession.java:2923) at weblogic.messaging.dispatcher.Request.wrappedFiniteStateMachine(Request.java:961) ... 14 more Caused by: javax.transaction.InvalidTransactionException: Attempt to resume an inactive transaction: BEA1-000998DE4AF4FDE2FECA at weblogic.transaction.internal.TransactionManagerImpl.resume(TransactionManagerImpl.java:360) at weblogic.transaction.internal.ServerTransactionManagerImpl.resume(ServerTransactionManagerImpl.java:376) at weblogic.jms.frontend.FESession.transactedInfect(FESession.java:2123) ... 17 more 2010-07-01 15:57:24,139 DEBUG [tid=3719,tgn=Pooled Threads] [org.springframework.jms.listener.DefaultMessageListenerContainer.handleListenerSetupFailure():739] Setup of JMS message listener invoker failed - already recovered by other invoker weblogic.jms.common.TransactionRolledBackException: Attempt to resume an inactive transaction: BEA1-000998DE4AF4FDE2FECA:error resuming transacted session's internal transaction at weblogic.jms.dispatcher.DispatcherAdapter.convertToJMSExceptionAndThrow(DispatcherAdapter.java:110) at weblogic.jms.dispatcher.DispatcherAdapter.dispatchSyncNoTran(DispatcherAdapter.java:61) at weblogic.jms.client.JMSSession.commit(JMSSession.java:1200) at weblogic.jms.client.JMSSession.commit(JMSSession.java:1174) at weblogic.jms.client.WLSessionImpl.commit(WLSessionImpl.java:108) at org.springframework.jms.support.JmsUtils.commitIfNecessary(JmsUtils.java:217) at org.springframework.jms.listener.AbstractMessageListenerContainer.commitIfNecessary(AbstractMessageListenerContainer.java:558) at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:465) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:323) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:261) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:982) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:881) at java.lang.Thread.run(Thread.java:619) Caused by: weblogic.jms.common.TransactionRolledBackException: Attempt to resume an inactive transaction: BEA1-000998DE4AF4FDE2FECA:error resuming transacted session's internal transaction at weblogic.jms.dispatcher.Request.handleThrowable(Request.java:87) at weblogic.jms.dispatcher.Request.getResult(Request.java:52) at weblogic.messaging.dispatcher.Request.wrappedFiniteStateMachine(Request.java:1124) at weblogic.messaging.dispatcher.DispatcherImpl.syncRequest(DispatcherImpl.java:184) at weblogic.messaging.dispatcher.DispatcherImpl.dispatchSyncNoTran(DispatcherImpl.java:287) at weblogic.jms.dispatcher.DispatcherAdapter.dispatchSyncNoTran(DispatcherAdapter.java:59) ... 11 more Caused by: weblogic.jms.common.TransactionRolledBackException: Attempt to resume an inactive transaction: BEA1-000998DE4AF4FDE2FECA:error resuming transacted session's internal transaction at weblogic.jms.frontend.FESession.transactedException(FESession.java:2062) at weblogic.jms.frontend.FESession.throwTransactedException(FESession.java:2077) at weblogic.jms.frontend.FESession.transactedInfect(FESession.java:2178) at weblogic.jms.frontend.FESession.acknowledge(FESession.java:1846) at weblogic.jms.frontend.FESession.invoke(FESession.java:2923) at weblogic.messaging.dispatcher.Request.wrappedFiniteStateMachine(Request.java:961) ... 14 more Caused by: javax.transaction.InvalidTransactionException: Attempt to resume an inactive transaction: BEA1-000998DE4AF4FDE2FECA at weblogic.transaction.internal.TransactionManagerImpl.resume(TransactionManagerImpl.java:360) at weblogic.transaction.internal.ServerTransactionManagerImpl.resume(ServerTransactionManagerImpl.java:376) at weblogic.jms.frontend.FESession.transactedInfect(FESession.java:2123) ... 17 more 2010-07-01 15:57:24,154 DEBUG [tid=3937,tgn=Pooled Threads] [springframework.jms.support.destination.JndiDestinationResolver.lookup():111] Located object with JNDI name [jms/myqueue]  I know that's a lot of detail, but the general idea is that thread id 3719 picked up the message and then slept.  About a minute into its sleep, the JMS transactions have timed out and another thread (thread id 3806) creates a new JMS session and picks up the same message.  Eventually, both threads get done sleeping and have successfully processed the message and committed to the db.  Thread id 3719 then prints out the exception when it tries to then commit the JMS session b/c its transaction timed out.  It appears the root of the problem is the use of the cached JMS session and the lack of periodic commit/rollback on it if no messages are received.  According to the JMS spec, the transaction of a JMS session is started when you create the session, commit it, or roll it back.  The problem is that if no messages are received, Spring JMS is never calling commit or rollback on the shared/cached session (it only does so after a message is processed, in AbstractMessageListenerContainer.doExecuteListener()).  So, if you process a message, then commit/rollback the session, then keep polling to receive messages and keep receiving none, you are using up time in that transaction.  When you do eventually get a message in the receive(), if you're close to being an hour [or whatever your timeout is set to] from when you last received a message with that session, you have very little time to process the message before you will timeout the transaction.  Since XA is not being used, Spring is doing the logical thing of letting your work [and presumably your db transaction commit] before calling commit on the JMS session.  So this consumer will think everything's fine and commit its work, only to find out afterwards that it timed out and someone else did the work too, even though it took well under the transaction timeout to complete its work.  There seem to be a number of ways to fix this.  It seems like calling commit or rollback on the shared/cached Session before using its consumer to receive a new message (perhaps in DefaultMessageListenerContainer.invokeListener()) is one way of fixing it, but I'm not sure what other side effects something like this may have (for instance, will calling rollback() on the session cause any client-side cached JMS messages to be returned to the JMS server so that message ""pipelining"" [as Weblogic calls it] can not be used).  Hopefully this makes sense.  ---  **Affects:** 2.5.6  **Issue Links:** - #12581 Spring Application getting into hung state while refreshing transacted JMS connection  (_**""is duplicated by""**_) - #12136 Setup of JMS message listener invoker failed for destination when upgrading from 3.0.2 to 3.0.4 - #12215 JMS integration with Tibco causes deadlock due to commitIfNecessary in AbstractPollingMessageListenerContainer  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b456bc107b39ed52efb29fd6540033e9442be1f4","closed","type: bug,","spring-projects-issues","2010-07-13T08:06:48Z","2019-01-11T14:22:55Z"
"","11905","Spring AOP documentation - Make it clear that @Component is needed as well as @Aspect for the annotation based approach [SPR-7246]","**[Greg Matthews](https://jira.spring.io/secure/ViewProfile.jspa?name=gmatthews)** opened **[SPR-7246](https://jira.spring.io/browse/SPR-7246?redirect=false)** and commented  A lot of people seem to be having the same trouble getting aspects to work. I think the trouble stems from the annotated and non-annotated approaches being mixed in the doco. Fixing this misunderstanding could be done by adding a single helpful sentence to section 7.2.2 of the Spring Framework doco:  ""If you're using the annotation based approach then you also need to annotate the `@Aspect` with `@Component` (or similar)""  The current example has `@Aspect` only, and I presume that this is meant to be used with a XML-wired application context setup.   ---  **Affects:** 3.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3d3f8f3219d9e6e0af0bbea5260ebdf70035efe2  1 votes, 0 watchers","closed","type: documentation,","spring-projects-issues","2010-05-30T10:58:11Z","2012-06-19T03:43:44Z"
"","12190","Possible regression in ""redirect"" views between Spring 3.0.2 and Spring 3.0.4 [SPR-7532]","**[Grant Gochnauer](https://jira.spring.io/secure/ViewProfile.jspa?name=grant.gochnauer)** opened **[SPR-7532](https://jira.spring.io/browse/SPR-7532?redirect=false)** and commented  In Spring 3.0.2, our MVC controllers returned a redirect view via the XML definition as follows:  ```  ```  The redirect included the context path of the application: ""promo"". However in Spring 3.0.4, we've found that we've had to go through and change all the redirects to exclude the context path. So now our redirect looks like:  ```  ```  So we had to remove the context path from the redirect. Is it correct that we'd normally want to include a context path when issuing a redirect call?  Thank you!  ---  **Affects:** 3.0.4  **Issue Links:** - #12148 Problem with URL encoding in org.springframework.web.servlet.view.RedirectView.RedirectView(String url)","closed","type: bug,","spring-projects-issues","2010-09-08T12:29:11Z","2019-01-11T14:43:00Z"
"","12141","Optional @RequestParam with required=false no longer works in Spring 3.0.4 (compared to 3.0.2) when Controller extends interface [SPR-7483]","**[Grant Gochnauer](https://jira.spring.io/secure/ViewProfile.jspa?name=grant.gochnauer)** opened **[SPR-7483](https://jira.spring.io/browse/SPR-7483?redirect=false)** and commented  In order to work around CGLIB and AOP memory issues all of our MVC controllers extend Interfaces for proxying.  We have something like this in our interface:  ``` @RequestMapping(value = ""/contactus.htm"", method = RequestMethod.POST)  ModelAndView handleContactUsSubmit(HttpServletRequest request, HttpServletResponse response,                                     @RequestParam(value = ""pUrl"", required = false) String promotionUrl, @ModelAttribute ContactUsModel model,                                     Errors errors); ```  And in the class:  ``` @ExposeSharedPageAttributes     public ModelAndView handleContactUsSubmit( HttpServletRequest request, HttpServletResponse response, @RequestParam(value = ""pUrl"", required = false) String promotionUrl, @ModelAttribute ContactUsModel model,             Errors errors )     { ```  This worked great in Spring 3.0.2. After upgrading to 3.0.4, I receive the following stack trace:  ``` Caused by: org.springframework.web.bind.annotation.support.HandlerMethodInvocationException: Failed to invoke handler method [public final org.springframework.web.servlet.ModelAndView $Proxy100.handleContactUsSubmit(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String,com.roche.cwp.web.template.contactus.model.ContactUsModel,org.springframework.validation.Errors)]; nested exception is java.lang.IllegalStateException: No parameter name specified for argument of type [java.lang.String], and no parameter name information found in class file either. 	at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.invokeHandlerMethod(HandlerMethodInvoker.java:181) 	at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.invokeHandlerMethod(AnnotationMethodHandlerAdapter.java:427) 	at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.handle(AnnotationMethodHandlerAdapter.java:415) 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:788) 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:717) 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:644) 	... 81 more Caused by: java.lang.IllegalStateException: No parameter name specified for argument of type [java.lang.String], and no parameter name information found in class file either. 	at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.getRequiredParameterName(HandlerMethodInvoker.java:731) 	at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.resolveRequestParam(HandlerMethodInvoker.java:480) 	at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.resolveHandlerArguments(HandlerMethodInvoker.java:340) 	at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.invokeHandlerMethod(HandlerMethodInvoker.java:171) 	... 86 more   ```    ---  **Affects:** 3.0.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/284f98f12a53e46a58c7731da075148eff26137a  1 votes, 5 watchers","closed","type: bug,","spring-projects-issues","2010-08-23T08:16:36Z","2019-01-11T14:09:28Z"
"","12123","Regression in form label HTML escape behavior [SPR-7465]","**[Grant Gochnauer](https://jira.spring.io/secure/ViewProfile.jspa?name=grant.gochnauer)** opened **[SPR-7465](https://jira.spring.io/browse/SPR-7465?redirect=false)** and commented  Hello,  After we upgraded from Spring 3.0.2 to Spring 3.0.3, we're finding that many of our forms aren't properly escaping the HTML labels properly. I'm not sure if it's related to this: https://jira.springframework.org/browse/SPR-7174  Instead we're seeing actual HTML snippets in our labels instead of having the HTML rendered correctly. Examples include:  , \, \, etc.  Was this is break from previous behavior on purpose or would this be considered a regression? I'm just curious if I need to wade through my 30+ web apps I upgraded to re-test all the forms for HTML escaping issues.  thanks!   ---  **Affects:** 3.0.3  **Attachments:** - [example1.jpg](https://jira.spring.io/secure/attachment/17004/example1.jpg) (_9.72 kB_) - [With spring 3.0.2 JARs.jpg](https://jira.spring.io/secure/attachment/17005/With+spring+3.0.2+JARs.jpg) (_13.74 kB_) - [working jars.PNG](https://jira.spring.io/secure/attachment/17006/working+jars.PNG) (_26.10 kB_)","closed","status: declined,","spring-projects-issues","2010-08-16T06:23:40Z","2019-01-12T16:37:43Z"
"","12055","Spring proxies all beans when it finds a IntroductionInterceptor when using  AnnotationAwareAspectJAutoProxyCreator [SPR-7397]","**[Graeme Rocher](https://jira.spring.io/secure/ViewProfile.jspa?name=graemerocher)** opened **[SPR-7397](https://jira.spring.io/browse/SPR-7397?redirect=false)** and commented  This issue relates to http://jira.codehaus.org/browse/GRAILS-6521 which I have closed and provided a workaround for but I'm not sure whether this is still an issue or not hence the bug here. Basically in Grails 1.2 we used InfrastructureAdvisorAutoProxyCreator in 1.3 we changed this to AnnotationAwareAspectJAutoProxyCreator.  This caused some people's applications to break because Spring reads all IntroductionInterceptor instances in the getAdvicesAndAdvisorsForBean of AbstractAutoProxyCreator and then proxies EVERY bean if it finds one. Since every bean is a JDK proxy when Spring later tries to create a CGlib proxy it fails because these proxies are final.  I tried restricting what classes the IntroductionInterceptor applies by supplying a ClassFilter but this seemed to have no effect.  The important point is that this is a change in behavior from InfrastructureAdvisorAutoProxyCreator. Again I am not sure it is a bug is should just be a documented breaking change (at least from a Grails perspective). Having discussed with Chris Beams it was advised that I raise a JIRA and the validity of this bug can be discussed further here.   ---  **Affects:** 3.0 GA, 3.0.1, 3.0.2, 3.0.3","closed","type: enhancement,","spring-projects-issues","2010-07-27T01:12:32Z","2015-09-22T17:34:39Z"
"","12828","SpEL Description of (T) Earlier in Documentation [SPR-8177]","**[Gordon Dickens](https://jira.spring.io/secure/ViewProfile.jspa?name=gordonad)** opened **[SPR-8177](https://jira.spring.io/browse/SPR-8177?redirect=false)** and commented  The SpEL description of (T) is described in Section 6.5 Page 179 (PDF) should be moved to the first usage in Section 6.4 Page 173 (PDF).   ---  **Affects:** 3.0.5","closed","type: enhancement,","spring-projects-issues","2011-04-02T11:34:03Z","2015-09-22T18:20:32Z"
"","12450","Add valueSeparator property to context:property-placeholder [SPR-7794]","**[Gordon Dickens](https://jira.spring.io/secure/ViewProfile.jspa?name=gordonad)** opened **[SPR-7794](https://jira.spring.io/browse/SPR-7794?redirect=false)** and commented  As a developer I would like to use the Spring ""context"" namespace to configure my Propery Placeholder with the option to change the default value separator.  For example:   ---  **Affects:** 3.0.5  **Issue Links:** - #18041 Add 'null-value' attribute to  - #10509 Adding trim-capability to property configurers  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a23629f60f5637e3d4a9c69d55f58b24e50b610e  7 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2010-12-06T09:05:55Z","2019-01-11T15:38:16Z"
"","12255","Provide proper @Value documentation in the reference documentation [SPR-7599]","**[Gerson](https://jira.spring.io/secure/ViewProfile.jspa?name=gersonk)** opened **[SPR-7599](https://jira.spring.io/browse/SPR-7599?redirect=false)** and commented  Release notes of 3.0.0.M3 says: - `@Value` values may use ${...} placeholders (driven by PropertyPlaceholderConfigurer)  Chris Beams says: http://forum.springsource.org/showpost.php?p=234023&postcount=2  ---  **Affects:** 3.0.4  **Issue Links:** - #22171 Refactor core documentation to make it relevant for modern Spring applications","closed","status: duplicate,","spring-projects-issues","2010-09-28T08:35:45Z","2019-06-10T09:48:12Z"
"","12270","SpEL: Resolving values from Map works different after PropertyAccessor is cached [SPR-7614]","**[Gerrit Brehmer](https://jira.spring.io/secure/ViewProfile.jspa?name=gbrehmer)** opened **[SPR-7614](https://jira.spring.io/browse/SPR-7614?redirect=false)** and commented  I want to inject a single value of a request-url-parameter from JSF Faces Context: `@Value`(""#{param.test}"").  If I call the JSF-Page without this parameter first time, I get an SpEL exception: EL1008E:(pos 6): Field or property 'test' cannot be found on object of type 'java.util.Collections$UnmodifiableMap'.  After that I make a valid call with 'test'-Parameter added and Map-PropertyAccessor will be cached.  All calls after that valid call will not throwing an exception. For missing paramter-requests, 'null' value will be injected.  My expected behaviour would be a null value, if the key doesn't exist in the map. Is this possible?  I think the behaviour between canRead (before caching) and read (after caching) is different for missing keys in the map.   ---  **Affects:** 3.0.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1f1577e33ea5440160d984f7ae1a8629066ea8e3, https://github.com/spring-projects/spring-framework/commit/1933b648c3d46715009ca27eb628ee8d98a14dcc, https://github.com/spring-projects/spring-framework/commit/722778c74a048d5b1a091f56090cc0e91e782272  1 votes, 3 watchers","closed","type: bug,","spring-projects-issues","2010-10-03T11:09:27Z","2012-06-19T03:42:50Z"
"","12017","Document session-scoped proxy serialization issues on Tomcat","**[Gerrit Brehmer](https://jira.spring.io/secure/ViewProfile.jspa?name=gbrehmer)** opened **[SPR-7359](https://jira.spring.io/browse/SPR-7359?redirect=false)** and commented  When I restarted the server and the current sessions should be serialized to disk, I get an error when serializing a session scoped proxied bean. Is this type of serialization not supported?  ``` Cannot serialize session attribute scoped Target.userSession for session xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  java.io.NotSerializableException: DefaultListableBeanFactory has no serialization id        at org.springframework.beans.factory.support.DefaultListableBeanFactory.writeReplace(DefaultListableBeanFactory.java:946)        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)        at java.lang.reflect.Method.invoke(Method.java:585)        at java.io.ObjectStreamClass.invokeWriteReplace(ObjectStreamClass.java:1004) ```  ---  **Affects:** 3.0 GA  **Reference URL:** http://forum.springsource.org/showthread.php?t=88162  This issue is a sub-task of #12102  **Issue Links:** - #12657 javax.inject.Provider instances injected by container not Serializable  3 votes, 2 watchers","closed","in: core,","spring-projects-issues","2010-07-06T22:42:54Z","2019-01-11T14:24:07Z"
"","11941","Conversion from String to MediaType should not fail with default ConversionService [SPR-7282]","**[Gerrit Brehmer](https://jira.spring.io/secure/ViewProfile.jspa?name=gbrehmer)** opened **[SPR-7282](https://jira.spring.io/browse/SPR-7282?redirect=false)** and commented  Because MediaType has an special constructor with only one String parameter, the ObjectToObjectConverter thought, that he can convert the String value ""application/xml"" to an MediaType. So ObjectToObjectConverter  will call the constructor and conversion fails, because this constructor only need the primary content type:  Exception:  ``` org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'contentNegotiatingViewResolver' defined in ServletContext resource [/WEB-INF/app-servlet.xml]: Initialization of bean failed; nested exception is org.springframework.core.convert.ConversionFailedException: Unable to convert value application/xml from type 'java.lang.String' to type 'org.springframework.http.MediaType'; nested exception is org.springframework.core.convert.ConversionFailedException: Unable to convert value application/xml from type 'java.lang.String' to type 'org.springframework.http.MediaType'; nested exception is java.lang.reflect.InvocationTargetException 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:527) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:291) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:288) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:563) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:872) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:423) 	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:442) 	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:458) 	at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:339) 	at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:306) 	at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:127) 	at javax.servlet.GenericServlet.init(GenericServlet.java:212) 	at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1139) 	at org.apache.catalina.core.StandardWrapper.load(StandardWrapper.java:966) 	at org.apache.catalina.core.StandardContext.loadOnStartup(StandardContext.java:3996) 	at org.apache.catalina.core.StandardContext.start(StandardContext.java:4266) 	at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1014) 	at org.apache.catalina.core.StandardHost.start(StandardHost.java:736) 	at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1014) 	at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:443) 	at org.apache.catalina.core.StandardService.start(StandardService.java:448) 	at org.apache.catalina.core.StandardServer.start(StandardServer.java:700) 	at org.apache.catalina.startup.Catalina.start(Catalina.java:552) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 	at java.lang.reflect.Method.invoke(Method.java:592) 	at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:295) 	at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:433) Caused by: org.springframework.core.convert.ConversionFailedException: Unable to convert value application/xml from type 'java.lang.String' to type 'org.springframework.http.MediaType'; nested exception is org.springframework.core.convert.ConversionFailedException: Unable to convert value application/xml from type 'java.lang.String' to type 'org.springframework.http.MediaType'; nested exception is java.lang.reflect.InvocationTargetException 	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:40) 	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:138) 	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:201) 	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:155) 	at org.springframework.beans.BeanWrapperImpl.convertForProperty(BeanWrapperImpl.java:461) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.convertForProperty(AbstractAutowireCapableBeanFactory.java:1363) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1322) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1076) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:517) 	... 31 more Caused by: org.springframework.core.convert.ConversionFailedException: Unable to convert value application/xml from type 'java.lang.String' to type 'org.springframework.http.MediaType'; nested exception is java.lang.reflect.InvocationTargetException 	at org.springframework.core.convert.support.ObjectToObjectConverter.convert(ObjectToObjectConverter.java:82) 	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:37) 	... 39 more Caused by: java.lang.reflect.InvocationTargetException 	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) 	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39) 	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27) 	at java.lang.reflect.Constructor.newInstance(Constructor.java:501) 	at org.springframework.core.convert.support.ObjectToObjectConverter.convert(ObjectToObjectConverter.java:70) 	... 40 more Caused by: java.lang.IllegalArgumentException: Invalid token character '/' in token ""application/xml"" 	at org.springframework.http.MediaType.checkToken(MediaType.java:286) 	at org.springframework.http.MediaType.(MediaType.java:257) 	at org.springframework.http.MediaType.(MediaType.java:207) 	at org.springframework.http.MediaType.(MediaType.java:196) 	... 45 more ```  With disabled ConversionService, the value will be converted by MediaTypeEditor, which uses the MediaType.parseMediaType method. I think the behauvior should be the same like mediaTypes-parameter map (ContentNegotiatingViewResolver), where Strings must be used.  Example spring config:  ```xml                                    ```    ---  **Affects:** 3.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/96b1dc9db408f663831ba39f1f4a356a543a9a42","closed","type: enhancement,","spring-projects-issues","2010-06-13T23:39:33Z","2012-12-11T03:59:38Z"
"","11938","HandlerInterceptor between resolveHandlerArguments and invoking handlerMethod e.g. for centralized customized validition or security handling [SPR-7279]","**[Gerrit Brehmer](https://jira.spring.io/secure/ViewProfile.jspa?name=gbrehmer)** opened **[SPR-7279](https://jira.spring.io/browse/SPR-7279?redirect=false)** and commented  I like the HandlerInterceptor/WebRequestInterceptor approach, because so it's not required to generate additional proxies (with Spring AOP). But fo some cases it's not enough: centralized customized validation of handler arguments, security handling depended on handler arguments (because arguments will be automatically converted to more usable types), centralized aspects depended on special controller method annotations.  For this use cases it would be great, if I could simple intercept the execution after the argument resolving and just before the invoking of the controller method (inside HandlerMethodInvoker).  The interceptor-method should contain the following parameters: * handler method to invoke (Method) * method arguments (Object[]) * http request (WebRequest)    --- No further details from [SPR-7279](https://jira.spring.io/browse/SPR-7279?redirect=false)","closed","type: enhancement,","spring-projects-issues","2010-06-10T20:29:20Z","2018-12-28T10:36:06Z"
"","11937","@ResponseBody usage limitations [SPR-7278]","**[Gerrit Brehmer](https://jira.spring.io/secure/ViewProfile.jspa?name=gbrehmer)** opened **[SPR-7278](https://jira.spring.io/browse/SPR-7278?redirect=false)** and commented  The recommended way to develop REST-style webservices is the usage of `@ResponseBody` annotation and HttpMessageConverter instead of generating a model and a view (ContentNegotiatingViewResolver etc.). But there are some limitations, that make things hard to handle:  * ExceptionResolver support   * `@RequestBody` is only supported with `@ExceptionHandler` annotation. I need a centralized exception handling to generate a special error object as the return value. So I must wrote a method in each controller class to delegate to the centralized exception handler. I think the ExceptionResolver-interface is more like an AOP-approach, with no glue code.   * ExceptionResolver also have some nice standard implementations like SimpleMappingExceptionResolver, where I can handle the returned HTTP status code very easy. This is also not supported by `@ExceptionHandler` out of the box * 'useNotAcceptableStatusCode' from ContentNegotiatingViewResolver (so for some features, I must also configure view-handling)   * simple and easy to use attribute to enable NOT_ACCEPTABLE Http Status code * missing option for enabling global `@ResponseBody-like` handling instead of annotate all methods (e.g. in AnnotationMethodHandlerAdapter)  I also would recommend the full HttpMessageConverter way (`@RequestBody` & `@ResponseBody`) without view handling, so it would be nice, if `@ResponseBody` has fewer limitations. Additionaly it would be great, if the documentation have some notes about the recommended way for webservice-only REST-style applications (with hints to the limitations above)  ---  **Affects:** 3.0.2  **Issue Links:** - #12776 `@ExceptionHandler` doesn't handle exceptions from other controllers (_**""is duplicated by""**_) - #12012 Add equivalent of JAX-RS `@Produces` to Spring MVC  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e5eceafa3f31f80177b24db255ca96a252ae9fb1  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2010-06-10T20:05:30Z","2019-01-13T07:53:43Z"
"","11922","TypeMismatchException instead of IllegalArgumentException: argument type mismatch for wrong RequestBody [SPR-7263]","**[Gerrit Brehmer](https://jira.spring.io/secure/ViewProfile.jspa?name=gbrehmer)** opened **[SPR-7263](https://jira.spring.io/browse/SPR-7263?redirect=false)** and commented  If a controller method is called with a wrong (but for message converter known type) `@RequestBody` message, an java internal reflection exception will be raised: java.lang.IllegalArgumentException: argument type mismatch.  It would be nice, if a Spring-TypeMismatchException exception could be raised instead (so a type check is needed). This exception is already mapped to a 400 Bad Request. With IllegalArgumentException the cause of the exception is not exactly enough.   ---  **Affects:** 3.0.2  **Attachments:** - [SPR7263Tests.java](https://jira.spring.io/secure/attachment/16641/SPR7263Tests.java) (_1.95 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/65885d1dfdc3fc44298b83944fda6fdb2f4996e4, https://github.com/spring-projects/spring-framework/commit/723f94fd0e59400234818ea63363bf4dc2c3c4e0","closed","type: enhancement,","spring-projects-issues","2010-06-06T20:51:29Z","2012-06-19T03:43:19Z"
"","12071","MessageListenerContainerResourceFactory to set clientID on newly created connections [SPR-7413]","**[Georgy Bolyuba](https://jira.spring.io/secure/ViewProfile.jspa?name=gbolyuba)** opened **[SPR-7413](https://jira.spring.io/browse/SPR-7413?redirect=false)** and commented  **Goal:** Setup durable subscription for a topic  **Current config:**  ```   ```  **Problem:** `AbstractJmsListeningContainer` can properly prepare with shared connection. Method `createSharedConnection` calls `prepareSharedConnection`. Default implementation of `prepareSharedConnection` simply sets clientId for every connection created.  However, in application container (in our case: JBoss 5.1.0.GA), caching level is set to `CACHE_NONE` by `DefaultMessageListenerContainer` if we pass a transaction manager (which is exactly what we do in our case). Since there is no caching, new connection will be created every time we request a session for a first time in the scope of a given JTA transaction. This will be done using `ConnectionFactoryUtils` which in turn will delegate work to `ConnectionFactoryUtils.ResourceFactory` (a call back interface).  `MessageListenerContainerResourceFactory` is an implementation of `ConnectionFactoryUtils.ResourceFactory` which delegates all the work to listener container. If there is no shared connection, new connection will be created:  ``` return AbstractPollingMessageListenerContainer.this.createConnection(); ```  In this case clientID never set for the connection and creation of durable subscription fails.  **Solution:** Make a call to prepare connection before returning it from `MessageListenerContainerResourceFactory`   ---  **Affects:** 3.0.3  **Attachments:** - [SPR-7413.patch](https://jira.spring.io/secure/attachment/16959/SPR-7413.patch) (_3.09 kB_)","closed","status: invalid,","spring-projects-issues","2010-08-02T08:51:32Z","2019-01-12T05:31:41Z"
"","12710","Limit size of context cache in the TestContext framework [SPR-8055]","**[Gaetan Pitteloud](https://jira.spring.io/secure/ViewProfile.jspa?name=gpitteloud)** opened **[SPR-8055](https://jira.spring.io/browse/SPR-8055?redirect=false)** and commented  #### Overview  The cache of application contexts becomes too big when running a complete suite of tests that each load a full `ApplicationContext` with a JPA `EntityManagerFactory`. There are situations where a tiny difference in the configuration forces us to load a different context.  Since the context cache is only there for performance reasons, its maximum size should be configurable -- a system property might be the best choice, while no property means unbounded size -- so that the _least recently used_ can be properly closed and evicted from the cache.  #### Deliverables  1. [x] Introduce a mechanism for configuring the maximum number of contexts that should be cached at any given time.    - [x] Possible mechanisms include: simple system property or a system property supported via `SpringProperties`. 2. [x] Redesign `DefaultContextCache` to implement an LRU cache eviction algorithm.    - [x] Ensure that evicted contexts get properly closed.    - [ ] Consider internally delegating to a third-party implementation such as a Guava cache.  ---  **Attachments:** - [ContextCache.java](https://jira.spring.io/secure/attachment/18220/ContextCache.java) (_8.22 kB_) - [ContextCacheTestCase.java](https://jira.spring.io/secure/attachment/18221/ContextCacheTestCase.java) (_2.36 kB_) - [FixedSizeMapContextCache.java](https://jira.spring.io/secure/attachment/22755/FixedSizeMapContextCache.java) (_13.03 kB_)  **Issue Links:** - #10532 Allow for concurrent test execution in the TestContext framework - #18295 Support 'throw-away' context for a test class - #16200 Introduce system property to disable context caching in the TestContext framework - #12343 Use soft or weak references for context caching in the TestContext framework (_**""supersedes""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e18d5b591a58fa811720201937a1ab33de580664, https://github.com/spring-projects/spring-framework/commit/ebeba43830a6b7df1daa4290fb7b32645ab84c75  1 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2011-03-14T05:52:03Z","2019-01-11T12:39:12Z"
"","12214","MockHttpSession throws ConcurrentModificationException when removing attributes in a loop [SPR-7557]","**[Gaetan Pitteloud](https://jira.spring.io/secure/ViewProfile.jspa?name=gpitteloud)** opened **[SPR-7557](https://jira.spring.io/browse/SPR-7557?redirect=false)** and commented  The following code throws ConcurrentModificationException:  ```java HttpSession session = new MockHttpSession(); session.setAttribute(""k1"", ""v1""); session.setAttribute(""k2"", ""v2""); for (Enumeration names = session.getAttributeNames(); names.hasMoreElements();) {    session.removeAttribute(names.nextElement()); } ```  The same code was OK prior Spring 3, and is OK on any web server, with non-mock http session implementation.   ---  **Affects:** 3.0 M1, 3.0 M2, 3.0 M3, 3.0 M4, 3.0 RC1, 3.0 RC2, 3.0 RC3, 3.0 GA, 3.0.1, 3.0.2, 3.0.3, 3.0.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/aac2de9221f04763beaf1d9d061f9568e38678b1","closed","type: bug,","spring-projects-issues","2010-09-15T02:13:48Z","2012-06-19T03:43:27Z"
"","11919","Provide a template class for classpath scanning [SPR-7260]","**[Gaetan Pitteloud](https://jira.spring.io/secure/ViewProfile.jspa?name=gpitteloud)** opened **[SPR-7260](https://jira.spring.io/browse/SPR-7260?redirect=false)** and commented  When one needs additional JPA entities from another JAR to be added into a persistence unit, JPA proposes 2 possibilities to do it: 1. manually add each class names 2. specify a jar containing the entities  None of these solutions are really usable: 1. I do not know all entity classes (and relations) of the other project, and do not want to be tied on that possibly changing list. 2. The name of the jar is suffixed with the version number, thus changes all the time.  Since you provided a PersistenceUnitPostProcessor, we have implemented such a post-processor that scans the classpath starting with a base package and adds all `@Entity` class names to the PU. The way we implemented it is with your famous ClassPathScanningCandidateComponentProvider, and it works perfectly.  However, the scanner is somehow abused : it is initially written to register new beans in the application context, and thus returns BeanDefinition objects, from which we use the class name only.  New frameworks and specifications all tend to use annotations on class and suggest classpath scanning to register components instead of declaring them in XML. My proposal is to provide some sort of ClasspathScannerTemplate for such purposes. The above-mentioned JPA use case could then be simply written as follows:  ``` ClasspathScannerTemplate scanner = new ClasspathScannerTemplate(); scanner.addIncludeFilter(new AnnotationTypeFilter(Entity.class)); Collection entityClassNames = scanner.scan(""org.company.app"",    new ClassMetadataMapper() {     String mapClassMetadata(MetadataReader metadata) {       return metadata.getClassMetadata().getClassName();     }   } ); ```  A starting point for such a class is packaged as attachement. It is completely inspired by the original class, which is then rewritten as a simple call to the template.   ---  **Affects:** 2.5.6, 3.0 GA, 3.0.1, 3.0.2  **Attachments:** - [scannertemplate.jar](https://jira.spring.io/secure/attachment/16628/scannertemplate.jar) (_5.51 kB_)","closed","in: core,","spring-projects-issues","2010-06-04T00:05:46Z","2019-01-12T05:31:54Z"
"","12587","Usable to pass a derived classobject as an argument to method [SPR-7932]","**[Gabriele Del Prete](https://jira.spring.io/secure/ViewProfile.jspa?name=gdelprete)** opened **[SPR-7932](https://jira.spring.io/browse/SPR-7932?redirect=false)** and commented   --- No further details from [SPR-7932](https://jira.spring.io/browse/SPR-7932?redirect=false)","closed","status: invalid,","spring-projects-issues","2011-02-03T00:53:15Z","2019-01-12T05:31:05Z"
"","12404","AnnotationSessionFactoryBean packagesToScan does not scan for annotations in package's package-info.java file [SPR-7748]","**[Gabriele Del Prete](https://jira.spring.io/secure/ViewProfile.jspa?name=gdelprete)** opened **[SPR-7748](https://jira.spring.io/browse/SPR-7748?redirect=false)** and commented  If I use the packagesToScan property of AnnotationSessionFactoryBean, classes are scanned for annotations, but the package itself is not scanned (i.e. package-info.java file is not considered).  I guess it would be better to include the package-info.java file too as the ""packagesToScan"" name really makes one think that it will scan the packages as a whole.  Note also the contrast with the ""annotatedPackages"" and ""annotatedClasses"" name, where it's clear that one will only scan the package annotations and the other only the package classes annotation.  ---  **Affects:** 3.0.4  **Issue Links:** - #14922 In AnnotationSessionFactoryBean, be able to specify annotatedPackages and packagesToScan in one property  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5334ac59f684f66dfd1d526934ebdf88edaef16d","closed","type: enhancement,","spring-projects-issues","2010-11-17T07:03:12Z","2019-01-11T15:35:37Z"
"","12440","@RequestParam List list, will be filled up with String objects instead of Long objects [SPR-7784]","**[Fritz Richter](https://jira.spring.io/secure/ViewProfile.jspa?name=fritz)** opened **[SPR-7784](https://jira.spring.io/browse/SPR-7784?redirect=false)** and commented  In my current webapp project, I found out, that if I post something to the server in the form of ?list=1&list=2&list=3 and I have got a Mapping on my controller, which has the following parameter `@RequestParam` List\, it will contain String objects, and not Long objects.  ---  **Affects:** 3.0.5  **Issue Links:** - #12437 `@RequestParam` - wanting List getting List (_**""duplicates""**_) - #12437 `@RequestParam` - wanting List getting List","closed","in: web,","spring-projects-issues","2010-12-02T02:30:21Z","2019-01-13T07:12:06Z"
"","12594","Add x509 certificat Authentication for httpInvoker to support mutual SSL (2 ways SSL) [SPR-7939]","**[François Houdebert](https://jira.spring.io/secure/ViewProfile.jspa?name=fhoudebert)** opened **[SPR-7939](https://jira.spring.io/browse/SPR-7939?redirect=false)** and commented  It would be very usefull to be able to set a httpInvokerRequestExecutor to push a client certificat for org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean  This class should be configurable for :  *Client certificate clientCertificatePath = dianne.p12 example : https://src.springframework.org/svn/spring-security/branches/2.0.x-sf3-branch/samples/certificates/dianne.p12 clientCertificatePassword=password clientCertificateType=PKCS12  *trust store trustStorePath=trusted.jks trustStorePassword=password   ---  **Affects:** 3.0.5  6 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2011-02-04T02:32:29Z","2021-11-08T10:43:14Z"
"","12398","Sort the scanned entity classes when creating an Hibernate SessionFactory [SPR-7742]","**[Frank Pavageau](https://jira.spring.io/secure/ViewProfile.jspa?name=fpavageau)** opened **[SPR-7742](https://jira.spring.io/browse/SPR-7742?redirect=false)** and commented  In AnnotationSessionFactoryBean.scanPackages(), the classes seem to be added to the AnnotationConfiguration in no particular order. This is bad because of https://forum.hibernate.org/viewtopic.php?f=1&t=982072&start=0 : the columns' aliases generated in the SQL queries depend on the order of creation of the org.hibernate.mapping.Tables (through the uniqueIndex field initialized in sequence from a static int), which itself depends on the order of insertion of the classes.  Multiple JVMs running the same application and accessing the same database can then produce equivalent SQL queries using different columns' aliases, preventing the DBMS from properly caching (more hard parsing in Oracle, for example) or a distributed query cache from being shared.  I'd suggest storing the scanned classes in a temporary list and sorting it using the FQCN before adding its content to the AnnotationConfiguration, for consistent, reproducible results.   ---  **Affects:** 3.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/92816492edd50b9791cbbc4129fc79eaf71fac98  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2010-11-16T06:43:49Z","2013-12-11T23:57:23Z"
"","12179","Remove outdated IDE, JIRA and Tomcat references [SPR-7521]","**[Frank Adcock](https://jira.spring.io/secure/ViewProfile.jspa?name=sweetfa)** opened **[SPR-7521](https://jira.spring.io/browse/SPR-7521?redirect=false)** and commented  The links provided in the Reference Documentation / Spring Java Application Framework  3.0 to the SpringIDE web pages are incorrect.  The errors are in Appendix C.3 Setting Up Your IDE/ Setting Up Eclipse/Section 3.  http://springide.org/blog/ is incorrect.  http://springide.org/project/wiki/SpringideInstall is also incorrect.    ---  **Affects:** 3.0.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ecf23ff6cd830f8d28ad22621625a21ceb72cc81, https://github.com/spring-projects/spring-framework/commit/08fb61316d2ab5888ca77e79242b7e6eb57d89b0, https://github.com/spring-projects/spring-framework/commit/f1f1c4c9803f1f7ebf9f78fd516e25cd13f256ff","closed","type: documentation,","spring-projects-issues","2010-09-02T21:08:28Z","2014-08-15T01:52:42Z"
"","12478","@ModelAttribute annotation must be named [SPR-7822]","**[Francois](https://jira.spring.io/secure/ViewProfile.jspa?name=zomurn)** opened **[SPR-7822](https://jira.spring.io/browse/SPR-7822?redirect=false)** and commented  I discovered a bug in Spring Portlet MVC where the string argument of annotation `@ModelAttribute` must be set. e.g `@ModelAttribute`(""formFieldListBinder"") The default value (I suppose to be the type begins with lower caser) e.g :  `@ModelAttribute`(""formFieldListBinder"") public FormFieldBinder getFormFieldBinder(...)  would implicity be a bean named  ""formFieldBinder"" if argument ""formFieldListBinder"" ommited. The problem came when I did an action on a page and refresh this same page. The `@ModelAttribut` annotated method is so called again when refreshing the page, but the value that should be display from this model attribute is not displayed. So if I just name my modelAttribut with whatever string (here: (""formFieldListBinder"")) The displayed value in my reloaded JSP file is well done : with EL like ${formFieldListBinder.myvaluetodisplay}. But for this I must name my ModelAttribute.   ---  **Affects:** 3.0.3","closed","type: enhancement,","spring-projects-issues","2010-12-15T09:47:35Z","2015-09-22T17:34:35Z"
"","12552","Calling a @RequestMapping annotated method with a URI template with three variables does not work [SPR-7896]","**[Florian Rampp](https://jira.spring.io/secure/ViewProfile.jspa?name=jack_kerouac)** opened **[SPR-7896](https://jira.spring.io/browse/SPR-7896?redirect=false)** and commented  Assume the following method definitions in an `@Controller` annotated class:  ``` @RequestMapping(value = ""/x/**"") @ResponseBody public String doSomething0() { 	return ""wild card""; }  @RequestMapping(value = ""/x/{b}/{c}/{d}"") @ResponseBody public String doSomething1(@PathVariable(""b"") String b, @PathVariable(""c"") String c, @PathVariable(""d"") String d) { 	return ""three params""; }  @RequestMapping(value = ""/x/{b}/{c}"") @ResponseBody public String doSomething2(@PathVariable(""b"") String b, @PathVariable(""c"") String c) { 	return ""two params""; }  @RequestMapping(value = ""/x/{b}"") @ResponseBody public String doSomething3(@PathVariable(""b"") String b) { 	return ""one param""; } {/code}  If I issue a HTTP GET to http://localhost:8080/x, I receive ""wild card"". If I issue a HTTP GET to http://localhost:8080/x/1, I receive ""one param"". If I issue a HTTP GET to http://localhost:8080/x/1/2, I receive ""two params"". *If I issue a HTTP GET to http://localhost:8080/x/1/2/3, I receive ""wild card""!* But I expect the method doSomething3 to be invoked and thus to receive ""three params"".  I think this is a bug in the method handler resolution. The most specific definition should be taken, which works for the cases with one and two URI template variables, but not for the case with three variables. At least it is inconsistent behavior.  If I omit the method doSomething0 with the wildcard URI definition, a HTTP GET to http://localhost:8080/x/1/2/3 returns ""three params"". ```  ---  **Affects:** 3.0.5  **Issue Links:** - #11407 RequestMapping with 3 PathVariable doesn't work (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2011-01-19T05:15:54Z","2019-01-12T16:49:17Z"
"","12187","supports(Class clazz) method of MarshallingHttpMessageConverter in connection with XStream returns wrong result for clazz = String [SPR-7529]","**[Florian Rampp](https://jira.spring.io/secure/ViewProfile.jspa?name=jack_kerouac)** opened **[SPR-7529](https://jira.spring.io/browse/SPR-7529?redirect=false)** and commented  The following code requests an XML document from an address. The XML should not be parsed, but just returned as a String:  ``` HttpHeaders headers = new HttpHeaders(); headers.setAccept(ImmutableList.of(MediaType.APPLICATION_XML)); HttpEntity request = new HttpEntity(headers);  ResponseEntity response = restTemplate.exchange(url, HttpMethod.GET, request, String); ```  For the used REST template, the following configuration applies:  ```xml    	 	      	 	 		 			 			 		 	  ```  It does not work, but gives the error:  ``` org.springframework.beans.TypeMismatchException: Failed to convert value of type '' to required type 'java.lang.String' 	at org.springframework.http.converter.xml.MarshallingHttpMessageConverter.readFromSource(MarshallingHttpMessageConverter.java:116) 	at org.springframework.http.converter.xml.AbstractXmlHttpMessageConverter.readInternal(AbstractXmlHttpMessageConverter.java:61) 	at org.springframework.http.converter.AbstractHttpMessageConverter.read(AbstractHttpMessageConverter.java:154) 	at org.springframework.web.client.HttpMessageConverterExtractor.extractData(HttpMessageConverterExtractor.java:74) 	at org.springframework.web.client.RestTemplate$ResponseEntityResponseExtractor.extractData(RestTemplate.java:619) 	at org.springframework.web.client.RestTemplate$ResponseEntityResponseExtractor.extractData(RestTemplate.java:1) 	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:446) 	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:401) 	at org.springframework.web.client.RestTemplate.exchange(RestTemplate.java:377) ... ```  I suspect the problem is the implementation of the `support` method for the `MarshallingHttpMessageConverter`. It returns `true` for the parameter `clazz = String` if the property `supportedClasses` of XStream is not set.  If I change the sequence of the two registered message converteres in the XML configuration it works, since the `StringHttpMessageConverter` is checked first.    ---  **Affects:** 3.0.3","closed","status: declined,","spring-projects-issues","2010-09-07T06:03:21Z","2019-01-12T16:26:49Z"
"","12041","Offer a ClientHttpRequestFactory for usage with Apache HttpComponents HttpClient [SPR-7383]","**[Florian Rampp](https://jira.spring.io/secure/ViewProfile.jspa?name=jack_kerouac)** opened **[SPR-7383](https://jira.spring.io/browse/SPR-7383?redirect=false)** and commented  The current implementations of ClientHttpRequestFactory (besides SimpleClientHttpRequestFactory) only comprise CommonsClientHttpRequestFactory, which depends on Jakarta Commons HttpClient. The successor of this is Apache HttpComponents. See: http://hc.apache.org/httpclient-3.x/#History  It would be desirable to employ the newer HttpComponents HttpClient. Therefore, an implementation of ClientHttpRequestFactory for usage with the HttpComponents HttpClient is necessary.  This issue might be related to http://jira.springframework.org/browse/SWS-563.  ---  **Affects:** 3.1 M1  **Issue Links:** - #11385 CommonsClientHttpRequestFactory getHttpClient() returns HttpClient from Commons HttpClient 3.x which has been EOL'd (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2010-07-19T19:07:52Z","2019-01-11T13:39:17Z"
"","12039","HTTP headers returned as part of ResponseEntity(MultiValueMap headers, HttpStatus statusCode) are ignored when using this constructor [SPR-7381]","**[Florian Rampp](https://jira.spring.io/secure/ViewProfile.jspa?name=jack_kerouac)** opened **[SPR-7381](https://jira.spring.io/browse/SPR-7381?redirect=false)** and commented  If a controller method returns a ResponseEntity, and this entity is created with the constructor ResponseEntity(MultiValueMap  headers, HttpStatus  statusCode) the passed headers are ignored and do not appear in the resulting HTTP response.  I suppose that the reason for this is an error in the class AnnotationMethodHandlerAdapter, line 916: if (body != null) { writeWithMessageConverters(body, inputMessage, outputMessage); }  If the body of the response entity is null, the message is not written.  If I use the constructor ResponseEntity(T body, MultiValueMap  headers, HttpStatus  statusCode), the headers appear as expected.   ---  **Affects:** 3.0.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c24ffc9175b05bdf7a1e5d4edf3c20bbcf812652","closed","type: bug,","spring-projects-issues","2010-07-15T22:13:37Z","2012-06-19T03:43:29Z"
"","12029","void method in MVC controller that is not annotated with @ResponseStatus and does not take a HttpServletResponse as parameter results in misleading 404 [SPR-7371]","**[Florian Rampp](https://jira.spring.io/secure/ViewProfile.jspa?name=jack_kerouac)** opened **[SPR-7371](https://jira.spring.io/browse/SPR-7371?redirect=false)** and commented  This is a method in my controller:  ``` @RequestMapping(value = ""/abc/def/{ghi}"", method = RequestMethod.DELETE) public void doSth(@PathVariable(""ghi"") String whatever) {     // ... } ```  I forgot to annotate it with `@ResponseStatus` to indicate what Spring should return. I expected a 200 response code but got a 404 when invoking the corresponding path.  When issuing an HTTP DELETE request to /abc/def/XYZ, the method is invoked correctly, but after returning, the following log output is created:  ``` WARN  [o.s.w.s.PageNotFound] No mapping found for HTTP request with URI [///abc/def/avc/def/XYZ] in DispatcherServlet with name '' ```  The path ""/abc/def"" is doubled. It took me a while to figure out that according to http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping-arguments, void methods must either take a `HttpServletResponse` or the resulting view is ""implicitly determined through a `RequestToViewNameTranslator`"". I suppose that the latter happened.  This behavior is non-obvious and results in a misleading 404 HTTP response. Is there something that could be done to help developers in detecting this mistake?  ---  **Issue Links:** - #15323 Spring MVC reports 404 while MockMvc reports 200 response code - #13053 Create separate handler stereotype for RESTful web services (_**""is superseded by""**_)","closed","status: declined,","spring-projects-issues","2010-07-14T18:23:23Z","2019-01-12T16:37:47Z"
"","11956","Add methods to invoke init and destroy methods of a bean in ReflectionTestUtils [SPR-7297]","**[Florian Rampp](https://jira.spring.io/secure/ViewProfile.jspa?name=jack_kerouac)** opened **[SPR-7297](https://jira.spring.io/browse/SPR-7297?redirect=false)** and commented  Some beans need to be initialized before being able to work properly. This subsequently also needs to be done when unit testing these beans. Currently, a test case needs to know which methods are used to initialize the bean and invoke them manually.  A method in `ReflectionTestUtils` would be convenient, that properly initializes a bean, according to the various strategies, with which the [lifecycle of a bean can be configured](http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/beans.html#beans-factory-lifecycle).  This is even more important in the case, the _init_ method is private and annotated with `@PostConstruct`, which makes calling this method require reflection.  The same applies for the destruction of a bean.  The result would be a consistent lifecycle of a bean during runtime as well as in the unit tests.  ---  **Affects:** 3.0.4  **Issue Links:** - #13275 Introduce a generic method for invoking any non-public method in ReflectionTestUtils (_**""depends on""**_)","closed","type: enhancement,","spring-projects-issues","2010-06-17T18:47:12Z","2019-01-11T14:11:05Z"
"","11947","Allow different Spring controllers to handle different HTTP methods of the same resource [SPR-7288]","**[Florian Rampp](https://jira.spring.io/secure/ViewProfile.jspa?name=jack_kerouac)** opened **[SPR-7288](https://jira.spring.io/browse/SPR-7288?redirect=false)** and commented  In the given forum entry, I outline a use case for splitting the handling of a REST resource between several controllers. While, e.g. the methods PUT and DELETE on a resource describe the setup and teardown of some kind of bucket, the POST to the same URL creates new content in the bucket. These two kinds of functionality are very different and thus may have two different business service interfaces. Therefore a split in the controller to reflect this distinction would be reasonable.  I would propose to consider, whether the rule that one resource can only handled by a single controller should be extended to include the HTTP method, so that different HTTP methods of the same resource can be handled in different controllers.   ---  **Reference URL:** http://forum.springsource.org/showthread.php?t=90822","closed","type: enhancement,","spring-projects-issues","2010-06-15T17:41:11Z","2019-01-11T14:11:22Z"
"","11946","Maven version syntax of Spring artifacts does not follow Maven conventions and thus, declaration of version ranges for Spring is not possible [SPR-7287]","**[Florian Rampp](https://jira.spring.io/secure/ViewProfile.jspa?name=jack_kerouac)** opened **[SPR-7287](https://jira.spring.io/browse/SPR-7287?redirect=false)** and commented  The format 3.0.0.RELEASE does not follow the Maven convention which requires the version to be 3.0.0-RELEASE. I know that you decided like that to be consistent with the OSGi version syntax and that you probably value compatibility with OSGi higher then Maven compatibility.  Nonetheless, this format forbids to e.g. declare version ranges like [3.0, 3.1).   ---  **Reference URL:** http://forum.springsource.org/showthread.php?t=88779  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2010-06-15T17:31:14Z","2015-09-22T18:55:04Z"
"","11912","Improve JavaDoc of TaskScheduler interface [SPR-7253]","**[Florian Rampp](https://jira.spring.io/secure/ViewProfile.jspa?name=jack_kerouac)** opened **[SPR-7253](https://jira.spring.io/browse/SPR-7253?redirect=false)** and commented  Improve the JavaDoc of the TaskScheduler interface by:  1. specifying the time unit of the long parameters ""period"" and ""delay"" in several methods. I suspect its milliseconds, but this should be documented. 2. specifying what happens, if the ""startTime"" parameter in several methods is in the past. 3. improving the comment for TaskRejectedException for all methods. ""if the given task was not accepted"" is an obvious documentation. What exact conditions lead to this exception?    ---  **Affects:** 3.0.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5b420e20c733bdbdea287932289270ddd6f8aee6","closed","type: enhancement,","spring-projects-issues","2010-06-01T20:44:07Z","2012-06-19T03:42:53Z"
"","12554","DispatcherPortlet: Resource requests (.js, .css) handling with  [SPR-7898]","**[Florian Huonder](https://jira.spring.io/secure/ViewProfile.jspa?name=huof)** opened **[SPR-7898](https://jira.spring.io/browse/SPR-7898?redirect=false)** and commented  Hi all,  Since version 3.0.4 of the Srpingframework it is possible to load resources with  No ResourceServlet is needed. This works only when using the Spring's DispatcherServlet. I am developing applications in a portlet environment and do use DispatcherPortlet instead. Is it possible to make this new resource serving also available for DispatcherPortlet?   ---  **Affects:** 3.0.4  3 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2011-01-19T07:25:47Z","2019-01-11T15:19:56Z"
"","12547","EclipseLink does not support read-only database connections [SPR-7891]","**[Florian Feigenbutz](https://jira.spring.io/secure/ViewProfile.jspa?name=florian.feigenbutz)** opened **[SPR-7891](https://jira.spring.io/browse/SPR-7891?redirect=false)** and commented  We are using Spring and EclipseLink to establish two separated connection pools to replicated MySQL systems.  One connection pool contains ""write"" connections and should interact with the MySQL master only. The other connection pool contains ""read"" connections addressing the MySQL slaves. These pools are established using EclipseLink's connection pool implementation and the MySQL replication driver.  This driver decides whether to address the MySQL master or slave host(s) based on the connection's ""readOnly"" attribute. Connections having ""readOnly=true"" will be executed on any of the configured slaves while ""readOnly=false"" will address the MySQL master system.  We use the Transactional annotation in order to control whether our methods should make use of read or write connections, e.g.: `@Transactional`(readOnly = true, propagation = Propagation.REQUIRED)  Unfortunately the annotation's ""readOnly"" attribute is never transformed into read-only database connections in our environment. It seems as if the EclipseLinkJpaDialect is missing to set this attribute in the getJdbcConnection method:      @Override     public ConnectionHandle getJdbcConnection(EntityManager em, boolean readOnly)         throws PersistenceException, SQLException {         AbstractSession session = (AbstractSession) getSession(em);         // The connection was already acquired eagerly in beginTransaction,         // unless lazyDatabaseTransaction was set to true.         Connection con = session.getAccessor().getConnection();         return (con != null ? new SimpleConnectionHandle(con) : null);     }  Calling the connections's setReadOnly method would fix the issue and enable the MySQL replication driver to address the correct DBMS:      ...         Connection con = session.getAccessor().getConnection();         con.setReadOnly(readOnly);         return (con != null ? new SimpleConnectionHandle(con) : null);     }  Could this be a Spring bug or are we missing anything in our application configuration? Is there any reason why the current getJdbcConnection implementation ignores the present ""readOnly"" argument?  ---  **Affects:** 3.0.5  **Issue Links:** - #12409 Spring's JDBC connection access disables shared cache in EclipseLink  7 votes, 8 watchers","closed","status: bulk-closed,","spring-projects-issues","2011-01-17T01:45:51Z","2019-01-12T03:31:37Z"
"","12294","spring:eval causes SpelEvaluationException when page is opened in second user-session [SPR-7638]","**[Florian Fankhauser](https://jira.spring.io/secure/ViewProfile.jspa?name=ffankhauser)** opened **[SPR-7638](https://jira.spring.io/browse/SPR-7638?redirect=false)** and commented  I want to display a java.util.Date value from the model using the spring:eval-tag like this:    Now I start Tomcat and open the page let's say in Firefox. It works fine, the page displays as expected. Now I start another web-browser, let's say Safari, to simulate another user-session. When I try to open the page with Safari, I get the following Exception:  org.apache.jasper.JasperException: org.springframework.expression.spel.SpelEvaluationException: EL1021E:(pos 0): A problem occurred whilst attempting to access the property 'dateOfBirth': 'Unexpected exception occurred accessing 'dateOfBirth' as an implicit variable'  When I refresh the page in Safari the exception continues to show up. When I refresh the page in Firefox, it works without any problem.  It seems to me, that spring:eval only works in the first user-session in this case but not in any further user-sessions. This problem exists since version 3.0.4.  Steps to reproduce:  ---  1. With STS create a new Spring Template Project of type MVC. 2. Open pom.xml and change the spring-version to 3.0.4. 3. Change the welcome()-method in WelcomeController.java to:  public void welcome(Model model) { model.addAttribute(""dateOfBirth"", new Date()); }  4. Open the welcome.jsp file and add this spring:eval-tag below the h1-tag:    5. Start Tomcat and try to open the site with to different web-browsers. In the second browser the exception is shown.  I have attached the sample-project to reproduce the problem.  The complete exception shown:  ---  org.apache.jasper.JasperException: org.springframework.expression.spel.SpelEvaluationException: EL1021E:(pos 0): A problem occurred whilst attempting to access the property 'dateOfBirth': 'Unexpected exception occurred accessing 'dateOfBirth' as an implicit variable' org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:527) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:419) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:313) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:260) javax.servlet.http.HttpServlet.service(HttpServlet.java:717) org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238) org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:250) org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1031) org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:815) org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:717) org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:644) org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:549) javax.servlet.http.HttpServlet.service(HttpServlet.java:617) javax.servlet.http.HttpServlet.service(HttpServlet.java:717) org.tuckey.web.filters.urlrewrite.NormalRewrittenUrl.doRewrite(NormalRewrittenUrl.java:195) org.tuckey.web.filters.urlrewrite.RuleChain.handleRewrite(RuleChain.java:159) org.tuckey.web.filters.urlrewrite.RuleChain.doRules(RuleChain.java:141) org.tuckey.web.filters.urlrewrite.UrlRewriter.processRequest(UrlRewriter.java:90) org.tuckey.web.filters.urlrewrite.UrlRewriteFilter.doFilter(UrlRewriteFilter.java:417) root cause  org.springframework.expression.spel.SpelEvaluationException: EL1021E:(pos 0): A problem occurred whilst attempting to access the property 'dateOfBirth': 'Unexpected exception occurred accessing 'dateOfBirth' as an implicit variable' org.springframework.expression.spel.ast.PropertyOrFieldReference.readProperty(PropertyOrFieldReference.java:199) org.springframework.expression.spel.ast.PropertyOrFieldReference.getValueInternal(PropertyOrFieldReference.java:71) org.springframework.expression.spel.ast.SpelNodeImpl.getTypedValue(SpelNodeImpl.java:102) org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:97) org.springframework.web.servlet.tags.EvalTag.doEndTag(EvalTag.java:113) org.apache.jsp.WEB_002dINF.views.welcome_jsp._jspx_meth_spring_005feval_005f0(welcome_jsp.java:99) org.apache.jsp.WEB_002dINF.views.welcome_jsp._jspService(welcome_jsp.java:69) org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70) javax.servlet.http.HttpServlet.service(HttpServlet.java:717) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:377) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:313) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:260) javax.servlet.http.HttpServlet.service(HttpServlet.java:717) org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238) org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:250) org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1031) org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:815) org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:717) org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:644) org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:549) javax.servlet.http.HttpServlet.service(HttpServlet.java:617) javax.servlet.http.HttpServlet.service(HttpServlet.java:717) org.tuckey.web.filters.urlrewrite.NormalRewrittenUrl.doRewrite(NormalRewrittenUrl.java:195) org.tuckey.web.filters.urlrewrite.RuleChain.handleRewrite(RuleChain.java:159) org.tuckey.web.filters.urlrewrite.RuleChain.doRules(RuleChain.java:141) org.tuckey.web.filters.urlrewrite.UrlRewriter.processRequest(UrlRewriter.java:90) org.tuckey.web.filters.urlrewrite.UrlRewriteFilter.doFilter(UrlRewriteFilter.java:417) root cause  org.springframework.expression.AccessException: Unexpected exception occurred accessing 'dateOfBirth' as an implicit variable org.springframework.web.servlet.tags.EvalTag$JspPropertyAccessor.resolveImplicitVariable(EvalTag.java:186) org.springframework.web.servlet.tags.EvalTag$JspPropertyAccessor.canRead(EvalTag.java:159) org.springframework.expression.spel.ast.PropertyOrFieldReference.readProperty(PropertyOrFieldReference.java:189) org.springframework.expression.spel.ast.PropertyOrFieldReference.getValueInternal(PropertyOrFieldReference.java:71) org.springframework.expression.spel.ast.SpelNodeImpl.getTypedValue(SpelNodeImpl.java:102) org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:97) org.springframework.web.servlet.tags.EvalTag.doEndTag(EvalTag.java:113) org.apache.jsp.WEB_002dINF.views.welcome_jsp._jspx_meth_spring_005feval_005f0(welcome_jsp.java:99) org.apache.jsp.WEB_002dINF.views.welcome_jsp._jspService(welcome_jsp.java:69) org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70) javax.servlet.http.HttpServlet.service(HttpServlet.java:717) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:377) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:313) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:260) javax.servlet.http.HttpServlet.service(HttpServlet.java:717) org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238) org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:250) org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1031) org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:815) org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:717) org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:644) org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:549) javax.servlet.http.HttpServlet.service(HttpServlet.java:617) javax.servlet.http.HttpServlet.service(HttpServlet.java:717) org.tuckey.web.filters.urlrewrite.NormalRewrittenUrl.doRewrite(NormalRewrittenUrl.java:195) org.tuckey.web.filters.urlrewrite.RuleChain.handleRewrite(RuleChain.java:159) org.tuckey.web.filters.urlrewrite.RuleChain.doRules(RuleChain.java:141) org.tuckey.web.filters.urlrewrite.UrlRewriter.processRequest(UrlRewriter.java:90) org.tuckey.web.filters.urlrewrite.UrlRewriteFilter.doFilter(UrlRewriteFilter.java:417) root cause  java.lang.NullPointerException org.apache.jasper.runtime.PageContextImpl.doFindAttribute(PageContextImpl.java:467) org.apache.jasper.runtime.PageContextImpl.findAttribute(PageContextImpl.java:457) javax.servlet.jsp.el.ScopedAttributeELResolver.getValue(ScopedAttributeELResolver.java:53) javax.el.CompositeELResolver.getValue(CompositeELResolver.java:54) org.apache.jasper.el.VariableResolverImpl.resolveVariable(VariableResolverImpl.java:32) org.springframework.web.servlet.tags.EvalTag$JspPropertyAccessor.resolveImplicitVariable(EvalTag.java:183) org.springframework.web.servlet.tags.EvalTag$JspPropertyAccessor.canRead(EvalTag.java:159) org.springframework.expression.spel.ast.PropertyOrFieldReference.readProperty(PropertyOrFieldReference.java:189) org.springframework.expression.spel.ast.PropertyOrFieldReference.getValueInternal(PropertyOrFieldReference.java:71) org.springframework.expression.spel.ast.SpelNodeImpl.getTypedValue(SpelNodeImpl.java:102) org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:97) org.springframework.web.servlet.tags.EvalTag.doEndTag(EvalTag.java:113) org.apache.jsp.WEB_002dINF.views.welcome_jsp._jspx_meth_spring_005feval_005f0(welcome_jsp.java:99) org.apache.jsp.WEB_002dINF.views.welcome_jsp._jspService(welcome_jsp.java:69) org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70) javax.servlet.http.HttpServlet.service(HttpServlet.java:717) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:377) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:313) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:260) javax.servlet.http.HttpServlet.service(HttpServlet.java:717) org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238) org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:250) org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1031) org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:815) org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:717) org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:644) org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:549) javax.servlet.http.HttpServlet.service(HttpServlet.java:617) javax.servlet.http.HttpServlet.service(HttpServlet.java:717) org.tuckey.web.filters.urlrewrite.NormalRewrittenUrl.doRewrite(NormalRewrittenUrl.java:195) org.tuckey.web.filters.urlrewrite.RuleChain.handleRewrite(RuleChain.java:159) org.tuckey.web.filters.urlrewrite.RuleChain.doRules(RuleChain.java:141) org.tuckey.web.filters.urlrewrite.UrlRewriter.processRequest(UrlRewriter.java:90) org.tuckey.web.filters.urlrewrite.UrlRewriteFilter.doFilter(UrlRewriteFilter.java:417) note The full stack trace of the root cause is available in the Apache Tomcat/6.0.26 logs.  ---  **Affects:** 3.0.4  **Attachments:** - [evaltagtest.zip](https://jira.spring.io/secure/attachment/17182/evaltagtest.zip) (_13.54 kB_)  **Issue Links:** - #12140 Exception (SpelEvaluationException: EL1021E) when using spring:eval with Jetty (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2010-10-10T14:40:01Z","2019-01-13T21:44:34Z"
"","12117","spring:eval displays 'null' when expression evaluates to null  [SPR-7459]","**[Florian Fankhauser](https://jira.spring.io/secure/ViewProfile.jspa?name=ffankhauser)** opened **[SPR-7459](https://jira.spring.io/browse/SPR-7459?redirect=false)** and commented  When the expression in a spring:eval tag evaluates to null, the string 'null' is displayed. I think the right behaviour would be an empty string because that would be consistent with the behaviour of JSP EL and spring:bind.   ---  **Affects:** 3.0.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/34ebad5fffe38158d8fb94f1577664a9e26d20e4","closed","type: bug,","spring-projects-issues","2010-08-12T09:39:07Z","2012-06-19T03:42:57Z"
"","12044","PropertyResourceConfigurer.convertPropertyValue should also include propertyName in the method signature for better handling of property value conversion [SPR-7386]","**[Faisal Feroz](https://jira.spring.io/secure/ViewProfile.jspa?name=faisalferoz)** opened **[SPR-7386](https://jira.spring.io/browse/SPR-7386?redirect=false)** and commented  The current signature of PropertyResourceConfigurer.convertPropertyValue is: protected String convertPropertyValue(String originalValue)  This should also include the ""property name"" as well so that the overriding method can do a better job of converting property values instead of deducing the conversion logic from the property value.  For example if the values are encrypted for certain properties, a simple check can be coded based on the  property names instead of deducing if the value is encrypted or not from the property value.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4d5a9c41e06e9e8c4035854076eb590f78f98073","closed","type: enhancement,","spring-projects-issues","2010-07-20T16:10:03Z","2012-06-19T03:43:37Z"
"","12281","Wrong pom.xml checksum on maven repository [SPR-7625]","**[Fabricio Lemos](https://jira.spring.io/secure/ViewProfile.jspa?name=fabricio.lemos)** opened **[SPR-7625](https://jira.spring.io/browse/SPR-7625?redirect=false)** and commented  Some POMs are with the wrong checksum on Maven Repository (repo1.maven.org/maven2/), which causes artifactory to reject those POMs if validation is enabled.  The POMs are: spring-tx-2.5.2.pom and spring-jdbc-2.5.2.pom from: http://repo1.maven.org/maven2/org/springframework/spring-tx/2.5.2/spring-tx-2.5.2.pom http://repo1.maven.org/maven2/org/springframework/spring-jdbc/2.5.2/spring-jdbc-2.5.2.pom   ---  **Affects:** 2.5.2  **Reference URL:** http://forum.springsource.org/showthread.php?t=50905","closed","status: declined,","spring-projects-issues","2010-10-07T10:45:33Z","2019-01-12T16:26:41Z"
"","12473","Make Assert.something() return value checked instead of ""void"", allow to chain the assert call [SPR-7817]","**[Evgeny Goldin](https://jira.spring.io/secure/ViewProfile.jspa?name=evgenyg)** opened **[SPR-7817](https://jira.spring.io/browse/SPR-7817?redirect=false)** and commented  Today, I can't write  String s = Assert.hasText( o.getSomeText())  because Assert usually returns void. If it returns value checked then I can use Assert calls in the way shown above. I wrote about this trick at http://evgeny-goldin.com/blog/return-something-not-void/.  ---  **Affects:** 3.0.5  **Issue Links:** - #14461 Modify org.springframework.util.Assert.* methods so that they will return checked values (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2010-12-13T04:31:16Z","2019-01-11T15:13:04Z"
"","12319","More informative Resource.toString(), like its URL - helps when AppContext displays resources it was loaded from (can display full URL) [SPR-7663]","**[Evgeny Goldin](https://jira.spring.io/secure/ViewProfile.jspa?name=evgenyg)** opened **[SPR-7663](https://jira.spring.io/browse/SPR-7663?redirect=false)** and commented  Today, when Spring config is loaded I see the following in my log:  ``` [org.springframework.beans.factory.xml.XmlBeanDefinitionReader] - Loading XML bean definitions from class path resource [confidence.engine.config.xml] ```  I think it would be nicer and more informative if instead of resource name its full URL would be displayed. This way one would see where **exactly** the resource was loaded from, which jar.  I see in **`XmlBeanDefinitionReader`**:  ``` if (logger.isInfoEnabled()) {     logger.info(""Loading XML bean definitions from "" + encodedResource.getResource()); } ```  And ClassPathResource **`toString()`** in AbstractResource:  ``` public String toString() {     return getDescription(); } ```  So if toString() is overridden in ClassPathResource to display as much information as possible - this will make Spring logs more informative as well. People will know where resources are loaded from.    ---  **Affects:** 3.0.4","closed","type: enhancement,","spring-projects-issues","2010-10-19T02:00:56Z","2015-09-22T17:34:32Z"
"","12082","CommonsClientHttpRequestFactory depends on outdated ""commons-httpclient"" 3.1 [SPR-7424]","**[Evgeny Goldin](https://jira.spring.io/secure/ViewProfile.jspa?name=evgenyg)** opened **[SPR-7424](https://jira.spring.io/browse/SPR-7424?redirect=false)** and commented  CommonsClientHttpRequestFactory used by Rest Template depends on outdated ""commons-httpclient"" v3.1. Version 4.0.1 is available and it's a serious upgrade to HttpClient: http://hc.apache.org/httpcomponents-client-4.0.1/index.html http://hc.apache.org/httpcomponents-client/download.html  It would be nice if CommonsClientHttpRequestFactory was updated to use v4.x of Apache HttpClient  ---  **Affects:** 3.0.3  **Issue Links:** - #11385 CommonsClientHttpRequestFactory getHttpClient() returns HttpClient from Commons HttpClient 3.x which has been EOL'd (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2010-08-05T03:52:46Z","2019-01-11T14:07:48Z"
"","12015","Provide a way to read an InputStream with RestTemplate [SPR-7357]","**[Evgeny Goldin](https://jira.spring.io/secure/ViewProfile.jspa?name=evgenyg)** opened **[SPR-7357](https://jira.spring.io/browse/SPR-7357?redirect=false)** and commented  Please, see http://forum.springsource.org/showthread.php?t=91713 Today I need to ""abandon"" RestTemplate when I need to read a raw binary response as InputStream and not as in-memory byte[]  Thank you!  ---  **Affects:** 3.0.3  **Issue Links:** - #21717 SimpleClientHttpResponse.close() does not call close() on URLConnection.getInputStream() if SimpleClientHttpResponse.getBody() was not called before","closed","status: invalid,","spring-projects-issues","2010-07-06T20:04:18Z","2019-01-12T05:31:43Z"
"","11990","Provide a ""username"" and ""password"" properties for RestTemplate [SPR-7331]","**[Evgeny Goldin](https://jira.spring.io/secure/ViewProfile.jspa?name=evgenyg)** opened **[SPR-7331](https://jira.spring.io/browse/SPR-7331?redirect=false)** and commented  Hi,  It would be nice to be able to set a username and password on RestTemplate instance rather then digging to it's HttpClient and setting its state in Java, the only way I could find today: http://forum.springsource.org/showthread.php?t=91471  This way it'll be possible to specify them in configuration XML file as template's properties without having to write any Java code  Thank you!  ---  **Affects:** 3.0.3  **Issue Links:** - #11385 CommonsClientHttpRequestFactory getHttpClient() returns HttpClient from Commons HttpClient 3.x which has been EOL'd  4 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2010-06-28T07:41:09Z","2019-01-11T14:19:56Z"
"","12397","Improve performance of BeanDefinitionValueResolver.adaptInnerBeanName for large numbers of inner beans [SPR-7741]","**[Evan Tsue](https://jira.spring.io/secure/ViewProfile.jspa?name=ectsue)** opened **[SPR-7741](https://jira.spring.io/browse/SPR-7741?redirect=false)** and commented  A project that I'm working on has thousands (2-3) of inner beans. The application takes about 20-30 minutes to start up, depending upon the particular hardware it was being deployed on.  Upon profiling the project, I found that much of the time was being spent in BeanDefinitionValueResolver.adaptInnerBeanName. It seems that this is being called from resolveInnerBeanName with the innerBeanName set to ""(inner bean)"". With the adaptInnerBeanName using a counter to adapt the bean name, it seems that it takes O(N^2) time to create N of these inner beans.  I propose changing the adaptInnerBeanName algorithm to instead append a random number instead of a counter to the initial bean name. I believe that this should take amortized O(N) time to create N inner beans vs. O(N^2). I've tested this change with my project and it brought our start up time down to ~10 seconds.   ---  **Affects:** 2.5.6  **Attachments:** - [inner_bean.diff](https://jira.spring.io/secure/attachment/17356/inner_bean.diff) (_2.00 kB_)","closed","type: enhancement,","spring-projects-issues","2010-11-13T04:08:25Z","2012-06-19T09:36:19Z"
"","12320","Incorrect handling of annotation attached to interface method [SPR-7664]","**[Eugene Rozov](https://jira.spring.io/secure/ViewProfile.jspa?name=nazica)** opened **[SPR-7664](https://jira.spring.io/browse/SPR-7664?redirect=false)** and commented  According to reference (paragraph 10.5.6), annotation may be placed on an interface (or an interface method) and this should work correctly if interface-based proxies are used.  But seems that Spring AOP failed to handle situation when annotation is placed on interface method, that's why pointcuts like  **execution(`@com`.xyz.Secured)** are not working.  Sample project is attached.   ---  **Affects:** 2.5.6, 3.0.4  **Reference URL:** http://forum.springsource.org/showthread.php?t=67388  **Attachments:** - [test-aspect.zip](https://jira.spring.io/secure/attachment/17223/test-aspect.zip) (_6.30 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/65ac173b29825aa460bda47c5b751515138b5a4c","closed","in: core,","spring-projects-issues","2010-10-19T04:42:18Z","2022-07-30T19:48:54Z"
"","12776","@ExceptionHandler doesn't handle exceptions from other controllers [SPR-8124]","**[Eugen Paraschiv](https://jira.spring.io/secure/ViewProfile.jspa?name=eugenparaschiv)** opened **[SPR-8124](https://jira.spring.io/browse/SPR-8124?redirect=false)** and commented  The fact that a method annotated with `@ExceptionHandler` can only handle exceptions from the same controller is a restrictive issue. The better behavior would be if the annotated method would be able to handle all exceptions of that particular type, regardless of their source.  ---  **Issue Links:** - #11937 `@ResponseBody` usage limitations (_**""duplicates""**_) - #12829 Expose handler method when BindException is thrown from HandlerMethodInvoker (_**""is duplicated by""**_)","closed","type: enhancement,","spring-projects-issues","2011-03-31T12:30:42Z","2019-01-13T07:10:28Z"
"","11879","hibernate SessionFactoryUtils ignores WebSphereUowTransactionManager transaction timeout [SPR-7220]","**[Eugen Kozynin](https://jira.spring.io/secure/ViewProfile.jspa?name=ekozynin)** opened **[SPR-7220](https://jira.spring.io/browse/SPR-7220?redirect=false)** and commented  I have discovered that timeout set in spring configuration is ignored by hibernate layer (hibernate template). Spring transaction still does timeout, but if at that moment some sql query is executed in the hibernate layer, it is not interrupted and is allowed to run to completion.  After debugging spring course code I have discovered that timeout is not passed from WebSphereUowTransactionManager into SessionFactoryUtils.  The spring code in this area did not change from 2.5.6 to 3.0.2 so I think there is still the same bug in the 3.0.2  ```           	 		 			 			 		 	  	 		 		  		  	 ```  The following fix was implemented: public abstract class TransactionSynchronizationManager has new ThreadLocal variable transactionTimeout, which allows as to pass transaction timeout value from spring layer to hibernate layer. I set the timeout value in WebSphereUowTransactionManager and apply it to the SessionHolder in SessionFactoryUtils as explained below.  ``` private static final ThreadLocal transactionTimeout = new NamedThreadLocal(""Transaction timeout""); ```  WebSphereUowTransactionManager was modified to set timeout value (in public Object execute(TransactionDefinition definition, TransactionCallback callback) throws TransactionException method):  ```         SuspendedResourcesHolder suspendedResources = (existingTx && !joinTx ? suspend(null) : null);         try         {             if (definition.getTimeout() > TransactionDefinition.TIMEOUT_DEFAULT)             {                 this.uowManager.setUOWTimeout(uowType, definition.getTimeout());                 if (uowType == UOWSynchronizationRegistry.UOW_TYPE_GLOBAL_TRANSACTION)                 {                     if (debug)                     {                         logger                                 .debug(""Setting TransactionSynchronizationManager transaction timeout from uowManager timeout. Timeout value is ""                                         + definition.getTimeout());                     }                     //!!!!!!!!!!------------------------------------                     //!!!!!!!!!!---------->>>>> SET TIMEOUT HERE !!!                     //!!!!!!!!!!------------------------------------                     TransactionSynchronizationManager.setTransactionTimeout(definition.getTimeout());                 }             }              if (debug)             {                 logger.debug(""Invoking WebSphere UOW action: type="" + uowType + "", join="" + joinTx);             }             UOWActionAdapter action = new UOWActionAdapter(definition, callback,                     (uowType == UOWManager.UOW_TYPE_GLOBAL_TRANSACTION), !joinTx, newSynch, debug);             this.uowManager.runUnderUOW(uowType, joinTx, action);              if (debug)             {                 logger.debug(""Returned from WebSphere UOW action: type="" + uowType + "", join="" + joinTx);             }             return action.getResult();         }         catch (UOWException ex)         {             throw new TransactionSystemException(""UOWManager transaction processing failed"", ex);         }         catch (UOWActionException ex)         {             throw new TransactionSystemException(""UOWManager threw unexpected UOWActionException"", ex);         }         finally         {             if (suspendedResources != null)             {                 resume(null, suspendedResources);             }         } ```  SessionFactoryUtils was modified to read transaction timeout value and apply it to the holderToUse.setTimeoutInSeconds  ``` if (TransactionSynchronizationManager.isSynchronizationActive()) {     // We're within a Spring-managed transaction, possibly from JtaTransactionManager.     logger.debug(""Registering Spring transaction synchronization for new Hibernate Session"");     SessionHolder holderToUse = sessionHolder;     if (holderToUse == null)     {         holderToUse = new SessionHolder(session);         if (TransactionSynchronizationManager.getTransactionTimeout() != null)         {             logger.debug(""Setting session holder timeout to ""                     + TransactionSynchronizationManager.getTransactionTimeout());             //!!!!!!!!!!--------------------------------------             //!!!!!!!!!!---------->>>>> APPLY TIMEOUT HERE !!!             //!!!!!!!!!!--------------------------------------             holderToUse.setTimeoutInSeconds(TransactionSynchronizationManager.getTransactionTimeout()                     .intValue());         }     }     else     {         holderToUse.addSession(session);     }     if (TransactionSynchronizationManager.isCurrentTransactionReadOnly())     {         session.setFlushMode(FlushMode.NEVER);     }     TransactionSynchronizationManager.registerSynchronization(new SpringSessionSynchronization(holderToUse,             sessionFactory, jdbcExceptionTranslator, true));     holderToUse.setSynchronizedWithTransaction(true);     if (holderToUse != sessionHolder)     {         TransactionSynchronizationManager.bindResource(sessionFactory, holderToUse);     } } else {     // No Spring transaction management active -> try JTA transaction synchronization.     registerJtaSynchronization(session, sessionFactory, jdbcExceptionTranslator, sessionHolder); } ```  **_Few other people reported similar issues in the various forums, but i think nobody got to the bottom of the problem. Various fixes has been suggested, but none of them really worked. It will be good to confirm this fix and apply it to the trunk_**   ---  **Affects:** 2.5.6, 3.0.2  3 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2010-05-19T15:29:00Z","2015-09-22T18:55:03Z"
"","11977","Cascade Validation using Hibernate Validator does not work [SPR-7319]","**[Erlend Garåsen](https://jira.spring.io/secure/ViewProfile.jspa?name=erlendfg)** opened **[SPR-7319](https://jira.spring.io/browse/SPR-7319?redirect=false)** and commented  Cascade validation with the `@Cascade` annotation does not work if the domain objects are populated with data from a database (when editing the data inside a method using the `@ModelAttribute` annotation). Validation errors such as ""may not be empty"" (`@NotEmpty`) occurs on submit for the cascaded validation, even though all the required fields are filled out.  The problem may be reproduced by running the attached application. In order to run the application, just unzip, run ""mvn jetty:run"" and go to ""http://localhost:8080/validator_test. A Derby database is included.   ---  **Affects:** 3.0.3  **Reference URL:** http://forum.springsource.org/showthread.php?t=91222  **Attachments:** - [validator_test.zip](https://jira.spring.io/secure/attachment/16781/validator_test.zip) (_15.24 kB_)  1 votes, 2 watchers","closed","status: declined,","spring-projects-issues","2010-06-23T23:30:32Z","2019-01-12T16:37:52Z"
"","12725","Race condition in AspectJ pointuct resolution when 'prototype' beans of same type are initialized concurrently [SPR-8070]","**[Eric Sirianni](https://jira.spring.io/secure/ViewProfile.jspa?name=sirianni)** opened **[SPR-8070](https://jira.spring.io/browse/SPR-8070?redirect=false)** and commented  We intermittently receive this error in bean initialization from our application:  ``` org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'foo' defined in file [...]: Initialization of bean failed; nested exception is java.lang.NullPointerException 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:527) ~[org.springframework.beans.jar:3.0.3.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) ~[org.springframework.beans.jar:3.0.3.RELEASE] 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:310) ~[org.springframework.beans.jar:3.0.3.RELEASE] 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190) ~[org.springframework.beans.jar:3.0.3.RELEASE] 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:838) ~[org.springframework.beans.jar:3.0.3.RELEASE] 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:780) ~[org.springframework.beans.jar:3.0.3.RELEASE] 	at org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectFactory.getObject(DefaultListableBeanFactory.java:1008) ~[org.springframework.beans.jar:3.0.3.RELEASE] 	at org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyProvider.get(DefaultListableBeanFactory.java:1023) ~[org.springframework.beans.jar:3.0.3.RELEASE] 	at ... Caused by: java.lang.NullPointerException: null 	at org.aspectj.weaver.World.resolve(World.java:265) ~[aspectjweaver.jar:1.6.8] 	at org.aspectj.weaver.World.resolve(World.java:209) ~[aspectjweaver.jar:1.6.8] 	at org.aspectj.weaver.World.resolve(World.java:244) ~[aspectjweaver.jar:1.6.8] 	at org.aspectj.weaver.TypeFactory.createParameterizedType(TypeFactory.java:45) ~[aspectjweaver.jar:1.6.8] 	at org.aspectj.weaver.reflect.JavaLangTypeToResolvedTypeConverter.fromType(JavaLangTypeToResolvedTypeConverter.java:75) ~[aspectjweaver.jar:1.6.8] 	at org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate.getSuperclass(Java15ReflectionBasedReferenceTypeDelegate.java:139) ~[aspectjweaver.jar:1.6.8] 	at org.aspectj.weaver.ReferenceType.getSuperclass(ReferenceType.java:905) ~[aspectjweaver.jar:1.6.8] 	at org.aspectj.weaver.patterns.KindedPointcut.fastMatch(KindedPointcut.java:144) ~[aspectjweaver.jar:1.6.8] 	at org.aspectj.weaver.internal.tools.PointcutExpressionImpl.couldMatchJoinPointsInType(PointcutExpressionImpl.java:82) ~[aspectjweaver.jar:1.6.8] 	at org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(AspectJExpressionPointcut.java:233) ~[org.springframework.aop.jar:3.0.3.RELEASE] 	at org.springframework.aop.support.AopUtils.canApply(AopUtils.java:200) ~[org.springframework.aop.jar:3.0.3.RELEASE] 	at org.springframework.aop.support.AopUtils.canApply(AopUtils.java:254) ~[org.springframework.aop.jar:3.0.3.RELEASE] 	at org.springframework.aop.support.AopUtils.findAdvisorsThatCanApply(AopUtils.java:286) ~[org.springframework.aop.jar:3.0.3.RELEASE] 	at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findAdvisorsThatCanApply(AbstractAdvisorAutoProxyCreator.java:117) ~[org.springframework.aop.jar:3.0.3.RELEASE] 	at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findEligibleAdvisors(AbstractAdvisorAutoProxyCreator.java:87) ~[org.springframework.aop.jar:3.0.3.RELEASE] 	at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.getAdvicesAndAdvisorsForBean(AbstractAdvisorAutoProxyCreator.java:68) ~[org.springframework.aop.jar:3.0.3.RELEASE] 	at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.wrapIfNecessary(AbstractAutoProxyCreator.java:359) ~[org.springframework.aop.jar:3.0.3.RELEASE] 	at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization(AbstractAutoProxyCreator.java:322) ~[org.springframework.aop.jar:3.0.3.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:407) ~[org.springframework.beans.jar:3.0.3.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1418) ~[org.springframework.beans.jar:3.0.3.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519) ~[org.springframework.beans.jar:3.0.3.RELEASE] 	... 35 common frames omitted  ```  We tracked the issue down to the following scenario: * A 'prototype' bean definition is injected (for the first time) concurrently by two separate threads (when AOP is in use - e.g. for `@Transactional` proxies). * When Spring post-processes the prototype bean, it tests the defined pointcuts (AbstractAdvisorAutoProxyCreator.findAdvisorsThatCanApply). * Eventually, that uses the thread-shared ""org.aspectj.weaver.World"" object to do type resolution and other such stuff. * Eventually, a JavaLangTypeToResolvedTypeConverter is obtained from World and used concurrently from these two separate threads initializing the prototype bean. * The JavaLangTypeToResolvedTypeConverter class is not threadsafe - this Map field is used to track per-call state (i.e. it should really be a stack variable).  My guess is the NPE is caused by the unsynchronized/unsafe use of this Map.  ``` 	// Used to prevent recursion - we record what we are working on and return it if asked again *whilst* working on it 	private Map typeVariablesInProgress  				= new HashMap(); ... 	public ResolvedType fromType(Type aType) { ... 		} else if (aType instanceof java.lang.reflect.TypeVariable) { 			if (typeVariablesInProgress.get(aType)!=null) // check if we are already working on this type 				return typeVariablesInProgress.get(aType);  ...			 			typeVariablesInProgress.put(aType,tvrt); // record what we are working on, for recursion case 			 ...			 			typeVariablesInProgress.remove(aType); // we have finished working on it 			 			return tvrt; 		}  ```  * That ""World"" class seems to provide a cache/context for type resolution - hence we only see the NullPointerException **the first initialization of the prototype bean**, thereafter the type is resolved via the cache in ""World"".  This race condition is very sensitive to timing, we cannot reliably reproduce it.  We are experimenting with a workaround of creating a ""throaway"" prototype bean from the application main thread just to get the AspectJ ""World"" primed with the type-resolution cache in a threadsafe manner.  Then subsequent getBeans() on the prototype bean concurrently from different application threads should work fine.   ---  **Affects:** 3.0.3  2 votes, 3 watchers","closed","in: core,","spring-projects-issues","2011-03-21T08:52:46Z","2019-01-12T16:25:57Z"
"","12588","SessionFactoryUtils.convertHibernateAccessException() improperly swallows underlying HibernateException [SPR-7933]","**[Eric Sirianni](https://jira.spring.io/secure/ViewProfile.jspa?name=sirianni)** opened **[SPR-7933](https://jira.spring.io/browse/SPR-7933?redirect=false)** and commented  The convertHibernateAccessException() method in SessionFactoryUtils does not properly chain the source HibernateException into the transformed Spring IncorrectResultSizeDataAccessException.  ``` if (ex instanceof NonUniqueResultException) {     return new IncorrectResultSizeDataAccessException(ex.getMessage(), 1); } ```  The root HibernateException is swallowed, and along with it the stack trace with the actual line of code that generated the Hibernate error.  This makes it nearly impossible to debug these failures.  The rest of the 'if' branches in convertHibernateAccessException() **do** appear to be properly chaining the underlying HibernateException into the newly constructed Exception:  ``` if (ex instanceof PropertyValueException) {     return new DataIntegrityViolationException(ex.getMessage(), ex); } if (ex instanceof PersistentObjectException) {     return new InvalidDataAccessApiUsageException(ex.getMessage(), ex); } ```  ---  **Affects:** 3.0.5  **Issue Links:** - #12721 Introduce (Annotation)SessionFactoryBuilder types (_**""depends on""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b0b1116f4b605e04dfc3c63cd6f5d40be7046919  5 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2011-02-03T05:26:32Z","2019-01-11T16:12:50Z"
"","12343","Use soft or weak references for context caching in the TestContext framework [SPR-7687]","**[Eric Sirianni](https://jira.spring.io/secure/ViewProfile.jspa?name=sirianni)** opened **[SPR-7687](https://jira.spring.io/browse/SPR-7687?redirect=false)** and commented  We are using the Spring TestContext framework (SpringJUnit4ClassRunner) for JUnit test execution.  We are hitting OutOfMemoryErrors when running a large number of tests in batch.  The problem is that the ApplicationContext objects are building up in the ContextCache (org.springframework.test.context.ContextCache), consuming a large amount of memory.  We have worked around the problem by annotating `@DirtiesContext` on each JUnit test class.  However, it seems that this issue could be avoided if ContextCache wrapped its cached ApplicationContexts  in WeakReferences.  This seems to be a best practice when caching potentially large objects such as these.  ---  **Affects:** 3.0.3  **Issue Links:** - #10532 Allow for concurrent test execution in the TestContext framework - #16200 Introduce system property to disable context caching in the TestContext framework - #12710 Limit size of context cache in the TestContext framework (_**""is superseded by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0cb22fc8f34a29c42313056671a947444b60050b, https://github.com/spring-projects/spring-framework/commit/d66d1605430c73444082d219214edb74327d3c13  2 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2010-10-26T10:36:08Z","2019-01-11T14:35:12Z"
"","12000","Allow bean definitions from @Configuration classes to override those defined in XML [SPR-7341]","**[Eric Sirianni](https://jira.spring.io/secure/ViewProfile.jspa?name=sirianni)** opened **[SPR-7341](https://jira.spring.io/browse/SPR-7341?redirect=false)** and commented  The ConfigurationClassBeanDefinitionReader hardcodes the behavior that bean definitions from XML always override bean definitions from JavaConfig classes:  ``` // has this already been overridden (e.g. via XML)? if (this.registry.containsBeanDefinition(beanName)) {      BeanDefinition existingBeanDef = registry.getBeanDefinition(beanName);      // is the existing bean definition one that was created from a configuration class?      if (!(existingBeanDef instanceof ConfigurationClassBeanDefinition)) {           // no -> then it's an external override, probably XML           // overriding is legal, return immediately           if (logger.isDebugEnabled()) {                    logger.debug(String.format(""Skipping loading bean definition for %s: a definition for bean "" +                                      ""'%s' already exists. This is likely due to an override in XML."", method, beanName));           }           return;      } } ```  I don't see why this decision was made.  The normal semantics of using the order in which bean definitions were registered would seem to make sense to apply here as well.  For example:  ``` @Configuration @ImportResource(""foo.xml"") class FooConfig {   @Bean bean1() { ... } }  @Configuration @ImportResource(""bar.xml"") class BarConfig {   @Bean bean1() { ... }   @Bean bean2() { ... } }  ... new AnnotationConfigApplicationContext(FooConfig.class, BarConfig.class) ```  I would expect the following override order to apply: 1. beans defined in foo.xml 2. overridden by beans defined in FooConfig 3. overridden by beans defined in bar.xml 4. overridden by beans defined in BarConfig  Instead it appears the override order is: 1. beans defined in FooConfig 2. overridden by beans defined in BarConfig 3. overridden by beans defined in foo.xml 4. overridden by beans defined in bar.xml  This is not intuitive.  Specifically, note the interleaving of beans between both Foo and Bar configurations. The clients who use FooConfig and BarConfig don't care whether the beans defined by those Configuration classes come from XML or java.  Yet, the override ordering forces them to be aware of this implementation detail.  I realize changing the behavior outright might present a backwards compatibility issue, so is it possible to add a boolean option to the ApplicationContext to respect the registration ordering regardless of whether the bean definition comes from XML or JavaConfig?  ---  **Affects:** 3.0.3  **Issue Links:** - #12839 Revised support for bean definition visibility and overriding (_**""is depended on by""**_) - #11690 Allow `@Bean` methods to override definitions in XML  24 votes, 21 watchers","closed","has: votes-jira,","spring-projects-issues","2010-07-01T04:15:43Z","2019-01-13T07:13:58Z"
"","12436","task:scheduled should support fixed-delay=-1 [SPR-7780]","**[Eric Jain](https://jira.spring.io/secure/ViewProfile.jspa?name=ejain)** opened **[SPR-7780](https://jira.spring.io/browse/SPR-7780?redirect=false)** and commented  This would allow scheduled tasks to be disabled via properties, e.g.  ```xml      ```    ---  **Affects:** 3.0.4","closed","type: enhancement,","spring-projects-issues","2010-12-01T12:09:37Z","2018-12-28T10:31:00Z"
"","12277","AbstractStaxContentHandler sets NamespaceContext on every start/end element [SPR-7621]","**[Eric Dalquist](https://jira.spring.io/secure/ViewProfile.jspa?name=edalquist)** opened **[SPR-7621](https://jira.spring.io/browse/SPR-7621?redirect=false)** and commented  AbstractStaxContentHandler tracks the currently in-scope namespaces and sets them on every StartElement and EndElement event. According to the StAX APIs it is only necessary to send the NamespaceContext when it is changing (a new namespaces comes into or goes out of scope). The current functionality results with namespace attributes attached to every element in the document.  The fix is to track when a namespace prefix has been added or removed and only send the NamespaceContext at that time.   ---  **Affects:** 3.0.4  **Attachments:** - [SPR7621.patch](https://jira.spring.io/secure/attachment/17170/SPR7621.patch) (_3.69 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ab21dbad08df69b7f734bc6392a55bac1c0353c1, https://github.com/spring-projects/spring-framework/commit/35da7bdb44c5660ce16690cdd52a8a5bce1d4f7e","closed","in: core,","spring-projects-issues","2010-10-05T12:05:53Z","2012-06-19T03:39:33Z"
"","12276","StaxEventContentHandler does not set Location for StartDocument event [SPR-7620]","**[Eric Dalquist](https://jira.spring.io/secure/ViewProfile.jspa?name=edalquist)** opened **[SPR-7620](https://jira.spring.io/browse/SPR-7620?redirect=false)** and commented  StaxEventContentHandler doesn't set the configured SAX Locator on the XMLEventFactory until consumeEvent is called. consumeEvent is called _after_ the event is created which means when client code sets a Locator it does not take effect until after the next event that is written to the XMLEventWriter.  I propose modifying setDocumentLocator so that it calls setLocation on the XMLEventFactory immediately.   ---  **Affects:** 3.0.4  **Attachments:** - [SPR7620.patch](https://jira.spring.io/secure/attachment/17174/SPR7620.patch) (_747 bytes_) - [SPR7620.patch](https://jira.spring.io/secure/attachment/17169/SPR7620.patch) (_1.46 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1f296403da01a57deca04e21f58dca42ac61ef97","closed","in: core,","spring-projects-issues","2010-10-05T10:37:48Z","2012-06-19T03:43:39Z"
"","12996","Ability to specify ResourceResolver property for SchemaFactory in Jaxb2Marshaller [SPR-8349]","**[Emilio Jose Mena Cebrian](https://jira.spring.io/secure/ViewProfile.jspa?name=emenaceb)** opened **[SPR-8349](https://jira.spring.io/browse/SPR-8349?redirect=false)** and commented  In some situations, it's neccesary to specify a ResourceResolver for SchemaFactory  in order to resolve external references.  For example, We need to load a schema with a imported schema but the location of the source of the imported one is not accesible from the network but it's at classpath.    --- No further details from [SPR-8349](https://jira.spring.io/browse/SPR-8349?redirect=false)","closed","type: enhancement,","spring-projects-issues","2011-04-04T07:19:21Z","2012-06-19T03:39:10Z"
"","11895","suggested changes for petclinic application [SPR-7236]","**[ellen johansen](https://jira.spring.io/secure/ViewProfile.jspa?name=ejohansen)** opened **[SPR-7236](https://jira.spring.io/browse/SPR-7236?redirect=false)** and commented  Hello, We're using the Spring 3.0 petclinic example for tc Server testing.  We are running the application in a clustered tomcat configuration, and are using it as the basis for some of our jmeter based tests.  In order to get the Visits and Owners working correctly in the cluster, we needed to modify Owner.java and Visit.java to implement Serializable.  Also, we've modified the 'Delete Pet' functionality to remove all visits for that pet, before deleting the pet.  Is there a way to get these changes back into the code base, so that we dont have to keep making them if someone pulls down updated source?  thanks in advance, _ellen   ---  **Affects:** 3.0.2","closed","status: invalid,","spring-projects-issues","2010-05-25T04:21:44Z","2019-01-12T05:31:59Z"
"","11992","@Value does not convert systemProperties to String array using EL [SPR-7333]","**[Eliseo Soto](https://jira.spring.io/secure/ViewProfile.jspa?name=eliseosoto)** opened **[SPR-7333](https://jira.spring.io/browse/SPR-7333?redirect=false)** and commented  Given something like this constructor:  ``` @Autowired public InstanceManager(@Value(""#{systemProperties['myApp.instances']}"") String[] instances) { } ```  If I start the app with ""-DmyApp.instances='localhost:8080, localhost:8081'"" then instances will contain just a single string like this: [""localhost:8080, localhost:8081""] size = 1, that is not correct.  However previously I had the value of myApp.instances inside a .properties file and the annotation was:  ``` @Value(""${myApp.instances}"") ```  and that worked just fine and the value of instances was [""localhost:8080"", ""localhost:8081""] size = 2  So, just changing from property files (${} syntax) to EL (#{} syntax) is causing this undesirable behavior.   ---  **Affects:** 3.0.3","closed","type: enhancement,","spring-projects-issues","2010-06-28T10:03:23Z","2015-09-22T17:34:30Z"
"","12722","@Scheduled's int attributes do not allow for placeholder values [SPR-8067]","**[Eliran Bivas](https://jira.spring.io/secure/ViewProfile.jspa?name=bivas)** opened **[SPR-8067](https://jira.spring.io/browse/SPR-8067?redirect=false)** and commented  In XML declaration it was possible to read configuration parameter for fixed-delay, fixed-rate (and the future initial-wait):  ```xml       ```  When using the annotation driven configuration the parameters accept constant values. Will be nice to have some attribute like `fixedRateProperty` that will read properties from configuration.  ---  **Affects:** 3.0.5  **Attachments:** - [SPR-8067.patch](https://jira.spring.io/secure/attachment/18909/SPR-8067.patch) (_13.47 kB_)  **Issue Links:** - #11336 `@Scheduled` annotation should support property placeholder values  3 votes, 8 watchers","closed","type: enhancement,","spring-projects-issues","2011-03-20T08:15:17Z","2019-01-13T07:10:44Z"
"","12580","Add Assert.noNullElements for Collections [SPR-7925]","**[Eliran Bivas](https://jira.spring.io/secure/ViewProfile.jspa?name=bivas)** opened **[SPR-7925](https://jira.spring.io/browse/SPR-7925?redirect=false)** and commented  It's possible to add the following code to `Assert` utility class  ``` public static void noNullElements(final Collection collection, final String message) {     for (Object object : collection) {         if (object == null) {             throw new IllegalArgumentException(message);         }     } }      public static void noNullElements(Collection collection) {     noNullElements(collection, ""[Assertion failed] - this collection must not contain any null elements""); } ```    ---  **Affects:** 3.0.5","closed","status: superseded,","spring-projects-issues","2011-01-31T10:45:43Z","2020-06-11T16:53:38Z"
"","12491","Enable using more than one parent in application context hierarchy [SPR-7835]","**[Eliran Bivas](https://jira.spring.io/secure/ViewProfile.jspa?name=bivas)** opened **[SPR-7835](https://jira.spring.io/browse/SPR-7835?redirect=false)** and commented  Currently the definition of context hierarchy forces us to break the layering to support single path hierarchy. It would be a great addition to enable adding more than one parent context. maybe something like:  ```                            barContext             zooContext             gooContext                ```  The search should change mostly in AbstractApplicationContext to search (iterate) over the parent contexts till finding a matching bean.   ---  **Affects:** 3.0.3","closed","type: enhancement,","spring-projects-issues","2010-12-22T09:09:52Z","2018-12-26T17:27:52Z"
"","12132","AbstractXmlStreamReader getAttributeValue(String, String) does not handle null namespaceURI properly [SPR-7474]","**[Eduard Papa](https://jira.spring.io/secure/ViewProfile.jspa?name=edspace)** opened **[SPR-7474](https://jira.spring.io/browse/SPR-7474?redirect=false)** and commented  According to the javadoc for XMLStreamReader, when a null namespaceURI is passed to getAttributeValue(String, String), the method should return the attribute value without matching the namespace URI.  Javadoc: http://download-llnw.oracle.com/javase/6/docs/api/javax/xml/stream/XMLStreamReader.html#getAttributeValue%28java.lang.String,%20java.lang.String%29  AbstractXmlStreamReader is not handling that condition correctly and tries to match the attribute's namespace with null:  ``` if (name.getNamespaceURI().equals(namespaceURI) && name.getLocalPart().equals(localName)) {    return getAttributeValue( i ) ; } return null; ```  This results in getAttributeValue returning null whenever the namespaceURI parameter is null.  The fix would be to change the code above as follows:  ``` if (*(namespaceURI == null || name.getNamespaceURI().equals(namespaceURI))* && name.getLocalPart().equals(localName)) {    return getAttributeValue( i ) ; } return null; ```  Please note that this problem exists in two classes: org.springframework.util.xml.AbstractXmlStreamReader in Spring-Core 3.0.3 org.springframework.xml.stream.AbstractXmlStreamReader in Spring-Xml 1.5.9   ---  **Affects:** 3.0.3  **Attachments:** - [XStreamMarshaller7474.java](https://jira.spring.io/secure/attachment/17012/XStreamMarshaller7474.java) (_1.75 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/061b2c91a0bc979e722aeb6ed02060e9c8744f44","closed","in: core,","spring-projects-issues","2010-08-18T12:14:23Z","2012-06-19T03:44:18Z"
"","11904","JavaMailSenderImpl should report failedMessages in the event of a network error [SPR-7245]","**[Edd Grant](https://jira.spring.io/secure/ViewProfile.jspa?name=eddgrant)** opened **[SPR-7245](https://jira.spring.io/browse/SPR-7245?redirect=false)** and commented  When sending email in JavaMailSenderImpl, in the event that there are any failed messages the doSend() method includes a Map in the raised MailSendException. This is particularly useful as it allows the caller to identify exactly which emails have failed taking the appropriate action only for those emails.  However if a network problem occurs part way through a send (let's say the socket is closed abnormally) then the MailSendException that is thrown only contains the exception (in this case a SocketException) which has caused the failure.  It would be very useful if the messages which were not sent could be added to the failedMessages Map of the thrown MailSendException along with the causing exception. This would allow the caller to take the appropriate action (which in the case of a network failure might be a delayed retry) for only those messages which were underlivered.  Cheers,  Edd   ---  **Affects:** 2.5.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/433b4eff8f96f6f2de274b050d658dd632b70810","closed","type: enhancement,","spring-projects-issues","2010-05-30T03:00:24Z","2012-06-19T03:42:51Z"
"","12648","Cache abstraction: Annotation should be on the method parameter [SPR-7993]","**[Eberhard Wolff](https://jira.spring.io/secure/ViewProfile.jspa?name=eberhardwolff)** opened **[SPR-7993](https://jira.spring.io/browse/SPR-7993?redirect=false)** and commented  I saw this sample:  `@Cacheable`(value=""book"", key=""isbn.rawNumber"") public Book findBook(ISBN isbn, boolean checkWarehouse, boolean includeUsed)  IMHO this can be improved. The key rawnumber should actually go to the parameter like this:  `@Cacheable`(""book"") public Book findBook(`@CacheKey` ISBN isbn, boolean checkWarehouse, boolean includeUsed)  or  `@Cacheable`(""book"") public Book findBook(`@CacheKey`(key=""rawnumber"" ISBN isbn, boolean checkWarehouse, boolean includeUsed)   ---  **Affects:** 3.1 M1  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2011-02-23T10:35:10Z","2019-01-11T16:18:03Z"
"","12533","First-class Scala support in Spring [SPR-7876]","**[Eberhard Wolff](https://jira.spring.io/secure/ViewProfile.jspa?name=eberhardwolff)** opened **[SPR-7876](https://jira.spring.io/browse/SPR-7876?redirect=false)** and commented  Scala is becoming more popular. It handles some issues Spring solver on the language level (i.e. resource management or its AOP-like features). It would therefore be worth investigating what ""Spring for Scala"" could look like - Maybe a reimplementation, maybe specific usage patterns, maybe just a sample application?   ---  37 votes, 36 watchers","closed","has: votes-jira,","spring-projects-issues","2011-01-12T08:03:10Z","2019-01-11T15:22:27Z"
"","12361","jUnit 4 and @Rule execution order [SPR-7705]","**[Dries Schulten](https://jira.spring.io/secure/ViewProfile.jspa?name=schulten)** opened **[SPR-7705](https://jira.spring.io/browse/SPR-7705?redirect=false)** and commented  When using Spring's SpringJUnit4ClassRunner to run unit-tests (the default runner for Spring's test base-classes) there is a execution order difference compared to default JUnit 4.  In the normal JUnit test runner (BlockJUnit4ClassRunner) it executes any `@Rule`'s before running the `@Before` methods in a (base-)class. Spring's test runner first executes any `@Before` annotated methods before processing the `@Rule`'s.  For example this causes a TestName JUnit rule (used to get the name of the currently executing test method) to be null in a `@Before` method.  The current SpringJUnit4ClassRunner fails on JUnit's own test suite because of this.  Attached is a patch with a fix (changes order of `@Rule` execution).  ---  **Affects:** 3.0.5  **Attachments:** - [runner.diff](https://jira.spring.io/secure/attachment/17305/runner.diff) (_1.04 kB_)  **Issue Links:** - #13870 JUnit `@Rule` executes outside of transaction when using the TransactionalTestExecutionListener  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b109a07fd99262204605b560bdba036c95eb093b  0 votes, 5 watchers","closed","type: bug,","spring-projects-issues","2010-11-01T11:49:09Z","2019-01-13T07:12:30Z"
"","12241","URI/URL Related Improvement Suggestions for RequestMapping in Spring MVC [SPR-7585]","**[Doug Gschwind](https://jira.spring.io/secure/ViewProfile.jspa?name=dgschwind)** opened **[SPR-7585](https://jira.spring.io/browse/SPR-7585?redirect=false)** and commented  The RequestMapping annotation does a great job of helping the reader of a Spring MVC Controller understand which method(s) on that Controller will be invoked given a URI such as ""/account"", the HTTP method (e.g. GET or POST), as well as given the presence/absence of certain identified HTTP request parameters.  I believe this implementation suffers from the following though, and hence could be improved to address these concerns :  1) These URIs embedded in a Spring MVC Controller are the source of Don't Repeat Yourself violations since that same URI has to be repeated elsewhere in say a JSP that has a hyperlink or a button that intends to invoke a given method on a given type of Controller when the hyperlink or button is clicked upon. 2) Spring MVC does not appear to have a facility to be able to generate a URL in say a JSP, that intends to invoke a given method on a given type of Controller. This is closely related to the first item. 3) By having these URIs sprinkled throughout your Spring MVC Controller classes, you have a little bit of research to do if you plan to introduce a new Controller that should have a distinct URI that it responds to. A text search through the source files would solve that problem, but that is slow and error prone. I understand the Spring MVC plugin for Eclipse has some support for this, but once again requires the human eye to review all the existing URIs to determine if there exists a collision or partial URI match of some sort.  I have tried to solve one and two by placing information in the Spring MVC descriptor, but that involves interrogating the ApplicationContext, and of course, my own custom code. I would like the framework to provide this support for me, so that I have to specify a URI for a Controller and Method, once and only once. If that were possible, I could make a URI change in one place, and the app would continue to run fine (assuming that change introduced no [partial] collisions) without any further effort.  Thank you,  Doug Gschwind  ---  **Affects:** 3.0 GA  **Issue Links:** - #10449 Allow links to `@Controller` methods from views without hardcoding URLs (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2010-09-21T22:09:54Z","2019-01-13T07:12:55Z"
"","11888","Add a shortcut for specifying the application context root in logical view name in a Controller. [SPR-7229]","**[Donny A. Wijaya](https://jira.spring.io/secure/ViewProfile.jspa?name=fenrir)** opened **[SPR-7229](https://jira.spring.io/browse/SPR-7229?redirect=false)** and commented  ---  **Affects:** 3.0.2  **Issue Links:** - #9424 Add additional redirect prefixes to allow for more control over redirect behavior (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2010-05-21T02:32:29Z","2019-01-11T13:22:35Z"
"","12743","TypeMismatchException thrown by business code cause 400 (Bad Request) [SPR-8088]","**[dongkuo ma](https://jira.spring.io/secure/ViewProfile.jspa?name=peon)** opened **[SPR-8088](https://jira.spring.io/browse/SPR-8088?redirect=false)** and commented  if a HandlerExceptionResolver or ExceptionHandler dosen't exist,TypeMismatchException thrown by business code (eg. JDBCTemplate.query(String sql,BeanPropertyMapper mapper)) will cause 400 without any log message above the Debug level. Is it be better use a subclass of TypeMismatchException for binding errors.   ---  **Affects:** 3.0.4","closed","status: invalid,","spring-projects-issues","2011-03-27T08:06:25Z","2019-01-13T18:20:27Z"
"","12371","""Dynamic"" spelled ""Dymaic"" typo section 1.3 [SPR-7715]","**[Don Mitchell](https://jira.spring.io/secure/ViewProfile.jspa?name=dhmitchell23@gmail.com)** opened **[SPR-7715](https://jira.spring.io/browse/SPR-7715?redirect=false)** and commented  On http://static.springsource.org/spring/docs/3.0.5.RELEASE/spring-framework-reference/html/overview.html#overview-usagescenarios, first figure (""Typical full-fledged Spring web application""), 3rd box on top says ""Dymaic binding"" which I believe should be ""Dynamic binding""  ---  **Affects:** 3.0.5  **Issue Links:** - #11137 Typo in usage scenario diagram (_**""supersedes""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b5baa69f5d4bc4cf761eb118a0e629e19f6d3914","closed","type: bug,","spring-projects-issues","2010-11-03T09:35:44Z","2019-01-11T15:30:03Z"
"","12600","ModelAndView is not valid return type for @RequestMapping methods [SPR-7945]","**[Don Brinker](https://jira.spring.io/secure/ViewProfile.jspa?name=dbrinker)** opened **[SPR-7945](https://jira.spring.io/browse/SPR-7945?redirect=false)** and commented  This has come up repeatedly on the forums.  When using Spring MVC and the AnnotationMethodHandlerAdapter, a ModelAndView return type is not being detected correctly.  Instead, the adapter seems to just be using the single attribute convention and adding the MAV to the model.  Seems to me the logical behavior would be to override any predefined MAV with one that's returned.  If this behavior isn't desired, then something a bit more obvious (throw an exception, log a warning, etc.) would be much better.   --- No further details from [SPR-7945](https://jira.spring.io/browse/SPR-7945?redirect=false)","closed","in: web,","spring-projects-issues","2011-02-07T08:32:16Z","2019-01-11T16:15:58Z"
"","12582","Add support for HiddenHttpMethodFilter to spring.ftl [SPR-7927]","**[Don Brinker](https://jira.spring.io/secure/ViewProfile.jspa?name=dbrinker)** opened **[SPR-7927](https://jira.spring.io/browse/SPR-7927?redirect=false)** and commented  In the JSP form tags, the form tag automatically adds a ""_method"" hidden parameter to support using HTTP PUT and DELETE (when used with the HiddenHttpMethodFilter).  As far as I can tell, there's nothing in spring.ftl to support this - we can use the filter, but it requires us to define the form by hand.  It would simplify things if we had a similar spring.form macro we could use.   --- No further details from [SPR-7927](https://jira.spring.io/browse/SPR-7927?redirect=false)","closed","type: enhancement,","spring-projects-issues","2011-01-31T15:42:00Z","2018-12-28T11:29:50Z"
"","11950","'s checks for JSR-303 and JAXB2 fail in an OSGi environment [SPR-7291]","**[Dmitry Sklyut](https://jira.spring.io/secure/ViewProfile.jspa?name=dsklyut)** opened **[SPR-7291](https://jira.spring.io/browse/SPR-7291?redirect=false)** and commented  AnnotationDrivenBeanDefinitionParser uses static fields to store result of presence check for jackson, rome, jsr303 and jaxb.  Consider changing that approach to either use non-static fields or running the check when needed.  Behavior of statics will be unpredictable in OSGi environment.  Also consider using classloader of bean factory vs. classloader that loaded the AnnotationDrivenBeanDefinitionParser.   ---  **Affects:** 3.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/89fadb987c3c4effeb6d0346e8b145336290f8ae","closed","type: bug,","spring-projects-issues","2010-06-16T02:38:41Z","2012-06-19T03:43:50Z"
"","12070","JaxWsPortProxyFactoryBean should autodetect properties from @WebService annotation [SPR-7412]","**[Dmitry Katsubo](https://jira.spring.io/secure/ViewProfile.jspa?name=dma_k)** opened **[SPR-7412](https://jira.spring.io/browse/SPR-7412?redirect=false)** and commented  There is a possibility to initialize `wsdlDocumentUrl`, `namespaceUri` and `serviceName` properties of `org.springframework.remoting.jaxws.LocalJaxWsServiceFactory` from `@WebService` annotation (if they are defined) that is present for `serviceInterface`.   ---  **Affects:** 2.5.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/af0fac90999ca7bc9e67f297cec0c9c938391a57  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2010-08-01T08:44:14Z","2012-06-19T03:43:00Z"
"","12390","Extend 'task' namespace so that 'scheduled' support 'arguments' property [SPR-7734]","**[Dmitry Drozdov](https://jira.spring.io/secure/ViewProfile.jspa?name=diman)** opened **[SPR-7734](https://jira.spring.io/browse/SPR-7734?redirect=false)** and commented  The 'arguments' property should be passed to MethodInvokingRunnable to make it possible to pass arguments to task method.   ---  1 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2010-11-10T07:40:57Z","2018-12-28T10:45:39Z"
"","12122","Solution for AopProxy indirection problems (e.g. selfreferential method calling) [SPR-7464]","**[Dirk Scheffler](https://jira.spring.io/secure/ViewProfile.jspa?name=iterator)** opened **[SPR-7464](https://jira.spring.io/browse/SPR-7464?redirect=false)** and commented  As discussed elsewhere the Spring AOP approach has some serious limitations. I want to list up the core issues here:  1. Aspects are not executed when methods are called via a this reference. 2. When proxying with CGLIB (which is a good idea) all fields of the target object are kept double in memory because the proxy carries them along without using them 3. Referentiation in the bean factory must be done via a ProxyFactoryBean which is intrusive and not really IOC looking  ---  I wrote a POC that solves all three issues and want you guys to take a look at the approach. Especially Jürgen Höller is asked to take a look at it. Since it is only a POC it uses protected API and is placed in the package org.springframework.aop.framework to do so. Another disadvantage is the need for extra sublcasses for any specific ProxyFactoryBeans (like TransactionProxyFactoryBean). The POC shows that is it actually easy doable but would need some support by Jürgen to be really integrated well.  The general approach is creating the actual bean by the MoltenProxyFactoryBean with help of the AopInstantiator (InstantiationAwareBeanPostProcessor). This along with the use of a new AopProxy implementation named Cglib2MoltenAopProxy which calls MethodProxy.invokeSuper() instead of MethodProxy.invoke() makes the thing complete.  I attached a zipped eclipse project named MoltenAopProxy to the issue. It fully demonstrates the solution via the main class AopTest.  Please take a look and comment with questions and critics  ---  **Reference URL:** http://forum.springsource.org/showthread.php?p=313105#post313105  **Attachments:** - [MoltenAopProxy.zip](https://jira.spring.io/secure/attachment/16997/MoltenAopProxy.zip) (_2.84 MB_)","closed","type: enhancement,","spring-projects-issues","2010-08-14T09:16:36Z","2019-01-13T21:45:09Z"
"","12738","HttpInvokerServiceExporter in combination with autowire autodetect [SPR-8083]","**[Dirk Maucher](https://jira.spring.io/secure/ViewProfile.jspa?name=dm)** opened **[SPR-8083](https://jira.spring.io/browse/SPR-8083?redirect=false)** and commented  During the upgrade from spring 2.5.5 to spring 3.0.5.RELEASE we encountered the following problem - it occured with every version after 2.5.5:  We are using org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter and the spring configuration file where the exporter beans are defined uses default-autowire=""autodetect"". This causes that every bean will be used as interceptor because of ""public void setInterceptors(Object[] interceptors) {"" within the RemoteExporter. Why Object[] is used? This problem should be solved or at least be detected. A workaround for us is to separate the HttpInvokerServiceExporter beans into a own spring config file without the default-autowire argmuent. This works but I think it should be fixed by spring that autowire can be used again for all the exporters.   ---  **Affects:** 2.0.9, 2.5.6, 3.0 M1, 3.0 M2, 3.0 M3, 3.0 M4, 3.0 RC1, 3.0 RC2, 3.0 RC3, 3.0 GA, 3.0.1, 3.0.2, 3.0.3, 3.0.4, 3.0.5, 3.1 M1","closed","status: declined,","spring-projects-issues","2011-03-24T05:20:33Z","2019-01-12T16:25:53Z"
"","12640","Add support for the HTTP PATCH method [SPR-7985]","**[Dirk Lachowski](https://jira.spring.io/secure/ViewProfile.jspa?name=lacho)** opened **[SPR-7985](https://jira.spring.io/browse/SPR-7985?redirect=false)** and commented  As of March 2010 the http-verb PATCH has become an official method (see http://tools.ietf.org/html/rfc5789 ). It would be beneficial for REST-based services to be able to use this method.  ---  **Affects:** 3.0.5  **Issue Links:** - #9476 Allow  DispatcherServlet/ServletWrappingController to work with the extended WebDAV methods  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4623568bce4b95f4016204cb23a9f9e723c2f6dc, https://github.com/spring-projects/spring-framework/commit/a0747458e7e23bf53620caf26f5bb3e2b17bf963, https://github.com/spring-projects/spring-framework/commit/f26534700a6646a6a6cf8debcffe8f108a7c9d9e  5 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2011-02-22T02:31:46Z","2019-01-11T16:19:17Z"
"","12335","@Transactional with qualifier can't find PlatformTransactionManager defined in parent context [SPR-7679]","**[Derar Bakr](https://jira.spring.io/secure/ViewProfile.jspa?name=dbakr)** opened **[SPR-7679](https://jira.spring.io/browse/SPR-7679?redirect=false)** and commented  When I specify qualifier for `@Transactional` annotation and the specified PlatformTransactionManager is defined in parent context, the exception is thrown like following:  ``` java.lang.IllegalStateException: No matching PlatformTransactionManager bean found for qualifier 'transactionManagerExt' - neither qualifier match nor bean name match! 	at org.springframework.transaction.interceptor.TransactionAspectUtils.getTransactionManager(TransactionAspectUtils.java:91) 	at org.springframework.transaction.interceptor.TransactionAspectUtils.getTransactionManager(TransactionAspectUtils.java:53) 	at org.springframework.transaction.interceptor.TransactionAspectSupport.determineTransactionManager(TransactionAspectSupport.java:245) 	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:100) 	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172) 	at org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor.intercept(Cglib2AopProxy.java:621) ```  For example, if the autowired bean with `@Transactional`-marked method is being parsed in servlet-level context, but `transactionManager` is specified in the global web-application context, defined by `contextConfigLocation` param in web.xml.  So actually Spring does not take in account here parent contexts. Investigating the code I have found the class `TransactionAspectUtils` with the following method `isQualifierMatch()` which uses `bf.containsBeanDefinition` method which of course is not parent-aware!  My suggestion is to change this method call either to `bf.containsBean` or to implement recursive bean searching through contexts hierarchy.   ---  **Affects:** 3.0.5  **Attachments:** - [fix.patch](https://jira.spring.io/secure/attachment/17363/fix.patch) (_7.46 kB_) - [mylyn-context.zip](https://jira.spring.io/secure/attachment/17362/mylyn-context.zip) (_1.55 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0f75cebdff44791c85a62e422d998afe536da1e5, https://github.com/spring-projects/spring-framework/commit/e298c202af1662d774622a7beee567ef247cc042  **Backported to:** [3.0.7](https://github.com/spring-projects/spring-framework/milestone/74?closed=1)  6 votes, 9 watchers","closed","type: bug,","spring-projects-issues","2010-10-25T09:27:17Z","2013-07-09T07:24:23Z"
"","12168","DefaultMessageListenerContainer may hang on shutdown [SPR-7511]","**[Dennis Homann](https://jira.spring.io/secure/ViewProfile.jspa?name=dhomann)** opened **[SPR-7511](https://jira.spring.io/browse/SPR-7511?redirect=false)** and commented  DefaultMessageListenerContainer does not reliably manage its activeInvokerCount, which may prevent it from shutting down. Instead, it will wait indefinitely in  ``` Thread-0@6084, prio=5, in group 'main', status: 'WAIT' 	  at java.lang.Object.wait(Object.java:-1) 	  at java.lang.Object.wait(Object.java:485) 	  at org.springframework.jms.listener.DefaultMessageListenerContainer.doShutdown(DefaultMessageListenerContainer.java:489) 	  at org.springframework.jms.listener.AbstractJmsListeningContainer.shutdown(AbstractJmsListeningContainer.java:211) 	  at org.springframework.jms.listener.AbstractJmsListeningContainer.destroy(AbstractJmsListeningContainer.java:149) ```  In org.springframework.jms.listener.DefaultMessageListenerContainer.AsyncMessageListenerInvoker#run, #decreateActiveInvokerCount will never be called, if an exception is thrown from within the catch(Throwable ex) block, lines 886-908.  In the case at hand, a NPE is caused by https://jira.springframework.org/browse/SPR-5470, which has been fixed in 3.0, but not in 2.5.x. Other runtime exceptions are imaginable as well. This issue is fairly reproducible with an embedded ActiveMQ broker which is shut down at the same time as the listener (may cause JMSExceptions in the listener). To fix this issue, I suggest to use a finally block in order to decrement the active invoker count, and perform other clean up as necessary.   ---  **Affects:** 2.5.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d7e0776148fd1e378ba81f2ef60b95a0d8cab1a8","closed","type: bug,","spring-projects-issues","2010-08-31T05:33:44Z","2012-06-19T03:44:02Z"
"","12494","SPR-4876  [Performance] CachedIntrospectionResults initialization slow down weblogic. [SPR-7838]","**[David.Turing](https://jira.spring.io/secure/ViewProfile.jspa?name=david.turing)** opened **[SPR-7838](https://jira.spring.io/browse/SPR-7838?redirect=false)** and commented  I have a key customer that widely use Spring(they do some repackage by themself). Spring version is : 1.2.x JDK version is : 1.4.2_15, and now, they are suffering from issue describe in #9552.  From the threaddump, we see lots of thread are stucked as below: ""ExecuteThread: '7' for queue: 'weblogic.kernel.Default'"" id=16 idx=0x54 tid=24953 prio=5 alive, in native, blocked, daemon - Blocked trying to get lock: java/lang/Class@0x2e494da0[fat lock]   at jrockit/vm/Threads.waitForUnblockSignal()V(Native Method)   at jrockit/vm/Locks.fatLockBlockOrSpin(Locks.java:1630)   at jrockit/vm/Locks.lockFat(Locks.java:1731)   at jrockit/vm/Locks.monitorEnterSecondStage(Locks.java:1277)   at jrockit/vm/Locks.monitorEnter(Locks.java:2389)   at java/beans/Introspector.findExplicitBeanInfo(Introspector.java:404)   at java/beans/Introspector.\(Introspector.java:355)   at java/beans/Introspector.getBeanInfo(Introspector.java:157)   at org/springframework/beans/CachedIntrospectionResults.\(CachedIntrospectionResults.java:137)   at org/springframework/beans/CachedIntrospectionResults.forClass(CachedIntrospectionResults.java:78)   at org/springframework/beans/BeanWrapperImpl.setWrappedInstance(BeanWrapperImpl.java:190)   at org/springframework/beans/BeanWrapperImpl.\(BeanWrapperImpl.java:168)   .....  And we see another thread block them as below(note that unlocked means a Biased Lock Strategy:  ""ExecuteThread: '12' for queue: 'weblogic.kernel.Default'"" id=21 idx=0x68 tid=24958 prio=5 alive, in native, blocked, daemon - Blocked trying to get lock: sun/misc/Launcher$AppClassLoader@0x2efd9520[unlocked]   at jrockit/vm/Threads.waitForUnblockSignal()V(Native Method)   at jrockit/vm/Locks.fatLockBlockOrSpin(Locks.java:1630)   at jrockit/vm/Locks.lockFat(Locks.java:1731)   at jrockit/vm/Locks.monitorEnterSecondStage(Locks.java:1277)   at jrockit/vm/Locks.monitorEnter(Locks.java:2389)   at sun/misc/Launcher$AppClassLoader.loadClass(Launcher.java:260)   at java/lang/ClassLoader.loadClass(ClassLoader.java:282)   ^-- Holding lock: weblogic/utils/classloaders/GenericClassLoader@0x23314a58[thin lock]   at java/lang/ClassLoader.loadClass(ClassLoader.java:282)   ^-- Holding lock: weblogic/utils/classloaders/GenericClassLoader@0x2edfabb0[thin lock]   at java/lang/ClassLoader.loadClass(ClassLoader.java:282)   ^-- Holding lock: weblogic/utils/classloaders/GenericClassLoader@0x2e4e1428[thin lock]   at java/lang/ClassLoader.loadClass(ClassLoader.java:235)   at weblogic/utils/classloaders/GenericClassLoader.loadClass(GenericClassLoader.java:224)   at java/beans/Introspector.instantiate(Introspector.java:1455)   at java/beans/Introspector.findExplicitBeanInfo(Introspector.java:406)   ^-- Holding lock: java/lang/Class@0x2e494da0[fat lock]   at java/beans/Introspector.\(Introspector.java:355)   at java/beans/Introspector.getBeanInfo(Introspector.java:157)   at org/springframework/beans/CachedIntrospectionResults.\(CachedIntrospectionResults.java:137)   at org/springframework/beans/CachedIntrospectionResults.forClass(CachedIntrospectionResults.java:78)   at org/springframework/beans/BeanWrapperImpl.setWrappedInstance(BeanWrapperImpl.java:190)   at org/springframework/beans/BeanWrapperImpl.\(BeanWrapperImpl.java:168)  Yes, we guess we are hit the #9552. CachedIntrospectionResults initialization make weblogic server slow down and sometimes crash, depend on how much threads are running into ClassLoader.loadClass.  Most often, we had to throttle the threads number that running into this case.  We hope that juergen could provide a fix for the customer, both on Spring 1.2.9 and Spring 2.5.5, in addtion to the Spring 3.0, because the latter is not yet certified on WebLogic 11g container.(I will ask michael.chen for advice, later).  Thanks and Regards  David.Turing Oracle Fusion Middleware Department Advance Customer Support  ---  **Affects:** 1.2 final, 2.5.4  This issue is a sub-task of #9552","closed","in: core,","spring-projects-issues","2010-12-27T07:27:01Z","2019-01-11T15:17:13Z"
"","12087","PropertyPlaceHolderConfigurer valueSeparator is not a configurable property and breaks compatibility with older configuration [SPR-7429]","**[David Ward](https://jira.spring.io/secure/ViewProfile.jspa?name=dward_alfresco)** opened **[SPR-7429](https://jira.spring.io/browse/SPR-7429?redirect=false)** and commented  Despite what it says in #9462 valueSeparator is NOT a configurable property and therefore we can't disable the new behaviour which attempts to process colon characters within unrecognized placeholders.  In Alfresco we have a bean definition like this, containing a value that looks like a placeholder and contains a colon character  \ \ \script\ \ \ \ \ \ \script-ref\ \ \${selectSingleNode('workspace://SpacesStore', 'lucene', 'PATH:""/app:company_home/app:dictionary/app:scripts/cm:checkReviewPeriodAndSendEmail.js""')}\ \ \ \  In order to support this, I would like to have configured this on my PropertyPlaceHolderConfigurer               true                          But unfortunately I can't, because there's no setter method for valueSeparator.  ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9ef47b82a5c9bdb1067e0280f8aef8ba4713fab3","closed","in: core,","spring-projects-issues","2010-08-06T09:22:18Z","2019-01-11T14:07:59Z"
"","12671","RestTemplate - support response mapping to entity with potentially empty response body. [SPR-8016]","**[David Victor](https://jira.spring.io/secure/ViewProfile.jspa?name=dvb123)** opened **[SPR-8016](https://jira.spring.io/browse/SPR-8016?redirect=false)*** and commented  I am working with an API which returns an empty response body on http status 200 (OK) & a body which is populated on http status 400 (Bad Request).  When using RestTemplate.getForEntity() this is fine for the case where the body is populated, however I get an exception for the 'null body' case.  My understanding is one should provide a class implementing the ResponseBody interface & make the call via the execute() method on the RestTemplate.  This task is a request to consider that the use case here is common & whether Spring should offer something out of the box for this situation.  Also See: http://stackoverflow.com/questions/3322381/spring-resttemplate-behavior-when-handling-responses-with-a-status-of-no-content/3648447#3648447  ---  **Affects:** 3.1 M1  **Issue Links:** - #12566 Better handling of 204 No Content in RestTemplate (_**""duplicates""**_) - #17560 Resttemplate with HttpComponentsClientHttpRequestFactory will make HttpMessageConverterExtractor.extractData return null if the header contains content-encoding gzip, the connection is closed and the response isn't chunked (_**""is duplicated by""**_) - #17309 RestTemplate cannot handle GZIP response since 4.1.3 (_**""is duplicated by""**_)  9 votes, 19 watchers","closed","type: enhancement,","spring-projects-issues","2011-03-02T09:12:55Z","2021-02-01T19:51:07Z"
"","12578","MessageTag hard to extend to add new features [SPR-7923]","**[David Sheldon](https://jira.spring.io/secure/ViewProfile.jspa?name=davidsheldon)** opened **[SPR-7923](https://jira.spring.io/browse/SPR-7923?redirect=false)** and commented  I've been trying to extend MessageTag to change message resolution strategy - in this case to allow an optional Locale parameter to override the locale used.  In some ways the class seems to have been designed for extension, but in other ways it isn't.  I feel like resolveMessage() should call a protected getLocale method rather than getRequestContext().getLocale(). Alternatively, we could make it easier to override resolveMessage by passing the code, message and text in. At the moment, I either override getMessageSource to return a message source that ignores the locale parameter, copy and paste resolveMessage and wrap the setters/use reflection to access the fields, or just copy and paste the whole class.   ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2011-01-31T02:03:24Z","2012-06-19T09:36:32Z"
"","12729","There are no getters on the methods added by ServletWrappingController [SPR-8074]","**[David Parks](https://jira.spring.io/secure/ViewProfile.jspa?name=davidparks21)** opened **[SPR-8074](https://jira.spring.io/browse/SPR-8074?redirect=false)** and commented  The 4 setter methods in ServletWrappingController don't have corresponding getters.  Extending classes may need these methods as is the case for me - requiring that I override the setter and store the variable in my class as well as ServletWrappingController.  If there's a reason for not adding public getters, at least including them as protected will suit this use case.   ---  **Affects:** 3.0.5","closed","type: enhancement,","spring-projects-issues","2011-03-22T06:31:12Z","2018-12-28T10:08:26Z"
"","12716","The appendix documentation has no reference of the new  element authentication-details-source-ref [SPR-8061]","**[David Parks](https://jira.spring.io/secure/ViewProfile.jspa?name=davidparks21)** opened **[SPR-8061](https://jira.spring.io/browse/SPR-8061?redirect=false)** and commented  The appendix documentation at section B.1.6 for \ doesn't mention the new element: authentication-details-source-ref  Minor update to the documentation is recommended before release to cover this.   ---  **Affects:** 3.1 M1","closed","status: declined,","spring-projects-issues","2011-03-17T03:08:25Z","2015-09-22T18:20:31Z"
"","12714","@RequestMapping in controllers fails to identify correct method while multiple params={""paramA=xxx"",""paramB=yyy""} [SPR-8059]","**[David Parks](https://jira.spring.io/secure/ViewProfile.jspa?name=davidparks21)** opened **[SPR-8059](https://jira.spring.io/browse/SPR-8059?redirect=false)** and commented  The test case given below shows a simple case where we have 2 parameters paramA and paramB.      * If we call the /paramtest url the paramtest() method is called.     * If we enter true for paramA, method aTrue() is called.     * However, when we enter true for both paramA and paramB the method bTrueNotA() is called.  But the 3rd `@RequestMapping` calls for A=True and B!=true. By my reconing when both parameters are true, aTrue() should be called.  This was also reproduced in another way by another use, see forum post for that test case (posted on stackoverflow.com)  `@RequestMapping`(""paramtest"") `@ResponseBody` public String paramtest(){ return  ""\\\\"" + ""\"" + ""paramA: \\"" + ""paramB: \\"" + ""\"" + ""\"" + ""\\"";        }  `@RequestMapping`(value=""paramtest"", params=""paramA=true"") `@ResponseBody` public String aTrue(){ return ""A=true""; }  `@RequestMapping`(value=""paramtest"", params={""paramB=true"", ""paramA!=true""}) `@ResponseBody` public String bTrueNotA(){ return ""B=True; A!=true""; }   ---  **Affects:** 3.0.5  **Reference URL:** http://forum.springsource.org/showthread.php?p=351199#post351199","closed","type: bug,","spring-projects-issues","2011-03-15T23:07:55Z","2012-06-19T03:39:47Z"
"","12439","Not possible to use Velocity Tools in both Views and in normal source (for email templates, etc) and use the same Tools instance [SPR-7783]","**[David Parks](https://jira.spring.io/secure/ViewProfile.jspa?name=davidparks21)** opened **[SPR-7783](https://jira.spring.io/browse/SPR-7783?redirect=false)** and commented  The class VelocityToolboxView creates an instance of the tools and always adds them to the context when the View is created.  However if you us EngineUtils or VelocityEngineFactoryBean to access the same instance of the VelocityEngine from inside code (for email templates and such) you have no option to have the same tools instance inserted into the context automatically.  Instead you either create a new Tools instance (there is no reason to have 2 instance of all Tools classes), or extend the spring classes to share the Tools instance properly, which is a rather ugly workaround since the global tools instance shouldn't be stored in the View classes, they should be stored with the EngineFactory and access from the View class so that other EngineUtils methods can do the same.  Recommended solution:      * Create a global Tools instance in the EngineFactory     * Access above tools instance from VelocityToolboxView rather than create the Tools locally     * Crete methods in VelocityEngineUtils to merge either with, or without Tools loaded into the context automatically    ---  **Affects:** 3.0.5","closed","status: invalid,","spring-projects-issues","2010-12-01T19:15:47Z","2019-01-12T05:31:16Z"
"","12497","PropertyPlaceholderConfigurer: Could not resolve placeholder  [SPR-7841]","**[David Mobley](https://jira.spring.io/secure/ViewProfile.jspa?name=david@mobley.com)** opened **[SPR-7841](https://jira.spring.io/browse/SPR-7841?redirect=false)*** and commented  given securityContext.xml file with the following (abbreviated) contents:  \ \ \ \ \ \ \8443\ \localhost\ \ \ \ \ \classpath:all-dev.properties\ \classpath:all-dev-pub.properties\ \classpath:all-global.properties\ \ \ \ ... \ \ \ \  as you can see I tell PropertyPlaceholderConfigurer to ignoreUnresolvablePlaceholders, and have defaults, and various locations (all of which valid, with ""all-global.properties"" containing overrides to the default values.) at Tomcat runtime i get the following....  ERROR main org.springframework.web.context.ContextLoader - Context initialization failed org.springframework.beans.factory.BeanDefinitionStoreException: Invalid bean definition with name 'serviceProperties' defined in ServletContext resource [/WEB-INF/securityContext.xml]: Could not resolve placeholder 'webapp.server' at org.springframework.beans.factory.config.PropertyPlaceholderConfigurer.processProperties(PropertyPlaceholderConfigurer.java:272)  why can't PropertyPlaceholderConfigurer resolve this variable? it's got a default and even if it didn't shouldn't it ignore it? from the Javadoc (and other google'd sources) this should work. i'm at a loss as to why it cannot find ""webapp.server"". thanks in advance for your assistance.  NOTE: this is my first ever use of Jira. I normally would not categorize this as a bug (i assume it's User Error!), but am unsure as to what category to specify. please forgive my ignorance. dhm    ---  **Affects:** 3.0 GA  **Attachments:** - [all-global.properties](https://jira.spring.io/secure/attachment/17483/all-global.properties) (_449 bytes_) - [monterey.log](https://jira.spring.io/secure/attachment/17482/monterey.log) (_3.04 kB_)","closed","status: invalid,","spring-projects-issues","2010-12-28T10:04:15Z","2019-01-12T05:31:14Z"
"","12560","MappingJacksonHttpMessageConverter default media type should include *+json [SPR-7905]","**[David Melia](https://jira.spring.io/secure/ViewProfile.jspa?name=mzz6wh)** opened **[SPR-7905](https://jira.spring.io/browse/SPR-7905?redirect=false)** and commented  Hi,  Currently in my REST service which supports both XML and JSON I am using the accept header so the same URL can provide different end points which will provide versioning.  So my accept header is of the format  ``` Accept=application/appname-v1+xml or Accept=application/appname-v1+json ```  which can route through the the v1 (version1) version of my REST method.  The above is fine for XML as AbstractXmlHttpMessageConverter (subclass of Jaxb2RootElementHttpMessageConverter) registers the media type  ``` new MediaType(""application"", ""*+xml"") ``` so this wildcard satisfies my accept header no problem.  However, for JSON, MappingJacksonHttpMessageConverter only registers ``` new MediaType(""application"", ""json"", DEFAULT_CHARSET) ``` which means I cannot use  out of the box :-(  Any chance we could have MappingJacksonHttpMessageConverter also registering ``` new MediaType(""application"", ""*+json"", DEFAULT_CHARSET) ```  This would result in a lot less configuration as I have to do the following in place of   ```                                                                                                                                                                                                                    	 ```  Thanks  ---  **Affects:** 3.0.5  **Issue Links:** - #14269 MediaType's include method does not check for generalization when using a format extension/suffix (_**""is duplicated by""**_) - #14440 ContentNegotiatingViewResolver does not support wildcards in contentType  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8270d82bda85f227780f03e6cdcac9ae721118ad, https://github.com/spring-projects/spring-framework/commit/e16c40359a1809a647d0adfc2d7cfffcfaa9963a, https://github.com/spring-projects/spring-framework/commit/4f114a657f71fd71b34509c686c5e8adce763c2d  4 votes, 8 watchers","closed","type: enhancement,","spring-projects-issues","2011-01-24T08:42:53Z","2019-01-11T16:13:33Z"
"","12754","LocaleEditor does not work with some locale strings [SPR-8099]","**[David Mas](https://jira.spring.io/secure/ViewProfile.jspa?name=dmas)** opened **[SPR-8099](https://jira.spring.io/browse/SPR-8099?redirect=false)** and commented  The org.springframework.beans.propertyeditors.LocaleEditor is not giving the expected locale for some input formats.  I have created a test case with all the possible calls to Locale constructor. Then, for each combination call the LocaleEditor with locale.toString(). The expected behaviour of the LocaleEditor would be to return the same testLocale as it received testLocale.toString(), but it does not.  The problem is with the StringUtils parseLocale method.  Attached the test case and a fix. On the fix, the separator can be both a space and a underscore because the LocaleEditor states ""Also accepts spaces as separators, as alternative to underscores""  ---  **Affects:** 3.0.5  **Attachments:** - [LocaleEditor.java](https://jira.spring.io/secure/attachment/17781/LocaleEditor.java) (_723 bytes_) - [LocaleEditorTest.java](https://jira.spring.io/secure/attachment/17782/LocaleEditorTest.java) (_2.43 kB_)  **Issue Links:** - #11228 StringUtils#parseLocaleString(String) does not work for empty locale - #12254 StringUtils#parseLocaleString(String) with Variant when no Country (_**""is superseded by""**_)  1 votes, 3 watchers","closed","in: web,","spring-projects-issues","2011-03-29T08:42:52Z","2019-01-12T16:49:03Z"
"","11998","Minor content issues and typos in Spring Reference Documentation [SPR-7339]","**[David M. Karr](https://jira.spring.io/secure/ViewProfile.jspa?name=dkarr)** opened **[SPR-7339](https://jira.spring.io/browse/SPR-7339?redirect=false)** and commented  First, some minor content issues based on my opinion, then the pure typos.  p. 187, bullet for ""Join point"".  This ends with a statement about join points in Spring AOP always representing a method execution.  This might be a good point to add something like ""AspectJ provides other options"".  This is talked about in other sections, but it might be worth mentioning it here.  p. 306, the use of the word ""tropes"" is correct, but obscure.  The vast majority of people reading this won't know that word.  p. 333, the statement ""Any DAO or repository need to access to a persistence resource, depending on the persistence technology used."" is messed up, but I don't know exactly what you meant to say.  p. 340.  In the ""CorporateEventDao"" example at the bottom of the page, I would have expected this to have a ""`@Repository`"" annotation.  p. 444, one paragraph ends with ""If they do not exist, Spring throws an Exception."".  I think a more specific exception class was intended to be cited here, instead of just ""Exception"".  It's in code font, so it's obviously referring to a specific class.  p. 473, the bullet ""path=""lastName*"" - displays all errors associated with the lastName field"" is confusing.  My impression was that just ""lastName"" would do this.  I don't know what ""lastName*"" would do.  p. 549 and the entire ""Exposing web services using XFire"" subsection of section 19.5: The XFire framework is obsolete.  It has been for more than 3 years now, and it even SAYS SO right on the front page of the XFire website, and that Apache CXF should be considered to be its replacement.  Apache CXF integrates very well with Spring, and is a very full implementation of various web services protocols and specifications.  p. 556, first paragraph of section 19.6.  This seems to imply that JMS support in Spring ""is pretty basic"" and is NOT transactional.  Chapter 21 pretty well refutes this, but this statement here seems to be misleading.  p. 561 has the statement ""... you can simply call the default constructor."" This is a common miswording. It would be better as ""... you can simply call the no-arguments constructor."".  p. 563, the ""HttpMessageConverter"" code sample. This has several minor violations of the common recommendations for method comments, in that the description should be in third person.  For instance, instead of ""Indicate whether the ..."" it should be ""Indicates whether the ..."".  In addition, in one of the comments, change ""... given type form ..."" to ""... given type from ..."".  p. 634, the phrase ""... without recourse to having to know Java."" is very odd. Perhaps it would be better as ""... without having to use Java.""  Concerning this last chapter 27, what is the point of it? This material is all repeated in other chapters, including the ""`@Required`"" annotation, which is the only annotation detailed in this chapter.  The following are pure typos or wordos:  p. 35, change ""defintions"" to ""definitions"" and change ""... can use of the ..."" to ""... can use the ..."".  p. 54, remove spurious footnote marker of ""2"" on paragraph beginning ""When using XML-based ..."".  p. 88, change ""... instead on angle-bracket ..."" to ""... instead of angle-bracket ..."" and change ""... using annotations on relevant ..."" to ""... using annotations on the relevant ..."".  p. 192, Note on ""Other pointcut types"".  Change ""... releases both to ..."" to ""... releases to ..."".  p. 214, change ""... may also be calling ..."" to ""... may also be called ..."".  p. 300, change ""The related The PlatformTransactionManager ..."" to ""The related PlatformTransactionManager ..."".  p. 304, change ""With EJB CMT, cannot ..."" to ""With EJB CMT, you cannot ..."".  p. 321, change ""... for each method that to which ..."" to ""... for each method for which ..."".  p. 325, change ""asepctj"" to ""aspectj"".  p. 345.  Change ""Any a custom ..."" to ""Any custom ..."".  p. 358, change ""StoredProcdedure"" to ""StoredProcedure"".  p. 365, change ""... query the returned a ..."" to ""... query that returned a ..."".  p. 370, change ""LobCreatorclass"" to ""LobCreator class"".  p. 371, change ""setBlobAsBinartStream"" to ""setBlobAsBinaryStream"" and change ""JdbcTempate"" to ""JdbcTemplate"".  p. 375, change ""... use the initialize-datasource tag ..."" to ""... use the initialize-database tag ..."".  p. 375, change ""... more control the creation and deletion of existing data the XML ..."" to ""... more control over the creation and deletion of existing data, the XML ..."" (over and comma).  p. 397, change ""instancebased"" to ""instance based"".  p. 398, change ""Refer to the section the section called ..."" to ""Refer to the section called ..."".  p. 429, change ""... you do have not debugging ..."" to ""... you do not have debugging ..."".  p. 433, change ""... object to access to the Servlet ..."" to ""... object to provide access to the Servlet ..."".  p. 447, change ""Context-Type"" to ""Content-Type"".  p. 453, the phrase ""normal annotated `@Controller`"" is highlighted blue, which I think is wrong.  p. 454, change ""... handling exception gives ..."" to ""... handling exceptions gives ..."".  p. 463, change ""... mainly cause by ..."" to ""... mainly caused by ..."".  p. 474, change ""... For each methods, ..."" to ""... For each method, ..."".  p. 477, change ""... two templating languages that can both be used ..."" to ""... two templating languages that can be used ..."".  p. 477, change ""... commons-collections.jar needs also to be available for Velocity."" to ""... commons-collections.jar is required for Velocity.""  p. 498, change ""MarhsallingView"" to ""MarshallingView"" in two places, and change ""marhsall"" to ""marshall"".  p. 546, change ""... for a service object much resembles the way you would do using Hessian ..."" to ""... for a service much resembles the way you would do the same using Hessian ..."".  p. 560, change ""unmarshall"" to ""unmarshal"".  p. 569, change ""... call unloadBeanFactory() and loadBeanFactory from ejbPassivate and ejbActivate ..."" to ""... call unloadBeanFactory() and loadBeanFactory() from ejbPassivate() and ejbActivate() ..."".  Also change ""... ContextJndiBeanFactoryLocator classes ..."" to ""... ContextJndiBeanFactoryLocator class ..."".  p. 577, change ""... constructor and connectionFactory / is ..."" to ""... constructor and connectionFactory is ..."". Also change ""... lets you send to a message ..."" to ""... lets you send a message ..."".  p. 578, change ""... popular implementations choices ..."" to ""... popular implementation choices ..."".  p. 579, change ""... Session / MessageProducer pair respectfully."" to ""... Session / MessageProducer pair respectively."".  p. 580, change ""... provides a similar contract the JMS ..."" to ""... provides a similar contract to the JMS ..."".  p. 597, change ""shouws"" to ""shows"".  p. 632, change ""... would be be images ..."" to ""... would be images ..."".  p. 633, change ""... The code in the previous examples explicitly has been creating the ..."" to ""... The code in the previous examples explicitly created the ..."". Also change ""... and Velocity becomes ..."" to ""... and Velocity it becomes ..."".  p. 647, change ""... allows to you invoke ..."" to ""... allows you to invoke ..."".  p. 653, change ""... no different to normal ..."" to ""... no different from normal ..."".  p. 667, change ""annoations"" to ""annotations"", ""embrassed"" to ""embraced"", ""thoughout"" to ""throughout"", and ""... other parts the ..."" to ""... other parts of the ..."".  ---  **Affects:** 3.0.3  **Issue Links:** - #12092 Remove XFire reference documentation - #12091 Remove Chapter 27 from reference documentation  1 votes, 0 watchers","closed","type: documentation,","spring-projects-issues","2010-06-30T02:56:57Z","2019-01-14T06:14:25Z"
"","12691","Unable to define a scripted bean as an inner bean of another bean [SPR-8036]","**[David Launen](https://jira.spring.io/secure/ViewProfile.jspa?name=dlaunen)** opened **[SPR-8036](https://jira.spring.io/browse/SPR-8036?redirect=false)** and commented  Currently using BeanShell, however I would assume that this would be the same issue for other scripting languages as they all appear to use the same method of construction.  All examples I have found show scripted beans being defined as an identified bean, I have not found any examples that use a scripted bean as an inner bean.  When attempting to define a scripted bean as an inner bean, a bean not found exception is thrown.  Workaround of course is to define the scripted bean as a standalone identified bean, however this is not ideal.  The following XML definition example will result in a bean not found exception for the inner bean ""lang:bsh XXXXX"":  \ \										 \ \ \ \ \ \ \	 \ \ \ \  ---  **Affects:** 2.5.6  **Issue Links:** - #16906 Add support for dynamic languages refreshable beans in `@Configuration` classes","closed","type: enhancement,","spring-projects-issues","2011-03-11T17:26:35Z","2019-01-13T07:10:48Z"
"","12683","Calling BeanDefinition.isAbstract() from within BeanDefinitionPostProcessor blows up the context [SPR-8028]","**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=davidkarlsen)** opened **[SPR-8028](https://jira.spring.io/browse/SPR-8028?redirect=false)** and commented  See comment 7 @ http://code.google.com/p/javamelody/issues/detail?id=90 and attached PostProcessor. It fails initializing saying NoSuchBeanDefinitionException, rather than throwing an IllegalStateException or the likes - this seems wrong.   ---  **Affects:** 3.0.5  **Attachments:** - [SpringDataSourceBeanPostProcessor.java](https://jira.spring.io/secure/attachment/17696/SpringDataSourceBeanPostProcessor.java) (_5.90 kB_)","closed","in: core,","spring-projects-issues","2011-03-08T13:16:46Z","2019-01-11T12:36:48Z"
"","12001","Be able to define tx:annotationdriven order attribute as a ref [SPR-7342]","**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=david@davidkarlsen.com)** opened **[SPR-7342](https://jira.spring.io/browse/SPR-7342?redirect=false)** and commented  It would be nice if the order attribute could refer to a value as a ref I have the aspect orders defined as constants on an interface  and would like to refer to it like this    ---  **Affects:** 3.0.3  **Issue Links:** - #15514 tx:annotation-driven and cache:annotation-driven should have order defined as a token  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/12c393eb6d9ef0b67741eb3ef281922596f78811","closed","type: enhancement,","spring-projects-issues","2010-07-01T06:40:14Z","2019-01-11T14:24:51Z"
"","12407","Building Spring fails with Ivy 2.2 [SPR-7751]","**[David Harrigan](https://jira.spring.io/secure/ViewProfile.jspa?name=dharrigan)** opened **[SPR-7751](https://jira.spring.io/browse/SPR-7751?redirect=false)** and commented  Hi,  It appears that attempting to build Spring (using head https://src.springsource.org/svn/spring-framework/trunk) fails if one is using Ivy 2.2:  ``` Caused by: java.lang.RuntimeException: impossible to define new type: class not found: org.springframework.aws.ivy.S3Resolver in [] nor Ivy classloader 	at org.apache.ivy.core.settings.IvySettings.classForName(IvySettings.java:652) 	at org.apache.ivy.core.settings.IvySettings.typeDef(IvySettings.java:636) 	at org.apache.ivy.core.settings.IvySettings.typeDef(IvySettings.java:632) 	at org.apache.ivy.core.settings.XmlSettingsParser.typedefStarted(XmlSettingsParser.java:513) 	at org.apache.ivy.core.settings.XmlSettingsParser.startElement(XmlSettingsParser.java:205) 	at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.startElement(AbstractSAXParser.java:501) 	at com.sun.org.apache.xerces.internal.parsers.AbstractXMLDocumentParser.emptyElement(AbstractXMLDocumentParser.java:179) 	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanStartElement(XMLDocumentFragmentScannerImpl.java:1343) 	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl$FragmentContentDriver.next(XMLDocumentFragmentScannerImpl.java:2755) 	at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:648) 	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:511) 	at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:808) 	at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:737) 	at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:119) 	at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.parse(AbstractSAXParser.java:1205) 	at com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser.parse(SAXParserImpl.java:522) 	at javax.xml.parsers.SAXParser.parse(SAXParser.java:395) 	at javax.xml.parsers.SAXParser.parse(SAXParser.java:277) 	at org.apache.ivy.core.settings.XmlSettingsParser.doParse(XmlSettingsParser.java:160) ```  Switching to Ivy 2.1 solves the problem. I had to go into my ~.ant/lib directory and remove ivy.jar. This is inconvenient for those wishing to continue to use the latest Ivy.  I'm building Ivy from source, so my version is:  ivy:cachepath] :: Ivy 2.2.x-local-20101111221216 - 20101111221216 :: http://ant.apache.org/ivy/ ::  the Ivy that ships with spring-build-support is:  [ivy:cachepath] :: Ivy 2.1.0 - 20090925235825 :: http://ant.apache.org/ivy/ ::]  ``` -=david=- ```    --- No further details from [SPR-7751](https://jira.spring.io/browse/SPR-7751?redirect=false)","closed","status: declined,","spring-projects-issues","2010-11-17T21:02:40Z","2014-02-07T11:19:06Z"
"","11953","Placeholder property: absent should be treated same as blank/empty [SPR-7294]","**[David Easley](https://jira.spring.io/secure/ViewProfile.jspa?name=easleydp)** opened **[SPR-7294](https://jira.spring.io/browse/SPR-7294?redirect=false)** and commented  Please see http://stackoverflow.com/questions/3055554/can-i-use-a-property-placeholder-with-spring-el, particularly my comment to skaffman's answer.  Long version:  In Spring 2, if a property was not present in the properties file the setter on the bean was not called and so the default value hard-coded in Bean was used. This provided a convenient means for having 'unadvertised' properties which are usually not present in a product's properties file but can be added only if some default behaviour needs to be overridden.  After upgrading to Spring 3, it seems the behaviour is different: If the property is not present in the properties file I get the following exception:  SEVERE: Exception sending context initialized event to listener instance of class org.springframework.web.context.ContextLoaderListener org.springframework.beans.factory.BeanDefinitionStoreException: Invalid bean definition with name 'annotationMapping' defined in class path resource [com/northgateis/pole/ws/applicationContext-ws.xml]: Could not resolve placeholder 'validateRequest' at org.springframework.beans.factory.config.PropertyPlaceholderConfigurer.processProperties(PropertyPlaceholderConfigurer.java:272) at org.springframework.beans.factory.config.PropertyResourceConfigurer.postProcessBeanFactory(PropertyResourceConfigurer.java:75) at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:640) at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:615) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:405) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:272)  Trying #{${validateRequest}?:true} (after reading #11868 and upgrading to Spring 3.0.3) only works if the property is blank. If the property is absent I get the same ""Could not resolve placeholder 'validateRequest'"" BeanDefinitionStoreException. It would be convenient if absent could be treated the same as blank/empty (which seems logical and reasonable).  ---  **Affects:** 3.0.3  **Issue Links:** - #11868 SpEL: Elvis operator throwing NPE in case of an empty base expression","closed","type: enhancement,","spring-projects-issues","2010-06-16T20:18:44Z","2019-01-11T14:11:12Z"
"","12391","file URL has wrong syntax in chapter 4 [SPR-7735]","**[David Balažic](https://jira.spring.io/secure/ViewProfile.jspa?name=xerces8)** opened **[SPR-7735](https://jira.spring.io/browse/SPR-7735?redirect=false)** and commented  http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/resources.html#resources-filesystemresource-caveats  The last two code examples: ctx.getResource(""file:/some/resource/path/myTemplate.txt""); new FileSystemXmlApplicationContext(""file:/conf/context.xml"");  use wrong URL syntax. The correct form would be: file:///some/resource/path/myTemplate.txt file:///conf/context.xml  (some software might accept the bad syntax, but documentation should not encourage such use)   ---  **Affects:** 3.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/09a6afb94c824bba2dd5636b436c2f8b72408a29","closed","type: documentation,","spring-projects-issues","2010-11-10T07:52:36Z","2014-10-01T03:11:49Z"
"","12381","ContextLoaderServlet is mentioned in doc, but does not exist [SPR-7725]","**[David Balažic](https://jira.spring.io/secure/ViewProfile.jspa?name=xerces8)** opened **[SPR-7725](https://jira.spring.io/browse/SPR-7725?redirect=false)** and commented  ContextLoaderServlet is mentioned in the docs* , but it is not in the API docs** nor in the spring-web-3.0.5.RELEASE.  * http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/beans.html   section 3.13.4 Convenient ApplicationContext instantiation for web applications  * http://static.springsource.org/spring/docs/3.0.x/javadoc-api/index.html   ---  **Affects:** 3.0.5  **Backported to:** [4.0.8](https://github.com/spring-projects/spring-framework/milestone/120?closed=1), [3.2.12](https://github.com/spring-projects/spring-framework/milestone/100?closed=1)","closed","type: documentation,","spring-projects-issues","2010-11-08T06:57:36Z","2014-10-01T03:11:52Z"
"","12380","Public email address used in example [SPR-7724]","**[David Balažic](https://jira.spring.io/secure/ViewProfile.jspa?name=xerces8)** opened **[SPR-7724](https://jira.spring.io/browse/SPR-7724?redirect=false)** and commented  http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/beans.html  At the end of section 3.13.2 ""Standard and Custom Events"" this is used as an example application context XML configuration: value=""spam@list.org""  list.org is a valid domain (homepage of GNU Mailman program).  I don't think it is good to use their email address as a coding example.   ---  **Affects:** 3.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1317b821b965161b63f32fa90a978485942f75dd","closed","type: documentation,","spring-projects-issues","2010-11-08T06:44:02Z","2012-06-19T03:39:31Z"
"","12347","ref doc chapter 2 refers to missing tutorials [SPR-7691]","**[David Balažic](https://jira.spring.io/secure/ViewProfile.jspa?name=xerces8)** opened **[SPR-7691](https://jira.spring.io/browse/SPR-7691?redirect=false)** and commented  At http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/new-in-3.html#new-in-3-new-tutorial  it says:  2.3 New articles and tutorials  There are many excellent articles and tutorials that show how to get started with Spring 3 features. Read them at the Spring Documentation page*.  * - http://www.springsource.org/documentation  That page does not even mention the word ""tutorial"".   ---  **Affects:** 3.0.5","closed","","spring-projects-issues","2010-10-27T08:38:32Z","2019-01-11T14:34:32Z"
"","12346","Update download link in ref doc section 1.3.1 [SPR-7690]","**[David Balažic](https://jira.spring.io/secure/ViewProfile.jspa?name=xerces8)** opened **[SPR-7690](https://jira.spring.io/browse/SPR-7690?redirect=false)** and commented  In ""1.3.1 Dependency Management and Naming Conventions"" there is a broken download link:  ""On the community download site http://www.springsource.org/downloads/community""   ---  **Reference URL:** http://forum.springsource.org/showthread.php?t=97267","closed","","spring-projects-issues","2010-10-27T08:30:08Z","2019-01-11T14:34:42Z"
"","12345","reference doc chapter 1: list order is bad [SPR-7689]","**[David Balažic](https://jira.spring.io/secure/ViewProfile.jspa?name=xerces8)** opened **[SPR-7689](https://jira.spring.io/browse/SPR-7689?redirect=false)** and commented  In this page*, the third paragraph says ""such as the simple declarative transaction management feature mentioned previously.""  But the declarative transaction management feature is mentioned only in the sixth (last) paragraph.  Putting the sixth before the third paragraph might fix this.  * - http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/overview.html#d0e315    ---  **Affects:** 3.0.5  **Reference URL:** http://forum.springsource.org/showthread.php?t=97267  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ea034aeb2e382c63ca65b2e2d8de1f51a434aa55","closed","type: documentation,","spring-projects-issues","2010-10-27T08:28:57Z","2014-10-01T03:11:44Z"
"","12855","Scheduled tasks should allow a reference to a Trigger bean in XSD [SPR-8205]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-8205](https://jira.spring.io/browse/SPR-8205?redirect=false)** and commented  Scheduled tasks should allow a reference to a Trigger bean in XSD.  The underlying FactoryBean allows it, but only for CronTrigger.  A good first step would be to allow it in the same circumstances, and then optionally also more generally, for custom triggers.  Some out-of-the box Trigger implementations for fixed rate and fixed delay would also then be useful.  The main reason for doing this would be to allow runtime control of the trigger.   ---  **Affects:** 3.0 GA","closed","type: enhancement,","spring-projects-issues","2011-04-05T01:34:58Z","2012-06-19T03:39:41Z"
"","12732","Provide Java main() for launching Spring applications [SPR-8077]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-8077](https://jira.spring.io/browse/SPR-8077?redirect=false)** and commented  There is currently no ""standard"" way to do this, so users have to write their own and there are literally thousands of implementations out there with very common features.  CommandLineJobRunner from Spring Batch has some useful ideas in it, but it also has batch-specific options.  Ideally I'd like to simply extend or configure a standard component that does the context loading and autowiring piece, maybe collects some arguments from stdin, etc.  Maybe in the name of DRY, it would be useful to pick out some useful features and implement something now we have a new major point release in progress.  Suggested features:  * An API for command line options (probably duplicating commons-cli here, so maybe depend on that, or maybe just allow override for options gathering so users can plugin external library if needed?) * Accept arguments on command line and optionally append from stdin. * Standard (e.g. first) argument for locating a Spring configuration (XML, package or class name - I recommend sticking to a single config file and import from there if there are more, or else the argument could accept wildcards). * Autowiring of fields in the runner instance, so extensions can add `@Autowired` fields and have them supplied magically. * Clear semantics and documentation about how to shutdown the application and ensure the application context is closed (depends on whether there are any non-daemon threads), and allow shutdown when main() ends or on CTRL-C according to taste. * Optional call to System.exit() with status determined through e.g. a protected method * A way to initialize the Environment by plugging in a context initializer a la web.xml * Optional bootstrap properties in a file or Resource, or some other way to initialize the Environment without writing code  ---  **Issue Links:** - #13684 Support simplified main class application context / dependency management  5 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2011-03-22T07:28:12Z","2019-01-11T12:41:17Z"
"","12730","Provide simple bean definition refreshability [SPR-8075]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-8075](https://jira.spring.io/browse/SPR-8075?redirect=false)** and commented  This issue proposes the introduction of RefreshScope, allowing for auto-proxying selected beans at start up and allowing them to be refreshed at runtime  Here is a prototype (Maven project with test cases): https://gist.github.com/759898.  Spring beans in scope=""refresh"" are re-initialized on the next method call after a refresh.  Example (from unit test):  \ \ \ \ \   \ \   The ""service"" bean is initialized only when a method is first called (standard scoped proxy), but can be re-instantiated by calling RefreshScope.refresh() and (in this case) changing the values in the map.  The implementation tries to be careful about DisposableBeans, but there are probably still openings for problems during a refresh if the destroy() method of the scoped bean changes some state that other components are relying on.  It still seems useful enough as it is to me (in fact I'm using it already), and if you steer clear of DisposableBean it should be fine.  Maybe we should just not support DisposableBean (or anything with a destruction callback)?   ---  2 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2011-03-22T07:13:10Z","2015-09-22T19:28:16Z"
"","12527","SyncTaskExecutor no longer polymorphous with SimpleAsyncTaskExecutor [SPR-7870]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-7870](https://jira.spring.io/browse/SPR-7870?redirect=false)** and commented  SyncTaskExecutor is no longer polymorphous with SimpleAsyncTaskExecutor.  One of my favourite features of TaskExecutor since Spring 2.5 was that I could code against that interface and test everything single-threaded with SyncTaskExecutor , and only try the multi-threaded case when I was ready.  Since 3.0 we have another interface AsyncTaskExecutor, which is fine, but SyncTaskExecutor doesn't implement that interface so only the TaskExecutor methods can be tested.  Simple fix would be to change the declaration of SyncTaskExecutor and implement the missing methods.   ---  **Affects:** 3.0.5","closed","type: enhancement,","spring-projects-issues","2011-01-10T06:01:17Z","2018-12-28T10:28:40Z"
"","12502","FormHttpMessageConverter.read() always ignores post data when processing request (from Tomcat) [SPR-7845]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-7845](https://jira.spring.io/browse/SPR-7845?redirect=false)** and commented  FormHttpMessageConverter.read() always ignores post data when processing request (from Tomcat).  In read() we do this:  ``` String body = FileCopyUtils.copyToString(new InputStreamReader(inputMessage.getBody(), charset)); String[] pairs = StringUtils.tokenizeToStringArray(body, ""&""); ... ```  and then go on to parse the pairs as if they are the POST form data.  But the body is always an empty string when I look at it in a debugger, and the form data shows up in the request parameters which are ignored, so none of the form data gets exposed to clients.   ---  **Affects:** 3.0.5  **Issue Links:** - [INT-1720](https://jira.spring.io/browse/INT-1720) Http inbound adapter does not give access to request parameters on POST (_**""supersedes""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/74b5b7b56a24104a2eb7396a33e689372aa22b1b, https://github.com/spring-projects/spring-framework/commit/fbede64c86637b29a402b71b0cb96588b0951f22, https://github.com/spring-projects/spring-framework/commit/e98afc087f8da7349585c57ab66649689939375b","closed","type: bug,","spring-projects-issues","2010-12-29T10:37:01Z","2012-06-19T03:39:24Z"
"","12470","AnnotationJmxAttributeSource searches for methods in super classes, but not @ManagedResource [SPR-7814]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-7814](https://jira.spring.io/browse/SPR-7814?redirect=false)** and commented  AnnotationJmxAttributeSource searches for methods in super classes, but not `@ManagedResource`.  I assume this is an oversight, but it does look quite deliberate.  Anyone offer any insight into why AnnotationJmxAttributeSource doesn't use AnnotationUtils to search for `@ManagedResource`?   ---  **Affects:** 3.0.5","closed","type: enhancement,","spring-projects-issues","2010-12-12T02:44:52Z","2015-09-22T17:34:30Z"
"","12410","Decide what to do with @IfProfileValue [SPR-7754]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-7754](https://jira.spring.io/browse/SPR-7754?redirect=false)** and commented  Now that `@Profile` (and ""profile"" generally) has a meaning in the framework, the old test support for detecting system properties looks like it has an awkward name.  In Spring 3.1 terms, what `@IfProfileValue` does is detect key-value pairs in the Environment (not profiles).  One simple thing we should definitely do is add a ProfileValueSource that can pull values from the Environment.  More radically, maybe we could rename `@IfProfileValue`(name=,value=) to `@Environment`(key=,value=).  Another suggestion is that we could provide a way to activate profiles declaratively for tests or test classes.  Something I've been playing with is this (new components ProfileSuite and `@ActiveProfile`):  ```java @RunWith(Suite.class) @SuiteClasses({ HsqlTest.class, DerbyTest.class }) public class JdbcDaoIntegrationTests {  	@RunWith(ProfileSuite.class) 	@SuiteClasses({ JdbcSearchableJobInstanceDaoTests.class, JdbcSearchableJobExecutionDaoTests.class, 			JdbcSearchableStepExecutionDaoTests.class }) 	public static abstract class BaseTest { 	}  	@ActiveProfile(""hsql"") 	public static class HsqlTest extends BaseTest { 	}  	@ActiveProfile(""derby"") 	public static class DerbyTest extends BaseTest { 	}  } ```  It says: run these three test classes twice each, once with profile ""hsql"" and once with profile ""derby"".  This has the nice feature that `@EnvironmentValue` can still be honoured inside the individual tests (per method).  ---  **Issue Links:** - #13625 SystemProfileValueSource is not very compatible with the new 3.1 default system property profiles - #12615 TestContext framework should support declarative configuration of bean definition profiles - #13622 Allow overriding `@ActiveProfiles` in test classes with system property - #16300 Introduce annotation to skip test based on active Spring profile  6 votes, 7 watchers","open","type: enhancement,","spring-projects-issues","2010-11-18T09:46:05Z","2019-01-15T11:56:23Z"
"","12387","Provide @Rule alternative to SpringJUnit4ClassRunner [SPR-7731]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-7731](https://jira.spring.io/browse/SPR-7731?redirect=false)** and commented  #### Overview  Sometimes (always?) it would be nice to have a `@Rule` implementation that did the job of the `SpringJUnit4ClassRunner`.  The main motivation for this is to be able to use other runners (e.g. `@Parameterized`, `@Categories`, Mockito, etc.).  There might even be a case for deprecating the runner in favor of a `@Rule`?  ---  #### Further Resources  - https://github.com/junit-team/junit/issues/200 - https://github.com/junit-team/junit/issues/444 - https://github.com/junit-team/junit/issues/766 - https://github.com/spring-projects/spring-framework/pull/222 - https://github.com/mmichaelis/spring-aware-rule  ---  **Attachments:** - [SpringContextRule.java](https://jira.spring.io/secure/attachment/17657/SpringContextRule.java) (_4.72 kB_) - [SpringContextRule.java](https://jira.spring.io/secure/attachment/17655/SpringContextRule.java) (_4.49 kB_) - [spring-test-4.2.0.BUILD-SNAPSHOT.jar](https://jira.spring.io/secure/attachment/22794/spring-test-4.2.0.BUILD-SNAPSHOT.jar) (_501.52 kB_)  **Issue Links:** - #11259 Introduce a TestExecutionListener for DbUnit (_**""Cloned from""**_) - #17629 Document SpringClassRule and SpringMethodRule in the reference manual (_**""is depended on by""**_) - #13870 JUnit `@Rule` executes outside of transaction when using the TransactionalTestExecutionListener (_**""is depended on by""**_) - #14850 Implement JUnit 4 Support using Rules (_**""is duplicated by""**_) - #9965 Add support for parameterized JUnit 4 tests in the Spring TestContext Framework  25 votes, 30 watchers","closed","has: votes-jira,","spring-projects-issues","2010-11-10T04:24:00Z","2019-01-13T07:12:21Z"
"","12375","Add a generic custom scope implementation [SPR-7719]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-7719](https://jira.spring.io/browse/SPR-7719?redirect=false)** and commented  It would often be useful to have a generic custom scope that just uses ThreadLocal and a Map instance to manage state.  It could be used as a base class for a large class of other custom scopes, and also as a basis for reloadable bean definitions (provided the instances are proxied).   --- No further details from [SPR-7719](https://jira.spring.io/browse/SPR-7719?redirect=false)","closed","type: enhancement,","spring-projects-issues","2010-11-04T08:09:33Z","2015-09-22T16:34:33Z"
"","12288","Allow valid file extension paths for content negotiation to be specified [SPR-7632]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-7632](https://jira.spring.io/browse/SPR-7632?redirect=false)** and commented  Allow valid file extension paths to be specified in DispatcherServlet.  My use case is  ``` @RequestMapping(value = ""/jobs/{jobName}"", method = RequestMethod.GET) ```  I need .html and .json to be valid extensions (stripped off by the dispatcher), but other . separated jobName values are legal and should be presented as they are (e.g. my.job or my.job.html both resolve to my.job).  The current behaviour is simply to truncate at the first period.  Even with a regex pattern `{jobName:.*`} we truncate the path, so the only way to make it work is to add HttpServletRequest to all controller methods and extract the parameter manually (back to Spring 2.5).  ---  **Affects:** 3.0.6  This issue is a sub-task of #13057  **Issue Links:** - #13120 Configure PatternsRequestCondition with information that allows it to do a smart suffix pattern match (_**""is duplicated by""**_) - #19242 `@PathVariable` will cut off the last point (_**""is duplicated by""**_) - #10832 a Uri Value is incorrectly extracted if it contains '.'.  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4fd7645efd2daf8d23960706180837a61bf9f321  0 votes, 6 watchers","closed","type: task,","spring-projects-issues","2010-10-08T07:43:18Z","2019-01-13T07:12:46Z"
"","12151","SpEL cannot project on an non-list collection (seems unnecessarily restrictive) [SPR-7493]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-7493](https://jira.spring.io/browse/SPR-7493?redirect=false)** and commented  ``` Caused by: org.springframework.expression.spel.SpelEvaluationException: EL1019E:(pos 6): Projection is not supported on the type 'java.util.Collections$UnmodifiableCollection' 	at org.springframework.expression.spel.ast.Projection.getValueInternal(Projection.java:117) 	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:57) 	at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:93) 	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:93) 	at org.springframework.integration.util.AbstractExpressionEvaluator.evaluateExpression(AbstractExpressionEvaluator.java:81) 	at org.springframework.integration.aggregator.ExpressionEvaluatingMessageListProcessor.process(ExpressionEvaluatingMessageListProcessor.java:67) 	at org.springframework.integration.aggregator.ExpressionEvaluatingMessageGroupProcessor.aggregatePayloads(ExpressionEvaluatingMessageGroupProcessor.java:46) 	at org.springframework.integration.aggregator.AbstractAggregatingMessageGroupProcessor.processAndSend(AbstractAggregatingMessageGroupProcessor.java:53) 	at org.springframework.integration.aggregator.CorrelatingMessageHandler.handleMessageInternal(CorrelatingMessageHandler.java:185) 	at org.springframework.integration.handler.AbstractMessageHandler.handleMessage(AbstractMessageHandler.java:66) 	... 34 more ```    ---  **Affects:** 3.0.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/055c343ce0e52b3aa66d5ed9c56b78466bc06f37","closed","type: enhancement,","spring-projects-issues","2010-08-24T23:28:12Z","2012-06-19T03:43:21Z"
"","12139","Support for ${} placeholders in @Import, @ImportResource, component scan as well as  [SPR-7481]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-7481](https://jira.spring.io/browse/SPR-7481?redirect=false)** and commented  Support for ${} placeholders in `@Import`, component scan as well as \.  To start with System properties (consistent with \) would be sufficient, but to do a proper job I would like to see a bootstrap strategy that users can implement to load properties in other ways (JNDI seems to be the most popular).  There are lots of open requests for placeholder features (#9578, #6570 cover most of the others), but I didn't see anything (except #6058 which is resolved) requesting this feature specifically.  ---  3 votes, 7 watchers","closed","in: core,","spring-projects-issues","2010-08-21T07:05:55Z","2019-01-11T14:09:43Z"
"","12121","Dirty writes and SimpleThreadScope leaking across contexts [SPR-7463]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-7463](https://jira.spring.io/browse/SPR-7463?redirect=false)** and commented  Two ApplicationContexts having bean definitions with the same name can share a thread and they will then also share a bean instance.  It's a dirty write: the first context to use the thread inserts its version of the bean and the other loses.  The consequence is at best a memory leak and at worst a security problem, and in all cases a source of strange application behaviour.  SimpleThreadScope should clear its state on destroy() - it should also segregate it by ApplicationContext.id.  It would be nice if it supported destruction callbacks for its beans as well, but at least to be useful in practice it should be a DisposableBean which clears and re-initializes its thread local state when the context closes down.   ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5109501d1636ed643e351218f6c2823d28eb495e","closed","type: bug,","spring-projects-issues","2010-08-14T01:49:46Z","2012-06-19T03:42:56Z"
"","12120","GenericConversionService ignores converters for arrays [SPR-7462]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-7462](https://jira.spring.io/browse/SPR-7462?redirect=false)** and commented  GenericConversionService ignores converters for arrays: if you add a converter for an array type it is ignored at runtime.  The conversion service instead tries to be clever and looks for a converter for the element type in the array.  It might find one, but even if it does, it would be the wrong default choice of converter because there is an exact match between the target type and an existing converter.   ---  **Affects:** 3.0 GA  1 votes, 2 watchers","closed","type: bug,","spring-projects-issues","2010-08-13T06:56:32Z","2012-06-19T03:43:18Z"
"","12104","Default ConversionService does not have a converter for Collection to Iterator [SPR-7446]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-7446](https://jira.spring.io/browse/SPR-7446?redirect=false)** and commented  Default ConversionService does not have a converter for Collection to Iterator.  It's not a big deal but it's a trivial one to add in the framework, and completely generic, I think.   ---  **Affects:** 3.0.3","closed","status: bulk-closed,","spring-projects-issues","2010-08-10T04:20:16Z","2019-01-12T03:32:33Z"
"","12103","TypeDescriptor does not resolve element type of Iterator [SPR-7445]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-7445](https://jira.spring.io/browse/SPR-7445?redirect=false)** and commented  TypeDescriptor does not resolve declared element type of Iterator (e.g. in method parameter).  It works with Collections and arrays, but returns null for Iterator.   ---  **Affects:** 3.0 GA","closed","type: enhancement,","spring-projects-issues","2010-08-10T04:17:24Z","2015-09-22T17:34:39Z"
"","12068","SpEL evaluator cannot convert method parameters even if the TypeConverter can [SPR-7410]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-7410](https://jira.spring.io/browse/SPR-7410?redirect=false)** and commented  Example:  ``` @Test public void testCoercionToCollectionOfPrimitive() throws Exception {  	class TestTarget { 		@SuppressWarnings(""unused"") 		public int sum(Collection numbers) { 			int total = 0; 			for (int i : numbers) { 				total += i; 			} 			return total; 		} 	}  	StandardEvaluationContext evaluationContext = new StandardEvaluationContext();  	TypeDescriptor collectionType = new TypeDescriptor(new MethodParameter(TestTarget.class.getDeclaredMethod( 			""sum"", Collection.class), 0)); 	// The type conversion is possible 	assertTrue(evaluationContext.getTypeConverter() 			.canConvert(TypeDescriptor.valueOf(String.class), collectionType)); 	// ... and it can be done successfully 	assertEquals(""[1, 2, 3, 4]"", evaluationContext.getTypeConverter().convertValue(""1,2,3,4"", 			TypeDescriptor.valueOf(String.class), collectionType).toString());   	evaluationContext.setVariable(""target"", new TestTarget());  	// OK up to here, so the evaluation should be fine... 	// ... but this fails 	int result = (Integer) parser.parseExpression(""#target.sum(#root)"").getValue(evaluationContext, ""1,2,3,4""); 	assertEquals(""Wrong result: "" + result, 10, result);  } ```  Here's the stack trace:  ``` java.lang.ClassCastException: java.lang.String cannot be cast to java.lang.Integer 	at org.springframework.sample.ExpressionTests$2TestTarget.sum(ExpressionTests.java:127) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 	at java.lang.reflect.Method.invoke(Method.java:597) 	at org.springframework.expression.spel.support.ReflectiveMethodExecutor.execute(ReflectiveMethodExecutor.java:58) 	at org.springframework.expression.spel.ast.MethodReference.getValueInternal(MethodReference.java:104) 	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:57) 	at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:93) 	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:93) 	at org.springframework.sample.ExpressionTests.testCoercionToCollectionOfPrimitive(ExpressionTests.java:144) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 	at java.lang.reflect.Method.invoke(Method.java:597) 	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44) 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15) 	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41) 	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:236) 	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:46) 	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197) ```    ---  **Affects:** 3.0.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/58b07f586d279ed7f4101c58e7c46f898e909ccb","closed","in: core,","spring-projects-issues","2010-07-31T03:37:30Z","2012-06-19T03:44:11Z"
"","12042","Cron expressions use months based at 0-11 (should be 1-12) [SPR-7384]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-7384](https://jira.spring.io/browse/SPR-7384?redirect=false)** and commented  Cron expressions use months based at 0-11 (should be 1-12)  ---  **Affects:** 3.0 GA  **Issue Links:** - #12463 CronTrigger causes StackOverflowError  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e26fc66523c22b43b636c2833dc1ad7fef6f35af","closed","in: core,","spring-projects-issues","2010-07-20T00:50:38Z","2019-01-11T13:38:59Z"
"","12022","JDBC data source initializer should be able to execute PL/SQL with embedded statements [SPR-7364]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-7364](https://jira.spring.io/browse/SPR-7364?redirect=false)** and commented  JDBC data source initializer should be able to execute PL/SQL with embedded statements.  This won't work, for instance:  ``` create trigger item_trigger before insert on item for each row begin select item_seq.nextval into :new.id from dual; end; / ```    ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/14edc9fc031dbd5b8af7824e3e3f7c9d17712cda","closed","type: enhancement,","spring-projects-issues","2010-07-11T18:54:17Z","2012-06-19T03:43:54Z"
"","12021","JDBC data source initializer should ignore empty strings [SPR-7363]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-7363](https://jira.spring.io/browse/SPR-7363?redirect=false)** and commented  JDBC data source initializer should ignore empty strings.  It trims() the SQL queries in the wrong place or the wrong way, so that if there is a line in the input with a trailing space, it sends an empty string to the database as a query.  Some databases are OK with this but Oracle (in particular) barfs.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a8133a9917744ed656189dd7f553a7b1acfa1129","closed","type: enhancement,","spring-projects-issues","2010-07-11T18:51:58Z","2012-06-19T03:43:06Z"
"","11898","CronSequenceGenerator should fail to parse invlid ranges of hours etc (e.g. months 11-13) [SPR-7239]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-7239](https://jira.spring.io/browse/SPR-7239?redirect=false)** and commented  E.g. * * * * 11-13 * should fail to parse, but actually only fails at runtime when the trigger is fired.   ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b4af04ba9da0dc2ef6b118348e165e38d1ce37e7","closed","in: core,","spring-projects-issues","2010-05-26T04:35:19Z","2012-06-19T03:44:03Z"
"","12718","Cache Abstraction IllegalArgumentException when debug symbols off [SPR-8063]","**[Dave Curry](https://jira.spring.io/secure/ViewProfile.jspa?name=davecurryco)** opened **[SPR-8063](https://jira.spring.io/browse/SPR-8063?redirect=false)** and commented  Working with Spring Cache Abstraction in 3.1.0.M1. Using the `@Cacheable` annotation on a target method like so:  `@Cacheable`(value=""books"", key=""#name"") public List\ findAllByCreator(String name, boolean exact) { ... }  This works fine when debugger symbols are turned on in the Java compiler options (for example, debug=""true"" in the Ant javac task or 'Add variable attributes to generated class files' checked in the Eclipse Java Compiler properties). However, the bytecode is compiled without debugger symbols CacheAspectSupport throws an IllegalArgumentException as follows:  Exception in thread ""main"" java.lang.IllegalArgumentException: Null key returned for cache definition CacheDefinition[public java.util.List com.rtt.example.BookServiceMap.findAllByCreator(ja va.lang.String,boolean)] caches=[books] | condition='' | key='#name' at org.springframework.cache.interceptor.CacheAspectS upport.execute(CacheAspectSupport.java:175) at org.springframework.cache.interceptor.CacheInterce ptor.invoke(CacheInterceptor.java:61) at org.springframework.aop.framework.ReflectiveMethod Invocation.proceed(ReflectiveMethodInvocation.java :172) at org.springframework.aop.framework.JdkDynamicAopPro xy.invoke(JdkDynamicAopProxy.java:202) at $Proxy6.findAllByCreator(Unknown Source) at com.rtt.example.BookCatalog.process(BookCatalog.ja va:24) at com.rtt.example.BookCatalog.main(BookCatalog.java: 48)  Apparently, the interceptor needs the symbols to be able to resolve the variable name in the SPEL expression and fails hard if it can't find it.  This is an issue for production deployment, since it is standard practice to turn debugging symbols off in production releases for performance and security reasons.    ---  **Affects:** 3.1 M1  **Reference URL:** http://forum.springsource.org/showthread.php?t=105072","closed","in: core,","spring-projects-issues","2011-03-17T10:30:09Z","2019-01-12T05:30:48Z"
"","12678","Cache Abstraction - Expired cache elements cause return value null instead of calling method [SPR-8023]","**[Dave Curry](https://jira.spring.io/secure/ViewProfile.jspa?name=davecurryco)** opened **[SPR-8023](https://jira.spring.io/browse/SPR-8023?redirect=false)** and commented  Using Caching Abstraction with EhCache. If a method result cache entry is expired from the backing cache due to having exceeded timeToLiveSeconds, cache abstraction returns a value of null rather than proceeding with the `@Cacheable` annotated method call.  This may be related to #12661.  See the attached example, which is an Eclipse Helios project archive.  ---  **Affects:** 3.1 M1  **Reference URL:** http://blog.springsource.com/2011/02/23/spring-3-1-m1-caching/  **Attachments:** - [spring-cache-test.zip](https://jira.spring.io/secure/attachment/17687/spring-cache-test.zip) (_2.95 MB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fad2f2ca3000d56138fc0a254684e78549b5c8bb, https://github.com/spring-projects/spring-framework/commit/523a83ca287068aa5a5c924a9325e5478a3f03ab","closed","in: core,","spring-projects-issues","2011-03-06T00:45:40Z","2019-01-11T12:36:51Z"
"","11932","Debug logging of set properties for PropertyPlaceholderConfigurer [SPR-7273]","**[Daniel Walcher](https://jira.spring.io/secure/ViewProfile.jspa?name=daniel.walcher)** opened **[SPR-7273](https://jira.spring.io/browse/SPR-7273?redirect=false)** and commented  Currently PropertyOverrideConfigurer has very useful logging of what properties are being set. i.e.  ``` ... PropertyOverrideConfigurer - Property 'uploadService.defaultpath' set to value [/pictures] ```  Could we please have the same type of logging for placeholders that are set by the PropertyPlaceholderConfigurer.  This will be very useful in complex override structures.   ---  **Affects:** 3.0.1","closed","status: bulk-closed,","spring-projects-issues","2010-06-10T01:25:07Z","2019-01-12T03:50:11Z"
"","12097","JSON (jackson) @RequestBody marshalling throws awkward exception [SPR-7439]","**[Daniel Robert](https://jira.spring.io/secure/ViewProfile.jspa?name=robertd)** opened **[SPR-7439](https://jira.spring.io/browse/SPR-7439?redirect=false)** and commented  When utilizing a `@Controller` method with annotation `@RequestBody` and 'application/json' content type with Jackson on the classpath, MappingJacksonHttpMessageConverter throws a 'JsonParseException' (subclass of IOException) when given invalid JSON.  According to AbstractHttpMessageConverter.readInternal()'s documentation, the HttpMessageNotReadableException exception is more appropriate for conversion errors.  The side effect of this is that DefaultHandlerExceptionResolver throws a 500 Internal Server Error instead of the expected 400 Bad Request.  ---  **Affects:** 3.0.2  **Issue Links:** - #13876 JSON (jackson) `@RequestBody` marshalling throws java.io.EOFException when body is missing  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ac1d2d93d6beb85f468cb669a83d9fdc9a289c84, https://github.com/spring-projects/spring-framework/commit/fa3e9bdfddf6a35a7d79a879252ebd5c9171a268  1 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2010-08-09T14:38:52Z","2019-01-13T07:13:30Z"
"","12511","@Primary and primary attribute of  element are not considered for calls to getBean(Class) [SPR-7854]","**[Daniel Nydegger](https://jira.spring.io/secure/ViewProfile.jspa?name=nydi)** opened **[SPR-7854](https://jira.spring.io/browse/SPR-7854?redirect=false)** and commented  If a bean is annotated with `@Primary` or the attribute primary is set on the \ element, then the injection mechanism choose the primary configured bean as first choice if more than one candidate are qualified. This works fine with usage of `@Autowired` or `@Inject`.  By resolve the bean over the application context, I expected the same behaviour. Because the DefaultListableBeanFactory implementation of \ T getBean(Class\ requiredType) method doesn't check the the primary attribute of BeanDefinition, a NoSuchBeanDefinitionException is thrown in case of multiple qualified bean candidates regardless the the primary qualification.  I posted a workaround solution in my blog: http://develop.nydi.ch/2010/12/spring-primary-bean-injection/  To reproduce this behavior you can run the following JUnit test case.  ``` @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(locations = { TestSupport.SPRING_CONFIG_FILE_PATH }) public class PrimarySupportTest implements ApplicationContextAware {  	private SingleService singleService; 	private ApplicationContext applicationContext; 	 	@Inject     public void setSingleService(SingleService singleService) { 		this.singleService = singleService; 	} 	 	@Override 	public void setApplicationContext(ApplicationContext applicationContext) 			throws BeansException { 		this.applicationContext = applicationContext; 	}          @Test     public void testInjectedService() {         Assert.assertNotNull(""contextSingleService is null"", singleService);         Assert.assertEquals(""wrong instance"", SingleServiceImpl_1.class.getName(), singleService.getClass().getName());     }          @Test     public void testServiceWithGetBean() {     	SingleService contextSingleService = applicationContext.getBean(""singleServiceImpl_1"", SingleService.class);         Assert.assertNotNull(""contextSingleService is null"", contextSingleService);         Assert.assertEquals(""wrong instance"", SingleServiceImpl_1.class.getName(), contextSingleService.getClass().getName());      	contextSingleService = applicationContext.getBean(""singleServiceImpl_2"", SingleService.class);         Assert.assertNotNull(""contextSingleService is null"", contextSingleService);         Assert.assertEquals(""wrong instance"", SingleServiceImpl_2.class.getName(), contextSingleService.getClass().getName());          // SingleServiceImpl_1 is annotated with @Primary so SingleServiceImpl_1 instance should returned here, but      	contextSingleService = applicationContext.getBean(SingleService.class);         Assert.assertNotNull(""contextSingleService is null"", contextSingleService);         Assert.assertEquals(""wrong instance"", SingleServiceImpl_1.class.getName(), contextSingleService.getClass().getName());     } } ```  ``` public interface BaseService { 	void callBase(); } ```  ``` @Service @Named @Primary public class SingleServiceImpl_1 implements SingleService { 	@Override 	public void callMe() { 	} } ```  ``` @Service @Named public class SingleServiceImpl_2 implements SingleService { 	@Override 	public void callMe() { 	} } ```  ---  **Affects:** 3.0.5  **Issue Links:** - #13135 Make BeanFactoryLocator aware of autowiring (and primary flag) (_**""is duplicated by""**_) - #12590 Add support for type-based RuntimeBeanReference  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7e74fd2b7fb30e6206d40bb7235d82433682386a  12 votes, 13 watchers","closed","has: votes-jira,","spring-projects-issues","2010-12-30T14:05:30Z","2019-01-11T15:15:07Z"
"","12481","org.springframework.beans.factory.aspectj seems to be missing JavaDocs for Aspects [SPR-7825]","**[Daniel Mikusa](https://jira.spring.io/secure/ViewProfile.jspa?name=dmikusa)** opened **[SPR-7825](https://jira.spring.io/browse/SPR-7825?redirect=false)** and commented  The JavaDocs for the package ""org.springframework.beans.factory.aspectj"" are only showing one Java interface ""ConfigurableObject"".  This package also contains several aspects which contain JavaDoc comments.  For example GenericInterfaceDrivenDependencyInjectionAspect and AbstractInterfaceDrivenDependencyInjectionAspect.  It would be nice to have the JavaDocs for these included as well.  Thanks  ---  **Affects:** 3.0.5  **Issue Links:** - #12770 Migrate Spring build system to Gradle","closed","type: enhancement,","spring-projects-issues","2010-12-16T12:29:07Z","2019-01-11T15:18:08Z"
"","12034","Document SpEL's interaction with the Class object [SPR-7376]","**[Daniel Mikusa](https://jira.spring.io/secure/ViewProfile.jspa?name=dmikusa)** opened **[SPR-7376](https://jira.spring.io/browse/SPR-7376?redirect=false)** and commented  Currently a SpEL expression like ""new java.util.Date().getClass().getName()"" will not evaluate and will throw an exception.  This is due to Spring limiting access to the Class object, presumably as a security precaution.  It would be nice to have this behavior and it's rationale documented.  Thanks    ---  **Affects:** 3.0.3  1 votes, 1 watchers","closed","status: declined,","spring-projects-issues","2010-07-15T00:28:03Z","2018-12-28T09:59:10Z"
"","12032","Allow SpEL to access select properties on a Class object [SPR-7374]","**[Daniel Mikusa](https://jira.spring.io/secure/ViewProfile.jspa?name=dmikusa)** opened **[SPR-7374](https://jira.spring.io/browse/SPR-7374?redirect=false)** and commented  Currently, it is not possible to use SpEL to access properties of a Class object.  So if you try to evaluate a statement like this ""new java.util.Date().getClass().getName()"", you get an exception ""Method call: Method getName() cannot be found on java.util.Date type"".  While I understand it is not desirable to expose every element of the Class object, it would be convenient to have access to a few of the methods.  Here are some examples:  getCanonicalName(), getName(), and getSimpleName().  Attaching maven test project.   ---  **Affects:** 3.0.3  **Attachments:** - [spelDemo.zip](https://jira.spring.io/secure/attachment/16890/spelDemo.zip) (_3.67 kB_)","closed","status: bulk-closed,","spring-projects-issues","2010-07-15T00:16:23Z","2019-01-12T03:32:42Z"
"","12184","Provide a component to simplify the standard Adapter pattern. [SPR-7526]","**[Daniel Krieg](https://jira.spring.io/secure/ViewProfile.jspa?name=dkrieg)** opened **[SPR-7526](https://jira.spring.io/browse/SPR-7526?redirect=false)** and commented  In a recent project I encountered an interesting problem where I had to create a standard Adapter class that converted calls from one interface to another.  Specifically, this required me to convert a local business service interface to a remote interface where the remote interface used a document/literal/wrapped style of interface implemented as a SessionBean. I could not use the Spring-recommended  approach which assumes that the business and remote interfaces have the same method signatures without the throws RemoteException.  Furthermore, the actual endpoint could be either a Web Service, Remote EJB or Local EJB.  After several design/implementation iterations where I applied the ServiceLocator/BusinessDelegate patterns (which do not conform to DI/IOC styles) it occurred to me that the Template/Callback patterns used by several other areas (JMS,JDBC,etc.) works great in this instance.  Attached is a simplified illustration that I hope will be found useful.   ---  **Attachments:** - [AdapterTemplate.java](https://jira.spring.io/secure/attachment/17069/AdapterTemplate.java) (_4.40 kB_)","closed","type: enhancement,","spring-projects-issues","2010-09-04T00:56:54Z","2018-12-28T11:54:43Z"
"","11984","TestContext should generate cache keys based on all metadata that uniquely identify ApplicationContext configuration [SPR-7326]","**[Daniel IfCore](https://jira.spring.io/secure/ViewProfile.jspa?name=ifcore-daniel)** opened **[SPR-7326](https://jira.spring.io/browse/SPR-7326?redirect=false)** and commented  I have a test suite where different test classes use the same context configuration file but different context loader. The use case for this is to be able to inject a session and request scope via the customizeBeanFactory method in the GenericXmlContextLoader class.  Since only some test cases rely on those scopes I have a `@ContextConfiguration` annotation on those classes that need those scopes.  Since the contextCache relies only on the locations property of the ContextConfiguration annotation the special context loader is not invoked if another test cases with the same context location has been executed before.  Could you please add the classname of the loader to the cache key as well? In Spring 3.0.2 it is in line 301 in the org.springframework.test.context.TestContext.java file.  Thanks!  ---  **Affects:** 3.0.2  **Issue Links:** - #13193 ContextCache should be keyed by MergedContextConfiguration instead of String (_**""is depended on by""**_) - #12651 Improve documentation of the context caching mechanism in the TestContext framework  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/dbe96b5cf9727302509ce36aa831184ba5c25463, https://github.com/spring-projects/spring-framework/commit/3f58da1cd673570c8e7ea61d70593c028d10f3c7","closed","type: enhancement,","spring-projects-issues","2010-06-27T08:55:07Z","2019-01-13T07:53:36Z"
"","12330","Document how SpEL defaulting syntax differs from PropertyPlaceholder defaulting  [SPR-7674]","**[Daniel Hopper](https://jira.spring.io/secure/ViewProfile.jspa?name=split3)** opened **[SPR-7674](https://jira.spring.io/browse/SPR-7674?redirect=false)** and commented  Currently there is support for default values with `@Value` when using property place holders  ``` @Value(""${fee:25}"") private int overdraft; ```  But this doesn't work with SPeL expressions.  While this isn't inherently an issue at this point I think this will be problematic with the new features in Spring 3.1 for the Environment configuration profiles.  ``` public class SpelExpressionDefaultTest {  	@Test 	public void testSpelDefaultValue() { 		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext( 			PropertyPlaceholderConfigurer.class, FeeService.class 		); 		 		Assert.assertEquals(25, ctx.getBean(FeeService.class).getOverdraft()); 	} 	 	@Component 	public static class FeeService { 		@Value(""#{systemProperties['fee']:25}"") 		private int overdraft;  		public int getOverdraft() { 			return overdraft; 		} 	} } ```  This particular test will fail on a parsing exception from SPeL.  This directly relates to #11472 which was closed as invalid as there is a work around to just use ${:default} syntax instead.  If we change the FeeService to  ``` @Component public static class FeeService { 	@Value(""${fee:25}"") 	private int overdraft;  	public int getOverdraft() { 		return overdraft; 	} } ```  This will work as expected.  SPeL should probably support the default value option especially with the new Environment Profiles coming in 3.1  ---  **Affects:** 3.0.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f20ded5f637f4032c1a31c913a934904413d606d","closed","type: enhancement,","spring-projects-issues","2010-10-22T08:35:55Z","2019-01-11T14:36:11Z"
"","12134","Improvement to JDBC Named Parameter Replacement Strategy [SPR-7476]","**[Daniel Boulerice](https://jira.spring.io/secure/ViewProfile.jspa?name=bigblackhoss)** opened **[SPR-7476](https://jira.spring.io/browse/SPR-7476?redirect=false)** and commented  There seems to be a problem with the JDBC parameter replacement.  The existing mechanism searches for names in a prototype string, find pemeter placeholders, and attempts to fill them.  The problem is that it does not allow to generate any sort of string.  In particular, colons pose problems.  I want to insert legitimate colons in an SQL without incurring name replacement.  For example (MySQL): WHERE m.name REGEXP '[0-9][:alnum:]*'  (asks me for parameter 'alnum') For example (MySQL): WHERE x.created_on BETWEEN Date(:p1) AND DATE(:p2 23:59:59) (asks me for parameter '59')  In the prototype string, I want to escape colons using a backslash.  The former strategy of letting two colons go through is insufficient (issue #9289).  I want to write "" WHERE m.name REGEXP '[0-9][\:alnum\:]*'"" and not be asked for 'alnum'.  In addition, the current process does not delimit parameter names.  Suppose I have a field names like 'Line0Top', 'Line1Top', 'Line2Top' and I want to select them syntetically.  I would use a prototype SQL like ""SELECT Line:NumTop"" expecting to be asked for parameter 'Num' and having to replace it by 0 1 or 2.  But the current stategy will ask me for parameter 'NumTop'.  So can we also have a delimited escape sequence using ':{' and '}' like in the Bourne shell, TK scripts, JSLT etc. E.g. ""SELECT Line:{Num}Top"".  That would really be nice!  ---  **Affects:** 3.0.2  **Reference URL:** http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/jdbc.html#jdbc-NamedParameterJdbcTemplate  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2010-08-19T12:34:09Z","2019-01-13T21:45:06Z"
"","12011","Debian : Spring Build system has no licence / copyright [SPR-7352]","**[Damien Raude-Morvan](https://jira.spring.io/secure/ViewProfile.jspa?name=drazzib)** opened **[SPR-7352](https://jira.spring.io/browse/SPR-7352?redirect=false)** and commented  I'm Debian Maintainer of SpringFramework package [1]. I'm working on integrating Spring Framework 3.0.3 into Debian and replace our libspring-2.5-java package.  Right now, I'm reviewing source code of Spring Build (aka Ivy-overlay spring build system) and I'm a bit disapointed to see that : - There is no copyright / global licence file [1] - All files are missing a licence header (like other Spring project does)  Could you please have a look at this issue and update this project ?  In current state, Spring Build is a non-free module and cannot be considered free software.  [1] https://src.springframework.org/svn/spring-build/trunk/  Regards, Damien Raude-Morvan  ---  **Issue Links:** - #12010 Please provide a LICENSE file for spring-build subproject (_**""is duplicated by""**_)","closed","type: task,","spring-projects-issues","2010-07-05T08:18:38Z","2019-01-13T21:45:33Z"
"","12105","AopProxyUtils.ultimateTargetClass returns null if candidate parameter is not a TargetClassAware [SPR-7447]","**[Damien Bourdette](https://jira.spring.io/secure/ViewProfile.jspa?name=damien.bourdette)** opened **[SPR-7447](https://jira.spring.io/browse/SPR-7447?redirect=false)** and commented  The javadoc states for return value : the target class (or the plain class of the given object as fallback; never \null\)  If candidates is not a instance of TargetClassAware, result is null.   ---  **Affects:** 3.0.3","closed","in: core,","spring-projects-issues","2010-08-10T07:44:51Z","2012-06-19T03:44:13Z"
"","12263","When a bean definition is overridden, detect whether the definition has changed and log accordingly [SPR-7607]","**[Dale Wyttenbach](https://jira.spring.io/secure/ViewProfile.jspa?name=wytten)** opened **[SPR-7607](https://jira.spring.io/browse/SPR-7607?redirect=false)** and commented  In a large configuration the 'Overriding bean definition' log message may be generated hundreds of times. These messages are all generated with log level INFO from DefaultListableBeanFactory. When you have a lot of these messages, deciding which of them require your attention can be quite a chore. It would be helpful if beanDefinition.equals(oldBeanDefinition) were checked, and in the case where they are not equal, a different, more insistent WARN-level log message were generated.  ---  **Affects:** 3.0.4  **Attachments:** - [SPR-7607.pl](https://jira.spring.io/secure/attachment/18319/SPR-7607.pl) (_325 bytes_)  **Issue Links:** - #15434 Reconsider whether to generally allow bean overriding by name - #5845 Load files in  only once  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e7dde740b9393a46ee60b933c8b96a70a5eed1f6  2 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2010-09-30T11:07:56Z","2019-01-14T06:13:44Z"
"","12399","o.s.http.client.SimpleClientHttpRequestFactory should allow to specify HttpURLConnection properties [SPR-7743]","**[Cédrik LIME](https://jira.spring.io/secure/ViewProfile.jspa?name=cedrik_lime)** opened **[SPR-7743](https://jira.spring.io/browse/SPR-7743?redirect=false)** and commented  This patch exposes the properties of `HttpURLConnection` within `SimpleClientHttpRequestFactory` such as `connectTimeout` and `readTimeout`. There will therefore be no loss of available functionality in using Spring's `ClientHttpRequestFactory` in place of a `HttpURLConnection`.  ---  **Affects:** 3.0.5  **Attachments:** - [SimpleClientHttpRequestFactory.patch](https://jira.spring.io/secure/attachment/17360/SimpleClientHttpRequestFactory.patch) (_3.82 kB_)  **Issue Links:** - #12815 Introduce FeatureSpecification for PropertyOverrideBeanDefinitionParser (context:property-override) (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2010-11-16T07:14:46Z","2019-01-11T15:35:26Z"
"","11964","o.s.http.client.SimpleClientHttpRequestFactory does not allow to specify a java.net.Proxy [SPR-7305]","**[Cédrik LIME](https://jira.spring.io/secure/ViewProfile.jspa?name=cedrik_lime)** opened **[SPR-7305](https://jira.spring.io/browse/SPR-7305?redirect=false)** and commented  While working with the new ClientHttpRequestFactory, I need to create an outgoing HTTP connection via a proxy. ClientHttpRequestFactory has 2 implementations: commons-http and simple (Java native). While I can specify a proxy using CommonsClientHttpRequestFactory (it exposes the HttpClient instance), this is not true of SimpleClientHttpRequestFactory.  To fix this problem, you need to externalise the 1st line of SimpleClientHttpRequestFactory#createRequest(URI, HttpMethod) so that we can subclass uri.toURL().openConnection() to read uri.toURL().openConnection(someProxy) when needed.   ---  **Affects:** 3.0.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c059f5382365930c7b87ff1dbaab0eae5452808a","closed","type: enhancement,","spring-projects-issues","2010-06-20T20:58:03Z","2012-06-19T03:43:22Z"
"","12644","Using -enableassertions and AspectJ >= 1.6.10 may cause AssertionError in org.aspectj.weaver.UnresolvedType [SPR-7989]","**[Cédric Gillet](https://jira.spring.io/secure/ViewProfile.jspa?name=telligcirdec)** opened **[SPR-7989](https://jira.spring.io/browse/SPR-7989?redirect=false)** and commented  When launching unit tests with maven surefire plugin, JVM assertions are enables by default.  An assertion error occurs when loading jdbc:script with **aspectj 1.6.10** and **spring framework 3.0.5**.  This error appears when accessing method _""private static String nameToSignature(String name)""_ of class _org.aspectj.weaver.UnresolvedType_ line **726** during this assert execution : _""assert name.charAt(0) != '[';""_  In debug mode, name value is ""[org.springframework.core.io.Resource@xxxx"".  I guess this tab contains jdbc scripts as spring ressources from context xml config :  ```xml               ```  So Application context canot be load due to assertion error.  ---  **Affects:** 3.0.5  **Issue Links:** - #13910 Update AspectJ to the latest 1.6.12 (_**""is depended on by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0ab9e9a0c64a252fb8d8590bc302e82b8c8926c6  3 votes, 4 watchers","closed","in: core,","spring-projects-issues","2011-02-22T09:32:40Z","2019-01-12T05:31:00Z"
"","12727","NPE in OracleLobHandler with releaseResourcesAfterRead enabled [SPR-8072]","**[Csaba Horvath](https://jira.spring.io/secure/ViewProfile.jspa?name=hcs333)** opened **[SPR-8072](https://jira.spring.io/browse/SPR-8072?redirect=false)** and commented  The javadoc of LobHandler.getClobAsString says 'returns the content as String, or null in case of SQL NULL'.  However, using an OracleLobHandler and setting the releaseResourcesAfterRead property to true, a NullPointerException is thrown in the OracleLobHandler.initializeResourcesBeforeRead at line 272 when trying to read a CLOB field which is NULL (in this case the lob parameter of the method is null).   ---  **Affects:** 3.0.5  1 votes, 1 watchers","closed","status: declined,","spring-projects-issues","2011-03-22T03:06:13Z","2019-01-12T16:25:56Z"
"","12453","Implement DispatcherFilter [SPR-7797]","**[Cristian Vasile Mocanu](https://jira.spring.io/secure/ViewProfile.jspa?name=cvmocanu)** opened **[SPR-7797](https://jira.spring.io/browse/SPR-7797?redirect=false)** and commented  Implement a DispatcherFilter as an alternative to DispatcherServlet.  The big advantage would be that with a filter you can let the request continue undisturbed (using filterChain.doFilter()) if no matching controller was found. This is not possible with a servlet.  This is a requirement in all Spring MVC projects that I have seen. This is because when using the very nice Spring REST support, you would like to configure Spring MVC in web.xml to match on ""/*"" and just let the requests that don't have any controller (like static resources) continue normally.  In our project we use Tuckey URL rewrite library as a workaround (inspired from Spring Roo), but it's quite cumbersome to have to add URL rewrite rules. Now we have 3 places to configure URL matching (web.xml, url rewrite, and spring controllers - with annotations) and this is hard to manage.  I thought about writing this DispatcherFilter myself, but DispatcherServlet contains way to much logic which I would need to copy/paste.   ---  **Affects:** 3.0.5","closed","type: enhancement,","spring-projects-issues","2010-12-07T07:42:50Z","2014-12-08T12:25:55Z"
"","12265","Correct typos - Chapter 21. JMS [SPR-7609]","**[Cristian George Rapauzu](https://jira.spring.io/secure/ViewProfile.jspa?name=cg_rapauzu)** opened **[SPR-7609](https://jira.spring.io/browse/SPR-7609?redirect=false)** and commented  Document URL: http://static.springsource.org/spring/docs/current/spring-framework-reference/html/jms.html Spring 3.0 - Chapter 21. JMS  Location: 21.1 Introduction Problem: classes that simplifies: (noun plural - verb singular) Text: It contains JMS template classes that simplifies the use of the JMS Suggestion: It contains JMS template classes that simplify the use of the JMS.  Location: 21.2.1 JmsTemplate Problem: Typo - inverted letters: recieving Text: when sending or synchronously recieving messages Suggestion: receiving  Location: 21.2.2 Connections Problem: Typo - session (singular instead of plural) Text: and perform pooling of connections and session Suggestion: and perform pooling of connections and sessions  Location: 21.2.3 Destination Management Problem: the creation ... are not part: (noun singular - verb plural) Text: Even though the creation of dynamic destinations are not part of the JMS specification Suggestion: Even though the creation of dynamic destinations is not part of the JMS specification  Location: 21.2.3 Destination Management Problem: Confusing phrase caused by: 1. leftover ""is"" OR 2. missing ""and"" Text: This property is used by JmsTemplate determines the behavior Suggestion: 1. drop ""is"": This property used by JmsTemplate determines the behavior 2. add ""and"": This property is used by JmsTemplate and determines the behavior  Location: 21.2.4.2 DefaultMessageListenerContainer Problem: Typo - transation Text: may take advantage of XA transation semantics Suggestion: transaction  Location: 21.4.3 The SessionAwareMessageListener  interface Problem: Typo - wth Text: All of the message listener container implementations that ship wth Spring Suggestion: All of the message listener container implementations that ship with Spring  Location: 21.4.5 Processing messages within transactions Problem: Typo - recepton Text: This allows message recepton as well as e.g. database access Suggestion: This allows message reception as well as e.g. database access  Location: 21.5 Support for JCA Message Endpoints Problem: Typo - provided-specific Text: and any provided-specific ActivationSpec object Suggestion: and any provider-specific ActivationSpec object  Location: 21.6 JMS Namespace Support Problem: Typo - detail Text: its concrete subclasses for more detail on the individual properties Suggestion: its concrete subclasses for more details on the individual properties   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1fc6de0403097104049d87d3292247ff09d4b033","closed","type: documentation,","spring-projects-issues","2010-09-30T19:39:26Z","2012-06-19T03:43:50Z"
"","12606","Add first class support for client-side REST tests [SPR-7951]","**[Craig Walls](https://jira.spring.io/secure/ViewProfile.jspa?name=habuma)** opened **[SPR-7951](https://jira.spring.io/browse/SPR-7951?redirect=false)** and commented  This is based on the spring-test-mvc project that has been available on Github, as a separate project, for over a year. The project provides a fluent API for defining expected requests and setting the desired responses, as well as verifying that all expectations were met.  ```java  RestTemplate restTemplate = new RestTemplate() MockRestServiceServer mockServer = MockRestServiceServer.createServer(restTemplate);  mockServer.expect(requestTo(""/hotels/42"")).andExpect(method(HttpMethod.GET))    .andRespond(withSuccess(""{ \""id\"" : \""42\"", \""name\"" : \""Holiday Inn\""}"", MediaType.APPLICATION_JSON));  Hotel hotel = restTemplate.getForObject(""/hotels/{id}"", Hotel.class, 42); // use the hotel instance...  mockServer.verify(); ```  ---  **Affects:** 3.1 M1  **Issue Links:** - #12650 MockHttpRequest to support ClientRequestInterceptor testing (_**""Cloned to""**_) - #14493 Add documentation for the Spring MVC Test support - #14492 Add first class support for testing Spring MVC applications - #13849 Release 1.0 spring-test-mvc  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/22bcb54ab66c952d1c122526729b64d77a77280b, https://github.com/spring-projects/spring-framework/commit/2638dd5a05644988be193f9cbbb18b8be3b55506  6 votes, 10 watchers","closed","type: enhancement,","spring-projects-issues","2011-02-09T07:09:40Z","2019-01-11T16:15:21Z"
"","12584","Ability to specify supported media types on FormHttpMessageConverter [SPR-7929]","**[Craig Walls](https://jira.spring.io/secure/ViewProfile.jspa?name=habuma)** opened **[SPR-7929](https://jira.spring.io/browse/SPR-7929?redirect=false)** and commented  MappingJacksonJsonConverter has a setSupportedMediaTypes() method, which kinda makes sense for JSON messages, since there may not be much agreement on a JSON content type (Facebook, BTW, sends back JSON responses as ""text/javascript"").  FormHttpMessageConverter, on the other hand, has no such method. It is limited to supporting ""application/www-form-url-encoded"", which makes sense on the surface, as who would ever send url-encoded data with any other content type?  Except that Facebook's OAuth API sends back access token data in URL-encoded form, but with Content-Type set to ""text/plain"". Even though FormHttpMessageConverter is capable of converting the message, it won't because it doesn't support ""text/plain"".  For these special cases when APIs don't adhere to content types that are consistent with the response data, it'd be helpful for FormHttpMessageConverter to have a setSupportedMediaTypes() just as MappingJacksonJsonConverter has.   --- No further details from [SPR-7929](https://jira.spring.io/browse/SPR-7929?redirect=false)","closed","type: enhancement,","spring-projects-issues","2011-02-01T11:10:47Z","2012-06-19T03:39:55Z"
"","12570","Allow for normal bean wiring semantics for types assignable to Map [SPR-7915]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-7915](https://jira.spring.io/browse/SPR-7915?redirect=false)** and commented  When injecting an entity that extends Map, the container automatically assumes the bean names/instances need to be injected even if that's not the case. Example and discussion here: https://jira.springsource.org/browse/SGF-22  ---  **Affects:** 3.0.5  **Attachments:** - [spring-autowiring-testproject.zip](https://jira.spring.io/secure/attachment/18820/spring-autowiring-testproject.zip) (_2.65 kB_)  **Issue Links:** - #15894 Make spring support like CDI `@Produces` (for Array/Map/Collection inject) (_**""is duplicated by""**_) - #18536 Optional autowire of Map accidentally falls back to unrelated Map - #19684 Can't autowire BiMap: container resolves non-matching Map of value beans - #19164 NoSuchBeanDefinitionException message shows internal array class names - #16794 `@Autowired` does not work for target bean of type Collection - #18904 Doc: Constructor injection of arrays and collections - #18162 Cannot inject List even using `@Named`  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4a0fa69ce469cae2e8c8a1a45f0b43f74a74481d  2 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2011-01-27T08:18:53Z","2019-01-13T07:11:26Z"
"","12359","improve the process of finding actual methods for servlet and portlet handlers [SPR-7703]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-7703](https://jira.spring.io/browse/SPR-7703?redirect=false)** and commented  The process of finding the methods to be invoked for each http dispatch could be improved. While it has been already addressed in a previous released, there are still some minor improvements to be made.  ---  **Issue Links:** - #11510 improve annotation based invocations (_**""duplicates""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ec2603de63341a1a3bba756c8e767c4bd4ea50bd, https://github.com/spring-projects/spring-framework/commit/01e79cfeddf788b3059f9012c0e19aca87e3902c, https://github.com/spring-projects/spring-framework/commit/3552173b81f8e67640300156ed1659b2d2810e37, https://github.com/spring-projects/spring-framework/commit/18540debf6ae0ef4de9feda2b7caee457233e08f","closed","type: enhancement,","spring-projects-issues","2010-10-31T10:42:17Z","2019-01-11T15:31:09Z"
"","12128","c: (constructor) namespace  [SPR-7470]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-7470](https://jira.spring.io/browse/SPR-7470?redirect=false)** and commented  A constructor dedicated namespace similar to the p: one. Example:  ```     ```  ---  **Issue Links:** - #14652 Allow to use constructor-arg as bean attribute for simple case (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/47711c6743eda84e4faa0ae16136b6ecf7da5e30, https://github.com/spring-projects/spring-framework/commit/c08a2764d0da6d8057c0f5eb3f475e70110f65de, https://github.com/spring-projects/spring-framework/commit/6ef987bcedd6c97f9a7683fbefa60b05f66cf408, https://github.com/spring-projects/spring-framework/commit/c13905ad1627f9d91e54ffd199c64380bbf18eb3, https://github.com/spring-projects/spring-framework/commit/095a36e853e7c3977f064f97db7f4af641145bdc","closed","type: enhancement,","spring-projects-issues","2010-08-18T07:35:18Z","2019-01-11T14:10:15Z"
"","12406","Non compilable example in section ""15.4.1 Intercepting requests - the HandlerInterceptor interface"" [SPR-7750]","**[Costa Theodosiou](https://jira.spring.io/secure/ViewProfile.jspa?name=costat)** opened **[SPR-7750](https://jira.spring.io/browse/SPR-7750?redirect=false)** and commented  The example in section ""15.4.1 Intercepting requests - the HandlerInterceptor interface"" has the following code which is not valid Java:      if (openingTime","closed","type: bug,","spring-projects-issues","2010-11-17T20:56:06Z","2012-06-19T03:39:01Z"
"","12861","SPEL Property Accessors called out of order [SPR-8211]","**[Clark Duplichien](https://jira.spring.io/secure/ViewProfile.jspa?name=cduplichien)** opened **[SPR-8211](https://jira.spring.io/browse/SPR-8211?redirect=false)** and commented  Documentation on the SPEL PropertyAccessor.class reads:  > Property resolvers are considered to be ordered and each will be called in > turn. The only rule that affects the call order is that any naming the target class directly in > getSpecifiedTargetClasses() will be called first, before the general resolvers.  However, the attached test case shows property accessors being utilized in an order other than what they are registered in. It may be intended for the property accessors to be utilized in inverse order of their being added to the evaluationContext; if this is the case, it could be made clearer in the javadocs.   ---  **Attachments:** - [PropertyAccessorsEvaluatedOutOfOrderTest.java](https://jira.spring.io/secure/attachment/17993/PropertyAccessorsEvaluatedOutOfOrderTest.java) (_4.11 kB_) - [SPR-8211-patch.txt](https://jira.spring.io/secure/attachment/17994/SPR-8211-patch.txt) (_1.54 kB_)","closed","type: bug,","spring-projects-issues","2011-04-05T11:24:34Z","2012-06-19T03:39:32Z"
"","12829","Expose handler method when BindException is thrown from HandlerMethodInvoker [SPR-8178]","**[Clark Duplichien](https://jira.spring.io/secure/ViewProfile.jspa?name=cduplichien)** opened **[SPR-8178](https://jira.spring.io/browse/SPR-8178?redirect=false)** and commented  When using RequestMapping annotated controller methods, you can only have have access to the handler method if you have an Errors object as one of the method arguments, and perform error handling within the method. This is not ideal for use cases where you want to remove boiler plate code and delegate handling of BindExceptions, but need to have access to the method that (would have been) executed. For example, we have an annotation on the controller method indicating what view the bind errors should be displayed on when a BindExcpetion occurs. Since the annotation is on the controller method, we're currently having to perform some ugly reflection in the HandlerExceptionResolver that handles the BindException in order to extract the controller method for the request from the HandlerAdapter. It would be preferable if we could have one of: 1. The handler method that would have been called exposed in the BindException (or even a subclassed ""HandlerMethodBindException"" or the like for the case when it fails from HandlerMethodInvoker) 2. Or the handler method exposed to the HandlerExceptionResolver itself (Though admittedly have no idea how this would work). 3. Or a (thread-bound) accessor method on AnnotationMethodHandlerAdapter that would return the last resolved controller method. 4. Or a public method in AnnotationMethodHandlerAdapter that accepts Object handler and HttpServletRequest request, and returns the Method object for the request (what we're currently doing, just with reflection).  ---  **Affects:** 3.0.3  **Issue Links:** - #12776 `@ExceptionHandler` doesn't handle exceptions from other controllers (_**""duplicates""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/aa7a100807448ea949d69c2e7b8460ce72fea45b, https://github.com/spring-projects/spring-framework/commit/5309e43ea0fe9b1e18c9b270eacf967546ca13ac, https://github.com/spring-projects/spring-framework/commit/f752b47fcbb3b5bfc31e118cda6f8a24a7ae4e6b  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2011-04-02T18:45:07Z","2019-01-13T07:10:06Z"
"","12340","AllHttpScopesHashModel doesn't wrap objects properly. [SPR-7684]","**[Ciel Yu](https://jira.spring.io/secure/ViewProfile.jspa?name=ciel)** opened **[SPR-7684](https://jira.spring.io/browse/SPR-7684?redirect=false)** and commented  The constructor of AllHttpScopesHashModel doesn't pass the wrapper in the parameters to  SimpleHash. When a custom object wrapper is used, AllHttpScopesHashModel cannot wrap objects properly due to delegating to SimpleHash, WrappingTemplateModel indeed,  which wraps objects with DefaultObjectWrapper in default.  I've made a quick fix.   ---  **Affects:** 3.0.4  **Attachments:** - [AllHttpScopesHashModel.java](https://jira.spring.io/secure/attachment/17261/AllHttpScopesHashModel.java) (_5.96 kB_)","closed","status: invalid,","spring-projects-issues","2010-10-26T05:43:29Z","2019-01-12T05:31:25Z"
"","12550","PetClinic Sample - ${owner.new}"" contains invalid expression(s): javax.el.ELException: [new] is not a valid Java identifier [SPR-7894]","**[Chunshi Zhu](https://jira.spring.io/secure/ViewProfile.jspa?name=szhu)** opened **[SPR-7894](https://jira.spring.io/browse/SPR-7894?redirect=false)** and commented  javax.el.ELException when deploy ootb PetClinic to tcServer2.5 (Tomcat 7.0.6). In Tomcat 7 it has identifier checker turned on by default so this problem surfaces.  14-Jan-2011 16:11:24.131 INFO org.apache.catalina.core.ApplicationContext.log Initializing Spring root WebApplicationContext 14-Jan-2011 16:11:26.246 INFO org.apache.catalina.core.ApplicationContext.log Initializing Spring FrameworkServlet 'petclinic' 14-Jan-2011 16:12:54.221 SEVERE org.apache.catalina.core.ApplicationDispatcher.invoke Servlet.service() for servlet jsp threw exception org.apache.jasper.JasperException: /WEB-INF/jsp/owners/form.jsp(4,1) ""${owner.new}"" contains invalid expression(s): javax.el.ELException: [new] is not a valid Java identifier at org.apache.jasper.compiler.DefaultErrorHandler.jspError(DefaultErrorHandler.java:41) at org.apache.jasper.compiler.ErrorDispatcher.dispatch(ErrorDispatcher.java:407) at org.apache.jasper.compiler.ErrorDispatcher.jspError(ErrorDispatcher.java:198) at org.apache.jasper.compiler.Validator$ValidateVisitor.checkXmlAttributes(Validator.java:1217) at org.apache.jasper.compiler.Validator$ValidateVisitor.visit(Validator.java:870) at org.apache.jasper.compiler.Node$CustomTag.accept(Node.java:1539) at org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2376) at org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2428) at org.apache.jasper.compiler.Validator$ValidateVisitor.visit(Validator.java:889) at org.apache.jasper.compiler.Node$CustomTag.accept(Node.java:1539) at org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2376) at org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2428) at org.apache.jasper.compiler.Node$Visitor.visit(Node.java:2434) at org.apache.jasper.compiler.Node$Root.accept(Node.java:475) at org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2376) at org.apache.jasper.compiler.Validator.validateExDirectives(Validator.java:1789) at org.apache.jasper.compiler.Compiler.generateJava(Compiler.java:216)  Please see tcServer issuetracker below for more details. https://issuetracker.springsource.com/browse/TCS-1742    ---  **Attachments:** - [SPR-7894.patch](https://jira.spring.io/secure/attachment/19533/SPR-7894.patch) (_3.08 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-petclinic/commit/52d4b20d08a6041ffb8bd613e647504b4f5f11cb  1 votes, 2 watchers","closed","","spring-projects-issues","2011-01-18T08:05:09Z","2019-01-11T15:19:21Z"
"","12549","PetClinic Sample - Please modify petclinic application so it does not need to re-map the container's default servlet [SPR-7893]","**[Chunshi Zhu](https://jira.spring.io/secure/ViewProfile.jspa?name=szhu)** opened **[SPR-7893](https://jira.spring.io/browse/SPR-7893?redirect=false)** and commented  All static resources (.html, .png, .css) are not available when deploy ootb petclinic sample application to tcServer 2.5 (which recently upgraded to Tomcat 7.0.6).  Here's the bug I opened in tcServer issuetracker - https://issuetracker.springsource.com/browse/TCS-1745. I'm pasting Mark Thomas's reply in this jira :  Updater: Mark Thomas Date: 18/Jan/11 10:11 AM Comment: Mapping the default Servlet to anything other than / was undocumented and unsupported. If the default servlet was remappped to /static/*, this is what happened:  \/foo is accessed through the url /\/static/foo  The problem is that \/WEB-INF can be accessed through /\/static/WEB-INF. Access to /WWEB-INF is protected. Access to /static/WEB-INF is not. This is a security hole in the pet-clinic sample application that needs to be fixed. I would add that different containers may well behave differently with this mapping so I wouldn't rely on it being consistent.  Tomcat 7.0.4 onwards and 6.0.30 onwards provide protection against this mis-configuration by changing the way the mapping works. Now if the default servlet is re-mapped to /static/*  \/static/foo is accessed through the url /\/static/foo  The workaround until is to move the static content in pet-clinic from / to /static.  The long term fix is to modify Pet Clinic so it does not need to re-map the container's default servlet.   --- No further details from [SPR-7893](https://jira.spring.io/browse/SPR-7893?redirect=false)","closed","status: invalid,","spring-projects-issues","2011-01-18T07:54:42Z","2019-01-12T05:31:10Z"
"","12412","more detailed toString for EntityManager proxies [SPR-7756]","**[Christopher Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=w_c_smith)** opened **[SPR-7756](https://jira.spring.io/browse/SPR-7756?redirect=false)** and commented  In trying to track down a problem with lazy instantiation, I've had to track which EntityManager was in use in which piece of code.  (For some reason I still haven't been able to address, the `@Transactional` context isn't preserved throughout a Spring Security login chain, even when OpenEntityManagerInView is active.)  Printing entityManager.toString() indicates which EntityManagerFactory the EM belongs to but doesn't distinguish between different EntityManagers.  I suggest expanding toString to indicate the underlying EntityManager.  example toString: ""Shared EntityManager proxy for target factory [org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean@4fa342e2]""  I suggest adding a reference to this toString to disambiguate, giving a toString like ""Shared EntityManager proxy `@xxxxxxxx` for target factory...""   ---  **Affects:** 3.1 M1","closed","type: enhancement,","spring-projects-issues","2010-11-20T13:58:59Z","2018-12-28T10:05:05Z"
"","12305","JpaExceptionTranslatorAspect is applied by default (without requiring @Repository) [SPR-7649]","**[Christopher Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=w_c_smith)** opened **[SPR-7649](https://jira.spring.io/browse/SPR-7649?redirect=false)** and commented  Support for Spring exception translation was recently moved into Spring Aspects under https://jira.springframework.org/browse/SPR-6275  However, the advice (on EntityManager, at least) is being applied automatically, which conflicts with the EntityManager contract and could potentially cause serious failures (since the translated exceptions aren't checked, and code which tries to catch the JPA standard exceptions won't see them).  The Spring documentation indicates that this advice will only be applied when `@Repository` is applied to the class in question, but it's applied uniformly.  Sample code (test class not annotated with `@Repository`):  `@PersistenceContext` EntityManager em;  `@Test`(expected=javax.persistence.PersistenceException.class) public void testPersistenceException() { em.persist(new ObjectWithNotNullFields()); // should throw PersistenceException; throws JpaSystemException instead }   ---  **Affects:** 3.0.2  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2010-10-12T22:26:22Z","2012-05-16T01:23:57Z"
"","12240","Migration from 2.5.6 to 3.0.2 - Lazy Init functions differently. [SPR-7584]","**[Christopher Nichols](https://jira.spring.io/secure/ViewProfile.jspa?name=cnichols)** opened **[SPR-7584](https://jira.spring.io/browse/SPR-7584?redirect=false)** and commented  Lightly wordsmithing the original post from the forum.  ""We recently upgraded from Spring 2.5.6 to Spring 3.0.2. We had ""default-lazy-init"" set to true for the majority of the beans and didn't change those settings with our Spring upgrade. However, we found that the lazy-init behavior changed between Spring 2.5 and 3.0.  With 2.5, the beans flagged for lazy-init are truly lazily initialized, i.e. they are initialized on demand after the Spring Application Context instantiation is complete.  With 3.0, the Spring container attempts to eagerly initiate all beans including the ones flagged for lazy-init, as part of the Spring Application Context instantiation step. If any bean flagged for lazy-init throws exception during initialization, the exception will be ignored and Spring Application Context instantiation will continue on...""  See the forum post for more details.  The upgrade guide doesn't have any details about lazy-init changing the way it functions.  As such, this looks a bug.  ---  **Affects:** 3.0.2  **Reference URL:** http://forum.springsource.org/showthread.php?p=318697#post318697  **Issue Links:** - #12992 Lazy-init beans are unnecessarily created during the candidate determination process (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2010-09-21T16:34:03Z","2019-01-12T16:49:33Z"
"","12085","URL in a redirect is not escaped by RedirectView [SPR-7427]","**[Christopher Kluwe](https://jira.spring.io/secure/ViewProfile.jspa?name=chk)** opened **[SPR-7427](https://jira.spring.io/browse/SPR-7427?redirect=false)** and commented  When a redirect URL(-Template) contains a UTF-8 encoded Identifier (e.g. /products/{productName}), it is sent back unencoded to the User Agent. Even using CharacterEncodingFilter with force-encoding enabled there is no Content-Type header in the response. So the User-Agent expects an ISO-8859-1 or US-ASCII encoded URL, urlencodes and requests it. Expecting a UTF8 encoded URL (through CharacterEncodingFilter), Spring decodes this path segment with a wrong encoding.  There are two possible solutions:  1. I need to determine the character encoding of the response and call UriUtils.encodePathSegment for every critical path segment 2. RedirectView calls UriUtils.encodePath itself  I've spent some thought on this and think that the second option is the way to go. The spring:url tag encodes the path parameters according to the response's encoding. To be consistent in this manner, RedirectView should do the same.  The appended simple change in RedirectView works fine for me, though I haven't run any Unit-Tests against it.  ---  **Affects:** 3.0.3  **Attachments:** - [RedirectView.java.patch](https://jira.spring.io/secure/attachment/16968/RedirectView.java.patch) (_624 bytes_)  **Issue Links:** - #12148 Problem with URL encoding in org.springframework.web.servlet.view.RedirectView.RedirectView(String url) - #12129 Regression in redirect URL encoding  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6e303d25c4e49f05096b8abac64c6bddc127b39c","closed","type: enhancement,","spring-projects-issues","2010-08-06T05:56:37Z","2019-01-11T14:08:17Z"
"","12530","Add wrapper class for SimpleNamingContextBuilder to allow mocking JNDI through Spring Application Configuration [SPR-7873]","**[Christopher Benjamin](https://jira.spring.io/secure/ViewProfile.jspa?name=cbenjamin)** opened **[SPR-7873](https://jira.spring.io/browse/SPR-7873?redirect=false)** and commented  I wanted to share a class that I wrote that I think might be useful to others. for allowing mocking JNDI datasource or JMS Connection factory directly from a Spring configuration file.  ``` public class SimpleNamingContextBuilderConfigurator implements InitializingBean {      private Map jndiMap;      public void setJndiMap(Map jndiMap) {         this.jndiMap = jndiMap;     }      public Map getJndiMap() {         return jndiMap;     }      public void afterPropertiesSet() throws Exception {         SimpleNamingContextBuilder builder = new SimpleNamingContextBuilder();         for (String jndiName : jndiMap.keySet()) {             builder.bind(jndiName, jndiMap.get(jndiName));         }         builder.activate();     }  } ```  Having this class allows us to specify the mocking within a Spring configuration file, instead of hardcoding it in the Test class.  ```xml                                           ```  We've used this a lot in our component tests by including the spring configuration above in our  AbstractTransactionalJUnit4SpringContextTests based tests.   ---  **Reference URL:** http://forum.springsource.org/showthread.php?131910-improve-JNDI-lookup-in-test-phase","closed","type: enhancement,","spring-projects-issues","2011-01-11T20:40:50Z","2016-06-02T08:36:12Z"
"","12342","NullPointerException in InjectionMetadata [SPR-7686]","**[Christophe Roudet](https://jira.spring.io/secure/ViewProfile.jspa?name=croudet)** opened **[SPR-7686](https://jira.spring.io/browse/SPR-7686?redirect=false)** and commented  When using SpringBeanAutowiringSupport.processInjectionBasedOnServletContext() a NullPointerException is raised in InjectionMetadata.checkPropertySkipping(PropertyValues pvs)  ``` protected boolean checkPropertySkipping(PropertyValues pvs) {   if (this.skip == null) {     synchronized (pvs) { //","closed","in: core,","spring-projects-issues","2010-10-26T07:41:27Z","2019-01-11T14:35:01Z"
"","12053","Document generic use of ApplicationListener interface [SPR-7395]","**[christophe blin](https://jira.spring.io/secure/ViewProfile.jspa?name=cblin)** opened **[SPR-7395](https://jira.spring.io/browse/SPR-7395?redirect=false)** and commented  In the §3.13.2 http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/htmlsingle/spring-framework-reference.html#context-functionality-events  The BlackListNotifier class which implements the interface ApplicationListener is registered as a subscriber to the application context and will receive the BlackListEvent. In order to access properties specific to BlackListEvent, the listener must perform a downcast.  This is not true because of the java generic. You simply have to write BlackListNotifier implements ApplicationListener\  ---  **Affects:** 3.0 GA  **Issue Links:** - #12080 Document use of ApplicationEventPublisher (_**""duplicates""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9008cf907ae2d537cc65640a79f0834823f113fb","closed","in: core,","spring-projects-issues","2010-07-26T00:57:44Z","2019-01-11T13:38:35Z"
"","12645","No support of persistent HTTP connections within org.springframework.http.client.SimpleClientHttpRequestFactory (v3.0.4) [SPR-7990]","**[Christian Möller](https://jira.spring.io/secure/ViewProfile.jspa?name=dcmoeller)** opened **[SPR-7990](https://jira.spring.io/browse/SPR-7990?redirect=false)** and commented  Hello,  I've found that Spring's org.springframework.http.client.SimpleClientHttpRequestFactory (at least version 3.0.4) does not support persistent HTTP connections. Applying it with RestTemplate yields creation of a lot of HTTP connections (up to some 10000s) under medium load. WireShark shows that each connection is closed by the client immediately after response has been handled. This happens even if you configure your VM according to the recommendations from here:  http://download.oracle.com/javase/6/docs/technotes/guides/net/properties.html  and here:  http://download.oracle.com/javase/6/docs/technotes/guides/net/http-keepalive.html  Based on these recommendations and to proof it as a bug I've patched org.springframework.http.client.SimpleClientHttpResponse the following way: - Memorizing all kind of streams provided by getBody() method - Draining and closing the memorized streams within close() method - Especially not disconnecting the HttpURLConnection within close()  This gives you something like this:  class SimpleClientHttpResponse implements ClientHttpResponse {      private final List memorizedStreams = new LinkedList();          [...]          public InputStream getBody() throws IOException {         final InputStream errorStream = connection.getErrorStream();         return memorizeOpenedStream(errorStream != null ? errorStream : connection.getInputStream());     }          private InputStream memorizeOpenedStream(final InputStream streamToMemorize) {         memorizedStreams.add(streamToMemorize);         return streamToMemorize;     }          public void close() {         for (InputStream stream : memorizedStreams) {             drainAndCloseQuietly(stream);         }         // NO disconnect of HttpURLConnection!     }          private void drainAndCloseQuietly(final InputStream stream) {         if (stream == null) return;                  byte[] devNull = new byte[256];         try {             while (stream.read(devNull) > 0) {}         } catch (IOException e) {}         IOUtils.closeQuietly(stream);     }  }  Hopefully this might give you an idea of how to fix it.  Regards  Christian Möller  ---  **Affects:** 3.0.4  **Issue Links:** - #18612 HTTP persistent connections for HTTP Invoker and RestTemplate","closed","type: enhancement,","spring-projects-issues","2011-02-23T00:44:20Z","2019-01-11T16:18:17Z"
"","12249","Spring 3.0's PropertyPlaceholderConfigurer processes colons as default value separator [SPR-7593]","**[Christian Mueller](https://jira.spring.io/secure/ViewProfile.jspa?name=muellerc)** opened **[SPR-7593](https://jira.spring.io/browse/SPR-7593?redirect=false)** and commented  I use Springs PropertyPlaceholderConfigurer in Apache Camel. Because Apache Camel has also a property placeholder configurer mechanism, I configured Spring to ignore unresolvable placeholders (and let the other placeholders do the job). This works for me in 2.5.6, but braks in 3.0.3. My used placeholder value ""file://target/outBox?fileName=test-${date:now:yyyyMMdd}.txt"" was changed to ""file://target/outBox?fileName=test-now:yyyyMMdd.txt"" (without the leading ""${date"" and trailing ""}"").  My configuration:  ``` fromEndpoint=direct:start toEndpoint=file://target/outBox?fileName=test-${date:now:yyyyMMdd}.txt ```  ```   	 	 		 		 	 	 	 		 		 	  	 		 	  ```  Thanks in advance, Christian   ---  **Affects:** 3.0.3  **Attachments:** - [SPR-7593_test.patch](https://jira.spring.io/secure/attachment/17144/SPR-7593_test.patch) (_1.12 kB_)","closed","type: enhancement,","spring-projects-issues","2010-09-26T14:59:31Z","2011-12-12T19:21:17Z"
"","12023","PathMatchingResourcePatternResolver inconsistently throws IOException in case of non-existing resources [SPR-7365]","**[Christian Cwienk](https://jira.spring.io/secure/ViewProfile.jspa?name=ccwienk)** opened **[SPR-7365](https://jira.spring.io/browse/SPR-7365?redirect=false)** and commented  PathMatchingResourcePatternResolver behaves inconsistently (and imho in an unintuitive manner) as to the respect of throwing IOExceptions when resolving a given ant-style path pattern to concrete resources (tested with local filesystem):  In cases where no files are found (existing directory with no matching files), an empty array of Resource is returned (which is intuitive). If however, a part of the pathPattern does not exist (i.e. a directory does not exist), an IOException is being thrown _unless_ the non-existing directory is specified after the first occurence of a wildcard, in which case an empty result array is returned.  imho, this is unintuitive and inconsistent for two reasons:  1. I'd expect a path _pattern_ matcher to try match applying a best-effort strategy; in case nothing can be matched, I'd regard that as a normal outcome and would expect to get an empty result-array (which in some but not all cases actually happens)  2. Provided throwing an IOException in case part of the specified path does not exist made sense; then I'd expect this behaviour to be also applied for path parts after occurrences of wildcards (which is not the case).  ---  I've created a possible solution for this issue by subclassing the class in question (see attached files). However I'd very much appreciate it if this change could be incorporated into a future release of the Spring framework.  Best Regards,  Christian  ---  **Affects:** 2.5.6  **Attachments:** - [BestEffortPathMatchingResourcePatternResolver.java](https://jira.spring.io/secure/attachment/16869/BestEffortPathMatchingResourcePatternResolver.java) (_2.96 kB_) - [BestEffortPathMatchingResourceResolver_fixedMethodOnly.java](https://jira.spring.io/secure/attachment/16868/BestEffortPathMatchingResourceResolver_fixedMethodOnly.java) (_633 bytes_)","closed","type: enhancement,","spring-projects-issues","2010-07-11T23:43:54Z","2019-01-13T21:45:26Z"
"","11972","RestTemplate does not handle null uri template parameters [SPR-7314]","**[chris snow](https://jira.spring.io/secure/ViewProfile.jspa?name=snowch)** opened **[SPR-7314](https://jira.spring.io/browse/SPR-7314?redirect=false)** and commented  I am trying to call a rest service that has an optional path parameter (areaId, below).  Setting the optional path parameter to null causes a NPE (exception below).  The implications of this are that I have to create a different version of the method call for each optional call parameter and use lots of conditional logic to check if parameter values are null to decide which method to use.  ``` String FIND_AREAS_QUERY =      ""/areas/{areaId}?countryId={countryId}&cityId={cityId}"";   searchCriteria.setCountryID(123); searchCriteria.setCityID(345); searchCriteria.setAreaID(null);  areas = restTemplate.getForObject(     restEndpointUrl + FIND_AREAS_QUERY,     Areas.class,     searchCriteria.getAreaID(),   /* NPE */     searchCriteria.getCountryID(),     searchCriteria.getCityID() ); ```  The exception is as follows:  ``` java.lang.NullPointerException 	at org.springframework.web.util.UriTemplate.expand(UriTemplate.java:128) 	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:400) 	at org.springframework.web.client.RestTemplate.getForObject(RestTemplate.java:199) ```  The current workaround is below:  This can get quite a burden for lots of optional parameters.  ``` String FIND_AREAS_QUERY =      ""/areas/{areaId}?countryId={countryId}&cityId={cityId}"";   searchCriteria.setCountryID(123); searchCriteria.setCityID(345); searchCriteria.setAreaID(null);  if (searchCriteria.getAreaID() != null) {    areas = restTemplate.getForObject(        restEndpointUrl + FIND_AREAS_QUERY,        Areas.class,        searchCriteria.getAreaID(),        searchCriteria.getCountryID(),        searchCriteria.getCityID()    ); } else {    areas = restTemplate.getForObject(        restEndpointUrl + FIND_AREAS_QUERY,        Areas.class,        searchCriteria.getCountryID(),        searchCriteria.getCityID()    ); } ```    ---  **Affects:** 3.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3160ddf0e8c43f8d27b38f82b3091314aba0579f","closed","type: enhancement,","spring-projects-issues","2010-06-22T03:33:47Z","2012-06-19T03:42:47Z"
"","12489","Add updateOnly option to @Cacheable annotation [SPR-7833]","**[Chris Bonham](https://jira.spring.io/secure/ViewProfile.jspa?name=bonhamcm)** opened **[SPR-7833](https://jira.spring.io/browse/SPR-7833?redirect=false)** and commented  Sometimes it is necessary to strictly update the cache without retrieving the value first, for example when pre-loading a cache.  I've created a patch that adds a boolean updateOnly flag to the `@Cacheable` annotation that is false by default.  If set to true, the underlying cache is not consulted, but rather the return value is placed directly in the cache.   ---  **Affects:** 3.1 M1  **Attachments:** - [updateOnly.patch](https://jira.spring.io/secure/attachment/17472/updateOnly.patch) (_4.83 kB_)  3 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2010-12-21T16:05:03Z","2012-06-19T03:39:08Z"
"","12488","Allow target access in Cache Key SpEL [SPR-7832]","**[Chris Bonham](https://jira.spring.io/secure/ViewProfile.jspa?name=bonhamcm)** opened **[SPR-7832](https://jira.spring.io/browse/SPR-7832?redirect=false)** and commented  Occasionally a Spring Cache Key may need access to the target object in the SpEL.  I've included a patch to add a #target variable to the LazyParamAwareEvaluationContext for this use case.  ---  **Affects:** 3.1 M1  **Attachments:** - [target-spel.patch](https://jira.spring.io/secure/attachment/17471/target-spel.patch) (_4.79 kB_)  **Issue Links:** - #12662 Cache support - extend key features","closed","type: enhancement,","spring-projects-issues","2010-12-21T10:03:32Z","2019-01-11T15:17:20Z"
"","12392","Returning EmptyHolder from Cache causes ClassCastException [SPR-7736]","**[Chris Bonham](https://jira.spring.io/secure/ViewProfile.jspa?name=bonhamcm)** opened **[SPR-7736](https://jira.spring.io/browse/SPR-7736?redirect=false)** and commented  In the CacheAspectSupport class, if an EmptyHolder object is returned from the Cache, a ClassCastException can occur if the calling method expects a different type of object.  I have created a patch that returns null if the EmptyHolder is returned.  The check uses the EmptyHolder class since the actual EmptyHolder object could be from a separate JVM so an identity comparision with NULL_OBJECT won't work.   ---  **Affects:** 3.1 M1  **Attachments:** - [EmptyHolder.patch](https://jira.spring.io/secure/attachment/17348/EmptyHolder.patch) (_750 bytes_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8285e9c2a72747472c687f105b57037f3705eeb2","closed","in: core,","spring-projects-issues","2010-11-10T10:43:55Z","2012-06-19T03:39:17Z"
"","12872","Eliminate EarlyBeanReferenceProxy use in @Feature method parameters [SPR-8223]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8223](https://jira.spring.io/browse/SPR-8223?redirect=false)** and commented   ---  **Affects:** 3.1 M1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/111fb71fe1ccb8d3a5e06e61461edd87d6d025f4","closed","type: task,","spring-projects-issues","2011-04-06T21:33:01Z","2012-06-19T03:39:36Z"
"","12858","Expose #order() attribute on @TxAnnotationDriven [SPR-8208]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8208](https://jira.spring.io/browse/SPR-8208?redirect=false)** and commented  `@TxAnnotationDriven` does not expose an #order() attribute due to awkwardness of specifying default values for int-based annotation attributes.  We can reconsider adding this based on user need.   ---  **Affects:** 3.1 M2","closed","type: enhancement,","spring-projects-issues","2011-04-05T05:18:39Z","2013-02-25T10:13:33Z"
"","12857","Relax requirement for transaction manager name/reference in EnableTransactionManagement [SPR-8207]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8207](https://jira.spring.io/browse/SPR-8207?redirect=false)** and commented  This will allow falling back to by-type lookups when using the new `@EnableTransationManagement` annotation   --- No further details from [SPR-8207](https://jira.spring.io/browse/SPR-8207?redirect=false)","closed","type: enhancement,","spring-projects-issues","2011-04-05T04:52:01Z","2012-06-19T03:39:03Z"
"","12856","Rename FeatureAnnotationParser#process to #parse [SPR-8206]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8206](https://jira.spring.io/browse/SPR-8206?redirect=false)** and commented  rename from #process to #parse for naming consistency.   ---  **Affects:** 3.1 M1","closed","status: invalid,","spring-projects-issues","2011-04-05T03:15:05Z","2019-01-12T05:30:36Z"
"","12854","Overhaul core container error reporting [SPR-8204]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8204](https://jira.spring.io/browse/SPR-8204?redirect=false)** and commented  Consider moving away from stack-trace based errors at container bootstrap time in favor of a more compiler-like output (think javac), where all errors are explained in a concise and intuitive manner, possibly with suggests for resolution.  See also CollatingProblemReporter, and the new ProblemCollector interface  ---  **Issue Links:** - #8389 Condense exception messages accumulated through recursion - #10336 Support collated problem reporting - #13696 Warn when attempting to inject values into fields marked final","open","type: enhancement,","spring-projects-issues","2011-04-04T21:21:22Z","2019-01-11T13:08:08Z"
"","12852","Introduce a reserved default profile name [SPR-8203]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8203](https://jira.spring.io/browse/SPR-8203?redirect=false)** and commented  Early in Spring 3.1 M1 a reserved 'default' profile name was introduced.  We backed it out under the rationale that it's less magical to express defaults explicitly through `spring.profiles.default` or `ConfigurableEnvironment#setDefaultProfiles`.  This can be (re-)introduced; just wanted to keep it simple to start and see if it's truly wanted/needed.  ---  **Affects:** 3.1 M1  **Issue Links:** - #13919 Add ability to specify whether a bean profile is active by default (_**""is duplicated by""**_) - #12434 Support 'default' profile (_**""supersedes""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c4a13507f0bcb10bd870543e8a1f1f130505c321  4 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2011-04-04T19:28:49Z","2019-01-11T13:08:00Z"
"","12849","Visibility mismatch in ConfigurationClassPostProcessor#processConfigBeanDefinitions [SPR-8200]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8200](https://jira.spring.io/browse/SPR-8200?redirect=false)** and commented  The following method is public:  `org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(BeanDefinitionRegistry, ConfigurationClassBeanDefinitionReader)`  yet `ConfigurationClassBeanDefinitionReader` is package private.  Increase visibility of the latter, as STS needs to call it.   ---  **Affects:** 3.1 M1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6fcea8b99da45f287149796ef2598f0d71758793, https://github.com/spring-projects/spring-framework/commit/4f7bdbd3de8e1ca91ad84ea41afc4f525e1b4fd8, https://github.com/spring-projects/spring-framework/commit/4520ea8690fa8769a2d45658883eac51ea2453ed","closed","type: bug,","spring-projects-issues","2011-04-04T07:12:17Z","2012-06-19T03:39:32Z"
"","12848","Support Bean Validation 1.1 (JSR-349) [SPR-8199]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8199](https://jira.spring.io/browse/SPR-8199?redirect=false)** and commented  Bean Validation 1.1 (building on our BV 1.0 support in Spring 3.0)  ---  **Issue Links:** - #15099 Cannot configure validationMessageSource when using Hibernate 5 as validation implementation  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e0c56a124ab47b8b2aa0415c7b0ab32c20c76821, https://github.com/spring-projects/spring-framework/commit/0d0122239d84ca27069350de19394273ea3aced3, https://github.com/spring-projects/spring-framework/commit/23bf5f563bd4757500aac0cf94e91be61c1e159a, https://github.com/spring-projects/spring-framework/commit/cf93d38c5605b333e1a6ffc78b6f76a7c586b633, https://github.com/spring-projects/spring-framework/commit/2a53a2de0e601aba8395880a7d7a06b18c3f5cea  15 votes, 21 watchers","closed","has: votes-jira,","spring-projects-issues","2011-04-04T04:24:12Z","2019-01-11T13:05:26Z"
"","12847","Support Expression Language 3.0 (JSR-341) [SPR-8198]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8198](https://jira.spring.io/browse/SPR-8198?redirect=false)** and commented  EL 3.0 (refining and adapting our expression parser in Spring 3.0)  http://www.jcp.org/en/jsr/detail?id=341   ---  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2011-04-04T04:22:38Z","2015-07-02T02:12:41Z"
"","12846","Support JMS 2.0 (JSR-343) [SPR-8197]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8197](https://jira.spring.io/browse/SPR-8197?redirect=false)** and commented  JMS 2.0 (exploring a native JMS API style for use with Spring)  http://jcp.org/en/jsr/detail?id=343  Must-haves: * a ""deliveryDelay"" property on JmsTemplate * support for ""deliveryDelay"" and the new async sending methods in our CachedMessageProducer (reimplementing it as a JDK proxy for compatibility across JMS 1.1/2.0) * support for the new ""create(Shared)DurableConsumer"" variants in our CachedSession * support for the new ""createSession"" variants with fewer parameters in our SingleConnectionFactory  ---  **Issue Links:** - #14515 Annotation-driven JMS endpoints  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a3d7dc09ef7af361705704ca9f457b4901815663","closed","type: enhancement,","spring-projects-issues","2011-04-04T04:21:35Z","2019-01-11T13:05:31Z"
"","12845","Support Java Temporary Caching API (JSR-107) [SPR-8196]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8196](https://jira.spring.io/browse/SPR-8196?redirect=false)** and commented  JSR-107 caching (building on our cache abstraction in Spring 3.1)  http://jcp.org/en/jsr/summary?id=107 http://gregluck.com/blog/archives/2011/03/news-on-jsr107-jcache-and-jsr342-java-ee-7/  ---  **Issue Links:** - #13417 Support for JCache (JSR-107) (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2011-04-04T04:20:57Z","2019-01-11T13:05:33Z"
"","12844","Support Concurrency Utilities for Java EE (JSR-236) [SPR-8195]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8195](https://jira.spring.io/browse/SPR-8195?redirect=false)** and commented  JSR-236 concurrency (building on our SE 7 support in Spring 3.1)  http://www.jcp.org/en/jsr/detail?id=236  ---  **Issue Links:** - #21654 Deprecate CommonJ scheduling support in favor of JSR-236 Concurrency Utilities  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4004e53d971ce65631bb55e533edbb95664a69a7, https://github.com/spring-projects/spring-framework/commit/49758a2a96261d827c9f448af7de157116e547fb","closed","type: enhancement,","spring-projects-issues","2011-04-04T04:19:40Z","2019-01-11T13:05:29Z"
"","12843","Support JPA 2.1 (JSR-338) [SPR-8194]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8194](https://jira.spring.io/browse/SPR-8194?redirect=false)** and commented  JPA 2.1 (building on our JPA 2.0 support in Spring 3.0)  Most importantly, this is about synchronized vs unsynchronized persistence contexts: createEntityManager(SynchronizationType.SYNCHRONIZED/UNSYNCHRONIZED, Map) as well as `@PersistenceContext`(synchronizationType=SYNCHRONIZED/UNSYNCHRONIZED) for both transactional and extended EntityManagers - and both for Spring-managed resource transactions and JTA transactions.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ff160f9aebf2d8cddbe8984aa50b1b48deca1d28, https://github.com/spring-projects/spring-framework/commit/9f9dc34b534ef501aa2e3e747f81ccd82be1acda","closed","type: enhancement,","spring-projects-issues","2011-04-04T04:18:25Z","2013-07-17T07:51:29Z"
"","12842","Support Servlet 3.1 (JSR-340) [SPR-8193]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8193](https://jira.spring.io/browse/SPR-8193?redirect=false)** and commented  Servlet 3.1 (building on our Servlet 3.0 support in Spring 3.1)  http://www.jcp.org/en/jsr/detail?id=340  ---  **Issue Links:** - #16713 ShallowEtagHeaderFilter doesn't support Servlet 3.1 setContentLengthLong","closed","type: enhancement,","spring-projects-issues","2011-04-04T04:18:03Z","2019-01-11T13:05:41Z"
"","12840","Support for ByteBuddy as an alternative to CGLIB [SPR-8190]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8190](https://jira.spring.io/browse/SPR-8190?redirect=false)** and commented  Tracking issue for CGLIB problems and possible solutions when moving to Javassist or, as recently suggested, Byte Buddy.  ---  **Attachments:** - [permgen-leak-spring.tar.gz](https://jira.spring.io/secure/attachment/21203/permgen-leak-spring.tar.gz) (_492.76 kB_)  **Issue Links:** - #8831 Latest Spring AOP + CGLib caches classes from the same classloader causing CCE in Grails (_**""depends on""**_) - #10325 Consider using javassist for proxy generation (_**""depends on""**_) - #12142 `@Configuration` with AspectJ instead of CGLIB (_**""depends on""**_) - #7964 Look at phasing out cglib with javaassist (_**""is duplicated by""**_)  44 votes, 45 watchers","open","has: votes-jira,","spring-projects-issues","2011-04-04T01:24:30Z","2019-01-13T07:09:58Z"
"","12839","Revised support for bean definition visibility and overriding [SPR-8189]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8189](https://jira.spring.io/browse/SPR-8189?redirect=false)** and commented  Tracking issue for requests related to bean visibility and overriding. See 'depends on' links, the 'bean-visibility-and-overriding' label, and possibly sub-tasks.  ---  **Issue Links:** - #12723 Provide programmatic access to inner beans (_**""depends on""**_) - #10181 Bean Configuration Overriding (_**""depends on""**_) - #11829 Support `@Bean` method visibility (_**""depends on""**_) - #12637 Support profile exclusivity and/or bean definition finality (_**""depends on""**_) - #11690 Allow `@Bean` methods to override definitions in XML (_**""depends on""**_) - #12000 Allow bean definitions from `@Configuration` classes to override those defined in XML (_**""depends on""**_) - #12838 Improve support for `@Configuration` class hierarchies (_**""depends on""**_)  7 votes, 13 watchers","closed","status: bulk-closed,","spring-projects-issues","2011-04-04T00:45:47Z","2019-01-13T07:10:00Z"
"","12838","Improve support for @Configuration class hierarchies [SPR-8187]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8187](https://jira.spring.io/browse/SPR-8187?redirect=false)** and commented  Consider the following `@Configuration` class hierarchy:`@Configurationabstract` class BaseConfig { `@Bean` Foo foo() { return new Foo(dataSource()); }      abstract @Bean DataSource dataSource();  }  `@Configuration` class ConfigA extends BaseConfig { `@Bean` DataSource dataSource() { return ...; } }  `@Configuration` class ConfigB extends BaseConfig { `@Override` `@Bean` DataSource dataSource() {        return ...;    } } }  It is not currently defined what will happen if all three of these classes are scanned.  Currently the container will parse each `@Configuration` class and register bean definitions as each are encountered.  This means that the DataSource `@Bean` will be registered three times, and may not be registered in the correct order (e.g. the base class abstract method could be the last encountered and thus the one to override the previous two definitions.  The container should have awareness of `@Configuration` class hierarchies, and parse/register only the most specific/narrow base class.  Of course, in cases where there are sibling subclasses (same level in the inheritance tree), registration (and overrides) will occur on an as-scanned (or as-registered) basis.  ---  **Issue Links:** - #12839 Revised support for bean definition visibility and overriding (_**""is depended on by""**_) - #12837 Automatically detect and register nested `@Configuration` classes (_**""is depended on by""**_) - #10993 Preserve 'reader' attribute in `@ImportResource` hierarchies  2 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2011-04-04T00:30:09Z","2019-01-13T07:10:02Z"
"","12837","Automatically detect and register nested @Configuration classes [SPR-8186]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8186](https://jira.spring.io/browse/SPR-8186?redirect=false)** and commented  The following is now possible in XML as of Spring 3.1 M1:  ```                                                            ```  The following is a sketch of the equivalent to the above.  ``` @Configuration public interface DataSourceConfig { 	@Bean DataSource dataSource(); }  @Configuration public abstract class Config implements DataSourceConfig {  	@Bean 	public Foo foo() { 		return new Foo(dataSource()); 	}  	 	@Profile(""p1"") 	@Configuration 	static class Profile1Config extends Config { 		@Override @Bean 		public DataSource dataSource() { 			return ...; 		} 	}  	@Profile(""p2"") 	@Configuration 	static class Profile2Config extends Config { 		@Override @Bean 		public DataSource dataSource() { 			return ...; 		} 	} } ```  If nested configuration classes are automatically detected, then bootstrapping is as easy as:  ``` ApplicationContext ctx = new AnnotationConfigApplicationContext(Config.class); Foo foo = ctx.getBean(Foo.class); // ... ```  If they are not, then one must register (or `@Import`) `Config`, `Profile1Config`, and `Profile2Config`, either of which is awkward.  ---  **Attachments:** - [mylyn-context.zip](https://jira.spring.io/secure/attachment/18245/mylyn-context.zip) (_433.80 kB_)  **Issue Links:** - #12838 Improve support for `@Configuration` class hierarchies (_**""depends on""**_) - #13005 Support introspection of nested classes with ClassMetadata (_**""depends on""**_) - #12689 Automatically detect and register static nested `@FeatureConfiguration` classes - #21739 Revisit `@Bean` introspection between `@Configuration` classes and 'lite' beans","closed","type: enhancement,","spring-projects-issues","2011-04-04T00:18:47Z","2019-01-13T07:10:04Z"
"","12836","Allow child ApplicationContext to inherit parent Environment [SPR-8185]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8185](https://jira.spring.io/browse/SPR-8185?redirect=false)** and commented  See Forum link for context.  In short, an `ApplicationContextInitializer` applied to the root application context will not apply to the child `DispatcherServlet` application context.  Consider inheriting the parent `Environment` by default in any hierarchical application context.  Then any child `ACI` can provide _additional_ initialization, but parent configuration need not be repeated.   ---  **Reference URL:** http://forum.springsource.org/showthread.php?t=104292&goto=newpost  **Attachments:** - [mylyn-context.zip](https://jira.spring.io/secure/attachment/18264/mylyn-context.zip) (_2.45 kB_)","closed","type: enhancement,","spring-projects-issues","2011-04-03T23:35:04Z","2012-06-19T03:39:37Z"
"","12835","Allow default ParameterNameDiscoverer such that  works by default for BeanFactory [SPR-8184]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8184](https://jira.spring.io/browse/SPR-8184?redirect=false)** and commented  See AbstractAutowireCapableBeanFactory.setParameterNameDiscoverer  I ran into some pretty unintuitive error messages today while trying to use  syntax for constructor argument disambiguation.  I was doing this in a unit test that uses only an XmlBeanFactory as opposed to a full ApplicationContext.  I was surprised to see that it didn't work, and after a little investigation, I realized that there is no default ParameterNameDiscoverer if you're using just a BeanFactory.  The javadoc states that there is no default in order to avoid a dependency on ASM.  Why is this important, given that .beans depends on core and .core depends on .asm?  It's true that there is no instance of a direct dependency on org.springframework.asm.* from any code in org.springframework.beans.*, yet at the same time the .beans ivy.xml does have a required compile-time dependency on .asm.  Perhaps this avoidance of .asm deps from .beans is just outdated?  If so, I can add an issue that documents the strange error, and then simply set a default for the parameterNameDiscoverer property in AbstractAutowireCapabaleBeanFactory and be done with it.   ---  **Attachments:** - [mylyn-context.zip](https://jira.spring.io/secure/attachment/18350/mylyn-context.zip) (_2.87 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4fc386a4f5118605a8f82154374fb451437fff57","closed","type: enhancement,","spring-projects-issues","2011-04-03T23:23:16Z","2012-06-19T03:39:02Z"
"","12834","Unify PolymorphicConfigurationTests and BeanMethodPolymorphismTests [SPR-8183]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8183](https://jira.spring.io/browse/SPR-8183?redirect=false)** and commented   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8cb5c36512e6355d379f533d75d2bef63d0de6bd","closed","","spring-projects-issues","2011-04-03T23:20:17Z","2019-01-11T13:03:52Z"
"","12833","Update reference documentation regarding idref and local [SPR-8182]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8182](https://jira.spring.io/browse/SPR-8182?redirect=false)** and commented  Based on decisions made in other subtasks of #12830.  ---  This issue is a sub-task of #12830  **Issue Links:** - #12711 Decide what to do with 'local' attribute in beans: namespace (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/50dfa037d005639a871b804da2488b74b466db25  1 votes, 4 watchers","closed","type: documentation,","spring-projects-issues","2011-04-03T22:25:53Z","2019-01-11T13:03:57Z"
"","12832","Consider pruning 'idref' and 'local' from spring-beans-3.1.xsd [SPR-8181]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8181](https://jira.spring.io/browse/SPR-8181?redirect=false)** and commented  ---  This issue is a sub-task of #12830","closed","status: declined,","spring-projects-issues","2011-04-03T22:21:12Z","2019-01-11T13:03:59Z"
"","12831","Test idref/local checks by container [SPR-8180]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8180](https://jira.spring.io/browse/SPR-8180?redirect=false)** and commented  XML parsers (and thus STS tooling) won't catch idref / local errors, but the container still will (or should).  Verify this.  ---  This issue is a sub-task of #12830","closed","","spring-projects-issues","2011-04-03T22:20:11Z","2019-01-11T13:03:56Z"
"","12830","Evaluate 'idref' element and 'local' attribute in Spring 3.1 [SPR-8179]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8179](https://jira.spring.io/browse/SPR-8179?redirect=false)** and commented  Spring 3.1 eliminates the use of xsd:ID typing, minimizing the utility of idref and local.  ---  **Sub-tasks:** - #12831 Test idref/local checks by container - #12832 Consider pruning 'idref' and 'local' from spring-beans-3.1.xsd - #12833 Update reference documentation regarding idref and local  **Issue Links:** - #12711 Decide what to do with 'local' attribute in beans: namespace (_**""is duplicated by""**_) - #8731 Add external-ref and local-ref to DTD/XSD - #6579 XML simplification for property tag with nested ref-local tag - #7133 Allow short-form ""idref"" properties in addition to ""ref"" - #7189 Allow  to set property value to id of bean - #7719 idref could contain a app context scope to prevent from going to parent bean factory","closed","type: task,","spring-projects-issues","2011-04-03T22:18:53Z","2019-01-11T13:04:04Z"
"","12823","Introduce FeatureSpecification types for util:* elements and parsers [SPR-8172]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8172](https://jira.spring.io/browse/SPR-8172?redirect=false)** and commented  ---  This issue is a sub-task of #12694","closed","status: declined,","spring-projects-issues","2011-04-01T05:25:36Z","2019-01-11T13:04:14Z"
"","12822","Investigate ScopedProxyBeanDefinitionDecorator (aop:scoped-proxy) [SPR-8171]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8171](https://jira.spring.io/browse/SPR-8171?redirect=false)** and commented  This one is particularly sticky. aop:scoped-proxy is the one and only `BeanDefinitionDecorator` in existence, so there's no precedent for supporting such a beast with the `FeatureSpecification` model.  Nor necessarily should there be.  Much like ``, this is likely a 'feature' that should take a different form when it comes to actual configuration.  Just brainstorming, a `@ScopedProxy` annotation may be appropriate, perhaps at the parameter level on `@Bean` methods dependent on the object to be proxied:  ``` @Bean @Scope(""session"") public UserPrefs userPrefs() {    return ...; }  @Bean public FooController fooController(@ScopedProxy UserPrefs userPrefs) {  } ```  Such an approach would resolve an often-mentioned claim that ``) being declared on the scoped bean itself is the wrong location - that it should be inverted, such that the caller asks for the proxy only if needed.  The exact approach above would suffer from the inability to call (inject) `@Bean` methods that accept parameters, but that's digressing a bit at this stage.  ---  This issue is a sub-task of #12694","closed","status: declined,","spring-projects-issues","2011-04-01T05:13:36Z","2019-01-11T13:04:19Z"
"","12821","Introduce JcaListenerContainer for JcaListenerContainerParser (jms:jca-listener-container) [SPR-8170]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8170](https://jira.spring.io/browse/SPR-8170?redirect=false)** and commented  ---  This issue is a sub-task of #12694","closed","status: declined,","spring-projects-issues","2011-04-01T05:04:28Z","2019-01-11T13:04:21Z"
"","12820","Introduce JmsListenerContainer for JmsListenerContainerParser (jms:listener-container) [SPR-8169]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8169](https://jira.spring.io/browse/SPR-8169?redirect=false)** and commented  ---  This issue is a sub-task of #12694","closed","status: declined,","spring-projects-issues","2011-04-01T05:03:36Z","2019-01-11T13:04:22Z"
"","12819","Introduce FeatureSpecification for AnnotationDrivenBeanDefinitionParser (context:annotation-driven) [SPR-8168]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8168](https://jira.spring.io/browse/SPR-8168?redirect=false)** and commented  ---  This issue is a sub-task of #12694","closed","status: declined,","spring-projects-issues","2011-04-01T03:52:19Z","2019-01-11T13:04:31Z"
"","12818","Introduce FeatureSpecification for InitializeDatabaseBeanDefinitionParser (jdbc:initialize-database) [SPR-8167]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8167](https://jira.spring.io/browse/SPR-8167?redirect=false)** and commented  ---  This issue is a sub-task of #12694","closed","status: declined,","spring-projects-issues","2011-04-01T03:50:13Z","2019-01-11T13:04:35Z"
"","12817","Introduce FeatureSpecification for EmbeddedDatabaseBeanDefinitionParser (jdbc:embedded-database) [SPR-8166]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8166](https://jira.spring.io/browse/SPR-8166?redirect=false)** and commented  ---  This issue is a sub-task of #12694","closed","status: declined,","spring-projects-issues","2011-04-01T03:49:42Z","2019-01-11T13:04:25Z"
"","12816","Introduce FeatureSpecification for PropertyPlaceholderBeanDefinitionParser (context:property-placeholder) [SPR-8165]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8165](https://jira.spring.io/browse/SPR-8165?redirect=false)** and commented  ---  This issue is a sub-task of #12694","closed","status: declined,","spring-projects-issues","2011-04-01T03:45:28Z","2019-01-11T13:04:29Z"
"","12815","Introduce FeatureSpecification for PropertyOverrideBeanDefinitionParser (context:property-override) [SPR-8164]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8164](https://jira.spring.io/browse/SPR-8164?redirect=false)** and commented  ---  This issue is a sub-task of #12694  **Issue Links:** - #12399 o.s.http.client.SimpleClientHttpRequestFactory should allow to specify HttpURLConnection properties (_**""is duplicated by""**_)","closed","status: declined,","spring-projects-issues","2011-04-01T03:44:28Z","2019-01-11T13:04:43Z"
"","12814","Investigate XmlBeansMarshallerBeanDefinitionParser (oxm:xmlbeans-marshaller) [SPR-8163]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8163](https://jira.spring.io/browse/SPR-8163?redirect=false)** and commented  ---  This issue is a sub-task of #12694","closed","status: declined,","spring-projects-issues","2011-04-01T03:35:31Z","2019-01-11T13:04:49Z"
"","12813","Investigate JibxMarshallerBeanDefinitionParser (oxm:jibx-marshaller) [SPR-8162]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8162](https://jira.spring.io/browse/SPR-8162?redirect=false)** and commented  ---  This issue is a sub-task of #12694  1 votes, 1 watchers","closed","status: declined,","spring-projects-issues","2011-04-01T03:35:25Z","2019-01-11T13:04:37Z"
"","12812","Investigate Jaxb2MarshallerBeanDefinitionParser (oxm:jaxb2-marshaller) [SPR-8161]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8161](https://jira.spring.io/browse/SPR-8161?redirect=false)** and commented  ---  This issue is a sub-task of #12694","closed","status: declined,","spring-projects-issues","2011-04-01T03:35:19Z","2019-01-11T13:04:40Z"
"","12811","Investigate JtaTransactionManagerBeanDefinitionParser (tx:jta-transaction-manager) [SPR-8160]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8160](https://jira.spring.io/browse/SPR-8160?redirect=false)** and commented  ---  This issue is a sub-task of #12694","closed","status: declined,","spring-projects-issues","2011-04-01T03:35:13Z","2019-01-11T13:04:52Z"
"","12810","Investigate TxAdviceBeanDefinitionParser (tx:advice) [SPR-8159]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8159](https://jira.spring.io/browse/SPR-8159?redirect=false)** and commented  ---  This issue is a sub-task of #12694","closed","status: declined,","spring-projects-issues","2011-04-01T03:35:09Z","2019-01-11T13:04:54Z"
"","12809","Investigate ScriptBeanDefinitionParser (lang:*) [SPR-8158]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8158](https://jira.spring.io/browse/SPR-8158?redirect=false)** and commented  ---  This issue is a sub-task of #12694","closed","status: declined,","spring-projects-issues","2011-04-01T03:35:04Z","2019-01-11T13:04:56Z"
"","12808","Investigate SchedulerBeanDefinitionParser (task:scheduler) [SPR-8157]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8157](https://jira.spring.io/browse/SPR-8157?redirect=false)** and commented  ---  This issue is a sub-task of #12694  **Issue Links:** - #12782 Document `@Bean` alternatives to ScheduledExecutor and ThreadPoolExecutor FactoryBean types - #12910 Provide `@Configuration` support for scheduled tasks (_**""is superseded by""**_)","closed","status: declined,","spring-projects-issues","2011-04-01T03:34:59Z","2019-01-13T07:10:09Z"
"","12807","Investigate ScheduledTasksBeanDefinitionParser (task:scheduled) [SPR-8156]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8156](https://jira.spring.io/browse/SPR-8156?redirect=false)** and commented  ---  This issue is a sub-task of #12694  **Issue Links:** - #12910 Provide `@Configuration` support for scheduled tasks (_**""is superseded by""**_)","closed","status: declined,","spring-projects-issues","2011-04-01T03:34:54Z","2019-01-13T07:10:11Z"
"","12806","Investigate ExecutorBeanDefinitionParser (task:executor) [SPR-8155]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8155](https://jira.spring.io/browse/SPR-8155?redirect=false)** and commented  ---  This issue is a sub-task of #12694  **Issue Links:** - #12910 Provide `@Configuration` support for scheduled tasks (_**""is superseded by""**_)","closed","status: declined,","spring-projects-issues","2011-04-01T03:34:49Z","2019-01-13T07:10:12Z"
"","12805","Investigate RemoteStatelessSessionBeanDefinitionParser (jee:remote-slsb) [SPR-8154]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8154](https://jira.spring.io/browse/SPR-8154?redirect=false)** and commented  ---  This issue is a sub-task of #12694","closed","status: declined,","spring-projects-issues","2011-04-01T03:34:45Z","2019-01-11T13:05:04Z"
"","12804","Investigate LocalStatelessSessionBeanDefinitionParser (jee:local-slsb) [SPR-8153]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8153](https://jira.spring.io/browse/SPR-8153?redirect=false)** and commented  ---  This issue is a sub-task of #12694","closed","status: declined,","spring-projects-issues","2011-04-01T03:34:40Z","2019-01-11T13:05:19Z"
"","12803","Investigate JndiLookupBeanDefinitionParser (jee:jndi-lookup) [SPR-8152]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8152](https://jira.spring.io/browse/SPR-8152?redirect=false)** and commented  ---  This issue is a sub-task of #12694  **Issue Links:** - #12780 Document `@Bean` alternatives to JndiObjectFactoryBean","closed","status: declined,","spring-projects-issues","2011-04-01T03:34:35Z","2019-01-13T07:10:14Z"
"","12802","Investigate MBeanServerBeanDefinitionParser (context:mbean-server) [SPR-8151]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8151](https://jira.spring.io/browse/SPR-8151?redirect=false)** and commented  ---  This issue is a sub-task of #12694","closed","status: declined,","spring-projects-issues","2011-04-01T03:34:30Z","2019-01-11T13:05:11Z"
"","12801","Investigate MBeanExportBeanDefinitionParser (context:mbean-export) [SPR-8150]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8150](https://jira.spring.io/browse/SPR-8150?redirect=false)** and commented  ---  This issue is a sub-task of #12694","closed","status: declined,","spring-projects-issues","2011-04-01T03:34:01Z","2019-01-11T13:05:14Z"
"","12800","Investigate MBeanExportBeanDefinitionParser (context:mbean-server) [SPR-8149]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8149](https://jira.spring.io/browse/SPR-8149?redirect=false)** and commented  ---  This issue is a sub-task of #12694","closed","status: declined,","spring-projects-issues","2011-04-01T03:27:31Z","2019-01-11T13:01:14Z"
"","12799","Introduce @Configuration-based equivalent to aop:config XML element [SPR-8148]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8148](https://jira.spring.io/browse/SPR-8148?redirect=false)** and commented   ---  **Reference URL:** http://forum.springsource.org/showthread.php?110704-Spring-AOP-in-Java-Config&p=367069  **Issue Links:** - [INT-3329](https://jira.spring.io/browse/INT-3329) Provide the  JavaConfig analogue","closed","type: enhancement,","spring-projects-issues","2011-04-01T03:20:14Z","2014-03-18T08:15:29Z"
"","12798","Introduce TaskAnnotationDriven for AnnotationDrivenBeanDefinitionParser (task:annotation-driven) [SPR-8147]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8147](https://jira.spring.io/browse/SPR-8147?redirect=false)** and commented  ---  This issue is a sub-task of #12694  **Issue Links:** - #12910 Provide `@Configuration` support for scheduled tasks (_**""is superseded by""**_)","closed","status: declined,","spring-projects-issues","2011-04-01T03:19:36Z","2019-01-13T07:10:16Z"
"","12797","Introduce TxAnnotationDriven for AnnotationDrivenBeanDefinitionParser (tx:annotation-driven) [SPR-8146]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8146](https://jira.spring.io/browse/SPR-8146?redirect=false)** and commented  ---  This issue is a sub-task of #12694","closed","status: declined,","spring-projects-issues","2011-04-01T03:14:37Z","2019-01-11T13:01:29Z"
"","12796","Introduce MvcViewControllers for ViewControllersBeanDefinitionParser (mvc:view-controllers) [SPR-8145]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8145](https://jira.spring.io/browse/SPR-8145?redirect=false)** and commented  ---  This issue is a sub-task of #12694","closed","status: declined,","spring-projects-issues","2011-04-01T03:13:37Z","2019-01-11T13:01:33Z"
"","12795","Introduce MvcDefaultServletHandler for DefaultServletHandlerBeanDefinitionParser (mvc:default-servlet-handler) [SPR-8144]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8144](https://jira.spring.io/browse/SPR-8144?redirect=false)** and commented  ---  This issue is a sub-task of #12694","closed","status: declined,","spring-projects-issues","2011-04-01T03:12:48Z","2019-01-11T13:01:18Z"
"","12794","Introduce ComponentScanSpec for ComponentScanBeanDefinitionParser (context:component-scan) [SPR-8143]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8143](https://jira.spring.io/browse/SPR-8143?redirect=false)** and commented  ---  This issue is a sub-task of #12694  **Issue Links:** - #11848 Add `@ComponentScan` annotation (_**""is superseded by""**_)","closed","status: declined,","spring-projects-issues","2011-04-01T03:11:46Z","2019-01-13T07:10:18Z"
"","12793","Introduce MvcAnnotationDriven for AnnotationDrivenBeanDefinitionParser (mvc:annotation-driven) [SPR-8142]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8142](https://jira.spring.io/browse/SPR-8142?redirect=false)** and commented  ---  This issue is a sub-task of #12694","closed","status: declined,","spring-projects-issues","2011-04-01T03:10:30Z","2019-01-11T13:01:43Z"
"","12792","SpringConfiguredBeanDefinitionParser (context:spring-configured) [SPR-8141]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8141](https://jira.spring.io/browse/SPR-8141?redirect=false)** and commented  ---  This issue is a sub-task of #12694  **Issue Links:** - #12544 Introduce `@EnableSpringConfigured` (_**""duplicates""**_) - #12790 SpringConfiguredBeanDefinitionParser (aop:spring-configured) (_**""is duplicated by""**_)","closed","type: task,","spring-projects-issues","2011-04-01T02:52:02Z","2019-01-13T07:10:19Z"
"","12791","LoadTimeWeaverBeanDefinitionParser (context:load-time-weaver) [SPR-8140]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8140](https://jira.spring.io/browse/SPR-8140?redirect=false)** and commented  ---  This issue is a sub-task of #12694","closed","status: declined,","spring-projects-issues","2011-04-01T02:48:25Z","2019-01-11T13:01:36Z"
"","12790","SpringConfiguredBeanDefinitionParser (aop:spring-configured) [SPR-8139]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8139](https://jira.spring.io/browse/SPR-8139?redirect=false)** and commented  ---  This issue is a sub-task of #12694  **Issue Links:** - #12792 SpringConfiguredBeanDefinitionParser (context:spring-configured) (_**""duplicates""**_) - #12544 Introduce `@EnableSpringConfigured` (_**""duplicates""**_)","closed","type: task,","spring-projects-issues","2011-04-01T02:44:11Z","2019-01-13T07:10:21Z"
"","12789","Introduce @EnableAspectJAutoProxy (equivalent to aop:aspectj-autoproxy) [SPR-8138]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8138](https://jira.spring.io/browse/SPR-8138?redirect=false)** and commented  ---  **Reference URL:** http://forum.springsource.org/showthread.php?110430-FeatureSpecification-and-lt-aop-aspectj-autoproxy-gt&p=366173  **Issue Links:** - #12964 Provide `@Configuration` support for enabling AspectJ auto-proxy behavior (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d09faabcb6b1629361d4e58dd957a1de83407078, https://github.com/spring-projects/spring-framework/commit/739775ca19a8b7b8262d6ed8f01f86870f0d0304","closed","type: enhancement,","spring-projects-issues","2011-04-01T02:42:58Z","2019-01-13T07:10:22Z"
"","12788","Introduce CacheAnnotationDriven for AnnotationDrivenCacheBeanDefinitionParser (cache:annotation-driven) [SPR-8137]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8137](https://jira.spring.io/browse/SPR-8137?redirect=false)** and commented  ---  This issue is a sub-task of #12694","closed","status: declined,","spring-projects-issues","2011-04-01T02:39:44Z","2019-01-11T13:01:49Z"
"","12787","Introduce HttpInvokerProxyBuilder as @Bean alternative to HttpInvokerProxyFactoryBean [SPR-8136]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8136](https://jira.spring.io/browse/SPR-8136?redirect=false)** and commented  ---  This issue is a sub-task of #12076","closed","in: core,","spring-projects-issues","2011-04-01T00:28:55Z","2019-01-11T13:01:51Z"
"","12786","Introduce BurlapProxyBuilder as @Bean alternative to BurlapProxyFactoryBean [SPR-8135]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8135](https://jira.spring.io/browse/SPR-8135?redirect=false)** and commented  ---  This issue is a sub-task of #12076","closed","in: core,","spring-projects-issues","2011-04-01T00:28:18Z","2019-01-11T13:02:08Z"
"","12785","Introduce HessianProxyBuilder as @Bean alternative to HessianProxyFactoryBean [SPR-8134]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8134](https://jira.spring.io/browse/SPR-8134?redirect=false)** and commented  ---  This issue is a sub-task of #12076","closed","in: core,","spring-projects-issues","2011-04-01T00:27:43Z","2019-01-11T13:02:17Z"
"","12784","Introduce RmiProxyBuilder as @Bean alternative to RmiProxyFactoryBean [SPR-8133]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8133](https://jira.spring.io/browse/SPR-8133?redirect=false)** and commented  ---  This issue is a sub-task of #12076","closed","in: core,","spring-projects-issues","2011-04-01T00:12:57Z","2019-01-11T13:02:03Z"
"","12783","Introduce RmiRegistryBuilder as @Bean alternative to RmiRegistryFactoryBean [SPR-8132]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8132](https://jira.spring.io/browse/SPR-8132?redirect=false)** and commented  ---  This issue is a sub-task of #12076","closed","in: core,","spring-projects-issues","2011-04-01T00:11:46Z","2019-01-11T13:02:05Z"
"","12782","Document @Bean alternatives to ScheduledExecutor and ThreadPoolExecutor FactoryBean types [SPR-8131]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8131](https://jira.spring.io/browse/SPR-8131?redirect=false)** and commented  ---  This issue is a sub-task of #12076  **Issue Links:** - #12808 Investigate SchedulerBeanDefinitionParser (task:scheduler) - #12910 Provide `@Configuration` support for scheduled tasks","closed","in: core,","spring-projects-issues","2011-03-31T23:54:46Z","2019-01-13T07:10:24Z"
"","12781","Introduce QuartzSchedulerBuilder as @Bean alternative to SchedulerFactoryBean [SPR-8130]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8130](https://jira.spring.io/browse/SPR-8130?redirect=false)** and commented  As an `@Bean`-friendly programmatic alternative to (and base class for) Spring's Quartz `SchedulerFactoryBean`.  ---  This issue is a sub-task of #12076  1 votes, 1 watchers","closed","in: core,","spring-projects-issues","2011-03-31T22:57:01Z","2019-01-11T13:02:26Z"
"","12780","Document @Bean alternatives to JndiObjectFactoryBean [SPR-8129]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8129](https://jira.spring.io/browse/SPR-8129?redirect=false)** and commented  ---  This issue is a sub-task of #12076  **Issue Links:** - #12803 Investigate JndiLookupBeanDefinitionParser (jee:jndi-lookup)","closed","type: task,","spring-projects-issues","2011-03-31T22:34:58Z","2019-01-11T13:03:02Z"
"","12779","Introduce EntityManagerFactoryBuilder types [SPR-8128]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8128](https://jira.spring.io/browse/SPR-8128?redirect=false)** and commented  ---  This issue is a sub-task of #12076  **Issue Links:** - #12965 Provide `@Configuration` support for enabling load-time weaving (`@EnableLoadTimeWeaving`)","closed","in: core,","spring-projects-issues","2011-03-31T22:34:08Z","2019-01-13T07:10:26Z"
"","12778","Allow @Feature methods to be declared within @Configuration classes [SPR-8126]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8126](https://jira.spring.io/browse/SPR-8126?redirect=false)** and commented  See http://blog.springsource.com/2011/02/17/spring-3-1-m1-featurespec/ for context on how `@Feature` methods work, and specifically see Oleg's question at http://blog.springsource.com/2011/02/17/spring-3-1-m1-featurespec/#comment-190903.  Currently, `@Feature` methods may be declared only within `@FeatureConfiguration` classes. This is for a number of reasons related to container lifecycle, which I may expand on further.  We are reviewing this internally right now to see if there is any way we can consolidate both `@Bean` and `@Feature` methods within `@Configuration` classes, possibly doing away with the `@FeatureConfiguration` annotation entirely in Spring 3.1 M2.  This is unlikely, but in any case, adding this issue as a reference point for any users in the future who have similar questions.  I will provide a full rationale either way when resolving this issue as ""Complete"" or ""Won't Fix""  ---  **Affects:** 3.1 M1  **Reference URL:** http://blog.springsource.com/2011/02/17/spring-3-1-m1-featurespec/#comment-190903  **Sub-tasks:** - #12954 Introduce PropertySources#getPropertyAsClass","closed","in: core,","spring-projects-issues","2011-03-31T20:09:44Z","2019-01-12T05:30:38Z"
"","12774","Revisit subsystem-oriented logging [SPR-8122]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8122](https://jira.spring.io/browse/SPR-8122?redirect=false)** and commented  ---  **Issue Links:** - #10000 Consider migrating from Commons-Logging to SLF4j - #12438 Logging of SQL Params and Query when using JdbcTemplate - #19081 Revisit Commons Logging vs java.util.logging vs SLF4J vs Log4j 2  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/65ac173b29825aa460bda47c5b751515138b5a4c  3 votes, 9 watchers","closed","status: duplicate,","spring-projects-issues","2011-03-31T07:35:50Z","2020-03-31T16:41:40Z"
"","12773","Improve build system and source control infrastructure [SPR-8120]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8120](https://jira.spring.io/browse/SPR-8120?redirect=false)** and commented  Tracking issue covering items such as moving Spring to GitHub and migrating the build to Gradle  ---  **Sub-tasks:** - #12979 spring-asm-3.1.0.M1-sources.jar has no sources - #13250 Improve bug reporting experience  **Issue Links:** - #12770 Migrate Spring build system to Gradle (_**""depends on""**_) - #12771 Migrate Spring source control to Git(Hub) (_**""depends on""**_) - #13071 Publish Spring Milestone builds to Maven Central  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2011-03-31T07:29:22Z","2019-01-11T13:03:07Z"
"","12772","Migrate Bamboo build plans to work against new Git repository [SPR-8118]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8118](https://jira.spring.io/browse/SPR-8118?redirect=false)** and commented  See https://build.springsource.org/browse/SPR. Also take this opportunity to prune dead plans.  ---  This issue is a sub-task of #12771","closed","","spring-projects-issues","2011-03-31T06:59:54Z","2019-01-11T13:03:41Z"
"","12771","Migrate Spring source control to Git(Hub) [SPR-8117]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8117](https://jira.spring.io/browse/SPR-8117?redirect=false)** and commented  Promote existing GitHub mirror at https://github.com/cbeams/spring-framework to https://github.com/SpringSource/spring-framework as the official repository for Spring Framework.  All SVN history back to 3.0 is maintained there already.  Complete project history is further archived at  * https://github.com/cbeams/spring-framework-2.5.x * https://github.com/cbeams/spring-framework-i21  They may be promoted as well for completeness and posterity  ---  **Sub-tasks:** - #10279 Make line endings consistent across all Spring source files - #12772 Migrate Bamboo build plans to work against new Git repository  **Issue Links:** - #12773 Improve build system and source control infrastructure (_**""is depended on by""**_)  1 votes, 5 watchers","closed","type: task,","spring-projects-issues","2011-03-31T06:58:21Z","2019-01-11T13:03:19Z"
"","12770","Migrate Spring build system to Gradle [SPR-8116]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8116](https://jira.spring.io/browse/SPR-8116?redirect=false)** and commented  ---  **Sub-tasks:** - #11453 Change green JavaDocs API to standard JavaDoc colors with SpringSource logo - #14034 Ensure that both JUnit and TestNG tests are executed in the Gradle build - #14057 Fix compile and test classpaths regarding slf4j versions  **Issue Links:** - #12773 Improve build system and source control infrastructure (_**""is depended on by""**_) - #12979 spring-asm-3.1.0.M1-sources.jar has no sources - #12481 org.springframework.beans.factory.aspectj seems to be missing JavaDocs for Aspects - #14034 Ensure that both JUnit and TestNG tests are executed in the Gradle build - #14707 Re-enable tests that were disabled during the migration to Gradle  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3b5e90d242f785fcac162712e52f63925ad599c4, https://github.com/spring-projects/spring-framework/commit/3cbb136861ce6ce6d9bacc2ef4d76d595fcf9a83, https://github.com/spring-projects/spring-framework/commit/31dfffde52baaff5c9539c9d11653f3776d10de4, https://github.com/spring-projects/spring-framework/commit/025d111efc7975aadeb65a805c0d2ae4525b980a, https://github.com/spring-projects/spring-framework/commit/ddf8eaf38a220f06f7cd60746eb634e030d7937d, https://github.com/spring-projects/spring-framework/commit/5c0c37e74807547ebca5820f2c65b385aceffda9, https://github.com/spring-projects/spring-framework/commit/0a07a0ed92fc8d16b804f88c6b073ec11fcf9040  0 votes, 6 watchers","closed","type: task,","spring-projects-issues","2011-03-31T06:46:11Z","2019-01-11T13:03:24Z"
"","12768","Support automatic detection of close methods [SPR-8114]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8114](https://jira.spring.io/browse/SPR-8114?redirect=false)** and commented  When using Spring's `FactoryBean` types such as `LocalSessionFactoryBean` destruction of the actual bean (the Hibernate `Session` in the case of `LSFB`) is usually handled automatically by the `FactoryBean`.  However, when using Spring's new `*Builder` APIs within `@Bean` methods, no `FactoryBean`-like object is registered with the container.  This means that it is up to the user to _remember_ to configure the `destroy-method` attribute of the `@Bean` annotation, which is likely to be forgotten.  To remedy this situation, Spring should automatically detect common close/destruction method names and signatures and automatically invoke them at container shutdown time.  Obviously, Spring's `DisposableBean` is already supported in this way, as are methods annotated with `@PreDestroy`.  When dealing with third-party types, however, the user is not at liberty to add these interfaces/annotations.  In the case of Hibernate's `Session` interface, the method to be called is  ``` public Connection close() throws HibernateException; ```  As this method is not annotated in any way nor does it implement any standard interface with destruction semantics, we can only assume based on it's name that it is to be invoked.  ---  **Attachments:** - [mylyn-context.zip](https://jira.spring.io/secure/attachment/18077/mylyn-context.zip) (_4.40 kB_) - [mylyn-context.zip](https://jira.spring.io/secure/attachment/18076/mylyn-context.zip) (_4.40 kB_)  **Issue Links:** - #12076 Provide alternatives to using FactoryBean types within `@Bean` methods  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5c27a042101b3ab5eaba12c440b194c88f53e685, https://github.com/spring-projects/spring-framework/commit/1a8531b4013c945f72b7666b4de305529b68d481","closed","type: enhancement,","spring-projects-issues","2011-03-31T06:10:46Z","2019-01-13T07:10:30Z"
"","12767","Analyze Spring Framework 3.1 backward compatibility with CLIRR [SPR-8113]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8113](https://jira.spring.io/browse/SPR-8113?redirect=false)** and commented  ---  **Issue Links:** - #14590 Analyze Spring Framework 3.2 backward compatibility with JDiff","closed","type: task,","spring-projects-issues","2011-03-31T05:49:48Z","2019-01-11T13:03:34Z"
"","12766","Test *SessionFactoryBean compatibility with earlier versions of Spring [SPR-8112]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8112](https://jira.spring.io/browse/SPR-8112?redirect=false)** and commented  #12721 heavily refactored the `*SessionFactoryBean` hierarchy.  Test application developed against < Spring 3.1 that extensively configures `LocalSessionFactoryBean` and/or `AnnotationSessionFactoryBean` and ensure that the upgrade to Spring 3.1 is smooth.  Note that backward compat with convertHibernateAccessException is broken (now handled by setPersistenceExceptionTranslator)  All other methods should be OK, such as newConfiguration(), etc.  They're all deprecated in LSFBean and ASFBean.  See #12767 which suggests running a CLIRR report against 3.1 to check backward-compat  ---  This issue is a sub-task of #12076","closed","in: core,","spring-projects-issues","2011-03-31T05:44:45Z","2019-01-12T05:30:39Z"
"","12765","Test Spring 3.1 compatibility with Hibernate 3.6.x [SPR-8111]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8111](https://jira.spring.io/browse/SPR-8111?redirect=false)** and commented  Spring 3.1 compiles against Hibernate 3.3.2.  All other Hibernate generations must be manually tested.  Depended on by: #12755  ---  This issue is a sub-task of #13062  **Issue Links:** - #12755 Support Hibernate 3.6.x - #12990 Lazy initialization error with LOG4J turned on - failed to lazily initialize a collection of role: ...no session or session was closed - #12357 Spring 3.0.5 is Incompitible with Hibernate 3.6.0.Final - #12098 Doc: Load-time weaving limitations with Tomcat and Hibernate","closed","status: invalid,","spring-projects-issues","2011-03-31T01:00:41Z","2019-01-12T05:30:41Z"
"","12764","Test Spring 3.1 compatibility with Hibernate 3.5.x [SPR-8110]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8110](https://jira.spring.io/browse/SPR-8110?redirect=false)** and commented  Spring 3.1 compiles against Hibernate 3.3.2.  All other Hibernate generations must be manually tested.  ---  This issue is a sub-task of #13062","closed","status: invalid,","spring-projects-issues","2011-03-31T01:00:34Z","2019-01-12T05:30:42Z"
"","12763","Test Spring 3.1 compatibility with Hibernate 3.2.x [SPR-8109]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8109](https://jira.spring.io/browse/SPR-8109?redirect=false)** and commented  ---  This issue is a sub-task of #13062","closed","status: invalid,","spring-projects-issues","2011-03-31T01:00:34Z","2019-01-12T05:30:43Z"
"","12762","Replace all  with  in JavaDoc [SPR-8108]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8108](https://jira.spring.io/browse/SPR-8108?redirect=false)** and commented  cbeams@anakata:~/Work/spring-framework/spring-framework#12721>$ git grep -A5  ""\""  replace as appropriate with \ to support proper formatting JavaDoc.  ---  **Issue Links:** - #14788 Improve presentation of code blocks in Javadoc (_**""depends on""**_) - #13072 Add syntax highlighting to Javadoc where necessary (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2a44228b987f0e8b1ffd3e293d45ba084bfe4790","closed","type: task,","spring-projects-issues","2011-03-31T00:59:59Z","2019-01-11T12:42:50Z"
"","12761","MapPropertySource constructor should have public visibility [SPR-8107]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8107](https://jira.spring.io/browse/SPR-8107?redirect=false)** and commented   ---  **Affects:** 3.1 M1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/006cbb25c53301b71a39b41cfb1609212c8bba96","closed","type: enhancement,","spring-projects-issues","2011-03-30T21:35:28Z","2012-06-19T03:39:23Z"
"","12760","Test STS support for Spring 3.1 features [SPR-8106]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8106](https://jira.spring.io/browse/SPR-8106?redirect=false)** and commented  See detailed subtasks at [STS-1655](https://issuetracker.springsource.com/browse/STS-1655).  On Mar 31, 2011, at 4:39 AM, Christian Dupuis wrote:  > Just as an update: there is now a Spring IDE version that is Spring 3.1.0.M1 enabled. Unfortunately that one doesn't work in STS right now. >  > Chris, if you want to track development over the next couple of months, here's how: >  > 1. git clone git://git.springsource.org/spring-ide/spring-ide.git > 2. git checkout spring-3.1-support > 3. mvn3 clean install > 4. Install from releng/org.springframework.ide.eclipse.site/target/site into a plain Eclipse JEE package >  > Over the next couple of days I'll add support for Profiles to Config Sets.    --- No further details from [SPR-8106](https://jira.spring.io/browse/SPR-8106?redirect=false)","closed","","spring-projects-issues","2011-03-30T20:15:12Z","2019-01-11T12:42:38Z"
"","12759","Support DI 1.1 (JSR-TBD) [SPR-8105]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8105](https://jira.spring.io/browse/SPR-8105?redirect=false)** and commented  building on our DI 1.0 (JSR-330) support in Spring 3.0   --- No further details from [SPR-8105](https://jira.spring.io/browse/SPR-8105?redirect=false)","closed","type: enhancement,","spring-projects-issues","2011-03-30T07:55:02Z","2013-01-24T01:47:45Z"
"","12758","Specific support for JSF 2.2 / 2.3 [SPR-8104]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8104](https://jira.spring.io/browse/SPR-8104?redirect=false)** and commented  http://jcp.org/en/jsr/detail?id=344  ---  **Issue Links:** - #11209 Support for JSF 2 view and flow scopes  6 votes, 10 watchers","closed","status: bulk-closed,","spring-projects-issues","2011-03-30T07:36:05Z","2019-01-12T03:50:00Z"
"","12756","Support JSF 2.1 (JSR-314) [SPR-8102]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8102](https://jira.spring.io/browse/SPR-8102?redirect=false)** and commented   ---  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2011-03-30T04:16:52Z","2014-08-21T07:26:16Z"
"","12755","Support Hibernate 3.6.x [SPR-8100]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8100](https://jira.spring.io/browse/SPR-8100?redirect=false)** and commented  Technically, Hibernate 3.6 should be supported against versions of Spring earlier than 3.1 as well, but with the recent release of Hibernate 3.6 (now 3.6.2), Spring 3.1 represents the first version to 'officially support' it.  ---  **Issue Links:** - #12765 Test Spring 3.1 compatibility with Hibernate 3.6.x","closed","type: enhancement,","spring-projects-issues","2011-03-30T00:18:41Z","2019-01-11T12:42:44Z"
"","12753","Remove support for Hibernate 3.2.x [SPR-8098]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8098](https://jira.spring.io/browse/SPR-8098?redirect=false)** and commented  Spring currently supports Hibernate versions 3.2, 3.3 and 3.5.  With the arrival of Hibernate 3.6, dropping support for 3.2 makes sense on its own - we will still support three generations of Hibernate.  Otherwise, bumping our minimum supported version to 3.3 allows us to get away from certain deprecated APIs (e.g.: `Connection.session()` in favor of the replacement `org.hibernate.jdbc.Work` API.  Note that #12751 deals with supporting Hibernate 4.x.  ---  No further details from [SPR-8098](https://jira.spring.io/browse/SPR-8098?redirect=false)","closed","status: declined,","spring-projects-issues","2011-03-29T07:43:52Z","2019-01-11T12:40:59Z"
"","12751","Support Hibernate 4.0.x [SPR-8096]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8096](https://jira.spring.io/browse/SPR-8096?redirect=false)** and commented  Introduce `org.springframework.orm.hibernate4` packaging, and cut a clean implementation against Hibernate 4 APIs and SPIs.  This is both desirable after years of Hibernate 3.2+ support as well as necessary given certain removals (such as `AnnotationConfiguration`) in the 4.x line.  Eliminate `AnnotationSessionFactoryBuilder` and `AnnotationSessionFactoryBean` in the 4.x line in favor of a `SessionFactoryBuilder` / `LocalSessionFactoryBean` that work against the unified `org.hibernate.cfg.Configuration`; consider support for Hibernate 4 Services (http://bit.ly/gnUAUI)  Eliminate `HibernateTemplate` and friends (e.g. `HibernateCallback` in favor of Spring's more modern 'Native Hibernate DAO' approach which has been used to good effect for quite a while.  `org.springframework.orm.hibernate3` will remain, though possibly as a separate module (jar) from `.orm.hibernate4` for dependency reasons.   ---  8 votes, 10 watchers","closed","type: enhancement,","spring-projects-issues","2011-03-29T07:00:25Z","2012-06-19T03:39:19Z"
"","12734","Support injection against setter methods with non-void return types [SPR-8079]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8079](https://jira.spring.io/browse/SPR-8079?redirect=false)** and commented  The JavaBeans specification considers property 'write methods' (setters) to be those:  1. starting with the string 'set', followed by the capitalized name of the property. (`setFoo(Foo)`, `setBar(Bar)`) 2. accepting a single argument that matches the return type of the 'read method' (getter), if any. (`public Foo getFoo()`, `public void setFoo(Foo)` 3. having a `void` return type.  These requirements are reflected in the implementation of the static `java.beans.Introspector#getBeanInfo(Class)` method, which Spring uses to determine what properties are available for injection (see `org.springframework.beans.CachedIntrospectionResults`.  The third constraint above poses a problem in certain cases, particularly where a 'builder-style' API is being used -- one that allows for method chaining setters by returning the `this` reference of the builder object.  Such builder-style objects are convenient for use when configuring Spring beans programmatically within `@Configuration` class `@Bean` methods, for example, but if one attempts to use them as `` definitions within a Spring XML file, the container will throw a `NotWritablePropertyException`.  This is not because Spring is incapable of calling the non-standard setter style, but rather because `Introspector#getBeanInfo()` never notices the non-standard setter in the first place, and any subsequent call to `BeanInfo#getPropertyDescriptors()` will fail to report its existence.  For this reason, we will introduce a decorator for the `BeanInfo` object returned from `Introspector#getBeanInfo()` that takes one more pass against the specified class, looking for any setter methods with non-void return types.  Calls to the decorated `BeanInfo` type will faithfully report these methods, and Spring's injection facilities will operate normally from there.  It is important that:  * this work play nicely with the existing decoration approach in `GenericTypeAwarePropertyDescriptor`. * non-void returning setter methods are detected even if there is no matching getter method declared.  This is a common scenario within framework classes.  While this is a generally useful addition to the framework, it is getting priority now in order to support the work described in #12076 -- specifically #12721, which deals with refactoring Spring's `*SessionFactoryBean` types to extend the new `@Configuration`-friendly `*SessionFactoryBuilder` types.  When doing this, the signature of the FactoryBeans' setter methods changes to non-void return types and causes the issue described above.  Implementing this new feature will eliminate this problem.  ---  **Issue Links:** - #12721 Introduce (Annotation)SessionFactoryBuilder types - #12076 Provide alternatives to using FactoryBean types within `@Bean` methods - #14663 Overhaul non-void JavaBean write method support - #14336 ExtendedBeanInfo exception - java.beans.IntrospectionException - #12826 ExtendedBeanInfo Passes Empty Property Name to PropertyDescriptor Causing IntrospectionException: bad property name - #14357 Use ExtendedBeanInfo on an as-needed basis only - #14663 Overhaul non-void JavaBean write method support","closed","type: enhancement,","spring-projects-issues","2011-03-22T23:50:32Z","2019-01-13T07:10:40Z"
"","12733","Build fails against IcedTea6 on Ubuntu [SPR-8078]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8078](https://jira.spring.io/browse/SPR-8078?redirect=false)** and commented  `LocalVariableTableParameterNameDiscovererTests.testMemUsage()` fails under IcedTea6 on Ubuntu because Ubuntu builds and packages the JDK with debugging symbols turned on (per http://www.ubuntuupdates.org/packages/show/247685).  In most cases, debugging symbols are OFF in JDK classes, and the test above operates on this assumption.  The simplest solution is to eliminate (`@Ignore`) the test altogether -- any attempt to check the JVM vendor and/or system type will still be fragile, and attempting to determine whether debug symbols are enabled (in order to exit early from the test) would require reimplementing much of what is trying to be tested anyway.   ---  **Reference URL:** http://forum.springsource.org/showthread.php?t=91353&goto=newpost  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6f80578a387098bcf054249c512025ec81ae182b","closed","type: bug,","spring-projects-issues","2011-03-22T23:09:49Z","2012-06-19T03:39:24Z"
"","12731","Introduce HibernateExceptionTranslator [SPR-8076]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8076](https://jira.spring.io/browse/SPR-8076?redirect=false)** and commented  Currently the only implementation of `PersistenceExceptionTranslator` capable of translating `HibernateException` types is `AbstractSessionFactoryBean` and therefore its concrete subclasses, `LocalSessionFactoryBean` and `AnnotationSessionFactoryBean`.  This works fine in an XML configuration context, but when configuring the container via `@Configuration` classes, using a `FactoryBean` type is discouraged.  #12721 resolves this fundamental issue by introducing `*SessionFactoryBuilder` types.  As part of that effort, it's important that we factor out a `HibernateExceptionTranslator` type that can be registered independently as a `@Bean`.  ---  **Issue Links:** - #12721 Introduce (Annotation)SessionFactoryBuilder types (_**""depends on""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3bb01ee68b7f421f0d3ee5735a6c383a84483968, https://github.com/spring-projects/spring-framework/commit/f5768fe00be37efb8c71bdfa61a0d0c71c8ba218, https://github.com/spring-projects/spring-framework/commit/6809b234b17695921a8260e20a378068f3ec6232  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2011-03-22T07:19:45Z","2019-01-11T12:41:23Z"
"","12721","Introduce (Annotation)SessionFactoryBuilder types [SPR-8066]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8066](https://jira.spring.io/browse/SPR-8066?redirect=false)** and commented  (1) Introduce `SessionFactoryBuilder`, suitable for use in `@Configuration` classes instead of `LocalSessionFactoryBean`.  (2) Introduce `AnnotationSessionFactoryBuilder`, suitable for use in `@Configuration` classes instead of `AnnotationSessionFactoryBean`.  (3) Refactor `*SessionFactoryBean` types to delegate to (or possibly even extend) `*FactoryBuilder` types  ---  **Affects:** 3.0 GA  This issue is a sub-task of #12076  **Issue Links:** - #12731 Introduce HibernateExceptionTranslator (_**""is depended on by""**_) - #12588 SessionFactoryUtils.convertHibernateAccessException() improperly swallows underlying HibernateException (_**""is depended on by""**_) - #12591 Hibernate LocalSessionFactoryBean schemaUpdate incompatible with automatic dialect detection (_**""is depended on by""**_) - #12734 Support injection against setter methods with non-void return types  1 votes, 1 watchers","closed","in: core,","spring-projects-issues","2011-03-18T22:49:20Z","2019-01-11T12:38:26Z"
"","12713","Review Javadoc for types modified/added in 3.1 [SPR-8058]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8058](https://jira.spring.io/browse/SPR-8058?redirect=false)** and commented   --- No further details from [SPR-8058](https://jira.spring.io/browse/SPR-8058?redirect=false)","closed","","spring-projects-issues","2011-03-15T05:59:51Z","2019-01-11T12:39:14Z"
"","12712","Provide logging for Environment subsystem [SPR-8057]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8057](https://jira.spring.io/browse/SPR-8057?redirect=false)** and commented  Including bean definition profiles and PropertySources.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/150838bfc13a136ef0baf943e378a8ebb5f3549f","closed","type: enhancement,","spring-projects-issues","2011-03-15T05:55:25Z","2015-09-22T19:28:37Z"
"","12711","Decide what to do with 'local' attribute in beans: namespace [SPR-8056]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8056](https://jira.spring.io/browse/SPR-8056?redirect=false)** and commented  As mentioned in #12709, the use of the `local` attribute in `beans:` namespace is no longer of much value now that bean `id` elements are typed as `xsd:string` instead of `xsd:ID`.  Determine what to do with this value in the `spring-beans-3.1.xsd`: preserve, deprecate (read: eliminate from 3.1, but still support in the parser for those who use","closed","in: core,","spring-projects-issues","2011-03-14T06:08:23Z","2019-01-11T12:39:05Z"
"","12708","New XmlReaderContext.getProblemReporter() method causes STS error [SPR-8053]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8053](https://jira.spring.io/browse/SPR-8053?redirect=false)** and commented  ---  This issue is a sub-task of #12703","closed","type: task,","spring-projects-issues","2011-03-13T23:02:52Z","2019-01-11T12:39:33Z"
"","12707","Undo / fix all ""TODO 3.1 GA"" issues [SPR-8052]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8052](https://jira.spring.io/browse/SPR-8052?redirect=false)** and commented  Workaround compensating for STS incompatibilities have been marked with  ``` // TODO 3.1 GA ```  Find these comments and clean up the issues once we have a version of STS compatible with 3.1.  ---  **Affects:** 3.1 M1  This issue is a sub-task of #12703","closed","","spring-projects-issues","2011-03-13T22:45:22Z","2019-01-11T12:39:22Z"
"","12706","BeanDefinitionParserDelegate.getEnvironment causes NoSuchMethodError in STS [SPR-8051]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8051](https://jira.spring.io/browse/SPR-8051?redirect=false)** and commented  ---  **Affects:** 3.1 M1  This issue is a sub-task of #12703","closed","type: task,","spring-projects-issues","2011-03-13T22:41:23Z","2019-01-11T12:39:27Z"
"","12705","New DefaultConversionService type causes STS error [SPR-8050]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8050](https://jira.spring.io/browse/SPR-8050?redirect=false)** and commented  `DefaultConversionService` was added in Spring 3.1 M1.  STS is not aware of this type due to using Spring 3.0.5 internally.  This manifests as a red 'X' in the bean configuration file editor, for example when declaring a `` element.  The following error is raised (from STS' Error Log view):  ``` java.lang.IllegalAccessError: org/springframework/core/convert/support/ArrayToCollectionConverter at org.springframework.core.convert.support.DefaultConversionService.addDefaultConverters(DefaultConversionService.java:48) at org.springframework.core.convert.support.DefaultConversionService.(DefaultConversionService.java:40) at org.springframework.core.env.AbstractPropertyResolver.(AbstractPropertyResolver.java:41) at org.springframework.core.env.PropertySourcesPropertyResolver.(PropertySourcesPropertyResolver.java:36) at org.springframework.core.env.AbstractEnvironment.(AbstractEnvironment.java:61) at org.springframework.core.env.DefaultEnvironment.(DefaultEnvironment.java:96) at org.springframework.context.config.AbstractSpecificationBeanDefinitionParser.specificationContextFrom(AbstractSpecificationBeanDefinitionParser.java:64) at org.springframework.context.config.AbstractSpecificationBeanDefinitionParser.parse(AbstractSpecificationBeanDefinitionParser.java:44) at org.springframework.beans.factory.xml.NamespaceHandlerSupport.parse(NamespaceHandlerSupport.java:73) at org.springframework.ide.eclipse.beans.core.internal.model.namespaces.DelegatingNamespaceHandlerResolver$ElementTrackingNamespaceHandler.parse(DelegatingNamespaceHandlerResolver.java:177) at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1335) at org.springframework.ide.eclipse.beans.core.internal.model.BeansConfig$ErrorSuppressingBeanDefinitionParserDelegate.parseCustomElement(BeansConfig.java:1288) at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1325) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:135) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.registerBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:93) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:493) at org.springframework.ide.eclipse.beans.core.internal.model.BeansConfig$2.registerBeanDefinitions(BeansConfig.java:389) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:390) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:334) at org.springframework.ide.eclipse.beans.core.internal.model.BeansConfig$2.loadBeanDefinitions(BeansConfig.java:375) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:302) at org.springframework.ide.eclipse.beans.core.internal.model.BeansConfig$3.call(BeansConfig.java:417) at org.springframework.ide.eclipse.beans.core.internal.model.BeansConfig$3.call(BeansConfig.java:1) at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303) at java.util.concurrent.FutureTask.run(FutureTask.java:138) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303) at java.util.concurrent.FutureTask.run(FutureTask.java:138) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:680) ```  ---  **Affects:** 3.1 M1  This issue is a sub-task of #12703","closed","status: invalid,","spring-projects-issues","2011-03-13T22:24:23Z","2019-01-12T05:30:49Z"
"","12704","New BeanUtils.instantiateClass() signature causes STS error [SPR-8049]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8049](https://jira.spring.io/browse/SPR-8049?redirect=false)** and commented  ---  **Affects:** 3.1 M1  This issue is a sub-task of #12703","closed","type: task,","spring-projects-issues","2011-03-13T22:20:38Z","2019-01-11T12:39:43Z"
"","12703","Spring 3.1 M1 causes incompatibilities with STS [SPR-8048]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8048](https://jira.spring.io/browse/SPR-8048?redirect=false)** and commented  Tracking issue for tooling incompatibilities between STS and Spring 3.1.  See subtasks.  ---  **Affects:** 3.1 M1  **Sub-tasks:** - #12699 New ObjectUtils.containsConstant() method causes STS error - #12704 New BeanUtils.instantiateClass() signature causes STS error - #12705 New DefaultConversionService type causes STS error - #12706 BeanDefinitionParserDelegate.getEnvironment causes NoSuchMethodError in STS - #12707 Undo / fix all ""TODO 3.1 GA"" issues - #12708 New XmlReaderContext.getProblemReporter() method causes STS error","closed","status: invalid,","spring-projects-issues","2011-03-13T22:08:55Z","2019-01-12T05:30:50Z"
"","12699","New ObjectUtils.containsConstant() method causes STS error [SPR-8044]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8044](https://jira.spring.io/browse/SPR-8044?redirect=false)** and commented  This is the last known issue around changes made in 3.1 M1 that STS can't cope with because it uses 3.0.5.  Description	Resource	Path	Location	Type Unexpected exception parsing XML document from file [/Users/cbeams/Work/spring-framework/spring-3.1-profiles-xml/src/main/com/bank/config/xml/tx-config.xml]; nested exception is java.lang.NoSuchMethodError: org.springframework.util.ObjectUtils.containsConstant([Ljava/lang/Enum;Ljava/lang/String;)Z	tx-config.xml	/spring-3.1-profiles-xml/src/main/com/bank/config/xml	Unknown	Spring Beans Problem  ---  **Affects:** 3.1 M1  **Attachments:** - [Screen shot 2011-03-14 at 1.04.56 PM.png](https://jira.spring.io/secure/attachment/17728/Screen+shot+2011-03-14+at+1.04.56+PM.png) (_354.99 kB_)  This issue is a sub-task of #12703","closed","status: invalid,","spring-projects-issues","2011-03-12T05:05:01Z","2019-01-12T05:30:51Z"
"","12698","Review EarlyBeanReferenceProxyCreator behavior wrt FactoryBean.getObject [SPR-8043]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8043](https://jira.spring.io/browse/SPR-8043?redirect=false)** and commented  ---  **Affects:** 3.0 GA  This issue is a sub-task of #12076","closed","in: core,","spring-projects-issues","2011-03-12T05:00:01Z","2019-01-12T05:30:53Z"
"","12697","Review FormattingConversionService changes [SPR-8042]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8042](https://jira.spring.io/browse/SPR-8042?redirect=false)** and commented  Per correspondance with Rossen:  > Hey Chris, >  > As we know now a StringValueResolver constructor arg is required in order to create default formatters with support for placeholders. Shouldn't the EmbeddedValueResolverAware interface be dropped in that case since it's provided too late to have any effect on default formatters? >  > Rossen  Also, regarding `FormattingConversionServiceFactoryBean`:  > installFormatters is now `@Deprecated` >  > the strategy they would have taken before for ignoring registration of default formatters (override and don't call super) won't work anymore -- now they need to pass registerDefaultFormatters = false.    ---  **Affects:** 3.1 M1","closed","status: declined,","spring-projects-issues","2011-03-12T04:57:33Z","2015-09-22T17:34:34Z"
"","12696","Resolve remaining SPR-7420 TODO items [SPR-8041]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8041](https://jira.spring.io/browse/SPR-8041?redirect=false)** and commented  ---  This issue is a sub-task of #12078","closed","in: core,","spring-projects-issues","2011-03-12T04:42:34Z","2019-01-11T12:40:05Z"
"","12694","Introduce FeatureSpecifications for BeanDefinitionParsers as appropriate [SPR-8039]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8039](https://jira.spring.io/browse/SPR-8039?redirect=false)** and commented  Most `BeanDefinitionParsers` are candidates for extraction of a `FeatureSpecification` type usable from within `@Feature` methods.  Some are not.  For example, `PropertyPlaceholderBeanDefinitionParser` (`context:property-placeholder`) need not have a dedicated `FeatureSpecification` because (a) the implementation of `PPBDP` is so simple, and (b) a `Property(Sources)PlaceholderConfigurer` can be configured and returned directly from a `@Bean` method - no `@Feature` required.  At time of this writing, there are certain `BDP` impls for which it's not certain whether a `FeatureSpecification` extraction is appropriate.  Titles for these subtask issues below are prefixed with ""Investigate ..."".  These BDPs need to be evaluated as to whether they genuinely represent a ""feature of the container"", or are simply a convenience for registering a single bean.  In the former case, a `FeatureSpecification` should likely be extracted.  In the latter, direct translation to `@Bean` methods by users should be straightforward.  In cases where no dedicated `FeatureSpecification` is introduced, the `BeanDefinitionParser` implementation and probably also the XSD documentation should be updated to reflect how the functionality provided by this parser/element should be achieved when using `@Bean` methods to configure the container.  You'll notice that a subtask exists below for nearly every Spring XML namespace element shipped with the core container.  Even though some elements/parsers are not candidates for `FeatureSpecification` extraction, the subtask remains in order to provide a single point of reference for users and maintainers about these decisions.  Issues such as #12817 (regarding `jdbc:embedded-database`) are resolved as ""Won't Fix"" with an explanation why a `FeatureSpecification` refactoring is not necessary and instructing users how to achieve the same functionality in a `@Bean` method (configuring an `EmbeddedDatabaseBuilder` and returning its `DataSource` product).  ---  **Attachments:** - [Screen shot 2011-03-12 at 6.10.50 PM.png](https://jira.spring.io/secure/attachment/17722/Screen+shot+2011-03-12+at+6.10.50+PM.png) (_368.92 kB_)  **Sub-tasks:** - #12631 Introduce MvcInterceptors for InterceptorsBeanDefinitionParser (mvc:interceptors) - #12788 Introduce CacheAnnotationDriven for AnnotationDrivenCacheBeanDefinitionParser (cache:annotation-driven) - #12790 SpringConfiguredBeanDefinitionParser (aop:spring-configured) - #12791 LoadTimeWeaverBeanDefinitionParser (context:load-time-weaver) - #12792 SpringConfiguredBeanDefinitionParser (context:spring-configured) - #12793 Introduce MvcAnnotationDriven for AnnotationDrivenBeanDefinitionParser (mvc:annotation-driven) - #12794 Introduce ComponentScanSpec for ComponentScanBeanDefinitionParser (context:component-scan) - #12795 Introduce MvcDefaultServletHandler for DefaultServletHandlerBeanDefinitionParser (mvc:default-servlet-handler) - #12796 Introduce MvcViewControllers for ViewControllersBeanDefinitionParser (mvc:view-controllers) - #12797 Introduce TxAnnotationDriven for AnnotationDrivenBeanDefinitionParser (tx:annotation-driven) - #12798 Introduce TaskAnnotationDriven for AnnotationDrivenBeanDefinitionParser (task:annotation-driven) - #12800 Investigate MBeanExportBeanDefinitionParser (context:mbean-server) - #12801 Investigate MBeanExportBeanDefinitionParser (context:mbean-export) - #12802 Investigate MBeanServerBeanDefinitionParser (context:mbean-server) - #12803 Investigate JndiLookupBeanDefinitionParser (jee:jndi-lookup) - #12804 Investigate LocalStatelessSessionBeanDefinitionParser (jee:local-slsb) - #12805 Investigate RemoteStatelessSessionBeanDefinitionParser (jee:remote-slsb) - #12806 Investigate ExecutorBeanDefinitionParser (task:executor) - #12807 Investigate ScheduledTasksBeanDefinitionParser (task:scheduled) - #12808 Investigate SchedulerBeanDefinitionParser (task:scheduler) - #12809 Investigate ScriptBeanDefinitionParser (lang:*) - #12810 Investigate TxAdviceBeanDefinitionParser (tx:advice) - #12811 Investigate JtaTransactionManagerBeanDefinitionParser (tx:jta-transaction-manager) - #12812 Investigate Jaxb2MarshallerBeanDefinitionParser (oxm:jaxb2-marshaller) - #12813 Investigate JibxMarshallerBeanDefinitionParser (oxm:jibx-marshaller) - #12814 Investigate XmlBeansMarshallerBeanDefinitionParser (oxm:xmlbeans-marshaller) - #12815 Introduce FeatureSpecification for PropertyOverrideBeanDefinitionParser (context:property-override) - #12816 Introduce FeatureSpecification for PropertyPlaceholderBeanDefinitionParser (context:property-placeholder) - #12817 Introduce FeatureSpecification for EmbeddedDatabaseBeanDefinitionParser (jdbc:embedded-database) - #12818 Introduce FeatureSpecification for InitializeDatabaseBeanDefinitionParser (jdbc:initialize-database) - #12819 Introduce FeatureSpecification for AnnotationDrivenBeanDefinitionParser (context:annotation-driven) - #12820 Introduce JmsListenerContainer for JmsListenerContainerParser (jms:listener-container) - #12821 Introduce JcaListenerContainer for JcaListenerContainerParser (jms:jca-listener-container) - #12822 Investigate ScopedProxyBeanDefinitionDecorator (aop:scoped-proxy) - #12823 Introduce FeatureSpecification types for util:* elements and parsers  **Issue Links:** - #9775 Decouple XML parsing from bean registration in BeanDefinitionParsers  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/111fb71fe1ccb8d3a5e06e61461edd87d6d025f4","closed","type: enhancement,","spring-projects-issues","2011-03-12T02:18:14Z","2019-01-11T12:40:26Z"
"","12693","Register JndiPropertySource by default in StandardPortletEnvironment [SPR-8038]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8038](https://jira.spring.io/browse/SPR-8038?redirect=false)** and commented  DefaultWebEnvironment allows for optional automatic inclusion of a `JndiPropertySource`.  `DefaultPortletEnvironment` should do the same.  ---  **Affects:** 3.1 M1  **Attachments:** - [mylyn-context.zip](https://jira.spring.io/secure/attachment/17720/mylyn-context.zip) (_1.34 kB_)  **Issue Links:** - #7716 JNDI Property Placeholder Configurer","closed","type: enhancement,","spring-projects-issues","2011-03-12T00:26:44Z","2019-01-11T12:40:20Z"
"","12690","Support @Profile as a meta-annotation [SPR-8035]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8035](https://jira.spring.io/browse/SPR-8035?redirect=false)** and commented  ---  **Attachments:** - [mylyn-context.zip](https://jira.spring.io/secure/attachment/17716/mylyn-context.zip) (_1.75 kB_)  This issue is a sub-task of #12165","closed","type: task,","spring-projects-issues","2011-03-11T05:31:25Z","2019-01-11T12:40:41Z"
"","12689","Automatically detect and register static nested @FeatureConfiguration classes [SPR-8034]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8034](https://jira.spring.io/browse/SPR-8034?redirect=false)** and commented  As a convenience to avoids the need to create a separate compilation unit (.java file) for `@FeatureConfiguration` types, allow users to do the following:  ``` @Configuration public class MyBeans {     @Bean     public DataSource dataSource() { ... }          @FeatureConfiguration     static class MyFeatures {         @Feature         public ComponentScanSpec scan() {             return new ComponentScanSpec(""com.bank.app"");         }     } } ```  In such a case, no explicit registration or import of the `@FeatureConfiguration` class would be necessary.  Simply bootstrapping the container with  ``` new AnnotationConfigApplicationContext(MyBeans.class); ```  Would be enough.  ---  **Issue Links:** - #12837 Automatically detect and register nested `@Configuration` classes","closed","status: invalid,","spring-projects-issues","2011-03-11T05:12:34Z","2019-01-13T07:10:50Z"
"","12688","Allow other delimiters in profile XML attribute [SPR-8033]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8033](https://jira.spring.io/browse/SPR-8033?redirect=false)** and commented  Per comment at http://blog.springsource.com/2011/02/11/spring-framework-3-1-m1-released/comment-page-1/#comment-184455  Allow comma, space and/or semicolon to delimit (currently only comma is allowed in Spring 3.1 M1)   ---  **Affects:** 3.1 M1  **Attachments:** - [mylyn-context.zip](https://jira.spring.io/secure/attachment/17713/mylyn-context.zip) (_33.23 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f17f970144f43270c8a34a481a0f391037315740","closed","type: enhancement,","spring-projects-issues","2011-03-10T19:15:08Z","2012-06-19T03:39:52Z"
"","12686","Resolve remaining SPR-7508 TODO items [SPR-8031]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-8031](https://jira.spring.io/browse/SPR-8031?redirect=false)** and commented  ---  This issue is a sub-task of #12165","closed","in: core,","spring-projects-issues","2011-03-10T05:49:04Z","2019-01-11T12:40:49Z"
"","12544","Introduce @EnableSpringConfigured [SPR-7888]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-7888](https://jira.spring.io/browse/SPR-7888?redirect=false)** and commented  Equivalent to   Because `@Configuration` classes don't produce bean definitions in quite the same way that XML configuration files do, an annotation-based `@SpringConfigured` annotation must work differently than .  Consider the following approach:  `@Configurationpublic` class SpringConfiguredBeans {      @SpringConfigured     public void someEntity(MyEntity entity) {         entity.setRepository(myRepository());             }          @Bean     public MyRepository myRepository() {         return new MyRepository(dataSource());     }          // ...}  ---  **Issue Links:** - #12790 SpringConfiguredBeanDefinitionParser (aop:spring-configured) (_**""is duplicated by""**_) - #12792 SpringConfiguredBeanDefinitionParser (context:spring-configured) (_**""is duplicated by""**_) - #12078 Support Java-Based Application Configuration  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/22e37aac444812eab6982a9f658d70656dd6a729, https://github.com/spring-projects/spring-framework/commit/d35620511e8304421929e89ed4d13d82d5f40219, https://github.com/spring-projects/spring-framework/commit/4318ccd9d519525a674a61ddf80b11f8bec29426  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2011-01-15T17:40:34Z","2019-01-11T15:21:00Z"
"","12446","Include license.txt and notice.txt in distribution files [SPR-7790]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-7790](https://jira.spring.io/browse/SPR-7790?redirect=false)** and commented  Tracking issue for https://jira.springsource.com/browse/BUILD-180 (private link):  > We have a requirement to include license.txt and notice.txt in distribution files - this means putting them in a META-INF directory in all jar files as well as including them in the root of any zip/tar distribution files.    ---  1 votes, 2 watchers","closed","type: task,","spring-projects-issues","2010-12-05T16:43:06Z","2012-06-19T03:39:50Z"
"","12434","Support 'default' profile [SPR-7778]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-7778](https://jira.spring.io/browse/SPR-7778?redirect=false)** and commented  ---  This issue is a sub-task of #12165  **Issue Links:** - #12852 Introduce a reserved default profile name (_**""is superseded by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b3e36a335d98945f8bf04ebb80ebe31664283720, https://github.com/spring-projects/spring-framework/commit/5062dc31af63691f91a8a473803653d4d36d9a39  1 votes, 2 watchers","closed","in: core,","spring-projects-issues","2010-11-30T22:46:32Z","2019-01-11T15:32:16Z"
"","12433","Add reference documentation for Environment and PropertySource [SPR-7777]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-7777](https://jira.spring.io/browse/SPR-7777?redirect=false)** and commented  ---  This issue is a sub-task of #12165","closed","in: core,","spring-projects-issues","2010-11-30T22:38:54Z","2019-01-11T15:32:22Z"
"","12432","Support Environment and PropertySource [SPR-7776]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-7776](https://jira.spring.io/browse/SPR-7776?redirect=false)** and commented  ---  This issue is a sub-task of #12165","closed","in: core,","spring-projects-issues","2010-11-30T22:38:00Z","2019-01-11T15:31:56Z"
"","12431","Support @Profile annotation [SPR-7775]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-7775](https://jira.spring.io/browse/SPR-7775?redirect=false)** and commented  ---  This issue is a sub-task of #12165","closed","in: core,","spring-projects-issues","2010-11-30T22:30:19Z","2019-01-11T15:31:59Z"
"","12430","Add reference documentation for nested beans elements [SPR-7774]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-7774](https://jira.spring.io/browse/SPR-7774?redirect=false)** and commented  ---  This issue is a sub-task of #12165","closed","in: core,","spring-projects-issues","2010-11-30T22:27:11Z","2019-01-11T15:31:49Z"
"","12312","'default-merge' attribute value does not propagate to collection elements [SPR-7656]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-7656](https://jira.spring.io/browse/SPR-7656?redirect=false)** and commented  collection elements in the beans schema (\, \, \, \, \) each expose a 'merge' attribute of type 'defaultable-boolean'.  All such attributes should also explicitly set default=""default"", but these elements do not.  This violates expectations during parsing, as the parsing routine expects the default value to be the literal string ""default"", in which case the parent \ element's default values are interrogated as a fallback.  Instead, these attributes default to empty string.  Thus, if \ has been set, it never gets propagated to the individual collection elements, because the parsing routine didn't think it was necessary.  This appears to have been the case since as early as Spring 2.0.  Apparently there aren't many folks using `default-merge`!   ---  **Affects:** 2.0 final  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c7aaa85ef6b4672be8e0a816d3d1f5ce71485539","closed","in: core,","spring-projects-issues","2010-10-14T09:52:13Z","2012-06-19T03:39:48Z"
"","12218","Document limitations of @Async annotation [SPR-7561]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-7561](https://jira.spring.io/browse/SPR-7561?redirect=false)** and commented  See #12217, where user attempted to mark a `@PostConstruct` method with `@Async`.  This will not work (nor would in conjunction with any other initialization callback mechanism).  Document this and any other limitations we may have missed.  Note that #12217 is still open as a candidate improvement in 3.1.  ---  **Issue Links:** - #12217 `@Async` and `@PostConstruct` don't work in combination","closed","in: core,","spring-projects-issues","2010-09-15T07:12:02Z","2019-01-13T07:13:00Z"
"","12212","Publish spring-mvc-3.0.xsd [SPR-7555]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-7555](https://jira.spring.io/browse/SPR-7555?redirect=false)** and commented  Per #12202, changes made in Spring 3.0.4 to spring-mvc-3.0 were never pushed to springframework.org.  This task will resolve that problem.  ---  This issue is a sub-task of #12211  **Issue Links:** - #12230 Publish updated spring-mvc.xsd with resources element definition (_**""is duplicated by""**_) - #12202 Update documentation and XSD for mvc:default-servlet-handler  4 votes, 4 watchers","closed","type: task,","spring-projects-issues","2010-09-14T02:01:07Z","2019-01-11T15:08:13Z"
"","12211","Release Spring 3.0.5 [SPR-7554]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-7554](https://jira.spring.io/browse/SPR-7554?redirect=false)** and commented  ---  **Sub-tasks:** - #12212 Publish spring-mvc-3.0.xsd  4 votes, 4 watchers","closed","type: task,","spring-projects-issues","2010-09-14T01:48:28Z","2019-01-11T15:08:02Z"
"","12209","Distinguish file- and non-file based Resources explicitly [SPR-7552]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-7552](https://jira.spring.io/browse/SPR-7552?redirect=false)** and commented  Per bug #12204, certain areas of the framework such as `PropertiesLoaderSupport` assume that all Resources are file based.  In the case in point, `Resource.getFilename()` was called indiscriminately, and when called against a `ByteArrayResource`, which does not implement `getFilename()`, `AbstractResource.getFilename()` is called, which throws `IllegalStateException`.  Ideally, a distinct abstraction would be introduced, such as `FileBasedResource`, abstractly declaring methods such as `getFile()`, `getFilename()` `getFileForLastModifiedCheck()`, and so on.  For backward-compat reasons, this may not be feasible; in any case, however, we can provide a consistent treatment by adding an '`isFileBased()`' method or something to that effect and doing checks against it wherever appropriate.  #12204 was quickly patched by adding a try/catch around `getFilename()`.  Let's refactor this toward something more consistent and predictable.  ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1a7aebb0dd8e18f339e33b4460b9f0121569092d, https://github.com/spring-projects/spring-framework/commit/b3ff9be78f62ff1d13ab874a4772f8fc6d189eb4, https://github.com/spring-projects/spring-framework/commit/05bcc4028d63fe8896ca7959a47f0d17ae14ce51","closed","type: enhancement,","spring-projects-issues","2010-09-13T13:43:53Z","2019-01-11T15:08:27Z"
"","12192","Add reference documentation for @Profile annotation [SPR-7534]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-7534](https://jira.spring.io/browse/SPR-7534?redirect=false)** and commented  ---  This issue is a sub-task of #12165","closed","status: declined,","spring-projects-issues","2010-09-09T07:43:28Z","2019-01-11T14:43:06Z"
"","12191","Add reference documentation for beans element 'profile' attribute [SPR-7533]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-7533](https://jira.spring.io/browse/SPR-7533?redirect=false)** and commented  ---  This issue is a sub-task of #12165","closed","","spring-projects-issues","2010-09-09T07:43:14Z","2019-01-11T14:43:09Z"
"","12188","Allow Class-relative resource loading in GenericXmlApplicationContext [SPR-7530]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-7530](https://jira.spring.io/browse/SPR-7530?redirect=false)** and commented  Add * `GenericXmlApplicationContext(Class relativeTo, String... resources)` * `load(Class relativeTo, String... resources)`  For convenience and parity with `ClassPathXmlApplicationContext`, which `GenericXmlApplicationContext` is designed to supersede.   ---  **Affects:** 3.0 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6f69b7b75251a5e78a15b1c5c41b329fb2d482d0","closed","type: enhancement,","spring-projects-issues","2010-09-08T07:53:48Z","2012-06-19T03:44:15Z"
"","12181","Registering null singleton results in BNFE on context refresh [SPR-7523]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-7523](https://jira.spring.io/browse/SPR-7523?redirect=false)** and commented  To reproduce:  ``` @Test public void nullBeanRegistration() { 		DefaultListableBeanFactory bf = new DefaultListableBeanFactory(); 		bf.registerSingleton(""nullBean"", null); 		new GenericApplicationContext(bf).refresh(); } ```  Notice the `BeanNotFoundException` upon `refresh()`.  This is happening because `DefaultSingletonBeanRegistry.getSingleton()` returns literal `null`, and `AbstractBeanFactory.isFactoryBean()` interprets `null` as meaning ""No singleton instance found"".  Resolution:  In `isFactoryBean()`, if the call to `getSingleton()` returns null, need need to double check whether the bean name is listed in `getSingletonNames()`.  Just evaluating whether it's null is not enough information upon which to make the subsequent decisions.  Those 'subsequent decisions' include assuming that the bean name in question ('nullBean') **must** be associated with a `BeanDefinition`, and thus we get the BNFE mentioned above.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/05a3f3ad8d91e5181ebbbe7f7adcffd41ff5423e","closed","in: core,","spring-projects-issues","2010-09-03T07:43:53Z","2012-06-19T03:44:19Z"
"","12177","SpEL regression with ArrayList to int array conversion [SPR-7519]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-7519](https://jira.spring.io/browse/SPR-7519?redirect=false)** and commented  I just discovered what appears to be a regression in SpEL support when attempting to upgrade Spring Integration from depending on Spring 3.0.3 to Spring 3.0.4.  See the stack trace here: http://build.springframework.org/browse/INT-TRUNK-3075/test/case/63242567  This can be reproduced with the following steps:  1. svn co https://src.springframework.org/svn/spring-integration/trunk@4079 2. mvn test 3. notice build fails with a single 'test in error': `shouldFindSimpleAggregatorMethodWithArray`  I suspect the regression occurred in one of the following two commits that have happened since 3.0.3 was released:  1. https://fisheye.springsource.org/changelog/spring-framework/?cs=3473 (Andy, ""support for expression inline lists and array construction (#11994)"") 2. https://fisheye.springsource.org/changelog/spring-framework/?cs=3542 (Juergen, "" SpEL passes full collection type context to ConversionService (#12068)""  Perhaps specifically in Andy's latest `changes to org.springframework.expression/src/main/java/org/springframework/expression/spel/SpelMessage.java`?  ---  **Affects:** 3.0.4, 3.0.5  **Issue Links:** - [INT-1399](https://jira.spring.io/browse/INT-1399) Upgrade SI to Spring 3.0.5 (_**""is depended on by""**_) - #12154 Regression in Collection to array conversion - [INT-1293](https://jira.spring.io/browse/INT-1293) Update template.mf files Spring 3.0.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c33df5977a622d5ced7a057af090c39a8f95b2ec","closed","type: bug,","spring-projects-issues","2010-09-02T05:21:08Z","2019-01-11T15:03:11Z"
"","12173","Create EnvironmentAwarePropertyPlaceholderConfigurer [SPR-7515]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-7515](https://jira.spring.io/browse/SPR-7515?redirect=false)** and commented  ---  This issue is a sub-task of #12165","closed","in: core,","spring-projects-issues","2010-09-01T03:51:26Z","2019-01-11T15:03:25Z"
"","12171","Support beans element 'profile' attribute [SPR-7514]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-7514](https://jira.spring.io/browse/SPR-7514?redirect=false)** and commented  ---  This issue is a sub-task of #12165  1 votes, 2 watchers","closed","in: core,","spring-projects-issues","2010-09-01T00:34:36Z","2019-01-11T15:03:16Z"
"","12170","Support nested beans elements [SPR-7513]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-7513](https://jira.spring.io/browse/SPR-7513?redirect=false)** and commented  ---  This issue is a sub-task of #12165","closed","in: core,","spring-projects-issues","2010-09-01T00:30:34Z","2019-01-11T15:03:20Z"
"","12165","Add environment abstraction and support bean definition profiles [SPR-7508]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-7508](https://jira.spring.io/browse/SPR-7508?redirect=false)** and commented  ---  **Sub-tasks:** - #12170 Support nested beans elements - #12171 Support beans element 'profile' attribute - #12173 Create EnvironmentAwarePropertyPlaceholderConfigurer - #12191 Add reference documentation for beans element 'profile' attribute - #12192 Add reference documentation for `@Profile` annotation - #12430 Add reference documentation for nested beans elements - #12431 Support `@Profile` annotation - #12432 Support Environment and PropertySource - #12433 Add reference documentation for Environment and PropertySource - #12434 Support 'default' profile - #12686 Resolve remaining SPR-7508 TODO items - #12690 Support `@Profile` as a meta-annotation  **Issue Links:** - #9935 Conditional Bean Definitions (_**""supersedes""**_)  5 votes, 9 watchers","closed","type: enhancement,","spring-projects-issues","2010-08-30T11:38:19Z","2019-01-13T07:13:13Z"
"","12164","Create and publish 'next' development branch [SPR-7507]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-7507](https://jira.spring.io/browse/SPR-7507?redirect=false)** and commented  1. Create https://src.springframework.org/svn/spring-framework/branches/next, to be used for feature development during times when trunk is occupied by current-version bugfixes and point releases. 2. Create http://build.springsource.org/browse/SPR-NEXTQUICK for per-commit CI builds 3. Create http://build.springsource.org/browse/SPR-NEXTSNAPSHOT for publishing nightly maven snapshots 4. Change version to 3.1.0 in 'next' branch    --- No further details from [SPR-7507](https://jira.spring.io/browse/SPR-7507?redirect=false)","closed","","spring-projects-issues","2010-08-30T09:00:46Z","2019-01-11T15:04:24Z"
"","12125","Split IoC chapter DocBook XML into multiple files [SPR-7467]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-7467](https://jira.spring.io/browse/SPR-7467?redirect=false)** and commented  At 7,500 lines and over 360,000 characters, `beans.xml` is by far the largest docbook source artifact in the Spring reference documentation.  This means extremely slow rendering times for docbook wysiwyg tools such as oXygen Author XML.  Proposed is that this file be split up into four files, simply named:  * `beans.xml` - IoC `` container and `` elements including the following: * `beans-1.xml` - first third of content * `beans-2.xml` - second third of content * `beans-3.xml` - final third of content    ---  **Attachments:** - [mylyn-context.zip](https://jira.spring.io/secure/attachment/17011/mylyn-context.zip) (_29.39 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9ab2c6628b4f912b8ec23cd8dc3ccd3e54b5fa8e","closed","type: documentation,","spring-projects-issues","2010-08-17T02:12:36Z","2012-06-19T03:43:49Z"
"","12124","Document BeanFactoryPostProcessor implementation constraints [SPR-7466]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-7466](https://jira.spring.io/browse/SPR-7466?redirect=false)** and commented  #12108, while not actually a bug in Spring per se, was ultimately related to a BeanFactoryPostProcessor implementation in Spring Security OAuth that was misbehaving by prematurely instantiating bean instances, ultimately subverting the normal bean post-processing lifecycle (specifically, `AutowiredAnnotationBeanPostProcessor`).  Document the constraints when implementing BFPPs, such that future authors don't make this mistake.  JavaDoc for BFPP, and relevant section(s) within the reference documentation should be updated.  ---  **Attachments:** - [mylyn-context.zip](https://jira.spring.io/secure/attachment/17007/mylyn-context.zip) (_2.91 kB_)  **Issue Links:** - #12108 `@Inject` Autowiring by type fails on FactoryBeans and injected refs the FactoryBean depends on (_**""supersedes""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9a088b8128cb1a8027a13645a7e4d400d767aabb","closed","type: documentation,","spring-projects-issues","2010-08-17T01:55:47Z","2019-01-13T07:13:25Z"
"","12102","Document scoped-proxy serialization [SPR-7444]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-7444](https://jira.spring.io/browse/SPR-7444?redirect=false)** and commented  Spring 3.0 GA introduced scoped-proxy serialization, but this has not yet been covered in the reference documentation.  ---  **Affects:** 3.0 GA  **Sub-tasks:** - #12017 Document session-scoped proxy serialization issues on Tomcat","closed","status: declined,","spring-projects-issues","2010-08-10T04:02:09Z","2019-01-11T14:06:14Z"
"","12101","Document constructor-arg 'name' attribute [SPR-7443]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-7443](https://jira.spring.io/browse/SPR-7443?redirect=false)** and commented  Spring 3.0 GA introduced support for named constructor args, but this has not been reflected in the reference documentation.  See https://fisheye.springsource.org/browse/spring-framework/trunk/org.springframework.beans/src/main/resources/org/springframework/beans/factory/xml/spring-beans-3.0.xsd?r=2457#l559  ---  **Issue Links:** - #11129 Named constructor args cannot be overridden by child bean definitions  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c1d2c36f32291294407baebd7625955f02378f0b, https://github.com/spring-projects/spring-framework/commit/562747ef414b8de4224f3eb9a2ee1b93f12b0cc5, https://github.com/spring-projects/spring-framework/commit/e8b9c6d5ff6d48760d0abdd54147d9ed6c430a30","closed","type: documentation,","spring-projects-issues","2010-08-10T03:32:48Z","2019-01-11T14:06:19Z"
"","12092","Remove XFire reference documentation [SPR-7434]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-7434](https://jira.spring.io/browse/SPR-7434?redirect=false)** and commented  As pointed out by #11998, the XFire documentation in the Remoting chapter of the reference docs is out of date, and does not reflect Codehaus' own succession of XFire by CXF.  `@Rossen`, assigning to you as I know you're familiar with the topic.  Comment, fix, or re-assign as you see fit.  ---  **Issue Links:** - #11998 Minor content issues and typos in Spring Reference Documentation  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/258a47435de27238604a1a9c3322815a1f01c0d6  0 votes, 5 watchers","closed","type: documentation,","spring-projects-issues","2010-08-07T07:23:57Z","2019-01-11T14:07:08Z"
"","12091","Remove Chapter 27 from reference documentation [SPR-7433]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-7433](https://jira.spring.io/browse/SPR-7433?redirect=false)** and commented  As first pointed out in #11998, [Chapter 27, ""Annotations and Source-Level Metadata Support""](http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/metadata.html) seems either unfinished or unnecessary.  `@Required` is discussed in detail, conferring on it a level of importance it probably doesn't deserve.  The links at the bottom of the chapter are incomplete, for example Spring's JMX annotations are not referenced.  The language is also somewhat dated.  I've already fixed a number of typos and usage problems, but in general, I think we ought to consider eliminating the chapter completely.  Thomas, your thoughts?  I'll also add Mark Pollack as a watcher, as it appears he was the original author.  ---  **Issue Links:** - #11998 Minor content issues and typos in Spring Reference Documentation  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5ce4cada5362f330de847d92a94fb3b001e6b3cd, https://github.com/spring-projects/spring-framework/commit/3d2dd447af6aeb0b17e98ec56d7f9b532ff2e05e","closed","type: documentation,","spring-projects-issues","2010-08-07T05:52:17Z","2019-01-11T14:06:54Z"
"","12078","Support Java-Based Application Configuration [SPR-7420]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-7420](https://jira.spring.io/browse/SPR-7420?redirect=false)** and commented  Spring 3.0 introduced Java-Based bean definitions with `@Configuration` and `@Bean`.  This new feature for Spring 3.1 will introduce Java-based mechanisms for enabling the higher-level application configuration functionality currently found only in Spring's XML namespaces.  These include but are not limited to:  * Enabling annotation-driven transaction management (``) * Enabling annotation-driven scheduling (``) * Enabling AspectJ auto-proxying (`","closed","has: votes-jira,","spring-projects-issues","2010-08-03T09:09:17Z","2019-01-13T07:13:34Z"
"","12076","Provide alternatives to using FactoryBean types within @Bean methods [SPR-7418]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-7418](https://jira.spring.io/browse/SPR-7418?redirect=false)** and commented  Consolidating the following issues related to using `FactoryBean` implementations within `@Bean` methods: * #11140 * #12045 * #10687  ---  **Affects:** 3.0 GA  **Sub-tasks:** - #12698 Review EarlyBeanReferenceProxyCreator behavior wrt FactoryBean.getObject - #12721 Introduce (Annotation)SessionFactoryBuilder types - #12766 Test *SessionFactoryBean compatibility with earlier versions of Spring - #12779 Introduce EntityManagerFactoryBuilder types - #12780 Document `@Bean` alternatives to JndiObjectFactoryBean - #12781 Introduce QuartzSchedulerBuilder as `@Bean` alternative to SchedulerFactoryBean - #12782 Document `@Bean` alternatives to ScheduledExecutor and ThreadPoolExecutor FactoryBean types - #12783 Introduce RmiRegistryBuilder as `@Bean` alternative to RmiRegistryFactoryBean - #12784 Introduce RmiProxyBuilder as `@Bean` alternative to RmiProxyFactoryBean - #12785 Introduce HessianProxyBuilder as `@Bean` alternative to HessianProxyFactoryBean - #12786 Introduce BurlapProxyBuilder as `@Bean` alternative to BurlapProxyFactoryBean - #12787 Introduce HttpInvokerProxyBuilder as `@Bean` alternative to HttpInvokerProxyFactoryBean  **Issue Links:** - #12768 Support automatic detection of close methods - #12734 Support injection against setter methods with non-void return types - #12045 Mixing PersistenceExceptionTranslator logic into FactoryBeans prevents using PersistenceExeptionTranslationPostProcessor with `@Configuration` classes (_**""supersedes""**_) - #10687 Support of class ConfigurationSupport in Spring 3.0.x framework (_**""supersedes""**_) - #11140 JavaConfig - provide more tooling when working with a FactoryBean implementation (_**""supersedes""**_)  4 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2010-08-03T06:19:41Z","2019-01-13T07:13:36Z"
"","11962","Remove dependency-check coverage from reference docs [SPR-7303]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-7303](https://jira.spring.io/browse/SPR-7303?redirect=false)** and commented  Per #10400, `dependency-check` has been removed as an attribute of the `` element and `default-dependency-check` has been removed as an attribute of the `` element.  However, the reference documentation still contains a section [describing this functionality](http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/htmlsingle/spring-framework-reference.html#beans-factory-dependencies) as if it were still there.  Options:  1. outright remove the section and be done with it 2. expand the section by explaining that this functionality _used_ to be there and why it's now gone 3. move the section to [Appendix A: Classic Spring Usage](http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/htmlsingle/spring-framework-reference.html#classic-spring)  ---  **Affects:** 3.0 GA  **Issue Links:** - #10400 dependency-check attribute in bean tag does not exist anymore  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/73ec8402796d107c62eec15bfa733678cbd9b84a","closed","type: documentation,","spring-projects-issues","2010-06-19T07:08:49Z","2019-01-11T14:21:49Z"
"","12583","BatchingRowCallbackHandler interface extension to the RowCallbackHandler. [SPR-7928]","**[Chad Lyon](https://jira.spring.io/secure/ViewProfile.jspa?name=chad.lyon)** opened **[SPR-7928](https://jira.spring.io/browse/SPR-7928?redirect=false)** and commented  Often backend applications need to update one row in some other DB/table for each row in a result set. For large result sets this update really should be batched to improve performance however, often times applications are coded with a JdbcTemplate.update(...) call inside the processRow() method of the RowCallbackHandler.  This interface extension adds the concept of batching within the RowCallbackHandler.  Please improve this concept and add to spring. :)   ---  **Affects:** 3.0.5  **Attachments:** - [BatchingRowCallbackHandler.java](https://jira.spring.io/secure/attachment/17571/BatchingRowCallbackHandler.java) (_1.75 kB_)","closed","type: enhancement,","spring-projects-issues","2011-02-01T09:16:58Z","2018-12-28T10:25:02Z"
"","12064","Document @RequestHeader and @RequestParam coercion semantics [SPR-7406]","**[Chad La Joie](https://jira.spring.io/secure/ViewProfile.jspa?name=daleth)** opened **[SPR-7406](https://jira.spring.io/browse/SPR-7406?redirect=false)** and commented  The Spring reference manual says that type coercion will occur on `@RequestHeader` and `@RequestParam` annotated controller method params.  However, no information about the semantics of the coercion.  The referenced forum's question gives one example of the missing information.   ---  **Affects:** 3.0 M1, 3.0 M2, 3.0 M3, 3.0 M4, 3.0 RC1, 3.0 RC2, 3.0 RC3, 3.0 GA, 3.0.1, 3.0.2, 3.0.3  **Reference URL:** http://forum.springsource.org/showthread.php?t=92700  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/56d50ba8a54252d2aa5e9f43e05b0cf4d64c86d0","closed","type: task,","spring-projects-issues","2010-07-30T05:43:11Z","2012-06-19T03:43:17Z"
"","12577","aop:aspectj-autoxproxy filters aspect beans but not advisor beans when using aop:include [SPR-7922]","**[Cedric Chabanois](https://jira.spring.io/secure/ViewProfile.jspa?name=cchabanois)** opened **[SPR-7922](https://jira.spring.io/browse/SPR-7922?redirect=false)** and commented  AnnotationAwareAspectJAutoProxyCreator.isEligibleAspectBean returns true only for aspects matching one of the include patterns.  But isEligibleAdvisorBean returns true no matter what.    ---  **Affects:** 3.0.5","closed","in: core,","spring-projects-issues","2011-01-31T01:21:08Z","2019-01-12T16:26:13Z"
"","12548","RuntimeTestWalker throws an AccessControlException ""access denied java.lang.reflect.ReflectPermission suppressAccessChecks"" if we use a security policy [SPR-7892]","**[Cedric Chabanois](https://jira.spring.io/secure/ViewProfile.jspa?name=cchabanois)** opened **[SPR-7892](https://jira.spring.io/browse/SPR-7892?redirect=false)** and commented  I think we should use AccessController.doPrivileged in RuntimeTestWalker constructor. This way, we would only have to add  > permission java.lang.reflect.ReflectPermission ""suppressAccessChecks"";  for spring jars in policy file.   ---  **Affects:** 3.0.5  **Attachments:** - [patch.txt](https://jira.spring.io/secure/attachment/17531/patch.txt) (_2.87 kB_)","closed","in: core,","spring-projects-issues","2011-01-17T09:11:08Z","2019-01-12T16:26:17Z"
"","12329","Annotate required Attributes with @Required to make autocompletion in STS possible [SPR-7673]","**[Carsten Goetzinger](https://jira.spring.io/secure/ViewProfile.jspa?name=oetzi)** opened **[SPR-7673](https://jira.spring.io/browse/SPR-7673?redirect=false)** and commented  XML configuration could be much easier if STS would autocomplete the configuration of beans with all mandatory properties. This could be made easy if all these mandatory fields of a class which i could configure as a spring bean are marked as required (`@Required`). For example STS should create the property-elements for `serviceInterface` and `serviceUrl` if you configure a `org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean`   ---  **Affects:** 3.0.5  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2010-10-22T02:35:18Z","2014-12-08T12:27:31Z"
"","12566","Better handling of 204 No Content in RestTemplate [SPR-7911]","**[Carl Harris](https://jira.spring.io/secure/ViewProfile.jspa?name=ceharris414)** opened **[SPR-7911](https://jira.spring.io/browse/SPR-7911?redirect=false)** and commented  Some REST web services return 204 No Content as the result for a GET in certain circumstances.  With this status, the response has no entity body and thus no Content-Type header.  RestTemplate.getForEntity throws an exception when receiving such a response:  org.springframework.web.client.RestClientException: Cannot extract response: no Content-Type found  An improvement for RestTemplate.getForEntity would be to return a ResponseEntity instance with the statusCode property set as appropriate for 204 No Content, and null values for the body and contentType properties.  I considered trying to extend RestTemplate to make it behave in this manner.  Unfortunately, the extensive use of private static classes in the implementation makes it difficult to override the behavior of getForEntity -- can't just replace the ResponseEntityResponseExtractor implementation without also replacing other unrelated collaborators (e.g. AcceptHeaderRequestCallback).  It's possible to do it, it would just require a lot more code duplication than really seems warranted.  If you don't wish to change the behavior of RestTemplate.getForEntity, perhaps you might consider relaxing the access modifiers on these collaborator classes so that a subclass could make use of them?  ---  **Affects:** 3.1 M1  **Issue Links:** - #12671 RestTemplate - support response mapping to entity with potentially empty response body. (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c42671a78aa68f7ab8125311b2c9ce167b166c2c, https://github.com/spring-projects/spring-framework/commit/98870251f9fb27123353c549ae22fcf3679ebbd5  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2011-01-25T10:16:36Z","2019-01-11T16:13:22Z"
"","11914","SqlMapClientTemplate does not reuse current logical connection from one Ibatis session to another and results in extra JNDI calls when using JNDI datasource. [SPR-7255]","**[Carl Allain](https://jira.spring.io/secure/ViewProfile.jspa?name=callain_accovia)** opened **[SPR-7255](https://jira.spring.io/browse/SPR-7255?redirect=false)** and commented  SqlMapClientTemplate always create a new Ibatis session on every invocation (which prevents prepared statement caching in Ibatis btw), but it does not inject the current connection from the underlying dataSource if any (ex: TransactionAwareDataSourceProxy), which results in extra overhead (JNDI lookups apparently from tracing). The code in SqlMapClientTemplate:  ... SqlMapSession session = this.sqlMapClient.openSession();","closed","status: invalid,","spring-projects-issues","2010-06-02T23:32:09Z","2019-01-12T05:31:55Z"
"","12651","Improve documentation of the context caching mechanism in the TestContext framework [SPR-7996]","**[Caleb Jones](https://jira.spring.io/secure/ViewProfile.jspa?name=temujin_12)** opened **[SPR-7996](https://jira.spring.io/browse/SPR-7996?redirect=false)** and commented  #### Overview  Unit/integration test execution libraries can sometimes be configured to execute tests in a forked manner (see surefire's [forkMode](http://maven.apache.org/plugins/maven-surefire-plugin/test-mojo.html#forkMode) configuration). When tests are run in a forked mode, in-memory `@ContextConfiguration` caching no longer applies, and the context will be reloaded for every forked process.  The Spring reference manual merely states that `@ContextConfiguration` is cached and does not go into much detail beyond that. I think it would be good to specify that the cache is _in-memory_ and thus will only be usable for tests which run within the same JVM process / class space. Perhaps a Spring note (the ones with the little leaf icon and block quote styling) would be good to call this out in the Testing chapter.  #### To Document  - cache key generation, including a discussion of the algorithm in `MergedContextConfiguration` - cache scope and implications in a test _suite_, including a discussion of forking  ---  **Affects:** 2.5.6, 3.0.5  **Reference URL:** http://forum.springsource.org/showthread.php?t=104164  **Issue Links:** - #11984 TestContext should generate cache keys based on all metadata that uniquely identify ApplicationContext configuration - #13193 ContextCache should be keyed by MergedContextConfiguration instead of String  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e90c7eadc240282ae6759d9a5f14f5da47f117fc","closed","type: enhancement,","spring-projects-issues","2011-02-23T23:35:02Z","2019-01-11T16:18:08Z"
"","12405","enhance AnnotationMethodHandlerAdapter for automatic form validation [SPR-7749]","**[Bright Zheng](https://jira.spring.io/secure/ViewProfile.jspa?name=itstarting)** opened **[SPR-7749](https://jira.spring.io/browse/SPR-7749?redirect=false)** and commented  How can we extend AnnotationMethodHandlerAdapter for adding automatic validation like this?  `@Controller` class HelloController{  `@RequestMapping` `@Validator`(""myValidator"") public String foo(){  } }  class MyInterceptor implements MethodInterceptor{ public Errors preHandle(Method method, ...) throws Exception { Errors errors = new Errors(); Validator v = AnnotationUtils.findAnnotation(method, Validator.class); if(v!=null){ //get the method name of 'foo' as validation convention String methodName = method.getName(); //invoke myValidator.foo() and return errors return errors; } } }  Once the errors is not null, the controller can return back and show the messages. So we can plug our custom validator into the method with RequestMapping annotation and handle it automatically?   ---  **Affects:** 3.0.5","closed","type: enhancement,","spring-projects-issues","2010-11-17T20:29:28Z","2011-12-14T14:10:28Z"
"","12295","A resolved placeholder in an alias field isn't split into multiple aliases [SPR-7639]","**[Brien Wheeler](https://jira.spring.io/secure/ViewProfile.jspa?name=brienwheeler)** opened **[SPR-7639](https://jira.spring.io/browse/SPR-7639?redirect=false)** and commented  A placeholder in a bean alias field is not allowed to result in multiple aliases after placeholder resolution.  I have the following bean definition that works just as you would expect it to with the BeanNameUrlHandlerMapping class in Spring MVC:           	       This bean correctly gets registered with two aliases (""/**/*.png"" and ""/**/*.jpg"") resulting in the correct URL mappings being installed by BeanNameUrlHandlerMapping.  However, if I use a placeholder as such:           	       with a properties file of such:      com.xlateit.web.controllers.jawrImgController.name=/**/*.png /**/*.jpg  then it doesn't work (BeanNameUrlHandlerMapping maps the controller against a single pattern of ""/**/*.png /**/*.jpg"").  This happens because SimpleAliasRegistry.resolveAliases does not look at the resolved alias value to see if it might represent multiple aliases based on the same logic that is used in BeanDefinitionParserDelegate.parseBeanDefinitionElement by tokenizing on any of the characters in BEAN_NAME_DELIMITERS.   ---  **Affects:** 3.0.4","closed","type: enhancement,","spring-projects-issues","2010-10-10T17:00:35Z","2015-09-22T17:34:33Z"
"","12148","Problem with URL encoding in org.springframework.web.servlet.view.RedirectView.RedirectView(String url)  [SPR-7490]","**[Brian Trezise](https://jira.spring.io/secure/ViewProfile.jspa?name=phoenixhawke)** opened **[SPR-7490](https://jira.spring.io/browse/SPR-7490?redirect=false)** and commented  The short description of the problem is that '%' characters do not get properly encoded in the RedirectView(String url) construction, they are simply left as '%' in the url.  The code that was used to generate the url is as follows: redirectUrl = ""troubleshootBuild.do""; redirectUrl += ""?quoteLineId="" + quoteLineId; redirectUrl += ""&familyId="" + familyId; redirectUrl += ""&sleuthInput="" + sleuthInput; redirectUrl += ""&termOption="" + termOption;  This can cause the following exception in Tomcat's catalina log:  Aug 24, 2010 10:18:13 AM org.apache.tomcat.util.http.Parameters processParameters WARNING: Parameters: Character decoding failed. Parameter skipped. java.io.CharConversionException: isHexDigit at org.apache.tomcat.util.buf.UDecoder.convert(UDecoder.java:88) at org.apache.tomcat.util.buf.UDecoder.convert(UDecoder.java:49) at org.apache.tomcat.util.http.Parameters.urlDecode(Parameters.java:412) at org.apache.tomcat.util.http.Parameters.processParameters(Parameters.java:394) at org.apache.tomcat.util.http.Parameters.processParameters(Parameters.java:510) at org.apache.tomcat.util.http.Parameters.handleQueryParameters(Parameters.java:267) at org.apache.catalina.connector.Request.parseParameters(Request.java:2441) at org.apache.catalina.connector.Request.getParameter(Request.java:1040) at org.apache.catalina.connector.RequestFacade.getParameter(RequestFacade.java:355) at net.intellidata.iq.controller.TroubleshootBuildController.handleRequest(TroubleshootBuildController.java:67) at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:48) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:875) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:807) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:571) at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:501) at javax.servlet.http.HttpServlet.service(HttpServlet.java:617) at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at com.opensymphony.sitemesh.webapp.SiteMeshFilter.obtainContent(SiteMeshFilter.java:129) at com.opensymphony.sitemesh.webapp.SiteMeshFilter.doFilter(SiteMeshFilter.java:77) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.springframework.orm.hibernate3.support.OpenSessionInViewFilter.doFilterInternal(OpenSessionInViewFilter.java:198) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.springframework.security.util.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:378) at org.springframework.security.intercept.web.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:109) at org.springframework.security.intercept.web.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:83) at org.springframework.security.util.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:390) at org.springframework.security.ui.ExceptionTranslationFilter.doFilterHttp(ExceptionTranslationFilter.java:101) at org.springframework.security.ui.SpringSecurityFilter.doFilter(SpringSecurityFilter.java:53) at org.springframework.security.util.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:390) at org.springframework.security.ui.AbstractProcessingFilter.doFilterHttp(AbstractProcessingFilter.java:278) at org.springframework.security.ui.SpringSecurityFilter.doFilter(SpringSecurityFilter.java:53) at org.springframework.security.util.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:390) at org.springframework.security.context.HttpSessionContextIntegrationFilter.doFilterHttp(HttpSessionContextIntegrationFilter.java:235) at org.springframework.security.ui.SpringSecurityFilter.doFilter(SpringSecurityFilter.java:53) at org.springframework.security.util.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:390) at org.springframework.security.util.FilterChainProxy.doFilter(FilterChainProxy.java:175) at org.springframework.security.util.FilterToBeanProxy.doFilter(FilterToBeanProxy.java:99) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:286) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:845) at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583) at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:447) at java.lang.Thread.run(Unknown Source)  We have implemented a temporary workaround using java.lang.String's ""replaceAll(""%"", ""%25"")"" method on the sleuthInput variable but obviously this is not the ideal solution as it is likely to break when this bug is fixed.  ---  **Affects:** 3.0.4  **Issue Links:** - #12190 Possible regression in ""redirect"" views between Spring 3.0.2 and Spring 3.0.4 - #12085 URL in a redirect is not escaped by RedirectView  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d0f13b5bebe548232bd4d2658db81bc2e7203c5f","closed","type: bug,","spring-projects-issues","2010-08-24T15:23:27Z","2019-01-11T14:09:03Z"
"","12509","SpEL can't handle operator on systemProperty [SPR-7852]","**[Brian Topping](https://jira.spring.io/secure/ViewProfile.jspa?name=topping)** opened **[SPR-7852](https://jira.spring.io/browse/SPR-7852?redirect=false)** and commented  I am attempting to choose a bean depending on the definition of a system property:  ```  ```  Ideally, when `-Dwicket.configuration=development` is an argument on the command line, the `localLDAP` bean would be injected, otherwise the `remoteLDAP` bean would be injected.  It seems there is a problem with the `==` operator in combination with the `systemProperties` reference; when the SpEL is defined as #{systemProperties['wicket.configuration']}, the bean parser properly complains that there is no bean named `development`.   ---  **Affects:** 3.0.5","closed","in: core,","spring-projects-issues","2010-12-29T23:23:45Z","2019-01-11T15:14:36Z"
"","12368","Invalid MIME-type causes a 500 error [SPR-7712]","**[Brett](https://jira.spring.io/secure/ViewProfile.jspa?name=bgraves)** opened **[SPR-7712](https://jira.spring.io/browse/SPR-7712?redirect=false)** and commented  I have a REST service setup with the ContentNegotiatingViewResolver to transform responses into either xml or json based on the Accept header. I set the useNotAcceptableStatusCode property to true and it appears to work as expected. However, if the Accept header is a completely invalid media type like 'foo' then an exception is thrown and the consumer ends up getting back a 500 Internal Server Error instead of the expected 406.  The top of the resulting stack trace is included below:  SEVERE: Servlet.service() for servlet Spring MVC Dispatcher Servlet threw exception java.lang.IllegalArgumentException: ""foo"" does not contain '/' at org.springframework.http.MediaType.parseMediaType(MediaType.java:562) at org.springframework.http.MediaType.parseMediaTypes(MediaType.java:602) at org.springframework.web.servlet.view.ContentNegotiatingViewResolver.getMediaTypes(ContentNegotiatingViewResolver.java:306) at org.springframework.web.servlet.view.ContentNegotiatingViewResolver.resolveViewName(ContentNegotiatingViewResolver.java:366) at org.springframework.web.servlet.DispatcherServlet.resolveViewName(DispatcherServlet.java:1078) at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1027) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:817) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:719) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:644) at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:549) at javax.servlet.http.HttpServlet.service(HttpServlet.java:617) at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at com.cerner.net.oauth.j2ee.filter.OAuthValidatorFilter$1.run(OAuthValidatorFilter.java:215) at java.security.AccessController.doPrivileged(Native Method) at javax.security.auth.Subject.doAs(Subject.java:396) at com.cerner.net.oauth.j2ee.filter.OAuthValidatorFilter.doFilter(OAuthValidatorFilter.java:213) at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:237) at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:167) ...  Considering that an invalid media type is a problem with the client making the request to the service, I think it should return a proper 406 response if the useNotAcceptableStatusCode flag is set.   ---  **Affects:** 3.0.4, 3.0.5  **Reference URL:** http://forum.springsource.org/showthread.php?p=317618#post317618  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cb0c0c503fae19d32e96ab9eab0c565fa37bcb62, https://github.com/spring-projects/spring-framework/commit/0a48936f4f493b81c27177c44ae98cee545db67a  **Backported to:** [3.0.6](https://github.com/spring-projects/spring-framework/milestone/73?closed=1)  4 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2010-11-02T10:14:42Z","2014-02-07T15:21:23Z"
"","12851","BeanUtils.copyProperties() not copying some properties [SPR-8202]","**[Bozhidar Bozhanov](https://jira.spring.io/secure/ViewProfile.jspa?name=bozho)** opened **[SPR-8202](https://jira.spring.io/browse/SPR-8202?redirect=false)** and commented  BeanUtils.copyProperties(..) is not copying some fields. In fact, the field that certainly failed is called: oAuthAccessTokenURL  The thing is - it works on my windowsxp, and it suddenly (after my last upgrade of a bunch of libraries, including the sprign snapshots) stopped working on the linux box. I'm aware that BeanUtils hasn't been changed for 2 months, and that it is not unlikely to be an issue with javax.beans package on the Sun JVM for linux.  But since I can't test it better (the linux box is a server, and I don't have a desktop linux machine), could you investigate why this happens, and if it is reproducible. I got around it using apache commons-beanutils BeanUtils.copyProperties().   ---  **Affects:** 3.1 M1","closed","in: core,","spring-projects-issues","2011-04-04T15:14:07Z","2019-01-12T16:25:49Z"
"","12737","Multiple @CacheEvict meta-annotated annotations not recognized [SPR-8082]","**[Bozhidar Bozhanov](https://jira.spring.io/secure/ViewProfile.jspa?name=bozho)** opened **[SPR-8082](https://jira.spring.io/browse/SPR-8082?redirect=false)** and commented      @Retention(RetentionPolicy.RUNTIME)     @Target(ElementType.METHOD)     @CacheEvict(value = ""someCache"", key=""#arg.foo"")     public @interface EvictFoo { }          @Retention(RetentionPolicy.RUNTIME)     @Target(ElementType.METHOD)     @CacheEvict(value = ""someCache"", key=""#arg.bar"")     public @interface EvictBar { }  And then      @EvictFoo     @EvictBar     public void clearFooAndBar() {..}  evicts only foo, but not bar.   ---  **Affects:** 3.1 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/735ba9dcded62929a5a0f44678441ca792ec2428, https://github.com/spring-projects/spring-framework/commit/eddb0ac3bed5f1398bc5b44d35e1bcbe37566359, https://github.com/spring-projects/spring-framework/commit/0a611aa77649ad6859a0b8dbb66048ae72670998, https://github.com/spring-projects/spring-framework/commit/dc88a7c8ba8dfeacfb8a37fa4e510b73c7cae4a0  3 votes, 3 watchers","closed","in: core,","spring-projects-issues","2011-03-23T16:21:28Z","2012-06-19T03:39:10Z"
"","12736","CacheManager abstraction not working well with caches defined as beans [SPR-8081]","**[Bozhidar Bozhanov](https://jira.spring.io/secure/ViewProfile.jspa?name=bozho)** opened **[SPR-8081](https://jira.spring.io/browse/SPR-8081?redirect=false)** and commented  I have ehcache caches defined as spring beans:      ...  To make that work, I have the two CacheManagers - the ehcache one, and the new spring one that is part of the cache abstraction:             However, there's a tricky moment - if spring instantiates the EhCacheCacheManager _before_ the caches, then startup fails, because the cacheManager's loadCache() method, that is invoked in afterPropertiesSet(), tries to obtain the caches from the ehcache CacheManager, but they might not be registered with it yet (they get registered whenever they are instantiated as spring beans).  A workarounds I got to use is to set the EhCacheCacheManager depends-on attribute to include all caches - but that's not particularly good - it is likely that someone will forget to add a new cache to the depends-on list, and then he will have hard time finding why his cache is not used.  Btw, the bahaviour is non-deterministic - it works on my local machine, and doesn't work on the server. Perhaps different loading orders.  One solution that comes to my mind is to make the list of caches within the EhCacheCacheManager lazy - i.e. not load it on afterPropertiesSet() (synchornized, double-check locking).   ---  **Affects:** 3.1 M1","closed","in: core,","spring-projects-issues","2011-03-23T15:34:11Z","2019-01-12T16:25:54Z"
"","12595","Update documentation regarding scoped-proxy and singleton beans [SPR-7940]","**[Bob Jacoby](https://jira.spring.io/secure/ViewProfile.jspa?name=jacorob)** opened **[SPR-7940](https://jira.spring.io/browse/SPR-7940?redirect=false)** and commented  One of my beans (using the `@Component` annotation) implements the ApplicationListener interface. The bean is also proxied (uses the `@Transaction` annotation on a few methods). After initializing the context my AbstractApplicationEventMulticaster defaultRetriever contains the bean instance in the applicationListener set, and the name of the bean in the applicationListenerBeans set.  This causes a problem when the listeners are retrieved (AbstractApplicationEventMulticaster getApplicationListeners): for (ApplicationListener listener : this.defaultRetriever.applicationListeners) { if (supportsEvent(listener, eventType, sourceType)) { retriever.applicationListeners.add(listener); allListeners.add(listener); } } if (!this.defaultRetriever.applicationListenerBeans.isEmpty()) { BeanFactory beanFactory = getBeanFactory(); for (String listenerBeanName : this.defaultRetriever.applicationListenerBeans) { ApplicationListener listener = beanFactory.getBean(listenerBeanName, ApplicationListener.class); if (!allListeners.contains(listener) && supportsEvent(listener, eventType, sourceType)) { retriever.applicationListenerBeans.add(listenerBeanName); allListeners.add(listener); } } }  First all the listener bean instances are added to the list. Then the beans are retrieved from the beanfactory via the name. However, the bean factory will return the proxy rather than the bean itself. End result will be that both the bean and the proxy surrounding the bean are added to the allListeners list, which results in the onApplicationEvent being called twice for every event.  Ideally the proxy would be the only one added to the list.  ---  **Affects:** 3.0.5  **Attachments:** - [SPR-7940.zip](https://jira.spring.io/secure/attachment/19458/SPR-7940.zip) (_5.96 kB_)  **Issue Links:** - #14597 Documentation inconsistency vs implementation - scoped-proxy beans (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7b703b7e9b6d31d2d09cb977e59c83f65bd70b6f, https://github.com/spring-projects/spring-framework/commit/924c869b8adeaf8fe3da047d0bbf0137ffa9ddce  2 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2011-02-04T15:18:00Z","2019-01-13T07:11:18Z"
"","12280","EJB3's @TransactionManagement should be able to use as meta-annotation, just as  @Transactional is. [SPR-7624]","**[Bjorn Beskow](https://jira.spring.io/secure/ViewProfile.jspa?name=beskow)** opened **[SPR-7624](https://jira.spring.io/browse/SPR-7624?redirect=false)** and commented  The EJB3 `@TransactionManagement` annotation can be used as an alternative to Spring's `@Transactional` in most situations. But it cannot be used as a meta-annotation (as described in e.g. undere the heading ""Custom shortcut annotations"" in section 10.5 Declarative transaction management in the reference manual).  The reason for our desire to do so, is that we like to use our own custom annotation to mark spring beans (picked up by   using a custom include filter), and have a default TransactionAnnotation setting on the custom annotation. Using `@Transactional`, this works. Using `@TransactionManagement`, it doesn't.  The code that would need to change to allow `@TransactionManagement` to be used as meta-annotation is within org.springframework.transaction.annotation.Ejb3TransactionAnnotationParser. Here is a diff of the change required:  *** org/springframework/transaction/annotation/Ejb3TransactionAnnotationParser.Wed Dec 16 10:42:00 2009 --- org/springframework/transaction/annotation/Ejb3TransactionAnnotationParser.Thu Oct  7 15:46:36 2010  ***************  *** 35,40 **** --- 35,48 ----      public TransactionAttribute parseTransactionAnnotation(AnnotatedElement ae) {             javax.ejb.TransactionAttribute ann = ae.getAnnotation(javax.ejb.TransactionAttribute.class);  +         if (ann == null) {  +         for (Annotation metaAnn : ae.getAnnotations()) {  +         ann = metaAnn.annotationType().getAnnotation(javax.ejb.TransactionAttribute.class);  +         if (ann != null) {  +         break;  +         }  +         }  +         }       if (ann != null) {               return parseTransactionAnnotation(ann);       }    ---  **Affects:** 3.0.3  **Attachments:** - [allow-use-as-metaannotation.patch](https://jira.spring.io/secure/attachment/17175/allow-use-as-metaannotation.patch) (_751 bytes_)","closed","type: enhancement,","spring-projects-issues","2010-10-07T07:34:45Z","2018-12-26T16:57:25Z"
"","12289","Spring EL method resolver fails on vararg calls [SPR-7633]","**[Bertalan Fodor](https://jira.spring.io/secure/ViewProfile.jspa?name=fodber)** opened **[SPR-7633](https://jira.spring.io/browse/SPR-7633?redirect=false)** and commented  If you have a class like  ```java Factory {   getBean(String name) {}   getBean(String name, Object... args) {} } ```  Then have this in expression language:  ```xml #{factory.getBean(""MyBeanName"")} ```  then it is undeterministic which method will be called, as the ReflectiveMethodResolver class will just iterate on the methods and call the first matching.  While in Java it is well defined, which method will be called.   ---  **Affects:** 3.0.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7553b76f15c5b5e80d15e0ae09aba72a56c3572b","closed","type: bug,","spring-projects-issues","2010-10-08T07:54:04Z","2012-06-19T03:39:34Z"
"","12268","Proposed solution to streaming blob data quandry with JdbcTemplate [SPR-7612]","**[Benson Margulies](https://jira.spring.io/secure/ViewProfile.jspa?name=bimargulies)** opened **[SPR-7612](https://jira.spring.io/browse/SPR-7612?redirect=false)** and commented  I've encountered a conflict between Spring/JDBC and JAX-WS web services related to blobs and streaming. The purpose of this JIRA is to sketch out a possible enhancement to Spring/JDBC that would help in this area.  The basic situation is this: in a JAX-WS service, the web service framework calls into the implementation object. When that object returns, all the output data from the web service operation must be sitting in the return value or in Holder objects.  The JAX-WS mechanism for streaming large content is MTOM, and the JAX-WS/JAX-B representation for this is a DataHandler containing a DataSource containing a reference to an input stream.  So, consider a straightforward attempt to use a JdbcTemplate in a DAO class to implement one of these.  JAX-WS calls the operation method. The operation method calls the DAO method. The DAO method calls, say, 'query' with a Row callback. The row callback receives the result set.  The row callback can capture a reference to the InputStream corresponding to a blob, but it won't do it any good. The template will close out the result set, statement, and connection, before returning to the DAO method, leaving the stream to throw an error as soon as it is spoken to by the web service framework code after the web service operation method returns.  One might argue that this is a symptom of bad design in JDBC, but that doesn't help anything.  The alternative is to code plain old JDBC calls to run the query, and return a filtering stream that holds references to the result set, statement, and connection, and closes them out when the stream is closed. This means copying a fair amount of intelligence out of the JdbcTemplate. For extra complexity, consider a case where the query returns two (or more) blobs. That's two streams, but you don't want to close out the various JDBC pieces until the last one closes. More hair.  My proposal is some sort of 'continuation' discipline associated with JdbcTemplate for this purpose. Make it a feature of Spring/JDBC to concoct streams that hold the necessary references, using a shared object as needed to deal with the multiple-stream case.  This story holds together fairly well for single-row queries. Extending it to streaming arbitrary numbers of rows work of blobs would be much harder, and perhaps for that case it makes more sense to tax the web service framework(s) with offering some sort of feature to assist. I'd be very happy if Spring just added something handy for the single-row case.   ---  **Affects:** 3.0.4","closed","type: enhancement,","spring-projects-issues","2010-10-03T08:44:06Z","2018-12-28T10:37:06Z"
"","12260","jdbc:datasource lacks 'name' attribute or related mechanism [SPR-7604]","**[Benson Margulies](https://jira.spring.io/secure/ViewProfile.jspa?name=bimargulies)** opened **[SPR-7604](https://jira.spring.io/browse/SPR-7604?redirect=false)** and commented  The EmbeddedDatabaseBuilder has a setName call. There is no corresponding attribute on jdbc:embedded-database. This is more than than esthetic: with 10.6.1.0 of derby, making two databases with the same name against a memory URL really only makes one, with rather unpleasant consequences reported elsewhere.  It has been suggested to use the beanId as the name instead of testDb; that would certainly patch the immediate problem even if a name= attribute would be nice.  ---  **Affects:** 3.0.4  **Attachments:** - [mylyn-context.zip](https://jira.spring.io/secure/attachment/17155/mylyn-context.zip) (_2.67 kB_)  **Issue Links:** - #13560 Using multiple declarations of jdbc:embedded-database creates only one H2 instance per JVM - #13491 Introduce support for generating unique names for embedded databases - #17432 Introduce database-name attribute in   **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1c6e131746306169687d0c6e257117e29b5a9c8a, https://github.com/spring-projects/spring-framework/commit/ba2bac17de41d30215d765c791da1f497f957494","closed","type: enhancement,","spring-projects-issues","2010-09-30T05:50:29Z","2019-01-11T14:27:20Z"
"","12258","Embedded database support in trouble shutting down Derby [SPR-7602]","**[Benson Margulies](https://jira.spring.io/secure/ViewProfile.jspa?name=bimargulies)** opened **[SPR-7602](https://jira.spring.io/browse/SPR-7602?redirect=false)** and commented  I'm using the embedded database mechanism with type=""DERBY"" and derby 10.6.1.0. It works, but on the way out the door, I get the following rather loud set of complaining.  ``` 1    [Thread-2] WARN  org.springframework.jdbc.datasource.embedded.DerbyEmbeddedDatabaseConfigurer  - Could not shutdown in-memory Derby database java.sql.SQLException: Database 'memory:testdb' not found. 	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(Unknown Source) 	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) 	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) 	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source) 	at org.apache.derby.impl.jdbc.EmbedConnection.newSQLException(Unknown Source) 	at org.apache.derby.impl.jdbc.EmbedConnection.handleDBNotFound(Unknown Source) 	at org.apache.derby.impl.jdbc.EmbedConnection.(Unknown Source) 	at org.apache.derby.impl.jdbc.EmbedConnection30.(Unknown Source) 	at org.apache.derby.impl.jdbc.EmbedConnection40.(Unknown Source) 	at org.apache.derby.jdbc.Driver40.getNewEmbedConnection(Unknown Source) 	at org.apache.derby.jdbc.InternalDriver.connect(Unknown Source) 	at org.apache.derby.jdbc.EmbeddedDriver.connect(Unknown Source) 	at org.springframework.jdbc.datasource.embedded.DerbyEmbeddedDatabaseConfigurer.shutdown(DerbyEmbeddedDatabaseConfigurer.java:75) 	at org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactory.shutdownDatabase(EmbeddedDatabaseFactory.java:177) 	at org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactoryBean.destroy(EmbeddedDatabaseFactoryBean.java:57) 	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:184) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:487) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:463) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:431) 	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1048) 	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1022) 	at org.springframework.context.support.AbstractApplicationContext$3.run(AbstractApplicationContext.java:940) Caused by: java.sql.SQLException: Database 'memory:testdb' not found. 	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) 	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(Unknown Source) 	... 22 more ```  ---  **Affects:** 3.0.4  **Attachments:** - [mylyn-context.zip](https://jira.spring.io/secure/attachment/17154/mylyn-context.zip) (_2.44 kB_)  **Issue Links:** - #15102 Derby v10.9: Embedded database namespace support causes test failures  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b467f2c858aa8039520ef91c1c6488bbe4e70f79","closed","type: bug,","spring-projects-issues","2010-09-29T06:35:35Z","2019-01-11T14:27:17Z"
"","12257","NullPointerException if there's no script for jdbc:embedded-database [SPR-7601]","**[Benson Margulies](https://jira.spring.io/secure/ViewProfile.jspa?name=bimargulies)** opened **[SPR-7601](https://jira.spring.io/browse/SPR-7601?redirect=false)** and commented  I wanted an empty embedded database. So I just coded ...  ```  ```  I did not create a default script file in classpath.  I was rewarded with a null pointer exception. (a) I would prefer if I could have an empty database, but I think that at least there should be a specific Spring exception 'could not find the default script file'.   ---  **Affects:** 3.0.4","closed","status: invalid,","spring-projects-issues","2010-09-29T06:12:49Z","2019-01-12T05:31:30Z"
"","12659","Tiles ELAttributeElevator is not properly instanciated. [SPR-8004]","**[Benoit Heurter](https://jira.spring.io/secure/ViewProfile.jspa?name=bheurter)** opened **[SPR-8004](https://jira.spring.io/browse/SPR-8004?redirect=false)** and commented  Note : This issue is NOT related to #11910 !  in TilesConfigurator class, the ELAttributeElevator class is directly instanciated instead of using the property ATTRIBUTE_EVALUATOR_INIT_PARAM  ``` public void registerEvaluator(BasicTilesContainer container) {   logger.debug(""Registering Tiles 2.2 AttributeEvaluatorFactory for JSP 2.1"");   try { 	... 	ELAttributeEvaluator evaluator = new ELAttributeEvaluator(); 	...	   }catch(...) } ```  Hence, the property is defined in tilesPropertyMap :  ``` public void afterPropertiesSet() throws TilesException { 	boolean activateEl = false; 	if (tilesElPresent) { 		activateEl = new JspExpressionChecker().isExpressionFactoryAvailable(); 		if (!this.tilesPropertyMap.containsKey(TilesContainerFactory.ATTRIBUTE_EVALUATOR_INIT_PARAM)) { 			this.tilesPropertyMap.put(TilesContainerFactory.ATTRIBUTE_EVALUATOR_INIT_PARAM, activateEl ? 					""org.apache.tiles.evaluator.el.ELAttributeEvaluator"" : DirectAttributeEvaluator.class.getName()); 		} 	} 	.... } ```  Result is that we can't subclass ELAttributeEvaluator to add a FunctionMapper.  ( my goal is to be able to use expression=""${fn:length(myArray)}"" in tiles definition)  ---  **Affects:** 3.0.5","closed","status: declined,","spring-projects-issues","2011-02-28T07:51:31Z","2019-01-12T16:26:05Z"
"","12741","Spring ORM 3_0_5 does not set the JPA timeout in milliseconds [SPR-8086]","**[Benedict Dsilva](https://jira.spring.io/secure/ViewProfile.jspa?name=benedictdsilva)** opened **[SPR-8086](https://jira.spring.io/browse/SPR-8086?redirect=false)** and commented  JPA 2 introduced a new hint - **""javax.persistence.query.timeout"" // time in milliseconds**  Within Spring ORM, **EntityManagerFactoryUtils.java.applyTransactionTimeout()** - this sets it in **seconds**  ``` EntityManagerHolder emHolder = (EntityManagerHolder) TransactionSynchronizationManager.getResource(emf); if (emHolder != null && emHolder.hasTimeout()) {    int timeoutValue = emHolder.getTimeToLiveInSeconds();    query.setHint(""javax.persistence.lock.timeout"", timeoutValue);    query.setHint(""javax.persistence.query.timeout"", timeoutValue); } ```  This causes issues. We use hibernate-3.5.4-Final in our code base and our standard transaction timeout is 540 seconds. The implementor hibernate **""expects the time passed in as milliseconds""** as per JPA 2 specification ""3.8.9 Query Hints"", needs the parameter to be set in milliseconds.  The fix is to replace the line:     int timeoutValue = emHolder.getTimeToLiveInSeconds(); with  ``` int timeoutValue = (int)emHolder.getTimeToLiveInMillis(); ```    ---  3 votes, 3 watchers","closed","type: bug,","spring-projects-issues","2011-03-25T07:52:11Z","2012-06-19T03:39:52Z"
"","12860","Configure script execution behaviour of embedded database [SPR-8210]","**[Ben Sion](https://jira.spring.io/secure/ViewProfile.jspa?name=bjsion)** opened **[SPR-8210](https://jira.spring.io/browse/SPR-8210?redirect=false)** and commented  It would be very helpful if the EmbeddedDatabaseBuilder could be configured to continue on error or ignore drop statements when executing schema and data scripts. This would simplify the use of the EmbeddedDatabase for use in unit tests (and probably other scenarios).  I have attached a patch for this issue. Basically a new constructor is added to the EmbeddedDatabaseBuilder taking in 2 booleans that configure the underlying DatabasePopulator's ignoreFailedDrops and continueOnError values.  I realise that I could create my own DatabasePopulator and execute the scripts outside of the EmbeddedDatabaseBuilder's initialisation but this seems like a lot of extra lines of code. Please let me know if I can provide more information.  ---  **Affects:** 3.0.5, 3.1 M1  **Attachments:** - [patch-embeddedDB.txt](https://jira.spring.io/secure/attachment/17992/patch-embeddedDB.txt) (_2.95 kB_)  **Issue Links:** - #16037 Improve configurability of EmbeddedDatabaseBuilder (_**""is superseded by""**_)","closed","type: enhancement,","spring-projects-issues","2011-04-05T06:54:13Z","2019-01-11T13:07:42Z"
"","12045","Mixing PersistenceExceptionTranslator logic into FactoryBeans prevents using PersistenceExeptionTranslationPostProcessor with @Configuration classes [SPR-7387]","**[Baruch Sadogursky](https://jira.spring.io/secure/ViewProfile.jspa?name=jbaruch)** opened **[SPR-7387](https://jira.spring.io/browse/SPR-7387?redirect=false)** and commented  This is clear Single responsibility principle violation. The implementation logic of PersistenceExceptionTranslator resides into various FactoryBeans (LocalSessionFactoryBean, LocalEntityManagerFactoryBean, etc) and there is no way to introduce translators to ApplicationContext for PersistenceExeptionTranslationPostProcessor to find them without adding the FactoryBeans to ApplicationContext. It works fine for xml metadata, since we add the FactoryBeans to the context anyway. This is not the case when working with Java `@Configuration` classes. In them we don't expose FactoryBeans to ApplicationContext, but use them internally in `@Bean` methods, returning only the result of the getObject() call. This way there are no PersistenceExceptionTranslators in the ApplicationContext and PersistenceExeptionTranslationPostProcessor  fails.  ---  **Affects:** 3.0.3  **Attachments:** - [HibernateExceptionTranslator.java](https://jira.spring.io/secure/attachment/16917/HibernateExceptionTranslator.java) (_3.69 kB_)  **Issue Links:** - #12076 Provide alternatives to using FactoryBean types within `@Bean` methods (_**""is superseded by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3bb01ee68b7f421f0d3ee5735a6c383a84483968","closed","type: enhancement,","spring-projects-issues","2010-07-20T19:40:01Z","2019-01-13T07:13:42Z"
"","11891","@Transactional can't resolve by @Qualifier PlatformTransactionManager created in @Configuration classes [SPR-7232]","**[Baruch Sadogursky](https://jira.spring.io/secure/ViewProfile.jspa?name=jbaruch)** opened **[SPR-7232](https://jira.spring.io/browse/SPR-7232?redirect=false)** and commented  Simple test: 1. Define two `@Bean` methods returning PlatfromTransactionManagers with different `@Qualifiers` 2. Annotate test class with `@Transactional`, providing one of the qualifiers as value param  Result: java.lang.IllegalStateException: No matching PlatformTransactionManager bean found for qualifier 'a' - neither qualifier match nor bean name match!  Test attached.   ---  **Affects:** 3.0.2  **Attachments:** - [spring-javaconfig-transactional-qualifier.zip](https://jira.spring.io/secure/attachment/16590/spring-javaconfig-transactional-qualifier.zip) (_3.28 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6c6004a93b7bad4644b5b04ec97a25e5ce24f0f4","closed","in: core,","spring-projects-issues","2010-05-24T07:19:28Z","2012-06-19T03:44:03Z"
"","12465","@DateTimeFormat causes exception when used with Direct Field Access bean binding [SPR-7809]","**[Barry Wilks](https://jira.spring.io/secure/ViewProfile.jspa?name=forge7)** opened **[SPR-7809](https://jira.spring.io/browse/SPR-7809?redirect=false)** and commented  Using `@DateTimeFormat` annotation with direct field access causes unhandled exception.  Keith Donald suggested trying without direct field access (i.e. using bean properties), and this fixes the problem.  The code to re-produce the issue is shown below. This can also be seen in the forum.  Attached file has complete eclipse web project example, without libraries.  Using new mvc schema:  ```xml                                                                                                  ```  With simple command class  ``` public class Amount {   @NumberFormat(style=Style.CURRENCY)  @Min(0)  private BigDecimal amount = BigDecimal.valueOf(10000, 2);   @DateTimeFormat(iso=ISO.DATE)  private Date date = new Date();   public Date getDate() {   return date;  }   public BigDecimal getAmount() {   return amount;  }  } ```  and simple controller  ``` @Controller @RequestMapping(value=""/addVat.html"") public class AddVatController {   @InitBinder  public void initBinder(WebDataBinder binder) {   binder.initDirectFieldAccess();     }   @RequestMapping(method = RequestMethod.GET)  public String setupForm(Model model) {   model.addAttribute(""commandBean"", new Amount());   return ""addVatForm"";  }   @RequestMapping(method = RequestMethod.POST)  public String onSubmit(@ModelAttribute(""commandBean"") @Valid Amount commandBean, BindingResult amountBinding, Model model) {    if (amountBinding.hasErrors()) {    return ""addVatForm"";   }    BigDecimal result = commandBean.getAmount().multiply(new BigDecimal(""1.175""));   model.addAttribute(""result"", result);    return ""result"";  } } ```    ---  **Affects:** 3.0 GA  **Reference URL:** http://forum.springsource.org/showthread.php?p=333754#post333754  **Attachments:** - [test.zip](https://jira.spring.io/secure/attachment/17449/test.zip) (_10.58 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d3d763457410275573a95d75401d4796542920d4","closed","type: bug,","spring-projects-issues","2010-12-10T02:00:17Z","2012-06-19T03:39:06Z"
"","12463","CronTrigger causes StackOverflowError [SPR-7807]","**[Barry Lagerweij](https://jira.spring.io/secure/ViewProfile.jspa?name=blagerweij)** opened **[SPR-7807](https://jira.spring.io/browse/SPR-7807?redirect=false)** and commented  Cron based triggers sometimes cause a StackOverflowError:  INFO   | jvm 1    | 2010/12/08 22:44:29 | java.lang.StackOverflowError INFO   | jvm 1    | 2010/12/08 22:44:29 | 	at sun.util.calendar.ZoneInfo.getOffsets(Unknown Source) INFO   | jvm 1    | 2010/12/08 22:44:29 | 	at sun.util.calendar.ZoneInfo.getOffsets(Unknown Source) INFO   | jvm 1    | 2010/12/08 22:44:29 | 	at java.util.GregorianCalendar.computeFields(Unknown Source) INFO   | jvm 1    | 2010/12/08 22:44:29 | 	at java.util.GregorianCalendar.computeTime(Unknown Source) INFO   | jvm 1    | 2010/12/08 22:44:29 | 	at java.util.Calendar.updateTime(Unknown Source) INFO   | jvm 1    | 2010/12/08 22:44:29 | 	at java.util.Calendar.complete(Unknown Source) INFO   | jvm 1    | 2010/12/08 22:44:29 | 	at java.util.Calendar.get(Unknown Source) INFO   | jvm 1    | 2010/12/08 22:44:29 | 	at org.springframework.scheduling.support.CronSequenceGenerator.doNext(CronSequenceGenerator.java:126) INFO   | jvm 1    | 2010/12/08 22:44:29 | 	at org.springframework.scheduling.support.CronSequenceGenerator.doNext(CronSequenceGenerator.java:148) INFO   | jvm 1    | 2010/12/08 22:44:29 | 	at org.springframework.scheduling.support.CronSequenceGenerator.doNext(CronSequenceGenerator.java:139) INFO   | jvm 1    | 2010/12/08 22:44:29 | 	at org.springframework.scheduling.support.CronSequenceGenerator.doNext(CronSequenceGenerator.java:164) INFO   | jvm 1    | 2010/12/08 22:44:29 | 	at org.springframework.scheduling.support.CronSequenceGenerator.doNext(CronSequenceGenerator.java:139) INFO   | jvm 1    | 2010/12/08 22:44:29 | 	at org.springframework.scheduling.support.CronSequenceGenerator.doNext(CronSequenceGenerator.java:148) INFO   | jvm 1    | 2010/12/08 22:44:29 | 	at org.springframework.scheduling.support.CronSequenceGenerator.doNext(CronSequenceGenerator.java:139) INFO   | jvm 1    | 2010/12/08 22:44:29 | 	at org.springframework.scheduling.support.CronSequenceGenerator.doNext(CronSequenceGenerator.java:164) INFO   | jvm 1    | 2010/12/08 22:44:29 | 	at org.springframework.scheduling.support.CronSequenceGenerator.doNext(CronSequenceGenerator.java:139) ....... (deleted a lot of lines from the trace)  ---  **Affects:** 3.0 GA  **Issue Links:** - #12042 Cron expressions use months based at 0-11 (should be 1-12)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cee6cb859d1bb9446a1c496b04e2725c25a7e98c, https://github.com/spring-projects/spring-framework/commit/28e6d9a69252aafeb22834aeec6b5a35c7c87fe7","closed","in: core,","spring-projects-issues","2010-12-09T01:58:51Z","2019-01-11T15:13:18Z"
"","12827","DefaultResourceLoader does not uses classloader to create URL instances for resources, thus custom classloader will be ignored [SPR-8176]","**[Balázs Bessenyei](https://jira.spring.io/secure/ViewProfile.jspa?name=h143570)** opened **[SPR-8176](https://jira.spring.io/browse/SPR-8176?redirect=false)** and commented  Description: In our case One-Jar custom classloader was used to access resources. Which are located inside nested JAR files (JAR file containing several other JAR files). The structure is similar to a WAR file (by default the nested JARs are located in the ""/lib"" directory). A custom classloader ensures, that the contents of these JAR files are accessible to the application as if they were one big JAR file. In order to achieve this, it is required to use a custom JAR handler for the URL class. Since the default Java version does not support dealing with paths in nested JARs.  The problem located in the ""org.springframework.core.io.DefaultResourceLoader.getResource(String)"". It simply wraps the resource location in a newly created URL instance, which was not requested through the classloader. In our case it would have been One-Jar`s custom one.  The problem was found, when the PathMatchingResourcePatternResolver ""getResources(String)"" method, in some cases, failed to load resources (namely context XMLs) from these nested JARs. Also the stack trace indicated the correct path.  If the execution is in the ""a single resource with the given name"" case. Lines 282-285 (version 3.0.5). In this case the resource resolution occurs through the DefaultResourceLoader faulty solution.  The other 3 execution paths will use the ""findAllClassPathResources(String)"" located in line 298 to create the the Resource instances. This method correctly uses the classloader`s own getResources() method to get the resources as URLs. In this case One-Jar (or any other) custom classloader, with the correct JAR handler.  In our case there is a ""preprocessor"" in place, which replaces context locations containg wildcards with a list of full resolved locations before starting to initialize the given Application Context. Also ensures that the locations are in a alphabetic order to ensure that the contexts are initialized consistently every time.  The path resolution occurs with the PathMatchingResourcePatternResolver, which uses the custom classloader. So the paths were correctly resolved to point to the appropriate nested JAR files. Only the loading failed with ""File Not Found Exception"", because the wrong JAR handler was used to load them.  Workaround: As a work around, in case of custom classloader use names with wildcards. In our case the forced alphabetical ordering had to be disabled.  Fix: In order to fix the DefaultResourceLoader.getResource(String) needs to be modified to use the classloader to create URL for resources.  Other components affected: Furthermore, the URLResource.getCleanedUrl(String, String) method suffers the same problem. It also directly instantiates URL instances ignoring the classloader.    ---  **Affects:** 3.0.5  1 votes, 4 watchers","closed","in: core,","spring-projects-issues","2011-04-02T10:16:34Z","2019-01-12T16:25:50Z"
"","12138","org.h2.jdbc.JdbcSQLException: NULL nicht zulässig für Feld ""xyz"" gets translated to org.springframework.jdbc.UncategorizedSQLException [SPR-7480]","**[Axel Fontaine](https://jira.spring.io/secure/ViewProfile.jspa?name=axelfont)** opened **[SPR-7480](https://jira.spring.io/browse/SPR-7480?redirect=false)** and commented  When trying to insert a NULL value into a NOT NULL column  H2 Returns org.h2.jdbc.JdbcSQLException: NULL nicht zulässig für Feld ""xyz"" Spring translates it to org.springframework.jdbc.UncategorizedSQLException  On Oracle and HsqlDB, Spring correctly translates this case to org.springframework.dao.DataIntegrityViolationException  ---  **Affects:** 3.0.4  **Issue Links:** - #12883 Update SQL error code mapping for H2 1.3.154","closed","type: enhancement,","spring-projects-issues","2010-08-21T05:42:28Z","2019-01-11T14:09:35Z"
"","12110","form:label is broken for checkboxes [SPR-7452]","**[Axel Fontaine](https://jira.spring.io/secure/ViewProfile.jspa?name=axelfont)** opened **[SPR-7452](https://jira.spring.io/browse/SPR-7452?redirect=false)** and commented  The following jsp code:  My Box Label  gets translated to  \\\My Box Label\  This is wrong!  The correct code should be  ...\...  Cheers, Axel  P.S.: #8226 got fixed automatically with the move to Java 5  and autoboxing  ---  **Affects:** 3.0.3  4 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2010-08-11T07:24:26Z","2019-01-11T14:06:00Z"
"","12003","Spring Portlet MVC - Unable to return JSON data from @ResourceMapping [SPR-7344]","**[Ashish Sarin](https://jira.spring.io/secure/ViewProfile.jspa?name=ashes.sarin)** opened **[SPR-7344](https://jira.spring.io/browse/SPR-7344?redirect=false)** and commented  In many scenarios it is required to support returning JSON data from the `@ResourceMapping` annotated method of controller. The `@ResponseBody` and ContentNegotiatingViewResolver currently work only in the servlet environment.  ---  **Affects:** 3.0.3  **Issue Links:** - #14838 Spring Portlet MVC - Unable to bind and validate JSON data using `@Valid` `@RequestBody` in a `@ResourceMapping` method - #15417 In spring MVC portlet, `@resourceMapping` doesn't work. - #16824 Alignment with Portlet 3.0 (JSR-362)  60 votes, 46 watchers","closed","has: votes-jira,","spring-projects-issues","2010-07-02T18:31:41Z","2019-01-13T07:13:56Z"
"","12740","Add [logger.isDebugEnabled] checks to [org.springframework.web.servlet.FrameworkServlet] [SPR-8085]","**[Artur Denysenko](https://jira.spring.io/secure/ViewProfile.jspa?name=adenysenko)** opened **[SPR-8085](https://jira.spring.io/browse/SPR-8085?redirect=false)** and commented  Some [logger.isDebugEnabled] checks are missing:  ``` ... if (failureCause != null) {   >>> this.logger.debug(""Could not complete request"", failureCause); } else {   >>> this.logger.debug(""Successfully completed request""); } ... ```  I would audit all code for similar problem.   ---  **Affects:** 3.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9b45d50b9ba3dc244e748481ceb3c62174a2a8a2","closed","type: bug,","spring-projects-issues","2011-03-24T22:27:13Z","2012-06-19T03:39:40Z"
"","12297","List in ""15.3.2.3 Supported handler method arguments and return types"" is incomplete [SPR-7641]","**[Artem Troitskiy](https://jira.spring.io/secure/ViewProfile.jspa?name=axtavt)** opened **[SPR-7641](https://jira.spring.io/browse/SPR-7641?redirect=false)** and commented  `AnnotationMethodHandlerAdapter` supports `java.security.Principal` as an argument of a handler method, but it's not documented in _15.3.2.3 Supported handler method arguments and return types_.   ---  **Affects:** 3.0.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9114f80b6811da15fbcd3bf1f69f219252440c21","closed","type: documentation,","spring-projects-issues","2010-10-11T04:30:20Z","2012-06-19T03:39:08Z"
"","12757","Original exception shadowed [SPR-8103]","**[Arseny Sizov](https://jira.spring.io/secure/ViewProfile.jspa?name=arseny)** opened **[SPR-8103](https://jira.spring.io/browse/SPR-8103?redirect=false)** and commented  Steps to reproduce: 1. Try to load properties file which does not exist with PropertyPlaceholderConfigurer  2. PropertyPlaceholderConfigurer throws exception with the cause  3. Exception is catched by AbstractApplicationContext.java:          	catch (BeansException ex) {         		// Destroy already created singletons to avoid dangling resources.         		destroyBeans();                 		// Reset 'active' flag.         		cancelRefresh(ex);                 		// Propagate exception to caller.         		throw ex;         	}  4. destroyBeans() tries to lookup beans which properties were not yet initialized by PropertyPlaceholderConfigurer (BTW why it looks up them?)  5. This generated exception on a long-typed property (unable to convert ""${propertyname}"" string to long)  6. This exception is throwed and thus         // Propagate exception to caller.        throw ex;  is not called and the original exception is shadowed.  Expected: 1. Not to look up beans not initialized with property placeholder 2. Not to shadow the original exception. Probably just log exception happened during destroy in catch.    ---  **Affects:** 3.0.3, 3.1 M1","closed","in: core,","spring-projects-issues","2011-03-30T07:20:28Z","2019-01-12T05:30:44Z"
"","12396","AbstractPoolingTargetSource : Severe limitation on PoolConfig Mixin when pool is exhausted [SPR-7740]","**[Arrault Fabien](https://jira.spring.io/secure/ViewProfile.jspa?name=farrault)** opened **[SPR-7740](https://jira.spring.io/browse/SPR-7740?redirect=false)** and commented  Spring Reference in 8.10 ""Pooling target sources"" documents the use of org.springframework.aop.target.AbstractPoolingTargetSource.getPoolingConfigMixin() to mix in PoolConfig interface into the proxy which use this pooling TargetSource in order to get use statistics of the object pool by casting the proxy to PoolConfig.  This technique suffers from a severe limitation :   When the pool is exhausted (maxActive reached), the mixin is no longer usable because any call on it is blocked while waiting for a target to become available (waiting being the default behaviour of the pool). This is caused by the fact that the mixin implementation is only called after a target is obtained from the target source  Workaround : Do not use the mixin but call directly AbstractPoolingTargetSource.  Test Case : the attached test case is a maven project which test goal failed because of the junit test showing this issue.  The JUnit test is testcase.PoolingConfigMixinTest. It creates 4 threads which called a proxy using a pooling targetSource. Then it calls getActiveCount() on this proxy (after casting it on PoolConfig interface) The testcase.BusinessObject (the target bean) implementation introduce a 1s sleep before returning in order to show the behavior. The spring context configured for this junit test sets up a CommonsPoolingTargetSource with a maxSize to 4 and an whenExhaustedAction set to GenericObjectPool#WHEN_EXHAUSTED_FAIL. The whenExhaustedAction config permits to force failing and show that the getActiveCount() effectively needs that the proxy can borrow a target source from the pool before the mixin implementation could be called.  This test failed with a ""java.util.NoSuchElementException: Pool exhausted"" exception on getActiveCount()   ---  **Affects:** 3.0.4  **Attachments:** - [mixintestcase.zip](https://jira.spring.io/secure/attachment/17354/mixintestcase.zip) (_6.55 kB_)","closed","in: core,","spring-projects-issues","2010-11-12T07:21:16Z","2019-01-12T16:26:33Z"
"","12564","Sending large payloads with RestTemplate results in an OutOfMemoryError [SPR-7909]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-7909](https://jira.spring.io/browse/SPR-7909?redirect=false)** and commented  When sending a large file with the RestTemplate (with a POST or PUT), the RestTemplate will throw an OutOfMemoryError:  ``` com.cat.tcm.jmx.ManagementException: An unexpected error occurred performing the operation.  at com.cat.tcm.jmx.JMXTaskTemplate.run(JMXTaskTemplate.java:144)  at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)  at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)  at java.lang.Thread.run(Thread.java:619)  Caused by: java.lang.OutOfMemoryError: Java heap space  at java.util.Arrays.copyOf(Arrays.java:2786)  at java.io.ByteArrayOutputStream.write(ByteArrayOutputStream.java:94)  at org.springframework.util.FileCopyUtils.copy(FileCopyUtils.java:113)  at org.springframework.http.converter.ResourceHttpMessageConverter.write(ResourceHttpMessageConverter.java:85)  at org.springframework.http.converter.ResourceHttpMessageConverter.write(ResourceHttpMessageConverter.java:1)  at org.springframework.http.converter.FormHttpMessageConverter.writePart(FormHttpMessageConverter.java:288)  at org.springframework.http.converter.FormHttpMessageConverter.writeParts(FormHttpMessageConverter.java:252)  at org.springframework.http.converter.FormHttpMessageConverter.writeMultipart(FormHttpMessageConverter.java:242)  at org.springframework.http.converter.FormHttpMessageConverter.write(FormHttpMessageConverter.java:194)  at org.springframework.http.converter.FormHttpMessageConverter.write(FormHttpMessageConverter.java:1)  at org.springframework.web.client.RestTemplate$HttpEntityRequestCallback.doWithRequest(RestTemplate.java:588)  at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:436)  at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:401)  at org.springframework.web.client.RestTemplate.postForObject(RestTemplate.java:279)  at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)  at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)  at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)  at java.lang.reflect.Method.invoke(Method.java:597)  at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:309)  at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:183)  at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:150)  at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:50)  at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)  at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:202)  at $Proxy17.postForObject(Unknown Source) ```    ---  **Issue Links:** - [INT-2006](https://jira.spring.io/browse/INT-2006) http:inbound-gateway/outbound-gateway content-length needs recalculation  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d0d6a07870ff39a3441249a66ce860eb972f6891, https://github.com/spring-projects/spring-framework/commit/1ed1c59888c8cf676e3767c41af9370616a3ed7b","closed","type: enhancement,","spring-projects-issues","2011-01-25T07:25:07Z","2020-07-29T09:27:27Z"
"","12526","Accept-Charset header with '*' results in java.nio.charset.IllegalCharsetNameException [SPR-7869]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-7869](https://jira.spring.io/browse/SPR-7869?redirect=false)** and commented  The following header:  Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7  results in this stack trace:  ``` 16:08:20,093 DEBUG [AnnotationMethodHandlerExceptionResolver.resolveException] Resolving exception from handler [documentSearchInboundGateway]: java.nio.charset.IllegalCharsetNameException: * 16:08:20,140 DEBUG [ResponseStatusExceptionResolver.resolveException] Resolving exception from handler [documentSearchInboundGateway]: java.nio.charset.IllegalCharsetNameException: * 16:08:20,140 DEBUG [DefaultHandlerExceptionResolver.resolveException] Resolving exception from handler [documentSearchInboundGateway]: java.nio.charset.IllegalCharsetNameException: * 16:08:20,140 DEBUG [DispatcherServlet.processRequest] Could not complete request java.nio.charset.IllegalCharsetNameException: * 	at java.nio.charset.Charset.checkName(Charset.java:284) 	at java.nio.charset.Charset.lookup2(Charset.java:458) 	at java.nio.charset.Charset.lookup(Charset.java:437) 	at java.nio.charset.Charset.forName(Charset.java:502) 	at org.springframework.http.HttpHeaders.getAcceptCharset(HttpHeaders.java:184) 	at org.springframework.integration.http.support.DefaultHttpHeaderMapper.getHttpHeader(DefaultHttpHeaderMapper.java:665) 	at org.springframework.integration.http.support.DefaultHttpHeaderMapper.toHeaders(DefaultHttpHeaderMapper.java:286) 	at org.springframework.integration.http.support.DefaultHttpHeaderMapper.toHeaders(DefaultHttpHeaderMapper.java:50) 	at org.springframework.integration.http.inbound.HttpRequestHandlingEndpointSupport.doHandleRequest(HttpRequestHandlingEndpointSupport.java:260) 	at org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway.handleRequest(HttpRequestHandlingMessagingGateway.java:91) 	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:49) 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:790) 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:719) 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:644) 	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:560) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:637) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233) 	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191) 	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127) 	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) 	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) 	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:298) 	at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:857) 	at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:588) 	at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:489) 	at java.lang.Thread.run(Thread.java:619) ```    ---  **Affects:** 3.0.5  **Reference URL:** http://forum.springsource.org/showthread.php?t=100810  **Issue Links:** - [INT-1805](https://jira.spring.io/browse/INT-1805) DefaultHttpHeaderMapper does not support wildcard (*) as an Accept-Charset header value (_**""supersedes""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4998d061f88ccd4267af096ce23d714ddbf24beb","closed","type: bug,","spring-projects-issues","2011-01-10T03:36:45Z","2012-06-19T03:39:39Z"
"","12459","Add constructor base address in RestTemplate [SPR-7803]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-7803](https://jira.spring.io/browse/SPR-7803?redirect=false)** and commented  Something like:  ``` RestTemplate template = new RestTemplate(""http://twitter.com""); template.GetForObject(""/statuses/user_timeline.xml?screen_name={id}"", ""poutsma""); ```  ---  **Issue Links:** - #17627 Ability to prefix each RestTemplate request using some kind of UriPrefixingClientHttpRequestFactory (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2010-12-09T00:08:55Z","2019-01-11T15:13:24Z"
"","12351","Add ETag version of WebRequest.checkNotModified() [SPR-7695]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-7695](https://jira.spring.io/browse/SPR-7695?redirect=false)** and commented  WebRequest currently has a checkNotModified(long) method, which is based on If-Modified-Since/Last-Modified. It would be great if we also have a checkNotModified(String) method, which would be based on If-None-Match/ETag.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7cc3f49910b6ed281f1aee0851e603dfa96ed48a","closed","type: enhancement,","spring-projects-issues","2010-10-29T03:16:09Z","2012-06-19T03:39:05Z"
"","12316","Allow for XSD validation in OXM [SPR-7660]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-7660](https://jira.spring.io/browse/SPR-7660?redirect=false)** and commented  For security and other purposes, it would be good to have the possibility of doing XSD validation in either the OXM or MVC module.   --- No further details from [SPR-7660](https://jira.spring.io/browse/SPR-7660?redirect=false)","closed","type: enhancement,","spring-projects-issues","2010-10-15T04:19:54Z","2015-09-22T18:20:32Z"
"","12247","HttpStatusCodeException should contain response body [SPR-7591]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-7591](https://jira.spring.io/browse/SPR-7591?redirect=false)** and commented  Rather than having just the response status code and message available in HttpStatusCodeException (and subclasses HttpClientErrorException and HttpServerErrorException), it's useful to have the full response body available as well. We should offer this response body.  ---  **Issue Links:** - #13911 HttpStatusCodeException cannot be serialized  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2ff43726be693f32b7bf2a6d237ab65f8ce84ba6, https://github.com/spring-projects/spring-framework/commit/70cb81b4b5d9633d6eeb8967b7289fb9394734cd","closed","type: enhancement,","spring-projects-issues","2010-09-24T02:59:20Z","2019-01-11T15:12:22Z"
"","12152","Introduce interceptors for RestTemplate [SPR-7494]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-7494](https://jira.spring.io/browse/SPR-7494?redirect=false)** and commented  The RestTemplate will benefit from having interceptor-style delegates, similar to the Spring-WS ClientInterceptors (see http://static.springsource.org/spring-ws/sites/1.5/apidocs/org/springframework/ws/client/support/interceptor/ClientInterceptor.html)  ---  **Attachments:** - [spring-extensions.zip](https://jira.spring.io/secure/attachment/17034/spring-extensions.zip) (_12.00 kB_)  **Issue Links:** - #10491 HTTP cache and conditional requests support in RestTemplate (_**""is depended on by""**_) - #10811 RestTemplate cannot support OAuth (_**""is depended on by""**_)  1 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2010-08-25T01:43:51Z","2019-01-11T14:08:45Z"
"","12182","Improve log statement ""not eligible for getting processed by all BeanPostProcessors"" to be more informative [SPR-7524]","**[Arik Kfir](https://jira.spring.io/secure/ViewProfile.jspa?name=arikkfir)** opened **[SPR-7524](https://jira.spring.io/browse/SPR-7524?redirect=false)** and commented  During construction of an application context, some beans are not eligible for being processed by all BeanPostProcessor, for various legitimate reasons. The log statement emitted when that happens for _inner beans_ is ""Bean '(inner bean)' is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)""  The problem is that since these beans are not named, one has no way to know where to find them. It would be useful to append the bean source location to said log statement.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/479b4c1b849591660bfe569152c43b08eb8abe3c","closed","type: enhancement,","spring-projects-issues","2010-09-03T08:27:04Z","2019-04-28T16:01:15Z"
"","12109","Make ServletHandlerMethodResolver protected (instead of private) to allow subclassing [SPR-7451]","**[Arik Kfir](https://jira.spring.io/secure/ViewProfile.jspa?name=arikkfir)** opened **[SPR-7451](https://jira.spring.io/browse/SPR-7451?redirect=false)** and commented  If one wants to customize AnnotationMethodHandlerAdapter by subclassing it, it would be very useful to be able to also subclass ServletHandlerMethodResolver.  ---  **Affects:** 3.0.3  **Issue Links:** - #10433 Make ServletHandlerMethodResolver top level type  3 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2010-08-11T04:45:59Z","2019-01-11T14:05:45Z"
"","12621","Improve failure mode when depends-on cycles exist [SPR-7966]","**[Archie Cobbs](https://jira.spring.io/secure/ViewProfile.jspa?name=archie172)** opened **[SPR-7966](https://jira.spring.io/browse/SPR-7966?redirect=false)** and commented  I had an application context containing a bogus cyclic dependency like this:  ```   ```  Obviously this is misconfigured. But the error message you get from Spring is a `StackOverflowError`:  ``` 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1420) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:291) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:288) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:580) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:895) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:425) 	at org.springframework.context.support.ClassPathXmlApplicationContext.(ClassPathXmlApplicationContext.java:197) 	at org.springframework.context.support.ClassPathXmlApplicationContext.(ClassPathXmlApplicationContext.java:172) 	at org.springframework.context.support.ClassPathXmlApplicationContext.(ClassPathXmlApplicationContext.java:158)         ... application-specifc stack frames ... Caused by: java.lang.StackOverflowError 	at java.util.HashMap.put(HashMap.java:389) 	at java.util.HashSet.add(HashSet.java:217) 	at java.util.Collections$SynchronizedCollection.add(Collections.java:1593) 	at org.springframework.beans.factory.support.AbstractBeanFactory.markBeanAsCreated(AbstractBeanFactory.java:1363) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:271) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:281) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:281) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:281) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190)         ... ```  This failure mode could be improved to better indicate the source of the problem.  Doing so could be implemented easily e.g. by keeping track as the dependency graph is explored of the members in the current dependency path in a `ThreadLocal`.  ---  **Affects:** 3.0.5  **Issue Links:** - #13456 Unnecessarily conservative locking in registerDependentBean is a bottleneck  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e48c315ad13aa06ef6eeb6112df5fbb37de71ded, https://github.com/spring-projects/spring-framework/commit/bd8469990d7a0631c18dd53af77730683cbf6b31","closed","type: enhancement,","spring-projects-issues","2011-02-16T07:21:20Z","2019-01-11T16:15:16Z"
"","11916","AbstractMarshaller incorrectly expects DOMResult to already have a node [SPR-7257]","**[Archie Cobbs](https://jira.spring.io/secure/ViewProfile.jspa?name=archie172)** opened **[SPR-7257](https://jira.spring.io/browse/SPR-7257?redirect=false)** and commented  If you try to marshall an object into a `DOMResult` that was created with the `DOMResult()` no-arg constructor, you get this:  ``` java.lang.IllegalArgumentException: DOMResult does not contain Node 	at org.springframework.util.Assert.notNull(Assert.java:112) 	at org.springframework.oxm.support.AbstractMarshaller.marshalDomResult(AbstractMarshaller.java:192) 	at org.springframework.oxm.support.AbstractMarshaller.marshal(AbstractMarshaller.java:93) ```  But why? The [Javadoc for DOMResult](http://java.sun.com/javase/6/docs/api/javax/xml/transform/dom/DOMResult.html) states:  > If no output DOM source is set, the transformation will create a Document node as the holder for the result of the transformation, which may be retrieved with getNode().  So this check is in violation of the DOM API. In any case, I can't create the node because I don't know what the document element is going to be (in general, only the marshaller knows that).    ---  **Affects:** 3.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f72c431e8ad473b98f53d9cf980c23f7b509ef45","closed","type: bug,","spring-projects-issues","2010-06-03T08:52:16Z","2012-06-19T03:43:13Z"
"","12254","StringUtils#parseLocaleString(String) with Variant when no Country [SPR-7598]","**[Antonio Mota](https://jira.spring.io/secure/ViewProfile.jspa?name=amsmota)** opened **[SPR-7598](https://jira.spring.io/browse/SPR-7598?redirect=false)** and commented  This issue is related to, but supersedes, #11228. Given the bugs described in that Jira, I propose the following code:  ```           public static Locale parseLocaleString(String localeString) { 		String[] parts = localeString.split(""[_ ]"",3); 		String language = (parts.length > 0 ? parts[0] : """"); 		String country = (parts.length > 1 ? parts[1] : """"); 		String variant = (parts.length > 2 ? parts[2] : """"); 		return new Locale(language, country, variant); 	}  ```  Some notes:  It throws a NullPointerException if localeString is null wich conforms with the Locale constructors (??thrown if any argument is null??).  Also, it does no validations, as per the Class description ""??Because a Locale object is just an identifier for a region, no validity check is performed when you construct a Locale.??""  ---  **Issue Links:** - #21192 Revise StringUtils.parseLocale(String) for proper handling of corner cases - #12754 LocaleEditor does not work with some locale strings (_**""supersedes""**_) - #11228 StringUtils#parseLocaleString(String) does not work for empty locale (_**""supersedes""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cab35aa788a1edbd647b4a8bd6e798524838f67e, https://github.com/spring-projects/spring-framework/commit/55563c16b5744288c0cb73fde0a07ba9e4d97e09  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2010-09-28T08:25:09Z","2019-01-11T15:11:48Z"
"","12271","BeanFactory.getType()  returning NULL for bean of type ProxyFactoryBean  [SPR-7615]","**[Ankit Singhal](https://jira.spring.io/secure/ViewProfile.jspa?name=ankisinghal)** opened **[SPR-7615](https://jira.spring.io/browse/SPR-7615?redirect=false)** and commented  Hi  I am facing problem in ProxyFactoryBean class, When we invoke getType on BeanFactory giving the bean name , it always return as null. Our Java code is-  public class TestSpring { public static void main(String args[]){     TestSpring ts = new TestSpring(); ts.process(); }  private void process() { BeanFactory factory = new XmlBeanFactory(new FileSystemResource(""E:\\beans.xml"")); Class c = factory.getType(""scor.imagedev.action.imageDevServerTaskActions""); System.out.println(c); } }  Our configuration file is as follows:  \ \     \ \     \  \ \ \  Some of the other things that i want to add here.  1. If we make the bean as singleton , it works. But in our case we want it to be a prototype. 2. We have to use BeanFactory.getType(\). This is our base framework make a call. We cannot change in our base framework. 3. Will targetSource can solve the problem? I tried it but it is of no use. May be I used it incorrectly 4. I am using Spring 2.0.6.    ---  **Affects:** 2.0.6, 2.0.7, 2.0.8, 2.0.9, 2.1 M1, 2.1 M2, 2.1 M3, 2.1 M4, 2.5 RC1, 2.5 RC2, 2.5 final, 2.5.1, 2.5.2, 2.5.3, 2.5.4, 2.5.5, 2.5.6, 3.0 M1, 3.0 M2, 3.0 M3, 3.0 M4, 3.0 RC1, 3.0 RC2, 3.0 RC3, 3.0 GA, 3.0.1, 3.0.2, 3.0.3, 3.0.4  **Reference URL:** http://forum.springsource.org/showthread.php?p=322410","closed","in: core,","spring-projects-issues","2010-10-03T23:32:02Z","2019-01-12T16:26:43Z"
"","12617","BindStatus does not find errors on nested models. [SPR-7962]","**[Angela Todd](https://jira.spring.io/secure/ViewProfile.jspa?name=angela)** opened **[SPR-7962](https://jira.spring.io/browse/SPR-7962?redirect=false)** and commented  The BindStatus class supports nested paths, but the code will fail to find errors if they are not on the top-level bean object.  The code in question (copied from fisheye under tag 3.0.5) is:  ``` public BindStatus(RequestContext requestContext, String path, boolean htmlEscape)throws IllegalStateException {          String beanName = null;     int dotPos = path.indexOf('.');     if (dotPos == -1) {         // property not set, only the object itself         beanName = path;         this.expression = null;     }     else {         beanName = path.substring(0, dotPos);         this.expression = path.substring(dotPos + 1);     }     this.errors = requestContext.getErrors(beanName, false);      ```  This snippet shows that the class will only look for errors on the model found at the first part of the path.  If however my path is ""customer.address.street"" (as per the example in the constructors javadoc) then errors relating to the street field actually live on the address object, not the customer object, and this code will therefore fail to find them.  As this class is used by all the form tags it causes the form:errors tag to fail to display errors on nested fields. The code that follows on from this snippet does extract the value for nested fields correctly, so the input tags work correctly.   ---  **Affects:** 3.0.5  1 votes, 1 watchers","closed","in: core,","spring-projects-issues","2011-02-14T07:54:07Z","2019-01-12T16:26:11Z"
"","12619","AnnotationTransactionAspect retains reference to closed BeanFactory [SPR-7964]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-7964](https://jira.spring.io/browse/SPR-7964?redirect=false)** and commented  We have a perhaps unusual situation where we have a mixture of plain JUnit tests and Spring-powered JUnit tests (annotated to run with SpringJUnit4ClassRunner) in the same project. All of the Spring-powered tests are annotated with `@DirtiesContext`. The project's compiled with AspectJ and is using Spring's AspectJ-powered transaction support. There are three test classes involved, and a failure occurs if they run in a particular order. In the order:  1. Not Spring-powered 2. Spring-powered 3. Spring-powered  all of the tests will pass.  In the order:  1. Spring-powered 2. Not Spring-powered 3. Spring-powered  the tests will fail.  In the failing case, the test that is not Spring-powered performs some entirely unexpected application context initialization. As this test isn't being run with Spring's runner and isn't annotated with `@DirtiesContext`, this leaves the application context in an unexpected state which causes the second class of Spring-powered tests to fail.  Crucially, the tests that aren't Spring-powered call a method that is annotated with `@Transactional` and has therefore been woven with Spring's transaction aspects. When this method is driven, the before advice results in determineTransactionManager() being called on AnnotationTransactionAspect. Unexpectedly AnnotationTransactionAspect has a non-null beanFactory reference so it asks the bean for the transaction manager. It's at this point that the unexpected initialization occurs.  To get to the point (finally!), I believe that the problem is that AnnotationTransactionAspect is being left with a reference to an out-of-date BeanFactory instance. My guess is that setting this reference to null during the cleanup processing triggered by the presence of the `@DirtiesContext` annotation will fix the problem.  I'm currently working around the failure with the following in the test class that's not Spring-powered:  ``` @BeforeClass public static void removeBeanFactoryFromAnnotationTransactionAspect() {     AnnotationTransactionAspect.aspectOf().setBeanFactory(null); } ```  ---  #### Further Resources  - [Spring Test Context Caching + AspectJ @Transactional + Ehcache pain](http://www.javacodegeeks.com/2014/04/spring-test-context-caching-aspectj-transactional-ehcache-pain.html) blog by Java Code Geeks  ---  **Affects:** 3.0.5  **Issue Links:** - #11019 TestContext framework should support one AspectJ instance per ApplicationContext - #17123 AnnotationTransactionAspect retains reference to JpaTransactionManager from closed context  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2011-02-15T09:54:44Z","2019-01-13T07:11:12Z"
"","11878","RequestMapping header condition should apply for exact match only [SPR-7219]","**[Andy Kriger](https://jira.spring.io/secure/ViewProfile.jspa?name=kokaku)** opened **[SPR-7219](https://jira.spring.io/browse/SPR-7219?redirect=false)** and commented  Given a controller method with a request mapping...  ``` @RequestMapping(value = ""/"", method = RequestMethod.GET, headers = ""Accept=application/json"") ```  My expectation would be that this would _only_ match an accept header that _equals_ application/json, not that it would match an accept header that _contained_ application/json. However, it appears that an accept header like _text/html,application/json_ will also match. This makes it impossible to have separate methods for 'text/html,*' and 'application/json' (only).   ---  **Affects:** 3.0.2  2 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2010-05-19T03:35:09Z","2013-05-16T18:07:41Z"
"","12825","SpEL varargs invocations can fail if primitives involved [SPR-8174]","**[Andy Clement](https://jira.spring.io/secure/ViewProfile.jspa?name=aclement)** opened **[SPR-8174](https://jira.spring.io/browse/SPR-8174?redirect=false)** and commented  Reported in an email from Alexandar Savov.  The handling of array construction for varargs invocation can fail if primitives are involved, with a classcastexception in ReflectionHelper.setupArgumentsForVarargsInvocation(). The line:  ``` Object[] repackagedArguments =    (Object[]) Array.newInstance(requiredParameterTypes[parameterCount - 1].getComponentType(), arraySize); ```  will get the CCE if getComponentType() returns a primitive because the constructed array will not be castable to Object[]   ---  **Affects:** 3.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9202224bca563ebd3ebf495d79d7cd201c6410d4","closed","in: core,","spring-projects-issues","2011-04-01T14:58:38Z","2012-06-19T03:39:01Z"
"","12002","SpEL: concurrency issue with StandardEvaluationContext initialization [SPR-7343]","**[Andy Clement](https://jira.spring.io/secure/ViewProfile.jspa?name=aclement)** opened **[SPR-7343](https://jira.spring.io/browse/SPR-7343?redirect=false)** and commented  Found by Oleg.  When the StandardEvaluationContext was modified from an eager to lazy initialization model, this created an issue with two threads simultaneously triggering the lazy initialization.  In initialization of the method resolvers it is possible for one thread to trigger initialization but during that initialization another thread grabs an 'empty list' of method resolvers (because the first thread has only created the list, not populated it yet).  Although only found for method resolvers this probably affects initialization of other pieces, they will be checked as part of fixing this issue.   ---  **Affects:** 3.0.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/88560fd910f9d1ca121340a86d6449b5151f0fc0","closed","in: core,","spring-projects-issues","2010-07-02T02:39:49Z","2012-06-19T03:44:09Z"
"","11994","SpEL: support for inline list expressions [SPR-7335]","**[Andy Clement](https://jira.spring.io/secure/ViewProfile.jspa?name=aclement)** opened **[SPR-7335](https://jira.spring.io/browse/SPR-7335?redirect=false)** and commented  This is a feature that is repeatedly requested in emails to me.  I'm planning to reactivate (the previously written then removed) inline list support.  At the moment users are having to make calls out to the Arrays type to build lists, eg.  T(java.util.Arrays).asList(1,2,3)  this will be very expensive (method invocation every time) compared to something like this  {1,2,3}  which, if expression evaluation is smart, will result in a single immutable constant list (of type ArrayList).  Following on from that we can build the array construction syntax:  new int[]{1,2,3}  —  If you read this Juergen, are you ok with adding it?   ---  **Affects:** 3.0.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f5ced9be3852a4faa07dfa13d8d089cd613f5949","closed","type: enhancement,","spring-projects-issues","2010-06-29T04:37:57Z","2012-06-19T03:43:49Z"
"","11939","Spring should be able to configure the xlint warnings of the AspectJ pointcut parser/matcher it uses [SPR-7280]","**[Andy Clement](https://jira.spring.io/secure/ViewProfile.jspa?name=aclement)** opened **[SPR-7280](https://jira.spring.io/browse/SPR-7280?redirect=false)** and commented  Some of the messages produced by AspectJ are configurable - their severity can be any of ignore/warning/error.  If a user supplies the appropriate xlint configuration properties file they can be changed from their default severity.  For example, the 'cantFindType' message can be turned down from error to ignore if the user truly understands why it is appearing and they don't want to see the message again.  It should be possible to configure the lint levels from Spring for the AspectJ pointcut parser/matcher it uses.   ---  **Affects:** 3.0.2  2 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2010-06-11T02:39:34Z","2015-09-22T18:20:31Z"
"","12344","NullPointerException could be thrown on  synchronized (pvs) in InjectionMetadata.checkPropertySkipping [SPR-7688]","**[Andy Bu](https://jira.spring.io/secure/ViewProfile.jspa?name=andybu)** opened **[SPR-7688](https://jira.spring.io/browse/SPR-7688?redirect=false)** and commented  IBM JVM does not allow synchronized on ""null""  ---  **Issue Links:** - #12342 NullPointerException in InjectionMetadata (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2010-10-26T13:43:02Z","2019-01-12T16:49:25Z"
"","12143","java.lang.NoSuchMethodError: org.springframework.core.OrderComparator.sort [SPR-7485]","**[Andy Bentley](https://jira.spring.io/secure/ViewProfile.jspa?name=anubiz)** opened **[SPR-7485](https://jira.spring.io/browse/SPR-7485?redirect=false)** and commented  Caused by: java.lang.NoSuchMethodError: org.springframework.core.OrderComparator.sort(Ljava/util/List;)V at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:597) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:407) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:139) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:83) at edu.mit.ll.nco.producer.TestProducer.main(TestProducer.java:16)   ---  **Affects:** 3.0 GA, 3.0.1, 3.0.2, 3.0.3, 3.0.4","closed","in: core,","spring-projects-issues","2010-08-23T10:09:13Z","2019-01-11T14:09:30Z"
"","12317","AbstractJasperReportsView uses request locale directly instead of relying on LocaleContext infrastructure [SPR-7661]","**[André Schäfer](https://jira.spring.io/secure/ViewProfile.jspa?name=andre.schaefer@namics.com)** opened **[SPR-7661](https://jira.spring.io/browse/SPR-7661?redirect=false)** and commented  Since Issue #5682 the locale and message source of the current request are exposed to the jasper report. This is OK, if you like to provide the report for a user based on the browser locale but doesn't work if you like to create the report in a different language then the browser language. Since the implementation of AbstractJasperReportsView.exposeLocalizationContext(..) overrides the required parameters without any check, it is not possible to set a custom Locale.  I suggest 2 things: 1) check if related parameters are already set in model before overwriting 2) use LocaleContext and ApplicationContext message source to provide localization  As workaround I wrote a custom view class overriding the exposeLocalizationContext(..) methode to works as described above. Find this class attached.  ---  **Affects:** 1.2.1, 1.2.2, 1.2.3, 1.2.4, 1.2.5, 1.2.6, 1.2.7, 1.2.8, 2.0 M1, 2.0 M2, 2.0 M3, 2.0 M4, 2.0 M5, 2.0 RC1, 2.0 RC2, 2.0 RC3, 2.0 RC4, 2.0 final, 2.0.1, 2.0.2, 1.2.9, 2.0.3, 2.0.4, 2.0.5, 2.0.6, 2.0.7, 2.0.8, 2.0.9, 2.1 M1, 2.1 M2, 2.1 M3, 2.1 M4, 2.5 RC1, 2.5 RC2, 2.5 final, 2.5.1, 2.5.2, 2.5.3, 2.5.4, 2.5.5, 2.5.6, 3.0 M1, 3.0 M2, 3.0 M3, 3.0 M4, 3.0 RC1, 3.0 RC2, 3.0 RC3, 3.0 GA, 3.0.1, 3.0.2, 3.0.3, 3.0.4  **Attachments:** - [MJasperReportsPdfView.java](https://jira.spring.io/secure/attachment/17218/MJasperReportsPdfView.java) (_1.80 kB_)  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2010-10-18T02:00:44Z","2019-01-11T14:37:34Z"
"","12051","HibernateException is thrown during borrow connection after any query execution in RowMapper [SPR-7393]","**[Andruschuk Borislav](https://jira.spring.io/secure/ViewProfile.jspa?name=borislav.andruschuk)** opened **[SPR-7393](https://jira.spring.io/browse/SPR-7393?redirect=false)** and commented  We have some DAO which call an other DAO in RowMapper to get linked entities. Sometimes we have to do that to link different loosely coupled entities in depends of included application modules, data base state etc. After migration from Spring 2.5.6 to Spring 3.X we've got the following issue:  ``` org.hibernate.HibernateException: connnection proxy not usable after transaction completion 	at org.hibernate.jdbc.BorrowedConnectionProxy.invoke(BorrowedConnectionProxy.java:66) 	at $Proxy6.prepareStatement(Unknown Source) 	at org.springframework.jdbc.core.PreparedStatementCreatorFactory$PreparedStatementCreatorImpl.createPreparedStatement(PreparedStatementCreatorFactory.java:245) 	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:580) ```  It happens on prepared statement creation for query need to be executed after execution any SQL statement in DAO called from RowMapper. I've created Unit test to show this incident.   ---  **Affects:** 3.0 GA, 3.0.1, 3.0.2, 3.0.3  **Attachments:** - [RowMapperTest.java](https://jira.spring.io/secure/attachment/16931/RowMapperTest.java) (_3.19 kB_)  **Issue Links:** - [SEC-1778](https://jira.spring.io/browse/SEC-1778) MutableAclService#updateAcl() fails in JPA environment (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b261d336b18ccf852d0def64cdfd852c052ef355","closed","in: core,","spring-projects-issues","2010-07-25T04:40:28Z","2019-01-11T13:38:43Z"
"","12379","Error handling in scheduled tasks [SPR-7723]","**[Andriy Kulchytskyy](https://jira.spring.io/secure/ViewProfile.jspa?name=whoops)** opened **[SPR-7723](https://jira.spring.io/browse/SPR-7723?redirect=false)** and commented  ThreadPoolTaskScheduler has errorHandler property for handling exceptions however when using `@Scheduled` annotation exceptions are not catched.  ```                         ```  my error handler:  ```  public class ScheduledTaskErrorHandler implements ErrorHandler{  	private static Logger log = Logger.getLogger(ScheduledTaskErrorHandler.class);  	 	@Override 	public void handleError(Throwable t) { 		log.debug(""Error occurred while executing scheduled task""); 	} } ```  test exception:  ``` public class NewsletterProcessQueueScheduledService { ...  	@Scheduled(fixedDelay=1*60*1000) 	private void processQueue() throws Exception{ 		throw new Exception(""test""); 	} } ```  console output:  ``` ERROR: org.springframework.scheduling.support.MethodInvokingRunnable - Invocation of method 'processQueue' on target class [class com.companyname.services.scheduled.NewsletterProcessQueueScheduledService] failed java.lang.Exception: test 	at com.companyname.services.scheduled.NewsletterProcessQueueScheduledService.processQueue(NewsletterProcessQueueScheduledService.java:20) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 	at java.lang.reflect.Method.invoke(Method.java:597) 	at org.springframework.util.MethodInvoker.invoke(MethodInvoker.java:273) 	at org.springframework.scheduling.support.MethodInvokingRunnable.run(MethodInvokingRunnable.java:65) 	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:51) 	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) 	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317) 	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150) 	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98) 	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181) 	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205) 	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) 	at java.lang.Thread.run(Thread.java:619) ```  The error is logged, but my handling code is not executed.  class DelegatingErrorHandlingRunnable has correct handling code  ``` public class DelegatingErrorHandlingRunnable implements Runnable {    ...     public void run() {         try {             this.delegate.run();         }         catch (Throwable ex) {             this.errorHandler.handleError(ex);         }     } } ```  but underlying class MethodInvokingRunnable suppress all exceptions  ``` public class MethodInvokingRunnable extends ArgumentConvertingMethodInvoker 	public void run() { 		try { 			invoke(); 		} 		catch (InvocationTargetException ex) { 			logger.error(getInvocationFailureMessage(), ex.getTargetException()); 			// Do not throw exception, else the main loop of the scheduler might stop! 		} 		catch (Throwable ex) { 			logger.error(getInvocationFailureMessage(), ex); 			// Do not throw exception, else the main loop of the scheduler might stop! 		} 	} ```    ---  **Affects:** 3.0.4  **Reference URL:** http://forum.springsource.org/showthread.php?t=97327  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0d70e08ac3a610b3db7911bd553b1efbdae1628d","closed","type: enhancement,","spring-projects-issues","2010-11-08T05:34:59Z","2012-06-19T03:39:10Z"
"","12585","overview.html in Spring aspects JAR still talks about SWF etc. [SPR-7930]","**[Andrew Swan](https://jira.spring.io/secure/ViewProfile.jspa?name=aswan)** opened **[SPR-7930](https://jira.spring.io/browse/SPR-7930?redirect=false)** and commented  #10385 is marked as having been fixed in 3.0 RC1, yet the problem still exists in org.springframework.aspects-3.0.5.RELEASE.jar.  ---  **Affects:** 3.0.5","closed","in: core,","spring-projects-issues","2011-02-01T20:33:51Z","2019-01-12T05:31:06Z"
"","11896","NamedParameterJdbcTemplate has the potential to leak memory [SPR-7237]","**[Andrew Robinson](https://jira.spring.io/secure/ViewProfile.jspa?name=andrewrobinson)** opened **[SPR-7237](https://jira.spring.io/browse/SPR-7237?redirect=false)** and commented  org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate has the potential to leak memory via its parsedSqlCache property.  The code only ever adds to the Map and does not limit its size in any way.  Nothing in the Javadoc makes developers aware that this Map could potentially grow without bounds.  We encountered this problem only under live load. The search on our website has the potential to generate a large number of permutations. We were thus dynamically generating a large number of unique SQL statements. We do use bind params where possible but there are places where this is difficult or inconvenient.  The size of these statements as String keys, stored within NamedParameterJdbcTemplate, caused a slow memory leak that gave us OutOfMemoryError after about 12 hours of live traffic.  We are using 3.0.1.RELEASE but from Fisheye it looks like this behaviour is still present in your trunk.  The following seem like options, please do as you see fit:  a) Update the Javadoc with a warning about this behaviour b) Limit the max size of the Map, configurable but with sensible defaults c) use a WeakReference or SoftReference HashMap  Our workaround has been to extend the class and override the method as follows:      /**      * @return the uncached, parsed SQL statement      */     protected ParsedSql getParsedSql(String sql) {     	return NamedParameterUtils.parseSqlStatement(sql);     }    ---  **Affects:** 3.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2136b04b65b2c0c5a6109390bd021d968c0ec2a6","closed","in: core,","spring-projects-issues","2010-05-25T23:02:22Z","2012-06-19T03:43:00Z"
"","12499","Predict specific object type in EhCacheFactoryBean [SPR-7843]","**[Andrei Stefan](https://jira.spring.io/secure/ViewProfile.jspa?name=astefan)** opened **[SPR-7843](https://jira.spring.io/browse/SPR-7843?redirect=false)** and commented  The attached sample demonstrates the issue: - running Main class with the configuration as is throws a ""NoSuchBeanDefinitionException: No matching bean of type [net.sf.ehcache.Cache]"" - changing the context.xml to have ""component-scan"" on the last position runs without issues    ---  **Affects:** 3.0.5  **Attachments:** - [test.zip](https://jira.spring.io/secure/attachment/17484/test.zip) (_3.87 kB_) - [test-maven.zip](https://jira.spring.io/secure/attachment/19416/test-maven.zip) (_5.09 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f5042d1928f96967b6fe7dec198b55eb4746baa1, https://github.com/spring-projects/spring-framework/commit/0690b58878f0e6c57a443720244049b16ba3cfd5  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2010-12-29T06:50:25Z","2012-06-19T03:39:01Z"
"","12472","ConversionService broken since 3.0.4 [SPR-7816]","**[Andrei Stefan](https://jira.spring.io/secure/ViewProfile.jspa?name=astefan)** opened **[SPR-7816](https://jira.spring.io/browse/SPR-7816?redirect=false)** and commented  Snippet form class:  public FilterAdapter(final String expectedPrefix, final Map","closed","in: core,","spring-projects-issues","2010-12-13T04:08:04Z","2012-06-19T03:39:02Z"
"","11954","ConversionService fails to convert String to Resource List values within Map structures in 3.0.3 [SPR-7295]","**[Andrei Stefan](https://jira.spring.io/secure/ViewProfile.jspa?name=astefan)** opened **[SPR-7295](https://jira.spring.io/browse/SPR-7295?redirect=false)** and commented  Given the attached test project, the following error is thrown in 3.0.3 (the same test it's ok in 3.0.2): Caused by: org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from [java.lang.String] to [org.springframework.core.io.Resource] at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:180) at org.springframework.core.convert.support.CollectionToArrayConverter.convert(CollectionToArrayConverter.java:63) at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:37) ... 23 more   ---  **Affects:** 3.0.3  **Attachments:** - [test.zip](https://jira.spring.io/secure/attachment/16718/test.zip) (_7.97 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/27b04036a9e6e7434bf3ef0942b417aa16b90574  1 votes, 2 watchers","closed","in: core,","spring-projects-issues","2010-06-17T04:13:40Z","2012-06-19T03:43:05Z"
"","12480","@Transactional on test class ignored for test methods declared in superclass [SPR-7824]","**[Andrei Badea](https://jira.spring.io/secure/ViewProfile.jspa?name=andrei.badea)** opened **[SPR-7824](https://jira.spring.io/browse/SPR-7824?redirect=false)** and commented  Have the following test classes:  ``` @ContextConfiguration(...) public class MyTestBase extends AbstractTestNGSpringContextTests {  	protected boolean beforeTransaction;  	@Test 	public void test() { 		Assert.assertTrue(beforeTransaction); 	} } ```  ``` @TestExecutionListeners({ TransactionalTestExecutionListener.class }) @Transactional public class MyTest extends MyTestBase {  	@BeforeTransaction 	public void before() { 		beforeTransaction = true; 	} } ```  Run MyTest.java. The expectation is that the `@Transactional` annotation is handled and the test() method runs in a transaction. This does not happen. AbstractFallbackTransactionAttributeSource seems to have been written with interfaces in mind, where  the ""most specific method"" is in the implementation class. So for the case above, one would expect the most specific method to be MyTest.test(), but it actually is MyTestBase.test(). I did not find a way to get a java.lang.reflect.Method handle for MyTest.test().  ---  **Affects:** 3.0.4  **Issue Links:** - #15877 `@Transactional` annotation does not apply to inherited methods from abstract class during tests (_**""is duplicated by""**_)","closed","type: enhancement,","spring-projects-issues","2010-12-16T09:23:17Z","2019-01-13T07:11:50Z"
"","12662","Cache support - extend key features [SPR-8007]","**[andrei acsinia](https://jira.spring.io/secure/ViewProfile.jspa?name=andrei_the_last)** opened **[SPR-8007](https://jira.spring.io/browse/SPR-8007?redirect=false)** and commented  Beside methodName should be nice to have exposed 'package name', 'class name', 'parameters names', 'parameters as array'. I consider very helpfully to have the opportunity build a key like: `@Cacheable`(value = ""cacheName"", key = ""'#root.package + #root.methodName + #paramsName + #p0 + #p3)  ---  **Affects:** 3.1 M1  **Issue Links:** - #12488 Allow target access in Cache Key SpEL","closed","type: enhancement,","spring-projects-issues","2011-02-28T12:18:41Z","2019-01-11T12:37:45Z"
"","12661","Cache new future - unexpected behaviour when cache elements expire [SPR-8006]","**[andrei acsinia](https://jira.spring.io/secure/ViewProfile.jspa?name=andrei_the_last)** opened **[SPR-8006](https://jira.spring.io/browse/SPR-8006?redirect=false)** and commented  Null elements retrieved from cache even if the stored element is not null.  Possible cause: 1. between cache key verification 'cache.containsKey(key)' (line 191: CacheAspectSupport.java) and 'Element element = cache.get(key);' (line 73: EhCacheCache.java) the cache element expire 2. elements in cache are expired even if the key is present    ---  **Affects:** 3.1 M1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fad2f2ca3000d56138fc0a254684e78549b5c8bb, https://github.com/spring-projects/spring-framework/commit/5daad3e08134748d0c56a0f3f35962b6f1fe2805","closed","in: core,","spring-projects-issues","2011-02-28T10:42:22Z","2019-01-11T12:37:47Z"
"","12555","Annotation based injection into non public base classes does not work [SPR-7900]","**[Andreas Benneke](https://jira.spring.io/secure/ViewProfile.jspa?name=abeani)** opened **[SPR-7900](https://jira.spring.io/browse/SPR-7900?redirect=false)** and commented  Annotation driven injection on public methods specified in a non-public base classes does not work, because Java generates bridge methods for the subclass which are not ignored by Spring (as they should IMHO).  Example:  ``` /* not public! */ class Base {  	@Resource 	public void setResource(Injectable injectable) {            ... 	} }  @Component public class Target extends Base {  } ```  Same applies to `@Autowired`.  The attached maven project demonstrates this.  Workarounds: Use field injection, re-declare the method(s) in the subclass or make the base class public.  ---  **Affects:** 3.0.5  **Attachments:** - [injection-test.zip](https://jira.spring.io/secure/attachment/17536/injection-test.zip) (_3.10 kB_) - [mylyn-context.zip](https://jira.spring.io/secure/attachment/18361/mylyn-context.zip) (_4.65 kB_)  **Issue Links:** - #13080 AutowiredAnnotationBeanPostProcessor should ignore bridge methods when looking for annotations (_**""is duplicated by""**_) - #13302 Bridged method detection leads to false positive detection of autowired annotations - #17096 `@Resource` injection broken under spring-framework > 4.1.0 - #17101 Consistent bridge method handling in annotation post-processors","closed","in: core,","spring-projects-issues","2011-01-21T08:36:52Z","2019-01-13T07:11:30Z"
"","12613","NamedParameterUtils.parseSqlStatement can't handle quote following comment end [SPR-7958]","**[Anders Blaagaard](https://jira.spring.io/secure/ViewProfile.jspa?name=ablaanda)** opened **[SPR-7958](https://jira.spring.io/browse/SPR-7958?redirect=false)** and commented  String sql1 = ""SELECT -- Comment \n"" + ""'B' AS x FROM mytable where y > :someY"";  String sql2 = ""SELECT -- Comment \n"" + "" 'B' AS x FROM mytable where y > :someY"";  NamedParameterUtils.parseSqlStatement(sql1).getNamedParameterCount() is 0! (expected 1) NamedParameterUtils.parseSqlStatement(sql2).getNamedParameterCount() is 1 (as expected)  ---  **Affects:** 3.0.5  **Issue Links:** - #20887 NamedParameterJdbcTemplate fails on PostgreSQL array","closed","status: bulk-closed,","spring-projects-issues","2011-02-11T04:22:50Z","2019-01-12T03:31:22Z"
"","11911","ResourceBundleThemeSource should resolve *.properties like ResourceBundleMessageSource [SPR-7252]","**[Alvin Chee](https://jira.spring.io/secure/ViewProfile.jspa?name=alvincys)** opened **[SPR-7252](https://jira.spring.io/browse/SPR-7252?redirect=false)** and commented  If current request context is en_US, and no theme_en_US.properties specified (or no key specified in theme_en_US.properties), it should fallback to theme_en.properties, then theme.properties.  \ \ \ \ \ \  ---  **Affects:** 3.0.2  **Issue Links:** - #11900 ResourceBundleThemeSource should resolve *.properties like ResourceBundleMessageSource (_**""is duplicated by""**_)","closed","type: enhancement,","spring-projects-issues","2010-06-01T16:43:42Z","2019-01-11T13:20:47Z"
"","11900","ResourceBundleThemeSource should resolve *.properties like ResourceBundleMessageSource [SPR-7241]","**[Alvin Chee](https://jira.spring.io/secure/ViewProfile.jspa?name=alvincys)** opened **[SPR-7241](https://jira.spring.io/browse/SPR-7241?redirect=false)** and commented  If current request context is en_US, and no theme_en_US.properties specified (or no key specified in theme_en_US.properties), it should fallback to theme_en.properties, then theme.properties.  \ \ \ \ \ \  ---  **Affects:** 2.5.6  **Issue Links:** - #11911 ResourceBundleThemeSource should resolve *.properties like ResourceBundleMessageSource (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2010-05-27T17:01:36Z","2019-01-11T13:21:10Z"
"","12458","Spring MVC should return 400 BAD_REQUEST on unsuccessful binding. [SPR-7802]","**[allnightlong](https://jira.spring.io/secure/ViewProfile.jspa?name=allnightlong)** opened **[SPR-7802](https://jira.spring.io/browse/SPR-7802?redirect=false)** and commented  I'll explain problem on example: I've got contoller, to hanlde url like /party.do?partyId=10 Here is the controller examole: public class PartyController { public ModelMap handle(`@RequestParam` int partyId) { ... } } Now, imagine, that someone open the wrong link: /party.do?partyId=42949672960 (more than MAX_INTEGER) or even /party.do?partyId=zzz. SpringMVC will return 500 Internal Server Error, which is not quiet accurate/ In my opinion, it should return 400 Bad Request.  ---  **Affects:** 3.0.5  **Issue Links:** - #13075 Spring MVC returns 500 Internal Server Error when required HTTP header is missing (_**""is superseded by""**_)  1 votes, 2 watchers","closed","in: web,","spring-projects-issues","2010-12-08T09:46:58Z","2019-01-11T15:13:35Z"
"","11974","remove ""Accept-Charset"" header from response, generated by @ResponseBody [SPR-7316]","**[allnightlong](https://jira.spring.io/secure/ViewProfile.jspa?name=allnightlong)** opened **[SPR-7316](https://jira.spring.io/browse/SPR-7316?redirect=false)** and commented  I use `@ResponseBody` for ajax features in my app. Ussualy the answer is have only several vharacter length (answers like 'ok', 'fail', etc). But whole http-response is very big due to Accept-Charset header overhead, like this:  Accept-Charset:big5, big5-hkscs, compound_text, euc-jp, euc-kr, gb18030, gb2312, gbk, ibm-thai, ibm00858, ibm01140, ibm01141, ibm01142, ibm01143, ibm01144, ibm01145, ibm01146, ibm01147, ibm01148, ibm01149, ibm037, ibm1026, ibm1047, ibm273, ibm277, ibm278, ibm280, ibm284, ibm285, ibm297, ibm420, ibm424, ibm437, ibm500, ibm775, ibm850, ibm852, ibm855, ibm857, ibm860, ibm861, ibm862, ibm863, ibm864, ibm865, ibm866, ibm868, ibm869, ibm870, ibm871, ibm918, iso-2022-cn, iso-2022-jp, iso-2022-jp-2, iso-2022-kr, iso-8859-1, iso-8859-13, iso-8859-15, iso-8859-2, iso-8859-3, iso-8859-4, iso-8859-5, iso-8859-6, iso-8859-7, iso-8859-8, iso-8859-9, jis_x0201, jis_x0212-1990, koi8-r, koi8-u, shift_jis, tis-620, us-ascii, utf-16, utf-16be, utf-16le, utf-32, utf-32be, utf-32le, utf-8, windows-1250, windows-1251, windows-1252, windows-1253, windows-1254, windows-1255, windows-1256, windows-1257, windows-1258, windows-31j, x-big5-solaris, x-euc-jp-linux, x-euc-tw, x-eucjp-open, x-ibm1006, x-ibm1025, x-ibm1046, x-ibm1097, x-ibm1098, x-ibm1112, x-ibm1122, x-ibm1123, x-ibm1124, x-ibm1381, x-ibm1383, x-ibm33722, x-ibm737, x-ibm834, x-ibm856, x-ibm874, x-ibm875, x-ibm921, x-ibm922, x-ibm930, x-ibm933, x-ibm935, x-ibm937, x-ibm939, x-ibm942, x-ibm942c, x-ibm943, x-ibm943c, x-ibm948, x-ibm949, x-ibm949c, x-ibm950, x-ibm964, x-ibm970, x-iscii91, x-iso-2022-cn-cns, x-iso-2022-cn-gb, x-iso-8859-11, x-jis0208, x-jisautodetect, x-johab, x-macarabic, x-maccentraleurope, x-maccroatian, x-maccyrillic, x-macdingbat, x-macgreek, x-machebrew, x-maciceland, x-macroman, x-macromania, x-macsymbol, x-macthai, x-macturkish, x-macukraine, x-ms932_0213, x-ms950-hkscs, x-mswin-936, x-pck, x-sjis_0213, x-utf-16le-bom, x-utf-32be-bom, x-utf-32le-bom, x-windows-50220, x-windows-50221, x-windows-874, x-windows-949, x-windows-950, x-windows-iso2022jp  I think, this header is useless, because accept-charset must be request, not response header. So consider removing it.   ---  **Affects:** 3.0.3  **Issue Links:** - [INT-3120](https://jira.spring.io/browse/INT-3120) Set the ""writeAcceptCharset"" to false by default in StringHttpConverter within the http inbound gateway  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4504ab8bc22c0ac57d4cbde4083f38272daf7cb0, https://github.com/spring-projects/spring-framework/commit/ccdd1a9efd30c41b07a66cab63f2c58190c42478","closed","type: bug,","spring-projects-issues","2010-06-23T04:05:28Z","2019-10-28T07:54:00Z"
"","12520","Poor multithread performance in AbstractAutowireCapableBeanFactory.filterPropertyDescriptorsForDependencyCheck method [SPR-7863]","**[Alexey Romanchuk](https://jira.spring.io/secure/ViewProfile.jspa?name=alexey.romanchuk)** opened **[SPR-7863](https://jira.spring.io/browse/SPR-7863?redirect=false)** and commented  Non optimal lock usage in AbstractAutowireCapableBeanFactory.filterPropertyDescriptorsForDependencyCheck method seriously decrease multithreading performance. Here it is optimal lock implementation to synchronous item adding and multithread getting: `monospaced` protected PropertyDescriptor[] filterPropertyDescriptorsForDependencyCheck(BeanWrapper bw) { synchronized (this.filteredPropertyDescriptorsCache) { PropertyDescriptor[] filtered = this.filteredPropertyDescriptorsCache.get(bw.getWrappedClass()); if (filtered == null) { List\ pds = new LinkedList\(Arrays.asList(bw.getPropertyDescriptors())); for (Iterator\ it = pds.iterator(); it.hasNext();) { PropertyDescriptor pd = it.next(); if (isExcludedFromDependencyCheck(pd)) { it.remove(); } } filtered = pds.toArray(new PropertyDescriptor[pds.size()]); this.filteredPropertyDescriptorsCache.put(bw.getWrappedClass(), filtered); } return filtered; } } `monospaced`  It is very easy and safe fix that seriously improve multithreading performance   ---  **Affects:** 2.5.6, 3.0.5, 3.1 M2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/79bcefa0ceb6fc07578b1b0c3456760f7c669cb0, https://github.com/spring-projects/spring-framework/commit/a9f28575b13d8adf1f7bab92f84c96ad471f7159","closed","type: enhancement,","spring-projects-issues","2011-01-06T21:40:22Z","2012-06-19T03:39:00Z"
"","12654","Add possibility to optionaly disable null values injection through @Value annotation [SPR-7999]","**[Alexander Gavrilov](https://jira.spring.io/secure/ViewProfile.jspa?name=lucker)** opened **[SPR-7999](https://jira.spring.io/browse/SPR-7999?redirect=false)** and commented  Currentrly Spring treats null values for field or params annotated by `@Value` as valid. It would be usefull to be able to specify whether it is acceptable or not at dependency annotation level, keeping current behaviour as defauilt. I think we can add ""required"" attribute to `@Value` annotation and modify ``` DefaultListableBeanFactory#doResolveDependency(DependencyDescriptor, Class, String, Set\, TypeConverter)  ```method to throw BeansException if resolved @Value value is null. ```    ---  **Affects:** 3.0.5, 3.1 M1","closed","type: enhancement,","spring-projects-issues","2011-02-24T04:58:14Z","2018-12-28T10:41:46Z"
"","12611","ConcurrentModificationException at Autowired [SPR-7956]","**[Alexander Fedorov](https://jira.spring.io/secure/ViewProfile.jspa?name=xpoft)** opened **[SPR-7956](https://jira.spring.io/browse/SPR-7956?redirect=false)** and commented  Exception after registerBeanDefinition:  ``` 13:22:38.758 [Thread-26] ERROR o.s.web.context.ContextLoader - Context initialization failed java.util.ConcurrentModificationException: null         at java.util.AbstractList$Itr.checkForComodification(AbstractList.java:372) ~[na:1.6.0_22]         at java.util.AbstractList$Itr.next(AbstractList.java:343) ~[na:1.6.0_22]         at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:559) ~[spring-beans-3.0.5.RELEASE.jar:3.0.5.RELEASE]         at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:895) ~[spring-context-3.0.5.RELEASE.jar:3.0.5.RELEASE]         at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:425) ~[spring-context-3.0.5.RELEASE.jar:3.0.5.RELEASE]         at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:276) ~[spring-web-3.0.5.RELEASE.jar:3.0.5.RELEASE]         at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:197) ~[spring-web-3.0.5.RELEASE.jar:3.0.5.RELEASE]         at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:47) [spring-web-3.0.5.RELEASE.jar:3.0.5.RELEASE]         at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4521) [catalina.jar:7.0.6]         at org.apache.catalina.core.StandardContext$1.call(StandardContext.java:5004) [catalina.jar:7.0.6]         at org.apache.catalina.core.StandardContext$1.call(StandardContext.java:4999) [catalina.jar:7.0.6]         at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303) [na:1.6.0_22]         at java.util.concurrent.FutureTask.run(FutureTask.java:138) [na:1.6.0_22]         at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) [na:1.6.0_22]         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) [na:1.6.0_22]         at java.lang.Thread.run(Thread.java:662) [na:1.6.0_22] ```  How to repeat:  ``` @Controller public class PagesController { 	@Autowired 	protected ApplicationContext context; 	 	@PostConstruct 	public void postConstruct() 	{ 		String beanName = ""testBean""; 		 		ConfigurableApplicationContext configContext = (ConfigurableApplicationContext) context; 		AutowireCapableBeanFactory beanFactory = configContext.getBeanFactory(); 		BeanDefinitionRegistry registry = ((BeanDefinitionRegistry) beanFactory); 		 		GenericBeanDefinition beanDefinition = new GenericBeanDefinition(); 		beanDefinition.setBeanClass(DefaultImpl.class); 		beanDefinition.setLazyInit(false);   		beanDefinition.setAbstract(false);   		beanDefinition.setAutowireCandidate(true);  		registry.registerBeanDefinition(beanName, beanDefinition); 	} } ```  Or like this. serviceFactory.getByEntry is same as postConstruct() in previous example.  ```  @Controller public class PagesController { 	protected DefaultService sampleService;  	@Autowired 	public void setService(ServiceFactory serviceFactory) 	{ 		sampleService = serviceFactory.get(""A""); 	} }  ```  ``` public class DefaultImpl { 	private String Test;  	public String getTest() 	{ 		return Test; 	}  	public void setTest(String test) 	{ 		Test = test; 	}  } ```    ---  **Affects:** 3.0.5","closed","type: bug,","spring-projects-issues","2011-02-11T02:38:02Z","2012-06-19T03:39:25Z"
"","11968","Update Petclinic Tutorial petclinic/trunk/src/main/webapp/html/tutorial.html [SPR-7309]","**[Alexander Exner](https://jira.spring.io/secure/ViewProfile.jspa?name=alex)** opened **[SPR-7309](https://jira.spring.io/browse/SPR-7309?redirect=false)** and commented  This is what chatched my eye on reading the Petclinic tutorial:  Chapter ""Business Layer"" Current: org.springframework.samples.petclinic.Entity  is a simple JavaBean superclass used for all persistable objects. Better: org.springframework.samples.petclinic.BaseEntity is a simple JavaBean superclass used for all persistable objects.  Chapter ""Java Persistence API (JPA) Clinic Implementation"" Current: The JPA configuration is provided by src/main/resources/META-INF/orm.xml  and  src/main/resources/META-INF/persistence.xml. Better: The JPA configuration is provided by src/main/resources/META-INF/orm.xml and src/main/resources/META-INF/jpa-persistence.xml.  Chapter ""ApplicationContext"" Current: The following beans are defined in all 3 versions (1 per access strategy) of the PetClinic src/main/webapp/WEB-INF/applicationContext-\*.xml  file: Better: The following beans are defined in all 3 versions (1 per access strategy) of the PetClinic src/main/webapp/WEB-INF/spring/applicationContext-*.xml  file:  KR Alex   --- No further details from [SPR-7309](https://jira.spring.io/browse/SPR-7309?redirect=false)","closed","status: invalid,","spring-projects-issues","2010-06-21T19:40:54Z","2019-01-12T05:31:48Z"
"","12114","Problems with URL handling to scoped controllers [SPR-7456]","**[Alexander Borovsky](https://jira.spring.io/secure/ViewProfile.jspa?name=belpartizan)** opened **[SPR-7456](https://jira.spring.io/browse/SPR-7456?redirect=false)** and commented  1) Info (or more detail) level logging 2) We have URL mapping, e.g.  ```xml                   actionController          ```  3) We have scoped controller, e.g  ```xml      ```  When we try to start application, we get following exception:  ``` Caused by: org.springframework.beans.factory.BeanCreationException:  Error creating bean with name 'scopedTarget.actionController':  Scope 'session' is not active for the current thread;  consider defining a scoped proxy for this bean if you intend to refer to it from a singleton;  nested exception is java.lang.IllegalStateException:  No thread-bound request found: Are you referring to request attributes outside of an actual web request,  or processing a request outside of the originally receiving thread?  If you are actually operating within a web request and still receive this message,  your code is probably running outside of DispatcherServlet/DispatcherPortlet:  In this case, use RequestContextListener or RequestContextFilter to expose the current request.         at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:339)         at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190)         at org.springframework.aop.target.SimpleBeanTargetSource.getTarget(SimpleBeanTargetSource.java:33)         at org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor.getTarget(Cglib2AopProxy.java:653)         at org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor.intercept(Cglib2AopProxy.java:604)         at com.vi.portal.whatcanido.WhatCanIDoController$$EnhancerByCGLIB$$5e8730ba.toString()         at java.lang.String.valueOf(String.java:2826)         at java.lang.StringBuilder.append(StringBuilder.java:115)         at org.springframework.web.servlet.handler.AbstractUrlHandlerMapping.registerHandler(AbstractUrlHandlerMapping.java:411)         at org.springframework.web.servlet.handler.SimpleUrlHandlerMapping.registerHandlers(SimpleUrlHandlerMapping.java:129)  ```  It occurs because `AbstractUrlHandlerMapping.registerHandler` logs controller mapping:  ```java if (logger.isInfoEnabled()) { 	logger.info(""Mapped URL path ["" + urlPath + ""] onto handler ["" + resolvedHandler + ""]""); } ```  and `resolveHandler.toString()` is executed, this requires proxy to create underline scoped bean, but it can't create it without request.  PS. the same problem can occurs in different places of this function or in other functions.   ---  **Affects:** 3.0.3","closed","type: bug,","spring-projects-issues","2010-08-12T03:51:03Z","2012-06-19T03:44:15Z"
"","12537","AbstractFileResolvingResource.exists() method incorrectly returns 'true' for non-existent HTTP resources [SPR-7881]","**[Alex Wajda](https://jira.spring.io/secure/ViewProfile.jspa?name=wajda)** opened **[SPR-7881](https://jira.spring.io/browse/SPR-7881?redirect=false)** and commented  When testing resource existence AbstractFileResolvingResource.exists() method respects the response content length (URLConnection.getContentLength()) more than the response status even if it's 404.  ```java HttpURLConnection httpCon = 		(con instanceof HttpURLConnection ? (HttpURLConnection) con : null); if (httpCon != null) { 	httpCon.setRequestMethod(""HEAD""); 	if (httpCon.getResponseCode() == HttpURLConnection.HTTP_OK) { 		return true; 	} //","closed","in: core,","spring-projects-issues","2011-01-13T03:31:25Z","2012-06-19T03:39:33Z"
"","12498","DataBinder should be able to define a different strategy for BeanWrapperImpl how autogrowing should handle gaps in collection properties [SPR-7842]","**[Alex Rau](https://jira.spring.io/secure/ViewProfile.jspa?name=rauar)** opened **[SPR-7842](https://jira.spring.io/browse/SPR-7842?redirect=false)** and commented  DataBinder which is used by WebRequestDataBinder and ServletRequestDataBinder grows automatically collections when ""autoGrowNestedPaths"" is on (AFAIK this is the default for the DataBinder).  The behaviour of DataBinder when ""autoGrowNestedPaths"" is that a property with a given index N will result in growing a collection to size N if the collection is not large enough. Collection elements with index < N will be initialized with default objects of the collection's type.  Based on WebRequestDataBinder it's therefore easily possible to DoS a web application if it's allowed to bind against a collection property and the client POSTs a single property using a very large index.  Sending a single request containing a parameter for a collection property with index 99999999 caused an OOM on a JVM on MacOsX with default memory settings (64MB?). The list type in this case contained 7 String properties and 2 Longs.  I think there are several things to follow-up:  1) It would be safer to set autoGrowNestedPaths to false by default. Use of DataBinder and autoGrowNestedPaths then would be more restrictive by default and require explicit action to enable autoGrowing.  2) The creation of ""default"" values in BeanWrapperImpl should be more flexible. A strategy for creating default values would allow clients to define how such default values should be created. In the case of WebRequestDataBinder creating empty (null) collection elements instead of default objects is certainly safer to fill the gaps in the collection - especially for exposed applications to the public. Furthermore this does not expose unwanted restrictions like a maximum allowed index limitation etc.  3) Presumably this could be solved with CustomPropertyEditors. However the majority of developers probably tries to stick with what is available out-of-the box and as the DataBinding in general for ""standard"" use-cases works fine dealing with the described issue is not obvious and could lead to wide-spread holes.  ---  **Affects:** 3.0.5  **Issue Links:** - #13022 Can make an OutOfMemoryException by sending a modified form list property with an high index (_**""is duplicated by""**_) - #10702 Data Binder: Auto-grow collections as needed to support nested property binding - #14862 Limit auto grow collection size when using SpEL  7 votes, 7 watchers","closed","in: core,","spring-projects-issues","2010-12-28T11:14:33Z","2019-01-11T15:15:56Z"
"","12383","InternalResourceView needs to implement checkResource method [SPR-7727]","**[Alex Portnov](https://jira.spring.io/secure/ViewProfile.jspa?name=aportnov)** opened **[SPR-7727](https://jira.spring.io/browse/SPR-7727?redirect=false)** and commented  InternalResourceView doesn't override checkResource method from AbstractUrlBasedView, which always returns true. This in turn causes InternalResourceViewResolver to return a View object even when corresponding JSP page doesn't exists.  I have the following configuration:                                                 	     		     			     			     			     		     	     	     	     	                                                                                 	     	     	       When making request for statisticsView in the browser, which sends the following Accept header:  'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,\*/\*;q=0.8'  After the header is parsed by resolver text/html is the first media-type being looked for. Since InternalResourceViewResolver always return a view, even where jsp doesn't actually exists, I always get an error instead of getting XML representation, generated by the MarshallingView.   ---  **Affects:** 3.0 GA  7 votes, 4 watchers","open","type: enhancement,","spring-projects-issues","2010-11-08T15:02:21Z","2016-06-02T12:39:35Z"
"","12739","Add ConverterBackedWebArgumentResolver [SPR-8084]","**[Alex Antonov](https://jira.spring.io/secure/ViewProfile.jspa?name=aantono)** opened **[SPR-8084](https://jira.spring.io/browse/SPR-8084?redirect=false)** and commented  Add an implementation of ConverterBackedWebArgumentResolver to able to use it to delegate to already existing and custom-created HttpMessageConverters.  Attached is the proposed implementation.   ---  **Attachments:** - [ConverterBackedWebArgumentResolver.java](https://jira.spring.io/secure/attachment/17755/ConverterBackedWebArgumentResolver.java) (_1.42 kB_)","closed","type: enhancement,","spring-projects-issues","2011-03-24T12:54:58Z","2012-05-18T15:41:59Z"
"","12116","DefaultListableBeanFactory ""Ignoring constructor"" message logged at too low log level (TRACE) [SPR-7458]","**[Aleksander Adamowski](https://jira.spring.io/secure/ViewProfile.jspa?name=olo)** opened **[SPR-7458](https://jira.spring.io/browse/SPR-7458?redirect=false)** and commented  When using ContextSingletonBeanFactoryLocator to instantiate a parent context of a web application (using parentContextKey webapp context param), when there's an ""Ambiguous constructor argument types"" error when creating the parent context, the error message is logged at TRACE level, which is way too low:  TRACE [org.springframework.beans.factory.support.DefaultListableBeanFactory] (HDScanner) Ignoring constructor [public org.springframework.context.support.ClassPathXmlApplicationContext(java.lang.String[],java.lang.Class,org.springframework.context.ApplicationContext) throws org.springframework.beans.BeansException] of bean 'mainSpringContext': org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'mainSpringContext' defined in URL [vfszip:/opt/jboss-eap-5.1/jboss-as/server/all/deploy/someapp-1.1.0.ear/lib/somelib-1.1.0.jar/beanRefContext.xml]: Unsatisfied dependency expressed through constructor argument with index 1 of type [java.lang.Class]: Ambiguous constructor argument types - did you specify the correct bean references as constructor arguments?  A more appropriate level would be WARN. It seems that the logging takes place in org.springframework.beans.factory.support.ConstructorResolver, at line 198. There's also another logger.trace invocation in ConstructorResolver at line 376, for an ""Ignoring factory method..."" error, which should also have the level raised to WARN.  Since the error is swallowed at some level above, there's no symptom of the problem apart from the context being mysteriously missing. We had to increase container's logging threshold to TRACE to discover the problem!   ---  **Affects:** 2.5.6","closed","in: core,","spring-projects-issues","2010-08-12T07:57:36Z","2019-01-12T05:31:37Z"
"","12442","Modify LocaleChangeInterceptor so that also static jsp files would be affected [SPR-7786]","**[Alberto Aresca](https://jira.spring.io/secure/ViewProfile.jspa?name=genjosanzo)** opened **[SPR-7786](https://jira.spring.io/browse/SPR-7786?redirect=false)** and commented  While using the LocaleChangeInterceptor I noticed that even if it work great with anything under spring control, it doesn't seem to handle the static jsp file that you would/should serve within your j2ee environemnt. That seemed odd to me, since spring takes such a good care of translating them to (using whatever LocalResolver you prefer), I dint't get a reason why the LocaleChangeInterceptor shouldn't behave the same way. Investigating a bit I noticed that introducing such a feature wasn't that difficult, I just created my personal ImprovedLocalChangeInterceptor whic just overrides the preHandle method and sets the Locale inside javax.servlet.jsp.jstl.core.Config too. Maybe it would be nice to introduce this feature in the next releases   ---  **Affects:** 3.0.5  **Attachments:** - [ImprovedLocaleChangeInterceptor.java](https://jira.spring.io/secure/attachment/17422/ImprovedLocaleChangeInterceptor.java) (_1.35 kB_)","closed","in: web,","spring-projects-issues","2010-12-03T02:25:15Z","2019-01-11T15:39:02Z"
"","12445","FormHttpMessageConverter does not honor the charset in the content type when writing a form and uses a wrong default charset [SPR-7789]","**[Adrian](https://jira.spring.io/secure/ViewProfile.jspa?name=nitegate)** opened **[SPR-7789](https://jira.spring.io/browse/SPR-7789?redirect=false)** and commented  As stated in the summary the writeForm method does not use the charset defined in the content type. It uses its own Charset which is unfortunately ""ISO-8859-1"".  In the writeForm the method URLEncoder.encode is used to output the names and values. The Javadoc for this method says:  > Translates a string into application/x-www-form-urlencoded format using a specific encoding scheme. This method uses the supplied encoding scheme to obtain the bytes for unsafe characters. >  > Note: The World Wide Web Consortium Recommendation states that **UTF-8** should be used. Not doing so may introduce incompatibilities.  Therefore I would suggest to use UTF8 as default in this converter and respect the encoding (if any) in the content type for better flexibility.   ---  **Affects:** 3.0.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9f4499cb3675d6b8a82af05042e5d01137b48edf, https://github.com/spring-projects/spring-framework/commit/d0394599ad28760119df6b3c40fa57a371ecb5bb","closed","type: bug,","spring-projects-issues","2010-12-05T14:19:24Z","2012-06-19T03:39:44Z"
"","12221","GeneratedKeyHolder.getKey returns NULL with postgres [SPR-7564]","**[Adrian](https://jira.spring.io/secure/ViewProfile.jspa?name=nitegate)** opened **[SPR-7564](https://jira.spring.io/browse/SPR-7564?redirect=false)** and commented  On the forum there is thread that this problem cannot be solved (http://forum.springsource.org/showthread.php?t=19293).  The latest JDBC drives for postgres seam to work fine when returning the generated keys from a prepared statement but Spring Framework still seams to have issues getting this key. When calling getKey on a GeneratedKeyHolder object NULL is returned, whereas the following plain jdbc code works fine:  ``` PreparedStatement preparedStatement = connection.prepareStatement(SQL, 		PreparedStatement.RETURN_GENERATED_KEYS); preparedStatement.setString(1, entityType.getMetaData());  preparedStatement.executeUpdate();  Long entityPrimaryKey = null;  ResultSet generatedKeys = preparedStatement.getGeneratedKeys(); if (generatedKeys.next())  	entityPrimaryKey = Long.valueOf(generatedKeys.getLong(1));  preparedStatement.close(); ```  My table definition on postgres is as follows:  ``` CREATE  TABLE  ""entity_type"" (   ""entity_type_id"" SERIAL ,   ""meta_data"" TEXT NOT NULL ,   PRIMARY KEY (""entity_type_id"") ); ```    ---  **Affects:** 3.0.4  **Reference URL:** http://forum.springsource.org/showthread.php?t=19293  **Attachments:** - [postgres-test.zip](https://jira.spring.io/secure/attachment/17160/postgres-test.zip) (_5.42 kB_) - [postgres-test-exception.txt](https://jira.spring.io/secure/attachment/17161/postgres-test-exception.txt) (_2.69 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/97e047ed66d391cd1262b40847559c3d3c9110d4","closed","type: enhancement,","spring-projects-issues","2010-09-17T00:43:06Z","2012-06-19T03:43:31Z"
"","12510","Doc: ServletRequestListener is not needed anymore for JSF and Session/Request Scope [SPR-7853]","**[Adrian Gygax](https://jira.spring.io/secure/ViewProfile.jspa?name=notizklotz)** opened **[SPR-7853](https://jira.spring.io/browse/SPR-7853?redirect=false)** and commented  In the Spring Framework Reference Manual 3.0.5 there's the following statement on Page 59:  If you use a Servlet 2.4+ web container, with requests processed outside of Spring's DispatcherServlet (for example, when using JSF or Struts), you need to add the following javax.servlet.ServletRequestListener to the declarations in your web applications web.xml file  This is not true anymore for JSF at least since Spring 3.0. Spring has built-in fallback support for JSF, so you don't need the ServletRequestListener anymore for request and session scopes if JSF is used.  If using ICEFaces it's preferable to use the JSF fallback rather than using the ServletRequestListener because then you can you ICEfaces Extended Request Scope out of the box for Spring Beans.   ---  **Affects:** 3.0.5","closed","status: declined,","spring-projects-issues","2010-12-30T08:48:25Z","2015-09-22T17:34:33Z"
"","12614","Update AbstractPdfView to use com.itextpdf.* package [SPR-7959]","**[Adam Causey](https://jira.spring.io/secure/ViewProfile.jspa?name=adam.causey)** opened **[SPR-7959](https://jira.spring.io/browse/SPR-7959?redirect=false)** and commented  The class org.springframework.web.servlet.view.document.AbstractPdfView references the iText PDF library using the package com.lowagie.**.  The most recent version of iText uses the package com.itextpdf.** instead of com.lowagie.  The current workaround is to use an older version of iText, but it would be nice to have this updated.  Thanks.  ---  **Affects:** 3.0.5  **Issue Links:** - #12083 Update the AbstractPdfView class to point to the renamed itextpdf package names (_**""is duplicated by""**_)  1 votes, 4 watchers","closed","status: declined,","spring-projects-issues","2011-02-11T12:08:46Z","2019-01-11T16:15:31Z"
"","12197","End user access to files in WEB-INF directory through DispatcherPortlet [SPR-7540]","**[Adam Causey](https://jira.spring.io/secure/ViewProfile.jspa?name=adam.causey)** opened **[SPR-7540](https://jira.spring.io/browse/SPR-7540?redirect=false)** and commented  Hello,  We use the Liferay portal at our university and to develop our portlets we use org.springframework.web.portlet.DispatcherPortlet as the portlet class. There is a security bug that allows users to access files under the WEB-INF directory by using a certain URL.  Liferay has told us that the problem is in the generic portlet and will need to be reported to Spring for this to be fixed.  The Liferay bug is http://issues.liferay.com/browse/LPE-2960 . Since we use the Spring portlet MVC and not the Liferay portlet classes, this needs to be fixed in the Spring code.  Thanks.   ---  **Affects:** 2.5.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/40fa8afce47870f80bc79efd7501a699d05a57fa","closed","type: bug,","spring-projects-issues","2010-09-10T13:35:39Z","2012-06-19T03:42:56Z"
"","12438","Logging of SQL Params and Query when using JdbcTemplate [SPR-7782]","**[Abhishek Gupta](https://jira.spring.io/secure/ViewProfile.jspa?name=gupabhi)** opened **[SPR-7782](https://jira.spring.io/browse/SPR-7782?redirect=false)** and commented  In production applications it is imperative that SQL statements and bind parameters be logged at a configurable level for support purposes.  When using the JdbcTemplate spring does currently log both, but sql statements are logged at debug level and parameters are logged in the 'o.s.j.c.StatementCreatorUtils' class at trace level. It is impractical to keep trace level on in a critical (or any) production system - even for a single class. There are other non-important (or non-functional) debug/trace logs that might be in the class that are not required to be logged. Or new ones might be introduced in future versions.  We would want the query/params to be logged at info level but again that might not be suitable for others, so ideally it should be something that is configurable.  The work-around today is ugly, in that we wrap the JdbcTemplate just to be able to log the parameters. Ideally, if there could be a property in the JdbcTemplate that accepts the log level for functional logs (query, params in this case) it would be most helpful. Given that JdbcTemplate is now a total replacement for using any low level jdbc api, and is so popular, it makes sense to have this feature that will give users more control and contribute to the completeness of such a widely used Spring offering.  I am happy to use any other solution you might have that addresses this use-case.  Thanks, Abhi  P.S. This really applies to other classes too like in the jdbc.object package  ---  **Affects:** 3.0.5  **Issue Links:** - #14041 JdbcTemplate parameter and result logging (_**""is duplicated by""**_) - #12774 Revisit subsystem-oriented logging  6 votes, 14 watchers","closed","status: bulk-closed,","spring-projects-issues","2010-12-01T14:54:27Z","2019-01-12T03:31:56Z"
"","12337","Create an extendable way of configuring translations for SQLExceptions [SPR-7681]","**[Abhishek Gupta](https://jira.spring.io/secure/ViewProfile.jspa?name=gupabhi)** opened **[SPR-7681](https://jira.spring.io/browse/SPR-7681?redirect=false)** and commented  The following jiras are examples of the DataAccessException hierarchy not be fine-grained enough. https://jira.springframework.org/browse/SPR-5125 https://jira.springframework.org/browse/SPR-7680  Also, these jiras explain how  https://jira.springsource.org/browse/SPR-7675   ---  **Affects:** 3.0.5  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2010-10-25T13:51:55Z","2019-01-11T14:35:21Z"
"","12336","Add QueryTimeoutException to the DataAccessException hierarchy [SPR-7680]","**[Abhishek Gupta](https://jira.spring.io/secure/ViewProfile.jspa?name=gupabhi)** opened **[SPR-7680](https://jira.spring.io/browse/SPR-7680?redirect=false)** and commented  The spring DataAccessException hierarchy is not fine-grained enough to classify query-timeouts. Given that this is a commonly occurring use-case across database types, it would be good to have this added to the hierarchy. Based on whether an SQLException was because of a queryTimeout we can take action to retry the query.  A QueryTimeoutException should ideally be a type of TransientDataAccessException  public class QueryTimeoutException extends TransientDataAccessException {}  For DB2: The SQL-ErrorCode and ErrorState for DB2 is SQLState: 57014  ; SQL ErrorCode: -952  Interestingly, the SQLState family ""57"" is today hard-coded to be translated to DataAccessResourceFailureException (per SQLStateSQLExceptionTranslator). This is at odds with the above example. This is also an example of why #12331 should be fixed.  For Sybase: The classification required for this is more complicated. The Sybase driver throws an SQLException with a generic state ""JZ006"" (IOException) but has a causal exception with specific state ""JZ0TO"" (TimeOut) if (""JZ006"".equals(e.getSQLState())) { SQLException nextSqlEx = e.getNextException();         // Read operation timed out.        if (nextSqlEx != null && ""JZ0TO"".equals(nextSqlEx.getSQLState())) {            return true;        }     } // classify as QueryTimeout.  The translation structure of spring today is not flexible enough to take this into account. In this case having something like Solution No.2 explained in #12331 might be helpful.  I cannot think of any out-of-the-box work-around for this, but I'll be happy to follow any which you might have.  Ref DB2: http://publib.boulder.ibm.com/infocenter/db2luw/v8/index.jsp?topic=/com.ibm.db2.udb.doc/core/rsql0900.htm http://publib.boulder.ibm.com/infocenter/iwedhelp/v6r0/index.jsp?topic=%2Fcom.ibm.db2e.doc%2Fsql11.html  Ref Sybase: http://manuals.sybase.com/onlinebooks/group-jcarc/jcg0520e/prjdbc/`@Generic__BookTextView`/9513  ---  **Affects:** 3.0.5  **Issue Links:** - #14012 java.sql.SQLTimeoutException not translated to org.springframework.dao.QueryTimeoutException - #12331 Allow more flexibility for SQLException translation based on state  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2010-10-25T13:48:49Z","2019-01-11T14:35:49Z"
"","12331","Allow more flexibility for SQLException translation based on state  [SPR-7675]","**[Abhishek Gupta](https://jira.spring.io/secure/ViewProfile.jspa?name=gupabhi)** opened **[SPR-7675](https://jira.spring.io/browse/SPR-7675?redirect=false)** and commented  This request has been  ---  **Issue Links:** - #12336 Add QueryTimeoutException to the DataAccessException hierarchy  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f6c7d99ba4c9ceec77426306a60b53b1a9f6f14c","closed","type: enhancement,","spring-projects-issues","2010-10-22T09:14:53Z","2019-01-11T14:36:08Z"
"","12093","org.springframework.web.HttpMediaTypeNotSupportedException: Content type 'text/xml;charset=UTF-8' not supported [SPR-7435]","**[Abhishek Dutta](https://jira.spring.io/secure/ViewProfile.jspa?name=abhishek.sapphire)** opened **[SPR-7435](https://jira.spring.io/browse/SPR-7435?redirect=false)** and commented  For Ajax post to rest based urls from FF3 getting an exception.  The charset appended to the content type is making this an invalid mediatype. Earlier was using 3.0.0.RELEASE version.  I saw a similar issue raised here : https://jira.springframework.org/browse/SPR-7135  But upgrading to 3.0.3.RELEASE version did not solve anything.The exception is  ``` org.springframework.web.HttpMediaTypeNotSupportedException: Content type 'text/xml;charset=UTF-8' not supported 	at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.readWithMessageConverters(HandlerMethodInvoker.java:636) 	at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.resolveRequestBody(HandlerMethodInvoker.java:596) 	at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.resolveHandlerArguments(HandlerMethodInvoker.java:345) 	at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.invokeHandlerMethod(HandlerMethodInvoker.java:170) 	at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.invokeHandlerMethod(AnnotationMethodHandlerAdapter.java:421) 	at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.handle(AnnotationMethodHandlerAdapter.java:409) ```    ---  **Affects:** 3.0.3  2 votes, 4 watchers","closed","in: web,","spring-projects-issues","2010-08-07T11:24:09Z","2019-01-11T14:07:05Z"
"","12157","Autowiring XML-defined bean into @Configuration class raises NPE [SPR-7499]","**[Abhijit Sarkar](https://jira.spring.io/secure/ViewProfile.jspa?name=asarkar)** opened **[SPR-7499](https://jira.spring.io/browse/SPR-7499?redirect=false)** and commented  I opened an issue #12150 which Chris Beams resolved with suggestion to reopen if needed. My problem still persists but I am unable to reopen #12150. Hence creating this new issue.  ---  **Affects:** 3.0.4  **Reference URL:** http://forum.springsource.org/search.php?searchid=7236418  **Attachments:** - [dashboard-war_20100829.zip](https://jira.spring.io/secure/attachment/17040/dashboard-war_20100829.zip) (_150.57 kB_) - [dashboard-war.zip](https://jira.spring.io/secure/attachment/17035/dashboard-war.zip) (_147.73 kB_) - [SPR-7492 - attachment_20100825.txt](https://jira.spring.io/secure/attachment/17028/SPR-7492+-+attachment_20100825.txt) (_5.80 kB_)  **Issue Links:** - #12150 NullPointerException during Autowiring a Bean defined in XML and referenced in `@Configuration` (_**""supersedes""**_)","closed","in: core,","spring-projects-issues","2010-08-25T17:58:21Z","2019-01-13T07:13:16Z"
"","12150","NullPointerException during Autowiring a Bean defined in XML and referenced in @Configuration [SPR-7492]","**[Abhijit Sarkar](https://jira.spring.io/secure/ViewProfile.jspa?name=asarkar)** opened **[SPR-7492](https://jira.spring.io/browse/SPR-7492?redirect=false)** and commented  I have configuration in XML files, `@Configuration` files and component scanning files. While deploying I am getting NullPointerException. The code works fine with XMLs only. The stacktrace and code could be found at the Spring Forum reference. I will be glad to attach more if necessary, just let me know. With all due respect, the JavaConfig part of the reference manual could be better. It illustrates only simple examples and there are no sample applications available.  ---  **Affects:** 3.0.4  **Reference URL:** http://forum.springsource.org/showthread.php?t=94206  **Attachments:** - [SPR-7492 - attachment_20100825.txt](https://jira.spring.io/secure/attachment/17027/SPR-7492+-+attachment_20100825.txt) (_5.80 kB_)  **Issue Links:** - #12157 Autowiring XML-defined bean into `@Configuration` class raises NPE (_**""is superseded by""**_)","closed","in: core,","spring-projects-issues","2010-08-24T19:44:03Z","2019-01-13T21:45:00Z"
"","12314","SqlParameter name lower case conversion in CallMetaDataContext causes error. [SPR-7658]","**[Abdurrahman Sahin](https://jira.spring.io/secure/ViewProfile.jspa?name=abdsahin)** opened **[SPR-7658](https://jira.spring.io/browse/SPR-7658?redirect=false)** and commented  There is a lower case conversion in the following function of CallMetaDataContext.  I think lower case conversion is unnecassary or should be revised. I have Oracle 10g+Tomcat 6 + JDK 6.0.12 environment Oracle database NLS_LANG is Turkish_Turkey Regional Settings is set to Turkey. by default oracle db keeps object names in uppercase.  a procedure parameter named INSTITUTION is converted to ""ınstıtutıon"" (please note there isn't dot ) by CallMetaDataContext, then procedure call with parameter name ""ınstıtutıon"" fails, since parameter named ""ınstıtutıon"" is not found.  The whole problem is caused by ignoring following Turkish case conversion rule.  The turkish letter ""I"" is represended in lower case as ""ı"" (without dot) The turkish letter ""İ"" (with dot above) is represended in lower case as ""i"" (with dot) The turkish letter ""I"" and ""İ"" are not the same. The turkish letter ""ı"" and ""i"" are not the same.  As a sequence I think case conversion should not be done for parameter matching.  public Map matchInParameterValuesWithCallParameters(Map inParameters)   ---  **Affects:** 2.5 final  **Reference URL:** http://forum.springsource.org/showthread.php?t=96819  **Attachments:** - [log.txt](https://jira.spring.io/secure/attachment/17199/log.txt) (_3.20 kB_) - [log2.txt](https://jira.spring.io/secure/attachment/17204/log2.txt) (_30.67 kB_) - [reg_settings1.JPG](https://jira.spring.io/secure/attachment/17200/reg_settings1.JPG) (_41.37 kB_)","closed","type: bug,","spring-projects-issues","2010-10-15T01:47:55Z","2012-06-19T03:39:37Z"
"","12253","Construct org.springframework.core.convert.TypeDescriptor programatically for collections [SPR-7597]","**[!!Use pwebb rather than philw](https://jira.spring.io/secure/ViewProfile.jspa?name=philw)** opened **[SPR-7597](https://jira.spring.io/browse/SPR-7597?redirect=false)** and commented  Although TypeDescriptor can determine collection element types from fields and methods as far as I can there is no way to do this programmatically.  Could adding a TypeDescriptor.forCollection method be considered?  ---  **Affects:** 3.0.4  **Attachments:** - [org.springframework.core.patch](https://jira.spring.io/secure/attachment/17143/org.springframework.core.patch) (_4.25 kB_)  **Issue Links:** - #12048 TypeDescriptor.forElementType() does not work for TypeDescriptor obtained via TypeDescriptor.valueOf()","closed","type: enhancement,","spring-projects-issues","2010-09-27T09:28:44Z","2019-01-11T15:11:49Z"
"","12252","Allow org.springframework.core.convert.TypeDescriptor to be subclassed [SPR-7596]","**[!!Use pwebb rather than philw](https://jira.spring.io/secure/ViewProfile.jspa?name=philw)** opened **[SPR-7596](https://jira.spring.io/browse/SPR-7596?redirect=false)** and commented  The new conversion services from Spring 3 could be more useful if the TypeDescriptor class could be subclassed easily to contain additional context for ConditionalGenericConverters to use.  The specific case that I am interested in is integrating JSF converters that are registered by name.  Eg:  conversionService.convert(someObject, TypeDescriptor.forObject(someObject), new JsfConverterTypeDescriptor(""someConverter""));  I am sure that there are other applications.  I think that TypeDescriptor is also used as a map key so the equals method would also need to change to be symmetric.  ---  **Affects:** 3.0.4  **Attachments:** - [org.springframework.core.patch](https://jira.spring.io/secure/attachment/17142/org.springframework.core.patch) (_5.60 kB_)  **Issue Links:** - #11084 Support convert context in ConversionService","closed","type: enhancement,","spring-projects-issues","2010-09-27T09:08:10Z","2019-01-11T15:12:05Z"
"","12222","ResourceHttpRequestHandlerTests.modified() fails on Windows due to millisecond precision [SPR-7565]","**[!!Use pwebb rather than philw](https://jira.spring.io/secure/ViewProfile.jspa?name=philw)** opened **[SPR-7565](https://jira.spring.io/browse/SPR-7565?redirect=false)** and commented  When building on Windows the ResourceHttpRequestHandlerTests.modified() test fails.  I believe that this may be due to the fact that .lastModified() on Windows returns a more precise value than on other operating systems.   ---  **Affects:** 3.0.4  **Attachments:** - [org.springframework.web.servlet.patch](https://jira.spring.io/secure/attachment/17112/org.springframework.web.servlet.patch) (_4.19 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7ad191c91220aa711659ae413b480242bc2c8dc2","closed","type: bug,","spring-projects-issues","2010-09-17T05:10:00Z","2012-06-19T03:43:19Z"