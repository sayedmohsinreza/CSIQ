"#","No","Issue Title","Issue Details","State","Labels","User name","created","Updated"
"","6466","ScriptFactoryPostProcessor looks for beans in local BeanFactory not in ApplicationContext [SPR-1768]","**[Zoran Regvart](https://jira.spring.io/secure/ViewProfile.jspa?name=zregvart)** opened **[SPR-1768](https://jira.spring.io/browse/SPR-1768?redirect=false)** and commented  Trying to set a property to a script (groovy script), that is not instrumented via ScriptFactoryPostProcessor yields NoSuchBeanDefinitionException -- because ScriptFactoryPostProcessor uses local BeanFactory (DefaultListableBeanFactory) which is not in any hierarchy with other BeanFactories in the application context.   ---  **Affects:** 2.0 M2  **Attachments:** - [ScriptFactoryPostProcessor.patch](https://jira.spring.io/secure/attachment/11483/ScriptFactoryPostProcessor.patch) (_2.63 kB_) - [ScriptFactoryPostProcessorTest.jar ](https://jira.spring.io/secure/attachment/11482/ScriptFactoryPostProcessorTest.jar+) (_2.83 kB_)","closed","in: core,","spring-projects-issues","2006-03-07T03:28:48Z","2012-06-19T03:53:59Z"
"","6220","Can not handle chinese characters in jsp files, but [SPR-1521]","**[Zhou Yang](https://jira.spring.io/secure/ViewProfile.jspa?name=javaidea)** opened **[SPR-1521](https://jira.spring.io/browse/SPR-1521?redirect=false)** and commented  In my application, most text resources are load from resource files and database, the chinese string from resource file and database is ok. But if I write some chinese string directly into the jsp file. It can not be displayed correctly.  I use jstl to load display resource, like : , which can be displayed correctly.  Those jsp files not loaded from a spring mvc controller are ok.  I found in the compiled java files under $tomcat_home/work, those jsp files not loaded by a controller is ok. but the chinese string in those jsp files loaded by controller are changed to some strange character.  So I wonder if there is some character settings can sovle this problem. Or maybe there is a bug when the spring mvc help to compile a jsp file.   ---  **Affects:** 1.2.5","closed","in: web,","spring-projects-issues","2005-12-08T00:19:59Z","2019-01-11T21:36:40Z"
"","6063","It's useful to support replacing class in batch that  value such as ${className} can be used  when configurating class property a bean. [SPR-1363]","**[zhantao li](https://jira.spring.io/secure/ViewProfile.jspa?name=lazet)** opened **[SPR-1363](https://jira.spring.io/browse/SPR-1363?redirect=false)** and commented                    		     	         ---  **Affects:** 1.2.3","closed","type: enhancement,","spring-projects-issues","2005-10-09T21:07:25Z","2012-06-19T02:28:13Z"
"","6755","Javadoc: InternalResourceView exposeHelpers should refer to renderMergedOutputModel not renderMergedTemplateModel [SPR-2062]","**[Zachary Lendon](https://jira.spring.io/secure/ViewProfile.jspa?name=zlendon)** opened **[SPR-2062](https://jira.spring.io/browse/SPR-2062?redirect=false)** and commented   --- No further details from [SPR-2062](https://jira.spring.io/browse/SPR-2062?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-05-26T02:16:28Z","2012-06-19T03:52:22Z"
"","5954","typo in javadoc for org.springframework.util.AntPathMatcher [SPR-1252]","**[Zachary Lendon](https://jira.spring.io/secure/ViewProfile.jspa?name=zlendon)** opened **[SPR-1252](https://jira.spring.io/browse/SPR-1252?redirect=false)** and commented  The example: com/**/servlet/bla.jsp - matches org/springframework/servlet/bla.jsp but also org/springframework/testing/servlet/bla.jsp and com/servlet/bla.jsp  should read:  org/**/servlet/bla.jsp - matches org/springframework/servlet/bla.jsp but also org/springframework/testing/servlet/bla.jsp and com/servlet/bla.jsp  I figure when the package naming convention changed from com.interface21 to org.springframework, this javadoc example was just missed...   ---  **Affects:** 1.2.3","closed","in: core,","spring-projects-issues","2005-08-25T07:17:40Z","2012-06-19T03:54:32Z"
"","6553","LocalSessionFactoryBean generates invalid schema create/update script [SPR-1859]","**[Yujin Kim](https://jira.spring.io/secure/ViewProfile.jspa?name=netexplode)** opened **[SPR-1859](https://jira.spring.io/browse/SPR-1859?redirect=false)** and commented  This was posted on the dev list but didn't receive any response so I am posting it here instead.  Hi  We noticed some inconsistent behavior between Spring's LSFB and Hibernate's hbm2ddl SchemaUpdate tool.  http://anonhibernate.labs.jboss.com/trunk/Hibernate3/src/org/ hibernate/tool/hbm2ddl/SchemaUpdate.java http://cvs.sourceforge.net/viewcvs.py/springframework/spring/src/org/ springframework/orm/hibernate3/LocalSessionFactoryBean.java? rev=1.29&view=auto  It appears LSFB is utilizing db dialect but not the (Hibernate's) DatabaseMetadata which causes the generate script to contain incompatible datatypes.  We are doing schema create/drop/update as a part of integration build, and when using hbm2ddl tool, it works fine on mysql/hsql/oracle/ms- sql/psql but if we use LSFB to do the same, it fails on some of the older databases.  It appears the DDL script generated by LSFB produces the script that is compatible only with the most updated version of the database, so for example oracle 9i, it generated type ""bit"" which didn't work on the version of oracle we are running here.  Similarly to mysql 4.1, it was trying to look up the database metadata from ""information_schema"" which appears to be a mysql 5.x thing.  While I  am not 100% sure whether it was due to the fact LSFB is not passing DatabaseMetadata for script generation, it is certain that LSFB is generating invalid scripts.  I think it's pretty clear how LSFB is processing it is slightly different from hbm2ddl tool.  In addition, I personally think it will also be useful if LSFB has an option to generate the DDL script to the specific (or default) location to allow more advanced tweaking etc by the dbas later on.  I would like to go back to use LSFB to handle the schema generation and hence would provide any support on this issue anyway I can.  Thanks  Yujin Kim Vivakos, Inc   ---  **Affects:** 2.0 M3","closed","","spring-projects-issues","2006-04-05T03:32:48Z","2019-01-11T22:01:46Z"
"","6144","Additional Document for Spring - commons-fileupload integration [SPR-1444]","**[Yujin Kim](https://jira.spring.io/secure/ViewProfile.jspa?name=netexplode)** opened **[SPR-1444](https://jira.spring.io/browse/SPR-1444?redirect=false)** and commented  This is not a bug.  Just attaching additional document you guys can add to spring reference guide. It took sometime for me to understand how it all works (with different property editors), and I thought it would be nice to have that in the main spring document so people don't have to jump around the hoops to pick this up.  Three Different Ways of using MultipartFile in the command  1. Using Multipart File directly  - Command bean contains MultipartFile property - no custom property editor required  * controller   protected void initBinder(   PortletRequest request,   PortletRequestDataBinder binder) throws Exception {   // don't have to do anything   super.initBinder(request, binder);   }  * command   public class FileUploadBean {   private MultipartFile file    public void setFile(MultipartFile file) {   this.file = file;   }    public MultipartFile getFile() {   return file;   }   }  2. Using ByteArrayMultipartFileEditor for retrieving uploaded file as byte[]  - Command bean contains byte[] property - ByteArrayMultipartFileEditor should be registered for byte[]  * controller   protected void initBinder(   PortletRequest request,   PortletRequestDataBinder binder) throws Exception {   binder.registerCustomEditor(   byte[].class,   new ByteArrayMultipartFileEditor());   super.initBinder(request, binder);   }  * commmand   public class FileUploadBean {   private byte[] file    public void setFile(byte[] file) {   this.file = file;   }    public byte[] getFile() {   return file;   }   }  3. Using StringMultipartFileEditor for  retrieving uploaded file(text based) as String  - Command bean contains String property - StringMultipartFileEditor should be registered for String  * controller   protected void initBinder(   PortletRequest request,   PortletRequestDataBinder binder) throws Exception {   binder.registerCustomEditor(   String.class,   new StringMultipartFileEditor());   super.initBinder(request, binder);   }  * command   public class FileUploadBean {   private String file    public void setFile(String file) {   this.file = file;   }    public String getFile() {   return file;   }   }    ---  **Affects:** 1.2.5","closed","type: enhancement,","spring-projects-issues","2005-11-05T07:50:46Z","2012-06-19T03:54:32Z"
"","6143","Error Message when binding fails due to type mismatch in Property Editor [SPR-1443]","**[Yujin Kim](https://jira.spring.io/secure/ViewProfile.jspa?name=netexplode)** opened **[SPR-1443](https://jira.spring.io/browse/SPR-1443?redirect=false)** and commented  I am 100% sure if this is only happening in portlet environment, but this is what I am running into. I am in the process of testing different PropertiesEditor to use with MultipartFile in portlet environment and when a PropertyType doesn't match the actual property type, the jsp page that contains the bind tag gets chopped off (instead of the usual error message) from where the bind tag is, and you get NullPointerException from applyPattern (see attached for full stacktrace).  In the attached log, you will see there's a bind error before the exception is thrown.  I am filing the issue here since I wasn't sure if this is a Portlet MVC only issue or if this is reproduciable in Servlet MVC as well.   Based on the stack trace, it appeared to be an issue on both ends which is why I am opening the issue here.  Thanks   ---  **Affects:** 1.2.5  **Attachments:** - [SPR-1443-ErrorLog.txt](https://jira.spring.io/secure/attachment/11245/SPR-1443-ErrorLog.txt) (_15.65 kB_)","closed","type: enhancement,","spring-projects-issues","2005-11-05T06:26:43Z","2012-06-19T03:53:55Z"
"","6049","[PATCH] Oracle Application Server ContextLoader [SPR-1349]","**[Yosimasu Lin](https://jira.spring.io/secure/ViewProfile.jspa?name=yosimasu)** opened **[SPR-1349](https://jira.spring.io/browse/SPR-1349?redirect=false)** and commented  I am watching about #5393. I made a patch for this issue. My patches work fine on the OracleAP 10g and tomcat platform  ---  **Affects:** 1.2.5  **Attachments:** - [PathMatchingResourcePatternResolver.java.patch](https://jira.spring.io/secure/attachment/11198/PathMatchingResourcePatternResolver.java.patch) (_1.05 kB_) - [UrlResource.java.patch](https://jira.spring.io/secure/attachment/11199/UrlResource.java.patch) (_1.52 kB_)","closed","type: enhancement,","spring-projects-issues","2005-10-04T20:18:44Z","2019-01-11T21:16:14Z"
"","6206","Perform SLSB invocation inside a jndi context [SPR-1507]","**[Xavier Dury](https://jira.spring.io/secure/ViewProfile.jspa?name=kalgon)** opened **[SPR-1507](https://jira.spring.io/browse/SPR-1507?redirect=false)** and commented  Hi,  in my company, we're using remote SLSB's to provide common functionality for a lot of applications. The problem is that those SLSB's are secured and only some pairs of principal/credentials may use those services (they call them 'technical users', this practice is somewhat debatable).  Actually spring performs the home lookup inside a correctly set jndi context but the invocations aren't, resulting in a SecurityException being thrown.  This has been spotted in several posts:  http://forum.springframework.org/archive/index.php/t-16213.html http://forum.springframework.org/archive/index.php/t-10955.html http://forum.springframework.org/archive/index.php/t-14285.html  So I've found a workaround for this: performing the invocation inside a jndicallback (inside the same jndi environment that was used at lookup time). I'm proposing my ExtendedRemoteStatelessSessionProxyFactoryBean as an example on how to do this but maybe this functionaly should be placed somewhere else (earlier) in the class hierarchy (like SimpleRemoteSlsbInvokerInterceptor so it could be made available for more subclasses).  What do you think?  Regards, Xavier  ---  **Attachments:** - [ExtendedRemoteStatelessSessionProxyFactoryBean.java](https://jira.spring.io/secure/attachment/11291/ExtendedRemoteStatelessSessionProxyFactoryBean.java) (_4.01 kB_)  **Issue Links:** - #9397 DefaultMessageListenerContainer failover to work with Weblogic JMS and security credentials  2 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2005-11-29T19:17:51Z","2019-01-11T21:30:57Z"
"","5891","ServletContextParameterFactoryBean [SPR-1188]","**[Xavier Dury](https://jira.spring.io/secure/ViewProfile.jspa?name=kalgon)** opened **[SPR-1188](https://jira.spring.io/browse/SPR-1188?redirect=false)** and commented  Hi,  in my company, deployment and development tasks are done by different teams. That is: once the development team has released a war, they may not modify it through acceptance and production.  But sometimes, there are some application parameters that need to be changed between environments (acceptance and production). Those changes must be realized by the deployment team which may only modify the deployment descriptors, not even properties files (as they weren't involved in the development, it's standard practice to put variable parameters in the web.xml for example).  So I've made a ServletContextParameterFactoryBean similar to SevletContextAttributeFactoryBean which can fetch init parameters from the web.xml and convert them (if needed) with a propertyeditor.  I thought maybe other people could need this (especially in a rigid company like mine :-) so I'm submitting it.  Xavier   ---  **Attachments:** - [ServletContextParameterFactoryBean.java](https://jira.spring.io/secure/attachment/10990/ServletContextParameterFactoryBean.java) (_2.82 kB_)","closed","type: enhancement,","spring-projects-issues","2005-07-28T20:46:48Z","2005-08-05T00:06:39Z"
"","6495","org.springframework.util.endsWithIgnoreCase() produce incorrect answer! [SPR-1801]","**[wrongch](https://jira.spring.io/secure/ViewProfile.jspa?name=wrongch)** opened **[SPR-1801](https://jira.spring.io/browse/SPR-1801?redirect=false)** and commented  In this method the expression: String lcStr = str.substring(suffix.length()).toLowerCase(); should be String lcStr=str.substring(str.length()-suffix.length()).toLowerCase();   --- No further details from [SPR-1801](https://jira.spring.io/browse/SPR-1801?redirect=false)","closed","in: core,","spring-projects-issues","2006-03-19T11:53:11Z","2012-06-19T03:54:06Z"
"","6791","Due to an error in spring-lang.xsd, we cannot define more than one properties in  beans. [SPR-2098]","**[Woonsan Ko](https://jira.spring.io/secure/ViewProfile.jspa?name=woon_san)** opened **[SPR-2098](https://jira.spring.io/browse/SPR-2098?redirect=false)** and commented  In spring-lang.xsd file (src: spring/src/org/springframework/scripting/config/spring-lang.xsd), there is a wrong definition like the following:    If the maxOccurs attribute is ommited, then the default value of maxOccurs is 1. (Refer the section 2.2.1 in the page, http://www.w3.org/TR/xmlschema-0/).  Therefore, if I define two or more properties in the  bean, the system throws errors like the following:  Caught: org.springframework.beans.factory.BeanDefinitionStoreException: Line 15 in XML document from file [D:\test\spring\testcontext\context.xml] is invalid; nested exception is org.xml.sax.SAXParseException: cvc-complex-type.2.4.d: Invalid content was found starting with element 'lang:property'. No child element is expected at this point. at test.run(test.groovy:10) at test.main(test.groovy)  My sample context file:       Therefore, the spring-lang.xsd file must be modified like this:    See the patch file attached.   ---  **Affects:** 2.0 M5  **Attachments:** - [patch-SPR-2098.txt](https://jira.spring.io/secure/attachment/11668/patch-SPR-2098.txt) (_494 bytes_)","closed","in: core,","spring-projects-issues","2006-06-04T22:46:38Z","2012-06-19T03:52:47Z"
"","6238","Spring 1.2.6 version of DataSourceUtils.suspend() method causes an IllegalArgumentException to be thrown when using inner transaction with PROPOGATION_REQUIRES_NEW. [SPR-1539]","**[William Parker](https://jira.spring.io/secure/ViewProfile.jspa?name=willparker)** opened **[SPR-1539](https://jira.spring.io/browse/SPR-1539?redirect=false)** and commented  DataSourceUtils.suspend() has been changed in version 1.2.6 to release a connection on suspend if the application doesn't keep a handle to it anymore. If working with more than one connection in a transaction this can cause problems with the TransactionSynchronizationManager in the AbstractPlatformTransactionManager.suspend(Object) method.  If you have two transactions running, one within the other with a propogation of ""PROPOGATION_REQUIRES_NEW"", then when the inner transaction runs, the connections in the suspendedSynchronizations list within the AbstractPlatformTransactionManager.suspend(Object) are released on suspension in DataSourceUtils.suspend(), (since 1.2.6). If the inner transaction is running within a loop then on the second run of the loop, the AbstractPlatformTransactionManager.suspend(Object) will try to release the connections again using DataSourceUtils.suspend(), resulting in  IllegalArgumentException : Active Connection is required.  The following pseudo-code below can reproduce the exception.          // Set up two Data Sources to two different databases....                  LazyConnectionDataSourceProxy dataSourceA = ................         ..............         ...............              LazyConnectionDataSourceProxy dataSourceB = ................         ..............         ...............          	         // Set up a Jdbc template for each Datasource....         final JdbcTemplate jdbcTemplateA = new JdbcTemplate(dataSourceA);         final JdbcTemplate jdbcTemplateB = new JdbcTemplate(dataSourceB);                       // Set up Transaction Template on dataSourceA with PROPAGATION_REQUIRES_NEW....              DataSourceTransactionManager dstm = new DataSourceTransactionManager(dataSourceA);         ptm.afterPropertiesSet();	                 final TransactionTemplate transactionTemplate = new TransactionTemplate();         transactionTemplate.setTransactionManager(dstm);         transactionTemplate.setPropagationBehavior( TransactionTemplate.PROPAGATION_REQUIRES_NEW );         transactionTemplate.afterPropertiesSet();                  // Execeute outer transaction.........         transactionTemplate.execute( new TransactionCallbackWithoutResult() {     		public void doInTransactionWithoutResult(TransactionStatus status) {                                                Execute a query using both connections.........                              	jdbcTemplateA.execute( ""select top 1 * from TableA"");                                             jdbcTemplateB.execute( ""select top 1 * from TableB"" );                                                // Loop round inner transaction - exception is thrown in second loop............                	                     for (int j=0; j < 2; j++) {         		                		         transactionTemplate.execute( new TransactionCallbackWithoutResult() {     					public void doInTransactionWithoutResult(TransactionStatus status) {}     				});                	}     	    }		         } );    ---  **Affects:** 1.2.6","closed","in: core,","spring-projects-issues","2005-12-14T21:23:01Z","2012-06-19T03:54:40Z"
"","6634","Generic DAO pattern with Java 5 and JPA [SPR-1941]","**[Wesslan](https://jira.spring.io/secure/ViewProfile.jspa?name=wesslan)** opened **[SPR-1941](https://jira.spring.io/browse/SPR-1941?redirect=false)** and commented  I've seen threads in the Spring forum touch the subject of the generic DAO pattern with Java 5 and Hibernate but I haven't seen anything regarding this with JPA. It would be really nice if this would be included in some future release of Spring so that everybody does not implement their home brewed (good or bad) solutions... :-)   ---  3 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2006-04-20T02:06:12Z","2012-06-18T05:27:21Z"
"","6556","Advice is applied to inner beans. Should it really? [SPR-1862]","**[Wesslan](https://jira.spring.io/secure/ViewProfile.jspa?name=wesslan)** opened **[SPR-1862](https://jira.spring.io/browse/SPR-1862?redirect=false)** and commented  I have an advice that is called twice but I (of course) only would like to have it called once. The problem is that it's called when the proxy is called too.  See http://forum.springframework.org/showthread.php?t=23843 for info about configuration.   ---  **Affects:** 2.0 M3","closed","in: core,","spring-projects-issues","2006-04-05T22:28:21Z","2019-01-12T16:29:23Z"
"","5937","FactoryBean class loader issue on JBoss 4.0.2 [SPR-1235]","**[wayne wang](https://jira.spring.io/secure/ViewProfile.jspa?name=waynewang811)** opened **[SPR-1235](https://jira.spring.io/browse/SPR-1235?redirect=false)** and commented  In JBoss4.0.2RC1, our spring app works well. After switching to JBoss4.0.2, there is an exception.  The following is our configuration:  \ \ 		\\\      	     	     	             	        User.hbm.xml     	        Role.hbm.xml     	             	          	     		     			net.sf.hibernate.dialect.MySQLDialect     			3     			false     		     	  \ \ \\\ \  The exception is as follows:  Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'transactionManager' defined in class path resource [portal-hibernate.xml]: Error setting property values; nested exception is org.springframework.beans.PropertyAccessExceptionsException: PropertyAccessExceptionsException (1 errors); nested propertyAccessExceptions are: [org.springframework.beans.TypeMismatchException: Failed to convert property value of type [org.springframework.orm.hibernate.LocalSessionFactoryBean] to required type [net.sf.hibernate.SessionFactory] for property 'sessionFactory'] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:879) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:688) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:325) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:260) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:221) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:145) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:291) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:317) at org.springframework.context.support.ClassPathXmlApplicationContext.(ClassPathXmlApplicationContext.java:80) at org.springframework.context.support.ClassPathXmlApplicationContext.(ClassPathXmlApplicationContext.java:65) at org.springframework.context.support.ClassPathXmlApplicationContext.(ClassPathXmlApplicationContext.java:56) at com.viador.portal.service.ServiceManager.(ServiceManager.java:40) ... 37 more Caused by: PropertyAccessExceptionsException (1 errors) at org.springframework.beans.BeanWrapperImpl.setPropertyValues(BeanWrapperImpl.java:870) at org.springframework.beans.BeanWrapperImpl.setPropertyValues(BeanWrapperImpl.java:842) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:870) ... 48 more  I suspect it's caused by classloader and package confliction. Could you please help me on this issue?   ---  **Affects:** 1.1.5","closed","","spring-projects-issues","2005-08-17T14:41:01Z","2019-01-11T19:20:11Z"
"","6178","Support for Resource Bundles in UTF-8 [SPR-1479]","**[Vladimir Shor](https://jira.spring.io/secure/ViewProfile.jspa?name=vovencij)** opened **[SPR-1479](https://jira.spring.io/browse/SPR-1479?redirect=false)** and commented  It is now impossible to specify the encoding for message bundles. The fact, that bundle can't be in UTF restricts basically to use a DataBase for messages.   --- No further details from [SPR-1479](https://jira.spring.io/browse/SPR-1479?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-11-17T20:50:17Z","2012-06-19T03:54:05Z"
"","6645","UpdatableSqlQuery Error [SPR-1952]","**[Vladimir Gendler](https://jira.spring.io/secure/ViewProfile.jspa?name=vgendler)** opened **[SPR-1952](https://jira.spring.io/browse/SPR-1952?redirect=false)** and commented  I  was running the example from the book ""Professional Java Development with the Spring Framework"" byRod Johnsonet al. from Chapter 5: DAO Support and JDBC Framework (Using the RDBMS Operation Classes): RdbmsOperationsTests.java (method public void testUpdateBookigs() ) which calls package org.springframework.prospring.ticket.db;  import org.springframework.jdbc.core.SqlParameter; import org.springframework.jdbc.object.UpdatableSqlQuery;  import javax.sql.DataSource; import java.sql.Types; import java.sql.ResultSet; import java.sql.SQLException; import java.math.BigDecimal; import java.util.Map;  public class UpdateBookings extends UpdatableSqlQuery { public UpdateBookings(DataSource dataSource, String sql) { super(dataSource, sql); declareParameter(new SqlParameter(""date_made"", Types.DATE)); compile(); }      public Object updateRow(ResultSet rs, int rowNum, Map context)             throws SQLException {         BigDecimal price = rs.getBigDecimal(""price"");         price = price.add((BigDecimal) context.get(""increase""));         rs.updateBigDecimal(""price"", price);         return null;     }  }  It does nothing (not updating anything) for Oracle DB (v.10g rel.2) and terminates without error  For MySQL (v 5.0.18) it terminates with error:  Testcase: testUpdateBookigs took 3.295 sec Caused an ERROR PreparedStatementCallback; uncategorized SQLException for SQL [select id, price from Booking where date_made > ?]; SQL state [S1000]; error code [0]; Unknown type '246 in column 1 of 2 in binary-encoded result set.; nested exception is java.sql.SQLException: Unknown type '246 in column 1 of 2 in binary-encoded result set. org.springframework.jdbc.UncategorizedSQLException: PreparedStatementCallback; uncategorized SQLException for SQL [select id, price from Booking where date_made > ?]; SQL state [S1000]; error code [0]; Unknown type '246 in column 1 of 2 in binary-encoded result set.; nested exception is java.sql.SQLException: Unknown type '246 in column 1 of 2 in binary-encoded result set. java.sql.SQLException: Unknown type '246 in column 1 of 2 in binary-encoded result set. at com.mysql.jdbc.MysqlIO.unpackNativeEncodedColumn(MysqlIO.java:4150) at com.mysql.jdbc.MysqlIO.unpackBinaryResultSetRow(MysqlIO.java:3714) at com.mysql.jdbc.MysqlIO.nextRow(MysqlIO.java:1320) at com.mysql.jdbc.MysqlIO.readSingleRowSet(MysqlIO.java:2261) at com.mysql.jdbc.MysqlIO.getResultSet(MysqlIO.java:423) at com.mysql.jdbc.MysqlIO.readResultsForQueryOrUpdate(MysqlIO.java:1962) at com.mysql.jdbc.MysqlIO.readAllResults(MysqlIO.java:1385) at com.mysql.jdbc.ServerPreparedStatement.serverExecute(ServerPreparedStatement.java:1142) at com.mysql.jdbc.ServerPreparedStatement.executeInternal(ServerPreparedStatement.java:676) at com.mysql.jdbc.PreparedStatement.executeQuery(PreparedStatement.java:1030) at org.springframework.jdbc.core.JdbcTemplate$1.doInPreparedStatement(JdbcTemplate.java:535) at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:476) at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:528) at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:553) at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:574) at org.springframework.jdbc.object.SqlQuery.execute(SqlQuery.java:114) at org.springframework.prospring.ticket.db.RdbmsOperationsTests.testUpdateBookigs(Unknown Source)   ---  **Affects:** 1.2.7","closed","in: data,","spring-projects-issues","2006-04-24T05:55:20Z","2019-01-11T22:06:33Z"
"","6346","Proposal for an unique JaxRpcPortProxyFactoryBean based on reflection [SPR-1649]","**[Vinicius Carvalho](https://jira.spring.io/secure/ViewProfile.jspa?name=viniciuscarvalho)** opened **[SPR-1649](https://jira.spring.io/browse/SPR-1649?redirect=false)** and commented  Hello this is a proposal for Spring have an unique JaxRpcPortProxyFactoryBean. As found on the docs we need to implement our own version of it every time we have a complex bean mapping. My proposal is to have an unique reflection based class that would handle this for us, by adding only two extra properties: A map of the class name and the Qname used on the WSDL and a namespace of the beans.  Here's one example of the class:  public class ReflectionJaxPortProxyFactoryBean extends JaxRpcPortProxyFactoryBean { private Map registredClasses; private String namespace;      @Override     protected void postProcessJaxRpcService(Service service) {     	TypeMappingRegistry tmr = service.getTypeMappingRegistry();     	TypeMapping tm = tmr.createTypeMapping();     	Set keySet = registredClasses.keySet();     	Iterator it = keySet.iterator();     	while(it.hasNext()){     		String name = (String) it.next();     		String className = (String) registredClasses.get(name);     		QName qName = new QName(namespace,name);     		Class clazz;     		try {     			clazz = Class.forName(className);     		} catch (ClassNotFoundException e) {     			throw new RuntimeException(""Class not found: "" + className,e);     		}     		tm.register(clazz,qName,new BeanSerializerFactory(clazz,qName),new BeanDeserializerFactory(clazz,qName));     		     	}     	tmr.register(""http://schemas.xmlsoap.org/soap/encoding/"",tm);     }     public String getNamespace() {     	return namespace;     }          public void setNamespace(String namespace) {     	this.namespace = namespace;     }          public Map getRegistredClasses() {     	return registredClasses;     }          public void setRegistredClasses(Map registredClasses) {     	this.registredClasses = registredClasses;     }  Using it would be would just require the user to pass the classnames and the namespace: \ \ \net.vcc.spring.remote.service.UserService\ \ \ \http://localhost:8080/springremoting/services/UserServiceImpl?wsdl\ \ \ \http://impl.service.remote.spring.vcc.net\ \ \ \org.apache.axis.client.ServiceFactory\ \ \ \UserServiceImplService\ \ \ \UserServiceImpl\ \ \ \http://beans.remote.spring.vcc.net\ \ \ \ \ \User\ \net.vcc.spring.remote.beans.User\ \ \ \Car\ \net.vcc.spring.remote.beans.Car\ \			 \ \ \   ---  **Affects:** 1.2.6","closed","type: enhancement,","spring-projects-issues","2006-01-30T00:54:28Z","2012-06-19T09:37:29Z"
"","6854","Proxy for SimpleURLHandlerMapping does not handle mappings properly [SPR-2163]","**[Vinay A. Jain](https://jira.spring.io/secure/ViewProfile.jspa?name=vinay)** opened **[SPR-2163](https://jira.spring.io/browse/SPR-2163?redirect=false)** and commented  Hi,  I am trying to use DebugInterceptor for the whole of my web application.  To achieve that I have created proxies using DefaultAdvisorAutoProxyCreator and am applying a DefaultPointcutAdvisor with pointcut as TruePointcut and advice as DebugInterceptor.  Here is how my Spring configuration file looks like:  ---  \ \ \ \ \ \           	     		     		     	     	     		     		     	                           \  ---  The application deploys with no errors and application works well without the proxy creator and advisor in place.  It is when I introduce the above configuration, the handler cannot find mapping for /login.htm (the start page for my application) or for that matter any mapping.  Following is an excerpt of the log I see: ... [2006-06-20 10:03:47,445] DEBUG:[org.springframework.web.servlet.DispatcherServlet]Testing handler map [org.springframework.web.servlet.handler.SimpleUrlHandlerMapping@19ad677] in DispatcherServlet with name 'edison' [2006-06-20 10:03:47,445] DEBUG:[org.springframework.web.servlet.handler.SimpleUrlHandlerMapping$$EnhancerByCGLIB$$8e8902d3]Looking up handler for [/login.htm] [2006-06-20 10:03:47,445] DEBUG:[org.springframework.web.servlet.DispatcherServlet]No handler found in getLastModified [2006-06-20 10:03:47,445] DEBUG:[org.springframework.web.servlet.DispatcherServlet]DispatcherServlet with name 'edison' received request for [/login.htm] [2006-06-20 10:03:47,445] DEBUG:[org.springframework.aop.interceptor.DebugInterceptor]Entering invocation: method 'toString', arguments []; target is of class [org.spring framework.web.servlet.handler.SimpleUrlHandlerMapping]; count=73 [2006-06-20 10:03:47,455] DEBUG:[org.springframework.aop.interceptor.DebugInterceptor]Exiting invocation: method 'toString', arguments []; target is of class [org.springf ramework.web.servlet.handler.SimpleUrlHandlerMapping]; count=73 [2006-06-20 10:03:47,455] DEBUG:[org.springframework.web.servlet.DispatcherServlet]Testing handler map [org.springframework.web.servlet.handler.SimpleUrlHandlerMapping@19 ad677] in DispatcherServlet with name 'edison' [2006-06-20 10:03:47,455] DEBUG:[org.springframework.web.servlet.handler.SimpleUrlHandlerMapping$$EnhancerByCGLIB$$8e8902d3]Looking up handler for [/login.htm] [2006-06-20 10:03:47,455] WARN:[org.springframework.web.servlet.PageNotFound]No mapping for [/login.htm] in DispatcherServlet with name 'edison' [2006-06-20 10:03:47,455] DEBUG:[org.springframework.web.servlet.DispatcherServlet]Successfully completed request ...  ---  FYI: 'edison' is the servlet name for Spring's dispatcher servlet.  I have tried replacing DefaultAdvisorAutoProxyCreator with BeanNameAutoProxyCreator and the same issue arises when I introduce the ""**Controller"" beans in the list of possible beanNames.  In one of the postings at another forum, a suggestion was made to include org.springframework.web.** in the list of classes to be advised when including the controller because the target is in Spring framework's web package, so I used RegexpMethodPointcutAdvisor to define the application package names and include Spring's web package.  The configuration then included: \ \ \ \ \ \ \com.hmco.\*\ \org.springframework.web.*\ \ \ \  but that did not resolve the issue either.  I have also tried upgrading the spring.jar from version 1.2.6 to version 1.2.8 and had the same result.  Either I am not following the some of the recommended steps or there seems to be a bug in the SimpleUrlHandlerMapping proxy creation.  Please advise.  - Vinay   FYI:  I have posted this issue on Spring AOP forum and no has responded to it (http://forum.springframework.org/showthread.php?t=25789)  ---  **Affects:** 1.2.6","closed","in: core,","spring-projects-issues","2006-06-20T02:58:08Z","2019-01-13T22:47:32Z"
"","5964","ReloadableResourceBundleMessageSource.getMergedProperties throws NPE [SPR-1262]","**[Victor Kolosov](https://jira.spring.io/secure/ViewProfile.jspa?name=vkolosov)** opened **[SPR-1262](https://jira.spring.io/browse/SPR-1262?redirect=false)** and commented  I had a messageSource configured like this:                                             /WEB-INF/classes/validation                                                                                                           messages                         filters                                                                            true                                                             300                this was in my context as well but without any additional AOP: \ \ \  and it all worked fine untill I put in this Advisor:                                                                                                                                                                                                                                                                here is my Advice:  public class EmailNotificationThrowsAdvice implements ThrowsAdvice { private final Log logger = LogFactory.getLog(getClass()); protected JavaMailSender mailSender; protected SimpleMailMessage defaultMailMessage;      public void setMailSender(JavaMailSender mailSender) {         this.mailSender = mailSender;     }          public void setDefaultMailMessage(SimpleMailMessage defaultMailMessage) {         this.defaultMailMessage = defaultMailMessage;     }          public void afterThrowing(Method m,Object[] args,Object target, Exception ex){         SimpleMailMessage msg = new SimpleMailMessage(defaultMailMessage);  ""+ex.getMessage()); msg.setText(""Method: '""+m+""'\n Has thrown an exception with message: ""+ex.getMessage()); try { mailSender.send(msg); } catch (Exception e) { logger.error(""Sending bug mail has failed: ""+e.getMessage()); } } }  I have a calss ACTest that extends TestCase with this method:      public void testRB() {         MessageSource ms = (MessageSource) ac.getBean(""messageSource"");         System.out.println(""ms.getMessage: ""+ms.getMessage(""filter.displayname.status"", null, null));     }  Now when I just run it I get this error      [junit] Testcase: testRB(com.mycompany.ACTest):    Caused an ERROR     [junit] null     [junit] java.lang.NullPointerException     [junit]     at org.springframework.context.support.ReloadableResourceBundleMessageSource.getMergedProperties(ReloadableResourceBundleMessageSource.java:295)     [junit]     at org.springframework.context.support.ReloadableResourceBundleMessageSource.resolveCodeWithoutArguments(ReloadableResourceBundleMessageSource.java:233)     [junit]     at org.springframework.context.support.AbstractMessageSource.getMessageInternal(AbstractMessageSource.java:207)     [junit]     at org.springframework.context.support.AbstractMessageSource.getMessage(AbstractMessageSource.java:147)     [junit]     at com.poindexter.ACTest.testRB(ACTest.java:36)     [junit]     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     [junit]     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)     [junit]     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)  It appears to be failing on 'ReloadableResourceBundleMessageSource.resolveCodeWithoutArguments' but as soon as I remove my advice declaration it works again.  It should be easily replicatable on your end.   ---  **Affects:** 1.2.3, 1.2.4","closed","in: core,","spring-projects-issues","2005-08-29T05:57:21Z","2019-01-12T16:40:51Z"
"","6536","SelectTag does not work with Integer arrays in formBackingObject [SPR-1842]","**[Venkat Sonnathi](https://jira.spring.io/secure/ViewProfile.jspa?name=vsonnathi)** opened **[SPR-1842](https://jira.spring.io/browse/SPR-1842?redirect=false)** and commented  Select Tag when in mutiple mode does not highlight the values in the select box if the formBackingObject has an Integer array to store the corresponding values.  I change the Integer[] to formBackingObject to List\ and it started working.  Regards, --Venkat.   ---  **Affects:** 2.0 M3","closed","type: bug,","spring-projects-issues","2006-03-30T13:39:57Z","2012-06-19T03:53:57Z"
"","6524","SelectTag throws NullPointerException if the formBackingObject has a null value corresponding to this selectTag [SPR-1830]","**[Venkat Sonnathi](https://jira.spring.io/secure/ViewProfile.jspa?name=vsonnathi)** opened **[SPR-1830](https://jira.spring.io/browse/SPR-1830?redirect=false)** and commented  Whenever the value corresponding to the SelectTag has a null value (This happens when the form is generated for the first time) it throws a NullPointerException:  Command Object { private String age;  getAge() setAge(String age); }  JSP code:      Exception Stack Trace. java.lang.NullPointerException org.springframework.web.servlet.tags.form.SelectTag.forceMultiple(SelectTag.java:227) org.springframework.web.servlet.tags.form.SelectTag.isMultiple(SelectTag.java:218) org.springframework.web.servlet.tags.form.SelectTag.writeTagContent(SelectTag.java:175) org.springframework.web.servlet.tags.form.AbstractFormTag.doStartTagInternal(AbstractFormTag.java:81) org.springframework.web.servlet.tags.RequestContextAwareTag.doStartTag(RequestContextAwareTag.java:68) org.apache.jsp.personalInfo_jsp._jspx_meth_form_select_0(org.apache.jsp.personalInfo_jsp:794) org.apache.jsp.personalInfo_jsp._jspService(org.apache.jsp.personalInfo_jsp:225) org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:97) javax.servlet.http.HttpServlet.service(HttpServlet.java:802) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:322) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:291) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:241) javax.servlet.http.HttpServlet.service(HttpServlet.java:802) org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:111) org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:250) org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1051) org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:817) org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:727) org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:396) org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:350) javax.servlet.http.HttpServlet.service(HttpServlet.java:689) javax.servlet.http.HttpServlet.service(HttpServlet.java:802)   ---  **Affects:** 2.0 M3","closed","type: bug,","spring-projects-issues","2006-03-28T14:04:42Z","2012-06-19T03:54:28Z"
"","6849","Undeploying OC4J EAR Causes Exceptions in Spring JMX Deregistration [SPR-2158]","**[Vaughn Vernon](https://jira.spring.io/secure/ViewProfile.jspa?name=vvernon)** opened **[SPR-2158](https://jira.spring.io/browse/SPR-2158?redirect=false)** and commented  I am getting a Spring 1.2.1 exception when I undeploy my .ear in OC4J. Here's what happens:  1. When I undeploy, OC4J deregisters all my MBean instances that were configured and registered at startup via Spring.  2. Our ContextLoaderListener receives a contextDestroyed() event (which we do not override). Inside the default destroyed handler a series of bean destroys occur, including ones to destroy/deregister our MBeans.  3. Since our MBeans have already been deregistered by OC4J, Spring can't find the MBeans when it requests them from the MBeanServer. Spring throws an InstanceNotFoundException for each MBean we originally created via Spring.  Note, this only happens when using undeploy. A pure OC4J shutdown works fine (perhaps because OC4J does not itself deregister MBeans in shutdown).   ---  **Affects:** 1.2.1","closed","in: core,","spring-projects-issues","2006-06-19T07:28:57Z","2012-06-19T03:52:49Z"
"","6547","Problem extending CommonsMultipartResolver [SPR-1853]","**[Urs Keller](https://jira.spring.io/secure/ViewProfile.jspa?name=ukeller)** opened **[SPR-1853](https://jira.spring.io/browse/SPR-1853?redirect=false)** and commented  org.springframework.web.multipart.commons.CommonsMultipartResolver:  From line 188: if (!enc.equals(this.defaultEncoding)) { fileUpload = new DiskFileUpload(); .... should be: if (!enc.equals(this.defaultEncoding)) { fileUpload = newFileUpload(); .... This way the newFileUpload() method can be overwritten in a subclass returning a subtype of DiskFileUpload. The constructor of CommonsMultipartResolver uses the newFileUpload method with this idea.  -Urs   ---  **Affects:** 1.2.7","closed","type: bug,","spring-projects-issues","2006-04-04T03:13:55Z","2012-06-19T03:54:32Z"
"","6345","Use of JSTL ExpressionEvaluator could be more efficient [SPR-1648]","**[Ulrik Sandberg](https://jira.spring.io/secure/ViewProfile.jspa?name=ulsa)** opened **[SPR-1648](https://jira.spring.io/browse/SPR-1648?redirect=false)** and commented  Spring tags combined with Tiles tags trigger slow page loading on some web servers. The reason is that Spring uses javax.servlet.jsp.el.ExpressionEvaluator in a way that some web servers implement less efficiently. These are the two ways ExpressionEvaluator can be used:  1. Parse once, evaluate many times  Expression ex = evaluator.parseExpression(...)  // Save ex and use many times ex.evaluate(...)  2. Parse and evaluate every time  evaluator.evaluate(...)  Spring uses the latter, which in some web servers is implemented as successive calls to parse and evaluate. If the web server has optimized for the first case, the latter case may suffer. The result is that pages containing for example tiles:insert on a JSP with spring:bind load really slow.  The problem is evident on for example Trifork T4 4.1.12 and earlier. It is not a problem on Tomcat, which seems to implement this in an efficient way. However, it may be worth looking at this to see if it could be implemented more efficiently in Spring.  Consider a textfield ""tile"" with Spring tags:           \ \\:\ \ \ \ \ \  The problem is triggered (in Trifork 4.1.12 and earlier, not in Tomcat) with this JSP, if the tiles:insert part is uncommented:      \Search:\ \ 	\ \ \ 	\ 		\ 			\\:\ 			\ 				\ 			\ 		\ 	\ 		\ 			\ 				\ 			\ 		\ 	\ \   ---  **Affects:** 1.2.6, 2.0 M1","closed","type: enhancement,","spring-projects-issues","2006-01-30T00:38:41Z","2012-06-19T03:54:05Z"
"","6450","Would be nice to have a ConfirmableFormController [SPR-1753]","**[Tyler Nelson](https://jira.spring.io/secure/ViewProfile.jspa?name=mediaslave)** opened **[SPR-1753](https://jira.spring.io/browse/SPR-1753?redirect=false)** and commented  Would be nice to have a ConfirmableFormController much like the CancellableFormController that ships with Spring. Pretty much all of our web requests have a confirmation component to them. I think this would be a nice value add for other applications.  I have created the class and used CancellableFormController as a basis, and the logic is pretty much the same so its already done.   ---  **Attachments:** - [ConfirmableFormController.zip](https://jira.spring.io/secure/attachment/11476/ConfirmableFormController.zip) (_3.92 kB_)","closed","type: enhancement,","spring-projects-issues","2006-03-02T10:21:40Z","2012-06-19T09:37:27Z"
"","6006","Have the ability in  JasperReportsHtmlView  to inject a different JRAbstractExporter [SPR-1305]","**[Tyler Nelson](https://jira.spring.io/secure/ViewProfile.jspa?name=mediaslave)** opened **[SPR-1305](https://jira.spring.io/browse/SPR-1305?redirect=false)** and commented  It would be nice to have the ability in  JasperReportsHtmlView (or and JasperReportViews)  to inject a different JRAbstractExporter.  Currently one needs to create a new JasperReportsView  to use a different JRAbstractExporter.    --- No further details from [SPR-1305](https://jira.spring.io/browse/SPR-1305?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-09-16T05:37:13Z","2012-06-19T03:53:56Z"
"","6001","Add Feature to not allow duplicate mappingLocations  in LocalSessionFactory  [SPR-1300]","**[Tyler Nelson](https://jira.spring.io/secure/ViewProfile.jspa?name=mediaslave)** opened **[SPR-1300](https://jira.spring.io/browse/SPR-1300?redirect=false)** and commented  In LocalSessionFactory mappingLocations can have duplicate hbm.xml files as resource[].  However this  can cause org.hibernate.MappingException: duplicate import when LocalSessionFactory loads the same hbm.xml multiple times.  This can be handled by putting a quick lookup check before a new mappingLocation is added or by saving mappingLocations as a Set of Resources.  This can happen when the hbm.xml files exist in both src and classes in a development enviorment. So it isnt an issue with prod. And there is dev workaround(By manuall deleting the extra files or fixing the classpath ). Also one would could say that the build process classpath should address this problem. But it would still be a nice to have.   ---  **Affects:** 1.2.4  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2005-09-14T05:04:32Z","2006-04-11T21:16:04Z"
"","5950","ClassUtils does not support primitive arrays [SPR-1248]","**[Tyler Nelson](https://jira.spring.io/secure/ViewProfile.jspa?name=mediaslave)** opened **[SPR-1248](https://jira.spring.io/browse/SPR-1248?redirect=false)** and commented  ClassUtils does  handle primitives like byte.class, boolean.class, etc , however it does not seem to handle primitive arrays like byte[].class, boolean[].class etc. Since it does not handle primitive arrays then you cannot inject primitvie arrays in the application-context.  Below is link to the thread that decsribes this problem  http://forum.springframework.org/viewtopic.php?t=8200   ---  **Affects:** 1.2.3","closed","in: core,","spring-projects-issues","2005-08-23T05:08:05Z","2012-06-19T03:54:07Z"
"","6273","ClassUtils.forName(String) uses current thread's context classloader without null-check [SPR-1576]","**[Torsten Juergeleit](https://jira.spring.io/secure/ViewProfile.jspa?name=torsten)** opened **[SPR-1576](https://jira.spring.io/browse/SPR-1576?redirect=false)** and commented  In ""ClassUtils.forName(String)"" the current thread's context classloader is used without null-check. This doesn't work in environments with custom threading / classloading schema e.g Eclipse plugins.  Problem:  ""DefaultNamespaceHandlerResolver.initHandlerMappings()"" uses ""ClassUtils.forName(String)"" to load it's NamespaceHandlers. This doesn't work with Spring IDE (Eclipse plugin).  Suggestion:  Use ""ClassUtils.getDefaultClassLoader()"" instead of ""Thread.currentThread().getContextClassLoader()"".   ---  **Affects:** 1.2.6, 2.0 M1","closed","in: core,","spring-projects-issues","2005-12-26T11:49:11Z","2012-06-19T03:54:19Z"
"","6109","JdbcTemplate callbacks with support for more than one statement [SPR-1409]","**[Tor-Einar Jarnbjo](https://jira.spring.io/secure/ViewProfile.jspa?name=jarnbjo)** opened **[SPR-1409](https://jira.spring.io/browse/SPR-1409?redirect=false)** and commented  This is a proposed new feature, as the missing propagation of the JdbcTemplate's fetchSize (reported in #6105) is not easily fixable for ConnectionCallbacks, as there is no way to set the fetch size on connection level and no way to access the created statements without proxying or somehow AOP-ing the JDBC connection. We are however using ConnectionCallbacks extensively, as we often have DA methods, where we have to handle several PreparedStatements simultaneously.  To make the usage of more than one PreparedStatement easier, actually independent of the fetch size problem or not, I would suggest to introduce a PreparedStatementsCallback similar to this:  Object doInPreparedStatements(Map stats) throws SQLException, DataAccessException;  with a corresponding method in JdbcTemplate:  public Object execute(final Map sql, PreparedStatementsCallback action) throws DataAccessException ...  That is, mapping the key -> SQL string relation in the execute parameter to a key -> PreparedStatement relation in the PreparedStatementsCallback implementation. A similar extension for CallableStatementCallback would of course also make sense, but not for the StatementCallback, as the plain Statement can be reused anyway for different actual SQL statements.  ---  No further details from [SPR-1409](https://jira.spring.io/browse/SPR-1409?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-10-21T22:33:43Z","2019-01-11T21:02:21Z"
"","6105","JdbcTemplate.fetchSize not propagated to JDBC driver [SPR-1405]","**[Tor-Einar Jarnbjo](https://jira.spring.io/secure/ViewProfile.jspa?name=jarnbjo)** opened **[SPR-1405](https://jira.spring.io/browse/SPR-1405?redirect=false)** and commented  When setting the fetch size with JdbcTemplate.setFetchSize, the attribute is only propagated to the JDBC driver when using some of the query methods in JdbcTemplate. When using the execute methods with a callback (StatementCallback, ConnectionCallback etc.), the fetch size is ignored and the JDBC driver default is used anyway.   ---  **Affects:** 1.2.5","closed","type: bug,","spring-projects-issues","2005-10-21T01:40:05Z","2012-06-19T03:54:30Z"
"","6278","Documentation Error [SPR-1581]","**[Tony Rock](https://jira.spring.io/secure/ViewProfile.jspa?name=jtony)** opened **[SPR-1581](https://jira.spring.io/browse/SPR-1581?redirect=false)** and commented  page 45 -> TODO: SHOW AN EXAMPLE   ---  **Referenced from:** commits https://github.com/spring-projects/spring-webflow/commit/d6c0813b1536c9a18572aa3180c32539eab49350","closed","type: bug,","spring-projects-issues","2005-12-29T02:31:22Z","2012-06-19T03:53:55Z"
"","6277","not working destroy-method [SPR-1580]","**[Tony Rock](https://jira.spring.io/secure/ViewProfile.jspa?name=jtony)** opened **[SPR-1580](https://jira.spring.io/browse/SPR-1580?redirect=false)** and commented  destroy-method is never called  package destructor;  import org.springframework.beans.factory.xml.XmlBeanFactory; import org.springframework.core.io.FileSystemResource;  public class Next { private static final String PATH = ""src/destructor/"";      private XmlBeanFactory factory = new XmlBeanFactory(new FileSystemResource(     		PATH + ""beans.xml""));          private String id;          public static void main(String[] args) {     	XmlBeanFactory factory = new Next().factory;     	Next next = (Next) factory.getBean(""Next"");     	System.out.println(next.id);          }          public void kill() {     	System.out.println(""BANG! You're DEAD!"");     }          public String getId() {     	return id;     }          public void setId(String id) {     	this.id = id;     }  }  \ \ \ 	\ 		\ 	\ \   ---  **Referenced from:** commits https://github.com/spring-projects/spring-webflow/commit/43b3862854f8ab5d3df00d665360e348ead0e68d, https://github.com/spring-projects/spring-webflow/commit/d6c0813b1536c9a18572aa3180c32539eab49350","closed","","spring-projects-issues","2005-12-29T01:55:56Z","2019-01-11T21:38:31Z"
"","5939","BeanUtils inccorectly returns bean information [SPR-1237]","**[Tony Anecito](https://jira.spring.io/secure/ViewProfile.jspa?name=tdanecito)** opened **[SPR-1237](https://jira.spring.io/browse/SPR-1237?redirect=false)** and commented  BeanUtils does not return correct information in the property descriptors for a class that contains arrays of beans.  If you have a bean class called foo and another called foobar and declare foobar as an array inside of foo when you get the PropertyDescriptor for foobar the properties are incorrect.    ---  **Affects:** 1.2.3  **Attachments:** - [beanutilstest.ZIP](https://jira.spring.io/secure/attachment/11090/beanutilstest.ZIP) (_1.01 kB_)","closed","in: core,","spring-projects-issues","2005-08-18T07:42:47Z","2019-01-11T19:20:26Z"
"","6355","Transaction completion is done in different thread in WebLogic. [SPR-1658]","**[Tomasz Wysocki](https://jira.spring.io/secure/ViewProfile.jspa?name=tawek)** opened **[SPR-1658](https://jira.spring.io/browse/SPR-1658?redirect=false)*** and commented  Current implementation of TransactionSychronizationManager assumes that completion of transaction will occur in the same thread that registered notification and it uses ThreadLocal variable for this purpose. This is not the case in WebLogic 8,1, where completion is notified sometimes (occurs rarely) in different thread. I'm not sure if this is bug or explicit design in WebLogic. For sure WebLogic does parallel XA two-phase commit using two threads (for two XAResource's), but sometimes it does also transaction notifications in different thread...  Such behaviour obsoletes purpose of using ThreadLocal variables for this task...  Below is the stacktrace we have registered **when** completion is done in different thread.      at org.springframework.transaction.support.AbstractPlatformTransactionManager.invokeAfterCompletion(AbstractPlatformTransactionManager.java:725)     at org.springframework.transaction.jta.JtaTransactionManager.access$000(JtaTransactionManager.java:181)     at org.springframework.transaction.jta.JtaTransactionManager$JtaAfterCompletionSynchronization.afterCompletion(JtaTransactionManager.java:921)     at weblogic.transaction.internal.ServerSCInfo.callAfterCompletions(ServerSCInfo.java:853)     at weblogic.transaction.internal.ServerTransactionImpl$CallAfterCompletionsAction.run(ServerTransactionImpl.java:2808)     at weblogic.security.acl.internal.AuthenticatedSubject.doAs(AuthenticatedSubject.java:321)     at weblogic.security.service.SecurityManager.runAs(SecurityManager.java:121)     at weblogic.transaction.internal.ServerTransactionImpl.callAfterCompletions(ServerTransactionImpl.java:2785)     at weblogic.transaction.internal.ServerTransactionImpl.afterCommittedStateHousekeeping(ServerTransactionImpl.java:2687)     at weblogic.transaction.internal.ServerTransactionImpl.setCommitted(ServerTransactionImpl.java:2719)     at weblogic.transaction.internal.ServerTransactionImpl.localCommit(ServerTransactionImpl.java:1889)     at weblogic.transaction.internal.ServerTransactionImpl.localCommit(ServerTransactionImpl.java:1177)     at weblogic.transaction.internal.SubCoordinatorImpl.startCommit(SubCoordinatorImpl.java:226)     at weblogic.transaction.internal.CoordinatorImpl_WLSkel.invoke(Unknown Source)     at weblogic.rmi.internal.BasicServerRef.invoke(BasicServerRef.java:477)     at weblogic.rmi.internal.BasicServerRef$1.run(BasicServerRef.java:420)     at weblogic.security.acl.internal.AuthenticatedSubject.doAs(AuthenticatedSubject.java:363)     at weblogic.security.service.SecurityManager.runAs(SecurityManager.java:147)     at weblogic.rmi.internal.BasicServerRef.handleRequest(BasicServerRef.java:415)     at weblogic.rmi.internal.BasicExecuteRequest.execute(BasicExecuteRequest.java:30)     at weblogic.kernel.ExecuteThread.execute(ExecuteThread.java:219)     at weblogic.kernel.ExecuteThread.run(ExecuteThread.java:178)  I suspect this can be cause for many different problems as TransactionSynchronization is used widely in Spring.  Proposed fix is to implement static global per-jvm map where the key is not a thread but transaction identifier.  I could not find workaround or setting in WL to disable this feature, but even then I would not do it for performance reasons...   ---  **Affects:** 1.2.6","closed","type: bug,","spring-projects-issues","2006-02-01T22:19:05Z","2012-06-19T03:54:21Z"
"","6348","CGLib creates new class for each instance of prototype bean that has a parent definition [SPR-1651]","**[Tomasz Wysocki](https://jira.spring.io/secure/ViewProfile.jspa?name=tawek)** opened **[SPR-1651](https://jira.spring.io/browse/SPR-1651?redirect=false)** and commented  AbstractBeanFactory#getMergedBeanDefinition creates an instance of RootBeanDefinition for each invocation. This results in new instance of RootBeanDefinition for each creation of prototype bean if it not itself a RootBeanDefinition, ie. it has a parent to be merged with.  This further affects the way that CglibSubclassingInstantiationStrategy$CglibIdentitySupport works, which assumes that RootBeanDefinitions are compared only by identity of instance (default behaviour of each java.lang.Object).  So if there are many instances of RootBeanDefinition for each instantiated prototype ChildBeanDefinition, CGLib will create a new class for instantiated prototype bean when there are any lookups or overrides defined in bean definition.  1. Bean definition must be a prototype 2. Bean must have the parent definition 3. Bean must have override/lookup methods  Effect:  CGLIB create new class definition for each instance of prototype bean.  Proposals: option A. Create a cache for merged bean definitions. or option B. Make RootBeanDefinition implement different strategy for hashCode and equal methods implementation, and change CglibSubclassingInstantiationStrategy$CglibIdentitySupport  Fix: option A.  --- AbstractBeanFactory.java.orig       2005-10-13 15:28:00.000000000 +0200 +++ AbstractBeanFactory.java    2006-01-31 02:51:29.546875000 +0100 @@ -122,6 +122,9 @@ /** Map between dependent bean names: bean name --> dependent bean name */^M private final Map dependentBeanMap = new HashMap();^M ^M +      /** Map of all merged bean definitions */^M  +         private Map/*ChildBeanDefinition, RootBeanDefinition*/ mergedChildBeanDefinitions = new HashMap();^M  +         ^M  ^M /**^M * Create a new AbstractBeanFactory.^M   @@ -697,6 +700,9 @@   else if (bd instanceof ChildBeanDefinition) {^M   // Child bean definition: needs to be merged with parent.^M   ChildBeanDefinition cbd = (ChildBeanDefinition) bd;^M  +         // check if there is already merged definition^M  +         RootBeanDefinition rbd = (RootBeanDefinition) mergedChildBeanDefinitions.get(cbd);^M  +         if (rbd == null) {^M       RootBeanDefinition pbd = null;^M       try {^M               if (!beanName.equals(cbd.getParentName())) {^M  @@ -720,7 +726,7 @@ }^M ^M // Deep copy with overridden values.^M  ---      RootBeanDefinition rbd = new RootBeanDefinition(pbd);^M  +         rbd = new RootBeanDefinition(pbd);^M       rbd.overrideFrom(cbd);^M  ^M // Validate merged definition: mainly to prepare method overrides.^M @@ -731,6 +737,9 @@ throw new BeanDefinitionStoreException(rbd.getResourceDescription(), beanName,^M ""Validation of bean definition failed"", ex);^M }^M +      // save merged definition^M  +         mergedChildBeanDefinitions.put(cbd, rbd);^M  +         }^M  ^M return rbd;^M }^M  ---  **Affects:** 1.2.6","closed","in: core,","spring-projects-issues","2006-01-30T11:52:09Z","2019-01-13T22:49:30Z"
"","6852","FreeMarkerView & VelocityView no longer work on servlet 2.3 containers [SPR-2161]","**[Tom Turelinckx](https://jira.spring.io/secure/ViewProfile.jspa?name=turelto)** opened **[SPR-2161](https://jira.spring.io/browse/SPR-2161?redirect=false)** and commented  Juergen,  The check to not override a content type previously set on the response that you introduced a couple of days ago in FreeMarkerView & VelocityView uses response.getContentType(), which is apparently servlet 2.4 specific. It throws a NoSuchMethodError on WLS 8.1sp2 ... Maybe you can code the check more defensively, or just remove it again?   ---  **Affects:** 2.0 RC1","closed","type: bug,","spring-projects-issues","2006-06-20T00:18:42Z","2012-06-19T03:52:26Z"
"","6851","non-singleton FactoryBean is eagerly initialized [SPR-2160]","**[Tom Turelinckx](https://jira.spring.io/secure/ViewProfile.jspa?name=turelto)** opened **[SPR-2160](https://jira.spring.io/browse/SPR-2160?redirect=false)** and commented  I wouldn't expect getObject() to be called on this bean:  public class TestBean implements FactoryBean { public Object getObject() { throw new IllegalStateException(""should never be called""); }      public Class getObjectType() {         return String.class;     }          public boolean isSingleton() {         return false;     }  }  when configured like this:  \ \ \  public class Test { public static void main(String[] args) { new FileSystemXmlApplicationContext(""test.xml""); } }  But I do get the IllegalStateException:  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'springext.TestBean': FactoryBean threw exception on object creation; nested exception is java.lang.IllegalStateException: should never be called Caused by: java.lang.IllegalStateException: should never be called at springext.TestBean.getObject(TestBean.java:10) at org.springframework.beans.factory.support.AbstractBeanFactory.getObjectFromFactoryBean(AbstractBeanFactory.java:984) at org.springframework.beans.factory.support.AbstractBeanFactory.getObjectForBeanInstance(AbstractBeanFactory.java:959) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:272) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:168) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:253) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:332) at org.springframework.context.support.FileSystemXmlApplicationContext.\(FileSystemXmlApplicationContext.java:89) at org.springframework.context.support.FileSystemXmlApplicationContext.\(FileSystemXmlApplicationContext.java:74) at org.springframework.context.support.FileSystemXmlApplicationContext.\(FileSystemXmlApplicationContext.java:65) at springext.Test.main(Test.java:10)  Looking at preInstantiateSingletons() in DefaultListableBeanFactory:  ... if (bd.hasBeanClass() && FactoryBean.class.isAssignableFrom(bd.getBeanClass())) { FactoryBean factory = (FactoryBean) getBean(FACTORY_BEAN_PREFIX + beanName); if (factory.isSingleton()) { getBean(beanName); } } else { getBean(beanName); } ...  It turns out that the else block is executed instead of the if block, because bd.hasBeanClass() returns false, because the AbstractBeanDefinition's beanClass property is still the class name String instead of the Class object. I guess everything would be fine if hasBeanClass() returned true...  Is this a bug or intended behavior?   ---  **Affects:** 2.0 M5","closed","in: core,","spring-projects-issues","2006-06-19T22:03:52Z","2012-06-19T03:52:35Z"
"","6828","Turn METHOD_ constants public again in WebContentGenerator. [SPR-2137]","**[Tom Turelinckx](https://jira.spring.io/secure/ViewProfile.jspa?name=turelto)** opened **[SPR-2137](https://jira.spring.io/browse/SPR-2137?redirect=false)** and commented  In org.springframework.web.servlet.support.WebContentGenerator, the constants METHOD_HEAD, METHOD_GET and METHOD_POST, along with several HEADER_ constants, have become private since spring-2.0-m5. I can see the reasoning here, and I agree the HEADER_ constants should be private, but I was using the METHOD_ constants to pass to setSupportedMethods() from subclasses, to avoid typos.  I would propose to turn the METHOD_ constants public again, or make them available somewhere else for global use, maybe in WebUtils...   ---  **Affects:** 2.0 M5","closed","type: enhancement,","spring-projects-issues","2006-06-13T04:08:14Z","2012-06-19T03:52:48Z"
"","5960","FileSystemXmlApplicationContext crunches location parameter [SPR-1258]","**[tom quas](https://jira.spring.io/secure/ViewProfile.jspa?name=tquas)** opened **[SPR-1258](https://jira.spring.io/browse/SPR-1258?redirect=false)** and commented  FileSystemXmlApplicationContext ctx = new FileSystemXmlApplicationContext( ""/tmp/context.xml"" ); produces the exception below. '//tmp/context.xml' (double-slash) is a workaround to this problem.  Exception in thread ""main"" org.springframework.beans.factory.BeanDefinitionStoreException: IOException parsing XML document from file [/home/tom/tmp/context.xml]; nested exception is java.io.FileNotFoundException: tmp/context.xml (No such file or directory) java.io.FileNotFoundException: tmp/context.xml (No such file or directory) at java.io.FileInputStream.open(Native Method) at java.io.FileInputStream.\(FileInputStream.java:106) at org.springframework.core.io.FileSystemResource.getInputStream(FileSystemResource.java:85) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:152) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:124) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:140) at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:103) at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:71) at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:87) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:267) at org.springframework.context.support.FileSystemXmlApplicationContext.\(FileSystemXmlApplicationContext.java:82)   ---  **Affects:** 1.2.3","closed","in: core,","spring-projects-issues","2005-08-28T23:20:51Z","2019-01-12T16:40:53Z"
"","6667","DB2 Error -904 should be mapped to DataRetrievalFailureException in sql-error-codes.xml [SPR-1974]","**[Tom Greco](https://jira.spring.io/secure/ViewProfile.jspa?name=tgrecojr)** opened **[SPR-1974](https://jira.spring.io/browse/SPR-1974?redirect=false)** and commented  I believe that DB2 error -904 should be mapped to DataRetrievalFailureException in sql-error-codes.xml.  Currently it bubbles up as UncategorizedSQLException  Database error (1): '57011' native code: -904 msg-len: 170 msg: '[IBM][CLI Driver][DB2] SQL0904N Unsuccessful execution caused by an unavailable resource. Reason code: """", type of resource: """", and resource name: """". SQLSTATE=57011    ---  **Affects:** 1.2.7, 2.0 M4","closed","type: enhancement,","spring-projects-issues","2006-05-01T07:23:39Z","2012-06-19T03:52:42Z"
"","6666","DB2 Error -911 and -913 should be added to deadlockLoserCodes in sql-eror-codes.xml [SPR-1973]","**[Tom Greco](https://jira.spring.io/secure/ViewProfile.jspa?name=tgrecojr)** opened **[SPR-1973](https://jira.spring.io/browse/SPR-1973?redirect=false)** and commented  I believe that error codes -911 and -913 for DB2 should be added to the deadlockLoserCodes in org/springframework/jdbc/support/sql-error-codes.xml.  ERROR CODE: -911 COM.ibm.db2.jdbc.DB2Exception: [IBM][CLI Driver][DB2/NT] SQL0911N The current transaction has been rolled back because of a deadlock or timeout. Reason code ""2"".  SQLSTATE=40001  10:52:30.718 sqlState = 57033, nativeErr = -913, errorMsg = [IBM][CLI Driver][DB2] SQL0913N  Unsuccessful execution caused by deadlock or timeout.  Reason code ""00C9008E"".  SQLSTATE=57033  Right now these error codes bubble up as UncategorizedSQLExceptions.  Thanks!   ---  **Affects:** 1.2.7, 2.0 M4","closed","type: enhancement,","spring-projects-issues","2006-05-01T07:07:55Z","2012-06-19T03:52:32Z"
"","6227","Spring i18n needs TimeZone resolution as well as Locale resolution. [SPR-1528]","**[Tom Czarniecki](https://jira.spring.io/secure/ViewProfile.jspa?name=tomczarniecki)** opened **[SPR-1528](https://jira.spring.io/browse/SPR-1528?redirect=false)** and commented  Spring Web framework has really good and extensible support for Locale resolution. However, in many internationalised applications one also requires to be able to resolve TimeZones, so that a remote user can be shown, for example, transaction logs in their local TimeZone, and not in the TimeZone of the server. You can always retrieve the user's timezone from the database at login and store it using a known key in the session or look it up whenever you need it. What I propose is really a set of extensible interfaces and strategy classes, based on Spring's current locale resolution mechanism, to allow a uniform approach to TimeZone resolution. Guess I have done this too many times for clients :-)  ---  **Attachments:** - [client_timezone.zip](https://jira.spring.io/secure/attachment/14922/client_timezone.zip) (_7.44 kB_) - [FixedTimeZoneResolver.java](https://jira.spring.io/secure/attachment/11321/FixedTimeZoneResolver.java) (_2.68 kB_) - [TimeZoneInterceptor.java](https://jira.spring.io/secure/attachment/11322/TimeZoneInterceptor.java) (_3.14 kB_) - [TimeZoneResolver.java](https://jira.spring.io/secure/attachment/11320/TimeZoneResolver.java) (_3.41 kB_) - [TimeZoneUtils.java](https://jira.spring.io/secure/attachment/11323/TimeZoneUtils.java) (_2.90 kB_)  **Issue Links:** - #20302 JSP tags doesn't pick up JSTL-defined time zone at page level - #21241 CookieLocaleResolver is not RFC6265 compliant when setting a locale and time zone  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/44dee37130db1068705ca4f73d283846e9314b1e, https://github.com/spring-projects/spring-framework/commit/7ed108e974e0a097a617bff03a2b7aa0ed60d11b, https://github.com/spring-projects/spring-framework/commit/7b2ac6d19438c67024f64b76361b11577ed61cdb, https://github.com/spring-projects/spring-framework/commit/4574528a279c2689dec5992240a8968c8ddd806a, https://github.com/spring-projects/spring-framework/commit/c664010001c840532080ceb2b92fb93498d24780  5 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2005-12-11T19:25:26Z","2019-01-11T21:35:48Z"
"","6175","Update EJB Documentation [SPR-1476]","**[Todd Nine](https://jira.spring.io/secure/ViewProfile.jspa?name=tnine)** opened **[SPR-1476](https://jira.spring.io/browse/SPR-1476?redirect=false)** and commented  I have updated the section of EJB doc containing the ContextSingltonLocator to contain more examples.  I would like to contribute the patch so it will be release when the documentation is created.  I am not able to generate the doc to check it before I submit the patch, what Maven task do I run to just generate the html documentation?   ---  **Affects:** 1.2.6  **Attachments:** - [ejb.xml.patch.txt](https://jira.spring.io/secure/attachment/11262/ejb.xml.patch.txt) (_1.75 kB_)","closed","type: enhancement,","spring-projects-issues","2005-11-17T01:46:25Z","2012-06-19T03:54:03Z"
"","6204","MockHttpServeletRequest can no longer update or reset parameters [SPR-1505]","**[Todd Huss](https://jira.spring.io/secure/ViewProfile.jspa?name=thuss)** opened **[SPR-1505](https://jira.spring.io/browse/SPR-1505?redirect=false)** and commented  With the code fix in #5284 there is no longer a clean API to change a single request parameter to allowing reuse of an already created MockHttpServletRequest. For example I used to be able to do this:  request.addParameter(""foo"", ""Bar""); modelAndView = c.handleRequest(request, response); assertEquals(""Hello Bar"", modelAndView.getModel().get(""greeting""); // Now reuse the same request but just change one of the parameters request.addParameter(""foo"", ""Baz""); modelAndView = c.handleRequest(request, response); assertEquals(""Hello Baz"", modelAndView.getModel().get(""greeting"");  Some of our MockHttpServletRequests require quite a bit of setup so it's nice to be able to reuse them by switching just a single parameter in a unit test.  Since #5284 it is no longer possible to update a single request parameter unless I do this:  request.getParameterValues(""foo"")[0] = ""Baz"";  It would be nice to have a setParameter/setParameterValues method that either adds the parameter or replaces the parameter, but does not append. A removeParameter would be a nice a touch too but not necessary.  ---  **Affects:** 1.2.6","closed","type: enhancement,","spring-projects-issues","2005-11-29T08:11:29Z","2019-01-11T21:31:02Z"
"","6174","Add option to the BatchSQLUpdate class [SPR-1475]","**[TJ Herring](https://jira.spring.io/secure/ViewProfile.jspa?name=therring)** opened **[SPR-1475](https://jira.spring.io/browse/SPR-1475?redirect=false)** and commented  N/update a very large aew feature request.  It may not be necessary to keep the number of 'rowsAffected' attribute in the BatchSQLUpdate class.   Since the insertion or updating of a very large amount of rows will require a proportional amount of memory due to the size of the rowsAffected LinkedList (containing Integer objects).   An boolean attribute could be added to the class called 'keepRowsAffected'.  If true, then keep up with the number of rows otherwise just disregard them.  This new feature would facilitate the usage of this class to loadmount of data without using a unnecessarily large memory footprint.   ---  **Affects:** 1.2.6","closed","type: enhancement,","spring-projects-issues","2005-11-16T09:20:18Z","2012-06-19T03:54:11Z"
"","5959","MockHttpServletRequest implemensts Serializable but does not serialize [SPR-1257]","**[Timo Rantalaiho](https://jira.spring.io/secure/ViewProfile.jspa?name=thrantal)** opened **[SPR-1257](https://jira.spring.io/browse/SPR-1257?redirect=false)** and commented  I made a subclass of org.springframework.mock.web.MockHttpServletRequest, and my serialization test failed serializing it with:  Caused by: java.io.NotSerializableException: org.springframework.mock.web.MockServletContext  Possible alternative solutions: - remove implements Serializable (why should the mock request be serializable?) - make the ServletContext field transient - make MockServletContext (and possible other non-serializable fields) Serializable    ---  **Affects:** 1.2.1","closed","type: bug,","spring-projects-issues","2005-08-28T21:48:08Z","2012-06-19T03:54:02Z"
"","6832","FreeMarker Reference Documentation [SPR-2141]","**[Tim Nolan](https://jira.spring.io/secure/ViewProfile.jspa?name=katentim)** opened **[SPR-2141](https://jira.spring.io/browse/SPR-2141?redirect=false)** and commented  Advanced configuration for FreeMarker (15.4.4.2. FreeMarker) has the code: \ which should be \   ---  **Affects:** 2.0 M5","closed","type: documentation,","spring-projects-issues","2006-06-13T22:58:13Z","2012-06-19T03:52:24Z"
"","6652","Javadocs for StaticWebApplicationContext  method: void setConfigLocations(String[] configLocations) [SPR-1959]","**[Tim Nolan](https://jira.spring.io/secure/ViewProfile.jspa?name=katentim)** opened **[SPR-1959](https://jira.spring.io/browse/SPR-1959?redirect=false)** and commented  Inherited interface Javadocs for: StaticWebApplicationContext  method: void setConfigLocations(String[] configLocations)  ...are misleading. The method actually throws UnsupportedOperationException.   ---  **Affects:** 2.0 M4","closed","type: enhancement,","spring-projects-issues","2006-04-25T22:56:41Z","2012-06-19T03:52:44Z"
"","6237","Add constructors taking java.lang.String to tests in org.springframework.test package [SPR-1538]","**[Tim Nolan](https://jira.spring.io/secure/ViewProfile.jspa?name=katentim)** opened **[SPR-1538](https://jira.spring.io/browse/SPR-1538?redirect=false)** and commented  A constructor taking a String argument is in the super class junit.framework.TestCase. This is used to name the class, and should probably be made available within the Spring test package test classes.  One example of where this could be used is in com.gargoylesoftware.base.testing.OrderedTestSuite which requires the String constructor (even though ordering is a bad thing in general, it can be handy in integration tests).  NB - Don't forget to include the default constructor when adding the String one.  Cheers :)   ---  **Affects:** 1.2.6","closed","type: enhancement,","spring-projects-issues","2005-12-14T12:25:22Z","2012-06-19T03:54:05Z"
"","5888","Hibernate 3.0.5 JAR [SPR-1185]","**[Tim Nolan](https://jira.spring.io/secure/ViewProfile.jspa?name=katentim)** opened **[SPR-1185](https://jira.spring.io/browse/SPR-1185?redirect=false)** and commented  A user discovered this on the forum. http://forum.springframework.org/viewtopic.php?p=29495#29495  The hibernate 3 jar in spring 1.2.3 seems different compared to the actual hibernate release. Both have a manifest version of 3.0.5.   --- No further details from [SPR-1185](https://jira.spring.io/browse/SPR-1185?redirect=false)","closed","type: task,","spring-projects-issues","2005-07-28T11:02:55Z","2005-08-01T09:08:27Z"
"","6419","executeSchemaScript swallows SQLExceptions, contrary to the stated behavior in the javadoc [SPR-1722]","**[Tim McNerney](https://jira.spring.io/secure/ViewProfile.jspa?name=mumbly)** opened **[SPR-1722](https://jira.spring.io/browse/SPR-1722?redirect=false)** and commented  From the javadoc of executeSchemaScript:  `@throws` SQLException if thrown by JDBC methods  yet the method swallows SQLExceptions:  try { stmt.executeUpdate(sql[i]); } catch (SQLException ex) { logger.warn(""Unsuccessful schema statement: "" + sql[i], ex); }  This makes it difficult to programatically determine if the schema scripts have failed and take proper actions.  The catch clause should rethrow the exception after the warning.   ---  **Affects:** 1.2.6","closed","type: enhancement,","spring-projects-issues","2006-02-16T09:22:32Z","2012-06-19T03:54:09Z"
"","6133","Align behavior of TransactionProxyFactoryBean and ProxyFactoryBean [SPR-1433]","**[Tim Kettering](https://jira.spring.io/secure/ViewProfile.jspa?name=timster)** opened **[SPR-1433](https://jira.spring.io/browse/SPR-1433?redirect=false)** and commented  This was discussed on the spring-dev list about two months ago.  I am filing this JIRA issue because now that we have gotten more deeply into using spring's AOP for transaction handling and ACEGI security, we are finding it increasingly more ""un-spring-like"" that those two beans (which almost literally share the same name and functionality) would have such fundamental differences in how they treat interceptors.   So when I am refactoring beans, or moving around functionality, I have to really keep in mind whether I am addressing one type of bean or another, and I think as spring development gets more and more sosphicated, this issue should be put to rest one way or another.  Colin has said in the email below that backwards compatibility is an issue, and I do not dispute that.  But I think this issue shuld be resolved one way or another (change occurs during major version upgrade), or an alternative ProxyFactoryBean is provided that gives the properly aligned behavior for those who have this issue to deal with everyday.  (I am pasting in the email below to provide the full details of the issue at hand)  =============== BEGIN EMAIL FROM SPRING-DEV ================================= Personally, I think that makes some sense, but it's quite probably too risky to the extent of breaking backwards compatibility. you would have some code that is now proxied with ProxyFactoryBean that depends on having the class proxied as well (via the cglib proxy) that would no longer have the class proxied (if that class implements any interfaces).  But it's a bummer that the behavior is different. This probably deserves a JavaDoc comment at the minimum.  The other thing that has also always bothered me about the difference between ProxyFactoryBeand and TransactionProxyFactoryBean is that only the former can handle prototypes. There's no good reason for that; you do need to wrap prototypes transactionally too.  Dmitriy Kopylenko wrote:  > The difference is - if you don't specify the iterfaces to proxy, the > TransactionProxyFactoryBean will ""auto discover"" and add all the > interfaces implemented by the target class (if ""proxyTargetClass"" > flag is not explicitly set) and ProxyFactoryBean will use CGLIB proxy > in such a scenario. >  > May be we should change the behavior of TransactionProxyFactoryBean so > it's consistent with ProxyFactoryBean in this regard? Juergen, Colin, > Rod, what do you think? >  > Dmitriy. >  >  > On Sep 12, 2005, at 8:51 PM, Dmitriy Kopylenko wrote: >  >> Tim, >>  >> try to add ""proxyInterfaces"" property to the ProxyFactoryBean >> definition: >>  >> \ >>      >>> \ >>>         \com.vivakos.vps.service.Service\ >>>         \com.vivakos.vps.service.content.TopicService\ >>> \ >>  >> \ >>  >> Regards, >> Dmitriy. >>  >>  >> On Sep 12, 2005, at 5:10 PM, Tim Kettering wrote: >>  >>  >>> I hate to come off sounding like a broken record here, but I asked >>> about this issue last week in the hopes that someone could elaborate >>> further on it, but didn't get any reply on it.  I'm thinking maybe >>> it got  lost in the events over the weekend, so I'm re-posting both >>> emails I sent below, in the hopes that someone might afford a look >>> at it and point me in the  right direction.  Thanks in advance! >>>  >>> In a nutshell, I'm seeing different behavior on how interceptors are >>> applied to an proxy object purely based on whether it is using >>> ProxyFactoryBean or TransactionProxyFactoryBean. (details are in the >>> email below) >>>  >>>  >>> ====== ORIGINAL EMAIL (SEE FOLLOWUP EMAIL AFTER THIS ONE)   >>> ============ I'm running into some rather unusual behavior that I >>> cannot  explain >>> - so I >>>   thought I'd bring it up here, either I'm doing something wrong, or >>>   there (a far more remote possibility) is something wrong w/ Spring. >>>  >>> I previously had an object that was wrapped in a >>> TransactionProxyFactoryBean, and this object also had an Acegi >>> security method interceptor applied to it. >>>  >>> In my refactoring of the code to move the transactional concerns  to >>> a higher abstraction layer, I changed the object wrapper from >>> TransactionProxyFactoryBean to ProxyFactoryBean.  Since I wanted  to >>> keep the Acegi method interceptor at this level, I upated the >>> 'postInterceptors' >>> property to 'interceptorNames', and set the name of the Acegi >>> interceptor in there. >>>  >>> from this: >>>      >>>      >>>          >>>              >>>          >>>      >>>  >>> to this: >>>      >>>      >>>          >>>             serviceMethodSecurityInterceptor >>>          >>>      >>>  >>> Some of the test cases I have broke after this change.  I started >>> digging around a bit to find out why, and what I've turned up, to >>> the best I can figure out is that when applying an interceptor via >>> 'interceptorNames', the >>> interceptor gets selectively applied.    This is the configuration   >>> for the >>> method interceptor.  As you can see, we are applying access  control >>> on three different methods.  'get', 'getTopicList' and >>> 'getTopicChildren'. >>>      >>>     >>  >>> class=""net.sf.acegisecurity.intercept.method.aopalliance.MethodSecur >>> i >>> tyInter >>> ceptor""> >>> \\>> bean=""authenticationManager""/>\ >>> \\>> bean=""decisionManager""/>\ >>> \\>> bean=""afterInvocationManager""/>\ >>> \ >>> \ >>>  >>> com.vivakos.vps.service.Service.get=TOPIC_AFTER_ACL_READ >>>  >>> com.vivakos.vps.service.content.TopicService.getTopicList=TOPIC_AFTE >>> R >>> _ACL_RE >>> AD >>>  >>> com.vivakos.vps.service.content.TopicService.getTopicChildren=TOPIC_ >>> A >>> FTER_AC >>> L_READ >>> \ >>> \ >>> \ >>>  >>> And as far as I can see - when using TransactionProxyFactoryBean, >>> all three methods get applied correctly.  i.e. integration tests >>> that test the 'get', 'getTopicList' and 'getTopicChildren' all work >>> properly. >>>  >>> But when changing to use ProxyFactoryBean, the 'get' method >>> integration test fails (the interceptor apparently is not called), >>> while 'getTopicList' and 'getTopicChildren' work integration test >>> works fine.  The only differnence in how the methods that are tested >>> is that 'get' is defined in an higher level interface (Service) >>> instead of (TopicService).  The integration test calls >>> topicService.get() .... >>>  >>> I'm hoping that someone can help shine additional light on this >>> difference in behavior with the interceptors, and what I might be >>> doing wrong? >>>  >>> Thanks in advance, >>>  >>> -tim >>>  >>> ========= FOLLOW UP EMAIL SENT A DAY AFTER THE ORIGINAL ========== >>>  >>> Following up on the previous email I sent yesterday, I explored  one >>> more scenario.  Since the hiearchy for the 'Service' interface is >>> like this. >>>  >>> Service >>> -'.get()' >>>  >>> + TopicService (extends Service) >>>  >>> - .getTopicList() >>> - .getTopicChildren() >>>  >>> And as I've mentioned in my previous email, the Acegi security >>> method interceptor does not seem to be kicking in on the 'get()' >>> method when called on a TopicService implementation, although it >>> does kick in for the other two methods defined under TopicService >>> when using ProxyFactoryBean and 'interceptorNames' property. >>>  >>> So I tested out earlier today what would happen if I defined the >>> 'get()' >>> method at the TopicService interface level, and updated the security >>> method interceptor from >>>  >>> com.vivakos.vps.service.Service.get=TOPIC_AFTER_ACL_READ >>>  >>> to >>>  >>> com.vivakos.vps.service.content.Topic.get=TOPIC_AFTER_ACL_READ >>>  >>> And the result is that it worked.  So, I'm hoping that someone  with >>> a better understanding of what the differences between the >>> ProxyFactoryBean advising process and the >>> TransactionProxyFactoryBean would be - could clarify what is going >>> on, since to me, they should work the same? >>>  >>> Thanks. >>>  >>> -tim >>>  >>>  >>> ------------------------------------------------------- >>>  >>> SF.Net email is Sponsored by the Better Software Conference & EXPO >>> September 19-22, 2005 * San Francisco, CA * Development Lifecycle >>> Practices Agile & Plan-Driven Development * Managing Projects & >>> Teams * Testing & QA Security * Process Improvement & Measurement * >>> http://www.sqe.com/ bsce5sf >>>  >>> _______________________________________________ >>>  >>> Springframework-developer mailing list >>> Springframework-developer@lists.sourceforge.net >>> https://lists.sourceforge.net/lists/listinfo/springframework- >>> developer >>  >>  >> ------------------------------------------------------- >>  >> SF.Net email is Sponsored by the Better Software Conference & EXPO >> September 19-22, 2005 * San Francisco, CA * Development Lifecycle >> Practices Agile & Plan-Driven Development * Managing Projects & Teams >> * Testing & QA Security * Process Improvement & Measurement * >>   http://www.sqe.com/ bsce5sf >>  >> _______________________________________________ >>  >> Springframework-developer mailing list >> Springframework-developer@lists.sourceforge.net >> https://lists.sourceforge.net/lists/listinfo/springframework-develope >> r >  >  > ------------------------------------------------------- >  > SF.Net email is Sponsored by the Better Software Conference & EXPO > September 19-22, 2005 * San Francisco, CA * Development Lifecycle > Practices Agile & Plan-Driven Development * Managing Projects & Teams > * Testing & QA Security * Process Improvement & Measurement * >   http://www.sqe.com/bsce5sf >  > _______________________________________________ >  > Springframework-developer mailing list > Springframework-developer@lists.sourceforge.net > https://lists.sourceforge.net/lists/listinfo/springframework-developer  ---  SF.Net email is sponsored by: Tame your development challenges with Apache's Geronimo App Server. Download it for free - -and be entered to win a 42"" plasma tv or your very own Sony(tm)PSP.  Click here to play: http://sourceforge.net/geronimo.php  _______________________________________________  Springframework-developer mailing list Springframework-developer@lists.sourceforge.net https://lists.sourceforge.net/lists/listinfo/springframework-developer  ---  **Affects:** 1.2.5","closed","type: enhancement,","spring-projects-issues","2005-11-03T06:46:01Z","2019-01-13T22:50:19Z"
"","6413","All ErrorCodes for all databases always loaded sql-error-codes.xml (spring-jdbc) [SPR-1716]","**[Tim Canavan](https://jira.spring.io/secure/ViewProfile.jspa?name=tcanavan)** opened **[SPR-1716](https://jira.spring.io/browse/SPR-1716?redirect=false)** and commented  I noticed in the debug log that all errorcodes for all databases were been loaded via the sql-error-codes.xml file. In our case we are interested just in the Sybase error coes been loaded. This is adversely affecting startup-time.   ---  **Affects:** 1.2.6","closed","type: enhancement,","spring-projects-issues","2006-02-15T20:42:31Z","2007-06-20T05:06:36Z"
"","6251","toString() method is delegated to Interceptors and not to the Target [SPR-1553]","**[Tibor Hegyi](https://jira.spring.io/secure/ViewProfile.jspa?name=hegyit)** opened **[SPR-1553](https://jira.spring.io/browse/SPR-1553?redirect=false)** and commented  Hi,  The JavaDoc API for ""org.springframework.aop.framework.AdvisedSupport.toProxyConfigString()"" says that toString() is delegated to the target. Having looked at the source code of the method  ""org.springframework.aop.framework.JdkDynamicAopProxy.invoke()"", I could see that the toString() method is delegated to the interceptor chain and not directly to the target. See below: // We need to create a method invocation... // invocation = advised.getMethodInvocationFactory().getMethodInvocation( //		 proxy, method, targetClass, target, args, chain, advised);      			invocation = new ReflectiveMethodInvocation(     					proxy, target, method, args, targetClass, chain);          			// proceed to the joinpoint through the interceptor chain     			retVal = invocation.proceed(); //","closed","in: core,","spring-projects-issues","2005-12-19T21:18:23Z","2019-01-12T16:29:45Z"
"","6702","PropertyEditors registered in context not thread-safe for DataBinder [SPR-2009]","**[Thomas Whitmore](https://jira.spring.io/secure/ViewProfile.jspa?name=thomasw)** opened **[SPR-2009](https://jira.spring.io/browse/SPR-2009?redirect=false)** and commented  Custom  PropertyEditors registered in the context could be widely useful for Data Binding, but unfortunately are not used in a thread-safe manner by the Data Binder.  The Bean Factory does use these in a thread-safe manner; by synchronizing; but it is not clear that this would be suitable for heavy load of request-processing. Synchronizing on each individual editor, or establishing a well-defined API to 'duplicate' editors treating the original only as a template, might be solutions.  For the moment I'm keeping registration of these to the Controller. InitBinder() method - instantiating the editors there. This is safe, but if editors worked better I could quite widely genericize my code.  Other people have noticed small versions of this problem (#4799) but I think this may be a fairly major case. OTOH, maybe you've already got this addressed for the Spring-2 target.  ---  What I was intending to do, that could be useful at the Framework level, is a ' Reference Editor ' converting between Hibernate object references  IDs in string form. Registering one of these with for your intended Target Class would then make all fields, combo boxes etc referencing this type automatically bound.  My code picks up Hibernate metadata & types of simple identifiers to parse these automatically.  FYI.  Keep up the good work!  Cheers, Thomas  ---  **Affects:** 1.2.8","closed","type: enhancement,","spring-projects-issues","2006-05-14T13:20:41Z","2019-01-13T22:48:05Z"
"","6359","DispatcherServlet configurability/ and/  transitioning from Struts [SPR-1662]","**[Thomas Whitmore](https://jira.spring.io/secure/ViewProfile.jspa?name=thomasw)** opened **[SPR-1662](https://jira.spring.io/browse/SPR-1662?redirect=false)** and commented  Hi Juergen, people,  1) Working on a project now I'd like to use Spring to configure the Dispatcher behaviour of DispatcherServlet; which seems impossible since it's outside the BeanFactory Context.  2) On a recent Struts -> Spring transition project, referencing from Struts Dispatcher to Spring-created Beans was wanted alongside some use of the Spring Dispatcher. Available and recommended solutions seemed to either create duplicate BeanFactories, or to hit some kind of infinite recursion loop, or to be unable to find the BeanFactory due to initialization issues.  It seems that the coupling of Dispatcher and BeanFactory behaviour directly into the Dispatcher Servlet, may be a less-than-perfect architectural structure.  The Struts -> Spring transition in particular wasted a lot of time trying to integrate these alongside, without suffering infinite recursion. We found it insoluble in the end and needed to convert everything to Spring to continue (a rather costly decision, and also a significant hurdle which some might have chosen **not** to cross).  These seemed at the time to be **general** issues, which would affect many Development Transitions from other frameworks/ code into Spring. Much of it was the issue of Referencing beans from outside Spring, versus Creating an entirely new bean factory.  As possible improvement in these areas, I'd like to propose the following :- - allow separation of Dispatcher behaviour from SpringServlet bean-factory creation and loading - Dispatcher could then be created/ configured explicitly within Spring; defaulted if not - SpringServlet to handle bean-factory loading; still parameterized from Servlet Params - allow Dispatcher.HandlerMappings to be specified   (single HandlerMapping can currently be set as a servlet-param, but this is outside Spring) - SpringServlet able to be registered/ found globally; both during loading and once complete  And, less generally but still important :- - Struts integration plugs able to find SpringServlet/ or other bean factory; rather than forcing to load a duplicate.   (recent work may have progressed towards covering this.)  Your thoughts ?  FYI, on the previous project I also implemented Struts Tag -> Spring message resolution support (cleanly) and Struts Validator support from outside Struts (a blatant hack). Overall I found there was rather a lot of work in several areas to implement the transition from Struts -> Spring. Since this must be one of the most common migration paths, surely this would benefit from some smoothing...  Unfortunately I've since moved on, and may only have some of the source code for the above components. Let me know if you'd like me to have a hunt for it.  Cheers, T   ---  **Affects:** 1.2.6","closed","type: enhancement,","spring-projects-issues","2006-02-02T18:18:37Z","2012-06-19T09:37:27Z"
"","6048","jsf DelegatingVariableResolver crashes with myfaces [SPR-1348]","**[Thomas Timbul](https://jira.spring.io/secure/ViewProfile.jspa?name=ttimbul)** opened **[SPR-1348](https://jira.spring.io/browse/SPR-1348?redirect=false)** and commented  I have previously posted this as a myfaces bug. Please see http://issues.apache.org/jira/browse/MYFACES-665  The problem arises when the faces api jar is placed at a lower classpath level than spring. By this I mean that the crash occurs if spring.jar is in container classpath and faces-api.jar in webapp classpath.  The problem does NOT occur if a) faces-api.jar is placed in container classpath b) spring.jar is placed in webapp classpath  The reason is that the DelegatingVariableResolver depends (obviously) on javax.faces.el.VariableResolver, which is somehow not visible to some party (myfaces crashes while loading the resolver, but it is spring that can't 'see' the required class).  It could of course be that this is an unresolvable issue and might even be a problem specific to resin.   ---  1 votes, 1 watchers","closed","status: declined,","spring-projects-issues","2005-10-04T20:12:23Z","2019-01-12T16:30:02Z"
"","6878","Rewrite MVC step-by-step guide for 2.5 [SPR-2187]","**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[SPR-2187](https://jira.spring.io/browse/SPR-2187?redirect=false)** and commented  Rewrite MVC step-by-step guide for 2.5 using the docbook format used for reference manual.  ---  **Affects:** 2.0 final  **Issue Links:** - #8148 Step by Step Tutorial didn't work on Step 13 - Improve index.jsp - #8149 Step by Step Tutorial didn't work on Step 22 - Adding a form  1 votes, 2 watchers","closed","type: documentation,","spring-projects-issues","2006-06-25T16:29:59Z","2019-01-11T18:01:47Z"
"","6806","ContainerEntityManagerFactoryBean can't find persistence.xml in war file [SPR-2114]","**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[SPR-2114](https://jira.spring.io/browse/SPR-2114?redirect=false)** and commented  Putting the persistence unit (persistence.xml) into a war file as /WEB-INF/classes/META-INF/persistence.xml does not work - the persistence.xml file is not found.  Putting it in as  /META-INF/persistence.xml (in the root of the war file) works.  The spec specifies the following:  ---  A persistence unit is defined by a persistence.xml file. The jar file or directory whose META-INF directory contains the persistence.xml file is termed the root of the persistence unit. In Java EE, the root of a persistence unit may be one of the following: - an EJB-JAR file - the WEB-INF/classes directory of a WAR file[40] - a jar file in the WEB-INF/lib directory of a WAR file - a jar file in the root of the EAR - a jar file in the EAR library directory - an application client jar file  [40] The root of the persistence unit is the WEB-INF/classes directory; the persistence.xml file is therefore contained in the WEB-INF/classes/META-INF directory.  ---  Maybe we have to search the classpath as well.  Here is the stacktrace:  java.lang.IllegalArgumentException: Cannot parse persistence unit from ServletContext resource [/META-INF/persistence.xml] at org.springframework.orm.jpa.PersistenceUnitReader.readPersistenceUnitInfos(PersistenceUnitReader.java:117) at org.springframework.orm.jpa.ContainerEntityManagerFactoryBean.parsePersistenceUnitInfo(ContainerEntityManagerFactoryBean.java:223) at org.springframework.orm.jpa.ContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(ContainerEntityManagerFactoryBean.java:141) at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:232) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:901) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:870) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:393) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:256) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:167) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:219) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:115) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:798) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:589) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:389) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:256) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:167) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:219) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:115) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:798) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:589) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:389) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBeanDefinition(BeanDefinitionValueResolver.java:168) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:111) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:798) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:589) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:389) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:256) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:167) at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findCandidateAdvisors(AbstractAdvisorAutoProxyCreator.java:129) at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.setBeanFactory(AbstractAdvisorAutoProxyCreator.java:61) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:863) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:393) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:256) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:167) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:199) at org.springframework.context.support.AbstractApplicationContext.getBeansOfType(AbstractApplicationContext.java:662) at org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:426) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:317) at org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.refresh(AbstractRefreshableWebApplicationContext.java:156) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:246) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:184) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:49) at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:3692) at org.apache.catalina.core.StandardContext.start(StandardContext.java:4127) at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:759) at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:739) at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:524) at org.apache.catalina.startup.HostConfig.deployDescriptor(HostConfig.java:603) at org.apache.catalina.startup.HostConfig.deployDescriptors(HostConfig.java:535) at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:470) at org.apache.catalina.startup.HostConfig.start(HostConfig.java:1118) at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:310) at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1020) at org.apache.catalina.core.StandardHost.start(StandardHost.java:718) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1012) at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:442) at org.apache.catalina.core.StandardService.start(StandardService.java:450) at org.apache.catalina.core.StandardServer.start(StandardServer.java:680) at org.apache.catalina.startup.Catalina.start(Catalina.java:536) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:275) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:413) Caused by: java.io.FileNotFoundException: Could not open ServletContext resource [/META-INF/persistence.xml] at org.springframework.web.context.support.ServletContextResource.getInputStream(ServletContextResource.java:99) at org.springframework.orm.jpa.PersistenceUnitReader.readPersistenceUnitInfos(PersistenceUnitReader.java:106) ... 65 more  ---  **Affects:** 2.0 M5","closed","type: bug,","spring-projects-issues","2006-06-07T08:16:42Z","2019-01-13T22:47:43Z"
"","6790","spring-jndi.xsd still used in tests and samples [SPR-2097]","**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[SPR-2097](https://jira.spring.io/browse/SPR-2097?redirect=false)** and commented  spring-jndi.xsd still used in tests and samples although it's removed from the distribution and the web.  Should switch these references to the new spring-jee.xsd.   ---  **Affects:** 2.0 M5","closed","type: bug,","spring-projects-issues","2006-06-03T01:16:58Z","2012-06-19T03:52:37Z"
"","6764","Complete SimpleJdbc classes and move out of sandbox [SPR-2072]","**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[SPR-2072](https://jira.spring.io/browse/SPR-2072?redirect=false)** and commented  Complete SqlCommand with tests and javadoc and move out of sandbox  ---  **Issue Links:** - #8518 Document new features in SimpleJdbcTemplate and new SimpleJdbcInsert and SimpleJdbcCall","closed","type: enhancement,","spring-projects-issues","2006-05-29T12:54:28Z","2019-01-11T18:16:35Z"
"","6756","Add clearCache to JpaDialect implementations [SPR-2063]","**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[SPR-2063](https://jira.spring.io/browse/SPR-2063?redirect=false)** and commented  Would be nice to have a method for clearing the cache.  For Hibernate em.clear() does seem to at least clear the first level cache but on TopLink there is some additional calls needed for recouperating all the memory - I ran in to this while looping through large result lists.  There is an example of code needed for TopLink Essentials in ""Pro EJB3"" page 367.  Not sure what is needed for Kodo.   ---  **Affects:** 2.0 RC1","closed","type: enhancement,","spring-projects-issues","2006-05-26T02:49:12Z","2012-06-19T09:37:31Z"
"","6730","SqlOperations doesn't handle a named parameter containing a list of values [SPR-2037]","**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[SPR-2037](https://jira.spring.io/browse/SPR-2037?redirect=false)** and commented  Using a List for a named parameter works for the NamedParametersJdbcTemplate but it does not work for SqlQuery/SqlOperations.  The correct number of placeholders are not expanded to replace the named parameter.   ---  **Affects:** 2.0 M4","closed","type: bug,","spring-projects-issues","2006-05-18T09:24:22Z","2012-06-19T03:52:44Z"
"","6729","No way to ineterrupt a batch using BatchPreparedStatementSetter [SPR-2036]","**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[SPR-2036](https://jira.spring.io/browse/SPR-2036?redirect=false)** and commented  There is currently no way to interrupt the BatchPreparedStatementSetter, we need to know the exact batch size upfront.  I'd like to be able to signal end-of-batch before the batch size has been reached.   ---  **Affects:** 2.0 M4","closed","type: enhancement,","spring-projects-issues","2006-05-18T04:39:02Z","2012-06-19T03:52:42Z"
"","6176","Add ORM support for EJB3 persistence/Java Persistence API [SPR-1477]","**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[SPR-1477](https://jira.spring.io/browse/SPR-1477?redirect=false)** and commented  We need to add the support for the new EJB3 peristence/Java Persistence API.   ---  **Affects:** 1.2.6  2 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2005-11-17T02:53:26Z","2012-06-19T03:54:30Z"
"","6084","IllegalStateException thrown by JBoss 4.0.3 when PROPAGATION_REQUIRES_NEW used during active transaction in MessageBean with BMT [SPR-1384]","**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[SPR-1384](https://jira.spring.io/browse/SPR-1384?redirect=false)** and commented  Deploy a MessageBean that is using BMT.  The following sequence of events in the onMessage() method will cause the IllegalStateException:  1. create TransactionTemplate with PROPAGATION_REQUIRED 2. in the execute do this:    2a. Connection conn = DataSourceUtils.getConnection(ds);    2b. DataSourceUtils.releaseConnection(conn, ds);    2c. call method that does the following:    I. create TransactionTemplate with PROPAGATION_REQUIRES_NEW    II. call execute and the exception is thrown.  Here is the debug and stacktrace:  12:03:50,703 INFO  [STDOUT] MyMessageBean got message! 12:03:50,705 INFO  [STDOUT] // obtain DataSource 12:03:50,707 INFO  [STDOUT] *** Create TransactionManager 12:03:50,900 DEBUG [org.springframework.transaction.jta.JtaTransactionManager] Retrieving JTA UserTransaction from JNDI location [java:comp/UserTransaction] 12:03:50,901 DEBUG [org.springframework.jndi.JndiTemplate] Looking up JNDI object with name [java:comp/UserTransaction] 12:03:50,981 DEBUG [org.springframework.transaction.jta.JtaTransactionManager] Retrieving JTA TransactionManager from JNDI location [java:/TransactionManager] 12:03:50,983 DEBUG [org.springframework.jndi.JndiTemplate] Looking up JNDI object with name [java:/TransactionManager] 12:03:50,985 INFO  [org.springframework.transaction.jta.JtaTransactionManager] Using JTA UserTransaction: org.jboss.ejb.EnterpriseContext$UserTransactionImpl@66d882 12:03:50,987 INFO  [org.springframework.transaction.jta.JtaTransactionManager] Using JTA TransactionManager: org.jboss.tm.TxManager@104e65 12:03:50,988 INFO  [STDOUT] *** Create TransactionTemplate 12:03:50,997 INFO  [STDOUT] *** Propagation=0 12:03:51,005 DEBUG [org.springframework.transaction.jta.JtaTransactionManager] Using transaction object [org.springframework.transaction.jta.JtaTransactionObject@401ab1] 12:03:51,007 DEBUG [org.springframework.transaction.jta.JtaTransactionManager] Creating new transaction with name [null] 12:03:51,017 DEBUG [org.springframework.transaction.support.TransactionSynchronizationManager] Initializing transaction synchronization 12:03:51,026 INFO  [STDOUT] *** doInTransaction org.springframework.transaction.support.DefaultTransactionStatus@bc60f2 12:03:51,056 DEBUG [org.springframework.jdbc.datasource.DataSourceUtils] Fetching JDBC Connection from DataSource 12:03:53,260 DEBUG [org.springframework.jdbc.datasource.DataSourceUtils] Registering transaction synchronization for JDBC Connection 12:03:53,419 DEBUG [org.springframework.transaction.support.TransactionSynchronizationManager] Bound value [org.springframework.jdbc.datasource.ConnectionHolder@2900c9] for key [org.jboss.resource.adapter.jdbc.WrapperDataSource@bf2c98] to thread [JMS SessionPool Worker-0] 12:03:53,420 INFO  [STDOUT] *** doInConnection 12:03:53,420 DEBUG [org.springframework.transaction.support.TransactionSynchronizationManager] Retrieved value [org.springframework.jdbc.datasource.ConnectionHolder@2900c9] for key [org.jboss.resource.adapter.jdbc.WrapperDataSource@bf2c98] bound to thread [JMS SessionPool Worker-0] 12:03:53,421 INFO  [STDOUT] === Create TransactionTemplate 2 12:03:53,422 INFO  [STDOUT] === Propagation=3 12:03:53,424 DEBUG [org.springframework.transaction.jta.JtaTransactionManager] Using transaction object [org.springframework.transaction.jta.JtaTransactionObject@1548ee] 12:03:53,424 DEBUG [org.springframework.transaction.jta.JtaTransactionManager] Suspending current transaction, creating new transaction with name [null] 12:03:53,425 DEBUG [org.springframework.transaction.support.TransactionSynchronizationManager] Removed value [org.springframework.jdbc.datasource.ConnectionHolder@2900c9] for key [org.jboss.resource.adapter.jdbc.WrapperDataSource@bf2c98] from thread [JMS SessionPool Worker-0] 12:03:53,433 DEBUG [org.springframework.transaction.support.TransactionSynchronizationManager] Clearing transaction synchronization 12:03:53,438 DEBUG [org.springframework.transaction.support.TransactionTemplate] Initiating transaction rollback on application exception java.lang.IllegalStateException: Trying to change transaction TransactionImpl:XidImpl[FormatId=257, GlobalId=samoa.local/20, BranchQual=, localId=20] in enlist! at org.jboss.resource.connectionmanager.TxConnectionManager$TxConnectionEventListener.enlist(TxConnectionManager.java:551) at org.jboss.resource.connectionmanager.TxConnectionManager.transactionStarted(TxConnectionManager.java:357) at org.jboss.resource.connectionmanager.CachedConnectionManager.userTransactionStarted(CachedConnectionManager.java:403) at org.jboss.ejb.EnterpriseContext$UserTransactionImpl.begin(EnterpriseContext.java:576) at org.springframework.transaction.jta.JtaTransactionManager.doJtaBegin(JtaTransactionManager.java:664) at org.springframework.transaction.jta.JtaTransactionManager.doBegin(JtaTransactionManager.java:622) at org.springframework.transaction.support.AbstractPlatformTransactionManager.handleExistingTransaction(AbstractPlatformTransactionManager.java:320) at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:262) at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:111) at com.springdeveloper.ejb.MyMessageBean.testSpring2(MyMessageBean.java:95) at com.springdeveloper.ejb.MyMessageBean.access$100(MyMessageBean.java:24) at com.springdeveloper.ejb.MyMessageBean$1.doInTransactionWithoutResult(MyMessageBean.java:80) at org.springframework.transaction.support.TransactionCallbackWithoutResult.doInTransaction(TransactionCallbackWithoutResult.java:33) at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:114) at com.springdeveloper.ejb.MyMessageBean.testSpring(MyMessageBean.java:71) at com.springdeveloper.ejb.MyMessageBean.onMessage(MyMessageBean.java:54) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.jboss.invocation.Invocation.performCall(Invocation.java:345) at org.jboss.ejb.MessageDrivenContainer$ContainerInterceptor.invoke(MessageDrivenContainer.java:475) at org.jboss.resource.connectionmanager.CachedConnectionInterceptor.invoke(CachedConnectionInterceptor.java:149) at org.jboss.ejb.plugins.CallValidationInterceptor.invoke(CallValidationInterceptor.java:48) at org.jboss.ejb.plugins.AbstractTxInterceptor.invokeNext(AbstractTxInterceptor.java:106) at org.jboss.ejb.plugins.AbstractTxInterceptorBMT.invokeNext(AbstractTxInterceptorBMT.java:158) at org.jboss.ejb.plugins.MessageDrivenTxInterceptorBMT.invoke(MessageDrivenTxInterceptorBMT.java:32) at org.jboss.ejb.plugins.MessageDrivenInstanceInterceptor.invoke(MessageDrivenInstanceInterceptor.java:101) at org.jboss.ejb.plugins.RunAsSecurityInterceptor.invoke(RunAsSecurityInterceptor.java:94) at org.jboss.ejb.plugins.LogInterceptor.invoke(LogInterceptor.java:192) at org.jboss.ejb.plugins.ProxyFactoryFinderInterceptor.invoke(ProxyFactoryFinderInterceptor.java:122) at org.jboss.ejb.MessageDrivenContainer.internalInvoke(MessageDrivenContainer.java:389) at org.jboss.ejb.Container.invoke(Container.java:873) at org.jboss.ejb.plugins.jms.JMSContainerInvoker.invoke(JMSContainerInvoker.java:1077) at org.jboss.ejb.plugins.jms.JMSContainerInvoker$MessageListenerImpl.onMessage(JMSContainerInvoker.java:1379) at org.jboss.jms.asf.StdServerSession.onMessage(StdServerSession.java:256) at org.jboss.mq.SpyMessageConsumer.sessionConsumerProcessMessage(SpyMessageConsumer.java:904) at org.jboss.mq.SpyMessageConsumer.addMessage(SpyMessageConsumer.java:160) at org.jboss.mq.SpySession.run(SpySession.java:333) at org.jboss.jms.asf.StdServerSession.run(StdServerSession.java:180) at EDU.oswego.cs.dl.util.concurrent.PooledExecutor$Worker.run(PooledExecutor.java:743) at java.lang.Thread.run(Thread.java:613) 12:03:53,447 DEBUG [org.springframework.transaction.jta.JtaTransactionManager] Triggering beforeCompletion synchronization 12:03:53,448 ERROR [org.springframework.transaction.support.TransactionTemplate] Application exception overridden by rollback exception java.lang.IllegalStateException: Trying to change transaction TransactionImpl:XidImpl[FormatId=257, GlobalId=samoa.local/20, BranchQual=, localId=20] in enlist! at org.jboss.resource.connectionmanager.TxConnectionManager$TxConnectionEventListener.enlist(TxConnectionManager.java:551) at org.jboss.resource.connectionmanager.TxConnectionManager.transactionStarted(TxConnectionManager.java:357) at org.jboss.resource.connectionmanager.CachedConnectionManager.userTransactionStarted(CachedConnectionManager.java:403) at org.jboss.ejb.EnterpriseContext$UserTransactionImpl.begin(EnterpriseContext.java:576) at org.springframework.transaction.jta.JtaTransactionManager.doJtaBegin(JtaTransactionManager.java:664) at org.springframework.transaction.jta.JtaTransactionManager.doBegin(JtaTransactionManager.java:622) at org.springframework.transaction.support.AbstractPlatformTransactionManager.handleExistingTransaction(AbstractPlatformTransactionManager.java:320) at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:262) at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:111) at com.springdeveloper.ejb.MyMessageBean.testSpring2(MyMessageBean.java:95) at com.springdeveloper.ejb.MyMessageBean.access$100(MyMessageBean.java:24) at com.springdeveloper.ejb.MyMessageBean$1.doInTransactionWithoutResult(MyMessageBean.java:80) at org.springframework.transaction.support.TransactionCallbackWithoutResult.doInTransaction(TransactionCallbackWithoutResult.java:33) at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:114) at com.springdeveloper.ejb.MyMessageBean.testSpring(MyMessageBean.java:71) at com.springdeveloper.ejb.MyMessageBean.onMessage(MyMessageBean.java:54) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.jboss.invocation.Invocation.performCall(Invocation.java:345) at org.jboss.ejb.MessageDrivenContainer$ContainerInterceptor.invoke(MessageDrivenContainer.java:475) at org.jboss.resource.connectionmanager.CachedConnectionInterceptor.invoke(CachedConnectionInterceptor.java:149) at org.jboss.ejb.plugins.CallValidationInterceptor.invoke(CallValidationInterceptor.java:48) at org.jboss.ejb.plugins.AbstractTxInterceptor.invokeNext(AbstractTxInterceptor.java:106) at org.jboss.ejb.plugins.AbstractTxInterceptorBMT.invokeNext(AbstractTxInterceptorBMT.java:158) at org.jboss.ejb.plugins.MessageDrivenTxInterceptorBMT.invoke(MessageDrivenTxInterceptorBMT.java:32) at org.jboss.ejb.plugins.MessageDrivenInstanceInterceptor.invoke(MessageDrivenInstanceInterceptor.java:101) at org.jboss.ejb.plugins.RunAsSecurityInterceptor.invoke(RunAsSecurityInterceptor.java:94) at org.jboss.ejb.plugins.LogInterceptor.invoke(LogInterceptor.java:192) at org.jboss.ejb.plugins.ProxyFactoryFinderInterceptor.invoke(ProxyFactoryFinderInterceptor.java:122) at org.jboss.ejb.MessageDrivenContainer.internalInvoke(MessageDrivenContainer.java:389) at org.jboss.ejb.Container.invoke(Container.java:873) at org.jboss.ejb.plugins.jms.JMSContainerInvoker.invoke(JMSContainerInvoker.java:1077) at org.jboss.ejb.plugins.jms.JMSContainerInvoker$MessageListenerImpl.onMessage(JMSContainerInvoker.java:1379) at org.jboss.jms.asf.StdServerSession.onMessage(StdServerSession.java:256) at org.jboss.mq.SpyMessageConsumer.sessionConsumerProcessMessage(SpyMessageConsumer.java:904) at org.jboss.mq.SpyMessageConsumer.addMessage(SpyMessageConsumer.java:160) at org.jboss.mq.SpySession.run(SpySession.java:333) at org.jboss.jms.asf.StdServerSession.run(StdServerSession.java:180) at EDU.oswego.cs.dl.util.concurrent.PooledExecutor$Worker.run(PooledExecutor.java:743) at java.lang.Thread.run(Thread.java:613) 12:03:53,461 INFO  [org.jboss.resource.connectionmanager.CachedConnectionManager] Closing a connection for you.  Please close them yourself: org.jboss.resource.adapter.jdbc.WrappedConnection@d698d3 java.lang.Throwable: STACKTRACE at org.jboss.resource.connectionmanager.CachedConnectionManager.registerConnection(CachedConnectionManager.java:333) at org.jboss.resource.connectionmanager.BaseConnectionManager2.allocateConnection(BaseConnectionManager2.java:482) at org.jboss.resource.connectionmanager.BaseConnectionManager2$ConnectionManagerProxy.allocateConnection(BaseConnectionManager2.java:894) at org.jboss.resource.adapter.jdbc.WrapperDataSource.getConnection(WrapperDataSource.java:73) at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:107) at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:77) at com.springdeveloper.ejb.MyMessageBean$1.doInTransactionWithoutResult(MyMessageBean.java:76) at org.springframework.transaction.support.TransactionCallbackWithoutResult.doInTransaction(TransactionCallbackWithoutResult.java:33) at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:114) at com.springdeveloper.ejb.MyMessageBean.testSpring(MyMessageBean.java:71) at com.springdeveloper.ejb.MyMessageBean.onMessage(MyMessageBean.java:54) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.jboss.invocation.Invocation.performCall(Invocation.java:345) at org.jboss.ejb.MessageDrivenContainer$ContainerInterceptor.invoke(MessageDrivenContainer.java:475) at org.jboss.resource.connectionmanager.CachedConnectionInterceptor.invoke(CachedConnectionInterceptor.java:149) at org.jboss.ejb.plugins.CallValidationInterceptor.invoke(CallValidationInterceptor.java:48) at org.jboss.ejb.plugins.AbstractTxInterceptor.invokeNext(AbstractTxInterceptor.java:106) at org.jboss.ejb.plugins.AbstractTxInterceptorBMT.invokeNext(AbstractTxInterceptorBMT.java:158) at org.jboss.ejb.plugins.MessageDrivenTxInterceptorBMT.invoke(MessageDrivenTxInterceptorBMT.java:32) at org.jboss.ejb.plugins.MessageDrivenInstanceInterceptor.invoke(MessageDrivenInstanceInterceptor.java:101) at org.jboss.ejb.plugins.RunAsSecurityInterceptor.invoke(RunAsSecurityInterceptor.java:94) at org.jboss.ejb.plugins.LogInterceptor.invoke(LogInterceptor.java:192) at org.jboss.ejb.plugins.ProxyFactoryFinderInterceptor.invoke(ProxyFactoryFinderInterceptor.java:122) at org.jboss.ejb.MessageDrivenContainer.internalInvoke(MessageDrivenContainer.java:389) at org.jboss.ejb.Container.invoke(Container.java:873) at org.jboss.ejb.plugins.jms.JMSContainerInvoker.invoke(JMSContainerInvoker.java:1077) at org.jboss.ejb.plugins.jms.JMSContainerInvoker$MessageListenerImpl.onMessage(JMSContainerInvoker.java:1379) at org.jboss.jms.asf.StdServerSession.onMessage(StdServerSession.java:256) at org.jboss.mq.SpyMessageConsumer.sessionConsumerProcessMessage(SpyMessageConsumer.java:904) at org.jboss.mq.SpyMessageConsumer.addMessage(SpyMessageConsumer.java:160) at org.jboss.mq.SpySession.run(SpySession.java:333) at org.jboss.jms.asf.StdServerSession.run(StdServerSession.java:180) at EDU.oswego.cs.dl.util.concurrent.PooledExecutor$Worker.run(PooledExecutor.java:743) at java.lang.Thread.run(Thread.java:613) 12:03:53,473 ERROR [org.jboss.ejb.plugins.MessageDrivenTxInterceptorBMT] Application error: BMT stateless bean MyMessageBean should complete transactions before returning (ejb1.1 spec, 11.6.1) 12:03:53,478 ERROR [org.jboss.ejb.plugins.jms.JMSContainerInvoker] Exception in JMSCI message listener javax.ejb.EJBException: null; CausedByException is: Application error: BMT stateless bean MyMessageBean should complete transactions before returning (ejb1.1 spec, 11.6.1) at org.jboss.ejb.plugins.LogInterceptor.handleException(LogInterceptor.java:411) at org.jboss.ejb.plugins.LogInterceptor.invoke(LogInterceptor.java:196) at org.jboss.ejb.plugins.ProxyFactoryFinderInterceptor.invoke(ProxyFactoryFinderInterceptor.java:122) at org.jboss.ejb.MessageDrivenContainer.internalInvoke(MessageDrivenContainer.java:389) at org.jboss.ejb.Container.invoke(Container.java:873) at org.jboss.ejb.plugins.jms.JMSContainerInvoker.invoke(JMSContainerInvoker.java:1077) at org.jboss.ejb.plugins.jms.JMSContainerInvoker$MessageListenerImpl.onMessage(JMSContainerInvoker.java:1379) at org.jboss.jms.asf.StdServerSession.onMessage(StdServerSession.java:256) at org.jboss.mq.SpyMessageConsumer.sessionConsumerProcessMessage(SpyMessageConsumer.java:904) at org.jboss.mq.SpyMessageConsumer.addMessage(SpyMessageConsumer.java:160) at org.jboss.mq.SpySession.run(SpySession.java:333) at org.jboss.jms.asf.StdServerSession.run(StdServerSession.java:180) at EDU.oswego.cs.dl.util.concurrent.PooledExecutor$Worker.run(PooledExecutor.java:743) at java.lang.Thread.run(Thread.java:613) java.rmi.RemoteException: Application error: BMT stateless bean MyMessageBean should complete transactions before returning (ejb1.1 spec, 11.6.1) at org.jboss.ejb.plugins.AbstractTxInterceptorBMT.checkStatelessDone(AbstractTxInterceptorBMT.java:225) at org.jboss.ejb.plugins.AbstractTxInterceptorBMT.invokeNext(AbstractTxInterceptorBMT.java:165) at org.jboss.ejb.plugins.MessageDrivenTxInterceptorBMT.invoke(MessageDrivenTxInterceptorBMT.java:32) at org.jboss.ejb.plugins.MessageDrivenInstanceInterceptor.invoke(MessageDrivenInstanceInterceptor.java:101) at org.jboss.ejb.plugins.RunAsSecurityInterceptor.invoke(RunAsSecurityInterceptor.java:94) at org.jboss.ejb.plugins.LogInterceptor.invoke(LogInterceptor.java:192) at org.jboss.ejb.plugins.ProxyFactoryFinderInterceptor.invoke(ProxyFactoryFinderInterceptor.java:122) at org.jboss.ejb.MessageDrivenContainer.internalInvoke(MessageDrivenContainer.java:389) at org.jboss.ejb.Container.invoke(Container.java:873) at org.jboss.ejb.plugins.jms.JMSContainerInvoker.invoke(JMSContainerInvoker.java:1077) at org.jboss.ejb.plugins.jms.JMSContainerInvoker$MessageListenerImpl.onMessage(JMSContainerInvoker.java:1379) at org.jboss.jms.asf.StdServerSession.onMessage(StdServerSession.java:256) at org.jboss.mq.SpyMessageConsumer.sessionConsumerProcessMessage(SpyMessageConsumer.java:904) at org.jboss.mq.SpyMessageConsumer.addMessage(SpyMessageConsumer.java:160) at org.jboss.mq.SpySession.run(SpySession.java:333) at org.jboss.jms.asf.StdServerSession.run(StdServerSession.java:180) at EDU.oswego.cs.dl.util.concurrent.PooledExecutor$Worker.run(PooledExecutor.java:743) at java.lang.Thread.run(Thread.java:613)  ---  **Affects:** 1.2.5  **Issue Links:** - #9591 CLONE -IllegalStateException thrown by JBoss 4.0.5.11 when PROPAGATION_REQUIRES_NEW used during active transaction in MessageBean with BMT (_**""is duplicated by""**_) - #8755 PROPAGATION_REQUIRES_NEW fails on JBoss 4.2.1 when using Hibernate connection release mode ""on_close""","closed","type: bug,","spring-projects-issues","2005-10-15T03:16:56Z","2019-01-11T21:19:26Z"
"","6068","CallableStatementCreatorFactory#cleanupParameters() NPE [SPR-1368]","**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[SPR-1368](https://jira.spring.io/browse/SPR-1368?redirect=false)** and commented  see forum post: http://forum.springframework.org/viewtopic.php?p=37359#37359  I am using a StoredProcedure implementation with a ParameterMapper. I have encountered a NullPointerException when the ParameterMapper#createMap() throws an exception before returning the transformed map.  The cause is that the _inParameters attribute has not yet been set and so is null when #cleanupParameters is called:  Code:  public void cleanupParameters() { StatementCreatorUtils.cleanupParameters(this.inParameters.values()); }  In the CallableStatementCreatorFactory#CallableStatementCreatorImpl inner class, the following can prevent the NPE. Code:  public CallableStatement createCallableStatement(Connection con) throws SQLException {      if (this.inParameterMapper != null) {         this.inParameters = new HashMap();         this.inParameters = this.inParameterMapper.createMap(con);     }     else {         if (this.inParameters == null) {             throw new InvalidDataAccessApiUsageException(             ""A ParameterMapper or a Map of parameters must be provided"");         }     }  ......  The issue is that the original exception (which required the parameters to be cleaned) is ""hidden"" by the NPE. Bummer to debug.   ---  **Affects:** 1.2.5","closed","type: bug,","spring-projects-issues","2005-10-11T03:14:09Z","2012-06-19T03:54:33Z"
"","5962","Improve sql-error-codes.xml [SPR-1260]","**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[SPR-1260](https://jira.spring.io/browse/SPR-1260?redirect=false)** and commented  Add error codes to sql-error-codes.xml to improve exception translation.  Just attach a comment to this issue including the database name, error code/sql state and the Exception that it should be translated into.   ---  **Affects:** 2.0 M1  **Attachments:** - [error-codes.patch](https://jira.spring.io/secure/attachment/11516/error-codes.patch) (_4.23 kB_)","closed","type: enhancement,","spring-projects-issues","2005-08-29T02:11:17Z","2012-06-19T03:53:56Z"
"","6117","Bean definition circles checker [SPR-1417]","**[Thomas Jacob](https://jira.spring.io/secure/ViewProfile.jspa?name=thereincarnator)** opened **[SPR-1417](https://jira.spring.io/browse/SPR-1417?redirect=false)** and commented  I'd like to propose an extension that checks for circles in the bean graph. Currently, if bean A references bean B references bean A, AOP fails in some cases (the proxy is just missing). There is no warning for this effect, so transactions, hibernate sessions, and so on are silently missing in some beans. This is potentially dangerous (e.g. for transactions). I'd like to have a feature (configured by a switch in the context loader or equivalent) to fail if any circle exists.  I provide an example implementation that is not complete because auto-wiring is not considered. This implementation is a custom web application context. I guess a different place to plug-in is desirable.  package de.s2i.fue.commerce.example;  import java.util.ArrayList; import java.util.Collection; import java.util.HashMap; import java.util.HashSet; import java.util.Iterator; import java.util.List; import java.util.Map; import java.util.Set;  import org.springframework.beans.BeansException; import org.springframework.beans.PropertyValue; import org.springframework.beans.factory.config.RuntimeBeanReference; import org.springframework.beans.factory.support.BeanDefinitionValidationException; import org.springframework.beans.factory.support.ManagedList; import org.springframework.beans.factory.support.ManagedMap; import org.springframework.beans.factory.support.ManagedSet; import org.springframework.web.context.support.XmlWebApplicationContext;  /** * FIXME: Document this type.  *   * `@author` thomas   */   public class CirclesCheckingApplicationContext extends XmlWebApplicationContext   {   private List\ getBeanNamesReachedByValue(Object value)   {   List\ beanNames = new ArrayList\();         if (value instanceof RuntimeBeanReference)        {        	beanNames.add(((RuntimeBeanReference) value).getBeanName());        }        else if (value instanceof ManagedList || value instanceof ManagedSet)        {        	Iterator iterator = ((Collection) value).iterator();        	while (iterator.hasNext())        	{        		beanNames.addAll(getBeanNamesReachedByValue(iterator.next()));        	}        }        else if (value instanceof ManagedMap)        {        	Iterator iterator = ((Map) value).values().iterator();        	while (iterator.hasNext())        	{        		beanNames.addAll(getBeanNamesReachedByValue(iterator.next()));        	}        }               return beanNames;    }    /**    * FIXME: Document this method.    *     * `@param` string    * `@return`     */     private List\ getReferees(String beanName)     {     List\ referees = new ArrayList\();      PropertyValue[] propertyValues = getBeanFactory().getBeanDefinition(beanName).getPropertyValues()     .getPropertyValues();     for (int i = 0; i < propertyValues.length; i++)     {     Object value = propertyValues[i].getValue();     referees.addAll(getBeanNamesReachedByValue(value));     }      return referees;     }    /*    * (non-Javadoc)    *     * `@see` org.springframework.web.context.support.AbstractRefreshableWebApplicationContext#refresh()     */     public void refresh() throws BeansException     {     super.refresh();      Map nodes = new HashMap();      String[] beanDefinitionNames = getBeanDefinitionNames();     for (int i = 0; i < beanDefinitionNames.length; i++)     {     Node node = new Node();     node.name = beanDefinitionNames[i];     node.referees = getReferees(node.name);     nodes.put(node.name, node);     }      for (Node node : nodes.values())     {     Set\ visitedSet = new HashSet\();     List\ visitedList = new ArrayList\();     visitNode(nodes, node, visitedSet, visitedList);     }     }    /**    * FIXME: Document this method.    *     * `@param` node    * `@param` visited     */     private void visitNode(Map nodes, Node node, Set\ visitedSet, List\ visitedList)     throws BeanDefinitionValidationException     {     if (visitedSet.contains(node.name))     {     StringBuffer buffer = new StringBuffer();     Iterator iterator = visitedList.iterator();     while (iterator.hasNext())     {     buffer.append(iterator.next());     buffer.append("" -> "");     }           buffer.append(node.name);                   throw new BeanDefinitionValidationException(""Circle in bean definition detected: "" + buffer.toString());      }      visitedList.add(node.name);     boolean added = visitedSet.add(node.name);      for (String referee : node.referees)     {     visitNode(nodes, nodes.get(referee), visitedSet, visitedList);     }      if (added)     {     visitedSet.remove(node.name);     }      visitedList.remove(visitedList.size() - 1);     }    private class Node   {   private String name;        private List referees = new ArrayList();    }   }    --- No further details from [SPR-1417](https://jira.spring.io/browse/SPR-1417?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-10-24T21:06:04Z","2012-06-19T09:37:25Z"
"","6460","PropertyEditorRegistrar: incorrect JavaDoc [SPR-1762]","**[Taras Tielkes](https://jira.spring.io/secure/ViewProfile.jspa?name=plethora)** opened **[SPR-1762](https://jira.spring.io/browse/SPR-1762?redirect=false)** and commented  In 1.2.7, part of the class JavaDoc for org.springframework.beans.PropertyEditorRegistrar reads:  ---  *   \Serves as super-interface for the BeanWrapper interface. * Implemented by BeanWrapperImpl and also by the DataBinder class * in the validation package.  ---  This text applies to the PropertyEditorRegistry interface, not the PropertyEditorRegistrar. In fact, as of 1.2.7, there are no implementations or subinterfaces of PropertyEditorRegistrar shipped with the distribution.  ---  **Affects:** 1.2.7","closed","in: core,","spring-projects-issues","2006-03-05T00:58:45Z","2019-01-13T22:48:43Z"
"","6426","Allow PropertyEditors to transform null values to alternative representation (empty Collection, empty array, domain specific NullObject, et cetera) [SPR-1729]","**[Taras Tielkes](https://jira.spring.io/secure/ViewProfile.jspa?name=plethora)** opened **[SPR-1729](https://jira.spring.io/browse/SPR-1729?redirect=false)** and commented  The wide variation of domain models includes many flavors of representing null/nil members/relationships.  Among the various approaches are: -Empty Collection members -Empty array members -Domain model specific NullObject pattern applications  We've been heavily using the PropertyEditor support in Spring MVC for binding directly to real domain model classes. One of the missing (IMHO) pieces of functionality is more control over translating null values.  Scenario: -Domain object has a member of type Collection (or subtype): for instance: the Roles assigned to a User -Web form presents all possible selections, and indicates which are currently assigned (select multiple or a set of checkboxes) -Controller class registers a CustomCollectionEditor for the ""roles"" property  When the form is submitted with all roles deselected, no HTTP parameters are sent. A common solution for this is to use the ""field marker"" support in WebDataBinder. This support adds a PropertyValue with value **null** to the current binding operation.  The current implemetation of BeanWrapperImpl has conditional blocks checking for a **null** value. In such a case, custom editors are never invoked.  This request comes down to giving registered editors a chance to process **null** values. Especially for editors like CustomCollectionEditor, being able to return an empty List, an empty Set or a NullObject instance would be a great improvement.    ---  **Affects:** 1.2.6","closed","type: enhancement,","spring-projects-issues","2006-02-18T05:46:31Z","2012-06-19T03:54:29Z"
"","6159","message tag should not force CSV args to type String [SPR-1460]","**[Taras Tielkes](https://jira.spring.io/secure/ViewProfile.jspa?name=plethora)** opened **[SPR-1460](https://jira.spring.io/browse/SPR-1460?redirect=false)** and commented  The spring:message tag supports passing an argument array in the form of a comma-delimited string. Each fragment may be an EL expression, which is evaluated using ExpressionEvaluationUtils.evaluateString().  The downside of this approach is that the result values of the expressions are allways coerced to type String. This is a limitation, since some format messages require the passed-in arguments to be of a specific type (for instance Number).  An exaple (See the java.text.MessageFormat javadoc for details):  ---  some.message.key = {0,number,##):{1,number,00} hrs  ---  If ExpressionEvaluationUtils.evaluate() is used with a 'resultClass' parameter 'java.lang.Object', the 'natural' result type of the expression is retained. In above example, an expression ${1+2} would result in a result value of type java.lang.Long.  This would extend the usefullness of this tag to more specific message format patterns.  ---  **Affects:** 1.2.5","closed","type: enhancement,","spring-projects-issues","2005-11-10T05:50:35Z","2019-01-13T22:50:12Z"
"","6131","PROPAGATION_MANDATORY not respected when another transaction for different DataSource in progress (using DataSourceTransactionManager) [SPR-1431]","**[Taras Tielkes](https://jira.spring.io/secure/ViewProfile.jspa?name=plethora)** opened **[SPR-1431](https://jira.spring.io/browse/SPR-1431?redirect=false)** and commented  A context contains two dataSources: ds1 and ds2 The context contains two transactional components that perform database access: c1 and c2. c1 gets a reference to ds1 and has propagation REQUIRED c2 gets a reference to ds2 and has propagation MANDATORY  During the execution flow through c1, c1 makes a call to c2. Because the components have differenct dataSources, a new transaction is started for c2. As the code uses a DataSourceTransactionManager, the two transactions are not coordinated.  Since the transactional proxy definition for c2 has propagation level MANDATORY, I would expect an IllegalTransactionStateException. Starting execution in c2 (and not touching c1 in any way) does trigger the expected exception.  In summary, MANADATORY seems not to be respected when an (unrelated, having different datasource) transaction is already in progress for the current thread.   ---  **Affects:** 1.2.5","closed","status: declined,","spring-projects-issues","2005-11-02T06:20:00Z","2019-01-12T16:29:55Z"
"","6508","No way to configure custom net.sf.cglib.proxy.Enhancer with Spring framework. [SPR-1814]","**[Tapshil Desai](https://jira.spring.io/secure/ViewProfile.jspa?name=tisalph)** opened **[SPR-1814](https://jira.spring.io/browse/SPR-1814?redirect=false)** and commented  In my project I have requirement for transaction management. So I am using TransactionProxyFactoryBean for it. Now the restriction is with target class. This target class doesn't implement any interface and it has static factory method and private constructor. So we have to use CGLIB library to create proxy. But when the code executed what I found was that Spring (net.sf.cglib.proxy.Enhancer) is throwing error ""No visible constructor...""  The javadoc of net.sf.cglib.proxy.Enhancer.filterConstructors says, ""The default implementation is to filter out all private constructors, but subclasses may extend Enhancer to override this behavior."" So this Enhancer has to be extended to override default behavior.  Now the problem is with org.springframework.aop.framework.Cglib2AopProxy's getProxy(ClassLassLoader classLoader) method. This method instantiates Enhancer object in it directly. And I have not found any way to configure custom Enhancer with Spring framework.   ---  **Affects:** 1.2.7","closed","type: enhancement,","spring-projects-issues","2006-03-23T01:44:59Z","2012-06-19T03:54:41Z"
"","6457","JPetStore need to configure SqlMapSequenceDao#getNextId is synchronized. [SPR-1759]","**[Takayuki Kaneko](https://jira.spring.io/secure/ViewProfile.jspa?name=kanekotky)** opened **[SPR-1759](https://jira.spring.io/browse/SPR-1759?redirect=false)** and commented  SqlMapSequenceDao#getNextId must be synchronized because this method need to be protected from concurrency.  I suggest followings.  - Add synchronized declaration on getNextId method. - Add singleton declaration on bean definition.  Regards,   ---  **Affects:** 1.2.7","closed","type: enhancement,","spring-projects-issues","2006-03-03T17:22:01Z","2007-07-20T20:34:09Z"
"","6439","JPetStore doesn't work correctly on Application Server Clustering. [SPR-1742]","**[Takayuki Kaneko](https://jira.spring.io/secure/ViewProfile.jspa?name=kanekotky)** opened **[SPR-1742](https://jira.spring.io/browse/SPR-1742?redirect=false)** and commented  HttpSession#setAttribute have to be called when Cart object is updated. Almost application servers use this method to decide whether they replicate objects.  The patch is below.  *** UpdateCartQuantitiesController.java Sat Feb 25 23:14:49 2006 --- UpdateCartQuantitiesController.java.modify  Sat Feb 25 23:16:53 2006  ***************  *** 34,39 **** --- 34,40 ---- //ignore on purpose } } +        WebUtils.setSessionAttribute(request, ""sessionCart"", cart);             return new ModelAndView(""Cart"", ""cart"", cart);     }    --- No further details from [SPR-1742](https://jira.spring.io/browse/SPR-1742?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-02-25T00:28:40Z","2012-06-19T03:54:41Z"
"","6452","JPetStore: Next link doesn't appear on /war/WEB-INF/jsp/spring/Cart.jsp [SPR-1755]","**[Takayoshi Kimura](https://jira.spring.io/secure/ViewProfile.jspa?name=nekop)** opened **[SPR-1755](https://jira.spring.io/browse/SPR-1755?redirect=false)** and commented  ""Next"" link in /war/WEB-INF/jsp/spring/Cart.jsp never appear. The jsp examines wrong condition.  Index: samples/jpetstore/war/WEB-INF/jsp/spring/Cart.jsp  ---  RCS file: /cvsroot/springframework/spring/samples/jpetstore/war/WEB-INF/jsp/spring/Cart.jsp,v retrieving revision 1.1 diff -u -r1.1 Cart.jsp --- samples/jpetstore/war/WEB-INF/jsp/spring/Cart.jsp   4 Dec 2003 08:44:22 -0000       1.1 +++ samples/jpetstore/war/WEB-INF/jsp/spring/Cart.jsp   3 Mar 2006 05:40:06 -0000 @@ -57,7 +57,7 @@  \\<< Prev\\  -   +    \\Next >>\\     \  ---  **Affects:** 1.2.7  **Attachments:** - [Cart.jsp.patch](https://jira.spring.io/secure/attachment/11477/Cart.jsp.patch) (_851 bytes_)","closed","type: bug,","spring-projects-issues","2006-03-02T15:44:05Z","2019-01-13T22:48:45Z"
"","6249","JPetstore OrderForm must be Serializable [SPR-1551]","**[Takayoshi Kimura](https://jira.spring.io/secure/ViewProfile.jspa?name=nekop)** opened **[SPR-1551](https://jira.spring.io/browse/SPR-1551?redirect=false)** and commented  The OrderForm class stored in HttpSession because isSessionForm() == true. It must implement java.io.Serializable.   ---  **Affects:** 1.2.6","closed","type: bug,","spring-projects-issues","2005-12-19T18:52:16Z","2012-06-19T03:54:35Z"
"","6761","ResultSetWrappingSqlRowSetMetaData not serializable [SPR-2069]","**[Sven Welte](https://jira.spring.io/secure/ViewProfile.jspa?name=s_welte)** opened **[SPR-2069](https://jira.spring.io/browse/SPR-2069?redirect=false)** and commented  Using SqlRowSet in a distributed environment fails because ResultSetWrappingSqlRowSetMetaData is not serializable:  ""Caused by: java.io.NotSerializableException: org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSetMetaData""  Excerpt from ResultSetWrappingSqlRowSet(ResultSet.java: public ResultSetWrappingSqlRowSet(ResultSet resultSet) throws InvalidResultSetAccessException { this.resultSet = resultSet; try { this.rowSetMetaData = new ResultSetWrappingSqlRowSetMetaData(resultSet.getMetaData()); } catch (SQLException se) { throw new InvalidResultSetAccessException(se); } }  A new ResultSetWrappingSqlRowSetMetaData-Object is created making ResultSetWrappingSqlRowSet unserializable.  Suggested fix: make ResultSetWrappingSqlRowSetMetaData serializable   ---  **Affects:** 2.0 M4  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2006-05-28T14:08:42Z","2015-12-06T17:39:21Z"
"","6181","StringUtils.cleanPath(): typo in javadoc [SPR-1482]","**[Sven Ehrke](https://jira.spring.io/secure/ViewProfile.jspa?name=sven.ehrke)** opened **[SPR-1482](https://jira.spring.io/browse/SPR-1482?redirect=false)** and commented  I think there is a typo The javadoc of StringUtils.cleanPath():  notice that Windows separators (""\"") are replaced by simple dashes  I guess that 'simple dashes' should be replaced with 'slashes'    ---  **Affects:** 1.2.6","closed","type: enhancement,","spring-projects-issues","2005-11-18T16:25:41Z","2012-06-19T03:54:35Z"
"","6786","allow log4j.property placeholders to be resolved from Servlet Context init parameters [SPR-2093]","**[Sue Pharoah](https://jira.spring.io/secure/ViewProfile.jspa?name=spharoah)** opened **[SPR-2093](https://jira.spring.io/browse/SPR-2093?redirect=false)** and commented  You can replace the location of the application root for the location of the logfile in log4.properties using the contextParam webAppRootKey in web.xml. It would be very nice to be able to replace other placeholders in log4j.properties using values from contextParams in web.xml. For example we might require a port number for a sockethubappender, or a mail host/user for SMTP. These might vary by application, so not suitable for system properties. I do not want to use ant to substitute values as we want to have a single tested EAR file for delivery and deployment, which is not edited prior to deliver.deployment, whereas a customer can override web.xml params using deployment plan. I see the function Log4jWebConfigurer.initLogging calls SystemPropertyUtils.resolvePlaceholders ro resolve placeholders. Is it possible to add to this to have properties resolved from contextInit parameters? Thanks   ---  **Affects:** 2.0 M4","closed","type: enhancement,","spring-projects-issues","2006-06-02T02:07:09Z","2006-06-19T20:14:39Z"
"","6268","Failed to switch from old transaction config to new tx:advice config [SPR-1570]","**[steven](https://jira.spring.io/secure/ViewProfile.jspa?name=xml2008)** opened **[SPR-1570](https://jira.spring.io/browse/SPR-1570?redirect=false)** and commented  Throw exception: org.springframework.dao.InvalidDataAccessApiUsageException: Write operations are not allowed in read-only mode (FlushMode.NEVER) - turn your Session into FlushMode.AUTO or remove 'readOnly' marker from transaction definition  I am using OpenSessionInViewFilter. When I use the old transaction config method, every thing is OK. But when I converted the config to use the new tx:advice style, the above exception is thrown when doing database update.  I have  tryied to solve the problem with a customized OpenSessionInViewFilter implementation as the following code shows (it does works, but I am not sure what is the real problem) :  public class OpenSessionInViewFilter extends org.springframework.orm.hibernate3.support.OpenSes sionInViewFilter { protected Session getSession(SessionFactory sessionFactory) throws DataAccessResourceFailureException { Session session = SessionFactoryUtils.getSession(sessionFactory, true); session.setFlushMode(FlushMode.AUTO); return session; }  protected void closeSession(Session session, SessionFactory sessionFactory) { session.flush(); SessionFactoryUtils.releaseSession(session, sessionFactory); } }   ---  **Affects:** 2.0 M1","closed","in: data,","spring-projects-issues","2005-12-24T01:27:08Z","2019-01-11T21:39:05Z"
"","6563","commas cause problems in multiple selection list boxes if form holds result in array of strings [SPR-1869]","**[Steven Ratering](https://jira.spring.io/secure/ViewProfile.jspa?name=ratering)** opened **[SPR-1869](https://jira.spring.io/browse/SPR-1869?redirect=false)** and commented  When one item with one or more commas is selected from a multiple selection list box, e.g., ""chorus, band, orchestra"", an array of strings is returned, e.g., {""chorus"", ""band"", ""orchestra""}.  The item with commas is preserved if several items are selected or if the form holds the items in List\ rather than String [ ].   --- No further details from [SPR-1869](https://jira.spring.io/browse/SPR-1869?redirect=false)","closed","type: bug,","spring-projects-issues","2006-04-07T05:55:00Z","2019-01-13T08:55:47Z"
"","6847","In an ApplicationContext hierarchy, children by default should use the parent ClassLoader [SPR-2156]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-2156](https://jira.spring.io/browse/SPR-2156?redirect=false)** and commented  In an ApplicationContext hierarchy children currently by default use the system ClassLoader. If the parent ApplicationContext is configured to use a custom ClassLoader this will cause failure since classes loaded by different ClassLoaders are not equal.  To this effect layered applications would break. The solution would be to let children by default use the parent ApplicationContext ClassLoader.  ---  **Affects:** 2.0 M5  **Issue Links:** - #6858 ClassLoader handling for schema and handler resources is inconsistent (_**""depends on""**_)","closed","type: enhancement,","spring-projects-issues","2006-06-19T05:24:26Z","2019-01-11T18:00:55Z"
"","6817","Hibernate Session created with alwaysUseNewSession=true is not closed in deferredClose mode [SPR-2126]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-2126](https://jira.spring.io/browse/SPR-2126?redirect=false)** and commented  This affects Hibernate2/Hibernate3:  When configuring HibernateTemplate with alwaysUseNewSession=true and in deferredClose mode, newly created Sessions are not closed at the end of the execute() method. Instead, they are registered for deferred close and remain open until the request ends.  Bug is in the SessionFactoryUtils.closeSessionOrRegisterDeferredClose() method of the hibernate and hibernate3 packages.   ---  **Affects:** 1.2.8, 2.0 M5","closed","type: bug,","spring-projects-issues","2006-06-12T02:18:38Z","2012-06-19T03:52:44Z"
"","6411","@within() and @annotation() do not match with objects that should match [SPR-1714]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-1714](https://jira.spring.io/browse/SPR-1714?redirect=false)** and commented  This the configuration:                                                                                                         This it DeprecationLogger:  public class DeprecationLogger { private static Log log = LogFactory.getLog(DeprecationLogger.class);      public void logWarningForUsageOfDeprecatedClass(Deprecated annotation) {         log.info(""Usage of deprecated class or method."");     }  }  This is DeprecatedClass:  `@Deprecated` public class DeprecatedClass { private static Log log = LogFactory.getLog(DeprecatedClass.class);      public void doOperation() {         log.info(""Executing deprecated operation."");     }  }  This is ClassWithDeprecatedMethod:  public class ClassWithDeprecatedMethod { `@Deprecated` public void doDeprecatedOperation() {      }  }  This is my test case:  public class DeprecatedClassIntegrationTests extends AbstractDependencyInjectionSpringContextTests { protected String[] getConfigLocations() { return new String[] { ""classpath:deprecated-context.xml"" }; }      private DeprecatedClass deprecatedClass;          public void setDeprecatedClass(DeprecatedClass deprecatedClass) {         this.deprecatedClass = deprecatedClass;     }          private ClassWithDeprecatedMethod classWithDeprecatedMethod;          public void setClassWithDeprecatedMethod(ClassWithDeprecatedMethod classWithDeprecatedMethod) {         this.classWithDeprecatedMethod = classWithDeprecatedMethod;     }          public void testDeprecatedClassIsAopProxy() {         assertTrue(AopUtils.isAopProxy(this.deprecatedClass));     }          public void testClassWithDeprecatedMethodIsAopProxy() {         assertTrue(AopUtils.isAopProxy(this.classWithDeprecatedMethod));     }          public void testDoOperation() {         this.deprecatedClass.doOperation();     }          public void testDoDeprecatedOperation() {         this.classWithDeprecatedMethod.doDeprecatedOperation();     }          private DeprecationLogger deprecationLogger;          public void setDeprecationLogger(DeprecationLogger deprecationLogger) {         this.deprecationLogger = deprecationLogger;     }          public void testDeprecationLoggerNotAopProxy() {         assertFalse(AopUtils.isAopProxy(deprecationLogger));     }  }  This test fails on testDeprecatedClassIsAopProxy and testClassWithDeprecatedMethodIsAopProxy while testDoOperation and testDoDeprecatedOperation do not produce any log messages.  It seems like `@within`() and `@annotation`() don't pick up the annotations on the target classes. Toggle the debug option on the compiler does affect the test results.   ---  **Affects:** 2.0 M2","closed","in: core,","spring-projects-issues","2006-02-14T22:40:27Z","2012-06-19T03:54:27Z"
"","6399","Move cache provider SPI from Spring Modules to Spring [SPR-1702]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-1702](https://jira.spring.io/browse/SPR-1702?redirect=false)** and commented  Move cache provider SPI from Spring Modules to Spring.  Interfaces are checked in the sandbox under the org.springframework.cache package.   ---  **Affects:** 2.0 M3","closed","type: enhancement,","spring-projects-issues","2006-02-13T01:44:05Z","2009-02-17T19:01:08Z"
"","6398","Move methods of ObjectUtils in Spring Modules to ObjectUtils in Spring [SPR-1701]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-1701](https://jira.spring.io/browse/SPR-1701?redirect=false)** and commented  Move methods of ObjectUtils in Spring Modules to ObjectUtils in Spring.   ---  **Affects:** 2.0 M3  **Attachments:** - [Objects.java](https://jira.spring.io/secure/attachment/11460/Objects.java) (_25.61 kB_) - [ObjectsTests.java](https://jira.spring.io/secure/attachment/11463/ObjectsTests.java) (_18.54 kB_)","closed","type: enhancement,","spring-projects-issues","2006-02-13T01:19:53Z","2012-06-19T03:54:28Z"
"","6397","Move removeDuplicates() method from Spring Modules to StringUtils [SPR-1700]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-1700](https://jira.spring.io/browse/SPR-1700?redirect=false)** and commented  Move the removeDuplicates method from Spring Modules to StringUtils.   ---  **Affects:** 2.0 M3  **Attachments:** - [Strings.java](https://jira.spring.io/secure/attachment/11461/Strings.java) (_1.41 kB_) - [StringsTests.java](https://jira.spring.io/secure/attachment/11462/StringsTests.java) (_1.72 kB_)","closed","type: enhancement,","spring-projects-issues","2006-02-13T00:54:34Z","2012-06-19T03:54:00Z"
"","6381","AOP 2.0 afterReturning advice doesn't get invoked [SPR-1683]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-1683](https://jira.spring.io/browse/SPR-1683?redirect=false)** and commented  After returning advice in AOP 2.0 just doesn't work in M2. This is my configuration:                                                                                        This is the target:  public class SecurityManager { public boolean authenticate(String username, String password) { //        return RandomUtils.nextBoolean(); return false; }      public boolean authenticate(int userId, String password) {         return RandomUtils.nextBoolean();     }  }  This is the POJO advice:  public class AuthenticationLogger { private static Log log = LogFactory.getLog(AuthenticationLogger.class);      public void logAuthenticationAttempt(int userId) {         log.info(""User ID ["" + userId + ""] attempts to authenticate."");     }          public void logAuthenticationAttempt(String username) {         log.info(""User ["" + username + ""] attempts to authenticate."");     }          public void handleAuthenticationOutcome(boolean result) {         handleAuthenticationOutcome(result, ""someUser"");     }          public void handleAuthenticationOutcome(boolean result, String username) {         if (!result) {             log.info(""User ["" + username + ""] failed to log in."");         }     }  }  I don't get any exception, toggling the debug option of the compiler doesn't make it better or worse. The before advice is called while the afterReturning advice just isn't called. I don't know what wrong. Incidentally the AfterReturningAdviceBindingTests doesn't work in the M2 release because of a problem with the XML file.   ---  **Affects:** 2.0 M2","closed","in: core,","spring-projects-issues","2006-02-07T07:09:07Z","2012-06-19T03:54:29Z"
"","6380","IllegalArgumentException when using same pointcut expression for different POJO advice methods [SPR-1682]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-1682](https://jira.spring.io/browse/SPR-1682?redirect=false)** and commented  For the same configuration and classes as #6379:  http://opensource2.atlassian.com/projects/spring/browse/SPR-1681  When the debug option on javac is disabled I get the exception below. The logAuthenticationAttempt(int) method is invoked with a String argument.  Exception trace:  ---  org.springframework.aop.framework.AopConfigException: Mismatch on arguments to advice method [public void com.apress.beginning_spring.chapter4.security.AuthenticationLogger.logAuthenticationAttempt(int)]; pointcut expression = [org.aspectj.weaver.internal.tools.PointcutExpressionImpl@1313906]; nested exception is java.lang.IllegalArgumentException: argument type mismatch java.lang.IllegalArgumentException: argument type mismatch at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:503) at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:485) at org.springframework.aop.aspectj.AspectJMethodBeforeAdvice.before(AspectJMethodBeforeAdvice.java:41) at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:159) at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:53) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:159) at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:170) at org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor.intercept(Cglib2AopProxy.java:643) at com.apress.beginning_spring.chapter4.security.SecurityManager$$EnhancerByCGLIB$$5b295183.authenticate(\) at com.apress.beginning_spring.chapter4.security.SecurityManagerIntegrationTests.testShowLogStatements(SecurityManagerIntegrationTests.java:27) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at com.intellij.rt.execution.junit2.JUnitStarter.main(JUnitStarter.java:31) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at com.intellij.rt.execution.application.AppMain.main(AppMain.java:86)  ---  **Affects:** 2.0 M2","closed","in: core,","spring-projects-issues","2006-02-07T05:11:39Z","2019-01-13T22:49:02Z"
"","6379","NPE when args() identifier doesn't match POJO advice argument name [SPR-1681]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-1681](https://jira.spring.io/browse/SPR-1681?redirect=false)** and commented  For this configuration:                                                                  this POJO advice:  public class AuthenticationLogger { private static Log log = LogFactory.getLog(AuthenticationLogger.class);      public void logAuthenticationAttempt(int userIdentifier) {         log.info(""User ID ["" + userIdentifier + ""] attempts to authenticate."");     }          public void logAuthenticationAttempt(String username) {         log.info(""User ["" + username + ""] attempts to authenticate."");     }  }  And this target class:  public class SecurityManager { public boolean authenticate(String username, String password) { return RandomUtils.nextBoolean(); }      public boolean authenticate(int userId, String password) {         return RandomUtils.nextBoolean();     }  }  I get the exception below because the args() identifier 'username' doesn't match the advice method argument name 'userIdentifier' when the debug option on javac is enabled.  Exception trace:  ---  java.lang.NullPointerException at org.springframework.aop.aspectj.AbstractAspectJAdvice.argBinding(AbstractAspectJAdvice.java:424) at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:485) at org.springframework.aop.aspectj.AspectJMethodBeforeAdvice.before(AspectJMethodBeforeAdvice.java:41) at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:159) at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:53) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:159) at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:170) at org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor.intercept(Cglib2AopProxy.java:643) at com.apress.beginning_spring.chapter4.security.SecurityManager$$EnhancerByCGLIB$$5b295183.authenticate(\) at com.apress.beginning_spring.chapter4.security.SecurityManagerIntegrationTests.testShowLogStatements(SecurityManagerIntegrationTests.java:27) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at com.intellij.rt.execution.junit2.JUnitStarter.main(JUnitStarter.java:31) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at com.intellij.rt.execution.application.AppMain.main(AppMain.java:86)  ---  **Affects:** 2.0 M2","closed","in: core,","spring-projects-issues","2006-02-07T05:02:05Z","2019-01-13T22:49:05Z"
"","6378","Change order of ParameterNameDiscoverers [SPR-1680]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-1680](https://jira.spring.io/browse/SPR-1680?redirect=false)** and commented  Currently the order of ParameterNameDiscoveres is:  - LocalVariableTables - dead reckoning  This is not intiutive since dead reckoning will work in most cases where LocalVariableTables is not required.  The problem with placing LocalVariableTables before dead reckoning is demonstrated in this scenario:  - POJO advice method has one argument name 'name'. - args(name,..) so an identifier is used that doesn't match the argument name of the POJO advice method - debug is turned off and everything works perfectly well - afterwards debugging is turned on and things fall apart  If the order is reversed and dead reckoning cannot provide a solution users will have to either configure arg-names or turn on debug and change args() to use the correct name. LocalVariableTables should not throw exceptions because of incorrect identifier names when it cannot add value.  So it makes sense to make dead reckoning the default and use LocalVariableTables as backup.   ---  **Affects:** 2.0 M2","closed","type: enhancement,","spring-projects-issues","2006-02-07T04:47:44Z","2006-07-03T20:35:12Z"
"","6377","Overloaded methods on POJO advise optimisticly resolved [SPR-1679]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-1679](https://jira.spring.io/browse/SPR-1679?redirect=false)** and commented  Consider this class:  public class AuthenticationLogger { private static Log log = LogFactory.getLog(AuthenticationLogger.class);      public void logAuthenticationAttempt(int userId) {         log.info(""User ID ["" + userId + ""] attempts to authenticate."");     }          public void logAuthenticationAttempt(String username) {         log.info(""User ["" + username + ""] attempts to authenticate."");     }  }  that's configured as POJO advice:                                                     for this target class:  public class SecurityManager { public boolean authenticate(String username, String password) { return RandomUtils.nextBoolean(); }      public boolean authenticate(int userId, String password) {         return RandomUtils.nextBoolean();     }  }  This results in an exception (below) because MethodLocationFactoryBean incorrectly resolves the logAuthenticationAttempt(int) method.  A workaround is to configure the advice as:        An exception should be thrown when an overloaded method is selected on POJO advice and no type information is provided.  Exception stack trace:  ---  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'authenticationLogger' defined in class path resource [com/apress/beginning_spring/chapter4/security/security-context.xml]: Initialization of bean failed; nested exception is java.lang.IllegalArgumentException: warning no match for this type name: username [Xlint:invalidAbsoluteTypeName] java.lang.IllegalArgumentException: warning no match for this type name: username [Xlint:invalidAbsoluteTypeName] at org.aspectj.weaver.tools.PointcutParser.parsePointcutExpression(PointcutParser.java:326) at org.springframework.aop.aspectj.AspectJExpressionPointcut.checkReadyToMatch(AspectJExpressionPointcut.java:168) at org.springframework.aop.aspectj.AspectJExpressionPointcut.getClassFilter(AspectJExpressionPointcut.java:103) at org.springframework.aop.support.AopUtils.canApply(AopUtils.java:195) at org.springframework.aop.support.AopUtils.canApply(AopUtils.java:228) at org.springframework.aop.support.AopUtils.findAdvisorsThatCanApply(AopUtils.java:247) at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findEligibleAdvisors(AbstractAdvisorAutoProxyCreator.java:76) at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.getAdvicesAndAdvisorsForBean(AbstractAdvisorAutoProxyCreator.java:62) at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization(AbstractAutoProxyCreator.java:240) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:306) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:837) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:409) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:238) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:148) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:253) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:331) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:87) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:72) at org.springframework.test.AbstractSpringContextTests.loadContextLocations(AbstractSpringContextTests.java:135) at org.springframework.test.AbstractDependencyInjectionSpringContextTests.loadContextLocations(AbstractDependencyInjectionSpringContextTests.java:224) at org.springframework.test.AbstractSpringContextTests.getContext(AbstractSpringContextTests.java:115) at org.springframework.test.AbstractDependencyInjectionSpringContextTests.setUp(AbstractDependencyInjectionSpringContextTests.java:192) at com.intellij.rt.execution.junit2.JUnitStarter.main(JUnitStarter.java:31) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at com.intellij.rt.execution.application.AppMain.main(AppMain.java:86)  ---  **Affects:** 2.0 M2","closed","in: core,","spring-projects-issues","2006-02-07T02:46:46Z","2019-01-13T22:49:08Z"
"","6369","Ordering of POJO advisors [SPR-1672]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-1672](https://jira.spring.io/browse/SPR-1672?redirect=false)** and commented  In Spring AOP 2.0 M1 POJO advisors (advisors that hold POJO methods as advice and AspectJ pointcuts as pointcut - see new AOP XML configuration) get a generated order value assigned that is determined by the order of the aspect/advice element in the XML file.  Furthermore, two or more advisors with the same order value can potentially end up in the same advisor chain so that the order in which the XML files are configured affects the advisor chain.  Even further, advisors in the same advisor chain but defined in different XML files get mixed together in an order that is hard to predict and can only be understood if you know the order in which the XML files are or are going to be configured.  This leaves the question ""What's the order of the advisor chain for this proxy going to be?"" difficult to answer. Especially, you don't expect the order in which your XML files are configured to affect the advisor chains of your proxies!!  I suggest two things:  - don't auto-generate order values for advisors - add a order element to the aop:advice XML tag  This ensures that:  - advisors without order value:   a) keep their position in the list vis-a-vis other orderless advisors (see java.util.Collections#sort(List,Comparator) javaodoc)   b) always end up behind advice with order value in a fuzzy order  - advisors with order value can take a well-defined and well-understood position in the list vis-a-vis:   a) other advisors with order value   b) advisors without order value  This allows users:  - to more easily understand what's going on with their advisor chains - to set the order values of their advise just right so that everything falls into place nicely    ---  **Affects:** 2.0 M2","closed","type: enhancement,","spring-projects-issues","2006-02-05T12:18:22Z","2012-06-19T03:54:40Z"
"","6198","Add type attributes to map and list elements [SPR-1499]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-1499](https://jira.spring.io/browse/SPR-1499?redirect=false)** and commented  Add default type attributes to map and list elements:  \ \1\ \ \ \ \ \  Also, add type attributes to entry element to overwrite map default types if present:  \ \ \ Since the value type attribute is more specific it should probably overwrite the list, map or entry types.   ---  **Affects:** 2.0 M1  6 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2005-11-27T08:38:29Z","2012-06-19T03:54:26Z"
"","5979","Allow control over AOP proxy creation to specify class loader [SPR-1277]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-1277](https://jira.spring.io/browse/SPR-1277?redirect=false)** and commented  I've moved the getProxy method from ProxyFactory to AdvicedSupport. I've also added a newAdvicedSupport method to ProxyFactoryBean and a newProxyFactory method to TransactionProxyFactoryBean. This allows users to specify a subclass of AdvicedSupport or ProxyFactory that overwrites the getProxy method to pass a class loader to AopProxy when creating the AOP proxy. Patch is attached.   ---  **Affects:** 1.2.4  **Attachments:** - [proxy_config.patch](https://jira.spring.io/secure/attachment/11125/proxy_config.patch) (_4.63 kB_)","closed","type: enhancement,","spring-projects-issues","2005-09-01T08:21:50Z","2012-06-19T03:54:12Z"
"","5911","anonymous inner bean without class and parent attributes fails to load [SPR-1209]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-1209](https://jira.spring.io/browse/SPR-1209?redirect=false)** and commented  Anonymous inner beans that do not have class and parent attributes fail to load:                                                                                                           PROPAGATION_REQUIRED                             The exception is:  org.springframework.beans.factory.BeanDefinitionStoreException: Error registering bean with name '' defined in resource loaded through InputStream: Unnamed bean definition specifies neither 'class' nor 'parent' - can't generate name at org.springframework.beans.factory.support.BeanDefinitionReaderUtils.generateBeanName(BeanDefinitionReaderUtils.java:102) at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.parseBeanDefinitionElement(DefaultXmlBeanDefinitionParser.java:331) at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.parsePropertySubElement(DefaultXmlBeanDefinitionParser.java:660) at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.parsePropertyValue(DefaultXmlBeanDefinitionParser.java:650) at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.parsePropertyElement(DefaultXmlBeanDefinitionParser.java:593) at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.parsePropertyElements(DefaultXmlBeanDefinitionParser.java:492) at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.parseBeanDefinitionElement(DefaultXmlBeanDefinitionParser.java:360) at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.parseBeanDefinitionElement(DefaultXmlBeanDefinitionParser.java:328) at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.parseBeanDefinitions(DefaultXmlBeanDefinitionParser.java:265) at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.registerBeanDefinitions(DefaultXmlBeanDefinitionParser.java:185) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:238) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:155) ...  ---  **Affects:** 1.2.4  **Issue Links:** - #5839 factory-bean not allowed on anonymous class (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2005-08-06T10:41:11Z","2019-01-12T16:52:23Z"
"","6168","Incorrectly set actualTransaction in AbstractPlatformTransactionManager.resume? [SPR-1469]","**[Steven Bazyl](https://jira.spring.io/secure/ViewProfile.jspa?name=sqrrrl)** opened **[SPR-1469](https://jira.spring.io/browse/SPR-1469?redirect=false)** and commented  It looks like there is a bug in how the actualTransaction flag is set when resuming.  If a transaction with PROPAGATION_SUPPORTS, the flag is correctly set to false.  But if the tx is suspended by calling code with REQUIRES_NEW, the reume method will always restore the flag with the value 'true' rather than check to see whether or not the resumed transaction was real or not.  Subsequent checks to see if the TX is an actual transaction or not will fail.  I'll attach test code shortly...   ---  **Affects:** 1.2.5","closed","type: bug,","spring-projects-issues","2005-11-14T03:30:56Z","2012-06-19T03:54:32Z"
"","5938","BeanNameAutoProxyCreator Regexp to define beanNames patterns [SPR-1236]","**[Steve Pincaud](https://jira.spring.io/secure/ViewProfile.jspa?name=javack)** opened **[SPR-1236](https://jira.spring.io/browse/SPR-1236?redirect=false)** and commented  In order to use regexp to define bean names in BeanNameAutoProxyCreator I propose to reaplace the code of org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator.isMatch  by :      protected boolean isMatch(String beanName, String mappedName) {                  Pattern p = Pattern.compile(mappedName);         Matcher m = p.matcher(beanName);         boolean isMatched = m.matches();                  return isMatched;     }  it should support regexp in configuration file, for instance :  \ \ \ \ \ \ \ 	\ 	    \ 	    \ 	\ 	\ 	\ 	    \ 		\^oneup-.*Dao$\ 		\^oneup-.*Service$\ 	    \ 	\			 \ \ see also http://forum.springframework.org/viewtopic.php?t=8062   ---  **Affects:** 1.1.5","closed","type: enhancement,","spring-projects-issues","2005-08-18T01:34:26Z","2012-06-19T09:37:39Z"
"","6208","Custom VelocityEngine support, non-web [SPR-1509]","**[Steve Dodge](https://jira.spring.io/secure/ViewProfile.jspa?name=robododge)** opened **[SPR-1509](https://jira.spring.io/browse/SPR-1509?redirect=false)** and commented  Support for using Velocity templates in a non-web environment is very minimal.  Support for embedding custom Velocity macros or exposing Velocity Tools is not built in.  I have written a few classes that extend the current functionality of the springframework.ui.velocity package.  The main classes include: VelocityEngineWithMacroFactoryBean - A custom FactoryBean extending the standard VelocityEngineFactory to allow for the insertion of user-defined macros (Needs some re-factoring). MacroHolder - A data transfer object for exposed to the velocity templates containing data used in any custom macros the MessageSource is the example in this case. VelocityAggregator - responsible for merging the Velocity Templage and aggregating any extra resources such as helper or Velocity Tools and any resources needed for custom macros VelocityAggregatorImpl - An example of a custom aggregator that will add the resources necessary for the custom Velocity macro ,in this case the Spring MessageSource, and will expose the Velocity DateTool for the template to use.  The majority of this may be possible using AOP but the pure class implementation is a straight forward starting point.  I'll be including a zip containing a Unit test that will run the whole thing.  Make sure Velocity, VelocityTool and SpringMock are in your classpath.    ---  **Affects:** 2.0 M1  **Attachments:** - [simple-velocity.zip](https://jira.spring.io/secure/attachment/11292/simple-velocity.zip) (_5.47 kB_)  3 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2005-11-30T10:52:39Z","2010-01-04T04:47:09Z"
"","5928","OpenSessionInViewFilter closes hibernate session too late [SPR-1226]","**[Stephen French](https://jira.spring.io/secure/ViewProfile.jspa?name=sos)** opened **[SPR-1226](https://jira.spring.io/browse/SPR-1226?redirect=false)** and commented  I think I've found a bug in OpenSessionInViewFilter.  In doFilterInternal() the hibernate session is closed after the call to filterChain.doFilter().  However, the HTTP response may have been written back to the client by the time the doFilter() function returns, and if the application has returned a redirect, then the web-client may already be making a followup request to the webserver - before the hibernate session gets closed.  The upshot in our application is that the target of the redirection page gets called before the data of the previous request has been committed, and then displays old data.  I'm wondering if the Servlet filter should be creating a wrapper HttpServletResponse, just as you would have to do if you wanted to modify the result (eg. with a compression filter).   ---  **Affects:** 1.2.3","closed","","spring-projects-issues","2005-08-11T22:52:55Z","2019-01-11T19:21:06Z"
"","6504","Upload POMs for Spring 1.2.7 to Maven Repository [SPR-1810]","**[Stephen Duncan Jr](https://jira.spring.io/secure/ViewProfile.jspa?name=jrduncans)** opened **[SPR-1810](https://jira.spring.io/browse/SPR-1810?redirect=false)** and commented  The jars, but not the POMs have been uploaded to the Maven repository.  For example, http://www.ibiblio.org/maven2/org/springframework/spring-beans/1.2.7/  See http://jira.codehaus.org/browse/MEV-363 for more details/suggestion.+    ---  **Affects:** 1.2.7  5 votes, 6 watchers","closed","","spring-projects-issues","2006-03-22T13:42:12Z","2019-01-11T22:11:37Z"
"","6455","Hibernate LocalSessionFactoryBean Does Not Allow a Lazy DataSource [SPR-1758]","**[Stephen Duncan Jr](https://jira.spring.io/secure/ViewProfile.jspa?name=jrduncans)** opened **[SPR-1758](https://jira.spring.io/browse/SPR-1758?redirect=false)** and commented  Despite setting lookup OnStartup to false and providing a proxyInterface, the LocalSessionFactoryBean still attempts to retrieve the dataSource on startup.  This is because it attempts to grab a connection while it starts up.  Here's the configuration:                                                                                             Here's the stack trace showing that it attempts to initalize it, but can't since the JNDI name doesn't exist yet:  2006-03-03 14:10:32,460 WARN  (org.apache.naming.NamingContext:801) - Unexpected exception resolving reference org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'serviceImpl' defined in class path resource [mil/jfcom/cie/directorymanagement/conf/spring/service.xml]: Can't resolve reference to bean 'databaseService' while setting property 'databaseService'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.orm.hibernate.HibernateTransactionManager#1d98a' defined in class path resource [mil/jfcom/cie/directorymanagement/conf/spring/hibernate.xml]: Can't resolve reference to bean 'hibernateSessionFactory' while setting property 'sessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'hibernateSessionFactory' defined in class path resource [mil/jfcom/cie/directorymanagement/conf/spring/hibernate.xml]: Initialization of bean failed; nested exception is java.lang.reflect.UndeclaredThrowableException: null org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.orm.hibernate.HibernateTransactionManager#1d98a' defined in class path resource [mil/jfcom/cie/directorymanagement/conf/spring/hibernate.xml]: Can't resolve reference to bean 'hibernateSessionFactory' while setting property 'sessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'hibernateSessionFactory' defined in class path resource [mil/jfcom/cie/directorymanagement/conf/spring/hibernate.xml]: Initialization of bean failed; nested exception is java.lang.reflect.UndeclaredThrowableException: null org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'hibernateSessionFactory' defined in class path resource [mil/jfcom/cie/directorymanagement/conf/spring/hibernate.xml]: Initialization of bean failed; nested exception is java.lang.reflect.UndeclaredThrowableException: null java.lang.reflect.UndeclaredThrowableException at $Proxy0.getConnection(Unknown Source) at org.springframework.orm.hibernate.LocalDataSourceConnectionProvider.getConnection(LocalDataSourceConnectionProvider.java:76) at net.sf.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:73) at net.sf.hibernate.cfg.Configuration.buildSettings(Configuration.java:1155) at net.sf.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:789) at org.springframework.orm.hibernate.LocalSessionFactoryBean.newSessionFactory(LocalSessionFactoryBean.java:543) at org.springframework.orm.hibernate.LocalSessionFactoryBean.afterPropertiesSet(LocalSessionFactoryBean.java:477) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1059) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:363) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:226) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:147) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:176) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:105) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1013) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:824) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:345) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBeanDefinition(BeanDefinitionValueResolver.java:147) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:96) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1013) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:824) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:345) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:226) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:147) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:176) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:105) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1013) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:824) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:345) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:226) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:147) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:275) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:320) at mil.jfcom.cie.portal.AbstractSpringObjectFactory.getObject(AbstractSpringObjectFactory.java:76) at mil.jfcom.cie.portal.AbstractSpringObjectFactory.getObjectInstance(AbstractSpringObjectFactory.java:59) at org.apache.naming.factory.ResourceFactory.getObjectInstance(ResourceFactory.java:129) at javax.naming.spi.NamingManager.getObjectInstance(NamingManager.java:304) at org.apache.naming.NamingContext.lookup(NamingContext.java:791) at org.apache.naming.NamingContext.lookup(NamingContext.java:151) at org.apache.catalina.mbeans.GlobalResourcesLifecycleListener.createMBeans(GlobalResourcesLifecycleListener.java:155) at org.apache.catalina.mbeans.GlobalResourcesLifecycleListener.createMBeans(GlobalResourcesLifecycleListener.java:160) at org.apache.catalina.mbeans.GlobalResourcesLifecycleListener.createMBeans(GlobalResourcesLifecycleListener.java:125) at org.apache.catalina.mbeans.GlobalResourcesLifecycleListener.lifecycleEvent(GlobalResourcesLifecycleListener.java:97) at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119) at org.apache.catalina.core.StandardServer.start(StandardServer.java:2306) at org.apache.catalina.startup.Catalina.start(Catalina.java:556) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:287) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:425) Caused by: javax.naming.NameNotFoundException: Name comp is not bound in this Context at org.apache.naming.NamingContext.lookup(NamingContext.java:768) at org.apache.naming.NamingContext.lookup(NamingContext.java:151) at org.apache.naming.SelectorContext.lookup(SelectorContext.java:136) at javax.naming.InitialContext.lookup(InitialContext.java:351) at org.springframework.jndi.JndiTemplate$1.doInContext(JndiTemplate.java:123) at org.springframework.jndi.JndiTemplate.execute(JndiTemplate.java:85) at org.springframework.jndi.JndiTemplate.lookup(JndiTemplate.java:121) at org.springframework.jndi.JndiTemplate.lookup(JndiTemplate.java:146) at org.springframework.jndi.JndiLocatorSupport.lookup(JndiLocatorSupport.java:86) at org.springframework.jndi.JndiObjectLocator.lookup(JndiObjectLocator.java:104) at org.springframework.jndi.JndiObjectTargetSource.getTarget(JndiObjectTargetSource.java:121) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:150) ... 51 more 2006-03-03 14:10:32,464 ERROR (org.apache.catalina.mbeans.GlobalResourcesLifecycleListener:127) - Exception processing Global JNDI Resources javax.naming.NamingException: Error creating bean with name 'serviceImpl' defined in class path resource [mil/jfcom/cie/directorymanagement/conf/spring/service.xml]: Can't resolve reference to bean 'databaseService' while setting property 'databaseService'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.orm.hibernate.HibernateTransactionManager#1d98a' defined in class path resource [mil/jfcom/cie/directorymanagement/conf/spring/hibernate.xml]: Can't resolve reference to bean 'hibernateSessionFactory' while setting property 'sessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'hibernateSessionFactory' defined in class path resource [mil/jfcom/cie/directorymanagement/conf/spring/hibernate.xml]: Initialization of bean failed; nested exception is java.lang.reflect.UndeclaredThrowableException: null at org.apache.naming.NamingContext.lookup(NamingContext.java:803) at org.apache.naming.NamingContext.lookup(NamingContext.java:151) at org.apache.catalina.mbeans.GlobalResourcesLifecycleListener.createMBeans(GlobalResourcesLifecycleListener.java:155) at org.apache.catalina.mbeans.GlobalResourcesLifecycleListener.createMBeans(GlobalResourcesLifecycleListener.java:160) at org.apache.catalina.mbeans.GlobalResourcesLifecycleListener.createMBeans(GlobalResourcesLifecycleListener.java:125) at org.apache.catalina.mbeans.GlobalResourcesLifecycleListener.lifecycleEvent(GlobalResourcesLifecycleListener.java:97) at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119) at org.apache.catalina.core.StandardServer.start(StandardServer.java:2306) at org.apache.catalina.startup.Catalina.start(Catalina.java:556) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:287) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:425)   ---  **Affects:** 1.2.6","closed","status: declined,","spring-projects-issues","2006-03-03T05:13:07Z","2019-01-12T16:29:32Z"
"","6454","Hibernate Data Source Not Recognized as Set [SPR-1757]","**[Stephen Duncan Jr](https://jira.spring.io/secure/ViewProfile.jspa?name=jrduncans)** opened **[SPR-1757](https://jira.spring.io/browse/SPR-1757?redirect=false)** and commented  HibernateException: ""No local DataSource found for configuration - dataSource property must be set on LocalSessionFactoryBean"" even though a data source is provided via  a JNDIOjbectFactoryBean.  This occurs when initializing the SessionFactory for a global service provided via JNDI.  The initialization is triggered by a webapp attempting to use the service, through an interceptor.  The details are discussed on this forum thread: http://forum.springframework.org/showthread.php?t=22072  The problem goes away when I instead use a hibernate.cfg.xml to set the dataSource.  Here's the stack trace:  2006-03-03 14:02:36,076 ERROR (mil.jfcom.cie.portal.framework.FrameworkPortlet:406) - Trouble Tickets: There was a problem preparing response: mil.jfcom.cie.portal.troubletickets.handler.response.LoadUserInfo . java.lang.reflect.UndeclaredThrowableException at $Proxy0.getUser(Unknown Source) at mil.jfcom.cie.portal.troubletickets.service.ServiceImpl.getUser(ServiceImpl.java:345) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:335) at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:181) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:148) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:170) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:176) at $Proxy1.getUser(Unknown Source) at mil.jfcom.cie.portal.troubletickets.handler.AbstractHandler.getUser(AbstractHandler.java:106) at mil.jfcom.cie.portal.troubletickets.handler.response.LoadUserInfo.prepareResponse(LoadUserInfo.java:28) at mil.jfcom.cie.portal.framework.FrameworkPortlet.runResponseHandler(FrameworkPortlet.java:394) at mil.jfcom.cie.portal.framework.FrameworkPortlet.doRender(FrameworkPortlet.java:305) at mil.jfcom.cie.portal.framework.FrameworkPortlet.doView(FrameworkPortlet.java:118) at javax.portlet.GenericPortlet.doDispatch(GenericPortlet.java:247) at javax.portlet.GenericPortlet.render(GenericPortlet.java:175) at org.exoplatform.services.portletcontainer.impl.PortletApplicationHandler.render_aroundBody8(PortletApplicationHandler.java:226) at org.exoplatform.services.portletcontainer.impl.PortletApplicationHandler.render_aroundBody9$advice(PortletApplicationHandler.java:458) at org.exoplatform.services.portletcontainer.impl.PortletApplicationHandler.render_aroundBody10(PortletApplicationHandler.java) at org.exoplatform.services.portletcontainer.impl.PortletApplicationHandler.render_aroundBody11$advice(PortletApplicationHandler.java:340) at org.exoplatform.services.portletcontainer.impl.PortletApplicationHandler.render_aroundBody12(PortletApplicationHandler.java) at org.exoplatform.services.portletcontainer.impl.PortletApplicationHandler.render_aroundBody13$advice(PortletApplicationHandler.java:172) at org.exoplatform.services.portletcontainer.impl.PortletApplicationHandler.render_aroundBody14(PortletApplicationHandler.java) at org.exoplatform.services.portletcontainer.impl.PortletApplicationHandler.render_aroundBody15$advice(PortletApplicationHandler.java:738) at org.exoplatform.services.portletcontainer.impl.PortletApplicationHandler.render_aroundBody16(PortletApplicationHandler.java) at org.exoplatform.services.portletcontainer.impl.PortletApplicationHandler.render_aroundBody17$advice(PortletApplicationHandler.java:628) at org.exoplatform.services.portletcontainer.impl.PortletApplicationHandler.process(PortletApplicationHandler.java:226) at org.exoplatform.services.portletcontainer.impl.servlet.ServletWrapper.service(ServletWrapper.java:70) at javax.servlet.http.HttpServlet.service(HttpServlet.java:802) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:237) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:157) at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:704) at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:590) at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:510) at org.exoplatform.services.portletcontainer.impl.PortletContainerDispatcher.dispatch(PortletContainerDispatcher.java:370) at org.exoplatform.services.portletcontainer.impl.PortletContainerDispatcher.process(PortletContainerDispatcher.java:310) at org.exoplatform.services.portletcontainer.impl.PortletContainerDispatcher.render(PortletContainerDispatcher.java:271) at org.exoplatform.services.portletcontainer.impl.PortletContainerServiceImpl.render(PortletContainerServiceImpl.java:144) at org.exoplatform.portal.faces.renderer.html.portlet.PortletRenderer.encodeChildren(PortletRenderer.java:100) at javax.faces.component.UIComponentBase.encodeChildren(UIComponentBase.java:693) at org.exoplatform.portal.faces.renderer.html.page.PageRowRenderer.renderViewMode(PageRowRenderer.java:50) at org.exoplatform.portal.faces.renderer.html.page.PageRenderer.encodeChildren(PageRenderer.java:28) at javax.faces.component.UIComponentBase.encodeChildren(UIComponentBase.java:693) at org.exoplatform.faces.core.renderer.html.ChildrenRenderer.encodeChildren(ChildrenRenderer.java:27) at javax.faces.component.UIComponentBase.encodeChildren(UIComponentBase.java:693) at org.exoplatform.portal.faces.renderer.html.container.ContainerRowRenderer.renderViewMode(ContainerRowRenderer.java:40) at org.exoplatform.portal.faces.renderer.html.container.ContainerRenderer.encodeChildren(ContainerRenderer.java:36) at javax.faces.component.UIComponentBase.encodeChildren(UIComponentBase.java:693) at org.exoplatform.portal.faces.renderer.html.container.ContainerRowRenderer.renderViewMode(ContainerRowRenderer.java:40) at org.exoplatform.portal.faces.renderer.html.container.ContainerRenderer.encodeChildren(ContainerRenderer.java:36) at javax.faces.component.UIComponentBase.encodeChildren(UIComponentBase.java:693) at org.exoplatform.portal.faces.renderer.html.container.ContainerColumnRenderer.renderViewMode(ContainerColumnRenderer.java:40) at org.exoplatform.portal.faces.renderer.html.container.ContainerRenderer.encodeChildren(ContainerRenderer.java:36) at javax.faces.component.UIComponentBase.encodeChildren(UIComponentBase.java:693) at org.exoplatform.portal.faces.renderer.html.container.ContainerRowRenderer.renderViewMode(ContainerRowRenderer.java:40) at org.exoplatform.portal.faces.renderer.html.container.ContainerRenderer.encodeChildren(ContainerRenderer.java:36) at javax.faces.component.UIComponentBase.encodeChildren(UIComponentBase.java:693) at org.exoplatform.faces.core.renderer.html.HtmlBasicRenderer.renderChildren(HtmlBasicRenderer.java:63) at org.exoplatform.portal.faces.renderer.html.portal.PortalRenderer.encodeChildren(PortalRenderer.java:58) at javax.faces.component.UIComponentBase.encodeChildren(UIComponentBase.java:693) at org.exoplatform.portal.faces.application.ExoPortalViewHandler.renderView(ExoPortalViewHandler.java:63) at com.sun.faces.lifecycle.RenderResponsePhase.execute(RenderResponsePhase.java:87) at com.sun.faces.lifecycle.LifecycleImpl.phase(LifecycleImpl.java:200) at com.sun.faces.lifecycle.LifecycleImpl.render(LifecycleImpl.java:117) at javax.faces.webapp.FacesServlet.service(FacesServlet.java:198) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:237) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:157) at org.exoplatform.portal.filter.PrivateRequestFilter.doFilter(PrivateRequestFilter.java:82) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:186) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:157) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:214) at org.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:104) at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:520) at org.apache.catalina.core.StandardContextValve.invokeInternal(StandardContextValve.java:198) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:152) at org.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:104) at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:540) at org.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:102) at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:520) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:137) at org.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:104) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:118) at org.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:102) at org.apache.catalina.authenticator.SingleSignOn.invoke(SingleSignOn.java:444) at org.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:102) at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:520) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) at org.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:104) at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:520) at org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:929) at org.apache.coyote.tomcat5.CoyoteAdapter.service(CoyoteAdapter.java:160) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:799) at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.processConnection(Http11Protocol.java:705) at org.apache.tomcat.util.net.TcpWorkerThread.runIt(PoolTcpEndpoint.java:577) at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:683) at java.lang.Thread.run(Thread.java:595) Caused by: java.lang.reflect.InvocationTargetException at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.springframework.util.MethodInvoker.invoke(MethodInvoker.java:248) at mil.jfcom.cie.portal.MethodInvokingBeforeAdvice.before(MethodInvokingBeforeAdvice.java:38) at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:170) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:176) ... 100 more Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.orm.hibernate.HibernateTransactionManager#1d98a' defined in class path resource [mil/jfcom/cie/directorymanagement/conf/spring/hibernate.xml]: Can't resolve reference to bean 'hibernateSessionFactory' while setting property 'sessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'hibernateSessionFactory' defined in class path resource [mil/jfcom/cie/directorymanagement/conf/spring/hibernate.xml]: Initialization of bean failed; nested exception is net.sf.hibernate.HibernateException: No local DataSource found for configuration - dataSource property must be set on LocalSessionFactoryBean at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:180) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:105) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1013) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:824) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:345) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBeanDefinition(BeanDefinitionValueResolver.java:147) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:96) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1013) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:824) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:345) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:226) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:147) at mil.jfcom.cie.directorymanagement.service.DirectoryManagementServiceImpl.init(DirectoryManagementServiceImpl.java:109) ... 109 more Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'hibernateSessionFactory' defined in class path resource [mil/jfcom/cie/directorymanagement/conf/spring/hibernate.xml]: Initialization of bean failed; nested exception is net.sf.hibernate.HibernateException: No local DataSource found for configuration - dataSource property must be set on LocalSessionFactoryBean at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:370) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:226) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:147) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:176) ... 121 more Caused by: net.sf.hibernate.HibernateException: No local DataSource found for configuration - dataSource property must be set on LocalSessionFactoryBean at org.springframework.orm.hibernate.LocalDataSourceConnectionProvider.configure(LocalDataSourceConnectionProvider.java:48) at net.sf.hibernate.connection.ConnectionProviderFactory.newConnectionProvider(ConnectionProviderFactory.java:83) at net.sf.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:65) at net.sf.hibernate.cfg.Configuration.buildSettings(Configuration.java:1155) at net.sf.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:789) at org.springframework.orm.hibernate.LocalSessionFactoryBean.newSessionFactory(LocalSessionFactoryBean.java:543) at org.springframework.orm.hibernate.LocalSessionFactoryBean.afterPropertiesSet(LocalSessionFactoryBean.java:477) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1059) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:363) ... 124 more  Here's the bean configuration:      		     	     		     			     			     		     	     	     	     		     			${hibernate.dialect}     			false     			${hibernate.hbm2ddl.auto}     		     	     	     	     		     			classpath:/mil/jfcom/cie/directorymanagement/conf/hibernate/FullUser.hbm.xml     		     	         ---  **Affects:** 1.2.6","closed","in: data,","spring-projects-issues","2006-03-03T05:07:50Z","2019-01-11T22:08:28Z"
"","6392","Cannot Lazily Instantiate Hibernate LocalSessionFactoryBean  using LazyInitTargetSource [SPR-1695]","**[Stephen Duncan Jr](https://jira.spring.io/secure/ViewProfile.jspa?name=jrduncans)** opened **[SPR-1695](https://jira.spring.io/browse/SPR-1695?redirect=false)** and commented  If I specify a ProxyFactoryBean with a targetSource of type LazyInitTargetSource which targets a LocalSessionFactoryBean, the underlying Hibernate SessionFactory is created anyway.  The problem is that to create the proxy, the LazyInitTargetSource must determine the type of the object is must proxy.  So it calls getObjectType on the bean.  Because the bean is a FactoryBean, it must instantiate the FactoryBean to call getObjectType on it.  This, however, causes the SessionFactory to be created, because that is done in the afterPropertiesSet method.  One solution would be to modify LocalSessionFactoryBean to delay instantiation of the SessionFactory until the getObject method is called.  Another might be to first attempt to call getObjectType on the factory before setting any properties.  That way if the value is known beforehand (not dynamically), the rest of the methods wouldn't be called.  The last solution that occurs to me is to provide another way to specify the object type.  Such as having it be a property you could set on the LazyInitTargetSource.  This would prevent instantiation of the Factory even, and therefore would seem to honor the intentions of not instantiating what you're proxying better.   ---  **Affects:** 1.2.6","closed","in: core,","spring-projects-issues","2006-02-09T21:36:34Z","2012-06-19T03:54:23Z"
"","6016","JdkDynamicAopProxy massages return value even if it does not implements the expected return type [SPR-1316]","**[Stephane Lemaire](https://jira.spring.io/secure/ViewProfile.jspa?name=slemaire)** opened **[SPR-1316](https://jira.spring.io/browse/SPR-1316?redirect=false)*** and commented  Hi,  I faced an issue that looks like a Spring AOP bug. When the JdkDynamicAopProxy return value is the target, it is replaced it by the proxy. In the code it is commented as // massage return value if necessary  Unfortunately, this replacement can be done unnecessary. It can replace the return value even when the proxy does not implement the return type of the method. It leads to java.lang.ClassCastException in the object $Proxy0 (the java.lang.reflect.Proxy).  There should be a test case attached, if I find how to do it in Jira. Briefly, it occurs when a proxied object implements two interfaces and only one is proxied. If the a result of the first interface (proxied) is of the type of the second interface (not proxied), the return will be the single instance of the object implementing both interfaces. JdkDynamicAopProxy determines that the return values and the target of aop are the same and returns the proxy even if it does not implements the expected type (second interface not proxied). Then the java.lang.reflect.Proxy throws a ClassCastException (without any message).  I know, that other designs in the interfaces and/or implementation may avoid this issue, but I can't change ""legacy"" code.  I suggest you a fix. At the end of the method invoke in JdkDynamicAopProxy, you could add a piece of code like the following.                                                       // massage return value if necessary     if (retVal != null && retVal == target) {          // Special case: it returned ""this"".          // Note that we can't help if the target sets          // a reference to itself in another returned object.          if (method.getReturnType().isInstance(proxy) ) {               // Exchange with the proxy only when the proxy can be casted               // to the return type.               //The invocation returned an object, therefore the method               // return type should not be null. Isn't it?                                                                          retVal = proxy;          }     }     return retVal;  There is another workaround, CGLIB can be used instead of JDK dynamic proxy.  May you tell me if you consider it as a bug? If so, may you give me some hints about a release number and date?  Regards,  Stephane Lemaire   ---  **Affects:** 1.2.4  **Attachments:** - [spr-1316.zip](https://jira.spring.io/secure/attachment/11158/spr-1316.zip) (_2.57 kB_)","closed","in: core,","spring-projects-issues","2005-09-21T19:22:30Z","2012-06-19T03:54:08Z"
"","5920","lazy-init fails to have the MBeanExporter process annotations [SPR-1218]","**[Stephane Bailliez](https://jira.spring.io/secure/ViewProfile.jspa?name=sbailliez)** opened **[SPR-1218](https://jira.spring.io/browse/SPR-1218?redirect=false)** and commented  When lazy-init is enabled for a bean, the proxy created in MBeanExporter::registerLazyInit hides annotations, thus it fails to retrieve them afterwards and the MetaDataNamingStrategy blows up with a cryptic message saying that: ""Your bean class [xxxxx] must be marked with a valid ManagedResource attribute when using MetadataNamingStrategy""  I'm probably be missing something here, but I'm not sure that the solution to solve this problem is crystal-clear.  If we build a proxy in some way that would mean we should also inherit all annotations of the proxied class and/or eventually be able to override them. However there's nothing in Spring to be able to do so AFAIK and we can see here that we're already going through a slippery path  So the question is: is this supposed to work with proxies ?   ---  **Affects:** 1.2.1  **Attachments:** - [lazyNaming.xml](https://jira.spring.io/secure/attachment/11052/lazyNaming.xml) (_1.21 kB_) - [LazyNamingTest.java](https://jira.spring.io/secure/attachment/11053/LazyNamingTest.java) (_1.53 kB_)","closed","in: core,","spring-projects-issues","2005-08-09T05:32:56Z","2012-06-19T03:54:31Z"
"","5917","Invalid reference to AnnotationsJmxAttributeSource [SPR-1215]","**[Stephane Bailliez](https://jira.spring.io/secure/ViewProfile.jspa?name=sbailliez)** opened **[SPR-1215](https://jira.spring.io/browse/SPR-1215?redirect=false)** and commented  Documentation: In 20.3.3,  s/AnnotationsJmxAttributeSource/AnnotationJmxAttributeSource  It would also probably be better to add a small snippet to get the full classname such as:  \   ---  **Affects:** 1.2.1","closed","in: core,","spring-projects-issues","2005-08-08T09:44:38Z","2019-01-11T19:21:32Z"
"","5916","Invalid documentation sample for AttributesJmxAttributeSource [SPR-1214]","**[Stephane Bailliez](https://jira.spring.io/secure/ViewProfile.jspa?name=sbailliez)** opened **[SPR-1214](https://jira.spring.io/browse/SPR-1214?redirect=false)** and commented  This is a documentation bug.  In 20.3.2 and 20.3.5, samples context xml defines a bean 'attributeSource' for the class o.s.jmx.export.metadata.AttributesJmxAttributeSource  This is invalid as this class requires to set the property 'attributes' on it.   ---  **Affects:** 1.2.1","closed","in: core,","spring-projects-issues","2005-08-08T09:38:44Z","2005-08-08T19:44:08Z"
"","5903","Invalid package for MetadataMBeanInfoAssembler in documentation [SPR-1200]","**[Stephane Bailliez](https://jira.spring.io/secure/ViewProfile.jspa?name=sbailliez)** opened **[SPR-1200](https://jira.spring.io/browse/SPR-1200?redirect=false)** and commented  Documentation in chapter 18 (JMX) references the class:  org.springframework.jmx.assembler.MetadataMBeanInfoAssembler  This is incorrect and should be changed to:  org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler   ---  **Affects:** 1.2.4","closed","in: core,","spring-projects-issues","2005-08-03T05:50:37Z","2005-08-03T19:10:27Z"
"","6094","RMI client's stacktrace lost [SPR-1394]","**[Stephan Westen](https://jira.spring.io/secure/ViewProfile.jspa?name=swesten)** opened **[SPR-1394](https://jira.spring.io/browse/SPR-1394?redirect=false)** and commented  scenario: simple basic RMI server and client  RMI server throws an exception client console shows the server-side stacktrace, but not the client side!  this is very cumbersome: you cannot easily find the line in the client code that caused the server side exception!  I played around with RmiClientInterceptor and the invoke method.  If I change the catch RemoteException into any exception and create a new exception with the catched exception as cause then I do see a client side stacktrace like this (excuse the Dutch):  Exception in thread ""main"" java.lang.RuntimeException: Aangepaste Spring code","closed","type: enhancement,","spring-projects-issues","2005-10-19T00:21:37Z","2012-06-19T03:54:34Z"
"","6724","Wrong translation of MS SQL Server RAISERROR [SPR-2031]","**[Stepan Koltsov](https://jira.spring.io/secure/ViewProfile.jspa?name=yozh)** opened **[SPR-2031](https://jira.spring.io/browse/SPR-2031?redirect=false)** and commented  There is MS SQL server statement RAISERROR. Calling it causes SQLException. This exception is converted to BadSqlGrammarException by Spring. But grammar is correct.  The code:  ---  try { dataSource.getConnection().createStatement().execute(""RAISERROR('Preved!', 16, 1)""); } catch (SQLException e) { logger.error(""e: "" + e); logger.error(""errorCode: "" + e.getErrorCode()); logger.error(""sqlState: "" + e.getSQLState()); } try { new JdbcTemplate(dataSource).execute(""RAISERROR('Preved!', 16, 1)""); } catch (DataAccessException e) { logger.error(""spring e: "" + e); }  ---  prints:  ---  [Temp] e: com.microsoft.sqlserver.jdbc.SQLServerException: Preved! [Temp] errorCode: 50000 [Temp] sqlState: S0001 [JdbcTemplate] Executing SQL statement [RAISERROR('Preved!', 16, 1)] [Temp] spring e: org.springframework.jdbc.BadSqlGrammarException: StatementCallback; bad SQL grammar [RAISERROR('Preved!', 16, 1)]; nested exception is com.microsoft.sqlserver.jdbc.SQLServerException: Preved!  ---  Look at http://msdn2.microsoft.com/en-us/library/ms177497.aspx:  ---  RAISERROR is used to return messages back to applications using the same format as a system error or warning message generated by the SQL Server Database Engine.  ---  Also from there seems like error codes equal or above 50000 are reserved for user errors (and 50000 is default in RAISERROR), all codes in that range maybe should be converted to UserServerErrorDataAccessException, or something I don't know what.  ---  **Affects:** 2.0 M4","closed","type: bug,","spring-projects-issues","2006-05-17T23:03:48Z","2019-01-13T22:47:59Z"
"","6526","Wrong translation of MS SQL Server SQLException [SPR-1832]","**[Stepan Koltsov](https://jira.spring.io/secure/ViewProfile.jspa?name=yozh)** opened **[SPR-1832](https://jira.spring.io/browse/SPR-1832?redirect=false)** and commented  With Spring 2.0-m3 Under MS SQL with driver version sqljdbc-1.0.809.102 I get following exception:  org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [INSERT INTO matcher..notebooksFrec(FrecID, Factor, Unit) VALUES (?, ?, ?)]; nested exception is com.microsoft.sqlserver.jdbc.SQLServerException: INSERT permission denied on object 'NotebooksFrec', database 'matcher', owner 'dbo'. com.microsoft.sqlserver.jdbc.SQLServerException: INSERT permission denied on object 'NotebooksFrec', database 'matcher', owner 'dbo'.  permission denied gets translated to BadGrammarException    ---  **Affects:** 1.2.7, 2.0 M3","closed","type: bug,","spring-projects-issues","2006-03-28T22:58:36Z","2012-06-19T03:54:19Z"
"","6367","Use META-INF to find jars in classpath in PathMatchingResourcePatternResolver [SPR-1670]","**[Stepan Koltsov](https://jira.spring.io/secure/ViewProfile.jspa?name=yozh)** opened **[SPR-1670](https://jira.spring.io/browse/SPR-1670?redirect=false)** and commented  Accoring to PathMatchingResourcePatternResolver javadoc:  ---  Note that ""classpath*:"" will only work reliably with at least one root directory before the pattern starts, unless the actual target files reside in the file system. This means that a pattern like ""classpath*:*.xml"" will not retrieve files from the root of jar files but rather only from the root of expanded directories. This originates from a limitation in the JDK's ClassLoader.getResources method which only returns file system locations for a passed-in empty String (indicating potential roots to search).  ---  (why ""classpath*:""? ""classpath:"" too)  But. Almost all jars have directory META-INF inside, so we could ask classLoader.getResources(""META-INF"") to get list of all jars. This is hack, but it works.  So we could write new ClassPathXmlApplicationContext(""classpath*:applicationContext-*.xml"").  Patch follows.  ---  **Affects:** 2.0 M2  **Attachments:** - [pmrr-meta-inf-hack-yozh-2006-02-06.diff](https://jira.spring.io/secure/attachment/11443/pmrr-meta-inf-hack-yozh-2006-02-06.diff) (_2.59 kB_)  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2006-02-05T09:35:51Z","2019-01-13T22:49:16Z"
"","6324","Mark bean as non-singleton using marker interface NonSingleton [SPR-1627]","**[Stepan Koltsov](https://jira.spring.io/secure/ViewProfile.jspa?name=yozh)** opened **[SPR-1627](https://jira.spring.io/browse/SPR-1627?redirect=false)** and commented  Sometimes beans are desinged so that its should not be used as singletons. For example, JDK DateFormat is not allowed to be used from multiply threads, so it should not be singleton.  So in every place where this bean is used it must be marked as non-singleton, like:  \  Many ""parsers"", ""workers"" store some temporary state in fields.  If I wrote such bean, and some one else uses this bean, he can just forget to mark bean as non-singleton, and he gets error that is hard to debug, and that is reproduced only under heavy load.  It would be nice to have ability to change default singleton parameter of bean using marker interface, like  class Parser implements NonSingleton { }  Or with JDK1.5 annotations:  `@Singleton`(value = false) class Parser { }  Or both ways.   ---  **Affects:** 2.0 M1","closed","type: enhancement,","spring-projects-issues","2006-01-18T08:20:53Z","2006-07-05T08:11:36Z"
"","6289","JdbcTemplate to support JDK1.5 generics [SPR-1592]","**[Stepan Koltsov](https://jira.spring.io/secure/ViewProfile.jspa?name=yozh)** opened **[SPR-1592](https://jira.spring.io/browse/SPR-1592?redirect=false)** and commented  I'd like JdbcTempalte to support JDK1.5 generics. So I could write  Banana banana = getJdbcTemplate().queryForObject(q, new BananaRowMapper());  class BananaRowMapper implements RowMapper\ { ... }  Simple. Many people want it.  There are tools that can convert JDK1.5 classes back to JDK1.4 (retroweaver, retrotranslator). So why not rewrite code in org.springframework.jdbc with generics, build jar spring-jdbc-jdk15.jar, apply retrotranslator to create spring-jdbc.jar, and then distribute both jars? Generated spring-jdbc.jar will be compatible with current spring-jdbc.jar and useable in JDK1.4.  The most hard part of this conversion is editing Ant (or Maven) scripts.   --- No further details from [SPR-1592](https://jira.spring.io/browse/SPR-1592?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-01-05T04:42:57Z","2012-06-19T03:54:33Z"
"","6194","extract ""new SingleColumnRowMapper()"" in JdbcTemplate to protected method [SPR-1495]","**[Stepan Koltsov](https://jira.spring.io/secure/ViewProfile.jspa?name=yozh)** opened **[SPR-1495](https://jira.spring.io/browse/SPR-1495?redirect=false)** and commented  Could you please extract each of 6 calls of ""new SingleColumnRowMapper(requiredType)"" to  protected RowMapper createSingleColumnRowMapper(Class requiredType) { return new SingleColumnRowMapper(requiredType); }  in JdbcTemplate to easier handle situations described in #6193? So I could override only one method to use my hacked SCRM.  ---  No further details from [SPR-1495](https://jira.spring.io/browse/SPR-1495?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-11-24T09:22:17Z","2019-01-11T21:09:20Z"
"","6193","JdbcTemplate.queryForObject should throw different exceptions for wrong number of rows and columns [SPR-1494]","**[Stepan Koltsov](https://jira.spring.io/secure/ViewProfile.jspa?name=yozh)** opened **[SPR-1494](https://jira.spring.io/browse/SPR-1494?redirect=false)** and commented  JdbcTemplate.queryForObject() throws IncorrectResultSizeDataAccessException in two cases: if rows count is not 1 and when columns count is not 1.  Wrong number of rows and columns are completely different situations. Example:  Wrong number of columns means that there is error in query, or in some DB structure. It is server error. This exception should not be handled, maybe user should see error 500: Internal Server Error, please contact administrator, bla-bla-bla.  No columns is normal situation. For example, user not found, or document not found. In this case site user should see expected page, with some message marked in red.  The one place where IncorrectResultSizeDataAccessException is used for wrong number of columns is SingleColumnRowMapper. I think SingleColumnRowMapper should throw other subclass of DataRetrievalFailureException, ex. WrongColumnsCountException.  Also because of similar reasons there should be subclass EmptyResultException of class IncorrectResultSizeException although the method IncorrectResultSizeException.getActualSize() exists. So if I write  try { return getJdbcTemplate().queryForObject(""select path from documents where docnumber = 15""); } catch (EmptyResultException e) { // here I want to be sure that document not exists, and there is no error in query, and no error in data when two documents have id 15. throw new DocumentNotExistsException(); }  This is typical situation of using queryForObject().  However this feature request is not important and maybe even is not to be implemented. In the most cases it's enough to catch IncorrectResultSizeException. Also both situations can be easily handled in my code by subclassing JdbcTemplate and SingleColumnRowMapper.   ---  **Affects:** 1.2.6","closed","type: bug,","spring-projects-issues","2005-11-24T08:32:01Z","2012-06-19T03:54:05Z"
"","6190","BigDecimal in SingleColumnRowMapper [SPR-1491]","**[Stepan Koltsov](https://jira.spring.io/secure/ViewProfile.jspa?name=yozh)** opened **[SPR-1491](https://jira.spring.io/browse/SPR-1491?redirect=false)** and commented  Could you please add support for BigDecimal to SingleColumnRowMapper for completeness? There is a method ResultSet.getBigDecimal().  This is related to #6137.  ---  **Affects:** 1.2.6","closed","type: enhancement,","spring-projects-issues","2005-11-22T07:50:50Z","2019-01-11T21:09:14Z"
"","6137","JdbcTemplate.queryForInt() fails on varchar [SPR-1437]","**[Stepan Koltsov](https://jira.spring.io/secure/ViewProfile.jspa?name=yozh)** opened **[SPR-1437](https://jira.spring.io/browse/SPR-1437?redirect=false)** and commented  jdbcTemplate.queryForInt(""select '15' from somewhere"") fails.  This happens because JdbcTemplate calls ResultSet.getObject(), gets String, and cannot convert String to int.  According to JDBC specification, ResultSet.getInt() must convert varchar to int.  I think JdbcTemplate should not attempt convert getObect() to int, but rather delegate conversion to JDBC driver.  Thanks.   ---  **Affects:** 1.2.5","closed","type: bug,","spring-projects-issues","2005-11-04T05:20:35Z","2012-06-19T03:54:30Z"
"","6128","Need a way to disable autowiring in AbstractDependencyInjectionSpringContextTests [SPR-1428]","**[Stepan Koltsov](https://jira.spring.io/secure/ViewProfile.jspa?name=yozh)** opened **[SPR-1428](https://jira.spring.io/browse/SPR-1428?redirect=false)** and commented  I use AbstractTransactionalDataSourceSpringContextTests, and I need two DataSources in my test environment (because DS I use must be built upon another).  In this case AbstractDependencyInjectionSpringContextTests fails to setUp, because it tries to autowire properties of test by type.  After looking at sources, I've found that I can set ""populateProtectedVariables"" property to true, and this disables autowiring, but I suppose it is hack and it's hard to find this not looking at sources.  I think It would be great to have test parameters like ""autowire"" and ""autowireType"".  Thanks.   ---  **Affects:** 1.2.5  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2005-10-29T09:35:53Z","2012-06-19T03:54:36Z"
"","6119","Annotations for dependency checking [SPR-1419]","**[Stepan Koltsov](https://jira.spring.io/secure/ViewProfile.jspa?name=yozh)** opened **[SPR-1419](https://jira.spring.io/browse/SPR-1419?redirect=false)** and commented  It would be nice to specify required dependencies using JDK1.5 annotations.  Annotation interface, like `@RequiredProperty` { boolean required = true; } should be applicable to setters, `@PropertiesRequired` { boolean required = true; } to be applicable to classes. Like here:  `@PropertiesRequired` { required = false; } class DogsDao { `@RequiredProperty` void setDataSource(DataSource dataSource) { ... } }  ---  **Issue Links:** - #5754 Annotation to validate required bean attributes (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2005-10-25T19:48:47Z","2019-01-11T21:01:34Z"
"","6404","SimpleMappingExceptionResolver - provide access to the request in getModelAndView [SPR-1707]","**[Stefan Prinz](https://jira.spring.io/secure/ViewProfile.jspa?name=sprinz)** opened **[SPR-1707](https://jira.spring.io/browse/SPR-1707?redirect=false)** and commented  It would be nice to have the request available in the method getModelAndView. This would help to provide some details of the request or session on the error page that are not available in the exception.   --- No further details from [SPR-1707](https://jira.spring.io/browse/SPR-1707?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-02-13T23:45:34Z","2012-06-19T03:54:40Z"
"","6566","Stateful session bean without ejb [SPR-1872]","**[Stefan Meyer](https://jira.spring.io/secure/ViewProfile.jspa?name=stemey)** opened **[SPR-1872](https://jira.spring.io/browse/SPR-1872?redirect=false)** and commented  I would like to propose a TargetSource, that stores the target bean in a threadlocal (as already exists). The target bean should be transferred to/from a session context at the end/start of a Thread. For example the target bean was created lazily as  a prototype during a thread and will be transferred in an http  filter to the http session. In the next request it will be bound to the thred by that filter. This seems to me a light weight aproach to stateful session beans. Lifecycle methods as configured in bean definition should of course be working in the scope of the chosen session context. Other contexts that come to my mind are workflow entry sessions - storing a spring beans state in such a state requires new persistence mechanisms.   --- No further details from [SPR-1872](https://jira.spring.io/browse/SPR-1872?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-04-08T19:45:40Z","2019-01-11T22:01:08Z"
"","6141","Serialize SqlRowSet [SPR-1441]","**[Srinivas Pulakanam](https://jira.spring.io/secure/ViewProfile.jspa?name=spulakanam)** opened **[SPR-1441](https://jira.spring.io/browse/SPR-1441?redirect=false)** and commented  The org.springframework.jdbc.support.rowset.SqlRowSet class is not Serializable. It wraps a CachedRowSet, which is Serializable. This presents a problem when the developer wants to cache the SqlRowSet using a cache engine that requires Serializable object  ---  **Issue Links:** - #6097 SqlRowSet not Serializable (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2005-11-04T10:56:43Z","2019-01-12T16:52:22Z"
"","5884","init-method not being invoked on bean creation [SPR-1182]","**[Sri Sankaran](https://jira.spring.io/secure/ViewProfile.jspa?name=sri)** opened **[SPR-1182](https://jira.spring.io/browse/SPR-1182?redirect=false)** and commented  Consider the bean definition  \  I expected that the doInit() method would be invoked upon property setting (none in the above case).  However this is not the case.  In order for doInit() to be invoked I **had** to implement the InitializingBean interface thusly:  public class SomeClass implements InitializingBean { public void afterPropertiesSet() { doInit(); } public void doInit() { ... } }  The docs (http://static.springframework.org/spring/docs/1.2.x/reference/beans.html#beans-factory-lifecycle-initializingbean) state that the two techniques are equivalent and that one should be able to declaratively state the init method.  Or am I reading it wrong?   ---  **Affects:** 1.2.1","closed","in: core,","spring-projects-issues","2005-07-28T06:30:06Z","2019-01-11T19:34:59Z"
"","6795","Ship JSTL 1.1 in with-dependencies package [SPR-2102]","**[Slavomir Kocka](https://jira.spring.io/secure/ViewProfile.jspa?name=kockas)** opened **[SPR-2102](https://jira.spring.io/browse/SPR-2102?redirect=false)** and commented  In spring-framework-2.0-m5-with-dependencies.zip archive are old libraries for jstl  /lib/j2ee/jstl.jar /lib/jakarta-taglibs/standard.jar  Both are for JSTL 1.0, should be for 1.1. (In tutorial 1.1 is expected...)   ---  **Affects:** 2.0 M5  1 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2006-06-05T08:47:14Z","2006-07-10T22:28:45Z"
"","6619","How to perform a declarative transaction in spring with hibernate to be used to map to database [SPR-1926]","**[sivananda r](https://jira.spring.io/secure/ViewProfile.jspa?name=sivananda)** opened **[SPR-1926](https://jira.spring.io/browse/SPR-1926?redirect=false)** and commented  How to perform a declarative transaction in spring with hibernate to be used to map to database.  I need an simple example which can explain how to setup an declarative transaction in detail.   ---  **Affects:** 1.2.7","closed","in: core,","spring-projects-issues","2006-04-18T00:58:07Z","2019-01-11T22:07:07Z"
"","6274","Spring i18n message tag to get messages from database [SPR-1577]","**[sivakumar](https://jira.spring.io/secure/ViewProfile.jspa?name=psivakumar)** opened **[SPR-1577](https://jira.spring.io/browse/SPR-1577?redirect=false)** and commented  How to get messages from the database and used in place of  i18n message tag.   ---  **Affects:** 1.2.4","closed","","spring-projects-issues","2005-12-26T16:31:23Z","2019-01-11T21:39:09Z"
"","5905","CauchoRemoteAccessor does not support programmatic setUsername/Password [SPR-1202]","**[Simon Tuffs](https://jira.spring.io/secure/ViewProfile.jspa?name=simontuffs)** opened **[SPR-1202](https://jira.spring.io/browse/SPR-1202?redirect=false)** and commented  The Acegi Contacts demo, which uses the Spring Caucho remoting clients for Hessian/Burlap demos fails to authenticate using HTTP basic/auth because the ProxyFactories are configured with username/password when the application context is created, and subsequently ignore calls to setUsername and setPassword on the CauchoRemoteAccessor.  I have a simple patch for this which I will submit shortly.   ---  **Affects:** 1.2.1  **Attachments:** - [patch.txt](https://jira.spring.io/secure/attachment/11011/patch.txt) (_921 bytes_)","closed","status: declined,","spring-projects-issues","2005-08-04T10:01:31Z","2019-01-12T16:40:57Z"
"","6186","ApplicationContext Circular Dependency Problem [SPR-1487]","**[Simon Raess](https://jira.spring.io/secure/ViewProfile.jspa?name=cocoa.ch)** opened **[SPR-1487](https://jira.spring.io/browse/SPR-1487?redirect=false)** and commented  Spring ApplicationContext throws an exception, claiming a circular dependency, in a very simple scenario:  * two classes, One and Two * One has a single constructor argument of type Two * Two has a single property of type One  The following context XML works:  \ \ \ \ \\\ \ \ \\\ \ \  Just reversing the bean definitions results in a total different situation:  \ \ \ \ \\\ \ \ \\\ \ \  The following exception is thrown:  Nov 21, 2005 1:37:15 PM org.springframework.beans.factory.support.DefaultListableBeanFactory preInstantiateSingletons INFO: Pre-instantiating singletons in factory [org.springframework.beans.factory.support.DefaultListableBeanFactory defining beans [one,two]; root of BeanFactory hierarchy] Nov 21, 2005 1:37:15 PM org.springframework.beans.factory.support.AbstractBeanFactory destroySingletons INFO: Destroying singletons in factory {org.springframework.beans.factory.support.DefaultListableBeanFactory defining beans [one,two]; root of BeanFactory hierarchy} Exception in thread ""main"" org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'one' defined in class path resource [context.xml]: Can't resolve reference to bean 'two' while setting property 'constructor argument'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'two' defined in class path resource [context.xml]: Can't resolve reference to bean 'one' while setting property 'one'; nested exception is org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name 'one': Requested bean is currently in creation (circular reference when autowiring constructor?) org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'two' defined in class path resource [context.xml]: Can't resolve reference to bean 'one' while setting property 'one'; nested exception is org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name 'one': Requested bean is currently in creation (circular reference when autowiring constructor?) org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name 'one': Requested bean is currently in creation (circular reference when autowiring constructor?) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:186) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:147) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:176) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:105) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1012) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:823) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:345) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:226) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:147) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:176) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:105) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.resolveConstructorArguments(AbstractAutowireCapableBeanFactory.java:713) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:611) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:329) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:226) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:147) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:275) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:318) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:81) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:66) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:57) at Test.main(Test.java:7)  So first of all, the order of bean definitions is in fact significant. Second, Spring fails to construct the object graph in this simple case. Note, I was using the following simple test program:  public class Test { public static void main(String[] args) { BeanFactory factory = new ClassPathXmlApplicationContext(""context.xml""); Two two = (Two) factory.getBean(""two""); System.out.println(two); System.out.println(two.getOne()); } }  Using an XmlBeanFactory works, independent of the order of those two bean elements in the XML.  public class Test { public static void main(String[] args) { XmlBeanFactory factory = new XmlBeanFactory(new ClassPathResource(""context.xml"")); Two two = (Two) factory.getBean(""two""); System.out.println(two); System.out.println(two.getOne()); } }   ---  **Affects:** 1.2.5, 1.2.6  0 votes, 5 watchers","closed","in: core,","spring-projects-issues","2005-11-21T04:12:07Z","2012-06-19T03:54:32Z"
"","6820","Forced to use CGLIB2 when no interfaces exist, which then falls over [SPR-2129]","**[Simon Matic Langford](https://jira.spring.io/secure/ViewProfile.jspa?name=eswdd)** opened **[SPR-2129](https://jira.spring.io/browse/SPR-2129?redirect=false)** and commented  I am trying to add a method interceptor to do performance monitoring.  I have configured it using ""autoproxy"" as follows: \  \ \\*\\ \ \ \watchdogInterceptor\ \ \ \  However this fails with the following exception:  Cannot proxy target class because CGLIB2 is not available. Add CGLIB to.... at org.springframework.aop.framework.DefaultAopProxyFactory.createAopProxy(DefaultAopProxyFactory.java:72) at org.springframework.aop.framework.AdvisedSupport.createAopProxy(AdvisedSupport.java:484) at org.springframework.aop.framework.ProxyFactory.getProxy(ProxyFactory.java:70) at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.createProxy(AbstractAutoProxyCreator.java:375) ....  I have looked in the code, and the if statement in DefaultAopProxyFactory seems to suggest if you have no interfaces, spring will default to CGLIB, this is confirmed by a look at the documentation. So my first point is maybe a feature request: If CGLIB2 is not available and I have specified proxyTargetClass=false (or not specified it as false is default), then no proxy should be created.  My second problem, is that if I put CGLIB2 in (I chose cglib-nodep-2.1_3.jar as I couldn't find out which version was correct), and this gave me the following error:  Caught: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'jmxRemotePasswords$created#1807ca8' defined in class path resource [servicemix.xml]: Initialization of bean failed; nested exception is org.aopalliance.aop.AspectException: null org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'jmxRemotePasswords$created#1807ca8' defined in class path resource [servicemix.xml]: Initialization of bean failed; nested exception is org.aopalliance.aop.AspectException: null  Which is thoroughly unhelpful.   ---  **Affects:** 1.2.6","closed","in: core,","spring-projects-issues","2006-06-12T05:52:06Z","2019-01-12T16:29:15Z"
"","6637","DefaultMessageListenerContainer is not using 1 Session per Thread [SPR-1944]","**[Simon Martin](https://jira.spring.io/secure/ViewProfile.jspa?name=martinsb)** opened **[SPR-1944](https://jira.spring.io/browse/SPR-1944?redirect=false)** and commented  Unless I'm missing something obvious, DefaultMessageListenerContainer is not using 1 Session per Thread as it should be.  The inner class AsyncMessageListenerInvoker is holding the session and consumer as expected, but there is only ever 1 invoker instance used -- and this is shared between each consumer thread.   As each executor runs initResourcesIfNecessary() it creates a new Session (again as expected), but this ends up overwriting the single invoker instance's session.  I believe the problem can be simply rectified by changing the registerListener method as follows:-      protected void registerListener() throws JMSException {          	for (int i = 0; i < this.concurrentConsumers; i++) {     		Runnable invoker = new AsyncMessageListenerInvoker();     		this.taskExecutor.execute(invoker);     	}     }  The change is simply to move the invoker creation inside the loop.   ---  **Affects:** 2.0 M3","closed","type: bug,","spring-projects-issues","2006-04-21T03:12:38Z","2012-06-19T03:52:25Z"
"","6501","registerSingleton method does not reset BeanDefinition [SPR-1807]","**[Simon Kitching](https://jira.spring.io/secure/ViewProfile.jspa?name=skitching)** opened **[SPR-1807](https://jira.spring.io/browse/SPR-1807?redirect=false)** and commented  Calling registerSingleton to register a specific object instance as a singleton known to a BeanFactory works fine when the existing BeanDefinition is ""compatible"". However when the BeanDefinition for that name is ""incompatible"" incorrect behaviour occurs.  In one possible scenario, BeanIsNotAFactoryException gets thrown.  I'm using registerSingleton in unit test code to explicitly override certain definitions in the application's xml config file.  ===code=== Impl2 myImpl = new Impl2();  GenericApplicationContext ctx = new GenericApplicationContext(); XmlBeanDefinitionReader xmlReader = new XmlBeanDefinitionReader(ctx); xmlReader.loadBeanDefinitions(new ClassPathResource(""example/context.xml""));  ctx.getBeanFactory().registerSingleton(""iface"", myImpl);  ctx.refresh();		 ===code===  The above code works fine when the definition for bean ""iface"" is like this: \ \  However when it looks like this, a BeanIsNotAFactoryException occurs in the ctx.refresh call: \ ... \ This is presumably because a BeanDefinition has been created when the original config file was parsed, and still exists even though a singleton has been explicitly registered later.  I think that when registerSingleton is called, the BeanDefinition for that name should be recreated, so that the definition matches the singleton object. This is presumably the behaviour that occurs when registerSingleton(""somename"", someObj) is called when somename is **not** overriding any existing definition.  At the least, javadoc for registerSingleton should be updated to point out that the object registered for a specific name must be ""compatible"" with the existing BeanDefinition for that same name.  A workaround is to explicitly register a compatible BeanDefinition, eg: RootBeanDefinition beanDef = new RootBeanDefinition(Impl2.class); ctx.registerBeanDefinition(""iface"", beanDef); ctx.getBeanFactory().registerSingleton(""iface"", myImpl);   ---  **Affects:** 1.2.7, 2.0 M3","closed","in: core,","spring-projects-issues","2006-03-21T10:06:16Z","2012-06-19T03:53:59Z"
"","6731","Transaction [SPR-2038]","**[Shriya Kishore](https://jira.spring.io/secure/ViewProfile.jspa?name=shrividhyan)** opened **[SPR-2038](https://jira.spring.io/browse/SPR-2038?redirect=false)** and commented  Hi, I am currently having a manager which is in turn calling sum methods of transaction manager for sum creates and updates. I want the methods that I am accessing in the transaction manager to be in a single transaction.  Kindly advise how to incorporate.   --- No further details from [SPR-2038](https://jira.spring.io/browse/SPR-2038?redirect=false)","closed","in: core,","spring-projects-issues","2006-05-18T19:10:50Z","2019-01-11T18:15:44Z"
"","6200","Unable to Commit transaction using JNDI Resource. [SPR-1501]","**[shivakumar Balakrishna](https://jira.spring.io/secure/ViewProfile.jspa?name=acharyshiva)** opened **[SPR-1501](https://jira.spring.io/browse/SPR-1501?redirect=false)** and commented  Hi  I am new to Spring, I am working on transaction support on my DAO objects. I am using the transaction proxy as per the documentation. And it seems working with a datasource created by ""org.apache.commons.dbcp.BasicDataSource"" But when I use a JNDI datasource created in websphere . I am unable to commit or rollback.  I am not sure what I am missing here.  Thanks in advance..   ---  **Attachments:** - [applicationContext.xml](https://jira.spring.io/secure/attachment/11282/applicationContext.xml) (_7.09 kB_) - [transaction.log](https://jira.spring.io/secure/attachment/11283/transaction.log) (_206.50 kB_)","closed","status: declined,","spring-projects-issues","2005-11-28T03:36:29Z","2019-01-12T16:29:50Z"
"","6180","Spring Transaction Manager unable to commit sucess ful transaction [SPR-1481]","**[shivakumar Balakrishna](https://jira.spring.io/secure/ViewProfile.jspa?name=acharyshiva)** opened **[SPR-1481](https://jira.spring.io/browse/SPR-1481?redirect=false)** and commented  Hi  I am new to Springs. I have configured my springs to work with MDB. I have Transaction with basically creates Order and line item. I see no errors when I run these transaction but these transaction is not commited into the database.  I have no idea what I am doing wrong.  Any help on this issue would be of great help  Here is the snippet of my application context  \ 		\\oracle.jdbc.OracleDriver\\ 		\\\\ 		\\\\ 		\\\\ 		\\false\\                                                                                                   	     	     	     		     			PROPAGATION_REQUIRED     			PROPAGATION_REQUIRED     			PROPAGATION_REQUIRED     		     	         ---  **Attachments:** - [CommerceDAOImpl.java](https://jira.spring.io/secure/attachment/11270/CommerceDAOImpl.java) (_1.96 kB_) - [Order.hbm.xml](https://jira.spring.io/secure/attachment/11271/Order.hbm.xml) (_10.81 kB_) - [transaction.txt](https://jira.spring.io/secure/attachment/11272/transaction.txt) (_61.46 kB_)","closed","","spring-projects-issues","2005-11-18T07:20:16Z","2019-01-11T21:09:51Z"
"","6434","Invalid parameter Index used for JPA named queries [SPR-1737]","**[Seth White](https://jira.spring.io/secure/ViewProfile.jspa?name=sethwhite)** opened **[SPR-1737](https://jira.spring.io/browse/SPR-1737?redirect=false)** and commented  The following code in JpaTemplate is incorrect.  The parameter Index should start at 1, not 0.  public List findByNamedQuery(final String queryName, final Object... values) throws DataAccessException { return executeFind(new JpaCallback() { public Object doInJpa(EntityManager em) throws PersistenceException { Query queryObject = em.createNamedQuery(queryName); if (values != null) { for (int i = 0; i < values.length; i++) { queryObject.setParameter(i, values[i]); } } return queryObject.getResultList(); } }); }   ---  **Affects:** 2.0 M2","closed","type: bug,","spring-projects-issues","2006-02-21T07:56:39Z","2012-06-19T03:54:29Z"
"","6538","Option Tag Using Incorrect Heuristics to Determine If Inside Select Tag [SPR-1844]","**[Seth Ladd](https://jira.spring.io/secure/ViewProfile.jspa?name=sethladd)** opened **[SPR-1844](https://jira.spring.io/browse/SPR-1844?redirect=false)** and commented  There's a bug in OptionTag, in that it uses incorrect heuristics when determining if it is inside a SelectTag.  The problem is, it uses the existance of SelectTag.LIST_VALUE_PAGE_ATTRIBUTE in the pageContext. If it doesn't exist, it will throw an IllegalStateException.  However, it's perfectly legal to **not** have a value for LIST_VALUE_PAGE_ATTRIBUTE.  This can happen when the form is displaying for the first time, and no value has been set for the command bean.  If a command bean's property is null, then the call to setAttribute(LIST_VALUE_PAGE_ATTRIBUTE, getValue()) will actually perform a removeAttribute.  I suggest simply changing OptionTag to not throw an IllegalStateException if there is no value for LIST_VALUE_PAGE_ATTRIBUTE.  If it's null, it's null, oh well. :)   ---  **Affects:** 2.0 M3","closed","type: bug,","spring-projects-issues","2006-03-30T16:22:01Z","2012-06-19T03:53:55Z"
"","6482","Provide Adapter Classes for MessageListener to Adapt Any POJO [SPR-1787]","**[Seth Ladd](https://jira.spring.io/secure/ViewProfile.jspa?name=sethladd)** opened **[SPR-1787](https://jira.spring.io/browse/SPR-1787?redirect=false)** and commented  Please provide a simple MessageListenerAdapter so that any POJO may participate in JMS without implementing MessageListener.  This would allow for POJOs for which we do not have the source to receive asynchronous messages.  This is in response to Juergen's request for a formal JIRA issue.   ---  **Attachments:** - [MessageListenerAdapter.java](https://jira.spring.io/secure/attachment/11525/MessageListenerAdapter.java) (_4.75 kB_) - [MessageListenerAdapterTest.java](https://jira.spring.io/secure/attachment/11527/MessageListenerAdapterTest.java) (_3.51 kB_) - [SendReturnMessageListenerAdapter.java](https://jira.spring.io/secure/attachment/11526/SendReturnMessageListenerAdapter.java) (_1.82 kB_)","closed","type: enhancement,","spring-projects-issues","2006-03-12T18:41:48Z","2012-06-19T03:54:14Z"
"","6458","Select Tag Misinterpreting items attribute type [SPR-1760]","**[Seth Ladd](https://jira.spring.io/secure/ViewProfile.jspa?name=sethladd)** opened **[SPR-1760](https://jira.spring.io/browse/SPR-1760?redirect=false)** and commented  Hello,  The spring-form:select tag is somehow interpreting the value for the items parameter as a string always.  This string has as a value to toString() result from the object intended to be the value for items.  Example:    ${p }    The manual iteration through phoneNumberTypes works great, as c:forEach understands that is is an array. However, when given to spring-form:select, we get the error:  javax.servlet.jsp.JspException: Property 'items' must be of type 'java.util.Collection', array, or 'java.util.Map'.  You specified a 'java.lang.String'. org.springframework.web.servlet.tags.form.SelectTag.writeTagContent(SelectTag.java:167) org.springframework.web.servlet.tags.form.AbstractFormTag.doStartTagInternal(AbstractFormTag.java:81)  (I added some extra debugging there in the error message)  Running this through the debugger, phoneNumberTypes is (in this case) the string ""[HOME,CELL,WORK]"", which is the toString() on an ArrayList.   ---  **Affects:** 2.0 M3  **Attachments:** - [SelectTag.java](https://jira.spring.io/secure/attachment/11503/SelectTag.java) (_9.56 kB_) - [SelectTagTests.java](https://jira.spring.io/secure/attachment/11504/SelectTagTests.java) (_6.37 kB_) - [spring-form.tld](https://jira.spring.io/secure/attachment/11505/spring-form.tld) (_27.23 kB_)  0 votes, 5 watchers","closed","type: bug,","spring-projects-issues","2006-03-04T11:08:32Z","2019-01-11T22:08:23Z"
"","6445","Spring Form Input Tag Does Not Respect spring:nestedPath Tag [SPR-1748]","**[Seth Ladd](https://jira.spring.io/secure/ViewProfile.jspa?name=sethladd)** opened **[SPR-1748](https://jira.spring.io/browse/SPR-1748?redirect=false)** and commented  The  tag does not respect the  tag.  Example:    \ \\First Name:\\ \\\ \ \  This generates the error:  org.springframework.beans.NotReadablePropertyException: Invalid property 'first' of bean class [com.apress.beginning_spring.chap8.domain.Player]: Bean property 'first' is not readable or has an invalid getter method: Does the return type of the getter match the parameter type of the setter?  This is because the outer object is of class Player, but the input field is for a property on a Player's Name object.   ---  **Affects:** 2.0 M3","closed","type: bug,","spring-projects-issues","2006-02-27T21:53:39Z","2019-01-13T08:56:04Z"
"","6444","Spring Form Tag Does Not Allow Blank for action Attribute [SPR-1747]","**[Seth Ladd](https://jira.spring.io/secure/ViewProfile.jspa?name=sethladd)** opened **[SPR-1747](https://jira.spring.io/browse/SPR-1747?redirect=false)** and commented  The  tag does not allow an empty value for the action attribute.  Declaring an empty action attribute is a common trick to default to the URI that the page originally came from.  It nicely keeps coupling a bit lower as you don't need to specify the URI that the form will submit to.  Please allow this to be legal:   Thanks!   ---  **Affects:** 2.0 M3","closed","type: bug,","spring-projects-issues","2006-02-27T21:50:24Z","2012-06-19T03:53:57Z"
"","6443","Support QNames to Help Shorten FQCN in XML files [SPR-1746]","**[Seth Ladd](https://jira.spring.io/secure/ViewProfile.jspa?name=sethladd)** opened **[SPR-1746](https://jira.spring.io/browse/SPR-1746?redirect=false)** and commented  In an effort to further reduce the amount of typing (and eye ball strain) required when configuring a Spring application via the standard XML file, I propose to utilize XML qnames (or something similar) to shorten fully qualified class names.  Example:  Before:  \  After:  \  Here, the spring: prefix is mapped to org.springframework.  There can be standard prefix mappings, such as spring:.  It should be very easy to add more, such as:  \ \  Now, of course we can do this with a PropertyPlaceholderConfigurer, but that's more verbose and requires an external configuration file.  It would be very nice if Spring natively included this type of support.  Also, granted, these aren't XML Qnames the way the specification defines them.  The processing is done OOB from the XML processor.  Processing should be fairly straightforward, as FQCN can't have a : character in them.  Therefore, if one exists, simply resolve it against the known prefixes, concatenate the strings, and then attempt resolving the FQCN.  Thanks!   --- No further details from [SPR-1746](https://jira.spring.io/browse/SPR-1746?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-02-27T21:41:27Z","2007-05-24T22:13:25Z"
"","6442","Spring Form Tag Missing Method Attribute in TLD [SPR-1745]","**[Seth Ladd](https://jira.spring.io/secure/ViewProfile.jspa?name=sethladd)** opened **[SPR-1745](https://jira.spring.io/browse/SPR-1745?redirect=false)** and commented  Great work on adding the form simplication taglibs to the core distro!  Spring has finally caught up to Struts in the year 2000. :)  The \ tag declaration in the TLD is missing the 'method' attribute.  The tag class itself, however, already includes the appropriate code.  Thanks again!  I need to create an errata for the book now. :)   ---  **Affects:** 2.0 M3","closed","type: bug,","spring-projects-issues","2006-02-27T21:20:08Z","2012-06-19T03:54:33Z"
"","6189","Allow AntPathMatcher to Use Different Path Deliminators [SPR-1490]","**[Seth Ladd](https://jira.spring.io/secure/ViewProfile.jspa?name=sethladd)** opened **[SPR-1490](https://jira.spring.io/browse/SPR-1490?redirect=false)** and commented  Hello,  Attached is a small patch to AntPathMatcher that allows a user to specify the path deliminator.  This class is very handy, although some uses require different deliminators.  Also attached is another test method.  Thanks! Seth   ---  **Attachments:** - [patch.txt](https://jira.spring.io/secure/attachment/11275/patch.txt) (_5.63 kB_)","closed","type: enhancement,","spring-projects-issues","2005-11-21T17:48:27Z","2012-06-19T03:54:24Z"
"","6188","AbstractXslFoView No Longer Compiles [SPR-1489]","**[Seth Ladd](https://jira.spring.io/secure/ViewProfile.jspa?name=sethladd)** opened **[SPR-1489](https://jira.spring.io/browse/SPR-1489?redirect=false)** and commented  The AbstractXslFoView class, from the sandbox, no longer compiles.  The doSource() method signature has changed.  Small quick patch attached.   ---  **Attachments:** - [patch.txt](https://jira.spring.io/secure/attachment/11274/patch.txt) (_1.50 kB_)","closed","type: bug,","spring-projects-issues","2005-11-21T16:37:13Z","2012-06-19T03:54:36Z"
"","6187","Allow DataBinder to Bind Directly to Fields [SPR-1488]","**[Seth Ladd](https://jira.spring.io/secure/ViewProfile.jspa?name=sethladd)** opened **[SPR-1488](https://jira.spring.io/browse/SPR-1488?redirect=false)** and commented  Hello,  I've often wanted the ability to use the DataBinder to bind directly to fields (using reflection) instead of going through the getters and setters.  The main use case for this is trying to bind to immutable beans.  Much like Hibernate provides the option of access values through property accessors or field accessors, the DataBinder's usefulness would greatly increase if it had this functionality.  Thanks, Seth   ---  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2005-11-21T16:25:07Z","2013-05-19T12:36:54Z"
"","6170","JavaDoc Incorrect for AntPathMatcher [SPR-1471]","**[Seth Ladd](https://jira.spring.io/secure/ViewProfile.jspa?name=sethladd)** opened **[SPR-1471](https://jira.spring.io/browse/SPR-1471?redirect=false)** and commented  Hello,  The JavaDoc for AntPathMatcher has a typo:  org/**/servlet/bla.jsp - matches org/springframework/servlet/bla.jsp but also org/springframework/testing/servlet/bla.jsp and com/servlet/bla.jsp  that last example should read ""org/servlet/bla.jsp""  Seth   --- No further details from [SPR-1471](https://jira.spring.io/browse/SPR-1471?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-11-14T18:27:53Z","2012-06-19T03:54:33Z"
"","6166","AbstractWizardFormController's validatePage() should use reflection to call appropriate validation method, by default [SPR-1467]","**[Seth Ladd](https://jira.spring.io/secure/ViewProfile.jspa?name=sethladd)** opened **[SPR-1467](https://jira.spring.io/browse/SPR-1467?redirect=false)** and commented  Hello,  In an effort to provide more ""convention over configuration"", it would be very nice if the default implementation of validatePage() would use reflection to look for validation methods on the validator.  The Validator could implement validatePage0(), validatePage1(), etc.  This is easily called by the controller's validatePage() method based on the page parameter.  Of course, validatePage() would remain protected to easily override this.  Thoughts?  Thanks! Seth   --- No further details from [SPR-1467](https://jira.spring.io/browse/SPR-1467?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-11-12T16:11:59Z","2012-06-19T09:37:26Z"
"","6165","Replace implementation of isFinishRequest in AbstractWizardController [SPR-1466]","**[Seth Ladd](https://jira.spring.io/secure/ViewProfile.jspa?name=sethladd)** opened **[SPR-1466](https://jira.spring.io/browse/SPR-1466?redirect=false)** and commented  Hello,  isFinish() of AbstractWizardController is deprecated, and isFinishRequest has replaced it.  However, isFinishRequest() delegates back to isFinish().  This seems backwards to me.  The non-deprecated method should contain the call to WebUtils.hasSubmitParameter(request, PARAM_FINISH); and isFinish() should delegate to isFinishRequest().  Same thing for isCancel() and isCancelRequest().  What do you think?  Thanks, Seth   --- No further details from [SPR-1466](https://jira.spring.io/browse/SPR-1466?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-11-11T14:25:59Z","2005-11-12T15:04:01Z"
"","6164","JavaDocs incorrect for getPageCount in AbstractWizardController [SPR-1465]","**[Seth Ladd](https://jira.spring.io/secure/ViewProfile.jspa?name=sethladd)** opened **[SPR-1465](https://jira.spring.io/browse/SPR-1465?redirect=false)** and commented  Hello,  The JavaDocs for getPageCount() in AbstractWizardController are incorrect, probably from an old version of the method.  They reference a different signature and mention that the method can be overriden by subclasses, except now the method is final.  Thanks, Seth   --- No further details from [SPR-1465](https://jira.spring.io/browse/SPR-1465?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-11-11T14:11:08Z","2005-11-12T15:02:15Z"
"","6157","Clarification for JavaDocs for ParameterMethodNameResolver [SPR-1458]","**[Seth Ladd](https://jira.spring.io/secure/ViewProfile.jspa?name=sethladd)** opened **[SPR-1458](https://jira.spring.io/browse/SPR-1458?redirect=false)** and commented  Hello,  Would like to add a clarification for the JavaDocs for ParameterMethodNameResolver.  We should mention that if **both** a paramName is found, and a param from methodParamNames, then the methodParamNames wins.  In other words, the second strategy will win over the first strategy.  This could be considered a bug, but at least a warning or info log statement be put in, so a user might know which strategy is resolving the method name.  Thanks! Seth   --- No further details from [SPR-1458](https://jira.spring.io/browse/SPR-1458?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-11-09T18:48:46Z","2012-06-19T03:54:03Z"
"","6156","Subclasses of InternalPathMethodNameResolver cannot access prefix and suffix properties [SPR-1457]","**[Seth Ladd](https://jira.spring.io/secure/ViewProfile.jspa?name=sethladd)** opened **[SPR-1457](https://jira.spring.io/browse/SPR-1457?redirect=false)** and commented  Hello,  A subclass of InternalPathMethodNameResolver cannot access either the prefix or suffix properties.  Please provide public final getPrefix() and public final getSuffix() methods.  Also, it would be nice to add a callback for manipulation of the URL substring, before it is combined with prefix and suffix.  Example use case:  if the prefix is ""do"", and the URL is /app/account/delete.x, then the result will be ""dodelete"".  However, in common Java code, you'd like to see ""doDelete"".  Suggestion would be to create some sort of manipulateMethodName(String) that would give subclasses the opportunity to apply whatever processing required (uppercase, lowercase, conversion, etc).  One instance of this is applying a prefix and suffix, for example.  Thanks!   --- No further details from [SPR-1457](https://jira.spring.io/browse/SPR-1457?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-11-08T18:35:55Z","2012-06-19T03:54:22Z"
"","6155","Misspelling in JavaDoc for ParameterMethodNameResolver [SPR-1456]","**[Seth Ladd](https://jira.spring.io/secure/ViewProfile.jspa?name=sethladd)** opened **[SPR-1456](https://jira.spring.io/browse/SPR-1456?redirect=false)** and commented  Found a typo in the class javadoc for ParameterMethodNameResolver:  ""The second resolution strategy is **prmarilly** expected to be used with web pages containing multiple submit buttons.""    --- No further details from [SPR-1456](https://jira.spring.io/browse/SPR-1456?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-11-08T18:16:47Z","2012-06-19T03:54:02Z"
"","6154","Exceptions thrown from Binding do not get routed to exception handlers in MultiActionController [SPR-1455]","**[Seth Ladd](https://jira.spring.io/secure/ViewProfile.jspa?name=sethladd)** opened **[SPR-1455](https://jira.spring.io/browse/SPR-1455?redirect=false)** and commented  Hello,  The invokeNamedMethod of MultiActionController only routes exceptions thrown from the method.invoke() call to registered exception handlers of the class.  If an exception is thrown during the data binding process, this exception is not caught and thus can never be routed to an exception handler.  I'd like to propose that a subclass of MultiActionController be able to catch ServletRequestBindingException by creating an exception handler method.  Thanks, Seth   ---  **Affects:** 1.2.5","closed","type: enhancement,","spring-projects-issues","2005-11-08T17:07:36Z","2012-06-19T03:54:07Z"
"","6147","No way to override command name in MultiactionController [SPR-1447]","**[Seth Ladd](https://jira.spring.io/secure/ViewProfile.jspa?name=sethladd)** opened **[SPR-1447](https://jira.spring.io/browse/SPR-1447?redirect=false)** and commented  Even though the javadocs for MultiactionController indicate that a subclass can set the command name, there is no setCommandName() available.  Further more, the DEFAULT_COMMAND_NAME is set to final, and is used directly when creating the binder.  We should allow overriding of the command name, like we do for the BaseCommandController classes.  A simple setCommandName() would be perfect.  Also, I could be blind and not seeing it.  :)  Thanks!   ---  **Affects:** 1.2.5  **Attachments:** - [patch.txt](https://jira.spring.io/secure/attachment/11246/patch.txt) (_2.01 kB_)","closed","type: bug,","spring-projects-issues","2005-11-06T18:26:59Z","2012-06-19T03:54:38Z"
"","6035","Error with XML in Hibernate Example (section 12.2.2) [SPR-1335]","**[Seth Ladd](https://jira.spring.io/secure/ViewProfile.jspa?name=sethladd)** opened **[SPR-1335](https://jira.spring.io/browse/SPR-1335?redirect=false)** and commented  Just a minor error with the XML syntax in the example in section 12.2.2:  \ \","closed","","spring-projects-issues","2005-10-01T11:44:17Z","2019-01-11T21:17:20Z"
"","5958","Add ignoreMethods to MethodNameBasedMBeanInfoAssembler [SPR-1256]","**[Seth Ladd](https://jira.spring.io/secure/ViewProfile.jspa?name=sethladd)** opened **[SPR-1256](https://jira.spring.io/browse/SPR-1256?redirect=false)** and commented  Hello,  It would be really helpful to add a Set of ignored methods to MethodNameBasedMBeanInfoAssembler.  For beans with many methods, and only one or two should be ignored/excluded, this would help keep the configuration simple.  Or possibly, this would be a different subclass of MBeanInfoAssembler, which defaults to adding every method unless it is in the ignored methods.  Either way, works for me! Thanks! Seth   ---  **Affects:** 1.2.3  **Attachments:** - [IgnoreMethodNameMBeanInfoAssembler.java](https://jira.spring.io/secure/attachment/11121/IgnoreMethodNameMBeanInfoAssembler.java) (_3.09 kB_) - [IgnoreMethodNameMBeanInfoAssemblerTest.java](https://jira.spring.io/secure/attachment/11122/IgnoreMethodNameMBeanInfoAssemblerTest.java) (_1.44 kB_)","closed","type: enhancement,","spring-projects-issues","2005-08-26T10:21:51Z","2012-06-19T03:54:41Z"
"","5955","Scripts No Longer Reloadable Due to InstantiationAwareBeanPostProcessor Not Applying to factory-method beans [SPR-1253]","**[Seth Ladd](https://jira.spring.io/secure/ViewProfile.jspa?name=sethladd)** opened **[SPR-1253](https://jira.spring.io/browse/SPR-1253?redirect=false)** and commented  Hello,  Wasn't sure what component to put this under, as the real issue is for sandbox code.  The scripting support (which is very nice, btw) no longer supports dynamically reloadable scripts.  In fact, the objects created are no longer instances of DynamicObject.  To verify, the unit test for GroovyScriptFactoryTests fails for these checks.  The reasons this functionality is no longer working is the default suggested way to create a script object in the app context is to use the following bean definition:           	testing/Foo.groovy       The use of factory-method, however, is not compatible with the InstantiationAwareBeanPostProcessor interface.  This interface ignores these types of beans.  The AbstractScriptFactory extends AbstractAutoProxyCreator, which is in fact a InstantiationAwareBeanPostProcessor.  Therefore, script objects that use this factory-method creation mechanism, are no longer able to be postProcessBeforeInstantiation.  This is where the dynamic reloadable TargetSource for the script was created.  There are a bunch of different ways of solving this issue.  However, because the chain of events is quite big, I'd thought I would let you and Rod (who originally wrote this) know about this.  I'd love to see this functionality back.  Thanks! Seth   ---  **Affects:** 1.2.3  1 votes, 1 watchers","closed","type: bug,","spring-projects-issues","2005-08-25T19:57:02Z","2012-06-19T03:54:05Z"
"","5949","Simplify Session Form Checking Logic in AbstractFormController [SPR-1247]","**[Seth Ladd](https://jira.spring.io/secure/ViewProfile.jspa?name=sethladd)** opened **[SPR-1247](https://jira.spring.io/browse/SPR-1247?redirect=false)** and commented  Hello again,  As I was browsing the AbstractFormController source, I noticed what seemed to be some duplication of code.  It's quite possible this can be cleaned up a small bit.  Inside handleRequestInternal, there is this logic:  if (isSessionForm()) { HttpSession session = request.getSession(false); if (session == null || session.getAttribute(getFormSessionAttributeName(request)) == null) { return handleInvalidSubmit(request, response); } }  Which is essentially duplicated in getCommand() of the same class.  I'd like to propose that getCommand() throw some error-specific exceptions when the session doesn't exist, or when the form doesn't exist in the session.  This way, the code in handleRequestInternal can merely attempt a call to getCommand() and see if there are exceptions like NoExistingSessionException.  If handleRequestInternal sees that exception, it can then forward the call to handleInvalidSubmit().  At this point, the checking of the session and the checking if the form bean is in the session is in two different places that are called twice in a row.  I think with just a bit of code moving, we can do the checking of the session once.  Thanks! Seth   ---  **Affects:** 1.2.4","closed","type: enhancement,","spring-projects-issues","2005-08-22T19:27:54Z","2012-06-19T03:54:07Z"
"","5930","Create factory method for ObjectOutputStream in HttpInvokerServiceExporter for easy replacement in subclasses [SPR-1228]","**[Seth Ladd](https://jira.spring.io/secure/ViewProfile.jspa?name=sethladd)** opened **[SPR-1228](https://jira.spring.io/browse/SPR-1228?redirect=false)** and commented  Hello,  It would be really nice to have a createObjectOutputStream method in HttpInvokerServiceExporter so that subclasses can create their own ObjectOutputStream impl.  For instance, I need to strip out Hibernate collections and replace them with standard JDK collections at serialization time.  I have created a DeHibernateCollectionsObjectOutputStream that simply overrides replaceObject().  I had to override the entire writeRemoteInvocationResult() method in HttpInvokerServiceExporter just to create my special object output stream.  Thanks very much! Seth   ---  **Affects:** 1.2.4","closed","type: enhancement,","spring-projects-issues","2005-08-12T09:54:43Z","2005-08-12T21:24:45Z"
"","5929","Edit on FactoryBean Docs [SPR-1227]","**[Seth Ladd](https://jira.spring.io/secure/ViewProfile.jspa?name=sethladd)** opened **[SPR-1227](https://jira.spring.io/browse/SPR-1227?redirect=false)** and commented  Just a minor edit required for the FactoryBean documentation.  Currently, it reads:  The org.springframework.beans.factory.FactoryBean  interface is to be implemented by objects that are themselves factories. The BeanFactory interface provides three method:  I think s/BeanFactory/FactoryBean/ would fix it.  This is in the documentation at http://static.springframework.org/spring/docs/1.2.x/reference/beans.html#beans-factory-lifecycle-factorybean   ---  **Affects:** 1.2.4","closed","type: bug,","spring-projects-issues","2005-08-12T05:46:58Z","2005-08-12T20:33:38Z"
"","5897","AbstractController Missing Some JavaDocs [SPR-1194]","**[Seth Ladd](https://jira.spring.io/secure/ViewProfile.jspa?name=sethladd)** opened **[SPR-1194](https://jira.spring.io/browse/SPR-1194?redirect=false)** and commented  AbstractController's JavaDocs do not mention synchronizeOnSession in the class docs.  The other properties are there, so adding this property completes the set.  Also, added a few words in the workflow outline to mention optionally synchronizing around the session.  Very small, javadoc only patch.  Thanks, Seth   ---  **Affects:** 1.2.3  **Attachments:** - [patch.txt](https://jira.spring.io/secure/attachment/11005/patch.txt) (_1.49 kB_)","closed","type: enhancement,","spring-projects-issues","2005-07-31T18:26:28Z","2005-08-01T20:10:13Z"
"","5894","FixedThemeResolver Should Thrown UnsupportedOperationException [SPR-1191]","**[Seth Ladd](https://jira.spring.io/secure/ViewProfile.jspa?name=sethladd)** opened **[SPR-1191](https://jira.spring.io/browse/SPR-1191?redirect=false)** and commented  The FixedThemeResolver throws IllegalArgumentException when setThemeName is called.  It should throw UnsupportedOperationException here.  Thanks, Seth   ---  **Affects:** 1.2.3","closed","type: enhancement,","spring-projects-issues","2005-07-30T12:29:38Z","2005-07-31T19:45:22Z"
"","5893","CookieThemeResolver should extend AbstractThemeResolver [SPR-1190]","**[Seth Ladd](https://jira.spring.io/secure/ViewProfile.jspa?name=sethladd)** opened **[SPR-1190](https://jira.spring.io/browse/SPR-1190?redirect=false)** and commented  Browsing the ThemeResolver implementations, I noticed an oddity.  The CookieThemeResolver does not extend from AbstractThemeResolver.  This creates an odd schism in the hierarchy.  In my opinion, the CookieThemeResolver IS-A AbstractThemeResolver much more than a CookieGenerator.  It can certainly use the CookieGenerator via HAS-A and delegatation.  It would appear that no one uses the CookieThemeResolver directly as a CookieGenerator, so the change shouldn't break any client code.  It also creates some duplicate code and logic, as both AbstractThemeResolver and CookieThemeResolver implement a ORIGINAL_DEFAULT_THEME_NAME and setters.  They are the same in both classes, and their intentions are the same.  For this reason alone I believe CookieThemeResolver should extend AbstractThemeResolver directly.  Let me know if you'd like a patch.  Thanks! Seth   ---  **Affects:** 1.2.3","closed","type: enhancement,","spring-projects-issues","2005-07-30T12:21:54Z","2005-07-31T20:04:00Z"
"","5881","Better JavaDocs or Explicit clear() method for LocaleResolver [SPR-1179]","**[Seth Ladd](https://jira.spring.io/secure/ViewProfile.jspa?name=sethladd)** opened **[SPR-1179](https://jira.spring.io/browse/SPR-1179?redirect=false)** and commented  I'd like to recommend we either place more explicit JavaDocs in LocaleResolver, or add an explicit clear() method, to allow a client of this interface to clear out the locale.  Both cookielocaleresolver and SessionLocaleResolver support the notion of clearing out the locale (setting it to null on the setLocale).  While it's implied you can clear it out by setting it to null, it would be nice for this to be explicitly stated in the JavaDocs.  Or, perhaps a clear() method, which is even more explicit.  The classes that don't support changing of the locale (fixedlocaleresolver, acceptheaderlocaleresolver) already throw IllegalArgumentException for things they don't support.  Which, BTW, shouldn't they throw UnsupportedOperationException?  In Summary: more explicit javadocs needed on how to clear out a locale, and change throwing of IllegalArgumentException to UnsupportedOperationException for resolvers that can't change the locale.  Thanks! Seth   ---  **Affects:** 1.2.3","closed","type: enhancement,","spring-projects-issues","2005-07-27T18:16:52Z","2005-07-31T19:59:55Z"
"","5880","Misspelling in JavaDoc for SimpleUrlHandlerMapping [SPR-1178]","**[Seth Ladd](https://jira.spring.io/secure/ViewProfile.jspa?name=sethladd)** opened **[SPR-1178](https://jira.spring.io/browse/SPR-1178?redirect=false)** and commented  There is a minor misspelling in SimpleUrlHandlerMapping JavaDocs.  In the docs for the class, the sentence, ""For syntax details, see the AbtPathMatcher class."" should read, ""For syntax details, see the AntPathMatcher class."" :)   ---  **Affects:** 1.2.3","closed","type: enhancement,","spring-projects-issues","2005-07-27T17:26:01Z","2005-07-31T19:57:57Z"
"","6431","Spring fails to lookup a Websphere V6 Data Source using JNDI [SPR-1734]","**[Sephi Lipkin](https://jira.spring.io/secure/ViewProfile.jspa?name=tici)** opened **[SPR-1734](https://jira.spring.io/browse/SPR-1734?redirect=false)** and commented  I use a servlet on Websphere V6 to initialize the application. Spring framework 1.2.5 is called to initialize the application context.  There's a data source bean definition in the ApplicationContext.xml:  \ \ \java:comp/env/jdbc/OracleJDBCDriver\ \ \  The exception below is thrown and I can't find what the problem could be. The reference to the data source is defined in web.xml .  [17:08:58:328 IST 09/02/06] 00000010 ContextLoader E   Context initialization failed [17:08:58:344 IST 09/02/06] 00000010 ContextLoader E   TRAS0014I: The following exception was logged org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in ServletContext resource [/WEB-INF/applicationContext.xml]: Initialization of bean failed; nested exception is javax.naming.NameNotFoundException: Name comp/env/jdbc not found in context ""java:"". javax.naming.NameNotFoundException: Name comp/env/jdbc not found in context ""java:"". at com.ibm.ws.naming.ipbase.NameSpace.getParentCtxInternal(NameSpace.java:1716) at com.ibm.ws.naming.ipbase.NameSpace.lookupInternal(NameSpace.java:1062) at com.ibm.ws.naming.ipbase.NameSpace.lookup(NameSpace.java:985) at com.ibm.ws.naming.urlbase.UrlContextImpl.lookup(UrlContextImpl.java:1263) at com.ibm.ws.naming.java.javaURLContextRoot.lookup(javaURLContextRoot.java:198) at com.ibm.ws.naming.java.javaURLContextRoot.lookup(javaURLContextRoot.java:139) at javax.naming.InitialContext.lookup(InitialContext.java:361) at org.springframework.jndi.JndiTemplate$1.doInContext(JndiTemplate.java:123) at org.springframework.jndi.JndiTemplate.execute(JndiTemplate.java:85) at org.springframework.jndi.JndiTemplate.lookup(JndiTemplate.java:121) at org.springframework.jndi.JndiLocatorSupport.lookup(JndiLocatorSupport.java:71) at org.springframework.jndi.JndiObjectLocator.lookup(JndiObjectLocator.java:106) at org.springframework.jndi.JndiObjectFactoryBean.afterPropertiesSet(JndiObjectFactoryBean.java:125) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1003) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:348) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:226) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:147) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:269) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:317) at org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.refresh(AbstractRefreshableWebApplicationContext.java:134) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:230) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:156) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:48) at com.ibm.ws.webcontainer.webapp.WebApp.notifyServletContextCreated(WebApp.java:1355) at com.ibm.ws.webcontainer.webapp.WebApp.initialize(WebApp.java:371) at com.ibm.ws.webcontainer.webapp.WebGroup.addWebApplication(WebGroup.java:114) at com.ibm.ws.webcontainer.VirtualHost.addWebApplication(VirtualHost.java:127) at com.ibm.ws.webcontainer.WebContainer.addWebApp(WebContainer.java:776) at com.ibm.ws.webcontainer.WebContainer.addWebApplication(WebContainer.java:729) at com.ibm.ws.runtime.component.WebContainerImpl.install(WebContainerImpl.java:140) at com.ibm.ws.runtime.component.WebContainerImpl.start(WebContainerImpl.java:360) at com.ibm.ws.runtime.component.ApplicationMgrImpl.start(ApplicationMgrImpl.java:1019) at com.ibm.ws.runtime.component.DeployedApplicationImpl.fireDeployedObjectStart(DeployedApplicationImpl.java:1028) at com.ibm.ws.runtime.component.DeployedModuleImpl.start(DeployedModuleImpl.java:538) at com.ibm.ws.runtime.component.DeployedApplicationImpl.start(DeployedApplicationImpl.java:724) at com.ibm.ws.runtime.component.ApplicationMgrImpl.startApplication(ApplicationMgrImpl.java:683) at com.ibm.ws.runtime.component.ApplicationMgrImpl.startApplication(ApplicationMgrImpl.java:1161) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:85) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:58) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java(Compiled Code)) at java.lang.reflect.Method.invoke(Method.java(Compiled Code)) at javax.management.modelmbean.RequiredModelMBean.invokeMethod(RequiredModelMBean.java:1366) at javax.management.modelmbean.RequiredModelMBean.invoke(RequiredModelMBean.java:1012) at mx4j.server.interceptor.InvokerMBeanServerInterceptor.invoke(InvokerMBeanServerInterceptor.java:233) at mx4j.server.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java(Compiled Code)) at mx4j.server.interceptor.SecurityMBeanServerInterceptor.invoke(SecurityMBeanServerInterceptor.java:86) at mx4j.server.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java(Compiled Code)) at mx4j.server.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java(Compiled Code)) at mx4j.server.interceptor.ContextClassLoaderMBeanServerInterceptor.invoke(ContextClassLoaderMBeanServerInterceptor.java:167) at mx4j.server.MX4JMBeanServer.invoke(MX4JMBeanServer.java:1249) at com.ibm.ws.management.AdminServiceImpl$1.run(AdminServiceImpl.java:901) at com.ibm.ws.security.util.AccessController.doPrivileged(AccessController.java(Compiled Code)) at com.ibm.ws.management.AdminServiceImpl.invoke(AdminServiceImpl.java:817) at com.ibm.ws.management.connector.AdminServiceDelegator.invoke(AdminServiceDelegator.java:139) at com.ibm.ws.management.connector.rmi.RMIConnectorService.invoke(RMIConnectorService.java:176) at com.ibm.ws.management.connector.rmi._RMIConnectorService_Tie.invoke(_RMIConnectorService_Tie.java:362) at com.ibm.ws.management.connector.rmi._RMIConnectorService_Tie._invoke(_RMIConnectorService_Tie.java(Compiled Code)) at com.ibm.CORBA.iiop.ServerDelegate.dispatchInvokeHandler(ServerDelegate.java(Compiled Code)) at com.ibm.CORBA.iiop.ServerDelegate.dispatch(ServerDelegate.java(Compiled Code)) at com.ibm.rmi.iiop.ORB.process(ORB.java(Compiled Code)) at com.ibm.CORBA.iiop.ORB.process(ORB.java(Compiled Code)) at com.ibm.rmi.iiop.Connection.doWork(Connection.java(Compiled Code)) at com.ibm.rmi.iiop.WorkUnitImpl.doWork(WorkUnitImpl.java(Compiled Code)) at com.ibm.ejs.oa.pool.PooledThread.run(ThreadPool.java(Compiled Code)) at com.ibm.ws.util.ThreadPool$Worker.run(ThreadPool.java(Compiled Code)) .   ---  **Affects:** 1.2.5","closed","in: core,","spring-projects-issues","2006-02-21T01:14:52Z","2019-01-11T22:07:41Z"
"","6007","SessionFactoryUtils does not convert StaleObjectException correctly [SPR-1306]","**[Scott Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=scottr)** opened **[SPR-1306](https://jira.spring.io/browse/SPR-1306?redirect=false)** and commented  org.springframework.orm.hibernate3.SessionFactoryUtils.convertHibernateAccessException converts hibernate StaleObjectStateException to spring's HibernateOptimisticLockingFailureException. But hibernate sometimes throws StaleObjectException (the parent of StaleObjectStateException) when eg. trying to delete a record that has already been deleted. SessionFactoryUtils should convert this to a subclass of ConcurrencyFailureException. Instead, it allows it to be converted to the generic HibernateSystemException.  -Scott   ---  **Affects:** 1.2.3","closed","type: bug,","spring-projects-issues","2005-09-18T15:05:11Z","2012-06-19T03:54:28Z"
"","6672","Named parameters in SqlQuery lacks appropriate parameter declaration support [SPR-1979]","**[Scott Haug](https://jira.spring.io/secure/ViewProfile.jspa?name=shaug)** opened **[SPR-1979](https://jira.spring.io/browse/SPR-1979?redirect=false)** and commented  While NamedParameterJdbcTemplate provides rich support for using named parameters in a variety of contexts (with a Map, backing bean, generic SqlParameterSource, etc), SqlQuery's support is much more anemic. Specifically, it doesn't support declaring parameter types by their names, and thus the end user is required to use positional type declaration, even when using named parameters, thus nullifying much of the benefit of named parameters.  Additionally, much of the functionalty around parsing named parameters is exposed at package-level access. Thus, there are no acceptable workarounds for this issue, other than re-implementing the parsing code outside of Spring or only using NamedParameterJdbcTemplate for all named parameter code.  Having full support for named parameters in SqlQuery is desirable, as we tend to have long-lived, detailed queries with many parameters. Using SqlQuery's support for 'compiling' the sql into a prepared statement that can be reused as needed without re-parsing the sql every time provides obvious performance benefits.   ---  **Affects:** 2.0 M4  5 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2006-05-03T14:39:28Z","2012-06-19T03:52:21Z"
"","6658","Allow form tags to use different CSS class depending on whether there is an error or not [SPR-1965]","**[Scott Battaglia](https://jira.spring.io/secure/ViewProfile.jspa?name=sbattaglia)** opened **[SPR-1965](https://jira.spring.io/browse/SPR-1965?redirect=false)** and commented  when we have a large number of fields on a page, we'll often provide a general message at the top of the page and then highlight the fields with errors via a different CSS class.  It would be nice if you could use the form tags and provide a cssErrorClass that gets used instead of the cssClass if there is an error.  I've implemented it locally (though probably too high in heirarchy of abstract classes).  I can attach the patch if needed though I doubt it is.   ---  **Affects:** 2.0 M4  1 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2006-04-28T02:37:45Z","2012-06-19T03:52:44Z"
"","6447","CookieGenerator does not support secure property [SPR-1750]","**[Scott Battaglia](https://jira.spring.io/secure/ViewProfile.jspa?name=sbattaglia)** opened **[SPR-1750](https://jira.spring.io/browse/SPR-1750?redirect=false)** and commented  The CookieGenerator supports most of the properties supplied to a cookie.  However, it doesn't support the secure property, which is pretty useful.  Is it possible to include the secure property?  I can submit a patch if needed.   ---  **Affects:** 2.0 M2","closed","type: enhancement,","spring-projects-issues","2006-02-28T15:14:51Z","2012-06-19T03:54:09Z"
"","6239","issue with HibernateTransactionManager [SPR-1540]","**[Sanjiv Jivan](https://jira.spring.io/secure/ViewProfile.jspa?name=sjivan)** opened **[SPR-1540](https://jira.spring.io/browse/SPR-1540?redirect=false)** and commented  I'm using Spring MVC with the OSIV filter. I have a controller that makes a call to a service API (which is configured to be the transaction boundary). I'm running into the Hibernate exception  :  Caused by: org.hibernate.HibernateException: collection was evicted at org.hibernate.event.def.DefaultInitializeCollectionEventListener.onInitializeCollection(DefaultInitializeCollectionEventListener.java:40) at org.hibernate.impl.SessionImpl.initializeCollection(SessionImpl.java:1430) at org.hibernate.collection.AbstractPersistentCollection.initialize(AbstractPersistentCollection.java:176) at org.hibernate.collection.AbstractPersistentCollection.read(AbstractPersistentCollection.java:48)  under the following circumstance :  The service API carries out some business logic and requires the transaction to be rolled back and so throws a RuntimeException. The Controller calling the service API handles this exception and needs to show a form back the the user with the appropriate error message. The view is displayed via a RequestDispatcher forward and not a redirect. Some reference data needs to be passed to this view and this requires some data that was previously loaded within the same Hibernate session. The problem is that this data is no longer available in the Hibernate session since Spring clears it as a part of its rollback code :  In org.springframework.orm.hibernate3.HibernateTransactionManager#doRollback(DefaultTransactionStatus status)      if (!txObject.isNewSessionHolder()) {         // Clear all pending inserts/updates/deletes in the Session.         // Necessary for pre-bound Sessions, to avoid inconsistent state.         txObject.getSessionHolder().getSession().clear();     }  Note that stepping through the Hibernate code when a rollback is called, the clearing of the session is bypassed. I recompiled Spring 1.2.6 after commenting out  txObject.getSessionHolder().getSession().clear();  and my controller worked fine.  In the Hibernate rollback code code  org.hibernate.impl.SessionImpl#afterTransactionCompletion is eventually called which has the code  if (autoClear) clear();  where autoClear is false.  Is there a reason Spring is clearing the session if the underlying Hibernate code has chose not to? I see the comment ""Clear all pending inserts/updates/deletes in the Session. Necessary for pre-bound Sessions, to avoid inconsistent state."" in the code but don't fully understand it. Why would there be pending inserts/updates/deletes if rollback was called on the underling Hibernate session.  Thanks, Sanjiv   ---  **Affects:** 1.2.6","closed","in: core,","spring-projects-issues","2005-12-15T00:42:37Z","2019-01-12T16:29:46Z"
"","6494","SimpleMappingExceptionResolver does not return the correct mapped exception view [SPR-1800]","**[Sandro Ruch](https://jira.spring.io/secure/ViewProfile.jspa?name=sruch)** opened **[SPR-1800](https://jira.spring.io/browse/SPR-1800?redirect=false)** and commented  The implementation of finding the correct view to a given exception type has changed since 1.2.6.  Older implementation: // Check for specific exception mappings. if (this.exceptionMappings != null) { int deepest = Integer.MAX_VALUE; for (Enumeration names = this.exceptionMappings.propertyNames(); names.hasMoreElements();) { String exceptionMapping = (String) names.nextElement(); int depth = getDepth(exceptionMapping, ex); if (depth >= 0 && depth < deepest) { deepest = depth; viewName = this.exceptionMappings.getProperty(exceptionMapping); } } }  1.2.7 implementation protected String findMatchingViewName(Properties exceptionMappings, Exception ex) { int deepest = Integer.MAX_VALUE; for (Enumeration names = this.exceptionMappings.propertyNames(); names.hasMoreElements();) { String exceptionMapping = (String) names.nextElement(); int depth = getDepth(exceptionMapping, ex); if (depth >= 0 && depth < deepest) { deepest = depth; return this.exceptionMappings.getProperty(exceptionMapping); } } return null; }  The new implementation returns the first view found. That is not correct especially in case of a exception hierarchy.  Proposed correction: protected String findMatchingViewName(Properties exceptionMappings, Exception ex) { int deepest = Integer.MAX_VALUE; String viewName = null; for (Enumeration names = this.exceptionMappings.propertyNames(); names.hasMoreElements();) { String exceptionMapping = (String) names.nextElement(); int depth = getDepth(exceptionMapping, ex); if (depth >= 0 && depth < deepest) { deepest = depth; viewName = this.exceptionMappings.getProperty(exceptionMapping); } } return viewName; }   ---  **Affects:** 1.2.7, 2.0 M3","closed","type: bug,","spring-projects-issues","2006-03-17T21:58:04Z","2012-06-19T03:54:27Z"
"","6350","Improve parameter name resolving in ParameterMethodNameResolver [SPR-1653]","**[Sandro Ruch](https://jira.spring.io/secure/ViewProfile.jspa?name=sruch)** opened **[SPR-1653](https://jira.spring.io/browse/SPR-1653?redirect=false)** and commented  The ParameterMethodNameResolver strategy of the MethodNameResolver should treat a methodName with an empty string received from the request as the same as a null value. Here the code snippet:  // Check parameter whose value identifies the method to invoke, if any. if (methodName == null && this.paramName != null) { methodName = request.getParameter(this.paramName); if (methodName != null && methodName.trim().length() > 0) { if (logger.isDebugEnabled()) { logger.debug(""Determined handler method '"" + methodName + ""' based on value of request parameter '"" + this.paramName + ""'""); } } }   ---  **Affects:** 1.2.6, 2.0 M1","closed","type: enhancement,","spring-projects-issues","2006-01-31T17:28:14Z","2012-06-19T03:54:29Z"
"","6783","Restoring previous isolation level causes side effects on Oracle [SPR-2090]","**[Sam Carr](https://jira.spring.io/secure/ViewProfile.jspa?name=samcarr)** opened **[SPR-2090](https://jira.spring.io/browse/SPR-2090?redirect=false)** and commented  It seems that when an exception of any sort is thrown out of a **non-transactional** DAO call, the Oracle DB connection can get left in a strange limbo state. Thus, the next **transactional** code to use the same DB connection will see the following exception:  org.springframework.transaction.CannotCreateTransactionException: Could not open JDBC Connection for transaction; nested exception is java.sql.SQLException: ORA-01453: SET TRANSACTION must be first statement of transaction  java.sql.SQLException: ORA-01453: SET TRANSACTION must be first statement of transaction      at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:112)     at oracle.jdbc.driver.T4CTTIoer.processError(T4CTTIoer.java:331)     at oracle.jdbc.driver.T4CTTIoer.processError(T4CTTIoer.java:288)     at oracle.jdbc.driver.T4C8Oall.receive(T4C8Oall.java:743)     at oracle.jdbc.driver.T4CStatement.doOall8(T4CStatement.java:207)     at oracle.jdbc.driver.T4CStatement.executeForRows(T4CStatement.java:946)     at oracle.jdbc.driver.OracleStatement.doExecuteWithTimeout(OracleStatement.java:1168)     at oracle.jdbc.driver.OracleStatement.executeInternal(OracleStatement.java:1687)     at oracle.jdbc.driver.OracleStatement.execute(OracleStatement.java:1653)     at oracle.jdbc.driver.PhysicalConnection.setTransactionIsolation(PhysicalConnection.java:1600)     at oracle.jdbc.OracleConnectionWrapper.setTransactionIsolation(OracleConnectionWrapper.java:162)     at org.springframework.jdbc.datasource.DataSourceUtils.prepareConnectionForTransaction(DataSourceUtils.java:173)     at org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:192)     at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:283)     at org.springframework.transaction.interceptor.TransactionAspectSupport.createTransactionIfNecessary(TransactionAspectSupport.java:226)     at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:89)     at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:170)     at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:176)     at $Proxy29.qqDemonstrateSetTransactionBugStep2(Unknown Source)     at com.py.controller.SETTRANSACTIONTestController.handleRequestInternal(SETTRANSACTIONTestController.java:22)     ...snipped.  The issues is further debated in the Spring forums, with another user able to recreate the issue: http://forum.springframework.org/showthread.php?t=25423  Presumably on the non-transactional call, some code is calling Oracle with ""SET TRANSACTION ..."" to setup some transactional info, but is never resetting that transaction. Perhaps the transaction is being left as neither committed or rolled back, so when the next DAO call comes along to start a real transaction Oracle barfs. Note that it is a documented oddity of the Oracle JDBC driver that it explicitly does not reset transactional state on connections when they are returned to the pool. This means that the next user of the connection stumbles over the half-baked transaction. Presumably Spring should either not be doing anything transactional in the first place when making the non-transactional call, or it should correctly clean up after itself when the exception is thrown, leaving the DB connection in a proper state?  Once a DB connection has been broken in this way, it stays broken until I restart Tomcat, hence this can totally bring a website to its knees.   ---  **Affects:** 1.2.7, 2.0 M4, 2.0 M5","closed","status: declined,","spring-projects-issues","2006-06-01T21:26:08Z","2019-01-12T16:29:17Z"
"","6693","AbstractRefreshableApplicationContext.refreshBeanFactory() not thread-safe [SPR-2000]","**[Saleem Shafi](https://jira.spring.io/secure/ViewProfile.jspa?name=saleemshafi)** opened **[SPR-2000](https://jira.spring.io/browse/SPR-2000?redirect=false)** and commented  I've run into an issue with using the ConfigurableApplicationContext.refresh() feature to pick up configuration changes to our bean definitions without restarting our webapp.  Because we occassionally have to lookup beans directly from the application context in other areas of our application, we've run into a situation where one thread initiates a context refresh, while another thread tries to get a bean from the context.  Obviously, this situation quickly generates an IllegalStateException since the beanFactory property is temporarily null.  I was just about to create a new ApplicationContext subtype that would synchronize the methods, but then I realized both methods are declared final.  Is there a reason that these methods (refreshBeanFactory() and getBeanFactory()) weren't synchronized?  It seems like an obvious thread-safety problem and I'm a little curious as to why I haven't seen anyone else complaining about it.  Simply synchronizing those two methods should do the trick, I believe.   ---  **Affects:** 1.2.6","closed","in: core,","spring-projects-issues","2006-05-10T14:18:21Z","2012-06-19T03:52:42Z"
"","6432","Supporting multiple transaction attribute sources [SPR-1735]","**[Sabarish Sasidharan](https://jira.spring.io/secure/ViewProfile.jspa?name=sabarish)** opened **[SPR-1735](https://jira.spring.io/browse/SPR-1735?redirect=false)** and commented  The BeanNameAutoProxyCreator supports a single transaction attribute source. I just came across a scenario wherein our project would find it easier if multiple transaction attribute sources are supported. This way we can have generic definitions for get*, set* etc in a NameMatchTxSource and then override when there is a need using a MethodMapTxSource.  I was not able to find this functionality. If it is not available already then instead of modifying the BeanNameAutoProxyCreator, i think it would be easier to add a TransactionAttributeSource implementation that maintains a list of references to other transaction attribute sources defined in the spring config file. This impl when requested for  a transaction attribute def could then consult each of these references in the list's default order and return the first non null transaction attribute definition it gets.  A simple implementation is pasted below.  ---  public class TransactionAttributeSourceList implements TransactionAttributeSource {      private List transactionSources;          /**       * @see org.springframework.transaction.interceptor.TransactionAttributeSource#getTransactionAttribute(java.lang.reflect.Method, java.lang.Class)      */     public TransactionAttribute getTransactionAttribute(Method arg0, Class arg1) {         /* First get from method based source */         TransactionAttribute txAttr = null;         for (int i = 0; i < transactionSources.size(); i++) {             txAttr = (TransactionAttributeSource(transactionSources.get(i)).getTransactionAttribute(arg0, arg1);             if (txAttr != null) {                 return txAttr;             }         }         return null;     }          public List getTransactionSources() {         return transactionSources;     }     public void setTransactionSources(List transactionSources) {         this.transactionSources = transactionSources;     }  }  ---  No further details from [SPR-1735](https://jira.spring.io/browse/SPR-1735?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-02-21T03:19:28Z","2019-01-13T22:48:52Z"
"","6332","NamingStrategy that supports type key property [SPR-1635]","**[Sabarish Sasidharan](https://jira.spring.io/secure/ViewProfile.jspa?name=sabarish)** opened **[SPR-1635](https://jira.spring.io/browse/SPR-1635?redirect=false)** and commented  reference to: http://forum.springframework.org/showthread.php?t=21431  A NamingStrategy based on a Decorator pattern that would decorate an existing NamingStrategy by adding a type key property to the ObjectName would be a nice to have. If a naming strategy impl to be decorated is not provided, it could fall back onto the logic in the default naming strategy, but then add a type key property.  Usually application classes implement some interface that can denote what kind of class it is. For ex, all facade classes would implement a MyServiceIntf. Similarly all DAOs might implement a Persister interface. So a InterfaceBasedTypeNamingStrategyDecorator that accepts a map (of interface names mapped to type values) would provide an easy way to supply the type property for such beans.  The strategy impl could check if the passed in managedObject implements one of the interfaces in the map fed to the strategy. And if so, it appends a type key property to the ObjectName, the value for which would be the type value from the map for that interface. But if the managedObject is not an instance of any interfaces in the map (or if no map was provided), then the type gets generated from the name of the super interface implemented by the managedObject.  This way using 4 or 5 (or 0) entries in the map, we can generate the type property for all the managed beans in the application. I don't think this would be of use to many apps out there, but still some would benefit   ---  **Affects:** 2.0 M1  **Attachments:** - [patch.jar](https://jira.spring.io/secure/attachment/11405/patch.jar) (_17.33 kB_)","closed","type: enhancement,","spring-projects-issues","2006-01-20T13:18:28Z","2007-07-10T22:18:10Z"
"","6505","Jasper Reports - update to AbstractJasperReportsView to allow DataSource to be read from the model, not just from jdbcDataSource field [SPR-1811]","**[Rónán Fleetwood](https://jira.spring.io/secure/ViewProfile.jspa?name=rfleetwood)** opened **[SPR-1811](https://jira.spring.io/browse/SPR-1811?redirect=false)** and commented  Currently the DataSource is only read from the jdbcDataSource field - this necessitates that the field be set by the view resolver. If the view could also check the model for the DataSource this would allow the DataSource to be set in the model (by the controller).   ---  **Affects:** 1.2.7, 2.0 M1, 2.0 M2, 2.0 M3  **Attachments:** - [AbstractJasperReportsView.java](https://jira.spring.io/secure/attachment/11517/AbstractJasperReportsView.java) (_29.44 kB_)","closed","type: enhancement,","spring-projects-issues","2006-03-22T20:35:53Z","2012-06-19T03:54:35Z"
"","5941","Have HotSwappableTargetSource.swap() take effect immediately if called within an interceptor [SPR-1238]","**[Ryan Stone](https://jira.spring.io/secure/ViewProfile.jspa?name=ryan.stone)** opened **[SPR-1238](https://jira.spring.io/browse/SPR-1238?redirect=false)** and commented  In the following code, in a MethodInterceptor, the target of the of the proxy is swapped with a HotSwappableTargetSource.  However, when you call MethodInvocation.proceed(), the old target is still used for the current invocation.  In subsequent invocations, the new target will be used.  //This interceptor: public class TestCaseInterceptor implements MethodInterceptor, BeanFactoryAware  { private BeanFactory beanFactory; private int count = 0;      public Object invoke(MethodInvocation methodInvocation) throws Throwable {         count++;              if(count == 5) {             Advised bean = (Advised) AopContext.currentProxy();             HotSwappableTargetSource source = (HotSwappableTargetSource) bean.getTargetSource();             source.swap(beanFactory.getBean(""target""));                  System.out.println(""swapping..."");             count = 0;         }              return methodInvocation.proceed();     }          public void setBeanFactory(BeanFactory beanFactory) {         this.beanFactory = beanFactory;     }  }  //the advised class: public class ProxiedClass { private static int nextInstanceId = 0;      private int instanceId;          public ProxiedClass() {         this.instanceId = nextInstanceId;         nextInstanceId++;     }          public void someMethod() {         System.out.println(""This is instance #"" + instanceId);     }  }  \ \ \ \\true\\ \ \false\ \ \ \true\ \ \ \ \ \targetAdvisor\ \ \ \                                                                                                                                   \  //The testcase: public class TestCase { public static void main(String [] args) { ApplicationContext context = new ClassPathXmlApplicationContext(""testcase-context.xml"");          ProxiedClass o = (ProxiedClass) context.getBean(""proxy"");              for(int i = 0; i < 20; i++) {             o.someMethod();         }     }  }  The output: This is instance #0 This is instance #0 This is instance #0 This is instance #0 swapping... This is instance #0 This is instance #2 This is instance #2 This is instance #2 This is instance #2 swapping... This is instance #2 This is instance #3 This is instance #3 This is instance #3 This is instance #3 swapping... This is instance #3 This is instance #4 This is instance #4 This is instance #4 This is instance #4 swapping... This is instance #4   ---  2 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2005-08-18T07:56:42Z","2015-09-22T18:55:04Z"
"","6512","Typo in javadoc for AntPathMatcher [SPR-1818]","**[Ryan Berdeen](https://jira.spring.io/secure/ViewProfile.jspa?name=rberdeen)** opened **[SPR-1818](https://jira.spring.io/browse/SPR-1818?redirect=false)** and commented  The javadoc for AntPathMatcher currently reads com/t?st.jsp - matches test.jsp but also tast.jsp or txst.jsp  This should probably be either com/t?st.jsp - matches com/test.jsp but also com/tast.jsp or com/txst.jsp or t?st.jsp - matches test.jsp but also tast.jsp or txst.jsp   ---  **Affects:** 1.2.7, 2.0 M3","closed","type: enhancement,","spring-projects-issues","2006-03-24T19:50:24Z","2012-06-19T03:54:32Z"
"","6498","Typo in 13.5.3. ""Redirecting to views"" [SPR-1804]","**[Ryan Berdeen](https://jira.spring.io/secure/ViewProfile.jspa?name=rberdeen)** opened **[SPR-1804](https://jira.spring.io/browse/SPR-1804?redirect=false)** and commented  The second sentence in the second paragraph of this section should start ""This is desireable"", not ""This si desireable""  This is in section 13.5.3 of the 1.2.7 docs.   ---  **Affects:** 1.2.4, 1.2.5, 1.2.6, 1.2.7, 2.0 M1, 2.0 M2","closed","type: enhancement,","spring-projects-issues","2006-03-20T14:48:40Z","2012-06-19T03:54:15Z"
"","6687","Explain final methods in the online spring docs [SPR-1994]","**[Rusty Wright](https://jira.spring.io/secure/ViewProfile.jspa?name=lumpynose)** opened **[SPR-1994](https://jira.spring.io/browse/SPR-1994?redirect=false)** and commented  Juergen, as a longer term solution to this recurring problem of people asking about why methods are final, which I also didn't understand until I read the ""A Look at Design"" section in Expert Spring MVC and Web Flow, I was wondering if someone could add that whole explanation of ""open for extension but closed for modification"" to the online Spring documentation.  Then the next time this question comes up again you can simply give them the url to that section in the online spring docs.   --- No further details from [SPR-1994](https://jira.spring.io/browse/SPR-1994?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-05-09T11:25:37Z","2012-06-19T03:52:39Z"
"","6638","DataRetrievalFailureException constructor enhancement [SPR-1945]","**[Rusty Wright](https://jira.spring.io/secure/ViewProfile.jspa?name=lumpynose)** opened **[SPR-1945](https://jira.spring.io/browse/SPR-1945?redirect=false)** and commented  Would it be possible to add a 1 argument constructor that takes the argument Throwable?  I'm catching DataAccessException and am logging the exception and would like to rethrow the error, without having to add a message.  Thanks   ---  **Affects:** 1.2.7","closed","type: enhancement,","spring-projects-issues","2006-04-21T05:45:06Z","2012-06-19T09:37:32Z"
"","6587","XmlBeanDefinitionParser API broken [SPR-1894]","**[Ronald Tetsuo Miura](https://jira.spring.io/secure/ViewProfile.jspa?name=ronaldtm)** opened **[SPR-1894](https://jira.spring.io/browse/SPR-1894?redirect=false)** and commented  The signature of the method registerBeanDefinitions in the interface org.springframework.beans.factory.xml.XmlBeanDefinitionParser changed, from  int registerBeanDefinitions(BeanDefinitionReader reader, Document doc, Resource resource)    - Spring 1.2.7  to  void registerBeanDefinitions(Document doc, ReaderContext readerContext)     - Spring 2.0  This change breaks XFire 1.0, that uses the class org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser in its configuration mechanism.   ---  **Affects:** 2.0 M3","closed","in: core,","spring-projects-issues","2006-04-13T12:47:08Z","2019-01-12T16:29:21Z"
"","6270","Support for environment variables in ContextLoader when defined in web.xml [SPR-1573]","**[Ronald Pulleman](https://jira.spring.io/secure/ViewProfile.jspa?name=robot)** opened **[SPR-1573](https://jira.spring.io/browse/SPR-1573?redirect=false)** and commented  I think this request is related to [SPRNET-133](https://jira.spring.io/browse/SPRNET-133).  I have the need for support for environment variables.    --- No further details from [SPR-1573](https://jira.spring.io/browse/SPR-1573?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-12-24T18:11:09Z","2019-01-11T21:39:07Z"
"","6665","JdbcTemplate should have 2 extra methods: cancelQuery() and setQueryTimeout(int seconds). [SPR-1972]","**[Ronald Koster](https://jira.spring.io/secure/ViewProfile.jspa?name=ronald.koster)** opened **[SPR-1972](https://jira.spring.io/browse/SPR-1972?redirect=false)** and commented  JdbcTemplate should have 2 extra methods:  ```java /** * Like #setMaxRows(int) but now encapsulates java.sql.Statement#setQueryTimeout(int) * instead of java.sql.Statement#setMaxRows(int). * WARNING: Not all JDBC drivers support this feature!   */   public void setQueryTimeout(int seconds)  /** * Invokes java.sql.Statement#cancel() on the statement in execution. * Never throws an exception but does log a warning when Statement#cancel() * throws an exception. * WARNING: Not all JDBC drivers and DBMS systems support this feature!   */   public void cancelQuery() ```  This will allow for convenient constructions like this (within a `JdbcDaoSupport` instance):  ```java JdbcTemplate template = getJdbcTemplate(); template.setMaxRows(501); template.setQueryTimeout(30); try { return template.queryForList(sql, args); } catch (RuntimeException rex) { LOG.warn(""Query has failed."", rex); template.cancelQuery(); // Just in case. throw rex; } ```  NB.  1. The cancelQuery method requires JdbcTemplate to keep a reference to the    statement object in execution. 2. When the JDBC driver does not support the query timeout mechanism, but does support    Statement#cancel(), one can invoke cancelQuery from another thread (eg. using    a timer task). 3. When the encapsulating JdbcDaoSupport is a singleton in a multi-threaded    environment, you will need to have a separate instance of JdbcTemplate per thread,    or else the threads may cancel the wrong query. Then the JdbcDaoSupport should invoke:  ```java JdbcTemplate template = new JdbcTemplate(getDataSource()); ```  instead of:  ```java JdbcTemplate template = getJdbcTemplate(); ```  --- No further details from [SPR-1972](https://jira.spring.io/browse/SPR-1972?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-04-30T18:41:26Z","2020-03-25T14:41:27Z"
"","6826","Oracle oracle.sql.DATE not supported [SPR-2135]","**[Roman Kalukiewicz](https://jira.spring.io/secure/ViewProfile.jspa?name=romkal)** opened **[SPR-2135](https://jira.spring.io/browse/SPR-2135?redirect=false)** and commented  JdbcTemplate.queryForList returns rows with oracle.sql.DATE instead of java.sql.Timestamp so I have  Caused by: java.lang.ClassCastException: oracle.sql.DATE at test.ServiceImpl.getRows(ServiceImpl.java:41) at test.Bean.getRows(Bean.java:27)  This problem is handled for oracle.sql.TIMESTAMP in org.springframework.jdbc.support.JdbcUtils class, but still exists for oracle.sql.DATE.  In Oracle my database column is declared as TIMESTAMP(6).  Correct behavior is to convert oracle.sql.DATE to java.sql.Timestamp the same way it is done for oracle.sql.TIMESTAMP.   ---  1 votes, 0 watchers","closed","type: bug,","spring-projects-issues","2006-06-13T02:09:09Z","2012-06-19T03:52:35Z"
"","6223","Spring-portlet / Hibernate : Lazy initialization of nested BOs inside a portlet controller failed. OpenSessionInViewInterceptor ? [SPR-1524]","**[Romain Baratta](https://jira.spring.io/secure/ViewProfile.jspa?name=rbaratta)** opened **[SPR-1524](https://jira.spring.io/browse/SPR-1524?redirect=false)** and commented  Hi,  I'm currently using Jetspeed and spring-portlet ( The Spring Portlet MVC Project ). I use a model layer which is handled by Spring and Hibernate : Services, DAOs and BOs. Services can open hibernate sessions to perform database requests. Portlet controllers call services to get the informations back. Everything works great except when I have to get a nested BO inside a BO in a controller. For example : IMyService myService = (IMyService) getService (""MyServiceName""); IMyBO myBO = myService.getMyBO(someParameters); // At this point myBO is correctly instanciated and all fileds can be accessed. IMyOtherBO myOtherBO = myBO.getMyOtherBO(); String info = myOtherBO.toString(); // Or .getAField() //throws a LazyInitializationException : could not initialize proxy - the owning Session was closed;  So, I tried to configure my PortletModeParameterHandlerMapping with an OpenSessionInViewInterceptor to give myBO a session back. In my xml conf file (like books.xml) : \ \\\ \  \  \  \  \  \  \  \  \  \  \  \ ... All my entries views ...  \  \  \  \  \   A session is correctly initialized before the render or action call and is correctly closed after. The problem is that the CGLIBLazyInitializer proxy object of myBO doesn't use this session but still persists using the closed session. How can I force it to use the good session ? Is there another solution to my problem ?  Thanks in advance, Romain    --- No further details from [SPR-1524](https://jira.spring.io/browse/SPR-1524?redirect=false)","closed","in: web,","spring-projects-issues","2005-12-08T17:05:08Z","2019-01-11T21:36:47Z"
"","6385","spring-beans.dtd has spurious XML header line [SPR-1687]","**[Roger Hayes](https://jira.spring.io/secure/ViewProfile.jspa?name=roger.hayes)** opened **[SPR-1687](https://jira.spring.io/browse/SPR-1687?redirect=false)** and commented  The DTD file http://www.springframework.org/dtd/spring-beans.dtd has acquired a spurious XML header line -- this breaks validation, since it's not an XML file.  When I made a local copy and deleted the XML header, all became OK again.    --- No further details from [SPR-1687](https://jira.spring.io/browse/SPR-1687?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-02-08T02:14:51Z","2012-06-19T03:54:02Z"
"","6680","Enable the definition of beans in the application context using annotations instead of XML [SPR-1987]","**[Rodrigo Urubatan Ferreira Jardim](https://jira.spring.io/secure/ViewProfile.jspa?name=urubatan)** opened **[SPR-1987](https://jira.spring.io/browse/SPR-1987?redirect=false)** and commented  I think some bean definitions are just configuration, as the Data Source, Transaction Manager, Mail Server, ... but most of then are the application code, and not configuration. for the seccond case, I think it would be very easy and clean, to register it on the application with annotations, because it would use a lot less code than the XML approach, and this beans registrations (like my application DAOs, or my Spring MVC controllers), does not change during the life time of any application. for this to be reached it would be necessary to scan the classpath for the annotated classes.  I have wrote a litle bouch of classes that make the application context behave exaclty this way, enabling it to use bean registration by annotations. please consider including it in spring framework as an optional extension.  I`m not sure the application way I did it (creating another application context class) is the best one, but it is an idea of implementation for it :D  the code I have wrote is atacched. what it does right now is: 1. `@Bean` - equals to \    * autoWire (NO, BY_NAME, BY_TYPE, INHERITED)    * dependencyCheck    * destroyMethod    * factoryMethod    * initMethod    * lazy    * name    * scope (APPLICATION, REQUEST, SESSION) - short cut to aop:scope    * singleton 2. `@UrlMapping` - attaches the bean to a URL using an bean factor post processor (AnnotationHandlerMaping) 3. `@UrlMappings` - enables multiple UrlMappings per bean 4. `@Property` 5. `@ConstructorArgs`  in the code, there is an example applicationContext.xml that enables WebServices using JSR 181 webservices through xfire/spring integration, and has already a propertyPlaceholderConfigurer.  the annotation scan, for now scans every directory/jar in the classpath, that contains a file names to.properties in the root, and the propertyPlaceholderConfigurer uses this files too.  with this jar, I was able to define only a datasource, transaction manager,sessionFactory,tx:annotation-driven,and a defaultViewResolver and write all the rest of my application without touching in a XML file. this way, all I need to know about my beans was in the bean code.  the installation of it is preaty clean too:  \  \ \TO - Novo Site\ \ \contextConfigLocation\ \classpath*:applicationContext.xml\ \ \ \contextClass\ \ br.com.techoffice.spring.web.TOAnnotationXmlWebApplicationContext \ \ \ \ org.springframework.web.context.ContextLoaderListener \ \ \ \requestContext\ \ org.springframework.web.filter.RequestContextFilter \ \ \ \requestContext\ \/\*\ \ \ \dispatcher\ \ org.springframework.web.servlet.DispatcherServlet \ \1\ \ \ \dispatcher\ \\*.to\ \ \ \dispatcher\ \/web/*\ \ \  a blank dispatcher-servlet.xml (does this is really needed? what if I want all my configuration to be application-wide, I really need to create a xml file to each servlet, or in this case to the only servlet I have?)  again, please consider it as an optional module for spring framework. and thanks for the great framework, it has saved a few of my projects in clients in the last 2 years.  ---  **Attachments:** - [spring-annotations.zip](https://jira.spring.io/secure/attachment/11617/spring-annotations.zip) (_13.03 kB_)  **Issue Links:** - #8169 Enable the definition of beans in the application context using annotations instead of XML, but do it right (_**""is duplicated by""**_)  4 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2006-05-04T23:33:22Z","2019-01-11T22:20:56Z"
"","6781","Dynamic ProxyFactoryBean for MessageListenerAdapter [SPR-2115]","**[Robert Newson](https://jira.spring.io/secure/ViewProfile.jspa?name=rnewson)** opened **[SPR-2115](https://jira.spring.io/browse/SPR-2115?redirect=false)** and commented  MessageListenerAdapter allows developers to remain abstracted from JMS for asynchronous message consumption. I've written a small FactoryBean class that creates a proxy for any interface that is capable of sending messages to these listeners. This, I believe, completes the abstraction from JMS.  I also needed a custom extension to MessageListenerAdapter as it rewraps the pre-existing Object array in another Object array which confuses Spring's reflection code. It's probably worth putting that change in MessageListenerAdapter itself.    ---  **Affects:** 2.0 M5  **Attachments:** - [CustomMessageListenerAdapter.java](https://jira.spring.io/secure/attachment/11682/CustomMessageListenerAdapter.java) (_1.90 kB_) - [DummyImplementation.java](https://jira.spring.io/secure/attachment/11685/DummyImplementation.java) (_237 bytes_) - [DummyInterface.java](https://jira.spring.io/secure/attachment/11686/DummyInterface.java) (_291 bytes_) - [JmsProxyFactoryBean.java](https://jira.spring.io/secure/attachment/11687/JmsProxyFactoryBean.java) (_2.49 kB_) - [JmsProxyFactoryBean.java](https://jira.spring.io/secure/attachment/11683/JmsProxyFactoryBean.java) (_2.84 kB_) - [JmsProxyFactoryBeanTest.java](https://jira.spring.io/secure/attachment/11684/JmsProxyFactoryBeanTest.java) (_2.08 kB_)","closed","type: enhancement,","spring-projects-issues","2006-06-07T09:14:21Z","2007-08-07T22:40:32Z"
"","6743","LocalSessionFactoryBean for Hibernate 3 missing backport of cache region specification [SPR-2050]","**[Robert Macaulay](https://jira.spring.io/secure/ViewProfile.jspa?name=robertm)** opened **[SPR-2050](https://jira.spring.io/browse/SPR-2050?redirect=false)** and commented  The patch for supporting cache regions for second level cache specifications here http://springframework.cvs.sourceforge.net/springframework/spring/src/org/springframework/orm/hibernate3/LocalSessionFactoryBean.java?r1=1.24&r2=1.25  was backported to 1.2 branch at this point http://springframework.cvs.sourceforge.net/springframework/spring/src/org/springframework/orm/hibernate3/LocalSessionFactoryBean.java?r1=1.20.2.3&r2=1.20.2.4  But the backport just backported the javadoc, and not the implementation   ---  **Affects:** 1.2.8  1 votes, 3 watchers","closed","status: declined,","spring-projects-issues","2006-05-22T03:48:19Z","2019-01-12T16:29:18Z"
"","6418","Maven 2 poms don't identify optional dependencies [SPR-1721]","**[Robert Egglestone](https://jira.spring.io/secure/ViewProfile.jspa?name=tantalon)** opened **[SPR-1721](https://jira.spring.io/browse/SPR-1721?redirect=false)** and commented  The Spring poms for Maven 2 list all dependencies as required, and this causes a large number of unnecessary transitive dependencies in projects which make use of Spring.  This is especially true for spring-orm, but also applies to spring-hibernate and probably other modules.   --- No further details from [SPR-1721](https://jira.spring.io/browse/SPR-1721?redirect=false)","closed","","spring-projects-issues","2005-11-09T13:57:57Z","2019-01-11T22:07:55Z"
"","6368","Option to expose empty value instead of NullValueInNestedPathException [SPR-1671]","**[Rob Monie](https://jira.spring.io/secure/ViewProfile.jspa?name=robmonie)** opened **[SPR-1671](https://jira.spring.io/browse/SPR-1671?redirect=false)** and commented  When using nested paths such as ""organisation.address.state"" with a property editor for State intended to convert a String ID to a State object and back again, if address is null, a 'NullValueInNestedPathException' is thrown from BeanWrapperImpl.  Is this the intended behaviour ?  Obviously if part of the nested path is null it is impossible to traverse the object graph to determine what property editor to use for the actual State property.  However, if address is null then State is sure to be null also, so a generic handler of nulls could be possibly be applied.  The current workaround is to manually populate empty objects in the object graph in formBackingObject().  This does however require that these 'empty' placeholder objects need to be cleaned up before a save to prevent complications with incorrect data being pushed to the database.  ---  **Affects:** 1.2.6  **Issue Links:** - #8248 BeanWrapperImpl doesn't delegate Map-creation to propertyEdtior - #9405 mvc: Dynamic List use case - allow collections/arrays to grow - #10701 Data Binder: Add support for auto-instantiating null values in nested paths - #6554 Null property values in nested paths relating to  tag,  tags, and ServletRequestDataBinder - #7296  tag library should WARN instead of blowup when command missing  38 votes, 37 watchers","closed","has: votes-jira,","spring-projects-issues","2006-02-05T09:50:52Z","2019-01-11T21:24:08Z"
"","5900","Add ability to run SQL scripts through JdbcTemplate [SPR-1197]","**[Rob Hasselbaum](https://jira.spring.io/secure/ViewProfile.jspa?name=rhasselbaum)** opened **[SPR-1197](https://jira.spring.io/browse/SPR-1197?redirect=false)** and commented  We want to use JdbcTemplate to implement a schema/data upgrade program for our existing app. Since we'll be running DDL statements, mostly, it would be great if JdbcTemplate gave you a way to run a SQL script rather than just a statement at a time. I'm thinking a method called ""executeScript(Reader)"" or something along those lines.  I've written a class based loosely on Apache Ant's SQL task that will parse a script and create a String array of the statements, which can then be passed on to JdbcTemplate.batchUpdate. The parser handles embedded comments starting with ""--"" or ""//"". Statements shoulod be delimited by semi-colons. Feel free to use this class as a starting point. (You'll probably want to change the exception that gets thrown. Right now, it's using an exception in my organization's type hierarchy.)   ---  **Affects:** 1.2.4  **Attachments:** - [jira-1197.patch](https://jira.spring.io/secure/attachment/11260/jira-1197.patch) (_16.45 kB_) - [SqlScriptParser.java](https://jira.spring.io/secure/attachment/11006/SqlScriptParser.java) (_7.90 kB_)  5 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2005-08-01T06:49:39Z","2008-03-07T21:45:28Z"
"","6831","Include querystring parameters in default action for FormTag [SPR-2140]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-2140](https://jira.spring.io/browse/SPR-2140?redirect=false)** and commented   ---  **Affects:** 2.0 M5","closed","type: enhancement,","spring-projects-issues","2006-06-13T20:14:37Z","2012-06-19T03:52:23Z"
"","6773","Destruction of scoped beans [SPR-2081]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-2081](https://jira.spring.io/browse/SPR-2081?redirect=false)** and commented   ---  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2006-05-30T20:19:12Z","2012-06-19T03:52:47Z"
"","6772","Annotate all schemas with tooling metadata [SPR-2080]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-2080](https://jira.spring.io/browse/SPR-2080?redirect=false)** and commented  Need exports and identified-by   --- No further details from [SPR-2080](https://jira.spring.io/browse/SPR-2080?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-05-30T20:13:48Z","2012-06-19T03:52:46Z"
"","6771","Polish and document XML schemas [SPR-2079]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-2079](https://jira.spring.io/browse/SPR-2079?redirect=false)** and commented   --- No further details from [SPR-2079](https://jira.spring.io/browse/SPR-2079?redirect=false)","closed","type: task,","spring-projects-issues","2006-05-30T20:12:32Z","2019-01-11T18:16:44Z"
"","6770","Extend Tooling Schema to Define Exported Types [SPR-2078]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-2078](https://jira.spring.io/browse/SPR-2078?redirect=false)** and commented   --- No further details from [SPR-2078](https://jira.spring.io/browse/SPR-2078?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-05-29T22:42:58Z","2012-06-19T03:52:38Z"
"","6769","Attach Source Metadata to Constructor Args [SPR-2077]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-2077](https://jira.spring.io/browse/SPR-2077?redirect=false)** and commented  ---  **Issue Links:** - #7998 Add `@annotation` to name constructor arguments allowing names to be placed in config","closed","type: enhancement,","spring-projects-issues","2006-05-29T22:42:10Z","2019-01-13T08:55:08Z"
"","6766","Include Source Object in Import and Alias Events [SPR-2074]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-2074](https://jira.spring.io/browse/SPR-2074?redirect=false)** and commented   --- No further details from [SPR-2074](https://jira.spring.io/browse/SPR-2074?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-05-29T20:19:32Z","2012-06-19T03:52:38Z"
"","6717","Update ConfigBeanDefinitionParser to push custom state onto the ParseState [SPR-2024]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-2024](https://jira.spring.io/browse/SPR-2024?redirect=false)** and commented   --- No further details from [SPR-2024](https://jira.spring.io/browse/SPR-2024?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-05-16T12:10:55Z","2012-06-19T03:52:35Z"
"","6594","Add  namespace [SPR-1901]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-1901](https://jira.spring.io/browse/SPR-1901?redirect=false)** and commented  Collapse current JNDI namespace into here. Add EJB tags.   --- No further details from [SPR-1901](https://jira.spring.io/browse/SPR-1901?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-04-17T21:29:05Z","2012-06-19T03:52:46Z"
"","6582","Add  namespace [SPR-1889]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-1889](https://jira.spring.io/browse/SPR-1889?redirect=false)** and commented   ---  **Affects:** 2.0 M3","closed","type: enhancement,","spring-projects-issues","2006-04-12T00:33:12Z","2012-06-19T03:52:25Z"
"","6581","Add  to core DTD/XSD [SPR-1888]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-1888](https://jira.spring.io/browse/SPR-1888?redirect=false)** and commented   ---  **Affects:** 2.0 M3","closed","type: enhancement,","spring-projects-issues","2006-04-12T00:32:28Z","2012-06-19T03:52:43Z"
"","6580","Attach tooling metadata to constructor arg definitions [SPR-1887]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-1887](https://jira.spring.io/browse/SPR-1887?redirect=false)** and commented  ---  **Issue Links:** - #7998 Add `@annotation` to name constructor arguments allowing names to be placed in config (_**""is depended on by""**_)","closed","type: enhancement,","spring-projects-issues","2006-04-12T00:30:39Z","2019-01-13T08:55:42Z"
"","6578","Add Java5 Wrapper for ListableBeanFactory [SPR-1885]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-1885](https://jira.spring.io/browse/SPR-1885?redirect=false)** and commented  -> org.springframework.beans.factory.generic.GenericBeanFactoryAccessor [tiger]   --- No further details from [SPR-1885](https://jira.spring.io/browse/SPR-1885?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-04-11T20:42:31Z","2012-06-19T03:52:24Z"
"","6573","Cannot proxy scripted beans [SPR-1879]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-1879](https://jira.spring.io/browse/SPR-1879?redirect=false)** and commented   ---  **Affects:** 2.0 M3","closed","in: core,","spring-projects-issues","2006-04-10T21:30:40Z","2012-06-19T03:52:41Z"
"","6560","Add addAspect() to ProxyFactory [SPR-1866]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-1866](https://jira.spring.io/browse/SPR-1866?redirect=false)** and commented  Provide support for `@AspectJ` and (maybe) POJO aspects in programmatic configuration.   --- No further details from [SPR-1866](https://jira.spring.io/browse/SPR-1866?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-04-06T22:02:47Z","2012-06-19T03:54:40Z"
"","6559","Extract General Functionality from TransactionProxyFactoryBean [SPR-1865]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-1865](https://jira.spring.io/browse/SPR-1865?redirect=false)** and commented  Add a base class for TPFB that contains all non-tx specific functionality and state.   --- No further details from [SPR-1865](https://jira.spring.io/browse/SPR-1865?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-04-06T22:01:29Z","2012-06-19T03:54:14Z"
"","6510","Add init() method to NamespaceHandler [SPR-1816]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-1816](https://jira.spring.io/browse/SPR-1816?redirect=false)** and commented   --- No further details from [SPR-1816](https://jira.spring.io/browse/SPR-1816?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-03-24T03:07:11Z","2012-06-19T03:54:05Z"
"","6502","Add  tag. [SPR-1808]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-1808](https://jira.spring.io/browse/SPR-1808?redirect=false)** and commented  Allows for  mixing of explicit  and List-sourced options such that you can do:        --- No further details from [SPR-1808](https://jira.spring.io/browse/SPR-1808?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-03-21T22:17:55Z","2012-06-19T03:53:56Z"
"","6476","Create JSP Form Tag Showcase [SPR-1780]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-1780](https://jira.spring.io/browse/SPR-1780?redirect=false)** and commented   --- No further details from [SPR-1780](https://jira.spring.io/browse/SPR-1780?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-03-10T02:17:57Z","2012-06-19T03:54:11Z"
"","6473","Implement equals() and hashCode() on all bean definition metadata [SPR-1776]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-1776](https://jira.spring.io/browse/SPR-1776?redirect=false)** and commented   ---  **Affects:** 1.2.7, 2.0 M3","closed","type: enhancement,","spring-projects-issues","2006-03-09T18:44:30Z","2012-06-19T03:54:41Z"
"","6202","Support Declarative Component Dependencies [SPR-1503]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-1503](https://jira.spring.io/browse/SPR-1503?redirect=false)** and commented  Allow framework components to inform the container that they must start after a particular component type.   --- No further details from [SPR-1503](https://jira.spring.io/browse/SPR-1503?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-11-28T19:11:49Z","2009-11-13T00:40:18Z"
"","6201","Support for Collection Merging in Parent/Child Bean Definitions [SPR-1502]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-1502](https://jira.spring.io/browse/SPR-1502?redirect=false)** and commented  Support for merging elements in \, \, \ and \ definitions.  ---  **Issue Links:** - #11189 Introduce 'merge' attribute for util namespace collection elements  2 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2005-11-28T19:10:50Z","2019-01-11T21:31:24Z"
"","6197","Add a Template class for working with Spring Resources [SPR-1498]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-1498](https://jira.spring.io/browse/SPR-1498?redirect=false)** and commented   --- No further details from [SPR-1498](https://jira.spring.io/browse/SPR-1498?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-11-26T02:12:15Z","2008-01-07T03:40:44Z"
"","6185","Support default-init-method and default-destory-method in the  tag. [SPR-1486]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-1486](https://jira.spring.io/browse/SPR-1486?redirect=false)** and commented   --- No further details from [SPR-1486](https://jira.spring.io/browse/SPR-1486?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-11-20T22:58:19Z","2012-06-19T03:54:32Z"
"","6103","Use Generics Metadata For Wiring Purposes [SPR-1403]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-1403](https://jira.spring.io/browse/SPR-1403?redirect=false)** and commented  Use any available generics metadata for auto-wiring collections and for infering collection element types automatically.   --- No further details from [SPR-1403](https://jira.spring.io/browse/SPR-1403?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-10-21T00:12:33Z","2012-06-19T03:54:21Z"
"","6102","Java 5-specific JDBC Template Helper [SPR-1402]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-1402](https://jira.spring.io/browse/SPR-1402?redirect=false)** and commented  Add a Java 5 wrapper around JdbcTemplate using generics, autoboxing and varargs to simplify usage.   --- No further details from [SPR-1402](https://jira.spring.io/browse/SPR-1402?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-10-21T00:02:30Z","2012-06-19T03:54:01Z"
"","6101","Java 5-specific ORM DAO Support [SPR-1401]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-1401](https://jira.spring.io/browse/SPR-1401?redirect=false)** and commented  Add base interface and class for implementing generic ORM DAO's using Java 5 generics   ---  **Attachments:** - [GenericBaseDao.zip](https://jira.spring.io/secure/attachment/11216/GenericBaseDao.zip) (_2.95 kB_) - [GenericHibernateDao.zip](https://jira.spring.io/secure/attachment/12525/GenericHibernateDao.zip) (_14.44 kB_)  9 votes, 14 watchers","closed","type: enhancement,","spring-projects-issues","2005-10-21T00:01:34Z","2008-10-22T01:47:21Z"
"","6099","Support Auto-ClassLoader Registration in MBeanExporter [SPR-1399]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-1399](https://jira.spring.io/browse/SPR-1399?redirect=false)** and commented   --- No further details from [SPR-1399](https://jira.spring.io/browse/SPR-1399?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-10-20T03:23:25Z","2009-11-13T00:39:41Z"
"","6087","Create a Demo/Sample for JasperReports [SPR-1387]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-1387](https://jira.spring.io/browse/SPR-1387?redirect=false)** and commented   --- No further details from [SPR-1387](https://jira.spring.io/browse/SPR-1387?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-10-17T20:27:46Z","2008-01-07T03:29:52Z"
"","6082","Support for default URL -> View name translation in DispatcherServlet [SPR-1382]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-1382](https://jira.spring.io/browse/SPR-1382?redirect=false)** and commented  Update DispatcherServlet to support an automatic mapping of request URI to view name for ModelAndView objects without and view name or view.  Update controllers to take advantage of this new feature, adding new handle methods that return just Map and use the default URL->VIew name strategy for view resolution.    --- No further details from [SPR-1382](https://jira.spring.io/browse/SPR-1382?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-10-14T22:15:59Z","2012-06-19T03:53:55Z"
"","6081","Update ModelAndView to support default naming for model parameters [SPR-1381]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-1381](https://jira.spring.io/browse/SPR-1381?redirect=false)** and commented  Update the ModelAndView class to support default naming of model parameters using simple conventions. The name should be generated based on the class of the parameter such that com.myapp.Person becomes 'person'.   ---  **Affects:** 1.2.5","closed","type: enhancement,","spring-projects-issues","2005-10-14T22:14:01Z","2012-06-19T03:54:39Z"
"","5901","Cannot define exporter parameters for JasperReports view when using properties configuration [SPR-1198]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-1198](https://jira.spring.io/browse/SPR-1198?redirect=false)** and commented   ---  **Affects:** 1.2.3","closed","type: bug,","spring-projects-issues","2005-08-01T09:13:58Z","2012-06-19T03:54:15Z"
"","6139","MailSender.send() method takes SimpleMailMessage parameter, which causes trouble when abstracting [SPR-1439]","**[Rick Herrick](https://jira.spring.io/secure/ViewProfile.jspa?name=rherrick)** opened **[SPR-1439](https://jira.spring.io/browse/SPR-1439?redirect=false)** and commented  Our system is a mish-mash of various mailing systems, including sendmail, JavaMail, KanaMail, and some others.  I'd like to be able to collect all of these different message types in a list and do a batch send.  The problem is that the base MailSender.send() method takes a SimpleMailMessage class instead of the base MailMessage interface.  The problem is that I'm also submitting MimeMailMessages, which don't extend SimpleMailMessage.  So I can't just pass in a generic MailMessage object (which could be a SimpleMailMessage or a MimeMailMessage or one of the other MailMessage-derived types I've created) into send().  This is obviously done because MailMessage doesn't have any getter methods and these are necessary.  I'd suggest adding the getters to the base MailMessage interface.  That lets generic sender and message code work on these base methods, while letting us develop the necessary code to support special functionality elsewhere.  So the two steps I'm suggesting are:  1) Add getters to MailMessage interface. 2) Change the send() methods in MailSender to take MailMessage instead of SimpleMailMessage.  ---  **Issue Links:** - #6711 MailSender should use interface instead of class SimpleMailMessage (_**""is duplicated by""**_)  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2005-11-04T08:29:29Z","2019-01-11T21:07:36Z"
"","6827","Use Hibernate 3.1 as the example base in the ORM chapter, not Hibernate 2.1 [SPR-2136]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-2136](https://jira.spring.io/browse/SPR-2136?redirect=false)** and commented   ---  **Affects:** 2.0 M5","closed","type: documentation,","spring-projects-issues","2006-06-13T02:26:26Z","2012-06-19T03:52:37Z"
"","6823","Add dynamic language showcase application [SPR-2132]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-2132](https://jira.spring.io/browse/SPR-2132?redirect=false)** and commented   ---  **Affects:** 2.0 M5","closed","in: core,","spring-projects-issues","2006-06-12T22:59:49Z","2012-06-19T03:52:49Z"
"","6822","Add further coverage of the extensible XML authoring support. [SPR-2131]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-2131](https://jira.spring.io/browse/SPR-2131?redirect=false)** and commented  Add more coverage of the extensible XML authoring support, such as decoration, attribute parsing, etc.   ---  **Affects:** 2.0 M5","closed","type: documentation,","spring-projects-issues","2006-06-12T21:01:01Z","2012-06-19T03:52:45Z"
"","6815","Refactor the existing def of 'singleton' to be 100% unambiguous [SPR-2124]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-2124](https://jira.spring.io/browse/SPR-2124?redirect=false)** and commented  The current ref docs do not in a 100% totally clear way define the exact semantics of a Spring singleton. Make it so.  The following forum thread prompted the creation of this issue...  http://forum.springframework.org/showthread.php?t=25763   ---  **Affects:** 2.0 M5","closed","type: enhancement,","spring-projects-issues","2006-06-11T17:27:25Z","2012-06-19T03:52:22Z"
"","6789","JMS - Document the MessageListenerAdapter class in the reference manual [SPR-2096]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-2096](https://jira.spring.io/browse/SPR-2096?redirect=false)** and commented  The MessageListenerAdapter class needs to be documented in the reference manual.  This would include motivations for using it, alongside an example class and the attendant XML configuration. Discussion of the Session and associated transaction semantics would also be good.  This issue is somewhat associated with the following issue : #6482  ---  **Affects:** 2.0 M5","closed","type: documentation,","spring-projects-issues","2006-06-02T23:59:48Z","2019-01-11T18:19:21Z"
"","6788","JMS - Document the SessionAwareMessageListener interface in the reference manual [SPR-2095]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-2095](https://jira.spring.io/browse/SPR-2095?redirect=false)** and commented  The SessionAwareMessageListener interface needs to be documented (with an example) in the Spring reference manual.  This includes discussion of exception handling, coverage of the Session semantics, and suchlike.   ---  **Affects:** 2.0 M5","closed","type: documentation,","spring-projects-issues","2006-06-02T23:55:25Z","2012-06-19T03:52:41Z"
"","6787","Document the various strategies for EJBs accessing an ApplicationContext [SPR-2094]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-2094](https://jira.spring.io/browse/SPR-2094?redirect=false)** and commented  The current EJB chapter in the Spring reference documentation has no coverage of how an existing EJB that does not extend one of the Spring EJB-support classes can access one or more ApplicationContexts.  This needs to be explaind in said chapter, along with a discussion of the pros and cons of each approach.   ---  **Affects:** 2.0 M5","closed","type: documentation,","spring-projects-issues","2006-06-02T23:48:03Z","2012-06-19T03:52:39Z"
"","6745","Add comprehensive coverage of the JMS async messaging support with examples! [SPR-2052]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-2052](https://jira.spring.io/browse/SPR-2052?redirect=false)** and commented  The current JMS chapter has one wee little section covering the new async messaging support in Spring 2.0 (no offense to the person who originally wrote it).  What is needed is coverage of the (currently) 3 supported async options (xxxMessageListenerContainer) and examples of their attendant configuration; the pros and cons of each approach, transaction management, etc.   ---  **Affects:** 2.0 M4","closed","type: enhancement,","spring-projects-issues","2006-05-23T06:20:19Z","2012-06-19T03:52:41Z"
"","6641","CSS file for Spring Ref Docs not being put in correct place. [SPR-1948]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-1948](https://jira.spring.io/browse/SPR-1948?redirect=false)** and commented  Checkout the following ref docs link...  http://static.springframework.org/spring/docs/2.0.x/reference/index.html  The CSS stylesheet is not being correctly resolved, and as a result the Spring reference documentation does not look as it should. It is still legible (of course), but it doensn't look as polished at it does when the stylesheet is correctly resolved.  So in effect, this issue is... put the stylesheet in the right place please.  ---  **Affects:** 2.0 M4  **Issue Links:** - #6651 Some documentation images not included in distribution (_**""depends on""**_)","closed","type: bug,","spring-projects-issues","2006-04-23T20:46:21Z","2019-01-11T22:06:36Z"
"","6631","Update ScriptFactoryPostProcessor class Javadocs to reflect the new  style. [SPR-1938]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-1938](https://jira.spring.io/browse/SPR-1938?redirect=false)** and commented   ---  **Affects:** 2.0 M3","closed","type: documentation,","spring-projects-issues","2006-04-20T00:35:12Z","2012-06-19T03:52:51Z"
"","6630","Update Spring 2.0 ref docs to use Spring 1.2. XML config style consistently [SPR-1937]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-1937](https://jira.spring.io/browse/SPR-1937?redirect=false)** and commented  This means replacing all occurences of this kind of style...  \ \ \ \ \  With...  \ \ \   ---  **Affects:** 2.0 M3","closed","type: documentation,","spring-projects-issues","2006-04-20T00:12:35Z","2012-06-19T03:52:22Z"
"","6625","Document the new () schema-based tags in the reference documentation [SPR-1932]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-1932](https://jira.spring.io/browse/SPR-1932?redirect=false)** and commented  Document in the scripting chapter the new tags such as  that Rob just committed.  Also remove all references to the old style configuration.   ---  **Affects:** 2.0 M3","closed","type: documentation,","spring-projects-issues","2006-04-18T03:34:01Z","2012-06-19T03:52:36Z"
"","6618","Document the ClasspathXmlApplicationContext constructors that take a Class argument in the Resources chapter of the reference documentation [SPR-1925]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-1925](https://jira.spring.io/browse/SPR-1925?redirect=false)** and commented   ---  **Affects:** 2.0 M3","closed","type: documentation,","spring-projects-issues","2006-04-18T00:28:55Z","2012-06-19T03:52:39Z"
"","6617","Create a showcase / demo for the Portlet framework [SPR-1924]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-1924](https://jira.spring.io/browse/SPR-1924?redirect=false)** and commented  A small portlet application, with maybe 4 small portlets would be good.   ---  **Affects:** 2.0 M3","closed","type: documentation,","spring-projects-issues","2006-04-18T00:25:45Z","2012-06-19T03:52:39Z"
"","6616","Document the Portlet framework [SPR-1923]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-1923](https://jira.spring.io/browse/SPR-1923?redirect=false)** and commented  In the same vein and depth as the Spring MVC chapter.  A skeleton file (portlet.xml) file has already been created in the ref docs src directory.   ---  **Affects:** 2.0 M3","closed","type: documentation,","spring-projects-issues","2006-04-18T00:22:36Z","2012-06-19T03:52:25Z"
"","6615","Document the @Configurable annotation in the reference documentation [SPR-1922]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-1922](https://jira.spring.io/browse/SPR-1922?redirect=false)** and commented   ---  **Affects:** 2.0 M3","closed","type: documentation,","spring-projects-issues","2006-04-18T00:18:16Z","2012-06-19T03:52:30Z"
"","6614","Document the @Required annotation in the reference documentation [SPR-1921]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-1921](https://jira.spring.io/browse/SPR-1921?redirect=false)** and commented   ---  **Affects:** 2.0 M3","closed","type: documentation,","spring-projects-issues","2006-04-18T00:17:24Z","2012-06-19T03:52:48Z"
"","6613","Document the GenericBeanFactoryAccessor class in the reference documentation [SPR-1920]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-1920](https://jira.spring.io/browse/SPR-1920?redirect=false)** and commented  Mmm... one 'could' document this in the already too darn huge IoC container chapter, or we could create a Java5 (Tiger) chapter.   ---  **Affects:** 2.0 M3","closed","status: declined,","spring-projects-issues","2006-04-18T00:16:09Z","2006-06-18T22:58:54Z"
"","6612","Document the tooling SPI in the reference documentation [SPR-1919]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-1919](https://jira.spring.io/browse/SPR-1919?redirect=false)** and commented  The intended audience would be the developers of IDE plugins.   --- No further details from [SPR-1919](https://jira.spring.io/browse/SPR-1919?redirect=false)","closed","status: declined,","spring-projects-issues","2006-04-18T00:10:48Z","2012-06-19T09:37:23Z"
"","6611","Document the 'convention-over-configuration' support in the reference documentation [SPR-1918]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-1918](https://jira.spring.io/browse/SPR-1918?redirect=false)** and commented   ---  **Affects:** 2.0 M3","closed","type: documentation,","spring-projects-issues","2006-04-18T00:09:26Z","2012-06-19T03:52:22Z"
"","6610","Document how to use the new form tag library in the MVC chapter of the reference documentation [SPR-1917]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-1917](https://jira.spring.io/browse/SPR-1917?redirect=false)** and commented  This would consist of how to use the tags, examples, etc.  ---  **Affects:** 2.0 M3  **Issue Links:** - #6609 Document the new form tag library in the appendices of the reference documentation (_**""depends on""**_)","closed","type: documentation,","spring-projects-issues","2006-04-18T00:07:25Z","2019-01-11T22:07:18Z"
"","6609","Document the new form tag library in the appendices of the reference documentation [SPR-1916]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-1916](https://jira.spring.io/browse/SPR-1916?redirect=false)** and commented  This issue simply means adding comments to the spring-forms.tld file in the Spring source tree. The attendant stylesheet that effects the transformation into DocBook is already in place.  ---  **Affects:** 2.0 M3  **Issue Links:** - #6610 Document how to use the new form tag library in the MVC chapter of the reference documentation (_**""is depended on by""**_)","closed","type: documentation,","spring-projects-issues","2006-04-18T00:05:53Z","2019-01-11T22:07:21Z"
"","6608","Document Spring 2.0 declarative transaction configuration [SPR-1915]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-1915](https://jira.spring.io/browse/SPR-1915?redirect=false)** and commented   ---  **Affects:** 2.0 M3  1 votes, 1 watchers","closed","type: documentation,","spring-projects-issues","2006-04-18T00:02:59Z","2012-06-19T03:52:40Z"
"","6607","Document the new asynchronous JMS support in the reference documentation [SPR-1914]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-1914](https://jira.spring.io/browse/SPR-1914?redirect=false)** and commented   ---  **Affects:** 2.0 M3","closed","type: documentation,","spring-projects-issues","2006-04-18T00:01:59Z","2012-06-19T03:52:49Z"
"","6606","Document the new JPA integration in the reference documentation [SPR-1913]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-1913](https://jira.spring.io/browse/SPR-1913?redirect=false)** and commented  I daresay this would go in the chapter entitled 'ORM' (orm.xml)   ---  **Affects:** 2.0 M3","closed","type: documentation,","spring-projects-issues","2006-04-18T00:01:04Z","2012-06-19T03:52:28Z"
"","6605","Document using AspectJ pointcut expressions in Spring AOP in the reference documentation [SPR-1912]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-1912](https://jira.spring.io/browse/SPR-1912?redirect=false)** and commented   ---  **Affects:** 2.0 M3","closed","status: duplicate,","spring-projects-issues","2006-04-17T23:59:03Z","2012-06-19T02:28:21Z"
"","6604","Document the new (AOP) schema-based tags in the reference documentation [SPR-1911]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-1911](https://jira.spring.io/browse/SPR-1911?redirect=false)** and commented  This I kinda like the related issue of documenting the beans tags, but applies to AOP only.  It includes documenting the tags, showing how to use them examples etc.   ---  **Affects:** 2.0 M3","closed","status: duplicate,","spring-projects-issues","2006-04-17T23:57:45Z","2019-01-11T22:07:16Z"
"","6603","Document the ""Excluding a bean from being available for autowiring"" in the reference documentation [SPR-1910]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-1910](https://jira.spring.io/browse/SPR-1910?redirect=false)** and commented   ---  **Affects:** 2.0 M3","closed","type: documentation,","spring-projects-issues","2006-04-17T23:45:04Z","2012-06-19T03:52:31Z"
"","6602","Document the ""Default initialization & destroy methods"" in the reference documentation [SPR-1909]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-1909](https://jira.spring.io/browse/SPR-1909?redirect=false)** and commented   ---  **Affects:** 2.0 M3","closed","type: documentation,","spring-projects-issues","2006-04-17T23:43:33Z","2012-06-19T03:52:23Z"
"","6601","Document the extensible tag support in the reference documentation. [SPR-1908]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-1908](https://jira.spring.io/browse/SPR-1908?redirect=false)** and commented  This is stuff such as how to create your own custom tags and write the underlying parser.  The intended audience would be third party frameworks and other technology integrators.   ---  **Affects:** 2.0 M3","closed","type: documentation,","spring-projects-issues","2006-04-17T23:31:08Z","2019-01-11T22:05:55Z"
"","6600","Document the new schema-based tags in the reference documentation [SPR-1907]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-1907](https://jira.spring.io/browse/SPR-1907?redirect=false)** and commented  This means 'how to use said tags' with lots of examples.  It is closely related to the issue of documenting the tags themselves, but that issue is pure reference, whereas this one is like I say, a walkthrough-howto-tutorial etc.  ---  **Affects:** 2.0 M3  **Issue Links:** - #6597 Document the various Spring schemas in the appendices of the reference documentation. (_**""depends on""**_)  1 votes, 1 watchers","closed","type: documentation,","spring-projects-issues","2006-04-17T22:31:24Z","2019-01-11T22:05:51Z"
"","6599","Document the NamedParameterJdbcTemplate class in the reference documentation [SPR-1906]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-1906](https://jira.spring.io/browse/SPR-1906?redirect=false)** and commented   ---  **Affects:** 2.0 M3","closed","type: documentation,","spring-projects-issues","2006-04-17T22:26:45Z","2012-06-19T03:52:39Z"
"","6598","Document the SimpleJdbcTemplate class in the reference documentation [SPR-1905]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-1905](https://jira.spring.io/browse/SPR-1905?redirect=false)** and commented   ---  **Affects:** 2.0 M3","closed","type: documentation,","spring-projects-issues","2006-04-17T22:25:57Z","2012-06-19T03:52:38Z"
"","6597","Document the various Spring schemas in the appendices of the reference documentation. [SPR-1904]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-1904](https://jira.spring.io/browse/SPR-1904?redirect=false)** and commented  The various Spring schemas (spring-beans-xsd, spring-xxx.xsd, etc.) have to be documented in appendices in the reference manual.  I have created a (very) basic stylesheet to effect this transformation. It has to be fleshed out, and the various .xsd files have to be documented to that said stylesheet can extract the documentation.  ---  **Issue Links:** - #6600 Document the new schema-based tags in the reference documentation (_**""is depended on by""**_)","closed","type: documentation,","spring-projects-issues","2006-04-17T22:21:43Z","2019-01-11T22:05:53Z"
"","6596","FieldRetrievingFactoryBean cannot access constants on a class with package level visibility [SPR-1903]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-1903](https://jira.spring.io/browse/SPR-1903?redirect=false)** and commented  See the (commented out) test called 'testWithConstantOnClassWithPackageLevelVisibility' in the FieldRetrievingFactoryBeanTests fixture.   ---  **Affects:** 2.0 M3","closed","type: enhancement,","spring-projects-issues","2006-04-17T21:49:11Z","2012-06-19T03:52:41Z"
"","6595","Create a 'Whats new in Spring 2.0' section in the reference documentation. [SPR-1902]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-1902](https://jira.spring.io/browse/SPR-1902?redirect=false)** and commented   ---  **Affects:** 2.0 M3","closed","type: documentation,","spring-projects-issues","2006-04-17T21:36:00Z","2012-06-19T03:52:32Z"
"","6545","Improve reference documentation describing 'lazy-init' [SPR-1851]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-1851](https://jira.spring.io/browse/SPR-1851?redirect=false)** and commented  Improve the reference documentation describing the lazy initialization feature of the IoC container.  In particular, document all of the semantics associated with lazy init and dependencies, as per this support forum thread...    --- No further details from [SPR-1851](https://jira.spring.io/browse/SPR-1851?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-04-03T18:19:55Z","2012-06-19T03:54:23Z"
"","6544","Document the scoped bean support [SPR-1850]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-1850](https://jira.spring.io/browse/SPR-1850?redirect=false)** and commented  The title says it all... simply document using the scoped bean support in the reference documentation.  ---  **Affects:** 2.0 M3  **Issue Links:** - #6323 Allow scoping of FactoryBeans (_**""depends on""**_)  1 votes, 4 watchers","closed","type: documentation,","spring-projects-issues","2006-04-02T19:40:07Z","2019-01-11T22:01:50Z"
"","6543","Improve StoredProcedure reference documentation [SPR-1849]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-1849](https://jira.spring.io/browse/SPR-1849?redirect=false)** and commented  Improve the documentation for the StoredProcedure RDBMS operation class... one example is just not enough.  At the very least provide links to the various sample projects where StoredProcedure is used.  Also, semi-officially deprecate (in the reference documentation) the other RDBMS operation objects in favour of straight JDBCTemplate usage.   ---  **Affects:** 2.0 M3","closed","type: enhancement,","spring-projects-issues","2006-04-02T19:33:45Z","2012-06-19T03:54:28Z"
"","6342","UnsatisfiedDependencyException does not correctly display array classnames [SPR-1645]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-1645](https://jira.spring.io/browse/SPR-1645?redirect=false)** and commented  The UnsatisfiedDependencyException class does not display (correctly) the class names of array types that are unsatisfied...  'Unsatisfied dependency.... of type [b[]]...'  Would be nicer to display...  'Unsatisfied dependency.... of type [byte[]]...'  This snippet of code in the relevant ctor sorts the issue...  ctorArgType.isArray() ? ctorArgType.getComponentType().getName() + ClassUtils.ARRAY_SUFFIX : ctorArgType.getName()   --- No further details from [SPR-1645](https://jira.spring.io/browse/SPR-1645?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-01-27T22:27:08Z","2012-06-19T03:54:35Z"
"","6341","CharacterEditor does not support escaped characters [SPR-1644]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-1644](https://jira.spring.io/browse/SPR-1644?redirect=false)** and commented  The CharacterEditor does not support the following configuration...  \   --- No further details from [SPR-1644](https://jira.spring.io/browse/SPR-1644?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-01-27T22:14:13Z","2012-06-19T03:54:39Z"
"","5983","SampleController class in the MVC ref docs is wrong. [SPR-1281]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-1281](https://jira.spring.io/browse/SPR-1281?redirect=false)** and commented  The SampleController class definition in the MVC chapter of the reference documentation is wrong.  It defines a method called handleRequestInternal that returns a ModelAndView... the body of the method does indeed create a ModelAndView, and then does nothing with it. It should return the created ModelAndView. Also, the XML bean definition underneath it still uses the 'old' style of XML configuration... surely it should use the new style? To wit...  \package samples;  public class SampleController extends AbstractController {      public ModelAndView handleRequestInternal(         HttpServletRequest request,         HttpServletResponse response)     throws Exception {         return new ModelAndView(""foo"", new HashMap());     }  }\ \\ \ \]]>\   ---  **Affects:** 1.2.4","closed","type: bug,","spring-projects-issues","2005-09-03T21:35:43Z","2012-06-19T03:53:56Z"
"","6584","Deadlock possible when closing AbstractApplicationContext while a separate thread tries to create bean [SPR-1891]","**[Richie Jefts](https://jira.spring.io/secure/ViewProfile.jspa?name=babsjr77)** opened **[SPR-1891](https://jira.spring.io/browse/SPR-1891?redirect=false)** and commented  A deadlock can occur if a thread closes an application context and a second thread then tries to get a singleton bean which it needs to create (bean has not been created yet). The two threads are trying to synchronize on two locks but in opposite order.  A simple fix may be to change AbstractApplicationContext.destroySingletons() to: synchronized (this.singletonCache) { synchronized (this.disposableBeans) { String[] disposableBeanName = StringUtils.toStringArray(this.disposableBeans.keySet()); for (int i = 0; i < disposableBeanName.length; i++) { destroyDisposableBean(disposableBeanName[i]); } } this.singletonCache.clear(); }  But I have not tested that fix or investigated the code enough to know the implications of that change.  Stack trace from version 1.2.7.  Thread 1: at org.springframework.beans.factory.support.AbstractBeanFactory.removeSingleton(AbstractBeanFactory.java:520) - waiting to lock  (a java.util.HashMap)   at org.springframework.beans.factory.support.AbstractBeanFactory.destroyDisposableBean(AbstractBeanFactory.java:995)   at org.springframework.beans.factory.support.AbstractBeanFactory.destroyBean(AbstractBeanFactory.java:1024)   at org.springframework.beans.factory.support.AbstractBeanFactory.destroyDisposableBean(AbstractBeanFactory.java:1002)   at org.springframework.beans.factory.support.AbstractBeanFactory.destroyBean(AbstractBeanFactory.java:1024)   at org.springframework.beans.factory.support.AbstractBeanFactory.destroyDisposableBean(AbstractBeanFactory.java:1002)   at org.springframework.beans.factory.support.AbstractBeanFactory.destroyBean(AbstractBeanFactory.java:1024)   at org.springframework.beans.factory.support.AbstractBeanFactory.destroyDisposableBean(AbstractBeanFactory.java:1002)   at org.springframework.beans.factory.support.AbstractBeanFactory.destroySingletons(AbstractBeanFactory.java:566) - locked  (a java.util.LinkedHashMap)   at org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:512)  Thread 2: at org.springframework.beans.factory.support.AbstractBeanFactory.registerDisposableBeanIfNecessary(AbstractBeanFactory.java:905) - waiting to lock  (a java.util.LinkedHashMap)   at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:408)   at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:233) - locked  (a java.util.HashMap)   at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:145)   at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:186)   at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:106)   at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1046)   at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:857)   at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:378)   at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:233) - locked  (a java.util.HashMap)   at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:145)   at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:186)   at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:106)   at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1046)   at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:857)   at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:378)   at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:233) - locked  (a java.util.HashMap)   at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:145)   at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:186)   at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:106)   at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1046)   at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:857)   at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:378)   at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:252)   at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:145)   at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:537)    ---  **Affects:** 1.2.7, 2.0 M3","closed","in: core,","spring-projects-issues","2006-04-12T07:40:11Z","2012-06-19T03:52:44Z"
"","6845","ClassNotFound Exception when populating typed list [SPR-2154]","**[Rene Stolp](https://jira.spring.io/secure/ViewProfile.jspa?name=renestolp)** opened **[SPR-2154](https://jira.spring.io/browse/SPR-2154?redirect=false)** and commented  When specifying a type-definition while populating a list, the initialization fails with a ClassNotFoundException (see stacktrace below).  I have added a small test-case showing the problem. The test passes in 2.0M4 and fails with 2.0M5.  Stacktrace:  org.springframework.beans.factory.BeanDefinitionStoreException: Error 'Type class [de.smartprocure.EnumLoadProblemEnum] not found for \ element' in resource 'class path resource [EnumLoadTest.xml]' at: ; nested exception is java.lang.ClassNotFoundException: de/smartprocure/EnumLoadProblemEnum Caused by: java.lang.ClassNotFoundException: de/smartprocure/EnumLoadProblemEnum at java.lang.Class.forName0(Native Method) at java.lang.Class.forName(Class.java:242) at org.springframework.util.ClassUtils.forName(ClassUtils.java:160) at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parsePropertySubElement(BeanDefinitionParserDelegate.java:838) at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseListElement(BeanDefinitionParserDelegate.java:880) at org.springframework.beans.factory.xml.UtilNamespaceHandler$ListBeanDefinitionParser.parse(UtilNamespaceHandler.java:99) at org.springframework.beans.factory.xml.NamespaceHandlerSupport.parse(NamespaceHandlerSupport.java:78) at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1087) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:140) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.registerBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:93) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:544) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:390) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:339) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:314) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:126) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:142) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:168) at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:113) at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:79) at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:89) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:278) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:92) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:77) at org.springframework.test.AbstractSpringContextTests.loadContextLocations(AbstractSpringContextTests.java:135) at org.springframework.test.AbstractDependencyInjectionSpringContextTests.loadContextLocations(AbstractDependencyInjectionSpringContextTests.java:224) at org.springframework.test.AbstractSpringContextTests.getContext(AbstractSpringContextTests.java:115) at org.springframework.test.AbstractDependencyInjectionSpringContextTests.setUp(AbstractDependencyInjectionSpringContextTests.java:192) at junit.framework.TestCase.runBare(TestCase.java:125) at junit.framework.TestResult$1.protect(TestResult.java:106) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.framework.TestResult.run(TestResult.java:109) at junit.framework.TestCase.run(TestCase.java:118) at junit.framework.TestSuite.runTest(TestSuite.java:208) at junit.framework.TestSuite.run(TestSuite.java:203) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)   ---  **Affects:** 2.0 M5  **Attachments:** - [EnumLoadProblem.zip](https://jira.spring.io/secure/attachment/11713/EnumLoadProblem.zip) (_1.85 kB_)","closed","in: core,","spring-projects-issues","2006-06-18T18:44:06Z","2012-06-19T03:52:30Z"
"","6430","MBeanServerConnectionFactoryBean.destroy() should not attempt to close a lazy connector that has not been used yet [SPR-1733]","**[Renaud Bruyeron](https://jira.spring.io/secure/ViewProfile.jspa?name=bruyeron)** opened **[SPR-1733](https://jira.spring.io/browse/SPR-1733?redirect=false)** and commented  MBeanServerConnectionFactoryBean.destroy() throws an exception in the following case: * the connectOnStartup is set to false * the MBeanServerConnection has not been used yet * the remote MBeanServer is not available  The reason is that connector.close() will cause the JMXConnectorLazyInitTargetSource to attempt a connection, which might fail.  The fix for this particular case is trivial: add an instance boolean field to keep track of the connection state, and set it to true only during connect() or in the JMXConnectorLazyInitTargetSource. Then change the destroy() method to do this: if ( connected ) this.connector.close();  The larger question is wether destroy() should throw any JMX exception at all, since this might prevent the BeanFactory from shutting down completely.   ---  **Affects:** 1.2.6","closed","in: core,","spring-projects-issues","2006-02-21T00:50:57Z","2012-06-19T03:54:37Z"
"","6816","NullPointerException in DataAccessUtils [SPR-2125]","**[Redwan Un Noor](https://jira.spring.io/secure/ViewProfile.jspa?name=redwan)** opened **[SPR-2125](https://jira.spring.io/browse/SPR-2125?redirect=false)** and commented  NullPointer Exception in org.springframework.dao.support.DataAccessUtils  in public static Object requiredUniqueResult(Collection results) throws IncorrectResultSizeDataAccessException { int size = (results != null ? results.size() : 0); if (results.size() != 1) { // in this line a NullPointerException may occur throw new IncorrectResultSizeDataAccessException(1, size); } return results.iterator().next(); }  it should be,      public static Object requiredUniqueResult(Collection results) throws IncorrectResultSizeDataAccessException {     	int size = (results != null ? results.size() : 0);     	if (size != 1) {     		throw new IncorrectResultSizeDataAccessException(1, size);     	}     	return results.iterator().next();     }    --- No further details from [SPR-2125](https://jira.spring.io/browse/SPR-2125?redirect=false)","closed","type: bug,","spring-projects-issues","2006-06-11T20:16:54Z","2012-06-19T03:52:27Z"
"","6234","Spring 1.3 JMS listener  [SPR-1535]","**[ray](https://jira.spring.io/secure/ViewProfile.jspa?name=llipc)** opened **[SPR-1535](https://jira.spring.io/browse/SPR-1535?redirect=false)** and commented          Spring 1.3 Release Candidate ship with a sophisticated JMS listener solution: properly supporting concurrent reception, possibly also transactional reception.           But, here's an interesting conflict between JMS and J2EE that has been popularly discovered. Could you please take a look to find out the work around solution for it?           Appreciate your care on this critical issue with Spring 1.3 JMS listener!          You can't run an implementor of MessageListener in a J2EE container. J2EE 1.3 says not to do it in the EJB container. J2EE 1.4 says not to do it in the Web container either. Basically, you can't use it in any container that controls thread creation, which is any container except an application client container.  ""Note: A MessageListener can only be used in the client container. (The J2EE specification forbids the use of the JMS MessageListener mechanism for the asynchronous receipt of messages in the EJB and Web containers.)""      The section ""J2EE.6.7 Java™ Message Service (JMS) 1.0 Requirements"" of the J2EE specification gives a list of methods that must not be called in Web and EJB containers. This is enforced in WebSphere Application Server by throwing a javax.jms.IllegalStateException.          Here is a relevant part from J2EE 1.3 specification:http://java.sun.com/j2ee/j2ee-1_3-fr-spec.pdf section 6.7:  message listeners. The use of this message listener facility may be limited by the restrictions on the use of threads in various containers. In EJB containers, for instance, it is typically not possible to create threads. The following methods must not be used by application components executing in containers that prevent them from creating threads: . - javax.jms.Session method setMessageListener  - javax.jms.Session method getMessageListener  - javax.jms.Session method run  - javax.jms.QueueConnection method createConnectionConsumer  - javax.jms.TopicConnection method createConnectionConsumer  - javax.jms.TopicConnection method createDurableConnectionConsumer  - javax.jms.MessageConsumer method getMessageListener  - javax.jms.MessageConsumer method setMessageListener   .   In addition, use of the following methods on javax.jms.Connection   objects by applications in web and EJB containers may interfere with the   connection management functions of the container and must not be used:  - setExceptionListener  - stop  - setClientID   A J2EE container may throw a JMSException if the application component   violates these restrictions. ....""    WebSphere Application Server 5 and 6 don't allow MessageListeners to be used in either container. When you try, you get an error like this:  javax.jms.IllegalStateException: Method setMessageListener not permitted at com.ibm.ejs.jms.JMSCMUtils.methodNotPermittedException(JMSCMUtils.java:202) at com.ibm.ejs.jms.JMSMessageConsumerHandle.setMessageListener(JMSMessageConsumerHandle.java:193) at MyMessageListenerImpl.connect(MyMessageListenerImpl.java:39) . . .      So WebSphere Application Server doesn't actually prevent you from deploying a class that implements MessageListener, but when you try to run your code, WAS prevents the MessageConsumer.setMessageListener(MessageListener) method from running by throwing an IllegalStateException. For details, see IBM WMQ FAQ answer #92 and IBM Technote #1114239.          So when you get this error, the problem isn't a bug in your code, it's your entire approach. In a nutshell, if you want to run a MessageListener in J2EE, don't implement a MessageListener, implement a (can you guess?) messsage-driven bean (the JMS kind, which implements MessageListener). And if you don't like using EJBs? Get used to it. MDBs work in J2EE; MessageListeners don't.               BTW, here is the code snippet which is based on Spring 1.3 MessageListener, the code does not work on WebSphere Application Server 6: it throws javax.jms.IllegalStateException at the highlighted code below.   > public class MessageHandlerDAO implements MessageListener, > InitializingBean { > protected final Log log = LogFactory.getLog(getClass()); >  > private Type1MessageHandler type1MessageHandler; >  > private Type2MessageHandler type2MessageHandler; >  > private Type3MessageHandler type3MessageHandler; >  > private JmsTemplate102 jmsTemplate; >  > private QueueConnection conn; >  > private String username; >  > private String password; >  > public MessageHandlerDAO() { > log.info(""Creating MessageHandlerDAO().................""); > } >  > /** > * listening method. >   */ >   public void onMessage(Message message) { >   log.info(""onMessage()....................""); >  > TextMessage msg = null; >  > try { > if (message instanceof TextMessage) { > msg = (TextMessage) message; > if(log.isDebugEnabled()) > log.debug(""Reading message: "" + msg.getText()); >      >      MessageParser messageParser = new PortalXMLMessageParser(); >      GeneralMessage gm = messageParser.parse(msg.getText()); >      if(gm == null){ >       log.info(""message format not right!""); >       return; >      } >      String type = gm.getType(); >      >      if (MessageHandlerDAO.isNonBlank(type)) { >       if (type.equals(""1"")) { >        if (type1MessageHandler.handle(gm)) { >         if(log.isDebugEnabled()) >          log.debug(""Successfully deal with the message!"" >           + "" (The message type is : 1""); >        } else { >         if(log.isDebugEnabled()) >          log.debug(""Fail to deal with the message!"" >           + "" (The message type is : 1""); >        } >       } else if (type.equals(""2"")) { >        if (type2MessageHandler.handle(gm)) { >         if(log.isDebugEnabled()) >          log.debug(""Successfully deal with the message!"" >           + "" (The message type is : 2""); >        } else { >         if(log.isDebugEnabled()) >          log.debug(""Fail to deal with the message!"" >           + "" (The message type is : 2""); >        } >       } else if (type.equals(""3"")) { >        if (type3MessageHandler.handle(gm)) { >         if(log.isDebugEnabled()) >          log.debug(""Successfully deal with the message!"" >           + "" (The message type is : 3""); >        } else { >         if(log.isDebugEnabled()) >          log.debug(""Fail to deal with the message!"" >           + "" (The message type is : 3""); >        } >       } >      } else { >       log.info(""Unknow the message type!""); >      } >     } else { >      log.error(""This message type is not correct : "" >        + message.getClass().getName()); >     } >  > } catch (JMSException jmse) { > log.error(""JMSException"", jmse); > } > } >  > public void afterPropertiesSet() throws Exception { > initial(); > } >  > public void destroy() { > try { > conn.close(); > log.info(""JMS Connection close successfully!""); > } catch (JMSException e) { > log.error(""Message Exception"", e); > } > } >  > public void initial() { > log.info(""initial()...................""); > try { > //   conn = jmsTemplate.getConnectionFactory().createConnection( > //     username, password); > Context context = new InitialContext(); > QueueConnectionFactory qcf = > (QueueConnectionFactory) context.lookup(""ConnectionFactory""); > context.close(); > conn = qcf.createQueueConnection(); > context = new InitialContext(); > Queue queue = (Queue) context.lookup(""queue/wftopic""); > context.close(); > QueueSession session = conn > .createQueueSession(false, Session.AUTO_ACKNOWLEDGE); > QueueReceiver receiver = session.createReceiver(queue); > receiver.setMessageListener(this); > conn.start(); >  > //            conn = > jmsTemplate.getConnectionFactory().createConnection(); > //   conn.createSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE) > //     .createConsumer(jmsTemplate.getDefaultDestination()) > //     .setMessageListener(this); > //   conn.start(); > } catch (Exception e) { > log.error(""Message Exception"", e); > } > log.info(""Listening to the message................, "" + > Thread.currentThread().getName()); > } >  > public static boolean isBlank(String input) { > if ((input == null) || (input.length() == 0)) { > return true; > } >  > return input.trim().length() == 0; > } >  > public static boolean isNonBlank(String input) { > return !isBlank(input); > } >  > public void setType1MessageHandler(Type1MessageHandler > type1MessageHandler) { > this.type1MessageHandler = type1MessageHandler; > } >  > public void setType2MessageHandler(Type2MessageHandler > type2MessageHandler) { > this.type2MessageHandler = type2MessageHandler; > } >  > public void setType3MessageHandler(Type3MessageHandler > type3MessageHandler) { > this.type3MessageHandler = type3MessageHandler; > } >  > public void setJmsTemplate(JmsTemplate102 jmsTemplate) { > this.jmsTemplate = jmsTemplate; > } >  > public void setPassword(String password) { > this.password = password; > } >  > public void setUsername(String username) { > this.username = username; > } > }    ---  **Affects:** 2.0 M1","closed","type: bug,","spring-projects-issues","2005-12-13T22:45:18Z","2012-06-19T03:54:16Z"
"","6075","Add SQLJ to Spring [SPR-1375]","**[Ray McDermott](https://jira.spring.io/secure/ViewProfile.jspa?name=ray.mcdermott)** opened **[SPR-1375](https://jira.spring.io/browse/SPR-1375?redirect=false)** and commented  A large manufacturer (for whom I am consulting) uses Spring and SQLJ but cannot take advantage of the Spring Data Access technology to simplify the development and management of SQLJ in its data access code.   ---  **Attachments:** - [Data Access with SQLJ in Spring.pdf](https://jira.spring.io/secure/attachment/13259/Data+Access+with+SQLJ+in+Spring.pdf) (_71.97 kB_) - [spring-sqlj.jar](https://jira.spring.io/secure/attachment/14013/spring-sqlj.jar) (_26.46 kB_) - [Sqlj For Spring.zip](https://jira.spring.io/secure/attachment/13076/Sqlj+For+Spring.zip) (_22.89 kB_) - [SQLJSpring-Sample.zip](https://jira.spring.io/secure/attachment/14014/SQLJSpring-Sample.zip) (_40.27 kB_)  9 votes, 11 watchers","closed","type: enhancement,","spring-projects-issues","2005-10-12T08:59:17Z","2014-11-12T03:00:07Z"
"","6440","Improve Hibernate3 LocalSessionFactoryBean support for event listeners [SPR-1743]","**[Ray Krueger](https://jira.spring.io/secure/ViewProfile.jspa?name=raykrueger)** opened **[SPR-1743](https://jira.spring.io/browse/SPR-1743?redirect=false)** and commented  The current hibernate3.LocalSessionFactoryBean does not allow for multiple listeners of the same type. There is no means to assign multiple PostLoadEventListeners to the ""post-load"" event type. Currently the setListners method takes a map that is defined as a Map of .  I propose changing the eventListeners configuration block to check to see if the entry value is a list...          if (eventListeners != null) {                  Set entries = eventListeners.entrySet();             for (Iterator iterator = entries.iterator(); iterator.hasNext();) {                 Map.Entry entry = (Map.Entry) iterator.next();                 String listenerType = (String) entry.getKey();                 Object value = entry.getValue();                 if (value instanceof List) {                     List list = ((List) value);                     Class clazz = config.getEventListeners().getListenerClassFor(listenerType);                     Object[] listeners = (Object[]) Array.newInstance(clazz, list.size());                     listeners = list.toArray(listeners);                     config.setListeners(listenerType, listeners);                 } else {                     config.setListener(listenerType, value);                 }             }              }  Then it is possible from the context configuration to do the following... \ \ \ \ \ \ \ \ \ \ \ \ \  ---  **Affects:** 1.2.6  **Issue Links:** - #6304 Spring does not support setting multiple event listeners with Hibernate 3.1 (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2006-02-27T01:43:22Z","2019-01-11T22:07:34Z"
"","5998","classpath* only works for entire Resource array, not for array element [SPR-1297]","**[Ray Davis](https://jira.spring.io/secure/ViewProfile.jspa?name=raydavis)** opened **[SPR-1297](https://jira.spring.io/browse/SPR-1297?redirect=false)** and commented  When componentizing a Spring-Hibernate web project, one quickly runs into the problem of combining component-specific Hibernate mapping files into an application-wide data source and transaction manager.  At first, Spring 1.1 and 1.2 seems to offer a variety of solutions, since the hibernate.LocalSessionFactoryBean bean supports the properties ""mappingResources"", ""mappingLocations"", ""mappingDirectoryLocations"", and ""mappingJarLocations"". However, all of these options turn out to have serious limitations, all of which can be found mentioned in various developer forums and weblogs.  * Despite its plural name, ""mappingLocations"" doesn't accept a list of values, only a single string. (It probably should have been named ""mappingLocation"".) This puts serious constraints on Java class package naming schemes.  * ""mappingDirectoryLocations"" only looks at the file system for matches, and doesn't search inside JARs (which is generally how components would be packaged).  * ""mappingJarLocations"" also looks at the file system, which means that different Spring configuration files must be used for web apps (where JARs will typically be in WEB-INF/lig) and in unit tests. (Also, when using Maven, component JARs typically include a version number in their names, which seems undesirably volatile for Spring configuration files.)  Componentizing in Spring might become much easier with just a few changes:  1) Let ""mappingLocations"" accept a list of values.  2) Let ""mappingDirectoryLocations"" accept the ""classpath*:"" syntax for searching inside JARs.  Incidentally, the Sakai 2.0 component system takes a different approach to the problem. Instead of consolidating mapping files in a top-level application context configuration file, it lets components add their individual Spring configuration files to a centrally managed bean when loading. Any ""mappingResources"" or ""mappingLocations"" properties are added to the shared Hibernate session factory bean. As a way of more safely generalizing that approach, Spring might consider supporting something like:  \ 	\\\ 	\\\....\\\ \   ---  **Affects:** 1.2.4  3 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2005-09-12T03:29:51Z","2012-06-19T03:54:32Z"
"","6045","ServletException thrown in BEA WebLogic when processing HTTP HEAD request. [SPR-1345]","**[Randy Stearns](https://jira.spring.io/secure/ViewProfile.jspa?name=rstearns01)** opened **[SPR-1345](https://jira.spring.io/browse/SPR-1345?redirect=false)** and commented  I know this is really BEA's problem, but the (forseeable future) solution is to continue to allow override of FrameworkServlet doHead() and not let it propagate to HttpServlet. This was changed in 1.1.5. To fix, I suggest FrameworkServlet.doHead() not be final so we can extend DispatcherServlet. I'm having to **tweak** FrameworkServlet with every new version to keep it working.  Related note with example exception: http://support.bea.com/application?namespace=askbea&origin=ask_bea_answer.jsp&event=link.view_answer_page_solution&answerpage=solution&page=wls/S-17206.htm  Thanks,  Randy   ---  **Affects:** 1.2.3, 1.2.4, 1.2.5","closed","in: web,","spring-projects-issues","2005-10-04T06:17:52Z","2019-01-11T21:16:05Z"
"","6280","batch execute problem with TransactionAwareDataSourceProxy - iBatis integration issue [SPR-1583]","**[Ram Chidambaram](https://jira.spring.io/secure/ViewProfile.jspa?name=ram_2000)** opened **[SPR-1583](https://jira.spring.io/browse/SPR-1583?redirect=false)** and commented  This problem was introduced in 1.1.5 release.  iBatis SQLMapExecutorDelegate methods (insert, update etc..) have the following structure.  Transaction trans = getTransaction(session); boolean autoStart = trans == null;  try { trans = autoStartTransaction(session, autoStart, trans); .... ...  autoCommitTransaction(session, autoStart); } finally { autoEndTransaction(session, autoStart); }  If a transaction was started by iBatis (ie. autoStart = true), then autoCommitTransaction will end-up calling the following on the SQLMapExecutorDelegate  public void commitTransaction(SessionScope session) throws SQLException { try { // Auto batch execution if (session.isInBatch()) { executeBatch(session); } sqlExecutor.cleanup(session); txManager.commit(session); } catch (TransactionException e) { throw new NestedSQLException(""Could not commit transaction.  Cause: "" + e, e); } }  The executeBatch method gets called after every call (insert, update, delete etc..), essentially there is no batching of statements. This is only a issue if a TransactionAwareDataSourceProxy is used ( ..which is the default).  If I set the 'useTransactionAwareDataSource' property to false in the SqlMapClientFactoryBean then the following code in SqlMapClientTemplate sets the user connection, which in-turn creates a user provided transaction (...autoStart is now false..and iBatis will not start a transaction..and hence the executeBatch will not be called after every insert/update/delete).  Connection con = DataSourceUtils.getConnection(getDataSource()); try { session.setUserConnection(con); return action.doInSqlMapClient(session); }  Thoughts ?   ---  **Affects:** 1.1.5","closed","type: bug,","spring-projects-issues","2005-12-29T12:29:36Z","2012-06-19T03:54:25Z"
"","6841","Investigate the possibility of a way to declare validation rules from a database and have them applied in Java and javascript [SPR-2150]","**[Rakesh Patel](https://jira.spring.io/secure/ViewProfile.jspa?name=too_many_details)** opened **[SPR-2150](https://jira.spring.io/browse/SPR-2150?redirect=false)** and commented  This JIRA entry was prompted by a quick discussion with Rob Harrop after his talk at SpringOne. He made the point that validation needs to happen at all tiers of an application (client, app server and db).  Taking for instance the case of mandatory (NOT NULL) fields in a database. The chances are this check will also take place in the controller (probably using a Validator) and in the browser using JavaScript.  Would it be possible to develop some system, whereby the database could be checked for rules and the corresponding Validator and JavaScript be created automatically? That means the rules are in one place rather than in multiple places.   --- No further details from [SPR-2150](https://jira.spring.io/browse/SPR-2150?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-06-17T18:32:33Z","2012-06-19T09:37:30Z"
"","6073","Enhance the PropertyPlaceholderConfigurer to support nested properties. [SPR-1373]","**[raja s kolluru](https://jira.spring.io/secure/ViewProfile.jspa?name=raja0719)** opened **[SPR-1373](https://jira.spring.io/browse/SPR-1373?redirect=false)** and commented  The PropertyPlaceholderConfigurer is currently not able to handle nested properties. For instance, it may be required for a property name to be obtained from another property. This would result in expressions such as ${${x}} where x would contain the name of the property to evaluate.  I extended the PropertyPlaceholderConfigurer to incorporate this functionality. It also removes some cases of circular references that were not caught in the other version of the PropertyPlaceholderConfigurer.  This was done in Spring release 1.1.4 which I realize can be different from the current version. I have also got some test cases to test this new functionality.  ---  **Affects:** 1.1.4  **Attachments:** - [NestedPlaceholderConfigurer.java](https://jira.spring.io/secure/attachment/11499/NestedPlaceholderConfigurer.java) (_8.16 kB_) - [PropertyPlaceholder.jar](https://jira.spring.io/secure/attachment/11204/PropertyPlaceholder.jar) (_13.33 kB_) - [PropertyPlaceholderConfigurer.java](https://jira.spring.io/secure/attachment/12468/PropertyPlaceholderConfigurer.java) (_16.35 kB_)  **Issue Links:** - #9319 PropertyPlaceholderConfigurer should support nested keys in placeholder key (_**""duplicates""**_)  2 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2005-10-12T04:50:41Z","2019-01-11T21:19:59Z"
"","6361","ResourceBundleViewResolver doesn't recognize class of defaultParentView [SPR-1664]","**[Rainer Schmitz](https://jira.spring.io/secure/ViewProfile.jspa?name=swift)** opened **[SPR-1664](https://jira.spring.io/browse/SPR-1664?redirect=false)** and commented  Up to Spring 2.0 M1 a property definition for a ResourceBundleViewResolver like this worked:  Bean defnition:           	${cacheViews}     	0     	views.bookRegistrarPortlet     	help       bookRegistrarPortlet.properties: 1. Default view    help.class=org.springframework.web.servlet.view.JstlView    help.url=/WEB-INF/jsp/book/en/bookSearchHelp.jsp  2. Context sensitive help pages    erpBookOrderHelp.url=/WEB-INF/jsp/book/en/bookSearchHelp.jsp  With Spring 2.0 M2 I get the following stacktrace:  2006-02-03 13:51:40,396 ERROR [org.springframework.web.portlet.DispatcherPortlet] - \ org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'erpBookOrderHelp': Instantiation of bean failed; nested exception is java.lang.IllegalStateException: Bean definition does not carry a resolved bean class java.lang.IllegalStateException: Bean definition does not carry a resolved bean class at org.springframework.beans.factory.support.AbstractBeanDefinition.getBeanClass(AbstractBeanDefinition.java:252) at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:52) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateBean(AbstractAutowireCapableBeanFactory.java:498) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:372) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:238) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:148) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:253) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:331) at org.springframework.web.servlet.view.ResourceBundleViewResolver.initFactory(ResourceBundleViewResolver.java:202) at org.springframework.web.servlet.view.ResourceBundleViewResolver.loadView(ResourceBundleViewResolver.java:148) at org.springframework.web.servlet.view.AbstractCachingViewResolver.createView(AbstractCachingViewResolver.java:146) at org.springframework.web.servlet.view.AbstractCachingViewResolver.resolveViewName(AbstractCachingViewResolver.java:79) at org.springframework.web.portlet.DispatcherPortlet.resolveViewName(DispatcherPortlet.java:967) at org.springframework.web.portlet.DispatcherPortlet.render(DispatcherPortlet.java:895) at org.springframework.web.portlet.DispatcherPortlet.doRenderService(DispatcherPortlet.java:726) at org.springframework.web.portlet.FrameworkPortlet.processRequest(FrameworkPortlet.java:420) at org.springframework.web.portlet.FrameworkPortlet.doDispatch(FrameworkPortlet.java:391) at javax.portlet.GenericPortlet.render(GenericPortlet.java:163) at com.liferay.portal.servlet.PortletServlet.service(PortletServlet.java:78) at javax.servlet.http.HttpServlet.service(HttpServlet.java:802) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:252) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:672) at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:574) at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:499) at com.liferay.portlet.CachePortlet._invoke(CachePortlet.java:297) at com.liferay.portlet.CachePortlet.render(CachePortlet.java:178) at org.apache.jsp.html.portal.render_005fportlet_jsp._jspService(org.apache.jsp.html.portal.render_005fportlet_jsp:577) at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:97) at javax.servlet.http.HttpServlet.service(HttpServlet.java:802) at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:332) at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:314) 2006-02-03 13:51:40,412 DEBUG [org.springframework.web.portlet.context.XmlPortletApplicationContext] -  2006-02-03 13:51:40,412 ERROR [org.apache.catalina.core.ContainerBase.[Catalina].[localhost].[/zzzIntranet].[bookRegistrar]] -   Including a statement to explicitly set the class for erpBookOrderHelp erpBookOrderHelp.class=org.springframework.web.servlet.view.JstlView does not work, either.   ---  **Affects:** 2.0 M2","closed","type: bug,","spring-projects-issues","2006-02-02T23:59:37Z","2012-06-19T03:54:14Z"
"","6700","ANT does not call destroy-method after tests [SPR-2007]","**[Rafał Malinowski](https://jira.spring.io/secure/ViewProfile.jspa?name=rmalinowski)** opened **[SPR-2007](https://jira.spring.io/browse/SPR-2007?redirect=false)** and commented  When using Spring with ant tests (inherited from AbstractTransactionalDataSourceSpringContextTests) destroy-methods aren't called, so system is full of garbage after that :(  When running with Tomcat everything works properly.  ---  **Affects:** 1.2.8  **Issue Links:** - #9544 `@PreDestroy` method in test instance not executed when run with SpringJUnit4ClassRunner - #12035 When testing using JUnit 4 Suite, destroy-methods are called at the end of the test suite instead of per test - #9379 Support for `@DirtiesContext` at the test class level","closed","type: enhancement,","spring-projects-issues","2006-05-13T07:23:58Z","2019-01-13T08:55:21Z"
"","6844","SqlMapClientTemplate does not work for nested calls (same SqlMapSession) [SPR-2153]","**[Rafael Borges](https://jira.spring.io/secure/ViewProfile.jspa?name=borgra)** opened **[SPR-2153](https://jira.spring.io/browse/SPR-2153?redirect=false)** and commented  I've already commented here http://opensource.atlassian.com/projects/spring/browse/SPR-1583 that there was introduced a serious bug in Spring's SqlMapClientTemplate in 1.2.7 and 2.0 M2.  This bug does not allow to use iBatis properly with SqlMapClientTemplate from the version stated above.  Please see my comments here http://opensource.atlassian.com/projects/spring/browse/SPR-1583#action_17998  Thanks and regards    ---  **Affects:** 1.2.7, 1.2.8, 2.0 M2, 2.0 M3, 2.0 M4, 2.0 M5","closed","type: bug,","spring-projects-issues","2006-06-18T18:16:08Z","2012-06-19T03:52:38Z"
"","6863","Enhance BaseCommandController to detect default command class (CoC) [SPR-2172]","**[Pieter Coucke](https://jira.spring.io/secure/ViewProfile.jspa?name=pietercoucke)** opened **[SPR-2172](https://jira.spring.io/browse/SPR-2172?redirect=false)** and commented  I would like to suggest to improve BaseCommandController so it detects the command class when none is set with setCommandClass(), a bit in the same way like in ControllerClassNameHandlerMapping (CoC).  A patch can be found in attach.  class BaseCommandController  {      /**      * Common suffix at the end of controller implementation classes.      * TODO this is the same as in {@link org.springframework.web.servlet.mvc.support.ControllerClassNameHandlerMapping},       *  maybe this needs to be made public or configurable?      */     private static final String CONTROLLER_SUFFIX = ""Controller"";     private static final String COMMAND_SUFFIX = ""Command"";  protected void initApplicationContext() { if (this.validators != null) { ... }  if (this.commandClass == null) { String detectedCommandClass = getClass().getName(); // Note: this does not work for inner classes detectedCommandClass = detectedCommandClass.endsWith(CONTROLLER_SUFFIX) ? detectedCommandClass.substring(0, detectedCommandClass.indexOf(CONTROLLER_SUFFIX)) : detectedCommandClass; detectedCommandClass += COMMAND_SUFFIX; try { this.commandClass = ClassUtils.forName(detectedCommandClass); } catch (ClassNotFoundException exc) { throw new IllegalArgumentException( ""Cannot create command by using default configuration "" + ""which checks for a class named ["" + detectedCommandClass + ""] - "" + ""either create this class or set commandClass or (in a form controller) "" + ""override formBackingObject""); } } }  }   ---  **Affects:** 2.0 RC1  **Attachments:** - [default-command.txt](https://jira.spring.io/secure/attachment/11722/default-command.txt) (_6.97 kB_)","closed","type: enhancement,","spring-projects-issues","2006-06-21T22:50:40Z","2007-05-25T01:57:44Z"
"","6233","MessageTag arguments [SPR-1534]","**[Pieter Coucke](https://jira.spring.io/secure/ViewProfile.jspa?name=pietercoucke)** opened **[SPR-1534](https://jira.spring.io/browse/SPR-1534?redirect=false)** and commented  I would like to have a property ""argumentSeparator"" added to org.springframework.web.servlet.tags.MessageTag so we can specify which separator to use for the arguments.  Now it always uses a comma, but sometimes this gives problems.  For example, we had a String ""2,15"" (Belgium uses a comma as decimal separator) which was seen by MessageTag as 2 parameters.  If we could specify that the separator is a semi-colom, we would not have this problem.  Another small remark: MessageTag contains the following code:  protected void writeMessage(String msg) throws IOException { pageContext.getOut().write(String.valueOf(msg)); }  I don't think the String.valueOf call is necessary.   ---  **Affects:** 1.2.6","closed","type: enhancement,","spring-projects-issues","2005-12-13T21:53:48Z","2012-06-19T03:54:19Z"
"","6550","Non-singleton BeanNameAware beans get wrong name [SPR-1856]","**[Petri Salmi](https://jira.spring.io/secure/ViewProfile.jspa?name=psalmi)** opened **[SPR-1856](https://jira.spring.io/browse/SPR-1856?redirect=false)** and commented  When retrieving non-singleton beans from BeanFactory with alias or by name, the beans get injected with the id as name instead of the alias or name used in.  In earlier version this was the case but now it has changed for M3.   ---  **Affects:** 2.0 M3  **Attachments:** - [spr-1856.zip](https://jira.spring.io/secure/attachment/11549/spr-1856.zip) (_1.26 kB_)  1 votes, 1 watchers","closed","in: core,","spring-projects-issues","2006-04-04T18:34:00Z","2019-01-12T16:29:24Z"
"","6525","problem with HibernateInterceptor and Weblogic 8.1  [SPR-1831]","**[peter](https://jira.spring.io/secure/ViewProfile.jspa?name=mrpunkin)** opened **[SPR-1831](https://jira.spring.io/browse/SPR-1831?redirect=false)** and commented  Hi  I'm having an issue using org.springframework.orm.hibernate3.HibernateInterc eptor to manage hibernate session/connection within Weblogic 8.1. Spring seems to be leveraging a non-transactional weblogic connection, even when I have enterred a container managed transaction.  When Using HibernateInterceptor Request enters through non-transactional EJB method and hibernate interceptor binds a session with a non-transactional connection to the thread. Later on in this request, I enter a transactional EJB method, but spring still leverages the existing session on the thread, cotaining a non-transactional connection.  When NOT Using HibernateInterceptor In case I do not use interceptor and get session for each call, everything looks fine (correct connection types are used i.e. weblogic.jdbc.wrapper.PoolConnection - outside of TX and weblogic.jdbc.wrapper.JTSConnection inside of TX).  Unfortunately I have to use the Session-per-Request paradaigm since I need lazy loading capabilites.  Thank you  I have a test case (including all the Weblogic/Spring/Hibernate configuration that can be run in container)   ---  **Affects:** 1.2.5  1 votes, 2 watchers","closed","status: declined,","spring-projects-issues","2006-03-14T03:04:04Z","2019-01-12T16:29:25Z"
"","6352","improved toString of proxies. [SPR-1655]","**[Peter Veentjer](https://jira.spring.io/secure/ViewProfile.jspa?name=alarmnummer)** opened **[SPR-1655](https://jira.spring.io/browse/SPR-1655?redirect=false)** and commented  It would be very helpfull if the toString of proxies was improved to make visible what kind of proxy it is. At the moment I only see a '$proxy10' for example, but it would be nice if it was more informative. Now I have to do a lot of extra work to figure out what kind of proxy I have (this is very time consuming if you have a chain of proxies and something goes wrong).   ---  **Affects:** 2.0 M1","closed","type: enhancement,","spring-projects-issues","2006-01-31T18:53:46Z","2006-02-12T09:21:30Z"
"","6050","LoadBalancing'Service'FactoryBean.. BeanFactory that adds load balancing/failover functionality to a set of (remoteservice)beans. [SPR-1350]","**[Peter Veentjer](https://jira.spring.io/secure/ViewProfile.jspa?name=alarmnummer)** opened **[SPR-1350](https://jira.spring.io/browse/SPR-1350?redirect=false)** and commented  At the moment it isn`t possible to add failover/loadbalancing to multiple beans. I think it can be done, without any changes in the code, it would just require a new FactoryBean.  example: [code] \ \ \rmi://${paymenthost}/PayService\ \ \ \com.springinaction.payment.PaymentService\ \ \  \ \ \hessian://${paymenthost2}/PayService\ \ \ \com.springinaction.payment.PaymentService\ \ \  \  \ \ \ \          \ \    \ \ \ \ \com.springinaction.payment.PaymentService\ \ \  [/code]  PaymentService1 is a RMI service. PaygmentService2 is a Hessian service. Those two services can be joined in a new bean: paymentService  The PaymentService creates a new objects that calls one of the other services maybe with round robin, or something else. And failover wouldn`t be a big problem to add (if one of the services fails you can try another one).   ---  **Attachments:** - [LoadBalancedBeanFactory.zip](https://jira.spring.io/secure/attachment/12381/LoadBalancedBeanFactory.zip) (_6.34 kB_)  14 votes, 13 watchers","closed","status: bulk-closed,","spring-projects-issues","2005-10-04T21:23:30Z","2019-01-12T03:51:21Z"
"","5914","Setting system properties [SPR-1212]","**[Peter Veentjer](https://jira.spring.io/secure/ViewProfile.jspa?name=alarmnummer)** opened **[SPR-1212](https://jira.spring.io/browse/SPR-1212?redirect=false)** and commented  For a project I`m working on, I needed to set some System.properties for Lucene. I haven`t found a bean that could set system.properties and that  is why I have created one.  I know it isn`t the most interresting bean ever made, and the chances are small anyone is going to need it, but here it is ;)  public class SetSystemPropertiesBean implements InitializingBean {      private Map _propertyMap = null;     private Properties _properties = null;     private boolean _clean = false;          public boolean isClean() {     	return _clean;     }          public void setClean(boolean clean) {     	_clean = clean;     }          public Properties getProperties() {     	return _properties;     }          public void setProperties(Properties properties) {     	_properties = properties;     }          public Map getPropertyMap() {     	return _propertyMap;     }          public void setPropertyMap(Map propertyMap) {     	_propertyMap = propertyMap;     }          public void afterPropertiesSet() throws Exception {     	if(_properties == null && _propertyMap== null)     		throw new IllegalArgumentException(""properties or propertyMap is missing"");          	Properties properties = buildProperties();     	installProperties(properties);     }          private Properties buildProperties() {     	Properties properties = null;     	if(_properties != null){     		properties = _properties;     	}else if(_propertyMap !=null){     		properties = new Properties();     		for(Iterator keyIt = _propertyMap.keySet().iterator();keyIt.hasNext();){     			Object keyObj = keyIt.next();     			if(!(keyObj instanceof String))     				throw new IllegalArgumentException(""key: ""+keyObj+"" is not a String"");     			     			Object value = _propertyMap.get(keyObj);     			properties.setProperty((String)keyObj,value==null?null:value.toString());     		}     	}          	return properties;     }          private void installProperties(Properties properties) {     	if(_clean){     		System.setProperties(properties);     	}else{     		Properties systemProperties = System.getProperties();     		for(Enumeration keyIt = properties.propertyNames();keyIt.hasMoreElements();){     			String key = (String)keyIt.nextElement();     			String valueObject = (String) properties.get(key);     			systemProperties.setProperty(key,valueObject);     		}     	}     }  }   --- No further details from [SPR-1212](https://jira.spring.io/browse/SPR-1212?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-08-08T07:02:16Z","2006-01-04T00:08:57Z"
"","5883","Support for JDK 1.5 ThreadPoolExecutor [SPR-1181]","**[Peter Veentjer](https://jira.spring.io/secure/ViewProfile.jspa?name=alarmnummer)** opened **[SPR-1181](https://jira.spring.io/browse/SPR-1181?redirect=false)** and commented  Java 5 has a very cool new concurrency library and it would be nice if it could be integrated into Spring. Altough it is easy to create those objects, it is a bit more complicated to wire in the jobs to execute and that is where the factories can be helpfull.  At the moment I`m writing the classes for my own implementations, but it would be nice if they could be added to the Spring core.   ---  2 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2005-07-28T03:27:44Z","2019-01-13T08:57:27Z"
"","6490","Concurrency problem with JaxRpcPortClientInterceptor when specifying portInterface on Axis [SPR-1796]","**[Peter Rohne](https://jira.spring.io/secure/ViewProfile.jspa?name=prohne)** opened **[SPR-1796](https://jira.spring.io/browse/SPR-1796?redirect=false)** and commented  Symptom: Parameters from two client requests are getting included in the same web services call. (Relevant piece of stack is below)  See method JaxRpcPortClientInterceptor.invoke() for the case where the interface implements Remote. Problem is instance variable portStub. This portStub in initialized in JaxRpcPortClientInterceptor.prepare() which only gets called once. In the prepare method, jaxRpcService.getPort(...) returns an instance of Remote which is stored as portStub. This guy has the AxisClientProxy which has an org.apache.axis.client.Call instance variable. See code that creates stub in org.apache.client.Service.getPort(String,QName,Class).  If two threads are executing at the same time, the parameter array passed to an org.apache.axis.client.Call.invoke(...) appears to have both request's parameters(or some portion of both depending on timing).  Probably need to call prepare() every time so that we get a new portStub everytime. Should make portStub the return val of prepare. I assume the prepare is done once for performance reasons but how bad can this be to do everytime?  FYI - the quick fix was to use serviceInterface as opposed to portInterface in the context config.  Stack trace: org.springframework.remoting.RemoteAccessException: Cannot access remote service [{http://webservice.impl.enrolment.service.maa.agr.gc.ca}SpringMAAEnrolmentServiceEndPoint]; nested exception is org.apache.axis.AxisFault: ; nested exception is:       javax.xml.rpc.JAXRPCException: Number of parameters passed in (6) doesn't match the number of IN/INOUT parameters (11) from the addParameter() calls AxisFault  faultCode: {http://schemas.xmlsoap.org/soap/envelope/}Server.userException  faultSubcode:  faultString: javax.xml.rpc.JAXRPCException: Number of parameters passed in (6) doesn't match the number of IN/INOUT parameters (11) from the addParameter() calls  faultActor:  faultNode:  faultDetail:       {http://xml.apache.org/axis/}stackTrace:javax.xml.rpc.JAXRPCException: Number of parameters passed in (6) doesn't match the number of IN/INOUT parameters (11) from the addParameter() calls       at org.apache.axis.client.Call.getParamList(Call.java:2042)       at org.apache.axis.client.Call.invoke(Call.java:2345)       at org.apache.axis.client.Call.invoke(Call.java:1804)       at org.apache.axis.client.AxisClientProxy.invoke(AxisClientProxy.java:163)   --- No further details from [SPR-1796](https://jira.spring.io/browse/SPR-1796?redirect=false)","closed","type: bug,","spring-projects-issues","2006-03-16T07:55:34Z","2012-06-19T03:54:14Z"
"","6403","HSQL: UncategorizedSQLException thrown when unique constraint is violated. [SPR-1706]","**[Peter Berkenbosch](https://jira.spring.io/secure/ViewProfile.jspa?name=peterhb)** opened **[SPR-1706](https://jira.spring.io/browse/SPR-1706?redirect=false)** and commented  Using hsqld I'm implementing a simple class with an attribute called 'emailadres' this attribute is has an unique contraint. During tests I got an UncategorizedSQLException when I violate the contraint.  test-code: public void testSaveKlantWithEmailAdres(){      	Klant k = new Klant();     	k.setEmailadres(""fakemail@nomail.com"");     	klantDao.saveKlant(k);     	assertFalse((k.getId() == 0));     	     	//save a 'Klant' with the same emailaddress.     	Klant k2 = new Klant();     	k2.setEmailadres(""fakemail@nomail.com"");     	try{     		klantDao.saveKlant(k2);     		fail(""Exception expected!"");     	}catch(Exception ex){  		     		     		     	}     	     	     }  hibernate config : \  code: public void saveKlant(Klant k) { getHibernateTemplate().saveOrUpdate(k); //necessary to throw a DataIntegrityViolation and catch it in Manager getHibernateTemplate().flush(); }  trace : org.springframework.jdbc.UncategorizedSQLException: Hibernate operation: Could not execute JDBC batch update; uncategorized SQLException for SQL [insert into KLANT (EMAILADRES, KLANT_ID) values (?, ?)]; SQL state [null]; error code [0]; failed batch; nested exception is java.sql.BatchUpdateException: failed batch java.sql.BatchUpdateException: failed batch at org.hsqldb.jdbc.jdbcStatement.executeBatch(Unknown Source) at org.hsqldb.jdbc.jdbcPreparedStatement.executeBatch(Unknown Source) at org.hibernate.jdbc.BatchingBatcher.doExecuteBatch(BatchingBatcher.java:57) at org.hibernate.jdbc.AbstractBatcher.executeBatch(AbstractBatcher.java:174) at org.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:226) at org.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:136) at org.hibernate.event.def.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:274) at org.hibernate.event.def.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:27) at org.hibernate.impl.SessionImpl.flush(SessionImpl.java:730) at org.springframework.orm.hibernate3.HibernateAccessor.flushIfNecessary(HibernateAccessor.java:394) at org.springframework.orm.hibernate3.HibernateTemplate.execute(HibernateTemplate.java:366) at org.springframework.orm.hibernate3.HibernateTemplate.saveOrUpdate(HibernateTemplate.java:687) at nl.getthere.famonline.dao.impl.hibernate.KlantDaoHibernateImpl.saveKlant(KlantDaoHibernateImpl.java:43) at nl.getthere.famonline.dao.KlantDaoTests.testSaveKlantWithEmailAdres(KlantDaoTests.java:65) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) at java.lang.reflect.Method.invoke(Unknown Source) at junit.framework.TestCase.runTest(TestCase.java:154) at junit.framework.TestCase.runBare(TestCase.java:127) at junit.framework.TestResult$1.protect(TestResult.java:106) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.framework.TestResult.run(TestResult.java:109) at junit.framework.TestCase.run(TestCase.java:118) at junit.framework.TestSuite.runTest(TestSuite.java:208) at junit.framework.TestSuite.run(TestSuite.java:203) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)   ---  **Affects:** 1.2.6","closed","type: enhancement,","spring-projects-issues","2006-02-13T20:32:38Z","2012-06-19T03:54:25Z"
"","6304","Spring does not support setting multiple event listeners with Hibernate 3.1 [SPR-1607]","**[Pekka Enberg](https://jira.spring.io/secure/ViewProfile.jspa?name=penberg)** opened **[SPR-1607](https://jira.spring.io/browse/SPR-1607?redirect=false)** and commented  With Hibernate 3.1, you can set multiple event listeners per type but Spring 2.0 M1 does not support that. Please see the following Hibernate Javadoc: http://www.hibernate.org/hib_docs/v3/api/org/hibernate/cfg/Configuration.html#setListeners(java.lang.String,%20java.lang.Object[])  ---  **Affects:** 2.0 M1  **Issue Links:** - #6440 Improve Hibernate3 LocalSessionFactoryBean support for event listeners (_**""is duplicated by""**_)","closed","type: enhancement,","spring-projects-issues","2006-01-10T18:30:43Z","2019-01-11T21:22:43Z"
"","6300","An afterBegin() callback for transactions [SPR-1603]","**[Pekka Enberg](https://jira.spring.io/secure/ViewProfile.jspa?name=penberg)** opened **[SPR-1603](https://jira.spring.io/browse/SPR-1603?redirect=false)** and commented  Spring transaction callbacks are missing a mechanism to track transaction begin. The feature is useful for implementing delayed event delivery for Hibernate Event API. For example, we want to only deliver create and update events that are actually committed.  We are currently using a pre and post transaction interceptor to track transaction boundaries to implement afterBegin() callback.  public class TransactionInterceptorInvocationCountHolder { private static ThreadLocal\ invocationCount = new ThreadLocal\() { protected AtomicInteger initialValue() { return new AtomicInteger(0); } };      public static AtomicInteger getInvocationCount() {         return invocationCount.get();     }  }  public class PreTransactionInterceptor implements MethodInterceptor { public Object invoke(MethodInvocation methodInvocation) throws Throwable { try { return methodInvocation.proceed(); } finally { TransactionInterceptorInvocationCountHolder.getInvocationCount().decrementAndGet(); } } }  public class PostTransactionInterceptor implements MethodInterceptor { public Object invoke(MethodInvocation methodInvocation) throws Throwable { /* * If a managed object invokes a method of another managed object, we * will re-enter this interceptor. As we want to register the * transaction synchronization only at the beginning of a transaction, * we keep a per-thread invocation counter to ensure that.   */   if (TransactionInterceptorInvocationCountHolder.getInvocationCount().getAndIncrement() == 0) {   listener.afterBegin();   TransactionSynchronizationManager.registerSynchronization(transactionEventListenerAdapter);   }   return methodInvocation.proceed();   }   }    --- No further details from [SPR-1603](https://jira.spring.io/browse/SPR-1603?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-01-10T00:22:58Z","2012-06-19T09:37:31Z"
"","6009","AbstractPdfView - no chance for call PdfPageEvent.onOpenDocument [SPR-1308]","**[Paweł Rozynek](https://jira.spring.io/secure/ViewProfile.jspa?name=prozz)** opened **[SPR-1308](https://jira.spring.io/browse/SPR-1308?redirect=false)** and commented  There is a bug in AbstractPdfView class. There is no possibility to register onOpenDocument event (PdfPageEvent method) on a writer (PdfWriter). Can't do this in buildPdfMetadata, because I don't have a writer. Can do this in buildPdfDocument, because document is already opened and my event will not trigger.   --- No further details from [SPR-1308](https://jira.spring.io/browse/SPR-1308?redirect=false)","closed","type: bug,","spring-projects-issues","2005-09-19T00:45:30Z","2012-06-19T03:54:08Z"
"","6464","XmlBeanDefinitionParserHelper declarations of xml element names are private but should be public [SPR-1766]","**[Pavel Vojtěchovský](https://jira.spring.io/secure/ViewProfile.jspa?name=pvojtechovsky)** opened **[SPR-1766](https://jira.spring.io/browse/SPR-1766?redirect=false)** and commented  E.g. member XmlBeanDefinitionParserHelper.ID_ATTRIBUTE is private, but when writing custom XML reader, there would be good to use same name declarations like Spring library, so ALL these (private static final String Xxxx=""xxx"";) members should be public (like in spring 1.2.7 DefaultXmlBeanDefinitionParser.ID_ATTRIBUTE)   ---  **Affects:** 2.0 M2","closed","type: enhancement,","spring-projects-issues","2006-03-06T19:43:00Z","2012-06-19T03:53:58Z"
"","6462","private BeanWrapperImpl methods might be protected [SPR-1764]","**[Pavel Vojtěchovský](https://jira.spring.io/secure/ViewProfile.jspa?name=pvojtechovsky)** opened **[SPR-1764](https://jira.spring.io/browse/SPR-1764?redirect=false)** and commented  if subclass of BeanWrapperImpl wants to provide standard access (e.g. to use binding) to specific structures (e.g. list of binary relation instances), than there would be very helpful: 1. if private methods of BeanWrapperImpl and also PropertyTokenHolder would be protected. 2. if there would be possible to access (get/set) value of not only kind of Array,List,Set,Map, but also any custom type  The attached file contains patched version of BeanWrapperImpl from Spring version 1.2.7, where are both points implemented.  It can be of course workarounded by own implementation of BeanWrapper interface, ... but why to implement it again when all necessary and nice code is already in BeanWrapperImpl? ...  but private :-(   ---  **Affects:** 1.2.7  **Attachments:** - [BeanWrapperImpl.patch](https://jira.spring.io/secure/attachment/11481/BeanWrapperImpl.patch) (_14.46 kB_) - [Patched_BeanWrapperImpl.java](https://jira.spring.io/secure/attachment/11480/Patched_BeanWrapperImpl.java) (_37.43 kB_)","closed","type: enhancement,","spring-projects-issues","2006-03-06T01:30:26Z","2008-10-28T09:12:46Z"
"","6386","org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor does not handle Axis failures gracefully [SPR-1688]","**[Pavel Tcholakov](https://jira.spring.io/secure/ViewProfile.jspa?name=pcholakov)** opened **[SPR-1688](https://jira.spring.io/browse/SPR-1688?redirect=false)** and commented  It is possible (e.g. due to temporary network failure, etc.) for the Axis port to become unavailable. In this case, the standard Spring class does not handle reconnections. I wrote a custom TargetSource which allows for new JaxRpcPortClientInterceptor's to be created on the fly as needed.  Please see this thread which has links to code & XML samples:  http://forum.springframework.org/showthread.php?t=22112   ---  **Affects:** 1.2.6  **Attachments:** - [JaxRpcPortTargetSource.java](https://jira.spring.io/secure/attachment/11600/JaxRpcPortTargetSource.java) (_5.81 kB_)  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2006-02-08T05:41:14Z","2012-06-19T03:54:01Z"
"","6453","Code triggers invalidFormSubmit when post same request from different windows [SPR-1756]","**[Paul Taylor](https://jira.spring.io/secure/ViewProfile.jspa?name=paultaylor)** opened **[SPR-1756](https://jira.spring.io/browse/SPR-1756?redirect=false)** and commented  We have overridden handleInvalidSubmit() to prevent the same form being submitted twice if the user presses a button twice in quick succession. However if we start our application Open a IE/Firefox WebBrowser Session Navigate to Edit Page Open a new Window (with CNTL-N) Navigate to same Edit Page Submit form on Edit Page Submit form on second Edit Page It triggers the handleInvalidFormSubmit()  I dont think this should occur because the two submissions are for two seperate instances of the same page (albeit for the same user and session)   ---  **Affects:** 1.2.7","closed","status: declined,","spring-projects-issues","2006-03-03T01:42:17Z","2019-01-12T16:29:33Z"
"","6807","All options are selected when using form:options.  Bug in SelectedValueComparator [SPR-2116]","**[Paul Mestrum](https://jira.spring.io/secure/ViewProfile.jspa?name=pmestrum)** opened **[SPR-2116](https://jira.spring.io/browse/SPR-2116?redirect=false)** and commented  When using the form:options-tag, every option has the selected=""true""-attribute.  This is due to a bug on line 164 of SelectedValueComparator:  164:     return ObjectUtils.nullSafeEquals(candidateAsString, propertyEditor.getAsText());  Should be:      return ObjectUtils.nullSafeEquals(originalAsString, propertyEditor.getAsText());  where originalAsString = propertyEditor.getAsText() before setting the candidateAsString as text in propertyEditor.  Full extract:  155:   originalValue = propertyEditor.getValue(); 156:   originalAsString = propertyEditor.getAsText();                                                                       // NEW ... 165:     return ObjectUtils.nullSafeEquals(originalAsString, propertyEditor.getAsText());       // ALTERED    ---  **Affects:** 2.0 M5","closed","type: bug,","spring-projects-issues","2006-06-08T01:56:57Z","2012-06-19T03:52:27Z"
"","6090","Add facility for subclasses of AbstractXslrView to specify OutputProperties for the transformer. [SPR-1390]","**[Paul Brooks](https://jira.spring.io/secure/ViewProfile.jspa?name=seru)** opened **[SPR-1390](https://jira.spring.io/browse/SPR-1390?redirect=false)** and commented  Would it be possible to add functionality to AbstractXsltView so that we can set OutputKeys against the transformer.  We need to escape some preformatted text in a CDATA section and can only do this at the moment by overriding the lowest doTransform method.  This functionality would be almost identical to the 'getParameters' functionality currently provided.  Perhaps a method which also returns a Map called 'getOutputProperties'?  Thanks  Paul   --- No further details from [SPR-1390](https://jira.spring.io/browse/SPR-1390?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-10-18T03:48:01Z","2012-06-19T03:54:06Z"
"","6818","Erring reference to DependencyInjectionInterceptorFactoryBean [SPR-2127]","**[Paul Benedict](https://jira.spring.io/secure/ViewProfile.jspa?name=paul4christ79)** opened **[SPR-2127](https://jira.spring.io/browse/SPR-2127?redirect=false)** and commented  Section 7.7.1. reads in the second paragraph:  ""Spring provides the DependencyInjectionInterceptorFactoryBean  in the org.springframework.orm.hibernate.support package.""  However there is no such class. I checked jars and source.   ---  **Affects:** 2.0 M5","closed","type: bug,","spring-projects-issues","2006-06-12T04:04:09Z","2012-06-19T03:52:33Z"
"","6416","PropertyPlaceholderConfigurer behaves differently in 2.0M2 than in 1.2.6.  Some properties are not replaced. [SPR-1719]","**[Patrick Ryan](https://jira.spring.io/secure/ViewProfile.jspa?name=youngsoul)** opened **[SPR-1719](https://jira.spring.io/browse/SPR-1719?redirect=false)** and commented  I described this in the forum at:  http://forum.springframework.org/showthread.php?t=22377  I have recently tried the 2.0 M2 Spring.jar and immediately found that what was working for PropertyPlaceholderConfigurer is suddenly not working in 2.0.  I have a bean with a property like: \\${queue.routerQueue}\\  and a property file like: queue.routerQueue=routerQueue1  but what is set in the bean, is ${queue.routerQueue} and not the substituted value. I am pretty certain that the PropertyPlaceholderConfigurer bean is able to read the value - I have set breakpoints and extended the class to provide JMX viewing of the properties and they are correct.  However, when I set a breakpoint at the 'setReadQueueName' method, the value passed in is ${queue.routerQueue}.  I have many, many properties set in my config files, and some get replaced and others do not. I cannot actually track down a pattern just yet.  Even though some properties get replaced and some dont, it is very consistent when it decides not to replace a property.  That property is never replaced, but I dont know why it decides to replace some but not others.  I would be happy to provide files and I will also look into this more over the weekend.  ---  **Affects:** 2.0 M2  **Attachments:** - [propertyplaceholdertestcase.zip](https://jira.spring.io/secure/attachment/11468/propertyplaceholdertestcase.zip) (_1.61 kB_)  **Issue Links:** - #6415 External properties setting fail with abstract beans (_**""duplicates""**_)  1 votes, 1 watchers","closed","in: core,","spring-projects-issues","2006-02-16T00:50:17Z","2019-01-11T22:07:58Z"
"","5933","JMS Invoker [SPR-1231]","**[Patrick Peralta](https://jira.spring.io/secure/ViewProfile.jspa?name=pperalta)** opened **[SPR-1231](https://jira.spring.io/browse/SPR-1231?redirect=false)** and commented  I have implemented a JMS Invoker that can be used for Spring remote invocations.  As I prepared to submit it to the Spring developers for consideration to have it integrated with the framework, I notice that there is already an implementation in the sandbox!  I guess I should have looked there first before writing my own.  Anyway, I am submitting my implementation as is in the hope that we can compare the two implementations to see if perhaps we can take the best ideas from both in order to include this in the core distribution someday.  (Or perhaps just discard mine altogether if it is vastly inferior :)  The high level difference between the two is that my implementation tends to do things more manually (such as using JmsTemplate and Destination directly) whereas the sandbox implementation uses QueueRequestor.  Both implementations use the great remoting abstraction that is provided by Spring.  One major difference between the two is the type of Message that is sent.  At first I tried to use ObjectMessage like the sandbox implementation.  However, when I tried to invoke a method that uses long as a parameter, I get:  org.springframework.jms.MessageFormatException: Deserialization failed: No ClassLoaders found for: long; nested exception is javax.jms.MessageFormat Exception: Deserialization failed: No ClassLoaders found for: long; nested exception is javax.jms.MessageFormatException: Deserialization failed: No ClassLoaders found for: long javax.jms.MessageFormatException: Deserialization failed: No ClassLoaders found for: long at com.tibco.tibjms.TibjmsObjectMessage.getObject(TibjmsObjectMessage.java:199) at ets.common.jmsinvoker.JmsInvokerServiceExporter$1.doInJms(JmsInvokerServiceExporter.java:72) at org.springframework.jms.core.JmsTemplate.execute(JmsTemplate.java:582) at org.springframework.jms.core.JmsTemplate.execute(JmsTemplate.java:594)  So it looks like Tibco has issues with serialization and primitives.  Therefore, I decided to use BytesMessage and serialize the objects to a byte array myself.  If we decide to go this route, perhaps we can provide hooks for end users to perform custom serialization (to provide compression and encryption for instance).  Another feature that I added is the ability to process a message before it is sent by the client invoker and again before it is processed by the server invoker.  This provides the ability to add JMS header data to pass authentication information (which can then be populated in an Acegi thread local) and any other metadata required.  I noticed that the sandbox implementation uses temporary queues to reply to clients.  Does this have any effect on performance?  In my implementation, request and response queues are required, but I am open to using temporary queues if the performance hit is negligible.  In the interest of full disclosure, I am a total noob at JMS so please let me know if I'm doing anything crazy.  Based on your feedback, I would be happy to merge the changes with the sandbox implementation (if any are suggested) and submit a patch.  Thanks for your help (and for a great framework)!  Patrick   ---  **Attachments:** - [jmsinvoker.zip](https://jira.spring.io/secure/attachment/11072/jmsinvoker.zip) (_4.10 kB_)","closed","type: enhancement,","spring-projects-issues","2005-08-15T12:48:14Z","2012-06-19T03:54:40Z"
"","6657","SimpleJdbcDaoSupport.getSimpleJdbcTemplate() returns null [SPR-1964]","**[Patrick Dumontel](https://jira.spring.io/secure/ViewProfile.jspa?name=codagtr)** opened **[SPR-1964](https://jira.spring.io/browse/SPR-1964?redirect=false)** and commented  I have a standalone class that extends SimpleJdbcDaoSupport so that I can do a quick import of test data into the database: public class Migrator extends JdbcDaoSupport { .. public static void main(String[] args) { Migrator m = new Migrator(); DriverManagerDataSource ds = new DriverManagerDataSource([connection url, user, etc. go here]); m.setDataSource(ds); m.migrate; }  private void migrate() { SimpleJdbcTemplate jt = getSimpleJdbcTemplate(); jt.update([some sql here]); }  Using a debugger, I saw that the simpleJdbcTemplate is null, although the jdbcTemplate that should be wrapped is fine.  I worked around this by calling m.afterPropertiesSet().  Could it be that SimpleJdbcDaoSupport only creates the simpleJdbcTemplate if used within an application context?  This did not happen in M3, in fact the SimpleJdbcTemplate's source is quite different.  This method was in M3 but removed in M4:  protected JdbcTemplate createJdbcTemplate(DataSource dataSource) { JdbcTemplate jt = new JdbcTemplate(dataSource); this.simpleJdbcTemplate = new SimpleJdbcTemplate(jt); return jt; }  M4 instead has:  protected void checkDaoConfig() { super.checkDaoConfig(); this.simpleJdbcTemplate = new SimpleJdbcTemplate(getJdbcTemplate()); } which apparently doesn't get called in a standalone instantiation.   ---  **Affects:** 2.0 M4","closed","type: bug,","spring-projects-issues","2006-04-27T08:25:55Z","2012-06-19T03:52:46Z"
"","5967","JRDefaultCompiler constructor no longer public in Jasper Reports 1.0.1 [SPR-1265]","**[Patrick Dumontel](https://jira.spring.io/secure/ViewProfile.jspa?name=codagtr)** opened **[SPR-1265](https://jira.spring.io/browse/SPR-1265?redirect=false)** and commented  The AbstractJasperReportsView's reportCompiler initialization on line 172 reads:      private JRCompiler reportCompiler = new JRDefaultCompiler();  However, in JasperReports 1.0.1, the constructor is no longer public.  There is a public getInstance() method, so changing to:  private JRCompiler reportCompiler = JRDefaultCompiler.getInstance();  should fix.   ---  **Affects:** 1.2.3","closed","type: bug,","spring-projects-issues","2005-08-30T01:30:46Z","2012-06-19T03:54:10Z"
"","5948","Add exporter parameter map to JasperReportUtils various export methods [SPR-1246]","**[Patrick Burleson](https://jira.spring.io/secure/ViewProfile.jspa?name=pburleson)** opened **[SPR-1246](https://jira.spring.io/browse/SPR-1246?redirect=false)** and commented  We have the need to render reports in various formats, such as HTML and XLS and PDF, and find the JasperReportsUtils class very valuable for this.  We have run into a small problem that the attached patch should fix. we need to specify various parameters to the Exporter, particularly things like image location for the HTML Exporter, but have no facility to do this with the current JasperReportsUtils. I see that the various Jasper based views handle this, but we don't use Jasper in that way. Users come back later to pickup their reports, as they may be long running. So we render them with the JasperReportsUtils class and store the result.  I've added new overloaded methods for CSV, HTML, PDF and the XLS exporters that take a map that should contain parameters for the exporter. I've updated the original methods to call this one supplying an empty HashMap.  All tests pass at this point. I haven't gotten so far as to write tests to make the export parameters are used.   ---  **Affects:** 1.2.4  **Attachments:** - [JasperReportsUtil.patch](https://jira.spring.io/secure/attachment/11095/JasperReportsUtil.patch) (_7.11 kB_)","closed","type: enhancement,","spring-projects-issues","2005-08-22T04:19:33Z","2019-01-11T19:22:40Z"
"","5882","[struts integration] Volonteering to add support for form struts beans declaration in spring [SPR-1180]","**[pascal gehl](https://jira.spring.io/secure/ViewProfile.jspa?name=paskos)** opened **[SPR-1180](https://jira.spring.io/browse/SPR-1180?redirect=false)** and commented  Hi,  I would like to volonteer to add the feature of getting form beans from spring context in spring struts request processor.  It would be something like :  Struts-config :  \  applicationContext :  \  What do you think ?  Pascal Gehl   ---  **Affects:** 2.0 M1","closed","type: enhancement,","spring-projects-issues","2005-07-28T02:56:10Z","2012-06-19T09:37:42Z"
"","6053","SimpleFormController should not consider every POST as form submission [SPR-1353]","**[Ovidiu Guse](https://jira.spring.io/secure/ViewProfile.jspa?name=ovi)** opened **[SPR-1353](https://jira.spring.io/browse/SPR-1353?redirect=false)** and commented  Greetings,  This is my second post on this issue but from a different context now. My first post on this, was a bug, but a strange thing happened: was turned into an ""Inprovement request"" (please see http://opensource2.atlassian.com/projects/spring/browse/SPR-1346 ). I truly believe this is a serious issue related to this controller, and should be considered such.  Unfortunatelly, I just came under a similar situation, but on a different context:  I'm working on a web application using Spring and Spring MVC. I've implemented a ""welcome"" controller, which is executed each time a user is accessing the website, or through various invocations from the application itself. One of the things this controller is supposed to do, is to verify if there's a current user logged in, by investigating the session after a special bean.  Now, if the bean is not found (e.g. no user is logged in) the controller forwards to a login controller, which unfortunatelly is a SimpleFormController instance.  The login controller is suposed to ""display"" the login form in the first step, and once the user submits the form to validate the login credentials and update the session bean accordingly. Last step performed by the login controller is to forward the control to the same ""welcome"" controller, which will decide based on the logged account, the current view which should be displayed in browser.  All works perfectly, if the user introduces correct credentials in the login form. Also works as expected if the user introduces partial information in the login form, meaning, the login information is validated and the user is prompted with the fields he missed.  But if the user introduces all information, but not for a correct account will begin the problems: the login controller detect's that the credentials provided does not define a valid account. Will forward the control to the ""welcome"" controller. This one too detects that there is no valid account logged in and will forward back to the login controller.  Unfortunatelly, the login controller does not override the request method (POST - from the invalid login) for the forward he is making, thus this is preserved and when the welcome controller is forwarding back, instead of displaying the login form, detects the previous method type and act's like the login form was allready submitted.  All this will result in an infinite cycle which is crashing the Tomcat.  Thank you.   --- No further details from [SPR-1353](https://jira.spring.io/browse/SPR-1353?redirect=false)","closed","status: declined,","spring-projects-issues","2005-10-05T23:32:25Z","2019-01-12T16:30:01Z"
"","6046","SimpleFormController should not consider every POST as form submission [SPR-1346]","**[Ovidiu Guse](https://jira.spring.io/secure/ViewProfile.jspa?name=ovi)** opened **[SPR-1346](https://jira.spring.io/browse/SPR-1346?redirect=false)** and commented  I have a page, containing a form used to display alot of informations to the user.  There is also a set of actions (html buttons), used to dinamically change the 'action' field of the form to point to different URL's, depending on the action needed to be executed, and submit the form (through JavaScript).  The actions are different and cannot be solved under the umbrella of a single controller. For some reasons, (i.e. one action will send alot of information to a controller, which outbounds the size of a normal GET request) the form method is POST.  One of my actions is supposed to edit an entity  displayed inside this form. This means will submit the form to it's own mapped url (destination controller) and send  through POST method the entity ID.  The destination controller (SimpleFormController) is supposed to lookup the entity on the curent session/load from database/create an empty one, use'it as form backing object and display an edit form.  Here the problem is raising. Since the form method is POST, the SimpleFormController is tricked by this, and all the time will ""skip"" showing the edit form. Instead will jump directly to the success view.  I looked in the sourcecode of the AbstractFormController class and the test to detect is there's a submit looks like this:      protected boolean isFormSubmission(HttpServletRequest request) {     	return ""POST"".equals(request.getMethod());     }  This means the form controller does not actually interpret the source form which has actually produced the submit event and is getting tricked if the user is calling the controller through a different form with POST method. I believe this is a major flow in this type of controller.  Thank you, Ovidiu Guse.  P.S.: By mistake, I allready submitted this issue under a different section. The developer there has allready closed the bug and give me a simple solution to this problem: override the 'isFormSubmission' method. Of course I can do that, and I will (temporary) but I believe this is not the desired resolution to the problem.  Instead, the simplest way to implement is to detect and compare the source url of the request, against the controller's own mapped url.   --- No further details from [SPR-1346](https://jira.spring.io/browse/SPR-1346?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-10-04T07:01:43Z","2005-10-26T07:47:40Z"
"","5988","cannot be resolved to absolute file path because it does not reside in the file system: Weblogic  [SPR-1287]","**[Omkaram S](https://jira.spring.io/secure/ViewProfile.jspa?name=omkarams)** opened **[SPR-1287](https://jira.spring.io/browse/SPR-1287?redirect=false)** and commented  Hi All ,  I am using spring in EJBs and we are deploying the application on weblogic server on windows 2k os. The application context is placed in the jar file and the jar is in ear. When the ejb is loaded (onEjbCreate method) we are getting ""cannot be resolved to absolute file path because it does not reside in the file system"" error.  We deployed the same ear on jboss, there are no problems in loading the application context. The problem is only with weblogic. We are using beanRefContext.xml to define the application context.  We are using ContextSingletonBeanFactoryLocator as BeanFactoryLocator. Application context is ClassPathXmlApplicationContext.  Contents of beanRefContext.xml :  \ \ \  \  \  \classpath*:spring/applicationContext*.xml\  \  \  \  java.io.FileNotFoundException: URL [zip:D:/ZilliantWorkspace/userbranches/virtusa-zpm5.3/main/engine/work/_shared/weblogic/config/ut/applications/.wlnotdelete/wlap58889/zpm_engine.jar!/spring] cannot be resolved to absolute file path because it does not reside in the file system: zip:D:/ZilliantWorkspace/userbranches/virtusa-zpm5.3/main/engine/work/_shared/weblogic/config/ut/applications/.wlnotdelete/wlap58889/zpm_engine.jar!/spring at org.springframework.util.ResourceUtils.getFile(ResourceUtils.java:172) at org.springframework.core.io.UrlResource.getFile(UrlResource.java:6 at org.springframework.core.io.support.PathMatchingResourcePatternResolver.doFindPathMatchingFileResources(PathMatchingResourcePatternResolver.java:343) at org.springframework.core.io.support.PathMatchingResourcePatternResolver.findPathMatchingResources(PathMatchingResourcePatternResolver.java:255) at org.springframework.core.io.support.PathMatchingResourcePatternResolver.getResources(PathMatchingResourcePatternResolver.java:187) at org.springframework.context.support.AbstractApplicationContext.getResources(AbstractApplicationContext.java:661) at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:103) at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:71) at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:87) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:262) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:80) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:65) at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39) at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27) at java.lang.reflect.Constructor.newInstance(Constructor.java:274) at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:100) at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:75) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:579) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:322) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:226) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:147) at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:536) at org.springframework.beans.factory.access.SingletonBeanFactoryLocator.useBeanFactory(SingletonBeanFactoryLocator.java:399) at org.springframework.ejb.support.AbstractEnterpriseBean.loadBeanFactory(AbstractEnterpriseBean.java:117) at org.springframework.ejb.support.AbstractStatelessSessionBean.ejbCreate(AbstractStatelessSessionBean.java:63)  Thanks a lot, Omkar   ---  **Affects:** 1.2.2  **Attachments:** - [PathMatchingResourcePatternResolver.java](https://jira.spring.io/secure/attachment/11143/PathMatchingResourcePatternResolver.java) (_18.22 kB_)","closed","type: bug,","spring-projects-issues","2005-09-06T00:35:38Z","2019-09-28T11:38:11Z"
"","6407","Simple improvements to spring jsp 1.2 form tags [SPR-1710]","**[Omar Irbouh](https://jira.spring.io/secure/ViewProfile.jspa?name=irbouho)** opened **[SPR-1710](https://jira.spring.io/browse/SPR-1710?redirect=false)** and commented  Hi :)  I was reading Spring JSP 1.2 form tags committed recently by Rob. They look absolutely promising. I have some small improvements that I think would be very helpfull:  - FormTag:   * Add a name attribute, this is very handfull for javascript   * Add a focus attribute (less important) - InputTag:   * Add a size attribute - PasswordTag:   * Add a redisplay attribute - ErrorsTag:   * Add support for ErrorsPrefix, ErrorsSuffix, ErrorPefix, ErrorSuffix (a la struts:) values may be looked for in messages.properties - All tags:   * makes it possible to override current tags without having to ""rewrite"" everything in the writeTagContent method (less important)  regards, Omar Irbouh. http;//www.jroller.com/page/jroller   ---  **Affects:** 2.0 M3  2 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2006-02-14T11:53:18Z","2012-06-19T03:54:09Z"
"","6710","OptionTag doesn't ""reselect"" the selected list item [SPR-2017]","**[Oliver Siegmar](https://jira.spring.io/secure/ViewProfile.jspa?name=ojs)** opened **[SPR-2017](https://jira.spring.io/browse/SPR-2017?redirect=false)** and commented  The following HTML snippets (""old-style"" and ""new-style"") should output the same HTML before and after submitting the form:  ""old-style"":  \ \ \ \\ \ \\\ \ \ \ \  ""new-style"":        My problem is, that the ""new-style"" doesn't work. The roles get displayed correctly and the controller received the correctly mapped role, but if the form gets redisplayed (e.g. because of validation errors), the ""new-style"" doesn't reselect the sent role.  ${roles} is a Set of JavaBeans  Bug or my fault?   ---  **Affects:** 2.0 M4  **Attachments:** - [value_compare.patch](https://jira.spring.io/secure/attachment/11641/value_compare.patch) (_1.12 kB_)","closed","type: bug,","spring-projects-issues","2006-05-15T02:25:24Z","2012-06-19T03:52:47Z"
"","6709","Tiny improvement for OptionTag - avoid double output for values [SPR-2016]","**[Oliver Siegmar](https://jira.spring.io/secure/ViewProfile.jspa?name=ojs)** opened **[SPR-2016](https://jira.spring.io/browse/SPR-2016?redirect=false)** and commented  The value attribute can be ommited if the content has the same value -  \foo\  can be written as  \foo\   ---  **Affects:** 2.0 M4  **Attachments:** - [no_double_value.patch](https://jira.spring.io/secure/attachment/11640/no_double_value.patch) (_1.91 kB_)","closed","type: enhancement,","spring-projects-issues","2006-05-15T02:15:32Z","2012-06-19T03:52:44Z"
"","6708","action parameter for spring-form taglib should be mandatory or a reasonable default should be written to output [SPR-2015]","**[Oliver Siegmar](https://jira.spring.io/secure/ViewProfile.jspa?name=ojs)** opened **[SPR-2015](https://jira.spring.io/browse/SPR-2015?redirect=false)** and commented  The form tag of the spring-form taglib generates invalid HTML output. The action parameter _IS_ required, so spring should output a reasonable default (the same URI) or declare the action parameter mandatory. I know that it is a common practice to omit this parameter in HTML, but this is not spec conform.   ---  **Affects:** 2.0 M4  1 votes, 1 watchers","closed","type: bug,","spring-projects-issues","2006-05-15T01:59:23Z","2012-06-19T03:52:34Z"
"","6707","XHTML compliance for RadtioButtonTag, CheckboxTag and OptionTag [SPR-2014]","**[Oliver Siegmar](https://jira.spring.io/secure/ViewProfile.jspa?name=ojs)** opened **[SPR-2014](https://jira.spring.io/browse/SPR-2014?redirect=false)** and commented  The XHTML attribute values for checked and selected are 'checked' and 'selected' not 'true'. The implementation in RadtioButtonTag, CheckboxTag and OptionTag is wrong.   ---  **Affects:** 2.0 M4  **Attachments:** - [xhtml_selected_checked.patch](https://jira.spring.io/secure/attachment/11639/xhtml_selected_checked.patch) (_3.76 kB_)  1 votes, 1 watchers","closed","type: bug,","spring-projects-issues","2006-05-15T01:50:15Z","2012-06-19T03:52:38Z"
"","6706","Wrong HTML hidden input field attribute in CheckboxTag.java [SPR-2013]","**[Oliver Siegmar](https://jira.spring.io/secure/ViewProfile.jspa?name=ojs)** opened **[SPR-2013](https://jira.spring.io/browse/SPR-2013?redirect=false)** and commented  CheckboxTag generates invalid HTML - the hidden input field has no attribute 'boundValue' but 'value'. The documentation contains the same mistake. I'll attach a patch...   ---  **Affects:** 2.0 M4  **Attachments:** - [boundvalue.patch](https://jira.spring.io/secure/attachment/11637/boundvalue.patch) (_2.16 kB_)","closed","type: bug,","spring-projects-issues","2006-05-15T00:47:00Z","2012-06-19T03:52:34Z"
"","6662","Multiple instances of the same form - AbstractFormController and getFormSessionAttributeName [SPR-1969]","**[Oliver Siegmar](https://jira.spring.io/secure/ViewProfile.jspa?name=ojs)** opened **[SPR-1969](https://jira.spring.io/browse/SPR-1969?redirect=false)** and commented  The AbstractFormController provides an easy way to define a custom formSessionAttributeName. Unfortunately there's no way to get that name in a view (without a ton of custom code).  The thing is, users often want to open several different datasets (for e.g. search-results) in tabs or new browser windows. If the formSessionAttributeName is the same for all opened results of the same form (which is the default), the session object only contains the last opened dataset. If the datasets get modified, wrong objects get updated. Ways to solve this problems are a) don't use sessionForms or b) use a custom formSessionAttributeName for each invocation. The edit-form could send a hidden-field containing this custom formSessionAttributeName to identify the (now unique) form. AbstractFormController could generate random names (optionally, of course) and write those names to the page scope, so that the view can add it to a hidden field. In the other direction, the AbstractFormController could map the right session, by looking for the sessionAttributeName of the sent hidden-field.  What do you think about the concept? I could develop the improvement and supply a patch if wanted.  ---  **Affects:** 1.2.7, 2.0 M4  **Issue Links:** - #8082 Doc: Possible data corruption during multiple tabs and sessionform  3 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2006-04-29T05:31:07Z","2019-01-11T22:21:07Z"
"","6427","Validators should have access to HttpServletRequest [SPR-1730]","**[Oliver Siegmar](https://jira.spring.io/secure/ViewProfile.jspa?name=ojs)** opened **[SPR-1730](https://jira.spring.io/browse/SPR-1730?redirect=false)** and commented  Sometimes it is required to access HttpServletRequest when validating user input (conditional validation based on different submit buttons for e.g.) . Unfortunately the only way to access HttpServletRequest for validation is to override onBindAndValidate() of BaseCommandController or to put additional data to the command object. The latter is not an option if the command objects == business objects.  Overriding onBindAndValidate() spreads the validation code over several classes which makes harder to find validation problems an mess up your code.  So it would be really convenient to have a way to access all request parameters without mapping everything to the command object or use onBindAndValidate() of BaseCommandController.   --- No further details from [SPR-1730](https://jira.spring.io/browse/SPR-1730?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-02-19T02:56:23Z","2012-06-19T09:37:31Z"
"","6263","$status.displayValue doesn't get HTML-Escaped [SPR-1565]","**[Oliver Siegmar](https://jira.spring.io/secure/ViewProfile.jspa?name=ojs)** opened **[SPR-1565](https://jira.spring.io/browse/SPR-1565?redirect=false)** and commented  There is really a need for some clarification about the use of $status.value and $status.displayValue. There are several inconsistent examples about the usage of those two variables in the Book 'Professional Java Development with the Spring Framework'. On page 500 and 501 there is $status.displayValue used - on page 504 $status.value again - all three for outputting data in an html text field (these are only some examples found while writing this post).  As the API in  http://static.springframework.org/spring/docs/1.2.x/api/org/springframework/web/servlet/support/BindStatus.html#getDisplayValue()  says about displayValue - ""This value will be an HTML-escaped String if the original value was non-null: the toString result of the original value will get HTML-escaped."".  But this seems to be not true. I have to output it via , otherwise the whole output is unescaped.   ---  **Affects:** 1.2.6","closed","status: declined,","spring-projects-issues","2005-12-22T19:54:38Z","2019-01-12T16:29:44Z"
"","5912","Declarative custom editor setup doesn't work [SPR-1210]","**[Oliver Siegmar](https://jira.spring.io/secure/ViewProfile.jspa?name=ojs)** opened **[SPR-1210](https://jira.spring.io/browse/SPR-1210?redirect=false)** and commented  I'm trying to register a custom editor in a declarative way:  \ \ \ \ \ \ \ \ \  The Editor gets initialized but isn't used for wrapping my type. If I register the same editor in the initBinder() method of my controller, everything works fine.  I already tried to find a solution by asking in the forum (http://forum.springframework.org/viewtopic.php?t=7797) but had no luck.  Is it a bug?   ---  **Affects:** 1.2.2, 1.2.3","closed","in: core,","spring-projects-issues","2005-08-07T23:41:26Z","2019-01-11T19:21:18Z"
"","6008","CachingMapDecorator is not properly synchronized [SPR-1307]","**[Oliver Hutchison](https://jira.spring.io/secure/ViewProfile.jspa?name=oliverhutchison)** opened **[SPR-1307](https://jira.spring.io/browse/SPR-1307?redirect=false)** and commented  In CachingMapDecorator  the field targetMap is synchronized through the call to Collections.synchronizedMap(internalMap) in the constructor,  which would indicate to me that CachingMapDecorator is intended to be thread safe, however there is no synchronization on the method get which could result in duplicate calls to the create method for a given key.  So should the class a) be documented as being thread safe and have the get method synchronized as well or b) be documented as not thread safe and have the call to Collections.synchronizedMap(internalMap) removed from the constructor?  My guess is that a) would be the better option given that some people may already be using this class and assuming it is thread safe.    ---  **Affects:** 1.2.4","closed","in: core,","spring-projects-issues","2005-09-18T19:54:07Z","2019-01-12T16:30:05Z"
"","6054","Spring Support for Pluggable Session managment in Hibernate 3.1 [SPR-1354]","**[Oliver Geisser](https://jira.spring.io/secure/ViewProfile.jspa?name=ogeisser)** opened **[SPR-1354](https://jira.spring.io/browse/SPR-1354?redirect=false)** and commented  The Spring Reference Documentation currently explains how to use the plain Hibernate 3 API to implement DAOs (http://static.springframework.org/spring/docs/1.2.x/reference/orm.html#d0e7576). Until recently this does only work in JTA environments. The upcomming Hibernate 3.1 version will support Pluggable Session management (http://static.springframework.org/spring/docs/1.2.x/reference/orm.html#d0e7576) and will support out-of-the-box JTA and a Thread-Local session managment pattern. It would be great if Spring would provide it's own implementation for the Hibernate CurrentSessionContext Interface which integrates with the Spring session and transaction managment.   ---  1 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2005-10-06T01:06:47Z","2012-06-19T03:54:07Z"
"","6436","Make aspect related behaviour orthogonal to bean related behaviour [SPR-1739]","**[Oliver Albrecht](https://jira.spring.io/secure/ViewProfile.jspa?name=oliver.albrecht)** opened **[SPR-1739](https://jira.spring.io/browse/SPR-1739?redirect=false)** and commented  Problem description: With the current implementation (using AutoProxies) Spring's AOP behaviour is not orthogonal to its bean related behaviour. Three symptoms of this are:  1) When intercepting e.g. (`@After`) for all setters of my business classes the property initialization performed by Spring does not seem to trigger the advice. Adrian Coyler explained to me this is because ""...that it is still the same Spring-AOP Proxy-based implementation being used to do the weaving. Spring treats the assembly and configuration of the target object as something that happens before a proxy to the target is created."" This obviously means that one cannot use AOP to intercept method calls which occur for bean initialization, which in turn means extra cases/logic in application code.  2) When using the `@DeclareParent` advice, the ""defaultImpl"" class does not seem to be treated like other beans, i.e. if I try to apply an advice (e.g. `@After`) to the introduced interface's default implementation methods, these are not recognized. If I create an instance of these beans manually (AppCtx.getBean()) this however works. So to me it appears, that the proxy does not manage the introduced methods in the same way, as those of the unmodified implementation class. Adrian Coyler confirmed: ""...you're right that Spring treats the defaultImpl class as providing a default implementation for the interface methods, but does not proxy the default implementation itself.""  3) When using the `@DeclareParent` advice, the properties provided by the ""defaultImpl"" cannot be set through the bean declaration in the beans.xml file.  Probably there are more ""side effects"" and ""have-to-remember""s like these three. With the current situation, this means that the SAME `@AspectJ` code will behave different, depending whether SpringAOP or native AspectJ is used. Things that one would expect to work, do not. To me he current state appears to be worse than before (when Spring and AspectJ did not appear to be related). In fact I find the behaviour of `@AspectJ`/SpringAOP so confusing that I will not use this particular combination for the time being.  In short, IMVHO it violates the principle of the least suprise and is very ""un-Springish""!  Possible Solutions(?): Well, this is just an idea: I am not very firm in classloading magic, but to me it would appear sensible to apply AspectJ load time weaving (LTW) to ANY bean before allowing Spring to do it's other work. It would of course be nice to configure the LTW process from the bean declaration file (e.g. through some bean...)  If this was possible, modularity, flexibility and orthogonality would be preserved without the inclusion of an additional build step.    ---  **Affects:** 2.0 M2  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2006-02-22T22:04:38Z","2012-06-19T09:37:39Z"
"","6248","DelegatingRequestProcessor use the spring context loaded by ContextLoaderListener [SPR-1550]","**[Néstor de Jesus Boscán Bujanda](https://jira.spring.io/secure/ViewProfile.jspa?name=nestorjb)** opened **[SPR-1550](https://jira.spring.io/browse/SPR-1550?redirect=false)** and commented  The org.springframework.web.struts.DelegatingRequestProcessor class loads the spring context based on the /WEB-INF/action-servlet.xml or using the ""contextConfigLocation"" property. This method is not suitable if you have other web components like Servlets and Filters in your application.  The reason is that the spring context loaded with DelegatingRequestProcessor class is loaded AFTER all Servlet and Filter init method are called.  If the DelegatingRequestProcessor can use the spring context loaded by ContextLoaderListener then you can have ONE spring context suitable for Struts, Servlets and Filters.   ---  **Affects:** 1.2.6  **Attachments:** - [DelegatingActionUtils.java](https://jira.spring.io/secure/attachment/11350/DelegatingActionUtils.java) (_4.16 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-webflow/commit/cb86ac8f551e072287c400608424c8c32dc46f0d","closed","type: enhancement,","spring-projects-issues","2005-12-19T13:37:12Z","2012-06-19T03:53:55Z"
"","6475","FORM Tag library issues [SPR-1779]","**[Nuri](https://jira.spring.io/secure/ViewProfile.jspa?name=nuri)** opened **[SPR-1779](https://jira.spring.io/browse/SPR-1779?redirect=false)** and commented  The new FORM tags have acouple issues to be handled in my opinion:  - no getter methods for the fields like onchange so derived tags can access - TagWriter needs to be public not package private so derived tags can override the write writeTagContent - some fields are protected and others are private, should be consistent - HTML readonly and disabled attributes should be added to HtmlInput Tags - TagSupport.release methods should reset local fields  I think these will help improve the library. Nuri   ---  **Affects:** 2.0 M3","closed","type: bug,","spring-projects-issues","2006-03-10T01:26:56Z","2019-01-11T22:08:10Z"
"","6390","Create Spring implementation of Quartz's JobFactory so the DI is possible for Quartz Job's [SPR-1693]","**[Norm Deane](https://jira.spring.io/secure/ViewProfile.jspa?name=deanen)** opened **[SPR-1693](https://jira.spring.io/browse/SPR-1693?redirect=false)** and commented  Quartz introduced a JobFactory interface in 1.5.x. It would be nice to have a Spring context aware implementation that pulled Job instances from the Spring context. With that we could dependency-inject our Job classes.   ---  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2006-02-09T03:14:40Z","2012-06-19T03:53:56Z"
"","6148","Improved handling of exceptions thrown in Velocity pages [SPR-1448]","**[Noa Resare](https://jira.spring.io/secure/ViewProfile.jspa?name=noa)** opened **[SPR-1448](https://jira.spring.io/browse/SPR-1448?redirect=false)** and commented  velocity templates has the ability to call methods when rendered. Sometimes the results of such method invocations is an exception. These exceptions are propagated as org.apache.velocity.exception.MethodInvocationException instances through the call stack. There are two problems with the current out of the box behaviour:  1) Velocity aims to be jvm1.3 compatible, so the generic exception nesting mechanism in java1.4 is not used for the causing exception. Instead the method getWrappedThrowable() is used. This effectively makes the causing exception disappear from the stack trace in most cases.  2) The name of the View that was executing when the exception was thrown is not shown.  To solve this problem I have subclassed the VelocityView, adding this method that handles these two problems:      @Override     public void render(Map model, HttpServletRequest req,              HttpServletResponse resp)         throws Exception     {         try {             super.render(model, req, resp);         } catch (MethodInvocationException e) {             String s = String.format(                     ""MethodInvocationException when rendering view '%s': %s"",                     getBeanName(), e.getMessage());             throw new RuntimeException(s, e.getWrappedThrowable());         }     }  It hink it would be a valuable improvement if this functionality was incorporated in for example VelocityView.doRender()  Thanks for a  great product. After being stuck in ejb hell for too long, spring feels like heaven :)   ---  **Affects:** 1.2.5","closed","type: enhancement,","spring-projects-issues","2005-11-07T05:30:29Z","2012-06-19T03:54:39Z"
"","6070","SimpleUrlHandlerMapping returns 404 when requestURI equals contextPath [SPR-1370]","**[Noa Resare](https://jira.spring.io/secure/ViewProfile.jspa?name=noa)** opened **[SPR-1370](https://jira.spring.io/browse/SPR-1370?redirect=false)** and commented  I have a webapp configured for the path /redimo and a servlet-mapping in web.xml for the url-pattern '/*' to a DispatcherServlet I use a SimpleUrlHandlerMapping to map the path '/' to a controller.  This causes the controller to be invoked when i access http://localhost:8080/redimo/ When I invoke the same url without a trailing slash (http://localhost:8080/redimo) , I'll get a 404 'the requested resource not available' error from the DispatcherServlet. This is because the request methods getContextPath() and getRequestURI() returns the same string, so UrlPathHelper.getPathWithinApplication() returns """" which can per definition never match a controller since SimpleUrlHandlerMapping always contains at least '/'.  When you have your spring application configured as the ROOT webapp at least tomcat solves this problem by redirecting http://localhost:8080 to http://localhost:8080/   ---  **Affects:** 1.2.5","closed","type: bug,","spring-projects-issues","2005-10-11T19:31:23Z","2012-06-19T03:54:30Z"
"","6241","petclinic sample bug [SPR-1542]","**[Nils Doehring](https://jira.spring.io/secure/ViewProfile.jspa?name=ndoehring)** opened **[SPR-1542](https://jira.spring.io/browse/SPR-1542?redirect=false)** and commented  ownerForm.jsp will throw an Exception coming from this kind of statements:    org.springframework.samples.petclinic.Entity is missing this getter, but has a method      public boolean isNew() {     	return (this.id == null);     }  this should be called getNewEntity(). i don't know where or whether isNew() is used anywhere.   ---  **Affects:** 1.2.6","closed","","spring-projects-issues","2005-12-17T02:50:46Z","2019-01-11T21:34:18Z"
"","5921","JMX InstanceAlreadyExistsException when deploying same app twice [SPR-1219]","**[Nilesh Kapadia](https://jira.spring.io/secure/ViewProfile.jspa?name=nilesh)** opened **[SPR-1219](https://jira.spring.io/browse/SPR-1219?redirect=false)** and commented  I have an application that registers JMX beans using MBeanExporter. If I deploy this application twice I get org.springframework.beans.factory.BeanCreationException caused by javax.management.InstanceAlreadyExistsException because the MBeans are already registered under the given name, which causes the second app to fail to start. I have worked around this by making the name configurable at deploy time.  MBeanExporter could be improved by having a way to either recover from this (and not even bother to register the JMX beans), or to dynamically generate the names somehow to avoid a conflict?  In reference to this thread: http://forum.springframework.org/viewtopic.php?t=7783  Also I was able to workaround this issue by extending MBeanExporter and overriding registerBeans() to catch the exception (and continue so that deployment will succeed, even though JMX bean registration fails).  ---  **Affects:** 1.2.3  **Issue Links:** - #5918 MBeanExporter attempts to register duplicate MBeans causing javax.management.InstanceAlreadyExistsException (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2005-08-09T06:33:28Z","2019-01-11T19:21:12Z"
"","6875","JSF 1.2 and org.springframework.web.jsf.DelegatingVariableResolver  [SPR-2184]","**[Nicouleau Sebastien](https://jira.spring.io/secure/ViewProfile.jspa?name=sebo)** opened **[SPR-2184](https://jira.spring.io/browse/SPR-2184?redirect=false)** and commented  org.springframework.web.jsf.DelegatingVariableResolver not resolve spring beans ;-(   ---  **Affects:** 2.0 RC1","closed","in: web,","spring-projects-issues","2006-06-24T01:29:48Z","2019-01-11T18:01:40Z"
"","6632","add a schema for scripted beans configuration [SPR-1939]","**[nicolas de loof](https://jira.spring.io/secure/ViewProfile.jspa?name=ndeloof)** opened **[SPR-1939](https://jira.spring.io/browse/SPR-1939?redirect=false)** and commented  New Scripting support is cool , but requires a specific configuration : \                                 Spring 2 also add new configuration schema to cleanup context files. It would be great to configure a scripted-bean like this :                                      --- No further details from [SPR-1939](https://jira.spring.io/browse/SPR-1939?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-04-20T01:42:40Z","2012-06-19T03:18:56Z"
"","6629","support backport175 as an alternative to commons-attributes [SPR-1936]","**[nicolas de loof](https://jira.spring.io/secure/ViewProfile.jspa?name=ndeloof)** opened **[SPR-1936](https://jira.spring.io/browse/SPR-1936?redirect=false)** and commented  On Java 1.3/1.4, commons-attributes can be use to pre-java5 meta-data development.  commons-attributes uses a pre-compiler that creates new classes to collect annotations.  Backport175 (http://backport175.codehaus.org/Overview) uses bytecode enhancement to add annotations to java1.3/1.4 .class files. Those meta-data can the be read at runtime as java5-compliant annotation (on a java5+ JRE) or using a simple backport175 API on java1.3/1.4.  Using Spring Attributes abstraction, it sounds easy to support backport175. The only difficulty I can notice is that backport175 uses interfaces to define annotations, so it may require to duplicate any existing Spring attributes (commons-attributes attributes may implements backport interfaces for consitency).   --- No further details from [SPR-1936](https://jira.spring.io/browse/SPR-1936?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-04-19T20:39:35Z","2012-06-19T09:37:41Z"
"","6474","create an alternative to (java5) scheduling.concurent using backport_util_concurent [SPR-1778]","**[nicolas de loof](https://jira.spring.io/secure/ViewProfile.jspa?name=ndeloof)** opened **[SPR-1778](https://jira.spring.io/browse/SPR-1778?redirect=false)** and commented  o.s.scheduling.concurrent is a feature in Spring 2.0 that requires Java5, beacus it uses java.util.concurrent API.  For java 1.4 users, backport-util-concurrent (http://dcl.mathcs.emory.edu/util/backport-util-concurrent/index.php ) is a clean public-domain backport of java.util.concurrent.  It would be great to have a ""backport"" of o.s.scheduling.concurrent for java 1.4 users (like me). Only package refactor is required.   ---  **Affects:** 2.0 M3  **Attachments:** - [ConcurrentTaskExecutor.java](https://jira.spring.io/secure/attachment/11489/ConcurrentTaskExecutor.java) (_2.88 kB_) - [ScheduledExecutorFactoryBean.java](https://jira.spring.io/secure/attachment/11490/ScheduledExecutorFactoryBean.java) (_7.64 kB_) - [ScheduledExecutorTask.java](https://jira.spring.io/secure/attachment/11491/ScheduledExecutorTask.java) (_6.14 kB_) - [ThreadPoolTaskExecutor.java](https://jira.spring.io/secure/attachment/11492/ThreadPoolTaskExecutor.java) (_7.46 kB_)","closed","type: enhancement,","spring-projects-issues","2006-03-10T00:17:24Z","2012-06-19T03:54:22Z"
"","6313","MetadataMBeanInfoAssembler throws IllegalArgumentException on Tomcat 5.0.30 [SPR-1616]","**[nicolas de loof](https://jira.spring.io/secure/ViewProfile.jspa?name=ndeloof)** opened **[SPR-1616](https://jira.spring.io/browse/SPR-1616?redirect=false)** and commented  I'm using MetadataMBeanInfoAssembler with commons-attributes annotation to export my MBeans. I've migrated from tomcat 4.1 to 5.0.30 and now I've got this exception stack : java.lang.IllegalArgumentException: Invalid value '0' for field persistPeriod at javax.management.modelmbean.DescriptorSupport.checkField(DescriptorSupport.java:258) at javax.management.modelmbean.DescriptorSupport.setField(DescriptorSupport.java:82) at org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler.populateMBeanDescriptor(MetadataMBeanInfoAssembler.java:257)  Tomcat 5.0.30 comes with jmx.jar (in ${tomcat_home}/bin, seems to be 1.1.1 jmx version, from mx4j project) that includes a check for ""persistPeriod"" to be > 0. MetadataMBeanInfoAssembler sets this MBean attribute if mr.getPersistPeriod() >= 0 And default value for persistPeriod in org.springframework.jmx.export.metadata.ManagedRes ource is ... 0.  I had to update all my annotation to add ""persistPeriod=-1"".  It would be great to udate MetadataMBeanInfoAssembler to use mr.getPersistPeriod() > 0. I don't know if this chek in jmx.jar is valid according to JMX spec.   ---  **Affects:** 1.2.6","closed","in: core,","spring-projects-issues","2006-01-15T00:15:43Z","2012-06-19T03:53:56Z"
"","6299","make AbstractPathResolvingPropertyEditor.resolvePath substitue system environment variables [SPR-1602]","**[nicolas de loof](https://jira.spring.io/secure/ViewProfile.jspa?name=ndeloof)** opened **[SPR-1602](https://jira.spring.io/browse/SPR-1602?redirect=false)** and commented  Using ""searchSystemEnvironment"" property, PropertyPlaceholderConfigurer  can be configured to use system env variables for substitution. According to this, I consider using system env is not considered as a bad practice (just not encouraged ?)  So PropertyPlaceholderConfigurer ""locations"" attribute may also accept such properties. That requires AbstractPathResolvingPropertyEditor.resolvePath to search System.getEnv for substitutes if System.getProperty failed.  Typical use-case : My context is configured using a placeholder, base on 2 properties file : on is ApplicationContextDefaults.properties (in my WEB-INF), other one is in C:/MyProperties/custom.properties.  To make it work, I have to run my webapp with ""-Dhome.properties=C:/MyProperties"" and configure PropertyPlaceholderConfigurer  with : \ \/WEB-INF/applicationContextDefaults.properties\ \file:${home.properties}/custom.properties.\ \  I'd like not ta have to set a java system property : \ \/WEB-INF/applicationContextDefaults.properties\ \file:${PROPERTIES_HOME}/custom.properties\ \    ---  **Affects:** 2.0 M1","closed","type: enhancement,","spring-projects-issues","2006-01-09T00:23:09Z","2006-01-09T09:13:07Z"
"","6294","consider separate java5 code from asects sources [SPR-1597]","**[nicolas de loof](https://jira.spring.io/secure/ViewProfile.jspa?name=ndeloof)** opened **[SPR-1597](https://jira.spring.io/browse/SPR-1597?redirect=false)** and commented  Spring-aspect is a great addition to framework, but requires java5. Abstract aspects are defined to allow other aspectj-based IoC, but it requires java5 as ajc is configured with target=""15"".  By separating annotation support for aspects in a ""tiger"" source tree (as done for other modules), base aspectj support may be compiled with target=""1.3"", and may be used to add aspectj enabled IoC under java 1.3/1.4  I may contribute to spring by sharing an aspect that use an empty ""SpringConfigured"" interface to mark beans, and commons-attributes annotation to get wiring infos.   ---  **Affects:** 2.0 M1","closed","type: enhancement,","spring-projects-issues","2006-01-06T23:44:57Z","2012-06-19T09:37:33Z"
"","6167","jdbcTemplate needs a way to set the Scale for use with Decimal and Numeric types [SPR-1468]","**[Nick Burch](https://jira.spring.io/secure/ViewProfile.jspa?name=gagravarr)** opened **[SPR-1468](https://jira.spring.io/browse/SPR-1468?redirect=false)** and commented  With a JDBC Prepared statement, there are two ways to set the value of an object, with a scale: http://java.sun.com/j2se/1.4.2/docs/api/java/sql/PreparedStatement.html#setObject(int,%20java.lang.Object,%20int,%20int) and with an implicit scale of 0: http://java.sun.com/j2se/1.4.2/docs/api/java/sql/PreparedStatement.html#setObject(int,%20java.lang.Object,%20int)  The scale is used with NUMERIC and DECIMAL types to control the rounding. JdbcTemplate only offers methods where you supply the object and the type, it doesn't have any that allow the scale to also be passed in. Without this, all numeric types will be rounded to the nearest whole number, since they get the default scale.  One such method that should probably be extended is: http://static.springframework.org/spring/docs/1.2.x/api/org/springframework/jdbc/core/JdbcTemplate.html#query(java.lang.String,%20java.lang.Object[],%20int[],%20org.springframework.jdbc.core.RowCallbackHandler) (Would probably want a method override which also accepted an array on int's for the scales)   ---  **Affects:** 1.2.5","closed","type: enhancement,","spring-projects-issues","2005-11-14T03:10:07Z","2019-01-13T22:50:10Z"
"","6760","Enhance Available Bean Scopes [SPR-2067]","**[nebhale](https://jira.spring.io/secure/ViewProfile.jspa?name=nebhale)** opened **[SPR-2067](https://jira.spring.io/browse/SPR-2067?redirect=false)** and commented  I just wanted to get this down before I forgot it.  One of the most striking comments I got last week was from a couple of guys that were working with Mule.  They mentioned that what they really were looking for was a richer set of bean scopes.  The said that the two new scopes were a good first step, but wanted to see some new scopes that were more conversational and less tied to web type lifecycles.  I'm sure we'll similar requests for portlets as well with their two part lifecycle.   ---  **Affects:** 2.0 M4","closed","in: core,","spring-projects-issues","2006-05-26T17:05:00Z","2019-01-11T18:17:10Z"
"","6759","Remove need for MessageListener interface in Async JMS Reception [SPR-2066]","**[nebhale](https://jira.spring.io/secure/ViewProfile.jspa?name=nebhale)** opened **[SPR-2066](https://jira.spring.io/browse/SPR-2066?redirect=false)** and commented  I was talking to some people at DevCon this year and they mentioned that Mule had recently solved the issue that you needed to implement the MessageListener interface to receive JMS messages and it got me thinking.  Couldn't we do something where we allow you to specify a bean and then we take a look at the method signatures and attempt to do match one like we do with the AfterThrowing advice?  Basically we'd receive the message and take a look which subtype it was.  Then we'd look at the bean and match it to methods that had a single argument of the specific type we received?  This would enable us to remove the need to implement a specific interface of any kind as well as remove the need for each bean to have to cast the message to the proper type.  It seems like the way this is currently used, most people are dispatching based on the type to a private method anyway, this would just remove the boilerplate dispatch code.   ---  **Affects:** 2.0 M4  1 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2006-05-26T16:58:14Z","2012-06-19T02:28:27Z"
"","6624","Links to bookmarks in the reference docs TOC go to top of page and not to bookmark location on Safari [SPR-1931]","**[nebhale](https://jira.spring.io/secure/ViewProfile.jspa?name=nebhale)** opened **[SPR-1931](https://jira.spring.io/browse/SPR-1931?redirect=false)** and commented  Basically if you are using Safari any bookmark link (something with a # in it) in the reference docs goes to the top of the page and not to the intended location.  This is not a problem in the javadocs in Safari.  This is also not a problem in Firefox on OS X in the reference docs.  So it appears to be a Safari only issue in the reference docs only.   ---  **Affects:** 2.0 M4","closed","","spring-projects-issues","2006-04-18T02:13:46Z","2019-01-11T22:07:00Z"
"","6623","Document the support for strongly typed collections in the reference documentation [SPR-1930]","**[nebhale](https://jira.spring.io/secure/ViewProfile.jspa?name=nebhale)** opened **[SPR-1930](https://jira.spring.io/browse/SPR-1930?redirect=false)** and commented   ---  **Affects:** 2.0 M3","closed","type: documentation,","spring-projects-issues","2006-04-18T01:32:07Z","2012-06-19T03:52:25Z"
"","6622","Document the SimpleJdbcTemplate in the reference documentation [SPR-1929]","**[nebhale](https://jira.spring.io/secure/ViewProfile.jspa?name=nebhale)** opened **[SPR-1929](https://jira.spring.io/browse/SPR-1929?redirect=false)** and commented   ---  **Affects:** 2.0 M3","closed","status: duplicate,","spring-projects-issues","2006-04-18T01:31:28Z","2019-01-11T22:07:05Z"
"","6621","Document the TaskExecutor abstraction in the reference documentation [SPR-1928]","**[nebhale](https://jira.spring.io/secure/ViewProfile.jspa?name=nebhale)** opened **[SPR-1928](https://jira.spring.io/browse/SPR-1928?redirect=false)** and commented   ---  **Affects:** 2.0 M3","closed","type: documentation,","spring-projects-issues","2006-04-18T01:30:52Z","2012-06-19T03:52:27Z"
"","6620","Document bean scoping in the reference documentation [SPR-1927]","**[nebhale](https://jira.spring.io/secure/ViewProfile.jspa?name=nebhale)** opened **[SPR-1927](https://jira.spring.io/browse/SPR-1927?redirect=false)** and commented   ---  **Affects:** 2.0 M3","closed","status: duplicate,","spring-projects-issues","2006-04-18T01:29:21Z","2019-01-11T22:07:08Z"
"","6499","Include Tiger source code in source build [SPR-1805]","**[nebhale](https://jira.spring.io/secure/ViewProfile.jspa?name=nebhale)** opened **[SPR-1805](https://jira.spring.io/browse/SPR-1805?redirect=false)** and commented  In Eclipse, only one source bundle can be attached to a given jar file in a project's classpath.  Becuase the current spring source build doesn't include the tiger source files, users cannot see the source code for tiger specific classes.  The source build of Spring should be updated to include the source code from the tiger source area.  In addition, I'm not sure if there is a 'browse to source' feature in the AJDT functionality, but if there is it may be worthwhile to include the AspectJ source code (.aj files) as well.   ---  **Affects:** 2.0 M3","closed","type: enhancement,","spring-projects-issues","2006-03-21T01:49:10Z","2012-06-19T03:54:18Z"
"","6375","New M2 build breaks 3rd parties [SPR-1677]","**[nebhale](https://jira.spring.io/secure/ViewProfile.jspa?name=nebhale)** opened **[SPR-1677](https://jira.spring.io/browse/SPR-1677?redirect=false)** and commented  It appears that since M2 has been compiled with Java 5, some 3rd parties have started breaking without a recompile.  The problem that I ran into was that XBean is looking for MutablePropertyValues.addPropertyValue() which obviously still exists.  Because of this break, ActiveMQ 4.0M4 is broken.  Obviously this has nothing to do with you, the other apps need to recompile to fix the problem, but I wanted you all to be aware of this if you run across it in the forums or something.  http://jira.codehaus.org/browse/XB-7 http://jira.activemq.org/jira/browse/AMQ-531   ---  **Affects:** 2.0 M2  1 votes, 6 watchers","closed","in: core,","spring-projects-issues","2006-02-06T23:58:52Z","2019-01-12T16:29:38Z"
"","6295","HibernateTemplate does not substitute objects correctly using find(String, Object) [SPR-1598]","**[nebhale](https://jira.spring.io/secure/ViewProfile.jspa?name=nebhale)** opened **[SPR-1598](https://jira.spring.io/browse/SPR-1598?redirect=false)** and commented  When running a query using the HibernateTemplate().find(String, Object) method, I get an exception thrown out from Hibernate that says: ""java.lang.IndexOutOfBoundsException: Remember that ordinal parameters are 1-based!"".  I've tracked it down to HibernateTemplate.java line 802.  Clearly you're starting insertion at 0, and if hibernate is correct on that fact this should be changed.   ---  **Affects:** 2.0 M1","closed","in: core,","spring-projects-issues","2006-01-07T07:22:43Z","2019-01-11T21:37:53Z"
"","6253","TestNG support in Spring Mocks [SPR-1555]","**[nebhale](https://jira.spring.io/secure/ViewProfile.jspa?name=nebhale)** opened **[SPR-1555](https://jira.spring.io/browse/SPR-1555?redirect=false)** and commented  I'd like to see support for the TestNG framework in the Spring Mocks area.  To that end, I've gone ahead and done an initial conversion using the existing AbstractSpringContextTest and it's subclasses.  As I worked on it, I felt that there was a ton of logic that would have to be duplicated in both trees and can probably be abstracted in some way.  In addition there's backwards compatibility using XBean for TestNG if you want to support pre 1.5 (non-annotation) use of TestNG.  As far as the changes go, I simply removed the TestCase extension point and used annotations to get the setUp() method to run at the beginning of each test class.  In addition, I removed the tearDown() and the onSetUp() and onTearDown() methods.  TestNG guarentees that multiple 'beforeTestClass' and 'beforeTestMethod' are executed descending through the inheritence tree.  In addition, this should give users more power as they can now set dependencies of methods to guarentee order.  In addition in the Transaction classes, the creation and rollback of the transactions area listed as 'before/afterTestMethod'.  I realize that this is simply a first cut and there will still need to be work done.  I'd like to see this as part of 2.0 final, but understand if it can't make it.  If you want me to redo the work with design input from you all, that'd be OK as well.   ---  **Affects:** 2.0 M1  **Attachments:** - [AbstractDependencyInjectionSpringContextTests.java](https://jira.spring.io/secure/attachment/11352/AbstractDependencyInjectionSpringContextTests.java) (_9.88 kB_) - [AbstractSpringContextTests.java](https://jira.spring.io/secure/attachment/11351/AbstractSpringContextTests.java) (_4.26 kB_) - [AbstractTransactionalDataSourceSpringContextTests.java](https://jira.spring.io/secure/attachment/11354/AbstractTransactionalDataSourceSpringContextTests.java) (_2.69 kB_) - [AbstractTransactionalSpringContextTests.java](https://jira.spring.io/secure/attachment/11353/AbstractTransactionalSpringContextTests.java) (_8.14 kB_)  9 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2005-12-20T10:53:07Z","2019-01-11T21:33:26Z"
"","6184","ConnectorServerFactoryBean does not have the 'registrationBehaviorName' property [SPR-1485]","**[nebhale](https://jira.spring.io/secure/ViewProfile.jspa?name=nebhale)** opened **[SPR-1485](https://jira.spring.io/browse/SPR-1485?redirect=false)** and commented  The ConnectorServerFactoryBean does not have the 'registrationBehaviorName' property.  Therefore, Spring may try to create more than one of the connectors in an MBean server and cause an InstanceAlreadyExists exception.   ---  **Affects:** 1.2.6","closed","type: enhancement,","spring-projects-issues","2005-11-20T10:38:48Z","2012-06-19T03:54:25Z"
"","6182","Page numbers in reference doc PDF should alternate sides [SPR-1483]","**[nebhale](https://jira.spring.io/secure/ViewProfile.jspa?name=nebhale)** opened **[SPR-1483](https://jira.spring.io/browse/SPR-1483?redirect=false)** and commented  When the reference documentation is rendered into PDF, the page numbers are put on the right side of every page.  When it is printed double sided and bound, half of the page numbers end up on the inside next to the binding.  Most word processing applications allow you to alternate which side of the page the numbers are on so that when bound they are on the outside the whole time.   ---  **Affects:** 1.2.6","closed","type: enhancement,","spring-projects-issues","2005-11-18T22:30:44Z","2012-06-19T03:54:07Z"
"","6177","LocalSessionFactoryBean does not have getHibernateProperties method to enable the PropertyOverrideConfigurer to work correctly [SPR-1478]","**[nebhale](https://jira.spring.io/secure/ViewProfile.jspa?name=nebhale)** opened **[SPR-1478](https://jira.spring.io/browse/SPR-1478?redirect=false)** and commented  I'm trying to use a propertyOverrideConfigurer to configure a org.springframework.orm.hibernate3.LocalSessionFactoryBean.  When the configurer tries to apply the property, an exception is returned.  When I did down to the deepest exception the message is:  Invalid property 'hibernateProperties' of bean class [org.springframework.orm.hibernate3.LocalSessionFactoryBean]: Bean property 'hibernateProperties' is not readable or has an invalid getter method: Does the return type of the getter match the parameter type of the setter?   ---  **Affects:** 1.2.6","closed","type: bug,","spring-projects-issues","2005-11-17T12:56:06Z","2012-06-19T03:54:26Z"
"","6011","ivy.xml in common-build/templates/projects/basic is missing a double-quote [SPR-1310]","**[nebhale](https://jira.spring.io/secure/ViewProfile.jspa?name=nebhale)** opened **[SPR-1310](https://jira.spring.io/browse/SPR-1310?redirect=false)** and commented  In common-build/templates/projects/basic/ivy.xml, the line dealing with spring-mock is missing a double-quote after the rev attribute.   ---  **Affects:** 1.2.5  **Attachments:** - [patch.diff.txt](https://jira.spring.io/secure/attachment/11151/patch.diff.txt) (_760 bytes_)","closed","type: bug,","spring-projects-issues","2005-09-19T21:49:31Z","2005-10-16T12:41:41Z"
"","6030","The method of executor.executeBatch() always return 0 [SPR-1330]","**[mou](https://jira.spring.io/secure/ViewProfile.jspa?name=mou)** opened **[SPR-1330](https://jira.spring.io/browse/SPR-1330?redirect=false)** and commented  I have a method as following. I want to get the number of rows updated in the batch . But it always return 0.  public int insertBatchError(final List batchErrorList) {      Integer count = (Integer) getSqlMapClientTemplate().execute(new SqlMapClientCallback() {         public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {                      executor.startBatch();             for (int i = 0; i < batchErrorList.size(); i++) {                              BatchErrorDTO batchErrorDto = (BatchErrorDTO) batchErrorList.get(i);                 executor.update(""insertBatchError"", batchErrorDto);             }             int count = executor.executeBatch();             return new Integer(count);         }     });     return count.intValue();  }   ---  **Affects:** 1.2.4","closed","status: declined,","spring-projects-issues","2005-09-27T20:27:30Z","2019-01-12T16:30:03Z"
"","6308","Cannot intercept calls to protected methods of CGLIB proxied class [SPR-1611]","**[Mindaugas Malinauskas](https://jira.spring.io/secure/ViewProfile.jspa?name=mindism)** opened **[SPR-1611](https://jira.spring.io/browse/SPR-1611?redirect=false)** and commented  When I try to proxy a class using CGLIB, protected methods don't get proxied, i.e. protected method invocations are not intercepted. As I found out this restriction is caused by this code fragment in class org.springframework.aop.framework.Cglib2AopProxy$ProxyCallbackFilter: // don't modify protected methods if(Modifier.isProtected(method.getModifiers())) { return NO_OVERRIDE; }  As I detected this restriction was added to solve problem #5087 (http://opensource2.atlassian.com/projects/spring/browse/SPR-357) witch was caused by CGLIB library. Currently used version of CGLIB library is fixed, so the fragment above doesn't fix anything but just restricts. Removing the fragment of code wouldn't make any unit test to fail. Further discutions may be found at http://forum.springframework.org/showthread.php?t=21299  ---  **Affects:** 1.2.5  **Issue Links:** - #19917 Clarification: Spring AOP pointcuts match protected methods when CGLIB is used","closed","in: core,","spring-projects-issues","2006-01-12T01:31:28Z","2019-01-11T21:22:31Z"
"","5994","URIResolver only set on TransformerFactory in AbstractXsltView [SPR-1293]","**[Miles Barr](https://jira.spring.io/secure/ViewProfile.jspa?name=mbarr)** opened **[SPR-1293](https://jira.spring.io/browse/SPR-1293?redirect=false)** and commented  AbstractXsltView allows you to set a custom URIResolver. This gets set on the TransformerFactory in initApplicationContext, but this is not sufficient. From Sun's Javadocs:  http://java.sun.com/j2se/1.4.2/docs/api/javax/xml/transform/TransformerFactory.html#setURIResolver(javax.xml.transform.URIResolver)  Set an object that is used by default during the transformation to resolve URIs used in xsl:import, or xsl:include.  http://java.sun.com/j2se/1.4.2/docs/api/javax/xml/transform/Transformer.html#setURIResolver(javax.xml.transform.URIResolver)  Set an object that will be used to resolve URIs used in document().  Hence any uses of the document() function results in the default URIResolver behaviour, which is probably not what you want. setURIResolver needs to be called on every Transformer that is created, i.e. in the doTransform(Node, Map, Result, String) method.   ---  **Affects:** 1.1.4  **Attachments:** - [AbstractXsltView.java.patch](https://jira.spring.io/secure/attachment/11142/AbstractXsltView.java.patch) (_566 bytes_)","closed","type: bug,","spring-projects-issues","2005-09-08T20:02:17Z","2012-06-19T03:54:41Z"
"","6859","@target() advices beans it should not [SPR-2168]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-2168](https://jira.spring.io/browse/SPR-2168?redirect=false)** and commented  I have an aspect with a pointcut:  `@Around`(""`@target`(org.lds.stack.spring.serviceproxy.ServiceProxy)"")  I'm using  and a bean with the target class org.springframework.orm.jpa.JpaTemplate is getting proxied.  If I remove the pointcut then my JpaTemplate not longer gets proxied.  Mike  ---  **Affects:** 2.0 M5  **Issue Links:** - #20092 `@target` PointCut causes unrelated beans to be proxied","closed","in: core,","spring-projects-issues","2006-06-21T04:42:54Z","2019-01-13T08:54:51Z"
"","6812","Provide ability to make aop:scoped-proxy prototypes and singletons truely serializable [SPR-2121]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-2121](https://jira.spring.io/browse/SPR-2121?redirect=false)** and commented  It would be nice if there were a way to make singleton and prototype scoped-proxies truely serializable where if the proxy is serialized the target is retrieved from a BeanFactory instead of being serialized with the proxy (similar to how request and session scoped-proxies work).  I believe the complexity of this functionality is in the locating of a BeanFactory when it is unserialized.  Rather than providing some way for the correct BeanFactory to always magically be found all I'm looking for is perhaps some way for the application writer to provide hints about where to find the current bean factory though the use of a BeanFactoryLocator or if the application writer figured the bean would only be used in a web context they chould use the WebApplicationContextUtils to obtain the current BeanFactory.  Something like that.  I was thinking of modifying creating a new target source similar to AbstractBeanFactoryBasedTargetSource that took a BeanFactoryLocator instead of a BeanFactory and modify the scope utilities to optionally provide a BeanFactoryLocator.  Would something like that work?  I'm more than happy to create a patch if I thought I was heading down the right direction and that my patch would eventually be accepted.  Mike  ---  **Affects:** 2.0 M5  **Issue Links:** - #7364 Service references in JSF session objects not restored when using persistent sessions - #9854 Problem when working with RichFaces (JSF) integrated into the spring with javax.faces.STATE_SAVING_METHOD=client.  5 votes, 9 watchers","closed","type: enhancement,","spring-projects-issues","2006-06-09T06:58:59Z","2019-01-11T17:43:21Z"
"","6810","Allow FactoryBean to return null [SPR-2119]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-2119](https://jira.spring.io/browse/SPR-2119?redirect=false)** and commented  With the addition of scoped beans I am attempting to  move my JSF managed-beans over to spring scoped beans to take advantage of spring's power over JSF's managed-bean container.  I believe I can match all functionality of the JSF managed-bean injection engine s with the exception of the ability to inject nullable values into my bean through EL expressions.  Injecting nullable values into a scoped bean is useful, for example, when you need to inject request parameters into request scoped beans.  I have created a JSF-EL FactoryBean that will wrap a JSF expression.  This FactoryBean works great and I'd love to contribute it.  However, it has a major limitation that it is unable to inject occationally null values into a bean.  The source of the check appears to be AbstractBeanFactory line 987.  If this contraint were lifted then my FactoryBean would work great.  If the contraint cannot be lifted is there any other way to inject occationally null values into a bean?  Mike   ---  **Affects:** 2.0 M5","closed","type: enhancement,","spring-projects-issues","2006-06-09T03:57:57Z","2012-06-19T03:52:41Z"
"","6800","A scoped-proxy of a Map is not assignable to a Map [SPR-2108]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-2108](https://jira.spring.io/browse/SPR-2108?redirect=false)** and commented  If a scoped-proxy of a map is created the resulting proxy is not assignable to a Map so it is not injectable into properties that require maps.  If the scoped-proxy is removed from the Map then everything appears to work fine.  Test Case: \  \ \ \           	       Will throw exception:  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'syncedMap' defined in ServletContext resource [/WEB-INF/spring-contexts/managedBeanContext.xml]: Instantiation of bean failed; nested exception is org.springframework.beans.factory.BeanDefinitionStoreException: No matching factory method found: factory method 'synchronizedMap' Caused by: org.springframework.beans.factory.BeanDefinitionStoreException: No matching factory method found: factory method 'synchronizedMap' at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:272) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:527) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:348) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:256) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:167) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:253) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:332) at org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.refresh(AbstractRefreshableWebApplicationContext.java:156) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:246) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:184) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:49) at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:3729) at org.apache.catalina.core.StandardContext.start(StandardContext.java:4187) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1013) at org.apache.catalina.core.StandardHost.start(StandardHost.java:718) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1013) at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:442) at org.apache.catalina.core.StandardService.start(StandardService.java:450) at org.apache.catalina.core.StandardServer.start(StandardServer.java:709) at org.apache.catalina.startup.Catalina.start(Catalina.java:551) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) at java.lang.reflect.Method.invoke(Unknown Source) at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:294) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:432) 16:26:59,000 ERROR [/bob]: Exception sending context initialized event to listener instance of class org.springframework.web.context.ContextLoaderListener org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'syncedMap' defined in ServletContext resource [/WEB-INF/spring-contexts/managedBeanContext.xml]: Instantiation of bean failed; nested exception is org.springframework.beans.factory.BeanDefinitionStoreException: No matching factory method found: factory method 'synchronizedMap' Caused by: org.springframework.beans.factory.BeanDefinitionStoreException: No matching factory method found: factory method 'synchronizedMap' at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:272) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:527) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:348) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:256) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:167) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:253) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:332) at org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.refresh(AbstractRefreshableWebApplicationContext.java:156) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:246) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:184) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:49) at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:3729) at org.apache.catalina.core.StandardContext.start(StandardContext.java:4187) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1013) at org.apache.catalina.core.StandardHost.start(StandardHost.java:718) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1013) at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:442) at org.apache.catalina.core.StandardService.start(StandardService.java:450) at org.apache.catalina.core.StandardServer.start(StandardServer.java:709) at org.apache.catalina.startup.Catalina.start(Catalina.java:551) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) at java.lang.reflect.Method.invoke(Unknown Source) at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:294) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:432)   ---  **Affects:** 2.0 M5","closed","type: bug,","spring-projects-issues","2006-06-06T09:28:27Z","2012-06-19T03:52:34Z"
"","6679","Cannot inject a map without a default constructor such as UnmodifiableMap into a bean. [SPR-1986]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-1986](https://jira.spring.io/browse/SPR-1986?redirect=false)** and commented  This bug exist in latest head checkout a couple of days before I created this bug.  Test Case:                                              Exception:  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'unmodifiableMap2' defined in ServletContext resource [/WEB-INF/spring-contexts/applicationContext.xml]: Instantiation of bean failed; nested exception is org.springframework.beans.BeanInstantiationException: Could not instantiate bean class [java.util.Collections$UnmodifiableMap]: No default constructor found; nested exception is java.lang.NoSuchMethodException: java.util.Collections$UnmodifiableMap.\() org.springframework.beans.BeanInstantiationException: Could not instantiate bean class [java.util.Collections$UnmodifiableMap]: No default constructor found; nested exception is java.lang.NoSuchMethodException: java.util.Collections$UnmodifiableMap.\() java.lang.NoSuchMethodException: java.util.Collections$UnmodifiableMap.\() at java.lang.Class.getConstructor0(Unknown Source) at java.lang.Class.getDeclaredConstructor(Unknown Source) at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:149) at org.springframework.beans.PropertyTypeConverter.convertToTypedMap(PropertyTypeConverter.java:316) at org.springframework.beans.PropertyTypeConverter.convertIfNecessary(PropertyTypeConverter.java:188) at org.springframework.beans.PropertyTypeConverter.convertIfNecessary(PropertyTypeConverter.java:124) at org.springframework.beans.BeanWrapperImpl.doTypeConversionIfNecessary(BeanWrapperImpl.java:792) at org.springframework.beans.factory.support.AbstractBeanFactory.doTypeConversionIfNecessary(AbstractBeanFactory.java:673) at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:371) at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:235) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:520) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:373) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:241) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:152) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:253) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:331) at org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.refresh(AbstractRefreshableWebApplicationContext.java:155) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:246) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:184) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:49) at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:3727) at org.apache.catalina.core.StandardContext.start(StandardContext.java:4162) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1012) at org.apache.catalina.core.StandardHost.start(StandardHost.java:718) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1012) at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:442) at org.apache.catalina.core.StandardService.start(StandardService.java:450) at org.apache.catalina.core.StandardServer.start(StandardServer.java:700) at org.apache.catalina.startup.Catalina.start(Catalina.java:551) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) at java.lang.reflect.Method.invoke(Unknown Source) at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:275) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:413)   ---  **Affects:** 2.0 M4","closed","in: core,","spring-projects-issues","2006-05-04T12:39:42Z","2012-06-19T03:52:27Z"
"","6661","New hibernate session management technique [SPR-1968]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-1968](https://jira.spring.io/browse/SPR-1968?redirect=false)** and commented  Sorry in advance for the long bug document.  I promise it will be worth your time to read. :)  I'd like to present a new hibernate session management technique to be considered for inclusion into spring.  I can code and contribute a patch myself so what I'm looking right now is some buy in for the general idea before I put too much work into a patch.  Introduction: In a project I'm working on we're using JSF+Spring+Hibernate as our technology stack.  singleSession has worked great because of the difficulty in being able to scope JSF data gathering because of JSF's value binding.  We have lately been trying to streamline our development layers as much as possible.  This has lead to idea of being able to directly bind hibernate model objects loaded into simple JSF managed beans.  This has allowed us to completely eliminate all DTO and data translation.  So we no longer have to convert hibernate objects to JSF bindable fields in backing beans or DTOs and back again.  We still wanted to maintain tight control over persisting modifications to the Hibernate model objects in the logic layer.  However, because we're directly binding JSF components to the Hibernate object, modification of the Hibernate object is taking place in the view layer.  Problem: The problem we are running into with the singleSession approach is that modifications to our model objects are creating dirty changes in the single Hibernate session.  So, even though the session is set to Flush.NEVER, later in the request if we wish to persist some data unrelated to some of the objects modified earlier in the session all of the changes that took place during the request are being persisted and not just the changes scoped in this later transaction.  One possible solution may be to clear the session cache before starting a transaction but that would impact session performance and possibly cause random lazy initialization problems.  Another possible solution might be to evict these rich hibernate objects we're modifying before we try to modify them.  However, this also complicates things regarding lazy initialization problems of these hibernate objects and modifications of objects that may be taking place deep in the object graph.  Solution: The solution we came up with is a combination of the singleSession and non singleSession with some deferred close thrown in.  The basic concept is that a single read-only session is created in the OpenSessionInViewFilter.  This session can have ""readonly"" set on its connection, Flush.NEVER set, and any other read-only optimization that can be thought of applied to it.  This session will truly never be flushed.  This session will be available throughout the request anytime a session is needed when asked for not inside of a transaction.  When a session is needed and it is inside of a transaction then a new session is created and bound to the current transaction in addition to the read-only session.  All requests for a session made in this transaction will always return the non read-only session.  Model objects that need to be modified must be loaded in this session or explicitly attached to this session in order for its changes to be persisted.  Below are some bullet point notes regarding this session management technique: * Model objects modified in the read-only session can be compared to their recently obtained, from the database, counter parts loaded in the non read-only session.  This can be useful for business rule validation that may require knowledge of the previous state of the object.  * More precise row locking can occur with LockMode.UPGRADE since all objects to be modified will have to be loaded into the non read-only session and objects to be modified will always be loaded inside of the same transaction they are eventually persisted in.  * A HibernateIntercepter can be automatically added to all the non-readonly sessions that would evict objects modified from the read-only session cache.  This will ensure no cache or dirty read problems exist.  * Because the non read-only session is only directly accessible scoped within the transaction it was created in it is impossible to make changes to an object in any other scope and have those changes accidentally committed by a seemingly unrelated transaction.  * Deferred close is used on all of the sessions created in the transactions created throughout the request so no LazyInit exceptions will ever occur.  * If a transaction is rolled back there is no need to clear the read-only session cache since its cache will still be in perfect sync. (A small performance benefit in rare rolled back transaction situations)  *When a session is requested inside of a read-only transaction then the read-only session would be returned instead of a new session so it is still possible to scope several read-only reads inside of a single transaction.  So what do you think?  Do you believe such a session management technique would be useful to the spring community?  We have been using this session management technique through an implementation based off of extending HibernateTemplate and OpenSessionInViewFilter and have found it very concise and usable.  Let me know what you all think and if feedback is positive I'll start working on a patch.  Mike   ---  **Affects:** 2.0 M4  **Attachments:** - [defferedCloseWithInitial.diff](https://jira.spring.io/secure/attachment/11610/defferedCloseWithInitial.diff) (_15.63 kB_)  3 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2006-04-28T10:09:24Z","2008-01-08T03:19:12Z"
"","6659","Add functionality to inject a Hibernate CacheProvider into LocalSessionFactoryBean  [SPR-1966]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-1966](https://jira.spring.io/browse/SPR-1966?redirect=false)** and commented  We have a need to be able to configure our hibernate second level cache in spring.  Everything works great except it is difficult to create a cache provider that can elegantly lookup a bean in a spring context.  It would be trivial to provide setCacheProvider() functionality to LocalSessionFactoryBean similar to how setJtaTransactionManager() works.  We have already done this through extending LocalSessionFactoryBean but would like to keep our work as close to spring core as possible.  If I provided a patch to LocalSessionFactoryBean that provided setCacheProvider() functionality would that patch be accepted?  Mike  ---  **Attachments:** - [cacheProvider.diff](https://jira.spring.io/secure/attachment/11604/cacheProvider.diff) (_9.46 kB_) - [cacheProvider2.diff](https://jira.spring.io/secure/attachment/11605/cacheProvider2.diff) (_14.86 kB_)  **Issue Links:** - #6569 Configuring Hibernate's CacheProvider through Spring  24 votes, 25 watchers","closed","has: votes-jira,","spring-projects-issues","2006-04-28T08:39:52Z","2019-01-11T22:21:11Z"
"","6749","Spring packaging problem with HttpInvokerServiceExporter [SPR-2056]","**[Mike Sauer](https://jira.spring.io/secure/ViewProfile.jspa?name=msauer)** opened **[SPR-2056](https://jira.spring.io/browse/SPR-2056?redirect=false)** and commented  I am encountering class loading problems when using Spring in an environment with EJBs and Struts. In my Struts environment I am using the Spring ActionSupport class. In the EJB environment I am using the Spring EJB support classes. The first problem I encountered was getting class not found errors when trying to find the Struts Action class. This problem was caused by loading spring.jar in the ejb jar file and Struts in the war lib directory. Since the Spring ActionSupport class was being loaded by the EJB class loader it could not find the Struts Action class it extends since it was loaded in the lower level war class loader. To solve that problem I changed the EJB packaging to include the individual spring jars that I needed and also included spring.jar in the war file.  That worked until I wanted to make the httpinvoker service available in my web application. The HttpInvokerServiceExporter which is packaged in the spring-remoting jar file depends upon classes in the spring web and spring web mvc jar files. This dependency seems to violate the layering depicted in the overview section of the reference manual. I am not able to simply move the spring-remoting jar file to my war file because the remoting jar file also includes the EJB support classes I need in the EJB layer. I am not sure, short of putting struts.jar in my ejb jar (not what I want to do) how I can get this to work. I understand that some app servers allow you to specify that classes be loaded from the war first, but I would prefer not to have to make that change either. I have ended up having to create my own HttpInvokerServiceExporter class basically cloning the Spring version.  Seems to me that the dependency of remoting.jar on web and web mvc should be corrected.  ---  **Affects:** 1.2.7  **Issue Links:** - #8063 OpenSessionInViewFilter cannot depend on classes in spring-web.jar, or should be in spring-web.jar","closed","type: enhancement,","spring-projects-issues","2006-05-25T04:23:13Z","2019-01-11T18:17:45Z"
"","6425","Provide access to the PropertyTypeConverter to PropertyEditors during type conversion [SPR-1728]","**[Mike Sample](https://jira.spring.io/secure/ViewProfile.jspa?name=msample)** opened **[SPR-1728](https://jira.spring.io/browse/SPR-1728?redirect=false)** and commented  It would be nice to for PropertyEditors that use the pe.setValue/pe.getValue conversion hook to have access to the PropertyTypeConverter so they can do conversions on their content.  For example, a Spring-specific interface could be tested for on the PE to do the conversion. The conversion method on this interface could have a param that provides access to the PropertyTypeConverter.  I looked at using the propertyname updates (appended key, index info to property name and use it to lookup other PropertyEditors) as a hook to avoid needing access to the PropertyTypeConverter but this does not seem to be supported for argument conversion (null property names stay null - one might seed it with the converted value's class name). Anyway, registering a lot of editors for internal fields is probably more error prone/tedious than the above solution.  Tangential note: it looks like ArgumentConvertingMethodInvoker could make use of the MethodParameter option of doTypeConversionIfNecessary().   --- No further details from [SPR-1728](https://jira.spring.io/browse/SPR-1728?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-02-17T09:55:07Z","2012-06-19T09:37:27Z"
"","6424","Provide access to the underlying PropertyEditorRegistrySupport via ArgumentConvertingMethodInvoker [SPR-1727]","**[Mike Sample](https://jira.spring.io/secure/ViewProfile.jspa?name=msample)** opened **[SPR-1727](https://jira.spring.io/browse/SPR-1727?redirect=false)** and commented  Context: org.springframework.beans.*  It would be nice to the ability to create PropertyTypeConverters using the same PropertyEditorRegistrySupport object as used by the ArgumentConvertingMethodInvoker.  This allows custom PropertyEditors to have access to converters without having to create duplicate PropertyEditorRegistrySupport objects. This approach would permit return values to be converted as well.  A getter/setter in ArgumentConvertingMethodInvoker for the PropertyEditorRegistrySupport would solve the problem. This would also allow it to be reused in other Invokers etc.   --- No further details from [SPR-1727](https://jira.spring.io/browse/SPR-1727?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-02-17T09:38:35Z","2012-06-19T03:54:39Z"
"","6353","ArgumentConvertingMethodInvoker - permanently mutates param values while testing for match via param value conversion. May affect later match attempts in the method? [SPR-1656]","**[Mike Sample](https://jira.spring.io/secure/ViewProfile.jspa?name=msample)** opened **[SPR-1656](https://jira.spring.io/browse/SPR-1656?redirect=false)** and commented  The 2nd pass of org/springframework/beans/support/ArgumentConvertingMethodInvoker.findMatchingMethod() mutates the param values as it tests for matches. Unless conversion is automatcally  reversible ths looks like it could prevent some matches in certain cases (ie more than one instance of the method name and they have the same number of arguments and the first test mutates a param in a way that is not convertible to the 2nd). Should probably make a shallow copy of of the orginal arguments array on each match pass instead.  This base solely on code inspection!  Here's the loop in question with annotation:  // Second pass: look for method where arguments can be converted to parameter types. for (int i = 0; i < candidates.length; i++) { if (candidates[i].getName().equals(getTargetMethod())) { // Check if the inspected method has the correct number of parameters. Class[] paramTypes = candidates[i].getParameterTypes(); if (paramTypes.length == argCount) { Object[] argumentsToUse = arguments;   /*   SHOULD BE A COPY ? \*/ int numberOfCorrectArguments = 0; for (int j = 0; j < argCount; j++) { // Verify that the supplied argument is assignable to the method parameter. try { argumentsToUse[j] = this.beanWrapper.doTypeConversionIfNecessary(arguments[j], paramTypes[j]);  /* POTENTIAL MUTATION of PARAM VALUE */ numberOfCorrectArguments++; } catch (TypeMismatchException ex) { // Ignore -> simply doesn't match. } } if (numberOfCorrectArguments == argumentsToUse.length) { setArguments(argumentsToUse); return candidates[i]; } } } }  BTW: spring rules.   --- No further details from [SPR-1656](https://jira.spring.io/browse/SPR-1656?redirect=false)","closed","in: core,","spring-projects-issues","2006-02-01T08:53:22Z","2012-06-19T03:54:28Z"
"","6162","Abstract bean in 1.1.5 does not work in 1.2.5 [SPR-1463]","**[mike perham](https://jira.spring.io/secure/ViewProfile.jspa?name=mperham)** opened **[SPR-1463](https://jira.spring.io/browse/SPR-1463?redirect=false)** and commented  We recently upgraded from 1.1.5 to 1.2.5 and found that an abstract bean definition, which was working, now throws an exception:  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'abstractInboxCommand' defined in class path resource [com/webify/jigsaw/inbox/command/inbox-commands.beans.xml]: Instantiation of bean failed; nested exception is java.lang.IllegalStateException: Bean definition does not carry a resolved bean class java.lang.IllegalStateException: Bean definition does not carry a resolved bean class at org.springframework.beans.factory.support.AbstractBeanDefinition.getBeanClass(AbstractBeanDefinition.java:205) at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:49) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateBean(AbstractAutowireCapableBeanFactory.java:453) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:333) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:226) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:147) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:275) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:318) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:81) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:66) at org.springframework.test.AbstractSpringContextTests.loadContextLocations(AbstractSpringContextTests.java:121) at org.springframework.test.AbstractDependencyInjectionSpringContextTests.loadContextLocations(AbstractDependencyInjectionSpringContextTests.java:161) at org.springframework.test.AbstractSpringContextTests.getContext(AbstractSpringContextTests.java:101) at org.springframework.test.AbstractDependencyInjectionSpringContextTests.setUp(AbstractDependencyInjectionSpringContextTests.java:129)  The relevant beans are listed like this:                                                                                                         I was under the impression that:  1) the 1.2 bean context was fully backwards compatible with 1.1 2) abstract beans can be defined simply by not declaring a class attribute  Let me know if I can provide any other information.   ---  **Affects:** 1.2.5","closed","in: core,","spring-projects-issues","2005-11-11T01:52:28Z","2019-01-12T16:29:52Z"
"","5981","FrameworkServlet should log root cause (if any) of request failure [SPR-1279]","**[Mike Kenrich](https://jira.spring.io/secure/ViewProfile.jspa?name=mkenrich)** opened **[SPR-1279](https://jira.spring.io/browse/SPR-1279?redirect=false)** and commented  We are getting an intermittent MultipartException. This exception is logged by the DispatcherServlet at line 406 with the message ""Could not complete request"". Unfortunately, the root cause of this exception and stacktrace are not logged anywhere. It would be helpful if this code could look to see if there is a root cause and log it accordingly.   ---  **Affects:** 1.2.3","closed","type: enhancement,","spring-projects-issues","2005-09-01T09:38:15Z","2012-06-19T03:54:17Z"
"","5923","ResourceBundleViewResolver caches factories for all locales [SPR-1221]","**[Mike Kenrich](https://jira.spring.io/secure/ViewProfile.jspa?name=mkenrich)** opened **[SPR-1221](https://jira.spring.io/browse/SPR-1221?redirect=false)** and commented  While investigating a memory leak in a Spring-based production application, I found that the ResourceBundleViewResolver had cached factories for 27 different locales accounting for 9mb of excess memory usage. A parameter is provided to turn off the caching but the performance implications are terrible. Namely that each view resolution creates an application context and all of the 300+ associated beans. Since we only support US/English at this time, is there any simple way to restrict the locale to this and only cache the one factory we care about?  As indicated in the discussion forum it might be nice to be able to specify what locales are supported and should be cached. Additionally, it might be nice to be able to redirect all other locales to one of the chosen supported and cached locales so that there isn't a performance problem created by factories being built for other locales on the fly.  Thanks for your help on this!  _________________  Mike Kenrich mike@kenrich.com   ---  **Affects:** 1.2.3  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2005-08-09T17:40:27Z","2005-08-12T22:34:31Z"
"","6305","JdbcTemplate queryForList method using scrollable ResultSet for pagination [SPR-1608]","**[Michaël Desbois](https://jira.spring.io/secure/ViewProfile.jspa?name=jmike)** opened **[SPR-1608](https://jira.spring.io/browse/SPR-1608?redirect=false)** and commented  If the JdbcTemplate could expose a method like that I think it would be helpful, a kind of pagination facility.  `@see`#http://forum.springframework.org/showthread.php?t=21128  public List queryForList(String sql, Object[] args, int rowMin, int rowMax) throws DataAccessException { if (rowMin > rowMax) { return Collections.EMPTY_LIST; } PreparedStatementCreatorFactory psc = new PreparedStatementCreatorFactory(sql); psc.setResultSetType(ResultSet.TYPE_SCROLL_SENSITIVE);          return (List) query(psc.newPreparedStatementCreator(args),                             new RowCallbackHandlerResultSetExtractor(                                                                           new RowMapperResultReader(new ColumnMapRowMapper()),                                                                           rowMin,                                                                           rowMax));     }          private static class RowCallbackHandlerResultSetExtractor implements ResultSetExtractor {              private final RowCallbackHandler rch;         private final int rowMin;         private final int rowMax;              public RowCallbackHandlerResultSetExtractor(RowCallbackHandler rch, int rowMin, int rowMax) {             this.rch = rch;             if (rowMin == 0){                 this.rowMin = 1;                 }else{                 this.rowMin = rowMin;             }                          this.rowMax = rowMax;         }              public Object extractData(ResultSet rs) throws SQLException {             boolean position = rs.absolute(rowMin);             rs.setFetchSize(rowMax - rowMin + 1 );             int RowCpt = rowMin;             while (position && (RowCpt","closed","type: enhancement,","spring-projects-issues","2006-01-10T22:14:39Z","2012-06-19T09:37:35Z"
"","6493","ServerSessionMessageListenerContainer102 uses JMS 1.1 API [SPR-1799]","**[Michal Balinski](https://jira.spring.io/secure/ViewProfile.jspa?name=michal.balinski)** opened **[SPR-1799](https://jira.spring.io/browse/SPR-1799?redirect=false)** and commented  ServerSessionMessageListenerContainer102 uses JMS 1.1 API  java.lang.NoSuchMethodError: javax.jms.Connection.createSession(ZI)Ljavax/jms/Session; at org.springframework.jms.listener.serversession.ServerSessionMessageListenerContainer.registerListener(ServerSessionMessageListenerContainer.java:116) at org.springframework.jms.listener.AbstractMessageListenerContainer.initialize(AbstractMessageListenerContainer.java:224) at org.springframework.jms.listener.AbstractMessageListenerContainer.afterPropertiesSet(AbstractMessageListenerContainer.java:212)  My configuration: \ ... \\myQueue\\ \ .... \  I resolved this in my project by setting destination: \ ... \ .... \ \ \ \myQueue\ \ \  1) ServerSessionMessageListenerContainer102 should override registerListener()    or 2) ServerSessionMessageListenerContainer.registerListener() should use ServerSessionMessageListenerContainer.createSession(Connection con) which is overrided in ServerSessionMessageListenerContainer102    ---  **Affects:** 2.0 M3","closed","type: bug,","spring-projects-issues","2006-03-16T19:09:42Z","2012-06-19T03:54:09Z"
"","6437","Documentation clarification suggestion for application context bean inheritence (section 13.2) [SPR-1740]","**[Michael Welles](https://jira.spring.io/secure/ViewProfile.jspa?name=spit99)** opened **[SPR-1740](https://jira.spring.io/browse/SPR-1740?redirect=false)** and commented  We just spent quite some time an issue that was due to a misconfiguration on our part.   I  We  did not understand that a  DispatchServlet would inherit beans instantiated in the root web application context.  We were under the impression, from section 13.2 that the dispatch servlet had it's own **distinct**  WebApplicationContext, and thus had our dispatch servlet pointing to the same context.xml as our ContextLoaderListener ( in order, we thought, to prevent maintenence of two identical files).     Doing so we were firing up two copies of **all** of our singletons.  Our fault for not grokking the docs properly, but all the same we were still under the impression that a DispatcherServlet created it's own **distinct** application context --  it was not clear to us that there was a hierarchy that could be relied on.   We saw that it was scoped, but didn't understand how the heirarchy was defined or how to define it.  Maybe in the next release of the docs, this paragraph in 13.2 of the docs could be modified to read a bit more clearly? (suggestion follows)  Old:  ---  In the example above, all requests ending with .form will be handled by the DispatcherServlet. The DispatcherServlet now needs to be configured. As illustrated in Section 3.11, ""Introduction to the ApplicationContext"", ApplicationContexts in Spring can be scoped. In the web MVC framework, each DispatcherServlet has its own WebApplicationContext, which contains the DispatcherServlet configuration beans. The default BeanFactory used by the DispatcherServlet is the XmlBeanFactory and the DispatcherServlet will on initialization look for a file named [servlet-name]-servlet.xml in the WEB-INF directory of your web application. The default values used by the DispatcherServlet can be modified by using the servlet initialization parameters (see below for more information).  New:  ---  In the example above, all requests ending with .form will be handled by the DispatcherServlet.  The DispatcherServlet now needs to be configured.    As illustrated in Section 3.11, ""Introduction to the ApplicationContext"", ApplicationContexts in Spring can be scoped. In the web MVC framework, each DispatcherServlet has its own WebApplicationContext, which will inherit all the beans already defined in  in the Root WebApplicationContext.  These inhereted beans defined can be overridden in the servlet specific scope,  and new scope specific beans defined local to a given servlet instance.     The framework will,  on initialization of a Dispatcher,  look for a file named [servlet-name]-servlet.xml in the WEB-INF directory of your web application and create the beans defined there, overriding the values of any that are already defined by the same name in the global scope.  What name it uses, and what it uses to parse the file can be modified by using servlet initialization parameters (see below for a full listing).  ---  ---  **Affects:** 1.2.6","closed","type: enhancement,","spring-projects-issues","2006-02-23T06:10:33Z","2019-01-13T22:48:50Z"
"","6628","Example in Documentation 19.2.1 missing lazy-init=""false"" [SPR-1935]","**[Michael Mattox](https://jira.spring.io/secure/ViewProfile.jspa?name=cunparis)** opened **[SPR-1935](https://jira.spring.io/browse/SPR-1935?redirect=false)** and commented  The example in the documentation chapter 19.2.1 is missing lazy-init=""false"" and it doesn't work without this.   ---  **Affects:** 1.2.7","closed","type: enhancement,","spring-projects-issues","2006-04-19T19:10:52Z","2012-06-19T03:52:48Z"
"","6318","PropertyEditorRegistrySupport is not consist in looking up custom property editors [SPR-1621]","**[Michael Kanaley](https://jira.spring.io/secure/ViewProfile.jspa?name=mkanaley)** opened **[SPR-1621](https://jira.spring.io/browse/SPR-1621?redirect=false)** and commented  Consider the code below: private PropertyEditor getCustomEditor(Class requiredType) { if (requiredType != null) { PropertyEditor editor = (PropertyEditor) this.customEditors.get(requiredType); if (editor == null) { for (Iterator it = this.customEditors.keySet().iterator(); it.hasNext();) { Object key = it.next(); if (key instanceof Class && ((Class) key).isAssignableFrom(requiredType)) { editor = (PropertyEditor) this.customEditors.get(key); } } } return editor; } return null; }  The problem is that keySet of the customEditors Map does not return classes in any deterministic order. Say class A extends class B and implements interface C. Say class A does NOT have a property editor associated with it. Say class B and interface C do have different property editors. There is no way to determine which property editor will be returned. Perhaps throw an exception if a different property editor is found. Also perhaps cache the custom editor associated with a specific class too since adding property editors after initialization is not a common task (and probably can invalidate the cache).  If the above is not implemented then perhaps break out of the for loop after the first one is found. My application has 100s of custom editors defined and the isAssignableFrom is slow. Thanks for your consideration of this issue.   ---  **Affects:** 1.2.6","closed","in: core,","spring-projects-issues","2006-01-17T13:09:22Z","2012-06-19T03:54:13Z"
"","6173","File PropertyEditor does not use ApplicationContext's ResourceLoader implementation... [SPR-1474]","**[Michael Kanaley](https://jira.spring.io/secure/ViewProfile.jspa?name=mkanaley)** opened **[SPR-1474](https://jira.spring.io/browse/SPR-1474?redirect=false)** and commented  When injectiing file objects from an ApplicationContext, it makes sense to use the ApplicationContext's ResourceLoader implementation to resolve the file. This way relative paths can be specified in the Spring configuration and would be resolved appropriately to the mechanism used by the ApplicationContext. This might not make much sense in a web ApplicationContext (unless you provided a temporary file for resources loaded out of a ServletContext) but it makes alot of sense for JBI which requires the container to unzip the deployed artifact's resources into the filesystem.   ---  **Affects:** 1.2.6","closed","type: enhancement,","spring-projects-issues","2005-11-16T04:36:39Z","2012-06-19T03:54:22Z"
"","6160","ClassLoader set on a WebApplicationContext is used to load beans but not to inject Class properties which uses the current thread's context ClassLoader [SPR-1461]","**[Michael Kanaley](https://jira.spring.io/secure/ViewProfile.jspa?name=mkanaley)** opened **[SPR-1461](https://jira.spring.io/browse/SPR-1461?redirect=false)** and commented  Set a ClassLoader set on a WebApplicationContext that is NOT the current thread's ClassLoader. This ClassLoader is used to load beans. But if you try to inject Class properties into those beans then it uses the current thread's context ClassLoader.  The same ClassLoader should be used in both cases - ideally the one set on the WebApplicationContext.  org.springframework.beans.propertyeditors.ClassEditor.setAsText calls ClassUtils.forName(String className). This method is hardwired to use the current thread's context ClassLoader. Any call to ClassUtils.forName(String className)  should be changed to the version that accepts a ClassLoader. Thanks.   ---  **Affects:** 1.2.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6d4faa6c5259743f8544352e970c85dfeebbe56f","closed","type: bug,","spring-projects-issues","2005-11-10T20:03:53Z","2012-06-19T03:54:29Z"
"","6516","Fix for Websphere 3.5 bug using org.springframework.mail.javamail.JavaMailSenderImpl [SPR-1822]","**[Michael Harhen](https://jira.spring.io/secure/ViewProfile.jspa?name=mharhen)** opened **[SPR-1822](https://jira.spring.io/browse/SPR-1822?redirect=false)** and commented  Instantiating class JavaMailSenderImpl causes a method-not-found exception for Session.getInstance(properties);  This is because this method does not exist in the version of mail.jar included in the lib/ext directory of the version 1.3 JDK packaged with WebSphere 3.5.  The fix is to change the method call to Session.getInstance(properties(), null);  There are two locations that require changing - near line 86 and line 124   ---  **Affects:** 1.2.7, 2.0 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9aa53abdf9a7ca6c8b9c760fe67cb171ca025c85","closed","in: core,","spring-projects-issues","2006-03-26T05:24:34Z","2012-06-19T03:54:17Z"
"","6282","Maven build is not working [SPR-1585]","**[Michael Franken](https://jira.spring.io/secure/ViewProfile.jspa?name=mfranken)** opened **[SPR-1585](https://jira.spring.io/browse/SPR-1585?redirect=false)** and commented  The current maven build does not work anymore. It seems that it is not actively maintained.  I've updated the maven build to use the appropriate libraries (as much as possible from maven.repo.remote) and to run the most popular reports again and generate the site. BTW it runs the unit tests only once when doing a junit and clover report.  I've also made the sdocbook target work (by adding the plugin and putting the absolute reference to the docbook DTD back into /spring/docs/reference/src/index.html), although the documentation is not included yet in the site.  Patch is attached.   ---  **Affects:** 1.2 final, 1.2.1, 1.2.2, 1.2.3, 1.2.4, 1.2.5, 1.2.6, 2.0 M1  **Attachments:** - [patch.txt](https://jira.spring.io/secure/attachment/11370/patch.txt) (_39.16 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-webflow/commit/ed75f764471ae663868945f0464adef42aa1c4d0  5 votes, 5 watchers","closed","in: core,","spring-projects-issues","2006-01-02T21:30:20Z","2019-01-11T21:38:34Z"
"","6276","checkstyle config does not represent project coding standards [SPR-1579]","**[Michael Franken](https://jira.spring.io/secure/ViewProfile.jspa?name=mfranken)** opened **[SPR-1579](https://jira.spring.io/browse/SPR-1579?redirect=false)** and commented  The checkstyle.xml does not like tab characters, trailing spaces and the left curly braces standard of the project. Patch is attached.   ---  **Affects:** 2.0 M1  **Attachments:** - [patch.txt](https://jira.spring.io/secure/attachment/11367/patch.txt) (_1.46 kB_)","closed","type: enhancement,","spring-projects-issues","2005-12-29T00:41:24Z","2012-06-19T09:37:38Z"
"","6275","PathMatchingResourcePatternResolverTests fails on ""clovered"" classes [SPR-1578]","**[Michael Franken](https://jira.spring.io/secure/ViewProfile.jspa?name=mfranken)** opened **[SPR-1578](https://jira.spring.io/browse/SPR-1578?redirect=false)** and commented  When running the org.springframework.core.io.support.PathMatchingResourcePatternResolverTests.testClasspathStarWithPatternOnFileSystem() after instrumenting the classes with CLOVER the test fails. This happens because clover creates its own classes in the same location as well. Therefore the number of classes does not match the expected number.  I've attached a patch that simply ignores all clover specific classes (that is all classes containing ""$__CLOVER_"" in their name.   ---  **Affects:** 1.1.2, 1.1.3, 1.1.4, 1.1.5, 1.2 RC1, 1.2 RC2, 1.2 final, 1.2.1, 1.2.2, 1.2.3, 1.2.4, 1.2.5, 1.2.6, 2.0 M1  **Attachments:** - [patch.txt](https://jira.spring.io/secure/attachment/11366/patch.txt) (_1.17 kB_)","closed","in: core,","spring-projects-issues","2005-12-28T18:58:56Z","2012-06-19T03:54:17Z"
"","6715","Hibernate 3.1 with connection.release_mode after_transaction  [SPR-2022]","**[Michael Fortin](https://jira.spring.io/secure/ViewProfile.jspa?name=michaelfortin)** opened **[SPR-2022](https://jira.spring.io/browse/SPR-2022?redirect=false)** and commented  According to Hibernates docs, release mode on_close is 'highly discouraged' yet it seems to be the only option available when using springs transaction manager, after_transaction is the default with jdbc transactions with the current release of hibernate: http://www.hibernate.org/hib_docs/v3/reference/en/html/transactions.html#transactions-connection-release  Having support for after transaction would be helpful not only for 'long conversations' but for other scenarios as well.  For example I have a single http request that  posts to several outside vendors and I have to wait for their responses.  My application currently does not scale well  because I have to hold a connection to the database.  With hibernate 3.1 I could simply commit before I post to the external sources to release the connection.   ---  **Affects:** 2.0 M5","closed","type: enhancement,","spring-projects-issues","2006-05-16T00:15:42Z","2014-10-16T07:37:30Z"
"","6855","Tag 'form:checkbox' incorrectly handles collections and arrays [SPR-2164]","**[Michael Brown](https://jira.spring.io/secure/ViewProfile.jspa?name=leto)** opened **[SPR-2164](https://jira.spring.io/browse/SPR-2164?redirect=false)** and commented  The tag 'form:checkbox' does not generate 'selected' appropriately when the underlying property is a collection or array of non-string elements. In my tests this occurs with collection/array of 'Integer' and collection/array of a java 5 enum.  It seems to be a bug specifically to do with the checkbox implementation as the 'form:select' and 'form:option' tags with 'multiple=true' do handle the same collections correctly.  Example: // Enum public enum Gender { Male, Female; }  // Form object public class SomeForm { public  Set\ getGenders(); // Body omitted. public void setGenders(Set\ genders); }  // Html   \Example that fails to display existing values\ Male \ Female \      Example that correcly displays existing values                             ---  **Affects:** 2.0 RC1","closed","type: bug,","spring-projects-issues","2006-06-20T03:23:11Z","2013-01-24T16:58:52Z"
"","6671","Overriding generic methods hides the annotations of the method in the super class [SPR-1978]","**[Mehran Heidarzadeh](https://jira.spring.io/secure/ViewProfile.jspa?name=mehraan)** opened **[SPR-1978](https://jira.spring.io/browse/SPR-1978?redirect=false)** and commented  Because of the specific implementation of generics in Java, when a non-generic method of a subclass overrides a generic method of its super class, a synthetic bridge method with the signature of the overriden method will be added to the subclass.  For example: consider a DAO\ which has a method: `@Transactional`(readonly=false) public void save(T entity);  then create a subclass StudentDAO which extends DAO\ and override the save: `@Transactional`(readonly=false) public void save(Student entity);  in StudentDAO.class you will have two different versions of the save method: 1. public void save(Student) 2. public volatile void save(Object)  When trying to call super.save in the mothod save(Student) you get an exception telling you that method doesn't have a read/write transaction because the volatile method mentiond above hides the annotations of DAO\.save(T)   ---  **Attachments:** - [AnnotationTransactionAttributeSource.java](https://jira.spring.io/secure/attachment/11613/AnnotationTransactionAttributeSource.java) (_1.11 kB_)","closed","type: bug,","spring-projects-issues","2006-05-03T12:48:14Z","2012-06-19T03:52:35Z"
"","6484","Adding portability with J2EE 1.3 for setCharacterEncoding method from javax.servlet.http.HttpServletResponse [SPR-1790]","**[Maxence MARTIN](https://jira.spring.io/secure/ViewProfile.jspa?name=maxence)** opened **[SPR-1790](https://jira.spring.io/browse/SPR-1790?redirect=false)** and commented  I am currently working with J2EE 1.3 (due to Weblogic 8.1) and encounter a NoSuchMethodError for ""setEncodingCharacter""... when I use :  \ \UTF-8\ \  So if you can add portability with J2EE 1.3...  Here is the interesting part of the stacktrace :  java.lang.NoSuchMethodError: javax.servlet.http.HttpServletResponse.setCharacterEncoding(Ljava/lang/StringV at org.springframework.web.servlet.view.jasperreports .AbstractJasperReportsSingleFormatView.renderRepor t(AbstractJasperReportsSingleFormatView.java:71)   ---  **Affects:** 1.2.4, 1.2.5, 1.2.6, 1.2.7, 2.0 M1, 2.0 M2, 2.0 M3  1 votes, 2 watchers","closed","type: bug,","spring-projects-issues","2006-03-14T00:50:10Z","2012-06-19T03:54:29Z"
"","6110","HibernateTemplate.findByCriteria does not allow resetting limit query to first record [SPR-1410]","**[Max Muermann](https://jira.spring.io/secure/ViewProfile.jspa?name=max)** opened **[SPR-1410](https://jira.spring.io/browse/SPR-1410?redirect=false)** and commented  In the following (taken from org.springframework.orm.hibernate3.HibernateTemplate, if you try to execute a DetachedCriteria which has been previously used (for example in a pging operation) and the firstResult value of the DetachedCriteria is no longer set to 0, it is impossible to set the value back to 0.  \ public List findByCriteria(final DetachedCriteria criteria, final int firstResult, final int maxResults) 			throws DataAccessException {      	Assert.notNull(criteria, ""DetachedCriteria must not be null"");     	return (List) execute(new HibernateCallback() {     		public Object doInHibernate(Session session) throws HibernateException {     			Criteria executableCriteria = criteria.getExecutableCriteria(session);     			prepareCriteria(executableCriteria);     			if (firstResult > 0) {     				executableCriteria.setFirstResult(firstResult);     			}     			if (maxResults > 0) {     				executableCriteria.setMaxResults(maxResults);     			}     			return executableCriteria.list();     		}     	}, true);     }  \  The fix would be to change the condition  \ if (firstResult > 0) { \  to  \ if (firstResult > 0) { \   ---  **Affects:** 1.2.5","closed","in: core,","spring-projects-issues","2005-10-22T19:11:22Z","2012-06-19T03:54:40Z"
"","6664","DefaultNamespaceHandlerResolver.initHandlerMappings() should take a ClassLoader parameter [SPR-1971]","**[Maurice Montgénie](https://jira.spring.io/secure/ViewProfile.jspa?name=amokila)** opened **[SPR-1971](https://jira.spring.io/browse/SPR-1971?redirect=false)** and commented  DefaultNamespaceHandlerResolver.initHandlerMappings() should take a ClassLoader parameter so that  ClassUtils.forName() could use it when verifying Handler classes.  It's useful for example for plugin developpers who much take care of classloaders.   ---  **Affects:** 2.0 M4","closed","type: enhancement,","spring-projects-issues","2006-04-30T13:27:38Z","2006-05-04T21:13:58Z"
"","6214","Add method to answer if Hibernate session has been opened [SPR-1515]","**[Mattias Jiderhamn](https://jira.spring.io/secure/ViewProfile.jspa?name=mate)** opened **[SPR-1515](https://jira.spring.io/browse/SPR-1515?redirect=false)** and commented  When using org.springframework.orm.hibernate3.SessionFactoryUtils to create Hibernate sessions, it would be greate to be able to find out **if** a session has been created for the thread. This could, for example, be used in a Servlet filter to close a session that has been opened, without adding the overhead of opening one if none had been opened.  This could be done either by adding a new method, of by overloading getSession() so it can return null if no session has already been opened.   ---  **Affects:** 1.2.6","closed","type: enhancement,","spring-projects-issues","2005-12-05T01:29:53Z","2006-01-03T09:17:29Z"
"","6226","org.springframework.util.StopWatch.shortSummary() should not append '\n' [SPR-1527]","**[Matthias Mann](https://jira.spring.io/secure/ViewProfile.jspa?name=matthiasmann)** opened **[SPR-1527](https://jira.spring.io/browse/SPR-1527?redirect=false)** and commented  org.springframework.util.StopWatch.shortSummary() should not append '\n'. This causes an empty line in the log output when using PerformanceMonitorInterceptor.   ---  **Affects:** 1.2.6","closed","type: enhancement,","spring-projects-issues","2005-12-10T09:09:15Z","2012-06-19T03:53:58Z"
"","6215","UrlBasedViewResolver should have protected access to values [SPR-1516]","**[Matthias Mann](https://jira.spring.io/secure/ViewProfile.jspa?name=matthiasmann)** opened **[SPR-1516](https://jira.spring.io/browse/SPR-1516?redirect=false)** and commented  The class UrlBasedViewResolver has many properties that are defined as private and have no getters. This makes it nearly impossible to subclass this class.  Example: private String prefix = """"; private String suffix = """"; private String contentType; private boolean redirectContextRelative = true; private boolean redirectHttp10Compatible = true;   ---  **Affects:** 1.2.6","closed","type: enhancement,","spring-projects-issues","2005-12-05T09:58:20Z","2012-06-19T03:54:05Z"
"","6287","Store collections with jdbc template [SPR-1590]","**[Matthias Lübken](https://jira.spring.io/secure/ViewProfile.jspa?name=mattscape)** opened **[SPR-1590](https://jira.spring.io/browse/SPR-1590?redirect=false)** and commented  It would be nice if there was a convenient way to store collections with jdbc template.   --- No further details from [SPR-1590](https://jira.spring.io/browse/SPR-1590?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-01-04T17:19:09Z","2012-06-19T09:37:39Z"
"","6396","TypeMismatchException constructor removed [SPR-1699]","**[matthias ernst](https://jira.spring.io/secure/ViewProfile.jspa?name=mernst)** opened **[SPR-1699](https://jira.spring.io/browse/SPR-1699?redirect=false)** and commented  The two-arg constructor TypeMismatchException(PropertyChangeEvent propertyChangeEvent, Class requiredType) was removed (http://cvs.sourceforge.net/viewcvs.py/springframework/spring/src/org/springframework/beans/TypeMismatchException.java?r1=1.14&r2=1.15) Code that I wrote against 1.2 cannot be compiled/run against 2.0 for that reason. I can work around it by using the three-arg constructor. Not a big deal, just wanted to let you know, as you are advertising drop-in compatibility between 1.2 and 2.0.   ---  **Affects:** 2.0 M2","closed","type: enhancement,","spring-projects-issues","2006-02-11T18:07:59Z","2012-06-19T03:54:34Z"
"","5989","AbstractFactoryBean should offer singleton destruction method [SPR-1288]","**[matthias ernst](https://jira.spring.io/secure/ViewProfile.jspa?name=mernst)** opened **[SPR-1288](https://jira.spring.io/browse/SPR-1288?redirect=false)** and commented  AFB should offer a #destroyObject(Object bean) that receives the formerly created object.  Can you make AFB implement DisposableBean and do a  public void destroy() { if(singleton) destroyObject(singletonInstance); }  protected void destroyObject(Object bean) { }   ---  **Affects:** 1.2.2","closed","type: enhancement,","spring-projects-issues","2005-09-06T21:50:03Z","2012-06-19T03:54:37Z"
"","5899","ClassPathApplicationContext et al should use fixed class loader [SPR-1196]","**[matthias ernst](https://jira.spring.io/secure/ViewProfile.jspa?name=mernst)** opened **[SPR-1196](https://jira.spring.io/browse/SPR-1196?redirect=false)** and commented  ClassPathXmlApplicationContext and other classes use the thread context classloader for resource loading and other operations. This is a good default in itself, however, I think they should get that classloader exactly once and remember it. Surprising behaviour can occur otherwise if you have a different tccl later.  Example: The existence of a Resource obtained from a CPXAC depends on the thread context class loader:  /* * Copyright (c) 2004 CoreMedia AG, Hamburg. All rights reserved.   */  package org.mernst.subsystems.crosscontext.test;  import org.springframework.context.support.ClassPathXmlApplicationContext; import org.springframework.core.io.Resource;  import java.net.URLClassLoader; import java.net.URL; import java.net.MalformedURLException;  public class WhichClassLoader { public static void main(String[] args) throws MalformedURLException { URLClassLoader cl = new URLClassLoader(new URL[] { new URL(""http://www.springframework.org/"") });      ClassLoader current = Thread.currentThread().getContextClassLoader();     ClassPathXmlApplicationContext context;     Resource resource;          Thread.currentThread().setContextClassLoader(cl);     try {       context = new ClassPathXmlApplicationContext(new String[0]);       resource = context.getResource(""/files/xdev-spring_logo.jpg"");       System.out.println(""""+resource+"" exists: ""+resource.exists());     } finally {       Thread.currentThread().setContextClassLoader(current);     }          System.out.println(""""+resource+"" exists: ""+resource.exists());  } }  This code prints ""true"" and ""false"" for the same resource.  This can happen, for example, when using JMX remote. Take such a context and export beans via a JMX remote connector. The connector will call into your context using the application classloader as context.  I think it would be more intuitive if DefaultResourceLoader (from which this behaviour is inherited) would remember the context class loader in a field and always use that one.  As a side effect, #getClassLoader on an ApplicationContext would return something meaningful.   ---  **Affects:** 1.2.1","closed","in: core,","spring-projects-issues","2005-07-31T23:50:49Z","2005-08-06T06:16:24Z"
"","5898","*Aware interfaces come too late [SPR-1195]","**[matthias ernst](https://jira.spring.io/secure/ViewProfile.jspa?name=mernst)** opened **[SPR-1195](https://jira.spring.io/browse/SPR-1195?redirect=false)** and commented  [I know this probably cannot be changed but I'd like to raise it as an issue anyway.]  In my eyes, the *Aware interfaces fulfill a very similar function to auto-wiring. A bean declares a dependency and the framework satisfies this dependency automatically.  In the case of autowiring, the dependency is satisfied if and only if it hasn't already been through explicit injection. In the case of the *Aware interfaces, the dependency is injected regardless whether I've already set it. This is inconsistent and confusing and requires ugly workarounds (assign only once, or keep two fields). It's a reason for me to be wary of these interfaces.  How to address the issue? * change invocation order (incompatible). Invoke *Aware setters before #populateBean. Should enable a similar feature for BeanPostProcessors (#postProcessBeanBeforePopulate / #preProcessBean). * devise a way to indicate whether the dependency has already been fulfilled (BeanNameAware#isBeanNameSet) (unschoen) * use an intermediate FactoryBean that implements XXXAware and [auto]wire beans with this factory bean. This is achieved by the ServletContextFactoryBean, for example.    ---  **Affects:** 1.2.1","closed","type: enhancement,","spring-projects-issues","2005-07-31T20:23:47Z","2006-03-06T01:54:37Z"
"","5895","DispatcherServlet ignores FactoryBeans for its tasks [SPR-1192]","**[matthias ernst](https://jira.spring.io/secure/ViewProfile.jspa?name=mernst)** opened **[SPR-1192](https://jira.spring.io/browse/SPR-1192?redirect=false)** and commented  I'm playing with separately reloadable subcontexts of the web-application context in order to achieve sub-second redeployment of application parts. My handler mapping in this case is a proxy factory bean that proxies into such a subcontext. It is not discovered by DispatcherServlet.  The reason: DispatcherServlet detects its handlermappings, handleradapters, handlerexceptionresolvers and viewresolvers by type via BeanFactoryUtils.beansOfTypeIncludingAncestors. The parameter #includeFactoryBeans is always set to false; this behaviour also cannot be overridden; except if I overwrote #getHandler, for example, to include my own list of HandlerMappings.  Is there are reason for this behaviour? Can you change it?  Thx Matthias   ---  **Affects:** 1.2.1","closed","type: enhancement,","spring-projects-issues","2005-07-30T22:29:55Z","2005-08-02T06:42:54Z"
"","6865","samples/showcases/mvc-convention not in springframework-2.0-rc1-with-dependencies download [SPR-2174]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-2174](https://jira.spring.io/browse/SPR-2174?redirect=false)** and commented  samples/showcases/mvc-convention is mentioned in the reference documentation (http://static.springframework.org/spring/docs/2.0.x/reference/mvc.html#mvc-formtaglib, very bottom of the page) but is not included in the springframework-2.0-rc1-with-dependencies download.  It would be nice to either include it in the download or mention in the reference documents how to get it.   ---  **Affects:** 2.0 RC1","closed","type: enhancement,","spring-projects-issues","2006-06-22T00:11:14Z","2012-06-19T03:52:45Z"
"","6861","Add 'resolvable' attribute to  [SPR-2170]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-2170](https://jira.spring.io/browse/SPR-2170?redirect=false)** and commented  To ease error handling in my application, my Exceptions implement the MessageCodeResolvable interface.  I would like to be able to simply save the exception to the request and do something like:    Rather than doing something cumbersome like    Does this request seem reasonable?  Is my approach to exception handling totally bogus or does this seem like a reasonable approach to exception handling in a web app?  There does seem to be some precedent in the way ObjectErrors and FieldError extend from DefaultMessageSourceResolvable.   ---  **Affects:** 2.0 RC1","closed","type: enhancement,","spring-projects-issues","2006-06-21T09:45:56Z","2012-06-19T03:52:34Z"
"","6860","Quartz SchedulerFactoryBean cannot be proxied? [SPR-2169]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-2169](https://jira.spring.io/browse/SPR-2169?redirect=false)** and commented  Today I've been working on migrating my app from Spring 1.2 to Spring 2.0 RC1, and for some reason the SchedulerFactoryBean does not seem to want to be proxied.  Here is my log output with logging for Spring set to DEBUG.  DEBUG 2006-06-21 16:22:06,163 (DefaultListableBeanFactory:applyBeanPostProcessorsBeforeInstantiation) - Invoking BeanPostProcessors before instantiation of bean 'quartzScheduler' DEBUG 2006-06-21 16:22:06,178 (CachedIntrospectionResults:\) - Getting BeanInfo for class [org.springframework.scheduling.quartz.SchedulerFactoryBean] DEBUG 2006-06-21 16:22:06,194 (CachedIntrospectionResults:\) - Caching PropertyDescriptors for class [org.springframework.scheduling.quartz.SchedulerFactoryBean] DEBUG 2006-06-21 16:22:06,194 (CachedIntrospectionResults:\) - Found property 'applicationContext' of type [org.springframework.context.ApplicationContext] DEBUG 2006-06-21 16:22:06,194 (CachedIntrospectionResults:\) - Found property 'applicationContextSchedulerContextKey' of type [java.lang.String] DEBUG 2006-06-21 16:22:06,210 (CachedIntrospectionResults:\) - Found property 'autoStartup' of type [boolean] DEBUG 2006-06-21 16:22:06,210 (CachedIntrospectionResults:\) - Found property 'calendars' of type [java.util.Map] DEBUG 2006-06-21 16:22:06,210 (CachedIntrospectionResults:\) - Found property 'class' of type [java.lang.Class] DEBUG 2006-06-21 16:22:06,210 (CachedIntrospectionResults:\) - Found property 'configLocation' of type [org.springframework.core.io.Resource] DEBUG 2006-06-21 16:22:06,210 (CachedIntrospectionResults:\) - Found property 'dataSource' of type [javax.sql.DataSource] DEBUG 2006-06-21 16:22:06,210 (CachedIntrospectionResults:\) - Found property 'globalJobListeners' of type [[Lorg.quartz.JobListener;] DEBUG 2006-06-21 16:22:06,210 (CachedIntrospectionResults:\) - Found property 'globalTriggerListeners' of type [[Lorg.quartz.TriggerListener;] DEBUG 2006-06-21 16:22:06,210 (CachedIntrospectionResults:\) - Found property 'jobDetails' of type [[Lorg.quartz.JobDetail;] DEBUG 2006-06-21 16:22:06,210 (CachedIntrospectionResults:\) - Found property 'jobListeners' of type [[Lorg.quartz.JobListener;] DEBUG 2006-06-21 16:22:06,210 (CachedIntrospectionResults:\) - Found property 'jobSchedulingDataLocation' of type [java.lang.String] DEBUG 2006-06-21 16:22:06,210 (CachedIntrospectionResults:\) - Found property 'jobSchedulingDataLocations' of type [[Ljava.lang.String;] DEBUG 2006-06-21 16:22:06,210 (CachedIntrospectionResults:\) - Found property 'nonTransactionalDataSource' of type [javax.sql.DataSource] DEBUG 2006-06-21 16:22:06,210 (CachedIntrospectionResults:\) - Found property 'object' of type [java.lang.Object] DEBUG 2006-06-21 16:22:06,210 (CachedIntrospectionResults:\) - Found property 'objectType' of type [java.lang.Class] DEBUG 2006-06-21 16:22:06,210 (CachedIntrospectionResults:\) - Found property 'overwriteExistingJobs' of type [boolean] DEBUG 2006-06-21 16:22:06,210 (CachedIntrospectionResults:\) - Found property 'quartzProperties' of type [java.util.Properties] DEBUG 2006-06-21 16:22:06,210 (CachedIntrospectionResults:\) - Found property 'running' of type [boolean] DEBUG 2006-06-21 16:22:06,225 (CachedIntrospectionResults:\) - Found property 'schedulerContextAsMap' of type [java.util.Map] DEBUG 2006-06-21 16:22:06,225 (CachedIntrospectionResults:\) - Found property 'schedulerFactoryClass' of type [java.lang.Class] DEBUG 2006-06-21 16:22:06,225 (CachedIntrospectionResults:\) - Found property 'schedulerListeners' of type [[Lorg.quartz.SchedulerListener;] DEBUG 2006-06-21 16:22:06,225 (CachedIntrospectionResults:\) - Found property 'schedulerName' of type [java.lang.String] DEBUG 2006-06-21 16:22:06,225 (CachedIntrospectionResults:\) - Found property 'singleton' of type [boolean] DEBUG 2006-06-21 16:22:06,225 (CachedIntrospectionResults:\) - Found property 'startupDelay' of type [int] DEBUG 2006-06-21 16:22:06,225 (CachedIntrospectionResults:\) - Found property 'taskExecutor' of type [org.springframework.core.task.TaskExecutor] DEBUG 2006-06-21 16:22:06,241 (CachedIntrospectionResults:\) - Found property 'transactionManager' of type [org.springframework.transaction.PlatformTransactionManager] DEBUG 2006-06-21 16:22:06,241 (CachedIntrospectionResults:\) - Found property 'triggerListeners' of type [[Lorg.quartz.TriggerListener;] DEBUG 2006-06-21 16:22:06,241 (CachedIntrospectionResults:\) - Found property 'triggers' of type [[Lorg.quartz.Trigger;] DEBUG 2006-06-21 16:22:06,241 (CachedIntrospectionResults:\) - Found property 'waitForJobsToCompleteOnShutdown' of type [boolean] DEBUG 2006-06-21 16:22:06,241 (CachedIntrospectionResults:forClass) - Class [org.springframework.scheduling.quartz.SchedulerFactoryBean] is cache-safe DEBUG 2006-06-21 16:22:06,241 (CollectionFactory:createLinkedMapIfPossible) - Creating [java.util.LinkedHashMap] DEBUG 2006-06-21 16:22:06,241 (DefaultListableBeanFactory:createBean) - Eagerly caching bean with name 'quartzScheduler' to allow for resolving potential circular references DEBUG 2006-06-21 16:22:06,241 (DefaultListableBeanFactory:autowireByName) - Not autowiring property 'calendars' of bean 'quartzScheduler' by name: no matching bean found DEBUG 2006-06-21 16:22:06,241 (DefaultListableBeanFactory:autowireByName) - Not autowiring property 'configLocation' of bean 'quartzScheduler' by name: no matching bean found DEBUG 2006-06-21 16:22:06,241 (DefaultListableBeanFactory:autowireByName) - Not autowiring property 'dataSource' of bean 'quartzScheduler' by name: no matching bean found DEBUG 2006-06-21 16:22:06,241 (DefaultListableBeanFactory:autowireByName) - Not autowiring property 'globalJobListeners' of bean 'quartzScheduler' by name: no matching bean found DEBUG 2006-06-21 16:22:06,241 (DefaultListableBeanFactory:autowireByName) - Not autowiring property 'globalTriggerListeners' of bean 'quartzScheduler' by name: no matching bean found DEBUG 2006-06-21 16:22:06,241 (DefaultListableBeanFactory:autowireByName) - Not autowiring property 'jobDetails' of bean 'quartzScheduler' by name: no matching bean found DEBUG 2006-06-21 16:22:06,241 (DefaultListableBeanFactory:autowireByName) - Not autowiring property 'jobListeners' of bean 'quartzScheduler' by name: no matching bean found DEBUG 2006-06-21 16:22:06,241 (DefaultListableBeanFactory:autowireByName) - Not autowiring property 'nonTransactionalDataSource' of bean 'quartzScheduler' by name: no matching bean found DEBUG 2006-06-21 16:22:06,241 (DefaultListableBeanFactory:autowireByName) - Not autowiring property 'quartzProperties' of bean 'quartzScheduler' by name: no matching bean found DEBUG 2006-06-21 16:22:06,241 (DefaultListableBeanFactory:autowireByName) - Not autowiring property 'schedulerContextAsMap' of bean 'quartzScheduler' by name: no matching bean found DEBUG 2006-06-21 16:22:06,257 (DefaultListableBeanFactory:autowireByName) - Not autowiring property 'schedulerListeners' of bean 'quartzScheduler' by name: no matching bean found DEBUG 2006-06-21 16:22:06,257 (DefaultListableBeanFactory:autowireByName) - Not autowiring property 'taskExecutor' of bean 'quartzScheduler' by name: no matching bean found DEBUG 2006-06-21 16:22:06,257 (DefaultListableBeanFactory:autowireByName) - Not autowiring property 'transactionManager' of bean 'quartzScheduler' by name: no matching bean found DEBUG 2006-06-21 16:22:06,257 (DefaultListableBeanFactory:autowireByName) - Not autowiring property 'triggerListeners' of bean 'quartzScheduler' by name: no matching bean found DEBUG 2006-06-21 16:22:06,257 (BeanDefinitionValueResolver:resolveReference) - Resolving reference from property 'bean property 'triggers' with key [0]' in bean 'quartzScheduler' to bean 'nightlyEmailJobTrigger' DEBUG 2006-06-21 16:22:06,257 (CollectionFactory:createLinkedSetIfPossible) - Creating [java.util.LinkedHashSet] DEBUG 2006-06-21 16:22:06,257 (DefaultListableBeanFactory:getBean) - Returning cached instance of singleton bean 'nightlyEmailJobTrigger' DEBUG 2006-06-21 16:22:06,257 (BeanWrapperImpl:setPropertyValue) - About to invoke write method [public void org.springframework.scheduling.quartz.SchedulerFactoryBean.setTriggers(org.quartz.Trigger[])] on object of class [org.springframework.scheduling.quartz.SchedulerFactoryBean] DEBUG 2006-06-21 16:22:06,272 (BeanWrapperImpl:setPropertyValue) - Invoked write method [public void org.springframework.scheduling.quartz.SchedulerFactoryBean.setTriggers(org.quartz.Trigger[])] with value of type [[Lorg.quartz.Trigger;] DEBUG 2006-06-21 16:22:06,272 (DefaultListableBeanFactory:applyBeanPostProcessorsBeforeInitialization) - Invoking BeanPostProcessors before initialization of bean 'quartzScheduler' DEBUG 2006-06-21 16:22:06,272 (ApplicationContextAwareProcessor:postProcessBeforeInitialization) - Invoking setApplicationContext on ApplicationContextAware bean 'quartzScheduler' DEBUG 2006-06-21 16:22:06,272 (DefaultListableBeanFactory:invokeInitMethods) - Invoking afterPropertiesSet() on bean with name 'quartzScheduler' INFO 2006-06-21 16:22:06,428 (SchedulerFactoryBean:startScheduler) - Starting Quartz Scheduler now DEBUG 2006-06-21 16:22:06,428 (DefaultListableBeanFactory:applyBeanPostProcessorsAfterInitialization) - Invoking BeanPostProcessors after initialization of bean 'quartzScheduler' DEBUG 2006-06-21 16:22:06,428 (DefaultListableBeanFactory:getObjectForBeanInstance) - Calling code asked for FactoryBean instance for name 'quartzScheduler' DEBUG 2006-06-21 16:22:06,428 (DefaultListableBeanFactory:getBean) - Returning cached instance of singleton bean 'quartzScheduler' DEBUG 2006-06-21 16:22:06,428 (DefaultListableBeanFactory:getObjectForBeanInstance) - Bean with name 'quartzScheduler' is a factory bean DEBUG 2006-06-21 16:22:06,460 (DefaultListableBeanFactory:applyBeanPostProcessorsAfterInitialization) - Invoking BeanPostProcessors after initialization of bean 'quartzScheduler' DEBUG 2006-06-21 16:22:06,460 (CollectionFactory:createIdentityMapIfPossible) - Creating [java.util.IdentityHashMap] DEBUG 2006-06-21 16:22:06,460 (Cglib2AopProxy:getProxy) - Creating CGLIB2 proxy for [org.quartz.impl.StdScheduler] DEBUG 2006-06-21 16:22:06,460 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public void org.quartz.impl.StdScheduler.shutdown() - using AOP_PROXY DEBUG 2006-06-21 16:22:06,475 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public void org.quartz.impl.StdScheduler.shutdown(boolean) - using AOP_PROXY DEBUG 2006-06-21 16:22:06,475 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public void org.quartz.impl.StdScheduler.start() throws org.quartz.SchedulerException - using AOP_PROXY DEBUG 2006-06-21 16:22:06,475 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public org.quartz.SchedulerContext org.quartz.impl.StdScheduler.getContext() throws org.quartz.SchedulerException - using AOP_PROXY DEBUG 2006-06-21 16:22:06,475 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public boolean org.quartz.impl.StdScheduler.interrupt(java.lang.String,java.lang.String) throws org.quartz.UnableToInterruptJobException - using AOP_PROXY DEBUG 2006-06-21 16:22:06,475 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public org.quartz.SchedulerMetaData org.quartz.impl.StdScheduler.getMetaData() - using AOP_PROXY DEBUG 2006-06-21 16:22:06,475 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public void org.quartz.impl.StdScheduler.pause() - using AOP_PROXY DEBUG 2006-06-21 16:22:06,475 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public boolean org.quartz.impl.StdScheduler.isPaused() - using AOP_PROXY DEBUG 2006-06-21 16:22:06,475 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public org.quartz.Calendar org.quartz.impl.StdScheduler.getCalendar(java.lang.String) throws org.quartz.SchedulerException - using AOP_PROXY DEBUG 2006-06-21 16:22:06,475 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public boolean org.quartz.impl.StdScheduler.deleteCalendar(java.lang.String) throws org.quartz.SchedulerException - using AOP_PROXY DEBUG 2006-06-21 16:22:06,491 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public org.quartz.JobDetail org.quartz.impl.StdScheduler.getJobDetail(java.lang.String,java.lang.String) throws org.quartz.SchedulerException - using AOP_PROXY DEBUG 2006-06-21 16:22:06,491 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public void org.quartz.impl.StdScheduler.addTriggerListener(org.quartz.TriggerListener) - using AOP_PROXY DEBUG 2006-06-21 16:22:06,491 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public boolean org.quartz.impl.StdScheduler.removeTriggerListener(java.lang.String) - using AOP_PROXY DEBUG 2006-06-21 16:22:06,491 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public java.util.Set org.quartz.impl.StdScheduler.getTriggerListenerNames() - using AOP_PROXY DEBUG 2006-06-21 16:22:06,491 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public void org.quartz.impl.StdScheduler.addSchedulerListener(org.quartz.SchedulerListener) - using AOP_PROXY DEBUG 2006-06-21 16:22:06,491 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public void org.quartz.impl.StdScheduler.addGlobalJobListener(org.quartz.JobListener) - using AOP_PROXY DEBUG 2006-06-21 16:22:06,491 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public void org.quartz.impl.StdScheduler.addJobListener(org.quartz.JobListener) - using AOP_PROXY DEBUG 2006-06-21 16:22:06,491 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public void org.quartz.impl.StdScheduler.addGlobalTriggerListener(org.quartz.TriggerListener) - using AOP_PROXY DEBUG 2006-06-21 16:22:06,491 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public void org.quartz.impl.StdScheduler.addCalendar(java.lang.String,org.quartz.Calendar,boolean,boolean) throws org.quartz.SchedulerException - using AOP_PROXY DEBUG 2006-06-21 16:22:06,491 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public void org.quartz.impl.StdScheduler.addJob(org.quartz.JobDetail,boolean) throws org.quartz.SchedulerException - using AOP_PROXY DEBUG 2006-06-21 16:22:06,491 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public org.quartz.Trigger org.quartz.impl.StdScheduler.getTrigger(java.lang.String,java.lang.String) throws org.quartz.SchedulerException - using AOP_PROXY DEBUG 2006-06-21 16:22:06,491 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public java.util.Date org.quartz.impl.StdScheduler.scheduleJob(org.quartz.Trigger) throws org.quartz.SchedulerException - using AOP_PROXY DEBUG 2006-06-21 16:22:06,491 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public java.util.Date org.quartz.impl.StdScheduler.scheduleJob(org.quartz.JobDetail,org.quartz.Trigger) throws org.quartz.SchedulerException - using AOP_PROXY DEBUG 2006-06-21 16:22:06,507 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public java.util.Date org.quartz.impl.StdScheduler.rescheduleJob(java.lang.String,java.lang.String,org.quartz.Trigger) throws org.quartz.SchedulerException - using AOP_PROXY DEBUG 2006-06-21 16:22:06,507 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public java.lang.String org.quartz.impl.StdScheduler.getSchedulerName() - using AOP_PROXY DEBUG 2006-06-21 16:22:06,507 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public void org.quartz.impl.StdScheduler.standby() - using AOP_PROXY DEBUG 2006-06-21 16:22:06,507 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public boolean org.quartz.impl.StdScheduler.isInStandbyMode() - using AOP_PROXY DEBUG 2006-06-21 16:22:06,507 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public boolean org.quartz.impl.StdScheduler.removeJobListener(java.lang.String) - using AOP_PROXY DEBUG 2006-06-21 16:22:06,507 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public java.util.Set org.quartz.impl.StdScheduler.getJobListenerNames() - using AOP_PROXY DEBUG 2006-06-21 16:22:06,507 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public java.lang.String org.quartz.impl.StdScheduler.getSchedulerInstanceId() - using AOP_PROXY DEBUG 2006-06-21 16:22:06,507 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public boolean org.quartz.impl.StdScheduler.isShutdown() - using AOP_PROXY DEBUG 2006-06-21 16:22:06,507 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public java.util.List org.quartz.impl.StdScheduler.getCurrentlyExecutingJobs() - using AOP_PROXY DEBUG 2006-06-21 16:22:06,507 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public void org.quartz.impl.StdScheduler.setJobFactory(org.quartz.spi.JobFactory) throws org.quartz.SchedulerException - using AOP_PROXY DEBUG 2006-06-21 16:22:06,507 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public boolean org.quartz.impl.StdScheduler.unscheduleJob(java.lang.String,java.lang.String) throws org.quartz.SchedulerException - using AOP_PROXY DEBUG 2006-06-21 16:22:06,507 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public boolean org.quartz.impl.StdScheduler.deleteJob(java.lang.String,java.lang.String) throws org.quartz.SchedulerException - using AOP_PROXY DEBUG 2006-06-21 16:22:06,507 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public void org.quartz.impl.StdScheduler.triggerJob(java.lang.String,java.lang.String) throws org.quartz.SchedulerException - using AOP_PROXY DEBUG 2006-06-21 16:22:06,507 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public void org.quartz.impl.StdScheduler.triggerJob(java.lang.String,java.lang.String,org.quartz.JobDataMap) throws org.quartz.SchedulerException - using AOP_PROXY DEBUG 2006-06-21 16:22:06,507 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public void org.quartz.impl.StdScheduler.triggerJobWithVolatileTrigger(java.lang.String,java.lang.String,org.quartz.JobDataMap) throws org.quartz.SchedulerException - using AOP_PROXY DEBUG 2006-06-21 16:22:06,522 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public void org.quartz.impl.StdScheduler.triggerJobWithVolatileTrigger(java.lang.String,java.lang.String) throws org.quartz.SchedulerException - using AOP_PROXY DEBUG 2006-06-21 16:22:06,522 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public void org.quartz.impl.StdScheduler.pauseJob(java.lang.String,java.lang.String) throws org.quartz.SchedulerException - using AOP_PROXY DEBUG 2006-06-21 16:22:06,522 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public void org.quartz.impl.StdScheduler.pauseJobGroup(java.lang.String) throws org.quartz.SchedulerException - using AOP_PROXY DEBUG 2006-06-21 16:22:06,522 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public void org.quartz.impl.StdScheduler.pauseTrigger(java.lang.String,java.lang.String) throws org.quartz.SchedulerException - using AOP_PROXY DEBUG 2006-06-21 16:22:06,522 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public void org.quartz.impl.StdScheduler.pauseTriggerGroup(java.lang.String) throws org.quartz.SchedulerException - using AOP_PROXY DEBUG 2006-06-21 16:22:06,522 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public void org.quartz.impl.StdScheduler.resumeJob(java.lang.String,java.lang.String) throws org.quartz.SchedulerException - using AOP_PROXY DEBUG 2006-06-21 16:22:06,522 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public void org.quartz.impl.StdScheduler.resumeJobGroup(java.lang.String) throws org.quartz.SchedulerException - using AOP_PROXY DEBUG 2006-06-21 16:22:06,522 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public void org.quartz.impl.StdScheduler.resumeTrigger(java.lang.String,java.lang.String) throws org.quartz.SchedulerException - using AOP_PROXY DEBUG 2006-06-21 16:22:06,538 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public void org.quartz.impl.StdScheduler.resumeTriggerGroup(java.lang.String) throws org.quartz.SchedulerException - using AOP_PROXY DEBUG 2006-06-21 16:22:06,538 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public void org.quartz.impl.StdScheduler.pauseAll() throws org.quartz.SchedulerException - using AOP_PROXY DEBUG 2006-06-21 16:22:06,538 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public void org.quartz.impl.StdScheduler.resumeAll() throws org.quartz.SchedulerException - using AOP_PROXY DEBUG 2006-06-21 16:22:06,538 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public java.lang.String[] org.quartz.impl.StdScheduler.getJobGroupNames() throws org.quartz.SchedulerException - using AOP_PROXY DEBUG 2006-06-21 16:22:06,538 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public java.lang.String[] org.quartz.impl.StdScheduler.getJobNames(java.lang.String) throws org.quartz.SchedulerException - using AOP_PROXY DEBUG 2006-06-21 16:22:06,538 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public org.quartz.Trigger[] org.quartz.impl.StdScheduler.getTriggersOfJob(java.lang.String,java.lang.String) throws org.quartz.SchedulerException - using AOP_PROXY DEBUG 2006-06-21 16:22:06,538 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public java.lang.String[] org.quartz.impl.StdScheduler.getTriggerGroupNames() throws org.quartz.SchedulerException - using AOP_PROXY DEBUG 2006-06-21 16:22:06,538 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public java.lang.String[] org.quartz.impl.StdScheduler.getTriggerNames(java.lang.String) throws org.quartz.SchedulerException - using AOP_PROXY DEBUG 2006-06-21 16:22:06,538 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public java.util.Set org.quartz.impl.StdScheduler.getPausedTriggerGroups() throws org.quartz.SchedulerException - using AOP_PROXY DEBUG 2006-06-21 16:22:06,538 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public int org.quartz.impl.StdScheduler.getTriggerState(java.lang.String,java.lang.String) throws org.quartz.SchedulerException - using AOP_PROXY DEBUG 2006-06-21 16:22:06,538 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public java.lang.String[] org.quartz.impl.StdScheduler.getCalendarNames() throws org.quartz.SchedulerException - using AOP_PROXY DEBUG 2006-06-21 16:22:06,538 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public boolean org.quartz.impl.StdScheduler.removeGlobalJobListener(org.quartz.JobListener) - using AOP_PROXY DEBUG 2006-06-21 16:22:06,538 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public java.util.List org.quartz.impl.StdScheduler.getGlobalJobListeners() - using AOP_PROXY DEBUG 2006-06-21 16:22:06,538 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public org.quartz.JobListener org.quartz.impl.StdScheduler.getJobListener(java.lang.String) - using AOP_PROXY DEBUG 2006-06-21 16:22:06,553 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public boolean org.quartz.impl.StdScheduler.removeGlobalTriggerListener(org.quartz.TriggerListener) - using AOP_PROXY DEBUG 2006-06-21 16:22:06,553 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public java.util.List org.quartz.impl.StdScheduler.getGlobalTriggerListeners() - using AOP_PROXY DEBUG 2006-06-21 16:22:06,553 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public org.quartz.TriggerListener org.quartz.impl.StdScheduler.getTriggerListener(java.lang.String) - using AOP_PROXY DEBUG 2006-06-21 16:22:06,553 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public boolean org.quartz.impl.StdScheduler.removeSchedulerListener(org.quartz.SchedulerListener) - using AOP_PROXY DEBUG 2006-06-21 16:22:06,553 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public java.util.List org.quartz.impl.StdScheduler.getSchedulerListeners() - using AOP_PROXY DEBUG 2006-06-21 16:22:06,553 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public native int java.lang.Object.hashCode() - using AOP_PROXY DEBUG 2006-06-21 16:22:06,553 (Cglib2AopProxy:accept) - Object.finalize () method found - using NO_OVERRIDE DEBUG 2006-06-21 16:22:06,553 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method protected native java.lang.Object java.lang.Object.clone() throws java.lang.CloneNotSupportedException - using AOP_PROXY DEBUG 2006-06-21 16:22:06,553 (Cglib2AopProxy:accept) - Found equals() method - using INVOKE_EQUALS DEBUG 2006-06-21 16:22:06,553 (Cglib2AopProxy:accept) - Unable to apply any optimisations to advised method public java.lang.String java.lang.Object.toString() - using AOP_PROXY DEBUG 2006-06-21 16:22:06,553 (Cglib2AopProxy:accept) - Method public abstract int org.springframework.aop.framework.Advised.indexOf(org.springframework.aop.Advisor) is declared on Advised - using DISPATCH_ADVISED DEBUG 2006-06-21 16:22:06,553 (Cglib2AopProxy:accept) - Method public abstract boolean org.springframework.aop.framework.Advised.isFrozen() is declared on Advised - using DISPATCH_ADVISED DEBUG 2006-06-21 16:22:06,553 (Cglib2AopProxy:accept) - Method public abstract org.springframework.aop.TargetSource org.springframework.aop.framework.Advised.getTargetSource() is declared on Advised - using DISPATCH_ADVISED DEBUG 2006-06-21 16:22:06,553 (Cglib2AopProxy:accept) - Method public abstract boolean org.springframework.aop.framework.Advised.isProxyTargetClass() is declared on Advised - using DISPATCH_ADVISED DEBUG 2006-06-21 16:22:06,553 (Cglib2AopProxy:accept) - Method public abstract void org.springframework.aop.framework.Advised.addAdvisor(org.springframework.aop.Advisor) throws org.springframework.aop.framework.AopConfigException is declared on Advised - using DISPATCH_ADVISED DEBUG 2006-06-21 16:22:06,553 (Cglib2AopProxy:accept) - Method public abstract void org.springframework.aop.framework.Advised.addAdvisor(int,org.springframework.aop.Advisor) throws org.springframework.aop.framework.AopConfigException is declared on Advised - using DISPATCH_ADVISED DEBUG 2006-06-21 16:22:06,553 (Cglib2AopProxy:accept) - Method public abstract void org.springframework.aop.framework.Advised.setTargetSource(org.springframework.aop.TargetSource) is declared on Advised - using DISPATCH_ADVISED DEBUG 2006-06-21 16:22:06,553 (Cglib2AopProxy:accept) - Method public abstract void org.springframework.aop.framework.Advised.setExposeProxy(boolean) is declared on Advised - using DISPATCH_ADVISED DEBUG 2006-06-21 16:22:06,569 (Cglib2AopProxy:accept) - Method public abstract boolean org.springframework.aop.framework.Advised.isExposeProxy() is declared on Advised - using DISPATCH_ADVISED DEBUG 2006-06-21 16:22:06,569 (Cglib2AopProxy:accept) - Method public abstract java.lang.Class[] org.springframework.aop.framework.Advised.getProxiedInterfaces() is declared on Advised - using DISPATCH_ADVISED DEBUG 2006-06-21 16:22:06,569 (Cglib2AopProxy:accept) - Method public abstract void org.springframework.aop.framework.Advised.addAdvice(int,org.aopalliance.aop.Advice) throws org.springframework.aop.framework.AopConfigException is declared on Advised - using DISPATCH_ADVISED DEBUG 2006-06-21 16:22:06,569 (Cglib2AopProxy:accept) - Method public abstract void org.springframework.aop.framework.Advised.addAdvice(org.aopalliance.aop.Advice) throws org.springframework.aop.framework.AopConfigException is declared on Advised - using DISPATCH_ADVISED DEBUG 2006-06-21 16:22:06,569 (Cglib2AopProxy:accept) - Method public abstract boolean org.springframework.aop.framework.Advised.isInterfaceProxied(java.lang.Class) is declared on Advised - using DISPATCH_ADVISED DEBUG 2006-06-21 16:22:06,585 (Cglib2AopProxy:accept) - Method public abstract boolean org.springframework.aop.framework.Advised.removeAdvice(org.aopalliance.aop.Advice) throws org.springframework.aop.framework.AopConfigException is declared on Advised - using DISPATCH_ADVISED DEBUG 2006-06-21 16:22:06,585 (Cglib2AopProxy:accept) - Method public abstract void org.springframework.aop.framework.Advised.removeAdvisor(int) throws org.springframework.aop.framework.AopConfigException is declared on Advised - using DISPATCH_ADVISED DEBUG 2006-06-21 16:22:06,585 (Cglib2AopProxy:accept) - Method public abstract boolean org.springframework.aop.framework.Advised.removeAdvisor(org.springframework.aop.Advisor) throws org.springframework.aop.framework.AopConfigException is declared on Advised - using DISPATCH_ADVISED DEBUG 2006-06-21 16:22:06,585 (Cglib2AopProxy:accept) - Method public abstract org.springframework.aop.Advisor[] org.springframework.aop.framework.Advised.getAdvisors() is declared on Advised - using DISPATCH_ADVISED DEBUG 2006-06-21 16:22:06,585 (Cglib2AopProxy:accept) - Method public abstract boolean org.springframework.aop.framework.Advised.replaceAdvisor(org.springframework.aop.Advisor,org.springframework.aop.Advisor) throws org.springframework.aop.framework.AopConfigException is declared on Advised - using DISPATCH_ADVISED DEBUG 2006-06-21 16:22:06,585 (Cglib2AopProxy:accept) - Method public abstract java.lang.String org.springframework.aop.framework.Advised.toProxyConfigString() is declared on Advised - using DISPATCH_ADVISED ERROR 2006-06-21 16:22:06,616 (ScoreboardContextLoaderServlet:startupOrRestart) - Context initialization failed java.lang.IllegalArgumentException: Superclass has no null constructors but no arguments were given at net.sf.cglib.proxy.Enhancer.emitConstructors(Enhancer.java:718) at net.sf.cglib.proxy.Enhancer.generateClass(Enhancer.java:499) at net.sf.cglib.transform.TransformingClassGenerator.generateClass(TransformingClassGenerator.java:33) at net.sf.cglib.core.DefaultGeneratorStrategy.generate(DefaultGeneratorStrategy.java:25) at net.sf.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:216) at net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:377) at net.sf.cglib.proxy.Enhancer.create(Enhancer.java:285) at org.springframework.aop.framework.Cglib2AopProxy.getProxy(Cglib2AopProxy.java:195) at org.springframework.aop.framework.Cglib2AopProxy.getProxy(Cglib2AopProxy.java:150) at org.springframework.aop.framework.ProxyFactory.getProxy(ProxyFactory.java:72) at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.createProxy(AbstractAutoProxyCreator.java:383) at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization(AbstractAutoProxyCreator.java:246) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:286) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.postProcessObjectFromFactoryBean(AbstractAutowireCapableBeanFactory.java:958) at org.springframework.beans.factory.support.AbstractBeanFactory.getObjectFromFactoryBean(AbstractBeanFactory.java:996) at org.springframework.beans.factory.support.AbstractBeanFactory.getObjectForBeanInstance(AbstractBeanFactory.java:960) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:215) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:168) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:250) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:332) at org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.refresh(AbstractRefreshableWebApplicationContext.java:156) at com.spider.scoreboard.framework.springx.ScoreboardApplicationContext.refresh(ScoreboardApplicationContext.java:75) at com.spider.scoreboard.framework.springx.ScoreboardContextLoaderServlet.loadContext(ScoreboardContextLoaderServlet.java:291) at com.spider.scoreboard.framework.springx.ScoreboardContextLoaderServlet.startupOrRestart(ScoreboardContextLoaderServlet.java:139) at com.spider.scoreboard.framework.springx.ScoreboardContextLoaderServlet.init(ScoreboardContextLoaderServlet.java:102) at javax.servlet.GenericServlet.init(GenericServlet.java:211) at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1105) at org.apache.catalina.core.StandardWrapper.load(StandardWrapper.java:932) at org.apache.catalina.core.StandardContext.loadOnStartup(StandardContext.java:3915) at org.apache.catalina.core.StandardContext.start(StandardContext.java:4176) at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:759) at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:739) at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:524) at org.apache.catalina.startup.HostConfig.deployDescriptor(HostConfig.java:603) at org.apache.catalina.startup.HostConfig.deployDescriptors(HostConfig.java:535) at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:470) at org.apache.catalina.startup.HostConfig.start(HostConfig.java:1118) at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:310) at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1020) at org.apache.catalina.core.StandardHost.start(StandardHost.java:718) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1012) at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:442) at org.apache.catalina.core.StandardService.start(StandardService.java:450) at org.apache.catalina.core.StandardServer.start(StandardServer.java:700) at org.apache.catalina.startup.Catalina.start(Catalina.java:551) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:275) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:413)  INFO 2006-06-21 16:22:08,382 (ScoreboardContextLoaderPlugIn:init) - ContextLoaderPlugIn for Struts ActionServlet 'scoreboard, module '': initialization started ERROR 2006-06-21 16:22:08,382 (ScoreboardContextLoaderPlugIn:init) - Context initialization failed java.lang.IllegalArgumentException: Superclass has no null constructors but no arguments were given at net.sf.cglib.proxy.Enhancer.emitConstructors(Enhancer.java:718) at net.sf.cglib.proxy.Enhancer.generateClass(Enhancer.java:499) at net.sf.cglib.transform.TransformingClassGenerator.generateClass(TransformingClassGenerator.java:33) at net.sf.cglib.core.DefaultGeneratorStrategy.generate(DefaultGeneratorStrategy.java:25) at net.sf.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:216) at net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:377) at net.sf.cglib.proxy.Enhancer.create(Enhancer.java:285) at org.springframework.aop.framework.Cglib2AopProxy.getProxy(Cglib2AopProxy.java:195) at org.springframework.aop.framework.Cglib2AopProxy.getProxy(Cglib2AopProxy.java:150) at org.springframework.aop.framework.ProxyFactory.getProxy(ProxyFactory.java:72) at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.createProxy(AbstractAutoProxyCreator.java:383) at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization(AbstractAutoProxyCreator.java:246) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:286) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.postProcessObjectFromFactoryBean(AbstractAutowireCapableBeanFactory.java:958) at org.springframework.beans.factory.support.AbstractBeanFactory.getObjectFromFactoryBean(AbstractBeanFactory.java:996) at org.springframework.beans.factory.support.AbstractBeanFactory.getObjectForBeanInstance(AbstractBeanFactory.java:960) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:215) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:168) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:250) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:332) at org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.refresh(AbstractRefreshableWebApplicationContext.java:156) at com.spider.scoreboard.framework.springx.ScoreboardApplicationContext.refresh(ScoreboardApplicationContext.java:75) at com.spider.scoreboard.framework.springx.ScoreboardContextLoaderServlet.loadContext(ScoreboardContextLoaderServlet.java:291) at com.spider.scoreboard.framework.springx.ScoreboardContextLoaderServlet.startupOrRestart(ScoreboardContextLoaderServlet.java:139) at com.spider.scoreboard.framework.springx.ScoreboardContextLoaderServlet.init(ScoreboardContextLoaderServlet.java:102) at javax.servlet.GenericServlet.init(GenericServlet.java:211) at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1105) at org.apache.catalina.core.StandardWrapper.load(StandardWrapper.java:932) at org.apache.catalina.core.StandardContext.loadOnStartup(StandardContext.java:3915) at org.apache.catalina.core.StandardContext.start(StandardContext.java:4176) at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:759) at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:739) at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:524) at org.apache.catalina.startup.HostConfig.deployDescriptor(HostConfig.java:603) at org.apache.catalina.startup.HostConfig.deployDescriptors(HostConfig.java:535) at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:470) at org.apache.catalina.startup.HostConfig.start(HostConfig.java:1118) at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:310) at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1020) at org.apache.catalina.core.StandardHost.start(StandardHost.java:718) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1012) at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:442) at org.apache.catalina.core.StandardService.start(StandardService.java:450) at org.apache.catalina.core.StandardServer.start(StandardServer.java:700) at org.apache.catalina.startup.Catalina.start(Catalina.java:551) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:275) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:413)   ---  **Affects:** 2.0 RC1","closed","status: declined,","spring-projects-issues","2006-06-21T08:10:30Z","2019-01-12T16:29:11Z"
"","6825","BeanNameUrlHandlerMapping slow when working with large contexts [SPR-2134]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-2134](https://jira.spring.io/browse/SPR-2134?redirect=false)** and commented  I have a context with ~500 beans in it, probably 200 or so of which are web-tier Controllers.  Using the BeanNameUrlHandlerMapping, the first time I try to access a Controller it takes ~20 seconds (on a nice machine, a 3.0 GHz laptop with 2GB of RAM) for the handler mapping to initialize itself.  I understand the pre-initialization step helps the handler be as fast as possible in a production environment, but in a development environment 20 seconds to initialize really is unacceptable.  The entire rest of my application starts up in around the same amount of time and it uses AOP, transactions, creates DB connections, etc.  One of the lessons I've taken from Ruby on Rails is that long initialization is harmful to rapid development, because it takes a long time for developers to test even relatively simple changes.  To test a change in a controller it would take more than 40 seconds just for the app to startup.  I wrote my own handler mapping that just inspects the URL as it comes in and determines if the the URL can be handled by a controller in the application or should just be forwarded along to the servlet container.  It takes no time at all to initialize.  I'm going to attach my code to this bug report just so you can see the approach I used.  Obviously the code is nowhere near being usable in Spring itself, but I wanted to give you an idea of a prototype for a DevelopmentBeanNameUrlHandlerMapping or perhaps a configuration option (perhaps call it preregisterHandlers or something) for the BeanNameUrlHandlerMapping.   ---  **Affects:** 1.2.6  **Attachments:** - [ScoreboardBeanNameUrlHandlerMapping.java](https://jira.spring.io/secure/attachment/11704/ScoreboardBeanNameUrlHandlerMapping.java) (_2.27 kB_)","closed","type: enhancement,","spring-projects-issues","2006-06-13T01:53:32Z","2012-06-19T02:28:28Z"
"","6400","SQLException translation based on both error code and SQL state [SPR-1703]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-1703](https://jira.spring.io/browse/SPR-1703?redirect=false)** and commented  Here's a stack trace:  org.springframework.jdbc.UncategorizedSQLException: Hibernate operation: could not execute query; uncategorized SQLException for SQL [select userhdao0_.userid as userid, userhdao0_.email as email71_, userhdao0_.firstname as firstname71_, userhdao0_.lastname as lastname71_, userhdao0_.middlename as middlename71_, userhdao0_.username as username71_, userhdao0_.passwordhash as password7_71_ from users userhdao0_ where userhdao0_.username=? and userhdao0_.passwordhash=?]; SQL state [08S01]; error code [0]; Network error IOException: Connection timed out: connect; nested exception is java.sql.SQLException: Network error IOException: Connection timed out: connect java.sql.SQLException: Network error IOException: Connection timed out: connect at net.sourceforge.jtds.jdbc.ConnectionJDBC2.\(ConnectionJDBC2.java:372) at net.sourceforge.jtds.jdbc.ConnectionJDBC3.\(ConnectionJDBC3.java:50) at net.sourceforge.jtds.jdbc.Driver.connect(Driver.java:178) at org.apache.commons.dbcp.DriverConnectionFactory.createConnection(DriverConnectionFactory.java:37) at org.apache.commons.dbcp.PoolableConnectionFactory.makeObject(PoolableConnectionFactory.java:290) at org.apache.commons.pool.impl.GenericObjectPool.borrowObject(GenericObjectPool.java:771) at org.apache.commons.dbcp.AbandonedObjectPool.borrowObject(AbandonedObjectPool.java:74) at org.apache.commons.dbcp.PoolingDataSource.getConnection(PoolingDataSource.java:95) at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:540) at org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy$LazyConnectionInvocationHandler.getTargetConnection(LazyConnectionDataSourceProxy.java:363) at org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy$LazyConnectionInvocationHandler.invoke(LazyConnectionDataSourceProxy.java:338) at $Proxy7.prepareStatement(Unknown Source) at org.hibernate.jdbc.AbstractBatcher.getPreparedStatement(AbstractBatcher.java:396) at org.hibernate.jdbc.AbstractBatcher.getPreparedStatement(AbstractBatcher.java:334) at org.hibernate.jdbc.AbstractBatcher.prepareQueryStatement(AbstractBatcher.java:88) at org.hibernate.loader.Loader.prepareQueryStatement(Loader.java:1162) at org.hibernate.loader.Loader.doQuery(Loader.java:390) at org.hibernate.loader.Loader.doQueryAndInitializeNonLazyCollections(Loader.java:218) at org.hibernate.loader.Loader.doList(Loader.java:1593) at org.hibernate.loader.Loader.list(Loader.java:1577) at org.hibernate.loader.hql.QueryLoader.list(QueryLoader.java:395) at org.hibernate.hql.ast.QueryTranslatorImpl.list(QueryTranslatorImpl.java:271) at org.hibernate.impl.SessionImpl.list(SessionImpl.java:844) at org.hibernate.impl.QueryImpl.list(QueryImpl.java:74) at org.springframework.orm.hibernate3.HibernateTemplate$29.doInHibernate(HibernateTemplate.java:818) at org.springframework.orm.hibernate3.HibernateTemplate.execute(HibernateTemplate.java:364) at org.springframework.orm.hibernate3.HibernateTemplate.find(HibernateTemplate.java:809) at com.spider.scoreboard.dao.impl.StartupDAOImpl.authenticate(StartupDAOImpl.java:161) at com.spider.scoreboard.service.impl.StartupServiceImpl.login(StartupServiceImpl.java:116) at com.spider.scoreboard.security.LoginAction.execute(LoginAction.java:49) at org.apache.struts.action.RequestProcessor.processActionPerform(RequestProcessor.java:484) at org.apache.struts.action.RequestProcessor.process(RequestProcessor.java:274) at org.apache.struts.action.ActionServlet.process(ActionServlet.java:1482) at org.apache.struts.action.ActionServlet.doPost(ActionServlet.java:525) at javax.servlet.http.HttpServlet.service(HttpServlet.java:709) at javax.servlet.http.HttpServlet.service(HttpServlet.java:802) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:252) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at com.spider.scoreboard.framework.gzipfilter.CompressionFilter.doFilter(CompressionFilter.java:148) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:202) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at com.spider.scoreboard.framework.ContentTypeFilter.doFilterInternal(ContentTypeFilter.java:135) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:202) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at net.sf.morph.web.MorphFilter.doFilter(MorphFilter.java:43) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:202) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at org.springframework.orm.hibernate3.support.OpenSessionInViewFilter.doFilterInternal(OpenSessionInViewFilter.java:174) at com.spider.scoreboard.framework.springx.AvailableResourceFilter.doFilterInternal(AvailableResourceFilter.java:73) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:202) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at com.spider.scoreboard.framework.RequestLogFilter.doFilterInternal(RequestLogFilter.java:28) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:202) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:213) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:178) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:126) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:105) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:107) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:148) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:856) at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.processConnection(Http11Protocol.java:744) at org.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:527) at org.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(LeaderFollowerWorkerThread.java:80) at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:684) at java.lang.Thread.run(Unknown Source) Caused by: java.net.ConnectException: Connection timed out: connect at java.net.PlainSocketImpl.socketConnect(Native Method) at java.net.PlainSocketImpl.doConnect(Unknown Source) at java.net.PlainSocketImpl.connectToAddress(Unknown Source) at java.net.PlainSocketImpl.connect(Unknown Source) at java.net.SocksSocketImpl.connect(Unknown Source) at java.net.Socket.connect(Unknown Source) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) at java.lang.reflect.Method.invoke(Unknown Source) at net.sourceforge.jtds.jdbc.SharedSocket.createSocketForJDBC3(SharedSocket.java:289) at net.sourceforge.jtds.jdbc.SharedSocket.\(SharedSocket.java:250) at net.sourceforge.jtds.jdbc.ConnectionJDBC2.\(ConnectionJDBC2.java:297) ... 68 more  Here's another stack trace:  org.springframework.jdbc.UncategorizedSQLException: Hibernate operation: could not execute query; uncategorized SQLException for SQL [select meetingnod0_.meetingnoteid as meetingn1_, meetingnod0_.calendarperiodid as calendar2_53_, meetingnod0_.notetext as notetext53_, meetingnod0_.meetingnodeid as meetingn4_53_ from meetingnotes meetingnod0_ where meetingnod0_.calendarperiodid=? and meetingnod0_.meetingnodeid=?]; SQL state [08S01]; error code [0]; Network error IOException: Connection timed out: connect; nested exception is java.sql.SQLException: Network error IOException: Connection timed out: connect java.sql.SQLException: Network error IOException: Connection timed out: connect at net.sourceforge.jtds.jdbc.ConnectionJDBC2.\(ConnectionJDBC2.java:372) at net.sourceforge.jtds.jdbc.ConnectionJDBC3.\(ConnectionJDBC3.java:50) at net.sourceforge.jtds.jdbc.Driver.connect(Driver.java:178) at org.apache.commons.dbcp.DriverConnectionFactory.createConnection(DriverConnectionFactory.java:37) at org.apache.commons.dbcp.PoolableConnectionFactory.makeObject(PoolableConnectionFactory.java:290) at org.apache.commons.pool.impl.GenericObjectPool.borrowObject(GenericObjectPool.java:771) at org.apache.commons.dbcp.AbandonedObjectPool.borrowObject(AbandonedObjectPool.java:74) at org.apache.commons.dbcp.PoolingDataSource.getConnection(PoolingDataSource.java:95) at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:540) at org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy$LazyConnectionInvocationHandler.getTargetConnection(LazyConnectionDataSourceProxy.java:363) at org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy$LazyConnectionInvocationHandler.invoke(LazyConnectionDataSourceProxy.java:338) at $Proxy7.prepareStatement(Unknown Source) at org.hibernate.jdbc.AbstractBatcher.getPreparedStatement(AbstractBatcher.java:396) at org.hibernate.jdbc.AbstractBatcher.getPreparedStatement(AbstractBatcher.java:334) at org.hibernate.jdbc.AbstractBatcher.prepareQueryStatement(AbstractBatcher.java:88) at org.hibernate.loader.Loader.prepareQueryStatement(Loader.java:1162) at org.hibernate.loader.Loader.doQuery(Loader.java:390) at org.hibernate.loader.Loader.doQueryAndInitializeNonLazyCollections(Loader.java:218) at org.hibernate.loader.Loader.doList(Loader.java:1593) at org.hibernate.loader.Loader.list(Loader.java:1577) at org.hibernate.loader.hql.QueryLoader.list(QueryLoader.java:395) at org.hibernate.hql.ast.QueryTranslatorImpl.list(QueryTranslatorImpl.java:271) at org.hibernate.impl.SessionImpl.list(SessionImpl.java:844) at org.hibernate.impl.QueryImpl.list(QueryImpl.java:74) at org.springframework.orm.hibernate3.HibernateTemplate$29.doInHibernate(HibernateTemplate.java:818) at org.springframework.orm.hibernate3.HibernateTemplate.execute(HibernateTemplate.java:364) at org.springframework.orm.hibernate3.HibernateTemplate.find(HibernateTemplate.java:809) at com.spider.scoreboard.dao.impl.NoteDAOImpl.getMeetingNodeNote(NoteDAOImpl.java:68) at com.spider.scoreboard.service.impl.NoteServiceImpl.getMeetingNoteText(NoteServiceImpl.java:34) at com.spider.scoreboard.notes.EditNotesAction.execute(EditNotesAction.java:51) at org.apache.struts.action.RequestProcessor.processActionPerform(RequestProcessor.java:484) at org.apache.struts.action.RequestProcessor.process(RequestProcessor.java:274) at org.apache.struts.action.ActionServlet.process(ActionServlet.java:1482) at org.apache.struts.action.ActionServlet.doGet(ActionServlet.java:507) at javax.servlet.http.HttpServlet.service(HttpServlet.java:689) at javax.servlet.http.HttpServlet.service(HttpServlet.java:802) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:252) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at com.spider.scoreboard.framework.gzipfilter.CompressionFilter.doFilter(CompressionFilter.java:148) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:202) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at com.spider.scoreboard.framework.ContentTypeFilter.doFilterInternal(ContentTypeFilter.java:135) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:202) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at net.sf.morph.web.MorphFilter.doFilter(MorphFilter.java:43) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:202) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at org.springframework.orm.hibernate3.support.OpenSessionInViewFilter.doFilterInternal(OpenSessionInViewFilter.java:174) at com.spider.scoreboard.framework.springx.AvailableResourceFilter.doFilterInternal(AvailableResourceFilter.java:73) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:202) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at com.spider.scoreboard.framework.RequestLogFilter.doFilterInternal(RequestLogFilter.java:28) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:202) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:213) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:178) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:126) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:105) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:107) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:148) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:856) at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.processConnection(Http11Protocol.java:744) at org.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:527) at org.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(LeaderFollowerWorkerThread.java:80) at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:684) at java.lang.Thread.run(Unknown Source) Caused by: java.net.ConnectException: Connection timed out: connect at java.net.PlainSocketImpl.socketConnect(Native Method) at java.net.PlainSocketImpl.doConnect(Unknown Source) at java.net.PlainSocketImpl.connectToAddress(Unknown Source) at java.net.PlainSocketImpl.connect(Unknown Source) at java.net.SocksSocketImpl.connect(Unknown Source) at java.net.Socket.connect(Unknown Source) at sun.reflect.GeneratedMethodAccessor979.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) at java.lang.reflect.Method.invoke(Unknown Source) at net.sourceforge.jtds.jdbc.SharedSocket.createSocketForJDBC3(SharedSocket.java:289) at net.sourceforge.jtds.jdbc.SharedSocket.\(SharedSocket.java:250) at net.sourceforge.jtds.jdbc.ConnectionJDBC2.\(ConnectionJDBC2.java:297) ... 68 more   ---  **Affects:** 1.2.6","closed","type: enhancement,","spring-projects-issues","2006-02-13T03:30:53Z","2008-01-25T10:19:34Z"
"","6388","SQL Server Error Code 1205 = DeadlockLoser [SPR-1690]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-1690](https://jira.spring.io/browse/SPR-1690?redirect=false)** and commented  Here's the stack:  org.springframework.jdbc.UncategorizedSQLException: PreparedStatementCallback; uncategorized SQLException for SQL [update scorecardnodescores set stale = 1 from ((scorecardnodescores sns inner join scorecardnodes selfandancestors on sns.scorecardnodeid = selfandancestors.scorecardnodeid) inner join scorecardnodes sn on selfandancestors.scorecardrootnodeid = sn.scorecardrootnodeid) where sn.scorecardnodeid in (?) and selfandancestors.leftbound = sn.rightbound and stale = 0]; SQL state [40001]; error code [1205]; Transaction (Process ID 51) was deadlocked on lock resources with another process and has been chosen as the deadlock victim. Rerun the transaction.; nested exception is java.sql.SQLException: Transaction (Process ID 51) was deadlocked on lock resources with another process and has been chosen as the deadlock victim. Rerun the transaction. java.sql.SQLException: Transaction (Process ID 51) was deadlocked on lock resources with another process and has been chosen as the deadlock victim. Rerun the transaction. at net.sourceforge.jtds.jdbc.SQLDiagnostic.addDiagnostic(SQLDiagnostic.java:365) at net.sourceforge.jtds.jdbc.TdsCore.tdsErrorToken(TdsCore.java:2781) at net.sourceforge.jtds.jdbc.TdsCore.nextToken(TdsCore.java:2224) at net.sourceforge.jtds.jdbc.TdsCore.getMoreResults(TdsCore.java:628) at net.sourceforge.jtds.jdbc.JtdsStatement.processResults(JtdsStatement.java:525) at net.sourceforge.jtds.jdbc.JtdsStatement.executeSQL(JtdsStatement.java:487) at net.sourceforge.jtds.jdbc.JtdsPreparedStatement.executeUpdate(JtdsPreparedStatement.java:421) at org.apache.commons.dbcp.DelegatingPreparedStatement.executeUpdate(DelegatingPreparedStatement.java:101) at org.springframework.jdbc.core.JdbcTemplate$2.doInPreparedStatement(JdbcTemplate.java:682) at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:454) at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:676) at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:738) at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:746) at com.spider.scoreboard.dao.impl.PrecalculatedScoresDAOImpl.clearNodeAndAncestorScores(PrecalculatedScoresDAOImpl.java:336) at com.spider.scoreboard.service.impl.PrecalculatedScoresServiceImpl.clearNodeAndAncestorScores(PrecalculatedScoresServiceImpl.java:76) at com.spider.scoreboard.service.impl.PrecalculatedScoresServiceImpl.clearNodeAndAncestorScores(PrecalculatedScoresServiceImpl.java:90) at com.spider.scoreboard.service.impl.ScorecardTreeServiceImpl.saveScorecardNode(ScorecardTreeServiceImpl.java:1410) at com.spider.scoreboard.metric.SaveMetricAction.execute(SaveMetricAction.java:127) at com.spider.scoreboard.metric.SaveMetricAction$$FastClassByCGLIB$$84d479e3.invoke(\) at net.sf.cglib.proxy.MethodProxy.invoke(MethodProxy.java:149) at org.springframework.aop.framework.Cglib2AopProxy$CglibMethodInvocation.invokeJoinpoint(Cglib2AopProxy.java:698) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:122) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:144) at org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor.intercept(Cglib2AopProxy.java:643) at com.spider.scoreboard.metric.SaveMetricAction$$EnhancerByCGLIB$$5772a8a.execute(\) at org.apache.struts.action.RequestProcessor.processActionPerform(RequestProcessor.java:484) at org.apache.struts.action.RequestProcessor.process(RequestProcessor.java:274) at org.apache.struts.action.ActionServlet.process(ActionServlet.java:1482) at org.apache.struts.action.ActionServlet.doPost(ActionServlet.java:525) at javax.servlet.http.HttpServlet.service(HttpServlet.java:709) at javax.servlet.http.HttpServlet.service(HttpServlet.java:802) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:252) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at com.spider.scoreboard.framework.gzipfilter.CompressionFilter.doFilter(CompressionFilter.java:148) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:202) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at com.spider.scoreboard.framework.ContentTypeFilter.doFilterInternal(ContentTypeFilter.java:135) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:202) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at net.sf.morph.web.MorphFilter.doFilter(MorphFilter.java:43) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:202) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at org.springframework.orm.hibernate3.support.OpenSessionInViewFilter.doFilterInternal(OpenSessionInViewFilter.java:174) at com.spider.scoreboard.framework.springx.AvailableResourceFilter.doFilterInternal(AvailableResourceFilter.java:73) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:202) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at com.spider.scoreboard.framework.RequestLogFilter.doFilterInternal(RequestLogFilter.java:28) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:202) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:213) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:178) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:126) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:105) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:107) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:148) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:856) at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.processConnection(Http11Protocol.java:744) at org.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:527) at org.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(LeaderFollowerWorkerThread.java:80) at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:684) at java.lang.Thread.run(Unknown Source)  ---  **Affects:** 1.2.6  **Issue Links:** - #7306 Uncategorized data access exception thrown for deadlock (_**""is duplicated by""**_)","closed","type: bug,","spring-projects-issues","2006-02-08T07:06:26Z","2019-01-11T21:28:59Z"
"","6387","MySQL error code 1 = DataAccessResourceFailureException [SPR-1689]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-1689](https://jira.spring.io/browse/SPR-1689?redirect=false)** and commented  Below is the stack trace.  FYI, this is a bug in MySQL that will be fixed in an upcoming 5.0.x release of MySQL (I can find the bug report for you if you need it)  org.springframework.jdbc.UncategorizedSQLException: PreparedStatementCallback; uncategorized SQLException for SQL [select ug.usergroupid, ug.usergroupname from usergroups ug right outer join initiativenodeownergroups iog on (ug.usergroupid = iog.usergroupid) where iog.initiativenodeid = ? order by upper(ug.usergroupname)]; SQL state [HY000]; error code [1]; Can't create/write to file 'c:\windows\temp\#sql_e8_0.MYI' (Errcode: 13); nested exception is java.sql.SQLException: Can't create/write to file 'c:\windows\temp\#sql_e8_0.MYI' (Errcode: 13) java.sql.SQLException: Can't create/write to file 'c:\windows\temp\#sql_e8_0.MYI' (Errcode: 13) at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:2928) at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:1571) at com.mysql.jdbc.ServerPreparedStatement.serverExecute(ServerPreparedStatement.java:1124) at com.mysql.jdbc.ServerPreparedStatement.executeInternal(ServerPreparedStatement.java:676) at com.mysql.jdbc.PreparedStatement.executeQuery(PreparedStatement.java:1030) at org.apache.commons.dbcp.DelegatingPreparedStatement.executeQuery(DelegatingPreparedStatement.java:92) at org.springframework.jdbc.core.JdbcTemplate$1.doInPreparedStatement(JdbcTemplate.java:519) at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:454) at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:506) at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:545) at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:563) at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:573) at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:593) at com.spider.scoreboard.dao.impl.OwnerUpdaterDAOImpl.getInitiativeNodeOwnerGroups(OwnerUpdaterDAOImpl.java:281) at com.spider.scoreboard.service.impl.InitiativeTreeServiceImpl.getTaskListForRootNodes(InitiativeTreeServiceImpl.java:92) at com.spider.scoreboard.meeting.MeetingInitiativesAction.execute(MeetingInitiativesAction.java:66) at org.apache.struts.action.RequestProcessor.processActionPerform(RequestProcessor.java:484) at org.apache.struts.action.RequestProcessor.process(RequestProcessor.java:274) at org.apache.struts.action.ActionServlet.process(ActionServlet.java:1482) at org.apache.struts.action.ActionServlet.doGet(ActionServlet.java:507) at javax.servlet.http.HttpServlet.service(HttpServlet.java:689) at javax.servlet.http.HttpServlet.service(HttpServlet.java:802) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:237) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:157) at com.spider.scoreboard.framework.gzipfilter.CompressionFilter.doFilter(CompressionFilter.java:157) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:186) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:157) at com.spider.scoreboard.framework.ContentTypeFilter.doFilterInternal(ContentTypeFilter.java:135) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:186) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:157) at net.sf.morph.web.MorphFilter.doFilter(MorphFilter.java:43) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:186) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:157) at org.springframework.orm.hibernate3.support.OpenSessionInViewFilter.doFilterInternal(OpenSessionInViewFilter.java:174) at com.spider.scoreboard.framework.springx.AvailableResourceFilter.doFilterInternal(AvailableResourceFilter.java:73) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:186) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:157) at com.spider.scoreboard.framework.RequestLogFilter.doFilterInternal(RequestLogFilter.java:28) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:186) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:157) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:214) at org.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:104) at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:520) at org.apache.catalina.core.StandardContextValve.invokeInternal(StandardContextValve.java:198) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:152) at org.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:104) at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:520) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:137) at org.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:104) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:118) at org.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:102) at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:520) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) at org.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:104) at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:520) at org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:929) at org.apache.coyote.tomcat5.CoyoteAdapter.service(CoyoteAdapter.java:160) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:799) at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.processConnection(Http11Protocol.java:705) at org.apache.tomcat.util.net.TcpWorkerThread.runIt(PoolTcpEndpoint.java:577) at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:683) at java.lang.Thread.run(Thread.java:534)   ---  **Affects:** 1.2.6","closed","type: bug,","spring-projects-issues","2006-02-08T05:56:22Z","2012-06-19T03:54:14Z"
"","6373","Oracle code 61001 should be mapped to a ConcurrencyFailureException [SPR-1675]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-1675](https://jira.spring.io/browse/SPR-1675?redirect=false)** and commented  I think the correct sublcass is deadlockloserexception  Here's my stack trace:  com.spider.scoreboard.service.ServiceException: Unable to delete scorecard node 1386 at com.spider.scoreboard.service.impl.ScorecardTreeServiceImpl.deleteScorecardNode(ScorecardTreeServiceImpl.java:1477) at com.spider.scoreboard.scorecard.DeleteScorecardNodeAction.execute(DeleteScorecardNodeAction.java:36) at com.spider.scoreboard.scorecard.DeleteScorecardNodeAction$$FastClassByCGLIB$$9b29f725.invoke(\) at net.sf.cglib.proxy.MethodProxy.invoke(MethodProxy.java:149) at org.springframework.aop.framework.Cglib2AopProxy$CglibMethodInvocation.invokeJoinpoint(Cglib2AopProxy.java:698) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:122) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:144) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:144) at org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor.intercept(Cglib2AopProxy.java:643) at com.spider.scoreboard.scorecard.DeleteScorecardNodeAction$$EnhancerByCGLIB$$19b4b5b0.execute(\) at org.apache.struts.action.RequestProcessor.processActionPerform(RequestProcessor.java:484) at org.apache.struts.action.RequestProcessor.process(RequestProcessor.java:274) at org.apache.struts.action.ActionServlet.process(ActionServlet.java:1482) at org.apache.struts.action.ActionServlet.doGet(ActionServlet.java:507) at javax.servlet.http.HttpServlet.service(HttpServlet.java:689) at javax.servlet.http.HttpServlet.service(HttpServlet.java:802) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:252) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at com.spider.scoreboard.framework.gzipfilter.CompressionFilter.doFilter(CompressionFilter.java:148) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:202) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at com.spider.scoreboard.framework.ContentTypeFilter.doFilterInternal(ContentTypeFilter.java:135) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:202) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at net.sf.morph.web.MorphFilter.doFilter(MorphFilter.java:43) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:202) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at org.springframework.orm.hibernate3.support.OpenSessionInViewFilter.doFilterInternal(OpenSessionInViewFilter.java:174) at com.spider.scoreboard.framework.springx.AvailableResourceFilter.doFilterInternal(AvailableResourceFilter.java:73) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:202) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at com.spider.scoreboard.framework.RequestLogFilter.doFilterInternal(RequestLogFilter.java:28) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:202) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:213) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:178) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:126) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:105) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:107) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:148) at org.apache.coyote.http11.Http11AprProcessor.process(Http11AprProcessor.java:831) at org.apache.coyote.http11.Http11AprProtocol$Http11ConnectionHandler.process(Http11AprProtocol.java:652) at org.apache.tomcat.util.net.AprEndpoint$Worker.run(AprEndpoint.java:1203) at java.lang.Thread.run(Unknown Source) Caused by: org.springframework.jdbc.UncategorizedSQLException: Hibernate operation: Could not execute JDBC batch update; uncategorized SQLException for SQL [/* delete com.spider.scoreboard.hdao.impl.MetricHDao */ delete from scorecardnodes where scorecardnodeid=?]; SQL state [61000]; error code [60]; ORA-00060: deadlock detected while waiting for resource ; nested exception is java.sql.BatchUpdateException: ORA-00060: deadlock detected while waiting for resource at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.translate(SQLStateSQLExceptionTranslator.java:96) at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.translate(SQLErrorCodeSQLExceptionTranslator.java:257) at org.springframework.orm.hibernate3.HibernateAccessor.convertJdbcAccessException(HibernateAccessor.java:424) at org.springframework.orm.hibernate3.HibernateAccessor.convertHibernateAccessException(HibernateAccessor.java:411) at org.springframework.orm.hibernate3.HibernateTemplate.execute(HibernateTemplate.java:369) at org.springframework.orm.hibernate3.HibernateTemplate.flush(HibernateTemplate.java:775) at com.spider.scoreboard.dao.impl.ScorecardTreeDAOImpl.deleteScorecardNode(ScorecardTreeDAOImpl.java:972) at com.spider.scoreboard.service.impl.ScorecardTreeServiceImpl.deleteScorecardNode(ScorecardTreeServiceImpl.java:1472) ... 48 more Caused by: java.sql.BatchUpdateException: ORA-00060: deadlock detected while waiting for resource at oracle.jdbc.driver.DatabaseError.throwBatchUpdateException(DatabaseError.java:498) at oracle.jdbc.driver.OraclePreparedStatement.executeBatch(OraclePreparedStatement.java:12368) at org.apache.commons.dbcp.DelegatingStatement.executeBatch(DelegatingStatement.java:294) at org.hibernate.jdbc.BatchingBatcher.doExecuteBatch(BatchingBatcher.java:57) at org.hibernate.jdbc.AbstractBatcher.executeBatch(AbstractBatcher.java:174) at org.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:226) at org.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:141) at org.hibernate.event.def.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:274) at org.hibernate.event.def.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:27) at org.hibernate.impl.SessionImpl.flush(SessionImpl.java:730) at org.springframework.orm.hibernate3.HibernateTemplate$27.doInHibernate(HibernateTemplate.java:777) at org.springframework.orm.hibernate3.HibernateTemplate.execute(HibernateTemplate.java:364) ... 51 more   --- No further details from [SPR-1675](https://jira.spring.io/browse/SPR-1675?redirect=false)","closed","type: bug,","spring-projects-issues","2006-02-06T07:03:43Z","2012-06-19T03:53:59Z"
"","6285","OpenSessionInViewFilter: if (logger.isDebugEnabled()) checks missing [SPR-1588]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-1588](https://jira.spring.io/browse/SPR-1588?redirect=false)** and commented  OpenSessionInViewFilter is missing some if (logger.isDebugEnabled()) checks in the code and is instead directly calling logger.debug.   ---  **Affects:** 1.2.6","closed","","spring-projects-issues","2006-01-03T03:10:34Z","2019-01-11T21:38:35Z"
"","6244","Oracle error 17447 should result in a DataAccessResourceFailureException [SPR-1545]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-1545](https://jira.spring.io/browse/SPR-1545?redirect=false)** and commented  Oracle error 17447 is currently an unmapped exception but it should be a DataAccessResourceFailureException.  This error occurs when a JDBC connection has become corrupted, usually because of failure to properly close a connection before returning the connection to the connection pool.  Here is the error message:  SQL state [null]; error code [17447]; OALL8 is in an inconsistent state; nested exception is java.sql.SQLException: OALL8 is in an inconsistent state java.sql.SQLException: OALL8 is in an inconsistent state  This is a kind of ""oh crap, something bad happened and it's not really your fault"" exception in Oracle.  A few causes of this message are suggested in my searches on Google, including (see http://forums.oracle.com/forums/thread.jspa?threadID=274018&tstart=0): - use of Oracle 10g JDBC drivers to connect to Oracle 9 databases - using too big an array size (9.0.1 Database, 10.1.0 JDBC Driver and Generated Code that passes in an ARRAY or VARRAY of VARCHAR2 as a Parameter )  In any case, after this exception is thrown the connection is corrupted and unusable, hence why I advocate this exception be mapped to a DataAccessResourceFailureException   ---  **Affects:** 1.2.5  **Referenced from:** commits https://github.com/spring-projects/spring-webflow/commit/3841729994c91190de9f7f05d77ccf307c31c699","closed","type: bug,","spring-projects-issues","2005-12-19T03:24:09Z","2012-06-19T03:54:11Z"
"","6230","MySQL error code 1205 not translated into exception hierarchy [SPR-1531]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-1531](https://jira.spring.io/browse/SPR-1531?redirect=false)** and commented  I think MySQL error code 1205 is currently translated to an UncategorizedSQLException but I think it should be a deadlock loser exception or a cannot acquire lock exception.  I apologize in advance if I'm wrong and Spring is handling this correctly.  FYI, here's my stack trace, which may give additional information to you:  org.springframework.jdbc.UncategorizedSQLException: Hibernate operation: Could not execute JDBC batch update; uncategorized SQLException for SQL [update scorecardnodes set scorecardnodename=?, description=?, nodetype=?, weighting=?, scorecardrootnodeid=?, scorecardmasternodeid=?, organizationnodeid=?, leftbound=?, rightbound=? where scorecardnodeid=?]; SQL state [41000]; error code [1205]; Lock wait timeout exceeded; try restarting transaction; nested exception is java.sql.BatchUpdateException: Lock wait timeout exceeded; try restarting transaction java.sql.BatchUpdateException: Lock wait timeout exceeded; try restarting transaction at com.mysql.jdbc.ServerPreparedStatement.executeBatch(ServerPreparedStatement.java:647) at org.apache.commons.dbcp.DelegatingStatement.executeBatch(DelegatingStatement.java:294) at org.hibernate.jdbc.BatchingBatcher.doExecuteBatch(BatchingBatcher.java:57) at org.hibernate.jdbc.AbstractBatcher.executeBatch(AbstractBatcher.java:174) at org.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:226) at org.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:137) at org.hibernate.event.def.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:274) at org.hibernate.event.def.DefaultAutoFlushEventListener.onAutoFlush(DefaultAutoFlushEventListener.java:48) at org.hibernate.impl.SessionImpl.autoFlushIfRequired(SessionImpl.java:711) at org.hibernate.impl.SessionImpl.prepareQueries(SessionImpl.java:895) at org.hibernate.impl.SessionImpl.getQueries(SessionImpl.java:885) at org.hibernate.impl.SessionImpl.list(SessionImpl.java:834) at org.hibernate.impl.QueryImpl.list(QueryImpl.java:74) at org.springframework.orm.hibernate3.HibernateTemplate$29.doInHibernate(HibernateTemplate.java:818) at org.springframework.orm.hibernate3.HibernateTemplate.execute(HibernateTemplate.java:364) at org.springframework.orm.hibernate3.HibernateTemplate.find(HibernateTemplate.java:809) at com.spider.scoreboard.dao.impl.ScorecardTreeDAOImpl.makeRoomForNewNodes(ScorecardTreeDAOImpl.java:822) at com.spider.scoreboard.dao.impl.ScorecardTreeDAOImpl.makeRoomForNewNode(ScorecardTreeDAOImpl.java:794) at com.spider.scoreboard.dao.impl.ScorecardTreeDAOImpl.setBoundsIfNecessary(ScorecardTreeDAOImpl.java:705) at com.spider.scoreboard.dao.impl.ScorecardTreeDAOImpl.saveScorecardNode(ScorecardTreeDAOImpl.java:499) at com.spider.scoreboard.service.impl.ScorecardTreeServiceImpl.saveScorecardNode(ScorecardTreeServiceImpl.java:899) at com.spider.scoreboard.metric.SaveMetricAction.execute(SaveMetricAction.java:125) at com.spider.scoreboard.metric.SaveMetricAction$$FastClassByCGLIB$$84d479e3.invoke(\) at net.sf.cglib.proxy.MethodProxy.invoke(MethodProxy.java:149) at org.springframework.aop.framework.Cglib2AopProxy$CglibMethodInvocation.invokeJoinpoint(Cglib2AopProxy.java:698) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:122) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:144) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:144) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:144) at org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor.intercept(Cglib2AopProxy.java:643) at com.spider.scoreboard.metric.SaveMetricAction$$EnhancerByCGLIB$$5772a8a.execute(\) at org.apache.struts.action.RequestProcessor.processActionPerform(RequestProcessor.java:484) at org.apache.struts.action.RequestProcessor.process(RequestProcessor.java:274) at com.spider.scoreboard.framework.strutsx.ScoreboardRequestProcessor.process(ScoreboardRequestProcessor.java:356) at org.apache.struts.action.ActionServlet.process(ActionServlet.java:1482) at org.apache.struts.action.ActionServlet.doPost(ActionServlet.java:525) at javax.servlet.http.HttpServlet.service(HttpServlet.java:709) at javax.servlet.http.HttpServlet.service(HttpServlet.java:802) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:252) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at com.spider.scoreboard.framework.gzipfilter.CompressionFilter.doFilter(CompressionFilter.java:148) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:202) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at com.spider.scoreboard.framework.ContentTypeFilter.doFilterInternal(ContentTypeFilter.java:135) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:202) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at net.sf.morph.web.MorphFilter.doFilter(MorphFilter.java:43) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:202) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at org.springframework.orm.hibernate3.support.OpenSessionInViewFilter.doFilterInternal(OpenSessionInViewFilter.java:174) at com.spider.scoreboard.framework.springx.ScoreboardOpenSessionInViewFilter.doFilterInternal(ScoreboardOpenSessionInViewFilter.java:47) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:202) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at com.spider.scoreboard.framework.RequestLogFilter.doFilterInternal(RequestLogFilter.java:28) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:202) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:213) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:178) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:126) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:105) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:107) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:148) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:868) at org.apache.coyote.http11.Http11BaseProtocol$Http11ConnectionHandler.processConnection(Http11BaseProtocol.java:663) at org.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:527) at org.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(LeaderFollowerWorkerThread.java:80) at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:684) at java.lang.Thread.run(Unknown Source)   --- No further details from [SPR-1531](https://jira.spring.io/browse/SPR-1531?redirect=false)","closed","type: bug,","spring-projects-issues","2005-12-12T05:42:56Z","2012-06-19T03:54:28Z"
"","6169","Make AbstractTraceInterceptor.getLoggerForInvocation strip CGLIB suffix [SPR-1470]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-1470](https://jira.spring.io/browse/SPR-1470?redirect=false)** and commented  Currently using a trace interceptor and setting useDynamicLogging = true leads to some nasty log output if you try to log information about a class proxied by CGLIB:  DEBUG [Score Calculation Thread] (ScorecardTreeServiceImpl$$EnhancerByCGLIB$$99db1ff5:invokeUnderTrace) - BEGIN ScorecardTreeServiceImpl.getPeriodsNeedingCalculations(cargill) DEBUG [Score Calculation Thread] (ScorecardTreeDAOImpl$$EnhancerByCGLIB$$9d500e43:invokeUnderTrace) - BEGIN ScorecardTreeDAOImpl.getPeriodsNeedingCalculations(cargill)  It would be nice if the AbstractTraceInterceptor.getLoggerForInvocation method was edited so that the Logger returned strips CGLIB suffixes from class names before returning the Logger.  I'll be happy to create a patch if you think this change is worthwhile.  I was planning on changing the method like this:  // ClassUtils.getLongName is a new method, not currently implemented String loggerName = ClassUtils.getLongName(nvocation.getThis().getClass()); return (this.defaultLogger != null ? this.defaultLogger : LogFactory.getLog(loggerName));   --- No further details from [SPR-1470](https://jira.spring.io/browse/SPR-1470?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-11-14T08:14:24Z","2012-06-19T03:53:58Z"
"","6140","HibernateTemplate.update(String hql, Object[] args) missing [SPR-1440]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-1440](https://jira.spring.io/browse/SPR-1440?redirect=false)** and commented  A new feature in Hibernate 3 is the executeUpdate method of the Query object that allows bulk HQL update/delete operations to be performed.  There should be a corresponding HibernateTemplate.update method to allow for Spring applications to nicely access this feature.  Here's the relevant section of the Hibernate user's manual: http://www.hibernate.org/hib_docs/v3/reference/en/html_single/#batch-direct   ---  **Affects:** 1.2.5","closed","type: enhancement,","spring-projects-issues","2005-11-04T08:31:57Z","2012-06-19T03:54:32Z"
"","6130","[Patch] Add logging of HQL to HibernateTemplate [SPR-1430]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-1430](https://jira.spring.io/browse/SPR-1430?redirect=false)** and commented  All SQL executed by JdbcTemplate is logged.  The attached patch adds the equivalent functionality to the HibernateTemplate class.   ---  **Affects:** 1.2.5  **Attachments:** - [HibernateTemplate.patch](https://jira.spring.io/secure/attachment/11234/HibernateTemplate.patch) (_3.62 kB_)","closed","type: enhancement,","spring-projects-issues","2005-11-02T00:16:35Z","2006-02-15T02:42:09Z"
"","6235","spring.handlers File - Include in Module JARs [SPR-1536]","**[Matthew Porter](https://jira.spring.io/secure/ViewProfile.jspa?name=matthew)** opened **[SPR-1536](https://jira.spring.io/browse/SPR-1536?redirect=false)** and commented  This might be a little premature since 2.0 M1 is not released yet.  Currently, the only dist jar file that includes META-INF/spring.handlers is spring.jar.  This makes it difficult to use only the module jar files that one needs.  Perhaps place it in spring-core.jar.   --- No further details from [SPR-1536](https://jira.spring.io/browse/SPR-1536?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-12-14T03:14:59Z","2012-06-19T03:54:34Z"
"","6670","Spring-form tags missing  option [SPR-1977]","**[Matt Young](https://jira.spring.io/secure/ViewProfile.jspa?name=attack7)** opened **[SPR-1977](https://jira.spring.io/browse/SPR-1977?redirect=false)** and commented  When creating a \ block in HTML, I commnly use the \ tag to label the input elements.  the ""for"" attribute needs to match the ""name"" attribute (generated by the path in spring-form), so we should have access to paths for labels, too - for naming consistency.  e.g. Send Postal Mail (Or a message tag)  Thanks Rob!  (love the new form tags!)  Matt   ---  **Affects:** 2.0 M4","closed","type: enhancement,","spring-projects-issues","2006-05-03T07:03:14Z","2012-06-19T03:52:22Z"
"","6648","Chapter 13 Documentation corrections [SPR-1955]","**[Matt Young](https://jira.spring.io/secure/ViewProfile.jspa?name=attack7)** opened **[SPR-1955](https://jira.spring.io/browse/SPR-1955?redirect=false)** and commented  Read through Chap 13 and took some notes on simple grammatical errors to fix:  Sec 13.3.4  under description for ""SimpleFormController""  ""let's"" should be ""lets"".  Under AbstractWizardFormController, processFinish should be processFinish() and processCancel should be processCancel() for consistency  Sec 13.5.3 First paragraph, ""technologies"" is misspelled ""tehcnologies"" Second paragraph, missing period after ""expected data"" Third paragraph ""will just ask it to do it's work"" should be ""will just ask it to do its work"" Last paragraph should read: ""If using RedirectView and the view is created by the controller itself, it is preferable for the redirect URL to be injected into the controller so that it is not baked into the controller but configured in the context along with the view names.""  Sec 13.5.3.2  should be Sec 13.5.3.4 First paragraph, last sentence ""names, "" should have the comma removed Second paragraph, ""redirect:"" should be in a monospace font for consistency  Sec 13.5.3.3 should be Sec 13.5.3.5 First paragraph, ""forward:"" should be in a monospace font for consistency.  Last two sentences: ""but want to still be able to in some cases force"" => ""but want to still force"" Last sentence should read ""Note that you may also chain multiple view resolvers, instead.""  Sec 13.1 (Spring's multipart) should be Sec 13.8 with all subsections replaced  Sec 13.8 (Handling exceptions) should be Sec 13.9   ---  **Affects:** 2.0 M4","closed","type: enhancement,","spring-projects-issues","2006-04-25T04:10:09Z","2012-06-19T03:52:28Z"
"","6691","Misc. bugs in spring.ftl - IDs not used correctly and 'options' not HTML-escaped [SPR-1998]","**[Matt Ward](https://jira.spring.io/secure/ViewProfile.jspa?name=maward)** opened **[SPR-1998](https://jira.spring.io/browse/SPR-1998?redirect=false)** and commented   ---  **Affects:** 1.2.8, 2.0 M4","closed","type: bug,","spring-projects-issues","2006-05-10T02:59:20Z","2012-06-19T03:52:25Z"
"","6020","Spring-jBPM: Pass Spring Application Context into jBPM [SPR-1320]","**[Matt Segvich](https://jira.spring.io/secure/ViewProfile.jspa?name=msegvich)** opened **[SPR-1320](https://jira.spring.io/browse/SPR-1320?redirect=false)** and commented  If you want to use Spring from within a jBPM Action or Handler you need the ApplicationContext.  I would think this would be a common situation for users of Spring and jBPM.  Below is a method I've put in my own ""spring-bean"" that allows me to do this and may be of some benefit. Basically, you just need to pass the ApplicationContext into the ContextInstance.setTransientVariable method. I created my own version of signal().  public void signal(long processId, ApplicationContext ctx) { JbpmSession jbpmSession = sessionFactory.openJbpmSession(); jbpmSession.beginTransaction();      ProcessInstance process = jbpmSession.getGraphSession().loadProcessInstance(processId);     ContextInstance context = process.getContextInstance();     context.setTransientVariable(""springCtx"", ctx);     jbpmSession.getGraphSession().saveProcessInstance(process);     process.signal();     jbpmSession.getGraphSession().saveProcessInstance(process);     jbpmSession.commitTransaction();     jbpmSession.close();  }  I can then retrieve this from the EnvironmentContext in any of my custom jbpm handlers or actions.  The signal method seemed to make the most sense, at least so far for me.  I don't kn ow if there's a more elegant way of wiring the ApplicationContext into jBPM.   --- No further details from [SPR-1320](https://jira.spring.io/browse/SPR-1320?redirect=false)","closed","","spring-projects-issues","2005-09-22T10:34:42Z","2019-01-11T21:18:09Z"
"","6292","Use Quartz's JobExecutionContext.getMergedJobDataMap() in QuartzJobBean [SPR-1595]","**[Matt Magoffin](https://jira.spring.io/secure/ViewProfile.jspa?name=msqr)** opened **[SPR-1595](https://jira.spring.io/browse/SPR-1595?redirect=false)** and commented  Needed to pass a Quartz job some trigger-specific data via the Scheduler.triggerJobWithVolatileTrigger(jobName,groupName,jobMap) method (Quartz 1.5), but found that the Spring QuartzJobBean calls  context.getJobDetail().getJobDataMap()  to set properties on the job instance, which ignores the jobDataMap passed in with the Trigger, and is available by calling  context.getMergedJobDataMap()  I was wondering if this might be more useful in general, to change QuartzJobBean to use getMergedJobDataMap() to set the property values of the job instance.  I believe this is a new feature of Quartz 1.5, and would not be available with Quartz 1.4, but perhaps Spring's QuartzJobBean could support using the getMergedJobDataMap() if it found Quartz 1.5 available.   ---  **Affects:** 1.2.6","closed","type: enhancement,","spring-projects-issues","2006-01-05T12:32:47Z","2012-06-19T03:54:38Z"
"","6217","IllegalAccessException thrown in BeanWrapperImpl when accessing public method of private class [SPR-1518]","**[Matt Magoffin](https://jira.spring.io/secure/ViewProfile.jspa?name=msqr)** opened **[SPR-1518](https://jira.spring.io/browse/SPR-1518?redirect=false)** and commented  An IllegalAccessException can be thrown by BeanWrapperImpl when accessing a public method defined in a private class (that implements a public interface). The bug does not occur each time, however, but seems to occur after some garbage collection has been performed.  I'm attaching a test case and associated class that illustrates the problem.   ---  **Affects:** 1.2.6  **Attachments:** - [TestService.java](https://jira.spring.io/secure/attachment/11311/TestService.java) (_251 bytes_) - [TestServiceImpl.java](https://jira.spring.io/secure/attachment/11312/TestServiceImpl.java) (_571 bytes_) - [TestServiceJakartaTestCase.java](https://jira.spring.io/secure/attachment/11314/TestServiceJakartaTestCase.java) (_1.61 kB_) - [TestServiceTestCase.java](https://jira.spring.io/secure/attachment/11313/TestServiceTestCase.java) (_1.28 kB_)","closed","in: core,","spring-projects-issues","2005-12-06T13:39:01Z","2012-06-19T03:54:41Z"
"","6870","Increase granularity of Jsp tag hierarchy to provide more extension opportunities [SPR-2179]","**[Matt Benson](https://jira.spring.io/secure/ViewProfile.jspa?name=mbenson)** opened **[SPR-2179](https://jira.spring.io/browse/SPR-2179?redirect=false)** and commented  AbstractFormTag has functionality that would be useful for writers of any JSP tag.  This issue proposes that a superclass named in the spirit of AbstractELAwareTag be extracted, providing just the EL generalization.  Then it would probably make sense to rename AbstractFormTag in the spirit of AbstractHtmlGeneratingTag, providing the TagWriter (createTagWriter/writeTagContent) setup.  The three classes could, for convenience, live in org.springframework.web.servlet.tags, although it could make sense to put ""AbstractHtmlGeneratingTag"" and TagWriter in org.springframework.web.servlet.tags.html .  It might then make sense for the remaining tags from the form suite to live in org.springframework.web.servlet.tags.html.form .  These package rearrangements are not crucial however and are largely derived from Spring's early claims that its taglib avoided html generation (I can't find it now but I'm sure I'm not making it up).   ---  **Affects:** 2.0 RC1","closed","type: enhancement,","spring-projects-issues","2006-06-22T08:50:54Z","2008-01-07T03:37:46Z"
"","6839","request protected FormTag.getCommandName() [SPR-2148]","**[Matt Benson](https://jira.spring.io/secure/ViewProfile.jspa?name=mbenson)** opened **[SPR-2148](https://jira.spring.io/browse/SPR-2148?redirect=false)** and commented   ---  **Affects:** 2.0 M5","closed","type: enhancement,","spring-projects-issues","2006-06-16T06:54:06Z","2012-06-19T03:52:42Z"
"","6838","suggest form:form write name as commandName unless explicitly overridden. [SPR-2147]","**[Matt Benson](https://jira.spring.io/secure/ViewProfile.jspa?name=mbenson)** opened **[SPR-2147](https://jira.spring.io/browse/SPR-2147?redirect=false)** and commented   ---  **Affects:** 2.0 M5","closed","type: enhancement,","spring-projects-issues","2006-06-16T06:38:00Z","2012-06-19T03:52:29Z"
"","6821","regression:  enum constants not detected for hinted collection elements in 2.0 branch [SPR-2130]","**[Matt Benson](https://jira.spring.io/secure/ViewProfile.jspa?name=mbenson)** opened **[SPR-2130](https://jira.spring.io/browse/SPR-2130?redirect=false)** and commented  This was found by a colleague.  Apparently the classname is being translated to a resource path at some point and Class.forName therefore throws a CNFE.   ---  **Affects:** 2.0 M5  **Attachments:** - [enum.jar](https://jira.spring.io/secure/attachment/11702/enum.jar) (_1.83 kB_)","closed","in: core,","spring-projects-issues","2006-06-12T07:56:20Z","2012-06-19T03:52:44Z"
"","6780","probable typo in BindException javadoc [SPR-2088]","**[Matt Benson](https://jira.spring.io/secure/ViewProfile.jspa?name=mbenson)** opened **[SPR-2088](https://jira.spring.io/browse/SPR-2088?redirect=false)** and commented  BindException's top-level description says:  Exception to be thrown when abinding errors are considered fatal.  Shouldn't this be:  Exception to be thrown when binding errors are considered fatal.  ? s/abinding/binding/   ---  **Affects:** 2.0 M5","closed","type: enhancement,","spring-projects-issues","2006-06-01T10:48:32Z","2012-06-19T03:52:47Z"
"","6776","reference documentation for collection merge feature incorrectly describes the attribute as applying to the property element... [SPR-2084]","**[Matt Benson](https://jira.spring.io/secure/ViewProfile.jspa?name=mbenson)** opened **[SPR-2084](https://jira.spring.io/browse/SPR-2084?redirect=false)** and commented  ...rather than \, \, \, \ as would be proper.   ---  **Affects:** 2.0 M4","closed","type: enhancement,","spring-projects-issues","2006-05-31T09:48:00Z","2012-06-19T03:52:37Z"
"","6734","shouldn't AbstractDataBoundFormElementTag.getName() return the full path by default? [SPR-2041]","**[Matt Benson](https://jira.spring.io/secure/ViewProfile.jspa?name=mbenson)** opened **[SPR-2041](https://jira.spring.io/browse/SPR-2041?redirect=false)** and commented  Problem exists in current CVS.  With #6733 open, form tags don't work correctly with nested paths anyway, but if they did they still shouldn't bind properly because getName() is implemented as:  getPath();  Shouldn't the implementation be:  getBindPath(getPath());  ?  ---  **Affects:** 2.0 RC1  **Attachments:** - [2041patch.txt](https://jira.spring.io/secure/attachment/11696/2041patch.txt) (_1.76 kB_)","closed","type: bug,","spring-projects-issues","2006-05-19T04:12:25Z","2019-01-11T18:15:17Z"
"","6733","AbstractDataBoundFormElementTag looks for nested path in wrong scope. [SPR-2040]","**[Matt Benson](https://jira.spring.io/secure/ViewProfile.jspa?name=mbenson)** opened **[SPR-2040](https://jira.spring.io/browse/SPR-2040?redirect=false)** and commented  problem exists in current CVS, RC1 nightly.  Using page scope default but should be using request scope.   ---  **Affects:** 2.0 M5","closed","type: bug,","spring-projects-issues","2006-05-19T03:43:05Z","2012-06-19T03:52:32Z"
"","6684","ObjectUtils.nullSafeToString(Object obj) goes to a lot of trouble when obj instanceof String [SPR-1991]","**[Matt Benson](https://jira.spring.io/secure/ViewProfile.jspa?name=mbenson)** opened **[SPR-1991](https://jira.spring.io/browse/SPR-1991?redirect=false)** and commented  suggest adding  if (obj instanceof String { return (String) obj; }  as first or second test of this method.   --- No further details from [SPR-1991](https://jira.spring.io/browse/SPR-1991?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-05-08T06:20:49Z","2012-06-19T03:52:48Z"
"","6541","[PATCH] delimited string to typed array property conversion [SPR-1847]","**[Matt Benson](https://jira.spring.io/secure/ViewProfile.jspa?name=mbenson)** opened **[SPR-1847](https://jira.spring.io/browse/SPR-1847?redirect=false)** and commented  would this feature be likely to break things?  I like it...   ---  **Affects:** 2.0 M3  **Attachments:** - [delimStringToTypedArray.patch.txt](https://jira.spring.io/secure/attachment/11541/delimStringToTypedArray.patch.txt) (_1.43 kB_)","closed","type: enhancement,","spring-projects-issues","2006-03-31T08:17:44Z","2007-07-17T09:32:16Z"
"","6500","Form tags: OptionTag could use Spring beans property type conversion to detected selected-ness [SPR-1806]","**[Matt Benson](https://jira.spring.io/secure/ViewProfile.jspa?name=mbenson)** opened **[SPR-1806](https://jira.spring.io/browse/SPR-1806?redirect=false)** and commented  currently OptionTag tests whether getSelectedValue().equals(resolvedValue).  I wonder how difficult it would be to perform normal property conversion from OptionTag.value to the class of the (non-null) left accessible by the SelectTag, improving the equality test for e.g. LabeledEnums.  Feel free to mark this as not sane or what-have-you, though it feels reasonable enough to me.  Thanks, Matt   ---  **Affects:** 2.0 M3","closed","type: enhancement,","spring-projects-issues","2006-03-21T09:40:33Z","2012-06-19T03:54:27Z"
"","6470","where a null->Object[] method parameter conversion was null, is now Object[] {null} (i.e. size 1) [SPR-1773]","**[Matt Benson](https://jira.spring.io/secure/ViewProfile.jspa?name=mbenson)** opened **[SPR-1773](https://jira.spring.io/browse/SPR-1773?redirect=false)** and commented  This broke from M2 to M3.  I imagine this could be related to the CustomCollectionEditor changes referenced in the changelog, although I didn't see right off the bat how.  Testcase forthcoming.  ---  **Affects:** 1.2.7, 2.0 M3  **Attachments:** - [nullarraytest.jar](https://jira.spring.io/secure/attachment/11485/nullarraytest.jar) (_1.34 kB_)  **Issue Links:** - #6517 BeanWrapperImpl: wrong null treatment in array properties (_**""is duplicated by""**_)","closed","in: core,","spring-projects-issues","2006-03-09T09:08:31Z","2019-01-11T22:08:13Z"
"","6104","typo in docs/reference/src/resources.xml [SPR-1404]","**[Matt Benson](https://jira.spring.io/secure/ViewProfile.jspa?name=mbenson)** opened **[SPR-1404](https://jira.spring.io/browse/SPR-1404?redirect=false)** and commented  In this area: \  \The \classpath*:\ prefix\  You will find the text (emphasis added with asterisks):      One use for this mechanism is when doing component-style     application assembly. All components can 'publish' context definition     fragments to a ***well know*** location path, and when the final application     context is created using the same path prefixed via     classpath*:, all component fragments will be picked     up automatically.  Obviously this should be at least ""well known"" and possibly ""well-known"".  br, Matt   ---  **Affects:** 1.0 RC1, 1.0 RC2, 1.0 final, 1.0.1, 1.0.2, 1.1 RC1, 1.1 RC2, 1.1 final, 1.1.1, 1.1.2, 1.1.3, 1.1.4, 1.1.5, 1.2 RC1, 1.2 RC2, 1.2 final, 1.2.1, 1.2.2, 1.2.3, 1.2.4, 1.2.5, 1.2.6, 2.0 M1, 2.0 M2, 2.0 M5, 2.0 RC4","closed","type: enhancement,","spring-projects-issues","2005-10-21T01:06:05Z","2012-06-19T03:54:24Z"
"","6415","External properties setting fail with abstract beans [SPR-1718]","**[Mathieu Larchet](https://jira.spring.io/secure/ViewProfile.jspa?name=mlarchet)** opened **[SPR-1718](https://jira.spring.io/browse/SPR-1718?redirect=false)** and commented  When configuring a PropertyPlaceHolderConfigurer for external property file, ${xxx} parsing fail for abstract beans.  \ \ \/WEB-INF/classes/properties/config.properties\ \ \	 \ \\${name}\\      \","closed","in: core,","spring-projects-issues","2006-02-16T00:44:31Z","2019-01-11T22:08:00Z"
"","6802","Support vendor-specific flush mode ""never"" in JpaDialects [SPR-2110]","**[Masahiro Hirashima](https://jira.spring.io/secure/ViewProfile.jspa?name=mm04699)** opened **[SPR-2110](https://jira.spring.io/browse/SPR-2110?redirect=false)** and commented  I use Spring2.0-m5 JPA support.  I set my interface readOnly transaction.  `@Transactional`(readOnly = true) public interface FacadeService { void findOwner(); }  And modify property at findOwner() method.  public class FacadeServiceImpl  implements FacadeService { public void findOwner() { Owner owner = getOwnerDAO().findById(new Long(1)); // modify address property         owner.setAddress(""-"" + owner.getAddress()); } }  Then flush occur and data are changed...  I think that readOnly transaction shuld not flush data.  (Hibernate3 readOnly transactio is read only. not flush.)   ---  **Affects:** 2.0 M5  2 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2006-06-06T18:08:32Z","2012-06-19T03:52:24Z"
"","6024","JmsTemplate on WebSphereMQ V6.0 throw exception [SPR-1324]","**[Masahiro Hirashima](https://jira.spring.io/secure/ViewProfile.jspa?name=mm04699)** opened **[SPR-1324](https://jira.spring.io/browse/SPR-1324?redirect=false)** and commented  Spring1.2.5's JmsTemplate on WebSphereMQ V6.0 throw exception.  Exception in thread ""main"" org.springframework.jms.IllegalStateException: MQJMS1112: JMS1.1 Invalid operation for domain specific object; nested exception is javax.jms.IllegalStateException: MQJMS1112: JMS1.1 Invalid operation for domain specific object; nested exception is javax.jms.IllegalStateException: MQJMS1112: JMS1.1 Invalid operation for domain specific object javax.jms.IllegalStateException: MQJMS1112: JMS1.1 Invalid operation for domain specific object at com.ibm.mq.jms.MQQueueSession.createConsumer(MQQueueSession.java:398) at org.springframework.jms.core.JmsTemplate.createConsumer(JmsTemplate.java:459) at org.springframework.jms.core.JmsTemplate.doReceive(JmsTemplate.java:717) at org.springframework.jms.core.JmsTemplate$9.doInJms(JmsTemplate.java:682) at org.springframework.jms.core.JmsTemplate.execute(JmsTemplate.java:504) at org.springframework.jms.core.JmsTemplate.receive(JmsTemplate.java:679) at org.springframework.jms.core.JmsTemplate.receive(JmsTemplate.java:666) at org.springframework.jms.core.JmsTemplate.receiveAndConvert(JmsTemplate.java:764) at sample.SpringJmsConsumer.receive(SpringJmsConsumer.java:11) at sample.SpringJmsConsumer$$FastClassByCGLIB$$e788bff5.invoke(\) at net.sf.cglib.proxy.MethodProxy.invoke(MethodProxy.java:149) at org.springframework.aop.framework.Cglib2AopProxy$CglibMethodInvocation.invokeJoinpoint(Cglib2AopProxy.java:698) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:122) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:144) at org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor.intercept(Cglib2AopProxy.java:643) at sample.SpringJmsConsumer$$EnhancerByCGLIB$$340b4150.receive(\) at sample.SpringJmsConsumerMain.main(SpringJmsConsumerMain.java:14)  Spring1.2.4's JmsTemplate is no problem. 1.2.5's JmsTemplate implementation is wrong?   ---  **Affects:** 1.2.5","closed","type: bug,","spring-projects-issues","2005-09-26T15:45:35Z","2012-06-19T03:54:21Z"
"","6135","EAR application fails at deploy/redeploy due to WAR file inconsistencies [SPR-1435]","**[Martti Tamm](https://jira.spring.io/secure/ViewProfile.jspa?name=mtamm)** opened **[SPR-1435](https://jira.spring.io/browse/SPR-1435?redirect=false)** and commented  I am having problems with (re)deploying my EAR appication with WebLogic 8.1 SP4 and SP5 in both Windows XP and Linux environment as sometimes there are exceptions while reading the contents of the WAR.  I may get different exceptions depending on the application I deploy, though it's always related to reading a file in the WAR. Exception says that the file in the WAR is either missing or corrupt, though it's not true. The hardest part is that usually my EAR gets deployed while sometimes I must restart WebLogic to do do that -- there's almost no rule when will it happen.  It was hard for me to track down the cause, but I managed to create a simple test-case that most likely produces the effect while trying to read a configuration XML file. It says that the XML file is invalid, though it's quite there and all XML files are saved in UTF-8.  I also tested creating Hibernate configuration similar to the test-case but without Spring. However, I didn't get this problem any more.  Stacktrace I receive on WebLogic's console is following:  org.dom4j.DocumentException: invalid stored block lengths Nested exception: invalid stored block lengths at org.dom4j.io.SAXReader.read(SAXReader.java:484) at org.hibernate.cfg.Configuration.addInputStream(Configuration.java:398) at org.springframework.orm.hibernate3.LocalSessionFactoryBean.afterPropertiesSet(LocalSessionFactoryBean.java:631) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1058) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:363) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:226) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:147) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:269) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:318) at org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.refresh(AbstractRefreshableWebApplicationContext.java:134) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:230) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:156) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:48) at weblogic.servlet.internal.WebAppServletContext$FireContextListenerAction.run(WebAppServletContext.java:7044) at weblogic.security.acl.internal.AuthenticatedSubject.doAs(AuthenticatedSubject.java:321) at weblogic.security.service.SecurityManager.runAs(SecurityManager.java:121) at weblogic.servlet.internal.WebAppServletContext.notifyCreated(WebAppServletContext.java:1753) at weblogic.servlet.internal.WebAppServletContext.preloadResources(WebAppServletContext.java:3352) at weblogic.servlet.internal.WebAppServletContext.setStarted(WebAppServletContext.java:6208) at weblogic.servlet.internal.WebAppModule.start(WebAppModule.java:864) at weblogic.j2ee.J2EEApplicationContainer.start(J2EEApplicationContainer.java:2134) at weblogic.j2ee.J2EEApplicationContainer.activate(J2EEApplicationContainer.java:2175) at weblogic.management.deploy.slave.SlaveDeployer$ComponentActivateTask.activateContainer(SlaveDeployer.java:2520) at weblogic.management.deploy.slave.SlaveDeployer$ActivateTask.doCommit(SlaveDeployer.java:2438) at weblogic.management.deploy.slave.SlaveDeployer$Task.commit(SlaveDeployer.java:2155) at weblogic.management.deploy.slave.SlaveDeployer$Task.checkAutoCommit(SlaveDeployer.java:2254) at weblogic.management.deploy.slave.SlaveDeployer$Task.prepare(SlaveDeployer.java:2149) at weblogic.management.deploy.slave.SlaveDeployer$ActivateTask.prepare(SlaveDeployer.java:2401) at weblogic.management.deploy.slave.SlaveDeployer.processPrepareTask(SlaveDeployer.java:883) at weblogic.management.deploy.slave.SlaveDeployer.prepareDelta(SlaveDeployer.java:591) at weblogic.management.deploy.slave.SlaveDeployer.prepareUpdate(SlaveDeployer.java:500) at weblogic.drs.internal.SlaveCallbackHandler$1.execute(SlaveCallbackHandler.java:25) at weblogic.kernel.ExecuteThread.execute(ExecuteThread.java:224) at weblogic.kernel.ExecuteThread.run(ExecuteThread.java:183) Nested exception: java.util.zip.ZipException: invalid stored block lengths at java.util.zip.InflaterInputStream.read(InflaterInputStream.java:140) at java.util.zip.InflaterInputStream.read(InflaterInputStream.java:105) at java.io.FilterInputStream.read(FilterInputStream.java:66) at weblogic.apache.xerces.impl.XMLEntityManager$RewindableInputStream.read(XMLEntityManager.java:3494) at weblogic.apache.xerces.impl.XMLEntityManager.startEntity(XMLEntityManager.java:847) at weblogic.apache.xerces.impl.XMLEntityManager.startDocumentEntity(XMLEntityManager.java:782) at weblogic.apache.xerces.impl.XMLDocumentScannerImpl.setInputSource(XMLDocumentScannerImpl.java:260) at weblogic.apache.xerces.parsers.DTDConfiguration.parse(DTDConfiguration.java:499) at weblogic.apache.xerces.parsers.DTDConfiguration.parse(DTDConfiguration.java:581) at weblogic.apache.xerces.parsers.XMLParser.parse(XMLParser.java:152) at weblogic.apache.xerces.parsers.AbstractSAXParser.parse(AbstractSAXParser.java:1175) at weblogic.xml.jaxp.WebLogicXMLReader.parse(WebLogicXMLReader.java:135) at weblogic.xml.jaxp.RegistryXMLReader.parse(RegistryXMLReader.java:152) at org.dom4j.io.SAXReader.read(SAXReader.java:465) at org.hibernate.cfg.Configuration.addInputStream(Configuration.java:398) at org.springframework.orm.hibernate3.LocalSessionFactoryBean.afterPropertiesSet(LocalSessionFactoryBean.java:631) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1058) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:363) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:226) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:147) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:269) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:318) at org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.refresh(AbstractRefreshableWebApplicationContext.java:134) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:230) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:156) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:48) at weblogic.servlet.internal.WebAppServletContext$FireContextListenerAction.run(WebAppServletContext.java:7044) at weblogic.security.acl.internal.AuthenticatedSubject.doAs(AuthenticatedSubject.java:321) at weblogic.security.service.SecurityManager.runAs(SecurityManager.java:121) at weblogic.servlet.internal.WebAppServletContext.notifyCreated(WebAppServletContext.java:1753) at weblogic.servlet.internal.WebAppServletContext.preloadResources(WebAppServletContext.java:3352) at weblogic.servlet.internal.WebAppServletContext.setStarted(WebAppServletContext.java:6208) at weblogic.servlet.internal.WebAppModule.start(WebAppModule.java:864) at weblogic.j2ee.J2EEApplicationContainer.start(J2EEApplicationContainer.java:2134) at weblogic.j2ee.J2EEApplicationContainer.activate(J2EEApplicationContainer.java:2175) at weblogic.management.deploy.slave.SlaveDeployer$ComponentActivateTask.activateContainer(SlaveDeployer.java:2520) at weblogic.management.deploy.slave.SlaveDeployer$ActivateTask.doCommit(SlaveDeployer.java:2438) at weblogic.management.deploy.slave.SlaveDeployer$Task.commit(SlaveDeployer.java:2155) at weblogic.management.deploy.slave.SlaveDeployer$Task.checkAutoCommit(SlaveDeployer.java:2254) at weblogic.management.deploy.slave.SlaveDeployer$Task.prepare(SlaveDeployer.java:2149) at weblogic.management.deploy.slave.SlaveDeployer$ActivateTask.prepare(SlaveDeployer.java:2401) at weblogic.management.deploy.slave.SlaveDeployer.processPrepareTask(SlaveDeployer.java:883) at weblogic.management.deploy.slave.SlaveDeployer.prepareDelta(SlaveDeployer.java:591) at weblogic.management.deploy.slave.SlaveDeployer.prepareUpdate(SlaveDeployer.java:500) at weblogic.drs.internal.SlaveCallbackHandler$1.execute(SlaveCallbackHandler.java:25) at weblogic.kernel.ExecuteThread.execute(ExecuteThread.java:224) at weblogic.kernel.ExecuteThread.run(ExecuteThread.java:183)  From the log I can also see that Spring can successfully find the Test.hbm.xml file and all settings, but the problem starts when Hibernate's org.hibernate.cfg.Configuration class starts to use these settings and begins to read this Test.hbm.cfg file.  Business effect for the issue: since this behaviour occurs in development and production mode, it's a cause for development slowdown and customer dissatisfaction.  Does anybody have an idea? Is Spring doing anything with the JAR files like mapping-files or could it be connected with how WebLogic handles compressed files during deploy time?  Thanks for any help!   ---  **Affects:** 1.2.4, 1.2.5  **Attachments:** - [testcase.zip](https://jira.spring.io/secure/attachment/11242/testcase.zip) (_3.76 MB_)","closed","type: bug,","spring-projects-issues","2005-11-04T02:52:46Z","2012-06-19T03:54:18Z"
"","6354","Customizing AbstractApplicationContext: Ordered PropertyOverrideConfigurer should profit from previously loaded configurers [SPR-1657]","**[Martin Zeltner](https://jira.spring.io/secure/ViewProfile.jspa?name=swisswheel)** opened **[SPR-1657](https://jira.spring.io/browse/SPR-1657?redirect=false)** and commented  Hello everybody,  I have to PropertyOverrideConfigurers. The first one has order number 0, the second 1. The first one will load the property ""db.name"". Now I'd like to profit in the second one (see xml snippet below). I this way I can easily change i.e. the database by adapting only property!  Best regards, Martin Zeltner  Xml config part:  ---                                             scenarios/db/raw/common-database-override-${db.name}.properties                                      ---  **Affects:** 1.2.6  **Issue Links:** - #9056 Default AbstractApplicationContext behavior: Ordered PropertyOverrideConfigurer should profit from previously loaded configurers","closed","type: enhancement,","spring-projects-issues","2006-02-01T17:21:40Z","2019-01-13T22:49:25Z"
"","5942","Add jdbc driver version number for sql error codes [SPR-1239]","**[Martin Zeltner](https://jira.spring.io/secure/ViewProfile.jspa?name=swisswheel)** opened **[SPR-1239](https://jira.spring.io/browse/SPR-1239?redirect=false)** and commented  Hello,  Beans of type 'org.springframework.jdbc.support.SQLErrorCodes', which are defined in 'sql-error-codes.xml' file can be declared for which 'databaseProductNames' they are. But some databases like MySql has changed their sql error codes from version 4.0 to 4.1! Another example is DBMS from version 3.0 to 3.1. My idea is to add a property to be able to say for with jdbc driver versions the sql error codes are.  Example: \ \ \3.0-4.0\ \ \ \1054,1064,1146\ \ \ \1062\ \ \ \1213\ \ \  In the example above the sql error code would be taken for MySql with jdbc driver version from 3.0 to 4.0. The needed information can be extracted from database metadata. Perhaps someone thinks, why not take the database product version? At the end  the jdbc driver can say how to represent the occurred exception, so I think we must declare the jdbc driver version. Of course, if no matching jdbc verion specific bean could be found I would perfer to use the first matching for the database product name.  Any comments?  Cheers, Martin   ---  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2005-08-19T01:21:08Z","2008-01-07T09:16:24Z"
"","5890","Pooling with CommonsPoolTargetSource, expose whenExhaustedAction  [SPR-1187]","**[Martin Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=martinwebb)** opened **[SPR-1187](https://jira.spring.io/browse/SPR-1187?redirect=false)** and commented  Can you expose the Apache Commons Pool's whenExhaustedAction  via the CommonsPoolTargetSource?  Regards Martin   ---  **Affects:** 1.2.2","closed","type: enhancement,","spring-projects-issues","2005-07-28T20:30:48Z","2012-06-19T03:54:01Z"
"","5889","Pooling with CommonsPoolTargetSource, maxSize never hit [SPR-1186]","**[Martin Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=martinwebb)** opened **[SPR-1186](https://jira.spring.io/browse/SPR-1186?redirect=false)** and commented  I'm pooling POJOs with CommonsPoolTargetSource - I can get instances from the pool (even unique instances), but I can't seem to hit the max limit. The pool keeps on handing out instances.  Details and code at http://forum.springframework.org/viewtopic.php?p=29454   ---  **Affects:** 1.2.2","closed","in: core,","spring-projects-issues","2005-07-28T20:27:47Z","2019-01-11T19:35:03Z"
"","6228","Provide the ability to iterate over child ApplicationContext's  [SPR-1529]","**[Martin Thompson](https://jira.spring.io/secure/ViewProfile.jspa?name=martin@stimpy.demon.co.uk)** opened **[SPR-1529](https://jira.spring.io/browse/SPR-1529?redirect=false)** and commented  It would be really useful to have a method similar to the following to allow the enumeration of child contexts.  Collection\  getChildren();  This would be a good compliment to the ApplicationContext getParent() method.   ---  **Affects:** 1.2.6","closed","type: enhancement,","spring-projects-issues","2005-12-11T20:13:09Z","2006-01-09T20:05:21Z"
"","6003","A property gets converted to another type when a String variant is available. [SPR-1302]","**[Martin Thompson](https://jira.spring.io/secure/ViewProfile.jspa?name=martin@stimpy.demon.co.uk)** opened **[SPR-1302](https://jira.spring.io/browse/SPR-1302?redirect=false)** and commented  Not sure if this is a bug or designed behaviour but it was not what I expected.  If I have a class as follows with overloaded setters.  One for a specific type and the other for a String I would expect the String variant to be called as it is the closest match.  public class TestOverloaded { public void setPrice(String price) { System.out.println(""called string version""); m_price = new BigDecimal(price); }      public void setPrice(BigDecimal price)     {         System.out.println(""called BigDecimal version"");         m_price = price;     }          public BigDecimal getPrice()     {         return m_price;     }          public static void main(String[] args)     {         BeanFactory factory = new XmlBeanFactory(new ClassPathResource(""spring.xml""));              TestOverloaded o = (TestOverloaded)factory.getBean(""testOverloaded"");              System.out.println(""o.getPrice() = "" + o.getPrice());     }          private BigDecimal m_price;  }  \ \ \  If this is expected behaviour how do you ever get the String variant called if that is what's required?  Would it be possible to add 'arg-type' attributes so it can behave like constructor auguments?  I expected the String version to be called in the above example but the BigDecimal version got called.  Regards, Martin...   ---  **Affects:** 1.2.4","closed","in: core,","spring-projects-issues","2005-09-14T19:52:05Z","2019-01-12T16:30:06Z"
"","6000","Bean properties setting behaviour with inner and outer beans change when aspects are applied. [SPR-1299]","**[Martin Thompson](https://jira.spring.io/secure/ViewProfile.jspa?name=martin@stimpy.demon.co.uk)** opened **[SPR-1299](https://jira.spring.io/browse/SPR-1299?redirect=false)** and commented  If I set a property on a bean which is a bean itself then reference the outer/parent this works when aspects are not applied but not when they are.  The following fragment works when no aspects are applied.  \ \ \ \ \ \ \ \ \  However when I add the following aspect I get an error.  \ \ \  \ \ \ \ \ \ \ \      [java] 2005-09-13 17:13:00,026 [main] INFO  org.springframework.beans.factory.xml.XmlBeanDefinitionReader - Loading XML bean definitions from class path resource [spring.xml]     [java] 2005-09-13 17:13:00,120 [main] INFO  org.springframework.beans.factory.xml.XmlBeanFactory - Creating shared instance of singleton bean 'parentNode'     [java] Exception in thread ""main"" org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'childNode' defined in class path resource [spring.xml]: Error setting property values; nested exception is org.springframework.beans.PropertyAccessExceptionsException: PropertyAccessExceptionsException (1 errors); nested propertyAccessExceptions are: [org.springframework.beans.TypeMismatchException: Failed to convert property value of type [java.lang.String] to required type [test.AbstractNode] for property 'parent']     [java] PropertyAccessExceptionsException (1 errors)     [java] org.springframework.beans.TypeMismatchException: Failed to convert property value of type [java.lang.String] to required type [test.AbstractNode] for property 'parent'     [java] 	at org.springframework.beans.BeanWrapperImpl.doTypeConversionIfNecessary(BeanWrapperImpl.java:1103)     [java] 	at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:848)     [java] 	at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:733)     [java] 	at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:890)     [java] 	at org.springframework.beans.BeanWrapperImpl.setPropertyValues(BeanWrapperImpl.java:917)     [java] 	at org.springframework.beans.BeanWrapperImpl.setPropertyValues(BeanWrapperImpl.java:906)     [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1026)     [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:823)     [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:345)     [java] 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBeanDefinition(BeanDefinitionValueResolver.java:147)     [java] 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:96)     [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1012)     [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:823)     [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:345)     [java] 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:226)     [java] 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:147)     [java] 	at test.TestNode.main(TestNode.java:51)    ---  **Affects:** 1.2.4","closed","in: core,","spring-projects-issues","2005-09-13T03:18:37Z","2019-01-11T19:22:56Z"
"","6762","o:XML Scripting Support [SPR-2070]","**[Martin Klang](https://jira.spring.io/secure/ViewProfile.jspa?name=marser)** opened **[SPR-2070](https://jira.spring.io/browse/SPR-2070?redirect=false)** and commented  Attached to this issue is code which provides scripting support in Spring for o:XML (see http://www.o-xml.org/). The code is in a zipfile that can be unzipped in the (checked out) Spring CVS directory. It includes a ScriptFactory and ScriptUtils in src/org/springframework/scripting/oxml and tests in test/org/springframework/scripting/oxml, plus the required lib/objectbox.jar. The tests include several simple examples, some showing interoperability with Java beans and other scripted beans (JRuby).   ---  **Affects:** 2.0 M2  **Attachments:** - [oxml-spring-src.jar](https://jira.spring.io/secure/attachment/11660/oxml-spring-src.jar) (_896.53 kB_)","closed","type: enhancement,","spring-projects-issues","2006-05-29T01:50:21Z","2012-06-19T09:37:23Z"
"","6866","Session scope not working with JSF and DelegatingVariableResolver [SPR-2175]","**[Martin Grotzke](https://jira.spring.io/secure/ViewProfile.jspa?name=martin.grotzke)** opened **[SPR-2175](https://jira.spring.io/browse/SPR-2175?redirect=false)** and commented  Hi,  i use jsf with the spring DelegatingVariableResolver. In the applicationContext.xml i define a bean with singleton=""false"" and scope=""session"" This bean is used in a template as variable (e.g. \ within a facelets template). When i invoke the jsf page, for each usage of the variable a new bean instance is created, e.g. if i use s.th. like #{testController....} twice in the template, two instances of the bean are created for one request.  Cheers, Martin   ---  **Affects:** 2.0 RC1","closed","in: core,","spring-projects-issues","2006-06-22T02:19:50Z","2019-01-12T16:29:10Z"
"","6118","build sandbox fails with JDK 1.4 [SPR-1418]","**[Martin Goldhahn](https://jira.spring.io/secure/ViewProfile.jspa?name=mgoldhahn)** opened **[SPR-1418](https://jira.spring.io/browse/SPR-1418?redirect=false)** and commented  building the sandbox with JDK 1.4.2 fails to build the **.scheduling.concurrent.** classes    ---  **Affects:** 1.2.5  **Attachments:** - [build.xml.patch](https://jira.spring.io/secure/attachment/11224/build.xml.patch) (_740 bytes_)","closed","type: bug,","spring-projects-issues","2005-10-24T21:59:00Z","2012-06-19T03:54:17Z"
"","6191","Inner bean declaration that uses factory-bean and factory-method attributes requires an id.. [SPR-1492]","**[Martin Bartlett](https://jira.spring.io/secure/ViewProfile.jspa?name=nitrambass)** opened **[SPR-1492](https://jira.spring.io/browse/SPR-1492?redirect=false)** and commented  \           	               	       	     	          	  \  Fails with:  Exception: Error registering bean with name '' defined in file [C:\Documents and Settings\MBartlet\Mes documents\Spring\Tests\SpringTest.xml]: Unnamed bean defi nition specifies neither 'class' nor 'parent' - can't generate name  Changing to  \           	               	       	     	          	  \  makes it work  Doc says I don't need an ID. Logic tells me that too.   ---  **Affects:** 1.2.6","closed","in: core,","spring-projects-issues","2005-11-23T00:45:47Z","2012-06-19T03:54:38Z"
"","6813","OpenSessionInViewFilter Class Documentation (Hibernate Support) [SPR-2122]","**[Martin Ahrer](https://jira.spring.io/secure/ViewProfile.jspa?name=martinahrer)** opened **[SPR-2122](https://jira.spring.io/browse/SPR-2122?redirect=false)** and commented  WARNING: Applying this filter to existing logic can cause issues that have not appeared before, through the use of a single Hibernate Session for the processing of an entire request. In particular, the reassociation of persistent objects with a Hibernate Session has to occur at the very beginning of request processing, to avoid clashes will already loaded instances of the same objects.  I guess ""to avoid clashes will already loaded instances"" should be ""to avoid clashes WITH already loaded instances""   ---  **Affects:** 2.0 M5","closed","type: bug,","spring-projects-issues","2006-06-11T04:32:15Z","2012-06-19T03:52:31Z"
"","5990","Clearify ErrorMessage in ClassEditor [SPR-1289]","**[Markus Wolf](https://jira.spring.io/secure/ViewProfile.jspa?name=knisterpeter)** opened **[SPR-1289](https://jira.spring.io/browse/SPR-1289?redirect=false)** and commented  When a class is not found (ClassNotFoundException) by the org.springframework.beans.propertyeditors.ClassEditor in method setAsText then an error message is generated saying: ""Invalid class name: ..."". In my opinion a message like ""ClassNotFound: ..."" would be much more clear, because Java developers tend to know what a ClassNotFound Exception means, but ""Invalid classname"" sounds strange. ;-)   ---  **Affects:** 1.2.3","closed","type: enhancement,","spring-projects-issues","2005-09-07T03:05:37Z","2012-06-19T03:54:00Z"
"","5927","BeanNameUrlHandlerMapping should override requiredContextClass [SPR-1225]","**[Markus Wolf](https://jira.spring.io/secure/ViewProfile.jspa?name=knisterpeter)** opened **[SPR-1225](https://jira.spring.io/browse/SPR-1225?redirect=false)** and commented  Currently the required ContextClass is ApplicationContext which leads to the following error message when a non WebApplicationContext is set:  org.springframework.context.ApplicationContextException: Invalid application context: needs to be of type [org.springframework.context.ApplicationContext] at org.springframework.context.support.ApplicationObjectSupport.setApplicationContext(ApplicationObjectSupport.java:74)  The error message should better be needs to be of type [...WebApplicationContext]   ---  **Affects:** 1.2.3","closed","in: web,","spring-projects-issues","2005-08-11T21:37:55Z","2019-01-11T19:21:03Z"
"","6532","ValidationUtils.invokeValidator() throws exception if object to be validated is null [SPR-1838]","**[Markus Kalkbrenner](https://jira.spring.io/secure/ViewProfile.jspa?name=mkalkbrenner)** opened **[SPR-1838](https://jira.spring.io/browse/SPR-1838?redirect=false)** and commented  ValidationUtils.invokeValidator(validator, object, errors) throws NullPointerException if object is null:  java.lang.NullPointerException at org.springframework.validation.ValidationUtils.invokeValidator(ValidationUtils.java:53)  This happens when calling getClass() at line 53.  From my point of view the validator itself should decide if null is allowed or not. The step-by-step example assumes the same ( http://www.springframework.org/docs/MVC-step-by-step/Spring-MVC-step-by-step-Part-3.html ):      public void validate(Object obj, Errors errors) {         PriceIncrease pi = (PriceIncrease) obj;         if (pi == null) {             errors.rejectValue(""percentage"", ""error.not-specified"", null, ""Value required."");         }  I think it's irrelevant if the validator supports the object if it's null. So a simple patch looks like this:  Original: if (!validator.supports(object.getClass())) {  Replacement: if (null != object && !validator.supports(object.getClass())) {    ---  **Affects:** 1.2.7, 2.0 M3","closed","type: bug,","spring-projects-issues","2006-03-30T06:56:44Z","2012-06-19T03:54:38Z"
"","6060","Make it possible to wire multiple template loaders with FreemarkerConfigurer [SPR-1360]","**[Markus Härnvi](https://jira.spring.io/secure/ViewProfile.jspa?name=marvi)** opened **[SPR-1360](https://jira.spring.io/browse/SPR-1360?redirect=false)** and commented  I would like to chain two template loaders, one that looks in a database and one looking in the classpath. Today I could subclass FreemarkerConfigurer and override postProcessConfiguration().  It would be great to use the BeanFactory to create and wire template loaders with the Freemarker configuration.  http://forum.springframework.org/viewtopic.php?p=37140#37140  ---  **Affects:** 1.2.5  **Issue Links:** - #6132 Allow declarative addition of FreeMarker TemplateLoader's to FreeMarkerConfigurer (_**""is duplicated by""**_)","closed","type: enhancement,","spring-projects-issues","2005-10-07T19:27:32Z","2019-01-11T21:20:27Z"
"","6255","Unable to access the JMS sent message once it has been sent - need to to get CorrelationID [SPR-1557]","**[Mark](https://jira.spring.io/secure/ViewProfile.jspa?name=markscln)** opened **[SPR-1557](https://jira.spring.io/browse/SPR-1557?redirect=false)** and commented  When a message is created using the MessageCreator like - MessageCreator msg = new MessageCreator() { public Message createMessage(Session session) throws JMSException { TextMessage t =  session.createTextMessage(""Hello); return t; } I need access to the Message AFTER it is sent using MQ Series since MQ sets the correlation ID and I need this to retrieve the response. I cannot set the correlationID manually as MQ Series is simlpy generating one even if I do. Also access to the session would be good so we can create temporary queues. Using raw JMS I can do both of the above but cannot seem to in Spring. I would much prefer to use Spring but not if it is limiting the function available. Thanks   ---  **Affects:** 1.2.5","closed","type: enhancement,","spring-projects-issues","2005-12-20T14:42:01Z","2006-01-09T19:48:53Z"
"","6830","Error within an  example config in the 1.2 documentation, at section 9.3.5 [SPR-2139]","**[Mark Wolfe](https://jira.spring.io/secure/ViewProfile.jspa?name=markwolfe)** opened **[SPR-2139](https://jira.spring.io/browse/SPR-2139?redirect=false)** and commented  I have been beating my head against the sample xml in section 9.3.5 of the 1.2.x documentation I worked out it didn't work at all.  After some poking around I found the example in the 2.0 documenation was slightly different, and worked even! After merging parts of both i came up with the solution below.  Currently the example looks like this:  \ \ \ 	  \ \ \ \ \ \  \  \ \ \ \  This does not work, as AttributesJmxAttributeSource is an interface not an implementation... So i came up with the following working example.  \ \ \ \ \ \ \ \ \ \  \  \ \ \                      \   ---  **Affects:** 1.2.8","closed","type: bug,","spring-projects-issues","2006-06-13T14:23:09Z","2012-06-19T03:52:40Z"
"","6312","org.springframework.beans.factory.BeanCurrentlyInCreationException when using constructor in bean config [SPR-1615]","**[Mark Waschkowski](https://jira.spring.io/secure/ViewProfile.jspa?name=mwaschkowski)** opened **[SPR-1615](https://jira.spring.io/browse/SPR-1615?redirect=false)** and commented  org.springframework.beans.factory.BeanCurrentlyInCreationException is being thrown with the following config, which looks correct to me. As well, there is another instance that looks similiar but this one should be explanatory:  \ \                        	     	        org.postgresql.Driver     	        jdbc:postgresql:postgres     	        postgres     	        forgot     	                                                                   \  Stack trace:  DEBUG - AbstractBeanFactory.getBean(222) | Creating shared instance of singleton bean 'swapper' DEBUG - AbstractAutowireCapableBeanFactory.createBean(295) | Creating instance of bean 'swapper' with merged definition [Root bean: class [org.springframework.aop.target.HotSwappableTargetSource]; abstract=false; singleton=true; lazyInit=false; autowire=0; dependencyCheck=0; initMethodName=null; destroyMethodName=null; factoryMethodName=null; factoryBeanName=null; defined in class path resource [WEB-INF/devDatabase.xml]] DEBUG - AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInstantiation(224) | Invoking BeanPostProcessors before instantiation of bean 'swapper' DEBUG - AbstractAutoProxyCreator.getCustomTargetSource(296) | Checking for custom TargetSource for bean with name 'swapper' DEBUG - BeanDefinitionValueResolver.resolveInnerBeanDefinition(144) | Resolving inner bean definition 'org.springframework.jdbc.datasource.DriverManagerDataSource#8ddc4c' of bean 'swapper' DEBUG - AbstractAutowireCapableBeanFactory.createBean(295) | Creating instance of bean 'org.springframework.jdbc.datasource.DriverManagerDataSource#8ddc4c' with merged definition [Root bean: class [org.springframework.jdbc.datasource.DriverManagerDataSource]; abstract=false; singleton=true; lazyInit=false; autowire=0; dependencyCheck=0; initMethodName=null; destroyMethodName=null; factoryMethodName=null; factoryBeanName=null; defined in class path resource [WEB-INF/devDatabase.xml]] DEBUG - AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInstantiation(224) | Invoking BeanPostProcessors before instantiation of bean 'org.springframework.jdbc.datasource.DriverManagerDataSource#8ddc4c' DEBUG - CachedIntrospectionResults.\(141) | Getting BeanInfo for class [org.springframework.jdbc.datasource.DriverManagerDataSource] DEBUG - CachedIntrospectionResults.\(157) | Caching PropertyDescriptors for class [org.springframework.jdbc.datasource.DriverManagerDataSource] DEBUG - CachedIntrospectionResults.\(165) | Found property 'class' of type [java.lang.Class] DEBUG - CachedIntrospectionResults.\(165) | Found property 'connection' of type [java.sql.Connection] DEBUG - CachedIntrospectionResults.\(165) | Found property 'connectionProperties' of type [java.util.Properties] DEBUG - CachedIntrospectionResults.\(165) | Found property 'driverClassName' of type [java.lang.String] DEBUG - CachedIntrospectionResults.\(165) | Found property 'logWriter' of type [java.io.PrintWriter] DEBUG - CachedIntrospectionResults.\(165) | Found property 'loginTimeout' of type [int] DEBUG - CachedIntrospectionResults.\(165) | Found property 'password' of type [java.lang.String] DEBUG - CachedIntrospectionResults.\(165) | Found property 'url' of type [java.lang.String] DEBUG - CachedIntrospectionResults.\(165) | Found property 'username' of type [java.lang.String] DEBUG - CachedIntrospectionResults.forClass(87) | Class [org.springframework.jdbc.datasource.DriverManagerDataSource] is cache-safe DEBUG - BeanWrapperImpl.setPropertyValue(593) | About to invoke write method [public void org.springframework.jdbc.datasource.DriverManagerDataSource.setDriverClassName(java.lang.String) throws org.springframework.jdbc.CannotGetJdbcConnectionException] on object of class [org.springframework.jdbc.datasource.DriverManagerDataSource] INFO - DriverManagerDataSource.setDriverClassName(155) | Loaded JDBC driver: org.postgresql.Driver DEBUG - BeanWrapperImpl.setPropertyValue(598) | Invoked write method [public void org.springframework.jdbc.datasource.DriverManagerDataSource.setDriverClassName(java.lang.String) throws org.springframework.jdbc.CannotGetJdbcConnectionException] with value of type [java.lang.String] DEBUG - BeanWrapperImpl.setPropertyValue(593) | About to invoke write method [public void org.springframework.jdbc.datasource.DriverManagerDataSource.setUrl(java.lang.String)] on object of class [org.springframework.jdbc.datasource.DriverManagerDataSource] DEBUG - BeanWrapperImpl.setPropertyValue(598) | Invoked write method [public void org.springframework.jdbc.datasource.DriverManagerDataSource.setUrl(java.lang.String)] with value of type [java.lang.String] DEBUG - BeanWrapperImpl.setPropertyValue(593) | About to invoke write method [public void org.springframework.jdbc.datasource.DriverManagerDataSource.setUsername(java.lang.String)] on object of class [org.springframework.jdbc.datasource.DriverManagerDataSource] DEBUG - BeanWrapperImpl.setPropertyValue(598) | Invoked write method [public void org.springframework.jdbc.datasource.DriverManagerDataSource.setUsername(java.lang.String)] with value of type [java.lang.String] DEBUG - BeanWrapperImpl.setPropertyValue(593) | About to invoke write method [public void org.springframework.jdbc.datasource.DriverManagerDataSource.setPassword(java.lang.String)] on object of class [org.springframework.jdbc.datasource.DriverManagerDataSource] DEBUG - BeanWrapperImpl.setPropertyValue(598) | Invoked write method [public void org.springframework.jdbc.datasource.DriverManagerDataSource.setPassword(java.lang.String)] with value of type [java.lang.String] DEBUG - AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(243) | Invoking BeanPostProcessors before initialization of bean 'org.springframework.jdbc.datasource.DriverManagerDataSource#8ddc4c' DEBUG - AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(262) | Invoking BeanPostProcessors after initialization of bean 'org.springframework.jdbc.datasource.DriverManagerDataSource#8ddc4c' DEBUG - AbstractBeanFactory.getType(358) | Ignoring BeanCreationException on FactoryBean type check org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name 'swapper': Requested bean is currently in creation (circular reference when autowiring constructor?) at org.springframework.beans.factory.support.AbstractBeanFactory.getType(AbstractBeanFactory.java:317) at org.springframework.beans.factory.support.DefaultListableBeanFactory.isBeanTypeMatch(DefaultListableBeanFactory.java:249) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:158) at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:176) at org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator.findCandidateAdvisors(DefaultAdvisorAutoProxyCreator.java:107) at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findEligibleAdvisors(AbstractAdvisorAutoProxyCreator.java:76) at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.getAdvicesAndAdvisorsForBean(AbstractAdvisorAutoProxyCreator.java:62) at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization(AbstractAutoProxyCreator.java:235) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:267) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:364) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBeanDefinition(BeanDefinitionValueResolver.java:147) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:96) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.resolveConstructorArguments(AbstractAutowireCapableBeanFactory.java:714) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:611) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:329) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:226) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:147) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:275) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:320) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:87) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:72) at org.springframework.test.AbstractSpringContextTests.loadContextLocations(AbstractSpringContextTests.java:121) at org.springframework.test.AbstractDependencyInjectionSpringContextTests.loadContextLocations(AbstractDependencyInjectionSpringContextTests.java:210) at org.springframework.test.AbstractSpringContextTests.getContext(AbstractSpringContextTests.java:101) at org.springframework.test.AbstractDependencyInjectionSpringContextTests.setUp(AbstractDependencyInjectionSpringContextTests.java:178) at junit.framework.TestCase.runBare(TestCase.java:125) at junit.framework.TestResult$1.protect(TestResult.java:106) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.framework.TestResult.run(TestResult.java:109) at junit.framework.TestCase.run(TestCase.java:118) at junit.framework.TestSuite.runTest(TestSuite.java:208) at junit.framework.TestSuite.run(TestSuite.java:203) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196) DEBUG - CollectionFactory.createLinkedSetIfPossible(90) | Creating [java.util.LinkedHashSet] DEBUG - CachedIntrospectionResults.\(141) | Getting BeanInfo for class [org.springframework.aop.target.HotSwappableTargetSource] DEBUG - CachedIntrospectionResults.\(157) | Caching PropertyDescriptors for class [org.springframework.aop.target.HotSwappableTargetSource] DEBUG - CachedIntrospectionResults.\(165) | Found property 'class' of type [java.lang.Class] DEBUG - CachedIntrospectionResults.\(165) | Found property 'static' of type [boolean] DEBUG - CachedIntrospectionResults.\(165) | Found property 'target' of type [java.lang.Object] DEBUG - CachedIntrospectionResults.\(165) | Found property 'targetClass' of type [java.lang.Class] DEBUG - CachedIntrospectionResults.forClass(87) | Class [org.springframework.aop.target.HotSwappableTargetSource] is cache-safe DEBUG - AbstractAutowireCapableBeanFactory.autowireConstructor(674) | Bean 'swapper' instantiated via constructor [public org.springframework.aop.target.HotSwappableTargetSource(java.lang.Object)]   ---  **Affects:** 1.2.6","closed","type: bug,","spring-projects-issues","2006-01-14T02:48:56Z","2012-06-19T03:54:30Z"
"","6296","Add support for JMX ClassLoaderRepository [SPR-1599]","**[Mark Priest](https://jira.spring.io/secure/ViewProfile.jspa?name=mpriest)** opened **[SPR-1599](https://jira.spring.io/browse/SPR-1599?redirect=false)** and commented  A new feature was added in 2.0 M1 to support the use of a Spring application classloader as the context classloader for invoking Spring beans that are exposed as JMX MBeans.  This appeared in the API as the setExposeManagedResourceClassLoader operation in MBeanExporter class.  This approach to supporting classloaders in JMX is not the recommended aproach of using the javax.management.loading.ClassLoaderRepositor for handling classloader issues.  It would be nice if the implementation of this method could be changed or a new feature added so that the JMX ClassLoaderRepository approach is available to Spring users.  The implementation of setExposeManagedResourceClassLoader uses a SpringModelMBean and it appears to be designed to handle classloading issues for spring beans loaded in a container such as a web container. The SpringModelMBean implementation switches the context classloader of the SpringModelMBean to that of the context classloader when the SpringMBean was created before invoking operations or accessing attributes. I assume this is so the Spring bean uses the context classloader that the developer is expecting - namely the one used in the rest of the deployed application. This might not be the case in a web container, such as Tomcat, that creates an MBean server without the classloaders assigned to its web applications in the ClassLoaderRepository.  My organizaton is relatively new to Spring and we do not use it for JMX.  We do use JMX, however, and in some of our applications we have modules that are dynamically loaded using classloaders other than the system classloader.  We use JMX PrivateMLet classloaders and create our MBeans with them using this MBeanServer operation:  public ObjectInstance createMBean(String className, ObjectName name, ObjectName loaderName)  Before calling this method we register the MLets with the MBeanServer ClassLoaderRepository using the ObjectName referenced in ""loaderName"". This method of creating the MBean ensures that operations invoked and attributes retrieved on our MBean will use our MLet classloader as the context classloader.  I am not sure that the SpringMBean implementation will work for us or not yet. I suspect not because the MBeanServer in Sun's reference implementation (which we are using) is very picky about classloaders.  Again, it would be nice if we could configure Spring to create our beans using a specified classloader (namely a PrivateMLet) and use the MBeanServer create method.  That way we would be able to leverage the JMX ClassLoaderRepository.   ---  **Affects:** 2.0 M1","closed","type: enhancement,","spring-projects-issues","2006-01-07T11:33:24Z","2012-06-19T09:37:33Z"
"","5953","Auto proxy with optimize flag set to true results in advice not being executed [SPR-1251]","**[Mark Lesk](https://jira.spring.io/secure/ViewProfile.jspa?name=mlesk)** opened **[SPR-1251](https://jira.spring.io/browse/SPR-1251?redirect=false)** and commented  When configuring auto proxying with optimize set to true advice is not executed. If the opmptize property is set to false and JDK proxies are used then advice is executed.  I have debuged the application and confirmed that the cglib proxies are being created for the class and in fact are being accessed at runtime for the methods defined in the pointcut. However, the advice is not executed, specifically the invoke method is not called on the MethodInterceptor.  Attached is the spring config with the aop configuration and the MethodInterceptor implementation in question.   ---  **Affects:** 1.2.1  **Attachments:** - [RequestLevelCacheAspect.java](https://jira.spring.io/secure/attachment/11112/RequestLevelCacheAspect.java) (_6.39 kB_) - [Spring-Aop-Config.xml](https://jira.spring.io/secure/attachment/11111/Spring-Aop-Config.xml) (_2.75 kB_) - [Spring-Aop-Config.xml](https://jira.spring.io/secure/attachment/11110/Spring-Aop-Config.xml) (_5.28 kB_)","closed","in: core,","spring-projects-issues","2005-08-24T01:07:53Z","2012-06-19T03:54:22Z"
"","5952","AbstractAutoProxyCreator fails to work when frozen flag is set to true [SPR-1250]","**[Mark Lesk](https://jira.spring.io/secure/ViewProfile.jspa?name=mlesk)** opened **[SPR-1250](https://jira.spring.io/browse/SPR-1250?redirect=false)** and commented  When utilizing auto proxy creation through a descendent of AbstractAutoproxyCreator setting the frozen flag to true prevents the addition of advice to any of the created proxies making it impossible to use this optimization when auto proxying.  This problem is caused in the AbstractAutoProxyCreator.createProxy method when the following steps occur :  .... ProxyFactory proxyFactory = new ProxyFactory(); // Copy our properties (proxyTargetClass) inherited from ProxyConfig. proxyFactory.copyFrom(this);  during the copy operation the frozen attribute from the auto proxy creator is copied to the proxy factory. When the frozen attribute is set to true then the proxyFactory is frozen before any advice has been added.  To fix this I have made the following minor change :  ProxyFactory proxyFactory = new ProxyFactory(); // Copy our properties (proxyTargetClass) inherited from ProxyConfig. proxyFactory.copyFrom(this);  //Change : Frozen attribute copied which we don't want until after advice is added proxyFactory.setFrozen(false);  ... proceed to add advice  //Change :  Now that adivce is configured we can copy the frozen attribute before creating the proxy. proxyFactory.setFrozen(this.isFrozen());  return proxyFactory.getProxy();  This solves the problem.   ---  **Affects:** 1.2.3","closed","in: core,","spring-projects-issues","2005-08-23T23:55:00Z","2012-06-19T03:54:33Z"
"","6696","getBeansOfType() to provide singleton beans in registration order - AbstractBeanFactory.singletonCache to be Linked Map [SPR-2003]","**[Mark Kralj-Taylor](https://jira.spring.io/secure/ViewProfile.jspa?name=mark%20kralj-taylor)** opened **[SPR-2003](https://jira.spring.io/browse/SPR-2003?redirect=false)** and commented  AbstractBeanFactory doesn't store beans in registration order. /** Cache of singletons: bean name --> bean instance */ private final Map singletonCache = new HashMap(); If this were changed to: private final Map singletonCache = CollectionFactory.createLinkedMapIfPossible(16);  Then getBeansOfType() would return singleton beans in registration order.  My use case is that I have programatically registered several singleton beans with AbstractBeanfactory.registerSingleton(). Then later I want to get all beans of a prticular type, preserving registartion order as far as possible, with getBeansOfType().  JavaDoc for getBeansOfType(Class type), suggest that this should be the case, but would need singletonCache to be a LinkedHashMap for this to cover singleton beans. * The Map returned by this method should always return bean names and * corresponding bean instances \in the order of definition\ in the * backend configuration, as far as possible.    ---  **Affects:** 2.0 M4","closed","type: enhancement,","spring-projects-issues","2006-05-11T04:20:53Z","2012-06-19T03:52:39Z"
"","6469","Add test coverage for portlet support [SPR-1772]","**[Mark Fisher](https://jira.spring.io/secure/ViewProfile.jspa?name=mark.fisher)** opened **[SPR-1772](https://jira.spring.io/browse/SPR-1772?redirect=false)** and commented   ---  **Affects:** 2.0 M1, 2.0 M2, 2.0 M3","closed","type: task,","spring-projects-issues","2006-03-09T03:45:11Z","2012-06-19T03:54:01Z"
"","6013","Cannot set anonymous factory bean [SPR-1313]","**[Marius Scurtescu](https://jira.spring.io/secure/ViewProfile.jspa?name=mariuss)** opened **[SPR-1313](https://jira.spring.io/browse/SPR-1313?redirect=false)** and commented  You can create beans via instance factory method: \  But you cannot use this construct to set anonymous beans as properties. For example, this will not work: \ \ \ \ \  The following error is thrown: org.springframework.beans.factory.BeanDefinitionStoreException: Error registering bean with name '' defined in ServletContext resource [/WEB-INF/applicationContext.xml]: Unnamed bean definition specifies neither 'class' nor 'parent' - can't generate name  If you name the inner bean then it all works: \ \ \ \ \   ---  **Affects:** 1.1.5","closed","in: core,","spring-projects-issues","2005-09-20T11:04:15Z","2012-06-19T03:54:01Z"
"","5978","Cannot use default messages only with validation [SPR-1276]","**[Marius Scurtescu](https://jira.spring.io/secure/ViewProfile.jspa?name=mariuss)** opened **[SPR-1276](https://jira.spring.io/browse/SPR-1276?redirect=false)** and commented  While validating a form submission you can reject either field specific values (using rejectValue) or generic form issues (using reject). If you don't use proper error codes (because you don't want to use the Spring code/message system for example) then NoSuchMessageException exceptions will be generated. Basically you never get a chance to use the default message value.  Calling rejectValue with and empty or null error code will generate an exception regardles of your JSP code. Calling reject with an empty or null error code will generate an exception only if you try to bind to those errors.  #5412 may be related to this issue. See the comment from March 18.  ---  **Affects:** 1.1.5","closed","type: bug,","spring-projects-issues","2005-08-31T11:13:15Z","2019-01-11T19:22:14Z"
"","5965","Broken links in TLD documentation [SPR-1263]","**[Marius Scurtescu](https://jira.spring.io/secure/ViewProfile.jspa?name=mariuss)** opened **[SPR-1263](https://jira.spring.io/browse/SPR-1263?redirect=false)** and commented  The taglib documentation index page is making references to two articles in the last paragraph. Both links are broken.   ---  **Affects:** 1.2.4","closed","type: bug,","spring-projects-issues","2005-08-29T08:26:35Z","2012-06-19T03:54:16Z"
"","6370","Error parsing XML bean definitions with oracles xmlparser.jar on classpath: ""Unable to locate NamespaceHandler ..."" [SPR-1673]","**[Marian Kelc](https://jira.spring.io/secure/ViewProfile.jspa?name=mkelc)** opened **[SPR-1673](https://jira.spring.io/browse/SPR-1673?redirect=false)** and commented  The error arises when you try to construct a ApplicationContext with ClassPathXmlApplicationContext with  the xmlparser.jar from oracle (toplink) on the classpath:  Unable to locate NamespaceHandler for namespace []. org.springframework.beans.factory.BeanDefinitionStoreException: Unable to locate NamespaceHandler for namespace []. at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.parseCustomElement(DefaultXmlBeanDefinitionParser.java:411) ...  If you try to get the namespaceuri on a DOM-Element constructed with the oracle-XML Parser normally shipped with toplink, the default-namespace is not represented through null but through the empty string. (When calling org.w3c.dom.Node.getNamespaceURI()). The Java5 javadoc states:  ""The namespace URI of this node, or null if it is unspecified (see ). ""  The error happens because org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.isDefaultNamespace doesnt recognize the empty string for the namespaceUri as the default-namespace.  This must not be a spring bug but merely a false implementation of the xmlparser of oracle. Since the toplink libraries must have this parser to work properly it must be on the classpath when using toplink. I didn't found a way how to stop it from being used from other modules.  Maybe our patch makes spring more stable. It defines the empty string as uri for the default-Namespace. Maybe the behaviour can be controlled through a system-property?  =======cut here======= --- org/springframework/beans/factory/xml/DefaultXmlBeanDefinitionParser.java	(revision 2) +++ org/springframework/beans/factory/xml/DefaultXmlBeanDefinitionParser.java	(working copy) @@ -379,7 +379,7 @@ }      private boolean isDefaultNamespace(String namespaceUri) {  -         return namespaceUri == null || BEANS_NAMESPACE_URI.equals(namespaceUri);  +         return namespaceUri == null || """".equals(namespaceUri) || BEANS_NAMESPACE_URI.equals(namespaceUri);    }    private int parseDefaultElement(Element ele) {   =======cut here=======  We dont know what effect it would have on other parts - its simply a suggestion.   ---  **Affects:** 2.0 M2","closed","in: core,","spring-projects-issues","2006-02-05T23:43:07Z","2012-06-19T03:54:20Z"
"","6836","Broken link in MultiActionController JavaDoc comment [SPR-2145]","**[Marco](https://jira.spring.io/secure/ViewProfile.jspa?name=mercuron)** opened **[SPR-2145](https://jira.spring.io/browse/SPR-2145?redirect=false)** and commented  Not really a bug: The link in ""See also description of workflow performed by superclasses here."" in the type documentation of MultiactionController.java is broken. Marco   ---  **Affects:** 1.2.8","closed","in: core,","spring-projects-issues","2006-06-15T00:56:32Z","2012-06-19T03:52:44Z"
"","5926","Bean is not eligible for getting processed by all BeanPostProcessors [SPR-1224]","**[Marcin Zduniak](https://jira.spring.io/secure/ViewProfile.jspa?name=zduniak)** opened **[SPR-1224](https://jira.spring.io/browse/SPR-1224?redirect=false)** and commented  I'm using TopLinkDaoSupport to introduce DAO support in my web application (Oracle implementation of JSF: ADF). I'm using TopLinkTransactionManager to introduce transaction to my environment. I'm using such beans to introduce transactional environment:  \ \ \ \ \             PROPAGATION_REQUIRED                                                                                                                  *Dao                         I am able to delete existing and save new objects in the database. But I'M NOT able to save edited object in the database. It is my log:  2005-08-12 11:55:08 org.springframework.web.context.ContextLoader initWebApplicationContext  INFO: Root WebApplicationContext: initialization started  2005-08-12 11:55:08 org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions  INFO: Loading XML bean definitions from ServletContext resource [/WEB-INF/springDaoContext.xml]  2005-08-12 11:55:09 org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions  INFO: Loading XML bean definitions from ServletContext resource [/WEB-INF/springSchedulerContext.xml]  2005-08-12 11:55:09 org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions  INFO: Loading XML bean definitions from ServletContext resource [/WEB-INF/springAuthorizationContext.xml]  2005-08-12 11:55:09 org.springframework.context.support.AbstractRefreshableApplicationContext refreshBeanFactory  INFO: Bean factory for application context [Root WebApplicationContext]: org.springframework.beans.factory.support.DefaultListableBeanFactory defining beans [toplinkSessionFactoryBean,subKlasyfikatoryUbDao,subSlownikiDao,subPlanyDao,subJednostkiStatDao,subPozycjeRejestrowDao,subPozycjePlanowDao,subSekwencjeDao,transactionManager,matchAllWithPropReq,matchAllTxInterceptor,autoProxyCreator,authorizationManager]; root of BeanFactory hierarchy  2005-08-12 11:55:09 org.springframework.context.support.AbstractApplicationContext refresh  INFO: 13 beans defined in application context [Root WebApplicationContext]  2005-08-12 11:55:09 org.springframework.core.CollectionFactory \  INFO: JDK 1.4+ collections available  2005-08-12 11:55:09 org.springframework.core.CollectionFactory \  INFO: Commons Collections 3.x available  2005-08-12 11:55:09 org.springframework.beans.factory.support.AbstractBeanFactory getBean  INFO: Creating shared instance of singleton bean 'autoProxyCreator'  2005-08-12 11:55:09 org.springframework.aop.framework.DefaultAopProxyFactory \  INFO: CGLIB2 available: proxyTargetClass feature enabled  2005-08-12 11:55:09 org.springframework.context.support.AbstractApplicationContext$BeanPostProcessorChecker postProcessAfterInitialization  ************  INFO: Bean 'autoProxyCreator' is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying  ************  2005-08-12 11:55:09 org.springframework.context.support.AbstractApplicationContext initMessageSource  INFO: Unable to locate MessageSource with name 'messageSource': using default [org.springframework.context.support.DelegatingMessageSource@11d]  2005-08-12 11:55:09 org.springframework.context.support.AbstractApplicationContext initApplicationEventMulticaster  INFO: Unable to locate ApplicationEventMulticaster with name 'applicationEventMulticaster': using default [org.springframework.context.event.SimpleApplicationEventMulticaster@11e]  2005-08-12 11:55:09 org.springframework.ui.context.support.UiApplicationContextUtils initThemeSource  INFO: No ThemeSource found for [Root WebApplicationContext]: using ResourceBundleThemeSource  2005-08-12 11:55:09 org.springframework.beans.factory.support.DefaultListableBeanFactory preInstantiateSingletons  INFO: Pre-instantiating singletons in factory [org.springframework.beans.factory.support.DefaultListableBeanFactory defining beans [toplinkSessionFactoryBean,subKlasyfikatoryUbDao,subSlownikiDao,subPlanyDao,subJednostkiStatDao,subPozycjeRejestrowDao,subPozycjePlanowDao,subSekwencjeDao,transactionManager,matchAllWithPropReq,matchAllTxInterceptor,autoProxyCreator,authorizationManager]; root of BeanFactory hierarchy]  2005-08-12 11:55:09 org.springframework.beans.factory.support.AbstractBeanFactory getBean  INFO: Creating shared instance of singleton bean 'toplinkSessionFactoryBean'  2005-08-12 11:55:09 org.springframework.orm.toplink.LocalSessionFactory createSessionFactory  INFO: Initializing TopLink SessionFactory from [/META-INF/sessions.xml]  2005-08-12 11:55:23 org.springframework.beans.factory.support.AbstractBeanFactory getBean  INFO: Creating shared instance of singleton bean 'subKlasyfikatoryUbDao'  2005-08-12 11:55:23 org.springframework.beans.factory.support.AbstractBeanFactory getBean  INFO: Creating shared instance of singleton bean 'matchAllTxInterceptor'  2005-08-12 11:55:23 org.springframework.beans.factory.support.AbstractBeanFactory getBean  INFO: Creating shared instance of singleton bean 'transactionManager'  2005-08-12 11:55:23 org.springframework.beans.factory.support.AbstractBeanFactory getBean  INFO: Creating shared instance of singleton bean 'matchAllWithPropReq'  2005-08-12 11:55:23 org.springframework.beans.factory.support.AbstractBeanFactory getBean  INFO: Creating shared instance of singleton bean 'subSlownikiDao'  2005-08-12 11:55:23 org.springframework.beans.factory.support.AbstractBeanFactory getBean  INFO: Creating shared instance of singleton bean 'subPlanyDao'  2005-08-12 11:55:23 org.springframework.beans.factory.support.AbstractBeanFactory getBean  INFO: Creating shared instance of singleton bean 'subJednostkiStatDao' ....  I see similar problems in closed issues: #5606 and #5835, but I experience it even now (in 1.2.1, 1.2.3 and 1.2.4).  ---  **Affects:** 1.2.1, 1.2.3, 1.2.4","closed","in: core,","spring-projects-issues","2005-08-11T21:30:21Z","2019-01-11T19:20:56Z"
"","6727","Setten servletInstance in ServletWrappingController through dependency injection [SPR-2034]","**[Marcel Panse](https://jira.spring.io/secure/ViewProfile.jspa?name=marcelpanse)** opened **[SPR-2034](https://jira.spring.io/browse/SPR-2034?redirect=false)** and commented  Create a setter for the servletInstance property so a servletInstance can be injected with a ref-bean in the context. Create a check if it is set in the afterPropertiesSet method like:  if (servletInstance == null) servletInstance = (Servlet) servletClass.newInstance();  This way i can create the servletInstance as a springbean (which is a service btw) and inject other springbeans into it (ie. like manager beans).   --- No further details from [SPR-2034](https://jira.spring.io/browse/SPR-2034?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-05-18T01:39:23Z","2010-12-11T22:33:07Z"
"","5957","CommonsHttpInvokerRequestExecutor does not support GZIP encoding [SPR-1255]","**[marcel ammerlaan](https://jira.spring.io/secure/ViewProfile.jspa?name=wokkel)** opened **[SPR-1255](https://jira.spring.io/browse/SPR-1255?redirect=false)** and commented  HTTP Invoker does not support reading from GZIP streams. The HttpClient can be changed to commons-http-client. When this client is used, and the http-header 'Accept-encoding: gzip' is added, the resulting response-stream is GZIP compressed. The CommonsHttpInvokerRequestExecutor class does not respect the 'Content-encoding: gzip' when it is sent back and assumes the stream is directly de-serializable.  The method doExecuteRequest() should read something like: protected RemoteInvocationResult doExecuteRequest( HttpInvokerClientConfiguration config, ByteArrayOutputStream baos) throws IOException, ClassNotFoundException {      	PostMethod postMethod = createPostMethod(config);     	try {     		postMethod.setRequestBody(new ByteArrayInputStream(baos.toByteArray()));     		executePostMethod(config, this.httpClient, postMethod);     		Header header = postMethod.getResponseHeader(""Content-encoding"");     		if(header==null || header.getValue().indexOf(""gzip"") == -1) {			     			return readRemoteInvocationResult(postMethod.getResponseBodyAsStream(), config.getCodebaseUrl());     		} else {     			return readRemoteInvocationResult(new GZIPInputStream(postMethod.getResponseBodyAsStream()), config.getCodebaseUrl());     		}     	}     	finally {     		// need to explicitly release because it might be pooled     		postMethod.releaseConnection();     	}     }    ---  **Affects:** 1.2 RC1, 1.2.3","closed","type: enhancement,","spring-projects-issues","2005-08-26T00:54:04Z","2012-06-19T03:54:08Z"
"","5993","Support for hexadecimal integer values for bean properties. [SPR-1292]","**[Marc Palmer](https://jira.spring.io/secure/ViewProfile.jspa?name=wangjammer5)** opened **[SPR-1292](https://jira.spring.io/browse/SPR-1292?redirect=false)** and commented  There is no obvious way to set integer properties from a string representation of a hexadecimal number.  I have written a custom property editor for this which works with any integer type which I offer for contribution.  [code] package org.springframework.something.somewhere;  import org.springframework.beans.BeanUtils; import org.springframework.util.Assert;  import java.beans.PropertyEditorSupport; import java.lang.reflect.InvocationTargetException; import java.lang.reflect.Method;  /** * `@author` mpalmer (marc@anyware.co.uk)   */   public class HexAwareIntEditor extends PropertyEditorSupport   {   private Class type = Integer.class;    protected Method valueOfWithRadix;    private static final Integer HEX_BASE = new Integer(16);   private static final Integer DEC_BASE = new Integer(10);    public Class getType()   {   return type;   }    public void setType(Class type)   {   this.type = type;   valueOfWithRadix = BeanUtils.findMethod(type,   ""valueOf"", new Class[] { String.class, Integer.TYPE });   Assert.notNull(valueOfWithRadix, ""Class assigned to 'type' property must support valueOf(String, int) for radix coercion"");   }    public String getAsText()   {   return getValue() != null ? getValue().toString() : """";   }    public void setAsText(String string) throws IllegalArgumentException   {   try   {   Integer base = DEC_BASE;   if (string.startsWith(""0x""))   {   string = string.substring(2);   base = HEX_BASE;   }   setValue( valueOfWithRadix.invoke( null, new Object[] { string, base }) );   }   catch (IllegalAccessException e)   {   throw new IllegalArgumentException(""Unable to access static valueOf(String, int) on class ""+type, e);   }   catch (InvocationTargetException e)   {   throw new IllegalArgumentException(""Unable to invoke static valueOf(String, int) on class ""+type, e);   }    }   }   [/code]  To register this editor, you use something like the following:  [code] \  \ \                                                                                                                                                                  [/code]   ---  **Affects:** 1.0 RC1, 1.0 RC2, 1.0 final, 1.0.1, 1.0.2, 1.1 RC1, 1.1 RC2, 1.1 final, 1.1.1, 1.1.2, 1.1.3, 1.1.4, 1.1.5, 1.2 RC1, 1.2 RC2, 1.2 final, 1.2.1, 1.2.2, 1.2.3, 1.2.4","closed","type: enhancement,","spring-projects-issues","2005-09-08T02:42:31Z","2012-06-19T03:53:57Z"
"","6719","MockFilterConfig javadoc problems in constructor description [SPR-2026]","**[Marc Logemann](https://jira.spring.io/secure/ViewProfile.jspa?name=logemann)** opened **[SPR-2026](https://jira.spring.io/browse/SPR-2026?redirect=false)** and commented  http://www.springframework.org/docs/api/org/springframework/mock/web/MockFilterConfig.html  Constructor description names MockServletConfig  instead of MockFilterConfig. Sounds pedantic but sometimes one is thankful for issues easy to resolve ;-)   --- No further details from [SPR-2026](https://jira.spring.io/browse/SPR-2026?redirect=false)","closed","type: bug,","spring-projects-issues","2006-05-16T20:01:07Z","2012-06-19T03:52:23Z"
"","6320","WebApplicationContextUtils with portlet support [SPR-1623]","**[Marc Logemann](https://jira.spring.io/secure/ViewProfile.jspa?name=logemann)** opened **[SPR-1623](https://jira.spring.io/browse/SPR-1623?redirect=false)** and commented  wouldnt it make sense to enhance WebApplicationContextUtils with sister methods which accept a PortletContext? Currently I am working in a Portal Environment where its not easy to get a ServletContext, but a PortletContext is not different at all, unfortunately Websphere's PortletContext doesnt extend ServletContext.  perhaps like this:  static WebApplicationContext getRequiredWebApplicationContext(PortletContext pc) static WebApplicationContext getWebApplicationContext(PortletContext pc)   ---  **Affects:** 1.2.6","closed","type: enhancement,","spring-projects-issues","2006-01-18T02:13:41Z","2012-06-19T03:54:02Z"
"","6509","DelegatingVariableResolver: Support for JSF scope aware spring beans [SPR-1815]","**[Manfred Geiler](https://jira.spring.io/secure/ViewProfile.jspa?name=manolito)** opened **[SPR-1815](https://jira.spring.io/browse/SPR-1815?redirect=false)** and commented  Access to spring beans from within JSF EL expressions via DelegatingVariableResolver is a nice feature. Well, it's only the half way, because you still need JSF managed beans when you want to have request scope, session scope or application scope beans in your webapp. On the other hand it would be nice, to be able to get rid of all managed beans at all. Not only you could have all your beans defined in a consistent way regardless if they where gui model beans, service beans or dao beans. But you would also be able to use spring features with your gui model beans: Imagine a method interceptor that catches all Exceptions and adds them as JSF messages to the current FacesContext.  The applied attachement solves this issue in an elegant way: You will find a new marker interface ""ScopeAware"". All gui model beans should implement this marker and return the proper scope. This could either be implemented hardcoded or in a more ""springy"" way: Just give your gui model beans a property ""scope"". Then you can define your former managed beans as spring beans like this: \ \ \  The attached DelegatingVariableResolver class is a patched version of the original DelegatingVariableResolver. It simply checks each bean if it is an instance of ScopeAware. If so, it adds the bean to the according faces scope. On the next VariableResolver call the original VariableResolver will then find the bean in the appropriate scope. There are also some checks and warnings if one tries to put a singleton bean into request or session scope which normally makes no sense, but could be dangerous and lead to hard to find errors.   ---  **Affects:** 2.0 M3  **Attachments:** - [DelegatingVariableResolver.java](https://jira.spring.io/secure/attachment/11519/DelegatingVariableResolver.java) (_7.49 kB_) - [ScopeAware.java](https://jira.spring.io/secure/attachment/11518/ScopeAware.java) (_293 bytes_)","closed","type: enhancement,","spring-projects-issues","2006-03-23T22:13:28Z","2007-01-06T18:59:06Z"
"","6134","SimpleNamingContextBuilder doesn't work when using multiple classloaders [SPR-1434]","**[Magnus Johansson](https://jira.spring.io/secure/ViewProfile.jspa?name=kkckkc)** opened **[SPR-1434](https://jira.spring.io/browse/SPR-1434?redirect=false)** and commented  When using maven for instance, different TestCases are loaded in different classloaders. If SimpleNamingContextBuilder is being setup in each testcase, this means that the static variable activated gets set for the first TestCase, but not for the second (as this is using a different classloader). This results in an IllegalStateException being thrown as NamingManager is using the system classloader, and there can only be one InitialContextFactoryBuilder registered per JVM.  I propose that SimpleNamingContextBuilder is changed to not only check the activated flag but also use NamingManager.hasInitialContextFactoryBuilder() to see if an InitialContextFactoryBuilder has already been registered, and if so use NamingManager.getInitialContext() to retrieve the InitialContext.   ---  **Affects:** 1.2.5","closed","in: core,","spring-projects-issues","2005-11-03T19:02:42Z","2019-01-12T16:29:54Z"
"","6675","util:constant needs id [SPR-1982]","**[Magnus Heino](https://jira.spring.io/secure/ViewProfile.jspa?name=magnus)** opened **[SPR-1982](https://jira.spring.io/browse/SPR-1982?redirect=false)** and commented    fails with ""java.lang.IllegalArgumentException: Attribute 'id' is required for element 'constant' when used as a top-level tag."".  Imho id should be set to the same string as static-field as default.   ---  **Affects:** 2.0 M4","closed","type: bug,","spring-projects-issues","2006-05-04T00:24:09Z","2006-05-04T22:33:00Z"
"","6674","RequiredBeanFactoryPostProcessor doesn't work with beans without a class attribute [SPR-1981]","**[Magnus Heino](https://jira.spring.io/secure/ViewProfile.jspa?name=magnus)** opened **[SPR-1981](https://jira.spring.io/browse/SPR-1981?redirect=false)** and commented  Beans that use parent and doesn't override class fails.  java.lang.IllegalStateException: Bean definition does not carry a resolved bean class at org.springframework.beans.factory.support.AbstractBeanDefinition.getBeanClass(AbstractBeanDefinition.java:266) at org.springframework.beans.factory.annotation.RequiredBeanFactoryPostProcessor.processBeanDefinition(RequiredBeanFactoryPostProcessor.java:103) at org.springframework.beans.factory.annotation.RequiredBeanFactoryPostProcessor.postProcessBeanFactory(RequiredBeanFactoryPostProcessor.java:81)   ---  **Affects:** 2.0 M4","closed","type: bug,","spring-projects-issues","2006-05-03T23:03:41Z","2019-01-11T22:20:54Z"
"","6357","Non singleton ProxyFactoryBean and getBean [SPR-1660]","**[Machiel Groeneveld](https://jira.spring.io/secure/ViewProfile.jspa?name=mgroeneveld)** opened **[SPR-1660](https://jira.spring.io/browse/SPR-1660?redirect=false)** and commented  I've set singleton to false on the ProxyFactoryBean, so my proxied bean should be created on every getObject() (this works).  But, when using the getBean(String name, Class requiredType, Object[] args) method on the AbstractBeanFactory it seems like it thinks its a singleton because it's in the singletonCache (the ProxyFactoryBean is always a singleton) but my target bean is not. The problem is that it skips the dependecy injecting stuff and I end up with an un-injected instance of my bean.   ---  **Affects:** 1.2.6  **Attachments:** - [proxytest.zip](https://jira.spring.io/secure/attachment/11464/proxytest.zip) (_2.46 kB_)","closed","in: core,","spring-projects-issues","2006-02-02T01:20:39Z","2012-06-19T03:54:31Z"
"","6314","managedVariableNames in AbstractDependencyInjectionSpringContextTests doesn't need to be populated [SPR-1617]","**[Machiel Groeneveld](https://jira.spring.io/secure/ViewProfile.jspa?name=mgroeneveld)** opened **[SPR-1617](https://jira.spring.io/browse/SPR-1617?redirect=false)** and commented  AbstractDependencyInjectionSpringContextTests#initManagedVariableNames() should skip the variable it uses to store all fields (managedVariableNames). Now you get an incorrect warning No bean with name 'managedVariableNames' while populating.   ---  **Affects:** 1.2.6","closed","type: enhancement,","spring-projects-issues","2006-01-16T02:59:45Z","2012-06-19T03:54:20Z"
"","6362","Incorrect prototype bean creation process - autoproxy doesn't work. [SPR-1665]","**[M. F.](https://jira.spring.io/secure/ViewProfile.jspa?name=mfaber)** opened **[SPR-1665](https://jira.spring.io/browse/SPR-1665?redirect=false)** and commented  AbstractBeanFactory->getBean  The method incorrectly creates instance of the bean in case it is the prototype: ... else {  // It's a prototype -> create a new instance.  bean = createBean(name, mergedBeanDefinition, args);  } ...  There is passed the variable 'name' instead of transformed 'beanName'. The result is that the  BeanNameAutoProxyCreator doesn't work properly.  Example: \ \\true\\ \ \ \transactionInterceptor\ \systemHibernateInterceptor\ \endoHibernateInterceptor\ \ \ \ \ \*Action\ \       \ \  \ \ \ \ \  autoProxyCreator bean gets beanName '/showList' instead of 'showListAction'. This name doesn't correspond to the declared 'beanNames' property (\*Action\)  In my opinion it should be: ... // It's a prototype -> create a new instance. bean = createBean(beanName, mergedBeanDefinition, args); ...   ---  **Affects:** 1.2.4","closed","in: core,","spring-projects-issues","2006-02-03T00:45:36Z","2012-06-19T03:54:08Z"
"","6864","Add support for custom socket factories (ex. SSL) in RmiProxyFactoryBean [SPR-2173]","**[Luigi Lauro](https://jira.spring.io/secure/ViewProfile.jspa?name=omero)** opened **[SPR-2173](https://jira.spring.io/browse/SPR-2173?redirect=false)** and commented  A while ago (Spring 1.0) support for custom socket factories for both registry and remote objects was added to RmiServiceExporter.  This effectively allows to use spring for exporting beans over RMI using custom socket factories, such as the Sun JDK5 SSL factories.  But, similar support in the RmiProxyFactoryBean was NOT added: RmiProxyFactoryBean has no way for providing a custom client/socket factory to be used for RMI connections.  This effectively negates all the benefits of having custom socket factories in the service exporter: I can export a bean over RMI-SSL using Spring, but I can't define a Spring bean which is a remote RMI-SSL object, since I have no way to specify to use SSL socket factories to do RMI connections.  Similar support as the one provided in RmiServiceExporter should therefore be added to RmiProxyFactoryBean, by giving user the chance to specify the socket factory to be used for RMI connections.   --- No further details from [SPR-2173](https://jira.spring.io/browse/SPR-2173?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-06-22T00:04:11Z","2012-06-19T03:52:26Z"
"","6673","Aspects can not have a proxied property [SPR-1980]","**[Luc Dew](https://jira.spring.io/secure/ViewProfile.jspa?name=bengali)** opened **[SPR-1980](https://jira.spring.io/browse/SPR-1980?redirect=false)** and commented  Hi, I think I found a bug with Spring's aspects. Actually I wanted to inject a HibernateDAO in a Spring aspect. My HibernateDAO implements a JobDAO interface. The hibernateDAO also extends HibernateDaoSupport and I made it transactional with the configuration below. The problem is that if the DAO is used a property in an aspect, it looses its transactional ""aspect"". Below, if i comment out the section with beforeAdviceJobAuth bean and jobAuthorizationAspect, my DAO is transactional, Hibernate session is flushed, transaction is committed. If I uncomment the declarations of the beans (beforeAdviceJobAuth bean and jobAuthorizationAspect) like below, the DAO is not transactional anymore. Hibernate session is flushed when a method of the HibernateDAO ends but transaction is never commited (or rollbacked). I think it is linked to the fact the DAO is injected in a Spring aspect and therefore proxied and I don't know why but it looses its transaction behaviour.      ...                                            	                    	         	         	         	          	      			                             	       	  	     	                           	     		     	         ---  **Affects:** 2.0 M4  **Attachments:** - [springaop.zip](https://jira.spring.io/secure/attachment/11631/springaop.zip) (_14.54 kB_) - [springaop.zip](https://jira.spring.io/secure/attachment/11620/springaop.zip) (_10.35 kB_)","closed","in: core,","spring-projects-issues","2006-05-03T19:43:36Z","2012-06-19T03:52:25Z"
"","6428","Problem with interfaces and ASPECTJ [SPR-1731]","**[Luc Dew](https://jira.spring.io/secure/ViewProfile.jspa?name=bengali)** opened **[SPR-1731](https://jira.spring.io/browse/SPR-1731?redirect=false)** and commented  I have described the issue here: http://forum.springframework.org/showthread.php?t=22459  It seems that Spring AOP (or Aspect J) doesn't handle well class that implements interfaces   ---  **Affects:** 2.0 M2","closed","in: core,","spring-projects-issues","2006-02-19T20:34:16Z","2019-01-12T16:29:34Z"
"","6848","Add JobListeners support to MethodInvokingJobDetailFactoryBean [SPR-2157]","**[Louis C. Hilden](https://jira.spring.io/secure/ViewProfile.jspa?name=hildenl)** opened **[SPR-2157](https://jira.spring.io/browse/SPR-2157?redirect=false)** and commented  Can you add a setJobListenerNames(String[] listeners) method to MethodInvokingJobDetailFactoryBean?  Internally you would simply call jobDetail.setJobListeners.addJobListener() for each name in the list.   This should be super-easy to implement.  Thanks, Lou   ---  **Affects:** 2.0 M5","closed","type: enhancement,","spring-projects-issues","2006-06-19T05:53:55Z","2012-06-19T03:52:21Z"
"","6681","Eliminate ClassNotFoundException during script support discovery [SPR-1988]","**[Louis C. Hilden](https://jira.spring.io/secure/ViewProfile.jspa?name=hildenl)** opened **[SPR-1988](https://jira.spring.io/browse/SPR-1988?redirect=false)** and commented  Would it be possible to improve the method org.springframework.scripting.config.LangNamespaceHandler and org.springframework.util.ClassUtils.isPresent uses to determine if Groovy, Ruby and BeanShell are present during application context time for those of us who don't install these runtime libraries?   Not only is it distrubing to run across exceptions in the log at DEBUG level when nothing is wrong, but throwing exceptions degrades performance (albiet small) at startup.    ---  **Affects:** 2.0 M4  **Attachments:** - [exceptions.txt](https://jira.spring.io/secure/attachment/11619/exceptions.txt) (_15.34 kB_)","closed","type: enhancement,","spring-projects-issues","2006-05-05T06:23:06Z","2012-06-19T03:52:22Z"
"","6192","imcomplete error message from DispatcherServlet when exception raised [SPR-1493]","**[Loren Rosen](https://jira.spring.io/secure/ViewProfile.jspa?name=loren%20rosen)** opened **[SPR-1493](https://jira.spring.io/browse/SPR-1493?redirect=false)** and commented  I got an error message from Tomcat while loading a servlet that looked like this:  Nov 23, 2005 2:03:22 PM org.springframework.web.servlet.FrameworkServlet processRequest SEVERE: Could not complete request javax.servlet.ServletException: Error occured during request processing: antlr/ANTLRException at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:757) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:658) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:392) [rest of stack trace elided]  The error message emitted by DispatcherServlet.doDispatch is missing a crucial piece of information: the cause of the exception here was a NoClassDefFoundError. I had to run Tomcat inside of a debugger in order to figure out the problem.   ---  **Affects:** 1.2.6","closed","type: enhancement,","spring-projects-issues","2005-11-23T08:04:48Z","2012-06-19T03:54:34Z"
"","6376","JmsTemplate should have the ability to ""Browse"" the queues [SPR-1678]","**[Lomesh Patel](https://jira.spring.io/secure/ViewProfile.jspa?name=lomesh)** opened **[SPR-1678](https://jira.spring.io/browse/SPR-1678?redirect=false)** and commented  JmsTemplate does not have ability to ""Browse"" the JMS Queue, which is required to check the depth of the queue and is very important for any middleware operation.  I have inherited JmsTemplate to implement the ""Browse"" functionality to it, but, looks like that is not enough. javax.jms.* API requires QueueBrowser object to be able to ""Browse"" the queue, which can only be created using javax.jms.Queue object.  Spring's JMS api doesn't have any way to create OR lookup Queue object. I'm in the process of implementing this entire functionality by inheriting required Classes.  But, I feel, it would be better and much easier if we can just add these functionality to the existing code.  Please let me know if you want that code.  Thanks, Lomesh   ---  **Affects:** 1.2.6  5 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2006-02-07T02:36:32Z","2012-06-19T03:54:31Z"
"","6472","Allow explicit suspend() and resume() operations on PlatformTransactionManager [SPR-1775]","**[Leonardo Quijano Vincenzi](https://jira.spring.io/secure/ViewProfile.jspa?name=lquijano)** opened **[SPR-1775](https://jira.spring.io/browse/SPR-1775?redirect=false)** and commented  This is related to the hack I described in #6471. I couldn't support long-session with transaction-suspension if my platform transaction manager doesn't allow explicit suspension (because, if I specify a transaction as REQUIRES_NEW, once the transaction is started I already have a new Hibernate Session bound and not the one I wanted to bind).  If that issue is solved successfully, perhaps this one isn't really needed. But in any case, explicit transaction suspension and resuming in PlatformTransactionManager could be useful for other use cases.  The following methods would be added to the interface and implementations that support it:  PlatformTransactionManager.java { void suspend(TransactionStatus ts); void resume(TransactionStatus ts); }  ---  **Affects:** 2.0 M3","closed","type: enhancement,","spring-projects-issues","2006-03-09T12:19:27Z","2019-01-11T22:08:18Z"
"","6471","Allow a custom session to be specified for a transaction in HibernateTransactionManager [SPR-1774]","**[Leonardo Quijano Vincenzi](https://jira.spring.io/secure/ViewProfile.jspa?name=lquijano)** opened **[SPR-1774](https://jira.spring.io/browse/SPR-1774?redirect=false)** and commented  As a related issue to #5407, allowing the user to bind a custom Session before a transaction (using HibernateTransactionManager), would be very useful to allow the user to use his customized long-session strategy.  I don't know how the session could get attached, but at some point I'd like to be able to use my own, HTTP-session stored Hibernate session, and bind it to the current transaction (or start a new transaction with this session instead of HibernateTransactionManager's default one).  Right now I implemented a hack, using TransactionSynchronizationManager.bind(sessionFactory, session) before transaction initialization, but it could break at any time with future code changes. Also, I haven't found a way to support transaction suspension with this approach.  ---  **Affects:** 2.0 M3  **Issue Links:** - #9432 HibernateTransactionManager uses `sessionFactory.openSession()` meaning that it is not aware of `hibernate.current_session_context_class` property","closed","type: enhancement,","spring-projects-issues","2006-03-09T12:12:01Z","2019-01-11T22:08:14Z"
"","6261","Make AnnotationTransactionAttributeSource Serializable [SPR-1563]","**[Leonardo Quijano Vincenzi](https://jira.spring.io/secure/ViewProfile.jspa?name=lquijano)** opened **[SPR-1563](https://jira.spring.io/browse/SPR-1563?redirect=false)** and commented  As the title says, to allow for annotated transactional services to be serializable for web container's session persistence.   ---  **Affects:** 1.2.6","closed","type: enhancement,","spring-projects-issues","2005-12-22T08:46:42Z","2012-06-19T03:53:56Z"
"","6412","MockServletContext getResourcePaths does not resolve directories correctly. [SPR-1715]","**[leo mendoza](https://jira.spring.io/secure/ViewProfile.jspa?name=leom)** opened **[SPR-1715](https://jira.spring.io/browse/SPR-1715?redirect=false)** and commented  The current implementation of getResourcePaths in MockServletContext does not append a trailing slash to the directories it finds. As a result, the ServletContextResourcePatternResolver does not operate correctly (since the recursion is triggered when a trailing slash is found).  Below is a potential patch for the problem. It is **not** heavily tested, nor is it modified for performance. However, since the MockServletContext is only used for testing, I didn't see performance as too big an issue. If there are any apparent bugs in my implementation, please let me know so I can update my local MockServletContext as well. I apologize for not having this in traditional ""patch"" format.  // ------ MockServletContext.getResourcePaths --------- public Set getResourcePaths(String path) { Resource resource = this.resourceLoader.getResource(getResourceLocation(path)); try { File file = resource.getFile(); file.listFiles();      		String[] fileList= file.list();     		String prefix = (path.endsWith(""/"") ? path : path + ""/"");     		Set resourcePaths = new HashSet(fileList.length);     		for (int i = 0; i < fileList.length; i++) {     			String rscPath = prefix + fileList[i];     			     			File f = new File(file.getPath() + ""/"" + fileList[i]);     			if( f.isDirectory() )				     				rscPath += ""/"";     			     			resourcePaths.add(rscPath);     		}     		return resourcePaths;     	}     	catch (IOException ex) {     		logger.info(""Couldn't get resource paths for "" + resource, ex);     		return null;     	}     }  //--------  Thanks, leo   --- No further details from [SPR-1715](https://jira.spring.io/browse/SPR-1715?redirect=false)","closed","type: bug,","spring-projects-issues","2006-02-15T09:19:06Z","2012-06-19T03:54:07Z"
"","6328","PathMatchingResourcePatternResolver support for URL-protocol ""wsjar"" [SPR-1631]","**[Leif John Korshavn](https://jira.spring.io/secure/ViewProfile.jspa?name=leif.john@korshavn.net)** opened **[SPR-1631](https://jira.spring.io/browse/SPR-1631?redirect=false)** and commented  My project wanted to use PathMatchingResourcePatternResolver to find certain xml-files in the classpath. Everything worked just fine for both file-system and jar-files until we deployed the application on WebSphere. Turns out WAS returns from URL.getProtocol() the string ""wsjar"" for jar-files (bundled in ear).  This makes the PathMatchingResourcePatternResolver treat the wsjar-entry like a file-system file, which is not, of course leading to the error:  Caused by: java.io.FileNotFoundException: URL [wsjar:file:/C:/IBM/WebSphere/AppServer/profiles/devel/installedApps/XPPC2270Node01Cell/nics-core.ear/nics-core-SNAPSHOT.jar!/typeresolver/] cannot be resolved to absolute file path because it does not reside in the file system: wsjar:file:/C:/IBM/WebSphere/AppServer/profiles/devel/installedApps/XPPC2270Node01Cell/nics-core.ear/nics-core-SNAPSHOT.jar!/typeresolver/ at org.springframework.util.ResourceUtils.getFile(ResourceUtils.java:173) at org.springframework.core.io.UrlResource.getFile(UrlResource.java:118) at org.springframework.core.io.support.PathMatchingResourcePatternResolver.doFindPathMatchingFileResources(PathMatchingResourcePatternResolver.java:382) at org.springframework.core.io.support.PathMatchingResourcePatternResolver.findPathMatchingResources(PathMatchingResourcePatternResolver.java:265) at org.springframework.core.io.support.PathMatchingResourcePatternResolver.getResources(PathMatchingResourcePatternResolver.java:202) at no.bbs.common.type.TypeResolver.\(TypeResolver.java:35) ... 69 more  I could find no documentation anywhere as to what makes ""wsjar"" differ from ""jar"".  My workaround is to implement the classpath-search myself, treating ""wsjar"" like ""jar. But I would very much appreciate support for IBM¨'s url-protocol wsjar.  Best regards!    ---  **Affects:** 1.2.6","closed","type: enhancement,","spring-projects-issues","2006-01-19T18:46:08Z","2019-01-13T22:49:43Z"
"","6161","Nullpointerexception in StringBuffer when using the org.springframework.aop.interceptor.PerformanceMonitorInterceptor [SPR-1462]","**[Lars Rosenberg](https://jira.spring.io/secure/ViewProfile.jspa?name=slapfivehigh)** opened **[SPR-1462](https://jira.spring.io/browse/SPR-1462?redirect=false)** and commented  public class MyBusinessImpl implements MyBusiness { public String doSomething() throws Exception { if (Math.random() > 0.9) { throw new Exception(""my exception""); } else { return ""my test""; } } }  public void testRun() { MyBusiness business = (MyBusiness) applicationContext.getBean(""business""); Assert.assertNotNull(business); try { business.doSomething(); } catch (Exception e) { getLogger().throwing(""MyBusinessTestCase"",""testRun"", e); } }  \ \ \ \ \ \ \ \dk.pfa.si.spring.aoptest.MyBusiness\ \ \ \ \ \MyTraceInterceptor\ \ \ \ \ \ \ \  java.lang.NullPointerException at java.lang.StringBuffer.\(StringBuffer.java:130) at org.springframework.aop.interceptor.AbstractPerformanceMonitorInterceptor.createInvocationTraceName(AbstractPerformanceMonitorInterceptor.java:80) at org.springframework.aop.interceptor.PerformanceMonitorInterceptor.invokeUnderTrace(PerformanceMonitorInterceptor.java:55) at org.springframework.aop.interceptor.AbstractTraceInterceptor.invoke(AbstractTraceInterceptor.java:94) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:144) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:174) at $Proxy0.doSomething(Unknown Source) at dk.pfa.si.spring.aoptest.MyBusinessTestCase.testRun(MyBusinessTestCase.java:93) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:324) at junit.framework.TestCase.runTest(TestCase.java:154) at junit.framework.TestCase.runBare(TestCase.java:127) at junit.framework.TestResult$1.protect(TestResult.java:106) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.framework.TestResult.run(TestResult.java:109) at junit.framework.TestCase.run(TestCase.java:118) at junit.framework.TestSuite.runTest(TestSuite.java:208) at junit.framework.TestSuite.run(TestSuite.java:203) at junit.textui.TestRunner.doRun(TestRunner.java:116) at com.intellij.rt.execution.junit2.IdeaJUnitAgent.doRun(IdeaJUnitAgent.java:57) at junit.textui.TestRunner.start(TestRunner.java:172) at com.intellij.rt.execution.junit.TextTestRunner2.startRunnerWithArgs(TextTestRunner2.java:23) at com.intellij.rt.execution.junit2.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:97) at com.intellij.rt.execution.junit2.JUnitStarter.main(JUnitStarter.java:31) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:324) at com.intellij.rt.execution.application.AppMain.main(AppMain.java:86)  ---  **Affects:** 1.2.5  **Issue Links:** - #6071 NullPointer exception in org.springframework.aop.interceptor.JamonPerformanceMonitorInterceptor (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2005-11-10T23:11:00Z","2019-01-12T16:52:20Z"
"","6142","Nullpointerexception in org.springframework.aop.target.ThreadLocalTargetSource [SPR-1442]","**[Lars Rosenberg](https://jira.spring.io/secure/ViewProfile.jspa?name=slapfivehigh)** opened **[SPR-1442](https://jira.spring.io/browse/SPR-1442?redirect=false)** and commented  While testing some frustrating aspects of ""prototypes versus Spring AOP"" I got the described NullPointerException. Lars  The exception:  java.lang.NullPointerException at org.springframework.aop.target.ThreadLocalTargetSource.getTarget(ThreadLocalTargetSource.java:72) at com.foo.tests.spring.proxytest.PrototypeProxyTestCase.createThreadLocalBusinessInterface(PrototypeProxyTestCase.java:133) at com.foo.tests.spring.proxytest.PrototypeProxyTestCase.testClearNotASingletonDestroy(PrototypeProxyTestCase.java:84) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at com.intellij.rt.execution.junit2.JUnitStarter.main(JUnitStarter.java:31) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at com.intellij.rt.execution.application.AppMain.main(AppMain.java:86)  The test case:  /** * Tests that I do not get a singleton using a {`@link` org.springframework.aop.framework.ProxyFactoryBean} when  * the business interface is marked as a prototype. Will destroy the target.   */   public void testClearNotASingletonDestroy() {   BusinessImpl business = createThreadLocalBusinessInterface(true);   BusinessImpl business2 = createThreadLocalBusinessInterface(true);    Assert.assertNotSame(""The two proxied business interfaces are the same (singletons). "", business, business2);  }  /** * Creates a business implementation. Uses a singleton target source. * `@param` destroy if \true\ then the target referenced by the target source is destroyed. * `@return` a business implementation.   */   private BusinessImpl createThreadLocalBusinessInterface(boolean destroy) {   ProxyFactoryBean proxy = (ProxyFactoryBean) applicationContext.getBean(""&thread-local-business"");   ThreadLocalTargetSource targetSource = (ThreadLocalTargetSource) proxy.getTargetSource();   BusinessImpl business = (BusinessImpl) targetSource.getTarget();  // line 133 that generates the nullpointerexception.   Assert.assertTrue(""Target is static"", !targetSource.isStatic());   if (destroy) {   targetSource.destroy();   }   return business;   }  The configuration:  \ \ \ \ \com.foo.tests.spring.proxytest.Business\ \ \ \ \ \\\ \ \ \ \ \ \com.foo.tests.spring.proxytest.Business\ \ \ \ \ \\\ \ \   ---  **Affects:** 1.2.5","closed","in: core,","spring-projects-issues","2005-11-05T01:21:22Z","2012-06-19T03:54:20Z"
"","6218","hibernate3.HibernateTransactionManager leaks Connections on Hibernate 3.1 RC2 [SPR-1519]","**[Larry Singer](https://jira.spring.io/secure/ViewProfile.jspa?name=larrysinger)** opened **[SPR-1519](https://jira.spring.io/browse/SPR-1519?redirect=false)** and commented  My unit test is running out of connections. On tracing it seems that these are being allocated during cleanup inside a commit.  In doCleanupAfterCompletion() there is a fetch of the connection, but because autoCommit has been set to true isAggressiveRelease() returns true and a new connection is allocated.  JDBCContext.userConnection() line: 114 SessionImpl.connection() line: 366 HibernateTransactionManager.doCleanupAfterCompletion(Object) line: 649 HibernateTransactionManager(AbstractPlatformTransactionManager).cleanupAfterCompletion(DefaultTransactionStatus) line: 750 HibernateTransactionManager(AbstractPlatformTransactionManager).processCommit(DefaultTransactionStatus) line: 537 HibernateTransactionManager(AbstractPlatformTransactionManager).commit(TransactionStatus) line: 469 DBTransactionImpl.commit() line: 73  I am not sure where the logic is incorrect, but I have traced where autocommit is set to true.  PoolingDataSource$PoolGuardConnectionWrapper.setAutoCommit(boolean) line: 292 JDBCTransaction.toggleAutoCommit() line: 194 JDBCTransaction.commitAndResetAutoCommit() line: 142 JDBCTransaction.commit() line: 115 HibernateTransactionManager.doCommit(DefaultTransactionStatus) line: 584 HibernateTransactionManager(AbstractPlatformTransactionManager).processCommit(DefaultTransactionStatus) line: 496 HibernateTransactionManager(AbstractPlatformTransactionManager).commit(TransactionStatus) line: 469 DBTransactionImpl.commit() line: 73  I don't think I am doing anything strange here to reset the connections.  I am using `@Transactional` and `@Entity` annotations, but the code where this is occuring is simply wrapping the code with DefaultTransactionDefinition def = new DefaultTransactionDefinition(); def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED); status = transactionManager.getTransaction(def);  and in the commit transactionManager.commit(status);    ---  **Affects:** 1.2.6","closed","status: declined,","spring-projects-issues","2005-12-06T17:28:34Z","2019-01-12T16:29:49Z"
"","6779","SessionScope has problems in 2.0M5 (bug in ServletRequestAttributes.updateAccessedAttributes()) [SPR-2087]","**[Lari Hotari](https://jira.spring.io/secure/ViewProfile.jspa?name=lhotari)** opened **[SPR-2087](https://jira.spring.io/browse/SPR-2087?redirect=false)** and commented  The code in org/springframework/web/context/scope/ServletRequestAttributes.java / updateAccessedAttributes method contains a small typo.  Replace ...keySet().iterator() with ....entrySet().iterator() to fix the problem.      /**       * Update all accessed session attributes through session.setAttribute       * calls, explicitly indicating to the container that they might have been modified.       */      public void updateAccessedAttributes() {              HttpSession session = this.request.getSession(false);              if (session != null) {                      for (Iterator it = this.sessionAttributesToUpdate.keySet().iterator(); it.has  Next();) { Map.Entry entry = (Map.Entry) it.next(); String name = (String) entry.getKey(); Object newValue = entry.getValue(); Object oldValue = session.getAttribute(name); if (oldValue == newValue) { session.setAttribute(name, newValue); } } } this.sessionAttributesToUpdate.clear(); }  ---  **Affects:** 2.0 M5  **Issue Links:** - #6798 Session Scope doesn't work (_**""is depended on by""**_)","closed","in: core,","spring-projects-issues","2006-06-01T10:34:00Z","2019-01-11T18:16:29Z"
"","5987","NPE in BeanWrapperImpl line 1156 (customEditors is null) [SPR-1286]","**[Lari Hotari](https://jira.spring.io/secure/ViewProfile.jspa?name=lhotari)** opened **[SPR-1286](https://jira.spring.io/browse/SPR-1286?redirect=false)** and commented  There's a NPE problem in caused by the changes to the latest version of BeanWrapperImpl. This problem showed up in 1.2.4 .  NPE in BeanWrapperImpl on line 1156 (customEditors is null) http://cvs.sourceforge.net/viewcvs.py/springframework/spring/src/org/springframework/beans/BeanWrapperImpl.java?rev=1.80&view=markup  This is the stack trace: java.lang.NullPointerException at org.springframework.beans.BeanWrapperImpl.getPropertyType(BeanWrapperImpl.java:1156) at org.springframework.validation.BindException.getCustomEditor(BindException.java:357) at org.springframework.web.servlet.support.BindStatus.\(BindStatus.java:115) at org.springframework.web.servlet.tags.BindTag.doStartTagInternal(BindTag.java:115)  View the diff here: http://cvs.sourceforge.net/viewcvs.py/springframework/spring/src/org/springframework/beans/BeanWrapperImpl.java?r1=1.79&r2=1.80    ---  **Affects:** 1.2.4","closed","in: core,","spring-projects-issues","2005-09-05T23:47:41Z","2012-06-19T03:54:16Z"
"","6097","SqlRowSet not Serializable [SPR-1397]","**[Kurtis Williams](https://jira.spring.io/secure/ViewProfile.jspa?name=cardsharp)** opened **[SPR-1397](https://jira.spring.io/browse/SPR-1397?redirect=false)** and commented  The org.springframework.jdbc.support.rowset.SqlRowSet class is not Serializable.  It wraps a CachedRowSet, which is Serializable.  This presents a problem when the developer wants to cache the SqlRowSet using a cache engine that requires Serializable objects (e.g. EhCache).  ---  **Affects:** 1.2.5  **Issue Links:** - #6141 Serialize SqlRowSet (_**""is duplicated by""**_)","closed","type: enhancement,","spring-projects-issues","2005-10-19T08:54:35Z","2019-01-11T21:18:58Z"
"","6356","define bean as 'primary' to choose automatically from multiple instances of the same type for autowiring [SPR-1659]","**[Kristof Jozsa](https://jira.spring.io/secure/ViewProfile.jspa?name=dyn)** opened **[SPR-1659](https://jira.spring.io/browse/SPR-1659?redirect=false)** and commented  Scenario: there are multiple instances configured of the same type in the applicationcontext. It'd be nice to define one of them as 'primary' and autowiring could automatically bind this instance to dependent components instead of raising an error as 'multiple instances of the same type are detected'.  I know using autowire=byName is a comearound for the problem but I'd still prefer the previous approach.   --- No further details from [SPR-1659](https://jira.spring.io/browse/SPR-1659?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-02-01T23:22:26Z","2012-06-13T08:26:04Z"
"","6503","Not found portal package in spring.jar [SPR-1809]","**[krishna](https://jira.spring.io/secure/ViewProfile.jspa?name=iamkittu)** opened **[SPR-1809](https://jira.spring.io/browse/SPR-1809?redirect=false)** and commented  package org.springframework.web.portlet not found in spring.jar, spring-web.jar and spring-webmvc.jar in release 2.0-M3. As per java Doc it released in 2.0-M1   ---  **Affects:** 2.0 M3","closed","type: enhancement,","spring-projects-issues","2006-03-22T08:55:10Z","2006-03-23T02:14:05Z"
"","5931","Using XSD inplace of DTD's [SPR-1229]","**[krishna kumar](https://jira.spring.io/secure/ViewProfile.jspa?name=rangakrishnan)** opened **[SPR-1229](https://jira.spring.io/browse/SPR-1229?redirect=false)** and commented  I am a very recent user of the Spring framework. I appreciate a lot of goodies with Spring Framework. Initially I found Spring as a unconventional J2EE framework but a truly cost-effective one.  I had a suggestion. Because of the recent advancements in the XML, all the blueprints of the XML namely DTD are written as XSD which is a xml'ised DTD. I wanted to know if Spring has plans of using XSD in future/current versions. I understand there are lot of advantages of using XSD.    ---  **Affects:** 1.2.3","closed","type: enhancement,","spring-projects-issues","2005-08-14T05:56:38Z","2012-06-19T03:53:57Z"
"","6340","boolen property detected for non boolen instance variable [SPR-1643]","**[Klaus Grieger](https://jira.spring.io/secure/ViewProfile.jspa?name=kgrieger)** opened **[SPR-1643](https://jira.spring.io/browse/SPR-1643?redirect=false)** and commented  class Node { private Node root;      public Node getRoot() {         return root;     }  public void setRoot(Node root) { this.root = root; } public boolean isRoot() { return root = this; } }  When I try to assign an object to property root in my beans.xml, I get an exception when the application starts up. spring complains, that the property root is not writeable and it did not find a setter method. When debugging the spring framework it seem that spring assumes that property root is of type boolean because there is a method ""isRoot()"". I think, that the type of the property should be taken from the declared instance variable (i.e. ""Node root;""). Then, spring should be looking for getter and setter according to the type of the instance variable. For  a boolean property it should be looking for boolean accessors. Otherwise, it should be looking for get/set methods.   ---  **Affects:** 1.2.5","closed","in: core,","spring-projects-issues","2006-01-26T18:33:06Z","2019-01-12T16:29:40Z"
"","6015","JotmFactoryBean needs property fro transactionTimeout [SPR-1315]","**[Kevin Hooke](https://jira.spring.io/secure/ViewProfile.jspa?name=khooke)** opened **[SPR-1315](https://jira.spring.io/browse/SPR-1315?redirect=false)** and commented  JotmFactoryBean needs a property to be able to set the transactionTimeout. This factory bean produces an instance of JOTM Current - this class does have a transactionTimeout property - the factory bean needs the same property so that this value can be initialized when the JOTM is initalized from the application context.   ---  **Affects:** 1.2.2","closed","type: enhancement,","spring-projects-issues","2005-09-21T07:32:24Z","2012-06-19T03:54:36Z"
"","6395","Maven2 POMs do not exist for m2 at ibiblio [SPR-1698]","**[Kevin Brown](https://jira.spring.io/secure/ViewProfile.jspa?name=kbrowna2w)** opened **[SPR-1698](https://jira.spring.io/browse/SPR-1698?redirect=false)** and commented  Maven2 POMs do not exist for m2 at ibiblio m1 poms are on ibiblio.   ---  **Affects:** 2.0 M2  1 votes, 0 watchers","closed","type: task,","spring-projects-issues","2006-02-10T06:53:14Z","2012-06-19T03:54:09Z"
"","6757","Add setProxyInterfaces(Class[]) to TransactionProxyFactoryBean [SPR-2064]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-2064](https://jira.spring.io/browse/SPR-2064?redirect=false)** and commented  TransactionProxyFactoryBean would benefit from an overloaded setProxyInterfaces() method, which takes Class[] instead of String[].  As it is, TransactionProxyFactoryBean is awkward to use programmatically - you have to convert your Class objects into a String array, and then handle the ClassNotFoundException that results from calling setProxyInterfaces().  All it needs is a setter method allowing you to directly inject the proxy interface array.   ---  **Affects:** 1.2.8","closed","type: enhancement,","spring-projects-issues","2006-05-26T07:02:36Z","2006-12-31T07:15:32Z"
"","6627","Add better logging of SQLWarning in JdbcTemplate [SPR-1934]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-1934](https://jira.spring.io/browse/SPR-1934?redirect=false)** and commented  If JdbcTemplate is set to ignore SQLWarnings, then when a SQLWarning is raised, it just toString()'s to SQLWarning to the logger.  The problem with this is that toString() on SQLWarning only displays some of the information contained (i.e. the ""message""), but not the useful stuff (e.g. error code).  In effect, the information is lost.  The only way to find out wehat's going on is to set JdbcTemplate to stop ignoring SQLWarnings, but that's quite invasive.  Since SQLWarning is just a suntype of SQLException, could JdbcTemplate not use the SQLException translator to display the SQLWarning in a more useful way?   ---  **Affects:** 1.2.7, 2.0 M3","closed","type: enhancement,","spring-projects-issues","2006-04-19T18:22:49Z","2012-06-19T03:52:49Z"
"","6574","Explicitly expose BindException through ModelAndView [SPR-1880]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-1880](https://jira.spring.io/browse/SPR-1880?redirect=false)** and commented  When writing unit tests for my controllers, I was trying to extract the BindException that had been generated by AbstractFormController.  Currently, the errors contained within the BindException are encoded within the ModelAndView's data map by AbstractFormController, and then the BindException object is discarded.  This makes it hard to test that my controller did not create any bind errors, since I have to grub through the ModelAndView's data map to find anything that looks like an error, and then decode it.  My suggestion is that the BindException object is explictly retained by the ModelAndView object, and exposes it via a getter method, for access by unit tests.   ---  **Affects:** 1.2.7","closed","type: enhancement,","spring-projects-issues","2006-04-11T01:45:33Z","2012-06-19T03:52:24Z"
"","6557","TimerFactoryBean NPE's if no scheduledTimerTasks present [SPR-1863]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-1863](https://jira.spring.io/browse/SPR-1863?redirect=false)** and commented  If you have a context with an instance of TimerFactoryBean, and don't set any scheduledTimerTasks into it, then you get a NullPointerException in afterPropertiesSet().  This is because TimerFactoryBean is assuming that it will have a non-null array of tasks.  The reason I'm not injecting any tasks is because I want to inject the Timer itself into my own beans, and don't need or want the tasks to be configured in spring.   ---  **Affects:** 1.2.7, 2.0 M3","closed","in: core,","spring-projects-issues","2006-04-06T01:27:49Z","2012-06-19T03:54:12Z"
"","6374","AbstractXmlApplicationContext.getConfigLocations() could be pre-checked for problems [SPR-1676]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-1676](https://jira.spring.io/browse/SPR-1676?redirect=false)** and commented  If either of AbstractXmlApplicationContext's subclasses are accidentally instantiated with a null configLocation, then it fails with a rather obscure exception, e.g.:  java.lang.IllegalArgumentException: locationPattern is required at org.springframework.util.Assert.notNull(Assert.java:90) at org.springframework.core.io.support.PathMatchingResourcePatternResolver.getResources(PathMatchingResourcePatternResolver.java:197) at org.springframework.context.support.AbstractApplicationContext.getResources(AbstractApplicationContext.java:681) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:141) at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:113) at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:81) at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:89) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:269) at org.springframework.context.support.FileSystemXmlApplicationContext.\(FileSystemXmlApplicationContext.java:89) at org.springframework.context.support.FileSystemXmlApplicationContext.\(FileSystemXmlApplicationContext.java:74) at org.springframework.context.support.FileSystemXmlApplicationContext.\(FileSystemXmlApplicationContext.java:65)  It's not at all clear what's wrong, and it can take a while of digging around to find out it was something that could have been caught and reported several layers down the stack.  Perhaps the loadBeanDefinitions() method of AbstractXmlApplicationContext could just check that each config location is non-null before passing it on?   ---  **Affects:** 1.2.6","closed","type: enhancement,","spring-projects-issues","2006-02-06T09:39:57Z","2012-06-19T03:54:06Z"
"","6259","Add JasperReports virtualizer for large report support in JasperReports views and view resolvers [SPR-1561]","**[Kenny Cheang](https://jira.spring.io/secure/ViewProfile.jspa?name=wfcheang)** opened **[SPR-1561](https://jira.spring.io/browse/SPR-1561?redirect=false)** and commented  It will be nice if Spring can provide report virtualizer support out of the box for generating large reports. We should be able to inject a report virtualizer (i.e. JRFileVirtualizer) into JasperReports view and view resolvers. And Spring should use it to render reports if a virtualizer is provided.   ---  **Affects:** 1.2.6  2 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2005-12-22T07:23:32Z","2019-01-11T21:39:27Z"
"","5943","To specify JasperReports template url dynamically at runtime for JasperReports views [SPR-1241]","**[Kenny Cheang](https://jira.spring.io/secure/ViewProfile.jspa?name=wfcheang)** opened **[SPR-1241](https://jira.spring.io/browse/SPR-1241?redirect=false)** and commented  Currently, Spring has no ways to specify the url property of JasperReportsPdfView dynamically. My use cases require me to specify the JasperReports template (jrxml file) based on request parameters at runtime. Therefore, I cannot provide the url property in the context XML file. But without the url property, Spring will throw an exception saying the location is required since Spring loads and compiles the report in initApplicationContext().  I tried to create a JasperReportsPdfView manually in my controller. But that doesn't work either because there is no way to ask the view to load or compile the report.   ---  **Affects:** 1.2.3  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2005-08-19T14:42:13Z","2012-06-19T03:53:58Z"
"","6467","BlobStringType getting null pointer.... [SPR-1769]","**[Keith Garry Boyce](https://jira.spring.io/secure/ViewProfile.jspa?name=garpinc)** opened **[SPR-1769](https://jira.spring.io/browse/SPR-1769?redirect=false)** and commented  return (encoding != null ? new String(bytes, encoding) : new String(bytes));  Here we have to check for bytes being null...  My old code looked like:  byte[] blobBytes = lobHandler.getBlobAsBytes(rs, names[0]); if(blobBytes != null && blobBytes.length>0) {      String blobString =  new String(blobBytes);     return blobString;  }	 else { return null; }   ---  **Affects:** 1.2.7, 2.0 M2, 2.0 M3","closed","type: bug,","spring-projects-issues","2006-03-08T15:00:57Z","2012-06-19T03:53:57Z"
"","6406","ManagedProperties deserialization problem on WebLogic 8.1 [SPR-1709]","**[Keith Garry Boyce](https://jira.spring.io/secure/ViewProfile.jspa?name=garpinc)** opened **[SPR-1709](https://jira.spring.io/browse/SPR-1709?redirect=false)** and commented  http://static.springframework.org/spring/docs/2.0-m2/api/org/springframework/beans/factory/support/ManagedProperties.html  Indicates that ManagedProperties class is inherited from jdk 1.5 class hierarchy.  It is used in DefaultXmlBeanDefinitionParser.  This is preventing my upgrade to m2. m1 works fine and does not have offending class.  At runtime n JDK 1.4  I get following error:  Caused by: java.lang.ClassNotFoundException: org.springframework.beans.factory.s upport.ManagedProperties:  This error could indicate that a component was deploy ed on a  cluster member but not other members of that cluster. Make sure that an y component deployed on a server that is part of a cluster is also deployed on a ll other members of that cluster at weblogic.j2ee.ApplicationManager.loadClass(ApplicationManager.java:34 4) at weblogic.j2ee.ApplicationManager.loadClass(ApplicationManager.java:25 8) at weblogic.j2ee.ApplicationManager.loadClass(ApplicationManager.java:25 3) at weblogic.rjvm.MsgAbbrevInputStream.resolveClass(MsgAbbrevInputStream. java:324) at weblogic.common.internal.ChunkedObjectInputStream$NestedObjectInputSt ream.resolveClass(ChunkedObjectInputStream.java:316) at java.io.ObjectInputStream.readNonProxyDesc(ObjectInputStream.java:151 3) at java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1435) at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1 626)    ---  **Affects:** 2.0 M2  1 votes, 1 watchers","closed","in: core,","spring-projects-issues","2006-02-14T11:02:54Z","2019-01-13T22:48:56Z"
"","6391","TilesJstlView does not attempt to resolve to chained view resolver JstlView in the event tiles definition does not exist [SPR-1694]","**[Keith Garry Boyce](https://jira.spring.io/secure/ViewProfile.jspa?name=garpinc)** opened **[SPR-1694](https://jira.spring.io/browse/SPR-1694?redirect=false)** and commented  TilesJstlView does not attempt to resolve to chained view resolver JstlView in the event tiles definition does not exist.  \ \ \true\ \ \ \org.springframework.web.servlet.view.tiles.TilesJstlView\ \ \  \ \ \true\ \ \ \org.springframework.web.servlet.view.JstlView\ \ \ \/view/portlet/\ \ \ \.jsp\ \ \  Any ideas on if i'm doing this right of if in fact it's a bug? In struts it used to be either or.   ---  **Affects:** 2.0 M1  **Attachments:** - [detectable.diff](https://jira.spring.io/secure/attachment/12778/detectable.diff) (_1.43 kB_) - [TilesViewResolver.java](https://jira.spring.io/secure/attachment/16571/TilesViewResolver.java) (_9.74 kB_)  1 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2006-02-09T05:29:41Z","2015-09-09T11:45:02Z"
"","6120","Add class structure to allow auto assembly of object graph in a way that is independent from object retreival implementation. [SPR-1420]","**[Keith Garry Boyce](https://jira.spring.io/secure/ViewProfile.jspa?name=garpinc)** opened **[SPR-1420](https://jira.spring.io/browse/SPR-1420?redirect=false)** and commented  I implemented this for spring webflow (http://opensource2.atlassian.com/projects/spring/browse/SWF-9) and now I also implemented it for spring mvc...  maybe it can be included  Objective: I find in almost all situations that the bulk of work in building a web app is to collect data from varying locations and ultimately construct an object graph that you can then persist or use for querying. This is especially true if using hibernate or another ORM tool.  Conclusion: The proposed code below accomplishes that so that by the time you get to the action the populated objects would already be pre-populated and waiting for you in the scope you specify. So the action code would then be very simple or non-existent.  Summary: The current FormAction only allows the creation of one form object per action. My thought is that if using hibernate or another ORM tool what you want instead is multiple objects (one per each domain object) so that at the time you run the action the object graph will already be created and all you need to do is extract it from the context and use it to query or persist. This avoids the bulk of the work generally in actions to assemble domain objects.  So basically this is IoC for a scope object to either create object in scope and set properties, set property on object already in specified scope or add object to collection of an object already in specified scope.  Below is illustration of pattern. I use it in a portlet application but a ServletAttributeResolver can simply be created as well as I did in webflow version...  Here is the idea from the portlet side:  \ \ \ \ \ \ \ \ \ \ \ \ \ \  \  This is the handler of which there is an equivalent handler for dispatcher servlet.  \ \ \ \ \ \  This is a simple abstract controller...  and here is the injector which is simply a form controller that can be used as an interceptor                                                                                                                                                                                                      	topicDetailsRequestDTO     	com.xxx.contactus.dto.TopicDetailsRequestDTO        I have attached the source. It can be used as is for spring portlet mvc and with a simple adaptation it can be used also for servlet type controllers. I just didn't do it because I am sure you guys will have ideas how to make it better.    ---  **Affects:** 1.2.5  **Attachments:** - [springInjector.zip](https://jira.spring.io/secure/attachment/11227/springInjector.zip) (_6.55 kB_)","closed","type: enhancement,","spring-projects-issues","2005-10-26T09:13:26Z","2012-06-19T09:37:31Z"
"","6112","Give controllers access to the portlet or servlet name if there are PortletNameAware or ServletNameAware [SPR-1412]","**[Keith Garry Boyce](https://jira.spring.io/secure/ViewProfile.jspa?name=garpinc)** opened **[SPR-1412](https://jira.spring.io/browse/SPR-1412?redirect=false)** and commented  I have a situation when I need access to the portlet name in the controller to then in turn look up data related to that data in db. I don't want a separate controller config for each portlet s it would seem if framework detected that I implement and interface requiring that then it would do the right thing and give me access to read it. What do you think?    ---  **Affects:** 2.0 M1","closed","type: enhancement,","spring-projects-issues","2005-10-23T04:55:59Z","2012-06-19T03:53:59Z"
"","6111","Add abilty to do ordering to hibernateTemplate loadAll [SPR-1411]","**[Keith Garry Boyce](https://jira.spring.io/secure/ViewProfile.jspa?name=garpinc)** opened **[SPR-1411](https://jira.spring.io/browse/SPR-1411?redirect=false)** and commented  Here is an example from hibernate manual  List cats = sess.createCriteria(Cat.class) .add( Restrictions.like(""name"", ""F%"") .addOrder( Order.asc(""name"") ) .addOrder( Order.desc(""age"") )  so basically it would be like getHibernateTemplate(). .addOrder( Order.asc(""name"") ) .addOrder( Order.desc(""age"") ) .loadAll(Cat.class);   ---  **Affects:** 1.2.5","closed","type: enhancement,","spring-projects-issues","2005-10-23T03:38:49Z","2005-10-26T07:35:26Z"
"","6041","BlobStringType would be a useful addition to the hibernate support [SPR-1341]","**[Keith Garry Boyce](https://jira.spring.io/secure/ViewProfile.jspa?name=garpinc)** opened **[SPR-1341](https://jira.spring.io/browse/SPR-1341?redirect=false)** and commented  I came across a scenario where customer (don't ask me why) was storing character data in a blob rather than a clob. The following userType could come in handy for those sorts of occasions. Please include it in spring dist.  package org.springframework.orm.hibernate3.support;  import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.SQLException;  import org.springframework.jdbc.support.lob.LobCreator; import org.springframework.jdbc.support.lob.LobHandler;  public class BlobStringType extends ClobStringType {      protected Object nullSafeGetInternal(     		ResultSet rs, String[] names, Object owner, LobHandler lobHandler)     		throws SQLException {     	return new String(lobHandler.getBlobAsBytes(rs, names[0]));     }          protected void nullSafeSetInternal(     		PreparedStatement ps, int index, Object value, LobCreator lobCreator)     		throws SQLException {     	lobCreator.setBlobAsBytes(ps, index, ((String) value).getBytes());     }  }   --- No further details from [SPR-1341](https://jira.spring.io/browse/SPR-1341?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-10-02T09:01:12Z","2012-06-19T03:54:28Z"
"","6040","Problem with JMX export in petclinic sample application. [SPR-1340]","**[Keith Garry Boyce](https://jira.spring.io/secure/ViewProfile.jspa?name=garpinc)** opened **[SPR-1340](https://jira.spring.io/browse/SPR-1340?redirect=false)** and commented  It seems the sample jmx export in petclinic is wrong.  rather than  name=""petclinic:service=hibernateStatistics""  it should say  name=""petclinic:Name=hibernateStatistics""  Using the first, the bean never showed up.. in any jmx browser.  I still can't see it with mc4j but I see it now with ManageEngine Application Manager where I did not see it before.  I still can't understand why mc4j doesn't show it up. Maybe it's a weblogic thing. But I am happy exporter is working.   ---  **Affects:** 1.2.4","closed","in: core,","spring-projects-issues","2005-10-02T08:57:32Z","2012-06-19T03:54:01Z"
"","6022","It would be great if someone could include hibernate cleansing classes in next spring release. [SPR-1322]","**[Keith Garry Boyce](https://jira.spring.io/secure/ViewProfile.jspa?name=garpinc)** opened **[SPR-1322](https://jira.spring.io/browse/SPR-1322?redirect=false)** and commented  See this: http://blog.murf.org/confluence/display/PUB/Hibernate+Cleanser  I was looking for something like this. When hibernate objects are delivered from service layer or ejb sometimes it's better to cleanse object especially if it's a call to a remote service.   ---  **Affects:** 2.0 M1","closed","type: enhancement,","spring-projects-issues","2005-09-25T13:41:16Z","2012-06-19T09:37:45Z"
"","5924","Make it so servlet or portlet context xml file is not required. [SPR-1222]","**[Keith Garry Boyce](https://jira.spring.io/secure/ViewProfile.jspa?name=garpinc)** opened **[SPR-1222](https://jira.spring.io/browse/SPR-1222?redirect=false)** and commented  Make it so servlet or portlet context xml file is not required. It's annoying to have to create empty file to avoid following error.  org.springframework.beans.factory.BeanDefinitionStoreException: IOException pars ing XML document from resource [/WEB-INF/SecureHomeContentPortlet-portlet.xml] o f PortletContext; nested exception is java.io.FileNotFoundException: Could not o pen resource [/WEB-INF/SecureHomeContentPortlet-portlet.xml] of PortletContext java.io.FileNotFoundException: Could not open resource [/WEB-INF/SecureHomeConte ntPortlet-portlet.xml] of PortletContext   ---  **Affects:** 1.2.3","closed","type: enhancement,","spring-projects-issues","2005-08-11T06:11:10Z","2005-09-09T03:33:11Z"
"","6098","ClasspathXmlApplicationContext should accept ClasspathResource arguments instead of just Strings [SPR-1398]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-1398](https://jira.spring.io/browse/SPR-1398?redirect=false)** and commented  It's arguable the String[] constructors should be eventually deprecated, but these new constructors would be quite helpful, allowing for relative classpath resource access.   ---  **Affects:** 1.2.5","closed","type: enhancement,","spring-projects-issues","2005-10-19T09:00:06Z","2005-11-04T23:58:26Z"
"","6089","Thread.currentThread().classLoader is used for invocations on a JMX MBean, not the class loader of the MBean itself [SPR-1389]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-1389](https://jira.spring.io/browse/SPR-1389?redirect=false)** and commented  Thread.currentThread().classLoader is used for invocations on a JMX MBean, not the class loader of the MBean itself.  This results in the MBean not being able to see/load its own internal classes.   ---  **Affects:** 1.2.5","closed","type: enhancement,","spring-projects-issues","2005-10-18T03:30:11Z","2012-06-19T03:54:26Z"
"","6065","JMX MBeanExporter does not allow empty ""beans"" map, even if ""autodetect"" is set to true [SPR-1365]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-1365](https://jira.spring.io/browse/SPR-1365?redirect=false)** and commented  ""autodetect"" should auto-register Spring Beans as MBeans that meet certain criteria; however, you can't use the ""autodetect=true"" feature without at least explicitly specifying at least one bean to register via the MBeanExporter ""beans"" property.  The exact error is this: Error creating bean with name 'mbeanExporter' defined in ServletContext resource [/WEB-INF/sellitem-servlet.xml]: Initialization of bean failed; nested exception is java.lang.IllegalArgumentException: Must specify at least one bean for registration   ---  **Affects:** 1.2.5","closed","in: core,","spring-projects-issues","2005-10-10T05:20:31Z","2008-08-31T00:04:07Z"
"","6014","The View Resolver interface is passed no context object, limiting dynamic view resolution capability [SPR-1314]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-1314](https://jira.spring.io/browse/SPR-1314?redirect=false)** and commented  It would be helpful in the ViewResolver interface supported the following operation:  public View resolveView(String viewName, Map modelContext, Locale locale);  With the addition of the modelContext, the resolver could take into account data in the model to decide what view should be selected.  An example of this follows:           	     	       Notice the ${placeholder}, which could be resolved to a value by evaluating the expression on the model map.   ---  **Affects:** 1.2.4","closed","type: enhancement,","spring-projects-issues","2005-09-21T04:09:23Z","2008-12-17T02:01:10Z"
"","6044","Set values for hibernate filter parameters via HibernateTemplate [SPR-1344]","**[Karsten Voges](https://jira.spring.io/secure/ViewProfile.jspa?name=kv)** opened **[SPR-1344](https://jira.spring.io/browse/SPR-1344?redirect=false)** and commented  i can set filter over FilterDefinitionFactoryBean an enable filter with setFilterName. How can i set the value of a filter parameter?   ---  **Affects:** 1.2 RC2","closed","type: enhancement,","spring-projects-issues","2005-10-04T00:14:07Z","2019-01-11T21:16:03Z"
"","6742","Initializing application context with references to other BeanFactories. [SPR-2049]","**[Karl Baum](https://jira.spring.io/secure/ViewProfile.jspa?name=kbaum)** opened **[SPR-2049](https://jira.spring.io/browse/SPR-2049?redirect=false)** and commented  Currently we can create an application context with a reference to one other bean factory, but we cannot reference beans from multiple bean factories.  In large applications containing several independent modules, it is necessary to share many of the same heavyweight object instances while staying decoupled from one another.  To stay decoupled, each module can declare it's own bean factory, but at the same time have explicit dependencies on other bean factories.  Advantages include:  1) Well defined dependencies on other bean factories.  Instead of lumping all beans within the same app context using classpath regular expression, a module explicity references other bean factories.  This reduces the possibility of instantiating beans we no longer need.  2) Decoupled from other BeanFactories, but without the overhead.  Independent components can live in separate bean factories while sharing the same heavy weight object instances.  3) Layer of abstraction around application context files.  Reusable modules can rename and rearrange application context files without forcing dependent components to refactor. Possible because we reference other bean factory singletons, instead of directly including the application context files.  Please see the forum discussion here:  http://forum.springframework.org/showthread.php?t=24703  Let me know what you think.  Thanks.  -karl   ---  **Affects:** 1.2.8  3 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2006-05-22T00:16:31Z","2008-01-09T12:28:57Z"
"","6585","combining inline properties with PropertiesFactoryBean [SPR-1892]","**[Karl Baum](https://jira.spring.io/secure/ViewProfile.jspa?name=kbaum)** opened **[SPR-1892](https://jira.spring.io/browse/SPR-1892?redirect=false)** and commented  It useful if PropertiesFactoryBean could combine several java.util.Properties instances into one Properties instance.  This would allow for combining properties which are listed inline within the spring app context.  As of now, combining properties is only possible by combining actual properties files.  Please see:  http://forum.springframework.org/showthread.php?t=24075  Thanks.  -karl   ---  **Affects:** 1.2.7, 2.0 M3  **Attachments:** - [propertiesFactoryBeanTest.xml](https://jira.spring.io/secure/attachment/11569/propertiesFactoryBeanTest.xml) (_785 bytes_) - [PropertiesFactoryBeanTests.java](https://jira.spring.io/secure/attachment/11568/PropertiesFactoryBeanTests.java) (_6.18 kB_) - [PropertiesLoaderSupport.java](https://jira.spring.io/secure/attachment/11567/PropertiesLoaderSupport.java) (_6.88 kB_)","closed","type: enhancement,","spring-projects-issues","2006-04-12T23:09:03Z","2019-01-13T08:55:40Z"
"","6569","Configuring Hibernate's CacheProvider through Spring  [SPR-1875]","**[Karl Baum](https://jira.spring.io/secure/ViewProfile.jspa?name=kbaum)** opened **[SPR-1875](https://jira.spring.io/browse/SPR-1875?redirect=false)** and commented  It would be extremely useful if LocalSessionFactoryBean allowed developers to inject a spring configured hibernate CacheProvider.  Please see: http://forum.springframework.org/showthread.php?p=57479#post57479  Thanks.  -karl  ---  **Attachments:** - [LocalCacheProvider.java](https://jira.spring.io/secure/attachment/11572/LocalCacheProvider.java) (_1.82 kB_) - [LocalCacheProviderTest.java](https://jira.spring.io/secure/attachment/11574/LocalCacheProviderTest.java) (_2.43 kB_) - [LocalSessionFactoryBean.java](https://jira.spring.io/secure/attachment/11571/LocalSessionFactoryBean.java) (_49.47 kB_) - [LocalSessionFactoryBeanTests.java](https://jira.spring.io/secure/attachment/11573/LocalSessionFactoryBeanTests.java) (_21.82 kB_)  **Issue Links:** - #6659 Add functionality to inject a Hibernate CacheProvider into LocalSessionFactoryBean  3 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2006-04-10T03:05:16Z","2019-01-13T08:55:45Z"
"","6145","EHCacheManagerFactoryBean should support local configuration without ehcache.xml [SPR-1445]","**[Karl Baum](https://jira.spring.io/secure/ViewProfile.jspa?name=kbaum)** opened **[SPR-1445](https://jira.spring.io/browse/SPR-1445?redirect=false)** and commented  I would like the ability to set diskStore path on EHCacheManagerFactoryBean.  Problem is that the ehcache cannot take a directory path relative to user home. It only understands user.home by itself.  For more information, please see the following post:  http://forum.springframework.org/showthread.php?p=39562#post39562  Thanks.  -karl  ---  **Affects:** 1.2.5  **Issue Links:** - #5465 Configuring EhCacheManagerFactoryBean in same XML (_**""duplicates""**_)  4 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2005-11-05T08:31:24Z","2019-01-11T21:07:32Z"
"","6113","Debugging PropertyPlaceholderConfigurer [SPR-1413]","**[Karl Baum](https://jira.spring.io/secure/ViewProfile.jspa?name=kbaum)** opened **[SPR-1413](https://jira.spring.io/browse/SPR-1413?redirect=false)** and commented  Overriding Spring configurations at runtime is a powerful feature, but adds an extra layer of abstraction to the application, making debugging somewhat more difficult.  An extra debug message in PropertyPlaceholderConfigurater telling the developer the property file being used and the property name and value being overriden would be a helpful addition.  Please see the following post:  http://forum.springframework.org/showthread.php?t=18875   ---  **Affects:** 1.2.5","closed","type: enhancement,","spring-projects-issues","2005-10-23T11:39:28Z","2012-06-19T03:54:19Z"
"","6096","referencing local MBeanServer on weblogic 8.1 without passing server specific information [SPR-1396]","**[Karl Baum](https://jira.spring.io/secure/ViewProfile.jspa?name=kbaum)** opened **[SPR-1396](https://jira.spring.io/browse/SPR-1396?redirect=false)** and commented  We need the ability to reference the local MBeanServer on weblogic 8.1 without passing serverUrl, username, password, and servername.  This is possible to do programatically outside of Spring, but the WeblogicMBeanServerFactoryBean requires this information to be passed in.  Please see the following post:  http://forum.springframework.org/viewtopic.php?t=9547&highlight=  Thanks.   ---  **Affects:** 1.2.5  **Attachments:** - [LocalWeblogicMBeanServerFactoryBean.java](https://jira.spring.io/secure/attachment/11214/LocalWeblogicMBeanServerFactoryBean.java) (_798 bytes_)","closed","type: enhancement,","spring-projects-issues","2005-10-19T01:38:13Z","2012-06-19T03:54:20Z"
"","6095","Exception thrown invoking methods on Spring JMX MBeans with Weblogic 8.1 MBeanServer [SPR-1395]","**[Karl Baum](https://jira.spring.io/secure/ViewProfile.jspa?name=kbaum)** opened **[SPR-1395](https://jira.spring.io/browse/SPR-1395?redirect=false)** and commented  Please see that following post for more information.  http://forum.springframework.org/viewtopic.php?p=38242#38242  Thanks.   ---  **Affects:** 1.2.5  **Attachments:** - [jmx-example.war](https://jira.spring.io/secure/attachment/11212/jmx-example.war) (_2.53 MB_) - [jmx-example-src.zip](https://jira.spring.io/secure/attachment/11213/jmx-example-src.zip) (_4.64 kB_)","closed","in: core,","spring-projects-issues","2005-10-19T01:07:24Z","2012-06-19T03:53:57Z"
"","5935","AbstractTransactionalSpringContextTests onTearDownInTransaction doesn't throws Exception [SPR-1233]","**[Karel Miarka](https://jira.spring.io/secure/ViewProfile.jspa?name=kajism)** opened **[SPR-1233](https://jira.spring.io/browse/SPR-1233?redirect=false)** and commented  tearDown() method in JUnit declares that it throws any Exception, but onTearDownInTransaction() and onTearDownAfterTransaction() doesn't declare this, so all checked exeptions must be caught.  I want to close a DB connection used for DbUnit, which was created in onSetUpBeforeTransaction() and I have to catch SQLException which looks to me as non conventional.  (In fact due to the rollback capability of this test class I can close the connection immediately after pre-filling the DB so will not need this, but just to point out ""the little bug"".)    ---  **Affects:** 1.2.3","closed","type: bug,","spring-projects-issues","2005-08-16T20:57:49Z","2005-08-17T05:48:54Z"
"","6814","JndiRmiProxyFactoryBean/JndiRmiServiceExporter in RMI invoker mode do not work with primitive arguments [SPR-2123]","**[Kapil Gupta](https://jira.spring.io/secure/ViewProfile.jspa?name=kapilgupta)** opened **[SPR-2123](https://jira.spring.io/browse/SPR-2123?redirect=false)** and commented  Steps to recreate: 1) Declare a spring bean implementing an interface having method that takes primitive types as argument. 2) Use JndiRmiServiceExporter to bind it as RMI service with JNDI over iiop protocol. 3) Use JndiRmiProxyFactoryBean to lookup the bean from JNDI 4) Invoke a method that takes primitive types as arguments on the proxy object (Found from step 3)  The Spring XML file contains following declarations:  \ \ \ \ 	\\           	     	     		     	     	     		     	     	     		com.test.Dummy     	               	     		     			     				com.sun.jndi.cosnaming.CNCtxFactory     			     			     				iiop://localhost:2000     			     		     	                    	     		     	     	     		DummyClient     	     	     		     			com.test.Dummy     		     	       \  Following exception occurs on calling the method:  12-Jun-2006 10:54:14 com.sun.corba.se.impl.encoding.CDRInputStream_1_0 readClass WARNING: ""IOP00810213: (MARSHAL) Could not find class int in CDRInputStream.readClass"" org.omg.CORBA.MARSHAL:   vmcid: SUN  minor code: 213 completed: Maybe at com.sun.corba.se.impl.logging.ORBUtilSystemException.cnfeReadClass(ORBUtilSystemException.java:6556) at com.sun.corba.se.impl.encoding.CDRInputStream_1_0.readClass(CDRInputStream_1_0.java:1284) at com.sun.corba.se.impl.encoding.CDRInputStream_1_0.read_value(CDRInputStream_1_0.java:995) at com.sun.corba.se.impl.encoding.CDRInputStream.read_value(CDRInputStream.java:253) at com.sun.corba.se.impl.io.ValueHandlerImpl.read_Array(ValueHandlerImpl.java:756) at com.sun.corba.se.impl.io.ValueHandlerImpl.readValueInternal(ValueHandlerImpl.java:325) at com.sun.corba.se.impl.io.ValueHandlerImpl.readValue(ValueHandlerImpl.java:293) at com.sun.corba.se.impl.encoding.CDRInputStream_1_0.read_value(CDRInputStream_1_0.java:1034) at com.sun.corba.se.impl.encoding.CDRInputStream.read_value(CDRInputStream.java:253) at com.sun.corba.se.impl.io.IIOPInputStream.inputObjectField(IIOPInputStream.java:1989) at com.sun.corba.se.impl.io.IIOPInputStream.inputClassFields(IIOPInputStream.java:2213) at com.sun.corba.se.impl.io.IIOPInputStream.inputObject(IIOPInputStream.java:1221) at com.sun.corba.se.impl.io.IIOPInputStream.simpleReadObject(IIOPInputStream.java:400) at com.sun.corba.se.impl.io.ValueHandlerImpl.readValueInternal(ValueHandlerImpl.java:327) at com.sun.corba.se.impl.io.ValueHandlerImpl.readValue(ValueHandlerImpl.java:293) at com.sun.corba.se.impl.encoding.CDRInputStream_1_0.read_value(CDRInputStream_1_0.java:1034) at com.sun.corba.se.impl.encoding.CDRInputStream.read_value(CDRInputStream.java:253) at org.springframework.remoting.rmi._RmiInvocationWrapper_Tie._invoke(Unknown Source) at com.sun.corba.se.impl.protocol.CorbaServerRequestDispatcherImpl.dispatchToServant(CorbaServerRequestDispatcherImpl.java:637) at com.sun.corba.se.impl.protocol.CorbaServerRequestDispatcherImpl.dispatch(CorbaServerRequestDispatcherImpl.java:189) at com.sun.corba.se.impl.protocol.CorbaMessageMediatorImpl.handleRequestRequest(CorbaMessageMediatorImpl.java:1680) at com.sun.corba.se.impl.protocol.CorbaMessageMediatorImpl.handleRequest(CorbaMessageMediatorImpl.java:1540) at com.sun.corba.se.impl.protocol.CorbaMessageMediatorImpl.handleInput(CorbaMessageMediatorImpl.java:922) at com.sun.corba.se.impl.protocol.giopmsgheaders.RequestMessage_1_2.callback(RequestMessage_1_2.java:181) at com.sun.corba.se.impl.protocol.CorbaMessageMediatorImpl.handleRequest(CorbaMessageMediatorImpl.java:694) at com.sun.corba.se.impl.transport.SocketOrChannelConnectionImpl.dispatch(SocketOrChannelConnectionImpl.java:451) at com.sun.corba.se.impl.transport.SocketOrChannelConnectionImpl.doWork(SocketOrChannelConnectionImpl.java:1187) at com.sun.corba.se.impl.orbutil.threadpool.ThreadPoolImpl$WorkerThread.run(ThreadPoolImpl.java:417) Caused by: java.lang.ClassNotFoundException: int (no security manager: RMI class loader disabled) at sun.rmi.server.LoaderHandler.loadClass(LoaderHandler.java:371) at sun.rmi.server.LoaderHandler.loadClass(LoaderHandler.java:165) at java.rmi.server.RMIClassLoader$2.loadClass(RMIClassLoader.java:620) at java.rmi.server.RMIClassLoader.loadClass(RMIClassLoader.java:202) at java.rmi.server.RMIClassLoader.loadClass(RMIClassLoader.java:135) at com.sun.corba.se.impl.util.JDKBridge.loadClassM(JDKBridge.java:173) at com.sun.corba.se.impl.util.JDKBridge.loadClass(JDKBridge.java:70) at com.sun.corba.se.impl.javax.rmi.CORBA.Util.loadClass(Util.java:572) at javax.rmi.CORBA.Util.loadClass(Util.java:235) at com.sun.corba.se.impl.util.RepositoryId.getClassFromType(RepositoryId.java:536) at com.sun.corba.se.impl.orbutil.RepIdDelegator.getClassFromType(RepIdDelegator.java:121) at com.sun.corba.se.impl.encoding.CDRInputStream_1_0.readClass(CDRInputStream_1_0.java:1282) ... 26 more Exception in thread ""main"" org.springframework.remoting.RemoteConnectFailureException: Cannot connect to remote service [DummyClient]; nested exception is java.rmi.MarshalException: CORBA MARSHAL 1398079701 Maybe; nested exception is: org.omg.CORBA.MARSHAL: ----------BEGIN server-side stack trace---------- org.omg.CORBA.MARSHAL:   vmcid: SUN  minor code: 213 completed: Maybe at com.sun.corba.se.impl.logging.ORBUtilSystemException.cnfeReadClass(ORBUtilSystemException.java:6556) at com.sun.corba.se.impl.encoding.CDRInputStream_1_0.readClass(CDRInputStream_1_0.java:1284) at com.sun.corba.se.impl.encoding.CDRInputStream_1_0.read_value(CDRInputStream_1_0.java:995) at com.sun.corba.se.impl.encoding.CDRInputStream.read_value(CDRInputStream.java:253) at com.sun.corba.se.impl.io.ValueHandlerImpl.read_Array(ValueHandlerImpl.java:756) at com.sun.corba.se.impl.io.ValueHandlerImpl.readValueInternal(ValueHandlerImpl.java:325) at com.sun.corba.se.impl.io.ValueHandlerImpl.readValue(ValueHandlerImpl.java:293) at com.sun.corba.se.impl.encoding.CDRInputStream_1_0.read_value(CDRInputStream_1_0.java:1034) at com.sun.corba.se.impl.encoding.CDRInputStream.read_value(CDRInputStream.java:253) at com.sun.corba.se.impl.io.IIOPInputStream.inputObjectField(IIOPInputStream.java:1989) at com.sun.corba.se.impl.io.IIOPInputStream.inputClassFields(IIOPInputStream.java:2213) at com.sun.corba.se.impl.io.IIOPInputStream.inputObject(IIOPInputStream.java:1221) at com.sun.corba.se.impl.io.IIOPInputStream.simpleReadObject(IIOPInputStream.java:400) at com.sun.corba.se.impl.io.ValueHandlerImpl.readValueInternal(ValueHandlerImpl.java:327) at com.sun.corba.se.impl.io.ValueHandlerImpl.readValue(ValueHandlerImpl.java:293) at com.sun.corba.se.impl.encoding.CDRInputStream_1_0.read_value(CDRInputStream_1_0.java:1034) at com.sun.corba.se.impl.encoding.CDRInputStream.read_value(CDRInputStream.java:253) at org.springframework.remoting.rmi._RmiInvocationWrapper_Tie._invoke(Unknown Source) at com.sun.corba.se.impl.protocol.CorbaServerRequestDispatcherImpl.dispatchToServant(CorbaServerRequestDispatcherImpl.java:637) at com.sun.corba.se.impl.protocol.CorbaServerRequestDispatcherImpl.dispatch(CorbaServerRequestDispatcherImpl.java:189) at com.sun.corba.se.impl.protocol.CorbaMessageMediatorImpl.handleRequestRequest(CorbaMessageMediatorImpl.java:1680) at com.sun.corba.se.impl.protocol.CorbaMessageMediatorImpl.handleRequest(CorbaMessageMediatorImpl.java:1540) at com.sun.corba.se.impl.protocol.CorbaMessageMediatorImpl.handleInput(CorbaMessageMediatorImpl.java:922) at com.sun.corba.se.impl.protocol.giopmsgheaders.RequestMessage_1_2.callback(RequestMessage_1_2.java:181) at com.sun.corba.se.impl.protocol.CorbaMessageMediatorImpl.handleRequest(CorbaMessageMediatorImpl.java:694) at com.sun.corba.se.impl.transport.SocketOrChannelConnectionImpl.dispatch(SocketOrChannelConnectionImpl.java:451) at com.sun.corba.se.impl.transport.SocketOrChannelConnectionImpl.doWork(SocketOrChannelConnectionImpl.java:1187) at com.sun.corba.se.impl.orbutil.threadpool.ThreadPoolImpl$WorkerThread.run(ThreadPoolImpl.java:417) Caused by: java.lang.ClassNotFoundException: int (no security manager: RMI class loader disabled) at sun.rmi.server.LoaderHandler.loadClass(LoaderHandler.java:371) at sun.rmi.server.LoaderHandler.loadClass(LoaderHandler.java:165) at java.rmi.server.RMIClassLoader$2.loadClass(RMIClassLoader.java:620) at java.rmi.server.RMIClassLoader.loadClass(RMIClassLoader.java:202) at java.rmi.server.RMIClassLoader.loadClass(RMIClassLoader.java:135) at com.sun.corba.se.impl.util.JDKBridge.loadClassM(JDKBridge.java:173) at com.sun.corba.se.impl.util.JDKBridge.loadClass(JDKBridge.java:70) at com.sun.corba.se.impl.javax.rmi.CORBA.Util.loadClass(Util.java:572) at javax.rmi.CORBA.Util.loadClass(Util.java:235) at com.sun.corba.se.impl.util.RepositoryId.getClassFromType(RepositoryId.java:536) at com.sun.corba.se.impl.orbutil.RepIdDelegator.getClassFromType(RepIdDelegator.java:121) at com.sun.corba.se.impl.encoding.CDRInputStream_1_0.readClass(CDRInputStream_1_0.java:1282) ... 26 more  ----------END server-side stack trace----------  vmcid: SUN  minor code: 213 completed: Maybe java.rmi.MarshalException: CORBA MARSHAL 1398079701 Maybe; nested exception is: org.omg.CORBA.MARSHAL: ----------BEGIN server-side stack trace---------- org.omg.CORBA.MARSHAL:   vmcid: SUN  minor code: 213 completed: Maybe at com.sun.corba.se.impl.logging.ORBUtilSystemException.cnfeReadClass(ORBUtilSystemException.java:6556) at com.sun.corba.se.impl.encoding.CDRInputStream_1_0.readClass(CDRInputStream_1_0.java:1284) at com.sun.corba.se.impl.encoding.CDRInputStream_1_0.read_value(CDRInputStream_1_0.java:995) at com.sun.corba.se.impl.encoding.CDRInputStream.read_value(CDRInputStream.java:253) at com.sun.corba.se.impl.io.ValueHandlerImpl.read_Array(ValueHandlerImpl.java:756) at com.sun.corba.se.impl.io.ValueHandlerImpl.readValueInternal(ValueHandlerImpl.java:325) at com.sun.corba.se.impl.io.ValueHandlerImpl.readValue(ValueHandlerImpl.java:293) at com.sun.corba.se.impl.encoding.CDRInputStream_1_0.read_value(CDRInputStream_1_0.java:1034) at com.sun.corba.se.impl.encoding.CDRInputStream.read_value(CDRInputStream.java:253) at com.sun.corba.se.impl.io.IIOPInputStream.inputObjectField(IIOPInputStream.java:1989) at com.sun.corba.se.impl.io.IIOPInputStream.inputClassFields(IIOPInputStream.java:2213) at com.sun.corba.se.impl.io.IIOPInputStream.inputObject(IIOPInputStream.java:1221) at com.sun.corba.se.impl.io.IIOPInputStream.simpleReadObject(IIOPInputStream.java:400) at com.sun.corba.se.impl.io.ValueHandlerImpl.readValueInternal(ValueHandlerImpl.java:327) at com.sun.corba.se.impl.io.ValueHandlerImpl.readValue(ValueHandlerImpl.java:293) at com.sun.corba.se.impl.encoding.CDRInputStream_1_0.read_value(CDRInputStream_1_0.java:1034) at com.sun.corba.se.impl.encoding.CDRInputStream.read_value(CDRInputStream.java:253) at org.springframework.remoting.rmi._RmiInvocationWrapper_Tie._invoke(Unknown Source) at com.sun.corba.se.impl.protocol.CorbaServerRequestDispatcherImpl.dispatchToServant(CorbaServerRequestDispatcherImpl.java:637) at com.sun.corba.se.impl.protocol.CorbaServerRequestDispatcherImpl.dispatch(CorbaServerRequestDispatcherImpl.java:189) at com.sun.corba.se.impl.protocol.CorbaMessageMediatorImpl.handleRequestRequest(CorbaMessageMediatorImpl.java:1680) at com.sun.corba.se.impl.protocol.CorbaMessageMediatorImpl.handleRequest(CorbaMessageMediatorImpl.java:1540) at com.sun.corba.se.impl.protocol.CorbaMessageMediatorImpl.handleInput(CorbaMessageMediatorImpl.java:922) at com.sun.corba.se.impl.protocol.giopmsgheaders.RequestMessage_1_2.callback(RequestMessage_1_2.java:181) at com.sun.corba.se.impl.protocol.CorbaMessageMediatorImpl.handleRequest(CorbaMessageMediatorImpl.java:694) at com.sun.corba.se.impl.transport.SocketOrChannelConnectionImpl.dispatch(SocketOrChannelConnectionImpl.java:451) at com.sun.corba.se.impl.transport.SocketOrChannelConnectionImpl.doWork(SocketOrChannelConnectionImpl.java:1187) at com.sun.corba.se.impl.orbutil.threadpool.ThreadPoolImpl$WorkerThread.run(ThreadPoolImpl.java:417) Caused by: java.lang.ClassNotFoundException: int (no security manager: RMI class loader disabled) at sun.rmi.server.LoaderHandler.loadClass(LoaderHandler.java:371) at sun.rmi.server.LoaderHandler.loadClass(LoaderHandler.java:165) at java.rmi.server.RMIClassLoader$2.loadClass(RMIClassLoader.java:620) at java.rmi.server.RMIClassLoader.loadClass(RMIClassLoader.java:202) at java.rmi.server.RMIClassLoader.loadClass(RMIClassLoader.java:135) at com.sun.corba.se.impl.util.JDKBridge.loadClassM(JDKBridge.java:173) at com.sun.corba.se.impl.util.JDKBridge.loadClass(JDKBridge.java:70) at com.sun.corba.se.impl.javax.rmi.CORBA.Util.loadClass(Util.java:572) at javax.rmi.CORBA.Util.loadClass(Util.java:235) at com.sun.corba.se.impl.util.RepositoryId.getClassFromType(RepositoryId.java:536) at com.sun.corba.se.impl.orbutil.RepIdDelegator.getClassFromType(RepIdDelegator.java:121) at com.sun.corba.se.impl.encoding.CDRInputStream_1_0.readClass(CDRInputStream_1_0.java:1282) ... 26 more  ----------END server-side stack trace----------  vmcid: SUN  minor code: 213 completed: Maybe at com.sun.corba.se.impl.javax.rmi.CORBA.Util.mapSystemException(Util.java:197) at javax.rmi.CORBA.Util.mapSystemException(Util.java:67) at org.springframework.remoting.rmi._RmiInvocationHandler_Stub.invoke(Unknown Source) at org.springframework.remoting.rmi.JndiRmiClientInterceptor.doInvoke(JndiRmiClientInterceptor.java:391) at org.springframework.remoting.rmi.JndiRmiClientInterceptor.doInvoke(JndiRmiClientInterceptor.java:338) at org.springframework.remoting.rmi.JndiRmiClientInterceptor.invoke(JndiRmiClientInterceptor.java:262) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:144) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:174) at $Proxy0.setInt(Unknown Source) at com.test.MyMain.main(MyMain.java:17) Caused by: org.omg.CORBA.MARSHAL: ----------BEGIN server-side stack trace---------- org.omg.CORBA.MARSHAL:   vmcid: SUN  minor code: 213 completed: Maybe at com.sun.corba.se.impl.logging.ORBUtilSystemException.cnfeReadClass(ORBUtilSystemException.java:6556) at com.sun.corba.se.impl.encoding.CDRInputStream_1_0.readClass(CDRInputStream_1_0.java:1284) at com.sun.corba.se.impl.encoding.CDRInputStream_1_0.read_value(CDRInputStream_1_0.java:995) at com.sun.corba.se.impl.encoding.CDRInputStream.read_value(CDRInputStream.java:253) at com.sun.corba.se.impl.io.ValueHandlerImpl.read_Array(ValueHandlerImpl.java:756) at com.sun.corba.se.impl.io.ValueHandlerImpl.readValueInternal(ValueHandlerImpl.java:325) at com.sun.corba.se.impl.io.ValueHandlerImpl.readValue(ValueHandlerImpl.java:293) at com.sun.corba.se.impl.encoding.CDRInputStream_1_0.read_value(CDRInputStream_1_0.java:1034) at com.sun.corba.se.impl.encoding.CDRInputStream.read_value(CDRInputStream.java:253) at com.sun.corba.se.impl.io.IIOPInputStream.inputObjectField(IIOPInputStream.java:1989) at com.sun.corba.se.impl.io.IIOPInputStream.inputClassFields(IIOPInputStream.java:2213) at com.sun.corba.se.impl.io.IIOPInputStream.inputObject(IIOPInputStream.java:1221) at com.sun.corba.se.impl.io.IIOPInputStream.simpleReadObject(IIOPInputStream.java:400) at com.sun.corba.se.impl.io.ValueHandlerImpl.readValueInternal(ValueHandlerImpl.java:327) at com.sun.corba.se.impl.io.ValueHandlerImpl.readValue(ValueHandlerImpl.java:293) at com.sun.corba.se.impl.encoding.CDRInputStream_1_0.read_value(CDRInputStream_1_0.java:1034) at com.sun.corba.se.impl.encoding.CDRInputStream.read_value(CDRInputStream.java:253) at org.springframework.remoting.rmi._RmiInvocationWrapper_Tie._invoke(Unknown Source) at com.sun.corba.se.impl.protocol.CorbaServerRequestDispatcherImpl.dispatchToServant(CorbaServerRequestDispatcherImpl.java:637) at com.sun.corba.se.impl.protocol.CorbaServerRequestDispatcherImpl.dispatch(CorbaServerRequestDispatcherImpl.java:189) at com.sun.corba.se.impl.protocol.CorbaMessageMediatorImpl.handleRequestRequest(CorbaMessageMediatorImpl.java:1680) at com.sun.corba.se.impl.protocol.CorbaMessageMediatorImpl.handleRequest(CorbaMessageMediatorImpl.java:1540) at com.sun.corba.se.impl.protocol.CorbaMessageMediatorImpl.handleInput(CorbaMessageMediatorImpl.java:922) at com.sun.corba.se.impl.protocol.giopmsgheaders.RequestMessage_1_2.callback(RequestMessage_1_2.java:181) at com.sun.corba.se.impl.protocol.CorbaMessageMediatorImpl.handleRequest(CorbaMessageMediatorImpl.java:694) at com.sun.corba.se.impl.transport.SocketOrChannelConnectionImpl.dispatch(SocketOrChannelConnectionImpl.java:451) at com.sun.corba.se.impl.transport.SocketOrChannelConnectionImpl.doWork(SocketOrChannelConnectionImpl.java:1187) at com.sun.corba.se.impl.orbutil.threadpool.ThreadPoolImpl$WorkerThread.run(ThreadPoolImpl.java:417) Caused by: java.lang.ClassNotFoundException: int (no security manager: RMI class loader disabled) at sun.rmi.server.LoaderHandler.loadClass(LoaderHandler.java:371) at sun.rmi.server.LoaderHandler.loadClass(LoaderHandler.java:165) at java.rmi.server.RMIClassLoader$2.loadClass(RMIClassLoader.java:620) at java.rmi.server.RMIClassLoader.loadClass(RMIClassLoader.java:202) at java.rmi.server.RMIClassLoader.loadClass(RMIClassLoader.java:135) at com.sun.corba.se.impl.util.JDKBridge.loadClassM(JDKBridge.java:173) at com.sun.corba.se.impl.util.JDKBridge.loadClass(JDKBridge.java:70) at com.sun.corba.se.impl.javax.rmi.CORBA.Util.loadClass(Util.java:572) at javax.rmi.CORBA.Util.loadClass(Util.java:235) at com.sun.corba.se.impl.util.RepositoryId.getClassFromType(RepositoryId.java:536) at com.sun.corba.se.impl.orbutil.RepIdDelegator.getClassFromType(RepIdDelegator.java:121) at com.sun.corba.se.impl.encoding.CDRInputStream_1_0.readClass(CDRInputStream_1_0.java:1282) ... 26 more  ----------END server-side stack trace----------  vmcid: SUN  minor code: 213 completed: Maybe at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39) at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27) at java.lang.reflect.Constructor.newInstance(Constructor.java:494) at com.sun.corba.se.impl.protocol.giopmsgheaders.MessageBase.getSystemException(MessageBase.java:902) at com.sun.corba.se.impl.protocol.giopmsgheaders.ReplyMessage_1_2.getSystemException(ReplyMessage_1_2.java:99) at com.sun.corba.se.impl.protocol.CorbaMessageMediatorImpl.getSystemExceptionReply(CorbaMessageMediatorImpl.java:572) at com.sun.corba.se.impl.protocol.CorbaClientRequestDispatcherImpl.processResponse(CorbaClientRequestDispatcherImpl.java:430) at com.sun.corba.se.impl.protocol.CorbaClientRequestDispatcherImpl.marshalingComplete(CorbaClientRequestDispatcherImpl.java:326) at com.sun.corba.se.impl.protocol.CorbaClientDelegateImpl.invoke(CorbaClientDelegateImpl.java:129) at org.omg.CORBA.portable.ObjectImpl._invoke(ObjectImpl.java:457) ... 8 more   ---  **Affects:** 1.2.5  **Attachments:** - [context.xml](https://jira.spring.io/secure/attachment/11700/context.xml) (_1.35 kB_) - [Dummy.java](https://jira.spring.io/secure/attachment/11698/Dummy.java) (_102 bytes_) - [DummyImpl.java](https://jira.spring.io/secure/attachment/11699/DummyImpl.java) (_164 bytes_)  1 votes, 1 watchers","closed","status: declined,","spring-projects-issues","2006-06-11T16:41:33Z","2019-01-12T16:29:16Z"
"","6269","CLONE -Bean properties setting behaviour with inner and outer beans change when aspects are applied. [SPR-1571]","**[kamaljeet sandhu](https://jira.spring.io/secure/ViewProfile.jspa?name=sandhuks)** opened **[SPR-1571](https://jira.spring.io/browse/SPR-1571?redirect=false)** and commented  If I set a property on a bean which is a bean itself then reference the outer/parent this works when aspects are not applied but not when they are.  The following fragment works when no aspects are applied.  \ \ \ \ \ \ \ \ \  However when I add the following aspect I get an error.  \ \ \  \ \ \ \ \ \ \ \      [java] 2005-09-13 17:13:00,026 [main] INFO  org.springframework.beans.factory.xml.XmlBeanDefinitionReader - Loading XML bean definitions from class path resource [spring.xml]     [java] 2005-09-13 17:13:00,120 [main] INFO  org.springframework.beans.factory.xml.XmlBeanFactory - Creating shared instance of singleton bean 'parentNode'     [java] Exception in thread ""main"" org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'childNode' defined in class path resource [spring.xml]: Error setting property values; nested exception is org.springframework.beans.PropertyAccessExceptionsException: PropertyAccessExceptionsException (1 errors); nested propertyAccessExceptions are: [org.springframework.beans.TypeMismatchException: Failed to convert property value of type [java.lang.String] to required type [test.AbstractNode] for property 'parent']     [java] PropertyAccessExceptionsException (1 errors)     [java] org.springframework.beans.TypeMismatchException: Failed to convert property value of type [java.lang.String] to required type [test.AbstractNode] for property 'parent'     [java] 	at org.springframework.beans.BeanWrapperImpl.doTypeConversionIfNecessary(BeanWrapperImpl.java:1103)     [java] 	at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:848)     [java] 	at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:733)     [java] 	at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:890)     [java] 	at org.springframework.beans.BeanWrapperImpl.setPropertyValues(BeanWrapperImpl.java:917)     [java] 	at org.springframework.beans.BeanWrapperImpl.setPropertyValues(BeanWrapperImpl.java:906)     [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1026)     [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:823)     [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:345)     [java] 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBeanDefinition(BeanDefinitionValueResolver.java:147)     [java] 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:96)     [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1012)     [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:823)     [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:345)     [java] 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:226)     [java] 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:147)     [java] 	at test.TestNode.main(TestNode.java:51)    ---  **Affects:** 1.2.4","closed","in: core,","spring-projects-issues","2005-12-24T02:12:03Z","2019-01-11T21:38:58Z"
"","6067","LocaleChangeInterceptor to inspect session in addition to request [SPR-1367]","**[Kaleb Walton](https://jira.spring.io/secure/ViewProfile.jspa?name=kwalton)** opened **[SPR-1367](https://jira.spring.io/browse/SPR-1367?redirect=false)** and commented  Currently the LocaleChangeInterceptor inspects only the request when resolving a new locale.  If, for example, the ""locale"" attribute in the session has changed mid-session (i.e. when a user with a different locale logs in) the LocaleChangeInterceptor does not pick up the change as it is not located in the request. It would be preferable for it to pick up changes in both the session and request ""locale"" attribute.  One additional enhancement would be to store the previous locale found in a particular session in one of the contexts so as not to call the LocaleResolver and LocaleEditor on every request when the ""locale"" attribute exists in the session.   --- No further details from [SPR-1367](https://jira.spring.io/browse/SPR-1367?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-10-11T00:07:16Z","2012-06-19T03:54:04Z"
"","6336","Typo in documentation for FixedThemeResolver [SPR-1639]","**[Kai Weber](https://jira.spring.io/secure/ViewProfile.jspa?name=kwbr)** opened **[SPR-1639](https://jira.spring.io/browse/SPR-1639?redirect=false)** and commented  There is a little typo which needs to be fixed in FixedThemeResolver:  ""The fixed name can be defined via the defaultTheme property.""  should be  ""The fixed name can be defined via the defaultThemeName property.""   ---  **Affects:** 1.2.5, 1.2.6, 2.0 M1, 2.0 M2  **Attachments:** - [typo.patch](https://jira.spring.io/secure/attachment/11410/typo.patch) (_463 bytes_)","closed","type: enhancement,","spring-projects-issues","2006-01-24T01:21:42Z","2012-06-19T03:53:55Z"
"","6853","Exception when resolving circular references among nested bean definitions [SPR-2162]","**[k d x](https://jira.spring.io/secure/ViewProfile.jspa?name=kdx)** opened **[SPR-2162](https://jira.spring.io/browse/SPR-2162?redirect=false)** and commented  Given the following Java sources:  p/Main.java:  ---  package p;  import java.io.FileInputStream; import java.io.FileNotFoundException; import java.io.InputStream;  import org.springframework.beans.factory.xml.XmlBeanFactory; import org.springframework.core.io.InputStreamResource;  public class Main {      public static void main(String [] args) throws FileNotFoundException     {         InputStream is1 = new FileInputStream(args[0]);         XmlBeanFactory bf = new XmlBeanFactory(new InputStreamResource(is1));         O o = (O)bf.getBeansOfType(O.class).values().iterator().next();         System.out.println(""o=""+o);     }  }  ---  p/O.java:  ---  package p;  public class O {      private I i;          public I getI()     {     return this.i;     }          public void setI(I i)     {     this.i = i;     }  }  ---  p/I.java  ---  package p;  public class I {      private I i;          public I getI()     {     return this.i;     }          public void setI(I i)     {     this.i = i;     }  }  ---  and the following bean definition (spring-refcycle.xml):  ---  \ \ \ \ \ \ \ \ \\\ \ \ \ \ \ \  ---  running ""Main spring-refcycle.xml"" results in an exception:  ---  16:50:38,287 INFO  [CollectionFactory] JDK 1.4+ collections available 16:50:38,287 DEBUG [CollectionFactory] Creating [java.util.LinkedHashMap] 16:50:38,334 INFO  [XmlBeanDefinitionReader] Loading XML bean definitions from resource loaded through InputStream 16:50:38,334 DEBUG [XmlBeanDefinitionReader] Using JAXP implementation [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl@aeea66] 16:50:38,334 DEBUG [ResourceEntityResolver] Trying to resolve XML entity with public ID [-//SPRING//DTD BEAN//EN] and system ID http://www.springframework.org/dtd/spring-beans.dtd 16:50:38,334 DEBUG [ResourceEntityResolver] Trying to locate [spring-beans.dtd] in Spring jar 16:50:38,365 DEBUG [ResourceEntityResolver] Found beans DTD http://www.springframework.org/dtd/spring-beans.dtd in classpath 16:50:38,396 DEBUG [DefaultXmlBeanDefinitionParser] Loading bean definitions 16:50:38,396 DEBUG [DefaultXmlBeanDefinitionParser] Default lazy init 'false' 16:50:38,396 DEBUG [DefaultXmlBeanDefinitionParser] Default autowire 'no' 16:50:38,396 DEBUG [DefaultXmlBeanDefinitionParser] Default dependency check 'none' 16:50:38,412 DEBUG [DefaultXmlBeanDefinitionParser] Found 1 \ elements in resource loaded through InputStream 16:50:38,412 DEBUG [CollectionFactory] Creating [java.util.LinkedHashMap] 16:51:05,850 DEBUG [XmlBeanFactory] Creating shared instance of singleton bean 'bean-0' 16:51:41,209 DEBUG [XmlBeanFactory] Creating instance of bean 'bean-0' with merged definition [Root bean: class [p.O]; abstract=false; singleton=true; lazyInit=false; autowire=0; dependencyCheck=0; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in resource loaded through InputStream] 16:51:45,225 DEBUG [XmlBeanFactory] Invoking BeanPostProcessors before instantiation of bean 'bean-0' 16:52:07,365 DEBUG [CachedIntrospectionResults] Getting BeanInfo for class [p.O] 16:52:07,365 DEBUG [CachedIntrospectionResults] Caching PropertyDescriptors for class [p.O] 16:52:07,381 DEBUG [CachedIntrospectionResults] Found property 'class' of type [java.lang.Class] 16:52:07,381 DEBUG [CachedIntrospectionResults] Found property 'i' of type [p.I] 16:52:07,381 DEBUG [CachedIntrospectionResults] Class [p.O] is cache-safe 16:52:53,865 DEBUG [XmlBeanFactory] Eagerly caching bean with name 'bean-0' to allow for resolving potential circular references 16:54:07,553 DEBUG [BeanDefinitionValueResolver] Resolving inner bean definition 'bean-1' of bean 'bean-0' 17:10:41,922 DEBUG [XmlBeanFactory] Creating instance of bean 'bean-1' with merged definition [Root bean: class [p.I]; abstract=false; singleton=true; lazyInit=false; autowire=0; dependencyCheck=0; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in resource loaded through InputStream] 17:10:41,922 DEBUG [XmlBeanFactory] Invoking BeanPostProcessors before instantiation of bean 'bean-1' 17:10:41,922 DEBUG [CachedIntrospectionResults] Getting BeanInfo for class [p.I] 17:10:41,922 DEBUG [CachedIntrospectionResults] Caching PropertyDescriptors for class [p.I] 17:10:41,922 DEBUG [CachedIntrospectionResults] Found property 'class' of type [java.lang.Class] 17:10:41,922 DEBUG [CachedIntrospectionResults] Found property 'i' of type [p.I] 17:10:41,922 DEBUG [CachedIntrospectionResults] Class [p.I] is cache-safe 17:10:45,328 DEBUG [BeanDefinitionValueResolver] Resolving inner bean definition 'bean-2' of bean 'bean-1' 17:10:47,141 DEBUG [XmlBeanFactory] Creating instance of bean 'bean-2' with merged definition [Root bean: class [p.I]; abstract=false; singleton=true; lazyInit=false; autowire=0; dependencyCheck=0; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in resource loaded through InputStream] 17:10:47,141 DEBUG [XmlBeanFactory] Invoking BeanPostProcessors before instantiation of bean 'bean-2' 17:10:47,141 DEBUG [CachedIntrospectionResults] Using cached introspection results for class [p.I] 17:10:49,719 DEBUG [BeanDefinitionValueResolver] Resolving reference from property 'bean property 'i'' in bean 'bean-2' to bean 'bean-1' 17:10:49,735 DEBUG [CollectionFactory] Creating [java.util.LinkedHashSet] 17:10:51,016 DEBUG [XmlBeanFactory] No bean named 'bean-1' found in org.springframework.beans.factory.xml.XmlBeanFactory defining beans [bean-0]; root of BeanFactory hierarchy Exception in thread ""main"" org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'bean-0' defined in resource loaded through InputStream: Cannot create inner bean 'bean-1' while setting bean property 'i'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'bean-1' defined in resource loaded through InputStream: Cannot create inner bean 'bean-2' while setting bean property 'i'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'bean-2' defined in resource loaded through InputStream: Cannot resolve reference to bean 'bean-1' while setting bean property 'i'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'bean-1' is defined org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'bean-1' defined in resource loaded through InputStream: Cannot create inner bean 'bean-2' while setting bean property 'i'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'bean-2' defined in resource loaded through InputStream: Cannot resolve reference to bean 'bean-1' while setting bean property 'i'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'bean-1' is defined org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'bean-2' defined in resource loaded through InputStream: Cannot resolve reference to bean 'bean-1' while setting bean property 'i'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'bean-1' is defined org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'bean-1' is defined at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanDefinition(DefaultListableBeanFactory.java:360) at org.springframework.beans.factory.support.AbstractBeanFactory.getMergedBeanDefinition(AbstractBeanFactory.java:686) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:219) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:145) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:186) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:106) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1046) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:857) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:378) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBeanDefinition(BeanDefinitionValueResolver.java:151) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:97) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1046) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:857) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:378) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBeanDefinition(BeanDefinitionValueResolver.java:151) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:97) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1046) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:857) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:378) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:233) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:145) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:211) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:200) at p.Main.main(Main.java:17)  ---  Is this supposed to happen?  ---  **Affects:** 1.2.8","closed","in: core,","spring-projects-issues","2006-06-20T02:13:40Z","2019-01-13T22:47:34Z"
"","6782","SessionScopeMap should support access from other thread [SPR-2089]","**[Jörg Heinicke](https://jira.spring.io/secure/ViewProfile.jspa?name=joerg.heinicke@gmx.de)** opened **[SPR-2089](https://jira.spring.io/browse/SPR-2089?redirect=false)** and commented  At the moment SessionScopeMap works by storing the current request (or an wrapper object for it) in an InheritableThreadLocal. This makes the session-scoped beans unusable in asynchronuously running services as the original request may have ended before the service. In my concrete example I got a NPE in ServletRequestAttributes, line 67 as this.request.getSession(true) returned null when a request is no longer valid.  My suggestion for an improvement would be to implement the SessionScopeMap differently by storing the session object directly in the ThreadLocal instead of the request. This makes it at least valid as long as the session is still alive - which might be more appropriate for **session**-scoped beans.   ---  **Affects:** 2.0 M4","closed","type: enhancement,","spring-projects-issues","2006-06-01T18:17:09Z","2012-06-19T03:52:27Z"
"","6714","Scoped beans don't work with JDK dynamic proxies [SPR-2021]","**[Jörg Heinicke](https://jira.spring.io/secure/ViewProfile.jspa?name=joerg.heinicke@gmx.de)** opened **[SPR-2021](https://jira.spring.io/browse/SPR-2021?redirect=false)** and commented  Creating dynamic proxies for scoped beans don't work as the proxies don't implement the interfaces of the to-be-proxied object, but only Spring's ScopedObject interface. In contrary proxyTargetClass=""true"" and so creating CGLib proxies works.   ---  **Affects:** 2.0 M1, 2.0 M2, 2.0 M3, 2.0 M4  **Attachments:** - [test.zip](https://jira.spring.io/secure/attachment/11642/test.zip) (_1.75 kB_)","closed","in: core,","spring-projects-issues","2006-05-15T21:14:52Z","2012-06-19T03:52:39Z"
"","6448","Make the MBeanExporter registerSimpleBean method public (or at least protected) [SPR-1751]","**[Jurgen Hannaert](https://jira.spring.io/secure/ViewProfile.jspa?name=jurgen)** opened **[SPR-1751](https://jira.spring.io/browse/SPR-1751?redirect=false)** and commented  For an existing project we plan to add JMX to monitor some classes. The project has a controller that creates a number of threads that should be monitored using JMX.  Since these threads (object implementing Runnable) are created at runtime, we cannot add them to the MBeanExporter map in the applicationContext xml file.  We also try to avoid having to implement an MBean interface to be able ro register them in the MBeanServer.  Making the registerSimpleBean method of the MBeanExporter class public or protected, could solve our problem. We should just would the runnable object and a String name to be able to register it as an MBean.   ---  **Affects:** 1.2.7","closed","type: enhancement,","spring-projects-issues","2006-02-28T21:14:11Z","2006-03-01T02:01:46Z"
"","5892","AbstractMultiActionWizardFormController [SPR-1189]","**[Julien Rault](https://jira.spring.io/secure/ViewProfile.jspa?name=jrault)** opened **[SPR-1189](https://jira.spring.io/browse/SPR-1189?redirect=false)** and commented  Add to the AbstractWizardFormController the possibility to action a void method with an argument from the view. It can be use to bind a button like ""Add new child"" or ""Remove this child"".  It's very trivial. There are just:  public static final String PARAM_ACTION = ""_action_""; public static final String PARAM_ACTION_ARGUMENT = ""_argument_"";  protected Map getTargetActionAndArgument(HttpServletRequest request);  and at the end of processFormSubmission:  Map actionArg = getTargetActionAndArgument(request, command, errors); if (actionArg != null) { Method method = (Method)this.getClass().getMethod((String)actionArg.get(""action""), new Class[] { HttpServletRequest.class, HttpServletResponse.class, Object.class, BindException.class, String.class});      List params = new ArrayList(5);     	params.add(request);     	params.add(response);     	params.add(command);     	params.add(errors);     	params.add(actionArg.get(""argument""));          method.invoke(this, params.toArray(new Object[params.size()]));  }   ---  **Affects:** 2.0 M1  **Attachments:** - [AbstractMultiActionWizardFormController.java](https://jira.spring.io/secure/attachment/10991/AbstractMultiActionWizardFormController.java) (_31.26 kB_)","closed","type: enhancement,","spring-projects-issues","2005-07-29T10:40:26Z","2012-06-19T09:37:31Z"
"","6429","Registered MBeanExporter autodetect always tries to process *MBean classes even though this might not be wanted. [SPR-1732]","**[Jukka Lindström](https://jira.spring.io/secure/ViewProfile.jspa?name=jslindst)** opened **[SPR-1732](https://jira.spring.io/browse/SPR-1732?redirect=false)** and commented  In our current deployment there is case where we have normal MBean -interfaces and classes and additionally MNeans that are to be declared using spring `@ManagedResource` annotation.  For the annotated Mbeans we want to use MetadataMBeanInfoAssembler and MetadataNamingStrategy (With AnnotationJmxAttributeSource). However, we run into a problem using MBeanExporter autodetect because it also wants to process the ""normal"" MBeans (which are exported by other means), and throws an MalformedObjectNameException because they are not marked with the `@ManagedResource` annotation.  We do not want to mark the normal MBeans with these annotations and it's not a good solution to give a list of the normal Mbeans names through setExcludedBeans()  A simple solution would be to modify the MBeanExporter's registerBeans() -method so that there would not be the ""default"" autodetectMBeans() -method invocation and modify the SimpleReflectiveMBeanInfoAssembler -class to implement  AutodetectCapableMBeanInfoAssembler with the following method code:      public boolean includeBean(Class beanClass, String beanName) {          return JmxUtils.isMBean(beanClass);     }  this would essentially retain the original functionality but allow to extend and override it.  If you need a TestCase showing the problematic behaviour, I'll write you one.  Thanks,  Jukka      		// Autodetect any beans that are already MBeans.     		logger.info(""Autodetecting user-defined JMX MBeans"");     		autodetectMBeans();          		// Allow the assembler a chance to vote for bean inclusion.     		if (this.assembler instanceof AutodetectCapableMBeanInfoAssembler) {     			autodetectBeans((AutodetectCapableMBeanInfoAssembler) this.assembler);     		}    ---  **Affects:** 2.0 M2","closed","type: enhancement,","spring-projects-issues","2006-02-19T23:57:43Z","2012-06-19T03:54:26Z"
"","5947","Doc: Resource location prefixes and view name prefixes [SPR-1245]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-1245](https://jira.spring.io/browse/SPR-1245?redirect=false)** and commented  I've recently discovered that resource location prefixes (""file:"", ""classpath:"", etc, including pattern options) and view name prefixes (""redirect:"", ""forward:"") are effectively undocumented.  This functionality should immediately be obvious in the reference docs rather than be hidden in the javadoc of ResourceLoader/PathMatcher and UrlBasedViewResolver, respectively.   --- No further details from [SPR-1245](https://jira.spring.io/browse/SPR-1245?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-08-21T23:39:11Z","2012-06-19T03:54:03Z"
"","5946","Spring JTA & Hibernate 2.1: could not release a cache lock [SPR-1244]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-1244](https://jira.spring.io/browse/SPR-1244?redirect=false)** and commented  From the forum: http://forum.springframework.org/viewtopic.php?t=7964  Here is the sequence of steps i am performing - 1. update 2. getHibernateTemplate().flush() 3. Thread.sleep(60000) - basically performing any operation which is taking about 1 min 4. transaction commit  Basically i have a clustered cache. i perform the above steps on server A. I make the server A to sleep for some time so that i can hit the server B in this duration. This is to test that cache does not gets replicated while server A is in mid of a transaction.  This test case was tested with hibernate jta and it passed. It gives exceptions with spring jta. Here are my logs -  Code:  2005-08-16 04:28:17,390 [Servlet.Engine.Transports : 0] DEBUG     - executing flush 2005-08-16 04:28:17,390 [Servlet.Engine.Transports : 0] DEBUG     - post flush 2005-08-16 04:28:17,390 [Servlet.Engine.Transports : 0] DEBUG     - closing session 2005-08-16 04:28:17,390 [Servlet.Engine.Transports : 0] DEBUG     - disconnecting session 2005-08-16 04:28:17,452 [Servlet.Engine.Transports : 0] DEBUG     - transaction before completion callback 2005-08-16 04:28:17,296 [Servlet.Engine.Transports : 0] DEBUG     - transaction after completion callback, status: 3 2005-08-16 04:28:17,296 [Servlet.Engine.Transports : 0] DEBUG     - transaction completion 2005-08-16 04:28:17,296 [Servlet.Engine.Transports : 0] DEBUG     - Invalidating space [T_TKOP] 2005-08-16 04:28:32,310 [Servlet.Engine.Transports : 0] ERROR     - could not release a cache lock net.sf.hibernate.cache.CacheException: org.jboss.cache.lock.TimeoutException: write lock for //net/sf/hibernate/cache/UpdateTimestampsCache/T_TKOP could not be acquired after 15000 ms. Locks: Read lock owners: [] Write lock owner: :2 (caller=Thread[Servlet.Engine.Transports : 0,5,main], lock info: write owner=:2 (activeReaders=0, activeWriter=Thread[Servlet.Engine.Transports : 0,5,main], waitingReaders=0, waitingWriters=0, waitingUpgrader=0)) at net.sf.hibernate.cache.TreeCache.put(TreeCache.java:89) at net.sf.hibernate.cache.UpdateTimestampsCache.invalidate(UpdateTimestampsCache.java:52) at net.sf.hibernate.impl.SessionImpl.afterTransactionCompletion(SessionImpl.java:605) at net.sf.hibernate.engine.CacheSynchronization.afterCompletion(CacheSynchronization.java:31) at com.ibm.ws.Transaction.JTA.RegisteredSyncs.distributeAfter(RegisteredSyncs.java:161) at com.ibm.ws.Transaction.JTA.TransactionImpl.distributeAfter(TransactionImpl.java:2344) at com.ibm.ws.Transaction.JTA.RegisteredResources.flowCommitOnePhase(RegisteredResources.java:1795) at com.ibm.ws.Transaction.JTA.RegisteredResources.distributePrepare(RegisteredResources.java:743) at com.ibm.ws.Transaction.JTA.TransactionImpl.internalPrepare(TransactionImpl.java:1267) at com.ibm.ws.Transaction.JTA.TransactionImpl.commit(TransactionImpl.java:960) at com.ibm.ws.Transaction.JTA.TranManagerImpl.commit(TranManagerImpl.java:150) at com.ibm.ws.Transaction.JTA.TranManagerSet.commit(TranManagerSet.java:182) at com.ibm.ws.Transaction.JTA.UserTransactionImpl.commit(UserTransactionImpl.java:262) at org.springframework.transaction.jta.JtaTransactionManager.doCommit(JtaTransactionManager.java:710) at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:435) at org.springframework.transaction.interceptor.TransactionAspectSupport.doCommitTransactionAfterReturning(TransactionAspectSupport.java:258) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:67) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:144) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:174) at $Proxy49.update(Unknown Source) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:79) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java(Compiled Code)) at java.lang.reflect.Method.invoke(Method.java(Compiled Code)) at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:288) at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:155) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:122) at test.ServiceAroundAdvice.invoke(ServiceAroundAdvice.java:82) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:144) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:174) at $Proxy49.update(Unknown Source) at test.Operator.update(Operator.java:93) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:79) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java(Compiled Code)) at java.lang.reflect.Method.invoke(Method.java(Compiled Code)) at com.ibm.ws.webservices.engine.providers.java.RPCProvider.invokeMethod(RPCProvider.java:404) at com.ibm.ws.webservices.engine.providers.java.RPCProvider.processRequestResponse(RPCProvider.java:296) at com.ibm.ws.webservices.engine.providers.java.RPCProvider.processMessage(RPCProvider.java:262) at com.ibm.ws.webservices.engine.providers.java.JavaProvider.invoke(JavaProvider.java:289) at com.ibm.ws.webservices.engine.PivotHandlerWrapper.invoke(PivotHandlerWrapper.java:212) at com.ibm.ws.webservices.engine.handlers.WrappedHandler.invoke(WrappedHandler.java:61) at com.ibm.ws.webservices.engine.PivotHandlerWrapper.invoke(PivotHandlerWrapper.java:212) at com.ibm.ws.webservices.engine.PivotHandlerWrapper.invoke(PivotHandlerWrapper.java:212) at com.ibm.ws.webservices.engine.WebServicesEngine.invoke(WebServicesEngine.java:255) at com.ibm.ws.webservices.engine.transport.http.WebServicesServlet.doPost(WebServicesServlet.java:850) at javax.servlet.http.HttpServlet.service(HttpServlet.java:760) at com.ibm.ws.webservices.engine.transport.http.WebServicesServletBase.service(WebServicesServletBase.java:341) at javax.servlet.http.HttpServlet.service(HttpServlet.java:853) at com.ibm.ws.webcontainer.servlet.StrictServletInstance.doService(StrictServletInstance.java:110) at com.ibm.ws.webcontainer.servlet.StrictLifecycleServlet._service(StrictLifecycleServlet.java:174) at com.ibm.ws.webcontainer.servlet.IdleServletState.service(StrictLifecycleServlet.java:313) at com.ibm.ws.webcontainer.servlet.StrictLifecycleServlet.service(StrictLifecycleServlet.java:116) at com.ibm.ws.webcontainer.servlet.ServletInstance.service(ServletInstance.java:283) at com.ibm.ws.webcontainer.servlet.ValidServletReferenceState.dispatch(ValidServletReferenceState.java:42) at com.ibm.ws.webcontainer.servlet.ServletInstanceReference.dispatch(ServletInstanceReference.java:40) at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.handleWebAppDispatch(WebAppRequestDispatcher.java:983) at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.dispatch(WebAppRequestDispatcher.java:564) at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:200) at com.ibm.ws.webcontainer.srt.WebAppInvoker.doForward(WebAppInvoker.java:119) at com.ibm.ws.webcontainer.srt.WebAppInvoker.handleInvocationHook(WebAppInvoker.java:276) at com.ibm.ws.webcontainer.cache.invocation.CachedInvocation.handleInvocation(CachedInvocation.java:71) at com.ibm.ws.webcontainer.cache.invocation.CacheableInvocationContext.invoke(CacheableInvocationContext.java:116) at com.ibm.ws.webcontainer.srp.ServletRequestProcessor.dispatchByURI(ServletRequestProcessor.java:186) at com.ibm.ws.webcontainer.oselistener.OSEListenerDispatcher.service(OSEListener.java:334) at com.ibm.ws.webcontainer.http.HttpConnection.handleRequest(HttpConnection.java:56) at com.ibm.ws.http.HttpConnection.readAndHandleRequest(HttpConnection.java:618) at com.ibm.ws.http.HttpConnection.run(HttpConnection.java:443) at com.ibm.ws.util.ThreadPool$Worker.run(ThreadPool.java:672) Caused by: org.jboss.cache.lock.TimeoutException: write lock for //net/sf/hibernate/cache/UpdateTimestampsCache/T_TKOP could not be acquired after 15000 ms. Locks: Read lock owners: [] Write lock owner: :2 (caller=Thread[Servlet.Engine.Transports : 0,5,main], lock info: write owner=:2 (activeReaders=0, activeWriter=Thread[Servlet.Engine.Transports : 0,5,main], waitingReaders=0, waitingWriters=0, waitingUpgrader=0)) at org.jboss.cache.lock.IdentityLock.acquireWriteLock(IdentityLock.java:173) at org.jboss.cache.Node.acquireWriteLock(Node.java:483) at org.jboss.cache.Node.acquire(Node.java:440) at org.jboss.cache.interceptors.LockInterceptor.lock(LockInterceptor.java:240) at org.jboss.cache.interceptors.LockInterceptor.invoke(LockInterceptor.java:156) at org.jboss.cache.interceptors.Interceptor.invoke(Interceptor.java:40) at org.jboss.cache.interceptors.UnlockInterceptor.invoke(UnlockInterceptor.java:35) at org.jboss.cache.interceptors.Interceptor.invoke(Interceptor.java:40) at org.jboss.cache.interceptors.ReplicationInterceptor.invoke(ReplicationInterceptor.java:51) at org.jboss.cache.TreeCache.invokeMethod(TreeCache.java:3102) at org.jboss.cache.TreeCache.put(TreeCache.java:1745) at net.sf.hibernate.cache.TreeCache.put(TreeCache.java:86) ... 68 more  This issue comes when i use spring-framework-1.2.1 with hibernate 2.1.6. It works fine when i use spring-framework-1.2.1 with hibernate 3.   ---  **Affects:** 1.2.1","closed","","spring-projects-issues","2005-08-21T23:35:31Z","2019-01-11T19:22:44Z"
"","5945","MimeMessageHelper: Problems with alternative parts [SPR-1243]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-1243](https://jira.spring.io/browse/SPR-1243?redirect=false)** and commented  MimeMessageHelper's refined strategy (introduced in Spring 1.2.1) that works on Outlook 2003 and Lotus Notes seems to cause problems on Outlook 2000. Use of ""multipart/mixed"" and ""multipart/related"" needs to be revisited: we might need configurable behavior there.  Effectively a compatibility issue with MIME mail structure, which needs to be solve to offer MimeMessageHelper's inline/attachment conveniences in a compatible fashion.  http://forum.springframework.org/viewtopic.php?t=7566   ---  **Affects:** 1.2.1, 1.2.2, 1.2.3","closed","in: core,","spring-projects-issues","2005-08-21T23:32:00Z","2012-06-19T03:54:22Z"
"","5902","Support for CommonJ Timer and WorkManager [SPR-1199]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-1199](https://jira.spring.io/browse/SPR-1199?redirect=false)** and commented  WebSphere 6.0 and WebLogic 9.0 introduce support for the CommonJ API, a joint specification by IBM and BEA. The CommonJ WorkManager and TimerManager are interesting in the context of Spring's scheduling support, as they effectively constitute direct alternatives to Quartz and the JDK Timer. The major advantage of WorkManager and TimerManager is that they use the application server's thread pool and can be configured and tuned centrally.  Spring support for the CommonJ WorkManager and TimerManager can be introduced as new subpackages of ""org.springframework.scheduling"", alongside the existing ""quartz"" and ""timer"" packages. We also plan support for the JDK 1.5 ThreadPoolExecutor (#5883), as a further scheduling subpackage.  It's worth noting that the CommonJ WorkManager and TimerManager can of course already be used in a Spring context, even without dedicated support: They are exposed as JNDI resources, so can easily be read in through Spring's JndiObjectFactoryBean and passed along as bean references. Dedicated support would mainly add conveniences such as invoking a method of a Spring-managed bean when a trigger fires (analogous to Spring already provides for Quartz and Timer).  ---  **Issue Links:** - #21654 Deprecate CommonJ scheduling support in favor of JSR-236 Concurrency Utilities","closed","type: enhancement,","spring-projects-issues","2005-08-01T22:29:21Z","2019-01-11T19:34:57Z"
"","6635","Test [SPR-1942]","**[jronald](https://jira.spring.io/secure/ViewProfile.jspa?name=jronald)** opened **[SPR-1942](https://jira.spring.io/browse/SPR-1942?redirect=false)** and commented  test   --- No further details from [SPR-1942](https://jira.spring.io/browse/SPR-1942?redirect=false)","closed","","spring-projects-issues","2006-04-20T19:54:50Z","2019-01-11T22:06:42Z"
"","6535","Implement new JDBC 4.0 (JDK 1.6) methods in DataSource interface [SPR-1841]","**[Joshua Nichols](https://jira.spring.io/secure/ViewProfile.jspa?name=nichoj@gentoo.org)** opened **[SPR-1841](https://jira.spring.io/browse/SPR-1841?redirect=false)** and commented  When compiling with the 1.6 beta, I get the following:  buildmain: [mkdir] Created dir: /space/playpen/spring-framework-2.0-m3/target/classes [mkdir] Created dir: /space/playpen/spring-framework-2.0-m3/target/classes/META-INF [javac] Compiling 1390 source files to /space/playpen/spring-framework-2.0-m3/target/classes [javac] /space/playpen/spring-framework-2.0-m3/src/org/springframework/jdbc/datasource/DelegatingDataSource.java:37: org.springframework.jdbc.datasource.DelegatingDataSource is not abstract and does not override abstract method createQueryObject(java.lang.Class) in javax.sql.DataSource [javac] public class DelegatingDataSource implements DataSource, InitializingBean { [javac]        ^ [javac] /space/playpen/spring-framework-2.0-m3/src/org/springframework/jdbc/datasource/DriverManagerDataSource.java:71: org.springframework.jdbc.datasource.DriverManagerDataSource is not abstract and does not override abstract method createQueryObject(java.lang.Class) in javax.sql.DataSource [javac] public class DriverManagerDataSource extends AbstractDataSource { [javac]        ^ [javac] /space/playpen/spring-framework-2.0-m3/src/org/springframework/jdbc/datasource/SingleConnectionDataSource.java:57: org.springframework.jdbc.datasource.SingleConnectionDataSource is not abstract and does not override abstract method createQueryObject(java.lang.Class) in javax.sql.DataSource [javac] public class SingleConnectionDataSource extends DriverManagerDataSource [javac]        ^ [javac] Note: Some input files use or override a deprecated API. [javac] Note: Recompile with -Xlint:deprecation for details. [javac] 3 errors  Seemingly, the some new methods were added javax.sql.DataSource.   ---  **Affects:** 2.0 M3  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2006-03-30T11:47:02Z","2012-06-19T03:54:31Z"
"","6441","spring 1.2.6 fails to compile against hibernate-3.1.2 [SPR-1744]","**[Joshua Nichols](https://jira.spring.io/secure/ViewProfile.jspa?name=nichoj@gentoo.org)** opened **[SPR-1744](https://jira.spring.io/browse/SPR-1744?redirect=false)** and commented  I'm trying to compile spring against hibernate-3.1.2, and get a few errors:      [javac] Compiling 1044 source files to /var/tmp/portage/spring-1.2.6/work/spring-framework-1.2.6/target/classes     [javac] /var/tmp/portage/spring-1.2.6/work/spring-framework-1.2.6/src/org/springframework/orm/hibernate3/FilterDefinitionFactoryBean.java:112: cannot resolve symbol     [javac] symbol  : constructor FilterDefinition (java.lang.String)     [javac] location: class org.hibernate.engine.FilterDefinition     [javac]             this.filterDefinition = new FilterDefinition(this.filterName);     [javac]                                         ^     [javac] /var/tmp/portage/spring-1.2.6/work/spring-framework-1.2.6/src/org/springframework/orm/hibernate3/FilterDefinitionFactoryBean.java:116: cannot resolve symbol     [javac] symbol  : method addParameterType (java.lang.String,org.hibernate.type.Type)     [javac] location: class org.hibernate.engine.FilterDefinition     [javac]                     this.filterDefinition.addParameterType(paramName, TypeFactory.heuristicType(typeName));     [javac]                         ^     [javac] /var/tmp/portage/spring-1.2.6/work/spring-framework-1.2.6/src/org/springframework/orm/hibernate3/FilterDefinitionFactoryBean.java:119: cannot resolve symbol     [javac] symbol  : method setDefaultFilterCondition (java.lang.String)     [javac] location: class org.hibernate.engine.FilterDefinition     [javac]                     this.filterDefinition.setDefaultFilterCondition(this.defaultFilterCondition);     [javac]                         ^     [javac] /var/tmp/portage/spring-1.2.6/work/spring-framework-1.2.6/src/org/springframework/orm/hibernate3/HibernateTemplate.java:624: cannot resolve symbol     [javac] symbol  : method save (java.lang.Object,java.io.Serializable)     [javac] location: interface org.hibernate.Session     [javac]                             session.save(entity, id);     [javac]                                        ^     [javac] /var/tmp/portage/spring-1.2.6/work/spring-framework-1.2.6/src/org/springframework/orm/hibernate3/HibernateTemplate.java:644: cannot resolve symbol     [javac] symbol  : method save (java.lang.String,java.lang.Object,java.io.Serializable)     [javac] location: interface org.hibernate.Session     [javac]                             session.save(entityName, entity, id);     [javac]                                        ^     [javac] /var/tmp/portage/spring-1.2.6/work/spring-framework-1.2.6/src/org/springframework/orm/hibernate3/support/IdTransferringMergeEventListener.java:68: entityIsTransient(org.hibernate.event.MergeEvent,java.util.Map) in org.springframework.orm.hibernate3.support.IdTransferringMergeEventListener cannot override entityIsTransient(org.hibernate.event.MergeEvent,java.util.Map) in org.hibernate.event.def.DefaultMergeEventListener; attempting to use incompatible return type     [javac] found   : java.lang.Object     [javac] required: void     [javac]     protected Object entityIsTransient(MergeEvent event, Map copyCache) {     [javac]                          ^     [javac] /var/tmp/portage/spring-1.2.6/work/spring-framework-1.2.6/src/org/springframework/orm/hibernate3/support/IdTransferringMergeEventListener.java:69: incompatible types     [javac] found   : void     [javac] required: java.lang.Object     [javac]             Object mergedCopy = super.entityIsTransient(event, copyCache);     [javac]                                                            ^     [javac] Note: Some input files use or override a deprecated API.     [javac] Note: Recompile with -deprecation for details.     [javac] 7 errors  I looked a few of them, and it does seem the API for hibernate changed. For example, the first one, FilterDefinition now only has a constructor that that takes two strings, and a map, where it used to only take a string. I bet you could give the new arguments empty  or null objects, but I don't know enough about hibernate to say.   ---  **Affects:** 1.2.6","closed","type: bug,","spring-projects-issues","2006-02-27T12:53:51Z","2012-06-19T03:53:59Z"
"","6799","error in hivemind configuration for tapestry integration [SPR-2107]","**[Joshua Nichols](https://jira.spring.io/secure/ViewProfile.jspa?name=nichoj)** opened **[SPR-2107](https://jira.spring.io/browse/SPR-2107?redirect=false)** and commented  There is an error in the hivemind configuration. There's a line: \  If you have this in the hivemind configs, you'll get exceptions when you try to hit your application along the lines about not being able to find the SpringApplicationInitializer class. It seems that it needs to be fully qualified, ie: \   ---  **Affects:** 2.0 M5","closed","type: bug,","spring-projects-issues","2006-06-06T07:16:54Z","2012-06-19T03:52:35Z"
"","6750","Add check to Hibernate LocalSessionFactoryBean for successful connection [SPR-2057]","**[Josh Moore](https://jira.spring.io/secure/ViewProfile.jspa?name=joshmoore)** opened **[SPR-2057](https://jira.spring.io/browse/SPR-2057?redirect=false)** and commented  An invalid hibernate.connection.url will not fail until an actual call is made to the database. The reason for this can be seen in org.hibernate.cfg.SettingsFactory#buildSettings(Properties) line 102 (in version 3.1.2) where all SQLExceptions are swallowed. See http://anonhibernate.labs.jboss.com/trunk/Hibernate3/src/org/hibernate/cfg/SettingsFactory.java  Our internal immediate fix is to access the DB any time that a live connection must be guaranteed. It would be nice if LocalSessionFactoryBean could perform a similar check on initialization.   ---  **Affects:** 2.0 M3","closed","type: enhancement,","spring-projects-issues","2006-05-25T04:28:06Z","2012-06-19T09:37:21Z"
"","6402","AbstractTransactionalSpringContextTests.startNewTransaction seems to break/ignore setDefaultRollback [SPR-1705]","**[Josh Moore](https://jira.spring.io/secure/ViewProfile.jspa?name=joshmoore)** opened **[SPR-1705](https://jira.spring.io/browse/SPR-1705?redirect=false)** and commented  AbstractTransactionalSpringContextTests.onSetup uses the defaultRollback to set complete:      this.complete = !this.defaultRollback;  This is used in endTransaction to rollback or commit.  Works in 1.2.6. In 2.0-m2, the startNewTransaction method was added and sets this.complete to false:      	++this.transactionsStarted;          	this.complete = false;          	if (logger.isInfoEnabled()) {  A work around is to call setComplete in onSetupInTransaction (in onSetupBeforeTransaction won't work)    ---  **Affects:** 2.0 M2","closed","type: bug,","spring-projects-issues","2006-02-13T19:17:25Z","2012-06-19T03:54:35Z"
"","6736","Eager destruction of singletons is too quiet [SPR-2043]","**[Josh Holtzman](https://jira.spring.io/secure/ViewProfile.jspa?name=jholtzman)** opened **[SPR-2043](https://jira.spring.io/browse/SPR-2043?redirect=false)** and commented  When DefaultListableBeanFactory.preInstantiateSingletons() runs into an exception, it quickly destroys all of its singletons so they are not left hanging around in an unknown state.  This makes sense.  However, there should be some kind of logging indicating why preInstantiatSingletons failed.  So this: catch (BeansException ex) { // Destroy already created singletons to avoid dangling resources. try { destroySingletons(); }  could be replaced by this:      catch (BeansException ex) {          // Destroy already created singletons to avoid dangling resources.          try {               logger.error(""Preinstantiation of singletons failed: "" +  ex.getMessage);               destroySingletons();          }    ---  **Affects:** 1.2.8","closed","type: enhancement,","spring-projects-issues","2006-05-19T07:51:22Z","2015-09-22T17:34:37Z"
"","6231","Documentation: JstlView also needs a ResourceBundleMessageSource [SPR-1532]","**[Jonas Van Poucke](https://jira.spring.io/secure/ViewProfile.jspa?name=jvpoucke)** opened **[SPR-1532](https://jira.spring.io/browse/SPR-1532?redirect=false)** and commented  The JavaDoc and Reference Manual do not have any information on how to configure resource bundles when using the JstlView (and InternalResourceView in particular). It cost me a great deal of searching until I found that I needed something like:  \ \\org.springframework.web.servlet.view.JstlView\\ \ \ \ \--> \ \\messages\\ \   And a ""messages.properties"" file in WEB-INF/classes of course.  Could this be added to the reference manual and/or JavaDoc?   --- No further details from [SPR-1532](https://jira.spring.io/browse/SPR-1532?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-12-12T21:21:57Z","2012-06-19T03:54:00Z"
"","6824","Unexpected behavior with MultiActionController and MethodNameResolver, Documentation is wrong. [SPR-2133]","**[Jon Are Storløkken](https://jira.spring.io/secure/ViewProfile.jspa?name=superpuma)** opened **[SPR-2133](https://jira.spring.io/browse/SPR-2133?redirect=false)** and commented  This is actually a problem with the documentation. The Javadoc for MultiActionController states that:  ""Controller implementation that allows multiple request types to be handled by the same class. Subclasses of this class can handle several different types of request with methods of the form  ModelAndView actionName(HttpServletRequest request, HttpServletResponse response);"" (clipped from doc)  BUT, the visibility must be public since the operation is performed on a delegate (or because of some reflection issue). THIS SHOULD BE CLEARLY STATED. There are quite a few posts about people having trouble with MultiActionController on the Spring forum. I think this is the culprit.   ---  **Affects:** 1.2.8","closed","type: bug,","spring-projects-issues","2006-06-13T01:02:54Z","2012-06-19T03:52:29Z"
"","6077","Allow bean/property/props to refer to property bundle [SPR-1377]","**[John Skelton](https://jira.spring.io/secure/ViewProfile.jspa?name=john.skelton)** opened **[SPR-1377](https://jira.spring.io/browse/SPR-1377?redirect=false)** and commented  I'm using props to do some roll-my own introspection.  This is resulting in LOTS of props/prop elements.  It would be nice to be able to link a props element to a properties bundle with a ""ref"" or ""file"" attribute (or similar).   My props are in effect triples of {key, getter, setter} I'm laying them out as {key, getter} and {key, setter}.  I looked at using a bean of class ResourceBundleMessageSource, but I won't know/care what key values to look for (which seems to be a requirement for RBMS), I just want all the keys in a particular bundle and then use those keys.  I need to be able to pass through a set of properties to my introspection operations in this way as all the introspection is soft-coded.  I hope I've not missed something obvious or replicated another issue here - I did have a looka round before posting.  Many thanks for a great framework.  John www.somaco.co.uk   ---  **Affects:** 1.2.5","closed","type: enhancement,","spring-projects-issues","2005-10-13T22:14:01Z","2005-10-21T21:51:46Z"
"","6057","STRUTS DelegatingActionUtils can't find beans if web application context was loaded via context loader [SPR-1357]","**[John Petrocik](https://jira.spring.io/secure/ViewProfile.jspa?name=velorider)** opened **[SPR-1357](https://jira.spring.io/browse/SPR-1357?redirect=false)** and commented  If you load the web application context via the ContextLoader (i.e. ContextLoaderListener or ContextLoaderServlet) STRUTS actions aren't found by the DelegatingActionUtils.  This happens when you have both struts and other serlvets requiring access to the web aplication context.  Using the STRUTS plugin to load the context requires that the STRUTS serlvet is initialized before any other servlet that need the context.  Attached is a patch for DelegatingActionUtil that looks for the context in ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE if all other look up fail.    ---  **Attachments:** - [DelegatingActionUtils.patch](https://jira.spring.io/secure/attachment/11200/DelegatingActionUtils.patch) (_452 bytes_)","closed","status: declined,","spring-projects-issues","2005-10-06T04:34:52Z","2019-01-12T16:30:00Z"
"","6809","DefaultMessageListenerContainer instances hanging on startup [SPR-2118]","**[John Murray](https://jira.spring.io/secure/ViewProfile.jspa?name=ccpmurray)** opened **[SPR-2118](https://jira.spring.io/browse/SPR-2118?redirect=false)** and commented  When a bean instance is defined using the pattern described in the documentation 20.5.2., the org.springframework.jms.listener.DefaultMessageListenerContainer will hang the server in the beforeAccess() method of ConcurrencyThrottleSupport.   Line 123 to be exact.  This is the example bean definition:  \ \ \ \ \ \  I was able to get past this by removing the concurrentConsumers entry. I don't know for sure if this is an actual bug or an error in the documentation.   ---  **Affects:** 2.0 M5","closed","in: messaging,","spring-projects-issues","2006-06-09T02:49:08Z","2019-01-11T17:43:57Z"
"","6763","Portlet MVC ParameterMappingInterceptor does not work with PortletModeParameterHandlerMapping if parameter name default is not used [SPR-2071]","**[John Lewis](https://jira.spring.io/secure/ViewProfile.jspa?name=johnalewis)** opened **[SPR-2071](https://jira.spring.io/browse/SPR-2071?redirect=false)** and commented  The ParameterMappingInterceptor in PortletMVC takes a ParameterHandlerMapping as a bean property and gets the name of the parameter to propagate from that handler mapping.  There are now two different handlers that both benfit from the use of the ParameterMappingInterceptor, so this approach does not work well (it is also somewhat confusing).  We should modify ParameterMappingInterceptor to take the name of the parameter to propagate directly as a bean property so that it can be used with any handler mapping.  This only matters when the default parameter name of 'action' needs to be overridden.   ---  **Affects:** 2.0 M4","closed","type: bug,","spring-projects-issues","2006-05-29T07:42:41Z","2006-05-29T09:28:02Z"
"","6279","Portlet MVC Action requests throw exceptions in JBoss Portal [SPR-1582]","**[John Lewis](https://jira.spring.io/secure/ViewProfile.jspa?name=johnalewis)** opened **[SPR-1582](https://jira.spring.io/browse/SPR-1582?redirect=false)** and commented  Issue reported in the forums:  I've been having problems getting the spring-portlet-sample, books example to work in JBoss portal 2.2. I've tried with the older set of samples and with the new (as of today) set of samples that are refactored to work with Spring 2.0m1.  My environment: JBoss AS 4.0.3SP1 with JBoss Portal 2.2 Sun Java 1.5.0_05 Spring 2.0m1 Spring-portlet-sample (current version just downloaded today).  This is what I'm experiencing: I can view all the pages in the books sample with out any problems. The issue occurs with I submit any of the forms (edit book details, add new book) in this example, or click on any of the ""update"" icons (from book inventory, Increase count, descrease count, or delete book). When I submit any of these actions I get the following exception: Code:  15:10:50,149 ERROR [InvokeWindowActionCommand] An portlet exception occured in portlet /spring-portlet-sample.books java.lang.NullPointerException at org.jboss.portal.portlet.impl.ActionRequestImpl.getPortletMode(ActionRequestImpl.java:45) at org.springframework.web.portlet.FrameworkPortlet.processRequest(FrameworkPortlet.java:448) at org.springframework.web.portlet.FrameworkPortlet.processAction(FrameworkPortlet.java:399) at org.jboss.portal.portlet.PortletContainer.invokeAction(PortletContainer.java:470) at org.jboss.portal.portlet.PortletContainer.dispatch(PortletContainer.java:411) at org.jboss.portal.server.app.ComponentInvocation.dispatch(ComponentInvocation.java:66) at org.jboss.portal.server.invocation.Invocation.invokeNext(Invocation.java:127) at org.jboss.portal.core.aspects.component.TransactionInterceptor.invoke(TransactionInterceptor.java:59) at org.jboss.portal.server.app.ComponentInterceptor.invoke(ComponentInterceptor.java:25) at org.jboss.portal.server.invocation.Invocation.invokeNext(Invocation.java:117) at org.jboss.portal.core.aspects.component.HeaderInterceptor.invoke(HeaderInterceptor.java:37) at org.jboss.portal.server.app.ComponentInterceptor.invoke(ComponentInterceptor.java:25) at org.jboss.portal.server.invocation.Invocation.invokeNext(Invocation.java:117) at org.jboss.portal.server.aspects.component.NavigationInterceptor.invoke(NavigationInterceptor.java:63) at org.jboss.portal.server.app.ComponentInterceptor.invoke(ComponentInterceptor.java:25) at org.jboss.portal.server.invocation.Invocation.invokeNext(Invocation.java:117) at org.jboss.portal.server.aspects.component.CacheInterceptor.invoke(CacheInterceptor.java:154) at org.jboss.portal.server.app.ComponentInterceptor.invoke(ComponentInterceptor.java:25) at org.jboss.portal.server.invocation.Invocation.invokeNext(Invocation.java:117) at org.jboss.portal.server.aspects.component.ModesInterceptor.invoke(ModesInterceptor.java:38) at org.jboss.portal.server.app.ComponentInterceptor.invoke(ComponentInterceptor.java:25) at org.jboss.portal.server.invocation.Invocation.invokeNext(Invocation.java:117) at org.jboss.portal.server.aspects.component.WindowStatesInterceptor.invoke(WindowStatesInterceptor.java:32) at org.jboss.portal.server.app.ComponentInterceptor.invoke(ComponentInterceptor.java:25) at org.jboss.portal.server.invocation.Invocation.invokeNext(Invocation.java:117) at org.jboss.portal.bridge.BridgeInterceptor.invoke(BridgeInterceptor.java:36) at org.jboss.portal.server.app.ComponentInterceptor.invoke(ComponentInterceptor.java:25) at org.jboss.portal.server.invocation.Invocation.invokeNext(Invocation.java:117) at org.jboss.portal.portlet.aspects.component.SessionPostDispatchInterceptor.invoke(SessionPostDispatchInterceptor.java:71) at org.jboss.portal.server.app.ComponentInterceptor.invoke(ComponentInterceptor.java:25) at org.jboss.portal.server.invocation.Invocation.invokeNext(Invocation.java:117) at org.jboss.portal.server.aspects.component.ContextDispatcherInterceptor$InvokeNextCommand.execute(ContextDispatcherInterceptor.java:116) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.jboss.portal.server.servlet.CommandServlet.doGet(CommandServlet.java:88) at javax.servlet.http.HttpServlet.service(HttpServlet.java:697) at javax.servlet.http.HttpServlet.service(HttpServlet.java:810) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:252) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at org.apache.catalina.core.ApplicationDispatcher.invoke.java:117) at org.jboss.portal.server.aspects.server.ContentTypeInterceptor.invoke(ContentTypeInterceptor.java:55) at org.jboss.portal.server.ServerInterceptor.invoke(ServerInterceptor.java:25) at org.jboss.portal.server.invocation.Invocation.invokeNext(Invocation.java:117) .... CUT so that this thread is < 10000 characters.  I believe I have the deployed the portlet correctly because I don't get any error on deployment. I have not changed anything in the sample code. I see in the readme for the samples that it is suggested that the web.xml may need to change (depending on the container), I didn't change anything here because I could not find anything on the JBoss site that say I need to, and it has worked for me in the past without changes. Regarding the portlet.tld, the container copied it's version of this into the WEB-INF/ dir of the deployment, so this should be ok. I did add a books-object.xml file to the WEB-INF/ dir of the deployment as a descriptor to tell JBoss where to display the portlet. I believe this is correct since it is display the pages/windows correctly. Here are the contents of that file: Code:  \ \ \ \overwrite\ \default\ \ \ \Books\ \ \ \BooksPortletWindow\ \BooksPortletInstance\ \center\ \0\ \ \ \ \ \overwrite\ \ \BooksPortletInstance\ \/spring-portlet-sample.books\ \ \ \  I've also created my own Spring portlet-mvc portlet and I'm having the same results. It is working great for rendering pages, but is not working at all when handling actions.  Please help, any ideas you have will be appreciated. I'm very excited about getting Spring portlet MVC to work!   ---  **Affects:** 2.0 M1","closed","type: enhancement,","spring-projects-issues","2005-12-29T03:46:50Z","2012-06-19T03:54:18Z"
"","6366","ExpressionEvaluationUtils, JSP 2.0,  evaluates only if one big EL expression [SPR-1669]","**[John Hodgson](https://jira.spring.io/secure/ViewProfile.jspa?name=jabhodgson)** opened **[SPR-1669](https://jira.spring.io/browse/SPR-1669?redirect=false)** and commented  The evaluate(), isExpressionLanguage,() and Jsp20ExpressionEvaluationHelper.evaluate() methods and their Javadoc indicate that they can handle a string with one or more embedded ${...} EL expressions.  The ExpressionLanguage.evaluate method is indeed used in that way in Spring code, viz. BindTag class.  Jsp20ExpressionEvaluationHelper.evaluate method, on the contrary calls JSP PageContext:      return pageContext.getExpressionEvaluator().evaluate(attrValue, resultClass, pageContext.getVariableResolver(), null);  which according to API Specification can only evaluate if attrValue is one big EL expression, i.e., ${...}, not e.g., abc${1+1}def${1+1}ghi    ---  **Affects:** 1.2.6","closed","type: enhancement,","spring-projects-issues","2006-02-03T07:10:03Z","2012-06-19T03:54:01Z"
"","6485","Make error status code optional in MultiActionController [SPR-1791]","**[john cavacas](https://jira.spring.io/secure/ViewProfile.jspa?name=jaysee)** opened **[SPR-1791](https://jira.spring.io/browse/SPR-1791?redirect=false)** and commented  The method in MultiActionController      protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response)         throws Exception {     	try {     		String methodName = this.methodNameResolver.getHandlerMethodName(request);     		return invokeNamedMethod(methodName, request, response);     	}     	catch (NoSuchRequestHandlingMethodException ex) {     		pageNotFoundLogger.warn(ex.getMessage());     		response.sendError(HttpServletResponse.SC_NOT_FOUND);     		return null;     	}     }  Sets an error response code, which makes sense. However, in the case of subclasses that want to extend MultiActionController, you now have a commited response, and no way to handle this condition yourself in the subclass.  I have a subclass of MultiActionController, which is trying to map from a logical mapping name, to a JSP path. This is for a default fall back. For example if the path is /foo/bar and no method bar exists, i want to try and load /foo/bar.jsp instead. With the parent class however setting the response to 404, the stream is commited, and cannot be modified.   ---  **Affects:** 1.2.7, 2.0 M3","closed","type: enhancement,","spring-projects-issues","2006-03-14T06:57:16Z","2012-06-19T03:54:09Z"
"","6061","UrlFilenameViewController does not allow for nested view files [SPR-1361]","**[John Caruso](https://jira.spring.io/secure/ViewProfile.jspa?name=jcaruso)** opened **[SPR-1361](https://jira.spring.io/browse/SPR-1361?redirect=false)** and commented  The UrlFilenameViewController does not support view files that are organized within a directory structure.  The getFilenameFromRequestURI(String uri) method in UrlFilenameViewController get's only the last part of the URL (i.e. using lastIndexOf(""/"")).  This means that whenever you convert your logical view name to the ""url"" based view, the view must be located specifically in the top level directory under the prefix given.  This seems like a limitation since we cannot have view names of the same name residing in the same level, however, it may be desirable to have the same view name under a different directory structure. (i.e. index vs /something/index).  The UrlFilenameViewController allows the urlMap to contain an entry of ""**/*.html"" which would match all urls ending with *.html no matter what directory structure.  An example of what I am talking about :                        	     		org.springframework.web.servlet.view.InternalResourceView     	     	/WEB-INF/docs     	.jsp                    	     		     			     				     			     		     	       I would suggest modifying the getFilenameFromRequestURI() method to be something like this instead:  protected String getFilenameFromRequestURI(String uri, HttpServletRequest request) {      int begin = request.getContextPath().length() + 1 ;        	int end = uri.indexOf(';');     if (end == -1) {     	end = uri.indexOf('?');     	if (end == -1) {     		end = uri.length();     	}     }     String filename = uri.substring(begin, end);     int dotIndex = filename.lastIndexOf('.');     if (dotIndex != -1) {     	filename = filename.substring(0, dotIndex);     }     return filename;  }  This will return the filename without the beginning slash.  Of course the method can take an indent argument as an int instead of the servlet request.  With this method I now have the ability to create /WEB-INF/docs/index.jsp and /WEB-INF/docs/test/index.jsp and reference them both on the url as /context-path/index.html and /context-path/test/index.html.  Unless of course there is some very good reason why you haven't done it this way that I am overlooking, I think this would be a nice enhancement to this Controller.  Of course one can write their own to perform this logic, however, it's nice to have spring offer this out of the box.  ---  **Issue Links:** - #5431 Make Controller aware of the url mapping (_**""depends on""**_) - #7476 UrlFilenameViewController backward compatibility broken (_**""is depended on by""**_)","closed","type: enhancement,","spring-projects-issues","2005-10-08T12:32:03Z","2019-01-11T21:20:34Z"
"","6650","SimpleMappingExceptionResolver: Add functionality to find an exception by type [SPR-1957]","**[Johannes Schroeder ](https://jira.spring.io/secure/ViewProfile.jspa?name=jo)** opened **[SPR-1957](https://jira.spring.io/browse/SPR-1957?redirect=false)** and commented  SimpleMappingExceptionResolver has only functionality to find a view by a specified (part of the) exception name: findMatchingViewName checks if  the class or the superclasses of the thrown exception match to the specified name.  Actually I find it more helpful to specify the exception type and check if the thrown exception class or superclasses match to the specified type. Perhaps the functionality of the SimpleMappingExceptionResolver can be extended.  protected String findMatchingViewNameByExceptionType(Properties exceptionMappings, Exception ex) { Class clazz = ex.getClass(); String name = clazz.getName(); while (!Object.class.equals(clazz)) { String errorPage = exceptionMappings.getProperty(name); if (errorPage != null) return (errorPage); clazz = clazz.getSuperclass(); if (clazz == null) break; name = clazz.getName(); } return (null); }   --- No further details from [SPR-1957](https://jira.spring.io/browse/SPR-1957?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-04-25T10:53:01Z","2012-06-13T08:19:53Z"
"","6326","AbstractResource and JarURLConnection [SPR-1629]","**[Joern Barthel](https://jira.spring.io/secure/ViewProfile.jspa?name=jbar)** opened **[SPR-1629](https://jira.spring.io/browse/SPR-1629?redirect=false)** and commented  AbstractResource's exist() has trouble closing an InputStream on a JarURLConnection:  java.lang.NullPointerException at java.io.FilterInputStream.close(FilterInputStream.java:159) at sun.net.www.protocol.jar.JarURLConnection$JarURLInputStream.close(JarURLConnection.java:88) at org.springframework.core.io.AbstractResource.exists(AbstractResource.java:52)  As a fix I'd suggest handling NPE's the same way as the throwing of another IOException.   ---  **Affects:** 1.2.6, 2.0 M1","closed","in: core,","spring-projects-issues","2006-01-19T02:41:38Z","2012-06-19T03:54:29Z"
"","6271","@Configured and singleton bean semantics [SPR-1574]","**[Joern Barthel](https://jira.spring.io/secure/ViewProfile.jspa?name=jbar)** opened **[SPR-1574](https://jira.spring.io/browse/SPR-1574?redirect=false)** and commented  Consider a `@Configured` singleton bean ""foo"".  context.getBean(""foo"").equals(context.getBean(""foo"")) --> \  but  new Foo().equals(new Foo()) --> \  Shouldn't Spring apply singleton semantics in this case?   ---  **Affects:** 2.0 M1","closed","type: enhancement,","spring-projects-issues","2005-12-24T21:19:04Z","2012-06-19T03:54:24Z"
"","6266","Make Schema-definitions available on springframework.org [SPR-1568]","**[Joern Barthel](https://jira.spring.io/secure/ViewProfile.jspa?name=jbar)** opened **[SPR-1568](https://jira.spring.io/browse/SPR-1568?redirect=false)** and commented  Craig Walls weblog entry on http://www.jroller.com/page/habuma (pretty much the first Google hits on the topic of aspectj 5 annotations in Spring / Spring 2.0) suggests the following skeleton for application context definitions:  \  \  etc.  The referenced Schema's are not available ATM. Is there some form of documentation regarding this available online?   ---  **Affects:** 2.0 M1  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2005-12-23T09:02:58Z","2006-01-05T04:28:20Z"
"","6265","aop.xml contains invalid aspect reference [SPR-1567]","**[Joern Barthel](https://jira.spring.io/secure/ViewProfile.jspa?name=jbar)** opened **[SPR-1567](https://jira.spring.io/browse/SPR-1567?redirect=false)** and commented  \  should probably read  \   ---  **Affects:** 2.0 M1","closed","in: core,","spring-projects-issues","2005-12-23T08:52:45Z","2012-06-19T03:54:29Z"
"","6038","Auto-pickup of entity beans [SPR-1338]","**[Joern Barthel](https://jira.spring.io/secure/ViewProfile.jspa?name=jbar)** opened **[SPR-1338](https://jira.spring.io/browse/SPR-1338?redirect=false)** and commented  Hence I configure my `@Entity` (and such) annotated domain objects as Spring beans I was reluctant to provide a list of them to the AnnotationSessionFactoryBean FactoryBean's setAnnotatedClasses() method. Instead I wrote a rather trivial BeanPostProcessor which provides a list of `@Entity` beans to the SessionFactory.  If there is an interest in putting this into e.g. org.springframework.orm.hibernate3.annotation I'd post the classes here.  ---  **Attachments:** - [AnnotationSessionFactoryBean.java](https://jira.spring.io/secure/attachment/13149/AnnotationSessionFactoryBean.java) (_1.92 kB_) - [entity-discovery.zip](https://jira.spring.io/secure/attachment/11195/entity-discovery.zip) (_4.07 kB_)  **Issue Links:** - #9415 Scan classpath for persistence annotations when creating session factory for hibernate (_**""is duplicated by""**_)  6 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2005-10-02T04:29:23Z","2019-01-11T21:17:18Z"
"","6037","Document Isolation and Propagation enums [SPR-1337]","**[Joern Barthel](https://jira.spring.io/secure/ViewProfile.jspa?name=jbar)** opened **[SPR-1337](https://jira.spring.io/browse/SPR-1337?redirect=false)** and commented  Elaborate about the implications of the different isolation and propagation levels configured by the respective enums (as Javadoc for the enums). This is probably a copy and paste job (from the ""Professional Java Development with the Spring Framework"" book) and would add a negligible amount of convenience.   --- No further details from [SPR-1337](https://jira.spring.io/browse/SPR-1337?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-10-02T04:18:11Z","2012-06-19T03:54:40Z"
"","6835","Spring form tag for checkbox not working correctly with Boolean (as opposed to boolean) [SPR-2144]","**[Joe Thomas](https://jira.spring.io/secure/ViewProfile.jspa?name=jtinpc)** opened **[SPR-2144](https://jira.spring.io/browse/SPR-2144?redirect=false)** and commented  The  tag is not working correctly with Booleans (as opposed to booleans).  Per the documentation, the ""value"" attribute is not needed when a Boolean is bound to the field.  Right now we get an error that states that ""value is required if type is not java.lang.Boolean"" - but it is!  If we change the getters/setters to use type ""boolean"" everything works ok.  In M4 we used a value=""true"" attribute and the tag worked, picking up the proper value from the form backing object and saving it, too.  Using that same approach in M5 we always get the checkbox checked on initial display, as if it ignored the value in the form backing object.  However, if you then uncheck it, the binding works right on form submission.   ---  **Affects:** 2.0 M5","closed","type: bug,","spring-projects-issues","2006-06-14T04:00:02Z","2012-06-19T03:52:51Z"
"","6805","TransactionSynchronizationManager cleanup after incomplete transaction API usage [SPR-2113]","**[Joe Thomas](https://jira.spring.io/secure/ViewProfile.jspa?name=jtinpc)** opened **[SPR-2113](https://jira.spring.io/browse/SPR-2113?redirect=false)** and commented  IllegalStateException from TransactionSynchronizationManager  We are having a problem in the Spring 2.0 M5 release.  We are using Hibernate3 and the OpenSessionInViewInterceptor.  The scenario is this:  We have a simple form controller based page with a Hibernate persistent object as the form backing object. On validation failure we want to roll back the current transaction, to avoid persisting changes made to the form backing object during BindAndValidate.  So we have an override of ""onBindAndValidate"" that checks for errors, then executes the following code:      WebApplicationContext context = WebApplicationContextUtils.getWebApplicationContext(request.getSession()             .getServletContext());     PlatformTransactionManager transactionManager = (PlatformTransactionManager) context.getBean(""transactionManager"");     TransactionStatus status = transactionManager.getTransaction(new DefaultTransactionDefinition());     status.setRollbackOnly();  The transaction is in fact rolled back and everything appears to work as desired.  However, something is not left clean in the thread, probably having to do with the ThreadLocal values set up by TransactionSynchronizationManager.  On the next use of the thread, the OpenSessionInViewInterceptor checks to see if a session is bound to the thread yet (line 136), then since there's not (and we're using the single session configuration), the interceptor gets a new Hibernate session using SessionFactoryUtils at line 149.  Somehow during this step the session is added to the ThreadLocals via TransactionSynchronizationManager.  We know that because when OpenSessionInViewInterceptor goes to add it at line 152, we get an IllegalStateException from TransactionSynchronizationManager, as follows:  ---  java.lang.IllegalStateException: Already value [org.springframework.orm.hibernate3.SessionHolder@bb4469] for key [org.hibernate.impl.SessionFactoryImpl@1631ab6] bound to thread [http-8080-Processor22] org.springframework.transaction.support.TransactionSynchronizationManager.bindResource(TransactionSynchronizationManager.java:154) org.springframework.orm.hibernate3.support.OpenSessionInViewInterceptor.preHandle(OpenSessionInViewInterceptor.java:152) org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:787) org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:727) org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:396) org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:350) javax.servlet.http.HttpServlet.service(HttpServlet.java:689) javax.servlet.http.HttpServlet.service(HttpServlet.java:802) org.displaytag.filter.ResponseOverrideFilter.doFilter(ResponseOverrideFilter.java:125)  note The full stack trace of the root cause is available in the Apache Tomcat/5.0.28 logs.  ---  ---  **Affects:** 2.0 M3, 2.0 M5  1 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2006-06-07T04:35:41Z","2019-01-13T22:47:44Z"
"","6720","DataBinder.getBeanWrapper() has disappeared in Spring 2.0.x [SPR-2027]","**[Joe Stepowski](https://jira.spring.io/secure/ViewProfile.jspa?name=joestep)** opened **[SPR-2027](https://jira.spring.io/browse/SPR-2027?redirect=false)** and commented  The getBeanWrapper() method of org.springframework.validation.DataBinder that was available in Spring 1.2.x has disappeared in Spring 2.0.x. I can't see anywhere in the javadoc or change log that indicates this method has been deprecated.  Might be useful to update the javadoc or change log to highlight this change.   ---  **Affects:** 2.0 M1, 2.0 M2, 2.0 M3, 2.0 M4","closed","type: enhancement,","spring-projects-issues","2006-05-16T21:04:04Z","2019-01-13T22:48:01Z"
"","6486","CollectionUtil.hasUniqueObject returns an invalid result for collections with a null as first element [SPR-1792]","**[Joe Shomphe](https://jira.spring.io/secure/ViewProfile.jspa?name=jshomphe)** opened **[SPR-1792](https://jira.spring.io/browse/SPR-1792?redirect=false)** and commented  Consider the following collections  Collection pass = [""hello"", null] Collection fail = [null, ""hello""]  If CollectionUtil.hasUniqueCollection(pass) is run, it will return true If CollectionUtil.hasUniqueCollection(fail) is run, it will return false  We routinely use queryForString/int in JdbcDaoSupport to return a single row, and take different action if an incorrectResultSizeException is thrown.  This could possibly be fixed by first checking to see if elem == candidate before checking if candidate is null  \ import java.util.ArrayList; import java.util.Collection; import java.util.Iterator; import org.springframework.util.CollectionUtils; import junit.framework.TestCase; public class CollectionTest extends TestCase { 	public void testSpring() 	{ 		ArrayList pass = new ArrayList(); 		ArrayList fail = new ArrayList(); 		pass.add(""hello""); 		pass.add(null); 		fail.add(null); 		fail.add(""hello""); 		assertFalse(CollectionUtils.hasUniqueObject(pass)); 		assertFalse(CollectionUtils.hasUniqueObject(fail)); 	} 	public void testLocal() 	{ 		ArrayList pass = new ArrayList(); 		ArrayList fail = new ArrayList(); 		pass.add(""hello""); 		pass.add(null); 		fail.add(null); 		fail.add(""hello""); 		assertFalse(hasUniqueObject(pass)); 		assertFalse(hasUniqueObject(fail)); 	} 	private static boolean hasUniqueObject(Collection coll) 	{ 		if (coll.isEmpty()) 		{ 			return false; 		} 		Object candidate = null; 		for (Iterator it = coll.iterator(); it.hasNext();) 		{ 			Object elem = it.next(); 			 			if (candidate ==null && elem == null) 			{ 				return false; 			} 			if (candidate == null) 			{ 				candidate = elem; 			} 			else if (candidate != elem) 			{ 				return false; 			} 		} 		return true; 	} } \   ---  **Affects:** 2.0 M3","closed","type: bug,","spring-projects-issues","2006-03-15T09:24:12Z","2012-06-19T03:54:30Z"
"","6058","${...} placeholders support for import only works on system properties [SPR-1358]","**[Joe Shomphe](https://jira.spring.io/secure/ViewProfile.jspa?name=jshomphe)** opened **[SPR-1358](https://jira.spring.io/browse/SPR-1358?redirect=false)** and commented  Please see comments on #6032 for more information  ---  **Affects:** 1.2.6  4 votes, 16 watchers","closed","status: bulk-closed,","spring-projects-issues","2005-10-06T05:43:05Z","2019-01-12T03:51:19Z"
"","6876","Null model assertion causes backwards compatibility issue [SPR-2185]","**[Joe Mays](https://jira.spring.io/secure/ViewProfile.jspa?name=jmays)** opened **[SPR-2185](https://jira.spring.io/browse/SPR-2185?redirect=false)** and commented  Upgrading from 1.2.6 to 2.0 RC1 causes this to happen in some of my controllers:  java.lang.IllegalArgumentException: Model object should not be null at org.springframework.util.Assert.notNull(Assert.java:113) at org.springframework.ui.ModelMap.addObject(ModelMap.java:75) at org.springframework.web.servlet.ModelAndView.addObject(ModelAndView.java:238)  It's not really a big problem, but I thought you guys should be aware of it as it **does** cause compatibility issues.  Out of curiosity, why can't we have a null model object?   ---  **Affects:** 2.0 RC1","closed","type: bug,","spring-projects-issues","2006-06-24T11:24:20Z","2012-06-19T03:52:27Z"
"","6721","provide access to the model in HandlerInterceptor.afterCompletion [SPR-2028]","**[Joe Dane](https://jira.spring.io/secure/ViewProfile.jspa?name=jdane)** opened **[SPR-2028](https://jira.spring.io/browse/SPR-2028?redirect=false)** and commented  It would be nice to be able to look at the ModelAndView (the model, really) in the afterCompletion handler of HandlerInterceptor. There may be tasks (logging, cleanups) that depend on the specifics of the request, and these are typically nicely bundled in the model.  The alternative now is to use request attributes (or something horrible like a ThreadLocal), which seems less than ideal, since you've already decoded the request and created the model in the controller.  Perhaps the M&V could be passed as an additional argument to the method.   ---  **Affects:** 1.2.8  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2006-05-17T07:18:51Z","2012-06-19T09:37:39Z"
"","6654","NestedServletException root cause handling can cause stack overflow [SPR-1961]","**[Joe Dane](https://jira.spring.io/secure/ViewProfile.jspa?name=jdane)** opened **[SPR-1961](https://jira.spring.io/browse/SPR-1961?redirect=false)** and commented  NestedServletException contains something like this:      /**      * Return the nested cause, or null if none.      */     public Throwable getCause() {     	return (getRootCause() == this ? null : getRootCause());     }  this is fine, unless getRootCause happens to call getCause.  tomcat's doesn't, but the JSDK shipping with resin does.  I will bring this up with the Caucho people, but it's not clear to me that they're wrong to do this.  it's also not clear how to fix this.  I don't really get the purpose of this method in the first place, but I doubt you'll be willing to just drop it at this point.  If you were to require a 1.4 JDK (where Throwable already has a getCause() method) you could perhaps get by with the default impl, but I get the feeling you don't want to require 1.4+.  another possibility would be to store the root cause directly in this class, rather than forwarding it up to the superclass.  ---  **Affects:** 1.2.7, 2.0 M4  **Issue Links:** - #10196 NestedServletException does not provide useful stack trace as advertised in its javadoc.","closed","type: bug,","spring-projects-issues","2006-04-26T12:56:46Z","2019-01-11T22:21:17Z"
"","6668","ClassUtil.isPresent() could use less logging [SPR-1975]","**[Jing Xue](https://jira.spring.io/secure/ViewProfile.jspa?name=manifoldronin)** opened **[SPR-1975](https://jira.spring.io/browse/SPR-1975?redirect=false)** and commented  Since M4 when an app context is loaded, ClassUtil.isPresent() logs full stack traces for every script language library it can't find on the classpath. While the logging is done on debug level, the stack traces may still be a bit misleading.   ---  **Affects:** 2.0 M4  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2006-05-02T13:38:31Z","2012-06-19T03:52:46Z"
"","6511","'merge' available in DTD but not in XSD [SPR-1817]","**[Jing Xue](https://jira.spring.io/secure/ViewProfile.jspa?name=manifoldronin)** opened **[SPR-1817](https://jira.spring.io/browse/SPR-1817?redirect=false)** and commented  It appears that the new 'merge' attribute for the collection types is added to spring-beans.dtd, but not in spring-beans.xsd.   ---  **Affects:** 2.0 M3","closed","in: core,","spring-projects-issues","2006-03-24T15:21:09Z","2012-06-19T03:54:09Z"
"","6409","alias 'messageSource' not recognized [SPR-1712]","**[Jing Xue](https://jira.spring.io/secure/ViewProfile.jspa?name=manifoldronin)** opened **[SPR-1712](https://jira.spring.io/browse/SPR-1712?redirect=false)** and commented  It seems that the special name 'messageSource' must be an actual bean rather than alias in order for it to be recognized by the application context.  Or was this intended?   ---  **Affects:** 2.0 M2","closed","in: core,","spring-projects-issues","2006-02-14T16:06:19Z","2012-06-19T03:54:07Z"
"","6309","ibatis factored out to extmodules? [SPR-1612]","**[Jing Xue](https://jira.spring.io/secure/ViewProfile.jspa?name=manifoldronin)** opened **[SPR-1612](https://jira.spring.io/browse/SPR-1612?redirect=false)** and commented  I noticed the ibatis support classes (org.springframework.orm.ibatis.**) are still part of spring.jar.  Shouldn't they be in extmodules like the hibernate classes?   ---  **Affects:** 2.0 M1","closed","type: enhancement,","spring-projects-issues","2006-01-12T02:58:53Z","2006-01-12T07:32:08Z"
"","6590","BeanWrapperImpl changes null to new T[] {null} [SPR-1897]","**[Jim Moore](https://jira.spring.io/secure/ViewProfile.jspa?name=jdigger)** opened **[SPR-1897](https://jira.spring.io/browse/SPR-1897?redirect=false)** and commented  BeanWrapperImpl.doTypeConversionIfNecessary is converting null to be a single array element with a null in it. From the simple test case below:      beanWrapper.setPropertyValue(""data"", null);     assertEquals(null, beanWrapper.getPropertyValue(""data""));  In the branch of that method that mutates the value when setting the property, there is the comment ""A plain value: convert it to an array with a single component."" so it's being done on purpose, but it's a very bad thing when you set a property to a value and then it is not equal to that value.  Test case:  public static class MyClass { private MyDataClass[] data;      public MyDataClass[] getData() {       return data;     }          public void setData(MyDataClass[] data) {       this.data = data;     }  }  public static class MyDataClass { }  public void testBeanWrapper() throws Exception { MyClass myClass = new MyClass(); BeanWrapperImpl beanWrapper = new BeanWrapperImpl(myClass); beanWrapper.setPropertyValue(""data"", null); assertEquals(null, beanWrapper.getPropertyValue(""data"")); assertEquals(null, myClass.getData());  // both fail }   ---  **Affects:** 1.2.7  1 votes, 1 watchers","closed","in: core,","spring-projects-issues","2006-04-14T23:51:34Z","2019-01-12T16:52:17Z"
"","5913","problem when proxy class using CGLIB [SPR-1211]","**[Jieba Wu](https://jira.spring.io/secure/ViewProfile.jspa?name=jiebawu)** opened **[SPR-1211](https://jira.spring.io/browse/SPR-1211?redirect=false)** and commented  I'm trying to use Spring AOP, so far it works fine when I proxy interfaces(i.e use JDK Dynamic proxy), but once I switched to proxy classes(i.e use CGLIB), all of the instance variable of the target classes become null during runtime.  Here is part of the app config:  ---  \  \ \ \ \ \ \ \debugInterceptor\ \ \ \  \ \\\ \ \testName\ \ \  ---  when the method  protected ModelAndView handle(HttpServletRequest request, HttpServletResponse response, Object command, BindException errors) throws Exception  is invoked on myTestController, it calles:  someDelegate.doSth()  but because ""someDelegate"" is NULL, the app failed with NPE.  ---  **Affects:** 1.2 final  **Attachments:** - [cglib_test.zip](https://jira.spring.io/secure/attachment/11050/cglib_test.zip) (_2.30 kB_) - [screenshot-Non-Controller.jpg](https://jira.spring.io/secure/attachment/11040/screenshot-Non-Controller.jpg) (_70.88 kB_)","closed","in: core,","spring-projects-issues","2005-08-08T02:48:31Z","2019-01-13T22:50:56Z"
"","6491","SessionFactoryUtils should not assume FlushMode.AUTO [SPR-1797]","**[Jh](https://jira.spring.io/secure/ViewProfile.jspa?name=jhh09)** opened **[SPR-1797](https://jira.spring.io/browse/SPR-1797?redirect=false)** and commented  In Feb. 2005 Juergen made a change to SessionFactoryUtils so it would work with OpenSessionInViewFilter / Interceptor:  http://opensource2.atlassian.com/projects/spring/browse/SPR-694  This change causes problems for some applications using the open session pattern in single session mode.  The problem lies specifically in this code:  // Switch to FlushMode.AUTO, as we have to assume a thread-bound Session // with FlushMode.NEVER, which needs to allow flushing within the transaction. FlushMode flushMode = session.getFlushMode(); if (FlushMode.NEVER.equals(flushMode)) { session.setFlushMode(FlushMode.AUTO); sessionHolder.setPreviousFlushMode(flushMode); }  When Hibernate uses the AUTO mode it flushes pending changes whenever it feels it is necessary.  If you are using Spring MVC to bind a large object, Hibernate may attempt to flush the changes midway through the bind process.  This will cause errors if your database does not allow null values and Hibernate tries to write null values due to the bind process not being complete.  This is why Hibernate allows developers to set the flush mode to COMMIT, telling Hibernate to not flush any pending changes until the developer says to.  HibernateTemplate allows developers to set the flush mode to use, but doing so has no effect due to the above hardcoded flush mode.  I think SessionFactoryUtils should respect the flush mode developers specify.   ---  **Affects:** 1.2.7","closed","type: enhancement,","spring-projects-issues","2006-03-16T09:03:46Z","2012-06-19T09:37:30Z"
"","6837","Add ability to set DataSource on JPA LocalEntityManagerFactoryBean [SPR-2146]","**[Jeremy Wales](https://jira.spring.io/secure/ViewProfile.jspa?name=jeremywales)** opened **[SPR-2146](https://jira.spring.io/browse/SPR-2146?redirect=false)** and commented  When using TopLink and Hibernate by themselves it is possible to inject the DataSource that they will use as a Bean into the relevant LocalSessionFactoryBean. However, when using TopLink and Hibernate as the implementation for JPA this doesn't seem to be possible: neither the LocalEntityManagerFactoryBean nor the JpaDialects nor the JpaVendorAdapters have a writable DataSource property.  Is there any way to do this?  If not that leaves us with the unpleasant options of either 1) specifying the JNDI name of a DataSource in the JPA persistence.xml jta-data-source/non-jta-data-source element or 2) specifying the connection details in the persistence.xml properties element. The first option creates an uncessary dependence on JNDI (not good for testing) and the second is not particularly amenable to having different connection details for different environments (there is no PropertyPlaceholderConfigurer for persistence.xml!) and does not allow the DataSource to wrapped in something like LazyConnectionDataSourceProxy.  As Toplink and Hibernate both have ways to set a DataSource into them this should be made available when using them for JPA as well. Each implementation will have a different API for how to inject a DataSource so setDataSource should probably be on the JpaDialects and JpaVendorAdapters instead of on LocalEntityManagerFactoryBean directly. LocalEntityManagerFactoryBean would get the specified DataSource (if any) from its JpaDialect.  org.springframework.orm.hibernate3.LocalDataSourceConnectionProvider would need to be refactored into something that could be reused by HibernateJpaDialect and HibernateJpaVendorAdapter (ie not be dependant on org.springframework.orm.hibernate3.LocalSessionFactoryBean, rather on something new and common like a HiberanateDataSourceUtil). The existing method of injection used for org.springframework.orm.toplink.LocalSessionFactory would presumbably work for TopLink under JPA as well.   ---  **Affects:** 2.0 M5  1 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2006-06-16T00:53:59Z","2006-06-19T20:04:01Z"
"","6028","DefaultXmlBeanDefinitionParser - defaultLazyInit cannot be set by subclasses [SPR-1328]","**[Jeremy Volkman](https://jira.spring.io/secure/ViewProfile.jspa?name=jvolkman)** opened **[SPR-1328](https://jira.spring.io/browse/SPR-1328?redirect=false)** and commented  DefaultXmlBeanDefinitionParser calls preProcessXml() before setting the values for defaultLazyInit, defaultAutowire and defaultDependencyCheck.  Currently, classes extending from DefaultXmlBeanDefinitionParser can override the methods for getDefaultAutowire and getDefaultDependencyCheck, and calls to the parseBeanDefinitionElement() method will use the overridden getters.  However, parseBeanDefinitionElement(), does not use the getDefaultLazyInit() method to get the defaultLazyInit value.  Therefore, classes extending from DefaultXmlBeanDefinitionParser cannot set a value for defaultLazyInit before calling parseBeanDefinitionElement().  Possible solutions: Add setters for these three values. Set the values before calling preProcessXml() Make parseBeanDefinitionElement() use the getDefaultLazyInit() method instead of the raw value   ---  **Affects:** 1.2.5","closed","type: bug,","spring-projects-issues","2005-09-27T08:27:48Z","2012-06-19T03:54:07Z"
"","5992","Add wrapper to JdbcTemplate to allow use of Groovy Closures in place of callbacks [SPR-1291]","**[Jeremy Rayner](https://jira.spring.io/secure/ViewProfile.jspa?name=jez)** opened **[SPR-1291](https://jira.spring.io/browse/SPR-1291?redirect=false)** and commented  I've written a small wrapper class around JdbcTemplate, that allows you to use groovy closures as a neater form of callback.  e.g.      def names = jdbcTemplate.query('select name from t_title') {rs, rowNum ->       return rs.getString('name')     }     assert names.contains('World Of Warcraft')  I'll try and attach it to this issue, along with a small groovy test.  I'm not quite sure as to your preferred setUp() for this...   ---  **Affects:** 1.2.4  **Attachments:** - [groovy-jdbc.tgz](https://jira.spring.io/secure/attachment/11141/groovy-jdbc.tgz) (_2.51 kB_)","closed","type: enhancement,","spring-projects-issues","2005-09-08T01:00:09Z","2012-06-19T09:37:34Z"
"","6329","AspectJ load-time weaving configuration file, aop.xml, contains a wrong class name for AnnotationBeanConfigurerAspect [SPR-1632]","**[Jeppe Cramon](https://jira.spring.io/secure/ViewProfile.jspa?name=ski_bum)** opened **[SPR-1632](https://jira.spring.io/browse/SPR-1632?redirect=false)** and commented  The AspectJ load time waeving configuration file aop.xml, found in \\aspectj\src\META-INF\aop.xml, contains the wrong class name for the AnnotationBeanConfigurerAspect.  It's currently configured as  ""org.springframework.beans.factory.aspectj.AnnotationBeanConfigurer"", where as it should be configured as ""org.springframework.transaction.aspectj.AnnotationTransactionAspect""  Best regards  Jeppe   ---  **Affects:** 2.0 M2","closed","in: core,","spring-projects-issues","2006-01-19T21:43:30Z","2012-06-19T03:54:01Z"
"","6701","Unclear semantics for HandlerInterceptors in the Portlet variant of Spring MVC [SPR-2008]","**[Jens Wyke](https://jira.spring.io/secure/ViewProfile.jspa?name=se92923)** opened **[SPR-2008](https://jira.spring.io/browse/SPR-2008?redirect=false)** and commented  Regarding the use of HandlerInterceptors in the Porltet variant of Spring MVC:  I have noticed that in class org.springframework.web.portlet.DispatcherPortlet that the ""afterCompletion"" methods on registered HandlerInterceptors is not called from a finally block, instead it is called from catch blocks for different Exceptions and also upon successful completion. This is not a bug i think, since ""afterCompletion"" is always called. But it still seems safer to to do it in a finally block... Is there a reason for not doing it this way?  Also, I don't really understand the way the HandlerInterceptor methods preHandle, postHandle and afterCompletion is invoked during the processing of a portlet request.  Consider for instance an ""action request"": The way various HandlerInterceptor methods gets invoked  ( on the Spring 2.0 M4 ), is as follows (from class DispatcherPortlet):  in doActionService: call preHandle for all interceptors om matchin Handler call handler.handlerActionRequest call afterCompletion for all interceptors... in doRenderService: call preHandle for all interceptors om matchin Handler call handler.handlerRenderRequest call postHandle for all interceptors... call afterCompletion for all interceptors...  This behaviour cannot be understood from the javadoc and although it may always produce the correct results, i can't help wondering wheter it would be better to change the Portlet MVC variant of HandlerInterceptor to have the following methods:  preActionHandle postActionHandle preRenderHandle postRenderHandle afterRenderComplete  This should make it clearer and provide more fine-grained control of what gets executed when...    ---  **Affects:** 2.0 M4","closed","type: enhancement,","spring-projects-issues","2006-05-13T18:53:12Z","2012-06-19T03:52:37Z"
"","6463","PathMatchingResourcePatternResolver not closing JarURLConnections [SPR-1765]","**[Jennifer Hickey](https://jira.spring.io/secure/ViewProfile.jspa?name=jencompgeek)** opened **[SPR-1765](https://jira.spring.io/browse/SPR-1765?redirect=false)** and commented  I attempted to execute the following code using a URLClassLoader pointing to a jar file that was dynamically dropped on the system.  After ensuring (to the best of my ability) that all references were freed, I tried to progamatically delete the jar file.  However, the jar file would not actually delete until the VM was shutdown, implying that there was still a reference in the VM.  PathMatchingResourcePatternResolver resolver = new PathMatchingResourcePatternResolver(classLoader); Resource[] resources  = resolver.getResources(""classpath*:/com/**/classes.xml"");  After some debugging, I decided to try overriding the doFindPathMatchingJarResources(Resource rootDirResource, String subPattern) method.  I added one line, ""jarFile.close()"", above the return statement.  After that, I was able to programatically delete my file.  Is this designed behavior, or is it possible that the close can be added so that dynamic removal of jar files is possible?   ---  **Affects:** 2.0 M1","closed","in: core,","spring-projects-issues","2006-03-06T09:36:45Z","2019-01-12T16:29:30Z"
"","6036","InterfaceBasedMBeanInfoAssembler does not expose the complete interface [SPR-1336]","**[Jelmer Kuperus](https://jira.spring.io/secure/ViewProfile.jspa?name=jelmer)** opened **[SPR-1336](https://jira.spring.io/browse/SPR-1336?redirect=false)** and commented  If you have an interface than extends from another interface suprisingly only the toplevel interface is exposed by InterfaceBasedMBeanInfoAssembler  The problem is that getDeclaredMethods() is used to determine if an interface method should be exposed instead of getMethods().  If for some reason this behaviour is by design I'd really like to be be able to set some sort of flag to override this behaviour   --- No further details from [SPR-1336](https://jira.spring.io/browse/SPR-1336?redirect=false)","closed","in: core,","spring-projects-issues","2005-10-01T20:26:21Z","2012-06-19T03:54:42Z"
"","6122","Spring JNDI provider [SPR-1422]","**[Jeff MAURY](https://jira.spring.io/secure/ViewProfile.jspa?name=jeffmaury)** opened **[SPR-1422](https://jira.spring.io/browse/SPR-1422?redirect=false)** and commented  Spring cannot be used through JNDI. I have developped a Spring JNDI provider. It has been tested against Tomcat 4.1.31, WebLogic 8.1 and JBoss 3.2 and 4.0.  The principe is the following: if you want to load a Bean from an ApplicationContext, use the Bean name prefixed by spring:. In your jndi.properties, you shoud have set: java.naming.factory.url.pkgs=org.springframework.jndi and optionaly: org.springframework.jndi.url=path to the application context file definition. If this value is not specified, then the value is extracted from Context.URL (java.naming.provider.url). If none are found, the value of applicationContext.xml is used.  So accessing a Bean from Spring is now done through the following code: MyInterface obj = (new InitialContext()).lookup(beanName);  which make your application completely independant from Spring !!!!  Please find the implementation below   ---  **Affects:** 1.2.5  **Attachments:** - [SpringContext.java](https://jira.spring.io/secure/attachment/11230/SpringContext.java) (_17.91 kB_) - [SpringInitialContextFactory.java](https://jira.spring.io/secure/attachment/11229/SpringInitialContextFactory.java) (_2.97 kB_) - [springURLContextFactory.java](https://jira.spring.io/secure/attachment/11228/springURLContextFactory.java) (_3.56 kB_)  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2005-10-27T00:36:32Z","2012-06-19T09:37:40Z"
"","6108","org.springframework.jca.cci.connection.DelegatingConnectionFactory does not support Referenceable [SPR-1408]","**[Jeff MAURY](https://jira.spring.io/secure/ViewProfile.jspa?name=jeffmaury)** opened **[SPR-1408](https://jira.spring.io/browse/SPR-1408?redirect=false)** and commented  org.springframework.jca.cci.connection.DelegatingConnectionFactory does not support Referenceable. It prevents Spring from being integrated as a JNDI provider (I have developped an implementation which I intend to submit to the Spring community). The patch should be simple: just declare a local Reference variable and implement the getter and setter with it   ---  **Affects:** 1.2.5  **Attachments:** - [DelegatingConnectionFactory.java](https://jira.spring.io/secure/attachment/11217/DelegatingConnectionFactory.java) (_2.92 kB_)","closed","type: enhancement,","spring-projects-issues","2005-10-21T08:37:50Z","2006-11-02T18:18:39Z"
"","5934","initThemeSource over writes parentThemeSource [SPR-1232]","**[jeff johnson](https://jira.spring.io/secure/ViewProfile.jspa?name=jeffcjohnson)** opened **[SPR-1232](https://jira.spring.io/browse/SPR-1232?redirect=false)** and commented  I may be using it incorrectly, but when I create a themeSource and set its parentThemeSource to a default theme source I created, UiApplicationContextUtils.initThemeSource later calls setParentThemeSource( context ) which over writes the parent I had defined.  I added a simple if statement around it and it fixed my problem, see patch below.  --- ./tmp/spring-framework-1.2.3/src/org/springframework/ui/context/support/UiApplicationContextUtils.java      2005-05-27 21:30:28.000000000 -0400 +++ ./spring-framework-1.2.3/src/org/springframework/ui/context/support/UiApplicationContextUtils.java  2005-08-16 13:31:46.477352836 -0400 @@ -61,7 +61,9 @@ if (context.getParent() instanceof ThemeSource && themeSource instanceof HierarchicalThemeSource && Arrays.asList(context.getBeanDefinitionNames()).contains(THEME_SOURCE_BEAN_NAME)) {  ---      ((HierarchicalThemeSource) themeSource).setParentThemeSource((ThemeSource) context.getParent());  +         if ( ((HierarchicalThemeSource) themeSource).getParentThemeSource() == null ) {  +         ((HierarchicalThemeSource) themeSource).setParentThemeSource((ThemeSource) context.getParent());  +                         }               }       }       catch (NoSuchBeanDefinitionException ex) {  ---  **Affects:** 1.2.3","closed","type: bug,","spring-projects-issues","2005-08-16T05:17:30Z","2019-01-13T22:50:52Z"
"","6213","Use InheritableThreadLocal instead of ThreadLocal in TransactionSynchronizationManager [SPR-1514]","**[Jeff Badorek](https://jira.spring.io/secure/ViewProfile.jspa?name=badorjw)** opened **[SPR-1514](https://jira.spring.io/browse/SPR-1514?redirect=false)** and commented  It would be nice if a bound resource in TransactionSynchronizationManager was visible to child threads. I think this could be accomplished using InheritableThreadLocal.  Here is a test case that recreates the problem. (Changing to InheritableThreadLocal works.)      public void testTransactionSynchronizationManager() throws InterruptedException {     	final ArrayList actual = new ArrayList();     	final ArrayList expected = new ArrayList();     	final Object key = new Object();     	     	TransactionSynchronizationManager.bindResource(key, ""value"");     	     	actual.add(TransactionSynchronizationManager.getResource(key));     	     	Thread thread = new Thread() {     		/* (non-Javadoc)     		 * @see java.lang.Thread#run()     		 */     		public void run() {     			expected.add(TransactionSynchronizationManager.getResource(key));     		}     	};     	     	thread.start();     	     	thread.join();     	     	assertEquals(actual, expected);     }    ---  **Affects:** 1.2.6  **Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/d203f2aae61cb71b6a4381e727aacd845ff405de","closed","type: enhancement,","spring-projects-issues","2005-12-05T00:58:04Z","2006-01-02T01:35:40Z"
"","6079","The if condition is not correct in equals method of BooleanComparator [SPR-1379]","**[Jeelani Shaik](https://jira.spring.io/secure/ViewProfile.jspa?name=sjeelani)** opened **[SPR-1379](https://jira.spring.io/browse/SPR-1379?redirect=false)** and commented  The equals() method code in org.springframework.util.comparator.BooleanComparator has wrong if(obj instanceof ..) statement  Current code:  public boolean equals(Object obj) { if (this == obj) { return true; } if (obj instanceof BooleanComparator) { return false; } return (this.trueLow == ((BooleanComparator) obj).trueLow); }  should be  public boolean equals(Object obj) { if (this == obj) { return true; } if (!(obj instanceof BooleanComparator) ){ return false; } return (this.trueLow == ((BooleanComparator) obj).trueLow); }  Thanks, Jeelani   ---  **Affects:** 1.2.5","closed","in: core,","spring-projects-issues","2005-10-14T05:26:05Z","2012-06-19T03:54:22Z"
"","6074","Minor code refactoring [SPR-1374]","**[Jeelani Shaik](https://jira.spring.io/secure/ViewProfile.jspa?name=sjeelani)** opened **[SPR-1374](https://jira.spring.io/browse/SPR-1374?redirect=false)** and commented  Dear Juergen,  **This is very trivial issue. Please see only if time permits. ***  This is a minor refactoring in class ResourceUtils.getURL(String resourceLocation) method. The refactoring is related to the declaration of variable 'description'. It should be moved inside if(url==null) to avoid un-necessary creation. Since the variable is used only once, we may very well place the actual string in the throws constructor.  The current code shown below:  if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) { String path = resourceLocation.substring(CLASSPATH_URL_PREFIX.length()); String description = ""class path resource ["" + path + ""]""; URL url = Thread.currentThread().getContextClassLoader().getResource(path); if (url == null) { throw new FileNotFoundException(description + "" cannot be resolved to URL because it does not exist""); } return url; }  can be refactored as  if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) { String path = resourceLocation.substring(CLASSPATH_URL_PREFIX.length()); URL url = Thread.currentThread().getContextClassLoader().getResource(path); if (url == null) { String description = ""class path resource ["" + path + ""]""; throw new FileNotFoundException(description + "" cannot be resolved to URL because it does not exist""); } return url; }  or more better:  if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) { String path = resourceLocation.substring(CLASSPATH_URL_PREFIX.length()); URL url = Thread.currentThread().getContextClassLoader().getResource(path); if (url == null) { throw new FileNotFoundException(class path resource ["" + path  + "" cannot be resolved to URL because it does not exist""); } return url; }  Same is applicable to the other method:getFile(String resourceLocation)  Thanks, Jeelani   ---  **Affects:** 1.2.5","closed","type: enhancement,","spring-projects-issues","2005-10-12T05:31:41Z","2012-06-19T03:54:00Z"
"","6031","AbstractCachingLabeledEnumResolver -  getLabeledEnumMap(Class type) - implementation may not be correct [SPR-1331]","**[Jeelani Shaik](https://jira.spring.io/secure/ViewProfile.jspa?name=sjeelani)** opened **[SPR-1331](https://jira.spring.io/browse/SPR-1331?redirect=false)** and commented  The AbstractCachingLabeledEnumResolver stores LabledEnumSet in CachingMapDecorator called labeledEnumCache using the code as the key to the HashMap.  When you see the implementation for the method: class AbstractCachingLabeledEnumResolver ..... {      public Map getLabeledEnumMap(Class type) throws IllegalArgumentException {          Assert.notNull(type, ""No type specified"");          return (Map) this.labeledEnumCache.get(type);     }  ... }  This method uses type as the key, which may not work. For example, for the class: LetterCodedLabeledEnum, the type is ""LetterCodedLabeledEnum.class"" where as the code is of type ""Character"".  Am I missing something here? Thanks, Jeelani   ---  **Affects:** 1.2.5","closed","in: core,","spring-projects-issues","2005-09-28T02:53:17Z","2019-01-11T21:17:11Z"
"","6027","Is there a possible of the hashcode value exceeding integer range? [SPR-1327]","**[Jeelani Shaik](https://jira.spring.io/secure/ViewProfile.jspa?name=sjeelani)** opened **[SPR-1327](https://jira.spring.io/browse/SPR-1327?redirect=false)** and commented  The hashCode() implementation of the class org.springframework.core.enums.AbstractLabeledEnum is implemented as  public int hashCode() { return getType().hashCode() * 29 * getCode().hashCode(); }  Since its a multiplication logic, is there a possibility of the resulting value being greater than integer.MAX_VALUE? If that is the case, shall we change the logic to use additional (+) operator?  Regards, Jeelani   ---  **Affects:** 1.2.5","closed","type: enhancement,","spring-projects-issues","2005-09-27T05:49:46Z","2012-06-19T03:54:02Z"
"","5887","In Javadoc for the class JavaScriptUtils, the link to reference Javascript 1.5 guide needs an update. [SPR-1184]","**[Jeelani Shaik](https://jira.spring.io/secure/ViewProfile.jspa?name=sjeelani)** opened **[SPR-1184](https://jira.spring.io/browse/SPR-1184?redirect=false)** and commented  The link Reference: http://devedge.netscape.com/library/manuals/2000/javascript/1.5/guide/ident.html (Table 2.1)  In the javadocs for the class org.springframework.web.util.JavaScriptUtils is not working.  Looks like Netscape no longer supports that link. If that is the case, we may need to refer somewhere else.  Thanks, Jeelani   ---  **Affects:** 1.2.3","closed","type: enhancement,","spring-projects-issues","2005-07-28T07:30:10Z","2005-07-31T19:59:56Z"
"","6449","SingleConnectionDataSource shouldClose should check setSuppressClose to determine if connection is closable. [SPR-1752]","**[Jay Blanton](https://jira.spring.io/secure/ViewProfile.jspa?name=jaybytez)** opened **[SPR-1752](https://jira.spring.io/browse/SPR-1752?redirect=false)** and commented  Refer to forum issue: http://forum.springframework.org/showthread.php?t=22783  I believe this should be a feature, hopefully I am not wasting my time with inexperience to Spring.  But I have an insert statement that uses a batchUpdate in JdbcTemplate to insert 1000s of rows into a database.  Great!  It uses the same connection to push all the inserts.  But, in my batchUpdate I am using the BatchPreparedStatementSetter to set values to my insert statement.  The statement takes two values (a unique primary key, and a description).  In retrieving that primary key, I am using the OracleSequenceMaxValueIncrementer.  Unfortunately the OracleSequenceMaxValueIncrementer has no way to use the same DataSource connection that the batchUpdate uses.  So I wrap a connection from my JdbcTemplate with the SingleConnectionDataSource, so that I can pass that DataSource to each invocation of the OracleSequenceMaxValueIncrementer.  This allows me to use one connection for all the retrievals of the unique primary key.  The cleanup is the issue.  I wrap all this in a try and in the finally I need to force a closure of the connection in the SingleConnectionDataSource.  I could use destroy, but I am advocating for Spring's exception handling and I don't want to deal with SQLException.  So I use DataSourceUtils releaseConnection, except that SingleConnectionDataSource shouldClose method continually returns false.  It would be nice if the shouldClose checked the value of the setSuppressClose to determine whether to withhold the connection or close it.  I extended SingleConnectionDataSource with my own version with an overridden version of shouldClose:      /**      * This is a single connection: Do not close it when returning to the ""pool"".      */     public boolean shouldClose(Connection con) {         if(this.isSuppressClose()) {             return super.shouldClose(con);         }         else {             return true;         }     }  Let me know if you need further clarification.   ---  **Affects:** 1.2.7","closed","type: enhancement,","spring-projects-issues","2006-03-01T03:33:03Z","2006-03-03T06:49:05Z"
"","5932","AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod logs stack trace while searching for matching factory method [SPR-1230]","**[Jave Virual](https://jira.spring.io/secure/ViewProfile.jspa?name=vjave)** opened **[SPR-1230](https://jira.spring.io/browse/SPR-1230?redirect=false)** and commented  AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod looks through all potential factory methods, calling into createArgumentArray which throws an exception if the arguments don't match the argument list.  That UnsatisfiedDependencyException is caught, and _logged_.  This means that if you have multiple factory methods, you're going to have stack traces appearing in your logs, when that's an extreme overkill and very annoying in the log file.  Just change the log to not show the stack trace.   ---  **Affects:** 1.2.4","closed","type: enhancement,","spring-projects-issues","2005-08-15T02:41:20Z","2005-08-15T03:51:01Z"
"","6507","Upgrade to Quartz 1.5.2 [SPR-1813]","**[Jasper Rosenberg](https://jira.spring.io/secure/ViewProfile.jspa?name=perfnorm)** opened **[SPR-1813](https://jira.spring.io/browse/SPR-1813?redirect=false)** and commented  Please upgrade the included quartz jar to the latest release, 1.5.2.  This release should have no backwards compatibility issues, but it does fix some significant Quartz clustering bugs that were introduced in the 1.5.1 release.  Thanks!   ---  **Affects:** 1.2.7, 2.0 M3","closed","type: enhancement,","spring-projects-issues","2006-03-22T23:19:14Z","2012-06-19T03:54:09Z"
"","6506","SchedulerFactoryBean has race condition in Quartz cluster [SPR-1812]","**[Jasper Rosenberg](https://jira.spring.io/secure/ViewProfile.jspa?name=perfnorm)** opened **[SPR-1812](https://jira.spring.io/browse/SPR-1812?redirect=false)** and commented  If you try to have the SchedulerFactoryBean add the same Trigger in two Quartz clustered instances (and you are only adding Triggers), you can get a race condition in registerJobsAndTriggers() where both instances don't find the Trigger, and both then try to add it using scheduleJob.  In this case, the last one in will fail with an org.quartz.ObjectAlreadyExistsException, which will keep the SchedulerFactoryBean  from successfully starting.  There is discussion of this issue in the Quartz forums here: http://forums.opensymphony.com/thread.jspa?messageID=45028꿤 and here: http://forums.opensymphony.com/thread.jspa?messageID=45027꿣  There is a similar issue in the org.quartz.plugins.xml.JobInitializationPlugin as documented here: http://jira.opensymphony.com/browse/QUARTZ-295  Spring is actually exposed to this QUARTZ-295 problem as well because registerJobsAndTriggers() can make use of ResourceJobSchedulingDataProcessor which extends the JobSchedulingDataProcessor.  However, this can only manifest itself if the user didn't provide a transactionManager to the SchedulerFactoryBean.  Unfortunately, there is no great way to fix these problems right now without some enhancements to the Quartz interface.  My best suggestion for solving the first problem right now is to catch the ObjectAlreadyExistsException thrown by this.scheduler.scheduleJob(trigger) and either a. Simply swallow the exception, possibly with a log message indicating that this is assumed to be due to a cluster race condition and can be safely ignored. b. Try to rescheduleJob() the Trigger if overwriteExistingJobs is true.  There isn't much that can be done about the second problem other than perhaps emphasising in the javadoc that you should be passing in a transactionManager if you are using the jobSchedulingDataLocation(s) properties.  As an aside, it is a little unclear to me why, if a Trigger is not new, but is a JobDetailAwareTrigger, SchedulerFactoryBean does not try to replace the Trigger's JobDetail.  I'm not sure the current behavior would be expected, and I think it would be easy to assume the opposite based on the current SchedulerFactoryBean javadoc.  ---  **Affects:** 1.2.7, 2.0 M3  **Issue Links:** - #21651 SchedulerAccessor needs to catch primary key violation on reschedule (due to Quartz race condition)","closed","type: bug,","spring-projects-issues","2006-03-22T23:16:42Z","2019-01-11T22:11:31Z"
"","6254","Addition of DatabaseOverrideConfigurer [SPR-1556]","**[Jason Vinson](https://jira.spring.io/secure/ViewProfile.jspa?name=jvinson)** opened **[SPR-1556](https://jira.spring.io/browse/SPR-1556?redirect=false)** and commented  I am working on a project that requires a gui to configure our system and we are currently using PropertyPlaceholderConfigurer to set up our beans.  We'd like to make them read/write configurable for the user in a reasonably easy manner and I feel that the most obvious approach is to use the database.  I've written a first draft of a DatabaseOverrideConfigurer, as a subclass of PropertyOverrideConfigurer, which works wonderfully so far.  I'm sure it could use a little polish, but I'm attaching it to see if it makes sense to include as a configuration module.   ---  **Attachments:** - [DatabaseConfigurer.java](https://jira.spring.io/secure/attachment/14835/DatabaseConfigurer.java) (_6.86 kB_) - [DatabaseOverrideConfigurer.java](https://jira.spring.io/secure/attachment/11360/DatabaseOverrideConfigurer.java) (_2.90 kB_) - [DatabaseOverrideConfigurerTest.java](https://jira.spring.io/secure/attachment/11361/DatabaseOverrideConfigurerTest.java) (_1.79 kB_) - [DatabasePropertyOverrideConfigurer.java](https://jira.spring.io/secure/attachment/14836/DatabasePropertyOverrideConfigurer.java) (_6.84 kB_)  2 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2005-12-20T12:10:32Z","2012-06-19T09:37:44Z"
"","6797","Upgrade bundled Struts to 1.2.9 for security flaws  [SPR-2104]","**[Jason Poley](https://jira.spring.io/secure/ViewProfile.jspa?name=jpoley)** opened **[SPR-2104](https://jira.spring.io/browse/SPR-2104?redirect=false)** and commented  There are several security related flaws in struts 1.2.8 or below http://www.frsirt.com/english/advisories/2006/1205  they have been fixed in 1.2.9   ---  **Affects:** 1.2.8, 2.0 M5","closed","type: enhancement,","spring-projects-issues","2006-06-05T14:45:58Z","2012-06-19T03:52:41Z"
"","6344","destroySingletons() in a nested XmlBeanFactory does not work [SPR-1647]","**[Jason Nah](https://jira.spring.io/secure/ViewProfile.jspa?name=jasonn)** opened **[SPR-1647](https://jira.spring.io/browse/SPR-1647?redirect=false)** and commented  Construct an XmlBeanFactory as such  XmlBeanFactory factory = new XmlBeanFactory(new ClassPathResource(""XXXX"")); factory = new XmlBeanFactory(new ClassPathResource(""YYY""), factory);  get a new bean that implements DisposableBean - a bean defined in XXX. Then call factory.disposeSingletons(). The destroy method on that bean is never called. I believe it is because the XmlBeanFactory does not invoke destroySingletons on the parentBean reference.  As a workaround, it is possible to extend XmlBeanFactory and override the disposeSingletons() method to call the parent's disposeSingletons() before calling it's own disposeSingletons()    ---  **Affects:** 1.2.6","closed","in: core,","spring-projects-issues","2006-01-29T20:53:54Z","2019-01-12T16:29:39Z"
"","6644","NameMatchMethodPointcutAdvisor in CVS does not match M4 distribution [SPR-1951]","**[jason evans](https://jira.spring.io/secure/ViewProfile.jspa?name=jevans12)** opened **[SPR-1951](https://jira.spring.io/browse/SPR-1951?redirect=false)** and commented  While upgrading from M3 to M4 org.springframework.aop.support.NameMatchMethodPointcutAdvisor caused a failure in our Spring context file. Comparing CVS to the source in the M4 distribution shows a significant difference.  No setter found for property 'classFilter' in class 'org.springframework.aop.support.NameMatchMethodPointcutAdvisor'  http://cvs.sourceforge.net/viewcvs.py/springframework/spring/src/org/springframework/aop/support/NameMatchMethodPointcutAdvisor.java?rev=1.11&view=markup  M4 src tree /* * Copyright 2002-2006 the original author or authors.  *   * Licensed under the Apache License, Version 2.0 (the ""License"");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *   *         http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an ""AS IS"" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.   */  package org.springframework.aop.support;  import org.aopalliance.aop.Advice;  import org.springframework.aop.Pointcut; import org.springframework.aop.PointcutAdvisor; import org.springframework.core.Ordered; import org.springframework.util.ObjectUtils;  /** * Convenient class for name-match method pointcuts that hold an Interceptor,  * making them an Advisor.  *   * `@author` Juergen Hoeller  * `@author` Rob Harrop   */   public class NameMatchMethodPointcutAdvisor extends AbstractPointcutAdvisor {    private final NameMatchMethodPointcut pointcut = new NameMatchMethodPointcut();    public NameMatchMethodPointcutAdvisor() {   }    public NameMatchMethodPointcutAdvisor(Advice advice) {   setAdvice(advice);   }    public Pointcut getPointcut() {   return this.pointcut;   }    public boolean isPerInstance() {   throw new UnsupportedOperationException(""perInstance property of Advisor is not yet supported in Spring"");   }    public NameMatchMethodPointcut addMethodName(String name) {   return this.pointcut.addMethodName(name);   }    public void setMappedName(String mappedName) {   this.pointcut.setMappedName(mappedName);   }    public void setMappedNames(String[] mappedNames) {   this.pointcut.setMappedNames(mappedNames);   }   }    ---  **Affects:** 2.0 M4  2 votes, 2 watchers","closed","in: core,","spring-projects-issues","2006-04-24T04:38:03Z","2012-06-19T03:52:34Z"
"","6489","Constructor arguments with generic Collections seems to break singletons [SPR-1795]","**[jason evans](https://jira.spring.io/secure/ViewProfile.jspa?name=jevans12)** opened **[SPR-1795](https://jira.spring.io/browse/SPR-1795?redirect=false)** and commented  I wish to inject a singleton hash map via constructor injection. If my constructor signature includes a typed generic collection  declaration. public TypedGenericConstructor(Map state,Map state2)  An injected singleton map here becomes 2 seperate objects after class construction.  If my constructor signature includes a non-typed generic collection  declaration. public NonTypedGenericConstructor(Map state,Map state2)  An injected singleton map here is the same object after class construction.  \ 	\ 	\ 		\ 		\ 	\ 	\ 		\ 		\ 	\ \ public class TypedGenericConstructor {      private Map state;     private Map state2;          public TypedGenericConstructor(Map state,Map state2) {         this.state = state;         this.state2 = state2;     }  }  public class NonTypedGenericConstructor {      private Map state;     private Map state2;          public NonTypedGenericConstructor(Map state,Map state2) {         this.state = state;         this.state2 = state2;          }  }    ---  **Affects:** 2.0 M3  **Attachments:** - [test.jar](https://jira.spring.io/secure/attachment/11508/test.jar) (_1.54 kB_)  1 votes, 1 watchers","closed","in: core,","spring-projects-issues","2006-03-15T23:54:24Z","2012-06-19T03:54:23Z"
"","6785","""classFilter""  property missing from the TransactionAttributeSourceAdvisor [SPR-2092]","**[Jason Carreira](https://jira.spring.io/secure/ViewProfile.jspa?name=jcarreira)** opened **[SPR-2092](https://jira.spring.io/browse/SPR-2092?redirect=false)** and commented  I use the annotations for most transactionality, but I've got a safety check on my update* and delete* methods of anything extending my base DAO class that gives them PROPAGATION_MANDATORY so an exception will  be thrown if you get there without a transaction. Right now I do this:  \               Defines mappings between method names and transaction attributes                                       PROPAGATION_MANDATORY                 PROPAGATION_MANDATORY                                              AOP interceptor which uses the method name transaction attribute mapping defined above.                                                            Class filter which will pick up all subclasses of AbstractHibernateDao                                 Advisor which pairs the dao class filter with the transaction interceptor to automatically proxy Dao classes with transactional behavior.                         But somewhere between 2.0 M2 and 2.0 M4 the classFilter property of the TransactionAttributeSourceAdvisor disappeared, so I this doesn't work.   ---  **Affects:** 2.0 M5","closed","in: core,","spring-projects-issues","2006-06-02T00:37:49Z","2019-01-12T16:52:13Z"
"","6323","Allow scoping of FactoryBeans [SPR-1626]","**[Jason Carreira](https://jira.spring.io/secure/ViewProfile.jspa?name=jcarreira)** opened **[SPR-1626](https://jira.spring.io/browse/SPR-1626?redirect=false)** and commented  I've started using the scoped components support in Spring, and, although I've had to deal with some issues with lifecycles that are different than my implementation of session-scoped components, I've got them working.  The biggest problem I've had is the inability to scope FactoryBeans. Because the  tags are actually creating ScopedProxyFactoryBean configurations which use your current config as the target it can't have FactoryBeans as the target of the other FactoryBean.  It would be very helpful if it could be made possible to scope a FactoryBean, as there are very real use-cases of this (which I just had to work around and get working without). Perhaps using a BeanPostProcessor instead?  ---  **Affects:** 2.0 M1  **Issue Links:** - #6544 Document the scoped bean support (_**""is depended on by""**_)","closed","type: enhancement,","spring-projects-issues","2006-01-18T04:39:25Z","2019-01-11T21:21:27Z"
"","6732","Provide GeronimoFactoryBean like JotmFactoryBean [SPR-2039]","**[Jara Cesnek](https://jira.spring.io/secure/ViewProfile.jspa?name=cesnek)** opened **[SPR-2039](https://jira.spring.io/browse/SPR-2039?redirect=false)** and commented  Provide GeronimoFactoryBean for using Geromino Transaction Manager for use in light application servers like TOMCAT.  JOTM is very buggy and not production ready (#6520), so there is only Geronimo TM usable outside full application servers.  ---  **Affects:** 1.2.7","closed","type: enhancement,","spring-projects-issues","2006-05-19T03:21:18Z","2019-01-11T18:15:52Z"
"","6521","JOTM: Db code after call to @Transactional(propagation=Propagation.REQUIRES_NEW) commits transaction [SPR-1827]","**[Jara Cesnek](https://jira.spring.io/secure/ViewProfile.jspa?name=cesnek)** opened **[SPR-1827](https://jira.spring.io/browse/SPR-1827?redirect=false)** and commented  Spring commits upper transaction after every inner transaction end - and current transaction make any DB call.      @Transactional(propagation=Propagation.REQUIRED,rollbackFor=Exception.class)     public void test() {         new JdbcTemplate(defaultDataSource).update(""insert into table (a) values ('Begin')"");         getNewId();         new JdbcTemplate(defaultDataSource).update(""insert into table (a) values ('Middle')"");         getNewId();         new JdbcTemplate(defaultDataSource).update(""insert into table (a) values ('End')"");              throw new Exception(); //rollback only last statement     }          @Transactional(propagation=Propagation.REQUIRES_NEW,rollbackFor=Exception.class)     public void getNewId()  {       ...     }  So I think in table 'table' should be no rows. But 'Begin' and 'Middle' are present.   ---  **Affects:** 1.2.7  **Attachments:** - [log4j.log](https://jira.spring.io/secure/attachment/11531/log4j.log) (_123.96 kB_)","closed","","spring-projects-issues","2006-03-27T01:53:12Z","2019-01-11T22:11:24Z"
"","6520","JOTM work strange with @Transactional(propagation=Propagation.REQUIRES_NEW) [SPR-1826]","**[Jara Cesnek](https://jira.spring.io/secure/ViewProfile.jspa?name=cesnek)** opened **[SPR-1826](https://jira.spring.io/browse/SPR-1826?redirect=false)** and commented  In javadoc in JotmFactoryBean.java is example how to configure JOTM beans:  \ \ \ \ \ \ \ \ \ \ \  Notice innerDataSource dont know about user/password. But it should doesnt matter because spring should always access dataSource bean. But it is not true. When obtaining new connection for method code inside Propagation.REQUIRES_NEW it ignore user/password values in dataSource bean and try to access database without user/pasword set.  MSSQL : JTDS drivers try to use SSPI integrated login from windows login -> Exception :  java.sql.SQLException: SQLException in StandardPoolDataSource:getConnection exception: java.sql.SQLException: SQLException in StandardPoolDataSource:getConnection no connection available java.sql.SQLException: Cannot get connection for URL jdbc:jtds:sqlserver://sqltst:1433/kdb_app_tst : I/O Error: SSO Failed: Native SSPI library not loaded. Check the java.library.path system property.  Of course I dont want use SSPI.  ORACLE: On oracle drivers it is similar : java.sql.SQLException: SQLException in StandardPoolDataSource:getConnection exception: java.sql.SQLException: Cannot get connection for URL jdbc:oracle:thin:`@pubal`:1521/orcl2 : calling of invalid argument ... (=no login and password set)  Setting user/password properties on innerDataSource solve the problem, but why spring bypasses pool and go direct to StandardXADataSource ?   ---  **Affects:** 1.2.7","closed","status: declined,","spring-projects-issues","2006-03-27T01:12:10Z","2019-01-12T16:29:27Z"
"","6286","Spring AOP hides Java5 Annotations [SPR-1589]","**[Jara Cesnek](https://jira.spring.io/secure/ViewProfile.jspa?name=cesnek)** opened **[SPR-1589](https://jira.spring.io/browse/SPR-1589?redirect=false)** and commented  I got ordinary bean with two different annotations :  `@FsService`(name=""TFSMainMethods.MainMethods"") public class MainMethods {      @FsMethod     @Transactional(rollbackFor=Exception.class)     public void pSave(StubParams params) throws DaisyException {         ....     }  }  When I on other place check this bean :      Object obj = applicationContext.getBean(name);     FsService anno = realObj.getClass().getAnnotation(FsService.class);  anno is always null.  Method getBean return proxy which transparent implement all method but no annotation.  Maybe this is rather CGLIB problem.    ---  **Affects:** 1.2.6  1 votes, 3 watchers","closed","in: core,","spring-projects-issues","2006-01-03T23:36:01Z","2019-01-12T16:29:42Z"
"","6196","Cant set property in child bean. Spring see only parent properties. [SPR-1497]","**[Jara Cesnek](https://jira.spring.io/secure/ViewProfile.jspa?name=cesnek)** opened **[SPR-1497](https://jira.spring.io/browse/SPR-1497?redirect=false)** and commented  sap-servlet.xml  \ \\\ \\\ \ \ \\\ \  GenCis.java public class GenCis extends SapFellowshipParent {      private Providers providers;     public Providers setMcProviders(Providers providers){         return providers;     }  The rest of properties is defined in SapFellowshipParent .java  2005-11-25 12:50:57,874 ERROR [org.apache.catalina.core.ContainerBase.[Catalina].[localhost].[/daisy]] -  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'cz.marbes.daisy.modules.sap.fellowships.tfsgencis.GenCis' defined in ServletContext resource [/WEB-INF/sap-servlet.xml]: Error setting property values; nested exception is org.springframework.beans.NotWritablePropertyException: Invalid property 'mcProviders' of bean class [cz.marbes.daisy.modules.sap.fellowships.tfsgencis.GenCis]: Bean property 'mcProviders' is not writable or has an invalid setter method: Does the parameter type of the setter match the return type of the getter? org.springframework.beans.NotWritablePropertyException: Invalid property 'mcProviders' of bean class at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:567)  The bug is that ""cachedIntrospectionResults"" observe only parent but not child GenCis and throw exception when touch mcProviders.   ---  **Affects:** 1.2.6","closed","in: core,","spring-projects-issues","2005-11-24T21:59:39Z","2019-01-11T21:09:38Z"
"","6567","Data binding fails for SimpleFormController and velocity [SPR-1873]","**[Jan-Peter Wilhelms](https://jira.spring.io/secure/ViewProfile.jspa?name=jpwilhelms)** opened **[SPR-1873](https://jira.spring.io/browse/SPR-1873?redirect=false)** and commented  I created a really simple SimpleFormController and a corresponding velocity template ""foo.vm"". The template contains the folloging form:  \ #springFormInput( ""command.message"" """" ) \ \  I want the form being pre filled with the message from the command object.  But when accessing the form I get the following error inside the tomcat log:  2006-04-09 09:46:21,828 ERROR [org.apache.velocity.app.VelocityEngine] - RHS of #set statement is null. Context will not be modified. foo.vm [line 4, column 1] 2006-04-09 09:46:21,828 WARN [org.apache.velocity.app.VelocityEngine] - org.apache.velocity.runtime.exception.ReferenceException: reference : template = foo.vm [line 2,column 28] : ${status.expression} is not a valid reference. 2006-04-09 09:46:21,828 WARN [org.apache.velocity.app.VelocityEngine] - org.apache.velocity.runtime.exception.ReferenceException: reference : template = foo.vm [line 2,column 56] : ${status.expression} is not a valid reference.  In the constructor of my controller I set the following properties: setCommandClass( MyCommand.class ); setCommandName( ""command"" ); setSessionForm( true ); setBindOnNewForm( true );  In general accessing the command object works (I can output the message).  I tried to overwrite the method ""formBackingObject"" but that didn't change anything.  Do I have to call some binding methods by hand? Or is this a bug?  ---  **Affects:** 2.0 M3  **Attachments:** - [springwebapp.zip](https://jira.spring.io/secure/attachment/11590/springwebapp.zip) (_3.37 kB_) - [velo.zip](https://jira.spring.io/secure/attachment/11801/velo.zip) (_12.46 kB_)  **Issue Links:** - #6981 Get better exception messages from Velocity when using Spring macros and exposeMacroHelpers is not set (_**""is depended on by""**_)","closed","type: bug,","spring-projects-issues","2006-04-08T21:21:26Z","2019-01-13T22:48:28Z"
"","6225","AntPathMatcher fails to match /foo/ for pattern /foo/* [SPR-1526]","**[James](https://jira.spring.io/secure/ViewProfile.jspa?name=gcnovus)** opened **[SPR-1526](https://jira.spring.io/browse/SPR-1526?redirect=false)** and commented  I have a SimpleURLHandlerMapping with the following entry: \MVC:ProjectsController\  This pattern should match ""/projects/"" but does not.  The source code has a comment saying that only the pattern ""/projects/**"" would match the string ""/projects/"".  (line 81: ""// String is exhausted, only match if rest of pattern is **'s"")   ---  **Affects:** 1.2.6","closed","type: bug,","spring-projects-issues","2005-12-09T09:25:41Z","2012-06-19T03:54:31Z"
"","6626","Add JavaScriptFactory [SPR-1933]","**[James Tikalsky](https://jira.spring.io/secure/ViewProfile.jspa?name=tikalsky)** opened **[SPR-1933](https://jira.spring.io/browse/SPR-1933?redirect=false)** and commented  ---  **Affects:** 2.0 M4  **Attachments:** - [JavaScriptFactory.java](https://jira.spring.io/secure/attachment/11582/JavaScriptFactory.java) (_1.83 kB_) - [JavaScriptUtils.java](https://jira.spring.io/secure/attachment/11583/JavaScriptUtils.java) (_2.77 kB_) - [org.springframework.scripting.rhino_100204.zip](https://jira.spring.io/secure/attachment/16142/org.springframework.scripting.rhino_100204.zip) (_4.80 kB_) - [org.springframework.scripting.rhino_100205.zip](https://jira.spring.io/secure/attachment/16144/org.springframework.scripting.rhino_100205.zip) (_4.87 kB_) - [org.springframework.scripting.rhino.zip](https://jira.spring.io/secure/attachment/16139/org.springframework.scripting.rhino.zip) (_4.23 kB_) - [readme.html](https://jira.spring.io/secure/attachment/12253/readme.html) (_3.12 kB_) - [spring-rhino-0-1.jar](https://jira.spring.io/secure/attachment/12254/spring-rhino-0-1.jar) (_4.63 kB_) - [spring-rhino-patch-0-1.txt](https://jira.spring.io/secure/attachment/12258/spring-rhino-patch-0-1.txt) (_2.54 kB_) - [spring-rhino-src-0-1.jar](https://jira.spring.io/secure/attachment/12255/spring-rhino-src-0-1.jar) (_2.72 kB_) - [spring-rhino-test-0-1.jar](https://jira.spring.io/secure/attachment/12256/spring-rhino-test-0-1.jar) (_6.25 kB_) - [spring-rhino-test-src-0-1.jar](https://jira.spring.io/secure/attachment/12257/spring-rhino-test-src-0-1.jar) (_4.81 kB_)  **Issue Links:** - #9888 ScriptFactory for JSR-223 (_**""is superseded by""**_)  9 votes, 8 watchers","closed","type: enhancement,","spring-projects-issues","2006-04-19T12:47:26Z","2019-01-13T08:55:35Z"
"","6080","suppress exposing exception as model attribute on SimpleMappingExceptionResolver [SPR-1380]","**[Jae Gangemi](https://jira.spring.io/secure/ViewProfile.jspa?name=jgangemi)** opened **[SPR-1380](https://jira.spring.io/browse/SPR-1380?redirect=false)** and commented  could a flag be added to the SimpleMappingExceptionResolver such that if it was set to false, it would suppress adding the exception to the model that is returned?   --- No further details from [SPR-1380](https://jira.spring.io/browse/SPR-1380?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-10-14T05:54:26Z","2012-06-19T03:54:40Z"
"","6688","Maven 2 buildproces halts since new pom files have been added in http://www.ibiblio.org/maven2/org/springframework/spring-full/1.2.7  [SPR-1995]","**[Jacob Hoeflaken](https://jira.spring.io/secure/ViewProfile.jspa?name=jhoeflaken)** opened **[SPR-1995](https://jira.spring.io/browse/SPR-1995?redirect=false)** and commented  I've noticed that the pom files for maven 2 have been added to the http://www.ibiblio.org/maven2/ repository. The pom in org/springframework/spring/1.2.7 references a parent pom in org/springframework/spring-full/1.2.7 which doesn't exists. This causes the maven 2 build proces to halt! The 1.2.7 directory doesn't even exists in the org/springframework/spring-full directory?  Can this been fixed asap or some workaround be introduced? We can't build the application!   ---  **Affects:** 1.2.7  1 votes, 1 watchers","closed","","spring-projects-issues","2006-05-09T18:41:36Z","2019-01-11T22:20:44Z"
"","6172","org.springframework.web.util.ExpressionEvaluationUtils [SPR-1473]","**[Ivo Mägi](https://jira.spring.io/secure/ViewProfile.jspa?name=ivom2gi)** opened **[SPR-1473](https://jira.spring.io/browse/SPR-1473?redirect=false)** and commented  Have developed Spring application since Spring 1.2.1 and have had no problems with ExpressionEvaluationUtils utility class. Now the 1.2.6 release is out and the following method body has changed resulting in following:  Caused by: javax.servlet.jsp.JspException: Attribute value ""true"" is neither a JSP EL expression nor assignable to resul t class [java.lang.Boolean] at org.springframework.web.util.ExpressionEvaluationUtils.evaluate(ExpressionEvaluationUtils.java:111) at ee.envreg.web.tag.CommonTag.evaluate(CommonTag.java:229) at ee.envreg.web.tag.CommonTag.evaluateBoolean(CommonTag.java:251) at ee.envreg.web.tag.input.InputTag.doStartTagInternal(InputTag.java:185)  In 1.2.5 the method looked like:      public static Object evaluate(String attrName, String attrValue, Class resultClass, PageContext pageContext)         throws JspException {     	if (isExpressionLanguage(attrValue)) {     		return helper.evaluate(attrName, attrValue, resultClass, pageContext);     	}     	else {     		return attrValue;     	}     }  But in 1.2.6 :      public static Object evaluate(String attrName, String attrValue, Class resultClass, PageContext pageContext)         throws JspException {          	if (isExpressionLanguage(attrValue)) {     		return helper.evaluate(attrName, attrValue, resultClass, pageContext);     	}     	else if (attrValue != null && resultClass != null && !resultClass.isInstance(attrValue)) {     		throw new JspException(""Attribute value \"""" + attrValue + ""\"" is neither a JSP EL expression nor "" +     				""assignable to result class ["" + resultClass.getName() + ""]"");     	}     	else {     		return attrValue;     	}     }  As far as I understand the change is incorrect - i cannot evaluate anything except String anymore because the attrValue is always java.lang.String   ---  **Affects:** 1.2.6","closed","status: declined,","spring-projects-issues","2005-11-16T01:26:56Z","2019-01-12T16:29:51Z"
"","6004","packaged war cannot handle wildcards in hibernate mappingLocation [SPR-1303]","**[Ivo Mägi](https://jira.spring.io/secure/ViewProfile.jspa?name=ivom2gi)** opened **[SPR-1303](https://jira.spring.io/browse/SPR-1303?redirect=false)** and commented  I am developing a spring application for Weblogic Server 8.1SP4. Currently having the following problem:  Using wildcards in servlet.xml for mapping hibernate .hbm.xml files as following:  \ \ \ \classpath*:*.hbm.xml\ \ \ \ \org.hibernate.dialect.PointbaseDialect\ \false\ \ \ \  results in a IllegalArgumentException in deploying webapp as a WAR.  Stacktrace follows:  14.42.2005 06:42:45 ERROR [ExecuteThread: '1' for queue: 'weblogic.kernel.System'] - servlet.DispatcherServlet - Context initialization failed org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sessionFactory' defined in Servl etContext resource [/WEB-INF/bug-servlet.xml]: Error setting property values; nested exception is org.springframework.be ans.PropertyAccessExceptionsException: PropertyAccessExceptionsException (1 errors); nested propertyAccessExceptions are : [org.springframework.beans.TypeMismatchException: Failed to convert property value of type [java.lang.String] to requi red type [[Lorg.springframework.core.io.Resource;] for property 'mappingLocations'; nested exception is java.lang.Illega lArgumentException: Could not convert location pattern [classpath*:*.hbm.xml] to Resource array] PropertyAccessExceptionsException (1 errors) org.springframework.beans.TypeMismatchException: Failed to convert property value of type [java.lang.String] to required type [[Lorg.springframework.core.io.Resource;] for property 'mappingLocations'; nested exception is java.lang.IllegalAr gumentException: Could not convert location pattern [classpath*:*.hbm.xml] to Resource array java.lang.IllegalArgumentException: Could not convert location pattern [classpath*:*.hbm.xml] to Resource array at org.springframework.core.io.support.ResourceArrayPropertyEditor.setAsText(ResourceArrayPropertyEditor.java:70 ) at org.springframework.beans.BeanWrapperImpl.doTypeConversionIfNecessary(BeanWrapperImpl.java:982) at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:803) at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:716) at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:844) at org.springframework.beans.BeanWrapperImpl.setPropertyValues(BeanWrapperImpl.java:871) at org.springframework.beans.BeanWrapperImpl.setPropertyValues(BeanWrapperImpl.java:860) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAuto wireCapableBeanFactory.java:926) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCap ableBeanFactory.java:727) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapab leBeanFactory.java:336) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:223) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:147) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListable BeanFactory.java:271) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:312) at org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.refresh(AbstractRefreshableW ebApplicationContext.java:134) at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:305) at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:250) at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:219) at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:111) at javax.servlet.GenericServlet.init(GenericServlet.java:258) at weblogic.servlet.internal.ServletStubImpl$ServletInitAction.run(ServletStubImpl.java:1028) at weblogic.security.acl.internal.AuthenticatedSubject.doAs(AuthenticatedSubject.java:321) at weblogic.security.service.SecurityManager.runAs(SecurityManager.java:121) at weblogic.servlet.internal.ServletStubImpl.createServlet(ServletStubImpl.java:904) at weblogic.servlet.internal.ServletStubImpl.createInstances(ServletStubImpl.java:883) at weblogic.servlet.internal.ServletStubImpl.prepareServlet(ServletStubImpl.java:822) at weblogic.servlet.internal.WebAppServletContext.preloadServlet(WebAppServletContext.java:3333) at weblogic.servlet.internal.WebAppServletContext.preloadServlets(WebAppServletContext.java:3278) at weblogic.servlet.internal.WebAppServletContext.preloadResources(WebAppServletContext.java:3259) at weblogic.servlet.internal.WebAppServletContext.setStarted(WebAppServletContext.java:5949) at weblogic.servlet.internal.WebAppModule.start(WebAppModule.java:862) at weblogic.j2ee.J2EEApplicationContainer.start(J2EEApplicationContainer.java:2127) at weblogic.j2ee.J2EEApplicationContainer.activate(J2EEApplicationContainer.java:2168) at weblogic.management.deploy.slave.SlaveDeployer$ComponentActivateTask.activateContainer(SlaveDeployer.java:250 3) ...  I have provided a minimal testcase for the issue which can be downloaded from http://ivo.webmedia.ee/HibernatePattern_2.0.zip  Steps to reproduce: 1. Have a Weblogic Server 8.1SP4 running in development mode. 2. unzip HibernatePattern_2.0.zip 3. deploy bug.war. Stacktrace should be displayed to you.  Alternate scenarios: - deploy war folder (exploded .war file) - Open browser for URL http://localhost:7001/bug/. You should see a ""Hello world"" message. Everything works now.  Effect for the issue: need of manual listing of .bhm.xml files in servlet.xml, which can cause errors.  Case can be reproduced with Spring version 1.2.4   ---  **Affects:** 1.2.4","closed","in: core,","spring-projects-issues","2005-09-15T00:12:00Z","2012-06-19T03:54:31Z"
"","5919","Classloader issue with BEA WLS8.1 and ContextLoaderListener? [SPR-1217]","**[Ivo Mägi](https://jira.spring.io/secure/ViewProfile.jspa?name=ivom2gi)** opened **[SPR-1217](https://jira.spring.io/browse/SPR-1217?redirect=false)** and commented  I am developing a spring application for Weblogic Server 8.1SP4. Currently having the following problem:  Defining ContextLoaderListener in web.xml for reloading resources as following:  \  \contextConfigLocation\  \/WEB-INF/envreg-servlet.xml\  \  \  \org.springframework.web.context.ContextLoaderListener\  \   results in a classcast exception in development while weblogic automatically redeploys webapp an exploded webapp after recompilation.  Stacktrace follows:  java.lang.IllegalStateException: Root context attribute is not of type WebApplicationContext: org.springframework.web.context.support.XmlWebApplicationContext: display name [Root WebApplicationContext]; startup date [Wed Jul 27 10:37:34 EEST 2005]; root of context hierarchy; config locations [/WEB-INF/bug-servlet.xml] at org.springframework.web.context.support.WebApplicationContextUtils.getWebApplicationContext(WebApplicationContextUtils.java:64) at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:249) at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:219) at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:111) at javax.servlet.GenericServlet.init(GenericServlet.java:258) at weblogic.servlet.internal.ServletStubImpl$ServletInitAction.run(ServletStubImpl.java:1028) at weblogic.security.acl.internal.AuthenticatedSubject.doAs(AuthenticatedSubject.java:321) at weblogic.security.service.SecurityManager.runAs(SecurityManager.java:121) at weblogic.servlet.internal.ServletStubImpl.createServlet(ServletStubImpl.java:904) ...  I have provided a minimal testcase for the issue which can be downloaded from http://ivo.webmedia.ee/bug.zip  Steps to reproduce:  1. Have a Weblogic Server 8.1SP4 running in development mode. 2. unzip bug.zip 3. deploy war folder (exploded .war file) 4. Open browser for URL http://localhost:7001/bug/. You should see a ""Hello world"" message. 5. Change ee.bug.HelloController.java file and recompile it to the WEB-INF/classes folder. ant compile target should do it. 6. Refresh the browser window. Stacktrace should be displayed to you.  Alternate scenarios:  - redeploy webapp from weblogic console before hitting the URL - everything works - remove following from the web.xml. Now everything works even without redeployment from console.  \  \  org.springframework.web.context.ContextLoaderListener  \  \  - put to the server's classpath all the supporting libraries from WEB-INF/lib (common-log, spring, jstl) and remove those from WEB-INF/lib. Everything works now.   Business effect for the issue: notable development slowdown due to the need of manual redeployment after each change in class files.  I have previously opened a case in BEA support environment, but their claim was it to be a spring problem, most likely a classloader issue (inforrect static reference somewhere?)  Case can be reproduced with at least Spring versions 1.2.2 and 1.2.3  - tried countries sample application - after switching the sample app also to the exploded format (slightly modifying build scripts as compiling everything to the WEB-INF/classes and removing counties.jar from WEB-INF/lib) the same exception occured:  java.lang.IllegalStateException: Root context attribute is not of type WebApplicationContext: org.springframework.web.context.support.XmlWebApplicationContext: display name [Root WebApplicationContext]; startup date [Wed Jul 27 12:05:51 EEST 2005]; root of context hierarchy; config locations [/WEB-INF/applicationContext.xml] at org.springframework.web.context.support.WebApplicationContextUtils.getWebApplicationContext(WebApplicationContextUtils.java:64) at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:249) at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:219) at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:111) at javax.servlet.GenericServlet.init(GenericServlet.java:258) at weblogic.servlet.internal.ServletStubImpl$ServletInitAction.run(ServletStubImpl.java:1028) at weblogic.security.acl.internal.AuthenticatedSubject.doAs(AuthenticatedSubject.java:321) at weblogic.security.service.SecurityManager.runAs(SecurityManager.java:121) at weblogic.servlet.internal.ServletStubImpl.createServlet(ServletStubImpl.java:904) at weblogic.servlet.internal.ServletStubImpl.createInstances(ServletStubImpl.java:883) at weblogic.servlet.internal.ServletStubImpl.prepareServlet(ServletStubImpl.java:822)  Seems like an issue related to WLS 8.1 classloading and spring initialization - checked the provided code with tomcat 5.0.28 with automatic redeployment flags turned on and it works.   ---  **Affects:** 1.2.2, 1.2.3  **Attachments:** - [bug-2.rar](https://jira.spring.io/secure/attachment/11094/bug-2.rar) (_1.82 MB_) - [CR189815_810sp4.jar](https://jira.spring.io/secure/attachment/11093/CR189815_810sp4.jar) (_74.51 kB_)  2 votes, 3 watchers","closed","status: declined,","spring-projects-issues","2005-08-09T02:57:57Z","2019-01-12T16:40:54Z"
"","6195","PriceIncreaseFormController.java causes a trivial compile error in step-by-step tutorial step22 [SPR-1496]","**[INOUE Seiichiro](https://jira.spring.io/secure/ViewProfile.jspa?name=inoue)** opened **[SPR-1496](https://jira.spring.io/browse/SPR-1496?redirect=false)** and commented  I'm reading http://www.springframework.org/docs/MVC-step-by-step/Spring-MVC-step-by-step-Part-3.html  springapp/src/web/PriceIncreaseFormController.java has the following trivial bug (it requires "")"" before semi-colon).  > logger.info(""returning from PriceIncreaseForm view to "" + getSuccessView();    --- No further details from [SPR-1496](https://jira.spring.io/browse/SPR-1496?redirect=false)","closed","type: bug,","spring-projects-issues","2005-11-24T21:13:30Z","2012-06-19T03:54:21Z"
"","6069","Spring Bind [SPR-1369]","**[Ibexx](https://jira.spring.io/secure/ViewProfile.jspa?name=ibexx)** opened **[SPR-1369](https://jira.spring.io/browse/SPR-1369?redirect=false)** and commented  Very similar to #6002.  This outputs: P in my JSP (type is a char) ${tdForm.newTrackingAttributeDefinition.type}  This crashes with: An exception occured trying to convert String ""P"" to type ""java.lang.Long""  [stuff]   ---  **Affects:** 1.2.5","closed","status: declined,","spring-projects-issues","2005-10-11T10:08:36Z","2019-01-12T16:29:57Z"
"","6842","XML response via VelocityView can't be recognized [SPR-2151]","**[Hugo Zhu](https://jira.spring.io/secure/ViewProfile.jspa?name=rainmanzhu)** opened **[SPR-2151](https://jira.spring.io/browse/SPR-2151?redirect=false)** and commented  Hi,  I was trying to develope some ajax application, the response is rendered by Velocity in Spring Framework. But may have two kinds of content-type in one application: xml or html.  Since VelocityView always resets response header content-type even you already set it in your action implementation. The xml response will be recognized as HTML in browser.  I suggest we add a check in renderMergedTemplateModel , see below.      /**      * Process the model map by merging it with the Velocity template.      * Output is directed to the servlet response.      * This method can be overridden if custom behavior is needed.      */     protected void renderMergedTemplateModel(     		Map model, HttpServletRequest request, HttpServletResponse response) throws Exception {                     if(response.getContentType()==null)                       //added      	     response.setContentType(getContentType()); //default content-type                }                                                                                        //added           	exposeHelpers(model, request);          	// create Velocity Context from model     	Context velocityContext = createVelocityContext(model, request, response);          	exposeHelpers(velocityContext, request, response);     	exposeToolAttributes(velocityContext, request);          	doRender(velocityContext, response);     }  Thanks! SpringFramework is great!   ---  **Affects:** 1.2.8, 2.0 M5","closed","type: bug,","spring-projects-issues","2006-06-17T18:45:33Z","2012-06-19T03:52:41Z"
"","6433","Update Spring / Tapestry integration documentation [SPR-1736]","**[Howard M. Lewis Ship](https://jira.spring.io/secure/ViewProfile.jspa?name=hlship)** opened **[SPR-1736](https://jira.spring.io/browse/SPR-1736?redirect=false)** and commented  The Spring / Tapestry integration documentation is very nice, but really covers Tapestry 3.  It is **so** much simpler in Tapestry 4.  All that's needed is a single add-on library: http://howardlewisship.com/tapestry-javaforge/tapestry-spring/  You can then inject spring beans into Tapestry very easily:  `@InjectObject`(""spring:myBean"") public abstract MyBeanInterface getMyBean();  Without annotations, update the .page (or .jwc file):  \   ---  **Affects:** 1.2.6","closed","type: enhancement,","spring-projects-issues","2006-02-21T03:33:22Z","2012-06-19T03:54:34Z"
"","6047","I have upgraded from WAS 4 in WSAD environment to RAD6 and WAS 6 [SPR-1347]","**[hmsaidi el](https://jira.spring.io/secure/ViewProfile.jspa?name=hmsaidi)** opened **[SPR-1347](https://jira.spring.io/browse/SPR-1347?redirect=false)** and commented  after I migrated my application from Websphere 4 to 6 in RAD test environment, my server will start and complain about class not found.  although the class is there.  I have many error comming from spring.  I have the log:  ase_v6\profiles\default\installedApps\cat503061Node01Cell\query.ear\querybean.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\ManagementEJB.ear\mejb.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\profiles\default\installedApps\cat503061Node01Cell\ivtApp.ear\ivtEJB.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\SchedulerCalendars.ear\Calendars.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\profiles\default\installedApps\cat503061Node01Cell\DefaultApplication.ear\Increment.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\adminconsole.ear\struts.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\adminconsole.ear\commons-beanutils.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\adminconsole.ear\commons-collections.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\adminconsole.ear\commons-digester.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\adminconsole.ear\commons-logging.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\adminconsole.ear\commons-validator.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\adminconsole.ear\jakarta-oro.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\adminconsole.ear\struts-legacy.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\adminconsole.ear\commons-fileupload.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\adminconsole.ear\svg_chart_generator.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\adminconsole.ear\svg_chart_util.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\adminconsole.ear\batik-1.5.jar Delegation mode: PARENT_LAST [2] com.ibm.ws.classloader.ExtJarClassLoader@2031577956 Local ClassPath: C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\lib\app\commons-collections.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\lib\app\tuf-sys-common.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\lib\app\tuf-sys-web-was60.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\lib\app\tuf-sys-web.jar;  Delegation Mode: PARENT_LAST [3] com.ibm.ws.classloader.ProtectionClassLoader@662beb64 [4] com.ibm.ws.bootstrap.ExtClassLoader@3cd4eb66 [5] sun.misc.Launcher$AppClassLoader@3cd9eb66 [6] sun.misc.Launcher$ExtClassLoader@3ca5eb66 ---Original exception--- java.lang.NoClassDefFoundError: cat/ld/swa/common/sqlmgr/PartStoreConnector at java.lang.ClassLoader.defineClass0(Native Method) at java.lang.ClassLoader.defineClass(ClassLoader.java(Compiled Code)) at java.security.SecureClassLoader.defineClass(SecureClassLoader.java(Compiled Code)) at com.ibm.ws.classloader.CompoundClassLoader._defineClass(CompoundClassLoader.java:576) at com.ibm.ws.classloader.CompoundClassLoader.findClass(CompoundClassLoader.java(Compiled Code)) at com.ibm.ws.classloader.CompoundClassLoader.loadClass(CompoundClassLoader.java(Compiled Code)) at java.lang.ClassLoader.loadClass(ClassLoader.java(Compiled Code)) at java.lang.Class.forName0(Native Method) at java.lang.Class.forName(Class.java:260) at org.springframework.util.ClassUtils.forName(ClassUtils.java:86) at org.springframework.beans.factory.support.BeanDefinitionReaderUtils.createBeanDefinition(BeanDefinitionReaderUtils.java:61) at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.parseBeanDefinitionElement(DefaultXmlBeanDefinitionParser.java:332) at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.parseBeanDefinitionElement(DefaultXmlBeanDefinitionParser.java:298) at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.parseBeanDefinitions(DefaultXmlBeanDefinitionParser.java:235) at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.registerBeanDefinitions(DefaultXmlBeanDefinitionParser.java:184) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:188) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:146) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:99) at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:114) at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:82) at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:87) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:260) at org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.refresh(AbstractRefreshableWebApplicationContext.java:133) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:230) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:156) at org.springframework.web.context.ContextLoaderServlet.init(ContextLoaderServlet.java:81) at javax.servlet.GenericServlet.init(GenericServlet.java:256) at com.ibm.ws.webcontainer.servlet.ServletWrapper.init(ServletWrapper.java:262) at com.ibm.ws.webcontainer.servlet.ServletWrapper.initialize(ServletWrapper.java:1319) at com.ibm.wsspi.webcontainer.extension.WebExtensionProcessor.createServletWrapper(WebExtensionProcessor.java:84) at com.ibm.ws.webcontainer.webapp.WebApp.initializeTargetMappings(WebApp.java:540) at com.ibm.ws.webcontainer.webapp.WebApp.initialize(WebApp.java:379) at com.ibm.ws.webcontainer.webapp.WebGroup.addWebApplication(WebGroup.java:114) at com.ibm.ws.webcontainer.VirtualHost.addWebApplication(VirtualHost.java:127) at com.ibm.ws.webcontainer.WebContainer.addWebApp(WebContainer.java:776) at com.ibm.ws.webcontainer.WebContainer.addWebApplication(WebContainer.java:729) at com.ibm.ws.runtime.component.WebContainerImpl.install(WebContainerImpl.java:140) at com.ibm.ws.runtime.component.WebContainerImpl.start(WebContainerImpl.java:360) at com.ibm.ws.runtime.component.ApplicationMgrImpl.start(ApplicationMgrImpl.java:1019) at com.ibm.ws.runtime.component.DeployedApplicationImpl.fireDeployedObjectStart(DeployedApplicationImpl.java:1028) at com.ibm.ws.runtime.component.DeployedModuleImpl.start(DeployedModuleImpl.java:538) at com.ibm.ws.runtime.component.DeployedApplicationImpl.start(DeployedApplicationImpl.java:724) at com.ibm.ws.runtime.component.ApplicationMgrImpl.startApplication(ApplicationMgrImpl.java:683) at com.ibm.ws.runtime.component.ApplicationMgrImpl$AppInitializer.run(ApplicationMgrImpl.java:1678) at com.ibm.ws.runtime.component.ComponentImpl$_AsynchInitializer.run(ComponentImpl.java:304) at com.ibm.ws.util.ThreadPool$Worker.run(ThreadPool.java:1332)  --- end Original exception----      at com.ibm.ws.classloader.CompoundClassLoader._defineClass(CompoundClassLoader.java:603)     at com.ibm.ws.classloader.CompoundClassLoader.findClass(CompoundClassLoader.java(Compiled Code))     at com.ibm.ws.classloader.CompoundClassLoader.loadClass(CompoundClassLoader.java(Compiled Code))     at java.lang.ClassLoader.loadClass(ClassLoader.java(Compiled Code))     at java.lang.Class.forName0(Native Method)     at java.lang.Class.forName(Class.java:260)     at org.springframework.util.ClassUtils.forName(ClassUtils.java:86)     at org.springframework.beans.factory.support.BeanDefinitionReaderUtils.createBeanDefinition(BeanDefinitionReaderUtils.java:61)     at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.parseBeanDefinitionElement(DefaultXmlBeanDefinitionParser.java:332)     at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.parseBeanDefinitionElement(DefaultXmlBeanDefinitionParser.java:298)     at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.parseBeanDefinitions(DefaultXmlBeanDefinitionParser.java:235)     at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.registerBeanDefinitions(DefaultXmlBeanDefinitionParser.java:184)     at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:188)     at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:146)     at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:99)     at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:114)     at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:82)     at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:87)     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:260)     at org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.refresh(AbstractRefreshableWebApplicationContext.java:133)     at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:230)     at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:156)     at org.springframework.web.context.ContextLoaderServlet.init(ContextLoaderServlet.java:81)     at javax.servlet.GenericServlet.init(GenericServlet.java:256)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.init(ServletWrapper.java:262)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.initialize(ServletWrapper.java:1319)     at com.ibm.wsspi.webcontainer.extension.WebExtensionProcessor.createServletWrapper(WebExtensionProcessor.java:84)     at com.ibm.ws.webcontainer.webapp.WebApp.initializeTargetMappings(WebApp.java:540)     at com.ibm.ws.webcontainer.webapp.WebApp.initialize(WebApp.java:379)     at com.ibm.ws.webcontainer.webapp.WebGroup.addWebApplication(WebGroup.java:114)     at com.ibm.ws.webcontainer.VirtualHost.addWebApplication(VirtualHost.java:127)     at com.ibm.ws.webcontainer.WebContainer.addWebApp(WebContainer.java:776)     at com.ibm.ws.webcontainer.WebContainer.addWebApplication(WebContainer.java:729)     at com.ibm.ws.runtime.component.WebContainerImpl.install(WebContainerImpl.java:140)     at com.ibm.ws.runtime.component.WebContainerImpl.start(WebContainerImpl.java:360)     at com.ibm.ws.runtime.component.ApplicationMgrImpl.start(ApplicationMgrImpl.java:1019)     at com.ibm.ws.runtime.component.DeployedApplicationImpl.fireDeployedObjectStart(DeployedApplicationImpl.java:1028)     at com.ibm.ws.runtime.component.DeployedModuleImpl.start(DeployedModuleImpl.java:538)     at com.ibm.ws.runtime.component.DeployedApplicationImpl.start(DeployedApplicationImpl.java:724)     at com.ibm.ws.runtime.component.ApplicationMgrImpl.startApplication(ApplicationMgrImpl.java:683)     at com.ibm.ws.runtime.component.ApplicationMgrImpl$AppInitializer.run(ApplicationMgrImpl.java:1678)     at com.ibm.ws.runtime.component.ComponentImpl$_AsynchInitializer.run(ComponentImpl.java:304)     at com.ibm.ws.util.ThreadPool$Worker.run(ThreadPool.java:1332)  [10/4/05 15:10:48:755 CDT] 0000001b ServletWrappe E   SRVE0100E: Did not realize  init() exception thrown by servlet ContextLoaderServlet: org.springframework.beans.factory.BeanDefinitionStoreException: Error registering bean with name 'billingSqlBean' defined in ServletContext resource [/WEB-INF/partstoreApplicationContext.xml]: Class that bean class [cat.ld.swa.partstore.billing.BillingSqlBean] depends on not found; nested exception is java.lang.NoClassDefFoundError: Error while defining class: cat.ld.swa.partstore.billing.BillingSqlBean This error indicates that the class: cat.ld.swa.common.sqlmgr.PartStoreConnector could not be located while defining the class: cat.ld.swa.partstore.billing.BillingSqlBean This is often caused by having the class at a higher point in the classloader hierarchy Dumping the current context classloader hierarchy: ==> indicates defining classloader *** indicates classloader where the missing class could have been found ==>[0] com.ibm.ws.classloader.CompoundClassLoader@5149eb64 Local ClassPath: C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\classes;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\antlr-2.7.5H3.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\axis.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\cglib-full-2.0.2.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\commons-beanutils.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\commons-collections-2.1.1.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\commons-dbcp-1.2.1.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\commons-digester.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\commons-discovery.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\commons-lang-1.0.1.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\commons-logging-1.0.4.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\commons-logging.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\commons-pool-1.2.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\commons-validator.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\ComRequisite.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\DBSWebAppCommon.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\dom4j.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\ehcache-0.9.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\excel.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\hibernate-tools.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\hibernate2.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\hibernate3.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\http.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\jaxrpc.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\jdbc2_0-stdext.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\jdom.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\jgl.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\jsse.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\jta.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\log4j-1.2.8.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\odmg-3.0.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\PSArchClient.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\saaj.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\spring-hibernate.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\spring.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\struts.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\tuf-common-src.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\tuf-common.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\tuf-samples.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\tuf-security.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\tuf-server-src.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\tuf-server.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\tuf-web-src.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\tuf-web.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\tufkeepalive.jar;C:\radworkspace\Cat DCS Ebiz PS Common;C:\radworkspace\Cat DCS Ebiz Custom JSP Tags;C:\radworkspace\Cat DCS Ebiz PS Custom JSP Tags;C:\radworkspace\Cat DCS Ebiz PS Common DBS API Wrappers;C:\radworkspace\Cat DCS Ebiz Common;C:\radworkspace\partstorePersistance;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent; Delegation Mode: PARENT_FIRST [1] com.ibm.ws.classloader.JarClassLoader@1342696292 Local Classpath: C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\profiles\default\installedApps\cat503061Node01Cell\query.ear\querybean.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\ManagementEJB.ear\mejb.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\profiles\default\installedApps\cat503061Node01Cell\ivtApp.ear\ivtEJB.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\SchedulerCalendars.ear\Calendars.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\profiles\default\installedApps\cat503061Node01Cell\DefaultApplication.ear\Increment.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\adminconsole.ear\struts.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\adminconsole.ear\commons-beanutils.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\adminconsole.ear\commons-collections.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\adminconsole.ear\commons-digester.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\adminconsole.ear\commons-logging.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\adminconsole.ear\commons-validator.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\adminconsole.ear\jakarta-oro.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\adminconsole.ear\struts-legacy.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\adminconsole.ear\commons-fileupload.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\adminconsole.ear\svg_chart_generator.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\adminconsole.ear\svg_chart_util.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\adminconsole.ear\batik-1.5.jar Delegation mode: PARENT_LAST [2] com.ibm.ws.classloader.ExtJarClassLoader@2031577956 Local ClassPath: C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\lib\app\commons-collections.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\lib\app\tuf-sys-common.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\lib\app\tuf-sys-web-was60.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\lib\app\tuf-sys-web.jar;  Delegation Mode: PARENT_LAST [3] com.ibm.ws.classloader.ProtectionClassLoader@662beb64 [4] com.ibm.ws.bootstrap.ExtClassLoader@3cd4eb66 [5] sun.misc.Launcher$AppClassLoader@3cd9eb66 [6] sun.misc.Launcher$ExtClassLoader@3ca5eb66 ---Original exception--- java.lang.NoClassDefFoundError: cat/ld/swa/common/sqlmgr/PartStoreConnector at java.lang.ClassLoader.defineClass0(Native Method) at java.lang.ClassLoader.defineClass(ClassLoader.java(Compiled Code)) at java.security.SecureClassLoader.defineClass(SecureClassLoader.java(Compiled Code)) at com.ibm.ws.classloader.CompoundClassLoader._defineClass(CompoundClassLoader.java:576) at com.ibm.ws.classloader.CompoundClassLoader.findClass(CompoundClassLoader.java(Compiled Code)) at com.ibm.ws.classloader.CompoundClassLoader.loadClass(CompoundClassLoader.java(Compiled Code)) at java.lang.ClassLoader.loadClass(ClassLoader.java(Compiled Code)) at java.lang.Class.forName0(Native Method) at java.lang.Class.forName(Class.java:260) at org.springframework.util.ClassUtils.forName(ClassUtils.java:86) at org.springframework.beans.factory.support.BeanDefinitionReaderUtils.createBeanDefinition(BeanDefinitionReaderUtils.java:61) at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.parseBeanDefinitionElement(DefaultXmlBeanDefinitionParser.java:332) at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.parseBeanDefinitionElement(DefaultXmlBeanDefinitionParser.java:298) at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.parseBeanDefinitions(DefaultXmlBeanDefinitionParser.java:235) at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.registerBeanDefinitions(DefaultXmlBeanDefinitionParser.java:184) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:188) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:146) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:99) at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:114) at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:82) at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:87) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:260) at org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.refresh(AbstractRefreshableWebApplicationContext.java:133) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:230) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:156) at org.springframework.web.context.ContextLoaderServlet.init(ContextLoaderServlet.java:81) at javax.servlet.GenericServlet.init(GenericServlet.java:256) at com.ibm.ws.webcontainer.servlet.ServletWrapper.init(ServletWrapper.java:262) at com.ibm.ws.webcontainer.servlet.ServletWrapper.initialize(ServletWrapper.java:1319) at com.ibm.wsspi.webcontainer.extension.WebExtensionProcessor.createServletWrapper(WebExtensionProcessor.java:84) at com.ibm.ws.webcontainer.webapp.WebApp.initializeTargetMappings(WebApp.java:540) at com.ibm.ws.webcontainer.webapp.WebApp.initialize(WebApp.java:379) at com.ibm.ws.webcontainer.webapp.WebGroup.addWebApplication(WebGroup.java:114) at com.ibm.ws.webcontainer.VirtualHost.addWebApplication(VirtualHost.java:127) at com.ibm.ws.webcontainer.WebContainer.addWebApp(WebContainer.java:776) at com.ibm.ws.webcontainer.WebContainer.addWebApplication(WebContainer.java:729) at com.ibm.ws.runtime.component.WebContainerImpl.install(WebContainerImpl.java:140) at com.ibm.ws.runtime.component.WebContainerImpl.start(WebContainerImpl.java:360) at com.ibm.ws.runtime.component.ApplicationMgrImpl.start(ApplicationMgrImpl.java:1019) at com.ibm.ws.runtime.component.DeployedApplicationImpl.fireDeployedObjectStart(DeployedApplicationImpl.java:1028) at com.ibm.ws.runtime.component.DeployedModuleImpl.start(DeployedModuleImpl.java:538) at com.ibm.ws.runtime.component.DeployedApplicationImpl.start(DeployedApplicationImpl.java:724) at com.ibm.ws.runtime.component.ApplicationMgrImpl.startApplication(ApplicationMgrImpl.java:683) at com.ibm.ws.runtime.component.ApplicationMgrImpl$AppInitializer.run(ApplicationMgrImpl.java:1678) at com.ibm.ws.runtime.component.ComponentImpl$_AsynchInitializer.run(ComponentImpl.java:304) at com.ibm.ws.util.ThreadPool$Worker.run(ThreadPool.java:1332)  --- end Original exception----  java.lang.NoClassDefFoundError: Error while defining class: cat.ld.swa.partstore.billing.BillingSqlBean This error indicates that the class: cat.ld.swa.common.sqlmgr.PartStoreConnector could not be located while defining the class: cat.ld.swa.partstore.billing.BillingSqlBean This is often caused by having the class at a higher point in the classloader hierarchy Dumping the current context classloader hierarchy: ==> indicates defining classloader *** indicates classloader where the missing class could have been found ==>[0] com.ibm.ws.classloader.CompoundClassLoader@5149eb64 Local ClassPath: C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\classes;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\antlr-2.7.5H3.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\axis.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\cglib-full-2.0.2.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\commons-beanutils.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\commons-collections-2.1.1.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\commons-dbcp-1.2.1.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\commons-digester.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\commons-discovery.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\commons-lang-1.0.1.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\commons-logging-1.0.4.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\commons-logging.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\commons-pool-1.2.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\commons-validator.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\ComRequisite.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\DBSWebAppCommon.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\dom4j.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\ehcache-0.9.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\excel.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\hibernate-tools.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\hibernate2.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\hibernate3.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\http.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\jaxrpc.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\jdbc2_0-stdext.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\jdom.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\jgl.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\jsse.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\jta.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\log4j-1.2.8.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\odmg-3.0.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\PSArchClient.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\saaj.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\spring-hibernate.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\spring.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\struts.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\tuf-common-src.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\tuf-common.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\tuf-samples.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\tuf-security.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\tuf-server-src.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\tuf-server.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\tuf-web-src.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\tuf-web.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\tufkeepalive.jar;C:\radworkspace\Cat DCS Ebiz PS Common;C:\radworkspace\Cat DCS Ebiz Custom JSP Tags;C:\radworkspace\Cat DCS Ebiz PS Custom JSP Tags;C:\radworkspace\Cat DCS Ebiz PS Common DBS API Wrappers;C:\radworkspace\Cat DCS Ebiz Common;C:\radworkspace\partstorePersistance;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent; Delegation Mode: PARENT_FIRST [1] com.ibm.ws.classloader.JarClassLoader@1342696292 Local Classpath: C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\profiles\default\installedApps\cat503061Node01Cell\query.ear\querybean.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\ManagementEJB.ear\mejb.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\profiles\default\installedApps\cat503061Node01Cell\ivtApp.ear\ivtEJB.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\SchedulerCalendars.ear\Calendars.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\profiles\default\installedApps\cat503061Node01Cell\DefaultApplication.ear\Increment.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\adminconsole.ear\struts.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\adminconsole.ear\commons-beanutils.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\adminconsole.ear\commons-collections.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\adminconsole.ear\commons-digester.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\adminconsole.ear\commons-logging.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\adminconsole.ear\commons-validator.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\adminconsole.ear\jakarta-oro.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\adminconsole.ear\struts-legacy.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\adminconsole.ear\commons-fileupload.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\adminconsole.ear\svg_chart_generator.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\adminconsole.ear\svg_chart_util.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\adminconsole.ear\batik-1.5.jar Delegation mode: PARENT_LAST [2] com.ibm.ws.classloader.ExtJarClassLoader@2031577956 Local ClassPath: C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\lib\app\commons-collections.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\lib\app\tuf-sys-common.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\lib\app\tuf-sys-web-was60.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\lib\app\tuf-sys-web.jar;  Delegation Mode: PARENT_LAST [3] com.ibm.ws.classloader.ProtectionClassLoader@662beb64 [4] com.ibm.ws.bootstrap.ExtClassLoader@3cd4eb66 [5] sun.misc.Launcher$AppClassLoader@3cd9eb66 [6] sun.misc.Launcher$ExtClassLoader@3ca5eb66 ---Original exception--- java.lang.NoClassDefFoundError: cat/ld/swa/common/sqlmgr/PartStoreConnector at java.lang.ClassLoader.defineClass0(Native Method) at java.lang.ClassLoader.defineClass(ClassLoader.java(Compiled Code)) at java.security.SecureClassLoader.defineClass(SecureClassLoader.java(Compiled Code)) at com.ibm.ws.classloader.CompoundClassLoader._defineClass(CompoundClassLoader.java:576) at com.ibm.ws.classloader.CompoundClassLoader.findClass(CompoundClassLoader.java(Compiled Code)) at com.ibm.ws.classloader.CompoundClassLoader.loadClass(CompoundClassLoader.java(Compiled Code)) at java.lang.ClassLoader.loadClass(ClassLoader.java(Compiled Code)) at java.lang.Class.forName0(Native Method) at java.lang.Class.forName(Class.java:260) at org.springframework.util.ClassUtils.forName(ClassUtils.java:86) at org.springframework.beans.factory.support.BeanDefinitionReaderUtils.createBeanDefinition(BeanDefinitionReaderUtils.java:61) at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.parseBeanDefinitionElement(DefaultXmlBeanDefinitionParser.java:332) at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.parseBeanDefinitionElement(DefaultXmlBeanDefinitionParser.java:298) at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.parseBeanDefinitions(DefaultXmlBeanDefinitionParser.java:235) at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.registerBeanDefinitions(DefaultXmlBeanDefinitionParser.java:184) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:188) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:146) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:99) at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:114) at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:82) at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:87) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:260) at org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.refresh(AbstractRefreshableWebApplicationContext.java:133) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:230) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:156) at org.springframework.web.context.ContextLoaderServlet.init(ContextLoaderServlet.java:81) at javax.servlet.GenericServlet.init(GenericServlet.java:256) at com.ibm.ws.webcontainer.servlet.ServletWrapper.init(ServletWrapper.java:262) at com.ibm.ws.webcontainer.servlet.ServletWrapper.initialize(ServletWrapper.java:1319) at com.ibm.wsspi.webcontainer.extension.WebExtensionProcessor.createServletWrapper(WebExtensionProcessor.java:84) at com.ibm.ws.webcontainer.webapp.WebApp.initializeTargetMappings(WebApp.java:540) at com.ibm.ws.webcontainer.webapp.WebApp.initialize(WebApp.java:379) at com.ibm.ws.webcontainer.webapp.WebGroup.addWebApplication(WebGroup.java:114) at com.ibm.ws.webcontainer.VirtualHost.addWebApplication(VirtualHost.java:127) at com.ibm.ws.webcontainer.WebContainer.addWebApp(WebContainer.java:776) at com.ibm.ws.webcontainer.WebContainer.addWebApplication(WebContainer.java:729) at com.ibm.ws.runtime.component.WebContainerImpl.install(WebContainerImpl.java:140) at com.ibm.ws.runtime.component.WebContainerImpl.start(WebContainerImpl.java:360) at com.ibm.ws.runtime.component.ApplicationMgrImpl.start(ApplicationMgrImpl.java:1019) at com.ibm.ws.runtime.component.DeployedApplicationImpl.fireDeployedObjectStart(DeployedApplicationImpl.java:1028) at com.ibm.ws.runtime.component.DeployedModuleImpl.start(DeployedModuleImpl.java:538) at com.ibm.ws.runtime.component.DeployedApplicationImpl.start(DeployedApplicationImpl.java:724) at com.ibm.ws.runtime.component.ApplicationMgrImpl.startApplication(ApplicationMgrImpl.java:683) at com.ibm.ws.runtime.component.ApplicationMgrImpl$AppInitializer.run(ApplicationMgrImpl.java:1678) at com.ibm.ws.runtime.component.ComponentImpl$_AsynchInitializer.run(ComponentImpl.java:304) at com.ibm.ws.util.ThreadPool$Worker.run(ThreadPool.java:1332)  --- end Original exception----      at com.ibm.ws.classloader.CompoundClassLoader._defineClass(CompoundClassLoader.java:603)     at com.ibm.ws.classloader.CompoundClassLoader.findClass(CompoundClassLoader.java(Compiled Code))     at com.ibm.ws.classloader.CompoundClassLoader.loadClass(CompoundClassLoader.java(Compiled Code))     at java.lang.ClassLoader.loadClass(ClassLoader.java(Compiled Code))     at java.lang.Class.forName0(Native Method)     at java.lang.Class.forName(Class.java:260)     at org.springframework.util.ClassUtils.forName(ClassUtils.java:86)     at org.springframework.beans.factory.support.BeanDefinitionReaderUtils.createBeanDefinition(BeanDefinitionReaderUtils.java:61)     at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.parseBeanDefinitionElement(DefaultXmlBeanDefinitionParser.java:332)     at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.parseBeanDefinitionElement(DefaultXmlBeanDefinitionParser.java:298)     at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.parseBeanDefinitions(DefaultXmlBeanDefinitionParser.java:235)     at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.registerBeanDefinitions(DefaultXmlBeanDefinitionParser.java:184)     at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:188)     at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:146)     at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:99)     at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:114)     at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:82)     at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:87)     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:260)     at org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.refresh(AbstractRefreshableWebApplicationContext.java:133)     at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:230)     at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:156)     at org.springframework.web.context.ContextLoaderServlet.init(ContextLoaderServlet.java:81)     at javax.servlet.GenericServlet.init(GenericServlet.java:256)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.init(ServletWrapper.java:262)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.initialize(ServletWrapper.java:1319)     at com.ibm.wsspi.webcontainer.extension.WebExtensionProcessor.createServletWrapper(WebExtensionProcessor.java:84)     at com.ibm.ws.webcontainer.webapp.WebApp.initializeTargetMappings(WebApp.java:540)     at com.ibm.ws.webcontainer.webapp.WebApp.initialize(WebApp.java:379)     at com.ibm.ws.webcontainer.webapp.WebGroup.addWebApplication(WebGroup.java:114)     at com.ibm.ws.webcontainer.VirtualHost.addWebApplication(VirtualHost.java:127)     at com.ibm.ws.webcontainer.WebContainer.addWebApp(WebContainer.java:776)     at com.ibm.ws.webcontainer.WebContainer.addWebApplication(WebContainer.java:729)     at com.ibm.ws.runtime.component.WebContainerImpl.install(WebContainerImpl.java:140)     at com.ibm.ws.runtime.component.WebContainerImpl.start(WebContainerImpl.java:360)     at com.ibm.ws.runtime.component.ApplicationMgrImpl.start(ApplicationMgrImpl.java:1019)     at com.ibm.ws.runtime.component.DeployedApplicationImpl.fireDeployedObjectStart(DeployedApplicationImpl.java:1028)     at com.ibm.ws.runtime.component.DeployedModuleImpl.start(DeployedModuleImpl.java:538)     at com.ibm.ws.runtime.component.DeployedApplicationImpl.start(DeployedApplicationImpl.java:724)     at com.ibm.ws.runtime.component.ApplicationMgrImpl.startApplication(ApplicationMgrImpl.java:683)     at com.ibm.ws.runtime.component.ApplicationMgrImpl$AppInitializer.run(ApplicationMgrImpl.java:1678)     at com.ibm.ws.runtime.component.ComponentImpl$_AsynchInitializer.run(ComponentImpl.java:304)     at com.ibm.ws.util.ThreadPool$Worker.run(ThreadPool.java:1332)  [10/4/05 15:10:48:896 CDT] 0000001b WebExtensionP E   Error occured while preparing theservlet for initialization. Check the error logs for details. [10/4/05 15:10:48:896 CDT] 0000001b WebExtensionP E   SRVE0026E: [Servlet Error]-[javax.servlet.ServletException: SRVE0207E: Uncaught initialization exception thrown by servlet at com.ibm.ws.webcontainer.servlet.ServletWrapper.init(ServletWrapper.java:316) at com.ibm.ws.webcontainer.servlet.ServletWrapper.initialize(ServletWrapper.java:1319) at com.ibm.wsspi.webcontainer.extension.WebExtensionProcessor.createServletWrapper(WebExtensionProcessor.java:84) at com.ibm.ws.webcontainer.webapp.WebApp.initializeTargetMappings(WebApp.java:540) at com.ibm.ws.webcontainer.webapp.WebApp.initialize(WebApp.java:379) at com.ibm.ws.webcontainer.webapp.WebGroup.addWebApplication(WebGroup.java:114) at com.ibm.ws.webcontainer.VirtualHost.addWebApplication(VirtualHost.java:127) at com.ibm.ws.webcontainer.WebContainer.addWebApp(WebContainer.java:776) at com.ibm.ws.webcontainer.WebContainer.addWebApplication(WebContainer.java:729) at com.ibm.ws.runtime.component.WebContainerImpl.install(WebContainerImpl.java:140) at com.ibm.ws.runtime.component.WebContainerImpl.start(WebContainerImpl.java:360) at com.ibm.ws.runtime.component.ApplicationMgrImpl.start(ApplicationMgrImpl.java:1019) at com.ibm.ws.runtime.component.DeployedApplicationImpl.fireDeployedObjectStart(DeployedApplicationImpl.java:1028) at com.ibm.ws.runtime.component.DeployedModuleImpl.start(DeployedModuleImpl.java:538) at com.ibm.ws.runtime.component.DeployedApplicationImpl.start(DeployedApplicationImpl.java:724) at com.ibm.ws.runtime.component.ApplicationMgrImpl.startApplication(ApplicationMgrImpl.java:683) at com.ibm.ws.runtime.component.ApplicationMgrImpl$AppInitializer.run(ApplicationMgrImpl.java:1678) at com.ibm.ws.runtime.component.ComponentImpl$_AsynchInitializer.run(ComponentImpl.java:304) at com.ibm.ws.util.ThreadPool$Worker.run(ThreadPool.java:1332) ---- Begin backtrace for Nested Throwables org.springframework.beans.factory.BeanDefinitionStoreException: Error registering bean with name 'billingSqlBean' defined in ServletContext resource [/WEB-INF/partstoreApplicationContext.xml]: Class that bean class [cat.ld.swa.partstore.billing.BillingSqlBean] depends on not found; nested exception is java.lang.NoClassDefFoundError: Error while defining class: cat.ld.swa.partstore.billing.BillingSqlBean This error indicates that the class: cat.ld.swa.common.sqlmgr.PartStoreConnector could not be located while defining the class: cat.ld.swa.partstore.billing.BillingSqlBean This is often caused by having the class at a higher point in the classloader hierarchy Dumping the current context classloader hierarchy: ==> indicates defining classloader *** indicates classloader where the missing class could have been found ==>[0] com.ibm.ws.classloader.CompoundClassLoader@5149eb64 Local ClassPath: C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\classes;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\antlr-2.7.5H3.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\axis.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\cglib-full-2.0.2.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\commons-beanutils.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\commons-collections-2.1.1.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\commons-dbcp-1.2.1.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\commons-digester.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\commons-discovery.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\commons-lang-1.0.1.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\commons-logging-1.0.4.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\commons-logging.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\commons-pool-1.2.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\commons-validator.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\ComRequisite.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\DBSWebAppCommon.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\dom4j.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\ehcache-0.9.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\excel.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\hibernate-tools.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\hibernate2.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\hibernate3.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\http.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\jaxrpc.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\jdbc2_0-stdext.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\jdom.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\jgl.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\jsse.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\jta.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\log4j-1.2.8.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\odmg-3.0.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\PSArchClient.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\saaj.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\spring-hibernate.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\spring.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\struts.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\tuf-common-src.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\tuf-common.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\tuf-samples.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\tuf-security.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\tuf-server-src.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\tuf-server.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\tuf-web-src.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\tuf-web.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\tufkeepalive.jar;C:\radworkspace\Cat DCS Ebiz PS Common;C:\radworkspace\Cat DCS Ebiz Custom JSP Tags;C:\radworkspace\Cat DCS Ebiz PS Custom JSP Tags;C:\radworkspace\Cat DCS Ebiz PS Common DBS API Wrappers;C:\radworkspace\Cat DCS Ebiz Common;C:\radworkspace\partstorePersistance;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent; Delegation Mode: PARENT_FIRST [1] com.ibm.ws.classloader.JarClassLoader@1342696292 Local Classpath: C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\profiles\default\installedApps\cat503061Node01Cell\query.ear\querybean.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\ManagementEJB.ear\mejb.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\profiles\default\installedApps\cat503061Node01Cell\ivtApp.ear\ivtEJB.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\SchedulerCalendars.ear\Calendars.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\profiles\default\installedApps\cat503061Node01Cell\DefaultApplication.ear\Increment.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\adminconsole.ear\struts.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\adminconsole.ear\commons-beanutils.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\adminconsole.ear\commons-collections.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\adminconsole.ear\commons-digester.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\adminconsole.ear\commons-logging.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\adminconsole.ear\commons-validator.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\adminconsole.ear\jakarta-oro.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\adminconsole.ear\struts-legacy.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\adminconsole.ear\commons-fileupload.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\adminconsole.ear\svg_chart_generator.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\adminconsole.ear\svg_chart_util.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\adminconsole.ear\batik-1.5.jar Delegation mode: PARENT_LAST [2] com.ibm.ws.classloader.ExtJarClassLoader@2031577956 Local ClassPath: C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\lib\app\commons-collections.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\lib\app\tuf-sys-common.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\lib\app\tuf-sys-web-was60.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\lib\app\tuf-sys-web.jar;  Delegation Mode: PARENT_LAST [3] com.ibm.ws.classloader.ProtectionClassLoader@662beb64 [4] com.ibm.ws.bootstrap.ExtClassLoader@3cd4eb66 [5] sun.misc.Launcher$AppClassLoader@3cd9eb66 [6] sun.misc.Launcher$ExtClassLoader@3ca5eb66 ---Original exception--- java.lang.NoClassDefFoundError: cat/ld/swa/common/sqlmgr/PartStoreConnector at java.lang.ClassLoader.defineClass0(Native Method) at java.lang.ClassLoader.defineClass(ClassLoader.java(Compiled Code)) at java.security.SecureClassLoader.defineClass(SecureClassLoader.java(Compiled Code)) at com.ibm.ws.classloader.CompoundClassLoader._defineClass(CompoundClassLoader.java:576) at com.ibm.ws.classloader.CompoundClassLoader.findClass(CompoundClassLoader.java(Compiled Code)) at com.ibm.ws.classloader.CompoundClassLoader.loadClass(CompoundClassLoader.java(Compiled Code)) at java.lang.ClassLoader.loadClass(ClassLoader.java(Compiled Code)) at java.lang.Class.forName0(Native Method) at java.lang.Class.forName(Class.java:260) at org.springframework.util.ClassUtils.forName(ClassUtils.java:86) at org.springframework.beans.factory.support.BeanDefinitionReaderUtils.createBeanDefinition(BeanDefinitionReaderUtils.java:61) at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.parseBeanDefinitionElement(DefaultXmlBeanDefinitionParser.java:332) at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.parseBeanDefinitionElement(DefaultXmlBeanDefinitionParser.java:298) at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.parseBeanDefinitions(DefaultXmlBeanDefinitionParser.java:235) at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.registerBeanDefinitions(DefaultXmlBeanDefinitionParser.java:184) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:188) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:146) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:99) at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:114) at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:82) at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:87) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:260) at org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.refresh(AbstractRefreshableWebApplicationContext.java:133) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:230) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:156) at org.springframework.web.context.ContextLoaderServlet.init(ContextLoaderServlet.java:81) at javax.servlet.GenericServlet.init(GenericServlet.java:256) at com.ibm.ws.webcontainer.servlet.ServletWrapper.init(ServletWrapper.java:262) at com.ibm.ws.webcontainer.servlet.ServletWrapper.initialize(ServletWrapper.java:1319) at com.ibm.wsspi.webcontainer.extension.WebExtensionProcessor.createServletWrapper(WebExtensionProcessor.java:84) at com.ibm.ws.webcontainer.webapp.WebApp.initializeTargetMappings(WebApp.java:540) at com.ibm.ws.webcontainer.webapp.WebApp.initialize(WebApp.java:379) at com.ibm.ws.webcontainer.webapp.WebGroup.addWebApplication(WebGroup.java:114) at com.ibm.ws.webcontainer.VirtualHost.addWebApplication(VirtualHost.java:127) at com.ibm.ws.webcontainer.WebContainer.addWebApp(WebContainer.java:776) at com.ibm.ws.webcontainer.WebContainer.addWebApplication(WebContainer.java:729) at com.ibm.ws.runtime.component.WebContainerImpl.install(WebContainerImpl.java:140) at com.ibm.ws.runtime.component.WebContainerImpl.start(WebContainerImpl.java:360) at com.ibm.ws.runtime.component.ApplicationMgrImpl.start(ApplicationMgrImpl.java:1019) at com.ibm.ws.runtime.component.DeployedApplicationImpl.fireDeployedObjectStart(DeployedApplicationImpl.java:1028) at com.ibm.ws.runtime.component.DeployedModuleImpl.start(DeployedModuleImpl.java:538) at com.ibm.ws.runtime.component.DeployedApplicationImpl.start(DeployedApplicationImpl.java:724) at com.ibm.ws.runtime.component.ApplicationMgrImpl.startApplication(ApplicationMgrImpl.java:683) at com.ibm.ws.runtime.component.ApplicationMgrImpl$AppInitializer.run(ApplicationMgrImpl.java:1678) at com.ibm.ws.runtime.component.ComponentImpl$_AsynchInitializer.run(ComponentImpl.java:304) at com.ibm.ws.util.ThreadPool$Worker.run(ThreadPool.java:1332)  --- end Original exception----  java.lang.NoClassDefFoundError: Error while defining class: cat.ld.swa.partstore.billing.BillingSqlBean This error indicates that the class: cat.ld.swa.common.sqlmgr.PartStoreConnector could not be located while defining the class: cat.ld.swa.partstore.billing.BillingSqlBean This is often caused by having the class at a higher point in the classloader hierarchy Dumping the current context classloader hierarchy: ==> indicates defining classloader *** indicates classloader where the missing class could have been found ==>[0] com.ibm.ws.classloader.CompoundClassLoader@5149eb64 Local ClassPath: C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\classes;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\antlr-2.7.5H3.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\axis.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\cglib-full-2.0.2.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\commons-beanutils.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\commons-collections-2.1.1.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\commons-dbcp-1.2.1.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\commons-digester.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\commons-discovery.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\commons-lang-1.0.1.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\commons-logging-1.0.4.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\commons-logging.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\commons-pool-1.2.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\commons-validator.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\ComRequisite.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\DBSWebAppCommon.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\dom4j.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\ehcache-0.9.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\excel.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\hibernate-tools.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\hibernate2.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\hibernate3.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\http.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\jaxrpc.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\jdbc2_0-stdext.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\jdom.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\jgl.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\jsse.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\jta.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\log4j-1.2.8.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\odmg-3.0.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\PSArchClient.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\saaj.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\spring-hibernate.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\spring.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\struts.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\tuf-common-src.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\tuf-common.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\tuf-samples.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\tuf-security.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\tuf-server-src.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\tuf-server.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\tuf-web-src.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\tuf-web.jar;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent\WEB-INF\lib\tufkeepalive.jar;C:\radworkspace\Cat DCS Ebiz PS Common;C:\radworkspace\Cat DCS Ebiz Custom JSP Tags;C:\radworkspace\Cat DCS Ebiz PS Custom JSP Tags;C:\radworkspace\Cat DCS Ebiz PS Common DBS API Wrappers;C:\radworkspace\Cat DCS Ebiz Common;C:\radworkspace\partstorePersistance;C:\radworkspace\Cat DCS Ebiz PS PartStore\WebContent; Delegation Mode: PARENT_FIRST [1] com.ibm.ws.classloader.JarClassLoader@1342696292 Local Classpath: C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\profiles\default\installedApps\cat503061Node01Cell\query.ear\querybean.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\ManagementEJB.ear\mejb.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\profiles\default\installedApps\cat503061Node01Cell\ivtApp.ear\ivtEJB.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\SchedulerCalendars.ear\Calendars.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\profiles\default\installedApps\cat503061Node01Cell\DefaultApplication.ear\Increment.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\adminconsole.ear\struts.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\adminconsole.ear\commons-beanutils.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\adminconsole.ear\commons-collections.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\adminconsole.ear\commons-digester.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\adminconsole.ear\commons-logging.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\adminconsole.ear\commons-validator.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\adminconsole.ear\jakarta-oro.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\adminconsole.ear\struts-legacy.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\adminconsole.ear\commons-fileupload.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\adminconsole.ear\svg_chart_generator.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\adminconsole.ear\svg_chart_util.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\systemApps\adminconsole.ear\batik-1.5.jar Delegation mode: PARENT_LAST [2] com.ibm.ws.classloader.ExtJarClassLoader@2031577956 Local ClassPath: C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\lib\app\commons-collections.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\lib\app\tuf-sys-common.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\lib\app\tuf-sys-web-was60.jar;C:\Program Files\IBM\Rational\SDP\6.0\runtimes\base_v6\lib\app\tuf-sys-web.jar;  Delegation Mode: PARENT_LAST [3] com.ibm.ws.classloader.ProtectionClassLoader@662beb64 [4] com.ibm.ws.bootstrap.ExtClassLoader@3cd4eb66 [5] sun.misc.Launcher$AppClassLoader@3cd9eb66 [6] sun.misc.Launcher$ExtClassLoader@3ca5eb66 ---Original exception--- java.lang.NoClassDefFoundError: cat/ld/swa/common/sqlmgr/PartStoreConnector at java.lang.ClassLoader.defineClass0(Native Method) at java.lang.ClassLoader.defineClass(ClassLoader.java(Compiled Code)) at java.security.SecureClassLoader.defineClass(SecureClassLoader.java(Compiled Code)) at com.ibm.ws.classloader.CompoundClassLoader._defineClass(CompoundClassLoader.java:576) at com.ibm.ws.classloader.CompoundClassLoader.findClass(CompoundClassLoader.java(Compiled Code)) at com.ibm.ws.classloader.CompoundClassLoader.loadClass(CompoundClassLoader.java(Compiled Code)) at java.lang.ClassLoader.loadClass(ClassLoader.java(Compiled Code)) at java.lang.Class.forName0(Native Method) at java.lang.Class.forName(Class.java:260) at org.springframework.util.ClassUtils.forName(ClassUtils.java:86) at org.springframework.beans.factory.support.BeanDefinitionReaderUtils.createBeanDefinition(BeanDefinitionReaderUtils.java:61) at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.parseBeanDefinitionElement(DefaultXmlBeanDefinitionParser.java:332) at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.parseBeanDefinitionElement(DefaultXmlBeanDefinitionParser.java:298) at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.parseBeanDefinitions(DefaultXmlBeanDefinitionParser.java:235) at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.registerBeanDefinitions(DefaultXmlBeanDefinitionParser.java:184) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:188) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:146) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:99) at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:114) at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:82) at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:87) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:260) at org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.refresh(AbstractRefreshableWebApplicationContext.java:133) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:230) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:156) at org.springframework.web.context.ContextLoaderServlet.init(ContextLoaderServlet.java:81) at javax.servlet.GenericServlet.init(GenericServlet.java:256) at com.ibm.ws.webcontainer.servlet.ServletWrapper.init(ServletWrapper.java:262) at com.ibm.ws.webcontainer.servlet.ServletWrapper.initialize(ServletWrapper.java:1319) at com.ibm.wsspi.webcontainer.extension.WebExtensionProcessor.createServletWrapper(WebExtensionProcessor.java:84) at com.ibm.ws.webcontainer.webapp.WebApp.initializeTargetMappings(WebApp.java:540) at com.ibm.ws.webcontainer.webapp.WebApp.initialize(WebApp.java:379) at com.ibm.ws.webcontainer.webapp.WebGroup.addWebApplication(WebGroup.java:114) at com.ibm.ws.webcontainer.VirtualHost.addWebApplication(VirtualHost.java:127) at com.ibm.ws.webcontainer.WebContainer.addWebApp(WebContainer.java:776) at com.ibm.ws.webcontainer.WebContainer.addWebApplication(WebContainer.java:729) at com.ibm.ws.runtime.component.WebContainerImpl.install(WebContainerImpl.java:140) at com.ibm.ws.runtime.component.WebContainerImpl.start(WebContainerImpl.java:360) at com.ibm.ws.runtime.component.ApplicationMgrImpl.start(ApplicationMgrImpl.java:1019) at com.ibm.ws.runtime.component.DeployedApplicationImpl.fireDeployedObjectStart(DeployedApplicationImpl.java:1028) at com.ibm.ws.runtime.component.DeployedModuleImpl.start(DeployedModuleImpl.java:538) at com.ibm.ws.runtime.component.DeployedApplicationImpl.start(DeployedApplicationImpl.java:724) at com.ibm.ws.runtime.component.ApplicationMgrImpl.startApplication(ApplicationMgrImpl.java:683) at com.ibm.ws.runtime.component.ApplicationMgrImpl$AppInitializer.run(ApplicationMgrImpl.java:1678) at com.ibm.ws.runtime.component.ComponentImpl$_AsynchInitializer.run(ComponentImpl.java:304) at com.ibm.ws.util.ThreadPool$Worker.run(ThreadPool.java:1332)  --- end Original exception----      at com.ibm.ws.classloader.CompoundClassLoader._defineClass(CompoundClassLoader.java:603)     at com.ibm.ws.classloader.CompoundClassLoader.findClass(CompoundClassLoader.java(Compiled Code))     at com.ibm.ws.classloader.CompoundClassLoader.loadClass(CompoundClassLoader.java(Compiled Code))     at java.lang.ClassLoader.loadClass(ClassLoader.java(Compiled Code))     at java.lang.Class.forName0(Native Method)     at java.lang.Class.forName(Class.java:260)     at org.springframework.util.ClassUtils.forName(ClassUtils.java:86)     at org.springframework.beans.factory.support.BeanDefinitionReaderUtils.createBeanDefinition(BeanDefinitionReaderUtils.java:61)     at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.parseBeanDefinitionElement(DefaultXmlBeanDefinitionParser.java:332)     at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.parseBeanDefinitionElement(DefaultXmlBeanDefinitionParser.java:298)     at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.parseBeanDefinitions(DefaultXmlBeanDefinitionParser.java:235)     at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.registerBeanDefinitions(DefaultXmlBeanDefinitionParser.java:184)     at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:188)     at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:146)     at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:99)     at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:114)     at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:82)     at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:87)     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:260)     at org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.refresh(AbstractRefreshableWebApplicationContext.java:133)     at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:230)     at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:156)     at org.springframework.web.context.ContextLoaderServlet.init(ContextLoaderServlet.java:81)     at javax.servlet.GenericServlet.init(GenericServlet.java:256)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.init(ServletWrapper.java:262)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.initialize(ServletWrapper.java:1319)     at com.ibm.wsspi.webcontainer.extension.WebExtensionProcessor.createServletWrapper(WebExtensionProcessor.java:84)     at com.ibm.ws.webcontainer.webapp.WebApp.initializeTargetMappings(WebApp.java:540)     at com.ibm.ws.webcontainer.webapp.WebApp.initialize(WebApp.java:379)     at com.ibm.ws.webcontainer.webapp.WebGroup.addWebApplication(WebGroup.java:114)     at com.ibm.ws.webcontainer.VirtualHost.addWebApplication(VirtualHost.java:127)     at com.ibm.ws.webcontainer.WebContainer.addWebApp(WebContainer.java:776)     at com.ibm.ws.webcontainer.WebContainer.addWebApplication(WebContainer.java:729)     at com.ibm.ws.runtime.component.WebContainerImpl.install(WebContainerImpl.java:140)     at com.ibm.ws.runtime.component.WebContainerImpl.start(WebContainerImpl.java:360)     at com.ibm.ws.runtime.component.ApplicationMgrImpl.start(ApplicationMgrImpl.java:1019)     at com.ibm.ws.runtime.component.DeployedApplicationImpl.fireDeployedObjectStart(DeployedApplicationImpl.java:1028)     at com.ibm.ws.runtime.component.DeployedModuleImpl.start(DeployedModuleImpl.java:538)     at com.ibm.ws.runtime.component.DeployedApplicationImpl.start(DeployedApplicationImpl.java:724)     at com.ibm.ws.runtime.component.ApplicationMgrImpl.startApplication(ApplicationMgrImpl.java:683)     at com.ibm.ws.runtime.component.ApplicationMgrImpl$AppInitializer.run(ApplicationMgrImpl.java:1678)     at com.ibm.ws.runtime.component.ComponentImpl$_AsynchInitializer.run(ComponentImpl.java:304)     at com.ibm.ws.util.ThreadPool$Worker.run(ThreadPool.java:1332)  ]: {1} [10/4/05 15:10:48:927 CDT] 0000001b ServletWrappe E   SRVE0026E: [Servlet Error]-[cat.dcs.partstore.services.SpringInitializerServlet]: java.lang.ClassNotFoundException: cat.dcs.partstore.services.SpringInitializerServlet at com.ibm.ws.classloader.CompoundClassLoader.findClass(CompoundClassLoader.java(Compiled Code)) at com.ibm.ws.classloader.CompoundClassLoader.loadClass(CompoundClassLoader.java(Compiled Code)) at java.lang.ClassLoader.loadClass(ClassLoader.java(Compiled Code)) at java.beans.Beans.instantiate(Beans.java:202) at java.beans.Beans.instantiate(Beans.java:63) at com.ibm.ws.webcontainer.servlet.ServletWrapper$3.run(ServletWrapper.java:1384) at com.ibm.ws.security.util.AccessController.doPrivileged(AccessController.java:118) at com.ibm.ws.webcontainer.servlet.ServletWrapper.loadServlet(ServletWrapper.java:1379) at com.ibm.ws.webcontainer.servlet.ServletWrapper.initialize(ServletWrapper.java:1312) at com.ibm.wsspi.webcontainer.extension.WebExtensionProcessor.createServletWrapper(WebExtensionProcessor.java:84) at com.ibm.ws.webcontainer.webapp.WebApp.initializeTargetMappings(WebApp.java:540) at com.ibm.ws.webcontainer.webapp.WebApp.initialize(WebApp.java:379) at com.ibm.ws.webcontainer.webapp.WebGroup.addWebApplication(WebGroup.java:114) at com.ibm.ws.webcontainer.VirtualHost.addWebApplication(VirtualHost.java:127) at com.ibm.ws.webcontainer.WebContainer.addWebApp(WebContainer.java:776) at com.ibm.ws.webcontainer.WebContainer.addWebApplication(WebContainer.java:729) at com.ibm.ws.runtime.component.WebContainerImpl.install(WebContainerImpl.java:140) at com.ibm.ws.runtime.component.WebContainerImpl.start(WebContainerImpl.java:360) at com.ibm.ws.runtime.component.ApplicationMgrImpl.start(ApplicationMgrImpl.java:1019) at com.ibm.ws.runtime.component.DeployedApplicationImpl.fireDeployedObjectStart(DeployedApplicationImpl.java:1028) at com.ibm.ws.runtime.component.DeployedModuleImpl.start(DeployedModuleImpl.java:538) at com.ibm.ws.runtime.component.DeployedApplicationImpl.start(DeployedApplicationImpl.java:724) at com.ibm.ws.runtime.component.ApplicationMgrImpl.startApplication(ApplicationMgrImpl.java:683) at com.ibm.ws.runtime.component.ApplicationMgrImpl$AppInitializer.run(ApplicationMgrImpl.java:1678) at com.ibm.ws.runtime.component.ComponentImpl$_AsynchInitializer.run(ComponentImpl.java:304) at com.ibm.ws.util.ThreadPool$Worker.run(ThreadPool.java:1332)  [10/4/05 15:10:48:927 CDT] 0000001b WebExtensionP W   Servlet SpringInitializerServlet is currently unavailable: SRVE0200E: Servlet [cat.dcs.partstore.services.SpringInitializerServlet]: Could not find required servlet class - cat.dcs.partstore.services.SpringInitializerServlet [10/4/05 15:10:48:943 CDT] 0000001b WebExtensionP E   SRVE0026E: [Servlet Error]-[javax.servlet.UnavailableException: SRVE0200E: Servlet [cat.dcs.partstore.services.SpringInitializerServlet]: Could not find required servlet class - cat.dcs.partstore.services.SpringInitializerServlet at com.ibm.ws.webcontainer.servlet.ServletWrapper$3.run(ServletWrapper.java:1407) at com.ibm.ws.security.util.AccessController.doPrivileged(AccessController.java:118) at com.ibm.ws.webcontainer.servlet.ServletWrapper.loadServlet(ServletWrapper.java:1379) at com.ibm.ws.webcontainer.servlet.ServletWrapper.initialize(ServletWrapper.java:1312) at com.ibm.wsspi.webcontainer.extension.WebExtensionProcessor.createServletWrapper(WebExtensionProcessor.java:84) at com.ibm.ws.webcontainer.webapp.WebApp.initializeTargetMappings(WebApp.java:540) at com.ibm.ws.webcontainer.webapp.WebApp.initialize(WebApp.java:379) at com.ibm.ws.webcontainer.webapp.WebGroup.addWebApplication(WebGroup.java:114) at com.ibm.ws.webcontainer.VirtualHost.addWebApplication(VirtualHost.java:127) at com.ibm.ws.webcontainer.WebContainer.addWebApp(WebContainer.java:776) at com.ibm.ws.webcontainer.WebContainer.addWebApplication(WebContainer.java:729) at com.ibm.ws.runtime.component.WebContainerImpl.install(WebContainerImpl.java:140) at com.ibm.ws.runtime.component.WebContainerImpl.start(WebContainerImpl.java:360) at com.ibm.ws.runtime.component.ApplicationMgrImpl.start(ApplicationMgrImpl.java:1019) at com.ibm.ws.runtime.component.DeployedApplicationImpl.fireDeployedObjectStart(DeployedApplicationImpl.java:1028) at com.ibm.ws.runtime.component.DeployedModuleImpl.start(DeployedModuleImpl.java:538) at com.ibm.ws.runtime.component.DeployedApplicationImpl.start(DeployedApplicationImpl.java:724) at com.ibm.ws.runtime.component.ApplicationMgrImpl.startApplication(ApplicationMgrImpl.java:683) at com.ibm.ws.runtime.component.ApplicationMgrImpl$AppInitializer.run(ApplicationMgrImpl.java:1678) at com.ibm.ws.runtime.component.ComponentImpl$_AsynchInitializer.run(ComponentImpl.java:304) at com.ibm.ws.util.ThreadPool$Worker.run(ThreadPool.java:1332) ]: {1} [10/4/05 15:10:48:974 CDT] 0000001b VirtualHost   I   SRVE0250I: Web Module Cat DCS Ebiz PS PartStore has been bound to default_host[*:9080,*:80,*:9443]. [10/4/05 15:10:48:974 CDT] 0000001f WebGroup      A   SRVE0169I: Loading Web Module: adminconsole. [10/4/05 15:10:49:021 CDT] 0000001b ApplicationMg A   WSVR0221I: Application started: PartStoreEAR [10/4/05 15:10:49:630 CDT] 0000001f ServletWrappe A   SRVE0242I: [EventInitializer]: Initialization successful. [10/4/05 15:10:49:646 CDT] 0000001f ActionServlet I   inside init.... [10/4/05 15:10:50:630 CDT] 0000001f ServletWrappe A   SRVE0242I: [action]: Initialization successful. [10/4/05 15:10:50:646 CDT] 0000001f ServletWrappe A   SRVE0242I: [SecureCleanup]: Initialization successful. [10/4/05 15:10:50:646 CDT] 0000001f VirtualHost   I   SRVE0250I: Web Module adminconsole has been bound to admin_host[*:9060,*:9043]. [10/4/05 15:10:50:661 CDT] 0000001e WebGroup      A   SRVE0169I: Loading Web Module: WebSphere Admin File Transfer Application. [10/4/05 15:10:50:771 CDT] 0000001e VirtualHost   I   SRVE0250I: Web Module WebSphere Admin File Transfer Application has been bound to admin_host[*:9060,*:9043]. [10/4/05 15:10:50:786 CDT] 00000019 WebGroup      A   SRVE0169I: Loading Web Module: IVT Application. [10/4/05 15:10:50:833 CDT] 0000001e ApplicationMg A   WSVR0221I: Application started: filetransfer [10/4/05 15:10:50:849 CDT] 00000019 VirtualHost   I   SRVE0250I: Web Module IVT Application has been bound to default_host[*:9080,*:80,*:9443]. [10/4/05 15:10:50:864 CDT] 00000018 WebGroup      A   SRVE0169I: Loading Web Module: Default Web Application. [10/4/05 15:10:50:943 CDT] 00000019 ApplicationMg A   WSVR0221I: Application started: ivtApp [10/4/05 15:10:50:974 CDT] 00000018 VirtualHost   I   SRVE0250I: Web Module Default Web Application has been bound to default_host[*:9080,*:80,*:9443]. [10/4/05 15:10:50:989 CDT] 0000001f WebGroup      A   SRVE0169I: Loading Web Module: adminconsole redirector. [10/4/05 15:10:51:036 CDT] 00000018 ApplicationMg A   WSVR0221I: Application started: DefaultApplication [10/4/05 15:10:51:068 CDT] 0000001f VirtualHost   I   SRVE0250I: Web Module adminconsole redirector has been bound to admin_host[*:9060,*:9043]. [10/4/05 15:10:51:083 CDT] 0000001f ApplicationMg A   WSVR0221I: Application started: adminconsole [10/4/05 15:10:51:224 CDT] 0000000a TCPChannel    A   TCPC0001I: TCP Channel TCP_1 is listening on host *  (IPv4) port 9060. [10/4/05 15:10:51:271 CDT] 0000000a WSChannelFram A   CHFW0019I: The Transport Channel Service has started chain WCInboundAdmin. [10/4/05 15:10:51:286 CDT] 0000000a TCPChannel    A   TCPC0001I: TCP Channel TCP_2 is listening on host *  (IPv4) port 9080. [10/4/05 15:10:51:302 CDT] 0000000a WSChannelFram A   CHFW0019I: The Transport Channel Service has started chain WCInboundDefault. [10/4/05 15:10:51:318 CDT] 0000000a TCPChannel    A   TCPC0001I: TCP Channel TCP_3 is listening on host *  (IPv4) port 9043. [10/4/05 15:10:51:333 CDT] 0000000a WSChannelFram A   CHFW0019I: The Transport Channel Service has started chain WCInboundAdminSecure. [10/4/05 15:10:51:349 CDT] 0000000a TCPChannel    A   TCPC0001I: TCP Channel TCP_4 is listening on host *  (IPv4) port 9443. [10/4/05 15:10:51:364 CDT] 0000000a WSChannelFram A   CHFW0019I: The Transport Channel Service has started chain WCInboundDefaultSecure. [10/4/05 15:10:51:364 CDT] 0000000a WSChannelFram A   CHFW0019I: The Transport Channel Service has started chain SOAPAcceptorChain1. [10/4/05 15:10:51:380 CDT] 0000000a WSChannelFram A   CHFW0019I: The Transport Channel Service has started chain SOAPAcceptorChain2. [10/4/05 15:10:51:396 CDT] 0000000a WSChannelFram A   CHFW0019I: The Transport Channel Service has started chain SOAPAcceptorChain3. [10/4/05 15:10:51:396 CDT] 0000000a WSChannelFram A   CHFW0019I: The Transport Channel Service has started chain SOAPAcceptorChain4. [10/4/05 15:10:51:411 CDT] 00000021 SchedulerServ I   SCHD0077I: The Scheduler Service is starting the Schedulers. [10/4/05 15:10:51:411 CDT] 0000000a RMIConnectorC A   ADMC0026I: The RMI Connector is available at port 2809 [10/4/05 15:10:51:427 CDT] 00000021 SchedulerServ I   SCHD0078I: The Scheduler Service has completed starting the Schedulers. [10/4/05 15:10:51:458 CDT] 0000003d WorkSpaceMana A   WKSP0023I: Workspace configuration consistency check is enabled. [10/4/05 15:10:51:896 CDT] 0000000a WsServerImpl  A   WSVR0001I: Server server1 open for e-business [10/4/05 15:10:52:146 CDT] 00000015 WorkSpaceMana A   WKSP0023I: Workspace configuration consistency check is enabled. [10/4/05 15:10:54:802 CDT] 00000040 ServletWrappe A   SRVE0242I: [transfer]: Initialization successful. [10/4/05 15:10:54:849 CDT] 00000040 WorkSpaceMana A   WKSP0023I: Workspace configuration consistency check is enabled. [10/4/05 15:10:55:240 CDT] 00000040 WorkSpaceMana A   WKSP0023I: Workspace configuration consistency check is enabled. [10/4/05 15:11:15:302 CDT] 00000042 SystemOut     O ----------------------- 2005-10-04 15:11:15.287 -----------------------  Total JVM Heap: 100,661,760 bytes Free JVM Heap:  24,083,032 bytes Heap % free:    23.924 %  Total Active Pooled Object Count = 0 Total Idle Pooled Object Count = 0  Total number of threads = 48  ---  [10/4/05 15:11:15:302 CDT] 0000003b SystemErr     R Event contains null severity and will not be logged.  Application: tuf message: java.lang.NullPointerException details:  class: The class containing the coding error is in the stack trace below. raw message: java.lang.NullPointerException  ay suggestion  ---  No further details from [SPR-1347](https://jira.spring.io/browse/SPR-1347?redirect=false)","closed","","spring-projects-issues","2005-10-04T07:22:18Z","2019-01-13T22:50:32Z"
"","6562","'UseCaches = false' for ClassPathResource [SPR-1868]","**[Heiko Erhardt](https://jira.spring.io/secure/ViewProfile.jspa?name=heiko)** opened **[SPR-1868](https://jira.spring.io/browse/SPR-1868?redirect=false)** and commented  This is related to #6158  1.2.6 release note reads: UrlResource sets the ""UseCaches"" flag to ""false"" for every URLConnection, mainly to avoid jar file locking on Windows  This should be done in ClassPathResource as well, same situation.  ---  **Affects:** 1.2.6, 1.2.7","closed","type: enhancement,","spring-projects-issues","2006-04-07T00:43:03Z","2019-01-11T22:01:37Z"
"","6389","setMaxRows() on CallableStatement [SPR-1691]","**[Hamster](https://jira.spring.io/secure/ViewProfile.jspa?name=hamster)** opened **[SPR-1691](https://jira.spring.io/browse/SPR-1691?redirect=false)** and commented  JdbcTemplate has maxRows property which can be configured. It is used in query() methods, but it is never used in call() method which is entry point for StoredProcedure.execute() method.  cs.setMaxRows(getMaxRows()) should (could?) be called before cs.execute()   ---  **Affects:** 1.2.3, 1.2.5","closed","type: bug,","spring-projects-issues","2006-02-08T11:41:35Z","2012-06-19T03:54:28Z"
"","6219","AbstractXsltView override root property value [SPR-1520]","**[Hamster](https://jira.spring.io/secure/ViewProfile.jspa?name=hamster)** opened **[SPR-1520](https://jira.spring.io/browse/SPR-1520?redirect=false)** and commented  In AbstractXsltView.renderMergedOutputModel(...) if passed model size is 1 then view root property set in configuration is not used.  That would be good and useful if you could  add new property: boolean overideSingleModel; And then in renderedMergeOutputModel(...)  if (model.size() == 1 && getOverrideSingleModel()) { ...  That would be helpfull, now if I want to use my configured value I have to add some empty values to model which is not clean solution.  Thanks,   ---  **Affects:** 1.2.5, 1.2.6","closed","type: enhancement,","spring-projects-issues","2005-12-07T09:16:16Z","2012-06-19T03:54:12Z"
"","6558","IllegalStateException: InputStream has already been read [SPR-1864]","**[Hal Hildebrand](https://jira.spring.io/secure/ViewProfile.jspa?name=jconstantine)** opened **[SPR-1864](https://jira.spring.io/browse/SPR-1864?redirect=false)** and commented  When using an InputStreamResource to create the XmlBeanFactory, an illegal state exception is thrown.  java.lang.IllegalStateException: InputStream has already been read - do not use InputStreamResource if a stream needs to be read multiple times at org.springframework.core.io.InputStreamResource.getInputStream(InputStreamResource.java:91) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.detectValidationMode(XmlBeanDefinitionReader.java:425) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.getValidationModeForResource(XmlBeanDefinitionReader.java:412) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.createDocumentBuilderFactory(XmlBeanDefinitionReader.java:385) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:352) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:308) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:283) at org.springframework.beans.factory.xml.XmlBeanFactory.\(XmlBeanFactory.java:73) at org.springframework.beans.factory.xml.XmlBeanFactory.\(XmlBeanFactory.java:61) at ResourceReadErrorTest.testDoubleRead(ResourceReadErrorTest.java:23) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at com.intellij.rt.execution.junit2.JUnitStarter.main(JUnitStarter.java:32) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at com.intellij.rt.execution.application.AppMain.main(AppMain.java:90)   ---  **Affects:** 2.0 M3  **Attachments:** - [ResourceReadErrorTest.java](https://jira.spring.io/secure/attachment/11550/ResourceReadErrorTest.java) (_914 bytes_)","closed","in: core,","spring-projects-issues","2006-04-06T09:34:03Z","2019-01-12T16:29:22Z"
"","6857","Request Context and Bind Status Attributes Should Be Set to REQUEST_SCOPE [SPR-2166]","**[Gregory McNair](https://jira.spring.io/secure/ViewProfile.jspa?name=fruminous)** opened **[SPR-2166](https://jira.spring.io/browse/SPR-2166?redirect=false)** and commented  There has already been a fix in place on a related issue concerning the nested path attribute (#4983).  It may be a good idea to extend the above fix to the bind status (set in BindTag.java) and, especially, the request  context (set in RequestContextAwareTag.java) attributes, setting them to REQUEST_SCOPE. This would allow pages using custom tag files and includes to access the same request context of the enclosing page.  Setting the request context to REQUEST_SCOPE would save multiple calls to JspAwareRequestContext's constructor in BindTag, as the tag would be able to access the request context in scope, rather than creating a new request context for each include or tag file.  ---  No further details from [SPR-2166](https://jira.spring.io/browse/SPR-2166?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-05-15T06:34:37Z","2019-01-11T18:00:32Z"
"","6394","classpath*: is not resolved when using ContextSingletonFactoryBeanLocator [SPR-1697]","**[Gregory Bohmer](https://jira.spring.io/secure/ViewProfile.jspa?name=shorecode)** opened **[SPR-1697](https://jira.spring.io/browse/SPR-1697?redirect=false)** and commented  http://forum.springframework.org/showthread.php?t=22224  Hi all - We have more than one EJB that shares the same applicationContext and it uses the ContextSingletonBeanFactoryLocator. When it loads the applicationContext that is found in the beanRefContext.xml, we are having a problem if that applicationContext has a PropertyPlaceholderConfigurer that uses the ""classpath*:"" notation. It almost seems like that is not getting resolved to the multple resources in the classpath. Instead we are getting a FileNotFoundException for ""classpath*:custom.properties"".  In other words, have I found a time/limitation/bug where classpath*: will actually not get expanded?   ---  **Affects:** 1.2.6","closed","in: core,","spring-projects-issues","2006-02-10T05:27:38Z","2019-01-11T21:29:01Z"
"","6232","Proposed Addition to AbstractFormController [SPR-1533]","**[Gregg Donovan](https://jira.spring.io/secure/ViewProfile.jspa?name=greggny3)** opened **[SPR-1533](https://jira.spring.io/browse/SPR-1533?redirect=false)** and commented  Originally posted in the forum (and slightly edited here): http://forum.springframework.org/showthread.php?t=20556  Juergen,  I'm having a bit of difficulty hooking a bit of pre-processing logic into my SimpleFormController classes and was looking for suggestions or, if my pain is shared, a possible API addition.  I have a class, MySimpleFormController, that extends SimpleFormController. I'd like to test one or more controller-specific conditions before processing either a GET or a POST any time MySimpleFormController is called. Something like:  public class MySimpleFormController extends SimpleFormController {  public ModelAndView onDispatch(HttpServletRequest request, HttpServletResponse response) {      // test pre-conditions     if (testSomeBadConditions()) {       return new ModelAndView(new RedirectView(""/goElsewhere.html""));     }     // conditions met. proceed     return null;  }  protected ModelAndView onSubmit(...) /* etc, etc */ ... }  Now, I realize there are a number of ways I could achieve the same goal. For example:  --A javax.servlet.Filter that maps to the same URI as MySimpleFormController.  --A HandlerInterceptor that maps to the same URI as MySimpleFormController.  However, neither of these is exactly what I want because it means another class with it's own mapping and bean definition(s) that will only apply to a single controller. Also, tying these two entities together with a common URI mapping seems like too loose coupling.  My attempts to insert this sort of logic into the flow of SimpleFormController and its superclasses have so far been thwarted. AbstractFormController finalizes the following methods that would provide useful hooks:  --handleRequestInternal(HttpServletRequest, HttpServletResponse) --showNewForm(HttpServketRequest, HttpServletResponse)  One option is to wait to put my pre-processing logic into either (or both):  showNewForm(HttpServletRequest, HttpServletResponse, BindException)  or:  processFormSubmission(HttpServletRequest, HttpServletResponse, Object, BindException)  However, by that time, formBackingObject(HttpServletRequest) has already been called (in either path) without a chance to check for pre-conditions and it's too late to fail gracefully.  So, if there are no clean ways to put pre-processing logic into a SimpleFormController and there's not an easy way to do so I haven't mentioned, I would suggest adding the following to AbstractFormController (or higher in the chain if it's found to be useful):  protected final ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {  ModelAndView mv = onDispatch(request, response); if (mv != null) { return mv; } // continue with the rest of handleRequestInternal()  // Form submission or new form to show? if (isFormSubmission(request)) { .... }  public ModelAndView onDispatch(HttpServletRequest request, HttpServletResponse response) { return null; }  Any comments or suggestions would be greatly appreciated. Thank you!   ---  **Affects:** 1.2.6","closed","type: enhancement,","spring-projects-issues","2005-12-13T03:40:14Z","2012-06-19T03:54:00Z"
"","6124","Provide a way to cancel out of the processFinish method of AbstractWizardFormController [SPR-1424]","**[Greg Matthews](https://jira.spring.io/secure/ViewProfile.jspa?name=gmatthews)** opened **[SPR-1424](https://jira.spring.io/browse/SPR-1424?redirect=false)** and commented  It seems like the preferred way to use AbstractWizardFormController is to put a ""_finish"" button in your web page, and put the code the needs to be executed in the processFinish method.  If you're calling a bunch of complicated legacy code that can return error messages, then it would be good if processFinish could: 1. leave the page state in session (if using sessionForm=""true""), and 2. return a null ModelAndView so that showForm was called, and the user could correct any errors.  It seems like the Spring team are encouraging the creation of enough Validators plugged into an AbstractWizardFormController so that when processFinish is actually executed, it never fails, but if it's not practical to refactor the legacy code called by processFinish then more flexibility is needed.   ---  **Affects:** 1.2.5","closed","type: enhancement,","spring-projects-issues","2005-10-27T10:21:45Z","2012-06-19T03:54:40Z"
"","6123","Expand Errors object to be a Messages object [SPR-1423]","**[Greg Matthews](https://jira.spring.io/secure/ViewProfile.jspa?name=gmatthews)** opened **[SPR-1423](https://jira.spring.io/browse/SPR-1423?redirect=false)** and commented  When building a web application, you typically need to present messages to the user that can be an error, information, or warning.  There is no built in support for this in Spring, other than the Errors interface.  It would be good if there was built in support for: 1. A parameterized message level. e.g. Error, Info, Warning. 2. The ability for messages to survive a redirect (likely by storing them in session, and having the JSP page clear session state when messages are displayed). This point probably relates more the SpringWEB rather than SpringCORE because it needs to know about sessions.  ---  **Affects:** 1.2.5  **Issue Links:** - #4895 Create a notion of ""Warnings"" (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2005-10-27T10:17:03Z","2019-01-11T21:01:31Z"
"","5999","Upgrading from 115 to 124 causes  to *not* be inherited by child beans [SPR-1298]","**[Greg Matthews](https://jira.spring.io/secure/ViewProfile.jspa?name=gmatthews)** opened **[SPR-1298](https://jira.spring.io/browse/SPR-1298?redirect=false)** and commented  We dropped the 1.2.4 Spring jars in to replace out 1.1.5 jars, and now the \ configuration for some beans don't work.  We've got several parent beans that have a \ element configured.  In 1.1.5, the child beans picked up the \ definition from the parent, but don't under 1.2.4.  If we copy/paste the \ definition from parent to child bean, the child bean now works, but we don't really see this as a fix due to the large number of child beans we'd have to change the Spring configuration for.   ---  **Affects:** 1.2.4","closed","in: core,","spring-projects-issues","2005-09-12T11:30:10Z","2012-06-19T03:53:57Z"
"","6873","Cannot do XA Rollback Using DefaultMessageListenerContainer in Spring 2.0 RC1 [SPR-2182]","**[gobreak](https://jira.spring.io/secure/ViewProfile.jspa?name=gobreak)** opened **[SPR-2182](https://jira.spring.io/browse/SPR-2182?redirect=false)** and commented  The issue in  #6784 still not resolved.  Problem still existed in RC1 I have tried the following: \ \ \ \ \ \ \ \  The container does init the resources such as session and consumer. Howerver, I think the resources is not enlisted in the XA trsansaction.  I have tried put the initResources rountine in executeListener() after getTransaction(), but the reuslt is still not OK.  ---  **Affects:** 2.0 RC1  **Issue Links:** - #6784 Cannot do XA Rollback Using DefaultMessageListenerContainer on JBoss (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2006-06-22T18:54:15Z","2019-01-12T16:52:09Z"
"","6872","Cannot do XA Rollback Using DefaultMessageListenerContainer in Spring 2.0 RC1 [SPR-2181]","**[gobreak](https://jira.spring.io/secure/ViewProfile.jspa?name=gobreak)** opened **[SPR-2181](https://jira.spring.io/browse/SPR-2181?redirect=false)** and commented  I have tried using JBossMQ and ActiveMQ to receive async message by DefaultMessageListenerContainer. Transaction Manager from JBoss are used and set properly as a bean property for DefaultMessageListenerContainer. To trigger the XA rollback, I throw a runtime exception in the onMessage() callback of the MessageListener. However, the message is still commit.  The bean setting: \ \ \  \ \ \java:comp/UserTransaction\ \ \                                                                 Finally, I needed to extend DefaultMessageListenerContainer and override the receive() method using JMSTemplate instead of the message consumer as follow: public Message receive(long timeOut) throws JMSException{ template.setConnectionFactory(getConnectionFactory()); template.setDefaultDestination(getDestination()); template.setReceiveTimeout(timeOut); if (getMessageSelector() == null || """".equals(getMessageSelector().trim())) return template.receive(getDestination()); else return template.receiveSelected(getDestination(), getMessageSelector()); }  I use JMSTemplate because I find it performs XA without any noticed problem. Using the above implementation can successfully rollback as well as commit the message. I am seeking for better solution on this topic.  ---  **Affects:** 2.0 RC1  **Issue Links:** - #6784 Cannot do XA Rollback Using DefaultMessageListenerContainer on JBoss (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2006-06-22T18:31:43Z","2019-01-12T16:52:10Z"
"","6784","Cannot do XA Rollback Using DefaultMessageListenerContainer on JBoss [SPR-2091]","**[gobreak](https://jira.spring.io/secure/ViewProfile.jspa?name=gobreak)** opened **[SPR-2091](https://jira.spring.io/browse/SPR-2091?redirect=false)** and commented  I have tried using JBossMQ and ActiveMQ to receive async message by DefaultMessageListenerContainer. Transaction Manager from JBoss are used and set properly as a bean property for DefaultMessageListenerContainer. To trigger the XA rollback, I throw a runtime exception in the onMessage() callback of the MessageListener. However, the message is still commit.  The bean setting: \ \ \  \ \ \java:comp/UserTransaction\ \ \                                                                 Finally, I needed to extend DefaultMessageListenerContainer and override the receive() method using JMSTemplate instead of the message consumer as follow: public Message receive(long timeOut) throws JMSException{ template.setConnectionFactory(getConnectionFactory()); template.setDefaultDestination(getDestination()); template.setReceiveTimeout(timeOut); if (getMessageSelector() == null || """".equals(getMessageSelector().trim())) return template.receive(getDestination()); else return template.receiveSelected(getDestination(), getMessageSelector()); }  I use JMSTemplate because I find it performs XA without any noticed problem. Using the above implementation can successfully rollback as well as commit the message. I am seeking for better solution on this topic.  ---  **Affects:** 2.0 M4  **Issue Links:** - #6872 Cannot do XA Rollback Using DefaultMessageListenerContainer in Spring 2.0 RC1 (_**""is duplicated by""**_) - #6873 Cannot do XA Rollback Using DefaultMessageListenerContainer in Spring 2.0 RC1 (_**""is duplicated by""**_)","closed","type: bug,","spring-projects-issues","2006-06-01T22:04:46Z","2019-01-11T18:20:19Z"
"","6868","Consider adding common ""class"" attribute to output of form:errors tag, (possibly) remove ""id"" attribute. [SPR-2177]","**[Glen Mazza](https://jira.spring.io/secure/ViewProfile.jspa?name=gmazza)** opened **[SPR-2177](https://jira.spring.io/browse/SPR-2177?redirect=false)** and commented  The 2.0 Spring form:errors tag will expand an error message, if a validation error is found in the command bean property, as follows:   becomes: \Password is missing\  An ""id"" and a ""name"" attribute is added to the span, both with the same value of ""{commandbeanname}.errors"".  Two suggestions:  1.)  One problem with having an ""id"" attribute automatically added to the span is that id's are supposed to be unique in an HTML document[1].  Although a rare use case, one could duplicate the form:errors tag for the same command bean property, with the result that the output HTML will have a duplicated ID.  Also, I'm unsure what additional benefits ""id"" buys the user that the already present ""name"" does not, so removing ""id"" might make sense.  2.)  It might be beneficial to add a class attribute with the same value to all spans (regardless of property), perhaps called ""formErrors"".  This will allow one to conveniently use a CSS selector to specify that class value in order to apply common formatting (such as red fonts) to **all** error messages:      *.formErrors {     	color: red     }  Glen  [1] http://www.w3.org/TR/REC-CSS2/selector.html#id-selectors   ---  **Affects:** 2.0 RC1","closed","type: enhancement,","spring-projects-issues","2006-06-22T02:33:00Z","2006-07-05T08:39:13Z"
"","6752","Patch to remove unused imports [SPR-2059]","**[Glen Mazza](https://jira.spring.io/secure/ViewProfile.jspa?name=gmazza)** opened **[SPR-2059](https://jira.spring.io/browse/SPR-2059?redirect=false)** and commented  Patch removes several unused imports from src directory (identified by Eclipse), as well as one unused private member variable.  Also renames a deprecation notice from Spring 1.3 to Spring 2.0 RC1.    ---  **Affects:** 2.0 M4  **Attachments:** - [springpatch.txt](https://jira.spring.io/secure/attachment/11653/springpatch.txt) (_18.17 kB_)","closed","type: enhancement,","spring-projects-issues","2006-05-25T07:52:23Z","2012-06-19T03:52:48Z"
"","6735","Update @see (java class) in MessageSource.java [SPR-2042]","**[Glen Mazza](https://jira.spring.io/secure/ViewProfile.jspa?name=gmazza)** opened **[SPR-2042](https://jira.spring.io/browse/SPR-2042?redirect=false)** and commented  It is not necessary to give the entire HTTP URL for pointing to the docs for the Sun Java classes.  Updated the file accordingly.   ---  **Affects:** 2.0 M4  **Attachments:** - [patch.txt](https://jira.spring.io/secure/attachment/11644/patch.txt) (_1.92 kB_)","closed","type: enhancement,","spring-projects-issues","2006-05-19T05:46:36Z","2012-06-19T03:52:33Z"
"","6728","2.0 MultiActionController.initBinder() relying on a deprecated function [SPR-2035]","**[Glen Mazza](https://jira.spring.io/secure/ViewProfile.jspa?name=gmazza)** opened **[SPR-2035](https://jira.spring.io/browse/SPR-2035?redirect=false)** and commented  2.0 MultiActionController's initBinder(HttpServletRequest, ServletRequestDataBinder) is making a function call to the deprecated method initBinder(ServletRequest, SRDB) -- whose implementation is empty anyway.  Recommend removing the tie-in below, if the latter function is indeed deprecated then the 2.0 code should not be relying on it.  Glen  Index: MultiActionController.java  ---  RCS file: /cvsroot/springframework/spring/src/org/springframework/web/servlet/mvc/multiaction/MultiActionController.java,v retrieving revision 1.31 diff -u -r1.31 MultiActionController.java --- MultiActionController.java	29 Mar 2006 12:03:18 -0000	1.31 +++ MultiActionController.java	18 May 2006 16:05:11 -0000 @@ -550,8 +550,6 @@ */ protected void initBinder(HttpServletRequest request, ServletRequestDataBinder binder) throws Exception {  ---  -         initBinder((ServletRequest) request, binder);    }    /**  ---  **Affects:** 2.0 M4","closed","status: declined,","spring-projects-issues","2006-05-18T03:10:23Z","2019-01-13T22:47:56Z"
"","6726","BindUtils.bindAndValidate() should not call ValidationUtils.invokeValidator() with null Validator argument [SPR-2033]","**[Glen Mazza](https://jira.spring.io/secure/ViewProfile.jspa?name=gmazza)** opened **[SPR-2033](https://jira.spring.io/browse/SPR-2033?redirect=false)** and commented  The recent change to ValidationUtils.InvokeValidator(), requiring that the Validator argument not be null (#6713, submitted by me and applied by Juergen), needs to be propagated to the deprecated org.sf.web.bind.BindUtils to no longer call this function if the validator argument is null.  (The API for BindUtils.bindAndValidate[1] allows for null Validator objects if there is no validation to be done.)  (Incidentally, does your team prefer tabs or four spaces for indentation within source code, or either is OK?)  Thanks, Glen  [1] http://tinyurl.com/edmh4  Index: BindUtils.java  ---  RCS file: /cvsroot/springframework/spring/src/org/springframework/web/bind/BindUtils.java,v retrieving revision 1.10 diff -u -r1.10 BindUtils.java --- BindUtils.java	9 Jan 2006 23:52:29 -0000	1.10 +++ BindUtils.java	18 May 2006 14:06:23 -0000 @@ -86,7 +86,9 @@ ServletRequest request, Object object, String objectName, Validator validator) {      BindException binder = bind(request, object, objectName);  -         ValidationUtils.invokeValidator(validator, object, binder);  +         if (validator != null) {  +         ValidationUtils.invokeValidator(validator, object, binder);  +         }       return binder;    }  @@ -108,7 +110,9 @@ Validator validator, BindInitializer initializer) throws ServletException  {      BindException binder = bind(request, object, objectName, initializer);  -         ValidationUtils.invokeValidator(validator, object, binder);  +         if (validator != null) {  +         ValidationUtils.invokeValidator(validator, object, binder);  +         }       return binder;    }  ---  **Affects:** 2.0 M4","closed","type: bug,","spring-projects-issues","2006-05-18T01:17:58Z","2019-01-13T22:47:58Z"
"","6723","Petclinic Example:  German translation file needs translation into German. [SPR-2030]","**[Glen Mazza](https://jira.spring.io/secure/ViewProfile.jspa?name=gmazza)** opened **[SPR-2030](https://jira.spring.io/browse/SPR-2030?redirect=false)** and commented  The samples/petclinic/war/WEB-INF/classes/messages_de.properties file should be removed or actual German translations provided.   Currently only ""welcome"" has been translated.  (Contents of file):  welcome=Willkommen required=is required notFound=has not been found duplicate=is already in use nonNumeric=must be all numeric duplicateFormSubmission=Duplicate form submission is not allowed typeMismatch.date=invalid date typeMismatch.birthDate=invalid date  I suspect Joergen can handle this without too much difficulty.  (Also, in JIRA, would you please add a new ""SpringSAMPLES"" component or otherwise let me know which component I should place samples issues under?)  Thanks, Glen   ---  **Affects:** 2.0 M4","closed","type: enhancement,","spring-projects-issues","2006-05-17T14:02:52Z","2012-06-19T03:52:40Z"
"","6722","Unused import in Petclinic sample [SPR-2029]","**[Glen Mazza](https://jira.spring.io/secure/ViewProfile.jspa?name=gmazza)** opened **[SPR-2029](https://jira.spring.io/browse/SPR-2029?redirect=false)** and commented  Eclipse is complaining about an unused import in the org.springframework.samples.petclinic.Speciality class.  If it could be removed it would be appreciated:  Index: Specialty.java  ---  RCS file: /cvsroot/springframework/spring/samples/petclinic/src/org/springframework/samples/petclinic/Specialty.java,v retrieving revision 1.2 diff -u -r1.2 Specialty.java --- Specialty.java	19 May 2005 11:54:13 -0000	1.2 +++ Specialty.java	18 May 2006 02:51:39 -0000 @@ -1,7 +1,5 @@ package org.springframework.samples.petclinic;  -import java.io.Serializable;  ---  /** * `@author` Juergen Hoeller   */  ---  **Affects:** 2.0 M4","closed","in: core,","spring-projects-issues","2006-05-17T13:54:46Z","2019-01-13T08:55:17Z"
"","6718","Petclinic Sample Web App:  Add StringTrimmerEditor to edit fields [SPR-2025]","**[Glen Mazza](https://jira.spring.io/secure/ViewProfile.jspa?name=gmazza)** opened **[SPR-2025](https://jira.spring.io/browse/SPR-2025?redirect=false)** and commented  The Petclinic sample currently does not strip leading/trailing whitespace from entry forms.  As a result, entry of just spaces does not cause ""must enter a value"" validation errors to occur, also the leading/trailing whitespace ends up getting saved into the DB.  Patch attached adds the StringTrimmerEditor[1] to the AbstractClinicForm to trim entries and have all-space entries cause required field validation errors to start occurring.  Also, patch adds a link to ValidationUtils in the API Doc for the validation.Errors interface.  Users reading the API for this interface in order to implement validation may be unaware of ValidationUtils and how it will simplify coding for them.  Thanks, Glen  [1] http://forum.springframework.org/showthread.php?t=23564&highlight=whitespace    ---  **Affects:** 2.0 M4  **Attachments:** - [patch.txt](https://jira.spring.io/secure/attachment/11643/patch.txt) (_1.92 kB_)","closed","type: enhancement,","spring-projects-issues","2006-05-16T15:08:24Z","2012-06-19T03:52:32Z"
"","6713","Changes to ValidationUtils class [SPR-2020]","**[Glen Mazza](https://jira.spring.io/secure/ViewProfile.jspa?name=gmazza)** opened **[SPR-2020](https://jira.spring.io/browse/SPR-2020?redirect=false)** and commented  Hello,  I am proposing the following change to the ValidationUtils.invokeValidator() method:  To remove the ""if (validator != null)"" check prior to executing this method.  This will cause an instant NullPointerException due to user coding errors (e.g., the user forgets to instantiate the validator prior to using it as a method) instead of just silently running as if there was no problem.  Rationale:  1.)  Validation is important for a running system.  Users who forget to instantiate their Validator object prior to calling this function will be glad Spring immediately hiccuped with an NPE, instantly alerting them to the problem.  Just silently continuing, on the other hand, fails to trip up the user that the validation is not being activated on their form.  2.)  During testing, if a person's validation is not working (because they forgot to initialize their validator object), they are more likely to start trying to fix/debug their Validation class, not realizing until after much wasted time that the problem was that they simply forgot to instantiate their Validator variable.  3.)  Also during debugging, if the user detects that Spring was just silently accepting a NULL Validator while continuing to run, it does not give the user a good confidence level with the integrity of the Spring system.  (""Man, why would Spring just silently continue to run with my erroneously null Validator instance?!?"", etc.)  I have also, for the Spring team's consideration, made the API descriptions for each method more closely match the argument lists, as well as give a slightly more precise definition why it is not necessary to supply the object to be validated for the rejectIfXXXXX() methods.  Thanks, Glen   ---  **Affects:** 2.0 M4  **Attachments:** - [spring20060515.txt](https://jira.spring.io/secure/attachment/11638/spring20060515.txt) (_5.76 kB_)","closed","type: enhancement,","spring-projects-issues","2006-05-15T08:59:40Z","2012-06-19T03:52:43Z"
"","6712","Update website to let users know which CVS tag to use to download 2.0.x and 1.2.x versions. [SPR-2019]","**[Glen Mazza](https://jira.spring.io/secure/ViewProfile.jspa?name=gmazza)** opened **[SPR-2019](https://jira.spring.io/browse/SPR-2019?redirect=false)** and commented  Hello, on the bottom of the development page[1], please inform readers that CVS HEAD will download the 2.0.x version, and also inform us of the CVS tag name (I have forgotten it right now) to use to download the 1.2.x maintenance branch.  Thanks, Glen  [1] http://www.springframework.org/development   --- No further details from [SPR-2019](https://jira.spring.io/browse/SPR-2019?redirect=false)","closed","type: documentation,","spring-projects-issues","2006-05-15T08:28:01Z","2012-06-19T03:52:29Z"
"","6699","Need a new project added to JIRA for website and documentation [SPR-2006]","**[Glen Mazza](https://jira.spring.io/secure/ViewProfile.jspa?name=gmazza)** opened **[SPR-2006](https://jira.spring.io/browse/SPR-2006?redirect=false)** and commented  Hello,  When we find problems or errors with the website and/or documentation it would be nice if we could use JIRA to inform the team, supply patches, etc.  Unfortunately there is no ""documentation"" project in JIRA, just projects for the Spring programs itself.  It would be nice if you could add project for ""documentation/website"" or similar to JIRA for Spring.  Thanks, Glen   --- No further details from [SPR-2006](https://jira.spring.io/browse/SPR-2006?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-05-12T12:28:24Z","2007-01-21T02:00:37Z"
"","5936","DB error when setting SqlTypeValue.TYPE_UNKNOWN to null [SPR-1234]","**[Gethin James](https://jira.spring.io/secure/ViewProfile.jspa?name=gethin)** opened **[SPR-1234](https://jira.spring.io/browse/SPR-1234?redirect=false)** and commented  The StatementCreatorUtils.setParameterValue automatically sets parameters even if we don't specify the type. However when this parameter is NULL, DB2 returns a ""CLI0613E  Program type out of range. SQLSTATE=S1003"" error.  In the code you have a commented out line of ps.setNull(paramIndex, Types.NULL);  Can you please use this line instead of ps.setObject(paramIndex, null);  ---  **Affects:** 1.2.2  **Attachments:** - [SPRING-1234-Derby.zip](https://jira.spring.io/secure/attachment/13112/SPRING-1234-Derby.zip) (_6.09 kB_)  **Issue Links:** - #9485 Problem with SimpleJdbcTemplate#update with null values in Derby  1 votes, 2 watchers","closed","in: core,","spring-projects-issues","2005-08-17T01:27:11Z","2019-01-11T19:20:06Z"
"","6833","readResolve not used by deserialization of StaticLabeledEnum subclasses [SPR-2142]","**[Gerald Glocker](https://jira.spring.io/secure/ViewProfile.jspa?name=gerald)** opened **[SPR-2142](https://jira.spring.io/browse/SPR-2142?redirect=false)** and commented  StaticLabeledEnum defines the readResolve-Method in order to replace deserialized instances with the existing VM instance. However this method is not applied in subclasses of StaticLabeledEnum because it is private. In java.io.ObjectStreamClass.getInheritableMethod only protected or public ""readResolve"" methods are matched.  Therefore the visibility of StaticLabeledEnum.readResolve should be changed to ""protected"".   ---  **Affects:** 2.0 M5","closed","in: core,","spring-projects-issues","2006-06-14T01:21:49Z","2012-06-19T03:52:28Z"
"","6579","XML simplification for property tag with nested ref-local tag [SPR-1886]","**[Gerald Glocker](https://jira.spring.io/secure/ViewProfile.jspa?name=gerald)** opened **[SPR-1886](https://jira.spring.io/browse/SPR-1886?redirect=false)** and commented  There is a simplification for \-tags with nested \ tags: \  There should also be a simplification for nested","closed","type: enhancement,","spring-projects-issues","2006-04-11T21:52:12Z","2019-01-11T22:02:34Z"
"","6059","Autowiring and Factories [SPR-1359]","**[Geoffrey Wiseman](https://jira.spring.io/secure/ViewProfile.jspa?name=diathesis)** opened **[SPR-1359](https://jira.spring.io/browse/SPR-1359?redirect=false)** and commented  I'm encountering a problem with Autowiring and Factories that seems to be, at the very least, unfortunate, and quite probably unintentional (e.g. a Bug).  Since it's somewhat complicated, and since I described it in the forum system already, I'll point this to that rather than duplicate it. http://forum.springframework.org/viewtopic.php?t=9361  I've verified that the same thing happens in Spring 1.2.5.  I'd have a hard time isolating this from the larger config, so I haven't yet done so; if I can find the time, I'll try and figure it out.   ---  **Affects:** 1.2.3, 1.2.5  **Attachments:** - [source.zip](https://jira.spring.io/secure/attachment/11792/source.zip) (_1.55 kB_)","closed","type: bug,","spring-projects-issues","2005-10-06T07:28:42Z","2012-06-19T03:54:13Z"
"","5879","Custom Trace Channel for AbstractTraceInterceptor [SPR-1177]","**[Geoffrey Wiseman](https://jira.spring.io/secure/ViewProfile.jspa?name=diathesis)** opened **[SPR-1177](https://jira.spring.io/browse/SPR-1177?redirect=false)** and commented  Trace interceptor supports dynamic 'channels' (log as class being intercepted) or static (log as interceptor class), but doesn't support a custom channel.  So, for instance, if in my project, I want to log my tracing to ""com.mycompany.myproject.trace"", there's no way to do that.  Would be nice to have this as an option.   ---  **Affects:** 1.2.3","closed","type: enhancement,","spring-projects-issues","2005-07-27T06:57:53Z","2005-08-03T20:23:50Z"
"","6153","Service to dump/restore a database to/from xml, perfect for loading testdata upon initialization (FULL PATCH INCLUDED) [SPR-1453]","**[Geoffrey De Smet](https://jira.spring.io/secure/ViewProfile.jspa?name=ge0ffrey)** opened **[SPR-1453](https://jira.spring.io/browse/SPR-1453?redirect=false)** and commented  In my application I need to put testdata in my database upon initialization. Defining this testdata in java turned out to be a nightmare, so I decided to define it in xml.  Using Hibernate and Xstream, this turned out a peice of cake. With the 1 implementing class, 1 abstract class and 1 interface I've added to spring (javadocced), I just need to do this:                                                                       More options are available of course then those mentioned here. Also using the same classes it should be easy to scedule automatic database dumps using spring's quartz integration.  To integrate this patch into spring it's only a matter of namespacing it's classes to org.springframework... Comments and improvements are welcome!   ---  **Affects:** 1.2.5  **Attachments:** - [AbstractDatabaseBackuper.java](https://jira.spring.io/secure/attachment/11253/AbstractDatabaseBackuper.java) (_1.54 kB_) - [DatabaseBackuper.java](https://jira.spring.io/secure/attachment/11254/DatabaseBackuper.java) (_2.09 kB_) - [DatabaseBackuperTests.java](https://jira.spring.io/secure/attachment/11258/DatabaseBackuperTests.java) (_12.36 kB_) - [Hibernate3ToXstreamXmlDatabaseBackuper.java](https://jira.spring.io/secure/attachment/11294/Hibernate3ToXstreamXmlDatabaseBackuper.java) (_9.92 kB_) - [Hibernate3ToXstreamXmlDatabaseBackuper.java](https://jira.spring.io/secure/attachment/11255/Hibernate3ToXstreamXmlDatabaseBackuper.java) (_9.16 kB_)","closed","type: enhancement,","spring-projects-issues","2005-11-08T02:04:11Z","2012-06-19T09:37:28Z"
"","6002","Spring Bind has problem with number bigger then 999 [SPR-1301]","**[Geert Verbeeck](https://jira.spring.io/secure/ViewProfile.jspa?name=geert)** opened **[SPR-1301](https://jira.spring.io/browse/SPR-1301?redirect=false)** and commented  I have an Integer object in a command class and bind it in a jsp. Then I want to test if this object is equal to a number. This throws an exception if the Integer object is bigger then 999  example: -command class: private Integer myInt = 1991;  -jsp:  .....   this trows following exception: javax.servlet.jsp.el.ELException: An exception occured trying to convert String ""1.991"" to type ""java.lang.Long""  now if I replace the 1991 by something smaller then 1000 it works (because the ""."" will not be added)  Currently I use as workaround ""command.myInt"" in my c:if test instead of ""status.value"" and this works fine (although I would prefer to use status.value).   ---  **Affects:** 1.2.4","closed","status: declined,","spring-projects-issues","2005-09-14T17:50:09Z","2019-01-12T16:30:07Z"
"","6677","SimpleMappingExceptionResolver.findMatchingViewName() uses the instance exceptionMappings instead of the local exceptionMappings [SPR-1984]","**[Gary Poore](https://jira.spring.io/secure/ViewProfile.jspa?name=gpoore)** opened **[SPR-1984](https://jira.spring.io/browse/SPR-1984?redirect=false)** and commented  I have been extending SimpleMappingExceptionResolver and had it throwing an unexpected null pointer in the inherited findMatchingViewName(). I was passing my own mapping object into the method yet it was never using it as it is the inherited instance Properties object that gets used in the method as there is a 'this' in front of all the references. I would expect the local one to be used.  protected String findMatchingViewName(Properties exceptionMappings, Exception ex) { int deepest = Integer.MAX_VALUE; for (Enumeration names = this.exceptionMappings.propertyNames(); names.hasMoreElements();) { String exceptionMapping = (String) names.nextElement(); int depth = getDepth(exceptionMapping, ex); if (depth >= 0 && depth < deepest) { deepest = depth; return this.exceptionMappings.getProperty(exceptionMapping); } } return null; }   ---  **Affects:** 1.2.7, 2.0 M3","closed","type: bug,","spring-projects-issues","2006-05-04T08:56:22Z","2012-06-19T03:52:47Z"
"","5956","Using detached Criteria [SPR-1254]","**[Frank Verbruggen](https://jira.spring.io/secure/ViewProfile.jspa?name=verfra)** opened **[SPR-1254](https://jira.spring.io/browse/SPR-1254?redirect=false)** and commented  My software developers use the HibernateTemplate and HibernateDAOSupport classes to combine Spring 1.2 final and Hibernate 3. I wanted to hide all session management and transaction management from them, so we used a configured transaction interceptor, also by Spring. All was well until we decided upon using the Criteria interface by Hibernate. Since I hid the session management from my team they could not use Criteria objects, and there was no support in HibernateTemplate, nor in HibernateDAOSupport. The next step was for me to take a looksy in the source code. After some investigation, I found that support wasn't available, so I decided to use my own classes. The following 2 methods were added to HibernateTemplate:  \ 	public CriteriaImpl getDetachedCriteria(Class persistentClass){ 		return new CriteriaImpl(persistentClass.getName(), null); 	}      public List find(final CriteriaImpl detachedCriteria){     	return (List) execute(new HibernateCallback() {     		public Object doInHibernate(Session session) throws HibernateException {     			detachedCriteria.setSession((SessionImpl) session);     			return detachedCriteria.list();     		}     	}, true);		     }  \  and the following 2 protected methods were added to HibernateDaoSupport:  \ 	protected List list(Class domeinObject) { 		CriteriaImpl crit = getHibernateTemplate().getDetachedCriteria(domeinObject); 		addCriteria(crit); 		return getHibernateTemplate().find(crit);  	}      protected Criteria addCriteria(Criteria criteria) {     	return criteria;     }  \  now my developers can override addCriteria and call list with their domain object in implementing classes.  I have identified 2 major drawbacks to this approach:  1. each implementing class can implement addCriteria only once, thus a State pattern is neccessary to perform different list calls. 2. the explicit cast to SessionImpl that is needed because CriteriaImpl requires it in the setSession function  I hope this functionality will be added in the near future. Yours sincerely,  Frank Verbruggen   ---  **Affects:** 1.2 final","closed","type: enhancement,","spring-projects-issues","2005-08-25T20:10:46Z","2012-06-19T03:54:11Z"
"","5980","properties from a bean is lost in the CachedIntrospectionResult [SPR-1278]","**[Frank Karlstrøm](https://jira.spring.io/secure/ViewProfile.jspa?name=fjank)** opened **[SPR-1278](https://jira.spring.io/browse/SPR-1278?redirect=false)** and commented  I have an application running in tomcat as an web-application. I use Hibernate3 with Hibernate annotations, with Apache Derby as databaseengine. When fetching a POJO with 19 columns (I have checked, the columns are all there in the database), the CachedIntrospectionResults caches the properties for this POJO. All 19 are correctly cached, but when I later try to fetch the properties from a JSP with the  tag, some properties generate the error:  org.springframework.beans.NotReadablePropertyException: Invalid property 'budgetnotes' of bean class [org.fjank.aso.model.Assignment]: Bean property 'budgetnotes' is not readable or has an invalid getter method: Does the return type of the getter match the parameter type of the setter? org.springframework.beans.BeanWrapperImpl.getPropertyValue(BeanWrapperImpl.java:651) org.springframework.beans.BeanWrapperImpl.getPropertyValue(BeanWrapperImpl.java:643) org.springframework.validation.BindException.getFieldValue(BindException.java:333) org.springframework.web.servlet.support.BindStatus.\(BindStatus.java:117) org.springframework.web.servlet.tags.BindTag.doStartTagInternal(BindTag.java:115) org.springframework.web.servlet.tags.RequestContextAwareTag.doStartTag(RequestContextAwareTag.java:68) org.apache.jsp.WEB_002dINF.jsp.assignment_jsp._jspService(org.apache.jsp.WEB_002dINF.jsp.assignment_jsp:443) org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:97) javax.servlet.http.HttpServlet.service(HttpServlet.java:802) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:322) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:291) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:241) javax.servlet.http.HttpServlet.service(HttpServlet.java:802) org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:97) org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:250) org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:928) org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:705) org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:625) org.springframework.web.servlet.FrameworkServlet.serviceWrapper(FrameworkServlet.java:386) org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:346) javax.servlet.http.HttpServlet.service(HttpServlet.java:689) javax.servlet.http.HttpServlet.service(HttpServlet.java:802) com.opensymphony.module.sitemesh.filter.PageFilter.parsePage(PageFilter.java:118) com.opensymphony.module.sitemesh.filter.PageFilter.doFilter(PageFilter.java:52)  I have debugged my way into the CachedIntrospectionResults, and it appears that some of the properties are overwritten in the underlying HashMap. 19 properties are put into the HashMap, and the HashMap correctly return 19 as size, but when looking into the HashMap instance, it appears that there are only 13 entries. some of the properties is put into indexes already existing in the hashMap.  I'll ble happy to provide further information for you to try to reproduce.   ---  **Affects:** 1.2.4","closed","","spring-projects-issues","2005-09-01T08:30:07Z","2019-01-11T19:22:12Z"
"","6576","Docs: Constructor argument type matching [SPR-1882]","**[FoX](https://jira.spring.io/secure/ViewProfile.jspa?name=tmaris)** opened **[SPR-1882](https://jira.spring.io/browse/SPR-1882?redirect=false)** and commented  Constructor arguments can have their index specified explicitly, I'm fine with that. But why not provide a default argument order when neither a type or index were specified, thus an implicit index order when nothing else specified? This would remove some overhead when using the constructor-based dependency injection approach as normally the order would be the same as defined in the constructor.   --- No further details from [SPR-1882](https://jira.spring.io/browse/SPR-1882?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-04-11T02:59:18Z","2012-06-19T03:52:23Z"
"","6575","Chapter 3 revision, enhancements provided [SPR-1881]","**[FoX](https://jira.spring.io/secure/ViewProfile.jspa?name=tmaris)** opened **[SPR-1881](https://jira.spring.io/browse/SPR-1881?redirect=false)** and commented  I read the third chapter of the Spring reference documentation 2.0 M3, and kept track of all the issues I encountered. It would be nice if these rather trivial enhancements be provided with the next documentation release.  [heading (page)] - [wrong sentence] - [corrected]  3.2.1 (7) - and applicaiton contexts - and application contexts 3.2.4 (10) - a (unique) name for said bean. - a (unique) name for that bean. 3.2.4 (10) - (sans quotes) - (without quotes) 3.3.3.4 (17) - to wit... - ? 3.3.3.6 (18) - a collaborator, so to speak. - a collaborator. 3.3.4 (21) - is to forgo some - is to forsee some 3.4.2.1 (27) - an application developer need do is - an application developer need to do 3.7 (31) - and also afterwords - and also afterwards 3.7 (31) - and ApplictionContexts - and ApplicationContexts 3.9 (34) - Thee are - These are 3.10 (34) - one name spcified - one name specified 3.10 (34) - component itslef - component itself 3.10 (34) - alias - aliases 3.10 (34) - is define elsewhere - is defined elsewhere 3.12.1 (36) - Ths is perhaps - This is perhaps 3.12.1 (36) - to wit... - ? 3.12.1 (36) - (i18N) - (i18n) 3.12.1 (36) - prupose - purpose 3.12.3 (39) - pased in as - passed in as 3.17 (43) - it is - It is 3.18 (44) - However, an alternate approach is to from one XML ... - ?  Enhancements  ---  3.2.4 - Mention a reason why you would provide name aliases to your bean 3.3.3.5 - Provide a better example in using idref  ---  **Affects:** 2.0 M3","closed","type: enhancement,","spring-projects-issues","2006-04-11T02:53:30Z","2019-01-13T22:48:25Z"
"","6221","extractOldValueForEditor property of BeanWrapperImpl is not passed on to nested BeanWrapperImpl instances [SPR-1522]","**[Florian](https://jira.spring.io/secure/ViewProfile.jspa?name=flo)** opened **[SPR-1522](https://jira.spring.io/browse/SPR-1522?redirect=false)** and commented  A BeanWrapperImpl does not pass its property extractOldValueForEditor = true on to newly created instances of nested BeanWrapperImpl classes.  The data binder is (per default) configured with extractOldValueForEditor = true. BeanWrapperImpl instances use this property to pass old values into property editors. This works for top level beans. However, when a value for a nested bean property is about to be set, a new BeanWrapperImpl instance is created with a default setting of extractOldValueForEditor = false. Thus, it is currently impossible to use a property editor that needs access to old values for nested bean properties.  I did not figure out any workaround for this issue.   ---  **Affects:** 1.2.6","closed","in: core,","spring-projects-issues","2005-12-08T03:11:40Z","2012-06-19T03:54:16Z"
"","6360","Add Axis2 support to JaxRpcPortProxyFactoryBean [SPR-1663]","**[Fernando Mato Mira](https://jira.spring.io/secure/ViewProfile.jspa?name=matomira)** opened **[SPR-1663](https://jira.spring.io/browse/SPR-1663?redirect=false)** and commented  Axis2 does not have a ServiceFactory. It needs then to be integrated differently. The enhancement should take into account ease of switching between JAX-RPC implementations during development.   ---  **Affects:** 1.2.6","closed","type: enhancement,","spring-projects-issues","2006-02-02T19:00:04Z","2007-01-03T08:53:30Z"
"","6311","JAX-RPC client using bridging proxy server cannot communicate with SSL-protected service  [SPR-1614]","**[Fernando Mato Mira](https://jira.spring.io/secure/ViewProfile.jspa?name=matomira)** opened **[SPR-1614](https://jira.spring.io/browse/SPR-1614?redirect=false)** and commented  When a JAX-RPC client wrtitten using Spring Remoting uses a BRIDGING proxy server, the communication with an SSL-protected service fails. It is needed a way to specify (including at runtime) that the communication with the SSL-protected service will be in plaintext, as the crypto will be done by the proxy server.   ---  **Affects:** 1.2.6","closed","in: web,","spring-projects-issues","2006-01-14T01:19:19Z","2019-01-11T21:21:58Z"
"","6647","JPAInterceptor should bind EntityManager to thread [SPR-1954]","**[Fedor Bokov](https://jira.spring.io/secure/ViewProfile.jspa?name=masf)** opened **[SPR-1954](https://jira.spring.io/browse/SPR-1954?redirect=false)** and commented  JPAInterceptor in 2.0 M4 does not bind EntityManager to thread, But it tries to unbind it after method invocation in finally block. I guess, ""TransactionSynchronizationManager.bindResource(getEntityManagerFactory(), new EntityManagerHolder(em));"" got accidentally deleted when you refactored JPA support for EJB3 final draft.   ---  **Affects:** 2.0 M4","closed","type: bug,","spring-projects-issues","2006-04-24T11:09:10Z","2012-06-19T03:52:34Z"
"","6093","Adds support for multilanguage LabeledEnum [SPR-1393]","**[Fausto Gamito](https://jira.spring.io/secure/ViewProfile.jspa?name=fmg)** opened **[SPR-1393](https://jira.spring.io/browse/SPR-1393?redirect=false)** and commented   --- No further details from [SPR-1393](https://jira.spring.io/browse/SPR-1393?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-10-18T20:03:48Z","2012-06-19T09:37:28Z"
"","6564","Macromedia Flex UI technology integration with Spring framework [SPR-1870]","**[Farooq Hameed](https://jira.spring.io/secure/ViewProfile.jspa?name=farooqmian)** opened **[SPR-1870](https://jira.spring.io/browse/SPR-1870?redirect=false)** and commented  Macromedia Flex is emerging Rich Interface Application (RIA) technology and it's been used as an interface to J2EE for a better user experience. Macromedia Flex  should have a transperent integration with Spring framework especially with Hibernate as O/R layer. I am here reffering to the current integration of JSF with Spring framework with Hibernate as O/R  layer with automatic Hibernate session management to handle lazy loading of objects (""OpenSessionInViewFilter"" like or better than this). Some sort of transaperent integration should be made availble with Macromedia Flex User interfaces also as more and more poeple are adopting this technology for a better User experience.  ---  **Issue Links:** - #7871 Flex2 integration with Spring MVC / Web Flow (_**""is depended on by""**_)  7 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2006-04-08T01:22:23Z","2019-01-11T22:01:15Z"
"","6207","Make org.springframework.jndi.JndiTemplate more flexible [SPR-1508]","**[Fang Lin](https://jira.spring.io/secure/ViewProfile.jspa?name=fanglin)** opened **[SPR-1508](https://jira.spring.io/browse/SPR-1508?redirect=false)** and commented  In org.springframework.jndi.JndiTemplate Class, add an option to enable the InitialContext being created using the no-arg constructor with System properties, something like this: System.setProperty(Context.INITIAL_CONTEXT_FACTORY, property.getContextFactory() ); System.setProperty(Context.PROVIDER_URL, property.getContextProvider() ); return new InitialContext();  The current way would give this error when doing ctx.lookup(name) in our environment: [junit] javax.naming.NamingException: unexpected exception [Root exception is java.sql.SQLException: System or internal error javax.naming.NoInitialContextException: Need to specify class name in environment or system property, or as an applet parameter, or in an application resource file: java.naming.factory.initial];   ---  **Affects:** 1.2.5","closed","type: enhancement,","spring-projects-issues","2005-11-30T04:13:59Z","2006-01-02T00:28:29Z"
"","6083","add version number to jars and produce separate source jars for modules [build.xml patch] [SPR-1383]","**[Fabrizio Giustina](https://jira.spring.io/secure/ViewProfile.jspa?name=fgiust)** opened **[SPR-1383](https://jira.spring.io/browse/SPR-1383?redirect=false)** and commented  Actually jars generated by a binary builds don't have the version number in the name; the attached patch modify build.xml so that generated files are named with spring-{module}-{version}.jar. That's the maven standard way of naming jars and makes also easier for users to keep track of versions they are using (at the moment  the version is only specified in the manifest)... having the version number in the jar is a kind of standard after all.  The patch also adds a new ""modulesources"" target which generated source archives (spring-{module}-{version}-sources.jar) for each of the modules (at the moment only a single zip files is geneated). Note that the target is not included by default in standard builds.  ---  **Affects:** 1.2.5  **Attachments:** - [spring-buildxml-versioned-jars.diff](https://jira.spring.io/secure/attachment/11205/spring-buildxml-versioned-jars.diff) (_10.67 kB_)  **Issue Links:** - #7392 Create and upload Maven Source and Javadoc Bundles for Spring 2.0 (_**""is depended on by""**_) - #7392 Create and upload Maven Source and Javadoc Bundles for Spring 2.0 (_**""duplicates""**_)  1 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2005-10-15T01:24:04Z","2019-01-11T21:19:39Z"
"","6740","Too many 'instanceof' tests in Spring JDBC bloat code and prevent subclassing [SPR-2047]","**[Fabio Grassi](https://jira.spring.io/secure/ViewProfile.jspa?name=fabio)** opened **[SPR-2047](https://jira.spring.io/browse/SPR-2047?redirect=false)** and commented  Scattered around Spring JDBC classes there are many tests similar to the following, extracted from CallableStatementCreatorFactory.createCallableStatement:      if (!(declaredParameter instanceof SqlOutParameter) && !(declaredParameter instanceof SqlReturnResultSet))  I believe these tests should be rewritten as:      if (!(declaredParameter instanceof ResultSetSupportingSqlParameter))  This for two reasons:  1) The resulting code would be much more concise and clearer to read. 2) The resulting code would not break if someone had the need to use a third (new) subclass ResultSetSupportingSqlParameter (which may very well happen).  Ciao, Fabio.   ---  **Affects:** 1.2.8","closed","type: enhancement,","spring-projects-issues","2006-05-21T06:37:49Z","2012-06-19T03:52:22Z"
"","6739","JdbcTemplate conflicts with Oracle10g statement caching (ORA-17041) [SPR-2046]","**[Fabio Grassi](https://jira.spring.io/secure/ViewProfile.jspa?name=fabio)** opened **[SPR-2046](https://jira.spring.io/browse/SPR-2046?redirect=false)** and commented  Enabling statement caching with Oracle 10g JDBC drivers may result in difficult to track exceptions (ORA-17041).  I was not able to investigate the problem fully, but after a full sunday afternoon of debugging, I am able to attach a JUnit repeatable test case.  The test case is artificially simple, I experienced the bug in a much more complex situation in a production web application.  I used Oracle JDBC thin driver version 10.2 (10.2.0.4 I think).  Ciao, FG.  ---  **Affects:** 1.2.8  **Attachments:** - [StatementCacheTest.java](https://jira.spring.io/secure/attachment/11645/StatementCacheTest.java) (_2.43 kB_)  **Issue Links:** - #9809 CLONE -JdbcTemplate conflicts with Oracle10g statement caching (ORA-17041)","closed","type: bug,","spring-projects-issues","2006-05-21T06:20:12Z","2019-01-11T18:15:29Z"
"","6738","JavaDoc error for class SqlReturnResultSet [SPR-2045]","**[Fabio Grassi](https://jira.spring.io/secure/ViewProfile.jspa?name=fabio)** opened **[SPR-2045](https://jira.spring.io/browse/SPR-2045?redirect=false)** and commented  The JavaDoc for the class org.springframework.jdbc.core.SqlReturnResultSet erroneously states that SqlReturnResultSet is a ""Subclass of SqlOutParameter..."" while in fact it extends ResultSetSupportingSqlParameter the same way SqlOutParameter does. The two classes are indeed siblings.  Ciao, Fabio.   ---  **Affects:** 1.2.8","closed","type: bug,","spring-projects-issues","2006-05-21T06:09:26Z","2012-06-19T03:52:47Z"
"","6551","SimpleMappingExceptionResolver should allow for configurable logging level [SPR-1857]","**[Fabio Grassi](https://jira.spring.io/secure/ViewProfile.jspa?name=fabio)** opened **[SPR-1857](https://jira.spring.io/browse/SPR-1857?redirect=false)** and commented  Even if a Throwable is handled by a HandlerExceptionResolver, I would very much like to have a corresponding log entry with level >= ERROR for authomatic notification to an administrator (for instance via Log4j SMTPAppender).  SimpleMappingExceptionResolver doesn't offer this feature now, so I have to subclass it and override resolveException.  I believe that it would be an useful improvement if SimpleMappingExceptionResolver offered this feature out of the box, possibly regulated by a settable property.  This issue is related to #5462, but as the latter is closed, I open a new one.  TIA, Fabio.  ---  **Affects:** 1.2.7  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2006-04-04T20:33:00Z","2019-01-11T22:01:48Z"
"","6517","BeanWrapperImpl: wrong null treatment in array properties [SPR-1823]","**[Fabio Grassi](https://jira.spring.io/secure/ViewProfile.jspa?name=fabio)** opened **[SPR-1823](https://jira.spring.io/browse/SPR-1823?redirect=false)** and commented  Assignig a null value to an array property results in an array with a single null element. I think this is a regression, but was not able to determine exactly. Here is a test case:  public class ArrayBug {      public static void main(String[] args) {         BeanWrapper bw = new BeanWrapperImpl(BeanWithArrayProperty.class);         MutablePropertyValues pvs = new MutablePropertyValues();         pvs.addPropertyValue(""elements"", null);         bw.setPropertyValues(pvs);         BeanWithArrayProperty bwap = (BeanWithArrayProperty) bw.getWrappedInstance();         Assert.isNull(bwap.getElements());     }               public static class BeanWithArrayProperty {         private Integer[] elements;              public Integer[] getElements() {             return elements;         }              public void setElements(Integer[] elements) {             this.elements = elements;         }              }  }  Thanks in advance, Fabio.  ---  **Affects:** 1.2.7  **Issue Links:** - #6470 where a null->Object[] method parameter conversion was null, is now Object[] {null} (i.e. size 1) (_**""duplicates""**_)  1 votes, 0 watchers","closed","in: core,","spring-projects-issues","2006-03-26T22:20:38Z","2019-01-11T22:11:21Z"
"","6042","ResourceBundleViewResolver.loadView swallows too many exceptions [SPR-1342]","**[Fabio Grassi](https://jira.spring.io/secure/ViewProfile.jspa?name=fabio)** opened **[SPR-1342](https://jira.spring.io/browse/SPR-1342?redirect=false)** and commented  Current code in ResourceBundleViewResolver.loadView swallows too many NoSuchBeanDefinitionException **without any logging**. If a NoSuchBeanDefinitionException is raised in initFactory, this is not seen by the user.  This implies that it is very difficult to trace silly but frequent developer errors. For instance in a views.properties try to make  a mistake in the property 'parent' of a bean (maybe leave an extra space at the end of the line). This results in a runtime error that gives no clue in the logs even with debug level.  I would suggest to change the code as follows:  protected View loadView(String viewName, Locale locale) throws Exception { BeanFactory factory = initFactory(locale); try { return (View) factory.getBean(viewName, View.class); } catch (NoSuchBeanDefinitionException ex) { if (logger.isWarnEnabled()) { logger.warn(""Unable to find a view with name "" + viewName); } // to allow for ViewResolver chaining return null; } }  Best regards, Fabio.   ---  **Affects:** 1.2.5","closed","type: enhancement,","spring-projects-issues","2005-10-03T01:09:03Z","2012-06-19T03:54:13Z"
"","5986","AbstractJasperReportsView should allow modification of populated report [SPR-1285]","**[Fabio Grassi](https://jira.spring.io/secure/ViewProfile.jspa?name=fabio)** opened **[SPR-1285](https://jira.spring.io/browse/SPR-1285?redirect=false)** and commented  There are occasions when one wants to modify the populated JasperPrint object before rendering of the report. For a concrete example see ""demo/samples/tableofcontents"" of the JasperReports distribution in which a table of contents gets moved from the end to the beginning of the report by modification of the JasperPrint.  This is a feature my users force me to adopt and that prevents me to use AbstractJasperReportsView and its child classes.  I would propose to add an empty protected method to AbstractJasperReportsView similar to:  protected void modifyPopulatedReport(JasperPrint populatedReport) {};  and then call it at the end of AbstractJasperReportsView.renderMergedOutputModel after filling the report, but before rendering it:      // Fill and render the report.     JasperPrint filledReport = fillReport(model);     modifyPopulatedReport(filledReport);     renderReport(filledReport, model, response);  Thanks in advance, Fabio.   ---  **Affects:** 1.2.4","closed","type: enhancement,","spring-projects-issues","2005-09-05T21:29:04Z","2012-06-19T03:54:08Z"
"","5985","AbstractJasperReportsSingleFormatView.createExporter should return JRExporter instead of JRAbstractExporter [SPR-1284]","**[Fabio Grassi](https://jira.spring.io/secure/ViewProfile.jspa?name=fabio)** opened **[SPR-1284](https://jira.spring.io/browse/SPR-1284?redirect=false)** and commented  There is no need to return JRAbstractExporter (a class) instead of JRExporter (an interface) from AbstractJasperReportsSingleFormatView.createExporter(). This is more apparent after the resolution of issue: http://opensource.atlassian.com/projects/spring/browse/SPR-1208.  Thanks, Fabio.   ---  **Affects:** 1.2.4","closed","type: enhancement,","spring-projects-issues","2005-09-05T21:13:12Z","2012-06-19T03:54:30Z"
"","5885","JasperReportsUtils.render should use JRExporter instead of JRAbstractExporter [SPR-1208]","**[Fabio Grassi](https://jira.spring.io/secure/ViewProfile.jspa?name=fabio)** opened **[SPR-1208](https://jira.spring.io/browse/SPR-1208?redirect=false)** and commented  There seems to be no need to use a class (JRAbstractExporter) instead of an interface (JRExporter) in both overloaded versions of the method JasperReportsUtils.render.  Bye, Fabio.   ---  **Affects:** 2.0 RC4","closed","type: enhancement,","spring-projects-issues","2005-08-05T20:25:34Z","2005-08-05T22:02:50Z"
"","5910","Support for JasperReports batch exporting (JRExporterParameter.JASPER_PRINT_LIST) [SPR-1207]","**[Fabio Grassi](https://jira.spring.io/secure/ViewProfile.jspa?name=fabio)** opened **[SPR-1207](https://jira.spring.io/browse/SPR-1207?redirect=false)** and commented  JasperReports lets you concatenate a list of JasperPrint objects into a single document through the JRExporterParameter.JASPER_PRINT_LIST export parameter.  It would be nice to have this feature available through Spring. From 10.000 ft it would require two more overloaded versions of JasperReportsUtils.render method, plus a refactoring of AbstractJasperReportsView.  If there is interest in this direction I'm willing to share the code I'm writing.  Bye, Fabio.   ---  **Affects:** 1.2.4  **Attachments:** - [BatchExport-Prototype.zip](https://jira.spring.io/secure/attachment/11475/BatchExport-Prototype.zip) (_10.24 kB_) - [Src.zip](https://jira.spring.io/secure/attachment/11472/Src.zip) (_4.72 kB_)  1 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2005-08-05T20:14:44Z","2015-09-22T17:34:37Z"
"","6298","A wildcard based bean definition [SPR-1601]","**[Eyal Lupu](https://jira.spring.io/secure/ViewProfile.jspa?name=eyal.lupu)** opened **[SPR-1601](https://jira.spring.io/browse/SPR-1601?redirect=false)** and commented  Many times we have a set of beans which has much in common like a group of DAO, today we define the beans in the following way  \ \ \ \ \ \ \ \ \ \  ..... and it continues..........  My suggestion is a wildcard (using regexp) bean definition  \ \ \ \ \ \  When the user asks the container for a bean which matches the pattern (like bf.getBean(""carDao"")) the factory will auto generate the new bean definition.  Few comments: - Explicity defined beans override pattern beans - We can use more than one * or other patterns using the regexp \(....\) syntax and replace it with $n - Patterns are valid only at the bean id, and can be used anywhere else within the bean definition    --- No further details from [SPR-1601](https://jira.spring.io/browse/SPR-1601?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-01-07T23:43:58Z","2012-06-19T09:37:24Z"
"","6297","The XML bean definitions parser fails when using schema namepsace prefix for the beans namespace [SPR-1600]","**[Eyal Lupu](https://jira.spring.io/secure/ViewProfile.jspa?name=eyal.lupu)** opened **[SPR-1600](https://jira.spring.io/browse/SPR-1600?redirect=false)** and commented  I'm taking a first look at Spring 2.0, this is done by upgrading a Spring 1.2.6 based application. I transformed all of my DTD based configuration files to schema based configuration files using the following:","closed","in: core,","spring-projects-issues","2006-01-07T23:31:54Z","2012-06-19T03:54:24Z"
"","6480","ApplicationContext and registerSingleton not cooperating [SPR-1785]","**[Evan Koffler](https://jira.spring.io/secure/ViewProfile.jspa?name=ekoffler)** opened **[SPR-1785](https://jira.spring.io/browse/SPR-1785?redirect=false)** and commented  I'm adapting an existing application so I'm using ConfigurableListableBeanFactory.registerSingleton(String name, Class clazz) to put on the more complicated services while using the spring-beans to wire up the rest. When I switched to using the ApplicationContext it is reporting an issue in auto-wiring based on the constructors.  I was able to extract the situation to a simple test case set of code. I'll attach that to this bug.   ---  **Affects:** 2.0 M3  **Attachments:** - [spring-context-SPR-1785.tar.gz](https://jira.spring.io/secure/attachment/11495/spring-context-SPR-1785.tar.gz) (_2.33 kB_)","closed","in: core,","spring-projects-issues","2006-03-11T07:18:44Z","2019-01-12T16:29:29Z"
"","6267","threading problem in class ThreadLocalTargetSource [SPR-1569]","**[eureka](https://jira.spring.io/secure/ViewProfile.jspa?name=eureka)** opened **[SPR-1569](https://jira.spring.io/browse/SPR-1569?redirect=false)** and commented  the destroy method of ThreadLocalTargetSource iterates through the synchronized set targetSet without manually synchronize on the set. The code is as follow:      /**      * Dispose of targets if necessary; clear ThreadLocal.      */     public void destroy() {     	logger.info(""Destroying ThreadLocalTargetSource bindings"");     	for (Iterator it = this.targetSet.iterator(); it.hasNext(); ) {     		Object target = it.next();     		if (target instanceof DisposableBean) {     			try {     				((DisposableBean) target).destroy();     			}     			catch (Exception ex) {     				// do nothing     				if (logger.isWarnEnabled()) {     					logger.warn(""Thread-bound target of class ["" + target.getClass() +     							""] threw exception from destroy() method"", ex);     				}     			}     		}     	}     	this.targetSet.clear();     	     	// clear ThreadLocal     	this.targetInThread.set(null);     }  But  JDK document says that:  It is imperative that the user manually synchronize on the returned set when iterating over it:  Set s = Collections.synchronizedSet(new HashSet()); ... synchronized(s) { Iterator i = s.iterator(); // Must be in the synchronized block while (i.hasNext()) foo(i.next()); }  Failure to follow this advice may result in non-deterministic behavior.  Will this be a problem?   ---  **Affects:** 1.2.6","closed","type: enhancement,","spring-projects-issues","2005-12-23T13:55:08Z","2012-06-19T03:54:23Z"
"","6850","Duplicating MBean attributes with getters/setters [SPR-2159]","**[Eugene Prokopiev](https://jira.spring.io/secure/ViewProfile.jspa?name=enp)** opened **[SPR-2159](https://jira.spring.io/browse/SPR-2159?redirect=false)** and commented  MBean attributes described with annotations are duplicated with getters/setters methods. For example, with this class:  import org.springframework.jmx.export.annotation.ManagedAttribute; import org.springframework.jmx.export.annotation.ManagedResource;  `@ManagedResource`(objectName=""bean:name=MyBean"") public class MyBean {      private int count = 0;          @ManagedAttribute(description=""Count attribute"")     public int getCount() {     	return count;     }  }  and this beans:  \ 	\ \ 		\ 	\ 	\ \ 		\ \ 	\ 	\ \ 		\ 	\ \ \ \ 			\ \ 	\ 	\ 		\ 	\ \ I see in jconsole attribute count and operation getCount   ---  **Affects:** 2.0 M5  **Attachments:** - [JMXApp.zip](https://jira.spring.io/secure/attachment/11715/JMXApp.zip) (_4.17 kB_) - [jmxapp-corrected.zip](https://jira.spring.io/secure/attachment/11716/jmxapp-corrected.zip) (_4.24 kB_)","closed","in: core,","spring-projects-issues","2006-06-19T18:14:00Z","2019-01-12T16:29:14Z"
"","6325","Moving ""partial submit"" related methods up the inheritance hierarchy [SPR-1628]","**[Eugene Lubman](https://jira.spring.io/secure/ViewProfile.jspa?name=citynomad)** opened **[SPR-1628](https://jira.spring.io/browse/SPR-1628?redirect=false)** and commented  Methods isFormChangeRequest() and onFormChange() defined in SimpleFormController are very useful for handling ""partial submits"".  However, wizard form controllers currently don't have access to this functionality.  Perhaps these methods could be moved up to AbstractFormController or BaseCommandController to make them available to wizard-based forms?   ---  **Affects:** 1.2.6","closed","type: enhancement,","spring-projects-issues","2006-01-18T08:22:21Z","2012-06-19T09:37:33Z"
"","6303","Create a MultiActionFormController [SPR-1606]","**[Eugene Lubman](https://jira.spring.io/secure/ViewProfile.jspa?name=citynomad)** opened **[SPR-1606](https://jira.spring.io/browse/SPR-1606?redirect=false)** and commented  Currently, form controllers (SimpleFormController, etc.) and MultiActionController belong to different inheritance hierarchies, and therefore one cannot easily use the functionality of both (which is a pretty common need.)   It would be great to have a MultiActionFormController class that would combine the features of both.   ---  **Affects:** 1.2.6  **Attachments:** - [AbstractMultiActionFormController.java](https://jira.spring.io/secure/attachment/12014/AbstractMultiActionFormController.java) (_9.32 kB_) - [AbstractMultiActionValidator.java](https://jira.spring.io/secure/attachment/12013/AbstractMultiActionValidator.java) (_1.50 kB_)  31 votes, 23 watchers","closed","has: votes-jira,","spring-projects-issues","2006-01-10T05:36:47Z","2019-01-13T22:49:47Z"
"","6758","Allow to introspect information about existing scopes [SPR-2065]","**[Eugene Kuleshov](https://jira.spring.io/secure/ViewProfile.jspa?name=euxx)** opened **[SPR-2065](https://jira.spring.io/browse/SPR-2065?redirect=false)** and commented  Spring 2.0M5 introduced new support for scoped beans on the core container. It allows to maintain scoped bean instances and even use custom scopes (e.g. domain specific conversations).  However it is not possible to query what scopes already registered on the bean factory and it is also not possible to query what conversation is active at the moment (it is hidden in concrete Scope implementation).  Please introduce the following methods to the Spring API:  Set\ BeanFactory.getScopeNames() that would retun registered scopes. String Scope.getConversationId() that would return id for the currently active conversation or null if such id can't be created (e.g. for http request scope). For example it could return session id for http session scope.   ---  **Affects:** 2.0 M5  2 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2006-05-26T09:29:24Z","2012-06-19T03:52:45Z"
"","6408","Allow to define bean metadata in spring context [SPR-1711]","**[Eugene Kuleshov](https://jira.spring.io/secure/ViewProfile.jspa?name=euxx)** opened **[SPR-1711](https://jira.spring.io/browse/SPR-1711?redirect=false)** and commented  It would be convenient to be able to define metadata for beans configured and managed by Spring. Such metadata can be used by bean post processor and AOP interceptors when code-level metadata can't be used.  Possible config could look something like this:   \ \ \ \\\\\ \ ... \  Annotations could be available trough new method on BeanFactory and can be implemented using dynamic proxy that created on annotation interfaces.   ---  **Attachments:** - [spring-meta.zip](https://jira.spring.io/secure/attachment/11654/spring-meta.zip) (_6.09 kB_)","closed","type: enhancement,","spring-projects-issues","2006-02-14T12:09:17Z","2019-01-11T21:29:52Z"
"","6343","Allow to identify loaded spring contexts [SPR-1646]","**[Eugene Kuleshov](https://jira.spring.io/secure/ViewProfile.jspa?name=euxx)** opened **[SPR-1646](https://jira.spring.io/browse/SPR-1646?redirect=false)** and commented  Currently ApplicationContext and BeanFactory have no id that would allow to uniquely identyfy them. I am working on some monitoring tool and have to differentiate one context from another.  Please introduce optional beans/`@id` attribute in XML definition and correspond get/setId methods on BeanFactory that would allow to specify id for each given context.  ---  **Affects:** 1.2.6, 2.0 M1  **Attachments:** - [spring.ctx.id.patch](https://jira.spring.io/secure/attachment/11430/spring.ctx.id.patch) (_6.57 kB_)  **Issue Links:** - #9063 Make AbstractApplicationContext BeanNameAware  2 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2006-01-29T11:59:01Z","2019-01-11T21:27:18Z"
"","6116","Allow bean loading using partial definition from the applicationContext.xml [SPR-1416]","**[Eugene Kuleshov](https://jira.spring.io/secure/ViewProfile.jspa?name=euxx)** opened **[SPR-1416](https://jira.spring.io/browse/SPR-1416?redirect=false)** and commented  It is a very common scenario when you need to implement test case, that most of the dependencies has to be mocked out. Usually you'll have to manually create bean under test and inject all the dependencies. This may lead to some mistakes, because set of params may not match the actual definition in spring context.  It would be handy to have special context that would only use declared list of bean names and for all others would pick user-defined objects precreated and e.g. stored in a map or something, so these values could be mocks and will overrwrite definitions from original xml.   ---  **Attachments:** - [StubApplicationContext.java](https://jira.spring.io/secure/attachment/11232/StubApplicationContext.java) (_1.10 kB_) - [StubPostProcessor.java](https://jira.spring.io/secure/attachment/11257/StubPostProcessor.java) (_616 bytes_)","closed","type: enhancement,","spring-projects-issues","2005-10-24T01:25:42Z","2012-06-19T09:37:39Z"
"","6115","Allow declarative dependency injection for EJB components [SPR-1415]","**[Eugene Kuleshov](https://jira.spring.io/secure/ViewProfile.jspa?name=euxx)** opened **[SPR-1415](https://jira.spring.io/browse/SPR-1415?redirect=false)** and commented  When implementing session or message-driven EJB's using Spring's convenience EJB classes it would be nice if you can actually define special bean in Spring application context, then when this bean will be requested, it would inject all the dependencies declared in it into the caller. Then user would just add bunch of set* methods and they will be automatically called upon context resolution from the super class (from ejbCreate() method).  ---  **Issue Links:** - #5053 EJB's that reference other beans cannot use Dependency Injection (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2005-10-24T01:14:29Z","2019-01-11T21:02:11Z"
"","6033","sax-based parser for loading xml bean definition [SPR-1333]","**[Eugene Kuleshov](https://jira.spring.io/secure/ViewProfile.jspa?name=euxx)** opened **[SPR-1333](https://jira.spring.io/browse/SPR-1333?redirect=false)** and commented  I've implemented a sax-based parser for Spring's XML bean definition and wonder if you'd be interested to integrate this into Spring framework. this class can be used in place of the current DOM-based parser as well as an lightweight adapter for runtime app context generators such as xslt-based tools or tools like Jacn (even so I believe Jacn should directly generate Spring factories without intermediate XML representation).  I run all existing tests from xml package and they all seem working just fine. That however required to have copies of XmlBeanDefinitionReaderand and XmlBeanFactory patched to work with my parser.  In my tests this parser is little bit faster then current DOM-based parser and in my opinion it is structured little better then DOM-based parser. Basically is is sort-of stripped-down Digester (stack-based state machine) with declarative definitions for parsing rules. Interestingly the same rules could be used with StAX-based parser with very minimal changes or even without changes using adapter for SAX Attributes instance used in rule params.  Also note that current XmlBeanDefinitionReader class is tight to DOM-based API and does not allow to hookup abstract XML parsers (e.g. SAX or StAX). This make impossible to substiture custom non-DOM XML parser to XmlBeanFactory.   ---  **Affects:** 1.2.4  **Attachments:** - [SAXBeanDefinitionParser.java](https://jira.spring.io/secure/attachment/11192/SAXBeanDefinitionParser.java) (_43.17 kB_)","closed","type: enhancement,","spring-projects-issues","2005-09-29T18:21:54Z","2007-08-30T03:47:17Z"
"","6012","Attributes ref and value doesn't work for constructor-arg element in app context xml [SPR-1312]","**[Eugene Kuleshov](https://jira.spring.io/secure/ViewProfile.jspa?name=euxx)** opened **[SPR-1312](https://jira.spring.io/browse/SPR-1312?redirect=false)** and commented  spring-beans.dtd for 1.2.4 allows to use ref and value attributes for constructor-arg element, however DefaultXmlBeanDefinitionParser.parseConstructorArgElement() does not have code to handle these attributes.   ---  **Affects:** 1.2.4","closed","in: core,","spring-projects-issues","2005-09-20T02:47:47Z","2019-01-11T21:11:26Z"
"","6653","spring-form.tld not included in distribution [SPR-1960]","**[Erwin Vervaet](https://jira.spring.io/secure/ViewProfile.jspa?name=klr8)** opened **[SPR-1960](https://jira.spring.io/browse/SPR-1960?redirect=false)** and commented  The spring-form.tld tag library descriptor is not included in the 'dist/' directory of the distribution, as is the case for spring.tld and the DTD and schemas. Note that it is correctly included in the meta-inf directorin inside 'dist/modules/spring-webmvc.jar'.   ---  **Affects:** 2.0 M4","closed","type: enhancement,","spring-projects-issues","2006-04-26T03:59:34Z","2006-11-03T05:33:03Z"
"","6651","Some documentation images not included in distribution [SPR-1958]","**[Erwin Vervaet](https://jira.spring.io/secure/ViewProfile.jspa?name=klr8)** opened **[SPR-1958](https://jira.spring.io/browse/SPR-1958?redirect=false)** and commented  It seems like the 'images/admons' directory is not included in the distribution archives (in the docs/reference/html_single directory). As a result some images do not show up in the HTML reference docs contained in the distribution. For instance ""../images/admons/note.png"" cannot be found.  ---  **Affects:** 2.0 M4  **Issue Links:** - #6641 CSS file for Spring Ref Docs not being put in correct place. (_**""is depended on by""**_)","closed","type: bug,","spring-projects-issues","2006-04-25T22:04:48Z","2019-01-11T22:21:20Z"
"","6264","Class org.springframework.load.http.HttpTests does not compile in Eclipse project [SPR-1566]","**[Erwin Vervaet](https://jira.spring.io/secure/ViewProfile.jspa?name=klr8)** opened **[SPR-1566](https://jira.spring.io/browse/SPR-1566?redirect=false)** and commented  Class org.springframework.load.http.HttpTests does not compile in the Eclipse project that's currently in CVS. It seems to depend on a package called 'HTTPClient'; which could be this one: http://www.innovation.ch/java/HTTPClient/ (not sure since there seem to be many HTTPClient packages floating around).  I can't immediately trace the problem in the history of .classpath. HttpTests.java hasn't been updated in recent months.  Is this class even used? Should it be kicked out?   --- No further details from [SPR-1566](https://jira.spring.io/browse/SPR-1566?redirect=false)","closed","","spring-projects-issues","2005-12-22T21:46:13Z","2019-01-11T21:39:40Z"
"","6224","Implementing ApplicationListener causes circular bean reference error when loading application context [SPR-1525]","**[Erwin Vervaet](https://jira.spring.io/secure/ViewProfile.jspa?name=klr8)** opened **[SPR-1525](https://jira.spring.io/browse/SPR-1525?redirect=false)** and commented  Check the attachment for a unit test that illustrates the problem.  Beans of particular intrest in the context.xml: - trickyService: InitializingBean that is ApplicationContextAware and does 'getBeansOfType(Marker.class)' in afterPropertiesSet(). - markerObject: Implements Marker interface, depends on simpleService, which depends (via simpleServiceTarget)) on trickyService - testListener: ApplicationListener that depends on simpleService (hence also on trickyService), does NOT implement Marker interface  As you can see there is somewhat of a circular dependency betwheen trickyService and markerObject. However, when the testListner bean is removed from the context, the context loads fine. When you add it you get the following exception:  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'testListener' defined in class path resource [test/context.xml]: Can't resolve reference to bean 'simpleService' while setting property 'simpleService'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'simpleService' defined in class path resource [test/context.xml]: Can't resolve reference to bean 'simpleServiceTarget' while setting property 'target'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'simpleServiceTarget' defined in class path resource [test/context.xml]: Can't resolve reference to bean 'trickyService' while setting property 'trickyService'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'markerObject' defined in class path resource [test/context.xml]: Can't resolve reference to bean 'simpleService' while setting property 'simpleService'; nested exception is org.springframework.beans.factory.FactoryBeanNotInitializedException: Error creating bean with name 'simpleService': FactoryBean returned null object: probably not fully initialized (maybe due to circular bean reference)  This is quite bizar since testListener is not involved in the circular dependency between trickyService and markerObject!! Also, the problem goes away when testListener does not implement ApplicationListener.  Not sure if this is a real bug or just a very misleading error message.  Erwin   ---  **Affects:** 1.2.6, 2.0 M1  **Attachments:** - [contexttests.zip](https://jira.spring.io/secure/attachment/11315/contexttests.zip) (_1.49 kB_)","closed","in: core,","spring-projects-issues","2005-12-08T20:03:56Z","2019-01-12T16:29:47Z"
"","6446","Rollback without transaction with propagation SUPPORTS causes a warn-level log entry [SPR-1749]","**[Erwin Bolwidt](https://jira.spring.io/secure/ViewProfile.jspa?name=erwinb)** opened **[SPR-1749](https://jira.spring.io/browse/SPR-1749?redirect=false)** and commented  When a 'transaction' is rolled back (method processRollback in AbstractPlatformTransactionManager), in the testcase as a result of an exception in an intercepted class, a log entry is logged at level 'warn' with the message ""[12:54:46,750 438 ,DataSourceTransactionManager] Should roll back transaction but cannot - no transaction available"".  The transaction properties of the interceptor are defined as ""PROPAGATION_SUPPORTS,-Exception"". The problem also occurs with ""PROPAGATION_NEVER,-Exception"", which is in itself an illogical definition but allowed by spring.  The problem is that a transaction doesn't have to be present in the intercepted code - that's why PROPAGATION_SUPPORTS was used - and warn level log entries cause alarm bells to go off in the production environment. I think that a 'rollback' on a spring transaction that doesn't have a real transaction behind it - the implementation used for SUPPORTS - should not cause this warning because this is what is expected.  I can think of the following solutions:  1 - don't log the warning at all in AbstractPlatformTransactionManager 2 - pass a TransactionDefinition into the rollback method of AbstractPlatformTransactionManager so processRollback can decide to log dependent on the propagation behaviour 3 - let the TransactionAspectSupport class decide whether to call rollback or not dependent on the propagation behaviour and whether there is an actual transaction.  I think that 3 is easier to implement, but 2 is cleaner. However 1 is easiest and I don't see a big issue with it either.  One way to implement 3 is to patch the doCloseTransactionAfterThrowing method of TransactionAspectSupport, and replace the line  this.transactionManager.rollback(txInfo.getTransactionStatus());  with the code      int propagation = txInfo.getTransactionAttribute().getPropagationBehavior();     DefaultTransactionStatus txStatus = (DefaultTransactionStatus) txInfo.getTransactionStatus();     if (propagation == TransactionDefinition.PROPAGATION_MANDATORY ||         propagation == TransactionDefinition.PROPAGATION_REQUIRED ||         propagation == TransactionDefinition.PROPAGATION_REQUIRES_NEW ||          txStatus.hasTransaction()) {          this.transactionManager.rollback(txInfo.getTransactionStatus());     }    ---  **Affects:** 1.2.6","closed","type: enhancement,","spring-projects-issues","2006-02-27T22:03:16Z","2012-06-19T03:53:58Z"
"","6025","AbstractMessageSource: methods calling MessageFormat.format should be synchronized [SPR-1325]","**[Erwin Bolwidt](https://jira.spring.io/secure/ViewProfile.jspa?name=erwinb)** opened **[SPR-1325](https://jira.spring.io/browse/SPR-1325?redirect=false)** and commented  AbstractMessageSource calls MessageFormat.format without synchronizing. MessageFormat is not threadsafe. While I don't know if MessageFormat itself has any race condition bugs, it does integrate the other java.text classes, such as DateFormat. Example format string that integrates other formats: ""This is test number {0,number,#0}  on date {1,date,yyyy-MM-dd}""  And DateFormat is not threadsafe: http://bugs.sun.com/bugdatabase/view_bug.do;:YfiG?bug_id=4093418  Other solutions, beside synchronizing methods, include using a per-thread cache, but my hunch is that the overhead of more parsing of strings to MessageFormat objects (per thread) is higher than the synchronization overhead.  - Erwin    ---  **Affects:** 1.2.5","closed","in: core,","spring-projects-issues","2005-09-26T23:32:35Z","2012-06-19T03:53:58Z"
"","5969","RedirectView has broken URL encoding for query parameters [SPR-1267]","**[Erwin Bolwidt](https://jira.spring.io/secure/ViewProfile.jspa?name=erwinb)** opened **[SPR-1267](https://jira.spring.io/browse/SPR-1267?redirect=false)** and commented  CVS version 1.2 of RedirectView introduced the correct way of url-encoding parameters in the right character set. Unfortunately, it used the method URLEncoder.encode(String s, String enc) which exists since jdk1.4.  Presumably to remain compatible with jdk1.3, cvs version 1.3 of the file removed this call, but introduced broken code that performs no function:  String encodedKey = URLEncoder.encode(entry.getKey().toString()); // ... url.append(new String(encodedKey.getBytes(this.encodingScheme), this.encodingScheme));  The last line takes a lot of time but has no effect other than to throw an exception if a character is not supported by the encodingScheme, which won't happen. Because: - it takes a string (which is already url-encoded, so it it only contains ASCII characters), - translates it to a byte array in the encodingScheme encoding - it then turns the byte array back into the original string, by decoding it usinjg the same encodingScheme  This only takes CPU time, otherwise it's a no-op.  IMO there are two options to fix this bug:  1) Somehow (using reflection or two subclasses) implement the URLEncoder.encode function call differently for jdk1.3 and jdk1.4, where in jdk1.3 it doesn't take the encodingScheme into account.    Since the current implementation doesn't take the encodingScheme into account, and nobody has complained, this isn't a biggy.  2) Roll your own implementation of URLEncoder.encode that takes the encoding into account  I think 2) is the best option. Option 1) is kludgy; using reflection it is too slow, and using two subclasses makes the source not compile with 1.3.  If a committer will promise to commit the code, I'll write an implementation of 2) including unit tests.    ---  **Affects:** 1.2.4","closed","type: bug,","spring-projects-issues","2005-08-30T23:14:34Z","2012-06-19T03:54:36Z"
"","5968","StaticMessageSource does not set Locale correctly on MessageFormat [SPR-1266]","**[Erwin Bolwidt](https://jira.spring.io/secure/ViewProfile.jspa?name=erwinb)** opened **[SPR-1266](https://jira.spring.io/browse/SPR-1266?redirect=false)** and commented  The addMessage method of StatisMessageSource forgets to set the Locale of the message on the MessageFormat it creates. There is a method createMessageFormat in the superclass AbstractMessageSource that handles this correctly, so the fix is to call this method instead of constructing the MessageFormat directly.   ---  **Affects:** 1.2.4  **Attachments:** - [patch-staticmessagesource.txt](https://jira.spring.io/secure/attachment/11123/patch-staticmessagesource.txt) (_880 bytes_)","closed","in: core,","spring-projects-issues","2005-08-30T22:43:40Z","2012-06-19T03:54:37Z"
"","6393","MultiActionController with ParameterMethodNameResolver can result in stack overflow [SPR-1696]","**[Erik Rozendaal](https://jira.spring.io/secure/ViewProfile.jspa?name=erozendaal)** opened **[SPR-1696](https://jira.spring.io/browse/SPR-1696?redirect=false)** and commented  Using the following configuration:           	                    	       where DoEverythingController extends the MultiActionController, a user can cause a stack overflow by specifying an URL like: http://server/view.html?action=handleRequest. Maybe the handleRequest method should not be available when using the ParameterMethodNameResolver?    ---  **Affects:** 1.2.6","closed","in: core,","spring-projects-issues","2006-02-09T23:53:22Z","2012-06-19T03:54:13Z"
"","6435","typo in doco [SPR-1738]","**[Erick Dovale](https://jira.spring.io/secure/ViewProfile.jspa?name=edovale)** opened **[SPR-1738](https://jira.spring.io/browse/SPR-1738?redirect=false)** and commented  In chapter 4, 4.6. Setting Resources as properties 3rd Paragraph reads: Note that the resource path has no prefix, so because the application context itself is going to be used as the ResourceLoader, the resource itself with be loaded via a ClassPathResource, FileSystemResource, ServletContextResource, etc., as appropriate depending on the type of the context.  should read: Note that the resource path has no prefix, so because the application context itself is going to be used as the ResourceLoader, the resource itself WILL be loaded via a ClassPathResource, FileSystemResource, ServletContextResource, etc., as appropriate depending on the type of the context.   --- No further details from [SPR-1738](https://jira.spring.io/browse/SPR-1738?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-02-21T14:01:37Z","2012-06-19T03:54:30Z"
"","6310","error in documentation [SPR-1613]","**[Erick Dovale](https://jira.spring.io/secure/ViewProfile.jspa?name=edovale)** opened **[SPR-1613](https://jira.spring.io/browse/SPR-1613?redirect=false)** and commented  In the SpringAOP documentation, section 6.5.2, Paragraph refering to ""Other properties specific to ProxyFactoryBean include:"" Last sentences of the 2nd bullet refering to interceptor names: Reads: The first interceptor in the list will be the first to be able to interceptor the invocation (of course if it concerns a regular MethodInterceptor or BeforeAdvice.  Should read: The first interceptor in the list will be the first to be able to intercept the invocation (of course if it concerns a regular MethodInterceptor or BeforeAdvice.   ---  **Affects:** 1.2.6","closed","type: enhancement,","spring-projects-issues","2006-01-13T01:50:33Z","2012-06-19T03:54:20Z"
"","6203","typo in documentation  [SPR-1504]","**[Erick Dovale](https://jira.spring.io/secure/ViewProfile.jspa?name=edovale)** opened **[SPR-1504](https://jira.spring.io/browse/SPR-1504?redirect=false)** and commented  In the documentation for remoting at: http://www.springframework.org/docs/reference/remoting.html  right before 16.3 it reads  ""you know that know you'll have to create an application context named"" and it should probably say you know that now you'll have to create an application context named   --- No further details from [SPR-1504](https://jira.spring.io/browse/SPR-1504?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-11-29T07:42:43Z","2012-06-19T03:54:00Z"
"","6477","OncePerRequestFilter configured via DelegatingFilterProxy causes NullPointerException [SPR-1782]","**[Eric Olson](https://jira.spring.io/secure/ViewProfile.jspa?name=olsoner)** opened **[SPR-1782](https://jira.spring.io/browse/SPR-1782?redirect=false)** and commented  Configuring a OncePerRequestFilter via a DelegatingFilterProxy is causing a NullPointerException in GenericFilterBean#getFilterName().  I thought I was misconfiguring something, so I tried copying the ExpiredFlowCleanupFilter configuration from the Spring WebFlow (pr5) itemlist sample app, changed it to use a DelegatingFilterProxy, and received the same NullPointerException.  My current workaround: my subclass of OncePerRequestFilter implements BeanNameAware and overrides getFilterName() to use the bean name rather than the filter name.   --- No further details from [SPR-1782](https://jira.spring.io/browse/SPR-1782?redirect=false)","closed","type: bug,","spring-projects-issues","2006-03-10T06:45:55Z","2012-06-19T03:54:04Z"
"","6163","Source code for AnnotationSessionFactoryBean missing from distribution [SPR-1464]","**[Eric Olson](https://jira.spring.io/secure/ViewProfile.jspa?name=olsoner)** opened **[SPR-1464](https://jira.spring.io/browse/SPR-1464?redirect=false)** and commented  AnnotationSessionFactoryBean is tagged `@Since` 1.2.2.  I checked the SourceForge downloads for 1.2.2 through 1.2.5 and none have the source code for this class.  The spring.jar files all contain the compiled code, but there is no corresponding .java file under src.   ---  **Affects:** 1.2.2, 1.2.3, 1.2.4, 1.2.5","closed","in: core,","spring-projects-issues","2005-11-11T02:16:42Z","2019-01-11T21:05:13Z"
"","6316","autowire byType does not work for an abstract parent bean definition [SPR-1619]","**[Eric Gunnewegh](https://jira.spring.io/secure/ViewProfile.jspa?name=ericgunnewegh)** opened **[SPR-1619](https://jira.spring.io/browse/SPR-1619?redirect=false)** and commented  Autowire by type does not work for an abstract parent bean definition, see an example of an XML below:  \ \ \ \ \ \ If the autowire attribute is set at the child bean, autowire works as expected.   ---  **Affects:** 1.2.6","closed","type: enhancement,","spring-projects-issues","2006-01-16T22:03:40Z","2012-06-19T02:28:24Z"
"","6829","tag does not support all documented attributes [SPR-2138]","**[Eric Dalquist](https://jira.spring.io/secure/ViewProfile.jspa?name=edalquist)** opened **[SPR-2138](https://jira.spring.io/browse/SPR-2138?redirect=false)** and commented  The  tag from the spring-form.tld does not actually support in code all of the attributes advertised in the documentation and tld. The tld lists the following supported attributes:  id name cssClass cssStyle lang title dir onclick ondblclick onmousedown onmouseup onmouseover onmousemove onmouseout onkeypress onkeyup onkeydown  \  commandName action method enctype onsubmit onreset  The class, org.springframework.web.servlet.tags.form.FormTag only provides setters for these attributes (this list includes parent classes):  command commandName name onsubmit onreset method action enctype  It appears the rest of the","closed","type: bug,","spring-projects-issues","2006-06-13T10:52:22Z","2019-01-11T18:01:36Z"
"","6262","MockPortletURL doesn't check the validity of PortletMode and WindowState objects [SPR-1564]","**[Eric Dalquist](https://jira.spring.io/secure/ViewProfile.jspa?name=edalquist)** opened **[SPR-1564](https://jira.spring.io/browse/SPR-1564?redirect=false)** and commented  MockPortalContext provides a list of valid modes and states, this same list should be used by the MockPortletURL when setPortletMode and setWindowState are called. If the client code attempts to set a mode or state that is not in the list the appropriate exception should be thrown. It would be preferable for these lists to be configurable.   ---  **Affects:** 2.0 M1","closed","type: bug,","spring-projects-issues","2005-12-22T09:48:43Z","2012-06-19T03:54:04Z"
"","6528","CustomNumberEditor doesn't always handle values out of range [SPR-1834]","**[Eric Ballet Baz](https://jira.spring.io/secure/ViewProfile.jspa?name=ericbb)** opened **[SPR-1834](https://jira.spring.io/browse/SPR-1834?redirect=false)** and commented  CustomNumberEditor doesn't always handle values out of range. It's only handle when using the constructor without NumberFormat.  Here is my unit test :  // The testParseShortGreaterThanMaxValueWithoutNumberFormat() is ok // The testParseShortGreaterThanMaxValueWithNumberFormat() is ko  package org.springframework.beans.propertyeditors;  import java.beans.PropertyEditor; import java.text.NumberFormat;  import junit.framework.TestCase;  /** * `@author` Eric Ballet-Baz   */   public class TestCustomNumberEditor extends TestCase {    public void testParseShortGreaterThanMaxValueWithoutNumberFormat() {   PropertyEditor editor = new CustomNumberEditor(Short.class, true);   try {   editor.setAsText(String.valueOf(Short.MAX_VALUE + 1));   fail(Short.MAX_VALUE + 1 + "" is greater than max value"");   } catch (NumberFormatException e) {   // OK   }   }    public void testParseShortGreaterThanMaxValueWithNumberFormat() {   NumberFormat nf = NumberFormat.getIntegerInstance();   PropertyEditor editor = new CustomNumberEditor(Short.class, nf, true);   try {   editor.setAsText(String.valueOf(Short.MAX_VALUE + 1));   fail(Short.MAX_VALUE + 1 + "" is greater than max value"");   } catch (NumberFormatException e) {   // OK   }   }   }  Thanks Eric Ballet-Baz   ---  **Affects:** 2.0 M3","closed","type: enhancement,","spring-projects-issues","2006-03-29T00:52:26Z","2012-06-19T03:54:29Z"
"","6483","NumberUtils: NumberFormat and BigDecimal [SPR-1788]","**[Eric Ballet Baz](https://jira.spring.io/secure/ViewProfile.jspa?name=ericbb)** opened **[SPR-1788](https://jira.spring.io/browse/SPR-1788?redirect=false)** and commented  The following method isn't really parsing BigDecimal in the right way :  public static Number parseNumber(String text, Class targetClass, NumberFormat numberFormat)  because the conversion process is the following :  String -> Double -> String -> BigDecimal  As you can see, there is one step (String -> Double -> String) that you must remove, because errors are introduced by this useless conversion. You must directly convert String to BigDecimal with the constructor BigDecimal(String) Maybee you can update the method convertNumberToTargetClass to pass the original String ...  Here is my TestCase to show the error :  package org.springframework.util;  import java.math.BigDecimal; import java.text.NumberFormat; import java.util.Locale;  import junit.framework.TestCase;  /** * `@author` Eric Ballet-Baz   */   public class TestNumberUtils extends TestCase {    public void testParseBigDecimalNumber1() {   String bigDecimalAsString = ""0.10"";        NumberFormat numberFormat = NumberFormat.getInstance(Locale.ENGLISH);       Number bigDecimal = NumberUtils.parseNumber(bigDecimalAsString, BigDecimal.class, numberFormat);       assertEquals(new BigDecimal(bigDecimalAsString), bigDecimal);    }    public void testParseBigDecimalNumber2() {   String bigDecimalAsString = ""0.001"";        NumberFormat numberFormat = NumberFormat.getInstance(Locale.ENGLISH);       Number bigDecimal = NumberUtils.parseNumber(bigDecimalAsString, BigDecimal.class, numberFormat);       assertEquals(new BigDecimal(bigDecimalAsString), bigDecimal);    }    public void testParseBigDecimalNumber3() {   String bigDecimalAsString = ""3.14159265358979323846"";        NumberFormat numberFormat = NumberFormat.getInstance(Locale.ENGLISH);       Number bigDecimal = NumberUtils.parseNumber(bigDecimalAsString, BigDecimal.class, numberFormat);       assertEquals(new BigDecimal(bigDecimalAsString), bigDecimal);    }   }  Thanks Eric Ballet-Baz  ---  **Affects:** 1.2.7  **Issue Links:** - #9558 NumberUtils not converting BigDecimal to BigInteger correctly (overflow error)","closed","in: core,","spring-projects-issues","2006-03-13T02:31:20Z","2019-01-11T22:08:08Z"
"","6335","Memory leak in ProxyFactory when using CGLIB proxies [SPR-1638]","**[Eric Ballet Baz](https://jira.spring.io/secure/ViewProfile.jspa?name=ericbb)** opened **[SPR-1638](https://jira.spring.io/browse/SPR-1638?redirect=false)** and commented  I have a memory leak when using the ProxyFactory.  This has been tested with the following configuration : - cglib-nodep-2.1_3.jar - spring 1.2RC2 and spring 1.2.6 - IBM's JVM and SUN's JVM  Here is the unit test to demonstrate the problem :  import junit.framework.TestCase;  import org.aopalliance.intercept.MethodInterceptor; import org.aopalliance.intercept.MethodInvocation; import org.springframework.aop.framework.ProxyFactory; import org.springframework.aop.support.NameMatchMethodPoi ntcutAdvisor;  public class TestProxyFactoryMemoryLeak extends TestCase {      public void testMemoryLeak() {         Object target = new Object();         MethodInterceptor methodInterceptor = new DummyMethodInterceptor();              while (true) {             ProxyFactory proxyFactory = new ProxyFactory();             NameMatchMethodPointcutAdvisor advisor = new NameMatchMethodPointcutAdvisor(methodInterceptor);              advisor.addMethodName(""dummy"");             proxyFactory.addAdvisor(advisor);             proxyFactory.setProxyTargetClass(true);             proxyFactory.setTarget(target);             proxyFactory.getProxy();         }     }          private class DummyMethodInterceptor implements MethodInterceptor {         public Object invoke(MethodInvocation methodInvocation) throws Throwable {             return methodInvocation.proceed();         }     }  }  Thanks Eric Ballet-Baz   ---  **Affects:** 1.2.6","closed","in: core,","spring-projects-issues","2006-01-23T22:41:32Z","2012-06-19T03:54:40Z"
"","6777","countParameterPlaceholders in method query(String, ResultSetExtractor) take too much time. [SPR-2085]","**[Emilio Dolce](https://jira.spring.io/secure/ViewProfile.jspa?name=zzy9v4)** opened **[SPR-2085](https://jira.spring.io/browse/SPR-2085?redirect=false)** and commented  Avoid call to method countParameterPlaceholders when not prepared statement are used. This method take too much time and in my opinion is unuseful !!! Possible workaround: use query(myFlatSqlStatement, new Object[], new int[], new MyResultSetExtractor()).   ---  **Affects:** 1.2.6","closed","type: enhancement,","spring-projects-issues","2006-05-31T19:33:32Z","2012-06-19T03:52:40Z"
"","6210","Expand IncorrectResultSizeDataAccessException to accept multiple expected size values [SPR-1511]","**[Eliot Sykes](https://jira.spring.io/secure/ViewProfile.jspa?name=eliotsykes)** opened **[SPR-1511](https://jira.spring.io/browse/SPR-1511?redirect=false)** and commented  IncorrectResultSizeDataAccessException currently accepts one value for its expected size parameter.  Occasionally there are cases where the expected result size from a query is not a single value, but a range of values.  For example, I may run a query that should always return 0, 1, or 2 results.  When the query does not return a result set of one of these sizes I want to flag this with an IncorrectResultSizeDataAccessException with an error message that encompasses all 3 acceptable size values.    ---  **Affects:** 1.2.6  **Attachments:** - [int_array_patch.txt](https://jira.spring.io/secure/attachment/11295/int_array_patch.txt) (_3.45 kB_)","closed","type: enhancement,","spring-projects-issues","2005-12-02T03:13:45Z","2012-06-19T09:37:39Z"
"","6029","Errors.getFieldErrors() is needed very often (without arguments) [SPR-1329]","**[Elijah Epifanov](https://jira.spring.io/secure/ViewProfile.jspa?name=xmart)** opened **[SPR-1329](https://jira.spring.io/browse/SPR-1329?redirect=false)** and commented  Look at this code:  \                                    ${error}                         ${error}                            \  This is how I thought it would work:( Why should I specify a field when trying to get only field errors? getAllErrors() allows me not to specify any field, but it returns object errors along with field ones.  This feature is really needed very often.   ---  **Affects:** 1.2.4","closed","type: enhancement,","spring-projects-issues","2005-09-27T18:12:49Z","2012-06-19T03:54:14Z"
"","6488","Can't use aop:spring-configured and aop:aspectj-autoproxy together [SPR-1794]","**[Egor Azanov](https://jira.spring.io/secure/ViewProfile.jspa?name=krondix)** opened **[SPR-1794](https://jira.spring.io/browse/SPR-1794?redirect=false)** and commented  See forum topic http://forum.springframework.org/showthread.php?t=22048  The problem is that AspectJAutoProxyCreator is trying to create an Spring AOP proxy for the AnnotationBeanConfigurerAspect which use unsupported AspectJ primitive 'initialization'.  Possible solution: there should be the way to specify which aspects should not be processed by AspectJAutoProxyCreator.   ---  **Affects:** 2.0 M3  3 votes, 1 watchers","closed","in: core,","spring-projects-issues","2006-03-15T18:40:21Z","2019-01-11T22:08:04Z"
"","6778","util:constant cannot be used in lists [SPR-2086]","**[Edwin Park](https://jira.spring.io/secure/ViewProfile.jspa?name=esp)** opened **[SPR-2086](https://jira.spring.io/browse/SPR-2086?redirect=false)** and commented  I've been trying out the new Spring 2.0M4 XSD stuff, and I'm running into a problem. I tried converting a bean from the old-style FieldRetrievingFactoryBean to the new util:constant and it seems to be giving me an error because the constant is in a list.  converted:  \ \ \ \ \ \ \  to:  \ \ \ \ \ \ \  Surrounding the  in \\ doesn't work either. Note that the error I am getting is in Eclipse using the Spring IDE 1.3.0.  It feels like this may be an oversight in the XSD such that it isn't taking into account constants being placed in lists..?   ---  **Affects:** 2.0 M4","closed","in: core,","spring-projects-issues","2006-05-31T21:06:56Z","2019-01-11T18:16:31Z"
"","6072","Enable subclasses of AbstractDependencyInjectionSpringContextTests to override autowiring strategy [SPR-1372]","**[Edmon Begoli](https://jira.spring.io/secure/ViewProfile.jspa?name=ebegoli)** opened **[SPR-1372](https://jira.spring.io/browse/SPR-1372?redirect=false)** and commented  Line 136 of org.springframework.test.AbstractDependencyInjectionSpringContextTests defines the autowiring method for the dependency injection of beans:  this.applicationContext.getBeanFactory().autowireBeanProperties( this, AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE, isDependencyCheck());  This is fine in most of the cases, but if I want to test MVC Controllers in the transactional context this poses an issue because they are all of the same types. I would suggest a small change to this code that would involve calling the method that provides the autowiring strategy instead of hardcoding it. That way we could override this method in sub-classes if needed  So the modified line would be:  this.applicationContext.getBeanFactory().autowireBeanProperties( this, this.getAutowiringStrategy(), isDependencyCheck());  and the method would be defined as:  protected int getAutowiringStrategy(){  return AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE;  }   ---  **Affects:** 1.2.3","closed","type: enhancement,","spring-projects-issues","2005-10-12T01:03:09Z","2012-06-19T03:54:30Z"
"","6005","override JRExporterParameter defined declaratively with the model [SPR-1304]","**[edgar poce](https://jira.spring.io/secure/ViewProfile.jspa?name=edgarpoce)** opened **[SPR-1304](https://jira.spring.io/browse/SPR-1304?redirect=false)** and commented  I'm trying jasperreports view and I can't find how to pass a JRExporterParameter from my controller. I found that it's possible to set it declaratively, but i'd like the user to be able to set it through a form.   ---  **Affects:** 1.2.4  **Attachments:** - [05-09-15-jasperreports.patch](https://jira.spring.io/secure/attachment/11149/05-09-15-jasperreports.patch) (_1.27 kB_)","closed","type: enhancement,","spring-projects-issues","2005-09-15T07:34:07Z","2012-06-19T03:53:55Z"
"","6293","Resource classpath order lost when using ""classpath*"" prefix [SPR-1596]","**[Ed Ward](https://jira.spring.io/secure/ViewProfile.jspa?name=ed_ward)** opened **[SPR-1596](https://jira.spring.io/browse/SPR-1596?redirect=false)** and commented  The method ""PathMatchingResourcePatternResolver.findAllClassPathResources(String)"" uses a Set to filter out duplicate resources before returning the collection as a Resource[]. This may result in a change to the original order the resources were returned from the ClassLoader.getResources(String).  Preserving the original Resource classpath order would be especially useful since it would allow bean definitions to be overridden, which can be useful when running tests.   ---  **Affects:** 1.2.6, 2.0 M1  **Attachments:** - [PathMatchingResourcePatternResolver.patch](https://jira.spring.io/secure/attachment/11379/PathMatchingResourcePatternResolver.patch) (_521 bytes_)","closed","in: core,","spring-projects-issues","2006-01-05T23:17:14Z","2019-01-11T21:37:55Z"
"","6252","Add overloaded methods to HibernateTemplate for paging support [SPR-1554]","**[Ed Wallen](https://jira.spring.io/secure/ViewProfile.jspa?name=ewallen)** opened **[SPR-1554](https://jira.spring.io/browse/SPR-1554?redirect=false)** and commented  I would like to request that the finder methods on org.springframework.orm.hibernate3.HibernateTemplate that do not already support paging be overloaded to add pagination parameters.  For example, here is an overloaded implementation of findByNamedQuery:      public List findByNamedQuery(final String queryName,                                  final Object[] values,                                  final int firstResult,                                  final int maxResults)             throws DataAccessException {          	return (List) execute(new HibernateCallback() {     		public Object doInHibernate(Session session) throws HibernateException {     			Query queryObject = session.getNamedQuery(queryName);     			queryObject.setFirstResult(firstResult);     			queryObject.setMaxResults(maxResults);     			prepareQuery(queryObject);     			if (values != null) {     				for (int i = 0; i < values.length; i++) {     					queryObject.setParameter(i, values[i]);     				}     			}     			return queryObject.list();     		}     	}, true);     }  In order to support this for my current project, I have extended HibernateTemplate, provided the implementation seen above, and wired my DAOs with my PagingHibernateTemplate implemenation.  This should be a very easy feature to add and save implementors the trouble of having to create a custom HibernateTemplate extension to support this.   ---  **Affects:** 1.2.6  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2005-12-20T02:18:37Z","2019-01-11T21:33:19Z"
"","6211","Test of case creation -- please ignore [SPR-1512]","**[Don Wise](https://jira.spring.io/secure/ViewProfile.jspa?name=dwise)** opened **[SPR-1512](https://jira.spring.io/browse/SPR-1512?redirect=false)** and commented  This is a test of case creation, in preparation for BEA Support.  You can close this issue as soon as it is received. Thanks,  - Don Wise, BEA Support   ---  **Affects:** 1.2.5  1 votes, 0 watchers","closed","","spring-projects-issues","2005-12-02T12:28:24Z","2019-01-11T21:30:50Z"
"","6281","PortletBean: init-param binding is not lenient [SPR-1584]","**[Dmitry Sklyut](https://jira.spring.io/secure/ViewProfile.jspa?name=dsklyut)** opened **[SPR-1584](https://jira.spring.io/browse/SPR-1584?redirect=false)** and commented  PortletBean.init method will fail if any init property is invalid/unknown property for the portlet.  The problem is in PortletBean.init method:  bw.setPropertyValues(pvs);  should be changed to  bw.setPropertyValues(pvs,true);  This will match HttpServletBean Revision 1.11 - (view) (download) (annotate) - [select for diffs] Tue Dec 28 23:10:36 2004 UTC (12 months ago) by jhoeller Branch: MAIN CVS Tags: release-1-1-5, release-1-1-4 Changes since 1.10: +24 -13 lines Diff to previous 1.10 ignore unknown init-params that do not correspond to bean properties   ---  **Affects:** 2.0 M1","closed","type: bug,","spring-projects-issues","2005-12-30T08:37:55Z","2012-06-19T03:54:32Z"
"","6513","When HibernateTransactionManager rollbacks (in case of exception) it ""corrupts"" the Session [SPR-1819]","**[Dmitri](https://jira.spring.io/secure/ViewProfile.jspa?name=dimitri-z)** opened **[SPR-1819](https://jira.spring.io/browse/SPR-1819?redirect=false)** and commented  Calls to hibernate Session methods fail after a rollback has occured. In the following code the last statement will throw org.hibernate.MappingException: Unknown entity: test.TestVO.  [code] Session session = this.sessionFactory.getCurrentSession(); TestVO testVO = (TestVO)session.load(""test"", new Long(1)); try  { TransactionTemplate transactionTemplate = new TransactionTemplate(this.transactionManager);        transactionTemplate.execute         (new TransactionCallbackWithoutResult() {           public void doInTransactionWithoutResult(TransactionStatus status) {                  // some logic here             throw new RuntimeException(""Some kind of runtime exception"");                }});     }     finally     {         session.lock(testVO, LockMode.NONE);   // throws org.hibernate.MappingException     }  [/code]  The same thing happens in case of declarative transaction demarcation. (In both cases if no exception thrown, transaction commits and the session is okay.)  I've set up a small test application:  test.xml:  [code]  \ \ \ \ \ \ \ \ \ \ \ \Test.hbm.xml\ \ \ \ \ \org.hibernate.dialect.Oracle9Dialect\ \true\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \hibernateInterceptor\ \ \ \  \ [/code]  Test.hbm.xml:  [code]  \ \ \ \                      test_seq                        \ \ [/code]  Service.java:  [code] package test;  public interface Service { void doSmth(); } [/code]  ServiceImpl.java:  [code] package test;  import org.hibernate.SessionFactory; import org.hibernate.Session; import org.hibernate.LockMode; import org.springframework.transaction.PlatformTransactionManager; import org.springframework.transaction.TransactionStatus; import org.springframework.transaction.support.TransactionTemplate; import org.springframework.transaction.support.TransactionCallback; import org.springframework.transaction.support.TransactionCallbackWithoutResult;  public class ServiceImpl implements Service { private PlatformTransactionManager transactionManager; public void setTransactionManager(PlatformTransactionManager transactionManager) { this.transactionManager = transactionManager; }  private SessionFactory sessionFactory; public void setSessionFactory(SessionFactory sessionFactory) { this.sessionFactory = sessionFactory; }  public void doSmth() { final Session session = this.sessionFactory.getCurrentSession();      final TestVO testVO = (TestVO)session.load(""test"", new Long(1));          session.lock(testVO, LockMode.NONE);     System.out.println(""-----------> The first session.lock() is okay"");          try     {       TransactionTemplate transactionTemplate = new TransactionTemplate(this.transactionManager);            transactionTemplate.execute         (new TransactionCallbackWithoutResult() {           public void doInTransactionWithoutResult(TransactionStatus status) {                  session.lock(testVO, LockMode.NONE);             System.out.println(""-----------> The second session.lock() is okay"");                  throw new RuntimeException(""Some kind of runtime exception inside the transaction"");                }         });     }     finally     {       System.out.println(""-----------> Just before the third session.lock()..."");       try       {         session.lock(testVO, LockMode.NONE);         System.out.println(""-----------> The third session.lock() is okay""); // this statement won't get executed       }       catch (RuntimeException re)       {         System.out.println(""-----------> The third session.lock() failed with the following exception:"");         re.printStackTrace();       }     }  } } [/code]  log4.properties:  [code] log4j.rootLogger=INFO, stdout log4j.logger.org.hibernate.SQL=DEBUG log4j.logger.org.hibernate.transaction=DEBUG log4j.logger.org.springframework.transaction=DEBUG log4j.logger.org.springframework.orm=DEBUG [/code]  output log:  [code] 17:29:47,718  INFO HibernateTransactionManager:396 - Using DataSource [jdbc:oracle:thin:@192.168.0.1:1521:SID] of Hibernate SessionFactory for HibernateTransactionManager 17:29:47,734  INFO ContextLoader:189 - Using context class [org.springframework.web.context.support.XmlWebApplicationContext] for root WebApplicationContext 17:29:47,734  INFO ContextLoader:199 - Root WebApplicationContext: initialization completed in 1219 ms 17:29:56,109 DEBUG SessionFactoryUtils:329 - Opening Hibernate Session 17:29:56,109 DEBUG TransactionSynchronizationManager:162 - Bound value [org.springframework.orm.hibernate3.SessionHolder@1fb24d3] for key [org.hibernate.impl.SessionFactoryImpl@12ea1dd] to thread [HttpRequestHandler-14518777] 17:29:56,109 DEBUG TransactionSynchronizationManager:137 - Retrieved value [org.springframework.orm.hibernate3.SessionHolder@1fb24d3] for key [org.hibernate.impl.SessionFactoryImpl@12ea1dd] bound to thread [HttpRequestHandler-14518777] 17:29:56,171 DEBUG SQL:346 - select test0_.ID as ID6_0_, test0_.TS as TS6_0_, test0_.TEXT as TEXT6_0_, test0_.rowid as rowid_0_ from TEST_TABLE test0_ where test0_.ID=? 06/03/25 17:29:56 -----------> The first session.lock() is okay 17:29:56,187 DEBUG TransactionSynchronizationManager:137 - Retrieved value [org.springframework.orm.hibernate3.SessionHolder@1fb24d3] for key [org.hibernate.impl.SessionFactoryImpl@12ea1dd] bound to thread [HttpRequestHandler-14518777] 17:29:56,187 DEBUG HibernateTransactionManager:413 - Found thread-bound Session [org.hibernate.impl.SessionImpl@725967] for Hibernate transaction 17:29:56,187 DEBUG HibernateTransactionManager:254 - Using transaction object [org.springframework.orm.hibernate3.HibernateTransactionManager$HibernateTransactionObject@14ba9a2] 17:29:56,187 DEBUG HibernateTransactionManager:281 - Creating new transaction with name [null] 17:29:56,187 DEBUG HibernateTransactionManager:462 - Preparing JDBC Connection of Hibernate Session [org.hibernate.impl.SessionImpl@725967] 17:29:56,187 DEBUG JDBCTransaction:54 - begin 17:29:56,187 DEBUG JDBCTransaction:59 - current autocommit status: true 17:29:56,187 DEBUG JDBCTransaction:62 - disabling autocommit 17:29:56,187 DEBUG HibernateTransactionManager:534 - Exposing Hibernate transaction as JDBC transaction [oracle.jdbc.driver.T4CConnection@6dddcf] 17:29:56,187 DEBUG TransactionSynchronizationManager:162 - Bound value [org.springframework.jdbc.datasource.ConnectionHolder@fd4662] for key [jdbc:oracle:thin:@192.168.0.1:1521:SID] to thread [HttpRequestHandler-14518777] 17:29:56,187 DEBUG TransactionSynchronizationManager:214 - Initializing transaction synchronization 06/03/25 17:29:56 -----------> The second session.lock() is okay 17:29:56,203 DEBUG TransactionTemplate:137 - Initiating transaction rollback on application exception java.lang.RuntimeException: Some kind of runtime exception inside the transaction at test.ServiceImpl$1.doInTransactionWithoutResult(ServiceImpl.java:49) at org.springframework.transaction.support.TransactionCallbackWithoutResult.doInTransaction(TransactionCallbackWithoutResult.java:33) at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:114) at test.ServiceImpl.doSmth(ServiceImpl.java:42) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:287) at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:181) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:148) at org.springframework.orm.hibernate3.HibernateInterceptor.invoke(HibernateInterceptor.java:97) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:170) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:176) at $Proxy10.doSmth(Unknown Source) at test.TestServlet.service(TestServlet.java:38) at javax.servlet.http.HttpServlet.service(HttpServlet.java:853) ................... 17:29:56,203 DEBUG HibernateTransactionManager:673 - Triggering beforeCompletion synchronization 17:29:56,203 DEBUG HibernateTransactionManager:581 - Initiating transaction rollback 17:29:56,203 DEBUG HibernateTransactionManager:599 - Rolling back Hibernate transaction on Session [org.hibernate.impl.SessionImpl@725967] 17:29:56,203 DEBUG JDBCTransaction:152 - rollback 17:29:56,203 DEBUG JDBCTransaction:193 - re-enabling autocommit 17:29:56,203 DEBUG JDBCTransaction:163 - rolled back JDBC Connection 17:29:56,203 DEBUG HibernateTransactionManager:697 - Triggering afterCompletion synchronization 17:29:56,203 DEBUG TransactionSynchronizationManager:265 - Clearing transaction synchronization 17:29:56,203 DEBUG TransactionSynchronizationManager:185 - Removed value [org.springframework.jdbc.datasource.ConnectionHolder@fd4662] for key [jdbc:oracle:thin:@192.168.0.1:1521:SID] from thread [HttpRequestHandler-14518777] 17:29:56,203 DEBUG HibernateTransactionManager:666 - Not closing pre-bound Hibernate Session [org.hibernate.impl.SessionImpl@725967] after transaction 06/03/25 17:29:56 -----------> Just before the third session.lock()... 06/03/25 17:29:56 -----------> The third session.lock() failed with the following exception: org.hibernate.MappingException: Unknown entity: test.TestVO at org.hibernate.impl.SessionFactoryImpl.getEntityPersister(SessionFactoryImpl.java:513) at org.hibernate.impl.SessionImpl.getEntityPersister(SessionImpl.java:1321) at org.hibernate.event.def.DefaultLockEventListener.onLock(DefaultLockEventListener.java:50) at org.hibernate.impl.SessionImpl.fireLock(SessionImpl.java:608) at org.hibernate.impl.SessionImpl.lock(SessionImpl.java:600) at test.ServiceImpl.doSmth(ServiceImpl.java:59) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:287) at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:181) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:148) at org.springframework.orm.hibernate3.HibernateInterceptor.invoke(HibernateInterceptor.java:97) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:170) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:176) at $Proxy10.doSmth(Unknown Source) at test.TestServlet.service(TestServlet.java:38) at javax.servlet.http.HttpServlet.service(HttpServlet.java:853) ................... [/code]   ---  **Affects:** 1.2.7  **Attachments:** - [log.txt](https://jira.spring.io/secure/attachment/11524/log.txt) (_7.14 kB_) - [test.war](https://jira.spring.io/secure/attachment/11523/test.war) (_7.76 kB_)","closed","status: declined,","spring-projects-issues","2006-03-25T01:12:08Z","2019-01-12T16:29:28Z"
"","5909","Transaction suspend does not delist resources on JBoss [SPR-1206]","**[Dmitri Maximovich](https://jira.spring.io/secure/ViewProfile.jspa?name=maximdim)** opened **[SPR-1206](https://jira.spring.io/browse/SPR-1206?redirect=false)** and commented  Spring's TransactionProxies behavi inconsistent under WebLogic and JBoss. See attached sources for deatils and test case (SpringTxTest).  Here is a brief explanation of use case:  - XA DataSource created in App server - JtaTransactionManager defined in Spring context - BeanA and BeanB deployed with PROPAGATION_REQUIRES_NEW - BeanA has DataSource and BeanB injected - BeanA creates JDBC Connection from XA DataSource, executes insert into table and calls BeanB passing Connection as parameter of the call - BeanB, using Connection passed, executes inserts into (same) table (this is supposed to happen in new transaction) - BeanB throws RuntimeException (Spring is supposed to rollback BeanB's transaction) - BeanA catches runtime exception from BeanB and ignoring it (so BeanA transaction supposed to finish successully)  Expected result: Table has 1 record in it after test run. Result under WebLogic: 1 record. Result under JBoss: 2 records.  No errors in log files, Spring saying that transaction is rolled back:  ---  [txsuspend.spring.BeanA] A: test() begin [org.springframework.transaction.interceptor.TransactionInterceptor] Getting transaction for txsuspend.spring.IBeanB.test [org.springframework.transaction.jta.JtaTransactionManager] Using transaction object [org.springframework.transaction.jta.JtaTransactionObject@239525] [org.springframework.transaction.jta.JtaTransactionManager] Creating new transaction, suspending current one [org.springframework.transaction.jta.JtaTransactionManager] Suspending JTA transaction [org.springframework.transaction.support.TransactionSynchronizationManager] Clearing transaction synchronization [org.springframework.transaction.jta.JtaTransactionManager] Beginning JTA transaction [org.springframework.transaction.support.TransactionSynchronizationManager] Initializing transaction synchronization [txsuspend.spring.BeanB] B: test() begin [txsuspend.spring.BeanB] Throwing exception from B [org.springframework.transaction.interceptor.RuleBasedTransactionAttribute] Applying rules to determine whether transaction should rollback on java.lang.RuntimeException: test from B [org.springframework.transaction.interceptor.RuleBasedTransactionAttribute] Winning rollback rule is: null [org.springframework.transaction.interceptor.RuleBasedTransactionAttribute] No relevant rollback rule found: applying superclass default [org.springframework.transaction.interceptor.TransactionInterceptor] Invoking rollback for transaction on txsuspend.spring.IBeanB.test due to throwable [java.lang.RuntimeException: test from B] [org.springframework.transaction.jta.JtaTransactionManager] Triggering beforeCompletion synchronization [org.springframework.transaction.jta.JtaTransactionManager] Initiating transaction rollback [org.springframework.transaction.jta.JtaTransactionManager] Rolling back JTA transaction [org.springframework.transaction.jta.JtaTransactionManager] Triggering afterCompletion synchronization [org.springframework.transaction.support.TransactionSynchronizationManager] Clearing transaction synchronization [org.springframework.transaction.jta.JtaTransactionManager] Resuming suspended transaction [org.springframework.transaction.support.TransactionSynchronizationManager] Initializing transaction synchronization [org.springframework.transaction.jta.JtaTransactionManager] Resuming JTA transaction [txsuspend.spring.BeanA] Exception from BeanB cached, ignoring [txsuspend.spring.BeanA] A: test() done [org.springframework.transaction.interceptor.TransactionInterceptor] Invoking commit for transaction on txsuspend.spring.IBeanA.test [org.springframework.transaction.jta.JtaTransactionManager] Triggering beforeCommit synchronization [org.springframework.transaction.jta.JtaTransactionManager] Triggering beforeCompletion synchronization [org.springframework.transaction.jta.JtaTransactionManager] Initiating transaction commit [org.springframework.transaction.jta.JtaTransactionManager] Committing JTA transaction [org.springframework.transaction.jta.JtaTransactionManager] Triggering afterCompletion synchronization [org.springframework.transaction.support.TransactionSynchronizationManager] Clearing transaction synchronization  ---  ---  **Affects:** 1.2.3  **Attachments:** - [applicationContext.xml](https://jira.spring.io/secure/attachment/11031/applicationContext.xml) (_1.64 kB_) - [BeanA.java](https://jira.spring.io/secure/attachment/11025/BeanA.java) (_1.09 kB_) - [BeanB.java](https://jira.spring.io/secure/attachment/11026/BeanB.java) (_756 bytes_) - [Constants.java](https://jira.spring.io/secure/attachment/11027/Constants.java) (_155 bytes_) - [IBeanA.java](https://jira.spring.io/secure/attachment/11028/IBeanA.java) (_84 bytes_) - [IBeanB.java](https://jira.spring.io/secure/attachment/11029/IBeanB.java) (_136 bytes_) - [Something.java](https://jira.spring.io/secure/attachment/11030/Something.java) (_606 bytes_) - [SpringTxTest.java](https://jira.spring.io/secure/attachment/11032/SpringTxTest.java) (_2.18 kB_)","closed","status: declined,","spring-projects-issues","2005-08-05T05:52:43Z","2019-01-13T22:51:00Z"
"","6290","Constraint information in DataIntegrityViolationException [SPR-1593]","**[Dimitry Voytenko](https://jira.spring.io/secure/ViewProfile.jspa?name=dvoytenko)** opened **[SPR-1593](https://jira.spring.io/browse/SPR-1593?redirect=false)** and commented  Would this be feasible to add constraint information to the DataIntegrityViolationException when applicable? In case of database this could be a name of the foreign or other constraint, but this information can also be applicable for non-database resources. This could simplify exception resolution for some application types.   --- No further details from [SPR-1593](https://jira.spring.io/browse/SPR-1593?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-01-05T06:36:39Z","2006-02-22T08:04:24Z"
"","6334","Bean loading works differently with a wildcard  [SPR-1637]","**[Derek Hulley](https://jira.spring.io/secure/ViewProfile.jspa?name=derekhulley)** opened **[SPR-1637](https://jira.spring.io/browse/SPR-1637?redirect=false)** and commented  A practical example of performing imports in application-context.xml \ \  In path/A.xml: \ ... \  In path/B.xml: \  Now, starting an application context with new ClassPathXmlApplicationContext(""classpath:application-context.xml""); is successfull.  But, if I change application-context.xml to be: \ then the order of the import is A.xml and then B.xml, except the following error occurs: Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'abstractBean' is defined.  The behaviour therefore changes depending on whether there is a wildcard in the import or not.    ---  **Affects:** 1.2.6","closed","in: core,","spring-projects-issues","2006-01-22T20:59:45Z","2019-01-11T21:27:26Z"
"","6321","in XML application context should be optional [SPR-1624]","**[Derek Hulley](https://jira.spring.io/secure/ViewProfile.jspa?name=derekhulley)** opened **[SPR-1624](https://jira.spring.io/browse/SPR-1624?redirect=false)** and commented  In the XML application context, the ability to specify \ is very good.  Unfortunately, what is missing is the ability to have this as optional.  The use case being that there is no ${user.config} system property defined and therefore the context initialization fails.  \ would be nice. This requires a change to DefaultXmlBeanDefinitionParser and a modification to the dtd. I am attaching a patch for the java, but the dtd will need to be updated as well.   ---  **Affects:** 1.2.6  **Attachments:** - [DefaultXmlBeanDefinitionParser.java](https://jira.spring.io/secure/attachment/11393/DefaultXmlBeanDefinitionParser.java) (_35.00 kB_) - [DefaultXmlBeanDefinitionParser.java.patch](https://jira.spring.io/secure/attachment/11394/DefaultXmlBeanDefinitionParser.java.patch) (_1.78 kB_)  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2006-01-18T03:18:49Z","2014-01-03T11:41:26Z"
"","6088","TransactionSynchronizationManager#registerSynchronization is inefficient [SPR-1388]","**[Derek Hulley](https://jira.spring.io/secure/ViewProfile.jspa?name=derekhulley)** opened **[SPR-1388](https://jira.spring.io/browse/SPR-1388?redirect=false)** and commented  The eager sorting of the registered synchronizations is inefficient.  The sort is only required before returning the result of getSynchronizations().  If a long-running transaction is underway that relies on thousands of resources registering for callbacks, the bottleneck for the transaction can quickly become the Collections.sort call, which is unnecessary until callbacks are actually made.  Using a fast sorted set might also be a solution.  It would also be nice to be able to remove a synchronization, but this is not as important as having the registration process be as fast as possible.   ---  **Affects:** 1.2.5  **Attachments:** - [TransactionSynchronizationManager.java.patch](https://jira.spring.io/secure/attachment/11210/TransactionSynchronizationManager.java.patch) (_209 bytes_)","closed","type: enhancement,","spring-projects-issues","2005-10-18T01:23:02Z","2012-06-19T03:54:03Z"
"","6804","Tags described in spring-form.tld could expose htmlEscape attribute [SPR-2112]","**[Derek Alexander](https://jira.spring.io/secure/ViewProfile.jspa?name=derek)** opened **[SPR-2112](https://jira.spring.io/browse/SPR-2112?redirect=false)** and commented  Although all the Spring form tags are subclasses of org.springframework.web.servlet.tags.HtmlEscapingAwareTag and thus have an htmlEscape propery, this property is not exposed as an attribute for any of these tags in the spring-form.tld  Exposing the htmlEscape attribute for each of these tags would allow this property to be easily configured on a per form element basis.  Would require adding this to each tag element in spring-form.tld               htmlEscape         false         true                Could create a patch if this is agreed to, although I'm not sure what the text for the \ element ought to be.    ---  **Affects:** 2.0 M5","closed","type: enhancement,","spring-projects-issues","2006-06-06T20:22:29Z","2012-06-19T03:52:46Z"
"","6492","JamonPerformanceMonitorInterceptor logger.trace() without isTraceEnabled() [SPR-1798]","**[Dejan Predovic](https://jira.spring.io/secure/ViewProfile.jspa?name=dpredovic)** opened **[SPR-1798](https://jira.spring.io/browse/SPR-1798?redirect=false)** and commented  JamonPerformanceMonitorInterceptor can be very useful for generating performance summaries, even when log tracing itself is turned off. It would be nice to put isTraceEnabled() around logger.trace() to minimize performance impact of (non-trivial) Monitor.toString() for such cases.   ---  **Affects:** 1.2.7, 2.0 M3","closed","type: enhancement,","spring-projects-issues","2006-03-16T18:24:15Z","2012-06-19T03:54:26Z"
"","6540","Extend SimpleUrlHanlderMapping to accept list of mappings in separate beans [SPR-1846]","**[Davor Cengija](https://jira.spring.io/secure/ViewProfile.jspa?name=dcengija)** opened **[SPR-1846](https://jira.spring.io/browse/SPR-1846?redirect=false)** and commented  We often have the need for more than one mappings bean, e.g. in different included context files. That way we can have different developers working on the same project without touching each others context files (and avoiding cvs conflicts).  This simple class introduces a list of references to beans with additional mappings.  I extended SimpleUrlHandlerMapping, but this feature would probably fit better in that class, to avoid copy/paste. E.g. in initApplicationContext() call urlMap.putAll() on each element in additionalMappings list and then continue with calling registerHandler(url, handler) etc. Or change urlMap to protected.  I'm attaching extended class and sample config files, taken from Countries sample in Spring distribution.  For additional details see http://forum.springframework.org/showthread.php?p=56453   ---  **Affects:** 1.2.7  **Attachments:** - [countries-servlet.xml](https://jira.spring.io/secure/attachment/11542/countries-servlet.xml) (_5.43 kB_) - [MultiMapSimpleUrlHandlerMapping.java](https://jira.spring.io/secure/attachment/11540/MultiMapSimpleUrlHandlerMapping.java) (_1.47 kB_) - [prop1.xml](https://jira.spring.io/secure/attachment/11543/prop1.xml) (_464 bytes_) - [prop2.xml](https://jira.spring.io/secure/attachment/11544/prop2.xml) (_467 bytes_)","closed","type: enhancement,","spring-projects-issues","2006-03-31T08:16:36Z","2012-06-19T09:37:45Z"
"","6017","OracleLobHandler + WebSphereNativeJdbcExtractor doesn't work on Websphere 6 [SPR-1317]","**[Davor Cengija](https://jira.spring.io/secure/ViewProfile.jspa?name=dcengija)** opened **[SPR-1317](https://jira.spring.io/browse/SPR-1317?redirect=false)** and commented  Hi,      we are developing application on Websphere 6 with Oracle 9i database. Some LOBs are saved to database using Hibernate 3. We are using Websphere datasource so we need to use WebSphereNativeJdbcExtractor which causes us problems.  Our configuration:  \ \ \ \ \ \ \ \ \ ...  When LOB object is about to be saved exception is thrown:  org.springframework.dao.DataAccessResourceFailureException: Could not create Oracle LOB; nested exception is org.springframework.dao.InvalidDataAccessApiUsageException: OracleLobCreator needs to work on [oracle.jdbc.OracleConnection], not on [class oracle.jdbc.driver.OracleConnection] - specify a corresponding NativeJdbcExtractor org.springframework.dao.InvalidDataAccessApiUsageException: OracleLobCreator needs to work on [oracle.jdbc.OracleConnection], not on [class oracle.jdbc.driver.OracleConnection] - specify a corresponding NativeJdbcExtractor at org.springframework.jdbc.support.lob.OracleLobHandler$OracleLobCreator.getOracleConnection(OracleLobHandler.java:360) at org.springframework.jdbc.support.lob.OracleLobHandler$OracleLobCreator.createLob(OracleLobHandler.java:328)  return in code below from WebSphereNativeJdbcExtractor returned connection is type of oracle.jdbc.driver.OracleConnection instead of oracle.jdbc.OracleConnection /** * Retrieve the Connection via WebSphere's \getNativeConnection\ method.   */   protected Connection doGetNativeConnection(Connection con) throws SQLException {   // WebSphere 5 connection?   if (this.webSphere5ConnectionClass != null &&   this.webSphere5ConnectionClass.isAssignableFrom(con.getClass())) {   try {   // WebSphere 5's WSJdbcUtil.getNativeConnection(wsJdbcConnection)   return (Connection) this.webSphere5NativeConnectionMethod.invoke(null, new Object[] {con});   }  So in org.springframework.jdbc.support.lob.OracleLobHandler in getOracleConnection() conToUse is type of oracle.jdbc.driver.OracleConnection (implements java.sql.Connection) and connectionClass is oracle.jdbc.OracleConnection type. Because of that, exception is throwned (as specified in getOracleConnection()). We are using ojdbc14.jar for database connection.  We hope that you will do some testing on Websphere 6 to resolve this problem.   ---  **Affects:** 1.2.4","closed","type: bug,","spring-projects-issues","2005-09-22T01:28:33Z","2012-06-19T03:53:58Z"
"","6288","Incorrect management of BatchSqlUpdate constructor ""batchSize"" param. [SPR-1591]","**[Davide Baroncelli](https://jira.spring.io/secure/ViewProfile.jspa?name=baroncelli)** opened **[SPR-1591](https://jira.spring.io/browse/SPR-1591?redirect=false)** and commented  The following constructor  public BatchSqlUpdate(DataSource ds, String sql, int[] types, int batchSize) { super(ds, sql, types, batchSize); }  delegates the ""batchSize"" param to super, where it is interpreted as follows:      public SqlUpdate(DataSource ds, String sql, int[] types, int maxRowsAffected) {     	setDataSource(ds);     	setSql(sql);     	setTypes(types);     	this.maxRowsAffected = maxRowsAffected;     }  it seems to me the correct version is:  public BatchSqlUpdate(DataSource ds, String sql, int[] types, int batchSize) { this(ds, sql, types ); setBatchSize( batchSize ); }   ---  **Affects:** 1.2.6","closed","type: bug,","spring-projects-issues","2006-01-05T03:17:31Z","2012-06-19T03:54:22Z"
"","6349","DispatcherPortlet.render method with 'Could not resolve view with name' message when ModelAndView passed is not reference [SPR-1652]","**[david wilson](https://jira.spring.io/secure/ViewProfile.jspa?name=telebanking)** opened **[SPR-1652](https://jira.spring.io/browse/SPR-1652?redirect=false)** and commented  My render method is returning a resolved View object in the model and view returned to the dispatcher portlet.  However I always get the message 'Could not resolve view with name ...'.  The problem seems to be that the code in the render method does not set the local variable 'view' to the view object returned from the mv.getView() call in the code block executed when the ModelAndView is not a reference value.  I added the line 'view = (View)viewObject;' at the end of the code block and all seems ok.    ---  **Affects:** 2.0 M1","closed","type: bug,","spring-projects-issues","2006-01-31T00:16:10Z","2012-06-19T03:54:09Z"
"","6021","Can't build with Ant - Junit missing [SPR-1321]","**[David Williams](https://jira.spring.io/secure/ViewProfile.jspa?name=majestic99)** opened **[SPR-1321](https://jira.spring.io/browse/SPR-1321?redirect=false)** and commented  ant tests  Won't build problem with junit   ---  **Affects:** 1.2.4  **Attachments:** - [spring.jpg](https://jira.spring.io/secure/attachment/11162/spring.jpg) (_92.72 kB_)","closed","","spring-projects-issues","2005-09-23T03:06:11Z","2019-01-11T21:18:11Z"
"","6246","hibernate schema export is not called properly in close method of org.springframework.orm.hibernate3.LocalSessionFactoryBean [SPR-1547]","**[David Sissoko](https://jira.spring.io/secure/ViewProfile.jspa?name=dsissoko)** opened **[SPR-1547](https://jira.spring.io/browse/SPR-1547?redirect=false)** and commented  I try to setup junit test with spring 1.2.6 and hibernate 3.05. When the test ends up, it should drop the whole schema because hbm2ddl.auto=create-drop is set The schema is created at applicationContext creation in the setup method. The schema should be deleted at applicationContext closing but instead it throws an exception:  2005-12-19 19:18:33,054 DEBUG [org.springframework.beans.factory.support.DefaultListableBeanFactory] -  2005-12-19 19:18:33,054 DEBUG [org.springframework.beans.factory.support.DefaultListableBeanFactory] -  2005-12-19 19:18:33,054 INFO [org.springframework.orm.hibernate3.LocalSessionFactoryBean] - \ 2005-12-19 19:18:33,054 INFO [org.hibernate.impl.SessionFactoryImpl] - \ 2005-12-19 19:18:33,054 INFO [org.hibernate.tool.hbm2ddl.SchemaExport] - \ 2005-12-19 19:18:33,054 INFO [org.hibernate.tool.hbm2ddl.SchemaExport] - \ 2005-12-19 19:18:33,054 INFO [org.hibernate.connection.ConnectionProviderFactory] - \ 2005-12-19 19:18:33,054 ERROR [org.hibernate.tool.hbm2ddl.SchemaExport] - \ org.hibernate.HibernateException: No local DataSource found for configuration - dataSource property must be set on LocalSessionFactoryBean at org.springframework.orm.hibernate3.LocalDataSourceConnectionProvider.configure(LocalDataSourceConnectionProvider.java:48) at org.hibernate.connection.ConnectionProviderFactory.newConnectionProvider(ConnectionProviderFactory.java:80) at org.hibernate.tool.hbm2ddl.SchemaExport$ProviderConnectionHelper.getConnection(SchemaExport.java:431) at org.hibernate.tool.hbm2ddl.SchemaExport.execute(SchemaExport.java:130) at org.hibernate.tool.hbm2ddl.SchemaExport.drop(SchemaExport.java:108) at org.hibernate.impl.SessionFactoryImpl.close(SessionFactoryImpl.java:812) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) at java.lang.reflect.Method.invoke(Unknown Source) at org.springframework.orm.hibernate3.LocalSessionFactoryBean$TransactionAwareInvocationHandler.invoke(LocalSessionFactoryBean.java:1021) at $Proxy0.close(Unknown Source)  It seems that sessionfactory is closed before Running hbm2ddl schema export. So when schema export executes, no datasource is available.   ---  **Affects:** 1.2.6","closed","type: bug,","spring-projects-issues","2005-12-19T06:20:17Z","2012-06-19T03:53:55Z"
"","6414","MockHttpServletResponse.setContentType() does not alter the character encoding [SPR-1717]","**[David Rabinowitz](https://jira.spring.io/secure/ViewProfile.jspa?name=dav1d)** opened **[SPR-1717](https://jira.spring.io/browse/SPR-1717?redirect=false)** and commented  In the servlet specification it determines that HttpServletResponse.setContentType is called before getWriter() it should determine the encoding of the content (pending that a charset was set). In MockHttpServletResponse.setContentType() is just a trivial setter, and does not perform this task.  Here is a fix: private static final String CHARSET_STRING = ""charset=""; private static final int CHARSET_STRING_LENGTH = CHARSET_STRING.length();  public void setContentType(String contentType) { super.setContentType(contentType); int position = contentType.toLowerCase().indexOf(CHARSET_STRING); if(position != -1) { String encoding = contentType.substring(position + CHARSET_STRING_LENGTH); setCharacterEncoding(encoding);			 } }  Here is a test: public void testSetContentTypeWithNoEncoding() { MockHttpServletResponse response = new MmMockHttpServletResponse(); response.setContentType(""test/plain""); assertEquals(""Character encoding should be the default"", WebUtils.DEFAULT_CHARACTER_ENCODING, response .getCharacterEncoding()); }  public void testSetContentTypeWithUTF8() { MockHttpServletResponse response = new MmMockHttpServletResponse(); response.setContentType(""test/plain; charset=UTF-8""); assertEquals(""Character encoding should be 'UTF-8'"", ""UTF-8"", response .getCharacterEncoding()); }   ---  **Affects:** 1.2.6","closed","type: bug,","spring-projects-issues","2006-02-15T23:11:53Z","2012-06-19T03:53:58Z"
"","6306","Wrong translation of SQLException [SPR-1609]","**[David Rabinowitz](https://jira.spring.io/secure/ViewProfile.jspa?name=dav1d)** opened **[SPR-1609](https://jira.spring.io/browse/SPR-1609?redirect=false)** and commented  Using JdbcTemplate, I got a BadSqlGrammarException. Checking the sql, it worked on the databased (when executed directly). digging further, I found that the throws SQLException is permission denied (error code 42000) as I used a new table I forgot to add a permission to.  I think that this problem can either have its own PermissionDeniedSQLException, or at least map it to UncategorizedSQLException which will cause the developer to immediately check the SQLException.   ---  **Affects:** 1.2.6","closed","status: declined,","spring-projects-issues","2006-01-11T01:28:03Z","2019-01-12T16:29:41Z"
"","6649","Support beanFactory.getBean(Bar.class) signature to instantiate a bean. [SPR-1956]","**[David Medinets](https://jira.spring.io/secure/ViewProfile.jspa?name=medined)** opened **[SPR-1956](https://jira.spring.io/browse/SPR-1956?redirect=false)** and commented  Given a bean definition like this:  \ \\\ \  If the beanFactory.getBean(Bar.class) signature were supported (ie, added to the BeanFactory interface), it would be possible to do:  BarRepository barRepository = (BarRepository)beanFactory.getBean(BarRepository.class);  This syntax is better than getBean(""barRepository"") because the Java compiler verifies the class name is spelled correctly. While advanced IDEs (ie, Eclipse) support does handle class name verification, not all people will be using such an IDE.  It may or may not be a good idea to require the Class to actually be an interface to ensure that 'best practices' are followed.  ---  **Issue Links:** - #10200 Support BeanFactory#getBean(Class requiredType) (_**""duplicates""**_)  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2006-04-25T07:01:20Z","2019-01-11T22:21:25Z"
"","6565","Allow use of Fluent APIs with Spring Bean Configuration. [SPR-1871]","**[David Medinets](https://jira.spring.io/secure/ViewProfile.jspa?name=medined)** opened **[SPR-1871](https://jira.spring.io/browse/SPR-1871?redirect=false)** and commented  The Fluent API, among other things, uses setters that return an object instead of void. This style of coding is becoming more popular than previously as evidenced by the RIFE framework and by its being mentioned by Martin Fowler (http://www.martinfowler.com/bliki/FluentInterface.html). I have modified the BeanWrapperImpl class to handle non-void setters but I don't know if I've taken into account all of Spring's features (ie, my work might not be production-ready).  To make my change, add the following method to org.springframework.beans.BeanWrapperImpl.java:      public Method getWriteMethod(final String propertyName) {         Method writeMethod = null;         Class cls = getWrappedClass();         Method[] methods = cls.getDeclaredMethods();         for (int i = 0; i < methods.length; i++) {             if (Modifier.isPublic(methods[i].getModifiers())) {                 final String methodName = methods[i].getName();                 if (methodName.toUpperCase().equals(""SET"" + propertyName.toUpperCase())) {                     writeMethod = methods[i];                     break;                 }             }         }         return writeMethod;     }  Then change lines 686 to 696 from:      		PropertyDescriptor pd = getPropertyDescriptorInternal(propertyName);     		if (pd == null || pd.getWriteMethod() == null) {     			PropertyMatches matches = PropertyMatches.forProperty(propertyName, getRootClass());     			throw new NotWritablePropertyException(     					getRootClass(), this.nestedPath + propertyName,     					matches.buildErrorMessage(), matches.getPossibleMatches());     		}          		Method readMethod = pd.getReadMethod();     		Method writeMethod = pd.getWriteMethod();     		Object oldValue = null;  to              PropertyDescriptor pd = getPropertyDescriptorInternal(propertyName);             Method writeMethod = pd.getWriteMethod();             if (writeMethod == null) {                 writeMethod = getWriteMethod(propertyName);                 try {                     pd.setWriteMethod(writeMethod);                 } catch (IntrospectionException e) {     	    pd = null;                }             }             if (pd == null || writeMethod == null) {                 PropertyMatches matches = PropertyMatches.forProperty(propertyName, getRootClass());                 throw new NotWritablePropertyException(getRootClass(), this.nestedPath + propertyName, matches.buildErrorMessage(), matches.getPossibleMatches());             }                  Method readMethod = pd.getReadMethod();             Object oldValue = null;  -david   ---  **Affects:** 2.0 M3","closed","type: enhancement,","spring-projects-issues","2006-04-08T08:06:23Z","2012-06-19T03:18:58Z"
"","6456","Add support for generating Xml files via JasperReportsUtils [SPR-1770]","**[David Leal Valmaña](https://jira.spring.io/secure/ViewProfile.jspa?name=dleal)** opened **[SPR-1770](https://jira.spring.io/browse/SPR-1770?redirect=false)** and commented  Using Jasper Reports it is possible to generate XML files, just to suggest that this class provides the output format.  Thanks in advance,  David   ---  **Affects:** 1.2.7","closed","type: enhancement,","spring-projects-issues","2006-03-09T00:08:41Z","2012-06-19T09:37:28Z"
"","6459","Improve documentation on ObjectFactoryCreatingFactoryBean Javadoc [SPR-1761]","**[David Leal Valmaña](https://jira.spring.io/secure/ViewProfile.jspa?name=dleal)** opened **[SPR-1761](https://jira.spring.io/browse/SPR-1761?redirect=false)** and commented  Reading the API documentation about this class:  http://static.springframework.org/spring/docs/1.2.x/api/index.html  There is no mention about how to implement MyClientBean in order to really get the bean using the property myServiceFactory.  On the forum there is a discussion about this topic:  http://forum.springframework.org/showthread.php?t=16163  and there are two recomendations:  1) ObjectFactoryCreatingFactoryBean    http://www.springframework.org/docs/api/org/springframework/beans/factory/config/ObjectFactoryCreatingFactoryBean.html  2) ServiceLocatorFactoryBean (the javadoc documentation is on courier type letter, some \ was forgotten, is guess)    http://oldwww.springframework.org/docs/api_1.2/org/springframework/beans/factory/config/ServiceLocatorFactoryBean.html  but the API doesn't complete the solution for using them as factory creator pattern. Creating a factory pattern is obvious, but it is not so easy to create it using such spring classes on my opinion, probably a more explanation on javadoc classes would help.  Thanks,  David   ---  **Affects:** 1.2.7","closed","type: enhancement,","spring-projects-issues","2006-03-05T00:24:35Z","2012-06-19T03:54:18Z"
"","6533","Missing m2 POMs at ibiblio.net [SPR-1839]","**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=davidkarlsen)** opened **[SPR-1839](https://jira.spring.io/browse/SPR-1839?redirect=false)** and commented  The 1.2.7 release in the maven2 repository at ibiblio.net is missing POMs.  ---  **Affects:** 1.2.7  **Issue Links:** - #6183 Maven 2 support (POMs) (_**""duplicates""**_)  1 votes, 1 watchers","closed","type: task,","spring-projects-issues","2006-03-30T09:04:28Z","2019-01-11T22:02:18Z"
"","6071","NullPointer exception in org.springframework.aop.interceptor.JamonPerformanceMonitorInterceptor [SPR-1371]","**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=davidkarlsen)** opened **[SPR-1371](https://jira.spring.io/browse/SPR-1371?redirect=false)** and commented  Using JamonPerformanceMonitorInterceptor while log4j is in debug level will consistently fail (eg. each time) with a NPE:  Trace from server: 1198777258 at host localhost >> java.rmi.RemoteException: ; nested exception is: java.lang.NullPointerException java.lang.NullPointerException at java.lang.String.length(String.java(Inlined Compiled Code)) at java.lang.StringBuffer.\(StringBuffer.java(Compiled Code)) at org.springframework.aop.interceptor.AbstractPerformanceMonitorInterceptor.createInvocationTraceName(AbstractPerformanceMonitorInterceptor.java:80) at org.springframework.aop.interceptor.JamonPerformanceMonitorInterceptor.invokeUnderTrace(JamonPerformanceMonitorInterceptor.java:57) at org.springframework.aop.interceptor.AbstractTraceInterceptor.invoke(AbstractTraceInterceptor.java:94) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:144) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:174) at $Proxy0.findAccountData(Unknown Source) at my.package.crg.server.func.ejb.CRGServiceBean.findAccountData(CRGServiceBean.java:77) at my.package.crg.server.func.ejb.EJSRemoteStatelessCRGService_692891ba.findAccountData(EJSRemoteStatelessCRGService_692891ba.java:35) at my.package.crg.server.func.ejb._EJSRemoteStatelessCRGService_692891ba_Tie.findAccountData(_EJSRemoteStatelessCRGService_692891ba_Tie.java:158) at no.dnbnor.crg.server.func.ejb._EJSRemoteStatelessCRGService_692891ba_Tie._invoke(_EJSRemoteStatelessCRGService_692891ba_Tie.java:82) at com.ibm.CORBA.iiop.ServerDelegate.dispatchInvokeHandler(ServerDelegate.java:615) at com.ibm.CORBA.iiop.ServerDelegate.dispatch(ServerDelegate.java:468) at com.ibm.rmi.iiop.ORB.process(ORB.java:396) at com.ibm.CORBA.iiop.ORB.process(ORB.java:1608) at com.ibm.rmi.iiop.Connection.doWork(Connection.java:2164) at com.ibm.rmi.iiop.WorkUnitImpl.doWork(WorkUnitImpl.java:63) at com.ibm.ejs.oa.pool.PooledThread.run(ThreadPool.java:95) at com.ibm.ws.util.ThreadPool$Worker.run(ThreadPool.java:593)","closed","in: core,","spring-projects-issues","2005-10-12T00:56:00Z","2019-01-11T21:20:05Z"
"","6064","Bug in AbstractStatelessSessionBean/WeakReferenceMonitor [SPR-1364]","**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=davidkarlsen)** opened **[SPR-1364](https://jira.spring.io/browse/SPR-1364?redirect=false)** and commented  I'm using a ContextSingletonBeanFactoryLocator:  public CRGServiceBean(){ log.info(""Constructor called""); setBeanFactoryLocator( ContextSingletonBeanFactoryLocator.getInstance() ); setBeanFactoryLocatorKey(""application-context""); }  (I've also tried to set this in the setSessionContext(SessionContext ctx) like this: super.setSessionContext(ctx); setBeanFactoryLocator( ContextSingletonBeanFactoryLocator.getInstance() ); setBeanFactoryLocatorKey(""application-context"");  But both will fail with this exception if calling a number of create() in parallell (which is very likely to happen in a J2EE production world). Besides it's a violation to spawn threads inside the container.  I guess it comes from the unsynchronized variable monitoringThread in the WeakReferenceMonitor class.  The problem is AFAIK the same under 1.2.4 and 1.2.5.  Stacktrace:  Non-application exception occurred while processing method ""findAccountData"". Exception data: com.ibm.ejs.container.CreateFailureException: ; nested exception is: java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException: java.lang.IllegalThreadStateException at java.lang.Thread.start(Native Method) at org.springframework.util.WeakReferenceMonitor.addEntry(WeakReferenceMonitor.java:94) at org.springframework.util.WeakReferenceMonitor.monitor(WeakReferenceMonitor.java:78) at org.springframework.ejb.support.AbstractEnterpriseBean.loadBeanFactory(AbstractEnterpriseBean.java:129) at org.springframework.ejb.support.AbstractStatelessSessionBean.ejbCreate(AbstractStatelessSessionBean.java:63) at java.lang.reflect.Method.invoke(Native Method) at com.ibm.ejs.container.StatelessBeanO.\(StatelessBeanO.java:132) at com.ibm.ejs.container.CMStatelessBeanO.\(CMStatelessBeanO.java:53) at com.ibm.ejs.container.CMStatelessBeanOFactory.create(CMStatelessBeanOFactory.java:40) at com.ibm.ejs.container.EJSHome.createBeanO(EJSHome.java:586) at com.ibm.ejs.container.EJSHome.createBeanO(EJSHome.java:673) at com.ibm.ejs.container.activator.UncachedActivationStrategy.atActivate(UncachedActivationStrategy.java:78) at com.ibm.ejs.container.activator.Activator.activateBean(Activator.java:516) at com.ibm.ejs.container.EJSContainer.preInvoke_internal(EJSContainer.java:2609) at com.ibm.ejs.container.EJSContainer.preInvoke(EJSContainer.java:2337) at com.ibm.ejs.container.EJSContainer.preInvoke(EJSContainer.java:2322) at my.package.crg.server.func.ejb.EJSRemoteStatelessCRGService_692891ba.findAccountData(EJSRemoteStatelessCRGService_692891ba.java:34) at my.package.crg.server.func.ejb._EJSRemoteStatelessCRGService_692891ba_Tie.findAccountData(_EJSRemoteStatelessCRGService_692891ba_Tie.java:158) at my.package.crg.server.func.ejb._EJSRemoteStatelessCRGService_692891ba_Tie._invoke(_EJSRemoteStatelessCRGService_692891ba_Tie.java:82) at com.ibm.CORBA.iiop.ServerDelegate.dispatchInvokeHandler(ServerDelegate.java:615) at com.ibm.CORBA.iiop.ServerDelegate.dispatch(ServerDelegate.java:468) at com.ibm.rmi.iiop.ORB.process(ORB.java:396) at com.ibm.CORBA.iiop.ORB.process(ORB.java:1608) at com.ibm.rmi.iiop.Connection.doWork(Connection.java:2164) at com.ibm.rmi.iiop.WorkUnitImpl.doWork(WorkUnitImpl.java:63) at com.ibm.ejs.oa.pool.PooledThread.run(ThreadPool.java:95) at com.ibm.ws.util.ThreadPool$Worker.run(ThreadPool.java:593)   ---  **Affects:** 1.2.4, 1.2.5  1 votes, 1 watchers","closed","in: core,","spring-projects-issues","2005-10-10T01:01:53Z","2012-06-19T03:54:34Z"
"","6531","Follow-up: BeanWrapper should allow non-String Map keys [SPR-1837]","**[david govek](https://jira.spring.io/secure/ViewProfile.jspa?name=daveidmx)** opened **[SPR-1837](https://jira.spring.io/browse/SPR-1837?redirect=false)** and commented  BeanWrapper's setPropertyValue() checks the registered custom editors and converts Strings to alternate types if needed via a call to doTypeConversionIfNecessary(). it would be useful if getPropertyValue() also made this check, so that Map values wouldn't be limited to maps where the keys are Strings. Currently it's possible to have a custom editor map between a String and an Object, and it's possible to have Mapped property values, but it's not possible to combine the two.  If there is agreement that this would be generally useful I can proceed to develop and submit a patch and test cases. I would also like some direction on the best approach by someone who knows better. It seems that around line 693 of BeanWrapperImpl in version 1.2.3, instead of having:      else if (value instanceof Map) {         Map map = (Map) value;         value = map.get(key);     }  It might do something like this:      else if (value instanceof Map) {         Map map = (Map) value;         Object convertedKey = doTypeConversionIfNecessary(...)         value = map.get(convertedKey);     }  Is there a reason not to do this? Is there a better approach? Is it something that would generally be useful to others without breaking anything? Or would I be better off creating a custom BeanWrapper just for my needs?   ---  **Affects:** 2.0 M3","closed","type: enhancement,","spring-projects-issues","2006-03-30T00:40:30Z","2019-01-11T22:02:15Z"
"","6034","LocalSessionFactoryBean missing ability to set Hibernate cache regions [SPR-1334]","**[David Carter](https://jira.spring.io/secure/ViewProfile.jspa?name=ddcarter)** opened **[SPR-1334](https://jira.spring.io/browse/SPR-1334?redirect=false)** and commented  Refer to this issue: http://opensource2.atlassian.com/projects/spring/browse/SPR-872  The solution to that issue is incomplete. While it does allow setting of caching strategies via the sessionFactory definition, it does not allow you to set a corresponding cache region per cached class.  This is partly due to the Hibernate documentation failing to mention this option, which is available in the Hibernate code. See method parseSessionFactory in org.hibernate.cfg.Configuration, where you will find the following code fragment:      else if ( ""class-cache"".equals( subelementName ) ) {          String className = subelement.attributeValue( ""class"" );          Attribute regionNode = subelement.attribute( ""region"" );          final String region = ( regionNode == null ) ? className : regionNode.getValue();          setCacheConcurrencyStrategy( className, subelement.attributeValue( ""usage"" ), region );     }  So, we have attributes ""class"", ""usage"", and ""region"". LocalSessionFactoryBean.setEntityCacheStrategies currently only handles class & usage.  Without the ability to specific the region, this means of centrally configuring the 2nd-level cache is not very useful.   ---  **Affects:** 1.2.4","closed","type: enhancement,","spring-projects-issues","2005-09-30T01:49:41Z","2012-06-19T03:54:33Z"
"","5997","UrlFilenameViewController [SPR-1296]","**[David Barri](https://jira.spring.io/secure/ViewProfile.jspa?name=golly)** opened **[SPR-1296](https://jira.spring.io/browse/SPR-1296?redirect=false)** and commented  The current UrlFilenameViewController class is too limited and so I have improved it to provide it with a little more functionality and make it a wee bit more effecient.   ---  **Affects:** 1.2.4  **Attachments:** - [UrlFilenameViewController.java](https://jira.spring.io/secure/attachment/11147/UrlFilenameViewController.java) (_3.04 kB_) - [UrlFilenameViewController.patch](https://jira.spring.io/secure/attachment/11146/UrlFilenameViewController.patch) (_2.91 kB_)","closed","type: enhancement,","spring-projects-issues","2005-09-11T14:22:20Z","2012-06-19T03:54:27Z"
"","5915","AbstractTransactionalDataSourceSpringContextTests  deleteFromTables [SPR-1213]","**[Darryl Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=dwsmith751)** opened **[SPR-1213](https://jira.spring.io/browse/SPR-1213?redirect=false)** and commented  AbstractTransactionalDataSourceSpringContextTests' deleteFromTables method only delete tables if info level logging is enabled   ---  **Affects:** 1.2.2, 1.2.3, 1.2.4  **Attachments:** - [patch.txt](https://jira.spring.io/secure/attachment/11041/patch.txt) (_928 bytes_)","closed","type: bug,","spring-projects-issues","2005-08-08T08:51:04Z","2005-08-08T19:48:26Z"
"","6138","PropertiesBeanDefinitionReader should expect parentheses around parent property [SPR-1438]","**[Darren Davison](https://jira.spring.io/secure/ViewProfile.jspa?name=darren.davison)** opened **[SPR-1438](https://jira.spring.io/browse/SPR-1438?redirect=false)** and commented  PropertiesBeanDefinitionReader expects that special properties like ""abstract"" and ""ref"" be enclosed in parens. in the properties file to avoid colliding with bean properties of the same name on the target bean.  However, it doesn't expect ""parent"" to also be in parens. which seems inconsistent.  May be worth fixing for 1.3 since it will break existing apps if changed.   ---  **Affects:** 1.2.5","closed","type: enhancement,","spring-projects-issues","2005-11-04T06:06:39Z","2006-01-05T04:42:33Z"
"","6039","New superclass for template engine factories [SPR-1339]","**[Darren Davison](https://jira.spring.io/secure/ViewProfile.jspa?name=darren.davison)** opened **[SPR-1339](https://jira.spring.io/browse/SPR-1339?redirect=false)** and commented  There are a few common properties between FreeMarkerConfigurationFactory and VelocityEngineFactory that would be better in an abstract superclass in org.springframework.ui.support  Properties to be pulled up:  * configLocation * templateLoaderPath/resourceLoaderPath (deprecate templateLoaderPath in 1.3 and use   resourceLoaderPath only) * resourceLoader * preferFileSystemAccess    ---  **Affects:** 1.2.5","closed","type: enhancement,","spring-projects-issues","2005-10-02T05:22:56Z","2006-02-21T20:56:06Z"
"","6023","remove deprecated methods in AbstractXsltView [SPR-1323]","**[Darren Davison](https://jira.spring.io/secure/ViewProfile.jspa?name=darren.davison)** opened **[SPR-1323](https://jira.spring.io/browse/SPR-1323?redirect=false)** and commented  remove createDomNode() and associated methods deprecated prior to 1.3 final and enforce the AbstractXsltView contract of requiring subclasses to implement createXsltSource() instead   ---  **Affects:** 1.2.5","closed","type: task,","spring-projects-issues","2005-09-25T23:19:35Z","2012-06-19T03:54:42Z"
"","6478","AspectJAutoproxyCreater does not honor usePrefix flag [SPR-1783]","**[Daniel Tabuenca](https://jira.spring.io/secure/ViewProfile.jspa?name=dtabuenc)** opened **[SPR-1783](https://jira.spring.io/browse/SPR-1783?redirect=false)** and commented  There seems to be no way to filter which advisors to attempt to match for configuring proxies.  AspectJAutoProxyCreator seems to implement it's own findCandidateAdvisors that creates advisors for all `@Aspect` annotated beans it finds without checking for usePrefix flag or filtering on advisorBeanNamePrefix.  This causes problems when trying AspectJ autoproxying in combination with compile or load-time weaving since things like AnnotationBeanConfigurerAspect are candidates for autoproxying.   ---  **Affects:** 2.0 M3  3 votes, 2 watchers","closed","type: bug,","spring-projects-issues","2006-03-10T19:47:10Z","2012-06-19T03:54:39Z"
"","5944","BeanDefinition's elements are not interfaces [SPR-1242]","**[Daniel Sendula](https://jira.spring.io/secure/ViewProfile.jspa?name=click)** opened **[SPR-1242](https://jira.spring.io/browse/SPR-1242?redirect=false)** and commented  BeanDefinition is nicely defined as an interface. One would assume that the rest of hierarchy is defined using interfaces too: ConstructorArgumentValues, MutablePropertyValues and PropertyValue. Also, it would be nice if ChildBeanDefinition and RootBeanDefinition are made interfaces too.  This all would help other, potential, implementators of BeanInterface.   ---  **Affects:** 1.2.3","closed","type: enhancement,","spring-projects-issues","2005-08-21T09:42:51Z","2005-09-09T03:31:02Z"
"","6260","Allow multiple configuration resources for Hibernate3 LocalSessionBeanFactory (part 2) [SPR-1562]","**[Daniel Gredler](https://jira.spring.io/secure/ViewProfile.jspa?name=gredler)** opened **[SPR-1562](https://jira.spring.io/browse/SPR-1562?redirect=false)** and commented  Currently LocalSessionBeanFactory accepts a single configuration file (via the configLocation property). In certain circumstances it would be useful to be able to specify multiple configuration files. Hibernate itself allows this, using the Configuration.configure methods. It would be nice if Spring could expose this functionality, e.g. by having a configLocations property in the same way as it already has things like setMappingJarLocations.  Please note that this enhancement request is essentially a clone of bug #5620 (http://opensource2.atlassian.com/projects/spring/browse/SPR-893). However, that bug was marked ""won't fix"" because it was incorrectly assumed that Hibernate does not allow multiple configuration files. Hibernate does indeed allow multiple configuration files (see http://opensource2.atlassian.com/projects/hibernate/browse/HHH-1315).  Best Regards,  Daniel Gredler  ---  **Affects:** 1.2.6","closed","type: enhancement,","spring-projects-issues","2005-12-22T07:45:58Z","2019-01-11T21:39:32Z"
"","6076","SimpleNamingContextBuilder never sets the activated SimpleNamingContextBuilder in emptyActivatedContextBuilder() [SPR-1376]","**[Daniel Fröding](https://jira.spring.io/secure/ViewProfile.jspa?name=qtxdaer)** opened **[SPR-1376](https://jira.spring.io/browse/SPR-1376?redirect=false)** and commented  The static variable 	 private static SimpleNamingContextBuilder activated; Is never set in the else clause in following method.         public static SimpleNamingContextBuilder emptyActivatedContextBuilder() throws NamingException {     	if (activated != null) {     		// clear already activated context builder     		activated.clear();     		return activated;     	}     	else {     		// create and activate new context builder     		SimpleNamingContextBuilder builder = new SimpleNamingContextBuilder();     		builder.activate();     		return builder;     	}     }  This will eventually result in a ""java.lang.IllegalStateException: InitialContextFactoryBuilder already set"" exception when serveral tests are run within the same JVM.   ---  **Affects:** 1.2.5","closed","in: core,","spring-projects-issues","2005-10-12T20:06:27Z","2019-01-11T21:20:16Z"
"","6126","Redundant code in step-by-step tutorial - step 22 [SPR-1426]","**[Daniel Farinha](https://jira.spring.io/secure/ViewProfile.jspa?name=farinhdf)** opened **[SPR-1426](https://jira.spring.io/browse/SPR-1426?redirect=false)** and commented  In the step-by-step tutorial, at step 22 ( http://www.springframework.org/docs/MVC-step-by-step/Spring-MVC-step-by-step-Part-3.html ) the PriceIncreaseFormController.java code includes the creation of a myModel object that never seems to be used (the returned ModelAndView simply redirects to the sucessful view, and doesn't take the myModel object as parameter).  Perhaps it's a result of copying and pasting the code from SpringappController.java in step 16 which does make use of that code.  Just a minor thing, but I'd like to clarify it as I'm learning the basics of Spring MVC and want to make sure I fully understand the code.   --- No further details from [SPR-1426](https://jira.spring.io/browse/SPR-1426?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-10-28T02:39:06Z","2012-06-19T03:54:27Z"
"","6258","generic object pooling support in spring [SPR-1560]","**[Daniel C. Amadei](https://jira.spring.io/secure/ViewProfile.jspa?name=danielamadei)** opened **[SPR-1560](https://jira.spring.io/browse/SPR-1560?redirect=false)** and commented  Hi!  I've built a little framework for working with any kind of objects as pooled objects (in my case: XML parsers, XML Schema Validators, Apache Betwixt Encoders, etc) and the second version of this framework I built upon Spring and I noticed a reduction of aprox. 70% of the lines of code due to the IoC capabilities as I do not need to deal with configurations manually.  So, trying to contribute with the open source world I'm interested in sending this framework to be incorporated into spring, allowing it's users to use object pooling through template method much of the same way it's done with the orm helpers.  I've renamed the package of it to org.springframework and I'm attaching a file containing it and the testcases. So, if this is approved to be incorporated into Spring, please provide me some instructions on what more I should do.  Thanks, Daniel    ---  **Affects:** 1.2.6  **Attachments:** - [springpool.zip](https://jira.spring.io/secure/attachment/11365/springpool.zip) (_12.01 kB_) - [springpool-refactored.zip](https://jira.spring.io/secure/attachment/11390/springpool-refactored.zip) (_195.86 kB_)","closed","type: enhancement,","spring-projects-issues","2005-12-22T05:16:29Z","2006-03-10T03:30:32Z"
"","6351","JdkVersion does not recognize java 6 [SPR-1654]","**[Daniel Aioanei](https://jira.spring.io/secure/ViewProfile.jspa?name=aioaneid)** opened **[SPR-1654](https://jira.spring.io/browse/SPR-1654?redirect=false)** and commented  For Java 6, majorJavaVersion seems to end up equal to JAVA_13.      static {     	javaVersion = System.getProperty(""java.version"");     	// should look like ""1.4.1_02""     	if (javaVersion.indexOf(""1.4."") != -1) {     		majorJavaVersion = JAVA_14;     	}     	else if (javaVersion.indexOf(""1.5."") != -1) {     		majorJavaVersion = JAVA_15;     	}     	// else leave as 1.3 default     }  The fix is obvious.   ---  **Affects:** 1.2.6","closed","type: enhancement,","spring-projects-issues","2006-01-31T18:19:11Z","2012-06-19T03:54:06Z"
"","6086","NPE in HibernateSystemException [SPR-1386]","**[Daniel Aioanei](https://jira.spring.io/secure/ViewProfile.jspa?name=aioaneid)** opened **[SPR-1386](https://jira.spring.io/browse/SPR-1386?redirect=false)** and commented  I've got this stack trace in a web application using a combination of hibernate, spring and activemq:  Caused by: java.lang.NullPointerException at org.springframework.orm.hibernate3.HibernateSystemException.\(Hi bernateSystemException.java:35) ... 24 more  Similar to http://opensource.atlassian.com/projects/spring/browse/SPR-1326.   ---  **Affects:** 1.2.5","closed","type: bug,","spring-projects-issues","2005-10-17T09:03:27Z","2012-06-19T03:54:26Z"
"","6085","MimeMessageHelper not configurable as a JavaBean [SPR-1385]","**[Daniel Aioanei](https://jira.spring.io/secure/ViewProfile.jspa?name=aioaneid)** opened **[SPR-1385](https://jira.spring.io/browse/SPR-1385?redirect=false)** and commented  org.springframework.mail.javamail.MimeMessageHelper cannot be fully set up as a Spring bean because it has lots of overloaded ""set"" methods. Fix: just change some ""set"" method names.   ---  **Affects:** 1.2.5","closed","type: enhancement,","spring-projects-issues","2005-10-16T22:27:39Z","2019-01-11T21:19:31Z"
"","6026","NPE at org.springframework.jms.JmsException.(JmsException.java:59) [SPR-1326]","**[Daniel Aioanei](https://jira.spring.io/secure/ViewProfile.jspa?name=aioaneid)** opened **[SPR-1326](https://jira.spring.io/browse/SPR-1326?redirect=false)** and commented  A piece of stacktrace from a running application:  Caused by: java.lang.NullPointerException at org.springframework.jms.JmsException.\(JmsException.java:59) at org.springframework.jms.IllegalStateException.\(IllegalStateException.java:29) ... 39 more  Of course the fix is straightforward, but it would still be nice to have the issue fixed in the main distribution.   --- No further details from [SPR-1326](https://jira.spring.io/browse/SPR-1326?redirect=false)","closed","type: bug,","spring-projects-issues","2005-09-27T01:26:38Z","2012-06-19T03:54:21Z"
"","6522","Add removeAllFromCache method to remove all cached views in org.springframework.web.servlet.view.AbstractCachingViewResolver [SPR-1828]","**[dan huang](https://jira.spring.io/secure/ViewProfile.jspa?name=danzhuang)** opened **[SPR-1828](https://jira.spring.io/browse/SPR-1828?redirect=false)** and commented  Currently, to remove cached views, a sub-class of AbstractCachingViewResolver has to remember the views been added and loop through the views to remove them one at a time from the cache. Providing a method to remove all the cached views will simply the code and improve the performance.   ---  **Affects:** 1.2.7, 2.0 M3","closed","type: enhancement,","spring-projects-issues","2006-03-27T04:12:47Z","2012-06-19T03:54:39Z"
"","5907","BeanWrapper should allow non-String Map keys [SPR-1204]","**[Dan Bradley](https://jira.spring.io/secure/ViewProfile.jspa?name=debradley@gmail.com)** opened **[SPR-1204](https://jira.spring.io/browse/SPR-1204?redirect=false)** and commented  BeanWrapper's setPropertyValue() checks the registered custom editors and converts Strings to alternate types if needed via a call to doTypeConversionIfNecessary(). it would be useful if getPropertyValue() also made this check, so that Map values wouldn't be limited to maps where the keys are Strings. Currently it's possible to have a custom editor map between a String and an Object, and it's possible to have Mapped property values, but it's not possible to combine the two.  If there is agreement that this would be generally useful I can proceed to develop and submit a patch and test cases. I would also like some direction on the best approach by someone who knows better. It seems that around line 693 of BeanWrapperImpl in version 1.2.3, instead of having:      else if (value instanceof Map) {         Map map = (Map) value;         value = map.get(key);     }  It might do something like this:      else if (value instanceof Map) {         Map map = (Map) value;         Object convertedKey = doTypeConversionIfNecessary(...)         value = map.get(convertedKey);     }  Is there a reason not to do this? Is there a better approach? Is it something that would generally be useful to others without breaking anything? Or would I be better off creating a custom BeanWrapper just for my needs?   ---  **Affects:** 1.2.4  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2005-08-05T01:51:45Z","2019-02-12T10:36:11Z"
"","6572","Uncompatible change in method signature for 1.2.7 [SPR-1878]","**[Damir Murat](https://jira.spring.io/secure/ViewProfile.jspa?name=dmurat)** opened **[SPR-1878](https://jira.spring.io/browse/SPR-1878?redirect=false)** and commented  Could you please reverse method signature for MutablePropertyValues MutablePropertyValues.addPropertyValue(String, Object) to void MutablePropertyValues.addPropertyValue(String, Object) as was before 1.2.7.  This issue is same as in #6375, but now (hopefully) for 1.2.8. Since this change is done for 2.0 M3 I see no reason for not to do it in 1.2.8. I'm also having an incompatibility with XBean :-)  Thanks, Damir Murat  ---  **Affects:** 1.2.7","closed","in: core,","spring-projects-issues","2006-04-10T08:50:45Z","2019-01-11T22:02:36Z"
"","6534","StoredProcedure hangs on Oracle [SPR-1840]","**[D.T.Rajendra Prasad](https://jira.spring.io/secure/ViewProfile.jspa?name=dtrprasad)** opened **[SPR-1840](https://jira.spring.io/browse/SPR-1840?redirect=false)** and commented  I had created a stored procedure 'SENDPAYDTLS' in Oracle having one in & two out parameters. I had created a class 'EmpStoredProcedure' as package com.htc.springdemos.daos; import org.springframework.jdbc.core.\*; import org.springframework.jdbc.object.\*; import java.util.\*; import java.sql.\*; import javax.sql.*; public class EmpStoredProcedure extends StoredProcedure {  public final String SQL = ""SENDPAYDTLS"";  int  eno;  public EmpStoredProcedure(DataSource ds,int en) {    eno=en; setDataSource(ds); setSql(SQL); declareParameter(new SqlParameter(""eno"",Types.INTEGER)); declareParameter(new SqlOutParameter(""sal1"",Types.DOUBLE)); declareParameter(new SqlOutParameter(""comm1"",Types.DOUBLE)); compile(); }  public Map execute() { Map iParams = new HashMap(); Map oParams = null; try { iParams.put(""eno"",new Integer(eno)); System.out.println(""blah1""); oParams = execute(iParams); } catch(Exception de) { de.printStackTrace(); } return oParams; }  } in my ItemDAO class i had used  package com.htc.springdemos.daos; import org.springframework.jdbc.core.\*; import org.springframework.jdbc.datasource.\*; import java.sql.\*; import java.util.\*; import java.lang.reflect.\*; import javax.sql.*; public class ItemDAO {      private JdbcTemplate template;     ItemVO item;         List list;     public ItemDAO()         {     	super();     }     public JdbcTemplate getTemplate() {     	return template;     }     public void setTemplate(JdbcTemplate template) {     	this.template = template;     }          public int insertItem(ItemVO item)     {         String sqlStr = ""insert into itemmaster values(?,?,?,?)"";         Object[] params = new Object[]{item.getItemId(),     	                               item.getItemName(),     		                       item.getItemPrice(),     		                       item.getItemType()};          int types[] = {Types.INTEGER,     		        Types.VARCHAR,     		        Types.DOUBLE,     		        Types.VARCHAR};           return template.update(sqlStr,params,types);           		                             }                    public int[] bulkInsertItems(final List items)     {      String sqlStr = ""insert into itemmaster values(?,?,?,?)"";            BatchPreparedStatementSetter setter = new BatchSQLExecutorItems(items);           return template.batchUpdate(sqlStr,setter);	                                     }          public ItemVO getItem(final int id)     {      String sqlQry = ""select itemId,itemName,itemPrice,""                      +""itemType  from itemmaster where ""                      +"" itemId=?"";      final ItemVO item = new ItemVO();      final Object[] params = {new Integer(id)};      RowCallbackHandler handler = new RowCallbackHandler()                  {                   public void processRow(ResultSet rs)throws SQLException                   {                     item.setItemId(rs.getInt(""itemid""));                     item.setItemName(rs.getString(""itemname""));                    item.setItemType(rs.getString(""itemtype""));                    item.setItemPrice(rs.getDouble(""itemprice""));                    }};     template.query(sqlQry,params,handler);     return item;     }          public List getItems()     {      String sqlQry = ""select itemId,itemName,itemPrice,""                      +""itemType  from itemmaster"";           ItemRowMapper mapper = new ItemRowMapper();      return template.query(sqlQry,mapper);     }  public Map getSalaryDetails(final int eno)throws SQLException {       DriverManagerDataSource ds = new DriverManagerDataSource();      ds.setDriverClassName(""oracle.jdbc.driver.OracleDriver"");      ds.setUrl(""jdbc:oracle:thin:@localhost:1521:oracle10"");      ds.setUsername(""scott"");      ds.setPassword(""tiger"");                  EmpStoredProcedure proc = new EmpStoredProcedure(ds,eno);           Map map = proc.execute();                    System.out.println(""blah3 "");         return map;     }  }  in my test class i had used  package com.htc.springdemos.daos; import java.io.\*; import org.springframework.beans.factory.BeanFactory; import org.springframework.beans.factory.xml.XmlBeanFactory; import org.springframework.core.io.\*; import org.springframework.context.support.\*; import java.util.*; public class TestItemDao { public static void main(String[] args)throws Exception {  BeanFactory factory = new FileSystemXmlApplicationContext(""dao1.xml"");  ItemDAO daoService=(ItemDAO)factory.getBean(""itemDao""); ItemVO item = new ItemVO(120,""Lux"",21.50,""B""); int d = daoService.insertItem(item); if(d == 1) System.out.println(""\nitem inserted"");  List\ items = new ArrayList\(); items.add(new ItemVO(130,""Pears"",25.70,""A"")); items.add(new ItemVO(140,""Cinthol"",18.50,""C"")); items.add(new ItemVO(150,""Dove"",17.60,""A"")); items.add(new ItemVO(160,""Fa"",21.60,""C""));  int[] results = daoService.bulkInsertItems(items); System.out.println(""\nBulk inserts results::""+Arrays.toString(results));  System.out.println(""\nResults of Query""); item = daoService.getItem(150); System.out.println(item);  System.out.println(""\nBulk retreival ""); List\ list= daoService.getItems(); System.out.println(list);  System.out.println(""\nTesting Procedure-out Parameters ""); Map dbls = daoService.getSalaryDetails(7654); System.out.println(dbls);  } }  but when i am running only the last part  is not executing giving a hanging  [java] Testing Procedure-out Parameters [java] blah1      i had verified at documentation ,it is similar.please help me .    ---  **Affects:** 1.2.7  **Attachments:** - [dao1.zip](https://jira.spring.io/secure/attachment/11538/dao1.zip) (_17.20 kB_)","closed","in: data,","spring-projects-issues","2006-03-30T09:46:38Z","2019-01-11T22:02:08Z"
"","6146","autoproxy-not working [SPR-1446]","**[D.T.Rajendra Prasad](https://jira.spring.io/secure/ViewProfile.jspa?name=dtrprasad)** opened **[SPR-1446](https://jira.spring.io/browse/SPR-1446?redirect=false)** and commented  I have two  beans in my configuration file (aop6.xml)  \  \  and a method interceptor  \  i had given the autoproxy  \                                                       chImpl             invImpl                                                                                      adviceBookService                                         for my testing i had given      Resource resource =       new InputStreamResource(new FileInputStream(""aop6.xml""));           BeanFactory factory=new XmlBeanFactory(resource);           CholaIfImpl cIf = (CholaIfImpl)factory.getBean(""chImpl"");      double bDay = cIf.arrangeBDayParty(""Vinayagan"",d1);             but no intercepting action is taking place,methods are simply executing    ---  **Affects:** 1.2.5  **Attachments:** - [aop-auto-proxy1.zip](https://jira.spring.io/secure/attachment/11252/aop-auto-proxy1.zip) (_323.07 kB_)","closed","in: core,","spring-projects-issues","2005-11-05T23:54:56Z","2019-01-11T21:07:34Z"
"","6151","removed more questionable casts [SPR-1451]","**[CT](https://jira.spring.io/secure/ViewProfile.jspa?name=ct)** opened **[SPR-1451](https://jira.spring.io/browse/SPR-1451?redirect=false)** and commented  removed more questionable casts   ---  **Attachments:** - [fix-removeQuestionableCasts.patch](https://jira.spring.io/secure/attachment/11251/fix-removeQuestionableCasts.patch) (_7.24 kB_)","closed","type: enhancement,","spring-projects-issues","2005-11-07T10:09:41Z","2012-06-19T03:53:59Z"
"","6150","usage of String constructor is not recommended: [SPR-1450]","**[CT](https://jira.spring.io/secure/ViewProfile.jspa?name=ct)** opened **[SPR-1450](https://jira.spring.io/browse/SPR-1450?redirect=false)** and commented  usage of String constructor is not recommended: switched to use """" instead   ---  **Attachments:** - [fix-newString.patch](https://jira.spring.io/secure/attachment/11250/fix-newString.patch) (_2.57 kB_)","closed","type: enhancement,","spring-projects-issues","2005-11-07T10:08:53Z","2012-06-19T03:54:06Z"
"","6149","usage of Boolean constructor is not recommended [SPR-1449]","**[CT](https://jira.spring.io/secure/ViewProfile.jspa?name=ct)** opened **[SPR-1449](https://jira.spring.io/browse/SPR-1449?redirect=false)** and commented  usage of Boolean constructor is not recommended: switched to use Boolean.valueOf() instead   ---  **Attachments:** - [fix-newBoolean.patch](https://jira.spring.io/secure/attachment/11249/fix-newBoolean.patch) (_14.17 kB_)","closed","type: enhancement,","spring-projects-issues","2005-11-07T10:05:56Z","2005-11-07T19:21:33Z"
"","6537","HB3 HibernateInterceptor javadocs are not updated [SPR-1843]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-1843](https://jira.spring.io/browse/SPR-1843?redirect=false)** and commented  HB3 has unchecked exceptions unlike HB2 and HibernateInterceptor will intercept and convert them (since it's possible). However, the javadocs are still the ones from HB2 : [quote] Unfortunately, this interceptor cannot convert checked HibernateExceptions to unchecked dao ones automatically. The intercepted method would have to throw HibernateException to be able to achieve this - thus the caller would still have to catch or rethrow it, even if it will never be thrown if intercepted. [/quote]   ---  **Affects:** 1.2.7, 2.0 M3","closed","type: bug,","spring-projects-issues","2006-03-30T15:33:52Z","2012-06-19T03:54:01Z"
"","6330","LocalSessionFactoryBean getConfigTimeDataSource should not be resetted [SPR-1633]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-1633](https://jira.spring.io/browse/SPR-1633?redirect=false)** and commented  The current implementation of LocalSessionFactoryBean resets the config time data source before leaving afterPropertiesSet. However, other frameworks that use Hibernate namely jbpm will not find a datasource when trying to create the schema as they will unfortunately reinstantiates a ConnectionProvider which will reuse the datasource which will return null. The issue is similar with (http://opensource2.atlassian.com/projects/spring/browse/SPR-1547) but the Spring-provided DataSource will be request during the HB sessionFactory life-time (between afterPropertiesSet and destroy). The javadoc mention that : * This instance will be set before initialization of the corresponding * SessionFactory, and reset immediately afterwards. It is thus only available * during configuration.   What's the reason for that?  You can find more details about the issue occuring in JBPM here: http://opensource2.atlassian.com/projects/spring/browse/MOD-75    ---  **Affects:** 1.2.6","closed","type: enhancement,","spring-projects-issues","2006-01-20T03:13:45Z","2006-01-23T02:28:57Z"
"","6322","Doc: Hibernate3 OpenSessionInView and getCurrentSession() example [SPR-1625]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-1625](https://jira.spring.io/browse/SPR-1625?redirect=false)** and commented  A lot of users on the forum have problems setting up an application using the OpenSessionInView. Most of the times the solution is outside the spring samples at points at various blogs or demo applications. I think a simple OSIV (mainly with Hibernate) should be added inside the main distribution samples (even if as a comment).  ---  **Issue Links:** - #7879 OpenSessionInView Filter/Interceptor lacks documentation coverage (_**""is duplicated by""**_)  5 votes, 5 watchers","closed","type: documentation,","spring-projects-issues","2006-01-18T03:43:28Z","2019-01-11T21:21:23Z"
"","6199","PropertiesEditor support for Spring resources [SPR-1500]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-1500](https://jira.spring.io/browse/SPR-1500?redirect=false)** and commented  I've added a small enchancement to PropertiesEditor so it can be possible to specify a Spring resource (file:, classpath:) which points to a properties file. When dealing with big properties it's preferrable to use a file (which can be reused by other components) outside the spring context then declaring the properties inside the Spring context.   ---  **Affects:** 1.2.4  **Attachments:** - [PropertiesEditor.java](https://jira.spring.io/secure/attachment/11278/PropertiesEditor.java) (_3.65 kB_)","closed","type: enhancement,","spring-projects-issues","2005-11-28T00:42:52Z","2012-06-19T03:53:55Z"
"","6127","ORM SessionFactory/PersistentManager factoryBean should return 'safe' objects [SPR-1427]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-1427](https://jira.spring.io/browse/SPR-1427?redirect=false)** and commented  LocalSessionFactoryBean returns always the same SessionFactory - the client might call close on it and destroy the objects. Future clients will get an invalid reference. Same thing happens to the other classes inside the ORM package. Wouldn't be safer if by default the objects from FactoryBeans would have their lifecycle methods proxied so they are controlled by the Spring application context?   ---  **Affects:** 1.2.5","closed","type: enhancement,","spring-projects-issues","2005-10-29T07:05:15Z","2006-03-13T19:03:50Z"
"","6768","Add MessageSource support to HTML taglib [SPR-2076]","**[Condor](https://jira.spring.io/secure/ViewProfile.jspa?name=condor)** opened **[SPR-2076](https://jira.spring.io/browse/SPR-2076?redirect=false)** and commented  It would be nice if the HTML tags would contain support for message code resolving for the title, alt, accessKey and itemLabel attributes (just like the Struts HTML taglib).  I suggest adding titleCode, altCode, accessKeyCode and itemLabelCode attributes to specify a message code instead of a value.  ---  **Affects:** 2.0 RC1  **Issue Links:** - #7255  should have MessageSource support (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2006-05-29T20:42:04Z","2019-01-11T18:16:40Z"
"","6767","HTML label tag won't work [SPR-2075]","**[Condor](https://jira.spring.io/secure/ViewProfile.jspa?name=condor)** opened **[SPR-2075](https://jira.spring.io/browse/SPR-2075?redirect=false)** and commented  (Followup of #6670)  The for attribute of a label references the id of the associated control and not the name ! (see http://www.w3.org/TR/html401/interact/forms.html#h-17.9.1)  So, the current implementation of the label tag won't work, because it sets the for attribute to the path expression which is used as the name for controls and not as the id.  ---  **Affects:** 2.0 RC1","closed","type: bug,","spring-projects-issues","2006-05-29T20:24:09Z","2019-01-11T18:16:42Z"
"","6765","Spring HTML TLD [SPR-2073]","**[Condor](https://jira.spring.io/secure/ViewProfile.jspa?name=condor)** opened **[SPR-2073](https://jira.spring.io/browse/SPR-2073?redirect=false)** and commented  2 small remarks about the Spring HTML TLD  1. Shouldn't the items attribute of the options tag be required ? 2. Why is there a delimiter attribute in the label tag ?    ---  **Affects:** 2.0 RC1","closed","type: bug,","spring-projects-issues","2006-05-29T20:06:11Z","2012-06-19T03:52:30Z"
"","6417","onFormChange can't return errors [SPR-1720]","**[Condor](https://jira.spring.io/secure/ViewProfile.jspa?name=condor)** opened **[SPR-1720](https://jira.spring.io/browse/SPR-1720?redirect=false)** and commented  The onFormChange method parameter list doesn't include the BindException errors parameter, so it isn't possible for a form change to reject the changed value.  I suggest adding another onFormChange method WITH the errors parameter that calls the original onFormChange method by default and modifying calls to onFormChange to include the errors parameter.   ---  **Affects:** 1.2.6, 2.0 M2","closed","type: enhancement,","spring-projects-issues","2006-02-16T01:45:55Z","2012-06-19T03:54:23Z"
"","6686","ServletRequestUtils.getStringParameters behaviour with *empty* (not null) Strings is unintuitive [SPR-1993]","**[Colin Yates](https://jira.spring.io/secure/ViewProfile.jspa?name=yatesco)** opened **[SPR-1993](https://jira.spring.io/browse/SPR-1993?redirect=false)** and commented  IIRC calling RequestUtils.getStringParameter() for a request parameter which had no value would return """".  In Spring 2.0M4 it throws a BindingException.  This is wrong IMHO :) because there is an explicit getRequiredStringParameter, the implication being that getStringParameter will handle empty parameters as well as missing parameters.  Stack trace:  org.springframework.web.bind.ServletRequestBindingException: Required string parameter 'password' contains no value at org.springframework.web.bind.ServletRequestUtils$ParameterParser.validateRequiredParameter(ServletRequestUtils.java:530) at org.springframework.web.bind.ServletRequestUtils$StringParser.validateRequiredString(ServletRequestUtils.java:678) at org.springframework.web.bind.ServletRequestUtils.getRequiredStringParameter(ServletRequestUtils.java:492) at org.springframework.web.bind.ServletRequestUtils.getStringParameter(ServletRequestUtils.java:449)  Use case: I have a form which allows a user to enter a password, that password may be null, or it may be empty, it seems acceptable to me that I should be able to do:  String password = ServletRequestUtils.getStringParameter(request, PASSWORD_PARAM); if (!StringUtils.hasLength(password)) {  }  Thanks.  ---  **Affects:** 2.0 M4  **Issue Links:** - #6695 Unexpected results from ServletRequestUtils.getStringParameters when parameter has empty String (_**""is duplicated by""**_) - #8212 Bug in ServletRequestUtils getStringParameter  2 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2006-05-09T01:49:44Z","2019-01-11T22:20:39Z"
"","6633","Have a propertyEditor return Arrays.asList(new String[] {""a"", ""b""}) and a method expecting List and binding breaks [SPR-1940]","**[Colin Yates](https://jira.spring.io/secure/ViewProfile.jspa?name=yatesco)** opened **[SPR-1940](https://jira.spring.io/browse/SPR-1940?redirect=false)** and commented  Hi,  I have a form with a get/setCategories(List\).  I also have a property editor which returns Arrays.asList(StringUtils.commaDelimitedListToStringArray(value)) registered on the binder for List\ and the property name.  When binding I get the following stack trace:  java.lang.NoSuchMethodException: java.util.Arrays$ArrayList.\() at java.lang.Class.getConstructor0(Class.java:2647) at java.lang.Class.getDeclaredConstructor(Class.java:1953) at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:150) at org.springframework.beans.PropertyTypeConverter.convertToTypedCollection(PropertyTypeConverter.java:304) at org.springframework.beans.PropertyTypeConverter.convertIfNecessary(PropertyTypeConverter.java:187) at org.springframework.beans.PropertyTypeConverter.convertIfNecessary(PropertyTypeConverter.java:106) at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:713) at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:565) at org.springframework.beans.AbstractPropertyAccessor.setPropertyValue(AbstractPropertyAccessor.java:49) at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:68) at org.springframework.validation.DataBinder.applyPropertyValues(DataBinder.java:464) at org.springframework.validation.DataBinder.doBind(DataBinder.java:370) at org.springframework.web.bind.WebDataBinder.doBind(WebDataBinder.java:146) at org.springframework.web.bind.ServletRequestDataBinder.bind(ServletRequestDataBinder.java:108) at org.springframework.web.servlet.mvc.BaseCommandController.bindAndValidate(BaseCommandController.java:358)   ---  **Affects:** 2.0 M3","closed","in: core,","spring-projects-issues","2006-04-20T01:50:21Z","2012-06-19T03:52:39Z"
"","6577","Injecting java.io.File into property is not backwards compatible. [SPR-1884]","**[Colin Yates](https://jira.spring.io/secure/ViewProfile.jspa?name=yatesco)** opened **[SPR-1884](https://jira.spring.io/browse/SPR-1884?redirect=false)** and commented  Hi,  I have a property setFile(java.io.File) which was previously wired up with a system property that evaluated to ""c:/somedir"" (note the lack of file: prefix).  In S2.0M3 this is still converted into a file, but the filename is prefixed with the working directory, so the filename is something like ""c:/apps/jboss/server/default/tmp/project.war/c:/somedir"".  Which obviously doesn't work.  Changing the system property to ""file:/c:/somedir"" does of course work, but it is a change in behaviour from Spring 1.2.x.  Thanks all.    ---  **Affects:** 2.0 M3","closed","in: core,","spring-projects-issues","2006-04-11T20:11:45Z","2012-06-19T03:52:28Z"
"","6382","ChainOfResponsibilityFactoryBean; factoryBean which creates a proxy that acts as a COR over a list of objects [SPR-1684]","**[Colin Yates](https://jira.spring.io/secure/ViewProfile.jspa?name=yatesco)** opened **[SPR-1684](https://jira.spring.io/browse/SPR-1684?redirect=false)** and commented  http://forum.springframework.org/showthread.php?t=21986  I keep writing a number of implementations of a single interface and then needing to wrap all those implementations so they are all called.  For example, I might have an ErrorHandler interface and a Log4J implementation, then a Mailing implementation etc. and I want them all to fire when invoked.  I would then write a Composite implementation which traversed them all.  This was tiresome so I decided to write a FactoryBean which would do the same thing.  Attached is the source code.  It may be helpful to others, it might not :)  ---  **Attachments:** - [Copy of spring-utils.zip](https://jira.spring.io/secure/attachment/11458/Copy+of+spring-utils.zip) (_2.55 MB_) - [cor.zip](https://jira.spring.io/secure/attachment/11457/cor.zip) (_2.27 MB_)  **Issue Links:** - #7491 Target Chains: factory bean for a proxy that builds up a composite service from a list of targets (_**""is duplicated by""**_)  4 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2006-02-07T21:30:08Z","2019-01-11T21:29:39Z"
"","6363","Cannot wire up constructors(maybe setters?) that use typed Collection [SPR-1666]","**[Colin Yates](https://jira.spring.io/secure/ViewProfile.jspa?name=yatesco)** opened **[SPR-1666](https://jira.spring.io/browse/SPR-1666?redirect=false)** and commented  More details at: http://forum.springframework.org/showthread.php?p=49536#post49536  Essentially I have a constructor:      public ClassFilteringLoadEventListener(final Map","closed","in: core,","spring-projects-issues","2006-02-03T03:22:42Z","2012-06-19T03:53:58Z"
"","5995","Allow specifying which request attributes are included in RedirectView [SPR-1294]","**[Colin Yates](https://jira.spring.io/secure/ViewProfile.jspa?name=yatesco)** opened **[SPR-1294](https://jira.spring.io/browse/SPR-1294?redirect=false)** and commented  It is a pain that RedirectView appends all request parameters on the URL.  It would be nice to filter these in someway, example:  [code]interface ParameterPredicate { boolean process(final String parameterName, final Object parameter); } [/code]  RedirectView could then take an instance of this and check every parameter.  Implementations of ParameterPredicate could include an IncludeParameterPredicate, ExcludeParameterPredicate.  These implementations could include a set of regular expressions to apply to the parameter name.  Wiring would look like:  [code] \ \ \ \ \ \myName1\ \myName2\ \ \ \ \ \ [/code]  Although I am sure you guys will come up with a much neater implementation :)  http://forum.springframework.org/viewtopic.php?t=8470&highlight=&sid=fb0f81783fb2d7b3081d76561eb109f7  ---  **Affects:** 1.2.3  **Issue Links:** - #11462 Provide precise control over the attributes used in a redirect scenario (_**""is duplicated by""**_) - [ROO-2158](https://jira.spring.io/browse/ROO-2158) Deleting/creating/updating roo generated entities containing an enum property with lots of constants causes index out of bound exception while the scaffolded controller tries to redirect - #8614 RedirectView: make exposing of model parameters as request parameters optional - #7380 RedirectView with more flexible URL-building  18 votes, 19 watchers","closed","has: votes-jira,","spring-projects-issues","2005-09-08T20:08:03Z","2019-01-11T19:22:54Z"
"","5904","Add constructor-args support for PropertiesBeanDefinitionReader [SPR-1201]","**[Colin Yates](https://jira.spring.io/secure/ViewProfile.jspa?name=yatesco)** opened **[SPR-1201](https://jira.spring.io/browse/SPR-1201?redirect=false)** and commented  Quick feature request.  Could you please modify PropertiesBeanDefinitionReader so it accepts constructor arguments, possibly:  myBean.constructor1(ref)=someOtherBean   ---  **Affects:** 1.2.1","closed","type: enhancement,","spring-projects-issues","2005-08-04T00:05:41Z","2012-06-19T03:54:21Z"
"","6692","PathMatchingResourcePatternResolver resolver Javadoc needs to be clarified, reference manual needs matching enhancements [SPR-1999]","**[Colin Sampaleanu](https://jira.spring.io/secure/ViewProfile.jspa?name=colin.sampaleanu)** opened **[SPR-1999](https://jira.spring.io/browse/SPR-1999?redirect=false)** and commented  The Javadoc for PathMatchingResourcePatternResolver implies that the matching of wildcards inside classpath resources that resolve to jars will always work, when in fact there are about 3-4 steps in that process that rely on behaviour that is not guaranteed by any spec.  The Javadocs need to be fleshed out mroe to point out what level of behaviour in the resolver is guaranteed by spec, and then what level isn't, and why. The Spring reference manual chapter on resources need to be updated in a similar fashion.  The following email thread shows the issue:  On 5/10/2006 2:35 PM, Colin Sampaleanu wrote:  > Well it'd be hard to define it as a WebLogic bug, since past some level of functionality, in a classpath scenario, the code can't rely on things that are clearly defined by spec. >  > Basically, what it comes down to, if you are talking about classpath resources, the only wildcarding you can rely on by spec, and thus in any environment, is the > classpath*: > prefix with a path that has no wildcards in it. That's because that uses a simple getResources() call to get all the resources that match the non-wildcard-containing path. Any path with actual wildcards in it, for it to work, relies on the fact that you resolve to a filesystem location, or if you resolve to a jar location, that you can get a URL to the last non-wildcard path location, that URL is one of those three types (jar:, zip:, wsjar:, ), you can get a connection from that, and that connection is a JarUrlConnection, etc. And those bits are not really forced by any spec. >  > By the way, this is all visivle in the PathMatchingResourcePatternResolver class > http://www.springframework.org/docs/api/org/springframework/core/io/support/PathMatchingResourcePatternResolver.html > and I am talking about the Spring 2.0 variant. Older variants like Spring 1.1 (Spring 1.2 may be the same as 2.0) couldn't even do any wildcard matching inside jars, so the functionality was even weaker. >  > Colin >  >  > On 5/10/2006 2:20 PM, David Xxxxxxxx wrote: >  >> OK, wow, that was quite a lot more of a response then I was expecting. >> Many thanks for that! >>  >> (I think I'm going to re-read it once or twice again to make sure I've >> got it straight). >> For us, this strategy is desirable, as it means we can add what we call >> ""modules"" to the deployment without touching the configuration files >> (modules are self-defining). However, if this looks like it can't be >> relied on cross-platform, I guess I'll have to step back from that and >> hard-code the paths to the actual config files. >>  >> In the meantime, I'm going to take a position that this is a Weblogic >> bug, since it worked perfectly in WLS 8.1 and broke in 9.1. I've created >> a ticket and will let you know how it turns out (as it might be Spring >> documentation-worthy). It was also broken in Websphere 5.1.7 BTW, but >> was fixed by IBM in 5.1.8, although it could have been a different >> problem. >>  >> David >>  >> -----Original Message----- >> From: Colin Sampaleanu [mailto:xxxxx@xxxxxx.com] Sent: Wednesday, May 10, 2006 2:14 PM >> To: David Xxxxxxxx >> Subject: Re: Wildcards in Paths Given to ClassPathXmlApplicationContext >>  >> Hi David, >>  >> The wildcard behaviour is something that can be relied on, depending on >> how it's used, in all environments, and beyond that, only in some >> environments. You are combining both classpath*:, and wildcards in the >> path itself, which complicates the picture. >>  >> A wildcard in a path will always work if the resource ultimately ends up >> being onthe filesystem. So >> file:/some/path/\*/to/resource >>  >>> will always work everywhere, and so will >>> /some/path/*/to/resource >>> if you are talking about a FileSystem application context, which implies >>> a filesystem location. >>  >> A classpath*:xxxxx/xxxxx will always work, with a simple path. So >> classpath*:some/path/to/resource >> will always ask the classloader hierarchy to return all the resources >> matching that exact path, and merge them into one definition. >>  >> Past this point is where it gets less 100%. >>  >> If you have a definition resource path which is a classpath location and >> has a wildcard, e.g. >> classpath:some/path/\*/to/resource >>  >>> some/path/*/to/resource             (in a classpath app context constructor, implying classpath) >>> and if this ultimately resolves to a filesystem location, then the >>> wildcard will always work, but keep in mind the J2EE spec does not >>> define or force classpath locations to resolve to a filesystem location. >>  >> Some do, and some don't (e.g. WebLogic does not actually expand out jar >> files, but uses resources right out of the jars, with the URL path >> basically containing both the jar/zip name and the resource within it, >> and a special url handler to handle that ""zip:"" prefix). >>  >> If you have a definition resource path which is a classpath location and >> has a wildcard, e.g. >> classpath:some/path/\*/to/resource >>  >>> some/path/*/to/resource             (in a classpath app context constructor, implying classpath) >>> and if this ultimately resolves to a JAR, then the wildcard should >>> generally work. What Spring will do is try to get a JarUrlConnection for >>> the root path up to but not including the wildcard, and then walk >>> through the jar file appropriately to match resources via the wildcard. So this handles the general jar: prefix, WebLogic's zip: prefix, and >>> WebSphere's wsjar: prefix. >>  >> But while resources resolving to somewhere inside a jar should work most >> of the time, there really are some ""ifs"" for this to work.  Spring has >> to be able to do a getResource() on the path up to the wildcard, and get >> back a a valud URL (ClassLoader's getResource() method doesn't actually >> define what happens if you get a path segment as a resource as opposed >> to a file), and this has to resolve to an actual URL type that has the >> ""jar:"", ""zip:"", or ""wsjar:"" prefixes I mentioned. Then Spring has to be >> able to do a getConnection() on that, and get back a JarUrlConnection, >> so it can walk the jar file, but there is no guarantee on the latter by >> spec, it's just how it works in most environments. >>  >> classpath*: just adds another level, where it ends up working via >> getResources(), to get all the matching roots from all classloaders in >> the hierarchy. So it doesn't change the picture much. >>  >> I hope this clarifies things somewhat. The reality is that >> **classpath**:com/xxxxxxxxxxxx/**/service-config.xml >> or >> * classpath:com/xxxxxxxxxxxx/**/service-config.xml* >>  >> will work in most environments, but can not be guaranteed by spec. >>  >> Colin >>  >>  >> On 5/10/2006 9:47 AM, David Xxxxxxxx wrote: >>  >>> Hi Colin, >>>  >>> Have you guys encountered regressions with Weblogic 9.1. As you may recall our app uses config files at ""well known locations"" and uses wildcards to load them: Our ""beanRefContext.xml"", which holds all the beans for the service and data tiers, loaded at container startup looks like this: >>>  >>> \ >>>  >>>> \ >>>      >>>      >>>        >>  >>  >> \classpath:com/xxxxxxxx/platform/applicationContext.xml\ >>  >>> *  >>  >> \classpath*:com/xxxxxxxxx/**/service-config.xml\* >>  >>> *  >>>        >>>          classpath*:com/xxxxxxxxx/**/data-config.xml* >>>        >>>    >>>   \ >>>    >>>   > \ >>>  >>> \ >>>  >>> It seems that this works perfectly under all app servers (Websphere >>> 5.1 needed a particular service release in order to make it work). And >>  >>  >>> older versions of Weblogic work. And Oracle works. And exploded deployment works (even on WLS 9.1). But WLS 9.1 no longer works if the >>  >>  >>> app is deployed as an EAR. It silently does not find the service-config.xml and data-config.xml files. There are some references in the Spring forum, including some you've responded to about similar problems, but it's not completely clear what the final answer should be. >>>  >>> Is this wildcard behaviour something that you think we should count on? There seems to be differences and issues between the various app server vendors. >>>  >>> It's going to take me some time to deal with BEA on this issue, but I'm wondering what your opinion is on this. >>>  >>> David  ---  **Affects:** 2.0 M4","closed","type: enhancement,","spring-projects-issues","2006-05-10T05:55:01Z","2019-01-13T22:48:07Z"
"","6663","Bring LdapTemplate functionality into Spring codebase from external SF project [SPR-1970]","**[Colin Sampaleanu](https://jira.spring.io/secure/ViewProfile.jspa?name=colin.sampaleanu)** opened **[SPR-1970](https://jira.spring.io/browse/SPR-1970?redirect=false)** and commented  I am bringing LdapTemplate into the Spring codebase. It is currently a separate SF project, now at v1.0 as of this last week.   ---  **Affects:** 2.0 M5","closed","type: enhancement,","spring-projects-issues","2006-04-29T10:34:59Z","2012-06-19T03:18:55Z"
"","6019","One BeanFactoryPostProcessor can't modify definition of a 2nd that has yet to run [SPR-1319]","**[Colin Sampaleanu](https://jira.spring.io/secure/ViewProfile.jspa?name=colin.sampaleanu)** opened **[SPR-1319](https://jira.spring.io/browse/SPR-1319?redirect=false)** and commented  If you try to use one bean factory post-processor it can't actually modify the definion of a 2nd post-processor, even if that one has yet to run. This is because the appcontext as a one time process builds up two lists (ordered and non-ordered) of all the post-processors, and actually creates the objects then. Any modified bean definition past that point will be irrelevant.  I'm not sure this can be resolved without some painful code, but I'm putting the issue here so it can be either marked 'won't resolve' or 'working as intended', or actually fixed, and people can find it when searching.  Here's a snippet of config that shows the problem. In this case, one PropertyPlaceHolderConfigurer modifies the 2nd:  \ \ \\ \           	                    	                    	     	     	     	     	    	     	     		     	       ---  **Affects:** 1.2.4  **Issue Links:** - #5782 AbstractApplicationContext shouldn't eagerly instantiate all BeanFactoryPostProcessors (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2005-09-22T08:36:04Z","2019-01-11T21:18:21Z"
"","6808","Support relative attribute paths (like XPath does). [SPR-2117]","**[Colbert Philippe](https://jira.spring.io/secure/ViewProfile.jspa?name=colbert_philippe)** opened **[SPR-2117](https://jira.spring.io/browse/SPR-2117?redirect=false)** and commented  In my application, it is often necessary to set (write) a value of an attribute with the value from another attribute.   This is a very important feature.   Spring already supports that feature with  and other utilities.   That's absolute attribute addressing.  That's great!  However, Spring should support relative path addressing for the path="".."" attribute.   For instance:  I should be able to read the color of an object House and write it to each of its contained object Room (if room has reference to House).  The reference here is relative starting from object Room rather than absolute because we don't know how many Room objects are in the House object.   In short, strongly suggest that Spring supports relative attribute addressing like Xpath does.  To further help with implementing this feature:  I have used in the past the Jakarta JXPath utility.  It's a very powerful and robust utility that can do read/write of attributes using the robust and W3 standard called Xpath.  I strongly suggest that Spring uses the JXPath utility to read/write attributes and thus support the power Xpath language for addressing attributes.   It should take little time to do since JXPath utility is easy to use and robust.    ---  **Affects:** 2.0 M5","closed","type: enhancement,","spring-projects-issues","2006-06-08T23:47:42Z","2009-02-18T03:32:29Z"
"","6754","Allow attributes & constructor parameters to be set from attribute of other bean. [SPR-2061]","**[Colbert Philippe](https://jira.spring.io/secure/ViewProfile.jspa?name=colbert_philippe)** opened **[SPR-2061](https://jira.spring.io/browse/SPR-2061?redirect=false)** and commented  The attribute setting and constructor parameter of Spring are great.   As I am using Spring in a real application that is not business related but rather science related, I find myself missing some capalities.   This is one of them.  If a bean that is already initialized has an primitive or object that I want to pass into the constructor of another bean, why can't I do it?   It's technically feasible to do.   Spring already does access bean attributes elsewhere.   Also a utility like Jakarta JXPath does that well.  My suggestion is to allow:  1 - The setting of attributes of beans with values of attribute in another bean that are already initialized. 2 - The passing of constructor parameters with values of attribute in another bean that are already initialized.  Naturally, the attribute can be a primitive or object.   Extending the XML elements \ and \ with the capability to seek into other bean attributes, might be way of implementing this.   ---  **Affects:** 2.0 M4","closed","type: enhancement,","spring-projects-issues","2006-05-25T18:28:05Z","2012-06-19T03:52:36Z"
"","6753","How to exit gracefully from Spring so it  calls  cleanup methods? [SPR-2060]","**[Colbert Philippe](https://jira.spring.io/secure/ViewProfile.jspa?name=colbert_philippe)** opened **[SPR-2060](https://jira.spring.io/browse/SPR-2060?redirect=false)** and commented  I am using Spring in a stand-alone environment.   Spring creates and initializes my beans correctly and in a predictable order.   I can see it in the trace messages.   However when my application exits, I don't see the invoking of my cleanup.   I have a strong feeling that I should be calling a Spring cleanup message before exiting.  I should also say that I have experimented with Spring.   I am satisfied that Spring calls init and cleanup methods as described in the reference manual.   In my stand-alone application, I want to know how to exit gracefully.  Here is end section of my trace file.   The bean with the main() is called Exec.java.  You can see that the init() was called properly but when my application exits, my cleanup methods are not called.   I suspect that I am not exiting gracefully.      [java] 1062 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory  - Invoking custom init method 'init' on bean with name 'rootNode'     [java] EvolvingPopulationNode.init()     [java] 1062 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory  - Invoking BeanPostProcessors after initialization of bean 'rootNode'     [java] 1062 [main] DEBUG org.springframework.core.CollectionFactory  - Creating [java.util.LinkedHashSet]     [java] 1062 [main] DEBUG org.springframework.core.CollectionFactory  - Creating [java.util.LinkedHashSet]     [java] 1078 [main] DEBUG org.springframework.context.support.ClassPathXmlApplicationContext  - Publishing event in context [org.springframework.context.support.ClassPathXmlApplicationContext;hashCode=26143190]: org.springframework.context.event.ContextRefreshedEvent[source=org.springframework.context.support.ClassPathXmlApplicationContext: display name [org.springframework.context.support.ClassPathXmlApplicationContext;hashCode=26143190]; startup date [Thu May 25 16:25:49 EDT 2006]; root of context hierarchy]     [java] 1078 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory  - Returning cached instance of singleton bean 'exec'     [java] Exec.run() was called!     [java] 1078 [main] INFO  main  - Exec.run() was called!     [java] Exit Exec.main()  BUILD SUCCESSFUL Total time: 3 seconds   ---  **Affects:** 2.0 M4","closed","in: core,","spring-projects-issues","2006-05-25T17:43:28Z","2012-06-19T03:52:43Z"
"","6748","Support for XInclude in the beans.xml file...because getting too big! [SPR-2055]","**[Colbert Philippe](https://jira.spring.io/secure/ViewProfile.jspa?name=colbert_philippe)** opened **[SPR-2055](https://jira.spring.io/browse/SPR-2055?redirect=false)** and commented  My beans.xml is getting big and a little repetitive.  I am using parent/child element which helps quite a bit but my file is still getting big.  It would be nice if Spring supported the XML technology XInclude which allows the user to put ""include"" type statements inside of the XML file.   It would allow the user to split the beans.xml into two or more file to make things more orderly.   This would have the added advantage of making this reusable.  I worked with XInclude before at the w3 API level.   I am almost sure that XInclude is supported in Java 1.5 and less sure about 1.4.2.   For 1.4.2, there is a way around it.  There are external APIs for effectivley merging all the files into a single file and then read it as an XML file.  Anyways, this feature would be nice.   ---  **Affects:** 2.0 M4","closed","type: enhancement,","spring-projects-issues","2006-05-24T05:50:24Z","2012-06-19T09:37:43Z"
"","6747","Spring tries to find modules I am not using at all..why? [SPR-2054]","**[Colbert Philippe](https://jira.spring.io/secure/ViewProfile.jspa?name=colbert_philippe)** opened **[SPR-2054](https://jira.spring.io/browse/SPR-2054?redirect=false)** and commented  Spring is attempting to load modules that I am not usnig at all.  Why?  Is there a hidden configuration file or something?  Here is the message: ""java.lang.ClassNotFoundException: groovy.lang.GroovyObject"".  It's giving me an exception and recovers from the exception.  That's not how I want Spring to behave.  How can I make it that Spring only loads the absolute minimum?  I can't figure out how to resolve this even after browsing the Spring Reference Manual.   ---  **Affects:** 2.0 M4","closed","in: core,","spring-projects-issues","2006-05-24T05:10:20Z","2019-01-12T16:52:14Z"
"","6744","How to specify multiple dependencies with ? [SPR-2051]","**[Colbert Philippe](https://jira.spring.io/secure/ViewProfile.jspa?name=colbert_philippe)** opened **[SPR-2051](https://jira.spring.io/browse/SPR-2051?redirect=false)** and commented  The Spring reference manual (spring-reference.pdf) says that multiple dependencies can be specified with attribute depends-on but it does not say explicitely how to do it.   How can we specify multiple dependencies?  \  \ \ But myBean depends on both otherBean.1 and otherBean.2.  How can I do this for multiple dependencies?   ---  **Affects:** 2.0 M4","closed","in: core,","spring-projects-issues","2006-05-23T04:27:45Z","2019-01-11T18:17:41Z"
"","6737","Destroy method invokation does not work! [SPR-2044]","**[Colbert Philippe](https://jira.spring.io/secure/ViewProfile.jspa?name=colbert_philippe)** opened **[SPR-2044](https://jira.spring.io/browse/SPR-2044?redirect=false)** and commented  Invoking the destroy method from bean.xml does not work.   I copied and pasted directly from the manual.  \ \  Init is called successfully but cleanup is not invoked.  Also, I suspect that the two default options below for invoking init & cleanup globally does not work.  This may be related to the bug I justed described above.   I suggest taking a look at this also.  \   ---  **Affects:** 2.0 M4","closed","in: core,","spring-projects-issues","2006-05-21T03:30:54Z","2019-01-11T18:15:22Z"
"","6725","Allow regular expression searches in BeanFactory.getBean(...). [SPR-2032]","**[Colbert Philippe](https://jira.spring.io/secure/ViewProfile.jspa?name=colbert_philippe)** opened **[SPR-2032](https://jira.spring.io/browse/SPR-2032?redirect=false)** and commented  I suggest to add one or two new methods in interface BeanFactory to allow regular expression searches of one or more bean(s).  By adding new methods, the previous code would not be affected.  The first method would return the single first bean that has a name that matches the regular expression.  - Object regExGetBean(String idRegEx)  The second method would return a collection of beans that match the regular expression  List regExGetBeans(String idRegEx)    ---  2 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2006-05-17T23:50:09Z","2012-06-19T09:37:23Z"
"","6685","Another reason to implement custom XML initiation for beans. [SPR-1992]","**[Colbert Philippe](https://jira.spring.io/secure/ViewProfile.jspa?name=colbert_philippe)** opened **[SPR-1992](https://jira.spring.io/browse/SPR-1992?redirect=false)** and commented  Another reason to implement custom XML initiation for beans.  Here is another reason to support custom XML initialization for beans.   My application requires that I initialize some beans with a small script to do configurable initialization tasks.   I would like to put that script between the respective \....\ instead of in a separate file, to keep the number of files to minimum.  By allowing a custom section \ XML tag, I could put a small script to do my task. \ \ \ .... My script goes here... \ \ \ \ \ < application-custom>  One last point: If my script is too big, I might put it in a separate section of the same bean.xml file.   So the DTD of bean.xml should allow for a custom section both inside the \....\ and also at the root level.   The root level custom section can have whatever the programmer wants.   My bean would reference the XML id of my new section.   I use Xpath to navigate through XML files, which is typical.  So Spring has to allow for that.  If Spring would support this custom initialization feature.  It would gain great flexibility and appreciation from the programming community.   Feel free to contact me if you need further information.   ---  **Affects:** 2.0 M4","closed","type: enhancement,","spring-projects-issues","2006-05-08T21:51:20Z","2012-06-19T09:37:35Z"
"","6683","Allow custom initialization of bean with XML sub-element. [SPR-1990]","**[Colbert Philippe](https://jira.spring.io/secure/ViewProfile.jspa?name=colbert_philippe)** opened **[SPR-1990](https://jira.spring.io/browse/SPR-1990?redirect=false)** and commented  Sometimes, a bean needs also to be initialized structural information which is not covered by simple attribute setting.   Structural information can be the structure of a tree for instance or a specific network topology (architecture).   Structural information can be written in XML form starting from a parent XML element.   For instance \ \ \ .... \  I suggest that Spring support this sort of initialization of beans by allowing the bean to have an additional callback method (possibly via a new optional interface).    The callback would take as argument the XML element (\) that initializes the bean.  I suspect that the DTD of the beans.xml must be modified to support a custom element (\) inside the bean XML element (\).  Furthermore to make this process even more programmer-friendly, I suggest that there be a way to test the structure of the \ of the bean by coding it in a separate DTD file.   The programmer should be able to test the structure validity of the \ section for the bean.   Each bean that has a \, should be able to have a separate DTD file to test only the costom-init section.  The testability would be nice but not absolutely necessary.   It would be good that Spring supports \ section inside \ as a start.    ---  **Affects:** 2.0 M4","closed","type: enhancement,","spring-projects-issues","2006-05-06T18:29:31Z","2012-06-19T09:37:37Z"
"","6656","proxyTargetClass or proxy-target-class [SPR-1963]","**[Claus Nielsen](https://jira.spring.io/secure/ViewProfile.jspa?name=clanie)** opened **[SPR-1963](https://jira.spring.io/browse/SPR-1963?redirect=false)** and commented  In the schema at http://www.springframework.org/schema/aop/spring-aop.xsd the config element has an proxyTargetClass attribute. In the spring-aop.xsd file in the dist folder of the m4 distribution that attribute is called proxy-target-class.  The only spring-aop.xsd file I have been able to find in the source tree is src/org/springframework/aop/config/spring-aop.xsd, and there the attribute is called proxyTargetClass (in all versions, as far as I can tell).  I have an application which, when deployed to Tomcat, fails with this exception: org.springframework.beans.factory.BeanDefinitionStoreException: Line 20 in XML document from class path resource [conf/Bs400FacadeContext.xml] is invalid; nested exception is org.xml.sax.SAXParseException: cvc-complex-type.3.2.2: Attribute 'proxyTargetClass' is not allowed to appear in element 'aop:config'. Caused by: org.xml.sax.SAXParseException: cvc-complex-type.3.2.2: Attribute 'proxyTargetClass' is not allowed to appear in element 'aop:config'. ......  For further information see http://forum.springframework.org/showthread.php?t=24411  I'm not sure, but assume that this is because it uses the wrong (??) .xsd file supplied with m4.  In m3 it's also proxyTargetClass in the dist/spring-aop.xsd file.  Btw. in Jira issue 1867 Juergen Hoeller says: A CGLIB proxy can be enforced through proxyTargetClass=""true"" and Rob Harrob says: To ensure concrete type compatibility set the 'proxy-target-class' attribute of 'aop:config' to 'true'.  Who is right, and where does that file in m4 come from?  Kind regards Claus Nielsen   ---  **Affects:** 2.0 M4  1 votes, 1 watchers","closed","in: core,","spring-projects-issues","2006-04-26T19:00:04Z","2012-06-19T03:52:32Z"
"","6561","AOP changes the type of proxy used for advised beans. [SPR-1867]","**[Claus Nielsen](https://jira.spring.io/secure/ViewProfile.jspa?name=clanie)** opened **[SPR-1867](https://jira.spring.io/browse/SPR-1867?redirect=false)** and commented  This test:  public class A_Test extends TestCase { BeanFactory bFac; protected void setUp() throws Exception { bFac = new ClassPathXmlApplicationContext(""com/bmd/menu/aspect/A_TestContext.xml""); } public void test() { A_TestBean tb = (A_TestBean) bFac.getBean(""testBean""); tb.testMethod(); } }  Fails with a ClassCastException if A_TestBean implements an interface and is advised. It succeed if - I remove the  - Set proxyTargetClass=""false"" in the  tag - A_TestBean dosn't implement any interface.  I'll attach source- and configuration files.   ---  **Affects:** 2.0 M3  **Attachments:** - [A_Test.java](https://jira.spring.io/secure/attachment/11551/A_Test.java) (_527 bytes_) - [A_TestAdvice.java](https://jira.spring.io/secure/attachment/11552/A_TestAdvice.java) (_188 bytes_) - [A_TestBean.java](https://jira.spring.io/secure/attachment/11553/A_TestBean.java) (_125 bytes_) - [A_TestBeanIF.java](https://jira.spring.io/secure/attachment/11554/A_TestBeanIF.java) (_107 bytes_) - [A_TestContext.xml](https://jira.spring.io/secure/attachment/11555/A_TestContext.xml) (_830 bytes_)","closed","in: core,","spring-projects-issues","2006-04-06T22:54:23Z","2006-04-10T20:42:00Z"
"","6593","MockFilterChain - needed in spring-mock.jar [SPR-1900]","**[Claus Ibsen](https://jira.spring.io/secure/ViewProfile.jspa?name=davsclaus)** opened **[SPR-1900](https://jira.spring.io/browse/SPR-1900?redirect=false)** and commented  Hi  I am using the excellent spring-mock.jar with mocks for web.  I am in a need for a mock for javax.servlet.FilterChain.  Would be nice if one was provided in spring, for completeness.   ---  **Affects:** 1.2.7, 2.0 M3  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2006-04-16T21:18:48Z","2012-06-19T03:52:27Z"
"","5991","Log4jConfigurer to support system properties [SPR-1290]","**[Claus Ibsen](https://jira.spring.io/secure/ViewProfile.jspa?name=davsclaus)** opened **[SPR-1290](https://jira.spring.io/browse/SPR-1290?redirect=false)** and commented  See the forum with the original use-case http://forum.springframework.org/viewtopic.php?t=8615&sid=a82827b6ce2bff91b3fc2a7beaa49ca8  I have then created a patch to specify system property in the web.xml for the location of the log4j properties file.  I have tried with the jpetstore sample: \ \log4jConfigLocation\ \env:clausKey\ \  And enabeling the listener \ \org.springframework.web.util.Log4jConfigListener\ \  And deleting the log4j.properties from the WEB-INF folder.  I then started Tomcat with the system property -DclausKey=c:/claus-log4j.properties It works nicely.  The source files are attached here. I have included a unit test.  To Spring Team: There is a javadoc copy/past error in ResourceUtils.getUrl(). I have modified it.  The main change in the code is that ResourceUtils now support env: as a prefix.   ---  **Affects:** 1.2.4  **Attachments:** - [Log4jWebConfigurer.java](https://jira.spring.io/secure/attachment/11138/Log4jWebConfigurer.java) (_8.25 kB_) - [ResourceUtils.java](https://jira.spring.io/secure/attachment/11137/ResourceUtils.java) (_7.74 kB_) - [ResourceUtilsTests.java](https://jira.spring.io/secure/attachment/11139/ResourceUtilsTests.java) (_2.46 kB_) - [spr-1290patch.txt](https://jira.spring.io/secure/attachment/11140/spr-1290patch.txt) (_6.74 kB_)","closed","type: enhancement,","spring-projects-issues","2005-09-07T23:40:31Z","2012-06-19T03:54:16Z"
"","5940","Inconsistency in the Spring Ref Manual [SPR-1240]","**[Chuck Herrick](https://jira.spring.io/secure/ViewProfile.jspa?name=cherrick)** opened **[SPR-1240](https://jira.spring.io/browse/SPR-1240?redirect=false)** and commented  Here is an example of something I find frustrating about the usually great Ref Manual: ""Note that a bean definition is represented by the real interface org.springframework.beans.factory.config.BeanDefinition, and its various sub-interfaces and implementations. However, it is very unlikely that most user code would ever work with a BeanDefinition.  Besides bean definitions which contain information on how to create a bean, a bean factory can also allow to register existing bean instances. DefaultListableBeanFactory supports this through the registerSingleton method, as defined by the org.springframework.beans.factory.config.ConfigurableBeanFactory interface. Typical applications purely work with bean definitions, though.""  Note the last sentences in each paragraph. Clear as mud, right?  Perhaps we can get this fixed or rewritten to clarify   --- No further details from [SPR-1240](https://jira.spring.io/browse/SPR-1240?redirect=false)","closed","in: core,","spring-projects-issues","2005-08-19T06:06:51Z","2005-08-21T20:08:52Z"
"","6874","ClassUtils.forName() is inconsistent with ClassUtils.getQualifiedName() for multidimensional arrays [SPR-2183]","**[Christopher Sahnwaldt](https://jira.spring.io/secure/ViewProfile.jspa?name=jcsahnwaldt)** opened **[SPR-2183](https://jira.spring.io/browse/SPR-2183?redirect=false)** and commented  see http://opensource.atlassian.com/projects/spring/browse/SPR-2165 - exactly the same problem ClassEditor.getAsText() used to have.   ---  **Affects:** 2.0 RC1","closed","in: core,","spring-projects-issues","2006-06-22T23:25:15Z","2019-01-11T18:01:42Z"
"","6856","ClassEditor is inconsistent with multidimensional arrays [SPR-2165]","**[Christopher Sahnwaldt](https://jira.spring.io/secure/ViewProfile.jspa?name=jcsahnwaldt)** opened **[SPR-2165](https://jira.spring.io/browse/SPR-2165?redirect=false)** and commented  I can set a multidimensional array class with ClassEditor.setAsText(""int[][]""), but when I try to get back the name with ClassEditor.getAsText(), I get ""[I[]"".  The reason is that ClassUtils.forName() calls itself recursively for array classes, but ClassEditor.getAsText() only handles one array dimension and uses the default Java name for the others.   ---  **Attachments:** - [ClassEditorTest.java](https://jira.spring.io/secure/attachment/11717/ClassEditorTest.java) (_1.13 kB_) - [ClassEditorTest.txt](https://jira.spring.io/secure/attachment/11718/ClassEditorTest.txt) (_1.20 kB_)","closed","in: core,","spring-projects-issues","2006-06-20T10:19:27Z","2012-06-19T03:52:46Z"
"","6676","after catching InterruptedException, re-interrupt current thread [SPR-1983]","**[Christopher Sahnwaldt](https://jira.spring.io/secure/ViewProfile.jspa?name=jcsahnwaldt)** opened **[SPR-1983](https://jira.spring.io/browse/SPR-1983?redirect=false)** and commented  There are a few places where something like this is done:  try { Thread.sleep(this.interval * 1000); } catch (InterruptedException ex) { // ignore }  I searched the Spring source (a version from Jan 2006) for uses of InterruptedException and found three spots (there may be more) where an InterruptedException is swallowed in this way:  org.springframework.jdbc.support.DatabaseStartupValidator.afterPropertiesSet() org.springframework.jms.listener.DefaultMessageListenerContainer.destroyListener() org.springframework.util.ConcurrencyThrottleSupport.beforeAccess()  While on usually cannot do much about an InterruptedException, it's generally a good idea to re-interrupt the thread:  catch (InterruptedException ex) { Thread.currentThread().interrupt(). }  Otherwise, the interrupt status is simply lost, but higher-level code may want to react to the interrupt status.  This technique is used in several places in java.util.concurrent, e.g. java.util.concurrent.locks.AbstractQueuedSynchronizer.   ---  **Affects:** 1.2.7, 2.0 M4","closed","type: enhancement,","spring-projects-issues","2006-05-04T06:14:40Z","2012-06-19T03:52:32Z"
"","6302","resolve paths relative to the bean definition file in which they appear [SPR-1605]","**[Christopher Sahnwaldt](https://jira.spring.io/secure/ViewProfile.jspa?name=jcsahnwaldt)** opened **[SPR-1605](https://jira.spring.io/browse/SPR-1605?redirect=false)** and commented  Some beans in our application use XSLT and XSD files. For such beans, we specify their XSLT/XSD file in a bean definition file. We would like to put the XSLT/XSD file in the same directory as the bean definition file and use **relative** paths in our bean definitions (relative to the bean definition file).  Let's say the following appears in \/foo/FooBeans.xml (where \ is the root of the ApplicationContext):  \ \\FooSchema.xsd\\ \  It would be nice if this (or something similar, maybe an additional attribute) would let the property fooParser.xsdFile point to \/foo/FooSchema.xsd when the bean fooParser is instantiated.  Currently we have to make sure that fooParser.xsdFile is of type core.io.Resource (which is fine), but in the bean definition file we have to use a path relative to the **application context root**  (not quite what we want):  \ \\/foo/FooSchema.xsd\\ \  I've looked around in the forums etc. but haven't found anything about such relative paths. I would think that such a feature would be useful to many users. It would also be more consistent with the way paths are used in \.  I've toyed around with several ways to implement this myself (directly in the XmlBeanDefinitionParser; store not just the resource description in the BeanDefinition, but the Resource;  ...), but couldn't find any way that looks good.  But I'm still pretty new to Spring, so maybe I've gotten something completely wrong...   ---  **Affects:** 2.0 M1  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2006-01-10T03:36:49Z","2012-06-19T09:37:21Z"
"","6301","AbstractApplicationContext.registerShutdownHook should call Runtime.removeShutdownHook [SPR-1604]","**[Christopher Sahnwaldt](https://jira.spring.io/secure/ViewProfile.jspa?name=jcsahnwaldt)** opened **[SPR-1604](https://jira.spring.io/browse/SPR-1604?redirect=false)** and commented  AbstractApplicationContext.close() contains the lines:  // If we registered a JVM shutdown hook, we don't need it anymore now: // We've already explicitly close the context. if (this.shutdownHook != null) { Runtime.getRuntime().removeShutdownHook(this.shutdownHook); }  AbstractApplicationContext.registerShutdownHook() should probably do something similar before registering a new shutdown hook. As far as I can tell, the current code would register multiple shutdown hooks if registerShutdownHook() is called more than once, and only the last one added could be removed in close().   ---  **Affects:** 2.0 M1","closed","in: core,","spring-projects-issues","2006-01-10T02:12:42Z","2012-06-19T03:54:19Z"
"","6291","StringIndexOutOfBoundsException when calling PropertyAccessorUtils.getLastNestedPropertySeparatorIndex(""x"") [SPR-1594]","**[Christopher Sahnwaldt](https://jira.spring.io/secure/ViewProfile.jspa?name=jcsahnwaldt)** opened **[SPR-1594](https://jira.spring.io/browse/SPR-1594?redirect=false)** and commented  There's a bug in org.springframework.beans.PropertyAccessorUtils.getNestedPropertySeparatorIndex(String propertyPath, boolean last):  If last is true, the test in while ((last && i >= 0) || i < propertyPath.length()) { is always true, and if propertyPath contains no ""."" dot, we never leave the loop, and i eventually becomes -1.  A possible fix is while (last ? i >= 0 : i < propertyPath.length()) {  And then another tiny improvement: change the lines  int i = (last ? propertyPath.length() - 1 : 0); while ((last && i >= 0) || i < propertyPath.length()) {  to  final int length = propertyPath.length(); int i = (last ? length - 1 : 0); while (last ? i >= 0 : i < length) {   ---  **Affects:** 1.2.6, 2.0 M1","closed","in: core,","spring-projects-issues","2006-01-05T06:44:07Z","2012-06-19T03:54:32Z"
"","6284","java.lang.Error not handled by ObjectUtils.isCheckedException() and ObjectUtils.isCompatibleWithThrowsClause() [SPR-1587]","**[Christopher Sahnwaldt](https://jira.spring.io/secure/ViewProfile.jspa?name=jcsahnwaldt)** opened **[SPR-1587](https://jira.spring.io/browse/SPR-1587?redirect=false)** and commented  According to the JLS, every Throwable is a checked exception, except subclasses of java.lang.Error and java.lang.RuntimeException. see http://java.sun.com/docs/books/jls/third_edition/html/exceptions.html#11.2  - org.springframework.util.ObjectUtils.isCheckedException()   return (ex instanceof Exception) && (!(ex instanceof RuntimeException));   should be   return !(ex instanceof Error || ex instanceof RuntimeException);  - org.springframework.util.ObjectUtils.isCompatibleWithThrowsClause()   if (ex instanceof RuntimeException) {   should be   if (ex instanceof RuntimeException || ex instanceof Error) {  ObjectUtilsTests.testIsCheckedException() would then have to adapted: assertFalse(ObjectUtils.isCheckedException(new Throwable())); should be assertFalse(ObjectUtils.isCheckedException(new Throwable()));   ---  **Affects:** 1.2.6, 2.0 M1","closed","in: core,","spring-projects-issues","2006-01-02T22:30:42Z","2012-06-19T03:54:25Z"
"","6283","possible NullPointerException in XmlBeanDefinitionReader.setParserClass() [SPR-1586]","**[Christopher Sahnwaldt](https://jira.spring.io/secure/ViewProfile.jspa?name=jcsahnwaldt)** opened **[SPR-1586](https://jira.spring.io/browse/SPR-1586?redirect=false)** and commented  tiny bug in org.springframework.beans.factory.xml.XmlBeanDefinitionReader.setParserClass():  if (this.parserClass == null || !XmlBeanDefinitionParser.class.isAssignableFrom(parserClass)) { throw new IllegalArgumentException(""parserClass must be an XmlBeanDefinitionParser""); }  is wrong; it should be  if (parserClass == null || !XmlBeanDefinitionParser.class.isAssignableFrom(parserClass)) { throw new IllegalArgumentException(""parserClass must be an XmlBeanDefinitionParser""); }   ---  **Affects:** 1.2.6, 2.0 M1","closed","in: core,","spring-projects-issues","2006-01-02T22:22:06Z","2012-06-19T03:54:01Z"
"","6256","New CustomizableLogInterceptor to be able to specify the log level [SPR-1558]","**[Christophe Grosjean](https://jira.spring.io/secure/ViewProfile.jspa?name=christophe_grosjean)** opened **[SPR-1558](https://jira.spring.io/browse/SPR-1558?redirect=false)** and commented  The current AbstractTraceInterceptor and CustomizableTraceInterceptor, as their names say, logs with the trace level.  It would be nice to be able to configure as well the log level   ---  **Affects:** 1.2.6  **Attachments:** - [AbstractLogInterceptor.java](https://jira.spring.io/secure/attachment/11362/AbstractLogInterceptor.java) (_11.36 kB_) - [CustomizableLogInterceptor.java](https://jira.spring.io/secure/attachment/11363/CustomizableLogInterceptor.java) (_15.94 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-webflow/commit/540aa090d380eef38b8a45b54b90a3ee4ac9ecf7","closed","type: enhancement,","spring-projects-issues","2005-12-21T18:15:19Z","2006-01-14T04:26:42Z"
"","6236","problem when configuring a bean to inherit from an alias [SPR-1537]","**[Christophe Grosjean](https://jira.spring.io/secure/ViewProfile.jspa?name=christophe_grosjean)** opened **[SPR-1537](https://jira.spring.io/browse/SPR-1537?redirect=false)** and commented  Hi,  I have an exception when doing this in my config :  \ \ \  After looking at Spring code, it seems that, when merging the bean definitions, there is no lookup at the alias map before lookup the BeanDefinition map.  Did I do sth wrong ?  Here is the exception :  at org.springframework.beans.factory.support.DefaultL istableBeanFactory. getBeanDefinition(DefaultListableBeanFactory.java: 349) at org.springframework.beans.factory.support.Abstract BeanFactory.getMerg edBeanDefinition(AbstractBeanFactory.java:671) at org.springframework.beans.factory.support.Abstract BeanFactory.getMerg edBeanDefinition(AbstractBeanFactory.java:702) at org.springframework.beans.factory.support.Abstract BeanFactory.getMerg edBeanDefinition(AbstractBeanFactory.java:671) at org.springframework.beans.factory.support.DefaultL istableBeanFactory. getBeanNamesForType(DefaultListableBeanFactory.jav a:138) at org.springframework.context.support.AbstractApplic ationContext.getBea nNamesForType(AbstractApplicationContext.java:602) at org.springframework.context.support.AbstractApplic ationContext.invoke BeanFactoryPostProcessors(AbstractApplicationConte xt.java:359) at org.springframework.context.support.AbstractApplic ationContext.refres h(AbstractApplicationContext.java:300) at org.springframework.web.context.support.AbstractRe freshableWebApplica tionContext.refresh(AbstractRefreshableWebApplicat ionContext.java:134) at org.springframework.web.context.ContextLoader.crea teWebApplicationCon text(ContextLoader.java:230) at org.springframework.web.context.ContextLoader.init WebApplicationConte xt(ContextLoader.java:156) at org.springframework.web.context.ContextLoaderServl et.init(ContextLoad erServlet.java:81)   ---  **Affects:** 1.2.5","closed","in: core,","spring-projects-issues","2005-12-14T06:10:15Z","2012-06-19T03:53:56Z"
"","6877","When used to invoke a ""void method"" the MethodInvokingFactoryBean returns null instead of VoidType [SPR-2186]","**[Christian Tzolov](https://jira.spring.io/secure/ViewProfile.jspa?name=tzolov)** opened **[SPR-2186](https://jira.spring.io/browse/SPR-2186?redirect=false)** and commented  When used for a void method invocation the MethodInvokingFactoryBean returns a 'null'  value instead of  VoidType.   (Test is attached)   ---  **Affects:** 2.0 RC1  **Attachments:** - [MethodInvokingFactoryBean_VoidReturnValueTest.java](https://jira.spring.io/secure/attachment/11723/MethodInvokingFactoryBean_VoidReturnValueTest.java) (_1.06 kB_) - [TestContext.xml](https://jira.spring.io/secure/attachment/11724/TestContext.xml) (_877 bytes_)","closed","in: core,","spring-projects-issues","2006-06-25T10:42:32Z","2019-01-11T18:01:50Z"
"","6592","Add support for ignored fields in DataBinder [SPR-1899]","**[Christian Nelson](https://jira.spring.io/secure/ViewProfile.jspa?name=cnelson)** opened **[SPR-1899](https://jira.spring.io/browse/SPR-1899?redirect=false)** and commented  I would like to see an analog to the DataBinder.setAllowedField(String[]) called setIgnoredFields(String[]) or setDisallowedFields(String[]).  In most scenarios, there are fewer fields to ignore than to allow.  Almost all of my command objects have only one field that isn't allowed (id), though some of them might have a second if there's an id-based weak reference to another object.  In any case, it seems to me that it's more developer friendly to support setting which properties should **not** be allowed.  There is some discussion around this issue on the forums ( http://forum.springframework.org/showthread.php?t=10820 ).  Darren's point about ""false sense of security"" is valid, but the default behavior already gives a flase sense of security because everything is bound.  I think it's important to make developers' jobs easy, and let them take responsility for their own code (instead of assuming users don't know what they're doing).  By adding this setIgnored/Disallowed feature, each developer could decide when to use each version.  The only complication is if the user calls setAllowedFields(new String[] { ""name"", ""address"", ""age"" }) **and** setIgnoredFields(new String[] { ""id"", ""name"" }), which is clearly a mistake.  Perhaps only one approach can be used for a particular form instance?  It wouldn't be difficult to create a new subclass of ServletRequestDataBinder to support this, but it's difficult to plug in the new binder because BaseCommandController.createBinder(HttpServletRequest request, Object command) does more than just create an instance, it also sets a number of important settings on the ServletRequestDataBinder.  I recommend either adding native support for ignored fields to DataBinder or one of it's subclasses, or make it easier to plug in a new subclass of ServletRequestDataBinder by seperating the creation of the ServletRequestDataBinder and the initialization that takes place in the current createBinder method.  Thanks, Christian    ---  **Affects:** 1.2.7, 2.0 M3  **Attachments:** - [SpecialServletRequestDataBinder.java](https://jira.spring.io/secure/attachment/11575/SpecialServletRequestDataBinder.java) (_988 bytes_) - [SpecialServletRequestDataBinderTest.java](https://jira.spring.io/secure/attachment/11576/SpecialServletRequestDataBinderTest.java) (_1.46 kB_)","closed","type: enhancement,","spring-projects-issues","2006-04-16T03:25:26Z","2012-06-19T03:52:44Z"
"","6479","AspectJ jars required when using  [SPR-1784]","**[Christian Nelson](https://jira.spring.io/secure/ViewProfile.jspa?name=cnelson)** opened **[SPR-1784](https://jira.spring.io/browse/SPR-1784?redirect=false)** and commented  I recently upgraded from 2.0 M2 to M3.  When I deploy my app, I now get this exception:  2006-03-11 09:32:08,058 ERROR [org.springframework.web.context.ContextLoader] - Context initialization failed org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'musicService' defined in ServletContext resource [/WEB-INF/applicationContext-services.xml]: Initialization of bean failed; nested exception is java.lang.NoClassDefFoundError: org/aspectj/util/PartialOrder$PartialComparable java.lang.NoClassDefFoundError: org/aspectj/util/PartialOrder$PartialComparable  I'm using the new-fangled schema based syntax:   This worked without the aspectj jars with version M2.  If I replace  with:  \ \ \ \ \ \ \ \ \ \  It comes up without a hitch and everything works as expected.  Thanks! Christian  Please see this forum thread: http://forum.springframework.org/showthread.php?p=54299   ---  **Affects:** 2.0 M3","closed","type: bug,","spring-projects-issues","2006-03-11T03:37:38Z","2012-06-19T03:54:35Z"
"","6106","Binding map entries using single quotes throws off error association [SPR-1406]","**[Christian Nelson](https://jira.spring.io/secure/ViewProfile.jspa?name=cnelson)** opened **[SPR-1406](https://jira.spring.io/browse/SPR-1406?redirect=false)** and commented  Binding errors aren't shown when you use single quotes around map key values.  All other binding functionality works, however.  Relevant JSP Snippet:    \ (error)   Relevant Java Controller Snippet:  protected void initBinder(RequestContext context, DataBinder binder) { // Force all entriees to be converted to type Long when bound. binder.registerCustomEditor(Long.class, ""entries"", new CustomNumberEditor(Long.class, false)); }  Relevant Java Command:  public class Command { private SortedMap entries = new TreeMap(String.CASE_INSENSITIVE_ORDER); // Getters, setters and other method removed }  Behavior:  If you submit the form with empty values, this causes a binding error for each empty text field, as it should.  If the single quotes are in place around the key name, ${status.error} will be false.  If the quotes are removed, then ${status.error} will be true.  All other aspects of binding seem to work regardless of the single quotes though.  It's important to note that if there is an associated Validator, it too must add field errors using the exact name as bound in the JSP.  If the JSP binds to entries['foomatic'] then the Validator must use errors.rejectValue(""entries['foomatic']"", ...).  It seems like the single quotes should not be considered part of the field name.  They're there only to demark the key name, they're not part of the field name itself.  The usefullness of the single quotes is questionable, but would be useful is #5976 is implemented.  Though you could argue that regardless of #5976, the single quotes should not have an effect on binding or validation since they're ingored in some respects already (as the existing unit tests reflect).  Regards, Christian  ---  **Affects:** 1.2.5","closed","in: core,","spring-projects-issues","2005-10-21T04:05:45Z","2019-01-11T21:02:19Z"
"","5976","Handle nested brackets in a map keys [SPR-1274]","**[Christian Nelson](https://jira.spring.io/secure/ViewProfile.jspa?name=cnelson)** opened **[SPR-1274](https://jira.spring.io/browse/SPR-1274?redirect=false)** and commented  If the map key contains nested brackets, the key is not properly extracted from the string by BeanWrapperImpl.getPropertyNameTokens(String propertyName).  For example, consider these 'paths':  1) ""entries[some text[abc]]"", key = ""some text[abc"" (missing ]) 2) ""entries['some text[abc]']"", key = ""'some text[abc"" (missing ]') 3) ""entries[\""some text[abc]\""]"", key = ""\""some text[abc"" (missing ]"")  The first one is kinda a stretch, and I didn't expect it to work.  My natural reaction was to try the second and third, thinking that grouping it would do the trick.  It didn't though.  This came up in the web application I'm working on.  There's a form with let's the user assign IDs to textual names.  The name sometimes contain brackets, which triggered this issue.  BeanWrapperImpl.java:610 (1.2.4 source) is the cause.  The parser could count braces, and return the key when it's found the first matching pair.  In the example above, the first ] would be part of the key, and the second, which completes the initial pair, would complete the key.  This solution would work regardless of the single or double quotes.  An alternative would be to ignore braces that are in quoted ections of the string.  This naturally would only work for scenarios #2 and #3 above.  I will try to update BeanWrapperImpl.java with a sllightly more sophisticated bracket parser and submit a patch with tests.  If you think it's a waste of time, or if there's something obvious I'm missing, feel free to point out my error.  Regards, Christian  ---  **Affects:** 1.2.4  **Attachments:** - [MapBindingTests.java](https://jira.spring.io/secure/attachment/11129/MapBindingTests.java) (_2.04 kB_) - [spr-1274-patch-1.txt](https://jira.spring.io/secure/attachment/11127/spr-1274-patch-1.txt) (_7.68 kB_) - [spr-1274-patch-2.txt](https://jira.spring.io/secure/attachment/11128/spr-1274-patch-2.txt) (_8.51 kB_)  **Issue Links:** - #6983 Incorrect string parsing of mapped property names (_**""is duplicated by""**_)  5 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2005-08-31T06:52:14Z","2019-01-11T19:22:09Z"
"","5896","Binding error codes aren't consistent [SPR-1193]","**[Christian Nelson](https://jira.spring.io/secure/ViewProfile.jspa?name=cnelson)** opened **[SPR-1193](https://jira.spring.io/browse/SPR-1193?redirect=false)** and commented  The error codes returned when binding Map values (and possibly other collections as well) isn't consistent.  They depend on the pre-bound values of the collection.  * Scenario ** When binding to a single Map entry (e.g. entries[FOOBAR]), the error codes returned in BindException depend on whether or not the entry has an inital value of null or not.  In this case, I have a Map keyed by Strings and containing Long values.  I have a SimpleFormController with this custom editor in place:  binder.registerCustomEditor(Long.class, ""entries"", new CustomNumberEditor(Long.class, false));  My command class looks like this:  public class MemberMapping { private Map entries = new HashMap();      public Map getEntries() { return entries; }     public void setEntries(Map entries) { this.entries = entries; }	  }  I'm binding the string ""A"", which obviously should raise an error because it cannot be converted to a Long.  If the form backing object contains an initial (pre-bind) entry: entries[FOOBAR]=null, then these codes are returned:  typeMismatch.mapping.entries[FOOBAR] typeMismatch.mapping.entries typeMismatch.entries[FOOBAR] typeMismatch.entries typeMismatch  If the form backing object contains an initial (pre-bind) entry: entries[FOOBAR]=java.lang.Long(0), then these codes are returned:  typeMismatch.mapping.entries[FOOBAR] typeMismatch.mapping.entries typeMismatch.entries[FOOBAR] typeMismatch.entries typeMismatch.java.lang.Long // ** NOTE typeMismatch  I would think that the error codes should be the same.  Afterall it's not the previous value that we care about when binding, it's the new value.  This behavior makes it impossible to define generic error messages for  type conversion errors.  Instead of only defining a global message for code ""typeMismatch.java.lang.Long"", I must also provide scenario specific ones like ""typeMismatch.entries"".  I've attached a test case that demonstrates this problem.  There is a thread on the forums which discusses how this came to be in the first place. http://forum.springframework.org/viewtopic.php?p=29691   ---  **Attachments:** - [MapBindingErrorCodeTests.java](https://jira.spring.io/secure/attachment/11002/MapBindingErrorCodeTests.java) (_4.17 kB_)","closed","in: core,","spring-projects-issues","2005-07-31T07:56:15Z","2005-08-06T06:45:01Z"
"","6420","PropertyTypeConverter / BeanWrapper ignores any PropertyEditors created by custom BeanInfo implementations. [SPR-1723]","**[Chris Wood](https://jira.spring.io/secure/ViewProfile.jspa?name=swamp_ig)** opened **[SPR-1723](https://jira.spring.io/browse/SPR-1723?redirect=false)** and commented  The beans.PropertyTypeConverter class ignores any custom PropertyEditors registered within the PropertyDescriptors created by a custom BeanInfo.  The problem is in the doTypeConversionIfNecessary method, this should call the getPropertyDescriptor method in the BeanInfo class to get the property descriptor, and for JDK 1.5 + call createPropertyEditor to create the editor, or otherwise call getPropertyEditorClass and instantiate the class.  This change would require that the PropertyTypeConverter take a BeanWrapper as it's constructor argument, rather than a PropertyEditorRegistrySupport since it needs to get access to the bean being edited.  My feeling is that any custom editors registered in the registry should be used first, followed by resolving the editor from the BeanInfo class, and finally fall back to the defaults.  I'll provide a patch shortly.  ---  **Affects:** 2.0 M2  **Attachments:** - [BeanInfoTests.java](https://jira.spring.io/secure/attachment/11467/BeanInfoTests.java) (_2.06 kB_) - [PropertyTypeConverter.java](https://jira.spring.io/secure/attachment/11466/PropertyTypeConverter.java) (_13.49 kB_) - [SPR-1723.diff](https://jira.spring.io/secure/attachment/11465/SPR-1723.diff) (_4.87 kB_)  **Issue Links:** - #6205 BeanWrapper should allow registration of property editors for a named property in a particular class.  1 votes, 0 watchers","closed","in: core,","spring-projects-issues","2006-02-16T12:22:49Z","2019-01-11T22:07:53Z"
"","6327","Allow use of MessageSourceResolvable in validation.Errors  [SPR-1630]","**[Chris Wood](https://jira.spring.io/secure/ViewProfile.jspa?name=swamp_ig)** opened **[SPR-1630](https://jira.spring.io/browse/SPR-1630?redirect=false)** and commented  The methods Error.reject and Error.rejectValue only take message codes and do message code resolution to expand this code into a list of codes. It would be useful to allow specification of the message directly as a message source resolvable.  See attached code / diffs.   ---  **Affects:** 1.2.6, 2.0 M1  **Attachments:** - [BindException.java](https://jira.spring.io/secure/attachment/11397/BindException.java) (_13.13 kB_) - [Errors.java](https://jira.spring.io/secure/attachment/11398/Errors.java) (_8.30 kB_) - [EscapedErrors.java](https://jira.spring.io/secure/attachment/11402/EscapedErrors.java) (_5.74 kB_) - [FieldError.java](https://jira.spring.io/secure/attachment/11399/FieldError.java) (_3.39 kB_) - [ObjectError.java](https://jira.spring.io/secure/attachment/11400/ObjectError.java) (_2.27 kB_) - [SPR-1630.patch](https://jira.spring.io/secure/attachment/11401/SPR-1630.patch) (_7.03 kB_) - [SPR-1630.patch](https://jira.spring.io/secure/attachment/11396/SPR-1630.patch) (_5.71 kB_)  4 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2006-01-19T11:02:05Z","2015-09-22T17:34:35Z"
"","6205","BeanWrapper should allow registration of property editors for a named property in a particular class. [SPR-1506]","**[Chris Wood](https://jira.spring.io/secure/ViewProfile.jspa?name=swamp_ig)** opened **[SPR-1506](https://jira.spring.io/browse/SPR-1506?redirect=false)** and commented  The BeanWrapper allows you to register a property editor for a particular object type, and for a property path and object type. What it doesn't handle is when a collection contains multiple different classes, some of which require property editors. Similarly, a class heirachy may contain a number of instances of a particular class type, and the property of that class type needs a particular property editor.  It would be useful if it were possible to register a property editor based on the containing type and property name.  EG:  abstract class TypePar {}  class TypeA extends TypePar { void setValue(Date date); // date formatted some odd way }  class TypeB extends TypePar { void setValue(Date date); // date formatted some alternate funny way. }  class FormClass { List\ getList(); }  beanWrapper = new BeanWrapper(new FormClass()); beanWrapper.registerCustomEditor(Date.class, TypeA.class, ""value"", customDateEditorA); beanWrapper.registerCustomEditor(Date.class, TypeB.class, ""value"", customDateEditorB);  ---  **Affects:** 1.2.6  **Issue Links:** - #6420 PropertyTypeConverter / BeanWrapper ignores any PropertyEditors created by custom BeanInfo implementations.","closed","type: enhancement,","spring-projects-issues","2005-11-29T12:53:40Z","2019-01-11T21:30:53Z"
"","6125","Allow MessageSourceResolvable to be used with spring:message tag. [SPR-1425]","**[Chris Wood](https://jira.spring.io/secure/ViewProfile.jspa?name=swamp_ig)** opened **[SPR-1425](https://jira.spring.io/browse/SPR-1425?redirect=false)** and commented  At the moment the spring:message tag doesn't allow a MessageSourceResolvable as the message source.  I've updated the class so that it takes a parameter 'message' which is a message source resolvable.  It's possible this could be better used by making the code field polymorphic, taking either a String value, or a MessageSourceResolvable, but that's not realy what 'code' means.  Anyhow, attached the changed class. You'll also need to add the extra parameter to the TLD file, but that's pretty trivial to do.   ---  **Affects:** 1.2.3  **Attachments:** - [MessageTag.java](https://jira.spring.io/secure/attachment/11231/MessageTag.java) (_7.16 kB_)","closed","type: enhancement,","spring-projects-issues","2005-10-27T18:02:51Z","2012-06-19T03:54:31Z"
"","6158","Disable URLConnection caching in UrlResource to avoid JAR file locking on Windows [SPR-1459]","**[Chris Wilson](https://jira.spring.io/secure/ViewProfile.jspa?name=wondergeek)** opened **[SPR-1459](https://jira.spring.io/browse/SPR-1459?redirect=false)** and commented  It is a well known issue that Windows locks JAR files when they or their embedded resources are read via a URL object in Java (maybe even in other situations as well).  The standard result of this behaviour causes issues where an application cannot be redeployed or undeployed without stopping the JVM process running the container / application.  Some container vendors (Jakarta Tomcat at least) have come up with various workarounds to avoid this behaviour on Windows.  A simple fix is to disable caching on the URLConnection object associated with the URL that represents a JAR resource.  I have made the following changes to the org.springframework.core.io.UrlResource class that fixes the issue in my environment.  ... /** * Create a new UrlResource.  * `@param` url a URL   */   public UrlResource(URL url) {   Assert.notNull(url, ""url is required"");   this.url = url;   disableUrlCaching();   }    /**    * Create a new UrlResource.   * `@param` path a URL path     */     public UrlResource(String path) throws MalformedURLException {     Assert.notNull(path, ""path is required"");     this.url = new URL(path);     disableUrlCaching();     }    /**    * Disable caching on the URL object to avoid JAR file locking on   * Windows.     */     private void disableUrlCaching() {     try {     url.openConnection().setDefaultUseCaches(false);     } catch(IOException e) {     // Can't modify caching, ignore     }     }  ...  Ideally, this type of functionality could be made available in Spring as a configurable option or even automatically if Windows was detected as the runtime platform.  While this could be considered a hack, every other solution to this problem is a hack as well until Sun or Microsoft fixes the root issue.  Placing this functionality in Spring at least helps it to behave in the most flexable fashion on the Windows platform.  Please see the forum post regarding this issue: http://forum.springframework.org/showthread.php?t=19516  And a similar bug already listed: http://opensource2.atlassian.com/projects/spring/browse/SPR-1114   --- No further details from [SPR-1459](https://jira.spring.io/browse/SPR-1459?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-11-10T04:31:57Z","2012-06-19T03:54:03Z"
"","6695","Unexpected results from ServletRequestUtils.getStringParameters when parameter has empty String [SPR-2002]","**[Chris Widhelm](https://jira.spring.io/secure/ViewProfile.jspa?name=cwidhelm)** opened **[SPR-2002](https://jira.spring.io/browse/SPR-2002?redirect=false)** and commented  When calling ServletRequestUtils.getRequiredStringParameters or ServletRequestUtils.getStringParameters the following chunk of code throws a ServletRequestBindingException if there is an empty String as one of the parameter values.  I would argue that an empty String is a value when dealing with a String.      	protected final void validateRequiredParameter(String name, Object parameter)     			throws ServletRequestBindingException {          		if (parameter == null) {     			throw new ServletRequestBindingException(""Required "" + getType() + "" parameter '"" + name     					+ ""' is not present"");     		}     		if ("""".equals(parameter)) {     			throw new ServletRequestBindingException(""Required "" + getType() + "" parameter '"" + name     					+ ""' contains no value"");     		}     	}  ---  **Attachments:** - [ServletRequestUtilsTest.java](https://jira.spring.io/secure/attachment/11632/ServletRequestUtilsTest.java) (_986 bytes_)  **Issue Links:** - #6686 ServletRequestUtils.getStringParameters behaviour with *empty* (not null) Strings is unintuitive (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2006-05-11T02:28:26Z","2019-01-12T16:52:15Z"
"","6869","with abstract beans (with class specified) causes NPE [SPR-2178]","**[Chris Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=chrislee)** opened **[SPR-2178](https://jira.spring.io/browse/SPR-2178?redirect=false)** and commented  Previously reported as http://opensource.atlassian.com/projects/spring/browse/SPR-2143; this was partially fixed in RC1, however, abstract bean definitions that specify a class cause the below exception.  Note the addition of the 'class' attribute on the final abstract bean 'testAbstract2'                                        org.springframework.beans.factory.BeanIsAbstractException: Error creating bean with name 'testAbstract2': Bean definition is abstract at org.springframework.beans.factory.support.AbstractBeanFactory.checkMergedBeanDefinition(AbstractBeanFactory.java:864) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:244) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:168) at org.springframework.beans.factory.support.AbstractBeanFactory.getType(AbstractBeanFactory.java:392) at org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator.createAspectJAdvisors(AnnotationAwareAspectJAutoProxyCreator.java:167) at org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator.findCandidateAdvisors(AnnotationAwareAspectJAutoProxyCreator.java:137) at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.setBeanFactory(AbstractAdvisorAutoProxyCreator.java:61) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:863) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:393) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:257) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:168) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:199) at org.springframework.context.support.AbstractApplicationContext.getBeansOfType(AbstractApplicationContext.java:662) at org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:426) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:317) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:92) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:77) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:68) at bridges.web.legacy.LegacyBridgeAopTest.testIt(LegacyBridgeAopTest.java:13) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at junit.framework.TestCase.runTest(TestCase.java:154) at junit.framework.TestCase.runBare(TestCase.java:127) at junit.framework.TestResult$1.protect(TestResult.java:106) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.framework.TestResult.run(TestResult.java:109) at junit.framework.TestCase.run(TestCase.java:118) at junit.framework.TestSuite.runTest(TestSuite.java:208) at junit.framework.TestSuite.run(TestSuite.java:203) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)   ---  **Affects:** 2.0 RC1  **Attachments:** - [SpringAopTestMain.java](https://jira.spring.io/secure/attachment/11732/SpringAopTestMain.java) (_384 bytes_) - [spring-test.zip](https://jira.spring.io/secure/attachment/11731/spring-test.zip) (_2.14 MB_)  1 votes, 2 watchers","closed","in: core,","spring-projects-issues","2006-06-22T04:46:09Z","2012-06-19T03:52:34Z"
"","6834","with abstract beans causes NPE [SPR-2143]","**[Chris Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=chrislee)** opened **[SPR-2143](https://jira.spring.io/browse/SPR-2143?redirect=false)** and commented  When adding Spring/AspectJ AOP support (), a NPE is encountered during application context intialization; the exception below is from 2.0M4, has also been reported (http://forum.springframework.org/showthread.php?p=65005#post65005) with 2.0M5.  A simple test case illustrates the issue:  Works:                   ...fails when an abstract bean is added:                             Stack trace:  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.aop.config.internalAutoProxyCreator': Initialization of bean failed; nested exception is java.lang.NullPointerException Caused by: java.lang.NullPointerException at java.lang.Class.isAssignableFrom(Native Method) at org.springframework.beans.factory.support.AbstractBeanFactory.getType(AbstractBeanFactory.java:388) at org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator.createAspectJAdvisors(AnnotationAwareAspectJAutoProxyCreator.java:167) at org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator.findCandidateAdvisors(AnnotationAwareAspectJAutoProxyCreator.java:137) at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.setBeanFactory(AbstractAdvisorAutoProxyCreator.java:61) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:854) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:391) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:256) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:167) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:199) at org.springframework.context.support.AbstractApplicationContext.getBeansOfType(AbstractApplicationContext.java:662) at org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:426) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:317) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:92) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:77) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:68) at bridges.web.legacy.LegacyBridgeAopTest.testIt(LegacyBridgeAopTest.java:13) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at junit.framework.TestCase.runTest(TestCase.java:154) at junit.framework.TestCase.runBare(TestCase.java:127) at junit.framework.TestResult$1.protect(TestResult.java:106) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.framework.TestResult.run(TestResult.java:109) at junit.framework.TestCase.run(TestCase.java:118) at junit.framework.TestSuite.runTest(TestSuite.java:208) at junit.framework.TestSuite.run(TestSuite.java:203) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)   ---  **Affects:** 2.0 M4","closed","in: core,","spring-projects-issues","2006-06-14T02:52:22Z","2012-06-19T03:52:43Z"
"","6643","TransactionAttributeSourceAdvisor changed from 2.0 M3 to 2.0 M4, preventing subclassing for specific use case [SPR-1950]","**[Chris Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=chrislee)** opened **[SPR-1950](https://jira.spring.io/browse/SPR-1950?redirect=false)** and commented  With Spring 2.0 M3 (and recent 2.0 M4 snapshots), we were subclassing TransactionAttributeSourceAdvisor in the below manner, to allow for multiple transaction interceptors for different class patterns (to support a legacy transition).      @Override     public boolean matches( Method method, Class clazz )     {         boolean baseMatch = super.matches( method, clazz );         if( baseMatch )         {             AntPathMatcher matcher = new AntPathMatcher();             boolean retVal = matcher.match( m_classPattern, clazz.getName().replace( ""."", ""/"" ) );             return retVal;         }         return false;     }  \ \ \ \  With 2.0 M4, the matches() method is now part of a private inner class, preventing subclassing.    ---  **Affects:** 2.0 M4","closed","type: bug,","spring-projects-issues","2006-04-24T01:56:49Z","2019-01-11T22:06:28Z"
"","6591","Add runtime support for indexed attributes (Commons Attributes & Java 5 annotations) [SPR-1898]","**[Chris Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=chrislee)** opened **[SPR-1898](https://jira.spring.io/browse/SPR-1898?redirect=false)** and commented  Add support for indexed runtime access of JSR-175 (Java 5) annotations.  The original proposal can be found here http://forum.springframework.org/search.php?searchid=151331  The attached proof-of-concept provides this functionality in the following manner:  1) Addition of a new org.springframework.metadata.AttributeIndex interface, with two implementations; CommonsAttributesAttributeIndex and AnnotationAttributeIndex; 2) Addition of a new org.springframework.metadata.AttributeAccessor interface, with two implementations; CommonsAttributesAttributeAccessor and AnnotationsAttributeAccessor.  Note that this is an extension to the existing Spring 'Attributes' facade, adding convenience methods and support for additional attribute locations.  All the CommonsAttributes functionality is a facade on top of the CA API (calls are generally passed directly through).  The Annotations functionality is implemeted via a combination of bytecode scanning (to generate the index at startup) and the annotation API.  Implementation notes (annotations)  -the index of annotated elements is generated at startup time.  Care has been taken to make this as efficient as possible. -the set of annotations to index is determined from a) a supplied list of annotation classes and b) any annotation on the search path that is itself annotated as an `@IndexableAnnotation`   ---  **Affects:** 2.1 M4  **Attachments:** - [org.springframework.metadata.zip](https://jira.spring.io/secure/attachment/11570/org.springframework.metadata.zip) (_12.26 kB_)","closed","type: enhancement,","spring-projects-issues","2006-04-15T09:24:59Z","2012-06-19T09:37:42Z"
"","6571","Provide BeanRegistrar interface and extend ApplicationContext implementations to call registrars defined in the application context [SPR-1877]","**[Chris Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=chrislee)** opened **[SPR-1877](https://jira.spring.io/browse/SPR-1877?redirect=false)** and commented  Provide a hook & interface (BeanRegistrar) by which beans can be dynamically registered as the application context starts up.  We are using this to register custom JSP tags annotated with `@Configurable` (if they aren't already manually registered); there are certainly other uses.  BeanRegistrar:  public interface BeanRegistrar { void registerBeans( BeanDefinitionRegistry beanDefinitionRegistry ) throws BeansException; }  XmlApplicationContext changes:  `@SuppressWarnings`( ""unchecked"" ) `@Override` protected void loadBeanDefinitions( DefaultListableBeanFactory beanFactory ) throws IOException { super.loadBeanDefinitions( beanFactory );          registerBeans( beanFactory );     }          private void registerBeans( DefaultListableBeanFactory beanFactory )     {         String[] beanRegistrarNames = BeanFactoryUtils.beanNamesForTypeIncludingAncestors(                 beanFactory, BeanRegistrar.class, false, false );              for( String beanRegistrarName : beanRegistrarNames )         {             BeanRegistrar registrar = (BeanRegistrar)beanFactory.getBean( beanRegistrarName );             registrar.registerBeans( beanFactory );         }     }    ---  **Affects:** 2.1 M4","closed","type: enhancement,","spring-projects-issues","2006-04-10T07:36:30Z","2012-06-13T08:30:04Z"
"","6570","Extend PropertyPlaceholderConfigurer to choose property file based on runtime environment [SPR-1876]","**[Chris Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=chrislee)** opened **[SPR-1876](https://jira.spring.io/browse/SPR-1876?redirect=false)** and commented  PropertyPlaceholderConfigurer can be readily extended to choose the property file to read at runtime, based on the current runtime environment.  This simplifies moving the same deployment package (EAR/WAR) between environments w/o having to rebuild (saving time, reducing risk).  See the attached file for a reference implementation (feel free to adjust as necessary).   ---  **Affects:** 2.1 M4  **Attachments:** - [RuntimeEnvironmentPropertiesConfigurer.java](https://jira.spring.io/secure/attachment/11560/RuntimeEnvironmentPropertiesConfigurer.java) (_6.05 kB_) - [RuntimeEnvironmentPropertiesConfigurer.zip](https://jira.spring.io/secure/attachment/11565/RuntimeEnvironmentPropertiesConfigurer.zip) (_5.22 kB_) - [RuntimeEnvironmentPropertiesConfigurer.zip](https://jira.spring.io/secure/attachment/11563/RuntimeEnvironmentPropertiesConfigurer.zip) (_2.79 kB_)  34 votes, 32 watchers","closed","has: votes-jira,","spring-projects-issues","2006-04-10T07:27:27Z","2019-01-11T22:01:26Z"
"","6568","TransactionInterceptor can hide original exception [SPR-1874]","**[Chris Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=chrislee)** opened **[SPR-1874](https://jira.spring.io/browse/SPR-1874?redirect=false)** and commented  org.springframework.transaction.interceptor.TransactionInterceptor.invoke() can hide the original exception in the following situation:  1. Proxied object throws an exception that doesn't match the rollbackFor pattern, forcing a premature commit of the transaction; 2. An exception occurs during transaction commit  It is the second exception that is seen, which can often be misleading; at a minimum, the handling logic should show the user both exceptions.  catch (Throwable ex) { // target invocation exception			 doCloseTransactionAfterThrowing(txInfo, ex);			 throw ex; }  ...to...  catch (Throwable ex) { // target invocation exception try { doCloseTransactionAfterThrowing(txInfo, ex); } catch( Throwable t ) { logger.error( ""Error closing transaction after throwing"",ex ); throw t; } throw ex; }    ---  **Affects:** 1.2.7, 2.0 M3","closed","type: bug,","spring-projects-issues","2006-04-10T01:36:46Z","2012-06-19T03:52:44Z"
"","6365","Cannot use JasperReportsViewResolver as part of a Resolver Chain(With Suggested Fix) [SPR-1668]","**[Chris Holman](https://jira.spring.io/secure/ViewProfile.jspa?name=chris_holman)** opened **[SPR-1668](https://jira.spring.io/browse/SPR-1668?redirect=false)** and commented  I've just started using JasperReports in Spring, and came across a problem to which I would like to suggest a fix.  I would like to chain the JasperReportsViewResolver(JRVR) before my main JSP resolver. I would expect the JRVR to pass control to the JSP resolver if it cannot find the requested .jasper file, but it actually throws an exception. This means that the JRVR in its current form cannot be used in a Resolver Chain.  To make it Resolver Chain friendly, it must return a null view on fail. I have made the assumption that if the file doesnt exist, this is a failure. I have made some minor modifications as follows:  1. Added JRVR.createView(String, Locale) to overload its abstract parent. This    calls loadView() but catches the exception thrown in    AbstractJaspperReportsView.loadReport(Resource), which subsequently returns a    null view. 2. In AbstractJaspperReportsView.loadReport(Resource), I changed the exception    thrown for the caught IOException as I needed to differentiate between the two    catch statements. 3. There are a small number of other changes required to support 1 and 2 above.  I have submitted this bug for reference and in-case it is useful enough to be included in a future release.  Regards, Chris   ---  **Affects:** 1.0 RC1, 1.0 RC2, 1.0 final, 1.0.1, 1.0.2, 1.1 RC1, 1.1 RC2, 1.1 final, 1.1.1, 1.1.2, 1.1.3, 1.1.4, 1.1.5, 1.2 RC1, 1.2 RC2, 1.2 final, 1.2.1, 1.2.2, 1.2.3, 1.2.4, 1.2.5, 1.2.6, 2.0 M1, 2.0 M2","closed","type: enhancement,","spring-projects-issues","2006-02-03T06:12:30Z","2012-06-19T03:54:39Z"
"","6410","Tiles integration did not work with Spring portlet [SPR-1713]","**[Chih-liang Chang](https://jira.spring.io/secure/ViewProfile.jspa?name=liang)** opened **[SPR-1713](https://jira.spring.io/browse/SPR-1713?redirect=false)** and commented  When I tried to use tiles to assemble my portlet's view, I got an error message: org.springframework.context.ApplicationContextException: Tiles definitions factory not found: TilesConfigurer not defined?  And below is my tiles-portlet.xml. I am sure I had set tiles configurer. Any idea?  \ \ \ \ \ \ \ \\\ \\\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \/WEB-INF/defs/tiles-defs.xml\ \ \ \ \ \ \ \ \   ---  **Affects:** 2.0 M2","closed","status: declined,","spring-projects-issues","2006-02-14T20:23:37Z","2019-01-12T16:29:36Z"
"","6383","org.springframework.web.portlet.handler.SimpleMappingExceptionResolver ignores mappedHandlers [SPR-1685]","**[Chih-liang Chang](https://jira.spring.io/secure/ViewProfile.jspa?name=liang)** opened **[SPR-1685](https://jira.spring.io/browse/SPR-1685?redirect=false)** and commented  SimpleMappingExceptionResolver ignores mappedHandlers, similiar problem had happened before, please refer to #5233. Only this time it is happened within spring portlet module, and both ""defaultErrorView"" and ""exceptionMappings"" can not be applied to mapped handlers.  ---  **Affects:** 2.0 M2","closed","in: web,","spring-projects-issues","2006-02-08T01:34:53Z","2019-01-11T21:29:37Z"
"","6801","XML Schema-based configuration can not use in web server resin3 [SPR-2109]","**[chen xiaohu](https://jira.spring.io/secure/ViewProfile.jspa?name=xhchen111)** opened **[SPR-2109](https://jira.spring.io/browse/SPR-2109?redirect=false)** and commented  when user jpetstore sample of m5 in resin3.0.14. I think the error is can not use xsi:schemaLocation="" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"" in applicationContext.xml in resin. error :  ---  [12:21:00.640] Caused by: java.lang.IllegalArgumentException: Bean name must not be empty [12:21:00.640]  at org.springframework.util.Assert.hasText(Assert.java:169) [12:21:00.640]  at org.springframework.beans.factory.config.RuntimeBeanReference.\RuntimeBeanReference.java:56) [12:21:00.640]  at org.springframework.beans.factory.config.RuntimeBeanReference.\RuntimeBeanReference.java:44) [12:21:00.640]  at org.springframework.beans.factory.support.BeanDefinitionBuild er.addPropertyReference BeanDefinitionBuilder.java:115) [12:21:00.640]  at org.springframework.transaction.config.TxAdviceBeanDefinition Parser.doParse TxAdviceBeanDefinitionParser.java:68) .....  ---  **Affects:** 2.0 M5  **Issue Links:** - #7439 SPR_2109 reoccurs in Resin 3.0.18 (_**""is depended on by""**_) - #8244 CLONE - does not work in the web application (_**""is duplicated by""**_)","closed","type: bug,","spring-projects-issues","2006-06-06T15:23:46Z","2019-01-13T22:47:46Z"
"","5908","Can't add advisor to cglib proxies at runtime  [SPR-1205]","**[Charles Tassoni](https://jira.spring.io/secure/ViewProfile.jspa?name=ctassoni)** opened **[SPR-1205](https://jira.spring.io/browse/SPR-1205?redirect=false)** and commented  The before() method of a MethodBeforeAdvice instance is never entered if the advice has been added to a cglib proxy at runtime. The bug may well exist for other advice types, but I haven't tested that.  Following are a few files, including a test case, that illustrate this problem.  Note that the problem only exists when 'optimize' is set to true.  If you set the the value to false (i.e., use jdkProxy instead of cglib) the test case will succeed.  Note further that this problem has been discussed in the AOP Spring Forum http://forum.springframework.org/viewtopic.php?t=4271&highlight=ctassoni  ****applicationContext.xml************************ [code]  \  \  \   \ \\false\\ \\true\\      \\false\\     \ \bugexample.SimpleBean\ \ \ \ \     \     \     \  [/code] ****bugexample.SimpleBean********************** [code]  package bugexample;  /** * `@author` ctassoni   */   public interface SimpleBean {   public void doNothing();   }  [/code] ****bugexample.SimpleBeanImpl********************** [code]  package bugexample;  /** * `@author` ctassoni   */   public class SimpleBeanImpl implements SimpleBean {    public SimpleBeanImpl(){   }    public void doNothing(){   }   }  [/code] ****bugexample.AddAdvisorTest********************** [code]  package bugexample;  import java.lang.reflect.Method;  import junit.framework.Assert; import junit.framework.TestCase;  import org.springframework.aop.MethodBeforeAdvice; import org.springframework.aop.framework.Advised; import org.springframework.aop.support.NameMatchMethodPointcutAdvisor; import org.springframework.context.ApplicationContext; import org.springframework.context.support.ClassPathXmlApplicationContext;  /** * `@author` ctassoni   */   public class AddAdvisorTest extends TestCase {    public void testAddAdvisor(){   ApplicationContext ctx = new ClassPathXmlApplicationContext(""applicationContext.xml"");   SimpleBean simpleBean = (SimpleBean) ctx.getBean(""simpleBean"");   Advised proxy = (Advised) simpleBean;        NameMatchMethodPointcutAdvisor advisor =           new NameMatchMethodPointcutAdvisor(new MakeRuntimeExceptionBefore());        advisor.setMappedName(""doNothing"");        proxy.addAdvisor(advisor);        try{           simpleBean.doNothing();           Assert.fail(""Advice body was not entered or else"" +                 "" \ncalling simpleBean.doNothing would cause an exception.  This test fails when"" +                 "" \napplicationContext.xml uses cglib proxy like so: "" +                 "" \ntrue"" +                 "" \nbut succeeds when applicationContext.xml uses jdkProxy:"" +                 "" \nfalse"" );        }catch(RuntimeException e){        }     }    class MakeRuntimeExceptionBefore implements MethodBeforeAdvice{   public void before(Method method, Object[] args, Object target) throws Throwable {   throw new RuntimeException(""Advice body has been entered"");   }    }   }   [/code]    ---  **Affects:** 1.2.3  **Attachments:** - [AddAdvisorTest.java](https://jira.spring.io/secure/attachment/11024/AddAdvisorTest.java) (_1.73 kB_) - [applicationContext.xml](https://jira.spring.io/secure/attachment/11021/applicationContext.xml) (_670 bytes_) - [SimpleBean.java](https://jira.spring.io/secure/attachment/11022/SimpleBean.java) (_150 bytes_) - [SimpleBeanImpl.java](https://jira.spring.io/secure/attachment/11023/SimpleBeanImpl.java) (_213 bytes_)","closed","in: core,","spring-projects-issues","2005-08-05T05:48:08Z","2012-06-19T03:54:16Z"
"","6331","Using JdbcTemplate with TransactionAwareDataSourceProxy may close connection [SPR-1634]","**[Charles Ozinga](https://jira.spring.io/secure/ViewProfile.jspa?name=cozinga)** opened **[SPR-1634](https://jira.spring.io/browse/SPR-1634?redirect=false)** and commented  A JdbcTemplate constructed with a TransactionAwareDataSourceProxy as its dataSource may cause a premature connection close if it is used in a connection-based transaction where the transaction's connection belongs to the data source that the proxy wraps and that transaction is suspended.  That's a mouthful. Let me give an example (pardon the psuedocode, I'll provide real code if requested). I use HibernateTransactionManager (since that's where I'm seeing the problem personally), but I suspect this would also occur with a DataSourceTransactionManager:  HibernateTransactionManager hibTxnMgr; LocalSessionFactoryBean sesFactory; BasicDataSource dataSource; TransactionAwareDataSourceProxy txnAwareDataSource;  sesFactory.setDataSource(dataSource); hibTxnMgr.setSessionFactory(sesFactory); txnAwareDataSource.setTargetDataSource(dataSource);  hibTxnMgr.getTransaction(REQUIRED); // creates new txn with connection from dataSource new JdbcTemplate(txnAwareDataSource).execute(""update something""); hibTxnMgr.getTransaction(REQUIRED_NEW); // outer txn suspended, but its connection is closed!  What happens is this: when the JdbcTemplate calls DataSourceUtils.getConnection(txnAwareDataSource), the DataSourceUtils doesn't find a thread-bound ConnectionHolder for the txnAwareDataSource (since the transaction is based on dataSource), so it registers a new ConnectionSynchronization with a Connection wrapper around the transaction's connection. When the transaction is suspended, all synchronizations are also suspended, and as of 1.2.6, the ConnectionSynchronization closes its connection. This, unfortunately, also closes the underlying transaction connection. When the outer transaction is resumed, the first attempt to use the database fails with a ""Connection is closed"" message.  I don't think this is a major bug, since there is nothing in the documentation that indicates a JdbcTemplate can be used with a TransactionAwareDataSourceProxy, so doing so may be considered inappropriate use. Of course, there's nothing that explicitly forbids it, either. The closest I could find was from the TransactionAwareDataSourceProxy javadoc:  ""Note that the transaction manager, for example DataSourceTransactionManager, still needs to work with underlying DataSource, not with this proxy.""  Perhaps this guideline can be expanded from just transaction managers to include JdbcTemplate? (and anything else that calls DataSourceUtils.getConnection() ?)   ---  **Affects:** 1.2.6","closed","type: bug,","spring-projects-issues","2006-01-20T12:57:49Z","2012-06-19T03:54:39Z"
"","6100","Extend the org.springframework.test API with a one time setup for the spring initialization. [SPR-1400]","**[Cees van Wieringen](https://jira.spring.io/secure/ViewProfile.jspa?name=ceasaro)** opened **[SPR-1400](https://jira.spring.io/browse/SPR-1400?redirect=false)** and commented  It would be nice to extend the spring test framework with an one time setup for all tests. I currently use the AbstractTransactionalDataSourceSpringContextTests class for my tests. But in every tests he starts loading all dependencies all over again resolving in a time consuming test run. Of course JUnit doesn't promote a one time setup, but could the spring test framework be extended with a abstract test suite using a TestSetup extension  See for a TestSetup example: http://junit.sourceforge.net/doc/faq/faq.htm#organize_3   ---  **Affects:** 1.2 RC2  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2005-10-20T20:19:54Z","2008-10-22T01:43:02Z"
"","6871","XmlBeanDefinitionReader fails to detect correct validation mode [SPR-2180]","**[Carsten Ziegeler](https://jira.spring.io/secure/ViewProfile.jspa?name=cziegeler)** opened **[SPR-2180](https://jira.spring.io/browse/SPR-2180?redirect=false)** and commented  The detectValidationMode method in the XmlBeanDefinitionReader scans the first MAX_PEEK_LINES (= 5) for a doctype definition in the xml file to detect wheter a dtd is used or a schema. Now, this static setting of 5 lines is usually to low for xml documents having a licence header at the top of the file. So although the document has a dtd (in line 10 or so), spring assumes it's using the schema which then results in parsing errors. One solution would be to decrease the MAX_PEEK_LINES to a much higher value like 20 or so, but this would even fail if the header has more lines than this setting. So I think, a ""real xml scan"" would be best which skips all comments and scans until the first element in the document. If you think that this is the way to go, I can come up with a patch   ---  **Affects:** 2.0 RC1","closed","in: core,","spring-projects-issues","2006-06-22T17:35:01Z","2012-06-19T03:52:31Z"
"","6716","AbstractBeanFactory disposes Beans in wrong order [SPR-2023]","**[Carsten Ziegeler](https://jira.spring.io/secure/ViewProfile.jspa?name=cziegeler)** opened **[SPR-2023](https://jira.spring.io/browse/SPR-2023?redirect=false)** and commented  If a bean factory has disposable beans, they are disposed in the same order as they were created. Now if a bean has a dependency to another one this will lead to wrong disposal order. Changing the for loop in the destroySingletons method of the AbstractBeanFactory to the following solves this problem: // process in reverse order for (int i = disposableBeanNames.length-1; i >=0; i--) {   ---  **Affects:** 1.2.8","closed","in: core,","spring-projects-issues","2006-05-16T05:26:13Z","2012-06-19T03:52:22Z"
"","6705","Upgrade to javamail 1.4 [SPR-2012]","**[Carlos Sanchez](https://jira.spring.io/secure/ViewProfile.jspa?name=carlos)** opened **[SPR-2012](https://jira.spring.io/browse/SPR-2012?redirect=false)** and commented  Javamail 1.4 is under Sun CDDL license, open source, allowing the redistribution of the jar, making life easier for Maven users for instance   ---  **Affects:** 2.0 M5  2 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2006-05-14T17:47:24Z","2012-06-19T03:52:41Z"
"","6704","Remove rebundling of aopalliance inside spring-aop.jar [SPR-2011]","**[Carlos Sanchez](https://jira.spring.io/secure/ViewProfile.jspa?name=carlos)** opened **[SPR-2011](https://jira.spring.io/browse/SPR-2011?redirect=false)** and commented  I don't see the need of putting aopalliance classes inside the spring jars, why is this dependency different than all the other ones?   ---  **Affects:** 1.2.7, 2.0 M3, 2.0 M4","closed","type: enhancement,","spring-projects-issues","2006-05-14T17:38:45Z","2012-06-19T03:52:41Z"
"","6703","org/springframework/core/Conventions introduces dependency from core to context [SPR-2010]","**[Carlos Sanchez](https://jira.spring.io/secure/ViewProfile.jspa?name=carlos)** opened **[SPR-2010](https://jira.spring.io/browse/SPR-2010?redirect=false)** and commented  org/springframework/core/Conventions uses package org.springframework.scripting.support, making core depend on context (which already depends on core) This is breaking modularity of the code   ---  **Affects:** 2.0 M5","closed","in: core,","spring-projects-issues","2006-05-14T17:33:10Z","2012-06-19T03:52:42Z"
"","6401","Missing dependencies in readme [SPR-1704]","**[Carlos Sanchez](https://jira.spring.io/secure/ViewProfile.jspa?name=carlos)** opened **[SPR-1704](https://jira.spring.io/browse/SPR-1704?redirect=false)** and commented  Spring requires the following dependencies not listed in the readme asm 2.2.1 asm-commons 2.2.1 (furthermore cglib is included with asm 1.5.3)   ---  **Affects:** 2.0 M2","closed","type: enhancement,","spring-projects-issues","2006-02-13T12:15:07Z","2018-07-06T07:57:46Z"
"","6339","toplink tests don't compile against official oracle toplink 10.1.3 [SPR-1642]","**[Carlos Sanchez](https://jira.spring.io/secure/ViewProfile.jspa?name=carlos)** opened **[SPR-1642](https://jira.spring.io/browse/SPR-1642?redirect=false)** and commented  I tried to compile them against toplink from http://www.oracle.com/technology/software/htdocs/eaplic.html?http://download.oracle.com/otn/java/oc4j/1013/preview/toplink_1013dp4.zip and it doesn't work  c:\dev\m2book\code\migrating\spring\m2\spring-toplink\..\..\test\org\springframework\orm\toplink\SessionBrokerFactoryTests.java:[64,24] cannot find symbol symbol  : constructor SessionBroker(oracle.toplink.sessions.Project) location: class oracle.toplink.sessionbroker.SessionBroker  c:\dev\m2book\code\migrating\spring\m2\spring-toplink\..\..\test\org\springframework\orm\toplink\SessionBrokerFactoryTests.java:[78,24] cannot find symbol symbol  : constructor SessionBroker(oracle.toplink.sessions.Project) location: class oracle.toplink.sessionbroker.SessionBroker  c:\dev\m2book\code\migrating\spring\m2\spring-toplink\..\..\test\org\springframework\orm\toplink\SessionBrokerFactoryTests.java:[91,24] cannot find symbol symbol  : constructor SessionBroker(oracle.toplink.sessions.Project) location: class oracle.toplink.sessionbroker.SessionBroker  c:\dev\m2book\code\migrating\spring\m2\spring-toplink\..\..\test\org\springframework\orm\toplink\SessionBrokerFactoryTests.java:[95,31] cannot find symbol symbol  : constructor UnitOfWork() location: class oracle.toplink.publicinterface.UnitOfWork   ---  **Affects:** 2.0 M1  **Attachments:** - [SPR-1642.patch](https://jira.spring.io/secure/attachment/11422/SPR-1642.patch) (_1.32 kB_)","closed","type: enhancement,","spring-projects-issues","2006-01-26T11:59:28Z","2012-06-19T03:54:02Z"
"","6337","NamespaceHandlerUtilsTests.java should be moved to tiger folder as it depends on a tiger folder class [SPR-1640]","**[Carlos Sanchez](https://jira.spring.io/secure/ViewProfile.jspa?name=carlos)** opened **[SPR-1640](https://jira.spring.io/browse/SPR-1640?redirect=false)** and commented  http://cvs.sourceforge.net/viewcvs.py/springframework/spring/test/org/springframework/aop/config/NamespaceHandlerUtilsTests.java depends on AspectJAutoProxyCreator which is in the tiger folder, so tiger folder would be a better location  Error is Unable to register AspectJ AutoProxyCreator. Cannot find class [org.springframework.aop.aspectj.autoproxy.AspectJAutoProxyCreator]. Are you running on Java 5.0+?   ---  **Affects:** 2.0 M1","closed","type: enhancement,","spring-projects-issues","2006-01-24T10:45:55Z","2012-06-19T03:54:24Z"
"","6272","Dependency documentation errors in lib/readme [SPR-1575]","**[Carlos Sanchez](https://jira.spring.io/secure/ViewProfile.jspa?name=carlos)** opened **[SPR-1575](https://jira.spring.io/browse/SPR-1575?redirect=false)** and commented  The following dependencies are missing from lib/readme file (version information and where to get it)  aspectj 1.5.0_RC1 commonj 1.1 http://www.ibiblio.org/maven2/com/bea/wlplatform/commonj-twm/1.1/commonj-twm-1.1.pom portlet-api 1.0  and  hibernate is 3.1 final not 3.1 rc3 (doesn't even compile with rc3)   ---  **Affects:** 2.0 M1  **Referenced from:** commits https://github.com/spring-projects/spring-webflow/commit/077e34600f032468dc2112f3ab2db06ce7eec22f","closed","type: enhancement,","spring-projects-issues","2005-12-25T10:50:00Z","2012-06-19T03:54:09Z"
"","6010","Wrong link in lib/readme [SPR-1309]","**[Carlos Sanchez](https://jira.spring.io/secure/ViewProfile.jspa?name=carlos)** opened **[SPR-1309](https://jira.spring.io/browse/SPR-1309?redirect=false)** and commented  In http://cvs.sourceforge.net/viewcvs.py/springframework/spring/lib/readme.txt  Reference to http://www.opensymphony.org/quartz should be changed to http://www.opensymphony.com/quartz   --- No further details from [SPR-1309](https://jira.spring.io/browse/SPR-1309?redirect=false)","closed","type: bug,","spring-projects-issues","2005-09-19T11:50:49Z","2012-06-19T03:54:26Z"
"","6032","${...} placeholders support for import [SPR-1332]","**[Cameron Taggart](https://jira.spring.io/secure/ViewProfile.jspa?name=ctaggart)** opened **[SPR-1332](https://jira.spring.io/browse/SPR-1332?redirect=false)** and commented  Please add ${...} placeholders support for \.  That would enable us to do something like: \  I started a forum topic about this yesterday, but this is probably a better spot for the feature request. http://forum.springframework.org/viewtopic.php?t=9193  I imagine this request is similar to the changes you made for Log4J in Spring 1.2.5, Log4jConfigurer resolves ${...} placeholders in Log4J config locations as system properties.  My goal is to allow configuration of webapps from outside the war.  Today, we can do that using properties files, but I don't know of any way to do that xml files.  Any suggestions?  Here are some snippets to explain:  \ \ \ \ \WEB-INF/messaging.default.properties\ \file:${catalina.base}/conf/app-conf/messaging.properties\ \ \ \ Thanks, Cameron   --- No further details from [SPR-1332](https://jira.spring.io/browse/SPR-1332?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-09-28T05:10:26Z","2012-06-19T03:54:37Z"
"","5918","MBeanExporter attempts to register duplicate MBeans causing javax.management.InstanceAlreadyExistsException [SPR-1216]","**[Cameron Clarke](https://jira.spring.io/secure/ViewProfile.jspa?name=cam)** opened **[SPR-1216](https://jira.spring.io/browse/SPR-1216?redirect=false)*** and commented  Specific scenario, running JUnit test cases extending {`@link` org.springframework.test.AbstractTransactionalSpringContextTests} where the application utilises org.hibernate.jmx.StatisticsService as defined in spring-data-access-context.xml (see below), test fail due to :  \ \org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'jmxExporter' defined in class path resource [spring-data-access-context.xml]: Initialization of bean failed; nested exception is javax.management.InstanceAlreadyExistsException: Hibernate:name=hbmStats javax.management.InstanceAlreadyExistsException: Hibernate:name=hbmStats at com.sun.jmx.mbeanserver.RepositorySupport.addMBean(RepositorySupport.java:452) at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.internal_addObject(DefaultMBeanServerInterceptor.java:1410) at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerObject(DefaultMBeanServerInterceptor.java:936) at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerMBean(DefaultMBeanServerInterceptor.java:337) at com.sun.jmx.mbeanserver.JmxMBeanServer.registerMBean(JmxMBeanServer.java:497) at org.springframework.jmx.export.MBeanExporter.registerMBean(MBeanExporter.java:413) at org.springframework.jmx.export.MBeanExporter.registerBeanInstance(MBeanExporter.java:389) at org.springframework.jmx.export.MBeanExporter.registerBeanNameOrInstance(MBeanExporter.java:369) at org.springframework.jmx.export.MBeanExporter.registerBeans(MBeanExporter.java:296) at org.springframework.jmx.export.MBeanExporter.afterPropertiesSet(MBeanExporter.java:240) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1003) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:348) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:226) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:147) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:275) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:317) at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:80) at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:65) at org.springframework.test.AbstractSpringContextTests.loadContextLocations(AbstractSpringContextTests.java:121) at org.springframework.test.AbstractDependencyInjectionSpringContextTests.loadContextLocations(AbstractDependencyInjectionSpringContextTests.java:159) at org.springframework.test.AbstractSpringContextTests.getContext(AbstractSpringContextTests.java:101) at org.springframework.test.AbstractDependencyInjectionSpringContextTests.setUp(AbstractDependencyInjectionSpringContextTests.java:127) \  spring-data-access-context.xml defined as ....  ... \ \ \ \ \ \ \ \ \                            true                                                                             dummyDomain                ...  My current work around class....  /** The SpringFrameworks (v.1.2.3) {`@link` org.springframework.jmx.export.MBeanExporter} does not detect * MBeans already registered and may attempt to register duplicate MBeans.  Either a unique / dynamic * object naming convention could be employed to avoid this or alternatively, simply ignore * {`@link` javax.management.InstanceAlreadyExistsException} exceptions which is the policy * employed by this class. *  * `@author` Cameron Clarke * `@version` $Id: $   */  import org.springframework.beans.factory.BeanFactoryAware; import org.springframework.beans.factory.DisposableBean; import org.springframework.beans.factory.InitializingBean; import org.springframework.jmx.export.MBeanExporter;  import javax.management.JMException; import javax.management.InstanceAlreadyExistsException;  public class SpringMBeanExporter extends MBeanExporter implements BeanFactoryAware, InitializingBean, DisposableBean { protected void registerBeans() throws JMException { try { super.registerBeans(); } catch (InstanceAlreadyExistsException ex) { logger.error(""Instance already exists, registering JMX bean failed."", ex); } } }  ---  **Affects:** 1.2.3  **Issue Links:** - #5921 JMX InstanceAlreadyExistsException when deploying same app twice (_**""is duplicated by""**_)","closed","in: core,","spring-projects-issues","2005-08-08T22:17:20Z","2019-01-11T19:21:22Z"
"","6438","${..} property placeholder broken in 2-m2, was working on 2-m1 [SPR-1741]","**[Cameron Braid](https://jira.spring.io/secure/ViewProfile.jspa?name=cameronbraid)** opened **[SPR-1741](https://jira.spring.io/browse/SPR-1741?redirect=false)** and commented  ${..} property placeholder is now broken in 2-m2, was working on 2-m1  ---  **Affects:** 2.0 M2  **Issue Links:** - #6415 External properties setting fail with abstract beans (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2006-02-24T00:00:54Z","2019-01-12T16:52:18Z"
"","6132","Allow declarative addition of FreeMarker TemplateLoader's to FreeMarkerConfigurer [SPR-1432]","**[Bubba Puryear](https://jira.spring.io/secure/ViewProfile.jspa?name=bubbapuryear)** opened **[SPR-1432](https://jira.spring.io/browse/SPR-1432?redirect=false)** and commented  The FreeMarkerConfigurer class cleverly adds a ClassTemplateLoader in it's postProcessConfiguration() callback. While it is certainly possible for developers to subclass this class and ""do the same trick"" to add their own ClassTemplateLoaders, this seems like overkill. Just having an option property on the class of TemplateLoader[] that gets added to the MultiTemplateLoader puts it all in configuration. I'll attach a small patch after I get this issue openned.  Our local need arises out of having several project that use Spring w/ FreeMarker and we'd like to share some common FreeMarker macros. Putting the ftl in a common jar seems like a reasonably way to distribute these macros, so we'd like an easy way to tell Spring to tell FreeMarker to look in a couple of places to find macro files.  ---  **Affects:** 1.2.5  **Attachments:** - [freemarker.configurer.patch](https://jira.spring.io/secure/attachment/11239/freemarker.configurer.patch) (_1.83 kB_)  **Issue Links:** - #6060 Make it possible to wire multiple template loaders with FreemarkerConfigurer (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2005-11-03T06:36:23Z","2019-01-11T21:00:28Z"
"","6405","upgrade version of easy mock shiped with springframework with dependencies [SPR-1708]","**[bryan hunt](https://jira.spring.io/secure/ViewProfile.jspa?name=revoltingdigits)** opened **[SPR-1708](https://jira.spring.io/browse/SPR-1708?redirect=false)** and commented  The latest version of spring ( 2.0 m2 ) ships with easymock version 1.2 and easymock class extension version 1.2  There have been significant improvements made in the 2.0 version of easymock and 2.0 pre easymock class extension.  It would be cool to upgrade these as people could then just use your shipped libs for all their development and unit testing.  This would make bug reporting simpler as everyone else is using the new versions for ( 1 ) months now.  Beste  Bryan   ---  **Affects:** 2.0 M2","closed","type: enhancement,","spring-projects-issues","2006-02-14T00:54:29Z","2006-02-18T05:12:34Z"
"","6052","new macro for Spring.vm [SPR-1352]","**[Bruno Thomas](https://jira.spring.io/secure/ViewProfile.jspa?name=bamthomas)** opened **[SPR-1352](https://jira.spring.io/browse/SPR-1352?redirect=false)** and commented  Would it be possible to add a macro in spring.vm taking into account parameters for messages. For now we defined it in another macro file with :  #macro(springMessageWithArgs $code $args)$springMacroRequestContext.getMessage($code, $args)#end   ---  **Affects:** 1.2.5","closed","type: enhancement,","spring-projects-issues","2005-10-05T19:22:06Z","2012-06-19T03:18:56Z"
"","6051","UrlFilenameViewController [SPR-1351]","**[Bruno Thomas](https://jira.spring.io/secure/ViewProfile.jspa?name=bamthomas)** opened **[SPR-1351](https://jira.spring.io/browse/SPR-1351?redirect=false)** and commented  My question : would it be possible for UrlFilenameViewController to throw exception with handleRequestInternal (or is it meant to be final and always processing right), or possibliy for ModelAndViewDefiningException to be runtime ? (would it be a design fault ? After all, the sending or not of this kind of exception could be a runtime decision)  Here are the explanation for it. We've got a hierarchy of controllers that heritates of UrlFilenameController because of displaying of generic database tree nodes with different templates view for different node display type (so the UrlFilenameViewController is convenient for us). The flow is defined in handleRequestInternal (that is final), and for the children there are convenient abstract methods and parameters to allow customising of the AbstractNodeController.  While the controllers process business logic, we can have errors, and would like to go to error views via ModelAndViewDefiningException but the handleRequestInternal is not throwing exceptions and ModelAndViewDefiningException is checked.  So my question : would it be possible for UrlFilenameViewController to throw exception with handleRequestInternal (or is it meant to be final and always processing right), or possibliy for ModelAndViewDefiningException to be runtime ? (would it be a design fault ? After all, the sending or not of this kind of exception could be a runtime decision)    ---  **Affects:** 1.2.5","closed","type: enhancement,","spring-projects-issues","2005-10-05T19:16:50Z","2012-06-19T03:54:16Z"
"","6136","Resource ordering from PathMatchingResourcePatternResolver is wrong [SPR-1436]","**[Brian Repko](https://jira.spring.io/secure/ViewProfile.jspa?name=brianrepko@fastmail.us)** opened **[SPR-1436](https://jira.spring.io/browse/SPR-1436?redirect=false)** and commented  PathMatchingResourcePatternResolver method findAllClassPathResources uses a Set to ensure unique resources given multiple paths to the same file.  The problem is that it uses a HashSet to turn the Enumeration into a Resource[].  HashSet does not return the URLs in the same order.  This should be changed to LinkedHashSet which will return them in the insertion order.  This is vital for resources that show up in WebLogic's APP-INF/classes and then in WEB-INF/classes with the web app meant to take precedence (ie be last on the list).  The enumeration is in the right order but the resulting array may or may not be.  A quick change to LinkedHashSet will preserve order.   ---  **Affects:** 1.2.4, 1.2.5","closed","in: core,","spring-projects-issues","2005-11-04T04:57:27Z","2012-06-19T03:54:12Z"
"","6423","CookieLocaleResolver.setLocale() does not add cookie when called from controller [SPR-1726]","**[Brian Guan](https://jira.spring.io/secure/ViewProfile.jspa?name=bguan)** opened **[SPR-1726](https://jira.spring.io/browse/SPR-1726?redirect=false)** and commented  I have tested my code using both Spring 1.2.6 and 2.0-M2 and with both jetty 6 and Tomcat 5.5 using Sun's JDK 1.5.x  It seems there is a bug in CookieLocaleResolver - it fails to set the cookie when I call setLocale() in a form controller:      protected ModelAndView onSubmit(HttpServletRequest req, HttpServletResponse resp, Object command, BindException errors) throws Exception {     	Form form = (Form)command;		     	RequestContextUtils.getLocaleResolver(req).setLocale(req, resp, form.getLocale());		     	return new ModelAndView(getSuccessView());     }  Stepping thru sping's code eventually leads to response.addCookie() in being called in CookieGenerator.addCookie() but both tomcat 5.5 and jetty 6 seems to ignore it.  Inspecting the browser's cookies and adding debugging code to print out all cookies from subsequent requests confirms that the cookie is NOT being added at all.  Changing the cookie name and maxAge did not improve things...  I wonder if this is related to combination of redirect and response.addCookie()?  See http://www.jguru.com/faq/view.jsp?EID=53251 There is a suggested fix in there which I have verfied if it works or not...  Switching to SessionLocaleResolver works beautifully but I would rather use cookie based locale...  Any help would be much appreciated...   ---  **Affects:** 1.2.6, 2.0 M2","closed","status: declined,","spring-projects-issues","2006-02-17T09:20:49Z","2019-01-12T16:29:35Z"
"","6846","spring-jee.xsd -> jee:environment only allowed once in jndiLocatedType [SPR-2155]","**[Brian Curnow](https://jira.spring.io/secure/ViewProfile.jspa?name=bcurnow)** opened **[SPR-2155](https://jira.spring.io/browse/SPR-2155?redirect=false)** and commented  When using the jee:jndi-lookup tag you can only specify one jee:environment sub-element instead of (at least) two like the documentation states. The schema is defined to only allow a maxOccurs of 1.  This is on build.50-20060619   ---  **Affects:** 2.0 RC1","closed","type: bug,","spring-projects-issues","2006-06-19T02:31:44Z","2012-06-19T03:52:30Z"
"","5906","Spring doesn't conform to JavaBean naming conventions [SPR-1203]","**[Brett Knights](https://jira.spring.io/secure/ViewProfile.jspa?name=bknights)** opened **[SPR-1203](https://jira.spring.io/browse/SPR-1203?redirect=false)** and commented  The method      /**      * Return the uncaptilized short string name of a Java class.      * @param clazz the class      * @return the short name rendered in a standard JavaBeans property format      */     public static String getShortNameAsProperty(Class clazz) {     	return StringUtils.uncapitalize(getShortName(clazz));     }  does not return the class name in standard JavaBeans property format.  from section 8.8 of the spec '...Thus when we extract a property or event name from the middle of an existing Java name, we normally convert the first character to lower case. However to support the occasional use of all upper-case names, we check if the first two characters of the name are both upper case and if so leave it alone. So for example, ""FooBah"" becomes ""fooBah"" ""Z"" becomes ""z"" ""URL"" becomes ""URL"" We provide a method Introspector.decapitalize which implements this conversion rule.'  the method is in java.beans.Introspector This is admittedly trivial but it is a PITA when using a framework like Appfuse where Spring is mixed with libraries that use the correct JavaBeans name.   --- No further details from [SPR-1203](https://jira.spring.io/browse/SPR-1203?redirect=false)","closed","type: bug,","spring-projects-issues","2005-08-05T01:06:14Z","2005-08-05T06:20:54Z"
"","6092","TypeMismatchException for property 'hibernateTemplate' [SPR-1392]","**[Brent Trimmer](https://jira.spring.io/secure/ViewProfile.jspa?name=btrimmer)** opened **[SPR-1392](https://jira.spring.io/browse/SPR-1392?redirect=false)** and commented  I'm using the AbstractTransactionalDataSourceSpringContextTests to create an integration test. Below is the context file:           	     		classpath:jdbc.properties     	                    	${jdbc.url}     	${jdbc.driver}     	${jdbc.user}     	${jdbc.password}                    	     	     		     			classpath:com/foo/resource/domain/ResourceGroup.hbm.xml     		     	     	     		     			org.hibernate.dialect.SQLServerDialect     			true     		     	                    	     		     	                    	     		     	                                                  	     		     	     	     		     	          	          	     		     	                    	     		     	       Here is the code. It's very simple.  public class ResourceGroupDAOTest extends AbstractTransactionalDataSourceSpringContextTests { private DAO dao;      public void testCRUD() throws Exception {         // Create a new one         ResourceGroup group = new ResourceGroup();         group.setName(""New Group"");         group.setCompanyId(new Integer(1));         group.setEvaluationStatusId(new Integer(1));         group.setCreateTimestamp(new Timestamp(System.currentTimeMillis()));         this.dao.insert(group);                  assertNotNull(group.getId());                  // Read new group;         ResourceGroup readGroup = (ResourceGroup) this.dao.read(group.getId(), ResourceGroup.class);         assertEquals(group.getName(), readGroup.getName());         assertEquals(group.getCompanyId(), readGroup.getCompanyId());         assertEquals(group.getEvaluationStatusId(), readGroup.getEvaluationStatusId());                  // Update group         group.setName(""Updated Group"");         this.dao.update(group);                  // Read updated group;         ResourceGroup updatedGroup = (ResourceGroup) this.dao.read(group.getId(), ResourceGroup.class);         assertEquals(group.getName(), updatedGroup.getName());                  // Delete group         this.dao.delete(updatedGroup);     }          public void setResourceGroupDAO(DAO dao)   {         this.dao = dao;     }          protected String[] getConfigLocations()   {         return AppContext.CONTEXT_FILES;     }  }  Here is the exception I'm getting. Any guidance would be appreciated.  java.lang.ExceptionInInitializerError at com.foo.resource.persistence.ResourceGroupDAOTest.getConfigLocations(ResourceGroupDAOTest.java:51) at org.springframework.test.AbstractDependencyInjectionSpringContextTests.contextKey(AbstractDependencyInjectionSpringContextTests.java:156) at org.springframework.test.AbstractDependencyInjectionSpringContextTests.setUp(AbstractDependencyInjectionSpringContextTests.java:129) at junit.framework.TestCase.runBare(TestCase.java:125) at junit.framework.TestResult$1.protect(TestResult.java:106) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.framework.TestResult.run(TestResult.java:109) at junit.framework.TestCase.run(TestCase.java:118) at junit.framework.TestSuite.runTest(TestSuite.java:208) at junit.framework.TestSuite.run(TestSuite.java:203) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196) Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'resourceGroupDAO' defined in class path resource [applicationContext-setup.xml]: Error setting property values; nested exception is org.springframework.beans.PropertyAccessExceptionsException: PropertyAccessExceptionsException (1 errors); nested propertyAccessExceptions are: [org.springframework.beans.TypeMismatchException: Failed to convert property value of type [$Proxy1] to required type [org.springframework.orm.hibernate3.HibernateTemplate] for property 'hibernateTemplate'] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1031) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:823) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:345) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:226) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:147) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:275) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:318) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:81) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:66) at com.foo.framework.context.AppContext.\(AppContext.java:10) ... 13 more Caused by: PropertyAccessExceptionsException (1 errors) at org.springframework.beans.BeanWrapperImpl.setPropertyValues(BeanWrapperImpl.java:934) at org.springframework.beans.BeanWrapperImpl.setPropertyValues(BeanWrapperImpl.java:906) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1022) ... 22 more    ---  **Affects:** 1.2.5","closed","status: declined,","spring-projects-issues","2005-10-18T18:00:42Z","2019-01-12T16:29:56Z"
"","6121","Getting a org.dom4j.DocumentException on a valid spring configuration file [SPR-1421]","**[Branden Root](https://jira.spring.io/secure/ViewProfile.jspa?name=hexghost)** opened **[SPR-1421](https://jira.spring.io/browse/SPR-1421?redirect=false)** and commented  I'm developing a webapp with spring MVC and hibernate 3. I've broken my spring configuration files into 3 separate files, one for just the dataSource, one for the hibernate stuff, and one for everything else. I'm getting an error when I try and run my webapp telling me the hibernate spring configuration file has a syntax error. However, the xml file validates fine, and looks almost exactly like the sample files provided with spring. Here's my applicationContext-hibernate.xml:  \ \ \                                                      Article.hbm.xml                 Category.hbm.xml                 Directory.hbm.xml                 Product.hbm.xml                 User.hbm.xml                                                              org.hibernate.dialect.SQLServerDialect                 3                                                \  Not very complicated. Here's the error I get: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sessionFactory' defined in ServletContext resource [/WEB-INF/applicationContext-hibernate.xml]: Initialization of bean failed; nested exception is org.hibernate.MappingException: org.dom4j.DocumentException: Error on line 23 of document  : The element type ""property"" must be terminated by the matching end-tag ""\"". Nested exception: The element type ""property"" must be terminated by the matching end-tag ""\"". org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:370)  etc etc. However as you can see, all the \'s are correctly closed. Why am I getting this error?   ---  **Affects:** 1.2.5","closed","in: data,","spring-projects-issues","2005-10-26T10:24:13Z","2019-01-11T21:01:20Z"
"","5975","JavaDocs :: org.springframework.web.servlet.mvc.Controller :: Grammatical Error [SPR-1273]","**[Brad Schaefer](https://jira.spring.io/secure/ViewProfile.jspa?name=bschaefer)** opened **[SPR-1273](https://jira.spring.io/browse/SPR-1273?redirect=false)** and commented  ""To be able to configure Controller in an easy, Controllers are usually JavaBeans.""  in an easy what?  an easy way?   ---  **Affects:** 1.2.4","closed","type: bug,","spring-projects-issues","2005-08-31T06:35:43Z","2012-06-19T03:54:24Z"
"","5974","Reference Docs :: 22.8.1 Introduction :: Typo [SPR-1272]","**[Brad Schaefer](https://jira.spring.io/secure/ViewProfile.jspa?name=bschaefer)** opened **[SPR-1272](https://jira.spring.io/browse/SPR-1272?redirect=false)** and commented  ""MultipartResovler"" should be MultipartResolver   --- No further details from [SPR-1272](https://jira.spring.io/browse/SPR-1272?redirect=false)","closed","type: bug,","spring-projects-issues","2005-08-31T06:33:29Z","2012-06-19T03:53:59Z"
"","5973","Reference Docs :: 22.2.2 Dependency Injection of test class instances :: Typo [SPR-1271]","**[Brad Schaefer](https://jira.spring.io/secure/ViewProfile.jspa?name=bschaefer)** opened **[SPR-1271](https://jira.spring.io/browse/SPR-1271?redirect=false)** and commented  ""they can optionally configure instances of yourr test classes by Setter Injection.""  yourr should be your   --- No further details from [SPR-1271](https://jira.spring.io/browse/SPR-1271?redirect=false)","closed","type: bug,","spring-projects-issues","2005-08-31T06:32:33Z","2012-06-19T03:54:33Z"
"","5972","Reference Docs :: 10.2.1 JdbcTemplate & 10.2.5 Running Queries :: Typos [SPR-1270]","**[Brad Schaefer](https://jira.spring.io/secure/ViewProfile.jspa?name=bschaefer)** opened **[SPR-1270](https://jira.spring.io/browse/SPR-1270?redirect=false)** and commented  10.2.1 ""The same is true for the CallableStatementCreateor interface which creates callable statement."" Createor ?  I think I'd like to coin that term for something (heh)  10.2.5 ""In addition to the singe results query methods there are"" singe should be single   --- No further details from [SPR-1270](https://jira.spring.io/browse/SPR-1270?redirect=false)","closed","type: bug,","spring-projects-issues","2005-08-31T06:31:33Z","2012-06-19T03:54:13Z"
"","5971","Reference Docs :: 7.3.1 High-level approach :: Typo [SPR-1269]","**[Brad Schaefer](https://jira.spring.io/secure/ViewProfile.jspa?name=bschaefer)** opened **[SPR-1269](https://jira.spring.io/browse/SPR-1269?redirect=false)** and commented  ""These integrationA classes are detailed in subsequent chapters of this manual.""  integrationA is a typo   --- No further details from [SPR-1269](https://jira.spring.io/browse/SPR-1269?redirect=false)","closed","type: bug,","spring-projects-issues","2005-08-31T06:28:59Z","2012-06-19T03:53:55Z"
"","6338","LocalSessionFactoryBean problem with Hibernate 3.1.1 [SPR-1641]","**[Brad Koehn](https://jira.spring.io/secure/ViewProfile.jspa?name=koehn)** opened **[SPR-1641](https://jira.spring.io/browse/SPR-1641?redirect=false)** and commented  I have a subclass of LocalSessionFactoryBean overrides newSessionFactory(Configuration) to alter the SQL of my configuration's namedSqlQueries at runtime. Basically, I iterate through all the namedSqlQueries and use some regexp to insert a schema name based on the runtime environment I'm in.  Under Hibernate 3.1, config.getNamedQueries() returns a Set of all of my named SqlQueries. My code modifies the queries, updates the Set, and returns super.newSessionFactory(config). Wonderful.  Under Hibernate 3.1.1, config.getNamedQueries() returns an empty Set. However, something is still working, as subsequent code sees the (unmodified) SQL from the resulting sessionFactory.  Is it possible that something changed in the way configurations are built in Hibernate 3.1.1 that would affect this? I'll attach my code for testing purposes.   ---  **Affects:** 1.2.6  **Attachments:** - [CidLocalSessionFactoryBean.java](https://jira.spring.io/secure/attachment/11421/CidLocalSessionFactoryBean.java) (_2.96 kB_) - [CidLocalSessionFactoryBean.java](https://jira.spring.io/secure/attachment/11420/CidLocalSessionFactoryBean.java) (_2.49 kB_)","closed","type: enhancement,","spring-projects-issues","2006-01-26T05:15:14Z","2012-06-19T03:54:06Z"
"","6539","Declarative transactions in 2.0-m3 with Hibernate cause deadlock on MySQL [SPR-1845]","**[Boris Ilyushonak](https://jira.spring.io/secure/ViewProfile.jspa?name=chiffa)** opened **[SPR-1845](https://jira.spring.io/browse/SPR-1845?redirect=false)** and commented  I use spring v.2.0-m3 and hibernate 3.1.rc2.  I use the following ransaction attributes in the TransactionProxyFactoryBean settings:  Code: \PROPAGATION_REQUIRED\Then I run the following unit test for my service (called catalogDAO):  Code: Collection\ catalogList = catalogDAO.getCatalogList(); Catalog catalog = catalogDAO.getCatalog(existantCatalogId); catalogList = catalogDAO.getCatalogList(); catalog = catalogDAO.getCatalog(existantCatalogId); The result is something like deadlock (the test is buzzing). Please, note, that in the spring v.1.2.5 (and 1.2.3) all works fine.  If it is necessary, I'll provide all code. I use the MySQL DB with InnoDB tables.   ---  **Affects:** 2.0 M3","closed","in: data,","spring-projects-issues","2006-03-30T17:38:37Z","2019-01-11T22:02:02Z"
"","6636","Allow definition of Prototypes / factories with construction arguments [SPR-1943]","**[Bonny Rais](https://jira.spring.io/secure/ViewProfile.jspa?name=bonnyr)** opened **[SPR-1943](https://jira.spring.io/browse/SPR-1943?redirect=false)** and commented  A useful addition to Spring 'prorotype' handling capability would be if Spring would allow application code to use a combination push/pull model for creating bean instances using prototype beans configured in a context file.  This has been raised by me in this thread: http://forum.springframework.org/showthread.php?t=24253 and as requested by Costin I'm raising this RFE.  In terms of changes required, there's a small change needed in abstractBeanFactory's getBean method, so that the check for factory-method does not fail and also a new method for creating the new instance using reflection to lookup an appropriate constructor in AbstractAutowireCapableBeanFactory's implementation of createBean   ---  **Affects:** 1.2.7, 2.0 M3","closed","type: enhancement,","spring-projects-issues","2006-04-20T20:26:52Z","2012-06-19T09:37:45Z"
"","6487","Relative paths in import not resolved properly if application context uses '..'  in its own path [SPR-1793]","**[Bonny Rais](https://jira.spring.io/secure/ViewProfile.jspa?name=bonnyr)** opened **[SPR-1793](https://jira.spring.io/browse/SPR-1793?redirect=false)** and commented  import path location resolution breaks if the containing application context was itself loaded using a path that contains '..' as the first component of the path. That is, if the application directory structure is: root +--- conf +--- spring +--- bin +--- run  and the application is started in the bin directory, and the application context is located under conf, and so the code to load it is: FileSystemXmlApplicationContext config = new FileSystemXmlApplicationContext(new String[] { ""../conf/app-ctx.xml""}, true);  then any imported resources using the \ construct in the application context with location path which is relative to the application context (in the example above, something like \ cannot be resolved.  This is due to the code in StringUtils.cleanPath, which simply strips the '..' prefix  and when the time comes for loading the imported resources , the createRelative method uses this 'cleaned' path which is missing information, rather than the complete path of the 'file' member, and the calculated path becomes: ""\/bin/conf/spring/event.xml"".  This used to work in previous versions of Spring (1.2)    ---  **Affects:** 1.2.7, 2.0 M3","closed","in: core,","spring-projects-issues","2006-03-15T09:58:28Z","2012-06-19T03:54:16Z"
"","6867","Resources held by parents of LabelTag are not cleaned up. [SPR-2176]","**[Bjørn Ellingsen](https://jira.spring.io/secure/ViewProfile.jspa?name=bjorn)** opened **[SPR-2176](https://jira.spring.io/browse/SPR-2176?redirect=false)** and commented  The tag org.springframework.web.servlet.tags.form.LabelTag overrides doFinally() of AbstractDataBoundFormElementTag (same pkg), but does not include a call to super.doFinally(). The result is that member bindStatus of AbstractDataBoundFormElementTag is not null'ed when doFinally() is run, as it would have been if LabelTag had included super.doFinally().  Easy way to visualize this bug is to set the cssErrorClass attribute of a LabelTag, and then create a field validation error bound to the property which the label is for. Body-text of the label is tagged with the correct CSS class, but after the validation error is corrected the label body is still tagged with CSS error class.  Suggestion - add a super.doFinally() between lines 114 and 115 of LabelTag:      /**      * Clean the {@link TagWriter} instance.      */     public void doFinally() {     	super.doFinally();     	this.tagWriter = null;     }    ---  **Affects:** 2.0 RC1","closed","type: bug,","spring-projects-issues","2006-06-22T02:20:21Z","2012-06-19T03:52:36Z"
"","6642","MBeanProxyFactoryBean should depend on ObjectNamingStrategy [SPR-1949]","**[Bjørn Bjerkeli](https://jira.spring.io/secure/ViewProfile.jspa?name=bjerkeli)** opened **[SPR-1949](https://jira.spring.io/browse/SPR-1949?redirect=false)** and commented  We are currently developing and deploying applications that both exposes services as managed objects using org.springframework.jmx.export.MBeanExporter and clients acessing the same MBeans using MBeanProxyFactoryBean.  In the case where we actually use a namingstrategy (e.g in websphere) to generate names on the form:  WebSphere:cell=smhpCell,name=Service.aService,node=hm-ttsmhp-1-ops,process=IntegrationTest8  It would have been very convenient to have MBeanProxyFactoryBean also depend on a namingsrategy where we have plugability withn respect to the name we want to generate, which may or may not be possible.  This is the implementation, which may be consolidated into MBeanProxyFactoryBean:  public class NamingStrategyAwareMBeanProxyFactoryBean extends MBeanProxyFactoryBean { /** The implementation of the namingstrategy.*/ private ObjectNamingStrategy namingStrategy;      /**      * This version of the {@link #setObjectName(String)} } method uses the naming      * strategy to generate an appropriate.      * @param objectName      * @throws MalformedObjectNameException      * @see ObjectNamingStrategy#getObjectName(Object, String)      */     public void setObjectName(String objectName) throws MalformedObjectNameException {         String generatedObjectName = namingStrategy.getObjectName(null, objectName).getCanonicalName();         super.setObjectName(generatedObjectName);     }          public void setNamingStrategy(ObjectNamingStrategy namingStrategy) {         this.namingStrategy = namingStrategy;     }  }    --- No further details from [SPR-1949](https://jira.spring.io/browse/SPR-1949?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-04-23T23:02:32Z","2012-06-19T03:18:56Z"
"","6811","OpenSessionInViewFilter: configurable FlushMode [SPR-2120]","**[Bill Schneider](https://jira.spring.io/secure/ViewProfile.jspa?name=wrschneider99)** opened **[SPR-2120](https://jira.spring.io/browse/SPR-2120?redirect=false)** and commented  as of hibernate 3.2 it may become safe to have FlushMode.AUTO with OpenSessionInViewFilter, because FlushMode.AUTO will only actually flush changes if you are inside a transaction.  the filter could still default to NEVER, but allow for a different mode to be supplied as a parameter in the \ element instead of having to subclass and override getSession.  See: http://opensource.atlassian.com/projects/hibernate/browse/HHH-1410    ---  **Affects:** 1.2.8, 2.0 final  **Backported to:** [1.2.9](https://github.com/spring-projects/spring-framework/milestone/39?closed=1)","closed","type: enhancement,","spring-projects-issues","2006-06-09T03:58:40Z","2012-06-19T03:52:30Z"
"","6640","Avoid UnexpectedRollbackException in AbstractTransactionalSpringContextTests [SPR-1947]","**[Bill Schneider](https://jira.spring.io/secure/ViewProfile.jspa?name=wrschneider99)** opened **[SPR-1947](https://jira.spring.io/browse/SPR-1947?redirect=false)** and commented  TransactionTemplate.execute calls PlatformTransactionManager.commit, regardless of whether the transaction is new or not.  The underlying TransactionManager.commit **does** check status.isNewTransaction, so this is not a serious problem; the transaction only gets committed at the outermost layer that actually created the transaction.  But it is an annoyance when used in conjunction with AbstractTransactionalSpringContextTests.  In this case a transaction is globally set to rollback only, but the local body of TransactionCallback is unaware of this.  The end result is an UnexpectedRollbackException, when the desired behavior (at least for the purpose of unit tests) may be to silently continue on.    ---  **Affects:** 1.2.3","closed","type: enhancement,","spring-projects-issues","2006-04-21T08:05:35Z","2012-06-19T03:52:22Z"
"","6129","BlobInputStreamType, analogous to BlobSerializableType [SPR-1429]","**[Bill Schneider](https://jira.spring.io/secure/ViewProfile.jspa?name=wrschneider99)** opened **[SPR-1429](https://jira.spring.io/browse/SPR-1429?redirect=false)** and commented  It would be great if you could have a POJO InputStream property, persisted as a Blob, so you didn't have to hold the entire byte[] contents in memory.  It would look very similar to BlobSerializableType, except instead of reading the contents of the stream and using readObject, you would just pass the binary stream itself.  It would be essentially like the imagedb demo except the InputStream would be just another hibernate persisted property.  Obviously, the use of that stream would be fairly restricted to within a session/transaction.  Or is there a reason why we wouldn't want to do this?  I was thinking about writing this myself, but realize that it's probably generally useful and wanted to see if there was support for something like this in Spring itself before going ahead and doing it.   --- No further details from [SPR-1429](https://jira.spring.io/browse/SPR-1429?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-11-01T03:39:03Z","2005-11-04T07:23:19Z"
"","6639","StoredProcedure.execute requires that the size of the params matches the number of input parameters [SPR-1946]","**[Bill Poitras](https://jira.spring.io/secure/ViewProfile.jspa?name=wpoitras)** opened **[SPR-1946](https://jira.spring.io/browse/SPR-1946?redirect=false)** and commented  StoredProcedure.execute (both versions) requires that the number of parameters specified in the map is exactly as the number of input arguments.  I see no reason for this.  If a key in the Map is not actually set, it should be the same as the value being set to null.  Also, there shouldn't be an issue with the Map containing more parameters than is required.  A workaround for this issue for execute(Map params) is to override this method and skip the validation part by calling:  return getJdbcTemplate().call(newCallableStatementCreator(inParams), getDeclaredParameters());  This of course has the side affect is disabling a check to determine if compile() has been called.  I propose a solution where StoredProcedure has a watered down version validateParameters that doesn't require the map to have the exact size.   ---  **Affects:** 1.2.7, 2.0 M3","closed","type: enhancement,","spring-projects-issues","2006-04-21T05:53:45Z","2012-06-19T03:52:46Z"
"","6358","Add mention of ObjectFactoryCreatingFactoryBean in Reference Manual [SPR-1661]","**[Bill Poitras](https://jira.spring.io/secure/ViewProfile.jspa?name=wpoitras)** opened **[SPR-1661](https://jira.spring.io/browse/SPR-1661?redirect=false)** and commented  In section 3.4.2.1 BeanFactoryAware I believe its worth mentioning that an alternative to using BeanFactoryAware is to create a property of type ObjectFactory and initializing it with a org.springframework.beans.factory.config.ObjectFactoryCreatingFactoryBean.  I had used BeanFactoryAware for cases where ObjectFactoryCreatingFactoryBean was more appropriate and feel that it should be mentioned somewhere in the reference manual.  This seems to me to be most appropriate.   ---  **Affects:** 2.0 M2","closed","type: enhancement,","spring-projects-issues","2006-02-02T07:32:36Z","2012-06-19T03:54:20Z"
"","6333","Allow BeanFactory.getBean to take arguments [SPR-1636]","**[Bill Poitras](https://jira.spring.io/secure/ViewProfile.jspa?name=wpoitras)** opened **[SPR-1636](https://jira.spring.io/browse/SPR-1636?redirect=false)** and commented  AbstractFactoryBean has two versions of getBean which would be useful for wider use:  getBean(String name, Object[] args) getBean(String name, Class requiredType, Object[] args)  The args are passed into the method specified as factory-method and as such are only applicable to bean definitions which use this form of injection.   ---  **Affects:** 1.2.6  6 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2006-01-21T00:36:28Z","2019-01-11T21:27:25Z"
"","6307","There should be PointCuts with similar functionality to JMX assemblers [SPR-1610]","**[Bill Poitras](https://jira.spring.io/secure/ViewProfile.jspa?name=wpoitras)** opened **[SPR-1610](https://jira.spring.io/browse/SPR-1610?redirect=false)** and commented  It seems logical that any JMX export methods that are done with assemblers should be available as PointCuts to be used in auto proxying.  The following is a list of JMX export methods that I found do not have equivalent PointCuts:  - All public methods in a class (SimpleReflectiveMBeanInfoAssembler) - All public methods implemented in specified interfaces (InterfaceBasedMBeanInfoAssembler) - All public methods in a class except those explicity excluded (MethodExclusionMBeanInfoAssembler)  This is based on the thread http://forum.springframework.org/showthread.php?p=46677   ---  **Affects:** 1.2.6","closed","type: enhancement,","spring-projects-issues","2006-01-12T01:12:12Z","2012-06-19T09:37:23Z"
"","6209","maven pom hosed on repo1.maven.org [SPR-1510]","**[Bill Dudney](https://jira.spring.io/secure/ViewProfile.jspa?name=bdudney)** opened **[SPR-1510](https://jira.spring.io/browse/SPR-1510?redirect=false)** and commented  here is the detail from an attempt to find someone on the #spring chanel on irc.freenode.net  bdudney: hi - anyone around that knows about the spring POM associated with http://repo1.maven.org/maven2/springframework/spring/1.2.5/spring-1.2.5.jar? [10:52pm] bdudney: it appears that the POM is busted [10:52pm] sleestak: i haven't used that. [10:53pm] bdudney: i get this error when trying to build my project that depends on the pom [10:53pm] bdudney: http://www.rafb.net/paste/results/oUZAPx84.html  Thanks!  ---  **Affects:** 1.2.5  **Issue Links:** - #6183 Maven 2 support (POMs) (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2005-12-01T15:59:01Z","2019-01-12T16:52:19Z"
"","6698","Document XML schemas using XS3P schema doc tool [SPR-2005]","**[Ben Rowlands](https://jira.spring.io/secure/ViewProfile.jspa?name=benrowlands)** opened **[SPR-2005](https://jira.spring.io/browse/SPR-2005?redirect=false)** and commented  Document XML schemas using XS3P schema doc tool (XSLT so can be build as part of ant task easily).  Looks nicer than current schema docs at http://static.springframework.org/spring/docs/2.0.x/reference/spring-beans.xsd.html  See: http://titanium.dstc.edu.au/xml/xs3p/ Demo: http://titanium.dstc.edu.au/xml/xs3p/online.shtml   ---  **Affects:** 2.0 M4  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2006-05-12T03:21:49Z","2012-06-19T09:37:39Z"
"","6697","Update schema to allow custom XML configuration inside the constructor-arg tag [SPR-2004]","**[Ben Rowlands](https://jira.spring.io/secure/ViewProfile.jspa?name=benrowlands)** opened **[SPR-2004](https://jira.spring.io/browse/SPR-2004?redirect=false)** and commented  Update schema to allow custom XML configuration inside constructor-arg tag  ie, If i want to pass a custom component defined usign new custom XML i can't do this:  \ \ \ This just looks like a missing entry in shema; XmlBeanDefinitionParserHelper does handle this.   ---  **Affects:** 2.0 M4","closed","in: core,","spring-projects-issues","2006-05-12T03:13:54Z","2012-06-19T03:52:45Z"
"","6523","Provide API on ParserContext to indicate if a custom element is an inner bean definition [SPR-1829]","**[Ben Rowlands](https://jira.spring.io/secure/ViewProfile.jspa?name=benrowlands)** opened **[SPR-1829](https://jira.spring.io/browse/SPR-1829?redirect=false)** and commented  When writing a custom namespace handler it would be convenient to be able to query if the definition is intended for an inner bean. For example, the bean id may be optional if used as an inner bean.  API could be provided on the new ParserContext passed to parse(...)?  A hacky workaround is to check if the parent element is in beans namespace and has local name 'beans', alternativly check if the custom element is a child of the root node (otherwise it's can be assumed to be an inner bean). An API someting like isInnerBean() would be cleaner.   ---  **Affects:** 2.0 M3","closed","type: enhancement,","spring-projects-issues","2006-03-27T06:44:33Z","2012-06-19T03:54:14Z"
"","6519","Support for custom elements nested underneath List, Map etc.. [SPR-1825]","**[Ben Rowlands](https://jira.spring.io/secure/ViewProfile.jspa?name=benrowlands)** opened **[SPR-1825](https://jira.spring.io/browse/SPR-1825?redirect=false)** and commented  Allow the new custom Schema based configuration to be used for List entries - ie, when parsing a list (or Map, Set) then handle the case of a nested custom element.  Example usecase: Suppose a component takes a list of infrastructure components. If the config for these components uses the new Schema config then it would be convenient to nest them directly (in the same way that inner beans can be nested).  Ie, rather than current nested bean config:   \ \ \\\ \\\ \\\ \ \ \  You could do:   \ \    \ \ \  Where 'bar' is the perfix for the namespace the infrasturcture components are defined in.  This can currently be achieved by defining the nested beans as top level beans and using a  tag in the list, but is quite cumbersome.   ---  **Affects:** 2.0 M3","closed","type: enhancement,","spring-projects-issues","2006-03-27T01:11:47Z","2012-06-19T03:54:20Z"
"","6518","Add API to set SchemaLocations on parser used in XmlBeanDefinitionParser [SPR-1824]","**[Ben Rowlands](https://jira.spring.io/secure/ViewProfile.jspa?name=benrowlands)** opened **[SPR-1824](https://jira.spring.io/browse/SPR-1824?redirect=false)** and commented  With the new Schema Based config its awkward to set the schema locations on each instance document.  Provide an API on the XmlBeanDefinitionParser to set the schemaLocations value on the parser (parser attribute ""http://java.sun.com/xml/jaxp/properties/schemaSource""). Something like setSchemaLocations(Map locations) which takes map of URI->schema location.  Perhaps default to providing the spring beans schema location?  This could be achieved easily by subclassing, but is a little awkward (as the validation type is private) so must query the factory to see what validation super decided upon.  Ie:  protected DocumentBuilderFactory createDocumentBuilderFactory( Resource resource_ ) throws ParserConfigurationException { DocumentBuilderFactory factory = super.createDocumentBuilderFactory( resource_ );      if( XSD_SCHEMA_LANGUAGE.equals( factory.getAttribute( SCHEMA_LANGUAGE_ATTRIBUTE ) ) )     {       if( this.schemaLocations != null )       {         factory.setAttribute( ""http://java.sun.com/xml/jaxp/properties/schemaSource"", this.schemaLocations);       }     }          return factory;  }   ---  **Affects:** 2.0 M3","closed","type: enhancement,","spring-projects-issues","2006-03-27T00:59:57Z","2012-06-19T03:53:59Z"
"","6043","MultiAction JAAS Security Interceptor [SPR-1343]","**[Ben Poweski](https://jira.spring.io/secure/ViewProfile.jspa?name=bpoweski)** opened **[SPR-1343](https://jira.spring.io/browse/SPR-1343?redirect=false)** and commented  I built and designed everything system for my company (we do credit card processing0 leveraging the spring framework.  Here is a security intereceptor for the MultiActionController classes we use.  I think it is generic enought to be in the framework, so I thought I'd submit the source and unit test for it.  Feel free to extend upon it, I just asked to be credited somewhere.  Thanks!  ---  package com.ccfone.mckinley.interceptor;  import java.util.Iterator; import java.util.Properties;  import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse;  import com.ccfone.commons.utils.ComparisonUtils;  /** * The MultiActionMethodJaasSecurityInterceptor provides the ability to map method names to a comma separated list of allowed roles.  * Non mapped paramNames are not processed.  *   * `@throws` SecurityException upon access of a Principal with an invalid set of roles  *   \ * * <bean id=""multiActionAccountSecurityInterceptor"" class=""com.ccfone.mckinley.interceptor.MultiActionMethodJaasSecurityInterceptor""> *   <property name=""paramName"" value=""method""/> * <property name=""mappings""> * <props> * <prop key=""myAccount"">AccountAdmin</prop> * <prop key=""detail"">AccountAdmin,GlobalAdmin</prop> * <prop key=""pending"">GlobalAdmin</prop>                                           * </props> * </property> * </bean> *  *   \ *  * `@author` Ben Poweski   */   public class MultiActionMethodJaasSecurityInterceptor extends HandlerInterceptorAdapter {    private Properties mappings = new Properties();   private String paramName;    public boolean preHandle(HttpServletRequest request,   HttpServletResponse response, Object obj) throws Exception {         // get the value of the method paramater        String paramValue = request.getParameter(getParamName());               if (ComparisonUtils.isNotEmpty(paramValue)) {            // iterate over the mappings            for (Iterator i = mappings.keySet().iterator(); i.hasNext();) {                       String method = (String) i.next();                       // check the roles if this is the current value                if (paramValue.equals(method)) {                           boolean allowed = false;                           // get the propery, default to """" to prevent NPE                    String roleList = getMappings().getProperty(method, """");                    String[] roles = roleList.split("","");                           // iterate over all roles                    for (int x = 0; x < roles.length; x++) {                        String role = roles[x];                        if (request.isUserInRole(role)) {                                   allowed = true;                            break;                        }                    }                           // check the flag                    if (!allowed) {                        throw new SecurityException(""User ""                                + request.getUserPrincipal()                                + "" is not authorized for "" + getParamName()                                + ""={"" + paramValue + ""}"");                    }                }            }        }               return super.preHandle(request, response, obj);    }    /**    * `@return` Returns the mappings.     */     public Properties getMappings() {     return mappings;     }    /**    * `@param` mappings   *           The mappings to set.    */   public void setMappings(Properties mappings) {   this.mappings = mappings;   }    /**    * `@return` Returns the paramName.     */     public String getParamName() {     return paramName;     }    /**    * `@param` paramName   *           The paramName to set.    */   public void setParamName(String paramName) {   this.paramName = paramName;   }   }  ---  UnitTest  package com.ccfone.mckinley.interceptor;  import java.security.Principal; import java.util.Properties;  import junit.framework.TestCase;  import org.springframework.mock.web.MockHttpServletRequest; import org.springframework.mock.web.MockHttpSession;  public class MultiActionMethodJaasSecurityInterceptorTest extends TestCase {      private MockHttpServletRequest request;     private MultiActionMethodJaasSecurityInterceptor interceptor;          public void setUp() {              request = new MockHttpServletRequest();         request.setSession(new MockHttpSession());         request.setUserPrincipal(new SimplePrincipal(""ben""));              // setup our test definition         Properties props = new Properties();         props.setProperty(""secret"", ""Root,Admin"");         props.setProperty(""noRolesDefined"", """");              // setup the interceptor and param name         interceptor = new MultiActionMethodJaasSecurityInterceptor();         interceptor.setParamName(""method"");         interceptor.setMappings(props);     }          public void testAuthFailsRole() throws Exception {                  request.addUserRole(""User"");                 request.setAttribute(interceptor.getParamName(), ""secret"");              try {                  interceptor.preHandle(request, null, null);              } catch (SecurityException e) {             assertTrue(true);         }     }          public void testAuthHasOneRole() throws Exception {                  request.addUserRole(""User"");         request.addUserRole(""Admin"");                 request.setAttribute(interceptor.getParamName(), ""secret"");                      // setup our return result              try {                  interceptor.preHandle(request, null, null);             assertTrue(true);              } catch (SecurityException e) {             fail();         }     }              public void testAuthHasBothRoles() throws Exception {                  request.addUserRole(""Root"");         request.addUserRole(""Admin"");                 request.setAttribute(interceptor.getParamName(), ""secret"");                      // setup our return result              try {                  interceptor.preHandle(request, null, null);             assertTrue(true);              } catch (SecurityException e) {             fail();         }     }                  public void testNoRolesDefined() throws Exception {                  request.addUserRole(""Root"");         request.addUserRole(""Admin"");                 request.setAttribute(interceptor.getParamName(), ""noRolesDefined"");                      // setup our return result              try {                  interceptor.preHandle(request, null, null);              } catch (SecurityException e) {             assertTrue(true);         }     }                   public void testNoParamDefined() throws Exception {                  request.addUserRole(""Root"");         request.addUserRole(""Admin"");                 request.setAttribute(interceptor.getParamName(), ""someOtherValue"");                      // setup our return result              try {                  interceptor.preHandle(request, null, null);             assertTrue(true);                          } catch (SecurityException e) {             fail();         }     }          }  // test principal class class SimplePrincipal implements Principal {      private String name;          public SimplePrincipal(String name) {         setName(name);     }          public void setName(String name) {         this.name = name;     }          public String getName() {         return name;     }          public String toString() {         return getName();     }  };  ---  No further details from [SPR-1343](https://jira.spring.io/browse/SPR-1343?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-10-03T09:33:48Z","2019-01-13T08:57:03Z"
"","6247","Classloader problem when two Spring applications are deployed in Orion [SPR-1549]","**[Barry Lagerweij](https://jira.spring.io/secure/ViewProfile.jspa?name=barryl)** opened **[SPR-1549](https://jira.spring.io/browse/SPR-1549?redirect=false)** and commented  When two Spring-enabled applications are configured in the application-server, then only one of those applications will work. The second application produces an exception:  500 Internal Server Error  org.springframework.beans.factory.BeanCreationException: Error creating bean with name '/greeting' defined in ServletContext resource [/WEB-INF/spring-actions.xml]: Can't resolve reference to bean 'recordingManager' while setting property 'recordingManager'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'recordingManager' defined in ServletContext resource [/WEB-INF/spring.xml]: Initialization of bean failed; nested exception is java.lang.IllegalArgumentException: interface org.springframework.aop.framework.Advised is not visible from class loader  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'recordingManager' defined in ServletContext resource [/WEB-INF/spring.xml]: Initialization of bean failed; nested exception is java.lang.IllegalArgumentException: interface org.springframework.aop.framework.Advised is not visible from class loader  java.lang.IllegalArgumentException: interface org.springframework.aop.framework.Advised is not visible from class loader      at java.lang.reflect.Proxy.getProxyClass(Proxy.java:345)          at java.lang.reflect.Proxy.newProxyInstance(Proxy.java:564)          at org.springframework.aop.framework.JdkDynamicAopProxy.getProxy(JdkDynamicAopProxy.java:102)          at org.springframework.aop.framework.JdkDynamicAopProxy.getProxy(JdkDynamicAopProxy.java:92)          at org.springframework.aop.framework.ProxyFactory.getProxy(ProxyFactory.java:66)          at org.springframework.transaction.interceptor.TransactionProxyFactoryBean.afterPropertiesSet(TransactionProxyFactoryBean.java:278)          at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:937)          at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:334)          at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:222)          at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)          at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:146)          at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:176)          at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:105)          at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:891)          at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:707)          at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:316)          at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:222)          at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:150)          at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:529)          at org.springframework.web.struts.DelegatingRequestProcessor.getDelegateAction(DelegatingRequestProcessor.java:160)          at org.springframework.web.struts.DelegatingRequestProcessor.processActionCreate(DelegatingRequestProcessor.java:141)          at org.apache.struts.action.RequestProcessor.process(RequestProcessor.java:220)          at org.apache.struts.action.ActionServlet.process(ActionServlet.java:1164)          at org.apache.struts.action.ActionServlet.doGet(ActionServlet.java:397)          at javax.servlet.http.HttpServlet.service(HttpServlet.java:195)          at javax.servlet.http.HttpServlet.service(HttpServlet.java:309)          at javax.servlet.http.HttpServlet.service(HttpServlet.java:336)          at com.evermind[Orion/2.0.6 (build 11252)]._csb._pud(Unknown Source)          at com.evermind[Orion/2.0.6 (build 11252)]._csb._bqc(Unknown Source)          at com.evermind[Orion/2.0.6 (build 11252)]._ax._ltc(Unknown Source)          at com.evermind[Orion/2.0.6 (build 11252)]._ax._ucb(Unknown Source)          at com.evermind[Orion/2.0.6 (build 11252)]._bf.run(Unknown Source)    ---  **Affects:** 1.2.6","closed","in: core,","spring-projects-issues","2005-12-19T08:22:54Z","2019-01-11T21:33:32Z"
"","6229","String references to resources instead of object references [SPR-1530]","**[Barry Lagerweij](https://jira.spring.io/secure/ViewProfile.jspa?name=barryl)** opened **[SPR-1530](https://jira.spring.io/browse/SPR-1530?redirect=false)** and commented  Re-open of bug #5052 :  When using references to DataSources and EJB references in the spring.xml file, the following exception is thrown:  Nested exception is: org.springframework.beans.factory.access.BootstrapException: Unable to initialize group definition. Group resource name [classpath*:META-INF/bean-ref-factory.xml], factory key [root]; nested exception is org.springframework.beans.factory.BeanDefinitionStoreException: Could not resolve bean definition resource pattern [classpath*:META-INF/bean-ref-factory.xml]; nested exception is java.net.MalformedURLException: unknown protocol: jndi org.springframework.beans.factory.BeanDefinitionStoreException: Could not resolve bean definition resource pattern [classpath*:META-INF/bean-ref-factory.xml]; nested exception is java.net.MalformedURLException: unknown protocol: jndi java.net.MalformedURLException: unknown protocol: jndi at java.net.URL.\(URL.java:544) at java.net.URL.\(URL.java:434) at java.net.URL.\(URL.java:383) at org.springframework.core.io.UrlResource.\(UrlResource.java:57) at org.springframework.core.io.support.PathMatchingResourcePatternResolver.findAllClassPathResources(PathMatchingResourcePatternResolver.java:242) at org.springframework.core.io.support.PathMatchingResourcePatternResolver.getResources(PathMatchingResourcePatternResolver.java:204) at org.springframework.context.support.AbstractApplicationContext.getResources(AbstractApplicationContext.java:679) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:140) at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:113) at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:81) at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:89) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:268) at org.springframework.context.access.ContextSingletonBeanFactoryLocator.initializeDefinition(ContextSingletonBeanFactoryLocator.java:136) at org.springframework.beans.factory.access.SingletonBeanFactoryLocator.useBeanFactory(SingletonBeanFactoryLocator.java:386) at org.springframework.ejb.support.AbstractEnterpriseBean.loadBeanFactory(AbstractEnterpriseBean.java:117) at org.springframework.ejb.support.AbstractStatelessSessionBean.ejbCreate(AbstractStatelessSessionBean.java:63)  It is caused by the following code in PathMatchingResourceResolver: /** * Find all class location resources with the given location via the ClassLoader. * `@param` location the absolute path within the classpath * `@return` the result as Resource array * `@throws` IOException in case of I/O errors * `@see` java.lang.ClassLoader#getResources   */   protected Resource[] findAllClassPathResources(String location) throws IOException {   String path = location;   if (path.startsWith(""/"")) {   path = path.substring(1);   }   ClassLoader cl = getClassLoader();   if (cl == null) {   // No class loader specified -> use thread context class loader.   cl = Thread.currentThread().getContextClassLoader();   }   Enumeration resourceUrls = cl.getResources(path);   Set result = new HashSet();   while (resourceUrls.hasMoreElements()) {   URL url = (URL) resourceUrls.nextElement();   // Use normalized path to avoid multiple entries pointing to the same resource.   result.add(new UrlResource(StringUtils.cleanPath(url.toString())));   }   return (Resource[]) result.toArray(new Resource[result.size()]);   }  Please note the line ""new UrlResource(StringUtils.cleanPath(url.toString())));""  This was fixed for 1.1.1, but appearantly got back in a later revision. I've only just noticed, since I was upgrading my spring.jar version.  ---  **Affects:** 1.2.5  **Issue Links:** - #11759 Constructor resolution uses InputSource instead of URL argument for DBUnit FlatXmlDataSet","closed","in: core,","spring-projects-issues","2005-12-11T22:41:31Z","2019-01-11T21:35:42Z"
"","6682","@Configurable mechanism does not allow for nested factories [SPR-1989]","**[Barry Kaplan](https://jira.spring.io/secure/ViewProfile.jspa?name=memelet)** opened **[SPR-1989](https://jira.spring.io/browse/SPR-1989?redirect=false)** and commented  Consider this scenario:  A web application with a base factory which contains beans common to all web apps. Mutliple web apps are deployed in an EAP, where each web app defines its own nested factory under the common factory.  Some beans defined in objects used by common code associated with the common/parent factory are declared withn `@Configurable`, and have associated bean definitions in the common/parent config file. Code associated with each web app also has objects which are declared with `@Configurable`, with the associated bean declarations in the web app specific config file.  The AnnotationBeanConfigurerAspect is declared in the common/parent config file. When `@Configurable` objects declared in the common/parent factory are created they are configured corrected. When `@Configurable` objects associated with any of web apps are created AnnotationBeanConfigurerAspect cannot find the bean declaration because the aspect's setFactory method was called with the common/parent factory.  The AnnotationBeanConfigurerAspect apsect is a singleton, and is weaved into all classes regardless of which config file contains their declaration. Declaring AnnotationBeanConfigurerAspect in more than one config file does not work, because the aspect's setFactory will get invoked for each factory and will be left with only the last factory.  There does not seem to be any work around for this. Hence, `@Configurable` is non-functional for hierarchical factories.  (See also http://forum.springframework.org/showthread.php?t=24666)    ---  **Affects:** 2.0 M4  2 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2006-05-06T02:37:33Z","2015-09-22T18:57:10Z"
"","6078","DefaultListableBeanFactory class - getBeanDefinition uses lot of unnecessary memory [SPR-1378]","**[avp12](https://jira.spring.io/secure/ViewProfile.jspa?name=avp12)** opened **[SPR-1378](https://jira.spring.io/browse/SPR-1378?redirect=false)** and commented  The DefaultListableBeanFactory class - getBeanDefinition has the call to toString() which results in a lot of unnecessary memory usage everytime a context.getBean() is called. We do a lot of getBean call and profiler shows tremendous amount of memory usage with this toString call. Instead of doing ""throw new NoSuchBeanDefinitionException(beanName, toString())"", can it be simply ""throw new NoSuchBeanDefinitionException(beanName, null); and may be add if (log.isDebugEnabled()) { log.debug(toString())};  Would really appreciate if this change is made soon.  Following is the code for the current getBeanDefinition and toString methods : public BeanDefinition getBeanDefinition(String beanName) throws NoSuchBeanDefinitionException { BeanDefinition bd = (BeanDefinition)this.beanDefinitionMap.get(beanName); if (bd == null) { throw new NoSuchBeanDefinitionException(beanName, toString()); } return bd; }      public String toString() {          StringBuffer sb = new StringBuffer(getClass().getName());          sb.append("" defining beans ["");          sb.append(StringUtils.arrayToDelimitedString(getBeanDefinitionNames(), "",""));          sb.append(""]; "");          if (getParentBeanFactory() == null) {              sb.append(""root of BeanFactory hierarchy"");          } else {              sb.append(""parent: "" + getParentBeanFactory());          }          return sb.toString();      }     ---  **Affects:** 1.2.5","closed","type: enhancement,","spring-projects-issues","2005-10-14T03:21:16Z","2012-06-19T03:54:27Z"
"","6774","Factories for cryptographic objects [SPR-2082]","**[Attila Szegedi](https://jira.spring.io/secure/ViewProfile.jspa?name=szegedia)** opened **[SPR-2082](https://jira.spring.io/browse/SPR-2082?redirect=false)** and commented  Many enterprise apps use cryptography one way or the other. Lots of components need keys to operate. It'd be good to have factory beans in Spring for public and private keys as well as for certificates, specifically factories that can load them from Java keystores. Also, for symmetric encryption, a factory that constructs a key from a KeySpec wouldn't hurt.  The good news is that I have those factories implemented as a ""side effect"" of supporting secure client-side state persistence in Rhino-in-Spring. If you believe they're valuable enough to exist in Spring core, feel free to lift them from there - it's all Apache 2.0 licensed, just as Spring itself is.   ---  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2006-05-30T23:24:39Z","2008-10-22T01:46:18Z"
"","6669","Connection is not shared between HibernateTemplate and JdbcTemplate within a CMT JTA transaction [SPR-1976]","**[Assaf Berg](https://jira.spring.io/secure/ViewProfile.jspa?name=assaf27)** opened **[SPR-1976](https://jira.spring.io/browse/SPR-1976?redirect=false)** and commented  Using container managed transactions in JBoss, HibernateTemplate and JdbcTemplate get a different database connection, which means that they are isolated from each other.  I believe that for this to work, useTransactionAwareDataSource should be used in the LocalSessionFactoryBean properties, but this doesn't work for me. It seems that the transaction manager doesn't initialize synchronization, which is something that DataSourceUtils checks for when opening or releasing a connection. So either a new connection is returned everytime, or if i try to take the connection from the current session and use it for JDBC, it will be closed and hibernate will be left with a handle to a closed connection.  As discussed in http://forum.springframework.org/showthread.php?t=24535, I've written a custom DataSource that works around the issue. It wraps both the real DataSource and the SessionFactory, and intended for use only by JDBC operations that need to be done in the same transaction with hibernate operations. If a session is found the connection is taken from it (wrapped with a close suppressing proxy), otherwise a connection is taken from the real DataSource.  It would be nice to add reference counting and perhaps if this was a DataSource that will be usable for both the SessionFactory and plain JDBC, but I haven't gotten around to it.    ---  **Affects:** 1.2.4  **Attachments:** - [HibernateConnectionDataSource.java](https://jira.spring.io/secure/attachment/11611/HibernateConnectionDataSource.java) (_5.53 kB_)  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2006-05-03T03:52:05Z","2012-06-19T09:37:24Z"
"","6250","transaction handling in BMT needs clarification [SPR-1552]","**[ashokreddy](https://jira.spring.io/secure/ViewProfile.jspa?name=bareddy)** opened **[SPR-1552](https://jira.spring.io/browse/SPR-1552?redirect=false)** and commented  In normal EJB transaction (stateless session Bean-BMT), any transaction does not propogate into the another bean.It just suspends the transaction.it creates new transaction or with no transaction.i came to know that spring EJB(Stateless_BMT) allows the transaction propogation into another bean.(here we used propagation_REQUIRED).clrify this .   ---  **Affects:** 2.0 M2","closed","in: core,","spring-projects-issues","2005-12-19T20:07:50Z","2012-06-19T03:54:37Z"
"","6242","queryForObject is not returning TimeStamp [SPR-1543]","**[ashokreddy](https://jira.spring.io/secure/ViewProfile.jspa?name=bareddy)** opened **[SPR-1543](https://jira.spring.io/browse/SPR-1543?redirect=false)** and commented  queryForObject is returning only date.it does not give timestamp. we are using oracle appserver. When i running locally it is giving timestamp when i am running it remotely i am unable to get the timeStamp   ---  **Affects:** 1.2 final","closed","in: core,","spring-projects-issues","2005-12-18T18:17:32Z","2012-06-19T03:54:42Z"
"","6384","Exposing WebService in Weblogic(8.1 SP3)  [SPR-1686]","**[Ashok](https://jira.spring.io/secure/ViewProfile.jspa?name=nanashok)** opened **[SPR-1686](https://jira.spring.io/browse/SPR-1686?redirect=false)** and commented  Hi, I am converting an legacy application which has webservice functionality.  One of the webservice class uses spring managed beans.  My question is:How will get my spring managed beans in the webservice POJO.  I am not using AXIS.Webservice is based on Weblogic(8.1 SP3) RPC style.  Thx Anan   ---  **Affects:** 1.2.6","closed","type: enhancement,","spring-projects-issues","2006-02-08T02:03:50Z","2012-06-19T09:37:25Z"
"","6862","Spring Form Tag generates a null 'id' when not specified and duplicates the 'name' attribute regardless [SPR-2171]","**[Arun Reddy](https://jira.spring.io/secure/ViewProfile.jspa?name=gregorian21)** opened **[SPR-2171](https://jira.spring.io/browse/SPR-2171?redirect=false)** and commented  The  tag set the 'id' value to 'null' when not specified and does not take into consideration the value specified for the 'name' attribute.  For example,  i) No 'id' or 'name' attribute specified      results in  \\  ii) 'name' attribute specified     results in  \\  iii) 'id' and 'name' attribute is specified    results in  \\ This behaviour is inconsistent with that in previous milestone releases.   ---  **Affects:** 2.0 RC1","closed","type: bug,","spring-projects-issues","2006-06-21T10:25:21Z","2012-06-19T03:52:50Z"
"","6796","Spring Form Label Tag missing cssClass attribute [SPR-2103]","**[Arun Reddy](https://jira.spring.io/secure/ViewProfile.jspa?name=gregorian21)** opened **[SPR-2103](https://jira.spring.io/browse/SPR-2103?redirect=false)** and commented  The Spring Label Tag  is missing the cssClass attribute that is available for other tags. The cssErrorClass and cssStyle attributes are present, however I would imagine that a cssClass attribute would get used in more cases.    ---  **Affects:** 2.0 M5  **Attachments:** - [cssClass.patch](https://jira.spring.io/secure/attachment/11674/cssClass.patch) (_719 bytes_)","closed","type: enhancement,","spring-projects-issues","2006-06-05T10:45:01Z","2012-06-19T03:52:42Z"
"","6555","MultiActionController [SPR-1861]","**[Arthur Branham](https://jira.spring.io/secure/ViewProfile.jspa?name=arthur.branham)** opened **[SPR-1861](https://jira.spring.io/browse/SPR-1861?redirect=false)** and commented  The MultiActionController currently has an initBinder method which is eventually called after invoking the bind(HttpServletRequest request,Object command) method.  The problem lies in the fact that in a multi-action controller - different actions may need to set different Required or Allowed fields for the binder.  There is no way in the initBinder method to determine which subaction we are initializing the binder for.   Do you agree that this presents a problem? I think a solution would be to configure the binder before the subaction method is invoked.  This would involve two steps: 1) Registering command objects to the subaction method names.  This command class or object would then be instantiated and made available via    a method ""Object newCommandObject(String methodName)"" rather than the existing one which takes a Class argument.  \ \     \\\\\ \\\\ \ \ 2) Invoking an initBinder method for the specific subaction using some sort of naming convention based on the subaction name or an overloaded initBinder(ServletRequest request, ServletRequestDataBinder binder,String methodName) .  The binder would then be available via a method createBinder(String methodName) .  I am sure there is a more elegant way of doing this, but I think you should get what I am driving at.  Please let me know your thoughts on this issue.   ---  **Affects:** 2.0 M3","closed","type: enhancement,","spring-projects-issues","2006-04-05T09:28:41Z","2012-06-19T09:37:41Z"
"","6554","Null property values in nested paths relating to  tag,  tags, and ServletRequestDataBinder [SPR-1860]","**[Arthur Branham](https://jira.spring.io/secure/ViewProfile.jspa?name=arthur.branham)** opened **[SPR-1860](https://jira.spring.io/browse/SPR-1860?redirect=false)** and commented  Given: a complex form backing object A which has property B which has property C.  (A.B.C)  I have several questions on some issues I have encountered:  1) Upon an initial visit to a view page using a  tag, there will be no form backing object.  This results in an exception    ""java.lang.IllegalStateException: Neither Errors instance nor plain target object for bean name 'command' available as request attribute.""    Therefore is it necessary to initially direct the user to an Controller which will create the form backing object and place it in the model under the key ""command""?  I feel that the  tag should handle the case where a form backing object is missing and create it via an optional commandClass attribute or commandBean attribute via the spring bean factory using an id/name.  It should then bind the newly created form backing object to requestScope under the ""commandName"" property specified in the form tag.  2) Assume I am fowarding from a controller to a view.  I have set object 'A' to be part of my model and use the  on the view page. If a property B in object A is null and is part of a nested path in a tag such as  or any of the , an exception ""org.springframework.beans.NullValueInNestedPathException: Invalid property 'B' of bean class [A]: Value of nested property 'B' is null"" is thrown.    There should be some way to fail silently such as in JSTL and simply have status.value return 'null'.  3) Given a one of the form:input elements with a path of  ""B.C"", assume I submit its value to a MultiActionController.  In the controller I must create a new form backing object (which will be A) and bind the servlet request parameters to it using the binder.  Since Property B may be null in object A, there is no way that property C can be set since B is null.  We need a strategy to instatiate property B in the case where a nested property C is submitted with a value.  What are your suggestions on these issues?   I believe most of these issues have been addressed by Struts.  ---  **Affects:** 2.0 M3  **Issue Links:** - #10536 Allow null as modelAttribute on form:form binding - #10701 Data Binder: Add support for auto-instantiating null values in nested paths - #6368 Option to expose empty value instead of NullValueInNestedPathException  4 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2006-04-05T08:35:28Z","2019-01-11T22:01:42Z"
"","6530","Add batchUpdate method to JDBCTemplate with support for returning generated keys [SPR-1836]","**[Arthur Branham](https://jira.spring.io/secure/ViewProfile.jspa?name=arthur.branham)** opened **[SPR-1836](https://jira.spring.io/browse/SPR-1836?redirect=false)** and commented  I realize that generated keys are not returned in a batchUpdate even if multiple insert statements are executed for a table with an autoincrement column.  Currently in JDBCTemplate the only way to get a generated key is to execute statements one at a time using the following method signature:     public in update(PreparedStatementCreator psc, KeyHolder generatedKeyHolder) I have implemented a batchUpdate method with the following method signature: public int[] batchUpdate(final String sql,final BatchPreparedStatementSetter pss,final KeyHolder generatedKeyHolder) throws DataAccessException;  This method is a little more performant and convenient because all statements are executed by one PreparedStatement.  Parameter values for each statement are set via the BatchPreparedStatementSetter.  After each batch is executed, any generated keys are collected and aggregated in the KeyHolder.  Updated row counts are returned for each batch statement.  The returned keys can then be used to fetch in bulk, the rows that were created via a batchQuery as described in http://opensource.atlassian.com/projects/spring/browse/SPR-1835  I will attach an implementation and sample usage.  ---  **Affects:** 2.0 M3  **Attachments:** - [JDBCTemplateBatchUpdateMethodImpl.txt](https://jira.spring.io/secure/attachment/11536/JDBCTemplateBatchUpdateMethodImpl.txt) (_1.82 kB_) - [JDCBTemplateBatchUpdateWithGeneratedKeys.txt](https://jira.spring.io/secure/attachment/12674/JDCBTemplateBatchUpdateWithGeneratedKeys.txt) (_2.11 kB_)  **Issue Links:** - #6529 Add batchQuery methods to JDBCTemplate  **Referenced from:** commits https://github.com/spring-projects/spring-data-jdbc/commit/21490b839761c3a22fbe519d1b11e286204da26a, https://github.com/spring-projects/spring-data-jdbc/commit/a390cf7dd86fc6636087a7bff869e042781c519f, https://github.com/spring-projects/spring-data-jdbc/commit/3efb2a45e8bcd5fe69484a30a441d80eeadfa380  3 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2006-03-29T01:28:46Z","2019-01-11T22:02:12Z"
"","6529","Add batchQuery methods to JDBCTemplate [SPR-1835]","**[Arthur Branham](https://jira.spring.io/secure/ViewProfile.jspa?name=arthur.branham)** opened **[SPR-1835](https://jira.spring.io/browse/SPR-1835?redirect=false)** and commented  For details on the scenario where a batchQuery method would be desireable view this issue: http://opensource.atlassian.com/projects/spring/browse/SPR-1786  I will attach a file with an implementation of the following methods as well as a sample usage:  public Object[] batchQuery(String sql,final BatchPreparedStatementSetter pss,final ResultSetExtractor rse) throws DataAccessException;  public Object[] batchQuery(String sql,final BatchPreparedStatementSetter pss,final RowCallbackHandler rch) throws DataAccessException;  public Object[] batchQuery(String sql,final BatchPreparedStatementSetter pss,final RowMapper rm) throws DataAccessException ;  ---  **Affects:** 2.0 M3  **Attachments:** - [JDBCTemplateBatchQueryMethodImpl.txt](https://jira.spring.io/secure/attachment/11535/JDBCTemplateBatchQueryMethodImpl.txt) (_2.05 kB_)  **Issue Links:** - #6530 Add batchUpdate method to JDBCTemplate with support for returning generated keys  2 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2006-03-29T00:59:50Z","2019-01-11T22:02:16Z"
"","6527","CharArrayPropertyEditor [SPR-1833]","**[Arthur Branham](https://jira.spring.io/secure/ViewProfile.jspa?name=arthur.branham)** opened **[SPR-1833](https://jira.spring.io/browse/SPR-1833?redirect=false)** and commented  I think a CharArrayPropertyEditor would be a nice addition to the property editors that come standard with Spring.  It seems generic enough to be included as part of the core package.  The editor would be able to convert a String to a char[] and a char[] to a String.  Also it would be nice if BeanWrapperImpl registered this editor by default for the char[] class.  The class name for char[] is ""[C"".  package org.springframework.beans.propertyeditors;  import java.beans.PropertyEditorSupport;  public class CharArrayPropertyEditor extends PropertyEditorSupport {      public CharArrayPropertyEditor() {     	super();		     }          public CharArrayPropertyEditor(Object source) {     	super(source);		     }          public String getAsText() {     	return new String((char[])getValue());     }          public void setAsText(String text) throws IllegalArgumentException {     	if(text != null)     		setValue(text.toCharArray());		     }	  }  Sample registration:  \ \ \\\\\ \ \   ---  **Affects:** 1.2.7, 2.0 M3","closed","type: enhancement,","spring-projects-issues","2006-03-29T00:42:38Z","2012-06-19T03:54:10Z"
"","6481","Change JdbcTemplate Access modifier to 'public' for query method. [SPR-1786]","**[Arthur Branham](https://jira.spring.io/secure/ViewProfile.jspa?name=arthur.branham)** opened **[SPR-1786](https://jira.spring.io/browse/SPR-1786?redirect=false)** and commented  Summary: I would like to see the following method signature of org.springframework.jdbc.core.JdbcTemplate exposed as a ""public"" method for cases where it is necessary to execute the generated PreparedStatement from the PreparedStatementCreator multiple times with different PreparedStatementSetters:  ""protected Object query(PreparedStatementCreator psc, final PreparedStatementSetter pss, final ResultSetExtractor rse) throws DataAccessException""  Example usage case: Constructing a PreparedStatement with a WHERE IN (?,?,?,?...) clause.  A problem arises when there is a large number of paremeter markers in the clause. This can cause buffer exceptions for some databases. A solution is building 2 PreparedStatments: You choose a block size, 64 for example. The first PreparedStatment will contain blocksize parameters. The second PreparedStatement will use list.size() % blocksize. The first is executed list.size() / blocksize times and the second only once to take care of the remainder. The ResultSet processing is aggregated for each query that is executed.  The only method available as of now is ""public void query(String sql,PreparedStatementSetter pss, RowCallbackHandler rch) throws DataAccessException"" which would cause the creation of multiple PreparedStatements rather each time rather than reusing the PreparedStatement that needs to be executed list.size() / blocksize times with different parameter values set.    ---  **Affects:** 1.2.7, 2.0 M3","closed","type: enhancement,","spring-projects-issues","2006-03-12T03:12:45Z","2012-06-19T03:54:17Z"
"","5951","AbstractXsltView should set MIME type from  tag [SPR-1249]","**[Archie Cobbs](https://jira.spring.io/secure/ViewProfile.jspa?name=archie172)** opened **[SPR-1249](https://jira.spring.io/browse/SPR-1249?redirect=false)** and commented  The org/springframework/web/servlet/view/xslt/AbstractXsltView renders an XML model via an XSLT transformation. However, it ignores the MIME type specified in the XSLT file. For example:                                                                                                                      ...    Ideally the resulting output should have MIME type ""text/svg+xml"" as specified by the  tag, so the web browser knows to display SVG content rather than text content.  The MIME type should be determinable via Transformer.getOutputProperty(OutputKeys.MEDIA_TYPE).    ---  **Affects:** 1.2 final","closed","type: enhancement,","spring-projects-issues","2005-08-23T07:48:32Z","2010-08-25T07:25:46Z"
"","6741","Circular dependence forbidding cannot be easily configured. [SPR-2048]","**[Antranig Basman](https://jira.spring.io/secure/ViewProfile.jspa?name=bosmon)** opened **[SPR-2048](https://jira.spring.io/browse/SPR-2048?redirect=false)** and commented  See #6186 and #5254.  Personally I consider the change in defaults to allow circular bean references by default (somewhere around Spring 1.2.2 I believe) was a bad mistake - now the central contract of Spring, that a bean is ""fully constructed""  before it is delivered as a dependency is broken. As well as being conceptually incoherent, this has practical consequences - for example on a project I am working with, around a week of deployers' time has been taken up chasing a ""phantom"" problem actually caused by a race condition resulting from Spring's order of instantiation of singletons that were participating in a circular reference in a 3rd-party library. I think for ""inexperienced"" developers to get circular references silently supported by default is a recipe for trouble.  However, the decision was taken too long ago to do much about, but it would be great if in the meantime it were made a good deal easier for the ""casual"" user of Spring to re-enable the old behaviour of forbidding circular references - the flag Juergen refers to in #6186 is too low-level and can't be easily handed out as a ""standard practice"" to our team.  ---  **Affects:** 2.0 M4  **Issue Links:** - #8415 Make it easier to disallow bean definition overriding  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2006-05-21T08:51:53Z","2019-01-11T18:15:25Z"
"","5961","Make ...web.servlet.FrameworkServer.serviceWrapper protected rather than private so that one can override HttpServlet.service to handle extended Http verbs i.e. WebDAV [SPR-1259]","**[Antony Blakey](https://jira.spring.io/secure/ViewProfile.jspa?name=antonyblakey)** opened **[SPR-1259](https://jira.spring.io/browse/SPR-1259?redirect=false)** and commented  org.springframework.web.servlet.FrameworkServer.serviceWrapper is private, which makes it impossible to create a subclass of DispatcherServlet that handles extended HTTP verbs such as the WebDAV set - to do this you need to override HttpServlet.service and pass calls to serviceWrapper. It's not an option to copy the serviceWrapper method because it refers to private fields. By simply changing serviceWrapper from private to protected this use case would be enabled.  The only workaround is to duplicate FrameworkServlet + DispatcherServlet in one's own code, which is a PITA in every way.   ---  **Affects:** 1.2.4","closed","type: enhancement,","spring-projects-issues","2005-08-29T01:06:11Z","2012-06-19T03:54:00Z"
"","6257","Allow ServiceLocatorFactoryBean to use part of methodname to return services from BeanFactory [SPR-1559]","**[Anthony Falabella](https://jira.spring.io/secure/ViewProfile.jspa?name=tonyjoe)** opened **[SPR-1559](https://jira.spring.io/browse/SPR-1559?redirect=false)** and commented  Allow the ServiceLocatorFactoryBean to use part of the methodname to return services from the BeanFactory.  Problem with the implementation that currently exists is that if you have a methods like these on the IServiceLocator: public TradeService getNorthAmericaTradeService(); public TradeService getEuropeanTradeService();  You will get the following exception: org.springframework.beans.factory.NoSuchBeanDefinitionException: No unique bean of type [xxx.TradeService] is defined: expected single bean but found 2  Workarounds include to add something like this to your IServiceLocator: public final String TRADE_NORTH_AMERICA_SERVICE_NAME = ""TradeNorthAmericaService""; public final String TRADE_EUROPE_SERVICE_NAME = ""TradeEuropeanService""; public GenericService getService(String id);  Unfortuately this causes a few issues: 1) The caller must now cast the service to the type they desire. 2) On the same IServiceLocator some service finding methods look like ""MyService getService()"" while others now look like ""MyService getService(String id)"".  Perhaps you could make it so that a call like:  ""TradeService getEuropeanTradeService()"" first attempts to get the bean via the returned type and if more than one is found it falls back to looking for the service via the called method's name (after the ""get"" of course)?  If the overhead of doing both these checks is too great, you could add an attribute to the ServiceLocatorFactoryBean that would allow the person configuring the ServiceLocatorFactoryBean to pick which behavior they want the ServiceLocatorFactoryBean  to always use.  In my company's case we would always want to use the name after the ""get"".  This functionality would be easy to implement in a overidden method but the attributes in the ServiceLocatorFactoryBean are all private, basically forcing someone to copy all the code from ServiceLocatorFactoryBean entirely into their own class.    ---  **Affects:** 1.2.6  **Attachments:** - [NewServiceLocatorFactoryBean.java](https://jira.spring.io/secure/attachment/11364/NewServiceLocatorFactoryBean.java) (_12.49 kB_)","closed","type: enhancement,","spring-projects-issues","2005-12-22T01:41:56Z","2012-06-19T09:37:44Z"
"","5966","ServletContextResourcePatternResolver does not resolve regexps in OC4J container [SPR-1264]","**[Angel Retamar](https://jira.spring.io/secure/ViewProfile.jspa?name=retamar)** opened **[SPR-1264](https://jira.spring.io/browse/SPR-1264?redirect=false)** and commented  ServletContextResourcePatternResolver does not  properly resolve patterns when runs on OC4J container. There is a problem in method: doRetrieveMatchingServletContextResources(), when it tries to get ServletContext resources in line (Set candidates = servletContext.getResourcePaths(dir);). OC4J conainer returns resources absolut path when getResourcePaths() method is called. In example: ""C:/mypathh/oc4j/j2ee/home/applications/myappl/WEB-INF/beans"". So, when this condition is evaluated: ""StringUtils.countOccurrencesOf(currPath, ""/"") < StringUtils.countOccurrencesOf(fullPattern, ""/"")"" the result is allways false (usually there are more backslashes ""/"" in an absolute path than in a regexp).   ---  **Affects:** 1.2.1","closed","type: bug,","spring-projects-issues","2005-08-29T18:08:20Z","2012-06-19T03:54:25Z"
"","6858","ClassLoader handling for schema and handler resources is inconsistent [SPR-2167]","**[Andy Piper](https://jira.spring.io/secure/ViewProfile.jspa?name=andypiper)** opened **[SPR-2167](https://jira.spring.io/browse/SPR-2167?redirect=false)** and commented  Spring does not correctly delegate lookups for schema and handler resources to the ApplicationContext classloader if set. Futhermore the handling is different between DefaultNamespaceHandlerResolver & PluggableSchemaResolver in XmlBeanDefinitionReader.  I will attach a patch that fixes the issue for me.  ---  **Affects:** 2.0 RC1  **Attachments:** - [cl.patch](https://jira.spring.io/secure/attachment/11721/cl.patch) (_8.16 kB_)  **Issue Links:** - #6847 In an ApplicationContext hierarchy, children by default should use the parent ClassLoader (_**""is depended on by""**_)  1 votes, 1 watchers","closed","in: core,","spring-projects-issues","2006-06-21T03:40:54Z","2019-01-11T18:00:37Z"
"","6746","DefaultMessageListenerContainer infinitely fails if JMS configuration is incorrect on WLS [SPR-2053]","**[Andy Piper](https://jira.spring.io/secure/ViewProfile.jspa?name=andypiper)** opened **[SPR-2053](https://jira.spring.io/browse/SPR-2053?redirect=false)** and commented  Using the new DefaultMessageListenerContainer I get an endless stream of errors with an incorrect JMS configuration:  12813 [DefaultMessageListenerContainer-817] ERROR: listener.DefaultMessageListen erContainer - Setup of JMS message listener invoker failed weblogic.jms.common.JMSException: [JMSExceptions:045101]The destination name pas sed to createTopic or createQueue ""quotes"" is invalid. If the destination name d oes not contain a ""/"" character then it must be the name of a distributed destin ation that is available in the cluster to which the client is attached. If it do es contain a ""/"" character then the string before the ""/"" must be the name of a JMSServer or a ""."". The string after the ""/"" is the name of a the desired destin ation. If the ""./"" version of the string is used then any destination with the g iven name on the local WLS server will be returned. at weblogic.jms.dispatcher.DispatcherAdapter.convertToJMSExceptionAndThr ow(DispatcherAdapter.java:110) at weblogic.jms.dispatcher.DispatcherAdapter.dispatchSyncNoTran(Dispatch erAdapter.java:61) at weblogic.jms.client.JMSSession.createDestination(JMSSession.java:2851 ) at weblogic.jms.client.JMSSession.createQueue(JMSSession.java:2265) at weblogic.jms.client.WLSessionImpl.createQueue(WLSessionImpl.java:858)      at org.springframework.jms.support.destination.DynamicDestinationResolve  r.resolveQueue(DynamicDestinationResolver.java:88) at org.springframework.jms.support.destination.DynamicDestinationResolve r.resolveDestinationName(DynamicDestinationResolver.java:54) at org.springframework.jms.support.destination.JmsDestinationAccessor.re solveDestinationName(JmsDestinationAccessor.java:96) at org.springframework.jms.listener.DefaultMessageListenerContainer.crea teListenerConsumer(DefaultMessageListenerContainer.java:268) at org.springframework.jms.listener.DefaultMessageListenerContainer$Asyn cMessageListenerInvoker.initResourcesIfNecessary(DefaultMessageListenerContainer .java:399) at org.springframework.jms.listener.DefaultMessageListenerContainer$Asyn cMessageListenerInvoker.run(DefaultMessageListenerContainer.java:366) at org.springframework.core.task.SimpleAsyncTaskExecutor$ConcurrencyThro ttlingRunnable.run(SimpleAsyncTaskExecutor.java:203) at java.lang.Thread.run(Thread.java:595)   ---  **Affects:** 2.0 M5","closed","type: bug,","spring-projects-issues","2006-05-23T22:20:44Z","2012-06-19T03:52:45Z"
"","6216","Ability to retrieve RowMapper from ResultSetSupportingSqlParameter [SPR-1517]","**[Andy Festa](https://jira.spring.io/secure/ViewProfile.jspa?name=afesta)** opened **[SPR-1517](https://jira.spring.io/browse/SPR-1517?redirect=false)** and commented  In the ResultSetSupportingSqlParameter, we have the ability to retrieve the RowCallbackHandler, and the ResultSetExtractor, but not the RowMapper.  It would be convient to retrieve this for the instances where we want to manually control the individual row mapping.   ---  **Affects:** 1.2.6  1 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2005-12-06T02:51:44Z","2012-06-19T03:54:40Z"
"","6468","Make invocationTime meaningful in exceptionMessage in CustomizableTraceInterceptor [SPR-1771]","**[Andy DePue](https://jira.spring.io/secure/ViewProfile.jspa?name=adepue)** opened **[SPR-1771](https://jira.spring.io/browse/SPR-1771?redirect=false)** and commented  We are using CustomizableTraceInterceptor to log method invocations during development, and have found its $[invocationTime] useful for method return.  However, we would also like to know how long a method executed before throwing an exception, but $[invocationTime] does not provide this information if placed in the exceptionMessage.  I believe this information could be obtained by a very simple change in CustomizeTraceInterceptor.invokeUnderTrace(...).  The section that handles when an exception is thrown currently looks like this:      catch (Throwable ex) {             exitThroughException = true;             writeToLog(logger, replacePlaceholders(this.exceptionMessage, invocation, null, ex, -1), ex);             throw ex;     }  By replacing the -1 being passed in as the invocationTime parameter to the replacePlaceholders method with  stopWatch.getTotalTimeMillis(), one could obtain invocationTime when an exception is thrown:      catch (Throwable ex) {             exitThroughException = true;             writeToLog(logger, replacePlaceholders(this.exceptionMessage, invocation, null, ex, stopWatch.getTotalTimeMillis()), ex);             throw ex;     }  ---  **Issue Links:** - #20318 CustomizableTraceInterceptor should allow INVOCATION_TIME placeholder in setExceptionMessage and make stack trace logging configurable","closed","type: enhancement,","spring-projects-issues","2006-03-09T03:22:19Z","2019-01-11T22:08:16Z"
"","5925","InputStream (streaming) parameter/return value support for HttpInvoker [SPR-1223]","**[Andy DePue](https://jira.spring.io/secure/ViewProfile.jspa?name=adepue)** opened **[SPR-1223](https://jira.spring.io/browse/SPR-1223?redirect=false)** and commented  I've extended Spring's HttpInvoker to provide support for InputStream parameters and return values for remote service methods.  In other words, you can define a service method to take an InputStream as a parameter or return an InputStream as a return value (or both) and Spring will take care of ensuring the InputStream is streamed across the wire.  Of course, the major reason for doing this is to handle large amounts of data without needing to load all the data into memory first, so care is taken to ensure that the InputStream is not fully buffered into memory. If this code is accepted into Spring, then feel free to move it to another package or reformat the source as needed.  The JavaDoc for ""StreamSupportingHttpInvokerProxyFactoryBean"" provides the most complete documentation for this feature, and so I copy it below:  Extends HttpInvokerProxyFactoryBean to allow InputStream parameters to remote service methods and InputStream return values from remote service methods. Stream content will be not be buffered and will be transmitted using the ""chunked"" transfer encoding available in the HTTP protocol, allowing any amount of data to be streamed to or from the service without worrying about OutOfMemoryErrors (provided your servlet container supports chunked encoding and does not attempt to fully buffer streams). If a service method has no InputStream parameters or return values then the invocation will proceed in exactly the same fashion as the standard HttpInvoker (the invocation will actually be delegated to the underlying CommonsHttpInvoker implementation). By default the system will determine if a service method should be invoked with streaming support based on the signature of the method in the service interface, not on the actual parameters passed into a particular invocation. For example, this method: void method(Object param1);  will not have streaming support, even if client code invoked it like so: InputStream in = ...; service.method(in);  This behavior can be changed by setting the matchOnMethodSignature property of the StreamSupportingRemoteInvocationFactory contained within the remoteInvocationFactory property of this proxy factory bean to false. Note that setting this property to false is an experimental feature and may not function properly. WARNING: this is a simplistic implementation and so supports only one InputStream parameter to a service method. For example, these method signatures are valid and supported: void method1(InputStream param1); void method2(SomeSerializableType param1, InputStream param2); MyType method3(InputStream param1, SomeSerializableType param2, ...); InputStream method4(SomeType param1); InputStream method5(InputStream param1); InputStream method6(InputStream param1, SomeType param2);  In other words, any combination of return type and parameters is acceptable so long as there is only one InputStream parameter. This method signature would throw an exception upon invocation: void method7(InputStream param1, InputStream param2);  Also note that this implementation keeps track of whether the service method explicitly closes the InputStream on the server side and then mirrors that behavior on the client side. In other words, if the service method closes the InputStream parameter, then the InputStream that the client code passed into the method on the client side will be closed as well, otherwise the client side InputStream will still be ""open"" when the service invocation returns. Finally, configuration of this proxy factory bean is exactly the same as for HttpInvokerProxyFactoryBean, except, of course, you would reference the StreamSupportingHttpInvokerProxyFactoryBean in your Spring  declaration on the client side, and StreamSupportingHttpInvokerServiceExporter on the server side. Your service code can use the passed in InputStream parameter just as if it were any other local (in-VM) InputStream. It can also create and return any InputStream, just as if it were a local invocation. The one exception is that the InputStream passed into the service method will be a standard InputStream implementation. If client code passed in some custom InputStream implementation with additional methods, then the server will not see that customized implementation or the additional methods. The only thing the service method will see is the raw bytes that came from the stream. The same applies going back the other way as well (the return value from the service method).  - Andy  PS A .zip containing the sources will be attached, along with another .zip containing the unit tests.  I copied some test support classes out of Spring for the unit tests (such as ""TestBean""), so those classes could be removed and replaced with their Spring versions.   ---  **Attachments:** - [StreamSupportingHttpInvoker.zip](https://jira.spring.io/secure/attachment/11062/StreamSupportingHttpInvoker.zip) (_15.47 kB_) - [StreamSupportingHttpInvokerTests.zip](https://jira.spring.io/secure/attachment/11063/StreamSupportingHttpInvokerTests.zip) (_13.78 kB_)  31 votes, 28 watchers","closed","status: bulk-closed,","spring-projects-issues","2005-08-11T10:39:46Z","2019-01-12T03:51:23Z"
"","6421","The current release of spring M2 does not contain any hibernate support.  [SPR-1724]","**[andries spies](https://jira.spring.io/secure/ViewProfile.jspa?name=andries)** opened **[SPR-1724](https://jira.spring.io/browse/SPR-1724?redirect=false)** and commented  No hibernate support included, could not find any supporting ""module"" jars..   ---  **Affects:** 2.0 M2","closed","","spring-projects-issues","2006-02-16T19:35:47Z","2019-01-11T22:07:45Z"
"","6711","MailSender should use interface instead of class SimpleMailMessage [SPR-2018]","**[Andrey Akselrod](https://jira.spring.io/secure/ViewProfile.jspa?name=chelya)** opened **[SPR-2018](https://jira.spring.io/browse/SPR-2018?redirect=false)** and commented  MailSender uses conrete class SimpleMailMessage. Instead it should use an interface with the getter methods it needs - the opposite of MailMessage interface which contains setters. SimpleMailMessage would implement MailMessage and this other new interface.  It will allow to specify an alternative way for setting email values. For example I can implement my own SimpleVelocityMailMessage class that will only implement that new interface. I can have setTemplate(tpl, model) in my class without having to have setText(text). I don't have to implement MailMessage interface or extend SimpleMailMessage class.  ---  **Affects:** 2.0 M4  **Issue Links:** - #6139 MailSender.send() method takes SimpleMailMessage parameter, which causes trouble when abstracting (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2006-05-15T03:07:38Z","2019-01-11T18:16:25Z"
"","6091","Support Property Paths as first class citizens in XML configuration file, i.e.  [SPR-1391]","**[Andrew Thompson](https://jira.spring.io/secure/ViewProfile.jspa?name=lordpixel)** opened **[SPR-1391](https://jira.spring.io/browse/SPR-1391?redirect=false)** and commented  I've recently been trying to use property paths as described in section 3.15 of the Spring manual.  Here's the first example quoted from the manual, which, whilst not the most compact of the 3 examples given, it is the most general:  Here's an example where a path is used against another bean, by name:  // target bean to be referenced by name \ \\10\\ \ \ \\11\\ \ \ \  // will result in 11, which is the value of property 'spouse.age' of bean 'person' \ \\person\\ \\spouse.age\\ \  Presumably someone would then do  \ \ \  It strikes me that this is a LOT of typing. It should really all boil down to:  \  Of course, that might be pretty ambiguous, so perhaps some kind of new syntax would be needed:  \  Where "">"" means follow a path. Or the less pithy but easier to remember and understand:  \ Have I missed some easy, elegant way of doing this? Has this idea come up before and been rejected for some reason?   --- No further details from [SPR-1391](https://jira.spring.io/browse/SPR-1391?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-10-18T04:25:30Z","2019-01-11T21:18:45Z"
"","6461","Provide a MockValidator for use in unit tests [SPR-1763]","**[Andrew Swan](https://jira.spring.io/secure/ViewProfile.jspa?name=aswan)** opened **[SPR-1763](https://jira.spring.io/browse/SPR-1763?redirect=false)** and commented  Summary  ~~~~~~~ Proper unit testing of a POJO requires all of its dependencies to be mocked. At the moment, it is not possible to mock the Validator interface using the popular EasyMock package (at least not in 2.0, the current version). Other mocking tools may have the same limitation. This JIRA issue is about adding a MockValidator class to the Spring library to provide a reusable workaround to this limitation. Currently, Spring users wishing to mock their Validators have to write such a class for themselves. This represents unnecessary work and increases the risk of buggy tests.  Details ~~~~~~~  The main method in the Validator interface is validate(Object obj, Errors errors). When this is called, implementations are expected to add any relevant error information to the given Errors instance. With EasyMock, it 's not possible to instruct the mock to do this. EasyMocks can only be told to return a specific value (N/A here because ""validate"" is void) or throw a specific Throwable (also N/A here because validation errors are not exceptions).  The core Spring library already provides a number of mock objects in the ""org.springframework.mock"" package hierarchy. This JIRA issue proposes a new class called org.springframework.mock.validator.MockValidator that can be set up to: * add known error information to the given Errors object * throw a specified unchecked throwable (unchecked because validate declares no checked throwables)    ---  **Attachments:** - [MockValidator.java](https://jira.spring.io/secure/attachment/11479/MockValidator.java) (_17.61 kB_)","closed","type: enhancement,","spring-projects-issues","2006-03-05T11:05:20Z","2006-08-07T19:40:50Z"
"","5922","Add Support for Eclipse's BIRT [SPR-1220]","**[Andrew Berman](https://jira.spring.io/secure/ViewProfile.jspa?name=atberman)** opened **[SPR-1220](https://jira.spring.io/browse/SPR-1220?redirect=false)** and commented  Add support for Eclipse's reporting library, BIRT.  It would also be really nice if Spring could somehow integrate into the scripted datasource feature of BIRT so as to allow POJOs as the datasource (as is the case with ORMs as well as Spring's JDBC support with POJOs)   ---  30 votes, 26 watchers","closed","has: votes-jira,","spring-projects-issues","2005-08-09T15:00:31Z","2015-09-22T18:56:44Z"
"","6364","Update documentation to reflect native support in WebWork for Spring [SPR-1667]","**[Andres March](https://jira.spring.io/secure/ViewProfile.jspa?name=dres)** opened **[SPR-1667](https://jira.spring.io/browse/SPR-1667?redirect=false)** and commented  WebWork has had native spring integration via the SpringObjectFactory since its recent 2.2 release.  The Xwork-Opt project is dead.  Details can be found here: http://www.opensymphony.com/webwork/wikidocs/Spring.html  The Spring docs should be updated to reflect these changes and possibly refer to their integration page.   ---  **Affects:** 1.2.6, 2.0 M2","closed","type: enhancement,","spring-projects-issues","2006-02-03T04:37:19Z","2012-06-19T03:54:42Z"
"","5886","RegexpMethodMatcherAdvisor with include/exclude lists [SPR-1183]","**[Andres Almiray](https://jira.spring.io/secure/ViewProfile.jspa?name=aalmiray)** opened **[SPR-1183](https://jira.spring.io/browse/SPR-1183?redirect=false)** and commented  Allow a RegexpMethodMatcherAdvisor to have 2 lists of patterns, with the following logic: if the current candidate matches de include list, then test if it matches the exclude list; if the candidate matches the second pattern the advice is not applied.  This is useful if you need a broad include pattern and want to left out some candidates. The current approach with RegexpMethodMatcherAdvisor is: 1- define a very restrictive set of patterns (method by method) 2- change the code to abide to a naming standard suited for a less restrictive set of patterns  I already have code that solves this feature and would like to contribute it.   ---  **Affects:** 1.2.3  **Attachments:** - [spring.zip](https://jira.spring.io/secure/attachment/11010/spring.zip) (_26.91 kB_)  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2005-07-28T06:48:44Z","2012-06-19T03:54:17Z"
"","6694","Stored Procedure hangs due to bug in JDBC driver [SPR-2001]","**[Andreas Senft](https://jira.spring.io/secure/ViewProfile.jspa?name=asenft)** opened **[SPR-2001](https://jira.spring.io/browse/SPR-2001?redirect=false)** and commented  The scenario is similar to that described in #6534. I tracked down the issue by just copying & executing the stored procedure example from the reference manual.  My analysis had following result: In JdbcTemplate#extractReturnedResultSets the method CallableStatement#getUpdateCount() is invoked and the result is used as criterion in a do/while loop. Unfortunately there seems to be a bug in Oracle's jdbc driver (10.1.0.2.0; this is the version supplied with WebLogic 8.1SP4). This method erroneously returns 1, causing an endless loop. I know that this is no bug in Spring, but maybe the loop could be changed  to handle such failures more graceful.  As an aside: the driver versions 10.1.0.4.0 (provided with WebLogic 8.1SP5) and 10.2.0.1.0 do _not_ show the erroneous behavior. Unfortunately I cannot change the JDBC driver at this time.  Regards, Andreas  ---  **Affects:** 1.2.8, 2.0 M4","closed","type: bug,","spring-projects-issues","2006-05-10T19:42:15Z","2019-01-11T18:13:20Z"
"","6690","Factor out method resolving to ClassUtil [SPR-1997]","**[Andreas Senft](https://jira.spring.io/secure/ViewProfile.jspa?name=asenft)** opened **[SPR-1997](https://jira.spring.io/browse/SPR-1997?redirect=false)** and commented  I propose to enhance ClassUtils with methods that could select the best matching constructor/method based on a given argument list. This might imply moving the method getTypeDifferenceWeight from the internal class AutowireUtils to the public class ClassUtils.  Existing functionality (e.g. in ConstructorResolver) could be adapted to use these methods to choose a constructor or look up a matching factory method.  Benefit would be, that these methods would then also be available to developers. When doing things based on reflection, methods like these come in quite handy. Further extensions of Spring itself could also profit from these functionalities being factored out to a central place.  Regards, Andreas   ---  **Affects:** 2.0 M4","closed","type: enhancement,","spring-projects-issues","2006-05-09T23:46:06Z","2012-06-19T09:37:32Z"
"","6689","Externalizing lifecycle from Spring-defined beans [SPR-1996]","**[Andreas Senft](https://jira.spring.io/secure/ViewProfile.jspa?name=asenft)** opened **[SPR-1996](https://jira.spring.io/browse/SPR-1996?redirect=false)** and commented  I want to propose a new feature which would allow to externalize the lifecycle of beans defined in a spring application context. Sometimes requests came up in the forum to create beans programmatically, yet to use Spring wiring to set properties on them.  While methods of the AutowireCapableBeanFactory interface might be used to apply properties on an existing bean, this has a shortcoming: the application context has to be retrieved in the code in order to invoke the appropriate methods.  My idea would be to have the following: 1) A FactoryBean that creates a proxy of a specified interface (or multiple specified interfaces). 2) An internal lifecycle interface, for which an implementation would be introduced to the proxy created by 1).    The interface provides necessary methods for initialization/deinitialization. 3) A helper class that allows initialization of the proxy (and maybe deinitialization) via static utility methods that use the internal helper interface.  The proxy created by the factory could be wired in the context as any other bean. Yet, it cannot be used (methods should throw an appropriate exception) until initialized by the external helper. The advantage of this approach would be to allow externalization of instance lifecycle from the application context while retaining its features. Besides that, lifecycle methods could be triggered without meddling with bean factories in user code, so providing a degree of transparence from spring itself.  The idea came to me after using this approach for creating a simple SFSB support as described here (http://opensource.atlassian.com/projects/spring/browse/SPR-1967). The SFSB support is a special case of the more general idea described here and an implementation could be factored out of the provided code. I could do the necessary factoring, if needed.  Regards, Andreas  ---  **Affects:** 2.0 M4  **Attachments:** - [lifecycle.zip](https://jira.spring.io/secure/attachment/11661/lifecycle.zip) (_8.06 kB_) - [lifecycle2.zip](https://jira.spring.io/secure/attachment/11675/lifecycle2.zip) (_15.03 kB_) - [lifecycle3.zip](https://jira.spring.io/secure/attachment/11677/lifecycle3.zip) (_30.25 kB_) - [Lifecycle4.zip](https://jira.spring.io/secure/attachment/12801/Lifecycle4.zip) (_30.05 kB_)  **Issue Links:** - #6660 SFSB support  3 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2006-05-09T18:54:05Z","2019-01-11T22:20:50Z"
"","6660","SFSB support [SPR-1967]","**[Andreas Senft](https://jira.spring.io/secure/ViewProfile.jspa?name=asenft)** opened **[SPR-1967](https://jira.spring.io/browse/SPR-1967?redirect=false)** and commented  I would like to propose enhancing support for stateful session beans, similar to stateless session beans. The main problem with SFSB is the parameterized create() methods and the need to invoke remove() programmatically. This could be addressed by creating an uninitialized proxy which could be initialized ond uninitialized via an internal helper. The lifecycle methods to support this can be added using introduction.  Regards, Andreas  ---  **Affects:** 2.0 M4  **Attachments:** - [sfsb_support.zip](https://jira.spring.io/secure/attachment/11603/sfsb_support.zip) (_12.29 kB_)  **Issue Links:** - #6689 Externalizing lifecycle from Spring-defined beans  2 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2006-04-28T08:48:31Z","2019-01-11T22:21:15Z"
"","6552","[Documentation] when CGLIB proxies will be used [SPR-1858]","**[Andreas Senft](https://jira.spring.io/secure/ViewProfile.jspa?name=asenft)** opened **[SPR-1858](https://jira.spring.io/browse/SPR-1858?redirect=false)** and commented  In the reference manual for version 2.0M3 it is stated in chapter 6.5.2 that CGLIB is used, when no proxy interfaces are defined. As far as I know, that is not true if the class in question does implement interfaces.  I suggest to clarify the reference manual concerning which proxy type is used by Spring under which conditions and how these behave (i.e.  which type(s) the proxy has)  Regards, Andreas   ---  **Affects:** 2.0 M3","closed","type: bug,","spring-projects-issues","2006-04-04T23:01:12Z","2012-06-19T03:54:12Z"
"","6546","Improvement of exception message in RmiClientInterceptorUtils [SPR-1852]","**[Andreas Senft](https://jira.spring.io/secure/ViewProfile.jspa?name=asenft)** opened **[SPR-1852](https://jira.spring.io/browse/SPR-1852?redirect=false)** and commented  When RmiClientInterceptorUtils#doInvoke fails because it cannot resolve the method to invoke, the exception message could be improved.  Now we have just a wrapped NoSuchMethodException stating that some method does not exist for class $ProxySomething$. It would be helpful, if the implemented interfaces (or the superclass) of the proxy class would be named in the message of the wrapping AspectException. This could avoid some tedious debugging.  Regards, Andreas   ---  **Affects:** 1.2.7, 2.0 M3","closed","type: enhancement,","spring-projects-issues","2006-04-03T23:15:13Z","2012-06-19T03:54:36Z"
"","6843","add ability for custom objects in command objects for form tag library [SPR-2152]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-2152](https://jira.spring.io/browse/SPR-2152?redirect=false)** and commented  Consider the following Data class and its PropertyEditor counterpart. Note that the toString() method throws an exception to indicate that it is not to be touched (for non-debugging purposes).  public class Custom { private String id;      public Custom(String id)     {     	setId(id);     }          public String getId()     {     	return id;     }          public void setId(String id)     {     	this.id = id;     }          @Override     public String toString()     {     	throw new UnsupportedOperationException();     }  }  public class CustomEditor extends PropertyEditorSupport { `@Override` public String getAsText() { return ((Custom) getValue()).getId(); }      @Override     public void setAsText(String text) throws IllegalArgumentException     {     	setValue(new Custom(text));     }  }  Now, if I use the class in a form like this (customs is initialized with some possible values in referenceData())...        ...I get the following exception:  java.lang.UnsupportedOperationException at test.Custom.toString(Custom.java:25) at org.apache.commons.el.Coercions.coerceToString(Coercions.java:389) at org.apache.commons.el.Coercions.coerce(Coercions.java:329) at org.apache.commons.el.ExpressionEvaluatorImpl.convertToExpectedType(ExpressionEvaluatorImpl.java:345) at org.apache.commons.el.ExpressionEvaluatorImpl.evaluate(ExpressionEvaluatorImpl.java:267) at org.apache.commons.el.ExpressionEvaluatorImpl.evaluate(ExpressionEvaluatorImpl.java:190) at org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate(PageContextImpl.java:932) [my jsp page is listed here] [...]  It looks like the insertion of ${custom} as a value is converting the value to String with the toString() method. Instead, the Spring registered PropertyEditor should be used. I can vaguely remember that the TLD must be changed in order for allowing custom objects.  This issue may very well affect the other form tags, too.   ---  **Affects:** 2.0 RC1","closed","type: enhancement,","spring-projects-issues","2006-06-17T23:27:18Z","2012-06-19T03:52:46Z"
"","6840","attribute value ""POST"" must be lower case for XHTML [SPR-2149]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-2149](https://jira.spring.io/browse/SPR-2149?redirect=false)** and commented  line 4 column 138 - Warning: \ attribute value ""POST"" must be lower case for XHTML  Here is a patch... (-:  Index: src/org/springframework/web/servlet/tags/form/FormTag.java  ---  RCS file: /cvsroot/springframework/spring/src/org/springframework/web/servlet/tags/form/FormTag.java,v retrieving revision 1.13 diff -u -r1.13 FormTag.java --- src/org/springframework/web/servlet/tags/form/FormTag.java	14 Jun 2006 13:16:23 -0000	1.13 +++ src/org/springframework/web/servlet/tags/form/FormTag.java	17 Jun 2006 12:40:17 -0000 @@ -55,7 +55,7 @@ /** * The default HTTP method using which form values are sent to the server.   */  - private static final String DEFAULT_METHOD = ""POST"";  + private static final String DEFAULT_METHOD = ""post"";    /**    * The default command object name.  ---  **Affects:** 2.0 RC1","closed","type: bug,","spring-projects-issues","2006-06-16T23:40:49Z","2019-01-13T22:47:38Z"
"","6794","spring-form.tld declares attributes cssClass and cssStyle for , but there are no setters [SPR-2101]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-2101](https://jira.spring.io/browse/SPR-2101?redirect=false)** and commented  spring-form.tld declares attributes cssClass and cssStyle for , but there are no setters.  SEVERE: Servlet.service() for servlet front_controller threw exception org.apache.jasper.JasperException: /game/search.jspx(14,74) Unable to find setter method for attribute: cssClass at org.apache.jasper.compiler.DefaultErrorHandler.jspError(DefaultErrorHandler.java:39) at org.apache.jasper.compiler.ErrorDispatcher.dispatch(ErrorDispatcher.java:405) at org.apache.jasper.compiler.ErrorDispatcher.jspError(ErrorDispatcher.java:146) at org.apache.jasper.compiler.Generator$GenerateVisitor.evaluateAttribute(Generator.java:2710) at org.apache.jasper.compiler.Generator$GenerateVisitor.generateSetters(Generator.java:2858) at org.apache.jasper.compiler.Generator$GenerateVisitor.generateCustomStart(Generator.java:2176) at org.apache.jasper.compiler.Generator$GenerateVisitor.visit(Generator.java:1685) at org.apache.jasper.compiler.Node$CustomTag.accept(Node.java:1441) at org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2163) at org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2213) at org.apache.jasper.compiler.Generator$GenerateVisitor.visit(Generator.java:1705) at org.apache.jasper.compiler.Node$CustomTag.accept(Node.java:1441) at org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2163) at org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2213) at org.apache.jasper.compiler.Generator$GenerateVisitor.visit(Generator.java:1705) at org.apache.jasper.compiler.Node$CustomTag.accept(Node.java:1441) at org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2163) at org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2213) at org.apache.jasper.compiler.Node$Visitor.visit(Node.java:2224) at org.apache.jasper.compiler.Node$JspRoot.accept(Node.java:525) at org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2163) at org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2213) at org.apache.jasper.compiler.Node$Visitor.visit(Node.java:2219) at org.apache.jasper.compiler.Node$Root.accept(Node.java:456) at org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2163) at org.apache.jasper.compiler.Generator.generate(Generator.java:3305) at org.apache.jasper.compiler.Compiler.generateJava(Compiler.java:198) at org.apache.jasper.compiler.Compiler.compile(Compiler.java:295) at org.apache.jasper.compiler.Compiler.compile(Compiler.java:276) at org.apache.jasper.compiler.Compiler.compile(Compiler.java:264) at org.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:563) at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:303) at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:314) at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:264) at javax.servlet.http.HttpServlet.service(HttpServlet.java:802)   ---  **Affects:** 2.0 M5","closed","type: bug,","spring-projects-issues","2006-06-05T02:50:11Z","2012-06-19T03:52:32Z"
"","6793","store label in body of  [SPR-2100]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-2100](https://jira.spring.io/browse/SPR-2100?redirect=false)** and commented  I propose to optionally use the body of  to hold the label. Consider this example:         could be shortened to:        This would behave similar to JSTL  and similar tags.  This issue may apply to other form tags, too.   ---  **Affects:** 2.0 M5","closed","type: enhancement,","spring-projects-issues","2006-06-05T02:38:41Z","2012-06-19T03:52:47Z"
"","6792","change to LocalSessionFactoryBean breaks cache configuration [SPR-2099]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-2099](https://jira.spring.io/browse/SPR-2099?redirect=false)** and commented  Since 2.0-M5, I get the following exception when initializing the second level cache of Hibernate:  org.hibernate.MappingException: Cannot cache an unknown entity: my.Entity at org.hibernate.cfg.Configuration.setCacheConcurrencyStrategy(Configuration.java:1822) at org.hibernate.cfg.AnnotationConfiguration.secondPassCompile(AnnotationConfiguration.java:217) at org.hibernate.cfg.Configuration.buildMappings(Configuration.java:996) at org.springframework.orm.hibernate3.LocalSessionFactoryBean.afterPropertiesSet(LocalSessionFactoryBean.java:794)  I have backgraded just spring-hibernate3.jar to M4 and could successfully initialize and use the Session Factory again.  By looking at the CVS, I found that the call to afterPropertiesSet() in LocalSessionFactoryBean line 794 has been added between M4 and M5. This seems to be the culprit.  I am using the entityCacheStrategies and collectionCacheStrategies properties of AnnotationSessionFactoryBean. If I comment out the entityCacheStrategies, the errors appears at the collectionCacheStrategies.           	     	     		     			my.Entity     		     	     	     		     			     			     			     			     			     			     			     		     	     	     		     	     	     		     			read-write     		     	     	     		     			read-write     		     	         ---  **Affects:** 2.0 M5","closed","type: bug,","spring-projects-issues","2006-06-05T02:16:45Z","2012-06-19T03:52:47Z"
"","6549","DispatcherServlet doesn't provide any default logging [SPR-1855]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-1855](https://jira.spring.io/browse/SPR-1855?redirect=false)** and commented  Rob Harrop has written in #5462 that it's the DispatcherServlets original intent to not provide any default logging.  I guess it should then log exceptions to debug rather than error. See FrameworkServlet, line 412:      		if (failureCause != null) {          			logger.error(""Could not complete request"", failureCause);          		}  ---  **Affects:** 1.2.7, 2.0 M3","closed","type: enhancement,","spring-projects-issues","2006-04-04T17:30:29Z","2019-01-11T22:01:54Z"
"","6548","DispatcherServlet invokes HandlerExceptionResolver too early [SPR-1854]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-1854](https://jira.spring.io/browse/SPR-1854?redirect=false)** and commented  Currently, in a page with JSTL , a configured HandlerExceptionResolver is executed very early when the DispatcherServlet catches an exception. It is invoked inside the same nesting level as the origin of the exception. I'll explain why this is a problem.  If the Resolver is called in the include, and it handles the exception by setting the response code to 500, the code flow eventually gets back to the  tag in JSTL. Here, the following code from org.apache.taglibs.standard.tag.common.core.ImportSupport (standard.jar, v1.1.2, line 309) comes into play:      // disallow inappropriate response codes per JSTL spec     if (irw.getStatus() < 200 || irw.getStatus() > 299) {      throw new JspTagException(irw.getStatus() + "" "" +          stripSession(targetUrl));     }  This means that a JspTagException is then thrown, instead of an error page delivered.  - the stack trace of the causing exception is not contained in the exception any more - the original intent of displaying an error page for the causing exception is negated, instead a stacktrace of the JspTagException is shown  This means that the HandlerExceptionResolver mechanism simple doesn't work reliable with includes.  I'm not sure if the idea is good, but I'd propose to only invoke the HandlerExceptionResolver in the outermost invocation (if it would be a ServletFilter, I would configure it with \REQUEST\ only). Any inner invocations should bubble the exception up to the outermost invocation. Maybe this behaviour should be an option.  Unfortunately it does not seem to be possible to implement a ServletFilter, because of the tight coupling with Views and the like.   ---  **Affects:** 1.2.7, 2.0 M3  **Attachments:** - [RequestOnlyExceptionResolver.java](https://jira.spring.io/secure/attachment/11548/RequestOnlyExceptionResolver.java) (_767 bytes_)","closed","type: bug,","spring-projects-issues","2006-04-04T05:34:47Z","2012-06-19T03:54:35Z"
"","6515","Provide equivalent to basename or prefix with Spring Message Resources in JstlViews [SPR-1821]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-1821](https://jira.spring.io/browse/SPR-1821?redirect=false)** and commented  JSTL provides the  and  tags, which selects the basename of the message resource and a prefix that is prepended to each key used in  tags in scope. This is useful for grouping messages, for example per software module or per JSP.  There does not seem to exist an equivalent for those tags in the Spring Message Resource mechanism (MessageSource). Properties located with the basenames of the ResourceBundleMessageSource are all mixed together into one huge namespace. There cannot be more than one bean with id=""messageSource"". Last not least I cannot use  or  in my JSP, as that would override the JstlView supplied localization context.  A mechanism that would describe a relation between basenames/prefixes and views would be great. Ideally it would allow for exceptions, for example when I want to reference some application global messages.  However, the current situation keeps me away from using the Spring mechanism, as it would work against modularization (I would have to refactor all my JSPs in order to inline prefixes into all  tags). Also, I would make sure that no key is re-used in one of my other resource bundles (remember, Spring throws them all together). The option of not using the Spring mechanism drives me into more troubles, as not all Spring components using message resources are completely decoupled from the Spring mechanism (for example see #6514).  ---  **Affects:** 2.0 M3  2 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2006-03-26T04:30:26Z","2019-01-11T22:11:27Z"
"","6514","Input Form Tags: form errors support for fmt:message [SPR-1820]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-1820](https://jira.spring.io/browse/SPR-1820?redirect=false)** and commented  I am using JSTL fmt:message for all localized messages.  Currently (without the new input form tags), if a form validation error occurs, I put a tag into the errors object with something like  errors.rejectValue(""text"", ""missing"");  The JSP then contains   \\   and my resource bundle contains  error_text_missing=Please enter some text  Unfortunately form:errors is hardwired to the Spring way of looking up resources, which is incompatible with the standard JSTL way (or did I oversee an abstraction?). Can the JSTL way be supported somehow?   ---  **Affects:** 2.0 M3","closed","type: enhancement,","spring-projects-issues","2006-03-26T00:54:59Z","2012-06-19T03:18:58Z"
"","6465","multipart resolver lookup inconsistency [SPR-1767]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-1767](https://jira.spring.io/browse/SPR-1767?redirect=false)** and commented  Why does MultipartFilter lookup a ""filterMultipartResolver"" by _name_, while DispatcherServlet looks up a ""multipartResolver"" by _id_?  Isn't that a bit inconsistent? Shouldn't it both look up by id? Additionally, if only one instance of MultipartResolver is existent, shouldn't we be able to omit an id or name completely in both cases?   ---  **Affects:** 1.2.7","closed","in: web,","spring-projects-issues","2006-03-06T20:15:05Z","2019-01-11T22:08:26Z"
"","6245","PropertyEditor for JDK 1.5 style Enums (code included) [SPR-1546]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-1546](https://jira.spring.io/browse/SPR-1546?redirect=false)** and commented  If you want to use Enums in your web layer (e.g. for SELECT boxes), this PropertyEditor would be useful. In fact, I have been using it for the last year.   ---  **Affects:** 1.2.6  **Attachments:** - [EnumEditor.java](https://jira.spring.io/secure/attachment/11340/EnumEditor.java) (_540 bytes_)","closed","type: enhancement,","spring-projects-issues","2005-12-19T04:43:19Z","2012-06-19T03:53:57Z"
"","6243","provide Filtering for Autowiring [SPR-1544]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-1544](https://jira.spring.io/browse/SPR-1544?redirect=false)** and commented  Recently I looked for a way to autowire my SpringWeb controller classes to its services.  Unfortunately, common SpringWeb base classes like AbstractFormController have a lot of properties that use generic types such as java.lang.String, java.lang.Object and so on.  This brought me to the idea of a Filter for Autowiring.  The filter could be based on package names. I think an include filter would be best, so I can include only classes from my own packages (maybe even from a package dedicated to services) for autowiring. Maybe an exclude filter should be considered also, so java.* could be excluded.  Filtering for the ""depth of inheritance"" of the property would be an idea, too. This would allow for autowiring only properties the class implements itself, rather than inherit it from a superclass.  What do you think?   ---  **Affects:** 1.2.6","closed","type: enhancement,","spring-projects-issues","2005-12-19T02:31:08Z","2012-06-19T09:37:42Z"
"","6171","support Session.replicate() in HibernateTemplate (Hibernate3+) [SPR-1472]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-1472](https://jira.spring.io/browse/SPR-1472?redirect=false)** and commented  It would be useful if Session.replicate() could be accessed through the HibernateTemplate.   ---  **Affects:** 1.2.5","closed","type: enhancement,","spring-projects-issues","2005-11-14T19:31:26Z","2012-06-19T03:54:00Z"
"","6062","HibernateTransactionManager incompatible with Hibernate 3.1? [SPR-1362]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-1362](https://jira.spring.io/browse/SPR-1362?redirect=false)** and commented  I just updated from Hibernate 3.0.5 to 3.1rc, and in an application that ran fine on 3.0.5, I now get the following exception in HibernateTransactionManager, at the end of calling my service methods:  Oct 10, 2005 10:19:41 AM org.springframework.orm.hibernate3.HibernateTransactionManager doCleanupAfterCompletion INFO: Could not access JDBC Connection of Hibernate Session org.hibernate.SessionException: Session is currently disconnected at org.hibernate.jdbc.JDBCContext.connection(JDBCContext.java:134) at org.hibernate.jdbc.JDBCContext.userConnection(JDBCContext.java:125) at org.hibernate.impl.SessionImpl.connection(SessionImpl.java:366) at org.springframework.orm.hibernate3.HibernateTransactionManager.doCleanupAfterCompletion(HibernateTransactionManager.java:550) at org.springframework.transaction.support.AbstractPlatformTransactionManager.cleanupAfterCompletion(AbstractPlatformTransactionManager.java:749) at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:536) at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:468) at org.springframework.transaction.interceptor.TransactionAspectSupport.doCommitTransactionAfterReturning(TransactionAspectSupport.java:258) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:106) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:144) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:174)  See also:  http://opensource2.atlassian.com/projects/hibernate/browse/HHH-1011 http://forum.springframework.org/viewtopic.php?p=37276   ---  **Affects:** 1.2.5  4 votes, 8 watchers","closed","type: bug,","spring-projects-issues","2005-10-09T20:35:30Z","2012-06-19T03:54:03Z"
"","5982","Aggregation of Request Parameters flawed when using MultipartResolvers [SPR-1280]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-1280](https://jira.spring.io/browse/SPR-1280?redirect=false)** and commented  Please imagine the following setup: A resource (""target"") is being requested with method=""POST"", enctype=""multipart/form-data"" and no request parameters. Target is including another resource (""fragment""), using a request parameter, e.g. by using .  Now, imagine the usual Spring Web setup: A multipart resolver is configured for the RequestDispatcher (CommonsMultipartResolver, but I guess the same problem applies to other multipart resolvers as well).  The following is happening:  The request comes in and runs into the DispatcherServlet for the first time. It runs into the Resolver, any request parameters are copied into the wrapper (but there are none yet), and the wrapper is wrapped around the request. The now-multipart request is forwarded to the view, which invokes the include of ""fragment"".  The request comes in to DispatcherServlet for the second time (actually it might be the third, I'm not sure about the forward to the view, but it does not matter). DispatcherServlet detects that the Request is already a Multipart Request and decides to skip the Multipart Resolver.  THIS IS AN ERROR.  Somehow, any request parameters passed into an include need to be aggregated into the request/wrapper. If we don't aggregate, we will lose the parameters!  Just for your information: For the default encoding (www-url-encoded), the servlet containers provide the correct behaviour.   ---  **Affects:** 1.2.4","closed","type: bug,","spring-projects-issues","2005-09-02T06:02:50Z","2012-06-19T03:54:06Z"
"","5977","Reduce log file flooding (patch included) [SPR-1275]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-1275](https://jira.spring.io/browse/SPR-1275?redirect=false)** and commented  Please keep in mind that log level ""info"" is meant to be displayed at the console in the default server configuration.  Index: AbstractBeanFactory.java  ---  RCS file: /cvsroot/springframework/spring/src/org/springframework/beans/factory/support/AbstractBeanFactory.java,v retrieving revision 1.96 diff -r1.96 AbstractBeanFactory.java 221,222c221,222 < 						if (logger.isInfoEnabled()) { < 							logger.info(""Creating shared instance of singleton bean '"" + beanName + ""'""); —  > if (logger.isDebugEnabled()) { > logger.debug(""Creating shared instance of singleton bean '"" + beanName + ""'"");  ---  **Affects:** 1.2.4","closed","type: enhancement,","spring-projects-issues","2005-08-31T08:42:44Z","2019-01-13T22:50:43Z"
"","6678","Problems with OpenSessionInViewFilter [SPR-1985]","**[Amlan Sengupta](https://jira.spring.io/secure/ViewProfile.jspa?name=stazione_jaxrpc)** opened **[SPR-1985](https://jira.spring.io/browse/SPR-1985?redirect=false)** and commented  Smile Problems with OpenSessionInViewFilter Technology :I am using latest Springframework and Hibernate 3.1. Problem :I am successful in doing lazy loading of data. But when I try to update or do inserts, I get a lazy intialization exception saying that the session is closed.  I have a filter class which does the following : public class SpringSessionInViewFilter extends OpenSessionInViewFilter{  public Session getSession(SessionFactory sessionFactory) throws DataAccessResourceFailureException { Session session = SessionFactoryUtils.getSession(sessionFactory, true); session.setFlushMode(FlushMode.AUTO); return session; }  public void closeSession(Session session, SessionFactory sessionFactory) throws CleanupFailureDataAccessException { if (session != null && session.isOpen() && session.isConnected()) { try { session.flush(); session.close(); } catch (HibernateException e) { throw new CleanupFailureDataAccessException(""Failed to flush session before close: "" + e.getMessage(), e); } } //super.closeSession(session, sessionFactory); } }  Unfortunately when the spring logs are observed, for a single request, wayy too many HibernateSessions are opended and closed. It seems the parent class OpenSessionInViewFilter and its child SpringSessionInViewFilter is opening and closing sessions. At the web.xml level, the filters are defined the following way.  \ \hibernateFilter\ \ \.SpringSessionInViewFilter \ \ \ \ \hibernateFilter\ \/*\ \ \ \\..SpringWebApplicationContextSe rvletContextListener\ \  I am using the default singleSession set up. As default is set to single session. I am not using deffered mode.  Amlan   ---  **Affects:** 1.2.6, 2.0 M2","closed","","spring-projects-issues","2006-05-04T09:13:08Z","2019-01-11T22:20:59Z"
"","5996","Implement inheritance proxies [SPR-1295]","**[Amit Chhajed](https://jira.spring.io/secure/ViewProfile.jspa?name=chhajed)** opened **[SPR-1295](https://jira.spring.io/browse/SPR-1295?redirect=false)** and commented  This is basically the similar issue as [SPRNET-30](https://jira.spring.io/browse/SPRNET-30).   ---  **Affects:** 1.2.3  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2005-09-09T17:00:48Z","2012-06-19T02:28:15Z"
"","6371","hour, min, ms Calendar fields lost in JdbcTemplate.query placeholder substitution [SPR-1674]","**[Allistair Crossley](https://jira.spring.io/secure/ViewProfile.jspa?name=adcspring)** opened **[SPR-1674](https://jira.spring.io/browse/SPR-1674?redirect=false)** and commented  I am using JdbcTemplate.query(String, Object[]. int[], RowMapper) to execute a query. The SQL contains a BETWEEN statement for  date range criteria.  I debug the from and to Calendar objects prior to the query call  FROM  java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=""Europe/London"",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=Europe/London,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2006,MONTH=1,WEEK_OF_YEAR=5,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=32,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]  TO  java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=""Europe/London"",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=Europe/London,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2006,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=5,DAY_OF_MONTH=28,DAY_OF_YEAR=59,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]  Using Profiler in SQL Server, the SQL that is called is  exec sp_execute 1, 'Feb  1 2006 12:00:00:000AM', 'Feb 28 2006 12:00:00:000AM'  The second date you see is 12:00:00AM but should be 23:59:59PM  Is this an issue, or a programming blooper by me? The datasource in use is taken from a Tomat JNDI C3P0 resource.   ---  **Affects:** 1.2.6","closed","in: core,","spring-projects-issues","2006-02-06T00:51:58Z","2019-01-11T21:24:10Z"
"","6655","StopWatch should aggregate tasks [SPR-1962]","**[Alice Boxhall](https://jira.spring.io/secure/ViewProfile.jspa?name=aboxhall)** opened **[SPR-1962](https://jira.spring.io/browse/SPR-1962?redirect=false)** and commented  It was annoying me that StopWatch didn't allow me to aggregate tasks with the same name -- that is, if I run two tasks with the same name I should be able to easily get the total time spent on \, including a pretty printout. I've hastily put together an implementation of how I think it might work (which I'm using) which I thought I might share.   ---  **Affects:** 1.2.7  **Attachments:** - [StopWatch_patch.txt](https://jira.spring.io/secure/attachment/11601/StopWatch_patch.txt) (_6.76 kB_)","closed","type: enhancement,","spring-projects-issues","2006-04-26T18:04:04Z","2012-06-19T09:37:23Z"
"","6319","JdbcTemplate.queryForObject not return null in case of SQL NULL [SPR-1622]","**[Alexey Skorobogatov](https://jira.spring.io/secure/ViewProfile.jspa?name=avskor)** opened **[SPR-1622](https://jira.spring.io/browse/SPR-1622?redirect=false)** and commented  JdbcTemplate.queryForObject(String sql, Class requiredType) not return null in case of SQL NULL  tested on  requiredType = Long.class   ---  **Affects:** 1.2.6","closed","in: core,","spring-projects-issues","2006-01-17T20:32:41Z","2012-06-19T03:54:33Z"
"","6775","AbstractSlsbInvokerInterceptor doesn't update internal createMethod field after lookup of new home [SPR-2083]","**[Alexey Kusak](https://jira.spring.io/secure/ViewProfile.jspa?name=alexey.kusak)** opened **[SPR-2083](https://jira.spring.io/browse/SPR-2083?redirect=false)** and commented  I have ""cacheHome=false"" option in Spring configuration for SimpleRemoteStatelessSessionProxyFactoryBean so as I can see AbstractSlsbInvokerInterceptor lookup home object on each invocation but createMethod is not get refreshed after this and it uses cached one (as it was cached in afterPropertiesSet method). That could (and does!) lead to exceptions from reflections API if  home object changes class. Resulted exception is:  java.lang.IllegalArgumentException at jrockit.reflect.VirtualNativeMethodInvoker.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;(Unknown Source) at java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;I)Ljava/lang/Object;(Unknown Source) at org.springframework.ejb.access.AbstractSlsbInvokerInterceptor.create()Ljava/lang/Object;(AbstractSlsbInvokerInterceptor.java:174) at org.springframework.ejb.access.AbstractRemoteSlsbInvokerInterceptor.newSessionBeanInstance()Ljavax/ejb/EJBObject;(AbstractRemoteSlsbInvokerInterceptor.java:202) at org.springframework.ejb.access.SimpleRemoteSlsbInvokerInterceptor.getSessionBeanInstance()Ljavax/ejb/EJBObject;(SimpleRemoteSlsbInvokerInterceptor.java:108) at org.springframework.ejb.access.SimpleRemoteSlsbInvokerInterceptor.doInvoke(Lorg/aopalliance/intercept/MethodInvocation;)Ljava/lang/Object;(SimpleRemoteSlsbInvokerInterceptor.java:74) at org.springframework.ejb.access.AbstractRemoteSlsbInvokerInterceptor.invoke(Lorg/aopalliance/intercept/MethodInvocation;)Ljava/lang/Object;(AbstractRemoteSlsbInvokerInterceptor.java:114) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed()Ljava/lang/Object;(ReflectiveMethodInvocation.java:170) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;(JdkDynamicAopProxy.java:176)  So I think that createMethod field should be nulled/updated after each home lookup.   ---  **Affects:** 1.2.7","closed","in: core,","spring-projects-issues","2006-05-31T00:26:43Z","2012-06-19T03:52:29Z"
"","6798","Session Scope doesn't work [SPR-2105]","**[Alexey Kakunin](https://jira.spring.io/secure/ViewProfile.jspa?name=akakunin)** opened **[SPR-2105](https://jira.spring.io/browse/SPR-2105?redirect=false)** and commented  After settion scope=""session"" to the bean it doesn't stored in session (ok, it cannot be updated in session). It is because there an error in org.springframework.web.context.scope::updateAccessedAttributes method.  It contains lines like: for (Iterator it = this.sessionAttributesToUpdate.keySet().iterator(); it.hasNext();) { Map.Entry entry = (Map.Entry) it.next(); ...  but as I know java.util.Map::keySet returns strings, but not entries, map entries returned my java.util.Map::entrySet  So, probably these lines should be changed to for (Iterator it = this.sessionAttributesToUpdate.entrySet().iterator(); it.hasNext();) { Map.Entry entry = (Map.Entry) it.next();  ---  **Affects:** 2.0 M5  **Issue Links:** - #6779 SessionScope has problems in 2.0M5 (bug in ServletRequestAttributes.updateAccessedAttributes()) (_**""depends on""**_)","closed","in: core,","spring-projects-issues","2006-06-05T21:03:36Z","2019-01-11T17:44:21Z"
"","6107","Extract instantiation of nested BeanWrapperImpl to new method [SPR-1407]","**[Alex Wolfe](https://jira.spring.io/secure/ViewProfile.jspa?name=akw)** opened **[SPR-1407](https://jira.spring.io/browse/SPR-1407?redirect=false)** and commented  BeanWrapperImpl cannot be reasonably extended without overriding the getNestedBeanWrapper method, which among other things instantiates the new nested bean wrapper.  Subclasses of BeanWrapperImpl require that nested bean wrappers are of the same type.  Extracting the instantiation of nested BeanWrapperImpl from the getNestedBeanWrapper method allows subclasses to provide their own implementation of BeanWrapperImpl without overriding the entire getNestedBeanWrapper method.  ? src/org/springframework/beans/BeanWrapperImpl.patch Index: src/org/springframework/beans/BeanWrapperImpl.java  ---  RCS file: /cvsroot/springframework/spring/src/org/springframework/beans/BeanWrapperImpl.java,v retrieving revision 1.83 diff -u -r1.83 BeanWrapperImpl.java --- src/org/springframework/beans/BeanWrapperImpl.java	13 Sep 2005 21:23:14 -0000	1.83 +++ src/org/springframework/beans/BeanWrapperImpl.java	21 Oct 2005 16:22:43 -0000 @@ -562,8 +562,7 @@ if (logger.isDebugEnabled()) { logger.debug(""Creating new nested BeanWrapper for property '"" + canonicalName + ""'""); }  ---      nestedBw =  -         new BeanWrapperImpl(propertyValue, this.nestedPath + canonicalName + NESTED_PROPERTY_SEPARATOR, this);  +         nestedBw = newNestedInstance(propertyValue, this.nestedPath + canonicalName + NESTED_PROPERTY_SEPARATOR, this);       // inherit all type-specific PropertyEditors       if (this.customEditors != null) {            for (Iterator it = this.customEditors.entrySet().iterator(); it.hasNext();) {  @@ -598,7 +597,12 @@ return nestedBw; }  - private PropertyTokenHolder getPropertyNameTokens(String propertyName) {  + protected BeanWrapperImpl newNestedInstance(Object bean, String nestedPath, BeanWrapperImpl superBw) {  +         logger.debug(""Default newNestedInstance method invoked"");  +         return new BeanWrapperImpl(bean, nestedPath, superBw);  + }  +   + private PropertyTokenHolder getPropertyNameTokens(String propertyName) {   PropertyTokenHolder tokens = new PropertyTokenHolder();   String actualName = null;   List keys = new ArrayList(2);  ---  **Affects:** 1.2.5","closed","type: enhancement,","spring-projects-issues","2005-10-21T04:14:37Z","2019-01-13T22:50:23Z"
"","6240","DI thru AspectJ code throws NPE, when classes compiled with iajc used with no container present (i.e. unit tests) [SPR-1541]","**[Alex Shenyderman](https://jira.spring.io/secure/ViewProfile.jspa?name=bpolka)** opened **[SPR-1541](https://jira.spring.io/browse/SPR-1541?redirect=false)** and commented  I was trying out the samples of DI thru AspectJ integration. Great stuff!  One problem though. If  POJOs compiled with the aspects woven in, and used without the container present in VM, they throw NPE on instantiation. The culprit seems to be org.springframework.beans.factory.aspectj.AbstractBeanConfigurer's method confugreBean.  So if I want to unit test (setting dependents manually) my classes I really can't, due to NPE.  method      protected void configureBean(Object bean, String beanName) {;             this.beanFactory.applyBeanPropertyValues(bean, beanName);     }  and it should probably be      protected void configureBean(Object bean, String beanName) {;         if (this.beanFactory != null)             this.beanFactory.applyBeanPropertyValues(bean, beanName);     }    ---  **Affects:** 2.0 M1","closed","type: bug,","spring-projects-issues","2005-12-16T11:25:31Z","2012-06-19T03:54:31Z"
"","6179","Allow overriding of AbstractFormController.getCommand [SPR-1480]","**[Alex Robbins](https://jira.spring.io/secure/ViewProfile.jspa?name=alexrobbins)** opened **[SPR-1480](https://jira.spring.io/browse/SPR-1480?redirect=false)** and commented  AbstractFormController.getCommand(HttpServletRequest request) is final. It would be really useful to be able to override hit s method in the following scenario: I want to be able to create a new version and persist a snapshot of my object when it is updated by a user in a web form but before the form-submitted values are bound to the object. The flow goes something like:  user POSTs form AbstractFormController.getCommand gets (detached) object from session My controller's overridden method (after calling super.getCommand) begins a transaction, then Attaches object to session (I'm using JDO, but could be another ORM tool) Creates new version of the object and persists a snapshot. Then the command object is passed to onBind and onBindAndValidate as usual. etc..  Without overriding getCommand there is no way to intercept the object before binding occurs.  I understand certain Controller methods have been made final in order to force the developer to follow the template method pattern, and certainly it limits your options and makes it easier to develop a simple controller, but you should be able to override getCommand when you really need to. I have had to hack a copy of AbstractFormController in order to achieve this - and I don't want to have to maintain this in line with Spring ;-)  Could it possibly be made non-final in the next release?  Many thanks, Alex   ---  **Affects:** 1.2.5","closed","type: enhancement,","spring-projects-issues","2005-11-18T01:17:57Z","2012-06-19T03:53:57Z"
"","6212","MBeanExporter configuration example using Annotation Attribute Source. [SPR-1513]","**[Alex Portnov](https://jira.spring.io/secure/ViewProfile.jspa?name=aportnov)** opened **[SPR-1513](https://jira.spring.io/browse/SPR-1513?redirect=false)** and commented  Documentation section 19.3.3. ""Using JDK 5.0 Annotations"" misses bean configuration example. Configuration of MBeanExporter using annotations require configuration of a naming strategy, which is only documented in javadoc. Following is a configuration example:           	     	     	                                	                    	         ---  **Affects:** 1.2.6","closed","type: enhancement,","spring-projects-issues","2005-12-03T10:52:37Z","2012-06-19T03:54:13Z"
"","6114","Use APT tool to automatically configure Hibernate sessionFactory with annotated classes [SPR-1414]","**[Alex Portnov](https://jira.spring.io/secure/ViewProfile.jspa?name=aportnov)** opened **[SPR-1414](https://jira.spring.io/browse/SPR-1414?redirect=false)** and commented  I am using Hibernate 3 with annotations and found it pretty inconvenient to have to modify hibernate config file every time I need to add a new entity.  I was looking for some way to automate it so it will just automatically find all the classes in my source tree annotated as entities and include them into hibernate configuration. The solution I found is to create custom APT processor which will go over source tree and generate implementation of some interface (I called mine EntityConfigurationProvider) which will provide a list of all classes annotated with `@Entity`. This generated class is then used by AnnotationSessionFactoryBean subclass to configure AnnotationConfiguration instance. Attached is an implementation of APT AnnotationProcessorFactory,  AnnotationSessionFactoryBean subclass and EntityConfigurationProvider interface. APT ANT task is also attached, but this is just a copy of apache ANT task available in ANT 1.7.   ---  **Affects:** 1.2.5  **Attachments:** - [annotation-configuration.jar](https://jira.spring.io/secure/attachment/11219/annotation-configuration.jar) (_6.88 kB_) - [build-example.doc](https://jira.spring.io/secure/attachment/11220/build-example.doc) (_10.50 kB_) - [configuration-example.doc](https://jira.spring.io/secure/attachment/11221/configuration-example.doc) (_11.00 kB_)","closed","type: enhancement,","spring-projects-issues","2005-10-23T14:53:02Z","2019-01-11T21:02:10Z"
"","6751","BeanWrapper does not support objects that are maps/arrays/lists them-selves [SPR-2058]","**[Alex Antonov](https://jira.spring.io/secure/ViewProfile.jspa?name=aantono)** opened **[SPR-2058](https://jira.spring.io/browse/SPR-2058?redirect=false)** and commented  When a BeanWrapper wraps an object that is a map or a collection of sorts, it has trouble retrieving a value using a key property i.e. Person p = new Person(""John""); Map map = new HashMap(); map.put(""key"", person); BeanWrapperImpl wrapper = new BeanWrapperImpl(map); String name = wrapper.getPropertyValue(""[key].name"")  This kind of access is very possible when comming from a web-layer using a bind-path of something like [key].name when the top-level object is itself a map. In this case, when calling errros.rejectValue(""[key].name"", ...) in the validator, the call throws an exception due to inability to find an object referenced by [key].  Currently a work-around this problem is to subclass a map and provide a getter for every key you might have in the map, so that the path looks like key.name, but this approach requires a lot of overhead of the getter creation.   ---  11 votes, 9 watchers","closed","has: votes-jira,","spring-projects-issues","2006-05-25T07:27:05Z","2015-09-22T17:34:33Z"
"","6183","Maven 2 support (POMs) [SPR-1484]","**[Aleksander Blomskøld](https://jira.spring.io/secure/ViewProfile.jspa?name=aleksabl)** opened **[SPR-1484](https://jira.spring.io/browse/SPR-1484?redirect=false)** and commented  Maven 2 POMs with dependencies is missing for Spring. It's a lot of extra job for maven 2 users to find out which dependencies Spring needs, and to have to include them manually.  ---  **Attachments:** - [buildsources.sh](https://jira.spring.io/secure/attachment/12005/buildsources.sh) (_590 bytes_) - [spring-maven.tgz](https://jira.spring.io/secure/attachment/11714/spring-maven.tgz) (_10.81 kB_) - [spring-poms-1.2.8.zip](https://jira.spring.io/secure/attachment/11912/spring-poms-1.2.8.zip) (_22.40 kB_)  **Issue Links:** - #6209 maven pom hosed on repo1.maven.org (_**""is duplicated by""**_) - #6533 Missing m2 POMs at ibiblio.net (_**""is duplicated by""**_)  121 votes, 60 watchers","closed","has: votes-jira,","spring-projects-issues","2005-11-19T18:35:01Z","2019-01-11T21:09:48Z"
"","6422","Add schema for web configuration (handler mappings) [SPR-1725]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-1725](https://jira.spring.io/browse/SPR-1725?redirect=false)** and commented  Using the new schema support we can greatly simplify the configuration of Spring Web MVC. I'll be adding schema and parsers incrementally over the next couple of days.  ---  **Issue Links:** - #7452 configuring a SimpleUrlHandlerMapping through a schema (_**""is duplicated by""**_) - #10972 Add mvc namespace for simplifying setup of Spring MVC (_**""is duplicated by""**_)  4 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2006-02-17T08:47:38Z","2019-01-11T22:07:48Z"
"","6347","autowire=""byType"" is flawed in combination with proxies [SPR-1650]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-1650](https://jira.spring.io/browse/SPR-1650?redirect=false)** and commented  A user on the forum came with an issue where a singleton essentially isn't a singleton.  I've taken a futher look at the issue and it seems that if (in the attached sample), autowiring is turned on for the LocalSessionFactory in combination with two objects being proxied, 17 instances of the SingletonRepository are created whereas with autowiring turned off, only one instance is created.  There are three possible scenarios:  autowiring=autodetect + proxying enabled: test fails autowiring=off + proxying objects: test passes autowiring=autodetect + no proxied object: test passes  I don't have time to further investigate the problem at the moment and can't really think of a possible thing causing this ;-).  regards, Alef   ---  **Affects:** 1.2.6, 2.0 M1  **Attachments:** - [autowiring.zip](https://jira.spring.io/secure/attachment/11431/autowiring.zip) (_4.83 kB_)","closed","in: core,","spring-projects-issues","2006-01-30T08:42:04Z","2012-06-19T03:54:13Z"
"","6222","Improve similarity checking when exposing business interface with SimpleRemoteStatelessSessionProxyFactoryBean [SPR-1523]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-1523](https://jira.spring.io/browse/SPR-1523?redirect=false)** and commented  I a business interface associated with a SRSSPFB has more (or less) methods than the remote interface, no warnings or errors are given. More methods should at least raise an error, less doesn't necessarily have to.    ---  **Affects:** 2.0 M2  1 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2005-12-08T10:34:05Z","2009-03-23T03:29:58Z"
"","6152","Error message incorrect with ambiguous constructor arguments [SPR-1452]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-1452](https://jira.spring.io/browse/SPR-1452?redirect=false)** and commented  When using the following bean definition, the error message includes 'specify index arguments for simple types...', while index wouldn't help here. Maybe the hint should include specifying the type attribute as well.  APP.CONTEXT  ---           	     	     	  CONSTRUCTORS OF CUSTOMER CLASS  ---          public Customer(Number n1, Number n2) {     	this.n1 = n1;     	this.n2 = n2;     }          public Customer(Integer i1, Integer i2) {     	this.n1 = i1;     	this.n2 = i2;     }  STACKTRACE  ---  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'customer4' defined in class path resource [com/springframework/jta/test.xml]: 2 constructor arguments specified but no matching constructor found in bean 'customer4' (hint: specify index arguments for simple parameters to avoid type ambiguities) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:631) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:329)  ---  **Affects:** 1.2.5","closed","type: bug,","spring-projects-issues","2005-11-07T21:25:23Z","2019-01-13T22:50:14Z"
"","6056","Warning on missing datasource or transactionmanager in Transaction tests [SPR-1356]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-1356](https://jira.spring.io/browse/SPR-1356?redirect=false)** and commented  When PlatformTransactionManager is missing, no warnings are given. This is up for improvement   ---  **Affects:** 1.2.5","closed","type: enhancement,","spring-projects-issues","2005-10-06T01:50:39Z","2012-06-19T02:28:11Z"
"","6055","PerformanceMonitorInterceptor bugs on missign prefix (NPE) [SPR-1355]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-1355](https://jira.spring.io/browse/SPR-1355?redirect=false)** and commented  Problem known... Elaborate later   ---  **Affects:** 1.2.5","closed","in: core,","spring-projects-issues","2005-10-06T01:49:12Z","2012-06-19T03:54:42Z"
"","5984","JasperReportsView does not work with jasperreports-1.0.0 [SPR-1282]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-1282](https://jira.spring.io/browse/SPR-1282?redirect=false)** and commented  Compiling reports on the fly does not work (anymore) using JasperReports 1.0. Somehow, JR seems to use the Java classpath to compile reports in for example the JRJdk12Compiler (using System.getProperty(java.class.path)), which does not work of course in a web app environment.  I think it's best to remove the option to compile reports on the fly, unless you have a better idea...  For the time being, I've changed the sample application to NOT do on the fly compilation of reports anymore.  rgds, alef  also see    ---  **Affects:** 1.2.4","closed","type: bug,","spring-projects-issues","2005-09-03T22:39:45Z","2012-06-19T03:54:34Z"
"","6317","A factory that takes an argument  [SPR-1620]","**[alberto manjarrez](https://jira.spring.io/secure/ViewProfile.jspa?name=amanjarrez)** opened **[SPR-1620](https://jira.spring.io/browse/SPR-1620?redirect=false)** and commented  A common pattern on a factory is to have a ""discriminator"" (argument) in the creation method. For example:  createInstance(int type); createInstance(String type); createInstance(Locale locale);  This is used to determine which specific instance needs to be created. Hence the API of the FactoryBean shoul be extended to support something like:  getObject(Object arg) or getObject(Object[] args)  This of course will have to be propagated to other interfaces and classes. For example: the AbstractFactoryBean createInstance should be extended to support createInstance (Object arg); or the BeanFactory getBean should be extended to support  getBean(String id, Object arg);    ---  **Affects:** 2.0 M2","closed","type: enhancement,","spring-projects-issues","2006-01-17T03:46:05Z","2012-06-19T09:37:27Z"
"","6586","Location value on PropertyPlaceholderConfigurer definition does not resolve placeholder if it is a system env [SPR-1893]","**[Akmal Sarhan](https://jira.spring.io/secure/ViewProfile.jspa?name=akmal)** opened **[SPR-1893](https://jira.spring.io/browse/SPR-1893?redirect=false)** and commented  the following snippet does not work \ \\true\\ \\SYSTEM_PROPERTIES_MODE_FALLBACK\\      	     		     			classpath:project-${SERVER_MODE}.properties     			classpath:messages.properties     		     	     	  if SERVER_MODE is a system env. the solution is to change org.springframework.util.SystemPropertyUtils  to try to resolve the placeholder via: ... String propVal = System.getProperty(placeholder); if (propVal == null) propVal = System.getenv(placeholder); ...  ---  **Affects:** 2.0 M3  **Issue Links:** - #6542 Resource location placeholders not resolved against system environment variables (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2006-04-13T01:13:30Z","2019-01-11T22:02:26Z"
"","6372","spring-beans jar file is locked when app is redeployed  [SPR-1692]","**[Akmal Sarhan](https://jira.spring.io/secure/ViewProfile.jspa?name=akmal)** opened **[SPR-1692](https://jira.spring.io/browse/SPR-1692?redirect=false)** and commented  this is the solution:  the PropertiesLoaderUtils.loadAllProperties should read:  public static Properties loadAllProperties(String resourceName, ClassLoader classLoader) throws IOException { Properties properties = new Properties(); Enumeration urls = classLoader.getResources(resourceName); while (urls.hasMoreElements()) { URL url = (URL) urls.nextElement(); InputStream is = null; try { is = getInputStream(url);//set using cache to false to avoid locking properties.load(is); } finally { if (is != null) { is.close(); } } } return properties; } private static InputStream getInputStream(URL url) throws IOException { URLConnection con = url.openConnection(); con.setUseCaches(false); return con.getInputStream(); }   ---  **Affects:** 2.0 M2","closed","in: core,","spring-projects-issues","2006-02-08T20:09:29Z","2012-06-19T03:54:17Z"
"","6803","Missing comma in email attachment example [SPR-2111]","**[Aitor Imaz](https://jira.spring.io/secure/ViewProfile.jspa?name=aimaz)** opened **[SPR-2111](https://jira.spring.io/browse/SPR-2111?redirect=false)** and commented  There is a comma missing on the '23.4.2. Sending attachments and inline resources' section example. Concretely, the following call to the setText() method is incorrect.  helper.setText( ""\\\\\"" true);  It should be:  helper.setText( ""\\\\\"", true);   ---  **Affects:** 1.2.8, 2.0 M5","closed","type: bug,","spring-projects-issues","2006-06-06T20:01:17Z","2012-06-19T03:52:21Z"
"","6589","Complete reference documentation for AOP in Spring 2.0 [SPR-1896]","**[Adrian Colyer](https://jira.spring.io/secure/ViewProfile.jspa?name=adrian.colyer)** opened **[SPR-1896](https://jira.spring.io/browse/SPR-1896?redirect=false)** and commented  The reference documentation for the new AOP support in Spring 2.0 needs to be completed.   --- No further details from [SPR-1896](https://jira.spring.io/browse/SPR-1896?redirect=false)","closed","type: enhancement,","spring-projects-issues","2006-04-14T05:19:46Z","2012-06-19T03:52:40Z"
"","6588","Enable selection of @AspectJ aspects used for AspectJ autoproxying [SPR-1895]","**[Adrian Colyer](https://jira.spring.io/secure/ViewProfile.jspa?name=adrian.colyer)** opened **[SPR-1895](https://jira.spring.io/browse/SPR-1895?redirect=false)** and commented  When using the AspectJAutoProxyCreator via  there is no way to exclude any `@AspectJ` aspects from the proxying process.  Consider the following scenario: a user is compiling the domain model with aspectj, using some `@AspectJ` aspects which need to be dependency injected by Spring. These aspects may contain constructs that Spring AOP does not support.  The user also has one or more `@AspectJ` aspects that implement behaviour affecting the service layer and are to be woven with Spring AOP. It is not possible to enable AspectJ auto-proxying /and/ configure the `@AspectJ` aspects for the domain model without also including those aspects in autoproxying hence leading to a proxying failure.  The proposed solution is to extend the  element with an optional nested include element. If there are no include elements, then the behaviour is as today, and any bean that is an `@AspectJ`  aspect will be used for auto-proxying. If one or more include elements are used, then only the include aspects are used.  For example:   \ \ \   would use `@AspectJ` aspects named ""thisBean"", ""thatBean"" and any `@AspectJ` aspect named ""aspect.*"" for proxying.   ---  **Affects:** 2.0 M3","closed","type: enhancement,","spring-projects-issues","2006-04-14T02:31:00Z","2012-06-19T03:52:42Z"
"","6583","Support bean(NamePattern) pcd [SPR-1890]","**[Adrian Colyer](https://jira.spring.io/secure/ViewProfile.jspa?name=adrian.colyer)** opened **[SPR-1890](https://jira.spring.io/browse/SPR-1890?redirect=false)** and commented  allow use of bean(\) inside pointcuts used by Spring AOP. Relies on AspectJ 1.5.1 extensions to PointcutParser.  ---  **Affects:** 2.0 M3  **Issue Links:** - #8378 Doc: Document the bean() PCD. (_**""is depended on by""**_)","closed","type: enhancement,","spring-projects-issues","2006-04-12T00:57:14Z","2019-01-13T22:48:23Z"
"","6496","Support for OSGi [SPR-1802]","**[Adrian Colyer](https://jira.spring.io/secure/ViewProfile.jspa?name=adrian.colyer)** opened **[SPR-1802](https://jira.spring.io/browse/SPR-1802?redirect=false)** and commented  Add support for the OSGi platform to Spring. Initial code can be found in the sandbox under the org.springframework.osgi packages. This issue covers:  * the packaging of Spring itself as one or more OSGi bundles * support for a Spring application context hosted in an OSGi bundle * exporting and injection of Spring beans as OSGi services * proxying to support the dynamic nature of the OSGi environment  See the code in org.springframework.osgi for more details. To contribute to the design and development of Spring's OSGi support, please append comments and patches to this issue...  ---  **Attachments:** - [osgi.patch](https://jira.spring.io/secure/attachment/11514/osgi.patch) (_20.27 kB_) - [spring_and_osgi.html](https://jira.spring.io/secure/attachment/11891/spring_and_osgi.html) (_59.79 kB_) - [spring_and_osgi-57.html](https://jira.spring.io/secure/attachment/11916/spring_and_osgi-57.html) (_51.88 kB_) - [spring_and_osgi-64.html](https://jira.spring.io/secure/attachment/11934/spring_and_osgi-64.html) (_52.54 kB_)  **Issue Links:** - #7500 Package spring.schema and spring.handler mappings in appropriate module jars  21 votes, 39 watchers","closed","has: votes-jira,","spring-projects-issues","2006-03-19T22:04:38Z","2019-01-11T22:11:41Z"
"","6497","Cglib2AopProxy#getProxy(ClassLoader) does not pass classloader to Cglib2 Enhancer#setClassLoader(ClassLoader) [SPR-1803]","**[Adam Skogman](https://jira.spring.io/secure/ViewProfile.jspa?name=adamskogman)** opened **[SPR-1803](https://jira.spring.io/browse/SPR-1803?redirect=false)** and commented  I'm tring to proxy a class, and want the proxy in its own classloader (so I can drop the class). I have tried:  aProxyFactory.getProxy(myClassLoader);  The call goes through to Cglib2AopProxy#getProxy(myClassLoader)  but there the classloader argument is not used at all. I'm guessing it should be passed to Enhancer#setClassLoader(ClassLoader). Or am I missing something?   ---  **Affects:** 1.2.1, 1.2.6, 2.0 M4","closed","type: bug,","spring-projects-issues","2006-03-20T00:51:05Z","2012-06-19T03:54:36Z"
"","6646","PropertyPlaceholderConfigurer indirectly instantiates FactoryBeans if it's autowire mode is anything but 'no' [SPR-1953]","**[Adam Ruggles](https://jira.spring.io/secure/ViewProfile.jspa?name=adamal)** opened **[SPR-1953](https://jira.spring.io/browse/SPR-1953?redirect=false)*** and commented  Please see http://forum.springframework.org/showthread.php?t=24133 for more details.  I have a properties file with jdbc and hibernate information.  I am using the following configuration file:  \ \ \ \ \\com.mysql.jdbc.Drive r\\ \\${jdbc.url}\\ \\${jdbc.username}\\ \\${jdbc.password}\\ \\90\\ \\3\\ \\10000\\ \\true\\ \\600\\ \ \ \\\ \ \ \com/amlforum/entities/Category.hbm.xml\ \com/amlforum/entities/Forum.hbm.xml\ \com/amlforum/entities/Topic.hbm.xml\ \com/amlforum/entities/Post.hbm.xml\ \com/amlforum/entities/User.hbm.xml\ \com/amlforum/entities/Rank.hbm.xml\ \com/amlforum/entities/Permission.hbm.xml\ \com/amlforum/entities/Group.hbm.xml\ \ \ \ \ \${hibernate.dialect}\ \${hibernate.show_sql}\ \ \ \ When I add org.springframework.orm.hibernate3.LocalSessionFactoryBean to the configuration file it loads hibernate first, the datasource second then the PropertyPlaceholderConfigurer.  If I remove the LocalSessionFactoryBean configuration it loads PropertyPlaceholderConfigurer first like I would expect it to.  With it's current behavior there is no way to use a properties file to configure either the datasource or the hibernate LocalSessionFactoryBean.  ---  **Affects:** 1.2.7  **Attachments:** - [AmlForum.war](https://jira.spring.io/secure/attachment/11633/AmlForum.war) (_77.49 kB_) - [lib1.zip](https://jira.spring.io/secure/attachment/11634/lib1.zip) (_5.41 MB_) - [lib2.zip](https://jira.spring.io/secure/attachment/11635/lib2.zip) (_6.37 MB_)  **Issue Links:** - #9255 PropertyPlaceholderConfigurer fails to resolve properties in combination with ProxyFactoryBean and default-autowire=""byType""","closed","in: core,","spring-projects-issues","2006-04-24T09:44:19Z","2019-01-11T22:06:30Z"
"","6819","FormTag doesn't support all attributes listed in the TLD [SPR-2128]","**[Adam Murray](https://jira.spring.io/secure/ViewProfile.jspa?name=adamj)** opened **[SPR-2128](https://jira.spring.io/browse/SPR-2128?redirect=false)** and commented  The form implementation class org.springframework.web.servlet.tags.form.FormTag doesn't implement support for all the attributes it claims to support in the spring-form.tld. Specially, the attributes supported by code in the AbstractHtmlElementTag class are missing. This isn't a major problem on Tomcat, where things work fine until you try to use one of the unsupported attributes, like cssClass, and then the JSP fails to compile with the following error: Unable to find setter method for attribute: cssClass  But the situation is worse on WebLogic 8.1, which appears to validate the TLD just by including the taglib on a page. I have a common taglibs.jsp page that includes all the taglibs needed by my app, even if they aren't used on a particular page. So I can't view any page in my application when using the spring form taglib and this ""global include"" type of approach, because all pages will display the following error: Error in using tag library uri='http://www.springframework.org/tags/form' prefix='form': The Tag class 'org.springframework.web.servlet.tags.form.FormTag ' has no setter method corresponding to TLD declared attribute 'cssClass', (JSP 1.1 spec, 5.4.1)  I think ideally the FormTag class would extend from AbstractHtmlElementTag like most of the other tags, but this class in turn extends from AbstractDataBoundFormElementTag, which contains behavior that doesn't apply to the form tag. So I guess you might need to rework the inheritence hierarchy slightly?  I don't need these attributes so as a temporary workaround I removed them from my spring-forms.tld.  ---  **Affects:** 2.0 M5  **Issue Links:** - #6829  tag does not support all documented attributes (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2006-06-12T05:21:09Z","2019-01-12T16:52:11Z"
"","6451","javaScriptEscape in Spring tags doesn't escape  [SPR-1754]","**[Adam Murray](https://jira.spring.io/secure/ViewProfile.jspa?name=adamj)** opened **[SPR-1754](https://jira.spring.io/browse/SPR-1754?redirect=false)** and commented  Browsers parse the \ tag even if it appears inside a string literal in javascript. In other words, the following HTML:  \ \ \ document.write(""\""); \ \ \ is invalid because the \ inside the document.write() will be interpreted as the end of the javascript.  Spring's javaScriptEscape should handle escaping the \ tag to prevent a web page from breaking when someone sends \ as input. Here's a jsp that demonstrates the problem:    \ \ \ \ 	  function drawTextInput(value) { 		  var input = document.createElement(""input""); 		  input.type = ""text""; 		  input.value = value; 		  document.getElementById(""body"").appendChild(input); 	  } 	  drawTextInput('\'); 	  drawTextInput('\'); \ \  If you deploy and browse to this JSP, you can control the text field values with a request parameter named input, like /jstest.jsp?input=foo I put in the  and  versions to show the different behaviors between these two tags. I want the text input value to match the user input, but  escapes it, so I need to use something like the spring tag with javaScriptEscaping. But you'll notice that if you set input=\, it breaks the page. In case you're wondering why I would do this in a real application, I have some dynamic forms with a lot of interactive functionality, and most of the form HTML is conditionally rendered by javascript based on user interactions.  I took a look at the source code, and the fix is very easy. I just added the following condition in JavaScriptUtils.javaScriptEscape() else if (c == '/') { filtered.append(""\\/""); }  This will replace '/' with '\/', which is for the most part equivalent to '/' but has the nice side effect that  will not be interpreted as the end script tag in string literals. You can verify the fix with the JSP above, but here's another one you can use to verify that also demonstrates the new replacement operation does not change the interpreted value of the string literals:    \ \ \ 	  alert(""\\\""); 	  alert(""/"" == ""\/""); 	  alert(""\"" == ""\\\""); \ \ \   --- No further details from [SPR-1754](https://jira.spring.io/browse/SPR-1754?redirect=false)","closed","type: bug,","spring-projects-issues","2006-03-02T12:59:55Z","2019-01-11T22:07:27Z"
"","6018","Add id attribute to form input fields with freemarker macros [SPR-1318]","**[Adam Kramer](https://jira.spring.io/secure/ViewProfile.jspa?name=adamjk)** opened **[SPR-1318](https://jira.spring.io/browse/SPR-1318?redirect=false)** and commented  It would be convenient to have the id attribute added to match the name attribute in form input fields. I don't believe this would be too invasive.  Change the formInput macro to:","closed","type: enhancement,","spring-projects-issues","2005-09-22T06:07:31Z","2005-10-02T09:08:24Z"
"","5970","Freemarker macros with options param (e.g.  formSingleSelect) don't support maps with Character keys [SPR-1268]","**[Adam Kramer](https://jira.spring.io/secure/ViewProfile.jspa?name=adamjk)** opened **[SPR-1268](https://jira.spring.io/browse/SPR-1268?redirect=false)** and commented  If I pass a hashmap into  that has a key of type Character, the macro will say the value lookup is not defined. This happens on the line:  \${options[value]}\ where ${options[value]} will not resolve. It looks like freemarker cannot handle looking up a hash that has Character typed keys, so perhaps this is a freemarker problem.  ---  **Affects:** 1.2.4","closed","status: declined,","spring-projects-issues","2005-08-31T06:25:29Z","2019-01-13T22:50:45Z"
"","5963","Primitive char type does not allow empty with CharacterEditor custom editor [SPR-1261]","**[Adam Kramer](https://jira.spring.io/secure/ViewProfile.jspa?name=adamjk)** opened **[SPR-1261](https://jira.spring.io/browse/SPR-1261?redirect=false)** and commented  I register a CharacterEditor in the initBinder method in my SimpleFormController like so: \binder.registerCustomEditor(Character.TYPE, new CharacterEditor(true));\ to bind a form field to a primitive char type member in my command class. allowEmpty is set to true to allow empty form fields. The binded form field is \private char gender;\  When the field is binding in the setAsText method of the CharacterEditor, it throws an IllegalArgumentException even when the field is empty meaning that it did not set the value to null, but rather checked the input length in \else if (text.length() != 1) { throw new IllegalArgumentException( ""String ["" + text + ""] with length "" + text.length() + "" cannot be converted to char type""); }\  The binding is not working for the char primitive type when the custom editor is set to allow empty/null values.   ---  **Affects:** 1.2.2","closed","in: core,","spring-projects-issues","2005-08-29T05:41:28Z","2019-01-12T16:40:52Z"
"","6542","Resource location placeholders not resolved against system environment variables [SPR-1848]","**[abu butt](https://jira.spring.io/secure/ViewProfile.jspa?name=abu123)** opened **[SPR-1848](https://jira.spring.io/browse/SPR-1848?redirect=false)** and commented  Issue originally raised in spring forums: http://forum.springframework.org/showthread.php?t=23141  After investigation this may be a bug. unable to resolve system properties.  Works if the variable is a jvm property, but not if its a system property.  ---  **Affects:** 2.0 M3  **Attachments:** - [SpringConfigTest.rar](https://jira.spring.io/secure/attachment/11545/SpringConfigTest.rar) (_1.61 MB_) - [test.props](https://jira.spring.io/secure/attachment/11546/test.props) (_10 bytes_)  **Issue Links:** - #6586 Location value on PropertyPlaceholderConfigurer definition does not resolve placeholder if it is a system env (_**""is duplicated by""**_)","closed","type: enhancement,","spring-projects-issues","2006-04-02T12:25:12Z","2019-01-11T22:01:58Z"
"","6066","WebApplicationContexts not published to same key [SPR-1366]","**[aaron.korver@citigroup.com](https://jira.spring.io/secure/ViewProfile.jspa?name=athrawn17)** opened **[SPR-1366](https://jira.spring.io/browse/SPR-1366?redirect=false)** and commented  In the FrameworkServlet.initWebApplicationContext() method the context is published as a servlet context attribute. Below is the relevant code.  Code:  protected WebApplicationContext initWebApplicationContext(){ ... String attrName = getServletContextAttributeName(); getServletContext().setAttribute(attrName, wac); ... } public String getServletContextAttributeName() { return SERVLET_CONTEXT_PREFIX + getServletName(); }  public static final String SERVLET_CONTEXT_PREFIX = FrameworkServlet.class.getName() + "".CONTEXT."";  This is fine, except that when I use the static method  WebApplicationContextUtils.getWebApplicationContext(myServletContext);  to get the context this is the code that gets executed:  public static WebApplicationContext getWebApplicationContext(ServletContext sc) { Object attr = sc.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE); ... }  String ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE = WebApplicationContext.class + "".ROOT"";  Obviously there is a disconnect here. The FrameworkServlet should use the same parameter when setting the servlet context attribute as the Util class is using to obtain it.  Note that the ContextLoader class also uses the ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE when publishing the context.   ---  **Affects:** 1.2.5","closed","status: declined,","spring-projects-issues","2005-10-10T05:28:40Z","2019-01-12T16:29:58Z"
"","6315","MBeanExporter exludedBeans should be sorted [SPR-1618]","**[A. Sabourov](https://jira.spring.io/secure/ViewProfile.jspa?name=asab)** opened **[SPR-1618](https://jira.spring.io/browse/SPR-1618?redirect=false)** and commented  The excludedBeans property of the MBeanExporter instance contains the list of beans that should not be auto-detected by the MBeanExporter if autodetect is set to true. MBeanExporter.isExcluded() function looks for excluded bean names by doing the binary search:  Arrays.binarySearch(this.excludedBeans, beanName) (line726). The binary search works correctly only on sorted arrays. If, in the Spring config file, the bean names that need to be excluded listed unsorted, some of the beans will not be found which leads to errors.  In the example below the plainBeanProxy follows the standardBeanProxy which causes the plainBeanProxy not to be found and leads to another error as a side effect. if plainBeanProxy is placed first, everything is ok.  The possible solution might be to sort excludedBeans when it is assigned.  \ 	\ 		\ 		\ 		\ 		\ 		\ 			\ 				\standardBeanProxy\ 				\plainBeanProxy\ 			\ 		\ 		\ 		\ 			\ 				\ 			\ 		\ 		\ 		\ 			\ 				\ 					\ca.pac.appone.jmx.IJmxPlainBean\ 				\ 			\ 		\ 		\ 		\ 	\           	     		PLAIN-BEAN     	                    	     		STANDARD-BEAN     	                    	     		RAInstrumentation:name=standardBean     	     	     		ca.pac.appone.jmx.JmxStandardBeanMBean     	                    	     		RAInstrumentation:name=plainBean     	     	     		ca.pac.appone.jmx.IJmxPlainBean     	       \ \ \ \RAInstrumentation:name=plainBean\ \RAInstrumentation:name=standardBean\ \ \ \ \   ---  **Affects:** 1.2.6","closed","in: core,","spring-projects-issues","2006-01-16T08:20:48Z","2012-06-19T03:54:15Z"