"#","No","Issue Title","Issue Details","State","Labels","User name","created","Updated"
"","342","AfterReturning Advice is executed even if the return type doesn't match","When using @AfterReturning Advice, if a returning clause was specified, then the advice is only invoked if the returned value is an instance  of the given returning type.   With following configuration, if a method's return type is int.class, the advice is not invoked.  @AfterReturning(pointcut = ""execution(\* *(..))"", returning = ""string"") public void logResult(String string) { }  Following AspectJ semantics, if a return value is null(or return type  is void), then the returnType of target method should be used to  determine whether advice is invoked or not. Also even if return type  is void, if the type of argument declared in advice method is Object, then the advice must be invoked.  That is, With above configuration, after execution of following method the advice should not be invoked. But it is invoked in spring AOP.  public void doSomething() { }  Some contional statement has added into existing code, according to following specification.  http://eclipse.org/aspectj/doc/released/progguide/semantics-advice.html  Thank you.  Issue: SPR-10834","closed","","byungseok","2013-08-22T07:42:52Z","2014-06-16T16:48:38Z"
"","324","Fix for SPR-10714","When packagesToScan property is used with Jaxb2Marshaller, explicitly configured @XmlRegistry annotated classes are not registered with the JAXBContext. The fix is now to additionally scan classes annotated with @XmlRegistry.  Reference: https://jira.springsource.org/browse/SPR-10714  I have signed the CLA.","closed","","bijukunjummen","2013-07-25T03:50:15Z","2014-06-25T12:49:35Z"
"","226","just test","what's this","closed","","lemonzy","2013-01-31T12:16:55Z","2013-01-31T19:41:01Z"
"","273","Support specifying time zone for @Scheduled cron","Using @Scheduled annotation one can declaratively configure desired method execution schedule, via a cron expression. Some of the cron expressions can evaluate to a time zone sensitive value. So far a default Java timezone would always be used, even though a different one might be desired.  This patch adds support for explicitly specifying time zone for which cron expression should be resolved. One does that by configuring new timezone attribute of @Scheduled annotation to ID of desired time zone.  Issue: SPR-10456","closed","","sslavic","2013-04-14T23:54:58Z","2014-08-20T07:36:35Z"
"","305","Improving method validation support for BV 1.1","Updated `MethodValidationPostProcessor` to get the underlying `Validator` so that `forExecutables` can be called if the `LocalValidatorFactoryBean` is the provided validator. This is necessary because `LocalValidatorFactoryBean` does not implement `forExecutables`. This improves support for Bean Validation 1.1.  Issue: SPR-10644","closed","","beamerblvd","2013-06-24T16:52:36Z","2014-06-22T15:26:51Z"
"","301","Support WritableResource property values","Update DefaultResourceLoader to always attempt FileResource resolution before URLResource, allowing casting of the result to WritableResource.  Also update ResourceEditorRegistrar to register a property editor for WritableResources.  Issue:","closed","status: superseded,","philwebb","2013-06-24T06:22:42Z","2021-12-03T10:01:29Z"
"","218","Consider primary attribute with getBean(Class)","Update DefaultListableBeanFactory.getBean(Class beanClass) to consider the 'primary' attribute of bean definitions. This makes getBean() behave in the same way as autowiring.  Issue:","closed","","philwebb","2013-01-23T01:54:35Z","2014-06-14T06:17:43Z"
"","279","Java 7 & java.lang.reflect.Parameter","Unable to compile on Mac OSX using Java 7 (1.7.0_21).  StandardReflectionParameterNameDiscoverer can not resolve class java.lang.reflect.Parameter","closed","","gordonad","2013-04-26T13:48:36Z","2013-04-29T15:39:14Z"
"","345","Fix NPE in JettyRequestUpgradeStrategy","Trivial fix of NPE in `JettyRequestUpgradeStrategy`.","closed","","janm399","2013-08-27T16:05:36Z","2014-06-18T05:12:05Z"
"","212","Mark all IsFastEnough tests as performance tests","This patch marks remaining/missed tests as ones belonging to performance tests group.  Issue: SPR-9984","closed","","sslavic","2013-01-05T22:13:28Z","2014-08-08T14:44:15Z"
"","195","./gradlew build >> :referenceHtmlMulti FAILED  FAILURE: Build failed with an exception.","This is from my PS lines. spring-framework [master]> ./gradlew build :spring-core:asmRepackJar UP-TO-DATE :spring-core:cglibRepackJar UP-TO-DATE :spring-core:compileJava UP-TO-DATE :spring-core:processResources UP-TO-DATE :spring-core:classes UP-TO-DATE :spring-core:jar UP-TO-DATE :spring-beans:compileJava UP-TO-DATE :spring-beans:processResources UP-TO-DATE :spring-beans:classes UP-TO-DATE :spring-beans:jar UP-TO-DATE :spring-aop:compileJava UP-TO-DATE :spring-aop:processResources UP-TO-DATE :spring-aop:classes UP-TO-DATE :spring-aop:jar UP-TO-DATE :spring-expression:compileJava UP-TO-DATE :spring-expression:processResources UP-TO-DATE :spring-expression:classes UP-TO-DATE :spring-expression:jar UP-TO-DATE :spring-instrument:compileJava UP-TO-DATE :spring-instrument:processResources UP-TO-DATE :spring-instrument:classes UP-TO-DATE :spring-instrument:jar UP-TO-DATE :spring-context:compileJava UP-TO-DATE :spring-context:processResources UP-TO-DATE :spring-context:classes UP-TO-DATE :spring-context:jar UP-TO-DATE :spring-tx:compileJava UP-TO-DATE :spring-tx:processResources UP-TO-DATE :spring-tx:classes UP-TO-DATE :spring-tx:jar UP-TO-DATE :spring-jdbc:compileJava UP-TO-DATE :spring-jdbc:processResources UP-TO-DATE :spring-jdbc:classes UP-TO-DATE :spring-jdbc:jar UP-TO-DATE :spring-context-support:compileJava UP-TO-DATE :spring-context-support:processResources UP-TO-DATE :spring-context-support:classes UP-TO-DATE :spring-context-support:jar UP-TO-DATE :spring-oxm:compileJava UP-TO-DATE :spring-oxm:processResources UP-TO-DATE :spring-oxm:classes UP-TO-DATE :spring-oxm:jar UP-TO-DATE :spring-web:compileJava UP-TO-DATE :spring-web:processResources UP-TO-DATE :spring-web:classes UP-TO-DATE :spring-web:jar UP-TO-DATE :spring-orm:compileJava UP-TO-DATE :spring-orm:processResources UP-TO-DATE :spring-orm:classes UP-TO-DATE :spring-orm-hibernate4:compileJava UP-TO-DATE :spring-orm-hibernate4:processResources UP-TO-DATE :spring-orm-hibernate4:classes UP-TO-DATE :spring-orm:jar UP-TO-DATE :spring-webmvc:compileJava UP-TO-DATE :spring-webmvc:processResources UP-TO-DATE :spring-webmvc:classes UP-TO-DATE :spring-web:compileTestJava UP-TO-DATE :spring-web:processTestResources UP-TO-DATE :spring-web:testClasses UP-TO-DATE :spring-webmvc-tiles3:compileJava UP-TO-DATE :spring-webmvc-tiles3:processResources UP-TO-DATE :spring-webmvc-tiles3:classes UP-TO-DATE :spring-webmvc:jar UP-TO-DATE :spring-webmvc-portlet:compileJava UP-TO-DATE :spring-webmvc-portlet:processResources UP-TO-DATE :spring-webmvc-portlet:classes UP-TO-DATE :spring-webmvc-portlet:jar UP-TO-DATE :spring-test:compileJava UP-TO-DATE :spring-test:processResources UP-TO-DATE :spring-test:classes UP-TO-DATE :api UP-TO-DATE :referenceHtmlMulti FAILED  FAILURE: Build failed with an exception. - What went wrong:   Execution failed for task ':referenceHtmlMulti'.      > C:\Documents and Settings\kb9agt\My Documents\GitHub\spring-framework\build\reference-work\xsl\titlepage\spring-html.xsl (Th   > e system cannot find the file specified) - Try:   Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.  BUILD FAILED  Total time: 3 mins 57.407 secs  Need help so I can go on to  ./gradlew install","closed","","DouglasAllen","2012-12-04T17:51:17Z","2019-01-07T19:33:06Z"
"","213","Cleaned up Javadoc in DispatcherServlet","This is a minor change to the javadoc of DispatcherServlet to bring it in line with the changes with Spring 3.1.x+ - there were references to DefaultAnnotationHandlerMapping and AnnotationMethodHandlerAdapter which I have now changed to RequestMappingHandlerMapping and RequestMappingHandlerAdapter respectively  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","bijukunjummen","2013-01-05T23:36:57Z","2014-07-05T09:49:39Z"
"","239","SPR-10329 StringToEnumConvertFactory issue","This is a fix to an issue with the StringToEnumConvertFactory when the class used is getClass() on a value off an enum, where the values have implementations.","closed","","staale","2013-02-25T07:17:01Z","2013-02-25T21:26:58Z"
"","197","org.springframework.validation.DataBinder is using SimpleTypeConverter in a manner that is not thread-safe","This could be a cause for potential issues in any controllers that are using Springs validations","closed","","udgupta","2012-12-06T07:38:17Z","2019-01-07T19:32:48Z"
"","307","Extended test scenario for cached MethodExecutor invocation","This commit extends the unit test for caching MethodExecutors in the SpEL by invoking the same method on different target objects that establish an inheritance relation. Currently this test fails.  Issue SPR-10657","closed","","obecker","2013-06-28T11:26:44Z","2014-06-21T22:59:47Z"
"","293","Add support for MethodExecutor in FunctionReference","This commit enhances FunctionReference to also support MethodExecutor instances for evaluation (besides static java.lang.reflect.Method instances). This enables dynamic SpEL function definitions where the function to be executed is not known at compile time.  Additionally this commit - removes all mentions of lambda function definitions in comments since   they are not implemented - fixes the type name in the message of the thrown   SpelEvaluationException in case the value of the function has the wrong   type and cannot be executed  Issue SPR-10589","closed","in: core,","obecker","2013-05-26T21:13:59Z","2022-02-01T10:06:16Z"
"","338","Bring raw WS support in line with the STOMP messaging structure","This allows me to have STOMP as well as _raw_ web socket unified under the same Spring Messaging structure. This PR includes `SubProtocolHandler` for plain / raw web socket connections.  It also includes modification to the `AnnotationMethodMessageHandler` to allow the users to specify their own `HandlerMethodArgumentResolver`s.  Is this going in the right direction?","closed","","janm399","2013-08-19T11:41:16Z","2013-08-26T10:38:24Z"
"","320","Fixed unit tests failing on Windows","There were several unit tests introduced in SPR-10608 (commit: 2313c9a007fe4c48f11b08806b852ced7fbff13d). Some of these tests fail on Windows because they rely on asserting file names containing forward slashes, which is not platform independent. These failures have now been resolved.  Issues: SPR-10770, SPR-10608","closed","","beamerblvd","2013-07-23T13:58:52Z","2014-06-17T02:46:22Z"
"","290","Ability to create proxy around classes that has no default constructor.","There is some limitations in current proxy instantiation model: 1) class should have default constructor (but sprint supports autowiring constructor arguments for object itself) 2) calling the constructor can cause side-effects 3) if constructor throws an exception proxy will not be created.  Also in current implementation there is serialization problem: if target class implements java.io.Externalizable then no proxy fields will be stored and restored object will be invalid.  Note that proxy does not need to have any valid state at all.  Solution is to use Objenesis library ( http://objenesis.googlecode.com/svn/docs/index.html ). It can instantiate objects without calling any constructor.  For serialization issue proxy should implement java.io.Externalizable and save/restore properties in writeExternal/readExternal methods.","closed","","Fuud","2013-05-24T09:50:35Z","2014-06-25T20:58:15Z"
"","205","Add support for OPTIONS request in the MVC test framework","There is currently no way to handle OPTIONS request in the MVC test framework, as they always handled by the DispatcherServlet.  I added the options static method in the MockMvcRequestBuilder and add added the dispatchOptions flag to the DefaultMockMvcBuilder. The flag defaults to false, as in the DispatcherServlet.  Issue: SPR-10093","closed","","acogoluegnes","2012-12-14T09:18:43Z","2014-06-14T07:04:59Z"
"","292","SPR-10588 Add Infinispan Cache Implementation","There currently is an Ehcache implementation of the cache abstraction. It would be interesting for us to have an Infinispan implementation. This would allow us to use ConcurrentMapCache for tests and the built-in JBoss AS 7 cache in production.  This pull request adds an Infinispan cache implementation modeled after the Ehcache implementation. It contains the following changes - InfinispanCache, adapter from Infinispan cache interface to Spring   cache interface - InfinispanCacheManager, adapter from Infinispan EmbeddedCacheManager   interface to Spring CacheManager interface - InfinispanCacheManagerFactoryBean, factory bean for a   InfinispanCacheManager - InfinispanCacheTests and InfinispanSupportTests, tests - optional dependencies on Infinispan - reference to the JBoss Maven repository  Issue: SPR-10588","closed","","marschall","2013-05-26T12:23:34Z","2014-06-27T09:48:40Z"
"","208","Removed extra ""http:""","The URL did not work.  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","tommack","2012-12-28T19:21:11Z","2012-12-28T21:29:08Z"
"","243","[SPR-8509] Update for Spring OXM Reference, including changes introduced in CastorMarshaller","The Spring reference has been updated, so that it reflects the CastorMarshaller XSD configuration.  Link to Spring JIRA: https://jira.springsource.org/browse/SPR-8509","closed","","jmnarloch","2013-02-28T18:27:59Z","2014-06-30T16:13:17Z"
"","232","Add media types to possible handler method params","The requested media types are now valid arguments for Spring MVC controller methods. They are computed by the ContentNegotiationManager (so using the HTTP Accept header). Controllers can ask for the requested media types by adding a Collection\- or a List-typed method argument.  Issue: SPR-9980  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","acogoluegnes","2013-02-13T10:53:48Z","2020-06-23T12:10:09Z"
"","251","Add additional test for daylight savings glitch","The problem was that clocks go forward _at_ 2am, so 2am doesn't exist once a year.  Users might be surprised that their cron trigger doesn't go off one night, but that is arguably correct (and what happens now).  The test can be  modified if we decide to change the trigger behaviour.","closed","","dsyer","2013-03-10T18:04:15Z","2013-03-11T01:42:27Z"
"","198","Fix excludes from configrations in merge-artifacts.gradle and make jcl-over-slf4j excludes more concise","The overall goal of the two commits in this pull request is to make jcl-over-sl4j excludes more concise.  - In order to do this, a fix to merge-artifacts.gradle was made which ensures exclude rules were transfered from mergeFromProject to mergeIntoProject. - Then we were able to exclude jcl-over-slf4j using excludes in the configurations instead of on each individual module.","closed","","rwinch","2012-12-07T22:33:35Z","2012-12-10T21:36:31Z"
"","204","Fixed JavaDoc for MockRestServiceServer","The JavaDoc for MockRestServiceServer was improperly showing fixed-space font following a code example because the <pre> element didn't have a closing tag. I added a closing </pre> tag to fix.","closed","","habuma","2012-12-14T03:08:27Z","2012-12-14T15:10:16Z"
"","259","Async Request Processing Callable Code Error","The java.util.concurrent.Callable code example in the ""Asynchronous Request Processing"" section had a ""call()"" method return type of ""Object"" when it should be ""String"".","closed","","karlbennett","2013-03-16T00:25:38Z","2014-08-11T15:21:32Z"
"","233","Instantiate a JdbcTemplate with a JDBC connection.","The given connection is wrapped into a SingleConnectionDataSource. The suppressClose flag is accessible in a constructor for flexibility, but another constructor needs only the JDBC connection, and sets the suppressClose flag to true. Most people would use this second constructor.  Issue: SPR-10049  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","acogoluegnes","2013-02-13T14:25:47Z","2014-04-18T14:34:31Z"
"","236","Make StandaloneMockMvcBuilder interface consistent","The exception resolvers can now be set using a setter that expects varargs, just like other infrastructure beans.  Issue: SPR-10279  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","acogoluegnes","2013-02-14T11:16:24Z","2013-02-15T14:43:47Z"
"","266","[SPR-10412] Support generics in JmsTemplate","The `#convertAndSend` and `#receiveAndConvert` methods and the `MessageConverter` interface currently are not type safe. Everywhere `Object` is passed around casts have to be made.  This pull request tries to address the issue by: - split `MessageConverter` into two interfaces, `MessageDecoder` and   `MessageEncoder` so that Java 8 lambdas can be used - add generics to `MessageConverter`, `MessageDecoder` and   `MessageEncoder` - for every `#convertAndSend` method add a new one that has a   `MessageEncoder` as a second argument - for every `#receiveAndConvert` method add a new one that   has a `MessageDecoder` as a second argument - add generics to the new `#convertAndSend` and   `#receiveAndConvert` methods  MessageConverter and MessageDecoder are not be best names but the best ones I could come up with.  Maybe `MessageConverter` and `MessageDecoder` should be annotated with `java.lang.FunctionalInterface` but this would have to be done over the entire code base eg. `org.springframework.jdbc.core.RowMapper`.  As usual, I'm not one hundred percent certain when it comes to wild cards.  And tests are missing.  Issue: SPR-10412 https://jira.springsource.org/browse/SPR-10412","closed","status: declined,","marschall","2013-03-24T22:35:50Z","2021-11-19T09:00:49Z"
"","280","[#SPR-8108] Replace all  with  in JavaDoc","Submit this change as I felt it was a good place to start for my first time contributing to an open source project and new to jira/git.  I have read the guidelines for contributing to this project but let me know if I have not followed the process correctly.  Issue: SPR-8108  Note: I have submitted the CLA.","closed","","adriandoyle","2013-04-27T00:16:07Z","2013-10-11T16:46:23Z"
"","256","Eliminate JavaDoc generation warnings","Spring JavaDoc generation used to produce several warnings due to few broken external API JavaDoc links in Gradle build script, and a few errors in Spring JavaDoc itself.  This patch eliminates mentioned JavaDoc generation warnings.  Issue: SPR-10373","closed","","sslavic","2013-03-14T01:54:59Z","2014-07-05T19:53:34Z"
"","321","diagnose View Rendering exceptions in DispatcherServlet.render()","SPR-10340 proposed fix  Diagnose View-rendering, JSP exceptions etc in DispatcherServlet.render(). There is already existing DEBUG logging before rendering the view, so it is a minor & sensible improvement to log any failure that then occurs.  This is logged at DEBUG level to avoid interfering with existing production logging, but provide necessary diagnostic information during software development/ engineering.  Discussing with Rossen Stoyanchev -- I note the other option of a flag in AbstractView or JstlView, but there is no very easy way to configure such a flag, since these are created from UrlBasedViewResolver, with limited knowledge of View subclasses & only partial coverage of View & Resolver subtypes. There is the possibility for the developer to define a bean-factory BeanPostProcessor, but this seems very  unlikely to be in effect by default.  My suggestion would therefore be to augment the existing 'DEBUG' logging in DispatcherServlet to include reporting View rendering exceptions, similar to how many other conditions (Controller exceptions & forwarding to error views, HandlerInterceptor exceptions) are already logged.","closed","","twhitmorenz","2013-07-24T02:40:58Z","2013-07-24T13:21:21Z"
"","214","Detect split packages at build time","Split packages are a well-known anti-pattern for OSGi and a blocker for Eclipse Virgo (which prevents split packages being accessed via its Import-Library construct).  Split packages are also unhelpful with a traditional linear classpath as a split package name does not uniquely identify the Spring framework JAR from which it came, thus complicating problem diagnosis and maintenance.  Juergen Hoeller supports this position in the following comment in SPR-9990:  > FWIW, I generally find split packages a bad practice, even without > OSGi in the mix. For the Spring Framework codebase, I consider a > split-package arrangement a design accident that we want to detect > in any case - and that we're willing to fix if it happened. >  > I'm actually equally concerned about the source perspective: After > all, we want a package to be comprehensible from a single glance > at the project, not requiring the developer to jump into several > source modules to understand the overall layout of a package.  Split packages have crept into Spring framework twice in recent months (see SPR-9811 and SPR-9988). Currently, they are only detected once the Spring framework has been converted to OSGi bundles and these bundles have been tested with Eclipse Virgo.  This pull request adds a build-time check for split packages to the Spring framework build. It allow packages to be split across projects which will be merged into a single JAR file. It makes split package detection a dependency of the 'check' task, which is idiomatic gradle as well as allowing the 'test' task (another dependency of 'check') to be executed without split packages being detected.  The split package detection logic is structured as a gradle plugin. Thanks to Rob Winch for contributing the corresponding commit in this pull request.  The project spring-instrument-tomcat is omitted from the split package check on the basis of SPR-10150. If SPR-10150 is fixed, the project should be added back into the list of projects to check. This has been noted in SPR-10150.  Issues: SPR-9990, SPR-10150  No CLA is necessary for the authors of the commits in this pull request since they are employees of VMware Inc.","closed","","glyn","2013-01-07T14:59:34Z","2014-07-01T23:32:28Z"
"","286","Replace MaxPermSize use in build scripts","Since JDK 8 is required to build Spring framework 4, and permanent generation is gone from Java 8, to eliminate warnings about no longer available MaxPermSize switch, it should be removed or replaced with new MaxMetaspaceSize switch.  This fix replaces old with new switch to limit the amount of native memory used for class metadata.  Issue: SPR-10571","closed","","sslavic","2013-05-18T23:01:37Z","2014-06-27T21:23:00Z"
"","348","for SPR-7093","Signed-off-by: sivaprasadvalluru sivaprasad.valluru@gmail.com","closed","","sivaprasadvalluru","2013-08-28T16:35:52Z","2014-10-07T14:09:21Z"
"","323","Make BeanFactoryMCDR BeanFactoryAware","SI's BeanFactoryChannelResolver was BeanFactoryAware. This commit brings Spring's BeanFactoryMessageChannelDestinationResolver into line with the old SI class.","closed","","wilkinsona","2013-07-24T14:48:41Z","2013-07-24T20:48:23Z"
"","303","Fixed potential NullPointerException in SharedEntityManagerCreator.","SharedEntityManagerCreator.createSharedEntityManager(EntityManagerFactory, Map, boolean) now correctly forwards an empty array in case the EntityManagerFactoryInfo returns null for the call to ….getEntityManagerInterface().  Previously the varargs invocation had turned null into an array with a null value which caused a NullPointerException in the call to Proxy.newProxyInstance(…) further down the call stack  Issue: SPR-10678","closed","","odrotbohm","2013-06-24T14:32:28Z","2014-06-25T12:49:28Z"
"","330","Make it possible to configure serialization inclusion for Jackson ObjectMapper (SPR-10810)","See [SPR-10810](https://jira.springsource.org/browse/SPR-10810) for details.","closed","","dmak","2013-08-06T16:57:43Z","2014-06-24T09:08:07Z"
"","334","Correct delegation for canRead/canWrite.","See [SPR-10463](https://jira.springsource.org/browse/SPR-10463) for more information. [pull#306](https://github.com/SpringSource/spring-framework/pull/306) should be cancelled.","closed","","dmak","2013-08-13T16:12:42Z","2014-06-13T09:29:43Z"
"","306","Correct delegation for canRead/canWrite. Support for multiple marshallers/unmarshallers.","See [SPR-10463](https://jira.springsource.org/browse/SPR-10463) for more information.","closed","","dmak","2013-06-24T18:36:01Z","2014-06-14T12:57:49Z"
"","313","removed unused dependency from spring-instrument","see [molindo-instrument](https://github.com/molindo/molindo-instrument) to verify","closed","","sfussenegger","2013-07-10T14:59:31Z","2013-07-24T07:26:39Z"
"","253","Document @Bean 'lite' mode vs @Configuration","Rework the reference documentation to better distinguish the differences between @Bean methods used in @Comonent vs @Configuration classes. The 'Using the @Bean annotation' section now only covers concepts applicable when using @Bean methods in @Configuration _or_ @Component classes. Information only applicable to @Configuration classes has been moved to a new  'Using the @Configuration annotation' section.  An additional sidebar section attempts to explain the differences between the two approaches.  Issue:","closed","","philwebb","2013-03-13T05:22:24Z","2014-06-15T08:08:40Z"
"","341","SPR-10851: Clean stack trace from SQLExceptionTranslator","Removed error-irrelevant translation stack frames from exception stack trace after exceptions were created by an SQLExceptionTranslator.  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","raphw","2013-08-21T15:54:37Z","2022-02-18T19:10:59Z"
"","340","Clean up stack trace before rethrowing JDBC exceptions handled by AbstractFallbackSQLExceptionTranslator","Removed error-irrelevant translation stack frames from exception stack trace after exceptions were created by an AbstractFallbackSQLExceptionTranslator:  When debugging Spring-JDBC entires, I find it distracting that the top entries always refer to an AbstractFallbackSQLExceptionTranslator which is only called after an error occured and which simply translates a ""raw"" exception into a richer exception. Therefore, I suggest that these stack entries are removed before the enriched exception is rethrown by the JdbcTemplate.  It is a detail, but I believe the exception stack trace should not polluted with details that merely reflect an implementation detail.","closed","","raphw","2013-08-21T12:47:01Z","2014-07-21T14:41:06Z"
"","270","[SPR-7966] Improve failure mode when depends-on cycle exists","Related to spring jira issue SPR-7966(https://jira.springsource.org/browse/SPR-7966)  In circular 'depends-on' relation, BeanCreationException will occur instead of StackOverflowError with this pull request.  example> org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'bean3': Beans with name 'bean2' and 'bean3' are dependent in circular manner; consider removing 'depends-on' attribute from one of them.","closed","","ghost","2013-04-08T03:51:36Z","2013-04-25T09:12:42Z"
"","219","SPR-7827 - first support for meta-annotations in integration test","related to issue: https://jira.springsource.org/browse/SPR-7827  prior this commit, there was no support for meta-annotations in the Spring Intergation tests, now the @ContextConfiguration annotation is searched also in meta-annotations.  Eg: you can write:  ``` java @ContextConfiguration([...]) // config for HSQLDB environment public @interface InRamEnvironment ```  ``` java @ContextConfiguration([...]) // config for common-core part public @interface CommonCoreIntegrationTest ```  ``` java @CommonCoreIntegrationTest @InRamEnvironment public class OneBatchTest {  [...] // actual test methods } ```","closed","","giovannidalloglio","2013-01-24T18:05:18Z","2014-06-13T11:29:11Z"
"","201","first support for meta-annotations for the integration tests","related to issue: https://jira.springsource.org/browse/SPR-7827  prior this commit, there was no support for meta-annotations in the Spring Intergation tests, now the @ContextConfiguration annotation is searched also in meta-annotations.  Eg: you can write:  ``` java @ContextConfiguration([...]) // config for HSQLDB environment public @interface InRamEnvironment ```  ``` java @ContextConfiguration([...]) // config for common-core part public @interface CommonCoreIntegrationTest ```  ``` java @CommonCoreIntegrationTest @InRamEnvironment public class OneBatchTest {  [...] // actual test methods } ```","closed","","giovannidalloglio","2012-12-11T17:35:37Z","2014-07-08T04:10:50Z"
"","245","Do not use Servlet 3.0 API in doOptions()","Refactor FrameworkServlet.doOptions() to capture the ""Allow"" header by using a HttpServletResponseWrapper.  Prior to this commit the HttpServletResponse.getHeader() method was used which is only available in Servlet 3.0 environments.  Issue:","closed","","philwebb","2013-03-01T01:54:00Z","2014-06-28T18:59:39Z"
"","287","Eliminate Gradle 1.6 deprecation warnings","Recently Spring framework build has been updated to use Gradle 1.6. With the new version some of the Gradle APIs have been deprecated. These deprecated APIs have been used by Spring build specific Gradle plugins, which resulted in deprecation warnings in build output.  This patch changes Spring build specific Gradle plugins to use new Gradle APIs instead of deprecated ones.  Even after this change build still produces warnings about Gradle deprecated APIs being used. These come from Spring shared Gradle plugins and other 3rd party Gradle plugins in use, like Gradle Artifactory Plugin (GAP), which are still not updated to Gradle 1.6. Related tickets for updating of these plugins to Gradle 1.6 are GRADLE-53 and GAP-144, and once they get resolved Spring framework build should further be updated.  Issue: SPR-10572","closed","","sslavic","2013-05-19T16:10:26Z","2014-06-12T21:09:00Z"
"","248","Fix scope of model attributes when including JSP","Prior to this commit, setting model attribute in controller of included JSP would result in overwriting the value in parent model if the set value was null.  This is because the method DispatcherServlet.restoreAttributesAfterInclude restores after include only those attributes that are currently present in request, but setting the value to null in child controller leads to removing of the attribute from request.  Now the removed attributes are added back after include.  Issue: SPR-10360  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","backslash47","2013-03-07T15:54:05Z","2013-03-11T14:35:12Z"
"","277","Add support for @Parameters in SpringJUnit4ClassRunner","Prior to this commit, it was not possible to use JUnit's @Parameters annotation in a test that runs within the Spring TestContext framework, in order to run each test multiple times with values defined by the invocation of the @Parameters static method, as it is the case with JUnit's Parameterized runner.  This commit introduces such support, by delegating either to a parameters-aware spring runner, or to the standard Spring runner, depending on the presence or absence of a public static method annotated with @Parameters.  SpringJUnit4ClassRunner now just makes the decision and delegates to another runner. The code that was once in SpringJUnit4ClassRunner is now in a package-protected internal runner (InternalSpringJUnit4ClassRunner), which is used either directly or through the package-protected, parameters-aware spring runner (SpringJUnit4ParameterizedClassRunner).  The TestContextManager is created once and reused for each set of parameters. If @IfProfileValue is present on the class level and the criteria is not matched, the TestContextManager is not created, other annotations (@ContextConfiguration, @TestExecutionListeners) are not parsed, and the test class is immediately ignored.  @BeforeClass/@AfterClass methods and TestExecutionListener's beforeTestClass/afterTestClass methods are each executed once for a parameterized test class.  Issue: SPR-5292  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.  Gaëtan","closed","status: duplicate,","gpitteloud","2013-04-22T09:54:38Z","2019-02-22T14:15:13Z"
"","285","Add method that execute batch update by named param","Prior to this commit, BatchSqlUpdate class didn't override  updateByNamedParam() method but overrided update() method only.  Now BatchSqlUpdate class support both method. This change would make BatchSqlUpdate class more consistent because parent SqlUpdate class supports both method.  To add new method, existing codes from SqlUpdate class and  BatchSqlUpdate class were reused.  Issue: SPR-10435","open","in: data,","teddyjoo","2013-05-15T01:01:35Z","2021-11-12T13:56:31Z"
"","247","Provide support for context hierarchies in the TCF","Prior to this commit the Spring TestContext Framework supported creating only flat, non-hierarchical contexts. There was no easy way to create contexts with parent-child relationships.  This commit addresses this issue by introducing a new @ContextHierarchy annotation that can be used in conjunction with @ContextConfiguration for declaring hierarchies of application contexts, either within a single test class or within a test class hierarchy. In addition, @DirtiesContext now supports a new 'hierarchyMode' attribute for controlling context cache clearing for context hierarchies. - Introduced a new @ContextHierarchy annotation. - Introduced 'name' attribute in @ContextConfiguration. - Introduced 'name' property in ContextConfigurationAttributes. - TestContext is now aware of @ContextHierarchy in addition to   @ContextConfiguration. - Introduced findAnnotationDeclaringClassForTypes() in AnnotationUtils. - Introduced resolveContextHierarchyAttributes() in ContextLoaderUtils. - Introduced buildContextHierarchyMap() in ContextLoaderUtils. - @ContextConfiguration and @ContextHierarchy may not be used as   top-level, class-level annotations simultaneously. - Introduced reference to the parent configuration in   MergedContextConfiguration and WebMergedContextConfiguration. - Introduced overloaded buildMergedContextConfiguration() methods in   ContextLoaderUtils in order to handle context hierarchies separately   from conventional, non-hierarchical contexts. - Introduced hashCode() and equals() in ContextConfigurationAttributes. - ContextLoaderUtils ensures uniqueness of @ContextConfiguration   elements within a single @ContextHierarchy declaration. - Introduced CacheAwareContextLoaderDelegate that can be used for   loading contexts with transparent support for interacting with the   context cache -- for example, for retrieving the parent application   context in a context hierarchy. - TestContext now delegates to CacheAwareContextLoaderDelegate for   loading contexts. - Introduced getParentApplicationContext() in MergedContextConfiguration - The loadContext(MergedContextConfiguration) methods in   AbstractGenericContextLoader and AbstractGenericWebContextLoader now   set the parent context as appropriate. - Introduced 'hierarchyMode' attribute in @DirtiesContext with a   corresponding HierarchyMode enum that defines EXHAUSTIVE and   CURRENT_LEVEL cache removal modes. - ContextCache now internally tracks the relationships between contexts   that make up a context hierarchy. Furthermore, when a context is   removed, if it is part of a context hierarchy all corresponding   contexts will be removed from the cache according to the supplied   HierarchyMode. - AbstractGenericWebContextLoader will set a loaded context as the   ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE in the MockServletContext when   context hierarchies are used if the context has no parent or if the   context has a parent that is not a WAC. - Where appropriate, updated Javadoc to refer to the   ServletTestExecutionListener, which was introduced in 3.2.0. - Updated Javadoc to avoid and/or suppress warnings in spring-test. - Suppressed remaining warnings in code in spring-test.  Issue: SPR-5613, SPR-9863","closed","","sbrannen","2013-03-07T01:01:33Z","2014-07-14T02:14:34Z"
"","234","Add ServletContextPropertyUtils","Prior to this commit the Log4JWebConfigurer used the SystemPropertyUtils to resolve placeholders. The ServletContextPropertyUtils adds the ability to use the ServletContext to resolve placeholders as well.  The usecase for this is that we use a ServletContextListener to dynamically add some init-parameters to the ServletContext, those are needed to determine the location of the LOG4J configuration file.  Issue: 10284  I've signed the CLA.","closed","","mdeinum","2013-02-13T21:39:07Z","2013-02-15T16:59:51Z"
"","249","UriComponentsBuilder now parses empty fragment correctly.","Previously, UriComponentsBuilder.fromUriString(…) threw an exception in case an empty fragment was provided (e.g. /example#). Added a check for  an empty fragment and prevent the invocation of fragment(…).  Issue: SPR-10363","closed","","odrotbohm","2013-03-08T16:38:25Z","2014-06-19T00:48:50Z"
"","349","Use correct header for version in CONNECTED frame","Previously, the negotiated version was included in the CONNECTED frame using the `accept-version` header. This is incorrect – it should be `version` header that's used.  I think this one's worth fixing for M3.","closed","","wilkinsona","2013-08-29T08:41:02Z","2014-06-14T01:25:49Z"
"","346","Restore method signatures on MediaType","Previously the method signatures for includes and isCompatibleWith were incompatible with Spring 3.2.x since the argument was now MimeType. This caused NoSuchMethodError to be thrown when a class was compiled against MediaType from Spring 3.2.x and ran against MediaType from Spring 4.x.  This commit restores the signatures and implements each method by invoking the super class method.  Issue: SPR-10860","closed","","rwinch","2013-08-27T19:38:53Z","2013-08-27T20:00:35Z"
"","199","Make DeferredResult extensible","Previously it was combersome to associate data or behavior to a DeferredResult because it was marked as final and had no extension points.  Now DeferredResult is non-final which allows subclasses to associate additional data and behavior to it.  Issue: SPR-10059","closed","","rwinch","2012-12-10T19:19:55Z","2014-06-14T13:39:08Z"
"","192","Add beforeConcurrentHandling support","Previously it CallableProcessingInterceptor did not have support for capturing the state of the original Thread just prior to processing. This made it difficult to transfer the state of one Thread (i.e. ThreadLocal) to the Thread used to process the Callable.  This commit adds a new method to CallableProcessingInterceptor named beforeConcurrentHandling which will be invoked on the original Thread used to submit the Callable just prior to the Callable being submitted for processing. This means the state of the original Thread can be captured in beforeConcurrentHandling and transfered to the new Thread in preProcess.  Issue: SPR-10052","closed","","rwinch","2012-11-28T20:46:12Z","2012-11-29T22:23:05Z"
"","194","Add beforeConcurrentHandling support","Previously CallableProcessingInterceptor and DeferredResultProcessingInterceptor did not have support for capturing the state of the original Thread just prior to processing. This made it difficult to transfer the state of one Thread (i.e. ThreadLocal) to the Thread used to process the Callable.  This commit adds a new method to CallableProcessingInterceptor and DeferredResultProcessingInterceptor named beforeConcurrentHandling which will be invoked on the original Thread used to submit the Callable or DeferredResult. This means the state of the original Thread can be captured in beforeConcurrentHandling and transfered to the new Thread in preProcess.  Issue: SPR-10052","closed","","rwinch","2012-11-29T22:36:06Z","2012-11-30T16:13:16Z"
"","203","Rm buildSrc/src/main/groovy from Eclipse Sources","Previously buildSrc/src/main/groovy was a source folder within Eclipse. This caused build errors due to missing dependencies for Gradle.  This commit removes buildSrc/src/main/groovy from the source folders within Eclipse to prevent errors from being displayed.","closed","","rwinch","2012-12-12T18:31:02Z","2013-10-04T22:34:35Z"
"","350","Post SPR-8804 optimizations: better use of HC 4.3 APIs","Post SPR-8804 optimizations: better use of HC 4.3 APIs  Issue SPR-10869","closed","","ok2c","2013-08-29T11:39:23Z","2014-07-31T03:21:21Z"
"","347","Post SPR-8804 minor code tweaks","Post SPR-8804 minor code tweaks in HTTP request factories based on Apache HttpClient and Apache HttpAsyncClient. Most of the changes are related to the use of new HttpClient 4.3 configuration APIs.  Issue SPR-10869","closed","","ok2c","2013-08-28T12:19:24Z","2014-07-20T16:59:22Z"
"","308","Add MemorySafeUndeclaredThrowableStrategy","Port the latest unreleased UndeclaredThrowableStrategy implementation from cglib to fix a memory-leak present in v3.  Issue:","closed","","philwebb","2013-07-02T22:07:00Z","2013-08-29T01:18:50Z"
"","304","SPR-10550 - Assign lowest priority to ""/**"" in AntPathMatcher","Normally the pattern ""/**"" is used to handle the requests that don't match any of the other Servlet requests, therefore its priority should be the lowest. This is a problem when there is a URI pattern with 3 or more PathVariable (i.e ""/matches/{matchId}/periods/{periodId}/teams/{teamId}/results"") then the default URI (""/**"") takes precedence because the method compare is giving higher priority to the patterns with less brackets ""{}"" and wildcards ""*"". Issue fixed adding a special treatment like the one null has.  Issue:SPR-10550","closed","","antonio-marrero","2013-06-24T15:45:04Z","2014-06-21T19:26:23Z"
"","289","3.2.3.RELEASE introduces bug determining bean name from annotation","New in `3.2.3.RELEASE` there is a bug in how Spring determines bean names from annotations.  The annotation that is causing the issue looks like:  ```java @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.TYPE) @Component public @interface ConfigurationAnalyzer {      ConfigurationType[] value(); } ```  Based on the stack trace generated by the bug, it's pretty straight forward where [things are going wrong](https://github.com/SpringSource/spring-framework/blob/v3.2.3.RELEASE/spring-context/src/main/java/org/springframework/context/annotation/AnnotationBeanNameGenerator.java#L91).  ```plain  java.lang.ClassCastException: [L.ConfigurationType; cannot be cast to java.lang.String     at org.springframework.context.annotation.AnnotationBeanNameGenerator.determineBeanNameFromAnnotation(AnnotationBeanNameGenerator.java:91)     at org.springframework.context.annotation.AnnotationBeanNameGenerator.generateBeanName(AnnotationBeanNameGenerator.java:69)     at org.springframework.context.annotation.ClassPathBeanDefinitionScanner.doScan(ClassPathBeanDefinitionScanner.java:246)     at org.springframework.context.annotation.ComponentScanAnnotationParser.parse(ComponentScanAnnotationParser.java:123)     at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:191)     at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:165)     at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:140)     at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:282)     at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:223)     at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:630)     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:461)  ```","closed","","nebhale","2013-05-22T13:33:46Z","2019-01-13T09:01:03Z"
"","227","SPR-10250 - BufferedImageHttpMessageConverter redefine content type of HttpOutputMessage","More details here: https://jira.springsource.org/browse/SPR-10250  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","status: superseded,","kpankowski","2013-02-01T09:12:33Z","2021-11-15T12:03:19Z"
"","314","SPR-10650: Minor documentation fix","Minor java documentation fix for SPR-10650 - https://jira.springsource.org/browse/SPR-10650  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","bijukunjummen","2013-07-10T20:25:34Z","2013-08-27T13:01:33Z"
"","231","Fix a few typos","Minor changes to fix typos. Small adjustment to add a couple commas.  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","carsonmcdonald","2013-02-12T13:58:46Z","2014-06-27T17:47:09Z"
"","242","Typo fixes.","Minor changes to fix typos.  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","carsonmcdonald","2013-02-28T12:38:16Z","2013-03-01T00:03:18Z"
"","237","Typo fixes","Minor changes to fix typos.  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","carsonmcdonald","2013-02-20T13:45:16Z","2013-02-21T18:38:46Z"
"","267","SPR-10422 Updated the methodReference","MethodReference nodes we miss a method to get method name out of it (while there is a private member for the same)","closed","","SimplyAmuthan","2013-03-28T05:37:47Z","2014-04-18T14:38:24Z"
"","217","Use parameter names during MBeanInfo assembly","MBean parameter names behaviour - should use class debug info (LocalVariableTable) when available to expose meaningful parameter names - AbstractReflectiveMBeanInfoAssembler  Issue: SPR-9985  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","davidboden","2013-01-22T00:20:09Z","2013-01-23T13:47:47Z"
"","325","Fix SimpleJdbc{Call,Insert} Javadoc","Just few documentation fixes.  Change ""fluid"" interface to ""fluent"" (which is a proper word to use - see http://en.wikipedia.org/wiki/Fluent_interface), change ""string"" to ""chain"" (which is more appropriate here), plus fix few typos in Javadoc.","closed","","Xaerxess","2013-07-29T16:56:31Z","2014-07-02T09:24:20Z"
"","291","SPR-10579: Make CommandLinePropertySource enumerable","JOpt 4.4 has enumerable options, so this change can be made if we upgrade. The only awkward thing is that JOpt allows aliases for options, so we have to pick one to avoid double counting. This implementation picks the last one in the list which is the alphebtically last of the long options, if there are any (e.g. ""o1"", ""option1"" returns ""option1""). Most of the time there will only be one or two aliases for each option so it won't matter.","closed","","dsyer","2013-05-24T09:57:59Z","2013-05-28T11:53:30Z"
"","269","Fix missing font for JasperReports tests on Linux","JasperReports dependency has been upgraded to 5.0.4 as one of the improvements coming with Spring 4.0. New JasperReports checks for presence of fonts that reports use and throws JRFontNotFoundException if either is not found. Before this fix mentioned exception was being thrown from Spring tests verifying JasperReports support since they reference Arial font which is not available by default on Linux distributions. This caused build failures on Linux environments.  Issue can be solved by packaging font with report, using JasperReports font extension support. Other way to handle this is by configuring JasperReports to ignore missing font and fallback to what is available.  This patch fixes the issue by configuring JasperReports in Spring tests to ignore missing font. It is chosen for practicallity, and because actual report layout in existing unit tests is not of importance.  Issue: SPR-10438","closed","","sslavic","2013-04-02T23:23:43Z","2014-06-13T06:11:53Z"
"","260","Remove default for LifecycleGroup.lifecycleBeans","It is overwritten by the constructor and thus unused. Since the value is never modified, it is now final.  Issue: SPR-10388  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","dharkness","2013-03-16T07:31:47Z","2014-06-25T12:49:20Z"
"","302","Define a zero argument constructors for StandardServletAsyncWebRequest.","Issue: SPR-10676","closed","","onagano-rh","2013-06-24T09:57:20Z","2014-07-07T09:53:16Z"
"","265","[SPR-10394] Typo in Code Example","Issue: SPR-10394  I've submitted CLA.","closed","","nkukhar","2013-03-24T01:22:11Z","2014-07-06T05:54:14Z"
"","216","Fixing an issue with Tiles 3 Integration","Issue: SPR-10195  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","alan125","2013-01-20T14:44:43Z","2014-06-12T19:45:37Z"
"","335","Update expressions.xml","In the given example the expression using the Elvis operator will return ""Nikola Tesla"" and not ""Mike Tesla"".","closed","","clemp6r","2013-08-14T14:34:27Z","2013-08-28T21:18:09Z"
"","207","spring 3.2 ContentNegotiatingViewResolver setMediaTypes not work!!!","In Spring 3.2 ContentNegotiatingViewResolver: public void setMediaTypes(Map mediaTypes) {         if (mediaTypes != null) {             this.cnManagerFactoryBean.getMediaTypes().putAll(mediaTypes);         }     }  But cnManagerFactoryBean.getMediaTypes() required Type :Map :(  Caused by: java.lang.ClassCastException: java.lang.String incompatible with org.springframework.http.MediaType     at org.springframework.web.accept.MappingMediaTypeFileExtensionResolver.(MappingMediaTypeFileExtensionResolver.java:56) ~[spring-web-3.2.0.RELEASE.jar:3.2.0.RELEASE]     at org.springframework.web.accept.AbstractMappingContentNegotiationStrategy.(AbstractMappingContentNegotiationStrategy.java:42) ~[spring-web-3.2.0.RELEASE.jar:3.2.0.RELEASE]     at org.springframework.web.accept.PathExtensionContentNegotiationStrategy.(PathExtensionContentNegotiationStrategy.java:74) ~[spring-web-3.2.0.RELEASE.jar:3.2.0.RELEASE]     at org.springframework.web.accept.ServletPathExtensionContentNegotiationStrategy.(ServletPathExtensionContentNegotiationStrategy.java:47) ~[spring-web-3.2.0.RELEASE.jar:3.2.0.RELEASE]","closed","","qxo","2012-12-28T02:47:35Z","2012-12-31T14:38:55Z"
"","244","Fix FreeMarker form checbox macro generated names","In Spring 3.2 a fix was implemented for all Spring Freemarker form macros so that generated form input fields have valid bracketless IDs. In the fix a regression was introduced manifesting in formCheckbox macro no longer generating appropriate names for checkbox and hidden input field.  This change fixes mentioned regression issue.  Issue: SPR-8732","closed","","sslavic","2013-02-28T23:37:50Z","2013-03-01T21:32:48Z"
"","275","SpringValidatorAdapter regression in 3.2.2 for @NotNull on nested property paths","In Spring 3.1.2.RELEASE the validation framework return a nice validation message for nested properties violating `@NotNull`. In Spring 3.2.2.RELEASE, the same request now throws a NotReadablePropertyException because it is now calling bindingResult.getRawFieldValue(field).  I've included a stripped down version of our request object. We are do not have getters/setters defined as we have a rather large data structure with no behaviors and JAXB works just fine with that. In the snippet, I set up the ConstraintViolation object with values I pulled a debug session.  import javax.validation.ConstraintViolation; import javax.validation.Path; import javax.validation.Valid; import javax.validation.constraints.NotNull; import javax.validation.metadata.ConstraintDescriptor;  import org.hibernate.validator.internal.engine.PathImpl;  public class SpringValidatorAdapter312vs322 { public static void main(String[] args) { Request request = new Request(); request.foo = ""bar""; request.nested = new Request.Nested(); request.nested.name = null;  ```     // From: protected void processConstraintViolations(Set violations, Errors errors)      ConstraintViolation violation = new ConstraintViolationTest(request);     String field = violation.getPropertyPath().toString();     Object invalidValue = violation.getInvalidValue();      boolean getRawFieldValueSpring312 = false;     if (!"""".equals(field) && (invalidValue == violation.getLeafBean())) {         // bean constraint with property path: retrieve the actual property value         // invalidValue = bindingResult.getRawFieldValue(field);         getRawFieldValueSpring312 = true;     }     // Spring 3.1.2 sets String[] errorCodes = [NotNull.request.nested.name, NotNull.nested.name, NotNull.name, NotNull]      boolean getRawFieldValueSpring322 = false;     if (!"""".equals(field) && ((invalidValue == violation.getLeafBean()) || (field.contains(""."") && !field.contains(""[]"")))) {         // Possibly a bean constraint with property path: retrieve the actual property value.         // However, explicitly avoid this for ""address[]"" style paths that we can't handle.         // invalidValue = bindingResult.getRawFieldValue(field);         getRawFieldValueSpring322 = true;         // Spring 3.2.2 throws NotReadablePropertyException     }      System.out.println(String.format(""getRawFieldValueSpring312: %b"", getRawFieldValueSpring312));     System.out.println(String.format(""getRawFieldValueSpring322: %b"", getRawFieldValueSpring322));     System.out.println(String.format(""312 equals 322: %b"", (getRawFieldValueSpring312 == getRawFieldValueSpring322))); } ```  }  class Request { `@NotNull` public String foo;  ``` @NotNull @Valid public Nested nested;  public static class Nested {     @NotNull     public String name; } ```  }  class ConstraintViolationTest implements ConstraintViolation { private Request request;  ``` public ConstraintViolationTest(Request rootBean) {     this.request = rootBean; }  public String getMessage() {     return null; }  public String getMessageTemplate() {     return null; }  public Request getRootBean() {     return request; }  public Class getRootBeanClass() {     return (Class) request.getClass(); }  public Object getLeafBean() {     return request.nested; }  public Path getPropertyPath() {     return PathImpl.createPathFromString(""request.nested.name""); }  public Object getInvalidValue() {     return request.nested.name; }  public ConstraintDescriptor getConstraintDescriptor() {     return null; } ```  }","closed","","nniesen","2013-04-18T19:10:01Z","2019-01-13T09:01:06Z"
"","246","Add ActiveProfileResolver and 'resolver' attribute to @ActiveProfiles (SPR-10338)","Implementation of https://jira.springsource.org/browse/SPR-10338 previously discussed here - https://github.com/SpringSource/spring-framework/issues/240  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.  Updated code, javadoc, reference manual, changelog  If it will hard to merge I may resubmit later.  ![Javadoc 1](https://f.cloud.github.com/assets/2277142/222024/c2727400-85b0-11e2-9e61-04acda76ba5e.PNG) ![Javadoc 2](https://f.cloud.github.com/assets/2277142/222028/c69619c4-85b0-11e2-88f8-f04878161b68.PNG) ![Reference manual](https://f.cloud.github.com/assets/2277142/222029/cb4aa4ee-85b0-11e2-9e7c-a91becdf0cc5.PNG)  Issue: SPR-10338","closed","","michail-nikolaev","2013-03-05T16:22:24Z","2014-06-25T20:58:22Z"
"","294","SimpleJdbcCall: Function return type (REF CURSOR) should be resolved properly.","If you need to call Oracle function like this: `function get_foo() return ref cursor;` you will get java.sql.SQLException: Invalid column type: 1111  For regular parameters (not for return type) there is a workaround for ref cursor (see CallMetaDataContext.java:394)  I have done this also for return type.","closed","","Fuud","2013-05-30T12:21:56Z","2014-06-27T08:55:36Z"
"","262","Using @Schedule under load balanced enivornment","I'm using Spring's `@Schedule` to fire events off at a particular time. I'm running into an issue where the same job gets executed multiple times due to the application being deployed to multiple machines.  I haven't been able to locate any type of clustering functionality as part of Spring. Is there something that can solve this problem? I'd like to avoid having to move to Quartz as I don't have the time to rewrite code.","closed","","crshovrd","2013-03-20T02:35:13Z","2019-01-07T19:32:38Z"
"","211","Use parameter names during MBeanInfo assembly","I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","davidboden","2013-01-05T21:06:09Z","2014-07-18T01:23:21Z"
"","225","nosummary","i don't know","closed","","lemonzy","2013-01-31T11:57:44Z","2013-01-31T11:58:48Z"
"","276","[SPR-9719] Improve TypeUtils.isAssignable recognize TypeVariable types","I add th code in TypeUtils and TypeUtilsTest.  In isAssignable method, the case when parameter is TypeVariable is added.  This is reported in Jira SPR-9719: TypeUtils.isAssignable does not recognize TypeVariable types  After checking if lhsType is instanceof Class, rhsType will be check TypeVariable.  else if(rhsType instanceof TypeVariable) {    Type[] types = ((TypeVariable)rhsType).getBounds();  ``` for(int i=0; i","closed","","youngjee","2013-04-22T09:25:26Z","2022-02-18T19:10:59Z"
"","228","ContentNegotiatingViewResolver favorPathExtension is not working","https://github.com/SpringSource/spring-framework/blob/3.2.x/spring-webmvc/src/main/java/org/springframework/web/servlet/view/ContentNegotiatingViewResolver.java#L138  public void setFavorPathExtension(boolean favorPathExtension) {     this.cnManagerFactoryBean.setFavorParameter(favorPathExtension); }  the method is setting ""FavorPathExtension"", but the impl calls set ""FavorParameter"".","closed","","bill2004158","2013-02-06T18:43:07Z","2013-02-06T19:15:00Z"
"","281","building previous version","Hi, I was trying to build v3.0.5.RELEASE after checking that particular version out from the source. It failed to build as build-spring-framework/build.xml imports spring-build/multi-bundle/default.xml, but the spring-build directory does not exist until later versions. Perhaps build.xml does not match the version tag?","closed","","akcheung","2013-05-05T01:24:28Z","2013-05-07T02:59:20Z"
"","240","Runtime resolver for @ActiveProfiles","Hello. I my current project I often want to resolve test active profiles at the runtime. For example: I want to put package-level annotation to the use same profiles for bulk of tests without manual annotating them (it is not possible annotate base class because tricky inheritance in test classes). Currently it is looks impossible to do such trick correctly using any documented way (test execution listeners or inheritance from SpringJUnit4ClassRunner) without marking every test as `@DirtyContext`.  So, I wonder is it possible to extend `@ActiveProfiles` annotation (or add a new one) to do something like this:  ```     @RunWith(SpringJUnit4ClassRunner.class)     @ActiveProfiles(resolver = SomeActiveProfileResolver.class)     class SomeClass() {}      class SomeActiveProfileResolver implement ActiveProfileResolver {            @Override            public String[] resolveProfiles(Object testInstance) {                   // some logic            }     }      interface ActiveProfileResolver {         String[] resolveProfiles(Object testInstance);     } ```  I will happy to contribute implementation if you agree with idea.  Thanks a lot.","closed","","michail-nikolaev","2013-02-27T09:58:40Z","2019-01-13T09:01:09Z"
"","258","SPR-9319 bufix","Have made non thread safe method getTemplate(String name, Locale locale) in FreeMarkerView synchronized. Please check is it correct.  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","egopher","2013-03-15T18:09:12Z","2014-06-17T08:09:34Z"
"","261","SPR-10389","Have fixed the ""Server-Side Tests"" code example.","closed","","karlbennett","2013-03-17T12:10:48Z","2014-06-27T17:47:19Z"
"","339","Fix ResourceHttpMessageConverter to not throw NullPointerException","for Resource implementation in which getFilename() returns null  ResourceHttpMessageConverter tries to use the filename to determine the media type, but for Resource implementations such as ByteArrayResource it is null, which causes NullPointerException. The fix checks whether getFilename returns null before attempting to determine the media type by it.  The problem was originally reported in Spring Social Google in an attempt to use ByteArrayResource in the method that uploads to Google Drive.  Issue: SPR-10848","closed","","GabiAxel","2013-08-21T12:29:05Z","2014-07-24T01:35:50Z"
"","235","Initial version of PropertiesMessageSource (SPR-10291)","For details see [SPR-10291](https://jira.springsource.org/browse/SPR-10291).","closed","","dmak","2013-02-14T10:23:20Z","2013-03-06T09:48:35Z"
"","278","SPR-10394 : Typo in Code Example","Fixed spelling error in Section ID. Fixed incorrect capitalisation in example code.","closed","","Zeouterlimits","2013-04-23T08:52:21Z","2014-06-22T09:57:09Z"
"","326","Fix malformed code in documentation","Fixed code snippets in ""Handling complex types for stored procedure calls"" paragraph.  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","Xaerxess","2013-07-30T17:12:05Z","2013-08-28T22:10:24Z"
"","328","Fix typo in ref docs","Fix typo in ref docs  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","lonre","2013-07-31T04:17:09Z","2017-10-20T08:39:56Z"
"","223","Fix for issue SPR-10219 / Tomcat Session Replication under Spring 3.2","Fix issue SPR-10219 so that session replication work under tomcat.","closed","","magruschinske","2013-01-26T01:43:54Z","2014-06-15T13:02:03Z"
"","284","SPR-10554","Fix for pattern combine  pattern1 = ""/1.0"" pattern2 = ""/test""  Now it will return  ""/1.0/test"" instead of ""/1.0""","closed","","kdlan","2013-05-14T06:33:06Z","2014-07-22T02:32:21Z"
"","327","Add support for Objenesis proxy creation.","Extended `DefaultAopProxyFactory` to create Objenesis based proxies if the library is on the classpath. This allows classes without a default constructor being CGLib proxied.  Open issues: - Make sure spring-context tests run against plain CGLib _and_ CGLib + Objenesis (it only does the latter as of this change)  Issue: SPR-10594","closed","","odrotbohm","2013-07-30T18:02:07Z","2014-06-13T22:56:35Z"
"","206","SPR-10122 [SpEL] Problem with uppercase property names - setters","Ensure that attributes like ""pEBS"" are modelled with the correct getters and setters in accordance with the Java Bean specification. In this case getpEBS() and setpEBS(String pEBS)","closed","","davidboden","2012-12-27T18:15:45Z","2014-06-12T06:48:24Z"
"","230","Update src/reference/docbook/mvc.xml to note that HttpPutContentFilter may clash with @RequestBody and HttpEntity","Enhanced documentation to note that HttpPutContentFilter may clash with @RequestBody and HttpEntity.  Issue: SPR-8415","closed","","avbentem","2013-02-10T22:41:37Z","2014-07-15T12:45:53Z"
"","209","Incorrect Virtual Repository Information","Currently, the [release virtual repository documentation](https://github.com/SpringSource/spring-framework/wiki/SpringSource-repository-FAQ#wiki-available_repositories) states that it aggregates milestone repositories:  > snapshot (aggregates libs-snapshot-local and libs-snapshot-s3-cache) > milestone (aggregates libs-milestone-local and libs-milestone-s3-cache) > release (aggregates libs-milestone-local and libs-milestone-s3-cache)  This should be corrected to state that it aggregates release repositories.","closed","","nebhale","2013-01-03T08:36:16Z","2013-01-03T09:08:45Z"
"","222","SPR-10217 Implement JUnit 4 Support using Rules","Currently JUnit 4 support is provided by SpringJUnit4ClassRunner which is a custom BlockJUnit4ClassRunner. There is no support for using other runners like Theories or Parameterized or 3rd party runners like MockitoJUnitRunner. A runner based approach does not seem to offer much promise as runners are not composable, a custom Spring version of every runner has to be developed and maintained.  With JUnit 4.9+ the preferred way to implement such behavior is to use rules. Unlike runners there can be several ones of them and they can be composed. In theory TestExecutionListener could be deprecated and be replaced with standard JUnit rules but this seems to be a bit on the drastic side.  This proposed implementation is using both a class rule and a method rule. The class rule creates the TestContextManager, runs all the class level callbacks and class level checks. The method rule runs all the instance level callbacks and method level checks. I did not see a way to implement the current functionality offered by SpringJUnit4ClassRunner using only one rule. Using two rules has the advantage that the implementation is cleaner because it better separates the concerns. However it has the disadvantage that it's harder to set up because both a method rule and a class rule are needed. This also increases the potential for misconfiguration.  The method rule has to be a MethodRule instead of a TestRule because only the former has access to the test object with we need to perform injection. This interface used to be deprecated once but doesn't seem to be anymore. This creates a certain risk that it will be deprectated again and potentially be remvoed in the future. An additional drawback is that MethodRule unlike TestRule can only be defined in fields and not methods. This is an unfortunate consequence of the implementation of org.junit.runners.model.TestClass. As JUnit does not do Field#setAccessible(true) this means that tests will have to be defined in public fields.  Another minor issue is that tests not run because of IfProfileValue will still show up in the Eclipse test tree, just blank.  In conclusion while the given implementation has some downsides I don't see any other possible implementations given the current state of affairs in JUnit. - Add SpringJUnitClassRule for all the class level processing - Add SpringJUnitMethodRule for all the method level processing - Add tests for the rules  SPR-10217","closed","in: test,","marschall","2013-01-25T21:02:37Z","2019-02-22T14:15:09Z"
"","271","Typo in SimpleJdbcCall's javadocs","class: org.springframework.jdbc.core.simple.SimpleJdbcCall  Haven't executed the tests but I'm assuming it didn't break anything ;)","closed","","kryger","2013-04-08T11:42:45Z","2013-04-08T11:47:39Z"
"","238","Fix DefaultMockMvcBuilder fluent API generic type","Changed upper bound of generic parameter for DefaultMockMvcBuilder from MockMvcBuilder to DefaultMockMvcBuilder to allow for ongoing method chaining in the fluent API style.  Prior to this commit there was a problem in that repeated chained calls made to the DefaultMockMvcBuilder class would result in the returning of an MockMvcBuilder typed reference. Since all the useful chaining methods are on the DefaultMockMvcBuilder subclass this resulted in the loss of any useful chained (fluent API) type usage of the builder class. The reason for this problem is that in chaining calls the compiler 'loses' the knowledge that the type being returned is actually a DefaultMockMvcBuilder and returns to the type specified in the 'extends' part of the generic type definition. By tightening the bounds of the generic type to 'extends DefaultMockMvcBuilder', clients of the class can continue to call methods on the returned reference and still have access to the DefaultMockMvcBuilder methods.  A test has been added matching the original example in the Jira issue, which now compiles successfully.  Issue: SPR-10277","closed","","wesleyhall","2013-02-21T14:23:24Z","2014-06-19T00:50:04Z"
"","257","Fix typo","Changed explictly to explicitly  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","carsonmcdonald","2013-03-15T17:08:50Z","2014-07-05T01:49:15Z"
"","315","SPR-10501 Add Reference to Spring AMQP Remoting","Beginning with 1.2.0, Spring AMQP now supports remoting over AMQP with a proxy factory bean an invoker service exporter.  Add documentation to the Spring Framework remoting section with a link to the Spring AMQP documentation.","closed","","garyrussell","2013-07-12T20:39:43Z","2013-10-11T16:35:17Z"
"","255","Parse variant in locale string only if necessary","Before this change logic for parsing locale string would look for variant even when it's clear that local string doesn't have variant part.  With this patch locale string parsing is improved so that variant processing gets skipped when not necessary.  Issue: SPR-10364","closed","","sslavic","2013-03-14T00:04:39Z","2014-06-19T04:44:56Z"
"","252","Compare Kind references before checking log levels","Assuming reference comparisons are much quicker than checking the resolved logger level via the isFooEnabled() methods, reverse the nested `if()` tests. Also, since the reference can match only one of the instances, use `else if` to short-circuit the search.  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","dharkness","2013-03-13T04:00:51Z","2013-03-13T15:53:41Z"
"","196","Make spring-aspects depend on aspectjweaver instead of aspectjrt","aspectjrt is a subset of aspectjweaver & without the weaver jar aspects do not work. As issue SPR-8896 is fixed this should also be reflected in the pom.  Issue: SPR-10072 ""POM of spring-aspects should have a dependency on aspectjweaver and not aspectjrt""  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","KingBuzzer","2012-12-04T20:15:34Z","2014-06-30T21:06:44Z"
"","274","asd","asd","closed","","xuechong87","2013-04-16T12:37:16Z","2013-07-15T09:35:27Z"
"","329","Fix array varargs conversion error in SpEL expression","Array varargs convert failed SpEL Expression ( Arrays.asList etc )   That is,  ``` // sucess List list1 = Arrays.asList(new String[]{""a"",""b""}); assertEquals(2, list1.size()); // return 2  // error ExpressionParser parser = new SpelExpressionParser(); Expression exp = parser.parseExpression(""T(java.util.Arrays).asList(new String[]{""a"",""b""})""); List list2= (List) exp.getValue(); assertEquals(2, list2.size()); // return 1 ```  So, Added arrary varargs checking in ReflectiveMethodExecutor#execute as following diff  https://github.com/spring-projects/spring-framework/pull/329/files  thanks  Issue: SPR-10781","closed","","sleepred","2013-08-02T04:06:17Z","2014-08-12T21:55:02Z"
"","332","Array type bean cannot be proxied because is is final class","AnnotationAwareAspectJAutoProxyCreator(AbstractAutoProxyCreator) class has wrapIfNecessary() method. In this method, Spring AOP tries to  figure out whether current bean must be proxied or not.  Because array type bean is not skipped with current code,  AnnotationAwareAspectJAutoProxyCreator tries to create proxy having  interfaces which array class implements.(java.lang.Cloneable, etc) Following Aspect could produce this with <jdbc:embedded-database>.  @Around(""target(org.springframework.core.io.Resource[])"")  Maybe this is usage error case, but repro project attached in issue (https://jira.springsource.org/browse/SPR-10793) shows side effect of above situation(absence of array type skipment).   Bean <jdbc:embedded-database> has inner bean <jdbc:script>, and inner bean is type of org.springframework.core.io.Resource[]. Although configured aspect was @Around(""bean(foo)""), inner bean <jdbc:script> was proxied resulting java.lang.IllegalArgumentException: Cannot  convert value of type [com.sun.proxy.$Proxy6 implementing...........  Invalid pointcut match was problem of aspectweaver, but if array type bean can be skipped from wrapIfNecessary() method, this side effect  could be eliminated.  Thank you.  Issue: SPR-10793","closed","in: core,","byungseok","2013-08-13T06:40:45Z","2021-11-19T09:20:37Z"
"","344","Custom handlers for handler arguments and return values","Allows you to set custom lists of `HandlerMethodReturnValueHandler` and `HandlerMethodArgumentResolver`. The `customArgumentResolvers` and `customReturnValueHandlers` may be left unset, in which case, there will be no custom resolvers and handlers.","closed","","janm399","2013-08-26T11:13:01Z","2014-06-16T12:37:34Z"
"","299","SPR-10630","Allow BDRPostProcessors to register other BDRPPs  Allow BeanDefinitionRegistryPostProcessor implementations to register beans that are themselves BeanDefinitionRegistryPostProcessors.  Prior to this commit if a BeanDefinitionRegistryPostProcessor registered another BeanDefinitionRegistryPostProcessor its postProcessBeanDefinitionRegistry method would not be called.","closed","","philwebb","2013-06-06T19:26:08Z","2013-08-29T01:20:11Z"
"","220","Support 'unless' expression for cache veto","Allow @Cachable, @CachePut and equivalent XML configuration to provide a SpEL expression that can be used to veto putting an item into the cache. Unlike 'condition' the 'unless' parameter is evaluated after the method has been called and can therefore reference the #result.  For example:  ``` @Cacheable(value=""book"",     condition=""#name.length < 32"",     unless=""#result.hardback"") ```  This commit also allows #result to be referenced from @CacheEvict expressions as long as 'beforeInvocation' is false.  Issue:","closed","","philwebb","2013-01-25T01:24:58Z","2014-06-12T06:20:01Z"
"","311","Added Java 7 instrumentation manifest attributes","After upgrading to OpenJDK 7 I can't retransform classes using     InstrumentationSavingAgent.getInstrumentation().addTransformer(t, true);  After some research I feel that spring-instrument is missing the required manifest attributes for Java 7 (see http://docs.oracle.com/javase/7/docs/api/java/lang/instrument/package-summary.html)  I'm neither an expert for instrumentation nor Gradle but I thought I'd give it a shot to at least start a discussion.","closed","","sfussenegger","2013-07-09T06:46:18Z","2013-07-24T07:29:06Z"
"","331","Added XStream CatchAllConverter","Added XStream CatchAllConverter that supports all classes, but throws exceptions for (un)marshalling.  Main purpose of this class is to register this converter as a catchall last converter with a normal or higher priority in addition to converters that explicitly  support the domain classes that should be supported. As a result, default XStream  converters with lower priorities and possible security vulnerabilities do not get invoked.","closed","","poutsma","2013-08-09T11:06:27Z","2014-06-18T13:34:31Z"
"","283","Added test case to show broken bean lookup with type prediction.","Added test case to Spr8954Tests that explicitly prevents bean creation on type lookup. This results in beans not being found for a ""beans by type"" call.  Refactored existing test cases to use assert methods correctly.  Issues: SPR-10517, SPR-8954, SPR-9177","closed","","odrotbohm","2013-05-11T10:48:06Z","2021-02-15T13:01:32Z"
"","298","Added TimeZone support to Spring i18n","Added support to Spring Framework i18n for use `TimeZone`s. This support is based largely off the `Locale` support. The `TimeZoneResolver` interface parallels the `LocaleResolver` interface and so do most of its implementations. The `TimeZoneChangeInterceptor` mirrors the `LocaleChangeInterceptor`. Use of the `TimeZoneContextHolder` is the same as using the `LocaleContextHolder`, and the `RequestContext` and `RequestContextUtils` classes have `TimeZone`-related methods that mirror the `Locale`-related methods.  As it does with `LocaleResolver`, `DispatcherServlet` now exposes a `TimeZoneResolver` and context. The `JstlUtils` take into account and expose `TimeZone`s to the target JSP context, just like with `Locale`s, so that `` and the like can take advantage of the selected `TimeZone`. The Velocity and Jasper Report views have also been updated to use the `TimeZone` (they were the only other view types whose 3rd party libraries consumed `TimeZone`s but Spring was ignoring that).  Everything was set up so that out-of-the-box, Spring and everything it affects continue to use the System Default time zone without configuration to the contrary. This way, behavior should not change for users that don't set up `TimeZone` support.  This change includes 69 unit tests to back up my changes. I have also thoroughly functionally tested the changes in my target application. All new classes are well-documented with JavaDoc and the JavaDoc of classes affected by these changes have been updated as appropriate.  Issue: SPR-1528","closed","","beamerblvd","2013-06-05T06:43:30Z","2014-06-14T13:20:41Z"
"","333","Support 'empty' StreamSource in Jaxb2Marshaller","Added support for StreamSources that do not have a InputStream or Reader, but do have a System ID.  Issue: 10828","closed","","poutsma","2013-08-13T09:00:44Z","2013-08-13T22:17:32Z"
"","337","SPR-10711: Add recovery-interval to","Added recovery-interval attribute to the jms:listener-container element in the JMS schema. Updated jms namespace documentation to include recovery-interval attribute, as well as other attributes missing from the documentation (e.g. container-class, error-handler, receive-timeout, phase).  The entries in spring.schemas for the 4.0 schemas were missing, so I added entries for spring-tool-4.0 and spring-jms-4.0 (needed to  get unit test to pass). I did not add 4.0 entries for the other schemas, and assume they will be done at a later time.  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.  Issue: SPR-10711","closed","","bparry02","2013-08-17T20:12:00Z","2014-06-19T06:30:19Z"
"","296","Add ability to check that attribute does not exist in Spring MVC test framework","Added functionality to ModelResultMatchers to allow checking that a model attribute does not exist.  Issue: SPR-10509  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","deline","2013-06-01T06:30:10Z","2014-07-12T02:03:31Z"
"","351","Added ListenableFuture interface","Added extension to Future with capabilities for registering callbacks when the future is complete. - Added ListenableFuture, ListenableFutureCallback,   ListenableFutureCallbackRegistry, and ListenableFutureTask. - Using ListenableFuture in AsyncRestOperations/AsyncRestTemplate. - Added AsyncListenableTaskExecutor, implemented in   SimpleAsyncTaskExecutor. - Added FutureAdapter and ListenableFutureAdapter.","closed","","poutsma","2013-09-04T12:37:09Z","2014-07-31T15:17:28Z"
"","336","Add AsyncRestTemplate","Added AsyncRestTemplate, the asynchronous counterpart to the RestTemplate that was introduced in Spring 3. All methods on the AsyncRestTemplate are similar to those found on the synchronous RestTemplatem, except that they return Future wrappers instead of concrete results.  To enable this, this commit introduces the AsyncClientHttpRequest and AsyncClientHttpRequestFactory, similar to the ClientHttpRequest and ClientHttpRequestFactory, except that ClientHttpRequest returns a Future for the execute method. Two implementations of these interfaces are provided, one based on the HttpURLConnection incombination with a Spring AsyncTaskExecutor and one based on Apache HttpComponents HttpAsyncClient.  Issue: SPR-8804","closed","","poutsma","2013-08-15T11:22:45Z","2014-06-17T10:16:37Z"
"","297","Added  subtag for message/theme","Added a new `` tag meant for nesting within `` and ``. The tag is based on the `` tag and uses conventions found throughout other Spring tags. Ten new unit tests and over a dozen changed unit tests accompany the changes, which are detailed below.  Itemized Changes: - Incremented version number of tag libraries to 4.0. - Added `` tag to `spring.tld`. - Updated documentation for message and theme tags in `spring.tld`. - Added `o.s.web.servlet.tags.ArgumentTag` class to handle tag. Added 5   unit tests to test behavior. - Added `o.s.web.servlet.tags.ArgumentAware` to mark tags supporting   arguments. - Updated `o.s.web.servlet.tags.MessageTag` to implement `ArgumentAware`   and permit either nested argument tags or the `arguments` attribute, but   not both. Also updated JavaDoc. Added three unit tests to test behavior.   Updated over a dozen other unit tests to test behavior. - Updated `o.s.web.servlet.tags.ThemeTag` JavaDoc. - Fixed an `@link` error in the JavaDoc for `o.s.web.servlet.tags.UrlTag` - `o.s.web.servlet.tags.ParamTag` was susceptible to problems in   containers that pool tags. It wasn't resetting values when the   release method was called, so if a user used multiple ``   tags and mixed using the `value` attribute and tag body, it's possible   that the value used might not be correct. This would be very   difficult to duplicate. I just noticed it while making the similar   `ArgumentTag` and decided it should be fixed while I was in there.   I also added two additional unit tests to test this behavior change.  Issue: SPR-9678","closed","","beamerblvd","2013-06-03T23:33:43Z","2014-06-15T16:10:23Z"
"","319","Added LocalContainerEntityManagerFactoryBean shortcut methods","Added `LocalContainerEntityManagerFactoryBean` missing methods to easily replace elements in `persistence.xml`. Added `setSharedCacheMode`, `setTransactionType`, `setValidationMode`, and `setSchemaGenerationAction`.  Issue: SPR-10764","closed","","beamerblvd","2013-07-22T20:08:09Z","2014-06-27T11:02:17Z"
"","317","Added 'processExternalEntities' to JAXB2Marshaller","Added 'processExternalEntities' property to the JAXB2Marshaller, which indicates whether external XML entities are processed when unmarshalling.  Default is false, meaning that external entities are not resolved. Processing of external entities will only be enabled/disabled when the Source} passed to #unmarshal(Source) is a SAXSource or StreamSource. It has no effect for DOMSource or StAXSource instances.","closed","","poutsma","2013-07-19T13:04:14Z","2014-06-12T07:05:44Z"
"","202","JDK 6, JUnit Assumptions and Segregate Tests","Add support for running JUnit tests with alternative JDKs as well as using assumptions to selectively skip tests. See commit log messages for details.  This pull request incorporates a slightly refactored version of Rob's pull requests:  https://github.com/SpringSource/spring-framework/pull/200 https://github.com/SpringSource/spring-framework/pull/142","closed","","philwebb","2012-12-12T07:37:56Z","2014-06-13T22:33:57Z"
"","254","Allow custom ServletRequestAttributes handling","Add ServletRequestAttributes.getSubsequentRequestAttributes(...) method that can be used to determine how subsequent HttpServletRequests should be handled. The default implementation restores the behavior of Spring 3.1 in never replacing custom subclasses of ServletRequestAttributes.  The ServletTestExecutionListener from spring-test now override getSubsequentRequestAttributes to ensure that the initial request is alway replaced in the test context (see ).  Issue:","closed","","philwebb","2013-03-13T06:42:01Z","2013-03-13T15:43:40Z"
"","300","Add caching to WebAsyncUtils to avoid excessive use of reflection. (SPR-10673)","Add caching to WebAsyncUtils to avoid excessive use of reflection when loading ""org.springframework.web.context.request.async.StandardServletAsyncWebRequest""","closed","","eric-vlaanderen","2013-06-21T12:08:21Z","2014-07-04T15:02:15Z"
"","295","SPR-10608 Add Path based resource","`FileSystemResource` uses the ""old"" `java.io.File` instead of the ""new"" `java.nio.file.Path`. One of the disadvantages is that it only works with the default file system and not with custom ones. Since the minimum requirement is still Java 6 `FileSystemResource` can't be retrofitted (and no `#getPath` can be added to `Resource`). - add `PathResource` - add `PathResourceTests` - update `Resource` with a reference to `PathResource`  `PathResource` delegates to the underlying file system instead of `StringUtils` like `FileSystemResource`. It has therefore slightly different semantics. First when building relative resources via `#createRelative` the relative path will apply to this path (like URL or Unix). If the same switchable behavior like `FileSystemResource` is wanted that could be done with a boolean switch. Second equality is delegated to the underlying file system provider so it's case-insensitive on Windows.  `PathResourceTests` contains only minimal tests (`FileSystemResource` has no tests) as writing tests for file code is tricky. I could write more elaborate tests using https://github.com/marschall/memoryfilesystem if that's wanted and OK.  I did sign the Spring CLA  Issue: SPR-10608","closed","","marschall","2013-05-30T18:05:41Z","2014-06-27T21:23:06Z"
"","343","Change AntPathStringMatcher cache to LRU cache with size limit","``` Avoid memory leak, by changing  AntPathStringMatcher cache from HashMap to LinkedHashMap with access order and size limit (LRU).  Issue: SPR-10803 ```","closed","","pbobruk","2013-08-26T08:01:48Z","2014-06-17T21:58:10Z"
"","318","Reading persistence.xml  properly","`` is read incorrectly in `PersistenceUnitReader`. Changed `PersistenceUnitReader` to follow the rules set forth in the JPA specification.  Issue: SPR-10767","closed","","beamerblvd","2013-07-22T18:31:15Z","2014-06-14T19:44:25Z"
"","282","Ensure Parent ConfigurationClass loaded on overrides","@cbeams @jhoeller This is a fix for [SPR-10546](https://jira.springsource.org/browse/SPR-10546), but I would like a few extra set of eyes on it before pushing. Do you mind reviewing this? Ideally I'd like to get this in 4.0.0.M2 and 3.2.3 as this situation will be quite prevalent when using the Spring Security Java Config.  ---  Previously ConfigurationClassParser could override a nested @Configuration without consideration of @Bean's defined in parent classes.  This commit ensures that if the original ConfigurationClass contains additional bean definitions it is processed again.  Issue: SPR-10546","closed","","rwinch","2013-05-10T21:19:40Z","2014-06-25T10:44:13Z"
"","224","Generate the pom.xml as part of the build","@cbeams - We were not sure if we wanted to do this or not, but I put together a pull request to see what you thought.  //cc @philwebb @rstoyanchev  Previously the pom.xml was only generated when doing maven deployments. This is nice since the metadata can be derived from the Gradle build. However, there have been a issues that have come from using this approach (i.e. SPR-10218).  Since the pom.xml files are so critical, it is nice to include these in version control so that we can perform a diff each time they change. This commit introduces a new task that generates the pom.xml files and updates the .gititnore to include the pom.xml files.","closed","","rwinch","2013-01-28T19:30:53Z","2014-08-15T04:25:59Z"
"","215","ShallowEtagHeaderFilter can now handle the If-Match HTTP Header for cond...","...itional GET requests  Few notes:  - this is also being tracked on JIRA: [SPR-10164](https://jira.springsource.org/browse/SPR-10164) - the changes (can only) deal with read operations (GET); the **shallow implementation** cannot handle conditional PUT operations, since it would have to determine IF the filter chain can be executed and STOP it in case it should not be - which is not possible  - the **if-else nesting** in `updateResponse` is a bit to deep (3 levels) - I can extract out the logic handling the `If-None-Match` and the logic handling `If-Match` - the original implementation only handled `If-None-Match` so I had to rename a few variables to accomodate the new code path for `If-Match`  Thanks.","closed","","eugenp","2013-01-13T13:44:42Z","2019-01-05T07:36:20Z"
"","193","Update spring-web/src/main/java/org/springframework/http/converter/Strin...","...gHttpMessageConverter.java  Change the default charset from ""ISO-8859-1"" to ""UTF-8"" in the class StringHttpMessageConverter. Because if response body has Chinese, there will have Garbage characters.","closed","","zhengxiaochuan","2012-11-29T05:02:44Z","2014-06-18T19:14:01Z"
"","229","Update spring-webmvc/src/main/java/org/springframework/web/servlet/view/...","...ContentNegotiatingViewResolver.java  called wrong method.","closed","","bill2004158","2013-02-06T18:47:50Z","2014-06-18T16:10:20Z"
"","312","Request streaming for Apache HttpClient","- Added org.springframework.http.StreamingHttpOutputMessage, which   allows for a settable request body (as opposed to an output stream). - Added http.client.HttpComponentsStreamingClientHttpRequest, which   implements the above mentioned interface, mapping setBody() to a   setEntity() call on the Apache HttpClient HttpEntityEnclosingRequest. - Added a 'bufferRequestBody' property to the   HttpComponentsClientHttpRequestFactory. When this property is set to   false (default is true), we return a   HttpComponentsStreamingClientHttpRequest instead of a (request   buffering) HttpComponentsClientHttpRequest.  Issue: SPR-10728","closed","","poutsma","2013-07-09T10:02:13Z","2015-06-25T13:37:54Z"
"","15365","LoadTimeWeaving is working with XML config and not with Java Config [SPR-10737]","**[Zoltan Puskai](https://jira.spring.io/secure/ViewProfile.jspa?name=zoltan.puskai)** opened **[SPR-10737](https://jira.spring.io/browse/SPR-10737?redirect=false)** and commented  As the attached example shows, the load time weaving is working with Xml configuration and not with Java config. I have the spring-instrument-tomcat.jar in the tomcat lib. I've used Netbeans 7.3 with Tomcat 7.0.34. Same result for Spring 3.2.2 and 3.2.3.  ---  **Affects:** 3.2.2, 3.2.3  **Attachments:** - [ltw.zip](https://jira.spring.io/secure/attachment/21284/ltw.zip) (_14.03 kB_)  **Issue Links:** - #15483 Detect LoadTimeWeaver bean when declared through `@Bean` method as well (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2013-07-12T05:03:50Z","2019-01-13T06:58:59Z"
"","15187","NamedParameterJdbcTemplate and null values casuing sql exception ONLY for float datatype [SPR-10557]","**[zoharat](https://jira.spring.io/secure/ViewProfile.jspa?name=zbhiwandiwala)** opened **[SPR-10557](https://jira.spring.io/browse/SPR-10557?redirect=false)** and commented  I have a table which has a float, integer and varchar column  // build the sql to update String sql = this.buildUpdate(dataStore);  // convert parameters into a nice Spring structure SqlParameterSource params = new MapSqlParameterSource(parameters);  // run the update try { jdbcTemplate.update(sql, params); } catch(final DataAccessException e) { throw new DataStoreException(""Error updating data: "" +        e.getMessage(), e); }  The paramters map contains the values for the insert. If I supply a null value ONLY for the float column it fails to insert and I get the following error.  Caused by: org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [UPDATE dbo.HDI_WriteToTable_MockId SET decimalValue = ?, integerValue = ?, stringValue = ? WHERE (mockId = ?)]; nested exception is com.microsoft.sqlserver.jdbc.SQLServerException: Operand type clash: varbinary is incompatible with float at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:98) at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72) at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:80) at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:80) at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:603) at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:812) at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:834) at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.update(NamedParameterJdbcTemplate.java:260) at com.docfinity.datastore.manager.impl.DataStoreManagerImpl.update(DataStoreManagerImpl.java:321) ... 162 more Caused by: com.microsoft.sqlserver.jdbc.SQLServerException: Operand type clash: varbinary is incompatible with float at com.microsoft.sqlserver.jdbc.SQLServerException.makeFromDatabaseError(SQLServerException.java:216) at com.microsoft.sqlserver.jdbc.SQLServerStatement.getNextResult(SQLServerStatement.java:1515) at com.microsoft.sqlserver.jdbc.SQLServerPreparedStatement.doExecutePreparedStatement(SQLServerPreparedStatement.java:404) at com.microsoft.sqlserver.jdbc.SQLServerPreparedStatement$PrepStmtExecCmd.doExecute(SQLServerPreparedStatement.java:350) at com.microsoft.sqlserver.jdbc.TDSCommand.execute(IOBuffer.java:5696) at com.microsoft.sqlserver.jdbc.SQLServerConnection.executeCommand(SQLServerConnection.java:1715) at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeCommand(SQLServerStatement.java:180) at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeStatement(SQLServerStatement.java:155) at com.microsoft.sqlserver.jdbc.SQLServerPreparedStatement.executeUpdate(SQLServerPreparedStatement.java:314) at com.mchange.v2.c3p0.impl.NewProxyPreparedStatement.executeUpdate(NewProxyPreparedStatement.java:147) at org.springframework.jdbc.core.JdbcTemplate$2.doInPreparedStatement(JdbcTemplate.java:818) at org.springframework.jdbc.core.JdbcTemplate$2.doInPreparedStatement(JdbcTemplate.java:1) at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:587) ... 166 more   --- No further details from [SPR-10557](https://jira.spring.io/browse/SPR-10557?redirect=false)","closed","status: declined,","spring-projects-issues","2013-05-13T09:36:12Z","2019-01-12T16:24:05Z"
"","14996","Off by one error in StringUtils.parseLocaleString [SPR-10364]","**[Zhihong Zhang](https://jira.spring.io/secure/ViewProfile.jspa?name=zhihong)** opened **[SPR-10364](https://jira.spring.io/browse/SPR-10364?redirect=false)** and commented  If you have locale ""`fr_fr`"", Spring will change it into ""`fr_fr_fr`"". The bug is in this method in `StringUtils.java`,  ```java public static Locale parseLocaleString(String localeString) {         String[] parts = tokenizeToStringArray(localeString, ""_ "", false, false);         String language = (parts.length > 0 ? parts[0] : """");         String country = (parts.length > 1 ? parts[1] : """");         validateLocalePart(language);         validateLocalePart(country);         String variant = """";         if (parts.length >= 2) {                 // There is definitely a variant, and it is everything after the country                 // code sans the separator between the country code and the variant.                 int endIndexOfCountryCode = localeString.indexOf(country) + country.length();                 // Strip off any leading '_' and whitespace, what's left is the variant.                 variant = trimLeadingWhitespace(localeString.substring(endIndexOfCountryCode));                 if (variant.startsWith(""_"")) {                         variant = trimLeadingCharacter(variant, '_');                 }         }         return (language.length() > 0 ? new Locale(language, country, variant) : null); } ```  It assumes that language and country are never the same but in case of ""fr_fr"", they are the same.   ---  **Affects:** 3.1 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e7f89f87c14bb65a83518508a791dc68e681ddd4  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2013-03-08T08:22:26Z","2019-01-11T21:00:57Z"
"","15348","@Async method  in new thread use AopContext.currentProxy()  can not get proxy object(when expose-proxy=true) [SPR-10720]","**[zhangkaitao](https://jira.spring.io/secure/ViewProfile.jspa?name=zhangkaitao)** opened **[SPR-10720](https://jira.spring.io/browse/SPR-10720?redirect=false)** and commented  modify  org.springframework.aop.interceptor.AsyncExecutionInterceptor  from  ``` Future result = determineAsyncExecutor(specificMethod).submit(           new Callable() {                    public Object call() throws Exception {                             try {                                      Object result = invocation.proceed();                                      if (result instanceof Future) {                                               return ((Future) result).get();                                      }                             }                             catch (Throwable ex) {                                      ReflectionUtils.rethrowException(ex);                             }                             return null;                    }           });  ```  to  ```          final Method setCurrentProxyMethod = ReflectionUtils.findMethod(AopContext.class, ""setCurrentProxy"", Object.class);          final Object currentProxy = AopContext.currentProxy();         ReflectionUtils.makeAccessible(setCurrentProxyMethod);         Future result = determineAsyncExecutor(specificMethod).submit(                 new Callable() {                     public Object call() throws Exception {                         try {                             if(currentProxy != null) {                                 ReflectionUtils.invokeMethod(setCurrentProxyMethod, null, currentProxy);                             }                             Object result = invocation.proceed();                             if (result instanceof Future) {                                 return ((Future) result).get();                             }                         }                         catch (Throwable ex) {                             ReflectionUtils.rethrowException(ex);                         } finally {                             if(currentProxy != null) {                                 ReflectionUtils.invokeMethod(setCurrentProxyMethod, null, (Object) null);                             }                         }                         return null;                     }                 });   ```    ---  **Affects:** 3.2.3","closed","status: bulk-closed,","spring-projects-issues","2013-07-03T16:21:13Z","2019-01-12T00:22:58Z"
"","15221","spring 3.2.3 @RequestParam(value=""username"", required=false)   bug [SPR-10592]","**[zhangkaitao](https://jira.spring.io/secure/ViewProfile.jspa?name=zhangkaitao)** opened **[SPR-10592](https://jira.spring.io/browse/SPR-10592?redirect=false)** and commented  `@RequestParam`(value=""username"", required=false)  also report Required Long parameter 'userId' is not present  because of org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver的resolveArgument:  if (emptyArgValue && (arg == null)) {   handleMissingValue(namedValueInfo.name, parameter);   }  ---  **Affects:** 3.2.3  **Reference URL:** http://jinnianshilongnian.iteye.com/blog/1878631  **Issue Links:** - #15207 Revert change for SPR-10402 that allowed treating empty values as missing values (_**""duplicates""**_)  0 votes, 5 watchers","closed","in: web,","spring-projects-issues","2013-05-27T19:15:37Z","2019-01-12T16:46:58Z"
"","15206","spring @MatrixVariable bug [SPR-10577]","**[zhangkaitao](https://jira.spring.io/secure/ViewProfile.jspa?name=zhangkaitao)** opened **[SPR-10577](https://jira.spring.io/browse/SPR-10577?redirect=false)** and commented  example  ```java @RequestMapping(value = ""/owners/{ownerId}/pets/{petId}"", method = RequestMethod.GET)     public void findPet(     @MatrixVariable Map matrixVars,      @MatrixVariable(pathVar = ""petId"") Map petMatrixVars) {           System.out.println(matrixVars);           System.out.println(petMatrixVars);   }   ```  if url  ```java http://localhost:8080/owners/44;m=1/pets/55;q=22,33;s=23 ```  will not match  cause by  request.getServletPath() is /owners/44，not /owners/44;m=1/pets/55;q=22,33;s=23  https://java.net/jira/browse/SERVLET_SPEC-67?page=com.atlassian.streams.streams-jira-plugin%3Aactivity-stream-issue-tab  see http://jinnianshilongnian.iteye.com/blog/1872760  ---  **Affects:** 3.2.2  **Issue Links:** - #15060 A URI with URL path parameters causes IllegalStateException (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2013-05-20T23:15:43Z","2019-01-12T16:47:00Z"
"","15180","Spring3.2 bug context:property-placeholder nested search property appear java.lang.StackOverflowError [SPR-10549]","**[zhangkaitao](https://jira.spring.io/secure/ViewProfile.jspa?name=zhangkaitao)** opened **[SPR-10549](https://jira.spring.io/browse/SPR-10549?redirect=false)** and commented  1.   ```    ```  2. resources.properties  ``` abc=${dce}  dce=${none} ```  3  ```java @Value(""${abc}"")   private String abc;  ```  4. appear  ``` java.lang.StackOverflowError 	at java.security.AccessController.doPrivileged(Native Method) 	at com.sun.naming.internal.VersionHelper12.getJndiProperties(VersionHelper12.java:106) 	at com.sun.naming.internal.ResourceManager.getInitialEnvironment(ResourceManager.java:202) 	at javax.naming.InitialContext.init(InitialContext.java:238) 	at javax.naming.InitialContext.(InitialContext.java:216) 	at org.springframework.jndi.JndiTemplate.createInitialContext(JndiTemplate.java:136) 	at org.springframework.jndi.JndiTemplate.getContext(JndiTemplate.java:103) 	at org.springframework.jndi.JndiTemplate.execute(JndiTemplate.java:85) 	at org.springframework.jndi.JndiTemplate.lookup(JndiTemplate.java:152) 	at org.springframework.jndi.JndiTemplate.lookup(JndiTemplate.java:178) 	at org.springframework.jndi.JndiLocatorSupport.lookup(JndiLocatorSupport.java:95) 	at org.springframework.jndi.JndiLocatorDelegate.lookup(JndiLocatorDelegate.java:38) 	at org.springframework.jndi.JndiLocatorSupport.lookup(JndiLocatorSupport.java:77) 	at org.springframework.jndi.JndiLocatorDelegate.lookup(JndiLocatorDelegate.java:33) 	at org.springframework.jndi.JndiPropertySource.getProperty(JndiPropertySource.java:82) 	at org.springframework.core.env.PropertySourcesPropertyResolver.getProperty(PropertySourcesPropertyResolver.java:73) 	at org.springframework.core.env.PropertySourcesPropertyResolver.getProperty(PropertySourcesPropertyResolver.java:59) 	at org.springframework.core.env.AbstractEnvironment.getProperty(AbstractEnvironment.java:427) 	at org.springframework.context.support.PropertySourcesPlaceholderConfigurer$1.getProperty(PropertySourcesPlaceholderConfigurer.java:131) 	at org.springframework.context.support.PropertySourcesPlaceholderConfigurer$1.getProperty(PropertySourcesPlaceholderConfigurer.java:128) 	at org.springframework.core.env.PropertySourcesPropertyResolver.getProperty(PropertySourcesPropertyResolver.java:73) 	at org.springframework.core.env.PropertySourcesPropertyResolver.getProperty(PropertySourcesPropertyResolver.java:59) 	at org.springframework.core.env.AbstractPropertyResolver$1.resolvePlaceholder(AbstractPropertyResolver.java:176) 	at org.springframework.util.PropertyPlaceholderHelper.parseStringValue(PropertyPlaceholderHelper.java:146) 	at org.springframework.util.PropertyPlaceholderHelper.replacePlaceholders(PropertyPlaceholderHelper.java:125) ```  why: please see http://jinnianshilongnian.iteye.com/blog/1866892  ---  **Affects:** 3.2.2  **Reference URL:** http://jinnianshilongnian.iteye.com/blog/1866880  **Issue Links:** - #14203 Allow PropertyResolver implementations to ignore unresolvable ${placeholders}","closed","type: bug,","spring-projects-issues","2013-05-10T01:53:40Z","2019-01-11T22:15:16Z"
"","15031","spring3.2 matrix variable url match problem [SPR-10398]","**[zhangkaitao](https://jira.spring.io/secure/ViewProfile.jspa?name=zhangkaitao)** opened **[SPR-10398](https://jira.spring.io/browse/SPR-10398?redirect=false)** and commented  1) url maybe    http://localhost:9080/es-web/login    or    http://localhost:9080/es-web/login;JSESSIONID=a3595636-e414-4cff-bd37-a42edf53193d  2) controller  ```java @RequestMapping(value = {""/login""}, method = RequestMethod.GET)   public String loginForm() {       return ""front/login"";   }   ```  spring3.1.X can match， but spring3.2 can not match, is a bug?  spring3.2 user follow can match  ```java @RequestMapping(value = {""/{login:login;?.*}""}, method = RequestMethod.GET)   public String loginForm() {       return ""front/login"";   }   ```  please see http://www.iteye.com/topic/1129465#2389884  ---  **Affects:** 3.2.2  **Reference URL:** http://www.iteye.com/topic/1129465#2389884  **Issue Links:** - #15060 A URI with URL path parameters causes IllegalStateException  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/92bbd8103bd9eea226ce495924c744058a8724d2, https://github.com/spring-projects/spring-framework/commit/a86283eb28f9bbe532d2d8128fcdc12e1207da8f","closed","type: bug,","spring-projects-issues","2013-03-19T18:16:05Z","2019-01-11T19:37:54Z"
"","15046","Unnecessary blocking in DelegatingFilterProxy [SPR-10413]","**[Yury Lapko](https://jira.spring.io/secure/ViewProfile.jspa?name=kompot2k)** opened **[SPR-10413](https://jira.spring.io/browse/SPR-10413?redirect=false)** and commented  Unnecessary thread blocking occurs every time when the method doFilter is called. Can be used double check locking to avoid unnecessary thread blocking.  ---  **Affects:** 3.2.2  **Reference URL:** https://github.com/SpringSource/spring-framework/blob/3.2.x/spring-web/src/main/java/org/springframework/web/filter/DelegatingFilterProxy.java  **Issue Links:** - #13904 Spring DelegatingFilterProxy synchronization in multi-threading (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c26272cef62b1e6f3bb982d7f71b2f47c685b014, https://github.com/spring-projects/spring-framework/commit/20ddd3254b2378862b821f66cdbb101a6a8c6942","closed","type: enhancement,","spring-projects-issues","2013-03-25T04:08:53Z","2019-01-11T21:18:43Z"
"","15485","When I do 1)change properties 2)context.refresh() 3)request MySpringMVCController ->  Then I get old version of MySpringMVCController with old properties.  [SPR-10858]","**[yuri](https://jira.spring.io/secure/ViewProfile.jspa?name=rurik)** opened **[SPR-10858](https://jira.spring.io/browse/SPR-10858?redirect=false)** and commented  I have a spring mvc controller annotated with `@Controller`. In this controller I have autowired field MyHelper. In MyHelper there are properties like  ```java @Value(""${myproperty}"") String mypropety; ```  When I 1)changes properties in props.properties which included in my applicationContext.xml like  ```xml  ```  2)refresh  context of My web application context.refresh()  Then I request http://MySpringMVCControllerPage and get old value of mypropety  In debug I see that all my beans were recreated  during context.refresh(), new value of properties were read from props.properties and I see that MySpringMVCController bean was recreated too with new values of properties.  Then when I debug get request to http://MySpringMVCControllerPage I see the old version of MySpringMVCController with old values of properties in autowired MyHelper bean.  It seem's that MySpringMVCController cashes somewhere.  Is it Spring cashes MySpringMVCController? or something else?  My enviroment: java :Java HotSpot(TM) 64-Bit Server VM (build 20.45-b01, mixed mode) tomcat 7 OS: ubuntu 12.10    --- No further details from [SPR-10858](https://jira.spring.io/browse/SPR-10858?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2013-08-26T02:02:09Z","2019-01-12T02:32:45Z"
"","15126","Content negotiation for wildcard media type [SPR-10493]","**[Yue Ni](https://jira.spring.io/secure/ViewProfile.jspa?name=nybon)** opened **[SPR-10493](https://jira.spring.io/browse/SPR-10493?redirect=false)** and commented  In Spring Web MVC, if we have a HttpMessageConverter supporting to produce \*/\* media type (our last resort), and client accepts media type like ""application/\*+pdf"", Spring will fail to use the HttpMessageConverter to do the conversion and throws HttpMediaTypeNotAcceptableException anyway.  The expected result is Spring should use the HttpMessageConverter supporting ""\*/\*"" to handle request accepting ""application/\*+pdf"" instead of throwing an HttpMediaTypeNotAcceptableException.  I checked out the source code, and found in AbstractMessageConverterMethodProcessor:  ``` for (MediaType r : requestedMediaTypes) {   for (MediaType p : producibleMediaTypes) {     if (r.isCompatibleWith(p)) {       compatibleMediaTypes.add(getMostSpecificMediaType(r, p));     }   } } ... MediaType selectedMediaType = null; for (MediaType mediaType : mediaTypes) {   if (mediaType.isConcrete()) {     selectedMediaType = mediaType;     break;   }   // this is where problem occurs   else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {     selectedMediaType = MediaType.APPLICATION_OCTET_STREAM;     break;   } } if (selectedMediaType != null) { ... } throw new HttpMediaTypeNotAcceptableException(allSupportedMediaTypes); ```  1) getMostSpecificMediaType(""application/\*+pdf"", ""\*/\*"") will return ""application/\*+pdf"" since it is more specific. 2) however, in the following logic to process the selected media type, such non concrete case is not considered at all, which causes the exception to be thrown eventually.    ---  **Affects:** 3.2.2","closed","status: bulk-closed,","spring-projects-issues","2013-04-25T19:53:11Z","2019-01-12T03:43:10Z"
"","14863","DefaultMessageListenerContainer should expose an API to determine whether the consumer successfully connected to a topic/queue [SPR-10230]","**[Yehudit Glass](https://jira.spring.io/secure/ViewProfile.jspa?name=yglass)** opened **[SPR-10230](https://jira.spring.io/browse/SPR-10230?redirect=false)** and commented  `DefaultMessageListenerContainer` swallows JMS exceptions when it establishes or refreshes a connection and only logs a debug/warn message.  The problem is that code that uses `DefaultMessageListenerContainer` can't determine whether or not the connection refreshed successfully.   ---  **Affects:** 3.2 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b3af29b8f655176244f42cdf086f69ea25cd6038","closed","type: enhancement,","spring-projects-issues","2013-01-29T01:17:34Z","2013-02-01T06:11:49Z"
"","15442","make org.springframework.jdbc.core.namedparam.ParsedSql public accessible  [SPR-10816]","**[Yanming Zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=quaff)** opened **[SPR-10816](https://jira.spring.io/browse/SPR-10816?redirect=false)** and commented  method of ParsedSql are not public developers maybe want extract parameter names from sql  ParsedSql ps = NamedParameterUtils.parseSqlStatement(sql); //ps.getParameterNames() and other methods are not public  ---  **Issue Links:** - #20759 Expose parameter names from ParsedSql (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2013-08-07T17:10:19Z","2019-01-11T22:05:24Z"
"","15058","please let context:component-scan base-package eval placeholder then split by comma [SPR-10425]","**[Yanming Zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=quaff)** opened **[SPR-10425](https://jira.spring.io/browse/SPR-10425?redirect=false)** and commented  ```xml   ```  it doesn't works  must be  ```xml   ```  it's not friendly for variable packages  https://jira.springsource.org/browse/SPR-4351 https://jira.springsource.org/browse/SPR-10424  ---  **Reference URL:** https://jira.springframework.org/browse/SPR-4351  **Issue Links:** - #9030 Placeholders in context:component-scan's base-package attribute - #15057 make context:exclude-filter expression supports placeholder like context:component-scan base-package - #16862 Consistent Environment access in XML bean definition parsing code  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2013-03-28T22:27:31Z","2019-01-11T21:15:43Z"
"","15057","make context:exclude-filter expression supports placeholder like context:component-scan base-package  [SPR-10424]","**[Yanming Zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=quaff)** opened **[SPR-10424](https://jira.spring.io/browse/SPR-10424?redirect=false)** and commented  ```xml    ```  same to context:include-filter  ---  **Reference URL:** https://jira.springsource.org/browse/SPR-4351  **Issue Links:** - #9030 Placeholders in context:component-scan's base-package attribute - #15058 please let context:component-scan base-package eval placeholder then split by comma - #16862 Consistent Environment access in XML bean definition parsing code","closed","type: enhancement,","spring-projects-issues","2013-03-28T22:16:13Z","2019-01-11T21:17:38Z"
"","14829","SpringServletContainerInitializer do annotation scan even if metadata-complete=""true"" in web.xml [SPR-10196]","**[Yanming Zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=quaff)** opened **[SPR-10196](https://jira.spring.io/browse/SPR-10196?redirect=false)** and commented  I am using spring-3.2 and tomcat7 and set metadata-complete=""true"" in web.xml,I found my application will block for a while,if I remove META-INF/services from spring-web.jar,it will startup normally.please ignore SpringServletContainerInitializer if metadata-complete=""true"".  ---  **Affects:** 3.1 GA, 3.2 GA  **Attachments:** - [SPR-0000-war-xml.zip](https://jira.spring.io/secure/attachment/20899/SPR-0000-war-xml.zip) (_14.08 kB_)  **Issue Links:** - #14611 Possibility to disable WebApplicationInitializer (_**""duplicates""**_) - #16016 Spring 3.2.2+ on GlassFish 3.1 leads to IllegalArgumentException: PWC2788: setAttribute: Non-serializable attribute","closed","in: web,","spring-projects-issues","2013-01-20T17:13:34Z","2019-01-12T16:47:12Z"
"","14895","Jaxb2RootElementHttpMessageConverter doesn't work well with class with @XmlAnyElement [SPR-10262]","**[Yang](https://jira.spring.io/secure/ViewProfile.jspa?name=palleeda)** opened **[SPR-10262](https://jira.spring.io/browse/SPR-10262?redirect=false)** and commented  I have a Controller class returns a list wrapper because Jaxb won't work if just returning a List. So I built a wrapper class to use for the case where a list is returned.  ```java @RequestMapping(produces= { ""application/xml""} ) @ResponseBody public JaxbListWrapper listXML() {     List result = subnetService.findAllSubnets();     return new JaxbListWrapper( result ); } ```  Here is the JaxbListWrapper:  ```java @XmlRootElement(name=""list"") public class JaxbListWrapper {     private List items;          public JaxbListWrapper() {         items = new ArrayList();     }       public JaxbListWrapper(List items) {         this.items = items;     }       @XmlAnyElement(lax=true)     public List getItems() {         return items;     } } ```  (the above wrapper idea is from http://blog.bdoughan.com/2012/11/creating-generic-list-wrapper-in-jaxb.html)  But it wouldn't work in Spring MVC. And I will get this error of 'JAXBException: Contact nor any of its super class is known to this context'.  I looked into the code of Jaxb2RootElementHttpMessageConverter and realized that it is only creating a JaxbContext based on one class each. The JaxbContext doesn't contains Contact.class and thus the error.  One work around is to add `@XmlSeeAlso`({Contact.class}) in the JaxbListWrapper(). But that kind of defeated the purpose of a generic list wrapper.  I wonder: Option 1: if the Jaxb2RootElementHttpMessageConverter can be customized in a way so that  can be passed in as the marshaller and unmarshaller. JaxbMarshaller is already thread safe. Option 2: Or better, looking for  in the application context, if it is configured, just use that jaxbMarshaller as the default. It seems many people already assumed that if they config ', that would be what used by Jaxb2RootElementHttpMessageConverter  .  This issue is similar to: http://forum.springsource.org/showthread.php?129342-Spring-Roo-and-JAXBException-X-nor-any-of-its-super-class-is-known-to-this-context   ---  **Affects:** 3.2 GA, 3.2.1  **Reference URL:** http://forum.springsource.org/showthread.php?129342-Spring-Roo-and-JAXBException-X-nor-any-of-its-super-class-is-known-to-this-context  3 votes, 8 watchers","open","type: enhancement,","spring-projects-issues","2013-02-05T23:51:02Z","2019-01-11T21:32:00Z"
"","15053","FileNotFoundException when deploy war with spring beans configuration into OSGI container [SPR-10420]","**[xilai dai](https://jira.spring.io/secure/ViewProfile.jspa?name=xldai)** opened **[SPR-10420](https://jira.spring.io/browse/SPR-10420?redirect=false)** and commented  When deploy a war with  spring beans configuration into OSGI container (apache karaf), will got the exception like this:  11:33:57,717 | WARN  | Executor: 1      | hMatchingResourcePatternResolver  530 | 106 - org.springframework.core - 3.1.4.RELEASE | Cannot search for matching files underneath URL [bundleresource://220.fwk530654357:125/] because it does not correspond to a directory in the file system java.io.FileNotFoundException: URL [bundleresource://220.fwk530654357:125/] cannot be resolved to absolute file path because it does not reside in the file system: bundleresource://220.fwk530654357:125/ at org.springframework.util.ResourceUtils.getFile(ResourceUtils.java:205)[106:org.springframework.core:3.1.4.RELEASE]  After looking into the org.springframework.util.ResourceUtils, found the root cause which it didn't support the url start with ""bundleresource"" or ""bundle"".  A patch attached for 3.1.4.   ---  **Affects:** 3.1.4, 3.2.2  **Attachments:** - [patch.txt](https://jira.spring.io/secure/attachment/21120/patch.txt) (_1017 bytes_)","closed","status: bulk-closed,","spring-projects-issues","2013-03-27T00:37:18Z","2019-01-12T00:24:35Z"
"","14970","Spring MVC 3.1 auto-generate Json string will miss ""["" and ""]"" sometimes [SPR-10336]","**[Xiaoqiong Zhao](https://jira.spring.io/secure/ViewProfile.jspa?name=haidescs)** opened **[SPR-10336](https://jira.spring.io/browse/SPR-10336?redirect=false)** and commented  There is no any special config in xml file. If I use `partA`, it's good to return a valid Json, but if I use `PartB`, it returns an invalid Json String without ""["" and ""]"". Why???  **PartA**  Controller:  ```java @RequestMapping(value=""sitewithdetail/{SiteGourpId}"", method = RequestMethod.GET) public @ResponseBody SiteUserGroup siteWithDetail(@PathVariable long SiteGourpId) { 	return shs.constructSiteWithFunctions(SiteGourpId); } ```  Service:  ```java public SiteUserGroup constructSiteWithFunctions(long siteId){ 	SiteUserGroup sug = siteDao.retrieveOneSiteById(siteId);	 	List categoryList = categoryDao.RetrieveCategoryListBySite(siteId); 	for (int i=0;i0){ 		List  categoryTreeList = new ArrayList(); 		for (int i=0; i0){ 				List  functionTreeList = new ArrayList(); 				for (int j=0; j","closed","in: web,","spring-projects-issues","2013-02-26T21:35:17Z","2019-01-11T21:03:40Z"
"","14847","Add the possibility to use a prefix for cache names with CacheManager [SPR-10214]","**[Xavier Dury](https://jira.spring.io/secure/ViewProfile.jspa?name=kalgon)** opened **[SPR-10214](https://jira.spring.io/browse/SPR-10214?redirect=false)** and commented  I would like to share an EhCache cache manager between multiple applications deployed on the same server.  To do that, the cache manager is bound to JNDI but I need a cache/region prefix to avoid conflicts.  Is it possible to add a prefix to org.springframework.cache.support.AbstractCacheManager the same way it's done in Hibernate (hibernate.cache.region_prefix)?  In the meantime, I can wrap the CacheManager inside a custom PrefixedCacheManager.  Thanks,  Xavier   ---  **Affects:** 3.2 GA","closed","type: enhancement,","spring-projects-issues","2013-01-24T06:56:42Z","2014-05-05T06:40:20Z"
"","14956","idref documentation in chapter 5 - wrong example? [SPR-10322]","**[Wujek](https://jira.spring.io/secure/ViewProfile.jspa?name=wujek.srujek@gmail.com)** opened **[SPR-10322](https://jira.spring.io/browse/SPR-10322?redirect=false)** and commented  The documentation of the idref element here: http://static.springsource.org/spring/docs/3.2.1.RELEASE/spring-framework-reference/html/beans.html#beans-idref-element  has the following example:  ```        ```  However, I think it should be:  ```  ```  i.e. replace `value` with `ref` to reference the target bean. The XML with `value` doesn't work for me, the exception is:  > Caused by: java.lang.IllegalStateException: Cannot convert value of type [java.lang.String] to required type [test.service.PersonService] for property 'targetName': no matching editors or conversion strategy found    ---  **Affects:** 3.2.1","closed","in: core,","spring-projects-issues","2013-02-21T03:12:26Z","2019-01-12T05:27:22Z"
"","14952","Remove unnecessary null check in SystemEnvironmentPropertySource [SPR-10318]","**[Wujek](https://jira.spring.io/secure/ViewProfile.jspa?name=wujek.srujek@gmail.com)** opened **[SPR-10318](https://jira.spring.io/browse/SPR-10318?redirect=false)** and commented  The following code is to be found in `SystemEnvironmentPropertySource.getProperty`:  ```java         @Override 	public Object getProperty(String name) { 		Assert.notNull(name, ""property name must not be null""); 		String actualName = resolvePropertyName(name); 		if (actualName == null) { 			// at this point we know the property does not exist 			return null; 		} ... ```  So, the `resolvePropertyName` method is called to get `actualName`, but it has the following JavaDoc part:  > Never returns {`@code` null}.  and the code actually reflects this. This is also a private method, so can't be overridden in subclasses. In this case, the null check in `getProperty` is completely unnecessary and actually dead code.  I am not sure how this should be fixed - the resolve... method made protected or the check just deleted - so no pull request, no patch, sorry :(  ---  **Affects:** 3.2.1  **Issue Links:** - #14604 UnsupportedOperationException when accessing Environment with active SecurityManager  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/009d2a5efd456a37c29fd984be3087f09082c325","closed","in: core,","spring-projects-issues","2013-02-20T13:53:31Z","2019-01-13T21:04:16Z"
"","14933","documentation of metadata-driver autoproxying - reference to EJBs requiring XML [SPR-10299]","**[Wujek](https://jira.spring.io/secure/ViewProfile.jspa?name=wujek.srujek@gmail.com)** opened **[SPR-10299](https://jira.spring.io/browse/SPR-10299?redirect=false)** and commented  In http://static.springsource.org/spring/docs/3.2.1.RELEASE/spring-framework-reference/html/aop-api.html#aop-autoproxy-metadata is a sentence:  > Instead of using XML deployment descriptors as in EJB, configuration for transaction management and other enterprise services is held in source-level attributes.  This is long gone, nowadays nobody I know uses ejb-jar.xml any more, it's all EJB 3.x and annotations. Actually, I see more Spring XML configuration that EJB. Maybe the documentation could be changed a bit to explicitly say that it means pre 3.0 times?   ---  **Affects:** 3.2.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/81a929aed334e02e7aee59255f7d860232249300","closed","in: core,","spring-projects-issues","2013-02-14T13:49:10Z","2013-02-15T04:12:56Z"
"","14932","Docs for @Configurable injection say only prototypes can be used as templates, but singletons work as well [SPR-10298]","**[Wujek](https://jira.spring.io/secure/ViewProfile.jspa?name=wujek.srujek@gmail.com)** opened **[SPR-10298](https://jira.spring.io/browse/SPR-10298?redirect=false)** and commented  The documentation found here: http://static.springsource.org/spring/docs/3.2.1.RELEASE/spring-framework-reference/html/aop.html says:  > When used as a marker interface in this way, Spring will configure new instances of the annotated type (Account in this case) using a prototype-scoped bean definition (...)  and  > You can also use autowiring to avoid having to specify a prototype-scoped bean definition at all.  However, a singleton-scoped bean works just as well. I don't really know what the difference at runtime is, but the documentation is wrong and should be fixed. Take a project from this issue: https://jira.springsource.org/browse/SPR-10297, apply any of the workarounds there and see that it works with a singleton Person bean.   ---  **Affects:** 3.2.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8987ceea935aa76b48dded4a972a81b51e65145b","closed","in: core,","spring-projects-issues","2013-02-14T02:47:40Z","2013-02-15T04:09:01Z"
"","14931","StackOverflowError with CGLib proxies and introductions [SPR-10297]","**[Wujek](https://jira.spring.io/secure/ViewProfile.jspa?name=wujek.srujek@gmail.com)** opened **[SPR-10297](https://jira.spring.io/browse/SPR-10297?redirect=false)** and commented  I attach a project showcasing the problem. I have a `PersonService` that is 'mixed in' with aspectj introductions (I mix in a `Runnable`). Also, there is a Person domain class that should get the `PersonService` injected - it is a `@Configurable` and is woven with `org.springframework.beans.factory.aspectj.AnnotationBeanConfigurerAspect`. I use CGLib proxying for `PersonService` as it doesn't implement any interfaces (except for `GroovyObject`, which doesn't count here).  `PersonService` creates an instance of Person in its constructor, and this causes the following exception:  ``` Exception in thread ""main"" org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'personService' defined in class path resource [beans.xml]: Initialization of bean failed; nested exception is org.springframework.aop.framework.AopConfigException: Could not generate CGLIB subclass of class [class test.service.PersonService]: Common causes of this problem include using a final class or a non-visible class; nested exception is org.springframework.cglib.core.CodeGenerationException: org.springframework.aop.framework.AopConfigException-->Could not generate CGLIB subclass of class [class test.service.PersonService]: Common causes of this problem include using a final class or a non-visible class; nested exception is org.springframework.cglib.core.CodeGenerationException: org.springframework.aop.framework.AopConfigException-->Could not generate CGLIB subclass of class [class test.service.PersonService]: Common causes of this problem include using a final class or a non-visible class; nested exception is org.springframework.cglib.core.CodeGenerationException: org.springframework.aop.framework.AopConfigException-->Could not generate CGLIB subclass of class [class test.service.PersonService]: Common causes of this problem include using a final class or a non-visible class; nested exception is org.springframework.cglib.core.CodeGenerationException: org.springframework.aop.framework.AopConfigException-->Could not generate CGLIB subclass of class [class test.service.PersonService]: Common causes of this problem include using a final class or a non-visible class; nested exception is org.springframework.cglib.core.CodeGenerationException: org.springframework.aop.framework.AopConfigException-->Could not generate CGLIB subclass of class [class test.service.PersonService]: Common causes of this problem include using a final class or a non-visible class; nested exception is org.springframework.cglib.core.CodeGenerationException: org.springframework.aop.framework.AopConfigException-->Could not generate CGLIB subclass of class [                        class test.service.PersonService]: Common causes of this problem include using a final class or a non-visible class; nested exception is org.springframework.cglib.core.CodeGenerationException: org.springframework.aop.framework.AopConfigException-->Could not generate CGLIB subclass of class [class test.service.PersonService]: Common causes of this problem include using a final class or a non-visible class; nested exception is org.springframework.cglib.core.CodeGenerationException: org.springframework.aop.framework.AopConfigException-->Could not generate CGLIB subclass of class [class test.service.PersonService]: Common causes of this problem include using a final class or a non-visible class; nested exception is org.springframework.cglib.core.CodeGenerationException: org.springframework.aop.framework.AopConfigException-->Could not generate CGLIB subclass of class [class test.service.PersonService]: Common causes of this problem include using a final class or a non-visible class; nested exception is org.springframework.cglib.core.CodeGenerationException: org.springframework.aop.framework.AopConfigException-->Could not generate CGLIB subclass of class [class test.service.PersonService]: Common causes of this problem include using a final class or a non-visible class; nested exception is org.springframework.cglib.core.CodeGenerationException: org.springframework.aop.framework.AopConfigException-->Could not generate CGLIB subclass of class [class test.service.PersonService]: Common causes of this problem include using a final class or a non-visible class; nested exception is org.springframework.cglib.core.CodeGenerationException: org.springframework.aop.framework.AopConfigException-->Could not generate CGLIB subclass of class [class test.service.PersonService]: Common causes of this problem include using a final class or a non-visible class; nested exception is org.springframework.cglib.core.CodeGenerationException: org.springframework.aop.framework.AopConfigException-->Could not generate CGLIB subclass of class [clas                                                    s test.service.PersonService]: ... ```  which gets repeated many many times. Somewhere in between I see the following:  ``` nested exception is org.springframework.cglib.core.CodeGenerationException: java.lang.StackOverflowError-->null 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:532) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:461) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:295) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaletonBeanRegistry.java:223) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:292) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:626) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:932) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:479) 	at org.springframework.context.support.ClassPathXmlApplicationContext.(ClassPathXmlApplicationContext.java:139) 	at org.springframework.context.support.ClassPathXmlApplicationContext.(ClassPathXmlApplicationContext.java:83) 	at MainJava.main(MainJava.java:7) ```  The problem goes away when I: * disable the introduction of Runnable in `MyAspect` * comment out `MyAspect` bean from `beans.xml` (which disables the aspect, I suppose, and hence also disables the introduction) * move the '``' bit to be after all bean definitions  I don't know if I am doing something illegal here as far as proxies, weaving, and cglib are concerned, but there is no information anywhere in the docs (as far as I can tell) about it being illegal. Also, when the xml element is moved to the end it works fine (except that Person objects created early on don't get injection).  I attach a small project that shows the problem. Just issue:  ``` ./gradlew clean run ```  in the project's folder. This should generate a log of exception output.   ---  **Affects:** 3.2.1  **Attachments:** - [proxy_stack_overflow.tgz](https://jira.spring.io/secure/attachment/20951/proxy_stack_overflow.tgz) (_53.64 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/cab2e0c63ca201fada6eca5cc3344838c1a029c1, https://github.com/spring-projects/spring-framework-issues/commit/fd480c1cb65bfe0ee83d4611a6ccaf9048d20bfa","closed","in: core,","spring-projects-issues","2013-02-14T02:41:53Z","2019-01-12T16:24:23Z"
"","14929","Injection into @Configurable before aspect configured - documentation says it's a warning, but is debug [SPR-10295]","**[Wujek](https://jira.spring.io/secure/ViewProfile.jspa?name=wujek.srujek@gmail.com)** opened **[SPR-10295](https://jira.spring.io/browse/SPR-10295?redirect=false)** and commented  The documentation located here: http://static.springsource.org/spring/docs/3.2.1.RELEASE/spring-framework-reference/html/aop.html says:  > Instances of `@Configurable` objects created before the aspect has been configured will result in a warning being issued to the log and no configuration of the object taking place.  This is not the case, the actual output is being issues to the log at DEBUG level. Either the level or documentation should be fixed, as it is now confusing - setting the org.springframework logger to WARN won't show the issue!  > 10:23:01.034 [main] DEBUG org.springframework.beans.factory.wiring.BeanConfigurerSupport - BeanFactory has not been set on BeanConfigurerSupport: Make sure this configurer runs in a Spring container. Unable to configure bean of type [test.domain.Person]. Proceeding without injection.  Sample project attached, just issue:  > ./gradlew clean run | grep injection  or similar.   ---  **Affects:** 3.2.1  **Attachments:** - [aspect_warning.tgz](https://jira.spring.io/secure/attachment/20950/aspect_warning.tgz) (_53.49 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f0787bdb86d309d7070e4054bc6be953a3d0c124","closed","in: core,","spring-projects-issues","2013-02-14T01:29:55Z","2013-02-15T04:31:10Z"
"","14921","spring-aop introduction into Groovy class don't work [SPR-10287]","**[Wujek](https://jira.spring.io/secure/ViewProfile.jspa?name=wujek.srujek@gmail.com)** opened **[SPR-10287](https://jira.spring.io/browse/SPR-10287?redirect=false)** and commented  Attached a simple Groovy 2.1.0 and Gradle 1.4 project. Introducing types into Java classes works fine, but into Groovy classes does not, although the bean can be cast to the introduced interface type (Runnable in this case). The exception is:  > Exception in thread ""main"" groovy.lang.MissingMethodException: No signature of method: test.service.PersonServiceGroovy.run() is applicable for argument types: () values: [] > Possible solutions: grep(), dump(), find(), any(), print(java.io.PrintWriter), grep(java.lang.Object) > at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.unwrap(ScriptBytecodeAdapter.java:55) > at org.codehaus.groovy.runtime.callsite.PogoMetaClassSite.call(PogoMetaClassSite.java:51) > at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:45) > at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:108) > at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:112) > at Main.run(Main.groovy:8) > at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) > at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) > at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) > at java.lang.reflect.Method.invoke(Method.java:601) > at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:90) > at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:233) > at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1085) > at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:909) > at org.codehaus.groovy.runtime.InvokerHelper.invokePogoMethod(InvokerHelper.java:848) > at org.codehaus.groovy.runtime.InvokerHelper.invokeMethod(InvokerHelper.java:831) > at org.codehaus.groovy.runtime.InvokerHelper.runScript(InvokerHelper.java:407) > at org.codehaus.groovy.runtime.InvokerHelper$runScript.call(Unknown Source) > at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:45) > at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:108) > at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:120) > at Main.main(Main.groovy)    ---  **Affects:** 3.2.1  **Attachments:** - [aop_introduction_groovy.tgz](https://jira.spring.io/secure/attachment/20942/aop_introduction_groovy.tgz) (_46.12 kB_)","closed","status: bulk-closed,","spring-projects-issues","2013-02-13T03:34:12Z","2019-01-12T02:33:43Z"
"","14920","Allow for @DeclareParents.defaultImpl to be optional, as suggested in AspectJ's javadoc [SPR-10286]","**[Wujek](https://jira.spring.io/secure/ViewProfile.jspa?name=wujek.srujek@gmail.com)** opened **[SPR-10286](https://jira.spring.io/browse/SPR-10286?redirect=false)** and commented  If one doesn't specify the defaultImpl value, the application explodes at runtime with the following:  > Caught: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'personService' defined in class path resource [beans.xml]: BeanPostProcessor before instantiation of bean failed; nested exception is java.lang.IllegalStateException: defaultImpl must be set on DeclareParents > org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'personService' defined in class path resource [beans.xml]: BeanPostProcessor before instantiation of bean failed; nested exception is java.lang.IllegalStateException: defaultImpl must be set on DeclareParents > at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:457) > at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:295) > at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223) > at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:292) > at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194) > at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:626) > at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:932) > at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:479) > at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:139) > at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:83) > at Main.run(Main.groovy:4) > at com.intellij.rt.execution.application.AppMain.main(AppMain.java:120) > Caused by: java.lang.IllegalStateException: defaultImpl must be set on DeclareParents > at org.springframework.aop.aspectj.annotation.ReflectiveAspectJAdvisorFactory.getDeclareParentsAdvisor(ReflectiveAspectJAdvisorFactory.java:159) > at org.springframework.aop.aspectj.annotation.ReflectiveAspectJAdvisorFactory.getAdvisors(ReflectiveAspectJAdvisorFactory.java:119) > at org.springframework.aop.aspectj.annotation.BeanFactoryAspectJAdvisorsBuilder.buildAspectJAdvisors(BeanFactoryAspectJAdvisorsBuilder.java:109) > at org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator.findCandidateAdvisors(AnnotationAwareAspectJAutoProxyCreator.java:87) > at org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator.shouldSkip(AspectJAwareAdvisorAutoProxyCreator.java:108) > at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessBeforeInstantiation(AbstractAutoProxyCreator.java:276) > at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInstantiation(AbstractAutowireCapableBeanFactory.java:894) > at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.resolveBeforeInstantiation(AbstractAutowireCapableBeanFactory.java:866) > at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:451) > ... 11 more  whereas the code for `@DefaultParents` (at least in version 3.2.1.RELEASE) says it is optional:  ``` /**  * Optional class defining default implementation  * of interface members (equivalent to defining  * a set of interface member ITDs for the  * public methods of the interface).  */ Class defaultImpl() default DeclareParents.class; ```  The code at the place that throws the exception has a comment:  ``` if (DeclareParents.class.equals(declareParents.defaultImpl())) {     // This is what comes back if it wasn't set. This seems bizarre...     // TODO this restriction possibly should be relaxed     throw new IllegalStateException(""defaultImpl must be set on DeclareParents""); } ```  This should be made consistent across the documentation and code.   ---  **Affects:** 3.2.1","closed","status: bulk-closed,","spring-projects-issues","2013-02-13T02:59:38Z","2019-01-12T02:34:41Z"
"","14919","No way to specify @Pointcut that matches either a method or a class level annotation, binding expression do not short-circuit [SPR-10285]","**[Wujek](https://jira.spring.io/secure/ViewProfile.jspa?name=wujek.srujek@gmail.com)** opened **[SPR-10285](https://jira.spring.io/browse/SPR-10285?redirect=false)** and commented  I have a simple annotation:  ``` @Retention(RetentionPolicy.RUNTIME) @Target([ElementType.TYPE, ElementType.METHOD]) public @interface Tx {      String value() default ''; } ```  which I can apply either on a method or class level (which would then mean it applies to all methods). In my aspect, I have the following pointcut and advice:  ``` @Pointcut('within(test.service..*) && !execution(* getMetaClass())') void serviceMethods() {}  @Around(value = 'serviceMethods() && (@annotation(txmethod) || @target(txclass))', argNames = 'txmethod, txclass') Object aroundService_inconsistentBinding(ProceedingJoinPoint pjp, Tx txmethod, Tx txclass) {     println "">>> before $pjp.signature.name with '${txValue(txmethod, txclass)}'""     pjp.proceed() }  private String txValue(Tx txmethod, Tx txclass) {     txmethod ? txmethod.value() : txclass.value() } ```  and a simple usage class:  ``` //@Tx('class') class PersonService {      @Tx('method')     void method() {     } } ```  This fails at runtime with the following exception:  > Caught: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'personService' defined in class path resource [beans.xml]: Initialization of bean failed; nested exception is java.lang.IllegalArgumentException: error at ::0 inconsistent binding > org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'personService' defined in class path resource [beans.xml]: Initialization of bean failed; nested exception is java.lang.IllegalArgumentException: error at ::0 inconsistent binding > at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:532) > at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:461) > at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:295) > at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223) > at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:292) > at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194) > at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:626) > at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:932) > at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:479) > at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:139) > at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:83) > at Main.run(Main.groovy:5) > at com.intellij.rt.execution.application.AppMain.main(AppMain.java:120) > Caused by: java.lang.IllegalArgumentException: error at ::0 inconsistent binding > at org.aspectj.weaver.tools.PointcutParser.parsePointcutExpression(PointcutParser.java:301) > at org.springframework.aop.aspectj.AspectJExpressionPointcut.buildPointcutExpression(AspectJExpressionPointcut.java:208) > at org.springframework.aop.aspectj.AspectJExpressionPointcut.buildPointcutExpression(AspectJExpressionPointcut.java:194) > at org.springframework.aop.aspectj.AspectJExpressionPointcut.checkReadyToMatch(AspectJExpressionPointcut.java:183) > at org.springframework.aop.aspectj.AspectJExpressionPointcut.getClassFilter(AspectJExpressionPointcut.java:164) > at org.springframework.aop.support.AopUtils.canApply(AopUtils.java:208) > at org.springframework.aop.support.AopUtils.canApply(AopUtils.java:262) > at org.springframework.aop.support.AopUtils.findAdvisorsThatCanApply(AopUtils.java:294) > at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findAdvisorsThatCanApply(AbstractAdvisorAutoProxyCreator.java:118) > at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findEligibleAdvisors(AbstractAdvisorAutoProxyCreator.java:88) > at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.getAdvicesAndAdvisorsForBean(AbstractAdvisorAutoProxyCreator.java:69) > at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.wrapIfNecessary(AbstractAutoProxyCreator.java:359) > at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization(AbstractAutoProxyCreator.java:322) > at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:412) > at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1492) > at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:524) > ... 12 more  Why is the binding inconsistent?  So, I tried to replace the advice with the following:  ``` @Around('serviceMethods() && (@annotation(tx) || @target(tx))') Object aroundService_alwaysClassLevelUsed(ProceedingJoinPoint pjp, Tx tx) {     println "">>> before '$pjp.signature' with '${tx.value()}'""     pjp.proceed() } ```  Now, I get a NPE:  > Caught: java.lang.NullPointerException: Cannot invoke method value() on null object > java.lang.NullPointerException: Cannot invoke method value() on null object > at test.aop.MyAspect.aroundService_alwaysClassLevelUsed(MyAspect.groovy:24) > at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:621) > at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:610) > at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:65) > at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:161) > at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:91) > at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172) > at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:631) > at test.service.PersonService$$EnhancerByCGLIB$$aa5c5d10.method(\) > at test.service.PersonService$method.call(Unknown Source) > at Main.run(Main.groovy:8)  The problem is that the binding expression is not short-circuit, i.e., the annotation on the method is found, but spring (or is it aspectj?) binds further and bind a null Tx annotation on the class level to the parameter. This can be easily checked when the PersonService class has both class-level and method-level annotations configured.  I attach a groovy-2.1.0 and gradle-1.4 based project to help easily reproduce this issue. Just invoke  ```none ./gradlew clean run ```  in the project folder. I also configured remote debugging so, but it doesn't suspend the JVM - change line 78 of build.gradle accordingly.   ---  **Affects:** 3.2.1  **Attachments:** - [aop_annotation_method_or_class.tgz](https://jira.spring.io/secure/attachment/20941/aop_annotation_method_or_class.tgz) (_46.39 kB_)","closed","status: bulk-closed,","spring-projects-issues","2013-02-13T02:34:47Z","2019-01-12T02:34:44Z"
"","15313","InternalResourceViewResolver process with 404 result [SPR-10685]","**[William](https://jira.spring.io/secure/ViewProfile.jspa?name=murainwood)** opened **[SPR-10685](https://jira.spring.io/browse/SPR-10685?redirect=false)** and commented  My configuration:  ```xml       SpringDispatcherServlet      /mvc/*  ```  ```xml               ```  ``` /webapp/portal/gate.jsp              /other/... ```  ```java String doSometing(String params){            return ""portal/gate.jsp"" } ```  In our production server, the application context path is root (""/"") and it works well. But when I change the context path to others, we only got 404 error.  `InternalResourceViewResolver` process with 404 result.    ---  **Affects:** 3.2.3  **Reference URL:** http://stackoverflow.com/questions/3878957/basic-spring-mvc-config-pagenotfound-using-internalresourceviewresolver","closed","status: bulk-closed,","spring-projects-issues","2013-06-24T20:40:55Z","2019-01-12T00:23:24Z"
"","15454","JaxB2Marshaller passes null InputSource to SaxSource constructor under certain condition [SPR-10828]","**[William Gorder](https://jira.spring.io/secure/ViewProfile.jspa?name=wgorder)** opened **[SPR-10828](https://jira.spring.io/browse/SPR-10828?redirect=false)** and commented  This appears to be a regression, since the error did not occur in 3.2.0.RELEASE.  A work around is to create the StreamSource using an InputStream rather than a File.  What happens is this:  When creating a StreamSource with a file input i.e.  ``` jaxb2Marshaller             .unmarshal(new StreamSource(new ClassPathResource(""my-resource-descriptor.xml"")                 .getFile())); ```  in the processSource(...) method the first if/else block is skipped (since its a file and the new SaxSource is created with a null inputSource.  This results in a null pointer exception down stream.  ```        private Source processSource(Source source) {               if (StaxUtils.isStaxSource(source) || source instanceof DOMSource) {                      return source;               }                XMLReader xmlReader = null;               InputSource inputSource = null;                if (source instanceof SAXSource) {                      SAXSource saxSource = (SAXSource) source;                      xmlReader = saxSource.getXMLReader();                      inputSource = saxSource.getInputSource();               }               else if (source instanceof StreamSource) {                      StreamSource streamSource = (StreamSource) source;                      if (streamSource.getInputStream() != null) {                            inputSource = new InputSource(streamSource.getInputStream());                      }                      else if (streamSource.getReader() != null) {                            inputSource = new InputSource(streamSource.getReader());                      }               }                try {                      if (xmlReader == null) {                            xmlReader = XMLReaderFactory.createXMLReader();                      }                      xmlReader.setFeature(""http://xml.org/sax/features/external-general-entities"",                                   this.processExternalEntities);                       return new SAXSource(xmlReader, inputSource); //input source is null here, if using File               }               catch (SAXException ex) {                      logger.warn(""Processing of external entities could not be disabled"", ex);                      return source;               }        } ```  Here is an excerpt from the null pointer  java.lang.NullPointerException at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.parse(AbstractSAXParser.java:1203) at com.sun.xml.internal.bind.v2.runtime.unmarshaller.UnmarshallerImpl.unmarshal0(UnmarshallerImpl.java:203) at com.sun.xml.internal.bind.v2.runtime.unmarshaller.UnmarshallerImpl.unmarshal(UnmarshallerImpl.java:175) at javax.xml.bind.helpers.AbstractUnmarshallerImpl.unmarshal(AbstractUnmarshallerImpl.java:140) at javax.xml.bind.helpers.AbstractUnmarshallerImpl.unmarshal(AbstractUnmarshallerImpl.java:123) at org.springframework.oxm.jaxb.Jaxb2Marshaller.unmarshal(Jaxb2Marshaller.java:738) at org.springframework.oxm.jaxb.Jaxb2Marshaller.unmarshal(Jaxb2Marshaller.java:720) at   ---  **Affects:** 3.2.4  1 votes, 2 watchers","closed","type: bug,","spring-projects-issues","2013-08-12T06:38:05Z","2013-08-29T16:20:40Z"
"","15361","TilesConfigurer for tiles 3 support is unusable if you use a custom TilesInitializer [SPR-10733]","**[William Gorder](https://jira.spring.io/secure/ViewProfile.jspa?name=wgorder)** opened **[SPR-10733](https://jira.spring.io/browse/SPR-10733?redirect=false)** and commented  Basically I was reviewing a blog here: http://tech.finn.no/2012/07/25/the-ultimate-view-tiles-3/4/  Clearly the blog author did not write a sample application that actually worked.  The problem is this:  When you set a custom tilesConfigurer on the Spring TilesConfigurer in afterPropertiesSet() the custom initializer gets used (that works), but most of the other properties that you can set are then ignored as they are all used by the SpringTilesInitializer which never gets created.  So in this case I basically have had to copy and paste the entire TilesConfigurer.class and add my one override method to private SpringTilesContainerFactory class.  To me it seems pointless to even offer a setTilesInitializer() in this case.  There should at the very least be warning that most other properties that are set will then be ignored.  Maybe I am missing something here but I don't see a way to extend what is there in this case.   ---  **Affects:** 3.2.3","closed","status: declined,","spring-projects-issues","2013-07-10T12:48:34Z","2013-07-19T12:04:33Z"
"","15048","determineDatabaseDialectClass in HibernateJpaVendorAdapter uses classes deprecated in Hibernate 4.x [SPR-10415]","**[William Gorder](https://jira.spring.io/secure/ViewProfile.jspa?name=wgorder)** opened **[SPR-10415](https://jira.spring.io/browse/SPR-10415?redirect=false)** and commented  `determineDatabaseDialectClass` in `HibernateJpaVendorAdapter` uses classes deprecated in Hibernate 4.x.  The deprecated classes are:  ```java org.hibernate.dialect.DerbyDialect org.hibernate.dialect.PostgreSQLDialect ```  The fix for this would have to detect the version of Hibernate on the classpath.  And the Derby one is slightly more complex as it depends on the version of Derby.  I know there is already special handling for various version of Derby in `DerbyEmbeddedDatabaseConfigurer`.  Must the same would have to be done here.    ---  **Affects:** 3.2.2","closed","status: declined,","spring-projects-issues","2013-03-25T08:10:48Z","2014-01-15T09:06:20Z"
"","14973","Clarify DefaultLobHandler's applicability to Oracle 10g/11g [SPR-10339]","**[Will Schipp](https://jira.spring.io/secure/ViewProfile.jspa?name=willschipp)** opened **[SPR-10339](https://jira.spring.io/browse/SPR-10339?redirect=false)** and commented  At present, the documentation refers to 'limited support for Oracle10g' and suggests the use of OracleLobHandler.  the LobHandler interface says it should 'basically' work with limitations on LOB sizes.  Can these statements please be clarified?  Thanks   ---  **Affects:** 3.2.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/99c7f25b053daaf20cf850807cd3f8fea244971b, https://github.com/spring-projects/spring-framework/commit/2bd584ca751f4ea805f59948494f47b9dffd3315","closed","type: enhancement,","spring-projects-issues","2013-02-27T14:02:29Z","2013-03-01T12:55:48Z"
"","15325","Spring Corrupting Data on submit - ""5"" turns into ""5,5"", turns into ""5,5,5,5"", etc... [SPR-10697]","**[Will Dev](https://jira.spring.io/secure/ViewProfile.jspa?name=willdev)** opened **[SPR-10697](https://jira.spring.io/browse/SPR-10697?redirect=false)** and commented  See attached file ""Screenshots.png"" for a straightforward description of what's happening.  Spring MVC is majorly corrupting submitted data. We start with a text field with ""10"" in it, we submit it and re-display the exact same data that we just submitted, and it's been turned into ""10,10"". Resumbit it again, we get ""10,10,10,10""...etc etc.  I created a fairly straightforward test case to reproduce this problem (see attached files).   ---  **Affects:** 3.1.1  **Attachments:** - [edit_tokenization_add_software_version.jsp](https://jira.spring.io/secure/attachment/21262/edit_tokenization_add_software_version.jsp) (_3.44 kB_) - [Screenshots.png](https://jira.spring.io/secure/attachment/21263/Screenshots.png) (_24.90 kB_) - [SoftwareNameVO.java](https://jira.spring.io/secure/attachment/21264/SoftwareNameVO.java) (_1.21 kB_) - [SoftwareVendorVO.java](https://jira.spring.io/secure/attachment/21265/SoftwareVendorVO.java) (_1.23 kB_) - [SoftwareVersionVO.java](https://jira.spring.io/secure/attachment/21266/SoftwareVersionVO.java) (_967 bytes_) - [TestSpringCommaBugController.java](https://jira.spring.io/secure/attachment/21261/TestSpringCommaBugController.java) (_1.57 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/e3588bf5886f2ab77273de4809779ca10ee1c213","closed","status: invalid,","spring-projects-issues","2013-06-26T16:34:42Z","2019-01-12T05:26:49Z"
"","15075","Corrupt Data - data on second page of submit is corrupted when referenced via ""path"" attribute (but is fine when referenced using jstl) [SPR-10442]","**[Will Dev](https://jira.spring.io/secure/ViewProfile.jspa?name=willdev)** opened **[SPR-10442](https://jira.spring.io/browse/SPR-10442?redirect=false)** and commented  See attached pictured called ""Spring MVC Bug - Screenshot"" for the fastest explanation.  When - 1. A form's modelAttribute value is the same as the class name (or starts with the classname - softwareVendorVO2 had the same problem) 2. Data is referenced through the path variable on a form item 3. indexes are used 4. A page is submitted 5. On the new page - despite the data being sent to the page being completely new - it's displaying totally different data.  You can see from the screenshot - the actual data, being referenced by jstl and ${}, is correct. But the data displayed via the path="""" attribute is completely wrong and different data. (In the controller, the data on the 2nd page is not from the first page - it's completely newly created data).  This is causing problems where: 1. The checkboxes on the second page are blank - even though they **should** be checked 2. I'm having issues where string labels are having the same problem - the second page has the values from the first page, even though it **should** have a completely new set of values 3. Sometimes I'm seeing corruption in the string data - a value like ""bob"" is showing up on the second page as ""bob,bob"" or ""bob,bob,bob"", etc.  Note that the attached files only show problem #1 - I just didn't have time to reproduce test cases for #2 and #3.  But all problems go away when the modelAttribute name is changed to something that's not the same as the class name.  But it's VERY COMMON, as far as I know (as that's what everyone on our team did by default) to use the classname as the model name. This just shouldn't be happening, something is getting corrupted or something somewhere.   ---  **Affects:** 3.2.2  **Attachments:** - [edit_page.jsp](https://jira.spring.io/secure/attachment/21141/edit_page.jsp) (_1.08 kB_) - [SoftwareNameVO.java](https://jira.spring.io/secure/attachment/21142/SoftwareNameVO.java) (_649 bytes_) - [SoftwareVendorVO.java](https://jira.spring.io/secure/attachment/21143/SoftwareVendorVO.java) (_651 bytes_) - [Spring MVC Bug - Screenshots.png](https://jira.spring.io/secure/attachment/21140/Spring+MVC+Bug+-+Screenshots.png) (_69.07 kB_) - [TestSpringBugController.java](https://jira.spring.io/secure/attachment/21144/TestSpringBugController.java) (_1.41 kB_) - [view_page.jsp](https://jira.spring.io/secure/attachment/21145/view_page.jsp) (_855 bytes_)","closed","status: bulk-closed,","spring-projects-issues","2013-04-04T17:23:56Z","2019-01-12T00:24:19Z"
"","14959","Allow for ignoreResourceNotFound on @PropertySource [SPR-10325]","**[Wesley Hall](https://jira.spring.io/secure/ViewProfile.jspa?name=wesleyhall)** opened **[SPR-10325](https://jira.spring.io/browse/SPR-10325?redirect=false)** and commented  It doesn't appear to be possible to set up `@PropertySource` annotations that refer to non-existent files.  It can be quite useful to allow for optional configuration files, for example, `~/.application/application.properties` to allow for the optional overriding of configuration properties on a per user basis. I might not have the file, but if I do, it's values should override the defaults.  It is possible to achieve this behaviour with '`setIgnoreResourceNotFound`' on the `PropertyPlaceholderConfigurer`, but the new `@PropertySource` annotation will throw a `FileNotFoudException` and the application context fails to start.  Consider adding an attribute to `@PropertySource` to allow for this behaviour, and potentially a `@PropertySources` annotation which can be configured with an array of `@PropertySource` values to allow for file configuration on a per file basis.  ---  **Affects:** 3.2.1  **Issue Links:** - #13018 Add `@PropertySources` annotation and support ignoreResourceNotFound (_**""duplicates""**_)  11 votes, 10 watchers","closed","has: votes-jira,","spring-projects-issues","2013-02-22T10:05:08Z","2019-01-13T07:00:58Z"
"","15109","Gradle build failing :spring-aspects:compileJava [SPR-10476]","**[Wendell Brown](https://jira.spring.io/secure/ViewProfile.jspa?name=wfbrown53)** opened **[SPR-10476](https://jira.spring.io/browse/SPR-10476?redirect=false)** and commented  Attempting to build fetched: https://github.com/SpringSource/spring-framework/tags/v3.2.2.RELEASE fails gradle build.  following are captured CMD output...  D:\JavaSource\Spring3\v3.2.2.RELEASE>gradle -v  ---  Gradle 1.5  ---  Gradle build time: Wednesday, March 27, 2013 1:51:06 PM UTC Groovy: 1.8.6 Ant: Apache Ant(TM) version 1.8.4 compiled on May 22 2012 Ivy: 2.2.0 JVM: 1.7.0_21 (Oracle Corporation 23.21-b01) OS: Windows 7 6.1 amd64  D:\JavaSource\Spring3\v3.2.2.RELEASE>gradle check ... :compileTestGroovy UP-TO-DATE :processTestResources :testClasses :test :check :spring-aop:test :spring-aop:check :spring-aspects:compileJava D:\JavaSource\Spring3\v3.2.2.RELEASE\spring-aspects\src\main\java\org\springframework\cache\aspectj\AspectJCachingConfiguration.java:40: error: cannot find symbol public AnnotationCacheAspect cacheAspect() { ^ symbol:   class AnnotationCacheAspect location: class AspectJCachingConfiguration ...  ---  **Affects:** 3.2.2  **Reference URL:** https://github.com/SpringSource/spring-framework/tags/v3.2.2.RELEASE","closed","status: bulk-closed,","spring-projects-issues","2013-04-20T10:48:22Z","2019-01-13T21:03:48Z"
"","15150","Fix getters to match setters in RequestMappingHandlerAdapter [SPR-10519]","**[Wanyoung Oh](https://jira.spring.io/secure/ViewProfile.jspa?name=mizniz)** opened **[SPR-10519](https://jira.spring.io/browse/SPR-10519?redirect=false)** and commented  ```                                                        ```  When I try to inject bean, Spring throws exception.  ``` org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0' defined in ServletContext resource [/WEB-INF/contexts/context-servlet.xml]: Error setting property values; nested exception is org.springframework.beans.NotWritablePropertyException: Invalid property 'returnValueHandlers' of bean class [org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter]: Bean property 'returnValueHandlers' is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter? ```  Because setter and getter of RequestMappingHandlerAdapter.returnValueHandlers have diffrent type.  ``` HandlerMethodReturnValueHandlerComposite getReturnValueHandlers() void setReturnValueHandlers(List returnValueHandlers) ```    ---  **Affects:** 3.1.4","closed","type: bug,","spring-projects-issues","2013-05-05T06:46:17Z","2013-07-24T10:17:07Z"
"","14861","DefaultHandlerExceptionResolver hidden Exception (HttpMessageNotWritableException) silently [SPR-10228]","**[Wang Yong](https://jira.spring.io/secure/ViewProfile.jspa?name=yong)** opened **[SPR-10228](https://jira.spring.io/browse/SPR-10228?redirect=false)** and commented  In Spring 3.1.1-RELEASE. If there is not any `@ExceptionHandler` or `@ResponseStatus` in controller, but use `@ResponseBody` and customized Http Message Converter (extends from AbstractHttpMessageConverter). In customized http message converter, say CustomizedHttpMessageConverter, method: writeInternal, if we throw exception: HttpMessageNotWritableException, this exception will be handled by DefaultHandlerExceptionResolver (method: handleConversionNotSupported) and return just a 500 with empty ModelAndView. This hidden the exception throw by CustomizedHttpMessageConverter. Below are sample codes:  ```java CustomizedHttpMessageConverter extends AbstractHttpMessageConverter {  ..... 	@Override 	protected void writeInternal(Object o, HttpOutputMessage outputMessage) 			throws IOException, HttpMessageNotWritableException { 	 		JsonGenerator jsonGenerator = 				this.objectMapper.getJsonFactory().createJsonGenerator(getHttpServletResponse().getWriter()); 		if(outputMessage instanceof ServerHttpResponse){ 			((ServerHttpResponse)outputMessage).close(); //writes headers 		} 		try { 			if (this.prefixJson) { 				jsonGenerator.writeRaw(""{} && ""); 			} 			this.objectMapper.writeValue(jsonGenerator, o); 		} 		catch (JsonGenerationException ex) { 			throw new HttpMessageNotWritableException(""Could not write JSON: "" + ex.getMessage(), ex); 			// log the exception here. 		} 	}  .....  } ```  Although we can log that exception in try catch block, I think this is still an issue should be handled by spring framework. Also, other handlexxxx method of DefaultHandlerExceptionResolver has similar issue.  Thanks, Yong    --- No further details from [SPR-10228](https://jira.spring.io/browse/SPR-10228?redirect=false)","closed","status: declined,","spring-projects-issues","2013-01-28T17:04:02Z","2019-01-12T16:24:26Z"
"","15251","JSR-303 validation doesn't work with nested properties in case of direct field access [SPR-10623]","**[Vladimir Kralik](https://jira.spring.io/secure/ViewProfile.jspa?name=vkralik)** opened **[SPR-10623](https://jira.spring.io/browse/SPR-10623?redirect=false)** and commented  When I use org.springframework.validation.Validator, the IllegalStateException is thrown.  The javax.validation.Validator works correctly.  Look at attached JUnit-test ( also as an maven project in attachement ).  ``` package com.asseco.ce.valid;  import javax.validation.Valid; import javax.validation.constraints.NotNull;  public class A {        @NotNull     @Valid     private B b;      public B getB() {         return b;     }     public void setB(B b) {         this.b = b;     } } ```  ``` package com.asseco.ce.valid; import org.hibernate.validator.constraints.NotBlank;  public class B {     @NotBlank     private String value;      public String getValue() {         return value;     }     public void setValue(String value) {         this.value = value;     } } ```  ```        ```  ``` package com.asseco.ce.valid; import org.junit.Before; import org.junit.Test; import org.junit.runner.RunWith; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.test.context.ContextConfiguration; import org.springframework.test.context.junit4.SpringJUnit4ClassRunner; import org.springframework.validation.DirectFieldBindingResult; import org.springframework.validation.Errors; import org.springframework.validation.Validator;  import com.asseco.ce.valid.A; import com.asseco.ce.valid.B;  import static org.junit.Assert.*;  @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(locations = { ""ValidationIntegrationTest.xml"" } ) public class ValidationIntegrationTest {      @Autowired private Validator springValidator;     @Autowired private javax.validation.Validator jsr303Validator;          private A a;          @Before     public void before() {         a = new A();         a.setB(new B());     }     @Test     public void jsr303() {         assertEquals(1, jsr303Validator.validate(a).size());     }        @Test     public void spring() {         Errors errors = new DirectFieldBindingResult(a, ""A"");         springValidator.validate(a, errors);         assertEquals(1, errors.getAllErrors().size());     } } ```  ``` java.lang.IllegalStateException: JSR-303 validated property 'b.value' does not have a corresponding accessor for Spring data binding - check your DataBinder's configuration (bean property versus direct field access) 	at org.springframework.validation.beanvalidation.SpringValidatorAdapter.processConstraintViolations(SpringValidatorAdapter.java:152) 	at org.springframework.validation.beanvalidation.SpringValidatorAdapter.validate(SpringValidatorAdapter.java:89) 	at com.asseco.ce.valid.ValidationIntegrationTest.spring(ValidationIntegrationTest.java:42) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) 	at java.lang.reflect.Method.invoke(Unknown Source) 	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45) 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15) 	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42) 	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20) 	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28) 	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74) 	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:83) 	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:72) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:231) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:88) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222) 	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) 	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:71) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:300) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:174) 	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50) 	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197) Caused by: org.springframework.beans.NotReadablePropertyException: Invalid property 'b.value' of bean class [com.asseco.ce.valid.A]: Field 'b.value' does not exist 	at org.springframework.beans.DirectFieldAccessor.getPropertyValue(DirectFieldAccessor.java:106) 	at org.springframework.validation.AbstractPropertyBindingResult.getActualFieldValue(AbstractPropertyBindingResult.java:99) 	at org.springframework.validation.AbstractBindingResult.getRawFieldValue(AbstractBindingResult.java:275) 	at org.springframework.validation.beanvalidation.SpringValidatorAdapter.processConstraintViolations(SpringValidatorAdapter.java:137) 	... 31 more   ```  ---  **Affects:** 3.2.3  **Attachments:** - [valid.tar.gz](https://jira.spring.io/secure/attachment/21228/valid.tar.gz) (_1.81 kB_)  **Issue Links:** - #14339 org.springframework.beans.DirectFieldAccessor fails to go through field paths recursively  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bc714888c4f0b970792e29f1e3e7bb8682d60cb4  1 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2013-06-04T03:41:40Z","2019-01-11T22:25:54Z"
"","14941","Concurrent creation of the same Configuration class in different contexts is not thread-safe [SPR-10307]","**[Vivien HENRIET](https://jira.spring.io/secure/ViewProfile.jspa?name=bubuabu)** opened **[SPR-10307](https://jira.spring.io/browse/SPR-10307?redirect=false)** and commented  The `refresh()` method of `AnnotationConfigApplicationContext` is not thread safe anymore. It works fine in 3.1.2. The regression has bean introduce with the 3.1.3 release.  To reproduce: -create 2 application contexts -register the same configuration class -call the refresh method on application context simultaneously  Now, there is a good chance that both application context share the same beans.  A small Java program is attached to reproduce the issue.  ---  **Affects:** 3.1.3, 3.1.4, 3.2.1, 3.2.2  **Attachments:** - [threadsafe.zip](https://jira.spring.io/secure/attachment/20954/threadsafe.zip) (_2.46 kB_)  **Issue Links:** - #15564 Use of same `@Configuration` class across multiple ApplicationContexts is not threadsafe (_**""is duplicated by""**_) - #10601 Singleton-scoped `@Bean` methods behave like prototypes in a Spring DM environment - #14484 Prevent memory leaks with `@Configuration` beans - #13912 Java config FactoryBean proxy causes class loader leak - #15173 Creating ApplicationContexts from multiple threads causes ConcurrentModificationException  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/30b21a987e93f732e155e5282760489f893790e6, https://github.com/spring-projects/spring-framework/commit/640555194ba5945fdb03b6cd862e0bcc786d5d3d, https://github.com/spring-projects/spring-framework/commit/fffeaee647d3f24606ca8f4c0d607b33f1b52729  0 votes, 6 watchers","closed","type: regression,","spring-projects-issues","2013-02-16T04:50:57Z","2019-01-13T07:01:03Z"
"","15051","ScheduledTaskRegistrar should allow for completing current tasks [SPR-10418]","**[Victor Tarnavsky](https://jira.spring.io/secure/ViewProfile.jspa?name=jkee)** opened **[SPR-10418](https://jira.spring.io/browse/SPR-10418?redirect=false)** and commented  Using this configuration:  ```xml              ...  ```  With this configuration, scheduler threads still being interrupted during destroy process. The problem is in [ScheduledTaskRegistrar.destroy()](http://static.springsource.org/spring/docs/3.2.x/javadoc-api/org/springframework/scheduling/config/ScheduledTaskRegistrar.html#destroy()) method, which calling future.cancel(true) and interrupting threads. I think ScheduledTaskRegistrar should respect ExecutorConfigurationSupport.waitForTasksToCompleteOnShutdown field.    ---  **Affects:** 3.2.2","closed","status: bulk-closed,","spring-projects-issues","2013-03-26T08:05:31Z","2019-01-12T00:24:38Z"
"","14982","Can I use Spring dependency injection to populate a read only bean for thread safety purpose? [SPR-10348]","**[Venkat Ganesh](https://jira.spring.io/secure/ViewProfile.jspa?name=vganesh)** opened **[SPR-10348](https://jira.spring.io/browse/SPR-10348?redirect=false)** and commented  Can I use Spring dependency injection to populate a read only bean for thread safety purpose?  After extracting the attached zip file to a folder, I can run the following command successfully and greeted by Pookey. mvn clean compile exec:java  ...  ``` [INFO] --- exec-maven-plugin:1.2.1:java (default-cli) @ spring-readonly ---  Hello World!  Mar 02, 2013 1:32:00 PM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions INFO: Loading XML bean definitions from class path resource [application-context.xml]  My name is Pookey  [INFO] ------------------------------------------------------------------------ [INFO] BUILD SUCCESS ... ```  My question is simple. I need to comment out setName method implementation in Person.java so that it will be a read only bean. I want spring DI to create this bean using the data values I specify in an xml file and after it is created the thread safe bean will be used by the rest of the application.  The intent is the application programmer will create an xml file using the needed data values at run-time, when required and then ask Spring DI to create that bean. Since there are no set methods in the bean, it is thread safe from application point of view.  If I comment out the following three lines in Person.java,  ```java /* 	public void setName(String name) { 		this.name = name; 	} 	*/ ```  and rerun it, I see this error. Is it not true using Java reflection the private data member can also be accessed? Can Spring set a private data member value when the setXXX() method is not available in the source code?  Or do we have to revert back to some aspectJ/groovy technique to make this happen?  Thanks and regards, Ganesh  ``` mvn clean compile exec:java  ... [INFO] --- exec-maven-plugin:1.2.1:java (default-cli) @ spring-readonly --- Hello World! Mar 02, 2013 1:13:42 PM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions INFO: Loading XML bean definitions from class path resource [application-context.xml]  [WARNING]  java.lang.reflect.InvocationTargetException         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)         at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)         at java.lang.reflect.Method.invoke(Method.java:601)         at org.codehaus.mojo.exec.ExecJavaMojo$1.run(ExecJavaMojo.java:297)         at java.lang.Thread.run(Thread.java:722)  Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'hello' defined in class path resource [application-context.xml]: Error setting property values; nested exception is org.springframework.beans.NotWritablePropertyException: Invalid property 'name' of bean class [read.only. beans.spring.Person]: Bean property 'name' is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter?          at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1427)         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1132)         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:522)         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:461)         at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:295)         at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223)         at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:292)         at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)         at read.only.beans.spring.App.main(App.java:18)         ... 6 more  Caused by: org.springframework.beans.NotWritablePropertyException: Invalid property 'name' of bean class [read.only.beans.spring.Person]: Bean property 'name' is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter?         at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:1042)         at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:902)         at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:75)         at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:57)         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1424)         ... 14 more  [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time: 5.881s ```    ---  **Affects:** 3.2.1  **Attachments:** - [spring-readonly.zip](https://jira.spring.io/secure/attachment/21002/spring-readonly.zip) (_4.41 kB_)","closed","in: core,","spring-projects-issues","2013-03-02T11:07:35Z","2019-01-12T05:27:17Z"
"","15088","IllegalArgumentException when trying to merge list/set into SpringEL produced list/set [SPR-10455]","**[Vasily Ivanov](https://jira.spring.io/secure/ViewProfile.jspa?name=bas)** opened **[SPR-10455](https://jira.spring.io/browse/SPR-10455?redirect=false)** and commented  The following config:  ```xml                            extravalue             ```  causes an `IllegalArgumentException`:  ``` Caused by: java.lang.IllegalArgumentException: Cannot merge with object of type [class org.springframework.beans.factory.config.TypedStringValue] 	at org.springframework.beans.factory.support.ManagedSet.merge(ManagedSet.java:97) 	at org.springframework.beans.factory.support.ManagedSet.merge(ManagedSet.java:1) 	at org.springframework.beans.MutablePropertyValues.mergeIfRequired(MutablePropertyValues.java:221) 	at org.springframework.beans.MutablePropertyValues.addPropertyValue(MutablePropertyValues.java:169) 	at org.springframework.beans.MutablePropertyValues.addPropertyValues(MutablePropertyValues.java:138) 	at org.springframework.beans.factory.support.AbstractBeanDefinition.overrideFrom(AbstractBeanDefinition.java:309) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getMergedBeanDefinition(AbstractBeanFactory.java:1169) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getMergedBeanDefinition(AbstractBeanFactory.java:1109) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getMergedLocalBeanDefinition(AbstractBeanFactory.java:1095) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:335) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:312) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:420) 	at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:617) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:451) 	at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:103) 	at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:1) 	at org.springframework.test.context.support.DelegatingSmartContextLoader.loadContext(DelegatingSmartContextLoader.java:228) 	at org.springframework.test.context.TestContext.loadApplicationContext(TestContext.java:124) 	at org.springframework.test.context.TestContext.getApplicationContext(TestContext.java:148) 	... 27 more ```  It works OK if `parentSet` is a concrete set and not SpringEl dynamic expression:  ```xml                parentvalue                               extravalue             ```    ---  **Affects:** 3.1.2","closed","status: bulk-closed,","spring-projects-issues","2013-04-09T20:36:01Z","2019-01-12T00:24:10Z"
"","14721","HierarchicalUriComponents.equals() incorrectly returns false when other object is not an instance of OpaqueUriComponents [SPR-10088]","**[Vasily Ivanov](https://jira.spring.io/secure/ViewProfile.jspa?name=bas)** opened **[SPR-10088](https://jira.spring.io/browse/SPR-10088?redirect=false)** and commented  **org.springframework.web.util.HierarchicalUriComponents.equals(Object)** method incorrectly returns false when other object is not an instance of **OpaqueUriComponents**:  ``` final class HierarchicalUriComponents extends UriComponents {  public boolean equals(Object obj) { ...    if (!(obj instanceof OpaqueUriComponents)) {       return false;    } ... } ```  I believe it meant to be:  ``` final class HierarchicalUriComponents extends UriComponents {  public boolean equals(Object obj) { ...    if (!(obj instanceof HierarchicalUriComponents)) {       return false;    } ... } ```    ---  **Affects:** 3.1.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b0fce78abfaedf23f6a54127e208a1388bbccad9, https://github.com/spring-projects/spring-framework/commit/7af92b483a89bd7e7cea38f57176fff6c8fbd11c  **Backported to:** [3.1.4](https://github.com/spring-projects/spring-framework/milestone/83?closed=1)","closed","type: bug,","spring-projects-issues","2012-12-09T15:52:27Z","2012-12-11T06:52:12Z"
"","14892","Any @RequestMapping method annotated with @InitBinder still fails at runtime [SPR-10259]","**[Vard Lott](https://jira.spring.io/secure/ViewProfile.jspa?name=samoussa)** opened **[SPR-10259](https://jira.spring.io/browse/SPR-10259?redirect=false)** and commented  Very similar probably to #13586, but still failing on 3.2GA. Using:  ```java @InitBinder public void initListBinder(WebDataBinder binder) {     binder.setAutoGrowCollectionLimit(2000); } // To get around default collection limit of 256 ```  and annotating a controller method as per:  ```java @InitBinder @RequestMapping(value = ""/groupform"", method = RequestMethod.POST) public String groupTrackingForm(TrackingDto trDto, BindingResult result, Model model, HttpSession session) {     UserLogin login = (UserLogin) session.getAttribute(""loggedInUser""); ... } ```  fails at runtime with ""No suitable resolver for argument [0]"" (full exception attached). This will happen on other controller methods also if any methods in the Controller class are annotated with `@InitBinder`  ---  **Affects:** 3.2 GA, 3.2.1  **Attachments:** - [nosuitableresolverexception.txt](https://jira.spring.io/secure/attachment/20929/nosuitableresolverexception.txt) (_7.29 kB_)","closed","status: declined,","spring-projects-issues","2013-02-04T22:12:53Z","2019-01-12T16:24:24Z"
"","15123","task:scheduler incompatible with Lifecycles [SPR-10490]","**[Tuure Laurinolli](https://jira.spring.io/secure/ViewProfile.jspa?name=tuure.laurinolli@portalify.com)** opened **[SPR-10490](https://jira.spring.io/browse/SPR-10490?redirect=false)** and commented  Currently tasks scheduled with task:scheduler necessarily start executing as soon as the scheduler is instantiated, which is problematic if the tasks themselves depend on some active component that requires starting up through Lifecycle processing. Ideally the scheduler itself would implement SmartLifecycle to allow phasing startup and shutdown of task scheduling with other Lifecycle-implementing components.   --- No further details from [SPR-10490](https://jira.spring.io/browse/SPR-10490?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2013-04-25T06:06:13Z","2019-01-12T03:43:13Z"
"","15122","Transitive dependencies of a (Smart)Lifecycle bean aren't started before the bean [SPR-10489]","**[Tuure Laurinolli](https://jira.spring.io/secure/ViewProfile.jspa?name=tuure.laurinolli@portalify.com)** opened **[SPR-10489](https://jira.spring.io/browse/SPR-10489?redirect=false)** and commented  If bean A that implements Lifecycle or SmartLifecycle depends on bean B that doesn't, and B on turn depends on C that again implements Lifecycle, one would expect C to be started before A. However, this apparently isn't the case, since DefaultLifecycleProcessor only goes through direct dependencies of A while searching for dependencies that need to be started before A.    ---  **Affects:** 3.2.2","closed","status: bulk-closed,","spring-projects-issues","2013-04-25T05:18:16Z","2019-01-12T03:43:15Z"
"","15165","Spring remote over JMS not work in Rest service [SPR-10535]","**[tu nguyen khac](https://jira.spring.io/secure/ViewProfile.jspa?name=tuyuri)** opened **[SPR-10535](https://jira.spring.io/browse/SPR-10535?redirect=false)** and commented  when i run REST (Spring web app) and try make a remoting over JMS i get exception : ( if i run in java base application every thing okie, with same config )  org.springframework.remoting.RemoteInvocationFailureException: Invocation of method [public abstract java.lang.Long pageview.contract.CategoryDomainService.getPageViewByDomainCategory(com.vcc.pageview.request.DomainCategoryRequest)] failed in JMS invoker remote service at queue [queue://categoryDomainQueue]; nested exception is java.lang.NoSuchMethodException: $Proxy8.getPageViewByDomainCategory(com.vcc.pageview.request.DomainCategoryRequest) at org.springframework.jms.remoting.JmsInvokerClientInterceptor.invoke(JmsInvokerClientInterceptor.java:214) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:204) at $Proxy8.getPageViewByDomainCategory(Unknown Source) at pageview.domain.category.CategoryDomainDataService.getPageViewByDomainPageId(CategoryDomainDataService.java:39) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:601) at org.springframework.web.method.support.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:219) at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:132) at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104) at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:745) at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:686) at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:80) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:925)   ---  **Affects:** 3.2.2  **Attachments:** - [SpringRestService.rar](https://jira.spring.io/secure/attachment/21188/SpringRestService.rar) (_7.31 kB_)","closed","status: bulk-closed,","spring-projects-issues","2013-05-07T00:36:22Z","2019-01-12T03:42:37Z"
"","15062","enhance Jackson2ObjectMapperFactoryBean to allow setting of (De)SerializerModifiers [SPR-10429]","**[tony kerz](https://jira.spring.io/secure/ViewProfile.jspa?name=tony_k)** opened **[SPR-10429](https://jira.spring.io/browse/SPR-10429?redirect=false)** and commented  see:  https://github.com/tony-kerz/kerz-core/blob/master/kerz-core/src/main/java/com/kerz/jackson2/ObjectMapperFactoryBean.java  and:  https://github.com/tony-kerz/kerz-core/blob/master/kerz-core/src/main/java/com/kerz/jackson2/CustomModule.java  for reference  ---  **Issue Links:** - #15668 Auto-registration of modules (in particular JSR-310 and Joda-Time support) in Jackson's ObjectMapper","closed","type: enhancement,","spring-projects-issues","2013-03-29T18:07:13Z","2019-01-11T21:16:00Z"
"","14843","Consider bridge methods in ReflectiveMethodResolver [SPR-10210]","**[Tomas Huryn](https://jira.spring.io/secure/ViewProfile.jspa?name=thuryn)** opened **[SPR-10210](https://jira.spring.io/browse/SPR-10210?redirect=false)** and commented  SpEL could not see bridged methods. On JBoss EL works fine.  We have:  ```java  class A extends B {     public void methodName() {    }  }   class D extends A {  } ```  EL:  ``` d.methodName() ```  exception:  ``` SpelEvaluationException: EL1004E:(pos 20): Method call: Method methodName() cannot be found on package.D type at org.springframework.expression.spel.ast.MethodReference.findAccessorForMethod(MethodReference.java:273) 	at org.springframework.expression.spel.ast.MethodReference.access$400(MethodReference.java:40) 	at org.springframework.expression.spel.ast.MethodReference$MethodValueRef.getValue(MethodReference.java:94) 	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:81) 	at org.springframework.expression.spel.ast.SpelNodeImpl.getTypedValue(SpelNodeImpl.java:102) 	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:98) 	at org.springframework.binding.expression.spel.SpringELExpression.getValue(SpringELExpression.java:84) 	... 87 more ```  This issue is the same case a #14795  ---  **Affects:** 3.2 GA  **Attachments:** - [SPR10210.zip](https://jira.spring.io/secure/attachment/20940/SPR10210.zip) (_1.58 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/18df9fed9257b8cb80c6d321bf4600caec21ec33, https://github.com/spring-projects/spring-framework/commit/0b6101478e705f5fff1fa7e1cd2b1159ac60280c, https://github.com/spring-projects/spring-framework/commit/634284e1fdd9a32b7356117055bc62b64d6e0add","closed","in: core,","spring-projects-issues","2013-01-23T06:02:56Z","2019-01-11T21:37:13Z"
"","15018","JdbcTemplate cannot set null parameter with Oracle driver [SPR-10385]","**[Tom Witmer](https://jira.spring.io/secure/ViewProfile.jspa?name=twitmer)** opened **[SPR-10385](https://jira.spring.io/browse/SPR-10385?redirect=false)** and commented  The `StatementCreatorUtils.setNull(..)` method fails with an Oracle database.  The method expects the driver to throw an exception when `ps.getParameterMetaData()` is invoked (line 234), but this actually succeeds and returns a value.  Later in the method (line 241), when `pmd.getParameterType()` is invoked, Oracle throws an ""Unsupported Feature"" exception.  I think the easiest fix here would be to move the `getParameterType()` invocation into the existing try block so both conditions are accounted for.  Stack trace attached.  ---  **Affects:** 3.2.2  **Attachments:** - [StackTrace.txt](https://jira.spring.io/secure/attachment/21099/StackTrace.txt) (_2.58 kB_) - [StatementCreatorUtils.java](https://jira.spring.io/secure/attachment/21100/StatementCreatorUtils.java) (_17.92 kB_) - [StatementCreatorUtils-ProposedFix](https://jira.spring.io/secure/attachment/21101/StatementCreatorUtils-ProposedFix) (_17.94 kB_)  **Issue Links:** - #14818 Update to spring 3.1.3 causes SqlException when executing sql statement with null parameters, caused by changes in StatementCreatorUtils.setNull method. - #15726 performancedrop due to repeated JDBC 3.0 getParameterType calls in setNull in StatementCreatorUtils - #19196 Protect against getParameterType cursor leak with Oracle 12c JDBC driver  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6b4c29cd24dac07722df6f2a4e417775f87d5141","closed","type: bug,","spring-projects-issues","2013-03-15T12:02:59Z","2019-01-11T20:59:56Z"
"","15380","Documentation Error: rollbackForClassname is listed, should be rollbackForClassName (notice UPPERcase N) [SPR-10754]","**[Tom Snyder](https://jira.spring.io/secure/ViewProfile.jspa?name=tomsn)** opened **[SPR-10754](https://jira.spring.io/browse/SPR-10754?redirect=false)** and commented  The `@Transactional` property rollbackForClassname is listed in your online docs at http://static.springsource.org/spring/docs/3.2.x/spring-framework-reference/html/transaction.html  The actual property has different case and should be: rollbackForClassName as seen in its declaration in: src/main/java/org/springframework/transaction/annotation/SpringTransactionAnnotationParser.java  Sure, a minor issue, but its frustrating for users trying to use declarative `@Transactional` to its fullest.  THANKS FOR ALL YOUR WORK!!!!!!!   ---  **Affects:** 3.2.3  **Reference URL:** http://static.springsource.org/spring/docs/3.2.x/spring-framework-reference/html/transaction.html  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/66e4c9b2bbfb3832e262079b68dcfbfcfb83f21b, https://github.com/spring-projects/spring-framework/commit/1204d2aef4afdefb4ba73c86565aab3f5b2a6931","closed","type: documentation,","spring-projects-issues","2013-07-18T02:19:54Z","2013-07-24T10:17:10Z"
"","14810","Attribute mode removed from annotation-driven definition in spring-task.xsd [SPR-10177]","**[Tom Cassimon](https://jira.spring.io/secure/ViewProfile.jspa?name=tcke83)** opened **[SPR-10177](https://jira.spring.io/browse/SPR-10177?redirect=false)** and commented  Since the relese of Spring 3.1.x an attribute mode was removed from the annotation-driven element definition in the spring-task.xsd  We use compile time weaving for processing our `@Async` annotations, but due to the removal of the attribute we are unable to enable the 'aspecj' mode. We looked into the source and the logic to determine 'aspectj' or 'proxy' is still there but it defaults to 'proxy'.  Is there maybe any reason the attribute is removed, or should we configure it in another way?   ---  **Affects:** 3.1.1, 3.1.2, 3.1.3, 3.2 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/450dbb2810f40f55628df74fc5adb887ef8d657b, https://github.com/spring-projects/spring-framework/commit/aa388bc0945754dfe01070ec91083f56a5ee4895  **Backported to:** [3.1.4](https://github.com/spring-projects/spring-framework/milestone/83?closed=1)","closed","in: core,","spring-projects-issues","2013-01-15T06:43:10Z","2013-01-15T13:03:48Z"
"","15453","Use SpEL programmatically in @Configuration classes [SPR-10827]","**[Tobias Flohre](https://jira.spring.io/secure/ViewProfile.jspa?name=tobias79)** opened **[SPR-10827](https://jira.spring.io/browse/SPR-10827?redirect=false)** and commented  The `@Configuration` style allows for navigable configurations, which is much easier to understand than autowiring magic. For example, I can do the following:  ``` @Bean public BeanTypeA beanA(){     return new BeanTypeA(beanB()); }  @Bean public BeanTypeB beanB(){     return new BeanTypeB(); } ```  It's easy to jump directly into the configuration of beanB from beanA.  Unfortunately it's not as nice if beanB is in another Scope and needs some other value that needs to be expressed in SpEL and has that other Scope as well. In Spring Batch we have Job-Parameters in StepScope that may be accessed with this expression:  ``` #{jobParameters['parameterKey']} ```  Let's say I need a job parameter for the instantiation of beanB, then a configuration would look like this:  ``` @StepScope @Bean public BeanTypeB beanB(@Value(""#{jobParameters['parameterKey']}"") String param){     return new BeanTypeB(param); } ```  Now that the method has a parameter, referencing it from beanA is uglier, but still works:  ``` @Bean public BeanTypeA beanA(){     return new BeanTypeA(beanB(null)); } ```  It would be nicer if I could evaluate the expression inside the method beanB(). I looked inside all the expression handling and found out that it's not very trivial to use it the way I want to use it. Since evaluating properties works fine programmatically with the Environment, I was wondering if you could add something similar for evaluating expressions: some expression resolver bean that's always there and that I may autowire into my configuration class.   --- No further details from [SPR-10827](https://jira.spring.io/browse/SPR-10827?redirect=false)","closed","type: enhancement,","spring-projects-issues","2013-08-12T06:04:11Z","2016-01-06T16:56:23Z"
"","15140","LazyInitTargetSourceCreator  does not work in Java-based configuration [SPR-10508]","**[Tobias Flohre](https://jira.spring.io/secure/ViewProfile.jspa?name=tobias79)** opened **[SPR-10508](https://jira.spring.io/browse/SPR-10508?redirect=false)** and commented  LazyInitTargetSourceCreator does not work in Java based configuration, as you can see in the example code in this forum thread: http://forum.springsource.org/showthread.php?125489-Configuration-BeanNameAutoProxyCreator-and-LazyInitTargetSourceCreator.  Interesting: a workaround is making the `@Bean` method for the lazy service object static.  ---  **Affects:** 3.2.2  **Attachments:** - [AutoProxyLazyInitTest.java](https://jira.spring.io/secure/attachment/22199/AutoProxyLazyInitTest.java) (_3.01 kB_)  **Issue Links:** - #16754 InstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation not called for bean declared on JavaConfig (_**""depends on""**_) - #16756 InstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation called with wrong beanClass for bean declared on JavaConfig (_**""depends on""**_) - #12735 javaconf + `@Autowired` + `@PostConstruct` + deep context import bug  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8c9274e01743a87d7fb8519f7772c1b1677ecbe0  2 votes, 5 watchers","closed","in: core,","spring-projects-issues","2013-05-01T13:32:42Z","2019-01-13T07:00:15Z"
"","14793","EntityManagerFactoryUtils.findEntityManagerFactory() does not search parent contexts if persistence unit name is unspecified [SPR-10160]","**[Tim Yates](https://jira.spring.io/secure/ViewProfile.jspa?name=tim.yates)** opened **[SPR-10160](https://jira.spring.io/browse/SPR-10160?redirect=false)** and commented  **Bottom line**:  When EntityManagerFactoryUtils.findEntityManagerFactory() is called with a persistence unit name, it looks for an EntityManagerFactory bean through the whole context hierarchy. If the persistence unit name is omitted, it will only look at the current context and ignore beans in any parent context.  **Why this matters**:  I have a Spring MVC application that has a global context in /WEB-INF/applicationContext.xml and an MVC context in /WEB-INF/dispatcher-servlet.xml. The EntityManagerFactory is configured in the global context, and we have an OpenEntityManagerInViewInterceptor in the MVC context. If I leave the OEMIVInterceptor's persistenceUnitName property undefined, the application fails to start up with this error:  ``` org.springframework.beans.factory.NoSuchBeanDefinitionException: No unique bean of type [javax.persistence.EntityManagerFactory] is defined: expected single bean but found 0     at org.springframework.beans.factory.BeanFactoryUtils.beanOfType(BeanFactoryUtils.java:394)     at org.springframework.orm.jpa.EntityManagerFactoryUtils.findEntityManagerFactory(EntityManagerFactoryUtils.java:111)     at org.springframework.orm.jpa.EntityManagerFactoryAccessor.setBeanFactory(EntityManagerFactoryAccessor.java:139)     at ... ```  However, if I specify the persistenceUnitName, all is well. This also worked previously when all the beans were defined in one context (without the need to specify the persistence unit).  If this is not a bug, I fail to see the logic behind it. Here is the relevant snippet from EntityManagerFactoryUtils.findEntityManagerFactory():  ``` if (StringUtils.hasLength(unitName)) {     // See whether we can find an EntityManagerFactory with matching persistence unit name.     String[] candidateNames =         BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, EntityManagerFactory.class);     // ... } else {     return BeanFactoryUtils.beanOfType(beanFactory, EntityManagerFactory.class); } ```  As you can see, it calls the ""...IncludingAncestors"" method if the persistence unit name is defined, but uses the no-hierarchy version otherwise. This could easily be fixed by changing the second call to:  ``` else {     return BeanFactoryUtils.beanOfTypeIncludingAncestors(beanFactory, EntityManagerFactory.class); } ```    ---  **Affects:** 3.1.3, 3.2 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1a929f22e0e8d136a11605efccf211a19ec63894, https://github.com/spring-projects/spring-framework/commit/50ed8632795a1e0c5b3fe3b0247258d0253c20f8  **Backported to:** [3.1.4](https://github.com/spring-projects/spring-framework/milestone/83?closed=1)","closed","type: enhancement,","spring-projects-issues","2013-01-10T10:20:24Z","2013-01-22T11:33:27Z"
"","15336","Add Layout Manager Capability To Spring Web [SPR-10708]","**[Tim Nolan](https://jira.spring.io/secure/ViewProfile.jspa?name=tntim96)** opened **[SPR-10708](https://jira.spring.io/browse/SPR-10708?redirect=false)** and commented  This is a fairly ambitious, but potentially very useful, request to implement a layout manager like Sitemesh (in terms of capability, not necessarily architecture).  Unfortunately that excellent project seems to be stalling, and while many still use it, that probably won't continue for much longer. Other frameworks do much more than manage layout - but many prefer to stick with Spring MVC for controllers. I think there's an opportunity for Spring to provide developers with a good layout manager and encourage more usage of Spring MVC.  I have a strong interest in using such a layout manager with Spring MVC and Freemarker (in fact, if it only supported Freemarker and not JSP I would be satisfied), as I am able to 1. generate DOM fragments that can be used by web/JavaScript developers on the file-system (as well as automated tests) which is  very useful 2. write template tests to check any template logic. This cab be done in two ways    1. simply apply the model to the template to verify the XHTML rendered    2. apply a mock request to the dispatcher servlet at level somewhere near an integration/acceptance test which is very quick  Currently, combining Spring, Sitemesh and Freemarker is not officially documented that I know of. One solution is http://tedyoung.me/2011/02/14/spring-sitemesh-and-freemarker/, but that solution is aging. Another option is to subclass FreeMarkerView, but this obviously doesn't help with JSP, and doesn't seem to allow DI.  It seems the best option is to write a new layout manager. Only basic layout features would be needed for adoption to start I think, and I believe there would be good community support. I maintain http://tntim96.github.io/JSCover/ and would be interested in assisting.  Thoughts?   --- No further details from [SPR-10708](https://jira.spring.io/browse/SPR-10708?redirect=false)","closed","type: enhancement,","spring-projects-issues","2013-07-01T00:34:42Z","2019-01-11T22:28:24Z"
"","15202","CGLIB PermGen memory leaks under Karaf [SPR-10573]","**[Tim Jones](https://jira.spring.io/secure/ViewProfile.jspa?name=mit_jones)** opened **[SPR-10573](https://jira.spring.io/browse/SPR-10573?redirect=false)** and commented  There appears to be an issue with the use of CGLIB and permgen class loader leaks. Attached is a zip file containing some tests that can be run in a Karaf container that highlight this issue.  I have also added a few observations of my own.  In summary I have set up 2 bundles, with one bundle exporting a transaction manager and the other bundle referencing the transaction manager with a class that has been transactionally advised via a `@Transactional` annotation.  The tests are further divided with one group dependent on Spring 3.1.4 and the second group dependent on Spring 3.2.2. Within these two groups there are two referencing bundles, one that is coded against interfaces (=> JDK proxy) and the other without interfaces (=> CGLIB).  Both the Spring 3.1.4 and Spring 3.2.2 test bundles that use interfaces seem to be fine, i.e. the referencing bundle can be loaded and unloaded many times without resulting in a OutOfMemoryError: PermGen space error. I was able to verify using JVisualVM that the classes are collected although there seems to be a difference as to when they are collected (details of which are in the readme of the zip).  Both the Spring 3.1.4 and Spring 3.2.2 test bundles that do not use interfaces and hence CGLIB comes into play ultimately fail with a OutOfMemoryError: PermGen space error. I was able to verify using JVisualVM that the classes are not collected and that after uninstalling the referencing bundle that instances of the test classes still remain.  It is possible that the tests could be simplified further, perhaps one bundle rather than two would suffice but I think separating the transaction manager is more realistic.  I realise that class loader permgen leaks are an old well trodden issue that came to the forefront when undeploying web apps but because OSGI permits breaking an application down into fine grained modules I think this issue will become even more apparent as the promise of undeploying/stopping/starting parts of an application becomes a significant driver for the adoption of OSGI.  I hope this helps.  Regards,  Tim  ---  **Affects:** 3.2.2  **Reference URL:** https://jira.springsource.org/browse/SPR-8190  **Attachments:** - [permgen-leak-spring.tar.gz](https://jira.spring.io/secure/attachment/21205/permgen-leak-spring.tar.gz) (_492.76 kB_) - [Screen Shot 2013-06-03 at 11.37.44 AM.png](https://jira.spring.io/secure/attachment/21227/Screen+Shot+2013-06-03+at+11.37.44+AM.png) (_177.43 kB_)  **Issue Links:** - #18506 Upgrade to CGLIB 3.2.2  1 votes, 7 watchers","closed","in: core,","spring-projects-issues","2013-05-19T13:39:00Z","2019-01-12T16:24:04Z"
"","14846","Take ownership of the CommonsConfigurationFactoryBean [SPR-10213]","**[Tim Astle](https://jira.spring.io/secure/ViewProfile.jspa?name=tastle)** opened **[SPR-10213](https://jira.spring.io/browse/SPR-10213?redirect=false)** and commented  The [org.springmodules.commons.configuration.CommonsConfigurationFactoryBean](http://java.net/projects/springmodules/sources/svn/content/tags/release-0_8/projects/commons/src/java/org/springmodules/commons/configuration/CommonsConfigurationFactoryBean.java?rev=2110) is quite often used in scenarios where developers are using commons-configuration to load properties from a database for spring configuration.  My concern is that the springmodules haven't been maintained and this could class could stop being compatible with Spring in the future.  It's a very small and simple bean and if this was in SpringFramework, I'd be able to remove the bloated springmodules jakarta commons jar.  I'm uncertain of where this would / should go, so I'll defer to the experts.   ---  **Affects:** 3.2 GA","closed","type: enhancement,","spring-projects-issues","2013-01-24T05:47:31Z","2016-05-07T10:16:57Z"
"","14946","LazyConnectionDataSourceProxy causes exception in WebSphere with an Oracle database [SPR-10312]","**[Tim Alkemade](https://jira.spring.io/secure/ViewProfile.jspa?name=timalkemade)** opened **[SPR-10312](https://jira.spring.io/browse/SPR-10312?redirect=false)** and commented  When `DataSourceUtils` calls `connection.setReadOnly`, it catches the exception, logs it and continues. When `LazyConnectionDataSourceProxy` gets instructions to call `connection.setReadOnly`, it does not catch the exception. This causes problems when using WebSphere 7 with an oracle database. The Oracle database does not support `readOnly`, and WebSphere 7 will throw an exception (see also http://www-01.ibm.com/support/docview.wss?uid=swg21194913) even though `setReadOnly` is only a hint. So the exception should be logged and ignored similar to what happens in `DataSourceUtils`.  Attached is a maven project which can be used to reproduce the issue and a stack trace.   ---  **Affects:** 3.1 GA  **Attachments:** - [setReadOnly.zip](https://jira.spring.io/secure/attachment/20956/setReadOnly.zip) (_6.86 kB_) - [stack.txt](https://jira.spring.io/secure/attachment/20957/stack.txt) (_7.31 kB_)","closed","type: bug,","spring-projects-issues","2013-02-18T03:08:04Z","2013-03-01T07:02:51Z"
"","14830","Improve performance of ReflectionUtils#getUniqueDeclaredMethods [SPR-10197]","**[Thusinthan Kajendran](https://jira.spring.io/secure/ViewProfile.jspa?name=kajen)** opened **[SPR-10197](https://jira.spring.io/browse/SPR-10197?redirect=false)** and commented  There is a start up performance issue, if I configure beans for an application with JavaConfig (JavaConfing with more than 100 beans). The time to create the beans increases significantly more than when I configured the beans via XML-Based. I have performed a profile on the project and found that the problem lies in the MethdoeRefelctionUtils. getUniqueDeclaredMethods()( This method try to filteries out overrided methods from superclass).  But if I break the JavaConfig down into smaller files (each file 10 beans), than the start will be performed quickly. I'm well aware that it is better to have smaller files, however, it is the algorithm of the method RefelctionUtils.getUniqueDeclaredMethods () badly designed when more than 100 beans......  ---  **Affects:** 3.1.2  **Attachments:** - [C.java](https://jira.spring.io/secure/attachment/20896/C.java) (_41.00 kB_) - [C300.java](https://jira.spring.io/secure/attachment/20895/C300.java) (_40.61 kB_) - [screenshot-1.png](https://jira.spring.io/secure/attachment/22788/screenshot-1.png) (_318.90 kB_) - [Service.java](https://jira.spring.io/secure/attachment/20897/Service.java) (_48 bytes_) - [ServiceImpl.java](https://jira.spring.io/secure/attachment/20898/ServiceImpl.java) (_66 bytes_) - [TestC.java](https://jira.spring.io/secure/attachment/20893/TestC.java) (_576 bytes_) - [TestC300.java](https://jira.spring.io/secure/attachment/20894/TestC300.java) (_586 bytes_)  **Issue Links:** - #16501 ReflectionUtils slow down application startup on WebSphere  1 votes, 5 watchers","closed","status: bulk-closed,","spring-projects-issues","2013-01-21T03:59:21Z","2019-01-12T02:35:17Z"
"","14974","view/ JSP compilation exceptions, not logged from JstlView or DispatcherServlet. [SPR-10340]","**[Thomas Whitmore](https://jira.spring.io/secure/ViewProfile.jspa?name=twhitmore.nz@gmail.com)** opened **[SPR-10340](https://jira.spring.io/browse/SPR-10340?redirect=false)** and commented  View Rendering/ JSP/ JSP compilation errors are not logged at WARN level by standard Spring MVC framework. (DispatcherServlet, JstlView, AbstractView, etc).  This is particularly an issue when building AJAX pages -- by comparison, when building main HTML pages, a default Tomcat exception-trace can be seen in the browser.  View compilation/ rendering exceptions should really be logged at WARN level -- these are pretty major.   ---  **Affects:** 3.1.2","closed","type: bug,","spring-projects-issues","2013-02-27T20:28:43Z","2019-01-11T21:02:25Z"
"","14782","Web MVC Annotation-based controllers are weak;  going back to custom base-class & Controllers. [SPR-10149]","**[Thomas Whitmore](https://jira.spring.io/secure/ViewProfile.jspa?name=twhitmore.nz@gmail.com)** opened **[SPR-10149](https://jira.spring.io/browse/SPR-10149?redirect=false)** and commented  Real architecture decision:  I'm going back to Controllers (and my own custom base-classes). The annotations stuff is weak, the SimpleFormController etc method-heirarchies are horrible & branchy, and for a mid-size application I can just capture the necessary generality so much better.  Rossen:  I've written & used custom base controllers (Search and Edit), with very good success, in a project some years before. My factoring & what method stubs I provide, are quite different from eg the SimpleFormController & ancestors.  I use a flatter, more standardized request-processing flow: 1) setup Form & load/create Entity (typically from Hibernate); 2) process Early Commands;    (exit, cancel etc) 3) Bind; 4) process Normal Commands;   (add detail, move up/down, etc) 5) if Submit & Binding/Validation Successful;    Save. 6) Show Form.  I also standardize a bean for 'UI Commands'; having a Name & two parameters -- Param1 and Param2. This is ideal to represent almost all buttons/ actions which can be fired from the UI.  Email me if you're interested to discuss:  twhitmore dot nz at gmail.   ---  **Affects:** 3.1.2","closed","status: invalid,","spring-projects-issues","2013-01-06T20:21:30Z","2019-01-12T05:27:37Z"
"","15405","Allow dynamic values in @Cacheable and @CacheEvict [SPR-10778]","**[Thomas Struntz](https://jira.spring.io/secure/ViewProfile.jspa?name=beginner_)** opened **[SPR-10778](https://jira.spring.io/browse/SPR-10778?redirect=false)** and commented  `@Cacheable` and `@CacheEvict` only take a constant value for the cache names. Allow it to be a dynamic value: class field, value from properties file eg ${myProperty} like in `@Value` or a SpEL expression.  In case of abstract classes that implement methods that should be cached but each subclass should use a different cache name. This is not possible currently and hence such methods can not be put into an abstract class even though all subclasses use exactly the same method.   ---  **Affects:** 3.1.4  2 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2013-07-24T06:02:33Z","2015-12-22T13:21:02Z"
"","14975","doOptions method of FrameworkServlet uses servlet 3.0 only method [SPR-10341]","**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[SPR-10341](https://jira.spring.io/browse/SPR-10341?redirect=false)** and commented  Adding a filter to a Spring web app and sending an `OPTIONS` request causes:  ``` java.lang.NoSuchMethodError: javax.servlet.http.HttpServletResponse.getHeader(Ljava/lang/String;)Ljava/lang/String; 	org.springframework.web.servlet.FrameworkServlet.doOptions(FrameworkServlet.java:870) ... ```  when running on Tomcat 6 (or any other pre Servlet 3.0 container)  Looks like the '`doOptions`' method calls `response.getHeader(""Allow"")` which is a 3.0 and later method.  This is a blocking problem when upgrading to Tomcat 7 isn't an option.   ---  **Affects:** 3.2.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b27fc0ef30df4b3633bfa8b5960f9da35d212b48","closed","type: regression,","spring-projects-issues","2013-02-28T05:35:20Z","2013-03-01T10:35:46Z"
"","15016","Form tag does not resolve action correctly in portlet environment [SPR-10383]","**[Thomas Delhoménie](https://jira.spring.io/secure/ViewProfile.jspa?name=tdelhomenie)** opened **[SPR-10383](https://jira.spring.io/browse/SPR-10383?redirect=false)** and commented  The form tag does not resolve correctly the action in a portlet environment. It is easily reproductible with the springmvc portlet sample : https://github.com/SpringSource/spring-webflow-samples/tree/master/booking-portlet-mvc Deploy this portlet with Spring 3.2.1 or 3.2.2, and click on the ""Add Book"" button -> error 404 It works fine with Spring 3.2.0.  ---  **Affects:** 3.2.1, 3.2.2  **Issue Links:** - #15015 Form tag prepending context/servlet path breaks use for portlets (_**""duplicates""**_)  2 votes, 5 watchers","closed","in: web,","spring-projects-issues","2013-03-15T01:52:35Z","2019-01-12T16:47:03Z"
"","15367","destroy is not called when scope = ""prototype"" [SPR-10739]","**[Teresa Yan](https://jira.spring.io/secure/ViewProfile.jspa?name=teresawyan)** opened **[SPR-10739](https://jira.spring.io/browse/SPR-10739?redirect=false)** and commented  Beans.xml  ```                     ```  HelloWorld.java  ```java package com.tutorialspoint;  public class HelloWorld {     private String message;           public void setMessage(String message) {     	this.message = message;     }          public void getMessage() {     	System.out.println(""Your Message: "" + message);     }          public void init() {     	System.out.println(""Bean is init"");     }          public void destroy() {     	System.out.println(""Bean will destroy"");     } } ```  Output that I've got:  Bean is init Your Message: I am object A Bean is init Your Message: Hello World!   ---  **Affects:** 3.2.3  **Reference URL:** http://www.tutorialspoint.com/spring/spring_bean_life_cycle.htm","closed","status: declined,","spring-projects-issues","2013-07-15T00:25:31Z","2019-01-12T16:23:51Z"
"","15498","AspectJExpressionPointcut unpredictable behavior in OSGi environment [SPR-10871]","**[Temnov Aleksey](https://jira.spring.io/secure/ViewProfile.jspa?name=bsko)** opened **[SPR-10871](https://jira.spring.io/browse/SPR-10871?redirect=false)** and commented  Hi, We have a java application consisting of multiple OSGi modules running with Apache Felix container. Spring DM is responsible for loading spring application contexts of our bundles. We faced this kind of error:  ```   Caused by: java.lang.IllegalArgumentException: warning no match for this type name: my.bundle.second.api.MarkerInterface [Xlint:invalidAbsoluteTypeName]         at org.aspectj.weaver.tools.PointcutParser.parsePointcutExpression(PointcutParser.java:301)         at org.springframework.aop.aspectj.AspectJExpressionPointcut.buildPointcutExpression(AspectJExpressionPointcut.java:208)         at org.springframework.aop.aspectj.AspectJExpressionPointcut.buildPointcutExpression(AspectJExpressionPointcut.java:194)         at org.springframework.aop.aspectj.AspectJExpressionPointcut.checkReadyToMatch(AspectJExpressionPointcut.java:183)         at org.springframework.aop.aspectj.AspectJExpressionPointcut.getClassFilter(AspectJExpressionPointcut.java:164)         at org.springframework.aop.support.AopUtils.canApply(AopUtils.java:208)         at org.springframework.aop.support.AopUtils.canApply(AopUtils.java:262)         at org.springframework.aop.support.AopUtils.findAdvisorsThatCanApply(AopUtils.java:294)         at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findAdvisorsThatCanApply(AbstractAdvisorAutoProxyCreator.java:118)         at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findEligibleAdvisors(AbstractAdvisorAutoProxyCreator.java:88)         at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.getAdvicesAndAdvisorsForBean(AbstractAdvisorAutoProxyCreator.java:69) ```  After some researching we found that this exception is thrown while trying to match this aop expression:  ``` @Before(""within(my.bundle..*) && target(my.bundle.second.api.MarkerInterface)"") ```  So, we looked up for an issue #13973 and made a small test project that represents the architecture of problematic funсtionality in our project. After we coded it, we faced another problem. Every time we start felix, we randomly get one of two different errors. One of them I already specified upwards and the other one is:  ``` Caused by: org.aspectj.weaver.reflect.ReflectionWorld$ReflectionWorldException: warning can't determine implemented interfaces of missing type my.bundle.one.FirstAbstractClass  [Xlint:cantFindType]         at org.aspectj.weaver.reflect.ReflectionWorld$ExceptionBasedMessageHandler.handleMessage(ReflectionWorld.java:129)         at org.aspectj.weaver.Lint$Kind.signal(Lint.java:328)         at org.aspectj.weaver.MissingResolvedTypeWithKnownSignature.raiseCantFindType(MissingResolvedTypeWithKnownSignature.java:232)         at org.aspectj.weaver.MissingResolvedTypeWithKnownSignature.getDeclaredInterfaces(MissingResolvedTypeWithKnownSignature.java:86)         at org.aspectj.weaver.ReferenceType.isAssignableFrom(ReferenceType.java:566)         at org.aspectj.weaver.ReferenceType.isAssignableFrom(ReferenceType.java:584)         at org.aspectj.weaver.ReferenceType.isAssignableFrom(ReferenceType.java:584)         at org.aspectj.weaver.ReferenceType.isAssignableFrom(ReferenceType.java:418)         at org.aspectj.weaver.patterns.ExactTypePattern.matchesInstanceof(ExactTypePattern.java:200)         at org.aspectj.weaver.patterns.TypePattern.matches(TypePattern.java:152)         at org.aspectj.weaver.patterns.ThisOrTargetPointcut.matchInternal(ThisOrTargetPointcut.java:124)         at org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:137)         at org.aspectj.weaver.patterns.AndPointcut.matchInternal(AndPointcut.java:55)         at org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:137)         at org.aspectj.weaver.internal.tools.PointcutExpressionImpl.getShadowMatch(PointcutExpressionImpl.java:312)         at org.aspectj.weaver.internal.tools.PointcutExpressionImpl.matchesExecution(PointcutExpressionImpl.java:122)         at org.aspectj.weaver.internal.tools.PointcutExpressionImpl.matchesMethodExecution(PointcutExpressionImpl.java:103)         at org.springframework.aop.aspectj.AspectJExpressionPointcut.getShadowMatch(AspectJExpressionPointcut.java:435)         at org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(AspectJExpressionPointcut.java:273) ```  The logic of this functionality is very easy: We have Bundle-1, that contains just one class, we called it ""FirstAbstractClass"". Bundle-2 contains class ""SecondAbstractClass"" that extends ""FirstAbstractClass"" from bundle-1, aspect ""CommonAspect"" with expression that I specified earlier and an interface, called ""MarkerInterface"". Bundle-3 contains OSGi service classes ""ConcreteClass"" and ""ConcreteClassMarkered"", that extend ""SecondAbstractClass"" and aspect declaration in bundle-3-context file:  ```  ```  This is it. If you comment declaration of ""concreteClass"" bean in bundle-3 spring context, all the bundles will start fine, but if you comment ""concreteClassMarkered"" - application won't work. **If you import package of ""FirstAbstractClass"" from first bundle to third one - it will solve the problem.** But I guess it's a weird workaround, and application should work perfectly without it. I guess, first type of error caused by using wrong classloader during aspect expression processing (guess it was classloader from bundle-1, that can't see bundle-3 ""MarkerInterface""). What causes the second one - I don't know.  So, we found that this is a wrong and unpredictable behavior and made this bug.  Test project is also commited to: [spring-framework-issues SPR-10871](https://github.com/SpringSource/spring-framework-issues/tree/master/SPR-10871)  ---  **Affects:** 3.2.4  **Reference URL:** https://github.com/bsko/Spring-SPR-9335-own  1 votes, 2 watchers","closed","status: bulk-closed,","spring-projects-issues","2013-08-28T06:40:48Z","2019-01-12T02:32:36Z"
"","15445","GenericTypeResolver does not resolve the correct parameter type when bound type is also ParameterizedType [SPR-10819]","**[Teddy Zhu](https://jira.spring.io/secure/ViewProfile.jspa?name=teddyzhu)** opened **[SPR-10819](https://jira.spring.io/browse/SPR-10819?redirect=false)** and commented  Follow is test code snap.  import org.springframework.core.GenericTypeResolver;  public class TestGeneric {      public static void main(String[] args) {     	Class[] types = GenericTypeResolver.resolveTypeArguments(Test.class, ITest.class);     	for (Class klass : types) {     		     		System.out.println(klass);//Issue: suppose should print B at least, but it print Object     	}     }  }  class A{}  class B\{}  class ITest\{}  class Test extends ITest\{  }   ---  **Affects:** 3.1.3","closed","in: core,","spring-projects-issues","2013-08-09T01:21:08Z","2013-08-29T16:20:44Z"
"","15041","Contention caused by per-instance/per-request logger creation in ConcurrencyThrottleSupport [SPR-10408]","**[Taras Tielkes](https://jira.spring.io/secure/ViewProfile.jspa?name=plethora)** opened **[SPR-10408](https://jira.spring.io/browse/SPR-10408?redirect=false)** and commented  We have an application with relatively high request throughput (>4K/s). After upgrading from Spring 3.1 to 3.2.2, we've noticed a new point of contention.  The call sequence looks like this 1) FrameworkServlet.processRequest calls WebAsyncUtils.getAsyncManager (for each request) 2) WebAsyncUtils.getAsyncManager creates a new WebAsyncManager instance 3) WebAsyncManager initializer creates a new SimpleAsyncTaskExecutor 4) SimpleAsyncTaskExecutor initializer creates a new ConcurrencyThrottleAdapter 5) ConcurrencyThrottleSupport (base of ConcurrencyThrottleAdapter) creates new Log object per instance 6) In the case of at least SLF4J commons-logging adapter, this accesses state guarded by a single fat lock (specifically, in org.apache.commons.logging.impl.SLF4JLogFactory#getInstance()).  It seems that creating a logger per request is not needed anyway. For object created per-request, this seems to be a sensible optimization.  Apart from that, it's also unfortunate that there is no obvious way to disable or customize the whole async execution machinery started by the FrameworkServlet for each request. We're not using any of that, and the introduced contention prevents us from upgrading to Spring 3.2.2.   ---  **Affects:** 3.2.2  1 votes, 3 watchers","closed","status: bulk-closed,","spring-projects-issues","2013-03-22T10:35:42Z","2019-01-12T00:24:40Z"
"","14858","improve documentation for  [SPR-10225]","**[Taras Tielkes](https://jira.spring.io/secure/ViewProfile.jspa?name=plethora)** opened **[SPR-10225](https://jira.spring.io/browse/SPR-10225?redirect=false)** and commented  The ""location"" attribute of  is documented as following:  > The resource location from which to serve static content, specified at a Spring Resource pattern. Each location must point to a valid directory. Multiple locations may be specified as a comma-separated list, and the locations will be checked for a given resource in the order specified. For example, a value of 	""/, classpath:/META-INF/public-web-resources/"" will allow resources to be served both from the web app root and from any JAR on the classpath  that contains a /META-INF/public-web-resources/ directory, with resources in the web app root taking precedence.  Note the sentence _Each location must point to a valid directory_. This is incorrect. Nothing prevents you from linking a specific path (perhaps without any wildcards) to a specific file below the web root.  For example, the following works:  ```  ```    ---  **Affects:** 3.1.4  **Reference URL:** http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd","closed","status: declined,","spring-projects-issues","2013-01-28T09:48:48Z","2019-01-12T16:24:28Z"
"","14722","Spring MVC @RequestMapping Inheritance [SPR-10089]","**[Tan Nguyen Cong](https://jira.spring.io/secure/ViewProfile.jspa?name=nguyencongtan)** opened **[SPR-10089](https://jira.spring.io/browse/SPR-10089?redirect=false)** and commented  I want to inhert in `@RequestMapping`,for example.  ```java @RequestMapping(""/administrator"") public abstract class AbstractController { } ```  then  ```java @RequestMapping(""/language"") public class LanguageController extends AbstractContrller {     @RequestMapping(value=""list"",method=RequestMethod.GET)    public String list() {       //Get from database        return ""list"";    } } ```  but administrator/language/list doesn't work??is there any way?? Thanks for helps.    --- No further details from [SPR-10089](https://jira.spring.io/browse/SPR-10089?redirect=false)","closed","type: enhancement,","spring-projects-issues","2012-12-10T05:29:37Z","2012-12-12T07:45:19Z"
"","15277","Missing RmiInvocationWrapperRTD.xml (build problem?) [SPR-10649]","**[Sylvain LAURENT](https://jira.spring.io/secure/ViewProfile.jspa?name=sylvain.laurent)** opened **[SPR-10649](https://jira.spring.io/browse/SPR-10649?redirect=false)** and commented  Up to spring 3.1.x, there was a file org/springframework/remoting/rmi/RmiInvocationWrapperRTD.xml which allows to declare to weblogic that RMI skeleteons are clusterable.  With the 3.2.x branch (up to 3.2.3), the file is no longer in spring-context.jar as it used to be in 3.1.1.  It's also absent from the spring-context-sources.jar that one can find in maven central, but it seems to be still present in the git repo sources on branch 3.2.x : https://github.com/SpringSource/spring-framework/blob/3.2.x/spring-context/src/main/java/org/springframework/remoting/rmi/RmiInvocationWrapperRTD.xml  A regression in the build ?   ---  **Affects:** 3.2.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/514a2e95688006a38009b1a6eee0e0a36cc2f536, https://github.com/spring-projects/spring-framework/commit/4830ea6065d18dbfddff588c2ed717eaaf70beea","closed","type: regression,","spring-projects-issues","2013-06-12T08:33:23Z","2013-07-24T10:17:11Z"
"","14821","@Schedule is calling the method twice [SPR-10188]","**[suresh m](https://jira.spring.io/secure/ViewProfile.jspa?name=suresh4master)** opened **[SPR-10188](https://jira.spring.io/browse/SPR-10188?redirect=false)** and commented  When i set the scheduler for one min using beans, it is actually calling the method twice. Can anybody help on this..?  Here is the output: XMLProcessor:processXMLFiles() paramters values : [] XMLProcessor:processXMLFiles() paramters values : [] at: Thu Jan 17 20:32:00 IST 2013 at: Thu Jan 17 20:32:00 IST 2013 completed.........>>>>>>>>>>>>>>>>>>>> processed !!! completed.........>>>>>>>>>>>>>>>>>>>> processed !!!   --- No further details from [SPR-10188](https://jira.spring.io/browse/SPR-10188?redirect=false)","closed","","spring-projects-issues","2013-01-17T07:05:09Z","2019-01-11T21:30:31Z"
"","14737","Oracle ADF 11.1.2.3.0 Support [SPR-10104]","**[Sujay](https://jira.spring.io/secure/ViewProfile.jspa?name=sujay@spring)** opened **[SPR-10104](https://jira.spring.io/browse/SPR-10104?redirect=false)** and commented   ---  1 votes, 3 watchers","closed","status: bulk-closed,","spring-projects-issues","2012-12-14T07:29:42Z","2019-01-12T02:35:36Z"
"","15168","Annotation driven session attribute handler method parameters  [SPR-10538]","**[SudhirR](https://jira.spring.io/secure/ViewProfile.jspa?name=sudhir.ravindramohan)** opened **[SPR-10538](https://jira.spring.io/browse/SPR-10538?redirect=false)** and commented  Need an annotation (`@SessionAttribute`) (singular) driven mechanism of injecting http session attributes into handler method parameters. For non http environments it could be a no op or handled via exceptions.  This would improve testability by removing dependency on HttpSession in method parameters.  Resoltuion of annotated parameters could be solved with a handler method parameter resolver implementation, see https://github.com/robusta-inc/spring-session-attribute  Wanted to send a pull request with the implementation as suggested by Chris Beams and hence filing this enhancement request.   ---  **Affects:** 3.2.2  **Reference URL:** https://github.com/robusta-inc/spring-session-attribute","closed","status: bulk-closed,","spring-projects-issues","2013-05-08T01:36:36Z","2019-01-12T03:42:34Z"
"","14968","MockServletContext always returns application/octet-stream for unknown filetypes or ContentNegotiationManager is not correct [SPR-10334]","**[Ståle Undheim](https://jira.spring.io/secure/ViewProfile.jspa?name=staaleu)** opened **[SPR-10334](https://jira.spring.io/browse/SPR-10334?redirect=false)** and commented  I have a method with the following `@RequestMapping` annotation:  ```java @RequestMapping(value = ""/update.data"", produces = MediaType.APPLICATION_JSON) ```  When I make a request using spring MVC test, it uses the `MockServletContext`. When this context tries to lookup if the accepted `MediaType` matches the `MediaType` off the target method, it needs to look up what `MediaType` is supported by the client. This is done using a `ContentNegotiationManager` from `ContentNegotiationManagerFactoryBean`. The default for this factory bean is to favor path extension, resulting in the `ContentNegotiationManager` being created with 2 strategies:  * ServletPathExtensionContentNegotiationStrategy * HeaderContentNegotiationStrategy  Now, in the headers I have provided `application/json` and `\*/\*` as `MediaTypes` I support, however the `ContentNegotiationManager` then determines through the `ServletPathExtensionContentNegotiationStrategy` that I only support `application/octet-stream` on my client. This is because the `MockServletContext` when asked for `MediaType` for ""update.data"" returns `application/octet-stream`, which `ServletPathExtensionContentNegotiationStrategy` then interprets as the supported `MediaType` by the client. This doesn't match my method, so I get a 406 on the client in my unit test.  I am not quite sure where the error occurs here. But either `MockServletContext` is doing something wrong by returning `application/octet-stream`, or `ContentNegotiationManager` should always check the Accept header.  This seems to work fine when I am using it in jetty, but not in spring mvc-test.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8e4e0f353150f1f06840eafa60a1edcb7c89dcba  0 votes, 5 watchers","closed","type: bug,","spring-projects-issues","2013-02-26T06:36:52Z","2013-03-07T09:45:05Z"
"","14963","StringToEnumConverterFactory fails to convert enums using classes from values [SPR-10329]","**[Ståle Undheim](https://jira.spring.io/secure/ViewProfile.jspa?name=staaleu)** opened **[SPR-10329](https://jira.spring.io/browse/SPR-10329?redirect=false)** and commented  If an Enum has values with implementation, and a `StringToEnumConverterFactory` is created using a values class instead off the class on the enum itself, the converter factory fails. I think this is an issue with converting collections off enums, where the class for the content off the collection is derived from elements in the collection.  This is easily testable by creating an Enum, have an abstract method on the Enum and implement it in each value. Then create a `StringToEnumConvertFactory` using `getClass` on one off the values. The value classes will not actually return `true` from the `isEnum()` class, and you will have to get the superclass.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9a6c6b9ee63caa30b9e37960348f8f1a1259e123","closed","in: core,","spring-projects-issues","2013-02-24T23:15:39Z","2013-02-25T13:27:49Z"
"","15501","Async DeferredResult OpenSessionInViewFilter [SPR-10874]","**[Stig Runar Vangen](https://jira.spring.io/secure/ViewProfile.jspa?name=stigrv)** opened **[SPR-10874](https://jira.spring.io/browse/SPR-10874?redirect=false)** and commented  In a controller I return a DeferredResult in order to set up an async request. From an another thread I set the result of DeferredResult, and thus return the result back to the user.  The problem lies in that I also use a OpenSessionInViewFilter for Hibernate session management. This filter gives an error now and then indicating that a session is not bound to the current thread.  Stack trace is as follows:  ``` 29.aug.2013 11:15:57 [http-bio-8080-exec-1] ERROR org.apache.catalina.core.ContainerBase.[Catalina].[localhost].[/].[appServlet] - Servlet.service() for servlet appServlet threw exception java.lang.IllegalStateException: No value for key [org.hibernate.internal.SessionFactoryImpl@28af7fd7] bound to thread [http-bio-8080-exec-1] 	at org.springframework.transaction.support.TransactionSynchronizationManager.unbindResource(TransactionSynchronizationManager.java:209) 	at org.springframework.orm.hibernate4.support.OpenSessionInViewFilter.doFilterInternal(OpenSessionInViewFilter.java:157) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) 	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:749) 	at org.apache.catalina.core.ApplicationDispatcher.doDispatch(ApplicationDispatcher.java:660) 	at org.apache.catalina.core.ApplicationDispatcher.dispatch(ApplicationDispatcher.java:626) 	at org.apache.catalina.core.AsyncContextImpl$1.run(AsyncContextImpl.java:225) 	at org.apache.catalina.core.AsyncContextImpl.doInternalDispatch(AsyncContextImpl.java:367) 	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:217) 	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:123) 	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:171) 	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:99) 	at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:953) 	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118) 	at org.apache.catalina.connector.CoyoteAdapter.asyncDispatch(CoyoteAdapter.java:299) 	at org.apache.coyote.http11.AbstractHttp11Processor.asyncDispatch(AbstractHttp11Processor.java:1587) 	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:583) 	at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:312) 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603) 	at java.lang.Thread.run(Thread.java:722)  29.aug.2013 11:15:57 [http-bio-8080-exec-1] ERROR org.apache.catalina.core.ContainerBase.[Catalina].[localhost].[/].[appServlet] - Servlet.service() for servlet [appServlet] in context with path [] threw exception [java.lang.RuntimeException: java.lang.IllegalStateException: No value for key [org.hibernate.internal.SessionFactoryImpl@28af7fd7] bound to thread [http-bio-8080-exec-1]] with root cause java.lang.IllegalStateException: No value for key [org.hibernate.internal.SessionFactoryImpl@28af7fd7] bound to thread [http-bio-8080-exec-1] 	at org.springframework.transaction.support.TransactionSynchronizationManager.unbindResource(TransactionSynchronizationManager.java:209) 	at org.springframework.orm.hibernate4.support.OpenSessionInViewFilter.doFilterInternal(OpenSessionInViewFilter.java:157) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) 	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:749) 	at org.apache.catalina.core.ApplicationDispatcher.doDispatch(ApplicationDispatcher.java:660) 	at org.apache.catalina.core.ApplicationDispatcher.dispatch(ApplicationDispatcher.java:626) 	at org.apache.catalina.core.AsyncContextImpl$1.run(AsyncContextImpl.java:225) 	at org.apache.catalina.core.AsyncContextImpl.doInternalDispatch(AsyncContextImpl.java:367) 	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:217) 	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:123) 	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:171) 	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:99) 	at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:953) 	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118) 	at org.apache.catalina.connector.CoyoteAdapter.asyncDispatch(CoyoteAdapter.java:299) 	at org.apache.coyote.http11.AbstractHttp11Processor.asyncDispatch(AbstractHttp11Processor.java:1587) 	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:583) 	at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:312) 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603) 	at java.lang.Thread.run(Thread.java:722) ```    ---  **Affects:** 3.2.4  **Attachments:** - [transaction-trace.txt](https://jira.spring.io/secure/attachment/21498/transaction-trace.txt) (_22.53 kB_) - [wisweb2.log](https://jira.spring.io/secure/attachment/21372/wisweb2.log) (_5.24 MB_) - [wisweb2.log](https://jira.spring.io/secure/attachment/21366/wisweb2.log) (_1.48 MB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f9081bedb4c841690d209931435610ae76a52f67, https://github.com/spring-projects/spring-framework/commit/5d8fac86d749c9ea98eb7eda58655fe5fa3616d0","closed","type: bug,","spring-projects-issues","2013-08-29T02:29:47Z","2013-12-10T03:46:48Z"
"","15201","Eliminate Gradle 1.6 deprecation warnings [SPR-10572]","**[Stevo Slavić](https://jira.spring.io/secure/ViewProfile.jspa?name=sslavic)** opened **[SPR-10572](https://jira.spring.io/browse/SPR-10572?redirect=false)** and commented  Relevant build output fragment:  ``` :buildSrc:build UP-TO-DATE The ConfigurationContainer.add() method has been deprecated and is scheduled to be removed in Gradle 2.0. Please use the create() method instead. The TaskContainer.add() method has been deprecated and is scheduled to be removed in Gradle 2.0. Please use the create() method instead. ```  See also [deprecations paragraph in Gradle 1.6 release notes](http://www.gradle.org/docs/1.6/release-notes#renamed-several-add()-methods).   ---  **Affects:** 4.0 M1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bf205bfe79353956aed6c1d471a8604f53dd1559, https://github.com/spring-projects/spring-framework/commit/07b7553355d98aa700cef0975893d0a308a9b342","closed","type: task,","spring-projects-issues","2013-05-18T16:16:15Z","2013-12-03T15:15:34Z"
"","15200","Remove or replace MaxPermSize switch use [SPR-10571]","**[Stevo Slavić](https://jira.spring.io/secure/ViewProfile.jspa?name=sslavic)** opened **[SPR-10571](https://jira.spring.io/browse/SPR-10571?redirect=false)** and commented  Since JDK 8 is required to build Spring framework 4, and permanent generation is gone from Java 8 (see [this](http://mail.openjdk.java.net/pipermail/hotspot-dev/2012-September/006679.html)), to eliminate warnings about no longer available `MaxPermSize` switch, it should be replaced with new `MaxMetaspaceSize` switch or removed.   ---  **Affects:** 4.0 M1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1f5467a29deb69c84a01b66d06f2d65f37753af7, https://github.com/spring-projects/spring-framework/commit/ecf8464d2fc5233d4a75de5a99cd871d07c82de1","closed","type: task,","spring-projects-issues","2013-05-18T15:56:21Z","2013-07-24T10:17:13Z"
"","15113","Publish Spring BOM with Spring releases [SPR-10480]","**[Stevo Slavić](https://jira.spring.io/secure/ViewProfile.jspa?name=sslavic)** opened **[SPR-10480](https://jira.spring.io/browse/SPR-10480?redirect=false)** and commented  Even though Spring framework is modular, in typical Spring based Java web application most if not all Spring framework modules get used as dependencies, directly or transitively (from other frameworks in Spring portfolio, internal or 3rd party frameworks).  Apache Maven via dependencyManagement section allows one to control consistency of direct and transitive dependency versions. From practical personal experience, even ones that apply it, do that in limited fashion for only direct dependencies. Also, listing all Spring modules unnecessarily clutters build script when better solution is possible.  It would be great if Spring supported achieving this consistency, by making this practice almost effortless and clean, through publishing a BOM pom.xml with every new Spring release. It should contain dependencyManagement section with all published Spring framework modules listed as dependencies. Instead of listing all Spring modules in dependencyManagement section of each new project, one could then just import spring-bom module.  ---  **Affects:** 3.2.2  **Issue Links:** - #15764 Add Maven 'bill-of-materials' project (_**""is superseded by""**_)  6 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2013-04-21T16:09:12Z","2019-01-11T21:11:48Z"
"","15071","Fix missing font for JasperReports tests on Linux [SPR-10438]","**[Stevo Slavić](https://jira.spring.io/secure/ViewProfile.jspa?name=sslavic)** opened **[SPR-10438](https://jira.spring.io/browse/SPR-10438?redirect=false)** and commented  JasperReports dependency has been upgraded to 5.0.4 as one of the improvements coming with Spring 4.0. New JasperReports checks for presence of fonts that reports use and throws `JRFontNotFoundException` if either is not found. Before this fix mentioned exception was being thrown from Spring tests verifying JasperReports support since they reference Arial font which is not available by default on Linux distributions. This caused build failures on Linux environments.  Issue can be solved by packaging font with report, using JasperReports font extension support. Other way to handle this is by configuring JasperReports to ignore missing font and fallback to what is available.  For more info on these options see [JRFontNotFoundException javadoc](http://jasperreports.sourceforge.net/api/net/sf/jasperreports/engine/util/JRFontNotFoundException.html).  Here is relevant part of build output:  ``` :spring-webmvc:test  org.springframework.web.servlet.view.jasperreports.JasperReportsXlsViewTests > testWithSubReport                                                               FAILED     net.sf.jasperreports.engine.util.JRFontNotFoundException  org.springframework.web.servlet.view.jasperreports.JasperReportsXlsViewTests > testUncompiledReport                                                            FAILED     net.sf.jasperreports.engine.util.JRFontNotFoundException  org.springframework.web.servlet.view.jasperreports.JasperReportsXlsViewTests > testJRDataSourceOverridesJdbcDataSource                                         FAILED     net.sf.jasperreports.engine.util.JRFontNotFoundException  org.springframework.web.servlet.view.jasperreports.JasperReportsMultiFormatViewWithCustomMappingsTests > testOverrideContentDisposition                        FAILED     net.sf.jasperreports.engine.util.JRFontNotFoundException  org.springframework.web.servlet.view.jasperreports.JasperReportsMultiFormatViewWithCustomMappingsTests > testExporterParametersAreCarriedAcross                FAILED     net.sf.jasperreports.engine.util.JRFontNotFoundException  org.springframework.web.servlet.view.jasperreports.JasperReportsMultiFormatViewWithCustomMappingsTests > testSimpleHtmlRender                                  FAILED     net.sf.jasperreports.engine.util.JRFontNotFoundException  org.springframework.web.servlet.view.jasperreports.JasperReportsMultiFormatViewWithCustomMappingsTests > testWithSubReport                                     FAILED     net.sf.jasperreports.engine.util.JRFontNotFoundException  org.springframework.web.servlet.view.jasperreports.JasperReportsMultiFormatViewWithCustomMappingsTests > testUncompiledReport                                  FAILED     net.sf.jasperreports.engine.util.JRFontNotFoundException  org.springframework.web.servlet.view.jasperreports.JasperReportsMultiFormatViewWithCustomMappingsTests > testJRDataSourceOverridesJdbcDataSource               FAILED     net.sf.jasperreports.engine.util.JRFontNotFoundException  org.springframework.web.servlet.view.jasperreports.ConfigurableJasperReportsViewWithStreamTests > testWithSubReport                                            FAILED     net.sf.jasperreports.engine.util.JRFontNotFoundException  org.springframework.web.servlet.view.jasperreports.ConfigurableJasperReportsViewWithStreamTests > testUncompiledReport                                         FAILED     net.sf.jasperreports.engine.util.JRFontNotFoundException  org.springframework.web.servlet.view.jasperreports.ConfigurableJasperReportsViewWithStreamTests > testJRDataSourceOverridesJdbcDataSource                      FAILED     net.sf.jasperreports.engine.util.JRFontNotFoundException  org.springframework.web.servlet.view.jasperreports.JasperReportsMultiFormatViewTests > testOverrideContentDisposition                                          FAILED     net.sf.jasperreports.engine.util.JRFontNotFoundException at JasperReportsMultiFormatViewTests.java:70  org.springframework.web.servlet.view.jasperreports.JasperReportsMultiFormatViewTests > testExporterParametersAreCarriedAcross                                  FAILED     net.sf.jasperreports.engine.util.JRFontNotFoundException at JasperReportsMultiFormatViewTests.java:99  org.springframework.web.servlet.view.jasperreports.JasperReportsMultiFormatViewTests > testSimpleHtmlRender                                                    FAILED     net.sf.jasperreports.engine.util.JRFontNotFoundException at JasperReportsMultiFormatViewTests.java:47  org.springframework.web.servlet.view.jasperreports.JasperReportsMultiFormatViewTests > testWithSubReport                                                       FAILED     net.sf.jasperreports.engine.util.JRFontNotFoundException  org.springframework.web.servlet.view.jasperreports.JasperReportsMultiFormatViewTests > testUncompiledReport                                                    FAILED     net.sf.jasperreports.engine.util.JRFontNotFoundException  org.springframework.web.servlet.view.jasperreports.JasperReportsMultiFormatViewTests > testJRDataSourceOverridesJdbcDataSource                                 FAILED     net.sf.jasperreports.engine.util.JRFontNotFoundException  org.springframework.web.servlet.view.jasperreports.JasperReportsPdfViewTests > testWithSubReport                                                               FAILED     net.sf.jasperreports.engine.util.JRFontNotFoundException  org.springframework.web.servlet.view.jasperreports.JasperReportsPdfViewTests > testUncompiledReport                                                            FAILED     net.sf.jasperreports.engine.util.JRFontNotFoundException  org.springframework.web.servlet.view.jasperreports.JasperReportsPdfViewTests > testJRDataSourceOverridesJdbcDataSource                                         FAILED     net.sf.jasperreports.engine.util.JRFontNotFoundException  org.springframework.web.servlet.view.jasperreports.JasperReportsHtmlViewTests > testWithSubReport                                                              FAILED     net.sf.jasperreports.engine.util.JRFontNotFoundException  org.springframework.web.servlet.view.jasperreports.JasperReportsHtmlViewTests > testUncompiledReport                                                           FAILED     net.sf.jasperreports.engine.util.JRFontNotFoundException  org.springframework.web.servlet.view.jasperreports.JasperReportsHtmlViewTests > testJRDataSourceOverridesJdbcDataSource                                        FAILED     net.sf.jasperreports.engine.util.JRFontNotFoundException  org.springframework.web.servlet.view.jasperreports.ConfigurableJasperReportsViewWithWriterTests > testWithSubReport                                            FAILED     net.sf.jasperreports.engine.util.JRFontNotFoundException  org.springframework.web.servlet.view.jasperreports.ConfigurableJasperReportsViewWithWriterTests > testUncompiledReport                                         FAILED     net.sf.jasperreports.engine.util.JRFontNotFoundException  org.springframework.web.servlet.view.jasperreports.ConfigurableJasperReportsViewWithWriterTests > testJRDataSourceOverridesJdbcDataSource                      FAILED     net.sf.jasperreports.engine.util.JRFontNotFoundException  org.springframework.web.servlet.view.jasperreports.JasperReportsCsvViewTests > testWithSubReport                                                               FAILED     net.sf.jasperreports.engine.util.JRFontNotFoundException  org.springframework.web.servlet.view.jasperreports.JasperReportsCsvViewTests > testUncompiledReport                                                            FAILED     net.sf.jasperreports.engine.util.JRFontNotFoundException  org.springframework.web.servlet.view.jasperreports.JasperReportsCsvViewTests > testJRDataSourceOverridesJdbcDataSource                                         FAILED     net.sf.jasperreports.engine.util.JRFontNotFoundException  1760 tests completed, 30 failed, 4 skipped :spring-webmvc:test FAILED  FAILURE: Build failed with an exception. ```    ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/34bcdcfe85ecae7fba641ffc74f6240a4579b0b5, https://github.com/spring-projects/spring-framework/commit/d80ea16291d11c1611ebfe12669d4a67873d648c","closed","type: bug,","spring-projects-issues","2013-04-02T16:22:03Z","2013-04-13T13:46:25Z"
"","15006","JavaDoc generation reports warnings [SPR-10373]","**[Stevo Slavić](https://jira.spring.io/secure/ViewProfile.jspa?name=sslavic)** opened **[SPR-10373](https://jira.spring.io/browse/SPR-10373?redirect=false)** and commented  See build (on Linux JDK 7 update 9 x64) output fragment:  ``` :api javadoc: warning - Error fetching URL: http://commons.apache.org/lang/api-2.5/package-list javadoc: warning - Error fetching URL: http://commons.apache.org/dbcp/api-1.2.2/package-list /home/sslavic/git/spring-framework/spring-test/src/main/java/org/springframework/test/context/TestContext.java:173: warning - Tag @link: can't find markApplicationContextDirty(HierarchyMode) in org.springframework.test.context.TestContext /home/sslavic/git/spring-framework/spring-test/src/main/java/org/springframework/test/context/support/DirtiesContextTestExecutionListener.java:57: warning - Tag @link: can't find dirtyContext(TestContext, HierarchyMode) in org.springframework.test.context.support.DirtiesContextTestExecutionListener /home/sslavic/git/spring-framework/spring-test/src/main/java/org/springframework/test/context/support/DirtiesContextTestExecutionListener.java:74: warning - Tag @linkplain: can't find markApplicationContextDirty(HierarchyMode) in org.springframework.test.context.TestContext /home/sslavic/git/spring-framework/spring-web/src/main/java/org/springframework/web/util/HtmlUtils.java:38: warning - Tag @see: reference not found: org.apache.commons.lang.StringEscapeUtils /home/sslavic/git/spring-framework/spring-core/src/main/java/org/springframework/util/ObjectUtils.java:39: warning - Tag @see: reference not found: org.apache.commons.lang.ObjectUtils /home/sslavic/git/spring-framework/spring-core/src/main/java/org/springframework/util/StringUtils.java:55: warning - Tag @see: reference not found: org.apache.commons.lang.StringUtils /home/sslavic/git/spring-framework/spring-test/src/main/java/org/springframework/mock/web/MockServletContext.java:252: warning - Missing closing '}' character for inline tag: ""{@link ServletContext#getMimeType(String)  contract, as of version 3.2.2, this method returns null if the mimeType is  ""application/octet-stream""."" 9 warnings ```    ---  **Affects:** 3.2.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7bbd38b9e0284955be7f15e987ef0ca3d056699b, https://github.com/spring-projects/spring-framework/commit/1ca943c6810941d83a3f09b0e60a551f1371879c","closed","type: bug,","spring-projects-issues","2013-03-13T18:49:07Z","2013-05-07T12:13:52Z"
"","14844","Conversion service should find and use most specific converter [SPR-10211]","**[Stevo Slavić](https://jira.spring.io/secure/ViewProfile.jspa?name=sslavic)** opened **[SPR-10211](https://jira.spring.io/browse/SPR-10211?redirect=false)** and commented  Currently `GenericConversionService$Converters.find` method finds converter by first looping over source types and then over target types, and also neither of the two type candidate collections is sorted on type specificity. Both of this results in most specific converter not being found/used.  See for example `FacesConversionServiceTests` in Spring Webflow project (3.2.x branch which uses Spring 3.2.0). That test fails (for me) with error that there is no `String` to `DataModel` converter. After debugging I've found that real issue is in `GenericConversionService$Converters.find` method, even though there is converter registered for `List` to `DataModel` conversion, Spring's own `CollectionToObjectConverter` is chosen instead to perform conversion. In that test/example: - source candidates are:   - `java.util.ArrayList`   - `java.util.AbstractList`   - `java.util.AbstractCollection`   - `java.util.Collection`   - `java.lang.Iterable`   - `java.util.List`   - `java.util.RandomAccess`   - `java.lang.Cloneable`   - `java.io.Serializable`   - `java.lang.Object` - while target candidates are:   - `javax.faces.model.DataModel`   - `java.lang.Iterable`   - `java.lang.Object`  So when finding most specific converter, by looping over source candidates first and within it over target candidates, less specific `Collection` to `Object` converter will be found before more specific `List` to `DataModel` converter.  If I'm not mistaken it should be enough to loop over target types in outer loop, and then over source types in inner loop. Also sorting needs to be applied on type specificity in `GenericConversionService$Converters.getTypeHierarchy` or on its result (both source and target candidates collections), so that e.g. in source candidates a `List` is before `Collection`.  ---  **Affects:** 3.2 GA  **Issue Links:** - #14749 Fix GenericConversionService search algorithm (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2013-01-23T18:00:09Z","2019-01-12T16:47:11Z"
"","14784","Building 3.2.x branch with Java 7 fails - api depends on asmRepackJar [SPR-10151]","**[Stevo Slavić](https://jira.spring.io/secure/ViewProfile.jspa?name=sslavic)** opened **[SPR-10151](https://jira.spring.io/browse/SPR-10151?redirect=false)** and commented  If I just `./gradlew clean build` the build fails on spring-core module, api/javadoc task is executed and it fails, since it depends (at least on) asmRepackJar to be executed first.   ---  **Affects:** 3.2.1","closed","type: bug,","spring-projects-issues","2013-01-07T12:14:53Z","2013-01-07T14:22:02Z"
"","15108","tc server crashes on close [SPR-10475]","**[Steven](https://jira.spring.io/secure/ViewProfile.jspa?name=hardtail29)** opened **[SPR-10475](https://jira.spring.io/browse/SPR-10475?redirect=false)** and commented  Upon running a web app with a tc Server the running application is loaded into the workspace window. In os x WebKit is used to display the app content.  When the window is closed (e.g. click the close button on the tab or close STS) STS crashes with the attached output.  When the crash occurs the java thread the app is running in is not shutdown.   ---  **Affects:** 3.2 GA  **Attachments:** - [sts_crash_report.rtf](https://jira.spring.io/secure/attachment/21169/sts_crash_report.rtf) (_118.67 kB_)","closed","status: bulk-closed,","spring-projects-issues","2013-04-19T09:02:15Z","2019-01-12T00:23:53Z"
"","15004","Ability to use URI template variable + type converter to load model attribute updated by MappingJackson2HttpMessageConverter [SPR-10371]","**[steve bread](https://jira.spring.io/secure/ViewProfile.jspa?name=solze)** opened **[SPR-10371](https://jira.spring.io/browse/SPR-10371?redirect=false)** and commented  I want to update a model object using JSON data with a RESTful URI. My controller method looks like  ```java @RequestMapping(value = ""/{user}"", method = RequestMethod.PUT, consumes = ""application/json"") public ResponseEntity update(@RequestBody User user) {   ... } ```  and I have a Converter  ```java public class UserConverter implements Converter { ... } ```  My expectation is that the user object will be loaded by `UserConverter` and updated via Jackson but `UserConverter` is not called. If I add `@ModelAttribute(""user"")` to the method argument in addition to `@RequestBody` then `UserConverter` is called but not `MappingJackson2HttpMessageConverter`.  As a workaround I thought I would update the object manually using `ObjectMapper` and changed the method to  ```java @RequestMapping(value = ""/{user}"", method = RequestMethod.PUT, consumes = ""application/json"") public ResponseEntity update(User user, @RequestBody String body) { ... } ```  This doesn't work because `MappingJacksonHttpMessageConverter` is invoked for the `body` argument since the request content type is `application/json` and deserialization fails with a `JSONMappingException` since the request data is parsed into a JSON Object which is incompatible with the String type.  So the only options are  ```java @RequestMapping(value = ""/{user}"", method = RequestMethod.PUT, consumes = ""application/json"") public ResponseEntity update(User user, @RequestBody Map body) ```  or slightly better  ```java @RequestMapping(value = ""/{user}"", method = RequestMethod.PUT, consumes = ""application/json"") public ResponseEntity update(User user, @RequestBody User body) ```  both of which require even more manual handling   ---  **Affects:** 3.2.1  1 votes, 1 watchers","closed","status: bulk-closed,","spring-projects-issues","2013-03-12T21:20:18Z","2019-01-12T00:25:00Z"
"","14928","A type mismatch during JSON binding should add an error to the BindingResult instead of returning status 400 [SPR-10294]","**[steve bread](https://jira.spring.io/secure/ViewProfile.jspa?name=solze)** opened **[SPR-10294](https://jira.spring.io/browse/SPR-10294?redirect=false)** and commented  Given a handler method  ``` @RequestMapping(method = RequestMethod.POST, consumes = ""application/json"") @ResponseBody public ResponseEntity newUser(@RequestBody @Valid User user, Errors errors) throws Exception { } ```  If there is type mismatch during binding, then the server returns a status 400 instead of adding an error to the BindingResult as it does in the case of request parameter binding.  Excerpts from a DEBUG level log message from DefaultHandlerExceptionResolver  > org.springframework.http.converter.HttpMessageNotReadableException: Could not read JSON: Can not construct instance of java.lang.Integer from String value 'a': not a valid Integer value > nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Can not construct instance of java.lang.Integer from String value 'a': not a valid Integer value    ---  **Affects:** 3.2 GA","closed","type: enhancement,","spring-projects-issues","2013-02-14T00:09:01Z","2015-04-17T07:44:01Z"
"","15063","Advisor silently skipped if it is currently in creation [SPR-10430]","**[Stephen Todd](https://jira.spring.io/secure/ViewProfile.jspa?name=stephentodd)** opened **[SPR-10430](https://jira.spring.io/browse/SPR-10430?redirect=false)** and commented  In org.springframework.aop.framework.autoproxy.BeanFactoryAdvisorRetrievalHelper, if an advisor is currently in creation and should be a candidate for a bean being created, it is silently dropped. From the source, it appears that this isn't intended to happen silently. What I experienced was that the advisor is not applied and there is no log out (or an exception). Below is the offending code (BeanFactoryAdvisorRetrievalHelper:83-104 in current master):  ```java for (String name : advisorNames) { 	if (isEligibleBean(name) && !this.beanFactory.isCurrentlyInCreation(name)) { 		try { 			advisors.add(this.beanFactory.getBean(name, Advisor.class)); 		} 		catch (BeanCreationException ex) { 			Throwable rootCause = ex.getMostSpecificCause(); 			if (rootCause instanceof BeanCurrentlyInCreationException) { 				BeanCreationException bce = (BeanCreationException) rootCause; 				if (this.beanFactory.isCurrentlyInCreation(bce.getBeanName())) { 					if (logger.isDebugEnabled()) { 						logger.debug(""Ignoring currently created advisor '"" + name + ""': "" + ex.getMessage()); 					} 					// Ignore: indicates a reference back to the bean we're trying to advise. 					// We want to find advisors other than the currently created bean itself. 					continue; 				} 			} 			throw ex; 		} 	} } ```  As can be seen in the code, we check if the advisor bean (with name ""name"") is currently being created in the bean factory. If it is, then there is no `else` and the advisor is _silently_ dropped. If we look further into the code, it appears that we have an entire catch block setup to catch the same condition. If the check (`&& !this.beanFactory.isCurrentlyInCreation(name)`) is removed, then we will correctly execute the `catch` logic, which includes logging the issue (which maybe ought to be logged at warning level rather than debug).  Hopefully, we can save others from hours in the debugger like me. I spent a couple days in the debugger trying to figure out why my `@Transaction` annotation wasn't getting applied to my UserService. Turned out I had a dependency like this: create `@Transactional` advisor -> postprocess bean -> create MethodSecurity advisor -> create dependency UserService (which is `@Transactional`). As a result, the user service would not execute code in a transaction and my queries were failing. After finally discovering the issue, I had to late bind my custom MethodSecurity advisor.  Thanks!   ---  **Affects:** 3.2.2  2 votes, 6 watchers","closed","in: core,","spring-projects-issues","2013-03-29T18:58:08Z","2022-06-23T14:14:37Z"
"","17026","Testing chapter should refer to false negatives instead of false positives [SPR-12419]","**[Stephane](https://jira.spring.io/secure/ViewProfile.jspa?name=stephaneeybert)** opened **[SPR-12419](https://jira.spring.io/browse/SPR-12419?redirect=false)** and commented  #### Background  A [tip in the _Testing_ chapter of the reference manual](http://static.springsource.org/spring/docs/current/spring-framework-reference/html/testing.html#testcontext-tx-false-positives) refers to _false positives_, but I reckon it should refer to _false negatives_.  In the real world, when a test is negative, it means it didn't show what we were looking for. It is negative.  So we can assume that in the software world, when a test is negative it means it didn't fail on what we were trying to do. It is negative.  #### Proposal  The aforementioned tip in the reference manual refers to tests that pass when they should fail. So, these tests should be called _false negatives_ as they are not positive in the first place.   ---  **Affects:** 4.1.1","closed","status: bulk-closed,","spring-projects-issues","2013-06-30T23:41:37Z","2019-01-12T00:18:17Z"
"","14879","spring.ftl: hidden ""_"" input field with checkboxes must be disabled  [SPR-10246]","**[Stefan Haberl](https://jira.spring.io/secure/ViewProfile.jspa?name=birnbuazn)** opened **[SPR-10246](https://jira.spring.io/browse/SPR-10246?redirect=false)** and commented  Rendering a disabled checkbox with the provided Freemarker macro should disable the additional hidden ""_"" input field as well.","closed","status: bulk-closed,","spring-projects-issues","2013-01-31T00:44:07Z","2019-01-12T02:35:05Z"
"","15515","Make conversion framework extensible for non-Java classes [SPR-10887]","**[Stefan Gheorghiu](https://jira.spring.io/secure/ViewProfile.jspa?name=stefan.gheorghiu)** opened **[SPR-10887](https://jira.spring.io/browse/SPR-10887?redirect=false)** and commented  As of 3.2.4, the architecture of converters and related environment is very Java-centric and as such doesn't allow extending it with support of other JVM-based languages with different class hierarchies, such as Scala. Scala support provided by the Spring Scala project is rather limited and does not cover many use cases and native idiomatic concepts. Particularly, it is not applicable for binding web request data to controller/form parameters declared as Scala classes. This is not about the mismatch of the bean definitions which can be eliminated by annotations, but mostly about binding to Scala collections and monadic classes like Option.  The problem is caused by the fact that the hierarchy of classes descending from org.springframework.core.convert.AbstractDescriptor is designed in a way that much of intermediate information obtained from the type system with reflection is lost and, due to package-level access scope of classes, there is no ""legal"" way to capture it somewhere so to later use in custom converters.  Nevertheless, I managed to overcome these design flaws with a minimum intervention into descriptor classes. The main idea was to introduce descriptor extensions ‒— classes globally registered in a static collection of the TypeDescriptor class. When a certain descriptor implementation creates the TypeDescriptor instance, extensions get invoked with access to raw reflection data and can store additional data in a new TypeDesctiptor field of type Map. Custom converters that rely on this additional data can later extract it directly from source/target descriptors passed to their method convert().  The mentioned changes allowed me to implement many problematic scenarios like initialization of Option[Option[Int]] from a String by introducing a descriptor extension that digs deeply into type definition using Scala reflection API and stores this data as a custom attribute of TypeDescriptor. The algorithm is implemented lazily and is only executed when some converter demands the appropriate data.  The improvements can be found in the attachment as a diff based on version 3.2.4. So please consider incorporating them into some future version or at least learn my approach and make something more suitable.  Please don’t ignore this request as it can make Spring Framework more open to Scala adepts who might otherwise choose other frameworks which are more friendly to their language of choice.   ---  **Affects:** 3.2.4  **Attachments:** - [descriptor-extensions.diff](https://jira.spring.io/secure/attachment/21375/descriptor-extensions.diff) (_3.74 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e80b7d1e2206bfcca0592d6cf2e33c8fc608a0a8","closed","type: enhancement,","spring-projects-issues","2013-09-03T14:18:08Z","2019-01-11T22:08:37Z"
"","15360","spring-instrument has unused dependency on spring-core [SPR-10732]","**[Stefan Fussenegger](https://jira.spring.io/secure/ViewProfile.jspa?name=sfussenegger)** opened **[SPR-10732](https://jira.spring.io/browse/SPR-10732?redirect=false)** and commented  see [molindo-instrument](https://github.com/molindo/molindo-instrument) to verify   ---  **Affects:** 3.2.3  **Reference URL:** https://github.com/SpringSource/spring-framework/pull/313  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/274ed1fe670f8683da548b9863c77b95d71707da, https://github.com/spring-projects/spring-framework/commit/9939c4809b98988effa40f249096876de617886e","closed","type: bug,","spring-projects-issues","2013-07-10T08:03:02Z","2013-07-24T10:17:04Z"
"","15359","spring-instrument is lacking Java 7 instrumentation manifest attributes [SPR-10731]","**[Stefan Fussenegger](https://jira.spring.io/secure/ViewProfile.jspa?name=sfussenegger)** opened **[SPR-10731](https://jira.spring.io/browse/SPR-10731?redirect=false)** and commented  from pull request (Reference URL):  > After upgrading to OpenJDK 7 I can't retransform classes using > InstrumentationSavingAgent.getInstrumentation().addTransformer(t, true); >  > After some research I feel that spring-instrument is missing the required manifest attributes for Java 7 (see http://docs.oracle.com/javase/7/docs/api/java/lang/instrument/package-summary.html) >  > I'm neither an expert for instrumentation nor Gradle but I thought I'd give it a shot to at least start a discussion.    ---  **Affects:** 3.2.3  **Reference URL:** https://github.com/SpringSource/spring-framework/pull/311  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/50333ca68ede797bf40623f95591fe6a2348edca, https://github.com/spring-projects/spring-framework/commit/1b47f6c0b0d67a0830efe579c71a450639dcc236","closed","type: bug,","spring-projects-issues","2013-07-09T22:40:31Z","2013-07-24T10:17:10Z"
"","15079","ModelAndView cannot be cast to java.lang.String (in debug mode) [SPR-10446]","**[Stan Rosenberg](https://jira.spring.io/secure/ViewProfile.jspa?name=srosenberg)** opened **[SPR-10446](https://jira.spring.io/browse/SPR-10446?redirect=false)** and commented  In debug mode (log4j.category.org.springframework = DEBUG), spring is throwing an exception inside the generated toString method. The culprit may be the line: logger.debug(""Mapping ["" + lookupPath + ""] to "" + handler), in AbstractUrlHandlerMapping.  Here is the full stack trace,  java.lang.ClassCastException: org.springframework.web.servlet.ModelAndView cannot be cast to java.lang.String at com.appnexus.dmf.api.controllers.JobController$$EnhancerByCGLIB$$50e3af05.toString(\) at java.lang.String.valueOf(String.java:2826) at java.lang.StringBuilder.append(StringBuilder.java:115) at org.springframework.web.servlet.HandlerExecutionChain.toString(HandlerExecutionChain.java:204) at java.lang.String.valueOf(String.java:2826) at java.lang.StringBuilder.append(StringBuilder.java:115) at org.springframework.web.servlet.handler.AbstractUrlHandlerMapping.getHandlerInternal(AbstractUrlHandlerMapping.java:124) at org.springframework.web.servlet.handler.AbstractHandlerMapping.getHandler(AbstractHandlerMapping.java:297) at org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java:1091) at org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java:1076) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:896) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:856) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:920) at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:816) at javax.servlet.http.HttpServlet.service(HttpServlet.java:707) at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:801) at javax.servlet.http.HttpServlet.service(HttpServlet.java:820) at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:534) at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:476) at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:934) at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:404) at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:869) at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:117) at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:151) at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116) at org.eclipse.jetty.server.Server.handle(Server.java:346) at org.eclipse.jetty.server.HttpConnection.handleRequest(HttpConnection.java:581) at org.eclipse.jetty.server.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:1040) at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:592) at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:214) at org.eclipse.jetty.server.HttpConnection.handle(HttpConnection.java:411) at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:526) at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:41) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:680)   ---  **Affects:** 3.2.1","closed","status: invalid,","spring-projects-issues","2013-04-05T18:59:40Z","2019-01-12T05:27:07Z"
"","14706","Multiple controllers for Single Portlet [SPR-10073]","**[Srinath](https://jira.spring.io/secure/ViewProfile.jspa?name=srinath.n)** opened **[SPR-10073](https://jira.spring.io/browse/SPR-10073?redirect=false)** and commented  Hello,  I am working with Spring Portlet MVC with IBM WPS 6.1 Portel Server.As per the application design we should use multiple controllers for single portlet.Here what i found the problem i can able to use class level request action parameters to distinguish the desired controller but when i set the  response.setRenderParameter(""myaction"", ""ABCRender""); in that action it's going to main portlet controler render method.but it should find with in the same controller render method.   ---  **Affects:** 3.1.1","closed","status: declined,","spring-projects-issues","2012-12-04T22:26:05Z","2019-01-12T16:24:45Z"
"","15401","Spring + Quartz 2.2.0 Integration is Inconsistent  [SPR-10775]","**[sreekanth](https://jira.spring.io/secure/ViewProfile.jspa?name=sreekanth.nair@egovernments.org)** opened **[SPR-10775](https://jira.spring.io/browse/SPR-10775?redirect=false)** and commented  There are a chain of problems in spring quartz integration. I'm really unsure some of the below mentioned error is spring problem or quartz problem.  I'm getting this error while using quartz-2.2.0 (even in 2.1.7) + Spring-3.2.3, which we where not facing before.  1)   ``` ERROR [org.springframework.web.context.ContextLoader] (ServerService Thread Pool -- 50) Context initialization failed: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'pgrSchedular' defined in ServletContext resource [/WEB-INF/applicationQuartzContext-pgr.xml]: Invocation of init method failed; nested exception is org.quartz.JobPersistenceException: Couldn't store trigger 'PGR_ESCALATION_TRIGGER_GROUP.PGR_ESCALATION_TRIGGER' for 'PGR_JOB_GROUP.PGR_ESCALATION_JOB' job:The job (PGR_JOB_GROUP.PGR_ESCALATION_JOB) referenced by the trigger does not exist. [See nested exception: org.quartz.JobPersistenceException: The job (PGR_JOB_GROUP.PGR_ESCALATION_JOB) referenced by the trigger does not exist.] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1482) [spring-beans-3.2.3.RELEASE.jar:3.2.3.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:521) [spring-beans-3.2.3.RELEASE.jar:3.2.3.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:458) [spring-beans-3.2.3.RELEASE.jar:3.2.3.RELEASE] 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:295) [spring-beans-3.2.3.RELEASE.jar:3.2.3.RELEASE] 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223) [spring-beans-3.2.3.RELEASE.jar:3.2.3.RELEASE] 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:292) [spring-beans-3.2.3.RELEASE.jar:3.2.3.RELEASE] 	at org.springframewor  ```  2)   ``` [0m[31m14:47:24,783 ERROR [org.springframework.web.context.ContextLoader] (ServerService Thread Pool -- 58) Context initialization failed: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'pgrSchedular' defined in ServletContext resource [/WEB-INF/applicationQuartzContext-pgr.xml]: Cannot resolve reference to bean 'complaintEscalationCronTrigger' while setting bean property 'triggers' with key [0]; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'complaintEscalationCronTrigger' defined in ServletContext resource [/WEB-INF/applicationQuartzContext-pgr.xml]: Cannot resolve reference to bean 'complaintEscalationJobDetail' while setting bean property 'jobDetail'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'complaintEscalationJobDetail' defined in ServletContext resource [/WEB-INF/applicationQuartzContext-pgr.xml]: Error setting property values; nested exception is org.springframework.beans.NotWritablePropertyException: Invalid property 'requestsRecovery' of bean class [org.springframework.scheduling.quartz.JobDetailFactoryBean]: Bean property 'requestsRecovery' is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter? 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:329) [spring-beans-3.2.3.RELEASE.jar:3.2.3.RELEASE] 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:107) [spring-beans-3.2.3.RELEASE.jar:3.2.3.RELEASE] 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveManagedList(BeanDefinitionValueResolver.java:353) [spring-beans-3.2.3.RELEASE.jar:3.2.3.RELEASE] 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:154) [spring-beans-3.2.3.RELEASE.jar:3.2.3.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1387) [spring-beans-3.2.3.RELEASE.jar:3.2.3.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1128) [spring-beans-3.2.3.RELEASE.jar:3.2.3.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519) [spring-beans-3.2.3.RELEASE.jar:3.2.3.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:458) [spring-beans-3.2.3.RELEASE.jar:3.2.3.RELEASE] 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:295) [spring-beans-3.2.3.RELEASE.jar:3.2.3.RELEASE] 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223) [spring-beans-3.2.3.RELEASE.jar:3.2.3.RELEASE] 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:292) [spring-beans-3.2.3.RELEASE.jar:3.2.3.RELEASE]  ```  3)   ``` Caused by: org.quartz.JobPersistenceException: Couldn't store trigger 'PGR_ESCALATION_TRIGGER_GROUP.PGR_ESCALATION_TRIGGER' for 'PGR_JOB_GROUP.PGR_ESCALATION_JOB' job:JobDataMap values must be Strings when the 'useProperties' property is set.  Key of offending value: jobDetail [See nested exception: java.io.IOException: JobDataMap values must be Strings when the 'useProperties' property is set.  Key of offending value: jobDetail] 	at org.quartz.impl.jdbcjobstore.JobStoreSupport.storeTrigger(JobStoreSupport.java:1222) [quartz-2.2.0.jar:] 	at org.quartz.impl.jdbcjobstore.JobStoreSupport$4.execute(JobStoreSupport.java:1158) [quartz-2.2.0.jar:] 	at org.quartz.impl.jdbcjobstore.JobStoreSupport$45.execute(JobStoreSupport.java:3705) [quartz-2.2.0.jar:] 	at org.quartz.impl.jdbcjobstore.JobStoreCMT.executeInLock(JobStoreCMT.java:245) [quartz-2.2.0.jar:] 	at org.quartz.impl.jdbcjobstore.JobStoreSupport.executeInLock(JobStoreSupport.java:3701) [quartz-2.2.0.jar:] 	at org.quartz.impl.jdbcjobstore.JobStoreSupport.storeTrigger(JobStoreSupport.java:1154) [quartz-2.2.0.jar:] 	at org.quartz.core.QuartzScheduler.scheduleJob(QuartzScheduler.java:962) [quartz-2.2.0.jar:] 	at org.quartz.impl.StdScheduler.scheduleJob(StdScheduler.java:258) [quartz-2.2.0.jar:] 	at org.springframework.scheduling.quartz.SchedulerAccessor.addTriggerToScheduler(SchedulerAccessor.java:371) [spring-context-support-3.2.3.RELEASE.jar:3.2.3.RELEASE] 	at org.springframework.scheduling.quartz.SchedulerAccessor.registerJobsAndTriggers(SchedulerAccessor.java:303) [spring-context-support-3.2.3.RELEASE.jar:3.2.3.RELEASE] 	at org.springframework.scheduling.quartz.SchedulerFactoryBean.afterPropertiesSet(SchedulerFactoryBean.java:511) [spring-context-support-3.2.3.RELEASE.jar:3.2.3.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1541) [spring-beans-3.2.3.RELEASE.jar:3.2.3.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1479) [spring-beans-3.2.3.RELEASE.jar:3.2.3.RELEASE] 	... 24 more Caused by: java.io.IOException: JobDataMap values must be Strings when the 'useProperties' property is set.  Key of offending value: jobDetail 	at org.quartz.impl.jdbcjobstore.StdJDBCDelegate.convertToProperty(StdJDBCDelegate.java:3115) [quartz-2.2.0.jar:] 	at org.quartz.impl.jdbcjobstore.StdJDBCDelegate.serializeProperties(StdJDBCDelegate.java:3082) [quartz-2.2.0.jar:] 	at org.quartz.impl.jdbcjobstore.StdJDBCDelegate.serializeJobData(StdJDBCDelegate.java:3034) [quartz-2.2.0.jar:] 	at org.quartz.impl.jdbcjobstore.StdJDBCDelegate.insertTrigger(StdJDBCDelegate.java:1045) [quartz-2.2.0.jar:] 	at org.quartz.impl.jdbcjobstore.JobStoreSupport.storeTrigger(JobStoreSupport.java:1219) [quartz-2.2.0.jar:] 	... 36 more ```  4) FYI i'm using ojdbc6.jar  ``` [31m17:26:10,949 ERROR [org.springframework.web.context.ContextLoader] (ServerService Thread Pool -- 57) Context initialization failed: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'pgrSchedular' defined in ServletContext resource [/WEB-INF/applicationQuartzContext-pgr.xml]: Invocation of init method failed; nested exception is org.quartz.SchedulerException: Registration of jobs and triggers failed: oracle/sql/BLOB 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1482) [spring-beans-3.2.3.RELEASE.jar:3.2.3.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:521) [spring-beans-3.2.3.RELEASE.jar:3.2.3.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:458) [spring-beans-3.2.3.RELEASE.jar:3.2.3.RELEASE] 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:295) [spring-beans-3.2.3.RELEASE.jar:3.2.3.RELEASE] 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223) [spring-beans-3.2.3.RELEASE.jar:3.2.3.RELEASE] 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:292) [spring-beans-3.2.3.RELEASE.jar:3.2.3.RELEASE] 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194) [spring-beans-3.2.3.RELEASE.jar:3.2.3.RELEASE] 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:608) [spring-beans-3.2.3.RELEASE.jar:3.2.3.RELEASE] 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:932) [spring-context-3.2.3.RELEASE.jar:3.2.3.RELEASE] 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:479) [spring-context-3.2.3.RELEASE.jar:3.2.3.RELEASE] 	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:389) [spring-web-3.2.3.RELEASE.jar:3.2.3.RELEASE] 	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:294) [spring-web-3.2.3.RELEASE.jar:3.2.3.RELEASE] 	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:112) [spring-web-3.2.3.RELEASE.jar:3.2.3.RELEASE] 	at org.apache.catalina.core.StandardContext.contextListenerStart(StandardContext.java:3339) [jbossweb-7.2.0.Final-redhat-1.jar:7.2.0.Final-redhat-1] 	at org.apache.catalina.core.StandardContext.start(StandardContext.java:3777) [jbossweb-7.2.0.Final-redhat-1.jar:7.2.0.Final-redhat-1] 	at org.jboss.as.web.deployment.WebDeploymentService.doStart(WebDeploymentService.java:156) [jboss-as-web-7.2.0.Final-redhat-8.jar:7.2.0.Final-redhat-8] 	at org.jboss.as.web.deployment.WebDeploymentService.access$000(WebDeploymentService.java:60) [jboss-as-web-7.2.0.Final-redhat-8.jar:7.2.0.Final-redhat-8] 	at org.jboss.as.web.deployment.WebDeploymentService$1.run(WebDeploymentService.java:93) [jboss-as-web-7.2.0.Final-redhat-8.jar:7.2.0.Final-redhat-8] 	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471) [rt.jar:1.7.0_25] 	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334) [rt.jar:1.7.0_25] 	at java.util.concurrent.FutureTask.run(FutureTask.java:166) [rt.jar:1.7.0_25] 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) [rt.jar:1.7.0_25] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) [rt.jar:1.7.0_25] 	at java.lang.Thread.run(Thread.java:724) [rt.jar:1.7.0_25] 	at org.jboss.threads.JBossThread.run(JBossThread.java:122) Caused by: org.quartz.SchedulerException: Registration of jobs and triggers failed: oracle/sql/BLOB 	at org.springframework.scheduling.quartz.SchedulerAccessor.registerJobsAndTriggers(SchedulerAccessor.java:324) [spring-context-support-3.2.3.RELEASE.jar:3.2.3.RELEASE] 	at org.springframework.scheduling.quartz.SchedulerFactoryBean.afterPropertiesSet(SchedulerFactoryBean.java:511) [spring-context-support-3.2.3.RELEASE.jar:3.2.3.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1541) [spring-beans-3.2.3.RELEASE.jar:3.2.3.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1479) [spring-beans-3.2.3.RELEASE.jar:3.2.3.RELEASE] 	... 24 more ```  Attaching application bean xml for quartz. Environment is JBoss AS 7 + Spring3.2.3 + Quartz2.2.0 + ubuntu  ---  **Affects:** 3.2.3  **Attachments:** - [applicationQuartzContext.xml](https://jira.spring.io/secure/attachment/21298/applicationQuartzContext.xml) (_5.91 kB_)  **Issue Links:** - #13718 JobDetailFactoryBean missing properties to set description and durability on JobDetail - #15908 Full Quartz 2.2 compatibility, including LocalDataSourceJobStore  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2f8dfb3e526265e20489010aa05a45131bdb305e, https://github.com/spring-projects/spring-framework/commit/dfac1d0510127b529eb47cb29bef8bb2e4a24fa2, https://github.com/spring-projects/spring-framework/commit/676f7f95714530c4d6c5d3a28469f15930938713, https://github.com/spring-projects/spring-framework/commit/f83518860194c7e08da4897c4679bddad0110fe4, https://github.com/spring-projects/spring-framework/commit/d504d69ae54ec59f17b8106167e416d133135519, https://github.com/spring-projects/spring-framework/commit/d5c78c953dd6ae2dc582a3bd0a2c06d5f02a8f08","closed","in: core,","spring-projects-issues","2013-07-24T02:54:04Z","2019-01-11T22:03:32Z"
"","15385","Lazy loading for bean property references [SPR-10759]","**[sreekanth](https://jira.spring.io/secure/ViewProfile.jspa?name=sreekanth.nair@egovernments.org)** opened **[SPR-10759](https://jira.spring.io/browse/SPR-10759?redirect=false)** and commented  Don't really know whether spring supports lazy loading of bean property references.?  If not this will be a nice to have feature.   --- No further details from [SPR-10759](https://jira.spring.io/browse/SPR-10759?redirect=false)","closed","type: enhancement,","spring-projects-issues","2013-07-19T04:21:23Z","2016-09-01T21:11:12Z"
"","15170","MessageListener not working [SPR-10540]","**[Sreejith K P](https://jira.spring.io/secure/ViewProfile.jspa?name=sreejith_kp)** opened **[SPR-10540](https://jira.spring.io/browse/SPR-10540?redirect=false)** and commented           	     	       	                                        	          		            I have used the Default message Listener as given above. But the above listener(JMSMessageListner) is not getting invoked. Can anyone suggest on this?   --- No further details from [SPR-10540](https://jira.spring.io/browse/SPR-10540?redirect=false)","closed","in: messaging,","spring-projects-issues","2013-05-08T03:14:46Z","2019-01-11T22:16:38Z"
"","14853","spring spring-mvc-chat example regression error when upgrading from 3.2.0 to 3.2.1 [SPR-10220]","**[Sorriso](https://jira.spring.io/secure/ViewProfile.jspa?name=sorriso)** opened **[SPR-10220](https://jira.spring.io/browse/SPR-10220?redirect=false)** and commented  Under Mac os X 10.8.2 With a new brand version of eclipse eclipse-jee-juno-SR2-RC1-macosx-cocoa-x86_64 in a new workspace folder, with no .m2 existing directory 1/ install maven plugin with eclipse market place 2/ create an eclipse maven project with webApp artifact 3/ get spring spring-mvc-chat example on https://github.com/rstoyanchev/spring-mvc-chat 4/ update eclipse project with example source, refresh project, tune assembly properties 5/ add webApp facet in project, download & add tomcat 7 server 6/ run webApp & test it -> ok  7/ update from pom.xml from 3.2.0.BUILD-SNAPSHOT to 3.2.0.RELEASE 8/ run webApp & test it -> ok  9/ update from pom.xml from 3.2.0.RELEASE to 3.2.1.RELEASE 10/ project error in WebMvcConfig.java and in chatRepository.java (DeferredResult not found)  Can you please update sample and / or correct bug ?   ---  **Affects:** 3.2.1","closed","","spring-projects-issues","2013-01-26T08:46:40Z","2019-01-11T21:36:01Z"
"","15032","parameter value mapping bug. [SPR-10399]","**[song young moon](https://jira.spring.io/secure/ViewProfile.jspa?name=song%20young%20moon)** opened **[SPR-10399](https://jira.spring.io/browse/SPR-10399?redirect=false)** and commented  parameter value mapping bug.  parameter key name is comments.  value is A,B,C,D,E  class name is ImageVO.  class variable names is comments  variable type is String Array.  ---  success case.  request.getParameterValues.length values is 1.  auto mapping ImageVO class variable getComments().length is 1.  request.getParameterValues(""comments"")[0] value is A,B,C,D,E.  getComments()[0]. value is A,B,C,D,E.  error case.  request.getParameterValues.length values is 1.  auto mapping ImageVO class variable getComments().length is 5.  getComments()[0] value is A. getComments()[1] value is B. getComments()[2] value is C. getComments()[3] value is D. getComments()[4] value is E.  ---  ---  **Affects:** 3.1.2  **Attachments:** - [spring-bug-01.png](https://jira.spring.io/secure/attachment/21112/spring-bug-01.png) (_26.60 kB_) - [spring-mvc-web-parameter-bug.zip](https://jira.spring.io/secure/attachment/21117/spring-mvc-web-parameter-bug.zip) (_4.30 MB_)  0 votes, 6 watchers","closed","status: declined,","spring-projects-issues","2013-03-20T03:39:21Z","2019-01-13T21:04:00Z"
"","15494","jdbctemplate for keyholder [SPR-10867]","**[skzr.org](https://jira.spring.io/secure/ViewProfile.jspa?name=skzr.org@gmail.com)** opened **[SPR-10867](https://jira.spring.io/browse/SPR-10867?redirect=false)** and commented  I hope JdbcTemplate can support more with KeyHolder.  * updateRetKeyHolder like this:  ```java public KeyHolder updateRetKeyHolder(final String sql, final Object... args) { 	logger.debug(""Insert and return KeyHolder for SQL: {}"", sql); 	KeyHolder keyHolder = new GeneratedKeyHolder(); 	try { 		update(new PreparedStatementCreator() { 			@Override 			public PreparedStatement createPreparedStatement(Connection con) throws SQLException { 				PreparedStatement ps = con.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS); 				setValues(ps, args); 				return ps; 			} 		}, keyHolder); 	} finally { 		StatementCreatorUtils.cleanupParameters(args); 	} 	return keyHolder; } ```  * batchUpdateRetKeyHolder like this:  ```java public  List batchUpdateRetKeyHolder(JdbcTemplate jdbcTemplate, final String sql, final List beans) { 	logger.debug(""Batch update with KeyHolder for SQL: {}, batch size: {}"", sql, beans.size()); 	final List keyHolders = new ArrayList(beans.size()); 	 	execute(new PreparedStatementCreator() { 		@Override 		public PreparedStatement createPreparedStatement(Connection con) throws SQLException { 			return con.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS); 		} 	}, new PreparedStatementCallback() { 		@Override 		public int[] doInPreparedStatement(PreparedStatement ps) throws SQLException, DataAccessException { 			try { 				int batchSize = beans.size(); 				int[] result; 				KeyHolder keyHolder = new GeneratedKeyHolder(); 				 				try { 					if (JdbcUtils.supportsBatchUpdates(ps.getConnection())) { 						for (int i = 0; i < batchSize; i++) { 							setValues(ps, i); 							ps.addBatch(); 						} 						result = ps.executeBatch(); 						 						generatedKeys(ps, keyHolder); 					} else { 						List rowsAffected = new ArrayList(); 						for (int i = 0; i < batchSize; i++) { 							setValues(ps, i); 							 							rowsAffected.add(ps.executeUpdate()); 							generatedKeys(ps, keyHolder); 						} 						 						result = UtilCollection.tointArray(rowsAffected); 					} 				} finally { 					keyHolders.add(keyHolder); 				} 				 				return result; 			} finally { 				cleanupParameters(); 			} 		} 	}); 	return keyHolders; } ```    ---  **Affects:** 3.2.4","closed","status: bulk-closed,","spring-projects-issues","2013-08-28T00:31:54Z","2019-01-12T02:32:39Z"
"","15214","@RequestBody Content-Encoding header support [SPR-10585]","**[skzr.org](https://jira.spring.io/secure/ViewProfile.jspa?name=skzr.org@gmail.com)** opened **[SPR-10585](https://jira.spring.io/browse/SPR-10585?redirect=false)** and commented  Thanks for your help!  when http client send a large JSON datas (application/json), It's a better choice to use content-encoding request.  ``` req.add_header('Content-Encoding', 'gzip') req.add_header('Content-Type', 'application/json') ```  my test:  ``` import logging, json, gzip from StringIO import StringIO  items = [] for i in range(100):     items.append([util.getTimestamp() + i * 1000, [[None,""cpu"",1,[1,2,3,4,5]],[12, ""mem"",2,[5,4,3,2,1]]]]) text = json.dumps(items);  out = StringIO() zipfile = gzip.GzipFile(fileobj=out, mode='w'); zipfile.write(text) zipfile.close() gzipText = out.getvalue()  logging.debug('send(len=%s zlib=%s gzip=%s)', len(text), len(text.encode('zlib')), len(gzipText))  >>>result: 2013-05-25 01:37:29,967 DEBUG send(len=8700 zlib=338 gzip=343) 2013-05-25 01:37:32,983 DEBUG send(len=8700 zlib=338 gzip=343) 2013-05-25 01:37:36,002 DEBUG send(len=8700 zlib=338 gzip=343) ```  This is really good Performance ^ ^  So, I hope it can be support for request content-encoding.  I think it's very easy to implement (only update readJavaType method):  ```java org.springframework.http.converter.json.MappingJackson2HttpMessageConverter  and  org.springframework.http.converter.json.MappingJacksonHttpMessageConverter {  	... 	 	private Object readJavaType(JavaType javaType, HttpInputMessage inputMessage) { 		try { 			InputStream body = inputMessage.getBody(); 			if (!(body instanceof InflaterInputStream)) { 				String contentEncoding = inputMessage.getHeaders().getFirst(""content-encoding""); 				if (""deflate"".equals(contentEncoding)) { 					body = new InflaterInputStream(body); 				} else if (""gzip"".equals(contentEncoding)) { 					body = new GZIPInputStream(body); 				} 			} 			return this.objectMapper.readValue(body, javaType); 		} catch (IOException ex) { 			throw new HttpMessageNotReadableException(""Could not read JSON: "" + ex.getMessage(), ex); 		} 	}  	... } ```  The end, this's my code (my project use spring 3.0.5), and it's work good!  ```java @SuppressWarnings(""deprecation"") @Lazy public class MappingJacksonCompressHttpMessageConverter extends MappingJacksonHttpMessageConverter { 	@Autowired //because spring3.0 cann't support , i hacked. 	private AnnotationMethodHandlerAdapter annotationMethodHandlerAdapter; 	 	@PostConstruct 	public void init() { 		List","closed","type: enhancement,","spring-projects-issues","2013-05-24T10:50:32Z","2013-11-05T10:02:14Z"
"","15177","BeanPropertyRowMapper underscoreName [SPR-10547]","**[skzr.org](https://jira.spring.io/secure/ViewProfile.jspa?name=skzr.org@gmail.com)** opened **[SPR-10547](https://jira.spring.io/browse/SPR-10547?redirect=false)** and commented  ：（  Method: org.springframework.jdbc.core.BeanPropertyRowMapper.underscoreName(String name)  java doc:  > Convert a name in camelCase to an underscored name in lower case. Any upper case letters are converted to lower case with a preceding underscore. >  > Parameters: > name the string containing original name > Returns: > the converted name  ``` private String underscoreName(String name) {      StringBuilder result = new StringBuilder();      if (name != null && name.length() > 0) {           result.append(name.substring(0, 1).toLowerCase());           for (int i = 1; i < name.length(); i++) {                String s = name.substring(i, i + 1);                if (s.equals(s.toUpperCase())) {                         result.append(""_"");                         result.append(s.toLowerCase());                }                else {                         result.append(s);                }           }      }      return result.toString(); } ```  Test:  so, if ""s"" is a Digit or underscore, it's not work fine. Ex:  ``` java: underscoreName(""orderTime0"") == order_time_0 underscoreName(""orderTime1"") == order_time_1  db: column: order_time0, order_time1  but i need order_time0，because 0 is not a upper case. ```  My Idea:  > if (s.equals(s.toUpperCase())) >  > below it's better! > if (!s.equals(s.toLowerCase()))  Thanks for your help!  ---  **Affects:** 3.2.2  **Issue Links:** - #21476 The BeanPropertyRowMapper does not work for field names ending with ""numbers"" which worked for 3.1","closed","type: bug,","spring-projects-issues","2013-05-09T19:39:03Z","2019-01-11T22:15:09Z"
"","14917","Misspelled word in Spring Framework 3.2.x reference documentation [SPR-10283]","**[skis](https://jira.spring.io/secure/ViewProfile.jspa?name=skis)** opened **[SPR-10283](https://jira.spring.io/browse/SPR-10283?redirect=false)** and commented  Fix the misspelled word ""servers"" in second sentence of Section 4.7. The correct word would be serves   ---  **Affects:** 3.2.1  **Reference URL:** http://static.springsource.org/spring/docs/3.2.x/spring-framework-reference/html/new-in-3.2.html  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/39c6341cea50f0b5e2c88b72b292240eae2c581f","closed","type: documentation,","spring-projects-issues","2013-02-12T11:42:09Z","2013-02-12T22:44:39Z"
"","14987","mvc:resources location attribute doesn't guarantee order [SPR-10355]","**[Sjoerd Mulder](https://jira.spring.io/secure/ViewProfile.jspa?name=sjoerdmulder)** opened **[SPR-10355](https://jira.spring.io/browse/SPR-10355?redirect=false)** and commented  Having strange behaviour lately since upgrading to spring 3.2, seems the underlying behavior of the location attribute changed. From the documentation it should function like:  ""Multiple locations may be specified as a comma-separated list,	and the locations will be checked for a given resource in the order specified.""  But looking at the following commit, somebody changed it from a List to a Set  https://fisheye.springsource.org/browse/spring-framework/spring-webmvc/src/main/java/org/springframework/web/servlet/config/ResourcesBeanDefinitionParser.java?r1=02a4473c62d8240837bec297f0a1f3cb67ef8a7b&r2=62f2858f7f6da9eb84366b3c5f4f693838d159f3   ---  **Affects:** 3.2.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7bc5353e07c6a3f6759410e7d3c2acaf82e8ddda","closed","type: bug,","spring-projects-issues","2013-03-06T05:28:48Z","2013-03-06T11:28:05Z"
"","15425","Add support for discovering JPA 2.1 @Converter during scanning [SPR-10799]","**[Sinuhé](https://jira.spring.io/secure/ViewProfile.jspa?name=sinuhe)** opened **[SPR-10799](https://jira.spring.io/browse/SPR-10799?redirect=false)** and commented  **JPA 2.1 spec** permits registering of converters using _`@Converter`_ annotation. This works ok, at least in **EclipseLink**'s last version. But it doesn't work with _XML-free_ configuration using Spring. This is due to _DefaultPersistenceUnitManager_ class, which scans specified packages looking for classes annotated with _`@Entity`_, _`@Embeddable`_ and _`@MappedSuperclass`_, but not _`@Converter`_.  Just adding _new AnnotationTypeFilter(Converter.class, false)_ to _entityTypeFilters_ field worked for me.  ``` private static final TypeFilter[] entityTypeFilters = new TypeFilter[] {     new AnnotationTypeFilter(Entity.class, false),     new AnnotationTypeFilter(Embeddable.class, false),     new AnnotationTypeFilter(MappedSuperclass.class, false),     new AnnotationTypeFilter(Converter.class, false)}; ```  ---  **Affects:** 3.2.3  **Reference URL:** http://eclipse.1072660.n5.nabble.com/Converter-not-being-picked-up-despite-having-autoApply-true-td161166.html  **Issue Links:** - #16849 LocalSessionFactoryBean doesn't support JPA 2.1 auto-apply `@Converter` on Hibernate 4.3","closed","type: enhancement,","spring-projects-issues","2013-07-31T08:53:37Z","2019-01-13T06:58:44Z"
"","15087","Add exposeProxy to @EnableAspectJAutoProxy [SPR-10454]","**[Sinuhé](https://jira.spring.io/secure/ViewProfile.jspa?name=sinuhe)** opened **[SPR-10454](https://jira.spring.io/browse/SPR-10454?redirect=false)** and commented  `@EnableAspectJAutoProxy` is the Javaconfig equivalence of  tag. It has proxyTargetClass property, but it lacks a substitution for expose-proxy attribute.  Looking at AspectJAutoProxyRegistrar, it seems very easy to behave like AopNamespaceUtils.useClassProxyingIfNecessary(). In fact, I tried to implement it and it works.  My doubt now is why (if it is so easy as it seems) is not implemented. I'm thinking of contributing with this change if the community agrees.  ---  **Affects:** 3.2.2  **Issue Links:** - #18946 Multiple load-time-weaver elements cause repeated addition of AspectJ transformer  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8cb9d5ebae0d47f00f4e4f71fd405d42441831e3  6 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2013-04-09T18:15:46Z","2019-01-11T21:14:36Z"
"","15408","SpEL failed on Arrays.asList expression [SPR-10781]","**[Simon Wong](https://jira.spring.io/secure/ViewProfile.jspa?name=simonwg)** opened **[SPR-10781](https://jira.spring.io/browse/SPR-10781?redirect=false)** and commented  I found that SpEL failed on the following expression. I could not confirm the issue is related to Arrays.asList or something else.  ```java // correct!! List myList_1 = Arrays.asList(new String[] {""a"", ""b""}); System.out.println(""myList_1.size(): "" + myList_1.size());  // return 2   // wrong!! ExpressionParser parser = new SpelExpressionParser(); Expression exp = parser.parseExpression(""T(java.util.Arrays).asList(new String[]{'a','b'})""); List myList_2 = (List) exp.getValue(); System.out.println(""myList_2.size(): "" + myList_2.size());    // return 1 ```  I tried to replace the array construction by using String.split() and the result is wrong too (also return 1). That's why I suspect the issue is from asList() instead.    ---  **Affects:** 3.2.2  1 votes, 4 watchers","closed","in: core,","spring-projects-issues","2013-07-25T02:51:29Z","2019-01-12T05:26:47Z"
"","15400","Supports @RequestMapping annotion in @ExceptionHandler [SPR-10774]","**[Simon Wong](https://jira.spring.io/secure/ViewProfile.jspa?name=simonwg)** opened **[SPR-10774](https://jira.spring.io/browse/SPR-10774?redirect=false)** and commented  For local `@ExceptionHandler` within `@Controller`, currently it doesn't support `@RequestMapping` annotation.  In my case, it is possible that the same `@ExceptionHandler` (react to the same type of RuntimeException subclass) will convert to different type of object response through `@ResponseBody` message converter, but the original request urls are different. It would be nice if `@ExceptionHandler` could support `@RequestMapping` such that the correct exception handler could be found.  e.g.  ```java @Controller public class MyController   @RequestMapping(""/url1"")   public void method1() {     throw new RuntimeException(""url1"");   }    @RequestMapping(""/url2"")   public void method2() {     throw new RuntimeException(""url2"");   }    @ExceptionHandler(RuntimeException.class)   // @RequestMapping(""/url1"")   @ResponseBody   MyObject1 e1() {      return new MyObject1();   }    @ExceptionHandler(RuntimeException.class)   // @RequestMapping(""/url2"")   @ResponseBody   MyObject2 e2() {      return new MyObject2();   } } ```    --- No further details from [SPR-10774](https://jira.spring.io/browse/SPR-10774?redirect=false)","closed","type: enhancement,","spring-projects-issues","2013-07-23T19:40:57Z","2018-12-05T15:08:55Z"
"","15398","Officially support the setter to period in PeriodicTrigger/CronTrigger [SPR-10772]","**[Simon Wong](https://jira.spring.io/secure/ViewProfile.jspa?name=simonwg)** opened **[SPR-10772](https://jira.spring.io/browse/SPR-10772?redirect=false)** and commented  This is not related to Spring Integration but I use it as illustration.  https://github.com/SpringSource/spring-integration-samples/blob/master/intermediate/dynamic-poller/src/main/java/org/springframework/integration/samples/poller/DynamicPeriodicTrigger.java  To support dynamic trigger, we have to clone the class source code and enable the setter to periodic fields. It is better to support this officially within PeriodicTrigger and CronTrigger   ---  **Affects:** 3.2.3","closed","status: bulk-closed,","spring-projects-issues","2013-07-23T18:44:35Z","2019-01-12T00:22:24Z"
"","15084","DispatcherServlet.properties missing in source jar file [SPR-10451]","**[Simon Wong](https://jira.spring.io/secure/ViewProfile.jspa?name=simonwg)** opened **[SPR-10451](https://jira.spring.io/browse/SPR-10451?redirect=false)** and commented  The DispatcherServlet.properties file is missing in spring-web-3.2.2.RELEASE-sources.jar, provided in the spring-framework-3.2.2.RELEASE-dist.zip   ---  **Affects:** 3.2.2","closed","status: bulk-closed,","spring-projects-issues","2013-04-08T23:31:26Z","2019-01-12T00:24:13Z"
"","15052","PropertyEditor registered through @ControllerAdvice will not be superseded by local one. [SPR-10419]","**[Simon Wong](https://jira.spring.io/secure/ViewProfile.jspa?name=simonwg)** opened **[SPR-10419](https://jira.spring.io/browse/SPR-10419?redirect=false)** and commented  If I register the `PropertyEditor` in both `@Controller` and `@ControllerAdvice` for the same type, the local (per controller) `@InitBinder` should override the one defined in `@ControllerAdvice`.  e.g.  ```java @ControllerAdvice public class GlobalControllerAdvice {      @InitBinder     void globalInitBinder(WebDataBinder dataBinder) {         dataBinder.registerCustomEditor(String.class, new StringTrimmerEditor(true));     } }  @RequestMapping(""..."") public class SomeController {     @InitBinder     void initBinder(WebDataBinder dataBinder) {         dataBinder.registerCustomEditor(String.class, new MyToUpperCaseStringEditor());   // this one will not take effect!! Only global one property editor will be used!!     } } ```    ---  **Affects:** 3.2.2","closed","type: bug,","spring-projects-issues","2013-03-26T20:51:00Z","2013-05-10T09:54:53Z"
"","15037","Spring MVC Binding failed on Collections if @RequestParam is missing [SPR-10404]","**[Simon Wong](https://jira.spring.io/secure/ViewProfile.jspa?name=simonwg)** opened **[SPR-10404](https://jira.spring.io/browse/SPR-10404?redirect=false)** and commented  e.g. I submit the with parameter `myParam=1&myParam=2`  ```java @RequestMapping public void(@RequestParam(""myParam"") ArrayList myParam) { } ```  `myParam` returns `[""1"", ""2""]`  However, if `@RequestParam(""myParam"")` is removed, `myParam` will return `[]` Spring binding should be able to bind `myParam` if the request parameter name is also `myParam`. (This works fine for simple primitive type or array)    --- No further details from [SPR-10404](https://jira.spring.io/browse/SPR-10404?redirect=false)","closed","in: web,","spring-projects-issues","2013-03-20T10:12:11Z","2019-01-11T21:17:43Z"
"","14988","Annotation support in SpringMVC views [SPR-10356]","**[Simon Wong](https://jira.spring.io/secure/ViewProfile.jspa?name=simonwg)** opened **[SPR-10356](https://jira.spring.io/browse/SPR-10356?redirect=false)** and commented  The driving force is certain views require to extend certain class to support the rendering of that format.  e.g. I have to extends `AbstractJExcelView` class for my Excel View. For those abstract view parent class, the method signature is not fluent. All data to be passed through have to be extracted through `Model`. `Locale` is not natively support too.  It is better to support the `View` annotation and those data to be used for rendering could be optional.  Here are some suggestion for reference.  We define a stereotype called `@View`. It will take a value which is the same as the logical view path. `@Render` is another annotation for render process.  ```java @View(value=""my_path/myView"") public class MyView {    @Render    public void render(@ModelAttribute(""myModelAttr"") List mySomeModelAttr, MyType myAnotherModelAttribute, Locale locale) {         // render here    } } ```  We can also extends `@View` to provide technology specific parameter  ```java @JExcelView(value=""my_path/myView"") public class MyJExcelView {    @Render    public void render(@ModelAttribute(""myModelAttr"") List mySomeModelAttr, MyType myAnotherModelAttribute, Locale locale, jxl.write.WritableWorkbook workbook, HttpServletRequest request) {         // render excel here and flush/close workbook implicitly    } } ```  Content Negotiation View might be supported as well (one `@View` might serve multiple content type) but I haven't think deeply about it right now.    ---  **Affects:** 3.2.1  1 votes, 2 watchers","closed","status: bulk-closed,","spring-projects-issues","2013-03-06T07:44:18Z","2019-01-12T02:33:30Z"
"","14780","DataSource returns null jdbc connection [SPR-10147]","**[Shivakumar N](https://jira.spring.io/secure/ViewProfile.jspa?name=shiva.n404)** opened **[SPR-10147](https://jira.spring.io/browse/SPR-10147?redirect=false)** and commented  When all the connections in connection-pool become active and another thread tries to fetch new connection and finally not able to get the connection dataSource returns null jdbc connection rather than throwing not able to get the connection.  Simple steps to reproduce. Set max connection pool size to 0 and min size to 0. And try to get connection. It will return null instead of throwing exception.   ---  **Affects:** 3.0.6","closed","in: data,","spring-projects-issues","2013-01-05T20:09:07Z","2019-01-11T21:23:02Z"
"","14840","HttpEntityMethodProcessor does not support HttpEntity/ResponseEntity subclasses [SPR-10207]","**[Shelley J. Baker](https://jira.spring.io/secure/ViewProfile.jspa?name=shelleyb)** opened **[SPR-10207](https://jira.spring.io/browse/SPR-10207?redirect=false)** and commented  The `HttpEntityMethodProcessor`'s `supportsReturnType` method explicitly looks for `ResponseEntity`/`HttpEntity` classes, not whether they are assignable from those classes:  ``` public boolean supportsReturnType(MethodParameter returnType) { 	Class parameterType = returnType.getParameterType(); 	return HttpEntity.class.equals(parameterType) || ResponseEntity.class.equals(parameterType); } ```  This prevents HttpEntity/ResponseEntity subclasses from being processed. This method should be updated similar to the following, in order to support HTTP entity subclasses:  ``` public boolean supportsReturnType(MethodParameter returnType) {     Class parameterType = returnType.getParameterType();     return HttpEntity.class.isAssignableFrom(parameterType); } ```  This problem was first described [here](https://jira.springsource.org/browse/SPR-10046?focusedCommentId=87035&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-87035) in #14680.  ---  **Affects:** 3.1.3  **Issue Links:** - #16856 Regression: HttpEntityMethodProcessor does not support HttpEntity subclasses anymore  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a3e190e1bf80b88ce049f540a05bdf9706e140a4, https://github.com/spring-projects/spring-framework/commit/3a6e7b8020c8ffe46c241283dc79d1c65b5941e9  **Backported to:** [3.1.4](https://github.com/spring-projects/spring-framework/milestone/83?closed=1)  0 votes, 5 watchers","closed","type: bug,","spring-projects-issues","2013-01-22T11:47:32Z","2019-01-11T21:36:34Z"
"","14826","RequestMappingInfoHandlerMapping.handleNoMatch returns null instead of throwing an exception [SPR-10193]","**[Shelley J. Baker](https://jira.spring.io/secure/ViewProfile.jspa?name=shelleyb)** opened **[SPR-10193](https://jira.spring.io/browse/SPR-10193?redirect=false)** and commented  **Update**: Original request below is to raise `HttpRequestMethodNotSupportedException`. Actual solution raises `UnsatisfiedServletRequestParameterException`.  ---  When a request is made to a URI using an unsupported method, a 404 error is returned instead of a 405 when another mapping exists for that method with matching parameters.  For example, given the following mappings:  ``` @Controller @RequestMapping(""/test"") public class TestController {      @RequestMapping(method = RequestMethod.GET)     public void get() {}      @RequestMapping(method = RequestMethod.POST, params = ""test"")     public void post() {} } ```  The following occurs:  ``` POST /test ```  expected: 405 actual: 404  Specifically, the `RequestMappingInfoHandlerMapping` `handleNoMatch` method returns `null` instead of throwing the `HttpRequestMethodNotSupportedException` as expected.  This is a regression between 3.1.2 and 3.1.3; previously, the 405 occurred as expected. This may be related to the changes introduced by #14237.  ---  **Affects:** 3.1.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/72013f975c5ad8f8894014e90925c98e65a7d8ec, https://github.com/spring-projects/spring-framework/commit/3c09b07652ed3c7a2e4cee1295a450aee387f99b  **Backported to:** [3.1.4](https://github.com/spring-projects/spring-framework/milestone/83?closed=1)","closed","type: enhancement,","spring-projects-issues","2013-01-18T11:42:44Z","2019-01-13T07:01:31Z"
"","15105","Make @Cacheable value field read from the PropertyPlaceHolder [SPR-10472]","**[Shaozhen Ding](https://jira.spring.io/secure/ViewProfile.jspa?name=dsz0111@gmail.com)** opened **[SPR-10472](https://jira.spring.io/browse/SPR-10472?redirect=false)** and commented  It would be nice that the `@Cacheable` value field can be written as ""${property.name}"" which comes from a property placeholder. It is a similar way as the cron field with `@Scheduled`   ---  **Affects:** 3.2.2","closed","status: bulk-closed,","spring-projects-issues","2013-04-17T14:42:36Z","2019-01-12T00:23:59Z"
"","15489","NullPointerException thrown by ExtendedBeanInfo with IBM J9 VM [SPR-10862]","**[Setanta Mathews](https://jira.spring.io/secure/ViewProfile.jspa?name=setantam)** opened **[SPR-10862](https://jira.spring.io/browse/SPR-10862?redirect=false)** and commented  Hi,  In org.springframework.beans.CachedInstrospectionResults there is the code  ``` this.beanInfo = new ExtendedBeanInfo(Introspector.getBeanInfo(beanClass)); ```  With IBM's J9 VM on Linux, the BeanInfo returned by Introspector.getBeanInfo can return null for calls to BeanInfo#getMethodDescriptors. For example, this will happen when beanClass is java.io.Serializable.  When this happens the following code in ExtendedBeanInfo will throw a null pointer exception:  ``` for (MethodDescriptor md : delegate.getMethodDescriptors()) ```  I took a look at the latest ExtendedBeanInfo and it looks like it is still prone to a null pointer exception.  Note that the Javadoc for BeanInfo#getMethodDescriptors does say that the method can return null.  Simple test, run the following with Oracle's VM and then IBM's  ``` System.out.println(java.beans.Introspector.getBeanInfo(java.io.Serializable.class).getMethodDescriptors()) ```  With Oracle you'll get an array object, with IBM you'll get null.   ---  **Affects:** 3.1.3","closed","in: core,","spring-projects-issues","2013-08-27T01:42:16Z","2013-10-31T12:28:00Z"
"","15199","Spring Jdbc ORM Like RowMapper [SPR-10570]","**[Serkan ÖZAL](https://jira.spring.io/secure/ViewProfile.jspa?name=sozal)** opened **[SPR-10570](https://jira.spring.io/browse/SPR-10570?redirect=false)** and commented  In Spring-Jdbc-Core, there is a rowmapper named ""org.springframework.jdbc.core.BeanPropertyRowMapper"" for binding resultset attributes to object. But it is reflection based and can cause performance problems as Spring developers said. A byte code generation (with CGLib and Javassist) based rowmapper maybe a helpful feature. It generates rowmapper on the fly like implementing as manual so it has no performance overhead. It can also supports object relations as lazy and eager.  Here is GitHub repository: https://github.com/serkan-ozal/spring-jdbc-roma-impl Here is GitHub Wiki: http://serkan-ozal.github.io/spring-jdbc-roma-impl/   ---  **Reference URL:** https://github.com/serkan-ozal/spring-jdbc-roma  0 votes, 5 watchers","closed","status: bulk-closed,","spring-projects-issues","2013-05-18T01:32:42Z","2019-01-12T03:42:22Z"
"","15521","Potential out-of-memory in AbstractSockJsService [SPR-10893]","**[Sergey Shcherbakov](https://jira.spring.io/secure/ViewProfile.jspa?name=sshcherbakov)** opened **[SPR-10893](https://jira.spring.io/browse/SPR-10893?redirect=false)** and commented  The knownSockJsPrefixes set grows with every distinctive request path and gets never cleared in the AbstractSockJsService. This actually presents a potential memory leakage and ""out of memory"" attack threat. This may happen when the client uses unique paths in requests to connect to SockJS service and validSockJsPrefixes list is configured to be empty to handle SockJS HTTPs requests with dynamic path.   ---  **Affects:** 4.0 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/02cb86659d13d41c1f7d9b7e8866284f26616a02","closed","type: enhancement,","spring-projects-issues","2013-09-04T04:28:34Z","2013-10-31T12:27:59Z"
"","15467","Cannot upgrade to WebSocket connection when using Spring 4 WebSocket with embedded Tomcat 8.0.0-RC1 [SPR-10841]","**[Sergey Shcherbakov](https://jira.spring.io/secure/ViewProfile.jspa?name=sshcherbakov)** opened **[SPR-10841](https://jira.spring.io/browse/SPR-10841?redirect=false)** and commented  I'm building a Spring 4 driven application with an embedded Tomcat 8 and SockJS to support WebSocket clients. The latest 4.0.0.BUILD-SNAPSHOT (14.08.2013) as well as 4.0.0.M2 cannot upgrade the incoming HTTP connection to WS with the following exception (for the snapshot version):  ``` 2013-08-16 10:49:02,711 15913 ERROR [http-nio-8080-exec-4] org.apache.coyote.http11.Http11NioProtocol - Error reading request, ignored                     java.lang.NullPointerException: null at org.apache.tomcat.websocket.server.WsRemoteEndpointImplServer.(WsRemoteEndpointImplServer.java:57) ~[tomcat-embed-core-8.0.0-RC1.jar:8.0.0-RC1] at org.apache.tomcat.websocket.server.WsHttpUpgradeHandler.init(WsHttpUpgradeHandler.java:116) ~[tomcat-embed-core-8.0.0-RC1.jar:8.0.0-RC1] at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:658) ~[tomcat-embed-core-8.0.0-RC1.jar:8.0.0-RC1] at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223) [tomcat-embed-core-8.0.0-RC1.jar:8.0.0-RC1] at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1592) [tomcat-embed-core-8.0.0-RC1.jar:8.0.0-RC1] at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1550) [tomcat-embed-core-8.0.0-RC1.jar:8.0.0-RC1] at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) [na:1.7.0_17] at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) [na:1.7.0_17] at java.lang.Thread.run(Thread.java:722) [na:1.7.0_17] ```    ---  **Affects:** 4.0 M2","closed","status: declined,","spring-projects-issues","2013-08-16T02:29:17Z","2021-05-18T11:13:44Z"
"","14729","Support configurable charset for ResourcePropertySource [SPR-10096]","**[Sebastien Lorber](https://jira.spring.io/secure/ViewProfile.jspa?name=sebastienlorber)** opened **[SPR-10096](https://jira.spring.io/browse/SPR-10096?redirect=false)** and commented  In org.springframework.core.io.support.ResourcePropertySource#loadPropertiesForResource  The properties are loaded with: InputStream is = resource.getInputStream(); props.load(is);  While there should be loaded with: InputStream is = resource.getInputStream(); InputStreamReader reader = new InputStreamReader(is,charset); props.load(reader);  And the charset could be added to the constructors, why not with a default UTF-8 charset.  Without that, all property sources loaded with this class are using ISO 8859-1 charset  It seems to affect 3.2 as well because I didn't see any charset in the constructor.  ---  **Affects:** 3.1.2  **Issue Links:** - #18454 ResourcePropertySource class should support to specify character encoding (_**""is duplicated by""**_)","closed","type: enhancement,","spring-projects-issues","2012-12-14T06:07:48Z","2019-01-11T19:10:22Z"
"","15066","org.springframework.ui.ModelMap#addAllAttributes & #mergeAttributes allow null keys [SPR-10433]","**[Sebastian Davids](https://jira.spring.io/secure/ViewProfile.jspa?name=davids_s)** opened **[SPR-10433](https://jira.spring.io/browse/SPR-10433?redirect=false)** and commented  in addAttribute(String, Object) you explicitly disallow null-keys  Test:  Map model = new HashMap(); model.put(null, ""value"");  new ModelMap().addAllAttributes(model);  @@  mergeAttributes(Map","closed","status: bulk-closed,","spring-projects-issues","2013-04-01T10:07:09Z","2019-01-12T00:24:29Z"
"","15342","ClassPathJaxb2TypeScanner which scans packagesToScan for Jaxb2Marshaller does not scan for @XmlRegistry annotation [SPR-10714]","**[Sebastiaan van Erk](https://jira.spring.io/secure/ViewProfile.jspa?name=sebster)** opened **[SPR-10714](https://jira.spring.io/browse/SPR-10714?redirect=false)** and commented  The `ClassPathJaxb2TypeScanner` class is a helper class for `Jaxb2Marshaller` that scans given packages for classes marked with JAXB2 annotations. However, it does not scan for the `@XmlRegistry` annotation, which is used on `ObjectFactory` classes.  In some cases, the `ObjectFactory` classes contain crucial annotations for JAXB such as the following:  ```java @XmlElementDecl(namespace = ""http://www.example.com/schemas/mymodule"",      name = ""myElement"", substitutionHeadNamespace = ""http://www.example.com/schemas/core"",      substitutionHeadName = ""myBaseElement"") ```  Without have scanned these annotations, JAXB will not recognize ""myElement"" as a valid substitution for ""myBaseElement"" and unmarshalling will fail.  I have attached a very simple maven project with two test cases which illustrates the issue (pure JAXB).  The resolution of the issue is simple (I have also tested this in the project where we ran into the problem). All that is necessary is to add `XmlRegistry` to the list of scanned annotations in `ClassPathJaxb2TypeScanner`, i.e.:  ```java private final TypeFilter[] jaxb2TypeFilters =           new TypeFilter[]{new AnnotationTypeFilter(XmlRootElement.class, false),                         new AnnotationTypeFilter(XmlType.class, false), new AnnotationTypeFilter(XmlSeeAlso.class, false),                         new AnnotationTypeFilter(XmlEnum.class, false), new AnnotationTypeFilter(XmlRegistry.class, false)}; ```    ---  **Attachments:** - [jaxb-test-simple.zip](https://jira.spring.io/secure/attachment/21172/jaxb-test-simple.zip) (_4.30 kB_)","closed","type: bug,","spring-projects-issues","2013-04-23T05:45:19Z","2013-08-06T18:35:06Z"
"","15488","WebSocket support on Jetty always uses SockJS HTTP fallbacks [SPR-10861]","**[Scott Andrews](https://jira.spring.io/secure/ViewProfile.jspa?name=sandrews)** opened **[SPR-10861](https://jira.spring.io/browse/SPR-10861?redirect=false)** and commented  Creating a SockJS connection to a Jetty application running on localhost ends up using the HTTP fallbacks instead of a native WebSocket.  This was seen running on 4.0.0.BUILD-SNAPSHOT.  As recently as a few days ago, native a WebSocket was being used.  There are no errors in the log, but this statement may be of interest:  ``` 15:56:32 [qtp652713850-31] DefaultSockJsService - GET with SockJS path [/754/2eu5deed/websocket] 15:56:32 [qtp652713850-31] DefaultSockJsService - Transport handler not found ```  From the client, the attempt to open a WebSocket results in a 404.   ---  **Affects:** 4.0 M2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c48a41ea7a16e90eec520b6a3f311427e0e9ed18","closed","type: bug,","spring-projects-issues","2013-08-26T13:32:56Z","2013-08-29T16:20:48Z"
"","14922","In AnnotationSessionFactoryBean, be able to specify annotatedPackages and packagesToScan in one property [SPR-10288]","**[Sanjay Deshmukh](https://jira.spring.io/secure/ViewProfile.jspa?name=sanjayd)** opened **[SPR-10288](https://jira.spring.io/browse/SPR-10288?redirect=false)** and commented  I tend to have package-level annotations on all of my packages that contain Hibernate-annotated classes. The biggest one is a `@TypeDef` to persist joda-time DateTimes and LocalTimes. It would be nice to have a single property through which I can set both annotatedPackages and packagesToScan, rather than passing the same list to both.  ---  **Affects:** 3.2.1  **Attachments:** - [AnnotationSessionFactoryBean.java](https://jira.spring.io/secure/attachment/20943/AnnotationSessionFactoryBean.java) (_9.48 kB_)  **Issue Links:** - #12404 AnnotationSessionFactoryBean packagesToScan does not scan for annotations in package's package-info.java file - #13233 Hibernate Annotation scanner missing package-info.java - #15538 Propagate LCEMFB.packagesToScan to native PersistenceProvider to pick up annotated packages  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5334ac59f684f66dfd1d526934ebdf88edaef16d","closed","type: enhancement,","spring-projects-issues","2013-02-13T04:07:43Z","2019-01-11T21:31:20Z"
"","15248","Fail to load the 1st line in message properties [SPR-10620]","**[Samuel Fung](https://jira.spring.io/secure/ViewProfile.jspa?name=psfung)** opened **[SPR-10620](https://jira.spring.io/browse/SPR-10620?redirect=false)** and commented  ReloadableResourceBundleMessageSource failed to load the 1st line in message properties, see attached test. There are 2 workarounds: 1. add a blank line before the 1st line 2. rename the properties files to messages_xxx.properties    ---  **Affects:** 3.2.2  **Attachments:** - [spring-msgsrc.zip](https://jira.spring.io/secure/attachment/21224/spring-msgsrc.zip) (_1.04 kB_)","closed","status: bulk-closed,","spring-projects-issues","2013-06-03T02:19:26Z","2019-01-12T00:23:44Z"
"","15289","Install jmxremote_optional.jar in Java 8 JVM used for Spring performance builds [SPR-10661]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-10661](https://jira.spring.io/browse/SPR-10661?redirect=false)** and commented  #### Status Quo  Spring Framework 4.0's nightly performance builds are failing since the `jmxmp` protocol is not available by default.  See [SPR-PERF-39](https://build.springsource.org/browse/SPR-PERF-39/) for an example of such a failing build.  #### Deliverables  1. As previously done for Java 1.5 and 1.6 JDKs, please install `jmxremote_optional.jar` in the JDK 1.8 JVM used for Spring performance builds.    - See #12748 for details on what's needed.  ---  **Affects:** 4.0 M2, 4.2 RC1  **Issue Links:** - #17202 Review MBean related performance tests","closed","type: task,","spring-projects-issues","2013-06-17T12:30:13Z","2019-01-11T22:23:59Z"
"","15271","Ensure that method and requestURI fields are non-null in MockHttpServletRequest [SPR-10643]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-10643](https://jira.spring.io/browse/SPR-10643?redirect=false)** and commented   ---  **Affects:** 3.2 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ee5d6c8f839e2346f03afbf5049c42067bf04526, https://github.com/spring-projects/spring-framework/commit/ec5d81e78e79db685788c233507560f05645e92d","closed","type: enhancement,","spring-projects-issues","2013-06-09T03:40:00Z","2013-09-11T14:10:11Z"
"","15267","Introduce deleteFromTableWhere() in abstract transactional base classes in the TestContext Framework [SPR-10639]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-10639](https://jira.spring.io/browse/SPR-10639?redirect=false)** and commented  This issue picks up where #14936 left off by introducing `deleteFromTableWhere()` convenience methods in `AbstractTransactionalJUnit4SpringContextTests` and `AbstractTransactionalTestNGSpringContextTests`.  ---  **Issue Links:** - #14936 Introduce JdbcTestUtils.deleteFromTableWhere method (_**""depends on""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/34e8ee94c4f8624e86815ecf4e651d360c0e54f3","closed","type: enhancement,","spring-projects-issues","2013-06-08T11:29:47Z","2019-01-11T22:25:35Z"
"","15266","Upgrade to TestNG 6.8.5 [SPR-10638]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-10638](https://jira.spring.io/browse/SPR-10638?redirect=false)** and commented   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/96da40605764ba4183ffa66f190098acd5faa477","closed","type: task,","spring-projects-issues","2013-06-08T11:20:06Z","2013-07-24T10:17:03Z"
"","15132","Delete deprecated code in the spring-test module [SPR-10499]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-10499](https://jira.spring.io/browse/SPR-10499?redirect=false)** and commented  #### Deliverables  - [x] delete legacy JUnit 3.8 based test class hierarchy - [x] delete JUnit 3.8 support in the TestContext framework - [x] delete `@ExpectedException` annotation in the TestContext framework - [x] delete `@NotTransactional` annotation in the TestContext framework - [x] delete `SimpleJdbcTestUtils` class - [x] delete `SimpleJdbcTemplate` field from base test classes in the TestContext framework    ---  **Affects:** 3.2.2","closed","type: task,","spring-projects-issues","2013-04-28T06:57:19Z","2013-05-07T12:34:54Z"
"","14989","Document context hierarchy support in the TestContext framework [SPR-10357]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-10357](https://jira.spring.io/browse/SPR-10357?redirect=false)** and commented  #### Deliverables  Document context hierarchy support in the TestContext framework in the:  1. [x] Javadoc for `@ContextHierarchy` and `@ContextConfiguration` 2. [x] testing chapter of the reference manual  ---  **Affects:** 3.2.2  **Issue Links:** - #14496 Support WebApplicationContext hierarchies in the TestContext Framework (_**""depends on""**_) - #10284 Provide support for context hierarchies in the TestContext Framework (_**""depends on""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4171646491096ceb5d11ae9ae4c878c5f552c195, https://github.com/spring-projects/spring-framework/commit/ccdb48210a58e2ab497a4be5b29ea26cb5a4b2a9, https://github.com/spring-projects/spring-framework/commit/2b24e99d44cce6c655f572986fd9ac50cbfeb09b, https://github.com/spring-projects/spring-framework/commit/4e7098dc637e2f66a160251e29aa89dc3d16cf65","closed","type: documentation,","spring-projects-issues","2013-03-06T17:22:03Z","2019-01-11T21:02:00Z"
"","14708","Support comments within SQL statements in ResourceDatabasePopulator [SPR-10075]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-10075](https://jira.spring.io/browse/SPR-10075?redirect=false)** and commented  #### Status Quo  The deficiency addressed by this issue is the same as that described in #14616 but for `ResourceDatabasePopulator`.  #### Deliverables  Refactor `ResourceDatabasePopulator.splitSqlScript(String, String, String, List)` so that:  1. [x] Standard SQL comments (i.e., any text beginning with two hyphens and extending to the end of the line) are properly omitted from the statement before executing it. 2. [x] Multiple adjacent whitespace characters within a statement but outside a literal are collapsed into a single space.  ---  **Affects:** 3.1.3  **Issue Links:** - #14616 Support comments within SQL statements in JdbcTestUtils - #14165 Support multi-line SQL comments in ResourceDatabasePopulator and JdbcTestUtils  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8a422f48c658b8574ed36a9232e8de53c576ea48, https://github.com/spring-projects/spring-framework/commit/aa16caa2ac54b72b28c4149bd9dc992f1e09ee8b","closed","type: enhancement,","spring-projects-issues","2012-12-05T08:29:17Z","2019-01-11T19:10:48Z"
"","14707","Re-enable tests that were disabled during the migration to Gradle [SPR-10074]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-10074](https://jira.spring.io/browse/SPR-10074?redirect=false)** and commented  #### Status Quo  When the Spring Framework migrated from _Spring Build_ to Gradle, several tests began to fail for various reasons. Consequently, these failing tests were disabled via JUnit's `@Ignore` annotation.  ###### Known affected tests  - `CallbacksSecurityTests.testContainerPrivileges()` - `JaxWsSupportTests` - `OpenJpaEntityManagerFactoryWithAspectJWeavingIntegrationTests` - `TopLinkMultiEntityManagerFactoryIntegrationTests`  #### Deliverables  1. [ ] Ensure that all tests that were disabled during the migration to Gradle are once again enabled.  ---  **Affects:** 3.2 M1  **Issue Links:** - #14034 Ensure that both JUnit and TestNG tests are executed in the Gradle build - #12770 Migrate Spring build system to Gradle - #14967 OpenJPA+AspectJ tests cause Gradle build to hang (_**""is superseded by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0e8c950f7d57e770d2da6441b836c4ef84623975, https://github.com/spring-projects/spring-framework/commit/58ab8b691c1d01f9237306a55eb835f01c6705c9, https://github.com/spring-projects/spring-framework/commit/31dfffde52baaff5c9539c9d11653f3776d10de4, https://github.com/spring-projects/spring-framework/commit/1bdd081a141a0d29c1e5ebce91674327cf111000, https://github.com/spring-projects/spring-framework/commit/9c2b5b240696431bd5842ed1ea6a66b48f12e197","closed","type: task,","spring-projects-issues","2012-12-05T01:41:07Z","2019-01-11T19:10:46Z"
"","14703","Tests in spring-test-mvc fail to execute in Eclipse [SPR-10070]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-10070](https://jira.spring.io/browse/SPR-10070?redirect=false)** and commented  #### Status Quo  The `spring-test-mvc` builds fine from the command line with Gradle; however, when Eclipse projects are created with the `import-into-eclipse.sh` script and the tests in `spring-test-mvc` are then executed within Eclipse, we run into classpath issues.  For example, if you execute `MockMvcClientHttpRequestFactoryTests` within Eclipse, you will see the following messages in the console:  ``` SLF4J: Class path contains multiple SLF4J bindings. SLF4J: Found binding in [jar:file:/Users/sbrannen/.gradle/caches/artifacts-15/filestore/org.slf4j/slf4j-jcl/1.6.1/jar/b5902b1ba8ec58a96140bb7445037b3512cc99bb/slf4j-jcl-1.6.1.jar!/org/slf4j/impl/StaticLoggerBinder.class] SLF4J: Found binding in [jar:file:/Users/sbrannen/.gradle/caches/artifacts-15/filestore/org.slf4j/slf4j-log4j12/1.6.1/jar/bd245d6746cdd4e6203e976e21d597a46f115802/slf4j-log4j12-1.6.1.jar!/org/slf4j/impl/StaticLoggerBinder.class] SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation. SLF4J: Detected both jcl-over-slf4j.jar AND slf4j-jcl.jar on the class path, preempting StackOverflowError.  SLF4J: See also http://www.slf4j.org/codes.html#jclDelegationLoop for more details. ```  And the test fails with the following stacktrace:  ``` java.lang.ExceptionInInitializerError 	at org.slf4j.impl.StaticLoggerBinder.(StaticLoggerBinder.java:82) 	at org.slf4j.impl.StaticLoggerBinder.(StaticLoggerBinder.java:51) 	at org.slf4j.LoggerFactory.bind(LoggerFactory.java:121) 	at org.slf4j.LoggerFactory.performInitialization(LoggerFactory.java:111) 	at org.slf4j.LoggerFactory.getILoggerFactory(LoggerFactory.java:268) 	at org.slf4j.LoggerFactory.getLogger(LoggerFactory.java:241) 	at org.apache.commons.logging.impl.SLF4JLogFactory.getInstance(SLF4JLogFactory.java:155) 	at org.apache.commons.logging.impl.SLF4JLogFactory.getInstance(SLF4JLogFactory.java:131) 	at org.apache.commons.logging.LogFactory.getLog(LogFactory.java:685) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.(SpringJUnit4ClassRunner.java:91) 	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) 	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57) 	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) 	at java.lang.reflect.Constructor.newInstance(Constructor.java:525) 	at org.junit.internal.builders.AnnotatedBuilder.buildRunner(AnnotatedBuilder.java:31) 	at org.junit.internal.builders.AnnotatedBuilder.runnerForClass(AnnotatedBuilder.java:24) 	at org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:58) 	at org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(AllDefaultPossibilitiesBuilder.java:29) 	at org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:58) 	at org.junit.internal.requests.ClassRequest.getRunner(ClassRequest.java:27) 	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.(JUnit4TestReference.java:33) 	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestClassReference.(JUnit4TestClassReference.java:25) 	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestLoader.createTest(JUnit4TestLoader.java:48) 	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestLoader.loadTests(JUnit4TestLoader.java:38) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:452) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197) Caused by: java.lang.IllegalStateException: Detected both jcl-over-slf4j.jar AND slf4j-jcl.jar on the class path, preempting StackOverflowError. See also http://www.slf4j.org/codes.html#jclDelegationLoop for more details. 	at org.slf4j.impl.JCLLoggerFactory.(JCLLoggerFactory.java:64) 	... 28 more ```  #### Analysis  As a result of work performed in conjunction with #14057, all other modules that require SLF4J for tests now declare a dependency on `slf4j-jcl`; however, `spring-test-mvc` still declares test dependencies on `jcl-over-slf4j` and `slf4j-log4j12`. Furthermore, it appears that some dependency of `spring-test-mvc` pulls in a transitive dependency on `jcl-over-slf4j:1.5.8` which may be the underlying source of the problem.  #### Deliverables  1. [x] Modify the Gradle build (i.e., the dependency management) so that the generated Eclipse `.classpath` for `spring-test-mvc` allows tests to run within Eclipse as well as from the command line with Gradle.  ---  **Affects:** 3.2 RC2  **Issue Links:** - #14057 Fix compile and test classpaths regarding slf4j versions - #14290 Eclipse .classpath exports optional and provided dependencies  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/19d7cedcf2e2a4c6ab837fe59d929a0a26c83f4c, https://github.com/spring-projects/spring-framework/commit/0751b2cbeb96697bd377578771e9c7b29b94658a","closed","type: bug,","spring-projects-issues","2012-12-04T05:44:46Z","2019-01-11T19:10:40Z"
"","14702","Use EasyMock 2.5.2 consistently across the build [SPR-10069]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-10069](https://jira.spring.io/browse/SPR-10069?redirect=false)** and commented  ---  **Affects:** 3.2 RC2  **Issue Links:** - #14678 Upgrade to JUnit 4.11  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a3e4f6cad4d1b625a6364fcf3564bb89c41f340e","closed","type: task,","spring-projects-issues","2012-12-03T14:53:35Z","2019-01-11T19:11:36Z"
"","14700","Relocate web artifacts in the TestContext framework to the web package [SPR-10067]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-10067](https://jira.spring.io/browse/SPR-10067?redirect=false)** and commented  #### Status Quo  This issue serves as a stepping stone for the work outlined in #14588.  #### Deliverables  1. [x] Introduce `package-info.java` in the `org.springframework.test.context.web` package. 2. [x] `ServletTestExecutionListener` should extend `AbstractTestExecutionListener` instead of implementing `TestExecutionListener` directly. 3. [x] Relocate `AbstractGenericWebContextLoader`, `AnnotationConfigWebContextLoader`, and `XmlWebContextLoader` to the `org.springframework.test.context.web` package.  ---  **Affects:** 3.2 RC1  **Issue Links:** - #14588 Introduce bootstrap strategy in the TestContext framework (_**""is depended on by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d0503ab733bb9d4987e51cb76a8b2ec58c5f8468","closed","type: task,","spring-projects-issues","2012-12-03T13:30:26Z","2019-01-11T19:11:32Z"
"","14699","spring-orm should build against the standard Hibernate artifact [SPR-10066]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-10066](https://jira.spring.io/browse/SPR-10066?redirect=false)** and commented  #### Status Quo  In order to support both Hibernate 3 and 4 in the `spring-orm` module, the Spring Framework Gradle build was configured to compile against two versions of Hibernate: `org.hibernate:com.springsource.org.hibernate:3.3.1.GA` and `org.hibernate:hibernate-core:4.1.0.Final`.  Recent changes to the build have introduced a separate `spring-orm-hibernate4` that builds against Hibernate 4, and this code is then merged into the a single `spring-orm` module for distribution; however, the `spring-orm` module still builds against the [OSGI Hibernate 3 bundle from the SpringSource EBR](http://ebr.springsource.com/repository/app/bundle/version/detail?name=com.springsource.org.hibernate&version=3.3.1.GA) and defines it as an _optional_ dependency which then ends up in the generated Maven POM for the `spring-orm` module.  ##### Excerpts from spring-orm.3.2.0.BUILD-SNAPSHOT.pom  ```xml    org.hibernate   com.springsource.org.hibernate   3.3.1.GA   compile   true  ```  ```xml    org.hibernate   hibernate-core   4.1.0.Final   compile   true  ```  #### Deliverables  1. Ensure that the `spring-orm` module builds against the standard Hibernate 3.3.1.GA Maven artifact (i.e., not the one from the EBR). 2. Ensure that the generated Maven POM for the `spring-orm` artifact properly declares standard Hibernate 3 and 4 artifacts as optional dependencies (again, not ones from the EBR).  #### Further Resources  If you encounter classpath issues regarding Hibernate 3.3.1 and CGLIB, the following Hibernate JIRA issues may be of interest.  - [Hibernate 3.3.1GA issue when using CGLIB](https://hibernate.onjira.com/browse/HHH-3504) - [Upgrade to cglib-2.2.jar](https://hibernate.onjira.com/browse/HHH-3832)  ---  **Affects:** 3.2 RC2  **Issue Links:** - #14057 Fix compile and test classpaths regarding slf4j versions  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/53726612ee25e193d663121ac3ec1a5dae4ca47b, https://github.com/spring-projects/spring-framework/commit/19d7cedcf2e2a4c6ab837fe59d929a0a26c83f4c","closed","type: task,","spring-projects-issues","2012-12-03T10:15:08Z","2019-01-13T21:04:53Z"
"","15330","LocalSessionFactoryBean (and others) should throw FactoryBeanNotInitializedException when not fully initialized yet [SPR-10702]","**[Ryan Kalinowski](https://jira.spring.io/secure/ViewProfile.jspa?name=ryankal)** opened **[SPR-10702](https://jira.spring.io/browse/SPR-10702?redirect=false)** and commented  The documentation for FactoryBean states that if an instance is not fully initialized, calling getObject() will result in a FactoryBeanNotInitializedException.  If LocalSessionFactoryBean.getObject() is called before afterPropertiesSet(), it will instead return null.  I understand that getObject() is now allowed to return null.  However, it is my understanding that an InitializingBean is not considered fully initialized until afterPropertiesSet() is called.  Therefore, the proper behavior would be to throw the exception.   ---  **Affects:** 3.2.3","closed","status: bulk-closed,","spring-projects-issues","2013-06-27T09:13:00Z","2019-01-12T00:23:10Z"
"","15129","Not possible to import Javaconfig using  when ""top"" configfile is a Javaconfig class. [SPR-10496]","**[Rune Flobakk](https://jira.spring.io/secure/ViewProfile.jspa?name=rune)** opened **[SPR-10496](https://jira.spring.io/browse/SPR-10496?redirect=false)** and commented  Using a Javaconfig class as the ""top node"" of the configuration graph seems to disable the ability of imported XML configuration to import Javaconfig using the `` tag. The JUnit test cases at https://github.com/runeflobakk/spring-config-bug/ demonstrates this.  **Example case**  Application context is configured using 3 constituents: - main - in-between - leaf  _Main_ imports _in-between_, which imports _leaf_. The only bean is defined in _leaf_, a simple String.  **This works:**  `main.xml -> in-between.xml -> Leaf.java`  Works fine, and I am able to retrieve the bean defined in `Leaf.java`.  **This fails:**  `Main.java -> in-between.xml -> Leaf.java`  The bean defined in `Leaf.java` is not part of the application context.   ---  **Affects:** 3.1.3, 3.1.4, 3.2 GA, 3.2.1, 3.2.2  **Reference URL:** https://github.com/runeflobakk/spring-config-bug/  2 votes, 3 watchers","closed","status: bulk-closed,","spring-projects-issues","2013-04-26T13:41:54Z","2019-01-12T03:43:07Z"
"","15104","ServletContextResourcePatternResolver fails to resolve resources when an app is using a foo#bar.war filename [SPR-10471]","**[Rostislav Hristov](https://jira.spring.io/secure/ViewProfile.jspa?name=rostislav.hristov)** opened **[SPR-10471](https://jira.spring.io/browse/SPR-10471?redirect=false)** and commented  The issue can be reproduced with WAR files using the following naming scheme: http://tomcat.apache.org/tomcat-7.0-doc/config/context.html#Naming  The foo#bar.war name is required when you want to achieve a deep context path value like /foo/bar.  The ServletContextResourcePatternResolver and the UrlResource implementation which is used internally do not provide any handling for special characters like #. This leads to a MalformedURLException.  The private doRetrieveMatchingJarEntries method of the ServletContextResourcePatternResolver cannot be overridden and the only workaround at the moment is to duplicate the whole class logic in a custom implementation. A simple encoding of the special character fixes the issue.   ---  **Affects:** 3.2.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/be224e1f304619158d493283a65aaedfd7975619, https://github.com/spring-projects/spring-framework/commit/1f0f46fb06eca7f035f38098f1dfceff4c8618e1","closed","type: bug,","spring-projects-issues","2013-04-17T06:51:52Z","2013-05-10T12:44:55Z"
"","15520","Validate message size limits in StompProtocolHandler [SPR-10892]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-10892](https://jira.spring.io/browse/SPR-10892?redirect=false)** and commented  http://stomp.github.io/stomp-specification-1.2.html#Size_Limits  ---  **Affects:** 4.0 M3  **Issue Links:** - #15651 Document how websocket server implementations should be configured by users to limit message size","closed","status: invalid,","spring-projects-issues","2013-09-03T20:26:25Z","2019-01-12T05:26:41Z"
"","15519","Provide mechanism for tracking failed messages in STOMP protocol support [SPR-10891]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-10891](https://jira.spring.io/browse/SPR-10891?redirect=false)** and commented  Perhaps an error channel to which anyone can subscribe. Error messages posted to that channel should indicate (1) in what component the message failed, the (2) the failed message, (3) an exception if available, and any other information that may be useful for filtering.  ---  **Affects:** 4.0 M3  **Issue Links:** - #15811 Support for `@Valid` in `@MessageMapping` annotated methods - #17329 Customize STOMP ERROR frame  2 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2013-09-03T20:25:11Z","2019-01-13T06:58:18Z"
"","15518","Validate if body is allowed in StompMessageConverter for the given command  [SPR-10890]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-10890](https://jira.spring.io/browse/SPR-10890?redirect=false)** and commented   ---  **Affects:** 4.0 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/57d127b55aa682137bf6bc446334cb6d7545dbcc","closed","type: enhancement,","spring-projects-issues","2013-09-03T20:22:08Z","2013-10-31T12:27:50Z"
"","15517","Provide support for using multiple MessageConverters depending on the Content-Type of a STOMP message [SPR-10889]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-10889](https://jira.spring.io/browse/SPR-10889?redirect=false)** and commented   ---  **Affects:** 4.0 M3","closed","type: enhancement,","spring-projects-issues","2013-09-03T20:19:25Z","2013-11-04T07:13:41Z"
"","15516","Use ListenableFuture as the return value in WebSocketClient methods [SPR-10888]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-10888](https://jira.spring.io/browse/SPR-10888?redirect=false)** and commented   ---  **Affects:** 4.0 M3","closed","type: enhancement,","spring-projects-issues","2013-09-03T20:11:50Z","2013-10-31T12:27:52Z"
"","15504","Switch to Jetty's @WebSocket (from WebSocketListener) [SPR-10877]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-10877](https://jira.spring.io/browse/SPR-10877?redirect=false)** and commented  A couple of limitations with WebSocketListener include support for partial messages and receiving pong messages.   ---  **Affects:** 4.0 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/164a9f938ccef29923476a4cf50565d4fa54d528","closed","type: enhancement,","spring-projects-issues","2013-08-29T12:19:15Z","2013-10-31T12:28:04Z"
"","15503","Add support for sending Ping and Pong WebSocket messages as well as for handling incoming Pong messages [SPR-10876]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-10876](https://jira.spring.io/browse/SPR-10876?redirect=false)** and commented   ---  **Affects:** 4.0 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1f897329f9b8617a84fab10fee5f3ad9269160b3","closed","type: enhancement,","spring-projects-issues","2013-08-29T07:36:10Z","2019-01-11T22:08:46Z"
"","15472","Add STOMP heartbeat support [SPR-10845]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-10845](https://jira.spring.io/browse/SPR-10845?redirect=false)** and commented   ---  **Affects:** 4.0 M2","closed","type: enhancement,","spring-projects-issues","2013-08-19T13:48:18Z","2013-10-31T12:28:01Z"
"","15471","Add client and server-side WebSocket container configuration support  [SPR-10844]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-10844](https://jira.spring.io/browse/SPR-10844?redirect=false)** and commented  Some of the main items to configure are: - message size - idle session timeout - input buffer size    ---  **Affects:** 4.0 M2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a5143057ce93e9fd3b63b1b0fd2d5a9e055ee02d  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2013-08-17T06:15:42Z","2013-08-29T16:20:41Z"
"","15470","Add support for extensions during WebSocket handshake [SPR-10843]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-10843](https://jira.spring.io/browse/SPR-10843?redirect=false)** and commented   ---  **Affects:** 4.0 M2","closed","type: enhancement,","spring-projects-issues","2013-08-17T05:59:43Z","2013-10-31T12:27:52Z"
"","15447","Add XStream CatchAllConverter [SPR-10821]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-10821](https://jira.spring.io/browse/SPR-10821?redirect=false)** and commented  The main purpose of the catch-all converter class is to register itself as a  catchall last converter with normal (or higher) priority, after converters that support specific domain classes. That way default XStream converters with lower priorities and possible security vulnerabilities do not get invoked.   ---  **Affects:** 3.2.4","closed","type: enhancement,","spring-projects-issues","2013-08-09T06:36:39Z","2013-08-29T16:20:42Z"
"","15426","Make the use of JSON library in the SockJS service configurable [SPR-10800]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-10800](https://jira.spring.io/browse/SPR-10800?redirect=false)** and commented  The SockJS message frame is essentially an array of JSON-encoded messages (e.g. `a[""message1"",""message2""]`). For those JSON-related needs, it should be possible to use any JSON library.   ---  **Affects:** 4.0 M1","closed","type: enhancement,","spring-projects-issues","2013-07-31T13:18:41Z","2013-08-29T16:20:43Z"
"","15412","Support using the negotiated WebSocket sub-protocol [SPR-10786]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-10786](https://jira.spring.io/browse/SPR-10786?redirect=false)** and commented  Although STOMP is a supported WebSocket sub-protocol, currently it is used irrespective of the sub-protocol that may have been negotiated during the WebSocket handshake.  This is of course convenient if STOMP is the only sub-protocol that an application plans to support. However it should also be possible to have the negotiated sub-protocol determine what is used. That way more than one sub-protocol can be supported and negotiated at runtime.  ---  **Affects:** 4.0 M2  This issue is a sub-task of #13994","closed","type: task,","spring-projects-issues","2013-07-26T11:58:01Z","2019-01-11T22:03:16Z"
"","15376","Add support for sending direct messages to connected STOMP clients [SPR-10750]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-10750](https://jira.spring.io/browse/SPR-10750?redirect=false)** and commented  When application code needs to send a message to a STOMP client connected over WebSocket, it has no access to information such as the WebSocket session (and sessionId) or even which server the client is connected to. This may be needed in an exception handling method, or in an asynchronously executing method that needs to target the user (e.g. with a trade confirmation).  This ticket should make it easy to send messages to a specific user from anywhere within the application.  ---  **Affects:** 4.0 M1  This issue is a sub-task of #13994","closed","type: task,","spring-projects-issues","2013-07-16T19:55:24Z","2019-01-11T22:04:03Z"
"","15375","Create STOMP over WebSocket sample application [SPR-10749]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-10749](https://jira.spring.io/browse/SPR-10749?redirect=false)** and commented  ---  This issue is a sub-task of #13994","closed","type: task,","spring-projects-issues","2013-07-16T19:38:10Z","2019-01-11T22:04:01Z"
"","15374","Add support for sending messages through (full-featured) STOMP brokers [SPR-10748]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-10748](https://jira.spring.io/browse/SPR-10748?redirect=false)** and commented  While #15371 will enable STOMP over WebSocket support in Spring applications, including an annotation-based programming model (#15373), full-featured message brokers (e.g. RabbitMQ, ActiveMQ, etc) with STOMP support have a wide range of features and many advantages.  This ticket will make it possible to use such brokers so that messages can  be easily sent through them to subscribed clients from anywhere within the application.  ---  **Affects:** 4.0 M1  This issue is a sub-task of #13994","closed","type: task,","spring-projects-issues","2013-07-16T19:36:19Z","2019-01-11T22:03:59Z"
"","15373","Provide an annotation-based programming model for processing message [SPR-10747]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-10747](https://jira.spring.io/browse/SPR-10747?redirect=false)** and commented  `@MessageMapping` methods can process messages based on a String-based represention of a destination.  `@MessageExceptionMapping` methods can handle exceptions arising from message handling methods.  `@SubscribeEvent` and `@UnsubscribeEvent` can be used in conjunction with STOMP subscrptions.  It should be possible to create such methods in `@Controller` annotated classes.  ---  **Affects:** 4.0 M1  This issue is a sub-task of #13994","closed","type: task,","spring-projects-issues","2013-07-16T19:33:51Z","2019-01-11T22:03:58Z"
"","15372","Create spring-messaging module [SPR-10746]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-10746](https://jira.spring.io/browse/SPR-10746?redirect=false)** and commented  The new module will contain support for messaging architectures and messaging protocols (initially STOMP). Core abstractions as well as a selection of support classes from Spring Integration will be used to populate the new module.  ---  **Affects:** 4.0 M1  This issue is a sub-task of #13994","closed","type: task,","spring-projects-issues","2013-07-16T19:26:39Z","2019-01-11T22:03:56Z"
"","15371","Enable STOMP over WebSocket support [SPR-10745]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-10745](https://jira.spring.io/browse/SPR-10745?redirect=false)** and commented  STOMP (Simple Text-Oriented Messaging Protocol) enables support for messaging patterns such as pub-sub and point-to-point. A wide range of message brokers support it and there is also a range of clients including a [STOMP JavaScript client](https://github.com/jmesnil/stomp-websocket) that can also be used over WebSocket as well as SockJS from a browser. The STOMP protocol provides a [good overview](http://stomp.github.io/stomp-specification-1.2.html#Abstract).  ---  **Affects:** 4.0 M1  This issue is a sub-task of #13994","closed","type: task,","spring-projects-issues","2013-07-16T19:20:13Z","2019-01-11T22:03:54Z"
"","15252","Provide access to attributes from the handshake HTTP session [SPR-10624]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-10624](https://jira.spring.io/browse/SPR-10624?redirect=false)** and commented  WebSocketSession should provide access to attributes from the HTTP session of the initial handshake request. Since WebSocketSession can be used on the client side as well, it should probably be a general mechanism for initialzing a map of attributes from some source before the session starts.   ---  **Affects:** 4.0 M2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/319f18dddf885ee10bd8a167a88e8d574e546e15","closed","type: enhancement,","spring-projects-issues","2013-06-04T06:23:35Z","2013-08-29T16:20:43Z"
"","15000","Consider adding a post-processing hook for the return value of @RequestMapping methods [SPR-10367]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-10367](https://jira.spring.io/browse/SPR-10367?redirect=false)** and commented  A specific use case is wrapping a map/collection to support both JSON and XML responses ([example from stackoverflow](http://stackoverflow.com/questions/13272443/different-response-entity-body-based-on-accept-header-with-spring-webmvc-rest-co)).  ---  **Affects:** 3.2.1  **Issue Links:** - #15486 Provide better intercepting model for controllers returning `@ResponseBody` (_**""duplicates""**_)  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2013-03-10T10:31:13Z","2019-01-13T07:00:47Z"
"","14692","Make DeferredResult extensible [SPR-10059]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-10059](https://jira.spring.io/browse/SPR-10059?redirect=false)** and commented  Currently DeferredResult does not have any extension hooks and is marked final. However, it would be convenient to be able to store some application specific data and logic with a DeferredResult instance for later access.   ---  **Affects:** 3.2 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/be7b07f8327f1dc3b3fd78eb2041892114ba99a2, https://github.com/spring-projects/spring-framework/commit/25a7136a96cc61969d9378b7c5a6617e100d0bf3","closed","type: enhancement,","spring-projects-issues","2012-11-29T08:10:08Z","2012-12-10T13:48:34Z"
"","15133","ReloadableResourceBundleMessageSource locks properties hashmap and fails under load. [SPR-10500]","**[Ronald R. DiFrango](https://jira.spring.io/secure/ViewProfile.jspa?name=difranr)** opened **[SPR-10500](https://jira.spring.io/browse/SPR-10500?redirect=false)** and commented  The ReloadableResourceBundleMessageSource class locks the whole hashmap that holds properties and in our case is making the network call (after acquiring lock). This terribly slows down the property look-up. Under load it’s more significant as multiple threads could potentially try to load the files if there is a timeout.  Ideally we’d like a background thread load the properties after a timeout and put them into hashmap without locking as we are read-heavy and can tolerate stale entries.  Another option is to use a concurrent hashmap. Therefore the change for RRB should allow a backing map and whether to lock or not.  Here is the stack trace, notice the line in red is holding lock on a hashmap, which is the hashmap that holds properties:  ``` ""[ACTIVE] ExecuteThread: '150' for queue: 'weblogic.kernel.Default (self-tuning)'"" id=8927 idx=0x2fc tid=30297 prio=5 alive, native_blocked, daemon                 at jrockit/net/SocketNativeIO.readBytesPinned(Ljava/io/FileDescriptor;[BIII)I(Native Method)                 at jrockit/net/SocketNativeIO.socketRead(SocketNativeIO.java:32)[inlined]                 at java/net/SocketInputStream.socketRead0(Ljava/io/FileDescriptor;[BIII)I(SocketInputStream.java)[inlined]                 at java/net/SocketInputStream.read(SocketInputStream.java:129)[optimized]                 at java/io/BufferedInputStream.fill(BufferedInputStream.java:218)                 at java/io/BufferedInputStream.read1(BufferedInputStream.java:258)[optimized]                 at java/io/BufferedInputStream.read(BufferedInputStream.java:317)[optimized]                 ^-- Holding lock: java/io/BufferedInputStream@0x10f0f4cc0[thin lock]                 at weblogic/net/http/MessageHeader.isHTTP(MessageHeader.java:224)                 at weblogic/net/http/MessageHeader.parseHeader(MessageHeader.java:148)[optimized]                 at weblogic/net/http/HttpClient.parseHTTP(HttpClient.java:468)[optimized]                 at weblogic/net/http/HttpURLConnection.getInputStream(HttpURLConnection.java:395)[inlined]                 at weblogic/net/http/SOAPHttpURLConnection.getInputStream(SOAPHttpURLConnection.java:37)[optimized]                 ^-- Holding lock: weblogic/net/http/SOAPHttpURLConnection@0x10f0f2550[biased lock]                 at weblogic/net/http/HttpURLConnection.getResponseCode(HttpURLConnection.java:983)[optimized]                 at org/springframework/core/io/AbstractFileResolvingResource.exists(AbstractFileResolvingResource.java:103)[optimized]                 at com/capitalone/epf/context/support/ReloadableResourceBundleMessageSource.refreshProperties(ReloadableResourceBundleMessageSource.java:131)[optimized]                 at org/springframework/context/support/ReloadableResourceBundleMessageSource.getProperties(ReloadableResourceBundleMessageSource.java:439)[inlined]                 at org/springframework/context/support/ReloadableResourceBundleMessageSource.resolveCodeWithoutArguments(ReloadableResourceBundleMessageSource.java:272)[optimized]                 ^-- Holding lock: java/util/HashMap@0x10d49e228[fat lock]                 at org/springframework/context/support/AbstractMessageSource.getMessageInternal(AbstractMessageSource.java:193)[inlined]                 at org/springframework/context/support/AbstractMessageSource.getMessage(AbstractMessageSource.java:127)[optimized]                 at org/springframework/context/support/AbstractApplicationContext.getMessage(AbstractApplicationContext.java:1210)[optimized]                 at org/springframework/web/servlet/tags/MessageTag.resolveMessage(MessageTag.java:227)[inlined]                 at org/springframework/web/servlet/tags/MessageTag.doStartTagInternal(MessageTag.java:165)[optimized]                 at org/springframework/web/servlet/tags/RequestContextAwareTag.doStartTag(RequestContextAwareTag.java:79)[optimized]                 at jsp_servlet/_web_45_inf/_views/__viewrequiredinformation._jsp__tag12(__viewrequiredinformation.java:1381)                 at jsp_servlet/_web_45_inf/_views/__viewrequiredinformation._jspService(__viewrequiredinformation.java:441)                 at weblogic/servlet/jsp/JspBase.service(JspBase.java:34)[optimized]                 at weblogic/servlet/internal/StubSecurityHelper$ServletServiceAction.run(StubSecurityHelper.java:227)[optimized]                 at weblogic/servlet/internal/StubSecurityHelper.invokeServlet(StubSecurityHelper.java:125)[inlined]                 at weblogic/servlet/internal/ServletStubImpl.execute(ServletStubImpl.java:300)[optimized]                 at weblogic/servlet/internal/ServletStubImpl.execute(ServletStubImpl.java:183)[inlined]                 at weblogic/servlet/internal/RequestDispatcherImpl.invokeServlet(RequestDispatcherImpl.java:523)[optimized]                 at weblogic/servlet/internal/RequestDispatcherImpl.forward(RequestDispatcherImpl.java:253)[optimized]                 at org/springframework/web/servlet/view/InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)[optimized]                 at org/springframework/web/servlet/view/AbstractView.render(AbstractView.java:262)[optimized]                 at org/springframework/web/servlet/DispatcherServlet.render(DispatcherServlet.java:1157)[optimized]                 at org/springframework/web/servlet/DispatcherServlet.doDispatch(DispatcherServlet.java:927)[optimized]                 at org/springframework/web/servlet/DispatcherServlet.doService(DispatcherServlet.java:827)[inlined]                 at org/springframework/web/servlet/FrameworkServlet.processRequest(FrameworkServlet.java:882)[inlined]                 at org/springframework/web/servlet/FrameworkServlet.doGet(FrameworkServlet.java:778)[optimized]                 at javax/servlet/http/HttpServlet.service(HttpServlet.java:707)[optimized]                 at javax/servlet/http/HttpServlet.service(HttpServlet.java:820)[optimized]                 at weblogic/servlet/internal/StubSecurityHelper$ServletServiceAction.run(StubSecurityHelper.java:227)[optimized]                 at weblogic/servlet/internal/StubSecurityHelper.invokeServlet(StubSecurityHelper.java:125)[inlined]                 at weblogic/servlet/internal/ServletStubImpl.execute(ServletStubImpl.java:300)[optimized]                 at weblogic/servlet/internal/TailFilter.doFilter(TailFilter.java:26)[optimized]                 at weblogic/servlet/internal/FilterChainImpl.doFilter(FilterChainImpl.java:56)[optimized]                 at com/capitalone/epf/context/filters/EPFContextServletFilter.doFilter(EPFContextServletFilter.java:89)[optimized]                 at weblogic/servlet/internal/FilterChainImpl.doFilter(FilterChainImpl.java:56)[inlined]                 at weblogic/servlet/internal/WebAppServletContext$ServletInvocationAction.wrapRun(Lweblogic/servlet/internal/ServletStubImpl;Ljavax/servlet/http/HttpServletRequest;Ljavax/servlet/http/HttpServletResponse;)Ljava/lang/Object;(Unknown Source)[inlined]                 at weblogic/servlet/internal/WebAppServletContext$ServletInvocationAction.run()Ljava/lang/Object;(Unknown Source)[optimized]                 at weblogic/security/acl/internal/AuthenticatedSubject.doAs(AuthenticatedSubject.java:321)[optimized]                 at weblogic/security/service/SecurityManager.runAs(SecurityManager.java:120)[inlined]                 at weblogic/servlet/internal/WebAppServletContext.securedExecute(Ljavax/servlet/http/HttpServletRequest;Ljavax/servlet/http/HttpServletResponse;Z)V(Unknown Source)[inlined]                 at weblogic/servlet/internal/WebAppServletContext.execute(Lweblogic/servlet/internal/ServletRequestImpl;Lweblogic/servlet/internal/ServletResponseImpl;)V(Unknown Source)[optimized]                 at weblogic/servlet/internal/ServletRequestImpl.run()V(Unknown Source)[optimized]                 at weblogic/work/ExecuteThread.execute(ExecuteThread.java:209)[inlined]                 at weblogic/work/ExecuteThread.run(ExecuteThread.java:178)[optimized]                 at jrockit/vm/RNI.c2java(JJJJJ)V(Native Method) ```  Now here are the lookup threads waiting on the lock [under load you could have literally hundreds as in our case]:  ``` [ACTIVE] ExecuteThread: '146' for queue: 'weblogic.kernel.Default (self-tuning)'"" id=8923 idx=0x300 tid=30008 prio=5 alive, blocked, native_blocked, daemon                 -- Blocked trying to get lock: java/util/HashMap@0x10d49e228[fat lock]                 at jrockit/vm/Threads.waitForUnblockSignal()V(Native Method)                 at jrockit/vm/Locks.fatLockBlockOrSpin(Locks.java:1411)[optimized]                 at jrockit/vm/Locks.lockFat(Locks.java:1512)[optimized]                 at jrockit/vm/Locks.monitorEnterSecondStageHard(Locks.java:1054)[optimized]                 at jrockit/vm/Locks.monitorEnterSecondStage(Locks.java:1005)[optimized]                 at org/springframework/context/support/ReloadableResourceBundleMessageSource.getProperties(ReloadableResourceBundleMessageSource.java:431)[inlined]                 at org/springframework/context/support/ReloadableResourceBundleMessageSource.resolveCodeWithoutArguments(ReloadableResourceBundleMessageSource.java:272)[optimized]                 at org/springframework/context/support/AbstractMessageSource.getMessageInternal(AbstractMessageSource.java:193)[inlined]                 at org/springframework/context/support/AbstractMessageSource.getMessage(AbstractMessageSource.java:127)[optimized]                 at org/springframework/context/support/AbstractApplicationContext.getMessage(AbstractApplicationContext.java:1210)[optimized]                 at org/springframework/web/servlet/tags/MessageTag.resolveMessage(MessageTag.java:227)[inlined]                 at org/springframework/web/servlet/tags/MessageTag.doStartTagInternal(MessageTag.java:165)[optimized]                 at org/springframework/web/servlet/tags/RequestContextAwareTag.doStartTag(RequestContextAwareTag.java:79)[optimized]                 at jsp_servlet/_web_45_inf/_views/__viewpaymentsalerts._jsp__tag34(__viewpaymentsalerts.java:2695)                 at jsp_servlet/_web_45_inf/_views/__viewpaymentsalerts._jsp__tag30(__viewpaymentsalerts.java:2523)                 at jsp_servlet/_web_45_inf/_views/__viewpaymentsalerts._jspService(__viewpaymentsalerts.java:601)                 at weblogic/servlet/jsp/JspBase.service(JspBase.java:34)[optimized]                 at weblogic/servlet/internal/StubSecurityHelper$ServletServiceAction.run(StubSecurityHelper.java:227)[optimized]                 at weblogic/servlet/internal/StubSecurityHelper.invokeServlet(StubSecurityHelper.java:125)[inlined]                 at weblogic/servlet/internal/ServletStubImpl.execute(ServletStubImpl.java:300)[optimized]                 at weblogic/servlet/internal/ServletStubImpl.execute(ServletStubImpl.java:183)[inlined]                 at weblogic/servlet/internal/RequestDispatcherImpl.invokeServlet(RequestDispatcherImpl.java:523)[optimized]                 at weblogic/servlet/internal/RequestDispatcherImpl.forward(RequestDispatcherImpl.java:253)[optimized]                 at org/springframework/web/servlet/view/InternalResourceView.renderMergedOutputModel(InternalResourceView.java:238)[optimized]                 at org/springframework/web/servlet/view/AbstractView.render(AbstractView.java:262)[optimized]                 at org/springframework/web/servlet/DispatcherServlet.render(DispatcherServlet.java:1157)[optimized]                 at org/springframework/web/servlet/DispatcherServlet.doDispatch(DispatcherServlet.java:927)[optimized]                 at org/springframework/web/servlet/DispatcherServlet.doService(DispatcherServlet.java:827)[inlined]                 at org/springframework/web/servlet/FrameworkServlet.processRequest(FrameworkServlet.java:882)[inlined]                 at org/springframework/web/servlet/FrameworkServlet.doGet(FrameworkServlet.java:778)[optimized]                 at javax/servlet/http/HttpServlet.service(HttpServlet.java:707)[optimized]                 at javax/servlet/http/HttpServlet.service(HttpServlet.java:820)[optimized]                 at weblogic/servlet/internal/StubSecurityHelper$ServletServiceAction.run(StubSecurityHelper.java:227)[optimized]                 at weblogic/servlet/internal/StubSecurityHelper.invokeServlet(StubSecurityHelper.java:125)[inlined]                 at weblogic/servlet/internal/ServletStubImpl.execute(ServletStubImpl.java:300)[optimized]                 at weblogic/servlet/internal/TailFilter.doFilter(TailFilter.java:26)[optimized]                 at weblogic/servlet/internal/FilterChainImpl.doFilter(FilterChainImpl.java:56)[optimized]                 at com/capitalone/epf/context/filters/EPFContextServletFilter.doFilter(EPFContextServletFilter.java:89)[optimized]                 at weblogic/servlet/internal/FilterChainImpl.doFilter(FilterChainImpl.java:56)[inlined]                 at weblogic/servlet/internal/WebAppServletContext$ServletInvocationAction.wrapRun(Lweblogic/servlet/internal/ServletStubImpl;Ljavax/servlet/http/HttpServletRequest;Ljavax/servlet/http/HttpServletResponse;)Ljava/lang/Object;(Unknown Source)[inlined]                 at weblogic/servlet/internal/WebAppServletContext$ServletInvocationAction.run()Ljava/lang/Object;(Unknown Source)[optimized]                 at weblogic/security/acl/internal/AuthenticatedSubject.doAs(AuthenticatedSubject.java:321)[optimized]                 at weblogic/security/service/SecurityManager.runAs(SecurityManager.java:120)[inlined]                 at weblogic/servlet/internal/WebAppServletContext.securedExecute(Ljavax/servlet/http/HttpServletRequest;Ljavax/servlet/http/HttpServletResponse;Z)V(Unknown Source)[inlined]                 at weblogic/servlet/internal/WebAppServletContext.execute(Lweblogic/servlet/internal/ServletRequestImpl;Lweblogic/servlet/internal/ServletResponseImpl;)V(Unknown Source)[optimized]                 at weblogic/servlet/internal/ServletRequestImpl.run()V(Unknown Source)[optimized]                 at weblogic/work/ExecuteThread.execute(ExecuteThread.java:209)[inlined]                 at weblogic/work/ExecuteThread.run(ExecuteThread.java:178)[optimized]                 at jrockit/vm/RNI.c2java(JJJJJ)V(Native Method) ```  ---  **Affects:** 3.1 GA  **Attachments:** - [ReloadableResourceBundleMessageSource.java](https://jira.spring.io/secure/attachment/22100/ReloadableResourceBundleMessageSource.java) (_26.71 kB_)  **Issue Links:** - #10149 ReloadableResourceBundleMessageSource performance issue when using many resource files (_**""is duplicated by""**_) - #19152 Method getMergedProperties in ReloadableResourceBundleMessageSource does not set fileTimestamp - #20782 Remove synchronization from ResourceBundleMessageSource  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a000dd782a74bb27484e2d76760e76e8398a32e8  7 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2013-04-29T05:34:34Z","2019-01-11T22:19:22Z"
"","14695","Wrond result of AntPathMatcher.combine when using template variables with some regular expressions [SPR-10062]","**[Roman Kozlov](https://jira.spring.io/secure/ViewProfile.jspa?name=power)** opened **[SPR-10062](https://jira.spring.io/browse/SPR-10062?redirect=false)** and commented  The following code produces incorrect mapping path for method edit:  ``` @Controller @RequestMapping(""/{foo:.*[^0-9].*}"") public class NonNumberFooController { 	@RequestMapping(value = ""/edit/"", method = GET) 	public String edit() { 		return ""foo/edit""; 	} } ```  Actual result: ``` /{foo:.**[^0-9].**}  ``` Expected: ``` /{foo:.*[^0-9].*}/edit/ ```  The problem seems to be in `org.springframework.util.AntPathMatcher.combine()` method, that handles dots `"".""` inside pattern specially (as filename.extension delimiter), ignoring the fact that dot can appear inside `{pathVariable:regex}` block as a part of regex.  ---  **Affects:** 3.1.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/33e723b4a870946fbba89d68b17db4efbea2084e","closed","type: bug,","spring-projects-issues","2012-12-01T10:24:27Z","2019-01-13T21:04:54Z"
"","14842","Update documentation examples for scheduling to use SimpleTriggerFactoryBean instead of SimpleTriggerBean [SPR-10209]","**[Roman Konoval](https://jira.spring.io/secure/ViewProfile.jspa?name=roman.konoval)** opened **[SPR-10209](https://jira.spring.io/browse/SPR-10209?redirect=false)** and commented  SimpleTriggerBean is deprecated and it's javadoc says org.springframework.scheduling.quartz.SimpleTriggerFactoryBean should be used instead, however documentation example still [uses](http://static.springsource.org/spring/docs/3.2.x/spring-framework-reference/html/scheduling.html#scheduling-quartz-cron) it. It is confusing as SimpleTriggerBean does not work with Quartz 2.1+ (see #14410)  ---  **Affects:** 3.2 GA  **Reference URL:** http://static.springsource.org/spring/docs/3.2.x/spring-framework-reference/html/scheduling.html#scheduling-quartz-cron  **Issue Links:** - #14030 Documentation concerning Quartz support is out of date (_**""supersedes""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a6b70722facc7caa52e1d73e273e639d6cce696c","closed","type: enhancement,","spring-projects-issues","2013-01-23T01:37:27Z","2019-01-11T21:36:38Z"
"","15106","NoSuchBeanDefinitionException when upgrading from 3.2.1.RELEASE to 3.2.2.RELEASE [SPR-10473]","**[Rodrigo Witzel](https://jira.spring.io/secure/ViewProfile.jspa?name=rwitzel)** opened **[SPR-10473](https://jira.spring.io/browse/SPR-10473?redirect=false)** and commented  After the upgrade the application context could not be created anymore in both tests and the webapp.  The stacktrace of the failing JUnit tests:  ``` Stacktrace:  java.lang.IllegalStateException: Failed to load ApplicationContext 	at org.springframework.test.context.CacheAwareContextLoaderDelegate.loadContext(CacheAwareContextLoaderDelegate.java:99) 	at org.springframework.test.context.TestContext.getApplicationContext(TestContext.java:122) 	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:109) 	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:75) 	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:312) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:211) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:288) 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:284) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:231) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:88) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229) 	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26) 	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) 	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:71) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:309) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:174) 	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50) 	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197) Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myServiceImpl': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.example.webapp.service.order.CustomerOrderService com.example.backend.service.impl.myServiceImpl.backendCustomerOrderService; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [com.example.webapp.service.order.CustomerOrderService] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@javax.inject.Inject()} 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:288) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1122) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:522) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:461) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:295) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:292) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:626) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:932) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:479) 	at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:120) 	at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:60) 	at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.delegateLoading(AbstractDelegatingSmartContextLoader.java:100) 	at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.loadContext(AbstractDelegatingSmartContextLoader.java:248) 	at org.springframework.test.context.CacheAwareContextLoaderDelegate.loadContextInternal(CacheAwareContextLoaderDelegate.java:64) 	at org.springframework.test.context.CacheAwareContextLoaderDelegate.loadContext(CacheAwareContextLoaderDelegate.java:91) 	... 26 more Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.example.webapp.service.order.CustomerOrderService com.example.backend.service.impl.myServiceImpl.backendCustomerOrderService; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [com.example.webapp.service.order.CustomerOrderService] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@javax.inject.Inject()} 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:514) 	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:87) 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:285) 	... 42 more Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [com.example.webapp.service.order.CustomerOrderService] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@javax.inject.Inject()} 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoSuchBeanDefinitionException(DefaultListableBeanFactory.java:986) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:856) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:768) 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:486) 	... 44 more ```    ---  **Affects:** 3.2.2","closed","status: bulk-closed,","spring-projects-issues","2013-04-18T07:13:43Z","2019-01-12T00:23:56Z"
"","15446","Order of values in @PropertySource annotation depends on name attribute [SPR-10820]","**[Robin Sander](https://jira.spring.io/secure/ViewProfile.jspa?name=robin)** opened **[SPR-10820](https://jira.spring.io/browse/SPR-10820?redirect=false)** and commented  The fix for #13766 introduced `CompositePropertySource` in order to allow multiple values in a named `@PropertySource` but it seems that with `CompositePropertySource` the values get processed in reverse order, so  ``` @PropertySource(value = { ""classpath:a.properties"", ""classpath:override.properties"" }) ```  is equivalent to  ``` @PropertySource(name = ""ps"", value = { ""classpath:override.properties"", ""classpath:a.properties"" }) ```  rather than  ``` @PropertySource(name = ""ps"", value = { ""classpath:a.properties"", ""classpath:override.properties"" }) ```  ---  **Affects:** 3.2.4  **Sub-tasks:** - #15641 Backport: Order of values in `@PropertySource` annotation depends on name attribute","closed","type: enhancement,","spring-projects-issues","2013-08-09T05:21:32Z","2019-01-13T06:58:34Z"
"","15054","XStreamMarshaller - no way to set a MapperWrapper on XStream [SPR-10421]","**[Robert Thaler](https://jira.spring.io/secure/ViewProfile.jspa?name=rthaler)** opened **[SPR-10421](https://jira.spring.io/browse/SPR-10421?redirect=false)** and commented  We need a HibernateMapper for XStream to support lazy/proxy entities. Before Spring 3.2.2 we have subclassed XStreamMarshaller and overwritten getXStream to provide an appropriate instance of XStream. Since 3.2.2 XStreamMarshaller.getXStream is declared as final. The only way to set a MapperWrapper is to force access on the attribute 'xstream' via reflection.  In my opinion XStreamMarshaller should provide an API method either to set MapperWrappers or to create a XStream instance.  kind regards robert  ---  **Affects:** 3.2.2  **Issue Links:** - #16258 XStreamMarshaller forces XPP dependency","closed","type: enhancement,","spring-projects-issues","2013-03-27T00:52:22Z","2019-01-11T21:17:33Z"
"","15492","@Component within @Configuration class cannot @Autowire Regression [SPR-10865]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-10865](https://jira.spring.io/browse/SPR-10865?redirect=false)** and commented  The following test passes with Spring 3.2.3.RELEASE and with Spring 4.0.0.M1, but fails with 4.0.0.M2 and the current snapshot (i.e. conceptually this is 4.0.0.M3-SNAPSHOT)  ``` @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(classes = {ComponentConfigTests.MyConfig.class}) public class ComponentConfigTests {     @Autowired     private MyConfig.MyComponent component;      @Test     public void componentAutowiresSuccessfully() {     }      @Configuration     static class MyConfig {         @Component         public static class MyComponent {         }     } } ```  These failures are causing test failures in Spring Security's tests when ran against Spring 4 that relate to [issue 55](https://github.com/SpringSource/spring-security-javaconfig/issues/55) from the Spring Security Java Config project (which is now part of Spring Security).  ---  **Affects:** 4.0 M2, 4.0 M3  **Attachments:** - [SPR-10865.zip](https://jira.spring.io/secure/attachment/21362/SPR-10865.zip) (_51.94 kB_)  **Issue Links:** - #15598 Regression with detecting nested components  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9bfbe36b1c000f5ffa6c5c2941259e43ec38af01","closed","in: core,","spring-projects-issues","2013-08-27T11:19:55Z","2019-01-11T22:09:02Z"
"","15487","NoSuchMethodError: MediaType.isCompatibleWithMediaType;) [SPR-10860]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-10860](https://jira.spring.io/browse/SPR-10860?redirect=false)** and commented  The commit [eb4579b](https://github.com/SpringSource/spring-framework/commit/eb4579b4d48c0d71baf4c309740366aa04347197#spring-web/src/main/java/org/springframework/http/MediaType.java) seems to cause   NoSuchMethodError if a class was compiled against a previous revision of MediaType since the method signature changed. This is the cause for [SEC-2288](https://jira.spring.io/browse/SEC-2288)  The detailed error can be seen below:  ``` java.lang.NoSuchMethodError: org.springframework.http.MediaType.isCompatibleWith(Lorg/springframework/http/MediaType;)Z 	org.springframework.security.web.util.MediaTypeRequestMatcher.matches(MediaTypeRequestMatcher.java:186) 	org.springframework.security.web.authentication.DelegatingAuthenticationEntryPoint.commence(DelegatingAuthenticationEntryPoint.java:71) 	org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(ExceptionTranslationFilter.java:186) 	org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(ExceptionTranslationFilter.java:168) 	org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:131) 	org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:103) 	org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:113) 	org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:150) 	org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:45) 	org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilter(BasicAuthenticationFilter.java:150) 	org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	org.springframework.security.web.authentication.ui.DefaultLoginPageViewFilter.doFilter(DefaultLoginPageViewFilter.java:122) 	org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:199) 	org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:110) 	org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	org.springframework.security.web.csrf.CsrfFilter.doFilterInternal(CsrfFilter.java:80) 	org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:108) 	org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:57) 	org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:108) 	org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:87) 	org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:50) 	org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:108) 	org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:192) 	org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:160) ```    ---  **Affects:** 4.0 M2  **Issue Links:** - [SEC-2288](https://jira.spring.io/browse/SEC-2288) NoSuchMethodError: MediaType.isCompatibleWithMediaType;) with Spring 4.x (_**""is duplicated by""**_)","closed","type: bug,","spring-projects-issues","2013-08-26T10:57:45Z","2013-08-29T16:20:47Z"
"","15392","Integrate Spring Framework build with Sonar [SPR-10766]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-10766](https://jira.spring.io/browse/SPR-10766?redirect=false)** and commented  We should integrate the build with sonar   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e2aba3d31799ef108dd99f34a212f8e663764102  1 votes, 5 watchers","closed","type: task,","spring-projects-issues","2013-07-22T08:39:34Z","2014-08-15T01:52:39Z"
"","15386","HandlerMethodArgumentResolver support for meta Annotations [SPR-10760]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-10760](https://jira.spring.io/browse/SPR-10760?redirect=false)** and commented  When using `@Autowire`, custom `@Value` annotations can be created to help with reuse of annotations. For example, I might have:  ``` @Target({ElementType.FIELD, ElementType.METHOD, ElementType.PARAMETER, ElementType.ANNOTATION_TYPE}) @Retention(RetentionPolicy.RUNTIME) @Documented @Value(""#{myUser}"") public @interface MyUser {  } ```  This would ensure the bean by name myUser is resolved for the following:  ```   @Autowired public void setMyUser(@MyUser String myUser) {    ... } ```  The code for meta `@Value` annotations can be found at QualifierAnnotationAutowireCandidateResolver#findValue in the second for loop.  It would be nice if ExpressionValueMethodArgumentResolver also supported such use cases. One concrete example of how users could use this is with Spring Security. For example, many users create a custom object that is placed in the Spring Security's Authentication. The Authentication is available on HttpServletRequest#getUserPrincipal(). This means the Authentication can be resolved using the ServletRequestMethodArgumentResolver. However, users should not be tied to the Spring Security APIs. One way to get around this is using `@Value` and relying on the ExpressionValueMethodArgumentResolver to resolve their custom class that is placed in the Authentication#getPrincipal() as shown below:  ``` public String useCustomUser(@Value(""#{request.userPrincipal.principal}"") CustomUser custom) {     ... } ```  It would be nice if the following would work too:  ``` @Target({ElementType.FIELD, ElementType.METHOD, ElementType.PARAMETER, ElementType.ANNOTATION_TYPE}) @Retention(RetentionPolicy.RUNTIME) @Documented @Value(""#{request.userPrincipal.principal}"") public @interface MyUser {  } ```  Controller method example:  ```  public String useCustomUser(@MyUser CustomUser custom) {     ... } ```  Other HandlerMethodArgumentResolver that use annotations should also support meta annotations. For example: ModelAttributeMethodProcessor and it subclasses   ---  2 votes, 2 watchers","closed","status: bulk-closed,","spring-projects-issues","2013-07-19T07:55:42Z","2019-01-12T00:22:30Z"
"","15288","@Enable* should be supported without @Configuration [SPR-10660]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-10660](https://jira.spring.io/browse/SPR-10660?redirect=false)** and commented  `@Enable` annotations have no meaning unless combined with `@Configuration`. It would be useful to allow configurations with only `@Enable` annotations.  It would be ideal if all the following tests pass (each test is marked with a comment with its current behavior):  ``` package sample;  ... imports omitted ...  public class EnableWithNoConfigurationAnnotationTests {     private ConfigurableApplicationContext context;      @After     public void closeContext() {         if(context != null) {             context.close();         }     }      // succeeds     @Test     public void enableWebMvcWithConfigurationAnnotation() {         assertLoadsWebMvc(EnableWebMvcWithConfigurationAnnotationConfig.class);     }      @EnableWebMvc     @Configuration     static class EnableWebMvcWithConfigurationAnnotationConfig {}      // fails     @Test     public void enableWebMvcNoConfigurationAnnotation() {         assertLoadsWebMvc(EnableWebMvcNoConfigurationAnnotationConfig.class);     }      @EnableWebMvc     static class EnableWebMvcNoConfigurationAnnotationConfig {}      // fails     @Test     public void enableWebMvcNoConfigurationClasspathScanning() {         assertLoadsWebMvc(EnableWebMvcWithClasspathScanningConfig.class);     }      @Configuration     @ComponentScan(basePackageClasses=ScannedEnableWebMvcNoConfigurationAnnotationConfig.class)     static class EnableWebMvcWithClasspathScanningConfig {}      private void assertLoadsWebMvc(Class... configs) {         AnnotationConfigWebApplicationContext context = new AnnotationConfigWebApplicationContext();         context.setServletConfig(new MockServletConfig());         context.setServletContext(new MockServletContext());         context.register(configs);         context.refresh();         context.start();          // verify RequestMappingHandlerMapping is found         context.getBean(RequestMappingHandlerMapping.class);          this.context = context;     } } ```  ``` package package sample.scanning;  ... imports omitted...  @EnableWebMvc public class ScannedEnableWebMvcNoConfigurationAnnotationConfig {  } ```  ---  **Issue Links:** - #15163 Consider `@Import` classes as lite `@Configuration` (_**""duplicates""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d18b3f049a86bb24e4224439d2c5825fcc417bd7","closed","type: enhancement,","spring-projects-issues","2013-06-17T09:43:49Z","2019-01-13T06:59:19Z"
"","15193","Unable to load JUnit4 runner to calculate Ignored test cases [SPR-10563]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-10563](https://jira.spring.io/browse/SPR-10563?redirect=false)** and commented  ``` 12:42:07.563 [DEBUG] [TestEventLogger] org.springframework.instrument.classloading.glassfish.GlassFishLoadTimeWeaverTests STARTED 12:42:07.573 [QUIET] [system.out] 12:42:07.572 [WARN] [org.gradle.api.internal.tasks.testing.junit.AllExceptIgnoredTestRunnerBuilder$FallbackJUnit4Builder] Unable to load JUnit4 runner to calculate Ignored test cases 12:42:07.573 [QUIET] [system.out] java.lang.reflect.InvocationTargetException 12:42:07.573 [QUIET] [system.out] 	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) 12:42:07.573 [QUIET] [system.out] 	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57) 12:42:07.573 [QUIET] [system.out] 	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) 12:42:07.573 [QUIET] [system.out] 	at java.lang.reflect.Constructor.newInstance(Constructor.java:414) 12:42:07.574 [QUIET] [system.out] 	at org.gradle.api.internal.tasks.testing.junit.AllExceptIgnoredTestRunnerBuilder$FallbackJUnit4Builder.runnerForClass(AllExceptIgnoredTestRunnerBuilder.java:52) 12:42:07.574 [QUIET] [system.out] 	at org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:59) 12:42:07.574 [QUIET] [system.out] 	at org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(AllDefaultPossibilitiesBuilder.java:26) 12:42:07.574 [QUIET] [system.out] 	at org.gradle.api.internal.tasks.testing.junit.IgnoredTestDescriptorProvider.getAllDescriptions(IgnoredTestDescriptorProvider.java:31) 12:42:07.574 [QUIET] [system.out] 	at org.gradle.api.internal.tasks.testing.junit.JUnitTestEventAdapter.processIgnoredClass(JUnitTestEventAdapter.java:104) 12:42:07.574 [QUIET] [system.out] 	at org.gradle.api.internal.tasks.testing.junit.JUnitTestEventAdapter.testIgnored(JUnitTestEventAdapter.java:92) 12:42:07.574 [QUIET] [system.out] 	at org.junit.runner.notification.RunNotifier$6.notifyListener(RunNotifier.java:175) 12:42:07.574 [QUIET] [system.out] 	at org.junit.runner.notification.RunNotifier$SafeNotifier.run(RunNotifier.java:61) 12:42:07.575 [QUIET] [system.out] 	at org.junit.runner.notification.RunNotifier.fireTestIgnored(RunNotifier.java:172) 12:42:07.575 [QUIET] [system.out] 	at org.junit.internal.builders.IgnoredClassRunner.run(IgnoredClassRunner.java:16) 12:42:07.575 [QUIET] [system.out] 	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.runTestClass(JUnitTestClassExecuter.java:80) 12:42:07.575 [QUIET] [system.out] 	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.execute(JUnitTestClassExecuter.java:47) 12:42:07.575 [QUIET] [system.out] 	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassProcessor.processTestClass(JUnitTestClassProcessor.java:69) 12:42:07.575 [QUIET] [system.out] 	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:49) 12:42:07.575 [QUIET] [system.out] 	at sun.reflect.GeneratedMethodAccessor18.invoke(Unknown Source) 12:42:07.575 [QUIET] [system.out] 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 12:42:07.575 [QUIET] [system.out] 	at java.lang.reflect.Method.invoke(Method.java:491) 12:42:07.575 [QUIET] [system.out] 	at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) 12:42:07.576 [QUIET] [system.out] 	at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) 12:42:07.576 [QUIET] [system.out] 	at org.gradle.messaging.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) 12:42:07.576 [QUIET] [system.out] 	at org.gradle.messaging.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) 12:42:07.576 [QUIET] [system.out] 	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) 12:42:07.576 [QUIET] [system.out] 	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:103) 12:42:07.576 [QUIET] [system.out] 	at sun.reflect.GeneratedMethodAccessor17.invoke(Unknown Source) 12:42:07.576 [QUIET] [system.out] 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 12:42:07.576 [QUIET] [system.out] 	at java.lang.reflect.Method.invoke(Method.java:491) 12:42:07.576 [QUIET] [system.out] 	at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) 12:42:07.577 [QUIET] [system.out] 	at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) 12:42:07.577 [DEBUG] [TestEventLogger]  12:42:07.577 [QUIET] [system.out] 	at org.gradle.messaging.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:355) 12:42:07.577 [DEBUG] [TestEventLogger] org.springframework.instrument.classloading.glassfish.GlassFishLoadTimeWeaverTests PASSED 12:42:07.577 [QUIET] [system.out] 	at org.gradle.internal.concurrent.DefaultExecutorFactory$StoppableExecutorImpl$1.run(DefaultExecutorFactory.java:66) 12:42:07.577 [DEBUG] [TestEventLogger]  12:42:07.577 [QUIET] [system.out] 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) 12:42:07.577 [DEBUG] [TestEventLogger] org.springframework.remoting.rmi.RmiSupportTests STARTED 12:42:07.578 [QUIET] [system.out] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) 12:42:07.578 [QUIET] [system.out] 	at java.lang.Thread.run(Thread.java:724) 12:42:07.578 [QUIET] [system.out] Caused by: org.junit.internal.runners.InitializationError 12:42:07.578 [QUIET] [system.out] 	at org.junit.internal.runners.MethodValidator.assertValid(MethodValidator.java:57) 12:42:07.578 [QUIET] [system.out] 	at org.junit.internal.runners.JUnit4ClassRunner.validate(JUnit4ClassRunner.java:47) 12:42:07.578 [QUIET] [system.out] 	at org.junit.internal.runners.JUnit4ClassRunner.(JUnit4ClassRunner.java:37) 12:42:07.578 [QUIET] [system.out] 	... 37 more ```    --- No further details from [SPR-10563](https://jira.spring.io/browse/SPR-10563?redirect=false)","closed","type: task,","spring-projects-issues","2013-05-14T10:53:16Z","2013-12-03T15:15:37Z"
"","15188","AspectJ and JiBX compilation fails with OpenJDK 8 b89 [SPR-10558]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-10558](https://jira.spring.io/browse/SPR-10558?redirect=false)** and commented  NOTE: Revert commit 23737a45  There are a number of failures when building with JDK 1.8 b89  ``` [ant:iajc] /home/rwinch/git/spring-framework-4.x/spring-aspects/src/main/java/org/springframework/orm/jpa/aspectj/JpaExceptionTranslatorAspect.aj:1 [error] The type java.lang.CharSequence cannot be resolved. It is indirectly referenced from required .class files [ant:iajc] (no source information available) [ant:iajc] /home/rwinch/git/spring-framework-4.x/spring-aspects/src/main/java/org/springframework/mock/staticmock/AbstractMethodMockingControl.aj:19 [error] The import java.util.Arrays cannot be resolved [ant:iajc] import java.util.Arrays; [ant:iajc]        ^^^^^^^^^^^^^^^ [ant:iajc] /home/rwinch/git/spring-framework-4.x/spring-aspects/src/main/java/org/springframework/mock/staticmock/AbstractMethodMockingControl.aj:87 [error] Arrays cannot be resolved [ant:iajc] if (!Arrays.equals(this.args, args)) { ```  ``` :spring-oxm:compileTestJava Note: /home/rwinch/git/spring-framework-4.x/spring-oxm/src/test/java/org/springframework/oxm/xstream/XStreamMarshallerTests.java uses or overrides a deprecated API. Note: Recompile with -Xlint:deprecation for details. Note: Some input files use unchecked or unsafe operations. Note: Recompile with -Xlint:unchecked for details. [ant:jibx] Error running binding compiler [ant:jibx] java.lang.IllegalStateException: Error loading class java.lang.CharSequence: Error reading path java/lang/CharSequence.class for class java.lang.CharSequence [ant:jibx] 	at org.jibx.binding.classes.ClassCache$ClassCacheLocator.getClassInfo(ClassCache.java:291) [ant:jibx] 	at org.jibx.binding.model.ClassHierarchyContext.accumulateInterfaces(ClassHierarchyContext.java:95) [ant:jibx] 	at org.jibx.binding.model.ClassHierarchyContext.addTypedComponent(ClassHierarchyContext.java:121) [ant:jibx] 	at org.jibx.binding.model.DefinitionContext.addFormat(DefinitionContext.java:527) [ant:jibx] 	at org.jibx.binding.model.BindingElement.defineBaseFormat(BindingElement.java:843) [ant:jibx] 	at org.jibx.binding.model.BindingElement.runValidation(BindingElement.java:865) [ant:jibx] 	at org.jibx.binding.model.BindingElement.runValidation(BindingElement.java:899) [ant:jibx] 	at org.jibx.binding.model.BindingElement.validateBinding(BindingElement.java:969) [ant:jibx] 	at org.jibx.binding.Utility.validateBinding(Utility.java:226) [ant:jibx] 	at org.jibx.binding.Utility.loadBinding(Utility.java:269) [ant:jibx] 	at org.jibx.binding.Utility.loadFileBinding(Utility.java:420) [ant:jibx] 	at org.jibx.binding.Compile.compile(Compile.java:217) [ant:jibx] 	at org.jibx.binding.ant.CompileTask.execute(CompileTask.java:248) ```  The workaround is to install build 88 and to set your JAVA_HOME prior to building. You must build from source http://hg.openjdk.java.net/jdk8/jdk8/rev/e1a929afcfc4 If you are not updating these modules, you can also run builds on individual modules. For example, ""./gradlew spring-core:build""   ---  **Affects:** 4.0 M1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ec527a41218469170a5b0499275c6dc2519b7af4, https://github.com/spring-projects/spring-framework/commit/5ccbc80522eba5a2f0b38a44aac16e7e9c7e7770, https://github.com/spring-projects/spring-framework/commit/b25504554117444d0f887c1eed6d1b3aa92d61c1  4 votes, 11 watchers","closed","type: task,","spring-projects-issues","2013-05-13T13:23:11Z","2013-08-29T16:20:43Z"
"","15176","Loading @Import(ChildConfig) or EnclosingConfig.ChildConfig and then ChildConfig does not load beans on ParentConfig [SPR-10546]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-10546](https://jira.spring.io/browse/SPR-10546?redirect=false)** and commented  Given the following configuration:  ``` @Configuration static class ParentConfig {   @Bean   public String myBean() {     return ""myBean"";   } }  @Configuration static class EnclosingConfig {   @Configuration   public static class ChildConfig extends ParentConfig {} } ```  The following will succeed:  ``` AnnotationConfigApplicationContext context =    new AnnotationConfigApplicationContext(EnclosingConfig.ChildConfig.class,EnclosingConfig.class); context.getBean(String.class) ```  The following will fail:  ``` AnnotationConfigApplicationContext context =    new AnnotationConfigApplicationContext(EnclosingConfig.class, EnclosingConfig.ChildConfig.class); context.getBean(String.class) ```  The reason this fails is the following happens:  * ConfigurationClassParser#doProcessConfigurationClass parses EnclosingConfig * It then processes the member classes which includes EnclosingConfig.ChildConfig * ConfigurationClassParser#doProcessConfigurationClass parses EnclosingConfig.ChildConfig * ConfigurationClassParser#doProcessConfigurationClas parses EnclosingConfig.ChildConfig's parent class ParentConfig * myBean is added as a method to EnclosingConfig.ChildConfig's configClass * ParentConfig is marked to not be processed again by adding it to knownSuperclasses * ConfigurationClassParser#doProcessConfigurationClass parses EnclosingConfig.ChildConfig and does not attempt to process the super class because it is already in knownSuperclasses. Because of this, the configClass with this ConfigurationClass does not have any beanMethods from the super class * ConfigurationClassParser.processConfigurationClass [removes the existing instance of ConfigurationClass](https://github.com/SpringSource/spring-framework/blob/master/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java#L200) which has the beanMethods form ParentConfig on it * The EnclosingConfig.ChildConfig that does not have the beanMethods from the ParentConfig on it is then added to the configurationClasses  It might be relevant to note that the failure and success depends on if the first `@Configuration` has name or not. If second Configuration does not have a bean name, then it is [not overridden](https://github.com/SpringSource/spring-framework/blob/master/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java#L197).  Another example would be given:  ``` @Configuration static class ParentConfig {   @Bean   public String myBean() {     return ""myBean"";   } } @Configuration static class ChildConfig extends ParentConfig {}  @Configuration @Import(ChildConfig.class) static class ImportChildConfig {} ```  The following will succeed:  ``` AnnotationConfigApplicationContext context =    new AnnotationConfigApplicationContext(ChildConfig.class,ImportChildConfig.class); context.getBean(String.class) ```  The following will fail:  ``` AnnotationConfigApplicationContext context =    new AnnotationConfigApplicationContext(ImportChildConfig.class, ChildConfig.class); context.getBean(String.class) ```  Please note that this issue can happen when using classpath scanning, so this can be quite difficult to track down if the classes are discovered in a different order. The classpath scanning (at least for my system) seems to be implemented to order the classes alphabetically. I have not dug into the internals of the classpath scanning implementation to determine if this is environment specific or not.  ---  **Affects:** 3.2.2  **Issue Links:** - #16428 Custom `@Profile` annotations not working on `@Configuration` classes  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6e4317ebfb54d5d6e1d52964d17ffde0abfd0b2e, https://github.com/spring-projects/spring-framework/commit/3f7007f73a3b8d660e9ff0224f1d87483650d2c2, https://github.com/spring-projects/spring-framework/commit/d1859c8c861cce15aa14dbe512110569d936386e, https://github.com/spring-projects/spring-framework/commit/940011e233f2882d7f6ddbd40aac3f5d62bf792b  0 votes, 5 watchers","closed","in: core,","spring-projects-issues","2013-05-09T14:23:47Z","2019-01-13T06:59:58Z"
"","15145","AnnotationAwareOrderComparator does not work on proxied classes [SPR-10514]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-10514](https://jira.spring.io/browse/SPR-10514?redirect=false)** and commented  Currently AnnotationAwareOrderComparator does not work on proxied classes because it does not look at the parent class. To resolve this, it would be good to find the Order annotation using AnnotationUtils.findAnnotation  If this is acceptable, I can go ahead and push a fix for this.  ---  **Affects:** 3.2.2  **Issue Links:** - #20609 Annotations on generic interface methods not found by AnnotationUtils  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/814d24e64fb6d1d1233e2b3754c07e336c6775cc, https://github.com/spring-projects/spring-framework/commit/6b89af824dd7b33d2fdcadaab43d6edb7d5f39e8","closed","type: enhancement,","spring-projects-issues","2013-05-03T15:10:20Z","2019-01-11T22:18:00Z"
"","15040","spring-core-sources JAR should include complete ASM, CGLIB, and Objenesis sources [SPR-10407]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-10407](https://jira.spring.io/browse/SPR-10407?redirect=false)** and commented  Now that Spring repacks asm and cglib in it we should include the source files in the spring-core sources to make debugging easier. There may be licensing issues that we need to look into before doing this.  PS: asm does not include debug info, but the best we can do short of recompiling it is include the source files. From the [developer guide](http://asm.ow2.org/doc/developer-guide.html#building):  > Note: by default tests are run with the optimized ASM classes, which do not contain debug info.    ---  **Affects:** 3.2.2","open","in: core,","spring-projects-issues","2013-03-21T15:46:13Z","2019-11-15T12:32:53Z"
"","15038","Consider explicit declaration for AspectJ advice ordering [SPR-10405]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-10405](https://jira.spring.io/browse/SPR-10405?redirect=false)** and commented  ## Summary  The updates in [77c9321](https://github.com/SpringSource/spring-framework/commit/77c93219670a789c7b380c) to resolve #14363 have changed the ordering that advice is applied when using AspectJ annotations with Spring proxy based AOP. The problem is that the [methods are now sorted](https://github.com/SpringSource/spring-framework/commit/77c93219670a789c7b380c#L0R138) based upon the aspect type and the method name.  ## Issue  This generally breaks backward compatibility since advice within the same Aspect use to be determined by the order the JVM returned the methods. As it stands the [Spring AOP reference](http://static.springsource.org/spring-framework/docs/3.2.x/spring-framework-reference/html/aop.html#aop-ataspectj-advice-ordering) states:  > Spring AOP follows the same precedence rules as AspectJ to determine the order of advice execution.  The changes now mean that the actual ordering contradicts [AspectJ's precedence|www.eclipse.org/aspectj/doc/next/progguide/semantics-advice.html#advice-precedence] which states:  > If the two pieces of advice are defined in the same aspect, then there are two cases: >  > * If either are after advice, then the one that appears later in the aspect has precedence over the one that appears earlier. > * Otherwise, then the one that appears earlier in the aspect has precedence over the one that appears later.  ## Considerations  Before reverting this behavior, we should ensure some discussion is had.  One thing to consider is that the order the reflection API's returns the methods is not guaranteed. Prior to Java 7, it had always been implemented that way but was never guaranteed. A concrete example of where we have seen the order of the methods returned differ from the order they were defined is [when using JDK 7 in our unit testing](https://github.com/SpringSource/spring-framework/commit/dfe05305e2de1c68add84ef66b615958744b520a). In short, we cannot rely on the reflection API to return in the methods in the order they were defined in the .java file.  ## Possible Solutions  One possibility is to allow the `@Order` annotation to be specified on the advice methods and use that to override sorting the methods. We would then need to update the documentation to reflect this behavior.  ## Credits  This issue was originally reported by ""Julie Pickhardt"" via email.  ---  **Affects:** 3.2.2  **Issue Links:** - #14363 Sort candidate `@AspectJ` methods deterministically  0 votes, 5 watchers","closed","status: bulk-closed,","spring-projects-issues","2013-03-20T10:54:18Z","2019-01-13T07:00:38Z"
"","14894","Periodic NoClassDefFoundError: FatalBeanException caused by StackOverFlowException [SPR-10261]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-10261](https://jira.spring.io/browse/SPR-10261?redirect=false)** and commented  Despite having consistent Spring versions and ensuring I have spring-core-3.2.1.RELEASE.jar on the classpath, when loading Java Configuration, I occassionally get the following Error:  ``` java.lang.NoClassDefFoundError: org.springframework.beans.FatalBeanException 	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:581) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1029) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:925) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:490) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:461) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:295) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:292) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:626) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:932) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:479) 	at org.springframework.context.annotation.AnnotationConfigApplicationContext.(AnnotationConfigApplicationContext.java:73) 	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) 	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57) 	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) 	at java.lang.reflect.Constructor.newInstance(Constructor.java:525) 	at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:77) 	at org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:71) 	at org.codehaus.groovy.runtime.callsite.ConstructorSite.callConstructor(ConstructorSite.java:42) 	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallConstructor(CallSiteArray.java:54) 	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:182) 	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:190) 	at groovy.groovy.GroovyReturnsSubclassTests.returnsSubclass(GroovyReturnsSubclassTests.groovy:16) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:601) 	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44) 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15) 	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41) 	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:236) 	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50) 	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197) ```  This seems to be associated with a StackOverFlowException where the stack looks something like the following:  ```                                                                                 ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(Object, Method, Object[], MethodProxy) line: 297	                                                                 GroovyReturnsSubclassTests$MyConfig$$EnhancerByCGLIB$$3aca3be8.builder() line: not available	                                                                                                     GroovyReturnsSubclassTests$MyConfig$$EnhancerByCGLIB$$3aca3be8(GroovyReturnsSubclassTests$MyConfig).builder() line: not available	                                                                         GroovyReturnsSubclassTests$MyConfig$$EnhancerByCGLIB$$3aca3be8.CGLIB$builder$6() line: not available	                                                                                                                 GroovyReturnsSubclassTests$MyConfig$$EnhancerByCGLIB$$3aca3be8$$FastClassByCGLIB$$2a4c4776.invoke(int, Object, Object[]) line: not available	                         MethodProxy.invokeSuper(Object, Object[]) line: 228	                                                                                 ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(Object, Method, Object[], MethodProxy) line: 285	                                                                 GroovyReturnsSubclassTests$MyConfig$$EnhancerByCGLIB$$3aca3be8.builder() line: not available	                                                                 NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	                             NativeMethodAccessorImpl.invoke(Object, Object[]) line: 57	                                 DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	             Method.invoke(Object, Object...) line: 601	                                                                                                                                 CglibSubclassingInstantiationStrategy(SimpleInstantiationStrategy).instantiate(RootBeanDefinition, String, BeanFactory, Object, Method, Object[]) line: 160	                                                                     ConstructorResolver.instantiateUsingFactoryMethod(String, RootBeanDefinition, Object[]) line: 570	                                                                                                                 DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).instantiateUsingFactoryMethod(String, RootBeanDefinition, Object[]) line: 1029	                                                                                                     DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).createBeanInstance(String, RootBeanDefinition, Object[]) line: 925	                                                                                                 DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).doCreateBean(String, RootBeanDefinition, Object[]) line: 490	                                                                                             DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).createBean(String, RootBeanDefinition, Object[]) line: 461	                 AbstractBeanFactory$1.getObject() line: 295	                                                                         DefaultListableBeanFactory(DefaultSingletonBeanRegistry).getSingleton(String, ObjectFactory) line: 223	                                                                             DefaultListableBeanFactory(AbstractBeanFactory).doGetBean(String, Class, Object[], boolean) line: 292	                                             DefaultListableBeanFactory(AbstractBeanFactory).getBean(String) line: 194	                                                                                 ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(Object, Method, Object[], MethodProxy) line: 297	                                                                 GroovyReturnsSubclassTests$MyConfig$$EnhancerByCGLIB$$3aca3be8.builder() line: not available	                                                                                                     GroovyReturnsSubclassTests$MyConfig$$EnhancerByCGLIB$$3aca3be8(GroovyReturnsSubclassTests$MyConfig).builder() line: not available	                                                                         GroovyReturnsSubclassTests$MyConfig$$EnhancerByCGLIB$$3aca3be8.CGLIB$builder$6() line: not available	                                                                                                                 GroovyReturnsSubclassTests$MyConfig$$EnhancerByCGLIB$$3aca3be8$$FastClassByCGLIB$$2a4c4776.invoke(int, Object, Object[]) line: not available	                         MethodProxy.invokeSuper(Object, Object[]) line: 228	                                                                                 ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(Object, Method, Object[], MethodProxy) line: 285	                                                                 GroovyReturnsSubclassTests$MyConfig$$EnhancerByCGLIB$$3aca3be8.builder() line: not available	                                                                 NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	                             NativeMethodAccessorImpl.invoke(Object, Object[]) line: 57	                                 DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	             Method.invoke(Object, Object...) line: 601	                                                                                                                                 CglibSubclassingInstantiationStrategy(SimpleInstantiationStrategy).instantiate(RootBeanDefinition, String, BeanFactory, Object, Method, Object[]) line: 160	                                                                     ConstructorResolver.instantiateUsingFactoryMethod(String, RootBeanDefinition, Object[]) line: 570	                                                                                                                 DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).instantiateUsingFactoryMethod(String, RootBeanDefinition, Object[]) line: 1029	                                                                                                     DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).createBeanInstance(String, RootBeanDefinition, Object[]) line: 925	                                                                                                 DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).doCreateBean(String, RootBeanDefinition, Object[]) line: 490	                                                                                             DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).createBean(String, RootBeanDefinition, Object[]) line: 461	                 AbstractBeanFactory$1.getObject() line: 295	                                                                         DefaultListableBeanFactory(DefaultSingletonBeanRegistry).getSingleton(String, ObjectFactory) line: 223	                                                                             DefaultListableBeanFactory(AbstractBeanFactory).doGetBean(String, Class, Object[], boolean) line: 292	                                             DefaultListableBeanFactory(AbstractBeanFactory).getBean(String) line: 194	                                     DefaultListableBeanFactory.preInstantiateSingletons() line: 626	                                                                                                             AnnotationConfigApplicationContext(AbstractApplicationContext).finishBeanFactoryInitialization(ConfigurableListableBeanFactory) line: 932	                                                     AnnotationConfigApplicationContext(AbstractApplicationContext).refresh() line: 479	                                     AnnotationConfigApplicationContext.(Class...) line: 73	                                                                         NativeConstructorAccessorImpl.newInstance0(Constructor, Object[]) line: not available [native method]	                                 NativeConstructorAccessorImpl.newInstance(Object[]) line: 57	                                     DelegatingConstructorAccessorImpl.newInstance(Object[]) line: 45	                     Constructor.newInstance(Object...) line: 525	                 CachedConstructor.invoke(Object[]) line: 77	                             CachedConstructor.doConstructorInvoke(Object[]) line: 71	                             ConstructorSite.callConstructor(Object, Object[]) line: 42	                                             CallSiteArray.defaultCallConstructor(CallSite, Object, Object[]) line: 54	                                 AbstractCallSite.callConstructor(Object, Object[]) line: 182	                             AbstractCallSite.callConstructor(Object, Object) line: 190	                         GroovyReturnsSubclassTests.returnsSubclass() line: 16	                                                                 NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	                             NativeMethodAccessorImpl.invoke(Object, Object[]) line: 57	                                 DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	             Method.invoke(Object, Object...) line: 601	                 FrameworkMethod$1.runReflectiveCall() line: 44	                         FrameworkMethod$1(ReflectiveCallable).run() line: 15	                                 FrameworkMethod.invokeExplosively(Object, Object...) line: 41	     InvokeMethod.evaluate() line: 20	                                         BlockJUnit4ClassRunner.runChild(FrameworkMethod, RunNotifier) line: 76	                                 BlockJUnit4ClassRunner.runChild(Object, RunNotifier) line: 50	 ParentRunner$3.run() line: 193	             ParentRunner$1.schedule(Runnable) line: 52	                                             BlockJUnit4ClassRunner(ParentRunner).runChildren(RunNotifier) line: 191	                                 ParentRunner.access$000(ParentRunner, RunNotifier) line: 42	         ParentRunner$2.evaluate() line: 184	                                     BlockJUnit4ClassRunner(ParentRunner).run(RunNotifier) line: 236	                                             JUnit4TestClassReference(JUnit4TestReference).run(TestExecution) line: 50	                 TestExecution.run(ITestReference[]) line: 38	                                         RemoteTestRunner.runTests(String[], String, TestExecution) line: 467	                     RemoteTestRunner.runTests(TestExecution) line: 683	     RemoteTestRunner.run() line: 390	             RemoteTestRunner.main(String[]) line: 197	 ```  Notice that the following two lines are invoked repeatedly:  ``` ... ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(Object, Method, Object[], MethodProxy) line: 297 ... BeanMethodInterceptor.intercept(Object, Method, Object[], MethodProxy) line: 285 ... ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(Object, Method, Object[], MethodProxy) line: 297 ... BeanMethodInterceptor.intercept(Object, Method, Object[], MethodProxy) line: 285 ```  This seems to occur when ConfigurationClassEnhancer$BeanMethodInterceptor.intercept has a value referring to the superclass for cglibMethodProxy instead of the current class value. For example the following Groovy code:  ``` public class GroovyReturnsSubclassTests {     private AnnotationConfigApplicationContext context;      @Test     public void returnsSubclass() {         context = new AnnotationConfigApplicationContext(MyConfig.class);     }      @Configuration     static class MyConfig extends BaseConfig {         @Bean         public String builder() throws Exception {             return null;         }     }      @Configuration     static abstract class BaseConfig {         public abstract Object builder() throws Exception;     } } ```  Will randomly produce the following values for cglibMethodProxy:  ``` cglibMethodProxy	MethodProxy  (id=57)	 	createInfo	MethodProxy$CreateInfo  (id=88)	 	fastClassInfo	null	 	initLock	Object  (id=97)	 	sig1	Signature  (id=102)	 		desc	""()Ljava/lang/Object;"" (id=115)	 		name	""builder"" (id=74)	 	sig2	Signature  (id=106)	 		desc	""()Ljava/lang/Object;"" (id=115)	 		name	""CGLIB$builder$0"" (id=137)	 ```  This causes an infinite recursion, but the following value for cglibMethodProxy works:  ``` cglibMethodProxy	MethodProxy  (id=57)	 	createInfo	MethodProxy$CreateInfo  (id=88)	 	fastClassInfo	null	 	initLock	Object  (id=96)	 	sig1	Signature  (id=101)	 		desc	""()Ljava/lang/String;"" (id=114)	 		name	""builder"" (id=73)	 	sig2	Signature  (id=103)	 		desc	""()Ljava/lang/String;"" (id=114)	 		name	""CGLIB$builder$6"" (id=135) ```  Additional Notes:  * It appears to only occur with Groovy. It does not seem to happen with Java * If builder() defines the same return type for the sublcass and parent it seems to work * Sometimes it works just fine sometimes it fails with the NoClassDefFoundError: FatalBeanException * A configuration like this might be usefult to do something like this:  ```     @Configuration     static class MyConfig extends BaseConfig {         @Bean         public String builder() throws Exception {             return null;         }     }      @Configuration     static abstract class BaseConfig {         @Bean         public UsesBuilder usesBuilder() {             Object b = builder();             return new UsesBuilder(b);         }         public abstract Object builder() throws Exception;     } ```  * I will post a complete project that demonstrates the issue in the comments  ---  **Affects:** 3.2.1  **Issue Links:** - #16449 Configuration class implementing Provider interface throws StackOverflowError after upgrading to Java 7  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/bd98e5176732e666ea210da484b675fd32501dac, https://github.com/spring-projects/spring-framework-issues/commit/a0e257c2edc7d927017b43f82d48c4b1a3f20301","closed","in: core,","spring-projects-issues","2013-02-05T14:36:44Z","2019-01-11T21:31:57Z"
"","14841","Cleanup whitespace in *.aj and use AspectJ Annotations to prevent NoSuchMethodErrors [SPR-10208]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-10208](https://jira.spring.io/browse/SPR-10208?redirect=false)** and commented  Much of the details can be found on #14811. We need to wait to do this until the annotations are available (i.e. when [aspectj bug 398246](https://bugs.eclipse.org/bugs/show_bug.cgi?id=398246) is closed).  ---  **Issue Links:** - #14811 NoSuchMethodError for Aspects  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2a78b975984c7aee84cb31bb4a29978ae155d9bd, https://github.com/spring-projects/spring-framework/commit/21a49ef4c56b7599a49b085e0d5190ff556a24c9","closed","type: enhancement,","spring-projects-issues","2013-01-22T12:44:39Z","2019-01-11T21:36:36Z"
"","14811","NoSuchMethodError for Aspects [SPR-10178]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-10178](https://jira.spring.io/browse/SPR-10178?redirect=false)** and commented  Due to a [bug found in AspectJ](https://bugs.eclipse.org/bugs/show_bug.cgi?id=398246) (details of why whitespace caused the issue found in thanks to the help of Andy Clement) and the removal of whitespaces within spring-aspects code that has been compiled using previous versions of spring-aspects and try to use spring-aspects-3.2.1.BUILD-SNAPSHOT will get a NoSuchMethodException. An example of one such exception can be found below:  ``` java.lang.NoSuchMethodError: org.springframework.beans.factory.aspectj.AbstractDependencyInjectionAspect.ajc$if$6f1(Lorg/aspectj/lang/JoinPoint;)Z 	at org.springframework.data.jpa.domain.support.AuditingEntityListener.(AuditingEntityListener.java:53) ~[spring-data-jpa-1.1.0.RELEASE.jar:na] 	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) ~[na:1.7.0_06] 	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57) ~[na:1.7.0_06] 	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) ~[na:1.7.0_06] 	at java.lang.reflect.Constructor.newInstance(Constructor.java:525) ~[na:1.7.0_06] 	at java.lang.Class.newInstance0(Class.java:372) ~[na:1.7.0_06] 	at java.lang.Class.newInstance(Class.java:325) ~[na:1.7.0_06] 	at org.hibernate.ejb.event.CallbackResolver.resolveCallback(CallbackResolver.java:162) ~[hibernate-entitymanager-4.1.6.Final.jar:4.1.6.Final] 	at org.hibernate.ejb.event.EntityCallbackHandler.addCallback(EntityCallbackHandler.java:123) ~[hibernate-entitymanager-4.1.6.Final.jar:4.1.6.Final] 	at org.hibernate.ejb.event.EntityCallbackHandler.add(EntityCallbackHandler.java:57) ~[hibernate-entitymanager-4.1.6.Final.jar:4.1.6.Final] 	at org.hibernate.ejb.event.JpaIntegrator.integrate(JpaIntegrator.java:151) ~[hibernate-entitymanager-4.1.6.Final.jar:4.1.6.Final] 	at org.hibernate.internal.SessionFactoryImpl.(SessionFactoryImpl.java:301) ~[hibernate-core-4.1.6.Final.jar:4.1.6.Final] 	at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1746) ~[hibernate-core-4.1.6.Final.jar:4.1.6.Final] 	at org.hibernate.ejb.EntityManagerFactoryImpl.(EntityManagerFactoryImpl.java:94) ~[hibernate-entitymanager-4.1.6.Final.jar:4.1.6.Final] 	at org.hibernate.ejb.Ejb3Configuration.buildEntityManagerFactory(Ejb3Configuration.java:905) ~[hibernate-entitymanager-4.1.6.Final.jar:4.1.6.Final] 	at org.hibernate.ejb.Ejb3Configuration.buildEntityManagerFactory(Ejb3Configuration.java:890) ~[hibernate-entitymanager-4.1.6.Final.jar:4.1.6.Final] 	at org.hibernate.ejb.HibernatePersistence.createContainerEntityManagerFactory(HibernatePersistence.java:74) ~[hibernate-entitymanager-4.1.6.Final.jar:4.1.6.Final] 	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:288) ~[spring-orm-3.2.1.BUILD-SNAPSHOT.jar:3.2.1.BUILD-SNAPSHOT] 	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:310) ~[spring-orm-3.2.1.BUILD-SNAPSHOT.jar:3.2.1.BUILD-SNAPSHOT] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1545) ~[spring-beans-3.2.1.BUILD-SNAPSHOT.jar:3.2.1.BUILD-SNAPSHOT] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1483) ~[spring-beans-3.2.1.BUILD-SNAPSHOT.jar:3.2.1.BUILD-SNAPSHOT] 	... 58 common frames omitted ```  Until the bug is resolved, we should leave the whitespaces the same in the *.aj files of spring-aspects.  ---  **Affects:** 3.2.1  **Issue Links:** - #14841 Cleanup whitespace in *.aj and use AspectJ Annotations to prevent NoSuchMethodErrors  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6888a6f2867d6264fce832d8ae00205988ed5a94","closed","in: core,","spring-projects-issues","2013-01-15T14:51:45Z","2019-01-11T21:30:41Z"
"","14794","spring-aspects is compiled with JDK 1.7 compatibility [SPR-10161]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-10161](https://jira.spring.io/browse/SPR-10161?redirect=false)** and commented  This issue was originally reported by David Winterfeldt.  ``` [org.springframework.beans.factory.aspectj.AnnotationBeanConfigurerAspect] for bean with name 'org.springframework.context.config.internalBeanConfigurerAspect' defined in null: problem with class file or dependent class; nested exception is java.lang.UnsupportedClassVersionError: org/springframework/beans/factory/aspectj/AnnotationBeanConfigurerAspect : Unsupported major.minor version 51.0 ```  This is only happening in the 3.2.1.BUILD-SNAPSHOT and 3.3.0.BUILD-SNAPSHOT versions. Details below:  The issue is due to the fact that aspects.gradle overrides the compileJava task. It does not appear that this was an issue in the 3.2.0.RELEASE since we had the following  ``` configure(allprojects) {     sourceCompatibility=1.5     targetCompatibility=1.5 } ```  Updates to remove Gradle warnings have modified it to look like:  ``` configure(allprojects) {     compileJava {         sourceCompatibility=1.5         targetCompatibility=1.5     } } ```  Which means the Gradle conventions object is not being updated and that the default JDK is the current JDK. This means when aspects.gradle version of compileJava executes it is using JDK 7 to compile the spring-aspects.gradle project.   ---  **Affects:** 3.2.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/91da1383143bc15f945935960a79bc253bd1ce16","closed","type: bug,","spring-projects-issues","2013-01-10T12:49:07Z","2013-01-24T01:58:05Z"
"","14693","JRubyScriptFactory leaves MBean's registered [SPR-10060]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-10060](https://jira.spring.io/browse/SPR-10060?redirect=false)** and commented  Part of the issue with #13926 is that the JRubyScriptFactory leaves MBeans registered when the ApplicationContext is shutdown. This causes memory leaks in applications using JRubyScriptFactory. A few things to mention:  * AdvisedJRubyScriptFactoryTests does not close the ApplicationContext which could lead to this issue. However, closing the ApplicationContext does not fix the problem. * JRubyScriptFactory uses JRubyScriptUtils.createJRubyObject which creates a new Ruby object in a private scope. However, Ruby.tearDown() is never invoked nor is it able to be invoked since it is of private scope to JRubyScriptUtils * When I modified JRubyScriptFactory to invoke Ruby.tearDown() it did not appear to remove all the MBeans. * We may want to consider updating to JRuby 1.7 to see if that fixes the memory leak  ---  **Affects:** 3.2 RC2","closed","status: bulk-closed,","spring-projects-issues","2012-11-29T12:43:37Z","2019-01-12T00:25:12Z"
"","14723","Exception when using @ResponseEntity on @ExceptionHandler method [SPR-10090]","**[Rick Mann](https://jira.spring.io/secure/ViewProfile.jspa?name=jetforme)** opened **[SPR-10090](https://jira.spring.io/browse/SPR-10090?redirect=false)** and commented  This is a duplicate of bug #12293 and #11358. #12293 is marked as resolved, claiming the issue has been addressed, but it is not. I am trying to do exactly this, and I get the following exception:  ``` 00:50:42.949 ERROR annotation.AnnotationMethodHandlerExceptionResolver (AnnotationMethodHandlerExceptionResolver.java:147) Invoking request method resulted in exception : public org.springframework.http.ResponseEntity com.latencyzero.gamecenter.web.ServiceController.handleException(java.lang.Exception) java.lang.IllegalArgumentException: Invalid handler method return value:  	at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver.getModelAndView(AnnotationMethodHandlerExceptionResolver.java:414) 	at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver.doResolveException(AnnotationMethodHandlerExceptionResolver.java:144) 	at org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:136) 	at org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1148) 	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:985) 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:939) 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:856) 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:917) 	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:813) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:120) 	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:798) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:97) ```  My handler is declared as follows:  ``` @ExceptionHandler(org.springframework.web.bind.MissingServletRequestParameterException.class) public ResponseEntity handleException(org.springframework.web.bind.MissingServletRequestParameterException inEx) {     ... } ```  According to the [3.2.0.RC2 docs](http://static.springsource.org/spring/docs/3.2.0.RC2/javadoc-api/org/springframework/web/bind/annotation/ExceptionHandler.html), it is now acceptable. But the code seems to handle all cases except ResponseEntity: https://github.com/SpringSource/spring-framework/blob/master/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerExceptionResolver.java#L376  ---  **Affects:** 3.2 RC2  **Attachments:** - [AnnotationMethodHandlerExceptionResolver.java](https://jira.spring.io/secure/attachment/20803/AnnotationMethodHandlerExceptionResolver.java) (_20.74 kB_)","closed","status: declined,","spring-projects-issues","2012-12-12T00:58:37Z","2019-01-12T16:24:43Z"
"","14720","Spring MVC Test support for expectations on multivalue response headers [SPR-10087]","**[Rick Mann](https://jira.spring.io/secure/ViewProfile.jspa?name=jetforme)** opened **[SPR-10087](https://jira.spring.io/browse/SPR-10087?redirect=false)** and commented  I'm not sure if the problem lies in the -test-mvc or -webmvc (or both).  In my webapp I build an HTTP response by calling HttpHeaders.add() twice with the same header and two different values. The resulting response on the wire contains this:  Vary: foo Vary: bar  HTTP/1.1 allows this, but requires that it be possible to combine them into a single header field:  Vary: foo, bar  Unfortunately, the HeaderResultMatcher does not take the possibility of multiple headers into consideration when testing for the presence of a header:  https://github.com/SpringSource/spring-test-mvc/blob/master/src/main/java/org/springframework/test/web/server/result/HeaderResultMatchers.java  Line 49 should call getHeaders() and iterate through all the available results.  Alternatively, if ResponseEntity and HttpHeaders collaborated to combine multiple headers with the same name onto a single line, then a containsString() test would be sufficient to work around this problem.   ---  **Affects:** 3.2 RC2, 4.2.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/952a3170e6615f69792d34e246bd2794df820b2c","closed","type: enhancement,","spring-projects-issues","2012-12-09T03:30:01Z","2016-04-06T08:38:10Z"
"","15204","Spring MVC 3 JSON POST failure to handle advanced JSR 303 Group Constraints - 415 Unsupported Media Type [SPR-10575]","**[Richard Seldon](https://jira.spring.io/secure/ViewProfile.jspa?name=arcseldon@hotmail.com)** opened **[SPR-10575](https://jira.spring.io/browse/SPR-10575?redirect=false)** and commented  Created a Wizard form flow using Spring 3 MVC Controller (annotations driven). The wizard has basically 4 steps.  Created a Command Object and declared the following Group Constraints (JSR303 Validation) inside the Command Object:  ```java public interface WizardLifeCycleStep extends Default {}   public interface WizardLifeCycleStep1 extends WizardLifeCycleStep {}  public interface WizardLifeCycleStep2 extends WizardLifeCycleStep {}  public interface WizardLifeCycleStep3 extends WizardLifeCycleStep {}  public interface WizardLifeCycleStep4 extends WizardLifeCycleStep {}  private Class","closed","status: bulk-closed,","spring-projects-issues","2013-05-20T06:31:12Z","2019-01-12T03:42:19Z"
"","15183","RequestBody is unable to bind (merge) JSON formatted POST form data to existing Command Object [SPR-10552]","**[Richard Seldon](https://jira.spring.io/secure/ViewProfile.jspa?name=arcseldon@hotmail.com)** opened **[SPR-10552](https://jira.spring.io/browse/SPR-10552?redirect=false)** and commented  Please also see my own StackOverflow question on this:  http://stackoverflow.com/questions/16473727/spring-3-ajax-post-request-with-requestbody-and-modelattribute-and-sessionatt  In summary, wish to bind JSON request form data to an existing Command Object (so data is merged) with the JSON form POST data being merged (overwriting) those attributes of a superset of data already populated into Command object prior to Form presentation on view. The links above should provide sufficient illustration of the problem.  It seems that `@RequestBody` is capable of using Jackson JSON converter to populate a new Command Object (which may have nested objects) with the form data, but unable to leverage `@ModelAttribute` to automatically write the attribute values into an existing Command object (either stored in session or retrieved again using `@ModelAttribute` at the method declaration level.  This is a severe limitation for anyone wishing to use the Spring MVC framework and have full support for Form submissions with JSON request and response types.    ---  **Affects:** 3.2.2  **Reference URL:** http://stackoverflow.com/questions/15124858/spring-partial-update-object-data-binding  8 votes, 6 watchers","closed","status: bulk-closed,","spring-projects-issues","2013-05-12T01:35:41Z","2019-01-12T03:42:26Z"
"","14912","Spring mvc list binding not working with version 3.0.7 [SPR-10278]","**[reda abdi](https://jira.spring.io/secure/ViewProfile.jspa?name=reda)** opened **[SPR-10278](https://jira.spring.io/browse/SPR-10278?redirect=false)** and commented  Hi,  List binding is not working. Here is an example:  The model  public class UserForm implements Serializable {      private List bookCollection = new AutoPopulatingList(Book.class);               //Getters, Setters  }  The controller:  public String doPost(`@ModelAttribute` UserForm userForm){ //... }  The jsp  <form>  <input type=""text"" name=""bookCollection[0].title"" value=""Java Persistence with Hibernate"" />  </form>  When debugging, I see that the bookCollection is empty.   ---  **Affects:** 3.0.7","closed","status: invalid,","spring-projects-issues","2013-02-09T09:59:16Z","2019-01-12T05:27:24Z"
"","15455","spring-jms 3.0.4 introduces a change that breaks using JMSTemplate (and for that matter any JMS resource) with Oracle AQ when JMS Session are used in SESSION_TRANSACTED mode. [SPR-10829]","**[Ravi Sanwal](https://jira.spring.io/secure/ViewProfile.jspa?name=rsanwal)** opened **[SPR-10829](https://jira.spring.io/browse/SPR-10829?redirect=false)** and commented  Actually the problem just surfaced after the IllegalStateException from JMSResourceHolder.commitAll was thrown out instead of being swallowed. (See the linked ticket for details)  In my use case we are using OracleAQ with JMS libraries, (high level operations done using spring-jms). We jave JPA transaction manager doing transaction management for us. In a sample transaction we insert/update/delete some JPA entities, and in the same transaction we also push some messages to an Oracle queue.  Now, it is a requirement for us to ensure that the DML and the message production are atomic, hence they are made to use the same underlying oracle connection (read, using spring-data-oracle convenience xml namespace).  To achieve this we have to use a transacted connection factory, and the JMS template that is used to push messages has to be made ""sessionTransacted"", this is done to avoid the JMSTemplate.send to commit the messages before the enclosing spring transaction commits. (In summary, JMSTemplate.send eventually reaches, session.commit or something alike that commits the underlying jdbc connection, thus, committing the normal DML operation as well).  This is a typical use case. And everything works fine with spring-jms 3.0.2 ( and also with 3.0.3), and it works ""by accident"". By accident because, when eventually then enclosing spring (JPA) transaction commits, the transactional JMSResourceHolder also tries to commit the underlying JMS resources (triggered by transaction synchronization), which fails because for Oracle AQ, as soon as the underlying JDBC connection gets committed by the JPA transaction manager, all JMS resource are also committed and closed, so this JMSResourceHolder commit operation fails (something on the lines of IllegalStateException because session/consumer/producer is already closed). Again as mentioned in the beginning swallowing the IllegalStateException there saves us.  In spring-jms 3.0.4 as the linked ticket provides details, this behavior was fixed, which broke things for Oracle AQ.  I agree that swallowing that exception is not the proper fix here, but there is no way to instruct the JMS transaction framework to ""not synchronize"" JMS resources in case of Oracle AQ. The decision to synchronize JMS resources is done based on the sessionTransacted flag (this is for JMSTemplate, but the logic is more or less similar everywhere else), which unfortunately has to be set true to avoid committing by JMS framework.  I believe sessionTransacted and transaction synchronization should be dealt separately. The reason I believe this logic exists is because unlike JDBC resources, there could be more than one JMS resource bound to a single transaction, so at the end all of these resources have to be synchronize with the transaction. But there may be cases where we don't want this behavior, as in my case.  ---  **Affects:** 3.0.4  **Issue Links:** - #12018 JmsResourceHolder.commit should not ignores IllegalStateException - #16412 SPR-10829: Spring JMS problem with Oracle AQ still exists if underlying DataSource is decorated  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/26e697b60cf987c331a299377dc6ea6122aa8a4d, https://github.com/spring-projects/spring-framework/commit/11d20e337d0bbd799776893c737f9d546b736be1","closed","type: bug,","spring-projects-issues","2013-08-13T00:02:17Z","2019-01-11T22:05:06Z"
"","14725","DMLC: JMS resources are never cleared under certain conditions [SPR-10092]","**[Raul Kripalani](https://jira.spring.io/secure/ViewProfile.jspa?name=raulk)** opened **[SPR-10092](https://jira.spring.io/browse/SPR-10092?redirect=false)** and commented  JMS Resources (Sessions & MessageConsumers) associated with a AsyncMessageListenerInvoker are never closed and disposed if:  - you're using a defined maxMessagesPerTask, i.e. >= 0 - you first stop the DMLC and then destroy it  This is what happens:  - the call to stop() sets running = false - invokers whose receiveTimeout elapses will notice this, but because AbstractJmsListeningContainer.active is still = true, they will pause (see logic in AbstractJmsListeningContainer#rescheduleTaskIfNecessary) - when you call destroy(), the pausedTasks are never dealt with, so they remain holding the JMS resources forever.  To reproduce easily, set a very low receiveTimeout, e.g. 10 ms.  This is a dangerous bug. Not only does it provoke a memory leak at both the client and the broker, but the broker can keep delivering messages to the client because the underlying MessageConsumer is left open forever.   ---  **Affects:** 3.0.7  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cc11b811ea02f6ef85558915d09b22aaa4d23ad1, https://github.com/spring-projects/spring-framework/commit/6b3284f6b00b170c747a900033dbad6748cfd503  **Backported to:** [3.1.4](https://github.com/spring-projects/spring-framework/milestone/83?closed=1)","closed","type: bug,","spring-projects-issues","2012-12-12T11:09:56Z","2012-12-16T10:04:59Z"
"","15476","FormattingConversionService throws IllegalStateException if a parser returns null [SPR-10849]","**[Rand McNeely](https://jira.spring.io/secure/ViewProfile.jspa?name=loosebits)** opened **[SPR-10849](https://jira.spring.io/browse/SPR-10849?redirect=false)** and commented  FormattingConversionService.ParserConverter.convert checks if source is blank/null.  If not, it invokes the appropriate parser.  If the parser throws a ParseException, this correctly results in a bind error.  However, if the parser returns null for a non-empty String, this also results in a bind error.  We have a legitimate use case where we want to translate a specific value to null (this is dealing with placeholder issues in IE/jQuery where jQuery submits the placeholder value in serialized forms to ajax posts).  The contract with the parsers is they are to throw a ParseException if they are unable to parse the input.  If this route is already available, why artificially interpret null return values as ParseExceptions as well (the result in Spring MVC is the same)?   ---  **Affects:** 3.1.1","closed","status: bulk-closed,","spring-projects-issues","2013-08-20T19:37:49Z","2019-01-12T02:32:53Z"
"","15435","MediaType does not add spaces for parameters [SPR-10809]","**[Ramiro Aparicio](https://jira.spring.io/secure/ViewProfile.jspa?name=frisco)** opened **[SPR-10809](https://jira.spring.io/browse/SPR-10809?redirect=false)** and commented  Even when http://tools.ietf.org/html/rfc2616#section-3.7 does not talk about spaces between parameters, they are being used for boundaries on multipart requests (in FormHttpMessageConverter) and http://tools.ietf.org/html/rfc2046#section-5.1.1 examples makes very clear that spaces should be added before every parameter.  I am not sure what servers will understand correctly the headers as they are now but I am having trouble with an ""Apache/2.2.15 (Scientific Linux)"" server managed by box.com   ---  **Affects:** 3.2.3  **Attachments:** - [client.dump](https://jira.spring.io/secure/attachment/21327/client.dump) (_36.35 kB_) - [client-faking.dump](https://jira.spring.io/secure/attachment/21328/client-faking.dump) (_36.40 kB_) - [template-customResource.dump](https://jira.spring.io/secure/attachment/21329/template-customResource.dump) (_36.41 kB_) - [template-space.dump](https://jira.spring.io/secure/attachment/21330/template-space.dump) (_36.34 kB_) - [template-spaces-nolength.dump](https://jira.spring.io/secure/attachment/21331/template-spaces-nolength.dump) (_36.32 kB_) - [template-spaces-nolength-customResource.dump](https://jira.spring.io/secure/attachment/21332/template-spaces-nolength-customResource.dump) (_36.41 kB_)","closed","status: bulk-closed,","spring-projects-issues","2013-08-06T02:47:22Z","2019-01-12T02:33:11Z"
"","15420","SRVE0014E: Uncaught service() exception root cause Spring MVC Dispatcher Servlet: org.springframework.web.util.NestedServletException: Handler processing failed; nested exception is java.lang.StackOverflowError [SPR-10794]","**[ramesh e](https://jira.spring.io/secure/ViewProfile.jspa?name=rameshwas8.0)** opened **[SPR-10794](https://jira.spring.io/browse/SPR-10794?redirect=false)** and commented  [7/29/13 16:02:26:701 CEST] 00000022 servlet       E com.ibm.ws.webcontainer.servlet.ServletWrapper service SRVE0014E: Uncaught service() exception root cause Spring MVC Dispatcher Servlet: org.springframework.web.util.NestedServletException: Handler processing failed; nested exception is java.lang.StackOverflowError at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:920) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:809) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:571) at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:501) at javax.servlet.http.HttpServlet.service(HttpServlet.java:575) at javax.servlet.http.HttpServlet.service(HttpServlet.java:668) at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1225) at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:775) at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:457) at com.ibm.ws.webcontainer.servlet.ServletWrapperImpl.handleRequest(ServletWrapperImpl.java:178) at com.ibm.ws.webcontainer.filter.WebAppFilterChain.invokeTarget(WebAppFilterChain.java:136) at com.ibm.ws.webcontainer.filter.WebAppFilterChain.doFilter(WebAppFilterChain.java:97) at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:96) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) at com.ibm.ws.webcontainer.filter.FilterInstanceWrapper.doFilter(FilterInstanceWrapper.java:195) at com.ibm.ws.webcontainer.filter.WebAppFilterChain.doFilter(WebAppFilterChain.java:91) at com.ibm.ws.webcontainer.filter.WebAppFilterManager.doFilter(WebAppFilterManager.java:928) at com.ibm.ws.webcontainer.filter.WebAppFilterManager.invokeFilters(WebAppFilterManager.java:1025) at com.ibm.ws.webcontainer.webapp.WebApp.handleRequest(WebApp.java:3763) at com.ibm.ws.webcontainer.webapp.WebGroup.handleRequest(WebGroup.java:304) at com.ibm.ws.webcontainer.WebContainer.handleRequest(WebContainer.java:975) at com.ibm.ws.webcontainer.WSWebContainer.handleRequest(WSWebContainer.java:1662) at com.ibm.ws.webcontainer.channel.WCChannelLink.ready(WCChannelLink.java:195) at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.handleDiscrimination(HttpInboundLink.java:453) at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.handleNewRequest(HttpInboundLink.java:515) at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.processRequest(HttpInboundLink.java:306)  ---  **Issue Links:** - #15427  SRVE0014E: Uncaught service() exception root cause Spring MVC Dispatcher Servlet (_**""is duplicated by""**_)","closed","in: web,","spring-projects-issues","2013-07-30T04:48:20Z","2019-01-11T22:02:50Z"
"","15050","Collection selection and the use of #this [SPR-10417]","**[Ram Chidambaram](https://jira.spring.io/secure/ViewProfile.jspa?name=ram_2000)** opened **[SPR-10417](https://jira.spring.io/browse/SPR-10417?redirect=false)** and commented  I have 2 lists containing strings and i would like to check if an item in one list is contained in another. I tried this using the Collection selection.  list1 contains values ""a"", ""b"", ""x"" list 2 contains values ""c"", ""x""  ``` #list1.?\[#list2.contains(#this)\] ```  The expected result is a list with ""x"". But I just get an empty result.  I'm expecting the #this inside the collection selection would point to the current iteration item. Is this not the case ?  ---  **Affects:** 3.1.2  **Issue Links:** - #16651 SpEL Collection Selection: ""selectionExpression"" with method invocation pushes root object as active context instead of current item - #17647 In SPEL projection expression,  #this as the same value as #root  0 votes, 5 watchers","closed","in: core,","spring-projects-issues","2013-03-25T10:23:11Z","2019-01-11T21:16:57Z"
"","14915","Select/Option(s) tags should use  toString() method for Enum [SPR-10281]","**[Ram Chidambaram](https://jira.spring.io/secure/ViewProfile.jspa?name=ram_2000)** opened **[SPR-10281](https://jira.spring.io/browse/SPR-10281?redirect=false)** and commented  According to Scott Andrews comment on issue #3389(https://jira.springsource.org/browse/SPR-3389), toString() method should be used for Enums. But looks like the .name() is used for both value and label.  The work around is to add a separate get method for the label and use the 'itemLabel' on the tag.  Also, would be good to show how to implement i18n for options label in the spring documentation.   ---  **Affects:** 3.1.2  **Reference URL:** http://stackoverflow.com/questions/11636289/updating-spring-from-3-0-x-to-3-1-2-causes-form-select-box-to-not-display-list-t","closed","status: bulk-closed,","spring-projects-issues","2013-02-10T14:14:24Z","2019-01-12T02:34:48Z"
"","15265","Test [SPR-10637]","**[Rahim Kanjiyani](https://jira.spring.io/secure/ViewProfile.jspa?name=rahimkanjiyani@hotmail.com)** opened **[SPR-10637](https://jira.spring.io/browse/SPR-10637?redirect=false)** and commented   ---  **Referenced from:** pull request Https://Google.com","closed","in: core,","spring-projects-issues","2013-06-07T22:45:39Z","2019-01-12T05:26:53Z"
"","15478","SQLExceptionTranslator should not appear in exception stack trace [SPR-10851]","**[Rafael Winterhalter](https://jira.spring.io/secure/ViewProfile.jspa?name=raphw)** opened **[SPR-10851](https://jira.spring.io/browse/SPR-10851?redirect=false)** and commented  Removed error-irrelevant translation stack frames from exception stack trace after exceptions were created by an SQLExceptionTranslator:  When debugging Spring-JDBC queries, I find it distracting that the top stack frames always refer to SQLExceptionTranslator which is only called after an error occured that caused the exception. The translator only translates a ""raw"" exception into a richer exception. Therefore, I suggest that these stack entries are removed before the enriched exception is rethrown by the JdbcTemplate.  It is a detail, but I believe the exception stack trace should not get polluted with details that merely reflect an implementation detail. This can also distract a user that tries debugging his/her application and who does not know how the exception handling is implemented in Spring.  An example of how the stack trace looks like when using an invalid SQL statement within JdbcTemplate:  ``` org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [This is not valid SQL]; nested exception is java.sql.SQLException: ORA-00900: invalid SQL statement 	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:233) 	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72) 	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:603) 	at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:637) 	at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:666) 	at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:674) 	at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:714) 	at com.example.Main.main(Main.java:17) Caused by: java.sql.SQLException: ORA-00900: invalid SQL statement ```  With the patch the stack trace would look like:  ``` org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [This is not valid SQL]; nested exception is java.sql.SQLException: ORA-00900: invalid SQL statement 	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:614) 	at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:637) 	at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:666) 	at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:674) 	at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:714) 	at com.example.Main.main(Main.java:17) Caused by: java.sql.SQLException: ORA-00900: invalid SQL statement ```  In this example, the exception is catched withing JdbcTemplate.execute, wrapped by an instance of SQLErrorCodeSQLExceptionTranslator and then rethrown. Since the SQLErrorCodeSQLExceptionTranslator is responsible for instantiating the wrapping exception, the exception's stack trace is pointing to the translator since Exception.fillInStackTrace is called in the exception's constructor (this is the default implementation of a Java exception.)   ---  **Reference URL:** https://github.com/SpringSource/spring-framework/pull/341","closed","status: bulk-closed,","spring-projects-issues","2013-08-21T06:56:01Z","2019-01-12T02:32:51Z"
"","14751","add method setClassLoader to ClassPathResource [SPR-10118]","**[Radim Kolar](https://jira.spring.io/secure/ViewProfile.jspa?name=hsn)** opened **[SPR-10118](https://jira.spring.io/browse/SPR-10118?redirect=false)** and commented  Please add method setClassLoader to ClassPathResource.  I am creating ClassPathResource as bean in xml configuration file.  I would like to have ability to use BeanPostProcessor to fix classloader for created resource objects. Currently, only way to change classloader for Resource object is in constructor.   ---  **Affects:** 3.2 GA","closed","status: bulk-closed,","spring-projects-issues","2012-12-23T09:34:24Z","2019-01-12T02:35:33Z"
"","15523","Combination of @PreAuthorize and ApplicationContextAware prevents loading the Controller [SPR-10895]","**[R](https://jira.spring.io/secure/ViewProfile.jspa?name=raginggoblin)** opened **[SPR-10895](https://jira.spring.io/browse/SPR-10895?redirect=false)** and commented  When a `@Controller` has methods annotated with `@PreAuthorize` and implements ApplicationContextAware, Spring will not map the methods from the controller.   --- No further details from [SPR-10895](https://jira.spring.io/browse/SPR-10895?redirect=false)","closed","status: declined,","spring-projects-issues","2013-09-04T06:37:55Z","2019-01-12T16:35:57Z"
"","14758","SpEL support for static finals on interfaces [SPR-10125]","**[Przemek Dyk](https://jira.spring.io/secure/ViewProfile.jspa?name=przemek_dyk)** opened **[SPR-10125](https://jira.spring.io/browse/SPR-10125?redirect=false)** and commented  Expression evaluator fails with ""_org.springframework.expression.spel.SpelEvaluationException: EL1008E: Field or property cannot be found_"" when static field is defined in interface implemented by abstract class extended by my classes. Bean definition order is also important.  I believe it is minimal class hierarchy required to reproduce this bug, but it's a little bit complicated, so I've created a project at GitHub to demonstrate: https://github.com/SpringSource/spring-framework-issues/pull/42  ---  **Affects:** 3.0.2  **Reference URL:** https://github.com/SpringSource/spring-framework-issues/pull/42  **Sub-tasks:** - #14807 Backport ""SpEL support for static finals on interfaces""  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/e7c0a3ff5d65614341fb231eedd8d2b3a3eb313f, https://github.com/spring-projects/spring-framework-issues/commit/bc05400b1eb25c814e1530e760b97fc9157c4fc8  **Backported to:** [3.1.4](https://github.com/spring-projects/spring-framework/milestone/83?closed=1)","closed","in: core,","spring-projects-issues","2012-12-28T03:56:11Z","2019-01-11T21:24:39Z"
"","15012","Spring MVC Test throws 500 error when no accept header is present [SPR-10379]","**[Preston Crawford](https://jira.spring.io/secure/ViewProfile.jspa?name=prestoncrawford)** opened **[SPR-10379](https://jira.spring.io/browse/SPR-10379?redirect=false)** and commented  We're using Spring MVC Test (the version rolled into 3.2) extensively where I work. Currently we're experiencing an issue where a REST service that's not passed an Accept header will default to a serializer for CURL calls and other client calls. In our integration tests, however, we get a 500 error instead.  This is an example test call we have.  ``` final MvcResult result = context.perform(get(ourRestURL))   .andExpect(status().isOk())   .andExpect(content().string(containsString(expectedResult)))   .andReturn(); ```  This results in the following. Debugging this in the IDE it doesn't even fall into the REST method being referenced.  ``` java.lang.AssertionError: Status expected: but was:     at org.springframework.test.util.AssertionErrors.fail(AssertionErrors.java:60)     at org.springframework.test.util.AssertionErrors.assertEquals(AssertionErrors.java:89)     at org.springframework.test.web.servlet.result.StatusResultMatchers$5.match(StatusResultMatchers.java:549)     at org.springframework.test.web.servlet.MockMvc$1.andExpect(MockMvc.java:141) ```  This is the definition of the REST endpoint.  ``` @RequestMapping(value = ""/v1/keys/{keyName}"", method = RequestMethod.GET, produces = { ""application/json"" }) @ResponseBody public GenericKey getKey(@RequestHeader(""Accept"") final String acceptHeader,                          @PathVariable(""keyName"") final String keyName,                          @RequestParam(value = ""callback"", required = false) final String callback) {  // ... } ```    ---  **Affects:** 3.2.1","closed","status: declined,","spring-projects-issues","2013-03-14T13:28:06Z","2019-01-12T16:24:15Z"
"","14880","Spring LTW does not work with websphere multiple class loader [SPR-10247]","**[Prakash Rao](https://jira.spring.io/secure/ViewProfile.jspa?name=prao81)** opened **[SPR-10247](https://jira.spring.io/browse/SPR-10247?redirect=false)** and commented  I am trying to get aspectj ltw working in my app.  My app is structured like below  Test - TestCommon - TestPersistence - TestWeb  where Test is the base EAR project.  I have created a simple logging aspect and placed it in TestCommon. The aop.xml has been placed in TestCommon/Meta-Inf folder.  The problem is with the class loading policy of the app. By default the war class loader policy is set to module and the dependent projects are added in the manifest of the web project. if war class loader mode is module the LTW doesnt seem to work i.e the aspect is ignored by the app class loader while the web class loader recognizes the aspect and does the weaving of the clases within the web-app , but with this setting weaving of the dependent projects never happens.  But if I change the war class loader policy to Application, then everything works fine.  What I understand is with module setting , there are 2 class loaders, one for the application and one for the war. In this case the war classes are not recognized. If I move the aop.xml to the web folder , then my other classes in the other projects like TestCommon and TestPersistence are not weaved.  My spring application-context has the line   The output from aspectj is  [31/01/13 16:02:48:188 GMT+05:30] 000008a7 SystemErr R [CompoundClassLoader@77b971b] info AspectJ Weaver Version 1.6.9 built on Monday Jul 5, 2010 at 15:28:35 GMT [31/01/13 16:02:48:188 GMT+05:30] 000008a7 SystemErr R [CompoundClassLoader@77b971b] info register classloader com.ibm.ws.classloader.CompoundClassLoader@77b971b [31/01/13 16:02:48:188 GMT+05:30] 000008a7 SystemErr R [CompoundClassLoader@77b971b] info using configuration /C:/Workspaces/Test_Workspace/TestCommon/bin/META-INF/aop.xml [31/01/13 16:02:49:204 GMT+05:30] 000008a7 SystemErr R [CompoundClassLoader@77b971b] info register aspect com.test.aspect.GenericLoggingAspect [31/01/13 16:02:49:344 GMT+05:30] 000008a7 SystemErr R [CompoundClassLoader@77b971b] debug not weaving 'org.springframework.instrument.classloading.websp here.WebSphereClassPreDefinePlugin$Dummy'  [31/01/13 16:03:48:845 GMT+05:30] 000008a7 SystemErr R [CompoundClassLoader@77b9823] info AspectJ Weaver Version 1.6.9 built on Monday Jul 5, 2010 at 15:28:35 GMT [31/01/13 16:03:48:845 GMT+05:30] 000008a7 SystemErr R [CompoundClassLoader@77b9823] info register classloader com.ibm.ws.classloader.CompoundClassLoader@77b9823 [31/01/13 16:03:48:845 GMT+05:30] 000008a7 SystemErr R [CompoundClassLoader@77b9823] info using configuration /C:/Workspaces/Test_Workspace/TestCommon/bin/META-INF/aop.xml [31/01/13 16:03:48:861 GMT+05:30] 000008a7 SystemErr R [CompoundClassLoader@77b9823] info register aspect com.test.aspect.GenericLoggingAspect [31/01/13 16:03:48:876 GMT+05:30] 000008a7 SystemErr R [CompoundClassLoader@77b9823] debug weaving 'com.test.web.controllers.base.BaseController' [31/01/13 16:03:49:486 GMT+05:30] 000008a7 SystemErr R [CompoundClassLoader@77b9823] weaveinfo Join point 'method-execution(java.lang.String com.test.web.controllers.base.BaseController.forwa rd(com.test.web.navigation.Navigator, java.lang.String, java.lang.String))' in Type 'com.test.web.controllers.base.BaseController' (BaseController.java:45) advised by before advice from 'com.test.aspect.GenericLoggingAspect' (GenericLoggingAspect.java)  If you look at this there are 2 class loaders the first being the app class loader and the second being the war class loader. The war class loader seems to be doing the weaving correctly but the app class loader though it kicks off does not do anything. Does it have anything to do with the fact that spring is doing the LTW and possibly the weaver instance is being overwritten by the second class loader?  I cannot change the war class loader policy to application since this is an org wide setting managed through a build process.    ---  **Affects:** 3.1 GA  **Reference URL:** http://forum.springsource.org/showthread.php?134457-AspectJ-LTW-issue","closed","status: bulk-closed,","spring-projects-issues","2013-01-31T03:12:43Z","2019-01-12T02:35:02Z"
"","15323","Spring MVC reports 404 while MockMvc reports 200 response code [SPR-10695]","**[Piotr Turski](https://jira.spring.io/secure/ViewProfile.jspa?name=piotr.turski)** opened **[SPR-10695](https://jira.spring.io/browse/SPR-10695?redirect=false)** and commented  #### Overview  #12029 describes some strange Spring MVC behavior; however, no matter what the desired behavior of Spring MVC is in production, the Spring MVC Test framework should behave exactly the same way.  #### Status Quo  Currently, a void method without `@ResponseStatus` or `HttpServletResponse` as a method argument causes a running Servlet container to return a 404 response code; whereas, tests with `MockMvc` for the same controller method result in a response code of 200.  #### Deliverables  1. Ensure that Spring MVC and the Spring MVC Test framework return the same response code for the described use case.  ---  **Affects:** 3.2.3  **Issue Links:** - #12029 void method in MVC controller that is not annotated with `@ResponseStatus` and does not take a HttpServletResponse as parameter results in misleading 404","closed","status: declined,","spring-projects-issues","2013-06-26T08:56:14Z","2019-01-13T06:59:09Z"
"","15141","Add ability to check that attribute does not exist in Spring MVC test framework [SPR-10509]","**[Piotr Jagielski](https://jira.spring.io/secure/ViewProfile.jspa?name=pioter)** opened **[SPR-10509](https://jira.spring.io/browse/SPR-10509?redirect=false)** and commented  It would be useful to have the ability to check that an attribute does not exist in the Spring MVC test framework.  Currently `ModelResultMatchers` has a method `attributeExists()`. I propose adding a new method `attributeDoesNotExist()`.  Alternatively, `expect(model().attribute(""attribute"", null))` should pass when the attribute is not available, but it currently fails with a `NullPointerException` instead.   ---  **Affects:** 3.2.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/98da5a7b2ba9af4415bbbaaf5a296bbb278d31e3, https://github.com/spring-projects/spring-framework/commit/909577082d7e4a74780bf32bf0c54a1370c76b1f  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2013-05-02T07:55:01Z","2013-08-06T18:35:05Z"
"","14800","Spring MVC Test Framework ignores custom formatter [SPR-10167]","**[Piotr Jagielski](https://jira.spring.io/secure/ViewProfile.jspa?name=pioter)** opened **[SPR-10167](https://jira.spring.io/browse/SPR-10167?redirect=false)** and commented  Spring MVC Test Framework ignores custom formatter.  Given following controller:  ``` @Controller public class SampleController {      @RequestMapping(value = ""/test"", method = GET)     @ResponseBody()     public String test(SampleEnum sampleEnum) {         return sampleEnum.toString();     } } ```  And following enum constant:  ``` public enum SampleEnum {      VALUE1,     VALUE2 } ```  And following entry in Java Spring configuration file extending from WebMvcConfigurationSupport:  ``` @Override public void addFormatters(FormatterRegistry registry) {     registry.removeConvertible(String.class, Enum.class);     registry.addConverterFactory(new CustomEnumConverterFactory()); } ```  That uses custom enum formatter to allow using lowercase enum constants in requests parameters while continuing to use uppercase enum constants:  ``` public class CustomEnumConverterFactory implements ConverterFactory {      @SuppressWarnings(""unchecked"")     public  Converter getConverter(Class targetType) {         return new StringToEnum(targetType);     }      private static class StringToEnum implements Converter {          private final Class enumType;          public StringToEnum(Class enumType) {             this.enumType = enumType;         }          public T convert(String source) {             if (source.length() == 0) {                 return null;             }             return (T) Enum.valueOf(this.enumType, source.toUpperCase().trim());         }     } } ```  Then when running the container both requests below result in printing enum constant:  http://localhost:8080/test?sampleEnum=VALUE1 http://localhost:8080/test?sampleEnum=value1  But when trying to verify that using MVC Test Framework the first test fails:  ``` @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(classes = {WebConfiguration.class}) @WebAppConfiguration public class SampleControllerTest {      private MockMvc mockMvc;      @Before     public void setUp() throws Exception {         this.mockMvc = MockMvcBuilders.standaloneSetup(new SampleController()).build();     }      @Test     public void shouldReturnSuccessfulResponseFromUpperCaseEnum() throws Exception {         mockMvc.perform(get(""/test?sampleEnum=VALUE1"")).andExpect(status().isOk()).andExpect(content().string(""VALUE1""));;     }      @Test     public void shouldReturnSuccessfulResponseFromLowerCaseEnum() throws Exception {         mockMvc.perform(get(""/test?sampleEnum=value1"")).andExpect(status().isOk()).andExpect(content().string(""VALUE1""));     } } ```  The status returned in the first test when using MVC Test framework is 400 BAD REQUEST.   ---  **Affects:** 3.2 GA","closed","status: invalid,","spring-projects-issues","2013-01-12T02:18:44Z","2019-01-12T05:27:35Z"
"","14714","@Autowired with required=false on List hides that fact that autowiring is not possible [SPR-10081]","**[Piotr Findeisen](https://jira.spring.io/secure/ViewProfile.jspa?name=pofin)** opened **[SPR-10081](https://jira.spring.io/browse/SPR-10081?redirect=false)** and commented  Until #14713 is done, it is not possible to `@Autowire` a field declared as `List` where `T` is a generic type parameter specified by subclass.  If you have such a field, you will get an exception like this:  ``` Caused by: org.springframework.beans.FatalBeanException: No element type declared for collection [java.util.List] 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:772) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:735) 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:478) ```  However, if the field is marked as `@Atuwored(required=false)`, then Spring hides the information that it did not try to autowire the field at all.  ```java Class elementType = descriptor.getCollectionType(); if (elementType == null) { //","closed","status: bulk-closed,","spring-projects-issues","2012-12-07T00:55:54Z","2019-01-12T02:35:42Z"
"","14713","Support @Autowire on List [SPR-10080]","**[Piotr Findeisen](https://jira.spring.io/secure/ViewProfile.jspa?name=pofin)** opened **[SPR-10080](https://jira.spring.io/browse/SPR-10080?redirect=false)** and commented  Make it possible to have autowired field with generic parameter specified by subclass.  ###### example  ```java public class SomeType { }  public class SuperClass { 	@Autowired public List autowired; }  public class ConcreteSubclass extends SuperClass { } ```  and bean XML file  ```xml    ```  In this example, `ConcreteSubclass` bean would have `autowired` property `@Autowired` with all instances of `SomeType`   --- No further details from [SPR-10080](https://jira.spring.io/browse/SPR-10080?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2012-12-07T00:49:19Z","2019-01-12T02:35:45Z"
"","15481","SockJS: fallback to http-streaming fails after 128K of data [SPR-10854]","**[Pieter](https://jira.spring.io/secure/ViewProfile.jspa?name=pieter)** opened **[SPR-10854](https://jira.spring.io/browse/SPR-10854?redirect=false)** and commented  Use the sample application spring-websocket-portfolio with IE9 IE9 issues a HTTP get to receive all updates. After 128K, the server completes the async request:  09:22:03 TRACE [MessageChannel-6] [HtmlFileTransportHandler$HtmlFileStreamingSockJsSession] - Preparing to write SockJsFrame content='a[""MESSAGE\nsubscription:sub-1\nmessage-id:17kxgwnl-922\ndestination:/topic/pric...(truncated)' 09:22:03 TRACE [MessageChannel-6] [HtmlFileTransportHandler$HtmlFileStreamingSockJsSession] - Writing SockJsFrame content='\\np(""a[\""MESSAGE\\nsubscription:sub-1\\nmessage-id:17kxgwnl-922\\ndestina...(truncated)' 09:22:03 TRACE [MessageChannel-6] [HtmlFileTransportHandler$HtmlFileStreamingSockJsSession] - 131090 bytes written so far, 0 more messages not flushed 09:22:03 TRACE [MessageChannel-6] [HtmlFileTransportHandler$HtmlFileStreamingSockJsSession] - Streamed bytes limit reached. Recycling current request 09:22:03 DEBUG [MessageChannel-6] [HtmlFileTransportHandler$HtmlFileStreamingSockJsSession] - Completing asynchronous request  IE9 issues another http GET and server starts to send data in the console of IE9, the following error is logged multiple times: SCRIPT5009: 'p' is undefined htmlfile?c=_jp.afmmijq, line 35 character 1   ---  **Affects:** 4.0 M2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9b2c041085190e9479a0e46946df4bf4bfbf77e1","closed","type: bug,","spring-projects-issues","2013-08-22T01:07:26Z","2013-10-31T12:28:02Z"
"","15237","Introduce java.nio.file.Path based Resource implementation [SPR-10608]","**[Philippe Marschall](https://jira.spring.io/secure/ViewProfile.jspa?name=marschall)** opened **[SPR-10608](https://jira.spring.io/browse/SPR-10608?redirect=false)** and commented  `FileSystemResource` uses the ""old"" `java.io.File` instead of the ""new"" `java.nio.file.Path`. One of the disadvantages is that it only works with the default file system and not with custom ones. Since the minimum requirement for Spring 4.0 is still Java 6, `FileSystemResource` cannot be retrofitted (and `#getPath` cannot be added to `Resource`).  ---  **Issue Links:** - #21373 java.nio.file.Path support in FileSystemResource (with regular createRelative behavior, superseding PathResource) - #19007 Add PathEditor to enable conversion to java.nio.file.Path  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5377fae7f5c17c90aeca90d97b9d1d70fbc6a434, https://github.com/spring-projects/spring-framework/commit/5006dcd0ec906e282d5455c5e0b9a42139f1edd7, https://github.com/spring-projects/spring-framework/commit/2313c9a007fe4c48f11b08806b852ced7fbff13d","closed","type: enhancement,","spring-projects-issues","2013-05-30T10:53:59Z","2019-01-11T22:27:28Z"
"","15217","Add Infinispan Cache Implementation [SPR-10588]","**[Philippe Marschall](https://jira.spring.io/secure/ViewProfile.jspa?name=marschall)** opened **[SPR-10588](https://jira.spring.io/browse/SPR-10588?redirect=false)** and commented  There currently is an Ehcache implementation of the cache abstraction. It would be interesting for us to have an Infinispan implementation. This would allow us to use `ConcurrentMapCache` for tests and the built-in JBoss AS 7 cache in production.  ---  **Issue Links:** - #13725 Provide transactional support for Infinispan 2nd level cache (_**""is duplicated by""**_)  1 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2013-05-26T05:10:53Z","2019-01-11T22:13:45Z"
"","15045","Better support for generics and lambdas in JmsTemplate [SPR-10412]","**[Philippe Marschall](https://jira.spring.io/secure/ViewProfile.jspa?name=marschall)** opened **[SPR-10412](https://jira.spring.io/browse/SPR-10412?redirect=false)** and commented  I'm a bit unhappy with the API of JmsTemplate and MessageConverter and wanted to ask whether it would be possible to make some changes for Spring 4.0. Basically because MessageConverter is not generic #receiveAndConvert has to do a cast, and #convertAndSend is not type safe. Making MessageConverter generic itself doesn't fix the problem because there can only be one MessageConverter per JmsTemplate. It would have to be passed as an argument so that type propagation works correctly. As this likely will have to wait for Spring 4 which has Java 8 / lambdas as a topic MessageConverter should probably be split into two interfaces (one for sending, one for receiving).  Maybe the interfaces should be tagged with `java.lang.FunctionalInterface` but that would have to be done over the whole code base.  ---  **Issue Links:** - #16394 Support org.springframework.messaging.Message as an alternative to MessageCreator in the JMS support  0 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2013-03-24T15:07:15Z","2019-01-11T21:18:41Z"
"","14986","Allow Application Server to Supply Annotation Scanning [SPR-10354]","**[Philippe Marschall](https://jira.spring.io/secure/ViewProfile.jspa?name=marschall)** opened **[SPR-10354](https://jira.spring.io/browse/SPR-10354?redirect=false)** and commented  These days every container has to do component scanning because more or less every EE specification — even servlets — requires the application server to discover classes annotated in a special way.  Since the application server controls the class loaders and deployments it's able to do so in an a reliable, stable and possibly more performant way compared to Spring. As application severs are beginning to fight over start up performance this an area that receives a lot of attention. Some like JBoss even go so far as to allow you to provide an [index](https://github.com/jbossas/jandex) build at compile time to speed this up even further.  As Spring has always been about taking advantage of services provided by applications servers in a portable way that doesn't lock you in I think you would be a great feature.  ---  **Issue Links:** - #16509 Spring-specific index file for component candidate classes  0 votes, 5 watchers","open","type: enhancement,","spring-projects-issues","2013-03-06T01:02:11Z","2019-01-11T21:01:52Z"
"","14850","Implement JUnit 4 Support using Rules [SPR-10217]","**[Philippe Marschall](https://jira.spring.io/secure/ViewProfile.jspa?name=marschall)** opened **[SPR-10217](https://jira.spring.io/browse/SPR-10217?redirect=false)** and commented  Currently JUnit 4 support is provided by SpringJUnit4ClassRunner which is a custom BlockJUnit4ClassRunner. There is no support for using other runners like Theories or Parameterized or 3rd party runners like MockitoJUnitRunner. A runner based approach does not seem to offer much promise as runners are not composable, a custom Spring version of every runner has to be developed and maintained.  With JUnit 4.9+ the preferred way to implement such behavior is to use rules. Unlike runners there can be several ones of them and they can be composed.  In theory TestExecutionListener could be deprecated and be replaced with standard JUnit rules but this seems to be a bit on the drastic side.  ---  **Issue Links:** - #12387 Provide `@Rule` alternative to SpringJUnit4ClassRunner (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2013-01-25T12:39:05Z","2019-01-13T07:01:23Z"
"","15011","JSR 330's Provider  only partially supported - either document it or implement it fully [SPR-10378]","**[Philipp Oser](https://jira.spring.io/secure/ViewProfile.jspa?name=poser555)** opened **[SPR-10378](https://jira.spring.io/browse/SPR-10378?redirect=false)** and commented  http://atinject.googlecode.com/svn/trunk/javadoc/javax/inject/Provider.html states that it ALSO supports optional and multi-value injection.  Provider is supported in Spring, but only supports single-value injections (Otherwise an exception is thrown).  It would be nice if this was documented (e.g. ini §4.11) or made compliant with the JSR.   ---  **Affects:** 3.2.1","closed","in: core,","spring-projects-issues","2013-03-14T09:42:21Z","2019-01-12T16:24:16Z"
"","15480","JpaVendorAdapter.getJpaPropertyMap() should return Map [SPR-10853]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10853](https://jira.spring.io/browse/SPR-10853?redirect=false)** and commented  Returning Map makes it difficult to use.   --- No further details from [SPR-10853](https://jira.spring.io/browse/SPR-10853?redirect=false)","closed","status: invalid,","spring-projects-issues","2013-08-21T23:40:06Z","2019-01-12T05:26:45Z"
"","15479","AnnotationConfigWebApplicationContext.register cannot be called multiple times [SPR-10852]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10852](https://jira.spring.io/browse/SPR-10852?redirect=false)** and commented  Unlike AnnotationConfigApplicationContext calling register on AnnotationConfigWebApplicationContext replaces prior registrations.   --- No further details from [SPR-10852](https://jira.spring.io/browse/SPR-10852?redirect=false)","closed","type: bug,","spring-projects-issues","2013-08-21T23:25:43Z","2013-08-29T16:20:40Z"
"","15477","Elvis operator will return ""Nikola Tesla"" and not ""Mike Tesla"" in ref docs [SPR-10850]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10850](https://jira.spring.io/browse/SPR-10850?redirect=false)** and commented   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c93fbda56dbc28e580ee74f2559c4e58a5dde33d, https://github.com/spring-projects/spring-framework/commit/84242f1affb51c912b6b2dcd92c09ea250341437, https://github.com/spring-projects/spring-framework/commit/4c7cb858d264ef04a53fb4d1ce5beec2ec598263","closed","type: documentation,","spring-projects-issues","2013-08-21T00:14:01Z","2013-08-29T16:20:41Z"
"","15466","@Conditional on superclass is ignored [SPR-10840]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10840](https://jira.spring.io/browse/SPR-10840?redirect=false)** and commented  It appears that `@Configuration` classes that inherit `@Conditional` annotations are not being evaluated. This is probably a regression of the `@Profile` behavior.  ---  **Affects:** 4.0 M2  **Issue Links:** - #16219 Annotations on superclasses are detected by StandardAnnotationMetadata - #16221 Favor more locally declared composed annotations over inherited annotations  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/89b53cfcd509bd5cf782ff65a82dc1ad1dae1e4a, https://github.com/spring-projects/spring-framework/commit/620c16f5c7bb543b18f71b2848f90461f8646237","closed","status: invalid,","spring-projects-issues","2013-08-15T20:26:32Z","2019-01-12T05:26:46Z"
"","15459","JavaDoc ConditionContext [SPR-10833]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10833](https://jira.spring.io/browse/SPR-10833?redirect=false)** and commented   --- No further details from [SPR-10833](https://jira.spring.io/browse/SPR-10833?redirect=false)","closed","type: task,","spring-projects-issues","2013-08-13T17:31:12Z","2013-08-29T16:20:48Z"
"","15424","Fix malformed code in documentation [SPR-10798]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10798](https://jira.spring.io/browse/SPR-10798?redirect=false)** and commented   ---  **Affects:** 3.2.3","closed","type: task,","spring-projects-issues","2013-07-30T13:57:31Z","2013-08-29T16:20:46Z"
"","15418","Fix SimpleJdbc{Call,Insert} Javadoc [SPR-10792]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10792](https://jira.spring.io/browse/SPR-10792?redirect=false)** and commented   --- No further details from [SPR-10792](https://jira.spring.io/browse/SPR-10792?redirect=false)","closed","type: enhancement,","spring-projects-issues","2013-07-29T11:30:07Z","2013-08-06T18:35:05Z"
"","15407","ResourceHttpRequestHandler always logs warning [SPR-10780]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10780](https://jira.spring.io/browse/SPR-10780?redirect=false)** and commented  ResourceHttpRequestHandler always logs a warning about missing resources   ---  **Affects:** 3.2.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8feeec4a6008f7b4b0202ca8c595ac7aaefee87c, https://github.com/spring-projects/spring-framework/commit/bc5246938d07820305167e581e7a8ece23ed265e","closed","type: bug,","spring-projects-issues","2013-07-24T16:44:29Z","2016-04-14T14:01:55Z"
"","15389","Upgrade to latest propdeps plugin [SPR-10763]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10763](https://jira.spring.io/browse/SPR-10763?redirect=false)** and commented   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6580d6b15cd3ede8e65a60932c677eb5a7e7069f","closed","type: task,","spring-projects-issues","2013-07-21T16:08:53Z","2013-07-24T10:17:12Z"
"","15384","Turn down logging in DefaultListableBeanFactory [SPR-10758]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10758](https://jira.spring.io/browse/SPR-10758?redirect=false)** and commented  The INFO log level in `DefaultListableBeanFactory` displays all beans. This can be a little verbose and would perhaps work better as DEBUG   --- No further details from [SPR-10758](https://jira.spring.io/browse/SPR-10758?redirect=false)","closed","type: bug,","spring-projects-issues","2013-07-18T21:31:41Z","2013-07-24T10:17:10Z"
"","15340","ConversionService support for ByteBuffer  [SPR-10712]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10712](https://jira.spring.io/browse/SPR-10712?redirect=false)** and commented  The ConversionService could support converting to/from ByteBuffer and byte[]. It could also indirectly convert via any existing byte[] converter.  ---  This issue is a sub-task of #15322  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9dba73dfc90978a98e6d8d214fec107ff71018f4","closed","type: task,","spring-projects-issues","2013-07-01T13:06:39Z","2019-01-11T22:27:57Z"
"","15331","Cleanup FIXMEs and TODOs from WebSocket code [SPR-10703]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10703](https://jira.spring.io/browse/SPR-10703?redirect=false)** and commented   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1c47c8f35c91b1c77b27ab5092ff01b5733ec116","closed","type: task,","spring-projects-issues","2013-06-27T09:22:36Z","2013-10-31T12:27:58Z"
"","15324","Links to Java types not working in Javadoc [SPR-10696]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10696](https://jira.spring.io/browse/SPR-10696?redirect=false)** and commented  See #15216  ---  No further details from [SPR-10696](https://jira.spring.io/browse/SPR-10696?redirect=false)","closed","type: task,","spring-projects-issues","2013-06-26T11:14:55Z","2019-01-11T22:22:26Z"
"","15322","Allow ConversionService to be plugged into JSR-356 WebSocket Encoder/Decoder  [SPR-10694]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10694](https://jira.spring.io/browse/SPR-10694?redirect=false)** and commented  ---  **Sub-tasks:** - #15340 ConversionService support for ByteBuffer  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c0e12255913697963296a500a7f100af17f0b2e4, https://github.com/spring-projects/spring-framework/commit/8d6fd1ed636ce1a1ad135dfdbe6b3c9cb7d07e11","closed","type: task,","spring-projects-issues","2013-06-26T08:40:50Z","2019-01-11T22:22:21Z"
"","15312","Backport ""Cached MethodExecutor invokes wrong method"" [SPR-10684]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10684](https://jira.spring.io/browse/SPR-10684?redirect=false)** and commented  ---  This issue is a backport sub-task of #15285","closed","in: core,","spring-projects-issues","2013-06-24T12:38:23Z","2019-01-11T22:22:42Z"
"","15309","Unable to build with --offline [SPR-10681]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10681](https://jira.spring.io/browse/SPR-10681?redirect=false)** and commented  Building buildSrc repeatedly triggers HEAD requests for libraries existing on disk.  ```  $ ./gradlew :spring-orm:test  ================================================ Finished building buildSrc … Cached resource is up-to-date (lastModified: Sun May 05 20:56:48 CEST 2013). [HTTP: http://repo.springsource.org/plugins-release/org/springframework/build/gradle/propdeps-plugin/0.0.3/propdeps-plugin-0.0.3.pom] Cached resource is up-to-date (lastModified: Sun May 05 20:56:50 CEST 2013). [HTTP: http://repo.springsource.org/plugins-release/org/springframework/build/gradle/docbook-reference-plugin/0.2.6/docbook-reference-plugin-0.2.6.pom] …  ```  Since items are cached it should be possible to work offline:  ``` $ gw :spring-orm:test --offline  ================================================ Finished building buildSrc …  FAILURE: Build failed with an exception.  * What went wrong: Could not resolve all dependencies for configuration ':classpath'. Could not resolve group:org.springframework.build.gradle, module:propdeps-plugin, version:0.0.3.  Required by:      :spring:4.0.0.BUILD-SNAPSHOT No cached version available for offline mode Could not resolve group:org.springframework.build.gradle, module:docbook-reference-plugin, version:0.2.6.  Required by:      :spring:4.0.0.BUILD-SNAPSHOT No cached version available for offline mode  * Try: Run with --stacktrace option to get the stack trace. Run with --debug option to get more log output.  BUILD FAILED ```    --- No further details from [SPR-10681](https://jira.spring.io/browse/SPR-10681?redirect=false)","closed","status: invalid,","spring-projects-issues","2013-06-24T08:48:37Z","2020-03-31T17:41:09Z"
"","15308","Skip inter-project eclipse dependencies [SPR-10680]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10680](https://jira.spring.io/browse/SPR-10680?redirect=false)** and commented  Currently it is hard to import a single project into eclipse due to inter-project dependencies. It would be useful if these could be skipped.  NOTE: Merged projects may cause issue here  http://stackoverflow.com/questions/13487145/gradle-eclipse-classpath-switching-between-snapshot-and-project-dependency   --- No further details from [SPR-10680](https://jira.spring.io/browse/SPR-10680?redirect=false)","closed","status: declined,","spring-projects-issues","2013-06-24T08:45:01Z","2016-06-02T12:12:33Z"
"","15307","Allow import into eclipse without downloading sources [SPR-10679]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10679](https://jira.spring.io/browse/SPR-10679?redirect=false)** and commented  The current eclipse import always downloads source jars, whilst useful for most developers this can be time consuming and problematic when working on a slow internet connection.  We could provide an option to skip this step:  http://www.gradle.org/docs/current/dsl/org.gradle.plugins.ide.eclipse.model.EclipseClasspath.html   --- No further details from [SPR-10679](https://jira.spring.io/browse/SPR-10679?redirect=false)","closed","status: declined,","spring-projects-issues","2013-06-24T08:37:15Z","2016-06-02T11:43:53Z"
"","15300","Backport ""BeanFactory.getBeansWithAnnotation() should not consider abstract beans"" [SPR-10672]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10672](https://jira.spring.io/browse/SPR-10672?redirect=false)** and commented  ---  This issue is a backport sub-task of #15291","closed","in: core,","spring-projects-issues","2013-06-20T22:50:37Z","2019-01-11T22:23:17Z"
"","15293","Migrate core Hateoas concepts from Spring Hateoas [SPR-10665]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10665](https://jira.spring.io/browse/SPR-10665?redirect=false)** and commented  ---  **Issue Links:** - #13468 Provide mechanism for creating links to controllers and controller methods (_**""is superseded by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6b0a62569bfb5c8e20746eead6723a3ea23e443f, https://github.com/spring-projects/spring-framework/commit/bafc73f1477330ef1bdb292608deea6e06ef2bed, https://github.com/spring-projects/spring-framework/commit/4fd27b12fceaadec5181a641439ac246fa7f7756","closed","","spring-projects-issues","2013-06-18T12:39:31Z","2019-01-11T22:24:28Z"
"","15274","Support @Configuration class parsing fallback to ASM [SPR-10646]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10646](https://jira.spring.io/browse/SPR-10646?redirect=false)** and commented  The commit d3a406876834b91a4cf3b1e840855caeb0446d28 (for #14926) refactored `ConfigurationClassParser` to minimize the use of ASM parsing. Unfortunately some `@Conditional` implementations were relying on the fact that ASM was being used and now throw exceptions when reading annotations that refer to missing classes.  If standard annotations cannot be read it would be good to fallback to the previous ASM behavior.  ---  **Affects:** 4.0 M2  **Issue Links:** - #21106 Reading annotations in ConfigurationClassParser does not fall back to ASM on Google App Engine  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e10e16cd6b2a2342a6b7d169878117046b6c5e16","closed","in: core,","spring-projects-issues","2013-06-10T09:17:25Z","2019-01-11T22:24:39Z"
"","15273","ConfigurationClassPostProcessor should be Ordered.HIGHEST_PRECEDENCE [SPR-10645]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10645](https://jira.spring.io/browse/SPR-10645?redirect=false)** and commented   --- No further details from [SPR-10645](https://jira.spring.io/browse/SPR-10645?redirect=false)","closed","type: bug,","spring-projects-issues","2013-06-10T07:39:45Z","2013-07-24T10:17:13Z"
"","15258","Allow BeanDefinitionRegistryPostProcessor to register other BeanDefinitionRegistryPostProcessors [SPR-10630]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10630](https://jira.spring.io/browse/SPR-10630?redirect=false)** and commented  See #12525, originally marked as WONTFIX but would be very useful for Spring Security  ---  **Issue Links:** - #12525 BeanDefinitionRegistryPostProcessor registered via `@Bean` will not be invoked - #16477 Infinite loop caused by import of XML configuration that declares a ConfigurationClassPostProcessor - #20592 sort BeanDefinitionRegistryPostProcessors added by other BeanDefinitionRegistryPostProcessors - #19172 Invalid WARN when returning a BeanDefinitionRegistryPostProcessor from within a `@Configuration` class - #19171 Doc: `@Bean` methods on `@Configuration` class returned from another `@Bean` method do not work - #21600 Fix outdated javadoc of ConfigurationClassPostProcessor - #18188 Improve performance of #getBeanNamesForType() while the BeanFactory configuration is not yet frozen  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bb971cecf15e8c7983cbaf7767851236d132889c","closed","type: enhancement,","spring-projects-issues","2013-06-05T12:03:23Z","2019-01-13T06:59:30Z"
"","15254","Backport: Do not consider all @Component instances as @Configuration candidates [SPR-10626]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10626](https://jira.spring.io/browse/SPR-10626?redirect=false)** and commented  A candidate for backporting?  ---  This issue is a backport sub-task of #15238","closed","in: core,","spring-projects-issues","2013-06-04T11:05:49Z","2019-01-11T22:26:03Z"
"","15238","Do not consider all @Component instances as @Configuration candidates [SPR-10609]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10609](https://jira.spring.io/browse/SPR-10609?redirect=false)** and commented  Any `@Component` is currently considered as a lite configuration class option [1]. It would probably make more sense to restrict lite configuration classes to only those containing `@Bean` methods.  [1] https://github.com/SpringSource/spring-framework/blob/v3.2.3.RELEASE/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassUtils.java#L103  ---  **Affects:** 3.2.3  **Sub-tasks:** - #15254 Backport: Do not consider all `@Component` instances as `@Configuration` candidates  **Issue Links:** - #21739 Revisit `@Bean` introspection between `@Configuration` classes and 'lite' beans","closed","in: core,","spring-projects-issues","2013-05-30T15:57:07Z","2019-01-13T06:59:38Z"
"","15226","Upgrade to latest docbook plugin [SPR-10597]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10597](https://jira.spring.io/browse/SPR-10597?redirect=false)** and commented  For https://github.com/SpringSource/gradle-plugins/commit/82caef32045d64b36e118c1901841861eb01b397   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d7e800abbce3402effe9cc9a6d16995029d86fc4","closed","type: task,","spring-projects-issues","2013-05-28T10:47:49Z","2013-07-24T10:17:13Z"
"","15198","Enforce JDK version on CI server [SPR-10569]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10569](https://jira.spring.io/browse/SPR-10569?redirect=false)** and commented  The CI server should fail when building with the wrong JDK.   --- No further details from [SPR-10569](https://jira.spring.io/browse/SPR-10569?redirect=false)","closed","type: enhancement,","spring-projects-issues","2013-05-16T15:32:27Z","2013-05-16T20:27:23Z"
"","15175","Allow access to applied property sources from PropertySourcesPlaceholderConfigurer [SPR-10545]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10545](https://jira.spring.io/browse/SPR-10545?redirect=false)** and commented  In order to support alternative ways of binding against `PropertySources` it would be useful if `PropertySourcesPlaceholderConfigurer` provided a method that gives access to the `PropertySources` that it actually applied.  Obviously these would only be available after the `postProcessBeanFactory` method has run.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/eb1776e79df3c1b7916bf11a61bdc33ba6889d38","closed","type: enhancement,","spring-projects-issues","2013-05-08T17:16:38Z","2013-05-08T21:07:52Z"
"","15174","Make DefaultResourceLoader.ClassPathContextResource protected [SPR-10544]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10544](https://jira.spring.io/browse/SPR-10544?redirect=false)** and commented  `DefaultResourceLoader.ClassPathContextResource` is used by the protected `DefaultResourceLoader.getResourceByPath` method but it currently private and not accessible by subclasses.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0652febe34fab87f1180ffaf5c2de0351c2e9232","closed","type: enhancement,","spring-projects-issues","2013-05-08T15:12:01Z","2013-05-08T21:07:58Z"
"","15167","JasperReport tests fail on OSX JDK 8 b88 [SPR-10537]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10537](https://jira.spring.io/browse/SPR-10537?redirect=false)** and commented  JUnit tests for jasper reports fail on OSX using the preview JDK 8 version 88.  ``` java.lang.NoClassDefFoundError: Could not initialize class net.sf.jasperreports.engine.util.JRStyledTextParser 	at net.sf.jasperreports.engine.fill.JRBaseFiller.(JRBaseFiller.java:121) 	at net.sf.jasperreports.engine.fill.JRVerticalFiller.(JRVerticalFiller.java:88) 	at net.sf.jasperreports.engine.fill.JRVerticalFiller.(JRVerticalFiller.java:103) 	at net.sf.jasperreports.engine.fill.JRVerticalFiller.(JRVerticalFiller.java:61) 	at net.sf.jasperreports.engine.fill.JRFiller.createFiller(JRFiller.java:153) 	at net.sf.jasperreports.engine.fill.JRFiller.fill(JRFiller.java:82) 	at net.sf.jasperreports.engine.JasperFillManager.fill(JasperFillManager.java:653) 	at net.sf.jasperreports.engine.JasperFillManager.fillReport(JasperFillManager.java:969) 	at org.springframework.ui.jasperreports.JasperReportsUtils.renderAsHtml(JasperReportsUtils.java:167) 	at org.springframework.ui.jasperreports.JasperReportsUtilsTests.testRenderAsHtmlWithCollection(JasperReportsUtilsTests.java:99) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:491) 	at junit.framework.TestCase.runTest(TestCase.java:176) 	at junit.framework.TestCase.runBare(TestCase.java:141) 	at junit.framework.TestResult$1.protect(TestResult.java:122) 	at junit.framework.TestResult.runProtected(TestResult.java:142) 	at junit.framework.TestResult.run(TestResult.java:125) 	at junit.framework.TestCase.run(TestCase.java:129) 	at junit.framework.TestSuite.runTest(TestSuite.java:255) 	at junit.framework.TestSuite.run(TestSuite.java:250) 	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84) 	at org.gradle.api.internal.tasks.testing.junit.JUni ```  Likely cause: https://java.net/jira/browse/MACOSX_PORT-355   ---  **Affects:** 4.0 M1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e1c25ff1a3767a0bf14cb88f02ad9a7e8d695032","closed","type: task,","spring-projects-issues","2013-05-07T08:20:39Z","2013-12-03T15:15:33Z"
"","15164","Support for @Conditional @Configuration [SPR-10534]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10534](https://jira.spring.io/browse/SPR-10534?redirect=false)** and commented  It would be useful if `@Configuration` classes and `@Bean` methods could be conditionally loaded based on pluggable strategies. This would work in a similar way to the existing `@Profile` annotation but support much more flexible code-based logic.  For example:  ```java @Conditional(MyCondition.class) @Configuration  public class ExampleConfiguration {  	// @Bean methods }   public class MyCondition implements Condition {  	public boolean matches(...) { 		// return true if the condition holds true 	} } ```  It should be possible to use `@Conditional` as a meta-annotation to allow users to define a rich set of custom conditions:  ```java @ConditionalOnClass(SomeClasspathClass.class) @ConditionalOnEnvironment(Environment.PRODUCTION) @ConditionalOnWindowsOs @Configuration public class ExampleConfiguration { } ```    --- No further details from [SPR-10534](https://jira.spring.io/browse/SPR-10534?redirect=false)","closed","type: enhancement,","spring-projects-issues","2013-05-06T18:12:05Z","2013-07-24T10:17:09Z"
"","15163","Consider @Import classes as lite @Configuration [SPR-10533]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10533](https://jira.spring.io/browse/SPR-10533?redirect=false)** and commented  The `@Import` annotation could indicate that a class is a lite `@Configuration` (in the same way as `@Bean` does).  ---  **Affects:** 3.2.2  **Issue Links:** - #15288 `@Enable`* should be supported without `@Configuration` (_**""is duplicated by""**_) - #16391 `@ComponentScan` should get processed without `@Configuration` as well - #21739 Revisit `@Bean` introspection between `@Configuration` classes and 'lite' beans","closed","type: enhancement,","spring-projects-issues","2013-05-06T15:59:25Z","2019-01-13T07:00:05Z"
"","15161","Filter source @Configuration with @ComponentScan  [SPR-10531]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10531](https://jira.spring.io/browse/SPR-10531?redirect=false)** and commented  The component scanner used by the `@ComponentScan` annotation will inadvertently include the source `@Configuration` class. It should filter it out.  ---  **Affects:** 3.2.2  **Issue Links:** - #15546 Duplicate scan of `@Import` annotations when inherited from another annotation  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d91ffb6a592fd1c3521ad86206dae110004abaca, https://github.com/spring-projects/spring-framework/commit/2dca5b681543dd956471b3b131972328edab21e8","closed","type: enhancement,","spring-projects-issues","2013-05-06T15:51:27Z","2019-01-13T07:00:07Z"
"","15160","Support *Aware ImportSelectors  [SPR-10530]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10530](https://jira.spring.io/browse/SPR-10530?redirect=false)** and commented  It should be possible for `ImportSelectors` to implement `Aware`* interface in the same way as `ImportBeanDefinitionRegistrars`.  ---  **Affects:** 3.2.2  **Issue Links:** - #14202 Support Aware interfaces for ImportBeanDefinitionRegistrar - #19250 Consistent *Aware callbacks for TypeFilters, ImportSelectors and ImportBeanDefinitionRegistrars  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/db0d780d4339953276447e034a6143abc3d83db9","closed","type: enhancement,","spring-projects-issues","2013-05-06T15:39:07Z","2019-01-11T22:17:39Z"
"","15159","Add AnnotationConfigApplicationContext constructor for custom DefaultListableBeanFactory [SPR-10529]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10529](https://jira.spring.io/browse/SPR-10529?redirect=false)** and commented  Add AnnotationConfigApplicationContext constructor for custom DefaultListableBeanFactory for consistency with other ApplicationContext types.   ---  **Affects:** 3.2.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f05d0885ef4076b6430f144ddb8e47627e5eee80","closed","type: enhancement,","spring-projects-issues","2013-05-06T15:35:40Z","2013-05-06T16:16:28Z"
"","15158","Make SpringFactoriesLoader.loadFactoryNames method public [SPR-10528]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10528](https://jira.spring.io/browse/SPR-10528?redirect=false)** and commented  SpringFactoriesLoader.loadFactoryNames is generally useful and could be public   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2c887248f0592cbb501741bc4e61f8861c7b7f87","closed","type: enhancement,","spring-projects-issues","2013-05-06T15:32:18Z","2013-05-06T16:16:19Z"
"","15070","Create v4 XML schema [SPR-10437]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10437](https://jira.spring.io/browse/SPR-10437?redirect=false)** and commented  ---  **Issue Links:** - #17433 There is no spring-beans.dtd file inside of the spring-beans-4.1.5.RELEASE jar - #16781 XML bean singleton attribute silently ignored","closed","type: task,","spring-projects-issues","2013-04-02T11:13:52Z","2019-01-11T21:14:50Z"
"","15056","Upgrade JiBX (and BCEL) towards support of 1.8 bytecode level [SPR-10423]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10423](https://jira.spring.io/browse/SPR-10423?redirect=false)** and commented  JiBX 1.2.5 doesn't work for me locally either when setting test compatibility to 1.7. Let's leave this as-is for 3.2.x and just addressed it for 4.0 once JiBX actually works with JDK 7.  Juergen   ---  **Affects:** 3.2.2","closed","type: task,","spring-projects-issues","2013-03-27T11:40:13Z","2016-07-28T09:16:20Z"
"","15024","Reference Documentation error in Table 5.1 [SPR-10391]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10391](https://jira.spring.io/browse/SPR-10391?redirect=false)** and commented  http://static.springsource.org/osgi/docs/2.0.0.M1/reference/html/blueprint.html  in Table 5.1 sections Namespace Declaration and Root Element are reversed.   ---  **Affects:** 3.2.2","closed","status: invalid,","spring-projects-issues","2013-03-17T23:45:06Z","2019-01-12T05:27:16Z"
"","15014","Support embedded servlet containers [SPR-10381]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10381](https://jira.spring.io/browse/SPR-10381?redirect=false)** and commented  ---  This issue is a sub-task of #14521  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e9a2e688cbc6321ed40b2b468501642877080681, https://github.com/spring-projects/spring-framework/commit/19187fd365daaede14f948a1c0ff19dd4ef4bac1","closed","status: declined,","spring-projects-issues","2013-03-14T14:23:47Z","2019-01-11T19:37:59Z"
"","15002","Log warning when using inner-bean referenced without @Configuration [SPR-10369]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10369](https://jira.spring.io/browse/SPR-10369?redirect=false)** and commented  When using `@Bean` definitions it is easy to forget to use the `@Configuration` annotation. We could parse the byte code of any class having an `@Bean` method and detect inter-class calls to other such a methods using ASM.  ---  **Affects:** 3.2.1  **Issue Links:** - #14061 Document `@Bean` 'lite' mode and annotated classes in the reference manual - #13690 spring-test allows you to reference configuration classes that aren't annotated with `@Configuration` - #14037 Improve documentation for `@Bean` 'lite' mode and annotated class support in the TestContext Framework","closed","status: bulk-closed,","spring-projects-issues","2013-03-12T13:02:03Z","2019-01-13T07:00:45Z"
"","15001","Upgrade to Gradle 1.6 [SPR-10368]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10368](https://jira.spring.io/browse/SPR-10368?redirect=false)** and commented   --- No further details from [SPR-10368](https://jira.spring.io/browse/SPR-10368?redirect=false)","closed","type: task,","spring-projects-issues","2013-03-10T10:33:27Z","2019-01-11T21:01:09Z"
"","14938","ArrayIndexOutOfBoundsException in AbstractAutowireCapableBeanFactory.predictBeanType [SPR-10304]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10304](https://jira.spring.io/browse/SPR-10304?redirect=false)** and commented  ``` Caused by: java.lang.ArrayIndexOutOfBoundsException: 0 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.predictBeanType(AbstractAutowireCapableBeanFactory.java:590) ~[spring-beans-3.2.2.BUILD-SNAPSHOT.jar:3.2.2.BUILD-SNAPSHOT] 	at org.springframework.beans.factory.support.AbstractBeanFactory.getType(AbstractBeanFactory.java:576) ~[spring-beans-3.2.2.BUILD-SNAPSHOT.jar:3.2.2.BUILD-SNAPSHOT] 	at org.springframework.context.support.AbstractApplicationContext.getType(AbstractApplicationContext.java:1149) [spring-context-3.2.2.BUILD-SNAPSHOT.jar:3.2.2.BUILD-SNAPSHOT] 	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.initHandlerMethods(AbstractHandlerMethodMapping.java:106) ~[spring-webmvc-3.2.2.BUILD-SNAPSHOT.jar:3.2.2.BUILD-SNAPSHOT] 	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.afterPropertiesSet(AbstractHandlerMethodMapping.java:87) ~[spring-webmvc-3.2.2.BUILD-SNAPSHOT.jar:3.2.2.BUILD-SNAPSHOT] 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping.afterPropertiesSet(RequestMappingHandlerMapping.java:163) ~[spring-webmvc-3.2.2.BUILD-SNAPSHOT.jar:3.2.2.BUILD-SNAPSHOT] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1546) ~[spring-beans-3.2.2.BUILD-SNAPSHOT.jar:3.2.2.BUILD-SNAPSHOT] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1484) ~[spring-beans-3.2.2.BUILD-SNAPSHOT.jar:3.2.2.BUILD-SNAPSHOT] 	... 35 common frames omitted ```    ---  **Affects:** 3.2.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/893574be0e010053f57bcda9943845c3d57d963f, https://github.com/spring-projects/spring-framework/commit/e0c7571a41adb0d21e95ac16d72d1f792aa4bdd6, https://github.com/spring-projects/spring-framework/commit/5008005df0d5d39f7de4a6638fb49d5f46888761, https://github.com/spring-projects/spring-framework/commit/608dab28bffb1a61372a38c8b02d7b428ceda7c9","closed","type: bug,","spring-projects-issues","2013-02-15T11:52:09Z","2013-03-01T11:03:45Z"
"","14903","Assert.instanceOf exception message [SPR-10269]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10269](https://jira.spring.io/browse/SPR-10269?redirect=false)** and commented  Commit 5874383ef081bb52a872dd49d63e5b542fbf20ca added an additional '.' which is at odds with the JavaDoc   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7bbb4ec7aff9ca171f2d34f747d7e0d96a6ce1b0","closed","type: bug,","spring-projects-issues","2013-02-07T11:48:54Z","2013-02-07T13:40:20Z"
"","14876","GenericConversionService.convert() throws IllegalArgumentException after updating to Spring 3.2.1 [SPR-10243]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10243](https://jira.spring.io/browse/SPR-10243?redirect=false)** and commented  After updating Spring from 3.2.0.RELEASE to 3.2.1.RELEASE I've got following error:  ``` [skip] java.lang.IllegalArgumentException: The source to convert from must be an instance of @org.hibernate.validator.constraints.NotEmpty @javax.validation.constraints.Size @javax.validation.constraints.Pattern java.lang.String; instead it was a ru.mystamps.web.model.ActivateAccountForm     at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:164)     at org.springframework.validation.AbstractPropertyBindingResult.formatFieldValue(AbstractPropertyBindingResult.java:125)     at org.springframework.validation.AbstractBindingResult.getFieldValue(AbstractBindingResult.java:222)     at org.springframework.web.servlet.support.BindStatus.(BindStatus.java:120)     at org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag.getBindStatus(AbstractDataBoundFormElementTag.java:179)     at org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag.getPropertyPath(AbstractDataBoundFormElementTag.java:199)     at org.springframework.web.servlet.tags.form.LabelTag.autogenerateFor(LabelTag.java:130)     at org.springframework.web.servlet.tags.form.LabelTag.resolveFor(LabelTag.java:120)     at org.springframework.web.servlet.tags.form.LabelTag.writeTagContent(LabelTag.java:90)     at org.springframework.web.servlet.tags.form.AbstractFormTag.doStartTagInternal(AbstractFormTag.java:103)     at org.springframework.web.servlet.tags.RequestContextAwareTag.doStartTag(RequestContextAwareTag.java:80)     at org.apache.jsp.WEB_002dINF.tiles.body.account.activate_jsp._jspx_meth_form_label_2(activate_jsp.java:667)     at org.apache.jsp.WEB_002dINF.tiles.body.account.activate_jsp._jspService(activate_jsp.java:224) [skip] ```  JSP code:  ```xml                         ...  ```  Model declaration:  ```java public class ActivateAccountForm implements ActivateAccountDto {                                          @NotEmpty(groups = Login1Checks.class)                                                               @Size.List({                                                                                             @Size(                                                                                                   min = ValidationRules.LOGIN_MIN_LENGTH,                                                              message = ""{value.too-short}"",                                                                       groups = Login2Checks.class                                                                      ),                                                                                                   @Size(                                                                                                   max = ValidationRules.LOGIN_MAX_LENGTH,                                                              message = ""{value.too-long}"",                                                                        groups = Login2Checks.class                                                                      )                                                                                                })                                                                                                   @Pattern(                                                                                                regexp = ValidationRules.LOGIN_REGEXP,                                                               message = ""{login.invalid}"",                                                                         groups = Login3Checks.class                                                                      )                                                                                                    @UniqueLogin(groups = Login4Checks.class)                                                            private String login;      ... } ```  Controller:  ```java @RequestMapping(value = Url.ACTIVATE_ACCOUNT_PAGE, method = RequestMethod.POST)                  public String processActivationForm(                                                                 @Validated({                                                                                         LoginChecks.class, NameChecks.class, PasswordChecks.class,                                       PasswordConfirmationChecks.class, ActKeyChecks.class, FormChecks.class                       }) ActivateAccountForm form, BindingResult result) {                                              if (result.hasErrors()) {                                                                            return null;                                                                                 }                                                                                                 userService.registerUser(form);                                                                   return ""redirect:"" + Url.SUCCESSFUL_ACTIVATION_PAGE;                                         } ```  ---  **Affects:** 3.2.1  **Reference URL:** http://stackoverflow.com/questions/14522260/genericconversionservice-convert-throws-illegalargumentexception-after-updatin  **Issue Links:** - #13970 SpringValidatorAdapter is incorrectly resolving rejected value for bean based field level constraints - #14979 SpringValidationAdapter cannot handle disabled default constraint violation - #19648 Spring validation crashes with Hibernate Validation 5 style list constraint violations - #20725 NumberFormatException caused by property paths from JSR-303 based validation with no index into a collection  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cef97819c53e41f1736ba778170740f0935c5edc, https://github.com/spring-projects/spring-framework/commit/19eecb151b8a0e2b2dad1aa4baf4c552587342fb  0 votes, 5 watchers","closed","type: bug,","spring-projects-issues","2013-01-30T14:27:38Z","2019-01-11T21:33:52Z"
"","14851","Spring 3.2.1 POM missing certain compile time dependencies [SPR-10218]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10218](https://jira.spring.io/browse/SPR-10218?redirect=false)** and commented  The generated POM files for Spring 3.2.1 have inadvertently changed several compile time dependencies to optional, namely:  ``` spring-orm -> spring-tx -> spring-jdbc  spring-webmvc -> spring-context -> spring-web  spring-test -> spring-webmvc ```  The root cause of issue is:  https://github.com/SpringSource/spring-framework/commit/7f928e83ffb3abdd62f9a1dc4ed1062bfc3b06f6  This commit intended to change the scope only within the project being merged and not in the 'merge.into' destination.  ---  **Affects:** 3.2.1  **Issue Links:** - #14924 spring-webmvc 3.2.1 no longer has spring-web as compile-time dependency (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bc80d25b490a540c36ce4265d1ebaad11b679138  1 votes, 6 watchers","closed","type: regression,","spring-projects-issues","2013-01-25T16:02:35Z","2019-01-11T21:35:33Z"
"","14831","Support Date to String in JodaTimeConverters [SPR-10198]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10198](https://jira.spring.io/browse/SPR-10198?redirect=false)** and commented  When using `JodaTimeConverters` with Spring 3.2 attempting to convert a String to a Date results in the following error:  ```java org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from type java.util.Date to type org.joda.time.ReadableInstant 	at org.springframework.core.convert.support.GenericConversionService.handleConverterNotFound(GenericConversionService.java:276) 	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:172) 	at org.springframework.format.support.FormattingConversionService$PrinterConverter.convert(FormattingConversionService.java:133) 	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:35) 	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:169) ```  ---  **Affects:** 3.2 GA  **Issue Links:** - #14730 Date variables in forms are failing with joda conversion error  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/21becef1bdd36aac41c519798a772dbadb5d6973","closed","in: core,","spring-projects-issues","2013-01-21T10:50:21Z","2019-01-11T21:30:12Z"
"","14807","Backport ""SpEL support for static finals on interfaces"" [SPR-10174]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10174](https://jira.spring.io/browse/SPR-10174?redirect=false)** and commented  ---  This issue is a backport sub-task of #14758","closed","in: core,","spring-projects-issues","2013-01-14T16:04:25Z","2019-01-11T21:30:38Z"
"","14750","Backport ""Fix GenericConversionService search algorithm"" [SPR-10117]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10117](https://jira.spring.io/browse/SPR-10117?redirect=false)** and commented  ---  **Affects:** 3.2 GA  This issue is a sub-task of #14749  **Issue Links:** - #14749 Fix GenericConversionService search algorithm (_**""duplicates""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1abb7f66a73b47933e75888a770041c42ba1933c","closed","in: core,","spring-projects-issues","2012-12-22T11:51:35Z","2019-01-11T21:24:02Z"
"","14749","Fix GenericConversionService search algorithm [SPR-10116]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10116](https://jira.spring.io/browse/SPR-10116?redirect=false)** and commented  Commit 4dc289592d0072c7472ab455522362f8db42b4a7 inadvertently changed the order that the conversion service searches the type hierarchy.  With Spring 3.1 when considering the hierarchy of ArrayList the converter would search super-types initially followed by interfaces in the order of the super-types.  ie:  ``` ArrayList AbstractList AbstractCollection List (interfaces on ArrayList) Collection (interfaces on AbstractCollection) ```  Spring 3.2.0 searches the interfaces starting starting with the base class.  ie:  ``` ArrayList AbstractList AbstractCollection Collection (interfaces on AbstractCollection) List (interfaces on ArrayList) ```  This bug is particularly critical when custom converters have been registered againsy `List`. Instead of the custom converter being used the `CollectionToObject` converter will be picked as `Collection` -> `Object` is considered before `List` -> `targetType`.  ---  **Affects:** 3.2 GA  **Sub-tasks:** - #14750 Backport ""Fix GenericConversionService search algorithm""  **Issue Links:** - [SWF-1582](https://jira.spring.io/browse/SWF-1582) ConversionService fails to find DataModel converter (_**""is depended on by""**_) - #14750 Backport ""Fix GenericConversionService search algorithm"" (_**""is duplicated by""**_) - #14844 Conversion service should find and use most specific converter (_**""is duplicated by""**_)","closed","in: core,","spring-projects-issues","2012-12-21T16:16:05Z","2019-01-11T21:25:57Z"
"","14730","Date variables in forms are failing with joda conversion error [SPR-10097]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10097](https://jira.spring.io/browse/SPR-10097?redirect=false)** and commented  From the form post:  I upgraded from Spring 3.1.2 to 3.2  After upgrade, all my date variables in forms are failing with joda conversion error.  ``` org.springframework.core.convert.ConverterNotFound Exception: No converter found capable of converting from type java.util.Date to type org.joda.time.ReadableInstant ```  Sample Code:  Its failing with any of the following options.  ```xml    ```  Note: `startDt` is of type `java.util.Date`  ---  **Affects:** 3.2 GA  **Reference URL:** http://forum.springsource.org/showthread.php?133308-Spring-Framework-3-2-GA-Released&p=433537#post433537  **Attachments:** - [localhost.2012-12-28.error.log](https://jira.spring.io/secure/attachment/20827/localhost.2012-12-28.error.log) (_64.47 kB_)  **Issue Links:** - #14738 Date conversion no longer uses ObjectToObjectConverter - #14831 Support Date to String in JodaTimeConverters","closed","status: duplicate,","spring-projects-issues","2012-12-14T12:08:48Z","2019-01-12T16:47:19Z"
"","14710","Replace SLF4J with ACL in TilesConfigurer for Tiles 3 [SPR-10077]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10077](https://jira.spring.io/browse/SPR-10077?redirect=false)** and commented  The TilesConfigurer for Tiles 3 uses SL4J rather than Apache Commons Logging. We should use ACL to remain consistent with the rest of the framework.   ---  **Affects:** 3.2 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fb05c7b33c469d5a7826ff8efe3168329617b6b5","closed","type: bug,","spring-projects-issues","2012-12-05T21:32:47Z","2012-12-07T02:59:28Z"
"","15149","Bean with parent not resolved if context contains factory bean autowired by type  [SPR-10518]","**[Petr Sakar](https://jira.spring.io/secure/ViewProfile.jspa?name=saki)** opened **[SPR-10518](https://jira.spring.io/browse/SPR-10518?redirect=false)** and commented  See attached maven project with tests. Run mvn test to see failing test Run mvn test -Dspring.version=3.2.1.RELEASE to see all tests pass   ---  **Affects:** 3.2.2  **Attachments:** - [test1.zip](https://jira.spring.io/secure/attachment/21187/test1.zip) (_8.09 kB_)","closed","status: bulk-closed,","spring-projects-issues","2013-05-04T19:17:11Z","2019-01-12T03:42:57Z"
"","14785","AnnotationAwareOrderComparator does not work on Class objects [SPR-10152]","**[Petr Janeček](https://jira.spring.io/secure/ViewProfile.jspa?name=slanec)** opened **[SPR-10152](https://jira.spring.io/browse/SPR-10152?redirect=false)** and commented  When comparing a `Collection","closed","type: enhancement,","spring-projects-issues","2013-01-08T04:28:31Z","2013-01-10T07:56:01Z"
"","15381","JDBC Connection is not released due to incorrectly defined catch [SPR-10755]","**[Peter Szanto](https://jira.spring.io/secure/ViewProfile.jspa?name=szantopeter)** opened **[SPR-10755](https://jira.spring.io/browse/SPR-10755?redirect=false)** and commented  `DataSourceTransactionManager` contains a bug when releasing the connection. According to the official recommendation, The problem here is that the code only releases the connection when an exception occurs, not when an Error. In our case when an `OutOfMemoryError` occurs we notice that the connections are not released. Here is the code snipped from `doBegin()`  ```java try {  ... catch (Exception ex) { 	DataSourceUtils.releaseConnection(con, this.dataSource); 	throw new CannotCreateTransactionException(""Could not open JDBC Connection for transaction"", ex); } ```  The problem is that OOM can be recovered, but not releasing the connections cannot be recovered.  Not sure how much it is related, but when I see abandoned JDBC connections I also see these in the log file :  ``` org.springframework.transaction.TransactionSystemException: Could not roll back JDBC transaction; nested exception is java.sql.SQLException: Connection com.microsoft.sqlserver.jdbc.SQLServerConnection@266290d7 is closed. ```  ---  **Affects:** 3.2.3  **Issue Links:** - #16885 DataSourceTransactionManager closes JDBC connection on doBegin failure but leaves it attached to transaction object","closed","in: core,","spring-projects-issues","2013-07-18T06:20:34Z","2019-01-11T22:03:36Z"
"","15468","SessionAttributes/ModelAttribute initialization is inconsistent.  2 controllers using same view, SessionAttributes not invoked, same model name in both controllers [SPR-10842]","**[Peter Ludikar](https://jira.spring.io/secure/ViewProfile.jspa?name=pelu)** opened **[SPR-10842](https://jira.spring.io/browse/SPR-10842?redirect=false)** and commented  I am using Spring 3.2 - portlet MVC, and Eclipse Juno with JDK6. I'm using annotations, almost exclusively.  I'm raising this issue because I believe I've found the model initialization in a controller to be inconsistent.  No one has responded to this issue on the forum, but I'm reasonably confident I'm getting behavior that is not according to the way things are described.  Using a class Owner which includes List\ item.  Such that in a jsp you would have   I have controller ""displayOwner"" handling this and it provides `@ModelAttribute`(""owner"") - this works fine.  Next I invoke a second controller ""editItem"" which provides the Model for ""owner"" (again!) and a model for ""item"". - this also works as expected  When changes to ""item"" are submitted in ""editItem"", control returns to ""displayOwner"", but the model for ""owner"" is not initialized, even though `@SessionAttributes` have not been annotated - this is the issue  Expected behavior: each time a control is entered, all models should be initialized, unless the models are specifically associated with `@SessionAttributes`.  Work around: Do not use the same model name in different controllers - this results in views files that are basically duplicated and harder to maintain.   ---  **Affects:** 3.2.4  **Reference URL:** http://forum.springsource.org/showthread.php?140951-ModelAttribute-misbehaving","closed","status: declined,","spring-projects-issues","2013-08-17T01:36:40Z","2019-01-12T16:35:59Z"
"","15194","Listener registration in JaxbMarshaller [SPR-10564]","**[Peter Fouquet](https://jira.spring.io/secure/ViewProfile.jspa?name=pfouquet)** opened **[SPR-10564](https://jira.spring.io/browse/SPR-10564?redirect=false)** and commented  In need the possibility to register a listener to the Jaxb2Marshaller in a thread safe way, because the listener has a state while marshalling an object. It is possible to extend the method marshall with the parameter listener, for example:  ``` public void marshal(Object graph, Result result, MimeContainer mimeContainer, final Listener listener throws XmlMappingException {      try {           Marshaller marshaller = createMarshaller();           if (listener != null) {                marshaller.setListener(listener);           }           if (this.mtomEnabled && mimeContainer != null) {                marshaller.setAttachmentMarshaller(new Jaxb2AttachmentMarshaller(mimeContainer));           }           if (StaxUtils.isStaxResult(result)) {                marshalStaxResult(marshaller, graph, result);           }           else {                marshaller.marshal(graph, result);           }      }      catch (JAXBException ex) {           throw convertJaxbException(ex);      } } ```    --- No further details from [SPR-10564](https://jira.spring.io/browse/SPR-10564?redirect=false)","closed","type: enhancement,","spring-projects-issues","2013-05-15T01:01:07Z","2013-06-26T12:34:56Z"
"","15338","DeferredResult timeout and Tomcat IllegalStateException [SPR-10710]","**[Peter De Wachter](https://jira.spring.io/secure/ViewProfile.jspa?name=pdewacht)** opened **[SPR-10710](https://jira.spring.io/browse/SPR-10710?redirect=false)** and commented  I'm using Spring 3.2.3 and Tomcat 7.0.41 with the NIO backend. I'm (still) experiencing problems with timeout handling of DeferredResult. (See #15118 for an earlier bug.)  Consider the following code:  ``` @Controller public class TestController {      @RequestMapping(value=""/test"")     @ResponseBody     public DeferredResult test() {         return new DeferredResult(50L, ""timeout\n"");     }  } ```  Now, create 100 threads which send this request in a loop: (The ""parallel"" command here is GNU parallel.)  ``` yes 'curl --silent http://localhost:8080/test' | parallel -j100 ```  Some of these requests will fail and Tomcat will log the this exception:  ``` jul 01, 2013 11:42:38 AM org.apache.coyote.AbstractProtocol$AbstractConnectionHandler process SEVERE: Error reading request, ignored java.lang.IllegalStateException: Calling [asyncPostProcess()] is not valid for a request with Async state [STARTED]         at org.apache.coyote.AsyncStateMachine.asyncPostProcess(AsyncStateMachine.java:204)         at org.apache.coyote.AbstractProcessor.asyncPostProcess(AbstractProcessor.java:116)         at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:593)         at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1686)         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)         at java.lang.Thread.run(Thread.java:724) ```  ---  **Affects:** 3.2.3  **Reference URL:** https://github.com/SpringSource/spring-framework-issues/pull/53","closed","status: declined,","spring-projects-issues","2013-07-01T03:04:43Z","2019-01-12T16:23:53Z"
"","15118","Deadlocks with DeferredResult timeout handling on Tomcat [SPR-10485]","**[Peter De Wachter](https://jira.spring.io/secure/ViewProfile.jspa?name=pdewacht)** opened **[SPR-10485](https://jira.spring.io/browse/SPR-10485?redirect=false)** and commented  I'm experiencing deadlocks and other bugs when calling DeferredResult#setResult while that deferred result's timeout handler is running. This is on Tomcat 7.0.39. I'm using the following code to reproduce this.  ``` @Controller public class TestController {     private DeferredResult deferred;      static class DoSomethingUseful implements Runnable {         public void run() {             try { Thread.sleep(2000); } catch (InterruptedException e) { }         }     }      @RequestMapping(value=""/test/start"")     @ResponseBody     public DeferredResult start() {         deferred = new DeferredResult(4000L, ""timeout\n"");         deferred.onTimeout(new DoSomethingUseful());         return deferred;     }      @RequestMapping(value=""/test/stop"")     @ResponseBody     public String stop() {         deferred.setResult(""result\n"");         return ""ok\n"";     } } ```  The start method creates a DeferredResult with a 4 second timeout. To make the bug easy to reproduce, it has an onTimeout handler which will sleep for 2 seconds. The stop method will set a value for the DeferredResult. The code seems correct to me: the DeferredResult documentaion states that ""the application can produce the result from a thread of its choice"", and also that setResult can be called on an DeferredResult that's already expired.  To reproduce the bug, try something like this:  ``` curl http://localhost/test/start & sleep 5; curl http://localhost/test/stop ```  On Tomcat using the APR connector, this will deadlock. On Tomcat using the NIO connector, this will sometimes (not consistently) never answer the start request and return the ""timeout\n"" string as a result of the stop request.  ---  **Affects:** 3.2.2  **Reference URL:** https://github.com/SpringSource/spring-framework-issues/pull/48  **Issue Links:** - #19544 Concurrency problem in DeferredResult: potential double execution of handleResult - #18031 DeferredResult not thread-safe for isSetOrExpired call  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/db596d23dea7a8f35b52581d92b00a18c3f45335, https://github.com/spring-projects/spring-framework/commit/25701ef9843eb44429b740996e80fc3171c7ff7f","closed","type: bug,","spring-projects-issues","2013-04-24T08:15:00Z","2019-01-11T21:11:57Z"
"","15100","404 error with double slash in context path [SPR-10467]","**[Peter De Wachter](https://jira.spring.io/secure/ViewProfile.jspa?name=pdewacht)** opened **[SPR-10467](https://jira.spring.io/browse/SPR-10467?redirect=false)** and commented  I have a webapp configured for the path /test, a servlet-mapping in web.xml for the url-pattern '/*' to a DispatcherServlet and a `@RequestMapping` ""/foo/bar"". The container is Tomcat 7.  With this setup the following request succeeds: http://host/test/foo/bar => OK  And also if you add double slashes to the request mapping part: http://host/test//foo//bar => OK  But if you use a double slash in the context path, it fails: http://host//test/foo/bar => 404  This is a very minor issue, but it can be annoying as scripts often construct URLs in an ad-hoc manner and end up with doubled slashes.  The reason is that UrlPathHelper#getPathWithinApplication gets confused by the double slash. getContextPath returns ""/test"", getRequestUri returns ""//test/foo/bar"" and as a result getRemainingPart fails.  I suspect the fix is to make decodeAndCleanUriString replace ""//"" by ""/"".  ---  **Affects:** 3.2.2  **Issue Links:** - #16979 Two trailing slashes and the default servlet cannot resolve to a controller (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2013-04-16T09:30:22Z","2019-01-12T16:47:02Z"
"","14736","RequestDataValueProcessor produces non-compliant HTML code [SPR-10103]","**[Paweł Firlej](https://jira.spring.io/secure/ViewProfile.jspa?name=pfirlej)** opened **[SPR-10103](https://jira.spring.io/browse/SPR-10103?redirect=false)** and commented  The org.springframework.web.servlet.support.RequestDataValueProcessor generates hidden html input fields as:  \\  Such closing tag on input element is invalid in HTML 4.01.  Should be: \   ---  **Affects:** 3.1.2","closed","type: bug,","spring-projects-issues","2012-12-17T04:24:05Z","2013-01-08T07:06:26Z"
"","15429","MemoryLeak in AntPathMatcher during caching AntPathStringMatcher instances [SPR-10803]","**[Pawel Bobruk](https://jira.spring.io/secure/ViewProfile.jspa?name=pboburk)** opened **[SPR-10803](https://jira.spring.io/browse/SPR-10803?redirect=false)** and commented  Implementation matchStrings:  ``` private boolean matchStrings(String pattern, String str, Map uriTemplateVariables) {      AntPathStringMatcher matcher = this.stringMatcherCache.get(pattern);      if (matcher == null) {           matcher = new AntPathStringMatcher(pattern);           this.stringMatcherCache.put(pattern, matcher);      }      return matcher.matchStrings(str, uriTemplateVariables); } ```  is adding unlimited number of AntPathStringMatcher to ""cache"".  In applications with SEO friendly addresses with lots of combinations of parameters causes a problem with the heap memory, every url pattern are stored in cache.  ---  **Issue Links:** - #14383 Avoid per-request Pattern.compile() calls.  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/326154270fa6338010a1c047044fc4a9f21e910b, https://github.com/spring-projects/spring-framework/commit/d4f4225e53c3af7208b7928bd3ba799249b6875d, https://github.com/spring-projects/spring-framework/commit/9cbac985fbe20df1b0cce399dd238183de9befbc, https://github.com/spring-projects/spring-framework/commit/7a5a6893e3024c9f06a5473788fe731eb6efc380, https://github.com/spring-projects/spring-framework/commit/a7af9505dee01340ac225814f9f90252bb7d725e, https://github.com/spring-projects/spring-framework/commit/4bcfbc3ba3eced91bd833eb2b4d4620c94c611ba  0 votes, 8 watchers","closed","type: bug,","spring-projects-issues","2013-08-05T06:18:36Z","2019-01-13T21:02:53Z"
"","14979","SpringValidationAdapter cannot handle disabled default constraint violation [SPR-10345]","**[Pavla Nováková](https://jira.spring.io/secure/ViewProfile.jspa?name=pavla)** opened **[SPR-10345](https://jira.spring.io/browse/SPR-10345?redirect=false)** and commented  If domain object level validation constraint is specified and some custom validator marks explicitly an object field as invalid (instead of default global object):  ```java context.disableDefaultConstraintViolation(); context.buildConstraintViolationWithTemplate(context.getDefaultConstraintMessageTemplate()).addNode(""fieldToMarkAsInvalid"").addConstraintViolation(); ```  SpringValidatorAdapter doesn't check for this option and creates FieldError for marked field but rejected value is not field value but domain object itselves. Think this is a bug. For now I use this fix, but I'm not sure if this covers all possible cases:  ```java Object invalidValue = violation.getInvalidValue(); if (field.contains(""."") && !field.contains(""[]"")) {     // Possibly a bean constraint with property path: retrieve the actual property value.     // However, explicitly avoid this for ""address[]"" style paths that we can't handle.     invalidValue = bindingResult.getRawFieldValue(field); } else if (cd instanceof ConstraintDescriptorImpl) {     ConstraintDescriptorImpl cdImpl = (ConstraintDescriptorImpl) cd;     if (cdImpl.getElementType().equals(ElementType.TYPE)) {         BeanWrapperImpl beanWrapper = new BeanWrapperImpl(invalidValue);         invalidValue = beanWrapper.getPropertyValue(field);     } } ```  in  ```java protected void processConstraintViolations(Set violations, Errors errors) ```  ---  **Affects:** 3.2.1  **Issue Links:** - #14876 GenericConversionService.convert() throws IllegalArgumentException after updating to Spring 3.2.1","closed","type: bug,","spring-projects-issues","2013-03-01T02:53:19Z","2019-01-11T21:02:41Z"
"","15278","Typo in ModelAndViewMethodReturnValueHandler's JavaDoc [SPR-10650]","**[Pavel Horal](https://jira.spring.io/secure/ViewProfile.jspa?name=pavel.horal)** opened **[SPR-10650](https://jira.spring.io/browse/SPR-10650?redirect=false)** and commented  The JavaDoc states:  ```java If the return value is {@code null}, the {@link ModelAndViewContainer#setRequestHandled(boolean)}  flag is set to {@code false} to indicate the request was handled directly. ```  which should in fact be (`false` should be `true`):  ```java If the return value is {@code null}, the {@link ModelAndViewContainer#setRequestHandled(boolean)}  flag is set to {@code true} to indicate the request was handled directly. ```    ---  **Affects:** 4.0 M1  **Reference URL:** https://github.com/SpringSource/spring-framework/blob/master/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ModelAndViewMethodReturnValueHandler.java#L33  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a5c3c12627273c019641108ad51f6f2a4ceff85b, https://github.com/spring-projects/spring-framework/commit/83ea0fb9e043670f8153147c1a79026acfa98f54","closed","type: enhancement,","spring-projects-issues","2013-06-12T13:58:13Z","2013-07-24T10:17:06Z"
"","14873","Multiple PropertySourcesPlaceholderConfigurers do not work with placeholder defaults [SPR-10240]","**[Paul Tomlin](https://jira.spring.io/secure/ViewProfile.jspa?name=ptomli)** opened **[SPR-10240](https://jira.spring.io/browse/SPR-10240?redirect=false)** and commented  While issue #14356 discusses this with respect to PropertyPlaceholderConfigurer, this issue specifically deals with the PropertySourcesPlaceholderConfigurer. I feel there is sufficient difference in their intended usage to warrant another ticket.  A PSPC will register the source with the environment, from which it may later be used by any number of locations requiring property lookup.  The problem is that the current implementation also processes the bean factory **for every instance of PSPC that is configured**. Like #14356, this causes placeholders which are not matched by the current environment to be replaced with their defaults, before later PSPCs have had a chance to load and populate the environment.  In this scenario `@ignore-unresolvable` doesn't help.  The issue really is that there's no way to register a property source, from within XML, without also having all placeholders processed.  There are multiple potential fixes for this, but I'm trying to illustrate there is a real problem.  The below test fails on bean2 because value == ""Borked""  ``` module1.greeting=Hello World ```  ``` module2.greeting=Hello Universe ```  ```        ```  ```        ```  ``` @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration({ 	""classpath:/module1.xml"", 	""classpath:/module2.xml"" }) public class PSPCTest {  	@Autowired 	@Qualifier(""bean1"") 	private Holder bean1;  	@Autowired 	@Qualifier(""bean2"") 	private Holder bean2;  	@Test 	public void testBean1Value() { 		assertEquals(""Hello World"", bean1.getValue()); 	} 	@Test 	public void testBean2Value() { 		assertEquals(""Hello Universe"", bean2.getValue()); 	}  	public static class Holder { 		private String value; 		public void setValue(String value) { 			this.value = value; 		} 		public String getValue() { 			return value; 		} 	} }  ```  ---  **Affects:** 3.1.4, 3.2.1  **Issue Links:** - #14623 Using multiple PropertyPlaceholderConfigurer breaks `@Value` default value behavior (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2013-01-29T23:40:29Z","2019-01-13T07:01:17Z"
"","14865","Allow @PropertySource to be specified on a test class [SPR-10232]","**[Paul Tomlin](https://jira.spring.io/secure/ViewProfile.jspa?name=ptomli)** opened **[SPR-10232](https://jira.spring.io/browse/SPR-10232?redirect=false)** and commented  #### Overview  When using the TestContext framework it would be nice to easily be able to specify some `PropertySources` to be added to the `Environment`, in much the same way as `@ActiveProfiles` allows specifying the active profiles.  Ideally, something like below would result in a `ResourcePropertySource` being registered with the environment of the test's `ApplicationContext` prior to refresh:  ```java @ContextConfiguration @PropertySource(""classpath:foo.properties"") public class MyTest {    // ... } ```  ---  #### Work-around  In Spring Framework 3.1, there is a workaround, but it's not nearly as tidy as the above proposal.  ```java @ContextConfiguration(   locations = { ... },   loader = MyTest.CustomeContextLoader.class ) public class MyTest {   public static class CustomContextLoader extends GenericXmlContextLoader {     @Override     protected void customizeContext(GenericApplicationContext context) {       // exception handling elided       context.getEnvironment()              .getPropertySources()              .addFirst(new ResourcePropertySource(""classpath:foo.properties""));     }   } } ```  There may be something in 3.2.x, probably as a result of #13650 and `ApplicationContextInitializer`, but `ContextLoaderUtils` doesn't seem to suggest so, and I'm not yet familiar enough to know.  ---  #### Analysis  - As with `@ActiveProfiles`, `@PropertySource` declarations on test classes should be inherited by default but overridable. - `@PropertySource` is not an `@Inherited` annotation, but `AnnotationUtils.findAnnotationDeclaringClass()` should take care of this. - Inheritance and overriding behavior of `@PropertySource` in integration tests must be consistent with the existing behavior in `@Configuration` classes.   - See code snippets from `ConfigurationClassPostProcessor` and `ConfigurationClassParser` below. - As far as possible, the existing business logic in `ConfigurationClassParser.processPropertySource()` should be reused and not duplicated in the testing framework; in other words, consider extracting the existing logic into a static utility method or similar. - The context cache key (i.e., `MergedContextConfiguration`) must take _test_ property sources into account.  ###### Relevant code from ConfigurationClassPostProcessor  ```java // ... // Handle any @PropertySource annotations Stack","closed","type: enhancement,","spring-projects-issues","2013-01-29T07:52:18Z","2019-01-13T07:01:19Z"
"","15077","@Value fails to resolve using custom PropertyPlaceholderConfigurer [SPR-10444]","**[Paul Sprague](https://jira.spring.io/secure/ViewProfile.jspa?name=psprague)** opened **[SPR-10444](https://jira.spring.io/browse/SPR-10444?redirect=false)** and commented  I have the following code:  ```java public class BaseConfig {          @Bean     public static PropertyPlaceholderConfigurer propertyPlaceholderConfigurer() {         final Properties properties = new Properties();         properties.put(""token"", ""true"");         properties.put(""some.flag"", ""${token}"");                  final PropertyPlaceholderConfigurer configurer = new PropertyPlaceholderConfigurer();         configurer.setLocalOverride(true);         configurer.setProperties(properties);         return configurer;     }  }  @Configuration @ComponentScan public class Config extends BaseConfig  {      @Inject     public MyService myService; }  @Configuration public class OperationConfig extends BaseConfig {      }  @Named public class MyOperation {      @Value(""${some.flag}"")     public boolean someFlag = false; }  @Named public class MyService {      @Inject     public MyOperation myOperation; } ```  I wrote a test (ConfigTest) for this code, this test passed just fine.  ```java @ContextConfiguration(classes = {Config.class}, loader = AnnotationConfigContextLoader.class) public class ConfigTest extends AbstractJUnit4SpringContextTests {          @Inject     private Config config;      @Test     public void test() {         Assert.assertNotNull(config);         Assert.assertNotNull(config.myService);         Assert.assertNotNull(config.myService.myOperation);         Assert.assertTrue(config.myService.myOperation.someFlag);     } } ```  I thought I might get fancy and test just a specific part of this code by doing the following:  ```java @ContextConfiguration(loader = AnnotationConfigContextLoader.class) public class OperationConfigTest extends AbstractJUnit4SpringContextTests {          @Configuration     @Import(value = OperationConfig.class) //","closed","in: core,","spring-projects-issues","2013-04-05T14:01:14Z","2019-01-11T21:15:33Z"
"","15189","Cannot instantiate bean in Spring when using annotations and when it extends generic abstract class compiled to java 1.4 byte code  [SPR-10559]","**[Paul French](https://jira.spring.io/secure/ViewProfile.jspa?name=paul.french@kirona.com)** opened **[SPR-10559](https://jira.spring.io/browse/SPR-10559?redirect=false)** and commented  Cannot instantiate bean in Spring when using annotations and when it extends generic abstract class compiled to java 1.4 byte code using JSR14 whcih allows you to use generics in your java source but then compile it to java 1.4 byte code.  Major problem for me since I have beans which I can instantiate fine programatically but cannot instantiate using Spring   ---  **Affects:** 3.2.2  **Reference URL:** http://forum.springsource.org/showthread.php?137270-java-lang-reflect-MalformedParameterizedTypeExcept-ion  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/25e29b851dfbb66ff995adf2b12c50f5882b799d, https://github.com/spring-projects/spring-framework/commit/f9db59e730ecbe977fa60a1366836a0bc663cc17","closed","in: core,","spring-projects-issues","2013-05-14T03:17:40Z","2013-05-14T05:52:36Z"
"","15514","tx:annotation-driven and cache:annotation-driven should have order defined as a token [SPR-10886]","**[Paul D Johe](https://jira.spring.io/secure/ViewProfile.jspa?name=pdjohe)** opened **[SPR-10886](https://jira.spring.io/browse/SPR-10886?redirect=false)** and commented  It is not possible to use SPEL expressions to define the order of the aspect for both  *  *   This is because the xsd type is defined in the schema as a 'xs:int' type.  For example, a schema validation exception occurs if this is attempted:  ```   ```  This fails as well:  ```  ```  as order is also defined as a 'xs:int' type and cannot use SPEL either.  The solution is to use xs:token instead of xs:int.  Note that the spring security definition has done this correctly and can be configured as such:  ```  ```  See also previous issue #12001 where this feature was already asked for.  ---  **Affects:** 3.2.4  **Issue Links:** - #12001 Be able to define tx:annotationdriven order attribute as a ref  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/12c393eb6d9ef0b67741eb3ef281922596f78811","closed","type: enhancement,","spring-projects-issues","2013-09-03T13:13:12Z","2019-01-11T22:08:58Z"
"","15042","Properties from @Import-ed Configuration override properties in @Import-ing configuration [SPR-10409]","**[Paul Brabban](https://jira.spring.io/secure/ViewProfile.jspa?name=brabster)** opened **[SPR-10409](https://jira.spring.io/browse/SPR-10409?redirect=false)** and commented  I have a property `test=default` in class DefaultConfig, and I'm making them available using `@PropertySource` annotation.  ``` @Configuration @PropertySource(""classpath:default.properties"") public class DefaultConfig {} ```  I then want to be able to override to `test=override`, which is in a different properties file in class OverrideConfig, so I again use `@PropertySource`.  ``` @Configuration @Import(DefaultConfig.class) @PropertySource(""classpath:override.properties"") public class OverrideConfig {} ```  I configure a test to prove that it works.  ``` @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(classes={OverrideConfig.class}) public class TestPropertyOverride {          @Autowired     private Environment env;          @Test     public void propertyIsOverridden() {     	assertEquals(""override"", env.getProperty(""test""));     }      } ```  Except of course it does not.  > org.junit.ComparisonFailure: expected: but was:  Maxing out debug, I can see what's happening:  > StandardEnvironment:107 - Adding [class path resource [default.properties]] PropertySource with lowest search precedence > StandardEnvironment:107 - Adding [class path resource [override.properties]] PropertySource with lowest search precedence  I can't provide default property values in base configurations and then override them in others.  Am I making a simple mistake or misthinking this, or would you expect the properties defined by an `@PropertySource` in an `@Import-ed` configuration class to be overridden by properties defined in am `@PropertySource` in the `@Import-ing` class?   ---  **Affects:** 3.2 GA  **Reference URL:** http://stackoverflow.com/questions/15577125/overriding-spring-propertysource-by-import  4 votes, 7 watchers","closed","in: core,","spring-projects-issues","2013-03-23T01:40:59Z","2019-08-07T17:26:55Z"
"","15524","Memory Leak in AbstractBeanFactory, alreadyCreated HashSet not cleaned on failure in doGetBean [SPR-10896]","**[Paul Anderson](https://jira.spring.io/secure/ViewProfile.jspa?name=deviljelly)** opened **[SPR-10896](https://jira.spring.io/browse/SPR-10896?redirect=false)** and commented  In the doGetMethod the bean name to alreadyCreated HashSet but if there is a failure in creation this entry is not removed leading to a leak.  In our particular case the bean is a redirect with a name containing all of the unique parameters. getMergedLocalBeanDefinition, which is not in a try-catch block, throws a NoSuchBeanException therefore doGetBean throws without removing the entry from alreadyCreated.  And it would appear that at no other failure point in the method is the entry removed from Already created.  This has also be noted by CXF and worked around in their code (https://issues.apache.org/jira/browse/CXF-4795)  Which also lead to the same local fix in Mule (https://github.com/mulesoft/mule/pull/21)   ---  **Affects:** 3.2.4, 4.0 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/13a68c60602f3379bc69ef641e98e41ade0d995b, https://github.com/spring-projects/spring-framework/commit/e213561dac6df29f9d2765e148683664194b066f","closed","in: core,","spring-projects-issues","2013-09-05T02:29:04Z","2013-10-31T12:28:01Z"
"","14978","PropertySourcesPlaceholderConfigurer incorrectly handles local-override [SPR-10344]","**[Patrick Crocker](https://jira.spring.io/secure/ViewProfile.jspa?name=patrick.crocker@gmail.com)** opened **[SPR-10344](https://jira.spring.io/browse/SPR-10344?redirect=false)** and commented  Given a local property (system or environment) and a property defined in a file (or properties-ref) with the same key, the PropertySourcesPlaceholderConfigurer with local-override=""false"" will improperly return the value from the local property (setting local-override=""true"" will return the file/properties-ref value).  This behaviour is opposite from the PropertyPlaceholderConfigurer.   ---  **Affects:** 3.2.1","closed","in: core,","spring-projects-issues","2013-02-28T11:29:04Z","2019-01-13T21:04:10Z"
"","15139","AbstractAutowireCapableBeanFactory.predictBeanType returns parent type instead of class="""" value [SPR-10507]","**[pascal gehl](https://jira.spring.io/secure/ViewProfile.jspa?name=paskos)** opened **[SPR-10507](https://jira.spring.io/browse/SPR-10507?redirect=false)** and commented  Introduction: I have some code that used to work since 2-3 years. I just moved from version 3.1.3.RELEASE to 3.2.2.RELEASE. And suddenly it stopped working.  Here are my beans:  ```xml                        ```  Both isAliveResource and simpleIsAliveResource are JAX-RS annotated classes.  ``` @Path(IS_ALIVE_URI) @Produces(APPLICATION_XML) public class IsAliveResource extends AbstractIsAliveResource { ```  ``` @Path(IS_SIMPLE_ALIVE_URI) public class SimpleIsAliveResource extends AbstractIsAliveResource { ```  Somewhere else in my code I do:  ``` Set resources = getApplicationContext().getBeansWithAnnotation(Path.class); ```  In 3.1.3.RELEASE both isAliveResource and simpleIsAliveResource where found. Since moving to 3.2.2.RELEASE none of them are found. I debugged and finally found that AbstractAutowireCapableBeanFactory.predictBeanType changed and now returns com.cie.isalive.server.rest.AbstractIsAliveResource class instead of respective beans com.cie.isalive.server.rest.SimpleIsAliveResource and com.cie.isalive.server.rest.IsAliveResource.  Since AbstractIsAliveResource is not annotated then the beans are not found.  It is a major issue since we cannot use abstract beans for default annotated beans configuration anymore.  Thanks in advance.  Pascal  ---  **Affects:** 3.2.2  **Issue Links:** - #15007 Type detection fails for child bean if parent bean has been resolved before (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2013-04-30T13:58:03Z","2019-01-11T22:18:51Z"
"","14709","Add log statement of exception that succesfully triggered transaction rollback [SPR-10076]","**[pas filip](https://jira.spring.io/secure/ViewProfile.jspa?name=pasfilip)** opened **[SPR-10076](https://jira.spring.io/browse/SPR-10076?redirect=false)** and commented  TransactionAspectSupport optionally performs a rollback if an exception is thrown from a transactional method. There is nothing being logged when this occurs. I would like my logs to contain the exception that caused the transaction to rollback succesfully including the stacktrace. I would leave it up to you decide at which level to log this and wether or not to use a seperate logger to log this information. Personally I would suggest logging this information at info level, or use a seperate logger, since it's a normal event to occur. Using trace level would add too much noise to the logs.  Below a code sample of the current method I'd like to see updated with the suggested code change in comment:      protected void completeTransactionAfterThrowing(TransactionInfo txInfo, Throwable ex) {     	if (txInfo != null && txInfo.hasTransaction()) {     		if (logger.isTraceEnabled()) {     			logger.trace(""Completing transaction for ["" + txInfo.getJoinpointIdentification() +     					""] after exception: "" + ex);     		}     		if (txInfo.transactionAttribute.rollbackOn(ex)) {     			try {     				txInfo.getTransactionManager().rollback(txInfo.getTransactionStatus());  /* if ( logger.isInfoEnabled() ){ logger.info(""rolled back transaction for:""+txInfo.getJoinpointIdentification()+"" due to thrown ""+ex.getClass().getName(),ex); } */ } catch (TransactionSystemException ex2) { logger.error(""Application exception overridden by rollback exception"", ex); ex2.initApplicationException(ex); throw ex2; } catch (RuntimeException ex2) { logger.error(""Application exception overridden by rollback exception"", ex); throw ex2; } catch (Error err) { logger.error(""Application exception overridden by rollback error"", ex); throw err; } } else { // We don't roll back on this exception. // Will still roll back if TransactionStatus.isRollbackOnly() is true. try { txInfo.getTransactionManager().commit(txInfo.getTransactionStatus()); } catch (TransactionSystemException ex2) { logger.error(""Application exception overridden by commit exception"", ex); ex2.initApplicationException(ex); throw ex2; } catch (RuntimeException ex2) { logger.error(""Application exception overridden by commit exception"", ex); throw ex2; } catch (Error err) { logger.error(""Application exception overridden by commit error"", ex); throw err; } } } }    ---  **Affects:** 3.2 RC2  1 votes, 1 watchers","closed","status: bulk-closed,","spring-projects-issues","2012-12-05T15:50:06Z","2019-01-12T02:35:48Z"
"","15304","Define a zero argument constructor in StandardServletAsyncWebRequest [SPR-10676]","**[Osamu Nagano](https://jira.spring.io/secure/ViewProfile.jspa?name=onagano)** opened **[SPR-10676](https://jira.spring.io/browse/SPR-10676?redirect=false)** and commented  This is a suggestion because JBoss complains that this component doesn't have the default constructor.  See [1] for detail.  I'm not sure that this is applicable to StandardServletAsyncWebRequest, though at leaset, any instance of `AsyncListener` returned by `javax.servlet.AsyncContext#createListener` must define a zero argument constructor [2].  [1] http://stackoverflow.com/questions/13786685/spring3-2-and-jboss-as-7 [2] http://docs.oracle.com/javaee/6/api/javax/servlet/AsyncContext.html#createListener%28java.lang.Class%29   ---  **Affects:** 3.2.3  **Reference URL:** https://github.com/SpringSource/spring-framework/pull/302  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2013-06-24T00:37:18Z","2013-07-31T15:37:58Z"
"","15346","X-Forwarded-Host handling in ServletUriComponentsBuilder does not treat ports correctly [SPR-10718]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-10718](https://jira.spring.io/browse/SPR-10718?redirect=false)** and commented  According to the [spec](http://tools.ietf.org/html/draft-ietf-httpbis-p1-messaging-19#section-5.4), a `Host` value consists of a uri-host and an optional port. So when inspecting the `X-Forwarded-Host` header we have to split uri-host and port and set the values appropriately. Currently the port is still part of the host.  This was originally reported against Spring HATEOAS in [this ticket](https://github.com/SpringSource/spring-hateoas/pull/90).  ---  **Affects:** 3.2.3  **Issue Links:** - #15329 ServletUriComponentsBuilder doesn't work if X-Forwarded-Host is in host:port format (_**""duplicates""**_) - #14743 Add support for X-Forwarded-Host in ServletUriComponentsBuilder - #17368 Regression in 4.1.5: UriComponentsBuilder.fromHttpRequest sets port to 80 i.s.o nothing/443","closed","type: enhancement,","spring-projects-issues","2013-07-03T06:04:41Z","2019-01-11T22:28:11Z"
"","15306","Regression in SharedEntityManagerCreator [SPR-10678]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-10678](https://jira.spring.io/browse/SPR-10678?redirect=false)** and commented  The cleanup made in [9caa514c69d1282e40daa065a779ea58f356e593](https://github.com/SpringSource/spring-framework/commit/9caa514c69d1282e40daa065a779ea58f356e593) for `SharedEntityManagerCreator.createSharedEntityManager(EntityManagerFactory emf, Map properties, boolean synchronizedWithTransaction)` introduces a `NullPointerException` being thrown in case `EntityManagerFactoryInfo` returns `null` for `….getEntityManagerInterface()`.  The delegating call to `….createSharedEntityManager(EntityManagerFactory emf, Map properties, boolean synchronizedWithTransaction, Class... entityManagerInterfaces)` will wrap the `null` value into an array with a `null` element, which `Proxy.newProxyInstance(…)` will reject with a `NullPointerException` eventually.  A possible fix is to guard against the `null` returned and hand an empty array to the delegating call. Pull request in progress.   ---  **Issue Links:** - [DATAGRAPH-363](https://jira.spring.io/browse/DATAGRAPH-363) Spring Data Neo4j doesn't work with Spring 4.0.0.BUILD-SNAPSHOT (_**""is depended on by""**_)","closed","type: bug,","spring-projects-issues","2013-06-24T07:25:54Z","2013-07-24T10:17:14Z"
"","15296","Self-injection in configuration class hierarchies broken [SPR-10668]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-10668](https://jira.spring.io/browse/SPR-10668?redirect=false)** and commented  Assume you have a configuration class autowiring a component a subclass of this config class might declare:  ```java @Configuration class ParentConfig {    @Autowired(required = false) MyComponent component; }  @Configuration class ChildConfig extends ParentConfig {    @Bean   public MyComponentImpl myComponent() { … } } ```  This fails with a rather ambiguous:  ``` Caused by: java.lang.IllegalArgumentException: Object of class [null] must be an instance of interface org.springframework.beans.factory.config.ConfigurableBeanFactory   at org.springframework.util.Assert.isInstanceOf(Assert.java:339)   at org.springframework.util.Assert.isInstanceOf(Assert.java:319)   at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.getBeanFactory(ConfigurationClassEnhancer.java:414)   at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:289)   at de.olivergierke.samples.spring.ConfigClassExtensionTest$ChildConfig$$EnhancerByCGLIB$$769c39d2.myComponent() ```  This seems to be caused by the fix for #14941. Previously a `BeanFactory` instance had been available at the point in time when the autowiring happens. As of the change, the `BeanFactory` will be injected through an `BeanFactoryAware` call which by Spring's lifecycle happens **after** property injection. Thus the required `BeanFactory` is `null` when the injection shall happen and thus it fails.  I have an executable sample for this at http://github.com/olivergierke/spring-samples. Steps to reproduce:  1. Clone the repo: 2. Run `mvn clean test` -> works 3. Upgrade Spring version in the `pom.xml` to 4.0.0.BUILD-SNAPSHOT 4. Run `mvn clean test` -> fails  ---  **Issue Links:** - [DATAGRAPH-363](https://jira.spring.io/browse/DATAGRAPH-363) Spring Data Neo4j doesn't work with Spring 4.0.0.BUILD-SNAPSHOT (_**""is depended on by""**_) - #19498 NPE in LoadTimeWeavingConfiguration: loadTimeWeaver() called too early  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a403e8f8b881c743e5e7a16a26690500595725be","closed","in: core,","spring-projects-issues","2013-06-19T04:17:02Z","2019-01-11T22:23:00Z"
"","15195","Properly document the use of MVC Java config with multiple (independent) components contributing configuration [SPR-10565]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-10565](https://jira.spring.io/browse/SPR-10565?redirect=false)** and commented  Assume you have to JavaConfig classes extending `WebMvcConfigurationSupport`, both overriding one of the callbacks of the parent class. Only the first one registered actually gets the callback invoked. See the following test case, the assertion fails with only one resolver registered.  ```java @RunWith(MockitoJUnitRunner.class) public class ConfigTest {  	@Mock 	static HandlerMethodArgumentResolver resolver;  	@Configuration 	static class FirstConfig extends WebMvcConfigurationSupport {  		@Override 		protected void addArgumentResolvers(List argumentResolvers) { 			argumentResolvers.add(resolver); 		} 	}  	@Configuration 	static class SecondConfig extends WebMvcConfigurationSupport {  		@Override 		protected void addArgumentResolvers(List argumentResolvers) { 			argumentResolvers.add(resolver); 		} 	}  	@Test 	public void foo() {  		AnnotationConfigWebApplicationContext context = new AnnotationConfigWebApplicationContext(); 		context.setServletContext(new MockServletContext()); 		context.register(FirstConfig.class); 		context.register(SecondConfig.class); 		context.refresh();  		RequestMappingHandlerAdapter adapter = context.getBean(RequestMappingHandlerAdapter.class); 		assertThat(adapter.getCustomArgumentResolvers().size(), is(2)); 	} } ```    ---  **Affects:** 3.2.2  0 votes, 5 watchers","closed","type: task,","spring-projects-issues","2013-05-15T03:03:10Z","2013-12-11T23:57:21Z"
"","15191","Improve behavior in accidental error cases for AOP, JavaConfig and too broad pointcuts [SPR-10561]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-10561](https://jira.spring.io/browse/SPR-10561?redirect=false)** and commented  JavaConfig configuration classes are treated just like every other Spring bean to support autowiring etc. This results in them being candidates to be advised by AOP aspects. Assume some user (accidentally) defined a pointcut that the configuration class' methods match. When looing up bean configured in that configuration class, an instance of the configuration class is created.  The AOP infrastructure now detects the config instance being target for advices and creates a JDK proxy for it. It will be a JDK proxy by default as the CGlib generated subclass exposes interfaces. As a consequence, that proxy won't expose the original `@Bean` methods anymore which leads to weird exceptions saying something like: ""Factory method `myBeanMethod()` not found on `ConfigurationClass`"" although the method is in fact declared. This effect can be worked around by activating `proxyTargetClass` for the AOP subsystem - but this requires deep knowledge of how the container works in the first place.  Even if you took that hurdle, you'll still run into a cyclic dependency as the configuration class instance would then be attempted to be advised by an aspect that is most likely to be produced by that configuration. Again you can solve this by explicitly excluding the configuration classes from the pointcuts but it's probably not really obvious why you have to do this in the first place.  1. Would it make sense to exclude configuration classes from being advised at all? There's hardly a scenario I can think of this is really usefull in, especially as you're close to guaranteed to run into the cyclic dependency issue. 2. Can we at least trigger an INFO log in case a configuration class get's adviced? This would at least make the user aware of the very edge case she ran into. 3. If 1. is out of scope for backwards comptibility (although I doubt anyone is deliberately using this effect) the DI container should inspect the proxy target for the factory methods if it sees and instance of `Advised`.    ---  **Affects:** 3.2.2  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2013-05-14T06:29:05Z","2013-12-03T15:15:34Z"
"","15148","Lookup of beans of type fails for factory beans if type prediction is used. [SPR-10517]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-10517](https://jira.spring.io/browse/SPR-10517?redirect=false)** and commented  Assume the following `FactoryBean` implementation:  ```java class FactoryBeanImpl implements FactoryBean, MyInterface { … } ```  Beyond that, assume a `BeanPostProcessor` implementation that predicts the bean type of that `FactoryBean` to an arbitrary different type `X`. Now assume the following lookup code:  ```java String[] names = beanFactory.getBeanNamesOfType(MyInterface.class); ```  This call returns an empty array if the bean instance for `FactoryBeanImpl` has not been created, but returns the name of the bean (as expected) once the instance has been created.  The reason for that behavior seems to start in `DefaultListableBeanFactory.doGetBeanNamesForType(…), at the line where we try to find the match for the factory bean name. This code calls {{isTypeMatch(…)`. The first step it does is trying to lookup an already existing instance. In our second case (bean has already been created before) we run in this if clause and finally end up in the `ClassUtils.isAssignableValue(typeToMatch, beanInstance)` call, which results int `true` being returned.  If no instance has been created we run down until the call to `predictBeanType(…)`. This call will set `beanClass` to the predicted type so that the type match is done against the **predicted bean type** although we're testing the factory dereference explicitly. IMO the code has to be changed to:  ```java Class beanClass = BeanFactoryUtils.isFactoryDereference(name) ? resolveBeanClass(mbd, beanName, FactoryBean.class) : predictBeanType(beanName, mbd, FactoryBean.class, typeToMatch); ```  ---  **Affects:** 3.1.4, 3.2.2  **Issue Links:** - [DATAJPA-323](https://jira.spring.io/browse/DATAJPA-323) org.springframework.data.repository.support.Repositories doesn't find RepositoryFactoryInformation beans when using `@EnableJpaRepositories` (_**""is depended on by""**_) - #13815 BeanFactory does not return FactoryBeans by type when using type prediction and bean not yet created - #13594 BeanFactory does not return FactoryBeans in case the are looked up by type and type prediction is used  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bc3e5851b3212d5ac2599eeb30038a1eff3ffae5, https://github.com/spring-projects/spring-framework/commit/ef363b0f7a7c5d5c41b6cf9bdf5e52291d2a5954  0 votes, 5 watchers","closed","in: core,","spring-projects-issues","2013-05-04T13:52:59Z","2019-01-13T07:00:11Z"
"","15144","Improve defaulting of media types via ContentNegotiationManager  [SPR-10513]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-10513](https://jira.spring.io/browse/SPR-10513?redirect=false)** and commented  The mechanism in place to configure a default media type is currently applied to default the requested media types. So it is essentially only kicking in if the client either sends no `Accept` header at all or an empty header. Unfortunately most clients send `\*/\*` to indicate they don't have a preference.  This causes FixedContentNegotiationStrategy to never get called, as `Accept:\*/\*` essentially causes the HeaderContentNegotiationStrategy to return a value and that skips the remaining strategies.  `\*/\*` in turn indicates all `HttpMessageConverters` being tried which might cause one being picked that doesn't reflect the requested default (e.g. imagine a class annotated with `@XmlRootElement` and the defaulting configured to JSON. It would still be rendered as XML as the JAXB-based converter comes before the Jackson one).  ---  **Affects:** 3.2.2  **Issue Links:** - #15462 3.2.4 View Resolver Issue when defaultContentType Property Defined  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2013-05-03T12:04:56Z","2019-01-11T22:17:58Z"
"","15143","Jaxb2Marshaller doesn't need to depend on ResourceLoaderAware and thus spring-context [SPR-10512]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-10512](https://jira.spring.io/browse/SPR-10512?redirect=false)** and commented  `Jaxb2Marshaller` implements `ResourceLoaderAware` from the context module. It seems to be the only dependency pointing into that module. It seems that the internals could be changed so that the class only needs to implement `BeanClassLoaderAware` which would allow the OXM module to be used with spring-beans and spring-core only.   ---  **Affects:** 3.2.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/255eab5bed57c8e8695e5b93a31397333a51483a, https://github.com/spring-projects/spring-framework/commit/0df1630ab9e8ebc996f520f7fe0b0e6c1551af13","closed","type: enhancement,","spring-projects-issues","2013-05-03T07:55:50Z","2013-05-03T08:20:37Z"
"","15137","Support advanced URI Template Syntax [SPR-10505]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-10505](https://jira.spring.io/browse/SPR-10505?redirect=false)** and commented  There is an [updated RFC](http://tools.ietf.org/html/rfc6570) for URI templates. Would b cool if we could either add features to current `UriTemplate` or come up with a dedicated abstraction.  ---  **Affects:** 3.2.2  **Sub-tasks:** - #17535 Support RFC 6570 style URI template encoding  **Issue Links:** - #18706 Support limited subset of RFC 6570 syntax including operators """", ""?"", ""/"", ""#"" (_**""is duplicated by""**_) - #17347 Provide option in RestTemplate to encode slash in URI variables - #16028 spring:url tag does not correctly encode forward slash / in path variable. Should be calling encodePathSegment - #16275 UriTemplate does not escape semicolons in path segments  1 votes, 9 watchers","closed","type: enhancement,","spring-projects-issues","2013-04-30T10:06:54Z","2019-01-13T21:03:43Z"
"","15094","Spring Core source distributions should contain sources of repackaged classes [SPR-10461]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-10461](https://jira.spring.io/browse/SPR-10461?redirect=false)** and commented  As of version 3.2, Spring Core ships with ASM and CGLib classes repackaged. Unfortunately the source JARs of Spring Core do not contain these sources of these classes, so that you cannot step into these e.g. when debugging.  ---  **Affects:** 3.2.2  **Issue Links:** - #14965 Add cglib sources to spring-core sources artifact (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2013-04-12T09:29:47Z","2019-01-11T21:13:28Z"
"","15083","SpEL's BeanFactoryResolver should inspect BeanFactory hierarchy [SPR-10450]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-10450](https://jira.spring.io/browse/SPR-10450?redirect=false)** and commented  `BeanFactoryResolver` currently uses `….getBean(…)` to lookup Spring beans. If executed against a web application context this will not find Spring beans declared in the root application context.   --- No further details from [SPR-10450](https://jira.spring.io/browse/SPR-10450?redirect=false)","closed","in: core,","spring-projects-issues","2013-04-08T08:11:40Z","2019-01-12T05:27:06Z"
"","15076","Allow injecting EntityManagers through constructor injection (and at non-@PersistenceContext injection points in general) [SPR-10443]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-10443](https://jira.spring.io/browse/SPR-10443?redirect=false)** and commented  Currently you can inject any Spring bean into clients through constructor injection. A JPA `EntityManager` is an exception to that. Constructor injection has the benefit of being able to design classes in an immutable way. Also, you communicate required dependencies through it easily. Sadly, `@PersistenceContext` cannot be used on a constructor parameter and this probably won't change befor JPA 2.2 (giving 2.1 is close to final).  It would be cool to simply be able to inject `EntityManager` instances through either `@Autowired` or `@Inject`.   ---  **Issue Links:** - [DATAJPA-445](https://jira.spring.io/browse/DATAJPA-445) Enable support to inject EntityManager via constructor  12 votes, 17 watchers","open","has: votes-jira,","spring-projects-issues","2013-04-05T13:42:51Z","2022-03-11T23:03:38Z"
"","14995","UriComponentsBuilder.fromUriString(…) throws exception for empty fragment [SPR-10363]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-10363](https://jira.spring.io/browse/SPR-10363?redirect=false)** and commented  ```java UriComponentsBuilder.fromUriString(""/foo#""); ```  Throws an exception originating from `UriComponentsBuilder.fragment(…)` rejecting empty strings. I think `….fromUriString(…)` should check the fragment part parsed from the given URI and refrain from calling `….fragment(…)` if it is empty.   ---  **Affects:** 3.2.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3eb361066067438efbcf0758e78f229e2655a599","closed","type: bug,","spring-projects-issues","2013-03-08T07:39:08Z","2013-03-08T22:16:28Z"
"","14991","Provide annotation based alternative to AbstractAnnotationConfigDispatcherServletInitializer [SPR-10359]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-10359](https://jira.spring.io/browse/SPR-10359?redirect=false)** and commented  Most of the `WebApplicationInititalizer` implementations based on `AbstractAnnotationConfigDispatcherServletInitializer` look like this:  ```java public class MyWebApplicationInitializer extends AbstractAnnotationConfigDispatcherServletInitializer {    @Override   protected Class[] getRootConfigClasses() {     return new Class[] { ApplicationConfig.class };   }    @Override   protected Class[] getServletConfigClasses() {     return new Class[] { WebConfig.class };   }    @Override   protected String[] getServletMappings() {     return new String[] { ""/"" };   } } ```  It would be cool if this could be boiled down to this:  ```java @InitWebApplication(   rootConfig = ApplicationConfig.class,   webConfig = WebConfig.class,   mapping = ""/"") public abstract class MyWebApplicationInitializer implements WebApplicationInitializer { } ```  Alternatively we could introduce annotations to mark configuration classes directly:  ```java public abstract class MyWebApplicationInitializer implements WebApplicationInitializer {    @RootContext   public static class ApplicationConfig { … }    @WebContext   public static class WebConfig { … } } ```  The latter probably has the issue of ordering as looking up the static classes probably does not return them in a predefined order (in case there are multiple ones defined to get into the `@WebContext`. Also the servlet mapping definition does not fit into this model nicely. I just thought to document it as a slightly less usable alternative.   --- No further details from [SPR-10359](https://jira.spring.io/browse/SPR-10359?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2013-03-07T02:54:45Z","2019-01-12T00:25:09Z"
"","14990","AbstractAnnotationConfigDispatcherServletInitializer could default servlet mapping to / [SPR-10358]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-10358](https://jira.spring.io/browse/SPR-10358?redirect=false)** and commented  If you're using `AbstractAnnotationConfigDispatcherServletInitializer` as base class for your `WebApplicationInitializer` your in comfort mode anyway. Would it make sense to assume a default servlet mapping of `/` to free me from needing to implement this method the same way each and every time?  The change should break any existing implementations as users have to implement the method right now and thus would simply override it.   ---  **Affects:** 3.2.1","closed","type: enhancement,","spring-projects-issues","2013-03-07T02:46:38Z","2018-12-05T15:01:30Z"
"","14896","Allow usage of @Lazy on injection points [SPR-10353]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-10353](https://jira.spring.io/browse/SPR-10353?redirect=false)** and commented  To express the lazy referral to a Spring bean, clients can currently use `@Inject` `Provider` interface as follows:  ```java class Client {    @Autowired   Provider lazyReferral;  } ```  To eventually access the bean, the client has to call `get()` on it. This could be even streamlined by allowing the usage of `@Lazy` as follows:  ```java class Client {    @Lazy @Autowired   Server lazyReferral;  } ```  During the autowiring this could - in case a unique injection candidate is found - automatically create a `ProxyFactoryBean` using a `LazyInitTargetSource` to point to the selected injection target and expose the type of the injection point through the proxy.  The entire scenario of defining the laziness of the access **from the client side** is really useful in case aspects might need to reach out to user implemented types but want to do this as lazy as possible to prevent initialization cycles (see [SEC-2136](https://jira.spring.io/browse/SEC-2136), [DATACMNS-292](https://jira.spring.io/browse/DATACMNS-292) for examples).   ---  **Issue Links:** - [SEC-2136](https://jira.spring.io/browse/SEC-2136) Injecting Bean in a class used in custom PermissionEvaluator leads to NoSuchBeanDefinitionException - [DATACMNS-292](https://jira.spring.io/browse/DATACMNS-292) Spring Data Repositories Cannot be used inside Advice w/ an AbstractAdvisorAutoProxyCreator  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4447248a836ede1924ea6f862e06db30ec6f25d7  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2013-03-05T01:18:16Z","2013-08-29T16:20:47Z"
"","14954","Add TypeFilter implementation for ANT style patterns [SPR-10320]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-10320](https://jira.spring.io/browse/SPR-10320?redirect=false)** and commented  When using `` and `` elements to restrict component scanning, a common use case is to in- or exclude entire packages. The most convenient way to achieve that currently is the regex filter which has the downside of one needing to escape special characters.  Especially as the `base-package` attribute in the parent element supports simple * and ** wildcards, I think it makes sense to provide a simple (ANT-style) filter out of the box so that you can write something like this:  ```xml      ```  Might be worth making this the default then as it's consistent to the expression style in `base-package` and we should introduce any regressions as the attribute is currently required.   ---  1 votes, 1 watchers","closed","status: bulk-closed,","spring-projects-issues","2013-02-21T00:23:44Z","2019-01-12T02:33:38Z"
"","14945","Reference documentation declares inner beans being prototypes, which is wrong [SPR-10311]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-10311](https://jira.spring.io/browse/SPR-10311?redirect=false)** and commented  The reference documentation on [inner beans](http://static.springsource.org/spring/docs/3.2.x/spring-framework-reference/html/beans.html#beans-inner-beans) states inner beans become prototyped beans which is wrong.  I gave it a quick try and in contrast to what is documented in the section for prototype beans, the inner bean indeed gets destruction callbacks applied. I guess the original statement intended to describe multiple instances being created. But if the bean does not really become a prototype scoped bean we shouldn't use the analogy here.   ---  **Affects:** 3.2.1","closed","type: bug,","spring-projects-issues","2013-02-18T02:07:50Z","2014-10-10T11:05:35Z"
"","14832","Add capability to use WebApplicationInitializer for testing Spring web applications [SPR-10199]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-10199](https://jira.spring.io/browse/SPR-10199?redirect=false)** and commented  #### Overview  Spring-based Servlet 3 web applications are typically bootstrapped using a `WebApplicationInitializer` which contains configuration of both a root and a dispatcher servlet context, additional filters, etc. The setup required is much more verbose as one can see [here](https://github.com/olivergierke/spring-restbucks/blob/master/src/test/java/org/springsource/restbucks/AbstractWebIntegrationTest.java#L57) for example.  Even more than the plain code needed to set this up, the main problem with this approach is that it essentially duplicates what is being done in the application's [`WebApplicationInitializer` implementation](https://github.com/olivergierke/spring-restbucks/blob/master/src/main/java/org/springsource/restbucks/RestbucksWebApplicationInitializer.java#L54).  #### Proposal  The aforementioned duplication is a maintenance burden that could be resolved by supporting the setup of a `MockMvc` instance from a concrete subclass of Spring's `AbstractContextLoaderInitializer`, `AbstractDispatcherServletInitializer`, or `AbstractAnnotationConfigDispatcherServletInitializer`. The most elegant way IMO would be to allow defining the initializer class in an attribute of `@WebAppConfiguration` and then autowire a `MockMvc` instance into the test case like this:  ```java import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*; import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;  @RunWith(SpringJUnit4ClassRunner.class) @WebAppConfiguration(initializer = WebApplicationInitializerImpl.class) public class ExampleTests {      @Autowired     private MockMvc mockMvc;      @Test     public void getAccount() throws Exception {         // … test code     } } ```    ---  **Affects:** 3.2.2  9 votes, 14 watchers","closed","status: bulk-closed,","spring-projects-issues","2013-01-21T12:25:41Z","2019-01-12T02:35:14Z"
"","14825","MockHttpServletRequest must not throw an exception on getParameter(null) [SPR-10192]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-10192](https://jira.spring.io/browse/SPR-10192?redirect=false)** and commented  The JavaDoc of `ServletRequest` does not specify the parameter name to be a non-`null` value. So we have to deal with clients calling the method with a `null` value leniently and simply return `null`.  Servlet containers like Jetty are not as strict and thus one might stumble over this issue only when using e.g. Spring MVC testing framework.   ---  **Issue Links:** - [DATAREST-60](https://jira.spring.io/browse/DATAREST-60) AbstractRepositoryRestController potentially calls HttpServletRequest.getParameter(…) with null  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c1a4f5c0fe5bf9defb252b30197c08d138be42da, https://github.com/spring-projects/spring-framework/commit/01f31027d79297f1c13e44d71b8ea41e5f95eb86  **Backported to:** [3.1.4](https://github.com/spring-projects/spring-framework/milestone/83?closed=1)","closed","type: bug,","spring-projects-issues","2013-01-18T10:48:32Z","2013-01-21T01:43:33Z"
"","15285","Cached MethodExecutor invokes wrong method [SPR-10657]","**[Oliver Becker](https://jira.spring.io/secure/ViewProfile.jspa?name=obecker)** opened **[SPR-10657](https://jira.spring.io/browse/SPR-10657?redirect=false)** and commented  The readme.txt in module spring-expression asks whether the caching of (method) executors can do any harm.  It can. At least it may lead to the invocation of the wrong method, if there are overloaded methods of the same name with different parameter types.  ---  **Affects:** 3.2.3, 4.0 M1  **Reference URL:** https://github.com/SpringSource/spring-framework/blob/02a4473c62d8240837bec297f0a1f3cb67ef8a7b/spring-expression/readme.txt  **Attachments:** - [CachedMethodExecutorTest.java](https://jira.spring.io/secure/attachment/21238/CachedMethodExecutorTest.java) (_1.42 kB_)  **Sub-tasks:** - #15312 Backport ""Cached MethodExecutor invokes wrong method""  **Issue Links:** - #15085 SPEL and Enum variable resolution using wrong cachedExecutor - #15511 Race condition in org.springframework.expression.spel.ast.MethodReference","closed","in: core,","spring-projects-issues","2013-06-16T10:14:37Z","2019-01-11T22:23:36Z"
"","15218","SpEL: Enhance FunctionReference for executing dynamically assigned methods [SPR-10589]","**[Oliver Becker](https://jira.spring.io/secure/ViewProfile.jspa?name=obecker)** opened **[SPR-10589](https://jira.spring.io/browse/SPR-10589?redirect=false)** and commented  The class `FunctionReference` for representing function calls in the SpEL has several issues.  1. It can invoke only static `java.lang.reflect.Method` instances. This prevents assigning and executing dynamically created functions that are not known at compile time (because in the executed static method there is no way of determining which function name has been used in the SpEL expression). However, the expression package provides already the `MethodExecutor` interface that can be used to abstract the execution of a concrete method. I suggest that a `FunctionReference` can also handle instances of `MethodExecutor`. 2. The class documentation (javadoc) as well as some inline comments talk about the usage of ""lambda function definitions"" that may be created in a SpEL expression. However, there is nothing in the code of `FunctionReference` that handles such lambda expressions. 3. In the case of an invalid value registered for the function name in the expression context the message of the thrown exception is misleading. It says ""The function '[…]' mapped to an object of type 'class org.springframework.expression.TypedValue' which cannot be invoked."" However, the class `TypedValue` is always the type of object `o`, so instead of `o.getClass()` the result of `o.getValue().getClass()` (or alternatively `o.getTypeDescriptor().getType()`) must be used when constructing the exception message.    ---  **Affects:** 3.2.3, 4.0 M1  0 votes, 5 watchers","closed","status: bulk-closed,","spring-projects-issues","2013-05-26T12:47:36Z","2019-01-12T03:42:11Z"
"","14801","Handle nulls returned by ServletContext#addServlet() invocation in AbstractDispatcherServletInitializer#registerDispatcherServlet() method [SPR-10168]","**[Oleksandr Bondarenko](https://jira.spring.io/secure/ViewProfile.jspa?name=oleksandr.s.bondarenko)** opened **[SPR-10168](https://jira.spring.io/browse/SPR-10168?redirect=false)** and commented  According to ServletContext JavaDoc the method [addServlet()](http://docs.oracle.com/javaee/6/api/javax/servlet/ServletContext.html#addServlet(java.lang.String, javax.servlet.Servlet)) may return null. With the current implementation we get NullPointerException in such situation though it would be more helpful for a user to get some helpful notification about that. Also we could introduce null check around the use of [ServletRegistration.Dynamic](http://docs.oracle.com/javaee/6/api/javax/servlet/ServletRegistration.Dynamic.html) instance returned from addServlet().   ---  **Affects:** 3.2 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/902a136b6e7accf4aa4c8f6be1988e2cecb000ef","closed","type: task,","spring-projects-issues","2013-01-12T09:37:58Z","2013-01-21T11:53:40Z"
"","15496","Minor code tweaks in Apache HttpClient based HTTP request factories [SPR-10869]","**[Oleg Kalnichevski](https://jira.spring.io/secure/ViewProfile.jspa?name=olegk)** opened **[SPR-10869](https://jira.spring.io/browse/SPR-10869?redirect=false)** and commented  Post #13446 minor code tweaks in HTTP request factories based on Apache HttpClient and Apache HttpAsyncClient. Most of the changes are related to the use of new HttpClient 4.3 configuration APIs.  ---  **Reference URL:** https://github.com/SpringSource/spring-framework/pull/350","closed","in: core,","spring-projects-issues","2013-08-28T05:10:08Z","2019-01-11T22:09:06Z"
"","14980","Inconsistent JdbcOperations usage [SPR-10346]","**[Oleg Alexeyev](https://jira.spring.io/secure/ViewProfile.jspa?name=blacklion)** opened **[SPR-10346](https://jira.spring.io/browse/SPR-10346?redirect=false)** and commented  While there JdbcTemplate implements JdbcOperations interface, some of the JDBC classes accept JdbcTemplate, not JdbcOperations.  Normally in our applications we use JdbcOperations, which basically encapsulates DataSource. Sometimes it's handy to mock it if need to test some JDBC specific code.  But then for instance SimpleJdbcInsert accepts only JdbcTemplate, which is inconvenient.   ---  **Affects:** 3.2.1","closed","status: declined,","spring-projects-issues","2013-03-01T03:28:53Z","2019-01-12T16:24:17Z"
"","14907","@Bean method parameters are not properly passed [SPR-10273]","**[Oleg Alexeyev](https://jira.spring.io/secure/ViewProfile.jspa?name=blacklion)** opened **[SPR-10273](https://jira.spring.io/browse/SPR-10273?redirect=false)** and commented  Having a prototype bean in Java config, which requires arguments for its creation, it's not easy to pass them.  In the sample attached TestConfig2 works OK by passing arguments through BeanFactory.getBean(String,Object...), while a more elegant variant with calling `@Bean` method directly fails because it tries to autowire the method argument instead of using passed values.  In real life, it could be for instance a Swing dialog requiring a parent to be specified.   ---  **Affects:** 3.2.1  **Attachments:** - [Test.java](https://jira.spring.io/secure/attachment/20937/Test.java) (_1.14 kB_)","closed","in: core,","spring-projects-issues","2013-02-08T00:28:17Z","2019-01-11T21:31:31Z"
"","14823","RestTemplate does not treat redirect (3xx) HTTP status codes as errors in case redirection is not allowed [SPR-10190]","**[Oleg Alexeyev](https://jira.spring.io/secure/ViewProfile.jspa?name=blacklion)** opened **[SPR-10190](https://jira.spring.io/browse/SPR-10190?redirect=false)** and commented  If redirection is disallowed in http client completely, or it cannot be handled by http client automatically (3xx code in response to a POST for example), 3xx code is returned to RestTemplate. DefaultResponseErrorHandler does not treat this as an error, so RestTemplate tries to convert the result, which is missing etc.  Perhaps, DefaultResponseErrorHandler should treat 3xx as an error condition - it can get such a code only if http client cannot handle it. And probably something like HttpRedirectionException should be in the RestClientException hierarchy.   ---  **Affects:** 3.2 GA","closed","in: web,","spring-projects-issues","2013-01-18T06:31:47Z","2019-01-11T21:29:58Z"
"","14977","ConfigurationClassParser needs to load annotations through source class loader [SPR-10343]","**[Olaf Otto](https://jira.spring.io/secure/ViewProfile.jspa?name=olaf)** opened **[SPR-10343](https://jira.spring.io/browse/SPR-10343?redirect=false)** and commented  A change from 3.1.3.RELEASE to 3.1.4.RELEASE in org.springframework.context.annotation.ConfigurationClassParser causes the getImport method to recursively load all annotations of a class(looking for `@Import`), using a metadataReaderFactory solely relying on the classloader of the annotated type. Resulting, the method fails in environments with classloader isolation (i.e. OSGi):  ```java // the package containing @MyAnnotation is explicitly // imported in the bundle containing AnnotatedType @MyAnnotation  public class AnnotatedType { } // This meta annotation stems from the spring bundle, i.e. is a transitive  // import from @MyAnnotation and not explicitly imported into the bundle containing ""AnnotatedType"" @Scope(""prototype"")  public @interface MyAnnotation { } ```  Resulting exception as the SimpleMetadataReader tries to obtain `@Scope` from the classloader containing AnnotatedType:  ``` -- snipp -- Caused by: java.io.FileNotFoundException: class path resource [org/springframework/context/annotation/Scope.class] cannot be opened because it does not exist 	at org.springframework.core.io.ClassPathResource.getInputStream(ClassPathResource.java:157) 	at org.springframework.core.type.classreading.SimpleMetadataReader.(SimpleMetadataReader.java:49) 	at org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(SimpleMetadataReaderFactory.java:80) 	at org.springframework.core.type.classreading.CachingMetadataReaderFactory.getMetadataReader(CachingMetadataReaderFactory.java:101) 	at org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(SimpleMetadataReaderFactory.java:76) 	at org.springframework.context.annotation.ConfigurationClassParser.getImports(ConfigurationClassParser.java:291) 	at org.springframework.context.annotation.ConfigurationClassParser.getImports(ConfigurationClassParser.java:293) 	at org.springframework.context.annotation.ConfigurationClassParser.getImports(ConfigurationClassParser.java:293) 	at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:223) 	at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:147) 	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:124) 	at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:289) 	... 12 more ```  The 3.1.3 implementation relied on the annotation metadata of the annotation directly applied to the processed type - perhaps it is possible to reintroduce such an approach in favor of the recursion in getImports.  ---  **Affects:** 3.1.4, 4.2.5, 4.3.1  **Attachments:** - [spr-10343-consuming.zip](https://jira.spring.io/secure/attachment/21004/spr-10343-consuming.zip) (_3.13 kB_) - [spr-10343-declaring.zip](https://jira.spring.io/secure/attachment/21005/spr-10343-declaring.zip) (_2.37 kB_)  **Issue Links:** - #14558 Prevent duplicate `@Import` processing and ImportBeanDefinitionRegistrar invocation - #19086 Do not fail with a circular `@Import` error caused by an `@ComponentScan` - #19810 ConfigurationClassParser does not work with scanner-provided ClassLoader  **Backported to:** [4.2.8](https://github.com/spring-projects/spring-framework/milestone/145?closed=1)  0 votes, 6 watchers","closed","in: core,","spring-projects-issues","2013-02-28T05:53:58Z","2019-01-14T05:19:58Z"
"","15315","Return map as JSON via @ResponseBody [SPR-10687]","**[oaktree](https://jira.spring.io/secure/ViewProfile.jspa?name=oak)** opened **[SPR-10687](https://jira.spring.io/browse/SPR-10687?redirect=false)** and commented  We are developing a system with spring framework. Till now we have been using spring 3.1.2.  Sometimes we return an object from a controller using `@ResponseBody` (and it works like a charm), but we tried to upgrade to the new version of spring (like 3.2.3) in order to get support in new features like `@ControllerAdvice.` But it seems that using this version prevents from `@ResponseBody` to work if the return object is a map.  Here is how we tell spring to convert to json/view:  ```xml  	 	 		 			 			 			 			 		 	  	 		 			 			 			  			 			  			 			 				 					 						 							 								org.jpp.bean.Employee 								org.jpp.bean.EmployeeList 							 						 					 				 			  			 		 	  	     	 	 	  ```    ---  **Affects:** 3.2.1, 3.2.3","closed","in: core,","spring-projects-issues","2013-06-25T08:06:11Z","2019-01-11T22:22:48Z"
"","14984","Incompatibility of MappingJacksonHttpMessageConverter  [SPR-10350]","**[Niranjan Nanda](https://jira.spring.io/secure/ViewProfile.jspa?name=nnanda)** opened **[SPR-10350](https://jira.spring.io/browse/SPR-10350?redirect=false)** and commented  The class org.springframework.http.converter.json.MappingJacksonHttpMessageConverter from Spring 3.2.1 version is now incompatible to Jackson FasterXML 2.1.x  versions. I found following incompatibilities:  1. Incorrect imports. Current Spring implementation uses following imports:  import org.codehaus.jackson.JsonEncoding; import org.codehaus.jackson.JsonGenerator; import org.codehaus.jackson.JsonProcessingException; import org.codehaus.jackson.map.ObjectMapper; import org.codehaus.jackson.map.SerializationConfig; import org.codehaus.jackson.map.type.TypeFactory; import org.codehaus.jackson.type.JavaType;  Whereas, as per new Jackson FasterXML library, these should be:  import com.fasterxml.jackson.core.JsonEncoding; import com.fasterxml.jackson.core.JsonGenerator; import com.fasterxml.jackson.core.JsonProcessingException; import com.fasterxml.jackson.databind.JavaType; import com.fasterxml.jackson.databind.ObjectMapper; import com.fasterxml.jackson.databind.SerializationFeature; import com.fasterxml.jackson.databind.type.TypeFactory;  2. Following method is using a method which is removed from Jackson library.  protected JavaType getJavaType(Type type, Class contextClass) { return (contextClass != null) ? TypeFactory.type(type, TypeFactory.type(contextClass)) : TypeFactory.type(type); }  In the new Jackson FasterXML 2.1.3 version, the method TypeFactory.type() is removed. Instead of this, following should be used:  protected JavaType getJavaType(Type type, Class contextClass) { final TypeFactory typeFactory = this.objectMapper.getTypeFactory(); return (contextClass != null) ? typeFactory.constructType(type, contextClass) : typeFactory.constructType(type); }  3. Spring code is using enums which are removed from Jackson library. e.g.  SerializationConfig.Feature.INDENT_OUTPUT is replaced by SerializationFeature.INDENT_OUTPUT  4. Spring code is using deprecated method to create JSON factory in the method writeInternal().  JsonGenerator jsonGenerator = this.objectMapper.getJsonFactory().createJsonGenerator(outputMessage.getBody(), encoding);  The method getJsonFactory() is deprecated and the new method is getFactory()  My question is, will Spring fix these in its library or I should write my own message converter.  I suggest it is better to introduce a new message converter to use new FasterXML library or Spring 3.2.1 should mandate all to upgrade older Jackson libraries to FasterXML libraries.  Thanks, NN   ---  **Affects:** 3.2.1  **Reference URL:** http://forum.springsource.org/showthread.php?135324-Incompatibility-of-MappingJacksonHttpMessageConverter","closed","status: declined,","spring-projects-issues","2013-03-03T13:50:34Z","2013-03-04T08:00:15Z"
"","14767","Spring Core and Spring ASM discrepancy [SPR-10134]","**[Niranjan Nanda](https://jira.spring.io/secure/ViewProfile.jspa?name=nnanda)** opened **[SPR-10134](https://jira.spring.io/browse/SPR-10134?redirect=false)** and commented  There are two issues: 1. Spring ASM has no 3.2.0.RELEASE version in Maven Repo. The latest version of Spring-ASM is 3.1.3.RELEASE 2. In Spring-Core 3.2.0.RELEASE, the class LocalVariableTableParameterNameDiscoverer has a private class ParameterNameDiscoveringVisitor which extends an interface org.springframework.asm.ClassVisitor (defined inside Spring-ASM); whereas in Spring-Core 3.1.3.RELEASE the same class extends org.springframework.asm.commons.EmptyVisitor (which is not an interface).  Because of the issue #2, the deployment (of my WAR file) is breaking in JBoss 7.1.1  ---  **Affects:** 3.2 GA  **Reference URL:** http://forum.springsource.org/showthread.php?133706-Spring-3-2-0-RELEASE-breaks-with-JBoss-7  **Issue Links:** - #14745 spring-asm 3.2.0.RELEASE artifact not published to Maven along with the other releases (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2012-12-30T12:41:56Z","2019-01-12T16:47:17Z"
"","14953","AbstractTestNGSpringContextTests - @Autowired and @Inject of beans does not get called correctly on @Import annotation [SPR-10319]","**[Ninad Div](https://jira.spring.io/secure/ViewProfile.jspa?name=ndivadkar)** opened **[SPR-10319](https://jira.spring.io/browse/SPR-10319?redirect=false)** and commented  The documentation under Composing `@Configuration` classes (http://static.springsource.org/spring/docs/3.1.x/javadoc-api/org/springframework/context/annotation/Configuration.html) clearly shows the test case. This works perfectly when I start up a web app or a console app, and I am able to `@Autowire` or `@Inject` the bean.  But in my `TestNG` test, it is not the case. As shown below, `ServiceConfig` imports the `CommonConfig` class and so should have access to the `propertiesConfig` bean. But when it runs, the `DataSource` bean throws an exception because the `propertiesConfig` bean has not been set.  ```java @ContextConfiguration(locations={""classpath:/META-INF/spring/app-context.xml""}) public class MyTest extends AbstractTestNGSpringContextTests {      @Configuration     @Import({CommonConfig.class})     public class ServiceConfig {         private final Logger log = LoggerFactory.getLogger(ServiceConfig.class);         private org.apache.commons.configuration.Configuration propertiesConfig;          @Autowired         public void setPropertiesConfig(org.apache.commons.configuration.Configuration propertiesConfig){             this.propertiesConfig = propertiesConfig;         }          public ServiceConfig() {         }          @Bean         public DataSource dataSource() {             final BasicDataSource dataSource = new BasicDataSource(); /* fails */ dataSource.setDriverClassName(propertiesConfig.getString(""jdbc.driver""));             //dataSource.setUrl(propertiesConfig.getString(""jdbc.url""));             //dataSource.setUsername(propertiesConfig.getString(""jdbc.username""));             //dataSource.setPassword(propertiesConfig.getString(""jdbc.password""));              return dataSource;         }     }      /* test methods */ } ```    ---  **Affects:** 3.2 GA  **Reference URL:** http://stackoverflow.com/questions/14903364/spring-reference-bean-in-import-file-during-annotation-based-configuration","closed","in: core,","spring-projects-issues","2013-02-20T13:59:26Z","2019-01-12T16:24:20Z"
"","15119","SpEL fails if class.name and name is evaluated in the same context [SPR-10486]","**[niels](https://jira.spring.io/secure/ViewProfile.jspa?name=niels)** opened **[SPR-10486](https://jira.spring.io/browse/SPR-10486?redirect=false)** and commented  As you can test with the given gist, SpEL fails if I evaluated in the same context ""class.name"" and ""name"" of an object.  ---  **Affects:** 3.2.2  **Reference URL:** https://gist.github.com/opensource21/5457631  **Sub-tasks:** - #15638 Backport: SpEL fails if class.name and name is evaluated in the same context","closed","in: core,","spring-projects-issues","2013-04-24T22:33:29Z","2019-01-11T21:11:59Z"
"","15212","New @Description annotation to add description field to BeanDefinition when using annotation based configuration [SPR-10583]","**[Niels Ull Harremoes](https://jira.spring.io/secure/ViewProfile.jspa?name=nielsull)** opened **[SPR-10583](https://jira.spring.io/browse/SPR-10583?redirect=false)** and commented  We are using bean descriptions from the xml config file to show in monitoring pages and jmx, much like the usecase  described in https://jira.springsource.org/browse/SPR-4550 .  However, when using annotation- og java-based configuration (`@Component` or `@Bean`), it is not possible to set bean descriptions.  Could a `@Description` tag be added?    ---  **Affects:** 3.2.3, 4.0 M1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c9771012e98afe1679cd1c3ebf5ab6c1a018fd65","closed","type: enhancement,","spring-projects-issues","2013-05-24T07:30:09Z","2013-08-29T16:20:42Z"
"","15431","Add support for http byte-range requests [SPR-10805]","**[Nicolas Pottrain](https://jira.spring.io/secure/ViewProfile.jspa?name=npottrain)** opened **[SPR-10805](https://jira.spring.io/browse/SPR-10805?redirect=false)** and commented  Is it possible to add support for byte-range requests in the mvc:resources ResourceHttpRequestHandler. This will enable the serving of video files to iOS devices and for Safari on Mac.  ---  **Affects:** 3.2.3  **Reference URL:** http://forum.springsource.org/showthread.php?114763-HTTP-byte-range-requests-for-resources-in-Spring-MVC  **Issue Links:** - #18236 HTTP Range requests hang on large file in nested jar - #18235 Allow disabling HTTP range support - #18407 Add support for http byte-range requests for non-static resources  3 votes, 12 watchers","closed","type: enhancement,","spring-projects-issues","2013-08-05T07:35:45Z","2019-01-14T05:18:55Z"
"","14965","Add cglib sources to spring-core sources artifact [SPR-10331]","**[Nicolas Labrot](https://jira.spring.io/secure/ViewProfile.jspa?name=nithril)** opened **[SPR-10331](https://jira.spring.io/browse/SPR-10331?redirect=false)** and commented  I understand that :  > *  >  > \As this repackaging happens at the classfile level, sources and Javadoc >  > * are not available here. See the original > * CGLIB 3 Javadoc > * for details when working with these classes.  But then debugging it is very valuable to have all the sources including cglib one  ---  **Affects:** 3.2 GA  **Issue Links:** - #15094 Spring Core source distributions should contain sources of repackaged classes (_**""is duplicated by""**_)","closed","type: enhancement,","spring-projects-issues","2013-02-25T07:06:09Z","2019-01-11T21:03:19Z"
"","15483","Detect LoadTimeWeaver bean when declared through @Bean method as well [SPR-10856]","**[Nick Williams](https://jira.spring.io/secure/ViewProfile.jspa?name=guitarking117)** opened **[SPR-10856](https://jira.spring.io/browse/SPR-10856?redirect=false)** and commented  This may be a Java-config problem only. I haven't tried it with XML config.  I'm configuring a `LocalContainerEntityManagerFactoryBean`, and I want to enable load time weaving. `@EnableLoadTimeWeaving` works (I see in the log that it found `addTransformer` on the `ClassLoader` and created a load time weaver), but `setLoadTimeWeaver` is never called on the `LocalContainerEntityManagerFactoryBean`.  `LocalContainerEntityManagerFactoryBean` implements `LoadTimeWeaverAware`, so my (possibly incorrect) assumption was that Spring should set the `LoadTimeWeaver` property, but it does not. If my assumption was incorrect, the documentation should be updated to indicate that you must call this method manually. If my assumption was correct, there is a bug here, because Spring is not calling this method.  Instead, I have to do this in my configuration:  ```java @Configuration ... @EnableLoadTimeWeaving ... public class RootContextConfiguration {     ...     @Inject LoadTimeWeaver loadTimeWeaver;     ...      @Bean     public LocalContainerEntityManagerFactoryBean entityManagerFactoryBean()     {         ...         LocalContainerEntityManagerFactoryBean factory =                 new LocalContainerEntityManagerFactoryBean();         ...         factory.setLoadTimeWeaver(this.loadTimeWeaver);         ...         return factory;     }     ... } ```  That code works. The `LoadTimeWeaver` is injected and I successfully add it to my factory, then the JPA provider starts instrumenting my classes. However, without this the `LoadTimeWeaver` is never added to the `LocalContainerEntityManagerFactoryBean` and the JPA provider cannot instrument my classes.  ---  **Affects:** 3.2.4, 4.0 M2  **Issue Links:** - #15365 LoadTimeWeaving is working with XML config and not with Java Config (_**""is duplicated by""**_) - #19498 NPE in LoadTimeWeavingConfiguration: loadTimeWeaver() called too early - #18459 Proper load-time weaving support for Hibernate 5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/437ffa6067266eafca6fa7c5200b7375618e1970  9 votes, 14 watchers","closed","type: enhancement,","spring-projects-issues","2013-08-24T14:57:54Z","2019-01-11T22:09:22Z"
"","15414","Use Tomcat 8's new instrumentable WebappClassLoader [SPR-10788]","**[Nick Williams](https://jira.spring.io/secure/ViewProfile.jspa?name=guitarking117)** opened **[SPR-10788](https://jira.spring.io/browse/SPR-10788?redirect=false)** and commented  First, you can see the companion Tomcat enhancement request at the attached reference URL.  For many application servers, Spring provides a `LoadTimeWeaver` implementation that can take advantage of the instrumentable `ClassLoader` that the server provides. Tomcat's `WebappClassLoader` is currently not instrumentable, so Spring provides a custom `ClassLoader` that can be used by placing `spring-instrument-tomcat.jar` in `$TOMCAT_HOME/lib` and putting a loader declaration in `META-INF/context.xml`.  It would be nice if load time weaving could ""just work"" like it does in other application servers. I submitted the attached Tomcat enhancement request and the community seems accepting of the idea of modifying `org.apache.catalina.loader.WebappClassLoader` to make it instrumentable so that users no longer have to jump through those hoops to get load time weaving working in Tomcat.  I will be submitting a patch to Tomcat in the next week or two to make `WebappClassLoader` instrumentable. I will then submit a pull request to add `org.springframework.instrument.classloading.tomcat.TomcatLoadTimeWeaver` (and related classes) to Spring 4.0 (and hopefully also 3.2). The new `WebappClassLoader` will exist in Tomcat 7.0.43 or 7.0.44 (depending on when my patch is accepted and assuming they agree to back-port it to 7) and Tomcat 8.0.  However, I need the following questions/items addressed by someone here on the Spring development team:  1. I plan on, for the most part, copying-and-pasting the Apache 2.0 licensed code from `org.springframework.instrument.classloading.WeavingTransformer` and `org.springframework.instrument.classloading.tomcat. TomcatInstrumentableClassLoader` to the Apache 2.0 licensed Tomcat. Can someone confirm that Spring is willing to donate this code to Tomcat? 2. Some of the Tomcat folks are questioning the need for a `getThrowawayClassLoader()` method. I'm not quite sure I understand the point of this method, myself. Can someone please clarify its purpose? 3. Once I have completed the Tomcat patch, the Tomcat folks would like someone here to state that it A) looks generally correct, and B) is a useful change. There is someone willing to do this, correct?  While the changes will actually be quite minor, I think this will serve as a _*huge*_ improvement to using load time weaving in a Tomcat environment.  ---  **Affects:** 3.2 GA, 4.0 M2  **Reference URL:** https://issues.apache.org/bugzilla/show_bug.cgi?id=55317  **Attachments:** - [support.log](https://jira.spring.io/secure/attachment/21316/support.log) (_551.93 kB_)  **Issue Links:** - #16072 Load Time Weaving not working after upgrading Tomcat from 7.0.50 to 7.0.52 - #16073 Hibernate session cannot be found after upgrading Tomcat from 7.0.50 to 8.0.3 - #17802 TomcatInstrumentableClassLoader should support Tomcat 7.0.63+ as well","closed","type: enhancement,","spring-projects-issues","2013-07-28T08:03:19Z","2019-01-13T21:02:57Z"
"","15413","Using TransactionManagementConfigurer causes StackOverflowError that results in NoClassDefFoundError for FatalBeanException [SPR-10787]","**[Nick Williams](https://jira.spring.io/secure/ViewProfile.jspa?name=guitarking117)** opened **[SPR-10787](https://jira.spring.io/browse/SPR-10787?redirect=false)** and commented  This one was a doozy and took me three hours just to figure it out...  This may affect earlier versions as well, I don't know. I've only been working with 4.0 lately. I don't see why it would just now be happening, because I don't see any major changes in this area.  I've been using Java configuration in a project just fine. I added `@EnableTransactionManagement`, a `DataSource`, a `LocalContainerEntityManagerFactoryBean`, and a `JpaTransactionManager` to the configuration (I didn't add anything else), implemented `TransactionManagementConfigurer`, and suddenly started getting the following `NoClassDefFoundError` on startup.  ``` 18:59:08.396 [RMI TCP Connection(6)-127.0.0.1]   ERROR org.springframework.web.context.ContextLoader org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:324): Context initialization failed java.lang.NoClassDefFoundError: org.springframework.beans.FatalBeanException 	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:584) ~[spring-beans-4.0.0.M2.jar:4.0.0.M2] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) ~[spring-beans-4.0.0.M2.jar:4.0.0.M2] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) ~[spring-beans-4.0.0.M2.jar:4.0.0.M2] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) ~[spring-beans-4.0.0.M2.jar:4.0.0.M2] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) ~[spring-beans-4.0.0.M2.jar:4.0.0.M2] 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) ~[spring-beans-4.0.0.M2.jar:4.0.0.M2] 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) ~[spring-beans-4.0.0.M2.jar:4.0.0.M2] 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) ~[spring-beans-4.0.0.M2.jar:4.0.0.M2] 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) ~[spring-beans-4.0.0.M2.jar:4.0.0.M2] 	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1145) ~[spring-context-4.0.0.M2.jar:4.0.0.M2] 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:922) ~[spring-context-4.0.0.M2.jar:4.0.0.M2] 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:493) ~[spring-context-4.0.0.M2.jar:4.0.0.M2] 	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:389) ~[spring-web-4.0.0.M2.jar:4.0.0.M2] 	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:294) [spring-web-4.0.0.M2.jar:4.0.0.M2] 	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:106) [spring-web-4.0.0.M2.jar:4.0.0.M2] 	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4836) [catalina.jar:8.0.0-dev] 	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5284) [catalina.jar:8.0.0-dev] 	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150) [catalina.jar:8.0.0-dev] 	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:726) [catalina.jar:8.0.0-dev] 	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:702) [catalina.jar:8.0.0-dev] 	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:698) [catalina.jar:8.0.0-dev] 	at org.apache.catalina.startup.HostConfig.manageApp(HostConfig.java:1643) [catalina.jar:8.0.0-dev] 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0-ea] 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) ~[?:1.8.0-ea] 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0-ea] 	at java.lang.reflect.Method.invoke(Method.java:491) ~[?:1.8.0-ea] 	at org.apache.tomcat.util.modeler.BaseModelMBean.invoke(BaseModelMBean.java:300) [tomcat-coyote.jar:8.0.0-dev] 	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819) [?:1.8.0-ea] 	at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:792) [?:1.8.0-ea] 	at org.apache.catalina.mbeans.MBeanFactory.createStandardContext(MBeanFactory.java:468) [catalina.jar:8.0.0-dev] 	at org.apache.catalina.mbeans.MBeanFactory.createStandardContext(MBeanFactory.java:415) [catalina.jar:8.0.0-dev] 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0-ea] 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) ~[?:1.8.0-ea] 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0-ea] 	at java.lang.reflect.Method.invoke(Method.java:491) ~[?:1.8.0-ea] 	at org.apache.tomcat.util.modeler.BaseModelMBean.invoke(BaseModelMBean.java:300) [tomcat-coyote.jar:8.0.0-dev] 	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819) [?:1.8.0-ea] 	at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:792) [?:1.8.0-ea] 	at javax.management.remote.rmi.RMIConnectionImpl.doOperation(RMIConnectionImpl.java:1465) [?:1.8.0-ea] 	at javax.management.remote.rmi.RMIConnectionImpl.access$300(RMIConnectionImpl.java:75) [?:1.8.0-ea] 	at javax.management.remote.rmi.RMIConnectionImpl$PrivilegedOperation.run(RMIConnectionImpl.java:1306) [?:1.8.0-ea] 	at javax.management.remote.rmi.RMIConnectionImpl.doPrivilegedOperation(RMIConnectionImpl.java:1398) [?:1.8.0-ea] 	at javax.management.remote.rmi.RMIConnectionImpl.invoke(RMIConnectionImpl.java:827) [?:1.8.0-ea] 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0-ea] 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) ~[?:1.8.0-ea] 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0-ea] 	at java.lang.reflect.Method.invoke(Method.java:491) ~[?:1.8.0-ea] 	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:322) [?:1.8.0-ea] 	at sun.rmi.transport.Transport$1.run(Transport.java:177) [?:1.8.0-ea] 	at sun.rmi.transport.Transport$1.run(Transport.java:174) [?:1.8.0-ea] 	at java.security.AccessController.doPrivileged(Native Method) ~[?:1.8.0-ea] 	at sun.rmi.transport.Transport.serviceCall(Transport.java:173) [?:1.8.0-ea] 	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:556) [?:1.8.0-ea] 	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:811) [?:1.8.0-ea] 	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:670) [?:1.8.0-ea] 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) [?:1.8.0-ea] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) [?:1.8.0-ea] 	at java.lang.Thread.run(Thread.java:724) [?:1.8.0-ea] 18:59:08.411 [RMI TCP Connection(6)-127.0.0.1]   INFO  org.springframework.web.context.support.AnnotationConfigWebApplicationContext org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1045): Closing Root WebApplicationContext: startup date [Sat Jul 27 18:59:01 CDT 2013]; root of context hierarchy 18:59:08.420 [RMI TCP Connection(6)-127.0.0.1]   WARN  org.springframework.web.context.support.AnnotationConfigWebApplicationContext org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1063): Exception thrown from LifecycleProcessor on context close java.lang.IllegalStateException: LifecycleProcessor not initialized - call 'refresh' before invoking lifecycle methods via the context: Root WebApplicationContext: startup date [Sat Jul 27 18:59:01 CDT 2013]; root of context hierarchy 	at org.springframework.context.support.AbstractApplicationContext.getLifecycleProcessor(AbstractApplicationContext.java:370) ~[spring-context-4.0.0.M2.jar:4.0.0.M2] 	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1060) [spring-context-4.0.0.M2.jar:4.0.0.M2] 	at org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:1013) [spring-context-4.0.0.M2.jar:4.0.0.M2] 	at org.springframework.web.context.ContextLoader.closeWebApplicationContext(ContextLoader.java:559) [spring-web-4.0.0.M2.jar:4.0.0.M2] 	at org.springframework.web.context.ContextLoaderListener.contextDestroyed(ContextLoaderListener.java:115) [spring-web-4.0.0.M2.jar:4.0.0.M2] 	at org.apache.catalina.core.StandardContext.listenerStop(StandardContext.java:4879) [catalina.jar:8.0.0-dev] 	at org.apache.catalina.core.StandardContext.stopInternal(StandardContext.java:5507) [catalina.jar:8.0.0-dev] 	at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:232) [catalina.jar:8.0.0-dev] 	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:160) [catalina.jar:8.0.0-dev] 	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:726) [catalina.jar:8.0.0-dev] 	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:702) [catalina.jar:8.0.0-dev] 	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:698) [catalina.jar:8.0.0-dev] 	at org.apache.catalina.startup.HostConfig.manageApp(HostConfig.java:1643) [catalina.jar:8.0.0-dev] 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0-ea] 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) ~[?:1.8.0-ea] 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0-ea] 	at java.lang.reflect.Method.invoke(Method.java:491) ~[?:1.8.0-ea] 	at org.apache.tomcat.util.modeler.BaseModelMBean.invoke(BaseModelMBean.java:300) [tomcat-coyote.jar:8.0.0-dev] 	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819) [?:1.8.0-ea] 	at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:792) [?:1.8.0-ea] 	at org.apache.catalina.mbeans.MBeanFactory.createStandardContext(MBeanFactory.java:468) [catalina.jar:8.0.0-dev] 	at org.apache.catalina.mbeans.MBeanFactory.createStandardContext(MBeanFactory.java:415) [catalina.jar:8.0.0-dev] 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0-ea] 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) ~[?:1.8.0-ea] 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0-ea] 	at java.lang.reflect.Method.invoke(Method.java:491) ~[?:1.8.0-ea] 	at org.apache.tomcat.util.modeler.BaseModelMBean.invoke(BaseModelMBean.java:300) [tomcat-coyote.jar:8.0.0-dev] 	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819) [?:1.8.0-ea] 	at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:792) [?:1.8.0-ea] 	at javax.management.remote.rmi.RMIConnectionImpl.doOperation(RMIConnectionImpl.java:1465) [?:1.8.0-ea] 	at javax.management.remote.rmi.RMIConnectionImpl.access$300(RMIConnectionImpl.java:75) [?:1.8.0-ea] 	at javax.management.remote.rmi.RMIConnectionImpl$PrivilegedOperation.run(RMIConnectionImpl.java:1306) [?:1.8.0-ea] 	at javax.management.remote.rmi.RMIConnectionImpl.doPrivilegedOperation(RMIConnectionImpl.java:1398) [?:1.8.0-ea] 	at javax.management.remote.rmi.RMIConnectionImpl.invoke(RMIConnectionImpl.java:827) [?:1.8.0-ea] 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0-ea] 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) ~[?:1.8.0-ea] 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0-ea] 	at java.lang.reflect.Method.invoke(Method.java:491) ~[?:1.8.0-ea] 	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:322) [?:1.8.0-ea] 	at sun.rmi.transport.Transport$1.run(Transport.java:177) [?:1.8.0-ea] 	at sun.rmi.transport.Transport$1.run(Transport.java:174) [?:1.8.0-ea] 	at java.security.AccessController.doPrivileged(Native Method) ~[?:1.8.0-ea] 	at sun.rmi.transport.Transport.serviceCall(Transport.java:173) [?:1.8.0-ea] 	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:556) [?:1.8.0-ea] 	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:811) [?:1.8.0-ea] 	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:670) [?:1.8.0-ea] 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) [?:1.8.0-ea] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) [?:1.8.0-ea] 	at java.lang.Thread.run(Thread.java:724) [?:1.8.0-ea] 18:59:08.421 [RMI TCP Connection(6)-127.0.0.1]   INFO  org.springframework.beans.factory.support.DefaultListableBeanFactory org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:452): Destroying singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@242ea4b8: defining beans [org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,org.springframework.context.annotation.internalPersistenceAnnotationProcessor,rootContextConfiguration,org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor,org.springframework.context.annotation.ConfigurationClassPostProcessor.enhancedConfigurationProcessor,defaultAuthorRepository,defaultBookManager,defaultBookRepository,defaultPublisherRepository,org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration,org.springframework.transaction.config.internalTransactionAdvisor,transactionAttributeSource,transactionInterceptor,org.springframework.scheduling.annotation.ProxyAsyncConfiguration,org.springframework.context.annotation.internalAsyncAnnotationProcessor,org.springframework.scheduling.annotation.SchedulingConfiguration,org.springframework.context.annotation.internalScheduledAnnotationProcessor,objectMapper,taskScheduler,localValidatorFactoryBean,methodValidationPostProcessor,jaxb2Marshaller,springJpaDataSource,entityManagerFactoryBean,jpaTransactionManager,messageSource,org.springframework.aop.config.internalAutoProxyCreator]; root of factory hierarchy ```  As you can plainly see, I have spring-beans.jar on the classpath, so the `NoClassDefFoundError` is clearly a symptom and not the actual error. I put a breakpoint at `instantiateUsingFactoryMethod` line 584 and saw this actual error being caught:  ``` java.lang.StackOverflowError:  	org.springframework.core.NestedRuntimeException.(NestedRuntimeException.java:45) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:187) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) 	org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:299) 	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) 	org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) 	org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) 	org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:310) 	com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$c6beed09.entityManagerFactoryBean() 	sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166) 	org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:573) 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1048)] ```  I spent considerable time debugging, but there's a LOT of code to step through. Here's essentially what's happening, as far as I can tell:  1. Spring calls `entityManagerFactoryBean()` to create that bean 2. `entityManagerFactoryBean()` calls `springJpaDataSource()` to look up the `DataSource` 3. `springJpaDataSource()` (my code, at least) returns, but before the CGLib'd wrapper `springJpaDataSource()` can return control to `entityManagerFactoryBean()`, Spring for some reason decides it needs to call `annotationDrivenTransactionManager()` specified by `TransactionManagementConfigurer`. **_THIS IS WHERE THE PROBLEM STARTS_** 4. `annotationDrivenTransactionManager()` calls `jpaTransactionManager()`, which creates the actual `JpaTransactionManager` bean. 5. `jpaTransactionManager()` calls `entityManagerFactoryBean()` to get the `EntityManagerFactory` to pass to the `JpaTransactionManager` constructor. 6. `entityManagerFactoryBean()` calls `springJpaDataSource()` to look up the `DataSource` 7. Repeat infinitely until `StackOverflowError`.  If I comment out `implements TransactionManagementConfigurer` and the `annotationDrivenTransactionManager()` error, everything works great.  Have fun. This one's craaazy. Marked it ""blocker"" because it doesn't appear to be possible to use `TransactionManagementConfigurer`, meaning you can't have more than one `PlatformTransactionManager`.  I'll attach a replication project shortly. It requires Java 8.   ---  **Affects:** 4.0 M2  **Attachments:** - [Spring-JPA.zip](https://jira.spring.io/secure/attachment/21301/Spring-JPA.zip) (_70.00 kB_)  **Backported to:** [4.0.9](https://github.com/spring-projects/spring-framework/milestone/121?closed=1)  1 votes, 7 watchers","closed","in: core,","spring-projects-issues","2013-07-27T17:37:01Z","2019-01-14T05:18:59Z"
"","15399","HibernateJpaVendorAdapter configures outdated Hibernate dialect for most database versions [SPR-10773]","**[Nick Williams](https://jira.spring.io/secure/ViewProfile.jspa?name=guitarking117)** opened **[SPR-10773](https://jira.spring.io/browse/SPR-10773?redirect=false)** and commented  The class in question uses the following Hibernate dialects:  ```java case DB2: return DB2Dialect.class; case DERBY: return DerbyDialect.class; case H2: return H2Dialect.class; case HSQL: return HSQLDialect.class; case INFORMIX: return InformixDialect.class; case MYSQL: return MySQLDialect.class; case ORACLE: return Oracle9iDialect.class; case POSTGRESQL: return PostgreSQLDialect.class; case SQL_SERVER: return SQLServerDialect.class; case SYBASE: return SybaseDialect.class; ```  However, this is problematic in many senses. My primary concern here is the MySQL support, but it's more widespread than that.  MySQL 4 is end-of-life. However, MySQLDialect is only for MySQL 4 and doesn't support many of the new features in MySQL 5. Hibernate has the following hierarchy for MySQL dialects:  ``` - MySQLDialect   |- MySQLMyISAMDialect   |- MySQLInnoDBDialect   |- MySQL5Dialect      |- MySQL5InnoDBDialect ```  `HibernateJpaVendorAdapter` should select the appropriate dialect based on the MySQL version (usually 5 today) and and storage engine (InnoDB is the default as of 5.5, MyISAM is the default before 5.5). It cannot select the appropriate dialect based on the limited options in the `Database` enum.  Then there's Oracle:  ``` - Oracle8iDialect (End of Life)   |- Oracle9iDialect (Extended Support)      |- Oracle10gDialect ```  But the adapter defaults to 9i.  Microsoft SQL Server:  ``` - SQLServerDialect (2000, End of Life)   |- SQLServer2005Dialect (Extended Support)      |- SQLServer2008Dialect ```  But the adapter defaults to SQL Server 2000.  There may be further inconsistencies, but I haven't analyzed it further. I think the `Database` enum is going to need more constants so that the adapter can select the correct dialect. Right now, if someone is using MySQL 5 or InnoDB, or SQL Server 2005 or newer, or Oracle 10g or newer, they cannot use this adapter to set the dialect. Realistically, that's going to be a lot of people.   ---  **Affects:** 3.1 GA, 3.2 GA, 4.0 M1  1 votes, 2 watchers","closed","status: bulk-closed,","spring-projects-issues","2013-07-23T19:33:47Z","2019-01-12T00:22:21Z"
"","15396","PathResourceTests fail on Windows [SPR-10770]","**[Nick Williams](https://jira.spring.io/secure/ViewProfile.jspa?name=guitarking117)** opened **[SPR-10770](https://jira.spring.io/browse/SPR-10770?redirect=false)** and commented  #15237 introduced a new PathResource and a set of associated unit tests. Those tests do not pass on Windows. There are assertions against file paths that assume forward slashes, but on Windows those slashes are backward slashes.  ---  **Affects:** 4.0 M1","closed","in: core,","spring-projects-issues","2013-07-23T06:28:55Z","2019-01-11T22:03:26Z"
"","15395","Ensure ParamTag release resources [SPR-10769]","**[Nick Williams](https://jira.spring.io/secure/ViewProfile.jspa?name=guitarking117)** opened **[SPR-10769](https://jira.spring.io/browse/SPR-10769?redirect=false)** and commented  `o.s.web.servlet.tags.ParamTag` is susceptible to problems in containers that pool tags. It is't resetting values when the release method was called, so if a user used multiple `` tags and mixed using the value attribute and tag body, it's possible that the value used might not be correct. This would be very difficult to duplicate.   --- No further details from [SPR-10769](https://jira.spring.io/browse/SPR-10769?redirect=false)","closed","type: bug,","spring-projects-issues","2013-07-22T10:30:51Z","2013-07-24T10:17:11Z"
"","15393","is read incorrectly in PersistenceUnitReader [SPR-10767]","**[Nick Williams](https://jira.spring.io/secure/ViewProfile.jspa?name=guitarking117)** opened **[SPR-10767](https://jira.spring.io/browse/SPR-10767?redirect=false)** and commented  This exact same problem also exists in Hibernate ORM (see attached reference URL).  In JPA 1.0's `persistence.xml`, `` defaulted to `false` (providers always scanned for entities). So, you could have the following four uses of `` with the indicated meanings:  1. Omitted means don't exclude / do scan. 2. `` means exclude / don't scan. 3. `false` means don't exclude / do scan. 4. `true` means exclude / don't scan.  As of JPA 2.0, `` was changed to default to `true`:  1. Omitted means exclude / don't scan. 2. `` means exclude / don't scan. 3. `false` means don't exclude / do scan. 4. `true` means exclude / don't scan.  However, `PersistenceUnitReader` sets the value of `ExcludeUnlistedClasses` to `true` if `` is merely present, regardless of its value...  ```java ...         Element excludeUnlistedClasses = DomUtils.getChildElementByTagName(persistenceUnit, EXCLUDE_UNLISTED_CLASSES);         if (excludeUnlistedClasses != null) {             unitInfo.setExcludeUnlistedClasses(true);         } ... ```  ...and leaves it as the default value (`false` in `MutablePersistenceUnitInfo`) if `` is missing. This is incorrect. It will result in the default value being incorrect in JPA 2.0/2.1, and in the value being incorrectly set if `persistence.xml` contains `false`.  ---  **Affects:** 3.1 GA, 3.2 GA, 4.0 M1  **Reference URL:** https://hibernate.atlassian.net/browse/HHH-8364  **Issue Links:** - #15452 Spring no longer recognizes mapped classes","closed","type: bug,","spring-projects-issues","2013-07-22T09:18:05Z","2019-01-11T22:03:20Z"
"","15390","Add LocalContainerEntityManagerFactoryBean missing methods to easily replace elements in persistence.xml [SPR-10764]","**[Nick Williams](https://jira.spring.io/secure/ViewProfile.jspa?name=guitarking117)** opened **[SPR-10764](https://jira.spring.io/browse/SPR-10764?redirect=false)** and commented  As of Spring 4.0, `LocalContainerEntityManagerFactoryBean` requires JPA 2.0 or higher. One of the great things about `LocalContainerEntityManagerFactoryBean` is its ability to completely replace the need for a `persistence.xml` file, thus resulting in a pure Java JPA configuration.  However, `LocalContainerEntityManagerFactoryBean` is lacking several methods that replace elements in `persistence.xml`. Because of this oversight, users have to do something like this to fully configure a persistence unit without `persistence.xml`:  ```java ...         Map properties = new Hashtable();         properties.put(""javax.persistence.transactionType"",                 PersistenceUnitTransactionType.RESOURCE_LOCAL);         properties.put(""javax.persistence.sharedCache.mode"",                 SharedCacheMode.ENABLE_SELECTIVE);         properties.put(""javax.persistence.validation.mode"",                 ValidationMode.NONE); ...         factory.setJpaPropertyMap(properties); ... ```  This is error prone, and even finding these properties names short of reading the spec is non-trivial. As such, many users simply create a `persistence.xml` file anyway, and use it to specify the values that you can't specify with `LocalContainerEntityManagerFactoryBean`. I propose adding methods to `LocalContainerEntityManagerFactoryBean` to make up this gap. All of the elements indicated that we're replacing exist in JPA 2.0.  ```java ...     /** Replaces {@code } element */     public void setSharedCacheMode(javax.persistence.SharedCacheMode sharedCacheMode) { }      /** Replaces {@code transaction-type} attribute in {@code } element */     public void setTransactionType(javax.persistence.spi.PersistenceUnitTransactionType transactionType) { }      /** Replaces {@code } element */     public void setValidationMode(javax.persistence.ValidationMode validationMode) { }      /** Shortcut for setting property javax.persistence.schema-generation.database.action */     public void setSchemaGenerationAction(String schemaGenerationAction) { } ... ```  I threw in a method for `javax.persistence.schema-generation.database.action` as well since it is a commonly-needed persistence property.  There should, of course, be getters for these properties as well.   ---  **Affects:** 4.0 M1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/219eeb2369a49af607197d4e464a6a4d772a7bce","closed","type: enhancement,","spring-projects-issues","2013-07-22T06:14:03Z","2013-08-29T16:20:46Z"
"","15318","Need SpringClientConfigurator to go with Spring[Server]Configurator [SPR-10690]","**[Nick Williams](https://jira.spring.io/secure/ViewProfile.jspa?name=guitarking117)** opened **[SPR-10690](https://jira.spring.io/browse/SPR-10690?redirect=false)** and commented  Spring's WebSocket support includes a `org.springframework.web.socket.server.endpoint.SpringConfigurator` that extends `javax.websocket.server.ServerEndpointConfig.Configurator`. However, it does not have an analogous extension for `javax.websocket.ClientEndpointConfig.Configurator`. Need to create a `org.springframework.web.socket.client.endpoint.SpringClientConfigurator` or similar. Might want to rename `SpringConfigurator` to `SpringServerConfigurator` for consistency.   ---  **Affects:** 4.0 M1","closed","type: enhancement,","spring-projects-issues","2013-06-25T21:10:24Z","2014-04-30T07:10:33Z"
"","15303","Inferring an ApplicationListener's event type from a lambda or method reference [SPR-10675]","**[Nick Williams](https://jira.spring.io/secure/ViewProfile.jspa?name=guitarking117)** opened **[SPR-10675](https://jira.spring.io/browse/SPR-10675?redirect=false)** and commented  This works:  ``` @Service public class MyListener {     @Bean     public ApplicationListener myListener$listener1() {         return new ApplicationListener() {             @Override             public void onApplicationEvent(Event1 event1) {                 System.out.println(""Received Event1."");             }         };     }      @Bean     public ApplicationListener myListener$listener2() {         return new ApplicationListener() {             @Override             public void onApplicationEvent(Event2 event1) {                 System.out.println(""Received Event2."");             }         };     } } ```  These two variations do not:  ``` @Service public class MyListener {     @Bean     public ApplicationListener myListener$listener1() {         return (Event1 e) -> {             System.out.println(""Received Event1."");         };     }      @Bean     public ApplicationListener myListener$listener2() {         return (Event2 e) -> {             System.out.println(""Received Event2."");         };     } } ```  ``` @Service public class MyListener {     public void onEvent1(Event1 event1) {         System.out.println(""Received Event1."");     }      public void onEvent2(Event2 event2) {         System.out.println(""Received Event2."");     }      @Bean     public ApplicationListener myListener$listener1() {         return this::onEvent1;     }      @Bean     public ApplicationListener myListener$listener2() {         return this::onEvent2;     } } ```  With either of these last two, Spring never starts. The following output is logged:  ``` 13:32:49.106 [RMI TCP Connection(3)-127.0.0.1]   INFO  org.springframework.web.context.ContextLoader org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:273): Root WebApplicationContext: initialization started 13:32:49.109 [RMI TCP Connection(3)-127.0.0.1]   INFO  org.springframework.web.context.support.AnnotationConfigWebApplicationContext org.springframework.context.support.AbstractApplicationContext.prepareRefresh(AbstractApplicationContext.java:524): Refreshing Root WebApplicationContext: startup date [Sun Jun 23 13:32:49 CDT 2013]; root of context hierarchy 13:32:49.215 [RMI TCP Connection(3)-127.0.0.1]   INFO  org.springframework.context.annotation.ClassPathBeanDefinitionScanner org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.registerDefaultFilters(ClassPathScanningCandidateComponentProvider.java:233): JSR-250 'javax.annotation.ManagedBean' found and supported for component scanning 13:32:49.217 [RMI TCP Connection(3)-127.0.0.1]   INFO  org.springframework.context.annotation.ClassPathBeanDefinitionScanner org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.registerDefaultFilters(ClassPathScanningCandidateComponentProvider.java:241): JSR-330 'javax.inject.Named' annotation found and supported for component scanning 13:32:49.218 [RMI TCP Connection(3)-127.0.0.1]   INFO  org.springframework.web.context.support.AnnotationConfigWebApplicationContext org.springframework.web.context.support.AnnotationConfigWebApplicationContext.loadBeanDefinitions(AnnotationConfigWebApplicationContext.java:210): Registering annotated classes: [class com.wrox.config.RootContextConfiguration] 13:32:49.512 [RMI TCP Connection(3)-127.0.0.1]   INFO  org.springframework.context.annotation.ClassPathBeanDefinitionScanner org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.registerDefaultFilters(ClassPathScanningCandidateComponentProvider.java:233): JSR-250 'javax.annotation.ManagedBean' found and supported for component scanning 13:32:49.512 [RMI TCP Connection(3)-127.0.0.1]   INFO  org.springframework.context.annotation.ClassPathBeanDefinitionScanner org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.registerDefaultFilters(ClassPathScanningCandidateComponentProvider.java:241): JSR-330 'javax.inject.Named' annotation found and supported for component scanning 13:32:49.807 [RMI TCP Connection(3)-127.0.0.1]   INFO  org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.(AutowiredAnnotationBeanPostProcessor.java:140): JSR-330 'javax.inject.Inject' annotation found and supported for autowiring 13:32:49.859 [RMI TCP Connection(3)-127.0.0.1]   INFO  com.wrox.config.RootContextConfiguration com.wrox.config.RootContextConfiguration.initialize(RootContextConfiguration.java:120): Setting up thread pool task scheduler with 20 threads. 13:32:49.922 [RMI TCP Connection(3)-127.0.0.1]   INFO  org.springframework.web.context.support.AnnotationConfigWebApplicationContext org.springframework.context.support.AbstractApplicationContext$BeanPostProcessorChecker.postProcessAfterInitialization(AbstractApplicationContext.java:1445): Bean 'rootContextConfiguration' of type [class com.wrox.config.RootContextConfiguration$$EnhancerByCGLIB$$45668b0d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 13:32:49.930 [RMI TCP Connection(3)-127.0.0.1]   INFO  com.wrox.config.RootContextConfiguration com.wrox.config.RootContextConfiguration.getAsyncExecutor(RootContextConfiguration.java:106): Configuring asynchronous method executor org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler@6f83de8a. 13:32:49.939 [RMI TCP Connection(3)-127.0.0.1]   INFO  org.springframework.web.context.support.AnnotationConfigWebApplicationContext org.springframework.context.support.AbstractApplicationContext$BeanPostProcessorChecker.postProcessAfterInitialization(AbstractApplicationContext.java:1445): Bean 'org.springframework.scheduling.annotation.ProxyAsyncConfiguration' of type [class org.springframework.scheduling.annotation.ProxyAsyncConfiguration$$EnhancerByCGLIB$$80f4fcd1] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 13:32:49.994 [RMI TCP Connection(3)-127.0.0.1]   INFO  org.springframework.web.context.support.AnnotationConfigWebApplicationContext org.springframework.context.support.AbstractApplicationContext$BeanPostProcessorChecker.postProcessAfterInitialization(AbstractApplicationContext.java:1445): Bean 'org.springframework.scheduling.annotation.SchedulingConfiguration' of type [class org.springframework.scheduling.annotation.SchedulingConfiguration$$EnhancerByCGLIB$$b4ccf16b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 13:32:50.034 [RMI TCP Connection(3)-127.0.0.1]   INFO  org.springframework.web.context.support.AnnotationConfigWebApplicationContext org.springframework.context.support.AbstractApplicationContext$BeanPostProcessorChecker.postProcessAfterInitialization(AbstractApplicationContext.java:1445): Bean 'messageSource' of type [class org.springframework.context.support.ReloadableResourceBundleMessageSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 13:32:50.175 [RMI TCP Connection(3)-127.0.0.1]   INFO  org.springframework.web.context.support.AnnotationConfigWebApplicationContext org.springframework.context.support.AbstractApplicationContext$BeanPostProcessorChecker.postProcessAfterInitialization(AbstractApplicationContext.java:1445): Bean 'localValidatorFactoryBean' of type [class org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 13:32:50.197 [RMI TCP Connection(3)-127.0.0.1]   INFO  org.springframework.beans.factory.support.DefaultListableBeanFactory org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:611): Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@75c729d4: defining beans [org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,rootContextConfiguration,org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor,myListener,myListener$listener1,myListener$listener2,org.springframework.scheduling.annotation.ProxyAsyncConfiguration,org.springframework.context.annotation.internalAsyncAnnotationProcessor,org.springframework.scheduling.annotation.SchedulingConfiguration,org.springframework.context.annotation.internalScheduledAnnotationProcessor,messageSource,objectMapper,taskScheduler,localValidatorFactoryBean,methodValidationPostProcessor,jaxb2Marshaller]; root of factory hierarchy 13:32:50.443 [RMI TCP Connection(3)-127.0.0.1]   INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:161): Initializing ExecutorService  'taskScheduler' 13:32:50.462 [RMI TCP Connection(3)-127.0.0.1]   INFO  org.springframework.oxm.jaxb.Jaxb2Marshaller org.springframework.oxm.jaxb.Jaxb2Marshaller.createJaxbContextFromPackages(Jaxb2Marshaller.java:484): Creating JAXBContext by scanning packages [com.wrox.site] 13:32:50.542 [RMI TCP Connection(3)-127.0.0.1]   ERROR org.springframework.web.context.ContextLoader org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:319): Context initialization failed java.lang.ClassCastException: org.springframework.context.event.ContextRefreshedEvent cannot be cast to com.wrox.site.Event1 	at com.wrox.site.MyListener$$Lambda$3.onApplicationEvent(Unknown Source) ~[MyListener.class:?] 	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:98) ~[spring-context-4.0.0.M1.jar:4.0.0.M1] 	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:344) ~[spring-context-4.0.0.M1.jar:4.0.0.M1] 	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:948) ~[spring-context-4.0.0.M1.jar:4.0.0.M1] 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:496) ~[spring-context-4.0.0.M1.jar:4.0.0.M1] 	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:389) ~[spring-web-4.0.0.M1.jar:4.0.0.M1] 	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:294) [spring-web-4.0.0.M1.jar:4.0.0.M1] 	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:106) [spring-web-4.0.0.M1.jar:4.0.0.M1] 	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4765) [catalina.jar:8.0.0-dev] 	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5210) [catalina.jar:8.0.0-dev] 	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150) [catalina.jar:8.0.0-dev] 	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:726) [catalina.jar:8.0.0-dev] 	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:702) [catalina.jar:8.0.0-dev] 	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:698) [catalina.jar:8.0.0-dev] 	at org.apache.catalina.startup.HostConfig.manageApp(HostConfig.java:1491) [catalina.jar:8.0.0-dev] 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0-ea] 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) ~[?:1.8.0-ea] 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0-ea] 	at java.lang.reflect.Method.invoke(Method.java:491) ~[?:1.8.0-ea] 	at org.apache.tomcat.util.modeler.BaseModelMBean.invoke(BaseModelMBean.java:300) [tomcat-coyote.jar:8.0.0-dev] 	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819) [?:1.8.0-ea] 	at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:792) [?:1.8.0-ea] 	at org.apache.catalina.mbeans.MBeanFactory.createStandardContext(MBeanFactory.java:468) [catalina.jar:8.0.0-dev] 	at org.apache.catalina.mbeans.MBeanFactory.createStandardContext(MBeanFactory.java:415) [catalina.jar:8.0.0-dev] 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0-ea] 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) ~[?:1.8.0-ea] 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0-ea] 	at java.lang.reflect.Method.invoke(Method.java:491) ~[?:1.8.0-ea] 	at org.apache.tomcat.util.modeler.BaseModelMBean.invoke(BaseModelMBean.java:300) [tomcat-coyote.jar:8.0.0-dev] 	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819) [?:1.8.0-ea] 	at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:792) [?:1.8.0-ea] 	at javax.management.remote.rmi.RMIConnectionImpl.doOperation(RMIConnectionImpl.java:1465) [?:1.8.0-ea] 	at javax.management.remote.rmi.RMIConnectionImpl.access$300(RMIConnectionImpl.java:75) [?:1.8.0-ea] 	at javax.management.remote.rmi.RMIConnectionImpl$PrivilegedOperation.run(RMIConnectionImpl.java:1306) [?:1.8.0-ea] 	at javax.management.remote.rmi.RMIConnectionImpl.doPrivilegedOperation(RMIConnectionImpl.java:1398) [?:1.8.0-ea] 	at javax.management.remote.rmi.RMIConnectionImpl.invoke(RMIConnectionImpl.java:827) [?:1.8.0-ea] 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0-ea] 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) ~[?:1.8.0-ea] 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0-ea] 	at java.lang.reflect.Method.invoke(Method.java:491) ~[?:1.8.0-ea] 	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:322) [?:1.8.0-ea] 	at sun.rmi.transport.Transport$1.run(Transport.java:177) [?:1.8.0-ea] 	at sun.rmi.transport.Transport$1.run(Transport.java:174) [?:1.8.0-ea] 	at java.security.AccessController.doPrivileged(Native Method) ~[?:1.8.0-ea] 	at sun.rmi.transport.Transport.serviceCall(Transport.java:173) [?:1.8.0-ea] 	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:556) [?:1.8.0-ea] 	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:811) [?:1.8.0-ea] 	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:670) [?:1.8.0-ea] 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) [?:1.8.0-ea] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) [?:1.8.0-ea] 	at java.lang.Thread.run(Thread.java:724) [?:1.8.0-ea] 13:32:50.563 [RMI TCP Connection(3)-127.0.0.1]   INFO  org.springframework.web.context.support.AnnotationConfigWebApplicationContext org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1045): Closing Root WebApplicationContext: startup date [Sun Jun 23 13:32:49 CDT 2013]; root of context hierarchy 13:32:50.570 [RMI TCP Connection(3)-127.0.0.1]   WARN  org.springframework.web.context.support.AnnotationConfigWebApplicationContext org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1055): Exception thrown from ApplicationListener handling ContextClosedEvent java.lang.ClassCastException: org.springframework.context.event.ContextClosedEvent cannot be cast to com.wrox.site.Event1 	at com.wrox.site.MyListener$$Lambda$3.onApplicationEvent(Unknown Source) ~[MyListener.class:?] 	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:98) ~[spring-context-4.0.0.M1.jar:4.0.0.M1] 	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:344) ~[spring-context-4.0.0.M1.jar:4.0.0.M1] 	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1052) [spring-context-4.0.0.M1.jar:4.0.0.M1] 	at org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:1013) [spring-context-4.0.0.M1.jar:4.0.0.M1] 	at org.springframework.web.context.ContextLoader.closeWebApplicationContext(ContextLoader.java:559) [spring-web-4.0.0.M1.jar:4.0.0.M1] 	at org.springframework.web.context.ContextLoaderListener.contextDestroyed(ContextLoaderListener.java:115) [spring-web-4.0.0.M1.jar:4.0.0.M1] 	at org.apache.catalina.core.StandardContext.listenerStop(StandardContext.java:4805) [catalina.jar:8.0.0-dev] 	at org.apache.catalina.core.StandardContext.stopInternal(StandardContext.java:5414) [catalina.jar:8.0.0-dev] 	at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:232) [catalina.jar:8.0.0-dev] 	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:160) [catalina.jar:8.0.0-dev] 	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:726) [catalina.jar:8.0.0-dev] 	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:702) [catalina.jar:8.0.0-dev] 	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:698) [catalina.jar:8.0.0-dev] 	at org.apache.catalina.startup.HostConfig.manageApp(HostConfig.java:1491) [catalina.jar:8.0.0-dev] 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0-ea] 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) ~[?:1.8.0-ea] 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0-ea] 	at java.lang.reflect.Method.invoke(Method.java:491) ~[?:1.8.0-ea] 	at org.apache.tomcat.util.modeler.BaseModelMBean.invoke(BaseModelMBean.java:300) [tomcat-coyote.jar:8.0.0-dev] 	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819) [?:1.8.0-ea] 	at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:792) [?:1.8.0-ea] 	at org.apache.catalina.mbeans.MBeanFactory.createStandardContext(MBeanFactory.java:468) [catalina.jar:8.0.0-dev] 	at org.apache.catalina.mbeans.MBeanFactory.createStandardContext(MBeanFactory.java:415) [catalina.jar:8.0.0-dev] 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0-ea] 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) ~[?:1.8.0-ea] 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0-ea] 	at java.lang.reflect.Method.invoke(Method.java:491) ~[?:1.8.0-ea] 	at org.apache.tomcat.util.modeler.BaseModelMBean.invoke(BaseModelMBean.java:300) [tomcat-coyote.jar:8.0.0-dev] 	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819) [?:1.8.0-ea] 	at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:792) [?:1.8.0-ea] 	at javax.management.remote.rmi.RMIConnectionImpl.doOperation(RMIConnectionImpl.java:1465) [?:1.8.0-ea] 	at javax.management.remote.rmi.RMIConnectionImpl.access$300(RMIConnectionImpl.java:75) [?:1.8.0-ea] 	at javax.management.remote.rmi.RMIConnectionImpl$PrivilegedOperation.run(RMIConnectionImpl.java:1306) [?:1.8.0-ea] 	at javax.management.remote.rmi.RMIConnectionImpl.doPrivilegedOperation(RMIConnectionImpl.java:1398) [?:1.8.0-ea] 	at javax.management.remote.rmi.RMIConnectionImpl.invoke(RMIConnectionImpl.java:827) [?:1.8.0-ea] 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0-ea] 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) ~[?:1.8.0-ea] 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0-ea] 	at java.lang.reflect.Method.invoke(Method.java:491) ~[?:1.8.0-ea] 	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:322) [?:1.8.0-ea] 	at sun.rmi.transport.Transport$1.run(Transport.java:177) [?:1.8.0-ea] 	at sun.rmi.transport.Transport$1.run(Transport.java:174) [?:1.8.0-ea] 	at java.security.AccessController.doPrivileged(Native Method) ~[?:1.8.0-ea] 	at sun.rmi.transport.Transport.serviceCall(Transport.java:173) [?:1.8.0-ea] 	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:556) [?:1.8.0-ea] 	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:811) [?:1.8.0-ea] 	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:670) [?:1.8.0-ea] 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) [?:1.8.0-ea] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) [?:1.8.0-ea] 	at java.lang.Thread.run(Thread.java:724) [?:1.8.0-ea] 13:32:50.573 [RMI TCP Connection(3)-127.0.0.1]   INFO  org.springframework.beans.factory.support.DefaultListableBeanFactory org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:452): Destroying singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@75c729d4: defining beans [org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,rootContextConfiguration,org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor,myListener,myListener$listener1,myListener$listener2,org.springframework.scheduling.annotation.ProxyAsyncConfiguration,org.springframework.context.annotation.internalAsyncAnnotationProcessor,org.springframework.scheduling.annotation.SchedulingConfiguration,org.springframework.context.annotation.internalScheduledAnnotationProcessor,messageSource,objectMapper,taskScheduler,localValidatorFactoryBean,methodValidationPostProcessor,jaxb2Marshaller]; root of factory hierarchy 13:32:50.573 [RMI TCP Connection(3)-127.0.0.1]   INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown(ExecutorConfigurationSupport.java:199): Shutting down ExecutorService 'taskScheduler' ```  It seems to me that this should work. Perhaps a tweak to the listener registry to detect the method argument type from lambdas and references, too, instead of just regular and anonymous classes.  ---  **Affects:** 4.0 M1  **Issue Links:** - #17130 GenericTypeResolver should be able to introspect generic arguments from lambdas - #16146 Introspect factory method return type for type variable resolution at injection points - #16427 `@Aspect` aspect not correctly applied to Java 8 lambda-defined `@Beans`  2 votes, 8 watchers","closed","in: core,","spring-projects-issues","2013-06-23T11:36:31Z","2019-07-21T15:34:09Z"
"","15272","AbstractMethodError thrown within MethodValidationInterceptor [SPR-10644]","**[Nick Williams](https://jira.spring.io/secure/ViewProfile.jspa?name=guitarking117)** opened **[SPR-10644](https://jira.spring.io/browse/SPR-10644?redirect=false)** and commented  I've filed so many bugs since 4.M1 came out, I don't know whether y'all are gonna love me or hate me. :-)  I have the following interface and implementation:  ``` @Validated public interface EmployeeService {     public void saveEmployee(             @NotNull(message = ""{validate.employeeService.saveEmployee}"")             @Valid Employee employee     );      public Employee getEmployee(             @Min(value = 1L,                     message = ""{validate.employeeService.getEmployee.id}"") long id     );      @NotNull     public List getAllEmployees(); } ```  ``` @Service public class DefaultEmployeeService implements EmployeeService {     @Override     public void saveEmployee(Employee employee)     {         // no-op     }      @Override     public Employee getEmployee(long id)     {         return null;     }      @Override     public List getAllEmployees()     {         return null; // to force trigger a validation error     } } ```  I then have a simple controller that uses the service:  ``` @Controller public class EmployeeController {     @Inject EmployeeService employeeService;      @RequestMapping(value = ""/"", method = RequestMethod.GET)     public String listEmployees(Map model)     {         model.put(""employees"", this.employeeService.getAllEmployees());         return ""employee/list"";     } } ```  I defined a `MethodValidationPostProcessor`, which attaches a `MethodValidationInterceptor` to my `DefaultEmployeeService` methods. When I go to the handler method in the browser, I get this error:  ``` java.lang.AbstractMethodError: org.springframework.validation.beanvalidation.LocalValidatorFactoryBean.forExecutables()Ljavax/validation/executable/ExecutableValidator; 	sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:191) 	org.springframework.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:176) 	org.springframework.validation.beanvalidation.MethodValidationInterceptor.invoke(MethodValidationInterceptor.java:118) 	org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) 	org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:207) 	com.sun.proxy.$Proxy36.getAllEmployees(Unknown Source) 	com.wrox.site.EmployeeController.listEmployees(EmployeeController.java:23) 	sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) 	sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	java.lang.reflect.Method.invoke(Method.java:491) 	org.springframework.web.method.support.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:219) 	org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:132) 	org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104) 	org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:747) 	org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:688) 	org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:83) 	org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:925) 	org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:856) 	org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:946) 	org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:837) 	javax.servlet.http.HttpServlet.service(HttpServlet.java:621) 	org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:822) 	javax.servlet.http.HttpServlet.service(HttpServlet.java:728) 	org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:83) ```  This is because `LocalValidatorFactoryBean` (`SpringValidatorAdapter`) does not implement `forExecutables`. Here's what the JavaDoc has to say about that:  > Note that Bean Validation 1.1's #forExecutables method isn't supported: We do not expect that method to be called by application code; consider MethodValidationInterceptor instead. If you really need programmatic #forExecutables access, inject this class as a ValidatorFactory and call getValidator() on it, then #forExecutables on the returned native Validator reference instead of directly on this class.  Well, I am using a `MethodValidationInterceptor`. `MethodValidationInterceptor` calls `forExecutables`, so I'm sure you can see the problem here. I managed to work around this by changing my post-processor definition from this:  ``` @Bean public MethodValidationPostProcessor methodValidationPostProcessor() {     MethodValidationPostProcessor processor =             new MethodValidationPostProcessor();     processor.setValidator(this.localValidatorFactoryBean());     return processor; } ```  To this:  ``` @Bean public MethodValidationPostProcessor methodValidationPostProcessor() {     MethodValidationPostProcessor processor =             new MethodValidationPostProcessor();     processor.setValidator(this.localValidatorFactoryBean().getValidator());     return processor; } ```  However, this is non-obvious and certainly not documented clearly.  I see no reason for the restriction documented on `LocalValidatorFactoryBean` regarding `forExecutables`. There's no reason that `SpringValidatorAdapter` can't implement this method. If the underlying `Validator` is BV 1.1, great. If it's not, the call to the method will throw an `AbstractMethodError`. But it already does that now, just always, even if the `Validator` is BV 1.1.  I'll send in a pull request shortly.   ---  **Affects:** 4.0 M1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7b2c74b05c5ca195f7259e1c4e6a2e94737eb613, https://github.com/spring-projects/spring-framework/commit/84249740b85e6b414a6969d79aa2bb73602dedd6","closed","in: core,","spring-projects-issues","2013-06-09T14:02:32Z","2013-07-24T10:17:08Z"
"","15269","Add support for javax.validation.executable.ValidateOnExecution [SPR-10641]","**[Nick Williams](https://jira.spring.io/secure/ViewProfile.jspa?name=guitarking117)** opened **[SPR-10641](https://jira.spring.io/browse/SPR-10641?redirect=false)** and commented  Bean Validation 1.1 added a `@javax.validation.executable.ValidateOnExecution` annotation meant to mark classes or methods whose method executions should be validated. This is in some ways quite synonymous with Spring's `@Validated`, but with broader implications.  `@Validated` is for classes and parameters only. `@ValidateOnExecution` applies to packages, classes, methods, and constructors (but not parameters). So, even if I configured the `MethodValidationPostProcessor` to look for `@ValidateOnExecution` by calling `setValidatedAnnotationType` it wouldn't match cases where the package or method was annotated.  Out of the box, if a `MethodValidationPostProcessor` is defined it seems like Spring should enable method validation if any of the following conditions are met:  - The package is annotated `@Validated` _or_ `@ValidateOnExecution` - The class is annotated `@Validated` _or_ `@ValidateOnExecution` - The constructor is annotated `@Validated` _or_ `@ValidateOnExecution` (assuming Spring is responsible for the instantiation of the bean) - The method is annotated `@Validated` _or_ `@ValidateOnExecution` - The parameter is annotated `@Validated` (to preserve current functionality)  This will necessitate:  - Expanding the `@Target` of `@Validated` to include packages, constructors, and methods - Changing `MethodPostProcessor` to look for both annotations on the package, class, or method instead of just `@Validated` on the class - Changing bean instantiation procedures to look for both annotations on the constructor  ---  **Affects:** 4.0 M1  **Issue Links:** - #13812 `@Validated` should allow ElementType.METHOD target  1 votes, 4 watchers","closed","status: bulk-closed,","spring-projects-issues","2013-06-08T16:18:14Z","2019-01-13T06:59:26Z"
"","15268","LocalValidatorFactoryBean#setProviderClass(Class) is unsafe [SPR-10640]","**[Nick Williams](https://jira.spring.io/secure/ViewProfile.jspa?name=guitarking117)** opened **[SPR-10640](https://jira.spring.io/browse/SPR-10640?redirect=false)** and commented  Currently, the signature for `LocalValidatorFactoryBean`'s `setProviderClass` method is as follows:  ``` public void setProviderClass(Class providerClass) ```  This is unsafe, as it would be easy for someone to inadvertently set the incorrect class as the argument to this method. Ultimately the argument passed to this method call is then passed to `Validation#byProvider(Class)`, so the signature should really be this:  ``` public  void setProviderClass(Class providerClass) ```  This will make it impossible for users of Spring's `@Configuration` to compile a configuration class that sets this value to an incorrect class.  ---  **Affects:** 4.0 M1  **Issue Links:** - #13613 spring-context missing optional Import-Package directive for javax.validation.spi","closed","in: core,","spring-projects-issues","2013-06-08T13:17:33Z","2019-01-12T16:23:58Z"
"","15246","Need to be able to call setLocale from within resolveLocale in custom LocaleResolver [SPR-10618]","**[Nick Williams](https://jira.spring.io/secure/ViewProfile.jspa?name=guitarking117)** opened **[SPR-10618](https://jira.spring.io/browse/SPR-10618?redirect=false)** and commented  I want to be able to do this in a custom `LocaleResolver`:  - Use the logged-in `Principal`'s locale, if he has one. - If not, use the locale specified in a cookie, if it exists. - If not, use the `Accept-Language` header.  That in itself isn't that difficult. However, I also want to detect if the `Principal`'s locale has been changed (for example, on a user profile settings page) and, if it has, update the cookie. The only way to do this is by calling the `setLocale` method from the `resolveLocale` method. For example:  ``` public class UserCookieHeaderLocaleResolver extends CookieLocaleResolver {     @Override     public Locale resolveLocale(HttpServletRequest request) {         Locale locale = super.resolveLocale(request);          Principal user = request.getUserPrincipal();         if(user != null && user instanceof FooPrincipal) {             Locale userLocale = ((FooPrincipal)user).getLocale();             if(userLocale != null && !userLocale.equals(locale)) {                 locale = userLocale;                 this.setLocale(request, ???, userLocale);             }         }          return locale;     } } ```  However, there is the obvious problem that the `resolveLocale` method has no access to the `HttpServletResponse`. It would be great if this paramater could be added to the `resolveLocale` signature. The change itself is trivial, but the impact is major, hence why I marked this a major improvement.  I know interfaces _can_ change between major versions, but I'm not sure how willing the community is going to be to change this particular method.  Thoughts?   ---  **Affects:** 4.0 M1","closed","status: bulk-closed,","spring-projects-issues","2013-06-02T14:42:57Z","2019-01-12T03:41:53Z"
"","15244","Add new ClusteredApplicationEvent extends ApplicationEvent with multicaster that uses JMS to distribute messages [SPR-10616]","**[Nick Williams](https://jira.spring.io/secure/ViewProfile.jspa?name=guitarking117)** opened **[SPR-10616](https://jira.spring.io/browse/SPR-10616?redirect=false)** and commented  #8322 ""ApplicationEvent across JVM using JMS"" made the same request but with no suggested details. That request was filed 6 years ago and closed automatically ""through a selective bulk update, as part of a larger effort to better manage unresolved issues"" (according to the comment).  Shahzad Bhatti describes in his blog post ""[Integrating Spring Event Notification with JMS](http://weblog.plexobject.com/?p=1651)"" a pattern for using Spring's `ApplicationEvent` and `ApplicationListener` classes to leverage JMS and form distributable messages/events.  I have myself implemented two different approaches to achieve clustered events using Spring's `ApplicationEvent`. Both involved a `ClusteredApplicationEvent extends ApplicationEvent` that served as a marker interface for `ApplicationEvent` s that should be distributed instead of simply multicast on the JVM. The `ClusteredApplicationEvent` had a `rebroadcasted` flag that indicated whether an event broadcast to the application had just been multicast locally or had been received from another server (on receiving an event from the cluster the `rebroadcasted` flag was marked `true` before multicasting it). This kept the events from rebroadcasting recursively. One approach used a shared database to persist events to and poll for events from other nodes. The other approach used a socket connection to stream serialized events between nodes (each node had a connection to every other node). These have both been reliable patterns that have worked for me for a couple years now.  Finally, I have seen several other inquiries/ideas/suggestions online throughout the years to make `ApplicationEvent` s distributable in a cluster.  Here is my suggestion:  #### Create generic `ClusteredApplicationEvent`  Any time the developer wishes a message to be sent to the entire cluster as opposed to just the local JVM, he would make the event extend this class. Alternatively, this class could be called something else, like `DistributedApplicationEvent`, `DistributableApplicationEvent`, etc. I would argue against using JMS in the name, so that future/custom non-JMS implementations can also utilize this class.  ``` package org.springframework.context.event;  public abstract class ClusteredApplicationEvent extends ApplicationEvent {     private final Serializable serializableSource; // original source is transient, won't serialize     private boolean rebroadcasted;      public ClusteredApplicationEvent(Serializable source) {         super(source);         this.serializableSource = source;     }      final boolean isRebroadcasted() {         return this.rebroadcasted;     }      final void setRebroadcasted() {         this.rebroadcasted = true;     }      @Override     public Serializable getSource() {         return this.serializableSource;     }      private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {         in.defaultReadObject();         this.source = this.serializableSource; // restore transient value     } } ```  #### Create an abstract `ClusteredApplicationEventMulticaster`  This class would take care of common tasks that are related to all clustered multicasters, such as not publishing `ApplicationEvent` s that aren't `ClusteredApplicationEvent` s to the cluster (only locally), and not publishing `ClusteredApplicationEvent` s whose `rebroadcasted` flag was `true` to the cluster (only locally). Spring Framework users would have to configured some implementation of `ClusteredApplicationEventMulticaster` for `ClusteredApplicationEvent` s to work. Otherwise, `ClusteredApplicationEvent` s would be treated like any other events and just multicast locally.  ``` package org.springframework.context.event;  public abstract class ClusteredApplicationEventMulticaster extends SimpleApplicationEventMulticaster {     // ...     @Override     final public void multicastEvent(ApplicationEvent event) {         try {             super.multicastEvent(event);         } finally {             try {                 if(event instanceof ClusteredApplicationEvent &&                     !((ClusteredApplicationEvent)event).isRebroadcasted()) {                     this.publishClusteredEvent((ClusteredApplicationEvent)event);                 }             } catch(Exception e) {                 log.error(""Failed to broadcast distributable event to cluster."");             }         }     }      protected abstract void publishClusteredEvent(ClusteredApplicationEvent event);      final protected void handleReceivedClusteredEvent(ClusteredApplicationEvent event) {         event.setRebroadcasted();         this.multicastEvent(event);     }     // ... } ```  #### Create a `JmsApplicationEventMulticaster` in the spring-jms project  This multicaster will be the only clustered multicaster that Spring supports initially, though users will be free to implement their own. It would obviously expect some form of Spring JMS configuration in order to work, and would throw an exception on initialization if a JMS configuration did not exist for it to use. It would implement whatever other interfaces were necessary to support listening for JMS events (I'm unfamiliar with this API right now) and would call `handleReceivedClusteredEvent` when it received those JMS events.  ``` package org.springframework.jms;  public class JmsApplicationEventMulticaster extends ClusteredApplicationEventMulticaster implements ... {     // ...     protected void publishClusteredEvent(ClusteredApplicationEvent event) {        // ...     } } ```  Thoughts?  ---  **Affects:** 4.0 M1  **Issue Links:** - #8322 ApplicationEvent across JVM using JMS","closed","type: enhancement,","spring-projects-issues","2013-06-01T10:57:47Z","2019-01-11T22:26:32Z"
"","15243","Spring Framework JIRA does not have Web:Socket component [SPR-10615]","**[Nick Williams](https://jira.spring.io/secure/ViewProfile.jspa?name=guitarking117)** opened **[SPR-10615](https://jira.spring.io/browse/SPR-10615?redirect=false)** and commented  So that bugs/improvements may be filed against the Spring Framework 4.0 WebSocket support and be easily grouped/identified, there should be a ""Web:Socket"" or ""WebSocket"" component in the JIRA, but there is only ""Web,"" ""Web:Servlet,"" and ""Web:Portlet.""   ---  **Affects:** 4.0 M1","closed","type: task,","spring-projects-issues","2013-06-01T09:52:47Z","2013-07-24T10:17:08Z"
"","15240","@Scheduled does not work on @ServerEndpoint deployed with per-connection lifecycle  [SPR-10611]","**[Nick Williams](https://jira.spring.io/secure/ViewProfile.jspa?name=guitarking117)** opened **[SPR-10611](https://jira.spring.io/browse/SPR-10611?redirect=false)** and commented  I created the following class:  ```java @ServerEndpoint(value = ""/chat/{sessionId}"",         encoders = ChatMessageDecoderCodec.class,         decoders = ChatMessageDecoderCodec.class,         configurator = SpringConfigurator.class) public class ChatEndpoint {     ...     @Inject SessionRegistry sessionRegistry;     @Inject ChatService chatService;     ...     @Scheduled(fixedDelay = 25_000L, initialDelay = 25_000L)     public void sendPing()     {         log.info(""Sending ping to WebSocket client."");         try         {             this.wsSession.getBasicRemote()                     .sendPing(ByteBuffer.wrap(ChatEndpoint.pongData));         }         catch(IOException e)         {             log.warn(""Failed to send ping message to WebSocket client."", e);         }     }     ...     @PostConstruct     public void initialize()     {         this.sessionRegistry.registerOnRemoveCallback(this::httpSessionRemoved);     } } ```  When I connect to the WebSocket connection, the `@Inject` dependencies get properly injected and the `initialize` method gets properly called. However, the `@Scheduled` method never executes. A `@Scheduled` method on a separate `@Service` executes just fine (so my scheduler/executor are configured correctly), but not the method on the endpoint.  This is likely to be a common use case. Pings need to be sent periodically to keep connections alive, and `@Scheduled` is the perfect way to do this. Whatever is keeping this from working should be resolved.  ---  **Affects:** 4.0 M1  **Issue Links:** - #15234 SpringConfigurator uses ListableBeanFactory method which is documented to be slow for EVERY new WebSocket connection  0 votes, 5 watchers","closed","status: declined,","spring-projects-issues","2013-05-30T20:18:48Z","2019-01-12T16:24:02Z"
"","15234","SpringConfigurator uses ListableBeanFactory method which is documented to be slow for EVERY new WebSocket connection [SPR-10605]","**[Nick Williams](https://jira.spring.io/secure/ViewProfile.jspa?name=guitarking117)** opened **[SPR-10605](https://jira.spring.io/browse/SPR-10605?redirect=false)** and commented  When using the server endpoint configurator `org.springframework.web.socket.server.endpoint.SpringConfigurator` to manage creation of WebSocket server endpoints, the `SpringConfigurator#getEndpointInstance` method will be called every time a new WebSocket connection is received.  `getEndpointInstance` calls the ` T getBeansOfType(Class )` method of the web application context (technically this method comes from `ListableBeanFactory`) each time it is called to determine whether to return a new instance, return an existing singleton instance, or throw an exception. However, the [JavaDoc for `ListableBeanFactory`](http://static.springsource.org/spring/docs/4.0.x/javadoc-api/org/springframework/beans/factory/ListableBeanFactory.html) says this:  > With the exception of getBeanDefinitionCount and containsBeanDefinition, the methods in this interface are not designed for frequent invocation. Implementations may be slow.  I do not believe `SpringConfigurator` should be using this method as it could have seriously negative performance consequences. I recommend something more like this:  ``` ... 		try { 			T singleton = wac.getBean(endpointClass); 			if (logger.isTraceEnabled()) { 				logger.trace(""Using @ServerEndpoint singleton "" + singleton); 			} 			return singleton; 		} catch(NoSuchBeanDefinitionException e) { 			if (logger.isTraceEnabled()) { 				logger.trace(""Creating new @ServerEndpoint instance of type "" + endpointClass); 			} 			return wac.getAutowireCapableBeanFactory().createBean(endpointClass); 		} catch(NoUniqueBeanDefinitionException e) { 			// Should not happen .. 			String message = ""Found more than one matching @ServerEndpoint beans of type "" + endpointClass; 			logger.error(message); 			throw new IllegalStateException(message); 		} ... ```  ---  **Affects:** 4.0 M1  **Issue Links:** - #15240 `@Scheduled` does not work on `@ServerEndpoint` deployed with per-connection lifecycle","closed","type: bug,","spring-projects-issues","2013-05-29T22:04:39Z","2019-01-13T06:59:40Z"
"","15228","Spring's TaskSchedulers should expose ScheduledExecutorService interface like TaskExecutors expose Executor [SPR-10599]","**[Nick Williams](https://jira.spring.io/secure/ViewProfile.jspa?name=guitarking117)** opened **[SPR-10599](https://jira.spring.io/browse/SPR-10599?redirect=false)** and commented  In Spring, `TaskExecutor` beans expose the `java.util.concurrent.Executor` interface. The advantage of this is that developers can program against an interface native to the Java SE API and then fulfill the dependency with any `TaskExecutor`.  Unfortunately, no such support exists for `java.util.concurrent.ScheduledExecutorService`. As a developer who prefers to program against `Executor`, my code would be cleaner and more portable if Spring's `TaskScheduler` beans exposed the `ScheduledExecutorService` interface so that I could program against that as well. If y'all do not want to make `TaskScheduler` extend `ScheduledExecutorService` (which would cause custom `TaskScheduler` implementations to have to change), consider instead just making `ThreadPoolTaskScheduler` implement `ScheduledExecutorService`.  (Note: I'm still not quite sure what Spring 4.0's required runtime Java version will be. If Spring 4.0 will REQUIRE Java 8 to run, you could make `TaskScheduler` extend `ScheduledExecutorService` without breaking existing implementations by using default methods.)   ---  **Affects:** 4.0 M1","closed","status: bulk-closed,","spring-projects-issues","2013-05-28T23:49:10Z","2019-01-12T03:42:02Z"
"","15222","FilterType enum should have ASPECTJ, REGEX constants for AspectJTypeFilter, RegexPatternTypeFilter [SPR-10593]","**[Nick Williams](https://jira.spring.io/secure/ViewProfile.jspa?name=guitarking117)** opened **[SPR-10593](https://jira.spring.io/browse/SPR-10593?redirect=false)** and commented  `org.springframework.context.annotation.FilterType` defines the following enum constants: `ANNOTATION`, `ASSIGNABLE_TYPE`, and `CUSTOM`. For custom types, the user is supposed to supply an implementation of `org.springframework.core.type.filter.TypeFilter`. Spring supplies implementations `AnnotationTypeFilter`, which maps to `ANNOTATION`, and `AssignableTypeFilter`, which maps to `ASSIGNABLE_TYPE`.  However, Spring also supplies implementations `AspectJTypeFilter` and `RegexPatternTypeFilter`, which do not have counterpart annotation parts. As a developer, it would be much easier for me to use these `TypeFilter` s if there were `ASPECTJ` and `REGEX` enum constants to represent them.  Note that this will require the addition of a `String expression` attribute on the `ComponentScan.Filter` annotation. The documentation for `ComponentScan.Filter` says this:  > Note that the filter types available are limited to those that may be expressed as a Class in the value() attribute. This is in contrast to , which allows for expression-based (i.e., string-based) filters such as AspectJ pointcuts. These filter types are intentionally not supported here, and not available in the FilterType enum.  However, this does not seem like a good policy to me.  This is, in essence, saying ""sorry, you can't use these types with programmatic configuration, you have to use XML."" But this flies in the face of the idea that programmatic configuration is the future and should be able to replace XML configuration completely. With this statement, you rule out the possibility that everyone can use programmatic configuration.   ---  **Affects:** 4.0 M1","closed","type: enhancement,","spring-projects-issues","2013-05-27T20:26:12Z","2013-10-31T12:27:53Z"
"","15220","Spring's support for javax.servlet.http.Part vs. MultipartFile incomplete, inconsistent [SPR-10591]","**[Nick Williams](https://jira.spring.io/secure/ViewProfile.jspa?name=guitarking117)** opened **[SPR-10591](https://jira.spring.io/browse/SPR-10591?redirect=false)** and commented  Spring's support for `javax.servlet.http.Part` vs. `org.springframework.web.multipart.MultipartFile` is very inconsistent. You cannot use the two the same ways, which the documentation seems to suggest should be the case.  I'm using `@Configuration` with `@EnableWebMVC`. I define the following bean in my configuration:  ```java @Bean public MultipartResolver multipartResolver() {     return new StandardServletMultipartResolver(); } ```  The following eight scenarios demonstrate the inconsistencies. It seems to me that all eight scenarios should work, but **three** of them do not.  #### Scenario 1  I have a controller handler method with a `@RequestPart` `MultipartFile` parameter. Everything works fine, and when the method is called the uploaded file is supplied to the method.  #### Scenario 2  I have a controller handler method with a `@RequestPart` `List` parameter. Everything works fine, and when the method is called the uploaded file or files are supplied to the method (I tired uploading a single file and multiple files; both worked).  #### Scenario 3  I have a controller handler method with a `@RequestPart` `Part` parameter. Everything works fine, and when the method is called the uploaded file is supplied to the method.  #### Scenario 4  I have a controller handler method with a `@RequestPart` `List` parameter. I tired uploading a single file and multiple files, but neither worked. Spring replied to the request with error code 415: ""The server refused this request because the request entity is in a format not supported by the requested resource for the requested method."" The following debug information appeared in the log for this request:  ``` 13:17:07.352 [http-nio-8080-exec-3] DEBUG org.springframework.web.servlet.DispatcherServlet org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:823): DispatcherServlet with name 'springDispatcher' processing POST request for [/support/ticket/create] 13:17:07.376 [http-nio-8080-exec-3] DEBUG org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:222): Looking up handler method for path /ticket/create 13:17:07.376 [http-nio-8080-exec-3] DEBUG org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:229): Returning handler method [public org.springframework.web.servlet.View com.wrox.site.TicketController.create(javax.servlet.http.HttpSession,com.wrox.site.TicketController$Form,java.util.List) throws java.io.IOException] 13:17:07.376 [http-nio-8080-exec-3] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:249): Returning cached instance of singleton bean 'ticketController' 13:17:07.561 [http-nio-8080-exec-3] DEBUG org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:134): Resolving exception from handler [public org.springframework.web.servlet.View com.wrox.site.TicketController.create(javax.servlet.http.HttpSession,com.wrox.site.TicketController$Form,java.util.List) throws java.io.IOException]: org.springframework.web.HttpMediaTypeNotSupportedException: Content type 'application/octet-stream' not supported 13:17:07.565 [http-nio-8080-exec-3] DEBUG org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:134): Resolving exception from handler [public org.springframework.web.servlet.View com.wrox.site.TicketController.create(javax.servlet.http.HttpSession,com.wrox.site.TicketController$Form,java.util.List) throws java.io.IOException]: org.springframework.web.HttpMediaTypeNotSupportedException: Content type 'application/octet-stream' not supported 13:17:07.566 [http-nio-8080-exec-3] DEBUG org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:134): Resolving exception from handler [public org.springframework.web.servlet.View com.wrox.site.TicketController.create(javax.servlet.http.HttpSession,com.wrox.site.TicketController$Form,java.util.List) throws java.io.IOException]: org.springframework.web.HttpMediaTypeNotSupportedException: Content type 'application/octet-stream' not supported 13:17:07.567 [http-nio-8080-exec-3] DEBUG org.springframework.web.servlet.DispatcherServlet org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:999): Null ModelAndView returned to DispatcherServlet with name 'springDispatcher': assuming HandlerAdapter completed request handling 13:17:07.567 [http-nio-8080-exec-3] DEBUG org.springframework.web.servlet.DispatcherServlet org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:976): Successfully completed request ```  #### Scenario 5  I have a controller handler method with a `Form` command-object parameter. The `Form` (POJO) has a field in it of type `MultipartFile`. Everything works fine, and when the method is called the uploaded file is supplied to the method.  #### Scenario 6  I have a controller handler method with a `Form` command-object parameter. The `Form` has a field in it of type `List`. Everything works fine, and when the method is called the uploaded file or files are supplied to the method (I tired uploading a single file and multiple files; both worked).  #### Scenario 7  I have a controller handler method with a `Form` command-object parameter. The `Form` (POJO) has a field in it of type `Part`. I cannot upload a file. Spring replied to the request with error code 400: ""The request sent by the client was syntactically incorrect."" The following debug information appeared in the log for this request:  ``` 13:37:27.657 [http-nio-8080-exec-4] DEBUG org.springframework.web.servlet.DispatcherServlet org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:823): DispatcherServlet with name 'springDispatcher' processing POST request for [/support/ticket/create] 13:37:27.685 [http-nio-8080-exec-4] DEBUG org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:222): Looking up handler method for path /ticket/create 13:37:27.686 [http-nio-8080-exec-4] DEBUG org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:229): Returning handler method [public org.springframework.web.servlet.View com.wrox.site.TicketController.create(javax.servlet.http.HttpSession,com.wrox.site.TicketController$Form) throws java.io.IOException] 13:37:27.686 [http-nio-8080-exec-4] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:249): Returning cached instance of singleton bean 'ticketController' 13:37:27.690 [http-nio-8080-exec-4] DEBUG org.springframework.beans.BeanUtils org.springframework.beans.BeanUtils.findEditorByConvention(BeanUtils.java:443): No property editor [javax.servlet.http.PartEditor] found for type javax.servlet.http.Part according to 'Editor' suffix convention 13:37:27.693 [http-nio-8080-exec-4] DEBUG org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:134): Resolving exception from handler [public org.springframework.web.servlet.View com.wrox.site.TicketController.create(javax.servlet.http.HttpSession,com.wrox.site.TicketController$Form) throws java.io.IOException]: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 1 errors Field error in object 'form' on field 'attachments': rejected value [org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@8e3de73]; codes [typeMismatch.form.attachments,typeMismatch.attachments,typeMismatch.javax.servlet.http.Part,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [form.attachments,attachments]; arguments []; default message [attachments]]; default message [Failed to convert property value of type 'org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile' to required type 'javax.servlet.http.Part' for property 'attachments'; nested exception is java.lang.IllegalStateException: Cannot convert value of type [org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile] to required type [javax.servlet.http.Part] for property 'attachments': no matching editors or conversion strategy found] 13:37:27.696 [http-nio-8080-exec-4] DEBUG org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:134): Resolving exception from handler [public org.springframework.web.servlet.View com.wrox.site.TicketController.create(javax.servlet.http.HttpSession,com.wrox.site.TicketController$Form) throws java.io.IOException]: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 1 errors Field error in object 'form' on field 'attachments': rejected value [org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@8e3de73]; codes [typeMismatch.form.attachments,typeMismatch.attachments,typeMismatch.javax.servlet.http.Part,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [form.attachments,attachments]; arguments []; default message [attachments]]; default message [Failed to convert property value of type 'org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile' to required type 'javax.servlet.http.Part' for property 'attachments'; nested exception is java.lang.IllegalStateException: Cannot convert value of type [org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile] to required type [javax.servlet.http.Part] for property 'attachments': no matching editors or conversion strategy found] 13:37:27.696 [http-nio-8080-exec-4] DEBUG org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:134): Resolving exception from handler [public org.springframework.web.servlet.View com.wrox.site.TicketController.create(javax.servlet.http.HttpSession,com.wrox.site.TicketController$Form) throws java.io.IOException]: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 1 errors Field error in object 'form' on field 'attachments': rejected value [org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@8e3de73]; codes [typeMismatch.form.attachments,typeMismatch.attachments,typeMismatch.javax.servlet.http.Part,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [form.attachments,attachments]; arguments []; default message [attachments]]; default message [Failed to convert property value of type 'org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile' to required type 'javax.servlet.http.Part' for property 'attachments'; nested exception is java.lang.IllegalStateException: Cannot convert value of type [org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile] to required type [javax.servlet.http.Part] for property 'attachments': no matching editors or conversion strategy found] 13:37:27.700 [http-nio-8080-exec-4] DEBUG org.springframework.web.servlet.DispatcherServlet org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:999): Null ModelAndView returned to DispatcherServlet with name 'springDispatcher': assuming HandlerAdapter completed request handling 13:37:27.701 [http-nio-8080-exec-4] DEBUG org.springframework.web.servlet.DispatcherServlet org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:976): Successfully completed request ```  #### Scenario 7  I have a controller handler method with a `Form` command-object parameter. The `Form` (POJO) has a field in it of type `List`. I tired uploading a single file and multiple files, but neither worked. Spring replied to the request with error code 400: ""The request sent by the client was syntactically incorrect."" The following debug information appeared in the log for this request:  ``` 13:39:27.414 [http-nio-8080-exec-1] DEBUG org.springframework.web.servlet.DispatcherServlet org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:823): DispatcherServlet with name 'springDispatcher' processing POST request for [/support/ticket/create] 13:39:27.443 [http-nio-8080-exec-1] DEBUG org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:222): Looking up handler method for path /ticket/create 13:39:27.447 [http-nio-8080-exec-1] DEBUG org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:229): Returning handler method [public org.springframework.web.servlet.View com.wrox.site.TicketController.create(javax.servlet.http.HttpSession,com.wrox.site.TicketController$Form) throws java.io.IOException] 13:39:27.448 [http-nio-8080-exec-1] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:249): Returning cached instance of singleton bean 'ticketController' 13:39:27.488 [http-nio-8080-exec-1] DEBUG org.springframework.beans.BeanUtils org.springframework.beans.BeanUtils.findEditorByConvention(BeanUtils.java:443): No property editor [javax.servlet.http.PartEditor] found for type javax.servlet.http.Part according to 'Editor' suffix convention 13:39:27.491 [http-nio-8080-exec-1] DEBUG org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:134): Resolving exception from handler [public org.springframework.web.servlet.View com.wrox.site.TicketController.create(javax.servlet.http.HttpSession,com.wrox.site.TicketController$Form) throws java.io.IOException]: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 1 errors Field error in object 'form' on field 'attachments': rejected value [org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@3f7c6df8]; codes [typeMismatch.form.attachments,typeMismatch.attachments,typeMismatch.java.util.List,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [form.attachments,attachments]; arguments []; default message [attachments]]; default message [Failed to convert property value of type 'org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile' to required type 'java.util.List' for property 'attachments'; nested exception is java.lang.IllegalStateException: Cannot convert value of type [org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile] to required type [javax.servlet.http.Part] for property 'attachments[0]': no matching editors or conversion strategy found] 13:39:27.494 [http-nio-8080-exec-1] DEBUG org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:134): Resolving exception from handler [public org.springframework.web.servlet.View com.wrox.site.TicketController.create(javax.servlet.http.HttpSession,com.wrox.site.TicketController$Form) throws java.io.IOException]: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 1 errors Field error in object 'form' on field 'attachments': rejected value [org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@3f7c6df8]; codes [typeMismatch.form.attachments,typeMismatch.attachments,typeMismatch.java.util.List,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [form.attachments,attachments]; arguments []; default message [attachments]]; default message [Failed to convert property value of type 'org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile' to required type 'java.util.List' for property 'attachments'; nested exception is java.lang.IllegalStateException: Cannot convert value of type [org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile] to required type [javax.servlet.http.Part] for property 'attachments[0]': no matching editors or conversion strategy found] 13:39:27.494 [http-nio-8080-exec-1] DEBUG org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:134): Resolving exception from handler [public org.springframework.web.servlet.View com.wrox.site.TicketController.create(javax.servlet.http.HttpSession,com.wrox.site.TicketController$Form) throws java.io.IOException]: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 1 errors Field error in object 'form' on field 'attachments': rejected value [org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@3f7c6df8]; codes [typeMismatch.form.attachments,typeMismatch.attachments,typeMismatch.java.util.List,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [form.attachments,attachments]; arguments []; default message [attachments]]; default message [Failed to convert property value of type 'org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile' to required type 'java.util.List' for property 'attachments'; nested exception is java.lang.IllegalStateException: Cannot convert value of type [org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile] to required type [javax.servlet.http.Part] for property 'attachments[0]': no matching editors or conversion strategy found] 13:39:27.495 [http-nio-8080-exec-1] DEBUG org.springframework.web.servlet.DispatcherServlet org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:999): Null ModelAndView returned to DispatcherServlet with name 'springDispatcher': assuming HandlerAdapter completed request handling 13:39:27.496 [http-nio-8080-exec-1] DEBUG org.springframework.web.servlet.DispatcherServlet org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:976): Successfully completed request ```  ---  **Affects:** 3.1 GA, 3.2 GA, 4.0 M1  **Issue Links:** - #18467 Part list/array gets resolved to all parts in current request - #15978 `@RequestPart`(...) MultipartFile[] does not work (List","closed","type: bug,","spring-projects-issues","2013-05-27T11:42:37Z","2019-01-13T06:59:44Z"
"","15216","Documentation issues in @RequestMapping [SPR-10587]","**[Nick Williams](https://jira.spring.io/secure/ViewProfile.jspa?name=guitarking117)** opened **[SPR-10587](https://jira.spring.io/browse/SPR-10587?redirect=false)** and commented  In the [JavaDoc documentation for @RequestMapping](http://static.springsource.org/spring/docs/4.0.x/javadoc-api/org/springframework/web/bind/annotation/RequestMapping.html):  * The `ModelAttribute` annotation is `@linked` to without the leading `@`. It should have a leading `@` like other annotations linked to on the page, for consistency and easier understanding. * The `SessionAttributes` annotation is `@linked` to without the leading `@`. * `ModelAndView` is not `@linked` to. Instead, it is just printed monospace. It would be better to be able to navigate by clicking on it like other classes in this JavaDoc. * `org.springframework.web.context.request.async.DeferredResult` is not `@linked` to. * Java SE types (`Map`, `Locale`, `InputStream`, `OutputStream`, `Callable`, others) are not `@linked` to.    ---  **Affects:** 4.0 M1  **Reference URL:** http://static.springsource.org/spring/docs/4.0.x/javadoc-api/org/springframework/web/bind/annotation/RequestMapping.html  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2d018e5019b57bfdb9040ff5067c4242309fcdb4, https://github.com/spring-projects/spring-framework/commit/f86a3283be6ddd209786a81cd892b16154105799","closed","type: bug,","spring-projects-issues","2013-05-25T08:26:56Z","2019-01-11T22:13:42Z"
"","15179","Add support for @javax.annotation.Priority as alternative to @Primary [SPR-10548]","**[Nick Williams](https://jira.spring.io/secure/ViewProfile.jspa?name=guitarking117)** opened **[SPR-10548](https://jira.spring.io/browse/SPR-10548?redirect=false)** and commented  If multiple beans are candidates to satisfy an `@Autowired`/`@Inject` dependency, Spring looks for the `@Primary` annotation on one of the beans. If it finds it, it uses that bean; otherwise, it throws an exception.  `javax.annotation` version 1.2 (Java EE 7 and in theory Java 8) adds a new annotation to the common annotations, `@Priority`.  `@Priority` includes a single integer attribute that defines what the priority is. My suggestion is that if multiple beans are candidates to satisfy an `@Autowired`/`@Inject` dependency and `@Primary` is not present, Spring should look for `@Priority` instead. If one or more of the beans have `@Priority`, the one with the highest priority should be used. If two or more beans are tied for highest priority, it should behave the same as if two or more beans were `@Primary`.  Thoughts?  ---  **Affects:** 4.0 M1  **Issue Links:** - #16640 NPE in DefaultListableBeanFactory#getPriority - #20761 Document common use cases for `@Order` vs `@Priority` vs `@DependsOn` - #16262 Use javax.annotation.Priority as an alternative for `@Order`  1 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2013-05-09T23:30:02Z","2019-01-13T06:59:56Z"
"","14993","SpringCompleteAutoloadTilesContainerFactory disables EL expressions [SPR-10361]","**[Nick Caballero](https://jira.spring.io/secure/ViewProfile.jspa?name=nickcaballero)** opened **[SPR-10361](https://jira.spring.io/browse/SPR-10361?redirect=false)** and commented  When `TilesConfigurer` has `completeAutoload`, it is expected to delegate to the `CompleteAutoloadTilesContainerFactory`, which enables EL expressions among other things.  The attribute evaluator factory is set to a `DirectAttributeEvaluator` instead of enabling EL, MVEL and OGNL as attribute expressions.   ---  **Affects:** 3.2.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d9540ff34233bb36794da5490a21c7eaa632f1dd  0 votes, 5 watchers","closed","type: bug,","spring-projects-issues","2013-03-07T07:04:38Z","2013-03-14T03:22:16Z"
"","15026","Injection of property by annotation skipped when a previous similar bean was initialized by a setter [SPR-10393]","**[Neimoidia](https://jira.spring.io/secure/ViewProfile.jspa?name=neimoidia)** opened **[SPR-10393](https://jira.spring.io/browse/SPR-10393?redirect=false)** and commented  Hi, When I use an annotation on a setter method, with multiples beans of the same class, as soon as a property setter is explicity used by a bean declaration, the other ones wont be able to get this property initialized by annotation (`@Value`).  I provide you my test files to easily reproduce the defect.  Here is my service class test:  ``` package foo.bar;  import org.springframework.beans.factory.annotation.Value;  public class MyService {      private String param;      public String getParam() { 		return param; 	}      @Value(""${param}"")     public void setParam(String param) {         this.param = param;     } } ```  Here is my spring test context file:  ```                                                               classpath:properties/foobar.properties                                                                                 ```  Here is my property file:  ``` param=default ```  Here is my Junit test file:  ``` package foo.bar;  import org.junit.Assert; import org.junit.Test; import org.junit.runner.RunWith;  import org.springframework.test.context.ContextConfiguration; import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;  import javax.annotation.Resource;  @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(locations = { ""classpath:spring/spring-test-context.xml"" }) public class MyServiceTest {      @Resource     private MyService myService1;     @Resource     private MyService myService2;     @Resource     private MyService myService3;      @Test     public void testDummy() {         System.out.println(myService1.getParam());         System.out.println(myService2.getParam());         System.out.println(myService3.getParam());         Assert.fail();     } } ```  Here is the test log:  ``` INFO: Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@7f5e2075: defining beans [org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,placeholder,myService1,myService2,myService3,org.springframework.context.annotation.ConfigurationClassPostProcessor$ImportAwareBeanPostProcessor#0]; root of factory hierarchy AZERTY null QWERTY 19 mars 2013 09:10:17 org.springframework.context.support.AbstractApplicationContext doClose ```  The problem is that the param value for the second bean initialized is null.    ---  **Affects:** 3.1.2  **Attachments:** - [bar.tar.gz](https://jira.spring.io/secure/attachment/21106/bar.tar.gz) (_1.57 kB_)  1 votes, 3 watchers","closed","status: bulk-closed,","spring-projects-issues","2013-03-18T09:07:19Z","2019-01-12T00:24:51Z"
"","14942","Invalid format media-type in Content-Type request header results in IllegalArgumentException when no handler matched [SPR-10308]","**[Neil Brown](https://jira.spring.io/secure/ViewProfile.jspa?name=brownn)** opened **[SPR-10308](https://jira.spring.io/browse/SPR-10308?redirect=false)** and commented  Having upgraded to 3.2.1 I've retested the fix to #14168 (marked as a duplicate of, and resolved by #13781). Whilst some cases of this issue have been fixed (thanks) there is still at least one scenario where the IllegalArgumentException thrown by MediaType.parseMediaType() is not being handled - when no handler is matched. For example, given the following Controller mapping -  ``` @Controller @RequestMapping(value = ""/channel/{channelId}/communication"") public class CommunicationController { ...   @RequestMapping(value = ""/{commId}/registration"", method = RequestMethod.POST, consumes = ""application/xml"")   @ResponseStatus(value = HttpStatus.CREATED)   public void preregister(@PathVariable Integer channelId, @PathVariable Integer commId,       @RequestBody UserDto userDto, HttpServletRequest request) {     ...   } ... } ```  A Content-Type header of value ""foo"", results in an IllegalArgumentException, as per stack-trace:  ``` java.lang.IllegalArgumentException: ""foo"" does not contain '/' at org.springframework.http.MediaType.parseMediaType(MediaType.java:697) at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.handleNoMatch(RequestMappingInfoHandlerMapping.java:208) at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.lookupHandlerMethod(AbstractHandlerMethodMapping.java:282)  at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:222) at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:55) at org.springframework.web.servlet.handler.AbstractHandlerMapping.getHandler(AbstractHandlerMapping.java:297) at org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java:1091) at org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java:1076) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:896) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:856) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:920) at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:827) at javax.servlet.http.HttpServlet.service(HttpServlet.java:637) at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:801) at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) .... ```  **Note** - It may also be useful to note that this problem also existed under 3.1.2 (i.e. it is NOT a #13781 backport error/issue), but rather an edge-case that hasn't already been fixed.  ---  **Affects:** 3.2.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c611083415845bcb9758c0f92c4749a712b049f0","closed","type: bug,","spring-projects-issues","2013-02-16T09:22:08Z","2019-01-11T21:05:02Z"
"","15209","ClassCastException on meta @Components with not Spring value [SPR-10580]","**[nebhale](https://jira.spring.io/secure/ViewProfile.jspa?name=nebhale)** opened **[SPR-10580](https://jira.spring.io/browse/SPR-10580?redirect=false)** and commented  New in 3.2.3.RELEASE there is a bug in how Spring determines bean names from annotations.  The annotation that is causing the issue looks like:  ```java @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.TYPE) @Component public @interface ConfigurationAnalyzer {      ConfigurationType[] value(); } ```  Based on the stack trace generated by the bug, it's pretty straight forward where [things are going wrong](https://github.com/SpringSource/spring-framework/blob/v3.2.3.RELEASE/spring-context/src/main/java/org/springframework/context/annotation/AnnotationBeanNameGenerator.java#L91).  ``` java.lang.ClassCastException: [L.ConfigurationType; cannot be cast to java.lang.String 	at org.springframework.context.annotation.AnnotationBeanNameGenerator.determineBeanNameFromAnnotation(AnnotationBeanNameGenerator.java:91) 	at org.springframework.context.annotation.AnnotationBeanNameGenerator.generateBeanName(AnnotationBeanNameGenerator.java:69) 	at org.springframework.context.annotation.ClassPathBeanDefinitionScanner.doScan(ClassPathBeanDefinitionScanner.java:246) 	at org.springframework.context.annotation.ComponentScanAnnotationParser.parse(ComponentScanAnnotationParser.java:123) 	at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:191) 	at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:165) 	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:140) 	at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:282) 	at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:223) 	at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:630) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:461)  ```    ---  **Affects:** 3.2.3  **Reference URL:** https://github.com/SpringSource/spring-framework/issues/289","closed","in: core,","spring-projects-issues","2013-05-23T01:27:41Z","2013-07-24T10:17:07Z"
"","15491","@EnableTransactionManagement and co should also get detected on superclasses [SPR-10864]","**[Neale Upstone](https://jira.spring.io/secure/ViewProfile.jspa?name=nealeu)** opened **[SPR-10864](https://jira.spring.io/browse/SPR-10864?redirect=false)** and commented  Annotating a super-class with `@EnableTransactionManagement` results in the following exception message: `@EnableTransactionManagement is not present on importing class ConcreteClass`  This is a complete gotcha when someone will get from trying to be DRY.  It seems that the only way to cause this is to import a class that extends one with the annotation.  If this is the case, then I suggest that the exception should point to the Javadoc of `@EnableTransactionManagement`, and that the Javadoc should explain why it is not `@Inherited`.  ---  **Issue Links:** - #15876 `@Enable` registrars invoked with subclass for annotation placed on superclass (3.2.x)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ce917d5cbbca984f46bad918b86f1a6b32483c23, https://github.com/spring-projects/spring-framework/commit/e8dead247c7d421074caf171456e0653d63780f7","closed","type: enhancement,","spring-projects-issues","2013-08-27T07:16:56Z","2019-01-13T06:58:24Z"
"","15097","Allow must-revalidate to be suppressed in ResourceHttpRequestHandler [SPR-10464]","**[Neale Upstone](https://jira.spring.io/secure/ViewProfile.jspa?name=nealeu)** opened **[SPR-10464](https://jira.spring.io/browse/SPR-10464?redirect=false)** and commented  I'd like the following code snippet to be able to work, but I cannot set alwaysMustRevalidate:  ``` @Configuration @EnableWebMvc public class ResourcesServletConfig extends WebMvcConfigurerAdapter {      @Autowired     private ResourceVersionSource versionSource;      @Override     public void addResourceHandlers(ResourceHandlerRegistry registry) {          String cachebustPaths = ""/"" + versionSource.getVersion() + ""/**"";          registry.addResourceHandler(cachebustPaths)                 .addResourceLocations(""/"")                 .setCachePeriod(365 * 24 * 3600)                 .setMustRevalidate(false);     } }  ```  I would be good to have control over other properties of WebContentGenerator too, hence the +others in the summary.  ---  **Affects:** 3.2.2  This issue is a sub-task of #16413  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/38f32e38169f7779b9fe20d46b69024039f190ce  9 votes, 13 watchers","closed","type: task,","spring-projects-issues","2013-04-16T03:19:59Z","2019-01-11T21:13:34Z"
"","15029","Allow Class to be specified as attribute for @DependsOn  [SPR-10396]","**[Neale Upstone](https://jira.spring.io/secure/ViewProfile.jspa?name=nealeu)** opened **[SPR-10396](https://jira.spring.io/browse/SPR-10396?redirect=false)** and commented  An advantage of using Java config is that we get type-safe checking wiring and some resilience against refactoring going wrong, however the `@DependsOn` annotation only allows us to specify a String bean id.  For now, I am using `@Autowired` as a workaround as below (in preference to depending on a bean by String bean name):  ``` @Configuration @Import({     LiquibaseConfig.class }) public class PersistenceConfig {      // used only to cause container to init SpringLiquibase bean      // before EntityManagerFactory bean.      @Autowired     private SpringLiquibase dependsOnLiquibaseBean;      @Autowired     private DataSource dataSource;      @Bean     public LocalContainerEntityManagerFactoryBean entityManagerFactory() {          // use dataSource for creating EntityManagerFactory         return factory;     } ```  It would be nice to be able to have the order work without specifying `@DependsOn`(""liquibase""), which is magic String territory.  Two options would help: - Making it the default behaviour that an `@Import` will cause the imported bean defs to init first (i.e when no   `@DependsOn` specified) - Allowing `@DependsOn` to take a classes parameter as follows:  ``` @Configuration @Import({     LiquibaseConfig.class }) public class PersistenceConfig {      @Autowired     private DataSource dataSource;      @Bean     @DependsOn(classes=SpringLiquibase.class)     public LocalContainerEntityManagerFactoryBean entityManagerFactory() {          // use dataSource for creating EntityManagerFactory         return factory;     } ```    ---  **Affects:** 3.2.2","closed","status: bulk-closed,","spring-projects-issues","2013-03-19T04:55:35Z","2022-05-05T18:17:30Z"
"","14884","Improve 3.2 migration guide regarding JUnit and Hamcrest [SPR-10251]","**[Neale Upstone](https://jira.spring.io/secure/ViewProfile.jspa?name=nealeu)** opened **[SPR-10251](https://jira.spring.io/browse/SPR-10251?redirect=false)** and commented  ``` The spring-test module has been upgraded to depend on JUnit 4.11 (junit:junit), TestNG 6.5.2 (org.testng:testng), and Hamcrest Core 1.3 (org.hamcrest:hamcrest-core). Each of these dependencies is declared as an optional dependency in the Maven POM. Furthermore, it is important to note that the JUnit team has stopped inlining Hamcrest Core within the junit:junit Maven artifact as of JUnit 4.11. Thus, if your existing JUnit-based tests make use of Hamcrest matchers that were previously available directly within the junit:junit JAR, you will now need to explicitly declare a dependency on org.hamcrest:hamcrest-core, org.hamcrest:hamcrest-library, or org.hamcrest:hamcrest-all. ```  ``` The spring-test module has been upgraded to depend on JUnit 4.11 (junit:junit), TestNG 6.5.2 (org.testng:testng), and Hamcrest Core 1.3 (org.hamcrest:hamcrest-core). Each of these dependencies is declared as an optional dependency in the Maven POM. Furthermore, it is important to note that the JUnit team has stopped inlining Hamcrest Core within the junit:junit Maven artifact as of JUnit 4.11. Hamcrest Core is now a transitive dependency of JUnit, so users may need to remove any exclusions on hamcrest-core that they have put in place to work around the previous quirk. ```  hamcrest-all, and junit","closed","type: bug,","spring-projects-issues","2013-02-01T03:35:53Z","2013-02-01T07:11:02Z"
"","14738","Date conversion no longer uses ObjectToObjectConverter [SPR-10105]","**[Neale Upstone](https://jira.spring.io/secure/ViewProfile.jspa?name=nealeu)** opened **[SPR-10105](https://jira.spring.io/browse/SPR-10105?redirect=false)** and commented  In order to support global date time formats the `JodaTimeFormatterRegistrar` and `DateFormatterRegistrar` register converters for `String -> Date`.  With Spring 3.1 no such converters were registered and the `ObjectToObject` converter would be picked when converting `String` to `Date`. The `ObjectToObject` converter is deemed suitable do the the (deprecated) `Date(String)` constructor.  ---  **Affects:** 3.2 GA  **Issue Links:** - #14730 Date variables in forms are failing with joda conversion error  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/66ae626f91e0b2bbfcf9b9059cb06b07883d9b0b","closed","in: core,","spring-projects-issues","2012-12-17T13:56:59Z","2019-01-11T21:26:47Z"
"","15353","BeanPropertyRowMapper underscoreName rule customization [SPR-10725]","**[nathanleewei](https://jira.spring.io/secure/ViewProfile.jspa?name=nathanleewei)** opened **[SPR-10725](https://jira.spring.io/browse/SPR-10725?redirect=false)** and commented  For the default underscoreName rule cannot support following one:  ``` entityTypeId=ENTITYTYPE_ID ```  my rule: underscore is only for foreign key. but fail to override to add my rule  ``` protected void initialize(Class mappedClass) { // String onlyLastUnderscoredName = onlyLastUnderscoredName(pd.getName()); if (!pd.getName().toLowerCase().equals(onlyLastUnderscoredName)) { this.mappedFields.put(onlyLastUnderscoredName, pd); } //		 } ```  ``` 	/** Map of the fields we provide mapping for */ 	private Map mappedFields;  	/** Set of bean properties we provide mapping for */ 	private Set mappedProperties; ```  Can these two fields be changed as protected, or add setter/getter, so that I can override the BeanPropertyRowMapper.initialize to add my underscoreName rule?  Many thanks!    ---  **Affects:** 3.0.3","closed","status: bulk-closed,","spring-projects-issues","2013-07-07T16:06:43Z","2019-01-12T00:22:50Z"
"","14870","Cacheable key collision with DefaultKeyGenerator [SPR-10237]","**[Morten Haraldsen](https://jira.spring.io/secure/ViewProfile.jspa?name=ethlo)** opened **[SPR-10237](https://jira.spring.io/browse/SPR-10237?redirect=false)** and commented  The default is to use the hashcode of each parameter and create another (32-bit) hash code. Obviously this can easily generate collisions. This should be clearly documented as it feels like a pretty serious issue, if not a bug. We have come to expect that Spring defaults are ""safe"" :-)  ---  **Affects:** 3.2 GA  **Reference URL:** http://blog.ethlo.com/2013/01/30/spring-defaultkeygenerator-gotcha  **Issue Links:** - #15316 Spring cache defaults to hashcode based cache key for multiple arguments (_**""is duplicated by""**_) - #13675 Improve DefaultKeyGenerator (_**""is duplicated by""**_) - #14013 org.springframework.cache.interceptor.DefaultKeyGenerator has too weak hashing functionality (_**""is duplicated by""**_) - #13675 Improve DefaultKeyGenerator - #14013 org.springframework.cache.interceptor.DefaultKeyGenerator has too weak hashing functionality  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f1a18d29ba83345b91439da7e884ff47a9f037b0  3 votes, 8 watchers","closed","in: core,","spring-projects-issues","2013-01-29T12:30:12Z","2019-01-11T21:35:18Z"
"","14790","JSR-303 @Valid validation throws BindException instead of MethodArgumentNotValidException [SPR-10157]","**[Mohammad Kurabi](https://jira.spring.io/secure/ViewProfile.jspa?name=mojo85)** opened **[SPR-10157](https://jira.spring.io/browse/SPR-10157?redirect=false)** and commented  When using `@Valid` without `@RequestBody` on request parameter, the validation throws a BindException instead of a MethodArgumentNotValidException when the object fails validation.  Noticed this issue when I realized my global exception handler that handles MethodArgumentNotValidException was not being invoked. I beleive this should be consistent and should throw MethodArgumentNotValidException when validation fails.  Example: https://gist.github.com/c658b7f749df09b5465e    ---  **Affects:** 3.2 GA  **Reference URL:** https://gist.github.com/c658b7f749df09b5465e","closed","status: declined,","spring-projects-issues","2013-01-09T12:06:45Z","2019-01-12T16:24:34Z"
"","14966","Spring 3.0 + Websphere 7.0 + JMS [SPR-10332]","**[miral patel](https://jira.spring.io/secure/ViewProfile.jspa?name=patelmiral)** opened **[SPR-10332](https://jira.spring.io/browse/SPR-10332?redirect=false)** and commented  Hi, We are upgrading our application to Spring 3.0 from Spring 2.5 also upgrading websphere 7.0 from websphere 6.0.  We have jms beans that uses - DefaultMessageListenerContainer. On server we have defined queue connection factory and we have set jass auth alias for container.  In our class we are looking up this qcf using jndi and setting it on super class which is DefaultMessageListenerContainer.  Now when it tries to coonect to MQ, it is not passing the alias as configured on server and so authentication fails at MQ.  Please advice.    --- No further details from [SPR-10332](https://jira.spring.io/browse/SPR-10332?redirect=false)","closed","status: invalid,","spring-projects-issues","2013-02-25T14:14:35Z","2019-01-12T05:27:21Z"
"","14777","NPE in PersistenceExceptionTranslationPostProcessor when instantiate a @Configurable Bean [SPR-10144]","**[Minas Manthos](https://jira.spring.io/secure/ViewProfile.jspa?name=manthos)** opened **[SPR-10144](https://jira.spring.io/browse/SPR-10144?redirect=false)** and commented  PersistenceExceptionTranslationPostProcessor extends AbstractAdvisingBeanPostProcessor  Method isEligible(...) throws a NPE when instantiating a Configurable Bean (because beanName is null).  See attached zip. It contains a minimal maven project.  > mvn test  With 3.1.2 test successes, with 3.2.0 it fails.  ``` java.lang.NullPointerException 	at java.util.concurrent.ConcurrentHashMap.get(ConcurrentHashMap.java:768) 	at org.springframework.aop.framework.AbstractAdvisingBeanPostProcessor.isEligible(AbstractAdvisingBeanPostProcessor.java:102) 	at org.springframework.aop.framework.AbstractAdvisingBeanPostProcessor.postProcessAfterInitialization(AbstractAdvisingBeanPostProcessor.java:74) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:412) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1492) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:391) 	at org.springframework.beans.factory.wiring.BeanConfigurerSupport.configureBean(BeanConfigurerSupport.java:141) 	at org.springframework.beans.factory.aspectj.AnnotationBeanConfigurerAspect.configureBean(AnnotationBeanConfigurerAspect.aj:59) 	at org.springframework.beans.factory.aspectj.AbstractDependencyInjectionAspect.ajc$afterReturning$org_springframework_beans_factory_aspectj_AbstractDependencyInjectionAspect$2$1ea6722c(AbstractDependencyInjectionAspect.aj:89) 	at com.Foo.(Foo.java:8) 	at com.FooTest.testFoo(FooTest.java:17) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44) 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15) 	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41) 	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20) 	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74) 	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:83) 	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:72) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:231) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:88) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222) 	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) 	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:71) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:292) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:174) 	at org.junit.runner.JUnitCore.run(JUnitCore.java:157) ```  ---  **Affects:** 3.2 GA  **Attachments:** - [test.zip](https://jira.spring.io/secure/attachment/20832/test.zip) (_4.16 kB_)  **Issue Links:** - #14741 [regresion] NullPointerException is thrown when beanName is null in AutowireCapableBeanFactory.initializeBean  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/97ae403b53b5ca2402c5d651dfdc6295d6372735","closed","type: bug,","spring-projects-issues","2013-01-03T08:48:57Z","2019-01-11T21:22:57Z"
"","15047","MockMvc returns status from @ResponseStatus ingoring sendError() [SPR-10414]","**[Mikhail Tyan](https://jira.spring.io/secure/ViewProfile.jspa?name=top4umba)** opened **[SPR-10414](https://jira.spring.io/browse/SPR-10414?redirect=false)** and commented  I have the following Controller:  ```   @Controller  public class TestController {       @RequestMapping(value = ""/testRequest"")      @ResponseStatus(HttpStatus.ACCEPTED)      public void receivePackage(HttpServletResponse response) throws IOException {          response.sendError(HttpStatus.BAD_REQUEST.value());     }   }  ```  The controller returns response with status 400 (Bad request) on request ""/testRequest"", when I deploy the controller to server. But the next test  ```       @Autowired      private WebApplicationContext wac;       @Test      void shouldReturnStatus400() {          // when          MockMvc mockMvc = webAppContextSetup(this.wac).build()          mockMvc.perform(get(""/testRequest""))          //then                  .andExpect(status().isBadRequest())      }  ```  fails with  ```   java.lang.AssertionError: Status  Expected :400  Actual :202  ```  I expect, that when method response.sendError was invoked, mockMvc should return response with a status specified in the method.   ---  **Affects:** 3.2.2  1 votes, 5 watchers","closed","type: bug,","spring-projects-issues","2013-03-25T05:17:27Z","2013-10-31T12:28:05Z"
"","15421","Cannot use @Primary to override @ComponentScan-ed beans [SPR-10795]","**[Mike](https://jira.spring.io/secure/ViewProfile.jspa?name=manrow)** opened **[SPR-10795](https://jira.spring.io/browse/SPR-10795?redirect=false)** and commented  A `@Primary @Bean` cannot override a `@ComponentScan`-ed `@Component`.  For example, if I have:  ``` @Primary @Bean public Foo getFoo() {...} ```  and a scanned:  ``` @Component public class Foo {...} ```  ... the `@Component` will always be `@Autowired` instead of the `@Primary`-annotated `@Bean`. Nothing in the documentation says that `@Primary @Bean`'s should fail against `@ComponentScan`-ed ones.  ---  **Affects:** 3.2.3  **Reference URL:** http://stackoverflow.com/questions/17945290/spring-primary-fails-against-componentscan  **Issue Links:** - #14201 Beans defined by `@ComponentScan` are skipped in `@Configuration` override - #14316 ConfigurationClassBeanDefinitionReader.loadBeanDefinitionsForModelMethod should take into account the allowBeanDefinitionOverride settings  4 votes, 8 watchers","closed","in: core,","spring-projects-issues","2013-07-30T11:15:47Z","2019-01-13T06:58:45Z"
"","15370","Cannot override singleton with scoped proxy [SPR-10744]","**[Mike](https://jira.spring.io/secure/ViewProfile.jspa?name=manrow)** opened **[SPR-10744](https://jira.spring.io/browse/SPR-10744?redirect=false)** and commented  For testing purposes, I am trying to override a bean configured as a singleton (in production) by making it a scoped proxy using a custom testing scope. The testing configuration extends the production configuration.  However, this bean is never loaded as a scoped proxy at all! When I apply the test configuration, the bean is always autowired as a singleton instead of (the desired) scoped proxy (regardless whether it's a CGLIB or JDK dynamic proxy).  ---  **Affects:** 3.2.2, 3.2.3  **Reference URL:** http://stackoverflow.com/questions/17688326/overriding-a-singleton-with-a-scoped-proxy  **Issue Links:** - #15854 Regression in 4.0.0 - A scoped-proxy bean cannot override another bean - #15620 `@Bean` overriding does not pick up metadata from most specific method  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d0f98537691b572a963690a1449454cdecfc47bf, https://github.com/spring-projects/spring-framework/commit/299776fd80c5aeae3d45c97659ceacab8b4663e5  **Backported to:** [3.2.5](https://github.com/spring-projects/spring-framework/milestone/93?closed=1)","closed","in: core,","spring-projects-issues","2013-07-16T17:11:42Z","2019-01-13T06:58:57Z"
"","14768","Add AspectJ support to persistence exception translation [SPR-10135]","**[Mike Noordermeer](https://jira.spring.io/secure/ViewProfile.jspa?name=miken)** opened **[SPR-10135](https://jira.spring.io/browse/SPR-10135?redirect=false)** and commented  Currently, the PersistenceExceptionTranslationPostProcessor always uses Spring AOP and creates JDK proxies. If a project is configured with AspectJ CTW/LTW this is not really necessary, but a proper aspect is missing from the spring-aspects JAR. There is a JpaExceptionTranslatorAspect, which appeared after #10942, but it is severely limited since it does a different job (only direct EM calls) and only works with JPA exceptions.  It should be a small change with some refactoring to the PersistenceExceptionTranslationInterceptor. I've got a working aspect at https://projects.eveoh.nl/~mike/PersistenceExceptionTranslation.aj, but this one still features a couple of copied over methods, which should be refactored into a generic base class.  ---  **Affects:** 3.1.3, 3.2 GA  **Issue Links:** - #11461 provide AspectJ style configuration for exception translation (_**""is duplicated by""**_)  4 votes, 5 watchers","closed","status: bulk-closed,","spring-projects-issues","2012-12-31T05:53:51Z","2019-01-12T02:35:27Z"
"","14868","lang:groovy does not support groovy beans annotated with @Immutable [SPR-10235]","**[Mike Hanafey](https://jira.spring.io/secure/ViewProfile.jspa?name=hanafey)** opened **[SPR-10235](https://jira.spring.io/browse/SPR-10235?redirect=false)** and commented  Groovy beans annotated with `@Immutable` cannot be created by a lang:groovy element.  Of course to make this really useful constructor arguments would also need to be supported. Since groovy supports a map like named argument constructor it would be reasonable for the same property based syntax to be used in the spring xml for immutable beans. Instead of calling property setters, for `@Immutable` beans the appropriate property setting constructor would be invoked.   ---  **Affects:** 3.2.1  1 votes, 2 watchers","closed","status: bulk-closed,","spring-projects-issues","2013-01-29T09:02:09Z","2019-01-12T02:35:08Z"
"","15419","Unexpected proxy created - breaks context creation [SPR-10793]","**[Michał Politowski](https://jira.spring.io/secure/ViewProfile.jspa?name=mpol)** opened **[SPR-10793](https://jira.spring.io/browse/SPR-10793?redirect=false)** and commented  The attached project, when run with `mvn test`, demonstrates the problem.  A bean `foo` is advised by `DummyAspect` that is configured `@Around(""bean(foo)"")`. There is also `` configured with a ``. And creation of the database fails because unepectedly the script resource bean is proxied:  ``` Tests in error:    fails(pl.meep.BugTest): Error creating bean with name 'dataSource': Cannot create inner bean '(inner bean)' of type [org.springframework.jdbc.datasource.init.CompositeDatabasePopulator] while setting bean property 'databasePopulator'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name '(inner bean)': Cannot create inner bean '(inner bean)' of type [org.springframework.jdbc.datasource.init.ResourceDatabasePopulator] while setting bean property 'populators' with key [0]; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name '(inner bean)': Initialization of bean failed; nested exception is org.springframework.beans.TypeMismatchException: Failed to convert property value of type 'sun.proxy.$Proxy6 implementing java.lang.Cloneable,java.io.Serializable,org.springframework.aop.SpringProxy,org.springframework.aop.framework.Advised' to required type 'org.springframework.core.io.Resource[]' for property 'scripts'; nested exception is java.lang.IllegalArgumentException: Cannot convert value of type [sun.proxy.$Proxy6 implementing java.lang.Cloneable,java.io.Serializable,org.springframework.aop.SpringProxy,org.springframework.aop.framework.Advised] to required type [org.springframework.core.io.Resource] for property 'scripts[0]': PropertyEditor [org.springframework.core.io.ResourceEditor] returned inappropriate value of type [sun.proxy.$Proxy6 implementing java.lang.Cloneable,java.io.Serializable,org.springframework.aop.SpringProxy,org.springframework.aop.framework.Advised] ```    ---  **Affects:** 3.2.3  **Attachments:** - [spring-aop-problem.zip](https://jira.spring.io/secure/attachment/21308/spring-aop-problem.zip) (_2.06 kB_)  1 votes, 4 watchers","closed","status: bulk-closed,","spring-projects-issues","2013-07-30T02:52:40Z","2019-01-12T02:33:17Z"
"","14776","Allow a capturing group in @RequestMapping value regex to define the path variable value [SPR-10143]","**[Michał Politowski](https://jira.spring.io/secure/ViewProfile.jspa?name=mpol)** opened **[SPR-10143](https://jira.spring.io/browse/SPR-10143?redirect=false)** and commented  ``` @RequestMapping(""path/{optionalPart:(?:[a-z]+\\.)?}{requiredPart}"") String handler(@PathVariable MyClass optionalPart, @PathVariable int requiredPart) ```  currently requires a formatter for MyClass that handles the dot (and an empty string) by itself. But whereas the default for the empty case can be argued to belong to the conversion code, the dot could be usefully discarded before conversion, if the capturing group in the following example defined the part of the match to use.  ``` @RequestMapping(""path/{optionalPart:(?:([a-z]+)\\.)?}{requiredPart}"") ```    ---  **Affects:** 3.2 GA","closed","type: enhancement,","spring-projects-issues","2013-01-03T07:03:23Z","2018-12-12T16:01:13Z"
"","14773","MatrixVariable values are not decoded [SPR-10140]","**[Michał Politowski](https://jira.spring.io/secure/ViewProfile.jspa?name=mpol)** opened **[SPR-10140](https://jira.spring.io/browse/SPR-10140?redirect=false)** and commented  Assume the following handler method declaration:  ``` @RequestMapping(""path{filter}"") String handle(@PathVariable String filter, @MatrixVariable String mvar, @RequestParam String query) {  // ...   } ```  Assume also a `RequestMappingHandlerMapping` that has `urlDecode` and `removeSemicolonContent` set to `false`.  Now when a request for ""path;mvar=a%2fb?query=c%2fd"" is made, it results in the confusing situation where both `filter` and `query` are decoded (to "";mvar=a/b"" and ""c/d"" respectively) yet `mvar` is left undecoded (set to ""a%2fb"").  This greatly diminishes the usefulness of #13736 in connection with matrix variables.  Of course there is a problem of the matrix part of the URL containing an encoded comma, semicolon or equals sign. These should probably not be interpreted in such situations as separators, but as belonging to the variable value. So the decoding would have to happen after the splitting. But the fact that it is not done at all looks confusing and inconsistent.  ---  **Affects:** 3.2 GA  **Issue Links:** - #21406 MatrixVariable with Encoding does not work.","closed","type: bug,","spring-projects-issues","2013-01-03T04:08:14Z","2019-01-11T21:22:41Z"
"","14897","@SessionAttributes - support for interfaces usage for types attribute [SPR-10263]","**[Michał Jaśtak](https://jira.spring.io/secure/ViewProfile.jspa?name=vardlokkur)** opened **[SPR-10263](https://jira.spring.io/browse/SPR-10263?redirect=false)** and commented  There is possibility to specify 'types' attribute for `@SessionAttributes` annotation, which impacts Model attributes persisting on session. The decision if attribute should be persisted or not is made in `SessionAttributesHandler#isHandlerSessionAttribute`, which currently verifies if the collection built from the classes defined in 'types' attribute contains the Model attribute class. If for example, you specify an interface, or parent class in 'types' attribute, all Model attributes implementing this interface, or extending the parent class will not be persisted to session :(  The change should be pretty simple - instead of calling 'contains' method on collection, we should iterate over the elements of the collection, and check if any of them `isAssignableFrom` the Model attribute class.   ---  **Affects:** 3.2.1","closed","status: bulk-closed,","spring-projects-issues","2013-02-06T01:05:21Z","2019-01-12T02:34:53Z"
"","14698","AbstractCachingViewResolver - caching redirect views leads to memory leak  [SPR-10065]","**[Michał Jaśtak](https://jira.spring.io/secure/ViewProfile.jspa?name=vardlokkur)** opened **[SPR-10065](https://jira.spring.io/browse/SPR-10065?redirect=false)** and commented  When user uses URL prefixed with ""redirect:"" as the method invocation result in Controller, it is cached as the whole (with provided parameters) in AbstractCachingViewResolver. Because the parameters for redirect may vary for the same URL used in redirect, and HashMap based cache is used, that leads to memory leak.  PS: this problem exists also in 2.5.x, I didn't checked how far in the Spring history it reaches  ---  **Affects:** 3.1.3  **Reference URL:** http://vard-lokkur.blogspot.com/2012/12/springs-web-mvc-redirect-to-memory-leak.html  **Issue Links:** - #7831 Performance improvement on AbstractCachingViewResolver  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f19bc572da6a7457a5327fd8f960858ce72081ff, https://github.com/spring-projects/spring-framework/commit/9deaefe74d9b79d22328ae0f1ede0830ac30ce20  **Backported to:** [3.1.4](https://github.com/spring-projects/spring-framework/milestone/83?closed=1)  1 votes, 7 watchers","closed","type: bug,","spring-projects-issues","2012-12-03T09:35:38Z","2019-01-11T19:11:17Z"
"","15092","@ComponentScan does not allow for registering beans with lazy initialization [SPR-10459]","**[Michał B](https://jira.spring.io/secure/ViewProfile.jspa?name=rzulf)** opened **[SPR-10459](https://jira.spring.io/browse/SPR-10459?redirect=false)** and commented  When configuration is specified like this, ComponentScan ignores annotation `@Lazy` and every bean found in ""org.dzik"" is created eagerly.  `@Configuration` `@Lazy` `@ComponentScan`(""org.dzik"") public class BasicConfiguration {  }  ---  **Affects:** 3.2.2  **Attachments:** - [ComponentScan.java](https://jira.spring.io/secure/attachment/21190/ComponentScan.java) (_7.11 kB_) - [ComponentScanAnnotationParser.java](https://jira.spring.io/secure/attachment/21191/ComponentScanAnnotationParser.java) (_6.12 kB_)  **Issue Links:** - #16120 Doc: Lazy context is not validated on creation  4 votes, 8 watchers","closed","type: enhancement,","spring-projects-issues","2013-04-12T06:14:45Z","2019-01-11T21:12:50Z"
"","15025","ReflectiveMethodResolver causes UnsupportedOperationException [SPR-10392]","**[Michal Moravcik](https://jira.spring.io/secure/ViewProfile.jspa?name=miso.moravcik)** opened **[SPR-10392](https://jira.spring.io/browse/SPR-10392?redirect=false)** and commented  With latest Spring release my tests based on spring integration started to fail.  I found that the problem is with `ReflectiveMethodResolved`, lines 100 - 106  In conjunction with calling method `filter()` on `MethodFilter` the `Collections.sort()` is called on `Collections.SingletonList` which is generally unmodifiable and that is the cause of `UnsuportedOperationException`.  WORKAROUND: downgrade spring-expression to 3.2.1.RELEASE version  See attached example project - just run SimpleTest - test fails, - then modify spring version to 3.2.1 in pom.xml - test passes  Here is the stacktrace:  ``` Caused by: java.lang.UnsupportedOperationException 	at java.util.AbstractList.set(AbstractList.java:132) 	at java.util.AbstractList$ListItr.set(AbstractList.java:426) 	at java.util.Collections.sort(Collections.java:221) 	at org.springframework.expression.spel.support.ReflectiveMethodResolver.resolve(ReflectiveMethodResolver.java:106) 	at org.springframework.expression.spel.ast.MethodReference.findAccessorForMethod(MethodReference.java:262) 	at org.springframework.expression.spel.ast.MethodReference.access$400(MethodReference.java:40) 	at org.springframework.expression.spel.ast.MethodReference$MethodValueRef.getValue(MethodReference.java:94) 	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:82) 	at org.springframework.expression.spel.ast.SpelNodeImpl.getTypedValue(SpelNodeImpl.java:102) 	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:103) 	at org.springframework.integration.util.AbstractExpressionEvaluator.evaluateExpression(AbstractExpressionEvaluator.java:126) 	at org.springframework.integration.util.MessagingMethodInvokerHelper.processInternal(MessagingMethodInvokerHelper.java:227) 	at org.springframework.integration.util.MessagingMethodInvokerHelper.process(MessagingMethodInvokerHelper.java:127) 	at org.springframework.integration.handler.MethodInvokingMessageProcessor.processMessage(MethodInvokingMessageProcessor.java:73) ```    ---  **Affects:** 3.2.2  **Attachments:** - [integration-example.zip](https://jira.spring.io/secure/attachment/21105/integration-example.zip) (_3.75 kB_)  **Issue Links:** - [INT-2972](https://jira.spring.io/browse/INT-2972) FixedMethodFilter returns Collections.singletonList(this.method) which fails then in ReflectiveMethodResolver when sorting  1 votes, 8 watchers","closed","in: core,","spring-projects-issues","2013-03-18T06:37:21Z","2013-05-07T12:54:11Z"
"","15525","Add ability to inject fields via reflection when using xml configuration. [SPR-10897]","**[Michal Jedynak](https://jira.spring.io/secure/ViewProfile.jspa?name=mjedynak)** opened **[SPR-10897](https://jira.spring.io/browse/SPR-10897?redirect=false)** and commented  I have a class that has an interface as a collaborator with two implementations. When I want to have two beans of this class (each with different interface) I must create setter in the class for the collaborator (otherwise org.springframework.beans.NotWritablePropertyException is thrown). It would be nice if the container injected it via reflection. Link to the project depicting the issue is attached.   ---  **Affects:** 3.2.4  **Reference URL:** https://github.com/mjedynak/spring-injection-issue","closed","status: bulk-closed,","spring-projects-issues","2013-09-05T13:28:47Z","2019-01-12T02:32:22Z"
"","14972","Introduce ActiveProfilesResolver in the TestContext framework [SPR-10338]","**[Michail Nikolaev](https://jira.spring.io/secure/ViewProfile.jspa?name=nkey)** opened **[SPR-10338](https://jira.spring.io/browse/SPR-10338?redirect=false)** and commented  #### Overview  See the related discussion on [GitHub](https://github.com/SpringSource/spring-framework/issues/240) for details.  ---  #### Deliverables  1. [x] Introduce an `ActiveProfilesResolver` API. (see _Proposal_) 2. [x] Add a `resolver` attribute to `@ActiveProfiles`. (see _Proposal_) 3. [x] Update `ContextLoaderUtils.resolveActiveProfiles(Class\)` to support an `ActiveProfilesResolver`.    - Make it a configuration error (i.e., by throwing an `IllegalStateException`) if both active profiles and a resolver are declared. 4. [x] Document these new features in the reference manual.  ---  #### Proposal  ``` interface ActiveProfilesResolver {     String[] resolve(Class testClass); } ```  ``` public @interface ActiveProfiles {      String[] value() default {};      String[] profiles() default {};      boolean inheritProfiles() default true;      Class","closed","type: enhancement,","spring-projects-issues","2013-02-27T11:15:35Z","2019-01-13T07:00:55Z"
"","14837","Configuring Content Negotiation Example Code Incorrect [SPR-10204]","**[Michael Robinson](https://jira.spring.io/secure/ViewProfile.jspa?name=c.michaelrobinson)** opened **[SPR-10204](https://jira.spring.io/browse/SPR-10204?redirect=false)** and commented  The example code in section 17.15.4 seems incorrect. I believe the line:  ``` configurer.setFavorPathExtension(false).setFavorParameter(true); ```  should instead be:  ``` configurer.favorPathExtension(false).favorParameter(true); ```  Thanks, Michael   ---  **Affects:** 3.2 GA  **Reference URL:** http://static.springsource.org/spring-framework/docs/3.2.x/spring-framework-reference/html/mvc.html#mvc-config-content-negotiation  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/692ced8046f40facaa15fe9ad5a8d2cf56852794","closed","type: documentation,","spring-projects-issues","2013-01-22T08:31:13Z","2013-01-22T11:16:13Z"
"","15292","Make #result available for SpEL in @CachePut key attribute [SPR-10664]","**[Michael Plöd](https://jira.spring.io/secure/ViewProfile.jspa?name=bitboss)** opened **[SPR-10664](https://jira.spring.io/browse/SPR-10664?redirect=false)** and commented  The returned object of a method is not available in `@CachePut(key = ""…"")`. It would be a good enhancement to have it available for the following use case:  ```java @CachePut(value = ""personEntity"", key = ""#result.id"") public Person persistPerson(Person p) {   Person result = personRepository.save(p);   return result; }  @Entity public class Person {   @Id @GeneratedValue   private Long id;   … } ```  In this case we might want to use the generated id as a cache key. However it gets generated and is only available on the returned object. For this reason I suggest having `#result` available on all SpEL compatible attributes of `@CachePut`.  ---  **Affects:** 3.2.3  **Issue Links:** - #16571 `@CachePut` always prevents `@Cacheable` even with mutually exclusive conditions - #15286 `@CacheEvict` key should allow referencing return value  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/eea230f2a8b31ee9d8248d97088d88a0ebe2be61","closed","type: enhancement,","spring-projects-issues","2013-06-18T08:17:29Z","2019-01-13T06:59:17Z"
"","15036","WebRequest#getParameter does not behave like HttpServletRequest [SPR-10403]","**[Michael Osipov](https://jira.spring.io/secure/ViewProfile.jspa?name=michael-o)** opened **[SPR-10403](https://jira.spring.io/browse/SPR-10403?redirect=false)** and commented  According to `HttpServletRequest#getParameter`'s a parameter value is either returned as null or as string.  When I invoke  ``` GET /rest?q&attributes=one ```  `q` is returned as `null`  but when I invoke this  ``` GET /rest?q=&attributes=one ```  `q` is returned as `""""`  Both makes a difference.  Though `WebRequest#getParameter` converts both to `""""` which is incorrect. This should work just like the `HttpServletRequest`.  It leaves to issues like #15035.  ---  **Affects:** 3.2.2","closed","status: invalid,","spring-projects-issues","2013-03-20T08:27:40Z","2019-01-12T05:27:13Z"
"","15035","Request @RequestParam not enforced with empty values [SPR-10402]","**[Michael Osipov](https://jira.spring.io/secure/ViewProfile.jspa?name=michael-o)** opened **[SPR-10402](https://jira.spring.io/browse/SPR-10402?redirect=false)** and commented  I have defined this method signature:  ```java @RequestMapping(method = RequestMethod.GET, produces = { MediaType.APPLICATION_XML_VALUE,   ""application/json;charset=UTF-8"" }) public ResponseEntity searchProjects(@RequestParam(value = ""q"") String query,   @RequestParam(""attributes"") String[] attributes,   @RequestParam(value = ""outputType"", required = false, defaultValue = ""hash"") OutputType outputType)   throws MissingServletRequestParameterException ```  When I invoke this method either with:  ``` GET /rest?q&attributes=one ```  or  ``` GET /rest?q=&attributes=one ```  The query variable is always passed as empty string/null although its defined as required. `MissingServletRequestParameterException` is not thrown.  I have attached a screenshot of the debugging session where one can inspect that case. I think the else if in lines 95 to 97 are incomplete.  ---  **Affects:** 3.2.2  **Attachments:** - [debug.png](https://jira.spring.io/secure/attachment/21115/debug.png) (_76.59 kB_)  **Issue Links:** - #15213 Optional parameter in web method now raises error, breaks compatibility with the past - #15207 Revert change for SPR-10402 that allowed treating empty values as missing values  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2d8315fba04faae73fa8384468de7f172d27794c, https://github.com/spring-projects/spring-framework/commit/e39fe1822daf086ebacc9cdb284490c4c26f5be2, https://github.com/spring-projects/spring-framework/commit/abfb439bfed05257b256710b132c4c03f3a915c0, https://github.com/spring-projects/spring-framework/commit/d3eda09c01c151f5e08feade1df599cb9939f177  0 votes, 7 watchers","closed","type: bug,","spring-projects-issues","2013-03-20T08:21:37Z","2019-01-13T07:00:40Z"
"","14813","@RequestParam default value not set in certain cases [SPR-10180]","**[Michael Osipov](https://jira.spring.io/secure/ViewProfile.jspa?name=michael-o)** opened **[SPR-10180](https://jira.spring.io/browse/SPR-10180?redirect=false)** and commented  I have this `@RequestMapping`  ```java @RequestMapping(value = ""/{project:[A-Z0-9_+\\.\\(\\)=\\- ]+}"", method = RequestMethod.GET, produces = {     MediaType.APPLICATION_XML_VALUE, ""application/json;charset=UTF-8"" }) public ResponseEntity lookupProject(@PathVariable String project,     @RequestParam(value = ""attributes"", required = false) String[] attributes,     @RequestParam(value = ""outputType"", required = false, defaultValue = ""HASH"") OutputType outputType) ```  Where `OutputType` is an enum with the values HASH and ARRAY.  In the following edge cases:  ``` GET /.../TEST-PROJECT?outputType HTTP/1.1 GET /.../TEST-PROJECT?outputType= HTTP/1.1 ```  The `outputType` variable is not populated with the default value but a `null` is assigned. The `RequestParamMethodArgumentResolver` receives this as an empty string.  See the attached screenshot of the debugger.  If this cannot be reasonable fixed, add at least a paragraph to the docs that such edge cases exist.   ---  **Affects:** 3.1.3, 3.2 GA  **Attachments:** - [empty value.png](https://jira.spring.io/secure/attachment/20852/empty+value.png) (_119.78 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3abe05c65e40755e209971888e3d5e6ea38b2487, https://github.com/spring-projects/spring-framework/commit/221562dbebad4bc1a74dc537a7b348f619eae744","closed","type: enhancement,","spring-projects-issues","2013-01-16T02:35:02Z","2013-03-01T13:33:34Z"
"","14808","AbstractMessageConverterMethodProcessor returns allSupportedMediaTypes with HttpMediaTypeNotAcceptableException [SPR-10175]","**[Michael Osipov](https://jira.spring.io/secure/ViewProfile.jspa?name=michael-o)** opened **[SPR-10175](https://jira.spring.io/browse/SPR-10175?redirect=false)** and commented  When a `Controller` is able respond with a limited set of media types and the client requests a not supported media type the server respponds with a `HttpMediaTypeNotAcceptableException` with all supported media types.  An example request mapping:  ```java @RequestMapping(value = ""/{project:[A-Z0-9_+\\.\\(\\)=\\- ]+}"", method = RequestMethod.GET)   public ResponseEntity lookupProject(@PathVariable String project,     @RequestParam(value = ""attributes"", required = false) String[] attributes,     @RequestParam(value = ""outputType"", required = false, defaultValue = ""hash"") OutputType outputType) ```  Controller mapping  ```java @Controller @RequestMapping(""/rest/db-search"") public class DbSearchController ```  Now, let's say a client issues this GET request:  ``` GET /context/rest/db-search/1314136 HTTP/1.1 Host: :8080 User-Agent: ... Accept: text/csv Accept-Encoding: gzip, deflate ```  The aforementioned exception is thrown. It should contain the producible media types instead of all supported ones.  See attached screenshots for runtime inspection.   ---  **Affects:** 3.1.3, 3.2 GA  **Attachments:** - [all supported media types.png](https://jira.spring.io/secure/attachment/20847/all+supported+media+types.png) (_158.23 kB_) - [producible media types.png](https://jira.spring.io/secure/attachment/20848/producible+media+types.png) (_151.89 kB_) - [requested media types.png](https://jira.spring.io/secure/attachment/20849/requested+media+types.png) (_150.90 kB_)  **Backported to:** [3.1.4](https://github.com/spring-projects/spring-framework/milestone/83?closed=1)","closed","type: bug,","spring-projects-issues","2013-01-15T00:34:35Z","2013-01-21T09:42:07Z"
"","14806","RequestMapping fileExtension filling interferes with registration of mapping methods [SPR-10173]","**[Michael Osipov](https://jira.spring.io/secure/ViewProfile.jspa?name=michael-o)** opened **[SPR-10173](https://jira.spring.io/browse/SPR-10173?redirect=false)** and commented  I have following `servlet-context.xml` configured:  ```xml                                                                                       json=application/json           xml=application/xml            ```  Along with some other unrelated stuff.  I have also the following config post processor:  ```java public class MvcConfigurationPostProcessor implements BeanPostProcessor, PriorityOrdered {    @Override   public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {     if (bean instanceof RequestMappingHandlerMapping) {       RequestMappingHandlerMapping mapping = ((RequestMappingHandlerMapping) bean);        mapping.setUseRegisteredSuffixPatternMatch(true);     }          return bean;   }    @Override   public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {     return bean;   }    @Override   public int getOrder() {     return PriorityOrdered.HIGHEST_PRECEDENCE;   }  } ```  I simply want smart suffix matching with JSON and XML. According the `RequestMappingHandlerMapping` code, file extensions are registered in the `afterPropertiesSet()` method. Now here's the problem: this does not happen timely and interferes with method handling discovery as you can see from this log snippet (full excerpt has been attached):  ``` 11:26:27.163 [main] DEBUG o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0' 11:26:27.163 [main] DEBUG o.s.b.f.s.DefaultListableBeanFactory - Creating instance of bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0' 11:26:27.163 [main] DEBUG o.s.b.f.s.DefaultListableBeanFactory - Eagerly caching bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0' to allow for resolving potential circular references 11:26:27.163 [main] TRACE o.s.beans.CachedIntrospectionResults - Getting BeanInfo for class [org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping] 11:26:27.179 [main] TRACE o.s.beans.CachedIntrospectionResults - Caching PropertyDescriptors for class [org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping] ... 11:26:27.241 [main] DEBUG o.s.b.f.s.DefaultListableBeanFactory - Finished creating instance of bean 'org.springframework.web.servlet.handler.MappedInterceptor#3' 11:26:39.706 [main] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Looking for request mappings in application context: WebApplicationContext for namespace 'dispatch-servlet': startup date [Mon Jan 14 11:26:25 CET 2013]; parent: Root WebApplicationContext 11:27:17.880 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped ""{[/admin],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}"" onto public java.lang.String com.siemens.dynamowerk.tedabindexer.webapp.admin.controller.AdminController.index() 11:27:30.158 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped ""{[/admin/demo],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}"" onto public java.lang.String com.siemens.dynamowerk.tedabindexer.webapp.admin.controller.AdminController.demo() 11:27:35.728 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped ""{[/app],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}"" onto public java.lang.String com.siemens.dynamowerk.tedabindexer.webapp.app.controller.AppController.index() 11:27:37.477 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped ""{[/app/demo],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}"" onto public java.lang.String com.siemens.dynamowerk.tedabindexer.webapp.app.controller.AppController.demo() 11:27:38.117 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped ""{[/errors/404],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}"" onto public java.lang.String com.siemens.dynamowerk.tedabindexer.webapp.controller.ErrorsController.notFound() 11:27:38.882 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped ""{[/errors/401],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}"" onto public java.lang.String com.siemens.dynamowerk.tedabindexer.webapp.controller.ErrorsController.unauthorized() 11:27:39.579 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped ""{[/errors/403],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}"" onto public java.lang.String com.siemens.dynamowerk.tedabindexer.webapp.controller.ErrorsController.forbidden() 11:27:40.640 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped ""{[/errors/500],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}"" onto public java.lang.String com.siemens.dynamowerk.tedabindexer.webapp.controller.ErrorsController.internalServerError() 11:27:42.170 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped ""{[/app/ldap/users],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}"" onto public java.util.Collection com.siemens.dynamowerk.tedabindexer.webapp.ldap.LdapController.getUsers() throws javax.naming.NamingException 11:27:43.278 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped ""{[/rest/db-search],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}"" onto public org.springframework.http.ResponseEntity com.siemens.dynamowerk.tedabindexer.webapp.rest.controller.DbSearchController.searchProjects(java.lang.String,java.lang.String[],com.siemens.dynamowerk.tedabindexer.webapp.rest.controller.DbSearchController$OutputType) 11:27:43.966 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped ""{[/rest/db-search/{project:[A-Z0-9_+\.\(\)=\- ]+}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}"" onto public org.springframework.http.ResponseEntity com.siemens.dynamowerk.tedabindexer.webapp.rest.controller.DbSearchController.lookupProject(java.lang.String,java.lang.String[],com.siemens.dynamowerk.tedabindexer.webapp.rest.controller.DbSearchController$OutputType) 11:27:43.981 [main] DEBUG o.s.b.f.s.DefaultListableBeanFactory - Invoking afterPropertiesSet() on bean with name 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0' 11:27:43.981 [main] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Looking for request mappings in application context: WebApplicationContext for namespace 'dispatch-servlet': startup date [Mon Jan 14 11:26:25 CET 2013]; parent: Root WebApplicationContext 11:28:13.731 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped ""{[/admin],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}"" onto public java.lang.String com.siemens.dynamowerk.tedabindexer.webapp.admin.controller.AdminController.index() 11:28:16.235 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped ""{[/admin/demo],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}"" onto public java.lang.String com.siemens.dynamowerk.tedabindexer.webapp.admin.controller.AdminController.demo() 11:28:21.275 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped ""{[/app],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}"" onto public java.lang.String com.siemens.dynamowerk.tedabindexer.webapp.app.controller.AppController.index() 11:28:22.150 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped ""{[/app/demo],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}"" onto public java.lang.String com.siemens.dynamowerk.tedabindexer.webapp.app.controller.AppController.demo() 11:28:22.790 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped ""{[/errors/404],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}"" onto public java.lang.String com.siemens.dynamowerk.tedabindexer.webapp.controller.ErrorsController.notFound() 11:28:23.478 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped ""{[/errors/401],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}"" onto public java.lang.String com.siemens.dynamowerk.tedabindexer.webapp.controller.ErrorsController.unauthorized() 11:28:24.430 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped ""{[/errors/403],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}"" onto public java.lang.String com.siemens.dynamowerk.tedabindexer.webapp.controller.ErrorsController.forbidden() 11:28:25.023 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped ""{[/errors/500],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}"" onto public java.lang.String com.siemens.dynamowerk.tedabindexer.webapp.controller.ErrorsController.internalServerError() 11:28:25.632 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped ""{[/app/ldap/users],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}"" onto public java.util.Collection com.siemens.dynamowerk.tedabindexer.webapp.ldap.LdapController.getUsers() throws javax.naming.NamingException 11:28:26.382 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped ""{[/rest/db-search],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}"" onto public org.springframework.http.ResponseEntity com.siemens.dynamowerk.tedabindexer.webapp.rest.controller.DbSearchController.searchProjects(java.lang.String,java.lang.String[],com.siemens.dynamowerk.tedabindexer.webapp.rest.controller.DbSearchController$OutputType) 11:28:27.052 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped ""{[/rest/db-search/{project:[A-Z0-9_+\.\(\)=\- ]+}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}"" onto public org.springframework.http.ResponseEntity com.siemens.dynamowerk.tedabindexer.webapp.rest.controller.DbSearchController.lookupProject(java.lang.String,java.lang.String[],com.siemens.dynamowerk.tedabindexer.webapp.rest.controller.DbSearchController$OutputType) 11:28:27.052 [main] DEBUG o.s.b.f.s.DefaultListableBeanFactory - Finished creating instance of bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0' ```  Mapping handling happens once, the `afterPropertiesSet()` method is called and then a second run follows. I do not see why this happens at all but the outcome is that the second run doesn't overwrite previous registration. File extensions aren't propagated to `private RequestMappingInfo createRequestMappingInfo(RequestMapping annotation, RequestCondition customCondition)` and `this.fileExtensions` is simply empty.  I have attached a few screenshots from a debug session, you'll see that the necessary spots are filled in the `RequestMappingHandlerMapping` instance but not in the `RequestMappingInfo` instance(s).  This is my `@RequestMapping`:  ```java @RequestMapping(value = ""/{project:[A-Z0-9_+\\.\\(\\)=\\- ]+}"", method = RequestMethod.GET)   public ResponseEntity lookupProject(@PathVariable String project,     @RequestParam(value = ""attributes"", required = false) String[] attributes,     @RequestParam(value = ""outputType"", required = false, defaultValue = ""hash"") OutputType outputType) ```  Please note that a period is valid in the project path variable. Therefore smart/registerd suffix matching has been introduced.  The status code is a 404 in this case. There is a workaround for that. You have to add these methods:  ```java @RequestMapping(value = ""/{project:[A-Z0-9_+\\.\\(\\)=\\- ]+}.json"", method = RequestMethod.GET, produces = ""application/json;charset=UTF-8"") public ResponseEntity lookupProjectAsJsonWithExt(@PathVariable String project,   @RequestParam(value = ""attributes"", required = false) String[] attributes,   @RequestParam(value = ""outputType"", required = false, defaultValue = ""hash"") OutputType outputType) {    return lookupProject(project, attributes, outputType); }  @RequestMapping(value = ""/{project:[A-Z0-9_+\\.\\(\\)=\\- ]+}.xml"", method = RequestMethod.GET, produces = MediaType.APPLICATION_XML_VALUE) public ResponseEntity lookupProjectAsXmlWithExt(@PathVariable String project,   @RequestParam(value = ""attributes"", required = false) String[] attributes,   @RequestParam(value = ""outputType"", required = false, defaultValue = ""hash"") OutputType outputType) {    return lookupProject(project, attributes, outputType); } ```    ---  **Affects:** 3.2 GA  **Attachments:** - [fileExtensions empty.png](https://jira.spring.io/secure/attachment/20845/fileExtensions+empty.png) (_210.70 kB_) - [fileExtensions populated.png](https://jira.spring.io/secure/attachment/20846/fileExtensions+populated.png) (_209.58 kB_) - [RequestMappingHandlerMapping creation.txt](https://jira.spring.io/secure/attachment/20844/RequestMappingHandlerMapping+creation.txt) (_37.77 kB_)","closed","type: bug,","spring-projects-issues","2013-01-14T02:58:58Z","2013-01-21T11:53:23Z"
"","14803","Allow strict handling of unknown media types in request param and path extension ContentNegotiationStrategy [SPR-10170]","**[Michael Osipov](https://jira.spring.io/secure/ViewProfile.jspa?name=michael-o)** opened **[SPR-10170](https://jira.spring.io/browse/SPR-10170?redirect=false)** and commented  The currect implementation of the CNM iterates over all strategies until a media type is resolved. I like to have a more predictable version of resolving the media types. (One could provide the current and this one by a property)  Say I have this usecase:  ``` GET /resource.json HTTP/1.1 ... Accept: application/xml, text/plain .. ```  I have message converters configured for XML and plain text. So what happens here? A client requests JSON and sends its default accept header. In other words, in this case the client wants JSON for some reason. The CNM will serve XML instead of JSON. The client is surprised that XML is returned eventhough he requested JSON.  How can a fail-fast version make this more predictable? Try to resolve the path extension, if there is none, continue with headers. If there is one check whether this extension (media type) is supported, if yes, convert if not send a 406 **instead** of delegating to the next strategy. (This approach would chain all strategies of course).  I guess this would this an XOR ContentNegotiationManager.  Actually, the current behavior can deceive the client by sending something like this:  ``` GET /resource.xyz HTTP/1.1 ... Accept: application/unknown .. ```  Neither xyz nor application/unknown is known the the system and a 406 is issued. The client does not know which of those is not supported.   ---  **Affects:** 3.2 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0d2aa51576d150ec95a81573e3b84d641366e214","closed","type: enhancement,","spring-projects-issues","2013-01-12T11:59:24Z","2019-01-11T21:30:32Z"
"","14802","Make ContentNegotiationManager MessageConverter aware [SPR-10169]","**[Michael Osipov](https://jira.spring.io/secure/ViewProfile.jspa?name=michael-o)** opened **[SPR-10169](https://jira.spring.io/browse/SPR-10169?redirect=false)** and commented  The `ContentNegotiationManager` is a great idea but misses full dynamics. It registers supported path extensions by classpath discovery as you can see in [this method](https://github.com/SpringSource/spring-framework/blob/3.2.x/spring-webmvc/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java#L306).  This can be done way better because claspath discovery or manual registration is already done. It should rather iterate over all registered message converters, retrieve a list of properties of all path extensions to media type mappings they support and add them to the media types list.  This can maybe achieved without touching the `MessageConverter` interface but I think one should a method like this:  ```java public List getMediaTypeMappings(); ```  Some converters may return an empty list where a path extension makes no sense and the rest will return a non-empty list of properties.   ---  **Affects:** 3.2 GA","closed","type: enhancement,","spring-projects-issues","2013-01-12T11:15:00Z","2013-01-14T23:51:54Z"
"","14796","Expose path-related request mapping settings in the MVC XML namespace [SPR-10163]","**[Michael Osipov](https://jira.spring.io/secure/ViewProfile.jspa?name=michael-o)** opened **[SPR-10163](https://jira.spring.io/browse/SPR-10163?redirect=false)** and commented  There is at the moment no easy way to modify `RequestMappingHandlerMapping`'s setters. Namely, I had to set `setUseSuffixPatternMatch(false)`.  does not allow to change this bean. There is a Java equivalent  ```java @Configuration public class WebConfig extends WebMvcConfigurationSupport {    @Override   @Bean   public RequestMappingHandlerMapping requestMappingHandlerMapping() {     RequestMappingHandlerMapping hm = super.requestMappingHandlerMapping();     hm.setSuffixPatternMatch(false);     return hm;   } } ```  Which does not really work if you mix XML and Java config because this class is called when all URL handlers have been already registered.  I have found issue #14007 which solves the problem but is somewhat tedious in implementation.  Can we have  extended in such a way that exactly such such can be done in XML?  If this does not require any extension please add a doc chapter which shows how to do this with XML. There are only examples in Java whether it's the Spring Docs or Stackoverflow.  Something like this should work too:  ```xml  ```  Which actually doesn't!  Another reference: http://forum.springsource.org/showthread.php?120192  ---  **Affects:** 3.1.3  **Issue Links:** - #15878 Allow configuring RequestMappingHandlerMapping in mvc:annotation-driven (_**""is duplicated by""**_) - #18757 Backport MVC config path config options to 3.2.x - #16111 Expose path-related request mapping settings in the MVC Java config  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/eac48818098a9ee4ab20f0b37a1e79518c30308a, https://github.com/spring-projects/spring-framework/commit/96b418cc8ae537e985cfe67b80cd866d03c8060f, https://github.com/spring-projects/spring-framework/commit/fc05df0f14add7d53bbe8f2c0a1cdedc2b320e1a, https://github.com/spring-projects/spring-framework/commit/8edb7a18ccb8cd1d1b072f1cf2931c9e7e932bfc, https://github.com/spring-projects/spring-framework/commit/80a16c6d10a5ede0c32a3fdfb842e316715e52f7  9 votes, 10 watchers","closed","type: enhancement,","spring-projects-issues","2013-01-11T06:46:15Z","2019-01-11T21:21:38Z"
"","14791","Cannot reasonably extend DispatcherServlet [SPR-10158]","**[Michael Osipov](https://jira.spring.io/secure/ViewProfile.jspa?name=michael-o)** opened **[SPR-10158](https://jira.spring.io/browse/SPR-10158?redirect=false)** and commented  Most of the fields in the `DispatcherServlet` are private like:  ```java private static final UrlPathHelper urlPathHelper = new UrlPathHelper(); private MultipartResolver multipartResolver; private LocaleResolver localeResolver; private ThemeResolver themeResolver; private List handlerMappings; private List handlerAdapters; private List handlerExceptionResolvers; private RequestToViewNameTranslator viewNameTranslator; private FlashMapManager flashMapManager; private List viewResolvers; ```  This means that if I would like to override a method to implement custom behavior, I do not have access to those fields and cannot reasonably extend the DispatcherServlet. The only workaround is to copy the entire code and the alter it.   ---  **Affects:** 3.1.3","closed","type: enhancement,","spring-projects-issues","2013-01-10T01:26:44Z","2018-12-12T16:00:55Z"
"","14786","TypeMismatchException for @RequestParam does not contain parameter name [SPR-10153]","**[Michael Osipov](https://jira.spring.io/secure/ViewProfile.jspa?name=michael-o)** opened **[SPR-10153](https://jira.spring.io/browse/SPR-10153?redirect=false)** and commented  I have defined a mapping like this:  ```java public ResponseEntity lookupProject(@PathVariable String project, 			@RequestParam(value = ""outputType"", required = false, defaultValue = ""HASH"") OutputType outputType) ```  OutputType is an enum with values HASH and ARRAY.  When the converter is not able to converter to an enum a `TypeMismatchException` is issued. Unfortunately, `TypeMismatchException#getPropertyName` is not populated. I cannot reasonbly determine that exactly this parameter has failed. Please add the appropriate `PropertyChangeEvent`.  ---  **Affects:** 3.1.3  **Issue Links:** - #16425 MVC: which parameter cannot be parsed? (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6f5359e40c21146c40a7e2b18a491f75b61f8152  3 votes, 8 watchers","closed","type: enhancement,","spring-projects-issues","2013-01-09T02:42:14Z","2019-01-11T21:22:12Z"
"","14689","Improve DispatcherServlet#noHandlerFound response message [SPR-10056]","**[Michael Osipov](https://jira.spring.io/secure/ViewProfile.jspa?name=michael-o)** opened **[SPR-10056](https://jira.spring.io/browse/SPR-10056?redirect=false)** and commented  The currect noHandlerFound method looks like this:  ```java protected void noHandlerFound(HttpServletRequest request, HttpServletResponse response) throws Exception { 		if (pageNotFoundLogger.isWarnEnabled()) { 			String requestUri = urlPathHelper.getRequestUri(request); 			pageNotFoundLogger.warn(""No mapping found for HTTP request with URI ["" + requestUri + 					""] in DispatcherServlet with name '"" + getServletName() + ""'""); 		} 		response.sendError(HttpServletResponse.SC_NOT_FOUND); 	} ```  simply sending the error code is t technical for users. Add a `sendError` method like this:  ```java response.sendError(HttpServletResponse.SC_NOT_FOUND, ""No mapping found for HTTP request with URI "" + requestUri); ```    ---  **Affects:** 3.1.3","closed","type: enhancement,","spring-projects-issues","2012-11-29T01:33:55Z","2012-12-06T11:35:12Z"
"","14926","IllegalArgumentException initializing an application compiled with Java 8 [SPR-10292]","**[Michael Nascimento Santos](https://jira.spring.io/secure/ViewProfile.jspa?name=misterm)** opened **[SPR-10292](https://jira.spring.io/browse/SPR-10292?redirect=false)** and commented  When trying to initialize Tomcat with JDK 8 lambda b76:  ``` Caused by: java.lang.IllegalArgumentException 	at org.springframework.asm.ClassReader.(Unknown Source) 	at org.springframework.asm.ClassReader.(Unknown Source) 	at org.springframework.asm.ClassReader.(Unknown Source) 	at org.springframework.core.type.classreading.SimpleMetadataReader.(SimpleMetadataReader.java:52) 	at org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(SimpleMetadataReaderFactory.java:80) 	at org.springframework.core.type.classreading.CachingMetadataReaderFactory.getMetadataReader(CachingMetadataReaderFactory.java:101) 	at org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.findCandidateComponents(ClassPathScanningCandidateComponentProvider.java:257) 	... 47 more ```    ---  **Affects:** 3.2 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d3a406876834b91a4cf3b1e840855caeb0446d28, https://github.com/spring-projects/spring-framework/commit/5e64723e0291e216b403d234a0677837bf69ffb1, https://github.com/spring-projects/spring-framework/commit/265c0c1505dafdbbd7391367081f1d6eddd5c47e  1 votes, 10 watchers","closed","in: core,","spring-projects-issues","2013-02-13T21:09:35Z","2015-09-25T07:14:57Z"
"","15366","Identify JibxMarshaller closes the provided XMLStreamWriter [SPR-10738]","**[Michael Minella](https://jira.spring.io/secure/ViewProfile.jspa?name=mminella)** opened **[SPR-10738](https://jira.spring.io/browse/SPR-10738?redirect=false)** and commented  When using the JibxMarshaller#marshalXmlStreamWriter(Object graph, XMLStreamWriter streamWriter), the supplied XMLStreamWriter will be closed by Jibx once the marshalling is complete.  This causes an exception to be thrown if the client expects to reuse the streamWriter to append additional items to it.  Spring Batch has a work around so that it doesn't impact the StaxEventItemWriter, but since this behavior is different than the other Marshaller implementations, it should at least be called out in the doc (assuming that Jibx won't support not closing the writer).   ---  **Affects:** 3.2.3  **Reference URL:** https://jira.springsource.org/browse/BATCH-2054  1 votes, 2 watchers","closed","status: bulk-closed,","spring-projects-issues","2013-07-12T13:13:51Z","2019-01-12T00:22:38Z"
"","15295","consider adding JMX support for connection pools such as dbcp and tomcat-jdbc [SPR-10667]","**[Michael Isvy](https://jira.spring.io/secure/ViewProfile.jspa?name=michael.isvy)** opened **[SPR-10667](https://jira.spring.io/browse/SPR-10667?redirect=false)** and commented  Most popular opensource connection pools are tomcat-jdbc, commons-dbcp and C3P0. As part of Spring-JMX, it would be nice to add a simple way to enable JMX monitoring for connection pools. In some cases, we would just be enabling some existing MBeans. If there is no existing MBean, we might have to create one ourselves.  ```  ```  or:  ```  ```  We might also be more specific and provide a subtag that lists the specific features/MBeans we want to enable.   --- No further details from [SPR-10667](https://jira.spring.io/browse/SPR-10667?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2013-06-19T01:38:39Z","2019-01-13T21:03:19Z"
"","15294","Add encryption support for PropertyPlaceholderConfigurer [SPR-10666]","**[Michael Isvy](https://jira.spring.io/secure/ViewProfile.jspa?name=michael.isvy)** opened **[SPR-10666](https://jira.spring.io/browse/SPR-10666?redirect=false)** and commented  At this stage, Spring does not provide support for encrypted property values.  For instance, if I externalize my values in a properties file using a property-placeholder, I can only have the following inside my properties file:  ``` jdbc.username=admin jdbc.password=secret ```  I would like to be able to use the following instead:  ``` jdbc.username=admin jdbc.password={md5}bface9aa8e675d3a1757f143893793db ```  (syntax is just a draft, you might find something more appropriate)  We could have a new class that inherits from PropertyPlaceholderConfigurer and adds the encryption features.  And we could add a property to the namespace as follows:  ```  ```  ( 'useEncryption' could default to true or false depending on what you find more appropriate).  ---  **Issue Links:** - #13568 PropertySourcesPlaceholderConfigurer never calls ""convertProperties"" on merged properties - #13603 Allow the use of custom PropertySource annotations in `@Configuration` classes - [SEC-3123](https://jira.spring.io/browse/SEC-3123) Encrypted property value support - #17236 Backport encrypted property functionality from spring-cloud-config environment work  2 votes, 11 watchers","closed","status: bulk-closed,","spring-projects-issues","2013-06-19T01:27:42Z","2019-01-13T06:59:15Z"
"","14890","NamedParameterJdbcTemplate and JdbcTemplate: consider deprecating queryFor* methods [SPR-10257]","**[Michael Isvy](https://jira.spring.io/secure/ViewProfile.jspa?name=michael.isvy)** opened **[SPR-10257](https://jira.spring.io/browse/SPR-10257?redirect=false)** and commented  Those methods were mostly relevant prior to Java 5. Thanks to Generics, we now can use query(...) methods instead in all cases that I can think of.   --- No further details from [SPR-10257](https://jira.spring.io/browse/SPR-10257?redirect=false)","closed","type: enhancement,","spring-projects-issues","2013-02-04T03:36:44Z","2013-04-30T12:56:37Z"
"","14889","NamedParameterJdbcTemplate: add methods to simplify usage when no parameter is needed [SPR-10256]","**[Michael Isvy](https://jira.spring.io/secure/ViewProfile.jspa?name=michael.isvy)** opened **[SPR-10256](https://jira.spring.io/browse/SPR-10256?redirect=false)** and commented  When working with NamedParameterJdbcTemplate, we typically inject an instance of it in a DAO/Repository and use it in 10-20 methods that require accessing the database. Most of those methods use parameters (which is why we use a NamedParameterJdbcTemplate). However, among the 20 methods inside my DAO, it's common that I have 3-4 of them that use SQL queries without parameters.  In that case, the syntax could be improved.  We currently do:  ``` return this.namedParameterJdbcTemplate.query( 				""SELECT id, name FROM types ORDER BY name"", new HashMap(), 				ParameterizedBeanPropertyRowMapper.newInstance(Pet.class)); ```  Inside NamedParameterJdbcTemplate, we could create some methods that do not take a HashMap as a parameter. We would then do instead:  ``` return this.namedParameterJdbcTemplate.query( 				""SELECT id, name FROM types ORDER BY name"", ParameterizedBeanPropertyRowMapper.newInstance(Pet.class)); ```  Note: in the first code sample, replacing the empty HashMap with null is not an option because the method call then becomes ambiguous as 2 methods could be selected.    ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3fa6723748e10cc3322735cce2da239d5e1a5a28","closed","type: enhancement,","spring-projects-issues","2013-02-04T03:12:07Z","2013-02-09T08:06:57Z"
"","14694","404 error when working with .htm servlet-mapping [SPR-10061]","**[Michael Isvy](https://jira.spring.io/secure/ViewProfile.jspa?name=michael.isvy)** opened **[SPR-10061](https://jira.spring.io/browse/SPR-10061?redirect=false)** and commented  I am getting a 404 error when working with the mvc namespace and using a .htm URL. That issue did not exist prior to Spring 3.1.RC1.  Inside the PatternsRequestCondition used in my application, the only fileExtension available is "".xml"". My url has an extension of "".htm"" so it is not matched. If I change the servlet-mapping to ""*.xml"" and use a URL with "".xml"" in the end, it's working then.  ---  **Affects:** 3.2 RC1, 3.2 RC2  **Issue Links:** - #13120 Configure PatternsRequestCondition with information that allows it to do a smart suffix pattern match  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9cc4bd892a6bb3aca9fea4b2423369181cebea9a","closed","type: bug,","spring-projects-issues","2012-11-30T09:02:55Z","2019-01-11T19:10:56Z"
"","14687","Make it easier to integrate Tiles 3 with Spring MVC [SPR-10054]","**[Michael Isvy](https://jira.spring.io/secure/ViewProfile.jspa?name=michael.isvy)** opened **[SPR-10054](https://jira.spring.io/browse/SPR-10054?redirect=false)** and commented  I have a Spring MVC project which uses Tiles 2 with wildcards.  I tried to migrate it to Tiles 3 and had a hard time working with Maven dependencies. It was not just a matter of changing the version of Tiles. In the end, I had to add the following dependency:  ```xml                 org.apache.tiles              tiles-request-servlet-wildcard              1.0.2                                                      org.springframework                      spring-web                                  ```  I had to exclude spring-web because it is linked to an old version of Spring MVC. This dependency only contains one class so Rossen mentioned that a possible way would be to integrate this class as part of the Spring MVC - Tiles integration.    ---  **Affects:** 3.2 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/42a928596fc3dcd2e1a5270d534da66bb9d1978f","closed","type: enhancement,","spring-projects-issues","2012-11-29T00:04:10Z","2012-12-03T12:17:52Z"
"","14740","Autowiring with @Qualifier and @Qualifier meta annotation fails in Spring 3.2 [SPR-10107]","**[Michael Ebert](https://jira.spring.io/secure/ViewProfile.jspa?name=_ebi)** opened **[SPR-10107](https://jira.spring.io/browse/SPR-10107?redirect=false)** and commented  While upgrading from Spring 3.1.3 to 3.2.0 we're facing a problem with `@Qualifier` annotation.  We have two meta annotations `@MainServiceQualifier` and `@AdapterServiceQualifier` and accordingly two different service implementations of a single service interface. A component which has a dependency to that interface and that field annotated with both `@Autowired` _and_ one of the meta annotations fails while trying to inject the dependency because both service implementations are determined as autowire candidates.  ``` @Retention(RetentionPolicy.RUNTIME) @Target({ ElementType.FIELD, ElementType.METHOD, ElementType.PARAMETER, ElementType.TYPE,         ElementType.ANNOTATION_TYPE }) @Documented @Qualifier public @interface AdpaterServiceQualifier {  } ```  ``` @Retention(RetentionPolicy.RUNTIME) @Target({ ElementType.FIELD, ElementType.METHOD, ElementType.PARAMETER, ElementType.TYPE,         ElementType.ANNOTATION_TYPE }) @Documented @Qualifier public @interface MainServiceQualifier {  } ```  ``` @Component public class MyClient {      @Autowired     @AdpaterServiceQualifier     private MyService myService;      ... } ```  This dependency resolution fails with below exception:  ``` java.lang.IllegalStateException: Failed to load ApplicationContext ... Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No unique bean of type [de.example.services.MyService] is defined: expected single matching bean but found 2: [myServiceAdapter, myServiceImpl] 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:825) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:730) 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:486) 	... 40 more ```  I've attached a sample project. Running  ``` mvn test -Dorg.springframework.version=3.1.3.RELEASE ```  runs just fine but  ``` mvn test -Dorg.springframework.version=3.2.0.RELEASE ```  fails while bootstrapping the test application context:  I found out that a [change](https://github.com/SpringSource/spring-framework/commit/914a1b208869102da76832fb7f99e1bbfc2c5f6e#spring-beans/src/main/java/org/springframework/beans/factory/annotation/QualifierAnnotationAutowireCandidateResolver.java) in `QualifierAnnotationAutowireCandidateResolver` causes the problem:  In line 195 `AnnotationUtils.getValue(metaAnn) == null` seems to be wrong. `AnnotationUtils.getValue(metaAnn)` never returns `null` for `@Qualifier` annotation but en empty string - which causes the expression to evaluate as false and the class to determine the wrong `@Qualifier` bean as a candidate bean for autowiring.  Steps to reproduce:  1. extract sample project [^qualifier-test.zip] 2. run single test case via `mvn test -Dorg.springframework.version=3.2.0.RELEASE`  ---  **Affects:** 3.2 GA  **Attachments:** - [qualifier-test.zip](https://jira.spring.io/secure/attachment/20817/qualifier-test.zip) (_7.74 kB_)  **Issue Links:** - #14739 AutowiredAnnotationBeanPostProcessor made mistake to check the bean is unique (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c242abada1ba450b18629dda8bb5d17d0b67a0be  0 votes, 6 watchers","closed","in: core,","spring-projects-issues","2012-12-18T06:09:07Z","2019-01-11T21:25:04Z"
"","15182","Jaxb2Marshaller + packagesToScan + SpringMVC fails to find supported class [SPR-10551]","**[Michael Bazos](https://jira.spring.io/secure/ViewProfile.jspa?name=mbazos)** opened **[SPR-10551](https://jira.spring.io/browse/SPR-10551?redirect=false)** and commented  There seems to be an issue when you use the Jaxb2Marshaller + packagesToScan in conjunction with Spring MVC.  The issue I am specifically running into is that the method returns false even though the JAXBContext knows about the class: public boolean supports(Class clazz){...}  The issue is with the following method:      private boolean supportsInternal(Class clazz, boolean checkForXmlRootElement) {     	if (checkForXmlRootElement && AnnotationUtils.findAnnotation(clazz, XmlRootElement.class) == null) {     		return false;     	}     	if (StringUtils.hasLength(getContextPath())) {     		String packageName = ClassUtils.getPackageName(clazz);     		String[] contextPaths = StringUtils.tokenizeToStringArray(getContextPath(), "":"");     		for (String contextPath : contextPaths) {     			if (contextPath.equals(packageName)) {     				return true;     			}     		}     		return false;     	}     	else if (!ObjectUtils.isEmpty(getClassesToBeBound())) {     		return Arrays.asList(getClassesToBeBound()).contains(clazz);     	}     	return false;     }  The problem is that even if the ""packagesToScan"" works...which it does the supportInternal method needs to check the current JAXBContext to see if that class is actually loaded.  I checked and you cannot do this with JAXBContext so a better solution might be to add the class names to ""classesToBeBound"" as they are scanned in from the package scanner.  After that then in the ""supportsInternal"" method an additional check can be made to see if the packages.  If you need me to attach code for the fix I would be more than happy to.  Please just let me know as I am here to help.  Also I didn't check the latest spring-oxm so I am not sure if this is no longer an issue but I couldn't find information on this in jira.  ---  **Affects:** 3.1.1  **Issue Links:** - #13790 Jaxb2Marshaller::supports() ignores classes found by packages scanning (_**""duplicates""**_)  **Backported to:** [3.1.3](https://github.com/spring-projects/spring-framework/milestone/82?closed=1)","closed","status: duplicate,","spring-projects-issues","2013-05-10T12:46:53Z","2019-01-12T16:47:01Z"
"","15378","setPrefixJson don't work in org.springframework.web.servlet.view.json.MappingJackson2JsonView and org.springframework.web.servlet.view.json.MappingJacksonJsonView [SPR-10752]","**[Meekado](https://jira.spring.io/secure/ViewProfile.jspa?name=meekado)** opened **[SPR-10752](https://jira.spring.io/browse/SPR-10752?redirect=false)** and commented  public void setPrefixJson(boolean prefixJson) { this.jsonPrefix = ""{} && ""; } suggestion, replace by this : this.jsonPrefix=(prefixJson)?""{} && "":"""";  quick workaround :  just add \ and remove \  if you don't remove prefixJson, maybe it will set jsonPrefix value...  you can also just remove and set the string but it's more safe to know that is the value :-)    ---  **Affects:** 3.2.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d8e3ef7640657cd998645301023e027065c5aaa8, https://github.com/spring-projects/spring-framework/commit/3bf56dda560d4dc566c1f4f3691b0342979e06eb, https://github.com/spring-projects/spring-framework/commit/ae0f23e9428bd47cb13fb6ecad58c2903e979680, https://github.com/spring-projects/spring-framework/commit/da1fafa93084f2fa175d2209b02b8bb697c8846e, https://github.com/spring-projects/spring-framework/commit/2af891683eabd98d25d98a91a8cb2242a9203c8a","closed","type: regression,","spring-projects-issues","2013-07-17T03:27:20Z","2013-07-24T10:17:07Z"
"","14792","Incorrect autowiring via annotation [SPR-10159]","**[MC](https://jira.spring.io/secure/ViewProfile.jspa?name=mc)** opened **[SPR-10159](https://jira.spring.io/browse/SPR-10159?redirect=false)** and commented  When i do have identical configuration in annotations and in XML Spring injects dependency differently. When it should inject ConcurrentHashMap it injects LinkedHashMap, which after some debugging i believe was internal Map used by bean factory.  Needed code is in attachments. It uses commons-jdbc.  ``` public void setDataSourceLookUpMap(Map dataSourceLookUpMap) {         System.out.println(""Map autowired should be the same as injected through setter"");         System.out.println(""And it isn't: "" + (this.dataSourceLookUpMap == dataSourceLookUpMap));         System.out.println(""First one is: "" + this.dataSourceLookUpMap.getClass());         System.out.println(""Second one is: "" + dataSourceLookUpMap.getClass());     } ```  And the this.dataSourceLookUpMap which was injected via reflection (based on Autowired) is i believe internal map which shouldn't be injected into bean.  Configuration in XML works OK, only annotations are wrong.   ---  **Affects:** 3.2 GA  **Attachments:** - [DataSourceRouter.java](https://jira.spring.io/secure/attachment/20837/DataSourceRouter.java) (_1.26 kB_) - [spring.es.service.ds.xml](https://jira.spring.io/secure/attachment/20838/spring.es.service.ds.xml) (_1.48 kB_)","closed","in: core,","spring-projects-issues","2013-01-10T01:33:41Z","2019-01-12T16:24:33Z"
"","14839","IllegalAccessError with load time weaving enabled in EAR deployment [SPR-10206]","**[Maxim Moldenhauer](https://jira.spring.io/secure/ViewProfile.jspa?name=maximmold)** opened **[SPR-10206](https://jira.spring.io/browse/SPR-10206?redirect=false)** and commented  I have an application with multiple web modules with the spring dependencies at the ear level. I am trying to use load time weaving with Spring's caching abstraction. When I deploy my application I get the following:  ``` [2013-01-21 08:51:59,877] ERROR: [[ACTIVE] ExecuteThread: '0' for queue: 'weblogic.kernel.Default (self-tuning)'] org.springframework.web.context.ContextLoader - Context initialization failed org.springframework.beans.factory.CannotLoadBeanCl assException: Error loading class [org.springframework.integration.config.FilterFacto ryBean] for bean with name 'org.springframework.integration.config.FilterFact oryBean#0' defined in null: problem with class file or dependent class; nested exception is java.lang.IllegalAccessError: class org.springframework.integration.config.FilterFacto ryBean cannot access its superclass org.springframework.integration.config.AbstractSta ndardMessageHandlerFactoryBean at org.springframework.beans.factory.support.Abstract BeanFactory.resolveBeanClass(AbstractBeanFactory.j ava:1265) at org.springframework.beans.factory.support.Abstract AutowireCapableBeanFactory.predictBeanType(Abstrac tAutowireCapableBeanFactory.java:576) at org.springframework.beans.factory.support.Abstract BeanFactory.isFactoryBean(AbstractBeanFactory.java :1331) at org.springframework.beans.factory.support.DefaultL istableBeanFactory.doGetBeanNamesForType(DefaultLi stableBeanFactory.java:337) at org.springframework.beans.factory.support.DefaultL istableBeanFactory.getBeanNamesForType(DefaultList ableBeanFactory.java:308) at org.springframework.beans.factory.support.DefaultL istableBeanFactory.getBeanNamesForType(DefaultList ableBeanFactory.java:303) at org.springframework.beans.factory.support.DefaultL istableBeanFactory.getBean(DefaultListableBeanFact ory.java:257) at org.springframework.security.saml.SAMLBootstrap.po stProcessBeanFactory(SAMLBootstrap.java:46) at org.springframework.context.support.AbstractApplic ationContext.invokeBeanFactoryPostProcessors(Abstr actApplicationContext.java:687) at org.springframework.context.support.AbstractApplic ationContext.invokeBeanFactoryPostProcessors(Abstr actApplicationContext.java:677) at org.springframework.context.support.AbstractApplic ationContext.refresh(AbstractApplicationContext.ja va:454) at org.springframework.web.context.ContextLoader.conf igureAndRefreshWebApplicationContext(ContextLoader .java:383) at org.springframework.web.context.ContextLoader.init WebApplicationContext(ContextLoader.java:283) at org.springframework.web.context.ContextLoaderListe ner.contextInitialized(ContextLoaderListener.java: 111) at weblogic.servlet.internal.EventsManager$FireContex tListenerAction.run(EventsManager.java:481) at weblogic.security.acl.internal.AuthenticatedSubjec t.doAs(AuthenticatedSubject.java:321) at weblogic.security.service.SecurityManager.runAs(Se curityManager.java:120) at weblogic.servlet.internal.EventsManager.notifyCont extCreatedEvent(EventsManager.java:181) at weblogic.servlet.internal.WebAppServletContext.pre loadResources(WebAppServletContext.java:1872) at weblogic.servlet.internal.WebAppServletContext.sta rt(WebAppServletContext.java:3153) at weblogic.servlet.internal.WebAppModule.startContex ts(WebAppModule.java:1508) at weblogic.servlet.internal.WebAppModule.start(WebAp pModule.java:482) at weblogic.application.internal.flow.ModuleStateDriv er$3.next(ModuleStateDriver.java:425) at weblogic.application.utils.StateMachineDriver.next State(StateMachineDriver.java:52) at weblogic.application.internal.flow.ModuleStateDriv er.start(ModuleStateDriver.java:119) at weblogic.application.internal.flow.ScopedModuleDri ver.start(ScopedModuleDriver.java:200) at weblogic.application.internal.flow.ModuleListenerI nvoker.start(ModuleListenerInvoker.java:247) at weblogic.application.internal.flow.ModuleStateDriv er$3.next(ModuleStateDriver.java:425) at weblogic.application.utils.StateMachineDriver.next State(StateMachineDriver.java:52) at weblogic.application.internal.flow.ModuleStateDriv er.start(ModuleStateDriver.java:119) at weblogic.application.internal.flow.StartModulesFlo w.activate(StartModulesFlow.java:27) at weblogic.application.internal.BaseDeployment$2.nex t(BaseDeployment.java:636) at weblogic.application.utils.StateMachineDriver.next State(StateMachineDriver.java:52) at weblogic.application.internal.BaseDeployment.activ ate(BaseDeployment.java:205) at weblogic.application.internal.EarDeployment.activa te(EarDeployment.java:58) at weblogic.application.internal.DeploymentStateCheck er.activate(DeploymentStateChecker.java:161) at weblogic.deploy.internal.targetserver.AppContainer Invoker.activate(AppContainerInvoker.java:79) at weblogic.deploy.internal.targetserver.BasicDeploym ent.activate(BasicDeployment.java:184) at weblogic.deploy.internal.targetserver.BasicDeploym ent.activateFromServerLifecycle(BasicDeployment.ja va:361) at weblogic.management.deploy.internal.DeploymentAdap ter$1.doActivate(DeploymentAdapter.java:51) at weblogic.management.deploy.internal.DeploymentAdap ter.activate(DeploymentAdapter.java:200) at weblogic.management.deploy.internal.AppTransition$ 2.transitionApp(AppTransition.java:30) at weblogic.management.deploy.internal.ConfiguredDepl oyments.transitionApps(ConfiguredDeployments.java: 240) at weblogic.management.deploy.internal.ConfiguredDepl oyments.activate(ConfiguredDeployments.java:169) at weblogic.management.deploy.internal.ConfiguredDepl oyments.deploy(ConfiguredDeployments.java:123) at weblogic.management.deploy.internal.DeploymentServ erService.resume(DeploymentServerService.java:180) at weblogic.management.deploy.internal.DeploymentServ erService.start(DeploymentServerService.java:96) at weblogic.t3.srvr.SubsystemRequest.run(SubsystemReq uest.java:64) at weblogic.work.ExecuteThread.execute(ExecuteThread. java:207) at weblogic.work.ExecuteThread.run(ExecuteThread.java :176) Caused by: java.lang.IllegalAccessError: class org.springframework.integration.config.FilterFacto ryBean cannot access its superclass org.springframework.integration.config.AbstractSta ndardMessageHandlerFactoryBean at java.lang.ClassLoader.defineClass1(Native Method) at java.lang.ClassLoader.defineClassCond(ClassLoader. java:631) at java.lang.ClassLoader.defineClass(ClassLoader.java :615) at java.lang.ClassLoader.defineClass(ClassLoader.java :465) at org.springframework.context.support.ContextTypeMat chClassLoader$ContextOverridingClassLoader.loadCla ssForOverriding(ContextTypeMatchClassLoader.java:1 09) at org.springframework.core.OverridingClassLoader.loa dClass(OverridingClassLoader.java:61) at java.lang.ClassLoader.loadClass(ClassLoader.java:2 47) at org.springframework.context.support.ContextTypeMat chClassLoader.loadClass(ContextTypeMatchClassLoade r.java:63) at org.springframework.util.ClassUtils.forName(ClassU tils.java:258) at org.springframework.beans.factory.support.Abstract BeanFactory.doResolveBeanClass(AbstractBeanFactory .java:1280) at org.springframework.beans.factory.support.Abstract BeanFactory.resolveBeanClass(AbstractBeanFactory.j ava:1254) ... 49 more ```  This does not happen with load time weaving off. I see right beforehand that `ServiceActivatorFactoryBean` is loaded which loads the `AbstractStandardMessageHandlerFactoryBean` from the ear level classloader. When `FilterFactoryBean` is trying to be loaded up through the temporary `ContextTypeMatchClassLoader` classloader, I think it doesn't like getting the bytes without the same `ProtectionDomain` as the classes in the parent classloader, but I'm not sure. I've verified that that parent classloaders for the load of `ServiceActivatorFactoryBean` and `FilterFactoryBean` are the same.  Right before the `IllegalAccessError`, I see a loadClass for `PrivilegedActionException` being called from JNI (from defineClass native method), which I'm guessing some how gets translated into an `IllegalAccessError`.  Any ideas?  I temporarily worked around this by modifying `org.springframework.core.OverridingClassLoader` to include the package of `FilterFactoryBean` in `public static final String[] DEFAULT_EXCLUDED_PACKAGES`. This is not ideal as I do not want to have to modify spring code. I can't set this programmatically using reflection as you cannot modify a static final field even with `setAccessible(true)`.   ---  **Affects:** 3.1.3, 4.3.7  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/9911","open","in: core,","spring-projects-issues","2013-01-22T09:45:29Z","2017-10-28T17:46:51Z"
"","15347","Problem when loading multiple 'applicationContext.xml' [SPR-10719]","**[Mauricio Chamati](https://jira.spring.io/secure/ViewProfile.jspa?name=mchamati)** opened **[SPR-10719](https://jira.spring.io/browse/SPR-10719?redirect=false)** and commented  I have a multi module project and in each module I have a differente applicationContext.xml. I mapped web.xml to be able to reach all of them and it has been working until spring release 3.1.4, however does not when using version 3.2.3. I guess it is not checking other files to define the instatiation priority.   ---  **Affects:** 3.2.3","closed","status: bulk-closed,","spring-projects-issues","2013-07-03T10:50:03Z","2019-01-12T00:23:01Z"
"","14992","Scope of model attributes when including JSP [SPR-10360]","**[Matus Zamborsky](https://jira.spring.io/secure/ViewProfile.jspa?name=zamborsky)** opened **[SPR-10360](https://jira.spring.io/browse/SPR-10360?redirect=false)** and commented  Scenario:  1. We have two URLs handled by controllers:    - `/parent`    - `/child` 2. `/parent` is rendered by `parent.jsp` 3. `/child` is rendered by `child.jsp` and is included (via ``) in `parent.jsp` 4. We try to access the `/parent` URL  If we set a model attribute in the `/parent` controller and also attribute with the same name in the `/child` controller, the value from the `/child` `Model` should have no effect on the value in `/parent` controller.  Normally this works, but when the value in the `/child` `Model` is set to `null`, the value is propagated into the `/parent` `Model` and hence if we access the variable as `${variable}` in `parent.jsp` after `` the value is also `null`.  ---  **Affects:** 3.0 GA, 3.2.2  **Reference URL:** https://github.com/backslash47/spring-framework-issues/tree/master/SPR-10360  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0fb4b747c2f634ebcbbc2f4e37726234100e8367","closed","type: bug,","spring-projects-issues","2013-03-07T04:37:35Z","2019-01-13T21:04:07Z"
"","15089","Add time zone support to the @Scheduled annotation for cron jobs [SPR-10456]","**[Mattias Severson](https://jira.spring.io/secure/ViewProfile.jspa?name=matsev)** opened **[SPR-10456](https://jira.spring.io/browse/SPR-10456?redirect=false)** and commented  I suggest that a new `timezone` element is added to the `@Scheduled` annotation that can be used in conjunction with the `cron` element.  Background:  Currently, it is not possible to specify a time zone to the `cron` element of the `@Scheduled` annotation. As a consequence, the `CronSequenceGenerator` constructor calls `TimeZone.getDefault()` internally, which causes the cron job to depend on the local time of the server that the app has been deployed on.  The idea is that the new `timezone` element should be converted into a `TimeZone` instance, that can be used to when calling the appropriate `CronTrigger` constructor, which in turn calls the appropriate constructor of the `CronSequenceGenerator`.  For the record, the standard the `CronExpression` class in the Quartz Scheduler project has a [setTimeZone()](http://quartz-scheduler.org/api/1.8.0/org/quartz/CronExpression.html#setTimeZone(java.util.TimeZone)) method that solves this use case.   ---  **Affects:** 3.2.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0c00b0d9027748259b2267d3501ccf6507c592c5  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2013-04-10T05:55:15Z","2013-08-29T16:20:48Z"
"","15064","Automatic generation of web service API documentation [SPR-10431]","**[Mattias Severson](https://jira.spring.io/secure/ViewProfile.jspa?name=matsev)** opened **[SPR-10431](https://jira.spring.io/browse/SPR-10431?redirect=false)** and commented  I suggest that Spring Web provides a way to automatically generate documentation of the Spring based web service API.  Background: [Enunciate](http://enunciate.codehaus.org/) is an engine that provides ways for automatic API documentation, as well as several other [artifacts](http://enunciate.codehaus.org/artifacts.html), for JAX-RS based web applications. Regrettably, they currently [do not support Spring 3+ web annotations](http://jira.codehaus.org/browse/ENUNCIATE-724).   ---  **Affects:** 3.0 GA  0 votes, 5 watchers","closed","status: bulk-closed,","spring-projects-issues","2013-03-30T02:35:01Z","2019-01-12T00:24:32Z"
"","15502","Provide a MessageSourceChain for chaining MessageSources [SPR-10875]","**[Matthias Müller](https://jira.spring.io/secure/ViewProfile.jspa?name=matthias.mueller)** opened **[SPR-10875](https://jira.spring.io/browse/SPR-10875?redirect=false)** and commented  It would be useful to have a MessageSourceChain, similar to Apache Commons [ComparatorChain](http://commons.apache.org/proper/commons-collections/javadocs/api-3.2.1/org/apache/commons/collections/comparators/ComparatorChain.html)  See attached files for Implementation and test.   ---  **Attachments:** - [MessageSourceChain.java](https://jira.spring.io/secure/attachment/21363/MessageSourceChain.java) (_2.32 kB_) - [MessageSourceChainTest.java](https://jira.spring.io/secure/attachment/21364/MessageSourceChainTest.java) (_3.44 kB_)  2 votes, 4 watchers","closed","status: bulk-closed,","spring-projects-issues","2013-08-29T02:54:08Z","2019-01-12T02:32:31Z"
"","14787","spring-context-2.1.xsd is 404ing [SPR-10154]","**[Matthew Glubb](https://jira.spring.io/secure/ViewProfile.jspa?name=mglubb)** opened **[SPR-10154](https://jira.spring.io/browse/SPR-10154?redirect=false)** and commented  The following URL is 404ing, resulting in failures of spring applications that reference it to initialise:  http://www.springframework.org/schema/context/spring-context-2.1.xsd   ---  **Reference URL:** http://www.springframework.org/schema/context/spring-context-2.1.xsd","closed","in: core,","spring-projects-issues","2013-01-09T02:43:47Z","2019-01-12T16:24:35Z"
"","15138","EvalTag$JspPropertyAccessor cannot resolve JSP attributes that have been set to null [SPR-10506]","**[Matt Forsythe](https://jira.spring.io/secure/ViewProfile.jspa?name=sythe01)** opened **[SPR-10506](https://jira.spring.io/browse/SPR-10506?redirect=false)** and commented  The canRead() method of org.springframework.web.servlet.tags.EvalTag.JspPropertyAccessor relies on pageContext.findAttribute(). It assumes that if findAttribute() returns null, that the attribute was not set, and is thus unreadable. So it can't handle the case where the attribute is present, but with a null value. Perhaps a better test would be testing the return value of pageContext.getAttributesScope() to see if it is set in any scope (i.e. - return value > 0).  The end result is a SpelEvaluationException when an expression contains a JSP variable that has a null value.   ---  **Affects:** 3.2.2  **Reference URL:** http://forum.springsource.org/showthread.php?136899-Using-null-variables-in-SpEL-causes-SpelEvaluationException  1 votes, 2 watchers","closed","status: bulk-closed,","spring-projects-issues","2013-04-30T11:20:30Z","2019-01-12T03:43:04Z"
"","14852","Tomcat Session Replication not working with Spring 3.2 [SPR-10219]","**[Mathias Gruschinske](https://jira.spring.io/secure/ViewProfile.jspa?name=dyas)** opened **[SPR-10219](https://jira.spring.io/browse/SPR-10219?redirect=false)** and commented  Description as in the forum.  The spring-web project has it own web-fragment.xml which is not marked as distibutable. So when the tomcat starts and in the web.xml is \ set, the tomcat merge these with the web-frgaments and should one fragment be not distributable the whole application ist not distributable and session replication doesn work.  ---  **Affects:** 3.2 GA, 3.2.1  **Reference URL:** http://forum.springsource.org/showthread.php?134274-Tomcat-Session-Replication-not-working-with-Spring-3-2  **Issue Links:** - #15794 web-application crashing when setting a non-serializable object into session - #16016 Spring 3.2.2+ on GlassFish 3.1 leads to IllegalArgumentException: PWC2788: setAttribute: Non-serializable attribute  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c6cf91193175d540ad632960cb32d01178c2cbd5","closed","type: bug,","spring-projects-issues","2013-01-25T17:19:44Z","2019-01-11T21:35:35Z"
"","15117","FormTag has XSS vulnerability  [SPR-10484]","**[Mateusz Krzeszowiec](https://jira.spring.io/secure/ViewProfile.jspa?name=facedancer)** opened **[SPR-10484](https://jira.spring.io/browse/SPR-10484?redirect=false)** and commented  The form tag is vulnerable to XSS through the path. Although the query string is being escaped before being printed then the path is not escaped at all. This can lead to quite easily exploitable cross site scripting issue, sample attack vector could look like: http://yourwebsite.com/text1/notescaped/text2/?escaped=escaped where notescaped could be: /Company"" onmouseover=prompt(12345689) bad=""/somethinghere  or notescaped="">\alert('pwned');\  The problem can be exploited when you're NOT specifying the action attribute.  The reference URL points out the line in which the path part of the URL (requestUri, at this point without query string yet) could be escaped.   ---  **Affects:** 3.0 GA, 3.1 GA, 3.2 GA  **Reference URL:** https://github.com/SpringSource/spring-framework/blob/3.2.x/spring-webmvc/src/main/java/org/springframework/web/servlet/tags/form/FormTag.java#L426  **Attachments:** - [dom.png](https://jira.spring.io/secure/attachment/21192/dom.png) (_25.92 kB_)  1 votes, 4 watchers","closed","in: web,","spring-projects-issues","2013-04-24T06:34:56Z","2019-01-11T21:11:55Z"
"","14772","error with tomcat 6 and spring 3.2 [SPR-10139]","**[masrawi](https://jira.spring.io/secure/ViewProfile.jspa?name=masrawi)** opened **[SPR-10139](https://jira.spring.io/browse/SPR-10139?redirect=false)** and commented  with tomcat 7 there is no problem. deploying the same war on tomcat 6 with spring 3.2 creates the following error:  java.lang.NullPointerException at java.util.Hashtable.get(Hashtable.java:334) at org.apache.tomcat.util.http.Parameters.getParameterValues(Parameters.java:194) at org.apache.tomcat.util.http.Parameters.getParameter(Parameters.java:239) at org.apache.catalina.connector.Request.getParameter(Request.java:1042) at org.apache.catalina.connector.RequestFacade.getParameter(RequestFacade.java:355) at javax.servlet.ServletRequestWrapper.getParameter(ServletRequestWrapper.java:158) at javax.servlet.ServletRequestWrapper.getParameter(ServletRequestWrapper.java:158) at org.springframework.web.context.request.ServletWebRequest.getParameter(ServletWebRequest.java:113) at org.springframework.web.accept.ParameterContentNegotiationStrategy.getMediaTypeKey(ParameterContentNegotiationStrategy.java:60) at org.springframework.web.accept.AbstractMappingContentNegotiationStrategy.resolveMediaTypes(AbstractMappingContentNegotiationStrategy.java:46) at org.springframework.web.accept.ContentNegotiationManager.resolveMediaTypes(ContentNegotiationManager.java:102) at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.getAcceptableMediaTypes(AbstractMessageConverterMethodProcessor.java:189) at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:114) at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:90) at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.handleReturnValue(RequestResponseBodyMethodProcessor.java:189) at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:69) at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:122) at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:746) at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:687) at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:80) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:925) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:856) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:915) at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:811)  ---  **Affects:** 3.2 GA  **Issue Links:** - #14734 ContentNegotiationManagerFactoryBean does not provide default value for ""parameterName"" as stated in doc","closed","type: bug,","spring-projects-issues","2013-01-03T00:31:49Z","2019-01-11T21:22:21Z"
"","15409","IllegalStateException on call to getOutputStream when using DeferredResult on WebLogic 12c1 [SPR-10782]","**[Marut](https://jira.spring.io/secure/ViewProfile.jspa?name=singh.marut)** opened **[SPR-10782](https://jira.spring.io/browse/SPR-10782?redirect=false)** and commented  We are facing a strange issue while using servlet 3.0 with WebLogic.  We are using DeferredResult provided by Api. Below Code works fine with Tomcat7.  ```java @RequestMapping(value = ""/search/new"", produces = { MediaType.APPLICATION_JSON_VALUE }) public @ResponseBody DeferredResult getOutagesNew(HttpServletRequest httpRequest, HttpServletResponse response) throws IOException {         DeferredResult deferredResult = new DeferredResult();            deferredResult.setResult(""Hello"");         response.setHeader(""Access-Control-Allow-Origin"", ""*"");         return deferredResult; } ```  We get this error with Weblogic latest version  ```  java.lang.IllegalStateException: strict servlet API: cannot call getOutputStream () after getWriter()         at weblogic.servlet.internal.ServletResponseImpl.getOutputStream(Servlet ResponseImpl.java:292)         at javax.servlet.ServletResponseWrapper.getOutputStream(ServletResponseW rapper.java:138)         at javax.servlet.ServletResponseWrapper.getOutputStream(ServletResponseW rapper.java:138)         at org.springframework.security.web.context.SaveContextOnUpdateOrErrorRe sponseWrapper.getOutputStream(SaveContextOnUpdateOrErrorResponseWrapper.java:100 )         at org.springframework.http.server.ServletServerHttpResponse.getBody(Ser vletServerHttpResponse.java:71)         at org.springframework.http.converter.StringHttpMessageConverter.writeIn ternal(StringHttpMessageConverter.java:108)         at org.springframework.http.converter.StringHttpMessageConverter.writeIn ternal(StringHttpMessageConverter.java:42)         at org.springframework.http.converter.AbstractHttpMessageConverter.write (AbstractHttpMessageConverter.java:179)         at org.springframework.web.servlet.mvc.method.annotation.AbstractMessage ConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMeth odProcessor.java:148)         at org.springframework.web.servlet.mvc.method.annotation.AbstractMessage ConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMeth odProcessor.java:90)         at org.springframework.web.servlet.mvc.method.annotation.RequestResponse BodyMethodProcessor.handleReturnValue(RequestResponseBodyMethodProcessor.java:18 9) ```    ---  **Affects:** 3.2.3","closed","in: web,","spring-projects-issues","2013-07-25T05:46:22Z","2019-01-11T22:03:06Z"
"","15135","context:property-placeholder should accept comma-separated list as placeholder value for its location attribute [SPR-10502]","**[Marton Dinnyes](https://jira.spring.io/secure/ViewProfile.jspa?name=vuk)** opened **[SPR-10502](https://jira.spring.io/browse/SPR-10502?redirect=false)** and commented  I can't entirely configure property-placeholder from system property because I can't give comma-separated list of resources.  I'm trying to do like:   I use system property to configure this. It works if I give one location only, like ""classpath:main.properties"", but it does not if I'm trying this: ""classpath:main1.properties,classpath:main2.properties"".  If I use this latter exact value directly in xml configuration it works fine. I guess it resolves comma-separation earlier than placeholders. It should be the other way around.  ---  **Affects:** 3.2.1  1 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2013-04-30T01:43:41Z","2019-01-13T21:03:44Z"
"","15098","CronTrigger (CronSequenceGenerator) not  working as expected [SPR-10465]","**[Martin Suska](https://jira.spring.io/secure/ViewProfile.jspa?name=betlista)** opened **[SPR-10465](https://jira.spring.io/browse/SPR-10465?redirect=false)** and commented  CronSequenceGenerator class JavaDoc referes to standard Unix crontab command, but later in JavaDoc itps written that fields are second, minute, hour, day, month, weekday what is not standard in Unix environment where first field is minute.  Enhanced cron format has 6th field a year - http://www.nncron.ru/help/EN/working/cron-format.htm also.   ---  1 votes, 2 watchers","closed","status: bulk-closed,","spring-projects-issues","2013-04-15T09:34:58Z","2019-01-12T00:24:07Z"
"","15437","org.springframework.http.converter.StringHttpMessageConverter overwrites Accept-Charset by default [SPR-10811]","**[Martin Sandiford](https://jira.spring.io/secure/ViewProfile.jspa?name=msandiford)** opened **[SPR-10811](https://jira.spring.io/browse/SPR-10811?redirect=false)** and commented  `org.springframework.http.converter.StringHttpMessageConverter` always overwrites the `Accept-Charset` header by default, even if it has been set through some other means.  In addition, it overwrites the header with a list of all of the charsets supported by the current JVM (some 165 items for Oracle JVM 1.7.0_09 on Windows), which can result in headers an order of magnitude larger than payload for REST requests.  One minimal fix would be to modify `StringHttpMessageConverter#writeInternal(String, HttpOutputMessage)` to only call `outputMessage.getHeaders().setAcceptCharset(getAcceptedCharsets())` if the header is not currently set.  An additional improvement might be to trim the list of charsets in `StringHttpMessageConverter#availableCharsets` somewhat.  Good candidates to remove, IMO, would be everything starting with ""x-"" or ""ibm"".  Below is a set of headers from a REST request made using `org.springframework.web.client.RestTemplate` and collected using `tcpdump`:  ``` POST /icescrum/ws/p/EXAM1/feature HTTP/1.1 Accept: application/json Content-Type: application/json Accept-Charset: big5, big5-hkscs, euc-jp, euc-kr, gb18030, gb2312, gbk, ibm-thai, ibm00858, ibm01140, ibm01141, ibm01142, ibm01143, ibm01144, ibm01145, ibm01146, ibm01147, ibm01148, ibm01149, ibm037, ibm1026, ibm1047, ibm273, ibm277, ibm278, ibm280, ibm284, ibm285, ibm297, ibm420, ibm424, ibm437, ibm500, ibm775, ibm850, ibm852, ibm855, ibm857, ibm860, ibm861, ibm862, ibm863, ibm864, ibm865, ibm866, ibm868, ibm869, ibm870, ibm871, ibm918, iso-2022-cn, iso-2022-jp, iso-2022-jp-2, iso-2022-kr, iso-8859-1, iso-8859-13, iso-8859-15, iso-8859-2, iso-8859-3, iso-8859-4, iso-8859-5, iso-8859-6, iso-8859-7, iso-8859-8, iso-8859-9, jis_x0201, jis_x0212-1990, koi8-r, koi8-u, shift_jis, tis-620, us-ascii, utf-16, utf-16be, utf-16le, utf-32, utf-32be, utf-32le, utf-8, windows-1250, windows-1251, windows-1252, windows-1253, windows-1254, windows-1255, windows-1256, windows-1257, windows-1258, windows-31j, x-big5-hkscs-2001, x-big5-solaris, x-euc-jp-linux, x-euc-tw, x-eucjp-open, x-ibm1006, x-ibm1025, x-ibm1046, x-ibm1097, x-ibm1098, x-ibm1112, x-ibm1122, x-ibm1123, x-ibm1124, x-ibm1364, x-ibm1381, x-ibm1383, x-ibm33722, x-ibm737, x-ibm833, x-ibm834, x-ibm856, x-ibm874, x-ibm875, x-ibm921, x-ibm922, x-ibm930, x-ibm933, x-ibm935, x-ibm937, x-ibm939, x-ibm942, x-ibm942c, x-ibm943, x-ibm943c, x-ibm948, x-ibm949, x-ibm949c, x-ibm950, x-ibm964, x-ibm970, x-iscii91, x-iso-2022-cn-cns, x-iso-2022-cn-gb, x-iso-8859-11, x-jis0208, x-jisautodetect, x-johab, x-macarabic, x-maccentraleurope, x-maccroatian, x-maccyrillic, x-macdingbat, x-macgreek, x-machebrew, x-maciceland, x-macroman, x-macromania, x-macsymbol, x-macthai, x-macturkish, x-macukraine, x-ms932_0213, x-ms950-hkscs, x-ms950-hkscs-xp, x-mswin-936, x-pck, x-sjis_0213, x-utf-16le-bom, x-utf-32be-bom, x-utf-32le-bom, x-windows-50220, x-windows-50221, x-windows-874, x-windows-949, x-windows-950, x-windows-iso2022jp Content-Length: 186 Host:  Connection: Keep-Alive User-Agent: Apache-HttpClient/4.2.5 (java 1.5) ```  Here is a fairly brute force and ignorance workaround that can be used on a freshly created `org.springframework.web.client.RestTemplate`   - it requires that `Accept-Charset` is set through some other means.  ```java // Special hack so we don't assert that every possible charset is acceptable. for (HttpMessageConverter mc : restTemplate.getMessageConverters()) {   if (mc instanceof StringHttpMessageConverter)   {     StringHttpMessageConverter shmc = (StringHttpMessageConverter)mc;     // We will add this in explicitly.     shmc.setWriteAcceptCharset(false);   } } ```    ---  **Affects:** 3.2.3  1 votes, 2 watchers","closed","in: web,","spring-projects-issues","2013-08-06T15:31:28Z","2019-05-08T13:39:33Z"
"","14981","replace Class.forName calls in ConfigurationClassParser [SPR-10347]","**[Martin Lippert](https://jira.spring.io/secure/ViewProfile.jspa?name=mlippert)** opened **[SPR-10347](https://jira.spring.io/browse/SPR-10347?redirect=false)** and commented  There are calls to Class.forName(..) in ConfigurationClassParser in the method ""processImport"". They cause trouble in the Spring IDE tooling due to classloading conflicts and avoid full component scanning for certain annotations in the IDE.  The calls to Class.forName(..) should be replaced by a Classloader.loadClass(..) call via the classloader of the configured resourceLoader in that class.   ---  **Affects:** 3.1.1","closed","in: core,","spring-projects-issues","2013-03-01T06:22:37Z","2019-01-12T05:27:18Z"
"","14934","HttpStatus valueOf fails for 302 [SPR-10300]","**[Martin Gilday](https://jira.spring.io/secure/ViewProfile.jspa?name=pledge)** opened **[SPR-10300](https://jira.spring.io/browse/SPR-10300?redirect=false)** and commented  The logic of valueOf(int) on HttpStatus fails for 302 as there are two constants with this value - Found and Moved Temporarily. It simply chooses the first it finds.  In this example below, when the server returns 302 - Moved Temporarily the switch statement invokes 'default' as the status code is incorrectly HttpStatus.FOUND.  ``` switch (statusCode) { 	case OK: 		return response.getBody(); 	case MOVED_TEMPORARILY: 		this.log.error(""Authentication failed.""); 		break; 	default: 		this.log.error(""Got unexpected status code: "" + statusCode); } ```    ---  **Affects:** 3.2.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e2e4cbe6b3cb017f7567ddb2f73b2dc9cdf3c9d9","closed","status: declined,","spring-projects-issues","2013-02-14T14:50:21Z","2019-01-12T16:24:22Z"
"","15085","SPEL and Enum variable resolution using wrong cachedExecutor [SPR-10452]","**[Martin Frey](https://jira.spring.io/secure/ViewProfile.jspa?name=mfrey)** opened **[SPR-10452](https://jira.spring.io/browse/SPR-10452?redirect=false)** and commented  The bug is appearing if the Enum used is bound in a variable and the method ""values()"" is called. I'm currently using Thymeleaf as the templateEngine and I'm not fully certain that this is related. Probably it's possible to reproduce in a plain Java test but i had no time yet.  The screenshot shows the issue. - MethodReference$MethodValueRef's target is the enum RiskLevel - The executorToUse is resolved to the Method ActionType.values()  The second screenshot shows the thymeleaf code for the iteration.  ---  **Affects:** 3.2.2  **Attachments:** - [EnumListFrontendCode.jpg](https://jira.spring.io/secure/attachment/21152/EnumListFrontendCode.jpg) (_31.42 kB_) - [WrongTargetEnumInSPEL322.jpg](https://jira.spring.io/secure/attachment/21151/WrongTargetEnumInSPEL322.jpg) (_219.04 kB_)  **Issue Links:** - #15285 Cached MethodExecutor invokes wrong method - #14129 MethodResolver results are cached in SpEL expressions, so changing the context at evaluation time has no effect  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5e6044c45bbfc53be75d43a7a46300320607ea3c, https://github.com/spring-projects/spring-framework/commit/b9d726fb84155332a78ddfcee01345859f06555c","closed","in: core,","spring-projects-issues","2013-04-09T02:44:21Z","2019-01-13T07:00:25Z"
"","14918","Log4jWebConfigurer only uses System properties/environment [SPR-10284]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-10284](https://jira.spring.io/browse/SPR-10284?redirect=false)** and commented  Currently the `Log4jWebConfigurer` uses the `SystemPropertyUtils` to resolve placeholders in the config location. It would be nice if also attributes from the `ServletContext` could be used as a source for placeholder values.  Maybe this is useful in other locations to.    ---  **Affects:** 3.2.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ff15534211dfd9d55896c7ac7651f3d3f2a9839a","closed","type: enhancement,","spring-projects-issues","2013-02-13T00:30:27Z","2013-02-15T04:04:35Z"
"","14809","Document JCache configuration in the cache section [SPR-10176]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-10176](https://jira.spring.io/browse/SPR-10176?redirect=false)** and commented  Currently only the configuration of the SimpleCacheManager and EhCacheCacheManager are documented. Documentation should also contain the JCacheCacheManager configuration documentation. (Section 29.5).   ---  **Affects:** 3.2 GA  **Reference URL:** http://static.springsource.org/spring/docs/3.2.x/spring-framework-reference/html/cache.html#cache-store-configuration","closed","type: documentation,","spring-projects-issues","2013-01-15T04:27:17Z","2015-10-27T11:13:41Z"
"","14697","TaskScheduling auto configuration based on environment [SPR-10064]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-10064](https://jira.spring.io/browse/SPR-10064?redirect=false)** and commented  It would be nice if there would be a feature which detects if we are running in an environment supporting CommonJ or another way of scheduling and configure itself appropriatly. This could be similair to the jta-transaction-manager element in the tx namespace.  It would make it a lot easier to switch between servers (i.e. glassfish and websphere for instance).   ---  **Affects:** 3.1.3","closed","status: bulk-closed,","spring-projects-issues","2012-12-03T06:40:12Z","2019-01-12T02:35:51Z"
"","15049","Seemingly unavoidable @Resource injection when creating bean via @Configuration class [SPR-10416]","**[Mark Ingram](https://jira.spring.io/secure/ViewProfile.jspa?name=markdingram)** opened **[SPR-10416](https://jira.spring.io/browse/SPR-10416?redirect=false)** and commented  Properties explicitly set in a Bean created via a `@Configuration` class are overwritten by the CommonAnnotationBeanPostProcessor.  This seems different to the behaviour seen when configuring in XML where explicitly set properties aren't overwritten.  Failing test here:  ```   package spring;  import junit.framework.Assert; import org.junit.Test; import org.junit.runner.RunWith; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.test.context.ContextConfiguration; import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;  import javax.annotation.Resource;  @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(classes = UnavoidableResourceInjectionTest.TestConfig.class) public class UnavoidableResourceInjectionTest {      @Autowired     BeanA beanA;      @Test     public void checkDependencyAsExpected() {         Assert.assertNotNull(beanA);         //Test fails with ComparisonFailure, actual value: one         Assert.assertEquals(""two"", beanA.dependency.id);     }       @Configuration     public static class TestConfig {         @Bean         BeanB beanBInContext() {             return new BeanB(""one"");         }          @Bean         BeanA oneA() {             BeanA bean = new BeanA();             //explicitly inject different dependency, should not be overridden             bean.setDependency(new BeanB(""two""));             return bean;         }     }      public static class BeanA {         private BeanB dependency;          @Resource         public void setDependency(BeanB dependency) {             this.dependency = dependency;         }     }      public static class BeanB {         private final String id;          public BeanB(String id) {             this.id = id;         }     } }  ```  Test passes when configuration is done via XML:  ```xml                                                                                                ```    ---  **Affects:** 3.1.2, 3.2.2","closed","in: core,","spring-projects-issues","2013-03-25T09:43:31Z","2019-01-12T16:24:09Z"
"","14795","Consider bridge methods in SpEL properties [SPR-10162]","**[Marian Gallo](https://jira.spring.io/secure/ViewProfile.jspa?name=mgallo)** opened **[SPR-10162](https://jira.spring.io/browse/SPR-10162?redirect=false)** and commented  I have found a problem with evaluating of object property values used within SpEL expressions in version 3.2. Expressions were working in older versions (have tried 3.0.6, 3.1.3).  I made an analysis and have found a reason. There was done a change in a class org.springframework.expression.spel.support.ReflectivePropertyAccessor in version 3.2. There was added a subcondition !method.isBridge() in method findGetterForProperty(String propertyName, Class clazz, boolean mustBeStatic) which hides desired class getter for a property which shall be used in an expression during evaluation.  I checked that the problematic getter is a bridge method. A class which I would like to access via a property has a deep inheritance tree - but there is no class design irregularity.  Is there a reason why this behaviour was changed?  It is a blocking issue for us to migrate to Spring 3.2.  ---  **Affects:** 3.2 GA  **Issue Links:** - #14628 ReflectivePropertyAccessor should not consider bridge methods - #14629 Backport ""ReflectivePropertyAccessor should not consider bridge methods""  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5ae706ee10ed06d5a38077c470d82bae4abc41fe, https://github.com/spring-projects/spring-framework/commit/fce7adc400d4b519da40d361a1b1f62fc58e185a  **Backported to:** [3.1.4](https://github.com/spring-projects/spring-framework/milestone/83?closed=1)","closed","in: core,","spring-projects-issues","2013-01-11T05:23:54Z","2019-01-11T21:21:36Z"
"","15433","NoSuchMethodError: org.springframework.util.MultiValueMap.getOrDefault(Ljava/lang/Object;Ljava/lang/Object;) [SPR-10807]","**[Marek Szalik](https://jira.spring.io/secure/ViewProfile.jspa?name=szalik)** opened **[SPR-10807](https://jira.spring.io/browse/SPR-10807?redirect=false)** and commented  There is a method org.springframework.cache.interceptor.CacheOperationContexts#get(Class","closed","in: core,","spring-projects-issues","2013-08-05T13:51:49Z","2013-08-29T16:20:48Z"
"","14732","Implement support of Jackson2 for MappingJacksonMessageConverter [SPR-10099]","**[Marcin Kuthan](https://jira.spring.io/secure/ViewProfile.jspa?name=mkuthan)** opened **[SPR-10099](https://jira.spring.io/browse/SPR-10099?redirect=false)** and commented  Spring 3.2 brings support for Jackson2, but MappingJacksonMessageConverter still depends on Jackson 1.x.    ---  **Affects:** 3.2 GA  **Backported to:** [3.1.4](https://github.com/spring-projects/spring-framework/milestone/83?closed=1)","closed","type: enhancement,","spring-projects-issues","2012-12-16T02:58:46Z","2012-12-19T02:48:15Z"
"","15486","Provide better intercepting model for controllers returning @ResponseBody [SPR-10859]","**[Marcel Overdijk](https://jira.spring.io/secure/ViewProfile.jspa?name=marceloverdijk)** opened **[SPR-10859](https://jira.spring.io/browse/SPR-10859?redirect=false)** and commented  I'm using Spring as rest server where all controller actions return `@ResponseBody` annotated results. Just like Twitter I'm implementing 'suppress_response_codes' functionality.  Normally I will return json response like:  |HTTP Status|Body| |:---|:---| |200|{ ""first_name"": ""Marcel"", ""last_name"": ""Overdijk"" }| |400|{ ""error"": ""the error message"" }|  But with a `suppress_response_codes=true` query param in the request it is:  |HTTP Status|Body| |:---|:---| |200|{ ""status"": 200, ""data"": { ""first_name"": ""Marcel"", ""last_name"": ""Overdijk"" } }| |200|{ ""status"": 400, ""data"": { ""error"": ""the error message"" } }|  Implementing a HandlerInterceptor does not seem the best fit for intercepting controller actions returning `@ResponseBody` responsed as the converter seems to have already send the data in the postHandle.  There should be decent intercepting model for `@ResponseBody` where it's possible to retrieve the original object being returned by the controller actions.  ---  **Affects:** 3.2.4  **Issue Links:** - #14532 Add JSONP support to MappingJackson2MessageConverter (_**""is depended on by""**_) - #15000 Consider adding a post-processing hook for the return value of `@RequestMapping` methods (_**""is duplicated by""**_) - #16382 MockMvc ignores HTTP status code overridden by filter - #11815 Integrate Jackson `@JsonView` - #13864 Response is committed before Interceptor postHandle invoked (_**""supersedes""**_) - #12553 Make HandlerInterceptor play nice with `@ResponseBody` (_**""supersedes""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c9d0ebd730953ef693edf275b57cfeeb9bf15af9, https://github.com/spring-projects/spring-framework/commit/96b18c8dc22c0c57605a594b21ceec84ec16ee37, https://github.com/spring-projects/spring-framework/commit/2655c507e041fb3c245d550b33ba7f1b21fc341e  6 votes, 12 watchers","closed","type: enhancement,","spring-projects-issues","2013-08-26T06:11:42Z","2019-01-13T06:58:26Z"
"","15127","spring-web not published with Eclipse 4.2, WAS 7.0 and mvn 3 [SPR-10494]","**[Marc Schmid](https://jira.spring.io/secure/ViewProfile.jspa?name=faetzminator)** opened **[SPR-10494](https://jira.spring.io/browse/SPR-10494?redirect=false)** and commented  I'm having same problem as described in StackOverflow link even if I'm not the author of the question. I try to publish a Spring 3.2.x project with Eclipse 4.2 to a Websphere AS 7.0 (via IBM WDT 8.5.x). Using Maven 3.0.4, tried with both eclipse:eclipse and m2eclipse plugin. spring-web-*.jar gets not published on WAS but it is still there as an artifact when packaging a WAR via mvn. In my company it's only reproducable with this combination. If we use Tomcat instead of WAS, RAD instead of Eclipse or v3.1.x instead of v3.2.x (which was previousely the case) everything works!   ---  **Affects:** 3.2 GA, 3.2.1, 3.2.2  **Reference URL:** http://stackoverflow.com/questions/15174774/spring-web-maven-dependency-not-being-published-with-eclipse  6 votes, 10 watchers","closed","in: web,","spring-projects-issues","2013-04-25T23:45:02Z","2019-01-11T21:11:11Z"
"","15345","BeanConfigurerSupport should Warn about null beanFactory [SPR-10717]","**[marc schipperheyn](https://jira.spring.io/secure/ViewProfile.jspa?name=mschipperheyn)** opened **[SPR-10717](https://jira.spring.io/browse/SPR-10717?redirect=false)** and commented  BeanConfigurerSupport has a debug message when a bean is being configured and beanFactory is null. I suggest that this should be a warn message. I had a hard time tracing an aspect wiring problem to a null beanFactory and a warn message would have helped here.   ---  **Affects:** 3.1.4","closed","status: bulk-closed,","spring-projects-issues","2013-07-03T05:40:23Z","2019-01-12T00:23:04Z"
"","14948","Allow adding resources to ReloadableResourceBundleMessageSource [SPR-10314]","**[marc schipperheyn](https://jira.spring.io/secure/ViewProfile.jspa?name=mschipperheyn)** opened **[SPR-10314](https://jira.spring.io/browse/SPR-10314?redirect=false)** and commented  When you have an application with a fixed core and modular add-ons, it is nice to have your core translation fixed and load the modular translation as needed. You can do this through an `applicationContext`, but it would be nicer if you could ""add to"" the resource bundles, e.g. through an `@Configuration` class.  Right now, the `ReloadableResourceBundleMessageSource` only allows you to ""set"" the `basenames`, overwriting any existing `basenames` without the ability to read them. So, this forces you ""set them in a central place"". It makes sense to me to allow one to `addBasenames` instead of `setBasenames`, with the result being that unique `basenames` are added to the existing array.  ---  **Affects:** 3.1.4  **Issue Links:** - #10149 ReloadableResourceBundleMessageSource performance issue when using many resource files - #19152 Method getMergedProperties in ReloadableResourceBundleMessageSource does not set fileTimestamp","closed","type: enhancement,","spring-projects-issues","2013-02-19T08:15:18Z","2019-01-11T21:05:50Z"
"","14854","Regression Hibernate Search  [SPR-10221]","**[marc schipperheyn](https://jira.spring.io/secure/ViewProfile.jspa?name=mschipperheyn)** opened **[SPR-10221](https://jira.spring.io/browse/SPR-10221?redirect=false)** and commented  I have a weird regression on Hibernate Search (4.2). This occurs in the upgrade from 3.1.2 to 3.1.3. I ran into it upgrading from 3.1.1 to 3.1.4 and traced it down to 3.1.3.  The error message is  ``` Caused by: org.hibernate.search.SearchException: Found invalid @IndexedEmbedded->paths configured on class nl.msw.project.model.Offer, member address: city.id,country.id,barrio.id 	at org.hibernate.search.engine.spi.AbstractDocumentBuilder.validateAllPathsEncountered(AbstractDocumentBuilder.java:901) 	at org.hibernate.search.engine.spi.AbstractDocumentBuilder.checkForIndexedEmbedded(AbstractDocumentBuilder.java:880) 	at org.hibernate.search.engine.spi.AbstractDocumentBuilder.initializeMemberLevelAnnotations(AbstractDocumentBuilder.java:489) 	at org.hibernate.search.engine.spi.AbstractDocumentBuilder.initializeClass(AbstractDocumentBuilder.java:391) 	at org.hibernate.search.engine.spi.AbstractDocumentBuilder.(AbstractDocumentBuilder.java:174) 	at org.hibernate.search.engine.spi.DocumentBuilderContainedEntity.(DocumentBuilderContainedEntity.java:60) 	at org.hibernate.search.spi.SearchFactoryBuilder.initDocumentBuilders(SearchFactoryBuilder.java:396) 	at org.hibernate.search.spi.SearchFactoryBuilder.buildNewSearchFactory(SearchFactoryBuilder.java:222) 	at org.hibernate.search.spi.SearchFactoryBuilder.buildSearchFactory(SearchFactoryBuilder.java:146) 	at org.hibernate.search.event.impl.FullTextIndexEventListener.initialize(FullTextIndexEventListener.java:130) 	at org.hibernate.search.hcore.impl.HibernateSearchIntegrator.integrate(HibernateSearchIntegrator.java:83) at org.hibernate.internal.SessionFactoryImpl.(SessionFactoryImpl.java:303) 	at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1750) 	at org.hibernate.ejb.EntityManagerFactoryImpl.(EntityManagerFactoryImpl.java:94) 	at org.hibernate.ejb.Ejb3Configuration.buildEntityManagerFactory(Ejb3Configuration.java:905) 	at org.hibernate.ejb.Ejb3Configuration.buildEntityManagerFactory(Ejb3Configuration.java:890) 	at org.hibernate.ejb.HibernatePersistence.createContainerEntityManagerFactory(HibernatePersistence.java:74) 	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:287) 	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:310) ```  I haven't been able to trace this to its origin.   ---  **Affects:** 3.1.3, 3.1.4  1 votes, 6 watchers","closed","status: invalid,","spring-projects-issues","2013-01-27T06:43:05Z","2019-01-12T05:27:32Z"
"","15499","Mybatis MapperScannerConfigurer do not work with JavaConfig. [SPR-10872]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-10872](https://jira.spring.io/browse/SPR-10872?redirect=false)** and commented  Mybatis MapperScannerConfigurer do not work with JavaConfig....  Thank You.   ---  **Affects:** 3.2.3  **Reference URL:** http://forum.springsource.org/showthread.php?137639-Mybatis-MapperScannerConfigurer-do-not-work-with-JavaConfig","closed","status: bulk-closed,","spring-projects-issues","2013-08-28T07:23:45Z","2019-01-12T02:32:33Z"
"","15157","How configure PersistenceExceptionTranslationPostProcessor for JavaConfig... [SPR-10526]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-10526](https://jira.spring.io/browse/SPR-10526?redirect=false)** and commented  How configure PersistenceExceptionTranslationPostProcessor for Spring JavaConfig without `@Repository` annotation... and for a Spring application configured only through XML (none annotations)  The boss not want none Spring annotation in the Java Classes.... only configuration available for XML or JavaConfig (Where we can have annotations `@Autowired`, `@Configure` and `@Bean`....)    ---  **Affects:** 3.2.2  **Reference URL:** http://forum.springsource.org/showthread.php?137061-How-configure-PersistenceExceptionTranslationPostProcessor-for-JavaConfig","closed","status: bulk-closed,","spring-projects-issues","2013-05-05T19:02:52Z","2019-01-12T03:42:40Z"
"","15156","How configure aop:pointcut, aop:advisor, tx:advice into JavaConfig... [SPR-10525]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-10525](https://jira.spring.io/browse/SPR-10525?redirect=false)** and commented  How configure aop:pointcut, aop:advisor, tx:advice into JavaConfig? It with the purpose to do a complete migration from XML to JavaConfig..   ---  **Affects:** 3.2.2  **Reference URL:** http://forum.springsource.org/showthread.php?137054-How-configure-aop-pointcut-aop-advisor-tx-advice-into-JavaConfig","closed","status: bulk-closed,","spring-projects-issues","2013-05-05T07:54:56Z","2019-01-12T03:42:43Z"
"","15155","How Initialize a not embedded database with JavaConfig? (jdbc:initialize-database in JavaConfig) [SPR-10524]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-10524](https://jira.spring.io/browse/SPR-10524?redirect=false)** and commented  How Initialize a not embedded database with JavaConfig? (jdbc:initialize-database in JavaConfig)  It with the purpose of do a complete migration of XML to JavaConfig.   ---  **Affects:** 3.2.2  **Reference URL:** http://forum.springsource.org/showthread.php?136937-How-Initialize-a-not-embedded-database-with-JavaConfig","closed","status: bulk-closed,","spring-projects-issues","2013-05-05T07:51:29Z","2019-01-12T03:42:46Z"
"","15154","How destroy-method=""close"" on JavaConfig? [SPR-10523]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-10523](https://jira.spring.io/browse/SPR-10523?redirect=false)** and commented  Just to do a complete migration from XML to JavaConfig I did a research on Spring Reference Documentation.. but no results about How represent destroy-method=""close"" on JavaConfig? It when a DataSource is configured.  ---  **Affects:** 3.2.2  **Reference URL:** http://forum.springsource.org/showthread.php?136936-How-destroy-method-quot-close-quot-on-JavaConfig  **Issue Links:** - #17139 Add note to reference material about difference between XML destroy-method and `@Bean` destroyMethod behavior (_**""is duplicated by""**_)","closed","status: duplicate,","spring-projects-issues","2013-05-05T07:48:13Z","2019-01-13T07:00:09Z"
"","15153","Improve a little more the documentation about @Autowired + @Qualifier + JavaConfig [SPR-10522]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-10522](https://jira.spring.io/browse/SPR-10522?redirect=false)** and commented  Just to improve the documentation about `@Autowired` + `@Qualifier` + JavaConfig Pls read my post..  Thank You    ---  **Affects:** 3.2.2  **Reference URL:** http://forum.springsource.org/showthread.php?136798-Autowired-Qualifier-JavaConfig-confusion","closed","status: bulk-closed,","spring-projects-issues","2013-05-05T07:44:16Z","2019-01-12T03:42:49Z"
"","15152","How @PropertySource can read multiple properties files with * wildcard? [SPR-10521]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-10521](https://jira.spring.io/browse/SPR-10521?redirect=false)** and commented  How `@PropertySource` can read multiple properties files with * wildcard?   ---  **Affects:** 3.2.2  **Reference URL:** http://forum.springsource.org/showthread.php?136933-How-To-PropertySource-reading-multiple-properties-files","closed","status: bulk-closed,","spring-projects-issues","2013-05-05T07:40:56Z","2019-01-12T03:42:52Z"
"","15151","Possible bug API & Documentation: About EmbeddedDatabase close method... [SPR-10520]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-10520](https://jira.spring.io/browse/SPR-10520?redirect=false)** and commented  The EmbeddedDatabase's close method arise a not expected behaviour   ---  **Affects:** 3.2.2  **Reference URL:** http://forum.springsource.org/showthread.php?136907-About-EmbeddedDatabase-close-method","closed","status: bulk-closed,","spring-projects-issues","2013-05-05T07:38:28Z","2019-01-12T03:42:54Z"
"","15302","DefaultSingletonBeanRegistry::getSingleton(String beanName) attempts to create bean when it shouldn't [SPR-10674]","**[manny veloso](https://jira.spring.io/secure/ViewProfile.jspa?name=mannyv)** opened **[SPR-10674](https://jira.spring.io/browse/SPR-10674?redirect=false)** and commented  According to the docs, getSingleton(String beanName) is not supposed to attempt to create the singleton if it doesn't exist.  ""Only checks already instantiated singletons; does not return an Object for singleton bean definitions which have not been instantiated yet.""  However, the code calls getSingleton(beanName, true). Calling getSingleton(beanName, true) attempts to create the bean if not found in the registry.  Note that a quick search through the spring sources show that the usage of getSingleton(String beanName) is consistent with the documentation ie: code that uses getSingleton(beanName) attempts to create the bean if null is returned from the function. In addition, one other use checks the existence of the bean in the registry before trying to retriev eit.  ---  **Affects:** 3.1.4, 3.2.3  **Issue Links:** - #14452 Non-singleton beans performance issue","closed","status: invalid,","spring-projects-issues","2013-06-21T16:15:47Z","2019-01-12T05:26:51Z"
"","14770","FactoryBean, Question  [SPR-10137]","**[Manfred Quasten](https://jira.spring.io/secure/ViewProfile.jspa?name=mquasten)** opened **[SPR-10137](https://jira.spring.io/browse/SPR-10137?redirect=false)** and commented  As I understood, FactoryBean is only useable for Prototype or Singleton Scope.  What is about other beans, session, request or customerScopes?  I have create a proxyFactory to create setters and getters for domain objects and want  that the beans will be managed by spring.  In JSF I can use the SpringELResolver, to use springBeans. The idea was, to create the proxies with factoryBean. The targetClass of the web models can be configered in springs applicationContext. It could be so nice, but I do not believe, that FactroyBean can do this job. All what I've read didn't make hope ...  What is the concept behind this FactoryBean? Why is it only be useable for Singeltons and Prototypes? Has it been forgotten to support the other scopes? At the beginning only singelton and Prototype was supported in spring, as I know.  Ok it can be possible to use some hacks using RequestContextHolder to make it running, but I don't like doing it, becuase it is trial and error ...  What is the way to create beans in other scopes? How can I plant  my proxies to the beanfactory. JSF is a way, but managed beans from JSF don't support autowiring, and I do not want to use it.  May be it is an idea to use the maps from jsf (request,session,view) to put the beans in and return it from there, than it works, only for jsf, but it is simple to understand ...  if( ! facesContext.allMaps.contains(keyFromClass(targetClass)) ) { allMaps.put(keyFromClass(targetClass),proxyFactory.create(targetClass.newInstance())) }  return  allMaps.get(keyFromClass(targetClass));  I think supporting all scopes by factoryBean would be very nice or.  For my understanding, it  would  encapsulate the complete technical shit and it will be the only way to make it independend from used environment ...   So it can be an improvement and I Think it can be great to integrate Spring with Webframeworks.    --- No further details from [SPR-10137](https://jira.spring.io/browse/SPR-10137?redirect=false)","closed","status: invalid,","spring-projects-issues","2012-12-31T11:16:25Z","2019-01-12T05:27:38Z"
"","14715","tag not working with @Autowired and @Qualifier [SPR-10082]","**[Mandar Chatufale](https://jira.spring.io/secure/ViewProfile.jspa?name=mandarchatufale)** opened **[SPR-10082](https://jira.spring.io/browse/SPR-10082?redirect=false)** and commented  I have created a small project which has Spring-3.0.5 and Spring MVC in it. Following is my context hierarchy  ParentContext WebContext Spring-mvc context.  Webcontext is parent of springmvc context. Parent context is parent of webcontext.  Now i have defined a singleton spring bean in my parent context.Created a alias for the same in my webcontext. I have a spring mvc controller in my web layer.  I have injected the alias of singleton spring bean in my controller. Now while starting my server i get error, `@Autowired` and `@Qualifier` is not able to inject the alias bean   --- No further details from [SPR-10082](https://jira.spring.io/browse/SPR-10082?redirect=false)","closed","status: invalid,","spring-projects-issues","2012-12-07T02:00:15Z","2019-01-12T05:27:41Z"
"","15230","Migrating from Hibernate 3 to 4.2.1 with Spring integration - org.hibernate.TransactionException: Could not register synchronization for container transaction [SPR-10601]","**[Magnus Andersson](https://jira.spring.io/secure/ViewProfile.jspa?name=amange)** opened **[SPR-10601](https://jira.spring.io/browse/SPR-10601?redirect=false)** and commented  We're trying to migrate our Spring 3.1, Hibernate 3.3 application to use Hibernate 4.2.1 instead.  Tried following the guidelines at http://koenserneels.blogspot.se/2012/05/migrating-from-hibernate-3-to-4-with.html  ...but am getting the error below:  ``` Caused by: org.springframework.transaction.CannotCreateTransactionException: Could not open Hibernate Session for transaction; nested exception is org.hibernate.TransactionException: Could not register synchronization for container transaction 	at org.springframework.orm.hibernate4.HibernateTransactionManager.doBegin(HibernateTransactionManager.java:428) ```  How can this be fixed? Having the following related settings for hibernate:  ``` hibernate.transaction.jta.platform=org.hibernate.service.jta.platform.internal.SunOneJtaPlatform hibernate.transaction.factory_class=org.hibernate.transaction.CMTTransactionFactory hibernate.current_session_context_class=jta ```  And Spring config (related parts cut pasted):  ```xml               ```  /Magnus   --- No further details from [SPR-10601](https://jira.spring.io/browse/SPR-10601?redirect=false)","closed","status: invalid,","spring-projects-issues","2013-05-29T04:36:32Z","2019-01-12T05:26:55Z"
"","15456","Scheduled tasks seem to run twice (Not in a Web environment) [SPR-10830]","**[Macias De La Rosa Jesus Gerardo](https://jira.spring.io/secure/ViewProfile.jspa?name=jesmac)** opened **[SPR-10830](https://jira.spring.io/browse/SPR-10830?redirect=false)** and commented  The problem is, using `@Scheduled`(cron = ""${cron.expression}"") run twice.  I am using setters variables ( or variables with `@Autowired`) that are Datasources. One time my setters variables are null, the other time these variables ar not null!  In the Main Program I only use:  ---  public class MainImport {      private static ClassPathXmlApplicationContext classPathXmlApplicationContext;          public static void main(String[] args) throws InterruptedException {     	classPathXmlApplicationContext = new ClassPathXmlApplicationContext(""/config/springJob.xml"");     }  }  In SpringJob.xml:  ---                                                                         Now in In JobMapping:  ---  public void setOracleDatasource( DataSourceOracle dsOracle) { this.dsOracle = dsOracle; }  `@Scheduled`(cron = ""${cron.expression}"") public void executeJob() { List\ lPartners = null;      	System.out.println(""execute() --> Executing Job "");     	if ( dsOracle == null ) {     		System.out.println(""FIRST TIME --> "" + new Date() + "" ... Oracle Connection is = null "");     	} else {             System.out.println(""SECOND TIME --> "" + new Date() + "" ... DATOS = "" + dsOracle.getTestString());           callMathod(dsOracle);     	}     }  Notice that cron.expression is configured to run each 30 seconds. and my output shows as:  SECOND TIME Tue Aug 13 10:51:30 CEST 2013 ... DATOS = oracle.jdbc.OracleDriver, jdbc:oracle:thin:`@139`.X.Y.Z:1001:MYDB, MyUser, MyPassword FIRST TIME --> Tue Aug 13 10:51:30 CEST 2013 ... Oracle Connection is = null  This is not a Web Application, I don't have Tomcat or something similar. I am using Windows´7, 64 Bits, Java 7. Is there a similar problem with this environment?  ---  **Affects:** 3.2.3","closed","in: core,","spring-projects-issues","2013-08-13T02:33:52Z","2019-01-13T06:58:32Z"
"","15335","Allow nonstandard HTTP methods in RestTemplate [SPR-10707]","**[M. Justin](https://jira.spring.io/secure/ViewProfile.jspa?name=mjustin)** opened **[SPR-10707](https://jira.spring.io/browse/SPR-10707?redirect=false)** and commented  I would like to be able to use RestTemplate with a nonstandard HTTP method that's not found in the list of 8 provided in the HttpMethod enum.  Specifically, I would like to do a [""PURGE"" request against a Varnish cache](https://www.varnish-cache.org/docs/3.0/tutorial/purging.html).  Such an enhancement would also allow calling other APIs with nonstandard HTTP methods, such as the various [WebDAV methods](http://en.wikipedia.org/wiki/WebDAV#History).  Looking at the spring-web source code, it looks like there is currently no way of working around this while still using the library, since the HttpMethod is used exclusively throughout the code except where converted to a name to interface with the underlying HTTP library (e.g. SimpleClientHttpRequestFactory).  I would like to see a version of the exchange/execute API that takes in either an arbitrary status String, or have an interface that HttpStatus implements that could be provided in cases like this.  For a concrete example of what I'm referring to (but applied to status codes rather than HTTP methods), see [Status](http://docs.oracle.com/javaee/6/api/javax/ws/rs/core/Response.Status.html) and [StatusType](http://docs.oracle.com/javaee/6/api/javax/ws/rs/core/Response.StatusType.html) in JAX-RS.   ---  3 votes, 7 watchers","closed","status: declined,","spring-projects-issues","2013-06-30T16:40:52Z","2020-04-02T18:49:43Z"
"","14745","spring-asm 3.2.0.RELEASE artifact not published to Maven along with the other releases [SPR-10112]","**[Lyor Goldstein](https://jira.spring.io/secure/ViewProfile.jspa?name=lgoldstein)** opened **[SPR-10112](https://jira.spring.io/browse/SPR-10112?redirect=false)** and commented  The artifact does not appear in any known Maven repository (including ibiblio and the internal Vmware one...). This makes transition to the newly released version impossible.  ---  **Affects:** 3.2 GA  **Issue Links:** - #14767 Spring Core and Spring ASM discrepancy (_**""is duplicated by""**_)","closed","status: declined,","spring-projects-issues","2012-12-20T02:20:27Z","2019-01-12T16:24:41Z"
"","15281","SpringMVC send the wrong request to the controller. [SPR-10653]","**[Luo Chuan](https://jira.spring.io/secure/ViewProfile.jspa?name=rainisic)** opened **[SPR-10653](https://jira.spring.io/browse/SPR-10653?redirect=false)** and commented  The servlet config as follow: \ \spring-mvc\ \/*\ \  Controller code as follow: `@RequestMapping`(""/test"") `@ResponseBody` public Object test(HttpServletRequest request) { return ""true""; }  HTTP Request in browser as follow: http://localhost:8080/test.html  I think the result should be 404, but in fact, it show me ""true"".  In REST, everything is a resource. I think the resource I request is ""/test.html"", not ""/test"". So it should be 404.  So I think this is a bug. Thanks.   ---  **Affects:** 3.1.2, 3.2.3","closed","status: declined,","spring-projects-issues","2013-06-12T18:50:55Z","2019-01-12T16:23:57Z"
"","15196","Configurable JSON prefix on MappingJackson2JsonView and MappingJacksonJsonView [SPR-10567]","**[Luke Biddell](https://jira.spring.io/secure/ViewProfile.jspa?name=biddster)** opened **[SPR-10567](https://jira.spring.io/browse/SPR-10567?redirect=false)** and commented  Spring MVC currently prevents JSON hijacking by prefixing the response with ""{} &&"" if the prefixJSON bean property is set.  Could we make the actual prefix a configurable bean property?  AngularJS, for example, has built in support for this prefix "")]}',"".  See the docs here http://docs.angularjs.org/api/ng.$http.  This would allow us to employ other common prefixes such as ""while(1);"" and so forth.   ---  **Affects:** 3.2 GA","closed","type: enhancement,","spring-projects-issues","2013-05-15T07:53:49Z","2013-05-15T15:09:07Z"
"","15343","method demarcated with @Async isn't executed when precompiled [SPR-10715]","**[Lukasz Rozek](https://jira.spring.io/secure/ViewProfile.jspa?name=lucas_)** opened **[SPR-10715](https://jira.spring.io/browse/SPR-10715?redirect=false)** and commented  when method is annotated with `@Async` and class is precompiled. method isn't executed at all.  ---  **Affects:** 3.2.2, 3.2.3  **Attachments:** - [SPR-10715.zip](https://jira.spring.io/secure/attachment/21269/SPR-10715.zip) (_5.50 kB_)  **Issue Links:** - #15264 Invocation of `@Async` service fails - #15125 Async does not work anymore when switching from 3.2 to 3.2.2","closed","in: core,","spring-projects-issues","2013-07-02T06:19:03Z","2019-01-13T06:59:05Z"
"","14822","Fix castor website  [SPR-10189]","**[Luca Preziati](https://jira.spring.io/secure/ViewProfile.jspa?name=luca.preziati)** opened **[SPR-10189](https://jira.spring.io/browse/SPR-10189?redirect=false)** and commented  The links to castor site are castor.org, but the site I think it's moved to castor.codehaus.org.  Fix docmentantion link. The castor.codehaur.org site is not all fixed. Also castor site have many link broken, I just have a bug on its jira.   ---  **Backported to:** [3.1.4](https://github.com/spring-projects/spring-framework/milestone/83?closed=1)","closed","type: documentation,","spring-projects-issues","2013-01-18T02:30:44Z","2013-01-21T02:33:28Z"
"","15227","DefaultLifecycleProcessor auto start lazy-init bean [SPR-10598]","**[Liu, Yinwei David](https://jira.spring.io/secure/ViewProfile.jspa?name=veaven)** opened **[SPR-10598](https://jira.spring.io/browse/SPR-10598?redirect=false)** and commented  Looks like SmartLifecycle beans get created inDefaultLifecycleProcessor.getLifecycleBeans()  whether they are lazy or not.  See method comment and call stack below.      /**     * Retrieve all applicable Lifecycle beans: all singletons that have already been created,     * as well as all SmartLifecycle beans (even if they are marked as lazy-init).     * @return the Map of applicable beans, with bean names as keys and bean instances as values     */     protected Map getLifecycleBeans() {           Map beans = new LinkedHashMap();           String[] beanNames = this.beanFactory.getBeanNamesForType(Lifecycle.class, false, false);           for (String beanName : beanNames) {                 String beanNameToRegister = BeanFactoryUtils.transformedBeanName(beanName);                 boolean isFactoryBean = this.beanFactory.isFactoryBean(beanNameToRegister);                 String beanNameToCheck = (isFactoryBean ? BeanFactory.FACTORY_BEAN_PREFIX + beanName : beanName);                 if ((this.beanFactory.containsSingleton(beanNameToRegister) &&                             (!isFactoryBean || Lifecycle.class.isAssignableFrom(this.beanFactory.getType(beanNameToCheck)))) ||                             SmartLifecycle.class.isAssignableFrom(this.beanFactory.getType(beanNameToCheck))) {                       Lifecycle bean = this.beanFactory.getBean(beanNameToCheck, Lifecycle.class);                       if (bean != this) {                             beans.put(beanNameToRegister, bean);                       }                 }           }           return beans;     }    ---  **Affects:** 3.1 GA","closed","status: bulk-closed,","spring-projects-issues","2013-05-28T22:25:27Z","2019-01-12T03:42:05Z"
"","14877","Example in URI Template Patterns with Regular Expressions [SPR-10244]","**[LI YUNG FUNG](https://jira.spring.io/secure/ViewProfile.jspa?name=micahli123)** opened **[SPR-10244](https://jira.spring.io/browse/SPR-10244?redirect=false)** and commented  There is bug in the example in URI Template Patterns with Regular Expressions. I hope I am correct.  http://static.springsource.org/spring/docs/3.2.x/spring-framework-reference/html/mvc.html#mvc-introduction  Wrong:  ```java @RequestMapping(""/spring-web/{symbolicName:[a-z-]+}-{version:\d\.\d\.\d}.{extension:\.[a-z]}"") ```  Right:  ```java @RequestMapping(""/spring-web/{symbolicName:[a-z-]+}{version:\\d\\.\\d\\.\\d}{extension:\\.[a-z]+}"") ```    ---  **Affects:** 3.2.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9320bf131622c66edeb2adb0f3d9f9caad5bae57, https://github.com/spring-projects/spring-framework/commit/7e2022b9a7f342ffcc36a0bd99d3a9909abdb2d1","closed","type: documentation,","spring-projects-issues","2013-01-30T18:40:08Z","2013-02-19T18:19:07Z"
"","15211","component-scan of class in separate jar causes repeated tomcat redeply to fail in its attempt to remove the jar [SPR-10582]","**[Lennart Enström](https://jira.spring.io/secure/ViewProfile.jspa?name=leen111)** opened **[SPR-10582](https://jira.spring.io/browse/SPR-10582?redirect=false)** and commented  Se Reference URL for code. Note that there are technically 2 maven projects  - SPR-10582-referenced (jar) contains class org.springframework.issues.Foo. Foo need not have any references to spring.  - #15211 (war) has:    1. a maven dependency to SPR-10582-referenced   2.     \  - Upon redeployment of war, tomcat is unable to remove the file SPR-10582-referenced.....jar causing redeployment to fail.  - Removing component-scan makes redeployment work.  Steps to reproduce: The code contains two projects: SPR-10582-referenced and #15211 1. In dir SPR-10582-referenced: mvn install 2. In dir #15211: mvn package 3. Copy #15211....war to tomcat webapps dir 4. Undeploy (using e.g. tomcat manager) 5. Copy again  Further notes: - I have not executed any profiling-tool to see what is leaking or holding the reference to SPR-10582-referenced. - Tomcat 7.0.26 on Windows7  I have not found any workaround yet. Tried: -    without success - Also tried to declare Foo and Bar as `@Component`  ---  **Affects:** 3.2.2  **Reference URL:** https://github.com/SpringSource/spring-framework-issues","closed","status: bulk-closed,","spring-projects-issues","2013-05-24T02:53:36Z","2019-01-12T03:42:16Z"
"","15305","Include all SQL statements in batch fail exception [SPR-10677]","**[Lefebvre](https://jira.spring.io/secure/ViewProfile.jspa?name=jflefebvre)** opened **[SPR-10677](https://jira.spring.io/browse/SPR-10677?redirect=false)** and commented  When use `jdbcTemplate.batchUpdate(String[] scripts)` if the update breaks an `UncategorizedSQLException` is thrown.  The `UncategorizedSQLException.getSql()` does not contains the sql that generate the error but the first `scripts[]` element.   ---  **Affects:** 3.2.3  **Attachments:** - [wsTest.zip](https://jira.spring.io/secure/attachment/21256/wsTest.zip) (_5.12 MB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6a3a36137695165394b446d119352529eef791dd, https://github.com/spring-projects/spring-framework/commit/2abec6fd904c83ae6411976862b029e591700e01","closed","type: bug,","spring-projects-issues","2013-06-24T05:44:55Z","2013-07-24T10:17:07Z"
"","14964","JdbcTestUtils readScript fails to see commented lines with tabs [SPR-10330]","**[Laurent S.](https://jira.spring.io/secure/ViewProfile.jspa?name=lschoelens)** opened **[SPR-10330](https://jira.spring.io/browse/SPR-10330?redirect=false)** and commented  Spring failed to parse SQL script when some lines are comments with tabs before comments markers.  For example for the file :  ``` 	-- My comment My SQL INSERT STATEMENT; ```  This will generate the following statement  ``` -- My comment My SQL INSERT STATEMENT; ```  And throw the following exception on execution :  ``` org.hibernate.exception.GenericJDBCException: Type SQL non valide: sqlKind = UNINITIALIZED 	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:54) 	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:125) 	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:110) 	at org.hibernate.engine.jdbc.internal.proxy.AbstractStatementProxyHandler.continueInvocation(AbstractStatementProxyHandler.java:129) 	at org.hibernate.engine.jdbc.internal.proxy.AbstractProxyHandler.invoke(AbstractProxyHandler.java:81) 	at $Proxy53.executeUpdate(Unknown Source) 	at org.springframework.jdbc.core.JdbcTemplate$1UpdateStatementCallback.doInStatement(JdbcTemplate.java:509) 	at org.springframework.jdbc.core.JdbcTemplate$1UpdateStatementCallback.doInStatement(JdbcTemplate.java:1) 	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:396) 	at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:519) 	at org.springframework.jdbc.core.simple.SimpleJdbcTemplate.update(SimpleJdbcTemplate.java:252) 	at org.springframework.test.jdbc.SimpleJdbcTestUtils.executeSqlScript(SimpleJdbcTestUtils.java:150) 	at org.springframework.test.context.junit4.AbstractTransactionalJUnit4SpringContextTests.executeSqlScript(AbstractTransactionalJUnit4SpringContextTests.java:141) [...] ```  My guess for the fix would be to add trim on the following statement : `JdbcTestUtils.java, readScript(LineNumberReader lineNumberReader, String commentPrefix)`, Line 257:  ```java if (StringUtils.hasText(currentStatement) && (commentPrefix != null && !currentStatement.trim().startsWith(commentPrefix))) { ```  ---  **Affects:** 3.1.4  **Issue Links:** - #14616 Support comments within SQL statements in JdbcTestUtils - #13899 Improve comment handling in ResourceDatabasePopulator (_**""supersedes""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b3a693e356302222e1844efa92fa7cb4f450bca7","closed","in: test,","spring-projects-issues","2013-02-25T03:48:02Z","2019-01-11T21:03:16Z"
"","15417","In spring MVC portlet, @resourceMapping doesn't work. [SPR-10791]","**[Laurent CHARLOIS](https://jira.spring.io/secure/ViewProfile.jspa?name=guli)** opened **[SPR-10791](https://jira.spring.io/browse/SPR-10791?redirect=false)** and commented  Using a method like this : `@ResourceMapping`(value = ""homeTemplate"") public `@ResponseBody` ModelAndView homeTemplate() { return new ModelAndView(""home""); }  Return a blank response.  In 3.1.2 it works fine.  ---  **Affects:** 3.1.3, 3.1.4  **Issue Links:** - #14509 DispatcherPortlet should forward to view for ResourceRequest - #12003 Spring Portlet MVC - Unable to return JSON data from `@ResourceMapping`  **Backported to:** [3.2.6](https://github.com/spring-projects/spring-framework/milestone/94?closed=1)  1 votes, 3 watchers","closed","type: bug,","spring-projects-issues","2013-07-29T05:39:14Z","2019-01-13T06:58:47Z"
"","15349","WebSocketHttpRequestHandler constructor doesn't use handshakeHandler [SPR-10721]","**[Lars van der Vliet](https://jira.spring.io/secure/ViewProfile.jspa?name=lvdvliet)** opened **[SPR-10721](https://jira.spring.io/browse/SPR-10721?redirect=false)** and commented  In the following constructor the handshakeHandler parameter isn't used, instead a DefaultHandshakeHandler is created.  ``` public WebSocketHttpRequestHandler(WebSocketHandler webSocketHandler, HandshakeHandler handshakeHandler) { 	Assert.notNull(webSocketHandler, ""webSocketHandler is required""); 	Assert.notNull(handshakeHandler, ""handshakeHandler is required""); 	this.webSocketHandler = decorateWebSocketHandler(webSocketHandler); 	this.handshakeHandler = new DefaultHandshakeHandler(); } ```    ---  **Affects:** 4.0 M1  **Reference URL:** https://github.com/SpringSource/spring-framework/blob/60532cbd1eb4e1b5778653fec315407531e949a9/spring-websocket/src/main/java/org/springframework/web/socket/server/support/WebSocketHttpRequestHandler.java#L68  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/860e56ea8447f30beb2edb7483485177e8c0c709","closed","type: bug,","spring-projects-issues","2013-07-04T13:09:20Z","2013-07-24T10:17:05Z"
"","15316","Spring cache defaults to hashcode based cache key for multiple arguments [SPR-10688]","**[Lance S](https://jira.spring.io/secure/ViewProfile.jspa?name=lanceuk)** opened **[SPR-10688](https://jira.spring.io/browse/SPR-10688?redirect=false)** and commented  If I add a `@Cacheable`(""cachename"") annotation to a method with multiple arguments and I don't specify a key, Spring will create a cache key for me. This cache key is a hash of the arguments. Since a hash is not guaranteed to be unique, I think that this is a dangerous default which will cause errors (although the errors will be rare).  For example: Long.valueOf(0) and Long.valueOf(-1) both have 0 as their hashcode.  I have attached a failing test case. The test case fails the final assertion  ``` org.junit.ComparisonFailure: expected: but was: 	at org.junit.Assert.assertEquals(Assert.java:123) 	at org.junit.Assert.assertEquals(Assert.java:145) 	at foo.bar.SpringCacheBrokenTest.testCache(SpringCacheBrokenTest.java:52) ```  ---  **Attachments:** - [SpringCacheBrokenTest.java](https://jira.spring.io/secure/attachment/21258/SpringCacheBrokenTest.java) (_1.72 kB_)  **Issue Links:** - #14870 Cacheable key collision with DefaultKeyGenerator (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2013-06-25T08:33:05Z","2019-01-12T16:46:55Z"
"","15239","SpelExpression isWritable() doesn't detect invalid nested paths [SPR-10610]","**[Kyrill Alyoshin](https://jira.spring.io/secure/ViewProfile.jspa?name=kyrill007)** opened **[SPR-10610](https://jira.spring.io/browse/SPR-10610?redirect=false)** and commented  It appears that _SpelExpression#isWritable(EvaluationContext, Object)_ doesn't support nested expressions, which is inconsistent since the Javadoc of this method of the Expression interface explicitly states: _Determine if an expression can be written to, i.e. setValue() can be called._  Well, in fact, _setValue_ will fail if any of the nested path elements (except the first one) is incorrectly specified, but _isWritable_ will happily return _true_.   ---  **Affects:** 3.2.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/03fc9e89a00697b36d34bf77f6f2119d90eccba1","closed","status: bulk-closed,","spring-projects-issues","2013-05-30T19:33:47Z","2019-01-12T03:41:59Z"
"","15427","SRVE0014E: Uncaught service() exception root cause Spring MVC Dispatcher Servlet [SPR-10801]","**[Kumar k](https://jira.spring.io/secure/ViewProfile.jspa?name=kumar2013)** opened **[SPR-10801](https://jira.spring.io/browse/SPR-10801?redirect=false)** and commented  Hi,  We are doing upgrade from WAS 6.1 to WAS 8.0.  We have started the application in the admin console without any issues.  While accessing the URL we are getting the below exception message.  [7/30/13 10:02:34:660 CEST] 00000020 servlet       E com.ibm.ws.webcontainer.servlet.ServletWrapper service SRVE0014E: Uncaught service() exception root cause Spring MVC Dispatcher Servlet: org.springframework.web.util.NestedServletException: Handler processing failed; nested exception is java.lang.StackOverflowError at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:920) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:809) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:571) at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:501) at javax.servlet.http.HttpServlet.service(HttpServlet.java:575) at javax.servlet.http.HttpServlet.service(HttpServlet.java:668) at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1225) at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:775) at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:457) at com.ibm.ws.webcontainer.servlet.ServletWrapperImpl.handleRequest(ServletWrapperImpl.java:178) at com.ibm.ws.webcontainer.filter.WebAppFilterChain.invokeTarget(WebAppFilterChain.java:136) at com.ibm.ws.webcontainer.filter.WebAppFilterChain.doFilter(WebAppFilterChain.java:97) at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:96) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) at com.ibm.ws.webcontainer.filter.FilterInstanceWrapper.doFilter(FilterInstanceWrapper.java:195) at com.ibm.ws.webcontainer.filter.WebAppFilterChain.doFilter(WebAppFilterChain.java:91) at com.ibm.ws.webcontainer.filter.WebAppFilterManager.doFilter(WebAppFilterManager.java:928) at com.ibm.ws.webcontainer.filter.WebAppFilterManager.invokeFilters(WebAppFilterManager.java:1025) at com.ibm.ws.webcontainer.webapp.WebApp.handleRequest(WebApp.java:3763) at com.ibm.ws.webcontainer.webapp.WebGroup.handleRequest(WebGroup.java:304) at com.ibm.ws.webcontainer.WebContainer.handleRequest(WebContainer.java:975) at com.ibm.ws.webcontainer.WSWebContainer.handleRequest(WSWebContainer.java:1662) at com.ibm.ws.webcontainer.channel.WCChannelLink.ready(WCChannelLink.java:195) at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.handleDiscrimination(HttpInboundLink.java:453) at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.handleNewRequest(HttpInboundLink.java:515) at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.processRequest(HttpInboundLink.java:306) at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.ready(HttpInboundLink.java:277) at com.ibm.ws.tcp.channel.impl.NewConnectionInitialReadCallback.sendToDiscriminators(NewConnectionInitialReadCallback.java:214) at com.ibm.ws.tcp.channel.impl.NewConnectionInitialReadCallback.complete(NewConnectionInitialReadCallback.java:113) at com.ibm.ws.tcp.channel.impl.AioReadCompletionListener.futureCompleted(AioReadCompletionListener.java:166) at com.ibm.io.async.AbstractAsyncFuture.invokeCallback(AbstractAsyncFuture.java:217) at com.ibm.io.async.AsyncChannelFuture.fireCompletionActions(AsyncChannelFuture.java:161) at com.ibm.io.async.AsyncFuture.completed(AsyncFuture.java:138) at com.ibm.io.async.ResultHandler.complete(ResultHandler.java:204) at com.ibm.io.async.ResultHandler.runEventProcessingLoop(ResultHandler.java:775) at com.ibm.io.async.ResultHandler$2.run(ResultHandler.java:905) at com.ibm.ws.util.ThreadPool$Worker.run(ThreadPool.java:1691) Caused by: java.lang.StackOverflowError at java.lang.ThreadLocal.get(ThreadLocal.java:138) at javax.faces.context.FacesContext.getAttributes(FacesContext.java:57) at javax.faces.context.FacesContext.getAttributes(FacesContext.java:64) at javax.faces.context.FacesContext.getAttributes(FacesContext.java:64) at javax.faces.context.FacesContext.getAttributes(FacesContext.java:64)  ---  **Issue Links:** - #15420 SRVE0014E: Uncaught service() exception root cause Spring MVC Dispatcher Servlet: org.springframework.web.util.NestedServletException: Handler processing failed; nested exception is java.lang.StackOverflowError (_**""duplicates""**_)","closed","","spring-projects-issues","2013-08-01T23:37:40Z","2019-01-11T22:05:33Z"
"","14883","BufferedImageHttpMessageConverter redefine content type of HttpOutputMessage [SPR-10250]","**[Krzysztof Pankowski](https://jira.spring.io/secure/ViewProfile.jspa?name=krzysztof.pankowski)** opened **[SPR-10250](https://jira.spring.io/browse/SPR-10250?redirect=false)** and commented  Even if we explicitly set response content type in controller it will be overwriten by BufferedImageHttpMessageConverter.  ``` 	@RequestMapping(value = ""/images/{id}"", method = RequestMethod.GET, produces = {""image/gif"", ""image/png"", ""image/jpeg""}) 	public ResponseEntity getImageComponent(@PathVariable final String id) 	{ 		... 		final MediaType imageMediaType = new MediaType(""image"", ""png""); 		headers.setContentType(imageMediaType);  		return new ResponseEntity(bufferedImage, headers, HttpStatus.OK); 	} ```  ``` curl --H ""Accept: image/*"" http://localhost/images/1234 ```  The expected content type is 'image/png', but the actual value is 'image/gif' (first match).   ---  **Affects:** 3.1.1, 3.2.1","closed","status: bulk-closed,","spring-projects-issues","2013-02-01T00:42:42Z","2019-01-12T02:34:59Z"
"","15383","Updating AjaxTilesView for proper work with tiles 3 [SPR-10757]","**[Krzysztof Gąsior](https://jira.spring.io/secure/ViewProfile.jspa?name=thefunnyaei)** opened **[SPR-10757](https://jira.spring.io/browse/SPR-10757?redirect=false)** and commented  Since Tails 3 the abstraction above RequestContext has changed and org.springframework.js.ajax.tiles2.AjaxTilesView is using the old one. So it would be nice to upgrade it to tails version 3.  The problem and solution is described by me in referenced stackoverflow thread.   ---  **Affects:** 3.2 GA, 3.2.3  **Reference URL:** http://stackoverflow.com/questions/17719176/noclassdeffounderror-while-using-ajaxurlbasedviewresolver-in-spring-mvc-3  1 votes, 2 watchers","closed","status: bulk-closed,","spring-projects-issues","2013-07-18T10:11:49Z","2019-01-12T00:22:33Z"
"","15043","DeferredResult in combination with @ResponseBody performs view-resolve and render after deferred result is handled [SPR-10410]","**[Kristoffer](https://jira.spring.io/secure/ViewProfile.jspa?name=krite)** opened **[SPR-10410](https://jira.spring.io/browse/SPR-10410?redirect=false)** and commented  Using a standard `@RequestMapping` + `@ResponseBody` method producing json data fails when converting it to returning a DeferredResult\. A simple test firing the setResult() on an a separate thread after a few seconds produces this.  The problem is that when returning a ResponseBody, there should be no view-lookup, there should be json-serialization. After going through all the code, all the flows, I still cannot really tell where the logic fails. The spring-web-stack has become rather complex lately, and exactly where the choice to perform a view-lookup is made, is a bit fuzzy. Also, the onCompletion() is called twice, I don't know if this is the root cause.  One possible error could be the boolean on ModelAndView, called from RequestMappingHandlerAdapter:844. In this case, the request IS handled and already dispatched to the client, but the method mavContainer.isRequestHandled() returns false. This in turn means that the handler continues to process the model and view resulting in the deferred request trying to lookup a view that does not exist (null). Both viewName and view is null, we have a `@ResponseBody` and did just write the json using the deferred handler. Returning out to the DispatcherServlet, the status is checked again for async status, but is here regarded as not being async: DispatcherServlet:928. This means that the DispatcherServlet puts a default view name on the view, the request's path, and continues to post process the view, which it finds valid on row: 991. It will try to render a non-existing view, resulting in an exception. In this case it is thymeleaf, but any view resolving will fail here. The exception is then written to the output and sent to the client as an appended data chunk after the already written json data.  Again, this analysis might be wrong, but I have tried every demo and sample-code, and still, the deferred result keeps getting a view-rendering after the actual json is written to the client.   ---  **Affects:** 3.2.2","closed","status: invalid,","spring-projects-issues","2013-03-24T06:27:29Z","2019-01-12T05:27:11Z"
"","15245","Introduce roles(String...) method in MockHttpServletRequestBuilder for populating user roles in request [SPR-10617]","**[Konstantin Grigoriev](https://jira.spring.io/secure/ViewProfile.jspa?name=gkonst)** opened **[SPR-10617](https://jira.spring.io/browse/SPR-10617?redirect=false)** and commented  There currently is not a method in `MockHttpServletRequestBuilder` that can be used to set user roles in the request. This would be useful for testing methods which use the `HttpServletRequest#isUserInRole` method.  Such a method exists in [MockHttpServletRequest](http://static.springsource.org/spring/docs/3.2.x/javadoc-api/org/springframework/mock/web/MockHttpServletRequest.html#addUserRole(java.lang.String)) but not in `MockHttpServletRequestBuilder`.   ---  **Affects:** 3.2.3","closed","status: bulk-closed,","spring-projects-issues","2013-06-02T02:36:04Z","2019-01-12T03:41:56Z"
"","14775","Two forms in one jsp [SPR-10142]","**[Kok-Kie Tang](https://jira.spring.io/secure/ViewProfile.jspa?name=kokkie)** opened **[SPR-10142](https://jira.spring.io/browse/SPR-10142?redirect=false)** and commented  The problem that I found/occured that if I got two forms in one jsp. And I have one form with an modelAttribute I will get an error that the binding for the modelAttribute didn't took it's place.  When I pressed the submit button on the one that didn't have an modelAttribute. I have expected that it wouldn't cause me any problem because it doesn't have an modelAttribute on the form tag.    ---  **Affects:** 3.1.3  **Reference URL:** http://stackoverflow.com/questions/14137281/multiple-forms-in-one-jsp","closed","status: declined,","spring-projects-issues","2013-01-03T05:40:19Z","2019-01-12T16:24:39Z"
"","14774","@ModelAttribute binding method POST with same name attributes [SPR-10141]","**[Kok-Kie Tang](https://jira.spring.io/secure/ViewProfile.jspa?name=kokkie)** opened **[SPR-10141](https://jira.spring.io/browse/SPR-10141?redirect=false)** and commented  How to deal with the binding with two `@ModelAttribute` in a post method with the same name attributes, example:  ```java @ModelAttribute(""order) public Order order(HttpSession session) {   /// if order exist take order out of session if not make new order }  @RequestMapping(method = RequestMethod.POST) public String processOrder(@ModelAttribute(""shippingAddressForm"") @Valid ShippingAddressForm saf, BindingResult result, ModelMap model, @ModelAttribute(""order"") Order order) {   if(!result.hasErrors()) /// go back to page   /// else redirect to another page } ```  The error that I got is that it says I have a BindingResult typeMismatch which cause by the attribute address of Order, because I have the same attribute in ShippingAddressForm with the name address in String while the Order has an address atribute of Address.  My Order class:  ```java class Order {  private Collection address; } ```  My ShippingAddressForm:  ```java class ShippingAddressForm {  private String address; }  ```  Edit 7-01-2013: The form.jsp  ```  	 	 	  ```  This would be the same if there is an post method like this:  ```java @RequestMapping(method = RequestMethod.POST) public String processSomething(@RequestParam(value=""id"")ShippingAddress sa, @ModelAttribute(""order"")Order order) {  /// do something } ```  Now my id of the Order is changed if it has the attribute id. Which is caused by the binding of `@RequestParam`(value=""id"") that comes from the post.   ---  **Affects:** 3.1.3","closed","status: declined,","spring-projects-issues","2013-01-03T05:29:22Z","2019-01-12T16:24:40Z"
"","15344","Relax JavaBean rules for SpEL property access [SPR-10716]","**[Koen Serneels](https://jira.spring.io/secure/ViewProfile.jspa?name=koen.serneels)** opened **[SPR-10716](https://jira.spring.io/browse/SPR-10716?redirect=false)** and commented  Expression that accesses a property having there second char upper cased are not found on the target object. This is because a small bug in the property method matcher:  org.springframework.expression.spel.support.ReflectivePropertyAccessor#getPropertyMethodSuffix (L:368):  ``` protected String getPropertyMethodSuffix(String propertyName) { 	if (propertyName.length() > 1 && Character.isUpperCase(propertyName.charAt(1))) { 		return propertyName; 	} 	else { 		return StringUtils.capitalize(propertyName); 	} } ```  So this:  ``` Character.isUpperCase(propertyName.charAt(1))) ```  Should become:  ``` Character.isUpperCase(propertyName.charAt(0)) ```  ---  **Affects:** 3.2.3  **Attachments:** - [SpELTest.java](https://jira.spring.io/secure/attachment/21271/SpELTest.java) (_641 bytes_)  **Sub-tasks:** - #15636 Backport: Relax JavaBean rules for SpEL property access  **Issue Links:** - #13761 [SpEL] Problem with uppercase property names - #15768 ReflectivePropertyAccessor should not consider ""is"" methods with non boolean returns  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b25e91a550beaf428a6e696959b717341a04f27d, https://github.com/spring-projects/spring-framework/commit/f9f106936caa41dc4a34d8b71eac60b743bea826  2 votes, 4 watchers","closed","in: core,","spring-projects-issues","2013-07-03T02:20:50Z","2019-01-11T22:28:06Z"
"","15015","Form tag prepending context/servlet path breaks use for portlets [SPR-10382]","**[Kevin Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=kwilkins)** opened **[SPR-10382](https://jira.spring.io/browse/SPR-10382?redirect=false)** and commented  When using the form tag for portlets, prepending the portlet's context is not wanted since we want the url to resolve to the portal's context and not the portlet's(where the form tag lives).  The portlet url tags generate portlet urls within the jsp like `/uPortal/f/s70/p/portlet-name/normal/action.uPpP_javax.portlet.action=saveItem` which resolve to /uPortal and not /PortletName  ```xml  ...  ```  renders as  ```xml  ...  ```  The original idea was to have the adding-context functionality off by default and turned on by an added parameter but it wasn't implemented.  That way it wouldn't break anything while letting new apps take advantage of the shortcut.  ---  **Affects:** 3.2.1, 3.2.2  **Reference URL:** https://jira.springsource.org/browse/SPR-8684  **Issue Links:** - #15016 Form tag does not resolve action correctly in portlet environment (_**""is duplicated by""**_) - #13326 Form tag should prepend the contextPath and servletPath if not present - #18097 Update reference documentation for spring JSP Tag Library  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c0cacfcd68179fa947163ca59b90e50c8a7fcd6b, https://github.com/spring-projects/spring-framework/commit/399f887128f2dc0dcaadb7b7df2826ce0b9dcf79  2 votes, 7 watchers","closed","type: bug,","spring-projects-issues","2013-03-14T17:48:11Z","2019-01-11T19:38:01Z"
"","15388","MappingJackson2HttpMessageConverter omitting JsonTypeInfo discriminators [SPR-10762]","**[Kevin Sewell](https://jira.spring.io/secure/ViewProfile.jspa?name=aronim)** opened **[SPR-10762](https://jira.spring.io/browse/SPR-10762?redirect=false)** and commented  When converting an Iteratable of abstract of classes configured using the JsonTypeInfo annotation... the MappingJackson2HttpMessageConverter (or ObjectMapper depending on your point of view) omits the `@type` field for the root element.  This breaks the symmetry if one wants to deserialize the message on a client side using a similar class hierarchy.  The attached Github project highlights the problem. I am not sure whehter this is a Jackson or Spring Web issue.   ---  **Affects:** 3.2.3  **Reference URL:** https://github.com/aronim/spring-webmvc-jackson-type","closed","status: invalid,","spring-projects-issues","2013-07-20T02:26:57Z","2019-01-12T05:26:48Z"
"","14691","Unnecessary reading of java.lang.Object input stream [SPR-10058]","**[Kevin O'Riordan](https://jira.spring.io/secure/ViewProfile.jspa?name=kevor)** opened **[SPR-10058](https://jira.spring.io/browse/SPR-10058?redirect=false)** and commented  Environment: Spring MVC 3.1.2 in Tomcat 7.0.23, jdk 1.6.  When switching on java security, I realized that spring context is reading java.lang.Object from rt.jar when processing bean definitions, unnecessary and a bit dubious perhaps? It required me to grant read access to rt.jar, no big deal.  Without knowing too much about the innards of the internals of spring's bean/annotation processing, I wonder if ClassMetaReadingVisitor.hasSuperClass() should return false when java core classes are encountered? I am curious as to why an input stream is read for each class rather than doing a simple class load?  I hope this is helpful, really liking the latest Spring MVC stuff!  Stack trace here: access: access denied (java.io.FilePermission /sbcimp/run/tp/sun/jdk/v1.6.0_31-64bit/jre/lib/rt.jar read) java.lang.Exception: Stack trace at java.lang.Thread.dumpStack(Thread.java:1249) at java.security.AccessControlContext.checkPermission(AccessControlContext.java:364) at java.security.AccessController.checkPermission(AccessController.java:546) at java.lang.SecurityManager.checkPermission(SecurityManager.java:532) at java.lang.SecurityManager.checkRead(SecurityManager.java:871) at sun.misc.URLClassPath.check(URLClassPath.java:416) at sun.misc.URLClassPath$JarLoader.checkResource(URLClassPath.java:676) at sun.misc.URLClassPath$JarLoader.getResource(URLClassPath.java:759) at sun.misc.URLClassPath.getResource(URLClassPath.java:169) at sun.misc.URLClassPath.getResource(URLClassPath.java:221) at java.lang.ClassLoader.getBootstrapResource(ClassLoader.java:1150) at java.lang.ClassLoader.getResource(ClassLoader.java:999) at java.lang.ClassLoader.getResource(ClassLoader.java:997) at java.lang.ClassLoader.getResource(ClassLoader.java:997) at java.lang.ClassLoader.getResourceAsStream(ClassLoader.java:1192) at org.apache.catalina.loader.WebappClassLoader.getResourceAsStream(WebappClassLoader.java:1504) at org.springframework.core.io.ClassPathResource.getInputStream(ClassPathResource.java:154) at org.springframework.core.type.classreading.SimpleMetadataReader.\(SimpleMetadataReader.java:49) at org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(SimpleMetadataReaderFactory.java:80) at org.springframework.core.type.classreading.CachingMetadataReaderFactory.getMetadataReader(CachingMetadataReaderFactory.java:101) at org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(SimpleMetadataReaderFactory.java:76) at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:257) at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:149) at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:126) at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:263) at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:203) at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:622) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:451) at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:383) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:283) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:111) at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4765) at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5260) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150) at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:866) at org.apache.catalina.core.ContainerBase.access$000(ContainerBase.java:128) at org.apache.catalina.core.ContainerBase$PrivilegedAddChild.run(ContainerBase.java:151) at org.apache.catalina.core.ContainerBase$PrivilegedAddChild.run(ContainerBase.java:140) at java.security.AccessController.doPrivileged(Native Method) at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:840) at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:615) at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1095) at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1617) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303) at java.util.concurrent.FutureTask.run(FutureTask.java:138) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:662)    ---  **Affects:** 3.1.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7384c3d82f3b0dc9fe54427fd2728719a671ba6e, https://github.com/spring-projects/spring-framework/commit/a92f7dd474406a02844ec635fde6c22eb8ef8456  **Backported to:** [3.1.4](https://github.com/spring-projects/spring-framework/milestone/83?closed=1)","closed","type: enhancement,","spring-projects-issues","2012-11-29T04:30:30Z","2012-12-05T10:08:53Z"
"","15232","Make result-data accessible in onCompletion Event in DeferredResult  [SPR-10603]","**[Kevin Armenat](https://jira.spring.io/secure/ViewProfile.jspa?name=sweep)** opened **[SPR-10603](https://jira.spring.io/browse/SPR-10603?redirect=false)** and commented  I'm trying to access the Result-Data from DeferredResult in onCompletion callback to be able to store these Data in a Session-Scoped bean to cache the result for page reloads (since access to Session-Scoped beans seems only be possible from the web request thread and this callback will be fired from there). It would be great to have a similar callback as ""setResultHandler"" has.  ---  **Issue Links:** - #18031 DeferredResult not thread-safe for isSetOrExpired call  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c6ecaacc03ad1086cb91da7e993043b0a9fea60a","closed","type: enhancement,","spring-projects-issues","2013-05-29T07:38:46Z","2019-01-11T22:27:18Z"
"","15337","Spring 3.2.2 AOP has increased memory usage [SPR-10709]","**[Kestutis Gedminas](https://jira.spring.io/secure/ViewProfile.jspa?name=kgedminas)** opened **[SPR-10709](https://jira.spring.io/browse/SPR-10709?redirect=false)** and commented  Our project moved to spring 3.2.2 and observed increased memory usage. I tracked it down to `UndeclaredThrowableStrategy`. Older Spring versions used cglib implementation of it and it has memory usage fixed in [2.2.3 release](http://cglib.cvs.sourceforge.net/viewvc/cglib/cglib/src/proxy/net/sf/cglib/transform/impl/UndeclaredThrowableStrategy.java?r1=1.3&r2=1.3.2.1&pathrev=RELEASE_2_2_3).  But current spring version uses own implementation of the class which has memory issue - keeps `ClassTransformer` in private member when it is not actually used. Attaching screenshots from Eclipse MAT. In our project this uses 300-400 MB memory which gets wasted.  ---  **Affects:** 3.2.2  **Attachments:** - [spring01.png](https://jira.spring.io/secure/attachment/21267/spring01.png) (_25.99 kB_) - [spring02.png](https://jira.spring.io/secure/attachment/21268/spring02.png) (_84.20 kB_)  **Issue Links:** - #16025 aop:scoped-proxy may fail with LinkageError: loader attempted duplicate class definition for name  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/af7753eac6d539b76cc05bd9ae464bb3ca22d3dd, https://github.com/spring-projects/spring-framework/commit/587877c6da90d963a05c71311769f9265dca27bc  1 votes, 4 watchers","closed","in: core,","spring-projects-issues","2013-07-01T00:42:29Z","2019-01-11T22:28:26Z"
"","15464","MockMvc can't be test under multiple threads. [SPR-10838]","**[Kent Yeh](https://jira.spring.io/secure/ViewProfile.jspa?name=kent.yeh)** opened **[SPR-10838](https://jira.spring.io/browse/SPR-10838?redirect=false)** and commented  First, TestDispatcherServlet can't using single key to intercept multiple threads.  ``` final class TestDispatcherServlet extends DispatcherServlet {     private static final String KEY = TestDispatcherServlet.class.getName() + "".interceptor"";     private CountDownLatch registerAsyncInterceptors(final HttpServletRequest servletRequest) {         //A unique key isn't suitable for multiple threads.         asyncManager.registerCallableInterceptor(KEY, new CallableProcessingInterceptorAdapter() {          ...     }     ... ```  Second, TestDispatcherServlet need override doDispatch() to sign dispatch process completed. So, my solution is * Add CountDownLatch member to DefaultMvcResult  ``` class DefaultMvcResult implements MvcResult {     private CountDownLatch dispatchLatch;     public CountDownLatch getDispatchLatch() {...}     public void setDispatchLatch(CountDownLatch dispatchLatch) {...}     ... } ```  * Change TestDispatcherServlet KEY to automic and override doDispatch() to notify process completed.  ``` final class TestDispatcherServlet extends DispatcherServlet {     private static final AtomicInteger idx = new AtomicInteger(0);     private CountDownLatch registerAsyncInterceptors(final HttpServletRequest servletRequest) {          final CountDownLatch asyncResultLatch = new CountDownLatch(1);         //A CountDownLatch to offer doDispatch() a chance to sign that dispatch process completed.         getMvcResult(servletRequest).setDispatchLatch(new CountDownLatch(1));          WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(servletRequest);         //Make key atomic.         String key = String.format(""%s.%d"", KEY, idx.getAndIncrement());         asyncManager.registerCallableInterceptor(key, new CallableProcessingInterceptorAdapter() {                 ...         });         asyncManager.registerDeferredResultInterceptor(key, new DeferredResultProcessingInterceptorAdapter() {         });         return asyncResultLatch;     }      @Override     protected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception {         super.doDispatch(request, response);         DefaultMvcResult mvcResult = getMvcResult(request);         //Sign for process completed.         if (mvcResult != null && mvcResult.getDispatchLatch() != null) {             mvcResult.getDispatchLatch().countDown();         }     } ```  * Finally override MockMvc perform()'s ResultActions to wait dispatch process completed.  ``` public final class MockMvc {     public ResultActions perform(RequestBuilder requestBuilder) throws Exception {         ....         return new ResultActions() {             ...             @Override             public MvcResult andReturn() {                 if (mvcResult.getDispatchLatch() != null) {                     try {                         HttpServletRequest request = mvcResult.getRequest();                         long timeout = request.getAsyncContext() == null ? defaultTimeout : request.getAsyncContext().getTimeout();                         mvcResult.getDispatchLatch().await(timeout - delayResult, TimeUnit.MILLISECONDS);                         Thread.sleep(delayResult);                     } catch (InterruptedException ex) {                     }                 }                 return mvcResult;             }         }     }     ... ```  Attatchment contain two projects that one raise error and another rewrited([source](http://gwtrepo.googlecode.com/svn/repo/org/springframework/spring-mvctest/3.2.4.RELEASE/spring-mvctest-3.2.4.RELEASE-sources.jar)) run succees.  ---  **Affects:** 3.2 GA  **Attachments:** - [Spring32MvcJIRA.zip](https://jira.spring.io/secure/attachment/21341/Spring32MvcJIRA.zip) (_91.48 kB_)  **Issue Links:** - #16141 Spring MVC Test can fail to obtain async result due to timing issue  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/119e793994796bc4e7ebfd7d57fe3b219c07c68b, https://github.com/spring-projects/spring-framework/commit/072e5e84715981080aed6082233ed9567bbae663, https://github.com/spring-projects/spring-framework/commit/ed9b2966c079b73094f293e5d0c35abd9d59db09  3 votes, 10 watchers","closed","type: bug,","spring-projects-issues","2013-08-14T23:43:05Z","2019-01-11T22:04:48Z"
"","15249","JsonpTransportHandler read message header problem [SPR-10621]","**[Kent Yeh](https://jira.spring.io/secure/ViewProfile.jspa?name=kent.yeh)** opened **[SPR-10621](https://jira.spring.io/browse/SPR-10621?redirect=false)** and commented  readMessages methods  ```java if (MediaType.APPLICATION_FORM_URLENCODED.equals(request.getHeaders().getContentType())) { .... } ```  start to compare request header expect ""application/x-www-form-urlencoded"" but actually is ""application/x-www-form-urlencoded;charset=UTF-8""   ---  **Affects:** 4.0 M1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/82ec06ad349426acf663f8edc22dd7716c4ff2cd","closed","type: bug,","spring-projects-issues","2013-06-03T08:24:02Z","2013-07-24T10:17:12Z"
"","14944","Support Content-based Hash Fingerprinted URLs in ResourceHttpRequestHandler [SPR-10310]","**[Kent Rancourt](https://jira.spring.io/secure/ViewProfile.jspa?name=krancour)** opened **[SPR-10310](https://jira.spring.io/browse/SPR-10310?redirect=false)** and commented  `ResourceHttpRequestHandler`'s configurable ""`cacheSeconds`"" property is a great performance feature that allows the setting of a far-future expiry date on the static resources it serves.  Of course, the downside to this is that if static resources are modified in a subsequent release, browsers that already have them cached won't request new versions for a long time and therefore wind up utilizing stale resources.  To circumvent this, a ""cache-busting"" strategy is called for in order to ""trick"" browsers into making a new request by supplying them with a different URL to follow.  The Spring reference documentation (chapter 17) offers up one possible strategy for accomplishing this, but with this being a common concern, should support not be built directly into Spring MVC?  I have been inspired by how the Ruby on Rails ""asset pipeline"" accomplishes cache-busting, so if I may be so bold as to suggest an implementation, something like the following might work nicely:  1. Provide a series of custom JSP tags like ``.  If cache-busting is enabled, these tags will seek out the indicated resource (by looking in the same locations that `ResourceHttpRequestHandler` is configured to serve resources from).  Upon finding the resource, it will calculate an MD5 checksum of that resource and incorporate that fingerprint into the URL that it outputs into the src or href attribute of whatever HTML element the tag is producing.  By way of example, `` might produce ``  (Also, a simple Map can be used internally to cache calculated checksums to improve the performance of this algorithm on subsequent executions.)  2. Add a ""`useCacheBusting`"" property to `ResourceHttpRequestHandler` (and the `` tag in the Spring MVC config namespace).  Enhance this class to detect and strip the MD5 checksum suffix from the URL before looking for the requested resource.  (There is no need to even DO anything with the MD5 checksum.  It was only there to trick the browser into make a new request.)  Developers using this enhancement would need to do no more than enable it using the namespace and use the `` JSP tags.  The strategy, apart from being quite seamless, is also wholly compatible with additional strategies that might be used to accelerate the serving of static resources.  For instance, if a develop wishes to short-circuit requests for static resource by serving them from the web server, there are two options that are fully compatible with the cache-busting strategy outlined here:  1. Use a Maven build plugin to suffix static resource filenames with MD5 checksums.  Whatever deploy process copies the static resources to the web server will then be copying resources with the exact names that the new JSP tags will be directing the browser to request.  2. If the developer has control of the web server and doesn't like #1, they can also consider using web server rewrite rules to drop the MD5 checksum from the resource URL before looking for the resource to serve up.  In any event, having the cache-busting strategy built into the framework would probably encourage more developers to use far-future expiration dates- which are GREAT for performance, but difficult to work with in the absence of a solid cache-busting strategy.  ---  **Affects:** 3.2.1  **Sub-tasks:** - #16484 Add setJavaScriptModuleLoaderMode (or similar) property to FingerprintResourceResolver  **Issue Links:** - #15561 Enhance ResourceHttpRequestHandler with ResourceResolver strategy (_**""depends on""**_) - #16420 Enhance ResourceHttpRequestHandler with ResourceTransformer strategy (_**""depends on""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d4a0e628d5c4c5e2a89181d1bb1d3f023673d816, https://github.com/spring-projects/spring-framework/commit/4ca7d89a9222f4e8d0dd4bd32425b33da1358563  6 votes, 12 watchers","closed","type: enhancement,","spring-projects-issues","2013-02-17T03:22:56Z","2019-01-11T21:05:38Z"
"","15448","Include standard properties in ServletContextPropertySource in addition to init params [SPR-10822]","**[Karsten Blohm](https://jira.spring.io/secure/ViewProfile.jspa?name=truthslie)** opened **[SPR-10822](https://jira.spring.io/browse/SPR-10822?redirect=false)** and commented  Currently the `ServletContextPropertySource` only provides access to the init parameters of the `ServletContext`. These parameters are only for additional parameters that are not accessible via normal getter methods.  I think it would be great to include standard parameters such as `contextPath`, etc.  Currently there is no way to get the `contextPath` via the `Environment` object.   ---  **Affects:** 3.1 GA","closed","type: enhancement,","spring-projects-issues","2013-08-09T07:36:29Z","2016-01-04T16:41:12Z"
"","15023","Create MockHttpServletRequestBuilder.accept(String ...mediatTypes) overload. [SPR-10390]","**[Karl Bennett](https://jira.spring.io/secure/ViewProfile.jspa?name=karlbennett)** opened **[SPR-10390](https://jira.spring.io/browse/SPR-10390?redirect=false)** and commented  There isn't currently a [`MockHttpServletRequestBuilder.accept`](http://static.springsource.org/spring/docs/3.2.x/javadoc-api/org/springframework/test/web/servlet/request/MockHttpServletRequestBuilder.html#accept(org.springframework.http.MediaType...)) method that accepts `String` representations of `MIME` types. This would be useful, it is also alluded to in the current documentation and it would better match the functionality of the [`ContentResultMatchers.contentType`](http://static.springsource.org/spring/docs/3.2.x/javadoc-api/org/springframework/test/web/servlet/result/ContentResultMatchers.html#contentType(java.lang.String)) method.  ---  **Affects:** 3.2.2  **Reference URL:** http://static.springsource.org/spring/docs/3.2.x/javadoc-api/org/springframework/test/web/servlet/request/MockHttpServletRequestBuilder.html#accept(org.springframework.http.MediaType...)  **Issue Links:** - #15022 Fix errors in Spring MVC Test server-side code examples","closed","type: enhancement,","spring-projects-issues","2013-03-17T05:23:49Z","2019-01-11T19:37:40Z"
"","15022","Fix errors in Spring MVC Test server-side code examples [SPR-10389]","**[Karl Bennett](https://jira.spring.io/secure/ViewProfile.jspa?name=karlbennett)** opened **[SPR-10389](https://jira.spring.io/browse/SPR-10389?redirect=false)** and commented  #### Overview  The code example given in the ""Server-Side Tests"" section of the reference manual is incorrect.  #### API Error  ``` this.mockMvc.perform(get(""/accounts/1"").accept(""application/json;charset=UTF-8"")) ```  The `MockHttpServletRequestBuilder.accept(MediaType)` method does not have an overloaded method that takes a `String`.  #### Syntax Error  ``` .andExpect(jsonPath(""$.name"").value(""Lee""); ```  This line is missing a closing parenthesis.  ---  **Affects:** 3.2.2  **Reference URL:** http://static.springsource.org/spring/docs/3.2.x/spring-framework-reference/html/testing.html#spring-mvc-test-server  **Issue Links:** - #15023 Create MockHttpServletRequestBuilder.accept(String ...mediatTypes) overload.","closed","type: bug,","spring-projects-issues","2013-03-17T05:09:01Z","2019-01-11T21:00:08Z"
"","15020","@Autowired @Qualifier is not working at ElementType.PARAMETER (method argument) with Interface  [SPR-10387]","**[Kalyan Pasumarthi](https://jira.spring.io/secure/ViewProfile.jspa?name=kalyanpasumarthi)** opened **[SPR-10387](https://jira.spring.io/browse/SPR-10387?redirect=false)** and commented  Hi,  I have defined few spring beans which implements Interface and when I tried to inject on my Spring Controller class with the interface using `@Autowired` and `@Qualifier`, then I while run time I am getting an error as ""org.springframework.beans.BeanInstantiationException: Could not instantiate bean class [com.example.IMyInterface]: Specified class is an interface""  Where as when I define the Interface at class level then it is working. But I am looking at method level as I dont want the state of the Interface reference to shared  So any help on this is much appreciated.  Thanks, Kalyan   ---  **Affects:** 3.1.1","closed","status: declined,","spring-projects-issues","2013-03-15T15:25:38Z","2019-01-12T16:24:14Z"
"","15319","ShallowEtagHeaderFilter fails with Asynchronous controller and returns empty body [SPR-10691]","**[Justin McCartney](https://jira.spring.io/secure/ViewProfile.jspa?name=turf00)** opened **[SPR-10691](https://jira.spring.io/browse/SPR-10691?redirect=false)** and commented  If I use the servlet filter ShallowEtagHeaderFilter and attempt to use an asynchronous controller, it will take an extra 25-30s to receive a response back to the client and the response body will be empty.  If I remove the filter, the asynchronous controller works as expected.  The filter works as expected with standard synchronous controllers.  The set-up:  * Windows 7 64bit * Tomcat 7.0.41 * Oracle JDK 1.6.0_24 * Spring 3.2.3 from Maven repository.  An example controller method:  ``` @RequestMapping(value = ""/mapping"", method = RequestMethod.PUT) @ResponseStatus(HttpStatus.OK) public @ResponseBody Callable bugTest(@RequestBody String body,         HttpServletRequest request, HttpServletResponse response) {     logRequest(String.format(""Body received: %s"", body), request);     return new CallableExample(); } ```  And the callable test class:  ``` public class CallableExample implements Callable {     private static Logger logger = Logger.getLogger(""Controller"");      @Override     public String call() throws Exception     {         logger.info(""Start callable"");         Thread.sleep(10000);         logger.info(""End callable"");         return ""{\""errors\"":[\""Toaster went wrong\""]}"";     }  } ```    ---  **Affects:** 3.2.3  **Attachments:** - [spring-error2.log](https://jira.spring.io/secure/attachment/21285/spring-error2.log) (_14.03 kB_)","closed","in: web,","spring-projects-issues","2013-06-26T02:58:45Z","2019-01-11T22:22:15Z"
"","15073","[doc] Leaked db connections when using OEIV filter with Servlet 3 async support method to leak db connections [SPR-10440]","**[Julien Martin](https://jira.spring.io/secure/ViewProfile.jspa?name=balteo)** opened **[SPR-10440](https://jira.spring.io/browse/SPR-10440?redirect=false)** and commented  See url above. I am also in the process of creating a sample project conforming to the guidelines given here: https://github.com/SpringSource/spring-framework-issues#readme  Please bear with me. I will add a comment here once I am finished.   ---  **Affects:** 3.2.1, 3.2.2, 4.0.2  **Reference URL:** http://forum.springsource.org/showthread.php?135927-Unknown-threading-issue-causes-async-Spring-controller-method-to-leak-db-connections  **Attachments:** - [threaddump-1365062422654.tdump](https://jira.spring.io/secure/attachment/21139/threaddump-1365062422654.tdump) (_28.50 kB_)  0 votes, 6 watchers","closed","type: task,","spring-projects-issues","2013-04-04T00:44:56Z","2019-01-14T05:19:44Z"
"","15500","Applying the spring-messaging module to JMS [SPR-10873]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-10873](https://jira.spring.io/browse/SPR-10873?redirect=false)** and commented  Our new spring-messaging module is currently primarily used in the spring-websocket module. In time for 4.0, we should explore its applicability to JMS and to message listener methods in particular.  ---  **Affects:** 4.0 RC1  **Issue Links:** - #14515 Annotation-driven JMS endpoints - #19609 Backward compatibility: initDefaultStrategies() is no longer invoked on subclasses of ""MessageListenerAdapter""  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fa4f51c5d0f3e74ece578aeaa2a8a15a57b7df0a","closed","type: enhancement,","spring-projects-issues","2013-08-28T14:43:02Z","2019-01-11T22:09:16Z"
"","15162","Evaluate Java 8 repeatable annotations [SPR-10532]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-10532](https://jira.spring.io/browse/SPR-10532?redirect=false)** and commented  http://docs.oracle.com/javase/tutorial/java/annotations/repeating.html  We should be able to use `@Repeatable` without backwards compatibility issues, since unknown annotations will be ignored by the JVM at runtime.  Identifying Spring annotations that are actually repeatable according to their semantics is an important part of this exercise (e.g. `@Scheduled`).  Since `@Repeatable` requires implicit container annotations anyway, we should be able to provide those in a way that works on Java 6 and 7 as well.  ---  This issue is a sub-task of #14273  1 votes, 4 watchers","closed","type: task,","spring-projects-issues","2013-05-06T15:53:33Z","2019-01-11T22:17:49Z"
"","14888","Ensure compatibility with Hibernate 4.2 [SPR-10255]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-10255](https://jira.spring.io/browse/SPR-10255?redirect=false)** and commented  Hibernate 4.2 RC1 got released a few days ago. Their GA can be expected in time for our 3.2.2 release, so let's make sure that everything keeps working fine there, both with our orm.hibernate4 package and with our JPA vendor support.  ---  **Issue Links:** - #16316 Support for Hibernate ORM 5.0  0 votes, 5 watchers","closed","type: task,","spring-projects-issues","2013-02-04T03:05:27Z","2019-01-11T21:32:59Z"
"","15510","ThreadPoolTaskScheduler setPoolSize() unable to change the pool size at runtime [SPR-10883]","**[Jue Yuan](https://jira.spring.io/secure/ViewProfile.jspa?name=maver)** opened **[SPR-10883](https://jira.spring.io/browse/SPR-10883?redirect=false)** and commented  ThreadPoolTaskScheduler setPoolSize(int poolSize) method doesn't set pool size for the underlying ScheduledThreadPoolExecutor. The possible patch is in the attahcment.   ---  **Affects:** 3.2.4  **Attachments:** - [patch.txt](https://jira.spring.io/secure/attachment/21371/patch.txt) (_277 bytes_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e8c0ef8305cedc43e9cb5f08ba2d9aa9d991ff1d","closed","type: enhancement,","spring-projects-issues","2013-09-01T20:17:42Z","2013-10-31T12:28:00Z"
"","15368","CollectionUtils' method arrayToList() cannot work correctly with one element array in the xml bean definition [SPR-10740]","**[Jue Yuan](https://jira.spring.io/secure/ViewProfile.jspa?name=maver)** opened **[SPR-10740](https://jira.spring.io/browse/SPR-10740?redirect=false)** and commented  I found the following bean definition cannot work correctly in the case that the array only has one element.  ```                                                                                                     ```  If `${myList}` can be splitted into two or more elements, the bean ""cpaContextSource"" can initiate correctly. However, if `myList` only has one element, the bean cannot initiate , with the exception reason ""Source is not an array"".  ---  **Affects:** 3.2.3  **Reference URL:** http://stackoverflow.com/questions/1599086/reading-a-list-from-a-java-properties-using-spring-properties-place-holder","closed","in: core,","spring-projects-issues","2013-07-15T08:03:05Z","2019-01-13T21:03:06Z"
"","15256","Please add a putForEntity and a putForLocation method to RestTemplate [SPR-10628]","**[Josh Long](https://jira.spring.io/secure/ViewProfile.jspa?name=joshlong)** opened **[SPR-10628](https://jira.spring.io/browse/SPR-10628?redirect=false)** and commented  Hi  it's natural to upload files using HTTP PUT. In such a case a RESTful API has a few options: return the representation just uploaded (that's conventional, but inefficient for a file upload like a photo or a large video) or at a bare minimum an HTTP ACCEPTED and a Location header telling clients where the uploaded resource is accessible at. this is something that i could easily get from ResponseEntity, which a putForEntity( ..) would give me. Once we have a putForEntity it's trivial to implement the even more convenient putForLocation to obtain access to the Location: response header.  ---  **Affects:** 3.2.3  **Issue Links:** - #12627 RestTemplate.putFor* (_**""duplicates""**_) - #12627 RestTemplate.putFor* (_**""is duplicated by""**_) - #11699 RestTemplate - putForObject() method (_**""is duplicated by""**_)  1 votes, 8 watchers","closed","type: enhancement,","spring-projects-issues","2013-06-05T01:43:42Z","2019-01-11T22:26:14Z"
"","14815","improvements to proxyMode on @Scope [SPR-10182]","**[Josh Long](https://jira.spring.io/secure/ViewProfile.jspa?name=joshlong)** opened **[SPR-10182](https://jira.spring.io/browse/SPR-10182?redirect=false)** and commented  `@Scope` at the moment doesn't support a proxyMode default, but I can't imagine someone using `@Scope` without wanting a proxyMode in there (JDK or cglib) unless of course they specified 'prototype' or 'singleton', but that's sort of redundant. the other issue is having to be confronted with the choice between interfaces and cglib.  if they're using `@Configuration`, the user hopefully has cglib anyway. Cglib offers a superset of functionality (as far as I can tell) over JDK proxies. The only place it breaks is with final methods. So, perhaps we could have a 'AUTO' option as the default? Something that checks for cglib and checks to ensure the class to be proxied has no final methods and - if all those assertions are OK - uses cglib proxies by default, falling back to JDK proxies only if there are interfaces. Hopefully, in this way, 99% of all uses of `@Scope` can be as simple as `@Scope`(""request""), `@Scope`(""step""), etc.    --- No further details from [SPR-10182](https://jira.spring.io/browse/SPR-10182?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2013-01-16T05:04:14Z","2019-01-12T02:35:20Z"
"","15457","""building workspace"". GC overhead limit exceeded [SPR-10831]","**[Joseph](https://jira.spring.io/secure/ViewProfile.jspa?name=joseph.a.maldonado@gmail.com)** opened **[SPR-10831](https://jira.spring.io/browse/SPR-10831?redirect=false)** and commented  memory issue on build   ---  **Affects:** 3.2.4","closed","status: bulk-closed,","spring-projects-issues","2013-08-13T07:40:35Z","2019-01-12T02:33:05Z"
"","14836","Error in Tomcat [SPR-10203]","**[JOSE V.](https://jira.spring.io/secure/ViewProfile.jspa?name=jvrvila)** opened **[SPR-10203](https://jira.spring.io/browse/SPR-10203?redirect=false)** and commented  I've prepared my enviroment and aplication. I don't modified any lines of code. I've installed jdbc by oracle as this reference: http://www.goodercode.com/wp/spring-roo-database-reverse-engineer-with-oracle/  When I run tomcat from SPS, I get this result from tomcat log:  22-ene-2013 14:40:29 org.apache.catalina.core.AprLifecycleListener init INFO: La biblioteca nativa de Apache Tomcat basada en ARP que permite un rendimiento óptimo en entornos de desarrollo no ha sido hallada en java.library.path: C:\Program Files (x86)\Java\jdk1.5.0_22\bin;.;C:\Windows\system32;C:\Windows;C:\oraclexe\app\oracle\product\11.2.0\server\bin;;d:\oracle\product\11.2.0\dbhome_1\bin;C:\Program Files (x86)\PC Connectivity Solution\;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\Pinnacle\Shared Files\;C:\Program Files\MySQL\MySQL Server 5.5\bin;C:\Program Files (x86)\Calibre2\;C:\Program Files\Windows Imaging\;C:\Program Files\TortoiseHg\;C:\Program Files (x86)\QuickTime\QTSystem\;c:\bin;C:\Program Files\Java\jdk1.6.0_38\bin;C:\Program Files\Apache\apache-maven-3.0.4\bin;R:\gvNIX-1.0.0-RELEASE\bin 22-ene-2013 14:40:29 org.apache.tomcat.util.digester.SetPropertiesRule begin ADVERTENCIA: [SetPropertiesRule]{Server/Service/Engine/Host/Context} Setting property 'source' to 'org.eclipse.jst.jee.server:beques' did not find a matching property. 22-ene-2013 14:40:29 org.apache.coyote.http11.Http11Protocol init INFO: Inicializando Coyote HTTP/1.1 en puerto http-8080 22-ene-2013 14:40:29 org.apache.catalina.startup.Catalina load INFO: Initialization processed in 585 ms 22-ene-2013 14:40:29 org.apache.catalina.core.StandardService start INFO: Arrancando servicio Catalina 22-ene-2013 14:40:29 org.apache.catalina.core.StandardEngine start INFO: Starting Servlet Engine: Apache Tomcat/6.0.32 22-ene-2013 14:40:30 org.apache.catalina.core.ApplicationContext log INFO: Initializing Spring root WebApplicationContext 22-ene-2013 14:40:32 org.apache.catalina.core.StandardContext listenerStart GRAVE: Excepción enviando evento inicializado de contexto a instancia de escuchador de clase org.springframework.web.context.ContextLoaderListener org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'transactionManager' defined in file [C:\Users\JOSE\Documents\workspace-sts-3.1.0.RELEASE\.metadata\.plugins\org.eclipse.wst.server.core\tmp1\wtpwebapps\beques\WEB-INF\classes\META-INF\spring\applicationContext.xml]: Cannot resolve reference to bean 'entityManagerFactory' while setting bean property 'entityManagerFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in file [C:\Users\JOSE\Documents\workspace-sts-3.1.0.RELEASE\.metadata\.plugins\org.eclipse.wst.server.core\tmp1\wtpwebapps\beques\WEB-INF\classes\META-INF\spring\applicationContext.xml]: Invocation of init method failed; nested exception is org.hibernate.HibernateException: Unable to get the default Bean Validation factory at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:328) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:106) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1360) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1118) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:517) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:585) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:913) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:464) at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:385) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:284) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:111) at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4205) at org.apache.catalina.core.StandardContext.start(StandardContext.java:4704) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1053) at org.apache.catalina.core.StandardHost.start(StandardHost.java:840) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1053) at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:463) at org.apache.catalina.core.StandardService.start(StandardService.java:525) at org.apache.catalina.core.StandardServer.start(StandardServer.java:754) at org.apache.catalina.startup.Catalina.start(Catalina.java:595) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:592) at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:289) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:414) Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in file [C:\Users\JOSE\Documents\workspace-sts-3.1.0.RELEASE\.metadata\.plugins\org.eclipse.wst.server.core\tmp1\wtpwebapps\beques\WEB-INF\classes\META-INF\spring\applicationContext.xml]: Invocation of init method failed; nested exception is org.hibernate.HibernateException: Unable to get the default Bean Validation factory at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1455) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:322) ... 30 more Caused by: org.hibernate.HibernateException: Unable to get the default Bean Validation factory at org.hibernate.cfg.beanvalidation.BeanValidationActivator.applyDDL(BeanValidationActivator.java:127) at org.hibernate.cfg.Configuration.applyBeanValidationConstraintsOnDDL(Configuration.java:1704) at org.hibernate.cfg.Configuration.applyConstraintsToDDL(Configuration.java:1654) at org.hibernate.cfg.Configuration.secondPassCompile(Configuration.java:1445) at org.hibernate.cfg.Configuration.buildMappings(Configuration.java:1375) at org.hibernate.ejb.Ejb3Configuration.buildMappings(Ejb3Configuration.java:1519) at org.hibernate.ejb.EventListenerConfigurator.configure(EventListenerConfigurator.java:193) at org.hibernate.ejb.Ejb3Configuration.configure(Ejb3Configuration.java:1100) at org.hibernate.ejb.Ejb3Configuration.configure(Ejb3Configuration.java:689) at org.hibernate.ejb.HibernatePersistence.createContainerEntityManagerFactory(HibernatePersistence.java:73) at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:268) at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:310) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1514) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1452) ... 37 more Caused by: java.lang.reflect.InvocationTargetException at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:592) at org.hibernate.cfg.beanvalidation.BeanValidationActivator.applyDDL(BeanValidationActivator.java:118) ... 50 more Caused by: java.lang.NoClassDefFoundError: javax/xml/bind/JAXBException at org.hibernate.validator.engine.ConfigurationImpl.parseValidationXml(ConfigurationImpl.java:261) at org.hibernate.validator.engine.ConfigurationImpl.buildValidatorFactory(ConfigurationImpl.java:148) at javax.validation.Validation.buildDefaultValidatorFactory(Validation.java:111) at org.hibernate.cfg.beanvalidation.TypeSafeActivator.getValidatorFactory(TypeSafeActivator.java:380) at 2013-01-22 14:40:32,575 [main] ERROR org.springframework.web.context.ContextLoader - Context initialization failed org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'transactionManager' defined in file [C:\Users\JOSE\Documents\workspace-sts-3.1.0.RELEASE\.metadata\.plugins\org.eclipse.wst.server.core\tmp1\wtpwebapps\beques\WEB-INF\classes\META-INF\spring\applicationContext.xml]: Cannot resolve reference to bean 'entityManagerFactory' while setting bean property 'entityManagerFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in file [C:\Users\JOSE\Documents\workspace-sts-3.1.0.RELEASE\.metadata\.plugins\org.eclipse.wst.server.core\tmp1\wtpwebapps\beques\WEB-INF\classes\META-INF\spring\applicationContext.xml]: Invocation of init method failed; nested exception is org.hibernate.HibernateException: Unable to get the default Bean Validation factory at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:328) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:106) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1360) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1118) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:517) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:585) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:913) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:464) at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:385) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:284) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:111) at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4205) at org.apache.catalina.core.StandardContext.start(StandardContext.java:4704) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1053) at org.apache.catalina.core.StandardHost.start(StandardHost.java:840) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1053) at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:463) at org.apache.catalina.core.StandardService.start(StandardService.java:525) at org.apache.catalina.core.StandardServer.start(StandardServer.java:754) at org.apache.catalina.startup.Catalina.start(Catalina.java:595) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:592) at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:289) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:414) Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in file [C:\Users\JOSE\Documents\workspace-sts-3.1.0.RELEASE\.metadata\.plugins\org.eclipse.wst.server.core\tmp1\wtpwebapps\beques\WEB-INF\classes\META-INF\spring\applicationContext.xml]: Invocation of init method failed; nested exception is org.hibernate.HibernateException: Unable to get the default Bean Validation factory at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1455) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:322) ... 30 more Caused by: org.hibernate.HibernateException: Unable to get the default Bean Validation factory at org.hibernate.cfg.beanvalidation.BeanValidationActivator.applyDDL(BeanValidationActivator.java:127) at org.hibernate.cfg.Configuration.applyBeanValidationConstraintsOnDDL(Configuration.java:1704) at org.hibernate.cfg.Configuration.applyConstraintsToDDL(Configuration.java:1654) at org.hibernate.cfg.Configuration.secondPassCompile(Configuration.java:1445) at org.hibernate.cfg.Configuration.buildMappings(Configuration.java:1375) at org.hibernate.ejb.Ejb3Configuration.buildMappings(Ejb3Configuration.java:1519) at org.hibernate.ejb.EventListenerConfigurator.configure(EventListenerConfigurator.java:193) at org.hibernate.ejb.Ejb3Configuration.configure(Ejb3Configuration.java:1100) at org.hibernate.ejb.Ejb3Configuration.configure(Ejb3Configuration.java:689) at org.hibernate.ejb.HibernatePersistence.createContainerEntityManagerFactory(HibernatePersistence.java:73) at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:268) at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:310) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1514) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1452) ... 37 more Caused by: java.lang.reflect.InvocationTargetException at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:592) at org.hibernate.cfg.beanvalidation.BeanValidationActivator.applyDDL(BeanValidationActivator.java:118) ... 50 more Caused by: java.lang.NoClassDefFoundError: javax/xml/bind/JAXBException at org.hibernate.validator.engine.ConfigurationImpl.parseValidationXml(ConfigurationImpl.java:261) at org.hibernate.validator.engine.ConfigurationImpl.buildValidatorFactory(ConfigurationImpl.java:148) at javax.validation.Validation.buildDefaultValidatorFactory(Validation.java:111) at org.hibernate.cfg.beanvalidation.TypeSafeActivator.getValidatorFactory(TypeSafeActivator.java:380) at org.hibernate.cfg.beanvalidation.TypeSafeActivator.applyDDL(TypeSafeActivator.java:109) ... 55 more org.hibernate.cfg.beanvalidation.TypeSafeActivator.applyDDL(TypeSafeActivator.java:109) ... 55 more 22-ene-2013 14:40:32 org.apache.catalina.core.StandardContext start GRAVE: Error listenerStart 22-ene-2013 14:40:32 org.apache.catalina.core.StandardContext start GRAVE: Falló en arranque del Contexto [/beques] debido a errores previos 22-ene-2013 14:40:32 org.apache.catalina.core.ApplicationContext log INFO: Closing Spring root WebApplicationContext 22-ene-2013 14:40:33 org.apache.coyote.http11.Http11Protocol start INFO: Arrancando Coyote HTTP/1.1 en puerto http-8080 22-ene-2013 14:40:33 org.apache.jk.common.ChannelSocket init INFO: JK: ajp13 listening on /0.0.0.0:8009 22-ene-2013 14:40:33 org.apache.jk.server.JkMain start INFO: Jk running ID=0 time=0/158  config=null 22-ene-2013 14:40:33 org.apache.catalina.startup.Catalina start INFO: Server startup in 3309 ms  What can I do? Thanks,   ---  **Affects:** 3.1 GA","closed","status: declined,","spring-projects-issues","2013-01-22T06:12:58Z","2019-01-12T16:24:30Z"
"","14899","ConfigurationClassBeanDefinitionReader: Scoped-Proxy BeanDefinitions cannot be overriden by other configuration classes [SPR-10265]","**[Jose Luis Martin](https://jira.spring.io/secure/ViewProfile.jspa?name=jlm)** opened **[SPR-10265](https://jira.spring.io/browse/SPR-10265?redirect=false)** and commented  ConfigurationClassBeanDefinitionReader.loadBeanDefinitionsForBeanMethod() register scoped proxies using a RootBeanDefinition from ScopedProxyCreator.createScopedProxy() so the BeanDefinition cannot be overriden by other configuration classes.  ```  // replace the original bean definition with the target one, if necessary   BeanDefinition beanDefToRegister = beanDef; 		if (proxyMode != ScopedProxyMode.NO) { 			BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy( 					new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS); 			beanDefToRegister = proxyDef.getBeanDefinition(); 		}  ```  I guess it should register a ConfigurationClassBeanDefinition instead. For example:  ```  	// replace the original bean definition with the target one, if necessary 		BeanDefinition beanDefToRegister = beanDef; 		if (proxyMode != ScopedProxyMode.NO) { 			BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy( 					new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS); 			beanDefToRegister = new ConfigurationClassBeanDefinition((RootBeanDefinition) proxyDef.getBeanDefinition(), configClass); 		} ```  that uses the following constructor in ConfigurationClassBeanDefinition:  ``` public ConfigurationClassBeanDefinition(RootBeanDefinition original, ConfigurationClass configClass) { 			super(original); 			this.annotationMetadata = configClass.getMetadata(); 		} ```    ---  **Affects:** 3.2.1  **Reference URL:** http://stackoverflow.com/questions/14692561/how-do-i-override-a-scoped-bean-for-tests  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6b82d293d5ed2ec6f4e02432594a73e354d17928","closed","in: core,","spring-projects-issues","2013-02-06T01:52:13Z","2013-02-06T11:39:12Z"
"","15404","Regression in 3.1.3 concerning LoadTimeWeaving [SPR-10777]","**[Jorg Heymans](https://jira.spring.io/secure/ViewProfile.jspa?name=heymjo)** opened **[SPR-10777](https://jira.spring.io/browse/SPR-10777?redirect=false)** and commented  Up until 3.1.2, we were able to create a LocalEntityManagerFactoryBean that was dependent on classes declared using `@Configurable`. It seems that the fix for #14490 inadvertently broke this behaviour.  ---  **Affects:** 3.1.3, 3.2.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e4d83bbefea248cdf24a6ead6017139a6676a066, https://github.com/spring-projects/spring-framework/commit/9035a97e1872dac14efec45dee1f70ab9e4bf493","closed","in: core,","spring-projects-issues","2013-07-24T04:54:44Z","2019-01-12T16:23:47Z"
"","14690","AbstractApplicationEventMulticaster does not sort listeners using @Order [SPR-10057]","**[Jorg Heymans](https://jira.spring.io/secure/ViewProfile.jspa?name=heymjo)** opened **[SPR-10057](https://jira.spring.io/browse/SPR-10057?redirect=false)** and commented  AbstractApplicationEventMulticaster.getApplicationListeners calles OrderComparator.sort at the end, but this sort only takes into account the Ordered interface which listeners are then forced to implement. It would be nice to be able to instead be able to use `@Order` on the listener.  ---  **Affects:** 3.1.3  **Issue Links:** - #17018 Support `@Order` on ApplicationListeners (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2012-11-29T04:20:46Z","2019-01-13T07:01:55Z"
"","15013","EL expression / Resolved does not update value of bean in some condition [SPR-10380]","**[jorelia](https://jira.spring.io/secure/ViewProfile.jspa?name=jorelia)** opened **[SPR-10380](https://jira.spring.io/browse/SPR-10380?redirect=false)** and commented  We run WAS 8.0.0.x (x is 3 to 5) and we also test the case with JSF Mojarra 2.1.17, 2.1.19 and 2.1.20 and also RichFaces 4.2.1 and 4.3.1.  The application is running well under SPRING 3.0.6 whith any of above versions of any above framework with a minor problem with JSF Mojarra 2.1.20  What is happening is a little bit difficult to describe due to the conplexity of the application. However, we think that we have pinpoint a problem around the EL expression in particular conditions.  It's about a Web application in Single Page Application. Then the site is made of only one single page and this page is refreshed by ajax calls and dynamic includes of xhtml.  The problem comes when we include dynanically an XHTML fragment and that fragment contain a rich:datatable. Inside the rich:datatable, we have variable that is not updated with the most recent value. It keeps always the same value. The variable comes from the enclose page that creates dynamic tabs.  If you see the screen capture, we should have a value (-01-3 - green) instead of having the value (01-01) from the red. The variable is not update when the value is inside a rich:datatable / a4j:commandLink  Here is the involved code:  ```  basePase.xml (the page template)     |     |     |   index.xhtml  (We have tabs)     |     |---- include : searchClient.xhtml  (First static tab)     |     |----- listClient.xhtml  (dynamic tab inside a subview) - declare the ""tab"" variable                  |                  |                  |----- rich:datable (Iteration on a collection of clients)                  |                  |                  |-----","closed","status: bulk-closed,","spring-projects-issues","2013-03-14T13:33:00Z","2019-01-13T21:04:04Z"
"","15010","Having the Spring version at the startup time [SPR-10377]","**[jorelia](https://jira.spring.io/secure/ViewProfile.jspa?name=jorelia)** opened **[SPR-10377](https://jira.spring.io/browse/SPR-10377?redirect=false)** and commented  I know it is not the first time that somebody requests this simple and necessary feature: http://forum.springsource.org/archive/index.php/t-23381.html  Moreover, most of softwares display the version number, it is a must in order to verify on server if we're running the good version after deploying a new ear, and so on.  Here is some versions number of other softwares at the startup time of WAS 8.0.0.X  PLEASE ! give us a way to easy check the version of each spring component at the startup time - Thank you.  ```   WebSphere Platform 8.0.0.4 [ND 8.0.0.4 cf041228.02] running with process name 28760prepBlrApp\2a114prepBlrPLApp\crm_blr and process id 14614732 Host Operating System is AIX, version 6.1 Java version = 1.6.0, Java Compiler = j9jit26, Java VM name = IBM J9 VM was.install.root = /opt/WebSphere8/AppServer user.install.root = /opt/WebSphere8/AppServer/profiles/2a114prepBlrPLApp Java Home = /opt/WebSphere8/AppServer/java/jre ws.ext.dirs = /opt/IBM/ITM/aix533/yn/wasdc/7.1.0.3.4/toolkit/lib/ext/tk_orbinterceptor.jar:/opt/IBM/ITM/aix533/yn/wasdc/7.1.0.3.4/itcamdc/lib/ext/ws-handlers.jar:/opt/WebSphere8/AppServer/java/lib:/opt/WebSphere8/AppServer/profiles/2a114prepBlrPLApp/classes:/opt/WebSphere8/AppServer/classes:/opt/WebSphere8/AppServer/lib:/opt/WebSphere8/AppServer/installedChannels:/opt/WebSphere8/AppServer/lib/ext:/opt/WebSphere8/AppServer/web/help:/opt/WebSphere8/AppServer/deploytool/itp/plugins/com.ibm.etools.ejbdeploy/runtime Classpath = /opt/WebSphere8/AppServer/profiles/2a114prepBlrPLApp/properties:/opt/WebSphere8/AppServer/properties:/opt/WebSphere8/AppServer/lib/startup.jar:/opt/WebSphere8/AppServer/lib/bootstrap.jar:/opt/WebSphere8/AppServer/lib/jsf-nls.jar:/opt/WebSphere8/AppServer/lib/lmproxy.jar:/opt/WebSphere8/AppServer/lib/urlprotocols.jar:/opt/WebSphere8/AppServer/deploytool/itp/batchboot.jar:/opt/WebSphere8/AppServer/deploytool/itp/batch2.jar:/opt/WebSphere8/AppServer/java/lib/tools.jar:/opt/WebSphere8/AppServer/profiles/2a114prepBlrPLApp/config/cells/28760prepBlrApp/nodes/2a114prepBlrPLApp/projects/crm_blr:/opt/appresources/ebtp/belair/aq/autoquote Java Library path = /opt/WebSphere8/AppServer/lib/native/aix/ppc_64/:/opt/WebSphere8/AppServer/java/jre/lib/ppc64/default:/opt/WebSphere8/AppServer/java/jre/lib/ppc64:/opt/WebSphere8/AppServer/java/jre/lib/ppc64/j9vm:/opt/WebSphere8/AppServer/java/jre/../lib/ppc64:/opt/WebSphere8/AppServer/bin:/usr/lib:/opt/IBM/ITM/aix533/yn/wasdc/7.1.0.3.4/toolkit/lib/aix536:/opt/IBM/ITM/aix533/yn/wasdc/7.1.0.3.4/toolkit/lib/aix536/ttapi: Orb Version = IBM Java ORB build orb626ifx-20120410.00 (SR2FP1+191257)  [3/4/13 10:46:01:180 EST] 00000000 Version       I   HMGR0226I: The core stack configuration parameter IBM_CS_WIRE_FORMAT_VERSION has been set to 6.1.0. [3/4/13 10:46:01:189 EST] 00000000 Version       I   HMGR0226I: The core stack configuration parameter IBM_CS_HAM_PROTOCOL_VERSION has been set to 6.0.2.31.  [3/4/13 10:46:51:243 EST] 00000016 InternalGener I   DSRA8203I: Database product name : Oracle [3/4/13 10:46:51:252 EST] 00000016 InternalGener I   DSRA8204I: Database product version : Oracle Database 10g Enterprise Edition Release 10.2.0.5.0 - 64bit Production With the Partitioning, Real Application Clusters, Data Mining and Real Application Testing options [3/4/13 10:46:51:253 EST] 00000016 InternalGener I   DSRA8205I: JDBC driver name  : Oracle JDBC driver [3/4/13 10:46:51:253 EST] 00000016 InternalGener I   DSRA8206I: JDBC driver version  : 11.2.0.2.0 [3/4/13 10:46:51:254 EST] 00000016 InternalOracl I   DSRA8212I: DataStoreHelper name is: com.ibm.websphere.rsadapter.Oracle11gDataStoreHelper. [3/4/13 10:46:51:254 EST] 00000016 WSRdbDataSour I   DSRA8208I: JDBC driver type  : 4  [3/4/13 10:47:21:273 EST] 00000016 config        I   Initializing Mojarra 2.1.19 ( 20130213-1512 https://svn.java.net/svn/mojarra~svn/tags/2.1.19@11614) for context '/CrmWeb'  [3/4/13 10:47:31:878 EST] 00000016 Application   I org.richfaces.application.InitializationListener onStart RichFaces Core Implementation by JBoss by Red Hat, version 4.2.3.Final   [3/4/13 10:46:05:852 EST] 00000000 JMSRegistrati A   WMSG1611I: The installed level of the WebSphere MQ messaging provider is 7.0.1.7.  [3/4/13 10:46:05:860 EST] 00000000 JMSRegistrati I   WMSG1703I: RAR implementation version 7.0.1.7-k701-107-111107 ```  NOTE: We use spring 3.2.1   ---  **Affects:** 3.2.2","closed","status: bulk-closed,","spring-projects-issues","2013-03-14T06:47:20Z","2019-01-12T00:24:57Z"
"","14864","Cannot create relative URIs with UriComponents [SPR-10231]","**[Jongwook Choi](https://jira.spring.io/secure/ViewProfile.jspa?name=wookayin)** opened **[SPR-10231](https://jira.spring.io/browse/SPR-10231?redirect=false)** and commented  When creating a URI using UriComponentsBuilder, we would get an instance of type HierarchicalUriComponents (unless it ends with opaque uri).  However, HiererarchicalUriComponents#toUri() (and something else such as #toUriString) prepends the path delimiter character ('/') in front of path, which results in an invalidly constructured URI.  Please see:  ```java // kind of what I expected assertThat(new URI(""../../"").getPath(), equalTo(""../../""));  // fails, the actual result is '/../../' assertThat(URIComponentsBuilder.fromUriString(""../../"").build().toURI().getPath(), equalTo(""../../"")); ```  A gist https://gist.github.com/4663472 describes the situation in detail.  Is this behaviour of HierarchicalUriComponents is intended, or a bug? If so, I think there should exists a way that one can build such relative URIs using UriComponentsBuilder.  (While I can use the constructor of URI as a workaround, malformed URIs are worried. This is why I try to use Spring's UriComponents.)  Thanks!   ---  **Affects:** 3.2 GA, 3.2.1  **Reference URL:** https://gist.github.com/4663472  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2ca75386f1e9a1c9f12c71ce56e47c3dee998703","closed","type: enhancement,","spring-projects-issues","2013-01-29T03:03:40Z","2013-02-11T12:17:21Z"
"","14857","MockHttpSession.getAttributeNames() should return Enumeration on a new collection [SPR-10224]","**[John Tippabattuni](https://jira.spring.io/secure/ViewProfile.jspa?name=jtippabattuni)** opened **[SPR-10224](https://jira.spring.io/browse/SPR-10224?redirect=false)** and commented  The implementation of `MockHttpSession.getAttributeNames()` was changed in Spring Framework 3.2.1 to return an enumeration created from the attributes collection in the session:  ``` -    return new Vector(this.attributes.keySet()).elements(); +    return Collections.enumeration(this.attributes.keySet()); ```  This causes a `ConcurrentModificationException` if a session attribute is removed while iterating through the enumeration. This also makes the mock less usable as it does not reflect the behavior in servlet containers like Tomcat:  ``` Set names = new HashSet(); names.addAll(attributes.keySet()); return Collections.enumeration(names); ```  ---  **Affects:** 3.2.1  **Issue Links:** - #14923 MockHttpSession and MockHttpServletRequest throw ConcurrentModificationException when removing attributes in a loop  (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6a98b40e1c76a285dd2c364fc189a960f6598615","closed","type: bug,","spring-projects-issues","2013-01-28T09:47:19Z","2019-01-11T21:36:09Z"
"","15397","add support for MockRestServiceServer to verify that a header does not exist [SPR-10771]","**[John Mark](https://jira.spring.io/secure/ViewProfile.jspa?name=springiscool)** opened **[SPR-10771](https://jira.spring.io/browse/SPR-10771?redirect=false)** and commented  The current API for MockRestServiceServer and MockRestRequestMatchers does not allow a test to validate that a certain header value does not exist.  Trying to do  ``` .andExpect(header(""Custom-Header"", Matchers.nullValue())) ```  does not work because it requires the header to first exist, and then checks the Matcher.  I would like to be able to so something like this:  ``` .andExpect(header(""Custom-Header"").doesNotExist()) ```  or something to that effect.  Unfortunately, I don't see any workaround for this until spring-test supports it. I was forced to use Mockito ArgumentCaptors in order to verify this requirement, but that meant that I couldn't use MockRestServiceServer.   ---  **Affects:** 3.2.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4bf5a0234c6c5c5d6591eb0fa52db3bf09573d9f","closed","type: enhancement,","spring-projects-issues","2013-07-23T11:14:58Z","2019-09-27T15:01:27Z"
"","15382","Add explicit support for the Warning header in HttpHeaders [SPR-10756]","**[John Mark](https://jira.spring.io/secure/ViewProfile.jspa?name=springiscool)** opened **[SPR-10756](https://jira.spring.io/browse/SPR-10756?redirect=false)** and commented  It would be nice if HttpHeaders explicitly supported the Warning header as defined by HTTP/1.1 (see http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.46).  I would like to be able to do something like this:  ``` addWarning(new HttpWarning(warn_code, warn_agent, warn_text, warn_date));  List warnings = getWarnings(); ```  HttpWarning() would be similar to http://msdn.microsoft.com/en-us/library/system.net.http.headers.warningheadervalue.aspx   ---  **Affects:** 3.2.3","closed","status: bulk-closed,","spring-projects-issues","2013-07-18T09:02:03Z","2019-01-12T00:22:36Z"
"","15112","Allow choice of autowiring empty collections instead of null (in prototype beans) [SPR-10479]","**[John Hendrikx](https://jira.spring.io/secure/ViewProfile.jspa?name=john16384)** opened **[SPR-10479](https://jira.spring.io/browse/SPR-10479?redirect=false)** and commented  I've been looking for hours on how to possibly get Spring to wire up a collection as an empty collection instead of null when no matching Beans are found for the collection type.  The documentation hints at being able to replace the default CustomCollectionEditors (which have a tantalizing ""nullAsEmptyCollection"" constructor parameter), but so far, none of my replacement attempts have resulted in my PropertyEditor actually being used during autowiring (it's instantiated, but not used).  Things I tried:  ``` ((ConfigurableBeanFactory)applicationContext.getBeanFactory()).registerCustomEditor(Set.class, DefaultCustomCollectionEditor.class); ```  ...ends up being instantiated (several times) but not being used for the actual wiring.  Another thing I tried:  ```   @Bean(name = ""customEditorConfigurer"")   public CustomEditorConfigurer getCustomEditorConfigurer() {     CustomEditorConfigurer configurer = new CustomEditorConfigurer();      configurer.setCustomEditors(new HashMap() {{       put(""java.util.Set"", ""hs.dm.DefaultCustomCollectionEditor"");     }});      configurer.setOrder(Integer.MIN_VALUE);      return configurer;   } ```  ... again, instantiated, but not used.  I've tried seeing if there is anyway to get a hold of the BeanWrapperImpl class, which has a ""overrideDefaultEditor"" method in its PropertyEditorRegistrySupport parent class, but I don't know how to reach it.  The source code for PropertyEditorRegistrySupport in #createDefaultEditors again hints at the option to replace them, but I cannot find how:  ``` // Default instances of collection editors. // Can be overridden by registering custom instances of those as custom editors. this.defaultEditors.put(Collection.class, new CustomCollectionEditor(Collection.class)); this.defaultEditors.put(Set.class, new CustomCollectionEditor(Set.class)); this.defaultEditors.put(SortedSet.class, new CustomCollectionEditor(SortedSet.class)); this.defaultEditors.put(List.class, new CustomCollectionEditor(List.class)); this.defaultEditors.put(SortedMap.class, new CustomMapEditor(SortedMap.class)); ```  Section 7.4.2 ""Built-in PropertyEditor implementations"" of the manual makes it all look easy, but I cannot get it to work (atleast not while Autowiring -- there are probably other uses for such custom editors).  In short, my request is whether or not there is a solution to inject empty collections (instead of null), and possibly to consider adding such a feature in an easily accessible way.   ---  **Affects:** 3.2.2","closed","status: bulk-closed,","spring-projects-issues","2013-04-21T03:52:42Z","2019-01-12T03:43:18Z"
"","15111","Caching problem in AutowiredAnnotationBeanPostProcessor with Autowired collections in prototype beans [SPR-10478]","**[John Hendrikx](https://jira.spring.io/secure/ViewProfile.jspa?name=john16384)** opened **[SPR-10478](https://jira.spring.io/browse/SPR-10478?redirect=false)** and commented  The issue occurs when Beans are registered and removed from the BeanDefinitionRegistry.  When there are no matching Beans initially to fill the autowired collection, this result is cached and re-used even when later a matching Bean might be available.  However, when initially a Bean **is** available when the autowired collection is first initialized, then adding/removing matching Beans works as expected.  The Unit Test below fails at the second assert:  ```   @Test   public void shouldAutowireTextProviderUser() {     TextProviderUser user1 = (TextProviderUser)applicationContext.getBean(""TextProviderUser"");      Assert.assertEquals(0, user1.getAllTexts().size());      registry.registerBeanDefinition(""dynamicBean2"", new RootBeanDefinition(DefaultTextProvider.class));     TextProviderUser user2 = (TextProviderUser)applicationContext.getBean(""TextProviderUser"");      Assert.assertEquals(1, user2.getAllTexts().size());      registry.removeBeanDefinition(""dynamicBean2"");      TextProviderUser user3 = (TextProviderUser)applicationContext.getBean(""TextProviderUser"");      Assert.assertEquals(0, user3.getAllTexts().size());   } ```  Disabling the caching mechanism (by disabling the cache check in AutowiredAnnotationBeanProcessor) makes this unit test pass.  I think that the result of ""resolveDependency"" is null when no matching Beans are available for the autowired collection, and due to the caching this keeps getting reused.  This problem might not even be specific to autowired collections... I suspect it may also occur for optional Autowired fields (in prototype beans).  The entire caching mechanism might be inappropriate for prototype beans.   ---  **Affects:** 3.2.2  **Reference URL:** http://forum.springsource.org/showthread.php?136538-Trouble-autowiring-a-list-with-dynamic-beans","closed","status: bulk-closed,","spring-projects-issues","2013-04-20T12:45:35Z","2019-01-12T00:23:47Z"
"","14909","Assertion message unclear when expected and actual have same string representation [SPR-10275]","**[Johannes Mockenhaupt](https://jira.spring.io/secure/ViewProfile.jspa?name=jotomo)** opened **[SPR-10275](https://jira.spring.io/browse/SPR-10275?redirect=false)** and commented  I'm using MockMVC to test a REST service, where the test looks something like this:  ``` mockMvc.perform(...).andExpect(jsonPath(""$.nr"").value(""5"")); ```  Which gives me this assertion error:  ``` java.lang.AssertionError: JSON path$.nr expected: but was: 	at org.springframework.test.util.AssertionErrors.fail(AssertionErrors.java:60) 	at org.springframework.test.util.AssertionErrors.assertEquals(AssertionErrors.java:89) 	at org.springframework.test.util.JsonPathExpectationsHelper.assertValue(JsonPathExpectationsHelper.java:99) 	at org.springframework.test.web.servlet.result.JsonPathResultMatchers$2.match(JsonPathResultMatchers.java:65) 	at org.springframework.test.web.servlet.MockMvc$1.andExpect(MockMvc.java:141) 	at ... ```  Debugging into the code I see that the expected result is of type String, while the actual result is of type Integer. It would be helpful if the types could be given in the message, maybe only if the string representation of _expected_ and _actual_ is the same.   ---  **Affects:** 3.2.1  **Attachments:** - [Bildschirmfoto 2013-06-25 um 10.20.07.png](https://jira.spring.io/secure/attachment/21257/Bildschirmfoto+2013-06-25+um+10.20.07.png) (_189.55 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b47d97c23a24a10305c8a82ba4acc823ce52f088","closed","type: enhancement,","spring-projects-issues","2013-02-08T02:46:15Z","2013-06-25T01:22:47Z"
"","14834","MockFilterChain only executed the first filter [SPR-10201]","**[Johannes Lehmann](https://jira.spring.io/secure/ViewProfile.jspa?name=johanneslehmann)** opened **[SPR-10201](https://jira.spring.io/browse/SPR-10201?redirect=false)** and commented  When using the new MockMvc testing functionality I found that when I add a filter via ""MockMvcBuilders.webAppContextSetup(wac).addFilter(filter).build();"", the Filter will run but the method on the `@Controller` mapped to the request will never get executed.  Having debugged this the problem seems to be that MockFilterChain only executes the first Filter when doFilter(...) is called, even though the JavaDoc says it will execute all Filters. The second Filter however maps the request to the servlet, which is why that never got executed.  Here is the method:  ```java public void doFilter(ServletRequest request, ServletResponse response) throws IOException, ServletException { 		Assert.notNull(request, ""Request must not be null""); 		Assert.notNull(response, ""Response must not be null"");  		if (this.request != null) { 			 throw new IllegalStateException(""This FilterChain has already been called!""); 		}  		if (this.iterator == null) { 			this.iterator = this.filters.iterator(); 		}  		if (this.iterator.hasNext()) { 			Filter nextFilter = this.iterator.next(); 			nextFilter.doFilter(request, response, this); 		}  		this.request = request; 		this.response = response; 	} ```  Should the last if be a while? (Hope I haven't misunderstood the intent here)   ---  **Affects:** 3.2 GA","closed","in: web,","spring-projects-issues","2013-01-22T01:34:48Z","2019-01-11T21:38:09Z"
"","15107","Fix cron trigger example in reference documentation [SPR-10474]","**[Joe Gamache](https://jira.spring.io/secure/ViewProfile.jspa?name=blackduck.joe)** opened **[SPR-10474](https://jira.spring.io/browse/SPR-10474?redirect=false)** and commented  The latest (3.2) documentation (section 27.3) uses this cron expression:  new CronTrigger(""* 15 9-17 * * MON-FRI"")  and states that ""is being scheduled to run 15 minutes past each hour but only during the 9-to-5"",  but in reality, this is going to schedule EVERY SECOND during that minute (I guess assuming the task is short enough).  At least it does when using the Scheduled annotation.  (The documentation there is ambiguous which should probably be cleaned up too...)   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/dac8c9e0f684a412dcb25ddef798d6d14f938acb, https://github.com/spring-projects/spring-framework/commit/48838d48d27ef9d029c81c2c1ff655111f93d893, https://github.com/spring-projects/spring-framework/commit/f6dd7e4df8f37d8626155d470da3c775b2a7cec8  **Backported to:** [4.1.9](https://github.com/spring-projects/spring-framework/milestone/133?closed=1), [3.2.16](https://github.com/spring-projects/spring-framework/milestone/104?closed=1)","closed","type: documentation,","spring-projects-issues","2013-04-18T07:34:55Z","2015-11-15T17:03:14Z"
"","15072","Add more flexibility to @Qualifier [SPR-10439]","**[Joe Gamache](https://jira.spring.io/secure/ViewProfile.jspa?name=blackduck.joe)** opened **[SPR-10439](https://jira.spring.io/browse/SPR-10439?redirect=false)** and commented  The string value passed into the `@Qualifier` annotation is too restrictive.  Ideally, it should be able to be dynamic.  If this is really not possible, then it should be able to be static for a given program execution, but dynamic enough to be set by something like an environment variable.   --- No further details from [SPR-10439](https://jira.spring.io/browse/SPR-10439?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2013-04-03T13:24:02Z","2019-01-12T00:24:21Z"
"","15065","multiple  don't work [SPR-10432]","**[Jiří Vypědřík](https://jira.spring.io/secure/ViewProfile.jspa?name=vypedrik)** opened **[SPR-10432](https://jira.spring.io/browse/SPR-10432?redirect=false)** and commented  Declaring multiple definition for resource handling doesn't always work. For instance, the second entry in the example below is not reached because the first handler is terminated with 404.  ```   ```    ---  **Affects:** 3.2.1, 3.2.2","closed","status: invalid,","spring-projects-issues","2013-04-01T00:25:01Z","2019-01-12T05:27:08Z"
"","14960","By-type matching caches in DefaultListableBeanFactory should be cleared on registerSingleton [SPR-10326]","**[Jiri Pejchal](https://jira.spring.io/secure/ViewProfile.jspa?name=jiri.pejchal)** opened **[SPR-10326](https://jira.spring.io/browse/SPR-10326?redirect=false)** and commented  During upgrade from spring 3.1.1 to spring 3.2 I've met to the following problem:  Application consists of * several application modules, each one has it's on applicationContext with beanFacory * shared parent application context * modules are initialized in specified order  If I wanted to autowire (`@Autowire`) bean from `module A` in `module B` I have to publish it to shared parent application context:  ```java parentBeanFactory.registerSingleton(""moduleName"" + ""."" + beanName, bean); ```  That was working in spring 3.1.1. In spring 3.2.1 bean metadata are cached and autowiring of bean from `module A` published to parent context fails in `module B`:  during autowiring in module A: * bean cache by type in `DefaultListableBeanFacory` is initialized with entry `\[Bean.class, {""beanName""}\]` * bean caches in all parent bean factories are initialized with entry `\[Bean.class, {}\]`","closed","in: core,","spring-projects-issues","2013-02-22T13:45:25Z","2019-01-13T21:04:13Z"
"","14766","Cannot compile with org.springframework.aop.MethodBeforeAdvice in Spring 3.2.0 [SPR-10133]","**[Jing Chen](https://jira.spring.io/secure/ViewProfile.jspa?name=landscape)** opened **[SPR-10133](https://jira.spring.io/browse/SPR-10133?redirect=false)** and commented  package com.aop;  import java.lang.reflect.Method;  import org.springframework.aop.MethodBeforeAdvice;  public class MyMethodBeforeAdvice implements MethodBeforeAdvice {      @Override     public void before(Method arg0, Object[] arg1, Object arg2)     		throws Throwable {          }  } // this is the code snippet With Spring 3.2.0,when I created a class implements MethodBeforeAdvice, import relevant file. There is an error that the code cannot be compiled. I changed to Spring 2.5.6, it works well.    ---  **Affects:** 3.2 GA","closed","in: core,","spring-projects-issues","2012-12-30T11:07:14Z","2019-01-11T21:23:33Z"
"","15253","SQL syntax error in jdbcTemplate update example [SPR-10625]","**[Jim Garrison](https://jira.spring.io/secure/ViewProfile.jspa?name=jhgnwea)** opened **[SPR-10625](https://jira.spring.io/browse/SPR-10625?redirect=false)** and commented  ```java this.jdbcTemplate.update(         ""update t_actor set = ? where id = ?"",         ""Banjo"", 5276L); ```  missing column name in ""set"" clause   ---  **Affects:** 3.2.3  **Reference URL:** http://static.springsource.org/spring/docs/3.2.x/spring-framework-reference/html/jdbc.html#jdbc-JdbcTemplate-examples-update  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5ee6bb9b9bde7f3e1507045e8b1da845a0e59403, https://github.com/spring-projects/spring-framework/commit/71e88cbf30fad44e8162d159d6395c5cdb1178b3","closed","type: documentation,","spring-projects-issues","2013-06-04T10:55:12Z","2013-07-31T13:23:48Z"
"","14739","AutowiredAnnotationBeanPostProcessor made mistake to check the bean is unique [SPR-10106]","**[jerryscott](https://jira.spring.io/secure/ViewProfile.jspa?name=jerryscott2012)** opened **[SPR-10106](https://jira.spring.io/browse/SPR-10106?redirect=false)** and commented  I create the self annotation with `@Qualifier`(spring provided) like this: `@Target`({ ElementType.FIELD, ElementType.METHOD, ElementType.TYPE, ElementType.ANNOTATION_TYPE }) `@Retention`(RetentionPolicy.RUNTIME) `@Qualifier` public `@interface` MsgDefineQualifier { ChannelType channelType(); }  then I create 2 beans in `@Configuration` bean like this: `@MsgDefineQualifier`(channelType = ChannelType.E_POS) `@Bean` public IChannelMsgDefine getPosChannelMsgDefine() { return new IChannelMsgDefine() {      		@Override     		public Sign getMsgSign() {     			return Sign.MD5;     		}          		@Override     		public Charset getMsgCharset() {     			return Charset.UTF_8;     		}          		@Override     		public Format getMsgFormat() {     			return Format.JSON;     		}          		@Override     		public Cipher getMsgCipher() {     			return Cipher.NON;     		}          		@Override     		public Compress getMsgCompress() {     			return Compress.FLATOR;     		}          	};     }              @MsgDefineQualifier(channelType = ChannelType.P_GATE)     @Bean     public IChannelMsgDefine getEGateChannelMsgDefine() {     	return new IChannelMsgDefine() {          		@Override     		public Sign getMsgSign() {     			return Sign.MD5;     		}          		@Override     		public Charset getMsgCharset() {     			return Charset.GBK;     		}          		@Override     		public Format getMsgFormat() {     			return Format.PURE;     		}          		@Override     		public Cipher getMsgCipher() {     			return Cipher.RPC;     		}          		@Override     		public Compress getMsgCompress() {     			return Compress.NON;     		}          	};     }  but once I want to inject some of the bean in other place like this:  `@MsgDefineQualifier`(channelType = ChannelType.P_GATE) `@Autowired`	 private IChannelMsgDefine eGateChannelMsgDefine;  spring3.2 GA throw exception in such trace: org.springframework.beans.factory.NoSuchBeanDefinitionException: No unique bean of type [com.congoal.channel.msg.protocol.IChannelMsgDefine] is defined: expected single matching bean but found 2: [getPosChannelMsgDefine, getEGateChannelMsgDefine]  particularly in linux enviroment(jdk version is : 1.6.0_37) while not occruing in windowx(that's very strange).  The attachment shows the part of the stack trace.  ---  **Affects:** 3.2 GA  **Attachments:** - [stacktrace.txt](https://jira.spring.io/secure/attachment/20816/stacktrace.txt) (_3.99 kB_)  **Issue Links:** - #14740 Autowiring with `@Qualifier` and `@Qualifier` meta annotation fails in Spring 3.2 (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2012-12-17T19:04:37Z","2019-01-13T07:01:48Z"
"","14882","Loading of java.lang.annotation.Target class requires access to java rt.jar [SPR-10249]","**[Jens Lindman](https://jira.spring.io/secure/ViewProfile.jspa?name=jlindman)** opened **[SPR-10249](https://jira.spring.io/browse/SPR-10249?redirect=false)** and commented  There seems to be more problems when loading java core classes when running with a security manager. I waited for the fix for #14691 in Spring 3.2 since I got the problem with java.lang.Object class. Now it seems to be the same issue with java.lang.annotation.Target class.  Output:  access: access denied (""java.io.FilePermission"" ""/usr/java/jdk1.7.0_09/jre/lib/rt.jar"" ""read"")  leads to the following exception: Caused by: java.io.FileNotFoundException: class path resource [java/lang/annotation/Target.class] cannot be opened because it does not exist at org.springframework.core.io.ClassPathResource.getInputStream(ClassPathResource.java:157) at org.springframework.core.type.classreading.SimpleMetadataReader.\(SimpleMetadataReader.java:49) at org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(SimpleMetadataReaderFactory.java:80) at org.springframework.core.type.classreading.CachingMetadataReaderFactory.getMetadataReader(CachingMetadataReaderFactory.java:102) at org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(SimpleMetadataReaderFactory.java:76) at org.springframework.context.annotation.ConfigurationClassParser.getImports(ConfigurationClassParser.java:298) at org.springframework.context.annotation.ConfigurationClassParser.getImports(ConfigurationClassParser.java:300) at org.springframework.context.annotation.ConfigurationClassParser.getImports(ConfigurationClassParser.java:300) at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:230) at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:153) at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:130) at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:285) ... 41 more  Environment: Jetty 7.6.8, Spring 3.2.1 and Java 1.7.0_09.  ---  **Affects:** 3.2.1","closed","in: core,","spring-projects-issues","2013-01-31T05:50:09Z","2019-01-11T21:32:34Z"
"","15311","ContentNegotiatingViewResolver does not select any views if no content types are requested [SPR-10683]","**[Jeff Knecht](https://jira.spring.io/secure/ViewProfile.jspa?name=jknecht)** opened **[SPR-10683](https://jira.spring.io/browse/SPR-10683?redirect=false)** and commented  Browser: Internet Explorer 8 App Server: Tomcat 6.0.36 JVM version: 1.7  A spring web-mvc project fails with the following `ViewResolver` error when the user clicks the refresh button or 'F5' in Internet Explorer 8.  This behavior functions correctly in Spring 3.2.2 and appears to have broken in Spring 3.2.3.  A small web project demonstrating the issue is attached.  ``` SEVERE: Servlet.service() for servlet appServlet threw exception javax.servlet.ServletException: Could not resolve view with name 'index' in servlet with name 'appServlet' 	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1190) 	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:992) 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:939) 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:856) 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:936) 	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:827) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:617) 	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:812) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233) 	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191) 	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127) 	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:103) 	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) 	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:293) 	at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:861) 	at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:606) 	at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:489) 	at java.lang.Thread.run(Thread.java:722) ```  ---  **Affects:** 3.2.3  **Attachments:** - [ie-refresh.zip](https://jira.spring.io/secure/attachment/21254/ie-refresh.zip) (_20.69 kB_)  **Issue Links:** - #15387 ContentNegotiatingViewResolver  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/675ec4c3e2664d387c13a9bc1af58db2048b16a1, https://github.com/spring-projects/spring-framework/commit/7fdd0c22b2354c9b3122dd30f8f76fd212a27dba  0 votes, 6 watchers","closed","type: bug,","spring-projects-issues","2013-06-24T10:17:01Z","2019-01-11T22:22:38Z"
"","15114","MVC DispatcherServlet throw exception in noHandlerFound [SPR-10481]","**[Jeff Begin](https://jira.spring.io/secure/ViewProfile.jspa?name=jbegin)** opened **[SPR-10481](https://jira.spring.io/browse/SPR-10481?redirect=false)** and commented  Is it possible for DispatcherServlet, when no handler mapping was found and noHandlerFound(HttpServletRequest, HttpServletResponse) is called, to throw an exception?  This would allow any configured HandlerExceptionResolvers to generate a response for that exception beyond the default behavior.  This is particularly useful for a REST API where an HTML response is unwanted.  As of 3.2.1, it looks like the behavior is to log the error then call HttpServletResponse.sendError(HttpServletResponse.SC_NOT_FOUND).  I tried out the attached example, and my HandlerExceptionResolver handles the exception and returns JSON.  If there's a better way to do this, or this isn't a good idea, apologies for the spam.   ---  **Affects:** 3.2.1  **Attachments:** - [ErrorHandlingDispatchServlet.java](https://jira.spring.io/secure/attachment/21171/ErrorHandlingDispatchServlet.java) (_495 bytes_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/62d6a43c61efd7121982c5addfff07c4f8938e1e, https://github.com/spring-projects/spring-framework/commit/a64441e12931c8bde6fcc45717f80c6b4008d148","closed","type: enhancement,","spring-projects-issues","2013-04-22T14:56:05Z","2019-01-11T21:11:50Z"
"","15039","Filter ressource and ajax/jsp  [SPR-10406]","**[jean paul audran](https://jira.spring.io/secure/ViewProfile.jspa?name=jean%20paul%20audran)** opened **[SPR-10406](https://jira.spring.io/browse/SPR-10406?redirect=false)** and commented  when we attempt to use `@ResourceMapping` annotation to return JSP content as response to an Ajax request the jsp is not processed.  It's since the 3.1.3 release and it's easily reproducible with the [portlet in action sample ](https://code.google.com/p/portletsinaction/download/detail?name=ch12_SpringPortletDateTime.zip&can=2&q=)).  It's looke like is this line the problem (DispatchPortlet) :  ```java if (PortletRequest.RESOURCE_PHASE.equals(     request.getAttribute(PortletRequest.LIFECYCLE_PHASE)) &&      !this.renderResourceViewViaInclude) {   getPortletContext().getRequestDispatcher(     this.viewRendererUrl).forward(request, response); } else {   getPortletContext().getRequestDispatcher(     this.viewRendererUrl).include(request, response); } ```    ---  **Affects:** 3.1.3  1 votes, 4 watchers","closed","status: declined,","spring-projects-issues","2013-03-21T08:32:52Z","2019-01-12T16:24:11Z"
"","14927","java.lang.IllegalStateException: getOutputStream() has already been called for this response [SPR-10293]","**[jay](https://jira.spring.io/secure/ViewProfile.jspa?name=jaxox)** opened **[SPR-10293](https://jira.spring.io/browse/SPR-10293?redirect=false)** and commented  1) run the roo script 2) import maven project to STS 3) add the project to Vmware vFabric tc server v2.7 4) start the server 5) open Home page  then got lots of getOutputStream() exception  Windows 64bit version - STS Version: 3.1.0.RELEASE Build Id: 201210061306   ---  **Affects:** 3.1 GA  **Attachments:** - [getOutputStream_Error.txt](https://jira.spring.io/secure/attachment/20953/getOutputStream_Error.txt) (_135.04 kB_) - [v01.roo](https://jira.spring.io/secure/attachment/20949/v01.roo) (_1.24 kB_)","closed","type: bug,","spring-projects-issues","2013-02-13T23:55:15Z","2013-02-27T13:25:54Z"
"","15430","will not format String fields [SPR-10804]","**[Jasper Krijgsman](https://jira.spring.io/secure/ViewProfile.jspa?name=jdkrijgsman)** opened **[SPR-10804](https://jira.spring.io/browse/SPR-10804?redirect=false)** and commented  When the spring:eval tag prints the contents of a (annotated) String field the value is written directly, without any formatting applied. This is because ExpressionUtils.convertTypedValue determines that source and destination type are the same and no conversion/formatting is necessary.  Form:input fields do not exhibit this behaviour, the value is always formatted.  An example of this would be a IBAN bank account number. You want to store the compressed sting, but show it with groups of four characters. This works in forms, but not with spring:eval.  I think it would be less surprising if spring:eval was also formatting String fields. There is however a chance that this change will break existing code.    --- No further details from [SPR-10804](https://jira.spring.io/browse/SPR-10804?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2013-08-05T06:35:46Z","2019-01-12T02:33:14Z"
"","15019","Ant Pattern Matching throws IllegalStateException for multiple RequestMapping values [SPR-10386]","**[Jason Terhune-Wold](https://jira.spring.io/secure/ViewProfile.jspa?name=jkterhune)** opened **[SPR-10386](https://jira.spring.io/browse/SPR-10386?redirect=false)** and commented  We tried to upgrade from 3.2.0 to 3.2.2, and our integration tests started failing with an IllegalStateException.  This problem also exists in 3.2.1.  Adding this test to RequestMappingInfoHandlerMappingTests will reproduce the problem:  ```java 	@Test 	public void bestMatchingPatternAttributeWithParameters() { 		PatternsRequestCondition patterns = new PatternsRequestCondition(""/site/*/{id}.p;jsessionid=*"", ""/site/*/{id}.p""); 		RequestMappingInfo key = new RequestMappingInfo(patterns, null, null, null, null, null, null);  		MockHttpServletRequest requestWithJsession = new MockHttpServletRequest(""GET"", ""/site/Apple/3107695.p;jsessionid=123""); 		this.handlerMapping.handleMatch(key, ""/site/Apple/3107695.p;jsessionid=123"", requestWithJsession); 		assertEquals(""/site/*/{id}.p;jsessionid=*"", requestWithJsession.getAttribute(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE));  		MockHttpServletRequest requestWithoutJsession = new MockHttpServletRequest(""GET"", ""/site/Apple/3107695.p""); 		this.handlerMapping.handleMatch(key, ""/site/Apple/3107695.p"", requestWithoutJsession); 		assertEquals(""/site/*/{id}.p"", requestWithoutJsession.getAttribute(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE)); 	} ```  If you swap the order of the strings to PatternsRequestCondition, it will change the location of the failure.  Please let me know if I can provide any more info.  The abbreviated stacktrace is:  ``` java.lang.IllegalStateException: Pattern ""/site/*/{id}.p;jsessionid=*"" is not a match for ""/site/Apple/3107695.p"" 	at org.springframework.util.Assert.state(Assert.java:385) 	at org.springframework.util.AntPathMatcher.extractUriTemplateVariables(AntPathMatcher.java:287) 	at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.handleMatch(RequestMappingInfoHandlerMapping.java:102) ... ```  ---  **Affects:** 3.2.1, 3.2.2  **Issue Links:** - #15060 A URI with URL path parameters causes IllegalStateException","closed","type: bug,","spring-projects-issues","2013-03-15T14:24:37Z","2019-01-11T21:00:03Z"
"","14910","@Async with Executor qualification does not run  [SPR-10276]","**[jason smith](https://jira.spring.io/secure/ViewProfile.jspa?name=jasonparallel)** opened **[SPR-10276](https://jira.spring.io/browse/SPR-10276?redirect=false)** and commented  Related to: https://jira.springsource.org/browse/SPR-6847  Test project: https://github.com/jasonparallel/asynchError (run junit and look for system out statements)  When using the new value property of the asynch annotation, task execution will not occur. It appears that when AbstractAsyncExecutionAspect calls determineAsyncExecutor the beanFactory property of AsyncExecutionAspectSupport is null. Execution then stops at  Assert.notNull(this.beanFactory,""BeanFactory must be set on "" + this.getClass().getSimpleName() +"" to access qualified executor ["" + qualifier + ""]"");  The code in AsyncExecutionAspectSupport is passed through twice. The first time on startup when the proxy class is being setup. In this occurrence beanFactory is not null. The 2nd time is when the proxy class is used. This time beanFactory is not set and the assert hits.  ---  **Affects:** 3.2.1  **Reference URL:** http://forum.springsource.org/showthread.php?134678-Error-When-using-Asynch-support-with-named-executor-in-3-2-1  **Issue Links:** - #14908 `@Async` executor ignored if declared on implementation when using JDK proxies  2 votes, 6 watchers","closed","status: bulk-closed,","spring-projects-issues","2013-02-08T07:43:34Z","2019-01-13T07:01:09Z"
"","15290","HEAD requests not testable [SPR-10662]","**[Jasdeep Hundal](https://jira.spring.io/secure/ViewProfile.jspa?name=jasdeep-hundal)** opened **[SPR-10662](https://jira.spring.io/browse/SPR-10662?redirect=false)** and commented  In org.springframework.test.web.server.TestDispatcherServlet we see that doService(req, resp) checks that the response is of type MockHttpResponse.  ```java Assert.isInstanceOf(MockHttpServletRequest.class, request,      ""Request should be MockHttpServletRequest: "" + request.getClass().getName()); Assert.isInstanceOf(MockHttpServletResponse.class, response,      ""Response should be MockHttpServletResponse"" + response.getClass().getName()); ```  However, when testing HEAD requests, javax.servlet.http.HttpServlet wraps the MockHttpServletResponse in a NoBodyResponse, which then throws an exception here. There's unfortunately no way to get at the original request, which may mean this is an intentional design decision (esp. with the lack of a head method in MockMvcRequestBuilders.   --- No further details from [SPR-10662](https://jira.spring.io/browse/SPR-10662?redirect=false)","closed","","spring-projects-issues","2013-06-17T15:04:30Z","2019-01-11T22:24:05Z"
"","15387","ContentNegotiatingViewResolver [SPR-10761]","**[Jarrod Cuzens](https://jira.spring.io/secure/ViewProfile.jspa?name=jcuzens)** opened **[SPR-10761](https://jira.spring.io/browse/SPR-10761?redirect=false)** and commented  We had an issue where we had a RequestMapping that produces=""application/json"". Our client was not sending an ""Accept"" header and as a result did not see the json response (received a 404) since the only thing that this method is supposed to produce is JSON.  According to the w3c spec if an ""Accept"" header is not supplied the default should be ""\*/\*"" and if this had been provided then the client would have received the ""application/json"" response as intended.  The ContentNegotiatingViewResolver does support a defaultMediaType but providing ""\*/\*"" does nothing because by the time that the code reaches this default it has already passed the earlier part of the code that looks at the ""producibles"" to know that it should reply with ""application/json"".  I would propose refactoring the ContentNegotiatingViewResolver such that when the accept header is not provided and a defaultMediaType is specified that the accept header should be considered to be ""\*/\*"" so that it can match the produces attribute.  ---  **Affects:** 3.1.3  **Issue Links:** - #15311 ContentNegotiatingViewResolver does not select any views if no content types are requested","closed","in: web,","spring-projects-issues","2013-07-19T17:40:44Z","2019-01-11T22:03:45Z"
"","15131","Custom RequestMapping extension [SPR-10498]","**[Janning Vygen](https://jira.spring.io/secure/ViewProfile.jspa?name=janning)** opened **[SPR-10498](https://jira.spring.io/browse/SPR-10498?redirect=false)** and commented  when you use spring-mobile you can use SitePreference as a method paramater for methods annotated with `@RequestMapping`. This way you can use SitePreference inside the method and act accordingly.  It would be nice to have SitePreference as a requestMapping condition like this:  `@RequestMapping`(value=""/"", site=SitePreference.MOBIL) void getMobile() {}  But there maybe other reasons to extend RequestMapping and all options would bloat this annotation. It would be nice to have a custom extension which just takes any Object. Then you just need to configure something like a RequestMappingCustomResolver which has a method like ""boolean match(Object object)""    ---  **Affects:** 3.2.2","closed","type: enhancement,","spring-projects-issues","2013-04-28T03:46:34Z","2013-05-07T16:13:23Z"
"","15125","Async does not work anymore when switching from 3.2 to 3.2.2 [SPR-10492]","**[Janning Vygen](https://jira.spring.io/secure/ViewProfile.jspa?name=janning)** opened **[SPR-10492](https://jira.spring.io/browse/SPR-10492?redirect=false)** and commented  ``` java.lang.IllegalStateException: No executor qualifier specified and no default executor set on AnnotationAsyncExecutionAspect either 	at org.springframework.aop.interceptor.AsyncExecutionAspectSupport.determineAsyncExecutor(AsyncExecutionAspectSupport.java:104) 	at org.springframework.scheduling.aspectj.AbstractAsyncExecutionAspect.ajc$around$org_springframework_scheduling_aspectj_AbstractAsyncExecutionAspect$1$6c004c3e(AbstractAsyncExecutionAspect.aj:60) ... ```  ---  **Affects:** 3.2.2  **Issue Links:** - #15343 method demarcated with `@Async` isn't executed when precompiled  4 votes, 7 watchers","closed","in: core,","spring-projects-issues","2013-04-25T08:12:34Z","2019-01-13T07:00:19Z"
"","15124","UrlPathHelper#getLookupPathForRequest should not returning empty string  [SPR-10491]","**[Janning Vygen](https://jira.spring.io/secure/ViewProfile.jspa?name=janning)** opened **[SPR-10491](https://jira.spring.io/browse/SPR-10491?redirect=false)** and commented  With a servlet mapping like this:  ```      profil     /info/profil/*  ```  and a Controller like this:  ``` @RequestMapping({"""",""/""}) protected String handle () {    return ""profil/home""; } ```  I expected this controller to be picked up by RequestMappingHandlerMapping. I use `@EnableWebMvc` without any other stuff.  It is not the case because of UrlPathHelper which returns ""/info/profil"" instead of """". See line 155 in UrlPathHelper#getLookupPathForRequest:  ``` if (!"""".equals(rest)) {    return rest; } else {    return getPathWithinApplication(request); } ```  It is possible to match it anway if I add this RequestMapping:  ``` @RequestMapping({""/info/profil"",""/""}) protected String handle () {    return ""profil/home""; } ```  But in this case I have three matching urls * /info/profil * /info/profil/info/profil * /info/profil/  This seems to be a bug as I can't match my root url within a servlet path properly.   ---  **Affects:** 3.2.2  **Reference URL:** http://stackoverflow.com/questions/16175035/spring-servlet-mapping","closed","status: declined,","spring-projects-issues","2013-04-25T06:37:40Z","2019-01-12T16:24:06Z"
"","15081","Documentation example miss @EnableScheduling [SPR-10448]","**[Janning Vygen](https://jira.spring.io/secure/ViewProfile.jspa?name=janning)** opened **[SPR-10448](https://jira.spring.io/browse/SPR-10448?redirect=false)** and commented  Doc say  ""Alternatively, if MyTask were annotated with `@Component`, the following configuration would ensure that its `@Scheduled` method is invoked at the desired interval:  `@Configuration` `@ComponentScan`(basePackages=""com.myco.tasks"") public class AppConfig { } ""  The code example is wrong as it does not use `@EnableScheduling`. It must be like this:  `@Configuration` `@EnableScheduling` `@ComponentScan`(basePackages=""com.myco.tasks"") public class AppConfig { }    ---  **Affects:** 3.2.2  **Reference URL:** http://static.springsource.org/spring/docs/4.0.0.BUILD-SNAPSHOT/javadoc-api/org/springframework/scheduling/annotation/EnableScheduling.html  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7ba67cc3ddf6d989550db9fba286ccb0c3ea1c5f, https://github.com/spring-projects/spring-framework/commit/37735b35fc2ae2782eb499f27e123bb632c35620","closed","type: documentation,","spring-projects-issues","2013-04-07T02:20:36Z","2015-11-15T17:03:13Z"
"","14688","FormHttpMessageConverter should have a MappingJackson2HttpMessageConverter in its partConverters [SPR-10055]","**[Janning Vygen](https://jira.spring.io/secure/ViewProfile.jspa?name=janning)** opened **[SPR-10055](https://jira.spring.io/browse/SPR-10055?redirect=false)** and commented  We send a multipart from a non-browser like described here   We want to send a file and some json, so we build a map with a FileSystemResource and an Object which should be converted to json:  MultiValueMap map = new LinkedMultiValueMap(); map.add(""data"", form); map.add(""file"", fileSystemResource); getRestTemplate().postForObject(getUrl(), map, JsonReturn.class);  This gets converted by XmlAwareFormHttpMessageConverter, but fails because  it does not have a MappingJackson2HttpMessageConverter by default.  The RestTemplate itself checks the classpath on instance creation and adds an appropiate json converter. But XmlAwareFormHttpMessageConverter does not.  I think XmlAwareFormHttpMessageConverter (or a subclass) should add Json Converters by default like the RestTemplate does.    ---  **Affects:** 3.2 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7ff964afa88da9a8b6eb8cf93b5f042f4aea9195, https://github.com/spring-projects/spring-framework/commit/85a552daed9766ff9f9c5de05181dd5fa5ec7214  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2012-11-29T00:35:11Z","2012-12-07T15:17:52Z"
"","14875","Calling to Proxy upon abstract class ends with java.lang.LinkageError: duplicate class definition [SPR-10242]","**[Jan Novotný](https://jira.spring.io/secure/ViewProfile.jspa?name=novoj)** opened **[SPR-10242](https://jira.spring.io/browse/SPR-10242?redirect=false)** and commented  In 3.2 GA version of the Spring Framework I started to experience LingageErrors  with cause of duplicate class definition. For example:  net.sf.cglib.core.CodeGenerationException: java.lang.reflect.InvocationTargetException-->null at net.sf.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:237) at net.sf.cglib.reflect.FastClass$Generator.create(FastClass.java:64) at net.sf.cglib.proxy.MethodProxy.helper(MethodProxy.java:120) at net.sf.cglib.proxy.MethodProxy.init(MethodProxy.java:74) at net.sf.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:213) at com.fg.metadata.business.aop.SpringCgLibIssue$AbstractMethodInterceptor.intercept(SpringCgLibIssue.java:58) at com.fg.metadata.business.aop.SpringCgLibIssue$TestClassToProxy$$EnhancerByCGLIB$$f3b6125d.getSomeInt(\) at com.fg.metadata.business.aop.SpringCgLibIssue$TestClassToProxy$$FastClassByCGLIB$$4b5eb31.invoke(\) at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204) at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:698) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:150) at com.fg.metadata.business.aop.SpringCgLibIssue$SomeAdvice.invoke(SpringCgLibIssue.java:71) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172) at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:631) at com.fg.metadata.business.aop.SpringCgLibIssue$TestClassToProxy$$EnhancerByCGLIB$$d3d37a7d.getSomeInt(\) at com.fg.metadata.business.aop.SpringCgLibIssue.testCallMethodOfAbstractClass(SpringCgLibIssue.java:37) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at com.intellij.junit3.JUnit3IdeaTestRunner.doRun(JUnit3IdeaTestRunner.java:139) at com.intellij.junit3.JUnit3IdeaTestRunner.startRunnerWithArgs(JUnit3IdeaTestRunner.java:52) at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:195) at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:63) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at com.intellij.rt.execution.application.AppMain.main(AppMain.java:120) Caused by: java.lang.reflect.InvocationTargetException at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at net.sf.cglib.core.ReflectUtils.defineClass(ReflectUtils.java:384) at net.sf.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:219) ... 36 more Caused by: java.lang.LinkageError: duplicate class definition: com/fg/metadata/business/aop/SpringCgLibIssue$TestClassToProxy$$FastClassByCGLIB$$4b5eb31 at java.lang.ClassLoader.defineClass1(Native Method) at java.lang.ClassLoader.defineClass(ClassLoader.java:621) ... 42 more  Problem can be reproduced by the attached TestCase. Problem is quite weird - and is described in the attached test. Only first call to the implemented method of the abstract class ends with this exception, all succeeding calls finish ok.  Please don't ask why we are wrapping CgLib proxy into another Spring proxy. We have our reasons that are quite complex to explain.  This problem did not occur in previous versions of Spring (we use this mechanism since 2.5 version of Spring).  Thanks for help in advance.  ---  **Affects:** 3.2 GA  **Attachments:** - [SpringCgLibIssue.java](https://jira.spring.io/secure/attachment/20911/SpringCgLibIssue.java) (_2.68 kB_)  **Issue Links:** - #16025 aop:scoped-proxy may fail with LinkageError: loader attempted duplicate class definition for name  6 votes, 7 watchers","closed","in: core,","spring-projects-issues","2013-01-30T12:59:26Z","2019-01-12T05:27:27Z"
"","15017","Random results for JSR-303 method constraint validation on generically typed methods [SPR-10384]","**[Jan Goyvaerts](https://jira.spring.io/secure/ViewProfile.jspa?name=jan_goyvaerts)** opened **[SPR-10384](https://jira.spring.io/browse/SPR-10384?redirect=false)** and commented  Trying to make method validation work using Hibernate Validator 4.3.0.  Running the very same code over and over again yields different results. Sometimes everything gets validated. Sometimes not. And occasionally I'm getting an unexpected exception.  I've prepared a test case. Simply run maven ""install test"".  I'm aware I might be barking at the wrong tree here. Maybe it's not Spring's plumbing that is to blame. But rather HV. On the other hand, this are quite straightforward cases...  Running on Linux x64 (Arch) & JDK 1.6.0_43.  ---  **Affects:** 3.2.2  **Attachments:** - [test.zip](https://jira.spring.io/secure/attachment/21098/test.zip) (_10.66 kB_)  **Issue Links:** - #16519 Bean Validation invocation API for use with individual values and constraints  0 votes, 6 watchers","closed","in: core,","spring-projects-issues","2013-03-15T07:56:56Z","2019-01-11T20:59:54Z"
"","15173","Creating ApplicationContexts from multiple threads causes ConcurrentModificationException [SPR-10543]","**[James Shaw](https://jira.spring.io/secure/ViewProfile.jspa?name=hertzsprung)** opened **[SPR-10543](https://jira.spring.io/browse/SPR-10543?redirect=false)** and commented  See testcase to reproduce.  Backtrace:  ``` org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myChild' defined in class MyConfiguration: Instantiation of bean failed; nested exception is org.springframework.beans.factory.BeanDefinitionStoreException: Factory method [public MyChild MyConfiguration.myChild()] threw exception; nested exception is java.util.ConcurrentModificationException 	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:581) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1031) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:927) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:490) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:461) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:295) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:292) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:626) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:932) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:479) 	at org.springframework.context.annotation.AnnotationConfigApplicationContext.(AnnotationConfigApplicationContext.java:73) 	at Test$1.run(Test.java:15) 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603) 	at java.lang.Thread.run(Thread.java:722) Caused by: org.springframework.beans.factory.BeanDefinitionStoreException: Factory method [public MyChild MyConfiguration.myChild()] threw exception; nested exception is java.util.ConcurrentModificationException 	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:181) 	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:570) 	... 16 more Caused by: java.util.ConcurrentModificationException 	at java.util.ArrayList$Itr.checkForComodification(ArrayList.java:819) 	at java.util.ArrayList$Itr.next(ArrayList.java:791) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.predictBeanType(AbstractAutowireCapableBeanFactory.java:587) 	at org.springframework.beans.factory.support.AbstractBeanFactory.isFactoryBean(AbstractBeanFactory.java:1338) 	at org.springframework.beans.factory.support.AbstractBeanFactory.isFactoryBean(AbstractBeanFactory.java:904) 	at org.springframework.beans.factory.support.AbstractBeanFactory.containsBean(AbstractBeanFactory.java:370) 	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.factoryContainsBean(ConfigurationClassEnhancer.java:323) 	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:261) 	at MyConfiguration$$EnhancerByCGLIB$$15938d63.myChild() 	at sun.reflect.GeneratedMethodAccessor12.invoke(Unknown Source) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:601) 	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:160) 	... 17 more ```  I've also seen deadlocks occurring when running my integration tests in parallel, but I've been unable to reduce those to a test case.  ---  **Affects:** 3.2.2  **Attachments:** - [spring-concurrency-bug.tar.gz](https://jira.spring.io/secure/attachment/21194/spring-concurrency-bug.tar.gz) (_7.94 kB_)  **Issue Links:** - #14941 Concurrent creation of the same Configuration class in different contexts is not thread-safe","closed","in: core,","spring-projects-issues","2013-05-08T07:19:47Z","2019-01-11T22:16:55Z"
"","15172","getBean(Object.class) fails when introspecting Environment bean [SPR-10542]","**[James Shaw](https://jira.spring.io/secure/ViewProfile.jspa?name=hertzsprung)** opened **[SPR-10542](https://jira.spring.io/browse/SPR-10542?redirect=false)** and commented  Trying to access a bean of type Object gives the backtrace:  ``` Exception in thread ""main"" org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'environment' is defined 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanDefinition(DefaultListableBeanFactory.java:568) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:264) 	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1125) 	at Test.main(Test.java:7) ```  See attached test case to reproduce.  ---  **Affects:** 3.2.2  **Attachments:** - [spring-testcase.tar.gz](https://jira.spring.io/secure/attachment/21193/spring-testcase.tar.gz) (_7.54 kB_)  **Issue Links:** - #17517 ApplicationContext fails to load in TestNG test if previous test is annotated with `@DirtiesContext`  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9d3d6d59196ddd76cd536c29619403b76e2b10ba, https://github.com/spring-projects/spring-framework/commit/e89f18bf6d9dcb84d023a48c054061ef8df5a157, https://github.com/spring-projects/spring-framework/commit/21d0ce5af847ecfc7a809a0f858c707af5313a25  **Backported to:** [4.0.7](https://github.com/spring-projects/spring-framework/milestone/119?closed=1), [3.2.11](https://github.com/spring-projects/spring-framework/milestone/99?closed=1)","closed","in: core,","spring-projects-issues","2013-05-08T06:15:57Z","2019-01-13T07:00:00Z"
"","15166","Do not serialize ApplicationContext creation in the TestContext framework [SPR-10536]","**[James Shaw](https://jira.spring.io/secure/ViewProfile.jspa?name=hertzsprung)** opened **[SPR-10536](https://jira.spring.io/browse/SPR-10536?redirect=false)** and commented  `DefaultCacheAwareContextLoaderDelegate.loadContext()` synchronizes access to the `ContextCache` which means that `ApplicationContexts` cannot be initialized in parallel.  I tried removing the `ContextCache` altogether, but this uncovered a deadlock in `AbstractBeanFactory`. Trying to fix that with a shared lock caused some race condition to autowire a `null` `Environment` into a `@Configuration` class' field.  ---  **Affects:** 3.2.2  **Issue Links:** - #19400 No bean of type ConfigurableEnvironment in AbstractTestNGSpringContextTests - #17517 ApplicationContext fails to load in TestNG test if previous test is annotated with `@DirtiesContext` - #10532 Allow for concurrent test execution in the TestContext framework  1 votes, 3 watchers","open","type: enhancement,","spring-projects-issues","2013-05-07T06:00:23Z","2019-01-15T11:34:07Z"
"","14741","[regresion] NullPointerException is thrown when beanName is null in AutowireCapableBeanFactory.initializeBean [SPR-10108]","**[Jakub Štiller](https://jira.spring.io/secure/ViewProfile.jspa?name=stiller)** opened **[SPR-10108](https://jira.spring.io/browse/SPR-10108?redirect=false)** and commented  NullPointerException is thrown when beanName is null in AutowireCapableBeanFactory.initializeBean. Following snippet works in Spring 3.1.*, but not in 3.2.0.GA  ```java ApplicationContext context = .... AutowireCapableBeanFactory factory = context.getAutowireCapableBeanFactory(); OurCustomBean bean = new OurCustomBean(); bean.setFoo(foo); OurCustomBean initializedBean = (OurCustomBean) factory.initializeBean(bean, null); ```  We must explicitly set beanName argument to any not null value.  by: java.lang.NullPointerException at java.util.concurrent.ConcurrentHashMap.containsKey(ConcurrentHashMap.java:950) at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.wrapIfNecessary(AbstractAutoProxyCreator.java:344) at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization(AbstractAutoProxyCreator.java:319) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:412) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1492) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:391)  ---  **Affects:** 3.2 GA  **Issue Links:** - #14777 NPE in PersistenceExceptionTranslationPostProcessor when instantiate a `@Configurable` Bean  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/047db8cdf8c7ee0b937c19a6ba09528d209af786","closed","in: core,","spring-projects-issues","2012-12-18T23:48:09Z","2019-01-13T07:01:46Z"
"","14862","Limit auto grow collection size when using SpEL [SPR-10229]","**[Jakub Milkiewicz](https://jira.spring.io/secure/ViewProfile.jspa?name=miluch)** opened **[SPR-10229](https://jira.spring.io/browse/SPR-10229?redirect=false)** and commented  Hi  Some time ago when working with Spring Webflow project i bumped into a nasty bug related to spring data binding when using Spring EL and setting SpelParserConfiguration#autoGrowCollections to true. Since SpEL is used for data binding, malicious user can easily modify HTML/intercept HTTP request so collection property in form bean will be extended to user provided value. It can easily result in OutOfMemory. Originally i created a jira issue for SWF but since the root of the problem is SpEL i was asked to create jira here. For more details please look at https://jira.springsource.org/browse/SWF-1566  ---  **Issue Links:** - [SWF-1566](https://jira.spring.io/browse/SWF-1566) Spring expression language auto grow collections size limit  (_**""is depended on by""**_) - #12498 DataBinder should be able to define a different strategy for BeanWrapperImpl how autogrowing should handle gaps in collection properties  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1cc58e0a99f15cb0c071542aed4990898f0e28e1","closed","type: enhancement,","spring-projects-issues","2013-01-29T01:09:06Z","2019-01-11T21:34:16Z"
"","14950","PropertyPlaceholderConfigurer causes premature bean initialization [SPR-10316]","**[Jakub Kubrynski](https://jira.spring.io/secure/ViewProfile.jspa?name=jkubrynski)** opened **[SPR-10316](https://jira.spring.io/browse/SPR-10316?redirect=false)** and commented  I've got in my project `@Configuration` class with `@Resource(mappedName = ""myjndi"")` bean which should inject datasource. When I add `@Bean` method returning `PropertyPlaceholderConfigurer` to the same `@Configuration` class it fails.  I've debugged initialization process, and I've noticed that all configuration from this class is being initialized before most post processors (11 from 13 at all) are injected (with `PropertyPlaceholderConfigurer` beans are created in `AbstractApplicationContext.invokeBeanFactoryPostProcessors` method instead of `AbstractApplicationContext.finishBeanFactoryInitialization` in case without `PropertyPlaceholderConfigurer`.   ---  **Affects:** 3.1.4  **Attachments:** - [CoreDao.java](https://jira.spring.io/secure/attachment/20971/CoreDao.java) (_564 bytes_) - [DbSynchroProductionConfig.java](https://jira.spring.io/secure/attachment/20970/DbSynchroProductionConfig.java) (_1.17 kB_)","closed","status: bulk-closed,","spring-projects-issues","2013-02-20T01:31:18Z","2019-01-12T02:33:41Z"
"","15351","Binding of parameter arrays named like name[] from POST request [SPR-10723]","**[Jakub Kramarz](https://jira.spring.io/secure/ViewProfile.jspa?name=jkramarz)** opened **[SPR-10723](https://jira.spring.io/browse/SPR-10723?redirect=false)** and commented  According to convention used by jQuery[1], PHP[2], Rails and other web-stuff input fields with duplicated control name and [] suffix are considered as arrays named. Eg. ""name[]"" is an array named ""name"".  Most of front-end developers are got used[3] to naming them in this way, but unfortunately it's considered by Spring as a Map with one empty key. Result of submitting form like \ \ when there is registered eg. in session model with field named test results in exception from ""stacktrace1.log"". By adding `@Autowire` annotation one can also invoke NullPointerException.  Fortunately, this common problem can be solved by checking for empty string when getting property name tokens with simple fix [4]. It has no influence on other tests result, but maybe there are some missing.  [1] https://github.com/jquery/jquery/blob/master/src/serialize.js#L84 [2] http://www.php.net/manual/en/reserved.variables.post.php [3] http://stackoverflow.com/questions/5399347/how-to-pass-post-array-parameter-in-spring-mvc [4] https://github.com/jkramarz/spring-framework/commit/61717fb65d393f3713cf49b016ed2242d50e09c9  ---  **Affects:** 3.2.3  **Attachments:** - [HelloWorld.zip](https://jira.spring.io/secure/attachment/21278/HelloWorld.zip) (_25.65 kB_) - [stacktrace1.log](https://jira.spring.io/secure/attachment/21277/stacktrace1.log) (_5.30 kB_) - [v3.2.3-request-array-fix.diff](https://jira.spring.io/secure/attachment/21276/v3.2.3-request-array-fix.diff) (_2.29 kB_)  **Issue Links:** - #15839 Handle get or post parameter array with empty square brackets (?myarray[]=aa) - #20052 Handling servlet request parameter names including square brackets  2 votes, 5 watchers","closed","status: bulk-closed,","spring-projects-issues","2013-07-05T07:01:16Z","2019-01-12T00:22:53Z"
"","15508","LobCreator should define a method to set a blob with an unknown size [SPR-10881]","**[Jaime Porras López](https://jira.spring.io/secure/ViewProfile.jspa?name=aquiporras)** opened **[SPR-10881](https://jira.spring.io/browse/SPR-10881?redirect=false)** and commented  When using LobCreator.setBlobAsBinaryStream the InputStream's length is mandatory and must be correct. When you don't know the stream size (v.g. streaming) you should be able to save all the InputStream without specifying the size.  This behaviour can be done with PreparedStatement.setBlob(int, InputStream).  see org.springframework.jdbc.support.lob.LobCreator see org.springframework.jdbc.support.lob.LobCreator.setBlobAsBinaryStream(PreparedStatement, int, InputStream, int) see java.sql.PreparedStatement.setBlob(int, InputStream)   ---  **Affects:** 3.2.4, 4.0 M3  1 votes, 2 watchers","closed","status: bulk-closed,","spring-projects-issues","2013-08-30T05:19:09Z","2019-01-12T02:32:25Z"
"","14871","NPE in GenericTypeResolver when using Spring 3.2.0.RELEASE on IBM Websphere 7 [SPR-10238]","**[Jacking Liu](https://jira.spring.io/secure/ViewProfile.jspa?name=jacking)** opened **[SPR-10238](https://jira.spring.io/browse/SPR-10238?redirect=false)** and commented  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.context.annotation.internalPersistenceAnnotationProcessor': Initialization of bean failed; nested exception is java.lang.NullPointerException at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:478) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:409) at java.security.AccessController.doPrivileged(AccessController.java:224) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:380) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:264) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:220) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:261) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164) at org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:579) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:366) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:255) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:199) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:45) at com.ibm.ws.webcontainer.webapp.WebApp.notifyServletContextCreated(WebApp.java:1708) at com.ibm.ws.webcontainer.webapp.WebApp.commonInitializationFinish(WebApp.java:381) at com.ibm.ws.webcontainer.webapp.WebAppImpl.initialize(WebAppImpl.java:299) at com.ibm.ws.webcontainer.webapp.WebGroupImpl.addWebApplication(WebGroupImpl.java:100) at com.ibm.ws.webcontainer.VirtualHostImpl.addWebApplication(VirtualHostImpl.java:166) at com.ibm.ws.webcontainer.WSWebContainer.addWebApp(WSWebContainer.java:732) at com.ibm.ws.webcontainer.WSWebContainer.addWebApplication(WSWebContainer.java:617) at com.ibm.ws.webcontainer.component.WebContainerImpl.install(WebContainerImpl.java:376) at com.ibm.ws.webcontainer.component.WebContainerImpl.start(WebContainerImpl.java:668) at com.ibm.ws.runtime.component.ApplicationMgrImpl.start(ApplicationMgrImpl.java:1127) at com.ibm.ws.runtime.component.DeployedApplicationImpl.fireDeployedObjectStart(DeployedApplicationImpl.java:1319) at com.ibm.ws.runtime.component.DeployedModuleImpl.start(DeployedModuleImpl.java:610) at com.ibm.ws.runtime.component.DeployedApplicationImpl.start(DeployedApplicationImpl.java:944) at com.ibm.ws.runtime.component.ApplicationMgrImpl.startApplication(ApplicationMgrImpl.java:740) at com.ibm.ws.runtime.component.ApplicationMgrImpl$1.run(ApplicationMgrImpl.java:1272) at com.ibm.ws.security.auth.ContextManagerImpl.runAs(ContextManagerImpl.java:5353) at com.ibm.ws.security.auth.ContextManagerImpl.runAsSystem(ContextManagerImpl.java:5441) at com.ibm.ws.security.core.SecurityContext.runAsSystem(SecurityContext.java:255) at com.ibm.ws.runtime.component.ApplicationMgrImpl.startApplicationDynamically(ApplicationMgrImpl.java:1277) at com.ibm.ws.runtime.component.ApplicationMgrImpl.start(ApplicationMgrImpl.java:2048) at com.ibm.ws.runtime.component.CompositionUnitMgrImpl.start(CompositionUnitMgrImpl.java:385) at com.ibm.ws.runtime.component.CompositionUnitImpl.start(CompositionUnitImpl.java:123) at com.ibm.ws.runtime.component.CompositionUnitMgrImpl.start(CompositionUnitMgrImpl.java:328) at com.ibm.ws.runtime.component.CompositionUnitMgrImpl.startCompositionUnit(CompositionUnitMgrImpl.java:599) at com.ibm.ws.runtime.component.CompositionUnitMgrImpl.startCompositionUnit(CompositionUnitMgrImpl.java:561) at com.ibm.ws.runtime.component.ApplicationMgrImpl.startApplication(ApplicationMgrImpl.java:1184) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:48) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:600) at sun.reflect.misc.Trampoline.invoke(MethodUtil.java:37) at sun.reflect.GeneratedMethodAccessor61.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:600) at sun.reflect.misc.MethodUtil.invoke(MethodUtil.java:244) at javax.management.modelmbean.RequiredModelMBean.invokeMethod(RequiredModelMBean.java:1074) at javax.management.modelmbean.RequiredModelMBean.invoke(RequiredModelMBean.java:955) at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:836) at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:761) at com.ibm.ws.management.AdminServiceImpl$1.run(AdminServiceImpl.java:1331) at com.ibm.ws.security.util.AccessController.doPrivileged(AccessController.java:118) at com.ibm.ws.management.AdminServiceImpl.invoke(AdminServiceImpl.java:1224) at com.ibm.ws.management.commands.AdminServiceCommands$InvokeCmd.execute(AdminServiceCommands.java:251) at com.ibm.ws.console.core.mbean.MBeanHelper.invoke(MBeanHelper.java:239) at com.ibm.ws.console.appdeployment.ApplicationDeploymentCollectionAction.execute(ApplicationDeploymentCollectionAction.java:578) at org.apache.struts.action.RequestProcessor.processActionPerform(Unknown Source) at org.apache.struts.action.RequestProcessor.process(Unknown Source) at org.apache.struts.action.ActionServlet.process(Unknown Source) at org.apache.struts.action.ActionServlet.doPost(Unknown Source) at javax.servlet.http.HttpServlet.service(HttpServlet.java:738) at javax.servlet.http.HttpServlet.service(HttpServlet.java:831) at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1657) at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1597) at com.ibm.ws.webcontainer.filter.WebAppFilterChain.doFilter(WebAppFilterChain.java:104) at com.ibm.ws.webcontainer.filter.WebAppFilterChain._doFilter(WebAppFilterChain.java:77) at com.ibm.ws.webcontainer.filter.WebAppFilterManager.doFilter(WebAppFilterManager.java:908) at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:934) at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:502) at com.ibm.ws.webcontainer.servlet.ServletWrapperImpl.handleRequest(ServletWrapperImpl.java:181) at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:372) at org.apache.struts.action.RequestProcessor.doForward(Unknown Source) at org.apache.struts.tiles.TilesRequestProcessor.doForward(Unknown Source) at org.apache.struts.action.RequestProcessor.processForwardConfig(Unknown Source) at org.apache.struts.tiles.TilesRequestProcessor.processForwardConfig(Unknown Source) at com.ibm.isclite.container.controller.InformationController.processForwardConfig(InformationController.java:218) at org.apache.struts.action.RequestProcessor.process(Unknown Source) at org.apache.struts.action.ActionServlet.process(Unknown Source) at org.apache.struts.action.ActionServlet.doPost(Unknown Source) at javax.servlet.http.HttpServlet.service(HttpServlet.java:738) at javax.servlet.http.HttpServlet.service(HttpServlet.java:831) at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1657) at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1597) at com.ibm.ws.webcontainer.filter.WebAppFilterChain.doFilter(WebAppFilterChain.java:131) at com.ibm.ws.console.core.servlet.WSCUrlFilter.setUpCommandAssistence(WSCUrlFilter.java:960) at com.ibm.ws.console.core.servlet.WSCUrlFilter.continueStoringTaskState(WSCUrlFilter.java:500) at com.ibm.ws.console.core.servlet.WSCUrlFilter.doFilter(WSCUrlFilter.java:321) at com.ibm.ws.webcontainer.filter.FilterInstanceWrapper.doFilter(FilterInstanceWrapper.java:188) at com.ibm.ws.webcontainer.filter.WebAppFilterChain.doFilter(WebAppFilterChain.java:116) at com.ibm.ws.webcontainer.filter.WebAppFilterChain._doFilter(WebAppFilterChain.java:77) at com.ibm.ws.webcontainer.filter.WebAppFilterManager.doFilter(WebAppFilterManager.java:908) at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:934) at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:502) at com.ibm.ws.webcontainer.servlet.ServletWrapperImpl.handleRequest(ServletWrapperImpl.java:181) at com.ibm.ws.webcontainer.servlet.CacheServletWrapper.handleRequest(CacheServletWrapper.java:91) at com.ibm.ws.webcontainer.WebContainer.handleRequest(WebContainer.java:864) at com.ibm.ws.webcontainer.WSWebContainer.handleRequest(WSWebContainer.java:1592) at com.ibm.ws.webcontainer.channel.WCChannelLink.ready(WCChannelLink.java:186) at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.handleDiscrimination(HttpInboundLink.java:452) at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.handleNewRequest(HttpInboundLink.java:511) at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.processRequest(HttpInboundLink.java:305) at com.ibm.ws.http.channel.inbound.impl.HttpICLReadCallback.complete(HttpICLReadCallback.java:83) at com.ibm.ws.ssl.channel.impl.SSLReadServiceContext$SSLReadCompletedCallback.complete(SSLReadServiceContext.java:1784) at com.ibm.ws.tcp.channel.impl.AioReadCompletionListener.futureCompleted(AioReadCompletionListener.java:165) at com.ibm.io.async.AbstractAsyncFuture.invokeCallback(AbstractAsyncFuture.java:217) at com.ibm.io.async.AsyncChannelFuture.fireCompletionActions(AsyncChannelFuture.java:161) at com.ibm.io.async.AsyncFuture.completed(AsyncFuture.java:138) at com.ibm.io.async.ResultHandler.complete(ResultHandler.java:204) at com.ibm.io.async.ResultHandler.runEventProcessingLoop(ResultHandler.java:775) at com.ibm.io.async.ResultHandler$2.run(ResultHandler.java:905) at com.ibm.ws.util.ThreadPool$Worker.run(ThreadPool.java:1613) Caused by: java.lang.NullPointerException at org.springframework.core.GenericTypeResolver.getTypeVariableMap(GenericTypeResolver.java:144) at org.springframework.core.GenericTypeResolver.resolveReturnType(GenericTypeResolver.java:93) at org.springframework.beans.GenericTypeAwarePropertyDescriptor.getPropertyType(GenericTypeAwarePropertyDescriptor.java:58) at java.beans.PropertyDescriptor.setWriteMethod(PropertyDescriptor.java:111) at java.beans.PropertyDescriptor.\(PropertyDescriptor.java:77) at org.springframework.beans.GenericTypeAwarePropertyDescriptor.\(GenericTypeAwarePropertyDescriptor.java:47) at org.springframework.beans.CachedIntrospectionResults.\(CachedIntrospectionResults.java:250) at org.springframework.beans.CachedIntrospectionResults.forClass(CachedIntrospectionResults.java:144) at org.springframework.beans.BeanWrapperImpl.getCachedIntrospectionResults(BeanWrapperImpl.java:252) at org.springframework.beans.BeanWrapperImpl.convertForProperty(BeanWrapperImpl.java:380) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.convertForProperty(AbstractAutowireCapableBeanFactory.java:1287) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1248) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1008) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:470) ... 113 more   ---  **Affects:** 3.2 GA","closed","in: core,","spring-projects-issues","2013-01-29T18:32:38Z","2019-01-11T21:33:13Z"
"","15233","UnionMethodMatcher and ClassFilterAwareUnionMethodMatcher have broken eqauls. [SPR-10604]","**[Ivan Sopov](https://jira.spring.io/secure/ViewProfile.jspa?name=isopov)** opened **[SPR-10604](https://jira.spring.io/browse/SPR-10604?redirect=false)** and commented  I was investigating the ""instanceof vs getClass()== in equals method"" problem across the spring framework code-base. It seems that any custom implementation of AbstractResource relying on its equals will lead to inconsistency with all the standard Spring implementations. But I have found a pair of classes with broken equals contract in the spring-aop library:  import org.springframework.aop.MethodMatcher; import org.springframework.aop.support.ComposablePointcut; import org.springframework.aop.support.MethodMatchers;  public class MethodMatchersEqualsTest { public static void main(String[] args) { MethodMatcher first = MethodMatchers.union(MethodMatcher.TRUE, MethodMatcher.TRUE); MethodMatcher second = new ComposablePointcut(MethodMatcher.TRUE).union( new ComposablePointcut(MethodMatcher.TRUE)).getMethodMatcher();          System.out.println(first.equals(second));         System.out.println(second.equals(first));     }  }  This code will output: true false So the equals contract is broken for this pair of MethodMatchers.   ---  **Affects:** 3.2.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f329140dd45ef56faf57706534d0bd45021cf0d3, https://github.com/spring-projects/spring-framework/commit/e30b84231626ee3b3073fdd534430afcac52486b","closed","in: core,","spring-projects-issues","2013-05-29T13:42:48Z","2013-08-06T18:35:06Z"
"","15224","Dot in RequestMapping path prevents paths from combination [SPR-10595]","**[Ivan Sopov](https://jira.spring.io/secure/ViewProfile.jspa?name=isopov)** opened **[SPR-10595](https://jira.spring.io/browse/SPR-10595?redirect=false)** and commented  The following controller does work exposing urls ""v1/customers"" and ""v1/suppliers"":  ```java @Controller @RequestMapping(value =""v1/"", method = RequestMethod.GET) public class SampleController {  	@ResponseBody 	@RequestMapping(value = ""customers"") 	public String getCustomers(){...}  	@ResponseBody 	@RequestMapping(value = ""suppliers"") 	public String getSuppliers(){...} } ```  The following controller does nto work, trying to map both methods to ""v1.0/"" url:  ```java @Controller @RequestMapping(value =""v1.0/"", method = RequestMethod.GET) public class SampleController {  	@ResponseBody 	@RequestMapping(value = ""customers"") 	public String getCustomers(){...}  	@ResponseBody 	@RequestMapping(value = ""suppliers"") 	public String getSuppliers(){...} } ```  While the following controller does work exposing ""v1.0/customers"" and ""v1.0/suppliers"":  ```java @Controller @RequestMapping(method = RequestMethod.GET) public class SampleController {  	@ResponseBody 	@RequestMapping(value = ""v1.0/customers"") 	public String getCustomers(){...}  	@ResponseBody 	@RequestMapping(value = ""v1.0/suppliers"") 	public String getSuppliers(){...} } ```  ---  **Affects:** 3.2.3  **Issue Links:** - #15185 `@RequestMapping` inheritance not worked as expect with a dot path (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2013-05-28T01:01:27Z","2019-01-13T06:59:42Z"
"","14957","DefaultJdoDialect does not support JDO 2.2 isolation levels [SPR-10323]","**[Ivan Badia](https://jira.spring.io/secure/ViewProfile.jspa?name=ivan.b)** opened **[SPR-10323](https://jira.spring.io/browse/SPR-10323?redirect=false)** and commented  When I try to control the transaction isolation level using JDO, the `DefaultJdoDialect` throws a `InvalidIsolationLevelException` with this message: ""Standard JDO does not support custom isolation levels: use a special `JdoDialect` implementation for your JDO provider"".  The method `beginTransaction` is throwing this exception if a non-default isolation level is set, although JDO has allowed setting transaction isolations since JDO 2.2 (2008).  Thanks in advance.   ---  **Affects:** 3.2.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0d69a630ad41ff266ec66c9211fb0a4d4a83ecf8  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2013-02-21T23:44:24Z","2013-02-26T07:39:15Z"
"","15328","Should throw CannotGetJdbcConnectionException instead of NullPointerException [SPR-10700]","**[ismail altuntas](https://jira.spring.io/secure/ViewProfile.jspa?name=ismail)** opened **[SPR-10700](https://jira.spring.io/browse/SPR-10700?redirect=false)** and commented  I have a custom Datasource implementation that not throw any exception when there is no DB connection.  I am using this Datasource implementation with JdbcTemplate.java utility and when there is no connection JdbcTemplate throwing  a NullPointerExeption.  see the stack trace:  ``` java.lang.NullPointerException         at org.springframework.jdbc.core.JdbcTemplate$SimplePreparedStatementCreator.createPreparedStatement(JdbcTemplate.java:1375)         at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:580)         at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:636)         at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:665)         at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:685)         at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:693)  ```  I think DataSourceUtils.getConnection() method should check the connection if it is null and then throw  CannotGetJdbcConnectionException exception. So that appplication should check a meaningfull exception to take an action in this case.  Similarly to above case when a transactional operation exist following exception is occured. In this case also CannotGetJdbcConnectionException should be occured ;  ``` org.springframework.transaction.CannotCreateTransactionException: Could not open JDBC Connection for transaction; nested exception is java.lang.IllegalArgumentException: Connection must not be null         at org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:240)         at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:371)         at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:127) ```  Thanks   --- No further details from [SPR-10700](https://jira.spring.io/browse/SPR-10700?redirect=false)","closed","type: enhancement,","spring-projects-issues","2013-06-27T00:10:00Z","2013-07-02T16:08:35Z"
"","14701","EclipseLink marks transaction RollbackOnly when applying timeout for ""nonread"" queries [SPR-10068]","**[Igor Mihalik](https://jira.spring.io/secure/ViewProfile.jspa?name=imihalik)** opened **[SPR-10068](https://jira.spring.io/browse/SPR-10068?redirect=false)** and commented  Transaction ""RollbackOnly"" problem occurs when using EclipseLink (any version up to 2.5.0-M5) together with Spring ORM and ""timeout"" attribute on `@Transactional` in case of ""delete"" query.  [EntityManagerFactoryUtil](https://github.com/SpringSource/spring-framework/blob/master/spring-orm/src/main/java/org/springframework/orm/jpa/EntityManagerFactoryUtils.java#L262) class in method ""applyTransactionTimeout"" sets a hint ""javax.persistence.lock.timeout"". However EclipseLink throws back an exception: java.lang.IllegalArgumentException: Query delete from [*], query hint javax.persistence.lock.timeout is not valid for this type of query.  Moreover EclipseLink sets RollbackOnly on current transaction and doCommit throws: Exception in thread ""main"" org.springframework.transaction.TransactionSystemException: Could not commit JPA transaction; nested exception is javax.persistence.RollbackException: Transaction rolled back because transaction was set to RollbackOnly.  Attached is a simple project to demonstrate the problem.   ---  **Affects:** 3.1.3  **Attachments:** - [elink_problem.tar.gz](https://jira.spring.io/secure/attachment/20789/elink_problem.tar.gz) (_2.11 kB_)  **Backported to:** [3.1.4](https://github.com/spring-projects/spring-framework/milestone/83?closed=1)","closed","type: bug,","spring-projects-issues","2012-12-03T14:29:55Z","2012-12-04T06:31:50Z"
"","15262","The Spring TestContext Framework is not compatible with JUnit 4.11 [SPR-10634]","**[Iaroslav](https://jira.spring.io/secure/ViewProfile.jspa?name=smilodonn)** opened **[SPR-10634](https://jira.spring.io/browse/SPR-10634?redirect=false)** and commented  sorry, my mvn goes mad (wrong sources). Please, close it   ---  **Affects:** 3.2.3","closed","status: declined,","spring-projects-issues","2013-06-07T05:11:31Z","2019-01-12T16:23:59Z"
"","15310","No way to add type definitions to a Hibernate 4 LocalSessionFactoryBean [SPR-10682]","**[Ian Brandt](https://jira.spring.io/secure/ViewProfile.jspa?name=ibrandt)** opened **[SPR-10682](https://jira.spring.io/browse/SPR-10682?redirect=false)** and commented  As mentioned in the comments on #13580, the `typeDefinitions` property was not included in `org.springframework.orm.hibernate4.LocalSessionFactoryBean`.  It existed in `org.springframework.orm.hibernate3.LocalSessionFactoryBean` per #5612.  ---  **Affects:** 3.2.3  1 votes, 4 watchers","closed","status: bulk-closed,","spring-projects-issues","2013-06-24T10:06:43Z","2019-01-12T00:23:26Z"
"","15279","JdbcTemplate.queryForObject throws TypeMismatchDataAccessException when used per the reference manual [SPR-10651]","**[Ian Brandt](https://jira.spring.io/secure/ViewProfile.jspa?name=ibrandt)** opened **[SPR-10651](https://jira.spring.io/browse/SPR-10651?redirect=false)** and commented  I'm not sure if this is a documentation issue, a bug, or a driver specific nuance, but when I use `queryForObject` as shown in the [reference manual](http://static.springsource.org/spring/docs/3.2.x/spring-framework-reference/html/jdbc.html#jdbc-JdbcTemplate-examples) I get a `TypeMismatchDataAccessException`:  ```java int rowCount = this.jdbcTemplate.queryForObject(""select count(*) from t_actor"", int.class); ```  ``` org.springframework.dao.TypeMismatchDataAccessException: Type mismatch affecting row number 0 and column type 'NUMBER': Value [2] is of type [java.lang.Integer] and cannot be converted to required type [int] 	at org.springframework.jdbc.core.SingleColumnRowMapper.mapRow(SingleColumnRowMapper.java:98) 	at org.springframework.jdbc.core.RowMapperResultSetExtractor.extractData(RowMapperResultSetExtractor.java:92) 	at org.springframework.jdbc.core.RowMapperResultSetExtractor.extractData(RowMapperResultSetExtractor.java:60) 	at org.springframework.jdbc.core.JdbcTemplate$1QueryStatementCallback.doInStatement(JdbcTemplate.java:446) 	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:396) 	at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:456) 	at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:464) 	at org.springframework.jdbc.core.JdbcTemplate.queryForObject(JdbcTemplate.java:472) 	at org.springframework.jdbc.core.JdbcTemplate.queryForObject(JdbcTemplate.java:477) ```  The workaround is to use `Integer.class` instead of `int.class` as the type parameter:  ```java int rowCount = this.jdbcTemplate.queryForObject(""select count(*) from t_actor"", Integer.class); ```  Database is Oracle 10.2.0.5 with JDBC driver 11.2.0.3.   ---  **Affects:** 3.2.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c720d82596964614a1ad4a98e519a053baa182c1","closed","type: bug,","spring-projects-issues","2013-06-12T14:01:32Z","2013-07-24T10:17:06Z"
"","15449","Hibernate 4 Multi Tenancy Feature Support [SPR-10823]","**[I. Benyaminov](https://jira.spring.io/secure/ViewProfile.jspa?name=inelation)** opened **[SPR-10823](https://jira.spring.io/browse/SPR-10823?redirect=false)** and commented  At the moment there is no way to provide bean reference for MultiTenantConnectionProvider.  This is necessary because an implementation of MultiTentnatConnectionProvider needs to be wired to a DataSource. The current version of LocalSessionFactoryBuilder sets only the dataSource property to a bean reference. Since currently any implementation of MultiTenantConnectionProvider is not Spring managed, users are forced to define another DataSource/Connection Pool with hard coded db properties or a non Spring way of accessing those properties  ---  **Affects:** 3.2.4  **Reference URL:** http://docs.jboss.org/hibernate/orm/4.1/devguide/en-US/html/ch16.html#d5e4605  **Issue Links:** - #18644 Add setMultiTenantConnectionProvider to org.springframework.orm.hibernate5.LocalSessionFactoryBean  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/542b5b202904782c4b5fa9f39137743b4de088cc","closed","type: enhancement,","spring-projects-issues","2013-08-09T13:43:57Z","2019-01-11T22:04:54Z"
"","14887","Can't bind @ModelAttribute List type with enctype=""multipart/form-data"" [SPR-10254]","**[Hurelhuyag](https://jira.spring.io/secure/ViewProfile.jspa?name=hurelhuyag)** opened **[SPR-10254](https://jira.spring.io/browse/SPR-10254?redirect=false)** and commented   ---  **Affects:** 3.2.1  **Reference URL:** http://viralpatel.net/blogs/spring-mvc-multi-row-submit-java-list/","closed","in: web,","spring-projects-issues","2013-02-03T19:27:47Z","2019-01-11T21:32:55Z"
"","15329","ServletUriComponentsBuilder doesn't work if X-Forwarded-Host is in host:port format [SPR-10701]","**[Hrvoje Jambrovic](https://jira.spring.io/secure/ViewProfile.jspa?name=hrvojej)** opened **[SPR-10701](https://jira.spring.io/browse/SPR-10701?redirect=false)** and commented  Linked with #14743 ServletUriComponentsBuilder takes X-Forwarded-Host value from header (if exists) and puts it as ""host"". If X-Forwarded-Host is: X-Forwarded-Host: webtest.foo.bar.com:443  creating uri produces error:  org.springframework.web.util.NestedServletException: Request processing failed; nested exception is java.lang.IllegalStateException: Could not create URI object: Malformed IPv6 address at index 8: http://[webtest.foo.bar.com:443]:8180/api/person/449089 at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:948) ...  Definition of Host header: http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.23  X-Forwarded-Host is a copy of Host header: http://httpd.apache.org/docs/2.2/mod/mod_proxy.html#x-headers  ---  **Affects:** 3.2.1  **Issue Links:** - #15346 X-Forwarded-Host handling in ServletUriComponentsBuilder does not treat ports correctly (_**""is duplicated by""**_) - #17410 X-Forwarded-Port with Comma Separated List Not Able to be Parsed in Spring 4.1.x  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1e90d029735e809a8ddb1c60f35e76083b1fe084, https://github.com/spring-projects/spring-framework/commit/6c11fd3b5e6330bf7e6820e347c407b3dc471ac6","closed","type: bug,","spring-projects-issues","2013-06-27T08:14:13Z","2019-01-11T22:28:16Z"
"","15490","o.s.b.f.s.DisposableBeanAdapter trying to call non-existing destroy() method, then logs WARN [SPR-10863]","**[Hendy Irawan](https://jira.spring.io/secure/ViewProfile.jspa?name=ceefour)** opened **[SPR-10863](https://jira.spring.io/browse/SPR-10863?redirect=false)** and commented  ``` 18:59:42.985 | WARN  | Thread-24        | o.s.b.f.s.DisposableBeanAdapter  | ry.support.DisposableBeanAdapter  247 | Invocation of destroy method failed on bean with name 'siteTenantConfig.PersonRequestConfig': java.lang.NoSuchMethodError: com.quikdo.hub.app.SiteTenantConfig$PersonRequestConfig.destroy()V ```  call stack:  ``` at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:247) at org.springframework.beans.factory.support.DisposableBeanAdapter.run(DisposableBeanAdapter.java:214) at org.springframework.web.context.request.AbstractRequestAttributes.executeRequestDestructionCallbacks(AbstractRequestAttributes.java:91) at org.springframework.web.context.request.AbstractRequestAttributes.requestCompleted(AbstractRequestAttributes.java:47) at org.soluvas.commons.shell.ExtCommandSupport.execute(ExtCommandSupport.java:62) at org.apache.felix.gogo.commands.basic.AbstractCommand.execute(AbstractCommand.java:35) at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:477) at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:403) ```  It results from the following `@Configuration` :  ``` @Configuration @Scope(value=""request"") @Import(TenantDataConfig.class) public class SiteTenantConfig { 	@Inject @DataFolder 	private String dataFolder; 	@Inject 	private TenantRef tenant; 	 	@Inject 	private Environment env;  	@Bean @Scope(""request"") 	public PermalinkCatalog permalinkCatalog() { 		return new StaticXmiLoader(SitePackage.eINSTANCE, 				dataFolder + ""/common/custom.PermalinkCatalog.xmi"").get(); 	}  	@Bean @Scope(""request"") 	public PermalinkManager permalinkMgr() { 		return new PermalinkManagerImpl(permalinkCatalog()); 	}  	@Bean(name=""cDbCon"") @Scope(""request"") @Deprecated 	public CouchDbConnector cDbCon() throws MalformedURLException { 		final HttpClient httpClient = new StdHttpClient.Builder() 			.url(env.getRequiredProperty(""couchDbUrl"")) 			.username(env.getRequiredProperty(""couchDbUsername"")) 			.password(env.getRequiredProperty(""couchDbPassword"")) 			.build(); 		 		final String dbNameCouchDb = tenant.getTenantId() + ""_"" + tenant.getTenantEnv(); 		final StdCouchDbInstance stdCouchDbInstance = new StdCouchDbInstance(httpClient); 		final StdCouchDbConnector cDbCon = new StdCouchDbConnector(dbNameCouchDb, stdCouchDbInstance); 		cDbCon.createDatabaseIfNotExists(); 		return cDbCon; 	}  	@Bean @Scope(""request"") 	public DelegatingSupplier securityCatalogSupplier() { 		return new AggregatingSupplier(SecurityFactory.eINSTANCE, 				SecurityPackage.Literals.SECURITY_CATALOG, 				ImmutableList.of()); 	} 	 	@Bean @Scope(""request"") 	public SupplierXmiClasspathScanner securitySecurityCatalogScanner() { 		return new SupplierXmiClasspathScanner(SecurityPackage.eINSTANCE, 				SecurityCatalog.class, securityCatalogSupplier(), 				SecurityPackage.class); 	} 	 	@Bean @Scope(value=""request"", proxyMode=ScopedProxyMode.TARGET_CLASS) 	public Realm shiroRealm() throws MalformedURLException { 		return new SoluvasCouchDbRealm(securityCatalogSupplier(), cDbCon()); 	} 	 	@Configuration @Lazy 	public static class PersonConfig { 		private static final Logger log = LoggerFactory 				.getLogger(SiteTenantConfig.PersonConfig.class); 		private Map personRepoMap; 		@Inject 		private Environment env; 		@Inject 		private ClientConnectionManager connMgr; 		@Resource(name=""sysConfigMap"") 		private Map sysConfigMap; 		 		@PostConstruct 		public void init() { 			log.info(""Initializing {} CouchDB Person repositories: {}"", sysConfigMap.size(), Iterables.limit(sysConfigMap.keySet(), 10)); 			final ImmutableMap.Builder builder = ImmutableMap.builder(); 			final String tenantEnv = env.getRequiredProperty(""tenantEnv""); 			for (QuikdoSysConfig sysConfig : sysConfigMap.values()) { 				final CouchDbPersonRepository personRepo = new CouchDbPersonRepository(connMgr, sysConfig.getCouchDbUri(), sysConfig.getTenantId() + ""_"" + tenantEnv); 				builder.put(sysConfig.getTenantId(), personRepo); 			} 			personRepoMap = builder.build(); 		} 		 		@PreDestroy 		public void destroy() { 			log.info(""Shutting down {} CouchDB Person repositories: {}"", personRepoMap.size(), Iterables.limit(personRepoMap.keySet(), 10)); 			for (CouchDbPersonRepository personRepo : personRepoMap.values()) { 				personRepo.destroy(); 			} 		} 		 		@Bean 		public Map personRepoMap() { 			return personRepoMap; 		}  	} 	 	@Configuration @Lazy @Scope(""request"") 	public static class PersonRequestConfig {  		@Inject 		private TenantRef tenant; 		@Resource(name=""personRepoMap"") 		private Map personRepoMap;  		@Bean(name={""personRepo"", ""personLookup""}) @Scope(value=""request"", proxyMode=ScopedProxyMode.INTERFACES) 		public PersonRepository personRepo() { 			return personRepoMap.get(tenant.getTenantId()); 		} 		 	} 	 } ```  PersonRequestConfig is `@Configuration` `@Lazy` `@Scope`(""request"") that has no destroy method. So even if Spring tries to call one (which it shouldn't in the first place), the log should be DEBUG.  And how did it determine the ""destroy()"" method name?   ---  **Affects:** 3.2.4","closed","status: bulk-closed,","spring-projects-issues","2013-08-27T05:04:58Z","2019-01-12T02:32:42Z"
"","15355","Cannot run SpringJUnit4ClassRunner : NoClassDefFoundError: org/springframework/asm/commons/EmptyVisitor [SPR-10727]","**[Hendy Irawan](https://jira.spring.io/secure/ViewProfile.jspa?name=ceefour)** opened **[SPR-10727](https://jira.spring.io/browse/SPR-10727?redirect=false)** and commented  Cannot run SpringJUnit4ClassRunner : NoClassDefFoundError: org/springframework/asm/commons/EmptyVisitor  Error:  ``` java.lang.NoClassDefFoundError: org/springframework/asm/commons/EmptyVisitor 	at java.lang.ClassLoader.defineClass1(Native Method) 	at java.lang.ClassLoader.defineClass(ClassLoader.java:787) 	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142) 	at java.net.URLClassLoader.defineClass(URLClassLoader.java:447) 	at java.net.URLClassLoader.access$100(URLClassLoader.java:71) 	at java.net.URLClassLoader$1.run(URLClassLoader.java:361) 	at java.net.URLClassLoader$1.run(URLClassLoader.java:355) 	at java.security.AccessController.doPrivileged(Native Method) 	at java.net.URLClassLoader.findClass(URLClassLoader.java:354) 	at java.lang.ClassLoader.loadClass(ClassLoader.java:423) 	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308) 	at java.lang.ClassLoader.loadClass(ClassLoader.java:356) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.(AbstractAutowireCapableBeanFactory.java:123) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.(DefaultListableBeanFactory.java:158) 	at org.springframework.context.support.GenericApplicationContext.(GenericApplicationContext.java:103) 	at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:108) 	at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:60) 	at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.delegateLoading(AbstractDelegatingSmartContextLoader.java:100) 	at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.loadContext(AbstractDelegatingSmartContextLoader.java:248) 	at org.springframework.test.context.CacheAwareContextLoaderDelegate.loadContextInternal(CacheAwareContextLoaderDelegate.java:64) 	at org.springframework.test.context.CacheAwareContextLoaderDelegate.loadContext(CacheAwareContextLoaderDelegate.java:91) 	at org.springframework.test.context.TestContext.getApplicationContext(TestContext.java:122) 	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:105) 	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:74) 	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:312) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:211) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:288) 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:284) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:231) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:88) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229) 	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) 	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:71) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:309) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:174) 	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50) 	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197) Caused by: java.lang.ClassNotFoundException: org.springframework.asm.commons.EmptyVisitor 	at java.net.URLClassLoader$1.run(URLClassLoader.java:366) 	at java.net.URLClassLoader$1.run(URLClassLoader.java:355) 	at java.security.AccessController.doPrivileged(Native Method) 	at java.net.URLClassLoader.findClass(URLClassLoader.java:354) 	at java.lang.ClassLoader.loadClass(ClassLoader.java:423) 	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308) 	at java.lang.ClassLoader.loadClass(ClassLoader.java:356) 	... 46 more ```  `spring-core-3.2.2.RELEASE.jar` is in classpath, but the class `org.springframework.asm.commons.EmptyVisitor` doesn't exist in `spring-core-3.2.2.RELEASE.jar`.  Test Case:  ``` package org.soluvas.buzz.twitter;  import static org.junit.Assert.fail;  import org.junit.After; import org.junit.Before; import org.junit.Test; import org.junit.runner.RunWith; import org.springframework.test.context.ContextConfiguration; import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;  @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(""/META-INF/spring/buzz-twitter.xml"") public class TwitterCorpusTest {  	@Before 	public void setUp() throws Exception { 	}  	@After 	public void tearDown() throws Exception { 	}  	@Test 	public void test() { 		fail(""Not yet implemented""); 	}  } ```  Dependencies:  ``` adri@adri ~/git/soluvas-buzz/twitter $ gradle dependencies :twitter:dependencies  ------------------------------------------------------------ Project :twitter ------------------------------------------------------------  archives - Configuration for archive artifacts. No dependencies  compile - Compile classpath for source set 'main'. +--- com.google.guava:guava:14.0.1 +--- org.twitter4j:twitter4j-core:3.0.3 +--- org.springframework:spring-core:3.2.2.RELEASE -> 3.2.3.RELEASE +--- org.springframework:spring-beans:3.2.2.RELEASE -> 3.2.3.RELEASE |    \--- org.springframework:spring-core:3.2.3.RELEASE +--- org.springframework:spring-context:3.2.2.RELEASE -> 3.2.3.RELEASE |    +--- org.springframework:spring-aop:3.2.3.RELEASE |    |    +--- aopalliance:aopalliance:1.0 |    |    +--- org.springframework:spring-beans:3.2.3.RELEASE (*) |    |    \--- org.springframework:spring-core:3.2.3.RELEASE |    +--- org.springframework:spring-beans:3.2.3.RELEASE (*) |    +--- org.springframework:spring-core:3.2.3.RELEASE |    \--- org.springframework:spring-expression:3.2.3.RELEASE |         \--- org.springframework:spring-core:3.2.3.RELEASE +--- org.springframework:spring-tx:3.2.2.RELEASE |    +--- aopalliance:aopalliance:1.0 |    +--- org.springframework:spring-beans:3.2.2.RELEASE -> 3.2.3.RELEASE (*) |    \--- org.springframework:spring-core:3.2.2.RELEASE -> 3.2.3.RELEASE +--- org.springframework:spring-orm:3.2.2.RELEASE |    +--- aopalliance:aopalliance:1.0 |    +--- org.springframework:spring-beans:3.2.2.RELEASE -> 3.2.3.RELEASE (*) |    +--- org.springframework:spring-core:3.2.2.RELEASE -> 3.2.3.RELEASE |    +--- org.springframework:spring-jdbc:3.2.2.RELEASE |    |    +--- org.springframework:spring-beans:3.2.2.RELEASE -> 3.2.3.RELEASE (*) |    |    +--- org.springframework:spring-core:3.2.2.RELEASE -> 3.2.3.RELEASE |    |    \--- org.springframework:spring-tx:3.2.2.RELEASE (*) |    \--- org.springframework:spring-tx:3.2.2.RELEASE (*) +--- commons-dbcp:commons-dbcp:1.4 |    \--- commons-pool:commons-pool:1.5.4 +--- org.hibernate:hibernate-entitymanager:4.2.2.Final |    +--- org.jboss.logging:jboss-logging:3.1.0.GA |    +--- dom4j:dom4j:1.6.1 |    +--- org.jboss.spec.javax.transaction:jboss-transaction-api_1.1_spec:1.0.1.Final |    +--- org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.1.Final |    +--- org.hibernate.common:hibernate-commons-annotations:4.0.2.Final |    |    \--- org.jboss.logging:jboss-logging:3.1.0.CR2 -> 3.1.0.GA |    +--- org.javassist:javassist:3.15.0-GA |    \--- org.hibernate:hibernate-core:4.2.2.Final |         +--- antlr:antlr:2.7.7 |         +--- org.jboss.logging:jboss-logging:3.1.0.GA |         +--- dom4j:dom4j:1.6.1 |         +--- org.jboss.spec.javax.transaction:jboss-transaction-api_1.1_spec:1.0.1.Final |         +--- org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.1.Final |         +--- org.hibernate.common:hibernate-commons-annotations:4.0.2.Final (*) |         \--- org.javassist:javassist:3.15.0-GA +--- org.postgresql:postgresql:9.2-1003-jdbc4 +--- org.soluvas:org.soluvas.commons:2.1.0-SNAPSHOT |    +--- com.codahale.metrics:metrics-core:3.0.0 |    |    \--- org.slf4j:slf4j-api:1.7.5 |    +--- com.damnhandy:handy-uri-templates:1.1.7 |    +--- com.rabbitmq:amqp-client:2.8.7 |    +--- com.google.code.morphia:morphia:0.99.1.soluvas2 |    |    \--- org.mongodb:mongo-java-driver:2.7.3 |    +--- com.google.code.morphia:morphia-logging-slf4j:0.99 |    |    +--- com.google.code.morphia:morphia:0.99 -> 0.99.1.soluvas2 (*) |    |    +--- org.slf4j:slf4j-api:1.5.6 -> 1.7.5 |    |    \--- org.mongodb:mongo-java-driver:2.3 -> 2.7.3 |    +--- org.apache.httpcomponents:httpclient:4.2.5 |    |    +--- org.apache.httpcomponents:httpcore:4.2.4 |    |    \--- commons-codec:commons-codec:1.6 |    +--- com.fasterxml.jackson.datatype:jackson-datatype-joda:2.2.2 |    |    +--- com.fasterxml.jackson.core:jackson-core:2.2.2 |    |    +--- com.fasterxml.jackson.core:jackson-databind:2.2.2 |    |    |    +--- com.fasterxml.jackson.core:jackson-annotations:2.2.2 |    |    |    \--- com.fasterxml.jackson.core:jackson-core:2.2.2 |    |    \--- joda-time:joda-time:2.1 -> 2.2 |    +--- com.fasterxml.jackson.datatype:jackson-datatype-guava:2.2.2 |    |    +--- com.fasterxml.jackson.core:jackson-databind:2.2.2 (*) |    |    +--- com.fasterxml.jackson.core:jackson-core:2.2.2 |    |    \--- com.google.guava:guava:12.0 -> 14.0.1 |    +--- com.fasterxml.jackson.core:jackson-databind:2.2.2 (*) |    +--- commons-beanutils:commons-beanutils:1.8.3 |    +--- org.apache.commons:commons-lang3:3.1 |    +--- com.google.guava:guava:14.0.1 |    +--- org.jscience:jscience:4.3.1 |    |    \--- org.javolution:javolution:5.2.3 |    +--- org.joda:joda-money:0.9 |    +--- joda-time:joda-time:2.2 |    +--- org.eclipse.emf:org.eclipse.emf.ecore.xmi:2.8.0.v20120911-0500 |    +--- org.eclipse.emf:org.eclipse.emf.ecore:2.8.1.v20120911-0500 |    +--- org.eclipse.emf:org.eclipse.emf.common:2.8.0.v20120911-0500 |    +--- org.apache.karaf.shell:org.apache.karaf.shell.console:2.3.1 |    |    +--- jline:jline:2.9 |    |    +--- org.fusesource.jansi:jansi:1.9 |    |    +--- org.osgi:org.osgi.core:4.3.1 |    |    +--- org.osgi:org.osgi.compendium:4.3.1 |    |    +--- org.apache.karaf.jaas:org.apache.karaf.jaas.boot:2.3.1 |    |    +--- org.apache.karaf.jaas:org.apache.karaf.jaas.modules:2.3.1 |    |    |    +--- org.apache.karaf.jaas:org.apache.karaf.jaas.config:2.3.1 |    |    |    +--- org.apache.karaf.jaas:org.apache.karaf.jaas.boot:2.3.1 |    |    |    \--- org.apache.felix:org.apache.felix.utils:1.2.0 |    |    |         \--- org.osgi:org.osgi.compendium:4.1.0 -> 4.3.1 |    |    +--- org.apache.karaf:org.apache.karaf.util:2.3.1 |    |    |    \--- org.osgi:org.osgi.core:4.3.1 |    |    +--- org.apache.aries.blueprint:org.apache.aries.blueprint.core:1.1.0 |    |    |    +--- org.apache.aries.blueprint:org.apache.aries.blueprint.api:1.0.0 |    |    |    +--- org.apache.aries:org.apache.aries.util:1.0.0 |    |    |    +--- org.apache.aries.quiesce:org.apache.aries.quiesce.api:1.0.0 |    |    |    \--- org.apache.aries.proxy:org.apache.aries.proxy.api:1.0.0 |    |    |         \--- org.apache.aries:org.apache.aries.util:1.0.0 |    |    +--- org.apache.felix:org.apache.felix.gogo.runtime:0.10.0 |    |    \--- org.apache.sshd:sshd-core:0.8.0 |    |         \--- org.apache.mina:mina-core:2.0.5 |    |              \--- org.slf4j:slf4j-api:1.6.6 -> 1.7.5 |    +--- org.osgi:org.osgi.compendium:4.3.1 |    +--- org.osgi:org.osgi.core:4.3.1 |    +--- org.springframework:spring-web:3.2.3.RELEASE |    |    +--- aopalliance:aopalliance:1.0 |    |    +--- org.springframework:spring-aop:3.2.3.RELEASE (*) |    |    +--- org.springframework:spring-beans:3.2.3.RELEASE (*) |    |    +--- org.springframework:spring-context:3.2.3.RELEASE (*) |    |    \--- org.springframework:spring-core:3.2.3.RELEASE |    +--- org.springframework:spring-beans:3.2.3.RELEASE (*) |    +--- org.springframework:spring-context:3.2.3.RELEASE (*) |    +--- javax.enterprise:cdi-api:1.0-SP4 |    |    +--- org.jboss.spec.javax.interceptor:jboss-interceptors-api_1.1_spec:1.0.0.Beta1 |    |    \--- javax.inject:javax.inject:1 |    +--- com.google.code.findbugs:jsr305:2.0.1 |    \--- org.slf4j:slf4j-api:1.7.5 +--- org.soluvas:org.soluvas.data:2.1.0-SNAPSHOT |    +--- org.soluvas:org.soluvas.commons:2.1.0-SNAPSHOT (*) |    +--- org.eclipse.jgit:org.eclipse.jgit:2.3.1.201302201838-r |    |    \--- com.jcraft:jsch:0.1.46 |    +--- org.apache.karaf.shell:org.apache.karaf.shell.console:2.3.1 (*) |    +--- org.osgi:org.osgi.compendium:4.3.1 |    +--- org.osgi:org.osgi.core:4.3.1 |    +--- com.google.code.morphia:morphia:0.99.1.soluvas2 (*) |    +--- org.neo4j:neo4j-cypher:1.8.2 |    |    +--- org.scala-lang:scala-library:2.9.1-1 |    |    +--- org.neo4j:neo4j-lucene-index:1.8.2 |    |    |    +--- org.neo4j:neo4j-kernel:1.8.2 |    |    |    |    \--- org.apache.geronimo.specs:geronimo-jta_1.1_spec:1.1.1 |    |    |    \--- org.apache.lucene:lucene-core:3.5.0 |    |    +--- org.neo4j:neo4j-graph-matching:1.8.2 |    |    |    \--- org.neo4j:neo4j-kernel:1.8.2 (*) |    |    +--- org.neo4j:neo4j-kernel:1.8.2 (*) |    |    +--- org.neo4j:neo4j-graph-algo:1.8.2 |    |    |    \--- org.neo4j:neo4j-kernel:1.8.2 (*) |    |    \--- com.googlecode.concurrentlinkedhashmap:concurrentlinkedhashmap-lru:1.3.1 |    +--- org.neo4j:neo4j-kernel:1.8.2 (*) |    +--- org.springframework:spring-context:3.2.3.RELEASE (*) |    +--- javax.enterprise:cdi-api:1.0-SP4 (*) |    +--- com.google.guava:guava:14.0.1 |    +--- com.google.code.findbugs:jsr305:2.0.1 |    \--- org.slf4j:slf4j-api:1.7.5 \--- org.soluvas.buzz:core:0.1.0-SNAPSHOT      +--- com.google.guava:guava:14.0.1      +--- org.eclipse.emf:org.eclipse.emf.ecore.xmi:2.8.0.v20120911-0500      +--- org.eclipse.emf:org.eclipse.emf.ecore:2.8.1.v20120911-0500      +--- org.eclipse.emf:org.eclipse.emf.common:2.8.0.v20120911-0500      +--- com.google.code.findbugs:jsr305:2.0.1      +--- org.apache.commons:commons-lang3:3.1      +--- org.soluvas:org.soluvas.commons:2.1.0-SNAPSHOT (*)      \--- org.soluvas:org.soluvas.data:2.1.0-SNAPSHOT (*)  default - Configuration for default artifacts. +--- com.google.guava:guava:14.0.1 +--- org.twitter4j:twitter4j-core:3.0.3 +--- org.springframework:spring-core:3.2.2.RELEASE -> 3.2.3.RELEASE +--- org.springframework:spring-beans:3.2.2.RELEASE -> 3.2.3.RELEASE |    \--- org.springframework:spring-core:3.2.3.RELEASE +--- org.springframework:spring-context:3.2.2.RELEASE -> 3.2.3.RELEASE |    +--- org.springframework:spring-aop:3.2.3.RELEASE |    |    +--- aopalliance:aopalliance:1.0 |    |    +--- org.springframework:spring-beans:3.2.3.RELEASE (*) |    |    \--- org.springframework:spring-core:3.2.3.RELEASE |    +--- org.springframework:spring-beans:3.2.3.RELEASE (*) |    +--- org.springframework:spring-core:3.2.3.RELEASE |    \--- org.springframework:spring-expression:3.2.3.RELEASE |         \--- org.springframework:spring-core:3.2.3.RELEASE +--- org.springframework:spring-tx:3.2.2.RELEASE |    +--- aopalliance:aopalliance:1.0 |    +--- org.springframework:spring-beans:3.2.2.RELEASE -> 3.2.3.RELEASE (*) |    \--- org.springframework:spring-core:3.2.2.RELEASE -> 3.2.3.RELEASE +--- org.springframework:spring-orm:3.2.2.RELEASE |    +--- aopalliance:aopalliance:1.0 |    +--- org.springframework:spring-beans:3.2.2.RELEASE -> 3.2.3.RELEASE (*) |    +--- org.springframework:spring-core:3.2.2.RELEASE -> 3.2.3.RELEASE |    +--- org.springframework:spring-jdbc:3.2.2.RELEASE |    |    +--- org.springframework:spring-beans:3.2.2.RELEASE -> 3.2.3.RELEASE (*) |    |    +--- org.springframework:spring-core:3.2.2.RELEASE -> 3.2.3.RELEASE |    |    \--- org.springframework:spring-tx:3.2.2.RELEASE (*) |    \--- org.springframework:spring-tx:3.2.2.RELEASE (*) +--- commons-dbcp:commons-dbcp:1.4 |    \--- commons-pool:commons-pool:1.5.4 +--- org.hibernate:hibernate-entitymanager:4.2.2.Final |    +--- org.jboss.logging:jboss-logging:3.1.0.GA |    +--- dom4j:dom4j:1.6.1 |    +--- org.jboss.spec.javax.transaction:jboss-transaction-api_1.1_spec:1.0.1.Final |    +--- org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.1.Final |    +--- org.hibernate.common:hibernate-commons-annotations:4.0.2.Final |    |    \--- org.jboss.logging:jboss-logging:3.1.0.CR2 -> 3.1.0.GA |    +--- org.javassist:javassist:3.15.0-GA |    \--- org.hibernate:hibernate-core:4.2.2.Final |         +--- antlr:antlr:2.7.7 |         +--- org.jboss.logging:jboss-logging:3.1.0.GA |         +--- dom4j:dom4j:1.6.1 |         +--- org.jboss.spec.javax.transaction:jboss-transaction-api_1.1_spec:1.0.1.Final |         +--- org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.1.Final |         +--- org.hibernate.common:hibernate-commons-annotations:4.0.2.Final (*) |         \--- org.javassist:javassist:3.15.0-GA +--- org.postgresql:postgresql:9.2-1003-jdbc4 +--- org.soluvas:org.soluvas.commons:2.1.0-SNAPSHOT |    +--- com.codahale.metrics:metrics-core:3.0.0 |    |    \--- org.slf4j:slf4j-api:1.7.5 |    +--- com.damnhandy:handy-uri-templates:1.1.7 |    +--- com.rabbitmq:amqp-client:2.8.7 |    +--- com.google.code.morphia:morphia:0.99.1.soluvas2 |    |    \--- org.mongodb:mongo-java-driver:2.7.3 |    +--- com.google.code.morphia:morphia-logging-slf4j:0.99 |    |    +--- com.google.code.morphia:morphia:0.99 -> 0.99.1.soluvas2 (*) |    |    +--- org.slf4j:slf4j-api:1.5.6 -> 1.7.5 |    |    \--- org.mongodb:mongo-java-driver:2.3 -> 2.7.3 |    +--- org.apache.httpcomponents:httpclient:4.2.5 |    |    +--- org.apache.httpcomponents:httpcore:4.2.4 |    |    \--- commons-codec:commons-codec:1.6 |    +--- com.fasterxml.jackson.datatype:jackson-datatype-joda:2.2.2 |    |    +--- com.fasterxml.jackson.core:jackson-core:2.2.2 |    |    +--- com.fasterxml.jackson.core:jackson-databind:2.2.2 |    |    |    +--- com.fasterxml.jackson.core:jackson-annotations:2.2.2 |    |    |    \--- com.fasterxml.jackson.core:jackson-core:2.2.2 |    |    \--- joda-time:joda-time:2.1 -> 2.2 |    +--- com.fasterxml.jackson.datatype:jackson-datatype-guava:2.2.2 |    |    +--- com.fasterxml.jackson.core:jackson-databind:2.2.2 (*) |    |    +--- com.fasterxml.jackson.core:jackson-core:2.2.2 |    |    \--- com.google.guava:guava:12.0 -> 14.0.1 |    +--- com.fasterxml.jackson.core:jackson-databind:2.2.2 (*) |    +--- commons-beanutils:commons-beanutils:1.8.3 |    +--- org.apache.commons:commons-lang3:3.1 |    +--- com.google.guava:guava:14.0.1 |    +--- org.jscience:jscience:4.3.1 |    |    \--- org.javolution:javolution:5.2.3 |    +--- org.joda:joda-money:0.9 |    +--- joda-time:joda-time:2.2 |    +--- org.eclipse.emf:org.eclipse.emf.ecore.xmi:2.8.0.v20120911-0500 |    +--- org.eclipse.emf:org.eclipse.emf.ecore:2.8.1.v20120911-0500 |    +--- org.eclipse.emf:org.eclipse.emf.common:2.8.0.v20120911-0500 |    +--- org.apache.karaf.shell:org.apache.karaf.shell.console:2.3.1 |    |    +--- jline:jline:2.9 |    |    +--- org.fusesource.jansi:jansi:1.9 |    |    +--- org.osgi:org.osgi.core:4.3.1 |    |    +--- org.osgi:org.osgi.compendium:4.3.1 |    |    +--- org.apache.karaf.jaas:org.apache.karaf.jaas.boot:2.3.1 |    |    +--- org.apache.karaf.jaas:org.apache.karaf.jaas.modules:2.3.1 |    |    |    +--- org.apache.karaf.jaas:org.apache.karaf.jaas.config:2.3.1 |    |    |    +--- org.apache.karaf.jaas:org.apache.karaf.jaas.boot:2.3.1 |    |    |    \--- org.apache.felix:org.apache.felix.utils:1.2.0 |    |    |         \--- org.osgi:org.osgi.compendium:4.1.0 -> 4.3.1 |    |    +--- org.apache.karaf:org.apache.karaf.util:2.3.1 |    |    |    \--- org.osgi:org.osgi.core:4.3.1 |    |    +--- org.apache.aries.blueprint:org.apache.aries.blueprint.core:1.1.0 |    |    |    +--- org.apache.aries.blueprint:org.apache.aries.blueprint.api:1.0.0 |    |    |    +--- org.apache.aries:org.apache.aries.util:1.0.0 |    |    |    +--- org.apache.aries.quiesce:org.apache.aries.quiesce.api:1.0.0 |    |    |    \--- org.apache.aries.proxy:org.apache.aries.proxy.api:1.0.0 |    |    |         \--- org.apache.aries:org.apache.aries.util:1.0.0 |    |    +--- org.apache.felix:org.apache.felix.gogo.runtime:0.10.0 |    |    \--- org.apache.sshd:sshd-core:0.8.0 |    |         \--- org.apache.mina:mina-core:2.0.5 |    |              \--- org.slf4j:slf4j-api:1.6.6 -> 1.7.5 |    +--- org.osgi:org.osgi.compendium:4.3.1 |    +--- org.osgi:org.osgi.core:4.3.1 |    +--- org.springframework:spring-web:3.2.3.RELEASE |    |    +--- aopalliance:aopalliance:1.0 |    |    +--- org.springframework:spring-aop:3.2.3.RELEASE (*) |    |    +--- org.springframework:spring-beans:3.2.3.RELEASE (*) |    |    +--- org.springframework:spring-context:3.2.3.RELEASE (*) |    |    \--- org.springframework:spring-core:3.2.3.RELEASE |    +--- org.springframework:spring-beans:3.2.3.RELEASE (*) |    +--- org.springframework:spring-context:3.2.3.RELEASE (*) |    +--- javax.enterprise:cdi-api:1.0-SP4 |    |    +--- org.jboss.spec.javax.interceptor:jboss-interceptors-api_1.1_spec:1.0.0.Beta1 |    |    \--- javax.inject:javax.inject:1 |    +--- com.google.code.findbugs:jsr305:2.0.1 |    \--- org.slf4j:slf4j-api:1.7.5 +--- org.soluvas:org.soluvas.data:2.1.0-SNAPSHOT |    +--- org.soluvas:org.soluvas.commons:2.1.0-SNAPSHOT (*) |    +--- org.eclipse.jgit:org.eclipse.jgit:2.3.1.201302201838-r |    |    \--- com.jcraft:jsch:0.1.46 |    +--- org.apache.karaf.shell:org.apache.karaf.shell.console:2.3.1 (*) |    +--- org.osgi:org.osgi.compendium:4.3.1 |    +--- org.osgi:org.osgi.core:4.3.1 |    +--- com.google.code.morphia:morphia:0.99.1.soluvas2 (*) |    +--- org.neo4j:neo4j-cypher:1.8.2 |    |    +--- org.scala-lang:scala-library:2.9.1-1 |    |    +--- org.neo4j:neo4j-lucene-index:1.8.2 |    |    |    +--- org.neo4j:neo4j-kernel:1.8.2 |    |    |    |    \--- org.apache.geronimo.specs:geronimo-jta_1.1_spec:1.1.1 |    |    |    \--- org.apache.lucene:lucene-core:3.5.0 |    |    +--- org.neo4j:neo4j-graph-matching:1.8.2 |    |    |    \--- org.neo4j:neo4j-kernel:1.8.2 (*) |    |    +--- org.neo4j:neo4j-kernel:1.8.2 (*) |    |    +--- org.neo4j:neo4j-graph-algo:1.8.2 |    |    |    \--- org.neo4j:neo4j-kernel:1.8.2 (*) |    |    \--- com.googlecode.concurrentlinkedhashmap:concurrentlinkedhashmap-lru:1.3.1 |    +--- org.neo4j:neo4j-kernel:1.8.2 (*) |    +--- org.springframework:spring-context:3.2.3.RELEASE (*) |    +--- javax.enterprise:cdi-api:1.0-SP4 (*) |    +--- com.google.guava:guava:14.0.1 |    +--- com.google.code.findbugs:jsr305:2.0.1 |    \--- org.slf4j:slf4j-api:1.7.5 \--- org.soluvas.buzz:core:0.1.0-SNAPSHOT      +--- com.google.guava:guava:14.0.1      +--- org.eclipse.emf:org.eclipse.emf.ecore.xmi:2.8.0.v20120911-0500      +--- org.eclipse.emf:org.eclipse.emf.ecore:2.8.1.v20120911-0500      +--- org.eclipse.emf:org.eclipse.emf.common:2.8.0.v20120911-0500      +--- com.google.code.findbugs:jsr305:2.0.1      +--- org.apache.commons:commons-lang3:3.1      +--- org.soluvas:org.soluvas.commons:2.1.0-SNAPSHOT (*)      \--- org.soluvas:org.soluvas.data:2.1.0-SNAPSHOT (*)  runtime - Runtime classpath for source set 'main'. +--- com.google.guava:guava:14.0.1 +--- org.twitter4j:twitter4j-core:3.0.3 +--- org.springframework:spring-core:3.2.2.RELEASE -> 3.2.3.RELEASE +--- org.springframework:spring-beans:3.2.2.RELEASE -> 3.2.3.RELEASE |    \--- org.springframework:spring-core:3.2.3.RELEASE +--- org.springframework:spring-context:3.2.2.RELEASE -> 3.2.3.RELEASE |    +--- org.springframework:spring-aop:3.2.3.RELEASE |    |    +--- aopalliance:aopalliance:1.0 |    |    +--- org.springframework:spring-beans:3.2.3.RELEASE (*) |    |    \--- org.springframework:spring-core:3.2.3.RELEASE |    +--- org.springframework:spring-beans:3.2.3.RELEASE (*) |    +--- org.springframework:spring-core:3.2.3.RELEASE |    \--- org.springframework:spring-expression:3.2.3.RELEASE |         \--- org.springframework:spring-core:3.2.3.RELEASE +--- org.springframework:spring-tx:3.2.2.RELEASE |    +--- aopalliance:aopalliance:1.0 |    +--- org.springframework:spring-beans:3.2.2.RELEASE -> 3.2.3.RELEASE (*) |    \--- org.springframework:spring-core:3.2.2.RELEASE -> 3.2.3.RELEASE +--- org.springframework:spring-orm:3.2.2.RELEASE |    +--- aopalliance:aopalliance:1.0 |    +--- org.springframework:spring-beans:3.2.2.RELEASE -> 3.2.3.RELEASE (*) |    +--- org.springframework:spring-core:3.2.2.RELEASE -> 3.2.3.RELEASE |    +--- org.springframework:spring-jdbc:3.2.2.RELEASE |    |    +--- org.springframework:spring-beans:3.2.2.RELEASE -> 3.2.3.RELEASE (*) |    |    +--- org.springframework:spring-core:3.2.2.RELEASE -> 3.2.3.RELEASE |    |    \--- org.springframework:spring-tx:3.2.2.RELEASE (*) |    \--- org.springframework:spring-tx:3.2.2.RELEASE (*) +--- commons-dbcp:commons-dbcp:1.4 |    \--- commons-pool:commons-pool:1.5.4 +--- org.hibernate:hibernate-entitymanager:4.2.2.Final |    +--- org.jboss.logging:jboss-logging:3.1.0.GA |    +--- dom4j:dom4j:1.6.1 |    +--- org.jboss.spec.javax.transaction:jboss-transaction-api_1.1_spec:1.0.1.Final |    +--- org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.1.Final |    +--- org.hibernate.common:hibernate-commons-annotations:4.0.2.Final |    |    \--- org.jboss.logging:jboss-logging:3.1.0.CR2 -> 3.1.0.GA |    +--- org.javassist:javassist:3.15.0-GA |    \--- org.hibernate:hibernate-core:4.2.2.Final |         +--- antlr:antlr:2.7.7 |         +--- org.jboss.logging:jboss-logging:3.1.0.GA |         +--- dom4j:dom4j:1.6.1 |         +--- org.jboss.spec.javax.transaction:jboss-transaction-api_1.1_spec:1.0.1.Final |         +--- org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.1.Final |         +--- org.hibernate.common:hibernate-commons-annotations:4.0.2.Final (*) |         \--- org.javassist:javassist:3.15.0-GA +--- org.postgresql:postgresql:9.2-1003-jdbc4 +--- org.soluvas:org.soluvas.commons:2.1.0-SNAPSHOT |    +--- com.codahale.metrics:metrics-core:3.0.0 |    |    \--- org.slf4j:slf4j-api:1.7.5 |    +--- com.damnhandy:handy-uri-templates:1.1.7 |    +--- com.rabbitmq:amqp-client:2.8.7 |    +--- com.google.code.morphia:morphia:0.99.1.soluvas2 |    |    \--- org.mongodb:mongo-java-driver:2.7.3 |    +--- com.google.code.morphia:morphia-logging-slf4j:0.99 |    |    +--- com.google.code.morphia:morphia:0.99 -> 0.99.1.soluvas2 (*) |    |    +--- org.slf4j:slf4j-api:1.5.6 -> 1.7.5 |    |    \--- org.mongodb:mongo-java-driver:2.3 -> 2.7.3 |    +--- org.apache.httpcomponents:httpclient:4.2.5 |    |    +--- org.apache.httpcomponents:httpcore:4.2.4 |    |    \--- commons-codec:commons-codec:1.6 |    +--- com.fasterxml.jackson.datatype:jackson-datatype-joda:2.2.2 |    |    +--- com.fasterxml.jackson.core:jackson-core:2.2.2 |    |    +--- com.fasterxml.jackson.core:jackson-databind:2.2.2 |    |    |    +--- com.fasterxml.jackson.core:jackson-annotations:2.2.2 |    |    |    \--- com.fasterxml.jackson.core:jackson-core:2.2.2 |    |    \--- joda-time:joda-time:2.1 -> 2.2 |    +--- com.fasterxml.jackson.datatype:jackson-datatype-guava:2.2.2 |    |    +--- com.fasterxml.jackson.core:jackson-databind:2.2.2 (*) |    |    +--- com.fasterxml.jackson.core:jackson-core:2.2.2 |    |    \--- com.google.guava:guava:12.0 -> 14.0.1 |    +--- com.fasterxml.jackson.core:jackson-databind:2.2.2 (*) |    +--- commons-beanutils:commons-beanutils:1.8.3 |    +--- org.apache.commons:commons-lang3:3.1 |    +--- com.google.guava:guava:14.0.1 |    +--- org.jscience:jscience:4.3.1 |    |    \--- org.javolution:javolution:5.2.3 |    +--- org.joda:joda-money:0.9 |    +--- joda-time:joda-time:2.2 |    +--- org.eclipse.emf:org.eclipse.emf.ecore.xmi:2.8.0.v20120911-0500 |    +--- org.eclipse.emf:org.eclipse.emf.ecore:2.8.1.v20120911-0500 |    +--- org.eclipse.emf:org.eclipse.emf.common:2.8.0.v20120911-0500 |    +--- org.apache.karaf.shell:org.apache.karaf.shell.console:2.3.1 |    |    +--- jline:jline:2.9 |    |    +--- org.fusesource.jansi:jansi:1.9 |    |    +--- org.osgi:org.osgi.core:4.3.1 |    |    +--- org.osgi:org.osgi.compendium:4.3.1 |    |    +--- org.apache.karaf.jaas:org.apache.karaf.jaas.boot:2.3.1 |    |    +--- org.apache.karaf.jaas:org.apache.karaf.jaas.modules:2.3.1 |    |    |    +--- org.apache.karaf.jaas:org.apache.karaf.jaas.config:2.3.1 |    |    |    +--- org.apache.karaf.jaas:org.apache.karaf.jaas.boot:2.3.1 |    |    |    \--- org.apache.felix:org.apache.felix.utils:1.2.0 |    |    |         \--- org.osgi:org.osgi.compendium:4.1.0 -> 4.3.1 |    |    +--- org.apache.karaf:org.apache.karaf.util:2.3.1 |    |    |    \--- org.osgi:org.osgi.core:4.3.1 |    |    +--- org.apache.aries.blueprint:org.apache.aries.blueprint.core:1.1.0 |    |    |    +--- org.apache.aries.blueprint:org.apache.aries.blueprint.api:1.0.0 |    |    |    +--- org.apache.aries:org.apache.aries.util:1.0.0 |    |    |    +--- org.apache.aries.quiesce:org.apache.aries.quiesce.api:1.0.0 |    |    |    \--- org.apache.aries.proxy:org.apache.aries.proxy.api:1.0.0 |    |    |         \--- org.apache.aries:org.apache.aries.util:1.0.0 |    |    +--- org.apache.felix:org.apache.felix.gogo.runtime:0.10.0 |    |    \--- org.apache.sshd:sshd-core:0.8.0 |    |         \--- org.apache.mina:mina-core:2.0.5 |    |              \--- org.slf4j:slf4j-api:1.6.6 -> 1.7.5 |    +--- org.osgi:org.osgi.compendium:4.3.1 |    +--- org.osgi:org.osgi.core:4.3.1 |    +--- org.springframework:spring-web:3.2.3.RELEASE |    |    +--- aopalliance:aopalliance:1.0 |    |    +--- org.springframework:spring-aop:3.2.3.RELEASE (*) |    |    +--- org.springframework:spring-beans:3.2.3.RELEASE (*) |    |    +--- org.springframework:spring-context:3.2.3.RELEASE (*) |    |    \--- org.springframework:spring-core:3.2.3.RELEASE |    +--- org.springframework:spring-beans:3.2.3.RELEASE (*) |    +--- org.springframework:spring-context:3.2.3.RELEASE (*) |    +--- javax.enterprise:cdi-api:1.0-SP4 |    |    +--- org.jboss.spec.javax.interceptor:jboss-interceptors-api_1.1_spec:1.0.0.Beta1 |    |    \--- javax.inject:javax.inject:1 |    +--- com.google.code.findbugs:jsr305:2.0.1 |    \--- org.slf4j:slf4j-api:1.7.5 +--- org.soluvas:org.soluvas.data:2.1.0-SNAPSHOT |    +--- org.soluvas:org.soluvas.commons:2.1.0-SNAPSHOT (*) |    +--- org.eclipse.jgit:org.eclipse.jgit:2.3.1.201302201838-r |    |    \--- com.jcraft:jsch:0.1.46 |    +--- org.apache.karaf.shell:org.apache.karaf.shell.console:2.3.1 (*) |    +--- org.osgi:org.osgi.compendium:4.3.1 |    +--- org.osgi:org.osgi.core:4.3.1 |    +--- com.google.code.morphia:morphia:0.99.1.soluvas2 (*) |    +--- org.neo4j:neo4j-cypher:1.8.2 |    |    +--- org.scala-lang:scala-library:2.9.1-1 |    |    +--- org.neo4j:neo4j-lucene-index:1.8.2 |    |    |    +--- org.neo4j:neo4j-kernel:1.8.2 |    |    |    |    \--- org.apache.geronimo.specs:geronimo-jta_1.1_spec:1.1.1 |    |    |    \--- org.apache.lucene:lucene-core:3.5.0 |    |    +--- org.neo4j:neo4j-graph-matching:1.8.2 |    |    |    \--- org.neo4j:neo4j-kernel:1.8.2 (*) |    |    +--- org.neo4j:neo4j-kernel:1.8.2 (*) |    |    +--- org.neo4j:neo4j-graph-algo:1.8.2 |    |    |    \--- org.neo4j:neo4j-kernel:1.8.2 (*) |    |    \--- com.googlecode.concurrentlinkedhashmap:concurrentlinkedhashmap-lru:1.3.1 |    +--- org.neo4j:neo4j-kernel:1.8.2 (*) |    +--- org.springframework:spring-context:3.2.3.RELEASE (*) |    +--- javax.enterprise:cdi-api:1.0-SP4 (*) |    +--- com.google.guava:guava:14.0.1 |    +--- com.google.code.findbugs:jsr305:2.0.1 |    \--- org.slf4j:slf4j-api:1.7.5 \--- org.soluvas.buzz:core:0.1.0-SNAPSHOT      +--- com.google.guava:guava:14.0.1      +--- org.eclipse.emf:org.eclipse.emf.ecore.xmi:2.8.0.v20120911-0500      +--- org.eclipse.emf:org.eclipse.emf.ecore:2.8.1.v20120911-0500      +--- org.eclipse.emf:org.eclipse.emf.common:2.8.0.v20120911-0500      +--- com.google.code.findbugs:jsr305:2.0.1      +--- org.apache.commons:commons-lang3:3.1      +--- org.soluvas:org.soluvas.commons:2.1.0-SNAPSHOT (*)      \--- org.soluvas:org.soluvas.data:2.1.0-SNAPSHOT (*)  testCompile - Compile classpath for source set 'test'. +--- com.google.guava:guava:14.0.1 +--- org.twitter4j:twitter4j-core:3.0.3 +--- org.springframework:spring-core:3.2.2.RELEASE -> 3.2.3.RELEASE +--- org.springframework:spring-beans:3.2.2.RELEASE -> 3.2.3.RELEASE |    \--- org.springframework:spring-core:3.2.3.RELEASE +--- org.springframework:spring-context:3.2.2.RELEASE -> 3.2.3.RELEASE |    +--- org.springframework:spring-aop:3.2.3.RELEASE |    |    +--- aopalliance:aopalliance:1.0 |    |    +--- org.springframework:spring-beans:3.2.3.RELEASE (*) |    |    \--- org.springframework:spring-core:3.2.3.RELEASE |    +--- org.springframework:spring-beans:3.2.3.RELEASE (*) |    +--- org.springframework:spring-core:3.2.3.RELEASE |    \--- org.springframework:spring-expression:3.2.3.RELEASE |         \--- org.springframework:spring-core:3.2.3.RELEASE +--- org.springframework:spring-tx:3.2.2.RELEASE |    +--- aopalliance:aopalliance:1.0 |    +--- org.springframework:spring-beans:3.2.2.RELEASE -> 3.2.3.RELEASE (*) |    \--- org.springframework:spring-core:3.2.2.RELEASE -> 3.2.3.RELEASE +--- org.springframework:spring-orm:3.2.2.RELEASE |    +--- aopalliance:aopalliance:1.0 |    +--- org.springframework:spring-beans:3.2.2.RELEASE -> 3.2.3.RELEASE (*) |    +--- org.springframework:spring-core:3.2.2.RELEASE -> 3.2.3.RELEASE |    +--- org.springframework:spring-jdbc:3.2.2.RELEASE |    |    +--- org.springframework:spring-beans:3.2.2.RELEASE -> 3.2.3.RELEASE (*) |    |    +--- org.springframework:spring-core:3.2.2.RELEASE -> 3.2.3.RELEASE |    |    \--- org.springframework:spring-tx:3.2.2.RELEASE (*) |    \--- org.springframework:spring-tx:3.2.2.RELEASE (*) +--- commons-dbcp:commons-dbcp:1.4 |    \--- commons-pool:commons-pool:1.5.4 +--- org.hibernate:hibernate-entitymanager:4.2.2.Final |    +--- org.jboss.logging:jboss-logging:3.1.0.GA |    +--- dom4j:dom4j:1.6.1 |    +--- org.jboss.spec.javax.transaction:jboss-transaction-api_1.1_spec:1.0.1.Final |    +--- org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.1.Final |    +--- org.hibernate.common:hibernate-commons-annotations:4.0.2.Final |    |    \--- org.jboss.logging:jboss-logging:3.1.0.CR2 -> 3.1.0.GA |    +--- org.javassist:javassist:3.15.0-GA |    \--- org.hibernate:hibernate-core:4.2.2.Final |         +--- antlr:antlr:2.7.7 |         +--- org.jboss.logging:jboss-logging:3.1.0.GA |         +--- dom4j:dom4j:1.6.1 |         +--- org.jboss.spec.javax.transaction:jboss-transaction-api_1.1_spec:1.0.1.Final |         +--- org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.1.Final |         +--- org.hibernate.common:hibernate-commons-annotations:4.0.2.Final (*) |         \--- org.javassist:javassist:3.15.0-GA +--- org.postgresql:postgresql:9.2-1003-jdbc4 +--- org.soluvas:org.soluvas.commons:2.1.0-SNAPSHOT |    +--- com.codahale.metrics:metrics-core:3.0.0 |    |    \--- org.slf4j:slf4j-api:1.7.5 |    +--- com.damnhandy:handy-uri-templates:1.1.7 |    +--- com.rabbitmq:amqp-client:2.8.7 |    +--- com.google.code.morphia:morphia:0.99.1.soluvas2 |    |    \--- org.mongodb:mongo-java-driver:2.7.3 |    +--- com.google.code.morphia:morphia-logging-slf4j:0.99 |    |    +--- com.google.code.morphia:morphia:0.99 -> 0.99.1.soluvas2 (*) |    |    +--- org.slf4j:slf4j-api:1.5.6 -> 1.7.5 |    |    \--- org.mongodb:mongo-java-driver:2.3 -> 2.7.3 |    +--- org.apache.httpcomponents:httpclient:4.2.5 |    |    +--- org.apache.httpcomponents:httpcore:4.2.4 |    |    \--- commons-codec:commons-codec:1.6 |    +--- com.fasterxml.jackson.datatype:jackson-datatype-joda:2.2.2 |    |    +--- com.fasterxml.jackson.core:jackson-core:2.2.2 |    |    +--- com.fasterxml.jackson.core:jackson-databind:2.2.2 |    |    |    +--- com.fasterxml.jackson.core:jackson-annotations:2.2.2 |    |    |    \--- com.fasterxml.jackson.core:jackson-core:2.2.2 |    |    \--- joda-time:joda-time:2.1 -> 2.2 |    +--- com.fasterxml.jackson.datatype:jackson-datatype-guava:2.2.2 |    |    +--- com.fasterxml.jackson.core:jackson-databind:2.2.2 (*) |    |    +--- com.fasterxml.jackson.core:jackson-core:2.2.2 |    |    \--- com.google.guava:guava:12.0 -> 14.0.1 |    +--- com.fasterxml.jackson.core:jackson-databind:2.2.2 (*) |    +--- commons-beanutils:commons-beanutils:1.8.3 |    +--- org.apache.commons:commons-lang3:3.1 |    +--- com.google.guava:guava:14.0.1 |    +--- org.jscience:jscience:4.3.1 |    |    \--- org.javolution:javolution:5.2.3 |    +--- org.joda:joda-money:0.9 |    +--- joda-time:joda-time:2.2 |    +--- org.eclipse.emf:org.eclipse.emf.ecore.xmi:2.8.0.v20120911-0500 |    +--- org.eclipse.emf:org.eclipse.emf.ecore:2.8.1.v20120911-0500 |    +--- org.eclipse.emf:org.eclipse.emf.common:2.8.0.v20120911-0500 |    +--- org.apache.karaf.shell:org.apache.karaf.shell.console:2.3.1 |    |    +--- jline:jline:2.9 |    |    +--- org.fusesource.jansi:jansi:1.9 |    |    +--- org.osgi:org.osgi.core:4.3.1 |    |    +--- org.osgi:org.osgi.compendium:4.3.1 |    |    +--- org.apache.karaf.jaas:org.apache.karaf.jaas.boot:2.3.1 |    |    +--- org.apache.karaf.jaas:org.apache.karaf.jaas.modules:2.3.1 |    |    |    +--- org.apache.karaf.jaas:org.apache.karaf.jaas.config:2.3.1 |    |    |    +--- org.apache.karaf.jaas:org.apache.karaf.jaas.boot:2.3.1 |    |    |    \--- org.apache.felix:org.apache.felix.utils:1.2.0 |    |    |         \--- org.osgi:org.osgi.compendium:4.1.0 -> 4.3.1 |    |    +--- org.apache.karaf:org.apache.karaf.util:2.3.1 |    |    |    \--- org.osgi:org.osgi.core:4.3.1 |    |    +--- org.apache.aries.blueprint:org.apache.aries.blueprint.core:1.1.0 |    |    |    +--- org.apache.aries.blueprint:org.apache.aries.blueprint.api:1.0.0 |    |    |    +--- org.apache.aries:org.apache.aries.util:1.0.0 |    |    |    +--- org.apache.aries.quiesce:org.apache.aries.quiesce.api:1.0.0 |    |    |    \--- org.apache.aries.proxy:org.apache.aries.proxy.api:1.0.0 |    |    |         \--- org.apache.aries:org.apache.aries.util:1.0.0 |    |    +--- org.apache.felix:org.apache.felix.gogo.runtime:0.10.0 |    |    \--- org.apache.sshd:sshd-core:0.8.0 |    |         \--- org.apache.mina:mina-core:2.0.5 |    |              \--- org.slf4j:slf4j-api:1.6.6 -> 1.7.5 |    +--- org.osgi:org.osgi.compendium:4.3.1 |    +--- org.osgi:org.osgi.core:4.3.1 |    +--- org.springframework:spring-web:3.2.3.RELEASE |    |    +--- aopalliance:aopalliance:1.0 |    |    +--- org.springframework:spring-aop:3.2.3.RELEASE (*) |    |    +--- org.springframework:spring-beans:3.2.3.RELEASE (*) |    |    +--- org.springframework:spring-context:3.2.3.RELEASE (*) |    |    \--- org.springframework:spring-core:3.2.3.RELEASE |    +--- org.springframework:spring-beans:3.2.3.RELEASE (*) |    +--- org.springframework:spring-context:3.2.3.RELEASE (*) |    +--- javax.enterprise:cdi-api:1.0-SP4 |    |    +--- org.jboss.spec.javax.interceptor:jboss-interceptors-api_1.1_spec:1.0.0.Beta1 |    |    \--- javax.inject:javax.inject:1 |    +--- com.google.code.findbugs:jsr305:2.0.1 |    \--- org.slf4j:slf4j-api:1.7.5 +--- org.soluvas:org.soluvas.data:2.1.0-SNAPSHOT |    +--- org.soluvas:org.soluvas.commons:2.1.0-SNAPSHOT (*) |    +--- org.eclipse.jgit:org.eclipse.jgit:2.3.1.201302201838-r |    |    \--- com.jcraft:jsch:0.1.46 |    +--- org.apache.karaf.shell:org.apache.karaf.shell.console:2.3.1 (*) |    +--- org.osgi:org.osgi.compendium:4.3.1 |    +--- org.osgi:org.osgi.core:4.3.1 |    +--- com.google.code.morphia:morphia:0.99.1.soluvas2 (*) |    +--- org.neo4j:neo4j-cypher:1.8.2 |    |    +--- org.scala-lang:scala-library:2.9.1-1 |    |    +--- org.neo4j:neo4j-lucene-index:1.8.2 |    |    |    +--- org.neo4j:neo4j-kernel:1.8.2 |    |    |    |    \--- org.apache.geronimo.specs:geronimo-jta_1.1_spec:1.1.1 |    |    |    \--- org.apache.lucene:lucene-core:3.5.0 |    |    +--- org.neo4j:neo4j-graph-matching:1.8.2 |    |    |    \--- org.neo4j:neo4j-kernel:1.8.2 (*) |    |    +--- org.neo4j:neo4j-kernel:1.8.2 (*) |    |    +--- org.neo4j:neo4j-graph-algo:1.8.2 |    |    |    \--- org.neo4j:neo4j-kernel:1.8.2 (*) |    |    \--- com.googlecode.concurrentlinkedhashmap:concurrentlinkedhashmap-lru:1.3.1 |    +--- org.neo4j:neo4j-kernel:1.8.2 (*) |    +--- org.springframework:spring-context:3.2.3.RELEASE (*) |    +--- javax.enterprise:cdi-api:1.0-SP4 (*) |    +--- com.google.guava:guava:14.0.1 |    +--- com.google.code.findbugs:jsr305:2.0.1 |    \--- org.slf4j:slf4j-api:1.7.5 +--- org.soluvas.buzz:core:0.1.0-SNAPSHOT |    +--- com.google.guava:guava:14.0.1 |    +--- org.eclipse.emf:org.eclipse.emf.ecore.xmi:2.8.0.v20120911-0500 |    +--- org.eclipse.emf:org.eclipse.emf.ecore:2.8.1.v20120911-0500 |    +--- org.eclipse.emf:org.eclipse.emf.common:2.8.0.v20120911-0500 |    +--- com.google.code.findbugs:jsr305:2.0.1 |    +--- org.apache.commons:commons-lang3:3.1 |    +--- org.soluvas:org.soluvas.commons:2.1.0-SNAPSHOT (*) |    \--- org.soluvas:org.soluvas.data:2.1.0-SNAPSHOT (*) +--- junit:junit:4.11 |    \--- org.hamcrest:hamcrest-core:1.3 +--- org.hamcrest:hamcrest-all:1.3 \--- org.springframework:spring-test:3.2.2.RELEASE      \--- org.springframework:spring-core:3.2.2.RELEASE -> 3.2.3.RELEASE  testRuntime - Runtime classpath for source set 'test'. +--- com.google.guava:guava:14.0.1 +--- org.twitter4j:twitter4j-core:3.0.3 +--- org.springframework:spring-core:3.2.2.RELEASE -> 3.2.3.RELEASE +--- org.springframework:spring-beans:3.2.2.RELEASE -> 3.2.3.RELEASE |    \--- org.springframework:spring-core:3.2.3.RELEASE +--- org.springframework:spring-context:3.2.2.RELEASE -> 3.2.3.RELEASE |    +--- org.springframework:spring-aop:3.2.3.RELEASE |    |    +--- aopalliance:aopalliance:1.0 |    |    +--- org.springframework:spring-beans:3.2.3.RELEASE (*) |    |    \--- org.springframework:spring-core:3.2.3.RELEASE |    +--- org.springframework:spring-beans:3.2.3.RELEASE (*) |    +--- org.springframework:spring-core:3.2.3.RELEASE |    \--- org.springframework:spring-expression:3.2.3.RELEASE |         \--- org.springframework:spring-core:3.2.3.RELEASE +--- org.springframework:spring-tx:3.2.2.RELEASE |    +--- aopalliance:aopalliance:1.0 |    +--- org.springframework:spring-beans:3.2.2.RELEASE -> 3.2.3.RELEASE (*) |    \--- org.springframework:spring-core:3.2.2.RELEASE -> 3.2.3.RELEASE +--- org.springframework:spring-orm:3.2.2.RELEASE |    +--- aopalliance:aopalliance:1.0 |    +--- org.springframework:spring-beans:3.2.2.RELEASE -> 3.2.3.RELEASE (*) |    +--- org.springframework:spring-core:3.2.2.RELEASE -> 3.2.3.RELEASE |    +--- org.springframework:spring-jdbc:3.2.2.RELEASE |    |    +--- org.springframework:spring-beans:3.2.2.RELEASE -> 3.2.3.RELEASE (*) |    |    +--- org.springframework:spring-core:3.2.2.RELEASE -> 3.2.3.RELEASE |    |    \--- org.springframework:spring-tx:3.2.2.RELEASE (*) |    \--- org.springframework:spring-tx:3.2.2.RELEASE (*) +--- commons-dbcp:commons-dbcp:1.4 |    \--- commons-pool:commons-pool:1.5.4 +--- org.hibernate:hibernate-entitymanager:4.2.2.Final |    +--- org.jboss.logging:jboss-logging:3.1.0.GA |    +--- dom4j:dom4j:1.6.1 |    +--- org.jboss.spec.javax.transaction:jboss-transaction-api_1.1_spec:1.0.1.Final |    +--- org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.1.Final |    +--- org.hibernate.common:hibernate-commons-annotations:4.0.2.Final |    |    \--- org.jboss.logging:jboss-logging:3.1.0.CR2 -> 3.1.0.GA |    +--- org.javassist:javassist:3.15.0-GA |    \--- org.hibernate:hibernate-core:4.2.2.Final |         +--- antlr:antlr:2.7.7 |         +--- org.jboss.logging:jboss-logging:3.1.0.GA |         +--- dom4j:dom4j:1.6.1 |         +--- org.jboss.spec.javax.transaction:jboss-transaction-api_1.1_spec:1.0.1.Final |         +--- org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.1.Final |         +--- org.hibernate.common:hibernate-commons-annotations:4.0.2.Final (*) |         \--- org.javassist:javassist:3.15.0-GA +--- org.postgresql:postgresql:9.2-1003-jdbc4 +--- org.soluvas:org.soluvas.commons:2.1.0-SNAPSHOT |    +--- com.codahale.metrics:metrics-core:3.0.0 |    |    \--- org.slf4j:slf4j-api:1.7.5 |    +--- com.damnhandy:handy-uri-templates:1.1.7 |    +--- com.rabbitmq:amqp-client:2.8.7 |    +--- com.google.code.morphia:morphia:0.99.1.soluvas2 |    |    \--- org.mongodb:mongo-java-driver:2.7.3 |    +--- com.google.code.morphia:morphia-logging-slf4j:0.99 |    |    +--- com.google.code.morphia:morphia:0.99 -> 0.99.1.soluvas2 (*) |    |    +--- org.slf4j:slf4j-api:1.5.6 -> 1.7.5 |    |    \--- org.mongodb:mongo-java-driver:2.3 -> 2.7.3 |    +--- org.apache.httpcomponents:httpclient:4.2.5 |    |    +--- org.apache.httpcomponents:httpcore:4.2.4 |    |    \--- commons-codec:commons-codec:1.6 |    +--- com.fasterxml.jackson.datatype:jackson-datatype-joda:2.2.2 |    |    +--- com.fasterxml.jackson.core:jackson-core:2.2.2 |    |    +--- com.fasterxml.jackson.core:jackson-databind:2.2.2 |    |    |    +--- com.fasterxml.jackson.core:jackson-annotations:2.2.2 |    |    |    \--- com.fasterxml.jackson.core:jackson-core:2.2.2 |    |    \--- joda-time:joda-time:2.1 -> 2.2 |    +--- com.fasterxml.jackson.datatype:jackson-datatype-guava:2.2.2 |    |    +--- com.fasterxml.jackson.core:jackson-databind:2.2.2 (*) |    |    +--- com.fasterxml.jackson.core:jackson-core:2.2.2 |    |    \--- com.google.guava:guava:12.0 -> 14.0.1 |    +--- com.fasterxml.jackson.core:jackson-databind:2.2.2 (*) |    +--- commons-beanutils:commons-beanutils:1.8.3 |    +--- org.apache.commons:commons-lang3:3.1 |    +--- com.google.guava:guava:14.0.1 |    +--- org.jscience:jscience:4.3.1 |    |    \--- org.javolution:javolution:5.2.3 |    +--- org.joda:joda-money:0.9 |    +--- joda-time:joda-time:2.2 |    +--- org.eclipse.emf:org.eclipse.emf.ecore.xmi:2.8.0.v20120911-0500 |    +--- org.eclipse.emf:org.eclipse.emf.ecore:2.8.1.v20120911-0500 |    +--- org.eclipse.emf:org.eclipse.emf.common:2.8.0.v20120911-0500 |    +--- org.apache.karaf.shell:org.apache.karaf.shell.console:2.3.1 |    |    +--- jline:jline:2.9 |    |    +--- org.fusesource.jansi:jansi:1.9 |    |    +--- org.osgi:org.osgi.core:4.3.1 |    |    +--- org.osgi:org.osgi.compendium:4.3.1 |    |    +--- org.apache.karaf.jaas:org.apache.karaf.jaas.boot:2.3.1 |    |    +--- org.apache.karaf.jaas:org.apache.karaf.jaas.modules:2.3.1 |    |    |    +--- org.apache.karaf.jaas:org.apache.karaf.jaas.config:2.3.1 |    |    |    +--- org.apache.karaf.jaas:org.apache.karaf.jaas.boot:2.3.1 |    |    |    \--- org.apache.felix:org.apache.felix.utils:1.2.0 |    |    |         \--- org.osgi:org.osgi.compendium:4.1.0 -> 4.3.1 |    |    +--- org.apache.karaf:org.apache.karaf.util:2.3.1 |    |    |    \--- org.osgi:org.osgi.core:4.3.1 |    |    +--- org.apache.aries.blueprint:org.apache.aries.blueprint.core:1.1.0 |    |    |    +--- org.apache.aries.blueprint:org.apache.aries.blueprint.api:1.0.0 |    |    |    +--- org.apache.aries:org.apache.aries.util:1.0.0 |    |    |    +--- org.apache.aries.quiesce:org.apache.aries.quiesce.api:1.0.0 |    |    |    \--- org.apache.aries.proxy:org.apache.aries.proxy.api:1.0.0 |    |    |         \--- org.apache.aries:org.apache.aries.util:1.0.0 |    |    +--- org.apache.felix:org.apache.felix.gogo.runtime:0.10.0 |    |    \--- org.apache.sshd:sshd-core:0.8.0 |    |         \--- org.apache.mina:mina-core:2.0.5 |    |              \--- org.slf4j:slf4j-api:1.6.6 -> 1.7.5 |    +--- org.osgi:org.osgi.compendium:4.3.1 |    +--- org.osgi:org.osgi.core:4.3.1 |    +--- org.springframework:spring-web:3.2.3.RELEASE |    |    +--- aopalliance:aopalliance:1.0 |    |    +--- org.springframework:spring-aop:3.2.3.RELEASE (*) |    |    +--- org.springframework:spring-beans:3.2.3.RELEASE (*) |    |    +--- org.springframework:spring-context:3.2.3.RELEASE (*) |    |    \--- org.springframework:spring-core:3.2.3.RELEASE |    +--- org.springframework:spring-beans:3.2.3.RELEASE (*) |    +--- org.springframework:spring-context:3.2.3.RELEASE (*) |    +--- javax.enterprise:cdi-api:1.0-SP4 |    |    +--- org.jboss.spec.javax.interceptor:jboss-interceptors-api_1.1_spec:1.0.0.Beta1 |    |    \--- javax.inject:javax.inject:1 |    +--- com.google.code.findbugs:jsr305:2.0.1 |    \--- org.slf4j:slf4j-api:1.7.5 +--- org.soluvas:org.soluvas.data:2.1.0-SNAPSHOT |    +--- org.soluvas:org.soluvas.commons:2.1.0-SNAPSHOT (*) |    +--- org.eclipse.jgit:org.eclipse.jgit:2.3.1.201302201838-r |    |    \--- com.jcraft:jsch:0.1.46 |    +--- org.apache.karaf.shell:org.apache.karaf.shell.console:2.3.1 (*) |    +--- org.osgi:org.osgi.compendium:4.3.1 |    +--- org.osgi:org.osgi.core:4.3.1 |    +--- com.google.code.morphia:morphia:0.99.1.soluvas2 (*) |    +--- org.neo4j:neo4j-cypher:1.8.2 |    |    +--- org.scala-lang:scala-library:2.9.1-1 |    |    +--- org.neo4j:neo4j-lucene-index:1.8.2 |    |    |    +--- org.neo4j:neo4j-kernel:1.8.2 |    |    |    |    \--- org.apache.geronimo.specs:geronimo-jta_1.1_spec:1.1.1 |    |    |    \--- org.apache.lucene:lucene-core:3.5.0 |    |    +--- org.neo4j:neo4j-graph-matching:1.8.2 |    |    |    \--- org.neo4j:neo4j-kernel:1.8.2 (*) |    |    +--- org.neo4j:neo4j-kernel:1.8.2 (*) |    |    +--- org.neo4j:neo4j-graph-algo:1.8.2 |    |    |    \--- org.neo4j:neo4j-kernel:1.8.2 (*) |    |    \--- com.googlecode.concurrentlinkedhashmap:concurrentlinkedhashmap-lru:1.3.1 |    +--- org.neo4j:neo4j-kernel:1.8.2 (*) |    +--- org.springframework:spring-context:3.2.3.RELEASE (*) |    +--- javax.enterprise:cdi-api:1.0-SP4 (*) |    +--- com.google.guava:guava:14.0.1 |    +--- com.google.code.findbugs:jsr305:2.0.1 |    \--- org.slf4j:slf4j-api:1.7.5 +--- org.soluvas.buzz:core:0.1.0-SNAPSHOT |    +--- com.google.guava:guava:14.0.1 |    +--- org.eclipse.emf:org.eclipse.emf.ecore.xmi:2.8.0.v20120911-0500 |    +--- org.eclipse.emf:org.eclipse.emf.ecore:2.8.1.v20120911-0500 |    +--- org.eclipse.emf:org.eclipse.emf.common:2.8.0.v20120911-0500 |    +--- com.google.code.findbugs:jsr305:2.0.1 |    +--- org.apache.commons:commons-lang3:3.1 |    +--- org.soluvas:org.soluvas.commons:2.1.0-SNAPSHOT (*) |    \--- org.soluvas:org.soluvas.data:2.1.0-SNAPSHOT (*) +--- junit:junit:4.11 |    \--- org.hamcrest:hamcrest-core:1.3 +--- org.hamcrest:hamcrest-all:1.3 \--- org.springframework:spring-test:3.2.2.RELEASE      \--- org.springframework:spring-core:3.2.2.RELEASE -> 3.2.3.RELEASE  (*) - dependencies omitted (listed previously)  BUILD SUCCESSFUL  Total time: 10.682 secs ```  Context :  ```    ```  Test case : https://github.com/soluvas/soluvas-buzz/tree/spring-asm-error  (simply run the test case in `twitter` project)   ---  **Affects:** 3.2.2, 3.2.3","closed","in: test,","spring-projects-issues","2013-07-08T23:42:03Z","2019-01-11T22:04:27Z"
"","15074","java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxy exception when annotation config not found needs to specify what class is not found [SPR-10441]","**[Hendy Irawan](https://jira.spring.io/secure/ViewProfile.jspa?name=ceefour)** opened **[SPR-10441](https://jira.spring.io/browse/SPR-10441?redirect=false)** and commented  It happened for me when I used Spring Configuration annotation like this:  ``` @Configuration @Import({ Config.class }) public class WebConfig extends WebMvcConfigurerAdapter {    ... } ```  When I renamed Config.class to CoreConfig.class the error occurred when starting jetty. this happened because the CoreConfig.class was in a different sub module of my maven project, so jetty couldn't see it (as it resolves dependencies through mvn local repository).  After calling 'mvn install' everything was fine again.  This is a packaging problem on user's part. Some class is not on the classpath.  as described in http://stackoverflow.com/questions/11823288/java-lang-arraystoreexception-sun-reflect-annotation-typenotpresentexceptionpro  However the exception stacktrace does not mention what class cannot be found by Spring. So locating the culprit in a large project is very difficult and time consuming.  Spring should pinpoint the affected class, who loads that class, so app developer can fix it.  ``` Exception in thread ""main"" java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxy 	at sun.reflect.annotation.AnnotationParser.parseClassArray(AnnotationParser.java:673) 	at sun.reflect.annotation.AnnotationParser.parseArray(AnnotationParser.java:480) 	at sun.reflect.annotation.AnnotationParser.parseMemberValue(AnnotationParser.java:306) 	at sun.reflect.annotation.AnnotationParser.parseAnnotation(AnnotationParser.java:241) 	at sun.reflect.annotation.AnnotationParser.parseAnnotations2(AnnotationParser.java:88) 	at sun.reflect.annotation.AnnotationParser.parseAnnotations(AnnotationParser.java:70) 	at java.lang.Class.initAnnotationsIfNecessary(Class.java:3178) 	at java.lang.Class.getAnnotations(Class.java:3158) 	at org.springframework.core.annotation.AnnotatedElementUtils.doProcess(AnnotatedElementUtils.java:159) 	at org.springframework.core.annotation.AnnotatedElementUtils.process(AnnotatedElementUtils.java:152) 	at org.springframework.core.annotation.AnnotatedElementUtils.isAnnotated(AnnotatedElementUtils.java:72) 	at org.springframework.core.type.StandardAnnotationMetadata.isAnnotated(StandardAnnotationMetadata.java:102) 	at org.springframework.context.annotation.ConditionEvaluator.shouldSkip(ConditionEvaluator.java:72) 	at org.springframework.context.annotation.ConditionEvaluator.shouldSkip(ConditionEvaluator.java:62) 	at org.springframework.context.annotation.AnnotatedBeanDefinitionReader.registerBean(AnnotatedBeanDefinitionReader.java:140) 	at org.springframework.context.annotation.AnnotatedBeanDefinitionReader.registerBean(AnnotatedBeanDefinitionReader.java:127) 	at org.springframework.context.annotation.AnnotatedBeanDefinitionReader.register(AnnotatedBeanDefinitionReader.java:122) 	at org.springframework.context.annotation.AnnotationConfigApplicationContext.register(AnnotationConfigApplicationContext.java:151) 	at org.springframework.context.annotation.AnnotationConfigApplicationContext.(AnnotationConfigApplicationContext.java:83) 	at org.springframework.issues.SampleApp.main(SampleApp.java:12) ```  ---  **Affects:** 3.2.2  **Issue Links:** - #17112 Useless exception message when annotations can't be parsed (_**""is duplicated by""**_) - #16493 AnnotationUtils.findAnnotation fails with poor diagnostics if it encounters an Annotation that references an unloadable class - #16995 Improve diagnostics when AnnotationAttributesReadingVisitor triggers an ArrayStoreException from Class.getAnnotations()  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ac61b13a7c8284dea58ca4d2a046a44d317ced00  0 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2013-04-04T03:37:37Z","2019-01-11T21:15:20Z"
"","14696","@Async method invocations run serially when called in a loop [SPR-10063]","**[hari iyer](https://jira.spring.io/secure/ViewProfile.jspa?name=iyerha)** opened **[SPR-10063](https://jira.spring.io/browse/SPR-10063?redirect=false)** and commented  I have an `@Async` annotated method that I call in a loop. These are executed by different threads as expected. As documented, I would also expect that each invocation would immediately return so that the actual executions are interleaved. It turns out that they are run serially instead. This is borne out by the behavior and the log timings.  `@Async` public Future enrichChunk(List\ chunk) { log.debug(""within...thread ""+Thread.currentThread().getId()); try { Thread.sleep(3000); } catch(InterruptedException ex) {      }     return new AsyncResult(null);  }  [12-02 16:05:09] DEBUG ParallelTask [main]: invoke ... [12-02 16:05:09] DEBUG ParallelTask [threadPoolExecutor-1]: within...thread 17 [12-02 16:05:12] DEBUG ParallelTask [main]: invoke ... [12-02 16:05:12] DEBUG ParallelTask [threadPoolExecutor-2]: within...thread 18  In the end I used executorService.invokeAll to get the desired behavior   ---  **Affects:** 3.0.5","closed","in: core,","spring-projects-issues","2012-12-03T06:05:03Z","2019-01-12T05:27:42Z"
"","15352","Inside @Cacheable annotation, new feature SpEL 'unless' does not work [SPR-10724]","**[Hao Liu](https://jira.spring.io/secure/ViewProfile.jspa?name=leo524891010)** opened **[SPR-10724](https://jira.spring.io/browse/SPR-10724?redirect=false)** and commented  [1] pom.xml:  ``` 		 		    net.sf.ehcache     		ehcache-core     		2.6.6 		  		 			cglib 			cglib-nodep 			2.2.2 		  		 			org.springframework 			spring-core 			3.2.3.RELEASE 		 		 			org.springframework 			spring-context 			3.2.3.RELEASE 		 		 			org.springframework 			spring-context-support 			3.2.3.RELEASE 		 		 			org.springframework 			spring-beans 			3.2.3.RELEASE 		 ```  [2] QueueIdMappingClient.java: (Here I am using cache here)  ```java @Cacheable(value=""queueIds"", key=""#servicePhoneNumber"", unless=""#result == -1"") public int getQueueIdByPhoneNumber(String servicePhoneNumber) {...} ```  [3] ehcache.xml: (ehcache object defined here.)  ```         	  	  ```  [3] springmvc-context.xml:  ```        	     ...  ```    ---  **Affects:** 3.2.3  **Reference URL:** http://stackoverflow.com/questions/17440526/using-element-unless-for-cacheable-spring-3-2-3-not-working  0 votes, 5 watchers","closed","in: core,","spring-projects-issues","2013-07-05T15:41:34Z","2019-01-11T22:04:21Z"
"","15463","Velocity springFormCheckboxes macro does not check preselected items correctly [SPR-10837]","**[Hamid Badiozamani](https://jira.spring.io/secure/ViewProfile.jspa?name=badiozam)** opened **[SPR-10837](https://jira.spring.io/browse/SPR-10837?redirect=false)** and commented  In Spring 3.1.4 (and possibly other releases) the springFormCheckboxes macro iterates through the $status.value variable to determine whether or not an item needs to be checked or not.  We ran into an issue with the checkboxes not properly reflecting the form backing object. Let's say the model attribute variable ""command"" has a variable ""command.userSelections"" which is of type Map and $possibleSelectionList which is of type Map exposed in the model.  Iterating the command.userSelections map and using $i as the key if we use:  #springFormCheckboxes( ""command.userSelections[$i]"" $possibleSelectionList """" """")  We would not see any of the checkboxes as having been selected regardless of the value in command.userSelections[$i]. After further investigation it appears that the culprit is here:  spring.vm:263 #foreach($item in $status.value) #if($item == $option) checked=""checked"" #end #end  The $status.value is converted to a String representation of the contents of the bound variable which in this case happens to be a List\ and as such VTL is unable to traverse it in the #foreach loop above.  We used the following workaround:  #** * springFormCheckboxes *  * Show checkboxes. *  * `@param` path the name of the field to bind to * `@param` options a map (value=label) of all the available options * `@param` separator the html tag or other character list that should be used to * separate each option.  Typically ' ' or '\' * `@param` attributes any additional attributes for the element (such as class * or CSS styles or size   *#   #macro( springFormCheckboxes $path $options $separator $attributes )   #springBind($path)   #set( $literal = '#set( $pathValue = $' )   #set( $pathValueEval = ""$literal$path)"" )   #evaluate( $pathValueEval )   #foreach($option in $options.keySet())","closed","type: bug,","spring-projects-issues","2013-08-14T19:59:48Z","2014-02-18T22:35:59Z"
"","15443","MappingJackson2HttpMessageConverter and MappingJacksonHttpMessageConverter should use configured JSON prefix instead of hardcoded value. [SPR-10817]","**[Halvard Skogsrud](https://jira.spring.io/secure/ViewProfile.jspa?name=halvards)** opened **[SPR-10817](https://jira.spring.io/browse/SPR-10817?redirect=false)** and commented  Thanks for adding the ability to configure a custom JSON prefix in MappingJackson(2)HttpMessageConverter in #15255: https://jira.springsource.org/browse/SPR-10627.  Unfortunately the custom value is not used when writing out the JSON, instead the hardcoded string ""{} && "" is used.  This line (see GitHub links below) should instead read:      jsonGenerator.writeRaw(jsonPrefix);  Links (to v3.2.4.RELEASE code):  MappingJackson2HttpMessageConverter: https://github.com/SpringSource/spring-framework/blob/v3.2.4.RELEASE/spring-web/src/main/java/org/springframework/http/converter/json/MappingJackson2HttpMessageConverter.java#L202  MappingJacksonHttpMessageConverter: https://github.com/SpringSource/spring-framework/blob/v3.2.4.RELEASE/spring-web/src/main/java/org/springframework/http/converter/json/MappingJacksonHttpMessageConverter.java#L199  ---  **Affects:** 3.2.4, 4.0 M2  **Reference URL:** https://github.com/SpringSource/spring-framework/blob/v3.2.4.RELEASE/spring-web/src/main/java/org/springframework/http/converter/json/MappingJackson2HttpMessageConverter.java#L202  **Issue Links:** - #15255 Configurable JSON prefix on MappingJackson2HttpMessageConverter and MappingJacksonHttpMessageConverter","closed","type: bug,","spring-projects-issues","2013-08-07T19:03:21Z","2019-01-11T22:05:26Z"
"","15255","Configurable JSON prefix on MappingJackson2HttpMessageConverter and MappingJacksonHttpMessageConverter [SPR-10627]","**[Halvard Skogsrud](https://jira.spring.io/secure/ViewProfile.jspa?name=halvards)** opened **[SPR-10627](https://jira.spring.io/browse/SPR-10627?redirect=false)** and commented  Spring MVC currently prevents JSON hijacking by prefixing the response with ""{} &&"" if the prefixJSON bean property is set.  This has been made configurable in MappingJackson(2)JsonView (see #15196), but not in MappingJackson(2)HttpMessageConverter.  Could we implement the same change in the message converters?  ---  **Affects:** 3.2.3  **Issue Links:** - #15443 MappingJackson2HttpMessageConverter and MappingJacksonHttpMessageConverter should use configured JSON prefix instead of hardcoded value.  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2013-06-04T17:04:10Z","2019-01-11T22:26:08Z"
"","15299","Spring MVC auto retrying POST requests when file is attached [SPR-10671]","**[Gustavo Matias](https://jira.spring.io/secure/ViewProfile.jspa?name=gumatias)** opened **[SPR-10671](https://jira.spring.io/browse/SPR-10671?redirect=false)** and commented  Hello,  I'm not really sure if this is a bug but since I couldn't figure it out and people in forums didn't help, I thought this would be the best place to at least mention about it.  I'm getting some strange behavior with my web application and I can't seem to figure out what's going on.  The problem is that whenever the controller takes more than a certain time to respond, for some reason it retries (based on how long it's taking). The first attempt was with a file upload, but then commenting out everything in my controller and only having:  Thread.currentThread().sleep(60000);  I noticed in the logs that something was still POSTing requests continuously until the Thread was done.  I'm not sure if it matters but here's my form:  \ Select a file: \ \ \  I tested POSTing with NO file attached and it worked (controller received only 1 request), but with a file uploaded in the request the controller got two requests.  Am I missing some sort of config? (I can provide more info if needed)  logs:  02:18:22.570::o.s.w.s.DispatcherServlet::DEBUG::DispatcherServlet with name 'DispatcherServlet' processing POST request for [/w/upload] 02:18:22.621::o.s.w.m.c.CommonsMultipartResolver::DEBUG::Found multipart file [videoFileData] of size 3773872 bytes with original filename [VID_20130505_184912.mp4], stored at [/Users/gumatias/Work/code/ownits/ownits/ownits-skate-uploader/target/work/upload_78f4071c_b8dc_4923_a723_ae9c9d7eaf82_00000003.tmp] 02:18:22.624::o.s.w.s.m.m.a.RequestMappingHandlerMapping::DEBUG::Looking up handler method for path /upload 02:18:22.624::o.s.w.s.m.m.a.RequestMappingHandlerMapping::DEBUG::Returning handler method [public org.springframework.web.servlet.ModelAndView com.ownits.uploader.web.controller.UploadController.handleRequest(com.ownits.uploader.web.form.UploadForm) throws java.lang.Exception] 02:18:22.624::o.s.b.f.s.DefaultListableBeanFactory::DEBUG::Returning cached instance of singleton bean 'uploadController' 02:18:22.635::c.o.u.w.c.UploadController::INFO ::Uploading video... 02:18:52.572::o.s.w.s.DispatcherServlet::DEBUG::DispatcherServlet with name 'DispatcherServlet' processing POST request for [/w/upload] 02:18:52.602::o.s.w.m.c.CommonsMultipartResolver::DEBUG::Found multipart file [videoFileData] of size 3773872 bytes with original filename [VID_20130505_184912.mp4], stored at [/Users/gumatias/Work/code/ownits/ownits/ownits-skate-uploader/target/work/upload_78f4071c_b8dc_4923_a723_ae9c9d7eaf82_00000007.tmp] 02:18:52.602::o.s.w.s.m.m.a.RequestMappingHandlerMapping::DEBUG::Looking up handler method for path /upload 02:18:52.602::o.s.w.s.m.m.a.RequestMappingHandlerMapping::DEBUG::Returning handler method [public org.springframework.web.servlet.ModelAndView com.ownits.uploader.web.controller.UploadController.handleRequest(com.ownits.uploader.web.form.UploadForm) throws java.lang.Exception] 02:18:52.602::o.s.b.f.s.DefaultListableBeanFactory::DEBUG::Returning cached instance of singleton bean 'uploadController' 02:18:52.603::c.o.u.w.c.UploadController::INFO ::Uploading video... 02:19:22.637::c.o.u.w.c.UploadController::INFO ::Done uploading video 02:19:22.637::o.s.w.s.DispatcherServlet::DEBUG::Rendering view [org.springframework.web.servlet.view.JstlView: name 'upload'; URL [/WEB-INF/views/master/upload.jsp]] in DispatcherServlet with name 'DispatcherServlet' 02:19:22.637::o.s.w.s.v.JstlView::DEBUG::Added model object 'org.springframework.validation.BindingResult.uploadForm' of type [org.springframework.validation.BeanPropertyBindingResult] to request in view with name 'upload' 02:19:22.637::o.s.w.s.v.JstlView::DEBUG::Added model object 'uploadForm' of type [com.ownits.uploader.web.form.UploadForm] to request in view with name 'upload' 02:19:22.637::o.s.w.s.v.JstlView::DEBUG::Forwarding to resource [/WEB-INF/views/master/upload.jsp] in InternalResourceView 'upload' 02:19:22.638::o.a.t.i.BasicTilesContainer::DEBUG::Render request recieved for definition 'upload' 02:19:22.639::o.s.w.m.c.CommonsMultipartResolver::DEBUG::Cleaning up multipart file [videoFileData] with original filename [VID_20130505_184912.mp4], stored at [/Users/gumatias/Work/code/ownits/ownits/ownits-skate-uploader/target/work/upload_78f4071c_b8dc_4923_a723_ae9c9d7eaf82_00000003.tmp] 02:19:22.639::o.s.w.s.DispatcherServlet::DEBUG::Successfully completed request 02:19:52.603::c.o.u.w.c.UploadController::INFO ::Done uploading video 02:19:52.604::o.s.w.s.DispatcherServlet::DEBUG::Rendering view [org.springframework.web.servlet.view.JstlView: name 'upload'; URL [/WEB-INF/views/master/upload.jsp]] in DispatcherServlet with name 'DispatcherServlet' 02:19:52.604::o.s.w.s.v.JstlView::DEBUG::Added model object 'org.springframework.validation.BindingResult.uploadForm' of type [org.springframework.validation.BeanPropertyBindingResult] to request in view with name 'upload' 02:19:52.604::o.s.w.s.v.JstlView::DEBUG::Added model object 'uploadForm' of type [com.ownits.uploader.web.form.UploadForm] to request in view with name 'upload' 02:19:52.604::o.s.w.s.v.JstlView::DEBUG::Forwarding to resource [/WEB-INF/views/master/upload.jsp] in InternalResourceView 'upload' 02:19:52.604::o.a.t.i.BasicTilesContainer::DEBUG::Render request recieved for definition 'upload' 02:19:52.605::o.s.w.m.c.CommonsMultipartResolver::DEBUG::Cleaning up multipart file [videoFileData] with original filename [VID_20130505_184912.mp4], stored at [/Users/gumatias/Work/code/ownits/ownits/ownits-skate-uploader/target/work/upload_78f4071c_b8dc_4923_a723_ae9c9d7eaf82_00000007.tmp] 02:19:52.605::o.s.w.s.DispatcherServlet::DEBUG::Successfully completed request   ---  **Affects:** 3.2.3  **Reference URL:** http://stackoverflow.com/questions/17180779/why-is-spring-mvc-auto-retrying-post-requests","closed","status: invalid,","spring-projects-issues","2013-06-19T22:06:00Z","2019-01-12T05:26:52Z"
"","15423","Add SockJS client support [SPR-10797]","**[Gunnar Hillert](https://jira.spring.io/secure/ViewProfile.jspa?name=hillert)** opened **[SPR-10797](https://jira.spring.io/browse/SPR-10797?redirect=false)** and commented  As we have server-side support for SockJS [1] It would be nice to also support clients establishing a SockJS connection e.g.:  * For Java-based clients establishing a connection over the web. * Maybe also for Server-to-Server communication behind the firewall  [1] https://github.com/sockjs/sockjs-client  ---  **Affects:** 4.0 M2  **Sub-tasks:** - #16622 Add documentation for Java SockJS client  **Issue Links:** - #16212 STOMP client support  4 votes, 8 watchers","closed","type: enhancement,","spring-projects-issues","2013-07-30T11:59:05Z","2019-01-13T21:02:55Z"
"","15422","Allow headers to be set on WebSocketConnectionManager [SPR-10796]","**[Gunnar Hillert](https://jira.spring.io/secure/ViewProfile.jspa?name=hillert)** opened **[SPR-10796](https://jira.spring.io/browse/SPR-10796?redirect=false)** and commented  The MTGOX websocket endpoint does not work with the by-default generated ORIGIN header and the handshake will fail as MTGOX expects a specific header.  See: https://java.net/jira/browse/TYRUS-180    ---  **Affects:** 4.0 M2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/172a0b9f5d2b6caf5ed5e3d8cfe529c75ff145d5","closed","type: enhancement,","spring-projects-issues","2013-07-30T11:51:36Z","2013-08-29T16:20:47Z"
"","15102","Derby v10.9: Embedded database namespace support causes test failures [SPR-10469]","**[Gunnar Hillert](https://jira.spring.io/secure/ViewProfile.jspa?name=hillert)** opened **[SPR-10469](https://jira.spring.io/browse/SPR-10469?redirect=false)** and commented  For the Spring Integration project, we wanted to upgrade our Derby test dependencies from 10.5.3.0_1 to a more recent version. As soon as we upgraded to a version greater than 10.5.3.0_1, we started to experience failures in our JDBC test suites.  In isolation, the tests would run fine, but as part of the build, we experienced (intermittent) test failures. Some of the errors we saw:  ``` Caused by: org.springframework.dao.DataAccessResourceFailureException: Failed to execute database script; nested exception is java.sql.SQLNonTransientConnectionException: No current connection.     at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:56)     at org.springframework.jdbc.datasource.init.DataSourceInitializer.afterPropertiesSet(DataSourceInitializer.java:83)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1514)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1452)     ... 57 more Caused by: java.sql.SQLNonTransientConnectionException: No current connection.     at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(Unknown Source)     at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source)     at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source)     at org.apache.derby.impl.jdbc.Util.noCurrentConnection(Unknown Source)     at org.apache.derby.impl.jdbc.EmbedConnection.checkIfClosed(Unknown Source)     at org.apache.derby.impl.jdbc.EmbedConnection.createStatement(Unknown Source)     at org.apache.derby.impl.jdbc.EmbedConnection.createStatement(Unknown Source)     at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.executeSqlScript(ResourceDatabasePopulator.java:180)     at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:133)     at org.springframework.jdbc.datasource.init.CompositeDatabasePopulator.populate(CompositeDatabasePopulator.java:55)     at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:47)     ... 60 more Caused by: java.sql.SQLException: No current connection.     at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)     at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(Unknown Source)     ... 71 more ```  ``` Caused by: java.sql.SQLException: Cannot create new object with key Container(0, 16) in ContainerCache cache. The object already exists in the cache.  	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(Unknown Source) 	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source) 	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) 	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source) 	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source) 	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source) 	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source) 	at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source) 	at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source) 	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.executeSqlScript(ResourceDatabasePopulator.java:185) 	... 44 more Caused by: java.sql.SQLException: Cannot create new object with key Container(0, 16) in ContainerCache cache. The object already exists in the cache.  	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) 	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(Unknown Source) 	... 54 more Caused by: ERROR XBCA0: Cannot create new object with key Container(0, 16) in ContainerCache cache. The object already exists in the cache.  	at org.apache.derby.iapi.error.StandardException.newException(Unknown Source) 	at org.apache.derby.impl.services.cache.ConcurrentCache.create(Unknown Source) 	at org.apache.derby.impl.store.raw.data.BaseDataFileFactory.addContainer(Unknown Source) 	at org.apache.derby.impl.store.raw.xact.Xact.addContainer(Unknown Source) 	at org.apache.derby.impl.store.access.heap.Heap.create(Unknown Source) 	at org.apache.derby.impl.store.access.heap.HeapConglomerateFactory.createConglomerate(Unknown Source) 	at org.apache.derby.impl.store.access.RAMTransaction.createConglomerate(Unknown Source) 	at org.apache.derby.impl.sql.execute.CreateTableConstantAction.executeConstantAction(Unknown Source) 	at org.apache.derby.impl.sql.execute.MiscResultSet.open(Unknown Source) 	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source) 	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source) 	... 48 more ```  **Workaround**  I was able to solve the issue by switching from:  ```  ```  to  ```                       ```  See also: [INT-2992](https://jira.spring.io/browse/INT-2992)  ---  **Affects:** 3.1.3  **Attachments:** - [demo.JdbcPollingChannelAdapterTests.html](https://jira.spring.io/secure/attachment/21166/demo.JdbcPollingChannelAdapterTests.html) (_23.58 kB_)  **Issue Links:** - #12258 Embedded database support in trouble shutting down Derby - [INTSCALA-53](https://jira.spring.io/browse/INTSCALA-53) Upgrade to Gradle 1.6 - [INT-2992](https://jira.spring.io/browse/INT-2992) Upgrade Derby Test Dependencies  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d032c20a54c3289ef26656f4e96321c39c1ad49b, https://github.com/spring-projects/spring-framework/commit/b4d6e27fb3f8db773cbfad1a6e53323de2c1470d  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2013-04-16T12:01:06Z","2019-01-11T21:12:03Z"
"","14752","ContentNegotiatingViewResolver - Upgrade from 3.1 to 3.2 causes ClassCastException [SPR-10119]","**[Gunnar Hillert](https://jira.spring.io/secure/ViewProfile.jspa?name=hillert)** opened **[SPR-10119](https://jira.spring.io/browse/SPR-10119?redirect=false)** and commented  After having upgraded an existing web application from 3.1 to 3.2, the **ContentNegotiatingViewResolver** does not initialize correctly anymore and a ClassCastException exception is being thrown:  ``` java.lang.String cannot be cast to org.springframework.http.MediaType ```  Using the new **ContentNegotiationManager** solves the issue. This issue is also described in the following forum thread:  http://forum.springsource.org/showthread.php?133343-3-1-2-gt-3-2-issue-with-ContentNegotiatingViewResolver    ---  **Affects:** 3.2 GA  **Reference URL:** http://forum.springsource.org/showthread.php?133343-3-1-2-gt-3-2-issue-with-ContentNegotiatingViewResolver  0 votes, 5 watchers","closed","in: core,","spring-projects-issues","2012-12-23T12:15:17Z","2013-01-03T12:20:43Z"
"","15451","MockMvcBuilders.standaloneSetup() ignores controller path mapping URIs' placeholders [SPR-10825]","**[grf110](https://jira.spring.io/secure/ViewProfile.jspa?name=grf110)** opened **[SPR-10825](https://jira.spring.io/browse/SPR-10825?redirect=false)** and commented  #### Code Used  ``` @RequestMapping(value = ""${sys.login.ajax}"", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE) ```  #### Log Output  ``` 10:37:37 [Test worker] INFO  o.s.t.w.s.s.StandaloneMockMvcBuilder$StaticRequestMappingHandlerMapping-179 - Mapped ""{[/${sys.login.ajax}],methods=[POST],params=[],headers=[],consumes=[],produces=[application/json],custom=[]}"" ```  #### Process method:  `StandaloneMockMvcBuilder.StandaloneConfiguration#requestMappingHandlerMapping`   ---  **Affects:** 3.2.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/64baef9f19cc8d797da6f8757c17771192288ffa, https://github.com/spring-projects/spring-framework/commit/c211c98b407aa5876ac1a2952d16761e9702cfb0","closed","type: enhancement,","spring-projects-issues","2013-08-11T19:50:22Z","2013-08-29T16:20:44Z"
"","15260","Jackson 2.0 not supported in Spring Framework [SPR-10632]","**[Greg Werner](https://jira.spring.io/secure/ViewProfile.jspa?name=grjasewe)** opened **[SPR-10632](https://jira.spring.io/browse/SPR-10632?redirect=false)** and commented  At version 2.0, Jackson switched packages from org.codehaus.jackson to com.fasterxml.jackson.  This creates a break in org.springframework.http.converter.json.MappingJacksonHttpMessageConverter as it imports and relies on an old version of Jackson.  The current version of Jackson is 2.2, so I fear that Spring is way behind on this element.  I propose for this Spring class (and any other where this issue is present) to be updated because this version of Jackson is simply too old.   ---  **Affects:** 3.2.3  **Reference URL:** http://wiki.fasterxml.com/JacksonRelease20","closed","in: core,","spring-projects-issues","2013-06-06T11:01:57Z","2019-01-12T16:24:01Z"
"","15257","Be able to specify custom key generators on a per-cache basis [SPR-10629]","**[Greg Nieman](https://jira.spring.io/secure/ViewProfile.jspa?name=gnieman)** opened **[SPR-10629](https://jira.spring.io/browse/SPR-10629?redirect=false)** and commented  Created on behalf of customer: They use a number of discrete caches in the application, and wished to use a different custom key generator for each.  The current mechanism assumes one custom key generator.  This can be worked around by creating a generator that delegates to the appropriate one and then using an additional annotation to specify which to use but they would like to have something a bit more unified.  ---  **Affects:** 3.2.3  **Issue Links:** - #15940 Provide a `@CacheConfig` annotation to share class-level customizations - #13338 Introduce qualifier in `@Cacheable` for cache manager name  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/81c208098fb5ffb82abb88597710663da67fd764, https://github.com/spring-projects/spring-framework/commit/2b89c1a87e2469110f9a0d4282eeb348b76262ff  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2013-06-05T06:29:24Z","2019-01-13T06:59:31Z"
"","14835","Log at info level when skipping an application context due to profile not being active [SPR-10202]","**[Greg Lloyd](https://jira.spring.io/secure/ViewProfile.jspa?name=glloyd)** opened **[SPR-10202](https://jira.spring.io/browse/SPR-10202?redirect=false)** and commented  When you are expecting an applicationContext to be processed and it contains a profile attribute which is not active there is no indication of why the context was not processed.  It would be nice if there were an info level log that explicitly logged that applicationContext Y was being skipped because X profile is not active.  The NoSuchBeanDefinitionException could be caused by any number of issues so it would be nice if there were a few breadcrumbs concerning a profile to help track down the cause.   ---  **Affects:** 3.1.1  **Reference URL:** http://blog.springsource.org/2011/02/11/spring-framework-3-1-m1-released/  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c95dfca726aa72ef0c7dc64526b5808f28e258f1","closed","type: enhancement,","spring-projects-issues","2013-01-22T06:29:43Z","2016-04-06T08:38:14Z"
"","15086","OncePerRequestFilter does way more than it should since Spring 3.2 and cannot be changed to rectify it [SPR-10453]","**[Graeme Rocher](https://jira.spring.io/secure/ViewProfile.jspa?name=graemerocher)** opened **[SPR-10453](https://jira.spring.io/browse/SPR-10453?redirect=false)** and commented  Prior to Spring 3.2 OncePerRequestFilter only did what the name implies ie ensure a filter is only run once per request.  Now it cancels a filter based on a whole bunch of other criteria:  ``` private boolean skipDispatch(HttpServletRequest request) {      if (isAsyncDispatch(request) && shouldNotFilterAsyncDispatch()) {           return true;      }      if ((request.getAttribute(WebUtils.ERROR_REQUEST_URI_ATTRIBUTE) != null) && shouldNotFilterErrorDispatch()) {           return true;      }      return false; } ```  This is causing failing Grails functional tests. To compound the issue the 'skipDispatch' method is private and cannot be overridden.  Our workaround for the moment is to fork the old OncePerRequestFilter to get the old behavior back.  IMO the old behavior of OncePerRequestFilter should be restored and a subclass created that adds this new behavior as it seems to be that the class is now doing more than it should.   ---  **Affects:** 3.2 GA, 3.2.1, 3.2.2","closed","status: invalid,","spring-projects-issues","2013-04-09T03:11:16Z","2019-01-12T05:27:05Z"
"","14976","Change in FrameworkServlet makes it impossible to use an alternative WebRequest instance for request processing [SPR-10342]","**[Graeme Rocher](https://jira.spring.io/secure/ViewProfile.jspa?name=graemerocher)** opened **[SPR-10342](https://jira.spring.io/browse/SPR-10342?redirect=false)** and commented  Due to https://github.com/SpringSource/spring-framework/commit/3643d92cb8f8d7ba3bee8d19db300c557e2e85a8  Which was part of the fix for #14659  We are no longer able to use our own WebRequest implementation that extends from ServletRequestAttributes because Spring always overrides it with its own implementation. This has broken various things in Grails' request processing chain.  I have implemented a workaround in Grails that uses delegation instead of subclassing of ServletRequestAttributes, but this may be a breaking change for Grails users, so I'm not sure if it is ideal.  The issue is compounded by the fact there is no way to change this behavior because the method in FrameworkServlet is final  ---  **Affects:** 3.2 GA, 3.2.1  **Issue Links:** - #20422 Should call getNativeResponse() instead of getNativeRequest() in FrameworkServlet  0 votes, 6 watchers","closed","type: bug,","spring-projects-issues","2013-02-28T05:40:23Z","2019-01-11T21:02:29Z"
"","15178","Annotation pointcut does not work with package restriction [SPR-10741]","**[Gordon McKinney](https://jira.spring.io/secure/ViewProfile.jspa?name=gordon.mckinney)** opened **[SPR-10741](https://jira.spring.io/browse/SPR-10741?redirect=false)** and commented  Broken! it select classes outside com.mydomain `@Around`(""execution(`@javax`.annotation.security.* * com.mydomain..*(..))"")  Workaround: `@Around`(""execution(`@javax`.annotation.security.* * \*.\*(..)) && within(com.mydomain..*)"")  I did a search on JIRA and couldn't find a matching bug report for this.... I hope it's a duplicate that's been fixed in later versions of Spring.   ---  **Affects:** 3.0.5","closed","status: bulk-closed,","spring-projects-issues","2013-07-15T10:48:31Z","2019-01-12T03:42:29Z"
"","14951","Replace examples using deprecated SimpleJdbcTemplate [SPR-10317]","**[Gordon Dickens](https://jira.spring.io/secure/ViewProfile.jspa?name=gordonad)** opened **[SPR-10317](https://jira.spring.io/browse/SPR-10317?redirect=false)** and commented  `SimpleJdbcTemplate` has been marked deprecated for a while (3.0? 3.1 - 3.2).  Therefore, it is inadvisable to guide Spring developers towards implementing solutions with deprecated classes.  To Confirm, I opened the source code from: `spring-jdbc-3.2.1.RELEASE.jar`  ```java Package: ""org.springframework.jdbc.core.simple""  "" @Deprecated public class SimpleJdbcTemplate implements SimpleJdbcOperations { "" ```  Sections: * 14.1.1 * 14.1.2 * 14.2.1 * 14.2.3 * 14.4 * 14.5.1 * 14.5.2 * 14.5.3 * 14.5.4 * 14.5.5 * 14.5.8 * 14.7.3  ---  **Affects:** 3.2.1  **Reference URL:** http://static.springsource.org/spring-framework/docs/3.2.1.RELEASE/spring-framework-reference/htmlsingle/#jdbc-SimpleJdbcTemplate  **Issue Links:** - #13983 Reference Guide still recommends SimpleJdbcTemplate, which is now deprecated (_**""supersedes""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/da034eb020d29fdc29856e16a0bd6d4d32cb0bae","closed","type: enhancement,","spring-projects-issues","2013-02-20T11:46:59Z","2019-01-11T21:03:48Z"
"","14902","Ambiguous Error message when missing namespace handler [SPR-10268]","**[Gordon Dickens](https://jira.spring.io/secure/ViewProfile.jspa?name=gordonad)** opened **[SPR-10268](https://jira.spring.io/browse/SPR-10268?redirect=false)** and commented  Spring 3.2.0: Reports a missing xml namespace parser correctly.  ``` ""org.springframework.beans.factory.parsing.BeanDefinitionParsingException: Configuration problem: Unable to locate Spring NamespaceHandler for XML schema namespace [http://www.springframework.org/schema/context] Offending resource: class path resource [config/integration-config.xml]"" ```  Spring 3.2.1: Reports erroneously reports the following.  ``` ""org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor#0': Initialization of bean failed; nested exception is java.lang.IllegalStateException: No persistence exception translators found in bean factory. Cannot perform exception translation."" ```    ---  **Affects:** 3.2.1","closed","in: core,","spring-projects-issues","2013-02-07T11:25:35Z","2019-01-11T21:32:32Z"
"","14798","Provide a means to ignore the character set in ContentResultMatchers.contentType(MediaType) [SPR-10165]","**[Gordon Dickens](https://jira.spring.io/secure/ViewProfile.jspa?name=gordonad)** opened **[SPR-10165](https://jira.spring.io/browse/SPR-10165?redirect=false)** and commented  #### Status Quo  As of Spring 3.2.0, asserting the content type of a response, without specifying a character set, will fail if the actual content type of the response includes a character set.  As a developer, it is inconvenient to specifically **have to** test for a content type with the character set.  For example, the following:  ``` this.mockMvc.perform(get(""/myentity/321"")   .accept(MediaType.APPLICATION_JSON))      .andDo(print())      .andExpect(status().isOk())      .andExpect(content().contentType(MediaType.APPLICATION_JSON))... ```  ... may potentially result in the following assertion failure:  ``` ""java.lang.AssertionError: Content type expected: but was:?"" ```  To avoid the above assertion failure, the expectation must currently be amended as follows (note the addition of ""_;charset=UTF-8_""):  ``` this.mockMvc.perform(get(""/myentity/321"")   .accept(MediaType.APPLICATION_JSON))     .andDo(print())     .andExpect(status().isOk())     .andExpect(content().contentType(""application/json;charset=UTF-8"")... ```  #### Proposal  Refactor `ContentResultMatchers.contentType(MediaType)` so that the unexpected character set is ignored, or provide an overloaded version of `contentType()` that allows the character set to be ignored (e.g., via a boolean flag).  ---  **Affects:** 3.2 GA  **Issue Links:** - #19041 Regression: character set in ContentResultMatchers.contentType(MediaType) is taken into accounts.  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b2d6596901bc782a96685a0778d0da848e5755b6  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2013-01-11T08:34:26Z","2019-01-11T21:21:45Z"
"","14783","Package org.springframework.instrument.classloading is split between spring-context and spring-instrument-tomcat [SPR-10150]","**[Glyn Normington](https://jira.spring.io/secure/ViewProfile.jspa?name=glyn)** opened **[SPR-10150](https://jira.spring.io/browse/SPR-10150?redirect=false)** and commented  While introducing split package detection (#14624), I found that package org.springframework.instrument.classloading is split between spring-context and spring-instrument-tomcat.  Split packages are generally considered to be bad practice (see https://jira.springsource.org/browse/SPR-9990?focusedCommentId=85187&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-85187).  Note that this particular split package is not currently an issue for OSGi since spring-instrument-tomcat is not used as a bundle.  ---  **Affects:** 2.0 final  **Issue Links:** - #14624 Detect split packages at build time  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2df08bdfbdb4efc9da46866eb1a3f6411a045e9e","closed","status: declined,","spring-projects-issues","2013-01-07T03:48:25Z","2019-01-12T16:24:36Z"
"","15055","No way to ask MethodReference for its private field 'name' [SPR-10422]","**[GJ Lubbertsen](https://jira.spring.io/secure/ViewProfile.jspa?name=gjlubbertsen)** opened **[SPR-10422](https://jira.spring.io/browse/SPR-10422?redirect=false)** and commented  **Scenario** We only use the parser of spel to construct our own (tested&accepted) subset of the expression tree. Here we convert spelnodes into our own node structure. But for the MethodReference nodes we miss a method to get method name out of it. (while there is a private member for the same)  **Improvement Request** Please ad a getName method to class _org.springframework.expression.spel.ast.MethodReference_  ``` public String getName() {    return this.name; } ```  We are fine if its available in the next 3.2x release.    ---  **Affects:** 3.1.2","closed","type: enhancement,","spring-projects-issues","2013-03-27T06:16:01Z","2013-04-30T13:27:49Z"
"","14881","No way to ask RealLiteral for original string (to parse into BigDecimal) [SPR-10248]","**[GJ Lubbertsen](https://jira.spring.io/secure/ViewProfile.jspa?name=gjlubbertsen)** opened **[SPR-10248](https://jira.spring.io/browse/SPR-10248?redirect=false)** and commented  **Scenario** We have JPA object with BigDecimal members in it and want to use SPEL to parse an expression and convert the AST into JPQL. Thereby it makes sense for us to convert input into BigDecimal.  **Question** Why did you choose to parse the input into double?  **Improvement Request** When dealing with _org.springframework.expression.spel.ast.RealLiteral_ id like to get the original string _Literal.literalValue_ to be able to parse it myself into a BigDecimal.  So please add method like this to the Literal class  ``` public String getRawLiteralValue() {    return this.literalValue; } ```    ---  **Affects:** 3.1.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7d798acd35984b4cedf0e1035305698a618407d8","closed","type: enhancement,","spring-projects-issues","2013-01-31T04:44:24Z","2013-01-31T08:49:56Z"
"","15003","AbstractApplicationContext.getBeansOfType() should throw IllegalStateException if refresh() has not been called. [SPR-10370]","**[giuliano carlini](https://jira.spring.io/secure/ViewProfile.jspa?name=gorillacoder)** opened **[SPR-10370](https://jira.spring.io/browse/SPR-10370?redirect=false)** and commented  So, I did something along the lines of the following control flow (spread out over several functions):  ```java context = new GenericApplicationContext(); reader = new AnnotatedBeanDefinitionReader(context); reader.register(ConfigClass.class); context.refresh(); context.getBeansOfType(Object.class); ```  Where `ConfigClass` is an `@Configuration` class, and has several `@Autowired` properties:  ```java @Configuration public class ConfigClass {     @Autowired Environment environment;     // ... } ```  And all worked well. Then I did some revising, resulting in the refresh following the `getBeansOfType`. I know, dopey, but things were in different functions and classes so it wasn't that obvious.  What happens is that the refresh triggers the adding of the `ApplicationContextAwareProcessor` to the `GenericApplicationContext`. And `getBeansOfType()` triggers the creation of the `ConfigClass`. As the `ApplicationContextAwareProcessor` isn't registered yet, no autowiring gets done. And all hell breaks loose when subsequent processing during the call on `refresh()` occurs as none of the autowired members have values.  Takes hours to debug this sort of thing ... So perhaps more than ""Minor"". OTOH, doesn't seem like ""Major"" either.   --- No further details from [SPR-10370](https://jira.spring.io/browse/SPR-10370?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2013-03-12T17:23:04Z","2019-01-12T00:25:03Z"
"","15377","Could not build from sources [SPR-10751]","**[Giovanni Dall'Oglio Risso](https://jira.spring.io/secure/ViewProfile.jspa?name=giovanni.dalloglio)** opened **[SPR-10751](https://jira.spring.io/browse/SPR-10751?redirect=false)** and commented  I can't build the Spring Framework: gradle could not download the dependendencies.  Reading from internet, I found that * you should provide credentials to the repository (repo.springsource.org) * credentials are provided to vmware employees  What about the community? Do you still welcome the pull requests?  Thanks.   ---  **Attachments:** - [spring build failure for unhautorized dependency.jpg](https://jira.spring.io/secure/attachment/21289/spring+build+failure+for+unhautorized+dependency.jpg) (_119.91 kB_)","closed","type: bug,","spring-projects-issues","2013-07-17T02:27:13Z","2013-07-24T10:17:13Z"
"","14724","SpEl bug while reading boolean fields [SPR-10091]","**[Giovanni Dall'Oglio Risso](https://jira.spring.io/secure/ViewProfile.jspa?name=giovanni.dalloglio)** opened **[SPR-10091](https://jira.spring.io/browse/SPR-10091?redirect=false)** and commented  There is a small problem in SpEl, while reading ""Boolean"" properties (not the boolean primitive), with ""is"" prefix:  ```java public Boolean isPropertyName() // bugged public boolean isPropertyName() // correct  public Boolean getPropertyName() // correct public boolean getPropertyName() // correct ```  I attach the jUnit demonstrating the issue. Thanks   ---  **Affects:** 3.1.3, 3.2 RC2  **Attachments:** - [SpElBooleanDemonstrationTest.java](https://jira.spring.io/secure/attachment/20805/SpElBooleanDemonstrationTest.java) (_1.70 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8abe1f055e257791ae3074c7cd2203cfb6d86405, https://github.com/spring-projects/spring-framework/commit/431c7ff31f10577bb6ed831906ba40f74da82db2  **Backported to:** [3.1.4](https://github.com/spring-projects/spring-framework/milestone/83?closed=1)","closed","in: core,","spring-projects-issues","2012-12-12T09:18:15Z","2012-12-13T01:01:06Z"
"","15103","Add ability to retrieve SQL batch on failure when using BatchSqlUpdate [SPR-10470]","**[Giovanni Botta](https://jira.spring.io/secure/ViewProfile.jspa?name=giovannibotta)** opened **[SPR-10470](https://jira.spring.io/browse/SPR-10470?redirect=false)** and commented  When a batch insert/update fails in BatchSqlUpdate, an exception such as the following is thrown:  ``` org.springframework.jdbc.UncategorizedSQLException: PreparedStatementCallback; uncategorized SQLException for SQL [INSERT INTO pvaprice_upsert (QuoteId,Ric,Currency,Exchange,TradeDate,PriceClose,PriceHigh,PriceOpen,PriceLow,Vol,creationdate,lastmodifieddate) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)]; SQL state [5000A]; error code [135186]; An attempt to place a null value in a non-nullable datatype.; nested exception is java.sql.BatchUpdateException: An attempt to place a null value in a non-nullable datatype.         at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:83)         at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:80)         at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:80)         at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:603)         at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:615)         at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:884)         at org.springframework.jdbc.object.BatchSqlUpdate.flush(BatchSqlUpdate.java:184) ```  It would be very useful to be able to retrieve the batch that failed in order to look at the data to diagnose why the failure happened. This shouldn't be too difficult (I might give it a try over the weekend).  Thanks   ---  **Affects:** 3.2.1","closed","status: bulk-closed,","spring-projects-issues","2013-04-17T06:32:56Z","2019-01-12T00:24:01Z"
"","15068","BatchSqlUpdate support for named parameters [SPR-10435]","**[Giovanni Botta](https://jira.spring.io/secure/ViewProfile.jspa?name=giovannibotta)** opened **[SPR-10435](https://jira.spring.io/browse/SPR-10435?redirect=false)** and commented  The BatchSqlUpdate class doesn't override the updateByNamedParam(Map paramMap) method. It would be useful to override this so that named parameters would be supported when performing batch updates and the same map could be reused to pass the parameters around (simple and with minimal space overhead).  NamedParameterJdbcTemplate has the batchUpdate(String sql, Map[] batchValues) method to do this but, besides having a different interface, it requires an array of maps, with increased overhead, code bloating and complication reusing the maps (http://stackoverflow.com/questions/15277584/spring-batchsqlupdate-vs-namedparameterjdbctemplate-using-named-parameters).  Thanks Giovanni   ---  **Affects:** 3.2 GA  **Attachments:** - [SPR-10435 small refactor.patch](https://jira.spring.io/secure/attachment/21929/SPR-10435+small+refactor.patch) (_4.35 kB_)","closed","status: bulk-closed,","spring-projects-issues","2013-04-02T08:09:08Z","2019-01-12T00:24:24Z"
"","15215","Asynchronous HTTP remoting [SPR-10586]","**[Gilles Gosuin](https://jira.spring.io/secure/ViewProfile.jspa?name=gillesgosuin)** opened **[SPR-10586](https://jira.spring.io/browse/SPR-10586?redirect=false)** and commented  I noticed that Servlet 3.0 async support was recently added to MVC controllers.  Wouldn't it be a great idea to add this feature to HTTP remoting as well ?  I'll try and see if I can implement it easily myself. In the meantime, feel free to let me know if you find it interesting and/or if they are major blockers I haven't thought about.   --- No further details from [SPR-10586](https://jira.spring.io/browse/SPR-10586?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2013-05-25T03:49:17Z","2019-01-12T03:42:13Z"
"","14947","Broken UriComponents.equals() method [SPR-10313]","**[Gerd Bremer](https://jira.spring.io/secure/ViewProfile.jspa?name=gerbre)** opened **[SPR-10313](https://jira.spring.io/browse/SPR-10313?redirect=false)** and commented  As an example have a look at:  ``` if (ObjectUtils.nullSafeEquals(getScheme(), other.getScheme())) { 			return false; } ```  If the call to nullSafeEquals returns true because of equal scheme arguments, then false is returned. The same applies to userInfos and hosts. The fix is to negate the call to nullSafeEquals.  Fix:  ``` if (!ObjectUtils.nullSafeEquals(getScheme(), other.getScheme())) { 			return false; } ```    ---  **Affects:** 3.1.4  1 votes, 4 watchers","closed","type: bug,","spring-projects-issues","2013-02-18T07:51:52Z","2013-02-19T13:22:33Z"
"","15333","RequestParamMethodArgumentResolver/RequestPartMethodArgumentResolver isMultipartFileCollection checks for class equality [SPR-10705]","**[George Diamantidis](https://jira.spring.io/secure/ViewProfile.jspa?name=gdiamantidis)** opened **[SPR-10705](https://jira.spring.io/browse/SPR-10705?redirect=false)** and commented  isMultipartFileCollection in RequestParamMethodArgumentResolver and RequestPartMethodArgumentResolver are checking whether valueType is equal to MultipartFile (see arrow).  Shouldn't it check if it is assignable?  ``` private boolean isMultipartFileCollection(MethodParameter parameter) {      Class paramType = parameter.getParameterType();      if (Collection.class.equals(paramType) || List.class.isAssignableFrom(paramType)){           Class valueType = GenericCollectionTypeResolver.getCollectionParameterType(parameter);           if (valueType != null && valueType.equals(MultipartFile.class))","closed","status: declined,","spring-projects-issues","2013-06-28T06:49:33Z","2019-01-12T16:23:54Z"
"","15280","Allow getExtraHiddenFields method of RequestDataValueProcessor to know request method of form [SPR-10652]","**[George Dewar](https://jira.spring.io/secure/ViewProfile.jspa?name=george00)** opened **[SPR-10652](https://jira.spring.io/browse/SPR-10652?redirect=false)** and commented  The RequestDataValueProcessor interface is useful for implementing the Synchronizer Token pattern to prevent Cross-Site Request Forgery.  A common usage is to use the getExtraHiddenFields method to add an unpredicatable CSRF token as a hidden input onto every form, which is then verified (perhaps by a HandlerInterceptor) upon submission of the form.  I find that I only wish to apply this to POST requests, as  a) GET requests should not be state-changing, and therefore are not susceptible to a CSRF attack b) Adding the token to a GET request places it on the URL, which is undesirable  It would be very convenient if the getExtraHiddenFields method could be used to add a hidden input ONLY to forms which have an action of POST.  It looks to me like this is called only from the doEndTag method of FormTag. Given that the FormTag seems to know its method, could we have the FormTag either pass that method through to getExtraHiddenFields, or pass the whole FormTag object?  ---  **Issue Links:** - #14675 Make form method accessible to RequestDataValueProcessor  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4b22558a06d7033e7ef3ed4f3122a4913b045c5c","closed","type: enhancement,","spring-projects-issues","2013-06-12T15:25:35Z","2019-01-11T22:25:09Z"
"","15134","Add Spring-AMQP to Remoting Chapter [SPR-10501]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-10501](https://jira.spring.io/browse/SPR-10501?redirect=false)** and commented  When Spring-AMQP 1.2.0 is released, it will support Spring Remoting over AMQP (See [AMQP-308](https://jira.spring.io/browse/AMQP-308)).  Add `AmqpProxyFactoryBean` and `AmqpInvokerServiceActivator` to list of technologies for Spring Remoting to the `Remoting and web services using Spring` chapter, with a reference to the Spring-AMQP project/documentation.   --- No further details from [SPR-10501](https://jira.spring.io/browse/SPR-10501?redirect=false)","closed","type: documentation,","spring-projects-issues","2013-04-29T11:18:41Z","2013-10-31T12:28:02Z"
"","14824","Race Condition in PropertyEditorRegistrySupport [SPR-10191]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-10191](https://jira.spring.io/browse/SPR-10191?redirect=false)** and commented  If two threads concurrently invoke `getDefaultEditor` before `defaultEditors` has been built, one of the threads can fail to find an editor because he invokes get() on the half-baked Map being built by the other thread.  `createDefaultEditors` should build `defaultEditors` in a local variable and promote it to the field only when the Map is completely filled.  While this could cause the map to be built multiple times, it would be rare, and benign, and simpler than adding synchronization code.   ---  **Affects:** 3.1.3  **Issue Links:** - [INT-2922](https://jira.spring.io/browse/INT-2922) Concurrent Calls to SimpleTypeConverter.getDefaultEditor() in BeanFactoryTypeConverter are Not Safe","closed","in: core,","spring-projects-issues","2013-01-18T08:39:34Z","2019-01-12T05:27:34Z"
"","14779","Improve exceptions for multi-operand expressions [SPR-10146]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-10146](https://jira.spring.io/browse/SPR-10146?redirect=false)** and commented  Malformed SpEL Expression causes an NPE...  `new SpelExpressionParser().parseExpression(""/foo"");`  ```  Exception in thread ""main"" java.lang.NullPointerException 	at org.springframework.expression.spel.ast.SpelNodeImpl.(SpelNodeImpl.java:50) 	at org.springframework.expression.spel.ast.Operator.(Operator.java:32) 	at org.springframework.expression.spel.ast.OpDivide.(OpDivide.java:34) 	at org.springframework.expression.spel.standard.InternalSpelExpressionParser.eatProductExpression(InternalSpelExpressionParser.java:224) ... ```  (null left operand for divide operator).  ---  **Affects:** 3.2 GA  **Reference URL:** http://forum.springsource.org/showthread.php?133818-Can-t-create-bean-of-FtpOutboundGateway  **Issue Links:** - #12308 SpEl does not support conjunction (&&) and disjunction (||) logic  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bff36fb1456ff498354960a725f63f9116ee5b74","closed","in: core,","spring-projects-issues","2013-01-04T07:59:45Z","2019-01-11T21:23:00Z"
"","14994","SPR-6308 problem still exists in Spring Release 3.1.3 [SPR-10362]","**[Gagandeep Singh](https://jira.spring.io/secure/ViewProfile.jspa?name=nomstradamus)** opened **[SPR-10362](https://jira.spring.io/browse/SPR-10362?redirect=false)** and commented  I am facing this issue in Was 7 and Spring 3.1.3 Release . I added the following two properties  ```   ```  However i still get the following error Code Base Location:  ``` [3/7/13 17:20:29:365 EST] 0000000b webapp I com.ibm.ws.webcontainer.webapp.WebApp log SRVE0292I: Servlet Message - bst-51881#bst.war:.Initializing Spring FrameworkServlet 'appServlet' [3/7/13 17:20:29:684 EST] 0000000b SecurityManag W SECJ0314W: Current Java 2 Security policy reported a potential violation of Java 2 Security Permission. Refer to the InfoCenter for further information.  Permission:  getenv.* : Access denied (java.lang.RuntimePermission getenv.*)  Code:  org.springframework.core.env.AbstractEnvironment in {file:/opt/httpd/root/apps/ibm7/ccix/xyz.war/WEB-INF/lib/spring-core-3.1.3.RELEASE.jar}  Stack Trace:  java.security.AccessControlException: Access denied (java.lang.RuntimePermission getenv.*) at java.security.AccessController.checkPermission(AccessController.java:132) at java.lang.SecurityManager.checkPermission(SecurityManager.java:544) at com.ibm.ws.security.core.SecurityManager.checkPermission(SecurityManager.java:206) at java.lang.System.getenv(System.java:687) at org.springframework.core.env.AbstractEnvironment.getSystemEnvironment(AbstractEnvironment.java:345) at org.springframework.core.env.StandardEnvironment.customizePropertySources(StandardEnvironment.java:79) ```  My app does not load and i cannot continue. Please help  ---  **Affects:** 3.1.3  **Issue Links:** - #10974 Spring Expression Language creates systemProperties bean calling System.getProperties() which in enterprise shared containers is locked down","closed","in: core,","spring-projects-issues","2013-03-07T20:07:58Z","2019-01-11T21:00:52Z"
"","14923","MockHttpSession and MockHttpServletRequest throw ConcurrentModificationException when removing attributes in a loop  [SPR-10289]","**[Gaetan Pitteloud](https://jira.spring.io/secure/ViewProfile.jspa?name=gpitteloud)** opened **[SPR-10289](https://jira.spring.io/browse/SPR-10289?redirect=false)** and commented  Already reported and fixed in 3.0.5 (see #12214) for MockHttpSession, but re-appeared in 3.2 (was still OK in 3.1) Similar problem happens in MockHttpServletRequest.  The method getAttributeNames() returns an Enumeration, and when looping over this enum to remove attributes, you get ConcurrentModificationException. Example:  ```java HttpSession session = new MockHttpSession(); session.setAttribute(""k1"", ""v1""); session.setAttribute(""k2"", ""v2""); for (Enumeration names = session.getAttributeNames(); names.hasMoreElements();) {    session.removeAttribute(names.nextElement()); } ```  The fix that was done in 3.0.5 solves the problem: it consists in replacing this code  ```java return Collections.enumeration(this.attributes.keySet()); ```  with this code:  ```java return new Vector(this.attributes.keySet()).elements(); ```  ---  **Affects:** 3.2.1  **Issue Links:** - #14857 MockHttpSession.getAttributeNames() should return Enumeration on a new collection (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2013-02-13T04:22:05Z","2019-01-12T16:47:08Z"
"","15475","NPE in RestTemplate with Resource implementation where getFilename() returns null [SPR-10848]","**[Gabriel Axel](https://jira.spring.io/secure/ViewProfile.jspa?name=guznik)** opened **[SPR-10848](https://jira.spring.io/browse/SPR-10848?redirect=false)** and commented  When attempting to use a Resource implementation where getFilename() returns null, such as ByteArrayResource, as the payload for RestTemplate operations, ResourceHttpMessageConverter.ActivationMediaTypeFactory.getMediaType() calls FileTypeMap.getContentType() with null value which throws NullPointerException.   ---  **Affects:** 3.2.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a17912d19ec3a0468bd8509dd215f10696b96dc1, https://github.com/spring-projects/spring-framework/commit/d66206704e70a50ef671efbf8a5406c56963f91b","closed","type: bug,","spring-projects-issues","2013-08-20T12:09:40Z","2013-08-29T16:20:47Z"
"","15327","Handling type conversions the same way as validation errors [SPR-10699]","**[Frédéric Camblor](https://jira.spring.io/secure/ViewProfile.jspa?name=fcamblor)** opened **[SPR-10699](https://jira.spring.io/browse/SPR-10699?redirect=false)** and commented  I'm using Spring MVC 3.1 and I'm wondering if it would be possible to have type conversion errors reported the same way as validation errors are (in BindingResult for instance, or as a MethodArgumentNotValidException).  The only workaround I found at the moment, is decorating jackson deserializers in order to make them non blocking if a deserialization problem occur (see [this example](https://github.com/fcamblor/springbvjquery/blob/master/src/main/java/fr/fcamblor/demos/sbjd/web/config/ProjectWebMvcConfigurationSupport.java#L51)), and injecting null instead of throwing an exception when it occur. This way, I'm able to put `@NotNull` on my property which will generate a validation error if my user submits ""abc"" when I expect an Integer field.  Problem with this workaround is I consider a ""bad input"" (regarding the expected type) and an ""empty input"" as exactly the sames. This implies : - I cannot distinguish the 2 errors with different error messages - I will never be able to notify the user of a ""bad input"" if my field is facultative (no `@NotNull` annotation on my field).  Another possibility would be, in my Jackson deserializers decorators, to throw a MethodArgumentNotValidException instead of injecting null property. Problem is it is something harsh because user will have 1 validation error at a time (he will have to submits lots of time the form when error occur, and not only once, to gather **every** validation errors in 1 call).  So I was wondering if there was a ValidationService spring bean somewhere, or some new features in Spring 3.2 or 4.0, allowing to customize this and handle conversion type errors & validation errors the same way.   ---  **Affects:** 3.1 GA  1 votes, 4 watchers","closed","status: bulk-closed,","spring-projects-issues","2013-06-27T03:56:49Z","2019-01-12T00:23:13Z"
"","14705","POM of spring-aspects should have a dependency on aspectjweaver and not aspectjrt [SPR-10072]","**[Fredrik Sundberg](https://jira.spring.io/secure/ViewProfile.jspa?name=fredrik.sundberg@gmail.com)** opened **[SPR-10072](https://jira.spring.io/browse/SPR-10072?redirect=false)** and commented  aspectjrt is a subset of aspectjweaver & without the weaver jar aspects do not work.  As issue #13537 is fixed this should also be reflected in the pom.  ---  **Affects:** 3.2 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a8589bf0359850214400904f6254972f64a8f717","closed","in: core,","spring-projects-issues","2012-12-04T11:50:43Z","2019-01-11T19:10:42Z"
"","15007","Type detection fails for child bean if parent bean has been resolved before [SPR-10374]","**[Franz Neumann](https://jira.spring.io/secure/ViewProfile.jspa?name=franz.neumann)** opened **[SPR-10374](https://jira.spring.io/browse/SPR-10374?redirect=false)** and commented  After update on Spring 3.2.2 following controllers aren't initialized:  ```xml    	 	 	   	  ```  The class MainPageController:  ```java @RequestMapping(""/"") public class MainPageController extends BaseTrolleyAwareController { .. } ```  So after ininilazation there is no ""/"" mapping. With Spring 3.2.1 it worked.  ---  **Affects:** 3.2.2  **Issue Links:** - #15139 AbstractAutowireCapableBeanFactory.predictBeanType returns parent type instead of class="""" value (_**""is duplicated by""**_) - #14969 Introduce a pre-resolved target type in RootBeanDefinition  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/070103b17ee403d7b6ddfd68599fa7a4771dfbdf, https://github.com/spring-projects/spring-framework/commit/239a7cd85f52b84a7f63e1be698f2b6edd7945f4","closed","in: core,","spring-projects-issues","2013-03-14T02:21:47Z","2019-01-11T21:00:18Z"
"","14789","Properties provided by an Environment's PropertySources cannot refer to other properties loaded via PropertySourcesPlaceholderConfigurer using placeholders. [SPR-10156]","**[Frank Scheffler](https://jira.spring.io/secure/ViewProfile.jspa?name=maverick1601)** opened **[SPR-10156](https://jira.spring.io/browse/SPR-10156?redirect=false)** and commented  Loading properties using ``, i.e. from a set of files, allows these to be overridden by the surrounding environment, e.g. using system properties. Supposing the properties loaded by the `PropertySourcesPlaceholderConfigurer` contained two ""default"" properties `p1=v1` and `p2=v2`, any of these could be overridden using a concrete value.  However, if one tries to override ``` p1=${p2}  ```using the environment, this won't work, since p2 is not known within the context of the environment. Still, the environment tries to resolve the placeholder against itself, which simply doesn't work.  I am pretty sure, this was working some time ago, but could not find the point in time, where this behavior changed. Am I wrong in assuming that commit [00a6939](https://github.com/spring-projects/spring-framework/commit/00a69394e69a7a2944b2fd1d611faa958cf42f37) in Spring Core has something to do with this behavior? ```    ---  **Affects:** 3.1.3","closed","status: bulk-closed,","spring-projects-issues","2013-01-09T11:27:46Z","2019-01-12T02:35:24Z"
"","14728","Ensure HttpMessageConverter classes don't close the response stream [SPR-10095]","**[Florian Hackenberger](https://jira.spring.io/secure/ViewProfile.jspa?name=fhackenberger)** opened **[SPR-10095](https://jira.spring.io/browse/SPR-10095?redirect=false)** and commented  Trying to return a MultiValueMap from a ReSt service method results in an exception when calling writeNewLine on line 253 within writeParts after the first body part. The reason is that all the message converter added in the constructor of FormHttpMessageConverter (e.g. ByteArrayHttpMessageConverter), close the stream, by using the FileCopyUtils.copy method.  ---  **Affects:** 3.0.5, 3.2 GA  **Issue Links:** - #14869 StringHttpMessageConverter closes output stream causes problem with FormHttpMessageConverter (_**""is duplicated by""**_)  1 votes, 4 watchers","closed","type: bug,","spring-projects-issues","2012-12-14T05:38:02Z","2019-01-11T19:10:20Z"
"","15067","org.springframework.transaction.aspectj.AbstractTransactionAspect$AbstractTransactionAspect not found after updating to 3.2.2 [SPR-10434]","**[Flavio Donzé](https://jira.spring.io/secure/ViewProfile.jspa?name=flavio.donze)** opened **[SPR-10434](https://jira.spring.io/browse/SPR-10434?redirect=false)** and commented  I get this exception after updating spring from 3.2.1 to 3.2.2. The stacktrace indicates that its an org.aspectj.weaver problem, but my server startet without problem before updating to 3.2.2.  ERROR: org.aspectj.weaver.bcel.BcelWorld - Unable to find class 'org.springframework.transaction.aspectj.AbstractT ransactionAspect$AbstractTransactionAspect' in repository java.lang.ClassNotFoundException: org.springframework.transaction.aspectj.AbstractTr ansactionAspect$AbstractTransactionAspect not found - unable to determine URL at org.aspectj.apache.bcel.util.ClassLoaderRepository .loadClass(ClassLoaderRepository.java:292) ~[aspectjweaver.jar:1.7.2] at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass( BcelWorld.java:402) [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate( BcelWorld.java:376) [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.ltw.LTWWorld.resolveDelegate(LT WWorld.java:107) [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.World.resolveToReferenceType(Wo rld.java:477) [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.World.resolve(World.java:318) [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.ResolvedType.getDeclaringType(R esolvedType.java:1513) [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.patterns.WithinPointcut.isWithi nType(WithinPointcut.java:49) [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.patterns.WithinPointcut.matchIn ternal(WithinPointcut.java:79) [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.patterns.Pointcut.match(Pointcu t.java:137) [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.patterns.AndPointcut.matchInter nal(AndPointcut.java:51) [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.patterns.Pointcut.match(Pointcu t.java:137) [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.patterns.AndPointcut.matchInter nal(AndPointcut.java:51) [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.patterns.Pointcut.match(Pointcu t.java:137) [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.patterns.AndPointcut.matchInter nal(AndPointcut.java:51) [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.patterns.Pointcut.match(Pointcu t.java:137) [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.patterns.OrPointcut.matchIntern al(OrPointcut.java:50) [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.patterns.Pointcut.match(Pointcu t.java:137) [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.patterns.OrPointcut.matchIntern al(OrPointcut.java:50) [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.patterns.Pointcut.match(Pointcu t.java:137) [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.patterns.OrPointcut.matchIntern al(OrPointcut.java:50) [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.patterns.Pointcut.match(Pointcu t.java:137) [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.patterns.OrPointcut.matchIntern al(OrPointcut.java:50) [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.patterns.Pointcut.match(Pointcu t.java:137) [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.patterns.OrPointcut.matchIntern al(OrPointcut.java:50) [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.patterns.Pointcut.match(Pointcu t.java:137) [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.patterns.OrPointcut.matchIntern al(OrPointcut.java:50) [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.patterns.Pointcut.match(Pointcu t.java:137) [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.patterns.OrPointcut.matchIntern al(OrPointcut.java:50) [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.patterns.Pointcut.match(Pointcu t.java:137) [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.ShadowMunger.match(ShadowMunger .java:113) [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.Advice.match(Advice.java:109) [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.bcel.BcelAdvice.match(BcelAdvic e.java:149) [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.bcel.BcelClassWeaver.match(Bcel ClassWeaver.java:3156) [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.bcel.BcelClassWeaver.match(Bcel ClassWeaver.java:2549) [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.bcel.BcelClassWeaver.weave(Bcel ClassWeaver.java:480) [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.bcel.BcelClassWeaver.weave(Bcel ClassWeaver.java:100) [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeave r.java:1691) [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDum p(BcelWeaver.java:1635) [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify( BcelWeaver.java:1400) [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeave r.java:1186) [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.tools.WeavingAdaptor.getWovenBy tes(WeavingAdaptor.java:527) [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass (WeavingAdaptor.java:363) [aspectjweaver.jar:1.7.2] at org.eclipse.equinox.weaving.aspectj.loadtime.OSGiW eavingAdaptor.weaveClass(Unknown Source) [org.eclipse.equinox.weaving.aspectj_1.0.200.I20130 127-2000.jar:na] at org.eclipse.equinox.weaving.aspectj.AspectJWeaving Service.preProcess(Unknown Source) [org.eclipse.equinox.weaving.aspectj_1.0.200.I20130 127-2000.jar:na] at org.eclipse.equinox.weaving.adaptors.WeavingAdapto r.weaveClass(Unknown Source) [org.eclipse.equinox.weaving.hook_1.0.200.I20130127-2000.jar:na] at org.eclipse.equinox.weaving.hooks.WeavingHook.proc essClass(Unknown Source) [org.eclipse.equinox.weaving.hook_1.0.200.I20130127-2000.jar:na] at org.eclipse.osgi.baseadaptor.loader.ClasspathManag er.defineClass(ClasspathManager.java:594) [org.eclipse.osgi_3.7.2.v20120110-1415.jar:na] at org.eclipse.osgi.baseadaptor.loader.ClasspathManag er.findClassImpl(ClasspathManager.java:562) [org.eclipse.osgi_3.7.2.v20120110-1415.jar:na] at org.eclipse.osgi.baseadaptor.loader.ClasspathManag er.findLocalClassImpl(ClasspathManager.java:486) [org.eclipse.osgi_3.7.2.v20120110-1415.jar:na] at org.eclipse.osgi.baseadaptor.loader.ClasspathManag er.findLocalClass(ClasspathManager.java:459) [org.eclipse.osgi_3.7.2.v20120110-1415.jar:na] at org.eclipse.osgi.internal.baseadaptor.DefaultClass Loader.findLocalClass(DefaultClassLoader.java:216) [org.eclipse.osgi_3.7.2.v20120110-1415.jar:na] at org.eclipse.osgi.internal.loader.BundleLoader.find LocalClass(BundleLoader.java:400) [org.eclipse.osgi_3.7.2.v20120110-1415.jar:na] at org.eclipse.osgi.internal.loader.BundleLoader.find ClassInternal(BundleLoader.java:476) [org.eclipse.osgi_3.7.2.v20120110-1415.jar:na] at org.eclipse.osgi.internal.loader.BundleLoader.find Class(BundleLoader.java:429) [org.eclipse.osgi_3.7.2.v20120110-1415.jar:na] at org.eclipse.osgi.internal.loader.BundleLoader.find Class(BundleLoader.java:417) [org.eclipse.osgi_3.7.2.v20120110-1415.jar:na] at org.eclipse.osgi.internal.baseadaptor.DefaultClass Loader.loadClass(DefaultClassLoader.java:107) [org.eclipse.osgi_3.7.2.v20120110-1415.jar:na] at java.lang.ClassLoader.loadClass(ClassLoader.java:3 56) [na:1.7.0_17] at org.springframework.transaction.aspectj.AbstractTr ansactionAspect.ajc$around$org_springframework_tra nsaction_aspectj_AbstractTransactionAspect$1$2a73e 96c(AbstractTransactionAspect.aj:63) [org.springframework.aspects-3.2.2.RELEASE.jar:3.2.2.RELEASE] at com.softmodeler.service.impl.CategoryService.init( CategoryService.java:117) [com.softmodeler.server/:na] at sun.reflect.NativeMethodAccessorImpl.invoke0(Nativ e Method) ~[na:1.7.0_17] at sun.reflect.NativeMethodAccessorImpl.invoke(Native MethodAccessorImpl.java:57) ~[na:1.7.0_17] at sun.reflect.DelegatingMethodAccessorImpl.invoke(De legatingMethodAccessorImpl.java:43) ~[na:1.7.0_17] at java.lang.reflect.Method.invoke(Method.java:601) ~[na:1.7.0_17]   ---  **Affects:** 3.2.2","closed","status: bulk-closed,","spring-projects-issues","2013-04-02T01:33:26Z","2019-01-12T00:24:27Z"
"","15219","when spring upload a file,the spring interceptor doesn't  intercept the request. it always invoke the interceptor after my upload method invoke [SPR-10590]","**[fengyi.liu](https://jira.spring.io/secure/ViewProfile.jspa?name=fengyi)** opened **[SPR-10590](https://jira.spring.io/browse/SPR-10590?redirect=false)** and commented  i write a interceptor to do my privilege intercept. everything works. but when a upload a file ,without login,i found the intercept didn't work. the file have uploaded anyway, and after that,the program invoke the interceptor. i can't confirm whether the spring interceptor design like that,but i think i should report this.    besids, my upload code will return to upload page after upload success. like return ""upload"",to ""/emarket/upload.jsp"", but after the interceptor authenticate the privilege, i didn't login.then response.sendRedirect(""/emarket/index.jsp""). the last return url is ""/emarket/upload/index.jsp"",is this correct? i don't think so！   ---  **Affects:** 3.2 GA","closed","status: invalid,","spring-projects-issues","2013-05-27T01:15:19Z","2019-01-12T05:26:57Z"
"","14778","Method readWithMessageConverters from RequestResponseBodyMethodProcessor is throwing a NPE [SPR-10145]","**[Felipe Duarte](https://jira.spring.io/secure/ViewProfile.jspa?name=fcduarte)** opened **[SPR-10145](https://jira.spring.io/browse/SPR-10145?redirect=false)** and commented  At line 148:  ```java RequestBody annot = methodParam.getParameterAnnotation(RequestBody.class); ```  method getParameterAnnotation can return null so object ""annot"" might be null and then will throw a NPE here:  ```java if (!annot.required()) { ```    ---  **Affects:** 3.2 GA","closed","status: declined,","spring-projects-issues","2013-01-04T05:31:44Z","2019-01-12T16:24:37Z"
"","15185","@RequestMapping inheritance not worked as expect with a dot path [SPR-10554]","**[feidong](https://jira.spring.io/secure/ViewProfile.jspa?name=kdlan)** opened **[SPR-10554](https://jira.spring.io/browse/SPR-10554?redirect=false)** and commented  ```  import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.ResponseBody;  @Controller @RequestMapping(""/1.0"") public class HomeController {      @RequestMapping(value = ""/test"")     @ResponseBody     public String home() {         return ""home"";     }  } ```  When start,the log is:  ``` INFO : org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping - Mapped ""{[/1.0],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}"" onto public java.lang.String com.github.kdlan.HomeController.home() ```  request with path `""/1.0/test""` will return 404  But when I remove the `@RequestMapping` on the class, and modify the method `@RequestMapping` with value `""/1.0/test""` , it works as expect  Java: 1.6.0_45 OS: OS X 10.8.3  ---  **Affects:** 3.2.2  **Issue Links:** - #15224 Dot in RequestMapping path prevents paths from combination (_**""is duplicated by""**_)","closed","type: enhancement,","spring-projects-issues","2013-05-13T05:47:46Z","2019-01-11T22:15:44Z"
"","15235","SimpleJdbcCall: Function return type (REF CURSOR) should be resolved properly. [SPR-10606]","**[Fedor Bobin](https://jira.spring.io/secure/ViewProfile.jspa?name=fuud)** opened **[SPR-10606](https://jira.spring.io/browse/SPR-10606?redirect=false)** and commented  If you need to call Oracle function like this:  `function get_foo() return ref cursor`  you will get java.sql.SQLException: Invalid column type: 1111  For regular parameters (not for return type) there is a workaround for ref cursor (see CallMetaDataContext.java:394)  I have done this also for return type. https://github.com/SpringSource/spring-framework/pull/294   ---  **Affects:** 3.2.3  **Reference URL:** https://github.com/SpringSource/spring-framework/pull/294","closed","in: core,","spring-projects-issues","2013-05-30T05:26:34Z","2013-10-31T12:28:03Z"
"","15223","Add ability to create proxy around classes that has no default constructor [SPR-10594]","**[Fedor Bobin](https://jira.spring.io/secure/ViewProfile.jspa?name=fuud)** opened **[SPR-10594](https://jira.spring.io/browse/SPR-10594?redirect=false)** and commented  There is some limitations in current proxy instantiation model: 1) class should have default constructor (but spring supports autowiring constructor arguments for object itself) 2) calling the constructor can cause side-effects 3) if constructor throws an exception proxy will not be created.  Note that proxy does not need to have any valid state at all.  Solution is to use Objenesis library ( http://objenesis.googlecode.com/svn/docs/index.html ). It can instantiate objects without calling any constructor and cglib-callbacks can be set after creation.  If Objenesis library is in classpath => create using it. If no Objenesis library is in classpath => create using default constructor (fallback to current implementation). So user that does not want to have Objenesis dependency in class path will have old instantiation model.  You can see proposed changes at https://github.com/SpringSource/spring-framework/pull/290  Additionaly there is a problem with proxy around Externalizable classes: this proxies are not serialized correctly. Solution is to make proxies implement java.io.Externalizable and add read/writeExternal implementations to them. It was done for proxies created by Objenesis. Seems that it should be done also for proxies created using default constructor.  ---  **Reference URL:** https://github.com/SpringSource/spring-framework/pull/290  **Issue Links:** - #15411 Method injection causes memory leak - #17722 ObjenesisCglibAopProxy's fallback mode triggers duplicate class definition error - #17352 ProxyFactory should not discard objenesis cache, thereby enabling efficient proxy instantiation - #7836 Create CGLIB proxy instances honoring  tags (_**""supersedes""**_)  1 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2013-05-27T22:53:44Z","2019-01-11T22:12:41Z"
"","15120","Spring-Aspect.jar Upgrade to 3.2.2.RELEASE from 3.2.1.RELEASE caused nosuchmethod error [SPR-10487]","**[fatih.tekin](https://jira.spring.io/secure/ViewProfile.jspa?name=fatih.tekin85@gmail.com)** opened **[SPR-10487](https://jira.spring.io/browse/SPR-10487?redirect=false)** and commented  Everythings works with 3.2.1.RELEASE but when upgraded to 3.2.2.RELEASE below exception occurs.  java.lang.NoSuchMethodError: org.springframework.transaction.aspectj.AbstractTransactionAspect.ajc$after$org_springframework_transaction_aspectj_AbstractTransactionAspect$4$2a73e96c(Ljava/lang/Object;)V at com.ericsson.enk.eventengine.db.service.impl.PersistentEventServiceImpl.loadQueuedActions(PersistentEventServiceImpl.java:59) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:317) at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:183) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:150) at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:96) at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:260) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:94) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:204) at $Proxy49.loadQueuedActions(Unknown Source) at com.ericsson.enk.eventengine.db.EventEngine.initializeActionQueue(EventEngine.java:106) at com.ericsson.enk.eventengine.db.EventEngine.initilizeActionQueues(EventEngine.java:99) at com.ericsson.enk.eventengine.db.EventEngine.startEventEngine(EventEngine.java:62) at com.ericsson.enk.eventengine.db.EventEngine.run(EventEngine.java:55) at com.ericsson.enk.m2m.ne.dispatcher.Main.main(Main.java:37)  \ \org.codehaus.mojo\ \aspectj-maven-plugin\ \1.3.1\ \ \ \ \compile\ \ \ \ \ \ \org.aspectj\ \aspectjrt\ \${aspectj.version}\ \ \ \org.aspectj\ \aspectjtools\ \${aspectj.version}\ \ \ \ \1.6\ \true\ \1.6\ \false\ \ \ \org.springframework\ \spring-aspects\ \ \ \ \           	UTF-8     	3.2.2.RELEASE     	1.6.10                              @Override     @Transactional     public List loadQueuedActions(long slaveId, EventActionState state, int maxResults) {         return null;     }    ---  **Affects:** 3.2.2  2 votes, 1 watchers","closed","in: core,","spring-projects-issues","2013-04-24T23:22:14Z","2019-01-12T05:27:01Z"
"","15326","PropertyPlaceholderConfigurer bean not recognize resource path [SPR-10698]","**[fang haifeng](https://jira.spring.io/secure/ViewProfile.jspa?name=denisfang)** opened **[SPR-10698](https://jira.spring.io/browse/SPR-10698?redirect=false)** and commented  When resource path contains blank, `PropertyPlaceholderConfigurer` bean says can not find resource file. The cause is the bean translates blank char to %20。  This problem causes current thread always waiting when starting application.  examples:  ```           	         	        	classpath:bpaf.properties 	        	classpath:jdbc/sybase.properties 	                   ```    --- No further details from [SPR-10698](https://jira.spring.io/browse/SPR-10698?redirect=false)","closed","","spring-projects-issues","2013-06-27T02:48:46Z","2019-01-11T22:22:28Z"
"","14712","Upgrade to aspectj 1.7 for Java 7 bytecode weaving [SPR-10079]","**[Falko Modler](https://jira.spring.io/secure/ViewProfile.jspa?name=famod)** opened **[SPR-10079](https://jira.spring.io/browse/SPR-10079?redirect=false)** and commented  As far as I can see, Spring 3.2 will still use aspectj 1.6.12 in spite of the fact that you need aspectj 1.7.0+ to weave Java 7 bytecode. See: http://eclipse.org/aspectj/doc/released/README-170.html  Given the fact that Java 6 reaches EOL in february, the dependency shoul be upgraded to 1.7.1 (http://eclipse.org/aspectj/doc/released/README-171.html).   ---  **Affects:** 3.2 RC2","closed","in: core,","spring-projects-issues","2012-12-06T07:21:01Z","2012-12-12T04:47:12Z"
"","15270","can't download  source code  [SPR-10642]","**[f jiang](https://jira.spring.io/secure/ViewProfile.jspa?name=jhooo)** opened **[SPR-10642](https://jira.spring.io/browse/SPR-10642?redirect=false)** and commented  ""github.com / SpringSource / spring-framework"" download ""branch: master"" version of the source code, download, config STS_TEST_VERSION to STS_TEST_VERSION = '3.2.0. RELEASE ', execute it and then throw an exception:  ``` //---------------------exception--------- FAILURE: Build failed with an exception.  * What went wrong: Could not resolve all dependencies for configuration ':spring-oxm:optional'. > Could not resolve org.apache.xmlbeans:xmlbeans:2.6.0.   Required by:       org.springframework:spring-oxm:4.0.0.BUILD-SNAPSHOT    > Could not GET 'http://repo.springsource.org/libs-release/org/apache/xmlbean s/xmlbeans/2.6.0/xmlbeans-2.6.0.pom'. Received status code 401 from server: Unau thorized  * Try: Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.  BUILD FAILED //---------------------exception end---------  I use ie access ""http://repo.springsource.org/libs-release/org/apache/xmlbean s/xmlbeans/2.6.0/xmlbeans-2.6.0.pom "", requires a username and password, but do not jar package, I do not know where is the problem ```    ---  **Affects:** 3.2.3  **Reference URL:** https://github.com/SpringSource/spring-framework  **Attachments:** - [bug.jpg](https://jira.spring.io/secure/attachment/21233/bug.jpg) (_103.99 kB_)","closed","","spring-projects-issues","2013-06-08T18:41:47Z","2019-01-11T22:25:46Z"
"","15297","Scoped beans destroyed without well-defined ordering [SPR-10669]","**[Evgenii Schepotiev](https://jira.spring.io/secure/ViewProfile.jspa?name=zeckson)** opened **[SPR-10669](https://jira.spring.io/browse/SPR-10669?redirect=false)** and commented  I am a developer of JetBrains YouTrack project and we found that Scope interface doesn't notify how to call bean destructors. They should be called in reversed order. We found such an issue in our project http://youtrack.jetbrains.com/issue/JT-20350.  I've checked your AbstractRequestAttributesScope and it has exactly the same issue. When you close scope you need to close dependent beans before close.  See AbstractRequestAttributes  executeRequestDestructionCallbacks method:  ``` private void executeRequestDestructionCallbacks() { 		synchronized (this.requestDestructionCallbacks) { 			for (Runnable runnable : this.requestDestructionCallbacks.values()) { // Here is the issue. You need to destroy dependent beans before. 				runnable.run(); 			} 			this.requestDestructionCallbacks.clear(); 		} 	} ```    ---  **Affects:** 3.2.3  **Reference URL:** http://youtrack.jetbrains.com/issue/JT-20350","closed","status: bulk-closed,","spring-projects-issues","2013-06-19T06:49:17Z","2019-01-12T00:23:29Z"
"","15033","cvc-elt.1: Cannot find the declaration of element 'beans' [SPR-10400]","**[Eugène Münch](https://jira.spring.io/secure/ViewProfile.jspa?name=emy)** opened **[SPR-10400](https://jira.spring.io/browse/SPR-10400?redirect=false)** and commented  I'm stuck on my project because of this issue ""cvc-elt.1: Cannot find the declaration of element 'beans'. "" from my `applicationContext-mongo.xml`.  I have maven dependencies on my classpath and the project is generated using Roo.  here is my `applicationContext-mongo.xml`:  ```xml                                                ```  and my roo script:  ``` // Spring Roo 1.2.3.RELEASE [rev 7fd62b6] log opened at 2013-03-19 22:06:01 project --topLevelPackage fr.afpa mongo setup --databaseName dbprojet2 --host localhost --port 27017 entity mongo --class ~.domains.Rubrique --testAutomatically field string --fieldName name --notNull  field string --fieldName surname --notNull  repository mongo --interface ~.repositories.RubriqueRepository --entity ~.domains.Rubrique service --interface ~.services.RubriqueService --entity ~.domains.Rubrique perform test web mvc setup perform test web mvc all --package ~.controllers ```  It's very frustating!!!!!!.  Can anyone help please???  regards.    ---  **Affects:** 3.2 GA","closed","status: invalid,","spring-projects-issues","2013-03-20T03:42:09Z","2019-01-12T05:27:14Z"
"","14838","Spring Portlet MVC - Unable to bind and validate JSON data using @Valid @RequestBody in a @ResourceMapping method [SPR-10205]","**[Eugene Petruhin](https://jira.spring.io/secure/ViewProfile.jspa?name=eug9n9)** opened **[SPR-10205](https://jira.spring.io/browse/SPR-10205?redirect=false)** and commented  Using an AJAX based UI in a portlet environment requires `@RequestBody` support from Spring Portlet MVC for the `@ResourceMapping` methods. JSR-303 validation for the `@RequestBody` parameter with the following BindingResult is a necessity as well. Similar functionality is now implemented for the servlets but is missing for the portlet environment.  ---  **Affects:** 3.2 GA  **Issue Links:** - #12003 Spring Portlet MVC - Unable to return JSON data from `@ResourceMapping`  2 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2013-01-22T09:09:41Z","2019-01-13T07:01:28Z"
"","14797","ShallowEtagHeaderFilter should deal with the If-Match HTTP Header [SPR-10164]","**[Eugen Paraschiv](https://jira.spring.io/secure/ViewProfile.jspa?name=eugenparaschiv)** opened **[SPR-10164](https://jira.spring.io/browse/SPR-10164?redirect=false)** and commented  ShallowEtagHeaderFilter supports the ``` If-None-Match  ```header, so it would make sense if it would also support the ```If-Match ``` header as well. This would make the out of the box behaviour of this filter much more in sync with the HTTP spec (which is the whole point of the filter).  The same shallow implementation would be fine here as well, same as now.  ```    ---  **Affects:** 3.2 GA  2 votes, 8 watchers","closed","type: enhancement,","spring-projects-issues","2013-01-11T06:56:24Z","2013-10-31T12:27:51Z"
"","14914","MockMvcRequestBuilders.fileUpload() cannot merge if defaultRequest is set [SPR-10280]","**[Erich Eichinger](https://jira.spring.io/secure/ViewProfile.jspa?name=oakinger)** opened **[SPR-10280](https://jira.spring.io/browse/SPR-10280?redirect=false)** and commented  The test below fails with:  ``` java.lang.IllegalArgumentException: Cannot merge with [org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder] 	at org.springframework.test.web.servlet.request.MockMultipartHttpServletRequestBuilder.merge(MockMultipartHttpServletRequestBuilder.java:88) 	at org.springframework.test.web.servlet.MockMvc.perform(MockMvc.java:123) ```  Test:  ``` public class FileUploadControllerTest {    @Controller   public class MyFileUploadController {      public static final String MULTIPART_FILEUPLOAD = ""/multipartfileupload"";      @RequestMapping(value = MULTIPART_FILEUPLOAD, method= RequestMethod.POST)     public void multipart_fileupload(@RequestParam MultipartFile file, Model model) throws IOException {       model.addAttribute(""message"", ""File '"" + file.getOriginalFilename() + ""' uploaded successfully: "" + new String(file.getBytes()));     }   }    @Test   public void fileupload_example() throws Exception {     MockMvc mockMvc = MockMvcBuilders.standaloneSetup(new MyFileUploadController())         .defaultRequest(get(""/"").characterEncoding(""utf-8"")).build();      mockMvc.perform(         fileUpload(MULTIPART_FILEUPLOAD)             .file(""myfilename"", ""data"".getBytes()))         .andExpect(model().attribute(""message"", ""File 'myfilename' uploaded successfully""));   }  } ```  I'd suggest `MockMultipartHttpServletRequestBuilder#merge()` allows to be merged with standard `MockHttpServletRequestBuilder` instances.   ---  **Affects:** 3.2.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/eda53ec1d833df66848ff17fc0436cb7f4508c25","closed","type: bug,","spring-projects-issues","2013-02-10T11:42:15Z","2013-02-15T06:44:06Z"
"","14913","StandaloneMockMvcBuilder interface is inconsistent [SPR-10279]","**[Erich Eichinger](https://jira.spring.io/secure/ViewProfile.jspa?name=oakinger)** opened **[SPR-10279](https://jira.spring.io/browse/SPR-10279?redirect=false)** and commented  while `StandaloneMockMvcBuilder` expects varargs on most configuration methods, `setHandlerExceptionResolvers()` expects a list:  ```java   org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder#setHandlerExceptionResolvers(List exceptionResolvers) ```  would be nice to have a uniform interface   ---  **Affects:** 3.2.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ccca82be1b05accfca5a032237dc94f39e1ccfa5","closed","type: enhancement,","spring-projects-issues","2013-02-10T05:23:51Z","2013-02-15T06:43:58Z"
"","14911","MockMvcBuilders' use of generics doesn't allow for chaining more than 2 calls [SPR-10277]","**[Erich Eichinger](https://jira.spring.io/secure/ViewProfile.jspa?name=oakinger)** opened **[SPR-10277](https://jira.spring.io/browse/SPR-10277?redirect=false)** and commented  the example code below doesn't compile:  ```java MockMvc mockMvc = MockMvcBuilders     .webAppContextSetup(wac)     .addFilter( new CharacterEncodingFilter() )     .alwaysDo(print())     .defaultRequest(get(""/"").contextPath(""/mywebapp""))     .build(); ```  ""The symbol ""defaultRequest(..) cannot be resolved""  It seems the java compiler is not smart enough for this use of generics  reproducible in both IDEA and maven-compiler-plugin:  ```xml      org.apache.maven.plugins     maven-compiler-plugin     2.5.1              1.7         1.7       ```  tried against source/target both, 1.6 and 1.7   ---  **Affects:** 3.2.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fbac428e231118538c7273f04a4ac0bbdae47d68","closed","type: enhancement,","spring-projects-issues","2013-02-09T09:05:14Z","2013-03-01T13:33:54Z"
"","14817","RequestMappingInfoHandlerMapping#handleNoMatch throws HttpRequestMethodNotSupported despite other matching HandlerMappings [SPR-10184]","**[Erich Eichinger](https://jira.spring.io/secure/ViewProfile.jspa?name=oakinger)** opened **[SPR-10184](https://jira.spring.io/browse/SPR-10184?redirect=false)** and commented  don't quite see why handleNoMatch throws the exception when the contract between DispatcherServlet and HandlerMappings state that if a HandlerMapping can't map a request it should return null?  Concrete example: A `@Controller` registered for a URL+method POST, also a SimpleUrlHandlerMapping handling all other requests - SimpleUrlHandlerMapping never gets to map the URL   ---  **Affects:** 3.2 GA","closed","status: declined,","spring-projects-issues","2013-01-16T08:10:14Z","2019-01-12T16:24:31Z"
"","15301","WebAsyncUtils could/should cache the reference to StandardServletAsyncWebRequest's constructor [SPR-10673]","**[Eric Vlaanderen](https://jira.spring.io/secure/ViewProfile.jspa?name=eric.vlaanderen)** opened **[SPR-10673](https://jira.spring.io/browse/SPR-10673?redirect=false)** and commented  To avoid excessive use of reflection, WebAsyncUtils could/should cache the reference to StandardServletAsyncWebRequest's constructor.  We profiled a number of very simple http requests and found that 25% of the time is spent class loading in WebAsyncUtils.   ---  **Affects:** 3.2.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9af1984b39791aabe7d8bd265b21b3157c5db64c, https://github.com/spring-projects/spring-framework/commit/a0f8a894f2f59422b5c1f53cbd485424d93038ff","closed","type: enhancement,","spring-projects-issues","2013-06-21T05:05:20Z","2013-07-24T10:17:11Z"
"","15093","cannot delete file once resttemplate has done a multipart postforentity with the said file [SPR-10460]","**[Eric Soucy](https://jira.spring.io/secure/ViewProfile.jspa?name=bnbamboo)** opened **[SPR-10460](https://jira.spring.io/browse/SPR-10460?redirect=false)** and commented  The following code works but I cannot delete the file ""somefile"" once it is posted by RestTemplate. It looks like the RestTemplate keeps a handle on the file. This happends even if I create a new File object pointing to the same physical file.  ```java MultiValueMap parts = new LinkedMultiValueMap(); final Source xml = new StreamSource(new StringReader(""..."")) parts.add(""firstpart"", xml); FileSystemResource fileResource  = new FileSystemResource(""somefile""); parts.add(""file-data"", fileResource); RestTemplate template = new RestTemplate(); XStreamMarshaller marshaller = new XStreamMarshaller(); setMessageConverters(template, marshaller);  // sets needed converters       ResponseEntity result = template.postForEntity(SERVICE_URL, parts, MyResponse.class); File file = fileResource.getFile(); LOGGER.error(Boolean.toString(file.exists())); if (!file.delete()){    LOGGER.error(Boolean.toString(file.exists()));    LOGGER.error(file.getName() + "" was not deleted""); } ```    ---  **Affects:** 3.2.2  1 votes, 4 watchers","closed","type: bug,","spring-projects-issues","2013-04-12T07:13:14Z","2013-05-28T12:10:54Z"
"","15450","Can't load xsd schema files from www.springframework.org [SPR-10824]","**[Eric Heydrick](https://jira.spring.io/secure/ViewProfile.jspa?name=heydrick)** opened **[SPR-10824](https://jira.spring.io/browse/SPR-10824?redirect=false)** and commented  spring-beans xsd files stopped loading from www.springframework.org today. Cloudflare is returning a 403 Forbidden when accessing an xsd file such as http://www.springframework.org/schema/beans/spring-beans-2.0.xsd with a Java user-agent. I understand it's bad practice to rely on the xsd's from the site but load loaded before. The cloudflare error is:  The owner of this website (www.springframework.org) has banned your access based on your browser's signature (9b8d9c9b9920400-ua21)   ---  **Reference URL:** http://www.springframework.org/schema/beans/spring-beans-2.0.xsd  1 votes, 3 watchers","closed","","spring-projects-issues","2013-08-09T18:19:39Z","2019-01-11T22:04:56Z"
"","15095","Add default portlet mode [SPR-10462]","**[Enrique Ruiz (DiSiD)](https://jira.spring.io/secure/ViewProfile.jspa?name=eruiz)** opened **[SPR-10462](https://jira.spring.io/browse/SPR-10462?redirect=false)** and commented  The DefaultAnnotationHandlerMapping of Portlet MVC throws an IllegalStateException (line 198) if portlet mode mappings have not been set in method RequestMapping - neither at type nor method level.  It would be great if DefaultAnnotationHandlerMapping has a new attribute ""String[] defaultPortletModes"" that if set, no exception will be thrown and the default portlet modes will be used.   ---  **Affects:** 3.2.2","closed","type: enhancement,","spring-projects-issues","2013-04-13T11:55:27Z","2018-11-30T20:51:47Z"
"","15080","RequestMappingHandlerAdapter for Spring Portlet [SPR-10447]","**[Enrique Ruiz (DiSiD)](https://jira.spring.io/secure/ViewProfile.jspa?name=eruiz)** opened **[SPR-10447](https://jira.spring.io/browse/SPR-10447?redirect=false)** and commented  It would be great if Spring includes RequestMappingHandlerAdapter and RequestMappingHandlerMapping in Portlet MVC.  Regards   ---  **Affects:** 3.2.2","closed","type: enhancement,","spring-projects-issues","2013-04-06T01:18:50Z","2018-11-30T20:48:44Z"
"","15171","DateFormatter and TimeZone:  [SPR-10541]","**[Enrique Carro](https://jira.spring.io/secure/ViewProfile.jspa?name=srcarro)** opened **[SPR-10541](https://jira.spring.io/browse/SPR-10541?redirect=false)** and commented  This problem arised when you remove **Joda Time Library** from the classpath. Lets suppose that you have an object with two validated fields:  ```   @DateTimeFormat(iso=ISO.DATE)   private Date creationDate;    @DateTimeFormat(pattern = ""yyyy-MM-dd"")   private Date modificationDate; ```  You put the same date in both fields, for example ""04/25/2013"". Then you try to display them with a JSP, in this way: \\  ```   ```  You'll get the next result: \\  ``` 2013-04-24 2013-04-25 ```  I think the problem could be in method **org.springframework.format.datetime.DateFormatter.createDateFormat()**. In the first case (an ISO pattern) a SimpleDateFormat is created and TimeZone is set to **UTC**. My default TimeZone is **UTC+2**, and this produces the _one day minus_ effect.    ---  **Affects:** 3.2.2","closed","status: bulk-closed,","spring-projects-issues","2013-05-08T04:42:14Z","2019-01-12T03:42:31Z"
"","15438","Stereotype @Profiles not merged [SPR-10812]","**[Emerson Farrugia](https://jira.spring.io/secure/ViewProfile.jspa?name=mers)** opened **[SPR-10812](https://jira.spring.io/browse/SPR-10812?redirect=false)** and commented  I created environment stereotype annotations `@Production`, `@Staging`, and `@Development` to easily control which environment a few beans are available in. These annotations in turn have `@Profile`(""somestring"") as a meta-annotation.  I've hit an issue where the same `@Component` might be available in multiple environments, but not all of them, e.g.  `@Staging` `@Production` `@Service` public class SomeService { ...  The org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider only sees one of the `@Profile` meta-annotations, and I don't see an obvious pattern as to which it's picking.  Is it possible to compute the disjunction of all available profiles in this case? Profile negation might be fun.  ---  **Affects:** 3.2.3  **Issue Links:** - #16428 Custom `@Profile` annotations not working on `@Configuration` classes  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/aecf60d21f6aaab898e58ff65458cc685813ed0e","closed","type: enhancement,","spring-projects-issues","2013-08-07T02:54:22Z","2019-01-13T06:58:39Z"
"","15434","Reconsider whether to generally allow bean overriding by name [SPR-10808]","**[Emerson Farrugia](https://jira.spring.io/secure/ViewProfile.jspa?name=mers)** opened **[SPR-10808](https://jira.spring.io/browse/SPR-10808?redirect=false)** and commented  I've hit an issue where a single component scan was finding two `@Beans` with the same name. The beans weren't intentionally named the same, it was just an oversight. The container initialised one bean and ignored the other, logging at info instead of warn. The logging level is the first problem, since logging at info makes it much more likely the message is missed. The second problem is that the ignored bean was explicitly marked as `@Primary`. I've attached files with an example.  As far as I can tell, there's no way to control which bean gets picked in this situation. `@Order` on the `@Configuration` doesn't help.  In terms of fixes, I suggest the info message gets changed to warning. I'd personally even go one further. Given the functionality of `@Profile`, `@Primary`, and that autowiring by type is encouraged, does bean overriding still make sense in 3.1+.x? `@Profile` and `@Primary` give us a deterministic way of controlling autowire candidates. In contrast, quiet non-deterministic overrides by name seem too fragile to fit.  ---  **Affects:** 3.2.3  **Attachments:** - [Bar.java](https://jira.spring.io/secure/attachment/21323/Bar.java) (_101 bytes_) - [BarConfiguration.java](https://jira.spring.io/secure/attachment/21321/BarConfiguration.java) (_446 bytes_) - [Foo.java](https://jira.spring.io/secure/attachment/21324/Foo.java) (_101 bytes_) - [FooConfiguration.java](https://jira.spring.io/secure/attachment/21322/FooConfiguration.java) (_378 bytes_) - [Launcher.java](https://jira.spring.io/secure/attachment/21326/Launcher.java) (_712 bytes_) - [SomeInterface.java](https://jira.spring.io/secure/attachment/21325/SomeInterface.java) (_90 bytes_)  **Issue Links:** - #11690 Allow `@Bean` methods to override definitions in XML - #12263 When a bean definition is overridden, detect whether the definition has changed and log accordingly - #15236 Allow `@Bean` to override a dynamically registered bean definition - #18552 `@Primary` annotation is not working for beans with the same name - #17527 Regression: `@Primary` annotation not working when overriding bean definition with classpath scanning - #19229 Auto-resolve bean name conflicts for scanned classes  2 votes, 7 watchers","open","in: core,","spring-projects-issues","2013-08-06T02:07:48Z","2021-09-20T09:39:48Z"
"","14900","UriComponents still breaks UriTemplate serialization [SPR-10266]","**[Emerson Farrugia](https://jira.spring.io/secure/ViewProfile.jspa?name=mers)** opened **[SPR-10266](https://jira.spring.io/browse/SPR-10266?redirect=false)** and commented  #14809 isn't fixed. Simply adding `@Serializable` on UriComponents doesn't work because it contains fields which aren't Serializable.  ``` Caused by: java.io.NotSerializableException: org.springframework.web.util.HierarchicalUriComponents$FullPathComponent 	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1180) ~[na:1.7.0_09] 	at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1528) ~[na:1.7.0_09] 	at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1493) ~[na:1.7.0_09] 	at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1416) ~[na:1.7.0_09] 	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1174) ~[na:1.7.0_09] ```  ``` Caused by: java.io.NotSerializableException: org.springframework.web.util.HierarchicalUriComponents$FullPathComponent at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1180) ~[na:1.7.0_09] at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1528) ~[na:1.7.0_09] at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1493) ~[na:1.7.0_09] at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1416) ~[na:1.7.0_09] at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1174) ~[na:1.7.0_09] ```  ---  **Affects:** 3.2.1  **Issue Links:** - #14819 UriComponents break UriTemplate serialization (_**""supersedes""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f32ce3a6130fc6ebe2463d7125ef69396ff34646, https://github.com/spring-projects/spring-framework/commit/536325bc7524e9ba7c142eb13adc85fe272a28de","closed","type: bug,","spring-projects-issues","2013-02-06T07:24:37Z","2019-01-11T21:32:25Z"
"","14819","UriComponents break UriTemplate serialization [SPR-10186]","**[Emerson Farrugia](https://jira.spring.io/secure/ViewProfile.jspa?name=mers)** opened **[SPR-10186](https://jira.spring.io/browse/SPR-10186?redirect=false)** and commented  The UriTemplate class is Serializable, but HierarhicalUriComponents and OpaqueUriComponents, referenced through UriTemplate#uriComponents are not and break serialization.  ---  **Affects:** 3.2 GA  **Issue Links:** - #14900 UriComponents still breaks UriTemplate serialization (_**""is superseded by""**_)","closed","type: bug,","spring-projects-issues","2013-01-17T03:41:36Z","2019-01-11T21:30:29Z"
"","14781","Remove unreachable code from TransactionTemplate [SPR-10148]","**[Elad Tabak](https://jira.spring.io/secure/ViewProfile.jspa?name=tzvatot)** opened **[SPR-10148](https://jira.spring.io/browse/SPR-10148?redirect=false)** and commented  The method org.springframework.transaction.support.TransactionTemplate.exectue() have dead code where calling upon the TransactionCallback.doInTransaction() is surrounded with 'try/catch', only the last ""catch"" for ""Exception"" is unnecessary, since the ""doInTransaction()"" does not declare any checked exception to be thrown. The last ""catch"" statement is actually dead/unreachable code, since only RuntimeExceptions and Errors can be thrown from the ""doInTransaction"" method.  ---  **Affects:** 3.1.3  **Issue Links:** - #11027 TransactionTemplate leaks transactions when TransactionCallback propagates undeclared checked exception","closed","status: declined,","spring-projects-issues","2013-01-06T01:33:12Z","2019-01-11T21:23:06Z"
"","15242","Support ignoreResourceNotFound as attribute of util:properties [SPR-10614]","**[Edward Ost](https://jira.spring.io/secure/ViewProfile.jspa?name=edward.ost)** opened **[SPR-10614](https://jira.spring.io/browse/SPR-10614?redirect=false)** and commented  util:properties is the easiest way of creating property resources, but it needs the flexibility of the ignoreResourceNotFound in some cases.  This can happen when composing property sources into a PropertiesFactoryBean.  The locations property of the PropertiesFactoryBean is fine if all properties are specified as file or classpath resources.  But it does not support properties defined in xml.  The propertiesArray attribute of PropertiesFactoryBean gets around this, and it would be nice to be able to mix util:properties for classpath and file resources with ref elements for other xml property beans.  But the util:properties don't allow optional resources.  ---  **Affects:** 3.0.7  **Issue Links:** - #16999 Regression:  location attribute does not resolve parameters in #{param} format  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/662d8aa9f177fa8bcf941ea9a41762e7cd536961","closed","type: enhancement,","spring-projects-issues","2013-06-01T09:41:59Z","2019-01-11T22:26:29Z"
"","14885","Add ability to inject dependencies into JUnit 4 @Rule and @ClassRule instances [SPR-10252]","**[Eduards Sizovs](https://jira.spring.io/secure/ViewProfile.jspa?name=eduardsi)** opened **[SPR-10252](https://jira.spring.io/browse/SPR-10252?redirect=false)** and commented  In some situations it's convenient to inject dependencies into JUnit's `@Rule` and `@ClassRule` managed class' instances. Currently it can be achieved by extending `DependencyInjectionTestExecutionListener` (DITEL) with additional logic that looks for `@Rule` and `@ClassRule` fields and autowires them the same way as test instance is autowired. Even given the opportunity to extend class, I consider this functionality common enough.  ---  **Affects:** 3.2.1  **Issue Links:** - #20481 Autowired Rules do not work with SpringClassRule or SpringMethodRule  5 votes, 6 watchers","open","type: enhancement,","spring-projects-issues","2013-02-02T04:38:36Z","2019-11-08T03:25:29Z"
"","14860","Spring Java config should not break if all @Bean methods are in a superclass. [SPR-10227]","**[Ed Brannin](https://jira.spring.io/secure/ViewProfile.jspa?name=edbrannin)** opened **[SPR-10227](https://jira.spring.io/browse/SPR-10227?redirect=false)** and commented  ### Summary  When using java-config, if I set my config location as a subclass of a `@Configuration` class, Spring will fail to read the configuration from that class unless it also has a `@Bean-annotated` method.  ### Why would I even do that?  My abstract superclass has a `getDatasource()` method and 3 abstract String methods: `getURL()`, `getUsername()`, `getPassword()`.  There may be a better way to handle value-only differences between Java-config environments (like reading a properties-file?  Is there an annotation for that?), but I haven't noticed it yet. :)  ### Test Class  This requires jUnit & spring-context.  Only the `beanlessTest()` method fails.  ```java package issue.springframework;  import org.junit.Test; import org.springframework.context.annotation.AnnotationConfigApplicationContext; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.context.support.AbstractApplicationContext;  import static org.junit.Assert.*;  public class BeanlessSubclassDemo {     @Configuration     public static class ParentConfig {         @Bean(name=""foo"")         public String getFoo() {             return ""foo"";         }     }          public static class BeanlessSubclass extends ParentConfig {}          public static class BeanySubclass extends ParentConfig {         @Bean(name=""bar"")         public String getBar() {             return ""bar"";         }     }          @Test     public void parentTest() {         AbstractApplicationContext parentContext = new AnnotationConfigApplicationContext(ParentConfig.class);         assertEquals(""foo"", parentContext.getBean(""foo""));     }          @Test     public void beanlessTest() {         AbstractApplicationContext beanlessContext = new AnnotationConfigApplicationContext(BeanlessSubclass.class);         assertEquals(""foo"", beanlessContext.getBean(""foo""));     }          @Test     public void beanyTest() {         AbstractApplicationContext beanyContext = new AnnotationConfigApplicationContext(BeanySubclass.class);         assertEquals(""foo"", beanyContext.getBean(""foo""));         assertEquals(""bar"", beanyContext.getBean(""bar""));     }  } ```    ---  **Affects:** 3.2.1","closed","in: core,","spring-projects-issues","2013-01-28T12:52:07Z","2019-01-12T16:24:27Z"
"","15526","Provide default-autowire like functionality for @Configuration [SPR-10898]","**[Eberhard Wolff](https://jira.spring.io/secure/ViewProfile.jspa?name=eberhardwolff)** opened **[SPR-10898](https://jira.spring.io/browse/SPR-10898?redirect=false)** and commented  In a beans element default autowiring by name or type can be enabled. It would be great if that was possible with `@Configuration` classes, too. Also constructor might make sense for `@ComponentScan`.  ---  **Affects:** 4.0 M3  **Issue Links:** - #16883 Make `@Autowired` optional on a single constructor of a class decorated with `@Component`","closed","type: enhancement,","spring-projects-issues","2013-09-06T02:39:18Z","2019-01-13T06:58:16Z"
"","15460","After Returning Advice is executed even if the return type doesn't match [SPR-10834]","**[Eberhard Wolff](https://jira.spring.io/secure/ViewProfile.jspa?name=eberhardwolff)** opened **[SPR-10834](https://jira.spring.io/browse/SPR-10834?redirect=false)** and commented  After Returning advices should only be executed if the return type of the method matches the parameter type of the advice. In the example attached the advice  `@AfterReturning`(pointcut = ""execution(* *(..))"", returning = ""string"") public void logResult(String string) { }  is executed for the method public void doSomething() {} even though the return type is void and not String. The variable string is bound to null then.  I have tested against 3.2.4 and 3.1.4 - same result. AspectJ behaves as expected i.e. it doesn't have this bug and the advice is not executed.   ---  **Affects:** 3.1.4, 3.2.4  **Attachments:** - [AfterReturningBug Kopie.zip](https://jira.spring.io/secure/attachment/21337/AfterReturningBug+Kopie.zip) (_14.99 kB_) - [aspectj-base-test.zip](https://jira.spring.io/secure/attachment/21357/aspectj-base-test.zip) (_7.44 kB_) - [spring-base-test.zip](https://jira.spring.io/secure/attachment/21356/spring-base-test.zip) (_10.65 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d3f063d0f9c52f928ee9b34f49fc5f2899b18912  0 votes, 5 watchers","closed","in: core,","spring-projects-issues","2013-08-13T19:54:34Z","2013-10-31T12:27:58Z"
"","14878","SpelEvaluationException: Cannot evaluate field/property defined in parent/superclass/grandparent [SPR-10245]","**[East](https://jira.spring.io/secure/ViewProfile.jspa?name=eastmaels)** opened **[SPR-10245](https://jira.spring.io/browse/SPR-10245?redirect=false)** and commented  Cannot detect fields defined in superclass.  Class hierarchy is as follows:  * InspectionEntity   * Collateral   *** RealEstateCollateral   **** VacantLotCollateral  `inspEntityId` is defined in `InspectionEntity`.  After setting the `collateral` attribute in my controller:  ```     ...     public String showTechnicalDescription(Model model) {        ...        Collateral collateral = new VacantLotCollateral();        collateral.setInspEntityId(1);         model.addAttribute(""collateral"", collateral);        ...     } ```  When I use the ff. in my view:  ```  ```  It throws the ff. exception:  ``` Caused by: org.springframework.expression.spel.SpelEvaluationException: EL1008E:(pos 0): Field or property 'inspEntityId' cannot be found on object of type 'common.model.appraisal.real_estate.VacantLotCollateral' ```  Project settings: - Spring version: 3.1.1.RELEASE - Thymeleaf version: 2.0.15    ---  **Affects:** 3.0.7","closed","in: core,","spring-projects-issues","2013-01-31T00:33:37Z","2019-01-12T05:27:26Z"
"","15350","Java configuration @EnableJpaRepositories,DefaultListableBeanFactory - allowBeanDefinitionOverriding = false context not started [SPR-10722]","**[Dávid Ignjić](https://jira.spring.io/secure/ViewProfile.jspa?name=igieon)** opened **[SPR-10722](https://jira.spring.io/browse/SPR-10722?redirect=false)** and commented  COnfiguration: - Annotation based spring configuration not allow override bean definition - using spring-data-jpa annotation `@EnableJpaRepositories` on Configuration  With this configuration spring wants register two times same spring-data-jpa repository.  Probably where is the problem: `@Import` annotation on `@EnableJpaRepositories` is found two times in org.springframework.context.annotation.ConfigurationClassParser.collectImports(AnnotationMetadata, Set\, Set\) and executed two time.  Workaround: Simply enable Jpa repository in XML config file or allow bean overriding.   ---  **Affects:** 3.2.3","closed","status: bulk-closed,","spring-projects-issues","2013-07-04T16:22:12Z","2019-01-12T00:22:55Z"
"","15225","Debugging difficulties in AspectJ LTW @Transactional methods [SPR-10596]","**[Dumitru Boldureanu](https://jira.spring.io/secure/ViewProfile.jspa?name=dboldureanu)** opened **[SPR-10596](https://jira.spring.io/browse/SPR-10596?redirect=false)** and commented  Since 3.2.2, debugging `@Transactional` methods weaved with AspectJ is complicated (some might say ""not possible"").  In version 3.2.2 AbstractTransactionAspect.aj was modified to use `@around` advice instead of the combination of `@before` and `@after`.  After this change I cannot ""Step Into"" a `@Transactional` methods and then inside it, ""Step Over"" line by line. In Netbeans - this is the main IDE I use, it is possible to ""Step Into"" the method, but it is not possible to ""Step Over"" line by line inside the method. In Eclipse, if you to add a break point inside the method it is possible to step by step inside it, but for both, it is a problem, when the method ends, instead of getting back to the code that called this method, the debugger takes me to internal AOP/AspectJ classes.  I'm tried different versions of AspectJ, 1.7.0, 1.7.1 and 1.7.2, for all of them the result is the same.  Added a test project: https://github.com/dboldureanu/spring-framework-issues/tree/master/SPR-10596  1. Put a break point at line 28, XmlConfigTests.java 2. Start XmlConfigTests in debug mode. 3. Step into saveTestData method and there try go line by line.    Then try the same with an older version of Spring for example 3.2.1.    ---  **Affects:** 3.2.2, 3.2.3, 4.0 M1  **Reference URL:** http://forum.springsource.org/showthread.php?137952-Debugging-AspectJ-LTW-classes-methods-issues-with-with-Spring-3-2-2  2 votes, 7 watchers","closed","status: bulk-closed,","spring-projects-issues","2013-05-28T01:45:42Z","2019-01-12T03:42:08Z"
"","14742","JMSTemplate.receive() and receiveSelected() don't use ""receiveTimeout"" property if in a transaction [SPR-10109]","**[Dominique Loiseau](https://jira.spring.io/secure/ViewProfile.jspa?name=domi7777)** opened **[SPR-10109](https://jira.spring.io/browse/SPR-10109?redirect=false)** and commented  Hi,  I've been struggling with this (IMO) strange behavior of JMSTemplate :  protected Message doReceive(Session session, MessageConsumer consumer) throws JMSException { try { // Use transaction timeout (if available). long timeout = getReceiveTimeout(); JmsResourceHolder resourceHolder = (JmsResourceHolder) TransactionSynchronizationManager.getResource(getConnectionFactory()); if (resourceHolder != null && resourceHolder.hasTimeout()) {      			timeout = resourceHolder.getTimeToLiveInMillis();          		}  We can see that ""getReceiveTimeout()"" is used to retrieve the ""receiveTimeout"" configurable property, but then this is not used if resourceHolder exists and has a timeout (which seems to be transaction timeout minus elapsed time in transaction).  I understand that the receiveTimeout should not exceed transaction timeout, but then isn't that better to have :  timeout = Math.min(timeout, resourceHolder.getTimeToLiveInMillis());  instead of :  timeout = resourceHolder.getTimeToLiveInMillis();  ?   ---  **Affects:** 2.5.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/39fe8eebb1b7b60376b92cca896438af84d4e72f, https://github.com/spring-projects/spring-framework/commit/d3da2edf18f4025bc68cce5b23de8fbd7c2f6474  **Backported to:** [3.1.4](https://github.com/spring-projects/spring-framework/milestone/83?closed=1)","closed","type: bug,","spring-projects-issues","2012-12-19T03:15:14Z","2012-12-19T12:41:35Z"
"","15436","Make it possible to configure serialization inclusion for Jackson ObjectMapper [SPR-10810]","**[Dmitry Katsubo](https://jira.spring.io/secure/ViewProfile.jspa?name=dma_k)** opened **[SPR-10810](https://jira.spring.io/browse/SPR-10810?redirect=false)** and commented  Serialization inclusion configures whether to skip `null` / empty properties. Currently `Jackson2ObjectMapperFactoryBean` has no methods to support this tuning. This feature is continuation of #14373.  ---  **Affects:** 3.2.2","closed","type: enhancement,","spring-projects-issues","2013-08-06T07:09:21Z","2019-01-11T22:05:12Z"
"","15096","MarshallingHttpMessageConverter#supports() is not symmetric [SPR-10463]","**[Dmitry Katsubo](https://jira.spring.io/secure/ViewProfile.jspa?name=dma_k)** opened **[SPR-10463](https://jira.spring.io/browse/SPR-10463?redirect=false)** and commented  `MarshallingHttpMessageConverter` JavaDoc reads that both marshaller and unmarshaller should be set. However this requirement can become weaker, and the problem is `supports()` method implementation that checks that given class can be deserialised. Generally speaking marshaller/unmarshaller may support different sets of classes (perhaps having a lot in common). Assuming that `supports()` should at least act like this:  ``` public boolean supports(Class clazz) { 	if (marshaller != null && marshaller.supports(clazz)) { 		return true; 	} 	return unmarshaller.supports(clazz); } ```  or more correct would be to overwrite `canRead()` / `canWrite()` and delegate `supports()` to `unmarshaller` / `marshaller` correspondingly.   ---  **Affects:** 3.2.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b232dc9d2bc12e66c49587b22cb16f9c109bea3b","closed","type: enhancement,","spring-projects-issues","2013-04-15T06:43:03Z","2013-08-29T16:20:45Z"
"","15044","Return type prediction for generic factory method fails if type conversion of method arguments is necessary [SPR-10411]","**[Dmitry Katsubo](https://jira.spring.io/secure/ViewProfile.jspa?name=dma_k)** opened **[SPR-10411](https://jira.spring.io/browse/SPR-10411?redirect=false)** and commented  #### Overview  The following scenario does not work.  ###### XML  ```xml      ```  ###### Java  ``` @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(""classpath:/my-context.xml"") public class MyTest {  	@Autowired 	private TransactionOperations		transactionOperations;  	@Autowired 	private IMocksControl			mocksControl; ... } ```  ###### Trace  ``` Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: private org.XXX.transactionOperations; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [org.springframework.transaction.support.TransactionOperations] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)} 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:514) 	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:87) 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:285) 	... 41 more Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [org.springframework.transaction.support.TransactionOperations] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)} 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoSuchBeanDefinitionException(DefaultListableBeanFactory.java:986) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:856) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:768) 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:486) 	... 43 more ```  ---  #### Analysis  See [comments below](https://jira.springsource.org/browse/SPR-10411?focusedCommentId=91040&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-91040).  ---  **Affects:** 3.2.2  **Attachments:** - [spr-10411.zip](https://jira.spring.io/secure/attachment/21245/spr-10411.zip) (_4.88 kB_)  **Issue Links:** - #14127 Infer return type of parameterized static factory methods - #15604 Migrate GenericTypeResolver.resolveReturnTypeForGenericMethod to ResolvableType - #13769 Introduce FactoryBean to create mock beans with EasyMock (_**""supersedes""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8fdc7d4e8f730b37544ab3560c0f43716ac7a379, https://github.com/spring-projects/spring-framework/commit/b9135788b9f7cf28e4565d4f1c4d198ea4a52f5c, https://github.com/spring-projects/spring-framework/commit/b305f0005b2836faf49da234015cc1f9f83ffb85, https://github.com/spring-projects/spring-framework/commit/e86e182d5d9dd871533be82a6b19eb349aa60aa1, https://github.com/spring-projects/spring-framework/commit/8b1927f3ec0245130fe64719beae55c4e349c70d","closed","in: core,","spring-projects-issues","2013-03-24T12:39:23Z","2019-01-13T07:00:35Z"
"","14925","Share locale independent properties among several ResourceBundleMessageSources [SPR-10291]","**[Dmitry Katsubo](https://jira.spring.io/secure/ViewProfile.jspa?name=dma_k)** opened **[SPR-10291](https://jira.spring.io/browse/SPR-10291?redirect=false)** and commented  In the case being described there is a need to ""extend"" the existing locale-dependant resource bundles with few non locale dependant properties e.g. defined in Spring context itself.  For example merge these resource bundles  ```                ```  with these properties  ```      noreply@company.org     {0}@company.org  ```    ---  **Affects:** 3.2.1  **Reference URL:** http://stackoverflow.com/questions/12589043/how-to-share-locale-independent-properties-among-several-resourcebundles/  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2302b9b48b952f254ca96df71855b716bdbfddfd","closed","type: enhancement,","spring-projects-issues","2013-02-13T12:13:43Z","2013-03-06T01:48:47Z"
"","14893","Resolve SQL errorCode from underlying SQLException [SPR-10260]","**[Dmitry Katsubo](https://jira.spring.io/secure/ViewProfile.jspa?name=dma_k)** opened **[SPR-10260](https://jira.spring.io/browse/SPR-10260?redirect=false)** and commented  In case when `java.sql.DataTruncation` wraps `java.sql.SQLException` the error code is 0. However underlying `SQLException` holds the error code value (""8152"" in my example).  Current `SQLErrorCodeSQLExceptionTranslator#doTranslate()` implementation does not allow to handle this case for `sqlErrorCodes.customTranslations`.  1. If `sqlErrorCodes.useSqlStateForTranslation` is true, then custom translation bound to SQL state (""22001"" in my example) will match, however other translations from `sql-error-codes.xml` will not work. 2. If `sqlErrorCodes.useSqlStateForTranslation` is true, then custom translation will not match, however default translations will work.  It's not possible to combine these two policies. The solution could be to loop through exception hierarchy to find first non-zero error code (code spot is highlighted in my example).  Intended XML configuration:  ```  	 		 	 	 		 			 				 				 			 		 	    ```  Workarounds:  - Extend `SQLErrorCodeSQLExceptionTranslator` and override `customTranslate()`. - Define `sqlErrorCodes.customSqlExceptionTranslator()`.    ---  **Affects:** 3.1.2  **Attachments:** - [example.png](https://jira.spring.io/secure/attachment/20931/example.png) (_81.06 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8a4ce142c42375486542054b00c82331fecac311","closed","type: enhancement,","spring-projects-issues","2013-02-05T10:34:03Z","2013-02-08T02:59:25Z"
"","15146","URI template with wildcards and variable gives invalid PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE request attribute value [SPR-10515]","**[Dmitriy Kuznetsov](https://jira.spring.io/secure/ViewProfile.jspa?name=kdv)** opened **[SPR-10515](https://jira.spring.io/browse/SPR-10515?redirect=false)** and commented  In context xml:  >   > Try to access URL http://localhost:8080/myContext/i18n/qq/www/eeeee/rrrrr/tttt/Common.js  > the resulting value of request attribute (rendered in JSP by ${requestScope['org.springframework.web.servlet.HandlerMapping.pathWithinHandlerMapping']}) is 'qq/eeeee/rrrrr/tttt/Common.js', so the '/www' part is lost.  ---  **Affects:** 3.2 GA  **Issue Links:** - #21434 AntPathMatcher.extractPathWithinPattern() seems broken returns incorrect result  0 votes, 5 watchers","closed","type: bug,","spring-projects-issues","2013-05-03T16:06:58Z","2019-01-11T22:18:03Z"
"","14734","ContentNegotiationManagerFactoryBean does not provide default value for ""parameterName"" as stated in doc [SPR-10101]","**[Dimitri De Franciscis](https://jira.spring.io/secure/ViewProfile.jspa?name=megadix)** opened **[SPR-10101](https://jira.spring.io/browse/SPR-10101?redirect=false)** and commented  In **Spring 3.0**, _ContentNegotiatingViewResolver_ had a _parameterName_ property with default value _""format""_. Some functionality of this class in **Spring 3.2** has been refactored to _ContentNegotiationManager_ / _ContentNegotiationManagerFactoryBean_, but _parameterName_ property has not been moved correctly: * it has **no default value**; * documentation has been copied from the old ContentNegotiatingViewResolver class, i.e.: ??The default parameter name is ""format""??  I think it would be enough just to change _ContentNegotiationManagerFactoryBean.parameterName_ declaration:  Current: `@private` String parameterName;@  New (taken from old ContentNegotiatingViewResolver): `@private` String parameterName = ""format"";@  Optional step: define a constant DEFAULT_FORMAT_PARAMETER_NAME = ""format""  ---  **Affects:** 3.2 GA  **Issue Links:** - #14772 error with tomcat 6 and spring 3.2","closed","type: enhancement,","spring-projects-issues","2012-12-16T03:49:25Z","2019-01-11T21:26:31Z"
"","14731","Cannot inject ServletContext into MockMultipartHttpServletRequest [SPR-10098]","**[Dimitri De Franciscis](https://jira.spring.io/secure/ViewProfile.jspa?name=megadix)** opened **[SPR-10098](https://jira.spring.io/browse/SPR-10098?redirect=false)** and commented  #### Status Quo  The `servletContext` field in `MockHttpServletRequest` is `private` but can be injected via public constructors. In other words, there's no `setServletContext()` method. This is useful, for example, if you want to inject a `WebApplicationContext` and/or a `DispatcherServlet`.  `MockMultipartHttpServletRequest`, unfortunately, hides this possibility because it has only an empty constructor.  ---  #### Additional Issues with Mocks in Spring MVC Test  This problem is reflected also in Servlet 3.0 classes in the Spring MVC Test framework -- for example, `Servlet3MockMultipartHttpServletRequest`.  Both `MockHttpServletRequestBuilder` and `MockMultipartHttpServletRequestBuilder` have a `createServlet3Request()` method, but **only `MockHttpServletRequestBuilder` passes the `servletContext` parameter to the constructor**.  ``` Constructor constructor = clazz.getConstructor(ServletContext.class); return (MockHttpServletRequest) BeanUtils.instantiateClass(constructor, servletContext); ```  ``` Constructor constructor = clazz.getDeclaredConstructor(); return (MockMultipartHttpServletRequest) BeanUtils.instantiateClass(constructor); ```  ---  #### Deliverables  * (/) Introduce a `MockMultipartHttpServletRequest` constructor that calls `MockHttpServletRequest(ServletContext servletContext)`.   *- This is what has been implemented. * (x) Introduce a `setServletContext(ServletContext)` method in `MockHttpServletRequest`.   *- The `servletContext` field is `final` and should remain immutable. Thus it is not possible to introduce a setter method.  ---  **Affects:** 3.2 GA","closed","type: enhancement,","spring-projects-issues","2012-12-15T11:22:19Z","2019-01-13T21:04:48Z"
"","15264","Invocation of @Async service fails  [SPR-10636]","**[Dimitar Makariev](https://jira.spring.io/secure/ViewProfile.jspa?name=dmakariev)** opened **[SPR-10636](https://jira.spring.io/browse/SPR-10636?redirect=false)** and commented  The described feature works on 3.2.1.RELEASE, fails on 3.2.2.RELEASE and 3.2.3.RELEASE.  Trying to change object instance passed to service defined as `@Async` :  ```java @Service public class PopulateService {      private final List persons;     private final AsyncService asyncService;      @Autowired     public PopulateService(AsyncService asyncService) {         persons = new ArrayList();         this.asyncService = asyncService;     }      public void populatePersons(int numberOfPersons) {         asyncService.populatePersons(persons, numberOfPersons);     }      public List getPersons() {         return persons;     } }  @Service public class AsyncService {      @Async     public void populatePersons(List persons, int numberOfPersons) {         for (int i = 0; i < numberOfPersons; i++) {             persons.add(new Person(""first "" + i, ""last "" + i));         }     } }  ```  ---  **Affects:** 3.2.2, 3.2.3  **Attachments:** - [testcase.zip](https://jira.spring.io/secure/attachment/21232/testcase.zip) (_7.10 kB_)  **Issue Links:** - #15343 method demarcated with `@Async` isn't executed when precompiled  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3562cd759b6a14981b59c06a7699781b2b570561, https://github.com/spring-projects/spring-framework/commit/b6c54c363780d83e5f164d625d236742a3e0a196","closed","in: core,","spring-projects-issues","2013-06-07T18:51:52Z","2019-01-13T06:59:28Z"
"","15121","Fix @Bean meta-annotation detection when using ASM [SPR-10488]","**[Didier Villevalois](https://jira.spring.io/secure/ViewProfile.jspa?name=ptitjes)** opened **[SPR-10488](https://jira.spring.io/browse/SPR-10488?redirect=false)** and commented  When using `@Bean` as meta-annotation, Configuration class enhancement correctly takes the meta-annotated methods, but ConfigurationClassParser does not correctly registers `@Bean` methods.  This comes from MethodMetadataReadingVisitor.visitAnnotation() :  ``` @Override public AnnotationVisitor visitAnnotation(final String desc, boolean visible) { 	String className = Type.getType(desc).getClassName(); 	methodMetadataMap.add(className, this); 	return new AnnotationAttributesReadingVisitor(className, this.attributeMap, null, this.classLoader); } ```  Here a null metaAnnotationMap argument is passed to AnnotationAttributesReadingvisitor. I guess more things should be added to methodMetadataMap.  As a result, in ConfigurationClassParser:247 :  ``` // process individual @Bean methods Set beanMethods = metadata.getAnnotatedMethods(Bean.class.getName()); for (MethodMetadata methodMetadata : beanMethods) { 	configClass.addBeanMethod(new BeanMethod(methodMetadata, configClass)); } ```  getAnnotatedMethods() does not return methods meta-annotated with `@Bean`.  Do you need a test case ? Or is this easy enough to reproduce ?   ---  **Affects:** 3.2.2  **Backported to:** [3.2.7](https://github.com/spring-projects/spring-framework/milestone/95?closed=1)","closed","in: core,","spring-projects-issues","2013-04-25T03:26:44Z","2014-01-28T13:07:09Z"
"","15317","tag in version 2.5 and higher doesn't work for refreshable Spring MVC endpoints [SPR-10689]","**[Dhaval Powar](https://jira.spring.io/secure/ViewProfile.jspa?name=dpp3651)** opened **[SPR-10689](https://jira.spring.io/browse/SPR-10689?redirect=false)** and commented  THIS BUG LIES IN SPRING 2.5 AND HIGHER  ---  Dynamic language support is added to Spring by using the `` namespace. For eg. for a groovy script, the following xml should handle dynamic language support in Spring.  ```          ```  How this functions under the hood is:  1. The `` instantiates the `LangNamespaceHandler` class which parses the xml and identifies the type of dynamic language ie. groovy, JRuby or BSH.  2. `LangNamespaceHandler` then calls the `registerScriptBeanDefinitionParser` method which in turn, makes a call to `registerBeanDefinitionParser` to register the bean. The call to this method instantiates a `ScriptBeanDefinitionParser` object which does the following:  a. Resolve the script source b. Set up infrastructure c. Create script factory bean definition d. and many more other specific functionalities....  In step (b.), to setup the architecture, the `LangNamespaceUtils` class sets up the `scriptFactoryPostProcessor` object. This object handles `ScriptFactory` definitions, replacing each factory with the actual scripted Java object generated by it.  The bug lies in the `LangNamespaceUtils` class due to an invalid variable initialization.  This class contains a variable name  ```java SCRIPT_FACTORY_POST_PROCESSOR_BEAN_NAME=""org.springframework.scripting.config.ScriptFactoryPostProcessor"" ```  The value of this variable is invalid because the full qualified name of the `ScriptFactoryPostProcessor` class is `org.springframework.scripting.support.ScriptFactoryPostProcessor`.  This means that `ScriptFactoryPostProcessor` lies in the package `org.springframework.scripting.support` and NOT `org.springframework.scripting.config`. Due to this the `ScriptFactoryPostProcessor` bean does not get instantiated and the dynamic language support does not work.  However, this issue did not exist in Spring 2.0 & earlier since the `` xml namespace and tag were handled in a different way. Please fix the bug.  ---  **Affects:** 3.1.2  **Reference URL:** http://grepcode.com/file/repo1.maven.org/maven2/org.springframework/spring-context/2.5/org/springframework/scripting/config/LangNamespaceUtils.java?av=f  **Attachments:** - [LangNamespaceUtils.java](https://jira.spring.io/secure/attachment/21260/LangNamespaceUtils.java) (_2.25 kB_) - [scripting.zip](https://jira.spring.io/secure/attachment/21259/scripting.zip) (_34.00 kB_)  **Issue Links:** - #10935 Annotated Groovy controllers don't work properly  3 votes, 5 watchers","closed","status: bulk-closed,","spring-projects-issues","2013-06-25T12:26:18Z","2019-01-13T21:03:14Z"
"","15147","Default model values are always copied into the redirect model when RedirectAttributes are used [SPR-10516]","**[Dennis Homann](https://jira.spring.io/secure/ViewProfile.jspa?name=dhomann)** opened **[SPR-10516](https://jira.spring.io/browse/SPR-10516?redirect=false)** and commented  From comments [Rossen's comment](https://jira.springsource.org/browse/SPR-9418?focusedCommentId=78946&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-78946) on #14054 and [his comment](https://jira.springsource.org/browse/SPR-6796?focusedCommentId=70508&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-70508) on #11462, it seems that the following design is intended: * to allow fine control over query parameters added automatically during a redirect, handlers should accept an argument of type `RedirectAttributes` * `RedirectAttributes` define a redirect model, which is separate from the default model (part of the `ModelAndView` returned by the handler). Values in the redirect model are intended as query parameters and will therefore be converted to Strings, values in the default model are intended for rendering and may be ""complex"" i.e. not string-convertible. * it is recommended to set `RequestMappingHandlerAdapter#ignoreDefaultModelOnRedirect=true` to prevent use of the default model for redirects (if no `RedirectAttributes` were used by the handler). This is the default.  Issues: * Unfortunately, in 3.1.2, the default model is copied into the `ModelAndViewContainer` model in `ModelAndViewMethodReturnValueHandler:76`, and when the handler uses `RedirectAttributes` this will result in merging the default model into the redirect model.   * This violate the separation of the two (issue #1) models   * This triggers conversion of all default model values to Strings which may cause conversion exceptions, depending on the available converters (issue #2). * The redirect mechanism provided by the framework should play well with other parts of the framework, in particular `ViewResolves` and `RedirectViews` or custom redirecting `SmartViews`:   * When a handler returns a `ModelAndView` with a `RedirectView` or a `SmartView` object (with `isRedirect==true`), it should be presented the redirect model for ""rendering"" (or default to the default model, if the handler does not use `RedirectAttributes` AND `ignoreDefaultModelOnRedirect=false`. Right now, it is presented the default model (with values converted to Strings) merged with the redirect model (issues #3).   * When a handler returns a view name, it will be resolved by a `ViewResolver`, which receives a model to make its decision. One could argue what's more useful here: the default model, a potentially existing redirect model, or both. In any case, if there is a default model, the view resolver must have access to the original model values added by the handler. Like the view before, it is presented the default model (with values converted to Strings) merged with the redirect model (issues #4). I have a custom view resolver which is supposed to resolve a view based on a complex model value, which is not possible right now, if `RedirectAttributes` was used by the handler.   * If a view resolver returns a `RedirectView` (or redirecting `SmartView`), it should again receive the redirect model.  ---  **Affects:** 3.2.1  2 votes, 4 watchers","closed","status: bulk-closed,","spring-projects-issues","2013-05-03T16:16:56Z","2019-01-12T03:43:00Z"
"","14856","Tiles3 (v. 3.0.1). Unable to use property useMutableTilesContainer without an error [SPR-10223]","**[Denis Chernyshov](https://jira.spring.io/secure/ViewProfile.jspa?name=danblack)** opened **[SPR-10223](https://jira.spring.io/browse/SPR-10223?redirect=false)** and commented  I tried to use a mutable tiles container using the configurer's property useMutableTilesContainer but failed.  Here is my bean's configuration  ```xml                                     /WEB-INF/tiles/general.xml                                         ```  Here is the code were I've got NPE  ```java private Map getDefinitions(            Request request) {        return (Map) request.getContext(""request"")                .get(definitionsAttributeName);    } ```  request.getContext(""request"") returns null ""request"" context  Here is the stacktrace  ``` [qtp1313694788-29] WARN org.eclipse.jetty.servlet.ServletHandler - /registration java.lang.NullPointerException 	at org.apache.tiles.impl.mgmt.CachingTilesContainer.getDefinitions(CachingTilesContainer.java:183) 	at org.apache.tiles.impl.mgmt.CachingTilesContainer.getCustomDefinition(CachingTilesContainer.java:236) 	at org.apache.tiles.impl.mgmt.CachingTilesContainer.isValidDefinition(CachingTilesContainer.java:97) 	at org.apache.tiles.renderer.DefinitionRenderer.isRenderable(DefinitionRenderer.java:64) 	at org.springframework.web.servlet.view.tiles3.TilesView.checkResource(TilesView.java:104) 	at org.springframework.web.servlet.view.UrlBasedViewResolver.loadView(UrlBasedViewResolver.java:438) 	at org.springframework.web.servlet.view.AbstractCachingViewResolver.createView(AbstractCachingViewResolver.java:212) 	at org.springframework.web.servlet.view.UrlBasedViewResolver.createView(UrlBasedViewResolver.java:401) 	at org.springframework.web.servlet.view.AbstractCachingViewResolver.resolveViewName(AbstractCachingViewResolver.java:129) 	at org.springframework.web.servlet.DispatcherServlet.resolveViewName(DispatcherServlet.java:1239) 	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1188) 	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:992) 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:939) 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:856) 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:920) 	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:816) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:735) 	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:801) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:848) 	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:669) 	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1336) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) 	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:118) 	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:84) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:113) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:103) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:113) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:54) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:45) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:183) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:183) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:105) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:125) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:87) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:192) 	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:160) 	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:346) 	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:259) 	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1307) 	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:453) 	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:137) 	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:560) 	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:231) 	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1072) 	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:382) 	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:193) 	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1006) 	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:135) 	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116) 	at org.eclipse.jetty.server.Server.handle(Server.java:365) 	at org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:485) 	at org.eclipse.jetty.server.AbstractHttpConnection.headerComplete(AbstractHttpConnection.java:926) 	at org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.headerComplete(AbstractHttpConnection.java:988) 	at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:635) 	at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:235) 	at org.eclipse.jetty.server.AsyncHttpConnection.handle(AsyncHttpConnection.java:82) 	at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:628) 	at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:52) 	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:608) 	at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:543) 	at java.lang.Thread.run(Thread.java:722) ```    ---  **Affects:** 3.2.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e551f0408d83ca55a5e3d431ad40976306590606","closed","type: bug,","spring-projects-issues","2013-01-28T00:02:33Z","2013-02-12T15:42:59Z"
"","15391","Add JAR restriction to component-scan [SPR-10765]","**[Denis Carniel](https://jira.spring.io/secure/ViewProfile.jspa?name=denis.carniel@loginpeople.com)** opened **[SPR-10765](https://jira.spring.io/browse/SPR-10765?redirect=false)** and commented  Using component-scan in a project that has only a limited number of beans to instantiate (~100) but uses a large number of third-party JARs (Spring, hibernate, infinispan...) results in a component-scan phase at start-up that takes a long time (around one minute on fast hardware).  Specifiying a base-package value helps but doesn't improve much as there are still many JARs to open and check if the package exists.  It would be a nice addition if the component-scan could be restricted to JARs with a certain name (or name pattern), allowing the developer to specify where to look for.  This is certainly not a major issue for web-based applications but as we share code with some batches it starts to become a real pain (1 minutes startup for a few ms of actual work done).  Looking on the web only brought me the solution to generate a static configuration file at build time from annotations and remove component-scan, but that doesn't sound so nice.  Of course I might have overlooked a better option, in which case don't hesitate to point it out.  Thanks in advance for your help. Regards, Denis   ---  **Affects:** 3.2.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/236ec1940bacced88c935b7b800529c594549e1d  1 votes, 3 watchers","closed","status: bulk-closed,","spring-projects-issues","2013-07-22T07:45:48Z","2019-01-12T00:22:27Z"
"","15005","mvc:message-converters cause different behavior of data mapping [SPR-10372]","**[deng hui](https://jira.spring.io/secure/ViewProfile.jspa?name=truetime)** opened **[SPR-10372](https://jira.spring.io/browse/SPR-10372?redirect=false)** and commented  when configuration is `` these 2 scenarios work well:  scenario 1:  ``` $.ajax({ url :""a-valid-address"",dataType : 'json').done(function(data){ //data got here is a object after eval by jquery }); ```  scenario 2:  ``` $.ajax({type: ""post"",url: ""a-valid-address"",contentType: ""application/json"", data: JSON.stringify(query)) ```  ```java @RequestMapping(value = ""/query"", method = RequestMethod.POST) @ResponseBody public List query(@RequestBody String body) {} ```  but if configuration change to:  ```xml                                                                                              ```  For scenario 1, data retrieved will no be an object but a json string before `eval()` and for scenario 2, I get a message:  ``` ""The request sent by the client was syntactically incorrect ()."" by exception of com.fasterxml.jackson.databind.JsonMappingException ```  Some other observations after custom `MappingJackson2HttpMessageConverter` configured:  1) originally, controller is not sensitive with `$.ajax()` call specified `dataType(contentType)` or not, after configuration, `dataType` or `contentType` is required. which means message-converter for String type is impacted, the order of going through converters seems changed.  2) originally, converter will be applied after check controller parameter need it, but after configuration, converter is applied according to `contentType` always despite controller parameter require or not. for example scenario 2 above actually read input by `@RequestBody`, jason conversion is not expected.    ---  **Affects:** 3.2.1  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2013-03-13T06:40:02Z","2015-09-30T09:31:22Z"
"","14943","AspectJ advisor always positioned behind an ""old school"" advisor [SPR-10309]","**[Dejan Predovic](https://jira.spring.io/secure/ViewProfile.jspa?name=dpredovic)** opened **[SPR-10309](https://jira.spring.io/browse/SPR-10309?redirect=false)** and commented  It seems it's impossible to create an `@Aspect` with a priority higher then an ""old school"" interceptor. It used to work with 3.1.x but broke in 3.2.0.   ---  **Affects:** 3.2 GA, 3.2.1, 3.2.2","closed","in: core,","spring-projects-issues","2013-02-16T13:18:06Z","2013-03-13T08:26:42Z"
"","14908","@Async executor ignored if declared on implementation when using JDK proxies [SPR-10274]","**[Dejan Predovic](https://jira.spring.io/secure/ViewProfile.jspa?name=dpredovic)** opened **[SPR-10274](https://jira.spring.io/browse/SPR-10274?redirect=false)** and commented  If `@Async`(""executor"") is declared on an implementation method and jdk proxies are used, the getExecutorQualifier tries to find the annotation on the interface method and (as it's not annotated) failes and falls back to the default executor. I guess getExecutorQualifier should take targetClass method as a parameter and not the methodInvocation method.  ---  **Affects:** 3.2.1  **Issue Links:** - #14910 `@Async` with Executor qualification does not run  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/89c3d03083cff186ad34979d61e88c74ae33635a","closed","in: core,","spring-projects-issues","2013-02-08T01:11:20Z","2019-01-13T07:01:10Z"
"","15090","Spring MVC Test: ViewResultMatchers does not respect ViewResolvers [SPR-10457]","**[Deejay](https://jira.spring.io/secure/ViewProfile.jspa?name=deejay)** opened **[SPR-10457](https://jira.spring.io/browse/SPR-10457?redirect=false)** and commented  When using the new Spring MVC Test functionality, it is not possible to test that ViewResolvers are working correctly, as the original view name is used to assertion rather than the resolved view name.  This became apparent in my project when using Spring Mobile's `LiteDeviceDelegatingViewResolver` to prepend view names with ""tablet/"" in the presence of a User-Agent header containing the string ""android"".  Attached is a test class and config. You'll need to add your own view.   ---  **Affects:** 3.2.2  **Attachments:** - [springmvctest.java](https://jira.spring.io/secure/attachment/21156/springmvctest.java) (_1.96 kB_) - [springmvctest-context.xml](https://jira.spring.io/secure/attachment/21155/springmvctest-context.xml) (_2.13 kB_)","closed","status: declined,","spring-projects-issues","2013-04-11T05:23:01Z","2019-01-12T16:24:08Z"
"","14845","PersistenceAnnotationBeanPostProcessor Error on Context Destruction [SPR-10212]","**[David Winterfeldt](https://jira.spring.io/secure/ViewProfile.jspa?name=dwinterfeldt)** opened **[SPR-10212](https://jira.spring.io/browse/SPR-10212?redirect=false)** and commented  In PersistenceAnnotationBeanPostProcessor, the postProcessBeforeDestruction calls remove on any bean without checking if it's one that should be processed.  It seems like there should be a check since I believe DestructionAwareBeanPostProcessor gives a callback for all beans?  I have a proxy I'm creating and when it gets processed here there is an error. The proxy isn't an EntityManagerProxy and doesn't have a reference to an EntityManager at all.  public void postProcessBeforeDestruction(Object bean, String beanName) throws BeansException { EntityManager emToClose = this.extendedEntityManagersToClose.remove(bean); EntityManagerFactoryUtils.closeEntityManager(emToClose); }   ---  **Affects:** 3.2.1","closed","status: declined,","spring-projects-issues","2013-01-23T20:13:56Z","2019-01-12T16:24:29Z"
"","14771","HttpServletBean requires overly narrow Environment type [SPR-10138]","**[David Winterfeldt](https://jira.spring.io/secure/ViewProfile.jspa?name=dwinterfeldt)** opened **[SPR-10138](https://jira.spring.io/browse/SPR-10138?redirect=false)** and commented  My embedded jetty unit tests did work with a Spring 3.2 M1, but not with the M2/RC1/RC2/GA.  It looks like just instantiating the dispatcher servlet with a standard classpath context isn't creating the right type of environment?  Caused by: java.lang.IllegalArgumentException: . Object of class [org.springframework.core.env.StandardEnvironment] must be an instance of interface org.springframework.web.context.ConfigurableWebEnvironment  ```                                                                                                                                                                                                                                                              ```  Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.mortbay.jetty.servlet.ServletHandler#342798e7' defined in class path resource [org/springbyexample/ws/client/jetty-context.xml]: Cannot create inner bean 'org.mortbay.jetty.servlet.ServletHolder#478e4327' of type [org.mortbay.jetty.servlet.ServletHolder] while setting bean property 'servlets' with key [0]; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.mortbay.jetty.servlet.ServletHolder#478e4327' defined in class path resource [org/springbyexample/ws/client/jetty-context.xml]: Cannot create inner bean 'org.springframework.ws.transport.http.MessageDispatcherServlet#a68cb6b' of type [org.springframework.ws.transport.http.MessageDispatcherServlet] while setting bean property 'servlet'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.ws.transport.http.MessageDispatcherServlet#a68cb6b' defined in class path resource [org/springbyexample/ws/client/jetty-context.xml]: Initialization of bean failed; nested exception is java.lang.IllegalArgumentException: . Object of class [org.springframework.core.env.StandardEnvironment] must be an instance of interface org.springframework.web.context.ConfigurableWebEnvironment at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBean(BeanDefinitionValueResolver.java:282) ~[spring-beans-3.2.0.RELEASE.jar:3.2.0.RELEASE] at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:121) ~[spring-beans-3.2.0.RELEASE.jar:3.2.0.RELEASE] at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveManagedList(BeanDefinitionValueResolver.java:353) ~[spring-beans-3.2.0.RELEASE.jar:3.2.0.RELEASE] at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:154) ~[spring-beans-3.2.0.RELEASE.jar:3.2.0.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1391) ~[spring-beans-3.2.0.RELEASE.jar:3.2.0.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1132) ~[spring-beans-3.2.0.RELEASE.jar:3.2.0.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-3.2.0.RELEASE.jar:3.2.0.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:461) ~[spring-beans-3.2.0.RELEASE.jar:3.2.0.RELEASE] at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBean(BeanDefinitionValueResolver.java:271) ~[spring-beans-3.2.0.RELEASE.jar:3.2.0.RELEASE] ... 50 common frames omitted Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.mortbay.jetty.servlet.ServletHolder#478e4327' defined in class path resource [org/springbyexample/ws/client/jetty-context.xml]: Cannot create inner bean 'org.springframework.ws.transport.http.MessageDispatcherServlet#a68cb6b' of type [org.springframework.ws.transport.http.MessageDispatcherServlet] while setting bean property 'servlet'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.ws.transport.http.MessageDispatcherServlet#a68cb6b' defined in class path resource [org/springbyexample/ws/client/jetty-context.xml]: Initialization of bean failed; nested exception is java.lang.IllegalArgumentException: . Object of class [org.springframework.core.env.StandardEnvironment] must be an instance of interface org.springframework.web.context.ConfigurableWebEnvironment at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBean(BeanDefinitionValueResolver.java:282) ~[spring-beans-3.2.0.RELEASE.jar:3.2.0.RELEASE] at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:121) ~[spring-beans-3.2.0.RELEASE.jar:3.2.0.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1391) ~[spring-beans-3.2.0.RELEASE.jar:3.2.0.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1132) ~[spring-beans-3.2.0.RELEASE.jar:3.2.0.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-3.2.0.RELEASE.jar:3.2.0.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:461) ~[spring-beans-3.2.0.RELEASE.jar:3.2.0.RELEASE] at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBean(BeanDefinitionValueResolver.java:271) ~[spring-beans-3.2.0.RELEASE.jar:3.2.0.RELEASE] ... 58 common frames omitted Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.ws.transport.http.MessageDispatcherServlet#a68cb6b' defined in class path resource [org/springbyexample/ws/client/jetty-context.xml]: Initialization of bean failed; nested exception is java.lang.IllegalArgumentException: . Object of class [org.springframework.core.env.StandardEnvironment] must be an instance of interface org.springframework.web.context.ConfigurableWebEnvironment at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:532) ~[spring-beans-3.2.0.RELEASE.jar:3.2.0.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:461) ~[spring-beans-3.2.0.RELEASE.jar:3.2.0.RELEASE] at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBean(BeanDefinitionValueResolver.java:271) ~[spring-beans-3.2.0.RELEASE.jar:3.2.0.RELEASE] ... 64 common frames omitted Caused by: java.lang.IllegalArgumentException: . Object of class [org.springframework.core.env.StandardEnvironment] must be an instance of interface org.springframework.web.context.ConfigurableWebEnvironment at org.springframework.util.Assert.isInstanceOf(Assert.java:337) ~[spring-core-3.2.0.RELEASE.jar:3.2.0.RELEASE] at org.springframework.util.Assert.isInstanceOf(Assert.java:319) ~[spring-core-3.2.0.RELEASE.jar:3.2.0.RELEASE] at org.springframework.web.servlet.HttpServletBean.setEnvironment(HttpServletBean.java:194) ~[spring-webmvc-3.2.0.RELEASE.jar:3.2.0.RELEASE] at org.springframework.context.support.ApplicationContextAwareProcessor.invokeAwareInterfaces(ApplicationContextAwareProcessor.java:101) ~[spring-context-3.2.0.RELEASE.jar:3.2.0.RELEASE] at org.springframework.context.support.ApplicationContextAwareProcessor.postProcessBeforeInitialization(ApplicationContextAwareProcessor.java:92) ~[spring-context-3.2.0.RELEASE.jar:3.2.0.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:399) ~[spring-beans-3.2.0.RELEASE.jar:3.2.0.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1479) ~[spring-beans-3.2.0.RELEASE.jar:3.2.0.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:524) ~[spring-beans-3.2.0.RELEASE.jar:3.2.0.RELEASE] ... 66 common frames omitted  ---  **Affects:** 3.2 GA  **Issue Links:** - #14397 Refactor to lazy Environment creation where possible - #14075 Eliminate package cycle between ContextLoader and WebApplicationContextUtils","closed","type: regression,","spring-projects-issues","2013-01-02T11:52:57Z","2019-01-11T21:23:56Z"
"","15452","Spring no longer recognizes mapped classes [SPR-10826]","**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=davidkarlsen)** opened **[SPR-10826](https://jira.spring.io/browse/SPR-10826?redirect=false)** and commented  I've upgraded from spring 3.2.4 (where things work OK) to 4.0.0.M2, and spring no longer recognizes my JPA mapped classes.  ``` 2013-08-12 13:45:41,344 [main][][][][][][][] DEBUG org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver - Found javax.persistence.Persistence on classpath containing 'getPersistenceUtil'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver 2013-08-12 13:45:41,346 [main][][][][][][][] DEBUG org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver - Instantiated JPA aware TraversableResolver of type org.hibernate.validator.internal.engine.resolver.JPATraversableResolver. 2013-08-12 13:45:41,372 [main][][][][][][][] DEBUG org.hibernate.validator.internal.xml.ValidationXmlParser - Trying to load META-INF/validation.xml for XML based Validator configuration. 2013-08-12 13:45:41,378 [main][][][][][][][] DEBUG org.hibernate.validator.internal.xml.ValidationXmlParser - No META-INF/validation.xml found. Using annotation based configuration only. 2013-08-12 13:45:41,415 [main][][][][][][][] DEBUG org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver - Found javax.persistence.Persistence on classpath containing 'getPersistenceUtil'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver 2013-08-12 13:45:41,415 [main][][][][][][][] DEBUG org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver - Instantiated JPA aware TraversableResolver of type org.hibernate.validator.internal.engine.resolver.JPATraversableResolver. 2013-08-12 13:45:41,416 [main][][][][][][][] DEBUG org.hibernate.validator.internal.xml.ValidationXmlParser - Trying to load META-INF/validation.xml for XML based Validator configuration. 2013-08-12 13:45:41,416 [main][][][][][][][] DEBUG org.hibernate.validator.internal.xml.ValidationXmlParser - No META-INF/validation.xml found. Using annotation based configuration only. 2013-08-12 13:45:41,425 [main][][][][][][][] TRACE org.hibernate.service.internal.AbstractServiceRegistryImpl - Initializing service [role=org.hibernate.event.service.spi.EventListenerRegistry] 2013-08-12 13:45:41,520 [main][][][][][][][] TRACE org.hibernate.service.internal.AbstractServiceRegistryImpl - Initializing service [role=org.hibernate.persister.spi.PersisterFactory] 2013-08-12 13:45:41,528 [main][][][][][][][] DEBUG org.hibernate.internal.SessionFactoryRegistry - Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@24eced4a 2013-08-12 13:45:41,529 [main][][][][][][][] DEBUG org.hibernate.internal.SessionFactoryRegistry - Registering SessionFactory: e40b23c8-9c02-4432-8ac9-98d604a7e9d2 () 2013-08-12 13:45:41,529 [main][][][][][][][] DEBUG org.hibernate.internal.SessionFactoryRegistry - Not binding SessionFactory to JNDI, no JNDI name configured 2013-08-12 13:45:41,529 [main][][][][][][][] DEBUG org.hibernate.internal.SessionFactoryImpl - Instantiated session factory 2013-08-12 13:45:41,530 [main][][][][][][][] DEBUG org.hibernate.internal.SessionFactoryImpl - Checking 4 named HQL queries 2013-08-12 13:45:41,530 [main][][][][][][][] DEBUG org.hibernate.internal.SessionFactoryImpl - Checking named query: customer.deleteByCustomerKey 2013-08-12 13:45:41,531 [main][][][][][][][] TRACE org.hibernate.engine.query.spi.QueryPlanCache - Unable to locate HQL query plan in cache; generating (DELETE FROM Customer c WHERE c.customerKey = :customerKey) 2013-08-12 13:45:41,574 [main][][][][][][][] DEBUG org.hibernate.hql.internal.ast.QueryTranslatorImpl - parse() - HQL: DELETE FROM Customer c WHERE c.customerKey = :customerKey 2013-08-12 13:45:41,584 [main][][][][][][][] DEBUG org.hibernate.hql.internal.ast.QueryTranslatorImpl - --- HQL AST ---  \-[DELETE] Node: 'DELETE'     +-[FROM] Node: 'FROM'     |  \-[RANGE] Node: 'RANGE'     |     +-[IDENT] Node: 'Customer'     |     \-[ALIAS] Node: 'c'     \-[WHERE] Node: 'WHERE'        \-[EQ] Node: '='           +-[DOT] Node: '.'           |  +-[IDENT] Node: 'c'           |  \-[IDENT] Node: 'customerKey'           \-[COLON] Node: ':'              \-[IDENT] Node: 'customerKey'  2013-08-12 13:45:41,584 [main][][][][][][][] DEBUG org.hibernate.hql.internal.ast.ErrorCounter - throwQueryException() : no errors 2013-08-12 13:45:41,613 [main][][][][][][][] DEBUG org.hibernate.hql.internal.antlr.HqlSqlBaseWalker - delete","closed","type: bug,","spring-projects-issues","2013-08-12T04:47:30Z","2019-01-11T22:05:00Z"
"","15099","Cannot configure validationMessageSource when using Hibernate 5 as validation implementation [SPR-10466]","**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=davidkarlsen)** opened **[SPR-10466](https://jira.spring.io/browse/SPR-10466?redirect=false)** and commented  I configure the validation factory like this:  ```                          ```  and this throws this exception:  ```  Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'validatorFactory' defined in class path resource [META-INF/spring/validation-context.xml]: Error setting property values; nested exception is org.springframework.beans.PropertyBatchUpdateException; nested PropertyAccessExceptions (1) are: PropertyAccessException 1: org.springframework.beans.MethodInvocationException: Property 'validationMessageSource' threw exception; nested exception is java.lang.NoClassDefFoundError: org/hibernate/validator/resourceloading/ResourceBundleLocator ```  it works just fine with Hibernate Validator v4.x but fails with the latest 5.0.0.Final  ---  **Affects:** 3.2.2  **Issue Links:** - #12848 Support Bean Validation 1.1 (JSR-349)  1 votes, 4 watchers","closed","in: core,","spring-projects-issues","2013-04-16T06:21:47Z","2019-01-11T21:13:39Z"
"","14916","OXM Jaxb2Unmarshaller to support non-root elements [SPR-10282]","**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=davidkarlsen)** opened **[SPR-10282](https://jira.spring.io/browse/SPR-10282?redirect=false)** and commented  The JAXB2Unmarshaller should support JaxbElement/partial unmarshalling (e.g. classes not having a `@RootElement`). #12586/SPR-9742 are analogue cases but for marshalling. My usecase is using org.springframework.batch.item.xml.StaxEventItemReader in Spring Batch where I want to delegate unmarshalling of each event to the OXM unmarshaller. This will fail if I cannot call the more specific unmarshalling method where the expected JAXB class can be provided.  This hack would make this possible by setting the expected class to return as a parameter to the Spring unmarshaller class:  ``` public class ImprovedJaxb2Marshaller     extends Jaxb2Marshaller {     private Class partClass;      public void setPartClass( Class partClass )     {         this.partClass = partClass;     }      @Override     public Object unmarshal( Source source, MimeContainer mimeContainer )         throws XmlMappingException     {         if ( partClass == null )         {             return super.unmarshal( source, mimeContainer );         }         else         {             try             {                 Unmarshaller jaxbUnmarshaller = createUnmarshaller();                 return source instanceof StAXSource ?                                 unmarshalStaxSource( jaxbUnmarshaller, source ) :                                     jaxbUnmarshaller.unmarshal( source, partClass );             }             catch ( JAXBException e )             {                 throw super.convertJaxbException( e );             }         }     }      private Object unmarshalStaxSource( Unmarshaller jaxbUnmarshaller, Source staxSource )         throws JAXBException     {         XMLStreamReader streamReader = StaxUtils.getXMLStreamReader( staxSource );         if ( streamReader != null )         {             return jaxbUnmarshaller.unmarshal( streamReader, partClass ).getValue();         }         else         {             XMLEventReader eventReader = StaxUtils.getXMLEventReader( staxSource );             if ( eventReader != null )             {                 return jaxbUnmarshaller.unmarshal( eventReader, partClass ).getValue();             }             else             {                 throw new IllegalArgumentException( ""StaxSource contains neither XMLStreamReader nor XMLEventReader"" );             }         }     }  ```  ---  **Affects:** 3.1.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/283b3ee44be2fe89e7a944a10a69a72eb28d1662, https://github.com/spring-projects/spring-framework/commit/de069d06d852e6fa2e8e4ca9d442168729af6588, https://github.com/spring-projects/spring-framework/commit/23925edc95655d5d6ff664aa28e2fe9f27cad38c","closed","type: enhancement,","spring-projects-issues","2013-02-11T01:31:09Z","2019-01-11T21:31:10Z"
"","15416","""IllegalStateException: STREAM"" when using Spring MVC Callable return value on Jetty 9 failures [SPR-10790]","**[David Harrigan](https://jira.spring.io/secure/ViewProfile.jspa?name=dharrigan)** opened **[SPR-10790](https://jira.spring.io/browse/SPR-10790?redirect=false)** and commented  Hi,  I've come across a problem with Spring MVC and Jetty 9 that does not happen on Jetty 8.1.12. It appears that after a while (reproduced by using Siege), Spring MVC (with an Async Callable Controller) fails to find a View.  The View can be loaded via a web browser, so it's not that it doesn't exist - it just appears that under a bit of stress, Spring with Jetty can't find it.  As always, it's difficult to determine if this a problem with Spring or a problem with Jetty 9. My only evidence so far is that under Jetty 8.1.12 I am unable to reproduce the problem.  I've raised the bug in the Jetty Bugzilla as well (https://bugs.eclipse.org/bugs/show_bug.cgi?id=413901) since it may be a Jetty issue.  I've uploaded my test project here:  https://github.com/dharrigan/bizarro  Please feel free to clone and try out and see if I'm not going crazy :-)  Thank you.   ---  **Affects:** 3.2.3  **Attachments:** - [bizarro.log.gz](https://jira.spring.io/secure/attachment/21306/bizarro.log.gz) (_12.81 kB_) - [bizarro2.log.gz](https://jira.spring.io/secure/attachment/21307/bizarro2.log.gz) (_2.96 kB_) - [screenshot1.png](https://jira.spring.io/secure/attachment/21309/screenshot1.png) (_189.17 kB_) - [screenshot2.png](https://jira.spring.io/secure/attachment/21310/screenshot2.png) (_211.47 kB_)","closed","status: declined,","spring-projects-issues","2013-07-29T02:16:18Z","2019-01-12T16:23:46Z"
"","15021","Remove default value of LifecycleGroup.lifecycleBeans [SPR-10388]","**[David Harkness](https://jira.spring.io/secure/ViewProfile.jspa?name=davidharkness)** opened **[SPR-10388](https://jira.spring.io/browse/SPR-10388?redirect=false)** and commented  LifecycleGroup initializes its lifecycleBeans with a call to getLifecycleBeans(), however the result of this method call is already passed into the constructor and overwrites the initialization value.  Thus, the method call has no effect except to waste a non-trivial number of clock cycles.   ---  **Affects:** 3.2.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2629208d5bab710f05931ebb65847694302f4aaf","closed","in: core,","spring-projects-issues","2013-03-15T23:08:09Z","2013-04-30T15:03:57Z"
"","14799","Clean Install on Clean Windows OS - Absolute Minimum Path - Does Not Work [SPR-10166]","**[David H](https://jira.spring.io/secure/ViewProfile.jspa?name=hoffit)** opened **[SPR-10166](https://jira.spring.io/browse/SPR-10166?redirect=false)** and commented  1. Brand New Computer  2. Install JDK 1.6  3. Install Spring 3.1  4. On first Startup - multiple error message windows;    a - EGIT - Do I know if this matters? How the eff should I know. A massive error dialog shows up about EGit. It's one of many possible SCM utilities - why - I wonder - why - is there any error about this one lone, latest not-so-greatest SCM utility on a clean install.    b - cant remember and don't care anymore  5. Create, through Spring MVC template, a project. Immediately have 15 project errors. Do they matter - how the hell should I know?  6. New Tack - Click link to Spring MVC demo project. 35 errors right away. Do they matter - how the hell should I know. 35 errors * 6000 solution = a whole lot of pain  This is why, after 100K of education costs, and 20 years total time invested in education, with 15 years IT experience in IT industry, I HATE I.T. and just cant take it anymore.  If I can't take a brand new computer, do nothing other than follow the 'Get Started' link at SpringSource, and create a non-error filled default app based on a template, or install a non-error filled demo app, what can I say about the 'value' of Spring vs San Fran Framework from 1997 (that started this all), or J2EE - or it's many successors or immatators?  Let me ask you - do you honestly believe that this crap is even marginally better than San Fran from 16 years ago? Because the marketing material directly next to the 'Get Started This Is All You Need' link, in addition to the documentation and other materials available, seem to imply so.  Here is what has changed in the past 15 years - the words.    ---  **Affects:** 3.1.2  **Attachments:** - [Build Issues for simple project from spring MVC template.xlsx](https://jira.spring.io/secure/attachment/20900/Build+Issues+for+simple+project+from+spring+MVC+template.xlsx) (_11.13 kB_)","closed","in: core,","spring-projects-issues","2013-01-11T22:05:11Z","2019-01-12T16:47:16Z"
"","15008","Make implementations of PreparedStatementSetter public, not package-private [SPR-10375]","**[David Dulson](https://jira.spring.io/secure/ViewProfile.jspa?name=dave-dulson)** opened **[SPR-10375](https://jira.spring.io/browse/SPR-10375?redirect=false)** and commented  `ArgPreparedStatementSetter` and `ArgTypePreparedStatementSetter` are both package private, and in both cases I want to extend the class and override the (protected) `doSetValue`. I am unable to do this due to the package private access.  Could these classes be changed to public?   ---  **Affects:** 3.2.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cc4f1328ee0d93620d18ad2c9326a5360d5616c1","closed","type: enhancement,","spring-projects-issues","2013-03-14T02:36:21Z","2013-04-30T15:02:44Z"
"","14935","Ability to set per-session entity interceptors removed from HibernateTransactionManager for Hibernate 4 [SPR-10301]","**[David Dulson](https://jira.spring.io/secure/ViewProfile.jspa?name=dave-dulson)** opened **[SPR-10301](https://jira.spring.io/browse/SPR-10301?redirect=false)** and commented  In previous versions it was possible to set an EntityInterceptor for a specific HibernateTransactionManager, which would use it when creating the session. This functionality has been removed. Would it be possible to have it re-added? I found it useful.  I see from #13580 I can set the entityInterceptor in the LocalSessionFactoryBean, but I don't want it globally - just for this one session.  ---  **Affects:** 3.2.1  **Attachments:** - [0001-Add-entity-interceptor-capability-for-HibernateTrans.patch](https://jira.spring.io/secure/attachment/20958/0001-Add-entity-interceptor-capability-for-HibernateTrans.patch) (_2.50 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b979d8d548286864f3b7f51c0b18f5d339d624c8, https://github.com/spring-projects/spring-framework/commit/096972d2b10d5a3df38c855f63a4e4340b1df136","closed","type: enhancement,","spring-projects-issues","2013-02-15T07:36:19Z","2019-01-11T21:06:40Z"
"","15339","Add recovery-interval to  [SPR-10711]","**[David Cole](https://jira.spring.io/secure/ViewProfile.jspa?name=mojava)** opened **[SPR-10711](https://jira.spring.io/browse/SPR-10711?redirect=false)** and commented  I was trying to reduce the recovery timeout, an attribute available on the DefaultMessageListenerContainer, and found there was no equivalent attribute on the . It would be great to have this attribute included in the xsd.   ---  **Affects:** 3.2.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bb18f81b504cb3276535106368fa5ff3a961e038","closed","type: enhancement,","spring-projects-issues","2013-07-01T08:49:34Z","2013-08-29T16:20:45Z"
"","15363","container-type enumeration attribute declared in spring-jms-3.2.xsd - consider removing the enumeration constraint to allow for property placeholders [SPR-10735]","**[David Boden](https://jira.spring.io/secure/ViewProfile.jspa?name=daveboden)** opened **[SPR-10735](https://jira.spring.io/browse/SPR-10735?redirect=false)** and commented  I'm still trying to specify container-type using a variable. The fix for #14231 didn't quite do it for me. When I specify:  ```xml        ```  The schema is expecting a hardcoded ""default"" or ""simple"". The Spring startup doesn't get past the XML validation, so it can't continue to do placeholder replacement. Here's the error:  ``` cvc-enumeration-valid: Value '${jms.listener.container.type}' is not facet-valid with respect to enumeration '[default, simple]'. It must be a value from the enumeration. ```  ---  **Affects:** 3.2.3  **Issue Links:** - #14231 container-type and other NMTOKEN attributes declared in spring-jms-3.1.xsd - consider using string pattern to allow for property placeholders","closed","type: enhancement,","spring-projects-issues","2013-07-11T09:52:51Z","2019-01-11T22:04:07Z"
"","15197","Large number of StandardEnvironment objects are initialised during startup. Visible in the logs at DEBUG level. [SPR-10568]","**[David Boden](https://jira.spring.io/secure/ViewProfile.jspa?name=daveboden)** opened **[SPR-10568](https://jira.spring.io/browse/SPR-10568?redirect=false)** and commented  When creating an application context, these log lines are output at DEBUG level many tens of times. It seems that there are an excess of StandardEnvironment objects being created.  ``` DEBUG org.springframework.core.env.StandardEnvironment - Initializing new StandardEnvironment DEBUG org.springframework.core.env.StandardEnvironment - Adding [systemProperties] PropertySource with lowest search precedence DEBUG org.springframework.core.env.StandardEnvironment - Adding [systemEnvironment] PropertySource with lowest search precedence DEBUG org.springframework.core.env.StandardEnvironment - Initialized StandardEnvironment with PropertySources ```    ---  **Affects:** 3.2.2  1 votes, 3 watchers","closed","in: core,","spring-projects-issues","2013-05-15T09:43:05Z","2013-05-15T13:58:14Z"
"","14849","Use parameter names during MBeanInfo assembly for MBean interfaces as well as @ManagedOperation [SPR-10216]","**[David Boden](https://jira.spring.io/secure/ViewProfile.jspa?name=daveboden)** opened **[SPR-10216](https://jira.spring.io/browse/SPR-10216?redirect=false)** and commented  The fix in Spring 3.2.1 for issue #14619 now displays parameter names derived from source debug info for `@ManagedOperation-style` MBeans.  It does not work out the parameter names for the more ""traditional"" MBean interfaces.  I'll add an additional unit test showing how it should work with an MBean interface and submit a fix.  ---  **Affects:** 3.2.1  **Issue Links:** - #14619 Use parameter names during MBeanInfo assembly  1 votes, 5 watchers","closed","status: bulk-closed,","spring-projects-issues","2013-01-25T03:35:28Z","2019-01-12T02:35:11Z"
"","14755","Fix SpEL JavaBean compliance for setters [SPR-10122]","**[David Boden](https://jira.spring.io/secure/ViewProfile.jspa?name=daveboden)** opened **[SPR-10122](https://jira.spring.io/browse/SPR-10122?redirect=false)** and commented  #13761 changed SPEL so that it was in line with the JavaBean specification for attributes with lowercase first letters and uppercase second letters like:  iD pNDV  Changes were made to: org.springframework.expression.spel.support.ReflectivePropertyAccessor  This method was updated under change #13761, so that it checks the 2nd character in the name as a special case (line 312):  ```java protected Method findGetterForProperty(String propertyName, Class clazz, boolean mustBeStatic) ```  The corresponding method for setters was **not** updated (line 344):  ```java protected Method findSetterForProperty(String propertyName, Class clazz, boolean mustBeStatic) ```  ---  **Affects:** 3.2 GA  **Issue Links:** - #13761 [SpEL] Problem with uppercase property names  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0ed9cb23022537c79aed1b9928e97fb26e67efdc, https://github.com/spring-projects/spring-framework/commit/d91a419fdc4f520ba8e443e689998f4e7b5a2b2c  1 votes, 4 watchers","closed","in: core,","spring-projects-issues","2012-12-27T06:29:59Z","2019-01-11T21:24:27Z"
"","14717","NamedParameterJdbcTemplate for ""insert / select"" clause, set NULL value causes JConnect 7 (Sybase) problem - java.io.IOException: JZ0SL: Unsupported SQL type 0. - Affects 3.1.3.RELEASE, works in 3.1.1.RELEASE [SPR-10084]","**[David Boden](https://jira.spring.io/secure/ViewProfile.jspa?name=daveboden)** opened **[SPR-10084](https://jira.spring.io/browse/SPR-10084?redirect=false)** and commented  On a SQL query that involves:  insert into AbcTable select :param1, :param2, otherValue from DefTable  ... using a NamedParameterJdbcTemplate and mapping one of the named parameters to NULL in the parameter map results in: java.io.IOException: JZ0SL: Unsupported SQL type 0.  Example code (Spring 3.1.3.RELEASE): MapSqlParameterSource parameters = new MapSqlParameterSource(); parameters.addValue(""param1"", null); template.update(insertSql, parameters);  Works (inserts a null value into the table) in 3.1.1.RELEASE.  Using Sybase JConnect 7.07.ESD5 (latest) and other versions of JConnect spanning back 2 years.  Test details to follow on Monday, just wanted to raise the issue.  ---  **Affects:** 3.1.3  **Issue Links:** - #14818 Update to spring 3.1.3 causes SqlException when executing sql statement with null parameters, caused by changes in StatementCreatorUtils.setNull method. (_**""is duplicated by""**_) - #15726 performancedrop due to repeated JDBC 3.0 getParameterType calls in setNull in StatementCreatorUtils - #19196 Protect against getParameterType cursor leak with Oracle 12c JDBC driver  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f449b5a5b3176cce6443de3985db30bfe9963b88, https://github.com/spring-projects/spring-framework/commit/f0a1ff2d762d0cc4aac176e1be55d8758f85db0e  **Backported to:** [3.1.4](https://github.com/spring-projects/spring-framework/milestone/83?closed=1)","closed","type: bug,","spring-projects-issues","2012-12-07T10:43:36Z","2019-01-11T19:10:33Z"
"","15034","Load servlet context resources using @PropertySource [SPR-10401]","**[David Artiga](https://jira.spring.io/secure/ViewProfile.jspa?name=david.artiga)** opened **[SPR-10401](https://jira.spring.io/browse/SPR-10401?redirect=false)** and commented  ```java @Configuration @PropertySource(""META-INF/config.properties"") public class MyConfig {    (...) } ```  Resource should be resolved as `ServletContextResource` (\/META-INF/config.properties), but `ConfigurationClassParser` delegates resource resolution to `ResourcePropertySource`, that uses `DefaultResourceLoader`, so it is incorrectly resolved as `ClassPathResource` (\/WEB-INF/classes/META-INF/config.properties)   ---  **Affects:** 3.2.2  4 votes, 5 watchers","closed","status: bulk-closed,","spring-projects-issues","2013-03-20T05:54:21Z","2019-01-12T00:24:46Z"
"","15522","PersistenceExceptionTranslationPostProcessor.setBeanFactory(BeanFactory) causes unwanted early initialization [SPR-10894]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-10894](https://jira.spring.io/browse/SPR-10894?redirect=false)** and commented  PersistenceExceptionTranslationPostProcessor.setBeanFactory(BeanFactory) causes unwanted early initialization of (for instance) DataSource and EntityManagerFactory beans. If they require post processing by one of the other BeanPostProcessors (even ones with higher `@Order` than PersistenceExceptionTranslationPostProcessor) that never happens because they are fully initialized before the ApplicationContext has finished even registering BeanPostProcessors.   ---  **Affects:** 4.0 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/df18e9173dfbf6aa97852a25db100294b72e6eb5","closed","type: enhancement,","spring-projects-issues","2013-09-04T06:37:16Z","2013-10-31T12:28:04Z"
"","15511","Race condition in org.springframework.expression.spel.ast.MethodReference [SPR-10884]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-10884](https://jira.spring.io/browse/SPR-10884?redirect=false)** and commented  We added some caching in there recently, but didn't really do anything to make it thread safe (beyond adding the ""volatile"" keyword - which seems like a statement of intent at least). We have seen NPE in getCachedExecutor(). It's obvious it can happen. Just not really obvious what the contract is  ---  **Affects:** 3.2.4, 4.0 M3  **Issue Links:** - #15285 Cached MethodExecutor invokes wrong method  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ed7c8b5a53f7603cbf1b95ca35e78f3f69b2588a, https://github.com/spring-projects/spring-framework/commit/0c30618ae8962d4f9f17b03cdecef5fbde931b36","closed","in: core,","spring-projects-issues","2013-09-02T05:37:35Z","2019-01-11T22:08:54Z"
"","15507","StompEndpointRegistry depends on reactor.util [SPR-10880]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-10880](https://jira.spring.io/browse/SPR-10880?redirect=false)** and commented  I assume this is a simple copy-paste / auto-import error (no need for the dependency). It breaks any app using Stomp that doesn't happen to want to use Reactor.   ---  **Affects:** 4.0 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8a4c6eb60592166962eb91ecc9d5874b6c20cbc8, https://github.com/spring-projects/spring-framework/commit/5d69700515d4ba03f6f03b507c1b6f226062e006","closed","type: bug,","spring-projects-issues","2013-08-30T03:42:17Z","2013-10-31T12:27:59Z"
"","15497","Cache KeyGenerators treat var-args as a single array [SPR-10870]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-10870](https://jira.spring.io/browse/SPR-10870?redirect=false)** and commented  DefaultKeyGenerator treats varargs as a single array (so all calls to method have same key!).  ---  **Affects:** 4.0 M2  **Issue Links:** - #15874 Regression: ClassCastException using `@CacheEvict` with primitive varargs  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/05072e17625e8fd256c1b29a45ef7248a6cecfa8","closed","in: core,","spring-projects-issues","2013-08-28T05:37:09Z","2019-01-13T06:58:22Z"
"","15440","Add @RestController to stereotype a controller that is going to be used for @ResponseBody rendering [SPR-10814]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-10814](https://jira.spring.io/browse/SPR-10814?redirect=false)** and commented  It's very common these days to have an MVC app that **only** serves machine clients and all `@RequestMapping` methods end up annotated with `@ResponseBody`. It's boilerplate and it seems unnecessary, so maybe the best way to avoid having to do that (and not break any existing code) is to use a different stereotype on the type level: `@RestController`  ---  **Affects:** 3.2.4  **Issue Links:** - #15745 Add mention of `@RestController` to reference docs  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/82a26024ae17b7d3c8ba5f805c853a6df0a072e1","closed","type: enhancement,","spring-projects-issues","2013-08-07T09:25:59Z","2019-01-13T06:58:38Z"
"","15354","Add lifecycle hook for accessing Environment in a bean definition [SPR-10726]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-10726](https://jira.spring.io/browse/SPR-10726?redirect=false)** and commented  Add lifecycle hook for accessing Environment in a bean definition. The only way I found to get hold of the Environment early enough in a `@Bean` definition was to use `@Conditional`.  If the access is not really a Condition this is a smell, so it seems like maybe a new feature is needed.   --- No further details from [SPR-10726](https://jira.spring.io/browse/SPR-10726?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2013-07-08T08:57:29Z","2019-01-12T00:22:47Z"
"","15284","WritableResource doesn't have parity with Resource in @Value etc. [SPR-10656]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-10656](https://jira.spring.io/browse/SPR-10656?redirect=false)** and commented  Users can (and often do) inject `Resource` instances using placeholders and pattern matching, but this doesn't work with `WritableResource`. It might be an oversight?   ---  **Affects:** 4.0 M1  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2013-06-15T00:47:03Z","2022-05-05T16:20:07Z"
"","15283","Document options to add interceptors to ResourceHandlerRegistry handler mapping [SPR-10655]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-10655](https://jira.spring.io/browse/SPR-10655?redirect=false)** and commented  Our use case is this: we need to add a handler interceptor to a resource handler so it can set the content type header for some static resources.  We would like to test this with Spring MVC Test, so we want to have this happen in the DispatcherServlet handling chain (i.e. a Filter isn't a great solution).   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/fa0a295aba7c07255437851e673dda64b46948eb  4 votes, 7 watchers","closed","type: task,","spring-projects-issues","2013-06-14T05:57:24Z","2014-12-09T02:49:18Z"
"","15236","Allow @Bean to override a dynamically registered bean definition [SPR-10607]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-10607](https://jira.spring.io/browse/SPR-10607?redirect=false)** and commented  ConfigurationClassBeanDefinitionReader does not allow a `@Bean` to override anything that is not itself a `@Bean`:  ``` if (!(existingBeanDef instanceof ConfigurationClassBeanDefinition)) { // no -> then it's an external override, probably XML // overriding is legal, return immediately ... ```  The assumption that non-`@Beans` come from XML is false, since they can be (and increasingly are) registered by an import selector or similar piece of framework machinery.  In any case this seems like an arbitrary rule (XML beans are just as valid to override as any other).  All users really need is some predictability about the bean definition load order, so they can reason about what should override what.  ---  **Affects:** 4.0 M1  **Issue Links:** - #15854 Regression in 4.0.0 - A scoped-proxy bean cannot override another bean - #15434 Reconsider whether to generally allow bean overriding by name","closed","type: enhancement,","spring-projects-issues","2013-05-30T06:07:43Z","2019-01-11T22:27:25Z"
"","15231","ImportSelector and ImportBeanDefinitionRegistrar should be able to implement EnvironmentAware [SPR-10602]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-10602](https://jira.spring.io/browse/SPR-10602?redirect=false)** and commented  Similar motivation as #15160.  The Environment should be available when the processing is done (I think), and it would be quite useful to be able to modify behaviour based on the environment, as well as on static configuration hard-coded in annotations.  ---  **Affects:** 4.0 M1  **Issue Links:** - #19250 Consistent *Aware callbacks for TypeFilters, ImportSelectors and ImportBeanDefinitionRegistrars  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4d3383242e5655631e44dee48ca7060add84f957","closed","type: enhancement,","spring-projects-issues","2013-05-29T04:45:08Z","2019-01-11T22:27:13Z"
"","15208","SimpleCommandLinePropertySource could be enumerable [SPR-10579]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-10579](https://jira.spring.io/browse/SPR-10579?redirect=false)** and commented  Since `CommandLinePropertySource` has enumeration methods I don't see any reason why `SimpleCommandLinePropertySource` is not an `EnumerablePropertySource`.  It would help a lot when consuming it.   ---  **Affects:** 4.0 M1","closed","type: enhancement,","spring-projects-issues","2013-05-21T05:14:24Z","2013-07-24T10:17:08Z"
"","15190","Source code in SNAPSHOTs does not match compiled classes [SPR-10560]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-10560](https://jira.spring.io/browse/SPR-10560?redirect=false)** and commented  It's irritating for users to try to debug into code and find that the published artifacts do not match (.java for .class).  This appears to be the case with ResourceHttpRequestHandler (for instance), which has handleRequest() at line 109 in master, but line 107 in last night's snapshot.  The debugger cannot stop on line 107 and it looks like there is just a mismatch of 1 couple of lines.   ---  **Affects:** 4.0 M1","closed","","spring-projects-issues","2013-05-14T05:29:43Z","2019-01-11T22:14:38Z"
"","15115","Deadlock in FrameworkServlet (and other clients) if another thread closes the ApplicationContext [SPR-10482]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-10482](https://jira.spring.io/browse/SPR-10482?redirect=false)** and commented  This bug is reminiscent of #6584, but is  caused by a different lock.  The problem is exposed when you use `FrameworkServlet.setApplicationContext()` to bind a servlet to an existing `ApplicationContext` that is still being refreshed (and hence someone has a lock on the `startupShutdownMonitor`).  Another thread can call `close()` on the `AbstractApplicationContext`, setting the `active` flag to `false`, but not needing to acquire the `startupShutdownMonitor`.  The `FrameworkServlet` checks for `isActive()` which is now false and then goes ahead and tries to refresh, but cannot acquire the `startupShutdownMonitor` because it is held by the other thread.  If that thread in turn cannot finish refreshing until the `FrameworkServlet` is initialized you have a deadlock.  Simplified sequence diagram: http://www.websequencediagrams.com/cgi-bin/cdraw?lz=dGl0bGUgQ29udGV4dCBJbml0aWFsaXphdGlvbiAoRGVhZGxvY2spCgpUZXN0LT4rQUM6IGNyZWF0ZQpBQy0-QUM6IGFjdGl2ZT1mYWxzZQAgB0FDOiByZWZyZXNoKCkAGRB0cnVlLGxvY2sobW9uKQAEBnNlbGYAIwYrU2VydmxldChiZyk6IGluaXQKbm90ZSBvdmVyIAARCyAKICBsb25nIHBhdXNlIGluIAogIGJhY2tncm91bmQgdGhyZWFkLi4uCmVuZCBub3RlAD0LVGVzdDogcnVucyBvdXQgb2YgcGF0aWVuYwCBNQxjbG9zAIFQFgCBKAwAgRMKQUM6IEJsb2NrZWQgd2FpdGluZyBmb3IgbG9jawoAgUsLAIJBBQCBWQYAgjUGPwoACgYtPi0AgXANAIJMBgAkFgCCVwcAMQkARA4AglUPAIEYDQCCUwYAgRAZAIFCDk5ldmVyIGdldCB0aGlzIGZhcgCBPA4tQUM6AIQACXVuAINCCiwABgcAegUAhBUVCg&s=default (""bg"" is a background thread).  ---  **Affects:** 3.2.2","closed","","spring-projects-issues","2013-04-23T09:07:02Z","2019-01-11T21:11:52Z"
"","14955","PropertySourcesPlaceholderConfigurer shouldn't need to convert all placeholders to String [SPR-10321]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-10321](https://jira.spring.io/browse/SPR-10321?redirect=false)** and commented  PropertySourcesPlaceholderConfigurer shouldn't need to convert all placeholders to String - if the target type for the property is known, there is no need to convert from the value in the PropertySource to String and then back again.  This results in contortions (at best) and sometimes hard -to-detect runtime errors.  For example, if `Foo.foo` is a `Collection`, this fails miserably:  ```      ```  The default value is fine (String will be converted to collection with one element), but if the `Environment` happens to contain a property `foo.bar` of type `Collection` and size `n` it will be coerced into a single String (using commas) and then converted back to a collection with one element.  The specific example above could be fixed by supplying a CSV converter for String->Collection (should be the default probably IMO), but that misses the point - `PropertySource` and the standard `Environment` is not just a map of String->String any more, so it makes no sense to throw away the type information.  The culprit is really `PropertyResolver.resolvePlaceholders()` which returns String (should have been Object).   ---  **Affects:** 3.1.4, 3.2.1  1 votes, 2 watchers","closed","status: bulk-closed,","spring-projects-issues","2013-02-21T00:53:06Z","2019-01-12T02:33:35Z"
"","14814","Allow meta-annotations to override attributes from their parent [SPR-10181]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-10181](https://jira.spring.io/browse/SPR-10181?redirect=false)** and commented  Allow meta-annotations to override attributes from their parent.  Example: Spring Batch 2.2 defines  ``` @Scope(value = ""step"", proxyMode = INTERFACES) @Retention(RetentionPolicy.RUNTIME) @Documented public @interface StepScope { } ```  But if the user needs to have `proxyMode = TARGET_CLASS` (which is quite common) he has to define his own meta-annotation, or use `@Scope`.  It would be nice if we could do this:  ``` @Scope(value = ""step"") @Retention(RetentionPolicy.RUNTIME) @Documented public @interface StepScope {         ScopedProxyMode proxyMode() default ScopedProxyMode.INTERFACES; } ```  and have the default value picked up as well as any explicit overrides by users of the new annotation.  ---  **Issue Links:** - #15666 Support meta-annotation attribute overrides in the TestContext framework (_**""is depended on by""**_) - #15734 Support composed annotations declared on interfaces - #16020 Introduce aliases for 'value' annotation attributes  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f2fb0ec9e730f274420e0d5cfa1585aec2217f75, https://github.com/spring-projects/spring-framework/commit/6d3649858e8a9eb0645e889782df1787772967c1  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2013-01-16T04:34:58Z","2019-01-11T21:30:17Z"
"","14805","UriComponents.Type.QUERY_PARAM does not match spec [SPR-10172]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-10172](https://jira.spring.io/browse/SPR-10172?redirect=false)** and commented  UriComponents.Type.QUERY_PARAM does not match spec, in particular it does not allow the relatively common usage of ""\+"" to encode "" "" (SPACE).  So you get a nasty error with `ServletUriComponentsBuilder.fromRequest` whenever the query is (legally) encoded with ""\+"" for "" "".  An ugly workaround is to do this:  ``` UriComponents uri = ServletUriComponentsBuilder.fromRequest(request).replaceQuery(request.getQueryString().replace(""+"",  ""%20"")).build(true); String query = uri.getQuery().replace(""%20"", ""+""); return ServletUriComponentsBuilder.fromUri(uri.toUri()).replaceQuery(query).build(true).toString(); ```  ---  **Affects:** 3.1.2  **Issue Links:** - #19394 UriComponentBuilder doesn't work with encoded HTTP URL having '+'. (_**""duplicates""**_)  5 votes, 7 watchers","closed","in: web,","spring-projects-issues","2013-01-14T01:30:08Z","2019-01-12T16:47:14Z"
"","14716","Initialization ordering problems with @Enable* [SPR-10083]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-10083](https://jira.spring.io/browse/SPR-10083?redirect=false)** and commented  This fails for me:  ``` 	@Configuration 	@EnableCaching(proxyTargetClass = true) 	public static class TestConfiguration implements CachingConfigurer {  		@Autowired 		private ProxyCachingConfiguration config;  		@Bean 		public Object myBean() { 			return config.cacheInterceptor(); 		}  		@Override 		public KeyGenerator keyGenerator() { 			return null; 		}  		@Override 		public CacheManager cacheManager() { 			return new NoOpCacheManager(); 		}  	} ```  The problem is that the CacheManager is needed before it is initialized.  It's weird though because other people (Chris) can't make it fail.  The code above is actually rather a strange thing to be doing in practice since the user has no need of the CacheInterceptor usually, but I was working on some `@Enable`* features for Spring Batch and there it was quite important to expose some beans from the base configuration.  The fact that you even  might need to `@Autowire` the ProxyCachingConfiguration is problematic as well (user only wants the CacheInterceptor).   ---  **Affects:** 3.1.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/1b6f3c9c83b471b7c561aadf3e03bd2c58aaa698, https://github.com/spring-projects/spring-framework-issues/commit/5510d98a5d5e1964335f6f9a735659d12fbb1fe6, https://github.com/spring-projects/spring-framework-issues/commit/3f318d363b2f6f136431412661f93811f019fb27, https://github.com/spring-projects/spring-framework-issues/commit/c0960403c1496b8c4290587ef5ea8d721fc223e4  1 votes, 3 watchers","closed","status: bulk-closed,","spring-projects-issues","2012-12-07T05:15:31Z","2019-01-12T02:35:39Z"
"","15465","Compatibility problems with Hibernate 4.3.0.Beta1 and newer [SPR-10839]","**[Dave Schoorl](https://jira.spring.io/secure/ViewProfile.jspa?name=dave_schoorl)** opened **[SPR-10839](https://jira.spring.io/browse/SPR-10839?redirect=false)** and commented  In Hibernate release 4.3.0.Beta1, released in April 2013, a couple of classes were moved from the org.hibernate.service.* packages to org.hibernate.engine.* packages. Spring ORM uses a couple of these relocated hibernate classes, but has not anticipated the package renaming introduced in Hibernate 4.3.0.Beta1. It concerns esp. org.hibernate.service.jta.platform.spi.JtaPlatform (used in org.springframework.orm.hibernate4.SpringSessionContext) and org.hibernate.service.jdbc.connections.spi.ConnectionProvider (used in org.springframework.orm.hibernate4.SessionFactoryUtils). As a result, you cannot use the latest Hibernate 4.3.x versions with Spring in many scenario's.  In our use case, we run Axis2 web services in Tomcat, where older web services use plain Hibernate while for new web services, we want to use JPA 2.1 (which is supported in hibernate as of release 4.3.0). It is not possible to share the same version of spring / hibernate for these different web services due to this issue.  ---  **Affects:** 3.2.4, 4.0 M2  **Issue Links:** - #16316 Support for Hibernate ORM 5.0  0 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2013-08-15T03:30:51Z","2019-01-11T22:04:49Z"
"","14848","Equal sign is lost in UriComponentsBuilder when query param has ""="" but no value [SPR-10215]","**[Danny Christl](https://jira.spring.io/secure/ViewProfile.jspa?name=danny)** opened **[SPR-10215](https://jira.spring.io/browse/SPR-10215?redirect=false)** and commented  If you have following URI: ""http://localhost/servlets/sfs?s="" and RestTemplate will be used the equal sign gets cutted in UriComponentsBuilder and leads to: ""http://localhost/servlets/sfs?s""   Not every server understands this and requesting causes errors (e.g. 400 -> Bad Request). This behaviour changed in 3.1.x releases, older versions work like expected. Patch (for Git 3.2.x branch) and sample is appended.   ---  **Affects:** 3.1.3, 3.1.4, 3.2.1  **Reference URL:** http://www.w3.org/TR/url/#collect-url-parameters  **Attachments:** - [Main.java](https://jira.spring.io/secure/attachment/20905/Main.java) (_557 bytes_) - [wrong_uri_building.patch](https://jira.spring.io/secure/attachment/20904/wrong_uri_building.patch) (_23.94 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/203b22b2462bd2c05791fde937f69312e2cfe6c3","closed","type: bug,","spring-projects-issues","2013-01-24T23:38:28Z","2013-02-11T12:41:20Z"
"","14906","UriComponentsBuilder should provide a way to remove the extension from the path [SPR-10272]","**[Daniel Gredler](https://jira.spring.io/secure/ViewProfile.jspa?name=gredler2)** opened **[SPR-10272](https://jira.spring.io/browse/SPR-10272?redirect=false)** and commented  Spring supports using both ""Accept"" HTTP headers and extensions (e.g. .xml and .json) for content type negotiation. However, if the client uses extensions, any URLs built using the UriComponentsBuilder will contain the extension.  For example, if the client GETs this book:  http://foo.com/rest/books/6  and you want the server to return a list of the URLs for each of the pages in the book, e.g.  http://foo.com/rest/books/6/pages/1  then if the client is using extensions for content type negotiation you end up with the following URI:  http://foo.com/rest/books/6.json/pages/1  if you use the standard URI building code:  ``` fromCurrentRequest().path(""/pages/{id}"").buildAndExpand(pageId).toString() ```  It should be possible to remove the extension if it's there (or just ignore the removal if there is no extension):  ``` fromCurrentRequest().removeExtension().path(""/pages/{id}"").buildAndExpand(pageId).toString() ```    ---  **Affects:** 3.2 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/50178550eb6073eaf7d54f389a06a1d97281a3f5","closed","type: enhancement,","spring-projects-issues","2013-02-07T21:08:57Z","2013-08-29T16:20:45Z"
"","14905","UriComponentsBuilder should provide a way to remove the last path segment [SPR-10271]","**[Daniel Gredler](https://jira.spring.io/secure/ViewProfile.jspa?name=gredler2)** opened **[SPR-10271](https://jira.spring.io/browse/SPR-10271?redirect=false)** and commented  Sometimes you want to build a URI by ""walking back"" a segment or two, and then adding path segments.  For example, if a client GETs http://foo.com/rest/books/2, you might want to send back a URL to the library that contains the book, http://foo.com/rest/libraries/6:  ``` fromCurrentRequest().removePathSegment().removePathSegment().path(""/libraries/{id}"").buildAndExpand(libraryId).toString() ```  Or maybe:  ``` fromCurrentRequest().removePathSegments(2).path(""/libraries/{id}"").buildAndExpand(libraryId).toString() ```    ---  **Affects:** 3.2 GA","closed","type: enhancement,","spring-projects-issues","2013-02-07T21:01:20Z","2013-02-08T13:34:11Z"
"","14904","UriComponentsBuilder and ServletUriComponentsBuilder generate URLs with empty segments [SPR-10270]","**[Daniel Gredler](https://jira.spring.io/secure/ViewProfile.jspa?name=gredler2)** opened **[SPR-10270](https://jira.spring.io/browse/SPR-10270?redirect=false)** and commented  The following code is generating empty segments for me sometimes:  ``` ServletUriComponentsBuilder.fromCurrentRequest().path(""/{id}/files/abc/xyz.xml"").buildAndExpand(id).toString() ```  Example output:  ``` http://localhost:8787/misc/rest/v1/manifestsessions//1/files/abc/xyz.xml ```  The same seems to occur for the vanilla UriComponentsBuilder. These tests fail:  ``` @Test public void test() throws Exception {     String uri = UriComponentsBuilder.fromUriString(""http://www.foo.com/abc/"").path(""/x/y/z"").build().toString();     assertEquals(""http://www.foo.com/abc/x/y/z"", uri); }  @Test public void test2() throws Exception {     String uri = UriComponentsBuilder.fromUriString(""http://www.foo.com/abc/"").pathSegment(""x"", ""y"", ""z"").build().toString();     assertEquals(""http://www.foo.com/abc/x/y/z"", uri); } ```  I think the URI builders should sanitize the URLs and never return empty segments. A similar issue was addressed in #13715, except it seems that the issue was addressed only as it relates to the parameters passed to the pathSegment() method.  ---  **Affects:** 3.2 GA  **Issue Links:** - #16504 URIComponentsBuilder shares state across calls of .build()  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6e5cb7fbcddb08b794d2163022bf4a9534e9ea13","closed","type: bug,","spring-projects-issues","2013-02-07T20:54:03Z","2019-01-11T21:31:28Z"
"","14718","HTTP 405 (method not supported) returned instead of 406 (not acceptable) when one URL pattern supports 2 or more HTTP methods [SPR-10085]","**[Daniel Gredler](https://jira.spring.io/secure/ViewProfile.jspa?name=gredler2)** opened **[SPR-10085](https://jira.spring.io/browse/SPR-10085?redirect=false)** and commented  If I define an API that supports two HTTP methods on the same URL pattern, e.g. ""GET /cars/(id)"" (to retrieve a car) and ""DELETE /cars/(id)"" (to delete a car), then sending an unacceptable MIME type in a GET request's ""Accept"" header results in a HTTP 405 error (method not supported), instead of a HTTP 406 (not acceptable) error.  For example:  ``` @Controller @RequestMapping(value = ""/mailitems"") public class MailItemsImpl implements MailItems {      private static final String XML = ""application/xml"";     private static final String JSON = ""application/json"";      /** {@inheritDoc} */     @Override     @RequestMapping(method = POST, value = ""/"", consumes = { XML, JSON }, produces = { XML, JSON })     public @ResponseBody MailItem createMailItem(@RequestBody MailItem mailItem) {         return mailItem;     }      /** {@inheritDoc} */     @Override     @RequestMapping(method = GET, value = ""/{id}"", produces = { XML, JSON })     public @ResponseBody MailItem getMailItem(@PathVariable long id) {         return new MailItem();     }      /** {@inheritDoc} */     @Override     @RequestMapping(method = DELETE, value = ""/{id}"")     public @ResponseBody void deleteMailItem(@PathVariable long id) {         // Empty.     } } ```  Test code (using REST-assured):  ``` @Test public void testGetWithUnknownOutput() {     given()         .header(""Accept"", ""application/foo"")     .expect()         .statusCode(406) // XXX: expected 406, but we get 405...     .when()         .get(""/rest/mailitems/5""); } ```  The test passes if you remove the DELETE mapping in `MailItemsImpl`.  The issue appears to be in `RequestMappingInfoHandlerMapping.handleNoMatch()`, which somehow determines that although the GET request could not be honored due to the Accept header, the HTTP error should indicate that GET is not supported, and only DELETE is supported.  This is similar to #12037, but I think it's a different issue.  ---  **Affects:** 3.1.1","closed","in: web,","spring-projects-issues","2012-12-07T12:50:52Z","2019-01-12T16:47:21Z"
"","15369","Nested property placeholders don't work when using inline property definitions [SPR-10742]","**[daniel carter](https://jira.spring.io/secure/ViewProfile.jspa?name=dantheperson)** opened **[SPR-10742](https://jira.spring.io/browse/SPR-10742?redirect=false)** and commented  Nested/Recursive/Cross-referencing properties don't work when the properties are defined in the spring context file  ```java 	 		 		 			 				18888 				NBIService 				http://localhost:${nbiService.port}/${nbiService.path} 			 		 		 	   Caused by: org.springframework.beans.factory.BeanDefinitionStoreException: Invalid bean definition with name 'testProps' defined in class path resource [spring/mock-motive-hdm-nbi-webservice-context.xml]: Could not resolve placeholder 'nbiService.path' in string value ""http://localhost:${nbiService.port}/${nbiService.path}"" ```  If the properties are placed in a file and loaded by settings the locations property instead, it all works fine   ---  **Affects:** 3.2.3","closed","in: core,","spring-projects-issues","2013-07-15T18:06:51Z","2019-01-12T16:23:49Z"
"","15210","Doc: JMS CachingConnectionFactory incompatible with DefaultMessageListenerContainer in some circumstances [SPR-10581]","**[Daniel Blezek](https://jira.spring.io/secure/ViewProfile.jspa?name=blezek)** opened **[SPR-10581](https://jira.spring.io/browse/SPR-10581?redirect=false)** and commented  Using a CachingConnectionFactory in conjunction with a DefaultMessageListenerContainer that implements scaling using maxMessagePerTask can result in JMS messages delivered to cached consumers that are no longer attached to the DefaultMessageListenerContainer.  This problem is documented and explained in detail in this forum thread: http://forum.springsource.org/showthread.php?133467-DMLC-maxMessagesPerTask-causes-inability-to-scale-down  Suggested Fix:  Put a comment in the documentation that consumer caching is not compatible with dynamic scaling in DefaultMessageListenerContainer OR issue a warning when a developer attempts to use them together.   ---  **Affects:** 3.2 GA  **Reference URL:** http://forum.springsource.org/showthread.php?133467-DMLC-maxMessagesPerTask-causes-inability-to-scale-down","closed","type: documentation,","spring-projects-issues","2013-05-23T12:09:41Z","2013-08-06T18:35:06Z"
"","14827","distinguish ""none found"" from ""several found"" in NoSuchBeanDefinitionException [SPR-10194]","**[Dan Lipofsky](https://jira.spring.io/secure/ViewProfile.jspa?name=dlipofsky)** opened **[SPR-10194](https://jira.spring.io/browse/SPR-10194?redirect=false)** and commented  `ApplicationContext.getBean(Class)` throws NoSuchBeanDefinitionException in 2 cases: when no beans are found and when more than one matching beans are found. The only way to tell the difference is by parsing the message (which is hardly reliable, the message could change). I would like a better way to programmatically tell the difference.  One way to do this would be to add a boolean flag (e.g. `isNonUnique()`) or an integer flag (e.g. `getNumberOfBeansFound()`) to the exception.  However, a better way might be a different exception, e.g. `NoUniqueBeanException`. This can be a subclass of NoSuchBeanDefinitionException for backwards compatibility.   ---  **Affects:** 3.2 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8f103c2ea195210ac84cfc9fd56b9e21f32ecc85, https://github.com/spring-projects/spring-framework/commit/ece727bf57dac1b764cbdad94a10660c15a41c48","closed","type: enhancement,","spring-projects-issues","2013-01-18T12:39:30Z","2013-01-22T11:19:58Z"
"","15192","Formatter: call method parse() during show UI [SPR-10562]","**[Dan Iele](https://jira.spring.io/secure/ViewProfile.jspa?name=dani_bs)** opened **[SPR-10562](https://jira.spring.io/browse/SPR-10562?redirect=false)** and commented  I reported the bug here: http://jira.springsource.org/browse/SWF-1599  I thought it maybe a Framework problem instead of WebFlow problem.   ---  **Affects:** 3.2.2, 3.2.3  **Reference URL:** http://jira.springsource.org/browse/SWF-1599","closed","status: invalid,","spring-projects-issues","2013-05-14T06:54:15Z","2019-01-12T05:26:58Z"
"","15321","AntPathMatcher could throw exception when pattern contains a slash in a RegEx [SPR-10693]","**[Cristian Vasile Mocanu](https://jira.spring.io/secure/ViewProfile.jspa?name=cvmocanu)** opened **[SPR-10693](https://jira.spring.io/browse/SPR-10693?redirect=false)** and commented  See the following failing test case:  ```java     @Test     public void testBugWithPathSeparator() throws Exception {         PathMatcher pathMatcher = new AntPathMatcher();          final String pattern = ""/{var:[^/]+}"";          assertTrue(                 pathMatcher.match(pattern, ""/abc"")         );         assertFalse(                 pathMatcher.match(pattern, ""/abc/def"")         );      } ```    --- No further details from [SPR-10693](https://jira.spring.io/browse/SPR-10693?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2013-06-26T07:58:23Z","2019-01-12T00:23:16Z"
"","15362","Problems with bindingresult and different model instance  [SPR-10734]","**[Cristian Prevedello](https://jira.spring.io/secure/ViewProfile.jspa?name=cristian.prevedello)** opened **[SPR-10734](https://jira.spring.io/browse/SPR-10734?redirect=false)** and commented  ```java @RequestMapping(value = ""Test"", method = RequestMethod.POST) public ModelAndView TestPost(@ModelAttribute(""model"") TestModel model,	BindingResult results)   {  results.addError(new FieldError(""model"",""someproperty1.someproperty2"",""mymessage""));   TestModel modelService=CreateNewTestModelInstance();   return new ModelAndView(""Test"",""model"",modelService); } ```  the previous test case was working in spring 3.0.6, while it does not work anymore with 3.2.3 (or 3.2.2). It seems bidningresult is correctly handled only if the model instance returned to the view is the same instance passed to method handling the request. If i return a new modelandview with a different model instance, down the path a new bindingresult is created for the new model instance without the validation errors.    --- No further details from [SPR-10734](https://jira.spring.io/browse/SPR-10734?redirect=false)","closed","status: declined,","spring-projects-issues","2013-07-11T00:33:00Z","2019-01-12T16:23:52Z"
"","15334","Empty Optional @RequestParam raises a 400 error [SPR-10706]","**[Cristian Prevedello](https://jira.spring.io/secure/ViewProfile.jspa?name=cristian.prevedello)** opened **[SPR-10706](https://jira.spring.io/browse/SPR-10706?redirect=false)** and commented  ```java @RequestMapping(value=""/TestAction"", method=RequestMethod.GET) @ResponseBody public String TestAction(@RequestParam(value=""Argument"",required=false) Long argument) { 	if ( argument==null)     		return  ""Not supplied"";     	else     		return argument.toString(); } ```  with spring 3.0.x the method was working in all of the following cases:  1) /TestAction.htm 2) /TestAction.htm?Argument=  now with spring 3.2.3 and `RequestMappingHandlerAdapter` it works only in case 1), while in case 2) i get a 400 error.  While if i use the old `AnnotationMethodHandlerAdapter` it works in both cases.   ---  **Affects:** 3.2.3","closed","in: web,","spring-projects-issues","2013-06-28T12:17:57Z","2019-01-12T16:46:54Z"
"","15461","Configuration support for WebSocket and STOMP [SPR-10835]","**[Craig Walls](https://jira.spring.io/secure/ViewProfile.jspa?name=habuma)** opened **[SPR-10835](https://jira.spring.io/browse/SPR-10835?redirect=false)** and commented  Although Spring's programming model for working with WebSocket/STOMP is elegant and simple, the beans required are somewhat overwhelming. See the WebConfig.java class at https://github.com/rstoyanchev/spring-websocket-portfolio for an example.  It isn't necessary to understand all of the beans that go into that configuration just to get started with WebSocket/STOMP. Instead, a convenient `@EnableXXX` annotation along with a corresponding XXXConfigurer interface would make the getting-started story much more compelling.  ---  **Affects:** 4.0 M2  This issue is a sub-task of #13994  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f0dda0e38b73a9bbc4816f0cad2bd7ccdfa7911e, https://github.com/spring-projects/spring-framework/commit/4c0da5867a54d3f81098970538b9795af732d837","closed","type: task,","spring-projects-issues","2013-08-14T08:22:03Z","2019-01-11T22:04:38Z"
"","15061","Caching Abstraction should silently handle null keys [SPR-10428]","**[Craig Skinfill](https://jira.spring.io/secure/ViewProfile.jspa?name=awelynant)** opened **[SPR-10428](https://jira.spring.io/browse/SPR-10428?redirect=false)** and commented  Currently, if calculating a key results in a null value an exception is thrown.  Since the caching abstraction is suppose to be transparent, it seems better to just treat this as cache miss and call the actual method.  Throwing an exception causes code that didn't know about caching to suddenly need to deal with an exception that was unexpected.   ---  **Affects:** 3.2.2","closed","in: core,","spring-projects-issues","2013-03-29T08:33:00Z","2019-01-12T05:27:10Z"
"","14997","Thread-safety issue in RequestMappingHandlerAdapter causes NPE [SPR-10365]","**[Costi Ciudatu](https://jira.spring.io/secure/ViewProfile.jspa?name=ccciudatu)** opened **[SPR-10365](https://jira.spring.io/browse/SPR-10365?redirect=false)** and commented  I spotted a NPE in my webmvc-based application log with the following stacktrace:  ``` java.lang.NullPointerException: null         at org.springframework.web.method.annotation.ModelFactory.findSessionAttributeArguments(ModelFactory.java:141) ~[spring-web-3.2.1.RELEASE.jar:3 .2.1.RELEASE]         at org.springframework.web.method.annotation.ModelFactory.initModel(ModelFactory.java:99) ~[spring-web-3.2.1.RELEASE.jar:3.2.1.RELEASE]         at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:722)  ~[spring-webmvc-3.2.1.RELEASE.jar:3.2.1.RELEASE]         at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:686) ~[s pring-webmvc-3.2.1.RELEASE.jar:3.2.1.RELEASE]         at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:80) ~[spring-webmvc-3.2.1.R ELEASE.jar:3.2.1.RELEASE]         at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:925) ~[spring-webmvc-3.2.1.RELEASE.jar:3.2.1.RELEASE]         at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:856) ~[spring-webmvc-3.2.1.RELEASE.jar:3.2.1.RELEASE]         at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:920) [spring-webmvc-3.2.1.RELEASE.jar:3.2.1.RELEASE]         at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:816) [spring-webmvc-3.2.1.RELEASE.jar:3.2.1.RELEASE]         at javax.servlet.http.HttpServlet.service(HttpServlet.java:735) [servlet-api-3.0.jar:na]         at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:801) [spring-webmvc-3.2.1.RELEASE.jar:3.2.1.RELEASE]         at javax.servlet.http.HttpServlet.service(HttpServlet.java:848) [servlet-api-3.0.jar:na] ............ ```  After digging into the code, I realized that the shared `org.springframework.web.method.HandlerMethod` instance is performing lazy initialization of its internal `MethodParameter` array without any synchronization.  I therefore assume that the above error was due to one thread reading the array before the other one finished filling it. There's actually no other possible way that array could contain a null value.  This assumption is also backed by the fact that the error occured immediately after a server restart and I haven't been able to reproduce it.   ---  **Affects:** 3.2.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8ab8e4f7c2023df3486cdc256fbab09bb1aae73e","closed","type: bug,","spring-projects-issues","2013-03-08T16:41:07Z","2013-03-14T07:06:48Z"
"","14971","Spring MVC + Tiles3 error: ""TilesView ... does not run in an ApplicationContext"" [SPR-10337]","**[Colbert Philippe](https://jira.spring.io/secure/ViewProfile.jspa?name=colbert_philippe)** opened **[SPR-10337](https://jira.spring.io/browse/SPR-10337?redirect=false)** and commented  I use apache tomecat 7 (latest version) with spring framework 3.2.0 (almost latest version) with apache tiles 3.0.1 (latest version).   My issue has to do with simply getting a tiles view to show on the screen.    I want to use apache tiles 3 because of its powerful reuse features.  On the plus side, my application is rather big and I use many features of spring framework including hibernate, activemq and heavy use of xml application context configuration.   So spring frameworks works for me.   For this problem, I turned off all my backend functionalities to simply concentrate of displaying tiles3 views on web browsers.  I have read the reference manuals many times and read a few books on the subject many times and looked at several example applications for spring framework and apache tiles3.   My problem surely has to do with the boot-up process of tomcat, spring and tiles.  I have tried resolving this problem myself by doing xml declarative initialization (xml declarative) and annotation based initialization, but without success.  I run into this persistent error message.  I need help!   Here is the error message below.   I am also including my tomcat log files and web.xml and my java tiles configuration file.  ```   SEVERE: Servlet.service() for servlet [dispatcher] in context with path [/fantasylottery-1.0.0] threw exception  [Request processing failed; nested exception is java.lang.IllegalStateException: ApplicationObjectSupport instance  [org.springframework.web.servlet.view.tiles3.TilesView: unnamed; URL [fantasylottery.homepage]] does not run in an ApplicationContext] with root cause  java.lang.IllegalStateException: ApplicationObjectSupport instance [org.springframework.web.servlet.view.tiles3.TilesView: unnamed; URL [fantasylottery.homepage]] does not run in an ApplicationContext ```    ---  **Affects:** 3.2 GA  **Attachments:** - [BasicViews.java](https://jira.spring.io/secure/attachment/21001/BasicViews.java) (_701 bytes_) - [initialization-log_catalina.2013-02-27.log](https://jira.spring.io/secure/attachment/20999/initialization-log_catalina.2013-02-27.log) (_12.82 kB_) - [runtime-log_localhost.2013-02-27.log](https://jira.spring.io/secure/attachment/21000/runtime-log_localhost.2013-02-27.log) (_5.03 kB_) - [web.xml](https://jira.spring.io/secure/attachment/20998/web.xml) (_3.46 kB_)","closed","in: core,","spring-projects-issues","2013-02-26T22:41:24Z","2019-01-12T05:27:20Z"
"","14704","Offer model-aware exception handling option from RequestMappingHandlerAdapter.invokeHandlerMethod [SPR-10071]","**[Clark Duplichien](https://jira.spring.io/secure/ViewProfile.jspa?name=cduplichien)** opened **[SPR-10071](https://jira.spring.io/browse/SPR-10071?redirect=false)** and commented  Currently if an exception is thrown during the creation of handler method arguments, or during handler method invocation, that exception is thrown to the DispatcherServlet for handling.  The downfall to this is that the mavContainer under construction in invokeHandlerMethod is not available to any `@ExceptionHandler` method or HandlerExceptionResolver class. Without the ability to utilize the model under construction as part of the exception handling logic, the use of `@ModelAttributes` to provide reference data to the model is largely useless: this data will be unavailable to any error page, or page containing validation errors (because a bind exception is thrown).  Imaginary offhand example of this being an issue: Let's say I'm showing a cart for checkout: the load method executed to generate the view returns the user's cart object. I have a `@ModelAttribute` method which also returns a list of optional warranties I want to pawn off on the user, related to the items in the cart. If the user gets a validation error on the cart page when clicking checkout, I can no longer sell more warranties.  Side note: Even without the feature discussed here, it would also be worth looking at how locked down the invokeHandlerMethod behavior is: the invokeHandlerMethod itself is private, but worse the handleInternal method is marked final, making small behavior overrides impossible. Should a framework method be so rigid?   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d1a6ceecc2b859c3967fdfec1ce470c11f2759fd","closed","type: enhancement,","spring-projects-issues","2012-12-04T08:27:18Z","2012-12-05T06:46:45Z"
"","15357","FieldError/ConversionFailedException: XSS risk? [SPR-10729]","**[Christopher Wong](https://jira.spring.io/secure/ViewProfile.jspa?name=cwong15)** opened **[SPR-10729](https://jira.spring.io/browse/SPR-10729?redirect=false)** and commented  This problem is encountered primarily in Spring MVC, but the code is in core. If you post garbage to a field value that is converted into an enum type, you get a ConversionFailedException, whose message in turn is used as the defaultMessage property in the resulting FieldError. Trouble is, the message looks something like:  ""Failed to convert from type ... to type ... for value \""  In the absence of a message string for the error code, this is the message that gets written as the error. You can post all kinds of sneaky values and get it reflected back to the browser, including values like:  "">script>doBadthings()\    ---  **Affects:** 3.1.2  0 votes, 5 watchers","closed","status: bulk-closed,","spring-projects-issues","2013-07-09T06:10:49Z","2019-01-12T00:22:44Z"
"","14686","StandaloneMockMvcBuilder's setHandlerExceptionResolvers does not return the builder [SPR-10053]","**[Christopher Hunt](https://jira.spring.io/secure/ViewProfile.jspa?name=huntc)** opened **[SPR-10053](https://jira.spring.io/browse/SPR-10053?redirect=false)** and commented  For consistency with the other methods of StandaloneMockMvcBuilder, setHandlerExceptionResolvers should return the builder i.e.:  ``` public void setHandlerExceptionResolvers(List exceptionResolvers) {     this.handlerExceptionResolvers = exceptionResolvers; } ```  should perhaps read:  ``` public StandaloneMockMvcBuilder setHandlerExceptionResolvers(List exceptionResolvers) {     this.handlerExceptionResolvers = exceptionResolvers;     return this; } ```    ---  **Affects:** 3.2 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9643ff3f1d3eb07d984996ea3a1417301081aa52","closed","type: bug,","spring-projects-issues","2012-11-28T20:18:14Z","2012-12-03T12:18:08Z"
"","15027","Typo in Code Example [SPR-10394]","**[Christopher Hotchkiss](https://jira.spring.io/secure/ViewProfile.jspa?name=chotchki)** opened **[SPR-10394](https://jira.spring.io/browse/SPR-10394?redirect=false)** and commented  In the first code example in the reference URL the annotation is capitalized wrong. ""`@EnableSCheduling`"" should be ""`@EnableScheduling`""   ---  **Reference URL:** http://static.springsource.org/spring/docs/3.2.x/spring-framework-reference/htmlsingle/#secheduling-enable-annotation-support","closed","type: bug,","spring-projects-issues","2013-03-18T10:18:45Z","2013-04-30T13:04:22Z"
"","15493","Implement ChannelInterceptor-like feature for SockJS/WebSocket/STOMP messages [SPR-10866]","**[Christophe Levesque](https://jira.spring.io/secure/ViewProfile.jspa?name=clevesque)** opened **[SPR-10866](https://jira.spring.io/browse/SPR-10866?redirect=false)** and commented  As discussed in http://blog.springsource.org/2013/07/24/spring-framework-4-0-m2-websocket-messaging-architectures/#comment-359681 it would be nice to have some kind of interceptor for STOMP messages to inspect and apply security rules / modification to client messages before they are sent to the broker.   ---  **Affects:** 4.0 M2  **Reference URL:** http://blog.springsource.org/2013/07/24/spring-framework-4-0-m2-websocket-messaging-architectures/  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4b2847d9d12bad150e3a2e0730a331e07825b06c","closed","type: enhancement,","spring-projects-issues","2013-08-27T15:38:53Z","2013-09-30T08:40:04Z"
"","15411","Method injection causes memory leak [SPR-10785]","**[Christian Schreder](https://jira.spring.io/secure/ViewProfile.jspa?name=chris123)** opened **[SPR-10785](https://jira.spring.io/browse/SPR-10785?redirect=false)** and commented  #### Overview  Recently I recognized strange behavior in a project with around 700 tests running via Maven in one JVM. Some of the tests have different application contexts defined. As I run the tests I get an `OutOfMemoryException`. I managed to break it down to one place where a bean with method injection is defined. If I comment it out I have constant memory usage. With it, memory consumption is increasing. Reproduced on Windows 7 using JRockit 1.6.  For further investigation I wrote a reproducer. It is a simple maven project defining two beans where one bean has a method injection. I have 4 test classes with 1000 test methods per class and after each method the application context is rebuilt (via the `@DirtiesContext` annotation). Also I included a log file with activated gc-logging. I was also able to reproduce this behavior on Mac OS 10.6.8 with Sun's JDK 1.6.  #### Assumptions  - `ApplicationContext` with method injection. - Several tests with different application contexts or tests which dirty the application context => what matters is that application contexts get built often.  #### Steps to Reproduce  Run all tests in one JVM (e.g. with maven).  #### Result  Memory consumption constantly increases until an `OutOfMemoryException` is thrown.  ---  #### Analysis  The following table displays execution time, the number of classes loaded, and memory consumption when the test suite in the attached ZIP file are executed against various Java and Spring versions.  ##### Spring 3.2.x  || Spring Version          || Java Version || Time || Classes || Memory         | | `3.2.7.RELEASE`        |  JDK 1.6      |  1:54 |  6700    |  54 / 86 / 86   | | `3.2.7.RELEASE`        |  JDK 1.7      |  1:51 |  6629    |  45 / 82 / 86   | | `3.2.7.RELEASE`        |  JDK 1.8      |  1:44 |  6670    |  43 / 44 / 1082 | | `3.2.8.BUILD-SNAPSHOT` |  JDK 1.6      |  1:42 |  2716    |  21 / 22 / 86   | | `3.2.8.BUILD-SNAPSHOT` |  JDK 1.7      |  1:31 |  2629    |  17 / 22 / 86   | | `3.2.8.BUILD-SNAPSHOT` |  JDK 1.8      |  1:24 |  2683    |  17 / 18 / 1082 |  ##### Spring 4.0.x  || Spring Version          || Java Version || Time || Classes || Memory         | | `4.0.1.RELEASE`        |  JDK 1.6      |  2:27 |  6761    |  54 / 83 / 86   | | `4.0.1.RELEASE`        |  JDK 1.7      |  2:22 |  6681    |  46 / 78 / 86   | | `4.0.1.RELEASE`        |  JDK 1.8      |  2:09 |  6739    |  43 / 44 / 1082 | | `4.0.2.BUILD-SNAPSHOT` |  JDK 1.6      |  1:38 |  2758    |  22 / 22 / 86   | | `4.0.2.BUILD-SNAPSHOT` |  JDK 1.7      |  1:56 |  2675    |  17 / 22 / 86   | | `4.0.2.BUILD-SNAPSHOT` |  JDK 1.8      |  1:39 |  2741    |  18 / 19 / 1082 |  ###### Key  - **OS**: Mac OS X 10.9.1 - **Java Versions**:   |JDK|Version|   |:---|:---|   | 1.6  |  1.6.0_65-b14-462-11M4609 |   | 1.7  |  1.7.0_51-b13 |   | 1.8  |  1.8.0-b129 | - **Time**: in minutes - **Classes**: represent the number of classes loaded. - **Memory**: values are rounded and represent Used/Size/Max memory * 1,000,000 Bytes. For JDK 1.6 and 1.7, memory represents _PermGen_ usage. For JDK 1.8, memory represents _Metaspace_ usage.  ---  #### Conclusion  As can be seen in the _Analysis_ section, the fixes in Spring Framework `3.2.8.BUILD-SNAPSHOT` and `4.0.2.BUILD-SNAPSHOT` result in constant memory consumption and zero unnecessary CGLIB class generation (i.e., no longer one CGLIB class per method injected bean instance).  The following screenshots provide a visual comparison for Java 6.  ###### Before Fix (Spring 3.2.7)  !memory usage - JDK 1.6 - Spring 3.2.7.png|thumbnail!  ###### After Fix (Spring 4.0.2)  !memory usage - JDK 1.6 - Spring 4.0.2.png|thumbnail!  ---  **Affects:** 3.0 GA  **Attachments:** - [memory usage - JDK 1.6 - Spring 3.2.7.png](https://jira.spring.io/secure/attachment/21676/memory+usage+-+JDK+1.6+-+Spring+3.2.7.png) (_73.16 kB_) - [memory usage - JDK 1.6 - Spring 4.0.2.png](https://jira.spring.io/secure/attachment/21677/memory+usage+-+JDK+1.6+-+Spring+4.0.2.png) (_61.34 kB_) - [memtest.zip](https://jira.spring.io/secure/attachment/21300/memtest.zip) (_92.08 kB_)  **Issue Links:** - #16047 Inclusion of 'overloaded' in equals() and hashCode() for MethodOverride breaks equals() in AbstractBeanDefinition (_**""depends on""**_) - #12663 MemoryLeak in Cglib2AopProxy.ProxyCallbackFilter - #16047 Inclusion of 'overloaded' in equals() and hashCode() for MethodOverride breaks equals() in AbstractBeanDefinition - #15899 `@Async` with cglib based proxy causes memory leak in heap - #15223 Add ability to create proxy around classes that has no default constructor  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8028eae786ff36ea58df9a385319bf045795fa77, https://github.com/spring-projects/spring-framework/commit/1ae3eba89a40bd762c1c212156be437dde42f64c, https://github.com/spring-projects/spring-framework/commit/f2a4537b6c07aeb0dc66a2a91c73e65752e4f016, https://github.com/spring-projects/spring-framework/commit/bc879100c4fce3113d6e27318f5e19713d23b85a  **Backported to:** [3.2.8](https://github.com/spring-projects/spring-framework/milestone/96?closed=1)","closed","in: core,","spring-projects-issues","2013-07-26T07:49:33Z","2019-01-13T06:58:50Z"
"","15527","Issue when using dot(.) in RequestMapping path combined with ContentNegotiationManager favorPathExtension [SPR-10899]","**[Christian Gendreau](https://jira.spring.io/secure/ViewProfile.jspa?name=cgendreau)** opened **[SPR-10899](https://jira.spring.io/browse/SPR-10899?redirect=false)** and commented  I'm trying to return a json response from an url like _.../api/1.1/search.json?q=test_ but I'm not able to make it work using favorPathExtension in ContentNegotiationManager unless I  1. remove the dot(.) in /1.1/ to use something like /1_1/ 2. use a PathVariable /{apiVersion}/  ``` ...   	 	 	 	 	 		 			 			 	         	  ```  ``` ... @RequestMapping(value=""/api/1.1/search"",method={RequestMethod.GET}) public @ResponseBody Object handleSearch(@RequestParam String q){ 	return apiService.search(q); } ```  Using the code above:  ``` Not working: http://localhost/.../api/1.1/search.json?q=test Working: http://localhost/.../api/1.1/search?q=test ```  Even if using a `@PathVariable` is probably a good solution, I think using a dot(.) in path should work but, I may be wrong.  ---  **Affects:** 3.2.4  **Issue Links:** - #16350 [doc] `@PathVariable` in last path segment truncated if ""."" is present  (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2013-09-06T07:42:25Z","2019-01-13T06:58:14Z"
"","14818","Update to spring 3.1.3 causes SqlException when executing sql statement with null parameters, caused by changes in StatementCreatorUtils.setNull method. [SPR-10185]","**[Christiaan Rudolfs](https://jira.spring.io/secure/ViewProfile.jspa?name=crudolfs)** opened **[SPR-10185](https://jira.spring.io/browse/SPR-10185?redirect=false)** and commented  Updating our application to Spring 3.1.3 causes several SQL statements with null parameters to fail with an SqlException, while this worked in versions 3.0.x:  java.sql.SQLException: Unsupported feature. at oracle.jdbc.driver.SQLStateMapping.newSQLException(SQLStateMapping.java:70) ~[ojdbc6.jar:Oracle JDBC Driver version - ""11.1.0.7.0-Production""] at oracle.jdbc.driver.DatabaseError.newSQLException(DatabaseError.java:133) ~[ojdbc6.jar:Oracle JDBC Driver version - ""11.1.0.7.0-Production""] at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:199) ~[ojdbc6.jar:Oracle JDBC Driver version - ""11.1.0.7.0-Production""] at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:263) ~[ojdbc6.jar:Oracle JDBC Driver version - ""11.1.0.7.0-Production""] at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:271) ~[ojdbc6.jar:Oracle JDBC Driver version - ""11.1.0.7.0-Production""] at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:445) ~[ojdbc6.jar:Oracle JDBC Driver version - ""11.1.0.7.0-Production""] at oracle.jdbc.driver.DatabaseError.throwUnsupportedFeatureSqlException(DatabaseError.java:765) ~[ojdbc6.jar:Oracle JDBC Driver version - ""11.1.0.7.0-Production""] at oracle.jdbc.driver.OracleParameterMetaData.getParameterType(OracleParameterMetaData.java:156) ~[ojdbc6.jar:Oracle JDBC Driver version - ""11.1.0.7.0-Production""] at org.springframework.jdbc.core.StatementCreatorUtils.setNull(StatementCreatorUtils.java:241) [spring-jdbc-3.1.3.RELEASE.jar:3.1.3.RELEASE] at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValueInternal(StatementCreatorUtils.java:214) [spring-jdbc-3.1.3.RELEASE.jar:3.1.3.RELEASE] at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValue(StatementCreatorUtils.java:128) [spring-jdbc-3.1.3.RELEASE.jar:3.1.3.RELEASE] at org.springframework.jdbc.core.PreparedStatementCreatorFactory$PreparedStatementCreatorImpl.setValues(PreparedStatementCreatorFactory.java:298) [spring-jdbc-3.1.3.RELEASE.jar:3.1.3.RELEASE] at org.springframework.jdbc.core.PreparedStatementCreatorFactory$PreparedStatementCreatorImpl.createPreparedStatement(PreparedStatementCreatorFactory.java:251) [spring-jdbc-3.1.3.RELEASE.jar:3.1.3.RELEASE] at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:581) [spring-jdbc-3.1.3.RELEASE.jar:3.1.3.RELEASE] at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:812) [spring-jdbc-3.1.3.RELEASE.jar:3.1.3.RELEASE] at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:834) [spring-jdbc-3.1.3.RELEASE.jar:3.1.3.RELEASE] at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.update(NamedParameterJdbcTemplate.java:260) [spring-jdbc-3.1.3.RELEASE.jar:3.1.3.RELEASE] at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.update(NamedParameterJdbcTemplate.java:264) [spring-jdbc-3.1.3.RELEASE.jar:3.1.3.RELEASE]  Further investigation shows that this problem is caused by changes in the StatementCreatorUtils.setNull method done in version 3.1.2. I see that these changes have been reverted as of version 3.2.0.RC2.  ---  **Affects:** 3.1.2, 3.1.3  **Issue Links:** - #14717 NamedParameterJdbcTemplate for ""insert / select"" clause, set NULL value causes JConnect 7 (Sybase) problem - java.io.IOException: JZ0SL: Unsupported SQL type 0. - Affects 3.1.3.RELEASE, works in 3.1.1.RELEASE (_**""duplicates""**_) - #15018 JdbcTemplate cannot set null parameter with Oracle driver  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c38bde259a3a19558e7b58cd55a877009e83545b, https://github.com/spring-projects/spring-framework/commit/b62652aca1f332a685c52888ebf7fa5fc656b35e, https://github.com/spring-projects/spring-framework/commit/41f041e6aef8fb68e0df4b226adac58a3b542e24  **Backported to:** [3.1.4](https://github.com/spring-projects/spring-framework/milestone/83?closed=1)","closed","status: duplicate,","spring-projects-issues","2013-01-17T02:46:50Z","2019-01-12T16:47:13Z"
"","15263","Debug logging for DependencyInjectionTestExecutionListener breaks injection for parallel tests [SPR-10635]","**[Chris Hansen](https://jira.spring.io/secure/ViewProfile.jspa?name=chris.hansen)** opened **[SPR-10635](https://jira.spring.io/browse/SPR-10635?redirect=false)** and commented  Setup: * JUnit 4.11 * Surefire 2.14.1 with `methods` or `both` * Spring 3.2.3.RELEASE * log4j 1.2.17   * log4j.properties contains `log4j.logger.org.springframework.test.context.support.DependencyInjectionTestExecutionListener=DEBUG`  With the above setup, dependency injection works on one method, yet fails on another (same test class, separate test class instances). If you comment out `log4j.logger.org.springframework.test.context.support.DependencyInjectionTestExecutionListener=DEBUG` from log4j.properties, it works. This behavior is VERY consistent for me.  Minimal failing example project: https://github.com/hansenc/parallel-injection-bug  ---  **Affects:** 3.2.3  **Reference URL:** https://github.com/hansenc/parallel-injection-bug  **Issue Links:** - #10532 Allow for concurrent test execution in the TestContext framework (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2013-06-07T10:11:46Z","2019-01-12T16:46:56Z"
"","15332","XPath expressions in Spring MVC Test fail when using the default namespace [SPR-10704]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-10704](https://jira.spring.io/browse/SPR-10704?redirect=false)** and commented  The issue is that the XML Atom feed files we generate have CRLF line endings. The line ending is configured by the Spring class WireFeedOutput, however, there is no way to change this option without altering the Spring class itself.  Spring MVC Test provides an xpath matcher, which we had hoped to use to check some of the contents of the XML output. Unfortunately, this matcher does not work when the input file includes CRLF line endings. It looks liks this is a shortcoming of the XPath implemention we get from the javax.xml.xpath.XPathFactory. We are able to work around this by extracting the content of the response, stripping the '\r' characters, and using our own instance of the javax.xml.xpath.XPath object to inspect the file.  It would be ideal if the xpath matcher in Spring MVC Test supported \r\n characters directly. As discussed [here](http://stackoverflow.com/questions/2817378/does-the-xml-specification-states-that-parser-need-to-convert-n-r-to-n-always) it looks like the XML spec expects all parsers to perform this stripping.  FYI, here is our example test code:  ``` 	@Test 	public void containsAMaximumOf10Posts() throws Exception { 		createPosts(16);  		String urlTemplate = ""/blog/categories/blog.atom""; 		MvcResult mvcResult = mockMvc.perform(get(urlTemplate)).andReturn(); 		String atomFeed = mvcResult.getResponse().getContentAsString(); 		atomFeed = atomFeed.replaceAll(""\r"", """");  		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance(); 		DocumentBuilder builder = factory.newDocumentBuilder(); 		Document doc = builder.parse(new ByteArrayInputStream(atomFeed.getBytes()));  		XPath xpath = XPathFactory.newInstance().newXPath(); 		XPathExpression expression = xpath.compile(""//entry""); 		NodeList evaluate = (NodeList) expression.evaluate(doc, XPathConstants.NODESET); 		assertThat(evaluate.getLength(), is(10)); 	} ```    ---  **Affects:** 4.0 M1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7bab8796237a1104dd21413a3e96c311bab1889d","closed","type: enhancement,","spring-projects-issues","2013-06-27T09:55:18Z","2013-07-24T10:17:04Z"
"","14967","OpenJPA+AspectJ tests cause Gradle build to hang [SPR-10333]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-10333](https://jira.spring.io/browse/SPR-10333?redirect=false)** and commented  See comments in `OpenJpaEntityManagerFactoryWithAspectJWeavingIntegrationTests` and `TopLinkMultiEntityManagerFactoryIntegrationTests`. The latter is less important as TopLink support will be removed in Spring Framework 4.0.  These tests fail under Eclipse+JDK 7 with a `VerifyError` regarding an ""expected stackframe"". This is remedied by adding `-XX:-UseSplitVerifier` to Eclipse's default VM options.  However, regardless of that flag, leaving these tests enabled causes the Gradle build to hang, currently for unknown reasons. The tests work fine when run in isolation, e.g. with `gradle :spring-orm:test -Dtest.single=OpenJpaEntityManagerFactoryWithAspectJWeavingIntegrationTests`, but cause the build to hang when the entire test suite is run. This suggests a problem with state management in the build, as opposed to a problem with the EntityManagerFactory support itself.  For these reasons, the tests mentioned above remain `@Ignore`'d. The task, then, is to track down and resolve the build issue such that the tests can be re-enabled.  ---  **Issue Links:** - #14707 Re-enable tests that were disabled during the migration to Gradle (_**""supersedes""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/158cb346a5d6512da44685ea42fe4f0110e50151, https://github.com/spring-projects/spring-framework/commit/c0e4387cbcb9ef0b62372ae8a7a0fbca567b955a, https://github.com/spring-projects/spring-framework/commit/9c2b5b240696431bd5842ed1ea6a66b48f12e197","closed","type: task,","spring-projects-issues","2013-02-26T05:15:20Z","2019-01-11T21:03:30Z"
"","14812","Remove .aj sources from spring-aspects jar [SPR-10179]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-10179](https://jira.spring.io/browse/SPR-10179?redirect=false)** and commented  spring-aspects contains both `.aj` source files and compiled `.class` files, but should contain only the latter.  ``` $ jar tvf build/libs/spring-aspects-3.2.1.BUILD-SNAPSHOT.jar | grep AbstractBeanConfigurerAspect   2738 Wed Jan 16 08:06:18 CET 2013 org/springframework/beans/factory/aspectj/AbstractBeanConfigurerAspect.aj   4059 Wed Jan 16 08:06:18 CET 2013 org/springframework/beans/factory/aspectj/AbstractBeanConfigurerAspect.class ```    ---  **Affects:** 3.2 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e659deab4f014d550ff2da5d81b0d76b9cdf2c19","closed","type: task,","spring-projects-issues","2013-01-15T23:09:52Z","2013-01-21T05:17:04Z"
"","14788","Improve presentation of code blocks in Javadoc [SPR-10155]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-10155](https://jira.spring.io/browse/SPR-10155?redirect=false)** and commented  Compare  http://static.springsource.org/spring-framework/docs/3.1.0.RELEASE/javadoc-api/org/springframework/context/annotation/Configuration.html  with  http://static.springsource.org/spring-framework/docs/3.2.0.RELEASE/javadoc-api/org/springframework/context/annotation/Configuration.html  The former used our custom Javadoc look and feel, while the latter uses JDK7's `javadoc` and its built in look and feel. This is an overall improvement, but it did mean losing our custom treatment of `` blocks, i.e. wrapping them in a div with a gray background, etc.  Perhaps we could consider re-introducing the requisite CSS here; I do think it makes a difference to provide that extra bit of visual distinction between prose and code. If it is simple enough to do, perhaps we could also consider adding a syntax formatting library (though that may require changing `class` metadata on the individual `` tag level, which would probably be out of scope or at least not worth the trouble.  See #12762, which is irrelevant unless and until we make this change.  ---  **Affects:** 3.2 GA  **Issue Links:** - #12762 Replace all  with  in JavaDoc (_**""is depended on by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1c724069c3a76d1619d2fee78ded5aaf6ab1b69b","closed","type: documentation,","spring-projects-issues","2013-01-09T04:24:44Z","2019-01-11T21:22:16Z"
"","14763","Add @Override annotation to interfaces consistently [SPR-10130]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-10130](https://jira.spring.io/browse/SPR-10130?redirect=false)** and commented  Includes:  - Add `@Override` annotation to main sources  ---  **Issue Links:** - #14762 Update test source and target JDK compatibility to 1.7","closed","type: task,","spring-projects-issues","2012-12-28T14:37:10Z","2019-01-11T21:23:24Z"
"","14762","Update test source and target JDK compatibility to 1.7 [SPR-10129]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-10129](https://jira.spring.io/browse/SPR-10129?redirect=false)** and commented  Includes:  - Add `@Override` annotation throughout test sources  ---  **Issue Links:** - #14763 Add `@Override` annotation to interfaces consistently","closed","type: task,","spring-projects-issues","2012-12-28T14:00:14Z","2019-01-13T07:01:42Z"
"","14761","Polish Javadoc [SPR-10128]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-10128](https://jira.spring.io/browse/SPR-10128?redirect=false)** and commented  Including:  - Replace \ with {`@code`} (see #9761) - Fix all Javadoc warnings  ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fe039030a0adfee8d5c63d1af2fca031debece11, https://github.com/spring-projects/spring-framework/commit/9540d2c81b93b9062faf79d4df998525f3dedb7c, https://github.com/spring-projects/spring-framework/commit/8597ec25ec4da57b93aaf956b1219db4d214e961","closed","type: task,","spring-projects-issues","2012-12-28T12:01:18Z","2019-01-11T21:23:09Z"
"","14760","Polish whitespace [SPR-10127]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-10127](https://jira.spring.io/browse/SPR-10127?redirect=false)** and commented  Including:  - trailing whitespace - converting spaces to tabs    ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/84e2be4412701fd7b6dfa6a97aa787ba383086fb, https://github.com/spring-projects/spring-framework/commit/2cf45bad860f560d3a5806eb23ffe1669e907673, https://github.com/spring-projects/spring-framework/commit/1762157ad1a89ff8778387a2c72a8e36ff341a40","closed","type: task,","spring-projects-issues","2012-12-28T10:52:04Z","2013-01-24T01:58:48Z"
"","14759","Replace EasyMock with Mockito in test sources [SPR-10126]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-10126](https://jira.spring.io/browse/SPR-10126?redirect=false)** and commented   --- No further details from [SPR-10126](https://jira.spring.io/browse/SPR-10126?redirect=false)","closed","type: task,","spring-projects-issues","2012-12-28T08:52:01Z","2013-05-07T12:18:54Z"
"","14757","Introduce new CI build plan(s) using Bamboo's branch detection [SPR-10124]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-10124](https://jira.spring.io/browse/SPR-10124?redirect=false)** and commented   --- No further details from [SPR-10124](https://jira.spring.io/browse/SPR-10124?redirect=false)","closed","","spring-projects-issues","2012-12-27T08:31:44Z","2019-01-11T21:24:36Z"
"","14754","spring-oxm-1.5.xsd is no longer available online [SPR-10121]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-10121](https://jira.spring.io/browse/SPR-10121?redirect=false)** and commented  As part of the publication of Spring Framework 3.2.0.RELEASE schemas on December 17th, the `spring-oxm-1.5.xsd` file was inadvertently removed. This problem has been fixed and will be prevented in the future now that we have added the 1.5 version of the schema to all active maintenance branches in the framework repository (3.1.x, 3.2.x and master). Any subsequent releases of these versions will publish the 1.5 version of the schema.  With that said, `spring-oxm-1.5.oxm` is now very outdated and should no longer be used in any application working against Spring Framework 3.0 or greater.  See also [this comment](https://jira.springsource.org/browse/SPR-9427?focusedCommentId=79125&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-79125) explaining why your application should never need to fetch Spring XSDs online, and how to ensure this is the case.  ---  **Reference URL:** http://www.springsource.org/schema/oxm/  **Issue Links:** - #14062 The URLs for some of the Spring xsd files are not accessible  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/418c2a86410a00c9d3d28ee8b6f56e1c6c4d6780, https://github.com/spring-projects/spring-framework/commit/3724b90a8fb83f44995d9a527b10016d86781a74","closed","in: data,","spring-projects-issues","2012-12-26T00:29:11Z","2019-01-11T21:24:23Z"
"","14744","Processing java.math.BigDecimal via Spring's ExtendedBeanInfo fails sporadically [SPR-10111]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-10111](https://jira.spring.io/browse/SPR-10111?redirect=false)** and commented  This issue was spawned from #14336. See comments there for background.  ---  **Issue Links:** - #14336 ExtendedBeanInfo exception - java.beans.IntrospectionException  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1c306dffcd0b450b4f3d07d07934dd83b89193b3, https://github.com/spring-projects/spring-framework/commit/26d5ef93e6ddb7d3ba5774b5e427b0dc6b61516f, https://github.com/spring-projects/spring-framework/commit/aa3e0be1a066e0322000a7cbc61b27ef3ed74180  **Backported to:** [3.1.4](https://github.com/spring-projects/spring-framework/milestone/83?closed=1)","closed","in: core,","spring-projects-issues","2012-12-19T16:53:52Z","2019-01-11T21:25:31Z"
"","14711","Support external Javadoc links [SPR-10078]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-10078](https://jira.spring.io/browse/SPR-10078?redirect=false)** and commented  On Dec 5, 2012, at 3:08 PM, [Jon Brisbin](https://jira.spring.io/secure/ViewProfile.jspa?name=jbrisbin) wrote:  > I'm using Gradle 1.3 and all I did was add the following to the javadoc {} block: >      >     options.linksOffline ""http://static.springsource.org/spring/docs/current/javadoc-api/"", ""http://static.springsource.org/spring/docs/current/javadoc-api/"" >     options.linksOffline ""http://docs.oracle.com/javase/6/docs/api/"", ""http://docs.oracle.com/javase/6/docs/api/""  UPDATE: it's actually `options.links`, not `options.linksOffline` that should be used here.   ---  **Affects:** 3.2 M1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f26534700a6646a6a6cf8debcffe8f108a7c9d9e","closed","type: enhancement,","spring-projects-issues","2012-12-06T01:20:35Z","2012-12-12T04:44:11Z"
"","15482","Out of memory occurred when responding big file data using ShallowEtagHeaderFilter [SPR-10855]","**[ChangMin Jeon](https://jira.spring.io/secure/ViewProfile.jspa?name=jcm1981@gmail.com)** opened **[SPR-10855](https://jira.spring.io/browse/SPR-10855?redirect=false)** and commented  There is out of memory occured when responding big file data using ShallowEtagHeaderFilter.  We configured mvc like below.                                      For example, If a client request resource with http://localhost/data/content/a.zip(1GBytes) then following stack trace is shown.  But It's normal when commenting out ETAG filter configuration.  I also attached spring's web.xml and apache tomcat's web.xml.  java.lang.OutOfMemoryError: Requested array size exceeds VM limit at java.util.Arrays.copyOf(Unknown Source) at java.io.ByteArrayOutputStream.grow(Unknown Source) at java.io.ByteArrayOutputStream.ensureCapacity(Unknown Source) at java.io.ByteArrayOutputStream.write(Unknown Source) at org.springframework.web.filter.ShallowEtagHeaderFilter$ShallowEtagResponseWrapper$ResponseServletOutputStream.write(ShallowEtagHeaderFilter.java:245) at org.springframework.util.StreamUtils.copy(StreamUtils.java:125) at org.springframework.util.FileCopyUtils.copy(FileCopyUtils.java:109) at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.writeContent(ResourceHttpRequestHandler.java:244) at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:145) at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:49) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:925) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:856) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:936) at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:827) at javax.servlet.http.HttpServlet.service(HttpServlet.java:621) at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:812) at javax.servlet.http.HttpServlet.service(HttpServlet.java:728) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:305) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) at org.springframework.web.filter.ShallowEtagHeaderFilter.doFilterInternal(ShallowEtagHeaderFilter.java:73) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:343) at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:109) at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:83) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:355) at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:97) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:355) at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:100) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:355) at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:78)   ---  **Affects:** 3.2.2  **Attachments:** - [spring-web.xml](https://jira.spring.io/secure/attachment/21359/spring-web.xml) (_2.31 kB_) - [web.xml](https://jira.spring.io/secure/attachment/21358/web.xml) (_163.59 kB_)","closed","status: invalid,","spring-projects-issues","2013-08-23T01:15:27Z","2019-01-12T05:26:43Z"
"","15410","Provide a way to overwrite Controllers [SPR-10784]","**[Cemo Koc](https://jira.spring.io/secure/ViewProfile.jspa?name=cemkoc)** opened **[SPR-10784](https://jira.spring.io/browse/SPR-10784?redirect=false)** and commented  Please provide a way to overwrite Controllers without creating ambiguous mappings.  Use case: I am using a library which is providing excellent spring components for my business. However there are some business requirements and I need to extend provided Controllers slightly.    ---  **Affects:** 3.2.3","closed","status: bulk-closed,","spring-projects-issues","2013-07-26T07:15:49Z","2019-01-12T02:33:20Z"
"","15394","Spring dependency injection for Jackson serializers [SPR-10768]","**[Cemo Koc](https://jira.spring.io/secure/ViewProfile.jspa?name=cemkoc)** opened **[SPR-10768](https://jira.spring.io/browse/SPR-10768?redirect=false)** and commented  Spring does not has support injecting capabilities for JsonSerializers. This is almost same as Validator part of Spring project. Serializers must be created by Spring and injected necessary parts to inside it.  a sample:  ``` @Component public class PhotoSerializer extends JsonSerializer {     @Autowired    TestService testService;     @Override    public void serialize(String value, JsonGenerator jgen, SerializerProvider provider) throws IOException {       jgen.writeString(testService.directory() + ""/photo/"".concat(value));    } } ```  ---  **Affects:** 3.2.3  **Issue Links:** - #15887 Require Jackson 2.1+, Quartz 2.1.4+, EhCache 2.5+ - #11715 Allow usage of ConversionService for Jackson HttpMessageConverter - #18919 SpringHandlerInstantiator should support all HandlerInstantiator-provided factory methods  3 votes, 12 watchers","closed","type: enhancement,","spring-projects-issues","2013-07-22T09:38:36Z","2019-01-11T22:03:24Z"
"","14869","StringHttpMessageConverter closes output stream causes problem with FormHttpMessageConverter [SPR-10236]","**[Carlus Henry](https://jira.spring.io/secure/ViewProfile.jspa?name=chenry)** opened **[SPR-10236](https://jira.spring.io/browse/SPR-10236?redirect=false)** and commented  We have the need to accept an HttpRequest with the content-type of multipart/form-data.  We then have to turn around and respond with the same content-type of multipart/form-data.  We are using the FormHttpMessageConverter in order to accomplish this.  However, during testing, we noticed that we were only receiving one form-data parameter part.  After debugging the code, we realized that this was due to the fact that the StringHttpMessageConverter is used to convert the String type elements.  After writing the first string to the output, it closes the outputstream.  Then when it tries to write the next form-data part, it throws an exception since the output stream has already been closed.  Here are the order of operations:  FormHttpMessageConverter(FHMC) StringHttpMessageConverter(SHMC)  FHMC.writePart() -> SHMC.write() -> SHMC.writeInternal() -> FileUtils.copy()...The FileUtilsCopy will close the outputstream.  ---  **Affects:** 3.2.1  **Issue Links:** - #14728 Ensure HttpMessageConverter classes don't close the response stream (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2013-01-29T11:19:06Z","2019-01-12T16:47:10Z"
"","15101","GenericCallMetaDataProvider.processProcedureColumns problem when the database is HUGE [SPR-10468]","**[Carlos Guzman](https://jira.spring.io/secure/ViewProfile.jspa?name=cguzzman)** opened **[SPR-10468](https://jira.spring.io/browse/SPR-10468?redirect=false)** and commented  we have a Sybase database with huge data and stored procedures. because of that, the execution of databaseMetaData.getProcedures took more long than we can accept. (line 294 @ version 3.2.2). This is because Sybase execute the internal sp_jdbc_stored_procedures when that line is called.  I'm proposing to add an enviroment property to avoid validation of the stored procedure. something like this:  if (System.getProperty('spring.jdbc.procedure.metadata.avoidvalidation') == null){ // execution of line 294 to 312 } procs = databaseMetaData.getProcedureColumns(....).... etc  this will be usefull, we don't need the validation avoided because we know what we are doing.  I can provide the modified java class if you want.    ---  **Affects:** 3.2.2, 3.2.3, 4.0 M3","closed","status: bulk-closed,","spring-projects-issues","2013-04-16T11:30:35Z","2019-01-12T00:24:04Z"
"","14727","Publish XSDs for Spring Framework 3.2 [SPR-10094]","**[Canny Duck](https://jira.spring.io/secure/ViewProfile.jspa?name=cannyduck)** opened **[SPR-10094](https://jira.spring.io/browse/SPR-10094?redirect=false)** and commented  Please publish the XSDs for the Release 3.2 in http://www.springframework.org/schema/   ---  **Affects:** 3.2 GA","closed","","spring-projects-issues","2012-12-14T04:55:02Z","2019-01-11T19:10:19Z"
"","15462","3.2.4 View Resolver Issue when defaultContentType Property Defined [SPR-10836]","**[Brian Prewitt](https://jira.spring.io/secure/ViewProfile.jspa?name=prewittb)** opened **[SPR-10836](https://jira.spring.io/browse/SPR-10836?redirect=false)** and commented  We are attempting to migrate to Spring 3.2.4.  The view resolver is returning MappingJacksonJsonView, when it should be returning FreemarkerView.  In 3.1.1, it correctly returns FreeMarkerView.  I've added an attachment with details.  ---  **Affects:** 3.2.4  **Attachments:** - [SPR-10836 Additional Details.doc](https://jira.spring.io/secure/attachment/21340/SPR-10836+Additional+Details.doc) (_208.50 kB_) - [Spring Case.doc](https://jira.spring.io/secure/attachment/21339/Spring+Case.doc) (_103.00 kB_)  **Issue Links:** - #15144 Improve defaulting of media types via ContentNegotiationManager","closed","status: declined,","spring-projects-issues","2013-08-14T12:15:06Z","2019-01-13T21:02:47Z"
"","14872","Problem loading TX namespace in bean context [SPR-10239]","**[Brian Gaston](https://jira.spring.io/secure/ViewProfile.jspa?name=btgaston)** opened **[SPR-10239](https://jira.spring.io/browse/SPR-10239?redirect=false)** and commented  After upgrading from 3.2.0 to 3.2.1, Im getting an exception when the context is loaded.  SEVERE: Exception sending context initialized event to listener instance of class org.springframework.web.context.ContextLoaderListener org.springframework.beans.factory.parsing.BeanDefinitionParsingException: Configuration problem: Unable to locate Spring NamespaceHandler for XML schema namespace http://www.springframework.org/schema/tx  Below is the XML namespace declarations  \ \   ---  **Affects:** 3.2.1","closed","status: invalid,","spring-projects-issues","2013-01-29T18:52:23Z","2019-01-12T05:27:28Z"
"","15473","NamedParameterJdbcTemplate should implement setFetchSize() [SPR-10846]","**[Brandon Bremen](https://jira.spring.io/secure/ViewProfile.jspa?name=bbremen)** opened **[SPR-10846](https://jira.spring.io/browse/SPR-10846?redirect=false)** and commented  JdbcTemplate implements the setFetchSize(int) method which allows for retrieving arbitrarily large result sets.  NamedParameterJdbcTemplate lacks this method making it unusable for large data sets.  NamedParameterJdbcTemplate should expose this method and delegate to its internal JdbcTemplate object.   --- No further details from [SPR-10846](https://jira.spring.io/browse/SPR-10846?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2013-08-19T18:42:14Z","2019-01-12T02:33:00Z"
"","15298","Documentation in 17.15.3 Configuring Interceptors incorrect [SPR-10670]","**[Brad Grow](https://jira.spring.io/secure/ViewProfile.jspa?name=ichbin)** opened **[SPR-10670](https://jira.spring.io/browse/SPR-10670?redirect=false)** and commented  It would seem the \ tag in the example given needs to be updated to include the mvc schema.  This code:  ```xml                                                                         ```  Should be:  ```xml                                                                         ```    ---  **Affects:** 3.2.3  **Reference URL:** http://static.springsource.org/spring/docs/3.2.x/spring-framework-reference/html/mvc.html#mvc-config-interceptors  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/26fb880622eb4032f9eb984068a80e8c43ab3d74","closed","type: enhancement,","spring-projects-issues","2013-06-19T13:43:14Z","2013-07-24T10:17:11Z"
"","15282","Improve property placeholder resolution when multiple configurers are declared [SPR-10654]","**[Bozhidar Bozhanov](https://jira.spring.io/secure/ViewProfile.jspa?name=bozho)** opened **[SPR-10654](https://jira.spring.io/browse/SPR-10654?redirect=false)** and commented  There are some problems when working with multiple  are defined (possibly in multiple .xml files)  - when there are more than one configurers, the ""ignore-unresolved"" must be set to ""true"", otherwise startup fails, because one configurer doesn't have all the required properties  - if there are nested properties obtained from multiple locations, startup fails, because ignore-unresolved does not affect the ignoreUnresolvableNestedPlaceholders property.  Here are some more details on my current issue: http://stackoverflow.com/questions/17084563/spring-namespacehandler-and-multiple-property-placeholders  Currently it is solved by setting env.setIgnoreUnresolvableNestedPlaceholders(true), but I think there should be available for configuration via tha *PlaceholderConfigurer. Currently it is a property of the PropertyResolver and is not accessible from anywhere, apart from the Environment  ---  **Affects:** 3.2 GA  **Issue Links:** - #14623 Using multiple PropertyPlaceholderConfigurer breaks `@Value` default value behavior (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2013-06-13T03:28:17Z","2019-01-13T06:59:23Z"
"","14816","Customizable parameter name when binding an object [SPR-10183]","**[Bozhidar Bozhanov](https://jira.spring.io/secure/ViewProfile.jspa?name=bozho)** opened **[SPR-10183](https://jira.spring.io/browse/SPR-10183?redirect=false)** and commented  When binding request parameters to an object, you should be able to customize the name, like you can with `@RequestParameter`(""prop_name"") propName.  Something like:  `@CommandParameter`(""editor_text"") private String text;  I have written on the subject here: http://techblog.bozho.net/?p=779  ---  **Issue Links:** - #13880 Provide a way to customize the names of JavaBean properties when they're read and written for data binding purposes - #18012 Add `@FormAttribute` attributes to customize x-www-form-urlencoded (_**""is superseded by""**_)  2 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2013-01-16T07:02:15Z","2019-01-13T07:01:33Z"
"","15116","Getting an Exception While using RMIProxFactoryBean [SPR-10483]","**[BOLLA VINOD KUMAR](https://jira.spring.io/secure/ViewProfile.jspa?name=vinodkumar)** opened **[SPR-10483](https://jira.spring.io/browse/SPR-10483?redirect=false)** and commented  I am using Spring 2.6 both on client and Servers.We are trying to execute code in two to three servers.On one server I got executed successfully but facing issue in remaining servers. The Exception:  Caused by: org.springframework.remoting.RemoteLookupFailureException: Lookup of RMI stub failed; nested exception is java.rmi.UnmarshalException: error unmarshalling re turn; nested exception is:         java.lang.ClassNotFoundException: org.springframework.remoting.rmi.RmiInvocationWrapper_Stub (no security manager: RMI class loader disabled)  But when i trying to execute the code as test client stand alone program its success fully executed on all the servers.  Please respond to issue ASAP. Attached the Exception Log   ---  **Attachments:** - [Exception.txt](https://jira.spring.io/secure/attachment/21177/Exception.txt) (_10.33 kB_)","closed","status: invalid,","spring-projects-issues","2013-04-24T04:45:06Z","2019-01-12T05:27:02Z"
"","14962","NPE while parsing an invalid indexer expression [SPR-10328]","**[Bohumir Zamecnik](https://jira.spring.io/secure/ViewProfile.jspa?name=bzamecnik)** opened **[SPR-10328](https://jira.spring.io/browse/SPR-10328?redirect=false)** and commented  There is a problem in parsing an invalid expression - the last element indexer missing the index: ""$[]"". An `EvaluationException` should be thrown but I get a `NullPointerException` instead. Simple code for reproduction of the bug:  ```java List list = Arrays.asList(""foo"", ""bar"", ""baz""); ExpressionParser parser = new SpelExpressionParser(); Expression exp = parser.parseExpression(""$[]""); exp.getValue(list); // NullPointerException ```  One problem is that the constructor of the `org.springframework.expression.spel.ast.Selection.Selection` class accepts a null-valued parameter `SpelNodeImpl` expression. The core problem is that the `org.springframework.expression.spel.standard.InternalSpelExpressionParser.maybeEatSelection()` method does not check the expression returned from `eatExpression()` for null. In such case it should probably throw the `EvaluationException`.  Please see the attached stacktrace for details.   ---  **Affects:** 3.2.1  **Attachments:** - [spel-stacktrace.txt](https://jira.spring.io/secure/attachment/20982/spel-stacktrace.txt) (_4.17 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/82bd06f255896c0b3399935967fbf06811356f69","closed","in: core,","spring-projects-issues","2013-02-24T12:45:14Z","2013-02-26T00:30:42Z"
"","15184","Servlet 3.0 annotations cause BeanDefinitionStoreException in integration tests [SPR-10553]","**[Black dong](https://jira.spring.io/secure/ViewProfile.jspa?name=dongyuxue)** opened **[SPR-10553](https://jira.spring.io/browse/SPR-10553?redirect=false)** and commented  #### Overview  In my application, there are some classes marked with Servlet 3.0 annotations like `@WebServlet`. When I run tests involving these classes, there are test case failures.  1. If I remove these classes, all test cases pass. 2. If I change the jdk to 1.7, failed too. 3. There is no error when running my app in jetty/tomcat.  I think this is a bug for spring test.  #### Attachments  - `AsyncServle.java`: class annotated with `@WebServlet` - `applicationContext.xml`: Spring configuration - `cornerstone.springframework.context.AnnotationConfigApplicationContextTest.txt`: JUnit log for the failing test  #### Root Error  ``` Caused by: java.lang.UnsupportedClassVersionError: javax/servlet/annotation/WebServlet : Unsupported major.minor version 51.0 	at java.lang.ClassLoader.defineClass1(Native Method) 	at java.lang.ClassLoader.defineClassCond(ClassLoader.java:631) 	at java.lang.ClassLoader.defineClass(ClassLoader.java:615) 	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:141) 	at java.net.URLClassLoader.defineClass(URLClassLoader.java:283) 	at java.net.URLClassLoader.access$000(URLClassLoader.java:58) 	at java.net.URLClassLoader$1.run(URLClassLoader.java:197) 	at java.security.AccessController.doPrivileged(Native Method) 	at java.net.URLClassLoader.findClass(URLClassLoader.java:190) 	at java.lang.ClassLoader.loadClass(ClassLoader.java:306) 	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301) 	at java.lang.ClassLoader.loadClass(ClassLoader.java:247) 	at org.springframework.core.type.classreading.RecursiveAnnotationAttributesVisitor.visitEnd(AnnotationAttributesReadingVisitor.java:165) 	at org.springframework.asm.ClassReader.a(Unknown Source) 	at org.springframework.asm.ClassReader.accept(Unknown Source) 	at org.springframework.asm.ClassReader.accept(Unknown Source) 	at org.springframework.core.type.classreading.SimpleMetadataReader.(SimpleMetadataReader.java:64) 	at org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(SimpleMetadataReaderFactory.java:80) 	at org.springframework.core.type.classreading.CachingMetadataReaderFactory.getMetadataReader(CachingMetadataReaderFactory.java:102) 	at org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.findCandidateComponents(ClassPathScanningCandidateComponentProvider.java:257) 	... 54 more ```    ---  **Affects:** 3.2.2  **Attachments:** - [applicationContext.xml](https://jira.spring.io/secure/attachment/21200/applicationContext.xml) (_1.06 kB_) - [AsyncServle.java](https://jira.spring.io/secure/attachment/21199/AsyncServle.java) (_1.86 kB_) - [cornerstone.springframework.context.AnnotationConfigApplicationContextTest.txt](https://jira.spring.io/secure/attachment/21198/cornerstone.springframework.context.AnnotationConfigApplicationContextTest.txt) (_21.56 kB_)","closed","in: core,","spring-projects-issues","2013-05-12T19:45:03Z","2019-01-11T22:15:37Z"
"","14949","The label  can not contains odd length of double byte characters(like Chinese:'中国人'), otherwise there will be xml parser error [SPR-10315]","**[Black dong](https://jira.spring.io/secure/ViewProfile.jspa?name=dongyuxue)** opened **[SPR-10315](https://jira.spring.io/browse/SPR-10315?redirect=false)** and commented  When I use property dependency injection, there is an error if the label \ contains odd length of double byte characters.  Here is the bean definition fragment:  ```xml                   ([\S ]+)]]>                       下一页]]>        ```  If I change the '下一页' to '下一\S', it will be OK.  Here is the error info:  ``` Exception in thread ""main"" org.springframework.beans.factory.BeanDefinitionStoreException: IOException parsing XML document from class path resource [spider.xml]; nested exception is com.sun.org.apache.xerces.internal.impl.io.MalformedByteSequenceException: Invalid byte 3 of 3-byte UTF-8 sequence. 	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:408) 	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:334) 	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:302) 	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:174) 	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:209) 	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:180) 	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:243) 	at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:127) 	at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:93) 	at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:131) 	at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:537) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:451) 	at org.springframework.context.support.ClassPathXmlApplicationContext.(ClassPathXmlApplicationContext.java:139) 	at org.springframework.context.support.ClassPathXmlApplicationContext.(ClassPathXmlApplicationContext.java:93) 	at cornerstone.spider.Spider.main(Spider.java:12) Caused by: com.sun.org.apache.xerces.internal.impl.io.MalformedByteSequenceException: Invalid byte 3 of 3-byte UTF-8 sequence. 	at com.sun.org.apache.xerces.internal.impl.io.UTF8Reader.invalidByte(UTF8Reader.java:684) 	at com.sun.org.apache.xerces.internal.impl.io.UTF8Reader.read(UTF8Reader.java:432) 	at com.sun.org.apache.xerces.internal.impl.XMLEntityScanner.load(XMLEntityScanner.java:1742) 	at com.sun.org.apache.xerces.internal.impl.XMLEntityScanner.scanData(XMLEntityScanner.java:1242) 	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanCDATASection(XMLDocumentFragmentScannerImpl.java:1654) 	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl$FragmentContentDriver.next(XMLDocumentFragmentScannerImpl.java:2986) 	at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:647) 	at com.sun.org.apache.xerces.internal.impl.XMLNSDocumentScannerImpl.next(XMLNSDocumentScannerImpl.java:140) 	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:511) 	at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:808) 	at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:737) 	at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:119) 	at com.sun.org.apache.xerces.internal.parsers.DOMParser.parse(DOMParser.java:232) 	at com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderImpl.parse(DocumentBuilderImpl.java:284) 	at org.springframework.beans.factory.xml.DefaultDocumentLoader.loadDocument(DefaultDocumentLoader.java:75) 	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:388) 	... 14 more ```    ---  **Affects:** 3.2 GA  **Attachments:** - [snapshot.jpg](https://jira.spring.io/secure/attachment/21176/snapshot.jpg) (_81.50 kB_) - [spider.xml](https://jira.spring.io/secure/attachment/20972/spider.xml) (_2.67 kB_) - [spider.zip](https://jira.spring.io/secure/attachment/21104/spider.zip) (_1.14 kB_)","closed","in: core,","spring-projects-issues","2013-02-20T00:01:36Z","2019-01-12T05:27:23Z"
"","14833","Can not Instantiate 'java.util.Calendar' with a static factory method [SPR-10200]","**[Black dong](https://jira.spring.io/secure/ViewProfile.jspa?name=dongyuxue)** opened **[SPR-10200](https://jira.spring.io/browse/SPR-10200?redirect=false)** and commented  1. to test the 'Instantiation with a static factory method', add the config    \\ 2. get the bean with context    Calendar calendar = context.getBean(""calendarBean"", Calendar.class);  errors when create the contex: java.lang.IncompatibleClassChangeError: class org.springframework.core.LocalVariableTableParameterNameDiscoverer$ParameterNameDiscoveringVisitor has interface org.springframework.asm.ClassVisitor as super class at java.lang.ClassLoader.defineClass1(Native Method) at java.lang.ClassLoader.defineClassCond(ClassLoader.java:631) at java.lang.ClassLoader.defineClass(ClassLoader.java:615) at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:141) at java.net.URLClassLoader.defineClass(URLClassLoader.java:283) at java.net.URLClassLoader.access$000(URLClassLoader.java:58) at java.net.URLClassLoader$1.run(URLClassLoader.java:197) at java.security.AccessController.doPrivileged(Native Method) at java.net.URLClassLoader.findClass(URLClassLoader.java:190) at java.lang.ClassLoader.loadClass(ClassLoader.java:306) at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301) at java.lang.ClassLoader.loadClass(ClassLoader.java:247) at org.springframework.core.LocalVariableTableParameterNameDiscoverer.inspectClass(LocalVariableTableParameterNameDiscoverer.java:114) at org.springframework.core.LocalVariableTableParameterNameDiscoverer.getParameterNames(LocalVariableTableParameterNameDiscoverer.java:72) at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:459) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1029) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:925) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:490) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:461) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:295) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:292) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:607) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:895) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:425) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:139) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:93) at cornerstone.springframework.context.ClassPathXmlApplicationContextTest.setup(ClassPathXmlApplicationContextTest.java:24) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15) at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41) at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:27) at org.junit.runners.BlockJUnit4ClassRunner.runNotIgnored(BlockJUnit4ClassRunner.java:79) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:71) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:49) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184) at org.junit.runners.ParentRunner.run(ParentRunner.java:236) at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)    ---  **Affects:** 3.2 GA","closed","in: core,","spring-projects-issues","2013-01-22T01:22:14Z","2019-01-12T05:27:33Z"
"","15287","Add expected header name to assert message for HeaderResultMatchers [SPR-10659]","**[Björn Voß](https://jira.spring.io/secure/ViewProfile.jspa?name=bjoern.voss)** opened **[SPR-10659](https://jira.spring.io/browse/SPR-10659?redirect=false)** and commented  #### Status Quo  Both `string(..)` methods in `HeaderResultMatchers` do not add the _expected response header name_ to the assert message; whereas, the `longValue()` method does.  It would be much easier to read failed test messages if the _expected response header name_ were always included in the failure message.  #### Deliverables  1. [x] Add the _expected response header name_ to the assertion failure messages generated by the `string(String, String)` and `string(String, Matcher)` methods in `HeaderResultMatchers`.    ---  **Affects:** 3.2.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d5a5a4894fe0f04caa0d934e9fffa2b44181903a","closed","type: enhancement,","spring-projects-issues","2013-06-17T06:01:36Z","2013-07-24T10:17:08Z"
"","15203","RequestMappingHandlerMapping setDefaultHandler method occured Exception [SPR-10574]","**[bin choi](https://jira.spring.io/secure/ViewProfile.jspa?name=kwo2002)** opened **[SPR-10574](https://jira.spring.io/browse/SPR-10574?redirect=false)** and commented  Normally When you register defaultHandler, In the DefaultAnnotationHandlerMapping of the SpringFramework3.0 work.When you register But, defaultHandler the springframework3.2 RequestMappingHandlerMapping, does not operate normally.I think that even if register the defaultHandler RequestMappingHandlerMapping HandlerMethod not create, it seems to be due to     ↑↑↑↑↑↑↑↑ Spring 3.0.0 It Works ↑↑↑↑↑↑↑↑↑↑↑↑     ↑↑↑↑↑↑↑↑↑↑ Spring 3.2.2 It does not Works ↑↑↑↑↑↑↑↑↑↑ I guess this problem is HandlerMethod.   ---  **Affects:** 3.2.2  **Attachments:** - [defaulthandlerbug.png](https://jira.spring.io/secure/attachment/21206/defaulthandlerbug.png) (_122.25 kB_)","closed","status: declined,","spring-projects-issues","2013-05-20T00:29:57Z","2019-01-12T16:24:03Z"
"","15261","CDI-like transaction-aware events for [SPR-10633]","**[Benjamin Diedrichsen](https://jira.spring.io/secure/ViewProfile.jspa?name=bennidi)** opened **[SPR-10633](https://jira.spring.io/browse/SPR-10633?redirect=false)** and commented  There is a lot of discussion about whether Spring will support/integrate with CDI in the future and quite some blogs that offer hand-made solutions for making Spring partly CDI aware.These posts focus mainly on DI and bean scopes.  One thing that I really miss in Spring is the eventing (specifically the transaction-aware/conditional)listeners.  As the creator of MBassador (a light-weight event/message bus) I tried to come up with a solution for that specific functionality. It works pretty well for my use cases so far and there is room for extension. I just wanted to get some feedback whether this is considered a valuable addition. Maybe I could get some support/ideas on how to extend and best integrate it with existing spring components.  Please have a look at https://github.com/bennidi/mbassador-spring  ---  **Issue Links:** - #16696 Add support for transaction bound application events (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2013-06-07T03:54:20Z","2019-01-11T22:26:25Z"
"","14756","Exclude bean-invocations from the Spring-internal synchronization [SPR-10123]","**[Barnabas Bodnar](https://jira.spring.io/secure/ViewProfile.jspa?name=bbodnar)** opened **[SPR-10123](https://jira.spring.io/browse/SPR-10123?redirect=false)** and commented  During the instantiation/initialization of beans in Spring is even bean-code (eg. implementations of org.springframework.beans.factory.InitializingBean.afterPropertiesSet()) invoked within synchronized code-blocks. As the bean-code may invoke further application-related synchronized code, nesting of synchronization and consequently deadlocks can arise, even at a correct concurrency-related design on the application-level (however, not considering the Spring-internal synchronization).  Currently, such deadlocks can only be avoided, if the application-developer takes account also for the Spring-internal synchronization, which should - in my opinion - not be a requirement (not to mention the complexity of such solutions). Therefore, the Spring-internal synchronization should preferably **not** include invocations of bean-code.  The attached project demonstrates a deadlock of the mentioned sort (works with all the released Spring-versions from 3.0 to 3.2).  ``` Found one Java-level deadlock: ============================= ""pool-1-thread-2"":   waiting to lock monitor 0x00007f1980004968 (object 0x00000007d7161470, a demo.spring.Singleton1),   which is held by ""pool-1-thread-1"" ""pool-1-thread-1"":   waiting to lock monitor 0x00007f1980005f10 (object 0x00000007d6caa148, a java.util.concurrent.ConcurrentHashMap),   which is held by ""pool-1-thread-2""  Java stack information for the threads listed above: =================================================== ""pool-1-thread-2"": 	at demo.spring.Singleton1.getLazily(Singleton1.java:19) 	- waiting to lock  (a demo.spring.Singleton1) 	at demo.spring.Singleton2.afterPropertiesSet(Singleton2.java:18) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1545) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1483) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:524) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:461) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:295) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223) 	- locked  (a java.util.concurrent.ConcurrentHashMap) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:292) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:198) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:270) 	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1125) 	at demo.spring.Main$2.call(Main.java:31) 	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303) 	at java.util.concurrent.FutureTask.run(FutureTask.java:138) 	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) 	at java.lang.Thread.run(Thread.java:662) ""pool-1-thread-1"": 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:182) 	- waiting to lock  (a java.util.concurrent.ConcurrentHashMap) 	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:468) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:338) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:316) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:303) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:257) 	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1125) 	at demo.spring.Singleton1.getLazily(Singleton1.java:20) 	- locked  (a demo.spring.Singleton1) 	at demo.spring.Main$1.call(Main.java:24) 	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303) 	at java.util.concurrent.FutureTask.run(FutureTask.java:138) 	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) 	at java.lang.Thread.run(Thread.java:662)  Found 1 deadlock. ```    ---  **Affects:** 3.2 GA  **Attachments:** - [deadlock-at-singleton-instantiation.zip](https://jira.spring.io/secure/attachment/20829/deadlock-at-singleton-instantiation.zip) (_5.71 kB_)","closed","status: bulk-closed,","spring-projects-issues","2012-12-27T07:46:27Z","2019-01-12T02:35:30Z"
"","14719","Sometimes throws Classcast exception for cglib [SPR-10086]","**[Badal Pradhan](https://jira.spring.io/secure/ViewProfile.jspa?name=badal)** opened **[SPR-10086](https://jira.spring.io/browse/SPR-10086?redirect=false)** and commented  Hi,  It is quite strange and mystry to find the below exception sometimes during deployment in Weblogic App Server.  java.lang.ClassCastException: net.sf.cglib.proxy.Enhancer$EnhancerKey$$KeyFactoryByCGLIB$$7fb24d72 incompatible with net.sf.cglib.core.KeyFactory  I am using cglib-nodep-2.1_3.jar file for Spring and packing in ear.    ---  **Affects:** 2.5.5","closed","type: bug,","spring-projects-issues","2012-12-08T16:00:04Z","2012-12-12T06:19:49Z"
"","15110","Spring Castor Unmarshaller [SPR-10477]","**[AX](https://jira.spring.io/secure/ViewProfile.jspa?name=ab-trax)** opened **[SPR-10477](https://jira.spring.io/browse/SPR-10477?redirect=false)** and commented  Hi,  i cannot ignore extra elements using spring oxm and castor. There is always an error at the log file:  ``` org.springframework.oxm.UnmarshallingFailureException: Castor unmarshalling exception; nested exception is org.exolab.castor.xml.MarshalException: Unable to find FieldDescriptor for  ```  I'm using the following xml configuration:  ```  		 		 	  		 		 		 	 ```  ``` public class XmlConverter {          protected final Log log = LogFactory.getLog(getClass());      private Marshaller marshaller;     private Unmarshaller unmarshaller;       public Marshaller getMarshaller() {         return marshaller;     }       public void setMarshaller(Marshaller marshaller) {         this.marshaller = marshaller;     }       public Unmarshaller getUnmarshaller() {         return unmarshaller;     }       public void setUnmarshaller(Unmarshaller unmarshaller) {         this.unmarshaller = unmarshaller;     }       public void convertFromObjectToXML(Object object, String filepath)         throws IOException {           FileOutputStream os = null;         try {             os = new FileOutputStream(filepath);             getMarshaller().marshal(object, new StreamResult(os));         } finally {             if (os != null) {                 os.close();             }         }     }       public Object convertFromXMLToObject(String xmlfile) throws IOException {           FileInputStream is = null;         try {             is = new FileInputStream(xmlfile);             return getUnmarshaller().unmarshal(new StreamSource(is));         } finally {             if (is != null) {                 is.close();             }         }     }          public Object convertFromByteArrayOutputStreamtoObject(ByteArrayOutputStream baos) throws XmlMappingException, IOException {         try {             InputStream is = new ByteArrayInputStream(baos.toByteArray());             return getUnmarshaller().unmarshal(new StreamSource(is));         } finally {         }     }          public Object convertFromStringtoObject(String string) throws XmlMappingException, IOException {         try { //            CastorMarshaller unm = (CastorMarshaller) getUnmarshaller(); //            unm.setIgnoreExtraElements(true); //            unm.setIgnoreExtraAttributes(true);             return getUnmarshaller().unmarshal(new StreamSource(IOUtils.toInputStream(string)));         }          finally {         }     } } ```  But it seems that this has no effects to castor.  Please give me some information how to solve this.  Best regards  Alex   ---  **Affects:** 3.1.1","closed","in: core,","spring-projects-issues","2013-04-20T12:29:01Z","2019-01-12T05:27:04Z"
"","15078","Null pointer exception in CallableStatementCreatorFactory [SPR-10445]","**[Ashish Kumar Dwivedi](https://jira.spring.io/secure/ViewProfile.jspa?name=a.kumar.er)** opened **[SPR-10445](https://jira.spring.io/browse/SPR-10445?redirect=false)** and commented  java.lang.NullPointerException at org.springframework.jdbc.core.CallableStatementCreatorFactory$CallableStatementCreatorImpl.createCallableStatement(CallableStatementCreatorFactory.java:167) at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:1008) at org.springframework.jdbc.core.JdbcTemplate.call(JdbcTemplate.java:1064) at org.springframework.jdbc.object.StoredProcedure.execute(StoredProcedure.java:125)  My analysis(may be it can help) Looks like, If we pass a null connection object, it throws a null pointer exception so looks like we need a null check fro connection in createCallableStatement function..  Thanks Ashish   --- No further details from [SPR-10445](https://jira.spring.io/browse/SPR-10445?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2013-04-05T16:46:37Z","2019-01-12T00:24:16Z"
"","15009","Schuduler Enable/Disable from a boolean value. [SPR-10376]","**[Ashis Kumar Panigrahy](https://jira.spring.io/secure/ViewProfile.jspa?name=pinkupanigrahy)** opened **[SPR-10376](https://jira.spring.io/browse/SPR-10376?redirect=false)** and commented  There should be option to Enable and Disable the Scheduler.   --- No further details from [SPR-10376](https://jira.spring.io/browse/SPR-10376?redirect=false)","closed","type: enhancement,","spring-projects-issues","2013-03-14T05:46:38Z","2013-04-30T14:11:50Z"
"","15250","The jdbc property file reader not trimming the properties for the space at the end [SPR-10622]","**[Arvind Rathod](https://jira.spring.io/secure/ViewProfile.jspa?name=arvind.rathod)** opened **[SPR-10622](https://jira.spring.io/browse/SPR-10622?redirect=false)** and commented  The jdbc property file reader not trimming the properties for the space at the end. If you add space to at the end of driver class name it start giving exception class no found and driver not found. Please check for other properties also. e.g. try following,  ``` app.jdbc.driverClassName=com.mysql.jdbc.Driver      app.jdbc.url=jdbc:mysql://localhost/ app.jdbc.username= app.jdbc.password= ```    ---  **Affects:** 3.0.2","closed","type: enhancement,","spring-projects-issues","2013-06-04T00:47:52Z","2015-03-25T09:17:48Z"
"","15341","Make HttpHeaders getFirstDate(String headerName) and setDate(String headerName, long date) methods as public [SPR-10713]","**[Artem Bilan](https://jira.spring.io/secure/ViewProfile.jspa?name=abilan)** opened **[SPR-10713](https://jira.spring.io/browse/SPR-10713?redirect=false)** and commented   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b0675c031e548949a311d91a7a99c4a5c3a36fc2, https://github.com/spring-projects/spring-framework/commit/cb774409361f1f18a61a2f73687f84308cb22040","closed","type: enhancement,","spring-projects-issues","2013-07-02T01:34:03Z","2019-01-11T22:27:59Z"
"","15276","HttpHeaders should be tolerant with bad date-aware headers as it said in the RFC 2616 [SPR-10648]","**[Artem Bilan](https://jira.spring.io/secure/ViewProfile.jspa?name=abilan)** opened **[SPR-10648](https://jira.spring.io/browse/SPR-10648?redirect=false)** and commented  See the **Expires** header description in the RFC. Now if the value of similar header is not valid `HttpHeaders` throws `IllegalArgumentException`. IMO it should return **-1** as in case header is null. In additions see the linked issue.  We'll be glad to hear any thoughts, why `HttpHeaders` works now such way?   ---  **Affects:** 3.2.3  **Reference URL:** http://tools.ietf.org/html/rfc2616#page-127  **Issue Links:** - [INT-3063](https://jira.spring.io/browse/INT-3063) HTTP gateway response fails with non-standard expires header  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9245fffcaf42d5ec8a2485c14440b72d71cdd2ec, https://github.com/spring-projects/spring-framework/commit/0f71da5be668b8f4d9d403d64efd605e24b05f7f","closed","type: bug,","spring-projects-issues","2013-06-12T00:24:11Z","2013-08-06T18:35:05Z"
"","15275","Make UriComponents.UriTemplateVariables public [SPR-10647]","**[Artem Bilan](https://jira.spring.io/secure/ViewProfile.jspa?name=abilan)** opened **[SPR-10647](https://jira.spring.io/browse/SPR-10647?redirect=false)** and commented  And provide a contract method `expand(UriTemplateVariables uriVariables)`. There are some cases when it's not appropriate to use existing 'expand' abilities. See the linked issue and its PR.   ---  **Issue Links:** - [INT-3054](https://jira.spring.io/browse/INT-3054) Make HttpRequestExecutingMessageHandler more lenient on extra declared uri variables  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/08d36cf2e49bd1cbd4558e05ec5f646d272926fd","closed","type: enhancement,","spring-projects-issues","2013-06-12T00:04:51Z","2013-08-29T16:20:41Z"
"","15229","Rename HttpHeaders#getIfNotModifiedSince() to getIfModifiedSince() to avoid confusing [SPR-10600]","**[Artem Bilan](https://jira.spring.io/secure/ViewProfile.jspa?name=abilan)** opened **[SPR-10600](https://jira.spring.io/browse/SPR-10600?redirect=false)** and commented  See the linked issue and its PR. In addition it would be useful to make some methods `public`: getFirstDate setDate   ---  **Affects:** 3.1.4, 3.2.3, 4.0 M1  **Issue Links:** - [INT-2995](https://jira.spring.io/browse/INT-2995) If-Modified-Since is formatted date string but DefaultHttpHeaderMapper is handling it as long value and causes NumberFormatException  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/38c2f253ed743a143e54ef95f7525daedece2486, https://github.com/spring-projects/spring-framework/commit/55f02db18e659e8523156465f70ac01b30ecab86","closed","type: bug,","spring-projects-issues","2013-05-29T00:51:13Z","2013-07-24T10:17:04Z"
"","15082","NPE in the ContextLoader#customizeContext on building Assert.isAssignable message [SPR-10449]","**[Artem Bilan](https://jira.spring.io/secure/ViewProfile.jspa?name=abilan)** opened **[SPR-10449](https://jira.spring.io/browse/SPR-10449?redirect=false)** and commented  If we implement `ApplicationContextInitializer` without generic parametrization, we get NPE on `initializerContextClass.getName()`. To reproduce it just modify `org.springframework.web.context.ContextLoaderTests.TestContextInitializer` as described here. IMO fix should simple: just add 'null check'. Thanks  ---  **Affects:** 3.2.2  **Issue Links:** - #13261 ContextLoader does not validate ApplicationContextInitializer classes correctly (_**""supersedes""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a19c976f7f2ef9bb295552018e9c1e6f4ef3af65, https://github.com/spring-projects/spring-framework/commit/faa8430fd76658a50f97936cab77a8d1f0b7b309","closed","type: bug,","spring-projects-issues","2013-04-08T04:09:28Z","2019-01-11T21:13:55Z"
"","14985","AbstractApplicationEventMulticaster#getApplicationListeners() should have double check for 'this.retrieverCache.get(cacheKey)' within synchronized block [SPR-10351]","**[Artem Bilan](https://jira.spring.io/secure/ViewProfile.jspa?name=abilan)** opened **[SPR-10351](https://jira.spring.io/browse/SPR-10351?redirect=false)** and commented  In the multi-threaded publishing events environment `AbstractApplicationEventMulticaster#supportsEvent()` may be invoked twice (or more) for the same event type: from first Thread, who builds cache entry in the synchronized block, and from second (and so on), who is waiting synchronization monitor.  ---  **Issue Links:** - #13117 Performance bottleneck and potential thread deadlock in DefaultSingletonBeanRegistry","closed","type: enhancement,","spring-projects-issues","2013-03-04T07:58:01Z","2019-01-11T21:01:45Z"
"","14820","FormHttpMessageConverter#writePart NPE on 'partBody.getClass()' [SPR-10187]","**[Artem Bilan](https://jira.spring.io/secure/ViewProfile.jspa?name=abilan)** opened **[SPR-10187](https://jira.spring.io/browse/SPR-10187?redirect=false)** and commented  The simple way to reproduce just make one of values as `null` in the `FormHttpMessageConverterTests#writeMultipart()`. At a glance it seems like enough to skip such 'parts'.   ---  **Affects:** 3.1.3, 3.2 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b1267b95b9fa15719e9f8312175d573e1b082e59, https://github.com/spring-projects/spring-framework/commit/0c56e86bfb7617b8a92ff187c9aec20c20db9da2  **Backported to:** [3.1.4](https://github.com/spring-projects/spring-framework/milestone/83?closed=1)","closed","type: bug,","spring-projects-issues","2013-01-17T04:50:56Z","2013-01-21T11:11:31Z"
"","14886","Refreshing annotated Groovy controllers cause ClassCastException [SPR-10253]","**[arnolf](https://jira.spring.io/secure/ViewProfile.jspa?name=arnolf)** opened **[SPR-10253](https://jira.spring.io/browse/SPR-10253?redirect=false)** and commented  To use Groovy controllers, proxy-target-class attribute has to be set to true (#10935). To turn on the refreshable beans feature, refresh-check-delay has to be set.  ```xml  ```  When we use both, refreshing modified Groovy controller throws `ClassCastException` :  ``` java.lang.ClassCastException: TestController cannot be cast to TestController 	at TestController$$FastClassByCGLIB$$bfb641ee.invoke() 	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204) 	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:698) 	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:150) 	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:131) 	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:119) 	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172) 	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:631) 	at TestController$$EnhancerByCGLIB$$a8e94a91.printWelcome() 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 	at java.lang.reflect.Method.invoke(Method.java:597) 	at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.invokeHandlerMethod(HandlerMethodInvoker.java:176) 	at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.invokeHandlerMethod(AnnotationMethodHandlerAdapter.java:439) 	at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.handle(AnnotationMethodHandlerAdapter.java:427) 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:925) 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:856) 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:915) 	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:811) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:617) 	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:796) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:646) 	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:551) 	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:488) 	at org.apache.taglibs.standard.tag.common.core.ImportSupport.acquireString(ImportSupport.java:296) 	at org.apache.taglibs.standard.tag.common.core.ImportSupport.doEndTag(ImportSupport.java:161) 	at org.apache.jsp.WEB_002dINF.pages.hello_jsp._jspx_meth_c_005fimport_005f0(hello_jsp.java:98) ```  ---  **Affects:** 3.1 GA, 3.2 GA, 3.2.1  **Attachments:** - [springmvc.zip](https://jira.spring.io/secure/attachment/20924/springmvc.zip) (_9.07 kB_)  **Issue Links:** - #16906 Add support for dynamic languages refreshable beans in `@Configuration` classes  1 votes, 4 watchers","closed","status: bulk-closed,","spring-projects-issues","2013-02-03T09:35:31Z","2019-01-13T07:01:14Z"
"","14726","Support OPTIONS method in the MVC Test framework [SPR-10093]","**[Arnaud Cogoluègnes](https://jira.spring.io/secure/ViewProfile.jspa?name=arnaud.cogoluegnes)** opened **[SPR-10093](https://jira.spring.io/browse/SPR-10093?redirect=false)** and commented  `MockMvcRequestBuilders` doesn't contain an `options` method.  This is easily worked around, but the `DispatcherServlet` doesn't dispatch `OPTIONS` requests by default (see the `FrameworkServlet.dispatchOptionsRequest` flag).  `DefaultMockMvcBuilder` could expose this flag; otherwise, I don't see a way to test `OPTIONS` requests with the test framework.   ---  **Affects:** 3.2 GA","closed","type: enhancement,","spring-projects-issues","2012-12-13T10:52:42Z","2013-01-08T07:06:01Z"
"","15259","TypeDescriptor must be Serializable [SPR-10631]","**[Arnaud Brunet](https://jira.spring.io/secure/ViewProfile.jspa?name=gronono)** opened **[SPR-10631](https://jira.spring.io/browse/SPR-10631?redirect=false)** and commented  Hello,  As TypeDescriptor is a field of ConversionFailedException, and an exception must be Serializable, TypeDescriptor must implement Serializable interface.  Regards, Arnaud   ---  **Affects:** 3.0.5, 3.0.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9eb596a7e55b5f0ba5bbce8b7073cd93b59d9c01, https://github.com/spring-projects/spring-framework/commit/440a63a3d0a10c687feeccd5e6ac2d8a48dcb1e7","closed","in: core,","spring-projects-issues","2013-06-05T22:22:00Z","2013-07-24T10:17:05Z"
"","15432","Fix potential security risk when using Spring OXM [SPR-10806]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-10806](https://jira.spring.io/browse/SPR-10806?redirect=false)** and commented  The issue is concerned with XML entity resolution. The idea is to use an XML entity to resolve to an local file on the host system (for instance, /etc/passwd). See https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Processing for more details. To resolve this issue, simply disable external entity resolution when dealing with XML from external sources. The way to do that depends on the XML API that you use.  DOM When using DOM, simply set the expandEntityReferences property on the DocumentBuilderFactory to false. For instance:  ```java DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance(); documentBuilderFactory.setExpandEntityReferences(false); DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder(); Document document = documentBuilder.parse(externalSource); ```  SAX When using SAX, set the ""http://xml.org/sax/features/external-general-entities"" feature on the XMLReader to false. For instance:  ```java XMLReader xmlReader = XMLReaderFactory.createXMLReader(); xmlReader.setFeature(""http://xml.org/sax/features/external-general-entities"", false); xmlReader.parse(new InputSource(externalSource)); ```  StAX When using StAX, set the IS_REPLACING_ENTITY_REFERENCES property on the XMLInputFactory to false. For instance:  ```java XMLInputFactory factory = XMLInputFactory.newInstance(); factory.setProperty(XMLInputFactory.IS_REPLACING_ENTITY_REFERENCES, false); XMLStreamReader reader = factory.createXMLStreamReader(externalSource); ```  Spring OXM  When using any of the Spring OXM Marshallers for unmarshalling from an external source, please use the code above to disable entity resolution before passing on a Source to the marshaller. For instance, when using DOM:  ```java DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance(); documentBuilderFactory.setExpandEntityReferences(false); DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder(); Document document = documentBuilder.parse(externalSource); DOMSource source = new DOMSource(document); Jaxb2Marshaller jaxb2Marshaller = ... Object unmarshalled = jaxb2Marshaller.unmarshal(source); ```  ---  **Affects:** 3.2.3  **Attachments:** - [Jaxb2CollectionHttpMessageConverter.patch](https://jira.spring.io/secure/attachment/21319/Jaxb2CollectionHttpMessageConverter.patch) (_905 bytes_)  **Issue Links:** - #16003 Jaxb2RootElementHttpMessageConverter is susceptible to XXE vulnerability - #15704 Disable the processing of external entities in SourceHttpMessageConverter by default","closed","type: enhancement,","spring-projects-issues","2013-08-05T07:51:43Z","2019-01-11T22:05:43Z"
"","15356","Request streaming for HttpComponentsClientHttpRequestFactory [SPR-10728]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-10728](https://jira.spring.io/browse/SPR-10728?redirect=false)** and commented  The HttpComponentsClientHttpRequest buffers the request contents in memory before sending it over the wire. This can take up significant amounts of memory for large POSTs/PUTs.  It would be nice if we avoid having to buffer request content in memory, but rather stream it directly to the output. We probably want to use org.apache.http.HttpEntity for this purpose.  ---  **Issue Links:** - #10848 Upgrade Apache HttpClient to version 4.0 - #21124 RestTemplate with HttpComponentsClientHttpRequestFactory and no buffering with an interceptor throws UnsupportedOperationException  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/14ab2c88cc512a92d82db1f8fbb22d53445c6aa2  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2013-07-09T02:53:00Z","2019-01-11T22:04:29Z"
"","14969","Introduce a pre-resolved target type in RootBeanDefinition [SPR-10335]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-10335](https://jira.spring.io/browse/SPR-10335?redirect=false)** and commented  It would be great if the `RootBeanDefiniton` would have a pre-resolved target type field, so that - if the target type is know beforehand - we do not have to resort to predicting it the various bean factories.  ---  **Issue Links:** - #15007 Type detection fails for child bean if parent bean has been resolved before - #19149 Allow programmatic registration of bean definitions with a ResolvableType  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c986a1efc12a8c0c1c0e797ea5c0d3023e0b0287","closed","type: enhancement,","spring-projects-issues","2013-02-26T06:48:35Z","2019-01-11T21:03:37Z"
"","15506","CGLIB Imports required in Web Servlet bundle to deploy a web application in OSGi environment [SPR-10879]","**[Aritra Chatterjee](https://jira.spring.io/secure/ViewProfile.jspa?name=aritrachatterjee)** opened **[SPR-10879](https://jira.spring.io/browse/SPR-10879?redirect=false)** and commented  The following tools are being used: SpringMVC, Gemini Web, Equinox container.  On using a JavaConfig to create a Web application, the following stack is seen: java.lang.ClassNotFoundException: net.sf.cglib.proxy.Callback cannot be found by org.springframework.web.servlet_3.1.4.RELEASE at org.eclipse.osgi.internal.loader.BundleLoader.findClassInternal(BundleLoader.java:501) at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:421) at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:412) at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.loadClass(DefaultClassLoader.java:107) at java.lang.ClassLoader.loadClass(ClassLoader.java:266) at java.lang.Class.getDeclaredMethods0(Native Method) at java.lang.Class.privateGetDeclaredMethods(Class.java:2482) at java.lang.Class.getDeclaredMethod(Class.java:1982) at net.sf.cglib.proxy.Enhancer.getCallbacksSetter(Enhancer.java:627) at net.sf.cglib.proxy.Enhancer.setCallbacksHelper(Enhancer.java:615) at net.sf.cglib.proxy.Enhancer.registerStaticCallbacks(Enhancer.java:591) at org.springframework.context.annotation.ConfigurationClassEnhancer.createClass(ConfigurationClassEnhancer.java:149) at org.springframework.context.annotation.ConfigurationClassEnhancer.enhance(ConfigurationClassEnhancer.java:106) at org.springframework.context.annotation.ConfigurationClassPostProcessor.enhanceConfigurationClasses(ConfigurationClassPostProcessor.java:361) at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanFactory(ConfigurationClassPostProcessor.java:246) at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:687) at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:626) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:454) at org.springframework.web.servlet.FrameworkServlet.configureAndRefreshWebApplicationContext(FrameworkServlet.java:631) at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:588) at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:645) at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:508) at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:449) at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:133) at javax.servlet.GenericServlet.init(GenericServlet.java:244) at org.apache.catalina.core.StandardWrapper.initServlet(StandardWrapper.java:1266) at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1185) at org.apache.catalina.core.StandardWrapper.load(StandardWrapper.java:1080) at org.apache.catalina.core.StandardContext.loadOnStartup(StandardContext.java:5015) at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5302) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150) at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:895) at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:871) at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:615) at org.eclipse.gemini.web.tomcat.internal.TomcatServletContainer.startWebApplication(TomcatServletContainer.java:125) at org.eclipse.gemini.web.internal.StandardWebApplication.start(StandardWebApplication.java:95) at org.eclipse.gemini.web.extender.WebContainerBundleCustomizer.addingBundle(WebContainerBundleCustomizer.java:45) at org.osgi.util.tracker.BundleTracker$Tracked.customizerAdding(BundleTracker.java:467) at org.osgi.util.tracker.BundleTracker$Tracked.customizerAdding(BundleTracker.java:1) at org.osgi.util.tracker.AbstractTracked.trackAdding(AbstractTracked.java:256) at org.osgi.util.tracker.AbstractTracked.track(AbstractTracked.java:229) at org.osgi.util.tracker.BundleTracker$Tracked.bundleChanged(BundleTracker.java:443) at org.eclipse.osgi.framework.internal.core.BundleContextImpl.dispatchEvent(BundleContextImpl.java:847) at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:230) at org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous(ListenerQueue.java:148) at org.eclipse.osgi.framework.internal.core.Framework.publishBundleEventPrivileged(Framework.java:1568) at org.eclipse.osgi.framework.internal.core.Framework.publishBundleEvent(Framework.java:1504) at org.eclipse.osgi.framework.internal.core.Framework.publishBundleEvent(Framework.java:1499) at org.eclipse.osgi.framework.internal.core.BundleHost.startWorker(BundleHost.java:391) at org.eclipse.osgi.framework.internal.core.AbstractBundle.resume(AbstractBundle.java:390) at org.eclipse.osgi.framework.internal.core.Framework.resumeBundle(Framework.java:1176) at org.eclipse.osgi.framework.internal.core.StartLevelManager.resumeBundles(StartLevelManager.java:559) at org.eclipse.osgi.framework.internal.core.StartLevelManager.resumeBundles(StartLevelManager.java:544) at org.eclipse.osgi.framework.internal.core.StartLevelManager.incFWSL(StartLevelManager.java:457) at org.eclipse.osgi.framework.internal.core.StartLevelManager.doSetStartLevel(StartLevelManager.java:243) at org.eclipse.osgi.framework.internal.core.StartLevelManager.dispatchEvent(StartLevelManager.java:438) at org.eclipse.osgi.framework.internal.core.StartLevelManager.dispatchEvent(StartLevelManager.java:1) at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:230) at org.eclipse.osgi.framework.eventmgr.EventManager$EventThread.run(EventManager.java:340)  I modified the Spring Web Servlet MANIFEST to include: net.sf.cglib.core, net.sf.cglib.proxy, net.sf.cglib.reflect  The application gets deployed successfully.   ---  **Affects:** 3.1.4","closed","status: bulk-closed,","spring-projects-issues","2013-08-29T19:55:08Z","2019-01-12T02:32:28Z"
"","15505","Cyclic Dependency detected when using Spring ORM in an OSGi environment [SPR-10878]","**[Aritra Chatterjee](https://jira.spring.io/secure/ViewProfile.jspa?name=aritrachatterjee)** opened **[SPR-10878](https://jira.spring.io/browse/SPR-10878?redirect=false)** and commented  Here are the steps to reproduce the issue: 1)Download all spring bundles from EBR 2)Import to Eclipse using Import as Plugins and Fragments 3) Eclipse shows: A cycle was detected in the build path of project 'org.springframework.orm'. The cycle consists of projects {org.springframework.context, org.springframework.orm, org.springframework.aspects, org.springframework.jdbc, org.springframework.transaction, org.springframework.web, org.springframework.oxm, org.springframework.context.support, org.springframework.web.servlet, org.springframework.jms, org.springframework.web.portlet}  4) Close the Spring-ORM plugin and the cycle is gone.  This issue is preventing me from using Spring 3.2.x in an OSGi environment to create a web application using Gemini JPA, Gemini Web, Gemini Blueprint, Spring MVC, Spring Hateoas.   ---  **Affects:** 3.2 GA, 3.2.1, 3.2.2, 3.2.3  **Attachments:** - [1.png](https://jira.spring.io/secure/attachment/21367/1.png) (_131.07 kB_) - [2.png](https://jira.spring.io/secure/attachment/21368/2.png) (_135.25 kB_)","closed","status: declined,","spring-projects-issues","2013-08-29T19:34:27Z","2019-01-12T16:35:58Z"
"","15509","oxm:jibx-marshaller lacks support for ""target-package"" annotation [SPR-10882]","**[Archie Cobbs](https://jira.spring.io/secure/ViewProfile.jspa?name=archie172)** opened **[SPR-10882](https://jira.spring.io/browse/SPR-10882?redirect=false)** and commented  A `JiBXMarshaller` bean must have either its `targetClass` or `targetPackage` configured.  But the `` XML tag only supports the `target-class` annotation, not the `target-package` annotation.  This is inconvenient when configuring a `targetPackage` because you can't used the `` tag, and appears to be just a simple omission.  Add support for a `target-package` annotation to the `` element.   ---  **Affects:** 3.2.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d202573e1a582cd1c3b48d0ee75110a458a4da89","closed","type: enhancement,","spring-projects-issues","2013-08-30T11:09:25Z","2013-10-31T12:28:06Z"
"","15441","Untranslated Hibernate exception [SPR-10815]","**[Archie Cobbs](https://jira.spring.io/secure/ViewProfile.jspa?name=archie172)** opened **[SPR-10815](https://jira.spring.io/browse/SPR-10815?redirect=false)** and commented  The `HibernateJpaDialect` failed to translate the following exception into a `TransientDataAccessException` as it should have:  ``` Caused by: javax.persistence.PessimisticLockException: could not obtain pessimistic lock         at org.hibernate.ejb.AbstractEntityManagerImpl.wrapLockException(AbstractEntityManagerImpl.java:1439)         at org.hibernate.ejb.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1324)         at org.hibernate.ejb.AbstractEntityManagerImpl.find(AbstractEntityManagerImpl.java:828)         at org.hibernate.ejb.AbstractEntityManagerImpl.find(AbstractEntityManagerImpl.java:790)         at sun.reflect.GeneratedMethodAccessor246.invoke(Unknown Source)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)         at java.lang.reflect.Method.invoke(Method.java:606)         at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:241)         at com.sun.proxy.$Proxy58.find(Unknown Source)         ... 30 more Caused by: org.hibernate.dialect.lock.PessimisticEntityLockException: could not obtain pessimistic lock         at org.hibernate.dialect.lock.PessimisticWriteSelectLockingStrategy.lock(PessimisticWriteSelectLockingStrategy.java:114)         at org.hibernate.persister.entity.AbstractEntityPersister.lock(AbstractEntityPersister.java:1896)         at org.hibernate.event.internal.AbstractLockUpgradeEventListener.upgradeLock(AbstractLockUpgradeEventListener.java:99)         at org.hibernate.event.internal.DefaultLoadEventListener.loadFromSessionCache(DefaultLoadEventListener.java:512)         at org.hibernate.event.internal.DefaultLoadEventListener.doLoad(DefaultLoadEventListener.java:404)         at org.hibernate.event.internal.DefaultLoadEventListener.load(DefaultLoadEventListener.java:204)         at org.hibernate.event.internal.DefaultLoadEventListener.lockAndLoad(DefaultLoadEventListener.java:370)         at org.hibernate.event.internal.DefaultLoadEventListener.onLoad(DefaultLoadEventListener.java:151)         at org.hibernate.internal.SessionImpl.fireLoad(SessionImpl.java:1079)         at org.hibernate.internal.SessionImpl.access$2200(SessionImpl.java:172)         at org.hibernate.internal.SessionImpl$IdentifierLoadAccessImpl.load(SessionImpl.java:2418)         at org.hibernate.internal.SessionImpl.get(SessionImpl.java:1034)         at org.hibernate.ejb.AbstractEntityManagerImpl.find(AbstractEntityManagerImpl.java:801)         ... 36 more Caused by: org.hibernate.exception.LockAcquisitionException: Deadlock found when trying to get lock; try restarting transaction         at org.hibernate.dialect.MySQLDialect$1.convert(MySQLDialect.java:392)         at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:49)         at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:125)         at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:110)         at org.hibernate.engine.jdbc.internal.proxy.AbstractStatementProxyHandler.continueInvocation(AbstractStatementProxyHandler.java:129)         at org.hibernate.engine.jdbc.internal.proxy.AbstractProxyHandler.invoke(AbstractProxyHandler.java:81)         at com.sun.proxy.$Proxy95.executeQuery(Unknown Source)         at org.hibernate.dialect.lock.PessimisticWriteSelectLockingStrategy.lock(PessimisticWriteSelectLockingStrategy.java:87)         ... 48 more Caused by: com.mysql.jdbc.exceptions.jdbc4.MySQLTransactionRollbackException: Deadlock found when trying to get lock; try restarting transaction         at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)         at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)         at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)         at java.lang.reflect.Constructor.newInstance(Constructor.java:526)         at com.mysql.jdbc.Util.handleNewInstance(Util.java:411)         at com.mysql.jdbc.Util.getInstance(Util.java:386)         at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:1066)         at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:4120)         at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:4052)         at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2503)         at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2664)         at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2815)         at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:2155)         at com.mysql.jdbc.PreparedStatement.executeQuery(PreparedStatement.java:2322)         at com.jolbox.bonecp.PreparedStatementHandle.executeQuery(PreparedStatementHandle.java:172)         at sun.reflect.GeneratedMethodAccessor192.invoke(Unknown Source)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)         at java.lang.reflect.Method.invoke(Method.java:606)         at org.hibernate.engine.jdbc.internal.proxy.AbstractStatementProxyHandler.continueInvocation(AbstractStatementProxyHandler.java:122)         ... 51 more ```  Is there a missing check for `PessimisticEntityLockException`?  Hibernate version is 4.1.6.Final.  ---  **Affects:** 3.2.2  **Issue Links:** - #16293 Lock error is not translated to PessimisticLockingFailureException or subclass when using JPA (Hibernate)","closed","type: enhancement,","spring-projects-issues","2013-08-07T12:39:03Z","2019-01-11T22:05:22Z"
"","15186","Small clarification to CronTrigger javadoc [SPR-10556]","**[Archie Cobbs](https://jira.spring.io/secure/ViewProfile.jspa?name=archie172)** opened **[SPR-10556](https://jira.spring.io/browse/SPR-10556?redirect=false)** and commented  It wasn't clear to me that a `CronTrigger` would never schedule overlapping executions.  This additional javadoc may help clarify this for others:  ``` --- CronTrigger.java.orig	2013-05-13 11:11:16.000000000 -0500 +++ CronTrigger.java	2013-05-13 11:12:10.000000000 -0500 @@ -55,6 +55,12 @@  	}     +	/** +	 * Determine the next execution time according to the given trigger context. +	 * Next execution times are calculated based on the +	 * {@linkplain TriggerContext#lastCompletionTime completion time} of the +	 * previous execution; therefore, overlapping executions won't occur. +	 */  	public Date nextExecutionTime(TriggerContext triggerContext) {  		Date date = triggerContext.lastCompletionTime();  		if (date != null) { ```    ---  **Affects:** 3.2.2","closed","type: enhancement,","spring-projects-issues","2013-05-13T09:13:50Z","2013-05-14T12:12:17Z"
"","15142","PropertyDescriptorUtils.java is missing from spring-beans-3.2.2.RELEASE-sources.jar [SPR-10511]","**[Archie Cobbs](https://jira.spring.io/secure/ViewProfile.jspa?name=archie172)** opened **[SPR-10511](https://jira.spring.io/browse/SPR-10511?redirect=false)** and commented  It appears at least one Java source file is missing from at least one Maven `-sources` artifact in the `3.2.2` release:  ``` $ unzip -l ~/.ivy2/packager/cache/spring-beans-3.2.2.RELEASE.jar | grep PropertyDescriptorUtils      5043  03-13-13 13:56   org/springframework/beans/PropertyDescriptorUtils.class $  ```  Yet:  ``` $ unzip -l ~/.ivy2/packager/cache/spring-beans-3.2.2.RELEASE-sources.jar | grep PropertyDescriptorUtils $  ```  This seems very odd, seeing as all this stuff is supposed to be automated.  Is there some kind of build problem?   ---  **Affects:** 3.2.2","closed","status: invalid,","spring-projects-issues","2013-05-03T07:27:25Z","2019-01-12T05:26:59Z"
"","15130","Explicitly mention proper URL-escaping in RestTemplate, UriTemplate, and UriComponents API Javadoc [SPR-10497]","**[Archie Cobbs](https://jira.spring.io/secure/ViewProfile.jspa?name=archie172)** opened **[SPR-10497](https://jira.spring.io/browse/SPR-10497?redirect=false)** and commented  When examining the Javadoc for `RestTemplate`, it's not clear from reading it whether the replaced parameters are going to be properly escaped.  Same goes for `UriTemplate` and `UriComponents`. To verify this, I finally had to write a test case.  Suggest mentioning this explicitly and/or changing the examples to include an ""unsafe"" argument. For example, instead of this:  ``` Map uriVariables = new HashMap(); uriVariables.put(""booking"", ""42""); uriVariables.put(""hotel"", ""1"");  -> http://example.com/hotels/1/bookings/42 ```  You could say this:  ``` Map uriVariables = new HashMap(); uriVariables.put(""booking"", ""42""); uriVariables.put(""hotel"", ""Rest&Relax"");  -> http://example.com/hotels/Rest%26Relax/bookings/42 ```  Just a little something that would have saved me some time and worry.   ---  **Affects:** 3.2.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5859649af7180d63f000b42c75a5b557063dca2e, https://github.com/spring-projects/spring-framework/commit/c4d7976c371ea4ed9e596439a22486eed7941767","closed","type: documentation,","spring-projects-issues","2013-04-26T13:46:34Z","2014-08-15T01:52:47Z"
"","14747","JibxMarshaller does not indent when Result is an XMLEventWriter [SPR-10114]","**[Archie Cobbs](https://jira.spring.io/secure/ViewProfile.jspa?name=archie172)** opened **[SPR-10114](https://jira.spring.io/browse/SPR-10114?redirect=false)** and commented  The `JibxMarshaller`, when marshalling output to an `XMLEventWriter`, ignores the value set via `setIndent()`, so that the output contains all of the XML tags jammed together on a single line.  See also #14402 for some previous work done on `JibxMarshaller` with `XMLEventWriter` outputs.  Attaching a test case that demonstrates the problem.  ---  **Affects:** 3.2 GA  **Attachments:** - [SPR-10114.tgz](https://jira.spring.io/secure/attachment/20823/SPR-10114.tgz) (_12.65 kB_)  **Issue Links:** - #14402 JibxMarshaller deletes comments when Result is an XMLEventWriter","closed","status: invalid,","spring-projects-issues","2012-12-20T10:40:25Z","2019-01-12T05:27:40Z"
"","15128","@DateTimeFormat produces different timezones for Joda DateTime field if param comes in via request param list vs. via json request body [SPR-10495]","**[AP](https://jira.spring.io/secure/ViewProfile.jspa?name=ap)** opened **[SPR-10495](https://jira.spring.io/browse/SPR-10495?redirect=false)** and commented  Problem w/ org.springframework.format.annotation.DateTimeFormat - Wrong time zone (after binding/conversion) in Joda DateTime depending on whether param came from request params list or from json request body  1. Create a pojo MyInputPojo that has    `@DateTimeFormat`(pattern=""yyyy-MM-dd"")    private DateTime rStartDate;  2. Create another pojo MyInputJsonPojo that has    `@DateTimeFormat`(pattern=""yyyy-MM-dd"")    private DateTime jStartDate;  3. REST webservice, controller signature contains:    (..., `@Valid` `@RequestBody` MyInputJsonPojo myInputJsonPojo, `@Valid` MyInputPojo myInputPojo, BindingResult bindingResult, ...)  4. Call webservice w/  - ?rStartDate=""2013-06-01"" - json body contains { ""jStartDate"":""2013-06-01"" }  5. By debugging just after entry into controller    = myInputPojo.rStartDate that came in via request param has correct server local timezone = 2013-06-01T00:00:00.000-07:00  = myInputJsonPojo.jStartDate that came in via request body has incorrect UTC time zone = 2013-06-01T00:00:00.000Z  This causes problems later in the app code, because the application expects DateTime objs to be converted consistently (since they use the same annotation) regardless of how they enter the webservice.  Why are the converted datetime obj's timezones different depending on whether the `@DateTimeFormat` is applied to a request param vs. request body param ?  My workaround solution:   Write a custom annotation `@ApiDateTimeFormat` & not use Spring's built in `@DateTimeFormat` for now.   --- No further details from [SPR-10495](https://jira.spring.io/browse/SPR-10495?redirect=false)","closed","status: invalid,","spring-projects-issues","2013-04-23T15:32:53Z","2019-01-12T05:27:00Z"
"","15181","Assign lowest priority to ""/**"" in AntPathMatcher [SPR-10550]","**[Antonio Marrero](https://jira.spring.io/secure/ViewProfile.jspa?name=antonio.marrero)** opened **[SPR-10550](https://jira.spring.io/browse/SPR-10550?redirect=false)** and commented  Problem: Normally the pattern ""/**"" is used to handle the requests that don't match any of the other Servlet requests, therefore its priority should be the lowest. When there is a URI pattern with 3 or more PathVariable (i.e ""/matches/{matchId}/periods/{periodId}/teams/{teamId}/results"") the default URI (""/**"") takes precedence.  Cause: The problem is that the method AntPathMatcher.compare is giving higher priority to the patterns with less brackets ""{}"" and wildcards ""*"". See below an extract of code from the compare method:  ```         int wildCardCount1 = getWildCardCount(pattern1); 	int wildCardCount2 = getWildCardCount(pattern2); 			 	int bracketCount1 = StringUtils.countOccurrencesOf(pattern1, ""{""); 	int bracketCount2 = StringUtils.countOccurrencesOf(pattern2, ""{""); 			 	int totalCount1 = wildCardCount1 + bracketCount1; 	int totalCount2 = wildCardCount2 + bracketCount2;  	if (totalCount1 != totalCount2) { 		return totalCount1 - totalCount2; 	} ```  Solution: The pattern ""/**"" should have a special treatment like null has. See below a proposed solution:  ``` public int compare(String pattern1, String pattern2) { 			 	if (pattern1 == null && pattern2 == null) { 		return 0; 	} 	else if (pattern1 == null) { 		return 1; 	} 	else if (pattern2 == null) { 		return -1; 	}		 			 	boolean pattern1EqualsPath = pattern1.equals(path); 	boolean pattern2EqualsPath = pattern2.equals(path); 	if (pattern1EqualsPath && pattern2EqualsPath) { 		return 0; 	} 	else if (pattern1EqualsPath) { 		return -1; 	} 	else if (pattern2EqualsPath) { 		return 1; 	} 	 	// Setting lower priority to ""/**"" 	if(pattern1.equals(""/**"")){ 		return 1; 	}else if (pattern2.equals(""/**"")){ 		return -1; 	} 	 	int wildCardCount1 = getWildCardCount(pattern1); 	int wildCardCount2 = getWildCardCount(pattern2); 			 	int bracketCount1 = StringUtils.countOccurrencesOf(pattern1, ""{""); 	int bracketCount2 = StringUtils.countOccurrencesOf(pattern2, ""{""); 		 	int totalCount1 = wildCardCount1 + bracketCount1; 	int totalCount2 = wildCardCount2 + bracketCount2; 	if (totalCount1 != totalCount2) { 		return totalCount1 - totalCount2; 	} 	int pattern1Length = getPatternLength(pattern1); 	int pattern2Length = getPatternLength(pattern2); 		 	if (pattern1Length != pattern2Length) { 		return pattern2Length - pattern1Length; 	}  	if (wildCardCount1 < wildCardCount2) { 		return -1; 	} 	else if (wildCardCount2 < wildCardCount1) { 		return 1; 	}  	if (bracketCount1 < bracketCount2) { 		return -1; 	} 	else if (bracketCount2 < bracketCount1) { 		return 1; 	}  	return 0; } ```  ---  **Affects:** 3.2.2  **Issue Links:** - #13325 AntPathMatcher.AntPatternComparator algorithm wrong for hierarchical matches (_**""is duplicated by""**_) - #13002 AntPatternComparator prefers a less specific match when brackets occur (_**""is duplicated by""**_) - #15205 Doc: Spring MVC and the most 'specific' `@RequestMapping` URL pattern","closed","type: enhancement,","spring-projects-issues","2013-05-10T10:21:50Z","2019-01-13T21:03:36Z"
"","15379","SpringFramework-Web contains RequestMethod (since 2.5) and HttpMethod (since 3.0), which are effectively the same [SPR-10753]","**[Anton Oparin](https://jira.spring.io/secure/ViewProfile.jspa?name=mavarazy)** opened **[SPR-10753](https://jira.spring.io/browse/SPR-10753?redirect=false)** and commented  SpringFramework-Web contains RequestMethod (since 2.5) and HttpMethod (since 3.0), which are effectively the same it terms this is enumerations with the same values.  It is confusing at some points, why is there different names for effectively the same things, and besides they reside in the same jar which is too misleading.  It is more reasonable to have single presentation of the same things, from my point of view.   --- No further details from [SPR-10753](https://jira.spring.io/browse/SPR-10753?redirect=false)","closed","type: enhancement,","spring-projects-issues","2013-07-18T00:02:53Z","2013-07-22T15:55:22Z"
"","14735","Support SpEL in @initial-delay for   [SPR-10102]","**[Anton Leskovets](https://jira.spring.io/secure/ViewProfile.jspa?name=losted)** opened **[SPR-10102](https://jira.spring.io/browse/SPR-10102?redirect=false)** and commented  #11684 has added support for `@initial-delay` in . However, unlike `@fixed-delay` it is restricted to accept only integers. However it works fine with SpEL with xsd validation turned off. It would be great to use string as a data type for this attribute.  ---  **Affects:** 3.2 GA","closed","type: enhancement,","spring-projects-issues","2012-12-17T04:12:39Z","2019-01-11T21:26:35Z"
"","15320","FlashMap matching fails when URL contains non-ascii parameters [SPR-10692]","**[Anton Brok-Volchansky](https://jira.spring.io/secure/ViewProfile.jspa?name=re6exp)** opened **[SPR-10692](https://jira.spring.io/browse/SPR-10692?redirect=false)** and commented  When `FlashMap` is verified for `HttpServletRequest`, encoded values in `FlashMap` don't match with parameter values contained in request if those values are URL-encoded.  There are two possible solution.  One is to rewrite `isFlashMapForRequest(FlashMap flashMap, HttpServletRequest request)` to match FlashMap's targetRequestParams with decoded value of HttpServletRequest in [AbstractFlashMapManager.java](https://github.com/SpringSource/spring-framework/blob/master/spring-webmvc/src/main/java/org/springframework/web/servlet/support/AbstractFlashMapManager.java) as shown below:  ``` protected boolean isFlashMapForRequest(FlashMap flashMap, HttpServletRequest request) {        if (flashMap.getTargetRequestPath() != null) {            String requestUri = urlPathHelper.getOriginatingRequestUri(request);            if (!requestUri.equals(flashMap.getTargetRequestPath()) && !requestUri.equals(flashMap.getTargetRequestPath() + ""/"")) {                return false;            }        }        MultiValueMap targetParams = flashMap.getTargetRequestParams();        for (String paramName : targetParams.keySet()) {            for (String targetValue : targetParams.get(paramName)) {                 //added                	                 String decodedName = urlPathHelper.decodeRequestString(request, paramName);                 //added                     	                 String decodedTargetValue = urlPathHelper.decodeRequestString(request, targetValue);                 //modified                	                 if (!ObjectUtils.containsElement(request.getParameterValues(decodedName), decodedTargetValue)) {                    return false;                }            }        }        return true;    } ```  Or, in my case, Q&D, derivative from the `SessionFlashMapManager` and override the above method.  Another possible solution is to modify [RedirectView](https://github.com/SpringSource/spring-framework/blob/master/spring-webmvc/src/main/java/org/springframework/web/servlet/view/RedirectView.java) in renderMergedOutputModel(Map model, HttpServletRequest request, HttpServletResponse response) to take into account the encoding.   ---  **Affects:** 3.1.2, 3.2.3","closed","status: bulk-closed,","spring-projects-issues","2013-06-26T06:47:20Z","2019-01-12T00:23:18Z"
"","15060","A URI with URL path parameters causes IllegalStateException [SPR-10427]","**[Anthony Gerrard](https://jira.spring.io/secure/ViewProfile.jspa?name=anthonygerrard)** opened **[SPR-10427](https://jira.spring.io/browse/SPR-10427?redirect=false)** and commented  A fix for #14867 in 3.2.2 has lead to the following issue:  ``` org.springframework.web.util.NestedServletException: Request processing failed; nested exception is java.lang.IllegalStateException: Pattern ""/donate"" is not a match for ""/donate;v1=1"" org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:948) org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:827) javax.servlet.http.HttpServlet.service(HttpServlet.java:621) org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:812) javax.servlet.http.HttpServlet.service(HttpServlet.java:728) com.opensymphony.sitemesh.webapp.SiteMeshFilter.obtainContent(SiteMeshFilter.java:129) com.opensymphony.sitemesh.webapp.SiteMeshFilter.doFilter(SiteMeshFilter.java:77) org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:88) org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) root cause java.lang.IllegalStateException: Pattern ""/donate"" is not a match for ""/donate;v1=1"" org.springframework.util.Assert.state(Assert.java:385) org.springframework.util.AntPathMatcher.extractUriTemplateVariables(AntPathMatcher.java:287) org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.handleMatch(RequestMappingInfoHandlerMapping.java:102) org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.handleMatch(RequestMappingInfoHandlerMapping.java:54) org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.lookupHandlerMethod(AbstractHandlerMethodMapping.java:285) org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:229) org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:56) org.springframework.web.servlet.handler.AbstractHandlerMapping.getHandler(AbstractHandlerMapping.java:298) org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java:1091) org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java:1076) org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:896) org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:856) org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:936) org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:827) javax.servlet.http.HttpServlet.service(HttpServlet.java:621) org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:812) javax.servlet.http.HttpServlet.service(HttpServlet.java:728) com.opensymphony.sitemesh.webapp.SiteMeshFilter.obtainContent(SiteMeshFilter.java:129) com.opensymphony.sitemesh.webapp.SiteMeshFilter.doFilter(SiteMeshFilter.java:77) org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:88) org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ```  ---  **Affects:** 3.2.2  **Issue Links:** - #15206 spring `@MatrixVariable` bug (_**""is duplicated by""**_) - #15031 spring3.2 matrix variable url match problem - #15019 Ant Pattern Matching throws IllegalStateException for multiple RequestMapping values - #14867 `@RequestMapping` no longer agnostic about URL path parameters  (_**""supersedes""**_)","closed","type: bug,","spring-projects-issues","2013-03-29T06:41:36Z","2019-01-13T07:00:29Z"
"","15059","Add support for testing overriden DispatcherServlet instances in mvc test framework [SPR-10426]","**[Anthony Gerrard](https://jira.spring.io/secure/ViewProfile.jspa?name=anthonygerrard)** opened **[SPR-10426](https://jira.spring.io/browse/SPR-10426?redirect=false)** and commented  #### Status Quo  Because the MVC test framework uses a subclass of `DispatcherServlet` it makes it difficult to test functionality if your application overrides the `DispatcherServlet`.  #### Proposal  It would be nice if you could pass in a `DispatcherServlet` say like this:  ``` this.mockMvc = MockMvcBuilders                 .webAppContextSetup(applicationContext, new MyDispatcherServlet())                 .build(); ```  You'd obviously need to tweak what is done under the covers.  Maybe switching `TestDispatcherServlet` to be a decorator?  ---  **Affects:** 3.2.2  **Issue Links:** - #18292 Improve support for custom HTTP verbs in Spring MVC Test  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2013-03-29T03:27:01Z","2019-01-11T21:15:53Z"
"","14867","@RequestMapping no longer agnostic about URL path parameters  [SPR-10234]","**[Anthony Gerrard](https://jira.spring.io/secure/ViewProfile.jspa?name=anthonygerrard)** opened **[SPR-10234](https://jira.spring.io/browse/SPR-10234?redirect=false)** and commented  `@RequestMapping`(""/something"")  used to match  /something;else=true  in Spring 3.1.  In Spring 3.2 you now get a 404 not found.  This is inconsistent with the behaviour demanded in the servlet 3.0 specification (not sure if this counts for anything)  The path used for mapping to a servlet is the request URL from the request object minus the context path and the path parameters  I notice jsessionid path parameters are still ignored.  ---  **Affects:** 3.2 GA  **Issue Links:** - #15060 A URI with URL path parameters causes IllegalStateException (_**""is superseded by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9c194699c73a6a4c29f2dbbd70657f641581ded2, https://github.com/spring-projects/spring-framework/commit/5b1165b1029263ff0020562da95bd30380f303e4, https://github.com/spring-projects/spring-framework/commit/d23de282a668bbfc271575cff091d7c8c971fbf2","closed","type: bug,","spring-projects-issues","2013-01-29T08:53:13Z","2019-01-13T21:04:30Z"
"","14866","org.springframework.ui.freemarker package move should be documented (along with other similar moves) [SPR-10233]","**[Anthony Gerrard](https://jira.spring.io/secure/ViewProfile.jspa?name=anthonygerrard)** opened **[SPR-10233](https://jira.spring.io/browse/SPR-10233?redirect=false)** and commented  `org.springframework.ui.freemarker` and a number of other packages that used to reside in `spring-context.jar` have moved to `spring-context-support.jar` in 3.2.0.  This should be documented.   ---  **Affects:** 3.2 GA  **Reference URL:** http://static.springsource.org/spring/docs/3.2.x/spring-framework-reference/html/migration-3.2.html","closed","status: invalid,","spring-projects-issues","2013-01-29T08:16:00Z","2019-01-12T05:27:30Z"
"","15484","SqlMapClientDaoSupport to support  setMaxRows(int)  [SPR-10857]","**[Anish Kuti](https://jira.spring.io/secure/ViewProfile.jspa?name=anish.k@tcs.com)** opened **[SPR-10857](https://jira.spring.io/browse/SPR-10857?redirect=false)** and commented  If we use SqlMapClientDaoSupport to fetch rows from database and if database is having 100K of row , then my JVM will simply burst.  Can this setMaxRows be introduced to fetch only certain number of rows   ---  **Affects:** 3.2.4","closed","status: bulk-closed,","spring-projects-issues","2013-08-26T00:14:17Z","2019-01-12T02:32:48Z"
"","15403","Defaultmessagelistenercontainer - Consumer are not scaling upto  maxConcurrentConsumers value [SPR-10776]","**[Anish Kuti](https://jira.spring.io/secure/ViewProfile.jspa?name=anish.k@tcs.com)** opened **[SPR-10776](https://jira.spring.io/browse/SPR-10776?redirect=false)** and commented  We are using the below configuration to consume message from MQ using spring MDP and application is deployed inside Weblogic 9.2.  The problem in not simulated every time . Sometime We are seeing  this problem . Don't understand why !!!  Scenario: Huge message(30-40K) in MQ , and MDP is consuming message with the below configuration. (We start MDP manually DefaultMessageListenerContainer's initialize() and start() method. same way we stop using stop() and shutdown()).  Now we stop MDP in a particular manage Node and start again (MDP in other node is running).Though message load is huge, we are only getting 2 consumer , it's not scaling upto maxConcurrentConsumers value 10.  This is not happening every time. If we once again do MDP start and stop , we could see it reaching consumer value to maxConcurrentConsumers i.e 10.  Can you let us know what can be the reason ? Is it something application thread issue ? or MQ issue or our MDP config problem ?  ---  \ \ \ \ \ \ \ \${severFactoryClass}\ \${jndiProviderUrl}\ \ \ \ \ \ \ \ \ \ \${connectionFactoryJndiName}\ \ \        \ \ \ \ \ \${ccp_ksu_polling_queue}\ \ \ \ \ \ \           	      	     	                 \           	     	                                                  	     	       \  ---  **Affects:** 3.2.2","closed","status: bulk-closed,","spring-projects-issues","2013-07-24T04:04:06Z","2019-01-13T21:03:00Z"
"","15415","Provide support for pattern matching in MockMvcResultMatchers.redirectedUrl() [SPR-10789]","**[Anil Bharadia](https://jira.spring.io/secure/ViewProfile.jspa?name=anil.bharadia)** opened **[SPR-10789](https://jira.spring.io/browse/SPR-10789?redirect=false)** and commented  This is regarding the `MockMvcResultMatchers.redirectedUrl()` method where one can pass a string, but there is currently no way one can pass a pattern to match.  Please see [this question on Stack Overflow](http://stackoverflow.com/q/17834034/411871) for a detailed explanation.  I have posted an [issue on GitHub](https://github.com/SpringSource/spring-test-mvc/issues/82) in the `spring-test-mvc` project.   ---  **Affects:** 3.2.3  **Reference URL:** http://stackoverflow.com/q/17834034/411871","closed","type: enhancement,","spring-projects-issues","2013-07-29T01:39:33Z","2013-10-31T12:27:49Z"
"","15241","ResourceHttpMessageConverter not properly serializing Resource object for large files [SPR-10613]","**[Angel Villalain](https://jira.spring.io/secure/ViewProfile.jspa?name=avillalain)** opened **[SPR-10613](https://jira.spring.io/browse/SPR-10613?redirect=false)** and commented  I've been experiencing a strange problem using the `ResourceHttpMessageConverter` in the latest Spring 3.2.3 version. I have an annotated controller that returns a `Resource`, in specific a `UrlResource`. This `UrlResource` is nothing more than a request to another remote server that serves a pdf file. Usually the pdf is a small file (less than 1MB) but under some circumstances is larger. In case the file is large the client that contacts to my Controller can't download the file resulting in a connection closed error. The code I am using is the following:  ``` @Controller @PreAuthorize(value = ""isAuthenticated()"") public class TestController {     @ResponseBody     @RequestMapping(value=""/report/"", method = RequestMethod.GET,                      produces = ""application/pdf"")     public Resource getReport() {         //Ignore the getResource method, it is not the problem         //this method returns an object of type UrlResource         return this.getResource();     } } ```  Initially I thought there could be something wrong with the `StreamUtils` class. But in order to make this work I implemented a workaround using it just as presented below:  ``` @Controller @PreAuthorize(value = ""isAuthenticated()"") public class TestController {     @RequestMapping(value=""/report/"", method = RequestMethod.GET,                      produces = ""application/pdf"")     public void getReport(HttpServletResponse response) {         response.setStatus(HttpServletResponse.SC_OK);         this.copyStream(this.getResource(), response);     }      private void copyStream(Resource source, HttpServletResponse response) {         if(source != null) {             try (InputStream input = source.getInputStream();                  OutputStream output = response.getOutputStream()) {                 StreamUtils.copy(input, output);             } catch (IOException e) {                 response.setStatus(HttpServletResponse.SC_NOT_FOUND);             }         }     } } ```  And it worked. So I think there should be something related to the `ResourceHttpMessageCoverter` that is responsible for the problem.   ---  **Affects:** 3.2.3  **Reference URL:** http://stackoverflow.com/questions/16835981/possible-bug-in-resourcehttpmessageconverter","closed","status: invalid,","spring-projects-issues","2013-05-31T10:25:50Z","2019-01-12T05:26:54Z"
"","15495","Stomp passcode should not be included in plain text in log messages [SPR-10868]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-10868](https://jira.spring.io/browse/SPR-10868?redirect=false)** and commented  Currently, if a Stomp CONNECT message is logged, the value of the passcode header is included in plain text:  ``` [Payload=[B@64cc8785][Headers={timestamp=1377684178158, id=a980b638-cfd7-49e3-8995-9b9afe05cbfb, stompCommand=CONNECT, nativeHeaders={heart-beat=[0,0], passcode=[guest], login=[guest], accept-version=[1.1,1.0]}, sessionId=daxr3m_s, messageType=CONNECT, user=org.springframework.security.authentication.UsernamePasswordAuthenticationToken@fac3d7c0: Principal: org.springframework.security.core.userdetails.User@bedc1860: Username: fabrice; Password: [PROTECTED]; Enabled: true; AccountNonExpired: true; credentialsNonExpired: true; AccountNonLocked: true; Granted Authorities: ROLE_USER; Credentials: [PROTECTED]; Authenticated: true; Details: org.springframework.security.web.authentication.WebAuthenticationDetails@2cd90: RemoteIpAddress: 0:0:0:0:0:0:0:1; SessionId: 1crvqm5x1a4akn9p7a5p3lhtn; Granted Authorities: ROLE_USER}] ```  Rather than logging ""`passcode=[guest]`"" we should follow Spring's security's lead and log ""`passcode=[PROTECTED]`"" instead.    --- No further details from [SPR-10868](https://jira.spring.io/browse/SPR-10868?redirect=false)","closed","type: bug,","spring-projects-issues","2013-08-28T03:11:13Z","2013-08-29T16:20:46Z"
"","15444","Enhance Stomp support to handle frames with NULL octets in the body [SPR-10818]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-10818](https://jira.spring.io/browse/SPR-10818?redirect=false)** and commented  The STOMP spec states:  > All frames MAY include a content-length header. This header is an octet count for the length of the message body. If a content-length header is included, this number of octets MUST be read, regardless of whether or not there are NULL octets in the body. The frame still needs to be terminated with a NULL octet.  We currently use a NULL octet as a delimiter irrespective of any content-length header. Supporting frames that contain NULL octets in the body would require us to stop using Reactor's DelimitedCodec in the broker relay and implement something smarter, presumably based on Gary Russell's existing converter code.  The problem at the moment is that messages are truncated, e.g. sending ""Message containing \0 (ASCII null)"" results in ""Message containing "" being received.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a489c2cf3873fa07f60ff15d86518e3c9224228f","closed","type: enhancement,","spring-projects-issues","2013-08-08T07:09:03Z","2013-10-31T12:28:06Z"
"","14874","Access all the properties on the Environment as a Map.  [SPR-10241]","**[Andrés Monge Moreno](https://jira.spring.io/secure/ViewProfile.jspa?name=shagrash)** opened **[SPR-10241](https://jira.spring.io/browse/SPR-10241?redirect=false)** and commented  It would be nice if it was possible to access to all the properties pairs ""`key"" -> ""value`"" that are contained in the `Environment` when using the `@PropertySource` annotation. Mainly, adding one method `getAllProperties(): Map` would be enough and would let a lot of flexibility in order to iterate over all the properties without exactly knowing their keys.   --- No further details from [SPR-10241](https://jira.spring.io/browse/SPR-10241?redirect=false)","closed","type: enhancement,","spring-projects-issues","2013-01-30T08:16:09Z","2020-06-17T18:11:43Z"
"","15406","UriComponentsBuilder should be case-insensitive when parsing URL scheme names [SPR-10779]","**[André Wolf](https://jira.spring.io/secure/ViewProfile.jspa?name=smaugg)** opened **[SPR-10779](https://jira.spring.io/browse/SPR-10779?redirect=false)** and commented  According to RFC 1738 ""Uniform Resource Locators (URL)"", the scheme names of an URL allows the following characters: lower case letters a to z, digits, the characters plus, period, and hyphen. It also states:  ""For resiliency, programs interpreting URLs should treat upper case letters as equivalent to lower case in scheme names (e.g., allow ""HTTP"" as well as ""http"")."" (section 2.1. The main parts of URLs).  Unfortunately UriComponentsBuilder does not accept the upper case variants HTTP and HTTPS, it throws an IllegalArgumentException instead.   ---  **Affects:** 3.1.2","closed","type: bug,","spring-projects-issues","2013-07-24T13:24:41Z","2013-08-06T18:35:07Z"
"","15247","Default resolved property value is not working properly [SPR-10619]","**[Andrzej Wisłowski](https://jira.spring.io/secure/ViewProfile.jspa?name=awislowski)** opened **[SPR-10619](https://jira.spring.io/browse/SPR-10619?redirect=false)** and commented  When using property files configuration like this:  ```  ```  and setting property value to the spring component:  ```  ```  I got invalid property resolved.  My case is: In the file `classpath:options.properties property filemongo.slaveOk` is not set. In the file `${user.home}/.app/options.properties` property is set to true.  Spring is resolving property to value false. It is using default setting if the first location of property files does not contains it.  ---  **Affects:** 3.2 GA  **Issue Links:** - #14623 Using multiple PropertyPlaceholderConfigurer breaks `@Value` default value behavior (_**""duplicates""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d7ec20a286608fcfa466c96538f7e0bf961aeac0","closed","in: core,","spring-projects-issues","2013-06-03T00:13:51Z","2019-01-13T21:03:25Z"
"","15358","NamedParameterUtils.substituteNamedParameters(ParsedSql parsedSql, SqlParameterSource paramSource) creates empty parentheses when a select list is empty [SPR-10730]","**[andrew chen](https://jira.spring.io/secure/ViewProfile.jspa?name=andrewchen5678)** opened **[SPR-10730](https://jira.spring.io/browse/SPR-10730?redirect=false)** and commented  org.springframework.jdbc.core.namedparam.NamedParameterUtils.substituteNamedParameters(ParsedSql parsedSql, SqlParameterSource paramSource) creates empty parentheses when a select list is empty, which generates invalid sql such as "" in ()"".  A workaround would replace the placeholder with null so that it becomes ""in (null)"" like in Ruby on Rails so that it will still be valid sql.   ---  **Affects:** 3.1.4, 3.2 GA, 3.2.1, 3.2.2, 3.2.3, 4.0 M1","closed","status: bulk-closed,","spring-projects-issues","2013-07-09T13:51:51Z","2019-01-12T00:22:41Z"
"","14891","Decouple spring-http from spring-web [SPR-10258]","**[Andrei Varabyeu](https://jira.spring.io/secure/ViewProfile.jspa?name=gottfrid)** opened **[SPR-10258](https://jira.spring.io/browse/SPR-10258?redirect=false)** and commented  Spring-web contains batch of very useful http wrappers. It would be pretty good to have them decoupled from spring-web dependency. I would suggest to create separate spring-http dependency.   ---  0 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2013-02-04T04:07:32Z","2018-12-24T17:26:24Z"
"","15291","BeanFactory.getBeansWithAnnotation() should not consider abstract beans [SPR-10663]","**[Andreas Thaler](https://jira.spring.io/secure/ViewProfile.jspa?name=a-thaler)** opened **[SPR-10663](https://jira.spring.io/browse/SPR-10663?redirect=false)** and commented  Assumed you have a BeanFactory designed for extension (for example using lookup-method)  ``` public abstract class MyFactory implements FactoryBean{ ... } ```  configured as abstract bean  ```  ```  then a call to ``` ApplicationContext.getBeansWithAnnotation(..)  ```will try to instantiate the class, which is against the contract for the abstract flag of the configuration (Specify ""true"" to tell the bean factory to not try to instantiate that particular bean in any case.)  As the class is an abstract class the call will fail with: ```  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myFactory' defined in class path resource [myConfig.xml]: Instantiation of bean failed; nested exception is org.springframework.beans.BeanInstantiationException: Could not instantiate bean class [MyFactory]: Is it an abstract class?; nested exception is java.lang.InstantiationException at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateBean(AbstractAutowireCapableBeanFactory.java:997) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getSingletonFactoryBeanForTypeCheck(AbstractAutowireCapableBeanFactory.java:767) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:698) at org.springframework.beans.factory.support.AbstractBeanFactory.getType(AbstractBeanFactory.java:578) at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAnnotationOnBean(DefaultListableBeanFactory.java:464) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansWithAnnotation(DefaultListableBeanFactory.java:449) at org.springframework.context.support.AbstractApplicationContext.getBeansWithAnnotation(AbstractApplicationContext.java:1182) at ...  ```  Same scenario will work fine if class is not implementing FactoryBean, so it seems that for the special case of a FactoryBean the abstract flag is not repected. ```  ---  **Affects:** 3.1.3  **Sub-tasks:** - #15300 Backport ""BeanFactory.getBeansWithAnnotation() should not consider abstract beans""  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ed996ab4b34fc68fa1e544136338725260b60d1b, https://github.com/spring-projects/spring-framework/commit/8ed8ee2dfe23c5c434fe8c0fa509067cf881fdc8, https://github.com/spring-projects/spring-framework/commit/d4b54d834e5c86ad65644158335c382842181ec8","closed","in: core,","spring-projects-issues","2013-06-18T05:35:23Z","2019-01-11T22:24:09Z"
"","14924","spring-webmvc 3.2.1 no longer has spring-web as compile-time dependency [SPR-10290]","**[Andreas R.](https://jira.spring.io/secure/ViewProfile.jspa?name=anre)** opened **[SPR-10290](https://jira.spring.io/browse/SPR-10290?redirect=false)** and commented  In 3.2.0 a Spring-MVC project did not require to additionally include the spring-web dependency (because it was already a compile-time dependency of spring-webmvc).  In 3.2.1 it is now a provided dependency. This breaks pretty much every annotated controller (which uses e.g. `@RequestMapping`,`@RequestHeader`,`@RequestParam`...) with:  ``` ... package org.springframework.web.bind.annotation does not exist ... package org.springframework.http does not exist ... cannot find symbol ```  The workaround is of course trivial, just to include spring-web as additional dependency of the according project:  ```  org.springframework    spring-web     ${org.springframework-version}  ```  Was there a reason for the change? Then perhaps this should be documented in the changelog and/or migration section of the springframework reference document?  ---  **Affects:** 3.2.1  **Issue Links:** - #14851 Spring 3.2.1 POM missing certain compile time dependencies (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2013-02-13T09:00:22Z","2019-01-12T16:47:07Z"
"","15028","PooledConnection has already been closed exception with Hibernate 4.2 [SPR-10395]","**[Andreas Joseph Krogh](https://jira.spring.io/secure/ViewProfile.jspa?name=andreak)** opened **[SPR-10395](https://jira.spring.io/browse/SPR-10395?redirect=false)** and commented  When using Spring's JdbcTemplate inside a transactional-service with the JpaTransactionmanager and the HibernateJpaDialect an exception is thrown.  Using Hibernate-4.2.0.Final, JPA, Spring-3.2.2 and I get:  ``` Caused by: java.sql.SQLException: PooledConnection has already been closed.         at org.apache.tomcat.jdbc.pool.DisposableConnectionFacade.invoke(DisposableConnectionFacade.java:86)         at com.sun.proxy.$Proxy19.commit(Unknown Source)         at org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.doCommit(JdbcTransaction.java:112)         ... 44 more ```  This happens both with `c3p0` and `tomcat-pool` that comes with tomcat7.  I've tested in two projects with the same results. This doesn't happen with Hibernate-4.1.x  I know i should provide a test-case but I only have a scala-project at hand and you probably want that out of the equation...  ---  **Affects:** 3.2.2  **Attachments:** - [hibernate_4.2_jdbc-access-fails.tar.gz](https://jira.spring.io/secure/attachment/21107/hibernate_4.2_jdbc-access-fails.tar.gz) (_3.15 kB_)  **Issue Links:** - #11560 HibernateJpaDialect does not allow ConnectionManager to eagerly release Connection for long-running Session  6 votes, 12 watchers","closed","type: bug,","spring-projects-issues","2013-03-18T16:39:27Z","2019-01-11T19:37:48Z"
"","15091","RequiredAnnotationBeanPostProcessor should not kick in for factory-bean definitions [SPR-10458]","**[Andreas Hubold](https://jira.spring.io/secure/ViewProfile.jspa?name=ahubold)** opened **[SPR-10458](https://jira.spring.io/browse/SPR-10458?redirect=false)** and commented  The RequiredAnnotationBeanPostProcessor throws an exception that properties of a bean have not been configured if the bean was returned from a factory bean and has setters annotated with `@Required`.  For example with the following XML context definition:  ```                                ```  Method Test#setConfig is annotated with `@Required`. TestBuilder#getTest is just implemented to return the Test instance that was set with #setTest.  (I know the example does not make any sense but that's just to demonstrate the case in a simple form).  When starting the application context I get the following exception:  ``` Exception in thread ""main"" org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'test2' defined in class path resource [test.xml]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanInitializationException: Property 'config' is required for bean 'test2' 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:527) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:609) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:918) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:469) 	at org.springframework.context.support.ClassPathXmlApplicationContext.(ClassPathXmlApplicationContext.java:139) 	at org.springframework.context.support.ClassPathXmlApplicationContext.(ClassPathXmlApplicationContext.java:83) 	at TestSpringRequired.main(TestSpringRequired.java:10) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 	at java.lang.reflect.Method.invoke(Method.java:597) 	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:120) Caused by: org.springframework.beans.factory.BeanInitializationException: Property 'config' is required for bean 'test2' 	at org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor.postProcessPropertyValues(RequiredAnnotationBeanPostProcessor.java:149) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1106) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:517) 	... 16 more ```    ---  **Affects:** 3.1.2  1 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2013-04-11T07:44:01Z","2013-12-11T23:57:22Z"
"","15513","Abstract method mocking prints wrong call count in exception [SPR-10885]","**[Andreas Hubmer](https://jira.spring.io/secure/ViewProfile.jspa?name=andi)** opened **[SPR-10885](https://jira.spring.io/browse/SPR-10885?redirect=false)** and commented  In case a mocked method is called too often an IllegalStateException is thrown. In the exception text the number of expected calls and the number of received calls are printed. The number of received calls is off by one (too low).  Concerned method: org.springframework.mock.staticmock.AbstractMethodMockingControl.nextCall()  Example: java.lang.IllegalStateException: Expected 1 calls, received 1 Correct would be: java.lang.IllegalStateException: Expected 1 calls, received 2  ---  **Affects:** 3.1.2  **Issue Links:** - #16012 Fix off-by-one regression in AbstractMethodMockingControl  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/03e243a4ab279cc374c454e7e021e62d6d952c8d, https://github.com/spring-projects/spring-framework/commit/55961544a722e827f2e0dfe8012d7b576d652f93, https://github.com/spring-projects/spring-framework/commit/3ca0dcd9123981962d8dbf5a371d7d0bed99f298, https://github.com/spring-projects/spring-framework/commit/69a89b1bb0c37c2bf0871c0e40d442e7db4197c2","closed","in: core,","spring-projects-issues","2013-09-02T06:49:04Z","2019-01-11T22:08:56Z"
"","14898","NoClassDefFoundError ContentNegotiationManager after upgrading to 3.2.1 [SPR-10264]","**[Andreas Andersson](https://jira.spring.io/secure/ViewProfile.jspa?name=andreasandersson)** opened **[SPR-10264](https://jira.spring.io/browse/SPR-10264?redirect=false)** and commented  After upgrading to 3.2.1 I get errors using MockMvc and standaloneSetup(controller).build();  Error message is: java.lang.NoClassDefFoundError: org/springframework/web/accept/ContentNegotiationManager  If I downgrade the spring-webmvc artifact to 3.2.0.RELEASE I don't see this issue.  I am using maven and I also checked classpath after upgrade and the class is not available. Has it moved or is this a real issue?  Regards Andreas   ---  **Affects:** 3.2.1","closed","in: web,","spring-projects-issues","2013-02-06T01:35:38Z","2019-01-11T21:32:15Z"
"","15069","Sporadic deadlocks while using servlet scoped beans from another thread. [SPR-10436]","**[Anatoly Kupriyanov](https://jira.spring.io/secure/ViewProfile.jspa?name=kan)** opened **[SPR-10436](https://jira.spring.io/browse/SPR-10436?redirect=false)** and commented  I am using approach from the ""[Accessing scoped proxy beans within Threads of](http://stackoverflow.com/questions/1528444/accessing-scoped-proxy-beans-within-threads-of)"" answer. However I am seeing rare deadlocks involving `RequestAttributes` object. The main reason of the deadlock is between the `synchronized (this.sessionAttributesToUpdate)` statement in the object and servlet session attribute map. Normally the instances of the object are created for each request, so they don't clash, but if I pass the object to another thread to use the session beans, the same object is used and it causes deadlock sometimes.  The deadlock happens if current http request is not completed while the another thread starts using a session bean passed with `RequestContextHolder.setRequestAttributes`.  I think this guy mentions the same problem, but his question is unanswered: [Session scoped bean encountering deadlock](http://forum.springsource.org/showthread.php?115248-Session-scoped-bean-encountering-deadlock).  A unit test is in attachment. The thead dump during the deadlock: Full thread dump  ``` ""Thread-1@1374"" prio=5 tid=0xc nid=NA waiting for monitor entry   java.lang.Thread.State: BLOCKED 	 blocks Thread-206@1641 	 waiting for Thread-206@1641 to release lock on  (a org.springframework.bugs.ssdl.SyncMockHttpSession) 	  at org.springframework.bugs.ssdl.SyncMockHttpSession.getAttribute(SyncMockHttpSession.java:14) 	  at org.springframework.web.context.request.ServletRequestAttributes.updateAccessedSessionAttributes(ServletRequestAttributes.java:230) 	  - locked  (a java.util.HashMap) 	  at org.springframework.web.context.request.AbstractRequestAttributes.requestCompleted(AbstractRequestAttributes.java:48) 	  at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:88) 	  at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) 	  at org.springframework.bugs.ssdl.SsdlTest.deadlock(SsdlTest.java:39) 	  at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-1) 	  at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) 	  at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	  at java.lang.reflect.Method.invoke(Method.java:601) 	  at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44) 	  at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15) 	  at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41) 	  at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20) 	  at org.junit.internal.runners.statements.FailOnTimeout$1.run(FailOnTimeout.java:28)  ""main@1"" prio=5 tid=0x1 nid=NA waiting   java.lang.Thread.State: WAITING 	  at java.lang.Object.wait(Object.java:-1) 	  at java.lang.Thread.join(Thread.java:1266) 	  at org.junit.internal.runners.statements.FailOnTimeout.evaluate(FailOnTimeout.java:36) 	  at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28) 	  at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76) 	  at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50) 	  at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193) 	  at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52) 	  at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191) 	  at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42) 	  at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184) 	  at org.junit.runners.ParentRunner.run(ParentRunner.java:236) 	  at org.junit.runner.JUnitCore.run(JUnitCore.java:157) 	  at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:77) 	  at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:195) 	  at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:63)  ""Thread-206@1641"" prio=5 tid=0xd9 nid=NA waiting for monitor entry   java.lang.Thread.State: BLOCKED 	 blocks Thread-1@1374 	 waiting for Thread-1@1374 to release lock on  (a java.util.HashMap) 	  at org.springframework.web.context.request.ServletRequestAttributes.getAttribute(ServletRequestAttributes.java:107) 	  at org.springframework.web.context.request.AbstractRequestAttributesScope.get(AbstractRequestAttributesScope.java:41) 	  at org.springframework.web.context.request.SessionScope.get(SessionScope.java:92) 	  - locked  (a org.springframework.bugs.ssdl.SyncMockHttpSession) 	  at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:328) 	  at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193) 	  at org.springframework.aop.target.SimpleBeanTargetSource.getTarget(SimpleBeanTargetSource.java:33) 	  at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:182) 	  at $Proxy5.method(Unknown Source:-1) 	  at org.springframework.bugs.ssdl.WorkerThread.run(WorkerThread.java:21)  ""Finalizer@1644"" daemon prio=8 tid=0x3 nid=NA waiting   java.lang.Thread.State: WAITING 	  at java.lang.Object.wait(Object.java:-1) 	  at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:135) 	  at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:151) 	  at java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:177)  ""Reference Handler@1645"" daemon prio=10 tid=0x2 nid=NA waiting   java.lang.Thread.State: WAITING 	  at java.lang.Object.wait(Object.java:-1) 	  at java.lang.Object.wait(Object.java:503) 	  at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:133)  ""Attach Listener@1642"" daemon prio=5 tid=0x5 nid=NA runnable   java.lang.Thread.State: RUNNABLE  ""Signal Dispatcher@1643"" daemon prio=9 tid=0x4 nid=NA runnable   java.lang.Thread.State: RUNNABLE ```  ---  **Affects:** 3.1.1  **Reference URL:** http://stackoverflow.com/questions/15768556/accessing-servlet-scoped-beans-from-another-thread  **Attachments:** - [sdl.tar](https://jira.spring.io/secure/attachment/21131/sdl.tar) (_30.00 kB_)  **Issue Links:** - #17506 Concurrent session attributes updates potentially lost  0 votes, 5 watchers","closed","type: bug,","spring-projects-issues","2013-04-02T09:29:10Z","2019-01-11T21:14:48Z"
"","14901","JdbcTemplate compatibility with Hibernate 4.1.9's proxied JDBC Statements [SPR-10267]","**[Amit](https://jira.spring.io/secure/ViewProfile.jspa?name=table1)** opened **[SPR-10267](https://jira.spring.io/browse/SPR-10267?redirect=false)** and commented  I upgraded my project with the latest spring and hibernate releases (spring 3.2.1 and hibernate 4.1.9) but they seem to be incompatible. One of the changes are part of spring's jdbc framework.  We use a combination of JPA (`HibernateJPADialect` & `JpaTransactionManager`) & JDBC in our application. For mapped entities JPA is used (included JPQL queries) while for non mapped objects direct JDBC is used.  Spring binds the data source resource with the connection handle created through hibernate jpa dialect. This means any request to create a connection gets delegated to hibernate which proxies connections and statements. Hence when a connection is requested for executing a query through spring's jdbc template we get a proxied connection.  Hibernate 4.1.9 proxies jdbc statements (which was not done in the earlier versions at least 3.6). The proxy throws runtime exception instead of checked exception (`SQLGrammerException` instead of `SQLException` is thrown for e.g. in scenarios where a select query is executed on a table which does not exists). Since a runtime exception is thrown, the code in the catch block of `jdbc.executeQuery()` never gets executed.   ---  **Affects:** 3.2.1  **Reference URL:** http://forum.springsource.org/showthread.php?134595-Spring-Compatibility-with-Hibernate-4-1-9&p=437518  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2013-02-06T21:52:00Z","2014-02-03T05:50:01Z"
"","14804","Community Download site mentioned in the docs doesn't work [SPR-10171]","**[Amit Pugalia](https://jira.spring.io/secure/ViewProfile.jspa?name=amit)** opened **[SPR-10171](https://jira.spring.io/browse/SPR-10171?redirect=false)** and commented  In the PDF documentation Page 8, it refers to downloading the dependent jars from the community download site. The URL provided is, http://www.springsource.org/downloads/community. This URL when hit reports ""Page not found"".   ---  **Affects:** 3.2.1  **Reference URL:** http://static.springsource.org/spring/docs/3.2.x/spring-framework-reference/  **Backported to:** [3.1.4](https://github.com/spring-projects/spring-framework/milestone/83?closed=1)","closed","type: documentation,","spring-projects-issues","2013-01-12T21:57:59Z","2013-11-07T07:52:13Z"
"","15428","Error in docs, part 6.5.5 Configuring a ConversionService [SPR-10802]","**[Amir Pashazadeh](https://jira.spring.io/secure/ViewProfile.jspa?name=pasha)** opened **[SPR-10802](https://jira.spring.io/browse/SPR-10802?redirect=false)** and commented  In part 6.5.5 Configuring a ConversionService it is coded as:  ```                                            ```  but the **converters** 's setter method accepts a **Set* not a *List**.    ---  **Affects:** 3.1.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f3504b2fd5cf61a91cd9055d9401c87a9144c51b","closed","type: documentation,","spring-projects-issues","2013-08-03T13:06:15Z","2013-12-03T15:15:32Z"
"","15169","RestTemplate does not support IPv6 raw address (as opposed to hostname) [SPR-10539]","**[Amir Kibbar](https://jira.spring.io/secure/ViewProfile.jspa?name=amirkibbar)** opened **[SPR-10539](https://jira.spring.io/browse/SPR-10539?redirect=false)** and commented  When using for example: restTeamplte.getForObject(""http://[2002:103c:b8d2::103c:b8d2]:8326/"", String.class)  the UriTemplate within the RestTemplate incorrectly encodes the URL into: http://%5B2002:103/c:b8d2::103c:b8d2%5D:8326/oo/rest/version  where %5B is [ and %5D is ]. Also a / is added before the ""c"" in the second address section.  It seems like the UriTemplate is not aware of the IPv6 address format   ---  **Affects:** 3.1.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2dd4480103716fd1f68c56efd519cbc20210740d, https://github.com/spring-projects/spring-framework/commit/4ef490621fbf436d61d4f134c035ea9634a5c6e3, https://github.com/spring-projects/spring-framework/commit/92795f463a2cebeb4159ecff53e57b038ced016c  2 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2013-05-08T02:59:16Z","2013-10-31T12:28:01Z"
"","15364","BeanDefinitions registered using BeanDefinitionRegistry not always eligible for autowiring when using @Qualifier [SPR-10736]","**[Allard Buijze](https://jira.spring.io/secure/ViewProfile.jspa?name=abuijze)** opened **[SPR-10736](https://jira.spring.io/browse/SPR-10736?redirect=false)** and commented  I use a custom namespace, and have some BeanDefinitionParsers that generate bean definitions. In one case, I need a single xml element to produce multiple bean definitions. It seems to work just fine by registering the non-primary beans using the parerContext->beanDefinitionRegistry.  However, when a bean has a dependency on one of these non-primary beans using the bean id as value in `@Qualifier`, the bean is not found. If I use ApplicationContext.getBean, I can find it. Strangely, if I use the `@Autowired` and `@Qualifier` in a junit unit test(with SpringJunit4Runner), they are properly injected.  This worked in Spring 3.1.x, but doesn't in 3.2.x. I've doublechecked the documentation to ensure that I didn't do something that made it work 'accidentally' in 3.1. Couldn't find anything.  - Update -- Further investigation revealed that the fact that I am using a BeanDefinition using ""factoryBeanName"" and ""factoryMethodName"" has to do with the error. When using a FactoryBean instead, the problem is circumvented. This may mean it has nothing to do with (non-)primary beans, but more with the dependency resolution and the factoryMethod way of defining beans.   ---  **Affects:** 3.2 GA, 3.2.1, 3.2.2, 3.2.3","closed","in: core,","spring-projects-issues","2013-07-11T11:29:41Z","2014-10-28T05:24:33Z"
"","14733","Spring MVC Test Framework doesn't support custom validation constraints [SPR-10100]","**[Aliaksandr Kazlou](https://jira.spring.io/secure/ViewProfile.jspa?name=akazlou)** opened **[SPR-10100](https://jira.spring.io/browse/SPR-10100?redirect=false)** and commented  ``` @Controller public class SignupController {      @RequestMapping(value = Routes.Signup.SIGNUP, method = RequestMethod.POST)     public String signup(@Valid AccountForm form, BindingResult bindingResult, final WebRequest request) {          if (bindingResult.hasErrors()) {             return null;         } ... // the rest of the controller is skipped } ```  ``` @Confirm(field = ""password"", message = ""{Confirm.password}"") public class AccountForm {      @NotEmpty(message = ""{NotEmpty.email}"")     @Email(message = ""{Email}"")     private String email;      @Password //","closed","status: declined,","spring-projects-issues","2012-12-16T03:14:10Z","2019-01-12T16:24:42Z"
"","15207","Revert change for SPR-10402 that allowed treating empty values as missing values [SPR-10578]","**[Alfred Staflinger](https://jira.spring.io/secure/ViewProfile.jspa?name=ihr-staal)** opened **[SPR-10578](https://jira.spring.io/browse/SPR-10578?redirect=false)** and commented  Today, I have downloaded Spring Framework 3.2.3.  Now, _handleMissingValue_ is called, even if the _`@RequestParam`_ attribute _required_ = _false_!  IMHO, this new behaviour is suboptimal. We have many cases, where an empty string parameter value (which has been converted to _null_ by the property editor) **should not** be handled as missing parameter (even if _required_ = _true_)! And I guess that many others who relied on the prior behaviour will be confused, too.  ---  **Affects:** 3.2.3  **Issue Links:** - #15213 Optional parameter in web method now raises error, breaks compatibility with the past (_**""is duplicated by""**_) - #15221 spring 3.2.3 `@RequestParam`(value=""username"", required=false)   bug (_**""is duplicated by""**_) - #15035 Request `@RequestParam` not enforced with empty values  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/abfb439bfed05257b256710b132c4c03f3a915c0, https://github.com/spring-projects/spring-framework/commit/2d8315fba04faae73fa8384468de7f172d27794c  6 votes, 10 watchers","closed","type: bug,","spring-projects-issues","2013-05-21T03:28:19Z","2019-01-13T06:59:50Z"
"","15314","${} placeholders are not resolved in @ImportResource [SPR-10686]","**[Alexey Kolyagin](https://jira.spring.io/secure/ViewProfile.jspa?name=akolyagin)** opened **[SPR-10686](https://jira.spring.io/browse/SPR-10686?redirect=false)** and commented  ${} placeholders are not substituted with values from Environment's PropertySources.  This can be easily fixed by changing line 216 of org.springframework.context.annotation.ConfigurationClassParser  from:  ```java configClass.addImportedResource(resource, readerClass); ```  to:  ```java configClass.addImportedResource(environment.resolveRequiredPlaceholders(resource), readerClass); ```  Would very much appreciate it if the fix was included into the upcoming 3.2.4 release.   ---  **Affects:** 3.2.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1a8f0d6a9e37d12b31a2fe7bc1fbc2c91700a08e, https://github.com/spring-projects/spring-framework/commit/67f41b15ebdeb7dd60869b06d2053df04107eac1  1 votes, 4 watchers","closed","type: bug,","spring-projects-issues","2013-06-25T01:10:52Z","2019-01-13T21:03:16Z"
"","15286","@CacheEvict key should allow referencing return value [SPR-10658]","**[Alexander Kharitonov](https://jira.spring.io/secure/ViewProfile.jspa?name=chemist)** opened **[SPR-10658](https://jira.spring.io/browse/SPR-10658?redirect=false)** and commented  Currently the key attribute of the `@CacheEvict` annotation does not allow referring to the value returned by the method invocation. Thus, it's impossible to define something along:  ```java //evict cached null value if room created @CacheEvict(value = ""rooms"", key = ""#result"") public int addRoom(Room newRoom) { 	int generatedRoomId = roomDao.addRoom(newRoom); 	return generatedRoomId; }  //can return null (null caching allowed) @Cacheable(value = ""rooms"", key = ""#p0"") public Room getRoom(Integer roomId) { 	return roomDao.getRoom(roomId); } ```  ---  **Affects:** 3.2.3  **Reference URL:** https://jira.springsource.org/browse/SPR-8871  **Issue Links:** - #15292 Make #result available for SpEL in `@CachePut` key attribute  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/34ad1b1820fe54728a740d9aa403121aa638fa97, https://github.com/spring-projects/spring-framework-issues/commit/7839edad55ead8d135a378cb623552cc654aff40","closed","type: enhancement,","spring-projects-issues","2013-06-16T13:17:10Z","2019-01-13T06:59:21Z"
"","14961","Autowiring by type doesn't work if bean name matches to some other class [SPR-10327]","**[Alexander Ivkin](https://jira.spring.io/secure/ViewProfile.jspa?name=funkyman)** opened **[SPR-10327](https://jira.spring.io/browse/SPR-10327?redirect=false)** and commented  Following configuration doesn't work unless `B.b()` method get other than 'b' or 'a' name:  ```java @Configuration @Import(B.class) public class A {     @Autowired     private MyBean myBean; }  @Configuration public class B {     @Bean     public MyBean b() {         return new MyBean();     } } ```  Such kind of configuration is always appeared after obfuscation. Original project files attached to the issue.  Exception occurs:  ``` ------------------------------ INFO: Destroying singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@2c96cf11: defining beans [org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,a,org.springframework.context.annotation.ConfigurationClassPostProcessor$ImportAwareBeanPostProcessor#0,b]; root of factory hierarchy Exception in thread ""main"" org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'a': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private t.MyBean t.A.myBean; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No matching bean of type [t.MyBean] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)} 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:287) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1106) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:517) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:609) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:918) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:469) 	at org.springframework.context.annotation.AnnotationConfigApplicationContext.(AnnotationConfigApplicationContext.java:73) 	at t.App.main(App.java:11) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 	at java.lang.reflect.Method.invoke(Method.java:597) 	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:120) Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: private t.MyBean t.A.myBean; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No matching bean of type [t.MyBean] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)} 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:506) 	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:87) 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:284) 	... 17 more Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No matching bean of type [t.MyBean] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)} 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoSuchBeanDefinitionException(DefaultListableBeanFactory.java:952) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:821) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:735) 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:478) 	... 19 more ```    ---  **Affects:** 3.1.2  **Attachments:** - [A.java](https://jira.spring.io/secure/attachment/20980/A.java) (_336 bytes_) - [App.java](https://jira.spring.io/secure/attachment/20981/App.java) (_276 bytes_) - [B.java](https://jira.spring.io/secure/attachment/20978/B.java) (_281 bytes_) - [MyBean.java](https://jira.spring.io/secure/attachment/20979/MyBean.java) (_88 bytes_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/29d394e1d6a3a32b7f66e047f7684298961eaba0","closed","in: core,","spring-projects-issues","2013-02-24T06:15:42Z","2019-01-11T21:02:55Z"
"","14940","Spring request mapping annotation does not map an encoded URI correctly [SPR-10306]","**[Alexander Hawley](https://jira.spring.io/secure/ViewProfile.jspa?name=hawleyal)** opened **[SPR-10306](https://jira.spring.io/browse/SPR-10306?redirect=false)** and commented  When using the Spring request mapping annotation (`org.springframework.web.bind.annotation.RequestMapping`), the `value` attribute does not map an encoded URI correctly. Some encoded reserved characters are excluded.  For example, the slash character `/`, encoded as `%2f`, is excluded.  Results as follows.  List of strings which contain reserved characters:  ```java List paths = Arrays.asList(     ""foo%boo""     ,""foo/boo""     ,""foo?boo""     ,""foo=boo""     ,""foo&boo""     ,""foo#boo""     ,""foo$boo""     ,""foo+boo""     ,""foo,boo""     ,""foo:boo""     ,""foo;boo""     ,""foo@boo"" ); ```  Controller action to receive requests:  ```java @RequestMapping(value = ""/encoded/{value}"", method = RequestMethod.GET) public @ResponseBody String encoded_show() {     return ""encoded_show""; } ```  Results in the URIs & responses (when requested):  ``` path: ""foo%boo"" uri: ""/encoded/foo%25boo"" controller_action: ""encoded_show""  path: ""foo/boo"" uri: ""/encoded/foo%2Fboo"" controller_action: (404 Not Found)  path: ""foo?boo"" uri: ""/encoded/foo%3Fboo"" controller_action: ""encoded_show""  path: ""foo=boo"" uri: ""/encoded/foo%3Dboo"" controller_action: ""encoded_show""  path: ""foo&boo"" uri: ""/encoded/foo%26boo"" controller_action: ""encoded_show""  path: ""foo#boo"" uri: ""/encoded/foo%23boo"" controller_action: ""encoded_show""  path: ""foo$boo"" uri: ""/encoded/foo%24boo"" controller_action: ""encoded_show""  path: ""foo+boo"" uri: ""/encoded/foo%2Bboo"" controller_action: ""encoded_show""  path: ""foo,boo"" uri: ""/encoded/foo%2Cboo"" controller_action: ""encoded_show""  path: ""foo:boo"" uri: ""/encoded/foo%3Aboo"" controller_action: ""encoded_show""  path: ""foo;boo"" uri: ""/encoded/foo%3Bboo"" controller_action: ""encoded_show""  path: ""foo@boo"" uri: ""/encoded/foo%40boo"" controller_action: ""encoded_show"" ```  In order to catch the request for `foo/boo` (encoded as `foo%2Fboo`), an additional controller action must be used with wildcard instead of path parameter:  ```java @RequestMapping(value = ""/encoded/**"", method = RequestMethod.GET) public @ResponseBody String encoded_any() {     return ""encoded_any""; } ```  Any ideas?  Thanks.  -AH  ---  **Affects:** 3.1 GA  **Issue Links:** - #14939 Spring URI template class does not encode a URI correctly  (_**""is duplicated by""**_) - #16028 spring:url tag does not correctly encode forward slash / in path variable. Should be calling encodePathSegment - #14937 Spring tag library does not encode a URI correctly  1 votes, 3 watchers","closed","status: declined,","spring-projects-issues","2013-02-15T14:37:54Z","2019-01-13T21:04:21Z"
"","14939","Spring URI template class does not encode a URI correctly  [SPR-10305]","**[Alexander Hawley](https://jira.spring.io/secure/ViewProfile.jspa?name=hawleyal)** opened **[SPR-10305](https://jira.spring.io/browse/SPR-10305?redirect=false)** and commented  When using the Spring template class (`org.springframework.web.util.UriTemplate`), the `expand` method does not encode a URI correctly. Some reserved characters are not encoded ever, others only sometimes.  For example, the slash character `/` should be encoded as `%2f`.  I've tried every permutation I could think of. Templating, not templating, parameters, et al.  Results as follows.  List of strings which contain reserved characters:  ```java List paths = Arrays.asList(     ""foo%boo""     ,""foo/boo""     ,""foo?boo""     ,""foo=boo""     ,""foo&boo""     ,""foo#boo""     ,""foo$boo""     ,""foo+boo""     ,""foo,boo""     ,""foo:boo""     ,""foo;boo""     ,""foo@boo"" ); ```  Java to utilize the URI template class:  ```java for (String path : paths) {     System.out.println(""path: \"""" + path + ""\"""");     System.out.println(""UriTemplate#expand: \"""" + (new UriTemplate(""{path}"")).expand(path).toString() + ""\"""");     System.out.println(""UriTemplate#expand, path: \"""" + (new UriTemplate(""http://domain.com/{path}"")).expand(path).toString() + ""\"""");     System.out.println(""UriTemplate#expand, query: \"""" + (new UriTemplate(""http://domain.com/?{path}"")).expand(path).toString() + ""\"""");     System.out.println(""UriTemplate#expand, query param: \"""" + (new UriTemplate(""http://domain.com/?param={path}"")).expand(path).toString() + ""\""""); } ```  Result:  ``` path: ""foo%boo"" UriTemplate#expand: ""foo%25boo"" UriTemplate#expand, path: ""http://domain.com/foo%25boo"" UriTemplate#expand, query: ""http://domain.com/?foo%25boo"" UriTemplate#expand, query param: ""http://domain.com/?param=foo%25boo""  path: ""foo/boo"" UriTemplate#expand: ""foo/boo"" UriTemplate#expand, path: ""http://domain.com/foo/boo"" UriTemplate#expand, query: ""http://domain.com/?foo/boo"" UriTemplate#expand, query param: ""http://domain.com/?param=foo/boo""  path: ""foo?boo"" UriTemplate#expand: ""foo%3Fboo"" UriTemplate#expand, path: ""http://domain.com/foo%3Fboo"" UriTemplate#expand, query: ""http://domain.com/?foo?boo"" UriTemplate#expand, query param: ""http://domain.com/?param=foo?boo""  path: ""foo=boo"" UriTemplate#expand: ""foo=boo"" UriTemplate#expand, path: ""http://domain.com/foo=boo"" UriTemplate#expand, query: ""http://domain.com/?foo%3Dboo"" UriTemplate#expand, query param: ""http://domain.com/?param=foo%3Dboo""  path: ""foo&boo"" UriTemplate#expand: ""foo&boo"" UriTemplate#expand, path: ""http://domain.com/foo&boo"" UriTemplate#expand, query: ""http://domain.com/?foo%26boo"" UriTemplate#expand, query param: ""http://domain.com/?param=foo%26boo""  path: ""foo#boo"" UriTemplate#expand: ""foo%23boo"" UriTemplate#expand, path: ""http://domain.com/foo%23boo"" UriTemplate#expand, query: ""http://domain.com/?foo%23boo"" UriTemplate#expand, query param: ""http://domain.com/?param=foo%23boo""  path: ""foo$boo"" UriTemplate#expand: ""foo$boo"" UriTemplate#expand, path: ""http://domain.com/foo$boo"" UriTemplate#expand, query: ""http://domain.com/?foo$boo"" UriTemplate#expand, query param: ""http://domain.com/?param=foo$boo""  path: ""foo+boo"" UriTemplate#expand: ""foo+boo"" UriTemplate#expand, path: ""http://domain.com/foo+boo"" UriTemplate#expand, query: ""http://domain.com/?foo%2Bboo"" UriTemplate#expand, query param: ""http://domain.com/?param=foo%2Bboo""  path: ""foo,boo"" UriTemplate#expand: ""foo,boo"" UriTemplate#expand, path: ""http://domain.com/foo,boo"" UriTemplate#expand, query: ""http://domain.com/?foo,boo"" UriTemplate#expand, query param: ""http://domain.com/?param=foo,boo""  path: ""foo:boo"" UriTemplate#expand: ""foo:boo"" UriTemplate#expand, path: ""http://domain.com/foo:boo"" UriTemplate#expand, query: ""http://domain.com/?foo:boo"" UriTemplate#expand, query param: ""http://domain.com/?param=foo:boo""  path: ""foo;boo"" UriTemplate#expand: ""foo;boo"" UriTemplate#expand, path: ""http://domain.com/foo;boo"" UriTemplate#expand, query: ""http://domain.com/?foo;boo"" UriTemplate#expand, query param: ""http://domain.com/?param=foo;boo""  path: ""foo@boo"" UriTemplate#expand: ""foo@boo"" UriTemplate#expand, path: ""http://domain.com/foo@boo"" UriTemplate#expand, query: ""http://domain.com/?foo@boo"" UriTemplate#expand, query param: ""http://domain.com/?param=foo@boo"" ```  Any ideas?  Thanks.  -AH  ---  **Affects:** 3.1 GA  **Issue Links:** - #14940 Spring request mapping annotation does not map an encoded URI correctly (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2013-02-15T12:41:59Z","2019-01-12T16:47:05Z"
"","14937","Spring tag library does not encode a URI correctly [SPR-10303]","**[Alexander Hawley](https://jira.spring.io/secure/ViewProfile.jspa?name=hawleyal)** opened **[SPR-10303](https://jira.spring.io/browse/SPR-10303?redirect=false)** and commented  When using the Spring tag lib (`http://www.springframework.org/tags`), the `spring:url` tag does not encode a URI correctly. Some reserved characters are not encoded ever, others only sometimes.  For example, the slash character `/` should be encoded as `%2f`.  I've tried every permutation I could think of. Templating, not templating, parameters, et al.  Results as follows.  List of strings which contain reserved characters:  ```java List paths = Arrays.asList(     ""foo%boo""     ,""foo/boo""     ,""foo?boo""     ,""foo=boo""     ,""foo&boo""     ,""foo#boo""     ,""foo$boo""     ,""foo+boo""     ,""foo,boo""     ,""foo:boo""     ,""foo;boo""     ,""foo@boo"" ); ```  JSP to utilize the Spring tag library:  ```xml                                                     path: """"           spring:url, path: """"           spring:url, query: """"           spring:url, spring:param: """"           spring:url, spring:param, domain: """"           spring:url, spring:param, template: """"           spring:url, spring:param, template, path: """"           spring:url, spring:param, template, query: """"                          ```  Result:  ``` path: ""foo%boo"" spring:url, path: ""http://domain.com/foo%boo"" spring:url, query: ""http://domain.com/?foo%boo"" spring:url, spring:param: ""?param=foo%25boo"" spring:url, spring:param, domain: ""http://domain.com/?param=foo%25boo"" spring:url, spring:param, template: ""foo%25boo"" spring:url, spring:param, template, path: ""http://domain.com/foo%25boo"" spring:url, spring:param, template, query: ""http://domain.com/?foo%25boo""  path: ""foo/boo"" spring:url, path: ""http://domain.com/foo/boo"" spring:url, query: ""http://domain.com/?foo/boo"" spring:url, spring:param: ""?param=foo/boo"" spring:url, spring:param, domain: ""http://domain.com/?param=foo/boo"" spring:url, spring:param, template: ""foo/boo"" spring:url, spring:param, template, path: ""http://domain.com/foo/boo"" spring:url, spring:param, template, query: ""http://domain.com/?foo/boo""  path: ""foo?boo"" spring:url, path: ""http://domain.com/foo?boo"" spring:url, query: ""http://domain.com/?foo?boo"" spring:url, spring:param: ""?param=foo?boo"" spring:url, spring:param, domain: ""http://domain.com/?param=foo?boo"" spring:url, spring:param, template: ""foo%3Fboo"" spring:url, spring:param, template, path: ""http://domain.com/foo%3Fboo"" spring:url, spring:param, template, query: ""http://domain.com/?foo%3Fboo""  path: ""foo=boo"" spring:url, path: ""http://domain.com/foo=boo"" spring:url, query: ""http://domain.com/?foo=boo"" spring:url, spring:param: ""?param=foo%3Dboo"" spring:url, spring:param, domain: ""http://domain.com/?param=foo%3Dboo"" spring:url, spring:param, template: ""foo=boo"" spring:url, spring:param, template, path: ""http://domain.com/foo=boo"" spring:url, spring:param, template, query: ""http://domain.com/?foo=boo""  path: ""foo&boo"" spring:url, path: ""http://domain.com/foo&boo"" spring:url, query: ""http://domain.com/?foo&boo"" spring:url, spring:param: ""?param=foo%26boo"" spring:url, spring:param, domain: ""http://domain.com/?param=foo%26boo"" spring:url, spring:param, template: ""foo&boo"" spring:url, spring:param, template, path: ""http://domain.com/foo&boo"" spring:url, spring:param, template, query: ""http://domain.com/?foo&boo""  path: ""foo#boo"" spring:url, path: ""http://domain.com/foo#boo"" spring:url, query: ""http://domain.com/?foo#boo"" spring:url, spring:param: ""?param=foo%23boo"" spring:url, spring:param, domain: ""http://domain.com/?param=foo%23boo"" spring:url, spring:param, template: ""foo%23boo"" spring:url, spring:param, template, path: ""http://domain.com/foo%23boo"" spring:url, spring:param, template, query: ""http://domain.com/?foo%23boo""  path: ""foo$boo"" spring:url, path: ""http://domain.com/foo$boo"" spring:url, query: ""http://domain.com/?foo$boo"" spring:url, spring:param: ""?param=foo$boo"" spring:url, spring:param, domain: ""http://domain.com/?param=foo$boo"" spring:url, spring:param, template: ""foo$boo"" spring:url, spring:param, template, path: ""http://domain.com/foo$boo"" spring:url, spring:param, template, query: ""http://domain.com/?foo$boo""  path: ""foo+boo"" spring:url, path: ""http://domain.com/foo+boo"" spring:url, query: ""http://domain.com/?foo+boo"" spring:url, spring:param: ""?param=foo%2Bboo"" spring:url, spring:param, domain: ""http://domain.com/?param=foo%2Bboo"" spring:url, spring:param, template: ""foo+boo"" spring:url, spring:param, template, path: ""http://domain.com/foo+boo"" spring:url, spring:param, template, query: ""http://domain.com/?foo+boo""  path: ""foo,boo"" spring:url, path: ""http://domain.com/foo,boo"" spring:url, query: ""http://domain.com/?foo,boo"" spring:url, spring:param: ""?param=foo,boo"" spring:url, spring:param, domain: ""http://domain.com/?param=foo,boo"" spring:url, spring:param, template: ""foo,boo"" spring:url, spring:param, template, path: ""http://domain.com/foo,boo"" spring:url, spring:param, template, query: ""http://domain.com/?foo,boo""  path: ""foo:boo"" spring:url, path: ""http://domain.com/foo:boo"" spring:url, query: ""http://domain.com/?foo:boo"" spring:url, spring:param: ""?param=foo:boo"" spring:url, spring:param, domain: ""http://domain.com/?param=foo:boo"" spring:url, spring:param, template: ""foo:boo"" spring:url, spring:param, template, path: ""http://domain.com/foo:boo"" spring:url, spring:param, template, query: ""http://domain.com/?foo:boo""  path: ""foo;boo"" spring:url, path: ""http://domain.com/foo;boo"" spring:url, query: ""http://domain.com/?foo;boo"" spring:url, spring:param: ""?param=foo;boo"" spring:url, spring:param, domain: ""http://domain.com/?param=foo;boo"" spring:url, spring:param, template: ""foo;boo"" spring:url, spring:param, template, path: ""http://domain.com/foo;boo"" spring:url, spring:param, template, query: ""http://domain.com/?foo;boo""  path: ""foo@boo"" spring:url, path: ""http://domain.com/foo@boo"" spring:url, query: ""http://domain.com/?foo@boo"" spring:url, spring:param: ""?param=foo@boo"" spring:url, spring:param, domain: ""http://domain.com/?param=foo@boo"" spring:url, spring:param, template: ""foo@boo"" spring:url, spring:param, template, path: ""http://domain.com/foo@boo"" spring:url, spring:param, template, query: ""http://domain.com/?foo@boo"" ```  Any ideas?  Thanks.  -AH  ---  **Affects:** 3.1 GA  **Issue Links:** - #16028 spring:url tag does not correctly encode forward slash / in path variable. Should be calling encodePathSegment (_**""duplicates""**_) - #14940 Spring request mapping annotation does not map an encoded URI correctly","closed","in: web,","spring-projects-issues","2013-02-15T11:25:32Z","2019-01-12T16:47:06Z"
"","15030","Memory leak with SimpleMessageListenerContainer and ChainedExceptionListener on Single/CachingConnectionFactory [SPR-10397]","**[Alexander Franken](https://jira.spring.io/secure/ViewProfile.jspa?name=afranken11)** opened **[SPR-10397](https://jira.spring.io/browse/SPR-10397?redirect=false)** and commented  Identifying as major due to the probability that one could run into this.  It appears each container instance is added to `ChainedExceptionListener` delegate `List` but they are never removed (even after container stop/shutdown). This becomes a problem when the message container resides in an `ApplicationContext` that is not the root context (I imagine if the scope of the container is not singleton one would run into this as well).  We use `CachingConnectionFactory` and have an architecture where we create child `ApplicationContexts`.  We then have the desire to create message containers within the child contexts.  This `ChainedExceptionListener` is preventing our child contexts from being gc'd and adoption of this is a show stopper for us.  Note: 1. `DefaultMessageListenerContainer` did not have this problem.  However, we are not adopting it yet due to our design and the polling nature (1 additional thread per container requirement).  We do have the desire to adopt this for transactional support but again the additional overhead of threads is a show stopper at this point (given our design).  ---  **Affects:** 3.2.1  **Issue Links:** - #20294 JMS Integration with Tibco causes deadlock while using DefaultMessageListenerContainer - #18000 ConcurrentModificationException in SingleConnectionFactory$AggregatedExceptionListener  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4927c9054f0bf906196c995862ad2c423b47a073  1 votes, 3 watchers","closed","type: bug,","spring-projects-issues","2013-03-19T11:02:35Z","2019-01-11T19:37:52Z"
"","14748","Regression in static setter method support [SPR-10115]","**[Alexander Franken](https://jira.spring.io/secure/ViewProfile.jspa?name=afranken11)** opened **[SPR-10115](https://jira.spring.io/browse/SPR-10115?redirect=false)** and commented  The priority may not be correct but set it to Blocker as our production code based on 3.1.2 cannot run with 3.2.0. Attempted to upgrade from 3.1.2 to 3.2.0 and received the following exception, which is preventing us from adopting 3.2.0 for the immediate term. Should be able to trigger this by trying to inject a dependency into a bean whose super class has a static setter for the respective property.  We also have no getter.  ``` Caused by: org.springframework.beans.NotWritablePropertyException: Invalid property 'x' of bean class [y]: Bean property 'x' is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter?        at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:1044)        at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:904)        at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:75)        at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:57)        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1424)        ... 83 more ```    ---  **Affects:** 3.2 M2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/38f84fa03ed9ca35750bb76303f94dd2dd8abfc2, https://github.com/spring-projects/spring-framework/commit/7a19fd575045333b970e645f6db8a15302484038, https://github.com/spring-projects/spring-framework/commit/a3161632dd71920efb769b3a80555e89949b7695","closed","in: core,","spring-projects-issues","2012-12-21T12:43:14Z","2012-12-31T05:53:17Z"
"","15213","Optional parameter in web method now raises error, breaks compatibility with the past [SPR-10584]","**[Alex](https://jira.spring.io/secure/ViewProfile.jspa?name=dusty)** opened **[SPR-10584](https://jira.spring.io/browse/SPR-10584?redirect=false)** and commented  A sample method defined as follows:  `@RequestMapping`(value = ""/test"") public String testMethod(Integer n) { if (n == null) // do something else // do something else }  stopped working in Spring 3.2.3 (works fine up to 3.2.2) because calling the url like: http://hostname/context/test?n= raises a MissingServletRequestParameterException while it should not (it should put a null in n) breaking completely the compatibility with existing apps.  ---  **Affects:** 3.2.3  **Issue Links:** - #15207 Revert change for SPR-10402 that allowed treating empty values as missing values (_**""duplicates""**_) - #15035 Request `@RequestParam` not enforced with empty values  0 votes, 5 watchers","closed","in: web,","spring-projects-issues","2013-05-24T08:22:38Z","2019-01-13T06:59:46Z"
"","14765","Improve documentation regarding which @MVC annotations are required on interfaces when proxying [SPR-10132]","**[Alex Sherwin](https://jira.spring.io/secure/ViewProfile.jspa?name=alex.sherwin@gmail.com)** opened **[SPR-10132](https://jira.spring.io/browse/SPR-10132?redirect=false)** and commented  Similar to #14764, when `@Controllers` implement interfaces, the documentation says that all annotations (`@RequestMapping`, `@ModelAttribute` etc) should be on the interface and not the implementation class.  However, when doing so, given this workflow:  Handle GET request -> render form view Handle POST (from form) -> validation errors -> render form view (with errors)  When the interface method looks like this: `@RequestMapping`(method = RequestMethod.POST) String doPost(`@ModelAttribute`(""email"") `@Valid` EmailDto email, BindingResult result);  The `@ModelAttribute` is ignored in this case, and the key for the model attribute for the EmailDto falls back to the default naming scheme (which would be ""emailDto"")  If I move `@ModelAttribute`(""email"") onto the implementation class (similar to #14764 for `@Valid`), it works as expected, mapping it in the model as ""email"" appropriately  ---  **Affects:** 3.2 GA","closed","type: enhancement,","spring-projects-issues","2012-12-29T10:58:53Z","2019-01-11T21:23:30Z"
"","14764","Use of @Valid on an Controller interface does not work [SPR-10131]","**[Alex Sherwin](https://jira.spring.io/secure/ViewProfile.jspa?name=alex.sherwin@gmail.com)** opened **[SPR-10131](https://jira.spring.io/browse/SPR-10131?redirect=false)** and commented  The documentation states when using interfaces for `@Controllers`, that all annotations must be present on the interface (`@RequestMapping`, `@ModelAttribute` etc).  This all works as advertised, however, `@Valid` does not.  It must be present on the implementation class method signature, otherwise it does not work.   ---  **Affects:** 3.2 GA","closed","in: web,","spring-projects-issues","2012-12-29T09:34:39Z","2019-01-12T16:47:18Z"
"","14998","Unnecessary check in PatternsRequestCondition.getMatchingPattern [SPR-10504]","**[Alex Pogrebnyak](https://jira.spring.io/secure/ViewProfile.jspa?name=alex.spring@reflexion.net)** opened **[SPR-10504](https://jira.spring.io/browse/SPR-10504?redirect=false)** and commented  On line 259 in `org.springframework.web.servlet.mvc.condition.PatternsRequestCondition` shipped with version 3.2.2 this block from `getMatchingPattern` function has unnecessary code.  ```java boolean endsWithSlash = pattern.endsWith(""/""); if (this.useTrailingSlashMatch) {     if (!endsWithSlash && this.pathMatcher.match(pattern + ""/"", lookupPath)) {         return pattern +""/"";     } } ```  `endsWithSlash` initialization should be moved inside `if` statement as it is not used anywhere else in the function   ---  **Affects:** 3.2.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4bb0916202ac19c20f77cc9883d0746660036389, https://github.com/spring-projects/spring-framework/commit/0634555424a8742bbe95333c49975437af6eacf8","closed","type: bug,","spring-projects-issues","2013-04-30T09:21:19Z","2013-05-10T10:03:55Z"
"","14753","jzentry==0 message=null [SPR-10120]","**[alakyea](https://jira.spring.io/secure/ViewProfile.jspa?name=alaky)** opened **[SPR-10120](https://jira.spring.io/browse/SPR-10120?redirect=false)** and commented  I have a problem with tika parser that can't read temprory zip file that it had created . this StackTrace is :  java.lang.InternalError: jzentry == 0, jzfile = 139750727169136, total = 235, name = /tmp/apache-tika-8076182698055047262.tmp, i = 176, message = null  at java.util.zip.ZipFile$2.nextElement(ZipFile.java:322)  at java.util.zip.ZipFile$2.nextElement(ZipFile.java:304)  at org.apache.poi.openxml4j.opc.ZipPackage.getPartsImpl(ZipPackage.java:158)  at org.apache.poi.openxml4j.opc.OPCPackage.getParts(OPCPackage.java:615)  at org.apache.poi.openxml4j.opc.OPCPackage.open(OPCPackage.java:208)  at org.apache.tika.parser.pkg.ZipContainerDetector.detectOfficeOpenXML(ZipContainerDetector.java:118)  at org.apache.tika.parser.pkg.ZipContainerDetector.detect(ZipContainerDetector.java:74)  at org.apache.tika.detect.CompositeDetector.detect(CompositeDetector.java:61)  at org.apache.tika.Tika.detect(Tika.java:134)  at org.apache.tika.Tika.detect(Tika.java:181)  at org.apache.tika.Tika.detect(Tika.java:228)  at java.lang.Thread.run(Thread.java:619)  AuotoDetectParser is use'd by multithread at the same time this . is this class thread-safe or problem is from temprory file ?   --- No further details from [SPR-10120](https://jira.spring.io/browse/SPR-10120?redirect=false)","closed","status: invalid,","spring-projects-issues","2012-12-24T02:46:43Z","2019-01-12T05:27:39Z"
"","14828","ClassCastException while using completeAutoload in Tiles 3 [SPR-10195]","**[Alaa Nassef](https://jira.spring.io/secure/ViewProfile.jspa?name=alan_125)** opened **[SPR-10195](https://jira.spring.io/browse/SPR-10195?redirect=false)** and commented  Using tiles 3, in the TilesConfigurer class, afterPropertiesSet() method, if completeAutoload is set to true, the tiles container is assumed to be an instance of BasicTilesContainer. However, the createDecoratedContainer(TilesContainer, ApplicationContext) implementation in org.apache.tiles.extras.complete.CompleteAutoloadTilesContainerFactory (which is called by the createContainer(ApplicationContext) method in org.apache.tiles.factory.BasicTilesContainerFactory wraps the BasicTilesContainer with CachingTilesContainer, so when this is cast in TilesConfigurer, a ClassCastException is thrown   ---  **Affects:** 3.2 GA  **Reference URL:** http://stackoverflow.com/questions/14363057/how-to-get-spring-3-2-to-work-with-tiles-3-and-regexp  **Attachments:** - [VAjaxTilesView.java](https://jira.spring.io/secure/attachment/21909/VAjaxTilesView.java) (_10.47 kB_) - [VFlowAjaxTilesView.java](https://jira.spring.io/secure/attachment/21910/VFlowAjaxTilesView.java) (_5.15 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8e1685caefae49ccd796ef9a8f707bc94d54680a","closed","type: bug,","spring-projects-issues","2013-01-20T06:03:32Z","2014-04-02T17:00:53Z"
"","14769","MessageSourceResourceBundle.containsKey throws NullPointerException [SPR-10136]","**[Adrien Bonnin](https://jira.spring.io/secure/ViewProfile.jspa?name=kaleideo)** opened **[SPR-10136](https://jira.spring.io/browse/SPR-10136?redirect=false)** and commented  When I try to use containsKey method on a MessageSourceResourceBundle instance I got the following NullPointerException :  Exception in thread ""main"" java.lang.NullPointerException at java.util.ResourceBundle.handleKeySet(ResourceBundle.java:1787) at java.util.ResourceBundle.containsKey(ResourceBundle.java:1741) at net.toto.main(Main.java:36)  Here is a sample code :  Locale locale = Locale.getDefault();  ResourceBundleMessageSource bundle = new ResourceBundleMessageSource(); bundle.setBasename(""bundles.Main""); System.out.println(bundle.getMessage(""settings"", new Object[0], locale));  MessageSourceResourceBundle bundle2 = new MessageSourceResourceBundle(bundle, locale); System.out.println(bundle2.getString(""settings""));  bundle2.containsKey(""settings""); // NullPointerException   ---  **Affects:** 3.1.2  **Backported to:** [3.1.4](https://github.com/spring-projects/spring-framework/milestone/83?closed=1)","closed","in: core,","spring-projects-issues","2012-12-31T07:00:43Z","2013-01-03T08:31:47Z"
"","15474","Add support for exclusive profile qualifiers [SPR-10847]","**[Adib Saikali](https://jira.spring.io/secure/ViewProfile.jspa?name=asaikali)** opened **[SPR-10847](https://jira.spring.io/browse/SPR-10847?redirect=false)** and commented  I frequently find that my projects have multiple profiles that should not be turned on at the same time. For example, I have a _standalone_ profile where a `DataSource` is configured directly and a _container_ profile where a `DataSource` is obtained via JNDI.  It does not make sense to ever have both the _container_ and the _standalone_ profiles turned on at the same time, and there is currently no way to represent this in Spring. A better way to model this situation would be to have a profile called _database_ with one qualifier called _standalone_ and another qualifier called _container_. For example something like the following.  ``` @Configuration @Profile(""DataSource"") public class DataSourceProfile {  	@Bean 	@ProfileQualifier(""container"") 	public DataSource dataSource() throws NamingException { 		InitialContext initialContext = new InitialContext(); 		DataSource result =  (DataSource) initialContext.lookup(""java:/comp/env/jdbc/testDB""); 		return checkNotNull(result); 	}  	@Bean 	@ProfileQualifier(""standalone"") 	public DataSource dataSource() { 		DriverManagerDataSource result = new DriverManagerDataSource(); 		result.setDriverClassName(""org.postgresql.Driver""); 		result.setUrl(""jdbc:postgresql://localhost:5432/test""); 		result.setUsername(""test""); 		result.setPassword(""test"");		 		return result;  	} } ```  When a profile with qualifiers is activated you can do things like `@ActiveProfiles({""DataSource"",""standalone""})`.  This qualifier concept for profiles means that you don't need to define profiles that are not supposed to be turned on at the same time.  ---  **Affects:** 3.2 GA, 4.0 M1, 4.0 M2","closed","status: bulk-closed,","spring-projects-issues","2013-08-20T11:39:21Z","2019-01-13T21:02:42Z"
"","15205","Doc: Spring MVC and the most 'specific' @RequestMapping URL pattern [SPR-10576]","**[Adib Saikali](https://jira.spring.io/secure/ViewProfile.jspa?name=asaikali)** opened **[SPR-10576](https://jira.spring.io/browse/SPR-10576?redirect=false)** and commented  In my app I have a catch all API controller mapped to /api/** this is supposed to execute if no other api controller catches the request. I also have a controller of with a mapping pattern similar to  ``` /api/{a}/{b}/{c} ```  when making a request such as /api/1/2/3 spring mvc always picks /api/** mapping even though the docs say that in case of multiple matches the match that is a longer url wins.  This all boils down to the a problem with the AntPatternMatcher which spring mvc uses as reported in the #13325 issue. #13325 is still in waiting to triage even though this bug has been reported in various other place like #12245 since 2010.  I spent at least 10+ hours tracking this bug down and stepping through the code for spring, thinking to myself oh this gotta be something I am missing it can't possibly be a spring bug given that Ant pattern matcher has been around forever.  As the other bugs seem to be forgotten and are all tied to 3.0 I am opening this bug just to have it show up in searches for others who run into this situation.  ---  **Affects:** 3.0 GA, 3.1 GA, 3.2 GA  **Issue Links:** - #15181 Assign lowest priority to ""/**"" in AntPathMatcher  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e4182da4ebb1197b84f979fea9e89a76343f242e","closed","in: web,","spring-projects-issues","2013-05-20T20:30:16Z","2019-01-13T21:03:32Z"
"","14936","Introduce JdbcTestUtils.deleteFromTableWhere method [SPR-10302]","**[Adib Saikali](https://jira.spring.io/secure/ViewProfile.jspa?name=asaikali)** opened **[SPR-10302](https://jira.spring.io/browse/SPR-10302?redirect=false)** and commented  `JdbcTestUtils` could really use a _delete where_ function, which is quite handy for cleaning up some rows, during or after an integration test.  ``` public static int deleteFromTableWhere(JdbcTemplate jdbcTemplate, String tableName, String whereClause) { 		String sql = ""DELETE FROM "" + tableName; 		if (StringUtils.hasText(whereClause)) { 			sql += "" WHERE "" + whereClause; 		} 		return jdbcTemplate.queryForInt(sql); 	} ```  ---  **Affects:** 3.2 GA, 3.2.1  **Issue Links:** - #15267 Introduce deleteFromTableWhere() in abstract transactional base classes in the TestContext Framework (_**""is depended on by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/720714b43456d3216f12fa679546cf29bb4b2c65  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2013-02-15T09:50:48Z","2019-01-11T21:06:43Z"
"","14930","Provide a JPA equivalent of JdbcTestUtils [SPR-10296]","**[Adib Saikali](https://jira.spring.io/secure/ViewProfile.jspa?name=asaikali)** opened **[SPR-10296](https://jira.spring.io/browse/SPR-10296?redirect=false)** and commented  When writing integration tests involving JPA `JdbcTestUtils` is quite useful, however it would be better if there was a `JpaTestUtils` which did everything that `JdbcTestUtils` does without requiring that we pass in table names. Rather the table names should be extracted from the JPA entity mappings.  For example.  ```java @Entity @Table(schema=""foo"",name=""bar"") public class Bar{ }  // this call should extract the name of the table that the Bar is mapped // to and then call JdbcTestUtils.countRowsInTable int rows = JpaTestUtils.countRows(jdbcTemplate,Bar.class);  ```  I am doing something like this in my base test classes, but it would be great if it was part of the official spring distribution.  The primary advantages for this approach are: * Tests don't break when table names are changed which happens during development, especially if you use a tool like flywaydb that makes it easy to build migration scripts * Eliminates strings and typos and leverages the power of the IDE    ---  **Affects:** 3.2 GA","open","type: enhancement,","spring-projects-issues","2013-02-14T02:31:30Z","2016-07-25T15:01:10Z"
"","14855","Allow @ControllerAdvice to be cofigured with a join point to target a subset of controller [SPR-10222]","**[Adib Saikali](https://jira.spring.io/secure/ViewProfile.jspa?name=asaikali)** opened **[SPR-10222](https://jira.spring.io/browse/SPR-10222?redirect=false)** and commented  I have two types of controllers in my spring application.  * View controllers that forward to views to generate HTML * API controllers that return JSON directly from the controllers  Both the API and View controllers are part of the same spring dispatcher servlet.  The documentation implies that `@ControllerAdvice` will be applied to every controller associated with a Dispatcher Servlet. With advice as part of the name I expected to be able to specify the pointcut and or join points that the advice applies to, but can't find out how that can be.  For example in my scenario I want a `@ControllerAdvice` for my View Controllers and separate `@ControllerAdvice` for my API controllers.  It would be great to provide a way to configure which controllers `@ControllerAdvice` will apply to.    ---  **Affects:** 3.2 GA, 3.2.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c4a8bf9c4dd745183d918c05f63752a5a7d317a0, https://github.com/spring-projects/spring-framework/commit/cfb66252eb4e07d9873f0328b5e52aad3a85e20a, https://github.com/spring-projects/spring-framework/commit/4f28c77db7875cec6a4bc6a3beae98308ba6dd01  1 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2013-01-27T11:00:17Z","2013-10-31T12:27:57Z"
"","14746","Add support for asserting JSON in ContentResultMatchers, just as there is for XML [SPR-10113]","**[Adarsh Ramamurthy](https://jira.spring.io/secure/ViewProfile.jspa?name=radarsh)** opened **[SPR-10113](https://jira.spring.io/browse/SPR-10113?redirect=false)** and commented  The `ContentResultMatchers` class should support asserting JSON strings directly. Using `jsonPath` isn't always helpful.  This is what I have done as a temporary workaround.  ``` public class JsonAwareContentResultMatchers extends ContentResultMatchers {      private final JsonExpectationsHelper jsonHelper = new JsonExpectationsHelper();      public ResultMatcher json(final String jsonContent) {         return new ResultMatcher() {              @Override             public void match(MvcResult result) throws Exception {                 String content = result.getResponse().getContentAsString();                 jsonHelper.assertJsonEqual(jsonContent, content);             }         };     } } ```  ``` import org.skyscreamer.jsonassert.JSONAssert;  public class JsonExpectationsHelper {      public void assertJsonEqual(String expected, String actual) throws Exception {         JSONAssert.assertEquals(expected, actual, false);     } } ```  ``` public static JsonAwareContentResultMatchers content2() {     return new JsonAwareContentResultMatchers(); } ```  ### Usage:  ``` .andExpect(status().isOk()) .andExpect(content2().contentType(""application/json"")) .andExpect(content2().json(""{\""message\"":\""Hello\""}"")) ```  ---  **Affects:** 3.2 GA  **Issue Links:** - #18493 Add support for asserting JSON in ContentRequestMatchers, just as there is for XML  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9e52004222addfe6498ed9eb6d8d8ad926ce21ea  1 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2012-12-20T06:42:57Z","2019-01-11T21:25:42Z"
"","14743","Add support for X-Forwarded-Host in ServletUriComponentsBuilder [SPR-10110]","**[Adarsh Ramamurthy](https://jira.spring.io/secure/ViewProfile.jspa?name=radarsh)** opened **[SPR-10110](https://jira.spring.io/browse/SPR-10110?redirect=false)** and commented  The problem with `ServletUriComponentsBuilder` is that it is poorly designed (uses only static method calls), eliminating the possibility to extend and enhance the behaviour.  One typical scenario that I discovered yesterday:  Our tomcat server is hosted behind Apache. The client (browser) accesses a URL using `www.example.com/path/to/resource`. However, because of the way Apache has been set up, it doesn't send along the `Host` header value of `www.example.com` to Tomcat. Instead, it sends the internal IP address. The original hostname of `www.example.com` is set in an `X-Forwarded-Host` header.  Now, because `ServletUriComponentsBuilder` uses `request.getServerName()` to construct the hostname part of the URL, any generated URLs will have the internal IP address instead of `www.example.com`.  The only way I can fix this currently is by either:  - Creating a `HttpServletRequestWrapper` that takes the value of `X-Forwarded-Host` header and sets it to `Host` header.  OR  - Rewriting `ServletUriComponentsBuilder` logic.  ---  **Reference URL:** https://github.com/SpringSource/spring-hateoas/issues/33  **Issue Links:** - #17368 Regression in 4.1.5: UriComponentsBuilder.fromHttpRequest sets port to 80 i.s.o nothing/443 - #18192 Add support for x-forwarded- HttpServletRequest wrapping - [SEC-2898](https://jira.spring.io/browse/SEC-2898) Use ServletUriComponentsBuilder.fromRequest for URL creation - #15346 X-Forwarded-Host handling in ServletUriComponentsBuilder does not treat ports correctly  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/153508a300772db262c6123f57fbc4bcbf89b4f4","closed","type: enhancement,","spring-projects-issues","2012-12-19T07:57:01Z","2019-01-11T21:25:25Z"
"","15458","Add support for JPA 2.1 schema generation options in AbstractJpaVendorAdapter [SPR-10832]","**[Adam Walczak - WALCZAK.IT](https://jira.spring.io/secure/ViewProfile.jspa?name=walec51)** opened **[SPR-10832](https://jira.spring.io/browse/SPR-10832?redirect=false)** and commented  A nice summary of the can be found here: https://blogs.oracle.com/arungupta/entry/jpa_2_1_schema_generation   --- No further details from [SPR-10832](https://jira.spring.io/browse/SPR-10832?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2013-08-13T16:04:50Z","2019-01-12T02:33:02Z"
"","14983","Circular dependency problem [SPR-10349]","**[Adam Pierzchała](https://jira.spring.io/secure/ViewProfile.jspa?name=apierzch)** opened **[SPR-10349](https://jira.spring.io/browse/SPR-10349?redirect=false)** and commented  I believe that situation that I have described in Stackoverflow is a bug (see [Reference URL](http://stackoverflow.com/questions/15188961/spring-circular-dependency-using-setters)). Such usage of `@Autowired` should work.  In this case `A` object requires a `B` to be constructed, but `B` does not require anything. So the order could be: * Construct B * Construct A (using B) * set A for B  And there is no circular dependency.  ---  Let me copy it here so that you don't have to jump to Stackoverflow:  ``` @Component private static class A {     @Autowired     public A(B b) {     } }  @Component private static class B {     private A a;      public B() {     }      @Autowired     public void setA(A a) {         this.a = a;     } } ```  Exception that I get:  ``` Exception in thread ""main"" org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'dependencyTest.A' defined in file [/home/adam/workspaces/testproject/target/classes/mypackage/test/DependencyTest$A.class]: Unsatisfied dependency expressed through constructor argument with index 0 of type [mypackage.test.DependencyTest$B]: : Error creating bean with name 'dependencyTest.B': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire method: public void mypackage.test.DependencyTest$B.setA(mypackage.test.DependencyTest$A); nested exception is org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name 'dependencyTest.A': Requested bean is currently in creation: Is there an unresolvable circular reference?; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dependencyTest.B': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire method: public void mypackage.test.DependencyTest$B.setA(mypackage.test.DependencyTest$A); nested exception is org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name 'dependencyTest.A': Requested bean is currently in creation: Is there an unresolvable circular reference?     at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:730)     at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:196)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1049)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:953)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:490)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:461)     at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:295)     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223)     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:292)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:626)     at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:932)     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:479)     at org.springframework.context.annotation.AnnotationConfigApplicationContext.(AnnotationConfigApplicationContext.java:84)     at mypackage.test.DependencyTest.main(DependencyTest.java:10) Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dependencyTest.B': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire method: public void mypackage.test.DependencyTest$B.setA(mypackage.test.DependencyTest$A); nested exception is org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name 'dependencyTest.A': Requested bean is currently in creation: Is there an unresolvable circular reference?     at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:288)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1120)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:522)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:461)     at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:295)     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223)     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:292)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:891)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:834)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:749)     at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:795)     at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:723)     ... 14 more Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire method: public void mypackage.test.DependencyTest$B.setA(mypackage.test.DependencyTest$A); nested exception is org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name 'dependencyTest.A': Requested bean is currently in creation: Is there an unresolvable circular reference?     at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredMethodElement.inject(AutowiredAnnotationBeanPostProcessor.java:601)     at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:87)     at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:285)     ... 26 more Caused by: org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name 'dependencyTest.A': Requested bean is currently in creation: Is there an unresolvable circular reference?     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.beforeSingletonCreation(DefaultSingletonBeanRegistry.java:327)     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:217)     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:292)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:891)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:834)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:749)     at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredMethodElement.inject(AutowiredAnnotationBeanPostProcessor.java:558)     ... 28 more ```  ---  **Affects:** 3.2.1  **Reference URL:** http://stackoverflow.com/questions/15188961/spring-circular-dependency-using-setters  **Issue Links:** - #13346 Doc: `@Autowired` properties not reliably set in FactoryBean before getObject (_**""duplicates""**_)  3 votes, 5 watchers","closed","status: bulk-closed,","spring-projects-issues","2013-03-03T10:56:37Z","2019-01-13T07:00:50Z"
"","14859","org.springframework.http.MediaType.parseMediaType should throw a better exception [SPR-10226]","**[Adam Gent](https://jira.spring.io/secure/ViewProfile.jspa?name=agentgt)** opened **[SPR-10226](https://jira.spring.io/browse/SPR-10226?redirect=false)** and commented  It would be very beneficial for: `org.springframework.http.MediaType.parseMediaType`  To not throw a generic IllegalArgumentException but a custom derived class. Maybe `MediaTypeParseArgumentException`?  The reason this is rather annoying is that an IllegalArgumentException is typically a bug in my system. So when I get the exception in an MVC ExceptionResolver: (`org.springframework.web.servlet.HandlerExceptionResolver`) I would rather ignore the media type exceptions as there typically spam bots hitting my site (this error comes from the RequestMapping... ie `org.springframework.web.servlet.mvc.method.RequestMappingInfo.getMatchingCondition`).  For now I just examine the stack trace looking for parseMediaType.  The other reason I would like this is in the past parseMediaType and MediaType in general has been rather picky particular when used in REST client/server. It would make it easier to debug problems if it were a unique exception.   ---  **Affects:** 3.1.4  **Reference URL:** https://gist.github.com/4661047  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/58f59d6851e40d872225952791741b2b50b43b06","closed","type: enhancement,","spring-projects-issues","2013-01-28T12:47:38Z","2013-01-30T07:20:51Z"
"","15439","Modify Spring 4.x documentation to reflect JSR-349 support [SPR-10813]","**[Adam Augusta](https://jira.spring.io/secure/ViewProfile.jspa?name=roxton)** opened **[SPR-10813](https://jira.spring.io/browse/SPR-10813?redirect=false)** and commented  As of #12848, JSR-349 is now supported by Spring. 7.8 Validation should, perhaps, allude to JSR-349 support in addition to JSR-303 support.  ---  **Affects:** 4.0 M2","closed","type: documentation,","spring-projects-issues","2013-08-07T09:03:28Z","2019-01-11T22:05:18Z"
"","15136","Improvement of ExceptionHandling and Testing on SizeLimitExceededException [SPR-10503]","**[Achim Rose](https://jira.spring.io/secure/ViewProfile.jspa?name=a.rose)** opened **[SPR-10503](https://jira.spring.io/browse/SPR-10503?redirect=false)** and commented  There is no way to catch the `SizeLimitExceededException` in a FileUpload-Controller with:  ``` @ExceptionHandler(SizeLimitExceededException.class) @ResponseBody public SomeWrapperModelForIEBehaviors fileSizeException(SizeLimitExceededException ex) ```  It would be easier to catch an exception in the same controller as the request handler.  At moment the only workaround is to override `CommonsMultipartResolver` and set an attribute in the request that marks that the file size has been exceeded and return an empty collection. Now it's possible to check the request for that attribute and decide to throw an exception which will be caught by a custom exception handler.  For more information see: http://stackoverflow.com/questions/4029583/using-spring-3-exceptionhandler-with-commons-fileupload-and-sizelimitexceededex  In both circumstances it's not possible to test if such an exception was thrown.  Because if you use:  ``` this.mockMvc.perform(fileUpload(""/suchAnUrl"").file(suchAMockMultipartFile)... ```  ... a `MockMultipartHttpServletRequest` will be created and ignored in `DispatcherServlet.checkMultipart(HttpServletRequest)` because the request extends `MultipartHttpServletRequest` and not only the `HttpServletRequest`.  The best way would be to access the controller method if an exception was thrown. Then it would be possible to react to such errors with a more user-friendly view.   ---  **Affects:** 3.2.1","closed","type: enhancement,","spring-projects-issues","2013-04-30T05:16:47Z","2013-06-17T06:16:28Z"
"","14999","improve DefaultPersistenceUnitManager so that it is useful as a base class [SPR-10366]","**[Aaron Hamid](https://jira.spring.io/secure/ViewProfile.jspa?name=ahamid)** opened **[SPR-10366](https://jira.spring.io/browse/SPR-10366?redirect=false)** and commented  `DefaultPersistenceUnitManager` is nearly unusable as a base class due to extensive use of private fields and methods.  I would like to propose changing many of these methods to protected visibility.  This should preferably include:  Fields:  * packagesToScan * mappingResources * defaultPersistenceUnitName * resourcePatternResolver  Methods:  * matchesFilter * readPersistenceUnitInfos * buildDefaultPersistenceUnitInfo    ---  **Affects:** 3.1 GA, 3.2.1","closed","type: enhancement,","spring-projects-issues","2013-03-08T21:04:02Z","2015-03-25T08:15:36Z"
"","14958","The JARs spring-test-3.2.1 and spring-webmvc-3.2.1 contain two MANIFEST.MF [SPR-10324]","**[Aaron Digulla](https://jira.spring.io/secure/ViewProfile.jspa?name=digulla)** opened **[SPR-10324](https://jira.spring.io/browse/SPR-10324?redirect=false)** and commented  The JAR files `spring-webmvc-3.2.1.RELEASE.jar` and `spring-test-3.2.1.RELEASE.jar` on [Maven Central](http://search.maven.org/) contain additional files in the root folder:  ``` license.txt MANIFEST.MF notice.txt ```  In all other JARs, these are only in `META-INF`. What's more puzzling is that these files are from different projects.  `/MANIFEST.MF` in `spring-webmvc` is from `spring-webmvc-tiles3`  `/MANIFEST.MF` in `spring-test` is from `spring-test-mvc`   ---  **Affects:** 3.2.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/29f4374bcfadccfe822197e2f85cff6e73cd4972","closed","type: enhancement,","spring-projects-issues","2013-02-22T01:42:20Z","2013-02-27T13:27:21Z"
"","200","Add jdk6Test task","# Note about the commit  If someone does not have jdk6Home configured the tests will be skipped. This may not be ideal, but I felt it was better than requiring local developers configure the property. If this is not the case, let me know and I can make jdk6Home a required property so that we can always run the jdk6Test task.  /cc @cbeams @jhoeller @philwebb # Commit Message  Previously the build was unable to build against JDK 7, test against JDK 7, and test against JDK 6.  This commit allows setting of a gradle property [1] named jdk6Home. Upon setting the jdk6Home property tests will be ran against JDK 6 as well. One option for setting the property is to include jdk6Home property in ~/.gradle/gradle.properties. For example the content of the file might look like:  ``` jdk6Home=jdk6Home=/usr/lib/jvm/jdk1.6.0_32 ```  An alternative is configure jdk6Home from the commandline as shown below:  ``` gradle build -Pjdk6Home=/usr/lib/jvm/jdk1.6.0_32 ```  [1] http://gradle.org/docs/current/userguide/tutorial_this_and_that.html#sec:gradle_properties_and_system_properties","closed","","rwinch","2012-12-10T21:58:40Z","2014-04-18T14:33:53Z"
"","322","Additional docs about security vulnerabilities with XStream.","","closed","","poutsma","2013-07-24T13:56:13Z","2014-06-17T20:24:32Z"
"","316","3.2.x","","closed","","panzhiqiu","2013-07-19T08:00:31Z","2013-10-11T00:19:13Z"
"","310","Typo mistake","","closed","","marcioj","2013-07-06T19:17:04Z","2013-07-06T20:56:41Z"
"","309","Add scaleToUse to org.springframework.jdbc.core.StatementCreatorUtils.setParameterValueInternal.","","closed","status: declined,","GeorgeVan","2013-07-04T22:52:54Z","2021-11-22T11:58:33Z"
"","288","Update README adding explicit JDK instructions","","closed","","dsyer","2013-05-22T07:38:01Z","2014-07-23T23:06:48Z"
"","272","SPR-9897: add YAML properties support","","closed","","dsyer","2013-04-13T08:39:11Z","2013-04-14T07:57:09Z"
"","268","Added .idea bundle config path to ignore","","closed","","josebarragan","2013-03-31T21:41:17Z","2014-04-18T14:39:17Z"
"","264","new-spring","","closed","","zhouzhonghua","2013-03-23T12:21:39Z","2013-03-23T19:29:43Z"
"","263","fix for annotation processing for enum arrays and opening up for better re-use from tooling","","closed","","martinlippert","2013-03-22T13:30:23Z","2014-06-19T13:11:41Z"
"","250","Fix test for daylight savings glitch","","closed","","dsyer","2013-03-10T17:06:56Z","2013-03-10T17:09:59Z"
"","241","Cosmetics: incorrect closing  tag","","closed","","nurkiewicz","2013-02-27T21:42:04Z","2013-02-28T23:55:49Z"
"","221","Fix typo in reference documentation","","closed","","kdombeck","2013-01-25T20:15:49Z","2013-01-26T14:14:31Z"
"","210","Relax HttpServletBean environment requirements","","closed","","cbeams","2013-01-04T15:05:19Z","2014-06-17T10:40:03Z"