"#","No","Issue Title","Issue Details","State","Labels","User name","created","Updated"
"","882","SPR-13545: fix for nullpointer when receiving a request with an inval…","…id transport type  Tagging @nstarke who wrote the fuzzer that found the issue.","closed","","benkiefer","2015-10-07T02:51:34Z","2015-10-07T09:59:39Z"
"","955","[SPR-13876] - fix ServletServerHttpRequest URI encoding issue, provid…","…e test case and fix test cases related","closed","","sammyhk","2016-01-19T04:54:45Z","2016-01-20T22:58:52Z"
"","1004","SPR-14043 Update xmlunit library to version 2.1.0","xmlunit 2.0.0 is the latest major release for xmlunit. Most of the xmlunit functionality used within spring-framework was done through the xmlunit 1.x  helper class org.custommonkey.xmlunit.XMLAssert. As of xmlunit 2.0.0 most of the XML comparison methods are done through hamcrest matchers exposed by the xmlunit-matchers library. In some cases during the migration, the matchers had to be customized with custom NodeMatcher or DifferenceEvaluator instances in order to keep correct the assertions performed with xmlunit 1.x library.  Issue: SPR-14043","closed","","mariusneo","2016-03-13T14:39:28Z","2016-07-21T13:05:59Z"
"","1003","Recognize string interning feature","We use the validation support in Spring WS to validate SOAP requests. Profiling has shown that we have a lot of caught SAXNotRecognizedException during normal program execution. They come from AbstractXMLReader.getFeature which is called from ValidatorHandlerImpl#validate. ValidatorHandlerImpl checks for the value of the string interning feature. Throwing a SAXNotRecognizedException is interpreted the same way as returning false.  Recognizing the feature and returning false preserves the semantics but gets rid of the SAXNotRecognizedException during normal control flow. - recognize the ""http://xml.org/sax/features/string-interning"" feature   as disabled  Issue: SPR-14047","closed","","marschall","2016-03-12T15:17:41Z","2016-03-14T15:57:17Z"
"","952","4.2.x","Want to use Spring for new project.","closed","","sdonthu","2016-01-06T19:49:18Z","2016-01-06T20:00:02Z"
"","1053","spring4.0.x","want to take pull of source code","closed","","Rajesh09545","2016-05-09T16:46:48Z","2016-05-09T16:52:10Z"
"","976","SPR-11055 REST parameter annotations on supertypes/interfaces","Walk up the method override hierarchy in order to discover REST parameter annotations declared on superclasses and interfaces. Because method parameter annotations are not inherited, this is not otherwise (and therefore was not previously) possible.  Issue: SPR-11055","closed","","mbenson","2016-02-23T21:45:32Z","2018-12-23T13:00:55Z"
"","1052","Fix CacheManager example in Javadoc","Use `CacheManager#setCaches()` instead of `CacheManager#addCaches()` in the Javadoc example.","closed","","ferstl","2016-05-08T17:05:10Z","2016-05-12T13:24:41Z"
"","989","Upgrade to OkHttp 2.7.5","Upgrade dependency to the latest OkHttp 2 version","closed","","royclarkson","2016-03-05T16:23:16Z","2016-03-31T20:19:17Z"
"","920","Consider MANIFEST.MF classpath when scanning","Update PathMatchingResourcePatternResolver to also consider classpaths provided by MANIFEST.MF when dealing with the System ClassLoader. It turns out that such entries are not exposed by URLClassLoader.getURLs().  Issue:","closed","","philwebb","2015-11-13T21:36:17Z","2015-12-18T11:03:36Z"
"","930","Merge pull request #1 from spring-projects/master","update my repository","closed","","FrankBian","2015-12-04T06:49:03Z","2015-12-04T09:11:47Z"
"","1001","Merge pull request #1 from spring-projects/master","update from origin","closed","","willseeyou","2016-03-12T02:41:46Z","2016-03-12T02:42:07Z"
"","914","Merge pull request #1 from spring-projects/master","update from origin","closed","","willseeyou","2015-11-08T03:39:35Z","2015-11-08T08:03:44Z"
"","980","Remove @BootstrapWith from @WebAppConfiguration","Update @WebAppConfiguration so that it no longer directly specifies a TestContextBootstrapper. This allows third parties to use the annotation in combination with their own bootstrapper.  BootstrapUtils now provides the detection logic for when WebTestContextBootstrapper should be used.  Issue: SPR-13991","closed","","philwebb","2016-02-26T23:31:37Z","2016-07-25T10:37:06Z"
"","1040","Merge pull request #1 from spring-projects/master","update","closed","","LuoYuWuSheng","2016-04-19T06:12:18Z","2016-04-19T07:25:27Z"
"","1022","Merge pull request #1 from spring-projects/master","update","closed","","yuyonglucky","2016-03-31T13:39:28Z","2016-03-31T13:40:23Z"
"","1017","Improve HTTP support for JDK client and HttpInvoker server","Two commits that improve HTTP support when using the native JDK HTTP architecture.  The first commit prevents the RestTemplate from closing the underlying HTTP connection when closing an HTTP response and completely drains the content of the response. Those are the two conditions to really leverage HTTP persistent connections support in HTTP 1.1.  The second commit works around a JDK API that seems to artificially prevent gathered writes when using the HttpInvoker server implementation.  Issue: SPR-14040","closed","","bclozel","2016-03-25T20:45:14Z","2016-11-06T10:41:07Z"
"","939","Fix markup in reference section 9.4.2","Trivial markup fix in the 'Built-in PropertyEditor implementations' section of core-validation.  Before:  ![before](https://cloud.githubusercontent.com/assets/172363/11918963/3d528d9c-a744-11e5-9a0e-0befaa5d3cbc.PNG)  After:  ![after](https://cloud.githubusercontent.com/assets/172363/11918964/448bc3e4-a744-11e5-967d-585eb03f7d5d.PNG)  I have signed and agree to the terms of the Spring Individual Contributor License Agreement.","closed","","sniewczas","2015-12-20T17:07:21Z","2015-12-21T16:24:10Z"
"","950","SPR-13841 - Add RFC-5681 support to CacheControl","Thoughts?   Have signed agreement in the past.","closed","","madorb","2016-01-05T17:16:27Z","2016-01-07T17:18:40Z"
"","915","SPR-13657 Buffered AsyncClientHttpResponse","This pull request relates to https://github.com/spring-projects/spring-framework/pull/912 in a way that it covers some additional use cases that could be covered through AsyncRestTemplate like for instance request/response logging. To fully facilitate that you would require the responses to be buffered.","closed","","jmnarloch","2015-11-08T18:53:28Z","2018-02-05T14:10:53Z"
"","1028","Fix url and prefix for cache schema: ""cache"" instead of ""jdbc""","This prevents copy & paste errors for casual readers of the documentation.  I have signed and agree to the terms of the Spring Individual Contributor License Agreement.","closed","","michael-simons","2016-04-06T09:54:41Z","2016-04-12T06:53:40Z"
"","1037","Use the defined constant in MergedContextConfiguration","This PR simply uses the defined constant instead.","closed","","izeye","2016-04-16T00:10:35Z","2016-04-16T08:33:31Z"
"","1039","Remove duplicate words","This PR simply removes duplicate words.","closed","","izeye","2016-04-19T01:58:01Z","2016-04-19T06:24:37Z"
"","1008","Add a way to disable SSL verification","This is similiar to curl --insecure (-k) where sometimes you don't want ssl verification.","closed","status: declined,","selkhateeb","2016-03-17T03:45:00Z","2020-09-10T11:52:56Z"
"","957","Decrease allocation rate by making CacheOperation immutable","This is new PR after original one (https://github.com/spring-projects/spring-framework/pull/942) has been messed up.","closed","","soldierkam","2016-01-24T19:58:41Z","2016-02-17T13:51:16Z"
"","994","delegate PayloadApplicationEvent type resolution to the PayloadApplicationEvent itself","this fix allows writing custom application events that implement ResolvableTypeProvider, as an alternative to extending ApplicationEvent. see for example this custom event implementation - https://github.com/radai-rosenblatt/spring-events/blob/master/src/main/java/net/radai/ContentsChangedEvent.java  Signed-off-by: radai-rosenblatt radai.rosenblatt@gmail.com","closed","","radai-rosenblatt","2016-03-09T07:41:55Z","2016-03-09T16:03:36Z"
"","982","Introduce composed annotations for web scopes","This commit introduces the following common composed annotations for web scopes. - @RequestScope - @SessionScope - @ApplicationScope  Issue: SPR-13993","closed","","sbrannen","2016-02-27T19:31:36Z","2016-02-29T16:43:03Z"
"","981","Introduce composed annotations for @RequestMapping","This commit introduces the following common composed annotations for @RequestMapping in Spring MVC and Spring MVC REST. - @GetMapping - @PostMapping - @PutMapping - @DeleteMapping - @PatchMapping  Issue: SPR-13992","closed","","sbrannen","2016-02-27T18:12:41Z","2016-02-29T17:27:38Z"
"","1007","Implementing Jackson MixIn's","This commit implements Jackson MixIn's on MappingJacksonValue and its processors: MappingJackson2HttpMessageConverter and MappingJackson2XmlHttpMessageConverter","closed","","ghost","2016-03-15T07:05:55Z","2022-02-18T19:11:08Z"
"","1032","Fix logging issue with MessageConverter","This commit fixes an issue with MappingJackson2HttpMessageConverter where it always logs a Warning, even if another message converter can handle it. Example:  2016-04-13 13:22:30.760  WARN [app-service] 15947 --- [AppClient-1] .c.j.MappingJackson2HttpMessageConverter : Failed to evaluate deserialization for type [simple type, class com.company.product.component.protobuf.Client$Configurations]: com.fasterxml.jackson.databind.JsonMappingException: Can not find a (Map) Key deserializer for type [simple type, class com.google.protobuf.Descriptors$FieldDescriptor]  Issue: SPR-14163  I have signed and agree to the terms of the Spring Individual Contributor License Agreement.","closed","","mogren","2016-04-13T12:18:59Z","2016-04-13T14:22:15Z"
"","963","Use synchonous API for synchonous OkHttp requests","This commit changes the OkHttpClientHttpRequestFactory to use the synchronous OkHttp API for non-async requests, as opposed to synchronizing the async API (which it used to do).  Issue: SPR-13942","closed","","poutsma","2016-02-16T11:23:05Z","2016-02-16T14:33:38Z"
"","1006","SPR-14050 - ReflectionTestUtils doesn't detect proxy","This commit adds proxy detection for the set-/getField methods on the ReflectionTestUtils. Instead of accessing the field on the passed in targetObject the AopTestUtils class is used to obtain the possible ultimateTargetObject and use that for accessing the fields.  I've signed the SpringSource ICLA...","closed","","mdeinum","2016-03-14T14:56:48Z","2016-07-05T15:27:47Z"
"","896","Add null check to enable creation of triggers without JobDetail.","This change allows SimpleTriggerFactoryBean and CronTriggerFactoryBean to create triggers without associated job details. This is something that we need in our project (we are using spring to configure triggers, but we associate them with jobs programmatically) and it worked fine in Spring 3.x.  Issue: [SPR-13604](https://jira.spring.io/browse/SPR-13604)  I have signed and agree to the terms of the Spring Individual Contributor License Agreement.","closed","","bendiscz","2015-10-23T09:15:50Z","2016-01-19T17:05:31Z"
"","922","Added quotes around attribute value.","There are missing quotes in XML configuration example","closed","","uthark","2015-11-16T15:29:03Z","2015-11-17T09:57:40Z"
"","887","Fixed typo","The word ""that"" is duplicated.","closed","","stoeckmann","2015-10-11T12:52:16Z","2015-10-11T14:57:30Z"
"","945","Fixed the issue SPR-10822","The user can use ${contextPath} and ${realPath} in the WebApplicationContext's Environment.  Issue: SPR-10822","closed","","xiaolongzuo","2016-01-01T15:38:06Z","2016-01-08T14:34:07Z"
"","884","prevent duplicate ""/""","The request url will remove the duplicate duplicate ""/"" by using UrlPathHelper.getLookupPathForRequest(request), but the RequestMappingInfo won't.  And ""directPathMatches""  will be null at AbstractHandlerMethodMapping.lookupHandlerMethod.  For example, when I request ///c, the lookupPath will be /c, it won't match the HandlerMethod //c","closed","","veryyoung","2015-10-10T07:17:39Z","2015-10-19T20:53:41Z"
"","904","Fix CronTrigger example in documentation","The original example would fire every second of the 15th minute, not just once as stated in the paragraph before.  Issue: SPR-10474  I have signed and agree to the terms of the Spring Individual Contributor License Agreement.","closed","","LinkedList","2015-10-28T09:45:59Z","2015-10-28T12:02:41Z"
"","924","TypeDescriptor.equals tests equality of annotations","The current implementation of TypeDescriptor.equals merely tests for the presence of annotations between the compared type descriptors, as apposed to also comparing annotation property values.  This ultimately lead to problems with the GenericConversionService cache returning the ""wrong"" conditional converter in my application.  I have signed and agree to the terms of the Spring Individual Contributor License Agreement.  Issue: SPR-13714","closed","","nathanpiper","2015-11-21T02:47:45Z","2015-12-18T20:34:18Z"
"","968","supprimer contenu readme.md","test","closed","","semlali","2016-02-17T23:35:52Z","2016-02-18T07:38:57Z"
"","910","Support empty attributes in TagWriter","Support for empty HTML attributes (like ""required"", ""ng-disabled""...) If you want to use this tool for a custom tag in a project that is mainly Angular-oriented, you may want to write attributes without values. And since members are private, you cannot extend TagWriter (another proposal could be ""protecting"" fields).","closed","type: enhancement,","djechelon","2015-11-03T11:30:42Z","2021-11-24T13:16:52Z"
"","984","Support *Aware for @ComponentScan custom filters","Support a limited set of *Aware interfaces for TypeFilters created via the `@ComponentScan` annotation.  Issue: SPR-14009","closed","status: superseded,","philwebb","2016-03-01T21:42:44Z","2021-11-23T20:01:51Z"
"","997","4.2.x","spring-web","closed","","shigangzs","2016-03-10T14:22:14Z","2016-03-10T14:37:20Z"
"","907","Add support to any Iterable types on PropertyAccessor","Sometimes, for better clarity of the application model, we create objects that encapsulate a Collection, and this object comes to represent a collection of a certain type in the application model. To simplify `for-each` operations, this object must implement `java.lang.Iterable`. Example:  ``` java public class MyType {     @NotNull     private String name; }  public class MyTypesGroup implements Iterable {     private Collection  myTypes = new ArrayList  ();      @Override     public Iterator iterator() {          return myTypes.iterator();     }      // model methods }  public class MyAggregateType {      @Valid      private MyTypesGroup myTypesGroup MyTypesGroup = new (); } ```  Databind, get and set properties operations, typically used with `BeanWrapper`, they are not supported for these objects (in the above example, something like ""myTypesGroup[0].name"").   In my use case, with Hibernate Validator, the path will be generated ""myTypesGroup[0].name"" (Hibernate Validator au), occurring an exception when the Spring tries to extract the property value (to generate the error message on the Spring MVC)  This pull request adds `java.lang.Iterable` as a supported type for reading properties by `PropertyAccessors`.  I have signed and agree to the terms of the Spring ICLA.  Thanks (and sorry for any English errors :))","open","type: enhancement,","ljtfreitas","2015-11-01T12:59:58Z","2021-11-23T09:34:03Z"
"","1050","Remove potential XSS vulnerability in Freemarker documentation","Since the user controls the value of `spring.status.value`, one wouldn't want to echo unescaped values here in this form. Otherwise one could submit a value of, say, `""/> ` or any other arbitrary JS.  This patch changes the `input` tag to use the HTML-escaped value rather than the raw value.  I have signed and agree to the terms of the Spring Individual Contributor License Agreement.","closed","","fj","2016-05-05T18:25:46Z","2016-05-30T07:44:29Z"
"","949","Use the official SonarQube Gradle plugin","Since the build has been upgraded to Gradle 2.10, it's showing the following message: ""The 'sonar-runner' plugin has been deprecated and is scheduled to be removed in Gradle 3.0. please use the official plugin from SonarQube""  This commit makes use of the ""org.sonarqube"" Gradle plugin and uprgrades the Jacoco agent version to 0.7.5.  _Note_: Since Jacoco 0.7.5 changed its binary format, **it is required to upgrade the Java plugin** on our SonarQube instance.  See: https://sonar.spring.io/updatecenter/updates See: https://jira.sonarsource.com/browse/SONARJAVA-1091","closed","","bclozel","2016-01-05T16:21:59Z","2017-06-01T17:13:44Z"
"","925","SPR-13713: Add mandatory behavior to SimpleNamespaceContext","SimpleNamespaceContext did not implement the following behavior mandated by javax.xml.namespace.NamespaceContext (as per Java 8): - # getPrefix and #getPrefixes with Argument `null` did not throw      an IllegalArgumentException - The iterator returned by #getPrefixes(boundPrefix) was modifiable,   i.e. failed to throw an UnsupportedOperationException upon #remove - # clear did not clear the map `namespaceUriToPrefixes`, hence after   # clear an iterator returned by #getPrefixes could be non-empty - Some mandatory functionality was implemented, but lacked unit tests  There were also code smells: - # getPrefixesInternal used to modify the field `namespaceUriToPrefixes`      despite being a getter method - After removing all prefixes bound to a namespace URI, the map   `namespaceUriToPrefixes` still contained the URI as key mapped to   an empty list.  The unit testing class was extensively rewritten to ensure implementation of the full contract. All assertions now use Hamcrest matchers for type safety and better error messages in case of failure.  Changes to the class SimpleNamespaceContext: - All missing functionality (described above) was added - # getPrefixesInternal is now a clean accessor - The field `namespaceUriToPrefixes` is now mutated via new private   methods #addPrefixToNamespaceUri and #removePrefixFromNamespaceUri - After removing all prefixes bound to a namespace URI, the URI is also   removed (as key) from the map `namespaceUriToPrefixes` - The private method #getPrefixesInternal was renamed to   # getPrefixesList as a more telling name  Issue: SPR-13713  I have signed and agree to the terms of the Spring Individual Contributor License Agreement.","closed","","leoarnold","2015-11-22T04:26:00Z","2015-12-21T19:25:04Z"
"","998","Add converters between Enum and Integer","see SPR-14039","closed","","quaff","2016-03-11T04:57:59Z","2016-03-16T16:02:21Z"
"","1024","Auto-detect Kotlin Jackson module","See [SPR-14108](https://jira.spring.io/browse/SPR-14108).","closed","","sdeleuze","2016-04-04T07:00:56Z","2021-04-28T09:56:45Z"
"","898","Separate java tokens by a single space","Replacing multiple spaces and tabs, which separates java tokens, by a single space.  I have signed and agree to the terms of the Spring Individual Contributor License Agreement.","closed","","robertwhitebit","2015-10-23T18:59:46Z","2018-03-15T21:34:56Z"
"","967","Minor grammatical changes","Removed article and capitalized class name","closed","","logicg8","2016-02-17T15:45:30Z","2016-07-01T09:14:55Z"
"","1034","Fixes SPR-14138 - Removed assertion over isOpen.","Removed `Assert#isTrue(isOpen(), ...)` while performing a send operation via `sendMessage(WebSocketMessage)` in `AbstractWebSocketSession`.  Please review and pull. My CLA Number is 149720151120072904.  Thanks, Venil Noronha","closed","","venilnoronha","2016-04-14T13:07:38Z","2016-04-18T13:59:08Z"
"","923","Remove invalid underscore","Remove invalid underscore from example","closed","","uthark","2015-11-16T15:31:49Z","2015-11-17T09:59:20Z"
"","1011","Support HTTP range requests in Controllers","Prior to this commit, HTTP Range requests were only supported by the ResourceHttpRequestHandler when serving static resources.  This commit adds a new ResourceMethodProcessor that both resolves Resource-related Controller handler arguments and return types.  A Controller handler like this can now handle Range requests for return types that extend Resource or HttpEntity:  ``` @RequestMapping(""/example/video.mp4"") public Resource handler() { } ```  Issue: SPR-13834","closed","","bclozel","2016-03-18T17:08:35Z","2017-06-01T17:16:58Z"
"","970","Consistent descriptions for ConfigurationClass","Previously, a ConfigurationClass created from AnnotationMetadata and a ConfigurationClass created from a class would have subtly different descriptions. Given a class named com.example.Foo, the former’s description would be “com.example.Foo”, whereas the latter’s description would be “class com.example.Foo”.  This commit updates ConfigurationClass to make the description consistent, preferring the description without “class” in it.","closed","","wilkinsona","2016-02-18T17:43:35Z","2016-02-19T08:09:42Z"
"","969","Introduce specific exceptions for field and method autowiring failures","Previously, a BeanCreationException was used when autowiring of a field or method failed. Details of the field or method were included in the exception message. This meant that anyone who wanted to access information about the field or method had to resort to the error-prone approach of parsing the exception’s message.  This pull request introduces two new exceptions, FieldAutowiringException and MethodAutowiringException, that provide access to the Field or Method for which autowiring has failed.","closed","","wilkinsona","2016-02-18T14:50:07Z","2016-04-12T06:20:24Z"
"","1044","MockWebResponseBuilder defaults cookie domain","Previously MockWebResponseBuilder would use the cookie domain of the cookie received from MockMvc response. This caused problems because the cookie domain can be null, but HtmlUnit forbids a null domain.  This commit defaults the domain of the cookie to the domain of the WebRequest.  Issues SPR-14169","closed","","rwinch","2016-04-25T15:23:10Z","2016-04-26T14:06:56Z"
"","1009","MockMvc HtmlUnit support shares CookieManager","Previously MockMvc builders failed to share the WebConnection used for managing cookies in the MockMvcWebConnection. This meant that the various CookieManagers would have different states.  This commit ensures that the WebConnection is set on the MockMvcWebConnection.  Fixes SPR-14066","closed","","rwinch","2016-03-17T21:10:27Z","2016-03-18T16:02:47Z"
"","988","Add support for OkHttp3","OkHttp3 introduces a new package and API that is incompatible with previous versions. This commit adds a new `OkHttp3ClientHttpRequestFactory` and supporting classes.","closed","","royclarkson","2016-03-05T16:11:30Z","2016-03-29T17:07:59Z"
"","964","Cleanup of org.springframework.http.client","Moved all package protected request and response classes in http.client package into their respective factories.","closed","","poutsma","2016-02-16T14:38:40Z","2016-02-17T12:12:36Z"
"","878","Modify creation of the ScheduledTaskRegistrar to be a Spring managed bean","Modify creation of the ScheduledTaskRegistrar to be a Spring managed bean. SPR-13506","closed","","tobiasmh","2015-09-25T06:20:50Z","2018-06-14T09:50:45Z"
"","911","Merge pull request #1 from spring-projects/master","merge","closed","","liwei5365","2015-11-06T08:10:49Z","2015-11-06T08:32:15Z"
"","958","Speed up AntPathMatcher by doing prefix-match","Many ant style patterns has prefix that can be used to determine if there is no need to do complicated and costly matching.  For example pattern ""/static/css/*"" have prefix ""/static/css/"" that can be used to say that path ""/api/resource/1234"" will not match.   This was tested with https://gist.github.com/soldierkam/c80e433aa9fbec35df5a Before:  | Benchmark | Mode | Cnt | Score | Error | Units | | --- | --- | --- | --- | --- | --- | | MyBenchmark.isMatching | thrpt | 5 | 425995,288 ± | 162966,573 | ops/s | | MyBenchmark.isNotMatching | thrpt | 5 | 864690,507 ± | 130643,210 | ops/s | | MyBenchmark.suffix | thrpt | 5 | 748551,270 ± | 17229,496 | ops/s |  After:  | Benchmark | Mode | Cnt | Score | Error | Units | | --- | --- | --- | --- | --- | --- | | MyBenchmark.isMatching | thrpt | 5 | 483815,001  ± | 105669,816 | ops/s | | MyBenchmark.isNotMatching | thrpt | 5 | 10208718,438 ± | 125879,376 | ops/s | | MyBenchmark.suffix | thrpt | 5 | 624841,454  ± | 349001,674 | ops/s |  Result: over 10x faster for isNotMatching and 17% slower for ""suffix"" case.  I tested it with https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples/spring-boot-sample-data-rest (wrk -c 40 -d 30 -t 2 http://127.0.0.1:8080/api/hotels) but results are almost the same (before: 310.15req/seq, after: 305.41req/sec). For https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples/spring-boot-sample-actuator-ui (wrk -c 40 -d 30 -t 2 http://localhost:8080/css/bootstrap.min.css) there is small perf improvement - before: 2237.90req/seq, after: 2353.93req/sec For real world application (that contains many more endpoints) I've got 17% more throughput for endpoint serving static resource (baseline is at 1812req/sec).  Let me know what you think.","closed","","soldierkam","2016-01-25T23:00:40Z","2016-02-10T10:51:40Z"
"","941","4.1.x","learning","closed","","hynbroth","2015-12-26T15:27:49Z","2015-12-26T16:29:39Z"
"","935","SPR-13784: Base64Utils: URL/File Safe Alphabet","JIRA: https://jira.spring.io/browse/SPR-13784  JDK8 and Apache Commons Codec support the RFC 4648 ""URL and Filename Safe"" Base64 alphabet.  Add methods to `Base64Utils` to support this feature.","closed","","garyrussell","2015-12-11T18:14:03Z","2015-12-11T20:49:44Z"
"","1042","Added cron expression validation method for CronSequenceGenerator","It's handy to know in advance whether or not expression that is passed to CronSequenceGenerator or CronTrigger constructor would not results in IllegalArgumentException. The only way to do it now is to try\catch an instance creation but it's kinda ugly.  ---  I have signed and agree to the terms of the Spring Individual Contributor License Agreement.","closed","","Enigo","2016-04-23T12:57:49Z","2016-04-23T16:06:49Z"
"","999","SPR-13919 - Add JSON matcher to assert on request body","It's common for test code to want to assert that the body of a request matches a JSON document.  Without this `ContentRequestMatcher`, the only options are to do a literal string comparison or assert on individual nodes using `jsonPath()`.  The `ContentRequestMatcher.json()` provides a general-purpose means of asserting on request content in the same way `ContentResultMatcher.json()` does.  We have signed and agree to the terms of the Spring Individual Contributor License Agreement.  ``` Support asserting JSON regardless of order and formatting. Based on same JsonExpectationHelper used in ContentResultMatchers.  Issue: SPR-13919  Signed-off-by: Bronwyn Perry-Huston  Signed-off-by: Dan Neumann  Signed-off-by: John Ryan  ```","closed","","jtigger","2016-03-11T15:42:14Z","2018-03-13T16:14:49Z"
"","938","Upgrade Caffeine dependency","It seemed prudent to upgrade the dependency prior to usage in Spring.  I also added my [gradle-versions-plugin](https://github.com/ben-manes/gradle-versions-plugin) since it wasn't clear how Spring tracks dependency updates. This can be run using `gradle dependencyUpdates` or `gradle dU` for short. The list of other potential updates are below. Note that a `resolutionStrategy` rule can help filter out versions that don't conform to the Maven versioning conventions (like `rc`, `beta`).  @snicoll   ``` The following dependencies have later milestone versions:  - com.fasterxml.jackson.core:jackson-databind [2.6.4 -> 2.7.0-rc2]  - com.fasterxml.jackson.dataformat:jackson-dataformat-xml [2.6.4 -> 2.7.0-rc2]  - com.fasterxml.jackson.datatype:jackson-datatype-jdk8 [2.6.4 -> 2.7.0-rc2]  - com.fasterxml.jackson.datatype:jackson-datatype-joda [2.6.4 -> 2.7.0-rc2]  - com.fasterxml.woodstox:woodstox-core [5.0.1 -> 5.0.2]  - com.google.protobuf:protobuf-java [2.6.1 -> 3.0.0-beta-1]  - com.googlecode.protobuf-java-format:protobuf-java-format [1.2 -> 1.4]  - com.lowagie:itext [2.1.7 -> 4.2.2]  - com.sun.xml.bind:jaxb-xjc [2.1.17 -> 2.2.11]  - commons-beanutils:commons-beanutils [1.8.0 -> 1.9.2]  - commons-digester:commons-digester [1.8.1 -> 2.1]  - commons-io:commons-io [1.3 -> 2.4]  - commons-logging:commons-logging [1.2 -> 99.0-does-not-exist]  - dom4j:dom4j [1.6.1 -> 20040902.021138]  - io.netty:netty-all [4.0.33.Final -> 5.0.0.Alpha2]  - javax.el:javax.el-api [2.2.5 -> 3.0.1-b04]  - javax.faces:javax.faces-api [2.2 -> 2.3-edr1]  - javax.resource:connector-api [1.5 -> 1.6-alpha-1]  - javax.servlet:javax.servlet-api [3.1.0 -> 4.0.0-b01]  - javax.servlet.jsp:javax.servlet.jsp-api [2.2.1 -> 2.3.2-b02]  - javax.validation:validation-api [1.1.0.GA -> 1.1.0.Final]  - javax.websocket:javax.websocket-api [1.0 -> 1.1]  - jaxen:jaxen [1.1.1 -> 1.1.6]  - net.sf.ehcache:ehcache [2.10.1 -> 2.10.1-55]  - org.apache.activemq:activemq-broker [5.8.0 -> 5.13.0]  - org.apache.activemq:activemq-kahadb-store [5.8.0 -> 5.13.0]  - org.apache.activemq:activemq-stomp [5.8.0 -> 5.13.0]  - org.apache.taglibs:taglibs-standard-jstlel [1.2.1 -> 1.2.5]  - org.apache.tomcat:catalina [6.0.16 -> 6.0.44]  - org.apache.tomcat:tomcat-websocket [8.0.30 -> 9.0.0.M1]  - org.apache.tomcat.embed:tomcat-embed-core [8.0.30 -> 9.0.0.M1]  - org.apache.tomcat.embed:tomcat-embed-logging-juli [8.0.30 -> 9.0.0.M1]  - org.apache.tomcat.embed:tomcat-embed-websocket [8.0.30 -> 9.0.0.M1]  - org.asciidoctor:asciidoctor-gradle-plugin [1.5.2 -> 1.5.3]  - org.asciidoctor:asciidoctorj [1.5.2 -> 1.6.0-alpha.1]  - org.aspectj:aspectjrt [1.8.7 -> 1.9.0.BETA-2]  - org.aspectj:aspectjweaver [1.8.7 -> 1.9.0.BETA-2]  - org.beanshell:bsh [2.0b4 -> 2.0b5]  - org.codehaus.fabric3.api:commonj [1.1.0 -> 1.1.1]  - org.eclipse.persistence:javax.persistence [2.0.5 -> 2.1.1]  - org.eclipse.persistence:org.eclipse.persistence.core [2.4.2 -> 2.6.2-RC1]  - org.eclipse.persistence:org.eclipse.persistence.jpa [2.4.2 -> 2.6.2-RC1]  - org.glassfish.tyrus:tyrus-container-servlet [1.3.5 -> 1.12]  - org.glassfish.tyrus:tyrus-core [1.3.5 -> 1.12]  - org.glassfish.tyrus:tyrus-server [1.3.5 -> 1.12]  - org.glassfish.tyrus:tyrus-spi [1.3.5 -> 1.12]  - org.hamcrest:hamcrest-core [1.3 -> 1.4-atlassian-1]  - org.hibernate:hibernate-core [5.0.6.Final -> 5.0.6.Final]  - org.hibernate:hibernate-entitymanager [5.0.6.Final -> 5.0.6.Final]  - org.hibernate:hibernate-validator [5.2.2.Final -> 5.2.2.Final]  - org.jacoco:org.jacoco.agent [0.7.1.201405082137 -> 0.7.5.201505241946]  - org.jruby:jruby [1.7.23 -> 9.0.4.0]  - org.mockito:mockito-core [1.10.19 -> 2.0.33-beta]  - org.python:jython-standalone [2.5.3 -> 2.7.1b2]  - org.skyscreamer:jsonassert [1.2.3 -> 1.3.0]  - org.webjars:webjars-locator [0.28 -> 0.29]  - rhino:js [1.7R1 -> 1.7R2]  - velocity-tools:velocity-tools-view [1.4 -> 2.0-beta1]  - ws.antonov.gradle.plugins:gradle-plugin-protobuf [0.9.1 -> 0.9.2] ```","closed","","ben-manes","2015-12-20T05:20:45Z","2015-12-20T12:07:33Z"
"","933","fix getFileName on windows","Issue: SPR-5284","closed","status: declined,","alezx","2015-12-05T13:23:41Z","2020-06-23T07:12:44Z"
"","979","Fixed getOrDefault bug in LinkedCaseInsensitiveMap","Issue: SPR-13981  I have signed and agree to the terms of the Spring Individual Contributor License Agreement.","closed","","LinkedList","2016-02-25T17:26:50Z","2016-02-25T18:25:41Z"
"","885","Add a PropertyEditor that convert to null for empty string","Issue: SPR-13561  For details, refer to the [SPR-13561](https://jira.spring.io/browse/SPR-13561). I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","in: core,","kazuki43zoo","2015-10-10T20:13:57Z","2021-11-22T12:01:09Z"
"","883","Support the Model at @ExceptionHandler method argument by default","Issue: SPR-13546  For details, refer to the [SPR-13546](https://jira.spring.io/browse/SPR-13546). I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","kazuki43zoo","2015-10-07T16:25:00Z","2015-10-07T17:59:27Z"
"","1014","Add newline at the beginning of textarea macro for FreeMarker and Velocity","Issue: SPR-13503  I've fixed textarea macro for FreeMarker and Velocity ([SPR-13503](https://jira.spring.io/browse/SPR-13503)). Please review this. I have signed and agree to the terms of the Spring ICLA.","closed","","kazuki43zoo","2016-03-22T19:59:06Z","2016-03-23T11:31:49Z"
"","877","Add merged annotation support to @CrossOrigin","Issue: SPR-13468  I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","nithril","2015-09-20T14:13:19Z","2015-09-22T19:26:16Z"
"","871","Read large data using InputStreamResource at ResourceMessageConverter","Issue: SPR-13443  For details, refer to the [SPR-13443](https://jira.spring.io/browse/SPR-13443). I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","kazuki43zoo","2015-09-07T17:26:50Z","2015-09-08T08:56:21Z"
"","899","Fix YamlMapFactoryBean wrapping integer keys with square brackets","Issue: SPR-13398  I have signed and agree to the terms of the Spring Individual Contributor License Agreement.","closed","","LinkedList","2015-10-24T16:50:06Z","2022-02-18T19:11:05Z"
"","895","Fix missing @EnableScheduling in documentation","Issue: SPR-10448  I have signed and agree to the terms of the Spring Individual Contributor License Agreement.","closed","","LinkedList","2015-10-22T16:55:44Z","2015-11-02T11:37:10Z"
"","892","Spring Jdbc add Postgresql ?-contained operator support","ISSUE: https://jira.spring.io/browse/SPR-13582  Postgresql have a many functional oparators such as ""?"" (for example jsonb operators http://www.postgresql.org/docs/9.4/static/functions-json.html)  Spring jdbc processing this case not correct. When run sql  ``` SELECT '[""1"",""2"",""3""]'::jsonb ? '4' ```  I see exception like this:  ``` class org.springframework.dao.InvalidDataAccessApiUsageException SQL [SELECT '[""1"",""2"",""3""]'::jsonb ? '4']: given 1 parameters but expected 0 ```  In pgjdbc this bug fixed in 2014 (https://github.com/pgjdbc/pgjdbc/pull/227)","closed","","arturgspb","2015-10-16T22:55:30Z","2015-10-28T18:11:14Z"
"","927","Improve support for custom HTTP verbs in Spring MVC Test","Issue: [SPR-13719](https://jira.spring.io/browse/SPR-13719)  Prior to this commit, Spring MVC Test only supports HTTP methods GET, POST, HEAD, OPTIONS, PUT, PATCH, DELETE, TRACE and multipart file upload. This pull adds generic methods to MockMvcRequestBuilders in order to allow testing of arbitrary HTTP methods in a Spring MVC application.  I have signed and agree to the terms of the Spring Individual Contributor License Agreement.","closed","","ksokol","2015-11-25T08:15:41Z","2016-01-21T14:16:57Z"
"","889","Add STRICT option to DateTimeFormatter in case of pattern","Issue: [SPR-13567](https://jira.spring.io/browse/SPR-13567)  Added STRICT option and changed test case. `y` in JSR-310 is different from that of classic Date API.  https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html  `y` means not ""year"" but ""year-of-era"". This difference affects in case of STRICT mode.","closed","","making","2015-10-13T15:22:27Z","2022-02-18T19:11:04Z"
"","937","improved content length exception message","In case ShallowEtagHeaderFilter is not used, the message was confusing.  I have signed and agree to the terms of the Spring Individual Contributor License Agreement.","closed","","deki","2015-12-18T11:18:03Z","2016-01-08T08:31:25Z"
"","1035","fix WebRequest.checkNotModified docs","in all code samples and docs `request` is used instead of `webRequest`","closed","type: documentation,","kamilszymanski","2016-04-14T15:21:34Z","2020-06-23T13:56:49Z"
"","951","SPR-13044 MockRestRequestMatchers should have matchers for form data","Implementation of client matcher to assert if request contains expected form data  I have signed and agree to the terms of the Spring Individual Contributor License Agreement.","closed","","pwielgolaski","2016-01-06T16:59:19Z","2016-06-27T12:56:09Z"
"","891","SPR-13579: Support conversion from Strings to Java 8 Durations.","Implement conversion from `String`s to `java.time.Duration` instances using `Duration`'s `parse` method. This isn't the greatest format, but it simplifies wiring up a bean that uses `Duration` in its API rather than (for example) long for millis. Includes tests.  I have signed and agree to the terms of the Spring Individual Contributor License Agreement.","closed","","josephw","2015-10-16T15:03:56Z","2016-08-15T12:55:29Z"
"","906","Improve explanation for how to customization default error page of the Servlet Container","I've improved explanation for how to customization default error page of the Servlet Container. - Specify a valid version of servlet container explicitly (3.1+). - Change to use the `LinkedHashMap` instead of `HashMap`. The `LinkedHashMap` can be keep order of items. (I think more better that use `LinkedHashMap` in sample code) - Change a JSON format(indent , white-space). In addition, this format is same with `indentOutput` of Jackson.  I have signed and agree to the terms of the Spring ICLA.  Thanks.","closed","status: invalid,","kazuki43zoo","2015-10-31T13:31:59Z","2019-11-08T09:51:54Z"
"","932","Fix JavaDoc of @EventListener","I've fixed the [SPR-13763](https://jira.spring.io/browse/SPR-13763). I have signed and agree to the terms of the Spring ICLA.","closed","","kazuki43zoo","2015-12-05T12:34:14Z","2015-12-07T15:58:05Z"
"","926","Modify jsp tag library list in reference document","I've fixed a some mistakes of [SPR-13520](https://jira.spring.io/browse/SPR-13520). I have signed and agree to the terms of the Spring ICLA.","closed","","kazuki43zoo","2015-11-22T17:36:23Z","2015-11-23T08:29:11Z"
"","1016","Polish MimeTypeUtil to handle only delimiter.","I've encounter `java.lang.ArrayIndexOutOfBoundsException:` when only "";"" passed in Accept Header and found `MimeTypeUtils` throws the exception.  It think it's an unexpected behavior, so added a logic to throw the dedicated exception :)","closed","","tmyjoe","2016-03-25T03:24:11Z","2016-04-18T14:04:00Z"
"","1041","Added text/markdown to MediaType","I've added `text/markdown` entry to `MediaType` as per https://tools.ietf.org/html/rfc7763.  I've signed the ICLA. Please review and pull.  Thanks, Venil Noronha","closed","","venilnoronha","2016-04-19T15:55:32Z","2016-04-25T14:27:41Z"
"","956","Fix AntPathMatcher.isPattern for URI templates","I'm not sure but I think AntPathMatcher.isPattern(""/{bla}.jpg"") should return true.","closed","status: superseded,","soldierkam","2016-01-24T18:03:01Z","2021-11-16T13:25:54Z"
"","893","Add @DeferredImport","I ran into the issue to defer the processing of my conditional configurations. Since the set of imported classes isn't dynamic I think its odd to implement a DeferredImportSelector and it would come in handy having an annotation complementing the selector.  CLA is signed  Issue SPR-13583","closed","","joshiste","2015-10-17T23:05:09Z","2018-04-25T19:17:21Z"
"","943","Fixed NPEs in AntPathMatcher","I noticed that the MVC Test **redirectedUrl** matcher fails with a NullPointerException if there happens to be no Redirected URL on the response (the test should still fail, but with a proper assertion error).  One way to fix this would be to **assertNotNull** in the respective **MockMvcResultMatchers** method before calling the **AntPathMatcher**, but I thought it would be more appropriate to fix the underlying null-safety issues. You may disagree.","closed","status: superseded,","rs017991","2015-12-28T16:57:32Z","2019-07-16T16:36:20Z"
"","1012","Be explicit about the time unit in WebRequest","I just had to dig into the implementation to understand why `WebRequest.checkNotModified()` did not provide the expected behaviour with seconds. This documentation update is more explicit about the time unit.","closed","","malkusch","2016-03-18T17:13:29Z","2016-03-18T17:24:14Z"
"","1029","Fix 500 error caused by If-Modified-Since=0 HTTP header","I have signed and agree to the terms of the Spring Individual Contributor License Agreement.  Prior to this commit a 500 error would be bubbled up to the user when the If-Modified-Since header was passed to the backend with a value of 0.  In this fix, the zero value is explicitly handled (in same way as with a null value) by returning -1 to the caller.  Issue: SPR-14144","closed","","nacmacfeegle","2016-04-11T14:10:52Z","2016-04-11T15:42:53Z"
"","1027","Fix fypo.","I have signed and agree to the terms of the Spring Individual Contributor License Agreement.","closed","","Youmoo","2016-04-04T14:58:36Z","2016-04-04T15:36:54Z"
"","985","add table title for @Transactional settings","I have signed and agree to the terms of the Spring Individual Contributor License Agreement.","closed","","verydapeng","2016-03-03T17:18:42Z","2016-03-04T21:43:21Z"
"","974","`are are` might be `are all`?","I have signed and agree to the terms of the Spring Individual Contributor License Agreement.","closed","","Youmoo","2016-02-22T02:54:00Z","2016-02-22T09:03:47Z"
"","953","Add PDF MediaType and Value","I have signed and agree to the terms of the Spring Individual Contributor License Agreement.","closed","","mjgpy3","2016-01-12T14:42:09Z","2016-01-22T14:04:42Z"
"","934","Format-string method called with 2 arguments but is given 3.","I have signed and agree to the terms of the Spring Individual Contributor License Agreement.","closed","","mnhock","2015-12-10T19:54:06Z","2016-02-20T08:04:41Z"
"","909","Make methods static where possible in spring-core","I have signed and agree to the terms of the Spring Individual Contributor License Agreement.","closed","","Vladlis","2015-11-02T21:13:59Z","2017-01-24T11:29:23Z"
"","918","Added helper methods to ScheduledTaskRegistrar","https://jira.spring.io/browse/SPR-13680 Improvising ScheduledTaskRegistrar by adding more helper methods","closed","","mrtinkz","2015-11-12T21:38:29Z","2015-11-15T17:02:02Z"
"","902","Imporvement/spr 13616","https://jira.spring.io/browse/SPR-13616  Problem: Right now we have to override AbstractDispatcherServletInitializer.registerDispatcherServlet(...) in order to register Spring-WS's MessageDispatcherServlet (tested with Version 2.2.0.RELEASE). AbstractDispatcherServletInitializer.registerDispatcherServlet(...) calls createDispatcherServlet which returns a DispatcherServlet instance whereas MessageDispatcherServlet directly derives from FrameworkServlet. Both DispatcherServlet and MessageDispatcherServlet have the same base class in common that said FrameworkServlet.  Solution: AbstractDispatcherServletInitializer.registerDispatcherServlet(...) should return FrameworkServlet in order to support both Spring MVC's DispatcherServlet and Spring-WS's MessageDispatcherServlet.","closed","","ksokol","2015-10-27T22:49:14Z","2015-10-27T22:51:21Z"
"","901","SPR-13616 - Support Spring-WS's MessageDispatcherServlet in AbstractD…","https://jira.spring.io/browse/SPR-13616  Problem: Right now we have to override AbstractDispatcherServletInitializer.registerDispatcherServlet(...) in order to register Spring-WS's MessageDispatcherServlet (tested with Version 2.2.0.RELEASE). AbstractDispatcherServletInitializer.registerDispatcherServlet(...) calls createDispatcherServlet which returns a DispatcherServlet instance whereas MessageDispatcherServlet directly derives from FrameworkServlet. Both DispatcherServlet and MessageDispatcherServlet have the same base class in common that said FrameworkServlet.  Solution: AbstractDispatcherServletInitializer.registerDispatcherServlet(...) should return FrameworkServlet in order to support both Spring MVC's DispatcherServlet and Spring-WS's MessageDispatcherServlet.","closed","","ksokol","2015-10-27T22:23:10Z","2015-10-27T22:51:21Z"
"","912","SPR-12538 AsyncRestTemplate interceptors","Hi,  I would like to propose this change that introduces the interceptors functionality to the AsyncRestTemplate.  The implementation mimics the existing one for RestTemplate though is adjusted to handle ListenableFuture instead.  This is an entry point from which I would like to start and open the discussion. If you see some issues with this implementation just let me know. This change does not maintain the backward compatibility between the RestTemplate interceptors and I don't see a way to achieve that goal.  The motivation behind adding this is the fact that is really convenient to write extensions that automatically plug-in into the AsyncRestTemplate. Spring Cloud/Spring Cloud Sleuth already does that for RestTemplate and enables for instance request tracing.  Related issue: https://jira.spring.io/browse/SPR-12538","closed","","jmnarloch","2015-11-07T17:46:44Z","2015-12-22T22:40:34Z"
"","959","DefaultListableBeanFactory getBeansOfType initialize beans when includeNonSingletons is false","Hi,  I have a question:   in DefaultListableBeanFactory the method call getBeansOfType(MyClass.class, false, true) will initialize lazy singleton beans, but the call getBeansOfType(class, true, true) not.  Is this a correct behaviour?  Regards, Sergej","closed","in: core,","sewolf","2016-02-08T15:09:42Z","2021-11-22T12:11:32Z"
"","1018","Remove unnecessary condition in ResourceHttpRequestHandler.handleRequest()","Hey,  just stumbled upon this. `Resource.contentLength()` returns a primitive long, so the condition  ``` Long contentLength = resource.contentLength(); if (contentLength != null) {     // Something } ```  seems to be unnecessary because it will be always true.  Keep up the good work! Cheers","closed","","dreis2211","2016-03-25T22:55:14Z","2016-03-26T09:27:09Z"
"","947","Rejected async task on spring-web will now end instead of timeout.","Handles RejectedExecutionException on spring-web async call, now asyncWebRequest end and return immediately instead of waiting until timeout.  Closing the request immediately on error to avoid request time-out triggering a second exception.","closed","","icha024","2016-01-02T03:17:44Z","2016-01-14T20:52:44Z"
"","897","Added selection of compare mode for Json","Greetings everyone!  `spring-test` for comparing json use external library called `jsonassert`.  This lib has several mods of comparing json: - `STRICT` - Strict checking.  Not extensible, and strict array ordering. - `LENIENT` - Lenient checking.  Extensible, and non-strict array ordering. - `NON_EXTENSIBLE` - Non-extensible checking.  Not extensible, and non-strict array ordering. - `STRICT_ORDER` - Strict order checking.  Extensible, and strict array ordering.  By default `spring-test` in method `org.springframework.test.web.servlet.result.ContentResultMatchers#json` use this library in mod `LENIENT`.  This mod is not strict enough. In situation when in your json new field has added, your tests not failed, so app that use API with this json can crash when try to deserialize this in some POJO!  Also this is not acceptable, when you want compare json in other useful mods, for example `NON_EXTENSIBLE`.  I have added changes and for now, developer can select mod that he want.  Issue: [SPR-13607](https://jira.spring.io/browse/SPR-13607)  I have signed and agree to the terms of the Spring Individual Contributor License Agreement.","closed","","Hronom","2015-10-23T14:14:01Z","2015-10-29T16:19:45Z"
"","1019","Mocked Request queryString","Fixes mocked Request queryString.","closed","","acc15","2016-03-27T14:27:27Z","2016-04-01T14:55:43Z"
"","928","Fix media type lookup case sensitivity","Fixed a bug where the URL content negotiation ""format"" parameter values were case sensitive and only lowercase values were accepted. For example, URL query parameter format=json returned the appropriate JSON response but format=JSON resulted in a HttpMediaTypeNotAcceptableException and returned:  406 - The resource identified by this request is only capable of generating responses with characteristics not acceptable according to the request ""accept"" headers.  When the MappingMediaTypeFileExtensionResolver is constructed, it is passed a map containing the media type key to MediaType mappings defined in the ContentNegotiationConfigurer. In the constructor of MappingMediaTypeFileExtensionResolver, the keys are converted to lowercase and the mappings of keys to MediaTypes are added to the ConcurrentMap mediaTypes using the lowercase version of the keys. However, when retrieving the MediaType from a key in the lookupMediaType method, no conversion to lowercase is performed so any value for the URL ""format"" parameter other than the lowercase version will not return the proper MediaType result.  On May 1st, 2014, a change was made to ParameterContentNegotiationStrategy to handle cases where the content negotiation format URL parameter does not result in a match for a MediaType. If no match is found, a HttpMediaTypeNotAcceptableException is thrown resulting in the 406 response above. Prior to this commit, a null was returned instead of throwing an exception so this issue was hidden and appeared to function correctly.  To make the media type lookup case insensitive, added a line to the lookupMediaType method in MediaTypeFileExtensionResolver to first convert the extension (media type key) to lowercase prior to attempting to retrieve it from the mediaTypes map.  Issue: SPR-13747  I have signed and agree to the terms of the Spring Individual Contributor License Agreement.","closed","","mhartsock","2015-12-01T17:39:58Z","2015-12-01T21:54:53Z"
"","990","fix convert BigDecimal to Integer/Short/Byte maynot overflow","fix NumberUtils throws Exception when convert a BigDecimal to Long but sucess when convert to Integer http://stackoverflow.com/questions/35822941/numberutils-throws-exception-when-convert-a-bigdecimal-to-long-but-sucess-when-c","closed","","anguo-wenz","2016-03-06T08:49:20Z","2016-03-18T17:50:12Z"
"","978","Primary bean override restriction for non primary beans with same names","Disabled overriding primary bean, when creating non primary bean with the same name. Please read below issue description for more info.  Issue: [SPR-13980](https://jira.spring.io/browse/SPR-13980)  Note: I have received an explanation, that factory bean name override is higher than `Primary` annotation override. Is that true?","closed","in: core,","mkazinauskas","2016-02-25T12:45:15Z","2021-11-22T12:12:37Z"
"","971","4.2.x","d","closed","","yptx","2016-02-21T03:23:28Z","2016-02-21T09:37:01Z"
"","986","Update the WEBJARS_LOCATION that will be stripped from the path","Currently, resource paths will take the form of `/webjars//bootstrap/3.3.2/js/bootstrap.min.js`. Note the double slash, that is still from the `/bootstrap/...`.","closed","","Shredder121","2016-03-03T17:32:35Z","2016-03-04T11:01:32Z"
"","983","spring-test updates","Combined pull request (with separate commits for) [SPR-13991](https://jira.spring.io/browse/SPR-13991) [SPR-13955](https://jira.spring.io/browse/SPR-13955),  [SPR-13949](https://jira.spring.io/browse/SPR-13949) & [SPR-13998](https://jira.spring.io/browse/SPR-13998)  Could be taken wholesale or cherry-picked as required.","closed","","philwebb","2016-02-29T07:38:11Z","2016-03-08T19:02:34Z"
"","916","Add support of Callable for TaskScheduler methods.","Closes SPR-12062. Creates class CallableWrapperRunnable to wrap Callable objects with Runnable interface. In all TaskScheduler methods which takes Callable parameter, the CallableWrapperRunnable object is used to wrap the Callable object. Then, the old TaskScheduler method which takes Runnable parameter is called.","closed","","sedran","2015-11-09T22:55:23Z","2022-02-18T19:11:05Z"
"","962","404 rather than 405 or 200","Check that the path is valid and resolvable before checking that the http method is supported. For invalid or unresolvable paths, always respond with a 404. Maybe OPTIONS should have 200 status, but I think the others would be better as 404. I've raised this as a bug on [Jira](https://jira.spring.io/browse/SPR-13944)","closed","","matthew-pearson","2016-02-14T12:43:09Z","2016-02-17T13:25:46Z"
"","1015","Changed declaration order of some variables in GenericTypeResolver.resolveReturnTypeForGenericMethod()","Changed the order to don't declare variables that might not be needed. If declaredTypeVariables.length == 0 is true, the method returns early.","closed","status: declined,","dreis2211","2016-03-23T17:54:37Z","2021-05-07T14:14:43Z"
"","1033","Fixes SPR-14139 - Forwarded sendMessage call to delegate.","Calls to `WebSocketSessionDecorator#sendMessage(WebSocketMessage)` are now forwarded to the `WebSocketSession` delegate.  Please review and pull. My CLA Number is 149720151120072904.  Thanks, Venil Noronha","closed","","venilnoronha","2016-04-14T12:43:58Z","2016-04-18T13:35:53Z"
"","921","Add caching support for Caffeine","Caffeine is a Java 8 rewrite of Guava's cache. It provides an updated API, a few missing features, significantly [higher performance](https://github.com/ben-manes/caffeine/wiki/Benchmarks), and a [near optimal hit rate](https://github.com/ben-manes/caffeine/wiki/Efficiency). As the co-author of Guava's Cache, this provides an upgrade path due to Guava's being in maintenance mode, remains Java 6 for Android compatibility, and none of the current team members are familiar with the caching code. Prior to Guava I wrote a popular cache used by Cassandra, Grails, Solr, etc. called [ConcurrentLinkedHashMap](https://code.google.com/p/concurrentlinkedhashmap).  For an in-memory local cache, the benefits are more so in comparison to Ehcache. While the performance of Ehcache has always been fairly low, in v3.0.0.m3 the hit rate was dramatically reduced. Instead of taking a random sample, an MRU heavy distribution is sampled and then the priority strategy (LRU, etc) is applied. This leads to very a poor hit rate for small caches, raising to a random policy's hit rate for large caches.  Caffeine's policy takes into account both the recency and frequency in O(1) time, retaining the popularity history by using a compact sketch. The concurrent throughput scales linearly (tested with 32-core) at 33% of an unbounded Java 8 `ConcurrentHashMap`. The implementation passes Guava's test suite, JSR166's TCK, and its own (consisting of over 1M test execution variants). There is about 95% code coverage and is well documented.","closed","","ben-manes","2015-11-15T06:08:53Z","2015-12-18T14:48:27Z"
"","900","merge plugin: fix broken reference to merged projects if gradle daemon used","Caching 'attachedProjectsEvaluated' flag using static plugin field may broke reference to merged projects for subsequent build executions if gradle daemon used","closed","","vladsoroka","2015-10-27T13:42:18Z","2016-09-22T11:51:56Z"
"","942","Decrease allocation rate by making CacheOperation immutable","CacheOperation is used as map key (CacheOperationCacheKey in CacheAspectSupport) so making it immutable allows caching toString results. Thanks to that equals/hashCode methods do not need memory allocations.","closed","","soldierkam","2015-12-27T22:09:55Z","2016-01-24T19:19:46Z"
"","886","Handling null in BufferingClientHttpResponseWrapper","BufferingClientHttpResponseWrapper#getBody brakes the contract for ClientHttpResponse and whenever the response body is null (for instance when 204 is being returned) it throws IllegalArgumentException, while any other implementation is returning null.","closed","","jmnarloch","2015-10-11T07:58:46Z","2015-10-18T12:42:25Z"
"","1020","Prevent methods of GroovyObject from becoming transactional","As Jürgen pointed out, we exclude GroovyObject methods for a couple of other TransactionAttributeSource implementations already, but not for AnnotationTransactionAttributeSource since we expected it to be clearly annotation-driven.  Yet, if @Transactional is applied at the class-level, in this case Groovy methods will be considered transactional. - Added an integration test to reproduce the issue. - Added exclusion to method computeTransactionAttribute() in AbstractFallbackTransactionAttributeSource, this way, the fact that a method should be excluded can be cached.  Issue: SPR-14095  ---  I have signed and agree to the terms of the Spring Individual Contributor License Agreement.","closed","","laszlocsontos","2016-03-30T07:02:20Z","2016-03-30T08:25:00Z"
"","965","Distinguish between unsatisfied constructor and factory method deps","As discussed with @snicoll, and in support of Spring Boot 1.4's goal of providing improved diagnostics when application context refresh fails, this PR introduces specific exceptions for unsatisfied factory method dependencies and unsatisfied constructor dependencies.","closed","","wilkinsona","2016-02-17T14:42:38Z","2016-04-12T06:20:04Z"
"","1045","Add client-side polling delay to JMS message listeners.","AQ JMS scales poorly when there are many threads waiting for messages on the same queue. When a message arrives all threads wake up and compete for it, consuming CPU in the database. It is much better to sleep on the client side between polling attempts when a receive returned without a message. That way it is possible to use a large number of threads/sessions without overloading the server. Other JMS providers may have the same problem.  I have signed and agree to the terms of the Spring Individual Contributor License Agreement.  Issue: SPR-14225","closed","","erik-wramner","2016-04-27T06:30:30Z","2022-02-18T19:11:06Z"
"","1021","Backport SPR-14095 to 4.2.x","AnnotationTransactionAttributeSource applies class-level metadata to user-level methods only  Issue: SPR-14095 (cherry picked from commit b7819e6)  ---  I have signed and agree to the terms of the Spring Individual Contributor License Agreement.","closed","","laszlocsontos","2016-03-30T08:45:12Z","2016-04-12T06:16:30Z"
"","991","Add ContextCustomizer support to spring-test","Allow libraries to contribute ContextCustomizers that can update ApplicationContexts create by spring-test before they are run.  A Customizer may be provided via a ContextCustomizerFactory which is registered with `spring.factories`. Each factory is consulted whenever a new ApplicationContext needs to be created by spring-test. Factories may inspect various details about the test and either return a new ContextCustomizers or `null`.  ContextCustomizers are similar to ApplicationContextInitializers and may perform any number of tasks, including bean registration.  Issue: SPR-13998","closed","","philwebb","2016-03-08T21:21:47Z","2016-03-12T21:24:51Z"
"","919","Support @Lookup methods in @Configuration classes","Adding a @Lookup method will create a subclass of the enhanced class, so the original line would not work.","closed","","idlsoft","2015-11-13T17:03:51Z","2017-03-07T12:46:19Z"
"","972","Support for @ExceptionHandler exclusions","Added support for excluding an exception from being handled in a method annotated with @ExceptionHandler.  Issue: SPR-13932  I have signed and agree to the terms of the Spring Individual Contributor License Agreement.","closed","status: declined,","LinkedList","2016-02-21T09:06:20Z","2019-01-29T20:48:07Z"
"","1000","Update StoredProcedure.java declareParameter method JavaDoc","Add child's method for throwing to javadoc.","closed","type: documentation,","awgtek","2016-03-11T16:39:45Z","2021-11-22T12:22:04Z"
"","996","Support servlet listener activate attribute","Add a ServletTestExecutionListener.ACTIVATE_LISTENER attribute which can be set on the TestContext to trigger activation of the listener even if a `@WebAppConfiguration` is not present.  Issue: SPR-14035","closed","","philwebb","2016-03-10T07:43:07Z","2016-03-10T16:27:38Z"
"","917","Add suppressbeanexceptionlogging feature flag","Add a  `spring.context.suppressbeanexceptionlogging` feature flag to be used by `AbstractApplicationContext` to determine when BeansException logging should be suppressed.  Issue:","closed","","philwebb","2015-11-10T08:04:53Z","2015-11-11T08:53:44Z"
"","1026","Fix iso date time format","According to https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html the ISO 8601 time zone letter is `X` instead of `Z`. `Z` stands for RFC 822 time zone.  With this, we are able to parse dates which are created in JavaScript using `new Date().toISOString()`.  CC: @davidreher","closed","","Mischi","2016-04-04T09:19:41Z","2017-12-05T23:00:11Z"
"","1043","Support non-blocking receiveTimeout.","AbstractPollingMessageListenerContainer#receiveMessage currently blocks indefinitely both on -1 and 0 as receiveTimeout. This is because MessageConsumer#receive blocks if the timeout is 0 and it is not possible to poll without a timeout. This commit fixes that by calling receiveNoWait if the timeout is 0 as receive(0) blocks. In some cases (specifically AQ) this can yield better performance.  Issue: SPR-14212","closed","","erik-wramner","2016-04-24T10:28:16Z","2016-04-25T08:41:01Z"
"","1051","Server side includes","A new feature to include a response within another one. There are many questions on the web and stackoverflow about whether spring mvc supports this and as far as I know there is no default implemantion within the framework.   ASP .NET MVC provides this feature as ""Child actions"" and Grails also has this feature which we have used in many projects. While this is not a ""MVC"" related feature, it is especially helpful in MVC environments where a controller action view can include other helper actions. This is different than including partial views such that, this ""child action""  can implement business rules or can query some database etc. This helps build more reusable sub components while separating controller logic and view logic.   While this is possible by writing a custom tag to coordinate your business logic and separate it from the view logic, including a controller method response is more rapid, easier for the developer and view technology ignorant.  **Usage** Say for instance a shopping cart summary is displayed on all pages by the ""CartController"" -> ""display"" handler method. Then the view developer will use it like this:  ```      ```  An example prototype project to show various usage scenarios and capabilities can be found [here](https://github.com/Rabbytes/spring-webmvc-include-example).  **Implementation** I grabbed some part from Grails and some from Tomcat's  SSI filter implementation.   Current implementation depends on StreamByteBuffer class authored by Graeme Rocher in Grails framework to capture the response in a in-memory buffer.Since this buffer uses chunks, it should be way more performant than a standard ByteArrayOutputStream especially for too many write operations.Graeme uses one byte buffer and one char buffer for write operations but I used byte buffers for both the printwriter and the outputstream.  Included request has its own request params given to the constructor but if requested, it may also fall back to the original request params. Generally, this fallback is not a good choice because decreases reusability but in some cases, you find yourself copying request params from the main request to the child requests. For instance when displaying a product detail page, you may include child actions which all depend on the same product id. One way to do this is to set it as an attribute in the main request and allow child actions to get it. Fallback to main request params solves this issue but maybe an improvement can be to filter these params with a ""whitelist"" or ""blacklist"".   Another improvement may be to prevent child actions to respond to direct requests. In ASP .NET MVC you can define ""ChildActionOnly"" handler methods which can only be used within an include. Grails does not have this feature.  Additionaly in the future, we may put some kind of hierarchical state to the request attributes so that a handler method can check if it is working within a parent handler. This may help deciding on what and how to display based on the hierarchical handler stack. For instance, ASP .NET action exception handler uses this information when rendering exception response.  Although I have some unit tests here, and I created a sample project to see this in action, I could not find a way to write some functional tests.   **Example Project** [Example project on Github](https://github.com/Rabbytes/spring-webmvc-include-example)","closed","status: declined,","ckalan","2016-05-07T01:00:05Z","2021-11-11T13:44:26Z"
"","1005","Adapters for RxJava types to DeferredResult and SseEmitter","`rx.Single` is adapted to `DeferredResult` which is a straight-forward fit.   `rx.Observable` is adapted to `SseEmitter` with `Content-Type: text/event-stream` (also a straight-forward fit) or to `ResponseBodyEmitter` otherwise (HTTP streaming minus SSE formatting).  Note: there is no support for `Observable` in non-HTTP streaming/SSE scenarios. The [spring-reactive](https://github.com/spring-projects/spring-reactive) project and Spring Framework 5 aim to provide comprehensive support for reactive programming models.  https://jira.spring.io/browse/SPR-14046","closed","","rstoyanchev","2016-03-13T18:03:28Z","2016-03-14T17:27:04Z"
"","913","Avoid char[] allocation when generates cache key","_org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator#getCacheKey_ generates to many string during work with context and create context, especially when in context present many beans(in my case 1200+) .   String concatenation leads to two problems: 1) Excessive heap garbage due to throw-away string creation 2) Excessive CPU due to computing hash code for the newly created strings. It occurs because DefaultListableBeanFactory#doGetBeanNamesForType iterates by all beans in context and try find correspond bean when specified only class and bean name absent(I think it occurs in 80% of cases when uses java configurations).  We can avoid it problem use only beanName bacause they unique in context(exception only bean creates via FactoryBean because in it case beanName for factory and result bean can be same)  Issue: [SPR-13655](https://jira.spring.io/browse/SPR-13655)  I check fix on starting application scenario, you can see results below  **Without with:** char[] allocation: ![spring_allocation_string_by_start](https://cloud.githubusercontent.com/assets/10699594/11017535/24a23192-85b3-11e5-9f0c-c053659f3906.png)  Hot methods: ![spring_hot_methods_by_start](https://cloud.githubusercontent.com/assets/10699594/11017540/3ed2b622-85b3-11e5-870f-32bc718f509f.png)  **With current fix** char[] allocation: ![spring_allocation_string_by_start_after_fix](https://cloud.githubusercontent.com/assets/10699594/11017572/9a6ea22e-85b4-11e5-967c-2b03fa3a8fdc.png)  Hot methods: ![spring_hot_methods_by_start_after_fix](https://cloud.githubusercontent.com/assets/10699594/11017570/848a88c4-85b4-11e5-9a90-cba93adec187.png)  I have signed and agree to the terms of the Spring Individual Contributor License Agreement.","closed","","Gordiychuk","2015-11-07T22:06:50Z","2015-11-13T13:21:51Z"
"","929","SPR-13752: MockHttpServletResponse.setIntHeader Content-Length","[SPR-13752: MockHttpServletResponse.setIntHeader does not support 'Content-Length' header](https://jira.spring.io/browse/SPR-13752)  I have signed and agree to the terms of the Spring Individual Contributor License Agreement.","closed","","bedrin","2015-12-02T05:53:54Z","2015-12-02T12:18:02Z"
"","977","4.2.5.release","2016-02-25 17:44:58","closed","","lonelysunshine","2016-02-25T09:45:14Z","2016-02-25T09:46:38Z"
"","875","Fix AllowedOrigins according to RFC 6454","- Transformation of the origin into uri components used    to fail with a `NumberFormatException` when origin string   contained a character after the port definition like `[port]/`.   - The slash straight after the port will ruin the integer parsing.     `DefaultCorsProcessor.processRequest` will fail during call to `WebUtils.isSameOrigin`. - Origin  validity check was considering    'http://domain1.com' and 'http://domain1.com/' to be different. The same applies to allowed origins comparison. This doesn't meet RFC 6454 standard.  > 3.2.1. Examples >  > ``` > All of the following resources have the same origin: >  > http://example.com/ > http://example.com:80/ > http://example.com/path/file > ```  **Notes** 1. In order to improve performance the `allowedOrigins` collection can convert provided `Strings` directly to `UriComponents` or parsing for the header `origin` and `allowedOrigins` can be further simplified. 2. I'm not totally sure about `UriComponentsBuilder.fromHttpRequest` but based on the code it may fail the same way as `UriComponentsBuilder fromOriginHeader` did. It depends what value can be stored in `X-Forwarded-Host`.  Issue: Nothing has been reported so far. However, the issue becomes noticeable: [SocketRocket](https://github.com/square/SocketRocket/pull/256)  _I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement._","closed","","GeorgeCGV","2015-09-18T00:18:55Z","2015-09-28T09:34:41Z"
"","973","Master","- pr/934:   Fix Format-string method arguments","closed","","fish200x","2016-02-21T10:36:01Z","2016-02-21T10:45:03Z"
"","881","Add description for two exceptions which handled by DefaultHandlerExceptionResolver in reference document","- MissingPathVariableException (Available since 4.2) - NoHandlerFoundException (Available since 4.0)  Please check. I have signed and agree to the terms of the SpringSource Individual Contributor License Agreement.","closed","","kazuki43zoo","2015-10-06T17:16:30Z","2015-10-19T23:35:41Z"
"","18036","Validate method parameter index via Java 8 Method.getParameterCount() [SPR-13456]","**[俞火江](https://jira.spring.io/secure/ViewProfile.jspa?name=jddxf)** opened **[SPR-13456](https://jira.spring.io/browse/SPR-13456?redirect=false)** and commented  If the value for `parameterIndex` is too great when constructing a `MethodParameter`, an `ArrayIndexOutOfBoundsException` will be thrown later when some method such as `getParameterType()` is called. So why not detect the error as early as possible?  ---  **Affects:** 4.2.1  **Issue Links:** - #18627 Introduce support for creating a MethodParameter from a Java 8 Parameter  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/39e3f2ebf6690b72b7a8af852a35df6ff6229515","closed","type: enhancement,","spring-projects-issues","2015-09-10T06:00:19Z","2019-01-11T17:23:32Z"
"","18312","Doc: Scope.registerDestructionCallback may get called for inner beans [SPR-13739]","**[Łukasz Rekucki](https://jira.spring.io/secure/ViewProfile.jspa?name=lqc)** opened **[SPR-13739](https://jira.spring.io/browse/SPR-13739?redirect=false)** and commented  Consider the following bean definition:  ```  		 			 			 		 	 ```  The documentation on inner beans states that:  > An inner bean definition does not require a defined id or name; the container ignores these values. It also ignores the scope flag.  But `org.springframework.beans.factory.support.AbstractBeanFactory.registerDisposableBeanIfNecessary(String, Object, RootBeanDefinition)` doesn't check if the definition is an inner bean and registers the dispose callback anyway.  **Expected**  `registerDestructionCallback` should not be called for inner bean  ---  **Affects:** 4.1.8, 4.2.3  **Issue Links:** - #18317 Avoid scoped destruction callbacks in case of no post-processor actually applying  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/998da2f45cab07816c1d8531e7710fca2e0bed53, https://github.com/spring-projects/spring-framework/commit/c56d1a6677fa4520e81e1553e87c83632e7a41c2, https://github.com/spring-projects/spring-framework/commit/7104076e194b37fd709178beab69f3beceb9cd0f  **Backported to:** [4.1.9](https://github.com/spring-projects/spring-framework/milestone/133?closed=1)","closed","type: task,","spring-projects-issues","2015-11-30T13:32:24Z","2019-01-11T19:30:28Z"
"","18271","SynthesizedAnnotation is not visible from class loader [SPR-13696]","**[zhangchunhua](https://jira.spring.io/secure/ViewProfile.jspa?name=zhangch-fnst)** opened **[SPR-13696](https://jira.spring.io/browse/SPR-13696?redirect=false)** and commented  `@RestController` public class UserController { `@RequestMapping`(path = ""/user"", method = RequestMethod.GET) `@JsonView`(User.WithoutPasswordView.class) public User getUser() { return new User(""eric"", ""7!jd#h23""); } }  java.lang.IllegalArgumentException: interface org.springframework.core.annotation.SynthesizedAnnotation is not visible from class loader at java.lang.reflect.Proxy$ProxyClassFactory.apply(Proxy.java:581) at java.lang.reflect.Proxy$ProxyClassFactory.apply(Proxy.java:557) at java.lang.reflect.WeakCache$Factory.get(WeakCache.java:230) at java.lang.reflect.WeakCache.get(WeakCache.java:127) at java.lang.reflect.Proxy.getProxyClass0(Proxy.java:419) at java.lang.reflect.Proxy.newProxyInstance(Proxy.java:719) at org.springframework.core.annotation.AnnotationUtils.synthesizeAnnotation(AnnotationUtils.java:1404) at org.springframework.core.annotation.AnnotatedElementUtils.findMergedAnnotation(AnnotatedElementUtils.java:405) at org.springframework.web.method.HandlerMethod.getMethodAnnotation(HandlerMethod.java:234) at org.springframework.web.method.HandlerMethod$HandlerMethodParameter.getMethodAnnotation(HandlerMethod.java:290) at org.springframework.web.servlet.mvc.method.annotation.JsonViewResponseBodyAdvice.supports(JsonViewResponseBodyAdvice.java:50) at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyAdviceChain.processBody(RequestResponseBodyAdviceChain.java:147) at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyAdviceChain.beforeBodyWrite(RequestResponseBodyAdviceChain.java:138) at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:217) at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:153) at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.handleReturnValue(RequestResponseBodyMethodProcessor.java:165) at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:80) at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:126) at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:814) at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:737) at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:959) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:893) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861) at javax.servlet.http.HttpServlet.service(HttpServlet.java:687) at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) at javax.servlet.http.HttpServlet.service(HttpServlet.java:790) at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1682) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:318) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:160) at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:734) at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:673) at com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:99) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:174) at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:734) at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:673) at org.apache.catalina.connector.CoyoteAdapter.doService(CoyoteAdapter.java:412) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:282) at com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:459) at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:167) at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:201) at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:175) at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:235) at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119) at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:284) at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:201) at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:133) at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:112) at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77) at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:561) at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112) at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117) at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56) at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137) at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:565) at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:545) at java.lang.Thread.run(Thread.java:745)  ---  **Affects:** 4.2.3  **Reference URL:** #18212  **Issue Links:** - #18212 IllegalArgumentException when using AnnotationUtils.findAnnotation - #18402 Regression: Spring 4.2.4 fails to load configuration class on Google App Engine  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d0814703c482711279d4bf4cce72b03da3128ac4  0 votes, 7 watchers","closed","in: core,","spring-projects-issues","2015-11-17T10:07:37Z","2019-01-14T04:41:06Z"
"","18252","Cannot load ApplicationContext when running tests from JAR [SPR-13677]","**[Yuriy Privezentsev](https://jira.spring.io/secure/ViewProfile.jspa?name=yupie)** opened **[SPR-13677](https://jira.spring.io/browse/SPR-13677?redirect=false)** and commented  All the project dependencies are packed into one über JAR, and tests run from that JAR. The test Spring configuration is bound via `@ContextConfiguration`.  ```java @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(""classpath*:appConfiguration.xml"") public class MessengerTest {   @Inject   Messenger messenger;    @Test   public void test() {       messenger.printMessage();   } } ```  The `Messenger` bean is described within the context, and the test perfectly runs from IDE. However, when I am running the test from the JAR a `NullPointerException` is thrown in the line with the `printMessage()` call.  The command to run unit test is:  ``` java -cp SpringTest-1.0-SNAPSHOT-full-pack.jar org.junit.runner.JUnitCore MessengerTest ```  I have tried to create a bean which will throw a `RuntimeException` from the constructor to make sure that the context is not loaded and it is not the injection fault. Indeed it is not loaded since no exception is thrown.  - Spring version: 4.1.7.RELEASE - Java version: 1.8u40 x64  The complete project may be seen at: https://github.com/YuriyPrivezentsev/springContext   --- No further details from [SPR-13677](https://jira.spring.io/browse/SPR-13677?redirect=false)","closed","status: declined,","spring-projects-issues","2015-11-12T11:39:27Z","2019-01-12T16:22:41Z"
"","18112","JodaTimeFormattingTests.testBindDateTime fails in certain time zones [SPR-13536]","**[YoungTae Seok](https://jira.spring.io/secure/ViewProfile.jspa?name=delegacy)** opened **[SPR-13536](https://jira.spring.io/browse/SPR-13536?redirect=false)** and commented  When I run tests of spring-framework project, I got some failed tests from `JodaTimeFormattingTests`.  It is mainly because I live in the different time zone. :(  For example, in `testBindDateTime`, the result value should start with ""10/31/09"", but I got the value of ""10/30/09 10:00 PM"", due to the time zone (+09:00).  When I modified the tests with `new DateTime(2009, 10, 31, 12, 0, TEST_DATETIMEZONE)`, I see all tests passed. :)   ---  **Affects:** 4.2.1  **Attachments:** - [Screen Shot 2015-10-04 at 17.15.04.png](https://jira.spring.io/secure/attachment/23141/Screen+Shot+2015-10-04+at+17.15.04.png) (_67.50 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/668f5db582fab539c4e67f2f8e1325269dbc3d5e","closed","type: task,","spring-projects-issues","2015-10-04T08:28:07Z","2015-10-15T13:04:43Z"
"","18563","DefaultAdvisorAutoProxyCreator doesn't get the target class of existing proxy [SPR-13990]","**[Yoni Amir](https://jira.spring.io/secure/ViewProfile.jspa?name=amir.yoni@gmail.com)** opened **[SPR-13990](https://jira.spring.io/browse/SPR-13990?redirect=false)** and commented  I have a spring context setup like this:  > \ >  > \  I have a custom advisor, not shown in the XML snippet above, that searches for some annotations at the class level of the beans that Spring creates. The problem is that the `PersistenceExceptionTranslationPostProcessor` runs first and creates a proxy around the bean. When the `DefaultAdvisorAutoProxyCreator` runs, it calls `getClass()` on the proxied bean and passes that class (something like com.sun.proxy.$Proxy) to the advisor to test for a match. The advisor is then unable to detect the annotations. The flawed call to `getClass()` is in `AbstractAutoProxyCreater.wrapIfNecessary()` method, just before calling `getAdvicesAndAdvisorsForBean()`.  There is a workaround, though. Adding an order attribute and ensuring that the `DefaultAdvisorAutoProxyCreator` runs first works. This is because the `PersistenceExceptionTranslationPostProcessor` can handle beans that are already proxied - it extract the target class of the proxy. This happens in `AbstractAdvisingBeanPostProcessor.postProcessAfterInitialization()` method. The relevant code looks more or less like this:  > if (bean instanceof Advised) { > Advised advised = (Advised) bean; > if (!advised.isFrozen() && isEligible(AopUtils.**getTargetClass**(bean))) {  This workaround has a limitation, though. It forces a certain order in which the interceptors run, which may not be the order that I want.  Bottom line is, I think `AbstractAutoProxyCreater.wrapIfNecessary()` (which is called from `AbstractAutoProxyCreater.postProcessAfterInitialization()` needs to use the code snippet above and act similarly to `AbstractAdvisingBeanPostProcessor.postProcessAfterInitialization()`  ---  **Issue Links:** - #18457 AnnotationAwareOrderComparator getPriority does not work if bean is a proxy","closed","type: enhancement,","spring-projects-issues","2016-02-26T22:23:10Z","2019-01-11T19:01:08Z"
"","18693","Unable to define empty java.util.Optional bean in spring xml [SPR-14121]","**[Yibo Wang](https://jira.spring.io/secure/ViewProfile.jspa?name=wangyibo)** opened **[SPR-14121](https://jira.spring.io/browse/SPR-14121?redirect=false)** and commented  A bean who refers to an empty java.util.Optional value cannot be created with Spring configuration xml.  In Spring config xml file I have:  ```xml  ```  Then when the Spring config was loaded, it reported the following error:  ```  [junit] org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'emptyOptional' defined in URL [file:configuration/spring-configuration/components/observers.xml]: Bean instantiation via factory method failed; nested exception is java.lang.IllegalArgumentException: Optional value must be present [junit]     at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:599) [junit]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1123) [junit]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1018) [junit]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510) [junit]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) [junit]     at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) [junit]     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) [junit]     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) [junit]     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) [junit]     at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772) [junit]     at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839) [junit]     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:538) [junit]     at com.amazon.gpi.componentTesting.ComponentTestContext.createContext(ComponentTestContext.java:140) [junit]     at com.amazon.gpi.componentTesting.ComponentTestContext.(ComponentTestContext.java:117) [junit]     at com.amazon.gpi.componentTesting.ComponentTestContext.fromProfile(ComponentTestContext.java:59) [junit]     at com.amazon.gpi.componentTesting.TestProfileRunner.(TestProfileRunner.java:130) [junit]     at java.lang.reflect.Constructor.newInstance(Constructor.java:423) [junit]     at java.lang.reflect.Constructor.newInstance(Constructor.java:423) [junit] Caused by: java.lang.IllegalArgumentException: Optional value must be present [junit]     at org.springframework.util.Assert.isTrue(Assert.java:68) [junit]     at org.springframework.beans.AbstractNestablePropertyAccessor$OptionalUnwrapper.unwrap(AbstractNestablePropertyAccessor.java:1049) [junit]     at org.springframework.beans.AbstractNestablePropertyAccessor.setWrappedInstance(AbstractNestablePropertyAccessor.java:207) [junit]     at org.springframework.beans.BeanWrapperImpl.setWrappedInstance(BeanWrapperImpl.java:138) [junit]     at org.springframework.beans.AbstractNestablePropertyAccessor.setWrappedInstance(AbstractNestablePropertyAccessor.java:194) [junit]     at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:595) ```  Looks like spring tried to extract the nested value of the Optional class and use that to assign to the bean which was not what I intended. (What I tried to do was to have both empty Optional and present Optional and later conditionally choose to use one of them. So if spring did not extract the nested value, it would just work (like if the Optional is from Guava.))  Thanks  ---  **Affects:** 4.2.4  **Issue Links:** - #16855 Data binding with java.util.Optional: traversal of nested paths, detection of empty holders - #19043 NPE while try to use abstract beans with optional properties  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0864834077e4cd645fcecec0d6f63221754d5fae, https://github.com/spring-projects/spring-framework/commit/5c1d3fca15d9c020a07a0130a3992926d7087f1a, https://github.com/spring-projects/spring-framework/commit/157dcab56ce2ce132c6d8887916020d418683b63","closed","type: enhancement,","spring-projects-issues","2016-04-05T20:01:12Z","2019-01-11T16:40:32Z"
"","18015","IllegalArgumentException when providing a StreamingResponseBody as a lambda expression in the body of a ResponseEntity [SPR-13436]","**[Yi EungJun](https://jira.spring.io/secure/ViewProfile.jspa?name=yi%20eungjun)** opened **[SPR-13436](https://jira.spring.io/browse/SPR-13436?redirect=false)** and commented  According to the reference manual of Spring Framework, StreamingResponseBody is supported as the body within a ResponseEntity:  > A StreamingResponseBody can be returned to write to the response OutputStream asynchronously; also supported as the body within a ResponseEntity.  But when I do that:  ```java return new ResponseEntity(         (StreamingResponseBody) outputStream ->                 IOUtils.copyLarge(is, response.getOutputStream()),         HttpStatus.OK); ```  It raises an illegalArgumentException as follows:  ```java org.springframework.web.util.NestedServletException: Request processing failed; nested exception is java.lang.IllegalArgumentException: No converter found for return value of type: class com.navercorp.yobi.controllers.api.CodeController$$Lambda$33/1309738228 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:982) 	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:618) ... ```    ---  **Affects:** 4.2.1","closed","status: declined,","spring-projects-issues","2015-09-07T02:06:01Z","2019-01-12T16:22:55Z"
"","18611","Support conversion between Enum and Integer [SPR-14039]","**[Yanming Zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=quaff)** opened **[SPR-14039](https://jira.spring.io/browse/SPR-14039?redirect=false)** and commented  DefaultConversionService have conversion between Enum and String using Enum.name() ,  It's reasonable to add conversion for Integer using Enum.ordinal() . JPA use ordinal as default mapping:  ```java package javax.persistence; public @interface Enumerated {     EnumType value() default ORDINAL; } ```  Developers can extends BeanPropertyRowMapper and set DefaultConversionService to BeanWrapper, doesn't need write Converters, I'm glad to provide a pull request.   ---  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/998, and commits https://github.com/spring-projects/spring-framework/commit/f422e490b095a3b0dd10c80accbc9a1d2a8df201, https://github.com/spring-projects/spring-framework/commit/1c3c88f81ef75ee382ef7ec460309cfaf6432142","closed","type: enhancement,","spring-projects-issues","2016-03-11T03:45:16Z","2016-04-06T08:38:13Z"
"","18232","SerializableTypeWrapper.MethodInvokeTypeProvider can be exploited for unsafe deserialization [SPR-13656]","**[Yanming Zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=quaff)** opened **[SPR-13656](https://jira.spring.io/browse/SPR-13656?redirect=false)*** and commented  http://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/ https://github.com/frohoff/ysoserial  ---  **Affects:** 4.1.8, 4.2.2  **Issue Links:** - #18250 Does Spring Framework use InvokerTransformer from Apache Collections?  **Backported to:** [4.1.9](https://github.com/spring-projects/spring-framework/milestone/133?closed=1)  0 votes, 16 watchers","closed","type: bug,","spring-projects-issues","2015-11-08T11:26:39Z","2019-01-11T19:15:16Z"
"","18201","Add fallback option default false to @Qualifier [SPR-13623]","**[Yanming Zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=quaff)** opened **[SPR-13623](https://jira.spring.io/browse/SPR-13623?redirect=false)** and commented  It's identical to current implementation If fallback=false, so it's backward compatible. fallback=true is useful for override base platform in particular app.  ```java @Component public class DefaultEchoService implements EchoService { } ```  ```java @Qualifier(value = ""customEchoService"", fallback = true) @Autowired private EchoService echoService; ```  Spring will inject DefaultEchoService as echoService, If we have another EchoService named ""customEchoService"", spring should inject it instead.  ```java @Component(""customEchoService"") public class CustomEchoService implements EchoService { } ```    --- No further details from [SPR-13623](https://jira.spring.io/browse/SPR-13623?redirect=false)","closed","type: enhancement,","spring-projects-issues","2015-10-30T01:28:20Z","2016-01-27T07:36:59Z"
"","18416","Doc: @Transactional on private methods with aspectj mode [SPR-13843]","**[Xiaolong Zuo](https://jira.spring.io/secure/ViewProfile.jspa?name=xiaolongzuo)** opened **[SPR-13843](https://jira.spring.io/browse/SPR-13843?redirect=false)** and commented  I would like to use `@Transactional` to private method.I find a way from [springdocs 16.5.9](http://docs.spring.io/spring/docs/current/spring-framework-reference/html/transaction.html),but it's unavailable.  My spring config file like below:  ```xml .....         ..... ```  My service class like below:  ```java @Service public class AdminUsAccountService {      @Autowired     private UsAccountMapper usAccountMapper;      public void out() {         UsAccount usAccount1 = new UsAccount();         usAccount1.setId(1);         usAccount1.setType(1);         usAccountMapper.updateByPrimaryKeySelective(usAccount1);         inner();     }      @Transactional     private void inner() {         UsAccount usAccount2 = new UsAccount();         usAccount2.setId(3);         usAccount2.setType(1);         usAccountMapper.updateByPrimaryKeySelective(usAccount2);         throw new RuntimeException();     } } ```  I expect the usAccount1's type is 1 and the usAccount2's type is 0(original value in db is 0),but all the two usAccount's type are 1.   ---  **Affects:** 4.1.7  **Backported to:** [4.2.7](https://github.com/spring-projects/spring-framework/milestone/144?closed=1)","closed","type: task,","spring-projects-issues","2016-01-06T12:11:08Z","2016-06-10T09:19:12Z"
"","18812","Timeout problem with Spring and Atomikos [SPR-14239]","**[Willian Constâncio da Silva](https://jira.spring.io/secure/ViewProfile.jspa?name=willianconsta)** opened **[SPR-14239](https://jira.spring.io/browse/SPR-14239?redirect=false)** and commented  When using Spring and Atomikos, the timeout of a transaction is propagated to the next transaction in the same thread. The problem occurs when the first transaction sets a timeout but the second one does not, leaving it as TransactionDefinition.TIMEOUT_DEFAULT. If the timeout of the second transaction is set to zero the problem goes away. Not sure if this is a Spring or a Atomikos bug. Attached project shows the problem.   ---  **Affects:** 4.2.5  **Attachments:** - [timeout_problem.zip](https://jira.spring.io/secure/attachment/23386/timeout_problem.zip) (_5.14 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1be544f8fa322ce11044763329712c49b1bf3a1f","closed","type: enhancement,","spring-projects-issues","2016-05-02T22:20:40Z","2016-05-06T13:55:30Z"
"","18120","@Async annotation interferes with generic bean qualifier behaviour introduced in SPR-9965 [SPR-13544]","**[Will Faithfull](https://jira.spring.io/secure/ViewProfile.jspa?name=wfaithfull)** opened **[SPR-13544](https://jira.spring.io/browse/SPR-13544?redirect=false)** and commented  I have a generic interface with a method marked `@Async`. This interface is implemented by an Abstract class (\), which provides the base functionality and defines some other abstract methods. This in turn, is extended by two concrete implementations, which each provide unique type parameters.  The framework should be able to distinguish these concrete implementations from one another, thanks to the work undertaken in **SPR-9965**, but it results in a `NoUniqueBeanDefinitionException`.  `org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type [me.faithfull.spring.interfaces.DomainRepository] is defined: expected single matching bean but found 2: chunkRepositoryImpl,projectRepositoryImpl`  If you remove the `@Async` annotation from the interface, the framework successfully qualifies the concrete implementations, and the exception is no longer thrown.  I have thrown together an example [on GitHub](https://github.com/wfaithfull/spring-async-type-erasure) to demonstrate.  My question is; is this intended behaviour, and if so, is there a workaround you can suggest? I would like the method in question to be asynchronous.   ---  **Affects:** 4.1.6  **Reference URL:** https://stackoverflow.com/questions/32980668/spring-4-not-automatically-qualifying-generic-types-on-autowire","closed","in: core,","spring-projects-issues","2015-10-07T00:20:37Z","2019-01-12T05:23:38Z"
"","18094","Unable to configure resource mapping in spring framework 4.2.1 release [SPR-13517]","**[Wang Ping](https://jira.spring.io/secure/ViewProfile.jspa?name=jboss42)** opened **[SPR-13517](https://jira.spring.io/browse/SPR-13517?redirect=false)** and commented  ---  **Affects:** 4.2.1  **Reference URL:** http://stackoverflow.com/questions/32688365/unable-to-configure-resource-mapping-in-spring-framework-4-2-1-release  **Issue Links:** - #18093 ResourceHttpRequestHandler fails with IllegalArgumentException: No matching constant for [0] (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2015-09-28T04:44:15Z","2019-01-12T16:46:00Z"
"","18093","ResourceHttpRequestHandler fails with IllegalArgumentException: No matching constant for [0] [SPR-13516]","**[Wang Ping](https://jira.spring.io/secure/ViewProfile.jspa?name=jboss42)** opened **[SPR-13516](https://jira.spring.io/browse/SPR-13516?redirect=false)** and commented  This exception happens in two cases.  1. If the response status is not yet set by the application, and the servlet container implementation has `0` as the default status 2. If a filter or application logic sets the response status to an illegal value  Also see [this SO thread](http://stackoverflow.com/questions/32612027/spring-4-web-java-lang-illegalargumentexception-no-matching-constant-for-0).  ---  **Affects:** 4.2.1  **Reference URL:** http://stackoverflow.com/questions/32688365/unable-to-configure-resource-mapping-in-spring-framework-4-2-1-release  **Issue Links:** - #18094 Unable to configure resource mapping in spring framework 4.2.1 release (_**""is duplicated by""**_)","closed","type: bug,","spring-projects-issues","2015-09-28T04:40:00Z","2019-01-11T17:27:41Z"
"","18464","Support Spring validator + JSR in one validator factory bean [SPR-13890]","**[Wallace Wadge](https://jira.spring.io/secure/ViewProfile.jspa?name=wwadge)** opened **[SPR-13890](https://jira.spring.io/browse/SPR-13890?redirect=false)** and commented  As per the SO post and unless I'm also missing something, out of the box we don't get both Spring Validator + JSR to co-exist. Can I suggest we add this (slightly amended) code:  ```java public abstract class AbstractValidator extends LocalValidatorFactoryBean implements ApplicationContextAware, ConstraintValidatorFactory {       private ApplicationContext applicationContext;      public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {         this.applicationContext = applicationContext;      }      @Override     public > T getInstance(Class key) {         Map beansByNames = applicationContext.getBeansOfType(key);         if (beansByNames.isEmpty()) {             try {                 return key.newInstance();             } catch (InstantiationException | IllegalAccessException e) {                 throw new RuntimeException(""Could not instantiate constraint validator class '"" + key.getName() + ""'"", e);             }         }         if (beansByNames.size() > 1) {             throw new RuntimeException(""Only one bean of type '"" + key.getName() + ""' is allowed in the application context"");         }         return beansByNames.values().iterator().next();     }      public boolean supports(Class c) {         return true;     }      @Override     public void validate(Object target, Errors errors) {         validate(target, errors, (Object[]) null);     }      public void validate(Object objectForm, Errors errors, Object... validationHints) {         super.validate(objectForm, errors, validationHints);         addExtraValidationWithHints(objectForm, errors, validationHints);         addExtraValidation(objectForm, errors);     }      protected abstract void addExtraValidationWithHints(Object objectForm, Errors errors, Object[] validationHints);      protected abstract void addExtraValidation(Object objectForm, Errors errors);      @Override     public void releaseInstance(ConstraintValidator instance) {      }      @Override     public ExecutableValidator forExecutables() {         return null;     }      @Override     public ParameterNameProvider getParameterNameProvider() {         return null;     } } ```    ---  **Affects:** 4.2.4  **Reference URL:** http://stackoverflow.com/questions/7080684/spring-validator-having-both-annotation-and-validator-implementation","closed","status: bulk-closed,","spring-projects-issues","2016-01-26T11:03:33Z","2019-01-12T02:44:09Z"
"","18633","Deadlock publishing events during parallel initialization [SPR-14061]","**[Vladimir Tsanev](https://jira.spring.io/secure/ViewProfile.jspa?name=tsachev)** opened **[SPR-14061](https://jira.spring.io/browse/SPR-14061?redirect=false)** and commented  I have an expensive initialization that is well suited for parallel execution. However sometimes when the workers do their work they can emit events. I want to be able in my init method to starts and wait for some tasks to complete. But if those tasks try to emit events (in another thread) a dead lock happens.  Dump  ``` ""ForkJoinPool.commonPool-worker-7"" #18 daemon prio=5 os_prio=0 tid=0x00007f13487a7800 nid=0x2a22 waiting for monitor entry [0x00007f13311aa000]    java.lang.Thread.State: BLOCKED (on object monitor) 	at org.springframework.context.event.AbstractApplicationEventMulticaster.getApplicationListeners(AbstractApplicationEventMulticaster.java:179) 	- waiting to lock <0x0000000770d039e8> (a java.util.concurrent.ConcurrentHashMap) 	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:125) 	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:381) 	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:335) 	at com.example.Worker.doWork(Worker.java:24) 	at com.example.Initializer.lambda$null$0(Initializer.java:27) 	at com.example.Initializer$$Lambda$3/2092801316.run(Unknown Source) 	at java.util.concurrent.CompletableFuture$AsyncRun.run(CompletableFuture.java:1626) 	at java.util.concurrent.CompletableFuture$AsyncRun.exec(CompletableFuture.java:1618) 	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289) 	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056) 	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692) 	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)  ""ForkJoinPool.commonPool-worker-6"" #17 daemon prio=5 os_prio=0 tid=0x00007f12d0001000 nid=0x2a21 waiting for monitor entry [0x00007f13312ab000]    java.lang.Thread.State: BLOCKED (on object monitor) 	at org.springframework.context.event.AbstractApplicationEventMulticaster.getApplicationListeners(AbstractApplicationEventMulticaster.java:179) 	- waiting to lock <0x0000000770d039e8> (a java.util.concurrent.ConcurrentHashMap) 	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:125) 	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:381) 	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:335) 	at com.example.Worker.doWork(Worker.java:24) 	at com.example.Initializer.lambda$null$0(Initializer.java:27) 	at com.example.Initializer$$Lambda$3/2092801316.run(Unknown Source) 	at java.util.concurrent.CompletableFuture$AsyncRun.run(CompletableFuture.java:1626) 	at java.util.concurrent.CompletableFuture$AsyncRun.exec(CompletableFuture.java:1618) 	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289) 	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056) 	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692) 	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)  ....  ""main"" #1 prio=5 os_prio=0 tid=0x00007f1348008000 nid=0x2a06 waiting on condition [0x00007f13511d1000]    java.lang.Thread.State: WAITING (parking) 	at sun.misc.Unsafe.park(Native Method) 	- parking to wait for  <0x000000076ebbf550> (a java.util.concurrent.CompletableFuture$Signaller) 	at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175) 	at java.util.concurrent.CompletableFuture$Signaller.block(CompletableFuture.java:1693) 	at java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3323) 	at java.util.concurrent.CompletableFuture.waitingGet(CompletableFuture.java:1729) 	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1895) 	at com.example.Initializer.init(Initializer.java:28) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:498) 	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleElement.invoke(InitDestroyAnnotationBeanPostProcessor.java:354) 	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMetadata.invokeInitMethods(InitDestroyAnnotationBeanPostProcessor.java:305) 	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeInitialization(InitDestroyAnnotationBeanPostProcessor.java:133) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) 	- locked <0x0000000770d039e8> (a java.util.concurrent.ConcurrentHashMap) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:538) 	- locked <0x0000000770c09110> (a java.lang.Object) 	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:766) 	at org.springframework.boot.SpringApplication.createAndRefreshContext(SpringApplication.java:361) 	at org.springframework.boot.SpringApplication.run(SpringApplication.java:307) ```    ---  **Affects:** 4.2.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/2b2d6898e0840433d3a71f202c3cd17ac668245b, https://github.com/spring-projects/spring-framework-issues/commit/dc7ab29ed613907dbb6b2a9469515902233e7e95","closed","status: bulk-closed,","spring-projects-issues","2016-03-16T16:27:42Z","2019-01-12T00:14:48Z"
"","18231","AbstractAutoProxyCreator.getCacheKey generate lots of String garbage [SPR-13655]","**[Vladimir Gordiychuk](https://jira.spring.io/secure/ViewProfile.jspa?name=gordiychuk)** opened **[SPR-13655](https://jira.spring.io/browse/SPR-13655?redirect=false)** and commented  Current implementation of getCacheKey uses string concatenation: https://github.com/spring-projects/spring-framework/blob/master/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator.java#L306-L308  This leads to two problems: 1) Excessive heap garbage due to throw-away string creation 2) Excessive CPU due to computing hash code for the newly created strings.  In our spring context present 1200+ beans and ~20 beanPostProcessors as result E2E spenario for 30 minute generate ~300GB char[] !spring_get_cachekey.png|thumbnail!  It our problem that legacy part of system use BeanFactory.getBean instead of inject dependency correctly. But problem described above also affect application start time because spring for inject dependency also do getBean by Class and as result spring for each class iterate by all beans in context and generate cache key like:  ``` protected Object getCacheKey(Class beanClass, String beanName) {      return beanClass.getName() + ""_"" + beanName; } ```  !spring_allocation_string_by_start.png|thumbnail!  !spring_hot_methods_by_start.png|thumbnail!  ---  **Affects:** 4.2.2  **Attachments:** - [spring_allocation_string_by_start.png](https://jira.spring.io/secure/attachment/23211/spring_allocation_string_by_start.png) (_85.23 kB_) - [spring_get_cachekey.png](https://jira.spring.io/secure/attachment/23212/spring_get_cachekey.png) (_127.79 kB_) - [spring_hot_methods_by_start.png](https://jira.spring.io/secure/attachment/23210/spring_hot_methods_by_start.png) (_46.60 kB_)  **Issue Links:** - #18226 `@EventListener` does not work if put it at method in class that implements interface  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7b711c4aac75e5ad32fd94102b4adcf79b5aa71f","closed","type: enhancement,","spring-projects-issues","2015-11-07T21:11:31Z","2019-01-13T05:34:31Z"
"","18584","Cache documentation wrongly states that Java does not support repeating annotations [SPR-14012]","**[Vitaliy Semochkin](https://jira.spring.io/secure/ViewProfile.jspa?name=yilativs)** opened **[SPR-14012](https://jira.spring.io/browse/SPR-14012?redirect=false)** and commented  The documentation section 35.3.4 `@Caching` annotation contains a misleading information. It says.  There are cases when multiple annotations of the same type, such as `@CacheEvict` or `@CachePut` need to be specified, for example because the condition or the key expression is different between different caches. Unfortunately Java does not support such declarations...  In fact java 8 supports ""repeating annotations"": https://docs.oracle.com/javase/tutorial/java/annotations/repeating.html  Since java7 is deprecated I suggest either write:Unfortunately Java below 8 does not support such declarations... or better add support of repeating annotations in Spring Cache!  Thanks for the great product guys!   ---  **Affects:** 4.1.7, 4.1.8, 4.1.9, 4.2 GA, 4.2.1, 4.2.2, 4.2.3, 4.2.4, 4.2.5  **Reference URL:** http://docs.spring.io/spring/docs/current/spring-framework-reference/html/cache.html  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2a9b2ca5fd9cb8309580ccc7df39217b0ebdadc4","closed","type: documentation,","spring-projects-issues","2016-03-03T06:47:08Z","2016-04-06T08:38:16Z"
"","18227","Possible bug in CacheConnectionFactory causing session to be created on every request [SPR-13651]","**[Vimal Jain](https://jira.spring.io/secure/ViewProfile.jspa?name=vkjk89)** opened **[SPR-13651](https://jira.spring.io/browse/SPR-13651?redirect=false)** and commented  Hi, I have an issue using Spring JMS which i have posted on StackOverflow ( http://stackoverflow.com/questions/33496882/spring-jms-listener-thread-died-on-an-exception) Since i could not get any help on web , i started reading Spring JMS code and i found a possible bug wherein CacheConnectionFactory does not maintain list of session created. Basically getSession(Connection con, Integer mode) method does not add newly created session ( proxy ->CachedSessionInvocationHandler )  into its list ( maintained per ack mode in Map> cachedSessions) and hence causing session creation on every invocation.  And this looks to me the cause of my issue ( i am not 100% sure though)   ---  **Affects:** 3.2.11","closed","status: bulk-closed,","spring-projects-issues","2015-11-06T13:15:01Z","2019-01-12T00:14:59Z"
"","18296","Doc: Flush in test with SessionFactory vs EntityManager [SPR-13723]","**[Viktor Kostov](https://jira.spring.io/secure/ViewProfile.jspa?name=$k8ter)** opened **[SPR-13723](https://jira.spring.io/browse/SPR-13723?redirect=false)** and commented  According to a documentation (http://docs.spring.io/spring/docs/current/spring-framework-reference/html/integration-testing.html#testcontext-tx-enabling-transactions), should be possible to flush current session to avoid false positive in a test. Not sure about root cause of the problem, but it seems that _sessionFactory.getCurrentSession().flush();_ creates new transaction, instead of using existing one.  Here is a small sample that demonstrates a problem: https://github.com/sk8ter/demo  Test should fail in an example of project above.  ---  **Affects:** 4.2.3  **Reference URL:** http://stackoverflow.com/questions/33905773/spring-boot-test-test-passes-but-should-not-false-positive  **Issue Links:** - #13671 Update Testing chapter regarding avoiding false positives with JPA (_**""duplicates""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/17df02d01e9d61dd34f4cc5648fa7686864cc1a1","closed","type: task,","spring-projects-issues","2015-11-25T12:58:57Z","2019-01-11T19:32:05Z"
"","18255","ScheduledTaskRegistrar's task list getters fail with NPE when no tasks set [SPR-13680]","**[Vikram Palakurthi](https://jira.spring.io/secure/ViewProfile.jspa?name=mrtinkz)** opened **[SPR-13680](https://jira.spring.io/browse/SPR-13680?redirect=false)** and commented  The ScheduledTaskRegistrar must be improved by adding few more helper methods.  1. hasTriggerTasks() 2. hasCronTasks() 3. hasFixedRateTasks() 4. hasFixedDelayTasks()  The reason I am adding these helper methods as I tried accessing one of the getTriggerTaskList(), getCronTaskList(), getFixedRateTaskList(), getFixedDelayTaskList() which try to return a Collections.unmodifiableList list which does not accept a list object that is not instantiated (null) and throws a null pointer exception in case of null. This left me no other way to do null checks. Adding the helper methods would provide me if I should/shouldn't  access it. There is already a helper method hasTasks but does not fit the solution to know if a specific TaskList is empty or null.  ---  **Affects:** 4.2.2  **Issue Links:** - #17345 Allowing access to scheduled tasks in the ScheduledTaskRegistrar  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6d5c646fafbb3b593211125991e4ee76b4e7a79b, https://github.com/spring-projects/spring-framework/commit/3cb926e01c227dc6a95a270957b3e3902363a2cd, https://github.com/spring-projects/spring-framework/commit/55d20557e078a00071873753779f8f669d9b4b79","closed","in: core,","spring-projects-issues","2015-11-12T21:24:42Z","2019-01-11T19:25:51Z"
"","18040","TaskExecutor [SPR-13460]","**[Vijayasarathi Maringanti](https://jira.spring.io/secure/ViewProfile.jspa?name=vijay140806)** opened **[SPR-13460](https://jira.spring.io/browse/SPR-13460?redirect=false)** and commented  Hi,  We are using spring 3.1.2 in combination with Quartz 2.2.0.  We are facing a serious issue with the the way TaskExecutor performs the execution of Threads. Below is the configuration of Task Executor. We have problems when the queue is full of 100 Tasks and the TaskExecutor does not process any of the Tasks/Threads. The application is working fine as long as the queue is not full with 100 tasks... as long as the queueCapacity is not reached to maximum, TaskExecutor Performs its job correctly, When it Reaches 100% it just can't process . This does not happen all the time. Any help in this regard is greatly appreciated.  Job1TaskExecutor(org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor){ corePoolSize = 7 //6 maxPoolSize = 8 //7 queueCapacity = 100 //**50** rejectedExecutionHandler = ref(""taskExecutorAbortRejectionPolicy"") //new java.util.concurrent.ThreadPoolExecutor.AbortPolicy() waitForTasksToCompleteOnShutdown = true }   ---  **Affects:** 3.1.2","closed","in: core,","spring-projects-issues","2015-09-10T16:13:12Z","2019-01-12T05:23:48Z"
"","18496","Multivalue @RequestParam empty array for single empty value [SPR-13924]","**[Victor Rachieru](https://jira.spring.io/secure/ViewProfile.jspa?name=vrachieru)** opened **[SPR-13924](https://jira.spring.io/browse/SPR-13924?redirect=false)** and commented  Hi guys,  I have a rest endpoint (spring-boot-1.3.0-RELEASE -> spring-core-4.2.3.RELEASE) which takes a multiple instance string parameter  ```java @RequestMapping(value = ""/test"", method = RequestMethod.GET) public ResponseEntity getTest(@RequestParam(value = ""testParam"", required = false) String[] testParamArray) {} ```  ``` /test?testParam=  => testParamArray has length 0 /test?testParam=&testParam=  => testParamArray has length 2 (two empty string items) ```  The thing is that when I use  ```java @RequestParam Map params ```  I can see the single instance of the param with no value.  I expected that for the first case to get a single empty sting element in the array but there are none.   ---  **Affects:** 4.2.3","closed","status: bulk-closed,","spring-projects-issues","2016-02-05T16:48:19Z","2019-01-12T02:43:52Z"
"","18247","""HttpURLConnection must not restrict method name"" isn't fixed for spring-web [SPR-13672]","**[Viacheslav Tradunskyi](https://jira.spring.io/secure/ViewProfile.jspa?name=viacheslav%20tradunskyi)** opened **[SPR-13672](https://jira.spring.io/browse/SPR-13672?redirect=false)** and commented  Can't use custom http methods with org.springframework.http.client.SimpleClientHttpRequestFactory: java.net.ProtocolException: Invalid HTTP method: PATCH  It causes because HttpURLConnection must not restrict method name (see Reference URL)  spring-web-4.2.1.RELEASE java 1.8  There are some workarounds, one of them: https://github.com/paypal/sdk-core-java/blob/v1.6.4/src/main/java/com/paypal/core/DefaultHttpConnection.java   ---  **Affects:** 4.2.2  **Reference URL:** https://bugs.openjdk.java.net/browse/JDK-7016595","closed","status: declined,","spring-projects-issues","2015-11-09T13:35:01Z","2019-01-12T16:22:42Z"
"","18670","Converting from static HTML to  PDF [SPR-14098]","**[venky](https://jira.spring.io/secure/ViewProfile.jspa?name=venky23)** opened **[SPR-14098](https://jira.spring.io/browse/SPR-14098?redirect=false)** and commented  I have dynamically constructed HTML in the form of InputStream, want to convert to pdf and render  as pdf if it is  called from browser.  In other words If I call an external service it will give me HTML content, that HTML content has base CSS URLS. I want to take that HTML and give it to some spring code which will render pdf to client.  is there any spring class provides this functionality if not can we develop in next versions.   ---  **Affects:** 4.2.3","closed","type: enhancement,","spring-projects-issues","2016-03-30T19:50:07Z","2018-12-17T22:23:41Z"
"","18671","Expose asynchronous message sending in WebSocketSession [SPR-14099]","**[Venkata Satya Teja Siram](https://jira.spring.io/secure/ViewProfile.jspa?name=teja.siram)** opened **[SPR-14099](https://jira.spring.io/browse/SPR-14099?redirect=false)** and commented  Is it possible to send async messages using spring websockets.. In javax websocket we can async messages using  Session.getAsyncRemote().sendText(String text) Session.getBasicRemote().sendText();  But is it possible to extract remote endpoint using spring websockets and send async messages without using stomp/sockJS?  The configuration and the use case can be found at  following url: http://stackoverflow.com/questions/36318483/extracting-remote-endpoint-object-from-spring-websocket-session  ---  **Affects:** 4.2.5  **Reference URL:** http://stackoverflow.com/questions/36318483/extracting-remote-endpoint-object-from-spring-websocket-session  **Issue Links:** - #19096 Reactive WebSocket adapter layer - #20086 Support nonblocking writing to Jetty Websocket with possibility to assign callback  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2016-03-31T12:48:33Z","2019-01-11T16:32:01Z"
"","18765","Add text/markdown to MediaType [SPR-14192]","**[Venil Noronha](https://jira.spring.io/secure/ViewProfile.jspa?name=venilnoronha)** opened **[SPR-14192](https://jira.spring.io/browse/SPR-14192?redirect=false)** and commented  I've added text/markdown entry to MediaType as per https://tools.ietf.org/html/rfc7763.  I've signed the ICLA. Please review and pull.  Thanks, Venil Noronha   ---  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/1041  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b2c9c8abcf4d94aecb94228790168b7cd36850a0","closed","type: enhancement,","spring-projects-issues","2016-04-19T16:00:16Z","2016-05-06T13:55:30Z"
"","18148","Make CharacterEncodingFilter more friendly for use in Servlet 3.0+ environments [SPR-13572]","**[Vedran Pavic](https://jira.spring.io/secure/ViewProfile.jspa?name=vpavic)** opened **[SPR-13572](https://jira.spring.io/browse/SPR-13572?redirect=false)** and commented  `CharacterEncodingFilter` could be improved to be for friendly for use in Servlet 3.0+ environments much like `DelegatingFilterProxy` was as a part of #12328.  ---  **Affects:** 3.2.14, 4.1.7, 4.2.1  **Issue Links:** - #12328 Support configuring Servlet container in Spring using Servlet 3.0 programmatic config  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/64a8dfbd12b1e8d60cf8b282de5cdbb912dcb051","closed","type: enhancement,","spring-projects-issues","2015-10-14T18:49:26Z","2019-01-11T17:38:15Z"
"","18339","Fix Javadoc for Jackson2ObjectMapperFactoryBean [SPR-13765]","**[umesha balasubramaniam](https://jira.spring.io/secure/ViewProfile.jspa?name=umeshajb)** opened **[SPR-13765](https://jira.spring.io/browse/SPR-13765?redirect=false)** and commented  The javadoc for Jackson2ObjectMapperFactoryBean has an error when it describes the how to set the featuresEnabled property. The documentation incorrectly describes using the $ syntax to refer to the enum value:  ```    ```  It should use the dot syntax:  ```    ```    ---  **Affects:** 3.2.15, 4.1.8, 4.2.3  **Reference URL:** http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/converter/json/Jackson2ObjectMapperFactoryBean.html#setFeaturesToEnable-java.lang.Object...-  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/242acda970d12858f5cbfcf0522742b2edf5e992, https://github.com/spring-projects/spring-framework/commit/1585a822d6ece5c773671745d631afe7e3d9ec35, https://github.com/spring-projects/spring-framework/commit/f7031dfb104c70f5d9a983e0d19784894236b464  **Backported to:** [4.1.9](https://github.com/spring-projects/spring-framework/milestone/133?closed=1), [3.2.16](https://github.com/spring-projects/spring-framework/milestone/104?closed=1)","closed","type: task,","spring-projects-issues","2015-12-06T00:28:37Z","2015-12-17T09:05:31Z"
"","18600","Adding ability to read result sets row-by-row for MySql driver [SPR-14028]","**[Uladzimir Zhuraulevich](https://jira.spring.io/secure/ViewProfile.jspa?name=zhurlik)** opened **[SPR-14028](https://jira.spring.io/browse/SPR-14028?redirect=false)** and commented  In org.springframework.jdbc.core.JdbcTemplate:  > protected void applyStatementSettings(Statement stmt) throws SQLException { > int fetchSize = getFetchSize(); > if (fetchSize >= 0) { > stmt.setFetchSize(fetchSize); > } > int maxRows = getMaxRows(); > if (maxRows >= 0) { > stmt.setMaxRows(maxRows); > } > DataSourceUtils.applyTimeout(stmt, getDataSource(), getQueryTimeout()); > }  There is no ability to set streaming mode for fetching row-by-row. Look at ResultSet here http://dev.mysql.com/doc/connector-j/en/connector-j-reference-implementation-notes.html   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0b1639d9635d31adfb6e6280776decf5fc91ec9f","closed","type: enhancement,","spring-projects-issues","2016-03-08T20:44:05Z","2016-04-06T08:38:13Z"
"","18555","Regression: @ResponseBody with Map result returns JSON array twice in case of synchronizeOnSession=true [SPR-13983]","**[Toshimitsu Nakanishi](https://jira.spring.io/secure/ViewProfile.jspa?name=raystar)** opened **[SPR-13983](https://jira.spring.io/browse/SPR-13983?redirect=false)** and commented  ```java @RequestMapping(value = ""/json/"", produces = ""application/json"") @ResponseBody public Map test(WebRequest request) {     Map map = new LinkedHashMap<>();     map.put(""result"", Boolean.TRUE);     return map; } ```  built with spring 4.2.5, json result is returned 2 arrays. 4.2.4 is correct.  ---  **Affects:** 4.2.5  **Issue Links:** - #18572 Regression: RequestMappingHandlerAdapter with synchronizeOnSession=true calls invokeHandlerMethod twice (_**""duplicates""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/49c046667df1d56bc598b515897136d0bc916459","closed","in: web,","spring-projects-issues","2016-02-26T08:18:02Z","2019-01-12T16:45:48Z"
"","18144","@DateTimeFormat cannot accept Japanese Calendar (Wareki) [SPR-13568]","**[Toshiaki Maki](https://jira.spring.io/secure/ViewProfile.jspa?name=making)** opened **[SPR-13568](https://jira.spring.io/browse/SPR-13568?redirect=false)** and commented  `@DateTimeFormat` is really useful. However Japanese Calendar (Wareki) cannot be accepted because there is no way to specify `Locale` to parse explicitly.  With JDK 1.6, parsing Wareki is as follows:  ```java DateFormat format = new SimpleDateFormat(""GGGGyy.MM.dd"", new Locale(""ja"", ""JP"", ""JP"")); format.parse(""平成27.10.13""); // -> Tue Oct 13 00:00:00 JST 2015 ```  This format is so important in Japan especially in public sectors.  `org.springframework.format.datetime.DateFormatter#createDateFormat` looks taking `Locale` object. In my understanding, the locale to be used is decided by the HTTP request and not specified by the application. I would like to tell the locale by new attribute of `@DateTimeFormat`.  Supporting Date and Time API looks more difficult because the formatter needs `Chronology` like following:  ```java DateTimeFormatter.ofPattern(""GGGGyy.MM.dd"")                 .withChronology(JapaneseChronology.INSTANCE)                 .parse(""平成27.10.13""); // -> {},Japanese resolved to Japanese Heisei 27-10-13 ```  ---  **Affects:** 4.1.7, 4.2.1  **Issue Links:** - #18143 `@DateTimeFormat`'s JSR-310 formatter is not strict in case of pattern  4 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2015-10-13T11:23:15Z","2019-01-13T05:35:08Z"
"","18143","@DateTimeFormat's JSR-310 formatter is not strict in case of pattern [SPR-13567]","**[Toshiaki Maki](https://jira.spring.io/secure/ViewProfile.jspa?name=making)** opened **[SPR-13567](https://jira.spring.io/browse/SPR-13567?redirect=false)** and commented  `@DateTimeFormat`'s formatter is not strict in case of `pattern` attribute specified with JSR-310 Date&Time API on JDK 8.  For example, the following `Form#date` will be valid even though the requested value is `2015-02-29`. It will be regarded as `2015-02-28`!  ```java public class Form {   @DateTimeFormat(pattern = ""yyyy-MM-dd"")   private java.time.LocalDate date;   // ... } ```  In case of `java.util.Date` or `org.joda.time.LocalDate`, `2015-02-29` is invalid because it's checked by strict mode.  This is because `DateTimeFormatterFactory` produces `java.time.format.DateTimeFormatter` using `DateTimeFormatter#ofPattern`.  https://github.com/spring-projects/spring-framework/blob/master/spring-context/src/main/java/org/springframework/format/datetime/standard/DateTimeFormatterFactory.java#L176-L178  In this case, `java.time.format.ResolverStyle` is not `STRICT` but `SMART`.  On the other hand, when `iso` attribute is specified, `DateTimeFormatter.ISO_XXX` is used and this `java.time.format.ResolverStyle` is `STRICT`. So `@DateTimeFormat(iso = DateTimeFormatter.ISO_DATE)` works fine.  I think setting `ResolverStyle.STRICT` is good to keep consistency of this API like following:  ```java dateTimeFormatter = DateTimeFormatter.ofPattern(""yyyy-MM-dd"")         .withResolverStyle(ResolverStyle.STRICT); ```  This will be caused by the difference between Date&Time API and Joda-Time. The following sample represents this issue plainly.  ```java java.time.format.DateTimeFormatter dateTimeFormatter = DateTimeFormatter         .ofPattern(""yyyy-MM-dd""); System.out.println(dateTimeFormatter.parse(""2015-02-29"")); // valid  org.joda.time.format.DateTimeFormatter formatter = DateTimeFormat         .forPattern(""yyyy-MM-dd""); System.out.println(formatter.parseDateTime(""2015-02-29"")); // invalid ```  ---  **Affects:** 4.1.7, 4.2.1  **Issue Links:** - #18144 `@DateTimeFormat` cannot accept Japanese Calendar (Wareki) - #18775 `@RequestHeader` doesn't accept RFC-1123 for conversion to java.time.Instant  2 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2015-10-13T10:21:05Z","2019-01-13T05:35:09Z"
"","18666","FormTag's ""modelAttribute"" should consistently supersede ""commandName"" [SPR-14094]","**[Tomoyuki Ikeya](https://jira.spring.io/secure/ViewProfile.jspa?name=ikeyat)** opened **[SPR-14094](https://jira.spring.io/browse/SPR-14094?redirect=false)** and commented  In my understanding, `commandName` of `FormTag` is legacy attribute. Most modern applications may use `modelAttribute` instead of it. Now I could not see any description of `modelAttribute` at the reference. It's better to replace or add descriptions for `modelAttribute` at the reference to avoid confusion.   ---  **Affects:** 4.2.5  **Reference URL:** http://docs.spring.io/spring/docs/4.2.5.RELEASE/spring-framework-reference/htmlsingle/#view-simple-binding  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2dae4d8134d18095368a18d773693b936c4c1738","closed","in: core,","spring-projects-issues","2016-03-29T01:34:21Z","2016-04-06T08:38:10Z"
"","18484","AbstractXlsxView does not work on WebSphere Liberty Profile  [SPR-13910]","**[Tomoyuki Ikeya](https://jira.spring.io/secure/ViewProfile.jspa?name=ikeyat)** opened **[SPR-13910](https://jira.spring.io/browse/SPR-13910?redirect=false)** and commented  We tried `AbstractXlsxView` as following implementation with Websphere Liberty Profile 8.5.5.8. Then we got  `IOException (stream is closed)` at `AbstractXlsView#renderWorkbook()`. Of course, we confirmed the same implementation on Tomcat and it succeeded.  ```java @Component public class ExcelView extends AbstractXlsxView {     @Override     protected void buildExcelDocument(Map model,             Workbook workbook, HttpServletRequest request,             HttpServletResponse response) throws Exception {          Sheet sheet = workbook.createSheet(""sheet1"");         sheet.setFitToPage(true);          String filename = ""sample.xlsx"";         response.setCharacterEncoding(""UTF-8"");         response.setHeader(""Content-Disposition"", ""attachment;filename*=''"" + URLEncoder.encode(filename, ""UTF-8""));     } } ```  We got following stacktrace.  ``` [16/01/26 17:41:44:764 JST] 00000452 com.ibm.ws.webcontainer.util.ApplicationErrorUtils           E SRVE0777E: アプリケーション・クラス 'com.ibm.ws.http.channel.internal.outbound.HttpOutputStreamImpl.validate:196' によって例外がスローされました java.io.IOException: Stream is closed               at com.ibm.ws.http.channel.internal.outbound.HttpOutputStreamImpl.validate(HttpOutputStreamImpl.java:196)               at com.ibm.ws.http.channel.internal.outbound.HttpOutputStreamImpl.flush(HttpOutputStreamImpl.java:571)               at com.ibm.wsspi.http.ee7.HttpOutputStreamEE7.flush(HttpOutputStreamEE7.java:289)               at com.ibm.ws.webcontainer.osgi.response.WCOutputStream.flush(WCOutputStream.java:234)               at org.springframework.security.web.context.OnCommittedResponseWrapper$SaveContextServletOutputStream.flush(OnCommittedResponseWrapper.java:437)               at org.springframework.web.servlet.view.document.AbstractXlsView.renderWorkbook(AbstractXlsView.java:101)               at org.springframework.web.servlet.view.document.AbstractXlsView.renderMergedOutputModel(AbstractXlsView.java:74)               at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:303) ```  By our investigation, the cause may be that `AbstractXlsView` (super class of `AbstractXlsxView`) calls `outputStream#flush()` twice. If we prevent one of them as following extension to disable flush, we never see the stacktrace and can download an expected excel file.  In my opinion, it should be fixed to call once to support WebSphere Liberty Profile if there is no reason  to flush twice.  ```java     @Override     protected void renderWorkbook(Workbook workbook, HttpServletResponse response) throws IOException {         ServletOutputStream out = response.getOutputStream();         workbook.write(out);         //out.flush();          // Closeable only implemented as of POI 3.10         if (workbook instanceof Closeable) {             ((Closeable) workbook).close();         }     } ```    ---  **Affects:** 4.2.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/28e8af2e2ee28f73903691bbc79f785ff6c796a1, https://github.com/spring-projects/spring-framework/commit/e48315549eb14f1ce5f9f8e65e1263915818b97b","closed","type: bug,","spring-projects-issues","2016-02-03T08:52:57Z","2016-02-25T09:36:35Z"
"","18344","selector in @JmsListener does not work with JmsMessagingTemplate [SPR-13770]","**[Tomoyuki Ikeya](https://jira.spring.io/secure/ViewProfile.jspa?name=ikeyat)** opened **[SPR-13770](https://jira.spring.io/browse/SPR-13770?redirect=false)** and commented  `selector` attribute in `@JmsListener` is expected to filter messages with some conditions. But it looks not to work when messages are sent with Spring `Message` via `JmsMessagingTemplate`. For example, for filtering received messages with priority, I wrote following code. It is expected to receive the message because the priority is larger than that set in `selector`, but I found it did not receive the message.  ```java         // producer         MessageHeaderAccessor accessor = new MessageHeaderAccessor();         accessor.setHeader(""jms_priority"", 5);         Message todoMessage = MessageBuilder                 .withPayload(todo)                 .setHeaders(accessor).build();                  jmsMessagingTemplate.convertAndSend(destinationName, todoMessage);          // consumer         @JmsListener(destination = ""queueForJmtRequest"", selector = ""jms_priority > 4"")         @SendTo(""queueForJmtResponse"")         public Message receive(Message message) throws InterruptedException {             System.out.println(""Received Message : "" + message);             return message;          } ```  If using `JmsTemplate` instead of `JmsMessagingTemplate`, it works correctly. Is this bug of `JmsMessagingTemplate` or `@JmsListener`?  I pushed repro project to spring-framework-issues repos.   ---  **Reference URL:** https://github.com/spring-projects/spring-framework-issues/tree/master/SPR-13770  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/2269dae38a514570046f38cf6094e5891333d008, https://github.com/spring-projects/spring-framework-issues/commit/b21f7415ed46c8be78a7e88c134dcf528e5f7eea","closed","status: invalid,","spring-projects-issues","2015-12-07T09:32:14Z","2019-01-12T05:23:20Z"
"","18343","MessagingMessageListenerAdapter provides a BytesMessage that has already been read [SPR-13769]","**[Tomoyuki Ikeya](https://jira.spring.io/secure/ViewProfile.jspa?name=ikeyat)** opened **[SPR-13769](https://jira.spring.io/browse/SPR-13769?redirect=false)** and commented  `@JmsListener` does not work correctly when using `ByteMessage`. I tried it with ActiveMQ Artimes and got a following result.  * When receiving `ByteMessage`, the method annotated was called. * But I got empty bytes through `ByteMessage.readBytes()`. * I got correct result when using `TextMessage`, of course.  I will request a reproducing code in github.  ---  **Affects:** 4.1.8, 4.2.3  **Reference URL:** https://github.com/spring-projects/spring-framework-issues/tree/master/SPR-13769  **Issue Links:** - #18351 Lazy GenericMessage payload extraction for JMS endpoints  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8346eeda276907aaac0dc9393f1e5558b2ace021, https://github.com/spring-projects/spring-framework/commit/e4faaa3786876ad25d9eeae31b9db3d0afdbecf4  **Backported to:** [4.1.9](https://github.com/spring-projects/spring-framework/milestone/133?closed=1)  0 votes, 5 watchers","closed","type: bug,","spring-projects-issues","2015-12-07T01:38:00Z","2019-01-11T19:28:14Z"
"","18176","Clarify how to prevent overwriting Cache-Control when @SessionAttribute is used [SPR-13598]","**[Tomoyuki Ikeya](https://jira.spring.io/secure/ViewProfile.jspa?name=ikeyat)** opened **[SPR-13598](https://jira.spring.io/browse/SPR-13598?redirect=false)** and commented  #16413 and #7466 had many changes in Cache-Control headers. One of the changes is to deprecate to set useCacheControlHeader as false with a comment ""HTTP 1.1 cache-control header will be required, with the HTTP 1.0 headers disappearing"".  On the other hand, we perhaps would like to prevent overwriting Cache-Control header by Spring MVC when using Spring Security and its \ option. My proposal is that setUseCacheControlHeader() should not be deprecated, or should provide other option that prevent overwriting it by Spring MVC.  ---  **Affects:** 4.2 GA, 4.2.1, 4.2.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2b3ad218e579591396a50363f04c097d05be3a12  2 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2015-10-22T17:24:54Z","2019-01-11T17:37:37Z"
"","18696","Improve MimeTypeUtils to handle the case of only a delimiter passed [SPR-14124]","**[Tomoya Honjo](https://jira.spring.io/secure/ViewProfile.jspa?name=tmyjoe)** opened **[SPR-14124](https://jira.spring.io/browse/SPR-14124?redirect=false)** and commented  MimeTypeUtil#parseMimeType throws java.lang.ArrayIndexOutOfBoundsException  when only delimiter "";"" passed as the argument. Because in the method it parse the argument by StringUtils.tokenizeToStringArray(mimeType, "";""); but, it returns an empty array only passed the delimiter, so the exception is thrown by this next line  String fullType = parts[0].trim();  For such a case, there is the dedicated exception InvalidMimeTypeException which express passed mimetype string cannot be parsed, so it's better to throw the exception.   ---  **Affects:** 4.1.7  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/1016  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/50c11028d5816a6cc390f85167736fa412d1eb29  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2016-04-06T10:55:09Z","2016-05-06T13:55:29Z"
"","18115","Consider application/xml and text/xml MIME types to be compatible [SPR-13539]","**[Tomas Repel](https://jira.spring.io/secure/ViewProfile.jspa?name=trepel)** opened **[SPR-13539](https://jira.spring.io/browse/SPR-13539?redirect=false)** and commented  Short story: The application/xml and text/xml can be used interchangeably.  Please consider returning `true` if checking compatibility of these two MIME types in MimeType.isCompatibleWith method.  Long story: ContentNegotiatingViewResolver.getBestView method returns null if candidateViews contain view with content-type application/xml only and at the same time requestedMediaTypes contain text/xml only. I think I would be better to return application/xml view even for text/xml. Currently null value is returned because MimeType.isCompatibleWith metod returns false for these two MIME types.   ---  **Affects:** 4.2.1","closed","type: enhancement,","spring-projects-issues","2015-10-05T10:37:58Z","2015-12-28T16:21:44Z"
"","18661","Type annotations cause ArrayIndexOutOfBoundsException in ASM ClassReader [SPR-14089]","**[Tom van den Berge](https://jira.spring.io/secure/ViewProfile.jspa?name=tomvandenberge)** opened **[SPR-14089](https://jira.spring.io/browse/SPR-14089?redirect=false)** and commented  I'm getting an exception when starting up my Spring Boot application:  ```java java.lang.ArrayIndexOutOfBoundsException: 193 	at org.springframework.asm.ClassReader.readLabel(ClassReader.java:2185) 	at org.springframework.asm.ClassReader.readTypeAnnotations(ClassReader.java:1614) 	... ```  It seems that when my classes are inspected for annotations, ClassReader (Spring 4.2.5) chokes on one of my classes containing Java-8 type annotations. This is extremely unfortunate, because it means that I can't use Spring annotations in combination with type annotations.  I've attached a very small (maven) project that reproduces the problem. All you need to do is run ""mvn test"". The included unit test attempts to read the problematic class file using org.springframework.asm.ClassReader, and gives the same exception as above.  The class that can't be read is  ```java public class Problem implements Interface { 	public void serialize(String request) { 		Map values = new HashMap<>(); 		values.clear(); 	} } ```  The `@Nullable` type annotation is from org.eclipse.jdt.annotation 2.0.0. I've included the source code in the attached project.  And the interface:  ```java public interface Interface { 	void serialize(T request); } ```  Without the interface, the problem doesn't occur. Also the type parameter is essential to reproduce the problem. What is also surprising, is that when the class is not compiled by maven (javac), but by Eclipse, the problem does not occur.  It would be great to know if there is a workaround for this problem, e.g. compiler settings that can be included in the pom file.  ---  **Affects:** 4.2.5  **Attachments:** - [project.tar](https://jira.spring.io/secure/attachment/23355/project.tar) (_8.50 kB_)  **Issue Links:** - #21999 Type annotations and generic types causing ArrayIndexOutOfBoundsException","closed","in: core,","spring-projects-issues","2016-03-26T17:25:18Z","2019-01-11T14:40:33Z"
"","18398","Oracle 12c JDBC driver throws inconsistent exception from getParameterType (affecting setNull calls) [SPR-13825]","**[Tom Jahncke](https://jira.spring.io/secure/ViewProfile.jspa?name=tom.jahncke@gfs.com)** opened **[SPR-13825](https://jira.spring.io/browse/SPR-13825?redirect=false)** and commented  This relates to: #15726  Using the oracle driver (ojdbc7 version 12.1.0.2.0) I ran across the following issue (I opened a support case with Oracle on the root cause of the issue.  SR 3-11927085951)  Normally the Oracle driver works fine with following code:  ``` sqlTypeToUse = ps.getParameterMetaData().getParameterType(paramIndex); (from setNull in StatementCreatorUtils line 262)   ```  However, it is possible for a statement to cause Oracle to throw an exception than then all statements going forward no longer use the JDBC 3.0 features to resolve the sql data type for null values.  I understand why driversWithNoSupportForGetParameterType exists and how it helps performance.  However, since it is black or white once an exception is thrown the setNull never tries to use the JDBC 3.0 features again (until the app is restarted).  I can think of a few hackish ways to address this, but I am hoping you can come with a solid solution that is solid  (My hackish ideas are along the lines or allowing a driver name to be injected that doesn't get added to the global set of drivers not supported.)  FYI, just by having an insert statement with a qualified table name causes the following exception with the oracle JDBC driver.  (Without qualification no exception.):  ``` java.sql.SQLFeatureNotSupportedException: Unsupported feature 	at oracle.jdbc.driver.OracleParameterMetaData.checkValidIndex(OracleParameterMetaData.java:176) 	at oracle.jdbc.driver.OracleParameterMetaData.getParameterType(OracleParameterMetaData.java:327) 	at org.springframework.jdbc.core.StatementCreatorUtils.setNull(StatementCreatorUtils.java:262) ```  ---  **Affects:** 4.2.4  **Attachments:** - [Oralce-JDBC-Bug 22983939.pdf](https://jira.spring.io/secure/attachment/23517/Oralce-JDBC-Bug+22983939.pdf) (_186.38 kB_)  **Issue Links:** - #16013 PreparedStatement#getParameterMetaData() calls may trigger unwanted side effects - #17488 Regression in handling of String passed as Types.OTHER to JdbcTemplate - #15726 performancedrop due to repeated JDBC 3.0 getParameterType calls in setNull in StatementCreatorUtils - #16854 INSERT SELECT of large CLOB causes ORA-01461 on setString - #18688 Java boolean is not handled correctly when used with Oracle JDBC driver - #18764 Regression: Insert statement fails with inconsistent datatypes on Oracle 12c driver - #19143 Avoid repeated getParameterType calls for setNull with Oracle 12c driver - #19196 Protect against getParameterType cursor leak with Oracle 12c JDBC driver  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e48ec4fcd333a3f2149f8966b367e51322d9ff90, https://github.com/spring-projects/spring-framework/commit/e1bdf5577e94616786e07d6bcf7d424399dd2704  0 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2015-12-28T19:06:27Z","2019-01-14T04:40:47Z"
"","18233","ResourceHttpRequestHandler does not take into account mime types configured in WebMvcConfigurerAdapter [SPR-13658]","**[Tom Adam](https://jira.spring.io/secure/ViewProfile.jspa?name=atomcay1978)** opened **[SPR-13658](https://jira.spring.io/browse/SPR-13658?redirect=false)** and commented  getMediaType method in ResourceHttpRequestHandler does not take into account the media types registered by a WebMvcConfigurerAdapter instance's configureContentNegotiation method. The method only checks mime types registered in the servlet context of JAF. This way it is impossible to register special media types for static resources except for using web.xml.  ---  **Affects:** 4.1.8  **Issue Links:** - #18898 Content Type mapping falls back to text/html when serving static resources like yaml files - #18940 Regression: Static JS files served as 'application/octet-stream' instead of 'application/javascript' - #19146 When favorPathExtension is false ResourceHttpRequestHandler serves resources with different content type in 4.3 compared to 4.2","closed","type: enhancement,","spring-projects-issues","2015-11-09T12:24:09Z","2019-01-11T19:15:21Z"
"","18070","Potential double invocation of getMissingCache in AbstractCacheManager [SPR-13492]","**[Todd Lindner](https://jira.spring.io/secure/ViewProfile.jspa?name=tlindner)** opened **[SPR-13492](https://jira.spring.io/browse/SPR-13492?redirect=false)** and commented  AbstractCacheManager.getCache(String name) creates caches lazily on access.  If the same cache is requested in two different threads it is possible for getMissingCache(name) to be invoked twice.  Suggestion is to add a double-lock mechanism when lookupCache(name) returns null.  ---  **Affects:** 4.1.7  **Issue Links:** - #16143 Properly wrap runtime-registered caches with TransactionAwareCacheDecorator  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/75ea6f564c00c82ee61f225a749b29c7e4396fcb","closed","in: core,","spring-projects-issues","2015-09-23T12:36:09Z","2019-01-11T17:20:07Z"
"","18084","Modify creation of the ScheduledTaskRegistrar to be a Spring managed bean [SPR-13506]","**[Tobias Montagna-Hay](https://jira.spring.io/secure/ViewProfile.jspa?name=tobiasm)** opened **[SPR-13506](https://jira.spring.io/browse/SPR-13506?redirect=false)** and commented  Would it be possible to modify the creation of the ScheduledTaskRegistrar to be a Spring managed bean in the ScheduledAnnotationBeanProcessor?  The reason for this is so that tasks that have been scheduled using the `@Scheduled` annotation can also be inspected.  Access has previously been made available to tasks that have been scheduled using the task xml prefix. #17345  I have submitted a pull request here: https://github.com/spring-projects/spring-framework/pull/878  ---  **Affects:** 4.2.1  **Reference URL:** http://stackoverflow.com/questions/21791853/how-are-spring-taskscheduled-objects-represented-at-runtime/28753723#28753723  **Issue Links:** - #17345 Allowing access to scheduled tasks in the ScheduledTaskRegistrar  6 votes, 9 watchers","open","type: enhancement,","spring-projects-issues","2015-09-25T05:11:58Z","2019-01-11T17:28:17Z"
"","18549","TimerManagerTaskScheduler.TimerScheduledFuture.getDelay is inverted [SPR-13977]","**[Tobias Gruetzmacher](https://jira.spring.io/secure/ViewProfile.jspa?name=tgr)** opened **[SPR-13977](https://jira.spring.io/browse/SPR-13977?redirect=false)** and commented  The implementation of getDelay in TimerScheduledFuture in org.springframework.scheduling.commonj.TimerManagerTaskScheduler is inverted: It return negative values when the timer hasn't elapsed and positive values if it has. This violates the contract of the Delayed interface...   ---  **Affects:** 3.2.16, 4.2.4  **Reference URL:** https://github.com/spring-projects/spring-framework/blob/master/spring-context-support/src/main/java/org/springframework/scheduling/commonj/TimerManagerTaskScheduler.java#L136  **Backported to:** [3.2.17](https://github.com/spring-projects/spring-framework/milestone/105?closed=1)","closed","type: bug,","spring-projects-issues","2016-02-24T09:40:11Z","2016-04-06T08:38:09Z"
"","18299","Chained Annotated Exception Handling - @ExceptionHandler [SPR-13726]","**[Timothy Tong](https://jira.spring.io/secure/ViewProfile.jspa?name=tktong)** opened **[SPR-13726](https://jira.spring.io/browse/SPR-13726?redirect=false)** and commented  Occasionally in the process of resolving an exception, we may raise another exception. This new exception may be caused by a variety of reasons -- the resolution itself failed, the root cause was something entirely different, etc.  If we were to throw a new exception from an `@ExceptionHandler` method, the new exception would be swallowed immediately in `ExceptionHandlerExceptionResolver` and we can no longer service the new exception.  We're able to service newly thrown exceptions by implementing our own DispatcherServlet and surrounding the `super.processHandlerException()` with a try-catch.  However, it would be a useful if we could chain ExceptionHandlers whenever one decides to throw an exception. Example: The exception handler for ExceptionOne causes an error and throws an ExceptionTwo in the process. When this ExceptionTwo gets thrown, it will be caught by the second exception handler.  Example:  ```java @ExceptionHandler(ExceptionOne.class) public ModelAndView handleExceptionOne() {     if(somethingVeryBadHappens) {        // Throw this exception and let the following handler service it.         throw new ExceptionTwo(...);     } }  @ExceptionHandler(ExceptionTwo.class) public ModelAndView handleExceptionTwo() { } ```  Here's a simple recursive example of chaining it within `ExceptionHandlerExceptionResolver`. It most likely doesn't cover all cases, but it does allow the handlers to be chained.  ```java protected ModelAndView doResolveHandlerMethodException(...) {         try {             if (logger.isDebugEnabled()) {                 logger.debug(""Invoking @ExceptionHandler method: "" + exceptionHandlerMethod);             }             exceptionHandlerMethod.invokeAndHandle(webRequest, mavContainer, exception);         }         catch (Exception invocationEx) {             return doResolveHandlerMethodException(request, response, handlerMethod, invocationEx);         } } ```    --- No further details from [SPR-13726](https://jira.spring.io/browse/SPR-13726?redirect=false)","closed","type: enhancement,","spring-projects-issues","2015-11-25T23:56:50Z","2016-01-18T07:11:36Z"
"","18055","Spring AOP generates a proxy which implements a parent's interface [SPR-13476]","**[Timofey Asyrkin](https://jira.spring.io/secure/ViewProfile.jspa?name=tasyrkin)** opened **[SPR-13476](https://jira.spring.io/browse/SPR-13476?redirect=false)** and commented  _Given_: - an abstract `ParentClass` which implements an `Interface` - a Bean(`@Component`) `MyChildClass` which extends `ParentClass` - a Bean(`@Component`) `Client` which uses `MyChildClass` injected via `@Autowired` constructor - an Aspect which advises all the methods in the project  _When_: - a spring context starts  _Then_: - the context initialization fails with the following exception  ``` Exception in thread ""main"" org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'client'  defined in file [/Users/timofeya/openSource/spring-aop-problem/target/classes/springbug/Client.class]: Bean instantiation via constructor failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [springbug.Client]: Illegal arguments for constructor; nested exception is java.lang.IllegalArgumentException: argument type mismatch     at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:275)     at   org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)     at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:305)     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:301)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:196)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772)     at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:834)     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:537)     at org.springframework.context.support.ClassPathXmlApplicationContext.(ClassPathXmlApplicationContext.java:139)     at org.springframework.context.support.ClassPathXmlApplicationContext.(ClassPathXmlApplicationContext.java:83)     at Main.main(Main.java:8)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:497)     at com.intellij.rt.execution.application.AppMain.main(AppMain.java:140) Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [springbug.Client]: Illegal arguments for constructor; nested exception is java.lang.IllegalArgumentException: argument type mismatch     at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:158)     at  org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:122)     at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:267)     ... 19 more Caused by: java.lang.IllegalArgumentException: argument type mismatch     at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)     at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)     at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)     at java.lang.reflect.Constructor.newInstance(Constructor.java:422)     at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:147)     ... 21 more ```  Investigation: - After adding logging into BeanUtils.java it became clear, that the proxy implements parent's interface  ```   2015-09-21 09:46:55 DEBUG BeanUtils:136 - argument [springbug.MyChildClass@5e4c8041] has class [class com.sun.proxy.$Proxy8], implements interfaces: [interface springbug.Interface, interface org.springframework.aop.SpringProxy, interface org.springframework.aop.framework.Advised] ```    ---  **Affects:** 3.0.7, 3.1.4, 3.2.9, 4.2.1  **Reference URL:** https://github.com/tasyrkin/spring-aop-problem","closed","status: bulk-closed,","spring-projects-issues","2015-09-21T05:49:51Z","2019-01-12T00:15:34Z"
"","18202","UriTemplate parser fails on Regular Expressions with quantifiers [SPR-13624]","**[Thorsten Schoel](https://jira.spring.io/secure/ViewProfile.jspa?name=schoel_bis)** opened **[SPR-13624](https://jira.spring.io/browse/SPR-13624?redirect=false)** and commented  ``` UriTemplate allows for template variables to define a matching pattern. These patterns are regular expressions. UriTemplate's inner class Pattern makes use of a Regular Expression itself to identify variables in the template string. This Regular Expression (""\\{([^/]+?)\\}"") will match anything between a pair of curly brackets, where a pair is an opening bracket and the next closing bracket. The problem here is that no balancing is performed and thus template Regular Expressions containing a closing curly bracket will lead to wrong parsing. Examples are Regular Expressions containing literal brackets (\}) or certain quantifiers ({n}, {n,}, {,n}, or {n,m}), such as ""/path/{var:\\d{8}}"". ```  ---  **Affects:** 4.2.2  **Issue Links:** - #18205 UriTemplate should support regex matching with n times {n} pattern (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2015-10-30T09:54:01Z","2019-01-12T16:45:56Z"
"","18354","spring-web: Cannot create Cache-Control: no-store, no-cache with new CacheControl API [SPR-13780]","**[Thomas Tardy](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.tardy@gmail.com)** opened **[SPR-13780](https://jira.spring.io/browse/SPR-13780?redirect=false)** and commented  We are migrating a project from spring-web 4.1.8 to 4.2.3 and need to replace the deprecated code  ``` WebContentInterceptor interceptor = new WebContentInterceptor(); interceptor.setCacheSeconds(0); interceptor.setUseExpiresHeader(true); interceptor.setUseCacheControlHeader(true); interceptor.setUseCacheControlNoStore(true); ```  with the usage of the new `CacheControl` and `interceptor.setCacheControl(cacheControl)`.  But with the new API of `CacheControl`, you cannot use `noStore()` and `noCache()` together as these methods return a new `CacheControl` and aren't updating the existing ones.  As it is still required to set the `Cache-Control` header to `no-store, no-cache` to disable caching in different browsers, this should be possible.   ---  **Affects:** 4.2.3","closed","type: enhancement,","spring-projects-issues","2015-12-09T14:38:21Z","2016-02-04T09:15:43Z"
"","18087","Improve org.springframework.util.StopWatch [SPR-13509]","**[Thomas Escolan](https://jira.spring.io/secure/ViewProfile.jspa?name=tooms4444)** opened **[SPR-13509](https://jira.spring.io/browse/SPR-13509?redirect=false)** and commented  * The **currentTaskName** field is private (final) without a getter   The running task's name cannot be retrieved unless stop is called.   WORKAROUND  ```java StopWatch sw = new StopWatch(); try {      Field f = StopWatch.class.getDeclaredField(""currentTaskName"");      f.setAccessible(true);  // I'm a hacker!      String taskname = f.get(sw); } catch (NoSuchFieldException | IllegalAccessException e) {      throw new IllegalStateException(e); } ```  * The **start** method runs init actions AFTER storing timestamp   ILLUSTRATION  ```java public void start(String taskName) throws IllegalStateException {      if (this.running) {           throw new IllegalStateException(""Can't start StopWatch: it's already running"");      }      this.startTimeMillis = System.currentTimeMillis();  // to be done last...      this.running = true;      this.currentTaskName = taskName;      // ... there ; in order not to take inits above into account } ```    ---  **Affects:** 4.1.7  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a6a6aed17f3ef9e9f774f25c14c7e6e5bb5dd2f3","closed","type: enhancement,","spring-projects-issues","2015-09-25T12:29:52Z","2015-10-15T13:04:43Z"
"","18648","Mvc Interceptor exclude-mapping not working [SPR-14076]","**[Thierry Lévèque](https://jira.spring.io/secure/ViewProfile.jspa?name=tleveque)** opened **[SPR-14076](https://jira.spring.io/browse/SPR-14076?redirect=false)** and commented  Adding exclude-mapping in Interceptor configuration doesn't seems to work  Here is my config:  \  ```java                                                                                                                        ```  But any request to my server using any path are reaching my AuthInterceptor. Even the ones in the exclude-mapping. My only solution is to add an if condition in my interceptor to excludes some path in the request.   ---  **Affects:** 4.2.5","closed","status: invalid,","spring-projects-issues","2016-03-21T16:48:09Z","2019-01-12T05:23:01Z"
"","18591","Provide simple way to get all unmapped query parameters [SPR-14019]","**[Thibault Kruse](https://jira.spring.io/secure/ViewProfile.jspa?name=tkruse)** opened **[SPR-14019](https://jira.spring.io/browse/SPR-14019?redirect=false)** and commented  I believe it would be a beneficial feature of spring if application developers could easily perform handling of unmapped query parameters.  Currently, for a Controller like  ``` @RequestMapping(""/greeting"") public Greeting greeting(@RequestParam(value=""name"", defaultValue=""World"") String name) {     return new Greeting(counter.incrementAndGet(),                         String.format(template, name)); } ```  has no easy way to react to a typo in a call like .../greeting?nmae=John  What I would like to do in such cases is to ignore certain whitelisted unused query params, and warn in the response (or logfile) about all other params. In some cases I may want to return an error when the endpoint has been refactored to make sure all cleints having used a previously valid query param get an error when they continue using it.  It is possible to manually get all query params, and search for any which is not a RequestParam, but that's tedious and error prone.  While I have no strong feeling about how this should be implemented, as a developer I would love to be able to implement something like an Interceptor that gets called with all unmapped Query parameters, such that I can define in one place a consistent behavior over all endpoints in the system, yet override this for specific endpoints.  Also described in http://stackoverflow.com/questions/35744108   --- No further details from [SPR-14019](https://jira.spring.io/browse/SPR-14019?redirect=false)","closed","type: enhancement,","spring-projects-issues","2016-03-04T13:20:09Z","2016-03-09T13:52:37Z"
"","18559","Unique XML-specified constructor not accepted in case of unresolvable name [SPR-13987]","**[Thibault Kruse](https://jira.spring.io/secure/ViewProfile.jspa?name=tkruse)** opened **[SPR-13987](https://jira.spring.io/browse/SPR-13987?redirect=false)** and commented  To reproduce:  ```xml               ```  fails with:  ``` Related cause: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'myExecutor' defined in class path resource [applicationContext-test.xml]: Unsatisfied dependency expressed through constructor argument with index 0 of type [int]: Ambiguous constructor argument types - did you specify the correct bean references as constructor arguments? ```  Class  ScheduledThreadPoolExecutor has only one 1-arg constructor: public ScheduledThreadPoolExecutor(int corePoolSize)  If not a bug, I would suggest improving the error message and the documentation in spring-beans.xsd.  Also see one of the comments here from 2013: http://stackoverflow.com/questions/17387544/unsatisfied-dependency-expressed-through-constructor-argument-with-index-0-of-ty  ---  **Affects:** 4.2.4  **Issue Links:** - #18875 BeanCreationException for factory-method-created bean (_**""is duplicated by""**_) - #18540 Improve core container exception meta-data - #18557 Consistent resolution of factory method exceptions","closed","type: enhancement,","spring-projects-issues","2016-02-26T13:03:45Z","2019-01-11T19:03:00Z"
"","18264","javax.persistence.EntityListeners annotation generates 2 beans, one without autowired fields [SPR-13689]","**[Thibault Kruse](https://jira.spring.io/secure/ViewProfile.jspa?name=tkruse)** opened **[SPR-13689](https://jira.spring.io/browse/SPR-13689?redirect=false)** and commented  Hi, not sure if this a bug, or usage mistake.  I am using an EntityListeners to listen to the persist event. However the bean that is invoked on persist lacks autowired attributes. I also notice that on startup, two beans are being created (I would have expected only one).  To reproduce, clone the project at  ``` https://github.com/tkruse/com.byteslounge.spring.tx ```  compile, run  ``` mvn exec:java ```  Result:  ``` ... Creating Bean instance com.byteslounge.spring.tx.dao.impl.BeanEventListener@5f094251 Creating Bean instance com.byteslounge.spring.tx.dao.impl.BeanEventListener@4c9141c4 ... Caused by: java.lang.RuntimeException: Where is my repo? 	at com.byteslounge.spring.tx.dao.impl.BeanEventListener.create(BeanEventListener.java:22) ... ```  I notivce the other instance of the BeanEventListener has the autowired field injected as it should.  My current workaround is (sadly) to use a static field inside the BeanEventListener and an injection method that sets the static field, such that both instances of BeanEventListener share the same autowired attributes.  ---  **Affects:** 4.2.2  **Issue Links:** - #19669 Add support for SpringBeanAutowiringSupport in Spring MVC Test","closed","in: core,","spring-projects-issues","2015-11-14T23:10:13Z","2019-01-12T16:22:37Z"
"","18513","Support for Common Annotations 1.1's javax.annotation.Resource.lookup() [SPR-13941]","**[The Alchemist](https://jira.spring.io/secure/ViewProfile.jspa?name=the_alchemist)** opened **[SPR-13941](https://jira.spring.io/browse/SPR-13941?redirect=false)** and commented  It looks like `Resource.lookup()` is ignored.  Since `lookup()` is a ""standard"" location and `mappedName()` is platform-specific, perhaps support for `lookup()` would be preferable.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b79e8a5cbc39b186d19f4901c4f8df0c1af0f86a","closed","type: enhancement,","spring-projects-issues","2016-02-12T04:38:13Z","2016-04-06T08:38:13Z"
"","18760","@ManagedResource not discovered if at least one method is @Transactional, and no exception thrown [SPR-14189]","**[teo sarca](https://jira.spring.io/secure/ViewProfile.jspa?name=teo.sarca@gmail.com)** opened **[SPR-14189](https://jira.spring.io/browse/SPR-14189?redirect=false)** and commented  Consider following example  ```java @Service @ManagedResource(...) public void MyService {   @ManagedOperation(....)    public void myJmxMethod() { ... }    @Transactional   public void someOtherTransactionalMethod(); } ```  This managed resource will not be detected nor registered because in org.springframework.jmx.export.MBeanExporter.autodetect(AutodetectCallback), the call ""beanFactory.getType(beanName)"" returns ""Proxy"" class so ""callback.include(beanClass, beanName)"" will not detect it.  I find this issue critical because it's so easy to break a managed resource that was working just by annotating with `@Transactional` one of the methods, even if that method is not exposed.  ---  **Affects:** 4.2.5  **Issue Links:** - #6970 `@Transactional` annotation hodes `@ManagedResource`","open","type: enhancement,","spring-projects-issues","2016-04-19T10:21:43Z","2019-01-13T05:26:14Z"
"","18635","StaticResourceConfiguration not serving from given directory [SPR-14063]","**[teo sarca](https://jira.spring.io/secure/ViewProfile.jspa?name=teo.sarca@gmail.com)** opened **[SPR-14063](https://jira.spring.io/browse/SPR-14063?redirect=false)** and commented  Hi,  Consider following snippet:  ```java @Configuration public static class StaticResourceConfiguration extends WebMvcConfigurerAdapter { 	@Override 	public void addResourceHandlers(final ResourceHandlerRegistry registry) 	{ 		final String downloadPath = ""c:\download""; 		registry.addResourceHandler(""/download/**"").addResourceLocations(""file:"" + downloadsPath); 	} } ```  And consider that i have a file called 1.txt in c:\download. When I call http://localhost:8080/download/1.txt i got 404. Debugging in org.springframework.web.servlet.resource.PathResourceResolver.getResource(String, Resource) i found out that:  ```java Resource resource = location.createRelative(resourcePath); ```  it is translating ""c:\download"".createRelativePath(""1.txt"")  to ""c:\1.txt"" instead of ""c:\download\1.txt"".  The workaround to this issue is to append and File.separator to your initial path (e.g. c:\download\).  Thanks,  PS: because reaching outside of a given folder could also be a security issue, i've set the priority to Major, but pls decide.    ---  **Affects:** 4.2.4","closed","status: declined,","spring-projects-issues","2016-03-16T20:44:05Z","2019-01-12T16:22:14Z"
"","18614","Reject @ManagedResource a on class which is not public [SPR-14042]","**[teo sarca](https://jira.spring.io/secure/ViewProfile.jspa?name=teo.sarca@gmail.com)** opened **[SPR-14042](https://jira.spring.io/browse/SPR-14042?redirect=false)** and commented  Take following example:  ```java @ManagedResource /* package */ class MyService implements IMyService { @Override @ManagedOperation public void doTheShit() { /.... } } ```  From spring perspective, everything is fine... but when you will try to invoke that operation using JConsole or something else you will get an exception because sun.reflect.misc.Trampoline cannot access that class (because it's not public).  It would be very nice if spring would log a warning in this case.  ---  **Affects:** 4.2.4  **Issue Links:** - #15922 MBeanExporter should use annotations if `@ManagedResource` present, otherwise use defaults  **Referenced from:** commits https://github.com/spring-projects/spring-integration/commit/518df4f74b5a172f7c17126860cfcdcba301d76b","closed","type: enhancement,","spring-projects-issues","2016-03-11T14:35:39Z","2019-01-13T05:27:40Z"
"","18815","Is there a way to limit the Max Response Size when using RestTemplate? [SPR-14242]","**[Tenji Shen](https://jira.spring.io/secure/ViewProfile.jspa?name=tenji)** opened **[SPR-14242](https://jira.spring.io/browse/SPR-14242?redirect=false)** and commented  I'm now using RestTemplate, I'm wondering if there're any methods to limit response size. For example, when the response size is larger than 1M, then I will shutdown the connection.   --- No further details from [SPR-14242](https://jira.spring.io/browse/SPR-14242?redirect=false)","closed","type: enhancement,","spring-projects-issues","2016-05-04T01:46:33Z","2017-04-14T20:58:34Z"
"","18673","url param containing ? is not getting encoded by Rest Template  [SPR-14101]","**[Taranjit Singh](https://jira.spring.io/secure/ViewProfile.jspa?name=taransaini43)** opened **[SPR-14101](https://jira.spring.io/browse/SPR-14101?redirect=false)** and commented  Hi I have a get request url which I am trying to send via RestTemplate, like :  url?param1=a1¶m2=a2 and so no  one of the params in turn comprises a ""?"" (question mark)  So, I get 403 forbidden response as Spring's Rest Template does not encode it by substituting with %3F while all other values in the same param like space(%20) and equals to(%3D) are getting substituted.  It should encode ? present in the param value as well. If it cannot, what is the other way to resolve that.  If you could help as this is a bit urgent.  Thanks, Taran  ---  **Issue Links:** - #16275 UriTemplate does not escape semicolons in path segments","closed","type: enhancement,","spring-projects-issues","2016-03-31T13:39:11Z","2019-01-11T16:42:00Z"
"","18680","Auto-detect Kotlin Jackson module [SPR-14108]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-14108](https://jira.spring.io/browse/SPR-14108?redirect=false)** and commented  Since Kotlin 1.0 has been released, [jackson-module-kotlin](https://github.com/FasterXML/jackson-module-kotlin) now an official Jackson module, and Kotlin supported on [start.spring.io](https://start.spring.io/#!language=kotlin), that would be nice to automatically register `KotlinModule` if it is detected in the classpath.  Such support has been mentioned by [Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb) in this [Spring Boot issue](https://github.com/spring-projects/spring-boot/issues/5537).  I have a PR for that, and would like to discuss inclusion (or not) in our upcoming `4.3` release during our weekly meeting this afternoon.   ---  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/1024  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1f9a9cf404e452cf25fbe21931e0b35ef61dff1f","closed","type: enhancement,","spring-projects-issues","2016-04-04T06:51:48Z","2016-04-06T08:38:11Z"
"","18576","Fix order of arguments passed to assert in HeaderResultMatchers#string(String, String) [SPR-14004]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-14004](https://jira.spring.io/browse/SPR-14004?redirect=false)** and commented  We should flip `value` and `result.getResponse().getHeader(name)` [here](https://github.com/spring-projects/spring-framework/blob/master/spring-test/src/main/java/org/springframework/test/web/servlet/result/HeaderResultMatchers.java#L92) since current code produces misleading error messages (actual versus expected).   ---  **Affects:** 4.3 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b3abd3b80943e2904585d8774fe007761717d77c","closed","type: bug,","spring-projects-issues","2016-03-01T13:17:31Z","2016-04-06T08:38:11Z"
"","18249","CorsConfiguration#combine() should handle correctly * in ""other"" parameter [SPR-13674]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-13674](https://jira.spring.io/browse/SPR-13674?redirect=false)** and commented  As reported in this [blog post comment](https://spring.io/blog/2015/06/08/cors-support-in-spring-framework#comment-2293187418), `CorsConfiguration#combine()` only handles correctly `*` in the `source` parameter. It should do the same with the `other` parameter.   ---  **Affects:** 4.2.2  **Reference URL:** https://spring.io/blog/2015/06/08/cors-support-in-spring-framework#comment-2293187418  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/71e2d8e9dec60550201243d2b5a56a9d73525781","closed","type: bug,","spring-projects-issues","2015-11-12T09:18:53Z","2015-11-15T17:03:14Z"
"","18209","Allow specifying HTTP response Content-Type without losing default charset [SPR-13631]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-13631](https://jira.spring.io/browse/SPR-13631?redirect=false)** and commented  As discussed in #18178, `@RequestMapping` `""produces""` attribute is used for mapping purpose, but also to generate the response content type.  With converters like `MappingJackson2HttpMessageConverter` when the default `MediaType` also specify the charset to use, overriding this attribute with `""produces"" = MediaType.APPLICATION_JSON_VALUE` will change response encoding, even that not what most users are expecting (most of them just want to narrow the mapping without affecting the charset).  The goal of this issue is to find if there is a way to easily make it possible to override the mapping related to `produces` without ""reseting"" the charset used.  ---  **Affects:** 4.2.2  **Issue Links:** - #19387 StringHttpMessageConverter should use its default charset - #19280 Document why ""charset=UTF-8"" is specified for JSON and not for XML - #18178 Add MediaType.APPLICATION_JSON_UTF8 and improve documentation - #18910 FormHttpMessageConverter should use configured charset (by default UTF-8) for ""text-plain"" MIME part conversion as well  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c38542739734c15e84a28ecc5f575127f25d310a","closed","type: enhancement,","spring-projects-issues","2015-11-02T06:59:35Z","2019-01-11T19:17:15Z"
"","18146","JSON API support [SPR-13570]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-13570](https://jira.spring.io/browse/SPR-13570?redirect=false)** and commented  [JSON API](http://jsonapi.org/) is a specification for how a client should request that resources be fetched or modified, and how a server should respond to those requests. Clients built around JSON API are able to take advantage of its features around efficiently caching responses, sometimes eliminating network requests entirely.  [Eugen Baeldung blog post](http://www.baeldung.com/json-api-java-spring-web-app) give some interesting insights about how to build a prototype that integrates [Katharsis](http://katharsis.io/), an interesting Java implementation of JSON API that is also compliant with HATEOAS. Katharsis does not provide a native Spring integration yet.  JSON API support may be achieved by adding such support in Spring HATEOAS (if it makes sense), or providing Katharsis Spring integration.  Ultimately, the goal of this feature is to provide support for the [client-side Javascript JSON API libraries](http://jsonapi.org/implementations/), like the most advanced one [Ember Data](https://github.com/emberjs/data).  Any feedback appreciated.   ---  **Reference URL:** http://jsonapi.org/  **Issue Links:** - [DATAREST-689](https://jira.spring.io/browse/DATAREST-689) Support for JSON API  16 votes, 11 watchers","closed","has: votes-jira,","spring-projects-issues","2015-10-13T14:34:11Z","2015-10-22T09:26:15Z"
"","18086","Server-side JavaScript improvements [SPR-13508]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-13508](https://jira.spring.io/browse/SPR-13508?redirect=false)** and commented  Spring Framework 4.2.x introduced [a generic support for script based templating](https://speakerdeck.com/sdeleuze/isomorphic-templating-with-spring-boot-nashorn-and-react) suitable for any kind of script technology. The scope of this issue is to keep track of potential server-side javascript improvements.  ### Java to JSON object conversion  In the script template, the model object available on Javascript side is still a Java object. Most template engines requires to have a real JSON object instead of a `Map`, and a real JSON array instead of an `Iterable`. It should be useful to provide out of the box this functionality. A possible implementation is available [here](https://github.com/sdeleuze/spring-boot-sample-web-handlebars/blob/master/src/main/resources/static/render.js#L16).  ### JS logging on server-side  Similarly to [this Spring Boot proposed feature](https://github.com/spring-projects/spring-boot/issues/3976), it should be possible to provide a `console.log()` interceptor that will forward client side logs to your Java log appender.  ### Load easily file content from filesystem or classpath  Very useful to make it possible to implement easily nested template support for example.  ### Script loader extension  Provide a JS extension for script loader like System.js/Require.js that loads lazily a Javascript dependency from the classpath (instead of an Ajax request) in order to improve maintainability of such app.  ### EmberJS 2/Angular 2/React support  More helpers/guidance for [Angular 2](https://github.com/angular/universal), [EmberJS 2](http://emberjs.com/blog/2014/12/22/inside-fastboot-the-road-to-server-side-rendering.html) or React universal/isomorphic applications.  ### Spring beans accessible on Javascript  Experiment about making Spring beans accessible from Javascript. [Wildfly support for similar functionality](http://wildfly.org/news/2015/08/10/Javascript-Support-In-Wildfly/) seems worth to have a look.  ---  **Issue Links:** - #16871 Support JavaScript Templating  12 votes, 19 watchers","closed","has: votes-jira,","spring-projects-issues","2015-09-25T12:02:04Z","2022-01-11T15:15:12Z"
"","18033","Expose view url to render function in ScriptTemplateView [SPR-13453]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-13453](https://jira.spring.io/browse/SPR-13453?redirect=false)** and commented  Currently we pass 2 arguments to the script render function: the template content, and the model. The purpose of this improvement is to add an optional 3rd argument, which is the template url. That may be very useful for some use cases (cache management on script side for example).  ---  **Issue Links:** - #19630 Support i18n and nested template loading in ScriptTemplateView render function  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f3b7e9ff2d42af7fd507ed817cc413f0a1523fe4","closed","type: enhancement,","spring-projects-issues","2015-09-09T12:15:49Z","2019-01-11T17:23:26Z"
"","18025","ScriptTemplateView should close the template InputStream [SPR-13445]","**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-13445](https://jira.spring.io/browse/SPR-13445?redirect=false)** and commented  Running some benchmarks on [spring-boot-sample-web-handlebars](https://github.com/sdeleuze/spring-boot-sample-web-handlebars) demo application then running `lsof` command line tool shows a lot of template files opened.  [`ScriptTemplateView#getTemplate()`](https://github.com/spring-projects/spring-framework/blob/master/spring-webmvc/src/main/java/org/springframework/web/servlet/view/script/ScriptTemplateView.java#L344) should close the template `InputStream` properly, since according to its Javadoc, [`StreamUtils#copyToString`](http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/StreamUtils.html#copyToString-java.io.InputStream-java.nio.charset.Charset-) leaves the stream open when done.   ---  **Affects:** 4.2.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ff02ad47e0d69e162b329a8e2e0ba0b78e45bc1f","closed","type: bug,","spring-projects-issues","2015-09-08T15:15:32Z","2015-10-15T13:04:43Z"
"","18822","AsyncResult calls SuccessCallback when it should call FailureCallback  [SPR-14249]","**[Sven Zethelius](https://jira.spring.io/secure/ViewProfile.jspa?name=szetheli)** opened **[SPR-14249](https://jira.spring.io/browse/SPR-14249?redirect=false)** and commented  If the AsyncResult was created with AsyncResult.forExecutionException(Throwable), then you try to add callback with AsyncResult.addCallback(ListenableFutureCallback), onSuccess(null) is called instead of onFailure(throwable).  > `@Override` > public void addCallback(SuccessCallback successCallback, FailureCallback failureCallback) \{ > try { > // This needs to check if this.executionException != null here and call onFailure instead > successCallback.onSuccess(this.value); > } > catch (Throwable ex) { > failureCallback.onFailure(ex); > } > }  ---  **Affects:** 4.2.5  **Issue Links:** - #18358 ListenableFutureAdapter.addCallback may or may not propagate failures from a FailureCallback in the calling thread - #17668 AsyncResult implementation does not allow for throwing ExecutionException  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1b1aac9172e9e8849574675ae680f754a7475994, https://github.com/spring-projects/spring-framework/commit/5fc0d43852d22a488ce37e7dcdc1112ab2758933","closed","in: core,","spring-projects-issues","2016-05-04T22:28:36Z","2019-01-13T20:33:24Z"
"","18721","Combine @PathParam with @RequestBody [SPR-14149]","**[Suresh](https://jira.spring.io/secure/ViewProfile.jspa?name=srengasamy)** opened **[SPR-14149](https://jira.spring.io/browse/SPR-14149?redirect=false)** and commented  xpI am using spring boot as RESTFul service. I have a requirement to combine `@PathParam` value with `@RequestBody` POJO.  The reason is, I am using hibernate validator to validate the POJO. I can manually merge `@PathParam` values in Controller class but the hibernate validator is called before the merge happens.  *Example: I have a POJO as defined below.  ```java public Class User{   private String id;   private String name;   private String firstName; .... } ```  Resource class as defined below:  ```java @RestController @RequestMapping(value = ""user"") public Class UserResource{    @RequestMapping(value = ""{id}"", method = RequestMethod.PUT)   public String update(@PathVariable String id, @RequestBody @Validated(UpdateValidator.class) User user){     user.setId(id);// Have to avoid this.     service.update(user);   } } ```    --- No further details from [SPR-14149](https://jira.spring.io/browse/SPR-14149?redirect=false)","closed","type: enhancement,","spring-projects-issues","2016-04-12T07:07:41Z","2016-04-14T08:46:42Z"
"","18526","RestTemplate is returning LinkedHashMap for Generic Type [SPR-13953]","**[Suresh](https://jira.spring.io/secure/ViewProfile.jspa?name=srengasamy)** opened **[SPR-13953](https://jira.spring.io/browse/SPR-13953?redirect=false)** and commented  I am creating common method which will handle all http methods (GET, POST, PUT) using RestTemplate. The request and response of POJO is marked as generic. Everything is working except GET. GET call is returning LinkedHashMap instead of POJO.  Please take a look at the attached project (File: TestHelloController.java, Lines: 38, 41)   ---  **Affects:** 4.2.4  **Attachments:** - [springboot.zip](https://jira.spring.io/secure/attachment/23308/springboot.zip) (_12.06 kB_)","closed","status: declined,","spring-projects-issues","2016-02-17T07:16:51Z","2019-01-12T16:22:22Z"
"","18118","PathResourceTests.lastModified() fails on Linux [SPR-13542]","**[Suematsu Shinya](https://jira.spring.io/secure/ViewProfile.jspa?name=suematsu)** opened **[SPR-13542](https://jira.spring.io/browse/SPR-13542?redirect=false)** and commented  org.springframework.core.io.PathResourceTests.lastModified() failed on Linux. I use Red Hat Enterprise Linux 7.0 and ext4.  ``` java.lang.AssertionError: Expected: <1443699122000L>      but: was <1443699122561L>         at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20)         at org.junit.Assert.assertThat(Assert.java:956)         at org.junit.Assert.assertThat(Assert.java:923)         at org.springframework.core.io.PathResourceTests.lastModified(PathResour ceTests.java:226)         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)         at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl. java:62)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAcces sorImpl.java:43)         at java.lang.reflect.Method.invoke(Method.java:497)         at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(Framework Method.java:50) ```  In my environment, java.io.File.lastModified() returns a value truncated by seconds. But PathResource.lastModified() returns a msec value.   ---  **Affects:** 4.1.7, 4.2.1  **Attachments:** - [PathResourceTests.diff](https://jira.spring.io/secure/attachment/23146/PathResourceTests.diff) (_1003 bytes_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/be90f7ddd496d16bdf09840b3010c3889d441cc6, https://github.com/spring-projects/spring-framework/commit/9cf28950e53f24620eb2e8e103f4a98ad34c4c61  **Backported to:** [4.1.8](https://github.com/spring-projects/spring-framework/milestone/132?closed=1)","closed","in: core,","spring-projects-issues","2015-10-06T02:57:06Z","2015-10-15T10:11:25Z"
"","18816","Review SpeL relational operators documentation [SPR-14243]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-14243](https://jira.spring.io/browse/SPR-14243?redirect=false)** and commented  http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/html/expressions.html#expressions-operators has the following expression  ``` boolean falseValue = parser.parseExpression(         ""'xyz' instanceof T(int)"").getValue(Boolean.class); ```  It does not seem to work, maybe `Integer` should have been used?  ---  **Issue Links:** - #18823 SpEL Compiler: problems using primitives with instanceof operator","closed","type: task,","spring-projects-issues","2016-05-04T13:26:52Z","2019-01-11T17:05:32Z"
"","18685","Reject @EventListener asynchronous method that have a return type [SPR-14113]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-14113](https://jira.spring.io/browse/SPR-14113?redirect=false)** and commented  See https://spring.io/blog/2015/02/11/better-application-events-in-spring-framework-4-2#comment-2605353079  The underlying infrastructure does not get the reply of the method since it is asynchronous so even though the method replies something ultimately, we can send the reply). I guess one way would be to wrap the actual method invocation in its own async processor of some kind.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bee1b77af59a7a23e364510764a74aa3593144f9","closed","type: enhancement,","spring-projects-issues","2016-04-04T14:48:59Z","2016-05-06T11:41:28Z"
"","18601","Wrong ResolvableType for Event not extending from ApplicationEvent [SPR-14029]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-14029](https://jira.spring.io/browse/SPR-14029?redirect=false)** and commented  If an event pojo implements `ResolvableTypeProvider`, the event type is not computed properly. This is supposed to be tested so something must be wrong with the tests.   ---  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/994","closed","in: core,","spring-projects-issues","2016-03-09T10:04:50Z","2016-04-06T08:38:09Z"
"","18540","Improve core container exception meta-data [SPR-13968]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-13968](https://jira.spring.io/browse/SPR-13968?redirect=false)** and commented  [Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson) submitted two PRs to improve the meta-data of the core container exception. We should review those and further improve it if necessary. The PRs are [#969](https://github.com/spring-projects/spring-framework/pull/969) and [#965](https://github.com/spring-projects/spring-framework/pull/965)  ---  **Affects:** 4.2.4  **Issue Links:** - #19047 Mis-proxying of Mockito mock and poor diagnostics for type mismatch on proxy injection - #19363 Documentation for InjectionPoint argument on `@Bean` method - #18559 Unique XML-specified constructor not accepted in case of unresolvable name - #18738 Improve failure metadata that is available from BeanInstantiationException  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b6f69492a3849fe4173f6fc9213188254df3fc25, https://github.com/spring-projects/spring-framework/commit/b6dd8a923365f021af636705e652a725e1cf0ebe","closed","type: enhancement,","spring-projects-issues","2016-02-22T16:53:48Z","2019-01-13T05:28:13Z"
"","18539","@Lazy with @Autowired(required=false) throws NullPointerException on invocation [SPR-13967]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-13967](https://jira.spring.io/browse/SPR-13967?redirect=false)** and commented  We have no idea if that it only happens in a configuration class but we're not able to use `@Lazy` on field injection.  Here is [a sample project that reproduces the issue](https://github.com/snicoll-scratches/test-lazy-autowired)  ``` Caused by: java.lang.NullPointerException: null 	at $java.lang.Object$$FastClassBySpringCGLIB$$3f697993.invoke() 	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204) 	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:651) 	at com.example.MyService$$EnhancerBySpringCGLIB$$e98fc097.toString() 	at com.example.MyConfiguration.bean(MyConfiguration.java:22) 	at com.example.MyConfiguration$$EnhancerBySpringCGLIB$$254821ba.CGLIB$bean$0() 	at com.example.MyConfiguration$$EnhancerBySpringCGLIB$$254821ba$$FastClassBySpringCGLIB$$80b63605.invoke() 	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228) 	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:355) 	at com.example.MyConfiguration$$EnhancerBySpringCGLIB$$254821ba.bean() 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:497) 	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162) 	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:588) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1123) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1018) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1192) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014) 	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:813) 	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:741) 	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:185) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:538) 	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:768) 	at org.springframework.boot.SpringApplication.createAndRefreshContext(SpringApplication.java:362) 	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308) ```    ---  **Affects:** 4.2.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b9fe6d89dab2ae4d97c041fa6e8a9125ae47d889, https://github.com/spring-projects/spring-framework/commit/3f795e64c6d459a750ac60b6b4c667fb957070c8","closed","in: core,","spring-projects-issues","2016-02-22T16:50:56Z","2016-02-25T09:36:35Z"
"","18515","An ObjectFactory variant with lenient not-unique handling [SPR-13943]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-13943](https://jira.spring.io/browse/SPR-13943?redirect=false)** and commented  In Spring Boot it is very common to associate a bean to something if it is found in the context. If there is more than one instance but one is flagged as primary then we're  fine as  well. If there are more than one instance and the user did not mark a preference for one, then we don't know which one to use.  We would need a first class support of that use case, maybe  based on the `ObjectFactory`. Something that would return the candidate bean or `null` if none was found.  ---  **Issue Links:** - #19047 Mis-proxying of Mockito mock and poor diagnostics for type mismatch on proxy injection - #17723 Support dynamic bean lookup a la CDI's Instance type - #18529 ObjectFactory lacks method for getting bean with specified constructor arguments  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ed98393fb2a4196c5846ca25e3ded32f66e0533b, https://github.com/spring-projects/spring-framework/commit/343bb2f130ed6a58bc76d2ce93e622515b1bee0c","closed","type: enhancement,","spring-projects-issues","2016-02-12T14:47:59Z","2019-01-11T19:06:40Z"
"","18505","Support of Optional for data binding [SPR-13933]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-13933](https://jira.spring.io/browse/SPR-13933?redirect=false)** and commented  See https://github.com/spring-projects/spring-boot/issues/5110  ---  **Issue Links:** - #17741 Support for injecting optional properties into a Optional field  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/700ab2fc9894f72366c2bb0ba7ea4ea3760246cb","closed","type: enhancement,","spring-projects-issues","2016-02-09T10:19:26Z","2019-01-11T19:07:08Z"
"","18397","Animal Sniffer does not detect usage of Java 8 Function [SPR-13824]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-13824](https://jira.spring.io/browse/SPR-13824?redirect=false)** and commented  For some reason, Animal Sniffer is unable to detect that `Function` (introduced in Java 1.8) is used against a Java6 signature.  `CaffeineCache` makes such a use and this got left unnoticed until Brian saw it. No idea where that could come from.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7d0ebddebebe88644530c70b4ac04a42f40cc7ba","closed","type: task,","spring-projects-issues","2015-12-28T14:05:52Z","2016-01-18T10:35:24Z"
"","18387","EventListener condition SpEL cannot invoke bean methods [SPR-13814]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-13814](https://jira.spring.io/browse/SPR-13814?redirect=false)** and commented  Follow-up of #18385. The `condition` attribute of an `@EventListener` cannot use bean references.  ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d444ef48711799734ee3752e89d4a48d8ee43cef","closed","type: enhancement,","spring-projects-issues","2015-12-22T10:30:05Z","2019-01-11T18:32:36Z"
"","18385","Cacheable condition SpEL cannot invoke bean methods [SPR-13812]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-13812](https://jira.spring.io/browse/SPR-13812?redirect=false)** and commented  The `condition` attribute does not allow to use bean references. Assuming the following setup and a `securityChecker` bean with the requested method  ```java @Cacheable(cacheNames = ""myCache"", condition = ""@securityChecker.isSecured()"") ```  We get  ``` org.springframework.expression.spel.SpelEvaluationException: EL1057E:(pos 1): No bean resolver registered in the context to resolve access to bean 'securityChecker' 	at org.springframework.expression.spel.ast.BeanReference.getValueInternal(BeanReference.java:48) ~[spring-expression-4.2.4.RELEASE.jar:4.2.4.RELEASE] 	at org.springframework.expression.spel.ast.CompoundExpression.getValueRef(CompoundExpression.java:51) ~[spring-expression-4.2.4.RELEASE.jar:4.2.4.RELEASE] 	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:87) ~[spring-expression-4.2.4.RELEASE.jar:4.2.4.RELEASE] 	at org.springframework.expression.spel.ast.SpelNodeImpl.getTypedValue(SpelNodeImpl.java:131) ~[spring-expression-4.2.4.RELEASE.jar:4.2.4.RELEASE] 	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:299) ~[spring-expression-4.2.4.RELEASE.jar:4.2.4.RELEASE] 	at org.springframework.cache.interceptor.ExpressionEvaluator.condition(ExpressionEvaluator.java:119) ~[spring-context-4.2.4.RELEASE.jar:4.2.4.RELEASE] 	at org.springframework.cache.interceptor.CacheAspectSupport$CacheOperationContext.isConditionPassing(CacheAspectSupport.java:607) ~[spring-context-4.2.4.RELEASE.jar:4.2.4.RELEASE] 	at org.springframework.cache.interceptor.CacheAspectSupport.isConditionPassing(CacheAspectSupport.java:481) ~[spring-context-4.2.4.RELEASE.jar:4.2.4.RELEASE] 	at org.springframework.cache.interceptor.CacheAspectSupport.findCachedItem(CacheAspectSupport.java:433) ~[spring-context-4.2.4.RELEASE.jar:4.2.4.RELEASE] 	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:336) ~[spring-context-4.2.4.RELEASE.jar:4.2.4.RELEASE] 	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:302) ~[spring-context-4.2.4.RELEASE.jar:4.2.4.RELEASE] 	at org.springframework.cache.interceptor.CacheInterceptor.invoke(CacheInterceptor.java:61) ~[spring-context-4.2.4.RELEASE.jar:4.2.4.RELEASE] ```  ---  **Affects:** 4.2 GA  **Reference URL:** http://stackoverflow.com/questions/34366465/bypass-cacheable-for-unauthenticated-requests  **Issue Links:** - #14212 Using Spring beans as a part of key in cache annotations (`@Cacheable` etc.) doesn't work (_**""is duplicated by""**_)","closed","type: enhancement,","spring-projects-issues","2015-12-22T06:58:17Z","2019-01-13T05:32:29Z"
"","18383","Better synchronization in ConcurrentMapCache [SPR-13810]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-13810](https://jira.spring.io/browse/SPR-13810?redirect=false)** and commented  `ConcurrentMapCache` currently synchronizes the full store in case of an atomic get operation as it can't rely on `computeIfAbsent`. Since Spring 5 can uses Java8 directly, we can switch to that method instead.  ---  **Affects:** 4.3 RC1  **Issue Links:** - #13892 Provide means to configure multithreaded access for cache abstraction - #21076 Race condition in ConcurrentMapCache  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3096888c7d5bef95e652833bdde96f9505ff33c5","closed","type: enhancement,","spring-projects-issues","2015-12-21T12:48:23Z","2019-01-11T18:34:10Z"
"","18319","Cacheable#key should define the available arguments [SPR-13746]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-13746](https://jira.spring.io/browse/SPR-13746?redirect=false)** and commented  `Cacheable#key` has a very specific evaluation context that is documented in the developer guide but it wouldn't hurt to document it in the Javadoc as well.   ---  **Affects:** 4.1.8, 4.2.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f7492348ba5c4ac39005565f356d64b79026dd2d, https://github.com/spring-projects/spring-framework/commit/34b596c6bfe343251aca3c0b6d7e1f9b2b5807ca  **Backported to:** [4.1.9](https://github.com/spring-projects/spring-framework/milestone/133?closed=1)","closed","in: core,","spring-projects-issues","2015-12-01T10:50:55Z","2015-12-17T09:05:31Z"
"","18199","Performance regression on startup (in particular in AnnotationUtils) [SPR-13621]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-13621](https://jira.spring.io/browse/SPR-13621?redirect=false)** and commented  There is a major performance regression on annotations lookup in Spring Framework 4.2. We found out that a basic Spring Boot application was 10% slower between 1.2 and 1.3. We did some investigation and found out that a Spring boot 1.3 app based on 4.2 was also 10% slower  than the same app on 4.1  One of the major hotspot difference is `AnnotationUtils.findAnnotation`. On 4.1 its own time is 23 ms (232ms in total) while on 4.2 it is 1,936ms (5,340ms in total)  ---  **Affects:** 4.2.2  **Issue Links:** - #21208 Reduce ClassUtils.forName overhead (in particular for annotation introspection purposes) - #21271 Avoid repeated superclass introspection in AnnotationUtils.findAnnotation  1 votes, 10 watchers","closed","type: enhancement,","spring-projects-issues","2015-10-29T12:36:42Z","2019-01-11T19:18:01Z"
"","18196","Offer public API to add default collection converters [SPR-13618]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-13618](https://jira.spring.io/browse/SPR-13618?redirect=false)** and commented  The only way to add the default collection converters to a `ConverterRegistry` is to add _all_ default converters. A dedicated API is necessary to fix [A spring boot issue](https://github.com/spring-projects/spring-boot/issues/4322)   ---  **Affects:** 4.2.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0579e61a653ea81a3a5ef3dffd94fb5c4579028d","closed","type: enhancement,","spring-projects-issues","2015-10-28T14:38:51Z","2015-11-15T17:03:13Z"
"","18191","Fix hard reference URL in documentation [SPR-13613]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-13613](https://jira.spring.io/browse/SPR-13613?redirect=false)** and commented  While browsing the CORS support I noticed that the documentation has _hard_ link to javadoc entries (i.e. `http://docs.spring.io/spring/docs/4.2.x/`). We should not have such URL but rely on macros instead.  Spring Boot has such feature.   ---  **Affects:** 4.2.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9bed389d1f74a5dd992e9440f5e5b82c8d77542f","closed","type: task,","spring-projects-issues","2015-10-27T10:33:09Z","2015-11-15T17:03:13Z"
"","18050","Detect @Autowired constructors for configuration classes [SPR-13471]","**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-13471](https://jira.spring.io/browse/SPR-13471?redirect=false)** and commented  `@Configuration` classes must currently have a public  no-arg constructor (see javadoc) so we're relying on field/setter injection for (shared) collaborators. It would be nice if we would support constructor injection as well.  ---  **Issue Links:** - #16883 Make `@Autowired` optional on a single constructor of a class decorated with `@Component` - #18110 `@Autowired` setter injection an `@Configuration` class not working as documented - #19572 Spring should tolerate zero-argument constructors with javax.inject.Inject  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1fc3fc8bf7469169b6eed0bf7d03b263e005ad44, https://github.com/spring-projects/spring-framework/commit/967ef7376586322e2801dd22c36990eb3f9f95b0","closed","type: enhancement,","spring-projects-issues","2015-09-18T19:06:59Z","2019-01-13T05:35:33Z"
"","18373","Users logged in to multiple servers do not get messages in sessions on remote servers [SPR-13800]","**[Stuart Greenlees](https://jira.spring.io/secure/ViewProfile.jspa?name=stuartgreenlees@hotmail.com)** opened **[SPR-13800](https://jira.spring.io/browse/SPR-13800?redirect=false)** and commented  It looks like there may be an issue in the spring-messaging `MultiServerUserRegistry` class. We have a spring boot application (version 1.3) that uses websockets (spring-websocket 4.2.3 and spring-messaging 4.2.3) and runs in Pivotal Cloud Foundry scaled across a number of jvms. We are using a rabbitMQ backend stomp Broker. When our application is deployed a user may have multiple browser sessions which could potentially be distributed across multiple server instances using the same security Principal. When the application uses `convertAndSendToUser` to send a targeted message to the user we want that message to go to all browsers that the user has open. However what we are finding is that the websocket user from the server that is processing the message is overwriting the websocket user from other servers. This means that if the user has a websocket connection using the same security principal on two of the servers then the message will only be delivered to one browser.  Here is the code from `MultiServerUserRegistry` were the overwrite occurs:  ```java @Override public Set getUsers() {      Set result = new HashSet(this.localRegistry.getUsers());      for (UserRegistryDto registry : this.remoteRegistries.values()) {           result.addAll(registry.getUsers().values());      }      return result; } ```  The attached sample application https://github.com/stuartgreenlees/springboot-websocket-multiserver (based on the Spring Websocket getting started guide) demonstrates the issue. If you start 2 instances of the application and log into server A with the users ‘mike’ and ‘jim’ and create a websocket connection for both, then hitting the `/userssessions` endpoint on both servers will show that websocket users for both ‘mike’ and ‘jim’ are visible on both servers. If you then log into server ‘B’ as ‘mike’ then only the user belonging to mike on the current server is visible not both.  ---  **Affects:** 4.2.3  **Reference URL:** https://github.com/stuartgreenlees/springboot-websocket-multiserver  **Issue Links:** - #18874 Messages not delivered to all user sessions using distributed topic  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6aa216afb6600582a36451c26427faa8e8262132, https://github.com/spring-projects/spring-framework/commit/68f6cf9d3a2c9dace624fffc93473d91772df14e","closed","type: enhancement,","spring-projects-issues","2015-12-16T16:27:42Z","2019-01-11T18:34:42Z"
"","18651","PropertySource is nearly impossible to debug via rational thought [SPR-14079]","**[stu](https://jira.spring.io/secure/ViewProfile.jspa?name=stus)** opened **[SPR-14079](https://jira.spring.io/browse/SPR-14079?redirect=false)** and commented  Whenever I run into an issue with the PropertySource annotation, it's much harder to figure out what's going on then it should be.  All it's doing is reading a simple, delimited property file (with all the real parsing work done by existing java classes), and assigning the values to variables. It should be able to give nice, clean error messages about what's going wrong.  Instead, it dumps massive stack traces with often bizarrely misleading information. Like how:  ``` Exception in thread ""main"" org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'App': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: protected int org.app.thriftPort; nested exception is org.springframework.beans.TypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: ""${thrift.port}"" ```  means: ""No value found for thrift.port, please set thrift.port in your property file"" Or ""No property set found in: [X,Y,Z] places that I looked"" Or ""No magic bean QAZ found""  But instead of giving me a clear error as to what's going on, Spring just dumps, giant inscrutable exception traces - and even better, says things like ""can't parse ${thrift.port}"" that seems almost reasonable, but, are, in fact, just incredibly misleading.  wt[heck] is it trying to parse that value for? I mean I understand what happened to get to that error (Spring randomly dumps the annotation value into the real value when it can't find the real value, and then tries to parse it, for some insane reason), but seriously, if it can't read it in, why does it dump ${thrift.port} in there? It should just report that it can't find the value.  For a detailed case study:  So for my last trip down obfuscated error code lane, the odd thing is the value exists in the property file (confirmed by myself and others, just in case I'm repeatedly misreading something), and even though the class is prefixed with:  ``` @PropertySource( value = {""file:${X.properties}""} ) ```  And I start the program with:  ``` -DX.properties=/etc/service/some_property_file ```  AND if I change that flag, I get FileNotFound errors, or ""can't find X.properties"" errors which indicate that spring is, indeed, trying to read the property in, and assign it to that PropertySource. So it's reading the file in, assigning it to the PropertySource value, and then something fails when it tries to assign the properties to values.  Hmm... ok. So basically, some magic thing is failing, and there's no way to know what. Yay. Time to wave the magic wand and ask someone whose been through this before. So first they say ""maybe Spring can't parse property files with colons, it needs equals"", which, as crazy as it sounds (given that java already provides this functionality), it seems almost believable given - which means I've already tried that, and ruled it out.  So maybe, despite the whole point of Spring being that you can code with these declarative annotations, and it ""just figures out"" how to do it, maybe I actually need to write some imperative code like:  ``` @Bean public static PropertySourcesPlaceholderConfigurer placeholderConfigurer() {   return new PropertySourcesPlaceholderConfigurer(); } ```  Because from an error like  ``` ""Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: ""${thrift.port}"",  ```  it's _totally_ clear that I'm missing a bean. I mean, of course you need one, it's not like Spring could figure that, maybe, if you use PropertySource annotation, it might want to make a PropertySource bean available. And if it can't do that, maybe indicate that ""Can't find bean for PropertySource""?  Naw, why give clear errors, when you can just copy & paste boilerplate code?  So, problem solved. I'm missing some random boilerplate code. As indicated by mysterious, misleading errors buried in deep stack traces.  Now, obviously, I let a little internet snarkiness creep in here. But the overall point is, here is something that is a very basic, computer programming 101 task:  - validate your input, and give informative, clear errors to simple, common user mistakes. And, please, whatever you do, don't give purposely misleading error messages.  And, yet, spring turns this task into a trial by scorching fire. Now - ""Just don't use spring, then?"". Well, based on this experience, I wouldn't use it on any new components, but we're talking legacy here.  My cynical side would say that spring source will just dump this bug in the circular filing cabinet. That making it hard to debug boosts consulting fees.  But my hopeful side thinks... maybe spring source has some good engineers out there, trying to make a decent product, and they just just haven't gotten around to this simple task, with everything else in their backlog. And so I, in hope, file this bug.   --- No further details from [SPR-14079](https://jira.spring.io/browse/SPR-14079?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2016-03-22T20:10:55Z","2019-01-12T00:14:42Z"
"","18158","Allow SpEL projection operator to construct dynamic maps [SPR-13581]","**[Steven Sheehy](https://jira.spring.io/secure/ViewProfile.jspa?name=ssheehy)** opened **[SPR-13581](https://jira.spring.io/browse/SPR-13581?redirect=false)** and commented  I want to be able to construct maps using the projection operator. Currently it can only output a list. For example:  ```java Map personMap = (Map)parser.parseExpression(""people.![id, #this]""); ```  Here, if the projection contains a comma (or colon or ""->"" or whatever syntax makes sense) it denotes that a map should be constructed using the first parameter as the key and the second as the value. If more than one entry is found for any key, then it should throw an error unless the value type is a collection.  Ultimately, my real use case is I want to be able to autowire a map of beans with the keys being some unique method on the bean. Many, many times I manually construct such maps to determine which bean should process events of a certain type. Something along the lines of this would be amazing:  ```java @Value(""#{@EventProcessor.![type, #this]}"") private Map eventProcessors; ```    ---  **Affects:** 4.2.2","closed","status: bulk-closed,","spring-projects-issues","2015-10-16T21:24:23Z","2019-01-12T00:15:14Z"
"","18551","spring-test HtmlUnit does not recognize files for multipart uploading [SPR-13979]","**[Stephen Liang](https://jira.spring.io/secure/ViewProfile.jspa?name=stephenliang)** opened **[SPR-13979](https://jira.spring.io/browse/SPR-13979?redirect=false)** and commented  #### Overview  The params method in `HtmlUnitRequestBuilder` does not check if a parameter contains a File payload, which results in a File input box to get its value (the path to the file) and submit it as a key/value rather than the payload being uploaded as multipart form data.  #### For Reference  https://github.com/spring-projects/spring-framework/blob/master/spring-test/src/main/java/org/springframework/test/web/servlet/htmlunit/HtmlUnitRequestBuilder.java#L361  `webRequest.getRequestParameters()` is a `KeyDataPair` which contains a field called `fileObject_`. This field should be recognized and used in place of the `value_` field which is the name of the field, rather than the content of the file (when the parameter is has a file).  #### To Reproduce  1. Create a simple file upload form, e.g.:  ```html        ```  1. Create a html unit test that sends the file path to the ""file"" input type 2. Click on the submit button  **Expected Result**: The file contents are read and sent as form data **Actual Result**: The file's name is sent as a key/value pair   ---  **Affects:** 4.2 GA  0 votes, 5 watchers","closed","status: superseded,","spring-projects-issues","2016-02-24T19:31:31Z","2020-04-18T15:18:24Z"
"","18713","AntPathMatcher regression in 4.3 RC1 [SPR-14141]","**[Stephan Schroevers](https://jira.spring.io/secure/ViewProfile.jspa?name=stephan202)** opened **[SPR-14141](https://jira.spring.io/browse/SPR-14141?redirect=false)** and commented  The following test passes with version 4.2.5.RELEASE but fails with 4.3.0.RC1:  ```java @Test public void testPathMatcher() { 	PathMatcher matcher = new AntPathMatcher(); 	assertTrue(matcher.match(""https://example.com"", ""https://example.com"")); } ```  Cursory debugging indicates that the double slashes are problematic. The following test passes with both versions:  ```java @Test public void testPathMatcher() { 	PathMatcher matcher = new AntPathMatcher(); 	assertTrue(matcher.match(""https:/**/example.com"", ""https://example.com"")); } ```  This regression seems relevant because double slashes are common in patterns provided to the following methods: * `MockMvcResultMatchers#forwardedUrlPattern` * `MockMvcResultMatchers#redirectedUrlPattern`  I suspect this is related to #18487.  ---  **Affects:** 4.3 RC1  **Issue Links:** - #18487 Speed up AntPathMatcher by doing prefix-match  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/368f29d5bcd4e646ea03bae2b95715506fe22aaf","closed","in: core,","spring-projects-issues","2016-04-09T09:57:55Z","2019-01-11T16:38:17Z"
"","18675","@Configuration(prefix = ""aabb"") (or: how to create reusable configurations) [SPR-14103]","**[Stepan Koltsov](https://jira.spring.io/secure/ViewProfile.jspa?name=yozh)** opened **[SPR-14103](https://jira.spring.io/browse/SPR-14103?redirect=false)** and commented  Requesting a  ```java @Configuration(prefix = ""aabb-"") ```  attribute. When prefix is specified, it is prepended to names of all beans defined in that `@Configuration`.  Why is it important: to create reusable configurations. For example, one might have database connection component which comprises of: DataSource, DataSourceMonitoring, ThreadPool etc.  It could be written like this:  ```java abstract class DbContextTemplate {     abstract String dbHost();        @Bean DataSource dataSource() {         return new DataSourceImpl(dbHost);     }      @Bean DataSourceMonitoring dataSourceMonitoring() {         return new DataSourceMonitoring(dataSource());     }      ... ten more bean definitions }  @Configuration(prefix = ""primary-"") class PrimaryDbContext extends DbContextTemplate {     String dbHost() { return ""primary.host""; } }  @Configuration(prefix = ""another-"") class AnotherDbContext extends DbContextTemplate {     String dbHost() { return ""secondary""; } } ```  With ""prefix"" attribute these configurations emit beans with names ""primary-dataSource"", ""primary-dataSourceMonitoring"", ""another-dataSource"", ""another-dataSourceMonitoring"".  However, currently Spring has no anything like ""prefix"" attribute, so this configuration is not possible, since generated bean names for ""dataSource"" would be the same for both subclass configurations.  Generally, it is not currently possible in Spring to create reusable configurations (configurations which could be used more than once in the application context). It would be good to have it in large applications.  ---  **Affects:** 4.2.5  **Reference URL:** http://stackoverflow.com/questions/36298227/spring-how-to-reuse-the-same-configuration-multiple-times  **Issue Links:** - #18794 `@Configuration` interface with Java 8 default methods (as a standalone artifact)  4 votes, 5 watchers","open","type: enhancement,","spring-projects-issues","2016-03-31T19:36:14Z","2019-01-13T05:27:15Z"
"","18188","Improve performance of #getBeanNamesForType() while the BeanFactory configuration is not yet frozen [SPR-13610]","**[Steffen Ryll](https://jira.spring.io/secure/ViewProfile.jspa?name=sryll)** opened **[SPR-13610](https://jira.spring.io/browse/SPR-13610?redirect=false)** and commented  We have a pretty large ApplicationContext with about 7600 Beans and startup times have become an issue, now at 5.5 min just for the ApplicationContext. We observed that all the steps in `AbstractApplicationContext#refresh` before `#preInstantiateSingletons()` is called take about 90 seconds (excluding the time it takes to load all bean definition XML files). About 81 seconds of that time seems to be spent in the method `DefaultListableBeanFactory#getBeanNamesForType`.  In order to better understand where time is spent, we've build a wrapper around `DefaultListableBeanFactory` that measures the execution time of calls to `#createBean`, `#getBeanNamesForType` and `#applyBeanPostProcessors*Initialization`/`Instantiation`. This is the tooling we used to get the numbers mentioned above.  Closer inspection shows that runtime performance of `#getBeanNamesForType` depends heavily on the flag `#isConfigurationFrozen` - as long as it is set to `false` during AppCtx refresh, each call takes about 10 seconds, when it is set to `true`, calls typically take only ~100 ms.  A particular issue seems to me, that `#getBeanNamesForType` is called at least three times for the type `BeanDefinitionRegistryPostProcessor`, so that's more than 30 seconds in our scenario. I found that this has been implemented as part of #15258, and comments in the code of `PostProcessorRegistrationDelegate` indicate that calling it three times is ""by design"". But that seems like a waste of time to me, given that these calls take rather long.  Please let's discuss which optimizations would be feasible here within the boundaries of the involved interface contracts.  ---  **Affects:** 4.0.7, 4.2.1  **Issue Links:** - #16509 Spring-specific index file for component candidate classes - #15258 Allow BeanDefinitionRegistryPostProcessor to register other BeanDefinitionRegistryPostProcessors - #18305 Background initialization option for JPA EntityManagerFactory / Hibernate SessionFactory - #17677 Autowiring with `@Autowired`/`@Inject` get much slower than with `@Resource` as the number of classes increases - #22060 Efficient type matching support for large number of beans  4 votes, 10 watchers","open","type: enhancement,","spring-projects-issues","2015-10-26T11:45:11Z","2019-09-23T16:09:37Z"
"","18105","Results of EncodedResource#getEncoding and #getCharset should be equivalent [SPR-13528]","**[Steffen Ryll](https://jira.spring.io/secure/ViewProfile.jspa?name=sryll)** opened **[SPR-13528](https://jira.spring.io/browse/SPR-13528?redirect=false)** and commented  `EncodedResource` can either be constructed with a `Charset` or a `String` parameter to indicate how the resource is encoded. There's a private field for each type, and depending on the constructor invoked, one of the fields remains `null`. With the current implementation, this also means that one of the two getters will return `null`, while the caller has no chance to determine which field is set, except for calling both and decide what to use.  The current implementation of `JdbcTestUtils#executeScript` demonstrates why this is a problem:  ``` @Deprecated public static void executeSqlScript(JdbcTemplate jdbcTemplate, EncodedResource resource, boolean continueOnError) 		throws DataAccessException { 	new ResourceDatabasePopulator(continueOnError, false, resource.getEncoding(), resource.getResource()).execute(jdbcTemplate.getDataSource()); } ```  `resource.getEncoding()` returns `null` if it was constructed with a Charset instead of a String (encoding), and suddenly `ResourceDatabasePopulator` falls back to the default encoding.  I'd like to have only one field that gets mapped to and from the other type as neccessary, so that both getters give consistent results.  Suggestion (some code abbreviated):  ``` private final Charset charset;  public EncodedResource(Resource resource, String encoding) {    this.charset = Charset.forName(encoding); }  public String getEncoding() {    return charset.name(); } ```  There's one issue with the constructor, as it would now need to throw or handle `UnsupportedCharsetException`.   ---  **Affects:** 4.2.1","closed","status: bulk-closed,","spring-projects-issues","2015-10-02T14:59:26Z","2019-01-12T00:15:29Z"
"","18640","Inlined properties in @TestPropertySource do not override values from properties files in Spring Boot [SPR-14068]","**[Stefan Widerin](https://jira.spring.io/secure/ViewProfile.jspa?name=stevolebibo)** opened **[SPR-14068](https://jira.spring.io/browse/SPR-14068?redirect=false)** and commented  I think the described behavior for `@TestPropertySource` in the Javadoc doesn't match the actual behavior. I was expecting in this snippet...  ```java @TestPropertySource(         locations = ""classpath:test.properties"",         properties = ""key=certainValue"" ) ```  ... that `certainValue` would be used over every previously defined value for `key`, also overwriting a definition in `test.properties`, as the Javadoc says that inlined properties get highest precedence. But I never saw `certainValue` being used, for whatever reason.   ---  **Affects:** 4.2.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/43661ededbc1ad0070fe67ecab7a2a239822f19c","closed","status: declined,","spring-projects-issues","2016-03-18T09:35:42Z","2020-01-06T15:27:44Z"
"","18719","RestTemplate: Support default urlVariables at template level [SPR-14147]","**[Stefan Kühnel](https://jira.spring.io/secure/ViewProfile.jspa?name=stefan.kuehnel)** opened **[SPR-14147](https://jira.spring.io/browse/SPR-14147?redirect=false)** and commented  `[RestTemplate](https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java)` allows for urlVariables in URIs like  ``` https://{host}:{port}/v42/customers/{id} ```  The values for those urlVariables are provided at the moment the request is made.  The ""problem"" with this is that the lifetime/scope of the urlVariables is often different. In the above example, the scope for `host` and `port` is typically the lifetime of the `RestTemplate` while the scope of `id` is one request.  It would therefore be good to have the possibility to add the values for some urlVariables at the level of the `RestTemplate`. This could for example look like the following:  ```java public class Customers {     private String HOST_PARAM = ""host"";     private String PORT_PARAM = ""port"";     private String ID_PARAM = ""id"";     private String URI_TEMPLATE = ""https://{host}:{port}/v42/customers/{id}"";      @value(""${host:api.example.com"")     private String host;     @value(""${port:443"")     private int port;      private RestTemplate template = new RestTemplate();      public Customer()     {          // suggested new functionality          template.addVariable(HOST_PARAM, host);          template.addVariable(PORT_PARAM, port);     }      public Customer getCustomer(long id)     {         Map urlVariables = new HashMap<>();         urlVariables.add(ID_PARAM, id);   	Customer customer = template.getForObject(URI_TEMPLATE, Customer.class, urlVariables);          return customer;     } } ```  With #17627 there was a property `baseUrl` added to `DefaultUriTemplateHandler` which provides somewhat similar capabilities, but the above suggestion is more general and uniform.  ---  **Affects:** 4.2.5","closed","type: enhancement,","spring-projects-issues","2016-04-11T18:19:04Z","2019-01-11T16:38:32Z"
"","18706","Support limited subset of RFC 6570 syntax including operators """", ""?"", ""/"", ""#"" [SPR-14134]","**[Stefan Kühnel](https://jira.spring.io/secure/ViewProfile.jspa?name=stefan.kuehnel)** opened **[SPR-14134](https://jira.spring.io/browse/SPR-14134?redirect=false)** and commented  [org.springframework.web.util.UriTemplate](https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/web/util/UriTemplate.java) and [org.springframework.web.util.DefaultUriTemplateHandler](https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/web/util/DefaultUriTemplateHandler.java) (and RestTemplate as consequence) don't support the complete syntax of [RfC 6570](https://tools.ietf.org/html/rfc6570), but Spring HATEOAS has a version that does [org.springframework.hateoas.UriTemplate](https://github.com/spring-projects/spring-hateoas/blob/master/src/main/java/org/springframework/hateoas/UriTemplate.java). So the features should be merged into the ""standard"" template functionality.  ---  **Affects:** 4.2.5  **Issue Links:** - #15137 Support advanced URI Template Syntax (_**""duplicates""**_) - #17535 Support RFC 6570 style URI template encoding  1 votes, 2 watchers","open","type: enhancement,","spring-projects-issues","2016-04-08T08:27:27Z","2020-09-22T16:34:51Z"
"","18078","@PropertySource not overriding in order [SPR-13500]","**[sreekanth](https://jira.spring.io/secure/ViewProfile.jspa?name=sreekanth.nair@egovernments.org)** opened **[SPR-13500](https://jira.spring.io/browse/SPR-13500?redirect=false)** and commented  We are facing a similar issue just like reported in spring-boot https://github.com/spring-projects/spring-boot/issues/916  we have some annotation config like below  ``` @Configuration @PropertySource(value = {         ""classpath:application-config.properties"",         ""classpath:application-override.properties"",         ""classpath:application-${user.name}-override.properties"",         ""classpath:abc-config.properties""}, ignoreResourceNotFound = true) public class ApplicationConfig { ... ```  according to my understanding, values in abc-config.properties should have high precedence over the other 3 properties in order, but that's not happening.   ---  **Affects:** 4.2 GA","closed","in: core,","spring-projects-issues","2015-09-24T18:41:30Z","2020-10-19T08:36:20Z"
"","18266","Enable/Disable Spring CORS option [SPR-13691]","**[SPT Developer](https://jira.spring.io/secure/ViewProfile.jspa?name=hk)** opened **[SPR-13691](https://jira.spring.io/browse/SPR-13691?redirect=false)** and commented  I am using my original CORS interceptor and dispatching OPTIONS request for pre-flight.  ```java servlet.setDispatchOptionsRequest(true); ```  After upgraded Spring Boot to 1.3.0 RC1 with Spring 4.2.2, Spring CORS intercepted my original. In order to disable Spring CORS, I added CorsUtils in my classpath temporary.  ```java package org.springframework.web.cors;  import javax.servlet.http.HttpServletRequest;  /**  * CORS utility (Overriding)  */ public class CorsUtils { 	 	/** 	 * Returns {@code true} if the request is a valid CORS one. 	 */ 	public static boolean isCorsRequest(HttpServletRequest request) { 		// Disable Spring CORS by force. 		return false; 	} 	 	/** 	 * Returns {@code true} if the request is a valid CORS pre-flight one. 	 */ 	public static boolean isPreFlightRequest(HttpServletRequest request) { 		// Disable Spring CORS by force. 		return false; 	} } ```  To fix it permanently, please add option to swith on/off Spring CORS.  * https://github.com/spring-projects/spring-framework/blob/v4.2.2.RELEASE/spring-web/src/main/java/org/springframework/web/cors/DefaultCorsProcessor.java#L64  ```java if (!enableSpringCors || !CorsUtils.isCorsRequest(request)) { 	...... ```  * https://github.com/spring-projects/spring-framework/blob/v4.2.2.RELEASE/spring-web/src/main/java/org/springframework/web/filter/CorsFilter.java#L83 * https://github.com/spring-projects/spring-framework/blob/v4.2.2.RELEASE/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMapping.java#L365  ```java if (enableSpringCors && CorsUtils.isCorsRequest(request)) { 	...... ```  * https://github.com/spring-projects/spring-framework/blob/v4.2.2.RELEASE/spring-webmvc/src/main/java/org/springframework/web/servlet/FrameworkServlet.java#L907  ```java if (this.dispatchOptionsRequest || (enableSpringCors && CorsUtils.isPreFlightRequest(request))) { 	...... ```  * https://github.com/spring-projects/spring-framework/blob/v4.2.2.RELEASE/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java#L368 * https://github.com/spring-projects/spring-framework/blob/v4.2.2.RELEASE/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/RequestMappingInfo.java#L218  ```java if (enableSpringCors && CorsUtils.isPreFlightRequest(request)) { 	...... ```  ---  **Affects:** 4.2.2  **Issue Links:** - #18621 CORS support in 4.2 - default or configure to OFF (_**""is duplicated by""**_) - #18652 DefaultCorsProcessor's origin comparison is restrictive and inefficient - #22130 Enable/Disable CORS revisited  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2015-11-16T09:40:36Z","2019-01-11T19:24:50Z"
"","18618","RxJava Observable/Single and Reactor Flux/Mono as Spring MVC handler method return types [SPR-14046]","**[Spencer Gibb](https://jira.spring.io/secure/ViewProfile.jspa?name=spencergibb)** opened **[SPR-14046](https://jira.spring.io/browse/SPR-14046?redirect=false)** and commented  #### **UPDATE: This was resolved as ""Won't Fix"" in 4.x but has been fixed in 5.0 instead. See SPR-15365 for more details.**  Spring Cloud Netflix has generated interest in supporting return value types of `Observable` and `Single` from RxJava. Reactor Core support would make sense as well.  ---  **Affects:** 4.2.5  **Reference URL:** https://github.com/spring-cloud/spring-cloud-netflix/pull/778  **Issue Links:** - #16826 HTTP Streaming and Server-Sent Events (SSE) - #19929 Support for reactive types in return values from Spring MVC controllers  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/92dd4eb3ef42fe3952ae87e67150554427e795b8, https://github.com/spring-projects/spring-framework/commit/971ccab038ad8e549d515a80e2d64c5d4c80c86b  0 votes, 8 watchers","closed","type: enhancement,","spring-projects-issues","2016-03-11T21:34:22Z","2019-01-13T20:41:09Z"
"","18276","ApplicationContext.refresh blocked [SPR-13701]","**[soner sivri](https://jira.spring.io/secure/ViewProfile.jspa?name=sonersivri)** opened **[SPR-13701](https://jira.spring.io/browse/SPR-13701?redirect=false)** and commented  upgrade from 4.2.2 to 4.2.3 ApplicationContext.refresh method cannot be finished  code: applicationContext.register(MainConfig.class, EmoveIncomingConfig.class, EmoveConfig.class); AppLauncher.registerExtention(applicationContext); applicationContext.refresh(); // not finished applicationContext.registerShutdownHook();   ---  **Affects:** 4.2.3","closed","","spring-projects-issues","2015-11-19T08:02:55Z","2019-01-11T19:33:01Z"
"","18780","HttpSessionRequiredException should have a getter for 'expected session attribute' [SPR-14206]","**[Sola](https://jira.spring.io/secure/ViewProfile.jspa?name=sola)** opened **[SPR-14206](https://jira.spring.io/browse/SPR-14206?redirect=false)** and commented  HttpSessionRequiredException should have a getter for 'missing session attribute',It can bring more convince to exception handling.  ideal code snippet:  ```java @ExceptionHandler(HttpSessionRequiredException.class) ResponseEntity unauthorizedException(HttpSessionRequiredException e) { 	if(e.getAttributeName().equals(""username"")){ 		//do something else, 	} 	return //something } ```    ---  **Affects:** 4.2.5, 4.3 RC1  **Reference URL:** https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/web/HttpSessionRequiredException.java  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e5d52a96a7c3a80100b0239f4fd7165e1bbb7a06","closed","type: enhancement,","spring-projects-issues","2016-04-22T13:51:43Z","2016-05-06T13:55:29Z"
"","18394","Spring4 MVC Controller Pageable not working with page & size parameter [SPR-13821]","**[smallufo](https://jira.spring.io/secure/ViewProfile.jspa?name=smallufo)** opened **[SPR-13821](https://jira.spring.io/browse/SPR-13821?redirect=false)** and commented  It seems **page** and **size** parameters cannot pass to **Pageable** parameter .  Not sure if it is bug or not. See the SO link for complete code.   ---  **Affects:** 4.2.3  **Reference URL:** http://stackoverflow.com/q/34459658/298430","closed","status: invalid,","spring-projects-issues","2015-12-25T09:50:01Z","2019-01-12T05:23:18Z"
"","18342","Improve Redirect after POST (with validation errors) [SPR-13768]","**[smallufo](https://jira.spring.io/secure/ViewProfile.jspa?name=smallufo)** opened **[SPR-13768](https://jira.spring.io/browse/SPR-13768?redirect=false)** and commented  I think **Redirect after POST (with validation errors)** is a very common scenario in every web framework. But I find SpringMVC solves it in an especially cumbersome way.  Take the example in this link : http://stackoverflow.com/a/23749112/298430  Look how many ""register"" repeats in the code ( I count 5 ) , and it is String , not type safety. It is against the DRY pattern.  Is it possible to eliminate such cumbersome ?   ---  **Affects:** 4.2.3  **Reference URL:** http://stackoverflow.com/a/23749112/298430","closed","type: enhancement,","spring-projects-issues","2015-12-07T01:31:37Z","2015-12-08T17:37:15Z"
"","18157","@PreAuthorize Controller invalidates @Inject in @InitBinder ? [SPR-13580]","**[smallufo](https://jira.spring.io/secure/ViewProfile.jspa?name=smallufo)** opened **[SPR-13580](https://jira.spring.io/browse/SPR-13580?redirect=false)** and commented  In a simple controller :  ```java @PreAuthorize(""hasAuthority('USER')"") @Controller @RequestMapping(""/test"") public class TestController {    private Logger logger = LoggerFactory.getLogger(getClass());    @Inject   private MyValidator myValidator;    @InitBinder(""myObj"")   private void initBinder(WebDataBinder binder) {     logger.info(""myValidator = {}"", myValidator);     binder.initDirectFieldAccess();     binder.setValidator(myValidator);   }    @RequestMapping(value = ""/doPost"", method = RequestMethod.POST)   public String doPost(MyObj myObj , BindingResult br ) throws IOException {     logger.info(""myObj = {} , bindingResult = {}"" , myObj , br);     return ""redirect:/test/form"";   } }  ```  I noticed the injected validator is always null in the initBinder method , the logger is even null (and throws NPE) , this is weird.  If I totally remove the  `@InitBinder` initBinder() method , the myValidator is available (not null) again in each method.  After eliminating many factors , I found the culprit is the `@PreAuthorize`(""hasAuthority('USER')"") . After removing this `@PreAuthorize` , everything works fine.  Is it a bug ? I feel it seems like a bug ... Does something conflicts with SpringSecurity and SpringValidation and SpringMVC ?  environments :  ``` 4.2.1.RELEASE 1.3.0.M5 4.0.2.RELEASE ```  Thanks in advanced.   ---  **Affects:** 4.2.1  **Reference URL:** http://stackoverflow.com/questions/33174428/preauthorize-controller-invalidates-inject-in-initbinder  0 votes, 6 watchers","closed","status: bulk-closed,","spring-projects-issues","2015-10-16T15:57:30Z","2019-01-12T00:15:17Z"
"","18102","Not valid processing of 'Origin' http header [SPR-13525]","**[Slawomir Dabrowski](https://jira.spring.io/secure/ViewProfile.jspa?name=slav)** opened **[SPR-13525](https://jira.spring.io/browse/SPR-13525?redirect=false)** and commented  When 'Origin' HTTP's header value contains IP in version 6, method org.springframework.web.util.UriComponentsBuilder.fromOriginHeader throws exception.  Exception is throw during parsing such address.  My HTTP header : {'Origin' = 'http://[::1]:8080'}   ---  **Affects:** 4.2.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1c6febc45c78973a830412c062e53f2e3c14d22e","closed","type: bug,","spring-projects-issues","2015-10-01T06:58:46Z","2015-10-15T13:04:44Z"
"","18709","Spel not supported on spring annotation @Scheduled.fixedDelayString [SPR-14137]","**[Sidi Amine Bouhamidi](https://jira.spring.io/secure/ViewProfile.jspa?name=amgohan)** opened **[SPR-14137](https://jira.spring.io/browse/SPR-14137?redirect=false)** and commented  I want to configure the fixedDelay in seconds in my properties file, then I want to convert it to millis in `@Scheduled` Annotation.  I expected this to work :  ``` @Scheduled(fixedDelayString = ""#{${my.scheduler.fixed.delay} * 1000}"") ```  but it throw this exception  ``` Caused by: java.lang.IllegalStateException: Encountered invalid @Scheduled method 'myMethod': Invalid fixedDelayString value ""#{5 * 1000}"" - cannot parse into integer  at org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor.processScheduled(ScheduledAnnotationBeanPostProcessor.java:384) ~[spring-context-4.1.6.RELEASE.jar:4.1.6.RELEASE]  at org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor$1.doWith(ScheduledAnnotationBeanPostProcessor.java:227) ~[spring-context-4.1.6.RELEASE.jar:4.1.6.RELEASE] ```  ${my.scheduler.fixed.delay} was correctly resloved but the expression was not resloved.  I tried to configure my own StringValueResolver  ```     private static class CustomValueResolver         implements StringValueResolver {          private final ConfigurableBeanFactory beanFactory;          private final ExpressionParser expressionParser;          public CustomValueResolver(final ConfigurableBeanFactory beanFactory, final ExpressionParser expressionParser) {              this.beanFactory = beanFactory;             this.expressionParser = expressionParser;         }          @Override         public String resolveStringValue(             final String strVal) {              String value = this.beanFactory.resolveEmbeddedValue(strVal);             if (value.startsWith(""#{"")) {                 value = this.expressionParser.parseExpression(value).getValue(String.class);             }             return value;         }     } ```  But I don't find the way to inject my custom CustomValueResolver.  Am I on the right or wrong way? is there another simple way  ---  **Issue Links:** - #18203 Support SpEL next to placeholders in annotation attributes (e.g. `@Scheduled`) (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2016-04-08T16:05:47Z","2019-01-13T05:27:08Z"
"","18217","Mimic the application/x-www-form-urlencoded behaviour for post/put request for application/json content type [SPR-13640]","**[Shiv Veeram](https://jira.spring.io/secure/ViewProfile.jspa?name=shivaveeram)** opened **[SPR-13640](https://jira.spring.io/browse/SPR-13640?redirect=false)** and commented  Some of our Clients doesn't have support for application/x-www-form-urlencoded content type, can only do application/json content type for post/put operation with request body and request parameters. So I would like to mimic the similar behavior that spring provides with application/x-www-form-urlencoded content type.  Approach  Client can serialize all the values in to a map with json encoded values. So when the server receives this request, we can intercept this request and deserialize the input stream into a Map using json converter and make the values available as request parameters, the same way the spring does with HttpPutContentFilter.  Later, we can create a custom annotation in the controller and then define a argument resolver to resolve these json encoded values by using jackson converter to controller arguments.  This is the first thing that came to mind. Please advise if this is good approach to begin with. Any other ideas will help.    --- No further details from [SPR-13640](https://jira.spring.io/browse/SPR-13640?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2015-11-04T13:16:19Z","2019-01-12T00:15:03Z"
"","18195","AbstractJdbcCall's compiled variable should be declared as volatile [SPR-13617]","**[Shimi Bandiel](https://jira.spring.io/secure/ViewProfile.jspa?name=shimib77)** opened **[SPR-13617](https://jira.spring.io/browse/SPR-13617?redirect=false)** and commented  AbstractJdbcCall contains a Double-Checked Locking code over the **compiled** field. It should be declared **volatile** to avoid ordering issues that can result in race-condition scenarios.   ---  **Affects:** 3.2.15, 4.1.8, 4.2.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d42cc149db7f960575eff168d6ed6955000ef78f, https://github.com/spring-projects/spring-framework/commit/81342f14d42182e20449bca45d64351f98cdb8a0, https://github.com/spring-projects/spring-framework/commit/0f4e4fcca674e074973487b5c20743bd8fbaa9fa  **Backported to:** [4.1.9](https://github.com/spring-projects/spring-framework/milestone/133?closed=1), [3.2.16](https://github.com/spring-projects/spring-framework/milestone/104?closed=1)","closed","type: bug,","spring-projects-issues","2015-10-28T09:00:30Z","2015-11-15T17:03:13Z"
"","18637","RestTemplate doesnt support DELETE with RequestBody [SPR-14065]","**[shashi ](https://jira.spring.io/secure/ViewProfile.jspa?name=shashilives)** opened **[SPR-14065](https://jira.spring.io/browse/SPR-14065?redirect=false)** and commented  RestTemplate supports almost all the HttpMethod with RequestBody, but it doesn't  support DELETE request with RequestBody.  Can we expect this feature in the next release?  ---  **Issue Links:** - #12524 Add support for DELETE with body to RestTemplate (_**""duplicates""**_) - #16966 Add support for DELETE with body to RestTemplate through exchange method (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2016-03-17T12:01:37Z","2019-01-11T14:41:44Z"
"","18810","Map selection should return Map.Entry instead of Map [SPR-14237]","**[Sergiy Slobodyan](https://jira.spring.io/secure/ViewProfile.jspa?name=sergiy.slobodyan@gmail.com)** opened **[SPR-14237](https://jira.spring.io/browse/SPR-14237?redirect=false)** and commented  Result of Map selection is Map, but should be map.Entry.  The following tests return: class java.lang.Integer: 0 class java.util.HashMap: {foo=bar}  They should return class java.lang.Integer: 0 class some.Map.Entry {foo=bar}  ``` ExpressionParser parser = new SpelExpressionParser();  @Test public void testSetSelection() {      Set list = new HashSet(Arrays.asList(0, 1, 2, 3, 4, 5, 6, 7, 8, 9));     EvaluationContext context = new StandardEvaluationContext();     context.setVariable(""list"", list);      Object value = parser.parseExpression(""#list.^[#this %2 == 0]"").getValue(context);      System.out.println(value.getClass() + "": "" + value); }  @Test public void testMapSelectionSimple() {     Map map = new HashMap();     map.put(""foo"", ""bar"");     map.put(""foo2"", ""bar2"");     EvaluationContext context = new StandardEvaluationContext();     context.setVariable(""map"", map);     Expression exp = parser.parseExpression(""#map.^[key matches '.*']"");      Object value = exp.getValue(context);     System.out.println(value.getClass() + "": "" + value); }​ ```    ---  **Affects:** 4.2.5","closed","type: enhancement,","spring-projects-issues","2016-04-30T22:13:14Z","2016-05-02T17:19:26Z"
"","18048","STOMP endpoint / WebSocketHandler registration should fail if there's already a mapping on the same path [SPR-13469]","**[Sergi Almar](https://jira.spring.io/secure/ViewProfile.jspa?name=salmar)** opened **[SPR-13469](https://jira.spring.io/browse/SPR-13469?redirect=false)** and commented  STOMP endpoint / WebSocketHandler registration doesn't fail if there's already a mapping on the same path (when not using SockJS). As an example, the following configuration won't fail but will prevent the WebSocket handshake to succeed (as the MVC endpoint will be called during handshake):  ```java @Configuration @EnableWebSocket public class WebSocketConfig implements WebSocketConfigurer {  	@Override 	public void registerWebSocketHandlers(WebSocketHandlerRegistry registry) { 		registry.addHandler(new MyHandler(), ""/path"");	 	} } ```  ```java @Controller public class MyController {     @RequestMapping(""/path"")     public void handle() {       ...		    } } ```    --- No further details from [SPR-13469](https://jira.spring.io/browse/SPR-13469?redirect=false)","closed","type: enhancement,","spring-projects-issues","2015-09-16T23:47:11Z","2020-03-12T16:53:13Z"
"","18802","Add get/set-IfUnmodifiedSince, get/set-IfMatch methods on HttpHeaders [SPR-14228]","**[Sebastiaan van Erk](https://jira.spring.io/secure/ViewProfile.jspa?name=sebster)** opened **[SPR-14228](https://jira.spring.io/browse/SPR-14228?redirect=false)** and commented  For a conditional PUT request I would like to use the If-Match header, however there is no corresponding get method on HttpHeaders. Similarly, there is no method for If-Unmodified-Since. The methods do exist for the If-None-Match and If-Modified since headers.  The methods are easy to add and quite useful for optimistic concurrency control on REST services.  For now there is a simple workaround for the missing If-Unmodified-Since method since the getFirstDate(String header) method is public, but it's a bit uglier for the If-Match header since the corresponding getFirstHeaderAsList(String header) method is protected.  Best regards, Sebastiaan  ---  **Affects:** 4.2.5  **Issue Links:** - [INT-4017](https://jira.spring.io/browse/INT-4017) Address the latest changes in the Spring Framework - #18797 Consistent handling of multi-valued headers in HttpHeaders - #18806 Add common non standard headers to HttpHeaders  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/55dae618a64da520d9154fe17f1529acab45873a","closed","type: enhancement,","spring-projects-issues","2016-04-28T09:50:46Z","2019-01-11T17:07:44Z"
"","18798","Behavior of checkNotModified(String etag, long lastModifiedTimestamp) does not match HTTP recommendations [SPR-14224]","**[Sebastiaan van Erk](https://jira.spring.io/secure/ViewProfile.jspa?name=sebster)** opened **[SPR-14224](https://jira.spring.io/browse/SPR-14224?redirect=false)** and commented  According to RFC2616 https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html if a request has the If-None-Match _or_ If-Modified-Since headers are set on a request (that is, either one or the other, but not both), a 304 Not Modified can be returned if the the ETag matches or the resource is has not been modified since the specified date.  According to the same specification, if _both_ headers are set, the behavior of the server is undefined. In other words, a client should _never_ use both, as it does not make sense (the server could return ""418 I'm a teapot"" if it felt like it).  Thus for the checkNotModified(String etag, long lastModifiedTimestamp) method to be useful, it should: * Check the etag if the If-None-Match header is the only header present. * Check the last modified timestamp if the If-Modified-Since header is the only header present. * Do something sane if _both_ are present (which they shouldn't be). In my opinion, the most sane option is to check the etag, because it's generally stronger than the last modified date.  However, currently the implementation of the method returns false _unless_ both headers are present (a case which should never happen). Thus effectively it _always_ returns false.  ---  **Affects:** 4.2.5  **Issue Links:** - #18790 ServletWebRequest.isEtagNotModified does not support commas and spaces in client ETags  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a50ea80e4e5ebb6e656737a6a32967967563eaa4","closed","type: enhancement,","spring-projects-issues","2016-04-26T15:20:34Z","2019-01-11T17:07:25Z"
"","18797","Consistent handling of multi-valued headers in HttpHeaders [SPR-14223]","**[Sebastiaan van Erk](https://jira.spring.io/secure/ViewProfile.jspa?name=sebster)** opened **[SPR-14223](https://jira.spring.io/browse/SPR-14223?redirect=false)** and commented  The org.springframework.http.HttpHeaders class wraps HTTP request headers and makes them easy to work with (e.g., parsing HTTP dates such as in the Last-Modified header) for you.  However, it treats multi-valued headers incorrectly in my opinion. From RFC2616 https://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2:  > Multiple message-header fields with the same field-name MAY be present in a message if and only if the entire field-value for that header field is defined as a comma-separated list [i.e., #(values)]. It MUST be possible to combine the multiple header fields into one ""field-name: field-value"" pair, without changing the semantics of the message, by appending each subsequent field-value to the first, each separated by a comma. The order in which header fields with the same field-name are received is therefore significant to the interpretation of the combined field value, and thus a proxy MUST NOT change the order of these field values when a message is forwarded.  Thus, it seems to me that the following sets of headers mean the same thing:  > X-List: a, b, c  > X-List: a > X-List: b > X-List: c  > X-List: a, b > X-List: c  In all cases the header value of the X-List header is the list of strings ""a"", ""b"", ""c"". Note that a proxy may convert the second or third form to the first form.  According to the documentation on HttpHeaders:  > getFirst(String) returns the first value associated with a given header name  I would expect in all 3 cases that getFirst(""X-List"") returns the string ""a"". However this is not the case. In the first case it returns ""a, b, c"", in the second case ""a"", and in the third case ""a, b"".  Note that this is actually a problem in the handling of some of the headers (the various Access-Control headers, the If-None-Match header), because they call getFirst or getFirstValueAsList. But this way they ignore any values in repeated headers, which are valid and should be appended to the list according to the RFC.  Since the processing of multiple header values is rather complicated, it would be really helpful if the HttpHeaders class removed this complexity from the API user.  NOTE:  As commented in #18790, there is a problem with the method to split the header into values (getFirstValueAsList): the values themselves may contain commas (ETags are an example of this). It seems that to split the header you need to understand the syntax of the values themselves. I don't see how one could implement this correctly for the generic case (e.g., unknown X-* headers). However, for the known HTTP headers it should be possible to split the list correctly.  ---  **Affects:** 4.2.5  **Issue Links:** - #18790 ServletWebRequest.isEtagNotModified does not support commas and spaces in client ETags - #18977 Regression: DefaultCorsProcessor ignores already present Access-Control-Allow-Origin header - #19184 CorsConfiguration checkHeaders wildcard ALL should allow matching empty strings header - #18802 Add get/set-IfUnmodifiedSince, get/set-IfMatch methods on HttpHeaders  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/55dae618a64da520d9154fe17f1529acab45873a","closed","type: enhancement,","spring-projects-issues","2016-04-26T14:22:37Z","2019-01-14T04:39:35Z"
"","18790","ServletWebRequest.isEtagNotModified does not support commas and spaces in client ETags [SPR-14216]","**[Sebastiaan van Erk](https://jira.spring.io/secure/ViewProfile.jspa?name=sebster)** opened **[SPR-14216](https://jira.spring.io/browse/SPR-14216?redirect=false)** and commented  The problem is in isEtagNotModified(String etag):  ```java String[] clientEtags = StringUtils.delimitedListToStringArray(ifNoneMatch, "","", "" ""); ```  The client ETags are taken from the ifNoneMatch header and are ETags separated by commas. However the ETags themselves are opaque (double)quoted strings: they may contain commas and/or spaces (and even \""). The code above does not take this into account and splits ETags in half if they contain a comma and removes any spaces they may contain.  A workaround is to make sure generated ETags don't have commas or spaces in them (I used the `@Version` column which is a Date as the ETag where toString() by default generates a space, but I could format it as an ISO8601 timestamp, which contains no spaces or commas).  ---  **Affects:** 4.2.5  **Issue Links:** - #18797 Consistent handling of multi-valued headers in HttpHeaders - #18798 Behavior of checkNotModified(String etag, long lastModifiedTimestamp) does not match HTTP recommendations  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/29da44c8dcc0fd7244b47dfc57be700458d7238d","closed","type: enhancement,","spring-projects-issues","2016-04-25T12:45:27Z","2019-01-11T17:08:36Z"
"","18777","Allow @ExceptionHandler to execute some logic and continue with default behavior [SPR-14203]","**[Sebastiaan van Erk](https://jira.spring.io/secure/ViewProfile.jspa?name=sebster)** opened **[SPR-14203](https://jira.spring.io/browse/SPR-14203?redirect=false)** and commented  I would like to write an exception handler which takes a Spring exception (e.g., EmptyResultDataAccessException) which is not annotated with a `@ResponseStatus` annotation, and effectively change the status code from a 500 Internal Server Error to a 404 Not Found. After that I would like Spring to handle the exception as if it was annotated with the `@ResponseStatus` annotation (e.g., have Spring Boot's normal processing which is to print a nice JSON error object). To do this I currently have the following somewhat ugly code:  ```java @ExceptionHandler(EmptyResultDataAccessException.class) public void handleEmptyResult(HttpServletResponse response) throws IOException {      response.sendError(NOT_FOUND.value()); } ```  This workaround was hard to find (in a hidden comment somewhere in one of many related StackOverflow questions), and I'm not sure it's a ""supported"" way of doing things and I'm afraid it might break in future Spring versions. It's also ugly because I'm using the raw servlet response, and it's a bit noisy (the IOException and .value()).  Before this workaround I tried throwing a new wrapping exception which did have `@ResponseStatus` annotation (e.g., throw new ResourceNotFoundException(e)) which seemed to me the most logical way to translate the exception, except that Spring sees this as an error and completely ignores the handler in that case.  The nicest solution for me seems to be if it was possible for an `@ExceptionHandler` to ""override"" the `@ResponseStatus` and then ""revert"" to the default behavior (even nice than throwing a wrapping exception). I don't know exactly how this solution would look however (special return value? extra annotation?). This could also be used for other purposes (e.g., log the exception, but then continue with the default behavior).  Best regards, Sebastiaan   ---  **Affects:** 4.2.5  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2016-04-22T08:57:18Z","2018-12-05T18:03:10Z"
"","18686","@Scheduled annotation fixedDelayString attribute does not resolve SpEL expressions [SPR-14114]","**[Sean Stephenson](https://jira.spring.io/secure/ViewProfile.jspa?name=seanstephenson)** opened **[SPR-14114](https://jira.spring.io/browse/SPR-14114?redirect=false)** and commented  I have a `@Scheduled` method that should execute every N seconds, where N is an interval specified in a config file.  Here is how my declaration looks.  `@Scheduled`(fixedDelayString = ""#{${myapp.intervalInSeconds} * 1000}"") public void run() { // ... }  Unfortunately, while specifying a property replace expression like ""${myapp.intervalInSeconds}"" works correctly, using a SpEL expression to convert this to milliseconds does not work.  I get the following error message on attempting to start Spring.  Caused by: java.lang.IllegalStateException: Encountered invalid `@Scheduled` method 'run': Invalid fixedDelayString value ""#{10 * 1000}"" - cannot parse into integer  ---  **Affects:** 4.1.7  **Issue Links:** - #18203 Support SpEL next to placeholders in annotation attributes (e.g. `@Scheduled`) (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2016-04-04T15:35:09Z","2019-01-13T05:27:11Z"
"","18358","ListenableFutureAdapter.addCallback may or may not propagate failures from a FailureCallback in the calling thread [SPR-13785]","**[Scott Feldstein](https://jira.spring.io/secure/ViewProfile.jspa?name=scottmf)** opened **[SPR-13785](https://jira.spring.io/browse/SPR-13785?redirect=false)** and commented  There is a problem in AsyncRestTemplate where it does not consistently propagate an exception up the stack from the error callback.  I am attaching code to reproduce the issue.  Import the spring starter project into STS and then run the AsyncrestremplatebugApplicationTests.  The test method bug() will fail while the test method works() will pass.  The only difference btwn the methods is that there is a sleep in the works() method.  The sleep allows the rest call time to fail so the subsequent call to future.get() will immediately call the error callback.  In the bug() method the rest call does not complete before the error callback is added and therefore it fails.  I used Thread.sleep() in my Controller to ensure that the callbacks are added before the rest call is completed.  I would expect the same the exception from the failure callback would be consistently thrown.  ---  **Affects:** 4.1.6, 4.2.3  **Attachments:** - [asyncrestremplatebug.tgz](https://jira.spring.io/secure/attachment/23241/asyncrestremplatebug.tgz) (_53.44 kB_)  **Issue Links:** - #18822 AsyncResult calls SuccessCallback when it should call FailureCallback","closed","type: enhancement,","spring-projects-issues","2015-12-12T01:02:43Z","2019-01-11T19:27:52Z"
"","18657","PathMatchingResourcePatternResolver should enforce consistent alphabetical sorting of directory content [SPR-14085]","**[Say.li](https://jira.spring.io/secure/ViewProfile.jspa?name=120011676)** opened **[SPR-14085](https://jira.spring.io/browse/SPR-14085?redirect=false)** and commented  java jdk (new File("""").listFiles()) api: listFiles public File[] listFiles() Returns an array of abstract pathnames denoting the files in the directory denoted by this abstract pathname. If this abstract pathname does not denote a directory, then this method returns null. Otherwise an array of File objects is returned, one for each file or directory in the directory. Pathnames denoting the directory itself and the directory's parent directory are not included in the result. Each resulting abstract pathname is constructed from this abstract pathname using the File(File, String) constructor. Therefore if this pathname is absolute then each resulting pathname is absolute; if this pathname is relative then each resulting pathname will be relative to the same directory. There is no guarantee that the name strings in the resulting array will appear in any specific order; they are not, in particular, guaranteed to appear in alphabetical order.  Note that the Files class defines the newDirectoryStream method to open a directory and iterate over the names of the files in the directory. This may use less resources when working with very large directories.  Returns: An array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname. The array will be empty if the directory is empty. Returns null if this abstract pathname does not denote a directory, or if an I/O error occurs. Throws: SecurityException - If a security manager exists and its SecurityManager.checkRead(String) method denies read access to the directory Since:  Problem location： PathMatchingResourcePatternResolver(class) doRetrieveMatchingFiles(method)(line number:687)  (bug) File[] dirContents = dir.listFiles();  Solution: add a alphabetical order.  The same code in different environmental order is not the same (can not start the project). I have encountered such a situation.  code: public static void main(String[] args) { File[] dirContents = new File(""/home/say/git/chop-usercenter/chop-usercenter-provider/src/main/resources/spring"").listFiles(); for (File f : dirContents) { System.out.println(f.getPath()); } }  Console: windows: /home/say/git/chop-usercenter/chop-usercenter-provider/src/main/resources/spring/applicationContext-user.xml /home/say/git/chop-usercenter/chop-usercenter-provider/src/main/resources/spring/applicationContext.xml /home/say/git/chop-usercenter/chop-usercenter-provider/src/main/resources/spring/Provider.xml /home/say/git/chop-usercenter/chop-usercenter-provider/src/main/resources/spring/Consumer.xml /home/say/git/chop-usercenter/chop-usercenter-provider/src/main/resources/spring/rabbit.xml  i linux: /home/say/git/chop-usercenter/chop-usercenter-provider/src/main/resources/spring/Provider.xml /home/say/git/chop-usercenter/chop-usercenter-provider/src/main/resources/spring/Consumer.xml /home/say/git/chop-usercenter/chop-usercenter-provider/src/main/resources/spring/applicationContext-user.xml /home/say/git/chop-usercenter/chop-usercenter-provider/src/main/resources/spring/applicationContext.xml /home/say/git/chop-usercenter/chop-usercenter-provider/src/main/resources/spring/rabbit.xml  ---  **Issue Links:** - #10961 PathMatchingResourcePatternResolver should close jar file from JarURLConnection if not cached - #18260 PathMatchingResourcePatternResolver does not consider manifest based classpaths - #21378 PathMatchingResourcePatternResolver should enforce OS-independent sorting of directory content  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/55f1c98c397453e5c696c0d3208455bf98b9e629","closed","type: enhancement,","spring-projects-issues","2016-03-24T10:40:31Z","2019-01-11T14:40:30Z"
"","18445","Failed to detect ServletContainerInitializers for context [SPR-13872]","**[satyajit nalavade](https://jira.spring.io/secure/ViewProfile.jspa?name=satyajit.nalavade@gmail.com)** opened **[SPR-13872](https://jira.spring.io/browse/SPR-13872?redirect=false)** and commented  SEVERE: Failed to detect ServletContainerInitializers for context with name [/samplerestservice] java.io.IOException: java.lang.ClassNotFoundException: org.springframework.web.SpringServletContainerInitializer at org.apache.catalina.startup.WebappServiceLoader.loadServices(WebappServiceLoader.java:199) at org.apache.catalina.startup.WebappServiceLoader.load(WebappServiceLoader.java:157) at org.apache.catalina.startup.ContextConfig.processServletContainerInitializers(ContextConfig.java:1575) at org.apache.catalina.startup.ContextConfig.webConfig(ContextConfig.java:1281) at org.apache.catalina.startup.ContextConfig.configureStart(ContextConfig.java:889) at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:386) at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:117) at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90) at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5479) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150) at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1574) at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1564) at java.util.concurrent.FutureTask.run(FutureTask.java:262) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) at java.lang.Thread.run(Thread.java:745) Caused by: java.lang.ClassNotFoundException: org.springframework.web.SpringServletContainerInitializer at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1856) at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1705) at java.lang.Class.forName0(Native Method) at java.lang.Class.forName(Class.java:274) at org.apache.catalina.startup.WebappServiceLoader.loadServices(WebappServiceLoader.java:196) ... 15 more  issue was related after updating spring framework 4.1.9.RELEASE to 4.0.5.RELEASE Issue resolved  \ \ \ \org.springframework\ \spring-framework-bom\ \4.1.9.RELEASE\ \pom\ \import\ \ \ \  changed to  \ \ \ \org.springframework\ \spring-framework-bom\ \4.0.5.RELEASE\ \pom\ \import\ \ \ \   ---  **Affects:** 4.1.9  **Reference URL:** http://stackoverflow.com/questions/34833716/failed-to-detect-servletcontainerinitializers-for-context-run-time-error-in-sp  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/9925098555e52c325680d4bb3e66690a9d723c65","closed","","spring-projects-issues","2016-01-17T05:41:45Z","2019-01-11T18:28:05Z"
"","18221","nested exception is org.hibernate.HibernateException: Unable to locate current JTA transaction [SPR-13644]","**[Sander Theetaert](https://jira.spring.io/secure/ViewProfile.jspa?name=bamboomy@gmail.com)** opened **[SPR-13644](https://jira.spring.io/browse/SPR-13644?redirect=false)** and commented  I try to upgrade from 3.1.2.RELEASE to 4.2.2.RELEASE and from hibernate 3.0 to hibernate 4 (previously 5 but I already gave up on that)  For that I changed org.springframework.orm.hibernate3.HibernateTransactionManager to org.springframework.orm.hibernate4.HibernateTransactionManager and org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean to org.springframework.orm.hibernate4.LocalSessionFactoryBean  relevant part of the dao-context.xml is this:                                                                                                      true                 be.fgov.just.cjr.oracle.OracleDialectWithXmlTypeSupport                 false                 org.hibernate.engine.transaction.internal.jta.JtaTransactionFactory                 true                 true                 true                 org.hibernate.cache.ehcache.EhCacheRegionFactory                 true                 true                 false                 jta                 org.hibernate.service.jta.platform.internal.WeblogicJtaPlatform                             I also encoutered this issue: #15230 which advises to change CMTTransactionFactory to JtaTransactionFactory;  in fact that rises an other issue that I'm trying to counter for a couple of days now...  I also have a stack overflow thread on this issue:  (with a greater portion of the stacktrace + some additional info I don't know whether to copy past here also)  http://stackoverflow.com/questions/33522102/migration-to-hibernate-4-spring-4-2-2-org-hibernate-hibernateexception-could  ---  **Affects:** 4.2.2","closed","status: invalid,","spring-projects-issues","2015-11-05T16:38:47Z","2019-01-12T05:23:30Z"
"","18781","Upgrade rometools from 1.5.0 to 1.6.0 [SPR-14207]","**[Samuel Moritz](https://jira.spring.io/secure/ViewProfile.jspa?name=thesam)** opened **[SPR-14207](https://jira.spring.io/browse/SPR-14207?redirect=false)** and commented  Changelog from https://github.com/rometools/rome/blob/master/README.md : 1.6.0  Upgrade of JDOM to version 2.0.5 Maven plugin and dependency updates Support for allowing Doctype declarations in rome-fetcher OSGi improvements 1.5.1  solved an XML bomb vulnerability Important note: due to the security fix ROME now forbids all Doctype declarations by default. This will break compatibility with RSS 0.91 Netscape because it requires a Doctype declaration. When you experience problems you have to activate the property allowDoctypes on the SyndFeedInput object. You should only use this possibility when the feeds that you process are absolutely trustful.  ---  Spring-framework has already upgraded to 1.6.0 in the following commit: https://github.com/spring-projects/spring-framework/commit/7c450fad3b066fed5c428808cdcf27b591acd0d6  ---  No further details from [SPR-14207](https://jira.spring.io/browse/SPR-14207?redirect=false)","closed","status: invalid,","spring-projects-issues","2016-04-22T17:42:05Z","2019-01-13T15:50:50Z"
"","18345","Can not register GeneralConverter to ConversionServiceFactoryBean program [SPR-13771]","**[Sampson](https://jira.spring.io/secure/ViewProfile.jspa?name=holmes200601)** opened **[SPR-13771](https://jira.spring.io/browse/SPR-13771?redirect=false)** and commented  Can not register GenericConverter into ConversionServiceFactoryBean.  Scenario: Suppose class WheelConverter implements GeneraicConverter. By using xml-based manner (xml.jpg), the converter can be successfully registered into ConversionServiceFactoryBean. While by using programic method, the converter can not be registered successfully(program.jpg).  If not add the type conversion, then there exists compile error, since GenericConverter doesn't extend Converter.  If above usage was wrong, then how to register GenericConverter programically.   ---  **Affects:** 4.2.1  **Attachments:** - [program.JPG](https://jira.spring.io/secure/attachment/23233/program.JPG) (_30.73 kB_) - [xml.JPG](https://jira.spring.io/secure/attachment/23234/xml.JPG) (_24.75 kB_)","closed","in: core,","spring-projects-issues","2015-12-07T10:03:51Z","2019-01-12T16:22:33Z"
"","18449","ServletServerHttpRequest.getURI() escape the query parameters twice [SPR-13876]","**[Sammy Chu](https://jira.spring.io/secure/ViewProfile.jspa?name=sammychu)** opened **[SPR-13876](https://jira.spring.io/browse/SPR-13876?redirect=false)** and commented  `ServletServerHttpRequest.getURI()` using URI constructor `URI(String scheme, String userInfo, String host, int port, String path, String query, String fragment)` to construct the URI which in the JavaDoc already stated it will escape properly... But the query parameters returned by `HttpServletRequest.getQueryString()` is the already encoded form, it will result the constructed URI escaped twice.  Please refer to https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/http/server/ServletServerHttpRequest.java#L91   ---  **Affects:** 4.1.9, 4.2.4  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/955","closed","type: bug,","spring-projects-issues","2016-01-19T02:15:31Z","2016-04-08T20:14:32Z"
"","18827","Support @Sql annotations on test interfaces [SPR-14255]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-14255](https://jira.spring.io/browse/SPR-14255?redirect=false)** and commented  #### Status Quo  #18755 introduced support for declaring test annotations on _test interfaces_ for all class-level annotations in the _Spring TestContext Framework_ except `@Sql` and `@SqlGroup`.  #### Analysis  As of Spring Framework 4.3, there is no first-class support in the framework for finding repeatable annotations like `@Sql` on interfaces with support for _merged_ composed annotations _without_ finding _shadowed_ annotations on superclasses.  #### Deliverables  - [ ] Determine if it is feasible to implement a search algorithm for merged repeatable annotations on interfaces (i.e., something between the ""get"" and ""find"" variants in `AnnotatedElementUtils`). - [ ] If it is feasible, support `@Sql` and `@SqlGroup` on test interfaces.  ---  **Affects:** 4.3 GA  **Issue Links:** - #18755 Support test annotations on interfaces","open","type: enhancement,","spring-projects-issues","2016-05-05T18:15:24Z","2021-10-29T12:27:00Z"
"","18826","Support for MockPart in Spring MVC Test [SPR-14253]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-14253](https://jira.spring.io/browse/SPR-14253?redirect=false)** and commented  #### Status Quo  As discussed on Stack Overflow (see _Reference URL_), the Spring MVC Test Framework currently does not provide support for testing with `javax.servlet.http.Part`.  #### Related Resources  - _Further Analysis_ section of #18825  #### Deliverables  - Add first-class support for testing with `javax.servlet.http.Part` when using `MockMvc`.  ---  **Reference URL:** http://stackoverflow.com/questions/37000457/setting-request-parts-in-spring-test-mvc  **Issue Links:** - #18825 Introduce MockPart in spring-test (_**""depends on""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/eabd8a2964e84eba7bff9d6a50269d15a1f87d1f  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2016-05-05T11:42:36Z","2019-01-11T17:04:50Z"
"","18825","Introduce MockPart in spring-test [SPR-14252]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-14252](https://jira.spring.io/browse/SPR-14252?redirect=false)** and commented  #### Status Quo  Spring already has a mock for `javax.servlet.http.Part` in the test source folder in `spring-web`; however, there is currently no counterpart in the `spring-test` module for public consumption.  #### Further Analysis  As pointed out by a user on Stack Overflow, it is currently not possible to mock `Part` on your own due to the following:  > In `RequestPartServletServerHttpRequest` I run into this: >  > ```java > this.headers = this.multipartRequest.getMultipartHeaders(this.partName); > if (this.headers == null) { >     throw new MissingServletRequestPartException(partName); > }  > ```  It is therefore likely that we will need to modify `MockMultipartHttpServletRequest` as well. In particular, the contract for Spring's `MultipartHttpServletRequest.getMultipartHeaders()` states the following.  > Return the headers associated with the specified part of the multipart request. >  > If the underlying implementation supports access to headers, then all headers are returned. Otherwise, the returned headers will include a 'Content-Type' header at the very least.  However, `MockMultipartHttpServletRequest.getMultipartHeaders()` in fact returns `null` if the content type for the part cannot be retrieved. This is because Spring's `MultipartRequest.getMultipartContentType()` specifies that it will return _the associated content type, or `null` if not defined_. Thus, there is definitely a conflict between these two contracts. Most importantly, `MockMultipartHttpServletRequest.getMultipartContentType()` only supports look-ups for `MultipartFile` and disregards any `Part` that might be present.  #### Deliverables  - Introduce a mock for `javax.servlet.http.Part` in `spring-test` based on the existing `org.springframework.mock.web.test.MockPart` in `spring-web`, potentially implementing `write()` and `delete()` as well.  ---  **Reference URL:** http://stackoverflow.com/questions/37000457/setting-request-parts-in-spring-test-mvc  **Issue Links:** - #18826 Support for MockPart in Spring MVC Test (_**""is depended on by""**_) - #20409 Backport s/s/m/j/o/s/m/w/MockPart.java from 5.x to 4.3.x  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c8f98ecd8d36b6d270852f0fd5b6b491108c696c  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2016-05-05T11:39:59Z","2019-01-11T17:04:52Z"
"","18755","Support test annotations on interfaces [SPR-14184]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-14184](https://jira.spring.io/browse/SPR-14184?redirect=false)** and commented  #### Status Quo  Prior to Java 8 it never really made much sense to author integration tests using interfaces. Consequently, the _Spring TestContext Framework_ has never supported finding test-related annotations on interfaces in its search algorithms.  However, Java 8's support for _interface default methods_ introduces new testing use cases for which it makes sense to declare test configuration (e.g., `@ContextConfiguration`, etc.) on an interface containing default methods instead of on an abstract base class.  #### Deliverables  For each of the following annotations, implement and test support for declaration on test interfaces.  1. [x] `@ActiveProfiles`    - see `ActiveProfilesInterfaceTests` 2. [x] `@BootstrapWith`    - see `BootstrapWithInterfaceTests` 3. [x] `@ContextConfiguration`    - see `ContextConfigurationInterfaceTests` 4. [x] `@ContextHierarchy`    - see `ContextHierarchyInterfaceTests` 5. [x] `@WebAppConfiguration`    - see `WebAppConfigurationInterfaceTests` 6. [x] `@DirtiesContext`    - see `DirtiesContextInterfaceTests` 7. [x] `@TestExecutionListeners`    - see `customListenersDeclaredOnInterface()` in `TestExecutionListenersTests` 8. [x] `@TestPropertySource`    - see `TestPropertySourceInterfaceTests` 9. [ ] `@Sql` and `@SqlGroup`    - see #18827 10. [x] `@SqlConfig`     - see `SqlConfigInterfaceTests` 11. [x] `@Commit`     - see `TransactionalTestExecutionListenerTests` 12. [x] `@Rollback`     - see `TransactionalTestExecutionListenerTests` 13. [x] `@IfProfileValue`     - see `DisabledAnnotatedSingleValueOnTestInterface` in `ProfileValueUtilsTests` 14. [x] `@ProfileValueSourceConfiguration`     - see `EnabledWithCustomProfileValueSourceOnTestInterface` in `ProfileValueUtilsTests`  ---  **Issue Links:** - #18754 Support `@BeforeTransaction` and `@AfterTransaction` on interface default methods - #18827 Support `@Sql` and `@SqlGroup` on test interfaces","closed","type: enhancement,","spring-projects-issues","2016-04-17T14:12:42Z","2019-01-13T05:26:16Z"
"","18754","Support @BeforeTransaction and @AfterTransaction on interface default methods [SPR-14183]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-14183](https://jira.spring.io/browse/SPR-14183?redirect=false)** and commented  #### Status Quo  Java 8 introduced support for _interface default methods_. JUnit 5 as well as some existing `Runner` implementations for JUnit 4.x already support default methods in various scenarios -- for example, `@Test`, `@BeforeEach`, etc. However, the _Spring TestContext Framework_ does not yet support the declaration of `@BeforeTransaction` and `@AfterTransaction` on default methods: it simply does not find them.  #### Deliverables  1. [x] Update the annotated method search algorithms in `TransactionalTestExecutionListener` so that `@BeforeTransaction` and `@AfterTransaction` can be declared on interface default methods.  ---  **Issue Links:** - #17419 Make ReflectionUtils.doWithMethods work on Java 8 default interface methods - #18755 Support test annotations on interfaces  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ff38224da63333e67a43ba1d6253ff4923a7359e, https://github.com/spring-projects/spring-framework/commit/0f6711fe3b9945304a6fcb1a4d0bde28de49dbd2","closed","type: enhancement,","spring-projects-issues","2016-04-17T13:58:51Z","2019-01-11T16:34:35Z"
"","18674","MergePlugin does not include merge projects in generated Eclipse classpath when running Gradle as a daemon [SPR-14102]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-14102](https://jira.spring.io/browse/SPR-14102?redirect=false)** and commented  #### Status Quo  The `org.springframework.build.gradle.MergePlugin` does not consistently include _merge projects_ in the generated `.classpath` file for Eclipse projects: sometimes it works; sometimes it doesn't.  For example, if you execute the `import-into-eclipse.sh` script, the resulting `.classpath` file for the `spring-test` module should always contain the following entries, but sometimes they are omitted causing compiler errors within Eclipse.  ```xml     ```  #### Deliverables  - Ensure that _merge projects_ are always included in the generated `.classpath` file for Eclipse projects.    ---  **Affects:** 4.2.5, 4.3 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9438c4185312ba9fbbeacd82bb0ac2706e723856, https://github.com/spring-projects/spring-framework/commit/970dc4ae11ac81f25ce4d4d003d3ee2cea870fec","closed","type: task,","spring-projects-issues","2016-03-31T15:39:34Z","2016-05-06T08:13:31Z"
"","18641","Transitive implicit aliases do not always work with @AliasFor in merged annotations [SPR-14069]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-14069](https://jira.spring.io/browse/SPR-14069?redirect=false)** and commented  #### Status Quo  For the most post, transitive implicit aliases for annotation attribute overrides configured via `@AliasFor` work. However, I have detected a corner case that fails.  #### Failing Example  Given the following three annotations, if an attempt is made to look up a _merged_ `@ContextConfig` annotation via `AnnotatedElementUtils` (e.g., using `getMergedAnnotation()` or `findMergedAnnotation()`) on an element annotated with `@TransitiveImplicitAliasesContextConfig` then the look up will fail with an `AnnotationConfigurationException` stating something similar to the following:  ``` attribute 'value' and its alias 'locations' are declared with values of [{}] and [{test.groovy}], but only one is permitted. ```  If the `value` attribute in `ImplicitAliasesContextConfig` declares `attribute = ""locations""` via `@AliasFor`, the code then works as expected. Thus, there is obviously a bug in the lookup mechanism for names of overridden attributes in conjunction with transitive implicit aliases.  ```java @Retention(RetentionPolicy.RUNTIME) @interface ContextConfig {  	@AliasFor(attribute = ""locations"") 	String[] value() default {};  	@AliasFor(attribute = ""value"") 	String[] locations() default {};  	Class[] classes() default {}; } ```  ```java @ContextConfig @Retention(RetentionPolicy.RUNTIME) @interface ImplicitAliasesContextConfig {  	@AliasFor(annotation = ContextConfig.class, attribute = ""locations"") 	String[] groovyScripts() default {};  	@AliasFor(annotation = ContextConfig.class, attribute = ""locations"") 	String[] xmlFiles() default {};  	// intentionally omitted: attribute = ""locations"" 	@AliasFor(annotation = ContextConfig.class) 	String[] locations() default {};  	// intentionally omitted: attribute = ""locations"" 	@AliasFor(annotation = ContextConfig.class) 	String[] value() default {}; } ```  ```java @ImplicitAliasesContextConfig @Retention(RetentionPolicy.RUNTIME) @interface TransitiveImplicitAliasesContextConfig {  	@AliasFor(annotation = ImplicitAliasesContextConfig.class, attribute = ""xmlFiles"") 	String[] xml() default {};  	@AliasFor(annotation = ImplicitAliasesContextConfig.class, attribute = ""groovyScripts"") 	String[] groovy() default {}; } ```  #### Deliverables  1. [ ] Determine why the aforementioned example fails and fix the bug.    - See `TODO` in `AnnotatedElementUtilsTests`.    ---  **Affects:** 4.2.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d22480b0ebc9bb65fd297c69a44ef963661acca5, https://github.com/spring-projects/spring-framework/commit/2153d8870692572a74f17dacacc1f5db83b3d9e8","closed","in: core,","spring-projects-issues","2016-03-18T14:16:54Z","2016-04-06T08:38:14Z"
"","18632","Compose @Autowired with @Qualifier [SPR-14060]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-14060](https://jira.spring.io/browse/SPR-14060?redirect=false)** and commented  #### Overview  Once #18630 is resolved it will be possible to _compose_ `@Autowired` with `@Qualifier`.  Consequently, the following common combination of `@Autowired` and `@Qualifier`:  ```java @Autowired @Qualifier(""holidayDateService"") private DateService dateService; ```  ... can be replaced with:  ```java @Autowired(""holidayDateService"") private DateService dateService; ```  Although this may not appear immediately beneficial for DI for fields or setter methods, it becomes much more appealing once `@Autowired` can be applied to parameters (see #18629).  For example, Spring's testing support for JUnit 5 would then be able to support parameter injection succinctly in test methods as follows.  ```java @Test void businessHolidays(@Autowired(""holidayDateService"") DateService dateService) { } ```  #### Proposal  Implement `@Autowired` as follows.  ```java @Target({ElementType.CONSTRUCTOR, ElementType.FIELD, ElementType.METHOD, ElementType.ANNOTATION_TYPE}) @Retention(RetentionPolicy.RUNTIME) @Documented @Qualifier public @interface Autowired {  	@AliasFor(annotation = Qualifier.class, attribute = ""value"") 	String value() default """";  	@AliasFor(annotation = Qualifier.class, attribute = ""value"") 	String qualifier() default """";  	boolean required() default true;  } ```  ---  **Issue Links:** - #18629 Allow `@Autowired` to be declared on parameters - #18628 Introduce autowiring support for individual handler method parameters","closed","type: enhancement,","spring-projects-issues","2016-03-16T14:43:26Z","2019-01-13T05:27:28Z"
"","18630","Allow @Qualifier to be used in composed annotations with attribute overrides [SPR-14058]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-14058](https://jira.spring.io/browse/SPR-14058?redirect=false)** and commented  #### Status Quo  `@Qualifier` currently cannot be used as a meta-annotation in _composed annotations_ with _attribute overrides_ configured via `@AliasFor`.  The reason is that Spring's official autowiring support does not function properly if `@Qualifier` is declared as a meta-annotation with the qualifier set to an empty string (e.g., when the user chooses not to specify a qualifier when using the composed annotation).  #### Impetus  This feature would be beneficial for #18151 & #18628 and is, in general, an enabler for anyone who wishes to use `@Qualifier` with string-based qualifier values in composed annotations.  #### Deliverables  - Allow `@Qualifier` to be used as a meta-annotation in composed annotations with explicit attribute overrides for string-based qualifiers.  ---  **Affects:** 4.2 GA  **Issue Links:** - #18020 Use AnnotatedElementUtils instead of AnnotationUtils wherever feasible - #18629 Allow `@Autowired` to be declared on parameters - #18628 Introduce autowiring support for individual handler method parameters - #18151 Introduce support for JUnit 5 in the TestContext framework  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3c18a4533a95594f9b64be17052dec0f6b7a1152, https://github.com/spring-projects/spring-framework/commit/e83e3ec9de851619696d801757a0c0422c9665b6","closed","type: enhancement,","spring-projects-issues","2016-03-15T16:22:30Z","2019-01-13T05:27:30Z"
"","18629","Allow @Autowired to be declared on parameters [SPR-14057]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-14057](https://jira.spring.io/browse/SPR-14057?redirect=false)** and commented  #### Status Quo  `@Autowired` currently cannot be declared on a parameter.  #### Impetus  This feature is needed by #18151 and #18628.  #### Deliverables  - [x] Allow `@Autowired` to be declared on parameters in order to support dependency injection for individual method or constructor parameters.  ---  **Issue Links:** - #18628 Introduce autowiring support for individual handler method parameters (_**""is depended on by""**_) - #18151 Introduce support for JUnit 5 in the TestContext framework (_**""is depended on by""**_) - #19833 Honor `@Autowired`(required=false) at parameter level, as an alternative to java.util.Optional (_**""is depended on by""**_) - #18632 Compose `@Autowired` with `@Qualifier` - #18630 Allow `@Qualifier` to be used in composed annotations with attribute overrides  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a905412514bfeab250507d81b6926363b0c10973  0 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2016-03-15T16:14:50Z","2019-01-13T05:27:32Z"
"","18628","Introduce autowiring support for individual handler method parameters [SPR-14056]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-14056](https://jira.spring.io/browse/SPR-14056?redirect=false)** and commented  #### Status Quo  Spring supports autowiring of dependencies into fields, constructors, and methods; however, there is currently no first-class support for autowiring an individual parameter in a method or constructor.  Spring 5.0's JUnit 5 support demonstrates that it is already possible to implement such a feature with **zero** changes to core Spring; however, it would be very helpful if the necessary code were hidden behind first-class methods in Spring (see the _isAutowirable_ and _resolveDependency_ methods in `ParameterAutowireUtils`).  #### Impetus for Change  For traditional dependency injection use cases, there is no need to inject an individual parameter; however, JUnit 5 introduces a `ParameterResolver` extension API (analogous to Spring MVC's `HandlerMethodArgumentResolver`) that allows multiple, competing extension providers to inject values into constructors or test methods. In such a scenario, Spring is not the sole entity performing injection, and Spring therefore cannot simply perform injection for the entire constructor or method (as would be the case for an `@Autowired` method). Rather, the _Spring TestContext Framework_ (TCF) needs a mechanism for resolving dependencies for individual method parameters (preferably via the `java.lang.reflect.Parameter` API).  Although the primary impetus is proper JUnit 5 support in the TCF, such a feature could be applied to MVC handler methods, JMS listener methods, etc.  #### Working Solution  The following excerpt from `org.springframework.test.context.junit.jupiter.ParameterAutowireUtils` demonstrates how such a feature can be implemented.  ```java static boolean isAutowirable(Parameter parameter) { 	return ApplicationContext.class.isAssignableFrom(parameter.getType()) 			|| AnnotatedElementUtils.hasAnnotation(parameter, Autowired.class) 			|| AnnotatedElementUtils.hasAnnotation(parameter, Qualifier.class) 			|| AnnotatedElementUtils.hasAnnotation(parameter, Value.class); }  static Object resolveDependency(Parameter parameter, Class containingClass, ApplicationContext applicationContext) { 	boolean required = findMergedAnnotation(parameter, Autowired.class).map(Autowired::required).orElse(true); 	MethodParameter methodParameter = SynthesizingMethodParameter.forParameter(parameter); 	DependencyDescriptor descriptor = new DependencyDescriptor(methodParameter, required); 	descriptor.setContainingClass(containingClass); 	return applicationContext.getAutowireCapableBeanFactory().resolveDependency(descriptor, null); }  private static  Optional findMergedAnnotation(AnnotatedElement element, Class annotationType) { 	return Optional.ofNullable(AnnotatedElementUtils.findMergedAnnotation(element, annotationType)); } ```  #### Deliverables  - Decide if Spring should support autowiring of individual method parameters as a first-class citizen alongside the existing support for fields, methods, and constructors.  ---  **Issue Links:** - #18629 Allow `@Autowired` to be declared on parameters (_**""depends on""**_) - #18632 Compose `@Autowired` with `@Qualifier` - #18151 Introduce support for JUnit 5 in the TestContext framework - #18630 Allow `@Qualifier` to be used in composed annotations with attribute overrides - #19833 Honor `@Autowired`(required=false) at parameter level, as an alternative to java.util.Optional - #19926 Open test parameter autowiring utility for external use  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d7fe92d022c390321002f0bbf84a35624aefae3f, https://github.com/spring-projects/spring-framework/commit/35eb52e558c92901e1d0184002db6fb7c9037239  3 votes, 7 watchers","open","type: enhancement,","spring-projects-issues","2016-03-15T16:04:29Z","2019-01-13T05:27:34Z"
"","18627","Introduce support for creating a MethodParameter from a Java 8 Parameter [SPR-14055]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-14055](https://jira.spring.io/browse/SPR-14055?redirect=false)** and commented  #### Status Quo  A `MethodParameter` or `SynthesizingMethodParameter` can be created from a `Method` and an `index`; however, there is currently no first-class support for creating a `MethodParameter` from a `java.lang.reflect.Parameter`.  #### Related Resources  The `MethodParameterFactory` in the `spring-test` project has factory methods for creating a `MethodParameter` or `SynthesizingMethodParameter` from a Java 8 `Parameter`.  The _trick_ involves retrieving the `java.lang.reflect.Executable` from the supplied `Parameter` and then determining the `index` of the corresponding parameter.  The following code excerpts demonstrate the technique.  ```java public static MethodParameter createMethodParameter(Parameter parameter) { 	Assert.notNull(parameter, ""Parameter must not be null""); 	Executable executable = parameter.getDeclaringExecutable(); 	if (executable instanceof Method) { 		return new MethodParameter((Method) executable, getIndex(parameter)); 	} 	// else 	return new MethodParameter((Constructor) executable, getIndex(parameter)); }  private static int getIndex(Parameter parameter) { 	Assert.notNull(parameter, ""Parameter must not be null""); 	Executable executable = parameter.getDeclaringExecutable(); 	Parameter[] parameters = executable.getParameters(); 	for (int i = 0; i < parameters.length; i++) { 		if (parameters[i] == parameter) { 			return i; 		} 	} 	throw new IllegalStateException(String.format(""Failed to resolve index of parameter [%s] in executable [%s]"", 		parameter, executable.toGenericString())); } ```  #### Deliverables  1. Support creation of a `MethodParameter` from a `java.lang.reflect.Parameter`. 2. Support creation of a `SynthesizingMethodParameter` from a `java.lang.reflect.Parameter`.  ---  **Issue Links:** - #18151 Introduce support for JUnit 5 in the TestContext framework (_**""is depended on by""**_) - #18626 Support creation of SynthesizingMethodParameter for constructor parameter - #19009 MethodParameter should not be equal to SynthesizingMethodParameter - #18036 Validate method parameter index via Java 8 Method.getParameterCount()  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7e783dd91f14df13130a77ff0ee43a563046d969, https://github.com/spring-projects/spring-framework/commit/5f53a60120ec63a88bd2286ba0536e2bd5a3f6a9, https://github.com/spring-projects/spring-framework/commit/39e3f2ebf6690b72b7a8af852a35df6ff6229515","closed","type: enhancement,","spring-projects-issues","2016-03-15T14:31:28Z","2019-01-11T14:42:23Z"
"","18626","Support creation of SynthesizingMethodParameter for constructor parameter [SPR-14054]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-14054](https://jira.spring.io/browse/SPR-14054?redirect=false)** and commented  #### Status Quo  A `SynthesizingMethodParameter` can be created for a `Method` parameter but not for a `Constructor` parameter.  #### Related Resources  The [MethodParameterFactory](https://github.com/sbrannen/spring-test-junit5/blob/master/src/main/java/org/springframework/test/context/junit5/support/MethodParameterFactory.java) from the `spring-test-junit5` project has a factory method for creating a `SynthesizingMethodParameter` from a Java 8 `Parameter`; however, this method currently throws an `UnsupportedOperationException` if the underlying `Executable` is a `Constructor` since `SynthesizingMethodParameter` currently does not provide a constructor that accepts a `Constructor`.  #### Deliverables  - Support creation of `SynthesizingMethodParameter` instances for constructor parameters.  ---  **Affects:** 4.2 GA  **Issue Links:** - #18627 Introduce support for creating a MethodParameter from a Java 8 Parameter","closed","type: enhancement,","spring-projects-issues","2016-03-15T14:24:34Z","2019-01-11T14:42:26Z"
"","18583","Make TestContextManager.getTestContext() public [SPR-14011]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-14011](https://jira.spring.io/browse/SPR-14011?redirect=false)** and commented  #### Status Quo  The `getTestContext()` method in `TestContextManager` has been `protected` ever since it was introduced in Spring 2.5. The original assumption was that the `TestContext` should not need to be accessed by clients of the `TestContextManager`. This has held true within the framework itself for the implementations of JUnit runners and rules as well as TestNG base classes.  #### Impetus for Change  Spring's integration with JUnit 5, however, requires access to the `ApplicationContext` in order to perform dependency injection for test method parameters, and the `ApplicationContext` is only accessible via the `TestContext`. Consult the implementation of the [SpringExtension](https://github.com/sbrannen/spring-test-junit5/blob/master/src/main/java/org/springframework/test/context/junit5/SpringExtension.java) for a concrete example.  #### Deliverables  1. [x] Make the `getTestContext()` method in `TestContextManager` `public`.    ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/067994712df49b50b955e93944245a770b3962ad","closed","type: enhancement,","spring-projects-issues","2016-03-02T19:15:03Z","2016-04-06T08:38:13Z"
"","18578","Introduce support for inferring the response status in Spring MVC [SPR-14006]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-14006](https://jira.spring.io/browse/SPR-14006?redirect=false)** and commented  #### Status Quo  For the standard HTTP request methods, there are conventions that dictate what the corresponding response status should typically be. This is especially true for REST endpoints.  However, developers are currently required to explicitly set the response status (e.g., via `@ResponseStatus`, `ResponseEntity`, or programmatically via the `HttpServletResponse`).  #### Proposal  See the discussions in the related [Spring Composed issue](https://github.com/sbrannen/spring-composed/issues/10).  #### Deliverables  1. Introduce a mechanism (likely enabled via a new annotation, a new attribute in `@RequestMapping`, or a new `HttpStatus` enum constant for use in `@ResponseStatus`) for _inferring_ the appropriate response status based on the incoming HTTP request method.    --- No further details from [SPR-14006](https://jira.spring.io/browse/SPR-14006?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2016-03-01T14:28:46Z","2019-01-12T02:43:43Z"
"","18573","Allow non-public @Transactional test methods [SPR-14000]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-14000](https://jira.spring.io/browse/SPR-14000?redirect=false)** and commented  #### Overview  TestNG has never required that `@Test` methods be `public`. Furthermore, the upcoming JUnit 5 also no longer requires that test methods be public.  The _Spring TestContext Framework_ (TCF) should therefore also not require that test methods are public.  #### Analysis  The TCF in fact does not require that test methods are public, since this is the responsibility of the underlying testing framework (e.g., JUnit or TestNG); however, it is currently not possible to have a `@Transactional` test method be non-public. The reason is that `AnnotationTransactionAttributeSource` is by default configured to ignore non-public methods.  #### Deliverables  1. Ensure that `@Transactional` test methods are not required to be `public`  ---  **Affects:** 3.2.16  **Issue Links:** - #18570 Support `@BeforeTransaction` and AfterTransaction on non-public methods  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/df7b24b8e771abbbebdb034fb436d37812329689","closed","type: enhancement,","spring-projects-issues","2016-02-29T14:26:19Z","2019-01-13T05:27:52Z"
"","18570","Support @BeforeTransaction and AfterTransaction on non-public methods [SPR-13997]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-13997](https://jira.spring.io/browse/SPR-13997?redirect=false)** and commented  In order to align with TestNG and the upcoming JUnit 5 programming model, do not require `@BeforeTransaction` and `@AfterTransaction` methods to be `public`.  ---  **Issue Links:** - #18573 Allow non-public `@Transactional` test methods  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a2bfe86630a9407d0f33236f7f8d6edcc6cb12dc","closed","type: enhancement,","spring-projects-issues","2016-02-28T23:42:09Z","2019-01-13T05:27:55Z"
"","18568","Document composed annotations for @RequestMapping in the reference manual [SPR-13995]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-13995](https://jira.spring.io/browse/SPR-13995?redirect=false)** and commented  Document the annotations introduced in #18565.  ---  **Affects:** 4.3 RC1","closed","in: web,","spring-projects-issues","2016-02-27T19:39:03Z","2019-01-11T19:01:34Z"
"","18567","Document composed annotations for web scopes in the reference manual [SPR-13994]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-13994](https://jira.spring.io/browse/SPR-13994?redirect=false)** and commented  Document the annotations introduced in #18566.  ---  **Affects:** 4.3 RC1","closed","in: web,","spring-projects-issues","2016-02-27T19:37:38Z","2019-01-11T19:01:36Z"
"","18566","Introduce common composed annotations for web scopes [SPR-13993]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-13993](https://jira.spring.io/browse/SPR-13993?redirect=false)** and commented  #### Overview  See #18022.  #### Notes from Juergen  The web scope annotations should default to proxy mode `TARGET_CLASS`, analogous to the existing scope variants in Spring Cloud and Spring Batch, while still allowing for a choice of proxy modes via a `proxyMode` attribute.  #### Deliverables  - Introduce `@ApplicationScope`, `@SessionScope`, and `@RequestScope` composed annotations for web scopes  ---  **Affects:** 4.2 GA  **Issue Links:** - #18022 Introduce predefined composed annotations in core Spring - #18565 Introduce common composed annotations for `@RequestMapping`  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b423596b2eee8af7d06237b0ebd05c8dea11e099, https://github.com/spring-projects/spring-framework/commit/161ec15a4602733bf08990c72f0668be8deabbba","closed","type: enhancement,","spring-projects-issues","2016-02-27T18:21:49Z","2019-01-13T05:27:58Z"
"","18565","Introduce common composed annotations for @RequestMapping [SPR-13992]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-13992](https://jira.spring.io/browse/SPR-13992?redirect=false)** and commented  #### Overview  See #18022.  #### Deliverables  1. [x] Introduce `@GetMapping`, `@PostMapping`, `@PutMapping`, `@DeleteMapping`, & `@PatchMapping` composed annotations for `@RequestMapping` 2. [x] Introduce `headers` and `name` attribute in composed `@RequestMapping` annotations.    - The team has decided to introduce these common attributes. 3. [ ] Restrict the `value`, `path`, `consumes`, and `produces` attributes to single `String` values in composed `@RequestMapping` annotations. (see #18544)    - The team has decided against this.  ---  **Affects:** 4.2 GA  **Issue Links:** - #18544 Allow a single element to override an array attribute in a meta-annotation (_**""depends on""**_) - #18022 Introduce predefined composed annotations in core Spring - #16901 Custom `@RequestMapping` annotations - #18566 Introduce common composed annotations for web scopes - #18544 Allow a single element to override an array attribute in a meta-annotation  1 votes, 14 watchers","closed","type: enhancement,","spring-projects-issues","2016-02-27T17:38:49Z","2019-01-13T05:28:00Z"
"","18469","@Transactional tests are executed without a transaction if transaction manager is not discovered [SPR-13895]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-13895](https://jira.spring.io/browse/SPR-13895?redirect=false)** and commented  #### Status Quo  Analysis performed in conjunction with #18465 has made it apparent that there was a regression from Spring 4.0.x to 4.1 and higher.  Since Spring 4.1, if a `PlatformTransactionManager` is neither present nor properly detected (i.e., due to the presence of multiple transactions managers), then a test annotated with `@Transactional` will be executed without a transaction **and** without any warning.  The deviates from the behavior in Spring 4.0.x and earlier versions in which an exception was thrown in such cases, letting the user know that the transaction manager could not be retrieved.  #### Deliverables  - [x] If a test method or test class is annotated with `@Transactional`, ensure that an exception is thrown if the `PlatformTransactionManager` cannot be retrieved.  ---  **Affects:** 4.1.7, 4.2 GA  **Issue Links:** - #18465 Support 'primary' transaction managers and data sources in the TestContext Framework","closed","type: bug,","spring-projects-issues","2016-01-26T18:50:18Z","2019-01-11T18:26:10Z"
"","18465","Support 'primary' transaction managers and data sources in the TestContext Framework [SPR-13891]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-13891](https://jira.spring.io/browse/SPR-13891?redirect=false)** and commented  #### Status Quo  Although it is possible to declare a `PlatformTransactionManager` as _primary_ in production configuration, the Spring TestContext Framework (TCF) has _never_ honored primary beans with regard to the transaction manager and data source. This behavior has been verified on Spring 3.1, 3.2, 4.0, 4.1, 4.2, and 4.3 snapshots.  #### Original Claim  It appears that changes made to the transaction manager look-up mechanism in the Spring TestContext Framework in Spring Framework 4.2 no longer honor _primary_ transaction managers when there are multiple transaction managers in the application context.  See the referenced discussion on Stack Overflow for details.  #### Deliverables  - [x] Ensure that _primary_ transaction managers are properly honored in the look-up algorithm in `retrieveTransactionManager()` (in `TestContextTransactionUtils`). - [x] Ensure that _primary_ data sources are properly honored in the look-up algorithm in `retrieveDataSource()` (in `TestContextTransactionUtils`).  ---  **Affects:** 3.2.14  **Reference URL:** http://stackoverflow.com/questions/34994324/rollbacktrue-not-working-in-spring-boot-1-3-x  **Issue Links:** - #18469 `@Transactional` tests are executed without a transaction if transaction manager is not discovered  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/677a321571e25449962befe876f543ce576ea3ca","closed","type: enhancement,","spring-projects-issues","2016-01-26T13:53:27Z","2019-01-13T05:32:00Z"
"","18380","Get rid of defensive checks for JAF across the framework [SPR-13807]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-13807](https://jira.spring.io/browse/SPR-13807?redirect=false)** and commented  #### Status Quo  Since JDK 1.6, the JavaBeans Activation Framework (_JAF_) is a standard part of the JDK. However, several parts of the framework perform defensive checks regarding the availability of JAF on the classpath. In addition, several parts of the documentation contain language similar to ""if JAF is present"".  #### Deliverables  1. Get rid of defensive checks for the presence of JAF 2. Update Javadoc and the reference manual accordingly    --- No further details from [SPR-13807](https://jira.spring.io/browse/SPR-13807?redirect=false)","closed","status: declined,","spring-projects-issues","2015-12-19T15:13:03Z","2016-07-07T14:20:07Z"
"","18128","Dispel the myth that Spring MVC Test only works with JUnit [SPR-13552]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-13552](https://jira.spring.io/browse/SPR-13552?redirect=false)** and commented  #### Status Quo  The testing chapter of the reference manual incorrectly states (or at least strongly _implies_) that the _Spring MVC Test framework_ only works with JUnit. This is, however, far from the truth. MVC Test works fine with TestNG and in theory with any other testing framework.  #### Deliverables  Update the reference manual to dispel the aforementioned myth.   ---  **Affects:** 3.2.11  **Backported to:** [4.1.8](https://github.com/spring-projects/spring-framework/milestone/132?closed=1)","closed","type: documentation,","spring-projects-issues","2015-10-08T14:42:10Z","2015-10-15T10:11:25Z"
"","18127","Modifications to UndertowXhrTransport for Undertow 1.3 introduce breaking changes [SPR-13551]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-13551](https://jira.spring.io/browse/SPR-13551?redirect=false)** and commented  The changes made to `UndertowXhrTransport` in #17950 broke `UndertowSockJsIntegrationTests`. For example, when executing the `AbstractSockJsIntegrationTests.echoXhr()` test, we see the following exception:  ``` java.util.concurrent.ExecutionException: java.lang.IllegalArgumentException: argument type mismatch 	at java.util.concurrent.FutureTask.report(FutureTask.java:122) 	at java.util.concurrent.FutureTask.get(FutureTask.java:192) 	at org.springframework.util.concurrent.SettableListenableFuture.get(SettableListenableFuture.java:122) 	at org.springframework.web.socket.sockjs.client.AbstractSockJsIntegrationTests.testEcho(AbstractSockJsIntegrationTests.java:277) 	at org.springframework.web.socket.sockjs.client.AbstractSockJsIntegrationTests.echoXhr(AbstractSockJsIntegrationTests.java:182) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:497) 	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) 	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) 	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) 	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26) 	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27) 	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55) 	at org.junit.rules.RunRules.evaluate(RunRules.java:20) 	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) 	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) 	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86) 	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192) Caused by: java.lang.IllegalArgumentException: argument type mismatch 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:497) 	at org.springframework.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:211) 	at org.springframework.web.socket.sockjs.client.UndertowXhrTransport$Undertow13BufferSupport.httpClientConnect(UndertowXhrTransport.java:592) 	at org.springframework.web.socket.sockjs.client.UndertowXhrTransport.executeReceiveRequest(UndertowXhrTransport.java:179) 	at org.springframework.web.socket.sockjs.client.UndertowXhrTransport.connectInternal(UndertowXhrTransport.java:150) 	at org.springframework.web.socket.sockjs.client.AbstractXhrTransport.connect(AbstractXhrTransport.java:132) 	at org.springframework.web.socket.sockjs.client.DefaultTransportRequest.connect(DefaultTransportRequest.java:149) 	at org.springframework.web.socket.sockjs.client.SockJsClient.doHandshake(SockJsClient.java:255) 	... 30 more ```  Furthermore, executing the `AbstractSockJsIntegrationTests.fallbackAfterTransportFailure()` test hangs the build completely, as can be seen in all recent _Performance_ build failures, beginning with [build 600](https://build.spring.io/browse/SPR-PERF-600).  ---  **Affects:** 4.2.2  **Issue Links:** - #17950 Make UndertowXhrTransport compatible with Undertow 1.3 - #18072 Make UndertowRequestUpgradeStrategy compatible with Undertow 1.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6b34fe3dd44efb783b57cb5672de3684f9dfd985","closed","type: bug,","spring-projects-issues","2015-10-08T12:06:53Z","2019-01-11T17:25:15Z"
"","18113","UriComponentsBuilder interprets empty request parameters as null [SPR-13537]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-13537](https://jira.spring.io/browse/SPR-13537?redirect=false)** and commented  #### Status Quo  #18101 brought it to our attention that `UriComponentsBuilder` returns `null` for _empty_ request parameters instead of an empty string.  For example, given a request such as `http://example.com/login?error`, the `error` request parameter is _empty_ but still present in the query string. Thus we would expect `UriComponentsBuilder` to store its value as an empty string; however, `UriComponentsBuilder` currently stores it in its query map as `null`.  This is contrast to Spring MVC's support for `@RequestParameter`.  When using `@RequestParameter` in a controller handler method, Spring always passes in an empty string for an _empty_ request parameter value, regardless of whether the `=` sign is present in the query string.  #### Analysis  The source of this behavior is in `UriComponentsBuilder.query(String)`, specifically in this line:  ```java queryParam(name, (value != null ? value : (StringUtils.hasLength(eq) ? """" : null))); ```  For _empty_ request parameter values, if the `=` sign is present, the value is set to an empty string `""""`; otherwise, the value is set to `null`.  Furthermore, similar logic exists in `UriComponentsBuilder.queryParam(String, Object...)`: `queryParam(...)` stores `null` instead of an empty string for an empty value.  #### Deliverables  1. Ensure that `UriComponentsBuilder` stores empty request parameters as empty strings.    - Updated both `query(String)` and `queryParam(String, Object...)`    - See TODO in `UriComponentsBuilderTests`.  ---  **Issue Links:** - #18101 HtmlUnitRequestBuilder doesn't handle query parameters without equals sign - #19456 Using the MvcUriComponentsBuilder to get a URL to a controller method adds empty parameter when the value is not provided  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c52f9d35244720937398976ea7f1a6abc74a8443","closed","status: bulk-closed,","spring-projects-issues","2015-10-04T15:46:35Z","2019-01-12T00:15:26Z"
"","18098","Throw exception with meaningful message if JUnit 4.9+ not present [SPR-13521]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-13521](https://jira.spring.io/browse/SPR-13521?redirect=false)** and commented  #### Status Quo  Spring Framework 4.1 raised the minimum JUnit version to 4.9 in the _Spring TestContext Framework_. At that time a check was added to `SpringJUnit4ClassRunner` to ensure that the `withRules()` method in `BlockJUnit4ClassRunner` is present. However, this is not a robust solution since the `withRules()` method exists since JUnit 4.7, and this has led to confusion in the community. See the linked discussion on Stack Overflow for details.  #### Deliverables  In `SpringJUnit4ClassRunner`, `SpringClassRule`, and `SpringMethodRule`:  1. Log an exception if `org.junit.runners.model.MultipleFailureException` is not present.    ---  **Affects:** 4.1 GA  **Reference URL:** http://stackoverflow.com/questions/30032592/why-the-cryptic-multiplefailureexception-error-message-with-the-springjunit4clas  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d883efcb2a1f799c4796c849fa377e4717c4203c","closed","type: enhancement,","spring-projects-issues","2015-09-28T18:04:34Z","2015-10-15T13:04:45Z"
"","18092","Remove AbstractJpaTests and revise spring-orm test suite accordingly [SPR-13515]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-13515](https://jira.spring.io/browse/SPR-13515?redirect=false)** and commented  #### Status Quo  Except for Spring's legacy JUnit 3.8 based testing framework which is still used internally within the `spring-orm` module, the Spring test suite was completely migrated to the JUnit 4 programming model in conjunction with #18091.  The reason the legacy testing framework is still based on JUnit 3.8 is that `AbstractJpaTests` uses a `ShadowingClassLoader` to load and execute the test in a different class loader.  Unfortunately, it is impossible to achieve the same results without introducing a custom JUnit `Runner`.  #### Possible Solutions  1. Introduce a custom `Runner` that reproduces the behavior in `AbstractJpaTests`. 2. Migrate the concrete subclasses of `AbstractJpaTests` to JUnit 4 without the use of a `ShadowingClassLoader`.  #### Deliverables  1. Remove `AbstractJpaTests` along with the remainder of the legacy JUnit 3.8 based testing framework in the `spring-orm` module. 2. Revise all concrete subclasses of `AbstractJpaTests` accordingly.  ---  **Affects:** 4.2 GA  **Issue Links:** - #17778 Upgrade core framework build to JDK 11 (_**""is depended on by""**_) - #18091 Migrate remaining JUnit 3 based tests to JUnit 4","closed","type: task,","spring-projects-issues","2015-09-27T20:14:21Z","2019-01-11T17:28:41Z"
"","18091","Migrate remaining JUnit 3 based tests to JUnit 4 [SPR-13514]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-13514](https://jira.spring.io/browse/SPR-13514?redirect=false)** and commented  #### Status Quo  JUnit 4.0 was released almost a decade ago; however, there are still numerous test classes in Spring's own test suite that are based on the legacy JUnit 3 programming model and APIs.  In preparation for the upcoming JUnit 5 (a.k.a., _JUnit Lambda_) release we should therefore proactively migrate our test suite completely to the JUnit 4 programming model.  #### Deliverables  1. [x] Migrate existing JUnit 3 based tests to JUnit 4. 2. [x] Migrate Spring's legacy testing framework -- which is still used internally within the `spring-orm` module -- to JUnit 4.    - This action has not been performed due to challenges resulting from the use of a `ShadowingClassLoader` in `AbstractJpaTests`.    - To be addressed in #18092.  ---  **Affects:** 4.2 GA  **Issue Links:** - #20449 SimpleAsyncTaskExecutor not respect ConcurrencyThrottleSupport.NO_CONCURRENCY limit - #18151 Introduce support for JUnit 5 in the TestContext framework - #18092 Remove AbstractJpaTests and revise spring-orm test suite accordingly","closed","type: task,","spring-projects-issues","2015-09-27T19:15:48Z","2019-08-12T10:40:43Z"
"","17490","Support multiple composed annotations on a single annotated element [SPR-13486]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-13486](https://jira.spring.io/browse/SPR-13486?redirect=false)** and commented  #### Status Quo  The `findMergedAnnotation*(...)` and `getMergedAnnotation*(...)` methods in `AnnotatedElementUtils` only support a _single_ target annotation and therefore a _single_ composed annotation.  However, there are certain scenarios for which it would be beneficial to retrieve multiple composed annotations on a single annotated element. As a concrete example, see #18054 which requests support for `@Cacheable`, `@CacheEvict`, and `CachePut` as merged _composed annotations_.  #### Deliverables  1. [x] Introduce support in `AnnotatedElementUtils` for processing multiple composed annotations above a single annotated element.  ---  **Affects:** 4.2 GA  **Issue Links:** - #18054 Support `@Cache`* as merged composed annotations (_**""is depended on by""**_) - #18545 Support repeatable annotations as composed annotations","closed","type: enhancement,","spring-projects-issues","2015-09-22T23:02:12Z","2019-01-13T05:41:24Z"
"","18022","Introduce predefined composed annotations in core Spring [SPR-13442]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-13442](https://jira.spring.io/browse/SPR-13442?redirect=false)** and commented  #### Status Quo  Spring Framework 4.2 introduced support for explicit attribute overrides in meta-annotations via the new `@AliasFor` annotation. This new support makes it possible to include a set of predefined _composed annotations_ in several modules of the Spring Framework.  ---  #### _Spring Composed_  For the time being, the Spring team is using the [`spring-composed`](https://github.com/sbrannen/spring-composed) project as a _playground_ for trying out new ideas with regard to what kinds of predefined composed annotations Spring should support.  **Feedback is welcome!**  ---  #### Candidates for Inclusion  The following candidates are for inclusion in the Spring Framework.  - `@GetMapping`, `@PostMapping`, `@PutMapping`, `@DeleteMapping`, & `@PatchMapping`, for standard Spring MVC controller methods - `@ApplicationScope`, `@SessionScope`, `@RequestScope`  ---  #### Possible Candidates for Inclusion  The following candidates are _possible_ for inclusion in the Spring Framework based on early feedback.  - `@HeadMapping`, `@OptionsMapping`, & `@TraceMapping` for standard Spring MVC controller methods - `@GetResource`, `@PostResource`, `@PutResource`, `@DeleteResource` etc. for generic REST-based Spring MVC controller methods with preconfigured response statuses - `@TransactionalService`, `@TransactionalComponent`, `@TransactionalRepository` - `@SingletonScope`, `@PrototypeScope`, `@GlobalSessionScope`  ---  #### Unlikely Candidates for Inclusion  The following candidates are _unlikely_ for inclusion in the Spring Framework based on early feedback.  - `@GetJson`, `@GetXml`, etc. for _opinionated_ REST-based Spring MVC controller methods - `@TransactionalController`, `@TransactionalRestController`  ---  #### Deliverables  1. Determine the set of predefined _composed annotations_ to introduce. 2. Create new issues to address individual _groups_ of composed annotations. 3. Implement, test, and document the new predefined _composed annotations_.  ---  **Affects:** 4.2 GA  **Issue Links:** - #16901 Custom `@RequestMapping` annotations - #18020 Use AnnotatedElementUtils instead of AnnotationUtils wherever feasible - #18021 Support `@ResponseStatus` as a merged composed annotation - #18565 Introduce common composed annotations for `@RequestMapping` - #18566 Introduce common composed annotations for web scopes - #16140 Document Spring Annotation Programming Model in the Wiki - #18047 Support `@CrossOrigin` as a merged composed annotation - #18054 Support `@Cache`* as merged composed annotations  7 votes, 17 watchers","closed","type: enhancement,","spring-projects-issues","2015-09-07T17:05:57Z","2019-01-13T05:36:07Z"
"","18021","Support @ResponseStatus as a merged composed annotation [SPR-13441]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-13441](https://jira.spring.io/browse/SPR-13441?redirect=false)** and commented  #### Status Quo  Although Spring MVC supports `@RequestMapping` as a merged annotation, the same is not true for `@ResponseStatus`. `@ResponseStatus` is in fact supported as a meta-annotation, just not as a merged annotation. This means that the `responseStatus` attribute override in the following custom composed `@Post` annotation is currently unsupported even though it is declared syntactically correct. Furthermore, use of the `responseStatus` attribute will fail silently: it will simply be ignored.  ```java @RequestMapping(method = POST) @ResponseStatus @Target(ElementType.METHOD) @Retention(RetentionPolicy.RUNTIME) @Documented public @interface Post {    @AliasFor(annotation = RequestMapping.class, attribute = ""path"")   String[] value() default {};    @AliasFor(annotation = RequestMapping.class, attribute = ""path"")   String[] path() default {};    @AliasFor(annotation = ResponseStatus.class, attribute = ""code"")   HttpStatus responseStatus() default HttpStatus.CREATED; } ```  #### Deliverables  1. [x] Look up `@ResponseStatus` using `AnnotatedElementUtils.findMergedAnnotation()` instead of `AnnotationUtils.findAnnotation()`.  ---  **Affects:** 4.2 GA  **Issue Links:** - #18028 Provide a mechanism for composed annotations to signal that they want to override attributes - #18020 Use AnnotatedElementUtils instead of AnnotationUtils wherever feasible - #18022 Introduce predefined composed annotations in core Spring - #18047 Support `@CrossOrigin` as a merged composed annotation - #18054 Support `@Cache`* as merged composed annotations  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e2bfbdcfd160d1a7be64b8eca53190f5698b7bcf","closed","type: enhancement,","spring-projects-issues","2015-09-07T16:51:58Z","2019-01-13T05:36:16Z"
"","18020","Use AnnotatedElementUtils instead of AnnotationUtils wherever feasible [SPR-13440]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-13440](https://jira.spring.io/browse/SPR-13440?redirect=false)** and commented  #### Status Quo  Spring Framework 4.2 introduced support for explicit annotation attribute overrides via `@AliasFor`; however, due to historical reasons, the Spring code base typically uses the lookup methods in `AnnotationUtils` which do not support attribute overrides.  For example, although Spring MVC supports `@RequestMapping` as a merged annotation, the same is not true for `@ResponseStatus`. `@ResponseStatus` is in fact supported as a meta-annotation, just not as a merged annotation. This means that the `responseStatus` attribute override in the following custom composed `@Post` annotation is currently unsupported even though it is declared syntactically correct. Furthermore, use of the `responseStatus` will fail silently: it will simply be ignored (see #18021).  ```java @RequestMapping(method = POST) @ResponseStatus @Target(ElementType.METHOD) @Retention(RetentionPolicy.RUNTIME) @Documented public @interface Post {    @AliasFor(annotation = RequestMapping.class, attribute = ""path"")   String[] value() default {};    @AliasFor(annotation = RequestMapping.class, attribute = ""path"")   String[] path() default {};    @AliasFor(annotation = ResponseStatus.class, attribute = ""code"")   HttpStatus responseStatus() default HttpStatus.CREATED; } ```  #### Deliverables  1. Determine which annotations in the Spring Framework should be supported as merged annotations (i.e., support attribute overrides). 2. Migrate from lookups in `AnnotationUtils` to methods such as `findAllMergedAnnotations()`, `findMergedAnnotation()`, or `getMergedAnnotation` in `AnnotatedElementUtils` wherever feasible.  ---  **Affects:** 4.2 GA  **Issue Links:** - #18028 Provide a mechanism for composed annotations to signal that they want to override attributes - #18022 Introduce predefined composed annotations in core Spring - #16140 Document Spring Annotation Programming Model in the Wiki - #18630 Allow `@Qualifier` to be used in composed annotations with attribute overrides - #19208 Optimize ordered event listener performance - #18021 Support `@ResponseStatus` as a merged composed annotation - #18047 Support `@CrossOrigin` as a merged composed annotation - #18054 Support `@Cache`* as merged composed annotations - #18376 Support `@AliasFor` for `@JmsListener` attributes  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/63115ed6eb9b94a85914c946f851b41a31d528f8, https://github.com/spring-projects/spring-framework/commit/c5b318a4cc7c459cb9e1f1277dc821cca460bcb9, https://github.com/spring-projects/spring-framework/commit/5025c615b14e50c1a831ed7c0485497a3462f5b4  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2015-09-07T16:43:51Z","2019-01-13T05:36:18Z"
"","18019","Document that @ResponseStatus overrides redirect views [SPR-13439]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-13439](https://jira.spring.io/browse/SPR-13439?redirect=false)** and commented  Unless the decision reached in #17789 is reverted, the JavaDoc for `@ResponseStatus` and the corresponding sections in the reference manual should be updated to point out that a status code configured via `@ResponseStatus` will **always** override the implicit or explicit redirect status code for a `RedirectView` or a `""redirect:...""` view name.  ---  **Issue Links:** - #17789 Support `@ResponseStatus` with RedirectView  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/55db4ae94b22c448566190f6fdfdc36f60819105","closed","in: web,","spring-projects-issues","2015-09-07T16:32:50Z","2019-01-13T05:36:20Z"
"","18752","three constructors in the org.springframework.expression.spel.ast package are not public [SPR-14181]","**[Sam Bishop](https://jira.spring.io/secure/ViewProfile.jspa?name=sbishop)** opened **[SPR-14181](https://jira.spring.io/browse/SPR-14181?redirect=false)** and commented  The constructors for these classes aren't public:  FloatLiteral IntLiteral LongLiteral  This prevents these classes from being used (easily) with a syntax besides SpEL.  I've checked, and the constructors for the rest of the classes in the package are public, so I don't think this was on purpose.   ---  **Affects:** 4.2.5, 4.3 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4be22c49383d1e69f8f0230f9e01ea3932df9b0c, https://github.com/spring-projects/spring-framework/commit/e38bfb1a68a62ea67ee6eda773700de9cc3530df","closed","type: enhancement,","spring-projects-issues","2016-04-15T17:29:58Z","2016-05-06T08:13:31Z"
"","18362","When using Programatic transaction management of SPR if the developer misses to commit or rollback the transaction ; when the thread is returned from pool next time the stale transaction is returned. [SPR-13789]","**[Sahil lone](https://jira.spring.io/secure/ViewProfile.jspa?name=sahil.lone@zycus.com)** opened **[SPR-13789](https://jira.spring.io/browse/SPR-13789?redirect=false)** and commented  When we use Platform transaction management of Spring , the below example is how we use it.  DefaultTransactionDefinition transactionDefinition = new DefaultTransactionDefinition(); transactionStatus = getTransactionManager().getTransaction(transactionDefinition); //do ur stuff here getTransactionManager().commit(transactionStatus);  If we will look above we have to explicitly commit the transaction or rollback it. In situations where we do not commit or rollback the transaction ; the transaction status is attached to thread and not removed on returning the thread to pool. As we already know only the owner function (function which started the transaction) can commit or rollback the transaction ; so when the transaction commit or rollback is missed , next time when the thread is again taken from pool and the thread is not recycled before reusing then the old transaction status is returned with thread . So any new transaction in case on TransactionDefinition.PROPAGATION_REQUIRED gives older transaction status and the current function calling the tx Manager doesn't become owner. So when the work is done and the function tries to commit or rollback , the transaction is niot actually commited. Because of this behaviour it leads to inconsistencies in data which developer is not aware.  This issue is because TransactionSynchronizationManager ie spring transaction management uses lot of thread local variable so the variable are not reset if transaction is not marked as completed.  There may be use cases where this behaviour maybe needed ie spaning transactions across thread reuse or across equests in case of serveet containers. But let me put this point that we can't be sure when thread variable will be garbage collected as it uses weak reference for thread local variables.  I have designed a Utility class  for my project which takes care or these issues and ask for configuration o enable the utility and what to when transaction is missed.  ---  **Affects:** 3.0.7  **Issue Links:** - #16383 Prevent corrupted ThreadLocals when mis-using triggerAfterCommit  0 votes, 5 watchers","open","type: enhancement,","spring-projects-issues","2015-12-14T10:42:27Z","2019-01-11T19:28:04Z"
"","18634","Native Support for pebble templates in Spring Web MVC [SPR-14062]","**[Sachin Walia](https://jira.spring.io/secure/ViewProfile.jspa?name=sachinwalia)** opened **[SPR-14062](https://jira.spring.io/browse/SPR-14062?redirect=false)** and commented  Pebble templates are popular and very high in performance compared to most of the competing frameworks. It'll be nice to have it natively supported by the Spring community where it may have much higher chance of recognition.  https://github.com/PebbleTemplates/pebble  ---  **Issue Links:** - #18368 Remove Velocity support","closed","type: enhancement,","spring-projects-issues","2016-03-16T18:08:56Z","2019-01-11T14:41:32Z"
"","18446","Support additional mime types in MediaType class [SPR-13873]","**[Sachin Walia](https://jira.spring.io/secure/ViewProfile.jspa?name=sachinwalia)** opened **[SPR-13873](https://jira.spring.io/browse/SPR-13873?redirect=false)** and commented  Following mime types are common place in web environment. However Spring MVC MediaType class just throws exception if we try to use their correct mime type. Moreover using application/octet-stream is also not an acceptable solution  1. SVG: image/svg+xml 2. WEBP: image/webp  Moreover there should be some way to define custom media type for any additional mime types.   --- No further details from [SPR-13873](https://jira.spring.io/browse/SPR-13873?redirect=false)","closed","in: core,","spring-projects-issues","2016-01-18T04:56:59Z","2019-01-11T18:28:20Z"
"","18453","Controller returning DeferredResult<> improperly closes connection on exception [SPR-13880]","**[Saar Picker](https://jira.spring.io/secure/ViewProfile.jspa?name=saarp)** opened **[SPR-13880](https://jira.spring.io/browse/SPR-13880?redirect=false)** and commented  Using spring-boot 1.2.4 with spring-core 4.1.6 on Java8.  There may be additional repros for this issue. I encountered while using a custom JSON serializer for one of my classes that had a bug. This issue only manifested when the response was wrapped in a DeferredResult<>().  The issue appears to be a sequence error where the socket for the HttpResponse gets closed prior to execution of the error controller. When the error controller runs, there is a second exception (stacktrace below). From the browser, no response is given.  Test URL1 - Has error, but succeeds: http://localhost:8080/testmeonce  Test URL2 - Has error and throws exception resulting in empty 500 response: http://localhost:8080/testmetwice  ``` 2016-01-21 14:58:42,567 http-nio-8080-exec-4 ERROR [dispatcherServlet] 0:0:0:0:0:0:0:1 /testmetwice - - - - Servlet.service() for servlet dispatcherServlet threw exception  java.lang.IllegalStateException: getOutputStream() has already been called for this response 	at org.apache.catalina.connector.Response.getWriter(Response.java:578) 	at org.apache.catalina.connector.ResponseFacade.getWriter(ResponseFacade.java:212) 	at javax.servlet.ServletResponseWrapper.getWriter(ServletResponseWrapper.java:109) 	at javax.servlet.ServletResponseWrapper.getWriter(ServletResponseWrapper.java:109) 	at org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration$SpelView.render(ErrorMvcAutoConfiguration.java:196) 	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1244) 	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1027) 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:971) 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:893) 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:966) 	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:857) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:622) 	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:842) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:729) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:291) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at com.staples.ecom.transaction.CorrelationHeaderFilter.doFilter(CorrelationHeaderFilter.java:33) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at com.staples.ecom.filter.RequestFilter.doFilter(RequestFilter.java:44) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:186) 	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:160) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:721) 	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:584) 	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:523) 	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:433) 	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:305) 	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:399) 	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:180) 	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79) 	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88) 	at org.apache.catalina.connector.CoyoteAdapter.asyncDispatch(CoyoteAdapter.java:390) 	at org.apache.coyote.http11.AbstractHttp11Processor.asyncDispatch(AbstractHttp11Processor.java:1709) 	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:649) 	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1521) 	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1478) 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) 	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) 	at java.lang.Thread.run(Thread.java:745)  2016-01-21 14:58:42,568 http-nio-8080-exec-4 ERROR [localhost] 0:0:0:0:0:0:0:1 /testmetwice - - - - Exception Processing ErrorPage[errorCode=0, location=/error]  org.springframework.web.util.NestedServletException: Request processing failed; nested exception is java.lang.IllegalStateException: getOutputStream() has already been called for this response 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:978) 	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:857) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:622) 	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:842) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:729) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:291) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at com.staples.ecom.transaction.CorrelationHeaderFilter.doFilter(CorrelationHeaderFilter.java:33) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at com.staples.ecom.filter.RequestFilter.doFilter(RequestFilter.java:44) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:186) 	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:160) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:721) 	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:584) 	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:523) 	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:433) 	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:305) 	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:399) 	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:180) 	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79) 	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88) 	at org.apache.catalina.connector.CoyoteAdapter.asyncDispatch(CoyoteAdapter.java:390) 	at org.apache.coyote.http11.AbstractHttp11Processor.asyncDispatch(AbstractHttp11Processor.java:1709) 	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:649) 	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1521) 	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1478) 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) 	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) 	at java.lang.Thread.run(Thread.java:745) Caused by: java.lang.IllegalStateException: getOutputStream() has already been called for this response 	at org.apache.catalina.connector.Response.getWriter(Response.java:578) 	at org.apache.catalina.connector.ResponseFacade.getWriter(ResponseFacade.java:212) 	at javax.servlet.ServletResponseWrapper.getWriter(ServletResponseWrapper.java:109) 	at javax.servlet.ServletResponseWrapper.getWriter(ServletResponseWrapper.java:109) 	at org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration$SpelView.render(ErrorMvcAutoConfiguration.java:196) 	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1244) 	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1027) 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:971) 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:893) 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:966) 	... 49 common frames omitted ```    ---  **Reference URL:** https://gist.github.com/saarp/4b441dfe23097aecccc6","closed","status: bulk-closed,","spring-projects-issues","2016-01-21T23:31:15Z","2019-01-12T02:44:15Z"
"","18183","Spring 4.2.2  [SPR-13605]","**[s](https://jira.spring.io/secure/ViewProfile.jspa?name=sante)** opened **[SPR-13605](https://jira.spring.io/browse/SPR-13605?redirect=false)** and commented  At start of tomcat, spring catch class not found of SynthesizingMethodParameter in BeanUtils.instantiateClass()  I have simple class annotated with `@RestController`  With spring 4.1.7 start correcteley   ---  **Affects:** 4.2.2  **Attachments:** - [classexample.txt](https://jira.spring.io/secure/attachment/23194/classexample.txt) (_573 bytes_) - [stacktrace.txt](https://jira.spring.io/secure/attachment/23195/stacktrace.txt) (_13.48 kB_)","closed","in: core,","spring-projects-issues","2015-10-23T12:50:52Z","2019-01-12T05:23:33Z"
"","18224","Content Disposition header being added on some urls...did not behave this way in 4.2.1 [SPR-13647]","**[Ryan Kaltreider](https://jira.spring.io/secure/ViewProfile.jspa?name=rkaltreider)** opened **[SPR-13647](https://jira.spring.io/browse/SPR-13647?redirect=false)** and commented  given the following urls  /users/user_name@website.com - Adds Content-Disposition f.txt /users/user_name@website.com/ - functions as expected.  Controller Request Mapping is ``` /users/{userId}  ```  These urls both function as expected in 4.2.1  Please let me know if you need any other info.  In my mvc config i have suffix matching set to false. ```  ---  **Affects:** 4.2.2  **Issue Links:** - #18164 Content-Disposition header causes download in browser for Spring Boot Actuator endpoints (_**""duplicates""**_) - #18124 Protect against RFD exploits","closed","in: web,","spring-projects-issues","2015-11-06T00:32:07Z","2019-01-12T16:45:54Z"
"","18821","Recent ServletServerHttpRequest.getURI() change breaks CORS requests with encoded characters [SPR-14248]","**[Russell Allen](https://jira.spring.io/secure/ViewProfile.jspa?name=allenru)** opened **[SPR-14248](https://jira.spring.io/browse/SPR-14248?redirect=false)** and commented  This change:  #18449  introduced a defect where request's with an origin header and where the request url contains query parameter character's that are typically encoded, trigger a URI formatting exception.  A plain Spring Web project with a no-op controller will reproduce this issue.  You must pass the origin header though, as this triggers the DefaultCorsProcessor to fully execute.  The call will work with a plain url and fail with a url with special characters:  works:  `http://127.0.0.1:8080/demo/test?param=plain` fails:  `http://127.0.0.1:8080/demo/test?param=^`  The root exception:  ``` java.net.URISyntaxException: Illegal character in query at index 39: http://127.0.0.1:8080/demo/test?param={} 	at java.net.URI$Parser.fail(URI.java:2848) 	at java.net.URI$Parser.checkChars(URI.java:3021) 	at java.net.URI$Parser.parseHierarchical(URI.java:3111) 	at java.net.URI$Parser.parse(URI.java:3053) 	at java.net.URI.(URI.java:588) 	at org.springframework.http.server.ServletServerHttpRequest.getURI(ServletServerHttpRequest.java:96) 	at org.springframework.web.util.UriComponentsBuilder.fromHttpRequest(UriComponentsBuilder.java:282) 	at org.springframework.web.util.WebUtils.isSameOrigin(WebUtils.java:814) 	at org.springframework.web.cors.DefaultCorsProcessor.processRequest(DefaultCorsProcessor.java:71) 	at org.springframework.web.servlet.handler.AbstractHandlerMapping$CorsInterceptor.preHandle(AbstractHandlerMapping.java:503) 	at org.springframework.web.servlet.HandlerExecutionChain.applyPreHandle(HandlerExecutionChain.java:134) 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:954) 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:893) 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:968) 	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:859) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:687) 	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:844) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790) ```  I tested this with Jetty 9.3.2 and 9.3.8, and it reproduced in both versions.  The exception is generated when the query parameter contains a curly brace or carat, but many other characters seem to work.  I assume that is simply an aspect of the URI encoding spec that I'm less familiar with.  ---  **Affects:** 4.2.5  **Issue Links:** - #18652 DefaultCorsProcessor's origin comparison is restrictive and inefficient (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2016-05-04T22:26:16Z","2019-01-14T04:39:29Z"
"","18438","Spring AOP's implementation of AspectJ's JoinPoint.Static part does not comply with AspectJ spec (not 'static', id always 0) [SPR-13865]","**[Russell Allen](https://jira.spring.io/secure/ViewProfile.jspa?name=allenru)** opened **[SPR-13865](https://jira.spring.io/browse/SPR-13865?redirect=false)** and commented  AspectJ's JoinPoint.StaticPart interface defines a separate object which is meant to be a singleton style reference to that join point, independent of the currently intercepted execution state (thus the 'static part' in name.)  Within this interface is a method, int getId(), which should...  > Return the id for this JoinPoint.StaticPart.  All JoinPoint.StaticPart instances are assigned an id number upon creation.  For each advised type the id numbers start at 0. > -javaDoc  The intent of the static part and the id method is to permit faster access to 'static' information about the location of the join point independent of the execution state (thread, parameters, etc).  This static information is handy for logging and necessary for creating unique cache keys.  Take for example this use case:  Create, using AOP, an aspect that counts and logs the execution of any request handler method on a per handler method basis.  The implementation will likely contain a Map to track the count per handler.  However, as is, the static part can not be used as a key.  Nor can the result of the id method be used as an intra-type method id.   ---  **Affects:** 4.1.7","closed","status: bulk-closed,","spring-projects-issues","2016-01-12T23:26:40Z","2019-01-12T02:44:22Z"
"","18439","@EventListener doesn't work when @PreAuthorize is present on any interface method implemented by the same class [SPR-13866]","**[Ruslan Stelmachenko](https://jira.spring.io/secure/ViewProfile.jspa?name=djxak)** opened **[SPR-13866](https://jira.spring.io/browse/SPR-13866?redirect=false)** and commented  The `@org.springframework.context.event.EventListener` annotation doesn't work when `@org.springframework.security.access.prepost.PreAuthorize` is present on any method of interface implemented by the same class.  Also it is true if `@PreAuthorize` is present on class method which implements some interface method without annotations.  For example:  ```java public interface MyService {  	@PreAuthorize(""hasAuthority('READ_WORKDAY')"") 	public void restrictedMethod();  }  @Service public class MyServiceImpl implements MyService {  	@Override 	public void restrictedMethod() { 	}  	@EventListener 	public void processBlackListEvent(BlackListEvent event) { 		System.out.println(""MyServiceImpl processBlackListEvent: "" + event); 	}  } ```  With this code `processBlackListEvent` method is never called when publishing `BlackListEvent`. Also we can place `@PreAuthorize` annotation to the implementation method and remove it from interface. In this case `@EventListener` also doesn't work.  If we remove `@PreAuthorize` then it starting to work again.  The old way with implementing `ApplicationListener` interface and overriding `onApplicationEvent` method also works fine.   ---  **Affects:** 4.2.2","closed","in: core,","spring-projects-issues","2016-01-13T06:58:30Z","2019-01-11T18:29:34Z"
"","18621","CORS support in 4.2 - default or configure to OFF [SPR-14049]","**[ruben malchow](https://jira.spring.io/secure/ViewProfile.jspa?name=rm)** opened **[SPR-14049](https://jira.spring.io/browse/SPR-14049?redirect=false)** and commented  hi,  i have a stackoverflow question here:  http://stackoverflow.com/questions/35982266/how-can-i-convince-spring-4-2-to-pass-options-request-through-to-the-controller  (which says it all, i guess?)  ---  **Issue Links:** - #18266 Enable/Disable Spring CORS option (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2016-03-14T08:06:36Z","2019-01-11T15:01:21Z"
"","18596","Support for OkHttp 3 [SPR-14024]","**[Roy Clarkson](https://jira.spring.io/secure/ViewProfile.jspa?name=rclarkson)** opened **[SPR-14024](https://jira.spring.io/browse/SPR-14024?redirect=false)** and commented  [OkHttp 3](https://publicobject.com/2015/12/12/com-squareup-okhttp3/) is now available. It introduces a new package and API, which is incompatible with previous versions. In the referenced pull request, I've add an implementation based on the existing OkHttp 2.x support in Spring Framework.  ---  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/988  **Issue Links:** - #17492 OkHttp implementations of ClientHttpRequestFactory / AsyncClientHttpRequestFactory - #18912 Compatibility with Jackson 2.8 - #18916 Deprecate OkHttp 2.x support","closed","type: enhancement,","spring-projects-issues","2016-03-05T17:08:46Z","2019-01-11T15:03:54Z"
"","18805","Reactor2TcpClient does not remove TcpClient instances after connection closed [SPR-14231]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-14231](https://jira.spring.io/browse/SPR-14231?redirect=false)** and commented  This was first reported in [Boot 5810](https://github.com/spring-projects/spring-boot/issues/5810) where there is a detailed description.  ---  **Affects:** 4.2.5  **Issue Links:** - #18803 Reactor2TcpClient leaks threads on shutdown  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/220711d45be401e3c38339d2b40e7c4cb62020d5, https://github.com/spring-projects/spring-framework/commit/d48eeb2c84e1be78dc1d09f02ab7d0747506df86","closed","type: bug,","spring-projects-issues","2016-04-28T19:21:20Z","2019-01-14T04:39:33Z"
"","18757","Backport MVC config path config options to 3.2.x [SPR-14186]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-14186](https://jira.spring.io/browse/SPR-14186?redirect=false)** and commented  That's the `PathMatchConfigurer` from the MVC Java config and `` from the MVC namespace.  ---  **Affects:** 3.2.16  **Issue Links:** - #14796 Expose path-related request mapping settings in the MVC XML namespace - #16111 Expose path-related request mapping settings in the MVC Java config","closed","type: enhancement,","spring-projects-issues","2016-04-18T14:29:03Z","2019-01-11T16:34:46Z"
"","18733","Reactive web module [SPR-14161]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-14161](https://jira.spring.io/browse/SPR-14161?redirect=false)** and commented  Create `spring-web-reactive` module as a reactive alternative to `spring-webmvc` and building on the reactive support from spring-core and spring-web (#18724, #18725, #18727, #18728).  Core contracts from `spring-webmvc` such as `HandlerMapping`, `HandlerAdapter`, `ViewResolver` and others will be re-created with fully asynchronous and non-blocking semantics based on Reactive Streams with Project Reactor used for Reactive Streams support.  The initial M1 goals for the module are support for `@RequestMapping` methods focusing on REST scenarios. Basic HTML template rendering and static resource serving will also be supported but will lack more advanced features such as forms, data binding, etc.  ---  **Affects:** 4.2.5  **Issue Links:** - #18724 Reactive client and server HTTP adapters (_**""depends on""**_) - #18725 Reactive server web support (_**""depends on""**_) - #18727 ByteBuffer abstraction (_**""depends on""**_) - #18728 Reactive serialization & deserialization (_**""depends on""**_)","closed","type: enhancement,","spring-projects-issues","2016-04-12T15:53:46Z","2019-01-11T16:35:58Z"
"","18732","HTTP cookie abstraction [SPR-14160]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-14160](https://jira.spring.io/browse/SPR-14160?redirect=false)** and commented  Provide common abstraction for access to HTTP cookies to avoid direct dependency on underlying runtime APIs (Servlet 3.1, Reactor IO, RxNetty, Undertow) for the same. The abstractions should clearly separate `HttpCookie` (a basic name-value pair) from a `ResponseCookie` (the cookie sent in a server response with additional policy attributes).  To reflect the asymmetry of `HttpCookie` (sent by clients and received by servers) vs `ResponseCookie` (sent by servers and received clients) it may be best to expose them through the client and server HTTP request and response. Furthermore that reflects the fact we are not directly parsing cookie headers but rather adapting to underlying client and server cookie-related APIs. In turn, `HttpEntity` and `ResponseEntity` will also need to expose cookie information.   ---  **Affects:** 4.2.5","closed","type: enhancement,","spring-projects-issues","2016-04-12T15:50:47Z","2016-07-28T14:17:37Z"
"","18731","Composition adapters for Reactive Streams [SPR-14159]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-14159](https://jira.spring.io/browse/SPR-14159?redirect=false)** and commented  Add a `GenericConverter` for adapting async types (RxJava 1.x and `CompletableFuture`) to Reactive Streams using Project Reactor converters to `Flux` and `Mono`. This makes it easy to work with any composition library within the framework and also to check stream semantics (stream of 0..1 vs stream of many).  ---  **Affects:** 4.2.5  **Reference URL:** https://github.com/spring-projects/spring-reactive/tree/master/src/main/java/org/springframework/core/convert/support  **Issue Links:** - #19195 Support for RxJava 2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/101220bad1ac3b4082a08aff4e9c8254e71febaf","closed","type: enhancement,","spring-projects-issues","2016-04-12T15:49:06Z","2019-01-11T16:37:30Z"
"","18730","Reactive encoding and decoding of JSON with Jackson [SPR-14158]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-14158](https://jira.spring.io/browse/SPR-14158?redirect=false)** and commented  Add support for encoding and decoding JSON with Jackson based on #18728. Since Jackson does not support a non-blocking mode (see https://github.com/FasterXML/jackson-core/issues/57), for now we can incrementally parse JSON arrays and allow streaming of JSON arrays.  ---  **Affects:** 4.2.5  This issue is a sub-task of #18728  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9fb8a2eb2e05b99179614a7d67a1a745e432819c, https://github.com/spring-projects/spring-framework/commit/74158af1b9ade90193b4e3687b90532fd7138325, https://github.com/spring-projects/spring-framework/commit/903770f008910973b80579b669f300b21c671190","closed","in: core,","spring-projects-issues","2016-04-12T15:45:37Z","2019-01-11T16:37:16Z"
"","18729","Reactive encoding and decoding of XML [SPR-14157]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-14157](https://jira.spring.io/browse/SPR-14157?redirect=false)** and commented  Add support for XML encoding and decoding based on JAXB2 and the Aalto async XML API if available on the classpath for non-blocking parsing.  ---  **Affects:** 4.2.5  This issue is a sub-task of #18728","closed","in: core,","spring-projects-issues","2016-04-12T15:41:32Z","2019-01-11T16:37:18Z"
"","18728","Reactive serialization & deserialization [SPR-14156]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-14156](https://jira.spring.io/browse/SPR-14156?redirect=false)** and commented  Provide `Decoder` for decoding a byte stream to higher-level objects and `Encoder` for encoding objects into a byte stream. This is similar to existing converter mechanisms (e.g. `HttpMessageConverter`) but built for use with Reactive Streams.  The new `Encoder` and `Decoder` should simply work with Reactive Streams and the new DataBuffer abstraction (see #18727) and therefore be reusable in different context (Web, JMS, etc).  Given the choice to use Project Reactor for Reactive Streams support internally, input can be exposed as a Reactor `Flux` while output can be provided as a plain Reactive Streams `Publisher` which could be `Flux` or any Reactive Streams `Publisher`.  ---  **Affects:** 4.2.5  **Sub-tasks:** - #18729 Reactive encoding and decoding of XML - #18730 Reactive encoding and decoding of JSON with Jackson  **Issue Links:** - #18727 ByteBuffer abstraction (_**""depends on""**_) - #18733 Reactive web module (_**""is depended on by""**_)","closed","type: enhancement,","spring-projects-issues","2016-04-12T15:35:36Z","2019-01-11T16:37:07Z"
"","18727","ByteBuffer abstraction [SPR-14155]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-14155](https://jira.spring.io/browse/SPR-14155?redirect=false)** and commented  Provide a basic abstraction for working with byte buffers including `DataBuffer` and `DataByfferAllocator` for allocating heap-based and direct buffers. This helps to avoid direct dependency on library and runtime specific APIs (e.g. Java NIO vs Netty `ByteBuf`) in framework functionality for example for serialization and deserialization of byte streams.  ---  **Affects:** 4.2.5  **Issue Links:** - #18728 Reactive serialization & deserialization (_**""is depended on by""**_) - #18733 Reactive web module (_**""is depended on by""**_)","closed","type: enhancement,","spring-projects-issues","2016-04-12T15:33:29Z","2019-01-11T16:37:13Z"
"","18726","Reactive Web client [SPR-14154]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-14154](https://jira.spring.io/browse/SPR-14154?redirect=false)** and commented  In addition to reactive HTTP abstractions (see #18724) we need a `WebClient` to perform HTTP requests with higher level support for serializing and deserializing business objects to and from JSON, XML and other content types.  This is equivalent to the existing `RestTemplate` and `AsyncRestTemplate` but built on the reactive HTTP request and response from #18724. The new `WebClient` should provide first class support for using different async composition libraries with built-in support for Reactor and RxJava 1.x.  ---  **Affects:** 4.2.5  **Issue Links:** - #18724 Reactive client and server HTTP adapters (_**""depends on""**_)","closed","type: enhancement,","spring-projects-issues","2016-04-12T15:31:31Z","2019-01-11T16:36:59Z"
"","18725","Reactive server web support [SPR-14153]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-14153](https://jira.spring.io/browse/SPR-14153?redirect=false)** and commented  In addition to basic reactive HTTP abstractions (see #18724) we need higher-level but still general-purpose, server-side web functionality commonly used for web framework and web applications. This is similar to the Servlet API but is not the Servlet API due to the Reactive Streams support as well as the goal to adapt to non-servlet runtimes (e.g. Netty).  The initial goals:  `WebFilter` and `WebHandler` for chained request processing with filters aimed at cross-cutting, application-agnostic requirements (e.g. security, timeouts, etc) and handlers to actually handle the request.  `WebExceptionHandler` for pluggable error handling.  `ServerWebExchange` exposing lower level HTTP request and response and provides access to additional features such as request and session attributes.  `WebSession` to support server-side session attributes with additional supporting abstractions to resolve session ids, load and store session attributes.  ---  **Affects:** 4.2.5  **Issue Links:** - #18724 Reactive client and server HTTP adapters (_**""depends on""**_) - #18733 Reactive web module (_**""is depended on by""**_)","closed","type: enhancement,","spring-projects-issues","2016-04-12T15:27:28Z","2019-01-11T16:37:04Z"
"","18724","Reactive client and server HTTP adapters [SPR-14152]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-14152](https://jira.spring.io/browse/SPR-14152?redirect=false)** and commented  At present `org.springframework.http` contains client and server HTTP abstractions that expose request and response content as `java.io.InputStream` or `java.io.OutputStream`.  We need reactive, non-blocking alternative abstractions with input and output exposed through Reactive Streams. Given the choice to use Project Reactor for Reactive Streams support internally, input can be exposed as a Reactor `Flux` while output can be provided as a plain Reactive Streams `Publisher` which could be `Flux` or any Reactive Streams `Publisher`.  For server side HTTP support, a new `HttpHandler` accepting the reactive request and response represents Spring’s lowest level abstraction for HTTP runtimes with Reactive Streams support. To adapt runtimes would require an `HttpHandler` and corresponding request and response adapters. Initial built-in support is for Servlet 3.1+ containers, Netty-based Reactor IO, RxNetty, and Undertow.  The built-in options on the client side is for Netty-based Reactor IO and RxNetty.  ---  **Affects:** 4.2.5  **Issue Links:** - #18725 Reactive server web support (_**""is depended on by""**_) - #18726 Reactive Web client (_**""is depended on by""**_) - #18733 Reactive web module (_**""is depended on by""**_)","closed","type: enhancement,","spring-projects-issues","2016-04-12T15:17:13Z","2019-01-11T16:36:53Z"
"","18650","Compatibility with Tomcat 8.5.2 and 9.0 M6 [SPR-14078]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-14078](https://jira.spring.io/browse/SPR-14078?redirect=false)** and commented  Tomcat 8.5 is about to be released as a backport of HTTP/2 functionality from the Tomcat 9.0 line, while still being compatible with Servlet 3.1 and JDK 7.  ---  **Affects:** 4.2.5  **Issue Links:** - #18056 Compatibility with WildFly 10 - #18360 Compatibility with JBoss EAP 7 - #21015 Upgrade framework build to Tomcat 9.0 and Undertow 2.0","closed","type: task,","spring-projects-issues","2016-03-22T14:18:36Z","2019-01-11T14:41:07Z"
"","18468","Convenient access to session and request attributes in controller methods [SPR-13894]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-13894](https://jira.spring.io/browse/SPR-13894?redirect=false)** and commented  The existing `@SessionAttributes` is for model attributes to be saved in the HTTP session during a controller workflow. Such attributes are temporarily stored and are to be removed once the controller indicates completion of the workflow. There is a need for convenient access to more permanent session attributes managed globally, outside the controller. Currently it's possible to inject the `WebRequest`, `HttpSession`, or to use `@Value` with an EL expression.  A dedicated `@SessionAttribute` parameter annotation with a required flag would look up and cast the session attribute. The session attribute name will default to the parameter type name since unlike a model attribute, a session attribute could be a simple type. A similar `@RequestAttribute` would do the same for access to request attributes.  ---  **Affects:** 4.2.4  **Issue Links:** - #19212 Allow `@PathVariable` to be optional - #16171 Provide `@ModelAttribute`(required=""false"") for session attributes (_**""supersedes""**_) - #10050 `@SessionParam` or `@SessionAttribute` Annotation for passing a Session Attribute to a Controller (_**""supersedes""**_) - #9676 Add `@SessionMapping`  (_**""supersedes""**_) - #11251 Request attributes not conveniently accessible using `@Value` in `@Controllers` (_**""supersedes""**_) - #11801 Improve the way we access to Session attributes (_**""supersedes""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e62ada898be1180bc13824ad5c3056d42015db04, https://github.com/spring-projects/spring-framework/commit/698f923fc3178bb9a35e1cb34c388d8703e45b99  1 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2016-01-26T17:07:59Z","2019-01-13T05:30:48Z"
"","18335","Configure view controllers with the ApplicationContext [SPR-13762]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-13762](https://jira.spring.io/browse/SPR-13762?redirect=false)** and commented  The ViewControllerRegistry should call setApplicationContext on the ParameterizableViewController (and the contained views like RedirectView) instances it creates. Not doing so can [cause issues](https://github.com/spring-projects/spring-boot/issues/3076) in Spring Boot where the ContextLoader is not used and we cannot fall back on ContextLoader.getCurrentWebApplicationContext().   ---  **Affects:** 4.1.8, 4.2.2  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/3076  **Backported to:** [4.1.9](https://github.com/spring-projects/spring-framework/milestone/133?closed=1)","closed","type: enhancement,","spring-projects-issues","2015-12-04T16:36:47Z","2015-12-17T09:05:31Z"
"","18315","Controller method argument initialized either from the request body or from request parameters [SPR-13742]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-13742](https://jira.spring.io/browse/SPR-13742?redirect=false)** and commented  `@RequestBody` converts the body of the request to an object while `@ModelAttribute` binds request parameters to an object. The former is common with REST APIs while the latter is common with HTML forms in browser applications.  JavaScript UI components however may send HTTP GET requests via Ajax with data represented either as JSON input in the body or appended as query parameters. See relevant [discussion under SPR-13679](https://jira.spring.io/browse/SPR-13679?focusedCommentId=121834&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-121834). It would be useful to have a single controller method argument that supports both.  One way to do this could be to delegate to either `@RequestBody` or `@ModelAttribute` argument resolution. However for the given use case it may make more sense to somehow fold this together with `@RequestBody` handling such that we either read the body or treat request parameters as form data. This is something [we already do](https://github.com/spring-projects/spring-framework/blob/d501137f4ee9325693d286045531d58bad1c709c/spring-web/src/main/java/org/springframework/http/server/ServletServerHttpRequest.java#L180) for HTTP POST albeit for a different reason (i.e. to avoid issues where a call to getParameter from a Filter causes the request body to be consumed before we try to read it). This would also be a more consistent and simpler to understand approach, effectively it can still be thought of as `@RequestBody` handling. It would also be suited for the given use case, i.e. Ajax requests where for example a 400 response is perfectly okay for error responses (vs rendering an HTML error page).  ---  **Affects:** 4.2.3  **Issue Links:** - #18441 `@RestController` avoid declare `@RequestBody` too - #18254 True Content-Negotiation (_**""supersedes""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/cdde05be9a393ad5d1a16f9118d6d0ecc4a533b0  2 votes, 8 watchers","closed","type: enhancement,","spring-projects-issues","2015-11-30T16:35:59Z","2019-01-13T05:32:49Z"
"","18240","Upgrade to Reactor 2.0.7 [SPR-13665]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-13665](https://jira.spring.io/browse/SPR-13665?redirect=false)** and commented  Creating a placeholder ticket here in case anyone else comes across the memory leak we found affecting use of Reactor 2.0.6 with Spring's STOMP broker relay.   ---  **Affects:** 4.2.2  **Reference URL:** https://github.com/reactor/reactor/issues/568  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cf4a417f712a8c4c1552011ffbaf1b9b688e4d22","closed","type: task,","spring-projects-issues","2015-11-10T19:21:51Z","2015-11-15T17:03:15Z"
"","18239","Improve efficiency of heartbeats in WebSocketStompClient with many connections [SPR-13664]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-13664](https://jira.spring.io/browse/SPR-13664?redirect=false)** and commented  Currently  WebSocketStompClient can be configured with a TaskScheduler and it uses two tasks per STOMP connection to manage read/write inactivity events. This can become rather inefficient when used to create thousands of connections such as in performance tests. It becomes even harder if running both clients and server locally.  One design challenge is that the each STOMP connection can have its own heartbeat settings. In order to have a single task to handle heartbeats across many sessions, that task might have to run as frequently as the shortest heartbeat period which might not be optimal if most other connections have longer periods.  The second issue is that using a single task for heartbeats across all connections would create a potential bottleneck on the write side. One slow connection might cause others to miss sending their heartbeat on time.  We could address the first challenge by expecting heartbeat settings to be fixed and not change after startup such that each WebSocketStompClient instance has consistent heartbeat settings for all of its connections. That would simplify heartbeat management across a large number of connections. The same might also help for grouping connections at different speeds.  The main use case currently is performance testing so if necessary we could explicitly provide options for that which would allow us to make assumptions.   ---  **Affects:** 4.2.2  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/4394  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9ac9135c244695e827c8dfd29209e337f4df042b  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2015-11-10T16:51:47Z","2016-03-18T21:04:45Z"
"","18212","IllegalArgumentException when using AnnotationUtils.findAnnotation [SPR-13634]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-13634](https://jira.spring.io/browse/SPR-13634?redirect=false)** and commented  ``` java.lang.IllegalArgumentException: interface org.springframework.messaging.simp.annotation.SendToUser is not visible from class loader 	at java.lang.reflect.Proxy$ProxyClassFactory.apply(Proxy.java:616) 	at java.lang.reflect.Proxy$ProxyClassFactory.apply(Proxy.java:592) 	at java.lang.reflect.WeakCache$Factory.get(WeakCache.java:244) 	at java.lang.reflect.WeakCache.get(WeakCache.java:141) 	at java.lang.reflect.Proxy.getProxyClass0(Proxy.java:455) 	at java.lang.reflect.Proxy.newProxyInstance(Proxy.java:738) 	at org.springframework.core.annotation.AnnotationUtils.synthesizeAnnotation(AnnotationUtils.java:1280) 	at org.springframework.core.annotation.AnnotationUtils.findAnnotation(AnnotationUtils.java:500) 	at org.springframework.core.annotation.AnnotationUtils.findAnnotation(AnnotationUtils.java:561) 	at org.springframework.messaging.handler.HandlerMethod.getMethodAnnotation(HandlerMethod.java:214) 	at org.springframework.messaging.handler.HandlerMethod$HandlerMethodParameter.getMethodAnnotation(HandlerMethod.java:275) 	at org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler.supportsReturnType(SendToMethodReturnValueHandler.java:136)  ```  ---  **Affects:** 4.2 GA  **Issue Links:** - #18271 SynthesizedAnnotation is not visible from class loader","closed","in: core,","spring-projects-issues","2015-11-02T15:06:06Z","2019-01-11T19:17:17Z"
"","18207","Content-Disposition added for @ResponseBody methods explicitly mapped to "".html"" or other extensions [SPR-13629]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-13629](https://jira.spring.io/browse/SPR-13629?redirect=false)** and commented  The fix to protect against RFD exploits (#18124) introduced a ""Content-Disposition:attachment;filename=f.txt"" response header for `@ResponseBody` methods where the URL appears to have an extension that is neither whitelisted by default nor explicitly registered by the application.  By default "".html"" is not whitelisted since a controller method returning String can be rendered as any requested content type (since StringHttpMessageConverter accepts `""*/*""`) and in the case of HTML that can lead to XSS and RFD attacks.  However as [commented](https://github.com/spring-projects/spring-boot/issues/4220#issuecomment-152812708) under Spring Boot #4220 we should consider ways to make it straight-forward to render HTML via `@ResponseBody` when that is the actual intent.  https://github.com/spring-projects/spring-boot/issues/4220#issuecomment-152812708  ---  **Affects:** 3.2.15, 4.1.8, 4.2.2  **Issue Links:** - #18222 Behavior change to Content-Disposition on `@RequestMapping` endpoint (_**""is duplicated by""**_) - #18124 Protect against RFD exploits - #18164 Content-Disposition header causes download in browser for Spring Boot Actuator endpoints  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f2e4da3dacf208ae0f7791518f011fcd527f8c1d, https://github.com/spring-projects/spring-framework/commit/237439ef972214e10396b0b88be9a58d7f33bccf, https://github.com/spring-projects/spring-framework/commit/d500d523e7b30c82505e562224e9d77224373df5, https://github.com/spring-projects/spring-framework/commit/e190f266699a0af648829f5683f4ca59d8c7168e, https://github.com/spring-projects/spring-framework/commit/6a9329cb761257cacd45a0d14eaa48e289a25630, https://github.com/spring-projects/spring-framework/commit/bdb71e91ad63d1a8da4bf8d6e9319c35afe0f5c8  **Backported to:** [4.1.9](https://github.com/spring-projects/spring-framework/milestone/133?closed=1), [3.2.16](https://github.com/spring-projects/spring-framework/milestone/104?closed=1)","closed","type: bug,","spring-projects-issues","2015-11-01T14:08:30Z","2019-01-13T05:34:43Z"
"","18204","Improve and/or provide control over ETag/If-None-Match logic in HttpEntityMethodProcessor [SPR-13626]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-13626](https://jira.spring.io/browse/SPR-13626?redirect=false)** and commented  #18074 ensured ETag/If-None-Match logic applies only to HTTP GET requests. While this logic is HTTP spec compliant, [as explained](https://jira.spring.io/browse/SPR-13496?focusedCommentId=121060&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-121060) under #18074 it can still cause issues with existing clients that are sending `If-None-Match: *` despite not being able to deal with 304 responses in the first place.  The purpose of this ticket is to continue the discussion and find a reasonable solution for that problem.  ---  **Affects:** 4.2.2  **Issue Links:** - #18074 ETag/If-None-Match logic in HttpEntityMethodProcessor should not affect methods other than HTTP GET  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/889366320d70132b1a0decc7b71b70d97b8f6a10","closed","type: enhancement,","spring-projects-issues","2015-10-30T15:23:53Z","2019-01-11T19:16:26Z"
"","18190","Skip Content-Disposition header when requestUri is the context and/or the servlet path [SPR-13612]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-13612](https://jira.spring.io/browse/SPR-13612?redirect=false)** and commented  The fix to protect against RFD exploits (#18124) introduced a ""Content-Disposition:attachment;filename=f.txt"" response header for `@ResponseBody` methods where the URL appears to have an extension that is neither whitelisted by default nor explicitly registered by the application.  However if you name an application with Maven conventions my-app.1.3.4-SNAPSHOT and deploy to a servlet container a Content-Disposition header is added for the URLs that match the context and/or servlet path.  ---  **Affects:** 4.1.8, 4.2.2  **Issue Links:** - #18165 Skip Content-Disposition header when status != 2xx (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2015-10-27T03:03:06Z","2019-01-12T16:45:57Z"
"","18171","Make use of native doUpgrade operation in Undertow 1.3.5+ / 1.4 [SPR-13593]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-13593](https://jira.spring.io/browse/SPR-13593?redirect=false)** and commented  Undertow 1.3.1+ provides an API for upgrading to WebSocket at runtime similar to Tomcat. See https://github.com/undertow-io/undertow/commit/9180db6057f5804231d94d2fc149f551e29d61f4.  ---  **Affects:** 4.2.2  **Issue Links:** - #18073 Require Undertow 1.3.5+, Tyrus 1.11+, Jetty 9.3+, Tomcat 8.5+ (_**""is depended on by""**_) - #18106 ClassNotFoundException: org.xnio.StreamConnection in Wildfly 10.0.0.CR2 - #18197 UndertowRequestUpgradeStrategy not compatible with WildFly anymore - #18360 Compatibility with JBoss EAP 7 - #18694 Initial compatibility with Undertow 2.0 - #18900 Compatibility with Undertow 1.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8656186f60f680a0487fd238da6918fbe67724f6","closed","type: enhancement,","spring-projects-issues","2015-10-21T14:20:49Z","2019-01-11T17:37:08Z"
"","18165","Skip Content-Disposition header when status != 2xx [SPR-13588]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-13588](https://jira.spring.io/browse/SPR-13588?redirect=false)** and commented  The fix to protect against RFD exploits (#18124) introduced a `""Content-Disposition:attachment;filename=f.txt""` response header for `@ResponseBody` methods where the URL appears to have an extension that is neither whitelisted by default nor explicitly registered by the application.  The URL checked for extensions is always the original URL even in the case of a forwarded request. In the case of an ERROR dispatch, Servlet containers are expected to set up the same request attributes as for forwarded requests.  Since Spring Boot relies on ERROR dispatches, a request with an unknown extension that results in an error can be rendered with a Content-Disposition header. This doesn't appear to cause issues in the browser but we should explore whether we can drop the header in such cases.  Note this issue was originally reported under [Spring Boot ticket #4220](https://github.com/spring-projects/spring-boot/issues/4220#issuecomment-148917466).  ---  **Affects:** 3.2.15, 4.1.8, 4.2.2  **Issue Links:** - #18190 Skip Content-Disposition header when requestUri is the context and/or the servlet path (_**""is duplicated by""**_) - #18164 Content-Disposition header causes download in browser for Spring Boot Actuator endpoints - #18124 Protect against RFD exploits  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a8798970639033f5cdcf979c4ee7174ba00157f2, https://github.com/spring-projects/spring-framework/commit/050e79e45ed0cdab1a4e3f522e2e9b601a13d94d  **Backported to:** [4.1.9](https://github.com/spring-projects/spring-framework/milestone/133?closed=1), [3.2.16](https://github.com/spring-projects/spring-framework/milestone/104?closed=1)","closed","type: enhancement,","spring-projects-issues","2015-10-19T16:18:18Z","2019-01-11T17:37:55Z"
"","18164","Content-Disposition header causes download in browser for Spring Boot Actuator endpoints [SPR-13587]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-13587](https://jira.spring.io/browse/SPR-13587?redirect=false)** and commented  The fix to protect against RFD exploits (#18124) introduced a `""Content-Disposition:attachment;filename=f.txt""` response header for `@ResponseBody` methods where the URL appears to have an extension that is neither whitelisted by default nor explicitly registered by the application.  Spring Boot Actuator [exposes many endpoints](http://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-metrics.html#production-ready-system-metrics) that naturally contain dots and do not represent an extension. When such a URL is typed in a browser it causes content to be downloaded as ""f.txt"" rather than rendered.  Several example mappings in Boot:  ``` /metrics/{name:.*} /env/{name:.*} /diff/{fromVersion}/{toVersion} ```  We need to consider ways to make the fix for RFD more flexible with this case in mind (and possible others that might yet be reported), without compromising the security of the application. For once it looks like Spring Boot metrics aren't exposed to RFD since the metric name in the URL has to match a known metric so for example appending a random extension should result in a 404.  Note this issue was originally reported under [Spring Boot ticket #4220](https://github.com/spring-projects/spring-boot/issues/4220#issuecomment-149163004).  ---  **Affects:** 4.1.8, 4.2.2  **Issue Links:** - #18224 Content Disposition header being added on some urls...did not behave this way in 4.2.1 (_**""is duplicated by""**_) - #18207 Content-Disposition added for `@ResponseBody` methods explicitly mapped to "".html"" or other extensions - #18124 Protect against RFD exploits - #18220 Content-Disposition with fixed file name ""f.txt"" causes confusion - #18165 Skip Content-Disposition header when status != 2xx  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1489e29d0c0d91da194721eb47f415118b00b532, https://github.com/spring-projects/spring-framework/commit/3a919a48d6941622ae1b08034630b0f565d0554b, https://github.com/spring-projects/spring-framework/commit/92ca537d6147eceedb39ee389ae9eac9c3d5a955  **Backported to:** [4.1.9](https://github.com/spring-projects/spring-framework/milestone/133?closed=1), [3.2.16](https://github.com/spring-projects/spring-framework/milestone/104?closed=1)  1 votes, 7 watchers","closed","type: bug,","spring-projects-issues","2015-10-19T16:07:22Z","2019-01-13T20:49:10Z"
"","18124","Protect against RFD exploits [SPR-13548]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-13548](https://jira.spring.io/browse/SPR-13548?redirect=false)** and commented  For details and concrete examples of RFD attacks see the [RFD paper](https://www.trustwave.com/Resources/SpiderLabs-Blog/Reflected-File-Download---A-New-Web-Attack-Vector/) from Trustwave.  For information specific to Spring MVC see the [CVE-2015-5211](http://pivotal.io/security/cve-2015-5211) security report.  ---  **Affects:** 3.2.14, 4.1.7, 4.2.1  **Issue Links:** - #18224 Content Disposition header being added on some urls...did not behave this way in 4.2.1 - #18207 Content-Disposition added for `@ResponseBody` methods explicitly mapped to "".html"" or other extensions - #18164 Content-Disposition header causes download in browser for Spring Boot Actuator endpoints - #18165 Skip Content-Disposition header when status != 2xx - #18220 Content-Disposition with fixed file name ""f.txt"" causes confusion  **Backported to:** [4.1.8](https://github.com/spring-projects/spring-framework/milestone/132?closed=1), [3.2.15](https://github.com/spring-projects/spring-framework/milestone/103?closed=1)","closed","type: enhancement,","spring-projects-issues","2015-10-07T21:42:16Z","2019-01-13T05:35:15Z"
"","18044","Same origin stops working for WebSocket/SockJS once any origin is configured [SPR-13464]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-13464](https://jira.spring.io/browse/SPR-13464?redirect=false)** and commented  In absence of CORS configuration, WebSocket/SockJS allows same origin. Once an origin is added, same origin stops working (e.g. breaks in Chrome which sends an Origin header even even for same origin).  This doesn't seem intuitive.  On the MVC side we seem to have chosen to allow same origin regardless, which makes more sense.  Let's consider this for 4.2.2.   ---  **Affects:** 4.2.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/299b7766fe97ed4d27747af5bf76bff667f792df","closed","type: enhancement,","spring-projects-issues","2015-09-13T14:42:18Z","2015-10-15T13:04:43Z"
"","18026","SseEmitter does not expose super constructor with timeout value [SPR-13446]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-13446](https://jira.spring.io/browse/SPR-13446?redirect=false)** and commented  #17695 introduced a constructor with a timeout in ResponseBodyEmitter. The SseEmitter needs to provide that as well.  ---  **Affects:** 4.2.1  **Issue Links:** - #17695 Add request timeout to ResponseBodyEmitter  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5f598586ea930a98fbe4209d25e8c667d197314e","closed","type: enhancement,","spring-projects-issues","2015-09-08T16:54:17Z","2019-01-11T17:24:50Z"
"","18218","JCache CacheResultInterceptor does not allow null values to be cached [SPR-13641]","**[Rosendo Alvarez](https://jira.spring.io/secure/ViewProfile.jspa?name=rjalvare)** opened **[SPR-13641](https://jira.spring.io/browse/SPR-13641?redirect=false)** and commented  When using jcache annotations to cache the results of a method call using ehcache as the caching implementation, the caching of null values is not allowed even though the JCacheCacheManager explicitly has an option to ""allowNullValues"".  App context:  ```xml   	  ```  dependencies:  ```xml  	org.springframework 	spring-context-support   	org.ehcache 	jcache 	1.0.1   	net.sf.ehcache 	ehcache 	2.10.1  ```  ```java @CacheResult(cacheName = ""reserveTypes"") public String findReserveTypeByName(String reserveTypeName) { 	if (reserveTypeName == ""test"") { logger.info(""This is not being retrieved from cache.""); 		return null; 	} return ""this will be cached""; } ```    ---  **Affects:** 4.2.2  **Attachments:** - [ehcache.xml](https://jira.spring.io/secure/attachment/23202/ehcache.xml) (_450 bytes_)  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2015-11-04T13:42:30Z","2015-11-15T17:03:14Z"
"","18803","Reactor2TcpClient leaks threads on shutdown [SPR-14229]","**[Roel Rymenants](https://jira.spring.io/secure/ViewProfile.jspa?name=roel.rymenants)** opened **[SPR-14229](https://jira.spring.io/browse/SPR-14229?redirect=false)** and commented  When using the StompBrokerRelayMessageHandler in a container (e.g. tomcat) it seems the shutdown sequence leaks threads. More specifically it appears to be the reconnect functionality of the used NettyTcpClients which trigger a timer on the passed reactor.Environment, which leaks a thread per client. I'm not familiar enough with neither netty nor reactor-netty to have a further clue regarding how to proceed with solving the issue.  In order to reproduce, you can switch the spring-websocket-portfolio webapp to use a StompBrokerRelay with rabbitmq. Loading the webapp in tomcat, logging in and then unloading the app again shows the issue. You can find a heap dump attached.  ---  **Affects:** 4.2.5  **Reference URL:** https://github.com/rstoyanchev/spring-websocket-portfolio/  **Attachments:** - [spring-portfolio.hprof.7z](https://jira.spring.io/secure/attachment/23384/spring-portfolio.hprof.7z) (_7.38 MB_)  **Issue Links:** - #18805 Reactor2TcpClient does not remove TcpClient instances after connection closed - #19601 Reactor2StompTcpClient should use a shared EventLoopGroup  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bd40a93604bbff9e41085639628114fc0c0898c2, https://github.com/spring-projects/spring-framework/commit/f7ace544884762e40d2179ca37a1f1aaf03a09b5","closed","type: bug,","spring-projects-issues","2016-04-28T13:10:00Z","2019-01-11T17:07:50Z"
"","18506","Upgrade to CGLIB 3.2.2 [SPR-13934]","**[Rodrigo Ezequiel Merino](https://jira.spring.io/secure/ViewProfile.jspa?name=rodro83)** opened **[SPR-13934](https://jira.spring.io/browse/SPR-13934?redirect=false)** and commented  The next patch version of cglib has been requested (https://github.com/cglib/cglib/issues/61) which provides a fix (https://github.com/cglib/cglib/pull/50) for a permgen memory leak.  It would be great if this upgrade can also be done in the 4.1.x line.  Ref: * #15202 * http://forum.spring.io/forum/spring-projects/container/12267-java-lang-outofmemoryerror-permgen-space  ---  **Affects:** 4.2.4  **Reference URL:** #15202  **Issue Links:** - #15202 CGLIB PermGen memory leaks under Karaf - #17937 Upgrade to CGLIB 3.2 - #18609 Upgrade to ASM 5.1 - #18958 Upgrade to CGLIB 3.2.4 - #19713 Upgrade to CGLIB 3.2.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/dc7ec441886dc39fed8581000c985d355aff6ca8, https://github.com/spring-projects/spring-framework/commit/2b6ec6a85eb7d103ffde9df1e757b78521f35220","closed","in: core,","spring-projects-issues","2016-02-09T16:59:22Z","2019-01-14T04:40:24Z"
"","18758","Component scanning does not find sub-packages in EAR on Weblogic 12.2.x [SPR-14187]","**[Robson Vargas Farias](https://jira.spring.io/secure/ViewProfile.jspa?name=robsonfarias)** opened **[SPR-14187](https://jira.spring.io/browse/SPR-14187?redirect=false)** and commented  I've an EAR application which contains a simple message-driven bean that receive data from a queue on weblogic; this MDB is intercepted by SpringBeanAutowiringInterceptor in order to inject a `@Autowired` bean, but, I'm receiving an exception:  Caused By: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [com.test.beans.bo.SampleBO] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {`@org`.springframework.beans.factory.annotation.Autowired(required=true)}  My configuration is:  ```xml  ```  The strange is: if I change the base package to the exactly package where my bean is on it works fine. Sample:  ```xml  ```  Suggesting that the issue is related to the sub-packages scanning.  my ref context:  ```xml   	 		 	  ```  my app config:  ```xml    	 	   ```  Tested on: Weblogic version: 12.2.x and lastest versions of Spring 4.x and 5.x (as shared libraries)  ---  **Affects:** 4.1.7  **Issue Links:** - #17825 Compatibility with WebLogic 12.2.1 / Tyrus 1.11  1 votes, 4 watchers","closed","status: bulk-closed,","spring-projects-issues","2016-04-18T20:05:16Z","2019-01-12T00:14:30Z"
"","18550","AbstractAnnotationConfigDispatcherServletInitializer without root context causes error in WebApplicationContextUtils [SPR-13978]","**[Robin Sander](https://jira.spring.io/secure/ViewProfile.jspa?name=robin)** opened **[SPR-13978](https://jira.spring.io/browse/SPR-13978?redirect=false)** and commented  If `AbstractAnnotationConfigDispatcherServletInitializer` is extended without defining any root configuration classes (`getRootConfigClasses()` returning null) no root application context is created which seems to cause an exception in `WebApplicationContextUtils.getRequiredWebApplicationContext()` later on. My assumption is that no application context is registered in the servlet context by this setup or, because the exception occurs in a `ServletContextListener`, there's a race condition. It should be noted that the error does _not_ occur with a different setup (implementing `WebApplicationInitializer` directly). I will add a test project soon.   ---  **Affects:** 4.2.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3df66d023ce9af988cc5e192b8de04422b7c1719","closed","status: declined,","spring-projects-issues","2016-02-24T16:43:59Z","2019-01-12T16:22:17Z"
"","18384","There sould be a BeanUtils.mergeProperties [SPR-13811]","**[Roberto Barros da Silva Costa](https://jira.spring.io/secure/ViewProfile.jspa?name=robertobsc)** opened **[SPR-13811](https://jira.spring.io/browse/SPR-13811?redirect=false)** and commented  BeanUtils.copyProperties is not enought when there's two pojos of the same class that sould have it properties unified in just one object.  Although there are some simple solutions over the web with reflection to do it, i think its nice if you guys add a mergeProperties method to do that so we don´t need to code or copy this function in our projects.   ---  **Affects:** 4.2.4","closed","status: bulk-closed,","spring-projects-issues","2015-12-21T15:57:27Z","2019-01-12T02:44:33Z"
"","18806","Add common non standard headers to HttpHeaders [SPR-14232]","**[Robert Winkler](https://jira.spring.io/secure/ViewProfile.jspa?name=robwin)** opened **[SPR-14232](https://jira.spring.io/browse/SPR-14232?redirect=false)** and commented  Hello,  I think it would be nice if some common non standard HTTP headers could be added to HttpHeaders like:  public static final String X_HTTP_METHOD_OVERRIDE_HEADER = ""X-HTTP-Method-Override"" public static final String X_CONTENT_TYPE_OPTIONS = ""X-Content-Type-Options""; public static final String X_DO_NOT_TRACK = ""X-Do-Not-Track""; public static final String X_FORWARDED_FOR = ""X-Forwarded-For""; public static final String X_FORWARDED_PROTO = ""X-Forwarded-Proto""; public static final String X_FRAME_OPTIONS = ""X-Frame-Options""; public static final String X_POWERED_BY = ""X-Powered-By""; public static final String X_REQUESTED_WITH = ""X-Requested-With""; public static final String X_XSS_PROTECTION = ""X-XSS-Protection"";  What do you think?  ---  **Affects:** 4.2.5  **Issue Links:** - #18802 Add get/set-IfUnmodifiedSince, get/set-IfMatch methods on HttpHeaders","closed","type: enhancement,","spring-projects-issues","2016-04-29T06:32:45Z","2019-01-11T17:06:34Z"
"","18779","ResponseEntity should allow the usage of unassigned HTTP status codes [SPR-14205]","**[Robert Winkler](https://jira.spring.io/secure/ViewProfile.jspa?name=robwin)** opened **[SPR-14205](https://jira.spring.io/browse/SPR-14205?redirect=false)** and commented  Hello,  the current implementation of the ResponseEntity does not allow the usage of unassigned HTTP status codes, because of the HttpStatus enum which contains only IANA registered HTTP Status codes.  But the HTTP specification allows the usage of new/extension/unassigned status codes. See: http://tools.ietf.org/html/rfc7231#section-6 and http://tools.ietf.org/html/rfc7231#section-8.2.2 Unfortunately, custom status codes are sometimes used by RESTful APIs.  It would be nice if the ResponseEntity would allow custom status codes. The ResponseEntity needs a constructor or builder method which excepts custom status codes.  The IANA list shows the codes which are unassigned: http://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml  ---  **Affects:** 4.2.5  **Issue Links:** - #18350 Regression: HttpEntityMethodProcessor does not allow other Http methods than defined in the HttpMethod Enum - #18642 Support for HTTP Vary configuration (e.g. in reaction to locale-based rendering) - #16374 Provide builders for HttpEntity and ResponseEntity - #20529 RestTemplate doesn't consistently tolerate unknown HTTP status codes - #20622 Returning non-standard HTTP status code causes exceptions on WebFlux - #20913 ServerResponse should allow the usage of unassigned HTTP status codes  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d06188ed4df6abc884bf2b37f72e21a668f64aaa  0 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2016-04-22T12:48:54Z","2021-05-25T15:21:37Z"
"","18350","Regression: HttpEntityMethodProcessor does not allow other Http methods than defined in the HttpMethod Enum  [SPR-13776]","**[Robert Winkler](https://jira.spring.io/secure/ViewProfile.jspa?name=robwin)** opened **[SPR-13776](https://jira.spring.io/browse/SPR-13776?redirect=false)** and commented  The following commit ""https://github.com/spring-projects/spring-framework/commit/11b4e3be2cef95d398a2e1e432786b0b1a3b7f3c"" did change the way how the `HttpEntityMethodProcessor.handleReturnValue()` method checks if the current `ServletRequest().getMethod()` equals `HttpMethod.GET`. The current implementation invokes `HttpMethod.valueOf(getRequest().getMethod())` now and does not allow HTTP methods like WebDav's ""PROPFIND"" anymore.  Currently we can't use the Spring Framework anymore to provide a CalDav, CardDav application using the Miltion.io framework.  A PROPFIND requests fails with `java.lang.IllegalArgumentException, Message: No enum constant org.springframework.http.HttpMethod.PROPFIND` now.  ---  **Affects:** 4.2.3  **Reference URL:** https://github.com/spring-projects/spring-framework/blob/11b4e3be2cef95d398a2e1e432786b0b1a3b7f3c/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/HttpEntityMethodProcessor.java#L175  **Issue Links:** - #9476 Allow  DispatcherServlet/ServletWrappingController to work with the extended WebDAV methods (_**""is depended on by""**_) - #18779 ResponseEntity should allow the usage of unassigned HTTP status codes - #18881 Spring Web should process requests with empty/invalid mime type - #19202 Consistent comma splitting without regex overhead (e.g. in MediaType/MimeType)","closed","type: bug,","spring-projects-issues","2015-12-08T12:46:29Z","2019-01-11T19:28:50Z"
"","18809","FastByteArrayInputStream read( byte[] ) wrong return value [SPR-14236]","**[Robert Thaler](https://jira.spring.io/secure/ViewProfile.jspa?name=rthaler)** opened **[SPR-14236](https://jira.spring.io/browse/SPR-14236?redirect=false)** and commented  read( byte[] ) method result is one byte less than actually read.  Sample: 10 bytes copied to buffer but read returns 9  ```java FastByteArrayOutputStream out = new FastByteArrayOutputStream();  out.write( ""1234567890"".getBytes() ); out.close(); int size = out.size();  byte[] buffer = new byte[50]; int count = out.getInputStream().read( buffer ); ```  ---  **Affects:** 4.2.5  **Issue Links:** - #18783 FastByteArrayInputStream.read returns  incorrect result (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2016-04-30T07:41:56Z","2019-01-12T16:45:39Z"
"","18187","ConcurrentModificationException during high load - Spring Web REST [SPR-13609]","**[Robert Johansson](https://jira.spring.io/secure/ViewProfile.jspa?name=robjoh)** opened **[SPR-13609](https://jira.spring.io/browse/SPR-13609?redirect=false)** and commented  When running load tests on a rest service, each request has random xml content, following exception occurs occasionally. It seems as the higher load the more likely that it occurs.  Current implementation in Spring for unmarshal xml to java objects does not seem to be thread safe?  _13:23:38,314 ERROR [org.apache.catalina.core.ContainerBase.[jboss.web].[default-host].[/fault-code-translation].[SpringApplication]] (http-/0.0.0.0:14080-36) JBWEB000236: Servlet.service() for servlet SpringApplication threw exception: java.util.ConcurrentModificationException at java.util.ArrayList$Itr.checkForComodification(ArrayList.java:901) [rt.jar:1.8.0_31] at java.util.ArrayList$Itr.next(ArrayList.java:851) [rt.jar:1.8.0_31] at com.sun.xml.bind.v2.runtime.reflect.Lister$CollectionLister$1.next(Lister.java:288) at com.sun.xml.bind.v2.runtime.property.ArrayElementProperty.serializeListBody(ArrayElementProperty.java:139) at com.sun.xml.bind.v2.runtime.property.ArrayERProperty.serializeBody(ArrayERProperty.java:159) at com.sun.xml.bind.v2.runtime.ClassBeanInfoImpl.serializeBody(ClassBeanInfoImpl.java:358) at com.sun.xml.bind.v2.runtime.XMLSerializer.childAsSoleContent(XMLSerializer.java:593) at com.sun.xml.bind.v2.runtime.ClassBeanInfoImpl.serializeRoot(ClassBeanInfoImpl.java:340) at com.sun.xml.bind.v2.runtime.XMLSerializer.childAsRoot(XMLSerializer.java:494) at com.sun.xml.bind.v2.runtime.MarshallerImpl.write(MarshallerImpl.java:323) at com.sun.xml.bind.v2.runtime.MarshallerImpl.marshal(MarshallerImpl.java:251) at org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter.writeToResult(Jaxb2RootElementHttpMessageConverter.java:181) [spring-web-4.1.7.RELEASE.jar:4.1.7.RELEASE] at org.springframework.http.converter.xml.AbstractXmlHttpMessageConverter.writeInternal(AbstractXmlHttpMessageConverter.java:66) [spring-web-4.1.7.RELEASE.jar:4.1.7.RELEASE] at org.springframework.http.converter.AbstractHttpMessageConverter.write(AbstractHttpMessageConverter.java:208) [spring-web-4.1.7.RELEASE.jar:4.1.7.RELEASE] at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:161) [spring-webmvc-4.1.7.RELEASE.jar:4.1.7.RELEASE] at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:101) [spring-webmvc-4.1.7.RELEASE.jar:4.1.7.RELEASE]_  ```java import org.springframework.web.bind.annotation.*  APPLICATION_XML_V1 = ""application/vnd.nnn.nnn.nnn.v1+xml""  @RequestMapping(         value = ""/{language}/batchtranslation"",         method = RequestMethod.POST,        consumes = {MediaType.APPLICATION_XML_V1}) public Response translateBatchForLanguage_1_0(@PathVariable(""language"") String language,                                                    @RequestBody String body){     // Implementation code } ```    ---  **Affects:** 4.1.7  **Reference URL:** http://stackoverflow.com/questions/32883373/concurrentmodificationexception-during-high-load-spring-web-rest","closed","status: bulk-closed,","spring-projects-issues","2015-10-26T08:29:34Z","2020-06-23T09:21:07Z"
"","18175","How does make HTTPRequest as Restlet? [SPR-13597]","**[ROBERSON SATHLER NASCIMENTO](https://jira.spring.io/secure/ViewProfile.jspa?name=robersonsn)** opened **[SPR-13597](https://jira.spring.io/browse/SPR-13597?redirect=false)** and commented  I need to simulate a HTTP request on specific external site like DHC by Restlet extension of google. On DHC works fine, I got the information that I need. Let's go the parameters.  Authorization: Basic c29sdWNvZXM6MjAxMjEz Content-Type: application/x-www-form-urlencoded Content-Length: 46 Body: tipo_periodo=1&data_ultimo=90&filtro_empresa=0  I'm using groovy grails 3.0.4 Which plugin would I choice?  Any help me?   --- No further details from [SPR-13597](https://jira.spring.io/browse/SPR-13597?redirect=false)","closed","status: invalid,","spring-projects-issues","2015-10-22T13:45:27Z","2019-01-12T05:23:36Z"
"","18820","AntPathMatcher Regression for trimTokens=true [SPR-14247]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-14247](https://jira.spring.io/browse/SPR-14247?redirect=false)** and commented  In Spring 4.2.5.RELASE the following test passes:  ``` AntPathMatcher matcher = new AntPathMatcher(); assertTrue(matcher.match(""/foo/bar"", ""/foo /bar"")); ```  In Spring 4.2.0.RC1 the test fails. This seems to be related to #18487  See [e77ff3c99](https://github.com/spring-projects/spring-framework/commit/e77ff3c9911878b4e182476fdedaabda6f55ab69#diff-74d20e28abecee1faf5db4fe6207885bL324)  ---  **Affects:** 4.3 RC1  **Issue Links:** - #18487 Speed up AntPathMatcher by doing prefix-match  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/147a35f4f1fb00d3b22e994d48aeef5c19b399cb, https://github.com/spring-projects/spring-framework/commit/3c92ddc94b04f1dc057125d336e5220c92351442, https://github.com/spring-projects/spring-framework/commit/d11c624fb024289d04d16a9f2ebf7c0960ee6e27","closed","in: core,","spring-projects-issues","2016-05-04T19:42:34Z","2019-01-11T17:05:55Z"
"","17890","AbstractAdvisorAutoProxyCreator should consistently detect package-visible methods [SPR-14174]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-14174](https://jira.spring.io/browse/SPR-14174?redirect=false)** and commented  It would be nice if Spring's `AbstractAdvisorAutoProxyCreator` would support package scope methods. This has become increasingly important for Boot style applications which often use default methods. For example, the controller below is not secured due to the fact that package scope method is used:  ```java @RestController public class AdminController {  	@PreAuthorize(""hasRole('ADMIN')"") 	@RequestMapping(""/admin/"") 	String index() { 		return ""Admin""; 	} } ```  Right now this appears to be blocked by the fact that `AopUtils.canApply` only checks public methods since it uses [methods = clazz.getMethods()](https://github.com/spring-projects/spring-framework/blob/v4.3.0.RC1/spring-aop/src/main/java/org/springframework/aop/support/AopUtils.java#L233)   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/999112216d46d95119b520dcef928cb7924370dc","closed","type: enhancement,","spring-projects-issues","2016-04-14T17:28:27Z","2016-05-06T13:55:30Z"
"","18393","Provide MockMvc support for Stateful HttpSession [SPR-13820]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-13820](https://jira.spring.io/browse/SPR-13820?redirect=false)** and commented  In some instances it would be nice to provide support for stateful HttpSessions with `MockMvc`. I've had a few questions on SO about this ([one example](http://stackoverflow.com/questions/32897406/how-can-i-share-a-mockmvc-session-with-htmlunit/32910451#32910451)).  An example of how this could be done:  ```java  MockMvc mvc = ...     .apply(statefulSessions())     .build();   public class StatefulSessionSetup extends MockMvcConfigurerAdapter implements RequestPostProcessor, ResultHandler {  	private HttpSession session;  	private StatefulSessionSetup() { 	} 	public void afterConfigurerAdded(ConfigurableMockMvcBuilder builder) { 		builder.alwaysDo(this); 	} 	public RequestPostProcessor beforeMockMvcCreated(ConfigurableMockMvcBuilder builder, WebApplicationContext cxt) { 		return this; 	} 	public MockHttpServletRequest postProcessRequest(MockHttpServletRequest request) { 		if(session != null) { 			request.setSession(session); 		} 		return request; 	} 	public void handle(MvcResult result) throws Exception { 		this.session = result.getRequest().getSession(false); 	}  	public static MockMvcConfigurer statefulSessions() { 		return new StatefulSessionSetup(); 	} } ```  This isn't extremely well thought out, so it may be wise to organize the code better (i.e. separating the implementation for each interface), but this should get the idea across.  ---  **Affects:** 4.3.3  **Reference URL:** http://stackoverflow.com/questions/32897406/how-can-i-share-a-mockmvc-session-with-htmlunit/32910451#32910451  **Issue Links:** - #18391 Extract MockHttp from MockMvc  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f5d2b88e3f86d9475acf4f07941690739da535f5  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2015-12-24T21:10:03Z","2019-01-11T18:33:23Z"
"","18391","Extract MockHttp from MockMvc [SPR-13818]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-13818](https://jira.spring.io/browse/SPR-13818?redirect=false)** and commented  #### Status Quo  The `MockMvc` support provides an excellent API for testing Spring MVC applications. However, there are users that leverage Spring that may not be using Spring MVC. For example, Spring Security users do not necessarily use Spring MVC.  Without a dedicated API users are forced to manually apply things like `RequestPostProcessor`, `ResultActions`, `ResultMatchers`, etc. Not everything from the `MockMvc` support can be extracted out, but much of it can.  #### Proposal  It would be nice if an API that was not dependent on Spring MVC were extracted from `MockMvc`. A possible name might be `MockHttp`.  ---  **Issue Links:** - #19647 MockMvc compatible API for doing real HTTP tests - #18393 Provide MockMvc support for Stateful HttpSession  0 votes, 7 watchers","open","type: enhancement,","spring-projects-issues","2015-12-23T23:33:43Z","2020-08-24T17:41:57Z"
"","18353","Programmatic bean registration within configuration classes [SPR-13779]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-13779](https://jira.spring.io/browse/SPR-13779?redirect=false)** and commented  It would be nice to be able to allow Java Configuration to register multiple types of Beans. For example, right now the Spring Security exposes a Java DSL like this:  ```java public void configure(HttpSecurity http) {     http         .formLogin() } ```  This single invocation (made by the developer configuring Spring Security) should ideally create numerous Beans (i.e. UsernamePasswordAuthenticationFilter, AuthenticationEntryPoint, etc) and expose them to the Spring ApplicationContext.  The key takeaway is that a developer should be able to interact with a DSL where a single invocation creates multiple Beans.  This is something [Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller) and I spoke about briefly at SpringOne that I would like to get on the roadmap (hopefully for Spring 5).  **Updated**  To elaborate on my [comment below](https://jira.spring.io/browse/SPR-13779?focusedCommentId=131185&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-131185), I think it would be nice if we could do something like this:  ```java class MyDsl {    private boolean addABean;    private boolean addBBean;    // getters /setters }  class MyDslXmlParser {    MyDsl parse(Document d) {       return createDls(d);    } }  class MyDslParser {     public void registerBeans(MyDsl dsl, BeanFactory) {         if(dsl.isAddABean()) {             bf.registerBean(new A());         }         if(dsl.isAddBBean()) {             bf.registerBean(new B());         }     } } ```  I Java Config Users could consume this with:  ```java  class JavaConfig {     @Bean     public MyDsl myDsl() {         MyDsl myDsl = new MyDsl();         myDsl.setAddABean(true);         return myDsl;     } } ```  and `MyDslParser.registerBeans` would automatically be invoked with the proper arguments.  In XML Config users could consume this with:  ```xml  ```  and `MyDslParser.registerBeans` would automatically be invoked with the proper arguments.  This would allow the framework to easily support multiple ways of configuring the Beans.  ---  **Issue Links:** - #19398 Add a functional way to register a bean (_**""depends on""**_) - #19979 Functional bean dependencies tracking (_**""depends on""**_) - #17546 New controller for Spring MVC using Lambda - #9271 easier framework support for the creation & injection of a bean by its class - #21497 Support for conditional registration of functional bean definitions - #18463 Provide registerBean variants based on ResolvableType  2 votes, 16 watchers","open","type: enhancement,","spring-projects-issues","2015-12-08T18:40:51Z","2022-01-19T10:25:53Z"
"","18303","NoClassDefFoundError: org/joda/time/YearMonth for joda-time < 2 [SPR-13730]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-13730](https://jira.spring.io/browse/SPR-13730?redirect=false)** and commented  The [update to support YearMonth in JodaTimeFormatterRegistrar](https://github.com/spring-projects/spring-framework/commit/1da564d2f04d2aef49fc600ef1ff2f23642c19d2#diff-2070b049300954edc72c7d1bdecfa4cfR203) means that JodaTime 1.x is no longer supported in 4.2.4 SNAPSHOT builds.  This is because if [JodaTime is found on the classpath](https://github.com/spring-projects/spring-framework/blob/aef6b206261b613606d4e33406b8dcddfa82d05b/spring-context/src/main/java/org/springframework/format/support/DefaultFormattingConversionService.java#L121), then JodaTimeFormatterRegistrar will [try and use YearMonth](https://github.com/spring-projects/spring-framework/blob/aef6b206261b613606d4e33406b8dcddfa82d05b/spring-context/src/main/java/org/springframework/format/datetime/joda/JodaTimeFormatterRegistrar.java#L203) which was not added until [joda-time 2.0](https://github.com/JodaOrg/joda-time/blob/73fd550faa7b37ef31dd246752394cbb5f5543da/src/main/java/org/joda/time/YearMonth.java#L66).  This is breaking Spring Security's build because CAS utilizes JodaTime 1.x. A complete stacktrace can be found below:  ``` java.lang.IllegalStateException: Failed to load ApplicationContext 	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:124) 	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:83) 	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:183) 	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:123) 	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:228) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:230) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:289) 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:291) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:249) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:89) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) 	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) 	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:193) 	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.runTestClass(JUnitTestClassExecuter.java:105) 	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.execute(JUnitTestClassExecuter.java:56) 	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassProcessor.processTestClass(JUnitTestClassProcessor.java:64) 	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:50) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:497) 	at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) 	at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) 	at org.gradle.messaging.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) 	at org.gradle.messaging.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) 	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) 	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:106) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:497) 	at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) 	at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) 	at org.gradle.messaging.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:360) 	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:54) 	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:40) 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) 	at java.lang.Thread.run(Thread.java:745) Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'requestMappingHandlerMapping' defined in class org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping]: Factory method 'requestMappingHandlerMapping' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'mvcConversionService' defined in class org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.format.support.FormattingConversionService]: Factory method 'mvcConversionService' threw exception; nested exception is java.lang.NoClassDefFoundError: org/joda/time/YearMonth 	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:599) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1123) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1018) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:838) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:537) 	at org.springframework.test.context.web.AbstractGenericWebContextLoader.loadContext(AbstractGenericWebContextLoader.java:133) 	at org.springframework.test.context.web.AbstractGenericWebContextLoader.loadContext(AbstractGenericWebContextLoader.java:60) 	at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.delegateLoading(AbstractDelegatingSmartContextLoader.java:109) 	at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.loadContext(AbstractDelegatingSmartContextLoader.java:261) 	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:98) 	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:116) 	... 45 more Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping]: Factory method 'requestMappingHandlerMapping' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'mvcConversionService' defined in class org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.format.support.FormattingConversionService]: Factory method 'mvcConversionService' threw exception; nested exception is java.lang.NoClassDefFoundError: org/joda/time/YearMonth 	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:189) 	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:588) 	... 62 more Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'mvcConversionService' defined in class org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.format.support.FormattingConversionService]: Factory method 'mvcConversionService' threw exception; nested exception is java.lang.NoClassDefFoundError: org/joda/time/YearMonth 	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:599) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1123) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1018) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) 	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:368) 	at org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration$$EnhancerBySpringCGLIB$$19d54b21.mvcConversionService() 	at org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport.getInterceptors(WebMvcConfigurationSupport.java:281) 	at org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport.requestMappingHandlerMapping(WebMvcConfigurationSupport.java:240) 	at org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration$$EnhancerBySpringCGLIB$$19d54b21.CGLIB$requestMappingHandlerMapping$21() 	at org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration$$EnhancerBySpringCGLIB$$19d54b21$$FastClassBySpringCGLIB$$fd717b0e.invoke() 	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228) 	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:355) 	at org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration$$EnhancerBySpringCGLIB$$19d54b21.requestMappingHandlerMapping() 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:497) 	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162) 	... 63 more Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.format.support.FormattingConversionService]: Factory method 'mvcConversionService' threw exception; nested exception is java.lang.NoClassDefFoundError: org/joda/time/YearMonth 	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:189) 	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:588) 	... 85 more Caused by: java.lang.NoClassDefFoundError: org/joda/time/YearMonth 	at org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.registerFormatters(JodaTimeFormatterRegistrar.java:203) 	at org.springframework.format.support.DefaultFormattingConversionService.addDefaultFormatters(DefaultFormattingConversionService.java:121) 	at org.springframework.format.support.DefaultFormattingConversionService.(DefaultFormattingConversionService.java:92) 	at org.springframework.format.support.DefaultFormattingConversionService.(DefaultFormattingConversionService.java:65) 	at org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport.mvcConversionService(WebMvcConfigurationSupport.java:533) 	at org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration$$EnhancerBySpringCGLIB$$19d54b21.CGLIB$mvcConversionService$33() 	at org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration$$EnhancerBySpringCGLIB$$19d54b21$$FastClassBySpringCGLIB$$fd717b0e.invoke() 	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228) 	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:355) 	at org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration$$EnhancerBySpringCGLIB$$19d54b21.mvcConversionService() 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:497) 	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162) 	... 86 more Caused by: java.lang.ClassNotFoundException: org.joda.time.YearMonth 	at java.net.URLClassLoader.findClass(URLClassLoader.java:381) 	at java.lang.ClassLoader.loadClass(ClassLoader.java:424) 	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331) 	at java.lang.ClassLoader.loadClass(ClassLoader.java:357) 	... 101 more ```  ---  **Affects:** 4.2.4  **Issue Links:** - #18095 Conversion support for java.time.YearMonth (as well as MonthDay)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/edbb8bbb01f55e540a42761b595b117a61348360","closed","in: core,","spring-projects-issues","2015-11-28T20:57:20Z","2019-01-11T19:31:20Z"
"","18243","Implement containsKey for HttpHeaders returned from ServletServerHttpResponse [SPR-13668]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-13668](https://jira.spring.io/browse/SPR-13668?redirect=false)** and commented  As currently implemented `ServletServerHttpResponse.getHeaders().containsKey(String)` always returns false for any pre-existing headers in the underlying `HttpServletResponse`. We should override the `containsKey` method or modify how the parent `HttpHeaders` class behaves so that the `HttpServletResponse` is consulted.  I'm logging this issue pretty quickly so I don't forget. There may be other methods on `ServletResponseHttpHeaders` that need fixed.  Note that this impacts the fix for #18124 since the intent is to only set the Content-Disposition if it has not been set.  ---  **Affects:** 4.1.8, 4.2.2  **Backported to:** [4.1.9](https://github.com/spring-projects/spring-framework/milestone/133?closed=1)","closed","type: enhancement,","spring-projects-issues","2015-11-11T04:15:45Z","2019-01-11T19:14:35Z"
"","18192","Add support for x-forwarded- HttpServletRequest wrapping [SPR-13614]","**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-13614](https://jira.spring.io/browse/SPR-13614?redirect=false)** and commented  It would be ideal if Spring Framework provided a transparent way to support x-forwarded headers similar to Tomcat's [RemoteIpFilter](https://tomcat.apache.org/tomcat-8.0-doc/api/org/apache/catalina/filters/RemoteIpFilter). This would provide an application container independent way of supporting x-forwarded headers.  Admittedly, #14743 added support for this. However, this is not ideal because the framework and users must leverage the newly added APIs explicitly. Furthermore, always interpreting the request using x-forwarded- allows forging the address so users should really opt in for this (i.e. by adding a Filter).  ---  **Affects:** 4.2.2  **Issue Links:** - #14743 Add support for X-Forwarded-Host in ServletUriComponentsBuilder - [SEC-2792](https://jira.spring.io/browse/SEC-2792) HeaderChecks not applied to Load Balanced https originated redirects - [SEC-2898](https://jira.spring.io/browse/SEC-2898) Use ServletUriComponentsBuilder.fromRequest for URL creation - #18842 ForwardedHeaderFilter could support X-Forwarded-Prefix as well  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6fcc869338c004e6b5696314be7673a0d707e785, https://github.com/spring-projects/spring-framework/commit/36e2dd90a7840fe82d30016ec5e7adc0c054eb7a, https://github.com/spring-projects/spring-framework/commit/4cf0b59e00d20328b861865bfa86247c650c6497  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2015-10-27T17:41:39Z","2019-01-11T19:19:03Z"
"","18486","Add support for YAML files to @PropertySource [SPR-13912]","**[Rob Moore](https://jira.spring.io/secure/ViewProfile.jspa?name=robmoore)** opened **[SPR-13912](https://jira.spring.io/browse/SPR-13912?redirect=false)** and commented  As the Spring documentation notes, the `@PropertySource` annotation does not support YAML files so one must use properties files in these cases.  This can be especially annoying with third party libraries using these annotations as a separate properties file must be created.   ---  **Affects:** 4.2.4  **Reference URL:** https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html#boot-features-external-config-yaml-shortcomings  18 votes, 27 watchers","closed","status: bulk-closed,","spring-projects-issues","2016-02-03T18:11:25Z","2020-05-28T06:52:42Z"
"","18200","support nested property filters using Jackson [SPR-13622]","**[rk](https://jira.spring.io/secure/ViewProfile.jspa?name=rproddaturi)** opened **[SPR-13622](https://jira.spring.io/browse/SPR-13622?redirect=false)** and commented  #17187 already supports filters but the underlying code does not filter nested properties because of the way Jakson and its spring integration works, there should be a custom filter to support simple nested property filtering (without any regular expressions). This is a very common use case to get only the fields clients are interested in runtime.  There are a few complex implementations already available, but these are not compatible with MappingJacksonValue as a drop in replacement, i.e., we cannot set their Filter implementations to MappingJacksonValue and expect them to work without explicitly adding JsonFilter annotation on all classes that will be filtered: https://github.com/PressAssociation/partial-response/tree/master/filter-json-jackson https://github.com/Antibrumm/jackson-antpathfilter https://github.com/narusas/SpringMvcJacksonFilter  The following won't work without `@JsonFilter`(""antPathFilter"") on all classes  ```java objectMapper.addMixIn(Object.class, AntPathFilterMixin.class);  filter = new SimpleFilterProvider() 			.addFilter(""antPathFilter"", 					new AntPathPropertyFilter(""nestedObj"", ""nestedObj.nestedProperty"")  jacksonValue.setFilters(filter); 		 ```  One hack is to explicitly set the same `@JsonFilter`(""antPathFilter"") on all classes that are nested, which did not make any sense to me. What if I wanted to support multiple filters at the same time tomorrow?   --- No further details from [SPR-13622](https://jira.spring.io/browse/SPR-13622?redirect=false)","closed","type: enhancement,","spring-projects-issues","2015-10-29T23:57:09Z","2019-01-14T04:41:24Z"
"","18662","Ability to define DB mapping of all fields at class level [SPR-14090]","**[Ritesh Kapoor](https://jira.spring.io/secure/ViewProfile.jspa?name=ccoder4u)** opened **[SPR-14090](https://jira.spring.io/browse/SPR-14090?redirect=false)** and commented  Current annotations are defined on fields of class. It would be great if we can define annotations at class level for all fields. This would enable, to have classes (model) without any annotation and class can be derived which defines complete mapping used by persistance ( repository) layer. e.g  class A{ String name }  `@Id`(""Name"") class AEntity extends A{ }  AEntity being used for persistance   --- No further details from [SPR-14090](https://jira.spring.io/browse/SPR-14090?redirect=false)","closed","status: invalid,","spring-projects-issues","2016-03-26T18:11:45Z","2019-01-12T05:23:00Z"
"","18071","ConcurrentModificationException when executing AutowireCapableBeanFactory.createBean [SPR-13493]","**[Richard Costine](https://jira.spring.io/secure/ViewProfile.jspa?name=rcostine)** opened **[SPR-13493](https://jira.spring.io/browse/SPR-13493?redirect=false)** and commented  This error is now happening sporadically during our acceptance tests. It looks to be caused by an internal list of strings (in spring's DefaultListableBeanFactory) which is updated via another thread, while an Iterator (backed by that same list of strings) is cycling over it. If something is added (or deleted) to (or from) a collection while the collection is being iterated over, a ConcurrentModificationException will occur inside the next().  We have recently upgraded from Spring 3.1 to 4.1.6. With both Spring releases, we are using Akka and running in an OSGI container. When actors are instantiated, a spring createBean is done. That is where this sporadic exception now occurs.  ``` 39:15 ERROR [ akka.actor.OneForOneStrategy] - exception during creation akka.actor.ActorInitializationException: exception during creation at akka.actor.ActorInitializationException$.apply(Actor.scala:166) ~[com.typesafe.akka.actor_2.3.11.jar:na] at akka.actor.ActorCell.create(ActorCell.scala:596) ~[com.typesafe.akka.actor_2.3.11.jar:na] at akka.actor.ActorCell.invokeAll$1(ActorCell.scala:456) ~[com.typesafe.akka.actor_2.3.11.jar:na] at akka.actor.ActorCell.systemInvoke(ActorCell.scala:478) ~[com.typesafe.akka.actor_2.3.11.jar:na] at akka.dispatch.Mailbox.processAllSystemMessages(Mailbox.scala:263) ~[com.typesafe.akka.actor_2.3.11.jar:na] at akka.dispatch.Mailbox.run(Mailbox.scala:219) ~[com.typesafe.akka.actor_2.3.11.jar:na] at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397) [com.typesafe.akka.actor_2.3.11.jar:na] at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260) [org.scala-lang.scala-library_2.11.6.v20150224-172222-092690e7bf.jar:na] at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339) [org.scala-lang.scala-library_2.11.6.v20150224-172222-092690e7bf.jar:na] at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979) [org.scala-lang.scala-library_2.11.6.v20150224-172222-092690e7bf.jar:na] at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107) [org.scala-lang.scala-library_2.11.6.v20150224-172222-092690e7bf.jar:na] +*Caused by: java.util.ConcurrentModificationException: null at java.util.LinkedHashMap$LinkedHashIterator.nextNode(LinkedHashMap.java:711) ~[na:1.8.0_31] at java.util.LinkedHashMap$LinkedKeyIterator.next(LinkedHashMap.java:734) ~[na:1.8.0_31] at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:471) ~[org.apache.servicemix.bundles.spring-beans_4.1.6.RELEASE_1.jar:na]*+ at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:412) ~[org.apache.servicemix.bundles.spring-beans_4.1.6.RELEASE_1.jar:na] at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:186) ~[org.apache.servicemix.bundles.spring-beans_4.1.6.RELEASE_1.jar:na] at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1105) ~[org.apache.servicemix.bundles.spring-beans_4.1.6.RELEASE_1.jar:na] at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1044) ~[org.apache.servicemix.bundles.spring-beans_4.1.6.RELEASE_1.jar:na] at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:942) ~[org.apache.servicemix.bundles.spring-beans_4.1.6.RELEASE_1.jar:na] at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:813) ~[org.apache.servicemix.bundles.spring-beans_4.1.6.RELEASE_1.jar:na] at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:741) ~[org.apache.servicemix.bundles.spring-beans_4.1.6.RELEASE_1.jar:na] at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:185) ~[org.apache.servicemix.bundles.spring-beans_4.1.6.RELEASE_1.jar:na] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1139) ~[org.apache.servicemix.bundles.spring-beans_4.1.6.RELEASE_1.jar:na] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1042) ~[org.apache.servicemix.bundles.spring-beans_4.1.6.RELEASE_1.jar:na] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) ~[org.apache.servicemix.bundles.spring-beans_4.1.6.RELEASE_1.jar:na] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476) ~[org.apache.servicemix.bundles.spring-beans_4.1.6.RELEASE_1.jar:na] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:342) ~[org.apache.servicemix.bundles.spring-beans_4.1.6.RELEASE_1.jar:na] at com.ccadllc.firebird.core.actors.SpringInjector.apply(Injector.scala:102) ~[com.ccadllc.firebird.core.actors_6.0.0.20150820212456.jar:na] at com.ccadllc.firebird.core.actors.Injected$$anonfun$apply$2.apply(Injector.scala:45) ~[com.ccadllc.firebird.core.actors_6.0.0.20150820212456.jar:na] at com.ccadllc.firebird.core.actors.Injected$$anonfun$apply$2.apply(Injector.scala:45) ~[com.ccadllc.firebird.core.actors_6.0.0.20150820212456.jar:na] at akka.actor.TypedCreatorFunctionConsumer.produce(Props.scala:343) ~[com.typesafe.akka.actor_2.3.11.jar:na] at akka.actor.Props.newActor(Props.scala:252) ~[com.typesafe.akka.actor_2.3.11.jar:na] at akka.actor.ActorCell.newActor(ActorCell.scala:552) ~[com.typesafe.akka.actor_2.3.11.jar:na] at akka.actor.ActorCell.create(ActorCell.scala:578) ~[com.typesafe.akka.actor_2.3.11.jar:na] ... 9 common frames omitted ```  There is a similar issue here:  #17286  The ConcurrentModificationException issue didn't occur with 3.1 because a copy of the underlying list was Iterated over, not the original list. It looks like this was changed for performance reasons, but now it is causing our application to fail sporadically. I looked at code for the 4.2.1 release and the lists are still not accessed in a threadsafe manner.  If there are no plans to fix this code to ensure that the lists are accessed in a synchronized fashion (using a CopyOnWriteArrayList, or by giving the option for the lists to be copied before attempting to Iterate over them, or perhaps synchronizing on the lists around the iteration) is there any way for us to tell the context to use our own custom bean factory that does this? We are willing to sacrifice some performance degradation, in order to allow the application to still function similar to the way it was working under the old 3.1 release.  Currently we are synchronizing around the createBean, and for some cases it seems to fix the problem. However, this is a very large application and we feel the best way to ensure that it is fixed everywhere is to ensure that the beanFactory itself can handle access by multiple threads.  ---  **Affects:** 4.1.6  **Issue Links:** - #17108 Registering two beans at the same time throws ConcurrentModificationException - #17286 ConcurrentModificationException thrown while iterating over bean definition names in DefaultListableBeanFactory#getBeansWithAnnotation(Class annotationType) - #17714 ConcurrentModificationException in DefaultListableBeanFactory.doGetBeanNamesForType() - #17562 Doc: DefaultListableBeanFactory is not thread-safe for manual singleton registration - #17012 DefaultListableBeanFactory should allow efficient access to current bean names  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/097bcfb997bd215c7b39635770e34812744f0d9e  1 votes, 4 watchers","closed","in: core,","spring-projects-issues","2015-09-23T15:56:04Z","2019-01-11T17:20:25Z"
"","18788","ApplicationListenerDetector should prevent serialization of its ApplicationContext reference [SPR-14214]","**[Ricardo Fanjul Fandiño](https://jira.spring.io/secure/ViewProfile.jspa?name=fanjulito)** opened **[SPR-14214](https://jira.spring.io/browse/SPR-14214?redirect=false)** and commented  I'm trying to migrate Spring Web Application from 3.x version to 4.2 version of Spring.  My application is deployed in a cluster of Tomcat 7 using for serialize the session: memcached-session-manager: https://github.com/magro/memcached-session-manager and serializing the objects with Kryo.  When serialize the session I found a mistake that made me suspect that I'm trying to serialize the Spring ApplicationContext.  Debugging my application I found this: !imagen1.png|thumbnail!  Inside the session exist a key “org.springframework.web.context.request.ServletRequestAttributes.DESTRUCTION_CALLBACK.scopedTarget.restSessionDataHolder” whose value reference the ApplicationContext.  I find that, for each bean declared in Session Scope. For example:  ```java @Component @Scope(proxyMode=ScopedProxyMode.TARGET_CLASS,value=""session"") public class RestSessionDataHolder implements Serializable{ ... ```  Spring in the method “org.springframework.web.context.request.ServletRequestAttributes.registerSessionDestructionCallback (String name, Runnable callback)”, store in the session a key named “org.springframework.web.context.request.ServletRequestAttributes.DESTRUCTION_CALLBACK.scopedTarget.[BEAN_NAME]” with a value that indirectly reference the ApplicatonContext.  !imagen2.png|thumbnail!  !imagen3.png|thumbnail!  Inside this atribute exist two “DestructionAwareBeanPostProcessor”: “CommonAnnotationBeanPostProcessor” and “org.springframework.context.support.PostProcessorRegistrationDelegate$ApplicationListenerDetector”.  “PostProcessorRegistrationDelegate$ApplicationListenerDetector” exist since Spring 4.0 and maybe have a bug:  ```java private static class ApplicationListenerDetector implements MergedBeanDefinitionPostProcessor, DestructionAwareBeanPostProcessor { ... 		private final AbstractApplicationContext applicationContext;  ```  I think that attribute “private final AbstractApplicationContext applicationContext” should be “**transient**”.  For example the similar attributes of “CommonAnnotationBeanPostProcessor” are transient:  ```java public class CommonAnnotationBeanPostProcessor extends InitDestroyAnnotationBeanPostProcessor 		implements InstantiationAwareBeanPostProcessor, BeanFactoryAware, Serializable {  ...  	private transient BeanFactory jndiFactory = new SimpleJndiBeanFactory();  	private transient BeanFactory resourceFactory;  	private transient BeanFactory beanFactory;  	private transient final Map injectionMetadataCache = 			new ConcurrentHashMap(256); ```  ---  **Affects:** 4.1.7, 4.1.8, 4.1.9, 4.2 GA, 4.2.1, 4.2.2, 4.2.3, 4.2.4, 4.2.5  **Attachments:** - [imagen1.png](https://jira.spring.io/secure/attachment/23382/imagen1.png) (_56.23 kB_) - [imagen2.png](https://jira.spring.io/secure/attachment/23381/imagen2.png) (_81.84 kB_) - [imagen3.png](https://jira.spring.io/secure/attachment/23380/imagen3.png) (_116.81 kB_)  **Issue Links:** - #18317 Avoid scoped destruction callbacks in case of no post-processor actually applying - #19349 Inner bean behind BeanFactoryPostProcessor should be able to receive application events  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/75a8f5b3cacdc89d0ac0e60335274988dd36ea0d, https://github.com/spring-projects/spring-framework/commit/e0734aede82efc80c5ab334d5559abcc5787957b","closed","type: enhancement,","spring-projects-issues","2016-04-25T09:13:19Z","2019-01-11T17:08:30Z"
"","18454","ResourcePropertySource class should support to specify character encoding [SPR-13881]","**[rexli](https://jira.spring.io/secure/ViewProfile.jspa?name=xzleah)** opened **[SPR-13881](https://jira.spring.io/browse/SPR-13881?redirect=false)** and commented  When i use `@PropertySources` to load my properties file, i found that i can not specify character encoding.  Here is org.springframework.core.io.support.ResourcePropertySource source code:  ```java public ResourcePropertySource(String name, Resource resource) throws IOException { 		super(name, PropertiesLoaderUtils.loadProperties(new EncodedResource(resource))); 		this.resourceName = getNameForResource(resource); } ```  I want to specify character encoding like that:  ```java PropertiesLoaderUtils.loadProperties(new EncodedResource(resource, ""UTF-8"")) ```  ---  **Affects:** 4.1.7  **Issue Links:** - #14729 Support configurable charset for ResourcePropertySource (_**""duplicates""**_) - #18447 Add support for UTF-8 and other charset/encoding to `@PropertySource`","closed","type: enhancement,","spring-projects-issues","2016-01-22T12:01:01Z","2019-01-13T05:32:04Z"
"","18471","Jackson doesn't give the same output as the input JSON [SPR-13897]","**[Raymond Wang](https://jira.spring.io/secure/ViewProfile.jspa?name=rwang)** opened **[SPR-13897](https://jira.spring.io/browse/SPR-13897?redirect=false)** and commented  MappingJacksonHttpMessageConverter converting java objects to JSON doesn't correctly handle backslashes.  For example:  Sending this JSON will give the java object with the single backslash instead of the double backslash.  ```json ""subject"": {      ""userNameTemplate"": {        ""template"": ""saml.subjectNameId""      },      ""format"": [          ""urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified""      ],      ""filter"": ""(\\S+@example\\.com)"",      ""matchType"": ""USERNAME""    } ```  which will return the output of:  ```json ""subject"": {      ""userNameTemplate"": {        ""template"": ""saml.subjectNameId""      },      ""format"": [          ""urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified""      ],      ""filter"": ""(\S+@example\.com)"",      ""matchType"": ""USERNAME""    } ```  It seems weird that it doesn't return the object with double backslashes.  I'm guessing there's a bug in the way the MappingJacksonHttpMessageConverter.writeInternal works such that we should be escaping the same characters that we unescape in the input?   ---  **Affects:** 3.2.14","closed","status: invalid,","spring-projects-issues","2016-01-28T00:49:58Z","2019-01-12T05:23:13Z"
"","18737","Support Kotlin nullable information in Spring MVC parameters [SPR-14165]","**[Raman Gupta](https://jira.spring.io/secure/ViewProfile.jspa?name=raman)** opened **[SPR-14165](https://jira.spring.io/browse/SPR-14165?redirect=false)** and commented  Spring MVC now supports defining fields with the JDK 8 `Optional` type to indicate that the parameter is optional (cool!).  Kotlin has fields which can be marked as a nullable type e.g. `String?` vs. `String`. This information should be used by Spring MVC in the same way as `Optional`.  See: [KType](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-type/) documentation  ---  **Affects:** 4.2.5  **Issue Links:** - #19518 Support Kotlin nullable information for `@Autowired` and `@Inject`","closed","type: enhancement,","spring-projects-issues","2016-04-13T17:12:09Z","2019-01-13T05:26:58Z"
"","18603","Abort all integration tests on test case failure [SPR-14031]","**[Rakesh](https://jira.spring.io/secure/ViewProfile.jspa?name=rpanati)** opened **[SPR-14031](https://jira.spring.io/browse/SPR-14031?redirect=false)** and commented  Hi,  This issue being opened as an enhancement request.  I have a spring boot based web application and also have couple of integration tests.  I faced a typical scenario where I had a bug in my code that would trigger a `BeanCreationException` in a particular profile and thus obviously that test case fails.  The problem here is, since the application context wasn't initialized at all, why should other tests sharing the same profile start attempting to re-create the context?  As per Spring's documentation, Spring’s test framework will cache application contexts between tests, to which my understanding is that the context would be re-used for other test cases having the same profile. So, if there is a way to immediately mark other test cases as failed instead of re-attempting to create the context again, it could save a lot of CPU cycles and time.  I originally posted the question on stackoverflow [here](http://stackoverflow.com/questions/35803789/abort-all-spring-boot-integration-tests-on-test-case-failure)   --- No further details from [SPR-14031](https://jira.spring.io/browse/SPR-14031?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2016-03-09T14:43:48Z","2019-01-15T11:09:49Z"
"","18234","Caching SpEL based query methods [SPR-13659]","**[Rakesh](https://jira.spring.io/secure/ViewProfile.jspa?name=rpanati)** opened **[SPR-13659](https://jira.spring.io/browse/SPR-13659?redirect=false)** and commented  Hi,  I have a Crud Repository as below  ```java @CacheConfig(cacheNames = ""ProductStatus"") @RepositoryRestResource(path = ""ProductStatus"") public interface IProductStatusRepository extends CrudRepository { 	@Cacheable     @Query(""FROM ProductStatus  WHERE productStatusCode NOT IN ( ?#{hasAnyAuthority(@settings.productStatusExceptions.allowedAuthorities()) ? ' ' : @settings.productStatusExceptions.allowedStatuses})"")     List findStatusesByAuthority();  } ```  The expectation from the above code is that, the result would be determined per the user's authority. But, this doesnt work with `@Cacheable` annotation, because the cache is not stored per valid SpEL expression's result, but per method signature.  Would it be possible to detect the presence of SpEL and enhance the Cache Key based on the SpeL expression's result?  If not, we might have to document that the `@Cacheable` will not work correctly if SpEL is present.   --- No further details from [SPR-13659](https://jira.spring.io/browse/SPR-13659?redirect=false)","closed","in: core,","spring-projects-issues","2015-11-09T16:20:24Z","2019-01-12T05:23:29Z"
"","18461","BeanPropertyRowMapper should use ConversionService for date-time support [SPR-13888]","**[Radmila](https://jira.spring.io/secure/ViewProfile.jspa?name=radmila)** opened **[SPR-13888](https://jira.spring.io/browse/SPR-13888?redirect=false)** and commented  Program is using org.springframework.jdbc.core.BeanPropertyRowMapper to map result set to the bean. When mapping timestamp resultset column to the bean's java.time.LocalDateTime field, process fails with org.springframework.jdbc.support.JdbcUtils getResultSetValue with error IllegalStateException: Cannot convert value of type [java.sql.Timestamp] to required type [java.time.LocalDateTime] for property 'nameproperty': no matching editors or conversion strategy found.  Problem with spring 4.1.6.RELEASE. and JDK 1.8  ---  **Issue Links:** - #17807 BeanPropertyRowMapper should always call toLowerCase with US encoding - #17908 BeanPropertyRowMapper should log if mapRow doesn't find a PropertyDescriptor - #19464 BeanPropertyRowMapper should be able to convert SQL timestamp to java.time.LocalDate/LocalTime - #19515 Shared DefaultConversionService instance e.g. for BeanPropertyRowMapper - #19556 Update JdbcUtils to improve enum support  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7c96059ca373ad474dc939df4d9507cc2e9e6013  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2016-01-25T19:54:37Z","2019-01-11T18:27:26Z"
"","18161","Ambiguous handler methods mapped for HTTP path [SPR-13584]","**[Puneet Bansal](https://jira.spring.io/secure/ViewProfile.jspa?name=puneetbansal)** opened **[SPR-13584](https://jira.spring.io/browse/SPR-13584?redirect=false)** and commented  1) Create two handler methods for the same path (say /home/register); one for RequestMethod.GET and other for RequestMethod.POST. 2) Handler method for GET method, returns the registration form. Handler for POST method, save the form. 3) Create a home.jsp to reach Registration form via GET request    a) One with a form tag with action as ""home/register"" and method as GET and a Submit button    b) Add a link for ""home/register"" 4) Create a registration.jsp with a form tag with no action parameter and method as POST.  As per my understanding, this should work because if the the \ tag doesn't have action parameter then the form will be posted back to the same URL path that displayed it.  Issue: It doesn't work and it fails for GET request.  Would be great if you can help in resolving this. or Please correct me if I am missing something.   ---  **Affects:** 4.2.1  **Reference URL:** http://www.springbyexample.org/examples/simple-spring-mvc-form-annotation-config-webapp-code-example.html  **Attachments:** - [SchoolWeb.zip](https://jira.spring.io/secure/attachment/23153/SchoolWeb.zip) (_77.40 kB_) - [TestWeb.zip](https://jira.spring.io/secure/attachment/23189/TestWeb.zip) (_57.73 kB_)","closed","status: declined,","spring-projects-issues","2015-10-17T16:48:00Z","2019-01-12T16:22:45Z"
"","18149","Facing error while using IncludeFilter with @ComponentScan [SPR-13573]","**[Puneet Bansal](https://jira.spring.io/secure/ViewProfile.jspa?name=puneetbansal)** opened **[SPR-13573](https://jira.spring.io/browse/SPR-13573?redirect=false)** and commented  1) There is a RootConfig.java in com.school.config package. 2) RootConfig class is annotated with `@ComponentScan` which scan the basePackages com.school.bean.* and com.school.myapp.* and works fine. 3) As soon as I add a includeFilter to match the same basepackages then it stops working.  Please have a look at the attached project.   ---  **Affects:** 4.2.1  **Attachments:** - [SchoolWeb.zip](https://jira.spring.io/secure/attachment/23152/SchoolWeb.zip) (_74.43 kB_)","closed","status: bulk-closed,","spring-projects-issues","2015-10-15T00:37:40Z","2019-01-12T00:15:20Z"
"","18111","Doc. Unable to use bean() PCD to define a Pointcut in Aspect created by using annotation @Aspect [SPR-13535]","**[Puneet Bansal](https://jira.spring.io/secure/ViewProfile.jspa?name=puneetbansal)** opened **[SPR-13535](https://jira.spring.io/browse/SPR-13535?redirect=false)** and commented  As per Spring AOP documentation - Spring provides a bean() PCD that can be used to define a PointCut. But when I try to configure a pointcut by using bean() PCD in Aspect created by using annotation `@Aspect` then it doesn't work.  In some of the forums, its mentioned that bean() PCD is available only for XML configuration. But it is not mentioned in documentation.  Please correct me if I am missing something or it's documentation needs to be updated.   ---  **Affects:** 4.2.1  **Reference URL:** http://docs.spring.io/spring/docs/current/spring-framework-reference/html/aop.html  **Attachments:** - [SchoolWeb.zip](https://jira.spring.io/secure/attachment/23139/SchoolWeb.zip) (_70.20 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d6284202f1e7b962aceee4f34412c553910e4ab5, https://github.com/spring-projects/spring-framework/commit/ad29db86755e190a6352ca21ad27c5a74bb56209  **Backported to:** [4.2.7](https://github.com/spring-projects/spring-framework/milestone/144?closed=1)","closed","in: core,","spring-projects-issues","2015-10-04T05:37:14Z","2016-06-10T09:19:12Z"
"","18089","Doc: Spring AOP Pointcut execution syntax [SPR-13512]","**[Puneet Bansal](https://jira.spring.io/secure/ViewProfile.jspa?name=puneetbansal)** opened **[SPR-13512](https://jira.spring.io/browse/SPR-13512?redirect=false)** and commented  AOP pointcut syntax mentioned in Spring documentation is execution(modifiers-pattern? ret-type-pattern declaring-type-pattern? name-pattern(param-pattern) throws-pattern?)  The following pattern works ""execution(public * package1.\*.\*(..))"" but if I remove the '.' then the pattern ""execution(public * package1.\* \*(..))"" doesn't work.  Please correct me if I have interpreted the documentation incorrectly.    ---  **Affects:** 4.2.1  **Reference URL:** http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/html/aop.html","closed","in: core,","spring-projects-issues","2015-09-27T01:29:44Z","2015-12-17T09:33:55Z"
"","18052","@Components annotated with Custom Qualifier are not accessible via @Autowired in Beans instantiated through JavaConfig loaded via @Import in another @Configuration class [SPR-13473]","**[Puneet Bansal](https://jira.spring.io/secure/ViewProfile.jspa?name=puneetbansal)** opened **[SPR-13473](https://jira.spring.io/browse/SPR-13473?redirect=false)** and commented  Steps 1) Create two packages com.beans and com.config. beans will have Class Definitions for beans and config will have JavaConfig. 2) Create a class ABC in com.beans package, annotate with `@Component`, and Custom Qualifier Qualifier1. 3) Create another instance of class ABC with JavaConfig Config1 and annotate it with Custom Qualifier Qualifier2 in com.config package. 4) Create another class DEF with property abc in com.beans package. Autowire an instance of ABC annotated wit Qualifier1. 5) Create an instance of class DEF with JavaConfig Config2 in com.config package. 6) Create a JavaConfig RootConfig. `@Import` Config1 & Config2. Annotate the RootConfig with ComponentScan(basePackage=com.beans)  Issue - if you refer RootConfig via ContextConfigLocation of AnnotationConfigWebApplicationContext then it doesn't work as Spring is not able to identify the unique bean.  On the contrary, if you refer package of RootConfig via contextConfigLocation of AnnotationConfigWebApplicationContext then Spring is able to identify the unique bean.  Not sure if I am missing something or whether it is a feature or defect. Would be great if you can throw some light on this.   ---  **Affects:** 4.2.1  **Attachments:** - [SchoolWeb.zip](https://jira.spring.io/secure/attachment/23122/SchoolWeb.zip) (_40.96 kB_)","closed","status: bulk-closed,","spring-projects-issues","2015-09-19T08:17:35Z","2019-01-12T00:15:37Z"
"","18470","Allow overring active spring profile from command line [SPR-13896]","**[Prashant Deva](https://jira.spring.io/secure/ViewProfile.jspa?name=pdeva)** opened **[SPR-13896](https://jira.spring.io/browse/SPR-13896?redirect=false)** and commented  Currently the active profiles listed in web.xml take precedence over active profiles specified on the command line.  This is the inverse of how all computer programs work. The command line arguments always override the settings in config files.  For example, I may have 'prod' profile in my web.xml. But I might want to run it with the 'dev' or 'staging' profile by specifying the said profile on command line.  Since the precedence order cannot be changed now due to backward compatibility reasons, a new command line param should be provided that allow overriding the active profiles in config files.   --- No further details from [SPR-13896](https://jira.spring.io/browse/SPR-13896?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2016-01-27T21:39:32Z","2019-01-12T02:44:02Z"
"","18418","Doc: Spring Active Profile order of evaluation is unclear [SPR-13845]","**[Prashant Deva](https://jira.spring.io/secure/ViewProfile.jspa?name=pdeva)** opened **[SPR-13845](https://jira.spring.io/browse/SPR-13845?redirect=false)** and commented  In the docs here , it is unclear what the order of evaluation of active spring profiles is: http://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html#beans-definition-profiles-enable  If i specify the active profiles on: 1. the 'command line' eg `-Dspring.profiles.active=""mango, orange""` and 2. my `web.xml` has active profiles listed as `apples`  Do the final active profiles contain: 1. `apples` or 2. `mango, orange` 3. `apples, mango, orange`    ---  **Affects:** 4.2.4","closed","type: task,","spring-projects-issues","2016-01-07T07:16:19Z","2016-02-25T09:36:36Z"
"","18699","Registring CustomPropertyEditors for using in BeanWrapper [SPR-14127]","**[Prabhakar Digumarthi](https://jira.spring.io/secure/ViewProfile.jspa?name=prabhakar.digumarthi@gmail.com)** opened **[SPR-14127](https://jira.spring.io/browse/SPR-14127?redirect=false)** and commented  I am trying to register custom property editors using the following configuration in my spring boot application.Reffered the following documentation http://docs.spring.io/spring-framework/docs/3.0.0.M4/reference/html/ch05s04.html  section 5.4.2.1.      @Bean      public static CustomEditorConfigurer customEditorConfigurer() {         CustomEditorConfigurer configurer = new CustomEditorConfigurer();         configurer.setPropertyEditorRegistrars(new PropertyEditorRegistrar[] {     				(registry) -> registry.registerCustomEditor(Instant.class,    new CustomInstantEditor()) });     		return configurer;     	}  When I created a BeanWrapper and using it I am getting the following error  Code:      BeanWrapper newAccountWrapper = new BeanWrapperImpl(newAccount);     newAccountWrapper.setPropertyValue(""chardate"", value);  Error is:      Exception is Failed to convert property value of type [java.lang.String] to required type [java.time.Instant] for property 'chardate'; nested exception is java.lang.IllegalStateException: Cannot convert value of type [java.lang.String] to required type [java.time.Instant] for property 'chardate': no matching editors or conversion strategy found  But the above code works if I register the CustomEditor for the BeanWrapper      BeanWrapper newAccountWrapper = new BeanWrapperImpl(newAccount);     newAccountWrapper.registerCustomEditor(Instant.class, new         		 CustomInstantEditor());  So can I not register customPropertyEditors using CustomEditorConfigurer BeanFactoryPostProcessor ?   --- No further details from [SPR-14127](https://jira.spring.io/browse/SPR-14127?redirect=false)","closed","in: core,","spring-projects-issues","2016-04-07T02:53:45Z","2019-01-12T16:22:07Z"
"","18304","Regression: @Value doesn't inject classpath resources without explicit prefix [SPR-13731]","**[Piotr Turski](https://jira.spring.io/secure/ViewProfile.jspa?name=piotr.turski)** opened **[SPR-13731](https://jira.spring.io/browse/SPR-13731?redirect=false)** and commented  in my maven project i have a file `src/main/resources/someFile.txt` so it's on the classpath. in spring 4.1.5 the following constructor autowiring works. but in spring 4.2.3 it doesn't  ```java @Autowired public MyConstructor(@Value(""someFile.txt"") Resource res) {     ... } ```  4.2.3 throws the following exception:  ``` Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [com.mycompany.MyConstructor]: Constructor threw exception; nested exception is java.io.FileNotFoundException: Could not open ServletContext resource [/someFile.txt] 	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:163) ~[spring-beans-4.2.3.RELEASE.jar:4.2.3.RELEASE] 	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:122) ~[spring-beans-4.2.3.RELEASE.jar:4.2.3.RELEASE] 	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:267) ~[spring-beans-4.2.3.RELEASE.jar:4.2.3.RELEASE] 	... 45 common frames omitted Caused by: java.io.FileNotFoundException: Could not open ServletContext resource [/someFile.txt] ```  to make it work in spring 4.2.3 you have to add `""classpath:/""`. the follwoing works in 4.2.3  ```java @Autowired public MyConstructor(@Value(""classpath:/someFile.txt"") Resource res) {     ... } ```    ---  **Affects:** 4.2.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3bc2a977765898002b1f1d216b263461f16f4ebe, https://github.com/spring-projects/spring-framework/commit/def10343eae7205eca09f313c20e07a9fd942a70","closed","in: core,","spring-projects-issues","2015-11-29T03:53:18Z","2019-01-11T19:31:18Z"
"","18293","Regression: AsyncAnnotationBeanPostProcessor fails on startup when encountering ambiguous TaskExecutor beans [SPR-13720]","**[Piotr Leśniak](https://jira.spring.io/secure/ViewProfile.jspa?name=plesniak)** opened **[SPR-13720](https://jira.spring.io/browse/SPR-13720?redirect=false)** and commented  After upgrading spring-core from 4.1.5.RELEASE to 4.2.3.RELEASE context of our applications failed to start. The problem is with too many beans qualifying to 'taskExecutor' :  ``` java.lang.IllegalStateException: More than one TaskExecutor bean exists within the context, and none is named 'taskExecutor'. Mark one of them as primary or name it 'taskExecutor' (possibly as an alias); or specify the AsyncConfigurer interface and implement getAsyncExecutor() accordingly ... Caused by:  org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type [org.springframework.core.task.TaskExecutor] is defined: expected single matching bean but found 4: clientOutboundChannelExecutor,messageBrokerTaskScheduler,clientInboundChannelExecutor,brokerChannelExecutor ```  It is related to AsyncAnnotationBeanPostProcessor which tries to instantiate taskExecutor for `@Async` annotated methods in setBeanFactory method.  The fix is easy, it requires only to create new bean named 'taskExecutor' or mark one of existing with `@Primary`.  However this bug is a pain for following reasons: 1. Neither of the existing task executors in context (clientOutboundChannelExecutor,messageBrokerTaskScheduler,clientInboundChannelExecutor,brokerChannelExecutor) is created by us - all of them comes from some others spring libraries (I think messaging and websockets?) 2. We don't use `@Async` annotation and we don't have `@EnableAsync` anywhere in our code.  Is there a way to disable AsyncAnnotationBeanPostProcessor from registering and creating taskExecutor?  Also, a logic in instantiating taskExecutor is a bit odd to me - maybe throwing exception when there are many Beans implementing TaskExecutor and no bean with name ""taskExecutor"" is not a good behaviour?  ---  **Affects:** 4.2 GA  **Issue Links:** - #17839 AsyncAnnotationBeanPostProcessor could find TaskExecutor by type/name - #18602 Regression: Early instantiation of a bean prevents proxying for `@Async` in 4.2.x but works in 4.1.x  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2a3bf6999109deeead84d14b46cb91f9251eaf4a","closed","in: core,","spring-projects-issues","2015-11-24T11:19:20Z","2019-01-13T05:32:57Z"
"","18435","ContextClosedEvent is propagated to parent context, misleading the beans [SPR-13862]","**[Piotr Findeisen](https://jira.spring.io/secure/ViewProfile.jspa?name=pofin)** opened **[SPR-13862](https://jira.spring.io/browse/SPR-13862?redirect=false)** and commented  Consider a `ApplicationListener` bean. Such a bean wants to know when context is closed. However, it might receive `ContextClosedEvent` as well when some _child context_ gets closed.  ##### Real-life example.  Beans might want to stop its operation as soon as `ContextClosedEvent` is dispatched, rather then on relying on `@PreDestroy` / `destroy-method`, so that they stop their work while all are operational. `@PreDestroy` just doesn't provide necessary ordering of destruction when one bean is a reactor or scheduler and the other bean registers some callbacks in the first.  Now, CXF's `CXFServlet`, creates a _child context_. Sounds legal. It also destroys _child context_. This also sounds legal but the child context `ContextClosedEvent` gets propagated to parent and beans registered in the parent context get completely mistaken.   --- No further details from [SPR-13862](https://jira.spring.io/browse/SPR-13862?redirect=false)","closed","in: core,","spring-projects-issues","2016-01-12T13:06:15Z","2019-01-12T16:22:28Z"
"","18389","Consistent validation of annotated methods behind AOP proxies [SPR-13816]","**[Piotr Findeisen](https://jira.spring.io/secure/ViewProfile.jspa?name=pofin)** opened **[SPR-13816](https://jira.spring.io/browse/SPR-13816?redirect=false)** and commented  ##### steps to reproduce  * annotate a private method with `@EventListener` * make sure the bean is proxied, e.g. due to `@Transactional` * publish event  ##### observed  * the non-overriden method on proxy is called  ##### expected  * either this is supported and the method is called on actual instance, not on the proxy (like `@Autowired`) * OR forbidden, detected and reported with an explicit exception during context start  ---  **Affects:** 4.2.2  **Issue Links:** - #18488 Scheduled method is not invoked via proxy - #18415 Validate `@RequestMapping` methods on AOP proxies  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/826a00a56a80ebabab8143b880167cc18620e327, https://github.com/spring-projects/spring-framework/commit/470ea977e1126eb0318ca46f0f4f02553042a8c7","closed","type: enhancement,","spring-projects-issues","2015-12-23T14:07:19Z","2019-01-13T05:32:27Z"
"","18103","EventListenerMethodProcessor unconditionally instantiates certain beans, leading to BeanCreationException during deployment [SPR-13526]","**[Piotr Findeisen](https://jira.spring.io/secure/ViewProfile.jspa?name=pofin)** opened **[SPR-13526](https://jira.spring.io/browse/SPR-13526?redirect=false)** and commented  ##### steps to reproduce  1. Use ``    * this loads `EventListenerMethodProcessor` 2. have a prototype bean ""`A`"" which uses `@Transactional` and expects constructor arguments to be provided using `org.springframework.beans.factory.BeanFactory.getBean(String, Object...)`    * the bean doesn't need to use `@EventListener` 3. start the context  ##### expected  * context starts * if ""`A`"" is the only bean (or if nothing uses ""`A`""), the bean is _not instantiated at all_  ##### observed  1. `EventListenerMethodProcessor` wants to know whether ""`A`"" is annotated with  `@EventListener`    1. it calls `applicationContext.getType(""A"")`       1. `applicationContext` (or rather `InfrastructureAdvisorAutoProxyCreator`) sees `@Transactional` ...       2. ... so sth like `A$$EnhancerBySpringCGLIB$$8e7e447` is returned    2. `EventListenerMethodProcessor.getTargetClass` sees the bean class is kind of `SpringProxy`, so...    3. it **instantiates** the bean, but obviously not providing required arguments to constructor  ---  **Affects:** 4.2.1  **Issue Links:** - #18256 EventListener in a Request scoped bean fails context initialization - #18114 Spring incorrectly interprets a bean to be a spring eventlistener - #17619 EventListenerMethodProcessor resolves classes of lazy beans causing NoClassDefFoundError  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/dbec2121a05f4e5ad3f3dc1e3f5fe82f495fed3f  1 votes, 5 watchers","closed","in: core,","spring-projects-issues","2015-10-01T16:36:40Z","2019-01-14T04:41:40Z"
"","18562","Preserve order of broker messages [SPR-13989]","**[Pieter](https://jira.spring.io/secure/ViewProfile.jspa?name=pieter)** opened **[SPR-13989](https://jira.spring.io/browse/SPR-13989?redirect=false)** and commented  M1 is a large message and M2 is a small message. M2 is sent immediately after M1. => M2 is received before M1 although the messageId of M1 is smaller than the messageId of M2  I enabled tracing for 'org.springframework.web.socket': clientOutboundChannel-90 processes M1 clientOutboundChannel-91 processes M2  10:43:01 [clientOutboundChannel-91] WebSocketServerSockJsSession - Cancelling heartbeat in session qdivbsu4 10:43:01 [clientOutboundChannel-91] WebSocketServerSockJsSession - Preparing to write SockJsFrame content='a[""MESSAGE\ndestination:/user/queue/reply-1d07e5d5-91f1-4617-9f8e-477041972ad5\n...(truncated)' 10:43:01 [clientOutboundChannel-91] WebSocketServerSockJsSession - Writing SockJsFrame content='a[""MESSAGE\ndestination:/user/queue/reply-1d07e5d5-91f1-4617-9f8e-477041972ad5\n...(truncated)' 10:43:01 [clientOutboundChannel-91] NativeWebSocketSession - Sending TextMessage payload=[a[""MESSAGE..], byteCount=14989, last=true], JettyWebSocketSession[id=6baad94d, uri=ws://localhost:8080/weaver/ep/307/qdivbsu4/websocket] 10:43:01 [clientOutboundChannel-91] WebSocketServerSockJsSession - Scheduled heartbeat in session qdivbsu4 10:43:01 [clientOutboundChannel-90] WebSocketServerSockJsSession - Cancelling heartbeat in session qdivbsu4 10:43:01 [clientOutboundChannel-90] WebSocketServerSockJsSession - Preparing to write SockJsFrame content='a[""MESSAGE\ndestination:/user/queue/reply-1d07e5d5-91f1-4617-9f8e-477041972ad5\n...(truncated)' 10:43:01 [clientOutboundChannel-90] WebSocketServerSockJsSession - Writing SockJsFrame content='a[""MESSAGE\ndestination:/user/queue/reply-1d07e5d5-91f1-4617-9f8e-477041972ad5\n...(truncated)' 10:43:01 [clientOutboundChannel-90] NativeWebSocketSession - Sending TextMessage payload=[a[""MESSAGE..], byteCount=4556671, last=true], JettyWebSocketSession[id=6baad94d, uri=ws://localhost:8080/weaver/ep/307/qdivbsu4/websocket] 10:43:01 [clientOutboundChannel-90] WebSocketServerSockJsSession - Scheduled heartbeat in session qdivbsu4  I suspect that because the conversion of the payload of the smaller message is so fast that it passes the conversion of the larger payload and hence is sent before the larger message.  ---  **Affects:** 4.2.5  **Issue Links:** - #21643 Preserve-publish-order is mentioned in documentation of 5.0.x  1 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2016-02-26T14:30:45Z","2019-01-11T19:00:48Z"
"","18444","SessionDisconnectEvent.getUser() returns null instead of the session user [SPR-13871]","**[Pierre Fouché](https://jira.spring.io/secure/ViewProfile.jspa?name=pfouche)** opened **[SPR-13871](https://jira.spring.io/browse/SPR-13871?redirect=false)** and commented  The problem is in `org.springframework.web.socket.messaging.SessionDisconnectEvent`, line 56. Current code is:  ```java public SessionDisconnectEvent(Object source, Message message, String sessionId, 			CloseStatus closeStatus, Principal user) { 		super(source, message); ```  `user` is lost. Should be:  ```java public SessionDisconnectEvent(Object source, Message message, String sessionId, 			CloseStatus closeStatus, Principal user) { 		super(source, message, user); ```    ---  **Affects:** 4.2.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cdc9bf76a94845dfcf2bdc02058ca5f6f3072e0b, https://github.com/spring-projects/spring-framework/commit/4fc6ead5487f1ea30a7ac1c3209f153af102fed6","closed","type: bug,","spring-projects-issues","2016-01-15T15:35:25Z","2016-02-25T09:36:35Z"
"","18619","AbstractStaxXMLReader should recognize standard features such as the string interning feature [SPR-14047]","**[Philippe Marschall](https://jira.spring.io/secure/ViewProfile.jspa?name=marschall)** opened **[SPR-14047](https://jira.spring.io/browse/SPR-14047?redirect=false)** and commented  We use the validation support in Spring WS to validate SOAP requests. Profiling has shown that we have a lot of caught `SAXNotRecognizedException` during normal program execution. They come from `AbstractXMLReader#getFeature` which is called from `[ValidatorHandlerImpl#validate](http://grepcode.com/file/repo1.maven.org/maven2/xerces/xercesImpl/2.11.0/org/apache/xerces/jaxp/validation/ValidatorHandlerImpl.java#730)`. `ValidatorHandlerImpl` checks for the value of the [string interning feature](https://xerces.apache.org/xerces-j/features.html#string-interning). Throwing a `SAXNotRecognizedException` is interpreted the same way as returning false.  Recognizing the feature and returning false preserves the semantics but gets rid of the `SAXNotRecognizedException` during normal control flow.   ---  **Affects:** 4.2.5","closed","type: enhancement,","spring-projects-issues","2016-03-12T15:14:45Z","2016-04-06T08:38:13Z"
"","18482","Annotation for Rate Limiting [SPR-13908]","**[Philipp Nanz](https://jira.spring.io/secure/ViewProfile.jspa?name=philippn)** opened **[SPR-13908](https://jira.spring.io/browse/SPR-13908?redirect=false)** and commented  In the world of Spring MVC, I would find a new `@RateLimit` annotation useful, that could be used to rate limit any method in a `@Controller`.  Consider the following example:  ```java @RequestMapping(path=""/public/authenticate"") public boolean attemptAuthentication(@RequestParam String username, @RequestParam String password); ```  Without some sort of rate limiting, such a method would be prone to brute force attacks. There are probably other fields where such a annotation may be useful as well.  The syntax could be something like `@RateLimit(limit=100, period=60, unit=TimeUnit.SECOND)`. Even better, there might be a way to specify different buckets (for example via SpEL) so that the rate limit could be tracked for different user IP addresses individually.  As far as implementation goes, Guava has a RateLimiter that could act as an example of how this basically works.   ---  **Affects:** 4.2.4  4 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2016-02-01T13:10:55Z","2016-09-23T20:23:11Z"
"","18787","Avoid hard logging of WebApplicationInitializer classes [SPR-14213]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-14213](https://jira.spring.io/browse/SPR-14213?redirect=false)** and commented  `SpringServletContainerInitializer` currently finds, initializes and logs all `WebApplicationInitializer` implementations in `onStartup`. With Spring Boot this can be a little confusing because initializers might be conditional. We can't use the usual `@Condition` annotation since the `ApplicationContext` hasn't been created yet, but perhaps we could add a `ConditionalWebApplicationInitializer` extension to `WebApplicationInitializer` with an additional `isActive()` method.  See https://github.com/spring-projects/spring-boot/issues/5778 for the original Boot bug.   ---  **Affects:** 4.2.5, 4.3 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6a3d4940b57ca54e0f4c955df828d92cc586bb6d, https://github.com/spring-projects/spring-framework/commit/f73df2e1382264e56ede0bb0bffa02d80517adb8","closed","type: enhancement,","spring-projects-issues","2016-04-24T19:24:17Z","2016-05-06T08:13:31Z"
"","18687","Allow AbstractTestContextBootstrapper subclasses to contribute config classes [SPR-14115]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-14115](https://jira.spring.io/browse/SPR-14115?redirect=false)** and commented  Spring Boot would like to contribute `classes` to the initial `MergedContextConfiguration` but it can't because `AbstractTestContextBootstrapper.buildMergedContextConfiguration` is final.   --- No further details from [SPR-14115](https://jira.spring.io/browse/SPR-14115?redirect=false)","closed","status: declined,","spring-projects-issues","2016-04-04T21:39:06Z","2019-01-12T16:22:09Z"
"","18660","Refine TestPropertySourceUtils for Spring Boot usage [SPR-14088]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-14088](https://jira.spring.io/browse/SPR-14088?redirect=false)** and commented  There is quite a lot of overlap between `TestPropertySourceUtils` and Spring Boot's `EnvironmentTestUtils`. Changing `TestPropertySourceUtils` to accept var-args and allowing `addInlinedPropertiesToEnvironment` to be called more than once should allow us to migrate Spring Boot users.   ---  **Affects:** 4.2.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fc839331a7bd2064ed9bb215b5f5ff5259f05f21","closed","type: enhancement,","spring-projects-issues","2016-03-25T17:53:38Z","2016-04-06T08:38:15Z"
"","18607","Provide flag to allow ServletTestExecutionListener to run without @WebAppConfiguration [SPR-14035]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-14035](https://jira.spring.io/browse/SPR-14035?redirect=false)** and commented  Currently `ServletTestExecutionListener` only kicks in when `@WebAppConfiguration` is on the `testClass`. Spring Boot would like to use the listener from test configured via a `Bootstrapper` and which don't contain `@WebAppConfiguration` annotations.  Can we consider adding additional attribute based activation?   ---  **Affects:** 4.2.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8222ff465deea4c93d1e5bfd2b9a12f9c05099dc, https://github.com/spring-projects/spring-framework/commit/bb590db39625c63157a929f06e9b255349300c14","closed","type: enhancement,","spring-projects-issues","2016-03-10T07:30:31Z","2016-04-06T08:38:14Z"
"","18581","Allow @ComponentScan custom filters to implement *Aware interfaces [SPR-14009]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-14009](https://jira.spring.io/browse/SPR-14009?redirect=false)** and commented  `@ComponentScan` allows custom `TypeFilters` to be created and used for scanning. Spring Boot would like to have access to the `BeanFactory` from within the filter, however, this isn't currently possible. It would be helpful if a subset of `*Aware` interfaces could be implemented on the filter (much like they can be on `ImportBeanDefinitionRegistrar` & `ImportSelector`.  ---  **Affects:** 4.2.5  **Issue Links:** - #19250 Consistent *Aware callbacks for TypeFilters, ImportSelectors and ImportBeanDefinitionRegistrars  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/984, and commits https://github.com/spring-projects/spring-framework/commit/094cf6cafbd20310be36e988a3e1eecf347009d3","closed","type: enhancement,","spring-projects-issues","2016-03-01T21:39:23Z","2019-01-11T15:06:38Z"
"","18571","Introduce ContextCustomizer API in the TestContext framework [SPR-13998]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-13998](https://jira.spring.io/browse/SPR-13998?redirect=false)** and commented  Spring Boot is looking to improve various aspects of its test support in 1.4 and would like to have an extension point that allows ApplicationContexts created by spring-test to be customized.  ---  **Issue Links:** - #17204 Introduce declarative customization of ApplicationContext before refresh in the TestContext framework - #17204 Introduce declarative customization of ApplicationContext before refresh in the TestContext framework (_**""supersedes""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/beb01e674e33d6302390acd8b6ec39963f3f80e1, https://github.com/spring-projects/spring-framework/commit/cbd1342fbb249e36a85c47847842606b935934fb, https://github.com/spring-projects/spring-framework/commit/87a3a5cb3b268d69adc6c78a27b4bb002e500609","closed","type: enhancement,","spring-projects-issues","2016-02-29T07:22:22Z","2019-01-11T19:01:58Z"
"","18564","Remove @BootstrapWith from @WebAppConfiguration [SPR-13991]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-13991](https://jira.spring.io/browse/SPR-13991?redirect=false)** and commented  Currently the `@WebAppConfiguration` annotation uses `@BootstrapWith` to trigger the loading of `WebTestContextBootstrapper`. This prevents other bootstrapped annotations from using `@WebAppConfiguration` as a trigger. Specifically Spring Boot has an `@IntegrationTest` annotation which I would like to use with a bootstrapper.   ---  **Affects:** 4.1.9","closed","type: enhancement,","spring-projects-issues","2016-02-26T23:25:41Z","2016-04-06T08:38:11Z"
"","18545","Support repeatable annotations as composed annotations [SPR-13973]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-13973](https://jira.spring.io/browse/SPR-13973?redirect=false)** and commented  Given the following annotations:  ```java @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.TYPE) public @interface MockBeans {  	MockBean[] value(); } ```  ```java @Target({ ElementType.TYPE, ElementType.FIELD }) @Retention(RetentionPolicy.RUNTIME) @Repeatable(MockBeans.class) public @interface MockBean {  	@AliasFor(""classToMock"") 	Class value() default Void.class;  	@AliasFor(""value"") 	Class classToMock() default Void.class; } ```  ```java @Target({ ElementType.TYPE, ElementType.FIELD }) @Retention(RetentionPolicy.RUNTIME) @MockBean public @interface MyMockBean {  	@AliasFor(annotation = MockBean.class) 	Class value(); } ```  And the following class:  ```java @MyMockBean(ExampleService.class) static class MetaMockBean { } ```  Calling `AnnotationUtils.getRepeatableAnnotations(MetaMockBean.class,MockBean.class, MockBeans.class)` will return a synthesized annotation. However, calling `value()` on the result returns `Void.class` rather than the expected `ExampleService.class`.  Is this expected behavior?  ---  **Affects:** 4.2.4  **Issue Links:** - #18376 Support `@AliasFor` for `@JmsListener` attributes (_**""is depended on by""**_) - #17490 Support multiple composed annotations on a single annotated element - #18054 Support `@Cache`* as merged composed annotations - #18485 Introduce findRepeatableAnnotations() in AnnotationUtils (_**""supersedes""**_) - #18376 Support `@AliasFor` for `@JmsListener` attributes (_**""supersedes""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4836d06704da38a099e4afe96abaad15297e6862, https://github.com/spring-projects/spring-framework/commit/46e0484bf8aad00aef58a7812e34c68259bdf4e5, https://github.com/spring-projects/spring-framework/commit/2ed3382a604a9e178b69c7053ff5f6512d643718, https://github.com/spring-projects/spring-framework/commit/b0c6357540eba4a4ec8311a7806e076ee14c590f, https://github.com/spring-projects/spring-framework/commit/c6f6e192c09f2cf16ab7eeb096abb30dfa244894, https://github.com/spring-projects/spring-framework/commit/3597879608acc1ddfb9b57f14c664cbbcb7acd9d, https://github.com/spring-projects/spring-framework/commit/d572b022cc041f61aea412d4ea363bc6b27c3ec7, https://github.com/spring-projects/spring-framework/commit/25354690995aac0c5b9a9502b01b573423635091, https://github.com/spring-projects/spring-framework/commit/4fa11e334f5367de81401fc2cc256c2142f51593, https://github.com/spring-projects/spring-framework/commit/c6b1f3865104e9eb2a7562fca70a71e86e19ef8e, https://github.com/spring-projects/spring-framework/commit/4742aa0bfeaa96737baa407029fbddfd6bc16087, https://github.com/spring-projects/spring-framework/commit/b6d9fd39e6e29f94a90fe97959c33a9adb24c99b","closed","type: enhancement,","spring-projects-issues","2016-02-23T05:51:19Z","2019-01-13T05:28:07Z"
"","18541","Allow spring.factories to load package private classes [SPR-13969]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-13969](https://jira.spring.io/browse/SPR-13969?redirect=false)** and commented  Currently classes referenced in `spring.factories` all need to be public. As they are often somewhat internal it would be nice if they could be package private.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d8a05592e23944dd542e28fbe0a913130b99d0b1","closed","type: enhancement,","spring-projects-issues","2016-02-22T17:33:52Z","2016-04-06T08:38:14Z"
"","18537","NPE when using Undertow 1.3 doUpgrade call [SPR-13964]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-13964](https://jira.spring.io/browse/SPR-13964?redirect=false)** and commented  The `SampleWebSocketsApplicationTests.echoEndpoint` test in Spring Boot's `spring-boot-sample-websocket-undertow` project fails to work with Spring 4.3.  The following exception is thrown:  ``` org.springframework.web.util.NestedServletException: Request processing failed; nested exception is org.springframework.web.socket.sockjs.SockJsException: Uncaught failure in SockJS request, uri=http://localhost:65179/echo/websocket; nested exception is org.springframework.web.socket.server.HandshakeFailureException: Servlet request failed to upgrade to WebSocket: http://localhost:65179/echo/websocket; nested exception is javax.servlet.ServletException: java.lang.NullPointerException 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:984) ~[spring-webmvc-4.3.0.BUILD-SNAPSHOT.jar:4.3.0.BUILD-SNAPSHOT] 	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:863) ~[spring-webmvc-4.3.0.BUILD-SNAPSHOT.jar:4.3.0.BUILD-SNAPSHOT] 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:687) ~[javax.servlet-api-3.1.0.jar:3.1.0] 	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:848) ~[spring-webmvc-4.3.0.BUILD-SNAPSHOT.jar:4.3.0.BUILD-SNAPSHOT] 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790) ~[javax.servlet-api-3.1.0.jar:3.1.0] 	at io.undertow.servlet.handlers.ServletHandler.handleRequest(ServletHandler.java:85) ~[undertow-servlet-1.3.17.Final.jar:1.3.17.Final] 	at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:129) ~[undertow-servlet-1.3.17.Final.jar:1.3.17.Final] 	at io.undertow.websockets.jsr.JsrWebSocketFilter.doFilter(JsrWebSocketFilter.java:129) ~[undertow-websockets-jsr-1.3.17.Final.jar:1.3.17.Final] 	at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:60) ~[undertow-servlet-1.3.17.Final.jar:1.3.17.Final] 	at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131) ~[undertow-servlet-1.3.17.Final.jar:1.3.17.Final] 	at org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration$ApplicationContextHeaderFilter.doFilterInternal(EndpointWebMvcAutoConfiguration.java:237) ~[classes/:na] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.0.BUILD-SNAPSHOT.jar:4.3.0.BUILD-SNAPSHOT] 	at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:60) ~[undertow-servlet-1.3.17.Final.jar:1.3.17.Final] 	at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131) ~[undertow-servlet-1.3.17.Final.jar:1.3.17.Final] 	at org.springframework.boot.actuate.trace.WebRequestTraceFilter.doFilterInternal(WebRequestTraceFilter.java:101) ~[classes/:na] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.0.BUILD-SNAPSHOT.jar:4.3.0.BUILD-SNAPSHOT] 	at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:60) ~[undertow-servlet-1.3.17.Final.jar:1.3.17.Final] 	at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131) ~[undertow-servlet-1.3.17.Final.jar:1.3.17.Final] 	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-4.3.0.BUILD-SNAPSHOT.jar:4.3.0.BUILD-SNAPSHOT] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.0.BUILD-SNAPSHOT.jar:4.3.0.BUILD-SNAPSHOT] 	at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:60) ~[undertow-servlet-1.3.17.Final.jar:1.3.17.Final] 	at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131) ~[undertow-servlet-1.3.17.Final.jar:1.3.17.Final] 	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:87) ~[spring-web-4.3.0.BUILD-SNAPSHOT.jar:4.3.0.BUILD-SNAPSHOT] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.0.BUILD-SNAPSHOT.jar:4.3.0.BUILD-SNAPSHOT] 	at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:60) ~[undertow-servlet-1.3.17.Final.jar:1.3.17.Final] 	at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131) ~[undertow-servlet-1.3.17.Final.jar:1.3.17.Final] 	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77) ~[spring-web-4.3.0.BUILD-SNAPSHOT.jar:4.3.0.BUILD-SNAPSHOT] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.0.BUILD-SNAPSHOT.jar:4.3.0.BUILD-SNAPSHOT] 	at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:60) ~[undertow-servlet-1.3.17.Final.jar:1.3.17.Final] 	at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131) ~[undertow-servlet-1.3.17.Final.jar:1.3.17.Final] 	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:121) ~[spring-web-4.3.0.BUILD-SNAPSHOT.jar:4.3.0.BUILD-SNAPSHOT] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.0.BUILD-SNAPSHOT.jar:4.3.0.BUILD-SNAPSHOT] 	at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:60) ~[undertow-servlet-1.3.17.Final.jar:1.3.17.Final] 	at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131) ~[undertow-servlet-1.3.17.Final.jar:1.3.17.Final] 	at org.springframework.boot.actuate.autoconfigure.MetricsFilter.doFilterInternal(MetricsFilter.java:103) ~[classes/:na] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.0.BUILD-SNAPSHOT.jar:4.3.0.BUILD-SNAPSHOT] 	at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:60) ~[undertow-servlet-1.3.17.Final.jar:1.3.17.Final] 	at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131) ~[undertow-servlet-1.3.17.Final.jar:1.3.17.Final] 	at io.undertow.servlet.handlers.FilterHandler.handleRequest(FilterHandler.java:84) ~[undertow-servlet-1.3.17.Final.jar:1.3.17.Final] 	at io.undertow.servlet.handlers.security.ServletSecurityRoleHandler.handleRequest(ServletSecurityRoleHandler.java:62) ~[undertow-servlet-1.3.17.Final.jar:1.3.17.Final] 	at io.undertow.servlet.handlers.ServletDispatchingHandler.handleRequest(ServletDispatchingHandler.java:36) ~[undertow-servlet-1.3.17.Final.jar:1.3.17.Final] 	at io.undertow.servlet.handlers.security.SSLInformationAssociationHandler.handleRequest(SSLInformationAssociationHandler.java:131) ~[undertow-servlet-1.3.17.Final.jar:1.3.17.Final] 	at io.undertow.servlet.handlers.security.ServletAuthenticationCallHandler.handleRequest(ServletAuthenticationCallHandler.java:57) ~[undertow-servlet-1.3.17.Final.jar:1.3.17.Final] 	at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43) ~[undertow-core-1.3.17.Final.jar:1.3.17.Final] 	at io.undertow.security.handlers.AbstractConfidentialityHandler.handleRequest(AbstractConfidentialityHandler.java:46) ~[undertow-core-1.3.17.Final.jar:1.3.17.Final] 	at io.undertow.servlet.handlers.security.ServletConfidentialityConstraintHandler.handleRequest(ServletConfidentialityConstraintHandler.java:64) ~[undertow-servlet-1.3.17.Final.jar:1.3.17.Final] 	at io.undertow.security.handlers.AuthenticationMechanismsHandler.handleRequest(AuthenticationMechanismsHandler.java:60) ~[undertow-core-1.3.17.Final.jar:1.3.17.Final] 	at io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler.handleRequest(CachedAuthenticatedSessionHandler.java:77) ~[undertow-servlet-1.3.17.Final.jar:1.3.17.Final] 	at io.undertow.security.handlers.AbstractSecurityContextAssociationHandler.handleRequest(AbstractSecurityContextAssociationHandler.java:43) ~[undertow-core-1.3.17.Final.jar:1.3.17.Final] 	at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43) ~[undertow-core-1.3.17.Final.jar:1.3.17.Final] 	at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43) ~[undertow-core-1.3.17.Final.jar:1.3.17.Final] 	at io.undertow.servlet.handlers.ServletInitialHandler.handleFirstRequest(ServletInitialHandler.java:284) ~[undertow-servlet-1.3.17.Final.jar:1.3.17.Final] 	at io.undertow.servlet.handlers.ServletInitialHandler.dispatchRequest(ServletInitialHandler.java:263) ~[undertow-servlet-1.3.17.Final.jar:1.3.17.Final] 	at io.undertow.servlet.handlers.ServletInitialHandler.access$000(ServletInitialHandler.java:81) ~[undertow-servlet-1.3.17.Final.jar:1.3.17.Final] 	at io.undertow.servlet.handlers.ServletInitialHandler$1.handleRequest(ServletInitialHandler.java:174) ~[undertow-servlet-1.3.17.Final.jar:1.3.17.Final] 	at io.undertow.server.Connectors.executeRootHandler(Connectors.java:202) ~[undertow-core-1.3.17.Final.jar:1.3.17.Final] 	at io.undertow.server.HttpServerExchange$1.run(HttpServerExchange.java:793) [undertow-core-1.3.17.Final.jar:1.3.17.Final] 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_40] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_40] 	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_40] Caused by: org.springframework.web.socket.sockjs.SockJsException: Uncaught failure in SockJS request, uri=http://localhost:65179/echo/websocket; nested exception is org.springframework.web.socket.server.HandshakeFailureException: Servlet request failed to upgrade to WebSocket: http://localhost:65179/echo/websocket; nested exception is javax.servlet.ServletException: java.lang.NullPointerException 	at org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler.handleRequest(SockJsHttpRequestHandler.java:135) ~[spring-websocket-4.3.0.BUILD-SNAPSHOT.jar:4.3.0.BUILD-SNAPSHOT] 	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:51) ~[spring-webmvc-4.3.0.BUILD-SNAPSHOT.jar:4.3.0.BUILD-SNAPSHOT] 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:961) ~[spring-webmvc-4.3.0.BUILD-SNAPSHOT.jar:4.3.0.BUILD-SNAPSHOT] 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:895) ~[spring-webmvc-4.3.0.BUILD-SNAPSHOT.jar:4.3.0.BUILD-SNAPSHOT] 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:972) ~[spring-webmvc-4.3.0.BUILD-SNAPSHOT.jar:4.3.0.BUILD-SNAPSHOT] 	... 59 common frames omitted Caused by: org.springframework.web.socket.server.HandshakeFailureException: Servlet request failed to upgrade to WebSocket: http://localhost:65179/echo/websocket; nested exception is javax.servlet.ServletException: java.lang.NullPointerException 	at org.springframework.web.socket.server.standard.UndertowRequestUpgradeStrategy.upgradeInternal(UndertowRequestUpgradeStrategy.java:113) ~[spring-websocket-4.3.0.BUILD-SNAPSHOT.jar:4.3.0.BUILD-SNAPSHOT] 	at org.springframework.web.socket.server.standard.AbstractStandardUpgradeStrategy.upgrade(AbstractStandardUpgradeStrategy.java:119) ~[spring-websocket-4.3.0.BUILD-SNAPSHOT.jar:4.3.0.BUILD-SNAPSHOT] 	at org.springframework.web.socket.server.support.AbstractHandshakeHandler.doHandshake(AbstractHandshakeHandler.java:281) ~[spring-websocket-4.3.0.BUILD-SNAPSHOT.jar:4.3.0.BUILD-SNAPSHOT] 	at org.springframework.web.socket.sockjs.transport.handler.WebSocketTransportHandler.doHandshake(WebSocketTransportHandler.java:130) ~[spring-websocket-4.3.0.BUILD-SNAPSHOT.jar:4.3.0.BUILD-SNAPSHOT] 	at org.springframework.web.socket.sockjs.transport.TransportHandlingSockJsService.handleRawWebSocketRequest(TransportHandlingSockJsService.java:206) ~[spring-websocket-4.3.0.BUILD-SNAPSHOT.jar:4.3.0.BUILD-SNAPSHOT] 	at org.springframework.web.socket.sockjs.support.AbstractSockJsService.handleRequest(AbstractSockJsService.java:391) ~[spring-websocket-4.3.0.BUILD-SNAPSHOT.jar:4.3.0.BUILD-SNAPSHOT] 	at org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler.handleRequest(SockJsHttpRequestHandler.java:132) ~[spring-websocket-4.3.0.BUILD-SNAPSHOT.jar:4.3.0.BUILD-SNAPSHOT] 	... 63 common frames omitted Caused by: javax.servlet.ServletException: java.lang.NullPointerException 	at io.undertow.websockets.jsr.ServerWebSocketContainer.doUpgrade(ServerWebSocketContainer.java:421) ~[undertow-websockets-jsr-1.3.17.Final.jar:1.3.17.Final] 	at org.springframework.web.socket.server.standard.UndertowRequestUpgradeStrategy.upgradeInternal(UndertowRequestUpgradeStrategy.java:110) ~[spring-websocket-4.3.0.BUILD-SNAPSHOT.jar:4.3.0.BUILD-SNAPSHOT] 	... 69 common frames omitted Caused by: java.lang.NullPointerException: null 	at io.undertow.websockets.jsr.ServerWebSocketContainer.doUpgrade(ServerWebSocketContainer.java:387) ~[undertow-websockets-jsr-1.3.17.Final.jar:1.3.17.Final] 	... 70 common frames omitted ```  The root cause seems to be that `ServerWebSocketContainer.handleAddingFilterMapping` is setting `contextToAddFilter` to null so the `doUpgrade` method fails.   ---  **Affects:** 4.3 RC1","closed","status: declined,","spring-projects-issues","2016-02-19T06:02:37Z","2019-01-12T16:22:19Z"
"","18536","Optional autowire of Map accidentally falls back to unrelated Map [SPR-13963]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-13963](https://jira.spring.io/browse/SPR-13963?redirect=false)** and commented  Upgrading Spring Boot to Framework to 4.3is not currently possible due to failure in `EndpointAutoConfigurationTests`.  It appears that this line in `EndpointAutoConfiguration`:  ```java @Autowired(required = false) private Map healthIndicators = new HashMap(); ```  No longer works correctly as String values end up in the map.  I believe that commit [3f74a74481d](https://github.com/spring-projects/spring-framework/commit/4a0fa69ce469cae2e8c8a1a45f0b43f74a74481d) is ultimately responsible as rolling this back seems to fix the issue.  ---  **Affects:** 4.3 RC1  **Issue Links:** - #12570 Allow for normal bean wiring semantics for types assignable to Map - #19532 Self reference fallback in 4.3 is not meant to apply to collection elements - #19684 Can't autowire BiMap: container resolves non-matching Map of value beans  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/48ee9b52d4be82241c76cc877f281e51905205fb, https://github.com/spring-projects/spring-framework/commit/1b53edfc5e17f30730f0d24ac1a019b85be1e675","closed","in: core,","spring-projects-issues","2016-02-18T19:23:30Z","2019-01-11T19:04:24Z"
"","18528","Allow @ContextConfiguration to be omitted [SPR-13955]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-13955](https://jira.spring.io/browse/SPR-13955?redirect=false)** and commented  The `@ContextConfiguration` annotation is often not _really_ needed if working with a single config. For example:  ```java  @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration  public class MyTest {  	@Test 	public void sometest() throws Exception {  	}  	@Configuration 	static class Config {  		@Bean 		public String myBean() { 			return ""Hello""; 		}  	}  } ```  ---  **Issue Links:** - #18521 Allow AbstractTestContextBootstrapper to provide default ContextConfigurationAttributes - #18521 Allow AbstractTestContextBootstrapper to provide default ContextConfigurationAttributes (_**""supersedes""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2244461778b10ab2b530aa43eda221eee706e7f5","closed","type: enhancement,","spring-projects-issues","2016-02-17T17:46:09Z","2019-01-11T19:05:34Z"
"","18527","Provide shorter 'alias' for SpringJUnit4ClassRunner [SPR-13954]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-13954](https://jira.spring.io/browse/SPR-13954?redirect=false)** and commented  The `SpringJUnit4ClassRunner` is a bit of an ugly name and since it's now the only JUnit runner perhaps it could be renamed (or aliased) to something more succinct:  ```java @RunWith(SpringJUnit4ClassRunner.class) ```  ```java @RunWith(SpringRunner.class) ```    ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9d3dd1bc136b0552bc8925452ad30071da1a7d99","closed","type: enhancement,","spring-projects-issues","2016-02-17T17:36:33Z","2016-04-06T08:38:09Z"
"","18524","(Web)MergedContextConfiguration.equals is not symmetrical [SPR-13951]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-13951](https://jira.spring.io/browse/SPR-13951?redirect=false)** and commented  Currently `MergedContextConfiguration.equals` includes the following line:  ```java if (!(other instanceof MergedContextConfiguration)) { 	return false; } ```  I think it should be  ```java if (!(other.getClass().equals(getClass())) { 	return false; } ```  Since it's used as a cache key, i.e.:  ```java MergedContextConfiguration c = ... WebMergedContextConfiguration w = ...  w.equals(c); // false c.equals(w); // true; ```    ---  **Affects:** 4.2.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ac44f9edd9c4117110dd227da630b8e989be0561, https://github.com/spring-projects/spring-framework/commit/659e44146cd5e4aa513407a962b369bb7955386f","closed","type: bug,","spring-projects-issues","2016-02-16T23:28:08Z","2016-04-08T17:57:22Z"
"","18521","Allow AbstractTestContextBootstrapper to provide default ContextConfigurationAttributes [SPR-13949]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-13949](https://jira.spring.io/browse/SPR-13949?redirect=false)** and commented  It's currently possible to use `@BootstrapWith` to indicate that a test should have a specific bootstrapper. We use this in Spring Boot to support annotations such as `@WebIntegrationTest` and many tests end up looking like this.  ```java @RunWith(SpringRunner.class) @WebIntegrationTest @SpringApplicationConfiguration ```  Often the `@SpringApplicationConfiguration` annotation ends up being empty and just using the defaults. It would be nice if third-party frameworks could provide a _default_ implementation of `ContextConfigurationAttributes` in such cases.  ---  **Issue Links:** - #18528 Allow `@ContextConfiguration` to be omitted - #18528 Allow `@ContextConfiguration` to be omitted (_**""is superseded by""**_)","closed","type: enhancement,","spring-projects-issues","2016-02-16T19:18:39Z","2019-01-13T05:28:20Z"
"","18294","Add JSR 310 Period and Duration Converters [SPR-13721]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-13721](https://jira.spring.io/browse/SPR-13721?redirect=false)** and commented  Currently `DateTimeConverters` includes support for most `javax.time` types however it doesn't support `javax.time.Period` and `javax.time.Duration`. Both offer a `parse` static helper so it should be relatively easy to add them.  ---  **Affects:** 4.2.3  **Issue Links:** - #18156 Add conversion support for java.time.Duration (_**""is duplicated by""**_) - #11372 Add conversion support for Joda Duration and Period - #18095 Conversion support for java.time.YearMonth (as well as MonthDay)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d5ca5b74a58c96c91c12799f935ef7e402c7dfee","closed","type: enhancement,","spring-projects-issues","2015-11-24T20:14:07Z","2019-01-11T19:31:58Z"
"","18260","PathMatchingResourcePatternResolver does not consider manifest based classpaths [SPR-13685]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-13685](https://jira.spring.io/browse/SPR-13685?redirect=false)** and commented  The `PathMatchingResourcePatternResolver` has a `addAllClassLoaderJarRoots` method which is used to find jar files on the classpath. The current implementation uses `URLClassLoader.getURLs()` to find items.  Unfortunately, it appears that `URLClassLoader.getURLs()` doesn't include elements that were added to the classpath in `META-INF/MANIFEST.MF` but not passed to `java -cp`. As Maven uses this technique to launch tests, it's pretty easy to get into a situation where tests fail but production code works.  This bug was originally raised in https://github.com/spring-projects/spring-boot/issues/4438 and a repro project is included https://github.com/MichaelF25/spring-boot-messagesource-bug  ---  **Affects:** 4.2.2  **Issue Links:** - #16711 PathMatchingResourcePatternResolver cannot search for ""classpath*"" patterns in a jar file roots - #16846 Provide subclassing hooks in PathMatchingResourcePatternResolver - #19501 PathMatchingResourcePatternResolver provides duplicate resources with relative URL - #20539 PathMatchingResourcePatternResolver provides duplicate resources when using classpath* prefix combined with ant-style - #20665 PathMatchingResourcePatternResolver returns duplicate resources when using classpath* prefix - #18657 PathMatchingResourcePatternResolver should enforce consistent alphabetical sorting of directory content - #10961 PathMatchingResourcePatternResolver should close jar file from JarURLConnection if not cached  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/08748ecaa44f954b0b5df01c3ab6f27dcdc21a13  0 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2015-11-13T21:32:20Z","2019-01-11T19:26:05Z"
"","18248","Add @RestControllerAdvice annotation [SPR-13673]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-13673](https://jira.spring.io/browse/SPR-13673?redirect=false)** and commented  Originally raise here: https://github.com/spring-projects/spring-boot/issues/4439  —  Hey Spring folks,  I would like to propose really small enhancement but maybe you will find it worth spending a moment.  In the same way `@RestController` removed a need to add to every method `@ResponseBody` maybe it would be worth to add `@RestControllerAdvice` ? This should be pretty easy to do. The motivation for this is that every Spring project (that is exposing REST API) I've seen so far always uses `@ControllerAdvice` with combination with `@ResponseBody`...   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/12b73caa8400a90c601c0bcb52cb1ec9208d6ce0","closed","type: enhancement,","spring-projects-issues","2015-11-11T21:57:48Z","2016-04-06T08:38:08Z"
"","18238","Revisit BeansException warn logging after startup failure [SPR-13663]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-13663](https://jira.spring.io/browse/SPR-13663?redirect=false)** and commented  #16626 added warn logging to `AbstractApplicationContext` to ensure that `BeansExceptions` don't get missed.  Although the intention is good, it has the unwanted side effect of causing most refresh failures to log stacktraces twice. This is particularly obvious with Spring Boot applications where a simple startup failure results in multiple stack-traces.  We could provide a feature flag to suppress the message.  ---  **Affects:** 3.2.15, 4.1.8, 4.2.2  **Issue Links:** - #16626 Exceptions thrown during AbstractApplicationContext.refresh() not being logged right when they are caught - #22081 Do not swallow exception cause when context refresh fails  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/03585f2e4e3b9e886c7c0e0a684e083ad8a032c9, https://github.com/spring-projects/spring-framework/commit/5d6aab34cbe3c4db38dd1698e246967716befcfd, https://github.com/spring-projects/spring-framework/commit/cdf6eb95ab1ec041b1512185d2e00b09f433e866  **Backported to:** [4.1.9](https://github.com/spring-projects/spring-framework/milestone/133?closed=1), [3.2.16](https://github.com/spring-projects/spring-framework/milestone/104?closed=1)","closed","type: enhancement,","spring-projects-issues","2015-11-10T08:02:09Z","2019-01-11T19:13:38Z"
"","18058","Doc: Improve MockRestServiceServer Javadoc sample [SPR-13479]","**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-13479](https://jira.spring.io/browse/SPR-13479?redirect=false)** and commented  The code snipped in the http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/client/MockRestServiceServer.html Javadoc doesn't include any imports. This makes it a little hard to tell where `requestTo` comes from.   ---  **Affects:** 4.2.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fb3e054a31d28ffe6a314ed7eafc70612b7ebd98","closed","type: task,","spring-projects-issues","2015-09-22T12:39:36Z","2015-10-15T13:04:44Z"
"","18116","OutOfMemory Exception when publishing User Events [SPR-13540]","**[Peter Rosendahl](https://jira.spring.io/secure/ViewProfile.jspa?name=prosdl)** opened **[SPR-13540](https://jira.spring.io/browse/SPR-13540?redirect=false)** and commented  We ran into an OutOfMemory Exception while stress testing our application, and it turned out that SimpleApplicationEventMulticaster retained 75% heap. From debugging the code it looks like the retrieverCache from AbstractApplicationEventMulticaster filled up with over 60,000 Elements. Each time our application publishes an ApplicationEvent it gets a different ListenerCacheKey and the map size grows by 1.  This only happens with Events which are not of type ApplicationEvent. See attached Unit Test to demonstrate the behaviour. Test ""userEventTypeApplicationEventCaching"" works and ""userEventCaching"" fails.  ---  **Affects:** 4.2.1  **Attachments:** - [UserDefinedEventsTest.java](https://jira.spring.io/secure/attachment/23142/UserDefinedEventsTest.java) (_2.69 kB_)  **Issue Links:** - #18114 Spring incorrectly interprets a bean to be a spring eventlistener - #17298 ResolvableType.getType() should reflect the set up type correctly - #18119 PayloadApplicationEvent can't hit cache  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/427767f21e7c6c2525501ae110ca483b2d52806f","closed","in: core,","spring-projects-issues","2015-10-05T12:49:45Z","2019-01-11T17:26:05Z"
"","18184","@JmsListener does not expose DefaultMessageListenerContainer [SPR-13606]","**[Peter Nightingale](https://jira.spring.io/secure/ViewProfile.jspa?name=peterdnight)** opened **[SPR-13606](https://jira.spring.io/browse/SPR-13606?redirect=false)** and commented  Given: DefaultJmsListenerContainerFactory.setConcurrency(""1-30"")  Is is extremely useful to graph/track actual consumption via: DefaultMessageListenerContainer.getActiveConsumerCount();  unfortunately - this does not seem to be exposed?  We currently export via JMX and graph 24/7/365 to track peak processing times, etc.  Adding to the pain - I am not sure why - but extending the factory also does not seem to do the trick eithe; log messages never appear:  ```java public class JmsMetricsContainerFactory extends DefaultJmsListenerContainerFactory {  	// want to control logs on this class not spring 	private Logger myLog = LoggerFactory.getLogger( JmsMetricsContainerFactory.class ); 	private DefaultMessageListenerContainer defaultContainer;  	protected DefaultMessageListenerContainer createContainerInstance() { 		myLog.error( ""Creating and exposing: "" + DefaultMessageListenerContainer.class.getCanonicalName() ); 		defaultContainer = new DefaultMessageListenerContainer(); 		return defaultContainer; 	} 	 	protected void initializeContainer(DefaultMessageListenerContainer container) { 		myLog.error( ""initializing: "" + DefaultMessageListenerContainer.class.getCanonicalName() ); 		super.initializeContainer( container ); 	}  	public DefaultMessageListenerContainer getDefaultContainer() { 		return defaultContainer; 	} } ```    ---  **Affects:** 4.2.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0039c74649c1dc0aa482373a53ef6cba2364a851","closed","status: invalid,","spring-projects-issues","2015-10-23T13:47:05Z","2019-01-12T05:23:32Z"
"","18654","@Primary has no effect when you autowire by name [SPR-14082]","**[Petar Tahchiev](https://jira.spring.io/secure/ViewProfile.jspa?name=ptahchiev)** opened **[SPR-14082](https://jira.spring.io/browse/SPR-14082?redirect=false)** and commented  Hello,  not really sure if this is bug, but here it is. If you declare 3 beans like this:  ```     @Bean(name = { ClassA.NAME, MyInterface.NAME })     public MyInterface myClassA() {         return new ClassA();     }      @Primary     @Bean(name = { ClassB.NAME, MyInterface.NAME })     public MyInterface myClassB() {         return new ClassB();     }      @Bean(name = { ClassC.NAME, MyInterface.NAME })     public MyInterface myClassC() {         return new ClassC();     }      @Bean     public MyServiceImpl defaultMyService() {         return new MyServiceImpl();     }      /* classes */      interface MyInterface {         String NAME = ""intf"";     }      class ClassA implements MyInterface {         public static final String NAME = ""clazA"";     }      class ClassB implements MyInterface {         public static final String NAME = ""clazB"";     }      class ClassC implements MyInterface {         public static final String NAME = ""clazC"";     } ```  You see `clazA`, `clazB`, `clazC` have alias `intf`. Then in `MyServiceImpl` I try the following:  ``` @Autowired @Qualifier(value = DemoApplication.MyInterface.NAME) private DemoApplication.MyInterface myInterface; ```  or  ``` @Resource(name = DemoApplication.MyInterface.NAME) private DemoApplication.MyInterface myInterface; ```  both will autowire `clazC` even though the `@Primary` annotation is on the `clazB`!!!! If I don't specify the name like this:  ``` @Autowired private DemoApplication.MyInterface myInterface; ```  or like this:  ``` @Resource private DemoApplication.MyInterface myInterface; ```  then it works fine and autowires `clazB`.  I can provide a test-project if needed.   --- No further details from [SPR-14082](https://jira.spring.io/browse/SPR-14082?redirect=false)","closed","status: declined,","spring-projects-issues","2016-03-23T11:37:08Z","2019-01-12T16:22:10Z"
"","18672","LocalValidatorFactoryBean should expose a hook for using a custom ValidationProviderResolver [SPR-14100]","**[Paweł Gesek](https://jira.spring.io/secure/ViewProfile.jspa?name=pgesek)** opened **[SPR-14100](https://jira.spring.io/browse/SPR-14100?redirect=false)** and commented  Although org.springframework.validation.beanvalidation.LocalValidatorFactoryBean allows injecting a custom provider class to use (providerClass property), it doesn't allow injecting a custom javax.validation.ValidationProviderResolver. Using a custom resolver can for example prevent the need for declaring validation providers in a META-INF/services/javax.validation.spi.ValidationProvider file on the classpath.  The ValidationProviderResolver can be passed to ProviderSpecificBootstrap/GenericBootstrap that's returned by Validation, by using the providerResolver() method before the configuration gets built (javax.validation bootstrapping is currently done in the beginning of the afterPropertiesSet() method of the LocalValidatorFactoryBean).  Allowing the injection of a custom ValidationProviderResolver to use in the javax.validation bootstrap process would allow more flexibility when using the LocalValidatorFactoryBean.   ---  **Affects:** 3.2.16  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/739ae8c045c2d3ecfe29ed93e246de72d9804705","closed","type: enhancement,","spring-projects-issues","2016-03-31T13:22:24Z","2016-04-06T08:38:11Z"
"","18382","Database procedure metadata is retrieved only once [SPR-13809]","**[Pavel Derendyaev](https://jira.spring.io/secure/ViewProfile.jspa?name=dddpaul)** opened **[SPR-13809](https://jira.spring.io/browse/SPR-13809?redirect=false)** and commented  Spring JDBC procedure/function metadata discovery may lead to unexpected failure when database network timeouts are set.  As far as I can understand, the ""metadata discovery"" is the ordinal SQL query performed inside org.springframework.jdbc.core.metadata.CallMetaDataProvider and corresponding JDBC driver. And it's executed only once per database procedure/function.  If this query is failed, for example, because of temporal database unavailability, corresponding procedure becomes unavailable until application restart. Even if database becomes available.  There are 2 requirements to reproduce this behaviour:  * Network timeouts must be set for datasource. For example, these connections properties set timeouts for Oracle driver: oracle.net.CONNECT_TIMEOUT=10000;oracle.jdbc.ReadTimeout=10000. * Procedure parameters for SimpleJdbcCall must be discovered implicitly (by Spring JDBC itself). It's default option.  The easiest way to reproduce - https://github.com/dddpaul/spring-boot-dbproc-metadata. This project is built on Spring Boot and requires running Oracle server on localhost (Docker is suggested). Database unavailability is simulated by Linux iptables rules modifications.   ---  **Affects:** 4.2.4","closed","status: bulk-closed,","spring-projects-issues","2015-12-21T10:51:09Z","2019-01-12T02:44:36Z"
"","18495","PathMatchingResourcePatternResolver should provide consistent logging [SPR-13923]","**[Paul](https://jira.spring.io/secure/ViewProfile.jspa?name=pmv)** opened **[SPR-13923](https://jira.spring.io/browse/SPR-13923?redirect=false)** and commented  If you provide a pattern such as ""classpath:com/some/company/**/*.xml"", and have the logger set to debug, you get nice output with the list of resources Spring finds: https://github.com/spring-projects/spring-framework/blob/v4.2.4.RELEASE/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java#L424  However, if you have a pattern such as ""classpath*:someResource.xml"", you get no output of what Spring found - you have to set a breakpoint.  Either a similar log statement should be added here: https://github.com/spring-projects/spring-framework/blob/v4.2.4.RELEASE/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java#L311  Or the logging should be moved to somewhere in the parent method that calls each of them: https://github.com/spring-projects/spring-framework/blob/v4.2.4.RELEASE/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java#L268  We have an issue where different servers are returning elements in different order.  Obviously our code needs to be fixed so order doesn't matter, however, the issue would have been easier to track down if the list of resolved artifacts would have been displayed with DEBUG or TRACE logging enabled.   ---  **Affects:** 4.2.4","closed","type: enhancement,","spring-projects-issues","2016-02-05T16:46:31Z","2016-02-25T09:36:35Z"
"","18593","Inconsistent interpretation of parameter annotations in interface-based handler methods [SPR-14021]","**[Paul](https://jira.spring.io/secure/ViewProfile.jspa?name=asm0dey)** opened **[SPR-14021](https://jira.spring.io/browse/SPR-14021?redirect=false)** and commented  If I have Spring MVC interface with methods, whose params are annotated with different param types like this:  ```java public interface PersonAPIEndpoint {   @RequestMapping(       path = ""/person/{username}/"",       method = RequestMethod.GET   )   DeferredResult loadUserByUsername(@PathVariable(""username"") String username);    @RequestMapping(       path = ""/person"",       method = RequestMethod.GET   )   DeferredResult> listPersons(@RequestParam(""pageNum"") int pageNum, @RequestParam(""pageSize"") int pageSize, @RequestParam(value = ""query"", required = false) String query); ```  and class, which is derived from this interface, but arguments of methods are not annotated with Param annotations mapper behaviour is inconsistent: values, annotated with `@RequestParam` get their values in implementing class, and with `@PathVariable` — not.  ---  **Issue Links:** - #15682 Enable REST controller method parameter annotations on an interface (_**""duplicates""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/bfbb943910f30d1c8dfdf1447197370fe7861ed2, https://github.com/spring-projects/spring-framework-issues/commit/de6f178a0edd9089f2a22b82571086df51c3c132","closed","in: web,","spring-projects-issues","2016-03-04T16:18:08Z","2019-01-12T16:45:44Z"
"","18481","Support arbitrary back-ends for brokers [SPR-13907]","**[Paul Pacheco](https://jira.spring.io/secure/ViewProfile.jspa?name=paulpach)** opened **[SPR-13907](https://jira.spring.io/browse/SPR-13907?redirect=false)** and commented  Currently there are 2 brokers: simplebroker and StompBrokerRelay  I would like to see a 3rd broker that deals with stuff like heart beat and acks and whatnot,  but that allows me to put in any transport from spring integration by relaying the broadcasting to channels that any spring integration component can interact with.  For example:  ```xml                                                       ```    --- No further details from [SPR-13907](https://jira.spring.io/browse/SPR-13907?redirect=false)","closed","type: enhancement,","spring-projects-issues","2016-01-29T18:13:07Z","2016-02-04T19:23:54Z"
"","18216","RestTemplate put/post with null body gives ProtocolException due to Content-Length [SPR-13639]","**[Paul Crockett](https://jira.spring.io/secure/ViewProfile.jspa?name=pcroc)** opened **[SPR-13639](https://jira.spring.io/browse/SPR-13639?redirect=false)** and commented  ```java restTemplate.put(""http://SomeService/update-status/{0}?status={1}"", null, id, status); ```  In this case I am calling a service to update a status field on an object, specified by an id in the URL path and the new status as a query string parameter. The Javadoc for RestOperations.put indicates that null is a valid, but when I do this an exception is thrown, shown below.  The same occurs if I use postForEntity instead of put. The doc for postForEntity also states that null is valid as the request body.  ```java org.springframework.web.client.ResourceAccessException: I/O error on PUT request for ""http://SomeService/update-status/56333d18e4b098563b66bda4?status=Deleted"":com.sun.jersey.api.client.ClientHandlerException: org.apache.http.client.ClientProtocolException; nested exception is java.io.IOException: com.sun.jersey.api.client.ClientHandlerException: org.apache.http.client.ClientProtocolException 	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:580) ~[spring-web-4.1.7.RELEASE.jar:4.1.7.RELEASE] 	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:530) ~[spring-web-4.1.7.RELEASE.jar:4.1.7.RELEASE] 	at org.springframework.web.client.RestTemplate.put(RestTemplate.java:382) ~[spring-web-4.1.7.RELEASE.jar:4.1.7.RELEASE] 	...etc... Caused by: java.io.IOException: com.sun.jersey.api.client.ClientHandlerException: org.apache.http.client.ClientProtocolException 	at org.springframework.cloud.netflix.ribbon.RibbonClientHttpRequestFactory$RibbonHttpRequest.executeInternal(RibbonClientHttpRequestFactory.java:125) ~[spring-cloud-netflix-core-1.0.3.RELEASE.jar:1.0.3.RELEASE] 	at org.springframework.http.client.AbstractClientHttpRequest.execute(AbstractClientHttpRequest.java:53) ~[spring-web-4.1.7.RELEASE.jar:4.1.7.RELEASE] 	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:569) ~[spring-web-4.1.7.RELEASE.jar:4.1.7.RELEASE] 	... 112 common frames omitted Caused by: com.sun.jersey.api.client.ClientHandlerException: org.apache.http.client.ClientProtocolException 	at com.sun.jersey.client.apache4.ApacheHttpClient4Handler.handle(ApacheHttpClient4Handler.java:184) ~[jersey-apache-client4-1.11.jar:1.11] 	at com.sun.jersey.api.client.Client.handle(Client.java:648) ~[jersey-client-1.11.jar:1.11] 	at com.sun.jersey.api.client.WebResource.handle(WebResource.java:670) ~[jersey-client-1.11.jar:1.11] 	at com.sun.jersey.api.client.WebResource.access$200(WebResource.java:74) ~[jersey-client-1.11.jar:1.11] 	at com.sun.jersey.api.client.WebResource$Builder.put(WebResource.java:533) ~[jersey-client-1.11.jar:1.11] 	at com.netflix.niws.client.http.RestClient.execute(RestClient.java:624) ~[ribbon-httpclient-2.0.2.jar:2.0.2] 	at com.netflix.niws.client.http.RestClient.execute(RestClient.java:527) ~[ribbon-httpclient-2.0.2.jar:2.0.2] 	at org.springframework.cloud.netflix.ribbon.RibbonClientHttpRequestFactory$RibbonHttpRequest.executeInternal(RibbonClientHttpRequestFactory.java:122) ~[spring-cloud-netflix-core-1.0.3.RELEASE.jar:1.0.3.RELEASE] 	... 114 common frames omitted Caused by: org.apache.http.client.ClientProtocolException: null 	at org.apache.http.impl.client.AbstractHttpClient.doExecute(AbstractHttpClient.java:867) ~[httpclient-4.3.4.jar:4.3.4] 	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:115) ~[httpclient-4.3.4.jar:4.3.4] 	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:57) ~[httpclient-4.3.4.jar:4.3.4] 	at com.sun.jersey.client.apache4.ApacheHttpClient4Handler.handle(ApacheHttpClient4Handler.java:170) ~[jersey-apache-client4-1.11.jar:1.11] 	... 121 common frames omitted Caused by: org.apache.http.ProtocolException: Content-Length header already present 	at org.apache.http.protocol.RequestContent.process(RequestContent.java:95) ~[httpcore-4.3.2.jar:4.3.2] 	at org.apache.http.protocol.ImmutableHttpProcessor.process(ImmutableHttpProcessor.java:131) ~[httpcore-4.3.2.jar:4.3.2] 	at org.apache.http.protocol.HttpRequestExecutor.preProcess(HttpRequestExecutor.java:165) ~[httpcore-4.3.2.jar:4.3.2] 	at org.apache.http.impl.client.DefaultRequestDirector.execute(DefaultRequestDirector.java:485) ~[httpclient-4.3.4.jar:4.3.4] 	at org.apache.http.impl.client.AbstractHttpClient.doExecute(AbstractHttpClient.java:863) ~[httpclient-4.3.4.jar:4.3.4] ```  The problem is easily worked around by passing an empty string instead of null, but as the doc explicitly states that null is permitted, then this seems like a bug.  Initial investigation suggests that HttpCore does not expect the Content-Length header to be already set, and HttpEntityRequestCallback.doWithRequest is setting it when the body is null, hence the exception.   ---  **Affects:** 4.1.7  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/347ba6a8a8f16d231ecabd66d256d409f9fe0ca7","closed","status: invalid,","spring-projects-issues","2015-11-04T11:57:37Z","2019-01-12T05:23:31Z"
"","18594","Upgrade BeanNameViewResolver to support XML and Java Config bean definitions [SPR-14022]","**[Paul Chapman](https://jira.spring.io/secure/ViewProfile.jspa?name=chapmanp)** opened **[SPR-14022](https://jira.spring.io/browse/SPR-14022?redirect=false)** and commented  Currently the `BeanNameViewResolver` supports finding beans by name from the _same_ `ApplicationContext` that it is defined in.  This can lead to lots of `View` beans in the context that only the `BeanNameViewResolver` needs to know about.  It also means that a given view name can only be resolved to a single View bean.  If I have a PDF generating bean _and_ an Excel generating bean I can't use this approach.  The `XmlViewResolver` solves this problem by allowing the View beans to be specified in a dedicated bean XML file, just for the View beans, reducing bean-clutter.  By having two such resolvers I _can_ have two view Beans with the same name.  But, as the name implies, this resolver only supports beans defined using XML.  I propose enhancing the `BeanNameViewResolver` to optionally support both beans defined in XML files and/or in dedicated Java Configurations.  This enhancement would make the `XmlViewResolver`  obsolete.  I anticipate something like this:  ```java @Configuration {      @Bean ViewResolver bnvr() {         return new BeanNameViewResolver(ExcelViewBeans.class, PdfViewBeans.class);     } } ```  I would expect `BeanNameViewResolver` to provide both constructors and `setLocation()` methods that take an array of Resource (for XML bean files) or an array of `@Configuration` classes.  The default behaviour of the `BeanNameViewResolver`  can remain the same to ensure backwards compatibility.  The `ViewResolverRegistry` should be enhanced similarly to provide `beanName(Resource ...)` and `beanName(Class...)`.  And the equivalent change to  ``.   ---  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/987","closed","type: enhancement,","spring-projects-issues","2016-03-05T05:29:04Z","2021-11-19T15:18:00Z"
"","18323","Formatting error in AOP documentation [SPR-13750]","**[Paul Chapman](https://jira.spring.io/secure/ViewProfile.jspa?name=chapmanp)** opened **[SPR-13750](https://jira.spring.io/browse/SPR-13750?redirect=false)** and commented  In http://docs.spring.io/spring/docs/current/spring-framework-reference/html/aop.html#aop-atconfigurable  Just after the `@Configuration`(""account"") example, the text reads ...  Spring will now look for a bean definition named "" account`"" and use that as the definition to configure new `Account instances.  All of this is highlighted as code but shouldn't be.   ---  **Affects:** 4.1.8, 4.2.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5ac42bf9f803ed5dbfc51bc04076053e06f62eb9, https://github.com/spring-projects/spring-framework/commit/3fec802b4616e23f7d4696b43b1b00bda1d348a2  **Backported to:** [4.1.9](https://github.com/spring-projects/spring-framework/milestone/133?closed=1)","closed","type: task,","spring-projects-issues","2015-12-01T23:20:21Z","2015-12-17T09:05:32Z"
"","18135","does not reliably find declared ContentNegotiationManager [SPR-13559]","**[Paul Chapman](https://jira.spring.io/secure/ViewProfile.jspa?name=chapmanp)** opened **[SPR-13559](https://jira.spring.io/browse/SPR-13559?redirect=false)** and commented  In the following, does the `ContentNegotiatingViewResolver` created by `` automatically get set with the `mvcContentNegotiationManager`?  My tests are telling me not.  ``` 	  	 	 		 		 		 		 	  	 		 		 	 ```  Running this as a servlet app does work, but my MockMvc test fails trying to generate JSON.  If I explicitly get the `ContentNegotiatingViewResolver` when the test starts and manually set the `ContentNegotiationManager` to `mvcContentNegotiationManager`, it works.  I would expect the CNVR created using `` to be initialised with the same `ContentNegotiationManager` that was specified to ``.    ---  **Affects:** 4.1.7, 4.2.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0f1897d3760a32cdee1b983a1bda6a1657f6b8ae, https://github.com/spring-projects/spring-framework/commit/c5995149b369a1e78573a4ed0da9e55f9870e5c9, https://github.com/spring-projects/spring-framework/commit/563a120280e4fa484f594f42ec268bab0094ed4a, https://github.com/spring-projects/spring-framework/commit/f84a0c914a06e79208d5306927ec35a0a3a6e5df  **Backported to:** [4.1.9](https://github.com/spring-projects/spring-framework/milestone/133?closed=1)","closed","type: bug,","spring-projects-issues","2015-10-09T15:31:55Z","2015-11-15T17:03:15Z"
"","18134","Backport corrected ContentNegotiationManager reference in MVC chapter [SPR-13558]","**[Paul Chapman](https://jira.spring.io/secure/ViewProfile.jspa?name=chapmanp)** opened **[SPR-13558](https://jira.spring.io/browse/SPR-13558?redirect=false)** and commented  In the MVC docs there is a sentence (section 21.16.6):  Note that `ContentNegotiatingViewResolver` now can also be configured with a `ContentNegotiatingViewResolver`, so you can use one instance throughout Spring MVC.  I think this should be ""configured with a `ContentNegotiationManager`"".  I don't have edit access to the docs on github or I would fix this myself.  ---  **Affects:** 3.2.14, 4.1.7  **Issue Links:** - #18010 Outdated ContentNegotiatingViewResolver example in section 21.5.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bb8a12ff7817c3973694ccbe1ec5659009e4dd1d, https://github.com/spring-projects/spring-framework/commit/16cb73673ed98ade4b5eb551df515b1969e25fc7  **Backported to:** [3.2.15](https://github.com/spring-projects/spring-framework/milestone/103?closed=1)","closed","type: task,","spring-projects-issues","2015-10-09T15:24:41Z","2019-01-11T17:25:48Z"
"","17920","Reactive types support for @Cacheable methods [SPR-14235]","**[Pablo Díaz-López](https://jira.spring.io/secure/ViewProfile.jspa?name=padilo)** opened **[SPR-14235](https://jira.spring.io/browse/SPR-14235?redirect=false)** and commented  Currently when using cache annotations on beans it caches the Observables like other types, So it will not cache its value.  I tried to use the following pattern to handle it:  ```java @Cacheable(""items"") public Observable getItem(Long id) {     return Observable.just(id)         .map(myrepo::getById)         .cache(); } ```  In the happy path, as we cache the `Observable` values works pretty well, but if `getById` throws an exception the observable is cached with the exception which isn't how it should work.  It would be also very nice to have support to `Single`.  If you give me some advice I can try to do a PR to solve this.  ---  **Affects:** 4.2.5  **Sub-tasks:** - #22152 a  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1066  1 votes, 8 watchers","open","type: enhancement,","spring-projects-issues","2016-04-29T16:35:53Z","2022-06-28T16:10:54Z"
"","18359","LTW: Class loaded before load time weaving is initialized [SPR-13786]","**[Ovidio Mallo](https://jira.spring.io/secure/ViewProfile.jspa?name=omallo)** opened **[SPR-13786](https://jira.spring.io/browse/SPR-13786?redirect=false)** and commented  While trying to use Spring's `@Configurable` annotation along with load time weaving, I noticed that the weaving worked on some classes but not on others. After some investigation, it turned out that some classes were already loaded before the LTW was initialized. Unfortunately, the class loading seems to be triggered by Spring itself.  Attached, you can find a simple Maven project which reproduces the problem. You can execute the main application in the project from the command line as follows: `mvn clean install -Prun-my-app`  This is equivalent to starting the main application as follows: `java -javaagent:/spring-instrument.jar ltwtest.MyApp`  If you execute the Maven command, the main application will fail since the `MyModel` instance was not autowired even though it is annotated with `@Configurable`.  The reason why the LTW does not work is that the `MyModel` class was loaded before the LTW was initialized. In the sample project, this happens while Spring is scanning the `MyBean` bean class which contains a method which references the `MyModel` class. The problem occurs while initializing the Spring context within the method `AutowiredAnnotationBeanPostProcessor#determineCandidateConstructors()` where the methods of the `MyBean` class are resolved which results in the `MyModel` class being loaded. In fact, if you remove the dummy method `MyBean#doNothing()`, the weaving works correctly.  Unfortunately, this makes Spring's LTW unusable for my purposes since it seems a bit random when the weaving will work and when not based on the order of class loading. The only alternative seems to be using the AspectJ weaver as a Java agent which would guarantee that all classes are weaved correctly.  Is the above problem a fundamental limitation of Spring's LTW or might I be doing something wrong?   ---  **Affects:** 4.2.3  **Attachments:** - [ltwtest.zip](https://jira.spring.io/secure/attachment/23242/ltwtest.zip) (_2.71 kB_)","closed","status: bulk-closed,","spring-projects-issues","2015-12-13T11:18:41Z","2019-01-12T02:44:39Z"
"","18437","Jackson 2.7.0 not compatible with Spring [SPR-13864]","**[Osvaldo  Pinali Doederlein](https://jira.spring.io/secure/ViewProfile.jspa?name=opinali)** opened **[SPR-13864](https://jira.spring.io/browse/SPR-13864?redirect=false)** and commented  Caused by: java.lang.NoSuchMethodError: com.fasterxml.jackson.databind.type.TypeFactory.constructType(Ljava/lang/reflect/Type;Ljava/lang/Class;)Lcom/fasterxml/jackson/databind/JavaType; at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.getJavaType(AbstractJackson2HttpMessageConverter.java:314)  This overload of constructType() doesn't exist anymore in Jackson 2.7.0.  ---  **Affects:** 4.2.3  **Issue Links:** - #18426 Improve Jackson 2.7 compatibility (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2016-01-12T20:14:44Z","2019-01-12T16:45:51Z"
"","18046","HttpMessageConverter#write should support typed collections [SPR-13467]","**[Olivier Sambourg](https://jira.spring.io/secure/ViewProfile.jspa?name=the%20librarian)** opened **[SPR-13467](https://jira.spring.io/browse/SPR-13467?redirect=false)** and commented  I'm trying to implement a CsvHttpMessageConverter using jackson-dataformat-csv, for writing only. The problem is that I need to output the CSV headers (even when there is no data) so I need to build a CsvSchema, but I don't have access to the type of objects in the collection.  #13028 solved this for read(), same thing for write() would be just perfect (if possible).  ---  **Affects:** 4.0.9  **Issue Links:** - #13028 HttpMessageConverter doesn't support typed collections","closed","status: bulk-closed,","spring-projects-issues","2015-09-15T15:32:17Z","2019-01-12T00:15:40Z"
"","18099","@Autowire fails when using load-time weaving and lambdas [SPR-13522]","**[Oliver Henlich](https://jira.spring.io/secure/ViewProfile.jspa?name=oliver.henlich)** opened **[SPR-13522](https://jira.spring.io/browse/SPR-13522?redirect=false)** and commented  Hi,  We seemed to have stumbled on a problem whereby simply the _presence_ of a lambda in our code causes `@Autowired` dependencies not to be injected.  Attached is a minimal example project to reproduce the problem. It contains one junit test called AutowireProblemTest. On downloading and running the test (using gradle) it should pass. If one then goes to the test class and un-comments the createWithLambda() method (no need to invoke it anywhere) and re-runs the tests, they fail.  Cheers Oliver   ---  **Affects:** 4.2.1  **Attachments:** - [autowire-problem.zip](https://jira.spring.io/secure/attachment/23133/autowire-problem.zip) (_90.99 kB_)  3 votes, 9 watchers","closed","status: bulk-closed,","spring-projects-issues","2015-09-28T23:57:10Z","2019-01-12T00:15:31Z"
"","18753","Regression: Handler method detection reporting ambiguous methods for explicit HEAD mapping [SPR-14182]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-14182](https://jira.spring.io/browse/SPR-14182?redirect=false)** and commented  Let's start with the reproducing sample first.  ``` $ git clone https://github.com/spring-projects/spring-data-examples $ cd spring-data-examples/rest/starbucks $ mvn spring-boot:run  $ curl -v -X HEAD http://localhost:8080/api/stores > HEAD /api/stores HTTP/1.1 > Host: localhost:8080 > User-Agent: curl/7.43.0 > Accept: */* >  < HTTP/1.1 500 Internal Server Error < Server: Apache-Coyote/1.1 < Content-Type: application/json;charset=UTF-8 < Transfer-Encoding: chunked < Date: Sat, 16 Apr 2016 12:37:59 GMT < Connection: close ```  The server produces the following exception:  ``` java.lang.IllegalStateException: Ambiguous handler methods mapped for HTTP path 'http://localhost:8080/api/stores': {public org.springframework.http.ResponseEntity org.springframework.data.rest.webmvc.RepositoryEntityController.headCollectionResource(org.springframework.data.rest.webmvc.RootResourceInformation,org.springframework.data.rest.webmvc.support.DefaultedPageable) throws org.springframework.web.HttpRequestMethodNotSupportedException, public org.springframework.hateoas.Resources org.springframework.data.rest.webmvc.RepositoryEntityController.getCollectionResource(org.springframework.data.rest.webmvc.RootResourceInformation,org.springframework.data.rest.webmvc.support.DefaultedPageable,org.springframework.data.domain.Sort,org.springframework.data.rest.webmvc.PersistentEntityResourceAssembler) throws org.springframework.data.rest.webmvc.ResourceNotFoundException,org.springframework.web.HttpRequestMethodNotSupportedException} 	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.lookupHandlerMethod(AbstractHandlerMethodMapping.java:361) ~[spring-webmvc-4.3.0.RC1.jar:4.3.0.RC1] 	at org.springframework.data.rest.webmvc.BasePathAwareHandlerMapping.lookupHandlerMethod(BasePathAwareHandlerMapping.java:110) ~[spring-data-rest-webmvc-2.5.1.RELEASE.jar:na] 	at org.springframework.data.rest.webmvc.RepositoryRestHandlerMapping.lookupHandlerMethod(RepositoryRestHandlerMapping.java:91) ~[spring-data-rest-webmvc-2.5.1.RELEASE.jar:na]         … ```  I was caught by surprise to see that as the two methods mentioned — [`RepositoryEntityController.headCollectionResource(…)`](https://github.com/spring-projects/spring-data-rest/blob/2.5.1.RELEASE/spring-data-rest-webmvc/src/main/java/org/springframework/data/rest/webmvc/RepositoryEntityController.java#L160) and [`RepositoryEntityController. getCollectionResource(…)`](https://github.com/spring-projects/spring-data-rest/blob/2.5.1.RELEASE/spring-data-rest-webmvc/src/main/java/org/springframework/data/rest/webmvc/RepositoryEntityController.java#L193) are considered ambiguous as they actually declare request mappings for different HTTP methods. `getCollectionResource` clearly maps to `GET`, not `HEAD`.  On Spring 4.2 this works as expected as you can see by downgrading the example to Spring Boot 1.4.0.M1 (by tweaking the version number of the Boot parent in the root project's POM).  ---  **Affects:** 4.3 RC1  **Attachments:** - [Bildschirmfoto 2016-04-16 um 14.35.55.PNG](https://jira.spring.io/secure/attachment/23374/Bildschirmfoto+2016-04-16+um+14.35.55.PNG) (_182.76 kB_)  **Issue Links:** - #17721 Spring should have default support for OPTIONS, HEAD and Allow - #22125 Regression: IllegalStateException: Ambiguous handler methods is thrown for explicit HEAD mapping  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1cb9f2c7b2a25daae014349ba3df7823b3584171, https://github.com/spring-projects/spring-framework/commit/7cdcc102a9bf36245b5af95acfa3c62d3777b16d","closed","type: bug,","spring-projects-issues","2016-04-16T13:22:54Z","2019-01-11T16:34:37Z"
"","18558","Improve target bean type detection for FactoryBeans [SPR-13986]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-13986](https://jira.spring.io/browse/SPR-13986?redirect=false)** and commented  There are a couple of `FactoryBean` implementations that produce proxy instances and the the type of the proxy to be created configured. Examples of that are the `FactoryBean` implementations for remoting proxies, the `JndiObjectFactoryBean` and `RepositoryFactoryBeanSupport` in Spring Data.  Factories that are build that way cannot be detected by target type until they're initialized which can be a problem if the `BeanDefinition` instances for them are supposed to be found e.g. in a `BeanFactoryPostProcessor`.  Spring Data currently deploys a `InstantiationAwareBeanPostProcessor` to predict the bean type based on the `BeanDefinition` setup, interpreting a certain property value as the type which that bean definition will eventually end up in. However, the lookup issue also pops up in the context of collecting `BeanDefinition` instances for `EntityManager` (in the course of some code to allow constructor injection of them) in case the `EntityManager` is provided by a `JndiObjectFactoryBean`.  While I can of course extract the relevant code in Spring Data and also provide a prediction mechanism for the `JndiObjectFactoryBean` it doesn't feel very natural to place that setup in Spring Data itself as it shouldn't really care about JNDI.  So it would be cool if there was a general prediction mechanism deployed that uses an annotation on one of the `FactoryBean`'s setters to identify the property as target type property and use that predicted type.  ---  **Issue Links:** - #16105 getBeanNamesForType should consider FactoryBean generics for early introspection of config classes as well - [DATAJPA-813](https://jira.spring.io/browse/DATAJPA-813) Error creating DefaultJpaContext bean in test cases","open","type: enhancement,","spring-projects-issues","2016-02-26T12:09:24Z","2019-01-11T19:02:49Z"
"","18556","Redistribute AOP Alliance interfaces in spring-aop again (as in Spring 2.x) [SPR-13984]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-13984](https://jira.spring.io/browse/SPR-13984?redirect=false)** and commented  The AOP alliance JAR is a very fundamental dependency of the Spring AOP module. This causes two-fold challenges:  1. The JAR is not really well maintained as it's basically done (in the most positive sense of the word) and hasn't seen a release in almost 10 years. As that also means, the previous maintainers aren't available in case of problems with it, it would be great to gain more control over its source and distribution. 2. The JAR is currently provided under a Public Domain license, which is a bit of a [problematic license depending on the jurisdiction applied](https://opensource.org/faq#public-domain). Redistributing the code under Apache 2 License would guard downstream consumers from potentially upcoming copyright disputes.    --- No further details from [SPR-13984](https://jira.spring.io/browse/SPR-13984?redirect=false)","closed","in: core,","spring-projects-issues","2016-02-26T09:48:43Z","2016-04-06T08:38:14Z"
"","18472","Allow manually registered bean definitions to specify a generic type to participate in generics qualifier resolution [SPR-13898]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-13898](https://jira.spring.io/browse/SPR-13898?redirect=false)** and commented  Currently the qualifier resolution inspecting generics is restricted to either the bean type or the return type of a factory methods (as implemented in `GenericTypeAwareAutowireCandidateResolver.checkGenericTypeMatch(…)`). However, if you want to register bean definitions for generic types manually (to back an `@Enable…` annotation for example) there's no way to pass the generics information to the container to prevent ambiguities from happening.  Take this scenario for example. declaring a `PluginRegistry` of the Spring Plugin library in Java configuration looks like this.  ```java @Configuration class Config {    @Bean   public PluginRegistry myPluginRegistry(List plugins) {     return OrderAwarePluginRegistry.create(plugins);   } } ```  With a bean definition like this the container considers the generics information returned at the method return type and can disambiguate the registry returned from a `PluginRegistry` defined in the same way.  However, the library also provides a shortcut for this configuration to easily configure multiple registries:  ```java @Configuration @EnablePluginRegistries({MyPlugin.class, MyOtherPlugin.class}) class Config {} ```  The annotation implementation is backed by a `PluginRegistriesBeanDefinitionRegistrar` that registers `BeanDefinition` instances for each of the plugin types listed. However, it's currently impossible to forward the generics information which is totally available at this point to the container. It would be great if there was a way to predict a `ResolvableType` instead of a raw `Class` by some means on the `BeanDefinition`. Looks like a new method `RootBeanDefinition.getResolvableType()` could expose either a manually defined one or the one derived from the factory method's return type and thus simplify the check in `getReturnTypeForFactoryMethod(…)` to the assignability to the `DependencyDescriptor`.  ---  **Issue Links:** - #19149 Allow programmatic registration of bean definitions with a ResolvableType (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2016-01-28T08:58:02Z","2019-01-11T18:26:17Z"
"","18415","Validate @RequestMapping methods on AOP proxies [SPR-13842]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-13842](https://jira.spring.io/browse/SPR-13842?redirect=false)** and commented  Currently it's possible to have a non-public method on a proxied Spring MVC controller annotated with `@RequestMapping`. That will cause the method being routed into the proxy shell which doesn't have any dependencies set.  We should more actively make users aware of this (broken) situation, maybe even reject the method declaration as such.  ---  **Affects:** 4.2.4  **Issue Links:** - #18389 Consistent validation of annotated methods behind AOP proxies  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9761af9ad8bf67a78937800128ddf3f244bab9a6","closed","type: enhancement,","spring-projects-issues","2016-01-05T16:42:37Z","2019-01-11T18:31:12Z"
"","18381","Container tries to autowire dependencies despite explicit arguments given [SPR-13808]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-13808](https://jira.spring.io/browse/SPR-13808?redirect=false)** and commented  The recent introduction of support for implicit autowired constructor selection seems to break the instantiation of bean definitions that have constructor arguments configured explicitly. An easy way to reproduce this is the following:  1. Create a starter project with JPA and H2 dependencies. 2. Change the Spring version to be used to 4.3.0.BUILD-SNAPSHOT 3. Add `@EntityScan` to the configuration 4. Run the app.  You end up with:  ``` org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'entityScanBeanPostProcessor': Unsatisfied dependency expressed through constructor argument with index 0 of type [java.lang.String[]]: : No qualifying bean of type [java.lang.String] found for dependency [array of java.lang.String]: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {}; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [java.lang.String] found for dependency [array of java.lang.String]: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {} 	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:749) ~[spring-beans-4.3.0.BUILD-SNAPSHOT.jar:4.3.0.BUILD-SNAPSHOT] 	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:185) ~[spring-beans-4.3.0.BUILD-SNAPSHOT.jar:4.3.0.BUILD-SNAPSHOT] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143) ~[spring-beans-4.3.0.BUILD-SNAPSHOT.jar:4.3.0.BUILD-SNAPSHOT] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046) ~[spring-beans-4.3.0.BUILD-SNAPSHOT.jar:4.3.0.BUILD-SNAPSHOT] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510) ~[spring-beans-4.3.0.BUILD-SNAPSHOT.jar:4.3.0.BUILD-SNAPSHOT] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) ~[spring-beans-4.3.0.BUILD-SNAPSHOT.jar:4.3.0.BUILD-SNAPSHOT] 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) ~[spring-beans-4.3.0.BUILD-SNAPSHOT.jar:4.3.0.BUILD-SNAPSHOT] 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.3.0.BUILD-SNAPSHOT.jar:4.3.0.BUILD-SNAPSHOT] 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) ~[spring-beans-4.3.0.BUILD-SNAPSHOT.jar:4.3.0.BUILD-SNAPSHOT] 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-4.3.0.BUILD-SNAPSHOT.jar:4.3.0.BUILD-SNAPSHOT] 	at org.springframework.context.support.PostProcessorRegistrationDelegate.registerBeanPostProcessors(PostProcessorRegistrationDelegate.java:228) ~[spring-context-4.3.0.BUILD-SNAPSHOT.jar:4.3.0.BUILD-SNAPSHOT] 	at org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:687) ~[spring-context-4.3.0.BUILD-SNAPSHOT.jar:4.3.0.BUILD-SNAPSHOT] 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:523) ~[spring-context-4.3.0.BUILD-SNAPSHOT.jar:4.3.0.BUILD-SNAPSHOT] 	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:764) [spring-boot-1.3.1.RELEASE.jar:1.3.1.RELEASE] 	at org.springframework.boot.SpringApplication.doRun(SpringApplication.java:357) [spring-boot-1.3.1.RELEASE.jar:1.3.1.RELEASE] 	at org.springframework.boot.SpringApplication.run(SpringApplication.java:305) [spring-boot-1.3.1.RELEASE.jar:1.3.1.RELEASE] 	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1124) [spring-boot-1.3.1.RELEASE.jar:1.3.1.RELEASE] 	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1113) [spring-boot-1.3.1.RELEASE.jar:1.3.1.RELEASE] 	at com.example.JpaEmfApplication.main(JpaEmfApplication.java:24) [classes/:na] Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [java.lang.String] found for dependency [array of java.lang.String]: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {} 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoSuchBeanDefinitionException(DefaultListableBeanFactory.java:1373) ~[spring-beans-4.3.0.BUILD-SNAPSHOT.jar:4.3.0.BUILD-SNAPSHOT] 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1044) ~[spring-beans-4.3.0.BUILD-SNAPSHOT.jar:4.3.0.BUILD-SNAPSHOT] 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014) ~[spring-beans-4.3.0.BUILD-SNAPSHOT.jar:4.3.0.BUILD-SNAPSHOT] 	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:813) ~[spring-beans-4.3.0.BUILD-SNAPSHOT.jar:4.3.0.BUILD-SNAPSHOT] 	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:741) ~[spring-beans-4.3.0.BUILD-SNAPSHOT.jar:4.3.0.BUILD-SNAPSHOT] 	... 18 common frames omitted ```  The bean definition for the `EntityScanBeanPostProcessor` comes from `EntityScanRegistrar.addEntityScanBeanPostProcessor(…)` where you can see an explicit constructor argument being declared.  ---  **Affects:** 4.3 RC1  **Attachments:** - [jpa-emf.zip](https://jira.spring.io/secure/attachment/23251/jpa-emf.zip) (_53.21 kB_)  **Issue Links:** - #16883 Make `@Autowired` optional on a single constructor of a class decorated with `@Component`  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cad2ce0ac23d176c635e8a236635999dd632862c","closed","in: core,","spring-projects-issues","2015-12-20T12:40:54Z","2019-01-13T05:32:30Z"
"","18374","Provide an easy way to populate a request in MockMvc for form input scenarios [SPR-13801]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-13801](https://jira.spring.io/browse/SPR-13801?redirect=false)** and commented  It would be cool to simulate a form submission on the MockMvc API by providing a `MultiValueMap` instead of having to call `param(key, value)` as it would ease preparing a form submission at a different place in the codebase without having to interact with MockMvc but rather just setting up a map of String values in the first place.   ---  **Affects:** 4.2.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c8aa48faa9a4a3aae642d02850ee0bf6b5d4071c","closed","type: enhancement,","spring-projects-issues","2015-12-16T16:30:57Z","2015-12-17T09:33:55Z"
"","18278","Cache detected factory methods in ObjectToObjectConverter [SPR-13703]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-13703](https://jira.spring.io/browse/SPR-13703?redirect=false)** and commented  `ObjectToObjectConverter` currently rediscovers the methods to use on every conversion which can cause quite some performance implication if it's used heavily.  We've got [DATAMONGO-1324](https://jira.spring.io/browse/DATAMONGO-1324) filed observing that behavior. Although the performance decrease is caused by a more explicit converter accidentally not being registered out of the box, I wonder whether caching the detected methods could improve performance for the scenarios `ObjectToObjectConverter` is used on purpose.   ---  **Affects:** 4.2.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3234d9ede3da6c87a354000f2fd73ec7019930c2, https://github.com/spring-projects/spring-framework/commit/44651fdf7ccbaf7afd362c88c48cb2d812f834e7","closed","type: enhancement,","spring-projects-issues","2015-11-19T10:53:38Z","2015-12-17T09:33:55Z"
"","18273","ResolvableType should support resolving lambda types [SPR-13698]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-13698](https://jira.spring.io/browse/SPR-13698?redirect=false)** and commented  This test case currently fails:  ```java Function toString = value -> value.toString();  ResolvableType type = ResolvableType.forClass(Function.class, toString.getClass());  assertThat(type.getGeneric(0).getRawClass(), is(typeCompatibleWith(Long.class))); assertThat(type.getGeneric(1).getRawClass(), is(typeCompatibleWith(String.class))); ```  [This helper library](https://github.com/jhalterman/typetools/blob/master/src/main/java/net/jodah/typetools/TypeResolver.java) (itself inspired by Spring's GenericTypeResolver) seems to use an additional code path to use API introduced in Java 8 to resolve lambdas in a special way.  ---  **Issue Links:** - #17130 GenericTypeResolver should be able to introspect generic arguments from lambdas (_**""is duplicated by""**_) - #19398 Add a functional way to register a bean","closed","status: bulk-closed,","spring-projects-issues","2015-11-17T19:25:47Z","2019-01-12T02:44:53Z"
"","18035","Regression: UrlPathHelper.getLookupPathForRequest(…) returns different results for URIs containing matrix parameters [SPR-13455]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-13455](https://jira.spring.io/browse/SPR-13455?redirect=false)** and commented  On Spring 4.1.7, calling `UrlPathHelper.getLookupPathForRequest(…)` on `/books/;test/1` returns `/books/1`, i.e. it eliminates double slashes that result from the removal of the matrix parameter.  Spring 4.2.1 returns `/books//1` for the same operation, which might cause issues for downstream code not expecting the double slashes.  A brief debugging session unveiled `getPathWithinServletMapping(…)` to not clean up the path correctly anymore. 4.2 has introduced new code (for sanitization), which results in the the `servletPath` not being returned anymore. The newly introduced code calls `getRemainingPath(…)` which results in an empty string, which lets `getLookupPathForRequest(…)` fall back to `getPathWithinApplication(…)` which it didn't have to before.   ---  **Affects:** 4.2.1  **Issue Links:** - [DATAREST-674](https://jira.spring.io/browse/DATAREST-674) Guard against regression in UrlPathHelper in Spring 4.2  **Referenced from:** commits https://github.com/spring-projects/spring-data-rest/commit/76380eb65087146c8e297bf03a50653c1669fd33, https://github.com/spring-projects/spring-data-rest/commit/465bcdc689c5fc66677e3143a41fc55641e11520, https://github.com/spring-projects/spring-data-rest/commit/619511d8fed8d27740761d7db828d902df10b508  0 votes, 7 watchers","closed","type: bug,","spring-projects-issues","2015-09-09T18:01:30Z","2019-01-11T17:23:35Z"
"","18774","DefaultMessageListenerContainer doesn't shutdown gracefully if long recovery interval is set [SPR-14200]","**[Oleg Ivanov](https://jira.spring.io/secure/ViewProfile.jspa?name=advanced)** opened **[SPR-14200](https://jira.spring.io/browse/SPR-14200?redirect=false)** and commented  Currently in **DefaultMessageListenerContainer.applyBackOffTime(BackOffExecution execution)** function the current thread is sleeping during the back off interval. This prevents container to shutdown correctly (as it waits for this thread to wake up).  I suggest to rewrite this function using .wait() calls:  ```java         final long interval = execution.nextBackOff();         if (interval == BackOffExecution.STOP)             return false;          if (isRecovering() && interrupted)             // Interrupted right before and still failing... give up.             return false;          try {             synchronized (this.lifecycleMonitor) {                 final long start = System.currentTimeMillis();                 while (isActive() && System.currentTimeMillis() - start < interval) {                     final long timeout = getReceiveTimeout();                     this.lifecycleMonitor.wait(timeout > 0 ? timeout : DEFAULT_RECEIVE_TIMEOUT);                 }             }         } catch (InterruptedException interEx) {             // Re-interrupt current thread, to allow other threads to react.             Thread.currentThread().interrupt();             if (isRecovering())                 this.interrupted = true;         }          return true; ```  ---  **Affects:** 4.2.5  **Issue Links:** - #16409 DefaultMessageListenerContainer hangs on shutdown - #16460 DefaultMessageListenerContainer#doShutdown hangs - #18799 Client-side polling delay as alternative for receive timeout for JMS  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6ab8d36ed074e230daaeeec254f064e000b614ba","closed","type: enhancement,","spring-projects-issues","2016-04-21T15:01:16Z","2019-01-11T17:08:53Z"
"","18678","Spring cache does not notify EJB's using SpringBeanAutowiringInterceptor [SPR-14106]","**[ofbiz](https://jira.spring.io/secure/ViewProfile.jspa?name=ofbizbrazil)** opened **[SPR-14106](https://jira.spring.io/browse/SPR-14106?redirect=false)** and commented  If an EJB (singleton) component access a Spring service using the interceptor SpringBeanAutowiringInterceptor, and `@CacheEvict` is used on that service method, we will have that `@Cacheable` method recreates the cache.  Sadly, this behavior does not work more for EJB components which shares the Spring context. I mean EJB can not get the updated value from Spring cache, but inside the service methods it works fine (WebPages).  By the way, it used to work in earlier versions, the application server in question is JBoss 7.1.1  beanRefContext.xml  ```java                                                xx.config.TestConfig                             ```  ```java @Singleton @Remote @Interceptors(SpringBeanAutowiringInterceptor.class) @ConcurrencyManagement(ConcurrencyManagementType.BEAN) @Transactional(readOnly = true) public class TestBean  { } ```    ---  **Affects:** 4.2.5","closed","status: bulk-closed,","spring-projects-issues","2016-04-01T18:07:42Z","2019-01-12T00:14:35Z"
"","18830","AsyncRestTemplate doesn't call the failure handler in case of bad redirect [SPR-14258]","**[Nitsan Seniak](https://jira.spring.io/secure/ViewProfile.jspa?name=nseniak)** opened **[SPR-14258](https://jira.spring.io/browse/SPR-14258?redirect=false)** and commented  With an AsyncRestTemplate constructed with  ``` new AsyncRestTemplate(new HttpComponentsAsyncClientHttpRequestFactory()) ```  it seems that the failure callback is not called when redirections lead to a bad URL.  Here's a piece of code to reproduce the problem. It uses the URL http://nycwisdom.com which redirects to http:///www.nycwisdom.com (notice the wrong URL syntax).  ``` AsyncRestTemplate t = new AsyncRestTemplate(new HttpComponentsAsyncClientHttpRequestFactory()); ListenableFuture> f = t.getForEntity(""http://nycwisdom.com"", Void.class); f.addCallback(new ListenableFutureCallback>() {      @Override      public void onFailure(Throwable ex) { System.out.println(""Failure!""); }      @Override      public void onSuccess(ResponseEntity result) { System.out.println(""Success!""); } }); System.out.println(""Result: "" + f.get().getStatusCode()); ```  The failure callback is never called and f.get() never exits.  However if you replace the first line with  ``` t = new AsyncRestTemplate() ```  it does work as expected.   ---  **Affects:** 4.2.3","closed","status: declined,","spring-projects-issues","2016-05-07T09:57:38Z","2019-01-12T16:34:21Z"
"","18492","ReflectiveMethodResolver chooses parent class over child for static methods [SPR-13918]","**[Nikolay Martynov](https://jira.spring.io/secure/ViewProfile.jspa?name=nickolay.martinov)** opened **[SPR-13918](https://jira.spring.io/browse/SPR-13918?redirect=false)** and commented  Consider the following config:  ```java        ```  ReflectiveMethodResolver first considers all methods from class Class then all methods from class Charset. Method ""forName"" from class Class is inserted into LinkedHashSet before the same method from class Charset.  Then ReflectiveMethodExecutor scans collection of methods from the beginning to end, finds matching method from class Class and calls it resulting in obvious error: classloader is requested to find a class with the name of the charset.  Instead ReflectiveMethodResolver should first consider methods from the class of the object before resorting to methods of class Class.  ```java Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanExpressionException: Expression parsing failed; nested exception is org.springframework.expression.ExpressionInvocationTargetException: A problem occurred when trying to execute method 'forName' on object of type [java.lang.Class] 	at java.net.URLClassLoader.findClass(URLClassLoader.java:381) 	at java.lang.ClassLoader.loadClass(ClassLoader.java:424) 	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331) 	at java.lang.ClassLoader.loadClass(ClassLoader.java:357) 	at java.lang.Class.forName0(Native Method) 	at java.lang.Class.forName(Class.java:264) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:497) 	at org.springframework.expression.spel.support.ReflectiveMethodExecutor.execute(ReflectiveMethodExecutor.java:113) 	at org.springframework.expression.spel.ast.MethodReference.getValueInternal(MethodReference.java:129) 	at org.springframework.expression.spel.ast.MethodReference.access$000(MethodReference.java:49) 	at org.springframework.expression.spel.ast.MethodReference$MethodValueRef.getValue(MethodReference.java:342) 	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:88) 	at org.springframework.expression.spel.ast.Ternary.getValueInternal(Ternary.java:56) 	at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:120) 	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:242) 	at org.springframework.context.expression.StandardBeanExpressionResolver.evaluate(StandardBeanExpressionResolver.java:161) 	at org.springframework.beans.factory.support.AbstractBeanFactory.evaluateBeanDefinitionString(AbstractBeanFactory.java:1412) 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.doEvaluate(BeanDefinitionValueResolver.java:255) 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.evaluate(BeanDefinitionValueResolver.java:214) 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:186) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1481) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1226) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:305) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:301) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:196) 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351) 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1481) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1226) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:305) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:301) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:196) 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351) 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1481) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1226) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:305) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:301) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:196) 	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1048) ```  ---  **Affects:** 3.2.16, 4.2.2  **Issue Links:** - #17107 SpEL: problem with static methods conflicting with instance methods  **Backported to:** [3.2.17](https://github.com/spring-projects/spring-framework/milestone/105?closed=1)","closed","in: core,","spring-projects-issues","2016-02-05T13:46:42Z","2019-01-11T19:07:31Z"
"","18704","Provide Converter for ConfigurationProperties  [SPR-14132]","**[Niklas Herder](https://jira.spring.io/secure/ViewProfile.jspa?name=herder)** opened **[SPR-14132](https://jira.spring.io/browse/SPR-14132?redirect=false)** and commented  As far as I can see it's currently not possible to use URI:s and URL:s in `@ConfigurationProperties` classes, since there seems to be no Converter for them.  Would it be possible to add them to the default Converters?   ---  **Affects:** 4.3 RC1","closed","in: core,","spring-projects-issues","2016-04-07T12:16:48Z","2019-01-11T16:39:29Z"
"","18548","[Spring AOP] Advice was called multiple times in case of import resources [SPR-13976]","**[Nikita A.](https://jira.spring.io/secure/ViewProfile.jspa?name=marniks7)** opened **[SPR-13976](https://jira.spring.io/browse/SPR-13976?redirect=false)** and commented  Hi, i have found out the problem. Seems, like an issue.  In case of import resource with advice (_spring-config.xml_), then import another resource (_spring-config2.xml_). For _spring-config2.xml_ also import resource with advice (_spring-config.xml_) i can log, that my advice (_DoAsSystemAdvice_) was invoked two times from _org.springframework.aop.framework.ReflectiveMethodInvocation.proceed._  For such configuration 2 bean advices for one _DoAsSystemAdvice_ in the spring were created. As i understand, one interceptor is base (_ExposeInvocationInterceptor_), one of them is my Interceptor (for _DoAsSystemAdvice_), and another one is copy of my Interceptor (for _DoAsSystemAdvice_ as another object)  **There is my context configuration:** **spring-config3.xml:**  > \ >  >> \  **spring-config2.xml**  > \  **spring-config.xml**  >  >  pointcut=""execution(* com.product..*.*(..)) and `@annotation`(com.product.DoAsSystem)""/>   \  \  **Invocation:**  > ApplicationContext context = new ClassPathXmlApplicationContext(""spring-config3.xml""); > CatalogSearchService helloService = (CatalogSearchService) context.getBean(""catalogSearchService""); > helloService.getById(BigInteger.TEN);  **StackTrace:** in attach  **SampleCode:** in attach  ---  **Affects:** 3.2.16, 4.2.4  **Attachments:** - [IssueTest.zip](https://jira.spring.io/secure/attachment/23317/IssueTest.zip) (_27.77 kB_) - [StackTrace.txt](https://jira.spring.io/secure/attachment/23318/StackTrace.txt) (_2.95 kB_)","closed","in: core,","spring-projects-issues","2016-02-23T23:23:14Z","2019-01-13T05:28:04Z"
"","18205","UriTemplate should support regex matching with n times {n} pattern [SPR-13627]","**[Nikhil](https://jira.spring.io/secure/ViewProfile.jspa?name=iconnj)** opened **[SPR-13627](https://jira.spring.io/browse/SPR-13627?redirect=false)** and commented  When I create a UriTemplate with the following template string where I am using the n times pattern {2} in the regex   ``` /site.{domain:co.[a-z]{2}}  ```  This fails to match the uri string   ``` /site.co.eu ```  Looks like UriTemplate fails to properly parse the {} of any form within the regular expression  Similar improvements to parse the {} were recently applied to UriComponents and UriComponentsBuilder here #17896, but the UriTemplate still lacks this.  ---  **Affects:** 4.2.2  **Issue Links:** - #18202 UriTemplate parser fails on Regular Expressions with quantifiers (_**""is duplicated by""**_) - #17896 UriComponents should support URI variables that contain a regex - #18280 Regression: UriTemplate does not match when URI ends with slash  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/971f0469133e845c9befb0260db6a27b88e31b7c","closed","type: enhancement,","spring-projects-issues","2015-10-30T19:18:37Z","2019-01-13T20:46:36Z"
"","18054","Support @Cache* as merged composed annotations [SPR-13475]","**[Nicolas Labrot](https://jira.spring.io/secure/ViewProfile.jspa?name=nithril)** opened **[SPR-13475](https://jira.spring.io/browse/SPR-13475?redirect=false)** and commented  Given this composed annotation:  ```java @Target({ElementType.METHOD, ElementType.TYPE}) @Retention(RetentionPolicy.RUNTIME) @Inherited @Documented @Cacheable public @interface MyCacheable { 	String[] cacheNames() default {}; 	String key() default """"; } ```  The resulting `@Cacheable` attributes are not merged. Issue seems to come from `SpringCacheAnnotationParser#parseCacheAnnotations` which does not use `AnnotatedElementUtils.findMergedAnnotation(*, Cacheable.class);`.  ---  **Affects:** 4.2 GA  **Issue Links:** - #17490 Support multiple composed annotations on a single annotated element (_**""depends on""**_) - #18022 Introduce predefined composed annotations in core Spring - #18020 Use AnnotatedElementUtils instead of AnnotationUtils wherever feasible - #18021 Support `@ResponseStatus` as a merged composed annotation - #18047 Support `@CrossOrigin` as a merged composed annotation - #19347 `@CacheConfig`(cacheNames) broken when used on interface - #19367 Cache annotation lookup in 4.3 finds more annotations than in 4.2 - #18545 Support repeatable annotations as composed annotations - #19410 AnnotationFormatterFactory should support `@AliasFor` - #18376 Support `@AliasFor` for `@JmsListener` attributes  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ea09e578b9b276fa01c1e49c3676fa82386d9f76, https://github.com/spring-projects/spring-framework/commit/59c88eb3c0611aac802e162d53503ce71864baef, https://github.com/spring-projects/spring-framework/commit/54703bf3f8c048e3454289eed35f6099f868bf68  1 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2015-09-20T16:16:13Z","2019-01-13T05:35:31Z"
"","18047","Support @CrossOrigin as a merged composed annotation [SPR-13468]","**[Nicolas Labrot](https://jira.spring.io/secure/ViewProfile.jspa?name=nithril)** opened **[SPR-13468](https://jira.spring.io/browse/SPR-13468?redirect=false)** and commented  Given this composed annotation:  ```java @Target({ElementType.METHOD, ElementType.TYPE}) @Retention(RetentionPolicy.RUNTIME) @Documented @RequestMapping @CrossOrigin @ResponseBody public @interface CorsRequestMapping {     String[] path() default {};     String[] origins() default {};     RequestMethod[] method() default {}; } ```  The resulting `@CrossOrigin` ""origins"" attribute is not merged. Issue seems to come from `RequestMappingHandlerMapping#initCorsConfiguration` which does not use `AnnotatedElementUtils.findMergedAnnotation(*, CrossOrigin.class);`.  ---  **Affects:** 4.2 GA  **Issue Links:** - #18022 Introduce predefined composed annotations in core Spring - #18020 Use AnnotatedElementUtils instead of AnnotationUtils wherever feasible - #18021 Support `@ResponseStatus` as a merged composed annotation - #18054 Support `@Cache`* as merged composed annotations  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e4c0859d414f6e88f4fb2040a057d8036bfad44b, https://github.com/spring-projects/spring-framework/commit/0ad59ddb7ad27fec39e782e5e33549cb3d864bba  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2015-09-16T20:35:21Z","2019-01-13T05:35:35Z"
"","18263","First-class mechanism for triggering custom interceptors by annotation [SPR-13688]","**[Nicolas Fränkel](https://jira.spring.io/secure/ViewProfile.jspa?name=nfrankel)** opened **[SPR-13688](https://jira.spring.io/browse/SPR-13688?redirect=false)** and commented  I was thinking about how Spring could benefit from a [feature flag](https://en.wikipedia.org/wiki/Feature_toggle) feature. Just annotating your method with an annotation (_i.e._ `@Feature`) with a String parameter would mark this method as being only called if the feature is enabled.  ```java public class Foo {     @Feature(""X"")     public void bar() {         // Do something here     } } ```  Calling `foo.bar()` would be dependent whether `X` is activated: * If activated, the method would be called as usual * If not, the method won't be called at all  Obviously, for returning methods, a default value would be required.  ```java public class Foo {     @Feature(name = ""X"", default = 5)     public int bar() {         // Do something here     } } ```  There's already a similar mechanism in Spring with transaction handling of methods, so I thought I could get inspiration from it:  ```java public class Foo {     @Transactional     public int bar() {         // Do something here     } } ```  First, the intercepting code behind transaction handling of `@Transactional` is not trivial. It would also duplicate much code... I guess refactoring the existing code to provide a mini-framework to handle proxying annotated method would be a better path in term of clean code.  The activation itself is outside the scope of this issue.   --- No further details from [SPR-13688](https://jira.spring.io/browse/SPR-13688?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2015-11-14T23:08:59Z","2019-01-12T00:14:54Z"
"","18782","Support manual ACK and NACK in Stomp Client [SPR-14208]","**[Nicklas Johnson](https://jira.spring.io/secure/ViewProfile.jspa?name=spatula)** opened **[SPR-14208](https://jira.spring.io/browse/SPR-14208?redirect=false)** and commented  Currently it is possible to indicate when creating a new stomp session (via StompHeaders using the WebSocketStompClient) that manual acknowledgment is desired (via subscribeHeaders.setAck); however, there's no API for actually performing the manual ACK/NACK upon receiving a message (or later).  It would be nice if there were methods on the StompSession for sending an ACK or NACK for a message ID.  Extra nice would be having the StompSession passed in to StompSessionHandler#handleFrame, making doing the ACK or NACK easy.  Then the manual acknowledgment feature would be functional and easy to use.  Ideally such a change should work while being agnostic of transport; for our specific use case, we utilize stomp over websockets.   ---  **Affects:** 4.2.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/06b2d2b89e83f98bb5d50bfd4099e94b6db15700","closed","type: enhancement,","spring-projects-issues","2016-04-22T21:55:02Z","2016-05-06T13:55:28Z"
"","18652","DefaultCorsProcessor's origin comparison is restrictive and inefficient [SPR-14080]","**[Nick Verbeck](https://jira.spring.io/secure/ViewProfile.jspa?name=nerdynick)** opened **[SPR-14080](https://jira.spring.io/browse/SPR-14080?redirect=false)** and commented  This plays in part with #18266 but is more do to the nature of how DefaultCorsProcessor does its checks.  With the DefaultCorsProcessor auto on. It will always trip the check at line 71 ""WebUtils.isSameOrigin(serverRequest)"" of DefaultCorsProcessor even if I've already dealt with CORS headers within my own filter beforehand.  However this is not the core issue, an issue that I'm dealing with now. Because this check uses the java.net.URI class to do its parsing its now requiring super strict Request URIs against the webapp. Which is resulting in a number of rejected requests against our app.  The other issue here isn't just the strict nature of URI but just the general use of it in the first place. Its way to overweight for a large number of things its being used for and results in slowness within the app.  As well as its suffers from the Charset lock issue at high concurrency. (Nice write-up from the Evernote team on that issue here https://blog.evernote.com/tech/2011/06/21/fast-string-handling-a-frayed-knot/)  Currently the only work around to this is to wrap the HttpServletRequest and hide the Origin header from above. So that the check on line 64 ""!CorsUtils.isCorsRequest(request)"" will pass and stop further processing.  Ideally it would be great to be able to disable DefaultCorsProcessor at the very least. If anything for the nature of giving the developer the choice not making it for them. However the true solution would be to stop using URI for parsing just a host and port and use a simple regex or string token. As this would still let DefaultCorsProcessor be used.  ---  **Affects:** 4.2.5  **Issue Links:** - #18821 Recent ServletServerHttpRequest.getURI() change breaks CORS requests with encoded characters (_**""is duplicated by""**_) - #18266 Enable/Disable Spring CORS option - #18877 NPE was occurred at WebUtils.isSameOrigin  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6807bcb863775908fc19773924dca8c8734687b4, https://github.com/spring-projects/spring-framework/commit/899131997ea620fc2add7a3f9cb9f56f2185c86e, https://github.com/spring-projects/spring-framework/commit/abe7345008bd59fc20ee16eb36b4428092912006, https://github.com/spring-projects/spring-framework/commit/9a4177436464368b10a89fa5d61453cae0d9d29b, https://github.com/spring-projects/spring-framework/commit/a19be754c8f1ca67fd302482a6ee91c06f0cfe5e, https://github.com/spring-projects/spring-framework/commit/9a52c8144313a5093bf6b7153cd89857aaed1899","closed","type: bug,","spring-projects-issues","2016-03-22T23:24:59Z","2019-01-11T14:40:22Z"
"","18547","Support JacksonXmlModule.setDefaultUseWrapper [SPR-13975]","**[Nguyen Kien Trung](https://jira.spring.io/secure/ViewProfile.jspa?name=trung)** opened **[SPR-13975](https://jira.spring.io/browse/SPR-13975?redirect=false)** and commented  Jackson2ObjectMapperBuilder creates Jackson XMLMapper using default JacksonXmlModule.  It would be great if flag for defaultUseWrapper can be externalized for JacksonXmlModule.  ---  **Affects:** 4.2.4  **Issue Links:** - #18909 Jackson2ObjectMapperBuilder/FactoryBean should accept deserializers by handled type as well  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7b861c9a8aeda83ef6844633901d6f00ea28c4c0","closed","type: enhancement,","spring-projects-issues","2016-02-23T13:06:11Z","2019-01-11T19:03:41Z"
"","18246","ShallowEtagHeaderFilter.setContentLength causes an error when rendering a jsp which performs an include: [SPR-13671]","**[Neeraj A Khadakkar](https://jira.spring.io/secure/ViewProfile.jspa?name=nkhadakk)** opened **[SPR-13671](https://jira.spring.io/browse/SPR-13671?redirect=false)** and commented  This appears to be regression of issue 11717, where attempting to calculate Etag for jsp's which include other tags throws following exception :  SEVERE: Exception initializing page context java.lang.IllegalArgumentException: New capacity must not be smaller than current size at org.springframework.util.Assert.isTrue(Assert.java:68) at org.springframework.util.FastByteArrayOutputStream.resize(FastByteArrayOutputStream.java:265) at org.springframework.web.util.ContentCachingResponseWrapper.setBufferSize(ContentCachingResponseWrapper.java:143) at javax.servlet.ServletResponseWrapper.setBufferSize(ServletResponseWrapper.java:189) at javax.servlet.ServletResponseWrapper.setBufferSize(ServletResponseWrapper.java:189) at javax.servlet.ServletResponseWrapper.setBufferSize(ServletResponseWrapper.java:189) at javax.servlet.ServletResponseWrapper.setBufferSize(ServletResponseWrapper.java:189) at javax.servlet.ServletResponseWrapper.setBufferSize(ServletResponseWrapper.java:189) at javax.servlet.ServletResponseWrapper.setBufferSize(ServletResponseWrapper.java:189) at javax.servlet.ServletResponseWrapper.setBufferSize(ServletResponseWrapper.java:189) at javax.servlet.ServletResponseWrapper.setBufferSize(ServletResponseWrapper.java:189) at org.apache.jasper.runtime.JspWriterImpl.\(JspWriterImpl.java:138) at org.apache.jasper.runtime.PageContextImpl._initialize(PageContextImpl.java:206) at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:174) at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:174) at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:123)  ---  **Affects:** 4.2.2  **Reference URL:** #16339  **Issue Links:** - #16339 ShallowEtagHeaderFilter setContentLength on include","closed","in: core,","spring-projects-issues","2015-11-11T18:11:26Z","2019-01-14T04:41:14Z"
"","18226","@EventListener does not work if put it at method in class that implements interface [SPR-13650]","**[Nazar Vishka](https://jira.spring.io/secure/ViewProfile.jspa?name=nazar%20vishka)** opened **[SPR-13650](https://jira.spring.io/browse/SPR-13650?redirect=false)** and commented  Simple example:  ``` public interface Service{       @org.springframework.context.event.EventListener       void processEventA(EventA event);              void processEventB(EventB event); }  @Service public class ServiceImpl implements Service{      @Override      public void void processEventA(EventA event){            //do something       }       @Override      @org.springframework.context.event.EventListener      public void void processEventB(EventB event){            //do something       }       @org.springframework.context.event.EventListener      public void void processEventC(EventC event){            //do something       } }  @Service public class EventPublisher{        @Autowired        ApplicationEventPublisher eventPublisher;         public void publishEvents(){              eventPublisher.publishEvent(new EventA());              eventPublisher.publishEvent(new EventB());              eventPublisher.publishEvent(new EventC());        } } ```  When I call EventPublisher.publishEvents() only one method in ServiceImpl is triggered: processEventA(EventA event). But I expected that all three methods will be triggered.  ---  **Affects:** 4.2.2  **Issue Links:** - #18114 Spring incorrectly interprets a bean to be a spring eventlistener - #18153 Incorrect `@JmsListener` parameter matching when the listener is a JDK proxy - #18488 Scheduled method is not invoked via proxy - #18230 Consistent method selection for listeners and endpoint mappings - #18231 AbstractAutoProxyCreator.getCacheKey generate lots of String garbage  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/90c9d96a4d432a31c6cfbb0c2e8f2ab83daeffef, https://github.com/spring-projects/spring-framework/commit/d5efe4f9837134f7a6303515e79fd394082e3cfc","closed","type: enhancement,","spring-projects-issues","2015-11-06T11:39:49Z","2019-01-13T05:34:35Z"
"","18287","Differentiate between TypeDescriptors with same annotations but different attributes [SPR-13714]","**[Nathan Piper](https://jira.spring.io/secure/ViewProfile.jspa?name=nathanpiper)** opened **[SPR-13714](https://jira.spring.io/browse/SPR-13714?redirect=false)** and commented  The current implementation of TypeDescriptor.equals only checks for the presence of matching annotations when comparing two type descriptors (as apposed to testing property values for the same annotation on both type descriptors). This ultimately leads to problems when used with the GenericConversionService cache as the service can return the wrong converter when multiple converters are being used that rely on annotations with distinct property values.  ---  **Affects:** 4.2.3  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/924  **Issue Links:** - #19496 ConversionService performance regression - #19410 AnnotationFormatterFactory should support `@AliasFor` - #19493 Improve performance for conversions using a method parameter based type descriptor with annotations","closed","type: enhancement,","spring-projects-issues","2015-11-21T02:13:45Z","2019-01-13T05:32:59Z"
"","18372","Move @ConfigurationProperties and supporting classes to Spring Framework [SPR-13799]","**[Nathan Niesen](https://jira.spring.io/secure/ViewProfile.jspa?name=nniesen)** opened **[SPR-13799](https://jira.spring.io/browse/SPR-13799?redirect=false)** and commented  Many of Spring Boots conditional configuration would be useful in regular Spring code and libraries where you don't really want to pull in all of the spring-boot dependencies.  Move `@ConfigurationProperties` and supporting classes (like PropertiesConfigurationFactory) out of Spring Boot and into Spring Framework (or at least into their own module). The prefixed properties would be useful in library code where I don't want to pull in the entire spring-boot project. Also, Conditional Classes.  Additional information and comments in Spring Boot issue 2286: https://github.com/spring-projects/spring-boot/issues/2286   ---  0 votes, 6 watchers","closed","in: core,","spring-projects-issues","2015-12-16T16:01:48Z","2018-02-20T14:22:00Z"
"","18483","Transaction tests not working  [SPR-13909]","**[Murali Mohan Rath](https://jira.spring.io/secure/ViewProfile.jspa?name=mmrath)** opened **[SPR-13909](https://jira.spring.io/browse/SPR-13909?redirect=false)** and commented  In the attached sample there is one test which is failing. I think the test should pass, however I am not 100% sure. The test fails only when findByTestColumn is annotated with `@Lock`(LockModeType.OPTIMISTIC)   ---  **Attachments:** - [transaction-test.zip](https://jira.spring.io/secure/attachment/23281/transaction-test.zip) (_5.24 kB_)","closed","status: declined,","spring-projects-issues","2016-02-02T06:45:11Z","2019-01-12T16:22:25Z"
"","18424","Request method 'POST' not supported when upgrading from spring 3 [SPR-13851]","**[Mohy Eid](https://jira.spring.io/secure/ViewProfile.jspa?name=remohy1)** opened **[SPR-13851](https://jira.spring.io/browse/SPR-13851?redirect=false)** and commented  Is this a known issue? When I upgraded from spring 3 to spring 4, I get a 500 error with ""Request method 'POST' not supported"". It just works fine with spring 3. It sounds like it is a security issue, but I am not sure if it is a bug in Spring or something I missed through the migration. What is wired is that the GET works fineThis is for all my post methods, but an example:  Here is where it populates the error: ``` if (!csrfToken.getToken().equals(actualToken)) { if (logger.isDebugEnabled()) { logger.debug(""Invalid CSRF token found for "" + UrlUtils.buildFullRequestUrl(request));   }   if (missingToken) {   accessDeniedHandler.handle(request, response,   new MissingCsrfTokenException(actualToken));   }   else {   accessDeniedHandler.handle(request, response,   new InvalidCsrfTokenException(csrfToken, actualToken)); // HERE   }   return;   } ```  15:42:32,917 ERROR [org.apache.catalina.core.ContainerBase.[jboss.web].[default-host].[].[appServlet]] (http--0.0.0.0-8080-1) Servlet.service() for servlet appServlet threw exception: org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'POST' not supported at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.handleNoMatch(RequestMappingInfoHandlerMapping.java:204) [spring-webmvc-4.2.2.RELEASE.jar:4.2.2.RELEASE] at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.lookupHandlerMethod(AbstractHandlerMethodMapping.java:383) [spring-webmvc-4.2.2.RELEASE.jar:4.2.2.RELEASE] at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:323) [spring-webmvc-4.2.2.RELEASE.jar:4.2.2.RELEASE] at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:62) [spring-webmvc-4.2.2.RELEASE.jar:4.2.2.RELEASE] at org.springframework.web.servlet.handler.AbstractHandlerMapping.getHandler(AbstractHandlerMapping.java:351) [spring-webmvc-4.2.2.RELEASE.jar:4.2.2.RELEASE] at org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java:1120) [spring-webmvc-4.2.2.RELEASE.jar:4.2.2.RELEASE] at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:932) [spring-webmvc-4.2.2.RELEASE.jar:4.2.2.RELEASE] at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:893) [spring-webmvc-4.2.2.RELEASE.jar:4.2.2.RELEASE] at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) [spring-webmvc-4.2.2.RELEASE.jar:4.2.2.RELEASE] at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872) [spring-webmvc-4.2.2.RELEASE.jar:4.2.2.RELEASE] at javax.servlet.http.HttpServlet.service(HttpServlet.java:754) [jboss-servlet-api_3.0_spec-1.0.0.Final.jar:1.0.0.Final] at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) [spring-webmvc-4.2.2.RELEASE.jar:4.2.2.RELEASE] at javax.servlet.http.HttpServlet.service(HttpServlet.java:847) [jboss-servlet-api_3.0_spec-1.0.0.Final.jar:1.0.0.Final] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:329) [jbossweb-7.0.13.Final.jar:] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:248) [jbossweb-7.0.13.Final.jar:] at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:840) [jbossweb-7.0.13.Final.jar:] at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:622) [jbossweb-7.0.13.Final.jar:] at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:560) [jbossweb-7.0.13.Final.jar:] at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:488) [jbossweb-7.0.13.Final.jar:] at org.springframework.security.web.firewall.RequestWrapper$FirewalledRequestAwareRequestDispatcher.forward(RequestWrapper.java:139) [spring-security-web-4.0.1.RELEASE.jar:4.0.1.RELEASE] at org.springframework.security.web.access.AccessDeniedHandlerImpl.handle(AccessDeniedHandlerImpl.java:71) [spring-security-web-4.0.1.RELEASE.jar:4.0.1.RELEASE] at org.springframework.security.web.csrf.CsrfFilter.doFilterInternal(CsrfFilter.java:110) [spring-security-web-4.0.1.RELEASE.jar:4.0.1.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.2.2.RELEASE.jar:4.2.2.RELEASE] at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) [spring-security-web-4.0.1.RELEASE.jar:4.0.1.RELEASE] at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64) [spring-security-web-4.0.1.RELEASE.jar:4.0.1.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.2.2.RELEASE.jar:4.2.2.RELEASE] at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) [spring-security-web-4.0.1.RELEASE.jar:4.0.1.RELEASE] at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:53) [spring-security-web-4.0.1.RELEASE.jar:4.0.1.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.2.2.RELEASE.jar:4.2.2.RELEASE] at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) [spring-security-web-4.0.1.RELEASE.jar:4.0.1.RELEASE] at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:91) [spring-security-web-4.0.1.RELEASE.jar:4.0.1.RELEASE] at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) [spring-security-web-4.0.1.RELEASE.jar:4.0.1.RELEASE] at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:213) [spring-security-web-4.0.1.RELEASE.jar:4.0.1.RELEASE] at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:176) [spring-security-web-4.0.1.RELEASE.jar:4.0.1.RELEASE] at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:346) [spring-web-4.2.2.RELEASE.jar:4.2.2.RELEASE] at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:262) [spring-web-4.2.2.RELEASE.jar:4.2.2.RELEASE] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:280) [jbossweb-7.0.13.Final.jar:] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:248) [jbossweb-7.0.13.Final.jar:] at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:275) [jbossweb-7.0.13.Final.jar:] at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:161) [jbossweb-7.0.13.Final.jar:] at org.jboss.as.web.security.SecurityContextAssociationValve.invoke(SecurityContextAssociationValve.java:153) [jboss-as-web-7.1.1.Final.jar:7.1.1.Final] at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:155) [jbossweb-7.0.13.Final.jar:] at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) [jbossweb-7.0.13.Final.jar:] at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) [jbossweb-7.0.13.Final.jar:] at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:368) [jbossweb-7.0.13.Final.jar:] at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:877) [jbossweb-7.0.13.Final.jar:] at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:671) [jbossweb-7.0.13.Final.jar:] at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:930) [jbossweb-7.0.13.Final.jar:] at java.lang.Thread.run(Unknown Source) [rt.jar:1.7.0_76]  ---  15:42:32,974 ERROR [org.apache.catalina.core.ContainerBase.[jboss.web].[default-host].[/].[appServlet]] (http--0.0.0.0-8080-1) Servlet.service() for servlet appServlet threw exception: org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'POST' not supported at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.handleNoMatch(RequestMappingInfoHandlerMapping.java:204) [spring-webmvc-4.2.2.RELEASE.jar:4.2.2.RELEASE] at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.lookupHandlerMethod(AbstractHandlerMethodMapping.java:383) [spring-webmvc-4.2.2.RELEASE.jar:4.2.2.RELEASE] at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:323) [spring-webmvc-4.2.2.RELEASE.jar:4.2.2.RELEASE] at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:62) [spring-webmvc-4.2.2.RELEASE.jar:4.2.2.RELEASE] at org.springframework.web.servlet.handler.AbstractHandlerMapping.getHandler(AbstractHandlerMapping.java:351) [spring-webmvc-4.2.2.RELEASE.jar:4.2.2.RELEASE] at org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java:1120) [spring-webmvc-4.2.2.RELEASE.jar:4.2.2.RELEASE] at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:932) [spring-webmvc-4.2.2.RELEASE.jar:4.2.2.RELEASE] at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:893) [spring-webmvc-4.2.2.RELEASE.jar:4.2.2.RELEASE] at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) [spring-webmvc-4.2.2.RELEASE.jar:4.2.2.RELEASE] at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872) [spring-webmvc-4.2.2.RELEASE.jar:4.2.2.RELEASE] at javax.servlet.http.HttpServlet.service(HttpServlet.java:754) [jboss-servlet-api_3.0_spec-1.0.0.Final.jar:1.0.0.Final] at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) [spring-webmvc-4.2.2.RELEASE.jar:4.2.2.RELEASE] at javax.servlet.http.HttpServlet.service(HttpServlet.java:847) [jboss-servlet-api_3.0_spec-1.0.0.Final.jar:1.0.0.Final] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:329) [jbossweb-7.0.13.Final.jar:] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:248) [jbossweb-7.0.13.Final.jar:] at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:840) [jbossweb-7.0.13.Final.jar:] at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:622) [jbossweb-7.0.13.Final.jar:] at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:560) [jbossweb-7.0.13.Final.jar:] at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:488) [jbossweb-7.0.13.Final.jar:] at org.springframework.security.web.firewall.RequestWrapper$FirewalledRequestAwareRequestDispatcher.forward(RequestWrapper.java:139) [spring-security-web-4.0.1.RELEASE.jar:4.0.1.RELEASE] at org.springframework.security.web.access.AccessDeniedHandlerImpl.handle(AccessDeniedHandlerImpl.java:71) [spring-security-web-4.0.1.RELEASE.jar:4.0.1.RELEASE] at org.springframework.security.web.csrf.CsrfFilter.doFilterInternal(CsrfFilter.java:110) [spring-security-web-4.0.1.RELEASE.jar:4.0.1.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.2.2.RELEASE.jar:4.2.2.RELEASE] at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) [spring-security-web-4.0.1.RELEASE.jar:4.0.1.RELEASE] at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64) [spring-security-web-4.0.1.RELEASE.jar:4.0.1.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.2.2.RELEASE.jar:4.2.2.RELEASE] at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) [spring-security-web-4.0.1.RELEASE.jar:4.0.1.RELEASE] at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:53) [spring-security-web-4.0.1.RELEASE.jar:4.0.1.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.2.2.RELEASE.jar:4.2.2.RELEASE] at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) [spring-security-web-4.0.1.RELEASE.jar:4.0.1.RELEASE] at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:91) [spring-security-web-4.0.1.RELEASE.jar:4.0.1.RELEASE] at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) [spring-security-web-4.0.1.RELEASE.jar:4.0.1.RELEASE] at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:213) [spring-security-web-4.0.1.RELEASE.jar:4.0.1.RELEASE] at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:176) [spring-security-web-4.0.1.RELEASE.jar:4.0.1.RELEASE] at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:346) [spring-web-4.2.2.RELEASE.jar:4.2.2.RELEASE] at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:262) [spring-web-4.2.2.RELEASE.jar:4.2.2.RELEASE] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:280) [jbossweb-7.0.13.Final.jar:] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:248) [jbossweb-7.0.13.Final.jar:] at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:275) [jbossweb-7.0.13.Final.jar:] at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:161) [jbossweb-7.0.13.Final.jar:] at org.jboss.as.web.security.SecurityContextAssociationValve.invoke(SecurityContextAssociationValve.java:153) [jboss-as-web-7.1.1.Final.jar:7.1.1.Final] at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:155) [jbossweb-7.0.13.Final.jar:] at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) [jbossweb-7.0.13.Final.jar:] at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) [jbossweb-7.0.13.Final.jar:] at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:368) [jbossweb-7.0.13.Final.jar:] at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:877) [jbossweb-7.0.13.Final.jar:] at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:671) [jbossweb-7.0.13.Final.jar:] at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:930) [jbossweb-7.0.13.Final.jar:] at java.lang.Thread.run(Unknown Source) [rt.jar:1.7.0_76]  ---  15:42:33,045 ERROR [org.apache.catalina.core.ContainerBase.[jboss.web].[default-host].[/].[appServlet]] (http--0.0.0.0-8080-1) Servlet.service() for servlet appServlet threw exception: org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'POST' not supported at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.handleNoMatch(RequestMappingInfoHandlerMapping.java:204) [spring-webmvc-4.2.2.RELEASE.jar:4.2.2.RELEASE] at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.lookupHandlerMethod(AbstractHandlerMethodMapping.java:383) [spring-webmvc-4.2.2.RELEASE.jar:4.2.2.RELEASE] at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:323) [spring-webmvc-4.2.2.RELEASE.jar:4.2.2.RELEASE] at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:62) [spring-webmvc-4.2.2.RELEASE.jar:4.2.2.RELEASE] at org.springframework.web.servlet.handler.AbstractHandlerMapping.getHandler(AbstractHandlerMapping.java:351) [spring-webmvc-4.2.2.RELEASE.jar:4.2.2.RELEASE] at org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java:1120) [spring-webmvc-4.2.2.RELEASE.jar:4.2.2.RELEASE] at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:932) [spring-webmvc-4.2.2.RELEASE.jar:4.2.2.RELEASE] at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:893) [spring-webmvc-4.2.2.RELEASE.jar:4.2.2.RELEASE] at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) [spring-webmvc-4.2.2.RELEASE.jar:4.2.2.RELEASE] at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872) [spring-webmvc-4.2.2.RELEASE.jar:4.2.2.RELEASE] at javax.servlet.http.HttpServlet.service(HttpServlet.java:754) [jboss-servlet-api_3.0_spec-1.0.0.Final.jar:1.0.0.Final] at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) [spring-webmvc-4.2.2.RELEASE.jar:4.2.2.RELEASE] at javax.servlet.http.HttpServlet.service(HttpServlet.java:847) [jboss-servlet-api_3.0_spec-1.0.0.Final.jar:1.0.0.Final] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:329) [jbossweb-7.0.13.Final.jar:] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:248) [jbossweb-7.0.13.Final.jar:] at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:840) [jbossweb-7.0.13.Final.jar:] at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:624) [jbossweb-7.0.13.Final.jar:] at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:560) [jbossweb-7.0.13.Final.jar:] at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:488) [jbossweb-7.0.13.Final.jar:] at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:533) [jbossweb-7.0.13.Final.jar:] at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:387) [jbossweb-7.0.13.Final.jar:] at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:169) [jbossweb-7.0.13.Final.jar:] at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) [jbossweb-7.0.13.Final.jar:] at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) [jbossweb-7.0.13.Final.jar:] at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:368) [jbossweb-7.0.13.Final.jar:] at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:877) [jbossweb-7.0.13.Final.jar:] at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:671) [jbossweb-7.0.13.Final.jar:] at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:930) [jbossweb-7.0.13.Final.jar:] at java.lang.Thread.run(Unknown Source) [rt.jar:1.7.0_76]  ---  15:42:33,083 ERROR [org.apache.catalina.core.ContainerBase.[jboss.web].[default-host]] (http--0.0.0.0-8080-1) Exception Processing ErrorPage[exceptionType=java.lang.Throwable, location=//authtimeout]: org.springframework.web.util.NestedServletException: Request processing failed; nested exception is java.lang.RuntimeException: org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'POST' not supported at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:982) [spring-webmvc-4.2.2.RELEASE.jar:4.2.2.RELEASE] at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872) [spring-webmvc-4.2.2.RELEASE.jar:4.2.2.RELEASE] at javax.servlet.http.HttpServlet.service(HttpServlet.java:754) [jboss-servlet-api_3.0_spec-1.0.0.Final.jar:1.0.0.Final] at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) [spring-webmvc-4.2.2.RELEASE.jar:4.2.2.RELEASE] at javax.servlet.http.HttpServlet.service(HttpServlet.java:847) [jboss-servlet-api_3.0_spec-1.0.0.Final.jar:1.0.0.Final] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:329) [jbossweb-7.0.13.Final.jar:] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:248) [jbossweb-7.0.13.Final.jar:] at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:840) [jbossweb-7.0.13.Final.jar:] at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:624) [jbossweb-7.0.13.Final.jar:] at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:560) [jbossweb-7.0.13.Final.jar:] at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:488) [jbossweb-7.0.13.Final.jar:] at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:533) [jbossweb-7.0.13.Final.jar:] at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:387) [jbossweb-7.0.13.Final.jar:] at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:169) [jbossweb-7.0.13.Final.jar:] at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) [jbossweb-7.0.13.Final.jar:] at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) [jbossweb-7.0.13.Final.jar:] at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:368) [jbossweb-7.0.13.Final.jar:] at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:877) [jbossweb-7.0.13.Final.jar:] at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:671) [jbossweb-7.0.13.Final.jar:] at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:930) [jbossweb-7.0.13.Final.jar:] at java.lang.Thread.run(Unknown Source) [rt.jar:1.7.0_76] Caused by: java.lang.RuntimeException: org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'POST' not supported at at org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:136) [spring-webmvc-4.2.2.RELEASE.jar:4.2.2.RELEASE] at org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1183) [spring-webmvc-4.2.2.RELEASE.jar:4.2.2.RELEASE] at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1020) [spring-webmvc-4.2.2.RELEASE.jar:4.2.2.RELEASE] at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:971) [spring-webmvc-4.2.2.RELEASE.jar:4.2.2.RELEASE] at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:893) [spring-webmvc-4.2.2.RELEASE.jar:4.2.2.RELEASE] at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) [spring-webmvc-4.2.2.RELEASE.jar:4.2.2.RELEASE] ... 20 more Caused by: org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'POST' not supported at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.handleNoMatch(RequestMappingInfoHandlerMapping.java:204) [spring-webmvc-4.2.2.RELEASE.jar:4.2.2.RELEASE] at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.lookupHandlerMethod(AbstractHandlerMethodMapping.java:383) [spring-webmvc-4.2.2.RELEASE.jar:4.2.2.RELEASE] at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:323) [spring-webmvc-4.2.2.RELEASE.jar:4.2.2.RELEASE] at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:62) [spring-webmvc-4.2.2.RELEASE.jar:4.2.2.RELEASE] at org.springframework.web.servlet.handler.AbstractHandlerMapping.getHandler(AbstractHandlerMapping.java:351) [spring-webmvc-4.2.2.RELEASE.jar:4.2.2.RELEASE] at org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java:1120) [spring-webmvc-4.2.2.RELEASE.jar:4.2.2.RELEASE] at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:932) [spring-webmvc-4.2.2.RELEASE.jar:4.2.2.RELEASE] ... 22 more  ---  **Affects:** 4.2.2, 4.2.3","closed","status: invalid,","spring-projects-issues","2016-01-07T23:44:01Z","2019-01-13T15:57:09Z"
"","18552","@Primary annotation is not working for beans with the same name [SPR-13980]","**[Modestas Kažinauskas](https://jira.spring.io/secure/ViewProfile.jspa?name=modestukasai)** opened **[SPR-13980](https://jira.spring.io/browse/SPR-13980?redirect=false)** and commented  `@Primary` annotation is not working for beans. This issue persists in older spring versions too.  Please see my code below  ```java @Configuration public class ConfigA {     @Bean     @Primary     public MyObject createMyObject() {         return new MyObject(""A"");     } } ```  ```java @Configuration public class ConfigB {     @Bean     public MyObject createMyObject() {         return new MyObject(""B"");     } } ```  ```java public class MyObject {     private String name;      public MyObject(String name) {         this.name = name;     }     ... } ```  ```java @Configuration public class Runner {     @Autowired     private MyObject myObject;      @PostConstruct     void init() {         System.out.println(myObject.getName()); //Output is B, but primary bean is A     } } ```  2016-02-25 08:39:49.351  INFO 1196 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Overriding bean definition for bean 'init' with a different definition: replacing [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; **primary=true**; factoryBeanName=configA; factoryMethodName=createMyObject; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [com/modzo/ConfigA.class]] with [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; **primary=false**; factoryBeanName=configB; factoryMethodName=createMyObject; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [com/modzo/ConfigB.class]]  DefaultListableBeanFactory takes bean name as 'init'. and overrides with another.  **This configuration is resolved by changing init method name to not duplicate.**  ---  **Affects:** 4.2.4  **Reference URL:** #15434  **Issue Links:** - #15434 Reconsider whether to generally allow bean overriding by name","closed","in: core,","spring-projects-issues","2016-02-25T07:34:50Z","2019-01-14T04:40:14Z"
"","18488","Scheduled method is not invoked via proxy [SPR-13914]","**[Mitchell Bosecke](https://jira.spring.io/secure/ViewProfile.jspa?name=mitchellbosecke@gmail.com)** opened **[SPR-13914](https://jira.spring.io/browse/SPR-13914?redirect=false)** and commented  I have several methods annotated with `@scheduled` and the majority of them run just fine but one of them in particular is not invoked via a proxy, it is invoked directly. The method is on a class annotated with `@Service` and `@Transactional` and that class has an appropriate interface with the method signature on it; i.e. I'm using JDK dynamic proxies.  The `@scheduled` annotation is on the implementation of the method. There is nothing unique about this method compared to my other `@scheduled` methods as far as I can tell.  That exact same method, when invoked via a web endpoint works as expected (via proxy and a transaction is available).  I've included some example code in the linked stack overflow post; let me know if I should copy some of that here.  ---  **Affects:** 3.2.16  **Reference URL:** http://stackoverflow.com/questions/35184189/spring-scheduled-method-not-invoked-via-proxy-therefore-no-transaction  **Issue Links:** - #20469 EnableAsync prevents EnableCaching from working in self-injection scenarios - #18389 Consistent validation of annotated methods behind AOP proxies - #18226 `@EventListener` does not work if put it at method in class that implements interface","open","in: core,","spring-projects-issues","2016-02-03T22:18:05Z","2019-01-13T05:30:40Z"
"","18740","Allow Groovy application context DSL to register aliases [SPR-14168]","**[Misagh Moayyed](https://jira.spring.io/secure/ViewProfile.jspa?name=mmoayyed)** opened **[SPR-14168](https://jira.spring.io/browse/SPR-14168?redirect=false)** and commented  Based on this doc: https://spring.io/blog/2014/03/03/groovy-bean-configuration-in-spring-framework-4  There is no way to register bean aliases in Groovy, like one can with XML. Please allow that to happen.   ---  **Affects:** 4.2.5","open","type: enhancement,","spring-projects-issues","2016-04-14T01:06:23Z","2016-04-14T15:24:32Z"
"","18269","Portlet MVC @ModelAttribute interdependency is still not supported  [SPR-13694]","**[Miles Huang](https://jira.spring.io/secure/ViewProfile.jspa?name=miles.huang)** opened **[SPR-13694](https://jira.spring.io/browse/SPR-13694?redirect=false)** and commented  The same problem for servlet MVC has been addressed by #10965. However an annotation driven portlet MVC controller still have same issue. The `@ModelAttribute` methods are invoked in uncertain order. Can the same fix logic of #10965 also be applied to portlet MVC?  ---  **Affects:** 4.2.3  **Issue Links:** - #10965 Support for `@ModelAttribute` interdependency - #17982 Prevent binding for `@ModelAttribute`","closed","type: enhancement,","spring-projects-issues","2015-11-17T07:08:38Z","2019-01-13T05:34:22Z"
"","18598","Reconsider enablement of JNDIPropertySource by default [SPR-14026]","**[Mike Noordermeer](https://jira.spring.io/secure/ViewProfile.jspa?name=miken)** opened **[SPR-14026](https://jira.spring.io/browse/SPR-14026?redirect=false)** and commented  #13189 enabled JndiPropertySource by default. Looking at some profiler results, I'm wondering if it would be wise to at least add a warning to the documentation about the potential performance impact of this.  The attached call tree shows that for 8800 property lookups, 89% of the time is spent in the JndiPropertySource (JndiTemplate creates an InitialContext on each lookup, etc. etc.). All other property sources are _way_ faster, and I never anticipated JNDI being so slow (and this is using Tomcat, other app servers are known for having even slow JNDI access).  This was tested against 4.2.1, but it seems nothing changed since then, and I assume it affects 4.2.5 as well.  ---  **Affects:** 4.2.5  **Attachments:** - [calltree.png](https://jira.spring.io/secure/attachment/23340/calltree.png) (_210.58 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d2c0885e2979e9708d5d700f6a3e131bc9a770b1  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2016-03-08T14:17:27Z","2019-01-11T15:04:04Z"
"","18476","Can add attribute to @JmsListener annotation to tell it's queue or topic? [SPR-13902]","**[Mike Cao](https://jira.spring.io/secure/ViewProfile.jspa?name=mikecao)** opened **[SPR-13902](https://jira.spring.io/browse/SPR-13902?redirect=false)** and commented  can add pubSubDomain attribute to `@JmsListener` annotation to tell it's pub-sub mode or queue mode ?   ---  **Affects:** 4.2.3","closed","status: invalid,","spring-projects-issues","2016-01-29T05:24:30Z","2019-01-12T05:23:12Z"
"","18475","SimpleKeyGenerator does not work when using Spring cache with Redis back store [SPR-13901]","**[Mike Cao](https://jira.spring.io/secure/ViewProfile.jspa?name=mikecao)** opened **[SPR-13901](https://jira.spring.io/browse/SPR-13901?redirect=false)** and commented  I found the cacheNames of the `@Cacheable`(cacheNames=""xxx"")  annotation does not work when i use the annotation based Spring Cache with Redis back store and SimpleKey generator.  For example:  ```java         @Override 	@Cacheable(cacheNames=""brandcachename"") 	public List listBrands() throws Exception { 		//query from db. 		return brandslist; 	}  	@Override 	@Cacheable(cacheNames=""typecachename"") 	public List listTypes() throws Exception { 		//query from db. 		return typeslist; 	} ```  1) First execution of the listBrands() method will store the List\ to redis server.(correct) 2) Then the listTypes() execution will get the cached values of List\ from redis server, rather than from db, and than throws CastException.(error)  After i looked into it, i found the value of every cache is a ZSET in redis, and every value in ZSET is the keys generated by the SimpleKey, so if the methods which even annotated by different cache name have no arguments, it will always generate the same key SimpleKey.EMPTY. and than error occurred.   ---  **Affects:** 4.2.3","closed","in: core,","spring-projects-issues","2016-01-29T03:59:28Z","2019-01-12T16:22:27Z"
"","18582","Support placeholder for @CrossOrigin [SPR-14010]","**[Michitomo Nakahara](https://jira.spring.io/secure/ViewProfile.jspa?name=michitomo)** opened **[SPR-14010](https://jira.spring.io/browse/SPR-14010?redirect=false)** and commented  Parameter ""origins"" of `@CrossOrigin` should be changeable using placeholder.  ``` @CrossOrigin(""${cors.allowed.urls}"") @RequestMapping(""${endpoint}"") //This works @ResponseBody public String xhrEndpoint() { } ```    ---  **Affects:** 4.2.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8852a5e1784bbf24fac62a2b4eb1a19f7609db6f  2 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2016-03-02T04:39:32Z","2016-04-06T08:38:08Z"
"","18509","Translate Resource returned from Controller to 404 instead of 500 if not existing [SPR-13937]","**[Michael Stummvoll](https://jira.spring.io/secure/ViewProfile.jspa?name=stummi)** opened **[SPR-13937](https://jira.spring.io/browse/SPR-13937?redirect=false)** and commented  when having a controller method which returns a Resource where .exists() is false, spring returns a ""500 Internal Server Error"" to the user. I think it would be more accurate to return a 404 Error here.    --- No further details from [SPR-13937](https://jira.spring.io/browse/SPR-13937?redirect=false)","closed","status: invalid,","spring-projects-issues","2016-02-11T10:51:26Z","2019-01-12T05:23:09Z"
"","18681","Wrong detection of event type on ApplicationListener<> when using lambdas (ClassCast Exception) [SPR-14109]","**[Michael Simons](https://jira.spring.io/secure/ViewProfile.jspa?name=michael.simons)** opened **[SPR-14109](https://jira.spring.io/browse/SPR-14109?redirect=false)** and commented  Hello there,  i hope this is indeed a Spring Framework and not a Spring Boot bug. If not, please excuse and move it to the right place.  In my application i have a WebSocketMessageBroker (enabled through `@EnableWebSocketMessageBroker`) as well as a HttpSessionEventPublisher (enabled via `@Bean`) and a ApplicationListener\.  If i use an anonymous inner class for the ApplicationListener, everything works fine.  If i use a lambda like so  ```java public ApplicationListener httpSessionCreatedEventListener() {   return (HttpSessionCreatedEvent event) -> {     LoggerFactory.getLogger(ClasscastApplication.class).info(""Session created..."");   }; } ```  the generic type of my listener is incorrectly identified and a BrokerAvailabilityEvent is passed to it leading to:  ``` Caused by: java.lang.ClassCastException: org.springframework.messaging.simp.broker.BrokerAvailabilityEvent cannot be cast to org.springframework.security.web.session.HttpSessionCreatedEvent 	at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:163) ~[spring-context-4.2.5.RELEASE.jar:4.2.5.RELEASE] 	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:136) ~[spring-context-4.2.5.RELEASE.jar:4.2.5.RELEASE] 	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:381) ~[spring-context-4.2.5.RELEASE.jar:4.2.5.RELEASE] 	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:335) ~[spring-context-4.2.5.RELEASE.jar:4.2.5.RELEASE] 	at org.springframework.messaging.simp.broker.AbstractBrokerMessageHandler.publishBrokerAvailableEvent(AbstractBrokerMessageHandler.java:262) ~[spring-messaging-4.2.5.RELEASE.jar:4.2.5.RELEASE] 	at org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler.startInternal(SimpleBrokerMessageHandler.java:178) ~[spring-messaging-4.2.5.RELEASE.jar:4.2.5.RELEASE] 	at org.springframework.messaging.simp.broker.AbstractBrokerMessageHandler.start(AbstractBrokerMessageHandler.java:164) ~[spring-messaging-4.2.5.RELEASE.jar:4.2.5.RELEASE] 	at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:173) ~[spring-context-4.2.5.RELEASE.jar:4.2.5.RELEASE] 	... 14 common frames omitted ```  I guess that might happen with other events, too, but i noticed it in context of messaging.  I have attached a demo application that reproduces that bug.  ---  **Affects:** 4.2.5  **Attachments:** - [classcast.zip](https://jira.spring.io/secure/attachment/23356/classcast.zip) (_62.78 kB_)  **Issue Links:** - #17130 GenericTypeResolver should be able to introspect generic arguments from lambdas - #20393 SimpleApplicationEventMulticaster does not deal with lambda-defined listeners when ErrorHandler is set - #19412 SimpleApplicationEventMulticaster should not generally suppress ClassCastException","closed","in: core,","spring-projects-issues","2016-04-04T07:47:45Z","2019-01-11T16:42:34Z"
"","18177","Autowiring throws NullPointerException [SPR-13599]","**[Michael Schoene](https://jira.spring.io/secure/ViewProfile.jspa?name=mrs22)** opened **[SPR-13599](https://jira.spring.io/browse/SPR-13599?redirect=false)** and commented  After switching to 4.2.2 I get the following exception during autowiring:  ```java Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: private java.lang.String de.ei.janet.server.Janet.saDir; nested exception is java.lang.NullPointerException 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:571) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE] 	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE] 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:331) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE] 	... 29 common frames omitted Caused by: java.lang.NullPointerException: null 	at java.util.concurrent.ConcurrentHashMap.containsValue(ConcurrentHashMap.java:979) ~[na:1.8.0_60] 	at java.util.concurrent.ConcurrentHashMap$ValuesView.contains(ConcurrentHashMap.java:4664) ~[na:1.8.0_60] 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.determineAutowireCandidate(DefaultListableBeanFactory.java:1228) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE] 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1124) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE] 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE] 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:543) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE] 	... 31 common frames omitted ```  The reason seams to be the last changes in DefaultListableBeanFactory (Commit 097bcfb997bd215c7b39635770e34812744f0d9e). This commit replaces HashMap with ConcurrentHashMap. After this change the fallback case in method determineAutowireCandidate throws the NullPointerException if beanInstance is null.   ---  **Affects:** 4.2.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5386e8a9e9a85dda6f9a79c2d6e3d6a1b7734e90","closed","in: core,","spring-projects-issues","2015-10-22T18:59:04Z","2015-11-15T17:03:13Z"
"","18100","Jackson 2.6: message converter should use type also for Iterable [SPR-13523]","**[Michael Schoene](https://jira.spring.io/secure/ViewProfile.jspa?name=mrs22)** opened **[SPR-13523](https://jira.spring.io/browse/SPR-13523?redirect=false)** and commented  With #17903 you restrict the use of type to collections. Is this really necessary?  It would be nice to have the feature also for Iterable (as in Spring 4.2.0).  ---  **Affects:** 4.2.1  **Issue Links:** - #17903 Jackson 2.6: message converter should use type only for collections","closed","in: web,","spring-projects-issues","2015-09-30T09:52:23Z","2019-01-11T17:28:08Z"
"","18330","ResourceUrlEncodingFilter improperly encodes URLs on root page [SPR-13757]","**[Michael Russo](https://jira.spring.io/secure/ViewProfile.jspa?name=merusso)** opened **[SPR-13757](https://jira.spring.io/browse/SPR-13757?redirect=false)** and commented  When fetching a root page **with no trailing slash** (http://app-server/context), all resources on this page are not properly re-encoded with cache-busting strings, and these resources are served unversioned. If a trailing slash is added to the root page (http://app-server/context/), resources are encoded correctly.  Apparent cause: When fetching a root page ""http://app-server/context"" with a static resource ""/resources/foo.js"", ResourceUrlEncodingFilter.encodeUrl(String url) sets indexLookupPath to 0. This causes lookup paths to not strip out the URL prefix of ""/context"", and attempt to resolve paths in the form ""/context/resources/foo.js"" instead of the intended ""/resources/foo.js"". Such resources can't be found by ResourceUrlProvider (returns null).   ---  **Affects:** 4.1.8, 4.2.3  **Attachments:** - [ResourceUrlEncodingFilter.patch](https://jira.spring.io/secure/attachment/23238/ResourceUrlEncodingFilter.patch) (_950 bytes_) - [ResourceUrlEncodingFilterTests.patch](https://jira.spring.io/secure/attachment/23237/ResourceUrlEncodingFilterTests.patch) (_1.15 kB_)  **Backported to:** [4.1.9](https://github.com/spring-projects/spring-framework/milestone/133?closed=1)","closed","type: bug,","spring-projects-issues","2015-12-03T20:48:28Z","2015-12-17T09:05:32Z"
"","18300","CssLinkResourceTransformer is incompatible with FixedVersionStrategy VersionResourceResolver [SPR-13727]","**[Michael Russo](https://jira.spring.io/secure/ViewProfile.jspa?name=merusso)** opened **[SPR-13727](https://jira.spring.io/browse/SPR-13727?redirect=false)** and commented  When attempting to use Spring MVC 4.1's web static resource handling outlined in [this blog post](https://spring.io/blog/2014/07/24/spring-framework-4-1-handling-static-web-resources), and choosing to use the VersionResourceResolver's FixedVersionStrategy, the automatically-configured CssLinkResourceTransformer will corrupt relative path URLs in CSS resources.  A resource such as ""../images/logo.png"" will be converted to an incorrect URL ""\/../images/logo.png"".  A known workaround for this issue is to use the ContentVersionStrategy instead of FixedVersionStrategy.  ---  **Affects:** 4.1.8, 4.2.3  **Reference URL:** http://stackoverflow.com/questions/28875565/versionresourceresolver-breaks-css-relative-urls  **Issue Links:** - #19166 CssLinkResourceTransformer is incompatible with ContentVersionStrategy when using Caching - #18379 Improvement suggestions to the ResourceTransformerChain  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c22675398502e433dc0ea5382a927cec542840aa, https://github.com/spring-projects/spring-framework/commit/f53d01b00ae2ce1c59d07e24328ad05078404fb1  **Backported to:** [4.1.9](https://github.com/spring-projects/spring-framework/milestone/133?closed=1)  0 votes, 6 watchers","closed","type: bug,","spring-projects-issues","2015-11-26T00:18:45Z","2019-01-11T19:31:04Z"
"","18543","Update RestTemplate to respect @Order for ClientHttpRequestInterceptor [SPR-13971]","**[Michael Pratt](https://jira.spring.io/secure/ViewProfile.jspa?name=prattm@gmail.com)** opened **[SPR-13971](https://jira.spring.io/browse/SPR-13971?redirect=false)** and commented  It would be nice if the ClientHttpRequestInterceptor list inside RestTemplate would respect `@Order`. Right now my clients build their own TreeSet of interceptors using the AnnotationAwareOrderComparator to sort them, and then stream them to a list when all interceptors have been created. This is not very flexible and makes it difficult to add new interceptors on the fly in the proper order.  ---  **Affects:** 4.1.7  **Issue Links:** - #20685 InterceptingHttpAccessor.setInterceptors should support immutable lists  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f93cb2f539e9fa7b371dfec05a45c91b423d6a96","closed","type: enhancement,","spring-projects-issues","2016-02-22T20:25:17Z","2019-01-11T19:03:22Z"
"","18474","Add iterable JDBC template to process large amount of data [SPR-13900]","**[Michael Osipov](https://jira.spring.io/secure/ViewProfile.jspa?name=michael-o)** opened **[SPR-13900](https://jira.spring.io/browse/SPR-13900?redirect=false)** and commented  I have a usecase where I need to write a table with millions of rows to an output stream via HTTP. Those data cannot be reasonably fetched with the current `JdbcTemplate`. One would need an abstracted iterator which does all the nice stuff `JdbcTemplate` but does not spill memory.  Fortunately, there is [springjdbc-iterable](https://github.com/alexkasko/springjdbc-iterable) but the author is not maintaining it anymore. I have [requested](https://github.com/alexkasko/springjdbc-iterable/issues/2) to donate this code to Spring core to have this by default.  ---  **Affects:** 4.2.4  **Issue Links:** - #17262 Add Optional Support to JdbcTemplate - #20599 Customize PreparedStatementCreatorFactory in getPreparedStatementCreator  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2016-01-28T13:41:36Z","2020-05-19T12:09:14Z"
"","18167","Doc: MessageSourceAccessor applies message format to default message [SPR-13590]","**[Michael Osipov](https://jira.spring.io/secure/ViewProfile.jspa?name=michael-o)** opened **[SPR-13590](https://jira.spring.io/browse/SPR-13590?redirect=false)** and commented  Consider this code snippet:  ```java @ExceptionHandler(MethodArgumentTypeMismatchException.class) public ResponseEntity handleMethodArgumentTypeMismatchException(     MethodArgumentTypeMismatchException e) {   String message = messages.getMessage(       ""error.projects.invalid_parameter."" + e.getName() + "".type_mismatch"",       new Object[] { e.getValue(), e.getName() },       messages.getMessage(""error.projects.invalid_parameter.type_mismatch"", new Object[] {           e.getValue(), e.getName() }));    RestError error = new RestError(Reason.INVALID_PARAMETER, message;    return new ResponseEntity(error, HttpStatus.BAD_REQUEST); } ```  using the following signature:  ```java public String getMessage(String code, Object[] args, String defaultMessage) ```  Where bundle looks like  ``` error.projects.invalid_parameter.type_mismatch = Der \u00FCbergebene Wert ''{0}'' für Parameter ''{1}'' ist fehlerhaft/ung\u00FCltig ```  The default message shall provide a generic information if a parameter-specific message code is not available.  The expected behavior is:  ``` Der übergebene Wert 'dd' für Parameter 'omitEmptyResponse' ist fehlerhaft/ungültig ```  but the output is:  ``` Der übergebene Wert dd für Parameter omitEmptyResponse ist fehlerhaft/ungültig ```  The quotes are lost because the default message is passed through `MessageFormat`. This behavior is not documented. The signature says: `code` and `defaultMessage` and **not** `code` and `defaultCode`.  This is either bad documentation or bad implementation. I opt for the latter.  The outcome is that one needs to double-escape the quotes. Making them unusable for `code` but only for `defaultMessage`.   ---  **Affects:** 4.2.2","open","in: core,","spring-projects-issues","2015-10-20T12:01:38Z","2016-06-09T17:12:55Z"
"","18800","LoginUrlAuthenticationEntryPoint : redirectStrategy not configurable [SPR-14226]","**[Michael Feige](https://jira.spring.io/secure/ViewProfile.jspa?name=mezzomicks)** opened **[SPR-14226](https://jira.spring.io/browse/SPR-14226?redirect=false)** and commented  (first of... I didn't find a ""security"" component. I hope this is still the proper Issue-Tracker for spring-security-Bugs)  Hello,  I have a WebApplication, where I had to implement a custom redirectStrategy. (Reason is, that I want the redirects to be aware of the different context path that might result from a Apache-Tomcat-Proxy Scenario).  Unfortunately I found, that the redirectStrategy used in the LoginUrlAuthenticationEntryPoint is hard-wired to DefaulRedirectStrategy.  I think a public setter-Method, which would allow to override the default via Spring-XML-Config would be sufficient.  Regards, Michael  spring-security-web-version: 4.0.3 used in a spring-web-mvc-environment (4.2.3)   ---  **Affects:** 4.2.3","closed","status: invalid,","spring-projects-issues","2016-04-27T09:59:35Z","2019-01-12T05:22:53Z"
"","18784","ScriptTemplateView can't load web-app resources [SPR-14210]","**[Michael Feige](https://jira.spring.io/secure/ViewProfile.jspa?name=mezzomicks)** opened **[SPR-14210](https://jira.spring.io/browse/SPR-14210?redirect=false)** and commented  Hey there,  I found, that it's not possible to use the ScriptTemplateView in combination with JavaScripts (or resources in general) that only reside inside the ServleContexts Classloader.  I have following spring-mvc-setup:  ```xml                                                                                                                                                                                      WEB-INF/resources/js/vendor/doT.min.js                 WEB-INF/resources/js/java-bridge-dot.js                              ```  My Controller has this method:  ```Java @RequestMapping(""/hello/dot"") public String plainHello(Model model) {     model.addAttribute(""content"", ""Hello Dot!"");     return ""test.dot""; } ```  Now this should result in the ScriptTemplateView using the Scripts (provided by the config in the ScriptTemplateConfigurer) and rendering the output using the dot.js - Templating Engine.  But the ScriptTemplateView and its ResourceLoader are not able to load the resources that reside inside the webapp-context.  The GitHub-Repo I provided with the Reference URL shows the case reproducable in its master-branch and a possible solution (having a Patched copy of the ScriptTemplateView) which shows that the usage of the current ServletContext could solve the problem.  See: de.deyovi.spring.web.scriptbug.PatchedScriptTemplateView:226  ```Java +		if (this.resourceLoader == null) { +			// In case of an WebApplication +			if (context instanceof WebApplicationContext) { +				// .. we choose a ServletContext-aware ResourceLoader to allow access to all resources in the web-applications-context +				this.resourceLoader = new ServletContextResourceLoader(((WebApplicationContext) context).getServletContext()); +			} else { +				// otherwise we fallback to the default behaviour which handles classpath-resources +				this.resourceLoader = new DefaultResourceLoader(createClassLoader()); +			} +		} ```  Or is it so that I am missing something very important while configuring my ScriptTemplateViewResolver?  Regards, Michael   ---  **Affects:** 4.2.3  **Reference URL:** https://github.com/MichiShyGuy/spring-script-bug-example.git  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/15138ed96f0ae00b919e2effd2c852cbb201f9ee","closed","type: enhancement,","spring-projects-issues","2016-04-23T08:16:47Z","2016-05-06T13:55:29Z"
"","18644","Add setMultiTenantConnectionProvider to org.springframework.orm.hibernate5.LocalSessionFactoryBean [SPR-14072]","**[Menachem Rath](https://jira.spring.io/secure/ViewProfile.jspa?name=rath)** opened **[SPR-14072](https://jira.spring.io/browse/SPR-14072?redirect=false)** and commented  #15449 added the methods setMultiTenantConnectionProvider and setCurrentTenantIdentifierResolver methods to LocalSessionFactoryBean in org.springframework.orm.hibernate4  In org.springframework.orm.hibernate5.LocalSessionFactoryBean only the setCurrentTenantIdentifierResolver exists, and it doesn't appear t be working.  Looking at the Hibernate documentation for: * version 4 - http://docs.jboss.org/hibernate/orm/4.3/devguide/en-US/html_single/#d5e4817 * version 5 - http://docs.jboss.org/hibernate/orm/5.1/userguide/html_single/Hibernate_User_Guide.html#_multitenantconnectionprovider  I don't see a difference in the behavior of multi tenant.  ---  **Affects:** 4.2.5  **Reference URL:** http://docs.jboss.org/hibernate/orm/5.1/userguide/html_single/Hibernate_User_Guide.html#_multitenantconnectionprovider  **Issue Links:** - #18452 LocalSessionFactoryBean (hibernate5) does not correctly pass custom ClassLoader to Hibernate - #15449 Hibernate 4 Multi Tenancy Feature Support - #18285 Hibernate5 metadata access - #19045 Workaround for Hibernate bug: setCurrentTenantIdentifierResolver not respected  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5f6406430f76bc4d75cdfadfe8431a26875b7558","closed","type: enhancement,","spring-projects-issues","2016-03-19T06:09:15Z","2019-01-11T14:40:53Z"
"","18413","@Async ignored if service is injected into AsyncConfigurerSupport [SPR-13840]","**[member sound](https://jira.spring.io/secure/ViewProfile.jspa?name=membersound)** opened **[SPR-13840](https://jira.spring.io/browse/SPR-13840?redirect=false)** and commented  I have the following service that works fine and is running async if invoked:  ``` @Service @Async public class AsyncTestService { 	public void test() { 		System.out.println(new Date());  		try { 			TimeUnit.SECONDS.sleep(3); 		} catch (InterruptedException e) { 			// TODO Auto-generated catch block 			e.printStackTrace(); 		}  		System.out.println(new Date()); 	} } ```  BUT: I want to reuse exactly this service within AsyncConfigurerSupport. Problem: as soon as I inject it there, the `@Async` annotation does not work anymore anywhere(!) within the application. Any calls to that service are thereby running in sync!  ``` @Component public class AsyncErrorHandler extends AsyncConfigurerSupport { 	@Autowired 	private AsyncTestService service; } ```  Note that I just injected there service into the AsyncConfigurerSupport, not other actions are taken. Anyways this destroys the `@Async` mechanism somehow.   ---  **Affects:** 4.2.4","closed","status: bulk-closed,","spring-projects-issues","2016-01-05T14:55:59Z","2019-01-12T02:44:27Z"
"","18331","Support store-by-value in ConcurrentMapCacheManager [SPR-13758]","**[member sound](https://jira.spring.io/secure/ViewProfile.jspa?name=membersound)** opened **[SPR-13758](https://jira.spring.io/browse/SPR-13758?redirect=false)** and commented  If you run the following code, the `@Cachable` method will not always return the same results (but it should).  ``` @RestController  @RequestMapping(""/rest"") public class TestRunner { 	@Autowired 	private TestController controller; 	 	@ResponseStatus(HttpStatus.OK) 	@RequestMapping(value = ""/test"", method = RequestMethod.GET)         @PostConstruct 	public void testCaching() { 		controller.test(); 		controller.test(); 	} } ```  ``` public class TestService { 	@Cacheable(""test"") 	public Set get() { 		Set set = new HashSet<>(); 		set.add(""ASD""); 		set.add(""123""); 		return set; 	} } ```  ``` @Controller public class TestController { 	@Autowired 	private TestService testService;  	public void test() { 		Set list = testService.get(); 		Assert.assertEquals(2, list.size()); //fails when run the 2nd time with: junit.framework.AssertionFailedError: expected:<2> but was:<1>  		Iterator it = list.iterator(); 		it.next(); 		it.remove(); //removes the first item 	} } ```  ``` @Bean  public CacheManager cacheManager() {       return new ConcurrentMapCacheManager();  } ```  Steps to reproduce the error: run http://localhost:8080/rest/test  I noticed that if I use a `@PostConstruct` method running the controller.test() method twice, this would not cause the error. So the application starts up fine, but invoking the servlet explicit triggers the failure.  ---  **Affects:** 4.2.3  **Issue Links:** - #18886 ConcurrentMapCacheManager's storeByValue does not pick up ClassLoader  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cf20308134e8e3dc098ba7f8dc8f26a202268d72, https://github.com/spring-projects/spring-framework/commit/019498842597acb47cbc764ce173a5ba0729e5bd","closed","type: enhancement,","spring-projects-issues","2015-12-04T08:59:01Z","2019-01-11T19:29:02Z"
"","18320","The URL content negotiation ""format"" parameter values are case sensitive and only lowercase values are accepted [SPR-13747]","**[Melissa Hartsock](https://jira.spring.io/secure/ViewProfile.jspa?name=mhartsock)** opened **[SPR-13747](https://jira.spring.io/browse/SPR-13747?redirect=false)** and commented  The URL content negotiation ""format"" parameter values are case sensitive and only lowercase values are accepted. URL query parameter format=json returns the appropriate json response but format=JSON results in a HttpMediaTypeNotAcceptableException and returns:  406 - The resource identified by this request is only capable of generating responses with characteristics not acceptable according to the request ""accept"" headers.  The same happens with xml vs XML or any other format value that is not lowercase.  The value of the format parameter should be case insensitive especially because the type and subtype of MediaType parameters [should always be case-insensitive](http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.7).  **Cause:**  Configuration:  ContentNegotiationConfigurer is configured with favorParameter = true and the following media type mappings are provided: mediaType(""json"", MediaType.APPLICATION_JSON) mediaType(""xml"", MediaType.APPLICATION_XML)  or  mediaType(""JSON"", MediaType.APPLICATION_JSON) mediaType(""XML"", MediaType.APPLICATION_XML)  Result:  When the MappingMediaTypeFileExtensionResolver is constructed, it is passed a map containing the media type key to MediaType mappings defined above. In the constructor of MappingMediaTypeFileExtensionResolver, the key is [converted to lowercase](https://github.com/spring-projects/spring-framework/blob/0d2aa51576d150ec95a81573e3b84d641366e214/spring-web/src/main/java/org/springframework/web/accept/MappingMediaTypeFileExtensionResolver.java#L56) and the mapping of key to MediaType is added to the ConcurrentMap mediaTypes using the lowercase version of the key.  However, when retrieving the MediaType from a key in the lookupMediaType method, [no conversion to lowercase is performed](https://github.com/spring-projects/spring-framework/blob/0d2aa51576d150ec95a81573e3b84d641366e214/spring-web/src/main/java/org/springframework/web/accept/MappingMediaTypeFileExtensionResolver.java#L88) so any value for the URL ""format"" parameter other than the lowercase version will not return the proper MediaType result.  On May 1st, 2014, a change was made to ParameterContentNegotiationStrategy to handle cases where the content negotiation format URL parameter does not result in a match for a MediaType. If no match is found, a [HttpMediaTypeNotAcceptableException is thrown](https://github.com/spring-projects/spring-framework/commit/0d2aa51576d150ec95a81573e3b84d641366e214#diff-3b1565fcf3216d0eef0a66c890f0dbcaR74) resulting in the 406 response above. Prior to this commit, a null was returned instead of throwing an exception so this issue was hidden and appeared to function correctly.  Setting ignoreUnknownPathExtensions = true on the ContentNegotiationConfigurer will result in the same handling as prior to the May 1st, 2014 commit but it does not solve the real issue.  **Solution:**  Simply add a line to the lookupMediaType method to first convert the extension (media type key) to lowercase prior to attempting to retrieve it from the media type map:  ```java protected MediaType lookupMediaType(String extension) { 	extension = extension.toLowerCase(Locale.ENGLISH); 	return this.mediaTypes.get(extension); } ```    ---  **Affects:** 4.1.8, 4.2.1, 4.2.2, 4.2.3  **Backported to:** [4.1.9](https://github.com/spring-projects/spring-framework/milestone/133?closed=1)","closed","type: bug,","spring-projects-issues","2015-12-01T16:41:10Z","2015-12-17T09:05:31Z"
"","18659","Doc: Different behavior for @Named and @Component [SPR-14087]","**[MD Sayem Ahmed](https://jira.spring.io/secure/ViewProfile.jspa?name=sayembd)** opened **[SPR-14087](https://jira.spring.io/browse/SPR-14087?redirect=false)** and commented  I am trying to understand the differences between these two annotations and how they affect injection in Spring. Consider the following piece of code -  ```java @Target({ElementType.TYPE}) @Retention(RetentionPolicy.RUNTIME) @Documented @Component public @interface ExternalPropertiesHolder {} ```  When I mark a class with this annotation -  ```java @ExternalPropertiesHolder public class SomeProperties {} ```  and then this dependency is injected using `@Inject`, it works perfectly -  ```java @Service public class SomeService {     private SomeProperties someProperties;      @Inject     public SomeService(SomeProperties someProperties) {         this.someProperties = someProperties;     } } ```  However, when I replace `@Component` with `@Named` -  ```java @Target({ElementType.TYPE}) @Retention(RetentionPolicy.RUNTIME) @Documented @Named           // --> Here! public @interface ExternalPropertiesHolder {} ```  Then the injection fails with the usual bean not found exception -  > Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [com.hogehoge.SomeProperties] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {}  Shouldn't they behave the same way?  I am using Spring Boot 1.3.3.RELEASE version, and using JDK 8 to compile my application.   ---  **Reference URL:** http://stackoverflow.com/questions/36203489/spring-differences-between-named-and-component  **Backported to:** [4.2.7](https://github.com/spring-projects/spring-framework/milestone/144?closed=1)","closed","in: core,","spring-projects-issues","2016-03-24T15:49:50Z","2016-06-10T09:19:12Z"
"","18516","Mis-typed URL should give 404 not 405 [SPR-13944]","**[Matthew Pearson](https://jira.spring.io/secure/ViewProfile.jspa?name=electrical.specimen)** opened **[SPR-13944](https://jira.spring.io/browse/SPR-13944?redirect=false)** and commented  When a request is made to a URL with a typo in it, Spring returns a `404 Not Found` for `GET` and `HEAD`, a `200 OK` for `OPTIONS`, and a `405 Method Not Supported` for the other HTTP methods. I've tried to find specifications for what the response codes should be in this situation, but it's not clear to me. However, I think that returning a 404 in all cases would be most useful.  e.g. This Spring Boot application shows the different responses for requests to a mis-typed URL (_greetings_ instead of _greeting_).  ``` @RestController @SpringBootApplication public class Application {      private static Logger log = LoggerFactory.getLogger(Application.class);      public static void main(String[] args) {         SpringApplication.run(Application.class, args);          RestTemplate restTemplate = new RestTemplate();         String badUrl = ""http://localhost:8080/greetings"";         for (HttpMethod httpMethod : HttpMethod.values()) {             try {                 restTemplate.execute(badUrl, httpMethod, null, null);             } catch (Exception e) {                 log.error(""Failed to "" + httpMethod + "" -- "" + e.getMessage());             }         }     }      @RequestMapping(""/greeting"")     public String greeting() {         return ""hello"";     } } ```  The logged output is:  > Failed to GET -- 404 Not Found > Failed to HEAD -- 404 Not Found > Failed to POST -- 405 Method Not Allowed > Failed to PUT -- 405 Method Not Allowed > Failed to PATCH -- I/O error on PATCH request for ""http://localhost:8080/greetings"": Invalid HTTP method: PATCH; nested exception is java.net.ProtocolException: Invalid HTTP method: PATCH > Failed to DELETE -- 405 Method Not Allowed > OPTIONS request for ""http://localhost:8080/greetings"" resulted in 200 (OK) > Failed to TRACE -- 405 Method Not Allowed  ---  **Affects:** 4.2.4  **Reference URL:** http://stackoverflow.com/questions/35387209/which-status-to-return-for-request-to-invalid-url-for-different-http-methods  **Issue Links:** - #17721 Spring should have default support for OPTIONS, HEAD and Allow  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/cdba5898aee2e37e4bd4f967eb08b1e28c470a4c, https://github.com/spring-projects/spring-framework-issues/commit/a1360608adde4867306e55caf6558a3e39abcf37","closed","type: enhancement,","spring-projects-issues","2016-02-14T10:10:39Z","2019-01-14T04:40:22Z"
"","18375","java.lang.NullPointerException at org.springframework.test.web.servlet.result.MockMvcResultHandlers.(MockM‌​vcResultHandlers.java:44) [SPR-13802]","**[Matthew D'Andrea](https://jira.spring.io/secure/ViewProfile.jspa?name=m.dandrea@rogers.com)** opened **[SPR-13802](https://jira.spring.io/browse/SPR-13802?redirect=false)** and commented  java.lang.NullPointerException at org.springframework.test.web.servlet.result.MockMvcResultHandlers.\(MockM‌​vcResultHandlers.java:44)  is thrown when making use of MockMvcResultHandlers.print() in one of my JUnit 4.11 tests.  Line 44 of MockM‌​vcResultHandlers looks like this: private static final Log logger = LogFactory.getLog(MockMvcResultHandlers.class.getPackage().getName());  I've confirmed that it is the getPackage() call that is returning null.  From what I've read, it might be due to how the class loading works with the maven-surefire-plugin when a forkCount of 0.  Unfortunately, I can't update to 1 to verify if that will help getPackage() not return null.   ---  **Affects:** 4.2.3  **Reference URL:** http://stackoverflow.com/questions/34316917/spring-4-2-java-lang-noclassdeffounderror-could-not-initialize-class-org-sprin/34318307#34318307  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/935c0a463e918ff42f1ba8a83efc0b099717a309","closed","type: bug,","spring-projects-issues","2015-12-16T19:49:02Z","2015-12-17T09:33:55Z"
"","18690","ListableBeanFactory#getBeanNamesForType(ResolvableType) fails to return generic @Bean methods [SPR-14118]","**[Matt Benson](https://jira.spring.io/secure/ViewProfile.jspa?name=mbenson)** opened **[SPR-14118](https://jira.spring.io/browse/SPR-14118?redirect=false)** and commented  My branch includes:  > testcases and (possibly naive) implementation as a starting point to discuss the shortcomings of ListableBeanFactory#getBeanNamesForType(ResolvableType) with regard to `@Bean` methods and ResolvableType arguments that represent parameterized types  ---  **Affects:** 4.2.5  **Reference URL:** https://github.com/mbenson/spring-framework/tree/beanMethodsOfType  **Issue Links:** - #19578 getBeanNamesForType(ResolvableType) doesn't match generic factory method return type for yet-to-be-created bean (_**""duplicates""**_) - #18669 getBeanNamesForType(ResolvableType) does not reliably work for beans with AOP proxies  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2016-04-05T17:08:20Z","2019-01-11T16:41:45Z"
"","18646","documentation : SpEL / Expression support for defining bean definitions / XML based configuration (9.4.1) [SPR-14074]","**[Mathieu Stempell](https://jira.spring.io/secure/ViewProfile.jspa?name=mstempell)** opened **[SPR-14074](https://jira.spring.io/browse/SPR-14074?redirect=false)** and commented  The last two examples in this chapter miss the '#' SpEL prefix character :  ```java                            ```    ---  **Affects:** 4.2.5  **Reference URL:** http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#expressions-beandef-xml-based  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2a715e9c613a116b144338d69829d8c147a771ed, https://github.com/spring-projects/spring-framework/commit/0c8a40bdbc6d6e25adefbbce873550d3b6f953b8","closed","type: documentation,","spring-projects-issues","2016-03-21T10:12:33Z","2016-04-06T08:38:16Z"
"","18522","Prevent accessing the session in ServletRequestAttributes.updateAccessedSessionAttributes() if no session attributes need to be updated [SPR-13950]","**[Mathieu Lachance](https://jira.spring.io/secure/ViewProfile.jspa?name=matlach)** opened **[SPR-13950](https://jira.spring.io/browse/SPR-13950?redirect=false)** and commented  Hi,  we are currently using Wildfly with pessimistic web cache and we are running into contention issue in ServletRequestAttributes.updateAccessedSessionAttributes() due to the session access attempt:  ``` this.session = this.request.getSession(false); ```  Could we add a simple guard to make sure we do not try to access the session if there's nothing in the sessionAttributesToUpdate map? i.e.:  ``` 	/** 	 * Update all accessed session attributes through {@code session.setAttribute} 	 * calls, explicitly indicating to the container that they might have been modified. 	 */ 	@Override 	protected void updateAccessedSessionAttributes() {                 // proposed improvement request: skip if nothing has changed                 if (this.sessionAttributesToUpdate.isEmpty()) {                     // nothing to do                     return;                 }  		// Store session reference for access after request completion. 		this.session = this.request.getSession(false); 		// Update all affected session attributes. 		if (this.session != null) { 			try { 				for (Map.Entry entry : this.sessionAttributesToUpdate.entrySet()) { 					String name = entry.getKey(); 					Object newValue = entry.getValue(); 					Object oldValue = this.session.getAttribute(name); 					if (oldValue == newValue && !isImmutableSessionAttribute(name, newValue)) { 						this.session.setAttribute(name, newValue); 					} 				} 			} 			catch (IllegalStateException ex) { 				// Session invalidated - shouldn't usually happen. 			} 		} 		this.sessionAttributesToUpdate.clear(); 	} ```  Let me know if I'm missing something.  Thanks,   ---  **Affects:** 4.2.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8495fcf10921e2f40675b1065964750f9b00232e","closed","type: enhancement,","spring-projects-issues","2016-02-16T20:35:01Z","2016-04-06T08:38:15Z"
"","18281","Prevent Quartz XSD from being fetched from the Internet [SPR-13706]","**[Mathieu Lachance](https://jira.spring.io/secure/ViewProfile.jspa?name=matlach)** opened **[SPR-13706](https://jira.spring.io/browse/SPR-13706?redirect=false)** and commented  Quartz offer classloading spi through the org.quartz.spi.ClassLoadHelper interface.  Spring implements ClassLoadHelper in the ResourceLoaderClassLoadHelper which is use as the default Quartz value for 'org.quartz.scheduler.classLoadHelper.class'.  When I'm  deploying my application inside JBoss EAP 6.1 and/or Wildfly 8.2.1.Final, the ""job_scheduling_data_2_0.xsd"" is getting hit from the Internet because it failed to fetch it properly from the classpath.  XMLSchedulingDataProcessorPlugin::processFile(JobFile) -> XMLSchedulingDataProcessor(classLoadHelper) -> resolveSchemaSource()  ``` try {     is = classLoadHelper.getResourceAsStream(QUARTZ_XSD_PATH_IN_JAR); }  finally {     if (is != null) {         inputSource = new InputSource(is);         inputSource.setSystemId(QUARTZ_SCHEMA_WEB_URL);         log.debug(""Utilizing schema packaged in local quartz distribution jar."");     }     else {         log.info(""Unable to load local schema packaged in quartz distribution jar. Utilizing schema online at "" + QUARTZ_SCHEMA_WEB_URL);         return QUARTZ_SCHEMA_WEB_URL;     }         } ```  by enabling the org.quartz.xml.XMLSchedulingDataProcessor logger you'll see that inside a container the ""Unable to load local schema packaged in quartz distribution jar"" trace will appear. This is especially problematic in production environment where generally machines do not have access to the Internet and/or a very limitated access for security reasons.  Here's our temporary workaround which involve of prefixing ""classpath:"" to any XSD resource:  ``` public class ResourceLoaderHelper extends ResourceLoaderClassLoadHelper {      private static final String XSD_FILE_EXTENSION = "".xsd"";      @Override     public URL getResource(String name) {         if (name != null && name.endsWith(XSD_FILE_EXTENSION) && !name.startsWith(CLASSPATH_URL_PREFIX)) {             return super.getResource(CLASSPATH_URL_PREFIX.concat(name));         } else {             return super.getResource(name);         }     }      @Override     public InputStream getResourceAsStream(String name) {         if (name != null && name.endsWith(XSD_FILE_EXTENSION) && !name.startsWith(CLASSPATH_URL_PREFIX)) {             return super.getResourceAsStream(CLASSPATH_URL_PREFIX.concat(name));         } else {             return super.getResourceAsStream(name);         }     } } ```  This workaround always retreive the XSD resource properly from the classpath. This work, though, this is definitely ugly.  I would suggest instead of our ugly workaround to simply change the Spring implementation to: 1. check if the resource is found using the original location 2. if not, prefix ""classpath:"" to the original location, and check again 3. if it is yet not found, just return null and fail with the current behavior.  Let me know if I've miss something.  Thanks,   ---  **Affects:** 3.2.16, 4.2.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/51f356f5184893182c228d03251822d519dcc636, https://github.com/spring-projects/spring-framework/commit/7c998a70bcfe0a0ee45b2abd6cb025f1f99a1e0f, https://github.com/spring-projects/spring-framework/commit/6db6f23a04a7c264412411f257070d6be821b8f2  **Backported to:** [3.2.17](https://github.com/spring-projects/spring-framework/milestone/105?closed=1)","closed","type: enhancement,","spring-projects-issues","2015-11-19T16:24:47Z","2016-04-06T08:38:13Z"
"","18268","RedirectView should allow for bypassing HttpServletResponse#encodeRedirectURL [SPR-13693]","**[Marvin S. Addison](https://jira.spring.io/secure/ViewProfile.jspa?name=s3rac)** opened **[SPR-13693](https://jira.spring.io/browse/SPR-13693?redirect=false)** and commented  RedirectView presently calls `HttpServletResponse#.encodeRedirectURL(targetUrl)` unconditionally, which has the effect of appending "";jsessionid"" path fragments to the redirect URL unexpectedly in some cases. While that is fine for (context) relative URLs, for absolute URLs the programmer typically intends to redirect to a foreign system that is not likely to understand the decorated URL. I believe it's most correct to add some conditional logic to detect an absolute URL and avoid the call to `encodeRedirectURL` in that case.  One could argue that the servlet container ought to provide this kind of conditional logic; however, it's been my observation that not all platforms do the right thing.   ---  **Affects:** 4.2.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c45ad3022b1e7d6574b79a734d19355be0d1b596  1 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2015-11-16T17:31:50Z","2016-04-06T08:38:13Z"
"","18327","RestTemplate /MappingJackson2HttpMessageConverter should use the context provided ObjectMapper by default [SPR-13754]","**[Marty Pitt](https://jira.spring.io/secure/ViewProfile.jspa?name=martypitt@gmail.com)** opened **[SPR-13754](https://jira.spring.io/browse/SPR-13754?redirect=false)** and commented  Currently, MappingJackson2HttpMessageConverter's default behaviour is to instantiate it's own ObjectMapper, rather than use the one already present in the Spring Context.  As a result, if I have registered custom modules with the ObjectMapper, I need to reconfigure the RestTemplate, adding a MappingJackson2HttpMessageConverter that's wired the the standard ObjectMapper.  This is not initially obvious (since the defacto behaviour in Spring is to use the context-wide ObjectMapper).  Additionally, there is currently code trying to be helpful, by discovering 'well-known' Jackson modules on the classpath, and registering them for me.  This wasn't helpful, and just lead to more confusion, trying to understand why some modules I added worked with a RestTemplate, but others didn't.  Instead, the RestTemplate should discover the context-wide ObjectMapper, and use that.   ---  **Affects:** 4.2.3","closed","type: enhancement,","spring-projects-issues","2015-12-02T10:15:11Z","2016-02-05T17:12:13Z"
"","18422","MultipartFile argument requires multipart request even when optional (and empty) [SPR-13849]","**[Martin Sivák](https://jira.spring.io/secure/ViewProfile.jspa?name=marsik)** opened **[SPR-13849](https://jira.spring.io/browse/SPR-13849?redirect=false)** and commented  The method argument resolver fails with  org.springframework.web.multipart.MultipartException: The current request is not a multipart request when an optional MultipartFile argument is present in the request handler method during a plain POST request with no files included.  I would expect that multipart request is enforced when files are present, but not necessary when there are no files and the file argument is marked as optional.  {{ `@RequestMapping`(method = RequestMethod.POST) `@ResponseStatus`(HttpStatus.OK) public ResponseEntity\ upload(`@CurrentUser` User currentUser, `@RequestParam`(value = ""file"", required = false) MultipartFile file, `@RequestParam`(""entity"") `@Valid` DocumentApiModel entity) throws IOException, BaseRestException { }}  It seems that this can be ""trivially"" fixed in org.springframework.web.method.annotation.RequestParamMethodArgumentResolver.resolveName(RequestParamMethodArgumentResolver.java:167) by checking the optional attribute and the provided value.  ---  **Affects:** 4.2.1  **Issue Links:** - #15220 Spring's support for javax.servlet.http.Part vs. MultipartFile incomplete, inconsistent - #17245 Support for java.util.Optional as a `@RequestPart` - #17997 Request parameters cannot bind to Optional> - #18467 Part list/array gets resolved to all parts in current request - #18423 RequestPartMethodArgumentResolver should defensively handle MethodParameter nesting level and java.util.Optional access - #21938 Allow binding all MultipartFile instances as handler method argument  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b4f33adf48caa033dff85af1db92b56e60c9bcee","closed","type: enhancement,","spring-projects-issues","2016-01-07T10:13:21Z","2019-01-13T05:32:17Z"
"","18655","spring-test should handle @Mock [SPR-14083]","**[Martin Meyer](https://jira.spring.io/secure/ViewProfile.jspa?name=elreydetodo)** opened **[SPR-14083](https://jira.spring.io/browse/SPR-14083?redirect=false)** and commented  If I have a Transaction Manager running in unit tests, it becomes impossible for Mockito to properly initialize and inject mocks. This problem seems to be related to usage of proxy classes, not specific to using a transaction manager.  Here's a basic example of a test class:  ```java @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(classes = {EnableTransactionManager.class}) public class SomeTest {     @Mock     private MockBean someMockedBean;      @Autowired     @InjectMocks     private RealBean someRealBean;      @Before     public void before() {         MockitoAnnotations.initMocks(this);     }      @Test     public void someTest() {         someRealBean.doSomething();     } } ```  What I see in the debugger is that on the `someRealBean.doSomething()` line, `someRealBean` contains a mock reference to my `MockBean` instance. But when I set the next breakpoint within `RealBean#doSomething()` and go there, the local field within the object is not a mock one, it's a real `@Autowire`'d bean.  In real terms, the impact on me is that tests fail whenever I try to implement a TransactionManager and have it configured during tests. I end up trying to call DAO methods that should have been mocked, and it tries to issue database calls on a DataSource that isn't really ready to service them.  I think the problem is a race between Mockito and Spring to performing their setup. I think the solution is for `SpringJUnit4ClassRunner` to automagically call the equivalent of `MockitoAnnotations.initMocks(this)` if `org.mockito.Mockito` is in the classpath. This would mean adding an optional dependency on Mockito.  There was [an issue opened against Mockito for this](https://github.com/mockito/mockito/issues/209), which was closed as WONTFIX. They suggested that it be fixed in Spring instead of bringing in a Spring dependency there.  The obvious workaround here is to not enable anything that will do AOP proxying during your unit tests.   ---  **Affects:** 4.2.5","open","status: feedback-provided,","spring-projects-issues","2016-03-23T16:44:54Z","2020-02-20T21:33:27Z"
"","18748","HtmlUnitRequestBuilder should decode request parameter names [SPR-14177]","**[Martin Mahr](https://jira.spring.io/secure/ViewProfile.jspa?name=mahr.martin)** opened **[SPR-14177](https://jira.spring.io/browse/SPR-14177?redirect=false)** and commented  Request parameter name isn't decoded in method `HtmlUnitRequestBuilder.params`, but it should be.  Current implementation cannot handle URLs like:  ``` http://server.cz/search?row[0]=foo&row[1]=bar ```  because it's encoded like:  ``` http://server.cz/search?row%5B0%5D=foo&row%5B1%5D=bar ```  and `HtmlUnitRequestBuilder` leaves it as it is. The parameters then aren't mapped to `@RequestParams` or `@ModelAttribute` because of encoded special characters.   ---  **Affects:** 4.2.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/87ed8e939c754f8dd9cc0b08eb0e959892acfe10, https://github.com/spring-projects/spring-framework/commit/6500018730c0df12eb34bef54baa5a91372adf91","closed","type: bug,","spring-projects-issues","2016-04-15T08:50:52Z","2016-07-02T11:31:54Z"
"","18695","Re-introduce deprecated addConstructorArg method (again) [SPR-14123]","**[Martin Lippert](https://jira.spring.io/secure/ViewProfile.jspa?name=mlippert)** opened **[SPR-14123](https://jira.spring.io/browse/SPR-14123?redirect=false)** and commented  class: BeanDefinitionBuilder method: addConstructorArg(Object value)  This method got removed a while ago. But it caused some incompatibilities with older handler implementations (and older Spring Security versions). Therefore it got re-introduced in this commit:  https://github.com/spring-projects/spring-framework/commit/1e64eed6b29b0e997e14d398ac18b73195e9a2eb  Unfortunately this method got removed again in this commit:  https://github.com/spring-projects/spring-framework/commit/9ac02b319d2fde39b5bb1cf11b5525b4f55cd198  and it seems to cause some issues for people (in Spring IDE when using older library versions of Spring Security, in this case, mentioned in the reference URL).  So it would be great if this method could be re-re-introduced back into the code base.  ---  **Affects:** 4.2.5, 4.3 RC1  **Reference URL:** https://issuetracker.springsource.com/browse/STS-4339  **Issue Links:** - #17179 Remove pre-3.2 deprecated classes and methods - #18700 Deprecate MultiActionController and Controller*NameHandlerMapping  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4ea4257e3cc3f014439ef89bd16bc14b24f1fda3, https://github.com/spring-projects/spring-framework/commit/7659101843e6d08e5c67663dc4eacfadc8337f24","closed","type: task,","spring-projects-issues","2016-04-06T10:09:12Z","2019-01-11T16:40:38Z"
"","18457","AnnotationAwareOrderComparator getPriority does not work if bean is a proxy [SPR-13884]","**[Martin Frey](https://jira.spring.io/secure/ViewProfile.jspa?name=mfrey)** opened **[SPR-13884](https://jira.spring.io/browse/SPR-13884?redirect=false)** and commented  Identified a bug in the `AnnotationAwareOrderComparator` during investigating a `NonUniqueBeanException` with beans using the `@Order` / `@Priority` annotation.  First finding = bug: The method `AnnotationAwareOrderComparator.getPriority` calls directly `getClass()` on the given beanInstance. This leads to no priority at all as the Proxy class (JdkProxy)  does not contain the annotation. The fix seems reasonably easy: Just use the `AopUtils.getTargetClass(beanInstance)` instead of `getClass()`.  ```java AnnotationAwareOrderComparator      public Integer getPriority(Object obj) {         if (obj instanceof Class) {             return OrderUtils.getPriority((Class) obj);         } else if (obj != null) {             return OrderUtils.getPriority(AopUtils.getTargetClass(obj));         }         return null;     } ```  Second finding = just to clarify: Not sure if both `@Order` and `@Priority` should be supported by this? Currently only `@Priority` or `@Primary` seems to be used to identify autowire candidates via the `DefaultListableBeanFactory.determineAutowireCandidate`. Is this the desired behavior or should also the `@Order` annotation be considered here? As far as i remember `@Priority` was first introduced to support `@Order` with the standard API, and later also used to identify Primary candidates?  ---  **Affects:** 4.2.3  **Issue Links:** - #18563 DefaultAdvisorAutoProxyCreator doesn't get the target class of existing proxy - #19388 GenericConversionService.addConverter should be able to determine generic types from target class behind proxy  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6e3fac85f3e2dca255abbac6d578189e331fac10","closed","type: enhancement,","spring-projects-issues","2016-01-25T08:36:05Z","2019-01-11T18:27:09Z"
"","18440","ResponseEntity CacheControl ignored / extended by RequestMappingHandlerAdapter [SPR-13867]","**[Martin Frey](https://jira.spring.io/secure/ViewProfile.jspa?name=mfrey)** opened **[SPR-13867](https://jira.spring.io/browse/SPR-13867?redirect=false)** and commented  Hi I think there might a bug with some new implementation inside RequestMappingHandlerAdapter resulting in no-cache, no-store headers even when using an explicit ResponseEntity.  Controller  ```java @RequestMapping(value = ""/somejson"", produces = MediaType.APPLICATION_JSON_VALUE) @ResponseBody public ResponseEntity getCurrent() {     TopLevel t = new TopLevel();     return ResponseEntity.ok().cacheControl(CacheControl.maxAge(6000, TimeUnit.SECONDS)).body(body); } ```  Resulting in this header  ``` Cache-Control=no-cache, no-store, max-age=0, must-revalidate, max-age=6000 ```  I would expect that this code inside the **RequestMappingHandlerAdapter** should not be called in such a case when a ResponseEntity is the outcome of a RequestMapping  ```java @Override protected ModelAndView handleInternal(HttpServletRequest request, 			HttpServletResponse response, HandlerMethod handlerMethod) throws Exception {  	checkRequest(request);  	if (getSessionAttributesHandler(handlerMethod).hasSessionAttributes()) { 		applyCacheSeconds(response, this.cacheSecondsForSessionAttributeHandlers); 	} 	else { 		prepareResponse(response); 	} 	. 	. 	. }  FROM WebContentGenerator /**  * Prepare the given response according to the settings of this generator.  * Applies the number of cache seconds specified for this generator.  * @param response current HTTP response  * @since 4.2  */ protected final void prepareResponse(HttpServletResponse response) { 	if (this.cacheControl != null) { 		applyCacheControl(response, this.cacheControl); 	} 	else { 		applyCacheSeconds(response, this.cacheSeconds); 	} } ```  ---  **Affects:** 4.2.3  **Issue Links:** - #18572 Regression: RequestMappingHandlerAdapter with synchronizeOnSession=true calls invokeHandlerMethod twice - #18577 Regression: ResourceHandlerRegistration setCachePeriod doesn't set the correct response header anymore  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0ef90df1204069edb5f39b9707fb81231ff86495, https://github.com/spring-projects/spring-framework/commit/50bcd67fb639dfb10443c316c1377550f74f8cba, https://github.com/spring-projects/spring-framework/commit/fc34b0c5926a40d2529b8cb4e0fd8f7b1b61a01b, https://github.com/spring-projects/spring-framework/commit/8f1d06f19c41600cf70c8ccfab5c31b15be5d12c","closed","type: bug,","spring-projects-issues","2016-01-13T11:44:56Z","2019-01-11T18:29:30Z"
"","18831","Spring getting started guides have empty ""what you'll need"" sections [SPR-14259]","**[Martin Fredriksson](https://jira.spring.io/secure/ViewProfile.jspa?name=mogf01)** opened **[SPR-14259](https://jira.spring.io/browse/SPR-14259?redirect=false)** and commented  A number of the getting started guides have empty ""what you'll need"" sections. I checked quickly on github and information seems to be there, so perhaps it is an issue with building web pages?   ---  **Affects:** 4.2.6  **Reference URL:** http://spring.io/guides","closed","status: invalid,","spring-projects-issues","2016-05-07T23:33:26Z","2019-01-12T05:22:51Z"
"","18458","Incorrect scheduled task behavior when using sleep/hibernate [SPR-13885]","**[Martin Formanko](https://jira.spring.io/secure/ViewProfile.jspa?name=martin.formanko@gmail.com)** opened **[SPR-13885](https://jira.spring.io/browse/SPR-13885?redirect=false)** and commented  If I annotate the method with `@Scheduled` annotation and let the method run every x seconds it works without a problem. However, if I sleep/hibernate my workstation/server and then I wake it up, each time spring tries to ""catch up"" the execution count which is not very nice. Imagine the server is in sleep mode for 2 days, and then it freezes up the whole system because of 2**24**60*60 / x ""scheduled"" executions in one second.  `@Scheduled`(fixedRate = 1000) private void test1() { logger.error(""Test""); }  2016-01-25 09:37:07.063 ERROR 10104 --- [pool-1-thread-1] MyApp  : Test 2016-01-25 09:37:08.062 ERROR 10104 --- [pool-1-thread-1] MyApp  : Test 2016-01-25 09:37:09.062 ERROR 10104 --- [pool-1-thread-1] MyApp  : Test 2016-01-25 09:37:10.062 ERROR 10104 --- [pool-1-thread-1] MyApp  : Test **SLEEP (wait couple of minutes)** **POWER BUTTON** 2016-01-25 09:38:29.173 ERROR 10104 --- [pool-1-thread-1] MyApp  : Test 2016-01-25 09:38:29.174 ERROR 10104 --- [pool-1-thread-1] MyApp  : Test 2016-01-25 09:38:29.174 ERROR 10104 --- [pool-1-thread-1] MyApp  : Test 2016-01-25 09:38:29.174 ERROR 10104 --- [pool-1-thread-1] MyApp  : Test 2016-01-25 09:38:29.174 ERROR 10104 --- [pool-1-thread-1] MyApp  : Test ...  Is there any fix for this issue in later versions of Spring? I use spring boot 1.2.5 and as far as I know spring 4.1.7 is built-in.   ---  **Affects:** 4.1.7","closed","status: bulk-closed,","spring-projects-issues","2016-01-25T08:55:14Z","2019-01-12T02:44:12Z"
"","18480","Regression: BufferedImageHttpMessageConverter does not set content-type header [SPR-13906]","**[Martin Bonato](https://jira.spring.io/secure/ViewProfile.jspa?name=martin.bonato@prime-sign.com)** opened **[SPR-13906](https://jira.spring.io/browse/SPR-13906?redirect=false)** and commented  Commit [8ab2e4](https://github.com/spring-projects/spring-framework/commit/8ab2e47556e91b0d0cf71ad9bede7d8cbcd968c4) for #17312 added support for streaming to `BufferedImageHttpMessageConverter`. However, it breaks setting the content-type header on non-streaming HttpOutputMessages like ServerServletHttpOutputMessage (also used in MockMvc unit tests).  getBody() is called on the outputMessage before the content-type header is added:  ``` writeInternal(image, contentType, outputMessage.getHeaders(),           outputMessage.getBody()); ```  Calling `ServerServletHttpOutputMessage.getBody()` causes headers to get written. Headers added afterwards have no effect.  ---  **Affects:** 4.2 GA, 4.2.1, 4.2.2, 4.2.3, 4.2.4  **Reference URL:** https://github.com/mbonato/testcase-springframework-SPR-13906  **Issue Links:** - #17312 All HttpMessageConverters should support StreamingHttpOutputMessage  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/39c05c56c45f955a26a8ce86f33f1534da154912, https://github.com/spring-projects/spring-framework/commit/b49235ac598c6eeca11da76f1e1aa3aab8e26f3d  1 votes, 3 watchers","closed","type: bug,","spring-projects-issues","2016-01-29T10:17:09Z","2019-01-11T19:07:52Z"
"","18182","SimpleTriggerFactoryBean and CronTriggerFactoryBean fail without jobDetail [SPR-13604]","**[Martin Benda](https://jira.spring.io/secure/ViewProfile.jspa?name=mbenda)** opened **[SPR-13604](https://jira.spring.io/browse/SPR-13604?redirect=false)** and commented  Factory beans `SimpleTriggerFactoryBean` and `CronTriggerFactoryBean` throw NPE when their `jobDetail` property is not set. This makes it impossible to create triggers without associated job detail (something that we need in our application and that worked fine in Spring 3.x). Moreover, the `jobDetail` null check in `afterPropertiesSet` (SimpleTriggerFactoryBean:221) is useless, because `jobDetail` is dereferenced without any null checking later in this method.  Making it possible to create triggers without job detail will make these bean factories more flexible and should not break any current uses of these beans.  ---  **Affects:** 3.2.16, 4.2.3  **Issue Links:** - #15887 Require Jackson 2.1+, Quartz 2.1.4+, EhCache 2.5+  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/896, and commits https://github.com/spring-projects/spring-framework/commit/29700658d4a6c337105c722f7b02857231c02020, https://github.com/spring-projects/spring-framework/commit/8adff1bd70ef185213665ed3c3b8c1d1cae66b96, https://github.com/spring-projects/spring-framework/commit/67a65ea600bbbf16e5e361b9ece3c3041090a082  **Backported to:** [3.2.17](https://github.com/spring-projects/spring-framework/milestone/105?closed=1)","closed","type: enhancement,","spring-projects-issues","2015-10-23T09:01:11Z","2019-01-11T19:18:21Z"
"","18747","Section 19.3.2 of reference mentions Hibernate 3 should be just Hibernate [SPR-14176]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-14176](https://jira.spring.io/browse/SPR-14176?redirect=false)** and commented  Section 19.3.2 of the reference guide is called **Implementing DAOs based on plain Hibernate 3 API**, it would be better suited now to use remove references to hibernate 3 as it applies to hibernate 4 and 5 as well.  ---  **Affects:** 4.2.5  **Issue Links:** - #17821 Deprecate Hibernate 3 support - #18059 Compatibility with Hibernate ORM 5.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/44a9c495ab3268953e8a7c5c4e51b864b46801d3, https://github.com/spring-projects/spring-framework/commit/f83e149f8a1553f0eb03d65ff68e3c123f025d24","closed","type: documentation,","spring-projects-issues","2016-04-15T07:15:48Z","2019-01-11T16:35:35Z"
"","18622","ReflectionTestUtils should automatically unwrap proxies [SPR-14050]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-14050](https://jira.spring.io/browse/SPR-14050?redirect=false)** and commented  When using Spring AOP and in a test case you use `ReflectionTestUtils.setField`, this fails when using (class-based) proxies. Specifically, the value is set in the proxy itself rather than in the underlying instance.  Currently one would first have to call `AopTestUtils.getUltimateTargetObject` and then pass that result to the `ReflectionTestUtils.setField` method.  ```java Object actualTarget = AopTestUtils.getUltimateTargetObject(injectedProxy); ReflectionTestUtils.setField(actualTarget, ""field"", ""new-value""); ```  Arguably calling `ReflectionTestUtils.setField` on a proxied class isn't the best practice, but it would be nice if the call to  `AopTestUtils.getUltimateTargetObject` could be embedded in the `ReflectionTestUtils` class.   ---  **Affects:** 4.2.5  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1006  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2016-03-14T08:20:04Z","2016-04-06T08:38:14Z"
"","18517","Doc: @RestController works only with RequestMappingHandlerAdapter [SPR-13945]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-13945](https://jira.spring.io/browse/SPR-13945?redirect=false)** and commented  When using `@RestController` on a class and not explicitly enabling the new annotation processing (i.e. `@EnableWebMvc` or ``) the class is treated like a normal `@Controller`.  This is due to the `DispatcherServlet` defaulting to the deprecated `AnnotationMethodHandlerAdapter`.  Might be worthwhile to document this in the reference guide (or javadoc).   ---  **Affects:** 4.1.9, 4.2.4  **Reference URL:** http://stackoverflow.com/questions/35407390/restcontroller-without-responsebody-on-methods-work-incorrect#35407390  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/400206a2feb17919ee4ba192eb495198dcaafe03","closed","type: documentation,","spring-projects-issues","2016-02-15T11:40:33Z","2016-06-10T09:19:12Z"
"","18642","Support for HTTP Vary configuration (e.g. in reaction to locale-based rendering) [SPR-14070]","**[Markus Malkusch](https://jira.spring.io/secure/ViewProfile.jspa?name=malkusch)** opened **[SPR-14070](https://jira.spring.io/browse/SPR-14070?redirect=false)** and commented  An i18n webapplication might use the `AcceptHeaderLocaleResolver` do deliver content in different languages based on the `accept-language` HTTP header.  To inform user agents and **cache proxies** about that kind of content negotiation, HTTP provides the `VARY` header.  ``` Vary: accept-language ```  I suggest that Spring transparently sets an appropriate `VARY` header to the HTTP response if an `AcceptHeaderLocaleResolver` bean is used.  Also I don't see a point in using `AcceptHeaderLocaleResolver` without a `VARY` header. In fact applications doing so are broken, as an intermediate cache proxy might deliver a cached response of a wrong language. So I further suggest setting the `VARY` header should be a default behaviour (if `AcceptHeaderLocaleResolver` is used). That's also the RFCs wording as well:  > An origin server SHOULD send a Vary header field when its algorithm > for selecting a representation varies based on aspects of the request > message other than the method and request target, unless the variance > cannot be crossed or the origin server has been deliberately > configured to prevent cache transparency.  Settings the `VARY` header appropriatly means, taking into account that the response might have such a header already. In this case, it needs to be determined if adding accept-language is necessary. It's not necessary, if the existing header is ""*"" or contains already ""accept-language"".  ---  **Reference URL:** https://tools.ietf.org/html/rfc7231#section-7.1.4  **Issue Links:** - #17721 Spring should have default support for OPTIONS, HEAD and Allow - #17915 Flexible locale resolution based on supported languages - #20504 HttpEntityMethodProcessor discards headers - #18779 ResponseEntity should allow the usage of unassigned HTTP status codes","closed","type: enhancement,","spring-projects-issues","2016-03-18T15:00:59Z","2019-01-11T14:40:50Z"
"","18595","Empty @PathVariable not recognized [SPR-14023]","**[Markus Heiden](https://jira.spring.io/secure/ViewProfile.jspa?name=markus_heiden)** opened **[SPR-14023](https://jira.spring.io/browse/SPR-14023?redirect=false)** and commented  We use:  ```java @RequestMapping(value = ""/{applicationId}/category/{categoryId}/products"") ```  Requests like `""/xxx/category//products`"" assign ""products"" instead of an empty string to `@PathVariable(value = ""categoryId"")`. Instead I would expect an empty String assigned to it. I don't known if it makes a difference: We use a property editor for `""categoryId""` to map it to a custom type.   ---  **Affects:** 4.2.5  1 votes, 4 watchers","closed","in: web,","spring-projects-issues","2016-03-05T09:16:27Z","2019-01-11T15:03:59Z"
"","18038","ConcurrentMapCache.putIfAbsent doesn't support null values [SPR-13458]","**[Mark Hale](https://jira.spring.io/secure/ViewProfile.jspa?name=pulquero)** opened **[SPR-13458](https://jira.spring.io/browse/SPR-13458?redirect=false)** and commented  The current code is  ``` public ValueWrapper putIfAbsent(Object key, Object value) {      Object existing = this.store.putIfAbsent(key, value);      return toWrapper(existing); } ```  but should be  ``` public ValueWrapper putIfAbsent(Object key, Object value) {      Object existing = this.store.putIfAbsent(key, toStoreValue(value));      return toWrapper(existing); } ```    ---  **Affects:** 4.1.7, 4.2 GA, 4.2.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/df3c3127a5ec92432982a18be0f0e46bc738a7a4, https://github.com/spring-projects/spring-framework/commit/4dee9cbf626aa195b9d1d5bb5be67eb8d1e5338c  **Backported to:** [4.1.8](https://github.com/spring-projects/spring-framework/milestone/132?closed=1)","closed","in: core,","spring-projects-issues","2015-09-10T10:35:56Z","2015-10-15T10:11:25Z"
"","18620","Upgrade build to Gradle 2.12 [SPR-14048]","**[Marius Grama](https://jira.spring.io/secure/ViewProfile.jspa?name=mariusneo)** opened **[SPR-14048](https://jira.spring.io/browse/SPR-14048?redirect=false)** and commented  Gradle 2.11 has been released since februrary 2016. When setting up spring-framework project with intellij IDEA 16, the merged projects (see MergePlugin gradle plugin) from spring-framework are not at all easily recognized at it takes a while until everything gets setup to have a working environment. With Gradle 2.11 (and its newest version of IdeaPlugin) there are no more problems in setting up the project in intellij idea.  ---  **Affects:** 4.3 RC1  **Attachments:** - [spring-beans-groovy-inconsistency.png](https://jira.spring.io/secure/attachment/23347/spring-beans-groovy-inconsistency.png) (_40.27 kB_)  **Issue Links:** - #18063 Upgrade build to Gradle 2.10 - #18789 Upgrade build to Gradle 2.13  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2152f436f90aebdd50022636a36b7ffc745e4880, https://github.com/spring-projects/spring-framework/commit/e2ba4774059107b6fa3a4b6c1cefe90be965545c","closed","type: task,","spring-projects-issues","2016-03-12T21:45:54Z","2019-01-11T15:01:11Z"
"","18426","Improve Jackson 2.7 compatibility [SPR-13853]","**[Marek Wiącek](https://jira.spring.io/secure/ViewProfile.jspa?name=marekw)** opened **[SPR-13853](https://jira.spring.io/browse/SPR-13853?redirect=false)** and commented  RestTemplate produces the following error when used with Jackson 2.7.0-rc3:  Caused by: java.lang.NoSuchMethodError: com.fasterxml.jackson.databind.type.TypeFactory.constructType(Ljava/lang/reflect/Type;Ljava/lang/Class;)Lcom/fasterxml/jackson/databind/JavaType; at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.getJavaType(AbstractJackson2HttpMessageConverter.java:314) at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.canRead(AbstractJackson2HttpMessageConverter.java:146) at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.canRead(AbstractJackson2HttpMessageConverter.java:141) at org.springframework.web.client.RestTemplate$AcceptHeaderRequestCallback.doWithRequest(RestTemplate.java:706) at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:594) at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:557) at org.springframework.web.client.RestTemplate.getForEntity(RestTemplate.java:289)  ---  **Affects:** 4.2.3, 4.2.4  **Issue Links:** - #18443 AbstractJackson2HttpMessageConverter is incompatible with Jackson 2.7+ (_**""is duplicated by""**_) - #18437 Jackson 2.7.0 not compatible with Spring (_**""is duplicated by""**_) - #17903 Jackson 2.6: message converter should use type only for collections - #18301 Revise AbstractJackson2HttpMessageConverter's generic type adaptation  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/09db26af2b92457fc100c955456486c0a95001a8  1 votes, 9 watchers","closed","type: enhancement,","spring-projects-issues","2016-01-09T18:29:18Z","2019-01-14T04:40:40Z"
"","18403","Automated smoke test for GAE compatibility [SPR-13830]","**[Marek Wiącek](https://jira.spring.io/secure/ViewProfile.jspa?name=marekw)** opened **[SPR-13830](https://jira.spring.io/browse/SPR-13830?redirect=false)** and commented  Spring code that passes regular unit tests may not always work in restricted environments like Google App Engine. It is therefore desirable to have an automated test that deploys a hello world MVC app to an App Engine Dev Server and checks if core services like IoC, declarative transactions and caching work correctly.  Google App Engine Gradle plugin supports automated execution of integration tests and can be easily integrated with the existing build. App Engine SDK is available as a Maven dependency so no manual installation of any components is required.  ---  **Issue Links:** - #17722 ObjenesisCglibAopProxy's fallback mode triggers duplicate class definition error - #18402 Regression: Spring 4.2.4 fails to load configuration class on Google App Engine","closed","status: bulk-closed,","spring-projects-issues","2015-12-29T21:46:18Z","2019-01-12T02:44:30Z"
"","18402","Regression: Spring 4.2.4 fails to load configuration class on Google App Engine [SPR-13829]","**[Marek Wiącek](https://jira.spring.io/secure/ViewProfile.jspa?name=marekw)** opened **[SPR-13829](https://jira.spring.io/browse/SPR-13829?redirect=false)** and commented  Spring 4.2.4 fails to load a configuration class due to a security exception (see below). 4.2.3 is not affected by this bug.  java.lang.IllegalStateException: Cannot load configuration class: org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration at org.springframework.context.annotation.ConfigurationClassPostProcessor.enhanceConfigurationClasses(ConfigurationClassPostProcessor.java:410) at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanFactory(ConfigurationClassPostProcessor.java:263) at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:284) at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:130) at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:678) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:520) at org.springframework.web.servlet.FrameworkServlet.configureAndRefreshWebApplicationContext(FrameworkServlet.java:668) at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:634) at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:682) at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:553) at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:494) at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:136) at javax.servlet.GenericServlet.init(GenericServlet.java:212) at org.mortbay.jetty.servlet.ServletHolder.initServlet(ServletHolder.java:440) at org.mortbay.jetty.servlet.ServletHolder.getServlet(ServletHolder.java:339) at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:487) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1166) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:316) at org.springframework.security.web.authentication.preauth.AbstractPreAuthenticatedProcessingFilter.doFilter(AbstractPreAuthenticatedProcessingFilter.java:116) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:213) at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:176) at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:346) at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:262) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157) at com.google.appengine.api.socket.dev.DevSocketFilter.doFilter(DevSocketFilter.java:74) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157) at com.google.appengine.tools.development.ResponseRewriterFilter.doFilter(ResponseRewriterFilter.java:128) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157) at com.google.appengine.tools.development.HeaderVerificationFilter.doFilter(HeaderVerificationFilter.java:34) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157) at com.google.appengine.api.blobstore.dev.ServeBlobFilter.doFilter(ServeBlobFilter.java:63) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157) at com.google.apphosting.utils.servlet.TransactionCleanupFilter.doFilter(TransactionCleanupFilter.java:43) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157) at com.google.appengine.tools.development.StaticFileFilter.doFilter(StaticFileFilter.java:125) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157) at com.google.appengine.tools.development.DevAppServerModulesFilter.doDirectRequest(DevAppServerModulesFilter.java:366) at com.google.appengine.tools.development.DevAppServerModulesFilter.doDirectModuleRequest(DevAppServerModulesFilter.java:349) at com.google.appengine.tools.development.DevAppServerModulesFilter.doFilter(DevAppServerModulesFilter.java:116) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157) at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:388) at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216) at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:182) at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765) at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:418) at com.google.appengine.tools.development.DevAppEngineWebAppContext.handle(DevAppEngineWebAppContext.java:98) at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152) at com.google.appengine.tools.development.JettyContainerService$ApiProxyHandler.handle(JettyContainerService.java:512) at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152) at org.mortbay.jetty.Server.handle(Server.java:326) at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:542) at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:923) at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:547) at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:212) at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404) at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409) at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:582) Caused by: java.security.AccessControlException: access denied (""java.lang.RuntimePermission"" ""accessClassInPackage.sun.reflect.annotation"") at java.security.AccessControlContext.checkPermission(AccessControlContext.java:474) at java.security.AccessController.checkPermission(AccessController.java:685) at java.lang.SecurityManager.checkPermission(SecurityManager.java:549) at com.google.appengine.tools.development.DevAppServerFactory$CustomSecurityManager.checkPermission(DevAppServerFactory.java:429) at java.lang.SecurityManager.checkPackageAccess(SecurityManager.java:1525) at sun.reflect.misc.ReflectUtil.checkPackageAccess(ReflectUtil.java:188) at sun.reflect.misc.ReflectUtil.checkPackageAccess(ReflectUtil.java:164) at java.lang.reflect.Proxy.getInvocationHandler(Proxy.java:822) at org.springframework.core.annotation.AnnotationUtils.synthesizeAnnotation(AnnotationUtils.java:1364) at org.springframework.core.annotation.AnnotationUtils.findAnnotation(AnnotationUtils.java:498) at org.springframework.core.annotation.AnnotationUtils.findAnnotation(AnnotationUtils.java:563) at org.springframework.context.annotation.BeanAnnotationHelper.isBeanAnnotated(BeanAnnotationHelper.java:35) at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.isMatch(ConfigurationClassEnhancer.java:487) at org.springframework.context.annotation.ConfigurationClassEnhancer$ConditionalCallbackFilter.accept(ConfigurationClassEnhancer.java:190) at org.springframework.cglib.proxy.Enhancer.emitMethods(Enhancer.java:898) at org.springframework.cglib.proxy.Enhancer.generateClass(Enhancer.java:509) at org.springframework.cglib.transform.TransformingClassGenerator.generateClass(TransformingClassGenerator.java:33) at org.springframework.cglib.core.DefaultGeneratorStrategy.generate(DefaultGeneratorStrategy.java:25) at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanFactoryAwareGeneratorStrategy.generate(ConfigurationClassEnhancer.java:249) at org.springframework.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:231) at org.springframework.cglib.proxy.Enhancer.createHelper(Enhancer.java:378) at org.springframework.cglib.proxy.Enhancer.createClass(Enhancer.java:318) at org.springframework.context.annotation.ConfigurationClassEnhancer.createClass(ConfigurationClassEnhancer.java:135) at org.springframework.context.annotation.ConfigurationClassEnhancer.enhance(ConfigurationClassEnhancer.java:107) at org.springframework.context.annotation.ConfigurationClassPostProcessor.enhanceConfigurationClasses(ConfigurationClassPostProcessor.java:400)  ---  **Affects:** 4.2.4  **Issue Links:** - #18497 AnnotationUtils#synthesizeAnnotation prevents startup on Google App Engine (_**""is duplicated by""**_) - #18271 SynthesizedAnnotation is not visible from class loader - #18403 Automated smoke test for GAE compatibility  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/acecda7153efccaf1f99d1a7002d7f3c8945b698, https://github.com/spring-projects/spring-framework/commit/aecb8b6c6bd3c63ac3f609c2340edd57f7e3f8c8","closed","in: core,","spring-projects-issues","2015-12-29T17:02:52Z","2019-01-11T18:31:38Z"
"","18214","Setting StandaloneMockMvcBuilder.useSuffixPatternMatch = false does not work [SPR-13637]","**[Marcus Nylander](https://jira.spring.io/secure/ViewProfile.jspa?name=marcusnylander)** opened **[SPR-13637](https://jira.spring.io/browse/SPR-13637?redirect=false)** and commented  Setting `StandaloneMockMvcBuilder.useSuffixPatternMatch` to `false` does not work with the 4.2.2 release. It worked in 4.1.7, but after an upgrade yesterday it stopped working.   ---  **Affects:** 4.2.2  1 votes, 5 watchers","closed","type: bug,","spring-projects-issues","2015-11-04T06:44:18Z","2015-11-15T17:03:14Z"
"","18771","ReturnValueMethodParameter: Access to returnValue field [SPR-14197]","**[Marco Ferrari](https://jira.spring.io/secure/ViewProfile.jspa?name=ferrari.marco@gmail.com)** opened **[SPR-14197](https://jira.spring.io/browse/SPR-14197?redirect=false)** and commented  Currently [ReturnValueMethodParameter private class](https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/web/method/HandlerMethod.java#L331) defined in HandlerMethod has a private field ([returnValue](https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/web/method/HandlerMethod.java#L333)) that holds the instance of the object used to build the ReturnValueMethodParameter instance.  It could be useful to access this returnValue field, at least in read-only (a getter?).  An example use case could be the the supports() method of an implementation of [ResponseBodyAdvice interface](https://github.com/spring-projects/spring-framework/blob/master/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ResponseBodyAdvice.java) in case of a generic value object used as return in all your REST endpoints.  Example (in EntityAdvice):  ```java @Override public boolean supports(MethodParameter returnType, Class> converterType) { 	return GenericValueObject.class.isAssignableFrom(returnType.getParameterType()) && Entity.class.isAssignableFrom(returnType.getReturnValue().getClass()); } ```    ---  **Affects:** 4.2.5, 4.3 RC1","closed","status: bulk-closed,","spring-projects-issues","2016-04-21T09:50:18Z","2019-01-12T00:14:24Z"
"","18306","Parse form data request content and populate request params in Spring MVC Test [SPR-13733]","**[Marcin Kwaczyński](https://jira.spring.io/secure/ViewProfile.jspa?name=kwaq)** opened **[SPR-13733](https://jira.spring.io/browse/SPR-13733?redirect=false)** and commented  I have a controller with method  ```java @RequestMapping(value = ""validate"", method = POST, consumes = MediaType.APPLICATION_FORM_URLENCODED_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)   @ResponseBody   public ReCaptchaValidationResult validateReCaptchaResponse(@RequestBody MultiValueMap data) {...} ```  When I'm doing the following:  ```java final MultiValueMap parameters = new LinkedMultiValueMap<>();     parameters.add(""secret"", reCaptchaSecret);     parameters.add(""response"", reCaptchaResponse);     restOperations         .postForEntity(reCaptchaValidationUrl, parameters, ReCaptchaValidationResult.class); ```  I get 400 Bad Request error.  But when I add params to the url like this:  ```java reCaptchaValidationResult +=""?secret=""+reCaptchaSecret +""&response="" + reCaptchaResponse ```  controller is called with data param filled with proper values.  I tracked this issue to org.springframework.http.server.ServletServerHttpRequest#getBody method, which tries to retrieve body from request parameters, when it is form post (and in my case it is).  Is this behavior correct and as designed?  ---  **Affects:** 4.2.3  **Issue Links:** - #17636 MockRestRequestMatchers should have matchers for form data  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/415b2763cea36b86fdc2db18c93a88dcc6cdaa06","closed","type: enhancement,","spring-projects-issues","2015-11-29T15:28:31Z","2019-01-11T19:31:22Z"
"","18051","Replacing deprecated TransactionConfiguration causes tests to fail [SPR-13472]","**[Marcel Stör](https://jira.spring.io/secure/ViewProfile.jspa?name=marcelstoer)** opened **[SPR-13472](https://jira.spring.io/browse/SPR-13472?redirect=false)** and commented  A test super class has `@TransactionConfiguration(transactionManager = ""foo"", defaultRollback = true)` which is now deprecated. If I understand the deprecation note correctly I'm supposed to replace this with:  ```java @Rollback @Transactional(transactionManager = ""foo"") ```  However, if I do that numerous tests will fail reporting:  ``` java.lang.IllegalStateException: No value for key [org.apache.commons.dbcp2.BasicDataSource@cfdd1c4] bound to thread [main] 	at org.springframework.transaction.support.TransactionSynchronizationManager.unbindResource(TransactionSynchronizationManager.java:210) 	at org.springframework.orm.jpa.JpaTransactionManager.doCleanupAfterCompletion(JpaTransactionManager.java:583) 	at org.springframework.transaction.support.AbstractPlatformTransactionManager.cleanupAfterCompletion(AbstractPlatformTransactionManager.java:1016) 	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:811) 	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:730) 	at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:485) 	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:291) 	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96) 	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) 	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:653) 	at MyClass$$EnhancerBySpringCGLIB$$23d03b7b.getDirectOrderPage() 	at MyTest.testProcessSwitch(MyTest.java:103) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:483) 	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) 	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) 	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) 	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26) 	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74) 	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27) 	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:85) 	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:86) 	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:241) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:87) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) 	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) 	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:180) 	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86) 	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)  java.lang.IllegalStateException: Cannot deactivate transaction synchronization - not active 	at org.springframework.transaction.support.TransactionSynchronizationManager.clearSynchronization(TransactionSynchronizationManager.java:329) 	at org.springframework.transaction.support.TransactionSynchronizationManager.clear(TransactionSynchronizationManager.java:464) 	at org.springframework.transaction.support.AbstractPlatformTransactionManager.cleanupAfterCompletion(AbstractPlatformTransactionManager.java:1013) 	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processRollback(AbstractPlatformTransactionManager.java:883) 	at org.springframework.transaction.support.AbstractPlatformTransactionManager.rollback(AbstractPlatformTransactionManager.java:830) 	at org.springframework.test.context.transaction.TransactionContext.endTransaction(TransactionContext.java:125) 	at org.springframework.test.context.transaction.TransactionalTestExecutionListener.afterTestMethod(TransactionalTestExecutionListener.java:218) 	at org.springframework.test.context.TestContextManager.afterTestMethod(TestContextManager.java:313) 	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:93) 	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:86) 	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:241) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:87) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) 	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) 	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:180) 	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86) 	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192) ```  The test super class is defined as  ```java @Rollback @Transactional(transactionManager = ""foo"") @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(locations = {""classpath:data-test.xml"" }) @DirtiesContext(classMode = ClassMode.AFTER_CLASS) public abstract class DatabaseDrivenTest { ```  Those tests that fail do so regardless of whether I run all tests across a module/project/package or whether I run just a single test. Going back to `@TransactionConfiguration(transactionManager = ""foo"", defaultRollback = true)` fixes that.   ---  **Affects:** 4.2 GA","closed","status: invalid,","spring-projects-issues","2015-09-18T19:39:21Z","2019-01-12T05:23:44Z"
"","18585","Losen org.springframework.validation.Errors from binding/target object [SPR-14013]","**[Marcel Overdijk](https://jira.spring.io/secure/ViewProfile.jspa?name=marceloverdijk)** opened **[SPR-14013](https://jira.spring.io/browse/SPR-14013?redirect=false)** and commented  I think this is gonna be a longshot, but nevertheless I want to raise it.  I really like the `org.springframework.validation.Errors` interface since the early days developing jsp webapps. In that time it would make absolute sense to have a target object bound to the `Errors` instance. As to render values again in jsp forms.  But now with REST architecture I still like the `Errors` interface but the fact that it is tight to a target object is not always desired. I could of course create a custom implementation of the `Errors` interface but it contains methods like `getObjectName`, `getFieldType`, `getFieldValue` which in this case are not desired.  Basically what I'm asking is to have an interface which is completely loosened from target object. It would also be nice to have simple (abstract) class which stores errors etc, but without having to bind a target object. All existing implementations of `Errors` require binding a target object.   ---  **Affects:** 4.2.5","closed","status: bulk-closed,","spring-projects-issues","2016-03-03T08:23:41Z","2019-01-12T02:43:37Z"
"","18428","Typed caches [SPR-13855]","**[Marcel Overdijk](https://jira.spring.io/secure/ViewProfile.jspa?name=marceloverdijk)** opened **[SPR-13855](https://jira.spring.io/browse/SPR-13855?redirect=false)** and commented  Does Spring intend to add Type definition to org.springframework.cache.Cache just like JSR107 has in javax.cache.Cache?  E.g.  ``` public interface Cache ```  vs.  ``` public interface Cache ```    ---  **Affects:** 4.2.4","closed","type: enhancement,","spring-projects-issues","2016-01-11T11:51:00Z","2019-01-14T04:40:39Z"
"","18499","@RequestController methods with array parameter die. [SPR-13927]","**[Marcel Montes](https://jira.spring.io/secure/ViewProfile.jspa?name=spiceman)** opened **[SPR-13927](https://jira.spring.io/browse/SPR-13927?redirect=false)** and commented  I have no idea what the correct components and labels are, just a Spring Boot user that knows zero about the internals but...  `@RestControllers` seem to die when the controller method parameter is a List or Array.  Oddly enough, adding `@RequestBody` to the parameter seems to appease it.  ```java @RestController @RequestMapping(""/"") public class SomeRestController { 	 	@RequestMapping(value=""1"", method=RequestMethod.POST ) 	public POJO post( POJO[] pojos ) {   // DIES 		return new POJO(""restcontroller pojo""); 	}  	@RequestMapping(value=""2"", method=RequestMethod.POST ) 	public POJO post2( @RequestBody POJO[] pojos ) {   // doesn't die 		return new POJO(""restcontroller pojo""); 	} } ```  Actual exception:  ``` org.springframework.web.util.NestedServletException: Request processing failed;  nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [[Lcom.example.POJO;]: No default constructor found;  nested exception is java.lang.NoSuchMethodException: [Lcom.example.POJO;.() ```    ---  **Affects:** 4.2.4","closed","status: declined,","spring-projects-issues","2016-02-08T09:56:38Z","2019-01-13T05:30:37Z"
"","18768","Add note constrain/restriction for  about method signature such as @Scheduled [SPR-14195]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-14195](https://jira.spring.io/browse/SPR-14195?redirect=false)** and commented  In the [33.4.2 The @Scheduled Annotation](http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#scheduling-annotation-support-scheduled) section says:  > Notice that the methods to be scheduled must have void returns and must not expect any arguments. If the method needs to interact with other objects from the Application Context, then those would typically have been provided through dependency injection.  Now, for the [33.5.3 The 'scheduled-tasks' element](http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#scheduling-task-namespace-scheduled-tasks) section, for the `` does not appear a similar message for the `method` attribute.  ---  **Affects:** 4.2 GA, 4.2.5  **Issue Links:** - #18746 Let `@Scheduled` work with a non-void method how is possible with   **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b331ad5b2a7175df5cc8cba013395daccf68f98f","closed","type: documentation,","spring-projects-issues","2016-04-20T16:11:09Z","2019-01-13T05:26:11Z"
"","18746","Let @Scheduled work with a non-void method how is possible with  [SPR-14175]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-14175](https://jira.spring.io/browse/SPR-14175?redirect=false)** and commented  I am doing some experiments with `Task Execution and Scheduling`  I have two projects with this code:  ```java public class ProcessServiceImpl implements ProcessService, Runnable, Callable {  	private static final Logger logger = LoggerFactory.getLogger(ProcessServiceImpl.class.getSimpleName()); 	 	@Override 	public void executeRunnable() { 		new MessageRunnableWithSleep().run(); 	}  	@Override 	public String executeCallable() { 		String result = """"; 		try { 			result = new MessageCallableWithSleep().call();  		} catch (Exception e) { 			e.printStackTrace(); 		} 		return result; 	} ... ```  With XML I have:  ```java 	  	 	 								 		 						 	 ```  The code works fine. Until here I can confirm `` works for a method with a return type, therefore I can use a method where it returns something with schedule in peace.  But if in the other project I use:  ```java @Service @Scope(value=ConfigurableBeanFactory.SCOPE_SINGLETON) public class ProcessServiceImpl implements ProcessService, Runnable, Callable {  	private static final Logger logger = LoggerFactory.getLogger(ProcessServiceImpl.class.getSimpleName()); 	 	@Override 	@Scheduled(initialDelay=Constants.INITIAL_DELAY, fixedRate=Constants.PERIOD) 	public void executeRunnable() { 		new MessageRunnableWithSleep().run(); 	}  	@Override 	@Scheduled(initialDelay=Constants.INITIAL_DELAY, fixedRate=Constants.PERIOD) 	public String executeCallable() { 		String result = """"; 		try { 			result = new MessageCallableWithSleep().call();  		} catch (Exception e) { 			e.printStackTrace(); 		} 		return result; 	} ```  When I execute the code I get:  > Initialization of bean failed; nested exception is java.lang.IllegalStateException: > Encountered invalid `@Scheduled` method 'executeCallable': > Only void-returning methods may be annotated with `@Scheduled`  Therefore is not possible do a complete migration from XML to annotations.  The reason about have a scheduled method with a return value would be give the option to call the method manually (if need it) or leave in peace working within the scheduled process.  Let's consider the scenario about the sendNotificationEmail method with a Boolean how a return type. I am able to call the method manually and get the boolean value how a successful confirmation or put a schedule to work around that method.  Thanks  ---  **Affects:** 4.2 GA, 4.2.5, 4.3 RC1  **Issue Links:** - #18768 Add note constrain/restriction for  about method signature such as `@Scheduled`","closed","type: enhancement,","spring-projects-issues","2016-04-14T18:08:00Z","2019-01-13T05:26:22Z"
"","18739","Improve reference documentation for Task Execution and Scheduling about bean scopes [SPR-14167]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-14167](https://jira.spring.io/browse/SPR-14167?redirect=false)** and commented  I am doing some experiments about `Task Execution and Scheduling`  In XML I have the following:  ```xml      	                 						                  						   ```  Until here my `processServiceImpl` bean is _prototype_  My code works well how is expected, I can see **two** _instances_ working well, it about the `executeRunnable` and `executeCallable` methods... I can confirm this through the terminal and with visualVM.  Until here, I can assume I can work in peace with a prototype object with scheduling  But in JavaConfig I have a situation:  ```java @Configuration @EnableScheduling public class SchedulingConfig implements SchedulingConfigurer {  	@Override 	public void configureTasks(ScheduledTaskRegistrar taskRegistrar) { 		taskRegistrar.setScheduler(taskScheduler()); 	} 	 	@Bean(destroyMethod=""shutdown"")     public TaskScheduler taskScheduler() { 		 		ThreadPoolTaskScheduler threadPoolTaskScheduler = new ThreadPoolTaskScheduler(); 		threadPoolTaskScheduler.setPoolSize(4); 		 		return threadPoolTaskScheduler;     }  } ```  And with:  ```java @Service //@Scope(value=ConfigurableBeanFactory.SCOPE_SINGLETON) @Scope(value=ConfigurableBeanFactory.SCOPE_PROTOTYPE) public class ProcessServiceImpl implements ProcessService, Runnable, Callable {  	private static final Logger logger = LoggerFactory.getLogger(ProcessServiceImpl.class.getSimpleName()); 	 	@Override 	@Scheduled(initialDelay=3000, fixedRate=10000) 	public void executeRunnable() { 		new MessageRunnableWithSleep().run(); 	} ... ```  When I execute the code  ```java public static void main(String[] args) throws Exception { 				 		ConfigurableApplicationContext applicationContext = new AnnotationConfigApplicationContext(CentralConfig.class); 		 		MainScheduleSupport.sleep(); 		 		applicationContext.close(); 		 } ```  I did realise only works on Singleton, but not Prototype.  (1) I am confused, why prototype did work on XML and not in JavaConfig + Annotations. Did I forget something? (2) On [33. Task Execution and Scheduling](http://docs.spring.io/spring/docs/current/spring-framework-reference/html/scheduling.html), there is no mention neither about Singleton nor Prototype  From (1) If scheduling is only valid on Singleton, I am assuming that on XML even when the bean is prototype the two `","closed","in: core,","spring-projects-issues","2016-04-14T00:46:23Z","2019-01-13T05:26:56Z"
"","18736","Reference Documentation: Why does not exist an XML configuration version for @Async? [SPR-14164]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-14164](https://jira.spring.io/browse/SPR-14164?redirect=false)** and commented  I am doing some experiments about tasks and scheduling  After to read all this (my following content): consider include the explanation in the Reference documentation.  Taking in consideration first approach to declare a bean in Spring was with XML, later with annotations (`@Component`, `@Service` etc) and finally with JavaConfig.  I did realise about the following:  If we have `@Scheduled`, we have the XML version too such as:  ```xml                  ```  And if we have `@Async`, why is not available an XML equivalent configuration? Perhaps, something like  ```xml  ```  It thinking if the developer does not want apply `@Scheduled`, how he can do the same approach for `@Async`?  _Perhaps_ we have a .class or .jar file and we want apply `Async` support for a POJO where the .java class is not available  I already have read the javadoc for [@Async](http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/annotation/Async.html) and reference documentation [33. Task Execution and Scheduling](http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#scheduling). There is no explanation about this behaviour  I am OK with these two annotations, but just wondered why does not exist for `@Async` the XML equivalent configuration such as `@Scheduled`.  Thanks   ---  **Affects:** 4.2 GA, 4.2.3, 4.3 RC1  **Backported to:** [4.2.7](https://github.com/spring-projects/spring-framework/milestone/144?closed=1)","closed","in: core,","spring-projects-issues","2016-04-13T12:45:59Z","2016-06-10T09:19:13Z"
"","18717","@EnableScheduling javadoc has incomplete XML example [SPR-14145]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-14145](https://jira.spring.io/browse/SPR-14145?redirect=false)** and commented  On  [Annotation Type EnableScheduling](http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/annotation/EnableScheduling.html) javadoc/api  Currently it contains:  ```xml                       ```  Must be  ```xml                                   	       ```  In XML the `task:scheduled` component must be inside of `task:scheduled-tasks`   ---  **Affects:** 3.2.16, 4.2.3  **Backported to:** [3.2.17](https://github.com/spring-projects/spring-framework/milestone/105?closed=1)","closed","in: core,","spring-projects-issues","2016-04-11T16:56:28Z","2016-05-06T08:13:31Z"
"","18451","Implement RequestEntity's delete method the contentType and body methods [SPR-13878]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-13878](https://jira.spring.io/browse/SPR-13878?redirect=false)** and commented  Hello  Some long time ago I have requested the following:  [Add support for DELETE with body to RestTemplate through exchange method](#16966)  Now working with RequestEntity, for the following:  ```java static RequestEntity.HeadersBuilder delete(URI url) ```  It from [delete API](http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/RequestEntity.html#delete-java.net.URI-)  I did realize I am **not** able to do the following (**delete** method):  ```java RequestEntity requestEntity = RequestEntity.delete(uri).contentType(MediaType.APPLICATION_XML).body(personaValid); ```  It for  ```java @RequestMapping(value=PersonaRestControllerSupport.ROOT_URI, 		method=RequestMethod.DELETE, 		consumes={MediaType.APPLICATION_XML_VALUE, MediaType.APPLICATION_JSON_UTF8_VALUE}) public ResponseEntity deleteOne(@Validated @RequestBody Persona persona){ 	personaService.deleteOne(persona);		 	return ResponseEntity.noContent().build(); } ```  such as I am able to do the following (for **post** method):  ```java RequestEntity requestEntity = RequestEntity.post(uri).contentType(MediaType.APPLICATION_XML).body(personaValid); ```  It for  ```java @RequestMapping(value=PersonaRestControllerSupport.ROOT_URI, 		method=RequestMethod.POST, 		consumes={MediaType.APPLICATION_XML_VALUE, MediaType.APPLICATION_JSON_UTF8_VALUE}) public ResponseEntity saveOne(@Validated @RequestBody Persona persona){ 	persona = personaService.saveOne(persona); 	URI location = RestControllerSupport.createURILocation(PersonaRestControllerSupport.ROOT_URI, persona.getId()); 	return ResponseEntity.created(location).build();  } ```  The `RequestEntity's delete` returns `RequestEntity.HeadersBuilder` and `RequestEntity's post` returns `RequestEntity.BodyBuilder`  Thank you   ---  **Affects:** 4.2 GA, 4.2.4","closed","status: declined,","spring-projects-issues","2016-01-20T19:19:42Z","2019-01-14T04:40:32Z"
"","18448","Include Vaadin integration documentation [SPR-13875]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-13875](https://jira.spring.io/browse/SPR-13875?redirect=false)** and commented  Hello  After to play with some ""view"" and/or ""frameworks"" technologies such as:  * Struts (1) * JSP * Thymleaf  Plus:  * JavaScript * CSS * jQuery * Plugins/libraries based on jQuery  I did realize (just doing right now my research or learning curve process) Vaadin is an excellent option.  Just curious if the [Spring Framework Reference Documentation](http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/) can add/include some valuable documentation based on **JavaConfig** about how to do a successful integration.  It would be included perhaps on:  * Integrating with other web frameworks * View technologies  Something important to cover about Vaadin integration is about too:  * Validation, Data Binding, and Type Conversion   * Formatter\  Some sample code on Github would be nice too.  Note: I am doing my own search in Google too. Just curious if the source (you) can add something official.  Thanks by your understanding.   ---  **Affects:** 4.2 GA","closed","status: declined,","spring-projects-issues","2016-01-18T18:39:43Z","2016-01-19T08:10:28Z"
"","18441","@RestController avoid declare @RequestBody too [SPR-13868]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-13868](https://jira.spring.io/browse/SPR-13868?redirect=false)** and commented  Hello  I know that `@RestController`  avoid use or declare `@ResponseBody` Just curious if is possible apply for `@RequestBody` too  Perhaps it should be automatically applied to always for the first parameter of the method. Therefore leaving free to declare other parameters.  I mean from  ```java @ResponseStatus(HttpStatus.CREATED) @RequestMapping(value=PersonaRestControllerSupport.ROOT_URI,                                 method=RequestMethod.POST,                                 consumes={MediaType.APPLICATION_XML_VALUE, MediaType.APPLICATION_JSON_UTF8_VALUE}) public ResponseEntity saveOne(@Validated @RequestBody Persona persona){ ```  to (No `@RequestBody` )  ```java @ResponseStatus(HttpStatus.CREATED) @RequestMapping(value=PersonaRestControllerSupport.ROOT_URI,                                 method=RequestMethod.POST,                                 consumes={MediaType.APPLICATION_XML_VALUE, MediaType.APPLICATION_JSON_UTF8_VALUE}) public ResponseEntity saveOne(@Validated Persona persona){ ```  In case of many parameters in Rest (Perhaps get the URL, or Header) apply something _similar_ about the following (about Parameter order constrains/restrictions)  ```java public String saveOne(@Validated @ModelAttribute Persona persona,                                     BindingResult result,                                     RedirectAttributes redirectAttributes){ ```  Where `BindingResult` must be located after of the Entity Model.  Thanks  ---  **Affects:** 4.2 GA  **Issue Links:** - #18315 Controller method argument initialized either from the request body or from request parameters","closed","type: enhancement,","spring-projects-issues","2016-01-13T14:13:39Z","2019-01-11T18:27:38Z"
"","18404","Add support for MediaType for PDF and XLSX [SPR-13831]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-13831](https://jira.spring.io/browse/SPR-13831?redirect=false)** and commented  Hello  I must currently work in the following way:  ```java @Override 	public void configureContentNegotiation(ContentNegotiationConfigurer configurer) { 		configurer.favorPathExtension(true)  	//default -> true 		          .favorParameter(true)      	//default -> false 		          .ignoreAcceptHeader(false)  	//default -> false 		          .mediaType(""html"", MediaType.TEXT_HTML) 		          .mediaType(""xml"", MediaType.APPLICATION_XML) 		          .mediaType(""json"", MediaType.APPLICATION_JSON)	 			  .mediaType(""pdf"", MediaType.valueOf(""application/pdf""));	 	} ```  Check the `MediaType.valueOf(""application/pdf"")`  and for my `@RequestMapping`'s _produces_ attribute  ```java @RequestMapping(value={PersonaFindAllURLSupport.FINDALL}, produces=""application/pdf"") ```  Could be added `MediaType.APPLICATION_PDF` and `MediaType.APPLICATION_PDF_VALUE`? Same consideration about XLSX files.  Thank you   ---  **Affects:** 4.2 GA, 4.2.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7690f27c5e7833d950391882e98e9ebb7916a506","closed","type: task,","spring-projects-issues","2015-12-29T22:39:29Z","2016-04-06T08:38:08Z"
"","18396","Why Content type is null when produces=MediaType.TEXT_HTML_VALUE is used [SPR-13823]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-13823](https://jira.spring.io/browse/SPR-13823?redirect=false)** and commented  Hello  This post mostly how a consult about internal work of Spring Framework about Spring MVC.  If I have a `@RequestMapping` method with produces for XML and/or JSON, thanks to Spring MVC Test with the `print()` method I can confirm the following:  ```java ModelAndView:         View name = null              View = null             Model = null  FlashMap:        Attributes = null  MockHttpServletResponse:            Status = 200     Error message = null           Headers = {Content-Type=[application/xml]}      Content type = application/xml              Body =       100     Something     Something     1977-12-08T00:00:00-05:00       Forwarded URL = null    Redirected URL = null           Cookies = [] ```  I can see `ModelAndView` empty and `MockHttpServletResponse` with `Content type = application/xml` and it is expected. Until here all is normal.  But if I have other `@RequestMapping` with `produces=MediaType.TEXT_HTML_VALUE` and of course returning a String (view-name) and Model. Again with `print()` method _now_ I can see the following:  ```java ModelAndView:         View name = persona/findOne              View = null         Attribute = persona             value = Persona [id=100, nombre=Jesús Você, apellido=Mão Nuñez, fecha=Thu Dec 08 00:00:00 PET 1977]            errors = []  FlashMap:        Attributes = null  MockHttpServletResponse:            Status = 200     Error message = null           Headers = {}      Content type = null              Body =      Forwarded URL = /WEB-INF/view/jsp/persona/findOne.jsp    Redirected URL = null           Cookies = [] ```  For me all _practically_ have sense, but I am with the doubt about why `Content type` is `null` and not text/html?. it mostly according with the `produces=MediaType.TEXT_HTML_VALUE` established.  Since I am returning a model I am ok that the `Body` is empty and `value` has the object _Persona_, but wondered in some way why `Content type` is `null`.  I did realise about this behaviour when in two different test methods (through Spock) I have:  * resultActions.andExpect(content().contentType(MediaType.APPLICATION_XML)) // OK * resultActions.andExpect(content().contentType(MediaType.TEXT_HTML)) //fails.  (1) I ask for the explanation of this behaviour (2) What could be the correct way to test or check if the content is text/html  **Note**: consider your answer to be included in Spring Reference documentation. (Of course, if has sense)  Thanks in advance.   ---  **Affects:** 4.2 GA, 4.2.4","closed","status: declined,","spring-projects-issues","2015-12-26T13:54:59Z","2015-12-29T01:11:00Z"
"","18395","Support Hamcrest Matchers for forwardedUrl and redirectedUrl in MockMvcResultMatchers [SPR-13822]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-13822](https://jira.spring.io/browse/SPR-13822?redirect=false)** and commented  #### Status Quo  [MockMvcResultMatchers](http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/result/MockMvcResultMatchers.html) has the following methods:  * `forwardedUrl(String expectedUrl)` * `redirectedUrl(String expectedUrl)`  #### Proposal  Introduce the following:  * `forwardedUrl(org.hamcrest.Matcher matcher)` * `redirectedUrl(org.hamcrest.Matcher matcher)`  This would allow:  * `resultActions.andExpect(forwardedUrl(is(""/WEB-INF/view/jsp/persona/findOne.jsp"")))` * etc.    ---  **Affects:** 3.2.16","closed","type: enhancement,","spring-projects-issues","2015-12-26T13:32:22Z","2016-01-21T16:30:47Z"
"","18388","[doc] Update reference on RestTemplate test support to mention strategies and option to test using MockMvc as the server [SPR-13815]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-13815](https://jira.spring.io/browse/SPR-13815?redirect=false)** and commented  Hello  I am working with:  * Spring MVC * Spring MVC Testing * Spock Framework  Through Spock Framework and Spring MVC Test I can do the following:  ```java def setup(){ 	mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build(); }  def ""findOneRequestParamById""(){ 	 	given: ""URL"" 		 		url = PersonaFindOneURLSupport.FINDONE_URL_ID 		 	when: ""GET"" 		 		resultActions = mockMvc.perform(get(url).param(ControllerURLSupport.ID, ControllerTestSupport.ID_VALUE)).andDo(print()) 		 	then:                  resultActions.andExpect(handler().handlerType(PersonaFindOneController.class))                 resultActions.andExpect(etc etc etc).. content status etc etc... ... ```  Until here all work fine. The `@Controller` works how is expected (confirmed through testing)  Here `@Controller` does not care if the caller is a Web Browser or RestTemplate. It is agnostic and is OK.  My problem is test RestTemplate.  I already did a research and practically all is related with `MockRestServiceServer`  * [14.6.3 Client-Side REST Tests](http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#spring-mvc-test-client) * [How to unittest a class using RestTemplate offline?](http://stackoverflow.com/questions/4643105/how-to-unittest-a-class-using-resttemplate-offline)  I have the following through _online_:  1. It means, I must export a .war file and have running it within a Web Server such as Tomcat.    1. I must use completes URL/URI.  ```java def setup(){ 	mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build(); 	restTemplate = new RestTemplate(); } 	 def ""findOnePathVariableById""(){  	given: ""URL"" 		 		url = PersonaFindOneURISupport.FINDONE_URI_ID 		uri = new URI(""http://localhost:8080/web-20"" + FindOneURITemplateFactory.findOnePathVariableById(url, ControllerTestSupport.ID_VALUE)) 			 	when: ""GET"" 		 		RequestEntity requestEntity = RequestEntity.get(uri).build(); 		ResponseEntity responseEntity = restTemplate.exchange(requestEntity, Persona.class); 	 	then: 		responseEntity != null 		responseEntity.getStatusCode() == HttpStatus.OK 		responseEntity.getHeaders().getContentType() == MediaType.APPLICATION_XML 		println responseEntity ... ```  Until here **no** mock. The problem in some way: have a .war and run within Tomcat  **Observation One**  I did realize the `MockRestServiceServer`' (`.andExpect(…)`) methods are very similar but not compatible from `MockMvcBuilders`' (`.andExpect(…)`).  **Observation Two**  So, just curious if  ```java RequestEntity requestEntity = RequestEntity.get(uri).build(); ResponseEntity responseEntity = restTemplate.exchange(requestEntity, Persona.class); ```  could be _Mocked_ in some way like:  ```java RequestEntity requestEntity = RequestEntity.get(uri).build(); ResponseEntity responseEntity =  mockMvc.perform(restTemplate.exchange(requestEntity, Persona.class)).andDo(print()) ```  I hope you see the point.  I know it is not crucial or critical. Again Thanks to Spring MVC Test I am able to test the `@Controller` without care if the _client_ is a Web Browser or RestTemplate.  The point is, is not easy test the RestTemplate through the client/consumer perspective.  Thanks.   ---  **Affects:** 4.2 GA, 4.2.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4818378c25c6c52702776058d3acb7acc1e5975a","closed","in: web,","spring-projects-issues","2015-12-22T20:50:44Z","2016-04-06T08:38:14Z"
"","18363","@RequestMapping: How set externally consumes/produces values [SPR-13790]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-13790](https://jira.spring.io/browse/SPR-13790?redirect=false)** and commented  Hello  If I have the following:  ```java public class PersonaFindAllWithProducesUtf8ControllerSupport {  	/** 	 * {@value}  	 */ 	public static final String FINDALL = PersonaUrlGenericHelper.ROOT_GENERIC_PRODUCESUTF8 + PersonaUrlHelper.FINDALL;	  	….  } ```  It to let me do  ```java @RequestMapping(value=PersonaFindAllWithProducesUtf8ControllerSupport.FINDALL) public @ResponseBody Collection findAll(@Value(""#{request.requestURI}"") String url, @RequestParam(defaultValue="""") String format){ ```  It works. I am fine.  Now assuming I have a lot of `@Controllers` with:  ```java @Controller @RequestMapping(method=RequestMethod.GET, produces={MediaType.APPLICATION_XML_VALUE, RequestMappingProducesJsonUtf8.PRODUCES_JSON_UTF_8}) ```  If I want to remove,edit, change something of produces (same case for consumes) I must open each `@Controller`...  I have tried do the following:  ```java /**  * {@value}          */	 public static final String[] PRODUCES = {MediaType.APPLICATION_XML_VALUE, RequestMappingProducesJsonUtf8.PRODUCES_JSON_UTF_8}; ```  To change to:  ```java @Controller @RequestMapping(method=RequestMethod.GET, produces=PersonaFindAllWithProducesUtf8ControllerSupport.PRODUCES) ```  But the compiler says:  > The value for annotation attribute RequestMapping.produces must be an array > initializer  or  ```java @Controller @RequestMapping(method=RequestMethod.GET, produces={PersonaFindAllWithProducesUtf8ControllerSupport.PRODUCES}) ```  But the compiler says:  > Multiple markers at this line > - Type mismatch: cannot convert from String[] to String > - The value for annotation attribute RequestMapping.produces must be a constant >   expression  I don't know if exists a correct syntax or seems that support would needed how a new feature (reason of this issue)  Thanks.   ---  **Affects:** 4.2 GA","closed","status: declined,","spring-projects-issues","2015-12-14T12:13:11Z","2015-12-16T12:58:31Z"
"","18341","JsonPathResultMatchers: How get amount of one element returned when it is not an array? [SPR-13767]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-13767](https://jira.spring.io/browse/SPR-13767?redirect=false)** and commented  Hello  In Spring MVC, assuming that a `@Controller` working with `@ResponseBody` returns a set of domain objects represented in JSON format and through `print()` I can confirm the following:  ```json Body = [ {   ""id"" : ""88"",   ""nombre"" : ""Manuel"",   ""apellido"" : ""Jordan"",   ""fecha"" : 1449370807750 }, {   ""id"" : ""87"",   ""nombre"" : ""Leonardo"",   ""apellido"" : ""Jordan"",   ""fecha"" : 1449370807750 }, {   ""id"" : ""89"",   ""nombre"" : ""Marjorie"",   ""apellido"" : ""Jordan"",   ""fecha"" : 1449370807750 }, {   ... }, {   ... } ] ```  Through Spring MVC Testing and with _hamcrest_ I have the following:  ```java resultActions.andExpect(jsonPath('$').exists()) 		.andExpect(jsonPath('$').isArray()) 		.andExpect(jsonPath('$',hasSize(5))) ... ```  Until here all work fine.  But Assuming the `@Controller` returns just one element and again through `print()` I can see the following:  ```json  Body = {   ""id"" : ""100"",   ""nombre"" : ""Jesús Você"",   ""apellido"" : ""Mão Nuñez"",   ""fecha"" : 1449372342312 } ```  Observe is _not_ an array  I have currently the following:  ```java resultActions.andExpect(jsonPath('$').exists())                         //.andExpect(jsonPath('$').isArray()) <--- fails					                 .andExpect(jsonPath('$.*', hasSize(4) )) ```  Until here it works fine  For the current API for [JsonPathResultMatchers](http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/result/JsonPathResultMatchers.html).  How I can confirm that _one_ json element?  I mean, I want have the same approach/behaviour about the following from XML  ```xml      100     Jesús Você     ""Mão Nuñez""     2015-12-05T22:00:07.756-05:00  ```  ```java resultActions.andExpect(xpath(""persona"").exists()) 		    .andExpect(xpath(""persona"").nodeCount(1)) ```  Thanks   ---  **Affects:** 4.2 GA, 4.2.2","closed","status: bulk-closed,","spring-projects-issues","2015-12-06T03:49:05Z","2019-01-12T02:44:41Z"
"","18340","XpathResultMatchers: How get the amount of elements/fields of a node [SPR-13766]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-13766](https://jira.spring.io/browse/SPR-13766?redirect=false)** and commented  Hello  In Spring MVC, assuming that a `@Controller` working with `@ResponseBody` returns a domain object represented in XML format and through `print()` I can confirm the following:  ```xml Body =       100     Jesús Você     ""Mão Nuñez""     2015-12-05T22:00:07.756-05:00  ```  I have the following for Spring MVC Testing  ```java resultActions.andExpect(xpath(""persona"").exists()) 		.andExpect(xpath(""persona"").nodeCount(1)) 							  		.andExpect(xpath(""persona/id"").exists()) 		.andExpect(xpath(""persona/id"").string(""100"")) 		.andExpect(xpath(""persona/nombre"").exists()) 		.andExpect(xpath(""persona/nombre"").string(""Jesús Você"")) 		.andExpect(xpath(""persona/apellido"").exists()) 		.andExpect(xpath(""persona/apellido"").string(""Mão Nuñez"")) 		.andExpect(xpath(""persona/fecha"").exists()) ```  Until here all work fine.  But again, for  ```xml      100     Jesús Você     ""Mão Nuñez""     2015-12-05T22:00:07.756-05:00  ```  Observe _persona_ element/node contains _four_ elements: id, hombre, apellido and fecha.  For the current API for [XpathResultMatchers](http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/result/XpathResultMatchers.html).  How I can get from the persona element/node that count of four from that set of fields/elements ?  It should be applied for a collection too:  ```xml               88         Manuel         Jordan         2015-12-05T22:00:07.750-05:00                   87         Leonardo         Jordan         2015-12-05T22:00:07.750-05:00      …  ```  Where from each node or element of the collection I want confirm it has the four elements/fields.  Thanks    ---  **Affects:** 4.2 GA, 4.2.2","closed","status: bulk-closed,","spring-projects-issues","2015-12-06T03:12:38Z","2019-01-12T02:44:44Z"
"","18324","How get data about status and exception thrown after to execute a controller method in Spring MVC Testing [SPR-13751]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-13751](https://jira.spring.io/browse/SPR-13751?redirect=false)** and commented  Hello I am working with:  * Gradle * Spock and Spock Reports  I am able to do the following:  ```java resultActions = mockMvc.perform(get(url)).andDo(print()) …. resultActions.andExpect(status().isNotAcceptable()) resultActions.andExpect(status().is(406)) ```  Thanks to Gradle Test reporting with `print()` I can see the following:  > Resolved Exception: > Type = org.springframework.web.HttpMediaTypeNotAcceptableException > … > MockHttpServletResponse: > Status = 406  My requirement is I want report that data for Spock Reports.  **One**: How through the current Spring API I can get the value of 406 to be printed?  Currently I am doing that manually  ```java where: 		 	urlReport << [PersonaXmlFindAllControllerTemplateFactory.findAllWithExtension()] 	classNameReport << [PersonaXmlFindAllController.getSimpleName()] 	methodNameReport << [""findAllWithExtension""] 	statusReport << [406] ```  Something that is confuse for me is (just for testing/experiments purposes) I want to show the exception thrown by Spring, in this case `HttpMediaTypeNotAcceptableException`.  **Two**: How I can do that through the current Spring API?  I have tried through spock the following:  ```java thrown HttpMediaTypeNotAcceptableException ```  But fails, it says it has never thrown. Interesting.  WIth the best intentions, if you have some best practices. Pls share it. I could not find something similar in the current Reference documentation.    ---  **Affects:** 4.2 GA","closed","status: declined,","spring-projects-issues","2015-12-02T02:39:13Z","2015-12-16T19:16:43Z"
"","18310","Use UriTemplate without create a new object (for testing purposes) [SPR-13737]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-13737](https://jira.spring.io/browse/SPR-13737?redirect=false)** and commented  Hello  I am working with Spock Framework and I use the following to let me show the URL being testing/used on Spock Reports  ```java where:  	urlReport << [PersonaControllerTemplateFactory.findOneRequestParamByIdWithParameter(PersonaControllerHelper.ID,""xml"")] ```  Where that method is (_here_ I am using plain text in the constructor for a better understanding):  ```java static String findOneRequestParamByIdWithParameter(String id, String format){     return new UriTemplate(""/personas/xml/persona?id={id}&format={format}"").expand(id, format).toString() } ```  Until here all work fine.  Something to take in note. A method being called from the `where` block _must_ be **static**  Assuming I have many methods to test and with the requirement to show the URL being used for each one. Therefore I must create many static methods.  The problem is that each one requires `new UriTemplate`. So it means the creation of a new object and I can't use a instance variable. So, in someway testing many methods for many urls affect the memory resources.  So is possible use UriTemplate but without crate a new object? If not, seems mandatory create a new feature to accomplish this requirement.  Same situation if we use Rest and the method which uses  `new UriTemplate` is called for many (hundred) users in the same time. it affects the server performance. it creates a lot of objects.  Thanks   ---  **Affects:** 4.2 GA","closed","status: declined,","spring-projects-issues","2015-11-29T22:38:26Z","2015-12-02T00:56:51Z"
"","18309","Support mock-like handler method reference in Spring MVC Test [SPR-13736]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-13736](https://jira.spring.io/browse/SPR-13736?redirect=false)** and commented  The [HandlerResultMatchers](http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/result/HandlerResultMatchers.html) class contains various `methodName(...)` methods for validating that a particular method was invoked on the handler (i.e., _controller_); however, each such `methodName(...)` method currently requires a hard coded `String` or a reflection-based `Method` (which indirectly also requires a hard coded `String`).  Please add support for mocking a `@RequestMapping` method in a `@Controller` similar to how `MvcUriComponentsBuilder` works.  Something like this:  ```java .andExpect(handler().method(     fromMethodCall(on(PersonaXmlFindOneController.class).findOnePathVariableById(...)) ) ```  The purpose is to avoid hard coding method names as strings like in the following:  ```java .andExpect(handler().methodName(""findOnePathVariableById"")) .andExpect(handler().methodName(is(""findOnePathVariableById""))) ```  If someone refactors a controller and renames a `@RequestMapping` method, the above expectations will then fail since the hard coded method names do not get updated as part of the refactoring.  **Note**: it _should_ ignore the arguments to be passed. The point is only confirm the method has been called/executed.  Therefore perhaps a similar syntax as shown below would be nice  ```java .andExpect(handler().methodCalled( ControllerSomethingBuilder.methodOn(PersonaXmlFindOneController.class).findOnePathVariableById()) ```    ---  **Affects:** 4.2 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4b1183582a693d3c7bdf3596d1190a700e171ed4","closed","type: enhancement,","spring-projects-issues","2015-11-29T21:45:03Z","2016-04-06T08:38:13Z"
"","18307","Improve Reference Documentation and JavaDoc for HandlerResultMatchers's methods [SPR-13734]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-13734](https://jira.spring.io/browse/SPR-13734?redirect=false)** and commented  For the [HandlerResultMatchers](http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/result/HandlerResultMatchers.html)  class It has valuable methods for Testing purposes.  I did realize there are no examples either in the Spring Reference documentation or in the JavaDoc about them. I did a research on Google and I could not find an example working through **handler()**.  I suggest to add something like the following:  ```java .andExpect(handler().handlerType(PersonaXmlFindOneController.class)) .andExpect(handler().methodName(""findOnePathVariableById"")) .andExpect(handler().methodName(is(""findOnePathVariableById""))) ```  I think it is valuable for the community.  Also, the HandlerResultMatchers's methodName has three signatures:  1. method(Method method) 2. methodName(org.hamcrest.Matcher matcher) 3. methodName(String name)  In my previous snippet code I have used 2 and 3, but is confusing for me how to use the `method(Method method)` version.  I need an example of that, but I did realize [Method](http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Method.html) is based on _reflection_ (if my memory does not fail me, is verbose).   ---  **Affects:** 4.2 GA","closed","status: declined,","spring-projects-issues","2015-11-29T17:39:51Z","2019-01-11T19:31:33Z"
"","18286","Spock does not work for an expected ""matched invocations"" working through @WebAppConfiguration [SPR-13711]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-13711](https://jira.spring.io/browse/SPR-13711?redirect=false)** and commented  Hello  I am working with  * STS * Gradle * Spock Core/Spock Reports/Spock Spring  I have the following test code:  ```java @WebAppConfiguration @ContextConfiguration(classes=[RootApplicationContextConfig.class,ServletApplicationContextConfig.class]) @SuppressWarnings(""deprecation"") class PersonaXmlFindOneControllerTest extends Specification { 	 	@Autowired 	private WebApplicationContext webApplicationContext; 	 	private MockMvc mockMvc; 	 	private PersonaXmlFindOneController personaXmlFindOneController   	def setup(){ 		mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build(); 		personaXmlFindOneController = webApplicationContext.getBean(PersonaXmlFindOneController.class); 		println personaXmlFindOneController.toString() 	} 			 	def ""findOneRequestParamById deberia ser llamado""(){ 		 		String url = null 		ResultActions resultActions = null 		 		given: ""The URL being used is "" 			 		   url = PersonaControllerSupport.ROOT_URL_XML + PersonaUrlHelperComplement.FINDONE + PersonaControllerSupport.ID_PARAM; 		 		when: ""When the URL is being calling with a GET"" 		 			resultActions = mockMvc.perform(get(url, PersonaControllerSupport.ID)).andDo(print()) 										 		 		then: ""...."" 		 			resultActions.andExpect(status().isOk()) 						 .andExpect(content().contentType(MediaType.APPLICATION_XML)) 				  						 .andExpect(xpath(""persona"").exists()) 						 .andExpect(xpath(""persona"").nodeCount(1)) 						 .andExpect(xpath(""persona/id"").exists()) 						 .andExpect(xpath(""persona/id"").string(""100"")) 						 .andExpect(xpath(""persona/nombre"").exists()) 						 .andExpect(xpath(""persona/nombre"").string(""Jesús Você"")) 						 .andExpect(xpath(""persona/apellido"").exists()) 						 .andExpect(xpath(""persona/apellido"").string(""Mão Nuñez"")) 						 .andExpect(xpath(""persona/fecha"").exists()) 		//then:	 						 			  			//1 * personaXmlFindOneController.findOneRequestParamById(_ as String)			  		  	} ```  The code works fine. It pass.  **Furthemore**: through _Gradle Test Report_ thanks to **andDo(print())** I can confirm that _personaXmlFindOneController.findOneRequestParamById_ has been called.  It means  ``` Handler:              Type = com.manuel.jordan.controller.xml.PersonaXmlFindOneController            Method = public com.manuel.jordan.domain.xml.PersonaXml com.manuel.jordan.controller.xml.PersonaXmlFindOneController.findOneRequestParamById(java.lang.String)  ```  Now If enable  ```java //then:	 						 			  	//1 * personaXmlFindOneController.findOneRequestParamById(_ as String)			  		 ```  The code fails,  ``` Too few invocations for:  1 * personaXmlFindOneController.findOneRequestParamById(_ as String)   (0 invocations)  Unmatched invocations (ordered by similarity):  None ```  Observe that in the _setup_ method, it has been retrieved through  ```java personaXmlFindOneController = webApplicationContext.getBean(PersonaXmlFindOneController.class); ```  I know it is not a bug, but I think the solution (I need your support) is a missing extra configuration. And that should be added or share it in the Spring MVC Testing reference documentation.   ---  **Affects:** 4.2 GA, 4.2.2","closed","status: declined,","spring-projects-issues","2015-11-20T14:51:18Z","2015-11-30T16:43:40Z"
"","18282","Spock Framework does not inject WebApplicationContext (Spring MVC Test) [SPR-13707]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-13707](https://jira.spring.io/browse/SPR-13707?redirect=false)** and commented  Hello  I have a project with the following:  ```java @WebAppConfiguration @RunWith(SpringJUnit4ClassRunner.class) @FixMethodOrder(MethodSorters.NAME_ASCENDING) @ContextConfiguration(classes={RootApplicationContextConfig.class,ServletApplicationContextConfig.class}) @SuppressWarnings(""deprecation"") public class _01_PersonaXmlFindOneControllerTest extends PersonaControllerSupport {  	private static final Logger logger = LoggerFactory.getLogger(_01_PersonaXmlFindOneControllerTest.class); 		 	@Rule 	public TestName name = new TestName();  	@Autowired     private WebApplicationContext webApplicationContext; 	 	private MockMvc mockMvc;  	 	@Before     public void setUp() {         mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();     } ```  it works fine for any `@Test` method.  Now, I am trying to integrate Spock  ```java @WebAppConfiguration @ContextConfiguration(classes=[RootApplicationContextConfig.class,ServletApplicationContextConfig.class]) class PersonaXmlFindOneControllerTest extends Specification { 	 	@Autowired 	private WebApplicationContext webApplicationContext; 	 	def MockMvc mockMvc;  	def setup(){ 		mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build(); 	} 		 	def ""uno""(){ 		expect: 			true 	} } ```  I always get  ``` com.manuel.jordan.controller.xml.PersonaXmlFindOneControllerTest > uno FAILED     java.lang.IllegalArgumentException at PersonaXmlFindOneControllerTest.groovy:31 …   The following problems occurred: java.lang.IllegalArgumentException: WebApplicationContext is required ```  The problem is Spock is not able to _retrieve_ and _inject_ the WebApplicationContext.  I did a research on Google, _seems_ Spring Boot resolves this through **`@IntegrationTest`**… but I want to know the solution for **Spring Core**.  What is missing about configuration? Is there a special annotation?   ---  **Affects:** 4.2 GA, 4.2.2","closed","status: invalid,","spring-projects-issues","2015-11-19T23:20:34Z","2019-01-12T05:23:25Z"
"","18262","Why MockMvcResultMatchers has not a xpath method with org.hamcrest.Matcher? [SPR-13687]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-13687](https://jira.spring.io/browse/SPR-13687?redirect=false)** and commented  Hello  Just curious and in a someway confused.  If the [MockMvcResultMatchers](http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/result/MockMvcResultMatchers.html) class has the **jsonPath** method with the following signatures:  * jsonPath(String expression, org.hamcrest.Matcher\ matcher) * jsonPath(String expression, Object... args)  And the **xpath** method with the following signatures:  * xpath(String expression, Map namespaces, Object... args) * xpath(String expression, Object... args)  Why does not exist?  * xpath(String expression, org.hamcrest.Matcher\ matcher)  I think very valuable use hamcrest for XML too.  ---  **Affects:** 4.2 GA  **Issue Links:** - #17936 Introduce JsonPath matchers for empty and non-empty content - #19287 XpathExpectationsHelper should support Hamcrest matching against typed objects","closed","type: enhancement,","spring-projects-issues","2015-11-14T15:39:39Z","2019-01-11T19:26:15Z"
"","18259","Possible bug on Spring MVC Test about retrieving XML [SPR-13684]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-13684](https://jira.spring.io/browse/SPR-13684?redirect=false)** and commented  Hello  I have the following configuration class:  ```java @Configuration public class HttpMessageConverterConfig {  	@Bean     public MarshallingHttpMessageConverter marshallingMessageConverter() {         MarshallingHttpMessageConverter converter = new MarshallingHttpMessageConverter();         converter.setMarshaller(jaxbMarshaller());         converter.setUnmarshaller(jaxbMarshaller());         return converter;     } 	     @Bean     public Jaxb2Marshaller jaxbMarshaller() {         Jaxb2Marshaller jaxbMarshaller = new Jaxb2Marshaller();         jaxbMarshaller.setClassesToBeBound(PersonaXml.class,                                                                        PersonaCollection.class,                                                                        GenericCollection.class,                                                                       PersonaHibrid.class);                     Map props = new HashMap<>();         props.put(Marshaller.JAXB_ENCODING,""UTF-8"");         props.put(Marshaller.JAXB_FORMATTED_OUTPUT, true);         jaxbMarshaller.setMarshallerProperties(props);                  return jaxbMarshaller;     } 	     @Bean     public MappingJackson2HttpMessageConverter mappingJackson2HttpMessageConverter(){     	MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter();     	converter.setPrettyPrint(true);		     	return converter;     }      }  ```  Furthermore, I have these two `@Controllers` methods  ```java 	@RequestMapping(value=PersonaUrlHelperComplement.FINDONE) 	public @ResponseBody PersonaXml findOneRequestParamById(@RequestParam String id){ 		logger.info(""findOneRequestParamById called...""); 		return personas.get(id); 	}  	// With Extension .xml 	 	@RequestMapping(value=PersonaUrlXmlHelper.FINDONE_XML_EXTENSION) 	public @ResponseBody PersonaXml findOneRequestParamByIdWithExtension(@RequestParam String id){ 		logger.info(""findOneRequestParamByIdWithExtension called...""); 		return personas.get(id); 	}	  ```  If I execute any of the following URLs in a **Web Browser**:  * http://localhost:8080/spring-webmvc-1.0.0/personas/xml/persona?id=100 (no extension) * http://localhost:8080/spring-webmvc-1.0.0/personas/xml/persona.xml?id=100 (with xml extension)  I can see the following output:  ```xml       100      Jesús Você      Mão Nuñez      2015-11-13T11:40:59.020-05:00  ```  Do realize about the weird characters  **ú ê ã ñ** appears fine.  I am fine until here. About Testing  I have the two following `@Test` methods:  ```java  @Before public void setUp() {     mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build(); }        @Test                                                                  public void findOneRequestParamByIdTest() throws Exception {	       logger.info(""Testing: {}"", name.getMethodName());       mockMvc.perform(get(PersonaUrlXmlHelperComplement.ROOT_URL_XML +                                             PersonaUrlHelperComplement.FINDONE +                                            ID_PARAM, ID))                 .andDo(print())                 .andExpect(status().isOk())                 .andExpect(content().contentType(MediaType.APPLICATION_XML));  }   @Test  public void findOneRequestParamByIdWithExtensionTest() throws Exception {       logger.info(""Testing: {}"", name.getMethodName());       mockMvc.perform(get(PersonaUrlXmlHelperComplement.ROOT_URL_XML +                                    PersonaUrlXmlHelper.FINDONE_XML_EXTENSION +                                   ID_PARAM, ID))                 .andDo(print())                 .andExpect(status().isOk())                 .andExpect(content().contentType(MediaType.APPLICATION_XML));  } ```  Through  1. Gradle test task 2. or even doing in the Test Class right click and selecting Run As -> JUnit Test  I can see **always** the following thanks to the _.andDo(print())_  ``` MockHttpServletResponse:            Status = 200     Error message = null           Headers = {Content-Type=[application/xml]}      Content type = application/xml              Body =       100     JesÃºs VocÃª     MÃ£o NuÃ±ez     2015-11-13T11:38:17.033-05:00       Forwarded URL = null    Redirected URL = null           Cookies = [] ```  See that the weird characters fail.  I can see:  Headers = {Content-Type=[application/xml]}  where does not contain nothing about UTF-8.  I don't know if it is related with [Add MediaType.APPLICATION_JSON_UTF8 and improve documentation](#18178), of course for XML.  What is missing or wrong?    ---  **Affects:** 4.2 GA","closed","status: declined,","spring-projects-issues","2015-11-13T16:54:06Z","2019-01-14T04:41:10Z"
"","18241","Error in RequestEntity's javadoc [SPR-13666]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-13666](https://jira.spring.io/browse/SPR-13666?redirect=false)** and commented  Hello  In [RequestEntity](http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/RequestEntity.html) says  ```java RequestEntity request = RequestEntity.post(new URI(""http://example.com/bar"").accept(MediaType.APPLICATION_JSON).body(body); ```  Must be  ```java RequestEntity request = RequestEntity.post(new URI(""http://example.com/bar"")).accept(MediaType.APPLICATION_JSON).body(body); ```    ---  **Affects:** 4.1 GA, 4.2 GA  **Backported to:** [4.1.9](https://github.com/spring-projects/spring-framework/milestone/133?closed=1)","closed","type: documentation,","spring-projects-issues","2015-11-10T20:36:49Z","2015-11-15T17:03:14Z"
"","18228","Explain how should work ContentNegotiationConfigurer's defaultContentType method [SPR-13652]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-13652](https://jira.spring.io/browse/SPR-13652?redirect=false)** and commented  Hello I am doing some experiments about Spring MVC and REST  I have the following Domain class  ```java @XmlRootElement(name=""persona"") @XmlType(propOrder = {""id"",""nombre"",""apellido"",""fecha""}) public class Persona implements Serializable {  	private static final long serialVersionUID = 3448529171656195403L; 	 	private String id; 	private String nombre; 	private String apellido; 	 	private Date fecha;  	public Persona(){  	}  	@XmlElement(name=""id"") 	public String getId() { 		return id; 	} 	public void setId(String id) { 		this.id = id; 	} 	 	@XmlElement(name=""nombre"") 	public String getNombre() { 		return nombre; 	} 	public void setNombre(String nombre) { 		this.nombre = nombre; 	} 	 	@XmlElement(name=""apellido"") 	public String getApellido() { 		return apellido; 	} 	public void setApellido(String apellido) { 		this.apellido = apellido; 	} 	 	@XmlElement(name=""fecha"") 	public Date getFecha() { 		return fecha; 	} 	public void setFecha(Date fecha) { 		this.fecha = fecha; 	}  	@Override 	public String toString() { 		StringBuilder builder = new StringBuilder(); 		builder.append(""Persona [id=""); 		builder.append(id); 		builder.append("", nombre=""); 		builder.append(nombre); 		builder.append("", apellido=""); 		builder.append(apellido); 		builder.append("", fecha=""); 		builder.append(fecha); 		builder.append(""]""); 		return builder.toString(); 	} 		 } ```  With  ```java @Controller @RequestMapping(value=PersonaRequestMappingHelper.ROOT,  			    method=RequestMethod.GET, 			    produces={MediaType.APPLICATION_XML_VALUE, RequestMappingHelper.PRODUCES_JSON_UTF_8}) public class PersonaFindOneController {  ….  @RequestMapping(params=RequestMappingHelper.ID) public @ResponseBody Persona findOneRequestParamById(@RequestParam String id, @Value(""#{request.requestURI}"") String url, @RequestParam(defaultValue="""") String format){  ```  And finally  ```java @EnableWebMvc @Configuration public class WebMvcConfig extends WebMvcConfigurerAdapter {  ….  @Override public void configureMessageConverters(List> converters) { 	converters.add(httpMessageConverterConfig.marshallingMessageConverter()); 	converters.add(httpMessageConverterConfig.mappingJackson2HttpMessageConverter()); }  ```  Until here two things  1. The converters works fine: XML and JSON 2. I know `@EnableWebMvc` creates by default ContentNegotiationManager  According with the following classes:  * [ContentNegotiationManagerFactoryBean](http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/accept/ContentNegotiationManagerFactoryBean.html) * [ContentNegotiationConfigurer](http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/config/annotation/ContentNegotiationConfigurer.html)  > **setDefaultContentType** >  > public void setDefaultContentType(MediaType contentType) >  > Set the default content type to use when no content type is requested. > By default this is not set. >  > **See Also**: > setDefaultContentTypeStrategy(org.springframework.web.accept.ContentNegotiationStrategy)  Careful with the following from above: _By default this is not set._  Now when I use this URL (no extension nor parameter)  * http://localhost:8080/spring-webmvc-1.0.0/personas?id=100  It shows by default XML how format.  Why? If there is no default why XML?  I could assume the order of the following would be the reason  ```java @Override public void configureMessageConverters(List> converters) { 	converters.add(httpMessageConverterConfig.marshallingMessageConverter()); 	converters.add(httpMessageConverterConfig.mappingJackson2HttpMessageConverter()); } ```  Even changing declaring inverse order:  ```java @Override public void configureMessageConverters(List> converters) { 	converters.add(httpMessageConverterConfig.mappingJackson2HttpMessageConverter()); 	converters.add(httpMessageConverterConfig.marshallingMessageConverter()); } ```  I get always XML.  **Alpha:** What is the behaviour here? What Spring does to always see XML when according the documentation there is no a default **DefaultContentType**.  BTW If I use the following URLS with extension works fine  * http://localhost:8080/spring-webmvc-1.0.0/personas.xml?id=100 (shows in xml) * http://localhost:8080/spring-webmvc-1.0.0/personas.json?id=100 (shows in json)  Now in other project, clone of the previous, I've added the following  ```java @Override public void configureContentNegotiation(ContentNegotiationConfigurer configurer) { 		configurer.favorPathExtension(true)  //default -> true 		          .favorParameter(true)      //default -> false 		          .ignoreAcceptHeader(false) //default -> false 		          .defaultContentType(MediaType.APPLICATION_JSON) 		          .mediaType(""xml"", MediaType.APPLICATION_XML) 		          .mediaType(""json"", MediaType.APPLICATION_JSON); } ```  Observe the line: _.defaultContentType(MediaType.APPLICATION_JSON)_ I _expect_ **JSON** how Default Content Type  Again with the same URL  * http://localhost:8080/spring-webmvc-1.0.0/personas?id=100  I get XML and not the expected JSON format.  And again If I use the following URLS with extension works fine  * http://localhost:8080/spring-webmvc-1.0.0/personas.xml?id=100 (shows in xml) * http://localhost:8080/spring-webmvc-1.0.0/personas.json?id=100 (shows in json)  **Beta** What is wrong?. Why _.defaultContentType(MediaType.APPLICATION_JSON)_  does not work how is expected?  Thanks.   ---  **Affects:** 4.2 GA","closed","status: declined,","spring-projects-issues","2015-11-06T13:32:51Z","2015-11-17T22:28:20Z"
"","18223","Improve Reference Documentation about ignoreAcceptHeader for Spring MVC and REST [SPR-13646]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-13646](https://jira.spring.io/browse/SPR-13646?redirect=false)** and commented  Hello  I am doing some experiments through Spring MVC (+- Rest)  I have read carefully the following valuables tutorials:  * [Content Negotiation using Spring MVC](https://spring.io/blog/2013/05/11/content-negotiation-using-spring-mvc) * [Content Negotiation using Views](http://spring.io/blog/2013/06/03/content-negotiation-using-views/)  I have read in many places that use `HTTP Accept header` is not recommended, for example from the first previous link and from here:  * [REST with Spring - ContentNegotiatingViewResolver vs. HttpMessageConverter+ResponseBody Annotation](https://dzone.com/articles/rest-spring)  I think wise explain the following in the reference documentation:  **One:** Why not use _HTTP Accept header_? it from the source (you - Spring) **Two:** If _HTTP Accept header_ is not recommended. Why it is used how third control of verification through _ContentNegotiationManager_?. If there is a mandatory situation pls share it. **Three:** If _HTTP Accept header_ is not recommended. Why the [ContentNegotiationManagerFactoryBean](https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManagerFactoryBean.java) has the following line how default:  ```java private boolean ignoreAcceptHeader = false; ```  why not **true**?  **Four:** If _ignoreAcceptHeader_ is set to **true**. How it affects a **RestTemplate** (and the async version) where I can set the **Accept** value? (it from the client/consumer).  About four: I did realize is valid use `@PathVariable` with extension, something like  * localhost:8080/manoloapp/people/100.json (extension json)  it for:  ```java @RequestMapping(value=""/people/{id}"") ```  To be honest I thought a URI _should not_ include an extension. It should be agnostic and through the **Accept** property/header through the RestTemplate should be indicated. But due this problem with **Accept** seems an extension is mandatory for a URI. (Of course I can't use a param (?format=something) for a URI)  Furthermore a URI can be used within a page (.JSP/HTML) how a link, now how:  * localhost:8080/manoloapp/people/100.html (extension html)  Kind Regards  Note: I think this post has some relation with [Clarify javadoc for ContentNegotiationConfigurer's ignoreAcceptHeader](#18219)   ---  **Affects:** 4.2 GA","closed","status: declined,","spring-projects-issues","2015-11-05T23:57:06Z","2019-01-14T04:41:19Z"
"","18219","Clarify javadoc for ContentNegotiationConfigurer's ignoreAcceptHeader [SPR-13642]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-13642](https://jira.spring.io/browse/SPR-13642?redirect=false)** and commented  Hello  For the following classes:  * [ContentNegotiationManagerFactoryBean](http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/accept/ContentNegotiationManagerFactoryBean.html) * [ContentNegotiationConfigurer](http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/config/annotation/ContentNegotiationConfigurer.html)  Both have practically the same introduction or explanation, where I can see for example:  > favorPathExtension	PathExtensionContentNegotiationStrategy	Yes  If I do click in **favorPathExtension** for each class I can read for each method description that the default value is Yes. Same appreciation for **favorParameter**  > favorParameter	ParameterContentNegotiationStrategy	-  Where here is _false_ by default.  Until here, the introduction and method description match well. They are the same.  I have checked each row of the table (5 items)  Here two observations:  One:  > defaultContentTypeStrategy	ContentNegotiationStrategy -  If I do click in defaultContentTypeStrategy (for both classes) the setDefaultContentTypeStrategy does not indicate the default value.  Two: (here the reason of this post)  > ignoreAcceptHeader	HeaderContentNegotiationStrategy	 Yes  Theoretically the method description (for both classes) should be **yes** by default, but really says  > By default this value is set to false.  How you can see it says **false**. Not **yes** how is expected.  I did not check the source code through GitHub, to see really what is the default value, but here there is no a match about the table against the method description. Here the error. So what is really the default value?.  Thanks.    ---  **Affects:** 4.2.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ac975df448eed9cad620b895f4999a10237df1f0","closed","type: documentation,","spring-projects-issues","2015-11-04T13:46:00Z","2015-11-15T17:03:14Z"
"","18208","Create a new appendix on reference documentation listing namespaces:component with detailed content [SPR-13630]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-13630](https://jira.spring.io/browse/SPR-13630?redirect=false)** and commented  Hello  I am giving a training about Spring Web.  And in a slide I have the following:  > A default ContentNegotiationManager is created > - if  or `@EnableWebMvc` specified > - Or define your own (next slide)  Let's call above **Zulu**  Just curious, I want to confirm this, but I am not able to find it explicitly.  I already have checked:  * [Class ContentNegotiationManager](http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/accept/ContentNegotiationManager.html) * [Class ContentNegotiationManagerFactoryBean](http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/accept/ContentNegotiationManagerFactoryBean.html) * [Class ContentNegotiationConfigurer](http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/config/annotation/ContentNegotiationConfigurer.html) * [Spring Framework Reference Documentation](http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/)  Without the desired result...  Due this experience, _being polite and with the best intentions, respecting your important job_, I want to ask for the following:  For _each_ **Spring Portfolio** project, and therefore for each _Reference Documentation_, create a **special detailed index** listing the following:  1. Each _namespace:component_ **plus** if exists its equivalent _annotation_ 2. Who is the _master/central_ class/bean behind the scenes for each _namespace:component_ 3. Each attribute with its explanation for each _namespace:component_. For example I can use the API/JavaDoc for `@Annotations` 4. What are all the classes/beans created by behind the scenes by Spring for each _namespace:component_ (Omicron - through this, it should confirm **Zulu**)  I think it improves the current documentation, and even I thought ""If a new Spring Developer starts to work in SpringSource/Pivotal from where get that information about Omicron?""  For example in [21.16.1 Enabling the MVC Java Config or the MVC XML Namespace](http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#mvc-config-enable) shows the following (see attached image):  Thanks by your understanding.    ---  **Affects:** 4.2 GA  **Attachments:** - [Screen Shot 2015-11-01 at 12.41.24 PM.png](https://jira.spring.io/secure/attachment/23200/Screen+Shot+2015-11-01+at+12.41.24+PM.png) (_95.09 kB_)","closed","status: declined,","spring-projects-issues","2015-11-01T17:38:19Z","2015-11-17T22:26:35Z"
"","18178","Add MediaType.APPLICATION_JSON_UTF8 and improve documentation [SPR-13600]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-13600](https://jira.spring.io/browse/SPR-13600?redirect=false)** and commented  Hello  I have the following declared:  ```java @JsonPropertyOrder(value={""id"",""nombre"",""apellido"",""fecha""}) public class PersonaJson implements Serializable { 	 	private static final long serialVersionUID = 7212492147213027538L; 	 	private String id; 	private String nombre; 	private String apellido; 	 	private Date fecha;  	public PersonaJson(){  	}  	@NotNull(message=""{field.null}"") 	@JsonProperty(value=""id"") 	public String getId() { 		return id; 	} 	public void setId(String id) { 		this.id = id; 	} 	 	@NotNull(message=""{field.null}"") 	@Size(min=5, max=20, message=""{persona.nombre.size}"") 	@JsonProperty(value=""nombre"") 	public String getNombre() { 		return nombre; 	} ```  With:  ```java @Bean    public MappingJackson2HttpMessageConverter mappingJackson2HttpMessageConverter(){             MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter();                                                                                             converter.setPrettyPrint(true);		             return converter;    } ```  And with  ```java @EnableWebMvc @Configuration public class WebMvcConfig extends WebMvcConfigurerAdapter {         @Autowired 	private HttpMessageConverterConfig httpMessageConverterConfig; ….          @Override 	public void configureMessageConverters(List> converters) { 	    converters.add(httpMessageConverterConfig.mappingJackson2HttpMessageConverter()); 	}  ```  The data generated from the server is declared in this way (testing purpose)  ```java public static PersonaJson crearPersonaMix(){ 		PersonaJson persona = new PersonaJson(); 		persona.setId(""100""); 		persona.setNombre(""Jesús Você""); 		persona.setApellido(""Mão Nuñez""); 		persona.setFecha(new Date()); 		return persona; 	} ```  Note: Observe these characters **ú ê ã ñ**  I have two `@Controller`'s  For **One**  ```java @Controller @RequestMapping(value=""…."", method=RequestMethod.GET) public class PersonaJsonFindOneController {  @RequestMapping(value=""…."") 	public @ResponseBody PersonaJson findOneRequestParamById(@RequestParam String id){ 		logger.info(""findOneRequestParamById called...""); 		return personas.get(id); 	}  ```  Observe there is no a **produces=MediaType.APPLICATION_JSON_VALUE**  When I use the URL in any browser Safari, FF, Chrome, Opera I can see the data and the ""weird"" characters in peace. It how 02.png  For **Two**  ```java @Controller @RequestMapping(value=""..."",  			    method=RequestMethod.GET,  			    produces=MediaType.APPLICATION_JSON_VALUE) public class PersonaJsonFindOneWithProducesController  @RequestMapping(value=""…."") 	public @ResponseBody PersonaJson findOneRequestParamById(@RequestParam String id){ 		logger.info(""findOneRequestParamById called...""); 		return personas.get(id); 	}  ```  Observe **now** there is a **produces=MediaType.APPLICATION_JSON_VALUE**  When I use the URL (the other for that controller) in any browser Safari, FF, Chrome, Opera I **can't** see the data and the ""weird"" characters in peace.  It how 01.png  In FF if I enable [JSONView](http://jsonview.com/) I can see now all ok… It how 02.png  Conclusion: Just thinking I need just install that add-on to each web browser (of course using an equivalent).  For Opera: I just used  * [JsonViewer](https://addons.opera.com/en/extensions/details/jsonviewer/?display=en)  For Chrome:  * [JSONView](http://jsonview.com/) same creator for FF now for Chrome  or (not both)  * [JSON Viewer](https://chrome.google.com/webstore/detail/json-viewer/gbmdgpbipfallnflgajpaliibnhdgobh)  The problem is that for that browsers (non FF) I still get the not desired results, it how 01.png  Therefore  * If `@Controller` does not use _produces=MediaType.APPLICATION_JSON_VALUE_ all works fine * If `@Controller` does use _produces=MediaType.APPLICATION_JSON_VALUE_   * Only works on FF with [JSONView](http://jsonview.com/), fails in the others Web Browser, with an equivalent add-on.  Therefore I don't know if :  (A) I have any kind of missing configuration in some `@Configuration`/`@Bean` (B) I am using the wrong add-ons for the non-FF browsers.  Assuming is (B) I think is wise share the solution to the community in the reference documentation.  ---  **Affects:** 4.2 GA  **Attachments:** - [01.png](https://jira.spring.io/secure/attachment/23191/01.png) (_13.76 kB_) - [02.png](https://jira.spring.io/secure/attachment/23190/02.png) (_15.30 kB_)  **Issue Links:** - #18209 Allow specifying HTTP response Content-Type without losing default charset - #19280 Document why ""charset=UTF-8"" is specified for JSON and not for XML  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/09cb286c842fb855d01325e7e80280effbacbba3, https://github.com/spring-projects/spring-framework/commit/994a11da3e3d9024c6f1cd0be557c69a683d2704, https://github.com/spring-projects/spring-framework/commit/62cd6ad526dac77484af4737c102c3aae5bc82a9","closed","type: task,","spring-projects-issues","2015-10-22T19:36:06Z","2019-01-14T04:41:28Z"
"","18108","Explain when to use MediaType constants [SPR-13531]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-13531](https://jira.spring.io/browse/SPR-13531?redirect=false)** and commented  Hello  I know work around  ```java @RequestMapping(value=""something"",  			    method=RequestMethod.GET, 			    produces=MediaType.APPLICATION_XML_VALUE) ```  ```java @RequestMapping(value=""something"",  			    method=RequestMethod.GET, 			    produces=MediaType.APPLICATION_JSON_VALUE) ```  It for REST working around the `@ResponseBody`  To load a JSP/HTML view my method returns a String to be resolved later through a ViewResolver's implementation  I am wondered when has sense use:  - MediaType.TEXT_HTML_VALUE  Thank you.   ---  **Affects:** 4.1 GA, 4.2 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b7b8d854d9ddd9f4082bd8ede35ca282e22ea463","closed","in: web,","spring-projects-issues","2015-10-02T21:50:08Z","2015-11-15T17:03:14Z"
"","18107","Explain when and why use Jaxb2RootElementHttpMessageConverter vs MarshallingHttpMessageConverter [SPR-13530]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-13530](https://jira.spring.io/browse/SPR-13530?redirect=false)** and commented  Hello  I have the following configuration:  ```java  @Bean public MarshallingHttpMessageConverter marshallingMessageConverter() {     MarshallingHttpMessageConverter converter = new MarshallingHttpMessageConverter();     converter.setMarshaller(jaxbMarshaller());     converter.setUnmarshaller(jaxbMarshaller());     return converter; }  @Bean public Jaxb2Marshaller jaxbMarshaller() {     Jaxb2Marshaller jaxbMarshaller = new Jaxb2Marshaller();     jaxbMarshaller.setClassesToBeBound(PersonaXml.class, PersonaCollection.class, GenericCollection.class);            Map props = new HashMap<>();     props.put(Marshaller.JAXB_ENCODING,""UTF-8"");     props.put(Marshaller.JAXB_FORMATTED_OUTPUT, true);     jaxbMarshaller.setMarshallerProperties(props);         return jaxbMarshaller; } ```  It works fine.  Just in case consider that code works around with  ```java @XmlRootElement(name=""persona"") @XmlType(propOrder = {""id"",""nombre"",""apellido"",""fecha""}) public class PersonaXml implements Serializable {  	private static final long serialVersionUID = -2236860541513419944L; 	 	private String id; 	private String nombre; 	private String apellido; 	 	private Date fecha;  	public PersonaXml(){  	}  	@XmlElement(name=""id"") 	public String getId() { 		return id; 	} 	public void setId(String id) { 		this.id = id; 	} 	 	@XmlElement(name=""nombre"") 	public String getNombre() { 		return nombre; 	} 	public void setNombre(String nombre) { 		this.nombre = nombre; 	} ... ```  and  ```java @XmlRootElement(name=""generic-collection"") public class GenericCollection {  	private Collection collection; 	 	public GenericCollection(){ 		 	} 	 	public GenericCollection(Collection collection){ 		this.collection = collection; 	} 	 	@XmlElement(name=""item"")     public Collection getCollection(){     	return collection;     } } ```  Again all work fine.  **Note**: I am using JAXB2 annotations how you can see.  It from package:  - javax.xml.bind.annotation  After to read some documentation I arrived to here [MvcConfiguration.java](https://github.com/paulc4/mvc-content-neg/blob/master/src/main/java/rewardsonline/accounts/MvcConfiguration.java)  Where it shows:  ```java @Override 	public void configureMessageConverters( 			List> converters) {  		// List is initially empty. Create and configure what we need. 		MappingJacksonHttpMessageConverter jmc = new MappingJacksonHttpMessageConverter(); 		jmc.setPrettyPrint(true); 		logger.info(""Creating Jackson V1 convertor: "" 				+ jmc.getClass().getSimpleName()); 		converters.add(jmc);  		Jaxb2RootElementHttpMessageConverter j2 = new Jaxb2RootElementHttpMessageConverter(); 		converters.add(j2); 		return; 	} ```  I can see Paul uses **Jaxb2RootElementHttpMessageConverter**  My question is how the titles says: - Explain when and why use Jaxb2RootElementHttpMessageConverter vs MarshallingHttpMessageConverter  It for the reference documentation and for the API too  Because after to check the current API, I can see in left part where all the classes/interfaces are listed the following too:  1. Jaxb2CollectionHttpMessageConverter 2. Jaxb2Marshaller 3. Jaxb2RootElementHttpMessageConverter  Where I already have used the second, but wondered when use the first and third.  I am confused because my code already uses JABX2 annotations and through MarshallingHttpMessageConverter + Jaxb2Marshaller I can work in peace.  So again, when use the first and third.  Even more, in this other JIRA/post: [Jaxb2RootElementHttpMessageConverter doesn't work well with class with @XmlAnyElement](#14895)  **Rossen Stoyanchev** _says_: ""Have you considered using MarshallingHttpMessageConverter? It seems to match the behavior you want.""  Note: BTW I don't have explicitly declared JAXB2 how a dependency on my build.gradle file. Just Jackson 2. And all work fine.   ---  **Affects:** 4.2 GA, 4.2.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/da707c15b370f167200e95d78cd232f7d25b5467  0 votes, 6 watchers","closed","type: documentation,","spring-projects-issues","2015-10-02T21:37:31Z","2019-01-14T04:41:38Z"
"","18083","Improve documentation about CookieLocaleResolver vs SessionLocaleResolver [SPR-13505]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-13505](https://jira.spring.io/browse/SPR-13505?redirect=false)** and commented  Hello  In the Reference Documentation, for the section ""21.8. Using locales"" Where I can see the sub sections:  21.8.4. SessionLocaleResolver 21.8.5. LocaleChangeInterceptor  Just curious if is possible add a note about when use each approach, advantages and disadvantages for each one.  If exists some relation or impact about ""SessionLocaleResolver"" for Spring Session and Spring Cloud.  Thanks.   ---  **Affects:** 4.2 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6d369308cc0799da08154c51af9d8629d0d38d70","closed","type: documentation,","spring-projects-issues","2015-09-24T20:45:44Z","2015-11-15T17:03:14Z"
"","18024","Possible bug on Spring 'tags/form' for input title and placeholder attributes working with Spring 'message' element [SPR-13444]","**[Manuel Jordan](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_pompeii)** opened **[SPR-13444](https://jira.spring.io/browse/SPR-13444?redirect=false)** and commented  I am working with Spring 4.2.0  I have the following:  ```html <%@ page language=""java"" contentType=""text/html; charset=UTF-8"" pageEncoding=""UTF-8""%> <%@ taglib prefix=""spring"" uri=""http://www.springframework.org/tags""%> <%@ taglib prefix=""form"" uri=""http://www.springframework.org/tags/form""%>  ...  ""> ...	 ""> ```  i18n (MessageSource) works fine. For the _label_ and _submit_ the  works fine.  The problem is for the **input**'s _title_ attribute. It always shows the raw content. It means **** is **not** _tranformed_ or _interpreted_  I can confirm that using <%@ taglib prefix=""form"" uri=""http://www.springframework.org/tags/form""%> and for **""> ```  **** is really _tranformed_ or _interpreted_  Therefore works fine...  **Warning**: Same problem for the **placeholder** attribute.  ```html "" title=""""> ```    ---  **Affects:** 4.2.1","closed","status: declined,","spring-projects-issues","2015-09-07T17:31:15Z","2019-01-12T16:22:53Z"
"","18625","Reset Expires header in WebContentGenerator when caching resources [SPR-14053]","**[Manuel Bleichenbacher](https://jira.spring.io/secure/ViewProfile.jspa?name=bleichenbacher)** opened **[SPR-14053](https://jira.spring.io/browse/SPR-14053?redirect=false)** and commented  When using Spring Security and setting a cache period for specific resource (see http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#headers-cache-control), inconsistent HTTP headers are issued as Spring security insert `Expires: 0` and the `Expires` header is not reset.  The fix could probably be similar to #17843.  ---  **Affects:** 4.2.5  **Issue Links:** - #18577 Regression: ResourceHandlerRegistration setCachePeriod doesn't set the correct response header anymore - #17843 Reset Pragma header in WebContentGenerator when caching resources - #16413 Server-side HTTP caching improvements  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ed34ea48764d65665f2ba4cceda7add50d15b152, https://github.com/spring-projects/spring-framework/commit/15fe8279e6342dcd5cd52d59052c77d2159bff6b  0 votes, 5 watchers","closed","type: bug,","spring-projects-issues","2016-03-15T14:02:08Z","2019-01-11T14:42:11Z"
"","18251","Case insensitve matching of Query parameters using ModelAttribute [SPR-13676]","**[Manikandan Nagarajan](https://jira.spring.io/secure/ViewProfile.jspa?name=m222an)** opened **[SPR-13676](https://jira.spring.io/browse/SPR-13676?redirect=false)** and commented  I wanted to make my URL Case Insensitive, including the query string parameters. I currently use ModelAttribute to bind request params to my model.  I have googled about this a lot in the past couple of days and the only viable solution that I could find was to use a Custom Filter and use RequestParams to bind the values. Here is the best I could find so far, http://stackoverflow.com/a/29533456/3131696 but this doesn't support case insensitive matching.  As the Web API is built on top of HTTP, I would like to confirm to the URL standards and make my query parameters case insensitive.  Can this be made available ?  **Note:** There was another similar request #17876, but the fix only work for Path parameters, this request is to extend that to Query parameters as well.   ---  **Affects:** 4.2.3  **Reference URL:** http://stackoverflow.com/questions/32364126/spring-mvc-case-insensitive-get-parameters-mapping  4 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2015-11-12T05:46:43Z","2019-01-14T04:41:12Z"
"","18169","SseEmitter cannot use ""send(SseEventBuilder builder)"" method with custom SseEventBuilder implementation [SPR-13591]","**[Maksym Shalak](https://jira.spring.io/secure/ViewProfile.jspa?name=mshalak)** opened **[SPR-13591](https://jira.spring.io/browse/SPR-13591?redirect=false)** and commented  SseEmitter class contains method ""send(SseEventBuilder builder)"" which is supposed to be used for custom messages. But the first line of this method contains code  ``` Set dataToSend = ((SseEventBuilderImpl) builder).build(); ```  That means if we pass SseEventBuilder to the method we receive a ClassCastException since we cannot cast our implementation of interface SseEventBuilder to built-in implementation SseEventBuilderImpl. And SseEventBuilderImpl is a private class, so we will not be able to override it. So basically that means we cannot create our custom messages at all.   ---  **Affects:** 4.2.1  **Attachments:** - [private class.PNG](https://jira.spring.io/secure/attachment/23158/private+class.PNG) (_19.19 kB_) - [wrong class cast.PNG](https://jira.spring.io/secure/attachment/23157/wrong+class+cast.PNG) (_14.07 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1c382be00e39060a0a4005d80098365f2bee45d4","closed","type: enhancement,","spring-projects-issues","2015-10-20T16:54:34Z","2015-11-15T17:03:13Z"
"","18569","Validator is not set after initializing web socket MessageBroker from xml configuration [SPR-13996]","**[Maksim Orlov](https://jira.spring.io/secure/ViewProfile.jspa?name=maksim%20orlov)** opened **[SPR-13996](https://jira.spring.io/browse/SPR-13996?redirect=false)** and commented  org.springframework.web.socket.config.MessageBrokerBeanDefinitionParser class doesn't contain any link to validator class, as result the Validator field in SimpAnnotationMethodMessageHandler and then in PayloadArgumentResolver is null and validation doesn't work at controller methods with `@MessageMapping`.  I was able to make validation working by using java config of MessageBroker.  The AbstractMessageBrokerConfiguration class performs validator configuration at this case.  ---  **Affects:** 4.2.5  **Reference URL:** #15811  **Issue Links:** - #15811 Support for `@Valid` in `@MessageMapping` annotated methods","closed","type: enhancement,","spring-projects-issues","2016-02-27T20:50:31Z","2019-01-14T04:40:10Z"
"","18410","NotWritablePropertyException for Lombok setter methods if spring-test comes before spring-context-support [SPR-13837]","**[Maik Igloffstein](https://jira.spring.io/secure/ViewProfile.jspa?name=maikigloffstein)** opened **[SPR-13837](https://jira.spring.io/browse/SPR-13837?redirect=false)** and commented  I get a strange org.springframework.beans.NotWritablePropertyException with the attached maven spring project. The full exceptions is attached here: [Comment 1](https://jira.spring.io/browse/SPR-13837?focusedCommentId=122826&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-122826)  I attached a small project, so you can reproduce the exception.  #### Reproduce exception  1. Unpack attachment ""test.tar.gz""    * `tar xfz test.tar.gz` 2. Execute bash commands:  ``` cd Test mvn package java -jar target/tbseo-catalog-matcher-2.8-SNAPSHOT.jar ```  ##### Dependencies  [^test.tar.gz] has no repository in the pom.xml file, but you will find everything in maven central. [^test-with-repository.tar.gz] has maven central included.  #### Expectations  * Startup with no exception like in workaround 1 or 2 * order of spring dependencies should be irrelevant  #### Workaround 1  Use Spring _4.0.X_  #### Workaround 2  Change dependency order from  ```xml  	org.springframework 	spring-core 	${spring.version} 		   	org.springframework 	spring-test 	${spring.version}    	org.springframework 	spring-context-support 	${spring.version}  ```  to  ```xml  	org.springframework 	spring-core 	${spring.version} 		  	org.springframework 	spring-context-support 	${spring.version}    	org.springframework 	spring-test 	${spring.version}  ```  #### Workaround 3  Add `test` to  ```  	org.springframework 	spring-test 	${spring.version} 	test  ```    ---  **Affects:** 4.1.7, 4.2.4  **Attachments:** - [test.tar.gz](https://jira.spring.io/secure/attachment/23253/test.tar.gz) (_2.76 kB_) - [test-with-repository.tar.gz](https://jira.spring.io/secure/attachment/23254/test-with-repository.tar.gz) (_2.84 kB_)","closed","in: core,","spring-projects-issues","2016-01-05T08:20:12Z","2019-01-12T05:23:17Z"
"","18531","MetaAnnotationUtils$AnnotationDescriptor uses deprecated findMergedAnnotation(AnnotatedElement element, String) and throws exception [SPR-13958]","**[Madhusudana Reddy Sunnapu](https://jira.spring.io/secure/ViewProfile.jspa?name=smreddy2004@gmail.com)** opened **[SPR-13958](https://jira.spring.io/browse/SPR-13958?redirect=false)** and commented  Using AbstractTransactionalTestNGSpringContextTests is giving the following error:  ```java Caused by: java.lang.reflect.InvocationTargetException 	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) 	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) 	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) 	at java.lang.reflect.Constructor.newInstance(Constructor.java:422) 	at org.testng.internal.ObjectFactoryImpl.newInstance(ObjectFactoryImpl.java:29) 	... 21 more Caused by: java.lang.NoSuchMethodError: org.springframework.core.annotation.AnnotatedElementUtils.findMergedAnnotationAttributes(Ljava/lang/reflect/AnnotatedElement;Ljava/lang/String;ZZ)Lorg/springframework/core/annotation/AnnotationAttributes; 	at org.springframework.test.util.MetaAnnotationUtils$AnnotationDescriptor.(MetaAnnotationUtils.java:290) 	at org.springframework.test.util.MetaAnnotationUtils$UntypedAnnotationDescriptor.(MetaAnnotationUtils.java:365) 	at org.springframework.test.util.MetaAnnotationUtils$UntypedAnnotationDescriptor.(MetaAnnotationUtils.java:360) 	at org.springframework.test.util.MetaAnnotationUtils.findAnnotationDescriptorForTypes(MetaAnnotationUtils.java:191) 	at org.springframework.test.util.MetaAnnotationUtils.findAnnotationDescriptorForTypes(MetaAnnotationUtils.java:166) 	at org.springframework.test.context.support.AbstractTestContextBootstrapper.buildMergedContextConfiguration(AbstractTestContextBootstrapper.java:274) 	at org.springframework.test.context.support.AbstractTestContextBootstrapper.buildTestContext(AbstractTestContextBootstrapper.java:110) 	at org.springframework.test.context.TestContextManager.(TestContextManager.java:120) 	at org.springframework.test.context.TestContextManager.(TestContextManager.java:105) 	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.(AbstractTestNGSpringContextTests.java:111) 	at org.springframework.test.context.testng.AbstractTransactionalTestNGSpringContextTests.(AbstractTransactionalTestNGSpringContextTests.java:81) 	at com.avaya.sram.core.integration.repository.AlarmRepositoryTest.(AlarmRepositoryTest.java:12) ```  Looking the stack trace, I see that MetaAnnotationUtils$AnnotationDescriptor constructor is is still using AnnotatedElementUtils.findMergedAnnotationAttributes(AnnotatedElement element, String annotationName) which is deprecated starting 4.2.3 version. And this is point where it fails with a java.lang.NoSuchMethodError.  If I use an earlier version of Spring say 4.1.9, the same code works without any error.  ---  **Affects:** 4.2.4  **Attachments:** - [spring-test-jira.zip](https://jira.spring.io/secure/attachment/23311/spring-test-jira.zip) (_3.32 kB_)  **Issue Links:** - #18283 Upgrading from version 4.1.3 -> 4.2.3 NoSuchMethodError (_**""duplicates""**_)","closed","status: invalid,","spring-projects-issues","2016-02-18T11:30:56Z","2019-01-12T05:23:07Z"
"","18535","RestTemplate and Void.class as responseType [SPR-13962]","**[Maciej Zerkowski](https://jira.spring.io/secure/ViewProfile.jspa?name=zerkowsm)** opened **[SPR-13962](https://jira.spring.io/browse/SPR-13962?redirect=false)** and commented  I'm getting 500 when calling restTemplate with Void.class as expected return type - example:  ```java restTemplate.exchange(getBaseUrl() + ""/api/getVoid"", HttpMethod.POST, new HttpEntity(""someMessage""), Void.class); ```  I attached unit tests.  Do I miss something there or this is a bug?   ---  **Attachments:** - [RestTemplateVoid.zip](https://jira.spring.io/secure/attachment/23312/RestTemplateVoid.zip) (_5.64 kB_)","closed","status: declined,","spring-projects-issues","2016-02-18T19:22:45Z","2019-01-12T16:22:21Z"
"","18720","SimpleTransactionScope does not suspend and resume its scoped objects [SPR-14148]","**[Maciej Miklas](https://jira.spring.io/secure/ViewProfile.jspa?name=maciej%20miklas)** opened **[SPR-14148](https://jira.spring.io/browse/SPR-14148?redirect=false)** and commented  The idea is to define a bean in transaction scope, so that each transaction can use fresh instance of such bean. However it's possible to call methods on such bean outside transaction and it's causing side effects.  Try following test case: 1. register transaction scope 2. define bean in this scope 3. call method on this bean 4. start transaction and use bean inside it.  Point 4) will not behave as expected. Only one instance of transaction scoped bean will be created and it will be reused between following transactions.  The problem is, that we are calling method on our bean before transaction starts. `SimpleTransactionScope` registers `CleanupSynchronization` on current thread. Now we are starting transaction and trying to access our bean. The problem it, that `AbstractPlatformTransactionManager` suspends current transaction, well there is none, but it suspends all synchronizers registered by `TransactionSynchronizationManager#registerSynchronization(...).` Once the transaction  is finished the  method `SimpleTransactionScope$CleanupSynchronization#afterCompletion` will not be executed, because synchronizer is suspended.  Simple solution to this problem would be adding assert to `SimpleTransactionScope#get(...)`  ``` @Override public Object get(String name, ObjectFactory objectFactory) {  if (!TransactionSynchronizationManager.isActualTransactionActive()) {      throw new .....  } } ```  I think, that using transaction scoped bean outside transaction should not be allowed, because it's behavior is undefined.   ---  **Affects:** 4.2.5","closed","type: bug,","spring-projects-issues","2016-04-12T06:28:15Z","2016-05-06T08:13:31Z"
"","18348","Allow for setting TTL on a response sent by @JmsListener [SPR-13774]","**[Maciej Miklas](https://jira.spring.io/secure/ViewProfile.jspa?name=maciej%20miklas)** opened **[SPR-13774](https://jira.spring.io/browse/SPR-13774?redirect=false)** and commented  Currently _AbstractAdaptableMessageListener#sendResponse(...)_ calls _producer.send(response)_ which results with JMS Message without TTL.  We are using ActiveMQ with persistent messages, in order to avoid queue pollution we have to set TTL on every message.  One possibility to solve this issue is to introduce new annotation, like _`@ResponseTTL`_, or something more generic: _`@ResponseSetup`_  Other possibility would be to give us option to pragmatically configure _MessageProducer_. The _MessagingMessageListenerAdapter_ has already a suitable method: _#postProcessProducer()_, but currently it's impossible to register custom implementation. The reason for that is that the class _MethodJmsListenerEndpoint_ has factory method creating _MessagingMessageListenerAdapter_, but _MethodJmsListenerEndpoint_ cannot be extended because _JmsListenerAnnotationBeanPostProcessor_ creates its instance inside of _#processJmsListener()_. Actually it would be enough to create factory method on _JmsListenerAnnotationBeanPostProcessor_ that would create instance of _MethodJmsListenerEndpoint_.  ---  **Affects:** 4.1.8, 4.2.3  **Issue Links:** - #18349 Configurable QoS properties for messages sent by `@JmsListener` (_**""is depended on by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d04f785094f22ff1e1f796c7b6dd6b16b66b1724, https://github.com/spring-projects/spring-framework/commit/9589749fb281d0cb76d219a66f40cc8d3f5a3e18  **Backported to:** [4.1.9](https://github.com/spring-projects/spring-framework/milestone/133?closed=1)","closed","type: enhancement,","spring-projects-issues","2015-12-08T10:11:40Z","2019-01-13T05:32:41Z"
"","18818","Add option to log headers to AbstractRequestLoggingFilter [SPR-14245]","**[M. Justin](https://jira.spring.io/secure/ViewProfile.jspa?name=mjustin)** opened **[SPR-14245](https://jira.spring.io/browse/SPR-14245?redirect=false)** and commented  AbstractRequestLoggingFilter has options to include the query string and the payload.  It would be nice if it also had a standard option to log the request headers.  The rationale here is that sometimes it is helpful or necessary to know what the request headers were in order to troubleshoot an issue.  A workaround is to override the ""createMessage"" method to append the header information:  ``` @Bean public Filter logFilter() {     CommonsRequestLoggingFilter filter = new CommonsRequestLoggingFilter() {         @Override         protected String createMessage(HttpServletRequest request, String prefix, String suffix) {             return super.createMessage(request, prefix, suffix)                     + "";headers="" + new ServletServerHttpRequest(request).getHeaders();         }     };     return filter; } ```  Note though that since the name of the logger that is used is based on the name of the class, the logging configuration has to be set to log the new subclass to DEBUG, not e.g. CommonsRequestLoggingFilter.  ---  **Issue Links:** - #18817 AbstractRequestLoggingFilter appends null query string - #21420 AbstractRequestLoggingFilter.isIncludeHeaders() is accidentally public","closed","type: enhancement,","spring-projects-issues","2016-05-04T15:48:41Z","2019-01-11T17:05:43Z"
"","18817","AbstractRequestLoggingFilter appends null query string [SPR-14244]","**[M. Justin](https://jira.spring.io/secure/ViewProfile.jspa?name=mjustin)** opened **[SPR-14244](https://jira.spring.io/browse/SPR-14244?redirect=false)** and commented  When using AbstractRequestLogingFilter to log requests with includeQueryString = true, ""?null"" is appended to requests that don't have a query string.  I would expect no query string to be included in these cases.  ``` @Bean public Filter logFilter() {     CommonsRequestLoggingFilter filter = new CommonsRequestLoggingFilter();     filter.setIncludeQueryString(true);     return filter; } ```  Log output:  ``` Before request [uri=/my/uri/path?null] ```  Expected log output:  ``` Before request [uri=/my/uri/path] ```  ---  **Affects:** 3.2.16, 4.2.5  **Issue Links:** - #18818 Add option to log headers to AbstractRequestLoggingFilter  **Backported to:** [3.2.17](https://github.com/spring-projects/spring-framework/milestone/105?closed=1)","closed","type: bug,","spring-projects-issues","2016-05-04T15:44:47Z","2019-01-11T17:05:28Z"
"","18442","Documentation error in ResponseEntityExceptionHandler.handleExceptionInternal [SPR-13869]","**[M. Justin](https://jira.spring.io/secure/ViewProfile.jspa?name=mjustin)** opened **[SPR-13869](https://jira.spring.io/browse/SPR-13869?redirect=false)** and commented  The doc comments for ResponseEntityExceptionHandler.handleExceptionInternal incorrectly state that ""This method returns null by default"".  However, looking at the implementation, this is decidedly untrue:  ```java 	/** 	 * A single place to customize the response body of all Exception types. 	 * This method returns {@code null} by default. 	 * @param ex the exception 	 * @param body the body to use for the response 	 * @param headers the headers to be written to the response 	 * @param status the selected response status 	 * @param request the current request 	 */ 	protected ResponseEntity handleExceptionInternal(Exception ex, Object body, 			HttpHeaders headers, HttpStatus status, WebRequest request) {  		if (HttpStatus.INTERNAL_SERVER_ERROR.equals(status)) { 			request.setAttribute(""javax.servlet.error.exception"", ex, WebRequest.SCOPE_REQUEST); 		}  		return new ResponseEntity(body, headers, status); 	} ```    ---  **Affects:** 3.2.16, 4.2.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/24fdf64d918ee4343cfb1cda79837c01fe866c82, https://github.com/spring-projects/spring-framework/commit/73df50db3c8870d17ad307e8e486658c93e99518, https://github.com/spring-projects/spring-framework/commit/ac5b9c7bd690b4a850a4c1697887ab570850ed82  **Backported to:** [3.2.17](https://github.com/spring-projects/spring-framework/milestone/105?closed=1)","closed","type: task,","spring-projects-issues","2016-01-13T21:00:34Z","2016-04-06T08:38:15Z"
"","18436","Support for conditional PUT in Web MVC (using If-Unmodified-Since header) [SPR-13863]","**[M. Justin](https://jira.spring.io/secure/ViewProfile.jspa?name=mjustin)** opened **[SPR-13863](https://jira.spring.io/browse/SPR-13863?redirect=false)** and commented  I have been converting a Jersey/JAX-RS application to Spring Web MVC, and discovered that while JAX-RS supports conditional PUT (using the ""If-Unmodified-Since"" header and the 412 ""Precondition Failed"" response) through Request.evaluatePreconditions, Spring Web MVC does not.  Looking through the spring-web codebase, the only reference to ""If-Unmodified-Since"" that I could find is in HttpEntityMethodProcessor.  And that code only applies to GET requests.  Additionally, there's WebRequest.checkNotModified (and seems to parallel the JAX-RS Request.evaluatePreconditions method), but only checks the ""If-Modified-Since"" header and also works only for GET and HEAD requests.  For my project I will be implementing conditional PUT manually.  However, it feels like conditional PUT (and DELETE) requests should be baked into the Spring MVC framework.  ---  **Issue Links:** - #18074 ETag/If-None-Match logic in HttpEntityMethodProcessor should not affect methods other than HTTP GET - #17721 Spring should have default support for OPTIONS, HEAD and Allow  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0d6f80052d7a08bec69c2ef70818ff6551b54c5c","closed","type: enhancement,","spring-projects-issues","2016-01-12T19:25:06Z","2019-01-11T18:29:08Z"
"","18631","ClassUtils.forName() performance [SPR-14059]","**[László Váradi](https://jira.spring.io/secure/ViewProfile.jspa?name=vazul)** opened **[SPR-14059](https://jira.spring.io/browse/SPR-14059?redirect=false)** and commented  ClassUtils.forName uses ClassLoader.loadClass() inside if classloader is not null. However ClassLoader.loadClass uses synchronization inside before checking its class cache (findLoadedClass method call).  Please us Class.forName(String, boolean, ClassLoader) instead, as it will skip ClassLoader.loadClass() before this synchronization.  ---  **Affects:** 4.2.5  **Issue Links:** - #7300 Class.forName() produces different results to ClassLoader.loadClass() in certain circumstances - #21984 ClassUtils.forName fails to load class from ContextTypeMatchClassLoader","closed","type: enhancement,","spring-projects-issues","2016-03-16T09:18:43Z","2019-01-11T14:42:50Z"
"","18460","Regression: SPR-12443 breaks singleton bean references within a configuration class with null arguments [SPR-13887]","**[László Váradi](https://jira.spring.io/secure/ViewProfile.jspa?name=vazul)** opened **[SPR-13887](https://jira.spring.io/browse/SPR-13887?redirect=false)** and commented  We are using `@Configuration` classes over a hundred of modules now, and just tried to upgrade from 4.1.1 to 4.1.9. However we have faced that the internal method calls now passes the arguments.  Singleton bean methods have arguments also, its dependencies. Until now, we have called these methods internally with null arguments, but it won't work now, because in this way BeanFactory will skip to lookup arguments, but will use the provided null argument, if the bean is not already created.  #17048 is about prototype beans, but it is applied to all beans, and removed a check from AbstractBeanFactory mentioned in #17094.  BeanMehtodInterceptor should really pass arguments only in case of prototype bean, or AbstractBeanFactory should avoid passed arguments in case of singleton beans, but as it is now, it is not consistent. Bean creation depends on bean creation order (created as it own, or as a depenency)  ---  **Affects:** 4.1.9  **Issue Links:** - #17094 SPR-12443 breaks Spring Security's AuthenticationConfiguration - #17048 BeanMethodInterceptor doesn't forward user-provided arguments to getBean(name, args) - #18529 ObjectFactory lacks method for getting bean with specified constructor arguments  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5ed90468865bf8c3b44c8c073531fe7127826520, https://github.com/spring-projects/spring-framework/commit/d2b9dbf1819d7b6e7dc61bdc3bf6b504717d3ae9","closed","in: core,","spring-projects-issues","2016-01-25T16:18:08Z","2019-01-11T18:27:17Z"
"","18801","Proposal for easing the development of annotation driven static method advices and pointcuts [SPR-14227]","**[László Csontos](https://jira.spring.io/secure/ViewProfile.jspa?name=lcsontos)** opened **[SPR-14227](https://jira.spring.io/browse/SPR-14227?redirect=false)** and commented  I've had to implement usage tracking of some business-level service methods. For accomplishing this, there's an annotation defined _`@LogUsage`(type = UsageTypes.SOME_TYPE)_ to match target methods and an advice which intercepts calls to track.  It's important to note the advice need the know the parameter of the annotation when method calls get intercepted.  I saw examples in [Aspect Oriented Programming with Spring](http://docs.spring.io/spring/docs/current/spring-framework-reference/html/aop.html) how the annotation's properties can be supplied to aspects, however doing the same with the standard Spring AOP wasn't that straightforward.  What I wanted to achieve resembled to the logic of _NameMatchMethodPointcutAdvisor_, so I sub-classed _AbstractGenericPointcutAdvisor_ to _AnnotationMatchMethodPointcutAdvisor_, implemented an annotation driven version of it and added a custom advice for logging the usage.  I'd like to contribute my solution to Spring AOP, because I think it eases the development effort needed to implement advices for a custom annotation.  Please let me know what to do you think.  ---  **Affects:** 4.2.5","closed","status: bulk-closed,","spring-projects-issues","2016-04-27T13:32:33Z","2019-01-13T05:26:00Z"
"","18667","AnnotationTransactionAttributeSource should never apply to GroovyObject methods [SPR-14095]","**[László Csontos](https://jira.spring.io/secure/ViewProfile.jspa?name=lcsontos)** opened **[SPR-14095](https://jira.spring.io/browse/SPR-14095?redirect=false)** and commented  **How to reproduce**  1) Pull the branch in the reference URL 2) Execute test _org.springframework.test.context.junit4.spr14095.AnnotationTransactionAttributeSourceTest_  ``` % ./gradlew -D:spring-test:test.single=AnnotationTransactionAttributeSourceTest spring-test:clean spring-test:test ```  **Issue**  After deep investigation how Spring TX and Groovy work together, I found out that _TransactionInterceptor_ gets applied to methods inherited from _groovy.lang.GroovyObject_.  Switching on debugging reveals that.  ``` 16:54:16.171 [localhost-startStop-1] DEBUG o.s.t.a.AnnotationTransactionAttributeSource - Adding transactional method 'LanguageServiceImpl.setMetaClass' with attribute: PROPAGATION_REQUIRED,ISOLATION_DEFAULT; '' 16:54:16.993 [localhost-startStop-1] DEBUG o.s.t.a.AnnotationTransactionAttributeSource - Adding transactional method 'UserServiceImpl.setMetaClass' with attribute: PROPAGATION_REQUIRED,ISOLATION_DEFAULT; '' 16:54:17.118 [localhost-startStop-1] DEBUG o.s.t.a.AnnotationTransactionAttributeSource - Adding transactional method 'CompanyServiceImpl.setMetaClas' with attribute: PROPAGATION_REQUIRED,ISOLATION_DEFAULT; '' 16:54:20.905 [localhost-startStop-1] DEBUG o.s.t.a.AnnotationTransactionAttributeSource - Adding transactional method 'CustomTermServiceImpl.setMetaClass' with attribute: PROPAGATION_REQUIRED,ISOLATION_DEFAULT; '' 16:54:20.913 [localhost-startStop-1] DEBUG o.s.t.a.AnnotationTransactionAttributeSource - Adding transactional method 'ContentItemServiceImpl.setMetaClass' with attribute: PROPAGATION_REQUIRED,ISOLATION_DEFAULT; '' ```  While stressing the system with requests, it can also be seen, that upon calling these internal Groovy methods, Spring TX perform commits, which eventually degrades performance. The stack trace below was captured from the execution of the following piece of code.  ```java @Override Authentication authenticate(Authentication authentication) throws AuthenticationException {   String authenticationToken = authentication.getPrincipal()   User user = userService.findByAuthenticationToken(authenticationToken as String)   ... } ```  Before _userService.findByAuthenticationToken()_ would have been executed, the Groovy runtime called _getMetaClass()_ internally as part of _call()_ in order to fetch the meta data of the target object.  ``` ""http-nio-8080-exec-10"" #89 daemon prio=5 os_prio=0 tid=0x00007f33e0009000 nid=0x3b5c runnable [0x00007f33f52b9000]    java.lang.Thread.State: RUNNABLE     at java.net.SocketInputStream.socketRead0(Native Method)     ...     at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2447)     ...     at com.zaxxer.hikari.proxy.ConnectionProxy.commit(ConnectionProxy.java:300)     ...     at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:757)     at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:726)     at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:478)     at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:272)     at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:95)     at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)     at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:207)     at com.sun.proxy.$Proxy144.getMetaClass(Unknown Source)     at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.nonParamCheck(PogoMetaMethodSite.java:79)     at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.checkCall(PogoMetaMethodSite.java:92)     at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.call(PogoMetaMethodSite.java:66)     at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:122)     at app.web.security.AppAuthenticationProvider.authenticate(AppAuthenticationProvider.groovy:39)     at org.springframework.security.authentication.ProviderManager.authenticate(ProviderManager.java:156) ```  **Workaround**  Currently the workaround is in the client's system is to override _AnnotationTransactionAttributeSource_ and customize method _getTransactionAttribute()_ in the following way.  ``` public class GroovyAwareAnnotationTransactionAttributeSource extends AnnotationTransactionAttributeSource {      private static final Logger log = LoggerFactory.getLogger(GroovyAwareAnnotationTransactionAttributeSource.class);      @Override     public TransactionAttribute getTransactionAttribute(Method method, Class targetClass) {         if (!ClassUtils.isUserLevelMethod(method)) {             if (log.isTraceEnabled()) {                 log.trace(""Transaction skipped for non-userlevel method {}"", method.toString());             }              return null;         }          return super.getTransactionAttribute(method, targetClass);     }  } ```  After that some manual tweaking is also necessary to replace __.  ```                       ```    ---  **Affects:** 4.1.7  **Reference URL:** https://github.com/laszlocsontos/spring-framework/tree/SPR-14095","closed","type: enhancement,","spring-projects-issues","2016-03-29T20:32:27Z","2016-04-06T08:38:13Z"
"","18141","runjettyrun9 StringHttpMessageConverter eofexception [SPR-13565]","**[lzxianren](https://jira.spring.io/secure/ViewProfile.jspa?name=lzxianren)** opened **[SPR-13565](https://jira.spring.io/browse/SPR-13565?redirect=false)** and commented  i am using runjettyrun9.0.0.M3 with eclipse. i have a `@RestController` method which return  > ResponseEntity,and the body is String. When to return by the framework, there is a eofexption happened. the exception like  ```java org.eclipse.jetty.io.EofException 	at org.eclipse.jetty.server.HttpOutput.flush(HttpOutput.java:134) 	at sun.nio.cs.StreamEncoder.implFlush(StreamEncoder.java:297) 	at sun.nio.cs.StreamEncoder.flush(StreamEncoder.java:141) 	at java.io.OutputStreamWriter.flush(OutputStreamWriter.java:229) 	at org.springframework.util.StreamUtils.copy(StreamUtils.java:106) 	at org.springframework.http.converter.StringHttpMessageConverter.writeInternal(StringHttpMessageConverter.java:109) 	at org.springframework.http.converter.StringHttpMessageConverter.writeInternal(StringHttpMessageConverter.java:40) 	at org.springframework.http.converter.AbstractHttpMessageConverter.write(AbstractHttpMessageConverter.java:208) 	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:161) 	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:146) 	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:71) 	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:126) 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:776) 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:705) 	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:959) 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:893) 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:967) 	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:858) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:734) 	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:843) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:847) 	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:669) 	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1329) 	at org.springframework.orm.hibernate3.support.OpenSessionInViewFilter.doFilterInternal(OpenSessionInViewFilter.java:231) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1300) 	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:85) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1300) 	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:443) 	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:138) 	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:564) 	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:213) 	at org.eclipse.jetty.server.handler.ContextHandler.__doHandle(ContextHandler.java:1054) 	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java) 	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:372) 	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:175) 	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:988) 	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:136) 	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97) 	at org.eclipse.jetty.server.Server.handle(Server.java:410) 	at org.eclipse.jetty.server.HttpChannel.run(HttpChannel.java:245) 	at org.eclipse.jetty.server.HttpConnection$1.run(HttpConnection.java:75) 	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:597) 	at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:528) 	at java.lang.Thread.run(Thread.java:745) ```  i debug the code,and find the code after this may be the reason.  ```java StreamUtils.copy(str, charset, outputMessage.getBody()); ```  this will call the next code  ```java public static void copy(String in, Charset charset, OutputStream out) throws IOException {      Assert.notNull(in, ""No input String specified"");      Assert.notNull(charset, ""No charset specified"");      Assert.notNull(out, ""No OutputStream specified"");      Writer writer = new OutputStreamWriter(out, charset);      writer.write(in);      writer.flush(); } ```  the red line is the bug line.  Is spring framework should add eof for stringhttpmsgconvert   ---  **Affects:** 4.2 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/4c417a5b96a873149664de39e9c0e78daec31b10","closed","status: invalid,","spring-projects-issues","2015-10-13T09:50:08Z","2019-01-12T05:23:37Z"
"","18016","jackson default view [SPR-13437]","**[lzxianren](https://jira.spring.io/secure/ViewProfile.jspa?name=lzxianren)** opened **[SPR-13437](https://jira.spring.io/browse/SPR-13437?redirect=false)** and commented  when add annotation jsonview to a property, the other property will not serialize  i check the source code as down:  ```java // Any change to this method should be also applied to spring-jms and spring-messaging // MappingJackson2MessageConverter default constructors private void customizeDefaultFeatures(ObjectMapper objectMapper) { 	if (!this.features.containsKey(MapperFeature.DEFAULT_VIEW_INCLUSION)) { 		configureFeature(objectMapper, MapperFeature.DEFAULT_VIEW_INCLUSION, false); 	} 	if (!this.features.containsKey(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)) { 		configureFeature(objectMapper, DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false); 	} } ```  it seems if this.features is empty then the DEFAULT_VIEW_INCLUSION will be false. but as i know DEFAULT_VIEW_INCLUSION should be true if i didn't set   ---  **Affects:** 4.1.7","closed","status: declined,","spring-projects-issues","2015-09-07T03:04:33Z","2019-01-12T16:22:54Z"
"","18530","Spring ORM doesn't support addNamedQuery with EclipseLink [SPR-13957]","**[Lukáš Vasek](https://jira.spring.io/secure/ViewProfile.jspa?name=lvasek)** opened **[SPR-13957](https://jira.spring.io/browse/SPR-13957?redirect=false)** and commented  Hello, I'm trying to add together spring boot (1.3.2) + eclpselink (2.6.2) + axon framework. Axon has in it's https://github.com/AxonFramework/AxonFramework/blob/df54dcf98807751a0368ee2e9906879b7f495330/core/src/main/java/org/axonframework/saga/repository/jpa/JpaSagaRepository.java class this construction  ```java entityManagerFactory.addNamedQuery(LOAD_SAGA_NAMED_QUERY, entityManager.createQuery(LOAD_SAGA_QUERY)); ```  which leads to classcast exception. I'm wondering if this is springs or eclipselinks issue.  Thanks  Lukas  ---  **Affects:** 4.2.4  **Reference URL:** http://stackoverflow.com/questions/35455351/eclipselink-not-compatible-with-spring  **Issue Links:** - #18533 Consistent behavior for unwrap(null) on JPA and Bean Validation wrappers  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7fcb277de962a054916e6a1bafc57b101b815d5b, https://github.com/spring-projects/spring-framework/commit/4320161172f4d50b680a27678d00a7c8b682cbad","closed","type: bug,","spring-projects-issues","2016-02-18T08:07:40Z","2019-01-11T19:03:58Z"
"","18206","Avoid NPE for anonymous SqlParameter in CallMetaDataContext [SPR-13628]","**[Luke Woodward](https://jira.spring.io/secure/ViewProfile.jspa?name=lukewoodward)** opened **[SPR-13628](https://jira.spring.io/browse/SPR-13628?redirect=false)** and commented  The following code uses a StoredProcedureItemReader to connect to an Oracle database and call a stored procedure that returns a ref cursor in a parameter:  ``` package springitemreadertest;  import java.util.Map; import javax.sql.DataSource; import oracle.jdbc.OracleTypes; import org.springframework.batch.item.ExecutionContext; import org.springframework.batch.item.database.StoredProcedureItemReader; import org.springframework.jdbc.core.ColumnMapRowMapper; import org.springframework.jdbc.core.SqlParameter;  public class SpringItemReaderTest {     public static void main(String[] args) throws Exception {         DataSource dataSource = new MyDataSource();         StoredProcedureItemReader> storedProcedureItemReader = new StoredProcedureItemReader<>();         storedProcedureItemReader.setDataSource(dataSource);         storedProcedureItemReader.setProcedureName(""PROC"");         storedProcedureItemReader.setParameters(new SqlParameter[] { new SqlParameter(/*""p_out"",*/ OracleTypes.CURSOR) });         storedProcedureItemReader.setRefCursorPosition(1);         storedProcedureItemReader.setRowMapper(new ColumnMapRowMapper());         storedProcedureItemReader.open(new ExecutionContext());         storedProcedureItemReader.read();     } } ```  The stored procedure `PROC` doesn't do anything useful. Here's its definition:  ``` procedure PROC (p_out OUT SYS_REFCURSOR) is begin   open p_out for select * from dual; end; ```  The class MyDataSource isn't particularly interesting either.  It implements javax.sql.DataSource but has default implementations for all methods other than `getConnection()`.  Any DataSource that connects to an Oracle database can be used instead of it.  When I run this code I get the following stacktrace:  ``` Exception in thread ""main"" org.springframework.batch.item.ItemStreamException: Failed to initialize the reader 	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.open(AbstractItemCountingItemStreamItemReader.java:147) 	at springitemreadertest.SpringItemReaderTest.main(SpringItemReaderTest.java:20) Caused by: java.lang.NullPointerException 	at org.springframework.jdbc.core.metadata.CallMetaDataContext.reconcileParameters(CallMetaDataContext.java:319) 	at org.springframework.jdbc.core.metadata.CallMetaDataContext.processParameters(CallMetaDataContext.java:293) 	at org.springframework.batch.item.database.StoredProcedureItemReader.openCursor(StoredProcedureItemReader.java:168) 	at org.springframework.batch.item.database.AbstractCursorItemReader.doOpen(AbstractCursorItemReader.java:406) 	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.open(AbstractItemCountingItemStreamItemReader.java:144) 	... 1 more ```  Of course, to fix the code, uncomment the parameter name I deliberately commented out.   However, if I have unintentionally missed out the parameter name, or specified the parameter name and type the wrong way around (hence setting the type name instead of the parameter name), it would have been nice to have got an exception with a message that told me I needed to set a name for the SqlParameter.  Incidentally, issue #9490, which I found while seeing if this has already been reported, contains the following comment:  > CallMetaDataContext reconcileParameters should check that a name exists for parameter to avoid NPE  ---  **Affects:** 3.2.15, 4.1.8, 4.2.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d1f5ee2643a96ac5f817b9eb070812376f7f3f91, https://github.com/spring-projects/spring-framework/commit/6685c78cea9e3419cc37365ac2b5607b8c7cf8b0, https://github.com/spring-projects/spring-framework/commit/2ea69c37c69af28519a8bb0a26cd4f978a146a5f  **Backported to:** [4.1.9](https://github.com/spring-projects/spring-framework/milestone/133?closed=1), [3.2.16](https://github.com/spring-projects/spring-framework/milestone/104?closed=1)","closed","type: enhancement,","spring-projects-issues","2015-11-01T12:19:57Z","2019-01-11T19:16:34Z"
"","18714","Cache the results of ParameterNameDiscoverer [SPR-14142]","**[Luke Butters](https://jira.spring.io/secure/ViewProfile.jspa?name=lukebutters)** opened **[SPR-14142](https://jira.spring.io/browse/SPR-14142?redirect=false)** and commented  AnnotationParameterNameDiscoverer an implementation of ParameterNameDiscoverer uses reflection to look at what the annotations are on a method. This can be very costly, in my case around 50% of the time is being spent inside of that class. Although the previous tickets removes the `O(n^2)` problem reflection is still expensive.  As method annotations don't seem to change and are called frequently the results of the methods on these classes look like a good candidates for caching with potentially large performance improvements.   ---  **Reference URL:** https://github.com/spring-projects/spring-security/issues/3165","closed","type: enhancement,","spring-projects-issues","2016-04-11T00:01:48Z","2016-04-11T08:53:43Z"
"","18280","Regression: UriTemplate does not match when URI ends with slash [SPR-13705]","**[Lukas Krecan](https://jira.spring.io/secure/ViewProfile.jspa?name=dart0)** opened **[SPR-13705](https://jira.spring.io/browse/SPR-13705?redirect=false)** and commented  This test passes in 4.2.2 but fails in 4.2.3. I guess it's due to the slash at the end of template.  ``` @Test public void testMatchSlashAtTheEnd() {     UriTemplate uriTemplate = new UriTemplate(""/test/"");     assertTrue(uriTemplate.matches(""/test/"")); } ```  ---  **Affects:** 4.2.3  **Issue Links:** - #18205 UriTemplate should support regex matching with n times {n} pattern  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fed4391f8752dcc1bdd738d8580b65af81c05146","closed","type: bug,","spring-projects-issues","2015-11-19T15:33:33Z","2019-01-11T19:32:08Z"
"","18419","Provide URL rewriting in documentation to unify URLs between versions [SPR-13846]","**[Lukas Eder](https://jira.spring.io/secure/ViewProfile.jspa?name=lukas.eder)** opened **[SPR-13846](https://jira.spring.io/browse/SPR-13846?redirect=false)** and commented  When I google some Spring class, I often end up on a very old version because those versions just exist for a longer time and are probably linked from many blog posts, etc. For instance: http://docs.spring.io/spring/docs/2.5.x/api/org/springframework/jdbc/support/SQLErrorCodeSQLExceptionTranslator.html  The current version would be: http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/SQLErrorCodeSQLExceptionTranslator.html  Now, as you can observe, the URL path of the documentation has changed. Not only did ""2.5.x"" turn into ""current"", which is totally expected, but ""api"" turned into a less expected ""javadoc-api"".  It would be very useful if the following URL would work as well with a rewrite (or better a 301 redirect) on api -> javadoc-api http://docs.spring.io/spring/docs/current/api/org/springframework/jdbc/support/SQLErrorCode  This would be very useful, occasionally, and wouldn't incur a lot of effort. Just put an .htaccess file somewhere, done.  As a sidenote: it would be favourable if Google searches would always produce the ""current"" version, although that's hard.   --- No further details from [SPR-13846](https://jira.spring.io/browse/SPR-13846?redirect=false)","closed","","spring-projects-issues","2016-01-07T09:17:20Z","2019-01-11T18:29:40Z"
"","18274","My suggestion for Spring Cache [SPR-13699]","**[Lu Qi](https://jira.spring.io/secure/ViewProfile.jspa?name=luchy0120)** opened **[SPR-13699](https://jira.spring.io/browse/SPR-13699?redirect=false)** and commented  I  know there is a Cacheable annotation which first check whether there exists a value ,and if it is null , it  invokes the target method and then  put the result into cache. But this operation has a  ""put if null""  race condition in muti-thread situation.  My suggestion is : 1, remove `@Cacheable`  2, create a new  `@CacheGet` ,this annotation will get value from the cache, if it is null ,it simply invokes  the target method and do nothing else,when value returns, it returns it  3, in order to  realize the function of `@Cacheable` ,we can  annotated a method with two annotations ,one is  `@CacheGet` ,another is `@CachePut` ,the `@Cacheput` means to  put the result into cache after the method executes (may also add a condition attribute to judge whether to put the value into cache).  Now , `@CacheGet` and `@CachePut`  are  atomic  operations  ,this will provide more flexible for user ,it's like invoking get and put method directly  on cache.    ---  **Affects:** 4.2.1","closed","type: enhancement,","spring-projects-issues","2015-11-18T13:01:07Z","2019-01-11T19:25:40Z"
"","18477","Doc: First class support for java 8 parameter names API [SPR-13903]","**[Lovro Pandžić](https://jira.spring.io/secure/ViewProfile.jspa?name=lpandzic)** opened **[SPR-13903](https://jira.spring.io/browse/SPR-13903?redirect=false)** and commented  Currently, officially, only type and generic type information of parameter is used  for resolving parameters of constructors. It would be great if parameter names would be used to match by bean name and if this behaviour could be forced somehow (at least for Spring 5 which has baseline Java 8 which is required for parameter names API).  ---  **Issue Links:** - #19763 Data binding with immutable objects (Kotlin / Lombok / `@ConstructorProperties`)","closed","type: documentation,","spring-projects-issues","2016-01-29T07:28:54Z","2021-11-11T10:29:04Z"
"","18417","@ComponentScan's includeFilters javadoc is misleading [SPR-13844]","**[Louis-Rémi](https://jira.spring.io/secure/ViewProfile.jspa?name=l-r)** opened **[SPR-13844](https://jira.spring.io/browse/SPR-13844?redirect=false)** and commented  ## Issue  Reading this javadoc gives the impression that these filters are applied after the basePackages to further narrow down the candidate components.  ```java /**  * Specifies which types are eligible for component scanning.  * Further narrows the set of candidate components from everything in  * {@link #basePackages} to everything in the base packages that matches  * the given filter or filters.  * @see #resourcePattern  */ Filter[] includeFilters() default {}; ```  But in fact, along with usual annotated types since useDefaultFilters==true, **all types under the includeFilters are candidate components (scanned and instanciated)**. **Even those not annotated** or meta-annotated **with `@Component`**.  It should be made clearer to avoid such misunderstanding.  ## Additional information  I would've expected this behavior under an attribute named forceFilters  includeFilters behavior could be described as: ""Forces all types under basePackages and these filters to be candidate components.""  Example to illustrate the situation in regards to the documentation.  ```java @ComponentScan(basePackages = { ""com.aom"" },         includeFilters = @Filter(type = FilterType.ASPECTJ, pattern = ""com.aom..middlepackage..*"")) ```  All types under com.aom..middlepackage..* will be scanned and instanciated as beans, Even if not annotated* or meta-annotated with `@Component`   ---  **Affects:** 4.2.4","closed","type: documentation,","spring-projects-issues","2016-01-06T19:17:38Z","2016-04-08T19:33:14Z"
"","18491","NullPointerException while building error message in InvocableHandlerMethod  [SPR-13917]","**[lionel b](https://jira.spring.io/secure/ViewProfile.jspa?name=libe)** opened **[SPR-13917](https://jira.spring.io/browse/SPR-13917?redirect=false)** and commented  Hello,  I have a problem when I try to call my resource, Here is my signature :  ```java @RestController public class AccountOperationResource { //... @RequestMapping (method = RequestMethod.POST, path = ""/account/{iban}/deposit"")     public Response deposit (                                     @PathVariable final String iban,                                      @RequestBodyPath (""amount"") final double amount)      throws BankAccountException {         //RequestBodyPath is an annotation that is handled by an arg resolver     } //... } ```  As you see, the second argument (""amount"") is a primitive type. 1) Using the controller, the org.springframework.web.method.support.InvocableHandlerMethod tries to get my method and to invoke it with some arguments parsed from my argresolver.  2) If I try to pass nothing for the ""amount"" value, the null value will be selected, and therefore the InvocableHandlerMethod will invoke the method with a null amount, which is forbidden by the fact that the double class is primitive. That is okay and logical.  3) Then I get an IllegalArgumentException from the java.lang.reflect API. The message of this exception is null. The InvocableHandlerMethod.getInvocationErrorMessage is called. It is fine.  4)This method passes this null String to the InvocableHandlerMethod.getDetailedErrorMessage method, ok.  5)Then this method calls new ""StringBuilder(message)"", which is resolved to do ""new StringBuilder(null)""  => I expect the null message to be ignored ... But instead, I get a NullPointerException  Can you help me ?  Regards, Lionel.  Source code of the InvocableHandlerMethod class in the spring web framework : https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/web/method/support/InvocableHandlerMethod.java   ---  **Affects:** 3.2.16, 4.2.1  **Backported to:** [3.2.17](https://github.com/spring-projects/spring-framework/milestone/105?closed=1)","closed","type: bug,","spring-projects-issues","2016-02-04T22:21:47Z","2016-04-06T08:38:15Z"
"","18554","RestTemplate.getForObject block thread [SPR-13982]","**[linqer](https://jira.spring.io/secure/ViewProfile.jspa?name=linqer)** opened **[SPR-13982](https://jira.spring.io/browse/SPR-13982?redirect=false)** and commented  Dear: I use spring boot to define an interval task(fixedDelay = 500) which call restTemplate.getForObject , but the task will stop sometimes, I have to restart my app;  I use jconcole, found the reason is restTemplate.getForObject will block the interval task thread. why this happend and what should I do?  > java.lang.Thread.State: RUNNABLE > at java.net.SocketInputStream.socketRead0(Native Method) > at java.net.SocketInputStream.read(SocketInputStream.java:150) > at java.net.SocketInputStream.read(SocketInputStream.java:121) > at java.io.BufferedInputStream.fill(BufferedInputStream.java:246) > at java.io.BufferedInputStream.read1(BufferedInputStream.java:286) > at java.io.BufferedInputStream.read(BufferedInputStream.java:345) > - locked <0x00000000e272c850> (a java.io.BufferedInputStream) >   at sun.net.www.http.ChunkedInputStream.fastRead(ChunkedInputStream.java:244) >   at sun.net.www.http.ChunkedInputStream.read(ChunkedInputStream.java:689) > - locked <0x00000000e272c878> (a sun.net.www.http.ChunkedInputStream) >   at java.io.FilterInputStream.read(FilterInputStream.java:133) >   at sun.net.www.protocol.http.HttpURLConnection$HttpInputStream.read(HttpURLConnection.java:3322) >   at java.io.FilterInputStream.read(FilterInputStream.java:133) >   at java.io.PushbackInputStream.read(PushbackInputStream.java:186) >   at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.loadMore(UTF8StreamJsonParser.java:180) >   at com.fasterxml.jackson.core.base.ParserBase.loadMoreGuaranteed(ParserBase.java:459) >   at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._finishString2(UTF8StreamJsonParser.java:2434) >   at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._finishAndReturnString(UTF8StreamJsonParser.java:2414) >   at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getText(UTF8StreamJsonParser.java:285) >   at com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer$Vanilla.deserialize(UntypedObjectDeserializer.java:514) >   at com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer$Vanilla.mapObject(UntypedObjectDeserializer.java:653) >   at com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer$Vanilla.deserialize(UntypedObjectDeserializer.java:496) >   at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:245) >   at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:217) >   at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:25) >   at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:3736) >   at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2810) >   at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.readJavaType(AbstractJackson2HttpMessageConverter.java:221) >   at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.read(AbstractJackson2HttpMessageConverter.java:208) >   at org.springframework.web.client.HttpMessageConverterExtractor.extractData(HttpMessageConverterExtractor.java:95) >   at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:599) >   at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:557) >   at org.springframework.web.client.RestTemplate.getForObject(RestTemplate.java:264) >   at com.as.dd.clairvoyant.collector.ScheduledSummaryCollector.scheduledCollector(ScheduledSummaryCollector.java:85) >   at sun.reflect.GeneratedMethodAccessor60.invoke(Unknown Source) >   at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) >   at java.lang.reflect.Method.invoke(Method.java:483) >   at org.springframework.scheduling.support.ScheduledMethodRunnable.run(ScheduledMethodRunnable.java:65) >   at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54) >   at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) >   at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308) >   at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180) >   at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294) >   at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) >   at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) >   at java.lang.Thread.run(Thread.java:745)    ---  **Affects:** 4.2.4","closed","status: invalid,","spring-projects-issues","2016-02-26T03:45:29Z","2019-01-12T05:23:05Z"
"","18257","Bean creation is ignored [SPR-13682]","**[Libor Ondrusek](https://jira.spring.io/secure/ViewProfile.jspa?name=librucha)** opened **[SPR-13682](https://jira.spring.io/browse/SPR-13682?redirect=false)** and commented  In this short example is used creating of beans using java config. There are used two ways for creating. - Under **stubbed** profile - Default profile  Problem is using **stubbed** profile. In this case I expect method  ``` public ResourceServerTokenServices stubbedTokenServices(AccessTokenConverter accessTokenConverter) ```  will be called and bean named **tokenServices** will be created. But **no bean** was created in **stubbed** profile This issue was comming between 8.11 and 10.11, because before 8.11. it was working fine.   ---  **Affects:** 4.1.5  **Reference URL:** https://github.com/librucha/spring-context-issue  **Attachments:** - [demo.tgz](https://jira.spring.io/secure/attachment/23222/demo.tgz) (_49.58 kB_)","closed","in: core,","spring-projects-issues","2015-11-13T08:46:20Z","2019-01-12T05:23:26Z"
"","18745","@Cacheable ""condition"" throwing an exception when one of the arguments is null [SPR-14173]","**[Lev Bornovalov](https://jira.spring.io/secure/ViewProfile.jspa?name=lbornov2)** opened **[SPR-14173](https://jira.spring.io/browse/SPR-14173?redirect=false)** and commented  Imagine the following method:  ```     @Override 	@Transactional(readOnly=true)     @Cacheable(value=""myCache"",  key=""{ #searchBean, #from, #size, #language}"", condition=""#searchBean.findInCache"") public List findBeans(final ElementSearchBean searchBean, final int from, final int size, final Language language) { 	} ```  Now imagine passing null as the searchBean.  You will get the following exception:  ``` Caused by: org.springframework.expression.spel.SpelEvaluationException: EL1007E:(pos 0): Property or field 'findInCache' cannot be found on null 	at org.springframework.expression.spel.ast.PropertyOrFieldReference.readProperty(PropertyOrFieldReference.java:220) ~[spring-expression-4.2.5.RELEASE.jar:4.2.5.RELEASE] 	at org.springframework.expression.spel.ast.PropertyOrFieldReference.getValueInternal(PropertyOrFieldReference.java:94) ~[spring-expression-4.2.5.RELEASE.jar:4.2.5.RELEASE] 	at org.springframework.expression.spel.ast.PropertyOrFieldReference.access$000(PropertyOrFieldReference.java:46) ~[spring-expression-4.2.5.RELEASE.jar:4.2.5.RELEASE] 	at org.springframework.expression.spel.ast.PropertyOrFieldReference$AccessorLValue.getValue(PropertyOrFieldReference.java:374) ~[spring-expression-4.2.5.RELEASE.jar:4.2.5.RELEASE] 	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:88) ~[spring-expression-4.2.5.RELEASE.jar:4.2.5.RELEASE] ```  I disagree with this non-failsafe implementation.  Passing in ""null"" implies that the condition didn't pass,  And exception should **not** be thrown, IMHO.  Instead, no caching should be applied, as the condition didn't pass.   ---  **Affects:** 4.2.5","closed","status: bulk-closed,","spring-projects-issues","2016-04-14T17:24:46Z","2019-01-12T00:14:33Z"
"","18734","NPE thrown when calling methods with an empty @Caching annotation [SPR-14162]","**[Lev Bornovalov](https://jira.spring.io/secure/ViewProfile.jspa?name=lbornov2)** opened **[SPR-14162](https://jira.spring.io/browse/SPR-14162?redirect=false)** and commented  To reproduce:  Call the following proxied method:  ``` @Caching public void someMethod(final String argument) {    .... } ```  This will cause the following exception:  ``` java.lang.NullPointerException: null 	at java.util.ArrayList.addAll(ArrayList.java:577) ~[na:1.8.0_20] 	at org.springframework.cache.annotation.SpringCacheAnnotationParser.parseCacheAnnotations(SpringCacheAnnotationParser.java:89) ~[spring-context-4.2.3.RELEASE.jar:4.2.3.RELEASE] 	at org.springframework.cache.annotation.SpringCacheAnnotationParser.parseCacheAnnotations(SpringCacheAnnotationParser.java:58) ~[spring-context-4.2.3.RELEASE.jar:4.2.3.RELEASE] 	at org.springframework.cache.annotation.AnnotationCacheOperationSource$2.getCacheOperations(AnnotationCacheOperationSource.java:124) ~[spring-context-4.2.3.RELEASE.jar:4.2.3.RELEASE] 	at org.springframework.cache.annotation.AnnotationCacheOperationSource.determineCacheOperations(AnnotationCacheOperationSource.java:142) ~[spring-context-4.2.3.RELEASE.jar:4.2.3.RELEASE] 	at org.springframework.cache.annotation.AnnotationCacheOperationSource.findCacheOperations(AnnotationCacheOperationSource.java:121) ~[spring-context-4.2.3.RELEASE.jar:4.2.3.RELEASE] 	at org.springframework.cache.interceptor.AbstractFallbackCacheOperationSource.computeCacheOperations(AbstractFallbackCacheOperationSource.java:136) ~[spring-context-4.2.3.RELEASE.jar:4.2.3.RELEASE] 	at org.springframework.cache.interceptor.AbstractFallbackCacheOperationSource.getCacheOperations(AbstractFallbackCacheOperationSource.java:97) ~[spring-context-4.2.3.RELEASE.jar:4.2.3.RELEASE] 	at org.springframework.cache.interceptor.CacheOperationSourcePointcut.matches(CacheOperationSourcePointcut.java:39) ~[spring-context-4.2.3.RELEASE.jar:4.2.3.RELEASE] 	at org.springframework.aop.support.MethodMatchers.matches(MethodMatchers.java:94) ~[spring-aop-4.2.3.RELEASE.jar:4.2.3.RELEASE] ```  Although you may be thinking that including an empty `@Caching` annotation is a corner-case, in our particular use-case, it's required, as we're calling a custom implementation of org.springframework.cache.interceptor.CacheInterceptor.  We are doing this because the `@CacheEvict` funtionality does not allow use to easily purge individual keys based on method args, etc...  ---  **Affects:** 3.2.16, 4.2.3  **Issue Links:** - #18663 `@RequestHeader` HttpHeaders fails with NPE against null header value  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3d6b0ca5bee3578c7a433f44d0d86cf5e521b10d, https://github.com/spring-projects/spring-framework/commit/da112611a5dbbc27ec92fc9b00425b2846ad98e5, https://github.com/spring-projects/spring-framework/commit/33dcef358305865b54e40e48199174ce34081034  **Backported to:** [3.2.17](https://github.com/spring-projects/spring-framework/milestone/105?closed=1)","closed","in: core,","spring-projects-issues","2016-04-12T20:21:02Z","2019-01-13T05:27:01Z"
"","18691","@Context is null during integration testing [SPR-14119]","**[Leo](https://jira.spring.io/secure/ViewProfile.jspa?name=lbaguimatang)** opened **[SPR-14119](https://jira.spring.io/browse/SPR-14119?redirect=false)** and commented  Using `@WebIntegrationTest` annotation on IT classes, `@Context` variables does not get injected.   ---  **Affects:** 4.2.3  **Reference URL:** http://stackoverflow.com/questions/36437121/context-is-null-during-integration-test","closed","status: invalid,","spring-projects-issues","2016-04-05T19:41:48Z","2019-01-12T05:22:59Z"
"","17620","SimpleNamespaceContext does not implement the full contract of the NamespaceContext interface [SPR-13713]","**[Leo Arnold](https://jira.spring.io/secure/ViewProfile.jspa?name=leoarnold)** opened **[SPR-13713](https://jira.spring.io/browse/SPR-13713?redirect=false)** and commented  I reviewed the code of `org.springframework.util.xml.SimpleNamespaceContext` and found that it does not implement several features required by the documentation of [`javax.xml.namespace.NamespaceContext` as per Java 8](http://docs.oracle.com/javase/8/docs/api/javax/xml/namespace/NamespaceContext.html): * The iterator returned by `getPrefixes(namespaceURI)` is modifiable, but should not be. * Missing null check: `getPrefix(null)` does not throw `IllegalArgumentException` * Calling `getPrefixes(namespaceURI)` after a `clear()` can yield a non-empty iterator, because the map `namespaceUriToPrefixes` has not been cleared.  I would like to **submit a pull request** containing the following changes: * Update unit tests to ensure implementation of the full contract * Add/improve unit tests for all methods * Rewrite all assertions with Hamcrest's `assertThat` for type safety and better error messages when tests are failing * Fix implementation of `SimpleNamespaceContext` to make unit tests pass * Rename private method `getPrefixesInternal` to `getPrefixesList` as a more telling name  No functionality will be added or removed.   ---  **Affects:** 4.2.2  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2015-11-20T22:19:07Z","2016-02-25T09:36:35Z"
"","18604","Ability to assign wildcard path to PathVariable [SPR-14032]","**[Laplie Anderson](https://jira.spring.io/secure/ViewProfile.jspa?name=laplie)** opened **[SPR-14032](https://jira.spring.io/browse/SPR-14032?redirect=false)** and commented  Currently, the way to get the wildcard part of a request mapping is a bit cumbersome:  ```java @RequestMapping(""/somePrefix/{element}/**"") public void myAction(@PathVariable String element, HttpServletRequest request) { 	    String path = (String) request.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE); 	   // do some path manipulation here 	   // do actual work } ```  It would be nicer if we could just have the element assigned directly:  ```java @RequestMapping(""/somePrefix/{element}/{**}"") public void myAction(@PathVariable String element, @PathVariable String wildcard) { 	  // do actual work } ```  ---  **Issue Links:** - #18766 Wildcard mapping for path segments at the end of a `@RequestMapping`","closed","type: enhancement,","spring-projects-issues","2016-03-09T15:17:41Z","2019-01-13T20:41:44Z"
"","18411","Regression: Shared EntityManager proxy insists on actualTransactiveActive flag even with SYNCHRONIZATION_NEVER [SPR-13838]","**[Krzysztof Lewandowski](https://jira.spring.io/secure/ViewProfile.jspa?name=bikeholik)** opened **[SPR-13838](https://jira.spring.io/browse/SPR-13838?redirect=false)** and commented  If set the transaction synchronization to be SYNCHRONIZATION_NEVER, e.g.:  ``` @Override public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {     if(bean instanceof AbstractPlatformTransactionManager){         AbstractPlatformTransactionManager transactionManager = (AbstractPlatformTransactionManager)bean;         transactionManager.setTransactionSynchronization(SYNCHRONIZATION_NEVER);     }     return bean; } ```  I get a following exception when trying to save an object using jpa repository:  ``` Caused by: javax.persistence.TransactionRequiredException: No EntityManager with actual transaction available for current thread - cannot reliably process 'persist' call 	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:277) 	at com.sun.proxy.$Proxy126.persist(Unknown Source) 	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:439) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:483) 	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.executeMethodOn(RepositoryFactorySupport.java:483) 	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:468) 	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:440) 	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) 	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:61) 	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) 	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99) 	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:281) 	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96) 	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) 	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:136) ```  With that setup `TransactionSynchronizationManager.setActualTransactionActive(status.hasTransaction());` is not called and now SharedEntityManagerCreator requires actual transaction to be active:  ```             if (target == null || !TransactionSynchronizationManager.isActualTransactionActive()) {          throw new TransactionRequiredException(""No EntityManager with actual transaction available "" +                            ""for current thread - cannot reliably process '"" + method.getName() + ""' call""); } ```  ---  **Affects:** 4.2.4  **Attachments:** - [screenshot-1.png](https://jira.spring.io/secure/attachment/23256/screenshot-1.png) (_119.53 kB_) - [screenshot-2.png](https://jira.spring.io/secure/attachment/23257/screenshot-2.png) (_222.84 kB_)  **Issue Links:** - #16541 Shared EntityManager should immediately throw TransactionRequiredException if no transaction in progress - #17833 Transaction propagation SUPPORTS leads to “HHH000326: Cannot join transaction” warning - #17834 Inconsistent JPA behavior using no transaction, propagation SUPPORTS and OpenEntityManager pattern - #18944 Shared EntityManager's target lookup doesn't work with Spring Data's ChainedTransactionManager  1 votes, 5 watchers","closed","type: bug,","spring-projects-issues","2016-01-05T13:55:29Z","2019-01-11T18:30:44Z"
"","18170","HttpMessageConverterExtractor should wrap HttpMessageNotReadableException in RestClientExceptions [SPR-13592]","**[Kristoffer Peterhänsel](https://jira.spring.io/secure/ViewProfile.jspa?name=kristoffer)** opened **[SPR-13592](https://jira.spring.io/browse/SPR-13592?redirect=false)** and commented  When using a `RestTemplate` instance within a Spring MVC application, client exceptions may propagate in the MVC stack and can be wrongly mapped by server `ExceptionHandlers`, leading to a wrong HTTP response sent to the browser sending a request to the MVC application.  The `RestTemplate` instance uses `HttpMessageConverter` to decode the remote service responses; and when those fail decoding an HTTP response, they can throw an `HttpMessageNotReadableException`. That exception then bubbles up through the `HttpMessageConverterExtractor`, `RestTemplate` and the whole MVC stack, later mapped to HTTP 400 responses, since those exceptions can also be throws by the server stack when the incoming requests can't be deserialized.  Such exceptions should be nested under a `RestClientException` to avoid erroneous server responses and confusing situations for developers.  ---  **Affects:** 4.1.5  **Issue Links:** - #20075 Revisit CodecException vs ResponseStatusException in DecoderHttpMessageReader - #21533 Consistent throwing of HttpMessageNotReadableException in HttpMessageConverter implementations  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/81143a80c453be9665f86ac06ef0b67d40971d79, https://github.com/spring-projects/spring-framework/commit/b84fefc430cdf10d428b02f6d61009b7460ae26f","closed","type: enhancement,","spring-projects-issues","2015-10-21T11:11:50Z","2019-01-11T17:37:09Z"
"","18586","Expose AbstractMessageConverterMethodProcessor.writeWithMessageConverters functionality for usage in Spring Security [SPR-14014]","**[Konstantinos Filios](https://jira.spring.io/secure/ViewProfile.jspa?name=konfilios)** opened **[SPR-14014](https://jira.spring.io/browse/SPR-14014?redirect=false)** and commented  ## Problem Statement  The Web is full of resources on how one could produce a ""restful"" (broadly speaking) login endpoint using Spring MVC and Spring Security. However, all suggested implementations are poor when it comes to MVC-Security consistency in:  1. content negotiation 2. error handling  What authors all around the web do is write custom `AuthenticationSuccessHandler`, `AuthenticationFailureHandler`, `AuthenticationEntryPoint`, etc. implementations which do more or less this:  ```java response.getOutputStream().println(""{ \""error\"": \"""" + authenticationException.getMessage() + ""\"" }""); ```  More ""sophisticated"" approaches might use an `ObjectMapper` instead of producing JSON using string manipulation, but the problems remain:  1. The request headers for content types are not taken into consideration in order to **choose the appropriate message converter**, although the configuration is already there for MVC. This means that in cases where XML and JSON should be supported, MVC functionality must be duplicated in the Security handlers.  2. The **fields of the returned error objects** are not automatically consistent with MVC's exception handling infrastructure (`ErrorAttributes`, etc.). This means that an `AuthenticationException` will be translated to the appropriate HTTP response (JSON, XML, etc.) if it comes from a `@Controller` but not when it comes from an `AuthenticationFailureHandler` (which is executed from an `ExceptionTranslationFilter`)  ## Suggested Solution / Feature Request  Problem (2) can be more easily mitigated. Point (1) however is trickier. Specifically it is as tricky as the implementation of `AbstractMessageConverterMethodProcessor.writeWithMessageConverters`, which would be the perfect solution under the following circumstances:  1. If the method was accessible from an object that can be easily `@Autowire` d (i.e. in an `AuthenticationFailureHandler`, etc.)  2. If the method's signature was compatible (or even adaptable) to a more standard form such as `(HttpServletRequest request, HttpServletResponse response, ResponseEntity responseEntity)` rather than the current `(T returnValue, MethodParameter returnType, ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)`  I suspect that the `GenericHttpMessageConverter` might cause complications in such an adaptation, but I think that having all the MVC message converter infrastructure available for arbitrary usage (in my case it is Spring Security) would be a very helpful feature.  ps: Maybe this [SO answer](http://stackoverflow.com/a/26502321/1289270) highlights the situation better than I have.   --- No further details from [SPR-14014](https://jira.spring.io/browse/SPR-14014?redirect=false)","closed","type: enhancement,","spring-projects-issues","2016-03-03T13:02:52Z","2018-12-05T18:05:18Z"
"","18198","webjars resource handling may run into NPE in JarURLInputStream [SPR-13620]","**[Konrad Lubianka](https://jira.spring.io/secure/ViewProfile.jspa?name=darnok1234)** opened **[SPR-13620](https://jira.spring.io/browse/SPR-13620?redirect=false)** and commented  Project setup: * Spring Boot 1.2.7.RELEASE * Spring MVC 4.1.8.RELEASE * Embedded Tomcat 8.0.28 * JDK 1.8.0_51 * Default Spring Boot mvc autoconfiguration * Added jQuery 2.1.3 webjar maven dependency  Run application from IDE by executing main method or by maven spring-boot:run command  Request to webjars/jquery/2.1.3/ or webjars/jquery/ ends up in a HTTP 500:  ``` java.lang.NullPointerException: null 	at java.io.FilterInputStream.read(FilterInputStream.java:133) 	at java.io.FilterInputStream.read(FilterInputStream.java:107) 	at org.springframework.util.StreamUtils.copy(StreamUtils.java:123) 	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.writeContent(ResourceHttpRequestHandler.java:411) 	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:242) 	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:51) 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:959) 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:893) 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:967) 	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:858) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:622) 	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:843) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:729) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:291) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) 	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:118) 	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:84) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:113) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:103) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:113) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:154) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:45) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:199) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:110) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.csrf.CsrfFilter.doFilterInternal(CsrfFilter.java:85) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:57) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:87) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:50) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.access.channel.ChannelProcessingFilter.doFilter(ChannelProcessingFilter.java:144) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at com.intrasoft.mysafety.config.security.custom.CorsFilter.doFilter(CorsFilter.java:24) 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) 	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:192) 	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:160) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at org.eclipse.jetty.servlets.UserAgentFilter.doFilter(UserAgentFilter.java:83) 	at org.eclipse.jetty.servlets.GzipFilter.doFilter(GzipFilter.java:364) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:85) 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) 	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:217) 	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106) 	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502) 	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:616) 	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:142) 	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79) 	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88) 	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:518) 	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1091) 	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:673) 	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1500) 	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1456) 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) 	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) 	at java.lang.Thread.run(Thread.java:745) ```  I set debug breakpoint on org.springframework.web.servlet.resource.ResourceHttpRequestHandler.writeContent(ResourceHttpRequestHandler.java:411)  ```java protected void writeContent(HttpServletResponse response, Resource resource) throws IOException { 		try { 			InputStream in = resource.getInputStream(); 			try { 				StreamUtils.copy(in, response.getOutputStream());// debug breakpoint 			} 			finally { 				try { 					in.close(); 				} 				catch (Throwable ex) { 					// ignore, see SPR-12999 				} 			} 		} 		catch (FileNotFoundException ex) { 			// ignore, see SPR-12999 		} 	} ```  Variables state: !debug_screen.png|thumbnail!  Error is caused by calling read method of JarURLInputStream which delegates to null when resource is a directory inside another JAR file on classpath.  Additionally when application is run by executing java -jar (all jars are packed inside Spring Boot jar), request to webjars/jquery/2.1.3/ or webjars/jquery/ ends up in a HTTP 200. This time inner class DataInputStream of org.springframework.boot.loader.data.RandomAccessDataFile is used, not inner class JarURLInputStream of sun.net.www.protocol.jar.JarURLConnection   ---  **Affects:** 4.1.8, 4.2.2  **Attachments:** - [debug_screen.png](https://jira.spring.io/secure/attachment/23199/debug_screen.png) (_14.88 kB_)  **Backported to:** [4.1.9](https://github.com/spring-projects/spring-framework/milestone/133?closed=1)","closed","type: bug,","spring-projects-issues","2015-10-29T11:19:28Z","2015-11-15T17:03:13Z"
"","18076","SseEmitter should ignore calls to send after timeout [SPR-13498]","**[Konrad Garus](https://jira.spring.io/secure/ViewProfile.jspa?name=konrad.garus)** opened **[SPR-13498](https://jira.spring.io/browse/SPR-13498?redirect=false)** and commented  Let's say I have a misbehaving handler that keeps using SseEmitter even though it's closed/timed out:  ``` @RequestMapping(path = ""/api/events"", method = RequestMethod.GET) public SseEmitter getEvents() throws Exception {     SseEmitter emitter = new SseEmitter();     Executors.newScheduledThreadPool(1).scheduleAtFixedRate(() -> {         try {             emitter.send(SseEmitter.event().data(""Thread writing: "" + Thread.currentThread()).name(""ping""));         } catch (Exception e) {         }     } , 1000, 1000, TimeUnit.MILLISECONDS);     return emitter; } ```  When I get the event stream for the first time, it looks like you would expect, except for the JSON at the very bottom (see #18075):  ``` $ curl -v http://localhost:8080/api/events * Hostname was NOT found in DNS cache *   Trying 127.0.0.1... * Connected to localhost (127.0.0.1) port 8080 (#0) > GET /api/events HTTP/1.1 > User-Agent: curl/7.38.0 > Host: localhost:8080 > Accept: */* >  < HTTP/1.1 200 OK * Server Apache-Coyote/1.1 is not blacklisted < Server: Apache-Coyote/1.1 < Content-Type: text/event-stream;charset=UTF-8 < Transfer-Encoding: chunked < Date: Thu, 24 Sep 2015 16:03:35 GMT <  data:Thread writing: Thread[pool-1-thread-1,5,main] event:ping  data:Thread writing: Thread[pool-1-thread-1,5,main] event:ping  1. ... repeats until timeout ...  * Connection #0 to host localhost left intact {""timestamp"":1443110621518,""status"":200,""error"":""OK"",""message"":""No message available"",""path"":""/api/events""} ```  Now, have a look at what happens on reconnect:  ``` $ curl -v http://localhost:8080/api/events * Hostname was NOT found in DNS cache *   Trying 127.0.0.1... * Connected to localhost (127.0.0.1) port 8080 (#0) > GET /api/events HTTP/1.1 > User-Agent: curl/7.38.0 > Host: localhost:8080 > Accept: */* >  data:data:data:data:data: 5 data: 2e Thread writing: Thread[pool-1-thread-1,5,main] d  event:ping   5 data: 2e Thread writing: Thread[pool-2-thread-1,5,main] d  event:ping   5 data: 2e Thread writing: Thread[pool-1-thread-1,5,main] d  event:ping   5 data: 2e Thread writing: Thread[pool-2-thread-1,5,main] d  event:ping ```  We can see both threads writing to the same connection, even though the first emitter was supposedly closed!  What's even more interesting, it's not limited to that endpoint or SSE streams. Here's what happens when I try to load a static resource:  ``` $ curl -v http://localhost:8080 * Rebuilt URL to: http://localhost:8080/ * Hostname was NOT found in DNS cache *   Trying 127.0.0.1... * Connected to localhost (127.0.0.1) port 8080 (#0) > GET / HTTP/1.1 > User-Agent: curl/7.38.0 > Host: localhost:8080 > Accept: */* >  data:data:data:data:data:data:data:data:data:data:data:data:data:data:data:data:data:data:data:data:data:data:   Whatever   0 ```  Note the ""data:data:data:..."" on top.  Yes, the code leading to this bug is broken. It's just a made-up example though. I suspect in the real life such issues are still possible with clean-looking code.  I think this should be addressed by preventing use of a closed `SseEmitter`. If you try to send an event to one, you get an exception immediately and it doesn't even try to touch the underlying connection. Logically something like:  ``` public class SseEmitter {     public void send(Object event) {         if(closed) { throw new IllegalStateException(""Emitter closed""); }         connection.send(event);     } } ```  ---  **Affects:** 4.2.1  **Issue Links:** - #18075   Poor SseEmitter handling of timeouts","closed","type: enhancement,","spring-projects-issues","2015-09-24T16:19:22Z","2019-01-11T17:20:38Z"
"","18075","Poor SseEmitter handling of timeouts [SPR-13497]","**[Konrad Garus](https://jira.spring.io/secure/ViewProfile.jspa?name=konrad.garus)** opened **[SPR-13497](https://jira.spring.io/browse/SPR-13497?redirect=false)** and commented  Whenever Tomcat async request times out, an error appears in the log and unexpected JSON message is emitted in response. For example, it happens with embedded Tomcat that arrives with Boot, where asyncTimeout appears to be 30 seconds.  To reproduce, create a Spring Boot app with embedded Tomcat. Just spring-boot-starter-web, version 1.3.0.M5. Let the main class look like:  ``` @SpringBootApplication @Controller public class Application {     private static final Logger log = LoggerFactory.getLogger(Application.class);      @RequestMapping(path = ""/api/events"", method = RequestMethod.GET)     public SseEmitter getEvents() throws Exception {         SseEmitter emitter = new SseEmitter();         ScheduledExecutorService pingThread = Executors.newScheduledThreadPool(1);         emitter.onCompletion(() -> {             log.info(""Complete"");             pingThread.shutdown();         });         emitter.onTimeout(() -> {             log.info(""Timeout"");         });         pingThread.scheduleAtFixedRate(() -> {             try {                 emitter.send(SseEmitter.event().data(""Hello"").name(""ping""));             } catch (Exception e) {                 log.error(""Unable to emit"", e);                 throw new RuntimeException(e);             }         } , 1000, 1000, TimeUnit.MILLISECONDS);         return emitter;     }      public static void main(String[] args) throws Exception {         SpringApplication.run(Application.class, args);     } } ```  Run the app.  Get the event stream, and observe:  ``` $ curl -v http://localhost:8080/api/events * Hostname was NOT found in DNS cache *   Trying 127.0.0.1... * Connected to localhost (127.0.0.1) port 8080 (#0) > GET /api/events HTTP/1.1 > User-Agent: curl/7.38.0 > Host: localhost:8080 > Accept: */* >  < HTTP/1.1 200 OK * Server Apache-Coyote/1.1 is not blacklisted < Server: Apache-Coyote/1.1 < Content-Type: text/event-stream;charset=UTF-8 < Transfer-Encoding: chunked < Date: Thu, 24 Sep 2015 15:51:58 GMT <  data:Hello event:ping  data:Hello event:ping  1. ... repeated 30 times ...  * Connection #0 to host localhost left intact {""timestamp"":1443109923142,""status"":200,""error"":""OK"",""message"":""No message available"",""path"":""/api/events""} ```  Note the JSON at the very bottom.  In addition, when it happens the server log prints:  ``` 2015-09-24 17:53:18.601  WARN 9056 --- [io-8080-exec-10] .w.s.m.s.DefaultHandlerExceptionResolver : Handler execution resulted in exception: Could not find acceptable representation ```  ---  **Affects:** 4.2.1  **Issue Links:** - #18076 SseEmitter should ignore calls to send after timeout","closed","status: declined,","spring-projects-issues","2015-09-24T16:08:31Z","2019-01-12T16:22:49Z"
"","18032","Support custom qualifier annotations in @Transactional [SPR-13452]","**[Konrad Garus](https://jira.spring.io/secure/ViewProfile.jspa?name=konrad.garus)** opened **[SPR-13452](https://jira.spring.io/browse/SPR-13452?redirect=false)** and commented  Given a transaction manager with custom qualifier:  ``` @Configuration public class MyConfiguration {     @Bean     @MyQualifier     public PlatformTransactionManager xman() { ... } } ```  There does not seem to be a way to use it with `@Transactional`. The custom qualifier annotation does not seem to be taken into account for lookup in `BeanFactoryAnnotationUtils`, it's missing from the `AbstractBeanDefinition`.  Using strings for qualifiers means either all the magic-string downsides, or carrying around constants (what is painful). Especially if you're defining a data access ""context"" with numerous beans (`DataSource`, `PlatformTransactionManager`, even more with JPA). A custom, type-safe annotation like `@MyQualifier` makes it a lot easier.  ---  **Issue Links:** - #18392 BeanFactoryAnnotationUtils.qualifiedBeanOfType does not work for `@Qualifier` on bean class  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1d8a3e1f0704ad2c9bd736b57b25316ecf9446b6","closed","type: enhancement,","spring-projects-issues","2015-09-09T11:40:01Z","2019-01-13T05:35:39Z"
"","18285","Hibernate5 metadata access [SPR-13710]","**[Koen Serneels](https://jira.spring.io/secure/ViewProfile.jspa?name=koen%20serneels)** opened **[SPR-13710](https://jira.spring.io/browse/SPR-13710?redirect=false)** and commented  In Hibernate4 accessing the metadata was always possible on a live SessionFactory (SF) by for example using org.hibernate.cfg.Configuration#getClassMappings. The metadata is interesting as it can be used for modifying properties of entities, exporting SQL scripts and so forth.  However, these helper methods have now been removed as of Hibernate5 in favor of a new bootstrap mechanism: the APIs for building the org.hibernate.SessionFactory are now backed by builders like: org.hibernate.boot.registry.BootstrapServiceRegistryBuilder,org.hibernate.boot.MetadataBuilder and org.hibernate.boot.SessionFactoryBuilder  Unfortunately Spring's org.springframework.orm.hibernate5.LocalSessionFactoryBean configures the SF using the legacy style by eventually using  org.hibernate.cfg.Configuration#buildSessionFactory(). While the internal impl of this method has been changed by Hibernate to use the builder style as well, there is no 'intermediate' access (or hook if  you like) foreseen to access for example the metadata builder. This means that after the SF is returned there is no (clean) way to access the metadata.  So the ideal solution would be to to change org.springframework.orm.hibernate5.LocalSessionFactoryBean to make use of the builders and foreseeing additional hook methods to customize each of the builders before they are actually build. Another (maybe easier) solution might be to keep on using org.hibernate.cfg.Configuration#buildSessionFactory(), but allow to pass MetadaSources and/or BootstrapServiceRegistry to the constructor of Configuration (at this time Spring depends on the no-arg constructor of Configuration, which internally creates these objects and hence no reference is possible afterwards)  ---  **Affects:** 4.2.3  **Reference URL:** https://www.mail-archive.com/hibernate-dev@lists.jboss.org/msg12865.html  **Issue Links:** - #18452 LocalSessionFactoryBean (hibernate5) does not correctly pass custom ClassLoader to Hibernate - #18305 Background initialization option for JPA EntityManagerFactory / Hibernate SessionFactory - #19381 Hibernate 5 LocalSessionFactoryBean should allow for dynamic mapping registration (like for Hibernate 4) - #18644 Add setMultiTenantConnectionProvider to org.springframework.orm.hibernate5.LocalSessionFactoryBean","closed","type: enhancement,","spring-projects-issues","2015-11-20T12:47:52Z","2019-01-11T19:32:36Z"
"","18833","Add database product name for SAP HANA [SPR-14261]","**[Klaus Kiefer](https://jira.spring.io/secure/ViewProfile.jspa?name=klaus-sap)** opened **[SPR-14261](https://jira.spring.io/browse/SPR-14261?redirect=false)** and commented  In spring-jdbc/src/main/resources/org/springframework/jdbc/support/sql-error-codes.xml, could you add ""HDB"" as databaseProductName for Hana? This is the name which you get from the Hana JDBC driver. See also: #16392.  ---  **Affects:** 4.3 RC2  **Issue Links:** - #16392 Add SQL error code mapping for SAP HANA database - #17962 Support CALL Statement for SAP HANA - #21005 Add SAP HANA to common JPA database platforms - #21101 Consistent incrementer arrangement for PostgreSQL, DB2 and SAP HANA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7d4d3db0ddd90fe70fd305b27410124301da1b45","closed","type: enhancement,","spring-projects-issues","2016-05-09T11:16:51Z","2019-01-11T17:03:32Z"
"","18542","Improve CacheOperation equals/hashCode implementation performance    [SPR-13970]","**[Khaled Ayoubi](https://jira.spring.io/secure/ViewProfile.jspa?name=kayoubi)** opened **[SPR-13970](https://jira.spring.io/browse/SPR-13970?redirect=false)** and commented  ""CacheAspectSupport"" tries to get a cached version of ""CacheOperationMetadata"" from ""metadataCache"" using ""CacheOperationCacheKey"" as a key  ""CacheOperationCacheKey.equals"" method calls ""CacheOperation.equals"" which calls ""toString"" which is pretty expensive, if I'm in large loop and hitting the cache, I can notice considerable degradation in performance  ---  **Affects:** 4.2.4  **Issue Links:** - #20549 Inefficient equals logic in Spring Cache (_**""is duplicated by""**_) - #21033 `@Cacheable` annotation lead to a huge memory allocation from the side of OperationCache equals/hashCode (_**""is duplicated by""**_)","closed","type: enhancement,","spring-projects-issues","2016-02-22T19:45:36Z","2019-01-13T05:28:11Z"
"","18814","Deadlock possible with AspectJ aspects and multi-threading [SPR-14241]","**[Kevin Richards](https://jira.spring.io/secure/ViewProfile.jspa?name=kevinlr5)** opened **[SPR-14241](https://jira.spring.io/browse/SPR-14241?redirect=false)** and commented  When AspectJ style aspects are used, the aspects are eagerly converted to Spring Advisors, but the AspectJ aspect object is not eagerly created. It is lazily created at the time of its first use. This can be seen in ReflectiveAspectJAdvisorFactory's use of LazySingletonAspectInstanceFacotryDecorator.  When a singleton Spring bean is created, it grabs the lock of singleton bean map. If, inside its constructor, it calls a function that has an uninitialized aspect wrapped around it, it will then grab the lock in LazySingletonAspectInstanceFactoryDecorator.getAspectInstance.  If, in a different thread (started after some other bean finishes construction), a call is made that invokes the same aspect, which has not yet been initialized, the lock in LazySingletonAspectInstanceFactoryDecorator.getAspectInstance will be acquired and then the singleton aspect bean will be instantiated. This requires going through the singleton bean instantiation code, which acquires the singleton bean map lock.  This leads to a deadlock. I've attached a stack trace from jstack of this situation occurring. I think one potential solution would be to eagerly instantiate the singleton AspectJ aspects, not just the advisors that wrap them.  ---  **Affects:** 3.2.16, 4.1.7  **Attachments:** - [deadlock.txt](https://jira.spring.io/secure/attachment/23387/deadlock.txt) (_65.53 kB_)  **Issue Links:** - #17336 Deadlock publishing event while creating listener bean - #10339 avoid synchronization when AspectJExpressionPointcut.getShadowMatch hits cache - #18896 Async advisor retrieval blocks when triggered by singleton init method - #18961 Deadlock while creating a new thread on bean initialization with transactional code invocation  **Backported to:** [3.2.17](https://github.com/spring-projects/spring-framework/milestone/105?closed=1)","closed","in: core,","spring-projects-issues","2016-05-03T18:00:03Z","2021-06-21T13:47:08Z"
"","18318","SubProtocolWebSocketHandler does not update lastSessionCheckTime [SPR-13745]","**[Kevin McLaughlin](https://jira.spring.io/secure/ViewProfile.jspa?name=krm1312)** opened **[SPR-13745](https://jira.spring.io/browse/SPR-13745?redirect=false)** and commented  We're getting a lot of the exceptions below in our logs.  I believe they are caused by our selenium tests not properly establishing the full connection.  That said, there looks to be an issue w/ spring security integration when trying to close the ""half-open"" connections so the exceptions keep repeating.  Couple other things I noticed in SubProtocolWebSocketHandler.java that look questionable to me: * lastSessionCheckTime does not seem to be updated.  So, every handleMessage incurs the overhead of checkSessions().  That does not seem to be the intent of that code. * There is some ~90 minute timer which I haven't figured out.  The same session (I think) is trying to be closed every ~90 minutes.  ``` 2015-11-30 14:27:21.425 ERROR 4500 --- [http-nio-4441-exec-14] o.s.w.s.m.SubProtocolWebSocketHandler    : No messages received after 60440 ms. Closing EventSourceStreamingSockJsSession[id=yvhws030]. 2015-11-30 15:57:55.443 ERROR 4500 --- [http-nio-4441-exec-2] o.s.w.s.m.SubProtocolWebSocketHandler    : No messages received after 60769 ms. Closing EventSourceStreamingSockJsSession[id=yvhws030]. 2015-11-30 17:27:27.201 ERROR 4500 --- [http-nio-4441-exec-14] o.s.w.s.m.SubProtocolWebSocketHandler    : No messages received after 60008 ms. Closing EventSourceStreamingSockJsSession[id=yvhws030]. ```  Here is the full exception:  ``` 2015-11-30 17:49:42.421 ERROR 4500 --- [http-nio-4441-exec-5] o.s.w.s.m.SubProtocolWebSocketHandler    : No messages received after 60722 ms. Closing EventSourceStreamingSockJsSession[id=3pps00e1]. 2015-11-30 17:49:42.421 ERROR 4500 --- [http-nio-4441-exec-5] w.s.h.ExceptionWebSocketHandlerDecorator : Unhandled error for ExceptionWebSocketHandlerDecorator [delegate=LoggingWebSocketHandlerDecorator [delegate=SessionWebSocketHandler [delegate=SubProtocolWebSocketHandler[StompSubProtocolHandler[v10.stomp, v11.stomp, v12.stomp]]]]]  org.springframework.messaging.MessageDeliveryException: Failed to send message to ExecutorSubscribableChannel[clientInboundChannel]; nested exception is org.springframework.security.access.AccessDeniedException: Access is denied 	at org.springframework.messaging.support.AbstractMessageChannel.send(AbstractMessageChannel.java:127) ~[spring-messaging-4.2.3.RELEASE.jar!/:4.2.3.RELEASE] 	at org.springframework.messaging.support.AbstractMessageChannel.send(AbstractMessageChannel.java:104) ~[spring-messaging-4.2.3.RELEASE.jar!/:4.2.3.RELEASE] 	at org.springframework.web.socket.messaging.StompSubProtocolHandler.afterSessionEnded(StompSubProtocolHandler.java:595) ~[spring-websocket-4.2.3.RELEASE.jar!/:4.2.3.RELEASE] 	at org.springframework.web.socket.messaging.SubProtocolWebSocketHandler.clearSession(SubProtocolWebSocketHandler.java:442) [spring-websocket-4.2.3.RELEASE.jar!/:4.2.3.RELEASE] 	at org.springframework.web.socket.messaging.SubProtocolWebSocketHandler.afterConnectionClosed(SubProtocolWebSocketHandler.java:432) [spring-websocket-4.2.3.RELEASE.jar!/:4.2.3.RELEASE] 	at org.springframework.web.socket.handler.WebSocketHandlerDecorator.afterConnectionClosed(WebSocketHandlerDecorator.java:85) [spring-websocket-4.2.3.RELEASE.jar!/:4.2.3.RELEASE] 	at org.springframework.web.socket.handler.WebSocketHandlerDecorator.afterConnectionClosed(WebSocketHandlerDecorator.java:85) [spring-websocket-4.2.3.RELEASE.jar!/:4.2.3.RELEASE] 	at org.springframework.web.socket.handler.LoggingWebSocketHandlerDecorator.afterConnectionClosed(LoggingWebSocketHandlerDecorator.java:72) [spring-websocket-4.2.3.RELEASE.jar!/:4.2.3.RELEASE] 	at org.springframework.web.socket.handler.ExceptionWebSocketHandlerDecorator.afterConnectionClosed(ExceptionWebSocketHandlerDecorator.java:92) [spring-websocket-4.2.3.RELEASE.jar!/:4.2.3.RELEASE] 	at org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.close(AbstractSockJsSession.java:215) [spring-websocket-4.2.3.RELEASE.jar!/:4.2.3.RELEASE] 	at org.springframework.web.socket.handler.WebSocketSessionDecorator.close(WebSocketSessionDecorator.java:158) [spring-websocket-4.2.3.RELEASE.jar!/:4.2.3.RELEASE] 	at org.springframework.web.socket.handler.ConcurrentWebSocketSessionDecorator.close(ConcurrentWebSocketSessionDecorator.java:167) [spring-websocket-4.2.3.RELEASE.jar!/:4.2.3.RELEASE] 	at org.springframework.web.socket.messaging.SubProtocolWebSocketHandler.checkSessions(SubProtocolWebSocketHandler.java:412) [spring-websocket-4.2.3.RELEASE.jar!/:4.2.3.RELEASE] 	at org.springframework.web.socket.messaging.SubProtocolWebSocketHandler.handleMessage(SubProtocolWebSocketHandler.java:321) [spring-websocket-4.2.3.RELEASE.jar!/:4.2.3.RELEASE] 	at org.springframework.web.socket.handler.WebSocketHandlerDecorator.handleMessage(WebSocketHandlerDecorator.java:75) [spring-websocket-4.2.3.RELEASE.jar!/:4.2.3.RELEASE] 	at org.springframework.web.socket.handler.WebSocketHandlerDecorator.handleMessage(WebSocketHandlerDecorator.java:75) [spring-websocket-4.2.3.RELEASE.jar!/:4.2.3.RELEASE] 	at org.springframework.web.socket.handler.LoggingWebSocketHandlerDecorator.handleMessage(LoggingWebSocketHandlerDecorator.java:56) [spring-websocket-4.2.3.RELEASE.jar!/:4.2.3.RELEASE] 	at org.springframework.web.socket.handler.ExceptionWebSocketHandlerDecorator.handleMessage(ExceptionWebSocketHandlerDecorator.java:72) [spring-websocket-4.2.3.RELEASE.jar!/:4.2.3.RELEASE] 	at org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.delegateMessages(AbstractSockJsSession.java:385) [spring-websocket-4.2.3.RELEASE.jar!/:4.2.3.RELEASE] 	at org.springframework.web.socket.sockjs.transport.session.WebSocketServerSockJsSession.handleMessage(WebSocketServerSockJsSession.java:194) [spring-websocket-4.2.3.RELEASE.jar!/:4.2.3.RELEASE] 	at org.springframework.web.socket.sockjs.transport.handler.SockJsWebSocketHandler.handleTextMessage(SockJsWebSocketHandler.java:92) [spring-websocket-4.2.3.RELEASE.jar!/:4.2.3.RELEASE] 	at org.springframework.web.socket.handler.AbstractWebSocketHandler.handleMessage(AbstractWebSocketHandler.java:43) [spring-websocket-4.2.3.RELEASE.jar!/:4.2.3.RELEASE] 	at org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter.handleTextMessage(StandardWebSocketHandlerAdapter.java:112) [spring-websocket-4.2.3.RELEASE.jar!/:4.2.3.RELEASE] 	at org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter.access$000(StandardWebSocketHandlerAdapter.java:42) [spring-websocket-4.2.3.RELEASE.jar!/:4.2.3.RELEASE] 	at org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter$3.onMessage(StandardWebSocketHandlerAdapter.java:82) [spring-websocket-4.2.3.RELEASE.jar!/:4.2.3.RELEASE] 	at org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter$3.onMessage(StandardWebSocketHandlerAdapter.java:79) [spring-websocket-4.2.3.RELEASE.jar!/:4.2.3.RELEASE] 	at org.apache.tomcat.websocket.WsFrameBase.sendMessageText(WsFrameBase.java:393) [tomcat-embed-websocket-8.0.28.jar!/:8.0.28] 	at org.apache.tomcat.websocket.WsFrameBase.processDataText(WsFrameBase.java:494) [tomcat-embed-websocket-8.0.28.jar!/:8.0.28] 	at org.apache.tomcat.websocket.WsFrameBase.processData(WsFrameBase.java:289) [tomcat-embed-websocket-8.0.28.jar!/:8.0.28] 	at org.apache.tomcat.websocket.WsFrameBase.processInputBuffer(WsFrameBase.java:130) [tomcat-embed-websocket-8.0.28.jar!/:8.0.28] 	at org.apache.tomcat.websocket.server.WsFrameServer.onDataAvailable(WsFrameServer.java:60) [tomcat-embed-websocket-8.0.28.jar!/:8.0.28] 	at org.apache.tomcat.websocket.server.WsHttpUpgradeHandler$WsReadListener.onDataAvailable(WsHttpUpgradeHandler.java:203) [tomcat-embed-websocket-8.0.28.jar!/:8.0.28] 	at org.apache.coyote.http11.upgrade.AbstractServletInputStream.onDataAvailable(AbstractServletInputStream.java:198) [tomcat-embed-core-8.0.28.jar!/:8.0.28] 	at org.apache.coyote.http11.upgrade.AbstractProcessor.upgradeDispatch(AbstractProcessor.java:96) [tomcat-embed-core-8.0.28.jar!/:8.0.28] 	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:668) [tomcat-embed-core-8.0.28.jar!/:8.0.28] 	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1500) [tomcat-embed-core-8.0.28.jar!/:8.0.28] 	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1456) [tomcat-embed-core-8.0.28.jar!/:8.0.28] 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_65] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_65] 	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.0.28.jar!/:8.0.28] 	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_65] Caused by: org.springframework.security.access.AccessDeniedException: Access is denied 	at org.springframework.security.access.vote.AffirmativeBased.decide(AffirmativeBased.java:83) ~[spring-security-core-4.0.3.RELEASE.jar!/:4.0.3.RELEASE] 	at org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(AbstractSecurityInterceptor.java:232) ~[spring-security-core-4.0.3.RELEASE.jar!/:4.0.3.RELEASE] 	at org.springframework.security.messaging.access.intercept.ChannelSecurityInterceptor.preSend(ChannelSecurityInterceptor.java:69) ~[spring-security-messaging-4.0.3.RELEASE.jar!/:4.0.3.RELEASE] 	at org.springframework.messaging.support.AbstractMessageChannel$ChannelInterceptorChain.applyPreSend(AbstractMessageChannel.java:158) ~[spring-messaging-4.2.3.RELEASE.jar!/:4.2.3.RELEASE] 	at org.springframework.messaging.support.AbstractMessageChannel.send(AbstractMessageChannel.java:113) ~[spring-messaging-4.2.3.RELEASE.jar!/:4.2.3.RELEASE] 	... 40 common frames omitted ```  ``` 2015-11-30 17:49:52.810  INFO 4500 --- [MessageBroker-14] o.s.w.s.c.WebSocketMessageBrokerStats    : WebSocketSession[51 current WS(45)-HttpStream(6)-HttpPoll(0), 5482 total, 3521 closed abnormally (3521 connect failure, 0 send limit, 1 transport error)], stompSubProtocol[processed CONNECT(215)-CONNECTED(147)-DISCONNECT(0)], stompBrokerRelay[16 sessions, localhost:61613 (available), processed CONNECT(148)-CONNECTED(148)-DISCONNECT(117)], inboundChannel[pool size = 32, active threads = 0, queued tasks = 0, completed tasks = 135534], outboundChannelpool size = 32, active threads = 0, queued tasks = 0, completed tasks = 40559], sockJsScheduler[pool size = 16, active threads = 1, queued tasks = 38, completed tasks = 44458] ```    ---  **Affects:** 4.1.8, 4.2.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ff8bbc93f374e23d2c938d8945cb2d97749e68aa, https://github.com/spring-projects/spring-framework/commit/f5e681e6e6094124ebec9445edf81895da0bdac6  **Backported to:** [4.1.9](https://github.com/spring-projects/spring-framework/milestone/133?closed=1)","closed","type: bug,","spring-projects-issues","2015-11-30T18:06:23Z","2015-12-17T09:05:31Z"
"","18236","HTTP Range requests hang on large file in nested jar [SPR-13661]","**[Kevin McLaughlin](https://jira.spring.io/secure/ViewProfile.jspa?name=krm1312)** opened **[SPR-13661](https://jira.spring.io/browse/SPR-13661?redirect=false)** and commented  Followup from #15431.  We ended up adding a servlet filter that drops attempts to set ACCEPT_RANGE header. Sample bootapp showing this issue is at https://github.com/krm1312/springrangeissues. Take that project and:  ``` mvn clean package && java -jar bootapp/target/bootapp.jar ```  and then try a range request with curl:  ``` curl -vvv -H ""Accept-Encoding: gzip""  -H 'Range: bytes=4726785-5726784' http://localhost:8080/test/file.bin > /tmp/f ```  It effectively hangs.  ---  **Affects:** 4.2.2  **Issue Links:** - #18235 Allow disabling HTTP range support - #15431 Add support for http byte-range requests  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b35d44bd4c4f2f12d6c337bc96f53f246df3c4c0","closed","type: bug,","spring-projects-issues","2015-11-09T18:37:07Z","2019-01-11T19:13:19Z"
"","18235","Allow disabling HTTP range support [SPR-13660]","**[Kevin McLaughlin](https://jira.spring.io/secure/ViewProfile.jspa?name=krm1312)** opened **[SPR-13660](https://jira.spring.io/browse/SPR-13660?redirect=false)** and commented  Follow up from #15431.  There should be a way to easily disable Range support in ResourceHttpRequestHandler.  https://tools.ietf.org/html/rfc7233  Filter we are using to do this (ugly):  ```java public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws             IOException, ServletException {          HttpServletResponse httpResponse = (HttpServletResponse) response;         HttpServletRequest httpRequest = (HttpServletRequest) request;          httpResponse.setHeader(HttpHeaders.ACCEPT_RANGES, ""none"");          // Wrapped response which ignores requests to set Accept-Ranges header.         HttpServletResponse wrappedResponse = new HttpServletResponseWrapper(httpResponse) {             @Override             public void setHeader(String name, String value) {                 if (!HttpHeaders.ACCEPT_RANGES.equals(name)) {                     super.setHeader(name, value);                 } else {                     log.trace(""Ignoring attempt to set {} to {}"", name, value);                 }             }         };          // Wrapped request which hides Range header so Spring doesn't try to fulfill a Range         // request.         HttpServletRequest wrappedRequest = new HttpServletRequestWrapper(httpRequest) {             /**              * See ResourceHttpRequestHandler.java in spring.  This could break if the condition checking              * if this header exists changes to use a different method on request.              */             @Override             public String getHeader(String name) {                 return HttpHeaders.RANGE.equals(name) ? null : super.getHeader(name);             }         };          chain.doFilter(wrappedRequest, wrappedResponse);     } ```  ---  **Affects:** 4.2.2  **Issue Links:** - #15431 Add support for http byte-range requests - #18236 HTTP Range requests hang on large file in nested jar","closed","type: enhancement,","spring-projects-issues","2015-11-09T18:31:19Z","2019-01-11T19:13:27Z"
"","18514","OkHttp RestTemplate adapter uses inappropriate async requests [SPR-13942]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-13942](https://jira.spring.io/browse/SPR-13942?redirect=false)** and commented  `OkHttpClientHttpRequestFactory` implements both `ClientHttpRequestFactory` and `AsyncClientHttpRequestFactory`, but regardless of whether it's called via `createRequest` or `createAsyncRequest` it always creates an `OkHttpClientHttpRequest`, which uses OkHttp's async API.  There's no obvious issue with this, since calls to the synchronous method of `OkHttpClientHttpRequest` just block until the OkHttp async API returns the goods, but there are scenarios where using the OkHttp async API breaks things, e.g. when the client code is using thread-local-based request interceptors.  I suggest that `OkHttpClientHttpRequest` is altered to use the OkHttp sync API when invoked via the `ClientHttpRequest` interface, and the OkHttp async API when invoked through the {[AsyncClientHttpRequest}} interface.   ---  **Affects:** 4.2.4  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/963, and commits https://github.com/spring-projects/spring-framework/commit/e36b7531d83ceb41274d4c66fa2f0c3dc79fbd19, https://github.com/spring-projects/spring-framework/commit/37b32d38bcb8a5e28ef17104ae8113c33b59a5df","closed","type: enhancement,","spring-projects-issues","2016-02-12T04:54:12Z","2016-04-06T08:38:14Z"
"","18138","Backport of SPR-13123 for 4.1.x branch [SPR-13562]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-13562](https://jira.spring.io/browse/SPR-13562?redirect=false)** and commented  #17714 describes a nasty concurrency bug which we're suffering from when using 4.1.6. That bug has been fixed on the 4.2.x branch (targeted for 4.2.2), but it'd be great to see this back-ported to the 4.1.x branch also.  A quick test of a git cherry-pick of [the commit](https://github.com/spring-projects/spring-framework/commit/097bcfb997bd215c7b39635770e34812744f0d9e) suggests that it should be a trivial thing to do.  ---  **Affects:** 4.1.7  1 votes, 5 watchers","closed","in: core,","spring-projects-issues","2015-10-12T04:07:11Z","2019-01-12T16:22:46Z"
"","18610","Cannot detect transaction timeout after query execution on DataSourceTransactionManager [SPR-14038]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-14038](https://jira.spring.io/browse/SPR-14038?redirect=false)** and commented  Currently, there are cases where the transaction in excess of the timeout period is committed.  e.x.)  ``` @Transactional(timeout = 2) // Timeout is 2 sec @Service public class TransactionalService {      @Autowired     private JdbcTemplate jdbcTemplate;      public void execute1() throws InterruptedException {         TimeUnit.SECONDS.sleep(3);          jdbcTemplate.execute(""..."");  // Detect transaction timeout !! -> Rollback !!         TimeUnit.SECONDS.sleep(0);     }      public void execute2() throws InterruptedException {         TimeUnit.SECONDS.sleep(1);          jdbcTemplate.execute(""...""); // Commit by DataSourceTransactionManager ...          TimeUnit.SECONDS.sleep(2);     }  } ```  This behavior is same with `JpaTransactionManager` and `JmsTransactionManager`. If `JtaTransactionManager` is used, we can detect a transaction timeout.  I hope to detect timeout at committing. What do you think ?    ---  **Affects:** 4.2.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/3c2a425b98d3c6a0f2e245f6b07e1b86e8cf9111, https://github.com/spring-projects/spring-framework-issues/commit/2b20a1a8fd1d5b9664825954262ad31e5e5dc7d5","closed","status: bulk-closed,","spring-projects-issues","2016-03-10T20:00:31Z","2019-01-12T00:14:51Z"
"","18336","Fix JavaDoc of @EventListener [SPR-13763]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-13763](https://jira.spring.io/browse/SPR-13763?redirect=false)** and commented  `@EventListener`'s JavaDoc has small mistake. it is description for trigger which `EventListenerMethodProcessor` is registered automatically when using XML config.  The `` element does not exist. It should be changed to the `` or `` element.  I will submit a PR at later.   ---  **Affects:** 4.2.3  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/932, and commits https://github.com/spring-projects/spring-framework/commit/7a8a9c71b6de278f0f8f374f71bf7c648557f83e","closed","in: core,","spring-projects-issues","2015-12-05T12:27:11Z","2015-12-17T09:33:55Z"
"","18137","Add a PropertyEditor that convert to null for empty string [SPR-13561]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-13561](https://jira.spring.io/browse/SPR-13561?redirect=false)** and commented  In my application, input value at HTML form can not be trim as application specification. But empty string should be convert to a `null`. Therefore, i want to add a `PropertyEditor` which convert to `null` for empty string without trim processing. I think this class can be used at many applications.  ```java public class EmptyStringToNullEditor extends PropertyEditorSupport {  	@Override 	public void setAsText(String text) { 		if (text == null || text.isEmpty()) { 			setValue(null); 		} else { 			setValue(text); 		} 	}  	@Override 	public String getAsText() { 		Object value = getValue(); 		return (value != null) ? value.toString() : """"; 	}  } ```  How do think ? I submit a PR at later. Thanks.   ---  **Affects:** 4.2.1  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/885","closed","status: bulk-closed,","spring-projects-issues","2015-10-10T20:09:15Z","2019-01-12T00:15:23Z"
"","18122","Provide empty Model to @ExceptionHandler methods [SPR-13546]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-13546](https://jira.spring.io/browse/SPR-13546?redirect=false)** and commented  Currently, when i want to add a object into the `Model`, i implements as returning the `ModelAndView` object from `@ExceptionHandler` method as follow.  ```java @ExceptionHandler @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR) public ModelAndView handleException(Exception e) { 	ModelAndView mav = new ModelAndView(""error/systemError""); 	mav.getModelMap().addAttribute(""message"", e.getMessage()); 	return mav; } ```  I want to use the `Model` at `@ExceptionHandler` method argument instead of `ModelAndView` by default as follow.  ```java @ExceptionHandler @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR) public String handleException(Exception e, Model model) { 	model.addAttribute(""message"", e.getMessage()); 	return ""error/systemError""; } ```  How do think ? I submit PR at later.   ---  **Affects:** 4.2.1  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/883, and commits https://github.com/spring-projects/spring-framework/commit/4391b299d9dd3a668bd45a4347bb52620d19e122, https://github.com/spring-projects/spring-framework/commit/44b76d39a48f1044d2b79c69722f7d95a66aa370","closed","type: enhancement,","spring-projects-issues","2015-10-07T16:12:47Z","2015-10-15T13:04:43Z"
"","18097","Update reference documentation for spring JSP Tag Library [SPR-13520]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-13520](https://jira.spring.io/browse/SPR-13520?redirect=false)** and commented  Currently, descriptions for following custom tags are not exist.  * `` * `` * `` * `servletRelativeAction` attribute of ``  Currently, descriptions for following attributes are wrong.  * `url` attribute of `` is not exist. `url` should be changed to `value`.  ---  **Affects:** 4.2.1  **Issue Links:** - #15015 Form tag prepending context/servlet path breaks use for portlets - #17977 Misleading note on readonly and disabled flags in spring-form.tld  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a77846877158077b169ecd02f28cd9523c384f6a","closed","type: documentation,","spring-projects-issues","2015-09-28T14:41:52Z","2019-01-11T17:27:49Z"
"","18095","Conversion support for java.time.YearMonth (as well as MonthDay) [SPR-13518]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-13518](https://jira.spring.io/browse/SPR-13518?redirect=false)** and commented  I hope to support the `java.time.YearMonth` class in type conversion service.  For example:  ```java @RequestMapping(""/timecards"") @Controller public class TimecardController {         @Autowired         TimecardService timecardService;  	@RequestMapping(path = ""{targetMonth}"", method = RequestMethod.GET) 	public String viewDetail(@DateTimeFormat(pattern = ""yyyyMM"") @PathVariable YearMonth targetMonth, Model model) {                 Timecard timecard = timecardService.getTimecard(targetMonth); 		model.addAttribute(timecard); 		return ""timecard/detail""; 	} } ```  How do think ?  ---  **Affects:** 4.2.1  **Issue Links:** - #18303 NoClassDefFoundError: org/joda/time/YearMonth for joda-time < 2 - #19405 `@DateTimeFormat` support for YearMonth, MonthDay, Year - #18156 Add conversion support for java.time.Duration - #18294 Add JSR 310 Period and Duration Converters","closed","type: enhancement,","spring-projects-issues","2015-09-28T09:25:02Z","2019-01-13T05:35:23Z"
"","18081","First new line character is removed when use  tag [SPR-13503]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-13503](https://jira.spring.io/browse/SPR-13503?redirect=false)** and commented  When first character of input value is new line character, `` is output the HTML as follow:  e.g.) input value at textarea is `""input value""`  ```html input value ```  When render the above HTML on Web Browser(Chrome, Firefox, Safari, IE ...), first new line character is removed from User Interface. On an Web Browser,`""input value""` is render same with `""input value""` (without \).  Probably, `` tag should be output the HTML as follow: (Append new line character after `` start tag)  ```html <textarea id=""text"" name=""text"">  input value ```    ---  **Affects:** 4.2.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/311d4c95a3ef00d0cbeaeba7411fad9bc266c384, https://github.com/spring-projects/spring-framework/commit/8994498b4477a4cef59dd928b70ed86d99f5f465, https://github.com/spring-projects/spring-framework/commit/9b2023111d3c6601a482587a19f09a8a9976c1ee, https://github.com/spring-projects/spring-framework/commit/44c32128dcdbd4fc848ae0873d4a6aa84383569c, https://github.com/spring-projects/spring-framework/commit/2267b14055f513f70fcd5f57c98bdaa50f7104ee, https://github.com/spring-projects/spring-framework/commit/b88c39955b23514d1c7816e364401fa9c77d8d61","closed","type: bug,","spring-projects-issues","2015-09-24T19:04:19Z","2016-04-06T08:38:15Z"
"","18023","Read large data using InputStreamResource at ResourceHttpMessageConverter [SPR-13443]","**[Kazuki Shimizu](https://jira.spring.io/secure/ViewProfile.jspa?name=kazuki43zoo)** opened **[SPR-13443](https://jira.spring.io/browse/SPR-13443?redirect=false)** and commented  Currently,`ResourceMessageConverter` is reading as `ByteArrayResource` from the HTTP body. If large data has been set at http body, there is possibility that occur the `OutOfMemoryError`.  I want to be able to read as `InputStreamResource` as follows:  ```java RestTemplate restTemplate = new RestTemplate(); Resource resource = restTemplate.getForObject(""http://localhost:8080/myApp/foo.zip"", InputStreamResource.class); ```  How do think ? I submit a PR at the later.  ---  **Affects:** 4.2.1  **Issue Links:** - #16633 RestTemplate with InputStreamResource does not work if Content-Length is not set - #18147 resttemplate multipart post with InputStreamResource not working - #21533 Consistent throwing of HttpMessageNotReadableException in HttpMessageConverter implementations  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/871, and commits https://github.com/spring-projects/spring-framework/commit/1feb757c54c9f7dedcbf85e0d93fc088ad7cb916","closed","type: enhancement,","spring-projects-issues","2015-09-07T17:19:30Z","2019-01-11T17:24:20Z"
"","18711","WebSocketSessionDecorator.sendMessage does not delegate [SPR-14139]","**[Karsten Sperling](https://jira.spring.io/secure/ViewProfile.jspa?name=ksperling)** opened **[SPR-14139](https://jira.spring.io/browse/SPR-14139?redirect=false)** and commented  WebSocketSessionDecorator.sendMessage() should call delegate.sendMessage() but it just does nothing.   ---  **Affects:** 4.2.5, 4.3 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2eab3df4d161c5577af4d3fc85a4e056054c07cf, https://github.com/spring-projects/spring-framework/commit/28f2f4a4311657b8119797fbbbc76fd3fec3cca9","closed","type: bug,","spring-projects-issues","2016-04-09T03:53:46Z","2016-05-06T08:13:31Z"
"","18710","AbstractWebSocketSession.sendMessage race condition [SPR-14138]","**[Karsten Sperling](https://jira.spring.io/secure/ViewProfile.jspa?name=ksperling)** opened **[SPR-14138](https://jira.spring.io/browse/SPR-14138?redirect=false)** and commented  AbstractWebSocketSession.sendMessage() checks if the connection is still open via isOpen() and throws an IllegalArgumentException if not. However this does not guarantee that the connection will still be open by the time the underlying WS implementation actually tries to write. This means the caller still has to catch / handle the relevant IOException anyway.  It is also impossible for the caller to avoid this exception as the remote side can close the connection at any time, so calling isOpen() before sendMessage() would suffer from exactly the same problem. The correct approach for this kind of situation is to simply attempt the IO operation and to let it fail naturally with an IOException in the underlying implementation if the connection has in fact been closed.  So I suggest to completely remove the `Assert.isTrue(isOpen(), ...);` check.   ---  **Affects:** 4.2.5, 4.3 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e67a274b32818b00299ae378b3f2eb57766d5757, https://github.com/spring-projects/spring-framework/commit/aafd46aeb34cbaaaaaf3630a31793204b04ed213","closed","type: bug,","spring-projects-issues","2016-04-09T03:47:42Z","2016-05-06T08:13:31Z"
"","18519","EnableWebSocket breaks without spring-mvc [SPR-13947]","**[Karsten Sperling](https://jira.spring.io/secure/ViewProfile.jspa?name=ksperling)** opened **[SPR-13947](https://jira.spring.io/browse/SPR-13947?redirect=false)** and commented  This is due to `org.springframework.web.servlet.HandlerMapping` being referenced from `org.springframework.web.socket.config.annotation.DelegatingWebSocketConfiguration`.  I'm trying to use spring-websocket in the context of an embedded container in Spring boot. It seems like I shouldn't need to bring in all the Spring MVC machinery just to wire up a WebSocketHandler to to the embedded container.  ``` Caused by: java.lang.IllegalStateException: Failed to introspect annotated methods on class org.springframework.web.socket.config.annotation.DelegatingWebSocketConfiguration 	at org.springframework.core.type.StandardAnnotationMetadata.getAnnotatedMethods(StandardAnnotationMetadata.java:163) ~[spring-core-4.2.4.RELEASE.jar:4.2.4.RELEASE] 	at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:291) ~[spring-context-4.2.4.RELEASE.jar:4.2.4.RELEASE] 	at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:231) ~[spring-context-4.2.4.RELEASE.jar:4.2.4.RELEASE] 	at org.springframework.context.annotation.ConfigurationClassParser.processImports(ConfigurationClassParser.java:509) ~[spring-context-4.2.4.RELEASE.jar:4.2.4.RELEASE] 	... 20 common frames omitted Caused by: java.lang.NoClassDefFoundError: org/springframework/web/servlet/HandlerMapping ```    ---  **Affects:** 4.2.4","closed","type: enhancement,","spring-projects-issues","2016-02-15T21:15:09Z","2018-02-13T14:16:05Z"
"","18292","Improve support for custom HTTP verbs in Spring MVC Test [SPR-13719]","**[Kamill Sokol](https://jira.spring.io/secure/ViewProfile.jspa?name=ksokol)** opened **[SPR-13719](https://jira.spring.io/browse/SPR-13719?redirect=false)** and commented  In Spring MVC we can build web applications using custom http verbs. Unfortunately, Spring MVC Test only supports GET, POST, HEAD, OPTIONS, PUT, PATCH, DELETE, TRACE and file upload.  If we want to test custom http verbs we have to duplicate most of the code due to the strict design.  In my opinion, custom http verbs won't be needed very often and hence it shouldn't be backed into Spring MVC Test. Rather it should be partly open for extension.  ## Proposal  Add constructor to MockHttpServletRequestBuilder that supports http method as a string parameter. With this addition in place we can build http requests with arbitrary verbs. One can think of extending MockMvcRequestBuilders, too. API might look like this:  ``` MockMvcRequestBuilders.request(String httpMethod, String urlTemplate, Object... urlVariables) ```  I leave it open for discussion whether MockMvcRequestBuilders has to be changed, too.  If requested, I can contribute code to the Spring Github repository.  -This Jira issues relates to SPR-10426- This Jira issues relates to #9476.  ---  **Affects:** 4.2.3  **Issue Links:** - #15059 Add support for testing overriden DispatcherServlet instances in mvc test framework","closed","type: enhancement,","spring-projects-issues","2015-11-24T06:55:09Z","2019-01-11T19:31:49Z"
"","18250","Does Spring Framework use InvokerTransformer from Apache Collections? [SPR-13675]","**[Kamill Sokol](https://jira.spring.io/secure/ViewProfile.jspa?name=ksokol)** opened **[SPR-13675](https://jira.spring.io/browse/SPR-13675?redirect=false)** and commented  Yesterday announced about de-serialisation vulnerability (CVE-2015-4852):  https://blogs.apache.org/foundation/entry/apache_commons_statement_to_widespread  If Spring Framework use InvokerTransformer it can be vulnerable for the de-serialisation vulnerability (CVE-2015-4852).  Does Spring Framework use InvokerTransformer from Apache Commons Collection?  ---  **Reference URL:** http://www.oracle.com/technetwork/topics/security/alert-cve-2015-4852-2763333.html  **Issue Links:** - #18232 SerializableTypeWrapper.MethodInvokeTypeProvider can be exploited for unsafe deserialization","closed","status: invalid,","spring-projects-issues","2015-11-12T09:52:34Z","2019-01-12T05:23:27Z"
"","18194","Support Spring-WS's MessageDispatcherServlet in AbstractDispatcherServletInitializer [SPR-13616]","**[Kamill Sokol](https://jira.spring.io/secure/ViewProfile.jspa?name=ksokol)** opened **[SPR-13616](https://jira.spring.io/browse/SPR-13616?redirect=false)** and commented  Problem: Right now we have to override AbstractDispatcherServletInitializer.registerDispatcherServlet(...) in order to register Spring-WS's MessageDispatcherServlet (tested with Version 2.2.0.RELEASE). AbstractDispatcherServletInitializer.registerDispatcherServlet(...) calls createDispatcherServlet which returns a DispatcherServlet instance whereas MessageDispatcherServlet directly derives from FrameworkServlet. Both DispatcherServlet and MessageDispatcherServlet have the same base class in common that said FrameworkServlet.  Solution: AbstractDispatcherServletInitializer.registerDispatcherServlet(...) should return FrameworkServlet in order to support both Spring MVC's DispatcherServlet and Spring-WS's MessageDispatcherServlet.  A pull request with a fix will be provided via Github.   ---  **Affects:** 4.2.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c1c07bbeb231bd245308f874194b7cf4038776f8","closed","type: enhancement,","spring-projects-issues","2015-10-27T22:02:28Z","2015-11-15T17:03:15Z"
"","18049","Spring Boot - Remote Shell does not honor custom banner.txt [SPR-13470]","**[Kai Burjack](https://jira.spring.io/secure/ViewProfile.jspa?name=kburjack)** opened **[SPR-13470](https://jira.spring.io/browse/SPR-13470?redirect=false)** and commented  Hello,  I did not find any project/component in JIRA that handles bugs for Spring Boot and its associated subprojects, so I post it here:  The CRaSH integration of Spring Boot in its ""Remote Shell"" project does not honor custom banner.txt. Whenever I have a custom banner.txt at classpath:banner.txt or more generally at the location pointed to by the system property ""banner.location"", I get that banner text when Spring boot application spools up. But when I connect via SSH/telnet to CRaSH, it prints the default banner defined as a field in the class o.s.b.SpringBootBanner.  How can I configure the Remote Shell to use the custom banner, too?  Thanks!  Regards, Kai   --- No further details from [SPR-13470](https://jira.spring.io/browse/SPR-13470?redirect=false)","closed","status: invalid,","spring-projects-issues","2015-09-18T18:36:23Z","2019-01-12T05:23:45Z"
"","18764","Regression: Insert statement fails with inconsistent datatypes on Oracle 12c driver [SPR-14191]","**[Jurriaan Mous](https://jira.spring.io/secure/ViewProfile.jspa?name=jurmous)** opened **[SPR-14191](https://jira.spring.io/browse/SPR-14191?redirect=false)** and commented  We get an inconsistent datatypes exception when we upgraded from Spring 4.2.4 to 4.2.5 on an alike statement:  ```sql insert into table_name (id,  timestamp_field, clob_field, number_field, date_field, another_number_field)            values(:id, current_timestamp, :clob_value, :number_value, :date_value, :another_number) ```  It works ok if we move the timestamp to the end of the insert. (We chose in the end to downgrade)  ``` (...) Caused by: java.lang.reflect.UndeclaredThrowableException: null        at com.sun.proxy.$Proxy203.executeUpdate(Unknown Source)        at org.springframework.jdbc.core.JdbcTemplate$2.doInPreparedStatement(JdbcTemplate.java:873)        at org.springframework.jdbc.core.JdbcTemplate$2.doInPreparedStatement(JdbcTemplate.java:866)        at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:629)        at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:866)        at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:890)        at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.update(NamedParameterJdbcTemplate.java:287)       (.....) Caused by: java.sql.SQLSyntaxErrorException: ORA-00932: inconsistent datatypes: expected DATE got NUMBER        at oracle.jdbc.driver.T4CTTIoer.processError(T4CTTIoer.java:450)        at oracle.jdbc.driver.T4CTTIoer.processError(T4CTTIoer.java:399)        at oracle.jdbc.driver.T4C8Oall.processError(T4C8Oall.java:1059)        at oracle.jdbc.driver.T4CTTIfun.receive(T4CTTIfun.java:522)        at oracle.jdbc.driver.T4CTTIfun.doRPC(T4CTTIfun.java:257)        at oracle.jdbc.driver.T4C8Oall.doOALL(T4C8Oall.java:587)        at oracle.jdbc.driver.T4CPreparedStatement.doOall8(T4CPreparedStatement.java:225)        at oracle.jdbc.driver.T4CPreparedStatement.doOall8(T4CPreparedStatement.java:53)        at oracle.jdbc.driver.T4CPreparedStatement.executeForRows(T4CPreparedStatement.java:943)        at oracle.jdbc.driver.OracleStatement.doExecuteWithTimeout(OracleStatement.java:1150)        at oracle.jdbc.driver.OraclePreparedStatement.executeInternal(OraclePreparedStatement.java:4798)        at oracle.jdbc.driver.OraclePreparedStatement.executeUpdate(OraclePreparedStatement.java:4875)        at oracle.jdbc.driver.OraclePreparedStatementWrapper.executeUpdate(OraclePreparedStatementWrapper.java:1361)        at org.apache.tomcat.jdbc.pool.interceptor.AbstractQueryReport$StatementProxy.invoke(AbstractQueryReport.java:235) ```  We are using the Oracle Database 12c Release 1 (12.1.0.1) JDBC Driver.  ---  **Affects:** 4.2.5  **Attachments:** - [OracleJDBCBug.java](https://jira.spring.io/secure/attachment/23376/OracleJDBCBug.java) (_6.83 kB_)  **Issue Links:** - #18398 Oracle 12c JDBC driver throws inconsistent exception from getParameterType (affecting setNull calls) - #19196 Protect against getParameterType cursor leak with Oracle 12c JDBC driver  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/52447efb97ae584a0242172c4b98a9767dc38e53, https://github.com/spring-projects/spring-framework/commit/2adbfb6d02fded3772e4b987a6815a6231f92c9d  **Backported to:** [4.2.8](https://github.com/spring-projects/spring-framework/milestone/145?closed=1)  0 votes, 5 watchers","closed","type: regression,","spring-projects-issues","2016-04-19T14:49:35Z","2019-01-11T16:33:41Z"
"","18279","SimpAnnotationMethodMessageHandler fails when no applicationDestinationPrefixes configured or Rabbit endpoint present [SPR-13704]","**[Juliusz Piwoński](https://jira.spring.io/secure/ViewProfile.jspa?name=juliuszp)** opened **[SPR-13704](https://jira.spring.io/browse/SPR-13704?redirect=false)** and commented  There is unguarded access to first iterator element at: `SimpAnnotationMethodMessageHandler.handleMatch` which causes `NoSuchElementException` in case no `org.springframework.messaging.simp.config.MessageBrokerRegistry#setApplicationDestinationPrefixes` is set.  ``` Caused by: java.util.NoSuchElementException 	at java.util.LinkedHashMap$LinkedHashIterator.nextNode(LinkedHashMap.java:713) 	at java.util.LinkedHashMap$LinkedKeyIterator.next(LinkedHashMap.java:734) 	at java.util.Collections$UnmodifiableCollection$1.next(Collections.java:1042) 	at org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler.handleMatch(SimpAnnotationMethodMessageHandler.java:471) 	at org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandler.handleMatch(SimpAnnotationMethodMessageHandler.java:86) 	at org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler.handleMessageInternal(AbstractMethodMessageHandler.java:426) 	at org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler.handleMessage(AbstractMethodMessageHandler.java:364) 	at org.springframework.messaging.support.ExecutorSubscribableChannel$SendTask.run(ExecutorSubscribableChannel.java:135) 	... 3 more ```    ---  **Affects:** 4.1.8, 4.2.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/55494362efa7d7702aa5bfecc0766a448d019707, https://github.com/spring-projects/spring-framework/commit/4b27a6ddeef10646316854823129a8ed551cc4d7, https://github.com/spring-projects/spring-framework/commit/f1199623789618c7c7494d38288794204f4bce30, https://github.com/spring-projects/spring-framework/commit/e8417ea6e152a1864a86deee82776804e300873f  **Backported to:** [4.1.9](https://github.com/spring-projects/spring-framework/milestone/133?closed=1)","closed","type: bug,","spring-projects-issues","2015-11-19T15:03:27Z","2015-12-17T09:05:31Z"
"","18277","StompBrokerRelayMessageHandler cannot reconnect to host after host relocation to new IP and dns change [SPR-13702]","**[Juliusz Piwoński](https://jira.spring.io/secure/ViewProfile.jspa?name=juliuszp)** opened **[SPR-13702](https://jira.spring.io/browse/SPR-13702?redirect=false)** and commented  **Scenario 1:** StompBrokerRelay is initiated correctly and connected to host  e.g. foobar.com which was resolved to lets say 192.168.1.100. Then we start a new server (Rabbit) on another IP address and re-point the DNS name foobar.com to the new address. Unfortunatelly NettyTcpClient still tries to connect to the old address which is accompanied by the following log entry  ``` 2015-11-18 23:52:16.809  INFO 28858 --- [eactor-tcp-io-7] r.io.net.impl.netty.tcp.NettyTcpClient   : Failed to connect to foobar.com/192.168.1.100:61613. Attempting reconnect in 5000ms. ```  || **Scenario 2:** similar scenario when resolving host name fails (DNS broken) during StompBrokerRelayMessageHandler initialization. In consequence handler will never connect to host, even after DNS server is fixed and running.  I'm not sure whose responsibility is to resolve host name again (StompBrokerRelayMessageHandler, Reactor2TcpClient or Netty) but I would point to `Reactor2TcpClient` client as currently resolving dns names is done only once in: `reactor.io.net.Spec.TcpClientSpec` called by `Reactor2TcpClient` constructor.  I think similar issue was mentioned in https://github.com/reactor/reactor/issues/379 and one of the possible solution could be exposing ReconnectStrategy to configuration (as mentioned a the end of conversation: https://github.com/rstoyanchev/spring-websocket-portfolio/issues/47). Or simply make resolving host name always with each reconnect attempt (currently fixed 5s).  Is that correct or am I missing something?  environment:  ``` org.springframework:spring-messaging:4.2.1.RELEASE io.projectreactor:reactor-net:2.0.5.RELEASE io.netty:netty-all:4.0.32.Final ```    ---  **Affects:** 4.2.1  1 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2015-11-19T08:27:18Z","2018-02-13T14:50:20Z"
"","18789","Upgrade build to Gradle 2.13 [SPR-14215]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14215](https://jira.spring.io/browse/SPR-14215?redirect=false)** and commented  Gradle 2.13 was released today... easily in time for our 4.3 RC2.  ---  **Affects:** 4.3 RC1  **Issue Links:** - #18620 Upgrade build to Gradle 2.12 - #18934 Upgrade build to Gradle 2.14.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bb1a0311d8650122e51dfc3caf60c5c7cb0f1278","closed","type: task,","spring-projects-issues","2016-04-25T10:34:58Z","2019-01-11T17:08:23Z"
"","18776","PathMatchingResourcePatternResolver should not re-resolve root URLs [SPR-14202]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14202](https://jira.spring.io/browse/SPR-14202?redirect=false)** and commented  `PathMatchingResourcePatternResolver` calls `Resource.getURL()` on root resources several times. For `ClassPathResource`, this leads to re-resolution of `ClassLoader.getResource` which can be expensive. Initially resolving each root resource into a `UrlResource`, like we do for Equinox bundles already, should help here.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/65a8f5ed64f49a019e79be7ed74415db859ce54d","closed","type: enhancement,","spring-projects-issues","2016-04-21T18:55:26Z","2016-05-06T13:55:29Z"
"","18756","Compatibility with EhCache 3.0 GA [SPR-14185]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14185](https://jira.spring.io/browse/SPR-14185?redirect=false)** and commented  EhCache 3.0 is now generally available. Let's upgrade our build to it and hereby officially declare it as supported as a JCache provider.  ---  **Issue Links:** - #17445 Compatibility with EhCache 3.0 (as a JCache provider) - #17926 Test against EhCache 3.0 M2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e205a1b30a5caf70751446f31120402df353c8ec, https://github.com/spring-projects/spring-framework/commit/f8720e256d6b299b15cd4f7bbb92db1a2ca18960","closed","in: core,","spring-projects-issues","2016-04-18T12:35:48Z","2019-01-11T16:34:39Z"
"","18744","Rename MimeType's getCharSet() to getCharset() [SPR-14172]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14172](https://jira.spring.io/browse/SPR-14172?redirect=false)** and commented  Since the Java return type is actually `Charset`, it is rather odd for the method to be cased differently. Also, `CharSet` suggests a kind of `java.util.Set` which it really isn't. Let's streamline this for 4.3, keeping the old method in deprecated form for the time being.   --- No further details from [SPR-14172](https://jira.spring.io/browse/SPR-14172?redirect=false)","closed","type: enhancement,","spring-projects-issues","2016-04-14T14:26:35Z","2016-05-06T13:55:29Z"
"","18743","Upgrade to Protobuf Java Format 1.4 [SPR-14171]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14171](https://jira.spring.io/browse/SPR-14171?redirect=false)** and commented  Protobuf Java Format has been updated to 1.3 and 1.4 late last year. Let's upgrade to those for Spring Framework 4.3; there are some breaking changes, so it can only really happen in such a major revision. We're formally requiring Protobuf 2.6 and Protobuf Java Format 1.4 now.  ---  **Issue Links:** - #18166 ProtobufHttpMessageConverter support for protobuf 3.0.0-beta4","closed","type: task,","spring-projects-issues","2016-04-14T13:31:39Z","2019-01-11T16:35:29Z"
"","18718","Upgrade to HtmlUnit-aligned Selenium Driver 2.20 [SPR-14146]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14146](https://jira.spring.io/browse/SPR-14146?redirect=false)** and commented  Along with Selenium 2.53...   ---  **Affects:** 4.3 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d695f65e7c579623a8ce62fc8090a8da7713dc5c","closed","type: task,","spring-projects-issues","2016-04-11T17:34:56Z","2016-05-06T13:55:29Z"
"","18715","Compatibility with Netty 4.1 [SPR-14143]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14143](https://jira.spring.io/browse/SPR-14143?redirect=false)** and commented  Netty 4.1 is in CR7 at the moment, going GA any day now. Let's upgrade our build to it for Spring Framework 4.3 RC2, sending it through our CI tests that way.  ---  **Issue Links:** - #18900 Compatibility with Undertow 1.4 - #18912 Compatibility with Jackson 2.8  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/21e4ac1aa26ca8bb33bb3c4acf4d9f9dc207df13, https://github.com/spring-projects/spring-framework/commit/8fc84e2d6fd31257873c47b6be1c54ac630f123a","closed","type: task,","spring-projects-issues","2016-04-11T09:41:14Z","2019-01-11T16:38:24Z"
"","18702","Drop JDO support [SPR-14130]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14130](https://jira.spring.io/browse/SPR-14130?redirect=false)** and commented  After many years of keeping our `orm.jdo` package alive, the time seems to be right to finally drop it as of Spring 5. Not only did it never grow beyond a niche feature, it is functionally matched by JPA 2.1 now, even for DataNucleus (the JDO reference implementation) which can nicely be used as a JPA 2.1 provider these days.  ---  **Issue Links:** - #18400 Remove native support for Hibernate 3.6 and 4.x - #18701 Drop Portlet MVC support  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d341624e91cb4ab2c075e970d80efadfcda3c6fb","closed","type: task,","spring-projects-issues","2016-04-07T09:27:18Z","2019-01-11T16:39:23Z"
"","18701","Drop Portlet MVC support  [SPR-14129]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14129](https://jira.spring.io/browse/SPR-14129?redirect=false)** and commented  Spring's Portlet MVC support turned into a second-class feature in recent years, never having been updated to the modern-day `HandlerMethod` infrastructure that Servlet MVC is based on these days (since 3.1 already, with the old Servlet MVC variant deprecated since 3.2). Furthermore, the Portlet 3.0 specification intends to introduce annotation-driven dispatching itself, so there is no strategic place for Spring Portlet MVC either, even within its present niche. And last but not least, common Portlet environments seem to be stuck on Spring 3.x, not even upgrading to Spring 4.x yet.  We will therefore drop Portlet MVC support completely as of Spring 5, while at the same time introducing our Reactive MVC variant. We intend to keep supporting (but not recommending) the use of Spring with JSF in a Portlet environment, in particular through Spring Web Flow. For all other purposes, Spring Framework 4.3.x will remain supported until 2020, including its Portlet MVC support (and underlying Servlet 2.5 support).  ---  **Issue Links:** - #18700 Deprecate MultiActionController and Controller*NameHandlerMapping - #18702 Drop JDO support  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2b3445df8134e2b0c4e4a4c4136cbaf9d58b7fc4","closed","type: task,","spring-projects-issues","2016-04-07T09:11:01Z","2019-06-11T14:23:16Z"
"","18700","Deprecate MultiActionController and Controller*NameHandlerMapping [SPR-14128]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14128](https://jira.spring.io/browse/SPR-14128?redirect=false)** and commented  4.3 is our opportunity to deprecate outdated MVC infrastructure classes which we do not intend to support as of 5.0 anymore: in particular, the entire `web.servlet.mvc.multiaction` package and the controller-name based mapping implementations in `web.servlet.mvc.support`, as well as the outdated handler method infrastructure in `web.bind.annotation.support` (even if it keeps being used in Portlet MVC for the time being).  ---  **Issue Links:** - #18695 Re-introduce deprecated addConstructorArg method (again) - #18701 Drop Portlet MVC support  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ed14ae60e54b7402ba4b8a3b93311ba0a0786f36","closed","type: task,","spring-projects-issues","2016-04-07T07:31:17Z","2019-01-11T16:41:04Z"
"","18609","Upgrade to ASM 5.1 [SPR-14037]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14037](https://jira.spring.io/browse/SPR-14037?redirect=false)** and commented  ASM 5.1 introduces support for method references on an interface (invokestatic/invokespecial).  ---  **Issue Links:** - #18506 Upgrade to CGLIB 3.2.2 - #17549 Tracking ASM 5.0.4 development (final) - #18864 Upgrade to Objenesis 2.4 - #19083 Upgrade to ASM 6.0 - #19637 Upgrade to ASM 5.2 - #19712 Upgrade to Objenesis 2.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/71294df238cef17c242f1e9860062414d9ede993","closed","type: task,","spring-projects-issues","2016-03-10T18:44:54Z","2019-01-11T15:02:38Z"
"","18605","InjectionPoint/DependencyDescriptor as injectable argument for @Bean methods [SPR-14033]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14033](https://jira.spring.io/browse/SPR-14033?redirect=false)** and commented  As of 4.3, we have a rather simple `InjectionPoint` class as a base class for `DependencyDescriptor`, primarily used for exception reporting purposes. However, it would also be well suited as an argument for `@Bean` methods, along the lines of the CDI `InjectionPoint` argument on an `@Produces` method.  This has been raised in a comment on our recent 4.3 core container blog post: http://spring.io/blog/2016/03/04/core-container-refinements-in-spring-framework-4-3#comment-2551909782 A CDI example raised there: http://buraktas.com/cdi-dependency-injection-producer-method-example/  ---  **Issue Links:** - #19363 Documentation for InjectionPoint argument on `@Bean` method  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a95bf6e0fc5206c662e81811d3bb964c9003aad0","closed","type: enhancement,","spring-projects-issues","2016-03-09T16:02:04Z","2021-11-18T17:58:24Z"
"","18589","Custom key classes for HashMap should implement Comparable [SPR-14017]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14017](https://jira.spring.io/browse/SPR-14017?redirect=false)** and commented  According to http://www.javaspecialists.eu/archive/Issue235.html...  > Since Java 8 it is VERY IMPORTANT to always make your custom keys for `HashMap` implement `Comparable`. `HashMap` now puts your entries into a tree to avoid degradation to O\(n) when the entries map to the same bucket. It somehow needs to know the relative order of the keys. If they are strings, then comparing them is trivial. Otherwise, if the key class implements `Comparable` it uses the `compareTo()` function. If not, it will eventually use `System.identityHashCode()` to determine the sort order.    --- No further details from [SPR-14017](https://jira.spring.io/browse/SPR-14017?redirect=false)","closed","type: enhancement,","spring-projects-issues","2016-03-03T21:40:15Z","2016-04-06T08:38:11Z"
"","18557","Consistent resolution of factory method exceptions [SPR-13985]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13985](https://jira.spring.io/browse/SPR-13985?redirect=false)** and commented  #16975 slightly revised our handling of constructor invocation exceptions. We should apply the same algorithm for factory method exceptions as well.  ---  **Issue Links:** - #16975 Improve Constructor Resolver Diagnostics - #18559 Unique XML-specified constructor not accepted in case of unresolvable name","closed","type: enhancement,","spring-projects-issues","2016-02-26T11:29:29Z","2019-01-11T19:02:54Z"
"","18544","Allow a single element to override an array attribute in a meta-annotation [SPR-13972]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13972](https://jira.spring.io/browse/SPR-13972?redirect=false)** and commented  #### Overview  In 4.2, aliased annotation attribute types must match exactly. However, it is rather common in Java for single element values to be specified for an array attribute: Reflecting this in custom annotation design, it would be nice for a custom annotation to be able to declare a single element only, aliasing a meta-annotation attribute which was originally declared as an array, e.g. in a custom `@PropertySource` variant with a single `String` value.  #### Deliverables  1. [x] Allow for a single element overriding an array attribute in a meta-annotation _by convention_.    - See `findMergedAnnotationAttributesWithSingleElementOverridingAnArrayViaConvention()` in `AnnotatedElementUtilsTests`. 2. [x] Allow for a single element overriding an array attribute in a meta-annotation using `@AliasFor`.    - See `findMergedAnnotationAttributesWithSingleElementOverridingAnArrayViaAliasFor()` in `AnnotatedElementUtilsTests`. 3. [x] Ensure that the aforementioned overrides are supported in `AnnotationAttributes` (which is assumed to already be the case but should be verified).    - See `singleElementToSingleElementArrayConversionSupport()` in `AnnotationAttributesTests`. 4. [x] Ensure that the aforementioned overrides are supported in _synthesized annotations_.    - See various `getMergedAnnotation*WithSingleElementOverridingAnArrayVia*()` and `findMergedAnnotationWithSingleElementOverridingAnArrayVia*()` methods in `AnnotatedElementUtilsTests`.  ---  **Affects:** 4.2.4  **Issue Links:** - #18565 Introduce common composed annotations for `@RequestMapping` (_**""is depended on by""**_) - #13603 Allow the use of custom PropertySource annotations in `@Configuration` classes - #18565 Introduce common composed annotations for `@RequestMapping`","closed","type: enhancement,","spring-projects-issues","2016-02-22T21:15:09Z","2019-01-13T05:28:09Z"
"","17763","Compatibility with Hibernate Validator 5.3 [SPR-13965]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13965](https://jira.spring.io/browse/SPR-13965?redirect=false)** and commented  Hibernate Validator 5.3 is currently in alpha. Let's track its evolution for Spring Framework 4.3 and provide support for the latest beta/RC at the time of our 4.3 GA.  ---  **Issue Links:** - #17595 Compatibility with Hibernate Validator 5.2 GA / 5.2.1 - #19565 Compatibility with Hibernate Validator 5.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b88ed85994990f56e9b2b601396ef4f66f97ec12, https://github.com/spring-projects/spring-framework/commit/a29188a191fa30b864785713221f780a735addcf","closed","type: task,","spring-projects-issues","2016-02-21T01:58:59Z","2019-01-11T19:04:35Z"
"","18533","Consistent behavior for unwrap(null) on JPA and Bean Validation wrappers [SPR-13960]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13960](https://jira.spring.io/browse/SPR-13960?redirect=false)** and commented  Historically, Spring leniently handled the undefined case of `null` being passed to `unwrap` calls on JPA `EntityManager`, `EntityManagerFactory` and `Query` wrappers, but did not do so on Bean Validation `Validator` wrappers. We should aim for consistent behavior here, always returning the immediately underlying target if available (or the proxy otherwise). This is particularly useful for our own purposes, e.g. #18530 where we need to pass on the underlying `Query` handle without knowing its specific type.  This ticket tracks the consistency part in a 4.3 timeframe. Local modifications to `Query.unwrap` will happen in the 4.2.5 line for immediately addressing #18530.  ---  **Affects:** 4.2.4  **Issue Links:** - #18530 Spring ORM doesn't support addNamedQuery with EclipseLink  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7fcb277de962a054916e6a1bafc57b101b815d5b","closed","type: enhancement,","spring-projects-issues","2016-02-18T15:07:56Z","2019-01-11T19:04:12Z"
"","18501","Consistent API between spring-web and spring-messaging HandlerMethod infrastructure [SPR-13929]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13929](https://jira.spring.io/browse/SPR-13929?redirect=false)** and commented  In particular, there is a mistyped `setMessageMethodArgumentResolvers` method on spring-messaging's `InvocableHandlerMethod`, and spring-web's `HandlerMethodArgumentResolverComposite} misses a {{clear()` method. The latter class should also have an `addResolvers` var-arg method in both of its variants.   ---  **Affects:** 4.2.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/901c2d5f743d1b6ac7d4175fd1b1fe378d206964","closed","type: enhancement,","spring-projects-issues","2016-02-08T14:28:21Z","2016-04-06T08:38:08Z"
"","18467","Part list/array gets resolved to all parts in current request [SPR-13893]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13893](https://jira.spring.io/browse/SPR-13893?redirect=false)** and commented  Our support for Servlet 3.0 `Part` lists and arrays is unfortunately highly inconsistent with the `MultipartFile` handling that it was supposed to align with. Our `MultipartRequest` interface allows for access to multiple files which got uploaded under the same name; this is also what a declared `MultipartFile` list/array argument would receive. However, the Servlet 3.0 `HttpServletRequest.getParts` method does not retrieve parts by name but rather always returns all parts of the given request, so we accidentally called that method without any use of our specified part name... Let's make this consistent for 4.3.  ---  **Affects:** 4.2.4  **Issue Links:** - #15220 Spring's support for javax.servlet.http.Part vs. MultipartFile incomplete, inconsistent - #18423 RequestPartMethodArgumentResolver should defensively handle MethodParameter nesting level and java.util.Optional access - #15978 `@RequestPart`(...) MultipartFile[] does not work (List","closed","type: bug,","spring-projects-issues","2016-01-26T16:35:28Z","2019-01-13T05:30:50Z"
"","18423","RequestPartMethodArgumentResolver should defensively handle MethodParameter nesting level and java.util.Optional access [SPR-13850]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13850](https://jira.spring.io/browse/SPR-13850?redirect=false)** and commented  `RequestPartMethodArgumentResolver` contains a conditional code path with a `Optional.ofNullable` call. While this will work in most pre-Java-8 environments as well, it's fragile in debug environments, in particular on the IBM JVM. We should defensively delegate to an inner class with the actual `Optional` reference, like we do in other places.  Also, `RequestPartMethodArgumentResolver` modifies the nesting level of a potentially cached `MethodParameter` instance. This should be avoided in favor of temporary nested type access or a `MethodParameter` clone.  ---  **Affects:** 4.2.4  **Issue Links:** - #17408 Make `@ResponseBody` method return type available to message converters - #17245 Support for java.util.Optional as a `@RequestPart` - #17997 Request parameters cannot bind to Optional> - #18422 MultipartFile argument requires multipart request even when optional (and empty) - #18467 Part list/array gets resolved to all parts in current request  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3779fe9bf68e7c8868d1011f2280ecb972c2eb43, https://github.com/spring-projects/spring-framework/commit/a58eee6ad1bb64bbdc74a0e3132401e2eb95cd73, https://github.com/spring-projects/spring-framework/commit/b4f33adf48caa033dff85af1db92b56e60c9bcee","closed","type: bug,","spring-projects-issues","2016-01-07T16:42:06Z","2019-01-13T05:32:15Z"
"","18412","Upgrade to AspectJ 1.9 beta 3 (for build compatibility with JDK 9 build 95+)  [SPR-13839]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13839](https://jira.spring.io/browse/SPR-13839?redirect=false)** and commented  As of JDK 9 build 95, the new version scheme breaks AspectJ's JVM detection which affects many tests in the Spring codebase. Andy's AspectJ 1.9 beta 3 fixes this.  A few core framework tests need to be revised towards lenient handling of the Java version string as well. The framework itself has been prepared for that step already but not all tests yet. This ticket therefore covers everything needed to make the core framework build pass on JDK 9 build 95 and higher (latest at the time of writing: build 99).  ---  **Issue Links:** - #17887 Upgrade to AspectJ 1.9 beta 2 (for build compatibility with JDK 9 build 74+) - #17897 Deprecate JdkVersion (for optimistic compatibility with newer JDK generations) - #20525 Upgrade to AspectJ 1.9 beta 7","closed","type: task,","spring-projects-issues","2016-01-05T14:00:12Z","2019-01-11T18:30:52Z"
"","18401","@AliasFor attribute name should default to declaring attribute [SPR-13828]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13828](https://jira.spring.io/browse/SPR-13828?redirect=false)** and commented  `@AliasFor` currently insists on the attribute name to be specified, through either `attribute` or `value`. For references to same-named attributes on meta-annotations, the attribute name could easily default to the declaring attribute. A typical use case is creating custom `@Value` annotations with a mirrored `value` attribute (#18181).  ---  **Affects:** 4.2.4  **Issue Links:** - #18181 `@Value` cannot be used as aliased meta-annotation  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3242ad8fc4e179b3f92d5c1a1ba39387c84000a6","closed","type: enhancement,","spring-projects-issues","2015-12-29T16:20:34Z","2019-01-13T05:32:21Z"
"","18400","Remove native support for Hibernate 3.6 and 4.x [SPR-13827]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13827](https://jira.spring.io/browse/SPR-13827?redirect=false)** and commented  Along with #18060, let's remove our `orm.hibernate3` and `orm.hibernate4` packages and also upgrade our `HibernateJpaVendorAdapter` accordingly.  Even at this point (end of 2015), Hibernate 5.x is the only actively maintained branch. By early 2017, Hibernate 4.x will only be found in legacy JBoss EAP environments.  ---  **Issue Links:** - #17821 Deprecate Hibernate 3 support - #18060 Upgrade to JPA 2.1+ and Bean Validation 1.1+ - #18367 Require EhCache 2.10+ / 3.0 GA - #19820 Database.SQL_SERVER should set more recent Hibernate dialect with Spring 4.3.x - #18702 Drop JDO support - #19234 Drop NativeJdbcExtractor mechanism in favor of java.sql.Connection.unwrap()  1 votes, 2 watchers","closed","type: task,","spring-projects-issues","2015-12-29T15:52:51Z","2019-01-11T18:31:27Z"
"","18399","Raise JDBC driver feature baseline to JDBC 4.0+ [SPR-13826]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13826](https://jira.spring.io/browse/SPR-13826?redirect=false)** and commented  Let's drop outdated adaptation code in `StatementCreatorUtils` and related classes, assuming a JDBC 4.1 driver (JDK 7 level) which implies full support for all mandatory JDBC 4.0 features (including `ParameterMetaData.getParameterType`).  After all, at this point, we're even defensive against JDBC 4.0 features which were introduced back in 2006... Spring 5 will still leniently handle exceptions with fallback code paths but won't try to detect and cache non-compliant drivers anymore.  ---  **Issue Links:** - #20528 ""Parameter metadata not available for the given statement"" SQL Exception after upgrading to Spring 5.0 RC4 - #20687 Doc: ParameterMetaData.getParameterType performance on Oracle 12c - #19196 Protect against getParameterType cursor leak with Oracle 12c JDBC driver  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5ac7a32c8aa50626a13abee37f8f2f2b087f91cf","closed","type: task,","spring-projects-issues","2015-12-29T15:45:19Z","2019-01-11T18:31:33Z"
"","18377","Correct spring-websocket-4.2 versus spring-websocket-4.1 xsd declarations [SPR-13804]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13804](https://jira.spring.io/browse/SPR-13804?redirect=false)** and commented  Due to mis-declarations, `spring-websocket-4.2.xsd` cannot be referenced explicitly and `spring-websocket-4.1.xsd` accidentally refers to the 4.2 version of `spring-beans` and `spring-tool`.   ---  **Affects:** 4.2 GA  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7344dd259cf97229ecae373b35142dcd808b92d3, https://github.com/spring-projects/spring-framework/commit/2fd48c92d755ebaa5e711f3d45e6ed9c89e6c287, https://github.com/spring-projects/spring-framework/commit/f3ac64153ea080f6eb397f3a352c44349c2df082","closed","type: bug,","spring-projects-issues","2015-12-17T15:25:08Z","2016-02-25T09:36:35Z"
"","18370","Drop Guava caching - superseded by Caffeine [SPR-13797]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13797](https://jira.spring.io/browse/SPR-13797?redirect=false)** and commented  Caffeine intends to supersede the caching support in the Google Guava library with an actively maintained Java 8+ version in standalone form. We're going to introduce first-class Caffeine support in Spring 4.3 and should consider dropping our then-outdated Guava caching support in Spring 5.0.  ---  **Issue Links:** - #18265 Caffeine caching support (_**""depends on""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2bf9bc312ed1721b5978f88861c29cffc9ea407c  1 votes, 5 watchers","closed","type: task,","spring-projects-issues","2015-12-15T11:47:20Z","2019-01-11T19:27:03Z"
"","18369","Remove XMLBeans support [SPR-13796]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13796](https://jira.spring.io/browse/SPR-13796?redirect=false)** and commented  Apache XMLBeans (http://xmlbeans.apache.org/) has been retired in 2014. Let's not include support for it in Spring 5.0 to begin with.  ---  **Issue Links:** - #17979 Deprecate XMLBeans support  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d0aa607200fa813f824df9f06a00182662add80c","closed","type: task,","spring-projects-issues","2015-12-15T10:14:53Z","2019-01-11T19:27:16Z"
"","18368","Remove Velocity support [SPR-13795]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13795](https://jira.spring.io/browse/SPR-13795?redirect=false)** and commented  Velocity 1.7 dates back to 2010. Following up on the deprecation of our Velocity support in Spring 4.3, let's not include it to begin with in the 5.0 generation.  ---  **Issue Links:** - #18634 Native Support for pebble templates in Spring Web MVC - #17826 Deprecate Velocity support - #20584 OpenJpaVendorAdapter missing from spring-orm - #19029 Documentation still favoring velocity but it is deprecated in 4.3 - #17884 Drop JasperReports support  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ff6ead1fff5d7e019702d9b956b9336d25b26b90  0 votes, 5 watchers","closed","type: task,","spring-projects-issues","2015-12-15T10:09:57Z","2019-01-11T19:26:57Z"
"","18367","Require EhCache 2.10+ / 3.0 GA [SPR-13794]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13794](https://jira.spring.io/browse/SPR-13794?redirect=false)** and commented  As of Spring Framework 5.0, let's upgrade to the latest feasible baseline for EhCache 2.x, next to supporting the then-available EhCache 3.0 GA.  ---  **Issue Links:** - #15887 Require Jackson 2.1+, Quartz 2.1.4+, EhCache 2.5+ - #18059 Compatibility with Hibernate ORM 5.1 - #18400 Remove native support for Hibernate 3.6 and 4.x  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e8b5374d8776f040c9133ae341b17e780b1e2323, https://github.com/spring-projects/spring-framework/commit/22345f7c259f416834eeedf4a06c8a33f66b92de, https://github.com/spring-projects/spring-framework/commit/81057a2cee2990de1a69a191a3cb5e379822a82b","closed","type: task,","spring-projects-issues","2015-12-15T09:48:05Z","2019-01-11T19:27:00Z"
"","18366","Upgrade to JMS 2.0+ [SPR-13793]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13793](https://jira.spring.io/browse/SPR-13793?redirect=false)** and commented  Due to our delayed GA in March 2017, along with JDK 9's GA delay, we should re-consider whether to raise our JMS baseline to 2.0+.  The hard references to the JMS 1.1 API in TomEE 1.7, JBoss EAP 6.4, WebSphere 8.x Classic, WebLogic 12.1.3 make this a tough decision. At a minimum, JMS 2.0 / EE 7 based variants of those would have to be available: However, at the end of 2015, TomEE 7, JBoss EAP 7 and WebSphere 9 are just in alpha, and WebLogic 12.2.1 is out for a few weeks.  Let's see where we are by the end of 2016 and evaluate continued need for JMS 1.1 providers then. If feasible, we should aim to go JMS 2.0+ in Spring 5.0+ since there's always Spring 4.3 as a fallback, continuing with JMS 1.1+ support for its entire extended support life. And let's not forget that JMS 1.1 dates back to **2002**; it is about time to get rid of it.  Finally, since this is just about the JMS **API** anyway, JMS 1.1 providers can even still work with Spring 5, as long as the JMS 2.0 API is present on the classpath. There is no need to adapt our JMS invocation patterns, that is, no need to invoke new JMS 2.0 methods in our regular template/listener call paths. This ticket is primarily about allowing us to compile against JMS 2.0, avoiding the use of reflection for optional calls to new JMS 2.0 methods.  ---  **Issue Links:** - #17824 Compatibility with WebSphere 9 Traditional (_**""depends on""**_) - #18360 Compatibility with JBoss EAP 7 (_**""depends on""**_) - #17825 Compatibility with WebLogic 12.2.1 / Tyrus 1.11 (_**""depends on""**_) - #17274 Support for JMS 2.1 - #22115 Clarify whether spring-jms 5.x is still able to run with a JMS 1.1 provider  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/355c6f07156c0ac7a73156917101d8fa9d69d1f3","closed","type: task,","spring-projects-issues","2015-12-14T20:31:54Z","2019-01-11T19:26:46Z"
"","18360","Compatibility with JBoss EAP 7 [SPR-13787]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13787](https://jira.spring.io/browse/SPR-13787?redirect=false)** and commented  Following up on our WildFly 10 / Undertow 1.3 oriented work in 4.2.3, let's aim for 'official' compatibility with JBoss EAP 7 in the Spring Framework 4.3 timeframe.  A JBoss EAP 7.0.0 beta release is available already: http://www.jboss.org/products/eap/download/  ---  **Issue Links:** - #18056 Compatibility with WildFly 10 (_**""depends on""**_) - #18366 Upgrade to JMS 2.0+ (_**""is depended on by""**_) - #17824 Compatibility with WebSphere 9 Traditional - #18171 Make use of native doUpgrade operation in Undertow 1.3.5+ / 1.4 - #18650 Compatibility with Tomcat 8.5.2 and 9.0 M6","closed","type: task,","spring-projects-issues","2015-12-13T11:53:34Z","2019-01-11T19:27:58Z"
"","18356","Jdbc4SqlXmlHandler should return null as documented (instead of throwing NPE) [SPR-13782]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13782](https://jira.spring.io/browse/SPR-13782?redirect=false)** and commented  According to a report on the Spring Data JDBC Extensions, there is a discrepancy between our `SqlXmlHandler` javadoc and our implementations: https://github.com/spring-projects/spring-data-jdbc-ext/issues/24   ---  **Affects:** 3.2.15, 4.1.8, 4.2.3  **Reference URL:** https://github.com/spring-projects/spring-data-jdbc-ext/issues/24  **Issue Links:** - [DATAJDBC-84](https://jira.spring.io/browse/DATAJDBC-84) OracleXmlHandler.getXmlAsString throws NPE instead of returning null  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3403e8d8437cb60d7f20a33c3cb6d023893de410, https://github.com/spring-projects/spring-framework/commit/c0e5d00e56ee3484e80c89346a5852a9db8d6583, https://github.com/spring-projects/spring-framework/commit/78dad4cfc33e24d1bd9a69eb26f79579ace576ae  **Backported to:** [4.1.9](https://github.com/spring-projects/spring-framework/milestone/133?closed=1), [3.2.16](https://github.com/spring-projects/spring-framework/milestone/104?closed=1)","closed","type: bug,","spring-projects-issues","2015-12-09T14:41:34Z","2015-12-17T09:05:31Z"
"","18351","Lazy GenericMessage payload extraction for JMS endpoints [SPR-13777]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13777](https://jira.spring.io/browse/SPR-13777?redirect=false)** and commented  Following up on #18343, we should consider extracting our message abstraction payload lazily, since it might not be needed at all for a given endpoint. The place to do this would be `MessagingMessageConverter.fromMessage`, using a to-be-introduced lazy variant of `MessageBuilder.withPayload` with a callback that calls `extractPayload` on demand.  ---  **Affects:** 4.2.3  **Issue Links:** - #18343 MessagingMessageListenerAdapter provides a BytesMessage that has already been read  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b7a936412e5104191e826e22a59f03b6d95e0ea8, https://github.com/spring-projects/spring-framework/commit/31a3607de6fd95a372e9330632a869db064892bd","closed","type: enhancement,","spring-projects-issues","2015-12-08T16:01:38Z","2019-01-11T19:28:43Z"
"","18349","Configurable QoS properties for messages sent by @JmsListener [SPR-13775]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13775](https://jira.spring.io/browse/SPR-13775?redirect=false)** and commented  As a follow-up to #18348, we should not just allow for programmatic customization through factory methods but also consider first-class QoS properties which can be configured on `JmsListenerAnnotationBeanPostProcessor` / `@EnableJms` / `jms:annotation-driven`.  ---  **Affects:** 4.2.3  **Issue Links:** - #18348 Allow for setting TTL on a response sent by `@JmsListener` (_**""depends on""**_)  1 votes, 2 watchers","open","type: enhancement,","spring-projects-issues","2015-12-08T11:00:53Z","2019-01-13T05:32:37Z"
"","18334","Inefficient and inconsistent setAllowedOrigins collection types in AbstractSockJsService/OriginHandshakeInterceptor [SPR-13761]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13761](https://jira.spring.io/browse/SPR-13761?redirect=false)** and commented  `AbstractSockJsService` and `OriginHandshakeInterceptor` both had `setAllowedOrigins` / `getAllowedOrigins` accessors added in the middle of the 4.1.x line, but unfortunately in an inefficient and inconsistent way: Since all access goes via `contains` calls, the optimal data structure is a `Set`. `OriginHandshakeInterceptor` fortunately already allows for adapting this since it declares `Collection`; however, for no good reason, `AbstractSockJsService` declares `List` instead. Aligning this towards consistent `Collection` declaration and efficient use of internal `LinkedHashSets` is necessary, and let's rather do this right now - also in 4.1.9 - before those methods get used on a more widespread basis. For declarative configuration and Java source compilation, this change is compatible anyway; it is just not binary-compatible for precompiled jars.  ---  **Affects:** 4.1.8, 4.2.3  **Issue Links:** - #18333 allowed-origins are not resolved from properties variables  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3d1ae9c6047d0078528dd85c4601f85d1581e43c, https://github.com/spring-projects/spring-framework/commit/83c9ec43da09e85ed302c95678bb27331d1d4d5f  **Backported to:** [4.1.9](https://github.com/spring-projects/spring-framework/milestone/133?closed=1)","closed","type: bug,","spring-projects-issues","2015-12-04T14:45:18Z","2019-01-11T19:29:16Z"
"","18317","Avoid scoped destruction callbacks in case of no post-processor actually applying [SPR-13744]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13744](https://jira.spring.io/browse/SPR-13744?redirect=false)** and commented  As indicated by #18312 and encountered in other recent scoping scenarios, Spring creates destruction callbacks for every bean in a custom scope in many scenarios, due to `DestructionAwareBeanPostProcessor` implementations being registered in many common `ApplicationContext`s these days.  We should try to come up with a mechanism that allows us to skip such scoped a destruction callback if no post-processor actually applies to a given bean. This may require a `SmartDestructionAwareBeanPostProcessor` interface with a new callback which indicates whether `postProcessBeforeDestruction` would perform any concrete work for a given bean.  ---  **Affects:** 4.2.3  **Issue Links:** - #18312 Doc: Scope.registerDestructionCallback may get called for inner beans - #19349 Inner bean behind BeanFactoryPostProcessor should be able to receive application events - #18788 ApplicationListenerDetector should prevent serialization of its ApplicationContext reference  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2e6eb614b59bfa590dd02d6205837500ccc33f7c, https://github.com/spring-projects/spring-framework/commit/fca5365cf1b8068e750b0130dabb4c0d7c667767","closed","type: enhancement,","spring-projects-issues","2015-11-30T17:37:25Z","2019-01-11T19:30:48Z"
"","18305","Background initialization option for JPA EntityManagerFactory / Hibernate SessionFactory [SPR-13732]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13732](https://jira.spring.io/browse/SPR-13732?redirect=false)** and commented  Traditionally, the bottleneck in the startup performance of Spring applications is the initialization of expensive resources such as a JPA `EntityManagerFactory` or a Hibernate `SessionFactory`.  As an alternative to generalized parallel initialization of beans, we might be able to achieve some significant gain through specific background initialization options in `LocalContainerEntityManagerFactoryBean` / `LocalSessionFactoryBean` / `LocalSessionFactoryBuilder`, internally passing the actual build call on to a background thread after configuration validation and in particular dependency resolution happened. The exposed  `EntityManagerFactory` / `SessionFactory` proxy (which we have for other reasons already) could then simply delegate method invocations to a `Future` of the target resource until it is known to be resolved, which is likely not to come before the very end of the startup phase.  ---  **Issue Links:** - #13410 Parallel bean initialization during startup - [DATAJPA-1397](https://jira.spring.io/browse/DATAJPA-1397) Add support for deferred repository initialization - #18188 Improve performance of #getBeanNamesForType() while the BeanFactory configuration is not yet frozen - #18952 Background initialization for Hibernate SessionFactory breaks transaction management - #19487 Asynchronous initialization of beans during startup - #21724 Mention asynchronous JPA bootstrapping in the reference documentation - #18285 Hibernate5 metadata access  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/db1171d5c4839293aa390e301af73b100fc206e7, https://github.com/spring-projects/spring-framework/commit/09cea6e6bb23ff673d7eedf64a72f44d5b3e5b1e  1 votes, 9 watchers","closed","type: enhancement,","spring-projects-issues","2015-11-29T10:33:45Z","2019-01-11T19:31:24Z"
"","18302","Require JsonPath 1.1+ [SPR-13729]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13729](https://jira.spring.io/browse/SPR-13729?redirect=false)** and commented  Spring's `JsonPathExpectationsHelper` currently has reflective code to adapt between JsonPath 0.9.x and 1.x. Let's finally require 1.1+ as of Spring Framework 4.3, since JsonPath is at 2.1 in the meantime...  ---  **Issue Links:** - #17561 Upgrade JsonPath dependency to 2.0.0 - #16905 Upgrade optional JsonPath dependency from 0.9.0 to 1.1.0  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/db05f43a757e92817b89cb40dcfe559747804b69","closed","type: task,","spring-projects-issues","2015-11-27T13:09:12Z","2019-01-11T19:31:06Z"
"","18301","Revise AbstractJackson2HttpMessageConverter's generic type adaptation [SPR-13728]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13728](https://jira.spring.io/browse/SPR-13728?redirect=false)** and commented  Jackson 2.7 (currently in RC1) has breaking changes in its `TypeFactory` / `TypeBindings` API which break our `AbstractJackson2HttpMessageConverter`'s generic type adaptation. Let's sort this out for Spring Framework 4.3, while retaining compatibility with Jackson 2.6+.  ---  **Affects:** 4.2.3  **Reference URL:** https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.7#fix-generic-type-resolution-mechanism  **Issue Links:** - #18062 Full support for Jackson 2.7 (_**""is depended on by""**_) - #17654 Require Jackson 2.6+, FreeMarker 2.3.21+, XStream 1.4.5+ - #19039 Jackson 2.6.x -> 2.7 deserialize generic fails when calling Spring controller - #17408 Make `@ResponseBody` method return type available to message converters - #18426 Improve Jackson 2.7 compatibility - #19944 Revise generic type handling in GsonHttpMessageConverter  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a730e55d92e6c194c518e1882d9f0c20f0b048a3","closed","type: enhancement,","spring-projects-issues","2015-11-27T11:57:02Z","2019-01-13T05:32:52Z"
"","18298","Consistent bean type checking for endpoint handlers [SPR-13725]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13725](https://jira.spring.io/browse/SPR-13725?redirect=false)** and commented  Our bean name iteration algorithms with bean type checks across messaging endpoints (`AbstractMethodMessageHandler`) and web endpoints (`AbstractHandlerMethodMapping`) are slightly inconsistent with respect to scoped target exclusion (#16173) and now also with respect to lenient treatment of unresolvable bean types (#17619). Let's fix this for 4.2.4, along the lines of the consistent method selection changes in 4.2.3 (#18230).  ---  **Affects:** 4.2.3  **Issue Links:** - #17619 EventListenerMethodProcessor resolves classes of lazy beans causing NoClassDefFoundError - #18230 Consistent method selection for listeners and endpoint mappings - #16173 MVC handler method detection should ignore scopedTarget.x in favor of corresponding proxy bean  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a0747c214835a82821a6b70ddc99296565a02b64","closed","type: enhancement,","spring-projects-issues","2015-11-25T19:33:42Z","2019-01-11T19:30:58Z"
"","18289","Stable module names for Spring Framework jars on JDK 9 module path [SPR-13716]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13716](https://jira.spring.io/browse/SPR-13716?redirect=false)** and commented  As of Spring Framework 5.0, we intend to allow Spring Framework jars themselves to live on the JDK 9 module path. Since other libraries such as Commons Lang and JUnit 5 start declaring the `Automatic-Module-Name` manifest header explicitly (instead of relying on a filename-derived module name), let's consider doing the same for 5.0 GA already.  Even if our preference is towards `spring.context` style naming which would actually be the same as the outcome of JDK 9's filename-based algorithm, it's a feature in its own right to provide stable names which are independently from actual jar file names (potentially renamed for a custom build arrangement) in any given setup.  ---  **Issue Links:** - #17928 Compatibility with merged JDK 9 mainline (_**""depends on""**_) - #18079 Declare Spring modules with JDK 9 module metadata (_**""is depended on by""**_) - [AMQP-769](https://jira.spring.io/browse/AMQP-769) Stable module names for Spring AMQP jars on JDK 9 module path - [INT-4346](https://jira.spring.io/browse/INT-4346) Stable module names for Spring Integration jars on JDK 9 module path - #19148 Document Spring recommendations/restrictions for Java 9 module setups - #20226 Upgrade to Gradle 4.1 for clean JDK 9 build compatibility - #18941 Compatibility with JDK 9 GA  0 votes, 13 watchers","closed","type: enhancement,","spring-projects-issues","2015-11-23T09:36:49Z","2019-01-11T19:31:46Z"
"","18261","Support for HtmlUnit 2.19 [SPR-13686]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13686](https://jira.spring.io/browse/SPR-13686?redirect=false)** and commented  This upgrade includes AutoCloseable support for HtmlUnit WebConnections as introduced in 2.19, while remaining compatible with 2.18.  ---  **Affects:** 4.2.2  **Issue Links:** - #17749 Add MockMvc HtmlUnit Integration  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5b901852e6ee6048d7d2e243dafe4b3c8d533ad8","closed","type: enhancement,","spring-projects-issues","2015-11-14T14:23:13Z","2019-01-11T19:26:25Z"
"","18230","Consistent method selection for listeners and endpoint mappings [SPR-13654]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13654](https://jira.spring.io/browse/SPR-13654?redirect=false)** and commented  Historically, we have several meant-to-be analogous method selection algorithms across the core framework: e.g. for request mappings, message mappings, JMS listeners, event listeners. Since those do not share a common algorithm implementation, they have different treatment of corner cases, in particular in case of a proxy vs target class scenario.  Most importantly, for common handler methods, we perform our expensive findAnnotation lookup twice since we're not reusing the initial result that triggered the inclusion in the candidate method set. Aside from consistency in the codebase, this part is primarily about startup performance for applications with many registered components of different types.  Along with #18153 and #18226, this should get addressed for 4.2.3 as well.  ---  **Affects:** 4.2.2  **Issue Links:** - #18153 Incorrect `@JmsListener` parameter matching when the listener is a JDK proxy - #18226 `@EventListener` does not work if put it at method in class that implements interface - #18298 Consistent bean type checking for endpoint handlers  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bc7bcab5781aa8303274ccd2e18e5db4598ba082","closed","type: enhancement,","spring-projects-issues","2015-11-07T15:32:29Z","2019-01-13T05:34:33Z"
"","18197","UndertowRequestUpgradeStrategy not compatible with WildFly anymore [SPR-13619]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13619](https://jira.spring.io/browse/SPR-13619?redirect=false)** and commented  The changes triggered by #18106 kept `UndertowRequestUpgradeStrategy` compatible with Undertow 1.3 standalone and embedded, but broke general compatibility with WildFly due to an odd side effect of proxy class instantiation with WildFly's strict ClassLoader - on some JVMs at least. Let's fix this for 4.2.3 through reverting back to the regular inner class for the `HttpUpgradeListener` in our `upgradeInternal` implementation, keeping the rest of our reflective adaptation in place for general Undertow 1.2 vs 1.3 bridging.  ---  **Affects:** 4.2.2  **Issue Links:** - #18056 Compatibility with WildFly 10 (_**""is depended on by""**_) - #18106 ClassNotFoundException: org.xnio.StreamConnection in Wildfly 10.0.0.CR2 - #18171 Make use of native doUpgrade operation in Undertow 1.3.5+ / 1.4","closed","type: bug,","spring-projects-issues","2015-10-28T21:54:08Z","2019-01-11T19:17:40Z"
"","18189","Consistent warn logging without stacktrace in Portlet HandlerExceptionResolver [SPR-13611]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13611](https://jira.spring.io/browse/SPR-13611?redirect=false)** and commented  While the Servlet version of `AbstractHandlerExceptionResolver` logs a concise warn entry with a flattened exception message, the Portlet version of that class still logs the full stacktrace. We should finally align this, since the stacktrace really is too much here.  ---  **Affects:** 4.2.2  **Issue Links:** - #18174 Inappropriate warn logging in AbstractHandlerExceptionResolver (e.g. for 404 status) - #17691 Spring does not log deserialization / marshalling errors to the console  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ce20268597e0b1ac9b81e5b3ca412c72a37ecfdb","closed","type: enhancement,","spring-projects-issues","2015-10-26T19:00:05Z","2019-01-11T19:18:57Z"
"","18151","Introduce support for JUnit 5 in the TestContext framework [SPR-13575]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13575](https://jira.spring.io/browse/SPR-13575?redirect=false)** and commented  #### Work in Progress  The current work for supporting JUnit 5 in the _Spring TestContext Framework_ can be seen in the [spring-test-junit5](https://github.com/sbrannen/spring-test-junit5) repository.  #### Feedback is Welcome  Developers are encouraged to try out the `SpringExtension` and provide feedback!  #### Deliverables  1. [x] Introduce a `SpringExtension` to be configured via `@ExtendWith(SpringExtension.class)` (analogous to `@RunWith(SpringRunner.class)` for JUnit 4) 2. [x] Implement `ParameterResolver` 3. [x] Implement `BeforeAllCallback` 4. [x] Implement `AfterAllCallback` 5. [x] Implement `TestInstancePostProcessor` 6. [x] Implement `BeforeEachCallback` 7. [x] Implement `AfterEachCallback` 8. [x] Implement `BeforeTestExecutionCallback` and `AfterTestExecutionCallback`    - [x] depends on #9043 9. [x] Delete custom `MethodParameterFactory`    - [x] depends on #18627 10. [x] Migrate to `ExecutionContext.Store`     - [x] Depends on [JUnit issue #347](https://github.com/junit-team/junit5/issues/347)     - [x] Depends on [JUnit issue #349](https://github.com/junit-team/junit5/issues/349) 11. [x] Provide the test exception to `TestContextManager.afterTestMethod()`     - [x] depends on [JUnit issue #92](https://github.com/junit-team/junit5/issues/92), [JUnit issue #357](https://github.com/junit-team/junit5/issues/357), [JUnit issue #359](https://github.com/junit-team/junit5/issues/359)  ---  **Reference URL:** https://github.com/junit-team/junit5  **Issue Links:** - #9043 Introduce before/after test execution callbacks in the TestContext framework (_**""depends on""**_) - #18627 Introduce support for creating a MethodParameter from a Java 8 Parameter (_**""depends on""**_) - #18629 Allow `@Autowired` to be declared on parameters (_**""depends on""**_) - #18091 Migrate remaining JUnit 3 based tests to JUnit 4 - #18630 Allow `@Qualifier` to be used in composed annotations with attribute overrides - #18628 Introduce autowiring support for individual handler method parameters - #19491 Upgrade to JUnit 5.0 M3 - #19924 Upgrade to JUnit 5.0 M4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ecbec541067febac32538253930190f415aacf5a, https://github.com/spring-projects/spring-framework/commit/862fb2af5ffacd5e2c43f1f3d0b3a501ded23570, https://github.com/spring-projects/spring-framework/commit/9a9551bf18256df5660f1e2009610adfc2cb8953, https://github.com/spring-projects/spring-framework/commit/7e783dd91f14df13130a77ff0ee43a563046d969, https://github.com/spring-projects/spring-framework/commit/873fc53a2fb0612c58102c09ea9572815bf18187  2 votes, 9 watchers","closed","type: enhancement,","spring-projects-issues","2015-10-15T11:50:10Z","2019-01-13T05:35:03Z"
"","18150","Compatibility with JCache 1.1 [SPR-13574]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13574](https://jira.spring.io/browse/SPR-13574?redirect=false)** and commented  Initial discussions towards a JCache spec revision have started: https://groups.google.com/forum/#!topic/jsr107/r6W8W2m8h4I  ---  **Issue Links:** - #16263 Upgrade JCache dependency to 1.0 final - #17445 Compatibility with EhCache 3.0 (as a JCache provider) - #19490 Support for JSON Binding API (JSON-B) - #18957 Support for typed caches with EhCache 3.0  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/dd4f91523418c31024a6b8b356e1483827f384f1","closed","in: core,","spring-projects-issues","2015-10-15T10:03:22Z","2019-01-11T17:38:28Z"
"","18142","Compatibility with GlassFish 4.1.1 / Tyrus 1.12 [SPR-13566]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13566](https://jira.spring.io/browse/SPR-13566?redirect=false)** and commented  GlassFish 4.1.1 got released in September, updating plenty of components - including Tyrus. Let's make sure that our WebSocket support works fine, and that we're generally compatible with it.  ---  **Affects:** 4.1.7, 4.2.1  **Issue Links:** - #18073 Require Undertow 1.3.5+, Tyrus 1.11+, Jetty 9.3+, Tomcat 8.5+ (_**""is depended on by""**_) - #17825 Compatibility with WebLogic 12.2.1 / Tyrus 1.11  **Backported to:** [4.1.8](https://github.com/spring-projects/spring-framework/milestone/132?closed=1)","closed","type: enhancement,","spring-projects-issues","2015-10-13T09:57:08Z","2019-01-11T17:39:17Z"
"","18140","Compatibility with Jetty 9.3.5 [SPR-13564]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13564](https://jira.spring.io/browse/SPR-13564?redirect=false)** and commented  Trying an upgrade to the just released Jetty 9.3.4 GA, we have several WebSocket integration tests in `spring-websocket` failing on our end. Most of them are failing because they're using our Jetty WebSocket client support to test various server support implementations.  The actual failures are in `JettyWebSocketClientTests` - NPEs are thrown because the `Session.getUpgradeRequest` information is not available when the standard `OnWebSocketConnect` callback method is executed.  This has been reported in [Jetty's issue tracker with issue #479584](https://bugs.eclipse.org/bugs/show_bug.cgi?id=479584)   ---  **Affects:** 4.2.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2e5ddef07d39ba80f48c8564ef37945f0eb079bf","closed","type: task,","spring-projects-issues","2015-10-12T10:57:51Z","2015-10-15T13:04:43Z"
"","18139","Clarify whether HttpInputMessage.getBody() is allowed to return null [SPR-13563]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13563](https://jira.spring.io/browse/SPR-13563?redirect=false)** and commented  Initiated by https://github.com/spring-projects/spring-framework/pull/886, we should clarify whether `HttpInputMessage.getBody()` is allowed to return `null`, in particular for `ClientHttpResponse` implementations. `BufferingClientHttpResponseWrapper` should then defensively check for a `null` body before trying to buffer it into a byte array, or we should enforce non-`null` body values where they can currently be `null`: specifically, in `HttpComponents(Async)ClientHttpResponse` which seems to be the only implementation that currently returns `null` for an empty body to begin with.   ---  **Affects:** 3.2.14, 4.1.7, 4.2.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a5f81a0433608441bffaac59af208afbc7d8dad4, https://github.com/spring-projects/spring-framework/commit/ca60d796a83c0cc73a6d69a97dc4c3f6ac634177, https://github.com/spring-projects/spring-framework/commit/8a8225925ed105142b7475ca5a918405218efb24, https://github.com/spring-projects/spring-framework/commit/66177dfd8ccba44fb4e75fa1ad5565290b075cbf  **Backported to:** [4.1.8](https://github.com/spring-projects/spring-framework/milestone/132?closed=1), [3.2.15](https://github.com/spring-projects/spring-framework/milestone/103?closed=1)","closed","type: bug,","spring-projects-issues","2015-10-12T09:45:47Z","2015-10-15T09:06:28Z"
"","18133","Improve error reporting in StandardScriptEvaluator [SPR-13557]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13557](https://jira.spring.io/browse/SPR-13557?redirect=false)** and commented  Along the lines of #18066, there's an opportunity for providing analogous improvements in `StandardScriptEvaluator`, replacing the rather convoluted `ScriptException` stacktrace output with a more focused evaluation error message.  On a related note, `GroovyScriptEvaluator` doesn't consistently catch and wrap exceptions coming out of Groovy eval calls, which should get revised along with `StandardScriptEvaluator` for reasonably equivalent output.  ---  **Affects:** 4.2.1  **Issue Links:** - #18066 Improve error reporting for template rendering in ScriptTemplateView - #18069 Revise script engine retrieval for better error reporting","closed","type: enhancement,","spring-projects-issues","2015-10-09T13:29:50Z","2019-01-11T17:25:35Z"
"","18125","Consistently detect spring-beans.dtd reference [SPR-13549]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13549](https://jira.spring.io/browse/SPR-13549?redirect=false)** and commented  As per https://github.com/spring-projects/spring-framework/commit/8e4bfa9cc17d2192e33d20023ab3b4b732087f83#commitcomment-11747566, `BeansDtdResolver` uses a sub-optimal lookup for the DTD name, potentially not detecting it if the same name occurs in a previous path segment. Consistently checking the last path segment would be more reliable.  ---  **Affects:** 4.1.6, 4.1.7  **Issue Links:** - #17433 There is no spring-beans.dtd file inside of the spring-beans-4.1.5.RELEASE jar  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8b3b8d070e3e177d580bd9da337ad73ebb707170, https://github.com/spring-projects/spring-framework/commit/50c59425d98badb415f0f49cebc9cfc63a6a3f90  **Backported to:** [4.1.8](https://github.com/spring-projects/spring-framework/milestone/132?closed=1)","closed","type: bug,","spring-projects-issues","2015-10-08T08:53:52Z","2019-01-11T17:25:05Z"
"","18096","Upgrade to Portlet API 2.1 [SPR-13519]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13519](https://jira.spring.io/browse/SPR-13519?redirect=false)** and commented  A Portlet 2.1 revision is about to be released, with a new Portlet 2.1 API jar addressing CVE-2015-1926 through a change in the `GenericPortlet.serveResource` implementration.  ---  **Issue Links:** - #18090 Documentation for Portlet MVC does not refer to Portlet 2.0 spec (JSR-286)","closed","status: declined,","spring-projects-issues","2015-09-28T11:25:21Z","2019-01-11T17:27:43Z"
"","18079","Declare Spring modules with JDK 9 module metadata [SPR-13501]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13501](https://jira.spring.io/browse/SPR-13501?redirect=false)** and commented  JDK 9's Jigsaw initiative aims to allow for module metadata (`module-info.java`) that can be added to framework and library jars while still keeping them compatible with JDK 8. Let's do this for Spring Framework 5.0's modules as far as feasible. However, we might not be able to express our optional dependency arrangement that way, in which case we might have to resort to an ""automatic modules"" approach for the more modest purposes of #18289.  ---  **Issue Links:** - #18289 Stable module names for Spring Framework jars on JDK 9 module path (_**""depends on""**_) - #17778 Upgrade core framework build to JDK 11 (_**""depends on""**_) - #19148 Document Spring recommendations/restrictions for Java 9 module setups  1 votes, 12 watchers","open","type: enhancement,","spring-projects-issues","2015-09-24T18:49:53Z","2022-05-19T13:34:05Z"
"","18077","Streamline XML namespace support towards unversioned schemas [SPR-13499]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13499](https://jira.spring.io/browse/SPR-13499?redirect=false)** and commented  Spring's XML namespace schemas, or more specifically their xsd files, are traditionally organized in versions, e.g. `spring-context-4.2.xsd`. While this was effective enough for the evolution of those schemas over a long period, we haven't seen many changes to the schemas lately and are therefore bound to create new versioned copies of the exact same xsd files in most cases.  We'll keep doing this for 4.3 but should consider a different approach for 5.0: simply managing canonical `spring-context.xsd` etc files and always picking up the latest files even for version-specific declarations in XML bean definition documents. This is entirely backwards compatible for all 4.x schemas; there are just some outdated 3.x variants of attributes not exposed anymore which should be acceptable.  In general, as of 5.0, let's drop support for all outdated pre-4.0 attributes in our XML schemas. We'll keep accepting older schema declarations but will parse them against the latest xsd files, with outdated attributes automatically failing schema validation on startup then. 99% of all XML bean dean definition documents will keep working without changes, and the rest should be easy to migrate to 4.x / 5.0 xsd variants.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/91ac0bfefa04e17980680f3e13b426769642aa8e, https://github.com/spring-projects/spring-framework/commit/bc2c22d51ec6ae5371a6600b1cb5f5221ce190b2","closed","in: core,","spring-projects-issues","2015-09-24T18:40:49Z","2019-03-05T13:36:48Z"
"","18073","Require Undertow 1.3.5+, Tyrus 1.11+, Jetty 9.3+, Tomcat 8.5+ [SPR-13495]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13495](https://jira.spring.io/browse/SPR-13495?redirect=false)** and commented  Undertow, Tyrus, Jetty and even Tomcat all caused some breaking changes recently which we're currently working around through reflection and mock compilation. As of Spring Framework 5, we should bump up the minimum requirements to mid-2015 versions of those... as featured in WildFly 10, GlassFish 4.1.1, WebLogic 12.2.1 in the case of Undertow and Tyrus. This implies that Spring 5's WebSocket support won't work on WildFly 8/9, GlassFish 4.1.0 and WebLogic 12.1.3 anymore which should be acceptable in 2017.  ---  **Issue Links:** - #17731 Support for Jetty 9.3 (_**""depends on""**_) - #17802 TomcatInstrumentableClassLoader should support Tomcat 7.0.63+ as well (_**""depends on""**_) - #17825 Compatibility with WebLogic 12.2.1 / Tyrus 1.11 (_**""depends on""**_) - #18142 Compatibility with GlassFish 4.1.1 / Tyrus 1.12 (_**""depends on""**_) - #18171 Make use of native doUpgrade operation in Undertow 1.3.5+ / 1.4 (_**""depends on""**_) - #18694 Initial compatibility with Undertow 2.0 - #19604 Revisit dependency baseline: Jetty 9.4+, OkHttp 3+  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fb5a096ca259e9e623f09c70a40a618ab104fb12, https://github.com/spring-projects/spring-framework/commit/770f0c06618f57851526cc8a88333700fae2ff19","closed","type: task,","spring-projects-issues","2015-09-24T10:57:10Z","2019-01-11T17:20:34Z"
"","18069","Revise script engine retrieval for better error reporting [SPR-13491]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13491](https://jira.spring.io/browse/SPR-13491?redirect=false)** and commented  With `ScriptTemplateView` as well as `StandardScriptFactory` / `StandardScriptEvaluator`, it's common for the specified engine name to be unresolvable. Let's introspect the available engine factories and list all available script engines in our exception message. Also, let's make sure to consistently reuse `ScriptEngineManager` set up for our specific `ClassLoader`.  ---  **Affects:** 4.2 GA  **Issue Links:** - #18065 Consider Nashorn ScriptEngine instance scope in ScriptTemplateView - #18133 Improve error reporting in StandardScriptEvaluator  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c7fd4ccf4848c39d68524f68a668833f2fa4a07e","closed","type: enhancement,","spring-projects-issues","2015-09-23T11:31:53Z","2019-01-11T17:20:12Z"
"","18063","Upgrade build to Gradle 2.10 [SPR-13484]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13484](https://jira.spring.io/browse/SPR-13484?redirect=false)** and commented  Let's upgrade to the latest Gradle version available at the time of our Spring Framework 4.3 RC1...  ---  **Issue Links:** - #17603 Upgrade build to Gradle 2.5 for JDK 9 support - #18620 Upgrade build to Gradle 2.12","closed","type: task,","spring-projects-issues","2015-09-22T15:24:53Z","2019-01-11T17:21:15Z"
"","18062","Full support for Jackson 2.7 [SPR-13483]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13483](https://jira.spring.io/browse/SPR-13483?redirect=false)** and commented  Work on Jackson 2.7 started in August 2015 and completed in early January 2016. We need to revise our type variable exposure (#18301) for proper Jackson 2.7 support in Spring Framework 4.3 and should also evaluate other changes that are worth adapting to.  ---  **Issue Links:** - #18301 Revise AbstractJackson2HttpMessageConverter's generic type adaptation (_**""depends on""**_) - #17903 Jackson 2.6: message converter should use type only for collections - #19492 Support for Jackson 2.9 - #18912 Compatibility with Jackson 2.8 - #18919 SpringHandlerInstantiator should support all HandlerInstantiator-provided factory methods  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a730e55d92e6c194c518e1882d9f0c20f0b048a3  1 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2015-09-22T15:18:40Z","2019-01-11T17:21:03Z"
"","18061","Compatibility with Bean Validation 2.0 and JPA 2.2 [SPR-13482]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13482](https://jira.spring.io/browse/SPR-13482?redirect=false)** and commented  There are loose plans for JPA 2.2 and Bean Validation 2.0 revisions within the Java EE 8 umbrella in 2017. Let's make sure to be fully compatible with those API updates and support their new features where feasible (it looks like there won't be much to do anyway).  http://beanvalidation.org/2.0/spec/2.0.0.beta1/ https://jcp.org/aboutJava/communityprocess/maintenance/jsr338/ChangeLog-JPA-2.2-MR.txt  ---  **Issue Links:** - #20120 LocalValidatorFactoryBean does not support unwrap for native ValidatorFactory (_**""depends on""**_) - #18060 Upgrade to JPA 2.1+ and Bean Validation 1.1+ - #20394 SpringValidatorAdapter fails to retrieve value for Bean Validation 2.0's """" literal - #20850 Support for Hibernate ORM 5.3 - #20363 Compatibility with Hibernate Validator 6.0 GA - #20425 Compatibility with EclipseLink 2.7 - #21226 Upgrade framework build to JPA 2.2 and JTA 1.3  1 votes, 5 watchers","closed","type: task,","spring-projects-issues","2015-09-22T14:39:56Z","2019-01-11T17:21:07Z"
"","18060","Upgrade to JPA 2.1+ and Bean Validation 1.1+ [SPR-13481]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13481](https://jira.spring.io/browse/SPR-13481?redirect=false)** and commented  By the time of Spring Framework 5.0 GA, JPA 2.1 and Bean Validation 1.1 will be almost four years old already. Since we tend to avoid compatibility compromises for Spring 5 now, let's enforce JPA 2.1 and Bean Validation 1.1 as a baseline. This includes upgrading the system requirements to Hibernate ORM 5.0+, Hibernate Validator 5.0+, EclipseLink 2.5+, and hopefully also to a yet-to-appear OpenJPA revision (otherwise we'd have to drop OpenJPA support if it remains stuck with JPA 2.0).  ---  **Issue Links:** - #16316 Support for Hibernate ORM 5.0 - #17355 Support for Hibernate Validator 5.2 - #18997 Drop native OpenJPA support - #18061 Compatibility with Bean Validation 2.0 and JPA 2.2 - #18400 Remove native support for Hibernate 3.6 and 4.x","closed","type: task,","spring-projects-issues","2015-09-22T13:35:27Z","2019-01-11T17:20:53Z"
"","18059","Compatibility with Hibernate ORM 5.1 [SPR-13480]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13480](https://jira.spring.io/browse/SPR-13480?redirect=false)** and commented  Hibernate ORM 5.1 is likely to be released in time for Spring Framework 4.3, so let's make sure we're fully compatible with it (and support its new features as far as necessary).  ---  **Issue Links:** - #17594 Compatibility with Hibernate ORM 5.0 GA - #18459 Proper load-time weaving support for Hibernate 5 - #18899 Support for Hibernate ORM 5.2 - #18367 Require EhCache 2.10+ / 3.0 GA - #18747 Section 19.3.2 of reference mentions Hibernate 3 should be just Hibernate  2 votes, 5 watchers","closed","type: task,","spring-projects-issues","2015-09-22T13:26:07Z","2019-01-11T17:20:57Z"
"","18056","Compatibility with WildFly 10 [SPR-13477]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13477](https://jira.spring.io/browse/SPR-13477?redirect=false)** and commented  WildFly 10 is scheduled for general availability in late October now. Let's do comprehensive integration testing for Spring Framework 4.2.3, due in early November.  Note that this issue is separate from #17950 which has been reduced to cover `UndertowXhrTransport`'s version requirement only, not WildFly 10 overall.  ---  **Affects:** 4.2 GA  **Issue Links:** - #18106 ClassNotFoundException: org.xnio.StreamConnection in Wildfly 10.0.0.CR2 (_**""depends on""**_) - #18197 UndertowRequestUpgradeStrategy not compatible with WildFly anymore (_**""depends on""**_) - #18360 Compatibility with JBoss EAP 7 (_**""is depended on by""**_) - #17950 Make UndertowXhrTransport compatible with Undertow 1.3 - #18650 Compatibility with Tomcat 8.5.2 and 9.0 M6 - #19142 Compatibility with WildFly 10.1  0 votes, 5 watchers","closed","type: task,","spring-projects-issues","2015-09-21T17:47:58Z","2019-01-11T17:22:16Z"
"","18193","MockMvc: afterCompletion is never called on CallableProcessingInterceptor and DeferredResultProcessingInterceptor  [SPR-13615]","**[João Cabrita](https://jira.spring.io/secure/ViewProfile.jspa?name=kewne)** opened **[SPR-13615](https://jira.spring.io/browse/SPR-13615?redirect=false)** and commented  If I run the application, it's called correctly but, in MockMvc tests, it's never called.   ---  **Affects:** 4.2.2  **Reference URL:** https://github.com/spring-projects/spring-framework-issues/tree/master/SPR-13615  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/78fb08bc995532355688e7496f98fb9b43847693, https://github.com/spring-projects/spring-framework-issues/commit/e4ecbe988f515cee9db8159951e1c06e83060049","closed","type: enhancement,","spring-projects-issues","2015-10-27T18:34:40Z","2015-11-15T17:03:14Z"
"","18808","Warn about non-static BeanDefinitionRegistryPostProcessor declarations on @Configuration classes [SPR-14234]","**[Joshua Hoke](https://jira.spring.io/secure/ViewProfile.jspa?name=jhoke)** opened **[SPR-14234](https://jira.spring.io/browse/SPR-14234?redirect=false)** and commented  When you implement the BeanDefinitionRegistryPostProcessor interface on your `@Configuration` class, it causes the class to be instantiated as a singleton bean before the Spring internal ConfigurationAnnotationProcessor has replaced it with the CGLIB-enhanced subclass in the bean definition.  This was found when using the AnnotationConfigWebApplicationContext contextClass in a Tomcat WAR. We initially saw it with Spring 3.2.8, but it still seems to be a problem in 4.2.5.  This breaks the following behavior described in the documentation:  > `@Bean` Methods in `@Configuration` Classes >  > Typically, `@Bean` methods are declared within `@Configuration` classes. In this case, bean methods may reference other `@Bean` methods in the same class by calling them directly. This ensures that references between beans are strongly typed and navigable. Such so-called 'inter-bean references' are guaranteed to respect scoping and AOP semantics, just like getBean() lookups would. These are the semantics known from the original 'Spring JavaConfig' project which require CGLIB subclassing of each such configuration class at runtime. As a consequence, `@Configuration` classes and their factory methods must not be marked as final or private in this mode. For example: >  > `@Configuration` > public class AppConfig { > `@Bean` > public FooService fooService() { > return new FooService(fooRepository()); > } > `@Bean` > public FooRepository fooRepository() { > return new JdbcFooRepository(dataSource()); > } > // ... > }  Instead, fooRepository() in this example will end up running multiple times because the bean instance is the actual `@Configuration` class instead of the enhanced subclass that caches singleton beans.  Desired behavior:  Either this should work as documented (which could be a breaking change if anyone was depending on this particular bug invoking methods in `@Configuration` more than once), or at least Spring should log an error or warning if it finds this kind of configuration.  ---  **Affects:** 4.2.5  **Issue Links:** - #12917 BeanFactoryPostProcessor breaks default post-processing of `@Configuration` classes  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0589c1b4b5c4ca1fc07a658cf0dc378504ff4a65, https://github.com/spring-projects/spring-framework/commit/7737c3c7e5e3ffe19e6cc151f1929982f5bba35d","closed","type: enhancement,","spring-projects-issues","2016-04-29T15:41:13Z","2019-01-13T05:25:56Z"
"","18156","Add conversion support for java.time.Duration [SPR-13579]","**[Joseph Walton](https://jira.spring.io/secure/ViewProfile.jspa?name=josephw)** opened **[SPR-13579](https://jira.spring.io/browse/SPR-13579?redirect=false)** and commented  Java 8's `java.time.Duration` is a good choice for defining durations of time, and arguably better than using a `long` with a property name to specify the units.  It would be good to support conversion from a `String` to make it easier to use beans that use this in their API.  ---  **Issue Links:** - #18294 Add JSR 310 Period and Duration Converters (_**""duplicates""**_) - #11372 Add conversion support for Joda Duration and Period - #18095 Conversion support for java.time.YearMonth (as well as MonthDay)","closed","type: enhancement,","spring-projects-issues","2015-10-16T15:00:11Z","2019-01-11T17:38:41Z"
"","18203","Support SpEL next to placeholders in annotation attributes (e.g. @Scheduled) [SPR-13625]","**[Joseph Dawson](https://jira.spring.io/secure/ViewProfile.jspa?name=jdawson)** opened **[SPR-13625](https://jira.spring.io/browse/SPR-13625?redirect=false)** and commented  Currently The `@Scheduled` (fixdRateString) annotation supports property evaluations, however it does not parse spring expressions correctly.  The problem has been recreated at https://github.com/rikitikitaco/schedulerSpel  ---  **Reference URL:** https://github.com/rikitikitaco/schedulerSpel  **Issue Links:** - #18686 `@Scheduled` annotation fixedDelayString attribute does not resolve SpEL expressions (_**""is duplicated by""**_) - #18742 Spring Scheduler-read cron expression from bean (_**""is duplicated by""**_) - #18709 Spel not supported on spring annotation `@Scheduled`.fixedDelayString (_**""is duplicated by""**_) - #18525 `@RequestHeader` name/value does not accept placeholders - #18712 Placeholder resolution for annotation attributes is not active by default  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ea4a766df7ba6051f962008e5e2c84764cf9beab","closed","type: enhancement,","spring-projects-issues","2015-10-30T10:45:14Z","2019-01-13T05:34:45Z"
"","18181","@Value cannot be used as aliased meta-annotation [SPR-13603]","**[Jose Antonio Iñigo](https://jira.spring.io/secure/ViewProfile.jspa?name=codependent)** opened **[SPR-13603](https://jira.spring.io/browse/SPR-13603?redirect=false)** and commented  It would be nice to be able to use `@Value` as meta annotation:  Having a properties file and the necessary context:properties-placeholder configuration...  ``` someproperty=somevalue ```  In a Spring bean we could have:  ``` @Value(""${someproperty}"") private String someProperty; ```  Where someProperty's value would be ""somevalue"".  I want to create a new annotation `@Refreshable` with `@Value` as meta-annotation so that it behaves the same as using `@Value` directly. Since `@Value` requires a value I hardcode ""default"" hoping that `@Refreshable`'s value() will override it:  ``` @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.FIELD) @Value(""default"") public @interface Refreshable {     String value(); } ```  Then when I use the new annotation in a bean, I was expecting it to work properly, injecting the declared value ""somevalue"", but it doesn't, I get ""default"".  ``` @Refreshable(""${someproperty}"") private String someProperty; ```  ---  **Reference URL:** http://stackoverflow.com/questions/32964391/annotation-with-spring-value-meta-annotation-not-injecting-the-value  **Issue Links:** - #18401 `@AliasFor` attribute name should default to declaring attribute - #18376 Support `@AliasFor` for `@JmsListener` attributes  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4f955932a78044f2faea32af05c6cd5725ce8638","closed","type: enhancement,","spring-projects-issues","2015-10-23T08:01:33Z","2019-01-13T05:34:51Z"
"","18473","ShallowEtagHeaderFilter should always write Content-Length header [SPR-13899]","**[Jordi Llach Fernandez](https://jira.spring.io/secure/ViewProfile.jspa?name=jllachf)** opened **[SPR-13899](https://jira.spring.io/browse/SPR-13899?redirect=false)** and commented  We are working with Apache in front of Tomcat and using mod_cache to cache partial responses from Tomcat. Info from the apache docs From https://httpd.apache.org/docs/2.4/mod/mod_cache_socache.html ""The mod_cache_socache module will only attempt to cache responses that have an explicit content length, or that are small enough to be written in one pass""  So I think that `ShallowEtagHeaderFilter` should/could write Content-Length header with value 0 in case `responseWrapper.getContentAsByteArray` length is 0  UPDATE : BTW seems that 0 is not ""small enough to be written in one pass"" :) (Apache mod_cache bug) but since ""Any Content-Length greater than or equal to zero is a valid value"" (https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html)  I think that this issue is ""reasonable""   --- No further details from [SPR-13899](https://jira.spring.io/browse/SPR-13899?redirect=false)","closed","type: enhancement,","spring-projects-issues","2016-01-28T12:04:13Z","2016-02-10T13:14:58Z"
"","18213","Circular reference error with FactoryBeans [SPR-13636]","**[Jonathan Mak](https://jira.spring.io/secure/ViewProfile.jspa?name=jonathan.mak)** opened **[SPR-13636](https://jira.spring.io/browse/SPR-13636?redirect=false)** and commented  When we have `@Autowired` constructors in a FactoryBean, we can get spurious BeanCurrentlyInCreationExceptions. As an example, suppose we have a class C that has an `@Autowired` dependency on a bean of class B:  ```java @Component public class B { } ```  ```java @Component public class C {     private B b;      @Autowired     public C(B b) {         this.b = b;     } } ```  We also have a FactoryBean that creates a bean of class A:  ```java public class A { } ```  ```java @Component public class TheAFactory implements FactoryBean {     private C c;      @Autowired     public TheAFactory(C c) {         this.c = c;     }      @Override     public A getObject() throws Exception {         return new A();     }      @Override     public Class getObjectType() {         return A.class;     }      @Override     public boolean isSingleton() {         return true;     } } ```  Instantiation of the application context will fail with the following stack trace:  ``` Exception in thread ""main"" org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'c' defined in file [...\C.class]: Unsatisfied dependency expressed through constructor argument with index 0 of type [example.B]: : Error creating bean with name 'theAFactory' defined in file [...\TheAFactory.class]: Unsatisfied dependency expressed through constructor argument with index 0 of type [example.C]: : Error creating bean with name 'c': Requested bean is currently in creation: Is there an unresolvable circular reference?; nested exception is org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name 'c': Requested bean is currently in creation: Is there an unresolvable circular reference?; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'theAFactory' defined in file [...\TheAFactory.class]: Unsatisfied dependency expressed through constructor argument with index 0 of type [example.C]: : Error creating bean with name 'c': Requested bean is currently in creation: Is there an unresolvable circular reference?; nested exception is org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name 'c': Requested bean is currently in creation: Is there an unresolvable circular reference? ```  It appears that the problem is that when constructing the bean of class C, Spring by mistake thinks it needs the bean of class TheAFactory, even though C's constructor actually needs a bean of class B, not A.  We are using Java 1.8 and Spring 4.2.0.   ---  **Affects:** 4.2 GA","closed","status: bulk-closed,","spring-projects-issues","2015-11-03T08:44:52Z","2019-01-12T00:15:06Z"
"","18792","Enable Executor qualification with @Scheduled [SPR-14218]","**[Jonas Kongslund](https://jira.spring.io/secure/ViewProfile.jspa?name=kongslund)** opened **[SPR-14218](https://jira.spring.io/browse/SPR-14218?redirect=false)** and commented  `@Async` supports specifying [which target executor to use](http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#scheduling-annotation-support-qualification). It would be useful if `@Scheduled` had the same support.  ---  **Issue Links:** - #11513 Enable Executor qualification with `@Async`  6 votes, 10 watchers","closed","in: core,","spring-projects-issues","2016-04-26T05:54:21Z","2019-08-14T08:49:00Z"
"","18452","LocalSessionFactoryBean (hibernate5) does not correctly pass custom ClassLoader to Hibernate [SPR-13879]","**[Jon Mann](https://jira.spring.io/secure/ViewProfile.jspa?name=jonmann)** opened **[SPR-13879](https://jira.spring.io/browse/SPR-13879?redirect=false)** and commented  We are using hibernate5.LocalSessionFactoryBean (with Hibernate v5.0.5) and having difficulties passing a custom ClassLoader to Hibernate.  In particular LocalSessionFactoryBuilder uses the following code in its constructor:      getProperties().put(AvailableSettings.CLASSLOADERS, Collections.singleton(resourceLoader.getClassLoader()));  But if you check the usages of AvailableSettings.CLASSLOADERS in Hibernate 5 you will find that it is only used by the legacy and unused method fromConfigSettings() in ClassLoaderServiceImpl. Therefore I believe this code effectively does nothing.  I believe that LocalSessionFactoryBuilder should actually pass the ClassLoader to the parent Hibernate Configuration constructor using something like this:  super(new BootstrapServiceRegistryBuilder().applyClassLoader(resourceLoader.getClassLoader()).build())  Hopefully this makes some sense.  Thanks to the Spring team for a great product.  ---  **Affects:** 4.2.4  **Issue Links:** - #18285 Hibernate5 metadata access - #18459 Proper load-time weaving support for Hibernate 5 - #18644 Add setMultiTenantConnectionProvider to org.springframework.orm.hibernate5.LocalSessionFactoryBean","closed","type: bug,","spring-projects-issues","2016-01-21T19:06:31Z","2019-01-11T18:26:30Z"
"","18773","LiveBeansView doesn't contain singletons registered programmatically [SPR-14199]","**[Johnny Lim](https://jira.spring.io/secure/ViewProfile.jspa?name=izeye)** opened **[SPR-14199](https://jira.spring.io/browse/SPR-14199?redirect=false)** and commented  LiveBeansView doesn't contain singletons registered programmatically.  With the following test, the second assertion is passed:  ```java public class LiveBeansViewTests {  	@Test 	public void test() { 		AnnotationConfigApplicationContext context 				= new AnnotationConfigApplicationContext(); 		context.register(TestConfiguration.class); 		context.getBeanFactory().registerSingleton(""bean2"", new MyBean()); 		context.refresh();  		LiveBeansView view = new LiveBeansView(); 		view.setApplicationContext(context);  		String json = view.getSnapshotAsJson(); 		assertThat(json).contains(""bean1""); 		 		// FIXME: Should work with `contains()` not `doesNotContain()`. 		assertThat(json).doesNotContain(""bean2""); 	} 	 	@Configuration 	public static class TestConfiguration { 		 		@Bean 		public MyBean bean1() { 			return new MyBean(); 		} 		 	}  	private static class MyBean { 	} 	 } ```  The second assertion should fail.  This was originally reported at https://github.com/spring-projects/spring-boot/issues/5761  ---  **Reference URL:** https://github.com/izeye/spring-boot-throwaway-branches/blob/rest-and-actuator/src/test/java/learningtest/org/springframework/context/support/LiveBeansViewTests.java  **Issue Links:** - #19051 LiveBeansView should expose FactoryBean's scope - #21438 LiveBeansView should support double quotes in application context id","closed","type: enhancement,","spring-projects-issues","2016-04-21T13:41:02Z","2021-02-09T17:24:18Z"
"","18493","Add support for asserting JSON in ContentRequestMatchers, just as there is for XML [SPR-13919]","**[John Ryan](https://jira.spring.io/secure/ViewProfile.jspa?name=jryan)** opened **[SPR-13919](https://jira.spring.io/browse/SPR-13919?redirect=false)** and commented  The `ContentRequestMatchers` class should support asserting JSON strings directly. Using `jsonPath` isn't always helpful.  This is identical in spirit and syntax to #14746.  ---  **Affects:** 4.2.4  **Reference URL:** https://pivotal.slack.com/archives/spring-framework/p1454450766000014  **Issue Links:** - #14746 Add support for asserting JSON in ContentResultMatchers, just as there is for XML  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/999, and commits https://github.com/spring-projects/spring-framework/commit/d64f2eb03862dcef657fe1a37755184b1ecfda25  1 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2016-02-05T15:22:56Z","2019-01-11T19:07:29Z"
"","18129","JCacheCache doesn't recognize null values in other JVMs [SPR-13553]","**[John J Kennedy](https://jira.spring.io/secure/ViewProfile.jspa?name=john.kennedy@ovitas.com)** opened **[SPR-13553](https://jira.spring.io/browse/SPR-13553?redirect=false)** and commented  The JCacheCache class uses an instance variable called ""NULL_HOLDER"" to check for a null value.  The problem is that it uses == as the test.  This won't work in multiple JVMs since one JVM could put a value in cache and another could retrieve it.  I believe it should use a class-based comparision like `storeValue.getClass() == NullHolder.class`  ---  **Affects:** 3.2.14, 4.1.7, 4.2.1  **Issue Links:** - #20252 AbstractValueAdaptingCache does not allow for flexible null value serialization  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/de932903ca3922d9cdcb87c3a81ee23aa266ea54, https://github.com/spring-projects/spring-framework/commit/6c138d3981ff2c3d2635908ceae9c8a1992544a9, https://github.com/spring-projects/spring-framework/commit/112781fb47e0f0cb398fc394240bf39ab4704af4  **Backported to:** [4.1.8](https://github.com/spring-projects/spring-framework/milestone/132?closed=1), [3.2.15](https://github.com/spring-projects/spring-framework/milestone/103?closed=1)","closed","in: core,","spring-projects-issues","2015-10-08T15:52:28Z","2019-01-11T17:25:20Z"
"","18160","Introduce a @DeferredImport annotation [SPR-13583]","**[Johannes Edmeier](https://jira.spring.io/secure/ViewProfile.jspa?name=joshi)** opened **[SPR-13583](https://jira.spring.io/browse/SPR-13583?redirect=false)** and commented  Let's say you want to import a static set of `@Configuration` classes but want them to be processed after all other `@Configuration` classes have been processed, since they have some `@Conditional` on 'em. It would be pretty handy to have a `@DeferredImport` annotation instead of having to implement a `DeferredImportSelector`.   ---  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2015-10-17T07:16:28Z","2018-04-26T07:06:19Z"
"","18497","AnnotationUtils#synthesizeAnnotation prevents startup on Google App Engine [SPR-13925]","**[Johann Burkard](https://jira.spring.io/secure/ViewProfile.jspa?name=johann%20burkard)** opened **[SPR-13925](https://jira.spring.io/browse/SPR-13925?redirect=false)** and commented  After upgrading eproxy https://github.com/johannburkard/eproxy from Spring Boot 1.2.8-RELEASE (Spring Core 4.1.9-RELEASE) to 1.3.2-RELEASE (Spring Core 4.2.4-RELEASE), I got this error when starting an instance on Google App Engine:  ``` java.security.AccessControlException: access denied (""java.lang.RuntimePermission"" ""accessClassInPackage.sun.reflect.annotation"") 	at java.security.AccessControlContext.checkPermission(AccessControlContext.java:382) 	at java.security.AccessController.checkPermission(AccessController.java:572) 	at java.lang.SecurityManager.checkPermission(SecurityManager.java:549) 	at com.google.apphosting.runtime.security.CustomSecurityManager.checkPermission(CustomSecurityManager.java:55) 	at java.lang.SecurityManager.checkPackageAccess(SecurityManager.java:1525) 	at sun.reflect.misc.ReflectUtil.checkPackageAccess(ReflectUtil.java:188) 	at sun.reflect.misc.ReflectUtil.checkPackageAccess(ReflectUtil.java:164) 	at java.lang.reflect.Proxy.getInvocationHandler(Proxy.java:822) 	at org.springframework.core.annotation.AnnotationUtils.synthesizeAnnotation(AnnotationUtils.java:1364) 	at org.springframework.core.annotation.AnnotationUtils.findAnnotation(AnnotationUtils.java:685) 	at org.springframework.core.annotation.AnnotationUtils.findAnnotation(AnnotationUtils.java:660) 	at org.springframework.core.annotation.OrderUtils.getOrder(OrderUtils.java:67) 	at org.springframework.core.annotation.OrderUtils.getOrder(OrderUtils.java:56) 	at org.springframework.core.annotation.AnnotationAwareOrderComparator.findOrder(AnnotationAwareOrderComparator.java:84) 	at org.springframework.core.OrderComparator.getOrder(OrderComparator.java:127) 	at org.springframework.core.OrderComparator.getOrder(OrderComparator.java:116) 	at org.springframework.core.OrderComparator.doCompare(OrderComparator.java:87) 	at org.springframework.core.OrderComparator.compare(OrderComparator.java:73) 	at java.util.Arrays.mergeSort(Arrays.java:758) 	at java.util.Arrays.mergeSort(Arrays.java:769) 	at java.util.Arrays.legacyMergeSort(Arrays.java:668) 	at java.util.Arrays.sort(Arrays.java:657) 	at java.util.Collections.sort(Collections.java:217) 	at org.springframework.core.annotation.AnnotationAwareOrderComparator.sort(AnnotationAwareOrderComparator.java:116) 	at org.springframework.boot.SpringApplication.getSpringFactoriesInstances(SpringApplication.java:396) 	at org.springframework.boot.SpringApplication.getSpringFactoriesInstances(SpringApplication.java:385) 	at org.springframework.boot.SpringApplication.initialize(SpringApplication.java:263) 	at org.springframework.boot.SpringApplication.(SpringApplication.java:237) 	at org.springframework.boot.builder.SpringApplicationBuilder.createSpringApplication(SpringApplicationBuilder.java:99) 	at org.springframework.boot.builder.SpringApplicationBuilder.(SpringApplicationBuilder.java:87) 	at org.springframework.boot.legacy.context.web.SpringBootContextLoaderListener.initWebApplicationContext(SpringBootContextLoaderListener.java:48) 	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107) 	at org.mortbay.jetty.handler.ContextHandler.startContext(ContextHandler.java:548) ```  Since this prevents app startup and also prevents me from upgrading to the latest and greatest Spring Boot, I've set the prio to critical. Unfortunately, I can't really help with a way to identify points where JDK APIs will (sometimes randomly) break on Google App Engine.  ---  **Affects:** 4.2.3, 4.2.4  **Issue Links:** - #18402 Regression: Spring 4.2.4 fails to load configuration class on Google App Engine (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2016-02-05T22:43:17Z","2019-01-12T16:45:49Z"
"","18708","Handler method is called twice when synchronizeOnSession is true in RequestMappingHandlerAdaptor [SPR-14136]","**[Joey Bartram](https://jira.spring.io/secure/ViewProfile.jspa?name=jbartram)** opened **[SPR-14136](https://jira.spring.io/browse/SPR-14136?redirect=false)** and commented  When synchronizeOnSession is turned on, the controller method is invoked twice. Here is the snippet from RequestMappingHandlerAdaptor (lines 720-731). Notice mav is set once and then set again before being returned.  // Execute invokeHandlerMethod in synchronized block if required. if (this.synchronizeOnSession) { HttpSession session = request.getSession(false); if (session != null) { Object mutex = WebUtils.getSessionMutex(session); synchronized (mutex) { mav = invokeHandlerMethod(request, response, handlerMethod); } } }  mav = invokeHandlerMethod(request, response, handlerMethod);  ---  **Affects:** 4.2.5  **Issue Links:** - #18572 Regression: RequestMappingHandlerAdapter with synchronizeOnSession=true calls invokeHandlerMethod twice (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2016-04-08T16:05:23Z","2019-01-12T16:45:41Z"
"","18794","@Configuration interface with Java 8 default methods (as a standalone artifact) [SPR-14220]","**[joerg.hohwiller@googlemail.com](https://jira.spring.io/secure/ViewProfile.jspa?name=hohwille)** opened **[SPR-14220](https://jira.spring.io/browse/SPR-14220?redirect=false)** and commented  #15547 brought an awesome improvement to support `@Bean` in Java8 default methods of interfaces. In the end I currently still have to implement an `@Configuration` class that implements the interfaces. Assuming that all methods of the interface(s) are default method implementing the `@Configuration` class is just unnecessary code if it just implements one interface. Why not have support directly for  ```java @SpringApplicationConfiguration(classes = MyConfigInterface.class) ```  This was already slightly discussed in #15547 but considered out of scope.  The major advantage of (miss)using interfaces for configs is that you can: * use inheritance instead of `@Import` what is more natural and even more safe as the compiler can detect conflicts. * as an end-user of a flexible designed library just define your config by extending according `@Configuration` interfaces from the library but still selectively override `@Bean` methods where ever you want to customize. When using `@Import` this is not easily possible. * as an author of a library you can provide your `@Configuration` objects in such a flexible way as interfaces but without the burden to have a corresponding class for each interface that does noting but implement the interface. If you have a very modular library you might have many `@Configuration` objects (see e.g. https://github.com/m-m-m/util/issues/178).  To summarize I like to propose that with Java8 the interface is the new top-level language element. It would be great to see this even more supported by spring. I already use default methods to implement QueryDSL queries in default methods with pure interfaces and no single repository implementation class. This already works today with current spring releases (Thanks guys for your great work). See also https://github.com/m-m-m/util/issues/163 for more advanced usage of Java8 interfaces.  ---  **Affects:** 4.2.5  **Issue Links:** - #18675 `@Configuration`(prefix = ""aabb"") (or: how to create reusable configurations) - #16286 Introduce a mechanism for abstract types at component scanning - #15547 `@Bean` on Java 8 default methods in interfaces - #19398 Add a functional way to register a bean  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2016-04-26T07:19:06Z","2019-01-13T05:26:03Z"
"","18433","ResourceAccessException message could leak sensitive information [SPR-13860]","**[Joerg Bellmann](https://jira.spring.io/secure/ViewProfile.jspa?name=jbellmann)** opened **[SPR-13860](https://jira.spring.io/browse/SPR-13860?redirect=false)** and commented  When a ResourceAccessException is thrown by an IOException( SocketTimeoutException in our case) the message shows the full URI requested. And that message most often will be logged somewhere (also external log provider). This 'feature' was introduced with #13963.  We use RestTemplate also for requesting 'OAuth-AccessToken-Info'. In case of an IOException also the parameters are logged. Simple example url could be:  ``` https://www.googleapis.com/oauth2/v1/tokeninfo?access_token={accessToken} ```  Now 'access_token'-parameter with value appears in the log-message. In general showing the  requested url is a good idea. So maybe just strip the parameters for the log-message.  ---  **Affects:** 4.2.4  **Issue Links:** - #13963 Add more details in ResourceAccessException message thrown by doExecute method of RestTemplate  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f3c2bb65570fe40919d518995ee8a3898f03b069","closed","type: enhancement,","spring-projects-issues","2016-01-12T08:55:26Z","2019-01-11T18:29:05Z"
"","18508","Two methods defining different media type are not uniquely mapped when not using @EnableWebMvc [SPR-13936]","**[Joe](https://jira.spring.io/secure/ViewProfile.jspa?name=joekhan10@gmail.com)** opened **[SPR-13936](https://jira.spring.io/browse/SPR-13936?redirect=false)** and commented  import org.springframework.http.MediaType; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod;  `@Controller` `@RequestMapping`(""/users"") public class UserControllerConsume {      @RequestMapping(  method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE)     public String   handleJson(@RequestBody String s) {         System.out.println(""json body : ""+s);         return """";     }          @RequestMapping(  method = RequestMethod.POST, consumes = MediaType.APPLICATION_XML_VALUE)     public  String handleXML(@RequestBody String s) {         System.out.println(""xml body ""+s);         return """";     }  }  ---  import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration;  `@Configuration` public class WebConfigConsume {      @Bean     public UserControllerConsume myMvcController() {         return new UserControllerConsume();     }  }  ---  import org.junit.Before; import org.junit.Test; import org.junit.runner.RunWith; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.MediaType; import org.springframework.test.context.ContextConfiguration; import org.springframework.test.context.junit4.SpringJUnit4ClassRunner; import org.springframework.test.context.web.WebAppConfiguration; import org.springframework.test.web.servlet.MockMvc; import org.springframework.test.web.servlet.ResultMatcher; import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder; import org.springframework.test.web.servlet.request.MockMvcRequestBuilders; import org.springframework.test.web.servlet.result.MockMvcResultMatchers; import org.springframework.test.web.servlet.setup.DefaultMockMvcBuilder; import org.springframework.test.web.servlet.setup.MockMvcBuilders; import org.springframework.web.context.WebApplicationContext;  `@RunWith`(SpringJUnit4ClassRunner.class) `@WebAppConfiguration` `@ContextConfiguration`(classes = WebConfigConsume.class) public class UserControllerTestConsume {      @Autowired     private WebApplicationContext wac;          private MockMvc mockMvc;          @Before     public void setup() {         DefaultMockMvcBuilder builder = MockMvcBuilders.webAppContextSetup(this.wac);         this.mockMvc = builder.build();     }               @Test     public void testMyMvcController() throws Exception {         ResultMatcher ok = MockMvcResultMatchers.status().isOk();              MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.post(""/users"")                   .contentType(MediaType.APPLICATION_JSON)                   .content(""{ \""userName\"": \""Joe\""}"");         this.mockMvc.perform(builder)                   .andExpect(ok);          }          @Test     public void testMyMvcController2() throws Exception {         ResultMatcher ok = MockMvcResultMatchers.status().isOk();              MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.post(""/users"")                   .contentType(MediaType.APPLICATION_XML)                   .content(""Joe"");         this.mockMvc.perform(builder)                     .andExpect(ok);          }  }  ---  ""C:\Program Files\Java\jdk1.8.0_65\bin\java"" -ea -Didea.launcher.port=7541 ""-Didea.launcher.bin.path=C:\Program Files (x86)\JetBrains\IntelliJ IDEA Community Edition 15.0.2\bin"" -Didea.junit.sm_runner -Dfile.encoding=UTF-8 -classpath ""C:\Program Files (x86)\JetBrains\IntelliJ IDEA Community Edition 15.0.2\lib\idea_rt.jar;C:\Program Files (x86)\JetBrains\IntelliJ IDEA Community Edition 15.0.2\plugins\junit\lib\junit-rt.jar;C:\Program Files\Java\jdk1.8.0_65\jre\lib\charsets.jar;C:\Program Files\Java\jdk1.8.0_65\jre\lib\deploy.jar;C:\Program Files\Java\jdk1.8.0_65\jre\lib\ext\access-bridge-64.jar;C:\Program Files\Java\jdk1.8.0_65\jre\lib\ext\cldrdata.jar;C:\Program Files\Java\jdk1.8.0_65\jre\lib\ext\dnsns.jar;C:\Program Files\Java\jdk1.8.0_65\jre\lib\ext\jaccess.jar;C:\Program Files\Java\jdk1.8.0_65\jre\lib\ext\jfxrt.jar;C:\Program Files\Java\jdk1.8.0_65\jre\lib\ext\localedata.jar;C:\Program Files\Java\jdk1.8.0_65\jre\lib\ext\nashorn.jar;C:\Program Files\Java\jdk1.8.0_65\jre\lib\ext\sunec.jar;C:\Program Files\Java\jdk1.8.0_65\jre\lib\ext\sunjce_provider.jar;C:\Program Files\Java\jdk1.8.0_65\jre\lib\ext\sunmscapi.jar;C:\Program Files\Java\jdk1.8.0_65\jre\lib\ext\sunpkcs11.jar;C:\Program Files\Java\jdk1.8.0_65\jre\lib\ext\zipfs.jar;C:\Program Files\Java\jdk1.8.0_65\jre\lib\javaws.jar;C:\Program Files\Java\jdk1.8.0_65\jre\lib\jce.jar;C:\Program Files\Java\jdk1.8.0_65\jre\lib\jfr.jar;C:\Program Files\Java\jdk1.8.0_65\jre\lib\jfxswt.jar;C:\Program Files\Java\jdk1.8.0_65\jre\lib\jsse.jar;C:\Program Files\Java\jdk1.8.0_65\jre\lib\management-agent.jar;C:\Program Files\Java\jdk1.8.0_65\jre\lib\plugin.jar;C:\Program Files\Java\jdk1.8.0_65\jre\lib\resources.jar;C:\Program Files\Java\jdk1.8.0_65\jre\lib\rt.jar;D:\LogicBig\example-projects\spring-mvc\spring-mvc-request-mapping\target\test-classes;D:\LogicBig\example-projects\spring-mvc\spring-mvc-request-mapping\target\classes;C:\Users\Joe\.m2\repository\org\springframework\spring-webmvc\3.2.5.RELEASE\spring-webmvc-3.2.5.RELEASE.jar;C:\Users\Joe\.m2\repository\org\springframework\spring-beans\3.2.5.RELEASE\spring-beans-3.2.5.RELEASE.jar;C:\Users\Joe\.m2\repository\org\springframework\spring-context\3.2.5.RELEASE\spring-context-3.2.5.RELEASE.jar;C:\Users\Joe\.m2\repository\org\springframework\spring-aop\3.2.5.RELEASE\spring-aop-3.2.5.RELEASE.jar;C:\Users\Joe\.m2\repository\org\springframework\spring-core\3.2.5.RELEASE\spring-core-3.2.5.RELEASE.jar;C:\Users\Joe\.m2\repository\commons-logging\commons-logging\1.1.1\commons-logging-1.1.1.jar;C:\Users\Joe\.m2\repository\org\springframework\spring-expression\3.2.5.RELEASE\spring-expression-3.2.5.RELEASE.jar;C:\Users\Joe\.m2\repository\org\springframework\spring-web\3.2.5.RELEASE\spring-web-3.2.5.RELEASE.jar;C:\Users\Joe\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar;C:\Users\Joe\.m2\repository\org\springframework\spring-test\3.2.5.RELEASE\spring-test-3.2.5.RELEASE.jar;C:\Users\Joe\.m2\repository\javax\servlet\javax.servlet-api\3.0.1\javax.servlet-api-3.0.1.jar;C:\Users\Joe\.m2\repository\junit\junit\4.12\junit-4.12.jar;C:\Users\Joe\.m2\repository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar"" com.intellij.rt.execution.application.AppMain com.intellij.rt.execution.junit.JUnitStarter -ideVersion5 com.logicbig.example.UserControllerTestConsume Feb 09, 2016 9:40:52 PM org.springframework.context.support.AbstractApplicationContext prepareRefresh INFO: Refreshing org.springframework.web.context.support.GenericWebApplicationContext@66d33a: startup date [Tue Feb 09 21:40:52 CST 2016]; root of context hierarchy Feb 09, 2016 9:40:53 PM org.springframework.beans.factory.support.DefaultListableBeanFactory preInstantiateSingletons INFO: Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@23e028a9: defining beans [org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,webConfigConsume,org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor,myMvcController]; root of factory hierarchy Feb 09, 2016 9:40:53 PM org.springframework.mock.web.MockServletContext log INFO: Initializing Spring FrameworkServlet '' Feb 09, 2016 9:40:53 PM org.springframework.web.servlet.FrameworkServlet initServletBean INFO: FrameworkServlet '': initialization started Feb 09, 2016 9:40:53 PM org.springframework.web.servlet.handler.AbstractUrlHandlerMapping registerHandler INFO: Mapped URL path [/users] onto handler 'myMvcController' Feb 09, 2016 9:40:53 PM org.springframework.web.servlet.handler.AbstractUrlHandlerMapping registerHandler INFO: Mapped URL path [/users.*] onto handler 'myMvcController' Feb 09, 2016 9:40:53 PM org.springframework.web.servlet.handler.AbstractUrlHandlerMapping registerHandler INFO: Mapped URL path [/users/] onto handler 'myMvcController' Feb 09, 2016 9:40:53 PM org.springframework.web.servlet.FrameworkServlet initServletBean INFO: FrameworkServlet '': initialization completed in 182 ms Feb 09, 2016 9:40:53 PM org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver handleNoSuchRequestHandlingMethod WARNING: No matching handler method found for servlet request: path '/users', method 'POST', parameters map[[empty]]  java.lang.AssertionError: Status Expected :200 Actual   :404 \      at org.springframework.test.util.AssertionErrors.fail(AssertionErrors.java:60)     at org.springframework.test.util.AssertionErrors.assertEquals(AssertionErrors.java:89)     at org.springframework.test.web.servlet.result.StatusResultMatchers$5.match(StatusResultMatchers.java:549)     at org.springframework.test.web.servlet.MockMvc$1.andExpect(MockMvc.java:148)     at com.logicbig.example.UserControllerTestConsume.testMyMvcController2(UserControllerTestConsume.java:57)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:497)     at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)     at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)     at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)     at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)     at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)     at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74)     at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:83)     at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:72)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:231)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:88)     at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)     at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)     at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)     at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)     at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)     at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)     at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:71)     at org.junit.runners.ParentRunner.run(ParentRunner.java:363)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:174)     at org.junit.runner.JUnitCore.run(JUnitCore.java:137)     at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:69)     at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:234)     at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:74)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:497)     at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144)  Feb 09, 2016 9:40:53 PM org.springframework.mock.web.MockServletContext log INFO: Initializing Spring FrameworkServlet '' Feb 09, 2016 9:40:53 PM org.springframework.web.servlet.FrameworkServlet initServletBean INFO: FrameworkServlet '': initialization started Feb 09, 2016 9:40:53 PM org.springframework.web.servlet.handler.AbstractUrlHandlerMapping registerHandler INFO: Mapped URL path [/users] onto handler 'myMvcController' Feb 09, 2016 9:40:53 PM org.springframework.web.servlet.handler.AbstractUrlHandlerMapping registerHandler INFO: Mapped URL path [/users.*] onto handler 'myMvcController' Feb 09, 2016 9:40:53 PM org.springframework.web.servlet.handler.AbstractUrlHandlerMapping registerHandler INFO: Mapped URL path [/users/] onto handler 'myMvcController' Feb 09, 2016 9:40:53 PM org.springframework.web.servlet.FrameworkServlet initServletBean INFO: FrameworkServlet '': initialization completed in 13 ms Feb 09, 2016 9:40:53 PM org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver handleNoSuchRequestHandlingMethod WARNING: No matching handler method found for servlet request: path '/users', method 'POST', parameters map[[empty]] Feb 09, 2016 9:40:53 PM org.springframework.context.support.AbstractApplicationContext doClose  INFO: Closing org.springframework.web.context.support.GenericWebApplicationContext@66d33a: startup date [Tue Feb 09 21:40:52 CST 2016]; root of context hierarchy  java.lang.AssertionError: Status Expected :200 Actual   :404 \      at org.springframework.test.util.AssertionErrors.fail(AssertionErrors.java:60)     at org.springframework.test.util.AssertionErrors.assertEquals(AssertionErrors.java:89)     at org.springframework.test.web.servlet.result.StatusResultMatchers$5.match(StatusResultMatchers.java:549)     at org.springframework.test.web.servlet.MockMvc$1.andExpect(MockMvc.java:148)     at com.logicbig.example.UserControllerTestConsume.testMyMvcController(UserControllerTestConsume.java:45)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:497)     at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)     at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)     at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)     at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)     at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)     at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74)     at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:83)     at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:72)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:231)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:88)     at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)     at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)     at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)     at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)     at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)     at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)     at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:71)     at org.junit.runners.ParentRunner.run(ParentRunner.java:363)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:174)     at org.junit.runner.JUnitCore.run(JUnitCore.java:137)     at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:69)     at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:234)     at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:74)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:497)     at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144)  Process finished with exit code -1  ---  Looks like    media type is completely ignored here :  `@RequestMapping`(  method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE)  Am I missing something or it's a bug?  Thanks  ---  **Affects:** 4.2.4  **Attachments:** - [pom.xml](https://jira.spring.io/secure/attachment/23294/pom.xml) (_2.18 kB_) - [UserControllerConsume.java](https://jira.spring.io/secure/attachment/23297/UserControllerConsume.java) (_853 bytes_) - [UserControllerTestConsume.java](https://jira.spring.io/secure/attachment/23295/UserControllerTestConsume.java) (_2.24 kB_) - [WebConfigConsume.java](https://jira.spring.io/secure/attachment/23296/WebConfigConsume.java) (_319 bytes_)","closed","status: invalid,","spring-projects-issues","2016-02-10T03:49:32Z","2019-01-13T05:30:19Z"
"","18763","WebSocketMessageBrokerStats does not work unless SockJS is enabled with WebSocket XML namespace [SPR-14190]","**[Joe Sweden](https://jira.spring.io/secure/ViewProfile.jspa?name=mandudeboy)** opened **[SPR-14190](https://jira.spring.io/browse/SPR-14190?redirect=false)** and commented  In the Spring reference documentation for Websockets it states:  When using `@EnableWebSocketMessageBroker` or  key infrastructure components automatically gather stats and counters that provide important insight into the internal state of the application. The configuration also declares a bean of type WebSocketMessageBrokerStats that gathers all available information in one place and **by default logs it at INFO level once every 30 minutes.**  we are using a  but the INFO log is never performed. This was unexpected after reading the above documentation, but was fixed by adding sockJS. It probably should be clarified that this logging is actually ONLY performed if you have configured sockJS. The SockJS Task Scheduler is used to to the logging, and if the  tag is not in the websocket context file, this Scheduler is null. I don't know if this is unintended in the code or not, but at least the documentation should be clearer on this point.   ---  **Affects:** 4.2.5, 4.3 RC1  **Reference URL:** http://docs.spring.io/spring/docs/current/spring-framework-reference/html/websocket.html#websocket-stomp-stats  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9fa061431c0b16f933071997f0b57705966fbc25, https://github.com/spring-projects/spring-framework/commit/8f0f5faf4d541df10db9b38e670bed83a1990b98","closed","type: bug,","spring-projects-issues","2016-04-19T11:41:26Z","2016-05-06T08:13:31Z"
"","18109","Using HandlerMethodArgumentResolver and BindingResult combination at the same time produces IllegalStateException [SPR-13533]","**[Jiri Nemec](https://jira.spring.io/secure/ViewProfile.jspa?name=jnemecz)** opened **[SPR-13533](https://jira.spring.io/browse/SPR-13533?redirect=false)** and commented  When I use this own combination on the same time it produces java.lang.IllegalStateException.  My configuration class:  ```java @Configuration @EnableWebMvc public class WebappConfig extends WebMvcConfigurerAdapter {     @Override     public void addArgumentResolvers(List argumentResolvers) {         argumentResolvers.add(new AuthorizationRequestArgumentResolver());     } }  ```  Request argument resolver:  ```java public class AuthorizationRequestArgumentResolver implements HandlerMethodArgumentResolver {      @Override     public boolean supportsParameter(MethodParameter parameter) {         return AuthorizationRequest.class.isAssignableFrom(parameter.getParameterType());     }      @Override     public Object resolveArgument(MethodParameter parameter,                                   ModelAndViewContainer mavContainer,                                   NativeWebRequest webRequest,                                   WebDataBinderFactory binderFactory) throws Exception {          HttpServletRequest request = (HttpServletRequest) webRequest.getNativeRequest();          AuthorizationRequest authorizationRequest = new AuthorizationRequest();         authorizationRequest.setClientId(request.getParameter(""client_id""));         authorizationRequest.setRedirectUri(request.getParameter(""request_uri""));         authorizationRequest.setResponseType(request.getParameter(""response_type""));         authorizationRequest.setScope(request.getParameter(""scope""));         authorizationRequest.setState(request.getParameter(""state""));         return authorizationRequest;      } } ```  and controller method:  ```java @RequestMapping(value = ""/authorize"", method = {RequestMethod.GET, RequestMethod.POST}) public String authorize(@Valid AuthorizationRequest authorizationRequest, BindingResult result) { } ```  and this combination produces this exception:  ``` org.springframework.web.util.NestedServletException: Request processing failed; nested exception is java.lang.IllegalStateException: An Errors/BindingResult argument is expected to be declared immediately after the model attribute, the @RequestBody or the @RequestPart arguments to which they apply: public java.lang.String cz.deriva.derivis.api.oauth2.provider.controllers.OAuthController.authorize(cz.deriva.derivis.api.oauth2.provider.domain.AuthorizationRequest,org.springframework.validation.BindingResult) 	org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:979) 	org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:858) 	javax.servlet.http.HttpServlet.service(HttpServlet.java:622) 	org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:843) 	javax.servlet.http.HttpServlet.service(HttpServlet.java:729) 	org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) 	cz.deriva.derivis.api.filters.CORSRequestFilter.doFilter(CORSRequestFilter.java:16) 	org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:85) 	org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) root cause  java.lang.IllegalStateException: An Errors/BindingResult argument is expected to be declared immediately after the model attribute, the @RequestBody or the @RequestPart arguments to which they apply: public java.lang.String cz.deriva.derivis.api.oauth2.provider.controllers.OAuthController.authorize(cz.deriva.derivis.api.oauth2.provider.domain.AuthorizationRequest,org.springframework.validation.BindingResult) ```    --- No further details from [SPR-13533](https://jira.spring.io/browse/SPR-13533?redirect=false)","closed","type: enhancement,","spring-projects-issues","2015-10-03T13:30:50Z","2015-11-11T20:27:24Z"
"","18053","AbstractEmbeddedDatabaseConfigurer.shutdown does not close JDBC resources [SPR-13474]","**[Jimmy Praet](https://jira.spring.io/secure/ViewProfile.jspa?name=jpraet)** opened **[SPR-13474](https://jira.spring.io/browse/SPR-13474?redirect=false)** and commented  `AbstractEmbeddedDatabaseConfigurer.shutdown` opens a JDBC connection to issue a `SHUTDOWN` command to the database, but does not close this connection.  It might seem unnecessary at first sight to close this connection, as we are shutting down the database anyway. However, for H2 this unclosed connection is triggering its [keepOpenStacktrace](http://grepcode.com/file/repo1.maven.org/maven2/com.h2database/h2/1.4.187/org/h2/jdbc/JdbcConnection.java#170) logging modus. From that point on, it will generate a [stacktrace ](http://grepcode.com/file/repo1.maven.org/maven2/com.h2database/h2/1.4.187/org/h2/util/CloseWatcher.java#100) for each opened connection, which is quite costly.   ---  **Affects:** 3.2.14, 4.1.7, 4.2.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/51a0237e0a70b3c8b2c6e25aab024da31a18a3f3, https://github.com/spring-projects/spring-framework/commit/b23c23279b4f6e4d30cbdc17daba85abcc009039, https://github.com/spring-projects/spring-framework/commit/aa0f11788b9eca70fb6b4001335942b8eaddd52b  **Backported to:** [4.1.8](https://github.com/spring-projects/spring-framework/milestone/132?closed=1), [3.2.15](https://github.com/spring-projects/spring-framework/milestone/103?closed=1)","closed","type: bug,","spring-projects-issues","2015-09-19T20:49:56Z","2015-10-15T09:06:28Z"
"","18042","@ActiveProfiles not applied to implicit @ContextHierarchy parent context [SPR-13462]","**[Jimmy Praet](https://jira.spring.io/secure/ViewProfile.jspa?name=jpraet)** opened **[SPR-13462](https://jira.spring.io/browse/SPR-13462?redirect=false)** and commented  We have an abstract base class for our tests that declares some common `@ContextConfiguration`. In some of the loaded context configurations we are using profiles (for example to switch between DB2 datasource and embedded derby datasource).  In our concrete test classes we extend the base class, and configure an `@ContextHierarchy` so the context of the base class acts as a parent application context. We want to be able to choose between DB2 and embedded derby on the concrete test class with `@ActiveProfiles`, but this seems to have no effect on the beans in the parent context. If we define the `@ActiveProfiles` on the parent, it is working.  This code snippet reproduces the problem:  ```java @ContextHierarchy(@ContextConfiguration(classes = ChildConfig.class)) @ActiveProfiles(""embedded"") public class ActiveProfilesContextHierarchyTest extends Parent {  	@Autowired 	private String dataSource;  	@Test 	public void testActiveProfilesWithContextHierarchy() { 		assertEquals(""derby"", dataSource); 	} }  @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(classes = { DefaultParentConfig.class, TestParentConfig.class }) class Parent { }  @Configuration @Profile(""default"") class DefaultParentConfig {  	@Bean 	public String dataSource() { 		return ""DB2""; 	} }  @Configuration @Profile(""embedded"") class TestParentConfig {  	@Bean 	public String dataSource() { 		return ""derby""; 	} }  @Configuration class ChildConfig { } ```  Is this a bug or is it designed to work like that? If it's not a bug, do you have any recommendations to achieve the same effect with another approach?   ---  **Affects:** 3.2.1","closed","status: declined,","spring-projects-issues","2015-09-11T11:53:01Z","2019-01-12T16:22:50Z"
"","18284","RegisterSingleton with generic types (ConfigurableListableBeanFactory) [SPR-13709]","**[Jeroen van Schagen](https://jira.spring.io/secure/ViewProfile.jspa?name=jeroen.van.schagen)** opened **[SPR-13709](https://jira.spring.io/browse/SPR-13709?redirect=false)** and commented  Hello, I would like to programatically register multiple singleton beans with a common generic interface. In the `@Autowired` we should differentiate between the registered beans using generic types.  However the ConfigurableListableBeanFactory API does not allow me to specify these generic types, meaning I still have to resort to the `@Qualifier` annotation to differentiate between my beans.  ---  In my case we register generic CRUD service beans for each scanned `@Entity` that does not yet have a specific CrudService\ implementation:  ```java public , ID extends Serializable> CrudService buildService(Class entityClass, PagingAndSortingRepository repository) {  DefaultCrudService service = new DefaultCrudService(entityClass, repository);  beanFactory.autowireBean(service);   final String beanName = StringUtils.uncapitalize(entityClass.getSimpleName()) + ""Service"";  Object proxy = beanFactory.applyBeanPostProcessorsAfterInitialization(service, beanName);  beanFactory.registerSingleton(beanName, proxy);  return (CrudService) proxy; } ```  The above code functions accordingly, registering a new entity service bean with all desired post-process proxies. However, when I try to inject the generated service in another spring managed bean it is unable to differentiate solely on generic types, causing a multiple beans found exception. My current workaround is using the `@Qualifier` with the generated beanName, but this is not desirable.  Is there another way to register an (already initialized) singleton bean with additional generic type information?  Thanks in advance!  Jeroen  ---  No further details from [SPR-13709](https://jira.spring.io/browse/SPR-13709?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2015-11-20T12:10:52Z","2019-01-13T05:33:45Z"
"","18769","Delivering static resources with wrong contenttype since 4.3RC1 (not in latest 4.2 release) [SPR-14196]","**[Jens Goldhammer](https://jira.spring.io/secure/ViewProfile.jspa?name=j.goldhammer@fme.de)** opened **[SPR-14196](https://jira.spring.io/browse/SPR-14196?redirect=false)** and commented  I am running a spring boot application and just made an upgrade to Spring Boot from 1.3.3 to 1.4M2. I have packaged my application as war file and also deliver static resources within my app to browsers, especially markdown files.  In Spring 4.2, markdown files were responded with correct content type. In Spring 4.3RC1, markdown files are delivered back with json contenttype which leads to an error in the browser which tries to parse it as json and fails.  See conversation here: https://gitter.im/spring-projects/spring-boot?at=571740ef98c544f1396cc5f7  Any idea where I can debug or what is missing here? Are there any changes in Spring MVC?   ---  **Affects:** 4.3 RC1  **Reference URL:** https://gitter.im/spring-projects/spring-boot?at=571740ef98c544f1396cc5f7","closed","in: web,","spring-projects-issues","2016-04-21T07:05:00Z","2019-01-11T16:33:54Z"
"","18783","FastByteArrayInputStream.read returns  incorrect result [SPR-14209]","**[Javier Godoy](https://jira.spring.io/secure/ViewProfile.jspa?name=rjgodoy)** opened **[SPR-14209](https://jira.spring.io/browse/SPR-14209?redirect=false)** and commented  `FastByteArrayInputStream.read(byte[])` returns incorrect result when the read buffer is bigger than the InputStream contents.  ```java FastByteArrayOutputStream out = new FastByteArrayOutputStream(); out.write(new byte[42]); System.out.println(out.getInputStream().read(new byte[43])); ```  Actual output: 41 Expected output: 42  The FBAIN implementation first reads all the available input, and a temporary read count of _n_ is computed. Then it calls ``read`` again, which returns -1 (end of stream). That -1 is added to the read count, returning _n_-1 instead of _n_.  ---  **Affects:** 4.2.5  **Issue Links:** - #18809 FastByteArrayInputStream read( byte[] ) wrong return value (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9bf5a5cbcbb14815a327a9dc3d36b80970e9c449, https://github.com/spring-projects/spring-framework/commit/b9fa67e0e68468a715c514780eadc52a49855eeb","closed","in: core,","spring-projects-issues","2016-04-22T22:39:38Z","2019-01-11T17:07:53Z"
"","18290","Regression: ShallowEtagHeaderFilter does not add Etag header for ResponseEntity returning methods [SPR-13717]","**[Jan Gaedicke](https://jira.spring.io/secure/ViewProfile.jspa?name=jgaedicke)** opened **[SPR-13717](https://jira.spring.io/browse/SPR-13717?redirect=false)** and commented  As we updated our spring dependencies from 4.0.8.RELEASE to 4.2.3.RELEASE the ShallowEtagHeaderFilter stopped working for spring controller methods that return a ResponseEntity. The effect is that no ""Etag"" header is added to the response.  The problem is, that the HttpEntityMethodProcessor flushes the HttpServletResponse and the ShallowEtagHeaderFilter refuses to add the header if the response is committed.  As a workaround we have implemented the flushBuffer method in the ContentCachingResponseWrapper and delay the original flushBuffer call until copyBodyToResponse is called.  You can find a small spring-boot app using a tomcat to reproduce this bug at github: https://github.com/jgaedicke/ShallowEtagHeaderFilter-bug-demo.  ---  **Affects:** 4.2.2, 4.2.3  **Reference URL:** https://github.com/jgaedicke/ShallowEtagHeaderFilter-bug-demo  **Issue Links:** - #13194 Provide controller method level alternative to WebContentInterceptor  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9d9433a6eb340f6c2a235588b9be5c5249de8d2f","closed","type: bug,","spring-projects-issues","2015-11-23T09:48:10Z","2019-01-11T19:31:39Z"
"","18532","Support of SQL warnings in ScriptUtils [SPR-13959]","**[Jan Cerny](https://jira.spring.io/secure/ViewProfile.jspa?name=cerny_j)** opened **[SPR-13959](https://jira.spring.io/browse/SPR-13959?redirect=false)** and commented  As long as the `ScriptUtils` is called in the background of `ResourceDatabasePopulator`, it would be very helpful to have a possibility to log SQL warnings after the `stmt.execute(statement)` in `ScriptUtils.executeSqlScript` is performed.   ---  **Affects:** 4.2.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/923534595c1644810fc2eb2cb732de606f7225eb, https://github.com/spring-projects/spring-framework/commit/167ba8387aca00ad9e70c59960f0329007d72a55","closed","type: enhancement,","spring-projects-issues","2016-02-18T14:19:37Z","2016-02-25T09:36:36Z"
"","18031","DeferredResult not thread-safe for isSetOrExpired call [SPR-13451]","**[Jamie Hodkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=jhodkinson)** opened **[SPR-13451](https://jira.spring.io/browse/SPR-13451?redirect=false)** and commented  The use of DeferredResult is usually from other threads than the one it was created on.  Clients may call isSetOrExpired to check the state of the result: however this may return stale information as it has no synchronization, unlike the setResultInternal method, which synchronizes.  ---  **Affects:** 3.2.14, 4.1.7, 4.2.1  **Issue Links:** - #15118 Deadlocks with DeferredResult timeout handling on Tomcat - #15232 Make result-data accessible in onCompletion Event in DeferredResult - #19544 Concurrency problem in DeferredResult: potential double execution of handleResult  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/73a2407545012d48431fb79bb8e960ed9d4b789a, https://github.com/spring-projects/spring-framework/commit/ae0d945a05847f8a212e76ef4dcd3c2fc4ba6dd0, https://github.com/spring-projects/spring-framework/commit/045016ebf94cf9fe4f130b8b56f32d612eced583  **Backported to:** [4.1.8](https://github.com/spring-projects/spring-framework/milestone/132?closed=1), [3.2.15](https://github.com/spring-projects/spring-framework/milestone/103?closed=1)","closed","type: bug,","spring-projects-issues","2015-09-09T11:30:39Z","2019-01-11T17:23:16Z"
"","18775","@RequestHeader doesn't accept RFC-1123 for conversion to java.time.Instant [SPR-14201]","**[James Howe](https://jira.spring.io/secure/ViewProfile.jspa?name=jamesmhowe)** opened **[SPR-14201](https://jira.spring.io/browse/SPR-14201?redirect=false)** and commented  For example, I'm trying to receive an HTTP date header:  ``` @RequestHeader(HttpHeaders.IF_MODIFIED_SINCE) Optional ifModifiedSince ```  but this results in a conversion error  ``` org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type [java.lang.String] to required type [java.util.Optional] 	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:115) 	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:99) 	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:161) 	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:128)     ... 88 more Caused by: org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.String] to type [@org.springframework.web.bind.annotation.RequestHeader java.time.Instant] for value 'Thu, 21 Apr 2016 17:11:08 +0100' 	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:41) 	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:192) 	at org.springframework.core.convert.support.ObjectToOptionalConverter.convert(ObjectToOptionalConverter.java:75) 	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:35) 	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:192) 	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:173) 	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:108) 	at org.springframework.beans.TypeConverterSupport.doConvert(TypeConverterSupport.java:64) 	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:47) 	at org.springframework.validation.DataBinder.convertIfNecessary(DataBinder.java:688) 	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:107) 	... 91 more Caused by: java.time.format.DateTimeParseException: Text 'Thu, 21 Apr 2016 17:11:08 +0100' could not be parsed at index 0 	at java.time.format.DateTimeFormatter.parseResolved0(DateTimeFormatter.java:1949) 	at java.time.format.DateTimeFormatter.parse(DateTimeFormatter.java:1851) 	at java.time.Instant.parse(Instant.java:395) 	at org.springframework.format.datetime.standard.InstantFormatter.parse(InstantFormatter.java:40) 	at org.springframework.format.datetime.standard.InstantFormatter.parse(InstantFormatter.java:35) 	at org.springframework.format.support.FormattingConversionService$ParserConverter.convert(FormattingConversionService.java:194) 	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:35) 	... 101 more ```  I tried to add `@DateTimeFormat` but it is unwieldy - the only built-ins are ISO-8601 formats. It's not possible to specify Java 8's `DataTimeFormatter.RFC_1123_DATE_TIME` to this annotation.  Given that all HTTP date/time headers should be using the RFC 1123 format, shouldn't that be the default for `@RequestHeader` conversion? There should at least be better formatter integration with `java.time` classes.  I'm running in a Spring Boot 1.3.3 context, if that makes any difference.  ---  **Affects:** 4.2.5  **Issue Links:** - #18143 `@DateTimeFormat`'s JSR-310 formatter is not strict in case of pattern - #18922 Support locale parameter to DateTimeFormat annotation  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9412f7a0948c954742eb4a4aabcaf1c2fe0605c7","closed","type: enhancement,","spring-projects-issues","2016-04-21T16:20:33Z","2022-01-20T16:01:32Z"
"","18647","UriComponentsBuilder isn't adding path separators [SPR-14075]","**[James Howe](https://jira.spring.io/secure/ViewProfile.jspa?name=jamesmhowe)** opened **[SPR-14075](https://jira.spring.io/browse/SPR-14075?redirect=false)** and commented  ``` UriComponentsBuilder.fromUriString(""/one"").path(""two"").build().toString() // ""/onetwo""  UriComponentsBuilder.newInstance().path(""one"").path(""two"").build().toString() // ""onetwo"" ```  It looks like the code intends to add the separators, and it wouldn't be very useful as a builder if it didn't, but psBuilder is always null.   ---  **Affects:** 4.2.3","closed","status: declined,","spring-projects-issues","2016-03-21T15:30:50Z","2019-01-12T16:22:12Z"
"","18643","Add HandlerMethod attribute to ServletRequest [SPR-14071]","**[James Howe](https://jira.spring.io/secure/ViewProfile.jspa?name=jamesmhowe)** opened **[SPR-14071](https://jira.spring.io/browse/SPR-14071?redirect=false)** and commented  This would be useful e.g. in filters to find out what spring actually did, instead of relying on more brittle code like:  ``` HandlerMethod method = ((HandlerMethod) ((ApplicationContext) request     .getAttribute(DispatcherServlet.WEB_APPLICATION_CONTEXT_ATTRIBUTE))     .getBean(""requestMappingHandlerMapping"", HandlerMapping.class)     .getHandler(request))     .getHandler() ```    --- No further details from [SPR-14071](https://jira.spring.io/browse/SPR-14071?redirect=false)","closed","type: enhancement,","spring-projects-issues","2016-03-18T17:05:58Z","2019-01-11T14:40:48Z"
"","18500","Extract common interface of HttpStatusCodeException and UnknownHttpStatusCodeException [SPR-13928]","**[James Howe](https://jira.spring.io/secure/ViewProfile.jspa?name=jamesmhowe)** opened **[SPR-13928](https://jira.spring.io/browse/SPR-13928?redirect=false)** and commented  Extract the common methods so that they can be used without determining the specific type. In many cases, handling for an HTTP response would be identical, regardless of whether spring knows about the specific status code.  In particular, I would like to access `getResponseHeaders()` and `getResponseBodyAsString()`, but see no reason why an `HttpStatusCodeException` couldn't also have a `getRawStatusCode()` method.  For example:  ``` try {   // some RestTemplate code } catch (HttpStatusCodeException | UnknownHttpStatusCodeException ex) {   // log and/or forward response   response.setStatus(ex.getRawStatusCode());   response.setHeaders(ex.getResponseHeaders()); } catch (ResourceAccessException ex) {   // retry } ```    ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b11d345c0deafb1f55908389a8c6e6e3f3d12c8c","closed","type: task,","spring-projects-issues","2016-02-08T12:49:33Z","2016-04-06T08:38:15Z"
"","17581","Buffered AsyncClientHttpResponses [SPR-13657]","**[Jakub Narloch](https://jira.spring.io/secure/ViewProfile.jspa?name=jnarloch)** opened **[SPR-13657](https://jira.spring.io/browse/SPR-13657?redirect=false)** and commented  After preparing the PoC for #16971, in order to fully facilitate the interceptors functionality would require to add buffering to the AsyncClientHttpResponse so that use cases like logging and body rewriting could be implemented on top of that.  ---  **Affects:** 4.2.3  **Issue Links:** - #16971 Support of client interceptors in Spring's AsyncRestTemplate","closed","type: enhancement,","spring-projects-issues","2015-11-08T18:50:24Z","2019-01-11T19:15:28Z"
"","18778","@EnableCaching should have default order higher than @Enable*Security [SPR-14204]","**[Jakub Kubrynski](https://jira.spring.io/secure/ViewProfile.jspa?name=jkubrynski)** opened **[SPR-14204](https://jira.spring.io/browse/SPR-14204?redirect=false)** and commented  Currently there is no guarantee that security aspects will be invoked before caching, which can cause serious safety issues. It'll be good to raise order of the `@EnableCaching`   ---  2 votes, 4 watchers","closed","status: bulk-closed,","spring-projects-issues","2016-04-22T10:02:13Z","2019-01-12T00:14:21Z"
"","18511","Support inclusive profiles [SPR-13939]","**[Jakub Kubrynski](https://jira.spring.io/secure/ViewProfile.jspa?name=jkubrynski)** opened **[SPR-13939](https://jira.spring.io/browse/SPR-13939?redirect=false)** and commented  It'll be nice to be allowed to use profiles inclusively, which can be also done by extending `@Profile` attributes:  ```java @Profile(value = {""prod"", ""schedule""}, inclusive = true) ```  ---  **Issue Links:** - #17063 Support AND operator in `@Profile` annotation","closed","status: bulk-closed,","spring-projects-issues","2016-02-11T17:03:24Z","2019-01-13T05:28:23Z"
"","18314","BeanFactoryAnnotationUtils.qualifiedBeanOfType should not instantiate all beans of given type before checking qualifier [SPR-13741]","**[Jakub Bochenski](https://jira.spring.io/secure/ViewProfile.jspa?name=jbochenski)** opened **[SPR-13741](https://jira.spring.io/browse/SPR-13741?redirect=false)** and commented  Basically what was reported on SO  Offending line: ``` Map candidateBeans = BeanFactoryUtils.beansOfTypeIncludingAncestors(bf, beanType);  ``` ```  ---  **Affects:** 3.2.15, 4.1.8, 4.2.3  **Reference URL:** https://stackoverflow.com/questions/27177364/spring-candidate-bean-type-strategy-is-bad  **Issue Links:** - #19178 Avoid creation of lazy candidates when the primary bean is injected  **Backported to:** [4.1.9](https://github.com/spring-projects/spring-framework/milestone/133?closed=1), [3.2.16](https://github.com/spring-projects/spring-framework/milestone/104?closed=1)","closed","type: enhancement,","spring-projects-issues","2015-11-30T16:00:51Z","2019-01-11T19:30:46Z"
"","18174","Inappropriate warn logging in AbstractHandlerExceptionResolver (e.g. for 404 status) [SPR-13596]","**[Jakob Kylberg](https://jira.spring.io/secure/ViewProfile.jspa?name=jkylberg)** opened **[SPR-13596](https://jira.spring.io/browse/SPR-13596?redirect=false)** and commented  In the AbstractHandlerExceptionResolver the log level for all responses handled by the resolveException method is set to WARN, in bold below. The problem is that not all responses handled by the method are responses that should be treated at the WARN log level, as normal responses to the end user can be handled by this method.  The log level should be reduced to DEBUG.  ```java 	@Override 	public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response, 			Object handler, Exception ex) {  		if (shouldApplyTo(request, handler)) { 			// Log exception at debug log level 			if (this.logger.isDebugEnabled()) { 				this.logger.debug(""Resolving exception from handler ["" + handler + ""]: "" + ex); 			} 			prepareResponse(ex, response); 			ModelAndView mav = doResolveException(request, response, handler, ex); 			if (mav != null) { 				// Log exception message at warn log level 				logException(ex, request); 			} 			return mav; 		} 		else { 			return null; 		} 	} ```  ---  **Affects:** 4.2.1, 4.2.2  **Issue Links:** - #17691 Spring does not log deserialization / marshalling errors to the console - #18189 Consistent warn logging without stacktrace in Portlet HandlerExceptionResolver  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/76d7f4527acaaeb784938cada6b57c73eb4abdb7  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2015-10-22T10:05:29Z","2019-01-11T17:37:27Z"
"","18834","XFire 1.2.6 not compatible with Spring 4.0's CustomEditorConfigurer [SPR-14262]","**[jagrut dalwadi](https://jira.spring.io/secure/ViewProfile.jspa?name=jagrut)** opened **[SPR-14262](https://jira.spring.io/browse/SPR-14262?redirect=false)** and commented  0 down vote favorite When I am integrating Xfire 1.2.6 with Spring4, I am getting following error:  SEVERE: Context initialization failed org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'xfire.customEditorConfigurer' defined in class path resource [org/codehaus/xfire/spring/customEditors.xml]: Initialization of bean failed; nested exception is org.springframework.beans.TypeMismatchException: Failed to convert property value of type 'java.util.LinkedHashMap' to required type 'java.util.Map' for property 'customEditors'; nested exception is java.lang.IllegalArgumentException: Cannot convert value of type [org.codehaus.xfire.spring.editors.ServiceFactoryEditor] to required type [java.lang.Class] for property 'customEditors[org.codehaus.xfire.service.ServiceFactory]': PropertyEditor [org.springframework.beans.propertyeditors.ClassEditor] returned inappropriate value of type [org.codehaus.xfire.spring.editors.ServiceFactoryEditor] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:547) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:302) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:298) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:198) at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:167) at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:609) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:464) at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:403) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:306) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:106) at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4811) at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5251) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:147) at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:725) at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:701) at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:717) at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1092) at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1834) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471) at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334) at java.util.concurrent.FutureTask.run(FutureTask.java:166) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603) at java.lang.Thread.run(Thread.java:722) Caused by: org.springframework.beans.TypeMismatchException: Failed to convert property value of type 'java.util.LinkedHashMap' to required type 'java.util.Map' for property 'customEditors'; nested exception is java.lang.IllegalArgumentException: Cannot convert value of type [org.codehaus.xfire.spring.editors.ServiceFactoryEditor] to required type [java.lang.Class] for property 'customEditors[org.codehaus.xfire.service.ServiceFactory]': PropertyEditor [org.springframework.beans.propertyeditors.ClassEditor] returned inappropriate value of type [org.codehaus.xfire.spring.editors.ServiceFactoryEditor] at org.springframework.beans.BeanWrapperImpl.convertIfNecessary(BeanWrapperImpl.java:479) at org.springframework.beans.BeanWrapperImpl.convertForProperty(BeanWrapperImpl.java:511) at org.springframework.beans.BeanWrapperImpl.convertForProperty(BeanWrapperImpl.java:505) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.convertForProperty(AbstractAutowireCapableBeanFactory.java:1502) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1461) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1197) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537) ... 25 more Caused by: java.lang.IllegalArgumentException: Cannot convert value of type [org.codehaus.xfire.spring.editors.ServiceFactoryEditor] to required type [java.lang.Class] for property 'customEditors[org.codehaus.xfire.service.ServiceFactory]': PropertyEditor [org.springframework.beans.propertyeditors.ClassEditor] returned inappropriate value of type [org.codehaus.xfire.spring.editors.ServiceFactoryEditor] at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:263) at org.springframework.beans.TypeConverterDelegate.convertToTypedMap(TypeConverterDelegate.java:623) at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:208) at org.springframework.beans.BeanWrapperImpl.convertIfNecessary(BeanWrapperImpl.java:459) ... 31 more Jar which are used for this are:  activation-1.1.jar ant-1.5.jar aopalliance-1.0.jar bcprov-jdk15-133.jar commons-attributes-api-2.1.jar commons-beanutils-1.7.0.jar commons-codec-1.3.jar commons-discovery-0.2.jar commons-httpclient-3.0.jar commons-logging-1.1.3.jar javax.servlet-api-3.1.0.jar javax.servlet.jsp-api-2.3.1.jar jaxb-api-2.0.jar jaxb-impl-2.0.1.jar jaxb-xjc-2.0.1.jar jaxen-1.1-beta-9.jar jaxws-api-2.0.jar jdom-1.0.jar jmock-1.0.1.jar jsr173_api-1.0.jar jstl-1.2.jar junit-3.8.1.jar mail-1.4.jar opensaml-1.0.1.jar qdox-1.5.jar saaj-api-1.3.jar saaj-impl-1.3.jar spring-aop-4.0.6.RELEASE.jar spring-beans-4.0.6.RELEASE.jar spring-context-4.0.6.RELEASE.jar spring-core-4.0.6.RELEASE.jar spring-expression-4.0.6.RELEASE.jar spring-web-4.0.6.RELEASE.jar spring-webmvc-4.0.6.RELEASE.jar stax-api-1.0.1.jar stax-utils-20040917.jar wsdl4j-1.6.1.jar wss4j-1.5.1.jar wstx-asl-3.2.0.jar xbean-2.2.0.jar xbean-spring-2.8.jar xercesImpl-2.7.1.jar xfire-aegis-1.2.6.jar xfire-all-1.2.6.jar xfire-annotations-1.2.6.jar xfire-core-1.2.6.jar xfire-generator-1.2.6.jar xfire-java5-1.2.6.jar xfire-jaxb2-1.2.6.jar xfire-jaxws-1.2.6.jar xfire-jsr181-api-1.0-M1.jar xfire-spring-1.2.6.jar xfire-ws-security-1.2.6.jar xfire-xmlbeans-1.2.6.jar xml-apis-1.0.b2.jar xmlParserAPIs-2.6.2.jar XmlSchema-1.1.jar xmlsec-1.3.0.jar  whether bug #10825 that was already been fixed. Not sure why such issue is occurring for Spring 4 version.  ---  **Reference URL:** http://stackoverflow.com/questions/37100897/error-spring-4-and-xfire-1-2-6  **Issue Links:** - #10825 XFire 1.2.6 not compatible with Spring 3.0's CustomEditorConfigurer","closed","in: core,","spring-projects-issues","2016-05-09T13:36:56Z","2019-01-14T04:39:27Z"
"","18663","@RequestHeader HttpHeaders fails with NPE against null header value [SPR-14091]","**[Izek Greenfield](https://jira.spring.io/secure/ViewProfile.jspa?name=igreenfi1)** opened **[SPR-14091](https://jira.spring.io/browse/SPR-14091?redirect=false)** and commented  ```java @RequestMapping(method = Array[RequestMethod](RequestMethod.POST), consumes = Array[String](MediaType.APPLICATION_JSON_VALUE), produces = Array[String](MediaType.APPLICATION_JSON_VALUE))      def  doPost(request: HttpServletRequest,               @RequestHeader httpHeaders: HttpHeaders,               @RequestBody body: String) = { } ```  When I send request with null header:      ffff:  Spring MVC failed with NPE in: RequestHeaderMapMethodArgumentResolver.java:69  ```java for (Iterator iterator = webRequest.getHeaderNames(); iterator.hasNext();) {                 String headerName = iterator.next();                 for (String headerValue : webRequest.getHeaderValues(headerName)) {                     result.add(headerName, headerValue);                 }             } ```  ---  **Affects:** 3.2.16, 4.2.5  **Issue Links:** - #18734 NPE thrown when calling methods with an empty `@Caching` annotation  **Backported to:** [3.2.17](https://github.com/spring-projects/spring-framework/milestone/105?closed=1)","closed","type: bug,","spring-projects-issues","2016-03-27T07:52:50Z","2019-01-13T05:27:22Z"
"","18498","@RequestBody(required=false) next to @RequestParam leads to IllegalArgumentException [SPR-13926]","**[Izek Greenfield](https://jira.spring.io/secure/ViewProfile.jspa?name=igreenfi1)** opened **[SPR-13926](https://jira.spring.io/browse/SPR-13926?redirect=false)** and commented  I have this mapping:  ```java @RequestMapping(method = {RequestMethod.GET}) public ResponseEntity getResource(HttpServletRequest httpServletRequest,                                       HttpHeaders headers,                                       @RequestParam MultiValueMap queryParams,                                       @RequestBody(required = false) String body) { ```  when I send get without body I get this error:  ```java Caused by: java.lang.IllegalArgumentException: argument type mismatch 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:497) 	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:222) 	... 54 more ```    ---  **Affects:** 4.2.3","closed","in: web,","spring-projects-issues","2016-02-07T08:45:56Z","2019-01-11T19:06:44Z"
"","18253","UriComponents needs support for URL building ending with trailing slash [SPR-13678]","**[Ivan Orešković](https://jira.spring.io/secure/ViewProfile.jspa?name=lopina)** opened **[SPR-13678](https://jira.spring.io/browse/SPR-13678?redirect=false)** and commented  REST conventions suggest that resource paths should end with trailing slash.  When using UriComponentsBuilder to build UriComponents, it has no option to append trailing slash at the end of path segments, before query params and fragments.  ```     @Test     public void testBuildUriFromNonTrailingSlash() {         String url = ""http://127.0.0.1:30001/basePath"";         UriComponentsBuilder uriBuilder = UriComponentsBuilder.fromUriString(url);          List prefixPaths = new ArrayList<>();         prefixPaths.add(""foo"");         prefixPaths.add(""bar"");          String id = ""baz"";          List suffixPaths = new ArrayList<>();         suffixPaths.add(""123"");         suffixPaths.add(""456"");          Map requestParams = new HashMap<>();         requestParams.put(""param1"", ""value1"");         requestParams.put(""param2"", ""value2"");          prefixPaths.stream()                 .filter(path -> path != null && !path.toString().trim().isEmpty())                 .forEach(path -> uriBuilder.pathSegment(path));          if (id != null && !id.toString().trim().isEmpty()) {             uriBuilder.pathSegment(id.toString().trim());         }          suffixPaths.stream()                 .filter(path -> path != null && !path.toString().trim().isEmpty())                 .forEach(path -> uriBuilder.pathSegment(path));           requestParams.entrySet().stream()                 .filter(e -> stringExists(e.getKey()) && stringExists(e.getValue()))                 .forEach(e -> uriBuilder.queryParam(e.getKey(), wrap(e.getKey())));          UriComponents uri = uriBuilder.build();         System.out.println(uri.toUriString());          UriComponentsPathTrailingSlashDecorator uriWrapper = new UriComponentsPathTrailingSlashDecorator(uri, true);         System.out.println(uriWrapper.toUriString());     } ```  gives output  ``` http://127.0.0.1:30001/basePath/foo/bar/baz/123/456?param1={param1}¶m2={param2} http://127.0.0.1:30001/basePath/foo/bar/baz/123/456/?param1={param1}¶m2={param2} ```  The first line is how the current UriComponents#toUriString method does it, and the second is how it should do it provided the option to end the path with a trailing slash.   ---  **Affects:** 4.2.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5f2d34f526f3f2b3c41dbc39a69374e526b6b5aa","closed","type: enhancement,","spring-projects-issues","2015-11-12T13:39:05Z","2015-11-17T20:22:06Z"
"","18572","Regression: RequestMappingHandlerAdapter with synchronizeOnSession=true calls invokeHandlerMethod twice [SPR-13999]","**[Isto Nikula](https://jira.spring.io/secure/ViewProfile.jspa?name=iston)** opened **[SPR-13999](https://jira.spring.io/browse/SPR-13999?redirect=false)** and commented  First call on line 726, second 731.  https://github.com/spring-projects/spring-framework/blob/4.2.x/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java#L723;L731  ---  **Affects:** 4.2.5  **Issue Links:** - #18555 Regression: `@ResponseBody` with Map result returns JSON array twice in case of synchronizeOnSession=true (_**""is duplicated by""**_) - #18708 Handler method is called twice when synchronizeOnSession is true in RequestMappingHandlerAdaptor (_**""is duplicated by""**_) - #18440 ResponseEntity CacheControl ignored / extended by RequestMappingHandlerAdapter","closed","type: bug,","spring-projects-issues","2016-02-29T09:43:22Z","2019-01-13T05:27:53Z"
"","18688","Java boolean is not handled correctly when used with Oracle JDBC driver [SPR-14116]","**[Igor Voshkulat](https://jira.spring.io/secure/ViewProfile.jspa?name=igorvoshkulat)** opened **[SPR-14116](https://jira.spring.io/browse/SPR-14116?redirect=false)** and commented  Database field is defined as NUMBER(1,0). Model object with a boolean field is mapped to parameters via SqlParameterSourceUtil.createBatch().  In version 3.2.2.RELEASE StatementCreationUtils.javaTypeToSqlTypeMap had no mapping for java boolean (more precisely it was commented out) and was working fine. This resulted in StatementCreationUtils.setValue() to execute ps.setObject(paramIndex, inValue).  After boolean mapping was uncommented ps.setObject(paramIndex, inValue, sqlType) is used.  Oracle doesn't have proper matching boolean type, however driver is smart enough to do automatic conversion from boolean to NUMBER.  Therefore following statements are valid: ps.setObject(1, true); ps.setBoolean(1, true); ps.setObject(1, true, Types.NUMERIC); //very narrow-minded, works for this particular case but not generic enough  What is currently done: ps.setObject(1, true, Types.BOOLEAN);  Which fails with invalid column type 17004.  ---  **Affects:** 4.2.5  **Issue Links:** - #19150 'Invalid column type' exception generated when writing a Boolean data member to Oracle database  (_**""is duplicated by""**_) - #17488 Regression in handling of String passed as Types.OTHER to JdbcTemplate - #18398 Oracle 12c JDBC driver throws inconsistent exception from getParameterType (affecting setNull calls) - #16854 INSERT SELECT of large CLOB causes ORA-01461 on setString - #16223 JdbcTemplate should support JDBC 4.1 getObject(columnIndex, type)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/797f5dbba64f01fc97e56ffd50292c4fe7fd762a, https://github.com/spring-projects/spring-framework/commit/6b0f26c33553d4724dedc95a8618c957d27ab3af","closed","type: bug,","spring-projects-issues","2016-04-05T08:28:07Z","2019-01-11T16:41:37Z"
"","18409","Handle RejectedExecutionException in WebAsyncManager [SPR-13836]","**[Ian Chan](https://jira.spring.io/secure/ViewProfile.jspa?name=icha024)** opened **[SPR-13836](https://jira.spring.io/browse/SPR-13836?redirect=false)** and commented  When a web interface is declared with 'Callable' return type is rejected by the AsyncTaskExecutor, a RejectedExecutionException can be thrown. This exception is currently not caught and the caller thread is still ticking until it times-out before ending.  A (workaround) solution is to use `@ControllerAdvice` and catch the RejectedExecutionException specifically - but that doesn't stop the timeout task and a stack trace in the logs when timeout expires.  A better solution is to catch the RejectedExecutionException when submitting to AsyncTaskExecutor in the first place (https://github.com/spring-projects/spring-framework/pull/947)   ---  **Affects:** 3.2.16, 4.2.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/29692fcc2135be20248969332caf30feedf369ca, https://github.com/spring-projects/spring-framework/commit/1ea9dd057935f24d864e0b4627c80187a1a5368a, https://github.com/spring-projects/spring-framework/commit/93298fc9faed433197c1a16663ed8ebf6f49ce29  **Backported to:** [3.2.17](https://github.com/spring-projects/spring-framework/milestone/105?closed=1)","closed","in: core,","spring-projects-issues","2016-01-05T04:05:37Z","2016-04-06T08:38:12Z"
"","18039","Yaml properties with override incorrectly resolves lists [SPR-13459]","**[Iain Mackay](https://jira.spring.io/secure/ViewProfile.jspa?name=neirfeno)** opened **[SPR-13459](https://jira.spring.io/browse/SPR-13459?redirect=false)** and commented  Spring resolves Yaml Lists to Properties prior to applying overrides, this means that an overridden list with less elements, will contain some of the previous lists elements. Example:  ```yaml list:   - aaa   - bbb — spring:   profile: dev list:   - ccc ```  results in:  ``` ""list[0]"" => ""ccc"", ""list[1] => ""bbb"" ```  This is obviously not desired. Spring should resolve the hierarchy whilst still in Objects/Lists before flattening to properties.   ---  **Affects:** 4.1.7","closed","in: core,","spring-projects-issues","2015-09-10T11:44:44Z","2019-01-12T05:23:49Z"
"","18316","spring-hateoas ControllerLinkBuilder cannot access ThreadLocal RequestAttributes in Stream.parallelStream() [SPR-13743]","**[Hugh Hamill](https://jira.spring.io/secure/ViewProfile.jspa?name=hughwphamill)** opened **[SPR-13743](https://jira.spring.io/browse/SPR-13743?redirect=false)** and commented  ControllerLinkBuilder in spring-hateoas uses RequestContextHolder from spring-web to retrieve the current request attributes, however because they are Thread Local they will not be available to the Threads spawned by parallelStream() causing the following Exception:  java.lang.IllegalStateException: Could not find current request via RequestContextHolder. Is this being called from a Spring MVC handler? at org.springframework.util.Assert.state(Assert.java:392) ~[spring-core-4.2.3.RELEASE.jar:4.2.3.RELEASE] at org.springframework.hateoas.mvc.ControllerLinkBuilder.getCurrentRequest(ControllerLinkBuilder.java:242) ~[spring-hateoas-0.19.0.RELEASE.jar:na] at org.springframework.hateoas.mvc.ControllerLinkBuilder.getBuilder(ControllerLinkBuilder.java:189) ~[spring-hateoas-0.19.0.RELEASE.jar:na] at org.springframework.hateoas.mvc.ControllerLinkBuilderFactory.linkTo(ControllerLinkBuilderFactory.java:121) ~[spring-hateoas-0.19.0.RELEASE.jar:na] at org.springframework.hateoas.mvc.ControllerLinkBuilder.linkTo(ControllerLinkBuilder.java:138) ~[spring-hateoas-0.19.0.RELEASE.jar:na]   ---  **Affects:** 4.2.3  **Reference URL:** https://github.com/hughwphamill/spring-web-thread-issue","closed","status: declined,","spring-projects-issues","2015-11-30T16:46:21Z","2019-01-12T16:22:35Z"
"","18237","CommonsMultipartFile.getOriginalFilename() does not strip file path properly [SPR-13662]","**[Hua Li](https://jira.spring.io/secure/ViewProfile.jspa?name=condorlee@hotmail.com)** opened **[SPR-13662](https://jira.spring.io/browse/SPR-13662?redirect=false)** and commented  Note I found the issue in the latest code of master branch here: https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/web/multipart/commons/CommonsMultipartFile.java I assume it applies to the latest 4.2.2 version.  getOriginalFilename() tries to strip file path from while file path name string and returns only the file name part. It has been coded to be adaptive - looking for Linux path separator char ""/"" first, if fail then looking for Windows path separator char ""\"".  But this adaptive logic is buggy - if Spring is running on a Windows computer and if attacker provides a path name like ""/..\..\..\malicious_directory\malicious_file"" then the getOriginalFilename() method will return ""..\..\..\malicious_directory\malicious_file"" which is not a bare file name but contains both path and file name.  Then if application layer code assumes it is a bare file name and use it as a bare file name, critical path traversal issue can happen.  I think the right logic is - using File.separator to find and strip the path and get bare file name.  ---  **Affects:** 3.2.15, 4.1.8, 4.2.2  **Reference URL:** https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/web/multipart/commons/CommonsMultipartFile.java  **Issue Links:** - #9957 StringUtils.getFilename(String) should parse any kind of file separator - #19180 CommonsMultipartFile.getOriginalFilename() should be able to preserve header-specified filename as-is  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8d7d4cecf8dc10a9f2f2c165dd7bd234773613a7, https://github.com/spring-projects/spring-framework/commit/df49b1175810a495b23f671e4e592887569dee93, https://github.com/spring-projects/spring-framework/commit/5d9d88c44d36eb16a6e31c03f82acbb1bc68cd5d  **Backported to:** [4.1.9](https://github.com/spring-projects/spring-framework/milestone/133?closed=1), [3.2.16](https://github.com/spring-projects/spring-framework/milestone/104?closed=1)","closed","type: bug,","spring-projects-issues","2015-11-09T21:55:42Z","2019-01-11T19:13:45Z"
"","18173","[MISSING_DOCUMENTATION] SimpleThreadScope works correct only if using it within a @Lookup method [SPR-13595]","**[Horatiu Cherebetiu](https://jira.spring.io/secure/ViewProfile.jspa?name=horatiu.cherebetiu)** opened **[SPR-13595](https://jira.spring.io/browse/SPR-13595?redirect=false)** and commented  If trying to autowired SimpleThreadScope annotate beans you get same instance of the annotate bean(this does not happen if using RequestScope or SessionScope).  To solve this, access SimpleThreadScope annotate beans by using methods annotated with `@Lookup`   --- No further details from [SPR-13595](https://jira.spring.io/browse/SPR-13595?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2015-10-22T06:09:15Z","2019-01-12T00:15:11Z"
"","18131","DefaultSubscriptionRegistry loses track of subscribers in its cache [SPR-13555]","**[Henrik Olsson](https://jira.spring.io/secure/ViewProfile.jspa?name=henolsmob)** opened **[SPR-13555](https://jira.spring.io/browse/SPR-13555?redirect=false)** and commented  Sometimes when sending data to destinations with multiple subscribers not all of them receive the data. This seems to happen after a large number of subscriptions has been done (tests were done with ~2000 subscribers on the same destination, related to DEFAULT_CACHE_LIMIT = 1024?).  From one of our test runs: Session dn0zchmw subscribes to /api/en/events/9719 at start, always receives data. Session v535qopd subscribes to /api/en/events/9719 after 2000 other sessions has subscribed to it, does not receive any data.  Looking up the session v535qopd in DefaultSubscriptionRegistry.subscriptionRegistry it exits and is mapped correctly:  ``` [   sessionId=v535qopd,   subscriptions={     /request-response-userv535qopd=[subscription(id=/user/request-response)],     /error-userv535qopd=[subscription(id=/user/error)],     /api/en/events/9719=[subscription(id=/api/en/events/9719)]   } ] ```  However, looking up the destination /api/en/events/9719 in DefaultSubscriptionRegistry.accessCache does not return that session, only the working one:  ``` /api/en/events/9719 = {dn0zchmw=[/api/en/events/9719]} ```  Removing the cache from DefaultSubscriptionRegistry to make findSubscriptionsInternal always fall back to doing a lookup in subscriptionRegistry seems to fix the issue.   ---  **Affects:** 4.1.7, 4.2 GA  **Backported to:** [4.1.8](https://github.com/spring-projects/spring-framework/milestone/132?closed=1)  0 votes, 6 watchers","closed","type: bug,","spring-projects-issues","2015-10-09T12:36:06Z","2015-10-15T10:11:25Z"
"","18088","Support dynamic Access-Control-Allow-Origin based on Origin HTTP request header [SPR-13511]","**[Hendy Irawan](https://jira.spring.io/secure/ViewProfile.jspa?name=ceefour)** opened **[SPR-13511](https://jira.spring.io/browse/SPR-13511?redirect=false)** and commented  [Spring 4.2 has CORS support](https://spring.io/blog/2015/06/08/cors-support-in-spring-framework), however allowed Origin(s) must be set manually. Which is problematic when combined with authentication, because authentication not supported with `Access-Control-Allow-Origin: *`.  Please allow to make this set automatically. Very useful for Ionic/Cordova clients.  i.e. if client sends `Origin: assets-library://whatever/` then server will send `Access-Control-Allow-Origin: assets-library://whatever/`   ---  **Affects:** 4.2.1  **Reference URL:** http://stackoverflow.com/q/32797633/122441","closed","status: invalid,","spring-projects-issues","2015-09-26T13:22:26Z","2019-01-12T05:23:40Z"
"","18580","Introduce @ExcludeFromScan to exclude from component scanning [SPR-14008]","**[Heiko Scherrer](https://jira.spring.io/secure/ViewProfile.jspa?name=scherrer)** opened **[SPR-14008](https://jira.spring.io/browse/SPR-14008?redirect=false)** and commented  The need to have a marker annotation to exclude `@Configuration` classes from `@ComponentScan`. For example one is writing framework code, based on Spring, and wants to exclude custom types from Spring's component scan mechanism. Put this marker annotation on `@Configuration` classes to filter those annotated types. - Pro: No need to implement `org.springframework.context.annotation.ImportSelector` - Cons: Caller has to add a filter to `@ComponentScan` explicitly, like `@ComponentScan(excludeFilters = @ComponentScan.Filter(ExcludeFromScan.class))` but this can probably be integrated into the Spring's component scan mechanism by default.    ---  4 votes, 5 watchers","closed","status: bulk-closed,","spring-projects-issues","2016-03-01T21:35:42Z","2019-01-12T02:43:40Z"
"","18624","Issue with deferredresult's timeout  [SPR-14052]","**[havings](https://jira.spring.io/secure/ViewProfile.jspa?name=ramya%20prakash)** opened **[SPR-14052](https://jira.spring.io/browse/SPR-14052?redirect=false)** and commented  We have set the deferred result timeout after 5seconds. On timeout, we either set the methods setResult() or setErrorResult() so that the deferredResult object expires and the thread is released. But we noticed that on time-out, a new thread is not created but the current thread(server request thread) is being used and the the thread stays in the waiting state always, even when the Object's state is expired. Below is the code used to set the result on timeout.  ```java deferredResult.onTimeout(new Runnable() {                        @Override 	public void run() { 		deferredResult.setErrorResult(new ResponseEntity(""Service Unavailable"", 			HttpStatus.SERVICE_UNAVAILABLE));} });  ```  Please let us know if we are doing it the right way. Thanks!   ---  **Affects:** 4.1.7","closed","in: web,","spring-projects-issues","2016-03-15T09:20:23Z","2019-01-11T14:42:17Z"
"","18518","ResponseBodyEmitter not transferring chunked content in chunks [SPR-13946]","**[Harald Schubert](https://jira.spring.io/secure/ViewProfile.jspa?name=schubertha)** opened **[SPR-13946](https://jira.spring.io/browse/SPR-13946?redirect=false)** and commented  Dear Spring team,  I am trying to figure out how to to put ResponseBodyEmitter to good use. My use case is streaming status messages about an installation progress to the client.  Looking at the documentation on http://docs.spring.io/spring/docs/current/spring-framework-reference/html/mvc.html => HTTP Streaming, this should be trivial. Unfortunately, I can't get it to work as expected. The observed end result is that the entire HTTP response is only sent after the last chunk has been written. The message is indeed chunked (header is set, no content length, properly separated chunks) but the client doesn't receive chunks in between.  I attached a working example just based on HttpServletResponse and another one with a ResponseBodyEmitter. I also attached an HTML file that I used on the client side.  Am I misunderstanding ResponseBodyEmitter or shouldn't it simply cover my use case?  Cheers, Harald   ---  **Affects:** 4.2.4  **Attachments:** - [client.html](https://jira.spring.io/secure/attachment/23306/client.html) (_749 bytes_) - [server-not-working.java](https://jira.spring.io/secure/attachment/23305/server-not-working.java) (_697 bytes_) - [server-working.java](https://jira.spring.io/secure/attachment/23307/server-working.java) (_630 bytes_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/5f85eab0d8c07698ce1ecfceb69780c2a9c61fd8, https://github.com/spring-projects/spring-framework-issues/commit/00a28c29d561696f941d632276173e4effe46879","closed","status: declined,","spring-projects-issues","2016-02-15T12:29:35Z","2019-01-12T16:22:23Z"
"","18386","Add a convenience constructor to InternalResourceViewResolver [SPR-13813]","**[Hans Desmet](https://jira.spring.io/secure/ViewProfile.jspa?name=desmethans)** opened **[SPR-13813](https://jira.spring.io/browse/SPR-13813?redirect=false)** and commented  Add a parametrised constructor to  InternalResourceViewResolver  ```java public  InternalResourceViewResolver(String prefix, String suffix) ```  so that following example method  ```java InternalResourceViewResolver viewResolver() {     InternalResourceViewResolver resolver = new InternalResourceViewResolver();     resolver.setPrefix(""/WEB-INF/JSP/"");	     resolver.setSuffix("".jsp"");	     return resolver; } ```  can be reduced to  ```java InternalResourceViewResolver viewResolver() {     return new InternalResourceViewResolver(""/WEB-INF/JSP/"", "".jsp""); } ```    ---  **Affects:** 4.2.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/41ee25b1e7cbc440ac204a37872d5a780fca38e8","closed","type: enhancement,","spring-projects-issues","2015-12-22T08:03:10Z","2016-04-06T08:38:12Z"
"","18759","Use @Cacheable with JPA entities [SPR-14188]","**[Guillaume EHRET](https://jira.spring.io/secure/ViewProfile.jspa?name=javamind)** opened **[SPR-14188](https://jira.spring.io/browse/SPR-14188?redirect=false)** and commented  I use the spring cache abstraction in one project. I have defined a `@Cacheable` in my CrudRepository like that  ```java @Cacheable(CACHE_ARTICLE_DETAIL) @Query(value = ""SELECT a FROM Article a left join fetch a.author aut left join c.member where a.id=:idArticle and a.valid=true"") Article findPublishedArticleById(@Param(""idArticle"") Long idArticle); ```  For information, I use Hibernate. I did not want to configure the 2nd level cache with EhCache or other solution. I was seduced by the simplicity of the Spring Cache in a simple Map.  But sometimes I have this error in the logs  ```java .w.s.m.s.DefaultHandlerExceptionResolver : Failed to write HTTP message: org.springframework.http.converter.HttpMessageNotWritableException: Could not write content: failed to lazily initialize a collection of role: org.mixit.cesar.site.model.article.Article.comments, could not initialize proxy - no Session (through reference chain: java.util.ArrayList[0]->org.mixit.cesar.site.model.article.Article[""comments""]); nested exception is com.fasterxml.jackson.databind.JsonMappingException: failed to lazily initialize a collection of role: org.mixit.cesar.site.model.article.Article.comments, could not initialize proxy - no Session (through reference chain: java.util.ArrayList[0]->org.mixit.cesar.site.model.article.Article[""comments""]) ```  I think that Spring stores an Hibernate proxy in the cache. And sometime data are removed from this cache and Spring is not able to find the session used by the data because the session is closed since a long time.  What are your preconisations ? I don't have tu use the `@Cacheable` in a Repository (only in the business layer) ? You can upgrade Spring to relink the entity with the session ? Or other ?  If possible I wanted to not used the 2nd cache level in Hibernate but maybe I had to pass by this solution.   ---  **Affects:** 4.2.5","closed","type: enhancement,","spring-projects-issues","2016-04-19T07:17:11Z","2016-05-02T13:07:08Z"
"","18376","Support @AliasFor for @JmsListener attributes [SPR-13803]","**[Grzegorz Poznachowski](https://jira.spring.io/secure/ViewProfile.jspa?name=dziesio)** opened **[SPR-13803](https://jira.spring.io/browse/SPR-13803?redirect=false)** and commented  I want to wrap `@JmsListener` annotation with a custom one (to avoid providing containerFactory attribute):  ```java @Target({ElementType.METHOD, ElementType.ANNOTATION_TYPE}) @Retention(RetentionPolicy.RUNTIME) @Documented @JmsListener(containerFactory = ""customJmsContainerFactory"", destination = """") public @interface CustomJmsListener {      @AliasFor(annotation = JmsListener.class, attribute = ""destination"")     String destination();      @AliasFor(annotation = JmsListener.class, attribute = ""selector"")     String selector() default """";      @AliasFor(annotation = JmsListener.class, attribute = ""concurrency"")     String concurrency() default """"; } ```  As **destination** is a required attribute I need to provide its value: `destination = """"`. I would expect that it would be overridden by specifying **destination** attribute on `@CustomJmsListener`, however the `@JmsListener` value is being used.  ---  **Affects:** 4.2.3  **Issue Links:** - #18545 Support repeatable annotations as composed annotations (_**""depends on""**_) - #18485 Introduce findRepeatableAnnotations() in AnnotationUtils - #18020 Use AnnotatedElementUtils instead of AnnotationUtils wherever feasible - #18181 `@Value` cannot be used as aliased meta-annotation - #18054 Support `@Cache`* as merged composed annotations - #18545 Support repeatable annotations as composed annotations (_**""is superseded by""**_)","closed","type: enhancement,","spring-projects-issues","2015-12-17T10:56:44Z","2019-01-13T05:32:33Z"
"","18295","Support 'throw-away' context for a test class [SPR-13722]","**[Grzegorz Poznachowski](https://jira.spring.io/secure/ViewProfile.jspa?name=dziesio)** opened **[SPR-13722](https://jira.spring.io/browse/SPR-13722?redirect=false)** and commented  It would be nice to have an option for marking a single test class to get a fresh context and not use a cached context at all (i.e. using `BeanFactoryPostProcessor` for that test class).  ---  **Affects:** 4.2.3  **Reference URL:** http://stackoverflow.com/questions/26931236/is-it-possble-to-reset-spring-tests-context-cache-before-a-test-suite-runs-not  **Issue Links:** - #16647 Support `@ContextConfiguration` at method level - #9309 Load dedicated child ApplicationContext for test instance in the TestContext framework - #12710 Limit size of context cache in the TestContext framework  1 votes, 3 watchers","open","type: enhancement,","spring-projects-issues","2015-11-25T11:38:57Z","2021-06-04T08:07:04Z"
"","18450","Validator does not include messages given to error.reject() [SPR-13877]","**[Gregor Frey](https://jira.spring.io/secure/ViewProfile.jspa?name=gregor.karl.frey@sap.com)** opened **[SPR-13877](https://jira.spring.io/browse/SPR-13877?redirect=false)** and commented  org.springframework.validation.Validator does not include messages given as arguments to error.reject() in the validate method. On the other side error.rejectValue() brings the message as expected. Background: The validator is used to validate a call send to a spring data rest http endpoint.   ---  **Affects:** 4.2.4  **Reference URL:** http://stackoverflow.com/questions/34859840/no-error-message-from-validator-in-spring-data-rest/34862551#34862551  1 votes, 2 watchers","closed","status: bulk-closed,","spring-projects-issues","2016-01-19T06:39:10Z","2019-01-12T02:44:18Z"
"","18512","Duplicate method signature in reference doc example [SPR-13940]","**[Greg Turnquist](https://jira.spring.io/secure/ViewProfile.jspa?name=gregturn)** opened **[SPR-13940](https://jira.spring.io/browse/SPR-13940?redirect=false)** and commented  A fragment of code documenting Spring's JdbcTemplate shows the same method signature twice, which would be a syntax error.   ---  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/961, and commits https://github.com/spring-projects/spring-framework/commit/268ebd7e89abb40f198cbd2cb9a6840d070eb505, https://github.com/spring-projects/spring-framework/commit/8cb35197efecb9b7f4c7549cb13fd7fe5c0c0d36","closed","type: enhancement,","spring-projects-issues","2016-02-11T22:28:55Z","2016-04-06T08:38:09Z"
"","18147","resttemplate multipart post with InputStreamResource not working [SPR-13571]","**[Greg Adams](https://jira.spring.io/secure/ViewProfile.jspa?name=gadams00)** opened **[SPR-13571](https://jira.spring.io/browse/SPR-13571?redirect=false)** and commented  I've been trying to send a multipart post via restTemplate and have been unable to get it to work with anything but FileSystemResource. In my use case (a weird file-forwarding use case) this forces me to copy a MultiPartFile InputStream into a temp file in order be able to create a  FileSystemResource, which seems undesirable.  Here's a testing version of the file-receiving controller (from another project, running in another servlet container):  ``` @RestController public class FileReceiveController { 	 	private Log log = LogFactory.getLog(FileReceiveController.class);  	@RequestMapping(method = RequestMethod.POST) 	public void uploadFile(@RequestParam(""customerId"") int customerId, @RequestPart(""file"") MultipartFile multipartFile) { 		log.info(""customerId: "" + customerId); 		log.info(""Received multipart file - original filename: "" + multipartFile.getOriginalFilename()); 		log.info(""content-type: "" + multipartFile.getContentType()); 		log.info(""size: "" + multipartFile.getSize()); 	} } ```  Here's the file-forwarding controller:  ``` @RestController public class FileForwardController { 	 	private RestTemplate restTemplate; 	 	public FileForwardController() { 		SimpleClientHttpRequestFactory requestFactory = new SimpleClientHttpRequestFactory(); 		requestFactory.setBufferRequestBody(false); 		this.restTemplate = new RestTemplate(requestFactory); 	}  	@RequestMapping(method = RequestMethod.POST) 	public void uploadFile(@RequestParam(""customerId"") int customerId, @RequestPart(""file"") MultipartFile multipartFile) { 		MultiValueMap parts = new LinkedMultiValueMap<>(); 		parts.add(""customerId"", customerId); 		try { 			// copy to temp file and use FileSystemResource //			File tempFile = File.createTempFile(""xyz"", """"); //			FileCopyUtils.copy(multipartFile.getInputStream(), new FileOutputStream(tempFile)); //			parts.add(""file"", new FileSystemResource(tempFile)); 			// OR use InputStreamResource (broken) 			parts.add(""file"", new InputStreamResource(multipartFile.getInputStream())); 			// OR use ByteArrayResource (broken) //			parts.add(""file"", new ByteArrayResource(multipartFile.getBytes())); 		} catch (IOException e) { 			throw new RuntimeException(e); 		} 		HttpHeaders headers = new HttpHeaders(); 		headers.setContentType(MediaType.MULTIPART_FORM_DATA); 		HttpEntity> request = new HttpEntity<>(parts, headers); 		restTemplate.exchange(""http://localhost:8080"", HttpMethod.POST, request, Void.class); 	} } ```  In this form, the restTemplate.exchange call throws  ``` org.springframework.web.client.HttpClientErrorException: 400 Bad Request 	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:91) 	at org.springframework.web.client.RestTemplate.handleResponse(RestTemplate.java:614) 	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:570) ```  The ByteArrayResource form does the same thing. Only the FileSystemResource form works.  ---  **Affects:** 4.1.7  **Issue Links:** - #18023 Read large data using InputStreamResource at ResourceHttpMessageConverter - #16633 RestTemplate with InputStreamResource does not work if Content-Length is not set - #19776 HTTP Response should not contain both Transfer-Encoding and Content-Length headers - #20990 Consistent treatment of InputStreamResource subclasses - #21348 Support use of MultipartFile as input to RestTemplate or WebClient  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/27c12809493954a7521819cc623fc7873ecf2f4f  0 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2015-10-13T14:37:13Z","2019-01-11T17:38:07Z"
"","18085","DefaultSingletonBeanRegistry.destroyBean destroys dependencies even if used by other beans [SPR-13507]","**[Graeme Rocher](https://jira.spring.io/secure/ViewProfile.jspa?name=graemerocher)** opened **[SPR-13507](https://jira.spring.io/browse/SPR-13507?redirect=false)** and commented  If you look at the logic for `DefaultSingleBeanRegistry`:  https://github.com/spring-projects/spring-framework/blob/master/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.java#L565  It will destroy any singleton beans it depends on when calling `removeBeanDefinition` regardless whether there are other beans that may depend on the dependency.  What this means is that if you have the following:  ```java class A {} class B {    @Autowired     A a } class C {    @Autowired     A a } ```  And you remove the bean definition `C` then `A` is removed as a bean in the context, even though `B` still exists and depends on it.    ---  **Affects:** 4.2.1","closed","in: core,","spring-projects-issues","2015-09-25T08:10:51Z","2019-01-12T05:23:42Z"
"","18679","SockJS / XHR Polling does not reset connection for heartbeat [SPR-14107]","**[Good Code](https://jira.spring.io/secure/ViewProfile.jspa?name=goodcode)** opened **[SPR-14107](https://jira.spring.io/browse/SPR-14107?redirect=false)** and commented  In AbstractHttpSockJsSession, writeFrameInternal method:  The final this.response.flush(); call is insufficient to reset the polling connection for heartbeat. Should be something like resetRequest(); as in the 4.1.9 release.  Possibly we meant to call flushCache() in PollingSockJsSession?   ---  **Affects:** 4.2.1, 4.2.2, 4.2.3, 4.2.4, 4.2.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cfdb68344975953f6e7f0c83daf3bc078a26bf93, https://github.com/spring-projects/spring-framework/commit/000a0a0006f1e1bdaca6baf44d66e24471f4c512","closed","type: bug,","spring-projects-issues","2016-04-01T21:05:27Z","2016-04-06T08:38:15Z"
"","18057","Origins doesn't anticipate an Origin header with a path [SPR-13478]","**[George](https://jira.spring.io/secure/ViewProfile.jspa?name=georgecgv)** opened **[SPR-13478](https://jira.spring.io/browse/SPR-13478?redirect=false)** and commented  1. Transformation of the origin into uri components used to fail with a NumberFormatException when origin string contained a character after the port definition like:    * `http://domain1.org:8080/`    * `http://domain1.org:80/path/file` 2. This also affected `DefaultCorsProcessor.processRequest`, due to `WebUtils.isSameOrigin` call. 3. Origin validity check was considering `http://domain1.com` and `http://domain1.com/` to be different. The same applies to allowed origins comparison.  Everything above doesn't comply to [RFC 6454](https://tools.ietf.org/html/rfc6454) standard:  > 3.2.1. Examples > All of the following resources have the same origin: > http://example.com/ > http://example.com:80/ > http://example.com/path/file  _I'm not totally sure about `UriComponentsBuilder.fromHttpRequest` but based on the code it may fail the same way as `UriComponentsBuilder fromOriginHeader` did. It depends what value can be stored in `X-Forwarded-Host`._   ---  **Affects:** 4.2 GA, 4.2.1  **Reference URL:** https://github.com/square/SocketRocket/pull/256  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/875, and commits https://github.com/spring-projects/spring-framework/commit/9c66dfa7b5f610ddeb69b9dc10baa227fbddcbf1","closed","type: enhancement,","spring-projects-issues","2015-09-22T09:20:11Z","2015-10-15T13:04:44Z"
"","18479","Ability to add a custom ResourceLoader conveniently in AnnotationConfigWebApplicationContext or conveniently as can be done via spring boot [SPR-13905]","**[Gaurav Rawat](https://jira.spring.io/secure/ViewProfile.jspa?name=gauravbrills)** opened **[SPR-13905](https://jira.spring.io/browse/SPR-13905?redirect=false)** and commented  **USE CASE** Hi I want to use `@PropertySource` in spring for a custom resource ie say xyz://path/x.txt instead of standard protocols like classpath file and so on which it already supports .I have found a way to do the same in spring Boot that is by SpringApplication as below with a custom ResourceLoader  ```java protected WebApplicationContext run(SpringApplication app){  app.setResourceLoader(new MyCustomResourceLoader);  return (WebApplicationContext )app.run(); } ```  The same works well and now I can define propertySource like `@PropertySource`(""xyz://path/y.txt"") .But I was not able to figure out how to override/customize the same in a normal spring application .  > Stuff I will do in my custom ResourceLoader  ```java public Class CustomResourceLoader extends DefaultResourceLoader{  @Override public Resource getResource(String location){ if(location.startsWith(""xyz://""){ return new XYZResource(new URI(location)); } return super.getResource(location); } ```  Now I just need a way to tell spring to use this instead of the defaultresourceloader it's possible as I mentioned in SPring boot but need to figure out how to do it in pure Spring.  **UPDATE** With the help of Chris Beams was able to figure out a way to do the same in CML apps via AnnotationConfigApplicationContext but still its not possible to do it conveninently for web apps unless you override AnnotationConfigWebApplicationContext getResourceXX methods and use your custom resource loader there (_doesnt sound elegant_) Hence I think we should either introduce ability to override resource loader via AnnotationConfigWebApplicationContext  or come with something more elegant like we can do with Spring BOOT .  ---  **Affects:** 4.1.7  **Reference URL:** http://stackoverflow.com/questions/35066913/using-custom-resource-protocol-in-propertysource-in-spring-using-custom-resourc  **Issue Links:** - #17455 Add support to enhance default resource loader  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/37de0b241dc2f2da5b5d31d405cefdd96dafab29, https://github.com/spring-projects/spring-framework/commit/0dff782402e93234d0714a9991419ff212b6c1d7","closed","type: enhancement,","spring-projects-issues","2016-01-29T10:11:20Z","2019-01-11T19:07:56Z"
"","18677","@JmsListener with autoStartup=false will never start [SPR-14105]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-14105](https://jira.spring.io/browse/SPR-14105?redirect=false)** and commented  `JmsListenerEndpointRegistry.start()` delegates to `startIfNecessary()` which does not start the container if `autoStartup` is false.  Hence, initializing with auto startup false, means the containers can never start.  Work around is to loop over the containers, and change the `autoStartup` before calling `start()`.  ``` for (MessageListenerContainer container : registry.getListenerContainers()) { 	((AbstractJmsListeningContainer) container).setAutoStartup(true); } ```  Or you can iterate over the containers to start instead of invoking `registry.start()`.  ---  **Affects:** 4.2.5  **Reference URL:** http://stackoverflow.com/questions/36332914/start-and-stop-jmslistener/36335015#comment60311685_36335015  **Issue Links:** - [AMQP-595](https://jira.spring.io/browse/AMQP-595) `@RabbitListener` with autoStartup=false will never start","closed","type: bug,","spring-projects-issues","2016-04-01T13:14:05Z","2019-01-14T04:39:53Z"
"","18361","StandardWebSocketHandlerAdapter catches Throwable instead of Exception [SPR-13788]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-13788](https://jira.spring.io/browse/SPR-13788?redirect=false)** and commented  `WebSocketHandler` methods throw `Exception` but `StandardWebSocketHandlerAdapter` catches `Throwable` in each case.  In one case (`onClose` ), the throwable is logged and suppressed.  It's generally better to catch `Exception` over `Throwable` to avoid eating `Error` s such as OOME.    ---  **Affects:** 4.2.3","closed","type: enhancement,","spring-projects-issues","2015-12-13T15:20:04Z","2015-12-14T14:18:44Z"
"","22188","Base64Utils: Support URL and filename safe alphabet (RFC 4648) [SPR-13784]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-13784](https://jira.spring.io/browse/SPR-13784?redirect=false)** and commented  ---  **Affects:** 4.2.3  **Issue Links:** - #17531 Base64 support option without Commons Codec dependency on Java 6/7  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/935, and commits https://github.com/spring-projects/spring-framework/commit/356eaef20e47bd223fd55fa7c85bddede251a829, https://github.com/spring-projects/spring-framework/commit/14fc6c2a9978c840c7df751db96b3d0f8e44b0c1","closed","type: enhancement,","spring-projects-issues","2015-12-11T18:09:12Z","2019-01-11T19:27:36Z"
"","18211","JmsListenerEndpointRegistry - expose @JmsListener ids [SPR-13633]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-13633](https://jira.spring.io/browse/SPR-13633?redirect=false)** and commented  The `JmsListenerEndpointRegistry` exposes a collection of containers as well as the ability to get a reference to each container by `id`, but there is no mechanism to get the `id` s.  Consider exposing (unmodifiable) the whole map, or the map's `keySet`.  ---  **Affects:** 4.2.2  **Reference URL:** http://stackoverflow.com/questions/33475344/displaying-the-listeners-and-their-status-in-my-application  **Issue Links:** - [AMQP-544](https://jira.spring.io/browse/AMQP-544) RabbitListenerEndpointRegistry - expose `@RabbitListener` ids (_**""is depended on by""**_)","closed","type: enhancement,","spring-projects-issues","2015-11-02T14:11:12Z","2019-01-13T05:34:41Z"
"","18155","Support @SendTo at the class level [SPR-13578]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-13578](https://jira.spring.io/browse/SPR-13578?redirect=false)** and commented  Spring AMQP now supports `@RabbitListener` at the class level (with method routing via `@RabbitHandler` ).  When specified at the method level, `@SendTo` is supported (to route replies that don't have replyTo data).  It would be useful to allow `@SendTo` at the class level so the same semantics can be supported for class level `@RabbitListener`.  ---  **Affects:** 4.2.2  **Issue Links:** - [AMQP-542](https://jira.spring.io/browse/AMQP-542) Class-level `@RabbitListener` causes INFO log message about NullPointerException  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a112557dc4159e85836fbfeeaa4c1523e818704d  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2015-10-16T13:06:24Z","2019-01-13T05:35:00Z"
"","18153","Incorrect @JmsListener parameter matching when the listener is a JDK proxy [SPR-13576]","**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-13576](https://jira.spring.io/browse/SPR-13576?redirect=false)** and commented  See [AMQP-541](https://jira.spring.io/browse/AMQP-541) - a similar situation to that with the `RabbitListener` exists with `JmsListener`.  ``` @SpringBootApplication @EnableTransactionManagement public class JmsdemoApplication {  	public static void main(String[] args) throws Exception { 		ConfigurableApplicationContext ctx = SpringApplication.run(JmsdemoApplication.class, args); 		JmsTemplate template = ctx.getBean(JmsTemplate.class); 		template.convertAndSend(""foo"", ""bar"", new MessagePostProcessor() {  			@Override 			public Message postProcessMessage(Message message) throws JMSException { 				message.setJMSCorrelationID(""abc""); 				return message; 			} 		}); 		Thread.sleep(5000); 		ctx.close(); 	}  	@Bean 	public Listener listener() { 		return new ListenerImpl(); 	}  	public interface Listener {  		public void listen(String payload, @Header(""jms_correlationId"") String correlationId);  	}  	@Transactional 	public static class ListenerImpl implements Listener {  		@Override 		@JmsListener(destination=""foo"") 		public void listen(String payload, @Header(""jms_correlationId"") String correlationId) { 			System.out.println(payload + "":"" + correlationId); 		}  	}  	@Bean 	public PlatformTransactionManager transactionManager() { 		return mock(PlatformTransactionManager.class); 	}  } ```  Without `@EnableTransactionManagement` output is `bar:abc` as expected; when the listener is proxied, we get `bar:bar`.  The problem is that the `method` in the `InvocableHandlerMethod` is the method on the proxy.  With Spring Web, the method is the interface method.  See the discussion on [AMQP-541](https://jira.spring.io/browse/AMQP-541) and its PR for the suggested solution over there (discover the correct interface method to be consistent with Spring Web).  ---  **Affects:** 4.2.1  **Issue Links:** - [AMQP-545](https://jira.spring.io/browse/AMQP-545) Use MethodIntrospector for `@RabbitListener` - [AMQP-541](https://jira.spring.io/browse/AMQP-541) `@Header` and `@Payload` Annotations Not Recognized on Proxy - #18230 Consistent method selection for listeners and endpoint mappings - #18226 `@EventListener` does not work if put it at method in class that implements interface  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/da9c80c6048a184e8151638f7031e83a4d73281a","closed","type: enhancement,","spring-projects-issues","2015-10-15T14:09:54Z","2019-01-13T05:35:01Z"
"","18346","Support for Microsoft SQL Server driver version 4 and above [SPR-13772]","**[Gareth Moorst](https://jira.spring.io/secure/ViewProfile.jspa?name=gazlm)** opened **[SPR-13772](https://jira.spring.io/browse/SPR-13772?redirect=false)** and commented  Using JdbcTemplate, trying to insert NULL into a DATE column using the Microsoft SQL Server driver no longer works in versions 4 and above of the JDBC driver. It still works in driver version 3. To be clear, the driver behaviour hasn't changed from version 3 to 4. The driver requires slightly different calling code to some other JDBC drivers - instead of using `PreparedStatement.setNull(int index, int type)`, it needs `PreparedStatement.setObject(int index, Object value)`, with `value = null`. There is a workaround in `org.springframework.jdbc.core.StatementCreatorUtils.java:285` that checks if the driver name starts with ""Microsoft SQL Server"" and uses setObject instead of setNull. Unfortunately, the driver name has changed in versions 4 and above. Instead of being ""Microsoft SQL Server JDBC Driver 3.0"" it is now ""Microsoft JDBC Driver 4.0 for SQL Server"".  Here is test code that reproduces the problem (it works with driver version 3, but not 4):  ```sql CREATE TABLE dbo.NULL_DATE_TEST (     DATE_FIELD DATE ) ```  ```java import com.microsoft.sqlserver.jdbc.SQLServerXADataSource; import org.junit.Test; import org.springframework.jdbc.core.JdbcTemplate;  public class InsertNullTestCase {      private static final String DB_URL=""jdbc:sqlserver://HOSTNAME:PORTdatabaseName=DATABASENAME"";     private static final String PASSWORD=""BLAH"";     private static final String USER=""BLOO"";      @Test     public void insertNullDate_shouldNotThrowException() throws Exception {          SQLServerXADataSource ds = new SQLServerXADataSource();         ds.setURL(DB_URL);         ds.setPassword(PASSWORD);         ds.setUser(USER);          JdbcTemplate jdbcTemplate = new JdbcTemplate(ds);         jdbcTemplate.update(""INSERT INTO NULL_DATE_TEST VALUES (?)"", new Object[]{null});     } } ```    ---  **Affects:** 3.2.15, 4.1.8, 4.2.3  **Backported to:** [4.1.9](https://github.com/spring-projects/spring-framework/milestone/133?closed=1), [3.2.16](https://github.com/spring-projects/spring-framework/milestone/104?closed=1)","closed","type: enhancement,","spring-projects-issues","2015-12-07T10:40:04Z","2015-12-17T09:05:32Z"
"","18447","Add support for UTF-8 and other charset/encoding to @PropertySource [SPR-13874]","**[Fyro](https://jira.spring.io/secure/ViewProfile.jspa?name=fyro)** opened **[SPR-13874](https://jira.spring.io/browse/SPR-13874?redirect=false)** and commented  It seems that there is not currently support for encoding/charset to `@PropertySource`""classpath:/..."")  With french characters like ""Générales"", current result is ""GÃ©nÃ©rales"" because there is no check with charset/encoding  Default constructor with default charset, it's ok  ```java public EncodedResource(Resource resource) {      this(resource, null, Charset.defaultCharset()); } ```  Used in ConfigurationClassParser#processPropertySource  ```java 	/** 	 * Create a PropertySource having the given name based on Properties 	 * loaded from the given encoded resource. 	 */ 	public ResourcePropertySource(String name, Resource resource) throws IOException { 		super(name, PropertiesLoaderUtils.loadProperties(new EncodedResource(resource))); 		this.resourceName = getNameForResource(resource); 	}  	/** 	 * Create a PropertySource based on Properties loaded from the given resource. 	 * The name of the PropertySource will be generated based on the 	 * {@link Resource#getDescription() description} of the given resource. 	 */ 	public ResourcePropertySource(Resource resource) throws IOException { 		super(getNameForResource(resource), PropertiesLoaderUtils.loadProperties(new EncodedResource(resource))); 		this.resourceName = null; 	}   ```  ---  **Affects:** 4.2.4  **Issue Links:** - #13603 Allow the use of custom PropertySource annotations in `@Configuration` classes - #18454 ResourcePropertySource class should support to specify character encoding  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a3a5a03ee36d259f6d06b679ec62e93d58678c71","closed","type: enhancement,","spring-projects-issues","2016-01-18T11:37:57Z","2019-01-13T05:32:07Z"
"","18529","ObjectFactory lacks method for getting bean with specified constructor arguments [SPR-13956]","**[Frank Scheffler](https://jira.spring.io/secure/ViewProfile.jspa?name=maverick1601)** opened **[SPR-13956](https://jira.spring.io/browse/SPR-13956?redirect=false)** and commented  While BeanFactory supports retrieving prototyped beans with additional constructor or factory-method arguments (#15860), the org.springframework.beans.factory.ObjectFactory is still missing such method.  ObjectFactory is often used in test fixtures, where lookup-method injection et.al. cannot be used, in order to get access to prototype bean instance. Using the BeanFactory directly in such cases is currently the only way to solve this.  ---  **Affects:** 4.2.4  **Issue Links:** - #18460 Regression: SPR-12443 breaks singleton bean references within a configuration class with null arguments - #18515 An ObjectFactory variant with lenient not-unique handling - #15860 BeanFactory lacks method for getting bean by type with specified constructor arguments - #19047 Mis-proxying of Mockito mock and poor diagnostics for type mismatch on proxy injection - #17723 Support dynamic bean lookup a la CDI's Instance type  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ed98393fb2a4196c5846ca25e3ded32f66e0533b, https://github.com/spring-projects/spring-framework/commit/890819f8862fbf9a96a30e115a36d7fbb5d4ae38","closed","type: enhancement,","spring-projects-issues","2016-02-17T18:27:01Z","2019-01-11T19:04:07Z"
"","18490","Publish test execution events to the test ApplicationContext [SPR-13916]","**[Frank Scheffler](https://jira.spring.io/secure/ViewProfile.jspa?name=maverick1601)** opened **[SPR-13916](https://jira.spring.io/browse/SPR-13916?redirect=false)** and commented  We are using Mockito mocks quite often throughout our Spring-based integration tests, which leaves us with the problem of resetting them before/after each test method. While we can use some globally defined custom TestExecutionListener to reset all the mocks found within the ApplicationContext, it would be more practical to be able to define specific event-listeners within the application context itself. This would allow for more fine-grained control over which beans (i.e. mocks) should be reset.  ## Deliverables  - [x] Implement `EventPublishingTestExecutionListener`. - [x] Implement abstract `TestContextEvent` and all concrete subclasses. - [x] Implement composed `@EventListener` annotations for all events. - [x] Document exception handling and async support in Javadoc. - [x] Document in the _Testing_ chapter of the reference manual.  ---  **Issue Links:**  - #13352 Publish TestStarted and TestCompleted events in the TestContext framework - #18606 Introduce support for test-scoped beans in the TestContext framework  2 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2016-02-04T07:41:05Z","2019-04-06T14:48:20Z"
"","18462","Provide a means for finding the target annotation for a specific composed annotation [SPR-13889]","**[Frank Scheffler](https://jira.spring.io/secure/ViewProfile.jspa?name=maverick1601)** opened **[SPR-13889](https://jira.spring.io/browse/SPR-13889?redirect=false)** and commented  Spring Security's `WithSecurityContextTestExecutionListener` currently uses `AnnotationUtils` to extract all annotations that are meta-annotated with `@WithSecurityContext`.  It does so manually, since neither `AnnotationUtils` nor `AnnotatedElementUtils` in Spring Core, so far, provide any means to extract the _target_ annotation element (e.g. `@WithSecurityContext`) and the _composed_ annotation (e.g., `@WithMockUser`) simultaneously.   ---  **Affects:** 4.2.4","closed","in: core,","spring-projects-issues","2016-01-26T05:51:39Z","2019-01-11T18:27:24Z"
"","18267","PropertyEditor not using getAsText when not using @InitBinder. [SPR-13692]","**[Franjo Stipanovic](https://jira.spring.io/secure/ViewProfile.jspa?name=fritzfs)** opened **[SPR-13692](https://jira.spring.io/browse/SPR-13692?redirect=false)** and commented  If I wish to use both setAsText and getAsText methods in my property editor I must use explicit registration using `@InitBinder` in controller. Without it - only setAsText is used.  AFAICS problems starts from here  ```java org.springframework.validation.AbstractBindingResult @Override public PropertyEditor findEditor(String field, Class valueType) {      ....                                                                                                                                                                                                                                                      return editorRegistry.findCustomEditor(valueTypeToUse, fixedField(field));			                                                             org.springframework.beans.PropertyEditorRegistrySupport	 @Override public PropertyEditor findCustomEditor(Class requiredType, String propertyPath) {      ....      return getCustomEditor(requiredTypeToUse);         }		 private PropertyEditor getCustomEditor(Class requiredType) {      if (requiredType == null || this.customEditors == null) {           return null;      } ```  This last method throws null because customEditors is null. There's no connection to BeanUtils.findEditorByConvention() anywhere :-(  Documentation (http://docs.spring.io/spring/docs/current/spring-framework-reference/html/validation.html) says:  ""_Note also that the standard JavaBeans infrastructure will automatically discover PropertyEditor classes (without you having to register them explicitly) if they are in the same package as the class they handle, and have the same name as that class, with 'Editor' appended; for example, one could have the following class and package structure, which would be sufficient for the FooEditor class to be recognized and used as the PropertyEditor for Foo-typed properties._""  com.chuck.Foo com.chunk.FooEditor  ```java public class FooEditor extends PropertyEditorSupport {  	@Override 	public void setAsText(String text) { 		Foo foo = new Foo(); 		foo.setId(Integer.valueOf(text)); 		setValue(foo); 	}  	@Override 	public String getAsText() { 		Foo foo = (Foo) this.getValue(); 		return foo.getId().toString(); 	}  } ```    ---  **Affects:** 4.2.1, 4.2.3","closed","status: bulk-closed,","spring-projects-issues","2015-11-16T16:44:16Z","2019-01-12T02:44:59Z"
"","18074","ETag/If-None-Match logic in HttpEntityMethodProcessor should not affect methods other than HTTP GET [SPR-13496]","**[Francisco Lozano](https://jira.spring.io/secure/ViewProfile.jspa?name=flozano)** opened **[SPR-13496](https://jira.spring.io/browse/SPR-13496?redirect=false)** and commented  A new etag-related logic has been introduced that breaks backward compatibility.  In HttpEntityMethodProcessor, the line:  ```java || clientETag.equals(""*""))) { ```  maybe acceptable for GET, but definitely not for PUT/POST/PATCH verbs, because if I do:  ``` PUT /some/resource If-None-Match: * ```  the intention is to create the resource only if it doesn't exist previously. Forcing 304 not modified makes absolutely no sense here, because I want to return 201 created (which I set in my ResponseEntity\).  I haven't find any obvious way to disable this magic etag handling, that's why I'm marking this issue as blocker (feel free to downgrade if a workaround is available).  I think all this logic may make sense in some applications, but it can introduce heavy incompatibilities in existing REST APIs.  I wish I had found this when in RC - but I couldn't because of other issues of my components with 4.2 that only now I have been able to fix.  Full changes on this class:  ```bash git diff v4.1.7.RELEASE..v4.2.1.RELEASE -- spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/HttpEntityMethodProcessor.java ```  ```java diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/HttpEntityMethodProcessor.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/HttpEntityMethodProcessor.java index 26d06ef..22ebdbc 100644 --- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/HttpEntityMethodProcessor.java +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/HttpEntityMethodProcessor.java @@ -19,18 +19,22 @@ package org.springframework.web.servlet.mvc.method.annotation;  import java.io.IOException;  import java.lang.reflect.ParameterizedType;  import java.lang.reflect.Type; +import java.net.URI;  import java.util.List;   import org.springframework.core.MethodParameter;  import org.springframework.core.ResolvableType;  import org.springframework.http.HttpEntity;  import org.springframework.http.HttpHeaders; +import org.springframework.http.HttpMethod; +import org.springframework.http.HttpStatus;  import org.springframework.http.RequestEntity;  import org.springframework.http.ResponseEntity;  import org.springframework.http.converter.HttpMessageConverter;  import org.springframework.http.server.ServletServerHttpRequest;  import org.springframework.http.server.ServletServerHttpResponse;  import org.springframework.util.Assert; +import org.springframework.util.StringUtils;  import org.springframework.web.HttpMediaTypeNotSupportedException;  import org.springframework.web.accept.ContentNegotiationManager;  import org.springframework.web.bind.support.WebDataBinderFactory; @@ -48,31 +52,59 @@ import org.springframework.web.method.support.ModelAndViewContainer;   *   * @author Arjen Poutsma   * @author Rossen Stoyanchev + * @author Brian Clozel   * @since 3.1   */  public class HttpEntityMethodProcessor extends AbstractMessageConverterMethodProcessor {  -       public HttpEntityMethodProcessor(List> messageConverters) { -               super(messageConverters); + +       /** +        * Basic constructor with converters only. Suitable for resolving +        * {@code HttpEntity}. For handling {@code ResponseEntity} consider also +        * providing a {@code ContentNegotiationManager}. +        */ +       public HttpEntityMethodProcessor(List> converters) { +               super(converters); +       } + +       /** +        * Basic constructor with converters and {@code ContentNegotiationManager}. +        * Suitable for resolving {@code HttpEntity} and handling {@code ResponseEntity} +        * without {@code Request~} or {@code ResponseBodyAdvice}. +        */ +       public HttpEntityMethodProcessor(List> converters, +                       ContentNegotiationManager manager) { + +               super(converters, manager);         }  -       public HttpEntityMethodProcessor(List> messageConverters, -                       ContentNegotiationManager contentNegotiationManager) { +       /** +        * Complete constructor for resolving {@code HttpEntity} method arguments. +        * For handling {@code ResponseEntity} consider also providing a +        * {@code ContentNegotiationManager}. +        * @since 4.2 +        */ +       public HttpEntityMethodProcessor(List> converters, +                       List requestResponseBodyAdvice) {  -               super(messageConverters, contentNegotiationManager); +               super(converters, null, requestResponseBodyAdvice);         }  -       public HttpEntityMethodProcessor(List> messageConverters, -                       ContentNegotiationManager contentNegotiationManager, List responseBodyAdvice) { +       /** +        * Complete constructor for resolving {@code HttpEntity} and handling +        * {@code ResponseEntity}. +        */ +       public HttpEntityMethodProcessor(List> converters, +                       ContentNegotiationManager manager, List requestResponseBodyAdvice) {  -               super(messageConverters, contentNegotiationManager, responseBodyAdvice); +               super(converters, manager, requestResponseBodyAdvice);         }           @Override         public boolean supportsParameter(MethodParameter parameter) { -               return (HttpEntity.class.equals(parameter.getParameterType()) || -                               RequestEntity.class.equals(parameter.getParameterType())); +               return (HttpEntity.class == parameter.getParameterType() || +                               RequestEntity.class == parameter.getParameterType());         }          @Override @@ -90,9 +122,10 @@ public class HttpEntityMethodProcessor extends AbstractMessageConverterMethodPro                 Type paramType = getHttpEntityType(parameter);                  Object body = readWithMessageConverters(webRequest, parameter, paramType); -               if (RequestEntity.class.equals(parameter.getParameterType())) { -                       return new RequestEntity(body, inputMessage.getHeaders(), -                                       inputMessage.getMethod(), inputMessage.getURI()); +               if (RequestEntity.class == parameter.getParameterType()) { +                       URI url = inputMessage.getURI(); +                       HttpMethod httpMethod = inputMessage.getMethod(); +                       return new RequestEntity(body, inputMessage.getHeaders(), httpMethod, url);                 }                 else {                         return new HttpEntity(body, inputMessage.getHeaders()); @@ -131,22 +164,74 @@ public class HttpEntityMethodProcessor extends AbstractMessageConverterMethodPro                  Assert.isInstanceOf(HttpEntity.class, returnValue);                 HttpEntity responseEntity = (HttpEntity) returnValue; -               if (responseEntity instanceof ResponseEntity) { -                       outputMessage.setStatusCode(((ResponseEntity) responseEntity).getStatusCode()); -               }                  HttpHeaders entityHeaders = responseEntity.getHeaders();                 if (!entityHeaders.isEmpty()) {                         outputMessage.getHeaders().putAll(entityHeaders);                 } -                 Object body = responseEntity.getBody(); +               if (responseEntity instanceof ResponseEntity) { +                       outputMessage.setStatusCode(((ResponseEntity) responseEntity).getStatusCode()); +                       if (isResourceNotModified(inputMessage, outputMessage)) { +                               outputMessage.setStatusCode(HttpStatus.NOT_MODIFIED); +                               // Ensure headers are flushed, no body should be written. +                               outputMessage.flush(); +                               // Skip call to converters, as they may update the body. +                               return; +                       } +               }                  // Try even with null body. ResponseBodyAdvice could get involved.                 writeWithMessageConverters(body, returnType, inputMessage, outputMessage);                  // Ensure headers are flushed even if no body was written. -               outputMessage.getBody(); +               outputMessage.flush(); +       } + +       private boolean isResourceNotModified(ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage) { + +               List ifNoneMatch = inputMessage.getHeaders().getIfNoneMatch(); +               long ifModifiedSince = inputMessage.getHeaders().getIfModifiedSince(); +               String eTag = addEtagPadding(outputMessage.getHeaders().getETag()); +               long lastModified = outputMessage.getHeaders().getLastModified(); +               boolean notModified = false; + +               if (lastModified != -1 && StringUtils.hasLength(eTag)) { +                       notModified = isETagNotModified(ifNoneMatch, eTag) && isTimeStampNotModified(ifModifiedSince, lastModified); +               } +               else if (lastModified != -1) { +                       notModified = isTimeStampNotModified(ifModifiedSince, lastModified); +               } +               else if (StringUtils.hasLength(eTag)) { +                       notModified = isETagNotModified(ifNoneMatch, eTag); +               } +               return notModified; +       } + +       private boolean isETagNotModified(List ifNoneMatch, String etag) { +               if (StringUtils.hasLength(etag)) { +                       for (String clientETag : ifNoneMatch) { +                               // compare weak/strong ETags as per https://tools.ietf.org/html/rfc7232#section-2.3 +                               if (StringUtils.hasLength(clientETag) && +                                               (clientETag.replaceFirst(""^W/"", """").equals(etag.replaceFirst(""^W/"", """")) +                                                               || clientETag.equals(""*""))) { +                                       return true; +                               } +                       } +               } +               return false; +       } + +       private boolean isTimeStampNotModified(long ifModifiedSince, long lastModifiedTimestamp) { +               return (ifModifiedSince >= (lastModifiedTimestamp / 1000 * 1000)); +       } + +       private String addEtagPadding(String etag) { +               if (StringUtils.hasLength(etag) && +                               (!(etag.startsWith(""\"""") || etag.startsWith(""W/\"""")) || !etag.endsWith(""\"""")) ) { +                       etag = ""\"""" + etag + ""\""""; +               } +               return etag;         }          @Override ```  ---  **Affects:** 4.2 GA, 4.2.1  **Issue Links:** - #17681 ServletWebRequest.checkNotModified(…) writes Last-Modified header in invalid format - #18436 Support for conditional PUT in Web MVC (using If-Unmodified-Since header) - #18204 Improve and/or provide control over ETag/If-None-Match logic in HttpEntityMethodProcessor  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/583a48ab7565264ec0dc17089f3becd24bb1991a  1 votes, 5 watchers","closed","type: bug,","spring-projects-issues","2015-09-24T11:35:57Z","2019-01-11T17:20:31Z"
"","18154","MockMvc: jsonpath with skip prefix [SPR-13577]","**[Francesco Pizzo](https://jira.spring.io/secure/ViewProfile.jspa?name=paizo)** opened **[SPR-13577](https://jira.spring.io/browse/SPR-13577?redirect=false)** and commented  It would be nice to configure the use of jsonpath in order to skip a given prefix.  Sometimes for security reason a prefix can be defined in for the json response by configuring the jackson2http bean:  ```java     @Bean     public MappingJackson2HttpMessageConverter mappingJackson2HttpMessageConverter() {         log.info(""using configureMessageConverters"");         MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter();         converter.setSupportedMediaTypes(Arrays.asList(MediaType.APPLICATION_JSON));         converter.setPrefixJson(true);         converter.setJsonPrefix(""qwerty"");          return converter;     } ```  But then is no more possible to use the jsonpath for testing due to the malformed json:  ```java mockMvc.perform(get(""/myresource"")     .contentType(MediaType.APPLICATION_JSON)     .accept(MediaType.APPLICATION_JSON))     .andExpect(status().isOk())     .andDo(print())     //the code below will throw an exception     .andExpect(jsonPath(""$.status"").value(""success"")) ```  ``` java.lang.IllegalArgumentException: Invalid container object at com.jayway.jsonpath.JsonPath.read(JsonPath.java:180) at com.jayway.jsonpath.JsonPath.read(JsonPath.java:211) at org.springframework.test.util.JsonPathExpectationsHelper.evaluateJsonPath(JsonPathExpectationsHelper.java:98) at org.springframework.test.util.JsonPathExpectationsHelper.assertValue(JsonPathExpectationsHelper.java:115) at org.springframework.test.web.servlet.result.JsonPathResultMatchers$2.match(JsonPathResultMatchers.java:68) at org.springframework.test.web.servlet.MockMvc$1.andExpect(MockMvc.java:152) ```    ---  **Affects:** 4.1.7  **Reference URL:** http://stackoverflow.com/questions/33151742/mockmvc-jsonpath-skipping-a-prefix  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7ae44c25656c256e69c9d00508d034b9bd75f295","closed","type: enhancement,","spring-projects-issues","2015-10-16T09:01:50Z","2016-04-06T08:38:11Z"
"","18283","Upgrading from version 4.1.3 -> 4.2.3 NoSuchMethodError [SPR-13708]","**[Forrai Krisztián](https://jira.spring.io/secure/ViewProfile.jspa?name=forraikrisztian)** opened **[SPR-13708](https://jira.spring.io/browse/SPR-13708?redirect=false)** and commented  I have created a simple web app with Spring MVC 4.1.3, and added tests with Spring MVC Test 4.1.3, by using `MockMvc`:  ```java mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build(); ```  With 4.1.3, everything runs fine. When upgrading to 4.2.0 or 4.2.3 all tests fail with the following exception:  ``` java.lang.NoSuchMethodError: org.springframework.core.annotation.AnnotatedElementUtils.findMergedAnnotationAttributes(Ljava/lang/reflect/AnnotatedElement;Ljava/lang/String;ZZ)Lorg/springframework/core/annotation/AnnotationAttributes; 	at org.springframework.test.util.MetaAnnotationUtils$AnnotationDescriptor.(MetaAnnotationUtils.java:290) 	at org.springframework.test.util.MetaAnnotationUtils$UntypedAnnotationDescriptor.(MetaAnnotationUtils.java:365) 	at org.springframework.test.util.MetaAnnotationUtils$UntypedAnnotationDescriptor.(MetaAnnotationUtils.java:360) 	at org.springframework.test.util.MetaAnnotationUtils.findAnnotationDescriptorForTypes(MetaAnnotationUtils.java:191) 	at org.springframework.test.util.MetaAnnotationUtils.findAnnotationDescriptorForTypes(MetaAnnotationUtils.java:208) 	at org.springframework.test.util.MetaAnnotationUtils.findAnnotationDescriptorForTypes(MetaAnnotationUtils.java:208) 	at org.springframework.test.util.MetaAnnotationUtils.findAnnotationDescriptorForTypes(MetaAnnotationUtils.java:208) 	at org.springframework.test.util.MetaAnnotationUtils.findAnnotationDescriptorForTypes(MetaAnnotationUtils.java:166) 	at org.springframework.test.context.support.AbstractTestContextBootstrapper.buildMergedContextConfiguration(AbstractTestContextBootstrapper.java:274) 	at org.springframework.test.context.support.AbstractTestContextBootstrapper.buildTestContext(AbstractTestContextBootstrapper.java:110) 	at org.springframework.test.context.TestContextManager.(TestContextManager.java:120) 	at org.springframework.test.context.TestContextManager.(TestContextManager.java:105) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTestContextManager(SpringJUnit4ClassRunner.java:154) 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.(SpringJUnit4ClassRunner.java:145) 	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) 	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) 	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) 	at java.lang.reflect.Constructor.newInstance(Constructor.java:408) 	at org.junit.internal.builders.AnnotatedBuilder.buildRunner(AnnotatedBuilder.java:104) 	at org.junit.internal.builders.AnnotatedBuilder.runnerForClass(AnnotatedBuilder.java:86) 	at org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:59) 	at org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(AllDefaultPossibilitiesBuilder.java:26) 	at org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:59) 	at org.junit.internal.requests.ClassRequest.getRunner(ClassRequest.java:33) 	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestLoader.createUnfilteredTest(JUnit4TestLoader.java:84) 	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestLoader.createTest(JUnit4TestLoader.java:70) 	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestLoader.loadTests(JUnit4TestLoader.java:43) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:444) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192) ```  ---  **Affects:** 4.2 GA, 4.2.3  **Issue Links:** - #18531 MetaAnnotationUtils$AnnotationDescriptor uses deprecated findMergedAnnotation(AnnotatedElement element, String) and throws exception (_**""is duplicated by""**_)","closed","status: invalid,","spring-projects-issues","2015-11-20T11:20:32Z","2019-01-12T05:23:24Z"
"","18104","Clarify javadoc of YamlPropertiesFactoryBean regarding comma-separated list property value [SPR-13527]","**[Florian Morgan](https://jira.spring.io/secure/ViewProfile.jspa?name=florian.morgan)** opened **[SPR-13527](https://jira.spring.io/browse/SPR-13527?redirect=false)** and commented  [YamlPropertiesFactoryBean](http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/YamlPropertiesFactoryBean.html) doesn't generate the comma-separated list property value.  The JavaDoc states that :  > ""Lists are represented as comma-separated values (useful for simple String values) and also as property keys with [] dereferencers..."" > The example even says that the following yaml:  ```java servers: - dev.bar.com - foo.bar.com ```  would become the following java properties:  ```java servers=dev.bar.com,foo.bar.com servers[0]=dev.bar.com servers[1]=foo.bar.com ```  I've provided a simple JUnit test to illustrate the issue. It has 3 tests, two with the [] dereferencers, and one with the comma-separated values. The first and second tests pass, but the last one fail.  I've reproduced it in `4.2.1.RELEASE` and `4.2.2.BUILD-SNAPSHOT`.   ---  **Affects:** 4.2.1  **Attachments:** - [YamlPropertiesTest.java](https://jira.spring.io/secure/attachment/23135/YamlPropertiesTest.java) (_1.81 kB_)","closed","in: core,","spring-projects-issues","2015-10-02T08:33:00Z","2015-10-15T13:04:43Z"
"","18379","Improvement suggestions to the ResourceTransformerChain [SPR-13806]","**[Felix Kurth](https://jira.spring.io/secure/ViewProfile.jspa?name=fkurth)** opened **[SPR-13806](https://jira.spring.io/browse/SPR-13806?redirect=false)** and commented  This is a follow up from #18300.  The customization possibilities for the resource chain should be improved. Right now, if one adds a `` tag to the xml, a complete default Resource chain is wired up according to `ResourceChainRegistration.java`.  ```xml                                                                                                          ```  including a `CssLinkResourceTransformer`, `AppCacheManifestTransformer`, `CachingResourceTransformer`, `CachingResourceResolver`, `WebJarsResourceResolver`, `PathResourceResolver`, depending whether the user has supplied a `VersionResourceResolver` or not. \\ \\ * Please give the developer a chance to disable the default transformers and resolvers without wiring up the complete chain itself.   i tried to disable auto registration  ```xml  ```  But i was not able to wire up the chain myself. There seems to be no docs on that. Please add the possibility to configure the transformers: I would expect that an empty element:  ```xml   ```  means no transformers, and no ""default"" implicit ones. Another option would be a property like  ```xml  ```  For all spring supplied transformers, there should then be an xml tag (or a property) available  ```xml  	  ```  The same applies to the resolvers, have the possibility to disable the default ones.  * For the version strategies, please add a `NoVersionStrategy` with its xml counterpart:  ```xml  ```  * Right now its not possible to use the `FixedVersionStrategy` with an empty or null version. I don't see a reason for that and would be convenient for a development profile etc. This would solve the `NoVersionStrategy` case as well.  * The `CssLinkResourceTransformer` is not able to handle relative paths with a fixed version strategy, if the path is relative and does not start with an ""."".   For example from   An example from `jquery-ui.css`  ```js url(""images/ui-bg_flat_100_ffffff_40x100.png"") ```  will not work. If both, the css file and the url within it are are under a fixed version strategy, it may end up with a double version-ed path like  ``` /resources/VERSION/styles/VERSION/images/abc.png ```  My suggestion to this problem: Do no chain up `PrefixVersionPathStrategy`'s. So if * the css file the `CssLinkResourceTransformer` is currently parsing itself is version-ed with `PrefixVersionPathStrategy`, * AND * the url within the css currently under processing would lead to another `PrefixVersionPathStrategy` (for the png for example) then do not touch the url itself.  ---  **Affects:** 4.2.4  **Issue Links:** - #18300 CssLinkResourceTransformer is incompatible with FixedVersionStrategy VersionResourceResolver  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/139ad04114f8b6620a1fd335c2c992d859ddbd9a","closed","in: web,","spring-projects-issues","2015-12-18T07:34:57Z","2019-01-11T18:33:33Z"
"","18371","VersionResourceResolver's versionStrategyMap should keep insertion order [SPR-13798]","**[Felix Kurth](https://jira.spring.io/secure/ViewProfile.jspa?name=fkurth)** opened **[SPR-13798](https://jira.spring.io/browse/SPR-13798?redirect=false)** and commented  Within the class  ```java org.springframework.web.servlet.resource.VersionResourceResolver ```  The property  ```java private final Map versionStrategyMap = new HashMap(); ```  should be a `LinkedHashMap` otherwise the resolver order maybe wrong if multiple version strategies are in use. The ant matchers are applied in wrong order.  ```xml                                                                                                       ```    ---  **Affects:** 4.1.8, 4.2.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3be35c053d14d4700f17b3ac4b27e06aa7c6d12e, https://github.com/spring-projects/spring-framework/commit/46016d090b241527ab43397d3a72e5865d576aef  **Backported to:** [4.1.9](https://github.com/spring-projects/spring-framework/milestone/133?closed=1)","closed","type: bug,","spring-projects-issues","2015-12-16T13:35:05Z","2015-12-17T09:05:32Z"
"","18041","Add 'null-value' attribute to  [SPR-13461]","**[Fabien Baligand](https://jira.spring.io/secure/ViewProfile.jspa?name=fbaligand)** opened **[SPR-13461](https://jira.spring.io/browse/SPR-13461?redirect=false)** and commented  It would be nice to add 'null-value' attribute to  element.  It would allow such a configuration :  ```xml  ```  Therefore, it allows to have some placeholders with a null value.  ---  **Affects:** 4.2.1  **Issue Links:** - #10509 Adding trim-capability to property configurers - #12450 Add valueSeparator property to context:property-placeholder  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fbce18418ab0b6667e49a599d5f5816dc7b9dc5e","closed","type: enhancement,","spring-projects-issues","2015-09-10T21:13:11Z","2019-01-11T17:22:31Z"
"","17619","EventListenerMethodProcessor resolves classes of lazy beans causing NoClassDefFoundError [SPR-13712]","**[Fabian Schlier](https://jira.spring.io/secure/ViewProfile.jspa?name=fabians)** opened **[SPR-13712](https://jira.spring.io/browse/SPR-13712?redirect=false)** and commented  After upgrading from 4.1.x to 4.2.3 we are encountering problems regarding the processing of the `@EventListener` annotations.  Our Spring configurations (XML) contain a whole lot of beans defined for lazy init. These bean definitions are some times pre-configurations used by other projects (and could be overriden or replaced) and sometimes stage dependent beans, where the matching implementation is selected by aliases and/or `` (and a more powerful self implemented equivalent) mechanism. Within the default configuration files, it is not possible to wrap the beans with `` tags. We just do not know how the environments of our customers look like. Therefor the beans need to be directly defined with the lazy flag.  With 4.2.3 the `org.springframework.context.event.EventListenerMethodProcessor` introspects all beans defined, including the lazy defined ones. This loads the class (which up to 4.1.x did not happen!), causing `NoClassDefFoundError`s if the class could not be loaded completely. I attached a minimal example, which instantiates the `org.springframework.scheduling.commonj.TimerManagerTaskScheduler` refering to the `commonj.timers.TimerListener`, which is not available outside the application server. This breaks spring context bootstrap in unit tests as well as when running in local tomcat, etc.  Is it possible to exclude lazy beans from processing?  ---  **Affects:** 4.2.3  **Attachments:** - [example-lazy.xml](https://jira.spring.io/secure/attachment/23228/example-lazy.xml) (_439 bytes_) - [TestEventlistener.java](https://jira.spring.io/secure/attachment/23229/TestEventlistener.java) (_470 bytes_)  **Issue Links:** - #18256 EventListener in a Request scoped bean fails context initialization - #18103 EventListenerMethodProcessor unconditionally instantiates certain beans, leading to BeanCreationException during deployment - #18902 EventListenerMethodProcessor resolves classes (by MethodIntrospector) of lazy beans causing NoClassDefFoundError - #18298 Consistent bean type checking for endpoint handlers","closed","in: core,","spring-projects-issues","2015-11-20T15:39:41Z","2019-01-11T19:32:38Z"
"","18665","AsyncRestTemplate should trigger no-output HTTP requests immediately as well [SPR-14093]","**[Evgeny Vishnyakov](https://jira.spring.io/secure/ViewProfile.jspa?name=arctic_knight)** opened **[SPR-14093](https://jira.spring.io/browse/SPR-14093?redirect=false)** and commented  The class SimpleBufferingAsyncClientHttpRequest contains following code:  ``` // JDK <1.8 doesn't support getOutputStream with HTTP DELETE if (HttpMethod.DELETE == getMethod() && bufferedOutput.length == 0) { 	connection.setDoOutput(false); } ```  The comment is true, but it doesn't check version of JVM. So without such checking the method HttpMethod.DELETE can't be invoked asynchronously.  ---  **Affects:** 4.2.5  **Reference URL:** http://stackoverflow.com/questions/33103096/when-does-the-asyncresttemplate-send-request  **Issue Links:** - #16966 Add support for DELETE with body to RestTemplate through exchange method - #18612 HTTP persistent connections for HTTP Invoker and RestTemplate","closed","type: enhancement,","spring-projects-issues","2016-03-28T15:52:44Z","2019-01-11T16:31:47Z"
"","18560","Incorrect RequestMapping root path [SPR-13988]","**[Evgeniy Kozobrodov](https://jira.spring.io/secure/ViewProfile.jspa?name=%E2%98%AD%20eugene%20almighty%20%E2%98%AD)** opened **[SPR-13988](https://jira.spring.io/browse/SPR-13988?redirect=false)** and commented  I'm trying to map root paths with and without trailing slash to one method in controller, but mapping fails on URL without trailing slash. In this case `PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE` equals to servlet path.  Example code:  ```xml ...      main     org.springframework.web.servlet.DispatcherServlet     1        main     /servletpath/*  ... ```  ```xml        ```  And in java code i have two methods with following annotations:  ``` ... @RequestMapping({"""", ""/""}) ... @RequestMapping(""/**"") ... ```  So, when i try to open page with url like `http://host:port/contextpath/servletpath` spring calls second method with wildcard mapping. Debugging showed that `PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE` attribute contains ""/servletpath"". But i expect that spring will call first method and `PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE` attribute will contain empty string.   ---  **Affects:** 4.2.4","closed","in: web,","spring-projects-issues","2016-02-26T13:20:38Z","2019-01-11T19:02:56Z"
"","18126","Repeatable build warning [SPR-13550]","**[Eva](https://jira.spring.io/secure/ViewProfile.jspa?name=evesmary)** opened **[SPR-13550](https://jira.spring.io/browse/SPR-13550?redirect=false)** and commented  Hi, on building my application (Spring 4.2.1, JSF 2.1, Hibernate 5, Flyway 2.3), the below build warning is displayed.  ```java [javac] /home/dev/trunk/WebContent/WEB-INF/lib/spring-context-4.2.1.RELEASE.jar(org/springframework/scheduling/annotation/Scheduled.class): warning: Cannot find annotation method 'value()' in type 'Repeatable': class file for java.lang.annotation.Repeatable not found [javac] Note: Some input files use or override a deprecated API. ```  Also project is not using any `@Repeatable`(Schedules.class) annotation. Using java version ""1.6.0_24"" OpenJDK Runtime Environment (IcedTea6 1.11.4) (amazon-52.1.11.4.46.amzn1-x86_64) OpenJDK 64-Bit Server VM (build 20.0-b12, mixed mode)  Tomcat: 7.0.27.  Is any way to solve this issue? or based on this http://stackoverflow.com/questions/21598016/repeatable-not-found-when-using-spring-4-propertysource, do we have to upgrade to JAVA 8 ??   --- No further details from [SPR-13550](https://jira.spring.io/browse/SPR-13550?redirect=false)","closed","status: declined,","spring-projects-issues","2015-10-08T10:18:46Z","2019-01-12T16:22:48Z"
"","18185","Add selection of compare mode for Json assertion [SPR-13607]","**[Eugene Tenkaev](https://jira.spring.io/secure/ViewProfile.jspa?name=hronom)** opened **[SPR-13607](https://jira.spring.io/browse/SPR-13607?redirect=false)** and commented  Greetings everyone!  `spring-test` for comparing json use external library called `jsonassert`.  This lib has several modes of comparing json: * `STRICT` - Strict checking.  Not extensible, and strict array ordering. * `LENIENT` - Lenient checking.  Extensible, and non-strict array ordering. * `NON_EXTENSIBLE` - Non-extensible checking.  Not extensible, and non-strict array ordering. * `STRICT_ORDER` - Strict order checking.  Extensible, and strict array ordering.  By default `spring-test` in method `org.springframework.test.web.servlet.result.ContentResultMatchers#json` use this library in mode `LENIENT`.  This mode is not strict enough. In situation when in your json new field has added, your tests not failed, so app that use API with this json can crash when try to deserialize this in some POJO!  Also this is not acceptable, when you want compare json in other useful modes, for example `NON_EXTENSIBLE`.  So it would be great if developers can specify which mode to use in comparisons.   ---  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/897, and commits https://github.com/spring-projects/spring-framework/commit/1d60a6a6aff99201d2100cc4bc771a15e6ab3be2","closed","type: enhancement,","spring-projects-issues","2015-10-25T19:06:27Z","2015-11-15T17:03:13Z"
"","18577","Regression: ResourceHandlerRegistration setCachePeriod doesn't set the correct response header anymore [SPR-14005]","**[Erko Hansar](https://jira.spring.io/secure/ViewProfile.jspa?name=zutnop)** opened **[SPR-14005](https://jira.spring.io/browse/SPR-14005?redirect=false)** and commented  We have a Spring MVC application with Spring Security around it. In the MVC config we add resourceHandlers for static files together with cache periods. And Spring Security applies the default header configuration.  ```java @Configuration public class MvcConfig extends DelegatingWebMvcConfiguration {      @Override     protected void addResourceHandlers(ResourceHandlerRegistry registry) {         registry.addResourceHandler(""/images/**"").addResourceLocations(""/images/"").setCachePeriod(60 * 60 * 8);     }  ... ```  This has been working fine with Spring versions 4.2.1, 4.2.2, 4.2.3 and 4.2.4 combined with either Spring Security 4.0.2 or 4.0.4. The response contained the correct Cache-Control:max-age=28800 header (and no Pragma header).  But after upgrading Spring to 4.2.5 it doesn't work anymore. Now the response contains: Cache-Control:no-cache, no-store, max-age=0, must-revalidate Pragma:no-cache  I also tried 4.2.6 and 4.3.0 BUILD-SNAPSHOTs, but the result was the same as with 4.2.5. There are a couple of issues related to Cache in 4.2.5 release notes, like #18390 and #18440, but I'm not sure if these are directly related.  ---  **Affects:** 4.2.5  **Issue Links:** - #18440 ResponseEntity CacheControl ignored / extended by RequestMappingHandlerAdapter - #18625 Reset Expires header in WebContentGenerator when caching resources  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0ef90df1204069edb5f39b9707fb81231ff86495, https://github.com/spring-projects/spring-framework/commit/50bcd67fb639dfb10443c316c1377550f74f8cba","closed","type: bug,","spring-projects-issues","2016-03-01T13:38:12Z","2019-01-11T15:06:19Z"
"","18799","Client-side polling delay as alternative for receive timeout for JMS [SPR-14225]","**[Erik Wramner](https://jira.spring.io/secure/ViewProfile.jspa?name=erik-wramner)** opened **[SPR-14225](https://jira.spring.io/browse/SPR-14225?redirect=false)** and commented  We are using Spring JMS with DefaultMessageListenerContainer using AQ JMS with very high volumes and we have spent quite some time on performance tuning. Finally we have found our silver (or at least copper) bullet: client-side waits.  The problem is how AQ handles receiveTimeout. If there are 100 threads waiting for a new message on a queue they consume virtually no resources as long as there is nothing to read. However, if a single message is posted all 100 threads try to get it, issuing a SQL SELECT statement. One will succeed, the others fail but still consume CPU in the database. As messages are posted this quickly adds up and the database is bogged down by pointless selects. When there is a backlog this is no issue, but when consumers keep up with producers it kills the database and eats resources that would be needed elsewhere.  We subclassed DefaultMessageListenerContainer and added a clientPollingDelay parameter. A receive call with a null message would sleep for clientPollingDelay milliseconds before proceeding. That improved our overall performance immensely. Our current implementation (subclassing and overriding a protected method) is not ideal, as it puts the delay inside a transaction. I will submit a pull request with a better option. The main point is to move the sleep from the database (JMS provider) to the application server (JMS client) as that works much better with AQ.  This is of major importance for us, but as we have a solution in place I have classified the issue as a minor one.  ---  **Issue Links:** - #18774 DefaultMessageListenerContainer doesn't shutdown gracefully if long recovery interval is set - #18786 Support non-blocking receiveTimeout in AbstractPollingMessageListenerContainer  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1045  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2016-04-26T19:30:47Z","2019-01-30T14:39:33Z"
"","18786","Support non-blocking receiveTimeout in AbstractPollingMessageListenerContainer [SPR-14212]","**[Erik Wramner](https://jira.spring.io/secure/ViewProfile.jspa?name=erik-wramner)** opened **[SPR-14212](https://jira.spring.io/browse/SPR-14212?redirect=false)** and commented  AbstractPollingMessageListenerContainer#receiveMessage currently blocks indefinitely both on negative values and 0 as receiveTimeout. The documentation for receiveTimeout mentions -1, but not 0. However, MessageConsumer#receive blocks if the timeout is 0 and AbstractPollingMessageListenerContainer uses receive() or receive(timeout) - never receiveNoWait().  In some cases, for example with Oracle AQ, receiveNoWait yields better performance.  It is very simple to fix this. Simply check for 0 and call receiveNoWait. I will create a pull request.  ---  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/1043  **Issue Links:** - #18799 Client-side polling delay as alternative for receive timeout for JMS  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/87b93a7ae90f1d8bc3b77cfa9c5c9c6ddb321caf","closed","type: enhancement,","spring-projects-issues","2016-04-24T10:22:05Z","2019-01-11T17:08:18Z"
"","18254","True Content-Negotiation [SPR-13679]","**[Enrique Ruiz (DiSiD)](https://jira.spring.io/secure/ViewProfile.jspa?name=eruiz)** opened **[SPR-13679](https://jira.spring.io/browse/SPR-13679?redirect=false)** and commented  Spring MVC provides three ways to support [Content-Negotiation](https://spring.io/blog/2013/06/03/content-negotiation-using-views) but IMHO it isn't a true CN because really only one method in the `Controller` cannot handle several formats requested by the user.  Due to the current CN depends on annotations in the handler methods a developer has to create 4 methods to support all the possible combinations:  * `@RequestParam` + `@ResponseBody`: received data as parameters and returned data as a JSON message * `@RequestParam` + `View`: received data as parameters and returned data as HTML * `@RequestBody` + `@ResponseBody`: received data as JSON message and return message as a JSON message * `@RequestBody` + `View`: received data as JSON message and return message as HTML  Although you can delegate between these methods you have to maintain 4 methods that potentially will change along the time and could evolve to different implementations, so really you are duplicating control logic.  What is true CN? For me true CN is to choose the conversion and binding of the incoming parameters or the conversion and binding of the request body depending on the HTTP ""`Content-Type`"" header property of the request.  In the same way, the conversion and formatting of the model objects included in the response could be by using a `View` or a `MessageConverter` depending on the HTTP ""`Accept`"" header property of the request.  Of course, the logical view-name should be infered from the URL automatically if needed, for example by using a `DefaultRequestToViewNameTranslator`.  By doing that only one handler method is needed and we won't duplicate control logic. For example:  ```java @Controller class AccountController {    @RequestMapping(""/accounts"")   @ResponseStatus(HttpStatus.OK)   public List list(Principal principal) {     return accountManager.getAccounts(principal);   }  } ```  ---  **Affects:** 4.2.2  **Issue Links:** - #18315 Controller method argument initialized either from the request body or from request parameters (_**""is superseded by""**_)  5 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2015-11-12T20:53:04Z","2019-01-13T20:45:07Z"
"","18311","@EnableHypermediaSupport is not compatible with Spring Boot Jackson settings [SPR-13738]","**[Endre Czirbesz](https://jira.spring.io/secure/ViewProfile.jspa?name=endrec)** opened **[SPR-13738](https://jira.spring.io/browse/SPR-13738?redirect=false)** and commented  In my project, I'm using Spring Boot 1.3.0 and Hateoas 0.19.  I would like to serialize dates as strings, so in my configuration file I have `spring.jackson.serialization.write-dates-as-timestamps=false`.  If I use `@EnableHypermediaSupport`, the dates get serialized to longs.  It seems that enabling hypermedia support always creates a `_halObjectMapper` bean (), which does not care about these settings.  I even have  ``` @Bean @Primary public ObjectMapper jacksonObjectMapper(final Jackson2ObjectMapperBuilder builder) {     return builder.createXmlMapper(false).build(); } ```  to enforce these setting, which works fine everywhere else, except for the returned resources, which are always got serialized using this `_halObjectMapper`.   ---  **Affects:** 4.2.3","closed","status: invalid,","spring-projects-issues","2015-11-30T12:54:08Z","2019-01-12T05:23:21Z"
"","18333","allowed-origins are not resolved from properties variables [SPR-13760]","**[Emir Bucalovic](https://jira.spring.io/secure/ViewProfile.jspa?name=emir.bucalovic@gmail.com)** opened **[SPR-13760](https://jira.spring.io/browse/SPR-13760?redirect=false)** and commented  In the Spring XML configuration for stomp-endpoint property 'allowed-origins' is parsed but if there is a property variable it is not resolved to a value. Here is example configuration:  ```xml     	        ```  This same configuration is parsed and used by AbstractSockJsService where properties variables are indeed processed and resolved to their correct value. In WebSocketNamespaceUtils however, these values are simple read from XML and added to OriginHandshakeInterceptor via constructor as strings. Effect of this is that OriginHandshakeInterceptor tries to compare incoming origin header against literal string: '${system.secure.url.wss}' which fails.  ---  **Affects:** 4.1.8, 4.2.3  **Issue Links:** - #18334 Inefficient and inconsistent setAllowedOrigins collection types in AbstractSockJsService/OriginHandshakeInterceptor  **Backported to:** [4.1.9](https://github.com/spring-projects/spring-framework/milestone/133?closed=1)","closed","type: bug,","spring-projects-issues","2015-12-04T13:16:49Z","2019-01-11T19:29:07Z"
"","18043","Potential Reliability Issue [SPR-13463]","**[Emily Tan](https://jira.spring.io/secure/ViewProfile.jspa?name=emilytan)** opened **[SPR-13463](https://jira.spring.io/browse/SPR-13463?redirect=false)** and commented  Double-Checked Locking Issue with DefaultSingletonBeanRegistry.java class in the spring-beans jar.  I scanned this jar using Fortify Software for security purposes and it resulted with a double-checked locking issue.  DefaultSingletonBeanRegistry class' method: getSingleton(String beanName, boolean allowEarlyReference) in line 189.  Here is the summary of the issue being reported: The method getSingleton() in DefaultSingletonBeanRegistry.java relies on double-checked locking, an incorrect idiom that does not achieve the intended effect.  Many talented individuals have spent a great deal of time pondering ways to make double-checked locking work in order to improve performance. None have succeeded.  Example 1: At first blush it may seem that the following bit of code achieves thread safety while avoiding unnecessary synchronization.  if (fitz == null) { synchronized (this) { if (fitz == null) { fitz = new Fitzer(); } } } return fitz;  The programmer wants to guarantee that only one Fitzer() object is ever allocated, but does not want to pay the cost of synchronization every time this code is called. This idiom is known as double-checked locking.  Unfortunately, it does not work, and multiple Fitzer() objects can be allocated. See The ""Double-Checked Locking is Broken"" Declaration for more details [1].  Recommendations: Synchronization is probably less expensive than you believe. In many cases, the best thing to do is to use the most straightforward solution.  Example 2: The code in Example 1 could be rewritten in the following way:  synchronized (this) { if (fitz == null) { fitz = new Fitzer(); } return fitz; }  References: [1] CWE ID 609, Standards Mapping - Common Weakness Enumeration - (CWE) [2] Requirement 6.5.6, Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) [3] The ""Double-Checked Locking is Broken"" Declaration, D. Bacon et al., http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html   ---  **Affects:** 4.2 GA  **Reference URL:** http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html","closed","in: core,","spring-projects-issues","2015-09-11T18:17:27Z","2019-01-12T05:23:46Z"
"","18392","BeanFactoryAnnotationUtils.qualifiedBeanOfType does not work for @Qualifier on bean class [SPR-13819]","**[Emilien Guenichon](https://jira.spring.io/secure/ViewProfile.jspa?name=barrak)** opened **[SPR-13819](https://jira.spring.io/browse/SPR-13819?redirect=false)** and commented  The BeanFactoryAnnotationUtils.qualifiedBeanOfType method doesn't match the qualified bean even with the good qualifier given and interface.  As you can see from the StackOverflow link. And from an execution of the attached project.  > QualifiedInterface processor = BeanFactoryAnnotationUtils.qualifiedBeanOfType( > beanFactory, QualifiedInterface.class, ""QualifierA""); >  > System.out.println(""The selected processor should be A "" + processor);  An interface QualifiedInterface.java  > public interface QualifiedInterface { >  > } > Two beans QualifiedA.java  > `@Component` > `@Qualifier`(""QualifierA"") > public class QualifiedA implements QualifiedInterface { >      >     @Override >     public String toString() { >         return ""QualifiedA""; >     } >  > }  and QualifiedB.java :  > `@Component` > `@Qualifier`(""QualifierB"") > public class QualifiedB implements QualifiedInterface { >      >     @Override >     public String toString() { >         return ""QualifiedB""; >     } >  > }  Here a log of the execution (care about qualifier names and case as I tried to lower them between the stackoverflow tickets and this JIRA)  > 2015-12-24 16:14:50.445  INFO 9852 --- [           main] b.sample.Application                     : Starting Application on DTBE-DEV4 with PID 9852 (D:\Workspace_netbeans\BeanFactoryAnnotationUtilsProblem\target\classes started by eguenichon in D:\Workspace_netbeans\BeanFactoryAnnotationUtilsProblem) > 2015-12-24 16:14:50.449  INFO 9852 --- [           main] b.sample.Application                     : No active profile set, falling back to default profiles: default > 2015-12-24 16:14:50.535  INFO 9852 --- [           main] s.c.a.AnnotationConfigApplicationContext : Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@5390ecf8: startup date [Thu Dec 24 16:14:50 CET 2015]; root of context hierarchy > 2015-12-24 16:14:53.251  INFO 9852 --- [           main] o.s.j.e.a.AnnotationMBeanExporter        : Registering beans for JMX exposure on startup > 2015-12-24 16:14:53.266  INFO 9852 --- [           main] o.s.c.support.DefaultLifecycleProcessor  : Starting beans in phase 0 > 2015-12-24 16:14:53.485  INFO 9852 --- [           main] b.sample.Application                     : Started Application in 3.662 seconds (JVM running for 4.154) > Existing qualified beans ... > qualifiera > - `@org`.springframework.stereotype.Component(value=) > - `@org`.springframework.beans.factory.annotation.Qualifier(value=qualifiera) >   qualifierb > - `@org`.springframework.stereotype.Component(value=) > - `@org`.springframework.beans.factory.annotation.Qualifier(value=qualifierb) >   Existing qualified beans from context ... >   qualifiera > - `@org`.springframework.stereotype.Component(value=) > - `@org`.springframework.beans.factory.annotation.Qualifier(value=qualifiera) >   qualifierb > - `@org`.springframework.stereotype.Component(value=) > - `@org`.springframework.beans.factory.annotation.Qualifier(value=qualifierb) >   Exception in thread ""main"" org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'qualifiera' is defined: No matching QualifiedInterface bean found for qualifier 'qualifiera' - neither qualifier match nor bean name match! >   at org.springframework.beans.factory.annotation.BeanFactoryAnnotationUtils.qualifiedBeanOfType(BeanFactoryAnnotationUtils.java:98) >   at org.springframework.beans.factory.annotation.BeanFactoryAnnotationUtils.qualifiedBeanOfType(BeanFactoryAnnotationUtils.java:55) >   at beanfactoryannotationutils.sample.Application.main(Application.java:45) >   2015-12-24 16:14:53.496  INFO 9852 --- [       Thread-1] s.c.a.AnnotationConfigApplicationContext : Closing org.springframework.context.annotation.AnnotationConfigApplicationContext@5390ecf8: startup date [Thu Dec 24 16:14:50 CET 2015]; root of context hierarchy >   2015-12-24 16:14:53.498  INFO 9852 --- [       Thread-1] o.s.c.support.DefaultLifecycleProcessor  : Stopping beans in phase 0 >   2015-12-24 16:14:53.503  INFO 9852 --- [       Thread-1] o.s.j.e.a.AnnotationMBeanExporter        : Unregistering JMX-exposed beans on shutdown  ---  **Affects:** 4.2.4  **Reference URL:** http://stackoverflow.com/questions/34451782/whats-wrong-within-the-usage-of-beanfactoryannotationutils  **Attachments:** - [BeanFactoryAnnotationUtilsProblem.7z](https://jira.spring.io/secure/attachment/23252/BeanFactoryAnnotationUtilsProblem.7z) (_6.56 MB_)  **Issue Links:** - #11513 Enable Executor qualification with `@Async` - #18032 Support custom qualifier annotations in `@Transactional`  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1d8a3e1f0704ad2c9bd736b57b25316ecf9446b6","closed","type: enhancement,","spring-projects-issues","2015-12-24T15:52:09Z","2019-01-13T05:32:25Z"
"","18068","@RequestBody required parameter is ignored allowing null payloads [SPR-13490]","**[Emanuel Hategan](https://jira.spring.io/secure/ViewProfile.jspa?name=h.emanuel)** opened **[SPR-13490](https://jira.spring.io/browse/SPR-13490?redirect=false)** and commented  When handling a POST request in a `@RestController`, the payload parameter annotated with `@RequestBody` can be null, regardless of the value of the required attribute.  Payload is JSON (content-type header is included) and deserialization is handled by Jackson.  In case it matters, the project is inheriting from spring-boot-starter-parent version 1.2.5.RELEASE.  ---  **Affects:** 4.1.7  **Reference URL:** http://stackoverflow.com/questions/32222099/spring-4-reject-null-requestbody-for-all-endpoints  **Issue Links:** - #17768 Avoid reading (empty) RequestBody for HTTP methods that aren't expected to have a body (_**""duplicates""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/5bf23a09e2e12e83125614d0b33c6c6217b31952, https://github.com/spring-projects/spring-framework-issues/commit/c93c892f95072913df125b5234612f5fae8e86c7, https://github.com/spring-projects/spring-framework-issues/commit/0319caf3d713cbf7c482eb3eb092e491b388dcea","closed","status: duplicate,","spring-projects-issues","2015-09-23T08:41:00Z","2019-01-14T04:41:45Z"
"","18432","SingleConnectionDataSource should provide optoin to not close connection in destroy() [SPR-13859]","**[Eirik Lygre](https://jira.spring.io/secure/ViewProfile.jspa?name=elygre)** opened **[SPR-13859](https://jira.spring.io/browse/SPR-13859?redirect=false)** and commented  The SingleConnectionDataSource unconditionally calls close() on the underlying connection in its destroy() method. This makes it hard to use it inside a transaction. In the example below, the transaction fails with an SQLException during commit(): ""The connection is closed""  ``` new TransactionTemplate(transactionManager).execute((TransactionCallback) status -> {     Connection conn = DataSourceUtils.getConnection(transactionManager.getDataSource());     SingleConnectionDataSource ds = new SingleConnectionDataSource(conn, true);     ds.destroy();     return null; }); ```  The easiest solution is probably to add a setter ""setCloseConnectionOnDestroy(boolean)"", which will then skip the close() call.  A second option which is probably much in the wind at the moment would be to supply a callback:  ``` SingleConnectionDataSource ds = new SingleConnectionDataSource(cscp, true); // void ds.closeConnectionHandler(Consumer closeConnectionHandler) ds.closeConnectionHandler (c -> DataSourceUtils.releaseConnection(c, transactionManager.getDataSource())) ```  Another option would be to promote the CloseSuppressingConnectionProxy (which already lives as a protected method inside SingleConnectionDataSource) to a first level class, so that I could proxy it first:  ``` Connection conn = DataSourceUtils.getConnection(transactionManager.getDataSource()); connection cscp = CloseSuppressingConnectionProxy.create(conn); SingleConnectionDataSource ds = new SingleConnectionDataSource(cscp, true); ```  And, of course, the issue could be pushed down to DataSourceUtils, which could return a Connection proxy that turns connection.close() into DataSourceUtils.releaseConnection(...), which provides very nice symmetry with the way e.g. connection pooled DataSources work:  ``` // What a crappy method name Connection conn = DataSourceUtils.getOnCloseReleasingConnection (ds) conn.close(); // Proxy makes this equivalent of DSU.releaseConnection (conn, ds); ```  The first two are most ""obvious"", and solve the problem locally. However, they require that you know exactly where the connection comes from, and how it should be closed.  The CloseSuppressingConnectionProxy has usage also outside of this particular issue.  The DSU.getOnCloseReleasingConnection() provides symmetry with the way connection pools work: You ask for a connection, but the connection you get is one that has a magic close() method that ""does the right thing"". It also lets all code work on connections the way they (more or less) expect: call close() when you're done, good things will happen.   ---  **Affects:** 4.2.2","closed","status: bulk-closed,","spring-projects-issues","2016-01-11T19:48:54Z","2019-01-12T02:44:25Z"
"","18494","Spring fails to find bean's destroy method in case there is a bridge method [SPR-13922]","**[Eduard Valiauka](https://jira.spring.io/secure/ViewProfile.jspa?name=evaliauka)** opened **[SPR-13922](https://jira.spring.io/browse/SPR-13922?redirect=false)** and commented  I have the following classes (in a 3rd-party library):  ``` public abstract class MyAbstractClass {     public abstract MyAbstractClass shutdown(); }   public class MyImplementation extends MyAbstractClass {          @Override     public MyImplementation shutdown() {         //doing smth here     } } ```  When I define a `MyImplementation` bean, I want to use `shutdown` as a destroyMethod and get the following exception:  ``` Caused by: org.springframework.beans.factory.support.BeanDefinitionValidationException: Couldn't find a unique destroy method on bean with name 'someName: Cannot resolve method 'shutdown' to a unique method. Attempted to resolve to overloaded method with the least number of parameters, but there were 2 candidates. 	at org.springframework.beans.factory.support.DisposableBeanAdapter.determineDestroyMethod(DisposableBeanAdapter.java:304) ~[spring-beans-4.2.4.RELEASE.jar:4.2.4.RELEASE] 	at org.springframework.beans.factory.support.DisposableBeanAdapter.(DisposableBeanAdapter.java:123) ~[spring-beans-4.2.4.RELEASE.jar:4.2.4.RELEASE] 	at org.springframework.beans.factory.support.AbstractBeanFactory.registerDisposableBeanIfNecessary(AbstractBeanFactory.java:1635) ~[spring-beans-4.2.4.RELEASE.jar:4.2.4.RELEASE] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:586) ~[spring-beans-4.2.4.RELEASE.jar:4.2.4.RELEASE] 	... 42 common frames omitted  ```  The thing is that in fact `MyImplementation.class.getMethods()` contains 2 `shutdown` methods. One of them is a real one, another is just a bridge method and can be easily filtered out. In any case this error message looks very strange.  ---  **Affects:** 4.2.4  **Issue Links:** - #17613 Destroy callback cannot be disabled for AutoCloseable beans","closed","type: bug,","spring-projects-issues","2016-02-05T15:50:16Z","2019-01-11T19:07:48Z"
"","18534","TestContextManager.afterTestMethod doesn't handle java.lang.Error! [SPR-13961]","**[Eduard V](https://jira.spring.io/secure/ViewProfile.jspa?name=evys42)** opened **[SPR-13961](https://jira.spring.io/browse/SPR-13961?redirect=false)** and commented  In a org.springframework.test.context.TestContextManager.afterTestMethod(...) CALL to the configured test execution listeners is, naturally, surrounded by try/catch block that intercepts java.lang.Exception.  Unfortunately, when the listener throws a java.lang.Error instead, it escapes into surrounding org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate() method, preventing  the ""downstream"" listeners from being executed.  In my case, an offender was the org.dbunit.Assertion.assertEquals(...) methods, which throws java.lang.Error instead of promised org.dbunit.DatabaseUnitException when the assertion fails.  As a result: * org.springframework.test.context.transaction.TransactionalTestExecutionListener.afterTestMethod(...) is never called; * transaction is not committed/rolled back; * database connection stays open and is not released back to the pool; * subsequent test has a good chance to get stuck waiting for the DB lock.  Note: I am not sure how to categorize this issue, as a bug or as an improvement. On the one hand, not catching Errors seems to be a correct behavior, as an Error is supposedly a catastrophic and unrecoverable event. On the other hand, we get a bunch of stuck unit tests and leaked connections, all blocking each other which is not correct, desirable or ideal either.  ---  **Affects:** 4.2.4  **Issue Links:** - #19017 Regression: TestContextManager no longer tracks after-class exception with log level lower than WARN  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0adc4921ed4eadba531f12fdaa5faaf36265029b","closed","type: enhancement,","spring-projects-issues","2016-02-18T19:14:33Z","2019-01-11T19:04:18Z"
"","18037","Support selection of specific marshaller based on bound class [SPR-13457]","**[Dmitry Katsubo](https://jira.spring.io/secure/ViewProfile.jspa?name=dma_k)** opened **[SPR-13457](https://jira.spring.io/browse/SPR-13457?redirect=false)** and commented  I think someone can benefit from the following improvement. I would like to configure JAXB marshallers based on bound classes like that:  ```  	 		 			 				 					 						 							 								""> 								 							 						 						 							 								org.mycompany.statistics.model.JobStatistics 							 						 					 					 						 							 								""> 								 							 						 						 							 								org.mycompany.statistics.model.PerformanceStatistics 							 						 					 				 			 		 	  ```  The best is that `MarshallingHttpMessageConverter` supports multiple marshallers/unmarshallers, but it could be a separate class (see [^CompoundMarshallingHttpMessageConverter.java]) that supports that.  P.S. I have expressed this idea in #15096, but decided to formulate it as a separate issue.  ---  **Affects:** 4.1.7  **Attachments:** - [CompoundMarshallingHttpMessageConverter.java](https://jira.spring.io/secure/attachment/23106/CompoundMarshallingHttpMessageConverter.java) (_1.86 kB_)  **Issue Links:** - #16357 Jaxb2Marshaller support unmarshalling by type","open","type: enhancement,","spring-projects-issues","2015-09-10T08:19:37Z","2019-01-11T17:23:40Z"
"","18325","MockHttpServletResponse.setIntHeader throws exception for 'Content-Length' header [SPR-13752]","**[Dmitry Bedrin](https://jira.spring.io/secure/ViewProfile.jspa?name=bedrin)** opened **[SPR-13752](https://jira.spring.io/browse/SPR-13752?redirect=false)** and commented  MockHttpServletResponse.setIntHeader(""Content-Length"", 42) throws an Exception due to a bug in following code:  ```java private boolean setSpecialHeader(String name, Object value) {      if (CONTENT_TYPE_HEADER.equalsIgnoreCase(name)) {           setContentType((String) value);           return true;      }      else if (CONTENT_LENGTH_HEADER.equalsIgnoreCase(name)) {           setContentLength(Integer.parseInt((String) value));           return true;      }      else {           return false;      } } ```  ---  **Affects:** 4.1.8, 4.2.3  **Issue Links:** - #18588 MockHttpServletResponse setIntHeader throws Exception when passed an int value for 'Content-length' (_**""is duplicated by""**_)  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/929, and commits https://github.com/spring-projects/spring-framework/commit/a4f5c46fedcda4ee7d47a99ff222fc8c0743d7b3, https://github.com/spring-projects/spring-framework/commit/79ded1ca72b22eaecb9dc3830209ddeb97dec2d7  **Backported to:** [4.1.9](https://github.com/spring-projects/spring-framework/milestone/133?closed=1)","closed","type: bug,","spring-projects-issues","2015-12-02T05:48:49Z","2019-01-11T19:30:09Z"
"","18723","AnnotationAttributes.getAnnotationArray(attributeName, annotationType) doesn't work with AnnotationMetadata [SPR-14151]","**[Dmitriy Kosolobov](https://jira.spring.io/secure/ViewProfile.jspa?name=saltoftheflame)** opened **[SPR-14151](https://jira.spring.io/browse/SPR-14151?redirect=false)** and commented  `AnnotationAttributes.getAnnotationArray(String, Class)` doesn't work.  Example:  ```java public void setImportMetadata(AnnotationMetadata importMetadata) {     Map enableAttrMap = importMetadata             .getAnnotationAttributes(MyAnnot.class.getName());     AnnotationAttributes enableAttrs = AnnotationAttributes.fromMap(enableAttrMap);     MyAnnot.Def[] beanMappingArr = enableAttrs.getAnnotationArray(""value"", MyAnnot.Def.class);     // ... } ```  ```java @Target(ElementType.TYPE) @Retention(RetentionPolicy.RUNTIME) @Inherited public @interface MyAnnot {      Def[] value();      public @interface Def {        // ...    } } ```    ---  **Affects:** 4.2.5","closed","in: core,","spring-projects-issues","2016-04-12T08:09:21Z","2019-01-12T16:22:06Z"
"","18807","DefaultLifecycleProcessor hangs on shutdown when stopping with internalJmsListenerEndpointRegistry [SPR-14233]","**[Dirk](https://jira.spring.io/secure/ViewProfile.jspa?name=h3rmanns)** opened **[SPR-14233](https://jira.spring.io/browse/SPR-14233?redirect=false)** and commented  We are having the following configuration:  - 2 JMSListener - XA Transactions with Atomikos or Bitronix - Spring Boot 1.3.3  The application runs fine but after shutdown, the DefaultLifecycleProcessor is waiting 30 seconds and then prints:  ```java 43621 [Thread-7] WARN  org.springframework.context.support.DefaultLifecycleProcessor  - Failed to shut down 1 bean with phase value 2147483647 within timeout of 30000: [org.springframework.jms.config.internalJmsListenerEndpointRegistry] ```  This happens only, if one of the JMSListener gets stopped before by doing:  ```java JmsListenerEndpointRegistry registry = context.getBean(JmsListenerEndpointRegistry.class); registry.getListenerContainer(""MyListener1"").stop(); ```  If I comment one listener out, or keep both JMSListener running - the timeout does not happen and the application shuts down immediately.  The app hangs even if no work has been processed. I reduced the JMSListener to contain no own business logic at all:  ```java public class MyListener {  	// Die ID wird benoetigt, damit der Listener programmatisch gestoppt werden kann 	protected static final String ID = ""MyListener1"";  	@JmsListener(id = ID, destination=""MYQUEUE"") 	public void receiveMessage(Message msg) { 		System.out.println(""Hello!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!""); 	} } ```  The problem arises both with Atomikos and Bitronix.  So to me, it looks like you need to have 2 JMSListeners and need to stop one of them to reproduce this problem.  Any help would be appreciated.   ---  **Affects:** 4.2.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/85675fbe2e8c3418d3f8eb6124a13fbdfb9553a2, https://github.com/spring-projects/spring-framework/commit/85faeef8168baa62beb471be8add5ec539de22f5, https://github.com/spring-projects/spring-framework/commit/09b45d2c0feee9ebdc7c03e3768cf834bf81a195, https://github.com/spring-projects/spring-framework/commit/e45d33f9de595d7348f3b4695960cb26bd9255c0, https://github.com/spring-projects/spring-framework/commit/f83cbff543b3519c9288c1eee0ed3ae7e4c749d2","closed","type: bug,","spring-projects-issues","2016-04-29T10:01:03Z","2016-05-03T08:04:45Z"
"","18326","Documentation is missing for sendTimeLimit bufferSizeLimit for ConcurrentWebSocketSessionDecorator [SPR-13753]","**[Devender Singh Garha](https://jira.spring.io/secure/ViewProfile.jspa?name=rocky1208)** opened **[SPR-13753](https://jira.spring.io/browse/SPR-13753?redirect=false)** and commented  Documentation is missing for the significance of below two fields in the constructor of ConcurrentWebSocketSessionDecorator also metric for int sendTimeLimit, int bufferSizeLimit -will it be sec/kb, min/mb.   ---  **Affects:** 4.1.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b3eefa2ae065ec4a5455967cdc1d9aae31a1534b, https://github.com/spring-projects/spring-framework/commit/747863d5035419b710f797cca00efd8a837f076b  **Backported to:** [4.1.9](https://github.com/spring-projects/spring-framework/milestone/133?closed=1)","closed","type: documentation,","spring-projects-issues","2015-12-02T09:23:37Z","2015-12-17T09:05:31Z"
"","18639","Wrong RFC reference in Base64Utils documentation [SPR-14067]","**[David Yang](https://jira.spring.io/secure/ViewProfile.jspa?name=davidyang@email.com)** opened **[SPR-14067](https://jira.spring.io/browse/SPR-14067?redirect=false)** and commented  Base64Utils.encodeToUrlSafeString and decodeFromUrlSafeString refer to RFC 4868 ""URL and Filename Safe Alphabet"".  The correct RFC number is 4648, not 4868:  https://tools.ietf.org/html/rfc4648   ---  **Affects:** 4.2.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ec7c3aa349f1f25cc98ad516d84d07c7ea525983, https://github.com/spring-projects/spring-framework/commit/fcd155a92c78b4209c2b0a1f3fab18134206b8de","closed","type: documentation,","spring-projects-issues","2016-03-17T18:17:07Z","2016-04-06T08:38:14Z"
"","18653","Make custom RequestCondition implementations more convenient to plug-in [SPR-14081]","**[David Pozsar](https://jira.spring.io/secure/ViewProfile.jspa?name=pozs)** opened **[SPR-14081](https://jira.spring.io/browse/SPR-14081?redirect=false)** and commented  Currently, there is no easy way to use a sub-classed `RequestMappingHandlerMapping` with xml configurations (which use ``). There is a `WebMvcConfigurationSupport.createRequestMappingHandlerMapping()` helper method for class-based configurations for this purpose.  Also, it would be nice, if there were some functionality to plug-in some (let's say) `CustomRequestConditionFactory` instances into `RequestMappingHandlerMapping`, which could create `RequestCondition` instances from custom annotations (and `RequestMappingHandlerMapping` could wrap them in the already existing `CompositeRequestCondition`).   ---  **Affects:** 4.2.5","closed","type: enhancement,","spring-projects-issues","2016-03-23T10:12:33Z","2016-03-23T13:21:06Z"
"","18669","getBeanNamesForType(ResolvableType) does not reliably work for beans with AOP proxies [SPR-14097]","**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=david@davidkarlsen.com)** opened **[SPR-14097](https://jira.spring.io/browse/SPR-14097?redirect=false)** and commented  Relates to #16761  When beans are instrumented with interceptors it doesn't resolve them properly. E.g. this returns me 0 candidates:  ```java ResolvableType resolvableType = ResolvableType.forClassWithGenerics( StgBusinessService.class, function.getClass() ); ```  while this works  ```java private  StgBusinessService findBusinessService( T t ) {         Map services = applicationContext.getBeansOfType( StgBusinessService.class );         ParameterizedType parameterizedType = TypeUtils.parameterize( StgBusinessService.class, function.getClass() );          return services             .values()             .stream()             .filter( service -> ArrayUtils.contains( AopUtils.getTargetClass( service ).getGenericInterfaces(), parameterizedType ) )             .findFirst()             .orElseThrow( () -> new IllegalStateException( ""No handler for function type: "" + function ) ); } ```  The 1st variant passes in my simple unit-test where there are no application of AOP, while it doesn't when loading the full-blown application which adds AOP.  ---  **Affects:** 4.2.5  **Issue Links:** - #16761 Add generics / parameterized type support to ListableBeanFactory getBeanNamesForType/getBeansOfType methods - #22056 getBeanNamesForType(ResolvableType) doesn't work for raw singleton instance from `@Bean` method with generic return type - #18690 ListableBeanFactory#getBeanNamesForType(ResolvableType) fails to return generic `@Bean` methods - #19578 getBeanNamesForType(ResolvableType) doesn't match generic factory method return type for yet-to-be-created bean  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f805427629ff00eddf511fe3356b515174f2fb17, https://github.com/spring-projects/spring-framework/commit/9a39a25bb5908309c7f1943da4009e09fa85fd89, https://github.com/spring-projects/spring-framework/commit/3b7ca7e76ace27aeab7530e19102f984b2d33d36, https://github.com/spring-projects/spring-framework/commit/edea66a9675581ecb8c341f64f5b5040c63dd07d","closed","type: enhancement,","spring-projects-issues","2016-03-30T12:10:30Z","2019-01-13T05:27:17Z"
"","18297","Transaction synchronization hook - beforeCreatePhase [SPR-13724]","**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=david@davidkarlsen.com)** opened **[SPR-13724](https://jira.spring.io/browse/SPR-13724?redirect=false)** and commented  Looking at  http://docs.spring.io/autorepo/docs/spring/3.2.5.RELEASE/javadoc-api/org/springframework/transaction/support/TransactionSynchronization.html  and https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/event/TransactionalEventListener.html / https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/event/TransactionPhase.html  it would be nice to have a new phase BEFORE_CREATE - emitted by the framework just before it calls the underlying resource to create a new transaction.  The reason for this is that we need to initialize https://www-01.ibm.com/support/knowledgecenter/SSTVLU_8.6.0/com.ibm.websphere.extremescale.javadoc.doc/topics/com/ibm/websphere/objectgrid/spring/SpringLocalTxManager.html with an ObjectGrid instance (kept threadlocal inside that implementation) just before it will be called by spring to get one.  We do this today by composing a custom annotation (annotated again with `@Transactional`) and intercepting execution with an aspect - but it would be nice to put it directly into framework classes - and I guess it could be interesting for other usecases as well.  ---  **Issue Links:** - #16214 TransactionSynchronizationManager - throw an Exception or log a warning if a Synchronization wants to add a Synchronization and afterCompletion is already called  1 votes, 3 watchers","open","type: enhancement,","spring-projects-issues","2015-11-25T19:15:42Z","2021-11-24T20:05:52Z"
"","18114","Spring incorrectly interprets a bean to be a spring eventlistener [SPR-13538]","**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=david@davidkarlsen.com)** opened **[SPR-13538](https://jira.spring.io/browse/SPR-13538?redirect=false)** and commented  We have a bean implementing these WebSphere Object Grid interfaces:  - [ObjectGridEventListener](http://www-01.ibm.com/support/knowledgecenter/SSTVLU_8.6.0/com.ibm.websphere.extremescale.javadoc.doc/topics/com/ibm/websphere/objectgrid/plugins/ObjectGridEventListener.html) - [ObjectGridEventGroup.TransactionEvents](http://www-01.ibm.com/support/knowledgecenter/SSTVLU_8.6.0/com.ibm.websphere.extremescale.javadoc.doc/topics/com/ibm/websphere/objectgrid/plugins/ObjectGridEventGroup.TransactionEvents.html) - [ObjectGridEventGroup.ShardLifecycle](http://www-01.ibm.com/support/knowledgecenter/SSTVLU_8.6.0/com.ibm.websphere.extremescale.javadoc.doc/topics/com/ibm/websphere/objectgrid/plugins/ObjectGridEventGroup.ShardLifecycle.html)  The bean is not an `@EventListener` or any event-driven component from spring; the only annotations used are:  ```java @Component @Scope( ""shard"" ) @Transactional( TransactionManagers.JMS ) @PluginOutputFormat( keyFormat = OutputFormat.NATIVE, valueFormat = OutputFormat.NATIVE ) public class ObjectGridTransactionEventListener ```  When upgrading from spring 4.1.x to 4.2.1 we get this initialization error:  ``` Caused by: org.springframework.beans.factory.BeanInitializationException: Failed to process @EventListener annotation on bean with name 'objectGridTransactionEventListener'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'objectGridTransactionEventListener': Scope 'shard' is not active for the current thread; consider defining a scoped proxy for this bean if you intend to refer to it from a singleton; nested exception is java.lang.IllegalStateException: Cannot find a shard scoped object for service objectGridTransactionEventListener         at org.springframework.context.event.EventListenerMethodProcessor.afterSingletonsInstantiated(EventListenerMethodProcessor.java:95)         at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:792)         at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:834)         at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:537)         at org.springframework.test.context.web.AbstractGenericWebContextLoader.loadContext(AbstractGenericWebContextLoader.java:133)         at org.springframework.test.context.web.AbstractGenericWebContextLoader.loadContext(AbstractGenericWebContextLoader.java:60)         at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.delegateLoading(AbstractDelegatingSmartContextLoader.java:109)         at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.loadContext(AbstractDelegatingSmartContextLoader.java:261)         at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:98)         at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:116)         at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:83)         at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:183)         at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:123)         at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:228)         at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:217)         at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:276)         at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)         at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:278)         at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:236)         at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:87)         at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)         at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)         at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)         at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)         at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)         at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)         at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)         at org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:48)         at org.junit.rules.RunRules.evaluate(RunRules.java:20)         at org.junit.runners.ParentRunner.run(ParentRunner.java:363)         at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:180)         at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:283)         at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:173)         at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153)         at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:128)         at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)         at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)         at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)  ```  ---  **Affects:** 4.2 GA, 4.2.1  **Issue Links:** - #18103 EventListenerMethodProcessor unconditionally instantiates certain beans, leading to BeanCreationException during deployment - #18116 OutOfMemory Exception when publishing User Events - #18226 `@EventListener` does not work if put it at method in class that implements interface  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/dbec2121a05f4e5ad3f3dc1e3f5fe82f495fed3f","closed","in: core,","spring-projects-issues","2015-10-05T06:46:24Z","2019-01-13T05:35:18Z"
"","18242","AbstractApplicationContext.isRunning throws IllegalStateException when called too early [SPR-13667]","**[David Hay](https://jira.spring.io/secure/ViewProfile.jspa?name=dhay)** opened **[SPR-13667](https://jira.spring.io/browse/SPR-13667?redirect=false)** and commented  AbstractApplicationContext's implementation of isRunning() looks like this:  ``` public boolean isRunning() {      return this.getLifecycleProcessor().isRunning(); } ```  If this method is called before the lifecycle processor has been initialized, an IllegalStateException is thrown.  It seems like the correct behavior here would be to return ""false"" if the lifecycle processor hasn't been initialized.  If the lifecycle processor is uninitialized, the answer to the question ""are you running"" is ""no"", not ""illegal state"".   ---  **Affects:** 3.2.15, 4.1.7  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/03585f2e4e3b9e886c7c0e0a684e083ad8a032c9, https://github.com/spring-projects/spring-framework/commit/5d6aab34cbe3c4db38dd1698e246967716befcfd, https://github.com/spring-projects/spring-framework/commit/e56c11c1e82d5d0fd5fcd47c09a8b62b3e0367a2  **Backported to:** [4.1.9](https://github.com/spring-projects/spring-framework/milestone/133?closed=1), [3.2.16](https://github.com/spring-projects/spring-framework/milestone/104?closed=1)","closed","in: core,","spring-projects-issues","2015-11-10T21:10:33Z","2015-12-15T15:44:22Z"
"","18455","Support default URI prefix for web service @RequestMapping [SPR-13882]","**[David Cole](https://jira.spring.io/secure/ViewProfile.jspa?name=lewisdavidcole)** opened **[SPR-13882](https://jira.spring.io/browse/SPR-13882?redirect=false)** and commented  I had opened a ticket in Spring-Boot on this topic and it was suggested I create one on the Spring JIRA I have added the original ticket as the Reference URL.  There doesn't seem to be anyway, short of explicitly prefixing each individual `@RequestMapping` with a default URI like  ```java @RequestMapping(path=""*/api/*controller1"") ```  at the top of the `@RestController` class, where **/api** is the default. I'm trying to have a clear separation in URL paths between normal application requests and web service requests, allowing me to provide additional security specific to web services.  I have an ongoing StackOverflow post, with no meaningful solution to-date and would like to suggest an enhancement to allow a default URI prefix to be supported somewhere in the Spring Boot application.properties configuration.  http://stackoverflow.com/questions/34801351/how-to-configure-a-default-restcontroller-uri-prefix-for-all-controllers  The result would be, using the example above, that my request mapping would be defined as:  ```java @RequestMapping(path=""controller1"")  ```  The resulting URL would resolve to:  ``` //api/controller1 ```  I was hoping for more of a 'building block' approach, like:  ```java @RequestMapping(path=""/api"") class BaseController{     .... }  @RequestMapping(path=""sub-class1"") class SubClassedController1 extends BaseController{    @RequestMapping(path=""get-something"")     public void getSomething(){        ...     } }  @RequestMapping(path=""sub-class2"") class SubClassedController2 extends BaseController{    @RequestMapping(path=""get-something"")     public void getSomething(){        ...     } } ```  Resulting in  ``` /api/sub-class1/get-something ```  and  ``` /api/sub-class2/get-something ```  ---  **Affects:** 4.2.3, 5.0.1  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/4994  **Issue Links:** - #20883 Ability to provide an external base path for controllers (_**""is superseded by""**_)  6 votes, 12 watchers","closed","type: enhancement,","spring-projects-issues","2016-01-22T15:37:20Z","2019-01-13T20:42:37Z"
"","18222","Behavior change to Content-Disposition on @RequestMapping endpoint [SPR-13645]","**[David Cole](https://jira.spring.io/secure/ViewProfile.jspa?name=lewisdavidcole)** opened **[SPR-13645](https://jira.spring.io/browse/SPR-13645?redirect=false)** and commented  Prior to 4.2.2, the following code snippet (Groovy) would derive the file name (I believe from the `@RequestMapping` value) and set the Content-Disposition response header automatically:  ```java     @RequestMapping(value = ""{path}/{fileName}.jnlp"", method = RequestMethod.GET, produces = ""application/x-java-jnlp-file"")     String getJnlpFile(@PathVariable String path, @PathVariable String fileName) {         //Get the resource content as text         fileName += "".jnlp""         def filePath = path + ""/"" + fileName         Resource jnlp = getResourceContent(filePath)         InputStream is = jnlp.inputStream         String text = is.text         is.close()          //Return results after variable replacement         jnlpSubstitution(path, fileName, text)     } ```  Header set in response: Content-Disposition: attachment;filename=Application.jnlp  After upgrading to 4.2.2 the value of the Content-Disposition header changed to: Content-Disposition: attachment;filename=f.txt  I was able make a code change to achieve the same result, but the behavior change has forced me to add additional code to set the HttpHeaders and return a ResponseEntity instead of simple text:  ```java     @RequestMapping(value = ""{path}/{fileName}.jnlp"", method = RequestMethod.GET, produces = ""application/x-java-jnlp-file"")     def getJnlpFile(@PathVariable String path, @PathVariable String fileName) {         //Get the resource content as text         fileName += "".jnlp""         HttpHeaders headers = new HttpHeaders()         headers.set(""Content-Disposition"", ""attachment;filename=$fileName"")          def filePath = path + ""/"" + fileName         Resource jnlp = getResourceContent(filePath)         InputStream is = jnlp.inputStream         String text = is.text         is.close()          //Return results after variable replacement         text = jnlpSubstitution(path, fileName, text)         new ResponseEntity(text, headers, HttpStatus.OK)     } ```  This seems like a degradation of the behavior to me. Can anyone identify this as a defect, or give instruction on an alternate, cleaner way to achieve the same result?  ---  **Affects:** 4.2.2  **Issue Links:** - #18207 Content-Disposition added for `@ResponseBody` methods explicitly mapped to "".html"" or other extensions (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2015-11-05T23:18:21Z","2019-01-13T05:34:38Z"
"","18766","Wildcard mapping for path segments at the end of a @RequestMapping [SPR-14193]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-14193](https://jira.spring.io/browse/SPR-14193?redirect=false)** and commented  This was already marked as Won't Fix: #18604. But it seems quite reasonable to me, and I know I have needed it a few times and hated the solution (parsing HttpServletRequest manually). Using the HttpServletRequest is even less appealing now I know that Spring 5 will allow my controller run in other containers, as long as I don't use the request.  ---  **Affects:** 4.2.5  **Issue Links:** - #18604 Ability to assign wildcard path to PathVariable - #19112 HTTP request pattern matching refinements (_**""is superseded by""**_)","closed","type: enhancement,","spring-projects-issues","2016-04-19T16:17:00Z","2019-01-14T04:39:40Z"
"","18689","Scoped proxies are fragile with respect to serialization [SPR-14117]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-14117](https://jira.spring.io/browse/SPR-14117?redirect=false)** and commented  A scoped proxy (e.g. in `@Scope(""session"")` with `@Lazy`) carries a reference to a ""serialization id"" for the `BeanFactory`. This is in case, when it is deserialized, it needs to inject a dependency from the Spring context. As such, that can be quite useful, but it is also brittle, and not always necessary, since not all beans have dependencies to re-inject, and sometimes you want to share an instance between two contexts that don't naturally have the same serialization id.  There's quite a bit of discussion in one or two github issues related to Spring Cloud, Spring Boot and Spring OAuth2 (e.g. https://github.com/spring-projects/spring-security-oauth/issues/705).  In the OAuth2 case we are only using `@Scope(""session"")` to keep the state segregated between concurrent users, and the data held in those beans is naturally serializable without any reference to the `BeanFactory`. I imagine this could be quite common, and I would like a way to annotate (or have Spring detect) that this is the case, so that the serialized form of the object does not contain a `BeanFactory` reference if it is not going to be needed.  ---  **Reference URL:** https://github.com/spring-projects/spring-security-oauth/issues/705  **Issue Links:** - #20321 ClassCastException during deserialization of ScopedObject  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4024b2fd4bde02716cd51ab34c145ca7bfcd499f","closed","type: enhancement,","spring-projects-issues","2016-04-05T10:51:34Z","2019-01-11T16:41:47Z"
"","18502","ThreadPoolTaskExecutor does not allow for decorating Runnables [SPR-13930]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-13930](https://jira.spring.io/browse/SPR-13930?redirect=false)** and commented  The fact that `ThreadPoolTaskExecutor.initializeExecutor()` is protected makes it a public extension point, and it returns an `Executor`, so you might expect that overriding it will result in the return value being used at run time. In fact it is not because the `ThreadPoolTaskExecutor` does (though its parent class) set a field called ""executor"" but then never uses it, preferring instead to use its own more specialized `ThreadPoolExecutor`.   ---  **Affects:** 4.2.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/25be5e060c26ad67d023620d3776c5d35e2d3b91","closed","type: enhancement,","spring-projects-issues","2016-02-08T17:46:21Z","2018-05-16T07:42:43Z"
"","18364","Defensive error reporting when ConfigurationClassParser introspects declared methods via StandardAnnotationMetadata [SPR-13791]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-13791](https://jira.spring.io/browse/SPR-13791?redirect=false)** and commented  When there is a class missing from the classpath that is needed by some annotation metadata, the app blows up deep in the java.lang.Class. The exception is hard to interpret for Spring users because there is no indication what it was trying to do when it failed. Example:  ``` java.lang.reflect.InvocationTargetException 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:497) 	at org.springframework.boot.maven.AbstractRunMojo$LaunchRunner.run(AbstractRunMojo.java:467) 	at java.lang.Thread.run(Thread.java:745) Caused by: java.lang.NoClassDefFoundError: org/apache/thrift/TException 	at java.lang.Class.getDeclaredMethods0(Native Method) 	at java.lang.Class.privateGetDeclaredMethods(Class.java:2701) 	at java.lang.Class.getDeclaredMethods(Class.java:1975) 	at org.springframework.core.type.StandardAnnotationMetadata.getAnnotatedMethods(StandardAnnotationMetadata.java:146) 	at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:291) 	at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:231) ... ```  where it is clear that the classpath is missing something, but not why, because Spring never tells us what it was doing, so we never find out what class it was trying to introspect (probably some autconfig from Spring Boot in this case, but it's hard to say). Maybe ConfigurationClassParser or StandardAnnotationMetadata could catch the exception and rethrow with a message that indicates what they were doing at the time?  ---  **Affects:** 4.1.8, 4.2.3  **Issue Links:** - #16930 AnnotationUtils provides poor diagnostics if getDeclaredAnnotations throws an exception - #17487 AnnotatedElementUtils should leniently ignore TypeNotPresentExceptions (just like AnnotationUtils)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a36c0a50e674de0c3c00d89efd26b4b55829231f, https://github.com/spring-projects/spring-framework/commit/bc492b9251dd41d0e568d72454de8de74260f083  **Backported to:** [4.1.9](https://github.com/spring-projects/spring-framework/milestone/133?closed=1)","closed","type: enhancement,","spring-projects-issues","2015-12-14T13:17:46Z","2019-01-11T19:26:43Z"
"","18357","ReflectionUtils cache uses up a fairly big chunk of heap even [SPR-13783]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-13783](https://jira.spring.io/browse/SPR-13783?redirect=false)** and commented  I noticed in a memory constrained application (simple Spring Boot app with -Xmx32m) I was seeing a lot of ReflectionUtils in the YourKit ""biggest objects"" list, and drilling down into it reveals a couple of references to caches. They look like they are designed to be garbage collected, but apparently they are not. The app was sitting happily at 23MB heap, but I wanted to see if I could do better, so I added reflective hack calls to clear the two caches in ReflectionUtils and miraculously the heap shrank (after GC) down to about 14MB, and was stable from there even nuder load. I feel maybe this merits clearing the cache at least optionally in the startup phase of an app, either in Spring or in Boot (where we could make it optional for low memory apps).  ---  **Affects:** 4.2.3  **Issue Links:** - #16501 ReflectionUtils slow down application startup on WebSphere - #17419 Make ReflectionUtils.doWithMethods work on Java 8 default interface methods - #17684 Reduce memory consumption for caches","closed","type: enhancement,","spring-projects-issues","2015-12-09T16:39:22Z","2019-01-11T19:27:42Z"
"","18220","Content-Disposition with fixed file name ""f.txt"" causes confusion [SPR-13643]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-13643](https://jira.spring.io/browse/SPR-13643?redirect=false)** and commented  ``` $ curl -v localhost:8888/foo/bar/master/application.yml * Hostname was NOT found in DNS cache *   Trying 127.0.0.1... * Connected to localhost (127.0.0.1) port 8888 (#0) > GET /foo/bar/master/application.yml HTTP/1.1 > User-Agent: curl/7.35.0 > Host: localhost:8888 > Accept: */* >  < HTTP/1.1 200 OK * Server Apache-Coyote/1.1 is not blacklisted < Server: Apache-Coyote/1.1 < X-Application-Context: configserver:8888 < Content-Disposition: attachment;filename=f.txt < Content-Type: text/plain;charset=UTF-8 < Content-Length: 120 < Date: Wed, 04 Nov 2015 14:48:09 GMT <  ... ```  Users expect the filename would be ""application.yml"". It looks weird in the browser when you get a download of a file that has the wrong name.  Here's the endpoint:  ``` @RequestMapping(""/{name}/{profile}/{label}/{path:.*}"") ```  From https://github.com/spring-cloud/spring-cloud-config/blob/c0ddcd8/spring-cloud-config-server/src/main/java/org/springframework/cloud/config/server/resource/ResourceController.java#L63  ---  **Affects:** 4.1.8, 4.2.2  **Issue Links:** - #18124 Protect against RFD exploits - #18164 Content-Disposition header causes download in browser for Spring Boot Actuator endpoints  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a3168fde18f34489bcbb497f3accc4c930fdb098, https://github.com/spring-projects/spring-framework/commit/92ca537d6147eceedb39ee389ae9eac9c3d5a955, https://github.com/spring-projects/spring-framework/commit/1489e29d0c0d91da194721eb47f415118b00b532, https://github.com/spring-projects/spring-framework/commit/3a919a48d6941622ae1b08034630b0f565d0554b, https://github.com/spring-projects/spring-framework/commit/f0464e81761d2631902d512d67016967b9cd316a, https://github.com/spring-projects/spring-framework/commit/f5f57e95441166b82241f755b09a58743fe429f8, https://github.com/spring-projects/spring-framework/commit/71a9eb7102f3a9fbdbcfa0b449c9ddc149652e6d  **Backported to:** [4.1.9](https://github.com/spring-projects/spring-framework/milestone/133?closed=1), [3.2.16](https://github.com/spring-projects/spring-framework/milestone/104?closed=1)  0 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2015-11-04T14:54:30Z","2019-01-11T19:15:47Z"
"","18130","@AliasFor is needed on all attributes (even if they have the same name as the ""parent"") [SPR-13554]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-13554](https://jira.spring.io/browse/SPR-13554?redirect=false)** and commented  From a comment in #18028. ""The custom annotation has to use `@AliasFor` on all its inherited attributes for this to work."" (And Sam said: ""Are you saying that convention-based attribute overrides do not work? If so, then that's a bug, and please report it."")  ---  **Affects:** 4.2.1  **Issue Links:** - #18028 Provide a mechanism for composed annotations to signal that they want to override attributes  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6826bdd1114a2cef72f8624ceba525639a9fbe14, https://github.com/spring-projects/spring-framework/commit/5e1d6e47a9220cf68a6ce2f948692f280510103a","closed","in: core,","spring-projects-issues","2015-10-08T19:28:44Z","2019-01-12T16:22:47Z"
"","18028","Provide a mechanism for composed annotations to signal that they want to override attributes [SPR-13448]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-13448](https://jira.spring.io/browse/SPR-13448?redirect=false)** and commented  `AnnotatedElementUtils` is now available for processing merged (overridden) attributes from meta-annotated custom annotations, but Spring doesn't use it uniformly (because of performance concerns). The one that bit me was an `ImportBeanDefinitionRegistrar` where the annotation was a custom one and the `AnnotationMetadata` that is passed in does **not** contain the overridden/inherited values.  The reason, it turns out, is that `StandardAnnotationMetadata`, while it uses `AnnotatedElementUtils`, explicitly chooses _not_ to get the overridden attributes by invoking `getAllAnnotationAttributes()` instead of `getMergedAnnotationAttributes()` (and this is all that is directly available to the `ImportBeanDefinitionRegistrar`).  Maybe there's a way to address the performance concerns and use the deeper `AnnotatedElementUtils.getMergedAnnotationAttributes()` utility method(s) _only_ if the user signals that the annotation needs to be processed this way -- for example, by introducing an annotation such as `@Mergeable` (or an explicit `@AliasFor` on the attribute).  See also: #18020  ---  **Affects:** 4.2 GA  **Issue Links:** - #18020 Use AnnotatedElementUtils instead of AnnotationUtils wherever feasible - #18130 `@AliasFor` is needed on all attributes (even if they have the same name as the ""parent"") - #18021 Support `@ResponseStatus` as a merged composed annotation  0 votes, 6 watchers","closed","status: bulk-closed,","spring-projects-issues","2015-09-09T08:40:05Z","2019-01-13T05:35:41Z"
"","18378","DefaultCorsProcessor always sets Vary: Origin response header [SPR-13805]","**[Daniel Robert](https://jira.spring.io/secure/ViewProfile.jspa?name=robertd)** opened **[SPR-13805](https://jira.spring.io/browse/SPR-13805?redirect=false)** and commented  The current implementation of `DefaultCorsProcessor` contains this line:  ``` responseHeaders.add(HttpHeaders.VARY, HttpHeaders.ORIGIN); ```  in the middle of `handleInternal()`  In the case where the wildcard domain is supported (`CorsConfiguration.ALL`), this response header does not seem necessary. If all domains are supported, the response does not actually vary by requested domain/origin. Further, this implementation does not seem to provide any reasonably simple way to override this functionality.  An example of where this can become an issue is for pages being reverse proxied through a CDN that will not cache responses containing Vary headers (Akamai, for example, will deem a response uncacheable if the Vary header contains anything other than Accept-Encoding).  In the simplest case, this solves the problem:  ``` if (!CorsConfiguration.ALL.equals(allowOrigin))     responseHeaders.add(HttpHeaders.VARY, HttpHeaders.ORIGIN); ```    ---  **Affects:** 4.2.3, 4.2.4, 4.3 GA  0 votes, 5 watchers","closed","status: invalid,","spring-projects-issues","2015-12-17T16:49:17Z","2019-01-18T10:57:36Z"
"","18288","Request entity InputStream is always empty in ContainerRequestFilter (Spring+Jersey) [SPR-13715]","**[Daniel Marcotte](https://jira.spring.io/secure/ViewProfile.jspa?name=marcottedan)** opened **[SPR-13715](https://jira.spring.io/browse/SPR-13715?redirect=false)** and commented  Hi!  I'm totally unable to get the Request payload/form in a JaxRS ContainerRequestFilter.  My setup :  * JDK 8 * SpringBoot 1.3.0.RELEASE * Jersey 2.22.1 (from SpringBoot)  here's my pom : (from Spring Initialzr)  ```       4.0.0              org.springframework.boot         spring-boot-starter-parent         1.3.0.RELEASE                    com.example     demo     0.0.1-SNAPSHOT     demo     Demo project for Spring Boot              UTF-8         1.8                                org.springframework.boot             spring-boot-starter                               org.springframework.boot             spring-boot-starter-web                               org.springframework.boot             spring-boot-starter-jersey                               org.springframework.boot             spring-boot-starter-test             test                                                          org.springframework.boot                 spring-boot-maven-plugin                             ```  Here's my Application class:  ``` @SpringBootApplication public class DemoApplication {     public static void main(String[] args) {         SpringApplication.run(DemoApplication.class, args);     } } ```  Here's my JerseyConfig:  ``` @Configuration public class JerseyConfig extends ResourceConfig {     public JerseyConfig() {         register(HelloController.class);         register(MyFilter.class);     } } ```  Here's my HelloController:  ``` @Component @Path(""/hello"") public class HelloController {     @Consumes(MediaType.APPLICATION_FORM_URLENCODED)     @POST     public String onHelloRequest(@FormParam(""foo"") String foo) {         System.out.println(foo);         return foo + ""bar"";     } } ```  And here's the core part of the problem I have, the ContainerRequestFilter:  ``` @Component public class MyFilter implements ContainerRequestFilter {     @Override     public void filter(ContainerRequestContext ctx) throws IOException {         System.err.println(""I'm in the filter"");         // Solution #1 doesn't work         if (ctx instanceof ContainerRequest) {             ContainerRequest request = (ContainerRequest) ctx;             request.bufferEntity();             Form f = request.readEntity(Form.class);             System.err.println(f.asMap().toString());         }         // Solution #2 doesn't work either         InputStream inputStream = ctx.getEntityStream();         StringBuilder textBuilder = new StringBuilder();         try (Reader reader = new BufferedReader(new InputStreamReader                 (inputStream, Charset.forName(StandardCharsets.UTF_8.name())))) {             int c = 0;             while ((c = reader.read()) != -1) {                 textBuilder.append((char) c);             }         }         System.err.println(textBuilder.toString());     } } ```  As you can see, this is a very lean SpringBoot example using Jersey. However, it looks like the InputStream from the ContainerRequestFilter has already been consumed. I tried it with a Javax ServletFilter and I have the same problem.  Is it possible that Spring-web consumes the InputStream before calling Jersey?  Please help me.   ---  **Affects:** 4.2.3","closed","status: invalid,","spring-projects-issues","2015-11-21T17:18:09Z","2019-01-12T05:23:23Z"
"","18215","Allow SpelCompiler to compile MapAccessor expressions [SPR-13638]","**[Daniel Fernández](https://jira.spring.io/secure/ViewProfile.jspa?name=dfernandez)** opened **[SPR-13638](https://jira.spring.io/browse/SPR-13638?redirect=false)** and commented  **Thymeleaf 3.0** will modify the way in which SpEL expressions are executed inside templates.  One of the modifications will be that the _context object_ (containing all the variables usable in expressions) will be passed to the SpEL evaluation engine wrapped as a Map, so that for most expressions (though not all), the use of custom _PropertyAccessor_ will not be needed. And that's good because that's one of the conditions for the SpEL compiler to be able to run.  The problem is, a good amount of expressions in Thymeleaf templates look like:  ``` ${someobject.someproperty} ```  The ""someproperty"" part (which will internally use introspection on the ""someobject"" object) should be covered by the SpEL compiler... but the first part of the expression, ""someobject"", is obtained from a (wrapped) map. So in this case, given the expression includes the use of a non-introspection-based accessor, compilation is not performed at all.  It would be great therefore if the use of MapAccessor was included in the SpEL compiler capabilities, so that expressions as the one above could be compiled in Thymeleaf 3.0 templates (if the compiler is configured).  Of course, this would make expressions such as:  ``` ${someobject} ```  ...which might be even more common, to be compilable too. But in such case no introspection is involved, so I doubt we would obtain any real performance gain. That's why I focus on two-level expressions.   ---  **Affects:** 4.2.2","closed","type: enhancement,","spring-projects-issues","2015-11-04T10:14:46Z","2015-12-17T09:33:55Z"
"","18716","Regression: If-Modified-Since value of zero not accepted anymore [SPR-14144]","**[Dan Costelloe](https://jira.spring.io/secure/ViewProfile.jspa?name=dan.costelloe@gmail.com)** opened **[SPR-14144](https://jira.spring.io/browse/SPR-14144?redirect=false)** and commented  Greetings,  I discovered an issue recently after migrating a spring-boot application from 1.2.7.RELEASE to 1.3.3.RELEASE. After upgrading, the underlying spring-web module is spring-web:4.2.5.RELEASE. Prior to the upgrade, the version was spring-web:4.1.8.RELEASE.  Client requests had previously been sending the header ""If-Modified-Since: 0"" wihout errors  After the upgrade, same requests cause 500 server error and the following stack-trace:  ``` org.springframework.web.util.NestedServletException: Request processing failed; nested exception is java.lang.IllegalArgumentException: Cannot parse date value ""0"" for ""If-Modified-Since"" header 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:980) 	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:859) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:622) 	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:844) 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:729) 	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:812) 	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:587) 	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143) 	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:595) 	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:223) 	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1127) 	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:515) 	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:185) 	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1061) 	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141) 	at org.eclipse.jetty.server.Dispatcher.forward(Dispatcher.java:191) 	at org.eclipse.jetty.server.Dispatcher.error(Dispatcher.java:77) 	at org.eclipse.jetty.server.handler.ErrorHandler.handle(ErrorHandler.java:92) 	at com.groupon.lex.service.jetty.CustomErrorHandler.handle(CustomErrorHandler.java:70) 	at org.eclipse.jetty.server.Response.sendError(Response.java:597) 	at org.eclipse.jetty.server.Response.sendError(Response.java:544) 	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:647) 	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143) 	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:577) 	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:223) 	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1127) 	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:515) 	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:185) 	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1061) 	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141) 	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97) 	at org.eclipse.jetty.server.handler.RequestLogHandler.handle(RequestLogHandler.java:95) 	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97) 	at org.eclipse.jetty.server.Server.handle(Server.java:499) 	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:311) 	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:257) 	at org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:544) 	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635) 	at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555) 	at java.lang.Thread.run(Thread.java:745) Caused by: java.lang.IllegalArgumentException: Cannot parse date value ""0"" for ""If-Modified-Since"" header 	at org.springframework.http.HttpHeaders.getFirstDate(HttpHeaders.java:970) 	at org.springframework.http.HttpHeaders.getIfModifiedSince(HttpHeaders.java:805) 	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.isResourceNotModified(HttpEntityMethodProcessor.java:191) 	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:173) 	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:80) 	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:126) 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:817) 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:731) 	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:959) 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:893) 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:968) 	... 39 common frames omitted ```  It seems that a question about this issue has also been asked on StackOverflow:  http://stackoverflow.com/questions/33806370/spring-boot-throwing-exception-on-invalid-if-modified-since-value  I'm currently working around the issue using a filter which removes the problematic header, however it looks (to my eyes at least) like a fairly straightforward fix could be implemented in HttpHeaders.java  I've forked the codebase and will submit a PR once JIRA gives me a ticket ID.    ---  **Affects:** 4.2.5  **Reference URL:** http://stackoverflow.com/questions/33806370/spring-boot-throwing-exception-on-invalid-if-modified-since-value  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e0642c77c3195e4a27eecbbcee08291b05bd0289, https://github.com/spring-projects/spring-framework/commit/448621ac58135b69f8d5d5d2d25631ae08fbe669","closed","type: bug,","spring-projects-issues","2016-04-11T13:06:47Z","2016-05-06T08:13:31Z"
"","18420","Regression: ResourceUrlEncodingFilter can throw StringIndexOutOfBoundsException with relative URL [SPR-13847]","**[Dallas Hopewell](https://jira.spring.io/secure/ViewProfile.jspa?name=dallas)** opened **[SPR-13847](https://jira.spring.io/browse/SPR-13847?redirect=false)** and commented  I have a web application that is throwing the following exception after updating from Spring Framework version 4.1.7 to 4.2.4  ``` Caused by java.lang.StringIndexOutOfBoundsException: String index out of range: -3   java.lang.String.substring(String.java:1967)   org.springframework.web.servlet.resource.ResourceUrlEncodingFilter$ResourceUrlEncodingResponseWrapper.encodeURL(ResourceUrlEncodingFilter.java:80)   javax.servlet.http.HttpServletResponseWrapper.encodeURL(HttpServletResponseWrapper.java:76)   javax.servlet.http.HttpServletResponseWrapper.encodeURL(HttpServletResponseWrapper.java:76)   org.springframework.security.web.context.SaveContextOnUpdateOrErrorResponseWrapper.encodeURL(SaveContextOnUpdateOrErrorResponseWrapper.java:118)   javax.servlet.http.HttpServletResponseWrapper.encodeURL(HttpServletResponseWrapper.java:76)   org.apache.taglibs.standard.tag.common.core.UrlSupport.doEndTag(UrlSupport.java:117)   org.apache.jsp.WEB_002dINF.jsp.tasks.context_jsp._jspx_meth_c_005furl_005f0(context_jsp.java:400)   org.apache.jsp.WEB_002dINF.jsp.tasks.context_jsp._jspService(context_jsp.java:153) ```  The part of the JSP where the error occurs is: -  ```  ```  The problem seems to be when the javax.servlet.http.HttpServletResponseWrapper#encodeURL(String) method is invoked with a 'relative' URL path including a query string, and that query string index in the URL path is less than the number of characters in the web application's context path then the exception is thrown.  ---  **Affects:** 4.2.4  **Attachments:** - [SPR13847.java](https://jira.spring.io/secure/attachment/23255/SPR13847.java) (_4.28 kB_)  **Issue Links:** - #17956 ResourceUrlProvider should only consider paths and not request parameters - #17609 StringIndexOutOfBoundsException in ResourceUrlEncodingFilter - #21069 StringIndexOutOfBoundsException when rewriting links in CSS resources","closed","type: bug,","spring-projects-issues","2016-01-07T10:00:54Z","2019-01-14T04:40:43Z"
"","18365","Support global separator in  [SPR-13792]","**[Corrado Alesso](https://jira.spring.io/secure/ViewProfile.jspa?name=namero999)** opened **[SPR-13792](https://jira.spring.io/browse/SPR-13792?redirect=false)** and commented  `` should support a property **_separator_** that will apply globally to the inner `` tags so that it won't be necessary to replicate this information on all the inner tags, assuming the format of the scripts is the same. In any case, script-level separator support should not be removed, so that specific overrides can be set as needed.  Please see gist here https://gist.github.com/namero999/ef3d5fb82200a930e9f6  In the context of this ticket, documentation at http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/html/jdbc.html#jdbc-intializing-datasource should be updated accordingly as well.   ---  **Affects:** 4.2.3  **Reference URL:** https://gist.github.com/namero999/ef3d5fb82200a930e9f6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/714ae2684c4f97b8fcae564afbc48d94bc76a544","closed","type: enhancement,","spring-projects-issues","2015-12-14T15:01:04Z","2016-04-06T08:38:13Z"
"","18431","FastByteArrayOutputStream$FastByteArrayInputStream behaves incorrectly when no data is available [SPR-13858]","**[Cornelius Riemenschneider](https://jira.spring.io/secure/ViewProfile.jspa?name=cri)** opened **[SPR-13858](https://jira.spring.io/browse/SPR-13858?redirect=false)** and commented  The read(byte[] b, int off, int len) method of FastByteArrayOutputStream$FastByteArrayInputStream returns 0 instead of -1 in the condition of this.currentBuffer == null. The correct return value would be -1, as the read() method already does. This breaks for example StreamUtils.copy(), which never leaves the loop.  The issue is fixed by replacing if (this.currentBuffer == null) { // this stream doesn't have any data in it return 0; }  with if (this.currentBuffer == null) { // this stream doesn't have any data in it return -1; }   ---  **Affects:** 4.2.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5d4547d34305ae980cc69f8df625772403bbbe1a, https://github.com/spring-projects/spring-framework/commit/8516de62e3ee3ee86af2e0349cfac4f692b2f92c","closed","in: core,","spring-projects-issues","2016-01-11T17:56:11Z","2016-02-25T09:36:35Z"
"","18405","wrong example given at section 17.4 Handler mappings [SPR-13832]","**[Constantino Cronemberger](https://jira.spring.io/secure/ViewProfile.jspa?name=ccronemberger)** opened **[SPR-13832](https://jira.spring.io/browse/SPR-13832?redirect=false)** and commented  The example given at:  http://docs.spring.io/spring/docs/3.2.16.RELEASE/spring-framework-reference/htmlsingle/#mvc-handlermapping  Does not work.  I had to remove the id from the bean declaration for it to work:  \ \ \ \ \ \ \   ---  **Affects:** 3.2.16  **Backported to:** [3.2.17](https://github.com/spring-projects/spring-framework/milestone/105?closed=1)","closed","type: documentation,","spring-projects-issues","2015-12-30T12:27:18Z","2016-04-06T08:38:11Z"
"","18429","Custom httpstatus codes [SPR-13856]","**[Constantin Baer](https://jira.spring.io/secure/ViewProfile.jspa?name=constantinbaer)** opened **[SPR-13856](https://jira.spring.io/browse/SPR-13856?redirect=false)** and commented  Because of the hardcoded HttpStatus.valueOf(code) in .getStatusCode() in AbstractClientHttpResponse, it is not possible to add your own costum http-statuscodes to the rest-interface. I wished there would be an easy method to add new statuscodes.   --- No further details from [SPR-13856](https://jira.spring.io/browse/SPR-13856?redirect=false)","closed","type: enhancement,","spring-projects-issues","2016-01-11T13:10:45Z","2019-01-13T20:43:33Z"
"","18427","Src of spring-web-4.2.3 release does not matches the actual class.file code [SPR-13854]","**[Constantin Baer](https://jira.spring.io/secure/ViewProfile.jspa?name=constantinbaer)** opened **[SPR-13854](https://jira.spring.io/browse/SPR-13854?redirect=false)** and commented  The source of the class RestTemplate in spring-web-4.2.3 does not match the actual code. While debugging, myRestTemplate.exchange(uri, method, entity, clazz); jumps to line 466 instead of 470 which is the methods line in the source. The source and classfiles where loaded via gradle and mavenrepository http://mvnrepository.com/artifact/org.springframework/spring-web/4.2.3.RELEASE   ---  **Reference URL:** http://mvnrepository.com/artifact/org.springframework/spring-web/4.2.3.RELEASE","closed","status: invalid,","spring-projects-issues","2016-01-11T10:19:29Z","2019-01-12T05:23:14Z"
"","18772","Java 8 default methods not detected as bean properties [SPR-14198]","**[Conor Gallagher](https://jira.spring.io/secure/ViewProfile.jspa?name=cjbooms)** opened **[SPR-14198](https://jira.spring.io/browse/SPR-14198?redirect=false)** and commented  As the title suggests, Spring 4.2.5.RELEASE cannot inject into Java 8 default methods via xml context files.  I have thrown together a simple example on GitHub to demonstrate how this fails:  ```java     void setSomeDate(LocalDate localDate);      default void setSomeDateInDayMonthYear(String dayMonthYear) {         setSomeDate(LocalDate.parse(dayMonthYear, DateTimeFormatter.ofPattern(""dd/MM/yyyy"")));     } ```  An egregious workaround is to reference the default method from the implementation as follows:  ```java @Override public void setSomeDateInDayMonthYear(String dayMonthYear) {     SomeInterface.super.setSomeDateInDayMonthYear(dayMonthYear); } ```  Also referenced on SO: http://stackoverflow.com/questions/30477367/spring-4-cannot-execute-java-8-default-methods  ---  **Affects:** 4.2.5  **Reference URL:** https://github.com/cjbooms/spring-default-methods  **Issue Links:** - #15547 `@Bean` on Java 8 default methods in interfaces - #21516 CachedIntrospectionResults should build complete descriptor for setter/getter across interface hierarchy - #20869 CachedIntrospectionResults should use BeanInfoFactory when introspecting implemented interfaces  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ce2f28da49d1e300d81589d70b38d39b450aefee","closed","type: enhancement,","spring-projects-issues","2016-04-21T10:55:29Z","2019-01-13T05:26:09Z"
"","18270","Regression: Spring on WildFly causing ClassNotFoundException in ASM when deployed outside of EAR [SPR-13695]","**[cns-web](https://jira.spring.io/secure/ViewProfile.jspa?name=cns-web)** opened **[SPR-13695](https://jira.spring.io/browse/SPR-13695?redirect=false)** and commented  Hi, the problem affects my deployment since 4.2.3 (in 4.2.2 everything worked fine)..  See the reference url for the description with stack:  Short summary - EAR on Wildfly which has dependency to spring module - Spring module is deployed within the wildfly modules folder (not bundled with the deployment ear!)  Reason for the CNFE: - getClass().getClassLoader()  called in context of spring-jar for classes which are in the deployment EAR. ->> Different classloader  If you need any additional info i will provide.  ---  **Affects:** 4.2.3  **Reference URL:** https://github.com/spring-projects/spring-framework/commit/8c4b8d253a79c4d349b09c14202e7a8ee96a0ca1#commitcomment-14416143  **Issue Links:** - #17913 Unable to intercept methods with mixed enum types as varargs  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/20a286b4d68bec210456751b496c9b174e7ca287","closed","in: core,","spring-projects-issues","2015-11-17T09:20:46Z","2019-01-11T19:25:18Z"
"","18735","MappingJackson2HttpMessageConverter should not always log a warning [SPR-14163]","**[Claes Mogren](https://jira.spring.io/secure/ViewProfile.jspa?name=claes.mogren@gmail.com)** opened **[SPR-14163](https://jira.spring.io/browse/SPR-14163?redirect=false)** and commented  We have a project that registers both a MappingJackson2HttpMessageConverter and a ProtobufHttpMessageConverter to our RestTemplate. This works fine, but every time we de-serialize a JSON body into a protobuf we get something like:  2016-04-13 13:22:30.760  WARN [app-service] 15947 --- [AppClient-1] .c.j.MappingJackson2HttpMessageConverter : Failed to evaluate deserialization for type [simple type, class com.company.product.component.protobuf.Client$Configurations]: com.fasterxml.jackson.databind.JsonMappingException: Can not find a (Map) Key deserializer for type [simple type, class com.google.protobuf.Descriptors$FieldDescriptor]  It can of course be hidden by setting logging.level.org.springframework.http.converter.json: 'ERROR' in our application.yml, but it's not the solution.  ---  **Affects:** 4.1.7  **Reference URL:** https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/http/converter/json/AbstractJackson2HttpMessageConverter.java#L156  **Issue Links:** - #16030 Log caught exception in MappingJackson2HttpMessageConverter - #15886 MappingJackson2(Http)MessageConverter should be more verbose in canRead/canWrite checks (on Jackson 2.3) - #20141 Poor diagnostics when Jackson cannot deserialise an application/json payload due to a missing deserialiser - #21486 AbstractJackson2HttpMessageConverter incorrectly logs at WARN level after upgrading to Jackson 2.9  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/62ce9afe3a0f24910744ab45947ed8e350bae6ca, https://github.com/spring-projects/spring-framework/commit/bf3cadb90810fc93e356f3148bc3f98adf098797, https://github.com/spring-projects/spring-framework/commit/e3667467f627bc60e4e72df766facec66d37ec86, https://github.com/spring-projects/spring-framework/commit/5f4e838f4165f99ac6166a14e8ce6afcc39a5ba0, https://github.com/spring-projects/spring-framework/commit/334b4a99b05cfaf3b09910a0f502770a3917eeab","closed","type: enhancement,","spring-projects-issues","2016-04-13T12:05:44Z","2019-01-11T16:36:03Z"
"","18828","Doc: UriComponentsBuilder does not encode query parameters [SPR-14256]","**[Christopher Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=w_c_smith)** opened **[SPR-14256](https://jira.spring.io/browse/SPR-14256?redirect=false)** and commented  `UriComponentsBuilder` does not encode query parameters, expecting them to be encoded by the client already. The documentation does not indicate one way or another whether pre-encoding is necessary, and it would be helpful to note that it is.   ---  **Affects:** 4.3 RC1","closed","status: declined,","spring-projects-issues","2016-05-06T08:26:58Z","2021-09-15T17:52:05Z"
"","18741","MockWebResponseBuilder can't handle null domain in cookie [SPR-14169]","**[Christopher Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=w_c_smith)** opened **[SPR-14169](https://jira.spring.io/browse/SPR-14169?redirect=false)** and commented  This is a regression from 4.2, and any tests that set a cookie without explicitly setting the domain will fail when the setting request is made.  As part of the resolution for #18623, `MockWebResponseBuilder` was retrofitted in f5a5a81 to send the cookie on a round trip through HtmlUnit's `Cookie` class. The constructor for `Cookie` throws an exception if the cookie's domain is not set, as is rather typical with custom cookies and is acceptable per RFC 6265 5.3.  This seems to be a bug in HtmlUnit, but the Spring implementation should, if it's going to use the HtmlUnit algorithm as a utility, ensure that the domain is set to the domain of the request (e.g., `localhost`) if not otherwise specified in the `javax.servlet.http.Cookie`.  ---  **Affects:** 4.3 RC1  **Issue Links:** - #18623 MockHttpServletResponse should convert Cookies into Set-Cookie header  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1044","closed","type: bug,","spring-projects-issues","2016-04-14T03:31:57Z","2019-01-11T16:36:22Z"
"","18668","DelegatingWebMvcConfiguration#addFormatters fires before autowiring [SPR-14096]","**[Christopher Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=w_c_smith)** opened **[SPR-14096](https://jira.spring.io/browse/SPR-14096?redirect=false)** and commented  In migrating some MockMvc tests, I ran into a problem where the `DomainClassConverter` was not being called properly to resolve an `@PathVariable` for a repository entity; I'm explicitly importing `SpringDataWebConfiguration` (Commons 1.11.2) into my test configuration to register it.  On debugging, I found that the `DelegatingWebMvcConfiguration#addFormatters()` method is being called (from `mvcConversionService()`) before `configurers` is autowired, but only in my new tests. In my old tests, the field autowiring happens first, then `addFormatters()` is called, and everything is happy.  Every single version included is identical except for an upgrade from Geb 0.10 to 0.13.  What's particularly strange is that in `SpringDataWebConfiguration`, the `conversionService` field is annotated with `@Qualifier(""mvcConversionService"")`. In the passing test, the field appears to be wired (with a `DependencyObjectFactory`) **before** the bean method is invoked (the runtime class is enhanced, and it's difficult to determine actual field values in Eclipse; a watchpoint on the field hangs indefinitely), meaning that the configuration class is available as a configurer before `addFormatters()` is called. It seems that this **shouldn't** work because of the circular dependency, but then in that case the configuration would **always** fail.  After rummaging around in the stack trace, it appears that the difference lies in how one of my configuration classes is imported; if the test class includes it directly as a configuration, I'm okay; if it's included through a series of `@Import` directives, `mvcConversionService()` is evaluated before autowiring and the conversion fails at runtime.  This inconsistency appears to indicate a semantic bug in the autowiring handling for `DelegatingWebMvcConfiguration`, since `required = false` seems to be interpreted as ""it's okay to start calling `@Bean` methods on this class before this field is wired"", when it's actually intended to indicate ""it's okay if this field doesn't have any matching beans"" (which should be represented by an empty collection anyway).  I don't know if there's a non-breaking way to actually specify this, but if at all possible the (possibly-empty) collection of configurers should be autowired on `DelegatingWebMvcConfiguration` before its bean method start getting invoked.   ---  **Affects:** 4.2.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/a4af21a494ce80edd94eebb79d6fe08f7e4a5139, https://github.com/spring-projects/spring-framework-issues/commit/006cd886b068d3aaaff8630f881ffb0731a167be","closed","in: core,","spring-projects-issues","2016-03-30T01:41:00Z","2019-01-11T16:31:59Z"
"","18638","MockMvcWebConnection should share CookieManager with HtmlUnit driver [SPR-14066]","**[Christopher Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=w_c_smith)** opened **[SPR-14066](https://jira.spring.io/browse/SPR-14066?redirect=false)** and commented  While working on the other side of #18623 (trying to explicitly set a cookie as a given and then loading a page, expecting the controller to see the cookie's value), I discovered that the `MockMvcWebConnection` used by the HtmlUnit driver maintains a completely separate copy of `WebClient` with its own state. This is presumably because the `DelegatingWebConnection` operates as a sort of decorator.  However, this means that any cookies set in the `driver.manage().addCookie()` (or equivalent) are simply missing from the context used to issue local MockMvc requests.  The connection object should, when creating the delegate `WebClient`, use the same `CookieManager` as the parent `WebClient`.  This code, inserted in `setup()`, appears to induce the expected behavior:  ```java WebClient topLevelWebClient = driver.@webClient CookieManager topLevelCookieManager = topLevelWebClient.cookieManager  (topLevelWebClient.webConnection as DelegatingWebConnection).@connections     .findAll { DelegatingWebConnection.DelegateWebConnection connection ->         connection.delegate instanceof MockMvcWebConnection     }.each { (it.@delegate as MockMvcWebConnection).@webClient.cookieManager = topLevelCookieManager } ```  ---  **Affects:** 4.2.5  **Issue Links:** - #18837 MockMvcWebConnection should update cookie manager with MockHttpServletResponse cookies  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/411ff8450fbf386b5a88f01777ab1e49aaa33a8d, https://github.com/spring-projects/spring-framework/commit/4a6c2dbb159e2b41b1d87c38078da55490a801c0, https://github.com/spring-projects/spring-framework/commit/7d96ad1f6ece5534092ff537d9f89f914a9c2566","closed","type: enhancement,","spring-projects-issues","2016-03-17T12:45:17Z","2019-01-11T14:41:38Z"
"","18623","MockHttpServletResponse should convert Cookies into Set-Cookie header [SPR-14051]","**[Christopher Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=w_c_smith)** opened **[SPR-14051](https://jira.spring.io/browse/SPR-14051?redirect=false)** and commented  When a cookie is set on a `MockHttpServletResponse` via `addCookie(Cookie)`, the cookie goes into the internal list of cookies, but the response does not convert a list of cookies into a header; none of the accessors, including `getHeaderNames()` and `containsHeader()`, responds with the expected `Set-Cookie` header.  This was probably overlooked when MockMvc results were inspected directly for cookies, but the HtmlUnit driver treats the servlet response as ordinary HTTP and does not apply special handling. Therefore, under Selenium tests, cookies are silently discarded.  (A possible workaround would be to have the `MockMvcWebConnection` translate the cookies, but this seems like a special-casing of what should be conforming to the general contract that `addCookie` actually outputs the cookie.)  ---  **Affects:** 4.2.5  **Issue Links:** - #18741 MockWebResponseBuilder can't handle null domain in cookie  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f5a5a81e954ea069e5d6aaa2d6cb36e41af927d1","closed","type: enhancement,","spring-projects-issues","2016-03-14T19:21:45Z","2019-01-11T14:42:00Z"
"","18617","ModelAndView is replaced when a RedirectView is used [SPR-14045]","**[Christopher Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=w_c_smith)** opened **[SPR-14045](https://jira.spring.io/browse/SPR-14045?redirect=false)** and commented  I have a `HandlerInterceptor` that is Doing Things for me based on the contents of the model I populate in a controller. I have a controller that returns a `ModelAndView` with a `RedirectView`, filling data into the model to be processed by the interceptor before the redirect fires.  However, the `ModelAndView` object is replaced by Spring between the controller return and the interceptor invocation (the objects have different IDs when inspected). The view is copied, but the model is discarded.  This appears to be a result of interactions between the handler's `ignoreDefaultModelOnRedirect` and the `ModelAndViewContainer`; even though a method that returns a `ModelAndView` is **not** using the ""default"" model, the returned model is discarded.  If a controller method returns an explicit model in a `ModelAndView`, then that model should be retained even when `ignoreDefaultModelOnRedirect` is set.  ---  **Affects:** 3.2.16, 4.2.5  **Issue Links:** - #17146 `@SessionAttributes` not populated when going directly to POST and redirecting while ignoreDefaultModelOnRedirect=true  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9e3bb1e26f73893efb0af4d5acaa4489a716127c, https://github.com/spring-projects/spring-framework/commit/582864802e49f0cc47575be00194e4194d7b1dc5, https://github.com/spring-projects/spring-framework/commit/d7062f6291904b86b683cbffe537121506cbffcc  **Backported to:** [3.2.17](https://github.com/spring-projects/spring-framework/milestone/105?closed=1)","closed","type: bug,","spring-projects-issues","2016-03-11T21:02:21Z","2019-01-13T05:27:38Z"
"","18538","support HTTP status error pages on MockMvc [SPR-13966]","**[Christopher Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=w_c_smith)** opened **[SPR-13966](https://jira.spring.io/browse/SPR-13966?redirect=false)** and commented  MockMvc does not run an actual servlet container but implements part of the stack for testing purposes. Currently, MockMvc does not support content in error responses; for example, a 403 or 404 status will result in an empty body.  With the new HtmlUnit driver support, it's very simple to write most functional tests in something like Spock+Geb, but tests that expect an error (e.g., ""Bob can't view Alice's document"") require dropping back into the MockMvc DSL because the driver only exposes the view content and not the status code.  I would like to be able to configure the MockMvc to serve HTML pages as error responses, similar to Boot's `ConfigurableEmbeddedServletContainer#addErrorPages(ErrorPage[])` so that I can use ordinary Selenium methods of identifying when I've encountered an error.   ---  **Affects:** 4.2.4","open","type: enhancement,","spring-projects-issues","2016-02-21T19:04:45Z","2019-01-14T02:22:44Z"
"","18136","ability to set response status on ModelAndView [SPR-13560]","**[Christopher Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=w_c_smith)** opened **[SPR-13560](https://jira.spring.io/browse/SPR-13560?redirect=false)** and commented  I am supporting resource deletion under certain circumstances, but semantic preconditions (referential integrity) must be enforced, and if they aren't, I want to return a 422. This is fairly simple in a REST controller, but in an HTML controller, I want to send the user an HTML page describing the condition, along with the 422 status code.  I can programmatically set the status code for a REST response with a `ResponseEntity`, and I can statically set the status code for an HTML response with `@ResponseStatus`, but there's no mechanism for programmatically setting the status code when using a `ModelAndView`. I would like a status field on `ModelAndView` that I can set based on controller logic.  ---  **Affects:** 4.2.1  **Issue Links:** - #19362 ModelAndView's setStatus does not work for `@ExceptionHandler` methods  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2015-10-09T17:45:59Z","2019-01-13T05:35:13Z"
"","18123","allow ResponseStatus on Controller class [SPR-13547]","**[Christopher Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=w_c_smith)** opened **[SPR-13547](https://jira.spring.io/browse/SPR-13547?redirect=false)** and commented  I'm collecting our obsolete-and-redirected URLs into a single controller, and it would be convenient to be able to specify `@ResponseStatus(MOVED_PERMANENTLY)` on the class rather than on every method, as mappings and `@ResponseBody` can be.   ---  **Affects:** 4.2.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/73a794336cceb543098b73ae57cc0393bd401c00","closed","type: enhancement,","spring-projects-issues","2015-10-07T21:09:24Z","2016-04-06T08:38:14Z"
"","18101","HtmlUnitRequestBuilder doesn't handle query parameters without equals sign [SPR-13524]","**[Christopher Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=w_c_smith)** opened **[SPR-13524](https://jira.spring.io/browse/SPR-13524?redirect=false)** and commented  Blank request parameters are used occasionally to conditionally turn on messages inside templates. For example, Spring Security uses `/login?error` to indicate that a username/password pair was incorrect. However, `HtmlUnitRequestBuilder` currently attempts to decode `null` values for query parameters which results in a `NullPointerException`. See the following stack trace for details.  ``` Caused by: java.lang.NullPointerException 	at java.net.URLDecoder.decode(URLDecoder.java:136) 	at org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder.params(HtmlUnitRequestBuilder.java:365) 	at org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder.buildRequest(HtmlUnitRequestBuilder.java:121) 	at org.springframework.test.web.servlet.MockMvc.perform(MockMvc.java:140) 	at org.springframework.test.web.servlet.htmlunit.MockMvcWebConnection.getResponse(MockMvcWebConnection.java:122) ```  Adding an equals sign with no content prevents the exception but shouldn't be required, especially since other Spring components generate redirects with this form.  ---  **Affects:** 4.2 GA  **Issue Links:** - #18113 UriComponentsBuilder interprets empty request parameters as null  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/283fc945722365eeb4986d3dbc503ff93b45e2b7, https://github.com/spring-projects/spring-framework/commit/61a46db10179b187d52edd2a0db67b97f2faab02","closed","type: bug,","spring-projects-issues","2015-09-30T16:05:53Z","2019-01-11T17:28:03Z"
"","18080","empty set in MVC @ModelAttribute is null [SPR-13502]","**[Christopher Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=w_c_smith)** opened **[SPR-13502](https://jira.spring.io/browse/SPR-13502?redirect=false)** and commented  I am using checkboxes to bind to a `Set options` in my form class. When any of the boxes is checked, I get correct results, but if none is, then the set is null instead of empty.  I'm using Thymeleaf to bind the fields and have confirmed that the `_options: on` placeholder is being sent in the POST.   ---  **Affects:** 4.2.1","closed","type: enhancement,","spring-projects-issues","2015-09-24T18:52:15Z","2017-03-17T07:46:04Z"
"","18067","inject singleton constructor even if not annotated [SPR-13489]","**[Christopher Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=w_c_smith)** opened **[SPR-13489](https://jira.spring.io/browse/SPR-13489?redirect=false)** and commented  When using constructor injection, the `AutowiredAnnotationBeanPostProcessor` requires that the intended constructor be annotated with `@Autowired` or `@Inject`. If a class has only one constructor (meaning, in particular, that it has **no** default constructor), the container should use that constructor even if it isn't annotated, since there is no possible ambiguity.  Since this logic is applicable only in the case of exactly one constructor, `determineCandidateConstructors` could short-circuit the selection logic if `rawCandidates.length == 1`.  ---  **Affects:** 4.2.1  **Issue Links:** - #16883 Make `@Autowired` optional on a single constructor of a class decorated with `@Component` (_**""duplicates""**_)  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2015-09-23T04:27:07Z","2019-01-13T05:35:27Z"
"","18507","AbstractMarshaller's DocumentBuilderFactory instance may be used by several threads simultaneously [SPR-13935]","**[Christophe Sourisse](https://jira.spring.io/secure/ViewProfile.jspa?name=dosyfier)** opened **[SPR-13935](https://jira.spring.io/browse/SPR-13935?redirect=false)** and commented  Spring OXM provides an abstract support class - AbstractMarshaller - that helps discriminating between different Source / Result types when respectively unmarshalling / marshalling some data. When it has to deal with some DOMSource or DOMResult, this class may build an empty DOM Document (see AbstractMarshaller#marshalDomResult, line 252) if the source or the result doesn't have any initially. This is done by the 'buildDocument' method (line 131).  Problem: a single and non-synchronized DocumentBuilderFactory instance (lazy-initialized) is used to build document builders within this 'buildDocument' method. However, depending on the DocumentBuilderFactory implementation used, the considered instance may not be thread-safe and, thus, some issues may be observed when several calls are made simultaneously to the same Marshaller/Unmarshaller instance.  A possible correction would be to synchronize the use of the DocumentBuilderFactory within 'buildDocument' using the 'documentBuilderFactoryMonitor' monitor variable:  ```java protected Document buildDocument() {     // ...     DocumentBuilder documentBuilder;     synchronized (this.documentBuilderFactoryMonitor) {         if (this.documentBuilderFactory == null) {             this.documentBuilderFactory = createDocumentBuilderFactory();         }         documentBuilder = createDocumentBuilder(this.documentBuilderFactory);     }     // ... The document builder is ready for use ... } ```  Otherwise, it could be considered to instantiate a new document builder factory each time some is needed.  Could you please confirm the bug and handle it? Thanks.   ---  **Affects:** 3.2.16, 4.2.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f61b9984474f73d4ceed95e5df24b3c3f76df73c, https://github.com/spring-projects/spring-framework/commit/ad103016eb56fa624518f319f83894da8f9ddc11, https://github.com/spring-projects/spring-framework/commit/5047e9062527b4bd754e7fc0f0ac85486512eb16  **Backported to:** [3.2.17](https://github.com/spring-projects/spring-framework/milestone/105?closed=1)","closed","type: bug,","spring-projects-issues","2016-02-09T21:51:07Z","2016-04-06T08:38:13Z"
"","18510","NumberToNumberConverterFactory should allow usage of AtomicInteger and AtomicLong as source. [SPR-13938]","**[Christoph Strobl](https://jira.spring.io/secure/ViewProfile.jspa?name=cstrobl)** opened **[SPR-13938](https://jira.spring.io/browse/SPR-13938?redirect=false)** and commented  `NumberUtils` used by `NumberToNumberConverterFactory` does not support converting `AtomicInteger` and `AtomicLong`.  Please consider alerting `NumberToNumber#convert(Number)` to something like:  ```java public T convert(Number source) {    if (source instanceof AtomicInteger) {      return NumberUtils.convertNumberToTargetClass(((AtomicInteger) source).get(), this.targetType);   }   if (source instanceof AtomicLong) {     return NumberUtils.convertNumberToTargetClass(((AtomicLong) source).get(), this.targetType);   }      return NumberUtils.convertNumberToTargetClass(source, this.targetType); } ```  ---  Related to: [DATAMONGO-1288](https://jira.spring.io/browse/DATAMONGO-1288)  ---  **Affects:** 4.1.9, 4.2.4  **Issue Links:** - [DATAMONGO-1288](https://jira.spring.io/browse/DATAMONGO-1288) Update.inc(String, Number) method fails to work with AtomicInteger","closed","type: enhancement,","spring-projects-issues","2016-02-11T13:05:33Z","2019-01-13T15:53:43Z"
"","18421","Hibernate 4 Autoflush does not work with Spring OpenSessionInViewInterceptor [SPR-13848]","**[Christof Patzwald](https://jira.spring.io/secure/ViewProfile.jspa?name=christof_patzwald)** opened **[SPR-13848](https://jira.spring.io/browse/SPR-13848?redirect=false)** and commented  Hibernate 4 Autoflush does not work with Spring OpenSessionInViewInterceptor  We found a Bug while migrating our applications with Spring 3.0.5 and Hibernate 3.6.5 to Spring 4.2 and Hibernate 4.2: Autoflush of the objects does not work anymore.  This was our testcase: // select all not canceled persons final Query query = currentSession().createQuery(selectSQL); List\ personenListe = query.list();  // canceled first person TOPerson person = personenListe.get(0); person.setKnStornoPerson(""S"");  // canceled Person  // select - select all not canceled persons once again final Query query2 = currentSession().createQuery(selectSQL2); List\ personenListe2 = query2.list();  Result: The just canceled person still exists in the result set. We expected that query2.list(() performs an autoflush in Hibernate and the result set would not contain the just canceled person. This would be the correct behavior.  We found the cause to be in the OpenSessionInViewInterceptor. Without it the autoflush works correctly. We used the following configuration:  \${env:hibernate.dialect}\ \org.hibernate.cache.EhCacheProvider\ \/ehcache.xml\ \${env:hibernate.useQueryCache}\ \${env:hibernate.useSecondLevelCache}\ \after_statement\ \org.hibernate.engine.transaction.internal.jta.CMTTransactionFactory\                                                                                                                                                                                                     We already considered the information from Bug #14115 in our configuration. As recommended, we set the property hibernate.transaction.factory_class to the CMTTransactionFactory and added the TransactionManager as a property of SessionFactory. Having done that, the autoflush works fine without the OpenSessionInViewInterceptor.  The autoflush does not work with the OpenSessionInViewInterceptor  Furthermore, we found the method preHandle of OpenSessionInViewInterceptor to be executed right at the beginning of a request. The method preHandle creates a new hibernateSession by calling the method openSession. This hibernateSession is bount to the thread by the TransactionSynchronizationManager. While creating the hibernateSession, the TransactionCoordinator creates a CMTTransaction-Object. At this point, no active transaction is available, therefore, the join status in CMTTransaction has been set to NOT_JOINED.  Database access within a transaction According to our architecture, a transaction is being started by AOP in order to execute database access in the persistence tier. This transaction only begins after the execution of preHandle of OpenSessionInViewInterceptor. The join status of the CMTTransaction that was set in preHandle, stays the same within the actual transaction. Therefore, it looks like the preHandle method corrupts the transactional behavior. Consequently, the autoflush is not being executed later on. When performing the method query2.list (), we expect the method autoFlushIfRequired to recognize that it is running within a transaction. Unfortunately, the method isTransactionInProgress returns FALSE! As mentioned before, the cause is the join status to be NOT_JOINED.  protected boolean autoFlushIfRequired(Set querySpaces) throws HibernateException { errorIfClosed(); if ( ! isTransactionInProgress() ) { // do not auto-flush while outside a transaction return false; } AutoFlushEvent event = new AutoFlushEvent( querySpaces, this ); for ( AutoFlushEventListener listener : listeners( EventType.AUTO_FLUSH ) ) { listener.onAutoFlush( event ); } return event.isFlushRequired(); }  The OpenSessionInViewFilter shows the incorrect behavior as well.  In the test case without the OpenSessionInViewInterceptor the hibernateSession is being created in the currentSession method immediately before the first database access. At this point, a transaction by AOP has already started, therefore the join status of CMTTransaction object is set to JOINED. This leads to the autoflush, which is the expected behavior.  ---  **Affects:** 4.2 GA  **Issue Links:** - #14115 Hibernate 4 smart flushing does not work unless CMTTransactionFactory is being specified  2 votes, 5 watchers","closed","status: declined,","spring-projects-issues","2016-01-07T10:11:46Z","2019-01-12T16:22:31Z"
"","18546","BindException for java.time.LocalDate in February [SPR-13974]","**[Christioph Rizzotti](https://jira.spring.io/secure/ViewProfile.jspa?name=rizzicr)** opened **[SPR-13974](https://jira.spring.io/browse/SPR-13974?redirect=false)** and commented  Hi,  i found a unexpected behavior with a web-mvc application. I have an entity with 2 fields of type java.time.LocalDate. beginsOnDate and endsOnDate. To pre-fillout this fields in my JSP form, i set it to the current date inside the controller method. The change the date in the JSP site to a date of month greater then 28 and to another month. (f.e.  30.04.2016). On submit i get a BindException that rejected the entered date, because a 30. of February doesn't exists. But the entered date is of April. With other dates below the 28. of month i get no Exception and it works fine. This problem is only this month. But could be also a problem if the current month have only 30. days and the user enters the 31. of another month.  Field declaration is: `@DateTimeFormat`(style = ""M-"") private LocalDate beginsOnDate, endsOnDate;  ```java Field error in object 'activity' on field 'beginsOnDate': rejected value [31.03.2016]; codes [methodInvocation.activity.beginsOnDate,methodInvocation.beginsOnDate,methodInvocation.java.time.LocalDate,methodInvocation]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [activity.beginsOnDate,beginsOnDate]; arguments []; default message [beginsOnDate]]; default message [Property 'beginsOnDate' threw exception; nested exception is java.time.DateTimeException: Invalid date 'FEBRUARY 31'] Field error in object 'activity' on field 'endsOnDate': rejected value [31.03.2016]; codes [methodInvocation.activity.endsOnDate,methodInvocation.endsOnDate,methodInvocation.java.time.LocalDate,methodInvocation]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [activity.endsOnDate,endsOnDate]; arguments []; default message [endsOnDate]]; default message [Property 'endsOnDate' threw exception; nested exception is java.time.DateTimeException: Invalid date 'FEBRUARY 31'] 	at org.springframework.web.method.annotation.ModelAttributeMethodProcessor.resolveArgument(ModelAttributeMethodProcessor.java:113) ~[spring-web-4.2.4.RELEASE.jar:4.2.4.RELEASE] 	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:78) ~[spring-web-4.2.4.RELEASE.jar:4.2.4.RELEASE] 	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:162) ~[spring-web-4.2.4.RELEASE.jar:4.2.4.RELEASE] 	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:129) ~[spring-web-4.2.4.RELEASE.jar:4.2.4.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:110) ~[spring-webmvc-4.2.4.RELEASE.jar:4.2.4.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:814) ~[spring-webmvc-4.2.4.RELEASE.jar:4.2.4.RELEASE] 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:737) ~[spring-webmvc-4.2.4.RELEASE.jar:4.2.4.RELEASE] 	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) ~[spring-webmvc-4.2.4.RELEASE.jar:4.2.4.RELEASE] 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:959) ~[spring-webmvc-4.2.4.RELEASE.jar:4.2.4.RELEASE] 	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:893) ~[spring-webmvc-4.2.4.RELEASE.jar:4.2.4.RELEASE] 	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:969) [spring-webmvc-4.2.4.RELEASE.jar:4.2.4.RELEASE] 	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:871) [spring-webmvc-4.2.4.RELEASE.jar:4.2.4.RELEASE] 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:647) [tomcat-embed-core-7.0.47.jar:7.0.47] 	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:845) [spring-webmvc-4.2.4.RELEASE.jar:4.2.4.RELEASE] 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:728) [tomcat-embed-core-7.0.47.jar:7.0.47] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:305) [tomcat-embed-core-7.0.47.jar:7.0.47] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) [tomcat-embed-core-7.0.47.jar:7.0.47] 	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) [tomcat-embed-core-7.0.47.jar:7.0.47] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243) [tomcat-embed-core-7.0.47.jar:7.0.47] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) [tomcat-embed-core-7.0.47.jar:7.0.47] 	at com.github.dandelion.core.web.DandelionFilter.doFilter(DandelionFilter.java:138) [dandelion-core-0.10.1.jar:na] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243) [tomcat-embed-core-7.0.47.jar:7.0.47] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) [tomcat-embed-core-7.0.47.jar:7.0.47] 	at org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter.doFilterInternal(OpenEntityManagerInViewFilter.java:178) [spring-orm-4.2.4.RELEASE.jar:4.2.4.RELEASE] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.2.4.RELEASE.jar:4.2.4.RELEASE] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243) [tomcat-embed-core-7.0.47.jar:7.0.47] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) [tomcat-embed-core-7.0.47.jar:7.0.47] 	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77) [spring-web-4.2.4.RELEASE.jar:4.2.4.RELEASE] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.2.4.RELEASE.jar:4.2.4.RELEASE] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243) [tomcat-embed-core-7.0.47.jar:7.0.47] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) [tomcat-embed-core-7.0.47.jar:7.0.47] 	at org.tuckey.web.filters.urlrewrite.gzip.GzipFilter.doFilter(GzipFilter.java:85) [urlrewritefilter-4.0.4.jar:4.0.4] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243) [tomcat-embed-core-7.0.47.jar:7.0.47] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) [tomcat-embed-core-7.0.47.jar:7.0.47] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:316) [spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE] 	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126) [spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE] 	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90) [spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) [spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE] 	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114) [spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) [spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE] 	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:122) [spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) [spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE] 	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) [spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) [spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE] 	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:157) [spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) [spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE] 	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:169) [spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) [spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE] 	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:48) [spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) [spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE] 	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:133) [spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) [spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE] 	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:205) [spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) [spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE] 	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:120) [spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) [spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE] 	at org.springframework.security.web.csrf.CsrfFilter.doFilterInternal(CsrfFilter.java:120) [spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.2.4.RELEASE.jar:4.2.4.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) [spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE] 	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64) [spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.2.4.RELEASE.jar:4.2.4.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) [spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE] 	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:91) [spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) [spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE] 	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:53) [spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.2.4.RELEASE.jar:4.2.4.RELEASE] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) [spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE] 	at de.eseven.bleckmannschulze.profiler.core.security.AjaxSessionTimeoutFilter.doFilter(AjaxSessionTimeoutFilter.java:36) [classes/:na] 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) [spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE] 	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:213) [spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE] 	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:176) [spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE] 	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:346) [spring-web-4.2.4.RELEASE.jar:4.2.4.RELEASE] 	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:262) [spring-web-4.2.4.RELEASE.jar:4.2.4.RELEASE] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243) [tomcat-embed-core-7.0.47.jar:7.0.47] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) [tomcat-embed-core-7.0.47.jar:7.0.47] 	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:121) [spring-web-4.2.4.RELEASE.jar:4.2.4.RELEASE] 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.2.4.RELEASE.jar:4.2.4.RELEASE] 	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243) [tomcat-embed-core-7.0.47.jar:7.0.47] 	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) [tomcat-embed-core-7.0.47.jar:7.0.47] 	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:222) [tomcat-embed-core-7.0.47.jar:7.0.47] 	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:123) [tomcat-embed-core-7.0.47.jar:7.0.47] 	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502) [tomcat-embed-core-7.0.47.jar:7.0.47] 	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:171) [tomcat-embed-core-7.0.47.jar:7.0.47] 	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:100) [tomcat-embed-core-7.0.47.jar:7.0.47] 	at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:953) [tomcat-embed-core-7.0.47.jar:7.0.47] 	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118) [tomcat-embed-core-7.0.47.jar:7.0.47] 	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:408) [tomcat-embed-core-7.0.47.jar:7.0.47] 	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1041) [tomcat-embed-core-7.0.47.jar:7.0.47] 	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:603) [tomcat-embed-core-7.0.47.jar:7.0.47] 	at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:312) [tomcat-embed-core-7.0.47.jar:7.0.47] 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_60] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_60] 	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_60]  ```    ---  **Reference URL:** http://stackoverflow.com/questions/35565992/30-03-2016-throws-bindexception-with-localdate  **Attachments:** - [BindExceptionDemo.zip](https://jira.spring.io/secure/attachment/23319/BindExceptionDemo.zip) (_109.49 kB_)","closed","status: invalid,","spring-projects-issues","2016-02-23T08:00:02Z","2019-01-12T05:23:06Z"
"","18520","Activate/deactivate MVC resource cache depending on a proile [SPR-13948]","**[Christian Plätzinger](https://jira.spring.io/secure/ViewProfile.jspa?name=cplaetzinger)** opened **[SPR-13948](https://jira.spring.io/browse/SPR-13948?redirect=false)** and commented  I configure my Spring Web context using xml and I want to activate the MVC resource cache based on a profile. Thus I tried the following:  ```  			...  ```  Unfortunately this fails with the following error:  ``` Caused by: org.springframework.beans.factory.xml.XmlBeanDefinitionStoreException: Line 30 in XML document from class path resource [spring/mvc-config.xml] is invalid; nested exception is org.xml.sax.SAXParseException; lineNumber: 30; columnNumber: 86; cvc-datatype-valid.1.2.1: ""#{environment.acceptsProfiles('development')}"" ist kein gültiger Wert für ""boolean"". 	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:399) 	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:336) 	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:304) 	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:181) 	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:217) 	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:188) 	at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:125) 	at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:94) 	at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:129) 	at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:605) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:509) 	at net.veda.pluginframework.core.context.ContextBuilder.lambda$buildContext$6(ContextBuilder.java:46) 	at net.veda.pluginframework.core.context.ContextBuilder$$Lambda$16/520422343.accept(Unknown Source) 	at java.util.Optional.ifPresent(Optional.java:159) 	at net.veda.pluginframework.core.context.ContextBuilder.buildContext(ContextBuilder.java:44) 	at net.veda.pluginframework.core.web.AbstractPluginApplicationInitializer.createCoreApplicationMvcContext(AbstractPluginApplicationInitializer.java:221) 	at net.veda.pluginframework.core.web.AbstractStandardPluginApplicationInitializer.start(AbstractStandardPluginApplicationInitializer.java:47) 	at net.veda.pluginframework.core.web.AbstractPluginApplicationInitializer.onStartup(AbstractPluginApplicationInitializer.java:125) 	at org.springframework.web.SpringServletContainerInitializer.onStartup(SpringServletContainerInitializer.java:175) 	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5244) 	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:147) 	... 10 more Caused by: org.xml.sax.SAXParseException; lineNumber: 30; columnNumber: 86; cvc-datatype-valid.1.2.1: ""#{environment.acceptsProfiles('development')}"" ist kein gültiger Wert für ""boolean"". 	at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.createSAXParseException(ErrorHandlerWrapper.java:203) 	at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.error(ErrorHandlerWrapper.java:134) 	at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:437) 	at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:368) 	at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:325) 	at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator$XSIErrorReporter.reportError(XMLSchemaValidator.java:458) 	at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.reportSchemaError(XMLSchemaValidator.java:3237) 	at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.processOneAttribute(XMLSchemaValidator.java:2832) 	at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.processAttributes(XMLSchemaValidator.java:2769) 	at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.handleStartElement(XMLSchemaValidator.java:2056) 	at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.startElement(XMLSchemaValidator.java:746) 	at com.sun.org.apache.xerces.internal.impl.XMLNSDocumentScannerImpl.scanStartElement(XMLNSDocumentScannerImpl.java:379) 	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl$FragmentContentDriver.next(XMLDocumentFragmentScannerImpl.java:2786) 	at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:606) 	at com.sun.org.apache.xerces.internal.impl.XMLNSDocumentScannerImpl.next(XMLNSDocumentScannerImpl.java:117) 	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:510) 	at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:848) 	at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:777) 	at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:141) 	at com.sun.org.apache.xerces.internal.parsers.DOMParser.parse(DOMParser.java:243) 	at com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderImpl.parse(DocumentBuilderImpl.java:348) 	at org.springframework.beans.factory.xml.DefaultDocumentLoader.loadDocument(DefaultDocumentLoader.java:76) 	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadDocument(XmlBeanDefinitionReader.java:429) 	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:391) 	... 30 more ```  Is there any way to get this working or I'am trying the wrong thing?    ---  **Affects:** 4.2.2","closed","status: invalid,","spring-projects-issues","2016-02-16T07:59:23Z","2019-01-12T05:23:08Z"
"","18034","AOP: LoadTimeWeaving not working for @Configurable annotated POJO [SPR-13454]","**[Christian Mäder](https://jira.spring.io/secure/ViewProfile.jspa?name=cimnine)** opened **[SPR-13454](https://jira.spring.io/browse/SPR-13454?redirect=false)** and commented  I can't get the `@Configurable` annotation working and I think I did everything right. In the simple example, which I attached, there's always a `NullPointerException` when the `NotSoSpring` class tries to access the `springComponent` on line 21.  The example must be run with `-javaagent:org.springframework.instrument.jar`.  If this was an error on my end, feel free to respond at my SO-question (see Reference URL) to earn your Reputation-Points.   ---  **Affects:** 4.1.7  **Reference URL:** http://stackoverflow.com/questions/32331593/spring-load-time-weaving-not-working-on-configurable-object  **Attachments:** - [demo.zip](https://jira.spring.io/secure/attachment/23105/demo.zip) (_3.48 kB_)","closed","status: bulk-closed,","spring-projects-issues","2015-09-09T12:44:21Z","2019-01-12T00:15:46Z"
"","18751","Should @Configuration mark @Inject fields and setters as satisfied (injected)? [SPR-14180]","**[Christian Hersevoort](https://jira.spring.io/secure/ViewProfile.jspa?name=chersevoort)** opened **[SPR-14180](https://jira.spring.io/browse/SPR-14180?redirect=false)** and commented  Somewhat related to my other issue: #18750 (It's a different way to solve the same problem)  The case is as follows:  Beans: * MyParentBean * MyChildBeanA implements MyChildBean * MyChildBeanB implements MyChildBean  ```java @Configuration public class MyBeanConfiguration { 	@Bean 	public MyParentBean myParentBean(MyChildBeanA childBeanA) 	{ 		MyParentBean myParentBean = new MyParentBean(); 		myParentBean.setMyChild(childBeanA); 		return myParentBean; 	} }  @Component public class MyParentBean { 	private MyChildBean myChild;  	@Inject 	public void setMyChild(MyChildBean myChild) 	{ 		this.myChild = myChild; 	} } ```  I expect the MyParentBean.myChild field to only be Injected by the `@Configuration`, and not by both ConfigurationClassPostProcessor and the AutowiredAnnotationBeanPostProcessor.  Expected: 1. ConfigurationClassPostProcessor calls MyBeanConfiguration 2. MyParentBean is created and field/property myChild is set. 3. myChild is marked as satisfied(Injected)  What happens: 1. ConfigurationClassPostProcessor calls MyBeanConfiguration 2. MyParentBean is created and field/property myChild is set. 3. AutowiredAnnotationBeanPostProcessor tries to Inject myChild again, but fails and throws a NoUniqueBeanDefinitionException  Changing between field and property injection doesn't help either e.g:  ```java @Component public class MyParentBean { 	@Inject 	private MyChildBean myChild; } ```  Changing `@Bean` to `@Bean`(autowire = Autowire.NO) doesn't help either, e.g:  ```java @Configuration public class MyBeanConfiguration { 	@Bean(autowire = Autowire.NO) 	public MyParentBean myParentBean(MyChildBeanA childBeanA) 	{ 		MyParentBean myParentBean = new MyParentBean(); 		myParentBean.setMyChild(childBeanA); 		return myParentBean; 	} } ```  Is this expected behavior? I expect org.springframework.beans.factory.annotation.InjectionMetadata.InjectedElement#checkPropertySkipping to be true and skip injection.  If this is expected behavior: is there a way to prevent `@Bean` to be injected again by the AutowiredAnnotationBeanPostProcessor?  ---  **Issue Links:** - #18750 Inconsistency between property Injection and setter Injection causes NoUniqueBeanDefinitionException - #18854 Clarify `@Bean`(autowire=NO)","open","type: enhancement,","spring-projects-issues","2016-04-15T12:20:37Z","2019-01-14T04:39:43Z"
"","18750","Inconsistency between property Injection and setter Injection causes NoUniqueBeanDefinitionException [SPR-14179]","**[Christian Hersevoort](https://jira.spring.io/secure/ViewProfile.jspa?name=chersevoort)** opened **[SPR-14179](https://jira.spring.io/browse/SPR-14179?redirect=false)** and commented  The case is as follows:  Beans: - MyParentBean - MyChildBeanA implements MyChildBean - MyChildBeanB implements MyChildBean  XML configuration:  ```xml      	  ```  Case #1: **This works:**  ```java public class MyParentBean { 	private MyChildBean myChild;  	@Inject 	public void setMyChild(MyChildBean myChild) 	{ 		this.myChild = myChild; 	} } ```  Case #2: **This doesn't work:**  ```java public class MyParentBean { 	@Inject 	private MyChildBean myChild; } ```  I expect Spring to handle both cases exactly the same, but Case #2 throws an unexpected NoUniqueBeanDefinitionException. (see attachment)  Am I wrong to assume this is a bug?  ---  **Affects:** 4.2.1, 4.2.5, 4.3 RC1  **Attachments:** - [stacktrace.txt](https://jira.spring.io/secure/attachment/23373/stacktrace.txt) (_7.43 kB_)  **Issue Links:** - #18751 Should `@Configuration` mark `@Inject` fields and setters as satisfied (injected)?","closed","status: declined,","spring-projects-issues","2016-04-15T10:38:24Z","2019-01-13T05:26:20Z"
"","18588","MockHttpServletResponse setIntHeader throws Exception when passed an int value for 'Content-length' [SPR-14016]","**[Chris Tosspon](https://jira.spring.io/secure/ViewProfile.jspa?name=tosspon.chris@gmail.com)** opened **[SPR-14016](https://jira.spring.io/browse/SPR-14016?redirect=false)** and commented  Using Spring 4.1.8.RELEASE, testing a controller method with a response.setIntHeader('Content-length', 5) throws the following Exception  ``` java.lang.Integer cannot be cast to java.lang.String java.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.String 	at org.springframework.mock.web.MockHttpServletResponse.setSpecialHeader(MockHttpServletResponse.java:513) ```  As it seems to be a valid use case to manually set a Content-length header with an integer, the cast of the Object value to String type  inside the setSpecialHeader method should be conditional.  ``` setContentLength(Integer.parseInt((String) value)); ```  I have supplied a referenceURL with an example app/test case that shows the unexpected behavior. It's a gradle/grails project that can be run with `./gradlew test`  ---  **Affects:** 4.1.8  **Reference URL:** https://github.com/cTwospoons/mock-http-response-int-header-exception  **Issue Links:** - #18325 MockHttpServletResponse.setIntHeader throws exception for 'Content-Length' header (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2016-03-03T19:42:31Z","2019-01-12T16:45:46Z"
"","18179","Cannot pass method argument in custom annotation [SPR-13601]","**[Chris Korakidis](https://jira.spring.io/secure/ViewProfile.jspa?name=ckorakidis)** opened **[SPR-13601](https://jira.spring.io/browse/SPR-13601?redirect=false)** and commented  I'm trying to use something similar to `org.springframework.cache.annotation.Cacheable` :  Custom annotation:  ```java @Target(ElementType.METHOD)      @Retention(RetentionPolicy.RUNTIME)      @Documented      public @interface CheckEntity {          String message() default ""Check entity msg"";          String key() default """";      } ```  Aspect:  ```java @Component @Aspect public class CheckEntityAspect {     @Before(""execution(* *.*(..)) && @annotation(checkEntity)"")     public void checkEntity(JoinPoint joinPoint, CheckEntitty checkEntity) {         System.out.println(""running entity check: "" + joinPoint.getSignature().getName());     } } ```  Service:  ```java @Service @Transactional public class EntityServiceImpl implements EntityService {     @CheckEntity(key = ""#id"")     public Entity getEntity(Long id) {         return new Entity(id);     } }     ```  My IDE (IntelliJ) doesn't see anything special with the `key = ""#id""` usage in contrast to similar usages for `Cacheable` where it's shown with different color than plain text. I'm mentioning the IDE part just as a hint in case it helps, it looks like the IDE is aware in advance about these annotations or it just realizes some connection which doesn't exist in my example.  The value in the checkEntity.key is '#id' instead of an expected number. I tried using `ExpressionParser` but possibly not in the right way.  The only way to get parameter value inside the checkEntity annotation is by accessing the arguments array which is not what I want because this annotation could be used also in methods with more than one argument.  Any idea?   --- No further details from [SPR-13601](https://jira.spring.io/browse/SPR-13601?redirect=false)","closed","in: core,","spring-projects-issues","2015-10-22T23:44:32Z","2019-01-12T05:23:35Z"
"","18090","Documentation for Portlet MVC does not refer to Portlet 2.0 spec (JSR-286) [SPR-13513]","**[Chas B](https://jira.spring.io/secure/ViewProfile.jspa?name=chas)** opened **[SPR-13513](https://jira.spring.io/browse/SPR-13513?redirect=false)** and commented  The Spring reference documentation at section 4.2.2 regarding Spring-MVC-Portlet, specifically mentions Portlet spec 1.0 (JSR-168) - however, it seems that Spring does also support Portlet 2.0 (JSR-286) or Portlet Spec 3.0 (JSR-362) - they should perhaps also be mentioned so that developers do not disregard the framework as being unable to develop portlet spec 2 or 3 portlets.  * 4.2.2 Doc Ref: http://docs.spring.io/spring/docs/4.2.2.BUILD-SNAPSHOT/spring-framework-reference/htmlsingle/#portlet-introduction * Related StackOverflow Question: https://stackoverflow.com/questions/2068605/does-spring-3-0-really-support-jsr-286 * JSR-362 Portlet 3.0 Spec: https://www.jcp.org/en/jsr/detail?id=362 * JSR-286 Portlet 2.0 Spec: https://www.jcp.org/en/jsr/detail?id=286 * JSR-168 Portlet 1.0 Spec: https://www.jcp.org/en/jsr/detail?id=168  ---  **Affects:** 3.2.14, 4.1.7, 4.2.2  **Reference URL:** http://docs.spring.io/spring/docs/4.2.2.BUILD-SNAPSHOT/spring-framework-reference/htmlsingle/#portlet-introduction  **Issue Links:** - #18096 Upgrade to Portlet API 2.1  **Backported to:** [4.1.8](https://github.com/spring-projects/spring-framework/milestone/132?closed=1), [3.2.15](https://github.com/spring-projects/spring-framework/milestone/103?closed=1)","closed","type: documentation,","spring-projects-issues","2015-09-27T11:28:15Z","2019-01-11T17:28:37Z"
"","18066","Improve error reporting for template rendering in ScriptTemplateView [SPR-13488]","**[chanwook park](https://jira.spring.io/secure/ViewProfile.jspa?name=chanwook)** opened **[SPR-13488](https://jira.spring.io/browse/SPR-13488?redirect=false)** and commented  ScripTemplateView is rendering in Nashorn ScriptEngine. This rendering phase is difficult point for debugging (because in JDK Nashorn class...). Server-side rendering (by Nashorn) is originally weak debugging than client-side rendering. (by browser)  So I hope to some additionally feature and support to debugging.  For example, compiled HTML often helpful debugging way than static template HTML, when developing mobile screen, or debugging for unusual condition(ex. Device fragmentation problem), logged compiled HTML is used to inspection in native browser (Chrome, etc.)  Below comment by Sébastien, I hope to more detailed way.  > Indeed logging and debugging are not that great with Nashorn. That said, debugging is still possible using a browser. > For logging, there is perhaps a room for improvement on Spring MVC side, since we currently return the Javascript error message, but in the whole Nashorn stacktrace. Maybe just returning the Javascript error message should be enough depending of the log level...  thanks.  * Discuss item : https://groups.google.com/d/msg/spring-framework-contrib/gsYheHuy9SM/GG2fcZI9DQAJ  ---  **Affects:** 4.2.1  **Issue Links:** - #18133 Improve error reporting in StandardScriptEvaluator  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/158028881575fb3f00f96579a04ca52857afa375","closed","type: enhancement,","spring-projects-issues","2015-09-23T00:49:45Z","2019-01-11T17:21:35Z"
"","18065","Consider Nashorn ScriptEngine instance scope in ScriptTemplateView [SPR-13487]","**[chanwook park](https://jira.spring.io/secure/ViewProfile.jspa?name=chanwook)** opened **[SPR-13487](https://jira.spring.io/browse/SPR-13487?redirect=false)** and commented  Spring MVC mechanism is create one instance for View (View = URL). And ScriptViewTemplate has one Nashorn's ScriptEngine (SpringTemplateView#engine), or more ScriptEngine instances because using ThreadLocal (ScriptTemplateView#engineHolder). For example, app has 1000 view(URL), then create 1000 ScriptTemplateView instance and at the same time create 1000 Nashorn’s ScriptEngine instance(or more +). And one ScriptEngine is loaded only one template HTML.  In my case, I have been used like that caused memory consumption. (I've been used JDK6+Rhino+Dust)  I hope to more careful managing view instance and Nashorn's ScriptEngine instance. Maybe not consider share and DI to SpringEngine instance? Of course, aspect of concurrency and resource management.  Thanks.  * Discuss topic with Sébastien : https://groups.google.com/d/msg/spring-framework-contrib/gsYheHuy9SM/GG2fcZI9DQAJ  ---  **Affects:** 4.2.2  **Issue Links:** - #18069 Revise script engine retrieval for better error reporting  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c7fd4ccf4848c39d68524f68a668833f2fa4a07e, https://github.com/spring-projects/spring-framework/commit/cffad9d4b192cbfa61339fe4ca34985c11d5c420","closed","type: enhancement,","spring-projects-issues","2015-09-23T00:32:17Z","2019-01-11T17:21:23Z"
"","18030","Instances of concurrentHaspMap inside PerConnectionWebSocketHandler not being cleaned up [SPR-13450]","**[Chandan](https://jira.spring.io/secure/ViewProfile.jspa?name=cpandey05)** opened **[SPR-13450](https://jira.spring.io/browse/SPR-13450?redirect=false)** and commented  We have been doing some load tests with our application developed using Spring Websockets with SockJs support. It is deployed in WebSphere container and mostly uses XHR or other Comet technique as WAS does not have websocket support. We have used PerConnectionWebSocketHandler. As browsers establish connection, number of this class increase in memory but what we have observed that as the browsers close down these does not get cleaned up. This reports unusual high memory consumption.   ---  **Affects:** 4.1.5  **Attachments:** - [ConCurrentHashMaps.jpg](https://jira.spring.io/secure/attachment/23104/ConCurrentHashMaps.jpg) (_151.81 kB_)","closed","in: web,","spring-projects-issues","2015-09-09T09:56:45Z","2019-01-11T17:23:01Z"
"","18029","Lock acquired on object responseLock in method sendMessageInternal of class AbstractHttpSockJsSession is not released in some error condition resulting in deadlock [SPR-13449]","**[Chandan](https://jira.spring.io/secure/ViewProfile.jspa?name=cpandey05)** opened **[SPR-13449](https://jira.spring.io/browse/SPR-13449?redirect=false)** and commented  We are using spring version 4.1.5 and container is websphere(WAS). On server side we are using webscoket with SockJs -need fallback mechanism as WAS do not support websockets. Client is sockjs client -but instead of using messaging protocol (STOMP) over socket, we use JSON RPC. there could be more than 10 XHR requests per second. While doing some more load testing and negative scenarios -like abruptly closing browsers, idle period in browsers etc. we run in scenario where one of thread to send message acquire lock on object responseLock in method sendMessageInternal of class AbstractHttpSockJsSession -resulting in blocked state. As perconnection handler is being used, subsequent requests are served but over period cpu usage increases as number of blocked threads increase.  ``` Waiting for Monitor Lock on java/lang/Object@0x0000000022416F08 (This is object lock while sending message) at org/springframework/web/socket/sockjs/transport/session/AbstractHttpSockJsSession.sendMessageInternal(AbstractHttpSockJsSession.java:279(Compiled Code))  at org/springframework/web/socket/sockjs/transport/session/AbstractSockJsSession.sendMessage(AbstractSockJsSession.java:161(Compiled Code))  at com/avaya/cecobrowsega/cobrowse/service/handler/AgentConnectionHandlerImpl.send(AgentConnectionHandlerImpl.java:579(Compiled Code))  ```  The send message is like this  ```java @Override public void send(String data) throws IOException {     webSocketSession.sendMessage(new TextMessage(data)); } ```  synchronzing the ""webSocketSession"" helps alleviate the issue -but I am not very sure what is happening here. Do we need to handle threading issue in our handler implementation or is there a contention at AbstractHttpSockJsSession  I saw a similar issue @ #17911 but then it was specific to STOMP  ---  **Affects:** 4.1.5  **Issue Links:** - #17911 Race condition when inbound message handling fails and StompSubProtocolHandler sends ERROR frame","closed","status: declined,","spring-projects-issues","2015-09-09T09:46:44Z","2019-01-14T04:41:53Z"
"","18272","Compile Time Injection [SPR-13697]","**[cemo koc](https://jira.spring.io/secure/ViewProfile.jspa?name=cemokoc)** opened **[SPR-13697](https://jira.spring.io/browse/SPR-13697?redirect=false)** and commented  I have searched but could not find an appropriate issue for this. Is there any issue for discussing compile time injection? This might be a good candidate for Spring 5.   ---  **Affects:** 4.2.3","closed","status: bulk-closed,","spring-projects-issues","2015-11-17T12:03:10Z","2019-01-12T02:44:56Z"
"","18478","STOMP over SockJS is unreliable [SPR-13904]","**[Carsten Madsen](https://jira.spring.io/secure/ViewProfile.jspa?name=cmadsen)** opened **[SPR-13904](https://jira.spring.io/browse/SPR-13904?redirect=false)** and commented  Open client connections using:  ```java RestTemplateXhrTransport xhrTransport = new RestTemplateXhrTransport(new RestTemplate()); transports.add(xhrTransport); sockJsClient = new SockJsClient(transports); stompClient = new WebSocketStompClient(sockJsClient); ```  are suddenly terminated (after running for hours) by the server saying: The remote endpoint was in state TEXT_PARTIAL_WRITING ...  ``` [2016-01-29 03:37:57,126] org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.logWriteFrameFailure(AbstractSockJsSession.java:363) [DEBUG] [clientOutboundChannel-5] Terminating connection after failure to send message to client         at org.springframework.web.socket.sockjs.transport.session.WebSocketServerSockJsSession.writeFrameInternal(WebSocketServerSockJsSession.java:222)         at org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.writeFrame(AbstractSockJsSession.java:325)         at org.springframework.web.socket.sockjs.transport.session.WebSocketServerSockJsSession.sendMessageInternal(WebSocketServerSockJsSession.java:212)         at org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.sendMessage(AbstractSockJsSession.java:161) [2016-01-29 03:37:57,135] org.springframework.web.socket.handler.LoggingWebSocketHandlerDecorator.handleTransportError(LoggingWebSocketHandlerDecorator.java:62) [DEBUG] [clientOutboundChannel-5] Transport error in WebSocketServerSockJsSe ssion[id=9f7bc8010fda4275bfd5426d76e95e0a]         at org.springframework.web.socket.sockjs.transport.session.WebSocketServerSockJsSession.disconnect(WebSocketServerSockJsSession.java:230)         at org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.writeFrame(AbstractSockJsSession.java:331)         at org.springframework.web.socket.sockjs.transport.session.WebSocketServerSockJsSession.sendMessageInternal(WebSocketServerSockJsSession.java:212)         at org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.sendMessage(AbstractSockJsSession.java:161) [2016-01-29 03:37:57,136] org.springframework.web.socket.handler.LoggingWebSocketHandlerDecorator.afterConnectionClosed(LoggingWebSocketHandlerDecorator.java:70) [DEBUG] [clientOutboundChannel-5] WebSocketServerSockJsSession[id=9f7bc8010 fda4275bfd5426d76e95e0a] closed with CloseStatus[code=1011, reason=null] org.springframework.web.socket.sockjs.SockJsTransportFailureException: Failed to write SockJsFrame content='a[""MESSAGE\ndestination:/vtsdb/global/manTrack\ncontent-type:application/json;ch...(truncated)'; nested exception is java.lang.Il legalStateException: The remote endpoint was in state [TEXT_PARTIAL_WRITING] which is an invalid state for called method         at org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.writeFrame(AbstractSockJsSession.java:342)         at org.springframework.web.socket.sockjs.transport.session.WebSocketServerSockJsSession.sendMessageInternal(WebSocketServerSockJsSession.java:212)         at org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.sendMessage(AbstractSockJsSession.java:161)         at org.springframework.web.socket.sockjs.transport.session.WebSocketServerSockJsSession.writeFrameInternal(WebSocketServerSockJsSession.java:222)         at org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.writeFrame(AbstractSockJsSession.java:325) ```  if I switch to:  ```java StandardWebSocketClient wsClient = new StandardWebSocketClient(); transports.add(new WebSocketTransport(wsClient)); ```  the client connections becomes even more unstable receiving what appears to corrupt frames with a wrong payload length (wireshark).  I have dumped the frames that causes the client to disconnct from wireshark and tried manually to decode it:  ``` byte[] inputBuffer = DatatypeConverter.parseHexBinary(""615b224d4553534147455c6e64657374696e6174696f6e3a2f76747364622f676c6f62616c2f5472616e7369745c6e636f6e74656e742d747970653a6170706c69636174696f6e2f6a736f6e3b636861727365743d5554462d385c6e737562736372697074696f6e3a325c6e6d6573736167652d69643a64303732363761666362333634653530626562373830393937613835653939662d313633333134375c6e636f6e74656e742d6c656e6774683a3135305c6e5c6e7b5c227374616c656169735c223a6e756c6c2c5c227374616c6574696d656169735c223a6e756c6c2c5c226576656e74747970655c223a5c227570646174655c222c5c227768656e6c6173747570646174655c223a5c22536174204a616e2032332031343a31393a30362055544320323031365c222c5c2269645c223a5c2235356632313835622d306461352d343339302d623961302d3533336532323432313833635c227d5c7530303030225d""); 			int readPos = 0; 			int b = inputBuffer[readPos++]; 			boolean fin = (b & 0x80) > 0; 			int rsv = (b & 0x70) >>> 4; 			byte opCode = (byte) (b & 0x0F); 			b = inputBuffer[readPos++]; 			long payloadLength = b & 0x7F; 			int headerLength = 0; 			if (payloadLength == 126) { 				headerLength += 2; 			} else if (payloadLength == 127) { 				headerLength += 8; 			} 			if (payloadLength == 126) { 				payloadLength = byteArrayToLong(inputBuffer, readPos, 2); 				readPos += 2; 			} else if (payloadLength == 127) { 				payloadLength = byteArrayToLong(inputBuffer, readPos, 8); 				readPos += 8; 			}  			out.println(format( 					""fin %s rsv %d opcode %d payloadLength %d isControl %s"", 					fin, rsv, opCode, payloadLength, isControl(opCode))); ```  The stacktrace when a client receives a (corrupt?) frame is:  ```java org.springframework.messaging.simp.stomp.ConnectionLostException: Connection closed 	at org.springframework.messaging.simp.stomp.DefaultStompSession.afterConnectionClosed(DefaultStompSession.java:459) 	at org.springframework.web.socket.messaging.WebSocketStompClient$WebSocketTcpConnectionHandlerAdapter.afterConnectionClosed(WebSocketStompClient.java:353) 	at org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession.afterTransportClosed(AbstractClientSockJsSession.java:321) 	at org.springframework.web.socket.sockjs.client.WebSocketTransport$ClientSockJsWebSocketHandler.afterConnectionClosed(WebSocketTransport.java:172) 	at org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter.onClose(StandardWebSocketHandlerAdapter.java:143) 	at org.apache.tomcat.websocket.WsSession.fireEndpointOnClose(WsSession.java:527) 	at org.apache.tomcat.websocket.WsSession.onClose(WsSession.java:511) 	at org.apache.tomcat.websocket.WsFrameBase.processDataControl(WsFrameBase.java:342) 	at org.apache.tomcat.websocket.WsFrameBase.processData(WsFrameBase.java:284) 	at org.apache.tomcat.websocket.WsFrameBase.processInputBuffer(WsFrameBase.java:130) 	at org.apache.tomcat.websocket.WsFrameClient.processSocketRead(WsFrameClient.java:73) 	at org.apache.tomcat.websocket.WsFrameClient.access$300(WsFrameClient.java:31) 	at org.apache.tomcat.websocket.WsFrameClient$WsFrameClientCompletionHandler.completed(WsFrameClient.java:125) 	at org.apache.tomcat.websocket.WsFrameClient$WsFrameClientCompletionHandler.completed(WsFrameClient.java:108) 	at sun.nio.ch.Invoker.invokeUnchecked(Unknown Source) 	at sun.nio.ch.Invoker$2.run(Unknown Source) 	at sun.nio.ch.AsynchronousChannelGroupImpl$1.run(Unknown Source) 	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source) 	at java.lang.Thread.run(Unknown Source) ```  If I dump only the printable text of the frame from wireshark it looks like this:  ``` [""MESSAGE\ndestination:/vtsdb/global/Transit\ncontent-type:application/json;charset=UTF-8\nsubscription:2\nmessage-id:d07267afcb364e50beb780997a85e99f-1633147\ncontent-length:150\n\n{\""staleais\"":null,\""staletimeais\"":null,\""eventtype\"":\""update\"",\""whenlastupdate\"":\""Sat Jan 23 14:19:06 UTC 2016\"",\""id\"":\""55f2185b-0da5-4390-b9a0-533e2242183c\""}\u0000""] ```  which looks like a sane message to me.    ---  **Affects:** 4.2.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f053cdec5158ab7cbf01526f967c42aefa924e11, https://github.com/spring-projects/spring-framework/commit/09a40b8a081efc1510d5c30803a395a163c58499","closed","type: bug,","spring-projects-issues","2016-01-29T09:53:24Z","2016-02-25T09:36:35Z"
"","18606","Introduce support for test-scoped beans in the TestContext framework [SPR-14034]","**[Caleb Cushing](https://jira.spring.io/secure/ViewProfile.jspa?name=xenoterracide)** opened **[SPR-14034](https://jira.spring.io/browse/SPR-14034?redirect=false)** and commented  I'd like to be able to register a bean as `@Scope(""test"")` (or `@TestScope`), so that after an integration test is executed this bean is cleaned up. I don't want to use `@DirtiesContext` because this is the only bean I want to throw away.  For the actual use case I've built a sort of ""Login Manager"" for selenium that knows which user is currently logged in and which roles have test users created for them. This can't be shared between tests because we only allow a single session for a user.  I looked to see if this exists in the reference documentation and couldn't find anything.  ## Related Issues  - #13352 Publish TestStarted and TestCompleted events in the TestContext framework - #18490 Publish TestExecutionListener events to the ApplicationContext under test  --- No further details from [SPR-14034](https://jira.spring.io/browse/SPR-14034?redirect=false)","open","type: enhancement,","spring-projects-issues","2016-03-09T18:33:58Z","2021-12-06T08:55:50Z"
"","18489","MessageSource Internationalization/Localization needs simpler API [SPR-13915]","**[Caleb Cushing](https://jira.spring.io/secure/ViewProfile.jspa?name=xenoterracide)** opened **[SPR-13915](https://jira.spring.io/browse/SPR-13915?redirect=false)** and commented  So at work we have this  ``` Application.gettext( ""code"" ) ```  and in a personal app I'm writing I have this  ```java public class Messenger {      private final MessageSource source;      @Autowired     public Messenger( final MessageSource source ) {         this.source = source;     }      public String getMessage( final String code ) {         return this.source.getMessage( new DefaultMessageSourceResolvable( code ), Locale.ENGLISH );     } } ```  both attempt to serve the purpose that the MessageSource API is a bit gnarly for use.  it seems to me that it'd be easy to inject the locale, and only expose the code, as both I am and my employer is.  now to be fair, neither of us are truly using full internationalizations support, it's more of a way of keeping hard coded strings out of the app, so it's possible I'm missing something.  another thought I had was that it might be nice to be able to autowire strings using an annotation  ``` @Message( ""my.header"" ) private String header; ```    ---  1 votes, 1 watchers","closed","status: bulk-closed,","spring-projects-issues","2016-02-04T05:19:55Z","2019-01-12T02:43:55Z"
"","18110","@Autowired setter injection an @Configuration class not working as documented [SPR-13534]","**[Caleb Cushing](https://jira.spring.io/secure/ViewProfile.jspa?name=xenoterracide)** opened **[SPR-13534](https://jira.spring.io/browse/SPR-13534?redirect=false)** and commented  http://stackoverflow.com/q/32925683/206466 http://stackoverflow.com/a/32926397/206466  > After some experimentation, I found that if I annotate my ""setter"" (setter injection) with `@Required` it will get run, thought it requires `@Autowired` too contrary to documentation. This is a little simpler, and cleaner than using field injection and `@PostConstruct`.  ```java @Configuration class Jackson {     @Required    @Autowired    void configureObjectMapper( final ObjectMapper objectMapper ) {     objectMapper.disable( SerializationFeature.WRITE_DATES_AS_TIMESTAMPS );    } } ```  It appears that this may actually have been one of two problems A. the new DevTools class reloading functionality did not pick up the change correctly or B some other local environment snafus. Presuming it's A I'm unsure how to proceed with this bug report, should it be migrated elsewhere? that kind of bug isn't exactly easy to reproduce, is having this report even useful?  ---  **Issue Links:** - #18050 Detect `@Autowired` constructors for configuration classes","closed","status: invalid,","spring-projects-issues","2015-10-03T19:17:58Z","2019-01-13T05:35:20Z"
"","18045","JMS Listener not getting message is scope prototype [SPR-13466]","**[Caleb Cushing](https://jira.spring.io/secure/ViewProfile.jspa?name=xenoterracide)** opened **[SPR-13466](https://jira.spring.io/browse/SPR-13466?redirect=false)** and commented  This component doesn't receive messages  ```java @Component @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE) public class ListeningController {  	@JmsListener(destination = MainController.QUEUE) 	public void listen(final MyEntity entity) { 		LoggerFactory.getLogger(this.getClass()).info(""'{}' {}"", entity.getName(), entity.getId()); 	}   } ```  I grab it before sending the message and it shouldn't be gc-ed until after  ```java public void message() throws InterruptedException {      ListeningController listeningController = listeningProvider.getObject();      EmitterController emitterController = new EmitterController(template, repository);      emitterController.saveNewMyEntity();      LoggerFactory.getLogger(this.getClass()).info(""{}"", listeningController);      Thread.sleep(10000); } ```  It works fine if I remove `@Scope`( ""prototype"" ), this is an unexpected behavior change.  here's a link to all the code, note that this code is in branch jms, and master does not have this code. I am trying to find an alternative to google's guava EventBus, our senders and listeners are ""short lived"", they may have up to the life of a session, but most will not live that long. We want listeners to receive events when they're still alive but not have the ""event bus"" hold on to them to keep them alive.  https://bitbucket.org/xenoterracide/spring-eventbus-solutions/src/3169cd1dd777cfc625f4353edbaa89fd28a4736d/src/main/java/com/xenoterracide?at=jms   ---  **Affects:** 4.1.7","closed","status: bulk-closed,","spring-projects-issues","2015-09-15T15:15:02Z","2019-01-12T00:15:43Z"
"","18832","Allow server side includes of spring managed handler methods [SPR-14260]","**[Cagatay Kalan](https://jira.spring.io/secure/ViewProfile.jspa?name=cagataykalan)** opened **[SPR-14260](https://jira.spring.io/browse/SPR-14260?redirect=false)** and commented  Allow something like  tag to import mvc handler methods within another handler method execution. This is supported by Grails framework and also by ASP .NET MVC as ""child actions"".  This is different than including partial jsp's or views because controller actions can coordinate business logic, data access and etc. This suits better to the MVC model and also it is independent of the view technology used. Also for the developer, it is the easiest way to create reusable controller logic as sub components and separate controller logic and view logic.  This is also very different from using  or  JSTL tag such that same request context is accessible from the child actions and also child actions can set response status, send redirects and etc. jsp:include can only include jsp views but not controller actions while c:import executes a completely new request where child actions can not access the attributes put by the main request. This prevents action communication and also it is not possible to get information about the nested handler execution stack.  Another benefit ( if implemented ) will be to hide child actions from outside access which you can not do with  so that child handler method responds only to include requests. This hides internal implementations from access through a public URL. ASP .NET MVC supports this by annotating a handler method with a ""ChildActionOnly"" annotation and since Grails has its own way of handling url mappings to actions, it is possible to hide an action from direct url access.  An important requirement for this feature is that, the child request must have its own request parameters to ensure reusability.  So, although this can be implemented in an external project rather than spring-framework itself, I think this must be an internal capability of a MVC framework because of the above requirements. Even if this may be done with a third party library, eventually there will be requirements to override the default annotated method handling logic in RequestMappingHandlerMapping to provide information about the handler call stack ( for nested includes ) for display and exception handling scenarios or to prevent direct access to these actions.  Inspiring from the Grails Framework and Apache Tomcat SSI filter implementations, I implemented this feature as a pull-request and also I created a sample application to show how it works. This implementation currently does not support hiding handler methods from direct url access and  no hierarchical state of handler executions is stored.  Pull request url is attached. Sample application link is also given in pull-request.   ---  **Affects:** 4.3 RC2  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1051","closed","in: web,","spring-projects-issues","2016-05-08T17:51:17Z","2019-01-11T17:03:23Z"
"","18824","Allow removal of error entries from Errors [SPR-14251]","**[Cagatay Kalan](https://jira.spring.io/secure/ViewProfile.jspa?name=cagataykalan)** opened **[SPR-14251](https://jira.spring.io/browse/SPR-14251?redirect=false)** and commented  org.springframework.validation.Errors interface and none of the implementations allow removal of binding or validation errors however in real life scenarios, it is a common requirement especially for conditional validation requirements.  Conditionally validating an object or a web request is more difficult then first validating it completely and then removing some specific field errors based on the condition. The former requires partial binding and validation ( manually ) but the latter only requires some basic if checks. Also, manual execution of binding and validation requires injection of a databinder, and prevents using automatic binding and validation support of request mapping handler method arguments in mvc scenarios.  As an example, imagine you have a registration form where a radio button decides if the account will be a personal or a corporate account. Based on this condition, for personal account, birthday will be required, and for corporate account, tax id will be required. If we can remove errors from the BindingResult, we can just put a model object and a  BindingResult argument to a request mapping handler method and then remove specific errors based on the ""accountType"" property's bound value.  Currently the only way to do this is to create another Errors or BindingResult object and copy specific errors to this new object which is ugly while supporting this feature in AbstractErrors seems to be pretty trivial.   ---  **Affects:** 4.3 RC1","closed","status: bulk-closed,","spring-projects-issues","2016-05-05T01:35:42Z","2019-01-12T00:14:13Z"
"","18347","spring mvc  not support (args/entity) primitive types [SPR-13773]","**[caau dung ngok](https://jira.spring.io/secure/ViewProfile.jspa?name=chaodongyue)** opened **[SPR-13773](https://jira.spring.io/browse/SPR-13773?redirect=false)** and commented  I inherited PropertyEditorSupport, andInitBinder registered support for native numeric types, but in the end still displays the conversion failed. Is failure occurs during the conversion to float, but can be successful int Track source code found TypeConverterDelegate 273 line when on findings about CustomEditor conversion type is not equal, because it is 0, the shaping, certainly not equal. and then re-cast in the 283 line into a conversion failed. What I want is, if it is to convert an empty string value to 0 will, I imagine struts2 as support for native types, if the value allows empty, not set null, I do not want to packaging type, I think it is set to zero. How can I do this effect, it troubled me a few days.  Here is my Controller and ""Order"" entity  ```java @RequestMapping(value = ""saveOrder.action"", method = RequestMethod.POST) @ResponseBody public int saveOrder(int id,@RequestParam YearMonth md ,Order order) throws IOException, ParseException { 	int result = service.saveOrder(id, md,  order); 	return result; }  public class Order{ 	private int id; 	private LocalDate md; 	private float exchangeRate; 	 	//getter and setter } ```  When Exchange Rate in My page submission is empty String it is set to 0   ---  **Affects:** 4.2.3","closed","in: web,","spring-projects-issues","2015-12-07T15:55:49Z","2019-01-11T19:28:23Z"
"","18407","Add support for http byte-range requests for non-static resources [SPR-13834]","**[Burkhard Graves](https://jira.spring.io/secure/ViewProfile.jspa?name=dhukas)** opened **[SPR-13834](https://jira.spring.io/browse/SPR-13834?redirect=false)** and commented  #15431 adds support for http byte-range requests for serving **static** resources with a ResourceHttpRequestHandler.  It would be nice to have the same for **non-static** resources (e.g. streaming a video which was uploaded beforehand).  https://gist.github.com/davinkevin/b97e39d7ce89198774b4 shows a solution but it would be nice to have this in spring itself.  ---  **Affects:** 4.2.4  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/754  **Issue Links:** - #20344 Support range requests for Spring MVC request mapped methods that return a Resource (_**""duplicates""**_) - #19228 Add ResourceRegionHttpMessageWriter - #15431 Add support for http byte-range requests - #18795 Refactor HTTP Range support with a new ResourceRegion class (_**""is superseded by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/582014e944002609b562f6e4998935c06bbe6922, https://github.com/spring-projects/spring-framework/commit/c7bd3b844012a9bb214ca7203f110979c0890c00, https://github.com/spring-projects/spring-framework/commit/5ac31fb39d5b3a451a2cf6952e9c3799256eef0c  11 votes, 13 watchers","closed","has: votes-jira,","spring-projects-issues","2016-01-03T10:05:30Z","2019-01-11T18:32:29Z"
"","18813","CharacterEncodingFilter should have an option to avoid forcing encoding on responses [SPR-14240]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-14240](https://jira.spring.io/browse/SPR-14240?redirect=false)** and commented  Setting the `forceEncoding` option on this filter not only forces the encoding on the request, but also on the response itself, which is rather agressive and can lead to issues like described in #18698.  Adding a new `setForceResponseEncoding` option should allow to selectively force the encoding on the request only. Of course, this option should be set to `true` by default for backwards compatibility.  ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/05b29a4a17f612dea9cb09c6bc328ecb11b27e72, https://github.com/spring-projects/spring-framework/commit/76ee46847a67f70148eab524f7ab576b670441d4","closed","type: bug,","spring-projects-issues","2016-05-03T10:22:37Z","2019-01-11T17:05:16Z"
"","18795","Refactor HTTP Range support with a new ResourceRegion class [SPR-14221]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-14221](https://jira.spring.io/browse/SPR-14221?redirect=false)** and commented  With the latest improvements in HTTP Range support (see #18407), more responsibilities have been given to the `ResourceHttpMessageConverter`.  Meanwhile, the zero-copy support for static resources in our reactive efforts calls for a new `ResourceRegion` class. After discussing this matter with [Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma), it seems some refactoring can help here.  ---  **Affects:** 4.3 RC1  **Issue Links:** - #18407 Add support for http byte-range requests for non-static resources (_**""supersedes""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e5dbe12e850d2b7d56a02e099fc687fd06e9c6f8, https://github.com/spring-projects/spring-framework/commit/42d32ba3967572b288c049e4f3bc2eee357022dd, https://github.com/spring-projects/spring-framework/commit/5ac31fb39d5b3a451a2cf6952e9c3799256eef0c  0 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2016-04-26T10:31:38Z","2019-01-11T17:07:20Z"
"","18698","CharacterEncodingFilter should not force encoding on binary responses [SPR-14126]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-14126](https://jira.spring.io/browse/SPR-14126?redirect=false)** and commented  The `CharacterEncodingFilter` should not force encoding for binary responses. By default, this filter could by default not alter responses with `""image/*"", ""application/octet-stream""` media types; it should  also provide a way to configure media types that should be ignored.   ---  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/5459  2 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2016-04-06T15:37:15Z","2016-05-03T10:07:15Z"
"","18694","Initial compatibility with Undertow 2.0 [SPR-14122]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-14122](https://jira.spring.io/browse/SPR-14122?redirect=false)** and commented  [2.0.0.Alpha1 has been announced](https://twitter.com/undertow_io/status/717586433205080064).  ---  **Issue Links:** - #18073 Require Undertow 1.3.5+, Tyrus 1.11+, Jetty 9.3+, Tomcat 8.5+ - #18900 Compatibility with Undertow 1.4 - #18171 Make use of native doUpgrade operation in Undertow 1.3.5+ / 1.4 - #21015 Upgrade framework build to Tomcat 9.0 and Undertow 2.0","closed","type: task,","spring-projects-issues","2016-04-06T09:31:05Z","2019-01-11T16:40:41Z"
"","18615","XMLUnit 2.x support [SPR-14043]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-14043](https://jira.spring.io/browse/SPR-14043?redirect=false)** and commented  The XMLUnit project has a new home and the maintainers released a new 2.0 version.  ---  **Reference URL:** http://www.xmlunit.org/  **Issue Links:** - #19722 XmlExpectationsHelper.assertXmlEqual missing ""regardless of order"" case  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3635c9dbfe0ca35459e0b9b722b01894044cdc6d","closed","type: enhancement,","spring-projects-issues","2016-03-11T14:48:53Z","2019-01-11T15:00:59Z"
"","18599","springUrl Velocity macro should encode the given URI using the response [SPR-14027]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-14027](https://jira.spring.io/browse/SPR-14027?redirect=false)** and commented  Spring provides ways to rewrite resource URLs using the `ResourceUrlEncodingFilter` and `ResourceUrlProvider`. By using the `HttpServletResponse.encodeUrl` method, supported template engines can trigger that mechanism to rewrite the resource URL.  The dedicated Velocity macros provided by Spring, `springUrl` only prepends the URL with the context, instead of calling the actual method `RequestContext.getContextUrl`; this is actually done for the Freemarker equivalent.  In the meantime, developers who want this feature should override Spring's macro or declare their own like this:  ``` #macro( springResourceUrl $relativeUrl )$springMacroRequestContext.getContextUrl(${relativeUrl})#end ```  ---  **Affects:** 4.2.5  **Reference URL:** http://stackoverflow.com/questions/35844482/how-to-use-spring-resourceurlencodingfilter-with-velocity-template  **Issue Links:** - #9845 Binding in Velocity templates using EL accessors ([, ]) for collections produces non xhtml strict compliant output  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0a56667093856ef454bcc50dc6dc3b1a8263ebe3, https://github.com/spring-projects/spring-framework/commit/f76b38c5066a080ae6916fa8687bd6ab5aff53bd","closed","type: bug,","spring-projects-issues","2016-03-08T15:31:57Z","2019-01-11T15:04:16Z"
"","18590","Remove double slash from resolved WebJar resources [SPR-14018]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-14018](https://jira.spring.io/browse/SPR-14018?redirect=false)** and commented   ---  **Affects:** 4.2.5  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/986","closed","type: enhancement,","spring-projects-issues","2016-03-04T10:36:04Z","2016-04-06T08:38:12Z"
"","18487","Speed up AntPathMatcher by doing prefix-match [SPR-13913]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-13913](https://jira.spring.io/browse/SPR-13913?redirect=false)** and commented  ---  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/958  **Issue Links:** - #18713 AntPathMatcher regression in 4.3 RC1 - #18820 AntPathMatcher Regression for trimTokens=true  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0ab3f6092ca444e0bdfcb0a39aae6371c93641db, https://github.com/spring-projects/spring-framework/commit/3c92ddc94b04f1dc057125d336e5220c92351442, https://github.com/spring-projects/spring-framework/commit/c4117885bd61835159da14fb7fc9e3e28e1ddd31, https://github.com/spring-projects/spring-framework/commit/e77ff3c9911878b4e182476fdedaabda6f55ab69","closed","type: enhancement,","spring-projects-issues","2016-02-03T20:01:41Z","2019-01-11T19:07:17Z"
"","18456","Automatically register a fixed path pattern when using a FixedStrategy with VersionResourceResolver [SPR-13883]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-13883](https://jira.spring.io/browse/SPR-13883?redirect=false)** and commented  This has been raised originally as a [spring-boot issue](https://github.com/spring-projects/spring-boot/issues/4865).  When registering a `VersionResourceResolver` with a `FixedVersionStrategy`, the given fixed version is not automatically registered as a path pattern. This should be done automatically at configuration time, otherwise we can't serve requests that match the configured version, like `""/fixedversion/something.js""` - which defeats the original purpose...   ---  **Affects:** 4.2.4  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/4865  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bcebc9db7ed223a351adc69630424bff7a02ae32, https://github.com/spring-projects/spring-framework/commit/84fe46cd4376d14fbf8d0bb2e7e45bbec879d5a1","closed","type: enhancement,","spring-projects-issues","2016-01-22T16:19:37Z","2016-02-25T09:36:35Z"
"","18390","Preserve HTTP headers when caching resources in CachingResourceResolver [SPR-13817]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-13817](https://jira.spring.io/browse/SPR-13817?redirect=false)** and commented  See comment in #17963 - the `VersionResourceResolver` adds HTTP ETag headers but those aren't replayed by the `CachingResourceResolver`.  ---  **Affects:** 4.2.4  **Reference URL:** https://jira.spring.io/browse/SPR-13382?focusedCommentId=122671&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-122671  **Issue Links:** - #17963 VersionResourceResolver should add ETag headers when resolving resources  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d681f77d625d4815563511e6abb96827c8aec2a5, https://github.com/spring-projects/spring-framework/commit/3af62bd0ddc39db9e55232bab04315891adaeed0, https://github.com/spring-projects/spring-framework/commit/473cf9c40e266a416930249569550d19e92c2494, https://github.com/spring-projects/spring-framework/commit/158159709271927c0b9c691d05b88d5a1dd5fc3f","closed","type: bug,","spring-projects-issues","2015-12-23T15:04:04Z","2019-01-11T18:32:46Z"
"","18352","Support weak Etags in ShallowEtagHeaderFilter [SPR-13778]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-13778](https://jira.spring.io/browse/SPR-13778?redirect=false)** and commented  The current implementation of `ShallowEtagHeaderFilter` does not support weak Etags, which can be annoying. The web application may be hosted behind front-end servers or a CDN that rewrite ETags to their weak variants; they may do this because they're changing the response content (on-the-fly optimization) or because they don't simply support http range requests for such resources.  Either way, `ShallowEtagHeaderFilter` should allow two things:  * provide an option to generate weak Etags * by default, match both weak and strong etags if they match the generated MD5 hash  Thanks [Gunnar Hillert](https://jira.spring.io/secure/ViewProfile.jspa?name=hillert) for bringing this up!   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1c2ac49f2ac32ab0ee589bfc165046c14aa782c7","closed","type: enhancement,","spring-projects-issues","2015-12-08T16:07:17Z","2016-04-06T08:38:08Z"
"","18210","Add HTTP status 451: Unavailable For Legal Reasons [SPR-13632]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-13632](https://jira.spring.io/browse/SPR-13632?redirect=false)** and commented   ---  **Reference URL:** https://tools.ietf.org/html/draft-ietf-httpbis-legally-restricted-status-04","closed","type: enhancement,","spring-projects-issues","2015-11-02T10:28:33Z","2016-04-06T08:38:13Z"
"","18166","ProtobufHttpMessageConverter support for protobuf 3.0.0-beta4 [SPR-13589]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-13589](https://jira.spring.io/browse/SPR-13589?redirect=false)** and commented  [Google protobuf is now 3.0.0-beta4](https://github.com/google/protobuf/tree/master/java) and is backing the [new grpc project](https://github.com/grpc/grpc-java).  Let's update our `ProtobufHttpMessageConverter` to also support this upcoming version.  In the meantime the [protobuf-java-format has moved to github](https://github.com/bivas/protobuf-java-format) and had two new releases with potential breaking changes. This issue should also deal with those.  ---  **Issue Links:** - #18743 Upgrade to Protobuf Java Format 1.4 - #20538 ProtobufHttpMessageConverter: JSON not written to response - #17795 HttpMessageConverter based on Protostuff library - #20109 ProtobufHttpMessageConverter: Make JSON format configurable  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4d035e3ab1761d003a85fc53d26b37cd1aef7b48  2 votes, 8 watchers","closed","type: enhancement,","spring-projects-issues","2015-10-20T10:06:59Z","2019-01-11T17:38:03Z"
"","18106","ClassNotFoundException: org.xnio.StreamConnection in Wildfly 10.0.0.CR2 [SPR-13529]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-13529](https://jira.spring.io/browse/SPR-13529?redirect=false)** and commented  While running integration tests with Wildfly 10.0.0.CR2, I noticed that websocket support was failing with:  ``` 15:00:57 [ServerService Thread Pool -- 13] DefaultSockJsService[WARN] - Failed to create a default WebSocketTransportHandler java.lang.IllegalStateException: Failed to instantiate RequestUpgradeStrategy: org.springframework.web.socket.server.standard.UndertowRequestUpgradeStrategy 	at [...] org.wildfly.extension.undertow.deployment.UndertowDeploymentService.startContext(UndertowDeploymentService.java:101)  Caused by: java.lang.IllegalStateException: Incompatible Undertow API version 	at org.springframework.web.socket.server.standard.UndertowRequestUpgradeStrategy.(UndertowRequestUpgradeStrategy.java:129) 	... 57 more Caused by: java.lang.NoClassDefFoundError: org/xnio/StreamConnection 	at org.springframework.web.socket.server.standard.UndertowRequestUpgradeStrategy.(UndertowRequestUpgradeStrategy.java:125) 	... 57 more Caused by: java.lang.ClassNotFoundException: org.xnio.StreamConnection from [Module ""deployment.spring-websocket-portfolio.war:main"" from Service Module Loader] 	at org.jboss.modules.ModuleClassLoader.findClass(ModuleClassLoader.java:205) 	at org.jboss.modules.ConcurrentClassLoader.performLoadClassUnchecked(ConcurrentClassLoader.java:455) 	at org.jboss.modules.ConcurrentClassLoader.performLoadClassChecked(ConcurrentClassLoader.java:404) 	at org.jboss.modules.ConcurrentClassLoader.performLoadClass(ConcurrentClassLoader.java:385) 	at org.jboss.modules.ConcurrentClassLoader.loadClass(ConcurrentClassLoader.java:130) 	... 58 more ```  Both undertow and xnio modules are properly loaded:  ``` INFO  [org.xnio] (MSC service thread 1-7) XNIO version 3.3.2.Final INFO  [org.xnio.nio] (MSC service thread 1-7) XNIO NIO Implementation Version 3.3.2.Final INFO  [org.wildfly.extension.undertow] (MSC service thread 1-2) WFLYUT0003: Undertow 1.3.0.CR2 starting INFO  [org.wildfly.extension.undertow] (ServerService Thread Pool -- 55) WFLYUT0003: Undertow 1.3.0.CR2 starting ```  But it seems that the xnio module is not made available to the application classpath by default.  Digging into [Wildfly class loading](https://docs.jboss.org/author/display/WFLY8/Class+Loading+in+WildFly), I tried to add the following configuration in my test application `pom.xml`:  ```xml    org.apache.maven.plugins   maven-war-plugin   2.2        false                     org.jboss.xnio                 ```  This configuration asks Wildfly to make the `org.jboss.xnio` module available to the application classpath. And this workaround fixes the issue.  Is there a way to reflectively call undertow's `Handshake.createChannel` method without loading xnio's `StreamConnection.class`?  ---  **Issue Links:** - #18056 Compatibility with WildFly 10 (_**""is depended on by""**_) - #18197 UndertowRequestUpgradeStrategy not compatible with WildFly anymore - #18171 Make use of native doUpgrade operation in Undertow 1.3.5+ / 1.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1b31d39b607c9071de4c0e92f849ee1fac38b9b0","closed","type: bug,","spring-projects-issues","2015-10-02T16:55:09Z","2019-01-11T17:26:50Z"
"","18064","Revisit remaining XmlBeanFactory usage in reference documentation [SPR-13485]","**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** opened **[SPR-13485](https://jira.spring.io/browse/SPR-13485?redirect=false)** and commented  This class has been deprecated since 3.1, see #13051.  ---  **Affects:** 4.1.7, 4.2.1  **Issue Links:** - #13051 Please undeprecate XmlBeanFactory  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/48838d48d27ef9d029c81c2c1ff655111f93d893, https://github.com/spring-projects/spring-framework/commit/bc1dc9a074f59d6b8f9d19c0661dacae2d5b285b  **Backported to:** [4.1.9](https://github.com/spring-projects/spring-framework/milestone/133?closed=1)","closed","type: documentation,","spring-projects-issues","2015-09-22T20:12:06Z","2019-01-11T17:21:11Z"
"","18119","PayloadApplicationEvent can't hit cache [SPR-13543]","**[bohr.qiu](https://jira.spring.io/secure/ViewProfile.jspa?name=qiuboboy)** opened **[SPR-13543](https://jira.spring.io/browse/SPR-13543?redirect=false)** and commented  PayloadApplicationEvent dont implement hashcode and equals，when publish event，org.springframework.context.event.AbstractApplicationEventMulticaster#getApplicationListeners(org.springframework.context.ApplicationEvent, org.springframework.core.ResolvableType) method can’t hit the cache。  cache key is ListenerCacheKey，  ---  **Affects:** 4.2.1  **Issue Links:** - #18116 OutOfMemory Exception when publishing User Events","closed","in: core,","spring-projects-issues","2015-10-06T11:56:21Z","2019-01-11T17:26:30Z"
"","18712","Placeholder resolution for annotation attributes is not active by default [SPR-14140]","**[Bjorn Harvold](https://jira.spring.io/secure/ViewProfile.jspa?name=bjornharvold)** opened **[SPR-14140](https://jira.spring.io/browse/SPR-14140?redirect=false)** and commented  I created ticket #18525 pre v4.3.RC1.  I updated to 4.3.RC1 today and found that the placeholder still doesn't convert.  The below code fails:  ```java public void logoutUser(@RequestHeader(name = ""${auth.token.name}"", required = true) String authToken) {         if (log.isDebugEnabled()) {             log.debug(String.format(""Auth-Token: %s"", authToken));         }         preAuthenticatedTokenCacheService.deleteExistingSessions(Collections.singletonList(authToken)); 	} ```  ```java 2016-04-09 11:13:29,346 E DefaultExceptionHandler - Http Status: 400 : Missing request header '${auth.token.name}' for method parameter of type String org.springframework.web.bind.ServletRequestBindingException: Missing request header '${auth.token.name}' for method parameter of type String ```  Please advise  ---  **Affects:** 4.3 RC1  **Issue Links:** - #21745 Document default EmbeddedValueResolver support for property placeholders - #18203 Support SpEL next to placeholders in annotation attributes (e.g. `@Scheduled`) - #18525 `@RequestHeader` name/value does not accept placeholders - #13183 automatic registration of PSPC when `@PropertySource` is used - #14537 `@Enable-style` annotation is desired for automatic registration of PropertySourcesPlaceholderConfigurer  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0f0aa46e4983d2c48e30db710d8e07fe3d649825, https://github.com/spring-projects/spring-framework/commit/cb9549655c078534db6cd2b7631640e44054e976  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2016-04-09T04:18:56Z","2020-05-01T15:43:17Z"
"","18525","@RequestHeader name/value does not accept placeholders [SPR-13952]","**[Bjorn Harvold](https://jira.spring.io/secure/ViewProfile.jspa?name=bjornharvold)** opened **[SPR-13952](https://jira.spring.io/browse/SPR-13952?redirect=false)** and commented  I would like to be able to control the name of my auth token per environment. Ergo, I would like to be able to do something like this:  ```java @RequestHeader(value = ""${env.auth.token}"", required = true) ```  Currently, this only works with a constant string.  ---  **Affects:** 4.2.4  **Issue Links:** - #18203 Support SpEL next to placeholders in annotation attributes (e.g. `@Scheduled`) - #18712 Placeholder resolution for annotation attributes is not active by default  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e0d7c6be00ed855e473f19f405ddbbcdb6cbb885","closed","type: enhancement,","spring-projects-issues","2016-02-17T07:15:38Z","2019-01-13T05:28:17Z"
"","18608","Option to resolve Ambiguous mapping error AbstractHandlerMethodMapping at runtime [SPR-14036]","**[Binoy](https://jira.spring.io/secure/ViewProfile.jspa?name=binoy)** opened **[SPR-14036](https://jira.spring.io/browse/SPR-14036?redirect=false)** and commented  org.springframework.web.servlet.handler.AbstractHandlerMethodMapping\ throws Ambiguous mapping error, when same url mappings found.  If there's an option to resolve this at runtime, like using Condition or .... The resolution can be based on the class or class-name or some context variable or ....  Usecase: There's a standard set of `@Controllers`, But somebody want to customize some controllers and doesn't want to break API contract. The developer doesn't has source code access to the standard set of `@Controllers`. If the same url mapping is used, it will throw Ambiguous mapping error. But if there's an option to override this behaviour, it would be a lot helpful. Also the only over-ridden mapping should be affected, Rest works as it is.   ---  **Reference URL:** https://github.com/spring-projects/spring-framework/blob/v4.2.5.RELEASE/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java#L561  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c9c3857eae452de9b96ff06f56f765ec34570b63","closed","type: enhancement,","spring-projects-issues","2016-03-10T11:57:47Z","2016-03-18T14:02:53Z"
"","18504","Exclude an exception from @ExceptionHandler [SPR-13932]","**[Bill Chen](https://jira.spring.io/secure/ViewProfile.jspa?name=billc.cn)** opened **[SPR-13932](https://jira.spring.io/browse/SPR-13932?redirect=false)** and commented  As seen in the referenced SO question, if one wants a blanket handler for all Exceptions apart from a few, one will have to rethrow the unhandled exception in the `@ExceptionHandler` method, which causes a horrendous `ERROR` to be logged.  Can some facility be provided to statically (via the annotation) or, even better, dynamically skip an exception in a handler?  ---  **Affects:** 4.2.4  **Reference URL:** http://stackoverflow.com/q/35267756/499922  **Issue Links:** - #19473 ExceptionHandlerExceptionResolver should not log propagated exceptions at warn level - #19427 Log exception from `@ExceptionHandler` at higher level than debug  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cdfcc23b6f1424f04e8273b3aa69fe185fb73dde, https://github.com/spring-projects/spring-framework/commit/6ef2d827c67da49ba7751cae6b9bd9a6ec7f8fbc","closed","type: enhancement,","spring-projects-issues","2016-02-08T18:14:07Z","2019-10-15T09:04:40Z"
"","18503","Provide way in MVC Java config to modify rather than replace default HandlerExceptionResolvers [SPR-13931]","**[Bill Chen](https://jira.spring.io/secure/ViewProfile.jspa?name=billc.cn)** opened **[SPR-13931](https://jira.spring.io/browse/SPR-13931?redirect=false)** and commented  Currently, if one configures a resolver with `WebMvcConfigurerAdapter.configureHandlerExceptionResolvers()`, the default ones will not be added. And since `WebMvcConfigurationSupport.addDefaultHandlerExceptionResolvers()` is not directly accessible, one has to copy code from that method to manipulate the defaults.  Fundamentally, this way of registering resolvers (by adding them to a list which is then used to build a `HandlerExceptionResolverComposite`) is really unnecessary because Spring MVC can use multiple `HandlerExceptionResolver` beans in the context anyways.  Can the default ones be exposed as normal beans with enough gaps in their default `order` instead?  Alternatively, at least provide a way to insert resolvers in between the defualt ones like the `extendMessageConverters()` method.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d53c04b4dfb08f8ac63d1c479f52a80f20942e0a","closed","type: enhancement,","spring-projects-issues","2016-02-08T18:06:04Z","2016-04-06T08:38:11Z"
"","18676","Make localized field names lookup extensible in JSR-303 validation messages [SPR-14104]","**[Bertrand Guay-Paquet](https://jira.spring.io/secure/ViewProfile.jspa?name=berniegp)** opened **[SPR-14104](https://jira.spring.io/browse/SPR-14104?redirect=false)** and commented  When using JSR-303 annotations for validation, Spring looks up error messages in message bundles and makes available the field name as well as the annotation attribute values in alphabetical order. These arguments are determined by LocalValidatorFactoryBean via its superclass SpringValidatorAdapter with this cose:  ```java protected Object[] getArgumentsForConstraint(String objectName, String field, ConstraintDescriptor descriptor) { 	List arguments = new LinkedList();        // HERE are established the message keys for resolving the field name 	String[] codes = new String[] {objectName + Errors.NESTED_PATH_SEPARATOR + field, field}; 	arguments.add(new DefaultMessageSourceResolvable(codes, field)); 	// Using a TreeMap for alphabetical ordering of attribute names 	Map attributesToExpose = new TreeMap(); 	for (Map.Entry entry : descriptor.getAttributes().entrySet()) { 		String attributeName = entry.getKey(); 		Object attributeValue = entry.getValue(); 		if (!internalAnnotationAttributes.contains(attributeName)) { 			attributesToExpose.put(attributeName, attributeValue); 		} 	} 	arguments.addAll(attributesToExpose.values()); 	return arguments.toArray(new Object[arguments.size()]); } ```  Currently, for a field named ""fooField"" of the class ""barClass"", the message keys would be [""barClass.fooField"", ""fooField""]. I believe this was implemented in #11073.  This can then be used in a message.properties file (for a `@Size` annotation) like so:  ``` Size={0} must be between {1} and {2} ```  where {0} is either the localized field name (using the 2 keys described above) or the field name itself as a fallback.  This works great, but does not allow for using ""namespaced"" common field names in messages.properties like so:  ``` labels.firstName=First Name labels.lastName=Last Name labels.etc=... ```  I coded this custom validator factory bean which achieves this:  ```java @Configuration public class WebConfig extends WebMvcConfigurerAdapter {  	@Override 	public Validator getValidator() { 		CustomValidator factory = new CustomValidator(); 		return factory; 	}  	private static class CustomValidator extends OptionalValidatorFactoryBean {  		private static final String FIELD_NAME_PREFIX = ""labels""; 		 		@Override 		protected Object[] getArgumentsForConstraint(String objectName, String field, 				ConstraintDescriptor descriptor) { 			Object[] arguments = super.getArgumentsForConstraint(objectName, field, descriptor); 			 			// Add a custom message code for the field name 			if (arguments.length > 0 && arguments[0] instanceof DefaultMessageSourceResolvable) { 				DefaultMessageSourceResolvable fieldArgument = (DefaultMessageSourceResolvable) arguments[0]; 				String[] codes = fieldArgument.getCodes(); 				String[] extendedCodes = new String[codes.length + 1]; 				extendedCodes[0] = FIELD_NAME_PREFIX + Errors.NESTED_PATH_SEPARATOR + field; 				System.arraycopy(codes, 0, extendedCodes, 1, codes.length); 				arguments[0] = new DefaultMessageSourceResolvable(extendedCodes, field); 			} 			return arguments; 		} 	} } ```  Now, for the feature request: I think it would be useful to externalize the choice of field name message codes to a protected method which could be overwritten by child classes. In this way, the implementation would be much cleaner and more robust.  To be clear, I'm proposing to change this line in SpringValidatorAdapter :  ``` String[] codes = new String[] {objectName + Errors.NESTED_PATH_SEPARATOR + field, field}; ```  to something like :  ``` String[] codes = getFieldCodes(objectName, field); ```  ---  **Affects:** 4.2.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/696dcb72a5089642367ddf73fb34a231a9abd68a","closed","type: enhancement,","spring-projects-issues","2016-03-31T21:41:44Z","2019-06-25T08:23:45Z"
"","18018","Doc: @Configuration class accepts overloaded factory methods for same bean [SPR-13438]","**[Benoit Lacelle](https://jira.spring.io/secure/ViewProfile.jspa?name=blasd)** opened **[SPR-13438](https://jira.spring.io/browse/SPR-13438?redirect=false)** and commented  I do not expect a single `@Configuration` class accepting several beans with the same name. I guess it should follow the same contract in XML where one could not define in the same XML 2 bean with the same id.  Here is a test demonstrating the behavior. I guess there is no know knowing which bean has been accepted, and this would change from one environment to another.  ``` package blasd.apex.server.datastore.tuple;  import org.junit.Test; import org.junit.runner.RunWith; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.test.context.ContextConfiguration; import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;  @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(classes = { TestSameConfDiffBeanSamename.class }) @Configuration public class TestSameConfDiffBeanSamename { 	@Bean 	public String firstBean() { 		return ""youpi""; 	}  	@Bean 	public Integer someBeanName(String someString) { 		return someString.length(); 	}  	@Bean 	public Integer someBeanName() { 		return 1; 	}  	@Autowired 	Integer someInteger;  	@Test 	public void wonderingWhichIntegerWillArrive() { 		System.out.println(someInteger); 	} } ```  Regards   ---  **Affects:** 4.2.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/93f77f5d51c49e39772e68afcff41a89b7d68a84","closed","in: core,","spring-projects-issues","2015-09-07T13:13:01Z","2015-11-15T17:03:13Z"
"","18722","Support nested test classes with SpringClassRule & SpringMethodRule [SPR-14150]","**[Benoit AVERTY](https://jira.spring.io/secure/ViewProfile.jspa?name=kaidjin)** opened **[SPR-14150](https://jira.spring.io/browse/SPR-14150?redirect=false)** and commented  #### Status Quo  The _Spring TestContext Framework_ has traditionally supported only top-level or static nested test classes. With support for `@Nested` test classes in JUnit 5 and custom runners in JUnit 4, however, there is increased need to support nested non-static test classes (i.e., _inner_ classes).  #### Deliverables  1. [x] Introduce support for loading a test `ApplicationContext` via `@ContextConfiguration` and related annotations for a _nested_ test class.    - This already works without modifications to the existing code base: a _nested_ (i.e., non-static _inner_) test class is still a `Class`, so the TestContext framework doesn't need to do anything special here. 2. [x] Ensure that JUnit Jupiter based `@Nested` test classes work with the TestContext framework.    - This already works for the same reasons mentioned for deliverable #1. 3. [x] Ensure that `SpringClassRule` and `SpringMethodRule` work in conjunction with JUnit 4 based runners that support _nested_ test classes.    - Introduced a workaround which is documented in this issue's comments section.  #### JUnit 4 Hierarchical Runners  When using the `@Rule` and `@ClassRule` classes `SpringMethodRule` and `SpringClassRule` in conjunction with a custom JUnit 4 `Runner` that allows one to use nested classes to create hierarchical tests, the tests in subclasses fail with an `IllegalStateException`.  Examples of hierarchical runners:  - https://github.com/bechte/junit-hierarchicalcontextrunner/wiki - https://github.com/NitorCreations/CoreComponents/tree/master/junit-runners  The second one doesn't have the same error, but I'm guessing the problem is similar.  ```  java.lang.IllegalStateException: Failed to find 'public static final SpringClassRule' field in test class [com.example.unit.testing.application.PlacingOrderTest$WithExistingCustomer]. Consult the javadoc for SpringClassRule for details. 	at org.springframework.test.context.junit4.rules.SpringMethodRule.validateSpringClassRuleConfiguration(SpringMethodRule.java:233) 	at org.springframework.test.context.junit4.rules.SpringMethodRule.apply(SpringMethodRule.java:143) 	at de.bechte.junit.runners.context.statements.builder.HierarchicalRunRulesStatementBuilder.createStatement(HierarchicalRunRulesStatementBuilder.java:42) 	at de.bechte.junit.runners.context.processing.MethodExecutor.run(MethodExecutor.java:80) 	at de.bechte.junit.runners.context.processing.MethodExecutor.run(MethodExecutor.java:57) 	at de.bechte.junit.runners.context.statements.RunChildren.evaluate(RunChildren.java:38) 	at de.bechte.junit.runners.context.statements.RunAll.evaluate(RunAll.java:27) 	at de.bechte.junit.runners.context.statements.StatementExecutor.execute(StatementExecutor.java:28) 	at de.bechte.junit.runners.context.HierarchicalContextRunner.run(HierarchicalContextRunner.java:134) 	at de.bechte.junit.runners.context.processing.ContextExecutor.run(ContextExecutor.java:26) 	at de.bechte.junit.runners.context.processing.ContextExecutor.run(ContextExecutor.java:15) 	at de.bechte.junit.runners.context.statements.RunChildren.evaluate(RunChildren.java:38) 	at de.bechte.junit.runners.context.statements.RunAll.evaluate(RunAll.java:27) 	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) 	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70) 	at org.springframework.test.context.junit4.statements.ProfileValueChecker.evaluate(ProfileValueChecker.java:103) 	at org.springframework.test.context.junit4.rules.SpringClassRule$TestContextManagerCacheEvictor.evaluate(SpringClassRule.java:248) 	at org.junit.rules.RunRules.evaluate(RunRules.java:20) 	at de.bechte.junit.runners.context.statements.StatementExecutor.execute(StatementExecutor.java:28) 	at de.bechte.junit.runners.context.HierarchicalContextRunner.run(HierarchicalContextRunner.java:134) 	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86) 	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192) ```  The exception makes sense because the nested class indeed doesn't have the static `SpringClassRule`. But it can't have it because the nested class isn't static. Moreover, I'm not sure it would need it because the rule would be evaluated twice.  ---  **Affects:** 4.2.5  **Issue Links:** - #19930 Discover test configuration on enclosing class for nested test class  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ab7b5e5c77f9408e4fab04e8661a93f97acdd6e9, https://github.com/spring-projects/spring-framework/commit/e574820dc92d44cbeff18e1041e1575c8ee0ff54","closed","type: enhancement,","spring-projects-issues","2016-04-12T07:52:59Z","2019-01-11T16:36:49Z"
"","18612","HTTP persistent connections for HTTP Invoker and RestTemplate [SPR-14040]","**[Benjamin Bargeton](https://jira.spring.io/secure/ViewProfile.jspa?name=benba)** opened **[SPR-14040](https://jira.spring.io/browse/SPR-14040?redirect=false)** and commented  Normally HttpURLConnection is maintaining persistent connections under the hood.  One condition to reuse a connection is that the http response must be fully consumed (https://docs.oracle.com/javase/1.5.0/docs/guide/net/http-keepalive.html)  The combination of using an ObjectOutputStream over an Http response output stream as done in HttpInvokerServiceExporter make this condition hard to be satisfied.  The oos.close() method called in writeRemoteInvocationResult(...) is doing the following things (i've inlined a bit the code):  ```java // bout = underlying BlockDataOutputStream // out = response.getOutputStream() inside bout public void close() throws IOException {     bout.flush(); // will call bout.drain() and out.flush()     clear();     bout.close(); // will call bout.flush() again (so bout.drain() and out.flush()) and out.close() } ```  Forcing the flush on the servlet reponse output stream before closing it has 2 side effects: 1. It will prevent the servlet container to have a chance to use the Content-Length header if the response size is inferior to response.getBufferSize() and therefore force a chunked transfer encoding for every response 2. I guess this is could differ depending on the container but at least on Tomcat and Websphere, it will send the chunked encoding trailer (0\r\n\r\n) in an additional tcp packet (see attached Wireshark printscreen). This is the main issue since most of the time if the server that runs the HttpInvoker client is fast enough, it will not have received that packet before closing the input stream of the HttpUrlConnection (ObjectInputStream.readObject() is returning as soon as the object is read), and so will prevent the keep alive of the tcp connection (see sun.net.www.http.ChunkedInputStream.hurry() for the method that clean the chunked trailer from the connection).  They are many way of fixing this issue. The one I've picked for the moment is to enclose the response stream in a wrapper that do nothing on flush (using decorateOutputStream()) but I think this should be the default in HttpInvokerServiceExporter because this can lead to serious performance issue under load  Note: I believe this is the same issue as the one described in #12645  ---  **Affects:** 4.2.5  **Attachments:** - [wireshark.png](https://jira.spring.io/secure/attachment/23342/wireshark.png) (_97.57 kB_)  **Issue Links:** - #12775 SimpleClientHttpResponse disconnects the underlying HttpURLConnection when closing (_**""is duplicated by""**_) - #12645 No support of persistent HTTP connections within org.springframework.http.client.SimpleClientHttpRequestFactory (v3.0.4) - #21313 NPE in SimpleClient-HttpURLConnection with errorstream-buffering - #18665 AsyncRestTemplate should trigger no-output HTTP requests immediately as well - #19448 Disable streaming when reading to Resources in RestTemplate - #21717 SimpleClientHttpResponse.close() does not call close() on URLConnection.getInputStream() if SimpleClientHttpResponse.getBody() was not called before  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b947bfe8e99271b4d88a5a5aba0a8960f76b8efd, https://github.com/spring-projects/spring-framework/commit/eec22f5072011259bee02cd23cd6d0692f1cb187","closed","type: enhancement,","spring-projects-issues","2016-03-11T10:13:26Z","2019-01-14T04:40:03Z"
"","18265","Caffeine caching support [SPR-13690]","**[Ben Manes](https://jira.spring.io/secure/ViewProfile.jspa?name=ben.manes)** opened **[SPR-13690](https://jira.spring.io/browse/SPR-13690?redirect=false)** and commented  Caffeine is a Java 8 rewrite of Guava's cache. It provides an updated API, a few missing features, significantly [higher performance](https://github.com/ben-manes/caffeine/wiki/Benchmarks), and a [near optimal hit rate](https://github.com/ben-manes/caffeine/wiki/Efficiency).  A [pull request](https://github.com/spring-projects/spring-framework/pull/921) providing this improvement has been provided.  ---  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/921  **Issue Links:** - #18370 Drop Guava caching - superseded by Caffeine (_**""is depended on by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3a238a2b6104f129915fc46cb3c62e6a08348a3c, https://github.com/spring-projects/spring-framework/commit/13aabeef37018e9315a6b041b1b83907dc6c500f  1 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2015-11-15T06:18:19Z","2019-01-11T19:24:41Z"
"","18414","Support RFC 5861 (Cache Control Extensions) in com.springframework.http.CacheControl [SPR-13841]","**[Ben Madore](https://jira.spring.io/secure/ViewProfile.jspa?name=madorb)** opened **[SPR-13841](https://jira.spring.io/browse/SPR-13841?redirect=false)** and commented  It would be nice to extend org.springframework.http.CacheControl to support RFC 5861 Cache Control Extensions for `stale-while-revalidate` and `stale-if-error`   ---  **Affects:** 4.2.4","closed","type: enhancement,","spring-projects-issues","2016-01-05T16:01:06Z","2016-04-06T08:38:10Z"
"","18121","Null Pointer when receiving an invalid transport type during SockJS request [SPR-13545]","**[Ben Kiefer](https://jira.spring.io/secure/ViewProfile.jspa?name=benkiefer)** opened **[SPR-13545](https://jira.spring.io/browse/SPR-13545?redirect=false)** and commented  Our endpoint fuzzer was able to produce a 500 error due to a nullpointer in the  TransportHandlingSockJsService. The following lines were the problem  ```java protected boolean validateRequest(String serverId, String sessionId, String transport) { 		if (!getAllowedOrigins().contains(""*"") && !TransportType.fromValue(transport).supportsOrigin()) { 			if (logger.isWarnEnabled()) { 				logger.warn(""Origin check has been enabled, but transport "" + transport + "" does not support it""); 			} 			return false; 		} 		return super.validateRequest(serverId, sessionId, transport); ```  The nullpointer occurs when the transport is an unknown value (ex: bob) as the fromValue returns null when the type is not found.   ---  **Affects:** 4.1.7, 4.2.1  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/882  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8429c4be74f18022eff57b5a5184eb215899d726, https://github.com/spring-projects/spring-framework/commit/966f95b9b5966d0d75015d81fdede442ba5c2598  **Backported to:** [4.1.8](https://github.com/spring-projects/spring-framework/milestone/132?closed=1)","closed","type: bug,","spring-projects-issues","2015-10-07T02:28:45Z","2015-10-15T10:11:25Z"
"","18664","Possibility to configure a custom WebJarAssetLocator [SPR-14092]","**[Bartolom](https://jira.spring.io/secure/ViewProfile.jspa?name=bartolom)** opened **[SPR-14092](https://jira.spring.io/browse/SPR-14092?redirect=false)** and commented  The Spring Framework has a nice integration with. webjar-locator https://github.com/webjars/webjars-locator https://github.com/webjars/webjars-locator-core #16928  Unfortunatly there is now way to configure the class org.webjars.WebJarAssetLocator. For instance I would like to provide my own configured instance or at least manipulate the Map behind org.webjars.WebJarAssetLocator.getFullPathIndex()  The instance used by Spring MVC is a private final field in WebJarsResourceResolver https://github.com/spring-projects/spring-framework/blob/5067f00228c4752363051fd8d565a4a422413336/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/WebJarsResourceResolver.java#L52  Replacing the WebJarsResourceResolver is also not easy as it is created with the **new** keyword in https://github.com/spring-projects/spring-framework/blob/d5ee787e1e6653257720afe31ee3f8819cd4605c/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/ResourceChainRegistration.java#L108  There is a further related instantiation in https://github.com/spring-projects/spring-framework/blob/ff2a911baa97921e018e6d5a7cd0f3dbaa55496e/spring-webmvc/src/main/java/org/springframework/web/servlet/config/ResourcesBeanDefinitionParser.java#L330  It would be nice if I can provide the bean instance of WebJarAssetLocator by typical Spring dependency injection means, and Spring MVC will only create one if I don't suppy one.  Or if I can have at least access to the instance and can configure it further. WebMvcConfigurer would have beed the place where I expected it.  My usecase is that I'm using ""Bower based WebJars"" http://www.webjars.org/bower and they are generated automatically from Bower configuration files, which is great. But they are not as clean as we expect them to be in the Java-World.  I'm trying to find out if it is possbile to use Spring-Boot (with Gradle/Maven and without Bower) with WebJars to create Google/Vaadin Polymer Web Componenents.  So I have Web-Components-HTML-Import-Files in the webjars that reference other Web-Components-HTML-Import-Files in their HTML-source code, and they assume the typical Bower folder structure and use relative path and without version numbers.  I would be able to solve two of my issues when I would have access to the WebJarAssetLocator by some custom code of mine:  1.) Some of the webjars that I'm interested in, have ambigious resources. /META-INF/resources/webjars/iron-ajax/1.2.0/iron-ajax.html /META-INF/resources/webjars/iron-ajax/1.2.0/test/iron-ajax.html (obviously I like to filter out the test-resources)  2.) Some of the generated resources have odd paths like: /META-INF/resources/webjars/github-com-polymerlabs-promise-polyfill/1.0.0/promise-polyfill.html where I would love to clean up the 'github-com-polymerlabs-'  ---  **Affects:** 4.2.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/977840884bf9c670a88bac1aeee3b3c8f1f9bf7b","closed","type: enhancement,","spring-projects-issues","2016-03-27T17:28:41Z","2019-01-11T16:31:51Z"
"","18645","JmsListenerTest and JmsListenerTestHarness similar to spring-amqp 1.6 and spring-kafka [SPR-14073]","**[Bartolom](https://jira.spring.io/secure/ViewProfile.jspa?name=bartolom)** opened **[SPR-14073](https://jira.spring.io/browse/SPR-14073?redirect=false)** and commented  The Spring-Integration team recently annonced spring-amqp 1.6.0 Milestone and a spring-kafka milestone  https://spring.io/blog/2016/02/16/spring-amqp-1-6-0-milestone-1-and-1-5-4-available https://spring.io/blog/2016/03/14/spring-for-apache-kafka-milestone-1-available  Both contain a new testing feature http://docs.spring.io/spring-amqp/docs/1.6.0.M1/reference/html/_reference.html#testing It leverages Mockito, which I think is also the main mocking library in Spring-Framework  In essence it is possible to intercept `@RabbitListeners` and inject CountDownLatches or arbitrary lambdas that can be controlled by a test method.  We see value in these kind of test setup and it would be nice when spring-jms would support it too.  Our use case is something like that: We don't have an application where the Web-GUI is the most important part but we rather process invoices (Apache Camel, a bit Spring-Integration). We have automated ""Acceptance Tests"". We are slowly moving to a more distributed setup where we have new/someExisting parts (re)written in Spring Boot and they integrate via a JMS-Broker.  It becomes now harder to write the automated ""acceptance Tests"" and any additional support by the framework where we can inject CountDownLatches or lambda functions would be appreciated.  For instance 1 invoice comes in and gets split up into 5 of which one fails and shound end up in queue X but the other 4 should procced to the next queue and picked up by the next Spring Boot app.   ---  **Affects:** 4.2.5  1 votes, 3 watchers","closed","status: bulk-closed,","spring-projects-issues","2016-03-21T09:22:20Z","2019-01-12T00:14:45Z"
"","18793","feasibility to cancel a task  [SPR-14219]","**[Balu Mahesh](https://jira.spring.io/secure/ViewProfile.jspa?name=balumahesh)** opened **[SPR-14219](https://jira.spring.io/browse/SPR-14219?redirect=false)** and commented  I would like to have a provision to cancel a scheduled task from ScheduledTaskRegistrar. the method destroy is to cancel all tasks. but i need a method where i can pass the task argument to cancel the specified Task.   ---  **Affects:** 4.2.5","open","type: enhancement,","spring-projects-issues","2016-04-26T07:01:17Z","2016-06-09T15:37:54Z"
"","18313","Issue with Storedprocedurename contains '-' symbol giving error like invalid parameter at index 1 [SPR-13740]","**[bala venkatesh koripalli](https://jira.spring.io/secure/ViewProfile.jspa?name=bkoripalli)** opened **[SPR-13740](https://jira.spring.io/browse/SPR-13740?redirect=false)** and commented  public clas ExampleStoreprocedure extends Storeprocedure { public ExampleStoreprocedure() { super(""Sample-Storeproc"", jdbcTemplate); declareParameter(""s"",Types.BIGINT); ....          ... }  }  * problem with - syambol in storedproceure name   --- No further details from [SPR-13740](https://jira.spring.io/browse/SPR-13740?redirect=false)","closed","status: bulk-closed,","spring-projects-issues","2015-10-04T11:30:35Z","2019-01-12T02:44:47Z"
"","18434","Spring Controller is not able to detect empty string ("""") as a string object in RequestBody [SPR-13861]","**[AVINABA GHOSH HAJRA](https://jira.spring.io/secure/ViewProfile.jspa?name=avinaba91)** opened **[SPR-13861](https://jira.spring.io/browse/SPR-13861?redirect=false)** and commented  **Problem Statement** : Spring Controller is not able to detect empty string ("""") as a string object in **RequestBody**.Till Spring 3.2 Spring Controller is able to detect empty string ("""") as a string. But now we upgrade our spring version from 3.2 to 4.2.And in Spring 4.2 we are facing this issue.Our API gives HTTP status 400 as response instead of processing the empty string in **RequestBody** **Example** : Controller Method definition:  ```java    @MethodInfo(comments = DocumentationConstants.submitAttemptComments, date = ""Mar 31 2014"", summary = ""Submits an Activity"", sequence = 5 ) @RequestMapping(value =""/submit"", method=RequestMethod.POST,produces=""application/json"") @ResponseBody public ResponseEntity submitAttempt(@RequestBody String eaid) ```  And JUNIT ::  ```java    @Test public void testCase() throws Exception {                  String eaid = """";                                                                                  when(securityServiceMock.validateEAID(anyString())).thenReturn(false);	      Map jsonMap = new HashMap();      jsonMap.put(""success"", ""true"");      when(assignmentServiceMock.getAjsonInfo(anyString(), anyBoolean())).thenReturn(new JSONObject(jsonMap));      MvcResult result = this.mockMvcAssgnmntMock.perform(post(""/caa/activity/submit"")                .content(eaid)                .accept(MediaType.parseMediaType(""application/json;charset=utf-8"")))                .andExpect(status().isNotAcceptable()).andReturn();      _logger.info(""Result received:"" + result.getResponse().getContentAsString());      assertEquals(""{\""message\"":\""EAID is acceptable\"",\""status\"":\""200\""}"", result.getResponse().getContentAsString()); } ```  is giving error :: java.lang.AssertionError: Status expected:<200> but was:<400>  ---  **Affects:** 4.2 GA  **Issue Links:** - #17376 Re-allow handling empty request body - #17768 Avoid reading (empty) RequestBody for HTTP methods that aren't expected to have a body","closed","in: core,","spring-projects-issues","2016-01-12T11:46:41Z","2019-01-12T16:22:29Z"
"","18308","Move ChainedTransactionManager from spring-data commons to spring-tx [SPR-13735]","**[Attila Király](https://jira.spring.io/secure/ViewProfile.jspa?name=akiraly)** opened **[SPR-13735](https://jira.spring.io/browse/SPR-13735?redirect=false)** and commented  Spring-data common has a hidden gem: ChainedTransactionManager. It is not mentioned in the [reference documentation](http://docs.spring.io/spring-data/commons/docs/current/reference/html/) only in [javadoc](http://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/transaction/ChainedTransactionManager.html). There is a good [blog entry](http://gharshangupta.blogspot.hu/2015/03/spring-distributed-transactions-using_2.html) about it which describes why it is useful.  [ChainedTransactionManager](https://github.com/spring-projects/spring-data-commons/blob/master/src/main/java/org/springframework/data/transaction/ChainedTransactionManager.java) is in a [package](https://github.com/spring-projects/spring-data-commons/tree/master/src/main/java/org/springframework/data/transaction) which doesn't have any dependency on anything else in spring-data. Basically it only depends on `org.springframework.transaction` from spring-tx.  Considering that it is a pretty general functionality, could it be moved (and documented) into spring-tx itself?  ---  **Affects:** 4.2.3, 5.0 M4  **Issue Links:** - #8524 Provide a ""best efforts"" 1PC transaction manager out of the box  **Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1324","closed","type: enhancement,","spring-projects-issues","2015-11-29T21:02:19Z","2021-11-24T14:15:43Z"
"","18244","SimpleJdbcCall does not throw an Exception for a missing stored procedure if the name does not contain ""."" [SPR-13669]","**[Attila Király](https://jira.spring.io/secure/ViewProfile.jspa?name=akiraly)** opened **[SPR-13669](https://jira.spring.io/browse/SPR-13669?redirect=false)** and commented  Try these with an empty (for example in memory, derby) database:  ```java new SimpleJdbcCall(jdbcTemplate).withProcedureName(""bar"").compile(); ```  ```java new SimpleJdbcCall(jdbcTemplate).withProcedureName(""foo.bar"").compile(); ```  The first one passes but the second one throws an exception (below). I think both should throw an exception (as there are no stored procedures with those names in the database).  The issue seems to be in [GenericCallMetaDataProvider.processProcedureColumns()](https://github.com/spring-projects/spring-framework/blob/master/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/GenericCallMetaDataProvider.java#L333) (code is the same in 4.0.x and master branches). It throws an exception in case more than one sprocs are found and also in case no sproc was found and the name contains a ""."" It seems it is missing an else branch to throw an exception for other not found sprocs as well.  ``` org.springframework.dao.InvalidDataAccessApiUsageException: Unable to determine the correct call signature for FOO.BAR - package name should be specified separately using '.withCatalogName(""FOO"")' 	at org.springframework.jdbc.core.metadata.GenericCallMetaDataProvider.processProcedureColumns(GenericCallMetaDataProvider.java:328) 	at org.springframework.jdbc.core.metadata.GenericCallMetaDataProvider.initializeWithProcedureColumnMetaData(GenericCallMetaDataProvider.java:104) 	at org.springframework.jdbc.core.metadata.CallMetaDataProviderFactory$1.processMetaData(CallMetaDataProviderFactory.java:128) 	at org.springframework.jdbc.support.JdbcUtils.extractDatabaseMetaData(JdbcUtils.java:290) 	at org.springframework.jdbc.core.metadata.CallMetaDataProviderFactory.createMetaDataProvider(CallMetaDataProviderFactory.java:71) 	at org.springframework.jdbc.core.metadata.CallMetaDataContext.initializeMetaData(CallMetaDataContext.java:269) 	at org.springframework.jdbc.core.simple.AbstractJdbcCall.compileInternal(AbstractJdbcCall.java:279) 	at org.springframework.jdbc.core.simple.AbstractJdbcCall.compile(AbstractJdbcCall.java:266) ```  The reason why it would be good to have an early exception is to catch missing stored procedures during application startup (when the SimpleJdbcCall is created and compiled) instead only when it is used (sproc is called).  ---  **Affects:** 4.0.9, 4.2.2  **Issue Links:** - #21022 SimpleJdbcCall can't access synonyms in Oracle database  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cc06183668d3beeeecb3fd56efee2aa0b609aadf","closed","type: bug,","spring-projects-issues","2015-11-11T13:28:10Z","2019-01-11T19:14:28Z"
"","18329","Could not resolve view name in springmvc [SPR-13756]","**[ashwin kumar](https://jira.spring.io/secure/ViewProfile.jspa?name=ashwinthapos)** opened **[SPR-13756](https://jira.spring.io/browse/SPR-13756?redirect=false)** and commented  Hi I am getting could not resolve view name issue coming when I have dot(.) in the url. It is not coming when I have one dot in between the two strings but issue is coming when there are multiple dots and also when it has a email in the url. I am working with spring-mvc 3.2.  **For example:** localhost:8080/sports/profile/some.asingfa.com --> throwing exception localhost:8080/sports/profile/anothertext.withonedot --> Working fine localhost:8080/sports/profile/some@email.com --> Throwing exception    Here is the exception stacktrace  javax.servlet.ServletException: Could not resolve view with name '/profile/showprofile' in servlet with name 'springmvc' org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1190) org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:992) org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:939) org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:856) org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:936) org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:827)   ---  **Affects:** 3.2.11","closed","in: core,","spring-projects-issues","2015-12-03T13:23:09Z","2019-01-12T16:22:34Z"
"","18159","Spring JDBC not correctly processing Postgresql ?-contained operator [SPR-13582]","**[Artur Geraschenko](https://jira.spring.io/secure/ViewProfile.jspa?name=arturgspb)** opened **[SPR-13582](https://jira.spring.io/browse/SPR-13582?redirect=false)** and commented  Postgresql has many functional operators such as `?` (for example [JSONB operators](http://www.postgresql.org/docs/9.4/static/functions-json.html)).  Spring JDBC processing for this case is not correct. When running the following SQL:  ```sql SELECT '[""1"",""2"",""3""]'::jsonb ? '4' ```  ... I see exceptions like this:  ``` class org.springframework.dao.InvalidDataAccessApiUsageException SQL [SELECT '[""1"",""2"",""3""]'::jsonb ? '4']: given 1 parameters but expected 0 ```  In pgjdbc this bug was fixed in 2014 (https://github.com/pgjdbc/pgjdbc/pull/227).  ---  **Affects:** 4.2.2  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/892  **Issue Links:** - #21054 Spring JDBC not correctly processing Postgresql ? operator - #19945 Spring JDBC not correctly processing Postgresql ?| and ?& operator  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/11d1f050e9bb02c70086176b841e6a766f21fb4e","closed","type: enhancement,","spring-projects-issues","2015-10-16T22:48:11Z","2019-01-11T17:37:41Z"
"","18485","Introduce findRepeatableAnnotations() in AnnotationUtils [SPR-13911]","**[Artem Bilan](https://jira.spring.io/secure/ViewProfile.jspa?name=abilan)** opened **[SPR-13911](https://jira.spring.io/browse/SPR-13911?redirect=false)** and commented  #### Status Quo  `AnnotationUtils` currently provides `getRepeatableAnnotations()` and `getDeclaredRepeatableAnnotations()` methods that support _get_ search semantics.  See the _Reference URL_ for the original discussion.  #### Deliverables  1. Introduce `findRepeatableAnnotations()` and `findDeclaredRepeatableAnnotations()` methods in `AnnotationUtils` with _find_ search semantics.  ---  **Affects:** 4.2 GA  **Reference URL:** https://github.com/spring-projects/spring-amqp/pull/366/files#r51648722  **Issue Links:** - #18376 Support `@AliasFor` for `@JmsListener` attributes - #18545 Support repeatable annotations as composed annotations (_**""is superseded by""**_)","closed","type: enhancement,","spring-projects-issues","2016-02-03T18:03:03Z","2019-01-13T05:30:43Z"
"","18027","MessagingException should not provide empty description String to NestedRuntimeException [SPR-13447]","**[Artem Bilan](https://jira.spring.io/secure/ViewProfile.jspa?name=abilan)** opened **[SPR-13447](https://jira.spring.io/browse/SPR-13447?redirect=false)** and commented  The code to consider:  ```java public MessagingException(Message message) { 	super(""""); 	this.failedMessage = message; } ```  Where the `NestedRuntimeException` superclass does this:  ```java public String getMessage() { 	return NestedExceptionUtils.buildMessage(super.getMessage(), getCause()); } ```  And that utility method implementation is like this:  ```java if (message != null) { 	sb.append(message).append(""; ""); } ```  Having such a logic we end up with bad StackTrace message which is starting just from the ""; "" string.  We can just provide the `null` for that description to the superclass or `deprecate` all those constructors without `description` argument in the `MessagingException` and its inheritors to make end user to provide the particular info for better logs readability.  See the linked Spring Integration issue and its Pull Request for more info.  Looking forward for any other thoughts on the matter!  Thanks in advance  ---  **Affects:** 4.1.7, 4.2.1  **Issue Links:** - #16654 JmsMessagingTemplate should not throw JmsException directly - [INT-3821](https://jira.spring.io/browse/INT-3821) Message details are blank  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c4f5a0fb102c29fdea72df8642ec68d2203f865e, https://github.com/spring-projects/spring-framework/commit/987d93f2ce25c09bbe0458ecab4662396a97cde8  **Backported to:** [4.1.8](https://github.com/spring-projects/spring-framework/milestone/132?closed=1)","closed","type: bug,","spring-projects-issues","2015-09-09T03:08:05Z","2019-01-11T17:24:45Z"
"","18425","Spring does not reliably detect circular imports in Java configurations [SPR-13852]","**[Armand Beuvens](https://jira.spring.io/secure/ViewProfile.jspa?name=beuvenar)** opened **[SPR-13852](https://jira.spring.io/browse/SPR-13852?redirect=false)** and commented  After investigation on some issues on non detected circular imports inside Java configuration classes, it seems that there is a bug inside the contains method of the inner class ImportStack of the class ConfigurationClassParser:  ``` @Override public boolean contains(Object elem) { 	ConfigurationClass configClass = (ConfigurationClass) elem; 	Comparator comparator = new Comparator() { 		@Override 		public int compare(ConfigurationClass first, ConfigurationClass second) { 			return (first.getMetadata().getClassName().equals(second.getMetadata().getClassName()) ? 0 : 1); 		} 	}; 	return (Collections.binarySearch(this, configClass, comparator) != -1); } ```  The bianrySearch method of Collections is called without sorting the collection before which can lead to undefined results.  ---  **Affects:** 4.2.3  **Issue Links:** - #19086 Do not fail with a circular `@Import` error caused by an `@ComponentScan`  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e14c2de1d26b70fb221a348cdbb586e4b408f642, https://github.com/spring-projects/spring-framework/commit/77b8f4d6afcd4b0b737415c8175421ddf15954fe","closed","in: core,","spring-projects-issues","2016-01-08T18:32:13Z","2019-01-13T05:32:12Z"
"","18406","Lot of undesired WARN logs after migration from Spring 3 to Spring 4 [SPR-13833]","**[Armand Beuvens](https://jira.spring.io/secure/ViewProfile.jspa?name=beuvenar)** opened **[SPR-13833](https://jira.spring.io/browse/SPR-13833?redirect=false)** and commented  After migration from Spring 3 to Spring 4, a lot of undesired WARN logs appear when our applications start similar to this one:  ``` 2015-12-30 18:30:18 [main] [ WARN] org.springframework.beans.factory.support.DefaultListableBeanFactory:1480 -> Bean creation exception on FactoryBean type check: org.springframework.beans.factory.BeanCreationException: Error creating bean with name ... ```  The beans for which these messages appear are lazy beans and it is normal that they cannot be created (we use them only in some environments).  After looking into the code, the problem comes from the method getTypeForFactoryBean of the class AbstractBeanFactory. In Spring 3, the fact that it was not possible to create a bean was logged at DEBUG level. In Spring 4.2.3, it is at WARN level. This change was made in the scope of #17005. Could it be possible to put back DEBUG level for at least the lazy beans?  Thank you  ---  **Affects:** 4.2.3  **Issue Links:** - #17005 Mybatis config error leads to endless loop, and no std error output - #17499 Spring logs FactoryBean type check warning in case of factory method with arguments  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/04f31816bde5d5fa27f44ef8fb746ff2572c5287, https://github.com/spring-projects/spring-framework/commit/84e5234eb5f6c8001bf9bbb7c83dd672bfad9c68","closed","type: enhancement,","spring-projects-issues","2015-12-30T17:41:19Z","2019-01-11T18:32:34Z"
"","18707","ResourceHttpRequestHandler/MessageConverter should accept Resources beyond int length [SPR-14135]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-14135](https://jira.spring.io/browse/SPR-14135?redirect=false)** and commented  In two places in the Spring codebase, both related to Resource handling, we currently throw an IOException when serving an over-length Spring Resource: in [ResourceHttpRequestHandler](https://github.com/spring-projects/spring-framework/blob/94cb7786c8c3416fc2bb65e43f85340f4832b47c/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java#L518) and [ResourceHttpMessageConverter](https://github.com/poutsma/spring-framework/blob/c7bd3b844012a9bb214ca7203f110979c0890c00/spring-web/src/main/java/org/springframework/http/converter/ResourceHttpMessageConverter.java#L111).  In the ResourceHttpRequestHandler, it is probably a better idea to simply not set the content length at all for these large resources, so that the Servlet engine switches to chunked mode. Or - when running on Servlet 3.1 - use ServletResponse.setContentLengthLong instead.  In the ResourceHttpMessageConverter, this check should simply be removed, as MessageConverters are based on the HttpMessage hierarchy, which actually does support a long as content-length.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/37bd51cf6d1d1a41d287a66504539b28fc8e4584","closed","in: web,","spring-projects-issues","2016-04-08T13:12:37Z","2019-01-11T16:39:52Z"
"","18742","Spring Scheduler-read cron expression from bean [SPR-14170]","**[Arijeet Saha](https://jira.spring.io/secure/ViewProfile.jspa?name=arijsaha)** opened **[SPR-14170](https://jira.spring.io/browse/SPR-14170?redirect=false)** and commented  The below code doesnot work as cron is not able to read from spring bean.  `@Bean` String expression(){ return config.get(RUN_SANITY_CRON_EXPRESSION); }  `@Scheduled`(cron = ""#{expression}"") public void work(){ LOGGER.debug(""Executing --------------->""); }  Does Spring `@Scheduled` support this?  ---  **Issue Links:** - #18203 Support SpEL next to placeholders in annotation attributes (e.g. `@Scheduled`) (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2016-04-14T05:51:53Z","2019-01-13T05:26:55Z"
"","18767","PathMatchingResourcePatternResolver throws IOException inappropriately [SPR-14194]","**[Archie Cobbs](https://jira.spring.io/secure/ViewProfile.jspa?name=archie172)** opened **[SPR-14194](https://jira.spring.io/browse/SPR-14194?redirect=false)** and commented  This code:  ``` public class Test {     public static void main(String[] args) throws Throwable {         new PathMatchingResourcePatternResolver()           .getResources(""classpath:java/lang/*.class"");     } } ```  results in this exception:  ``` Exception in thread ""main"" java.io.FileNotFoundException: class path resource [java/] cannot be resolved to URL because it does not exist 	at org.springframework.core.io.ClassPathResource.getURL(ClassPathResource.java:187) 	at org.springframework.core.io.support.PathMatchingResourcePatternResolver.findPathMatchingResources(PathMatchingResourcePatternResolver.java:413) 	at org.springframework.core.io.support.PathMatchingResourcePatternResolver.getResources(PathMatchingResourcePatternResolver.java:287) ```  This seems to be a bug, or am I missing something obvious?  See also #16080.  ---  **Affects:** 4.1.9  **Issue Links:** - #16080 Option to have PathMatchingResourcePatternResolver not throw a FileNotFoundException when not a single file was matched","closed","status: bulk-closed,","spring-projects-issues","2016-04-19T21:15:08Z","2019-01-12T00:14:27Z"
"","18697","Outgoing Spring JIRA emails rejected due to invalid HELO domain name [SPR-14125]","**[Archie Cobbs](https://jira.spring.io/secure/ViewProfile.jspa?name=archie172)** opened **[SPR-14125](https://jira.spring.io/browse/SPR-14125?redirect=false)** and commented  I know this is not exactly the right place to file this bug, but I could not find a more appropriate one.  The problem is that I am not receiving any emails when JIRA issues I'm subscribed to are updated.  This appears to be due to an invalid configuration of JIRA's outgoing SMTP server for these emails. It is sending a `HELO` containing an invalid domain name (in the example below the invalid domain name is `ip-172-20-0-160.ec2.internal`).  This will cause any mail server with even trivial spam filtering to reject the email.  Here is an example of the error causing the rejection in my case:  ``` 2016-04-03 14:39:50 H=ec2-52-6-66-30.compute-1.amazonaws.com (ip-172-20-0-160.ec2.internal) [52.6.66.30] F= rejected RCPT : Helo name contains a ip address (HELO was ip-172-20-0-160.ec2.internal) and not is valid ```    --- No further details from [SPR-14125](https://jira.spring.io/browse/SPR-14125?redirect=false)","closed","","spring-projects-issues","2016-04-06T15:25:13Z","2019-01-11T16:40:44Z"
"","18692","InterceptingClientHttpRequest discards request headers [SPR-14120]","**[Archie Cobbs](https://jira.spring.io/secure/ViewProfile.jspa?name=archie172)** opened **[SPR-14120](https://jira.spring.io/browse/SPR-14120?redirect=false)** and commented  I was debugging a problem where a header I was attempting to add was not being included in an request, and noticed this code in `org.springframework.http.client.InterceptingClientHttpRequest.java`:  ``` @Override protected final ClientHttpResponse executeInternal(HttpHeaders headers, byte[] bufferedOutput) throws IOException {     InterceptingRequestExecution requestExecution = new InterceptingRequestExecution();     return requestExecution.execute(this, bufferedOutput); } ```  Notice how the `headers` parameter is completely ignored... that can't be right, can it??   ---  **Affects:** 4.2.4","closed","status: invalid,","spring-projects-issues","2016-04-05T19:42:49Z","2019-01-12T05:22:57Z"
"","18597","@Value default always overrides if whitespace present [SPR-14025]","**[Antony Lees](https://jira.spring.io/secure/ViewProfile.jspa?name=antonylees)** opened **[SPR-14025](https://jira.spring.io/browse/SPR-14025?redirect=false)** and commented  The `@Value` annotation using a default value on a configuration property does not work correctly if whitspace is present before the colon  Expected functionality is that the default value would be injected if the property is not present in the properties file  Actual functionality is that the default value is always injected, even if the property is present  For example: `@Value`(""${my.value : 25}"") will inject the value 25 even if the my.value property is present  However `@Value`(""${my.value: 25}"") works as expected and ignores the whitespace after the colon  Although minor, this is an inconsistency that seems unexpected   ---  **Affects:** 4.2.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b4de66ff9a00ab0a10fcbe1ac931c6ee9368c804","closed","type: enhancement,","spring-projects-issues","2016-03-07T12:28:14Z","2016-03-11T12:33:22Z"
"","18579","Scripted beans not updated after a script compilation error in getScriptedObjectType [SPR-14007]","**[Anton Rokhmistrov](https://jira.spring.io/secure/ViewProfile.jspa?name=anton.rokhmistrov@gmail.com)** opened **[SPR-14007](https://jira.spring.io/browse/SPR-14007?redirect=false)** and commented  This is a duplicate of #9034. It does not work again because ""ScriptFactory.requiresScriptedObjectRefresh(ScriptSource)"" is not used in ""GroovyScriptFactory#getScriptedObject(ScriptSource scriptSource, Class... actualInterfaces)""  ---  **Affects:** 3.2.16, 4.2.2, 4.2.5  **Issue Links:** - #9034 Refreshable beans are not updated if AbstractApplicationContext.getBeansOfType() is called  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c2eb5e1c1c0b9cbfd3602bac1f00b5bc8a9c28e8, https://github.com/spring-projects/spring-framework/commit/0597ff109e7000dfb0f9031660798dceeb5c988f, https://github.com/spring-projects/spring-framework/commit/05ab769555fe6c3695a0942831f2405cb2d6ebae  **Backported to:** [3.2.17](https://github.com/spring-projects/spring-framework/milestone/105?closed=1)  2 votes, 4 watchers","closed","in: core,","spring-projects-issues","2016-03-01T14:39:27Z","2019-01-11T15:06:22Z"
"","18649","WebSockets: @SubscribeMapping is unstable due to a race condition [SPR-14077]","**[Anton H.](https://jira.spring.io/secure/ViewProfile.jspa?name=antonh)** opened **[SPR-14077](https://jira.spring.io/browse/SPR-14077?redirect=false)** and commented  Spring Boot application uses a controller with the following method:  ```java @SubscribeMapping(""/statuses"") public void sendStatuses() {     messagingTemplate.convertAndSend(""/updates/statuses"", getAllStatuses()); } ```  However, sometimes (~10% of cases) browser does not receive an initial update after a subscription, possibly due to a race condition:  according to the logs, an update is missing if controller's method is invoked by WebSocketAnnotationMethodMessageHandler (""Invoking..."") before SimpleBrokerMessageHandler processes a subscription (""Processing SUBSCRIBE...""). If these events happened in reverse order, everything works fine.  **Missing update logs:**  ``` 2016-03-22 10:54:54.070  DEBUG org.springframework.web.socket.handler.LoggingWebSocketHandlerDecorator [http-nio-8082-exec-8] - New WebSocketServerSockJsSession[id=gok1dphb] 2016-03-22 10:54:54.076  DEBUG org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler [clientInboundChannel-31] - Processing CONNECT session=gok1dphb 2016-03-22 10:54:54.083  DEBUG org.springframework.web.socket.messaging.WebSocketAnnotationMethodMessageHandler [clientInboundChannel-26] - Searching methods to handle SUBSCRIBE /updates/statuses id=sub-0 session=gok1dphb 2016-03-22 10:54:54.083  DEBUG org.springframework.web.socket.messaging.WebSocketAnnotationMethodMessageHandler [clientInboundChannel-26] - Invoking ***.controller.StatusWebsocketsController#sendStatuses[0 args] 2016-03-22 10:54:54.083  DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory [clientInboundChannel-26] - Returning cached instance of singleton bean 'statusWebsocketsController' 2016-03-22 10:54:54.083  DEBUG org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler [clientInboundChannel-26] - Processing MESSAGE destination=/updates/statuses session=null payload=[ {   ""instanceId"" : ""201e41f4-34da-4204-8349-1ebc6b1c20e9"",   ""app"" : ""event-st...(truncated) 2016-03-22 10:54:54.083  DEBUG org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler [clientInboundChannel-26] - Processing SUBSCRIBE /updates/statuses id=sub-0 session=gok1dphb ```  **Correct update logs:**  ``` 2016-03-22 10:54:05.081  DEBUG org.springframework.web.socket.handler.LoggingWebSocketHandlerDecorator [http-nio-8082-exec-6] - New WebSocketServerSockJsSession[id=ndf0vper] 2016-03-22 10:54:05.084  DEBUG org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler [clientInboundChannel-30] - Processing CONNECT session=ndf0vper 2016-03-22 10:54:05.094  DEBUG org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler [clientInboundChannel-31] - Processing SUBSCRIBE /updates/statuses id=sub-0 session=ndf0vper 2016-03-22 10:54:05.094  DEBUG org.springframework.web.socket.messaging.WebSocketAnnotationMethodMessageHandler [clientInboundChannel-32] - Searching methods to handle SUBSCRIBE /updates/statuses id=sub-0 session=ndf0vper 2016-03-22 10:54:05.094  DEBUG org.springframework.web.socket.messaging.WebSocketAnnotationMethodMessageHandler [clientInboundChannel-32] - Invoking ***.controller.StatusWebsocketsController#sendStatuses[0 args] 2016-03-22 10:54:05.094  DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory [clientInboundChannel-32] - Returning cached instance of singleton bean 'statusWebsocketsController' 2016-03-22 10:54:05.095  DEBUG org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler [clientInboundChannel-32] - Processing MESSAGE destination=/updates/statuses session=null payload=[ {   ""instanceId"" : ""201e41f4-34da-4204-8349-1ebc6b1c20e9"",   ""app"" : ""event-st...(truncated) 2016-03-22 10:54:05.095  DEBUG org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler [clientInboundChannel-32] - Broadcasting to 1 sessions. ```    ---  **Affects:** 4.2.4","closed","status: declined,","spring-projects-issues","2016-03-22T09:02:36Z","2019-01-12T16:22:11Z"
"","18408","Addressing Mass Assignment vulnerabilities with @NoBind annotation for domain objects [SPR-13835]","**[Anton Abashkin](https://jira.spring.io/secure/ViewProfile.jspa?name=springsecurityfan)** opened **[SPR-13835](https://jira.spring.io/browse/SPR-13835?redirect=false)** and commented  Most modern frameworks provide a convenience mechanism for binding form data to a domain object. Spring MVC is no exception.  While such a function is certainly indispensable, it exposes the application to the risk of a **mass assignment vulnerability** http://www.hpenterprisesecurity.com/vulncat/en/vulncat/java/mass_assignment_sensitive_field_exposure.html  A very serious vulnerability, this is actually how GitHub got hacked back in 2012 http://www.infoq.com/news/2012/03/GitHub-Compromised  Currently, Spring MVC does address this issue by providing two methods:  http://docs.spring.io/autorepo/docs/spring-framework/3.1.x/javadoc-api/org/springframework/validation/DataBinder.html#setAllowedFields%28java.lang.String...%29  http://docs.spring.io/autorepo/docs/spring-framework/3.1.x/javadoc-api/org/springframework/validation/DataBinder.html#setDisallowedFields%28java.lang.String...%29  While obviously a step in the right direction, this approach is not always optimal, the reason being the developer must set this in **each** controller using `@InitBinder`. This duplicates effort and is error prone.  One alternative for the developer is to create Data Transfer Objects (DTOs). While this does indeed provide protection, as well as other architectural benefits, it is not practiced by many developers.  I believe the optimal way to address this is to do something similar to what the the Play Framework does by providing a `@NoBind` annotation: https://www.playframework.com/documentation/1.4.x/controllers#nobinding  public class User extends Model { `@NoBinding`(""profile"") public boolean isAdmin; `@As`(""dd, MM yyyy"") Date birthDate; public String name; }  public static void editProfile(`@As`(""profile"") User user) { … }  Expressing these constraints directly in the domain object using annotations seems optimal from both a development and security auditing point of view  Thoughts?  ---  **Issue Links:** - #12403 Provide support for configuring the bindable properties of a form-backing object using field-level annotations - #19337 Ability to suppress ""rejectedValue"" in error responses  2 votes, 5 watchers","open","type: enhancement,","spring-projects-issues","2016-01-04T22:31:36Z","2019-01-11T18:30:34Z"
"","18613","BigDecimal to Integer/Short/Byte should overflow like BigDecimal to Long does [SPR-14041]","**[andyjojo](https://jira.spring.io/secure/ViewProfile.jspa?name=andyjojo)** opened **[SPR-14041](https://jira.spring.io/browse/SPR-14041?redirect=false)** and commented  fix NumberUtils throws Exception when convert a BigDecimal to Long but sucess when convert to Integer http://stackoverflow.com/questions/35822941/numberutils-throws-exception-when-convert-a-bigdecimal-to-long-but-sucess-when-c  System.out.println(org.springframework.util.NumberUtils.convertNumberToTargetClass(new BigDecimal(""18446744073709551611""), Integer.class)); System.out.println(org.springframework.util.NumberUtils.convertNumberToTargetClass(new BigDecimal(""18446744073709551611""), Long.class)); first line returns -5 but second line throws exception java.lang.IllegalArgumentException: Could not convert number [18446744073709551611] of type [java.math.BigDecimal] to target class [java.lang.Long]: overflow  Is that the expect result of method org.springframework.util.NumberUtils.convertNumberToTargetClass?  ---  **Affects:** 4.2.5  **Reference URL:** https://github.com/spring-projects/spring-framework/pull/990  **Issue Links:** - #16060 NumberUtils.convertNumberToTargetClass does not report overflow when converting BigInteger to Long  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1ca43402712ea664eb8c9b8153d3212d58be34ec","closed","type: enhancement,","spring-projects-issues","2016-03-11T13:10:00Z","2019-01-11T15:00:52Z"
"","18829","Meta-@Conditional lookup does not work consistently with ASM [SPR-14257]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-14257](https://jira.spring.io/browse/SPR-14257?redirect=false)** and commented  When `ConditionEvaluator` looks for `Conditional` annotations, it doesn't find them when they are a meta-meta-annotation. The problem appears to be due to `ConditionEvaluator`'s use of `AnnotationTypeMetadata.getAllAnnotationAttributes` which doesn't return all of the values for all of the `Conditional` annotations that are present. The attached class should hopefully illustrate the behaviour that we're seeing. When run it should output:  ``` com.example.ConditionComposition$MetaFooAndBarConfiguration [class com.example.ConditionComposition$ConditionalOnBar$BarEnabledCondition] com.example.ConditionComposition$MetaFooAndMetaBarConfiguration [] com.example.ConditionComposition$ExplicitAnnotationConfiguration [class com.example.ConditionComposition$ConditionalOnFoo$FooEnabledCondition, class com.example.ConditionComposition$ConditionalOnBar$BarEnabledCondition] ```  My expectation is that all three configuration classes should produce the output that `ExplicitAnnotationConfiguration` produces.  ---  **Affects:** 4.2.6  **Attachments:** - [ConditionComposition.java](https://jira.spring.io/secure/attachment/23388/ConditionComposition.java) (_3.04 kB_)  **Issue Links:** - #15717 ClassPathScanningCandidateComponentProvider.findCandidateComponents fails on private meta-attributes - #17099 AnnotationAttributesReadingVisitor.doVisitEnd doesn't handle possible null return from AnnotationUtils.getAnnotations  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/24f5f368b015f58b6f5a85a7c982d9f476681712, https://github.com/spring-projects/spring-framework/commit/7de2976c1e619e19819a404237b06a44091c9ad6  **Backported to:** [4.2.7](https://github.com/spring-projects/spring-framework/milestone/144?closed=1)","closed","in: core,","spring-projects-issues","2016-05-06T10:28:06Z","2019-01-11T17:05:01Z"
"","18819","DefaultPersistenceUnitManager.determineDefaultPersistenceUnitRootUrl fails when run from a shaded jar [SPR-14246]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-14246](https://jira.spring.io/browse/SPR-14246?redirect=false)** and commented  I'll open a PR with a sample that reproduces the problem. It boils down to a call to `ClassLoader.getResource("""")` returning `null` when there are only jars on the classpath.  The failure is:  ``` May 04, 2016 4:49:33 PM org.springframework.context.annotation.AnnotationConfigApplicationContext prepareRefresh INFO: Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@49c2faae: startup date [Wed May 04 16:49:33 BST 2016]; root of context hierarchy May 04, 2016 4:49:33 PM org.springframework.context.annotation.AnnotationConfigApplicationContext refresh WARNING: Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManager' defined in com.example.ShadedClasspathRootApplication: Invocation of init method failed; nested exception is javax.persistence.PersistenceException: Unable to resolve persistence unit root URL Exception in thread ""main"" org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManager' defined in com.example.ShadedClasspathRootApplication: Invocation of init method failed; nested exception is javax.persistence.PersistenceException: Unable to resolve persistence unit root URL 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1578) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) 	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1076) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:851) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:541) 	at org.springframework.context.annotation.AnnotationConfigApplicationContext.(AnnotationConfigApplicationContext.java:84) 	at com.example.ShadedClasspathRootApplication.main(ShadedClasspathRootApplication.java:21) Caused by: javax.persistence.PersistenceException: Unable to resolve persistence unit root URL 	at org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager.determineDefaultPersistenceUnitRootUrl(DefaultPersistenceUnitManager.java:591) 	at org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager.preparePersistenceUnitInfos(DefaultPersistenceUnitManager.java:443) 	at org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager.afterPropertiesSet(DefaultPersistenceUnitManager.java:424) 	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:310) 	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:373) 	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:362) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1637) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1574) 	... 11 more Caused by: java.io.FileNotFoundException: class path resource [] cannot be resolved to URL because it does not exist 	at org.springframework.core.io.ClassPathResource.getURL(ClassPathResource.java:187) 	at org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager.determineDefaultPersistenceUnitRootUrl(DefaultPersistenceUnitManager.java:588) 	... 18 more ```  This also affects an executable jar built by Spring Boot. We used to have a hack in Boot's custom class loader that worked around this issue, but that doesn't help people who are using shaded jars, and we would prefer not to have to reintroduce the hack.  ---  **Affects:** 4.3 RC1  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/5842  **Issue Links:** - #13474 JPA without persistence.xml fails when all classpath items are jars - #15859 orm.xml should be recognized by default if using JPA - #19869 Unable to resolve persistence unit root URL with LocalContainerEntityManagerFactoryBean  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/abfe3f209d513eed28243b9d3a00eb6db4939e6e  1 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2016-05-04T15:56:29Z","2019-01-11T17:05:39Z"
"","18738","Improve failure metadata that is available from BeanInstantiationException [SPR-14166]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-14166](https://jira.spring.io/browse/SPR-14166?redirect=false)** and commented  This is a follow on from #18540.  I have just encountered a `NoUniqueBeanDefinitionException` that was the cause of a `BeanInstantiationException`:  ``` org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration': Bean instantiation via constructor failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration$$EnhancerBySpringCGLIB$$a2ce2574]: Constructor threw exception; nested exception is org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type [org.springframework.jmx.export.MBeanExporter] is defined: expected single matching bean but found 2: mbeanExporter,endpointMBeanExporter 	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:279) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1] 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1] 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1] 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1] 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1] 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:775) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1] 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:841) ~[spring-context-4.3.0.RC1.jar:4.3.0.RC1] 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:540) ~[spring-context-4.3.0.RC1.jar:4.3.0.RC1] 	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:765) [classes/:na] 	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:370) [classes/:na] 	at org.springframework.boot.SpringApplication.run(SpringApplication.java:314) [classes/:na] 	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1182) [classes/:na] 	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1171) [classes/:na] 	at com.example.Gh5682Application.main(Gh5682Application.java:12) [classes/:na] Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration$$EnhancerBySpringCGLIB$$a2ce2574]: Constructor threw exception; nested exception is org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type [org.springframework.jmx.export.MBeanExporter] is defined: expected single matching bean but found 2: mbeanExporter,endpointMBeanExporter 	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:163) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1] 	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:122) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1] 	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:271) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1] 	... 17 common frames omitted Caused by: org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type [org.springframework.jmx.export.MBeanExporter] is defined: expected single matching bean but found 2: mbeanExporter,endpointMBeanExporter 	at org.springframework.beans.factory.config.DependencyDescriptor.resolveNotUnique(DependencyDescriptor.java:172) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1] 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1059) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1] 	at org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider.getIfAvailable(DefaultListableBeanFactory.java:1544) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1] 	at org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration.(SpringApplicationAdminJmxAutoConfiguration.java:63) ~[classes/:na] 	at org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration$$EnhancerBySpringCGLIB$$a2ce2574.() ~[classes/:na] 	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) ~[na:1.8.0_60] 	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) ~[na:1.8.0_60] 	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) ~[na:1.8.0_60] 	at java.lang.reflect.Constructor.newInstance(Constructor.java:422) ~[na:1.8.0_60] 	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:147) ~[spring-beans-4.3.0.RC1.jar:4.3.0.RC1] 	... 19 common frames omitted ```  For Boot's failure analysis, it would be useful to be able to access the `Constructor` that was called from the `BeanInstantiationException`.  ---  **Affects:** 4.3 RC1  **Issue Links:** - #18540 Improve core container exception meta-data - #19449 Improve exception when failing to create a specific bean due to a NoClassDefFoundError  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7e55b0822f47abb106345f7baf84d6768646de6b","closed","type: enhancement,","spring-projects-issues","2016-04-13T19:08:49Z","2019-01-11T16:36:19Z"
"","18703","Add method to TestPropertySourceUtils to add properties files directly to the environment [SPR-14131]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-14131](https://jira.spring.io/browse/SPR-14131?redirect=false)** and commented  `TestPropertySourceUtils` allows inlined properties to be added straight to a `ConfigurableEnvironment` but only allows properties file to be added to the environment via a `ConfigurableApplicationContext`.  In Boot we'd like to create and configure the environment, set it on `SpringApplication` and then run the application which creates the application context. However, due to the current functionality provided by `TestPropertySourceUtils`, we're using an `ApplicationContextInitializer` to defer configuring the environment until the context has been created (see https://github.com/spring-projects/spring-boot/commit/69b08291992795ccea46b03dfc8bce53dd82174e) so that we have a `ConfigurableApplicationContext` to pass to `TestPropertySourceUtils`.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/463c8f149d62448135810d6a242f48b6aec9333b","closed","type: enhancement,","spring-projects-issues","2016-04-07T12:05:20Z","2016-05-06T13:55:29Z"
"","18658","In the latest 4.3 snapshots HttpEntityMethodProcessor uses a Java 8 API [SPR-14086]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-14086](https://jira.spring.io/browse/SPR-14086?redirect=false)** and commented  [This commit](https://github.com/spring-projects/spring-framework/commit/7a5e93ff16622cbffeac31f514fad11a7102c2cd) added a call to `Map.putIfAbsent` which is new in Java 8, leading to a failure on Java 7:  ``` Caused by: java.lang.NoSuchMethodError: org.springframework.http.HttpHeaders.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; 	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:183) 	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:81) 	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:130) 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827) 	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738) 	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) 	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:961) 	... 64 more ```    ---  **Affects:** 4.3 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/86d5c5c0f72617def58719b8871d129721e7455a","closed","type: bug,","spring-projects-issues","2016-03-24T11:49:56Z","2016-04-06T08:38:12Z"
"","18602","Regression: Early instantiation of a bean prevents proxying for @Async in 4.2.x but works in 4.1.x [SPR-14030]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-14030](https://jira.spring.io/browse/SPR-14030?redirect=false)** and commented  There's a behaviour difference between 4.2.x and 4.1.x around proxy creation for beans with `@Async` methods. When using 4.2.x, early instantiation of the bean makes it ineligible for proxying. It works fine with 4.1.x.  I'll submit a `spring-framework-issues` PR with a test that illustrates the problem once I've got the issue number.  ---  **Affects:** 4.2.5  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/5366  **Issue Links:** - #18293 Regression: AsyncAnnotationBeanPostProcessor fails on startup when encountering ambiguous TaskExecutor beans - #17839 AsyncAnnotationBeanPostProcessor could find TaskExecutor by type/name - #19059  Nested `@Async` annotations can block indefinitely - #20125 Consistently accept ""taskExecutor"" bean of type Executor (as stated in `@EnableAsync`'s javadoc)","closed","in: core,","spring-projects-issues","2016-03-09T10:26:48Z","2019-01-13T05:27:46Z"
"","18587","Behaviour of configuration class constructor injection changes with the presence of @Configuration [SPR-14015]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-14015](https://jira.spring.io/browse/SPR-14015?redirect=false)** and commented  I've been trying to make use of configuration class constructor injection in Boot and have observed that the behaviour varies depending on whether or not the configuration class is annotated with `@Configuration`. I haven't dug into it too much, but it appears to be related to the resolution of generic types not working when the `@Configuration` annotation is present, possibly due to the proxy that's created?  Here are a few tests that illustrates the problem:  ``` import java.util.List; import java.util.Map;  import org.junit.Test;  import org.springframework.beans.factory.ObjectProvider; import org.springframework.context.annotation.AnnotationConfigApplicationContext; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.util.Assert;  public class ConfigurationConstructorInjectionTests {  	@Test 	public void mapInjection() { 		test(MapConfiguration.class); 	}  	@Test 	public void mapInjectionWhenAnnotatedAsConfiguration() { 		test(AnnotatedMapConfiguration.class); 	}  	@Test 	public void objectProviderInjection() { 		test(ObjectProviderConfiguration.class); 	}  	@Test 	public void objectProviderInjectionWhenAnnotatedAsConfiguration() { 		test(AnnotatedObjectProviderConfiguration.class); 	}  	private void test(Class configuration) { 		new AnnotationConfigApplicationContext(configuration, FooConfiguration.class) 				.close(); 	}  	static class ObjectProviderConfiguration {  		ObjectProviderConfiguration(ObjectProvider> foos) { 			Assert.notNull(foos.getIfAvailable()); 		} 	}  	@Configuration 	static class AnnotatedObjectProviderConfiguration {  		AnnotatedObjectProviderConfiguration(ObjectProvider> foos) { 			Assert.notNull(foos.getIfAvailable()); 		}  	}  	static class MapConfiguration {  		public MapConfiguration(Map foos) {  		}  	}  	@Configuration 	static class AnnotatedMapConfiguration {  		public AnnotatedMapConfiguration(Map foos) {  		}  	}  	static class FooConfiguration {  		@Bean 		public Foo one() { 			return new Foo(); 		}  		@Bean 		public Foo two() { 			return new Foo(); 		}  	}  	static class Foo {  	}  } ```  `mapInjection` and `objectProviderMapInjection` will pass. The other two tests will fail. The only difference is the presence of `@Configuration`.    ---  **Affects:** 4.3 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/996c1cc0a6112e542ca184c8fe6ffb680b630a40, https://github.com/spring-projects/spring-framework/commit/9443c1c5dd59397e7ab07723794b61064bb15abe, https://github.com/spring-projects/spring-framework/commit/b944283354f0f340ffc7ec74b430d79703a4294a","closed","in: core,","spring-projects-issues","2016-03-03T17:13:41Z","2016-04-06T08:38:11Z"
"","18332","ControllerAdviceBean javadoc is inconsistent with its implementation [SPR-13759]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-13759](https://jira.spring.io/browse/SPR-13759?redirect=false)** and commented  The javadoc states that:  > The findAnnotatedBeans(ApplicationContext) method can be used to discover such beans. However, a ControllerAdviceBean may be created from any object, including ones without an `@ControllerAdvice`.  However, the implementation says otherwise:  ``` ControllerAdvice annotation = AnnotationUtils.findAnnotation(beanType, ControllerAdvice.class); if (annotation == null) {      throw new IllegalArgumentException(                    ""Bean type ["" + beanType.getName() + ""] is not annotated as @ControllerAdvice""); } ```    ---  **Affects:** 4.1.8, 4.2.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d64ac32e3d9538759cb1e267867fb7e5c2303922, https://github.com/spring-projects/spring-framework/commit/6963e27c7afe4a1e72bf1931ae4461e8941df4c5  **Backported to:** [4.1.9](https://github.com/spring-projects/spring-framework/milestone/133?closed=1)","closed","type: bug,","spring-projects-issues","2015-12-04T11:28:30Z","2015-12-17T09:05:31Z"
"","18328","Second call to MVC handler method with Optional parameter fails with argument type mismatch [SPR-13755]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-13755](https://jira.spring.io/browse/SPR-13755?redirect=false)** and commented  This was originally reported as a [Spring Boot issue](https://github.com/spring-projects/spring-boot/issues/4660), but I believe the problem lies in Spring MVC. I've pushed a sample that reproduces the issue to the spring-boot-issues repo: https://github.com/spring-projects/spring-boot-issues/tree/master/gh-4660.  For the first request, the argument type is correctly resolved as `java.util.Optional`. The second time it's resolved as a `MultipartFile`. A possible side-effect of the first resolution setting the HandlerMethodParameter's parameter type so the second resolution is using different inputs?  ---  **Affects:** 4.1.8, 4.2.3  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/4660  **Issue Links:** - #17245 Support for java.util.Optional as a `@RequestPart`  **Backported to:** [4.1.9](https://github.com/spring-projects/spring-framework/milestone/133?closed=1)","closed","type: bug,","spring-projects-issues","2015-12-02T14:46:21Z","2019-01-13T05:32:45Z"
"","18145","Add support for configuring ObjectMapper's default typing using Jackson2ObjectMapperBuilder [SPR-13569]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-13569](https://jira.spring.io/browse/SPR-13569?redirect=false)** and commented  This was raised in the Spring Boot tracker but, unless my search skills have failed me, I don't think the suggested SPR issue was ever opened. The requirement is to be able to provide a custom `TypeResolverBuilder` to `Jackson2ObjectMapperBuilder` and have it applied to the `ObjectMapper` via `setDefaultTyping`.   ---  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/3541","closed","type: enhancement,","spring-projects-issues","2015-10-13T12:15:51Z","2015-10-15T13:04:45Z"
"","18132","Close processing triggered by shutdown hook isn't thread safe [SPR-13556]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-13556](https://jira.spring.io/browse/SPR-13556?redirect=false)** and commented  In `AbstractApplicationContext`, `refresh` and `close` both synchronize on `startupShutdownMonitor` to prevent concurrent processing. However, when the application context's shutdown hook is performing the close processing this doesn't hold true as it doesn't synchronise on `startupShutdownMonitor`. This means it's possible for two close calls or a close and a refresh to occur in parallel.  ---  **Affects:** 4.1.7  **Reference URL:** https://github.com/spring-projects/spring-boot/issues/4130  **Issue Links:** - #18004 ClasspathXmlApplicationContext cannot be closed twice  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/92dc51f6a88c2983d07e73c707e5d53c64eb59b1, https://github.com/spring-projects/spring-framework/commit/57125c0adc505b386dd85769e311035027f1bfd0  **Backported to:** [4.1.8](https://github.com/spring-projects/spring-framework/milestone/132?closed=1)","closed","in: core,","spring-projects-issues","2015-10-09T13:03:18Z","2019-01-11T17:25:40Z"
"","18082","YamlProcessor subclasses can no longer instantiate StrictMapAppenderConstructor [SPR-13504]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-13504](https://jira.spring.io/browse/SPR-13504?redirect=false)** and commented  Spring Boot fails to compile against the latest 4.2.2 snapshots due to the removal of `StrictMapAppenderConstructor`'s public constructor in [667fc7e4](https://github.com/spring-projects/spring-framework/commit/667fc7e4a9d9daf15110339af3659404ace6adba#diff-ecae2891fd9346db1c0510963bf9e9a8).  We could work around the problem in Boot by subclassing `StrictMapAppenderConstructor` but I would prefer not to.  ---  **Affects:** 4.1.8, 4.2.2  **Issue Links:** - #21331 Restore YamlProcessor duplicate key handling against SnakeYAML 1.18+ (plus compatibility with 1.21)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/627393a1550403c8d928164f3f678a03a0cff571, https://github.com/spring-projects/spring-framework/commit/271e5fd76ac14f9df8fa756d791e4ab18e9d822d  **Backported to:** [4.1.8](https://github.com/spring-projects/spring-framework/milestone/132?closed=1)","closed","type: bug,","spring-projects-issues","2015-09-24T20:08:25Z","2019-01-11T17:29:19Z"
"","18072","Make UndertowRequestUpgradeStrategy compatible with Undertow 1.3 [SPR-13494]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-13494](https://jira.spring.io/browse/SPR-13494?redirect=false)** and commented  The return type of `HttpServerExchange` has changed which leads to a `NoSuchMethodError` when running Spring Framework 4.2.1 against Undertow 1.3:  ``` java.lang.NoSuchMethodError: io.undertow.servlet.websockets.ServletWebSocketHttpExchange.getBufferPool()Lorg/xnio/Pool; 	at org.springframework.web.socket.server.standard.UndertowRequestUpgradeStrategy$1.handleUpgrade(UndertowRequestUpgradeStrategy.java:152) ~[spring-websocket-4.2.1.RELEASE.jar:4.2.1.RELEASE] 	at io.undertow.server.protocol.http.HttpReadListener.exchangeComplete(HttpReadListener.java:350) ~[undertow-core-1.3.0.CR2.jar:1.3.0.CR2] 	at io.undertow.server.protocol.http.HttpServerConnection.exchangeComplete(HttpServerConnection.java:225) ~[undertow-core-1.3.0.CR2.jar:1.3.0.CR2] 	at io.undertow.server.HttpServerExchange.invokeExchangeCompleteListeners(HttpServerExchange.java:1202) ~[undertow-core-1.3.0.CR2.jar:1.3.0.CR2] 	at io.undertow.server.HttpServerExchange.terminateResponse(HttpServerExchange.java:1479) ~[undertow-core-1.3.0.CR2.jar:1.3.0.CR2] 	at io.undertow.server.Connectors.terminateResponse(Connectors.java:99) ~[undertow-core-1.3.0.CR2.jar:1.3.0.CR2] 	at io.undertow.server.protocol.http.HttpTransferEncoding$3.handleEvent(HttpTransferEncoding.java:197) ~[undertow-core-1.3.0.CR2.jar:1.3.0.CR2] 	at io.undertow.server.protocol.http.HttpTransferEncoding$3.handleEvent(HttpTransferEncoding.java:195) ~[undertow-core-1.3.0.CR2.jar:1.3.0.CR2] 	at io.undertow.conduits.HeadStreamSinkConduit.exitFlush(HeadStreamSinkConduit.java:178) ~[undertow-core-1.3.0.CR2.jar:1.3.0.CR2] 	at io.undertow.conduits.HeadStreamSinkConduit.flush(HeadStreamSinkConduit.java:122) ~[undertow-core-1.3.0.CR2.jar:1.3.0.CR2] 	at org.xnio.conduits.ConduitStreamSinkChannel.flush(ConduitStreamSinkChannel.java:162) ~[xnio-api-3.3.2.Final.jar:3.3.2.Final] 	at io.undertow.channels.DetachableStreamSinkChannel.flush(DetachableStreamSinkChannel.java:119) ~[undertow-core-1.3.0.CR2.jar:1.3.0.CR2] 	at org.xnio.channels.Channels.flushBlocking(Channels.java:63) ~[xnio-api-3.3.2.Final.jar:3.3.2.Final] 	at io.undertow.servlet.spec.ServletOutputStreamImpl.close(ServletOutputStreamImpl.java:609) ~[undertow-servlet-1.3.0.CR2.jar:1.3.0.CR2] 	at io.undertow.servlet.spec.HttpServletResponseImpl.closeStreamAndWriter(HttpServletResponseImpl.java:473) ~[undertow-servlet-1.3.0.CR2.jar:1.3.0.CR2] 	at io.undertow.servlet.spec.HttpServletResponseImpl.responseDone(HttpServletResponseImpl.java:557) ~[undertow-servlet-1.3.0.CR2.jar:1.3.0.CR2] 	at io.undertow.servlet.handlers.ServletInitialHandler.handleFirstRequest(ServletInitialHandler.java:331) ~[undertow-servlet-1.3.0.CR2.jar:1.3.0.CR2] 	at io.undertow.servlet.handlers.ServletInitialHandler.dispatchRequest(ServletInitialHandler.java:263) ~[undertow-servlet-1.3.0.CR2.jar:1.3.0.CR2] 	at io.undertow.servlet.handlers.ServletInitialHandler.access$000(ServletInitialHandler.java:81) ~[undertow-servlet-1.3.0.CR2.jar:1.3.0.CR2] 	at io.undertow.servlet.handlers.ServletInitialHandler$1.handleRequest(ServletInitialHandler.java:174) ~[undertow-servlet-1.3.0.CR2.jar:1.3.0.CR2] 	at io.undertow.server.Connectors.executeRootHandler(Connectors.java:198) ~[undertow-core-1.3.0.CR2.jar:1.3.0.CR2] 	at io.undertow.server.HttpServerExchange$1.run(HttpServerExchange.java:784) ~[undertow-core-1.3.0.CR2.jar:1.3.0.CR2] 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) ~[na:1.8.0] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) ~[na:1.8.0] 	at java.lang.Thread.run(Thread.java:744) ~[na:1.8.0] ```  A fix for this in 4.2.2 would be most welcome as [we'd like to use Undertow 1.3 in Boot 1.3](https://github.com/spring-projects/spring-boot/issues/3969).  ---  **Affects:** 4.2.1  **Issue Links:** - #16836 Support for Undertow 1.1 / WildFly 8.2 - #17950 Make UndertowXhrTransport compatible with Undertow 1.3 - #18127 Modifications to UndertowXhrTransport for Undertow 1.3 introduce breaking changes  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1458c7ed43b5570a198c13dbc5f9ef1cdfae7344","closed","type: enhancement,","spring-projects-issues","2015-09-24T09:45:52Z","2019-01-11T17:20:22Z"
"","18823","SpEL Compiler: problems using primitives with instanceof operator [SPR-14250]","**[Andy Clement](https://jira.spring.io/secure/ViewProfile.jspa?name=aclement)** opened **[SPR-14250](https://jira.spring.io/browse/SPR-14250?redirect=false)** and commented  These two expressions generate bad code when compiled, for slightly different reasons:  `3 instanceof T(Integer)` `'foo' instanceof T(int)`  The first because we didn't box the 3 in the `OperatorInstanceOf.generateCode` method. The second because primitive types used with instanceof need special handling. (Uncovered whilst testing some docs that Stephane referenced in another bug #18816)  ---  **Affects:** 4.3 RC1  **Issue Links:** - #18816 Review SpeL relational operators documentation  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a31f0bb3c0b5e08698214d68a23e7a8be1cc0206","closed","type: enhancement,","spring-projects-issues","2016-05-04T23:29:27Z","2019-01-11T17:04:46Z"
"","18575","Doc: i18n MessageSource example code bug [SPR-14003]","**[Andrey](https://jira.spring.io/secure/ViewProfile.jspa?name=andreybavt)** opened **[SPR-14003](https://jira.spring.io/browse/SPR-14003?redirect=false)** and commented  Paragraph [6.15.1](http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#context-functionality-messagesource) of a core documentation contains the following snippets that illustrate the way Spring resolves messages, replacing placeholders:  ```xml 1. in exceptions.properties argument.required=The '{0}' argument is required. ```  ```java this.messages.getMessage(""argument.required"",             new Object [] {""userDao""}, ""Required"", null); ```  However this code doesn't work with JDK1.8.0_45 due to the single quotes in the resource string, it should either be  ```java argument.required=The ''{0}'' argument is required. ```  or  ```java argument.required=The {0} argument is required.  ```    ---  **Affects:** 3.2.16, 4.2.4  **Backported to:** [3.2.17](https://github.com/spring-projects/spring-framework/milestone/105?closed=1)","closed","in: core,","spring-projects-issues","2016-02-29T22:19:03Z","2016-04-06T08:38:10Z"
"","18258","Using @Autowired Environment and @Bean PropertyPlaceholderConfigurer in same java-based configuration results to environment == null [SPR-13683]","**[Andrey Karandey](https://jira.spring.io/secure/ViewProfile.jspa?name=macromaniac)** opened **[SPR-13683](https://jira.spring.io/browse/SPR-13683?redirect=false)** and commented  Using `@Autowired` Environment and `@Bean` PropertyPlaceholderConfigurer in same java-based configuration results to environment == null  ```java @Configuration @PropertySource(value = ""classpath:/application.properties"", ignoreResourceNotFound = false) @ComponentScan(basePackages = ""com.home.services"") public class ApplicationConfig {      @Autowired     public Environment env;      @Bean     public PropertySourcesPlaceholderConfigurer propertySourcesPlaceholderConfigurer() {         return new PropertySourcesPlaceholderConfigurer();     }      @Bean     public MessageSource messageSource() {         ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource();         messageSource.setBasenames(""i18n/messages"", ""i18n/errors"");         return messageSource;     }      @Bean     public LocalValidatorFactoryBean validator() {         LocalValidatorFactoryBean localValidatorFactoryBean = new LocalValidatorFactoryBean();         localValidatorFactoryBean.setValidationMessageSource(messageSource());         return localValidatorFactoryBean;     }      @Bean     public JavaMailSender mailSender() {         JavaMailSenderImpl javaMailSender = new JavaMailSenderImpl();         javaMailSender.setHost(env.getProperty(""smtp.host""));         javaMailSender.setPort(env.getProperty(""smtp.port"", Integer.class));         javaMailSender.setUsername(env.getProperty(""smtp.username""));         javaMailSender.setPassword(env.getProperty(""smtp.password""));         Properties mailProperties = new Properties();         mailProperties.put(""mail.smtp.auth"", ""true"");         mailProperties.put(""mail.smtp.starttls.enable"", ""true"");         javaMailSender.setJavaMailProperties(mailProperties);         return javaMailSender;     }      @Bean     public TaskExecutor taskExecutor() {         ThreadPoolTaskExecutor threadPoolTaskExecutor = new ThreadPoolTaskExecutor();         threadPoolTaskExecutor.setCorePoolSize(5);         threadPoolTaskExecutor.setMaxPoolSize(10);         threadPoolTaskExecutor.setQueueCapacity(25);         return threadPoolTaskExecutor;     }        } ```  However, implementation of EnvironmentAware interface solves the problem.   ---  **Affects:** 4.2.2","closed","in: core,","spring-projects-issues","2015-11-13T10:42:10Z","2019-01-12T16:22:40Z"
"","18683","TransportHandlingSockJsService.scheduleSessionTask() doesn't log removed sessions [SPR-14111]","**[Andrey Borisov](https://jira.spring.io/secure/ViewProfile.jspa?name=aandreyborisov)** opened **[SPR-14111](https://jira.spring.io/browse/SPR-14111?redirect=false)** and commented  ```java try {   if (session.getTimeSinceLastActive() > getDisconnectDelay()) {   sessions.remove(session.getId());   session.close(); } } ```  code is not adding expired session to LIST 'removedSessionIds', hence logging is not working as expected   ---  **Affects:** 4.2.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d554229981381979d63c3228ae0195a376fa3b18, https://github.com/spring-projects/spring-framework/commit/01d50e9bde8a1da5e8e869d1287cef6a97907a38","closed","type: bug,","spring-projects-issues","2016-04-04T10:23:43Z","2016-04-06T08:38:10Z"
"","18180","Jetty - use Async Send like Atmosphere does [SPR-13602]","**[Andrey Borisov](https://jira.spring.io/secure/ViewProfile.jspa?name=aandreyborisov)** opened **[SPR-13602](https://jira.spring.io/browse/SPR-13602?redirect=false)** and commented  Currently I'm getting this error, just like here [link error-while-running-websockets-on-jetty](http://stackoverflow.com/questions/22169468/error-while-running-websockets-on-jetty)  ```java Caused by: java.lang.IllegalStateException: Blocking message pending 10000 for BLOCKING 	at org.eclipse.jetty.websocket.common.WebSocketRemoteEndpoint.lockMsg(WebSocketRemoteEndpoint.java:130) ~[websocket-common-9.2.13.v20150730.jar:9.2.13.v20150730] 	at org.eclipse.jetty.websocket.common.WebSocketRemoteEndpoint.sendString(WebSocketRemoteEndpoint.java:379) ~[websocket-common-9.2.13.v20150730.jar:9.2.13.v20150730] 	at org.springframework.web.socket.adapter.jetty.JettyWebSocketSession.sendTextMessage(JettyWebSocketSession.java:188) ~[spring-websocket-4.2.1.RELEASE.jar:4.2.1.RELEASE] 	at org.springframework.web.socket.adapter.AbstractWebSocketSession.sendMessage(AbstractWebSocketSession.java:105) ~[spring-websocket-4.2.1.RELEASE.jar:4.2.1.RELEASE] 	at org.springframework.web.socket.sockjs.transport.session.WebSocketServerSockJsSession.writeFrameInternal(WebSocketServerSockJsSession.java:222) ~[spring-websocket-4.2.1.RELEASE.jar:4.2.1.RELEASE] 	at org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.writeFrame(AbstractSockJsSession.java:325) ~[spring-websocket-4.2.1.RELEASE.jar:4.2.1.RELEASE] 	... 11 common frames omitted ```  I understood that instead of blocking Jetty's send, it makes sense to use Async operation like atmosphere framework does [link Jetty9WebSocket](https://github.com/Atmosphere/atmosphere/blob/master/modules/cpr/src/main/java/org/atmosphere/container/version/Jetty9WebSocket.java)  Corresponding fix in atmosphere https://github.com/Atmosphere/atmosphere/issues/1491  ---  **Affects:** 4.2.2  **Issue Links:** - #20086 Support nonblocking writing to Jetty Websocket with possibility to assign callback  2 votes, 3 watchers","closed","status: declined,","spring-projects-issues","2015-10-23T07:52:18Z","2019-01-12T16:22:43Z"
"","18684","Problems running integration tests in parallel using SpringClassRule and SpringMethodRule [SPR-14112]","**[Andrew Toolan](https://jira.spring.io/secure/ViewProfile.jspa?name=atoolan)** opened **[SPR-14112](https://jira.spring.io/browse/SPR-14112?redirect=false)** and commented  # Background:  I am trying to run JUnit integration tests in parallel and repeatedly using the SpringClassRule and SpringMethodRule. To do this I am using a custom runner which executes the tests in parallel and using a repeat annotation to run each test repeatedly. However I have noticed that after multiple iterations the tests will begin failing. One test always appears to succeed. The resulting stack trace seems to indicate that the Application Context has been changed. The tests do not make use of the `@DirtiesContext` annotation however some of the errors received appear to complain about the test context being null. I am attaching a few examples of the stack traces, below is an example:  ``` java.lang.IllegalArgumentException: The test method of the supplied TestContext must not be null 	at org.springframework.util.Assert.notNull(Assert.java:115) 	at org.springframework.test.context.support.AbstractDirtiesContextTestExecutionListener.beforeOrAfterTestMethod(AbstractDirtiesContextTestExecutionListener.java:95) 	at org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener.beforeTestMethod(DirtiesContextBeforeModesTestExecutionListener.java:95) 	at org.springframework.test.context.TestContextManager.beforeTestMethod(TestContextManager.java:265) 	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74) 	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86) 	at org.springframework.test.context.junit4.statements.RunPrepareTestInstanceCallbacks.evaluate(RunPrepareTestInstanceCallbacks.java:64) 	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84) 	at org.springframework.test.context.junit4.statements.SpringFailOnTimeout.evaluate(SpringFailOnTimeout.java:87) 	at org.springframework.test.context.junit4.statements.ProfileValueChecker.evaluate(ProfileValueChecker.java:103) 	at com.ibm.toscana.util.junit.repeat.RunRepeatedly.evaluateStatement(RunRepeatedly.java:55) 	at com.ibm.toscana.util.junit.repeat.RunRepeatedly.evaluate(RunRepeatedly.java:34) 	at org.junit.rules.RunRules.evaluate(RunRules.java:20) 	at org.junit.experimental.theories.Theories$TheoryAnchor$1$1.evaluate(Theories.java:232) 	at org.junit.experimental.theories.Theories$TheoryAnchor.runWithCompleteAssignment(Theories.java:218) 	at org.junit.experimental.theories.Theories$TheoryAnchor.runWithAssignment(Theories.java:204) 	at com.ibm.toscana.util.junit.runner.ToscanaRunner$ParallelTheoryAnchor.runWithAssignment(ToscanaRunner.java:70) 	at org.junit.experimental.theories.Theories$TheoryAnchor.evaluate(Theories.java:187) 	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) 	at java.util.concurrent.ForkJoinTask$AdaptedRunnableAction.exec(ForkJoinTask.java:1397) 	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:300) 	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1067) 	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1703) 	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:168) ```  I have tried changing from the default Spring Repeat annotation to another implementation but I am seeing the same behavior. All tests are within the same test class. I was wondering if there was any reason why using SpringClassRule and SpringMethodRule in parallel might cause problems?  I was hoping to try run the tests without the SpringMethodRule being applied as I do not need to leverage any of Springs Method level annotations but I noticed that there is an explicit dependency between them.  I am using spring-boot version 1.3.2.RELEASE and JUnit 4.12.  ---  **Attachments:** - [failed_tests_stacktraces.txt](https://jira.spring.io/secure/attachment/23357/failed_tests_stacktraces.txt) (_10.52 kB_)  **Issue Links:** - #10532 Allow for concurrent test execution in the TestContext framework (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2016-04-04T12:52:35Z","2019-01-12T16:45:43Z"
"","18592","Enhance @EntityScan to work for multiple EntityManagerFactories [SPR-14020]","**[Andrew Neeson](https://jira.spring.io/secure/ViewProfile.jspa?name=andyrokit)** opened **[SPR-14020](https://jira.spring.io/browse/SPR-14020?redirect=false)** and commented  Spring Boot makes it really easy to include a single, default data source.  It auto-configures all the required components (TransactionManager, EntityManagerFactory, JpaVendorAdapter, Datasource...).  The existing `@EntityScan` is great in that it it allows you to effectively loosely-couple your persistence implementation.  Without it, you'd need to hard-code your [packagesToScan](http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/orm/jpa/LocalContainerEntityManagerFactoryBean.html#setPackagesToScan-java.lang.String...-).  My issue comes when you want to use multiple datasources.  It's not that hard to create the beans manually.  However, it does have one unfortunate side-effect; it means that we can't use `@EntityScan`.  So we're back to hard-coding the packagesToScan parameter.  Would it be possible to do the following:  **Add an annotation for auto-configuring multiple data sources** The annotation should trigger behaviour exactly like Spring Boot does with a single data source, but for multiple data sources.  E.g. {code: title=MyDatasourceConfig.java} `@Configuration` `@EnableDataSource`(name = ""red"", prefix = ""my.red"", primary = true) `@EnableDataSource`(name = ""blue"", prefix = ""my.blue"")  ```  {code: title=application.properties} my.red.spring.datasource.username=red_database_user my.red.spring.jpa.hibernate.ddl-auto=create my.red.spring.jpa.database=sql-server ... my.blue.spring.datasource.username=blue_database_user my.blue.spring.jpa.hibernate.ddl-auto=validate my.blue.spring.jpa.database=oracle ... ```  Would create the following beans:  * redTransactionManager * redEntityManagerFactory * redDatasource * blueTransactionManager * blueEntityManagerFactory * blueDatasource  The `@EntityScan` could then be enhanced to only configure the primary EntityManager (which should help make this change backwards-compatible with existing code).  An additional parameter: ""entityManagerFactoryRef""  could be added to specify which EntityManagerFactory to use.  E.g.  {code: title=MyAppRedConfig.java} `@Configuration` `@EnableJpaRepositories`( basePackages = { ""my.red.data.access"" }, entityManagerFactoryRef = ""redEntityManagerFactory"", transactionManagerRef = ""redTransactionManager"" )  `@EntityScan`( basePackages = { ""my.red.data.model"" }, entityManagerFactoryRef = ""redEntityManagerFactory"" )  ```  ..it'd also be nice if @EnableJpaRepositories was @Repeatable so we don't have to create separate config files for the red and blue datasources, but it's a minor issue. ```    ---  **Affects:** 4.2.4","closed","status: invalid,","spring-projects-issues","2016-03-04T14:51:06Z","2019-01-12T05:23:02Z"
"","18682","Print EhCache cache manager name when initializing [SPR-14110]","**[Andrei Ivanov](https://jira.spring.io/secure/ViewProfile.jspa?name=shadow)** opened **[SPR-14110](https://jira.spring.io/browse/SPR-14110?redirect=false)** and commented  Hi, As we have more than 1 cache manager, it would be nice to also get the name (or maybe bean id if the name is not available) in the initialization message:  ``` 2016-04-04 10:00:52,054 localhost-startStop-1 ||| INFO  [o.s.c.e.EhCacheManagerFactoryBean] - Initializing EhCache CacheManager 2016-04-04 10:00:53,527 localhost-startStop-1 ||| INFO  [o.s.c.e.EhCacheManagerFactoryBean] - Initializing EhCache CacheManager 2016-04-04 10:01:03,676 localhost-startStop-1 ||| INFO  [o.s.c.e.EhCacheManagerFactoryBean] - Initializing EhCache CacheManager 2016-04-04 10:01:11,218 localhost-startStop-1 ||| INFO  [o.s.c.e.EhCacheManagerFactoryBean] - Initializing EhCache CacheManager ```    ---  **Affects:** 4.2.5","closed","type: enhancement,","spring-projects-issues","2016-04-04T10:05:25Z","2016-04-06T08:38:09Z"
"","18656","Upgrade to XStream 1.4.9 [SPR-14084]","**[Andrei Ivanov](https://jira.spring.io/secure/ViewProfile.jspa?name=shadow)** opened **[SPR-14084](https://jira.spring.io/browse/SPR-14084?redirect=false)** and commented  Released on March 15, 2016. It mentions a **security** fix too among others.   ---  **Affects:** 4.2.5  **Reference URL:** http://x-stream.github.io/changes.html#1.4.9  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a5904efbde78b01cbe986d96f61274528ec75d07, https://github.com/spring-projects/spring-framework/commit/7e4563a825771f24a8f99e17d7d2133b69e489f4","closed","type: task,","spring-projects-issues","2016-03-24T09:35:51Z","2016-04-06T08:38:14Z"
"","18466","Callback interfaces such as LoadTimeWeaverAware should allow for local overriding [SPR-13892]","**[Andrei Ivanov](https://jira.spring.io/secure/ViewProfile.jspa?name=shadow)** opened **[SPR-13892](https://jira.spring.io/browse/SPR-13892?redirect=false)** and commented  Trying to inject a custom `LoadTimeWeaver` into a `LoadTimeWeaverAware` fails, as it initially gets injected but then the `LoadTimeWeaverAwareProcessor` comes along and injects the default `loadTimeWeaver`.  ```xml    	 	 		 			com.test.module1.entity 			com.test.module2.entity 		 	 	 		 			true 		 	 	 		 	  ```  ---  **Affects:** 4.2.4  **Issue Links:** - #18459 Proper load-time weaving support for Hibernate 5  0 votes, 5 watchers","closed","status: bulk-closed,","spring-projects-issues","2016-01-26T16:20:58Z","2019-01-12T02:44:06Z"
"","18459","Proper load-time weaving support for Hibernate 5 [SPR-13886]","**[Andrei Ivanov](https://jira.spring.io/secure/ViewProfile.jspa?name=shadow)** opened **[SPR-13886](https://jira.spring.io/browse/SPR-13886?redirect=false)** and commented  Trying to upgrade Hibernate from 4.3.x to 5.0 throws this nice exception:  ``` 25-Jan-2016 13:34:10.985 SEVERE [localhost-startStop-2] org.apache.catalina.core.StandardContext.listenerStop Exception sending context destroyed event to listener instance of class org.springframework.web.context.ContextLoaderListener  java.lang.ClassCircularityError: org/apache/log4j/spi/ThrowableInformation 	at org.apache.log4j.spi.LoggingEvent.(LoggingEvent.java:165) 	at org.apache.log4j.Category.forcedLog(Category.java:391) 	at org.apache.log4j.Category.log(Category.java:856) 	at org.slf4j.impl.Log4jLoggerAdapter.log(Log4jLoggerAdapter.java:595) 	at org.apache.commons.logging.impl.SLF4JLocationAwareLog.error(SLF4JLocationAwareLog.java:216) 	at org.springframework.orm.jpa.persistenceunit.ClassFileTransformerAdapter.transform(ClassFileTransformerAdapter.java:66) 	at org.springframework.instrument.classloading.WeavingTransformer.transformIfNecessary(WeavingTransformer.java:95) 	at org.springframework.instrument.classloading.WeavingTransformer.transformIfNecessary(WeavingTransformer.java:78) 	at org.springframework.instrument.classloading.tomcat.TomcatInstrumentableClassLoader.findResourceInternal(TomcatInstrumentableClassLoader.java:127) 	at org.apache.catalina.loader.WebappClassLoaderBase.findClassInternal(WebappClassLoaderBase.java:2427) 	at org.apache.catalina.loader.WebappClassLoaderBase.findClass(WebappClassLoaderBase.java:860) 	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1302) 	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1167) 	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:963) 	at org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:934) 	at org.springframework.web.context.ContextLoader.closeWebApplicationContext(ContextLoader.java:583) 	at org.springframework.web.context.ContextLoaderListener.contextDestroyed(ContextLoaderListener.java:116) 	at org.apache.catalina.core.StandardContext.listenerStop(StandardContext.java:4859) 	at org.apache.catalina.core.StandardContext.stopInternal(StandardContext.java:5478) 	at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:232) 	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:160) 	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:725) 	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:701) 	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:717) 	at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:945) 	at org.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1795) 	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) 	at java.util.concurrent.FutureTask.run(FutureTask.java:266) 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) 	at java.lang.Thread.run(Thread.java:745) ```  It hides the actual `ClassCircularityError`, thrown here:  ```                                                                                                             EnhancingClassTransformerImpl.transform(ClassLoader, String, Class, ProtectionDomain, byte[]) line: 44	                                                                                                             ClassFileTransformerAdapter.transform(ClassLoader, String, Class, ProtectionDomain, byte[]) line: 56	                                                                                             WeavingTransformer.transformIfNecessary(String, String, byte[], ProtectionDomain) line: 95	                                                                     WeavingTransformer.transformIfNecessary(String, byte[]) line: 78	                                                                                             TomcatInstrumentableClassLoader.findResourceInternal(String, String, boolean) line: 127	                                                                                                 TomcatInstrumentableClassLoader(WebappClassLoaderBase).findClassInternal(String) line: 2427	                                                                                     TomcatInstrumentableClassLoader(WebappClassLoaderBase).findClass(String) line: 860	                                                                                                 TomcatInstrumentableClassLoader(WebappClassLoaderBase).loadClass(String, boolean) line: 1302	                                                                                         TomcatInstrumentableClassLoader(WebappClassLoaderBase).loadClass(String) line: 1167	                                                                                                             EnhancingClassTransformerImpl.transform(ClassLoader, String, Class, ProtectionDomain, byte[]) line: 44	                                                                                                             ClassFileTransformerAdapter.transform(ClassLoader, String, Class, ProtectionDomain, byte[]) line: 56	                                                                                             WeavingTransformer.transformIfNecessary(String, String, byte[], ProtectionDomain) line: 95	                                                                     WeavingTransformer.transformIfNecessary(String, byte[]) line: 78	                                                                                             TomcatInstrumentableClassLoader.findResourceInternal(String, String, boolean) line: 127	                                                                                                 TomcatInstrumentableClassLoader(WebappClassLoaderBase).findClassInternal(String) line: 2427	                                                                                     TomcatInstrumentableClassLoader(WebappClassLoaderBase).findClass(String) line: 860	                                                                                                 TomcatInstrumentableClassLoader(WebappClassLoaderBase).loadClass(String, boolean) line: 1302	                                                                                         TomcatInstrumentableClassLoader(WebappClassLoaderBase).loadClass(String) line: 1167	                                                                         MetadataBuildingProcess.handleTypes(MetadataBuildingOptions) line: 327	                                                                                         MetadataBuildingProcess.complete(ManagedResources, MetadataBuildingOptions) line: 111	                                                         EntityManagerFactoryBuilderImpl.metadata() line: 847	                                                     EntityManagerFactoryBuilderImpl.build() line: 874	                                                                                                                 SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(PersistenceUnitInfo, Map) line: 60	                                                                                         LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory() line: 343	                                                                                                             LocalContainerEntityManagerFactoryBean(AbstractEntityManagerFactoryBean).afterPropertiesSet() line: 318	                                                                                                                                     DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).invokeInitMethods(String, Object, RootBeanDefinition) line: 1637	                                                                                                                                 DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).initializeBean(String, Object, RootBeanDefinition) line: 1574	                                                                                                                                 DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).doCreateBean(String, RootBeanDefinition, Object[]) line: 545	                                                                                                                             DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).createBean(String, RootBeanDefinition, Object[]) line: 482	                                                 AbstractBeanFactory$1.getObject() line: 306	                                                                                                             DefaultListableBeanFactory(DefaultSingletonBeanRegistry).getSingleton(String, ObjectFactory) line: 230	                                                                                                             DefaultListableBeanFactory(AbstractBeanFactory).doGetBean(String, Class, Object[], boolean) line: 302	                                                                             DefaultListableBeanFactory(AbstractBeanFactory).getBean(String) line: 197	                                                                                     XmlWebApplicationContext(AbstractApplicationContext).getBean(String) line: 1054	                                                                                                                                     XmlWebApplicationContext(AbstractApplicationContext).finishBeanFactoryInitialization(ConfigurableListableBeanFactory) line: 829	                                                                             XmlWebApplicationContext(AbstractApplicationContext).refresh() line: 538	                                                                                                                                             ContextLoaderListener(ContextLoader).configureAndRefreshWebApplicationContext(ConfigurableWebApplicationContext, ServletContext) line: 446	                                                                                             ContextLoaderListener(ContextLoader).initWebApplicationContext(ServletContext) line: 328	                                                                             ContextLoaderListener.contextInitialized(ServletContextEvent) line: 107	                                             StandardContext.listenerStart() line: 4812	                                             StandardContext.startInternal() line: 5255	                                                     StandardContext(LifecycleBase).start() line: 150	                                                                     StandardHost(ContainerBase).addChildInternal(Container) line: 725	                                                             StandardHost(ContainerBase).addChild(Container) line: 701	                                             StandardHost.addChild(Container) line: 717	                                                     HostConfig.deployWAR(ContextName, File) line: 945	                                         HostConfig$DeployWar.run() line: 1795	                                                 Executors$RunnableAdapter.call() line: 511	                                 FutureTask.run() line: 266	                                                                     ThreadPoolExecutor.runWorker(ThreadPoolExecutor$Worker) line: 1142	                                             ThreadPoolExecutor$Worker.run() line: 617	 Thread.run() line: 745 ```  MetadataBuildingProcess.handleTypes(MetadataBuildingOptions) line: 327	-> triggers loading of `org.hibernate.type.BasicTypeRegistry` 1st. call to EnhancingClassTransformerImpl.transform(ClassLoader, String, Class, ProtectionDomain, byte[]) line: 44	triggers the loading of `org.hibernate.bytecode.enhance.spi.Enhancer` 2nd. call triggers the `ClassCircularityError`  Investigating the issue, I see that `org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl` calls `persistenceUnit.getTempClassLoader()`, which ends up in `org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver#getThrowawayClassLoader`, invoking `org.springframework.instrument.classloading.tomcat.TomcatInstrumentableClassLoader#getThrowawayClassLoader`. In theory, this should handle this scenario. There are 2 problems here: 1. It returns `org.apache.catalina.loader.WebappClassLoader`, which is not a `DecoratingClassLoader`, so the exclude package (`org.hibernate`) is not set:    `SpringPersistenceUnitInfo#getNewTempClassLoader`  ```java public ClassLoader getNewTempClassLoader() {      ClassLoader tcl = (this.loadTimeWeaver != null ? this.loadTimeWeaver.getThrowawayClassLoader() :                new SimpleThrowawayClassLoader(this.classLoader));      String packageToExclude = getPersistenceProviderPackageName();      if (packageToExclude != null && tcl instanceof DecoratingClassLoader) {           ((DecoratingClassLoader) tcl).excludePackage(packageToExclude);      }      return tcl; } ```  Even if it did, just `org.hibernate` wouldn't be enough here. 1. This temp classloader is no longer used when the error occurs    `EntityManagerFactoryBuilderImpl`, on line 227, pushes the class transformer but 3 lines after (230) it sets the temp classloader to null.    After this, `EntityManagerFactoryBuilderImpl#build` is called, and that triggers the error.  Now for the workaround. Inspired by the `AspectJClassBypassingClassFileTransformer`, I've created my own:  ```java public class HibernateClassBypassingLoadTimeWeaver implements LoadTimeWeaver {  	private final LoadTimeWeaver loadTimeWeaver;  	public HibernateClassBypassingLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver) { 		Assert.notNull(loadTimeWeaver); 		this.loadTimeWeaver = loadTimeWeaver; 	}  	@Override 	public ClassLoader getInstrumentableClassLoader() { 		return loadTimeWeaver.getInstrumentableClassLoader(); 	}  	@Override 	public ClassLoader getThrowawayClassLoader() { 		return loadTimeWeaver.getThrowawayClassLoader(); 	}  	@Override 	public void addTransformer(ClassFileTransformer transformer) { 		loadTimeWeaver.addTransformer(new HibernateClassBypassingClassFileTransformer(transformer)); 	}  	/** 	 * ClassFileTransformer decorator that suppresses processing of Hibernate 	 * classes in order to avoid potential LinkageErrors. 	 * @see org.springframework.context.annotation.LoadTimeWeavingConfiguration 	 */ 	private static class HibernateClassBypassingClassFileTransformer implements ClassFileTransformer { 		private static final Logger LOGGER = LoggerFactory.getLogger(HibernateClassBypassingClassFileTransformer.class);  		private final ClassFileTransformer delegate;  		public HibernateClassBypassingClassFileTransformer(ClassFileTransformer delegate) { 			this.delegate = delegate; 		}  		@Override 		public byte[] transform(ClassLoader loader, String className, Class classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) 				throws IllegalClassFormatException {  			if (className.startsWith(""org.hibernate"") || className.startsWith(""org/hibernate"") || className.startsWith(""javassist"")) { 				LOGGER.trace(""Bypassing class: {}"", className); 				return classfileBuffer; 			} 			return this.delegate.transform(loader, className, classBeingRedefined, protectionDomain, classfileBuffer); 		} 	} ```  As you can see in the code, ignoring just the Hibernate classes isn't enough, the Javassist classes must also be ignored.  The problem with the workaround so far is that it cannot injected:  ```xml 	  	 		 		 			 		 		 		 			 		 		 		 			 				 				 				 				 				 				 				 				--> 				 			 		 		 			 				org.springframework.issues.entity 			 		 		 			 				 			 		 	 ```  My LTW initially gets injected, but then the `LoadTimeWeaverAwareProcessor` comes along and injects back the original LTW (`DefaultContextLoadTimeWeaver`). I even tried with a `DefaultPersistenceUnitManager`, but that also implements `LoadTimeWeaverAware`.  So, to get my LTW injected, I've created my own processor:  ```java public class HibernateLoadTimeWeaverAwareProcessor implements BeanPostProcessor { 	private static final Logger LOGGER = LoggerFactory.getLogger(HibernateLoadTimeWeaverAwareProcessor.class);  	private final LoadTimeWeaver loadTimeWeaver;  	public HibernateLoadTimeWeaverAwareProcessor(LoadTimeWeaver loadTimeWeaver) { 		this.loadTimeWeaver = new HibernateClassBypassingLoadTimeWeaver(loadTimeWeaver); 	}  	@Override 	public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException { 		if (bean instanceof LoadTimeWeaverAware && bean instanceof EntityManagerFactoryInfo) { 			JpaDialect jpaDialect = ((EntityManagerFactoryInfo) bean).getJpaDialect(); 			boolean isHibernate = jpaDialect instanceof HibernateJpaDialect; 			LOGGER.info(""EMF {} has Hibernate dialect: {}"", bean, isHibernate); 			if (isHibernate) { 				LOGGER.info(""Injecting custom LTW: {}"", loadTimeWeaver); 				((LoadTimeWeaverAware) bean).setLoadTimeWeaver(loadTimeWeaver); 			} 		} 		return bean; 	}  	@Override 	public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException { 		return bean; 	} } ```  This finally makes it run.  So, did I miss something in the configuration? Is this supposed to run using standard Spring configuration? Or maybe Hibernate + bytecode enhancement wasn't tested thoroughly?  The app is running inside a Tomcat 8.0.30 with LTW active.  ---  **Affects:** 4.2.4  **Issue Links:** - #18452 LocalSessionFactoryBean (hibernate5) does not correctly pass custom ClassLoader to Hibernate - #15483 Detect LoadTimeWeaver bean when declared through `@Bean` method as well - #21626 Documentation for running hibernate with bytecode enhancement on a spring stack - #12098 Doc: Load-time weaving limitations with Tomcat and Hibernate - #18059 Compatibility with Hibernate ORM 5.1 - #18466 Callback interfaces such as LoadTimeWeaverAware should allow for local overriding  **Referenced from:** pull request https://github.com/spring-projects/spring-framework-issues/pull/117, and commits https://github.com/spring-projects/spring-framework/commit/bdb94738ec7d1552922db42a5a096e457a75beca, https://github.com/spring-projects/spring-framework/commit/836a321ab2ae1aa1f75535a9d70f2183c4cbe00a, https://github.com/spring-projects/spring-framework/commit/b82df144e48efa115d2cffaf4daa6e707af36ecc  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2016-01-25T14:22:49Z","2019-01-13T05:32:02Z"
"","18355","VerifyError when trying to compile constructor invocation with SpEL [SPR-13781]","**[Andrei Ivanov](https://jira.spring.io/secure/ViewProfile.jspa?name=shadow)** opened **[SPR-13781](https://jira.spring.io/browse/SPR-13781?redirect=false)** and commented  Trying to use `@Cachable` on a method triggers a SpEL compiler exception:  ``` @Cacheable(cacheManager = ""eohsCacheManager"", cacheNames = ""eohsManagersCache"", key = ""#userId.toLowerCase(T(java.util.Locale).ENGLISH)"") private Manager getRemoteManager(String userId) { } ```  Also tried with `#userId.toString().toLowerCase(T(java.util.Locale).ENGLISH)`, fails the same way.  Works with `#userId.toLowerCase()`.  Stacktrace is actually from my 4.2.4 SNAPSHOT test.  ``` 2015-12-09 14:27:00,271 taskExecutor-5 ||| DEBUG [o.s.e.s.s.SpelCompiler] - SpEL: compiling #userId.toLowerCase(T(java.util.Locale).ENGLISH) 2015-12-09 14:27:00,287 taskExecutor-5 ||| ERROR [o.q.c.JobRunShell] - Job DEFAULT.personsSyncJob threw an unhandled Exception:  java.lang.IllegalStateException: Failed to instantiate CompiledExpression 	at org.springframework.expression.spel.standard.SpelCompiler.compile(SpelCompiler.java:111) 	at org.springframework.expression.spel.standard.SpelExpression.compileExpression(SpelExpression.java:467) 	at org.springframework.expression.spel.standard.SpelExpression.checkCompile(SpelExpression.java:437) 	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:243) 	at org.springframework.cache.interceptor.ExpressionEvaluator.key(ExpressionEvaluator.java:115) 	at org.springframework.cache.interceptor.CacheAspectSupport$CacheOperationContext.generateKey(CacheAspectSupport.java:635) 	at org.springframework.cache.interceptor.CacheAspectSupport.generateKey(CacheAspectSupport.java:490) 	at org.springframework.cache.interceptor.CacheAspectSupport.collectPutRequests(CacheAspectSupport.java:461) 	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:341) 	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:302) 	at org.springframework.cache.aspectj.AbstractCacheAspect.ajc$around$org_springframework_cache_aspectj_AbstractCacheAspect$1$2bc714b5(AbstractCacheAspect.aj:74) 	..... Caused by: java.lang.VerifyError: (class: spel/Ex2, method: getValue signature: (Ljava/lang/Object;Lorg/springframework/expression/EvaluationContext;)Ljava/lang/Object;) Incompatible object argument for function call 	at java.lang.Class.getDeclaredConstructors0(Native Method) 	at java.lang.Class.privateGetDeclaredConstructors(Class.java:2671) 	at java.lang.Class.getConstructor0(Class.java:3075) 	at java.lang.Class.newInstance(Class.java:412) 	at org.springframework.expression.spel.standard.SpelCompiler.compile(SpelCompiler.java:108) ```  ---  **Affects:** 4.1.8, 4.2.3  **Issue Links:** - #17032 SpEL compiler creating bad byte code for some values that are added together via OpPlus  **Backported to:** [4.1.9](https://github.com/spring-projects/spring-framework/milestone/133?closed=1)","closed","in: core,","spring-projects-issues","2015-12-09T14:39:54Z","2019-01-11T19:27:32Z"
"","18225","Add section on clustered Quartz scheduler [SPR-13649]","**[Andrei Ivanov](https://jira.spring.io/secure/ViewProfile.jspa?name=shadow)** opened **[SPR-13649](https://jira.spring.io/browse/SPR-13649?redirect=false)** and commented  Trying to create a clustered Quartz configuration is a bit difficult since the reference documentation doesn't have any info about it and Google returns some pretty old blog posts with old versions of Spring.  What I would like to see improved: - section on creating a clustered scheduler.   Something like  ```xml  	 	 	 	 	 		 			AUTO 			qrtz_ 			true 			true 		 	  ```  - A note regarding `MethodInvokingJobDetailFactoryBean` that it can't be used for clustered Quartz (or even better, improve it to work) - A sample of a `jobDetail` with DI, I assume with `SpringBeanJobFactory`   The way I've done this is by using `@Configurable`, as would make DI work on deserialization too (I've used the same approach on JSF beans)  ```java @Configurable public class UsersSyncJob extends QuartzJobBean implements Serializable { 	@Autowired 	private transient UserFacade userFacade;  	@Override 	protected void executeInternal(JobExecutionContext context) throws JobExecutionException { 		userFacade.syncUsers(); 	} } ```  - Sample usage of `SchedulerAccessorBean` for when you want to register jobs/triggers from separate modules (I've discovered this nice utility by looking at the source code):  ```xml  	 	 		 			 		 	  ```    ---  1 votes, 2 watchers","open","in: core,","spring-projects-issues","2015-11-06T11:25:28Z","2016-05-17T20:07:06Z"
"","18338","AbstractRequestLoggingFilter with startAsync: unwrap request to find ContentCachingRequestWrapper  [SPR-13764]","**[Andreas Voellmy](https://jira.spring.io/secure/ViewProfile.jspa?name=andreasv)** opened **[SPR-13764](https://jira.spring.io/browse/SPR-13764?redirect=false)** and commented  In a subclass of AbstractRequestLoggingFilter in beforeRequest(), the request parameter is an instance of ContentCachingRequestWrapper, which allows createMessage(), or subclass code to access the cached content. However, in an asynchronous method return, the request passed to afterRequest() is **not** an instance of ContentCachingRequestWrapper, so createMessage() doesn't include cached contents. The request object does wrap a ContentCachingRequestWrapper, but the immediate request object is not an instance of ContentCachingRequestWrapper. It seems like it would better if the request argument to afterRequest was also an instance of ContentCachingRequestWrapper.   ---  **Affects:** 4.1 GA, 4.2 GA  **Backported to:** [4.1.9](https://github.com/spring-projects/spring-framework/milestone/133?closed=1)","closed","type: enhancement,","spring-projects-issues","2015-12-05T22:32:46Z","2015-12-17T09:05:31Z"
"","18785","SocketUtils fails to find a port when providing only two ports [SPR-14211]","**[Amit Wertheimer](https://jira.spring.io/secure/ViewProfile.jspa?name=amit_wer)** opened **[SPR-14211](https://jira.spring.io/browse/SPR-14211?redirect=false)** and commented  when trying to find an available port between two ports, the ""maxport"" is exclusive (meaning - that if I ask for a port with minPort=1024, maxPort=1025, the util will check only for the availability of port 1024.  Nowhere in the documentation could I find any mention of the fact that the maxport is exclusive (plus, if maxport and minport are provided, it makes no sense for it to be exclusive).    ---  **Affects:** 4.2.5, 4.3 RC1  **Reference URL:** https://github.com/spring-projects/spring-framework/blob/master/spring-core/src/main/java/org/springframework/util/SocketUtils.java  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bf7b475267a0b5db597735d52c27a3e5aabc3a75, https://github.com/spring-projects/spring-framework/commit/002d6d70a511b5cfb61d287e068fa4b4fcf0583e","closed","type: bug,","spring-projects-issues","2016-04-24T09:36:22Z","2016-05-06T08:13:31Z"
"","18163","PooledConnectionFactory for JMS [SPR-13586]","**[Amey Jadiye](https://jira.spring.io/secure/ViewProfile.jspa?name=ameyjadiye)** opened **[SPR-13586](https://jira.spring.io/browse/SPR-13586?redirect=false)** and commented  Spring provides classes for jms connection optimisation, however both **SingleConnectionFactory** and **CachingConnectionFactory** able to maintain only 1 TCP connection under the hood, Spring should have a PooledConnectionFactory which can pool multiple TCP connection and multiple session/consumer/producers under that, which can be better for throughPut  and high load system.   --- No further details from [SPR-13586](https://jira.spring.io/browse/SPR-13586?redirect=false)","open","type: enhancement,","spring-projects-issues","2015-10-19T09:01:03Z","2016-06-02T09:30:31Z"
"","18275","@ManagedOperationParameter not marked with @Target/@Retention/@Documented/@Repeatable [SPR-13700]","**[Allan Jones](https://jira.spring.io/secure/ViewProfile.jspa?name=allan.jones)** opened **[SPR-13700](https://jira.spring.io/browse/SPR-13700?redirect=false)** and commented  All annotations in org.springframework.jmx.export.annotation package contain the annotation `@Documented`, therefore they could be part of any javadoc documentation. The only exception is `@org`.springframework.jmx.export.annotation.ManagedOperationParameter which contains two important fields: name and description.  Current Scenario: My project has several JMX-exposed methods annotated with `@ManagedOperation` and `@ManageOperationParameters`/`@ManageOperationParameter`. I use the description on both annotations to guide the clients when using a JMX console. A javadoc is also generated as a guide/reference for clients that use this service through a different tool, and the parameters name/description are missing in the javadoc.  A small note: `@Target`, `@Retention` annotations are also missing.  ---  **Affects:** 4.2.3  **Issue Links:** - #17729 Allow the ManagedResource/Attribute/Metric/Operation to be placed on interface  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3aefc9659378bae89f8d4e478d8488957ee7c352","closed","type: enhancement,","spring-projects-issues","2015-11-18T15:03:59Z","2019-01-11T19:32:59Z"
"","18574","convertPropertyValue (for reading encrypted values) not working [SPR-14001]","**[Alireza Fattahi](https://jira.spring.io/secure/ViewProfile.jspa?name=afattahi)** opened **[SPR-14001](https://jira.spring.io/browse/SPR-14001?redirect=false)** and commented  As mentioned in http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/PropertyResourceConfigurer.html:  the convertPropertyValue method has been documented as:  ``` Convert the given property value from the properties source to the value which should be applied. The default implementation simply returns the original value. Can be overridden in subclasses, for example to detect encrypted values and decrypt them accordingly. ```  So instead of using:  ```xml  ```  I used this:  ```xml                         classpath:/configs/*.properties            classpath:/configs/bsi/*-config.properties                   ```  an the new PropertySourcesPlaceholderConfigurer  is defined as:  ```java public class DecryptPropertyConfigurer extends PropertySourcesPlaceholderConfigurer {      @Override     protected String convertPropertyValue(String originalValue){         //for some properties, do some conversions     }  }  ```  The convert method is never called. Am I missing some thing our this is a bug?!  ---  **Affects:** 4.2.4  **Issue Links:** - #13568 PropertySourcesPlaceholderConfigurer never calls ""convertProperties"" on merged properties (_**""duplicates""**_) - #13603 Allow the use of custom PropertySource annotations in `@Configuration` classes","closed","status: bulk-closed,","spring-projects-issues","2016-02-29T14:41:45Z","2019-01-13T05:27:50Z"
"","18749","Encoded URL is depicted as decoded in the Controller function, therefore stating it has illegal characters [SPR-14178]","**[Alin Turbut](https://jira.spring.io/secure/ViewProfile.jspa?name=alinturbut@gmail.com)** opened **[SPR-14178](https://jira.spring.io/browse/SPR-14178?redirect=false)** and commented  Basically, what I am trying to do is make a request like this:  ```java http://localhost:8085/api/candidates/searchWithFacet?q=helmut&page=0&size=20&fq=skills%3A%22Keine%20Angabe%22& ```  but Spring MVC is throwing this error:  ```java java.net.URISyntaxException: Illegal character in query at index 51: /api/candidates/searchWithFacet?q=helmut&fq=skills:""Keine Angabe""?page=0&size=20 ```  I don't understand why it is stating that I have an illegal character as I am encoding it. I have also tried encoding the whole URL, not just the last part of it like this:  ```java http://localhost:8085/%2Fapi%2Fcandidates%2Fsearch%3Fq%3Dhelmut%26page%3D0%26size%3D20 ```  The error I am receiving here is 400 - Bad Request.  My two involved Controller functions are:  ```java @Timed @RequestMapping(value = ""/candidates/search"", method = RequestMethod.GET, produces = {         MediaType.APPLICATION_JSON_VALUE }) public ResponseEntity searchCandidatesWithFaceting(@RequestParam(name = ""q"") String query,         Pageable page) throws SolrServerException, URISyntaxException { ```  ...  ```java @Timed @RequestMapping(value = ""/candidates/searchWithFacet"", method = RequestMethod.GET, produces = {         MediaType.APPLICATION_JSON_VALUE }) public ResponseEntity getCandidatesWithFacet(@RequestParam(name = ""q"") String query,         @RequestParam(name = ""fq"") String facetQuery, Pageable page)         throws SolrServerException, URISyntaxException { ```  I have tried same methods on a different Spring server running with the latest Spring-Boot-Starter-Web and it works with these exact examples.  UPDATE: I have created a POST method to try and resolve this issue with a hack which led me to a more interesting issue. I am doing the request as follows from Angular:  ```java getUrl = 'api/candidates/searchWithFacet' + '?page=' + page + ""&size="" + results             		             		var data = JSON.stringify({                         q: query,                         fq: $rootScope.filterQuery                     });                                      var config = {                         headers : {                         	'Accept' : 'application/json',                             'Content-Type': 'application/json;charset=utf-8;'                         }                     }                                  		return $http.post(getUrl, data, config).then(function (response) {                         return response.data;                     }, function(error) {                     	alert(""An error occured during the call! Please refresh the page."")                     }); ```  The error message is:  ```java java.net.URISyntaxException: Illegal character in query at index 51: /api/candidates/searchWithFacet?q=helmut&fq=rate:[0 TO *]?page=1&size=20 ```  I am really troubled by this and have no idea why this occurs. Why is it putting the form data into the request url?   ---  **Affects:** 4.2.5  **Reference URL:** http://stackoverflow.com/questions/36623568/spring-mvc-encoded-url-is-seen-as-decoded?noredirect=1#comment60879980_36623568","closed","status: invalid,","spring-projects-issues","2016-04-15T10:04:51Z","2019-01-12T05:22:56Z"
"","18616","DefaultUserDestinationResolver does not support ""."" separator convention  [SPR-14044]","**[Ali Shahbour](https://jira.spring.io/secure/ViewProfile.jspa?name=shahbour)** opened **[SPR-14044](https://jira.spring.io/browse/SPR-14044?redirect=false)** and commented  When using Artemis as StompBrokerRelay , queue names should follow jms for example `jms.queue.call`.  Every thing worked fine except when trying to send message or subscribe to user queue , i subscribe to queue like this `/user/jms.queue.call`, it did not work and the reason is in DefaultUserDestinationResolver and specifically in:  ```java private ParseResult parse(Message message)  . . int prefixEnd = this.prefix.length() - 1; String actualDestination = destination.substring(prefixEnd); ```  The actualDestination is resolved as `/jms.queue.call` which did not work with Artemis.  Same for sending message:  ```java int prefixEnd = this.prefix.length(); int userEnd = destination.indexOf('/', prefixEnd); Assert.isTrue(userEnd > 0, ""Expected destination pattern \""/user/{userId}/**\""""); String actualDestination = destination.substring(userEnd); String subscribeDestination = this.prefix.substring(0, prefixEnd - 1) + actualDestination; ```  ActualDestination had the same extra `/`.  I removed these through debugging and it worked.  Shouldn't DefaultUserDestinationResolver support both . and / as delimiter ?  ---  **Affects:** 4.2.5  **Issue Links:** - #20822 config.enableSimpleBroker(""/topic"", ""/queue""); Should be config.enableSimpleBroker(""/topic"", ""queue"");  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/183594207fbb447e1b59262b4469f2aefbb8a3ec","closed","type: enhancement,","spring-projects-issues","2016-03-11T19:51:23Z","2019-01-11T15:00:55Z"
"","18553","LinkedCaseInsensitiveMap doesn't implement getOrDefault properly [SPR-13981]","**[Alexey Pomelov](https://jira.spring.io/secure/ViewProfile.jspa?name=apomelov)** opened **[SPR-13981](https://jira.spring.io/browse/SPR-13981?redirect=false)** and commented  The default `getOrDefault` method implemented in the `java.util.Map` interface uses only `get` and `containsKey` methods. Within the `LinkedCaseInsensitiveMap` class these methods work with special form of keys. But `getOrDefault` method is overriden also in `HashMap` and `LinkedHashMap` and it calculates hashes for keys itself.  As a result can get this behavior. Assuming select a single row via jdbc template with the column `IS_SINGLE=Y` Here are results of some method calls to the resulting map:  ``` map.containsKey(""is_single"") // true map.containsKey(""IS_SINGLE"") // true map.get(""is_single"") // Y map.get(""IS_SINGLE"") // Y map.getOrDefault(""is_single"", ""N"") // N !!! map.getOrDefault(""IS_SINGLE"", ""N"") // Y ```  ---  **Affects:** 4.2.4  **Issue Links:** - #19593 LinkedCaseInsensitiveMap does not properly support Java 8's merge() and compute() methods - #19078 LinkedCaseInsensitiveMap doesn't override HashMap.clone() - #21126 Inconsistent handling of null values through Java 8 accessors in ConcurrentReferenceHashMap - #21465 LinkedCaseInsensitiveMap should explicitly implement putIfAbsent and computeIfAbsent","closed","in: core,","spring-projects-issues","2016-02-25T11:15:33Z","2019-01-11T19:02:34Z"
"","18162","Cannot inject List even using @Named [SPR-13585]","**[Alexandre Navarro](https://jira.spring.io/secure/ViewProfile.jspa?name=schumnana)** opened **[SPR-13585](https://jira.spring.io/browse/SPR-13585?redirect=false)** and commented  Impossible to inject a Generic type (like List\) to create a `@Bean` via an argument of the method even though with using `@Named`  A full example to describe the problem  ```   @Configuration public class AppConfiguration {          private static final Logger LOGGER = LoggerFactory.getLogger(AppConfiguration.class);       @Bean     public Map map() {         Map map = new HashMap<>();         for (int i = 0; i < 10; i++) {             map.put("""" + i, """" + i);         }         return map;     }               // Does not work, inject does not work for a generic type     // Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [java.lang.String] found for dependency [map with value type java.lang.String]: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@javax.inject.Named(value=map)}     @Bean     public List list2( @Named(""map"") Map map) {         return new ArrayList<>(map.values());     }          // Work      @Resource(name = ""map"")     private Map map;               // Work     @Bean     public List list() {         return new ArrayList<>(this.map.values());     }                    /**      * main.      *      * @param args      */     public static void main(String[] args) {          final ApplicationContext context =          new AnnotationConfigApplicationContext(AppConfiguration.class);         final Map map = (Map) context.getBean(""map"");         LOGGER.info(""map={}"", map);         final List list = (List) context.getBean(""list"");         LOGGER.info(""list={}"", list); //        final List list2 = (List) context.getBean(""list2""); //        LOGGER.info(""list2={}"", list2);     }   }  ```  For me, it should work. Tell if I did something wrong or if it exists a work around just via annotation on arguments of a `@Bean` method (I don't want to use Wrapper class of a GenericType or `@Resource` the bean wanted in a field in the Configuration file like in the example).  ---  **Affects:** 4.2.2  **Issue Links:** - #15894 Make spring support like CDI `@Produces` (for Array/Map/Collection inject) (_**""is duplicated by""**_) - #12570 Allow for normal bean wiring semantics for types assignable to Map - #16794 `@Autowired` does not work for target bean of type Collection  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4a0fa69ce469cae2e8c8a1a45f0b43f74a74481d","closed","type: enhancement,","spring-projects-issues","2015-10-18T22:04:19Z","2019-01-13T05:34:57Z"
"","18291","FileSystemXmlApplicationContext constructor fails with some absolute paths [SPR-13718]","**[Alexander Veit](https://jira.spring.io/secure/ViewProfile.jspa?name=veita)** opened **[SPR-13718](https://jira.spring.io/browse/SPR-13718?redirect=false)** and commented  FileSystemXmlApplicationContext modifies the given path making it relative instead of absolute.  ``` import org.springframework.context.support.FileSystemXmlApplicationContext  new FileSystemXmlApplicationContext(""/.mntpts/test/test.xml"") ```  Fails with  ``` Caught: org.springframework.beans.factory.BeanDefinitionStoreException: IOException parsing XML document from file [/tmp/.mntpts/test/test.xml]; nested exception is java.io.FileNotFoundException: .mntpts/test/test.xml (No such file or directory) org.springframework.beans.factory.BeanDefinitionStoreException: IOException parsing XML document from file [/tmp/.mntpts/test/test.xml]; nested exception is java.io.FileNotFoundException: .mntpts/test/test.xml (No such file or directory)         at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:344)         at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:304)         at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:180)         at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:216)         at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:187)         at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:251)         at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:127)         at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:93)         at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:129)         at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:537)         at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:452)         at org.springframework.context.support.FileSystemXmlApplicationContext.(FileSystemXmlApplicationContext.java:140)         at org.springframework.context.support.FileSystemXmlApplicationContext.(FileSystemXmlApplicationContext.java:84)         at test.run(test.groovy:4) Caused by: java.io.FileNotFoundException: .mntpts/test/test.xml (No such file or directory)         at org.springframework.core.io.FileSystemResource.getInputStream(FileSystemResource.java:115)         at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:330)         ... 13 more ```    ---  **Affects:** 4.2.3","closed","in: core,","spring-projects-issues","2015-11-23T14:03:49Z","2019-01-12T16:22:36Z"
"","18811","Annotated class with @SendToUser overrides @SendTo on method [SPR-14238]","**[Alex](https://jira.spring.io/secure/ViewProfile.jspa?name=dusty)** opened **[SPR-14238](https://jira.spring.io/browse/SPR-14238?redirect=false)** and commented  Since version 4.3 we can annotate a class with `@SendToUser` in order to avoid to repeat the annotation on every `@MessageMapping` method in the class, and that's great.  Anyway, that creates a problem when I a method of the class uses a `@SendTo` annotation: instead of overriding the class wide annotation, it gets ignored.  I think that the correct semantic should be that if a method is annotated with a `@SendTo` annotation it should ovverride _both_ `@SendTo` and `@SendToUser` class wide annotations.  ---  **Affects:** 4.3 RC1  **Issue Links:** - #21430 Enable use of both `@SendTo` and `@SendToUser` on the same method  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/46e41a9d94bf586e5a80f262d2eee31b9612e93f","closed","type: bug,","spring-projects-issues","2016-05-02T16:14:18Z","2019-01-13T05:25:54Z"
"","18705","class annotated @SendToUser does not work as expected [SPR-14133]","**[Alex](https://jira.spring.io/secure/ViewProfile.jspa?name=dusty)** opened **[SPR-14133](https://jira.spring.io/browse/SPR-14133?redirect=false)** and commented  I've an application where a controller has this annotation similar to this on every method:  > `@SendToUser`(""myqueue"")  Since 4.3rc1 I read from the api documentation that:  > The annotation may also be placed at class-level in which case all methods in the class where the annotation applies will inherit it.  So I deleted it from all the methods and annotated the class but my (client) app stopped working: it's not receiving messages any more.  Is there any catch I must be aware of?   ---  **Affects:** 4.3 RC1","closed","in: web,","spring-projects-issues","2016-04-07T14:58:07Z","2019-01-11T16:39:43Z"
"","18229","CommonsMultipartResolver.setMaxUploadSizePerFile() does not work if encoding does not match the default encoding [SPR-13653]","**[Alex Shesterov](https://jira.spring.io/secure/ViewProfile.jspa?name=alex.shesterov)** opened **[SPR-13653](https://jira.spring.io/browse/SPR-13653?redirect=false)** and commented  Release 4.2 added support for per-file size limits — task #17792. The new method is `CommonsFileUploadSupport.setMaxUploadSizePerFile(long)`.  But this setting has no effect if file encoding does not match default encoding.  The reason is the following code in `CommonsFileUploadSupport`:  ```java 	protected FileUpload prepareFileUpload(String encoding) { 		FileUpload fileUpload = getFileUpload(); 		FileUpload actualFileUpload = fileUpload;  		// Use new temporary FileUpload instance if the request specifies 		// its own encoding that does not match the default encoding. 		if (encoding != null && !encoding.equals(fileUpload.getHeaderEncoding())) { 			actualFileUpload = newFileUpload(getFileItemFactory()); 			actualFileUpload.setSizeMax(fileUpload.getSizeMax());  			// !!missing:  actualFileUpload.setFileSizeMax(fileUpload.getFileSizeMax());  			actualFileUpload.setHeaderEncoding(encoding); 		}  		return actualFileUpload; 	} ```  ---  **Affects:** 4.2.2  **Issue Links:** - #17792 CommonsMultipartResolver should support setFileSizeMax - #19204 CommonsMultipartResolver should explicitly convert FileSizeLimitExceededException next to SizeLimitExceededException  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a1bf941ec4282e9924c2e98bf5e9816a509c4d26","closed","type: bug,","spring-projects-issues","2015-11-06T18:23:52Z","2019-01-11T19:15:10Z"
"","18172","SystemEnvironmentPropertySource should try to replace hyphens as well [SPR-13594]","**[Alex Antonov](https://jira.spring.io/secure/ViewProfile.jspa?name=aantono)** opened **[SPR-13594](https://jira.spring.io/browse/SPR-13594?redirect=false)** and commented  This seems to be a common problem, with an easy solution (as noted by multiple postings on StackOverflow, i.e. - http://stackoverflow.com/questions/28158732/spring-boot-how-to-override-properties-with-dash-on-linux-env-profile?answertab=active#28182563).  When using Linux OS Environment to set properties (overrides), the property names that contain dashes (\-), such as `jobs.batch-size`, don't get properly mapped if using an env variable `JOBS_BATCH_SIZE` and using `@Value(""${jobs.batch-size}"")` field declaration. Since Linux command-line does not allow for use of dashes (\-) in setting the ENV variables, this makes it hard to set those variables using environment.  A proposed fix would be to add another transformation step inside `SystemEnvironmentPropertySource.java:resolvePropertyName(String name)` to also do `name.replace('\-', '\_')` in addition to `name.replace('.', '_')`  ```java private String resolvePropertyName(String name) { 	Assert.notNull(name, ""Property name must not be null""); 	if (containsKey(name)) { 		return name; 	}  	String usName = name.replace('.', '_').replace('-', '_'); 	if (!name.equals(usName) && containsKey(usName)) { 		return usName; 	}  	String ucName = name.toUpperCase(); 	if (!name.equals(ucName)) { 		if (containsKey(ucName)) { 			return ucName; 		} 		else { 			String usUcName = ucName.replace('.', '_').replace('-', '_'); 			if (!ucName.equals(usUcName) && containsKey(usUcName)) { 				return usUcName; 			} 		} 	}  	return name; } ```  ---  **Affects:** 4.2.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/95d62658ff52837a44d88d9386841e1fa2eb8171","closed","type: enhancement,","spring-projects-issues","2015-10-21T17:38:09Z","2019-01-13T20:46:54Z"
"","18430","CrossOrigin controller annotation does not work [SPR-13857]","**[Aleksey Korolev](https://jira.spring.io/secure/ViewProfile.jspa?name=aleksey.korolev)** opened **[SPR-13857](https://jira.spring.io/browse/SPR-13857?redirect=false)** and commented  The problem happens when `@EnableWebMvc` annotation is not present in `@Configuration` annotated class. In this case deprecated version of handler mapping implementation is used: DefaultAnnotationHandlerMapping. Request handlers returned by this mapping do not have cors configuration object. In this case DefaultCorsProcessor.processRequest method does not reject the request but at the same time does not add Access-Control-Allow-Origin header which makes http client reject the response. Related piece of code in DefaultCorsProcessor.processRequest:  ```java boolean preFlightRequest = CorsUtils.isPreFlightRequest(request); if (config == null) { 	if (preFlightRequest) { 		rejectRequest(serverResponse); 		return false; 	} 	else { 		return true; 	} }  return handleInternal(serverRequest, serverResponse, config, preFlightRequest); ```  When `@EnableWebMvc` annotation is present another implementation of handler mapping is used: RequestMappingHandlerMapping. WebMvcConfigurationSupport class initialized instance of mapping with cors configurations in requestMappingHandlerMapping() method. Cors configurations are then checked by the code referenced above.  Related feature: #13916.  ---  **Affects:** 4.2 GA, 4.2.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e56587dcc3c73bde6f8f2e8f3de142792af08a49","closed","status: declined,","spring-projects-issues","2016-01-11T14:46:15Z","2019-01-12T16:22:30Z"
"","18245","@ContextConfiguration defined on a base class and a composed annotation do not merge [SPR-13670]","**[Alain Sahli](https://jira.spring.io/secure/ViewProfile.jspa?name=asahli)** opened **[SPR-13670](https://jira.spring.io/browse/SPR-13670?redirect=false)** and commented  When a test has multiple `@ContextConfiguration` annotations defined on a base class and a composed annotation then the one defined on the composed annotation is ignored.  I created a small example that illustrates the issue (see reference URL). In this case the [TestAppContext](https://gist.github.com/alainsahli/a3d8fd26adc527aa422c#file-testappcontext-java) defined on the [ComposedAnnotation](https://gist.github.com/alainsahli/a3d8fd26adc527aa422c#file-composedannotation-java) is ignored and therefore the [ComposedAnnotationTest](https://gist.github.com/alainsahli/a3d8fd26adc527aa422c#file-composedannotationtest-java) fails because the needed bean does not exist.  If the test class is directly annotated with `@ContextConfiguration` instead of using the [ComposedAnnotation](https://gist.github.com/alainsahli/a3d8fd26adc527aa422c#file-composedannotation-java) it works (see [WorkingTest](https://gist.github.com/alainsahli/a3d8fd26adc527aa422c#file-workingtest-java)).  ---  **Affects:** 4.1.7  **Reference URL:** https://gist.github.com/alainsahli/a3d8fd26adc527aa422c  **Issue Links:** - #17346 Favor more locally declared composed annotations over inherited annotations in the TestContext framework (_**""duplicates""**_) - #19839 Ability to use `@ContextConfiguration` and a meta `@ContextConfiguration` on the same class","closed","status: bulk-closed,","spring-projects-issues","2015-11-11T14:47:53Z","2019-01-15T11:13:13Z"
"","18636","ResponseEntity to accept body with that expose lastModified and eTag without exeplicit assignment [SPR-14064]","**[Ahmad Hashem](https://jira.spring.io/secure/ViewProfile.jspa?name=ahmadhashem)** opened **[SPR-14064](https://jira.spring.io/browse/SPR-14064?redirect=false)** and commented  As I am exposing REST services using Controller, returning ResponseEntity requires me to call each header for setting LastModified, eTag .. If response Entity accepts a body that may implement a Cacheable interface for example, exposing lastModified, eTag, then I don't need to specify the body, then lastModified, then eTag.   --- No further details from [SPR-14064](https://jira.spring.io/browse/SPR-14064?redirect=false)","closed","type: enhancement,","spring-projects-issues","2016-03-17T09:07:04Z","2016-03-18T08:50:35Z"
"","18322","Binding support for copies of collections to be returned from canonically-named accessor methods [SPR-13749]","**[Adam Burley](https://jira.spring.io/secure/ViewProfile.jspa?name=adamburleybarclays)** opened **[SPR-13749](https://jira.spring.io/browse/SPR-13749?redirect=false)** and commented  I got directed here by the Spring Boot team. If you have an accessor (getter) in a `@ConfigurationProperties`-annotated class to retrieve a collection, and if you call the copy constructor in that accessor, the returned collection appears to be empty.  Example YAML file (""example.yml""):  ``` one:    two:       - three       - four       - five ```  Example Spring Controller:  ```java @RestController public class ExampleController {     @Autowired     private ExampleYamlStore exampleYamlStore;      @RequestMapping({""/*""})     public String index() {         List two = exampleYamlStore.getTwo();         String str;         if (two.size() == 0) {             str = ""Size was zero"";         } else {             str = two.get(0) + "",""                     + two.get(1) + "",""                     + two.get(2);         }         return ""RESULT: "" + str;     } } ```  Example YAML store (without copy constructor in accessor):  ```java @Component @ConfigurationProperties(locations = ""classpath:/example.yml"", prefix = ""one"") public class ExampleYamlStore {     private List two = new ArrayList<>();      public List getTwo() {         return two; // ***MARKED LINE***     }      public void setTwo(List two) {         this.two = new ArrayList<>(two);     } } ```  Running this code and hitting http://localhost:8080/foo will give the response ""RESULT: three,four,five"" as expected.  However if you change the marked line above to:  ```java return new ArrayList<>(two); ```  Then hit http://localhost:8080/foo - you will get the response ""RESULT: Size was zero"".  Spring should allow consumers to return a copy of a collection, to prevent any caller from modifying the internal collection. Are you retrieving the list somewhere internally and then modifying it but not setting it back onto the `@ConfigurationProperties`-annotated class?  I am using the latest version of Spring Boot (1.3.0) and Java 1.7. I got told by the team at Spring Boot that ""Binding is actually handled by the core Spring Framework.""   ---  **Affects:** 4.2.3","closed","type: enhancement,","spring-projects-issues","2015-12-01T21:02:33Z","2021-08-06T00:42:08Z"
"","18321","ActiveProfiles not included when using a custom annotation. [SPR-13748]","**[Adam Berlin](https://jira.spring.io/secure/ViewProfile.jspa?name=aberlin@pivotal.io)** opened **[SPR-13748](https://jira.spring.io/browse/SPR-13748?redirect=false)** and commented  The following doesn't work:  ```java @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(loader = SpringApplicationContextLoader.class) @ReproduceTest.MyActiveProfile public class ReproduceTest {      @Autowired     private String value;      @Test     public void itDoesNotPickUpTestPropertiesUsingMetaAnnotation() {         assertEquals(""foo"", this.value);     }      @ActiveProfiles({""foo""})     public static @interface MyActiveProfile {     }      @Configuration     @Profile(""foo"")     public static class FooConfig {         @Bean         public String value() {             return ""foo"";         }     } } ```  ---  **Affects:** 4.1.8  **Issue Links:** - #17346 Favor more locally declared composed annotations over inherited annotations in the TestContext framework (_**""duplicates""**_) - #16221 Favor more locally declared composed annotations over inherited annotations","closed","status: duplicate,","spring-projects-issues","2015-12-01T19:35:20Z","2019-01-12T16:45:52Z"
"","18804","Allow @Cacheable method to return java.util.Optional variant of cached value [SPR-14230]","**[Acacio Antonio Andruczewicz](https://jira.spring.io/secure/ViewProfile.jspa?name=andrucz)** opened **[SPR-14230](https://jira.spring.io/browse/SPR-14230?redirect=false)** and commented  ```java class MyServiceImpl implements MyService {      private static final String CACHE_NAME = ""itemCache"";            @Override     @Cacheable(CACHE_NAME)     public Optional findById(Long id) {         // access the repository to retrieve the item     }      @Override     @CachePut(cacheNames = CACHE_NAME, key = ""#item.id"")     public Item insertItem(Item item) {         ...     }  } ```  In the above example, a ClassCastException is thrown because insertItem puts an Item instance in the cache, and findById expects an Optional that may contain an Item instance. It would be nice if Spring cache abstraction supported Java 8 Optional.  ---  **Affects:** 4.2.5  **Reference URL:** http://stackoverflow.com/questions/36844270/handling-java-8-optional-with-spring-cache  **Issue Links:** - #13892 Provide means to configure multithreaded access for cache abstraction - #14212 Using Spring beans as a part of key in cache annotations (`@Cacheable` etc.) doesn't work - #19419 Allow `@Cacheable` method to return java.util.Optional variant of cached value with `@Cacheable`(sync=true) - #18913 Allow `@CachePut` to specify the object to store using SpEL  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/240f254bfc6f7c55896b612b8f406d7e29d715a1, https://github.com/spring-projects/spring-framework/commit/fdb31cd715f4a8811fbbe0b541b54ee5f65fa8df  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2016-04-28T15:11:27Z","2019-01-13T05:25:58Z"
"","18796","Define what value to put in a cache [SPR-14222]","**[Acacio Antonio Andruczewicz](https://jira.spring.io/secure/ViewProfile.jspa?name=andrucz)** opened **[SPR-14222](https://jira.spring.io/browse/SPR-14222?redirect=false)** and commented  Using Spring cache abstraction, I want to cache the results of itemExists method calls. When an item is inserted by insertItem method, I want to put the value true in the cache.  ```java class MyServiceImpl implements MyService {     private static final String CACHE_EXISTS_NAME = ""existsCache"";     @Override    @Cacheable(CACHE_EXISTS_NAME)    public boolean itemExists(Long id) {        // access the repository the check whether the item exists    }     @Override    @CachePut(cacheNames = CACHE_EXISTS_NAME, key = ""#item.id"")    public Item insertItem(Item item) {        ...    }  } ```  It would be good if `@CachePut` could have a result attribute, where I could put a SpEL to define which value would be put in the cache.   ---  **Affects:** 4.2.5  **Reference URL:** http://stackoverflow.com/questions/36844544/define-what-value-to-put-in-a-spring-cache","closed","type: enhancement,","spring-projects-issues","2016-04-26T13:06:21Z","2016-05-02T13:24:50Z"
"","18186","Using BeanSerializerModifier on classes extending HATEOAS ResourceSupport does not work on individual objects of the class, just on lists of objects of the class. [SPR-13608]","**[Abhishek Bommakanti](https://jira.spring.io/secure/ViewProfile.jspa?name=abhishek2bommakanti)** opened **[SPR-13608](https://jira.spring.io/browse/SPR-13608?redirect=false)** and commented  I'm using BeanSerializerModifier to be able to implement application-wide functionality to ignore certain JSON rendering of objects that meet a specific condition. Everything works great except for classes that extend the HATEOAS ResourceSupport class. For these classes, the functionality works as expected only if we render Collections of objects of those classes. If we try to render individual objects directly, then the custom serializer is never called.  To demonstrate, run the Spring Boot application using  mvn spring-boot:run Then run the following commands  curl -X GET http://localhost:8080/list curl -X GET http://localhost:8080/list-resource The above two URLs will return the same response. This is expected behavior.  Now run the commands below  curl -X GET http://localhost:8080/person/1 curl -X GET http://localhost:8080/person-resource/1 and  curl -X GET http://localhost:8080/person/2 curl -X GET http://localhost:8080/person-resource/2 Output of these pairs of URLs is different although if everything was working correctly, they would be the same. In the second of these URLs, the custom serializer is not called.   ---  **Reference URL:** https://github.com/abhishek2bommakanti/bean-init-modifier-with-hateaoas.git","closed","status: duplicate,","spring-projects-issues","2015-10-25T23:58:44Z","2019-01-12T16:45:58Z"
"","18443","AbstractJackson2HttpMessageConverter is incompatible with Jackson 2.7+ [SPR-13870]","**[Abhijit Sarkar](https://jira.spring.io/secure/ViewProfile.jspa?name=asarkar)** opened **[SPR-13870](https://jira.spring.io/browse/SPR-13870?redirect=false)** and commented  `AbstractJackson2HttpMessageConverter.getJavaType` calls `objectMapper.getTypeFactory().constructType(type, contextClass)`. In Jackson 2.7+, they modified the signature of `constructType` and it doesn't take a 2nd `Class` argument anymore. This is breaking everything that uses the `AbstractJackson2HttpMessageConverter`, including `RestTemplate` and controllers that output JSON.  `AbstractJackson2HttpMessageConverter` claims that it is ""Compatible with Jackson 2.1 and higher."" but that's not true anymore. The newer Jackson has features that are very desirable, like customization options for JDK8 date time, so downgrading is not a viable option for modern clients.  Sample stacktrace:  ``` java.lang.NoSuchMethodError: com.fasterxml.jackson.databind.type.TypeFactory.constructType(Ljava/lang/reflect/Type;Ljava/lang/Class;)Lcom/fasterxml/jackson/databind/JavaType; at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.getJavaType(AbstractJackson2HttpMessageConverter.java:311) at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.canRead(AbstractJackson2HttpMessageConverter.java:146) at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.canRead(AbstractJackson2HttpMessageConverter.java:141) at org.springframework.web.client.RestTemplate$AcceptHeaderRequestCallback.doWithRequest(RestTemplate.java:706) at org.springframework.web.client.RestTemplate$HttpEntityRequestCallback.doWithRequest(RestTemplate.java:769) at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:594) at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:572) at org.springframework.web.client.RestTemplate.exchange(RestTemplate.java:493) ```  ---  **Issue Links:** - #18426 Improve Jackson 2.7 compatibility (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2016-01-14T18:57:59Z","2019-01-12T16:45:50Z"
"","18256","EventListener in a Request scoped bean fails context initialization [SPR-13681]","**[Abhijit Sarkar](https://jira.spring.io/secure/ViewProfile.jspa?name=asarkar)** opened **[SPR-13681](https://jira.spring.io/browse/SPR-13681?redirect=false)** and commented  I've a request scoped bean:  ``` @Component @Scope(value = SCOPE_REQUEST, proxyMode = TARGET_CLASS) public class RequestContextImpl implements RequestContext, Cloneable {   @EventListener   void setServiceId(ServiceIdFoundEvent event) {     this.serviceId = event.getServiceId();   } } ```  ``` public class ServiceIdFoundEvent extends ApplicationEvent {   private static final long serialVersionUID = -4841984309730357349L;    public ServiceIdFoundEvent(Integer serviceId) {     super(serviceId);   }    public int getServiceId() {     return (Integer) source;   }    // equals and hashCode } ```  that fails the context initialization with the following error message:  ``` INFO] [talledLocalContainer] 14:56:54.809 [localhost-startStop-1] ERROR o.s.web.context.ContextLoader - Context initialization failed [INFO] [talledLocalContainer] org.springframework.beans.factory.BeanInitializationException: Failed to process @EventListener annotation on bean with name 'requestContextImpl'; nested exception is java.lang.IllegalStateException: @EventListener method 'setServiceId' found on bean target class 'RequestContextImpl', but not found in any interface(s) for bean JDK proxy. Either pull the method up to an interface or switch to subclass (CGLIB) proxies by setting proxy-target-class/proxyTargetClass attribute to 'true' [INFO] [talledLocalContainer] 	at org.springframework.context.event.EventListenerMethodProcessor.afterSingletonsInstantiated(EventListenerMethodProcessor.java:95) ~[spring-context-4.2.0.RELEASE.jar:4.2.0.RELEASE] [INFO] [talledLocalContainer] 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:792) ~[spring-beans-4.2.0.RELEASE.jar:4.2.0.RELEASE] [INFO] [talledLocalContainer] 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:834) ~[spring-context-4.2.0.RELEASE.jar:4.2.0.RELEASE] ```  Not only the message is wrong (it asks for CGLIB proxy which is `ScopedProxyMode.TARGET_CLASS`, it appears from the logs that the `EventListenerMethodProcessor` is trying to process the bean definition as a singleton.  ---  **Affects:** 4.2 GA  **Issue Links:** - #18103 EventListenerMethodProcessor unconditionally instantiates certain beans, leading to BeanCreationException during deployment - #17619 EventListenerMethodProcessor resolves classes of lazy beans causing NoClassDefFoundError  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/24e4f56d7efaafe72e672c8fc0d01d57150e6de3","closed","in: core,","spring-projects-issues","2015-11-12T23:12:31Z","2019-01-11T19:25:50Z"
"","18791","Spring @ActiveProfiles change attempting to cache Contexts yet does not bode well for static variables [SPR-14217]","**[Aaron Axisa](https://jira.spring.io/secure/ViewProfile.jspa?name=mangusbrother)** opened **[SPR-14217](https://jira.spring.io/browse/SPR-14217?redirect=false)** and commented  Assume the following component:  ```java @Component public class MyComponent {     private static MyComponent INSTANCE = new MyComponent();      private MyComponent() {         INSTANCE = this;     }      public static MyComponent getInstance() {         return INSTANCE;     } } ```  And in another class I have this Helper component class:  ```java @Component public class MyBeanHelper {     private static MyBeanHelper INSTANCE = new MyBeanHelper();      private MyBeanHelper() {         INSTANCE = this;     }      public static MyBeanHelper getInstance() {         return INSTANCE;     }      @Autowired     private MyComponent component;      public MyComponent getComponent () {         return component;     } } ```  Now. I have the following tests:  ```java @ActiveProfiles(""myProfile1"") public class TestA extends MyIntegrationAbstractTest {      @Test     public void test() {         System.out.println(""===============1:  ""+ MyBeanHelper.getInstance().getComponent().toString());     } } ```  and  ```java @ActiveProfiles({""myProfile1"", ""myProfile2""}) public class TestB extends MyIntegrationAbstractTest {      @Autowired     private MyComponent component;      @Test     public void test() {         System.out.println(""===============2:  ""+ component.toString());     } } ```  and  ```java @ActiveProfiles(""myProfile1"") public class TestC extends MyIntegrationAbstractTest {      @Test     public void test() {         System.out.println(""===============1:  ""+ MyBeanHelper.getInstance().getComponent().toString());     } } ```  Where `MyIntegrationAbstractTest` specified the SpringTestRunner and ComponentScans.  The following behaviour was noticed in spring:  1. Spring Context is Created for TestA 2. Spring Context is re-created for TestB 3. Test C has the same profiles as Test A, so we re-use a cached version of the context created in Step 1.  The issue is that in step 2, when it creates the component, it is setting the static `INSTANCE` variable as well. However, as this is static, it is in fact the same variable present in the Context of step 1, hence overriding it. When `TestC` comes to execute, the context will be mostly the context of `TestA`, but with any static instances still from `TestB`.  In fact possible output:  ``` ===============1:  MyComponent@680bddf5 ===============2:  MyComponent@2caf6912 ===============3:  MyComponent@2caf6912 ```  #### Analysis  If you add a `@DirtiesContext` on `TestA`, the cached context will be destroyed and a new Context will be created for `TestC`. However this requires knowledge of tests outside the actual test which goes against core testing principles. The alternative would be to set `@DirtiesContext` on all the tests which would prevent this problem but be a severe hit in performance as all the test classes would require the context to be rebuilt while breaking a fundamental concept of testing where each test should not depend on a separate test.  Ideally there is some way to save the state of the static instance in this caching?   --- No further details from [SPR-14217](https://jira.spring.io/browse/SPR-14217?redirect=false)","closed","status: declined,","spring-projects-issues","2016-04-25T20:33:14Z","2019-01-12T16:34:22Z"
"","879","Update Value.java","# {systemProperties.myProp} should be ${systemProperties.myProp}","closed","","pkaq","2015-09-28T00:55:32Z","2015-09-28T20:14:33Z"
"","1047","Proposal for easing the development of annotation driven static method advices","# Proposal for easing the development of annotation driven static method advices and pointcuts  When developmening adivces around custom annotations, I'd like to have a simple AOP support API. Preferably, I'd like to have the annotation passed to the interceptor to be able process its attributes in a type-safe way. ## Example ### Interceptor implementation  ``` @interface LogUsage {   String usageTypeDescription(); } ```  ``` public class LogUsageMethodAdvice extends AnnotationMethodAdvice {   @Override   public Class getAnnotationType() {     return LogUsage.class;   }    @Override   protected void duringFinally(LogUsage annotation, Method method, Object[] args, Object target) {     String usageTypeDescription = annotation.usageTypeDescription()     // Log usage   } } ``` ### Service bean  ``` @Service public class SummarizationServiceImpl implements SummarizationService {   @Override   @LogUsage(usageTypeDescription = UsageService.TYPE_SUMMARY)   Document summarize(Document document, SummaryConfiguration summaryConfiguration) {   // App logic.   } } ``` ### AOP configuration  ```                              ``` ## Implementation  There was two new API classes added to make this happen: - AnnotationMatchingMethodPointcutAdvisor which is a convinience advisor support wrapping the existing AnnotationMatchingPointcut. - AnnotationMethodAdvice which is the base class of annotation driven method advices. It contains all the possible hooks for capturing the before, afterReturning, afterThrowing and duringFinally events on the intercepted method call. All these method receive the method's annotation in a type safe way.  **Issue:** [SPR-14227](https://jira.spring.io/browse/SPR-14227)  ---  I have signed and agree to the terms of the Spring Individual Contributor License Agreement.","closed","","laszlocsontos","2016-04-29T10:01:55Z","2017-08-17T10:44:35Z"
"","1049","4.1.x","","closed","","zifeiyu002","2016-05-03T15:17:00Z","2016-05-03T15:26:07Z"
"","1048","Create testpr","","closed","","samdahal","2016-05-01T16:01:27Z","2016-05-01T16:01:36Z"
"","1046","""final"" for public static fields in ReflectionUtils","","closed","","panchenko","2016-04-28T03:49:57Z","2016-04-28T06:33:51Z"
"","1038","MVC docs polishing","","closed","","kamilszymanski","2016-04-17T15:22:45Z","2016-06-01T15:02:08Z"
"","1036","4.2.x","","closed","","vx991","2016-04-15T21:09:50Z","2016-04-15T21:15:41Z"
"","1031","Method comment is wrong","","closed","","Youmoo","2016-04-12T10:38:02Z","2016-06-01T15:01:45Z"
"","1030","Fix typo","","closed","","izeye","2016-04-11T14:54:37Z","2016-04-12T06:15:32Z"
"","1025","Fix simple data format in appendix","","closed","in: core,","julianladisch","2016-04-04T08:32:06Z","2022-04-12T17:16:56Z"
"","1023","4.2.x","","closed","","jordandandan","2016-04-03T08:12:00Z","2016-04-03T14:45:29Z"
"","1013","fixed typo","","closed","","tokuhirom","2016-03-22T04:36:51Z","2016-04-12T06:17:55Z"
"","1010","4.2.x","","closed","","wsjjasper","2016-03-18T09:14:57Z","2016-03-18T09:15:32Z"
"","1002","Master","","closed","","wayneeros","2016-03-12T05:44:54Z","2016-03-12T06:01:16Z"
"","995","wrapping to 90 characters in spel root directory files","","closed","","cristiancota","2016-03-10T07:16:48Z","2016-03-10T23:03:20Z"
"","993","4.2.x","","closed","","qqxxin","2016-03-09T03:58:18Z","2016-03-09T07:56:52Z"
"","992","Fix typo: JBDC -> JDBC","","closed","","coryfklein","2016-03-08T22:15:40Z","2016-03-09T07:54:29Z"
"","987","fix the SPR-14022","","closed","in: web,","lqjack","2016-03-05T11:19:13Z","2021-11-19T15:18:26Z"
"","975","how to replace org.springframework.remoting.jaxrpc.ServletEndpointSupport from spring-3.2.3 in the latest version 4.2.4","","closed","","liuyong19892","2016-02-23T08:11:04Z","2016-02-23T08:15:05Z"
"","966","4.2.x","","closed","","casseusclay","2016-02-17T15:41:57Z","2016-02-17T15:51:32Z"
"","961","Remove duplicate method from reference docs","","closed","","gregturn","2016-02-11T22:30:47Z","2016-02-17T12:08:57Z"
"","960","Minor grammatical correction","","closed","","logicg8","2016-02-10T15:33:14Z","2016-02-17T12:12:46Z"
"","954","4.0.x","","closed","","gangashiva","2016-01-15T15:07:32Z","2016-01-15T15:10:25Z"
"","948","Fix list of supported JCache annotations","","closed","","kamilszymanski","2016-01-04T22:46:56Z","2016-01-05T10:38:28Z"
"","946","Spring Contribution","","closed","","abhishekbarot","2016-01-01T18:50:35Z","2016-01-02T10:36:02Z"
"","944","snippet update","","closed","","holub","2015-12-28T19:48:32Z","2015-12-30T09:30:14Z"
"","940","4.2.x","","closed","","ghost","2015-12-22T14:37:48Z","2015-12-22T14:45:31Z"
"","936","4.1.x","","closed","","shubh34","2015-12-13T17:29:06Z","2015-12-13T17:29:43Z"
"","931","4.1.x","","closed","","kk2711","2015-12-05T07:46:39Z","2015-12-06T13:04:37Z"
"","908","Fix typo","","closed","","haisi","2015-11-01T15:05:46Z","2015-11-01T15:08:31Z"
"","905","Fix elvis operator example","","closed","","ericbottard","2015-10-28T14:01:30Z","2015-10-28T14:36:20Z"
"","903","update my fork version","","closed","","bpzhang","2015-10-28T06:01:33Z","2015-10-28T07:35:10Z"
"","894","Fix typos","","closed","","keik","2015-10-20T04:42:07Z","2018-09-03T12:13:17Z"
"","890","Fix broken Javadoc related to `<` and `>`","","closed","","izeye","2015-10-14T07:51:47Z","2015-11-12T10:48:37Z"
"","888","Fix markup in documentation for URI template patterns.","","closed","status: declined,","shrz","2015-10-12T22:03:45Z","2020-06-23T07:10:50Z"
"","880","Polish","","closed","type: task,","izeye","2015-10-03T06:41:00Z","2020-06-23T08:19:30Z"
"","876","change_check","","closed","","dmdeepakmittal1","2015-09-18T16:33:22Z","2015-09-18T16:48:06Z"
"","874","Fix Configuration docs","","closed","","kamilszymanski","2015-09-17T22:27:30Z","2015-09-18T10:41:00Z"
"","873","Add a missing `@throws` in Javadoc","","closed","","izeye","2015-09-15T08:35:08Z","2015-09-15T10:30:31Z"
"","872","pull from master","","closed","","wanglifeng","2015-09-11T12:57:51Z","2015-09-11T12:58:17Z"