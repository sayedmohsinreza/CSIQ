"#","No","Issue Title","Issue Details","State","Labels","User name","created","Updated"
"","5713","Introduce OGNL and OgnlExpressionFactoryBean  [SPR-1003]","**[薛伟](https://jira.spring.io/secure/ViewProfile.jspa?name=snowway)** opened **[SPR-1003](https://jira.spring.io/browse/SPR-1003?redirect=false)** and commented  A FactoryBean which can use the powerful OGNL expression language with OGNL support,developers can invoke method,static method,static field and some advanced operation straightforward and easy.  the sourcecode /* * Created on 2005-6-2   */   package org.snowway.spring.extension;  import java.util.Collections; import java.util.Hashtable; import java.util.Map;  import org.springframework.beans.BeansException; import org.springframework.beans.FatalBeanException; import org.springframework.beans.factory.FactoryBean; import org.springframework.context.ApplicationContext; import org.springframework.context.ApplicationContextAware;  import ognl.Ognl; import ognl.OgnlException; /** * `@author` snowway  * `@version` $Id$  *   \ * A FactoryBean which can use the powerful OGNL expression language\  * need runtime OGNL support(e.g. ognl-2.6.5.jar)\  *   * the default root object for OGNL expression is ApplicationContext instance\   */   public class OgnlExpressionFactoryBean implements FactoryBean,ApplicationContextAware{    //the ognl expression   private String expression;    //the naming context for the evaluation   private Map context;    private ApplicationContext applicationContext;    //the ognl root object,default is ApplicationContext instance   private Object root;    //is user define custom root object   private boolean _hasSetRootExplicit = false;    /* (non-Javadoc)    * `@see` org.springframework.context.ApplicationContextAware#setApplicationContext(org.springframework.context.ApplicationContext)     */     public void setApplicationContext(ApplicationContext applicationContext)     throws BeansException {      this.applicationContext = applicationContext;     //when no custom root object,use ApplicationContext default     if(!_hasSetRootExplicit)     this.root = this.applicationContext;     }    /**    * `@param` expression the ognl expression to set.     */     public void setExpression(String expression) {     this.expression = expression;     }    /**    * `@param` context the naming context for the evaluation     */     public void setContext(Map context) {     this.context = context;     }    /**    * `@param` root the root object for the OGNL expression     */     public void setRoot(Object root) {     _hasSetRootExplicit = true;     this.root = root;     }    public Object getObject() throws Exception {   if(expression==null)   throw new IllegalArgumentException(""ognl expression cannot be null!"");         //the return object after ognl evaluation        Object returnObject = null;        try{        	returnObject = OgnlExpressionEvaluator.evaluate(expression, context, root);        }catch(OgnlException ex){        	//a better way is throw appropriate Exception insteadof RuntimeException        	//I write RuntimeException for the sake of simplicity        	throw new RuntimeException(""error in evaluation "",ex);        }               if(returnObject==null)        	throw new FatalBeanException(""OgnlExpressionFactoryBean is not allowed to return null, "" +        		    ""but the expression '"" + this.expression + ""' return null"");               return returnObject;    }   /**    * unknown type     */     public Class getObjectType() {     return null;     }    public boolean isSingleton() {   return true;   }    /**    * `@author` snowway    * `@version` $Id$    *     \    * a helper class for evaluate ognl expression and cache the compiled expression object     */     private static class OgnlExpressionEvaluator{      //a map for pre-compiled ognl expression object     private static Map expressions = new Hashtable();      /**      * `@param` expression the OGNL expression      * `@param` context the naming context for the evaluation      * `@param` root the root object for the OGNL expression       */       public static Object evaluate(String expression,       Map context,Object root) throws OgnlException{        //the context can not be null,otherwise OGNL will throw NullPointerException       if(context == null)       context = Collections.EMPTY_MAP;        //try to retrieve pre-compiled ognl expression object       Object compiledObject = expressions.get(expression);        //compile first if failed to retrieve pre-compiled object       if(compiledObject==null){       expressions.put(expression,compiledObject = Ognl.parseExpression(expression));       }        //evaluate       return Ognl.getValue(compiledObject,context,root);       }       }       }  the demo xml  \ \ \ \ \ \ \ `@java`.lang.System@getProperties() \ \ \                	     		@java.lang.System@out     	                         	     		""abcde"".toUpperCase()     	                         	     		     			getProperty(""java.version"")     		     	     	     		     	                         	     		     			#sysprops.getProperty(""java.version"") + "" "" +#uppercaseString     		     	     	     		     			     				     			     			     				     			     		     	                              	     		     			     			getBean(""sysprops"").entrySet().{? #this.key.startsWith(""user"")}     		     	                         	     		     			     			     		     	                         	     		     			     			     		     	            \  ---  **Attachments:** - [ognl-2.6.5.jar](https://jira.spring.io/secure/attachment/10761/ognl-2.6.5.jar) (_163.99 kB_) - [OgnlExpressionFactoryBean.rar](https://jira.spring.io/secure/attachment/10760/OgnlExpressionFactoryBean.rar) (_3.20 kB_)  **Issue Links:** - #4739 Introducing Expression Language Support (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2005-06-02T14:49:58Z","2019-01-13T08:57:51Z"
"","4910","PropertyPlaceholderConfigurer does not take absolute path as location [SPR-178]","**[Zsolt Lukacs](https://jira.spring.io/secure/ViewProfile.jspa?name=zlukacs)** opened **[SPR-178](https://jira.spring.io/browse/SPR-178?redirect=false)** and commented  A PropertyPlaceholderConfigurer with this 'locations' works fine: \ \ \WEB-INF/jdbc.properties\ \ \  I thought this should work too (and is a neat idea that I can do it):  \ \ \${user.home}/jdbc.properties\ \ \  Get exception shown below at startup.  What is the '/' doing there inserted before the proper filename?  (The problem is not caused by spaces in the dir name; it does not work with any other absolute dir name.)  Is it intended that only property files relative to the war dir are eligible?  Why would that be?  Is this for some reason not a good idea?  Or is it a bug?  2004-06-21 17:59:24,203 ERROR [org.springframework.web.context.ContextLoader] - \ org.springframework.beans.factory.BeanInitializationException: Could not load properties from resource [/C:\Documents and Settings\zsolt.lukacs/jdbc.properties] of ServletContext; nested exception is java.io.FileNotFoundException: Could not open resource [/C:\Documents and Settings\zsolt.lukacs/jdbc.properties] of ServletContext java.io.FileNotFoundException: Could not open resource [/C:\Documents and Settings\zsolt.lukacs/jdbc.properties] of ServletContext  Thanks!  Spring is great!   ---  **Affects:** 1.0.2","closed","in: core,","spring-projects-issues","2004-06-21T09:39:07Z","2019-01-12T16:30:15Z"
"","5090","requires_new transaction attribute doesn't  work with hibernate. [SPR-360]","**[zhantao li](https://jira.spring.io/secure/ViewProfile.jspa?name=lazet)** opened **[SPR-360](https://jira.spring.io/browse/SPR-360?redirect=false)** and commented  requires_new transaction attribute work like requires when using Hibernate.   ---  **Affects:** 1.1 final  **Attachments:** - [src.zip](https://jira.spring.io/secure/attachment/10257/src.zip) (_17.10 kB_)","closed","status: declined,","spring-projects-issues","2004-09-29T02:46:19Z","2019-01-12T16:42:11Z"
"","5862","Using deprecated oracle class/package in the reference documentation [SPR-1160]","**[Yujin Kim](https://jira.spring.io/secure/ViewProfile.jspa?name=netexplode)** opened **[SPR-1160](https://jira.spring.io/browse/SPR-1160?redirect=false)** and commented  According to the latest oracle jdbc driver release note (http://www.oracle.com/technology/software/tech/java/sqlj_jdbc/htdocs/readme_10201.html), the use of oracle.jdbc.driver package has been deprecated, but the reference manual example has a reference to it.  http://static.springframework.org/spring/docs/1.2.x/reference/jdbc.html   --- No further details from [SPR-1160](https://jira.spring.io/browse/SPR-1160?redirect=false)","closed","type: bug,","spring-projects-issues","2005-07-20T07:08:07Z","2019-01-13T22:51:07Z"
"","5816","OracleLobHandler and 10g driver [SPR-1112]","**[Yujin Kim](https://jira.spring.io/secure/ViewProfile.jspa?name=netexplode)** opened **[SPR-1112](https://jira.spring.io/browse/SPR-1112?redirect=false)** and commented  When accessing clob data using 10g driver, OracleLobHandler fails because the new driver is returning oracle.jdbc.driver.T4CConnection instead of oracle.jdbc.OracleConnection.  according to atlassian folks, this is supposed to be reverted back in the newer version of 10g driver, but i still getting the exception with the version suggested by atlassian.  http://confluence.atlassian.com/display/DOC/Deploy+against+an+Oracle+database  Stacktrace below:  INFO: Could not create Oracle LOB; nested exception is org.springframework.dao.InvalidDataAccessApiUsageException: OracleLobCreator needs to work on [oracle.jdbc.OracleConnection], not on [class oracle.jdbc.driver.T4CConnection] - specify a corresponding NativeJdbcExtractor org.springframework.dao.DataAccessResourceFailureException: Could not create Oracle LOB; nested exception is org.springframework.dao.InvalidDataAccessApiUsageException: OracleLobCreator needs to work on [oracle.jdbc.OracleConnection], not on [class oracle.jdbc.driver.T4CConnection] - specify a corresponding NativeJdbcExtractor org.springframework.dao.InvalidDataAccessApiUsageException: OracleLobCreator needs to work on [oracle.jdbc.OracleConnection], not on [class oracle.jdbc.driver.T4CConnection] - specify a corresponding NativeJdbcExtractor at org.springframework.jdbc.support.lob.OracleLobHandler$OracleLobCreator.getOracleConnection(OracleLobHandler.java:360) at org.springframework.jdbc.support.lob.OracleLobHandler$OracleLobCreator.createLob(OracleLobHandler.java:328) at org.springframework.jdbc.support.lob.OracleLobHandler$OracleLobCreator.setClobAsString(OracleLobHandler.java:259) at org.springframework.orm.hibernate.support.ClobStringType.nullSafeSetInternal(ClobStringType.java:80) at org.springframework.orm.hibernate.support.AbstractLobType.nullSafeSet(AbstractLobType.java:159) at net.sf.hibernate.type.CustomType.nullSafeSet(CustomType.java:118) at net.sf.hibernate.persister.EntityPersister.dehydrate(EntityPersister.java:387) at net.sf.hibernate.persister.EntityPersister.insert(EntityPersister.java:460) at net.sf.hibernate.persister.EntityPersister.insert(EntityPersister.java:436) at net.sf.hibernate.impl.ScheduledInsertion.execute(ScheduledInsertion.java:37) at net.sf.hibernate.impl.SessionImpl.execute(SessionImpl.java:2449) at net.sf.hibernate.impl.SessionImpl.executeAll(SessionImpl.java:2435) at net.sf.hibernate.impl.SessionImpl.execute(SessionImpl.java:2392) at net.sf.hibernate.impl.SessionImpl.flush(SessionImpl.java:2261) at com.vivakos.kx.persistence.hibernate.AbstractDAO.persist(Unknown Source) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:324) at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:288) at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:155) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:122) at org.springframework.orm.hibernate.HibernateInterceptor.invoke(HibernateInterceptor.java:164) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:144) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:174) at $Proxy26.persist(Unknown Source) at com.vivakos.kx.persistence.service.TxContentServiceImpl.persistFolder(Unknown Source) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:324)   --- No further details from [SPR-1112](https://jira.spring.io/browse/SPR-1112?redirect=false)","closed","in: data,","spring-projects-issues","2005-07-07T08:58:59Z","2019-01-11T19:32:25Z"
"","5558","release ant target broken [SPR-832]","**[Yongqin Xu](https://jira.spring.io/secure/ViewProfile.jspa?name=yongqxu)** opened **[SPR-832](https://jira.spring.io/browse/SPR-832?redirect=false)** and commented  downloaded 1.2 RC1 w/ dependents package. issued ant clean release, the build failed with following error:  ---  doc.prepare:  BUILD FAILED D:\spring-framework-1.2-rc1\build.xml:840: XSLT supporting lib not installed. Please see docs/refere nce/readme.txt for instructions.  ---  There is no ""lib"" under docs/reference and readme.txt file does not exist under docs/reference directory as well.  ---  **Affects:** 1.2 RC1","closed","status: declined,","spring-projects-issues","2005-03-29T14:37:50Z","2019-01-13T22:52:12Z"
"","5176","MethodInvokingJobDetailFactoryBean doesn't implement Serializable [SPR-447]","**[Yaroslav Omelyanenko](https://jira.spring.io/secure/ViewProfile.jspa?name=yaric)** opened **[SPR-447](https://jira.spring.io/browse/SPR-447?redirect=false)** and commented  When using MethodInvokingJobDetailFactoryBean in order to arrange quatz jobs for Quartz 1.4.2 we have following issue. When framework starts and Quartz performs database relative tasks trying to store job to the database java.io.NotSerializableException arrise. This exception caused by following code inside MethodInvokingJobDetailFactoryBean:  public void afterPropertiesSet() throws ClassNotFoundException, NoSuchMethodException { prepare(); // consider the concurrent flag to choose between stateful and stateless job this.jobDetail = new JobDetail(this.name != null ? this.name : this.beanName, this.group, this.concurrent ? MethodInvokingJob.class : StatefulMethodInvokingJob.class); this.jobDetail.getJobDataMap().put(""methodInvoker"", this); this.jobDetail.setVolatility(true);		 }  pls note line: this.jobDetail.getJobDataMap().put(""methodInvoker"", this); This line puts MethodInvokingJobDetailFactoryBean into JobDataMap associated with current job. But as I've found MethodInvokingJobDetailFactoryBean doesn't implement java.io.Serializable interface nor directly nor indirectly. And this ultimatelly cause java.io.NotSerializableException arising when Quartz API is trying to serialize JobDataMap associated with Job. You can find more info about serialization of JobDataMap in org.quartz.impl.jdbcjobstore.StdJDBCDelegate class.   ---  **Affects:** 1.1 final","closed","in: core,","spring-projects-issues","2004-11-04T19:19:32Z","2019-01-12T16:42:00Z"
"","4973","HibernateTemplate find and findByNamedQuery methods signature [SPR-242]","**[Yaroslav Omelyanenko](https://jira.spring.io/secure/ViewProfile.jspa?name=yaric)** opened **[SPR-242](https://jira.spring.io/browse/SPR-242?redirect=false)** and commented  When compiling application against spring-framework-1.1-rc1 there is some compilation errors occurs due to the unambiquos definition of methods signatures. This occurs for following methods:  ---  public java.util.List find(java.lang.String queryString, java.lang.Object[] values, net.sf.hibernate.type.Type[] types)  and  public java.util.List find(java.lang.String queryString, java.lang.String[] paramNames, java.lang.Object[] values)  ---  public java.util.List findByNamedQuery(java.lang.String queryName, java.lang.Object[] values, net.sf.hibernate.type.Type[] types)  and  public java.util.List findByNamedQuery(java.lang.String queryName, java.lang.String[] paramNames, java.lang.Object[] values)  ---  This is really wierd because doesn't allow usage of this methods in your code and brokes backward compatibility with previous Spring release.  regards, Yaric  ---  **Affects:** 1.1 RC2","closed","type: bug,","spring-projects-issues","2004-08-03T21:00:35Z","2019-01-13T22:54:32Z"
"","5367","jdbc.support.SQLErrorCodesFactory.getErrorCodes() log spam [SPR-639]","**[Yannick Menager](https://jira.spring.io/secure/ViewProfile.jspa?name=ymenager)** opened **[SPR-639](https://jira.spring.io/browse/SPR-639?redirect=false)** and commented  The following code exists in jdbc.support.SQLErrorCodesFactory.getErrorCodes(), which gets called frequently and spams the log file. Would it possible to change it debug or to make it so that it only gets called once ?  // could not find the database among the defined ones if (logger.isInfoEnabled()) { logger.info(""SQL error codes for '"" + dbName + ""' not found""); }   ---  **Affects:** 1.1.3","closed","type: bug,","spring-projects-issues","2005-01-18T21:15:45Z","2005-01-23T23:04:30Z"
"","5196","Contribution: HibernateThreadFactory - Requires JDK1.5 [SPR-467]","**[Yannick Menager](https://jira.spring.io/secure/ViewProfile.jspa?name=ymenager)** opened **[SPR-467](https://jira.spring.io/browse/SPR-467?redirect=false)** and commented  This is a contribution of a ThreadFactory implementation that wraps calling thread with an Hibernate transaction.   ---  **Attachments:** - [HibernateThreadFactory.java](https://jira.spring.io/secure/attachment/10316/HibernateThreadFactory.java) (_3.96 kB_)","closed","","spring-projects-issues","2004-11-16T03:23:13Z","2019-01-11T14:16:14Z"
"","5119","SQLErrorCodesFactory logger.info() spamming [SPR-389]","**[Yannick Menager](https://jira.spring.io/secure/ViewProfile.jspa?name=ymenager)** opened **[SPR-389](https://jira.spring.io/browse/SPR-389?redirect=false)** and commented  SQLErrorCodesFactory has several logger.info that are frequently called and which fill up the logs :(  especifically: org.springframework.jdbc.support.SQLErrorCodesFactory getErrorCodes  On another related topic, as a much lesser issue ( as it's only called once ),  org.springframework.web.servlet.view.AbstractCachingViewResolver resolveViewName also has logger.info that logs that a controller has been cached... Shouldn't that also be a .debug log ?  ---  **Affects:** 1.1.1  **Issue Links:** - #5157 demote specific SqlErrorCodesFactory logging to debug level (_**""is duplicated by""**_)","closed","type: bug,","spring-projects-issues","2004-10-12T04:55:58Z","2019-01-11T14:01:46Z"
"","4941","OpenSessionInViewFilter logging at info level for every request [SPR-210]","**[Yannick Menager](https://jira.spring.io/secure/ViewProfile.jspa?name=ymenager)** opened **[SPR-210](https://jira.spring.io/browse/SPR-210?redirect=false)** and commented  from OpenSessionInViewFilter: protected SessionFactory lookupSessionFactory() { logger.info(""Using SessionFactory '"" + getSessionFactoryBeanName() + ""' for OpenSessionInViewFilter""); WebApplicationContext wac = WebApplicationContextUtils.getRequiredWebApplicationContext(getServletContext()); return (SessionFactory) wac.getBean(getSessionFactoryBeanName()); }  .... this gets called **every** request, and logs the 'Using SessionFact...' for every request **sigh**.... could you please change that to debug...   ---  **Affects:** 1.0.2","closed","type: bug,","spring-projects-issues","2004-07-10T07:37:24Z","2004-07-11T06:30:41Z"
"","4987","Write operations are not allowed in read-only mode - turn your Session into FlushMode.AUTO respectively remove 'readOnly' marker from transaction definition  [SPR-256]","**[yakuu](https://jira.spring.io/secure/ViewProfile.jspa?name=yakuu)** opened **[SPR-256](https://jira.spring.io/browse/SPR-256?redirect=false)** and commented  my code runs fine under 1.0.2, but when i changed spring to 1.1rc1, it throws ""Write operations are not allowed in read-only mode - turn your Session into FlushMode.AUTO respectively remove 'readOnly' marker from transaction definition"" exception while i invoke HibernateDaoSupport.save().   --- No further details from [SPR-256](https://jira.spring.io/browse/SPR-256?redirect=false)","closed","status: declined,","spring-projects-issues","2004-08-10T14:33:30Z","2019-01-12T16:42:24Z"
"","5589","Test - please ignore [SPR-863]","**[Yahali Sherman](https://jira.spring.io/secure/ViewProfile.jspa?name=yahali)** opened **[SPR-863](https://jira.spring.io/browse/SPR-863?redirect=false)** and commented  None   ---  **Attachments:** - [screenshot-1.jpg](https://jira.spring.io/secure/attachment/10639/screenshot-1.jpg) (_154.00 kB_) - [screenshot-1.jpg](https://jira.spring.io/secure/attachment/10638/screenshot-1.jpg) (_154.00 kB_)","closed","","spring-projects-issues","2005-04-06T23:09:33Z","2019-01-11T13:06:42Z"
"","4928","PropertyPlaceholderConfigurer cann't work in inner bean [SPR-197]","**[Xu Liang](https://jira.spring.io/secure/ViewProfile.jspa?name=xuliang_net)** opened **[SPR-197](https://jira.spring.io/browse/SPR-197?redirect=false)** and commented  PropertyPlaceholderConfigurer cann't work in inner bean when top level bean is ok. Such as: \ \ \${webapp.root}/WEB-INF/lib\ \ \ is ok, but \ \ \ \ \${webapp.root}/WEB-INF/lib/test.xml\ \ \ \ \ only get ""${webapp.root}/WEB-INF/lib/test.xml""    ---  **Affects:** 1.0.2","closed","in: core,","spring-projects-issues","2004-06-29T01:28:10Z","2004-06-29T12:22:00Z"
"","5766","The PropertyComparator has pool performance [SPR-1059]","**[Xu Liang](https://jira.spring.io/secure/ViewProfile.jspa?name=xuliang_net)** opened **[SPR-1059](https://jira.spring.io/browse/SPR-1059?redirect=false)** and commented  I use PagedListHolder in my project. When it holds 50,000 objects, its resort method run long long time and throws a OutOfMemory exception. The resort method call the PropertyComparator. I writed a PropertyComparator that use commons-beanutils, it do same thing in 380 ms.  I guess the cachedBeanWrappers in PropertyComparator use too many memory.   ---  **Affects:** 1.1.4, 1.1.5  **Attachments:** - [PropertyComparator.java](https://jira.spring.io/secure/attachment/10810/PropertyComparator.java) (_4.09 kB_)","closed","type: enhancement,","spring-projects-issues","2005-06-19T19:42:39Z","2005-06-20T07:51:58Z"
"","5762","The ContextLoader cann't close the parent context. [SPR-1055]","**[Xu Liang](https://jira.spring.io/secure/ViewProfile.jspa?name=xuliang_net)** opened **[SPR-1055](https://jira.spring.io/browse/SPR-1055?redirect=false)** and commented  My JAAS module need access the spring beans. So i define the singleton parent context by ""locatorFactorySelector"" and ""parentContext"" in web.xml. But when tomcat shutdown, i found the parent context cann't be closed by ContextLoader. Some disposable bean's destroy method hasn't been invoked.  There is my configurations :  beanRefContext.xml :  \ \ \ 	\ 		\ 			\ 				\iadd-handlerFactory.xml\				 				\spring-persistence.xml\ 				\spring-context.xml\ 			\ 		\ 	\ \  The spring-context.xml's fragment :","closed","in: core,","spring-projects-issues","2005-06-17T14:14:30Z","2019-01-11T18:36:57Z"
"","5718","Formating ""defaultMessage"" in MessageSource.getMessage(...) [SPR-1008]","**[Xavier Leveque](https://jira.spring.io/secure/ViewProfile.jspa?name=xavirus)** opened **[SPR-1008](https://jira.spring.io/browse/SPR-1008?redirect=false)** and commented  When using method MessageSource.getMessage(String code, Object[] args, String defaultMessage, Locale locale), if the ""code"" can not be resolved in current message source or its parent(s), the ""defaultMessage"" is returned (or the ""code"" if ""useCodeAsDefaultMessage"" is set to true).  What if that default message (or code) contains parameters to be replaced by arguments.  It would be great if the ""defaultMessage"" (or ""code"") could be optionally formatted with the given arguments (if any) as the resolved message is.  This is something that should be done in the message source only if the code can't be resolved since obviously we don't want to pre-format the defaultMessage given as argument.  A new method could be added to the AbstractMessageSource class to activate/deactivate this behavior.  public void setFormatDefaultMessage(boolean formatDefaultMessage);  Another way would be to add a new argument to the method ""getMessage()"" that contains default arguments:  public String getMessage(String code, Object[] args, String defaultMessage, Object[] defaultArgs, Locale locale);    ---  **Affects:** 1.2.1","closed","type: enhancement,","spring-projects-issues","2005-06-03T08:26:26Z","2005-06-04T03:20:01Z"
"","5442","Bean names retrieval (including factorybeans) without re-instantiating them [SPR-714]","**[Xavier Dury](https://jira.spring.io/secure/ViewProfile.jspa?name=kalgon)** opened **[SPR-714](https://jira.spring.io/browse/SPR-714?redirect=false)** and commented  Hi,  I have come accross the problem of finding all beans in an applicationContext that are instances of a particular type, some of them could be produced by FactoryBeans. The method ListableBeanFactory.getBeanDefinitionNames() does not return beans produced by FactoryBeans and ListableBeanFactory.getBeansOfType() returns a map (name, instance). A problem of performance occurs when some FactoryBeans are not singleton resulting in a useless instantiation of them by the ListableBeanFactory.getBeansOfType() method.  So, I think a method should be added to BeanFactoryUtils or ListableBeanFactory to allow the retrieval of bean names (as a String[]) that are of a particular type, including FactoryBean and Prototypes without reinstantiating them if they are not singletons.  Xavier.   ---  **Affects:** 1.1.4","closed","type: enhancement,","spring-projects-issues","2005-02-15T03:47:39Z","2005-02-16T04:29:49Z"
"","5106","MimeMessageHelper: problem with inlines [SPR-376]","**[Wojciech Jakobczyk](https://jira.spring.io/secure/ViewProfile.jspa?name=jesion)** opened **[SPR-376](https://jira.spring.io/browse/SPR-376?redirect=false)** and commented  Sending inlines, as stated in reference doc (first inlines, then text, p. 17.4.2) doesn't work fine. in such constructed mail message there is no last inline, in place of it the text is inserted (as inline). When setting first text, then inlines, everything works fine. ms outlook express displays inlines (images) in text fine.   ---  **Affects:** 1.1.1","closed","type: bug,","spring-projects-issues","2004-10-06T19:43:32Z","2004-10-07T02:11:05Z"
"","5604","AbstractWizardFormController validation enhancement [SPR-877]","**[Warren Oliver](https://jira.spring.io/secure/ViewProfile.jspa?name=owarren)** opened **[SPR-877](https://jira.spring.io/browse/SPR-877?redirect=false)*** and commented  I recently needed to work with the AbstractWizardFormController and wanted validation to occur for each page in the wizard.  The current implementation only allows you to set a single validator.  You also need to programmatically determine which validation method to use for each page.  I found it useful to create a ValidatorResolver which makes it possible for you to associate a Validator with a page (allows for multiple validators).  Having a validator for each page meant my validation logic was more clearly defined.  The mappings of page/Validator were definined in the dispatcher-servlet.xml removing the need to programmatically call a validation method.  The AbstractWizardFormController used an injected ValidatorResolver to determine the correct validator and subsequently call the validate method.   ---  **Attachments:** - [AbstractWizardFormController.java](https://jira.spring.io/secure/attachment/10650/AbstractWizardFormController.java) (_27.49 kB_) - [NoSuchValidatorException.java](https://jira.spring.io/secure/attachment/10651/NoSuchValidatorException.java) (_1.12 kB_) - [ValidatorBeanResolver.java](https://jira.spring.io/secure/attachment/10653/ValidatorBeanResolver.java) (_2.54 kB_) - [ValidatorBeanResolverTest.java](https://jira.spring.io/secure/attachment/10654/ValidatorBeanResolverTest.java) (_2.76 kB_) - [ValidatorResolver.java](https://jira.spring.io/secure/attachment/10652/ValidatorResolver.java) (_1.34 kB_)","closed","type: enhancement,","spring-projects-issues","2005-04-13T00:12:11Z","2012-06-19T09:37:35Z"
"","5415","Typo in EJB implementation example [SPR-687]","**[Walter So](https://jira.spring.io/secure/ViewProfile.jspa?name=walterso)** opened **[SPR-687](https://jira.spring.io/browse/SPR-687?redirect=false)** and commented  In Chapter 15.2. Using Spring convenience EJB implementation classes  public class MyComponentEJB implements extends AbstractStatelessSessionBean implements MyComponent  should read  public class MyComponentEJB extends AbstractStatelessSessionBean implements MyComponent   --- No further details from [SPR-687](https://jira.spring.io/browse/SPR-687?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-02-04T05:21:22Z","2005-02-04T07:03:52Z"
"","4972","Smarter  tag in  [SPR-241]","**[Walter So](https://jira.spring.io/secure/ViewProfile.jspa?name=walterso)** opened **[SPR-241](https://jira.spring.io/browse/SPR-241?redirect=false)** and commented  It would be very powerful and convenient if the \ tag in \ is able to invoke methods and fields without the need to use FactoryBeans.  For example, for static methods:  \ \\java.lang.System\\ \\getProperties\\ \   \ \package.Classname#someStaticMethod()\ \ \  or","closed","type: enhancement,","spring-projects-issues","2004-08-03T15:47:13Z","2019-01-11T13:28:48Z"
"","5657","Quartz SchedulerFactoryBean error [SPR-937]","**[Vurti Galka](https://jira.spring.io/secure/ViewProfile.jspa?name=vurtigalka)** opened **[SPR-937](https://jira.spring.io/browse/SPR-937?redirect=false)** and commented  An exception is thrown when injecting a SchedulerFactoryBean:  org.springframework.beans.TypeMismatchException: Failed to convert property value of type [org.quartz.impl.StdScheduler] to required type [org.springframework.scheduling.quartz.SchedulerFactoryBean] for property 'schedulerFactoryBean'  ---  \ \ \ \ \ \\\ \ \  ---  package test;  import org.springframework.context.support.ClassPathXmlApplicationContext; import org.springframework.scheduling.quartz.SchedulerFactoryBean;  public class SchedulerTest { private SchedulerFactoryBean schedulerFactoryBean;      public void setSchedulerFactoryBean(SchedulerFactoryBean schedulerFactoryBean) {         this.schedulerFactoryBean = schedulerFactoryBean;     }          public static void main(String[] args) {         new ClassPathXmlApplicationContext(""context.xml"");     }  }  ---  11-May-2005 19:11:48 org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions INFO: Loading XML bean definitions from class path resource [context.xml] 11-May-2005 19:11:49 org.springframework.context.support.AbstractRefreshableApplicationContext refreshBeanFactory INFO: Bean factory for application context [org.springframework.context.support.ClassPathXmlApplicationContext;hashCode=3043939]: org.springframework.beans.factory.support.DefaultListableBeanFactory defining beans [schedulerFactoryBean,test]; root of BeanFactory hierarchy 11-May-2005 19:11:49 org.springframework.context.support.AbstractApplicationContext refresh INFO: 2 beans defined in application context [org.springframework.context.support.ClassPathXmlApplicationContext;hashCode=3043939] 11-May-2005 19:11:49 org.springframework.core.CollectionFactory \ INFO: JDK 1.4+ collections available 11-May-2005 19:11:49 org.springframework.context.support.AbstractApplicationContext initMessageSource INFO: Unable to locate MessageSource with name 'messageSource': using default [org.springframework.context.support.DelegatingMessageSource@19f953d] 11-May-2005 19:11:49 org.springframework.context.support.AbstractApplicationContext initApplicationEventMulticaster INFO: Unable to locate ApplicationEventMulticaster with name 'applicationEventMulticaster': using default [org.springframework.context.event.SimpleApplicationEventMulticaster@1eed786] 11-May-2005 19:11:49 org.springframework.beans.factory.support.DefaultListableBeanFactory preInstantiateSingletons INFO: Pre-instantiating singletons in factory [org.springframework.beans.factory.support.DefaultListableBeanFactory defining beans [schedulerFactoryBean,test]; root of BeanFactory hierarchy] 11-May-2005 19:11:49 org.springframework.beans.factory.support.AbstractBeanFactory getBean INFO: Creating shared instance of singleton bean 'schedulerFactoryBean' 11-May-2005 19:11:49 org.quartz.simpl.SimpleThreadPool initialize INFO: Job execution threads will use class loader of thread: main 11-May-2005 19:11:49 org.quartz.simpl.RAMJobStore initialize INFO: RAMJobStore initialized. 11-May-2005 19:11:49 org.quartz.impl.StdSchedulerFactory instantiate INFO: Quartz scheduler 'DefaultQuartzScheduler' initialized from default resource file in Quartz package: 'quartz.properties' 11-May-2005 19:11:49 org.quartz.impl.StdSchedulerFactory instantiate INFO: Quartz scheduler version: 1.4.5 11-May-2005 19:11:49 org.springframework.scheduling.quartz.SchedulerFactoryBean startScheduler INFO: Starting Quartz scheduler now 11-May-2005 19:11:49 org.quartz.core.QuartzScheduler start INFO: Scheduler DefaultQuartzScheduler_$\_NON_CLUSTERED started. 11-May-2005 19:11:49 org.springframework.beans.factory.support.AbstractBeanFactory getBean INFO: Creating shared instance of singleton bean 'test' 11-May-2005 19:11:49 org.springframework.beans.factory.support.AbstractBeanFactory destroySingletons INFO: Destroying singletons in factory {org.springframework.beans.factory.support.DefaultListableBeanFactory defining beans [schedulerFactoryBean,test]; root of BeanFactory hierarchy} 11-May-2005 19:11:49 org.springframework.scheduling.quartz.SchedulerFactoryBean destroy INFO: Shutting down Quartz scheduler 11-May-2005 19:11:49 org.quartz.core.QuartzScheduler shutdown INFO: Scheduler DefaultQuartzScheduler_$\_NON_CLUSTERED shutting down. 11-May-2005 19:11:49 org.quartz.core.QuartzScheduler pause INFO: Scheduler DefaultQuartzScheduler_$\_NON_CLUSTERED paused. 11-May-2005 19:11:49 org.quartz.core.QuartzScheduler shutdown INFO: Scheduler DefaultQuartzScheduler_$_NON_CLUSTERED shutdown complete. Exception in thread ""main"" org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'test' defined in class path resource [context.xml]: Error setting property values; nested exception is org.springframework.beans.PropertyAccessExceptionsException: PropertyAccessExceptionsException (1 errors); nested propertyAccessExceptions are: [org.springframework.beans.TypeMismatchException: Failed to convert property value of type [org.quartz.impl.StdScheduler] to required type [org.springframework.scheduling.quartz.SchedulerFactoryBean] for property 'schedulerFactoryBean'] PropertyAccessExceptionsException (1 errors) org.springframework.beans.TypeMismatchException: Failed to convert property value of type [org.quartz.impl.StdScheduler] to required type [org.springframework.scheduling.quartz.SchedulerFactoryBean] for property 'schedulerFactoryBean' at org.springframework.beans.BeanWrapperImpl.doTypeConversionIfNecessary(BeanWrapperImpl.java:1010) at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:772) at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:679) at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:819) at org.springframework.beans.BeanWrapperImpl.setPropertyValues(BeanWrapperImpl.java:846) at org.springframework.beans.BeanWrapperImpl.setPropertyValues(BeanWrapperImpl.java:835) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:896) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:714) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:331) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:257) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:223) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:147) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:277) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:319) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:80) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:65) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:56) at test.SchedulerTest.main(SchedulerTest.java:20) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at com.intellij.rt.execution.application.AppMain.main(AppMain.java:78)  Process finished with exit code 1  ---  No further details from [SPR-937](https://jira.spring.io/browse/SPR-937?redirect=false)","closed","status: declined,","spring-projects-issues","2005-05-11T04:22:44Z","2019-01-13T22:51:44Z"
"","5407","Support for Hibernate's long-sessions [SPR-679]","**[Vjeran Marcinko](https://jira.spring.io/secure/ViewProfile.jspa?name=vmarcinko)** opened **[SPR-679](https://jira.spring.io/browse/SPR-679?redirect=false)** and commented  Some kind of support in Spring for Hibernate long-session aproach would be helpful - keeping Hibernate session in HttpSession, open during multiple requests, and only doing disconnect/reconnect for each request ? In ""Hibernate In Action"" it's even described as best aproach to application transactions, at least from Gavin's point of view.   ---  **Affects:** 1.1.4  3 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2005-02-02T16:44:57Z","2008-01-07T23:36:05Z"
"","5803","Component support [SPR-1099]","**[Vincent van Beveren](https://jira.spring.io/secure/ViewProfile.jspa?name=davinci79)** opened **[SPR-1099](https://jira.spring.io/browse/SPR-1099?redirect=false)** and commented  I came to this idea after reading a part of 'Component Development for the Java platform' from S.D. Halloway, and it seems to me that Spring is the ideal canidate for this kind of stuff. It might be that something or sorts already exists.  The idea is to group beans together into a 'Component'. All beans in a component are grouped together and the entire component can be restarted, and the classes in the component reloaded.  Any bean referencing to a bean inside of a(nother) container will get a proxy instead of the actual object. Because objects outside of the component reference to objects inside of the component by dynamic proxies the entire container can be restarted without the other parts of the application are ever aware of it.  Invocations to the container will simply wait in the proxy while the container is reloading. Object states in the container are serialized, and unserialized, maybe even reloaded from the BeanFactory. If a reload fails the old classes are loaded again and the failure is reported back to the system administrator.  The whole process can be controlled through JMX. A component may be bound to a single jar file. It might even be possible to upload a new component JAR and replace the old component dynamically.  So basically some additional application-componment support. if it already exists, I like to know :) I would like to help develop it if there is anyone interested in the concept, and if it isn't implemented already :)   ---  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2005-07-04T19:40:09Z","2012-06-19T09:37:42Z"
"","5569","quartz scheduler factory cannot produce multiple schedulers [SPR-843]","**[Victor](https://jira.spring.io/secure/ViewProfile.jspa?name=victorwon)** opened **[SPR-843](https://jira.spring.io/browse/SPR-843?redirect=false)** and commented  In SchedulerFactoryBean class, the following method is intended to create a scheduler using the schedulerName param:      protected Scheduler createScheduler(SchedulerFactory schedulerFactory, String schedulerName)     		throws SchedulerException {     	if (schedulerName != null) {     		return schedulerFactory.getScheduler(schedulerName);     	}     	else {     		return schedulerFactory.getScheduler();     	}     }  This, however, doesn't work because the ""schedulerFactory.getScheduler(schedulerName)"" in quartz is used to retrieve an exisiting instance instead of creating anything new. The result is you always got a NullPointerException if you set the schedulerName in bean config xml.  The quick fix is to change it to be as following:      protected Scheduler createScheduler(SchedulerFactory schedulerFactory, String schedulerName)     		throws SchedulerException {     	return schedulerFactory.getScheduler();     }  And specify the schedulerName and quartz instance name in the quartz properties, e.g.                cronSched                                   cronSched                 There must be more elegant solution for this ;)  ---  **Affects:** 1.1.5  **Issue Links:** - #5499 Multiple schedulers (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2005-04-01T04:20:46Z","2019-01-13T22:52:10Z"
"","5443","use init size to improve performance of object serialization [SPR-715]","**[Victor](https://jira.spring.io/secure/ViewProfile.jspa?name=victorwon)** opened **[SPR-715](https://jira.spring.io/browse/SPR-715?redirect=false)** and commented  As pointed out by the following article:  http://javatechniques.com/public/java/docs/basics/faster-deep-copy.html  I think in line 87 of BlobSerializableType  ByteArrayOutputStream baos = new ByteArrayOutputStream();  should be changed to:  ByteArrayOutputStream baos = new ByteArrayOutputStream(1024);  because most normal sized java object is around 600 bytes and the default init size of ByteArrayOutputStream is too small for object serialization. (Most BLOB contains more than 1k data now)  The most concern is that if the resizing may generate too much load for GC. Anyway, it's just a suggestion.    ---  **Affects:** 1.1.4","closed","type: enhancement,","spring-projects-issues","2005-02-15T07:06:16Z","2005-02-15T07:19:46Z"
"","5398","WebSphereNativeJdbcExtractor doesn't work on Websphere 5 with version 4 datasource [SPR-670]","**[Victor](https://jira.spring.io/secure/ViewProfile.jspa?name=victorwon)** opened **[SPR-670](https://jira.spring.io/browse/SPR-670?redirect=false)** and commented  WebSphereNativeJdbcExtractor failed to extract the native jdbc connection on websphere 5 server that is using datasource type of websphere 4.  Websphere 5 supports 2 kinds of datasource - version 5 and version 4. The version 4 datasource will be used for backward compatible. I found the above problem when trying to migrate our websphere 4.x app into websphere 5 server - we have to keep using the version 4 datasource because version 5 datasource is not supported in J2EE 1.2 mode and we don't have time to rebuild all the legacies.  I therefore modified the implementation of WebSphereNativeJdbcExtractor as following, which works in all situations.  ---  import java.lang.reflect.Method; import java.sql.Connection; import java.sql.SQLException;  import org.apache.commons.logging.Log; import org.apache.commons.logging.LogFactory; import org.springframework.dao.DataAccessResourceFailureException; import org.springframework.dao.InvalidDataAccessApiUsageException; import org.springframework.jdbc.support.nativejdbc.NativeJdbcExtractorAdapter;  /** * Implementation of the NativeJdbcExtractor interface for WebSphere.  * Returns the underlying native Connection to application code instead  * of WebSphere's wrapper implementation; unwraps the Connection for  * native statements. The returned JDBC classes can then safely be cast,  * e.g. to OracleConnection.  *   *   \This NativeJdbcExtractor can be set just to \allow\ working * with a WebSphere DataSource: If a given object is not a WebSphere  * Connection wrapper, it will be returned as-is.  *   *   \Supports both WebSphere 5 and WebSphere 4. Currently just tested with * IBM WebSphere 5.1.0 and 4.0.6. Thanks to Dave Keller and Victor for  * figuring out how to do the unwrapping on WebSphere 5 respectively 4!  *   * `@author` Juergen Hoeller  * `@since` 08.06.2004  * `@see` com.ibm.ws.rsadapter.jdbc.WSJdbcConnection  * `@see` com.ibm.ws.rsadapter.jdbc.WSJdbcUtil#getNativeConnection  * `@see` com.ibm.ejs.cm.proxy.ConnectionProxy#getPhysicalConnection   */   public class WebSphereNativeJdbcExtractor extends NativeJdbcExtractorAdapter   {    private static final String JDBC_ADAPTER_CONNECTION_NAME_5 =   ""com.ibm.ws.rsadapter.jdbc.WSJdbcConnection"";    private static final String JDBC_ADAPTER_UTIL_NAME_5 =   ""com.ibm.ws.rsadapter.jdbc.WSJdbcUtil"";    private static final String CONNECTION_PROXY_NAME_4 =   ""com.ibm.ejs.cm.proxy.ConnectionProxy"";    protected final Log logger = LogFactory.getLog(getClass());    private Class webSphere5ConnectionClass;   private Class webSphere4ConnectionClass;    private Method getNative5ConnectionMethod;   private Method getNative4ConnectionMethod;    /**    * This constructor retrieves WebSphere JDBC adapter classes,    * so we can get the underlying vendor connection using reflection.     */     public WebSphereNativeJdbcExtractor()     throws InvalidDataAccessApiUsageException     {     try     {     logger.debug(     ""Trying WebSphere 5 Connection: ""      + JDBC_ADAPTER_CONNECTION_NAME_5);       this.webSphere5ConnectionClass =       getClass().getClassLoader().loadClass(       JDBC_ADAPTER_CONNECTION_NAME_5);       Class jdbcAdapterUtilClass =       getClass().getClassLoader().loadClass(JDBC_ADAPTER_UTIL_NAME_5);       this.getNative5ConnectionMethod =       jdbcAdapterUtilClass.getMethod(       ""getNativeConnection"",       new Class[] { this.webSphere5ConnectionClass });       }       catch (Exception ex)       {       logger.debug(       ""Could not find WebSphere 5 connection pool classes"",       ex);       }      try     {     logger.debug(     ""Trying WebSphere 4 Connection: "" + CONNECTION_PROXY_NAME_4);     this.webSphere4ConnectionClass =     getClass().getClassLoader().loadClass(CONNECTION_PROXY_NAME_4);     this.getNative4ConnectionMethod =     this.webSphere4ConnectionClass.getMethod(     ""getPhysicalConnection"",     (Class[]) null);     }     catch (Exception ex2)     {     logger.debug(     ""Could not find WebSphere 4 connection pool classes"",     ex2);     throw new InvalidDataAccessApiUsageException(""Could neither find WebSphere 5 nor WebSphere 4 connection pool classes"");     }     }    /**    * Return true, as WebSphere returns wrapped Statements.     */     public boolean isNativeConnectionNecessaryForNativeStatements()     {     return true;     }    /**    * Return true, as WebSphere returns wrapped PreparedStatements.     */     public boolean isNativeConnectionNecessaryForNativePreparedStatements()     {     return true;     }    /**    * Return true, as WebSphere returns wrapped CallableStatements.     */     public boolean isNativeConnectionNecessaryForNativeCallableStatements()     {     return true;     }    /**    * Retrieve the Connection via WebSphere's \getNativeConnection\ method.     */     protected Connection doGetNativeConnection(Connection con)     throws SQLException     {     if (this.webSphere5ConnectionClass != null     && this.webSphere5ConnectionClass.isAssignableFrom(con.getClass()))     {     try     {     return (Connection) this.getNative5ConnectionMethod.invoke(     null,     new Object[] { con });     }     catch (Exception ex)     {     throw new DataAccessResourceFailureException(     ""Could not invoke WebSphere5's getNativeConnection method"",     ex);     }     }     else if (     this.webSphere4ConnectionClass != null     && this.webSphere4ConnectionClass.isAssignableFrom(     con.getClass()))     {     try     {     // WebSphere 4's connectionProxy.getPhysicalConnection()     return (Connection) this.getNative4ConnectionMethod.invoke(     con,     (Object[]) null);     }     catch (Exception ex)     {     throw new DataAccessResourceFailureException(     ""Could not invoke WebSphere4's getPhysicalConnection method"",     ex);     }     }      logger.debug(""It's not a websphere 4/5 connection, return as is."");     return con;     }  }  ---  **Affects:** 1.1.3","closed","type: bug,","spring-projects-issues","2005-01-31T05:43:33Z","2019-01-13T08:58:35Z"
"","5343","autowire fails if beans are not in specific order in xml config [SPR-615]","**[Victor](https://jira.spring.io/secure/ViewProfile.jspa?name=victorwon)** opened **[SPR-615](https://jira.spring.io/browse/SPR-615?redirect=false)*** and commented  Sometimes FactoryBeanCircularReferenceException will show up if 2 more factory beans in the app context xml are set to use autowire, while there isn't any actual circular reference at all. And the exception will disappear once you arrange the order of the beans to a specific one - no code change is needed. This is unexpected behavior.  I managed to reproduce it by using the following:  1) 1 simple business object with 1 simple interface.    public class CronJobManagerImpl implements CronJobManager    {    private String manualTriggerToken;    public boolean verifyToken(String token)    {    return false;    }    }    public interface CronJobManager    {    public static final String BEAN_NAME = ""cronJobManager"";     public boolean verifyToken(String token);    }  2) a applicationContext.xml as following:  \ \ \ \ \ \ \ \ \ \ \true\ \ \                     	     		     	     	     		java:comp/UserTransaction     	     	     		SYNCHRONIZATION_NEVER     	                         	     		     	     	     		toString     	                    	     		     	     	     		0 10 23 * * ?     	                              	     		     	     	     		     			PROPAGATION_REQUIRED     		     	       \  I load the above inside a web module using spring contextloader, and got the following error: [1/12/05 14:27:47:969 EST] 5f556b79 SystemOut     U ERROR [Thread-1] (ContextLoader.java:124) - Context initialization failed org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'osarToEdsJobDetail' defined in ServletContext resource [/WEB-INF/applicationContext.xml]: Can't resolve reference to bean 'cronJobManager' while setting property 'targetObject'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'quartzScheduler' defined in ServletContext resource [/WEB-INF/applicationContext.xml]: Can't resolve reference to bean 'osarToEdsCronTrigger' while setting property 'triggers[0]'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'osarToEdsCronTrigger' defined in ServletContext resource [/WEB-INF/applicationContext.xml]: Can't resolve reference to bean 'osarToEdsJobDetail' while setting property 'jobDetail'; nested exception is org.springframework.beans.factory.FactoryBeanCircularReferenceException: Error creating bean with name 'osarToEdsJobDetail': FactoryBean returned null object: not fully initialized due to circular bean reference org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'quartzScheduler' defined in ServletContext resource [/WEB-INF/applicationContext.xml]: Can't resolve reference to bean 'osarToEdsCronTrigger' while setting property 'triggers[0]'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'osarToEdsCronTrigger' defined in ServletContext resource [/WEB-INF/applicationContext.xml]: Can't resolve reference to bean 'osarToEdsJobDetail' while setting property 'jobDetail'; nested exception is org.springframework.beans.factory.FactoryBeanCircularReferenceException: Error creating bean with name 'osarToEdsJobDetail': FactoryBean returned null object: not fully initialized due to circular bean reference org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'osarToEdsCronTrigger' defined in ServletContext resource [/WEB-INF/applicationContext.xml]: Can't resolve reference to bean 'osarToEdsJobDetail' while setting property 'jobDetail'; nested exception is org.springframework.beans.factory.FactoryBeanCircularReferenceException: Error creating bean with name 'osarToEdsJobDetail': FactoryBean returned null object: not fully initialized due to circular bean reference org.springframework.beans.factory.FactoryBeanCircularReferenceException: Error creating bean with name 'osarToEdsJobDetail': FactoryBean returned null object: not fully initialized due to circular bean reference at org.springframework.beans.factory.support.AbstractBeanFactory.getObjectForSharedInstance(AbstractBeanFactory.java:802) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:159) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.resolveReference(AbstractAutowireCapableBeanFactory.java:945) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.resolveValueIfNecessary(AbstractAutowireCapableBeanFactory.java:879) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:820) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:648) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:288) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:223) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:236) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:159) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.resolveReference(AbstractAutowireCapableBeanFactory.java:945) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.resolveValueIfNecessary(AbstractAutowireCapableBeanFactory.java:879) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.resolveManagedList(AbstractAutowireCapableBeanFactory.java:965) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.resolveValueIfNecessary(AbstractAutowireCapableBeanFactory.java:883) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:820) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:648) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:288) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:223) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:236) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:159) at org.springframework.beans.factory.support.AbstractBeanFactory.getType(AbstractBeanFactory.java:347) at org.springframework.beans.factory.support.DefaultListableBeanFactory.isBeanTypeMatch(DefaultListableBeanFactory.java:235) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:163) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:145) at org.springframework.beans.factory.BeanFactoryUtils.beansOfTypeIncludingAncestors(BeanFactoryUtils.java:163) at org.springframework.beans.factory.support.DefaultListableBeanFactory.findMatchingBeans(DefaultListableBeanFactory.java:338) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:707) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:641) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:288) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:223) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:236) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:159) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.resolveReference(AbstractAutowireCapableBeanFactory.java:945) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.resolveValueIfNecessary(AbstractAutowireCapableBeanFactory.java:879) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:820) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:648) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:288) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:223) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:236) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:159) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:255) at org.springframework.context.support.AbstractApplicationContext.refr [1/12/05 14:27:47:984 EST] 5f556b79 SystemOut     U esh(AbstractApplicationContext.java:317) at org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.refresh(AbstractRefreshableWebApplicationContext.java:131) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:177) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:105) at org.springframework.web.context.ContextLoaderServlet.init(ContextLoaderServlet.java:81) at javax.servlet.GenericServlet.init(GenericServlet.java:258) at com.ibm.servlet.engine.webapp.StrictServletInstance.doInit(ServletManager.java:802) at com.ibm.servlet.engine.webapp.StrictLifecycleServlet._init(StrictLifecycleServlet.java:141) at com.ibm.servlet.engine.webapp.PreInitializedServletState.init(StrictLifecycleServlet.java:254) at com.ibm.servlet.engine.webapp.StrictLifecycleServlet.init(StrictLifecycleServlet.java:107) at com.ibm.servlet.engine.webapp.ServletInstance.init(ServletManager.java:388) at javax.servlet.GenericServlet.init(GenericServlet.java:258) at com.ibm.servlet.engine.webapp.ServletManager.addServlet(ServletManager.java:84) at com.ibm.servlet.engine.webapp.WebAppServletManager.loadServlet(WebAppServletManager.java:193) at com.ibm.servlet.engine.webapp.WebAppServletManager.loadAutoLoadServlets(WebAppServletManager.java:325) at com.ibm.servlet.engine.webapp.WebApp.loadServletManager(WebApp.java:1217) at com.ibm.servlet.engine.webapp.WebApp.init(WebApp.java:145) at com.ibm.servlet.engine.srt.WebGroup.loadWebApp(WebGroup.java:259) at com.ibm.servlet.engine.srt.WebGroup.init(WebGroup.java:168) at com.ibm.servlet.engine.ServletEngine.addWebApplication(ServletEngine.java:857) at com.ibm.ws.runtime.WebContainer.install(WebContainer.java:43) at com.ibm.ws.runtime.Server.startModule(Server.java:617) at com.ibm.ws.runtime.StandardServer.initializeModules(StandardServer.java:333) at com.ibm.ws.runtime.StandardServer.initializeRuntime0(StandardServer.java:349) at com.ibm.ws.runtime.Server.initializeRuntime(Server.java:884) at com.ibm.ws.runtime.StandardServer.main(StandardServer.java:519) at java.lang.reflect.Method.invoke(Native Method) at com.ibm.ws.bootstrap.WSLauncher.main(WSLauncher.java:158) at com.ibm.etools.websphere.tools.runner.api.ServerRunnerV4$1.run(ServerRunnerV4.java:56)  ---  I can eliminate the above error by simply moving the quartzScheduler bean definition from the top of the xml to the last one.  I'll attach the testing ear file later.  ---  **Affects:** 1.1.3  **Attachments:** - [TestWebEAR.ear](https://jira.spring.io/secure/attachment/10424/TestWebEAR.ear) (_2.04 MB_)","closed","in: core,","spring-projects-issues","2005-01-12T07:49:20Z","2019-01-13T22:52:59Z"
"","5269","singleton bean autowire creates multiple instances [SPR-540]","**[Victor](https://jira.spring.io/secure/ViewProfile.jspa?name=victorwon)** opened **[SPR-540](https://jira.spring.io/browse/SPR-540?redirect=false)** and commented  I observed a weird behavior during debugging - spring instantiated the singleton beans multiple times during config loading. To prove it, I have the following config:  \\  and I added the following code to the default constructor of CronJobManagerImpl:      public CronJobManagerImpl() {     	try     	{     		throw new CronJobException(""CronJobManager is created"");          	}     	catch (Exception e)     	{     		logger.error(""creation detected"", e);     	}     }  Afterwards I started the web app and watched the logging during loading. I observe multiple (at least 5) times of instance creation.  This could be a potential problem - shouldn't the singleton only be created once? And actually I do encountered a problem when enable the autowire and using BeanNameAutoProxyCreator - I reference the above bean from 2 quartz jobdetail beans and it turned out only the 1st one is properly initialized, the 2nd one in xml turns to be just a new instance with no properties set - all null.  My temporary solution is to use TransactionProxyFactoryBean per bean. Although it fixes the problem, the multi-instantiating still exists as long as autowire is enabled, which could be a bad sign. Once I have time, I'll remove all the autowire from the config just to be sure.  Thanks.   ---  **Affects:** 1.1.1","closed","in: core,","spring-projects-issues","2004-12-10T06:09:38Z","2019-01-11T12:42:10Z"
"","5235","A new quartz scheduler factory bean that takes listeners [SPR-506]","**[Victor](https://jira.spring.io/secure/ViewProfile.jspa?name=victorwon)** opened **[SPR-506](https://jira.spring.io/browse/SPR-506?redirect=false)** and commented  I just extended the SchedulerFactoryBean to register quartz listeners, think it may be useful for others. As following:  import org.quartz.JobListener; import org.quartz.Scheduler; import org.quartz.SchedulerException; import org.quartz.SchedulerFactory; import org.quartz.SchedulerListener; import org.quartz.TriggerListener; import org.springframework.scheduling.quartz.SchedulerFactoryBean;  /** * `@author` vweng *  * Enable the spring scheduler factory bean to take registration of quartz listener beans. *   */ public class ListenerEnabledSchedulerFactoryBean extends SchedulerFactoryBean { private TriggerListener[] globalTriggerListeners; private TriggerListener[] localTriggerListeners; private JobListener[] globalJobListeners; private JobListener[] localJobListeners; private SchedulerListener[] schedulerListeners;      /* (non-Javadoc)      * @see org.springframework.scheduling.quartz.SchedulerFactoryBean#createScheduler(org.quartz.SchedulerFactory, java.lang.String)      */     protected Scheduler createScheduler(     	SchedulerFactory schedulerFactory,     	String schedulerName)     	throws SchedulerException     {     	Scheduler sched =     		super.createScheduler(schedulerFactory, schedulerName);     	if (globalTriggerListeners != null)     		for (int i = 0; i < globalTriggerListeners.length; i++)     			sched.addGlobalTriggerListener(globalTriggerListeners[i]);     	if (localTriggerListeners != null)     		for (int i = 0; i < localTriggerListeners.length; i++)     			sched.addTriggerListener(localTriggerListeners[i]);     	if (globalJobListeners != null)     		for (int i = 0; i < globalJobListeners.length; i++)     			sched.addGlobalJobListener(globalJobListeners[i]);     	if (localJobListeners != null)     		for (int i = 0; i < localJobListeners.length; i++)     			sched.addJobListener(localJobListeners[i]);     	if (schedulerListeners != null)     		for (int i = 0; i < schedulerListeners.length; i++)     			sched.addSchedulerListener(schedulerListeners[i]);     	return sched;     }          /**      * @param listeners      */     public void setGlobalTriggerListeners(TriggerListener[] listeners)     {     	globalTriggerListeners = listeners;     }          /**      * @param listeners      */     public void setGlobalJobListeners(JobListener[] listeners)     {     	globalJobListeners = listeners;     }          /**      * @param listeners      */     public void setLocalJobListeners(JobListener[] listeners)     {     	localJobListeners = listeners;     }          /**      * @param listeners      */     public void setLocalTriggerListeners(TriggerListener[] listeners)     {     	localTriggerListeners = listeners;     }          /**      * @param listeners      */     public void setSchedulerListeners(SchedulerListener[] listeners)     {     	schedulerListeners = listeners;     }  }   ---  **Affects:** 1.1.1","closed","type: enhancement,","spring-projects-issues","2004-12-01T07:02:37Z","2004-12-19T07:42:20Z"
"","5088","ContextLoader should implement default loadParentContext [SPR-358]","**[Victor](https://jira.spring.io/secure/ViewProfile.jspa?name=victorwon)** opened **[SPR-358](https://jira.spring.io/browse/SPR-358?redirect=false)** and commented  Right now the loadParentContext() in ContextLoader simply returns null. Therefore we have to create a new loader to load the parent context - why not implement it to read a servlet context-param from web.xml and returns null if no such param exists. I think it's much better than doing nothing, more important - makes it easier for people to start with (it took me a long time to figure this out).  thanks.   ---  **Affects:** 1.1.1","closed","type: enhancement,","spring-projects-issues","2004-09-28T07:51:25Z","2012-06-19T03:54:10Z"
"","5085","nightly snapshot for unreleased version [SPR-355]","**[Victor](https://jira.spring.io/secure/ViewProfile.jspa?name=victorwon)** opened **[SPR-355](https://jira.spring.io/browse/SPR-355?redirect=false)** and commented  Hi,  Since most of us are behind a strict firewall, it'll be impossible for us to grab the snapshot of the cvs. It'll be convenient to provide a package of the snapshot of the latest unreleased version to public download, especially for those are about to be released.  thanks   --- No further details from [SPR-355](https://jira.spring.io/browse/SPR-355?redirect=false)","closed","","spring-projects-issues","2004-09-27T03:38:18Z","2019-01-11T14:02:18Z"
"","5077","inconsistent behavior between DefaultLobHandler and OracleLobHandler [SPR-347]","**[Victor](https://jira.spring.io/secure/ViewProfile.jspa?name=victorwon)** opened **[SPR-347](https://jira.spring.io/browse/SPR-347?redirect=false)** and commented  I found the getBlobAsBinaryStream() of the DefaultLobHandler doesn't match the behavior of the getBlobAsBinaryStream() of OracleLobHandler when comes to processing the NULL column. The former one will return a 0 byte stream while the latter one will return null value (because it uses jdbc's getstream). I think the DefaultLobHandler should also return a 0 byte stream, as following:      public InputStream getBlobAsBinaryStream(ResultSet rs, int columnIndex) throws SQLException {     	logger.debug(""Returning BLOB as binary stream"");     	InputStream is = rs.getBinaryStream(columnIndex);     	return is != null? is:new ByteArrayInputStream(new byte[0]));     }    ---  **Affects:** 1.1 final","closed","type: bug,","spring-projects-issues","2004-09-24T04:31:19Z","2004-09-24T05:02:46Z"
"","5076","BlobSerializableType doesn't set BLOB column to NULL [SPR-346]","**[Victor](https://jira.spring.io/secure/ViewProfile.jspa?name=victorwon)** opened **[SPR-346](https://jira.spring.io/browse/SPR-346?redirect=false)** and commented  Hi, I think the nullSafeSet and nullSafeGet implementation in class org.springframework.orm.hibernate.support.BlobSerializableType does not handle the NULL value correctly.  Right now the implementation doesn't set the BLOB column in table to NULL if the persist object is null. This makes it impossible to use HQL ""IS NULL"" to test the column in a query, because the column will always have something even when the object passed in is a null.  I think the above 2 methods should be change to:      protected Object nullSafeGetInternal(     	ResultSet rs,     	int index,     	LobHandler lobHandler)     	throws SQLException, IOException     {     	InputStream is = lobHandler.getBlobAsBinaryStream(rs, index);     	if (is.available()","closed","type: bug,","spring-projects-issues","2004-09-24T04:07:08Z","2019-01-13T22:53:48Z"
"","5050","Incorrect properties setting sequence in LocalSessionFactoryBean [SPR-320]","**[Victor](https://jira.spring.io/secure/ViewProfile.jspa?name=victorwon)** opened **[SPR-320](https://jira.spring.io/browse/SPR-320?redirect=false)** and commented  In the afterPropertiesSet call of LocalSessionFactoryBean, the configTimeTransactionManagerHolder is set after mappingLocations, which is incorrect because mappingLocations will incur hibernate type mapping and the LobType will initialized with ""null"" jtaManager instance, and later cause the attached error.  Moving the      if (this.jtaTransactionManager != null) {          // set Spring-provided JTA TransactionManager for Hibernate cache callbacks          config.setProperty(Environment.TRANSACTION_MANAGER_STRATEGY, LocalTransactionManagerLookup.class.getName());          configTimeTransactionManagerHolder.set(this.jtaTransactionManager);     }  to the top of afterPropertiesSet will fix this bug.  ---  [9/8/04 14:39:11:047 EDT] 7e2ed625 SystemOut     U ERROR [ORB.thread.pool:1] (SessionFactoryUtils.java:743) - beforeCommit callback threw exception java.lang.IllegalStateException: Active Spring transaction synchronization or jtaTransactionManager on LocalSessionFactoryBean plus active JTA transaction required at org.springframework.orm.hibernate.support.AbstractLobType.nullSafeSet(AbstractLobType.java:169) at net.sf.hibernate.type.CustomType.nullSafeSet(CustomType.java:118) at net.sf.hibernate.persister.EntityPersister.dehydrate(EntityPersister.java:393) at net.sf.hibernate.persister.EntityPersister.insert(EntityPersister.java:466) at net.sf.hibernate.persister.EntityPersister.insert(EntityPersister.java:442) at net.sf.hibernate.impl.ScheduledInsertion.execute(ScheduledInsertion.java:29) at net.sf.hibernate.impl.SessionImpl.executeAll(SessionImpl.java:2414) at net.sf.hibernate.impl.SessionImpl.execute(SessionImpl.java:2367) at net.sf.hibernate.impl.SessionImpl.flush(SessionImpl.java:2236) at org.springframework.orm.hibernate.SessionFactoryUtils$SpringSessionSynchronization.beforeCommit(SessionFactoryUtils.java:655) at org.springframework.orm.hibernate.SessionFactoryUtils$JtaSessionSynchronization.beforeCompletion(SessionFactoryUtils.java:740) at com.ibm.ejs.jts.jta.TransactionImpl.before_completion(TransactionImpl.java:966) at com.ibm.ejs.jts.jts.CoordinatorImpl$Sync.beforePrepare(CoordinatorImpl.java:692) at com.ibm.ejs.jts.tran.EventCallback.executeCallback(EventCallback.java:166) at com.ibm.ejs.jts.tran.EventCallback.executeCallbackTree(EventCallback.java:132) at com.ibm.ejs.jts.tran.EventPrepare.ExecuteBeforePrepareCallbacks(EventPrepare.java:297) at com.ibm.ejs.jts.tran.EventPrepare.event_LocalPrepareWork(EventPrepare.java:277) at com.ibm.ejs.jts.tran.EventPrepare.event_BecomeCoordinator(EventPrepare.java:960) at com.ibm.ejs.jts.tran.EventControl.event_EndTopLevel(EventControl.java:295) at com.ibm.ejs.jts.tran.TrecInterface.end(TrecInterface.java:88) at com.ibm.ejs.jts.jts.TerminatorImpl.commit(TerminatorImpl.java:89) at com.ibm.ejs.jts.jts.CurrentImpl.commit(CurrentImpl.java:200) at com.ibm.ejs.jts.jts.CurrentSet.commit(CurrentSet.java:256) at com.ibm.ejs.jts.jts.Current.commit(Current.java:71) at com.ibm.ejs.jts.jta.UserTransactionImpl.commit(UserTransactionImpl.java:182) at org.springframework.transaction.jta.JtaTransactionManager.doCommit(JtaTransactionManager.java:532) at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:373) at org.springframework.transaction.interceptor.TransactionAspectSupport.doCommitTransactionAfterReturning(TransactionAspectSupport.java:241) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:66) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:138) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:152)  ---  **Affects:** 1.1 final","closed","type: bug,","spring-projects-issues","2004-09-08T06:20:17Z","2019-01-13T22:53:57Z"
"","5049","BlobSerializableType doesn't override deepCopy [SPR-319]","**[Victor](https://jira.spring.io/secure/ViewProfile.jspa?name=victorwon)** opened **[SPR-319](https://jira.spring.io/browse/SPR-319?redirect=false)** and commented  Hi,  Just found the BlobSerializableType doesn't override with a right deepCopy - it still uses the shallow reference copy in the AbstractLobType.  I think the following should be added to the BlobSerializableType.  public Object deepCopy(Object o) { try { // write to oos to clone ByteArrayOutputStream baos = new ByteArrayOutputStream(); ObjectOutputStream oos = new ObjectOutputStream(baos); oos.writeObject(o);  // read it back and return a true copy ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray()); ObjectInputStream ois = new ObjectInputStream(bais); Object ret = ois.readObject(); ois.close();  return ret; } catch (Exception e) { throw new DataAccessException(""Deep copy failed"",e); } }   ---  **Affects:** 1.1 final","closed","type: bug,","spring-projects-issues","2004-09-08T05:29:10Z","2004-09-15T18:08:57Z"
"","5025","spring tx and ejb cmt not fully compatible if ejb is RequiresNew [SPR-295]","**[Victor](https://jira.spring.io/secure/ViewProfile.jspa?name=victorwon)** opened **[SPR-295](https://jira.spring.io/browse/SPR-295?redirect=false)** and commented  I have set up 2 statless session beans - One has a clientPurchase() method demarcated as RequiresNew, the other bean has a serverSidePurchase() method that calls the clientPurchase() within a tx managed by TransactionTemplate. Inside clientPurchase(), a spring managed pojo is called with PROPAGATION_REQUIRED.  Attached please find all source codes I'm using.  Here is the situation:  1) if I use a ejb client to call clientPurchase() of the 1st bean, everything is fine, db record will be created as expectd.  2) if I use a ejb client to call serverSidePurchase() of the 2nd bean, I'll get the following errors.  ---  [8/30/04 13:40:39:000 EDT] 4dce51da SystemOut     U DEBUG [ORB.thread.pool:1] (BatcherImpl.java:196) - about to open: 0 open PreparedStatements, 0 open ResultSets  [8/30/04 13:40:39:000 EDT] 4dce51da SystemOut     U DEBUG [ORB.thread.pool:1] (BatcherImpl.java:237) - insert into TestProduct (name, price, id) values (?, ?, ?)  [8/30/04 13:40:39:000 EDT] 4dce51da SystemOut     U DEBUG [ORB.thread.pool:1] (BatcherImpl.java:241) - preparing statement  [8/30/04 13:40:39:016 EDT] 4dce51da SystemOut     U DEBUG [ORB.thread.pool:1] (JDBCExceptionReporter.java:36) - SQL Exception com.ibm.websphere.ce.cm.StaleConnectionException: class com.ibm.ejs.cm.proxy.OracleConnectionProxy is closed at com.ibm.ejs.cm.proxy.OracleConnectionProxy.prepareStatement(OracleConnectionProxy.java:206) at net.sf.hibernate.impl.BatcherImpl.getPreparedStatement(BatcherImpl.java:249) at net.sf.hibernate.impl.BatcherImpl.prepareStatement(BatcherImpl.java:61) at net.sf.hibernate.impl.BatcherImpl.prepareStatement(BatcherImpl.java:56) at net.sf.hibernate.impl.BatcherImpl.prepareBatchStatement(BatcherImpl.java:109) at net.sf.hibernate.persister.EntityPersister.insert(EntityPersister.java:460) at net.sf.hibernate.persister.EntityPersister.insert(EntityPersister.java:442) at net.sf.hibernate.impl.ScheduledInsertion.execute(ScheduledInsertion.java:29) at net.sf.hibernate.impl.SessionImpl.executeAll(SessionImpl.java:2414) at net.sf.hibernate.impl.SessionImpl.execute(SessionImpl.java:2367) at net.sf.hibernate.impl.SessionImpl.flush(SessionImpl.java:2236) at org.springframework.orm.hibernate.SessionFactoryUtils$SpringSessionSynchronization.beforeCommit(SessionFactoryUtils.java:633) at org.springframework.transaction.support.AbstractPlatformTransactionManager.triggerBeforeCommit(AbstractPlatformTransactionManager.java:500) at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:364) at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:126) at com.cot.esd.Test2SpringSBBean.serverSidePurchase(Test2SpringSBBean.java:37) at com.cot.esd.EJSRemoteStatelessTest2SpringSB_27f3e5e8.serverSidePurchase(EJSRemoteStatelessTest2SpringSB_27f3e5e8.java:22) at com.cot.esd._EJSRemoteStatelessTest2SpringSB_27f3e5e8_Tie.serverSidePurchase(_EJSRemoteStatelessTest2SpringSB_27f3e5e8_Tie.java:152) at com.cot.esd._EJSRemoteStatelessTest2SpringSB_27f3e5e8_Tie._invoke(_EJSRemoteStatelessTest2SpringSB_27f3e5e8_Tie.java:96) at com.ibm.CORBA.iiop.ExtendedServerDelegate.dispatch(ExtendedServerDelegate.java:532) at com.ibm.CORBA.iiop.ORB.process(ORB.java:2450) at com.ibm.CORBA.iiop.OrbWorker.run(OrbWorker.java:186) at com.ibm.ejs.oa.pool.ThreadPool$PooledWorker.run(ThreadPool.java:104) at com.ibm.ws.util.CachedThread.run(ThreadPool.java(Compiled Code))  ---  **Affects:** 1.1 RC2  **Attachments:** - [ATest.jar](https://jira.spring.io/secure/attachment/10186/ATest.jar) (_115.70 kB_) - [beanRefContext.xml](https://jira.spring.io/secure/attachment/10184/beanRefContext.xml) (_567 bytes_) - [db_sql.txt](https://jira.spring.io/secure/attachment/10187/db_sql.txt) (_185 bytes_) - [springContext.xml](https://jira.spring.io/secure/attachment/10185/springContext.xml) (_3.73 kB_) - [TestClient.java](https://jira.spring.io/secure/attachment/10188/TestClient.java) (_3.25 kB_)","closed","type: bug,","spring-projects-issues","2004-08-30T05:25:26Z","2019-01-13T22:54:06Z"
"","5024","proxyTargetClass not working with BeanNameAutoProxyCreator [SPR-294]","**[Victor](https://jira.spring.io/secure/ViewProfile.jspa?name=victorwon)** opened **[SPR-294](https://jira.spring.io/browse/SPR-294?redirect=false)** and commented  I tried to set proxyTargetClass to true for BeanNameAutoProxyCreator, but it gave me the following error. It's running fine if I turned proxyTargetClass back to false and created an interface for my pojo class.  ---  [8/30/04 11:47:10:094 EDT] 4dc3d1da ExceptionUtil X CNTR0019E: Non-application exception occurred while processing method purchase: com.ibm.ejs.container.CreateFailureException: java.lang.reflect.InvocationTargetException; nested exception is: java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'com.cot.esd.TestSpringSBBean' defined in URL [file:/C:/projects/TestJ2EE/TestJ2EEEjb/bin/beanRefContext.xml]: Instantiation of bean failed; nested exception is org.springframework.beans.FatalBeanException: Could not instantiate class [org.springframework.context.support.ClassPathXmlApplicationContext]; constructor threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'purchaseManager' defined in class path resource [com/cot/esd/springContext.xml]: Initialization of bean failed; nested exception is org.aopalliance.aop.AspectException: null org.springframework.beans.FatalBeanException: Could not instantiate class [org.springframework.context.support.ClassPathXmlApplicationContext]; constructor threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'purchaseManager' defined in class path resource [com/cot/esd/springContext.xml]: Initialization of bean failed; nested exception is org.aopalliance.aop.AspectException: null org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'purchaseManager' defined in class path resource [com/cot/esd/springContext.xml]: Initialization of bean failed; nested exception is org.aopalliance.aop.AspectException: null java.lang.IllegalStateException: Callback Lnet/sf/cglib/proxy/MethodInterceptor; is not assignable to Lnet/sf/cglib/proxy/MethodInterceptor; at net.sf.cglib.proxy.Enhancer.validate(Enhancer.java:374) at net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:399) at net.sf.cglib.proxy.Enhancer.create(Enhancer.java:318) at org.springframework.aop.framework.Cglib2AopProxy.getProxy(Cglib2AopProxy.java:175) at org.springframework.aop.framework.Cglib2AopProxy.getProxy(Cglib2AopProxy.java:138) at org.springframework.aop.framework.ProxyFactory.getProxy(ProxyFactory.java:66) at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization(AbstractAutoProxyCreator.java:260) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:182) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:285) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:204) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:198) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:135) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:223) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:284) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:80) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:65) at java.lang.reflect.Constructor.newInstance(Native Method) at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:71) at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:66) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:470) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:247) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:204) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:198) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:135) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:223) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:284) at org.springframework.context.support.FileSystemXmlApplicationContext.\(FileSystemXmlApplicationContext.java:83) at org.springframework.context.support.FileSystemXmlApplicationContext.\(FileSystemXmlApplicationContext.java:68) at org.springframework.context.access.ContextSingletonBeanFactoryLocator.createDefinition(ContextSingletonBeanFactoryLocator.java:112) at org.springframework.beans.factory.access.SingletonBeanFactoryLocator.useBeanFactory(SingletonBeanFactoryLocator.java:385) at org.springframework.ejb.support.AbstractEnterpriseBean.loadBeanFactory(AbstractEnterpriseBean.java:115) at org.springframework.ejb.support.AbstractStatelessSessionBean.ejbCreate(AbstractStatelessSessionBean.java:63) at java.lang.reflect.Method.invoke(Native Method) at com.ibm.ejs.container.StatelessBeanO.\(StatelessBeanO.java:114) at com.ibm.ejs.container.BMStatelessBeanO.\(BMStatelessBeanO.java:32) at com.ibm.ejs.container.BMStatelessBeanOFactory.create(BMStatelessBeanOFactory.java:17) at com.ibm.ejs.container.EJSHome.createBeanO(EJSHome.java:464) at com.ibm.ejs.container.EJSHome.createBeanO(EJSHome.java:548) at com.ibm.ejs.container.activator.UncachedActivationStrategy.atActivate(UncachedActivationStrategy.java:66) at com.ibm.ejs.container.activator.Activator.activateBean(Activator.java:186) at com.ibm.ejs.container.EJSContainer.preInvoke(EJSContainer.java:1646)  ---  **Affects:** 1.1 RC2","closed","in: core,","spring-projects-issues","2004-08-30T03:18:24Z","2019-01-13T22:54:08Z"
"","5021","BlobSerializableType based on ClobStringType [SPR-290]","**[Victor](https://jira.spring.io/secure/ViewProfile.jspa?name=victorwon)** opened **[SPR-290](https://jira.spring.io/browse/SPR-290?redirect=false)** and commented  Hibernate UserType implementation for Serializable that gets mapped to BLOB. Note: I use Jta tx sync instead of spring's because #4988.  ---  public class BlobSerializableType implements UserType { protected final Logger logger = Logger.getLogger(getClass());      private static TransactionManager tm =     	(TransactionManager) new WebSphereTransactionManagerFactoryBean()     		.getObject();          protected final LobHandler lobHandler;          public BlobSerializableType() {     	this.lobHandler = LocalSessionFactoryBean.getConfigTimeLobHandler();     }          public int[] sqlTypes() {     	return new int[] { Types.BLOB };     }          public Class returnedClass() {     	return Serializable.class;     }          public boolean equals(Object x, Object y) {     	return EqualsHelper.equals(x, y);     }          public Object nullSafeGet(ResultSet rs, String[] names, Object owner)     	throws SQLException {     	if (this.lobHandler == null) {     		throw new IllegalStateException(     			""No LobHandler found for configuration - ""     				+ ""lobHandler property must be set on LocalSessionFactoryBean"");     	}          	try {     		// read the object from blob     		byte[] buf =     			this.lobHandler.getBlobAsBytes(rs, rs.findColumn(names[0]));     		if (buf.length == 0)     			return null;     		ObjectInputStream ois =     			new ObjectInputStream(new ByteArrayInputStream(buf));     		Object o = ois.readObject();     		ois.close();     		return o;          	} catch (Exception e) {     		throw new ServiceFailureException(     			""Failed to convert blob field into object."",     			e);     	}     }          public void nullSafeSet(PreparedStatement st, Object value, int index)     	throws SQLException {     	if (this.lobHandler == null) {     		throw new IllegalStateException(     			""No LobHandler found for configuration - ""     				+ ""lobHandler property must be set on LocalSessionFactoryBean"");     	}          	//		if (!TransactionSynchronizationManager.isSynchronizationActive()) {     	//			throw new IllegalStateException(""Requires active transaction synchronization"");     	//		}          	LobCreator lobCreator = this.lobHandler.getLobCreator();          	try {     		if (value == null) {     			lobCreator.setBlobAsBytes(st, index, null);     		} else {     			ByteArrayOutputStream baos = new ByteArrayOutputStream();     			ObjectOutputStream oos = new ObjectOutputStream(baos);     			oos.writeObject(value);     			lobCreator.setBlobAsBytes(st, index, baos.toByteArray());     			oos.close();     		}     	} catch (IOException ioe) {     		throw new ServiceFailureException(     			""Failed to stream object into blob field."",     			ioe);     	}          	try {     		tm.getTransaction().registerSynchronization(     			new LobCreatorSynchronization(lobCreator));          	} catch (RollbackException e) {     		lobCreator.close();     		logger.warn(     			""Can't register sync because tx has been marked rollback only."");          	} catch (Exception e) {     		throw new ServiceFailureException(     			""Error occured during tx synchronization."",     			e);     	}          	//		TransactionSynchronizationManager.registerSynchronization(     	//			new LobCreatorSynchronization(lobCreator));     }          public Object deepCopy(Object value) {     	try {     		return EsdUtils.deepCopy(value);     	} catch (Exception e) {     		throw new ServiceFailureException(     			""Failed to deep copy the BlobObjectType."",     			e);     	}     }          public boolean isMutable() {     	return true;     }          /**      * Callback for resource cleanup at the end of a transaction.      * Invokes LobCreator.close to clean up temporary LOBs that might have been created.      * @see org.springframework.jdbc.support.lob.LobCreator#close      */     private static class LobCreatorSynchronization implements Synchronization {          	private final LobCreator lobCreator;          	private LobCreatorSynchronization(LobCreator lobCreator) {     		this.lobCreator = lobCreator;     	}          	/* (non-Javadoc)     	 * @see javax.transaction.Synchronization#beforeCompletion()     	 */     	public void beforeCompletion() {          	}          	/* (non-Javadoc)     	 * @see javax.transaction.Synchronization#afterCompletion(int)     	 */     	public void afterCompletion(int status) {     		this.lobCreator.close();     	}     }  }  ---  **Affects:** 1.0.2","closed","type: enhancement,","spring-projects-issues","2004-08-27T04:45:14Z","2019-01-13T22:54:11Z"
"","5014","websphere 4 native jdbc extractor [SPR-283]","**[Victor](https://jira.spring.io/secure/ViewProfile.jspa?name=victorwon)** opened **[SPR-283](https://jira.spring.io/browse/SPR-283?redirect=false)** and commented  Hi,  I just improved and tested the WebSphereNativeJdbcExtractor to make it work under Websphere 4.x. I don't know how to easily contribute it to your cvs, but here it is:  package org.springframework.jdbc.support.nativejdbc;  import java.lang.reflect.Method; import java.sql.Connection; import java.sql.SQLException;  import org.apache.log4j.Logger; import org.springframework.dao.DataAccessResourceFailureException; import org.springframework.dao.InvalidDataAccessApiUsageException;  public class WebSphereNativeJdbcExtractor extends NativeJdbcExtractorAdapter { protected final Logger logger = Logger.getLogger(getClass());      private static final String JDBC_ADAPTER_CONNECTION_NAME =     	""com.ibm.ws.rsadapter.jdbc.WSJdbcConnection"";          private static final String JDBC_ADAPTER_UTIL_NAME =     	""com.ibm.ws.rsadapter.jdbc.WSJdbcUtil"";          private Class jdbcAdapterConnectionClass = null;     private Method getNativeConnectionMethod = null;          public static final String CON_PROXY_CLASS_4 =     	""com.ibm.ejs.cm.proxy.ConnectionProxy"";          private Class conProxyClass_4 = null;     private Method getNativeConnectionMethod_4 = null;          /**      *       */     public WebSphere4NativeJdbcExtractor() {     	try {     		// websphere 5     		this.jdbcAdapterConnectionClass =     			getClass().getClassLoader().loadClass(     				JDBC_ADAPTER_CONNECTION_NAME);     		Class jdbcAdapterUtilClass =     			getClass().getClassLoader().loadClass(JDBC_ADAPTER_UTIL_NAME);     		this.getNativeConnectionMethod =     			jdbcAdapterUtilClass.getMethod(     				""getNativeConnection"",     				new Class[] { this.jdbcAdapterConnectionClass });     	} catch (Exception ex) {     		try {     			// websphere 4     			conProxyClass_4 =     				getClass().getClassLoader().loadClass(CON_PROXY_CLASS_4);     			this.getNativeConnectionMethod_4 =     				conProxyClass_4.getMethod(""getPhysicalConnection"", null);     		} catch (Exception ex2) {     			throw new InvalidDataAccessApiUsageException(     				""Couldn't initialize WebSphereNativeJdbcExtractor because WebSphere API classes are not available"",     				ex2);     		}     	}          }          /**      * Return true, as WebSphere returns wrapped Statements.      */     public boolean isNativeConnectionNecessaryForNativeStatements() {     	return true;     }          /**      * Return true, as WebSphere returns wrapped PreparedStatements.      */     public boolean isNativeConnectionNecessaryForNativePreparedStatements() {     	return true;     }          /**      * Return true, as WebSphere returns wrapped CallableStatements.      */     public boolean isNativeConnectionNecessaryForNativeCallableStatements() {     	return true;     }          /**      * Retrieve the Connection via WebSphere's getNativeConnection method.      */     public Connection getNativeConnection(Connection con) throws SQLException {     	if (this.conProxyClass_4 != null) {     		if (this.conProxyClass_4.isAssignableFrom(con.getClass()))     			try {     				return (     					Connection) this.getNativeConnectionMethod_4.invoke(     					con,     					null);     			} catch (Exception ex) {     				throw new DataAccessResourceFailureException(     					""Could not invoke WebSphere4's getPhysicalConnection method"",     					ex);     			}          	} else if (     		this.jdbcAdapterConnectionClass.isAssignableFrom(con.getClass())) {     		try {     			return (Connection) this.getNativeConnectionMethod.invoke(     				null,     				new Object[] { con });     		} catch (Exception ex) {     			throw new DataAccessResourceFailureException(     				""Could not invoke WebSphere's getNativeConnection method"",     				ex);     		}     	}          	return con;          }  }    ---  **Affects:** 1.0.2","closed","type: enhancement,","spring-projects-issues","2004-08-24T04:45:50Z","2004-08-25T00:54:30Z"
"","5003","JTA transaction doesn't work in 1.1 RC2 [SPR-272]","**[Victor](https://jira.spring.io/secure/ViewProfile.jspa?name=victorwon)** opened **[SPR-272](https://jira.spring.io/browse/SPR-272?redirect=false)** and commented  Today I just tried to upgrade the spring lib to 1.1 rc2 from 1.02. To my surprise, the JTA starts to fail after I replaced the old spring.jar. After I switch back to 1.02, everything works again (no code change).  I use spring in within SLSB CMT which is demarcated as Required, tx attribute of the spring interceptted method is PROPAGATION_REQUIRES_NEW. The call failed no matter there is a tx started by the ejb client or not.  Here is the error I got with 1.1 rc2: [8/19/04 18:46:57:109 EDT] 52f8054b SystemOut     U ERROR [ORB.thread.pool:2] (AbstractPlatformTransactionManager.java:521) - Rollback exception overridden by synchronization exception java.lang.NullPointerException at org.springframework.orm.hibernate.SessionFactoryUtils$SpringSessionSynchronization.beforeCommit(SessionFactoryUtils.java:620) at org.springframework.transaction.support.AbstractPlatformTransactionManager.triggerBeforeCommit(AbstractPlatformTransactionManager.java:500) at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:364) at org.springframework.transaction.interceptor.TransactionAspectSupport.doCommitTransactionAfterReturning(TransactionAspectSupport.java:241) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:66) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:139) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:152) at $Proxy0.logInboundRequest(Unknown Source) at [8/19/04 18:46:57:109 EDT] 52f8054b JTSXA         W Current thread is already associated with another transaction.  I took a look at the source and found the session object is null after executing the following line in SessionFactoryUtils.  Session session = (this.jtaTransaction != null) ? this.sessionHolder.getSession(this.jtaTransaction) : this.sessionHolder.getSession();  While during the whole debug tracing, all session objects seem to bound use the DEFAULT_KEY - which is just a blank object.  I'm using spring's JtaTransactionManager to set the TransactionManagerLookup, maybe there are some additional steps needed in this new version?   ---  **Affects:** 1.1 RC2","closed","type: bug,","spring-projects-issues","2004-08-19T10:25:46Z","2019-01-11T13:26:24Z"
"","4952","Cannot use a bean from applicationcontext.xml if it is extended from HibernateDaoSupport [SPR-221]","**[Victor](https://jira.spring.io/secure/ViewProfile.jspa?name=victorwon)** opened **[SPR-221](https://jira.spring.io/browse/SPR-221?redirect=false)** and commented  Recently I tried to make a DAO class extended from HibernateDaoSupport. However, after I put it into applicationContext.xml and loaded it with the following code, it always gave me a BeanNotOfRequiredTypeException error.  public class MySB extends AbstractStatelessSessionBean { private SessionLoggerDAO sessionLogger;      protected void onEjbCreate() throws CreateException {	     	super.onEjbCreate();     	sessionLogger =     		(SessionLoggerDAO) getBeanFactory().getBean(""sessionLogger"", SessionLoggerDAO.class);  // BeanNotOfRequiredTypeException in above line } ... }  My SessionLoggerDAO class is somewhat as following: public class SessionLoggerDAO extends HibernateDaoSupport { ...// just POJO with getter and setter, nothing special. }  And the definition in applicationContext.xml is as following: \ \\\ \ \ \\\ \\\ \ \ \PROPAGATION_REQUIRES_NEW, +Exception\ \	 \ \  The most strange thing is that as soon as I remove the extension from HibernateDaoSupport, the error is gone. However, if I add another interface from any external package, like the Validatable from hibernate, the error appears again.  It sounds more like a classloader problem inside the spring core. When in debugging mode I also noticed that the getBean() returns a dynamic proxy instance instead of the real target instance.  Is there any better solution for it?   ---  **Affects:** 1.0.2","closed","status: declined,","spring-projects-issues","2004-07-16T03:26:11Z","2019-01-12T16:30:10Z"
"","5870","InputStreamResource - lines 65-67 does not correspond to the API [SPR-1168]","**[Victor Kolosov](https://jira.spring.io/secure/ViewProfile.jspa?name=vkolosov)** opened **[SPR-1168](https://jira.spring.io/browse/SPR-1168?redirect=false)** and commented  InputStreamResource - lines 65-67: public boolean isOpen() { return true; }  According to the API for this class: boolean isOpen() This implementations always returns false.  Initial problem that lead to this discovery: ((Resource) inputStreamSource).isOpen() on line 843 of MimeMessageHelper.java returns true and it leads to the IllegalArgumentException  Request: It would be nice to have a helper method that can constract a Resource out of an Object in memory not just off URL, file, classpath:file. That would be very usefull for sending an attachments that do not come of urls.   ---  **Affects:** 1.2.2","closed","in: core,","spring-projects-issues","2005-07-22T12:55:16Z","2013-10-11T04:52:01Z"
"","5420","After a successfull validation Spring does not call the onSubmit method with signature of (request, response,object, bindexception) [SPR-692]","**[Venkatt Guhesan](https://jira.spring.io/secure/ViewProfile.jspa?name=vguhesan)** opened **[SPR-692](https://jira.spring.io/browse/SPR-692?redirect=false)** and commented  I have a simple application where the following scenerio:  - LoginController extends SimpleFormController - LoginValidator implements Validator  Within LoginController I override the following method:  protected ModelAndView onSubmit(HttpServletRequest request, HttpServletResponse response, Object command, BindException errors) throws Exception  ---  on proper validation with no errors, I would expect the app to call the ""onSubmit"" method with the defined signature but it does not. If on the other hand I override, the following method:  protected ModelAndView onSubmit(Object command) throws Exception  ---  it calls the ""onSubmit"" method properly but I need to access the request scope to set a variable in the session.  Why does it not work when I implement the onSubmit(request,response,command,errors)? I have tried both Spring - 1.1.3 and 1.1.4 JARs.  PS: There is only one onSubmit method in the class. I have verified to make sure there were nother onSubmit methods...  Thanks  Venkatt Guhesan  ---  **Affects:** 1.1.3, 1.1.4  **Issue Links:** - #5521 invalid doSubmit method executed for SimpleFormController (_**""is duplicated by""**_)","closed","in: web,","spring-projects-issues","2005-02-05T12:02:48Z","2019-01-13T22:52:40Z"
"","5508","AOP before advice example not correct [SPR-781]","**[Vedran Vidovic](https://jira.spring.io/secure/ViewProfile.jspa?name=vvidovic)** opened **[SPR-781](https://jira.spring.io/browse/SPR-781?redirect=false)** and commented  In spring reference (5.3.2.2. Before advice) example can't count all methods that return normally because there is possibility of throwing Exception inside method. Probably instead of: ""An example of a before advice in Spring, which counts all methods that return normally:"", probably should be something like: ""An example of a before advice in Spring, which counts all method invocations:"".   ---  **Affects:** 1.1.4","closed","type: enhancement,","spring-projects-issues","2005-03-14T21:53:17Z","2005-03-25T03:24:46Z"
"","5507","in spring-reference (3.15) ""FileRetrievingFactoryBean"" is used instead of ""FieldRetrievingFactoryBean"" [SPR-780]","**[Vedran Vidovic](https://jira.spring.io/secure/ViewProfile.jspa?name=vvidovic)** opened **[SPR-780](https://jira.spring.io/browse/SPR-780?redirect=false)** and commented  In spring reference under ""3.15. Setting a bean property or constructor arg from a field value"" class name ""FileRetrievingFactoryBean"" is used instead of ""FieldRetrievingFactoryBean"".   ---  **Affects:** 1.1.4, 1.1.5","closed","type: enhancement,","spring-projects-issues","2005-03-14T21:46:03Z","2005-03-25T01:27:04Z"
"","4882","Add requestContextAttribute to VelocityViewResolver [SPR-150]","**[Vagif Hagverdi](https://jira.spring.io/secure/ViewProfile.jspa?name=vagif)** opened **[SPR-150](https://jira.spring.io/browse/SPR-150?redirect=false)** and commented  This feature allows to get access to context errors. Unfortunately you have to define views in order to get access to requestContextAttribute.  Adding requestContextAttribute to VelocityViewResolver will be very convenient.  ```java private String requestContextAttribute;  public void setRequestContextAttribute(String equestContextAttribute) { this.requestContextAttribute = requestContextAttribute; }  protected View loadView(String viewName, Locale locale) { VelocityView view = (VelocityView) super.loadView(viewName, locale); view.setVelocityFormatterAttribute(this.velocityFormatterAttribute); view.setDateToolAttribute(this.dateToolAttribute); view.setNumberToolAttribute(this.numberToolAttribute);  if (this.requestContextAttribute != null) view.setRequestContextAttribute(this.requestContextAttribute);  return view; } ```  --- No further details from [SPR-150](https://jira.spring.io/browse/SPR-150?redirect=false)","closed","type: enhancement,","spring-projects-issues","2004-05-31T13:51:15Z","2019-06-13T12:54:28Z"
"","5724","Short-hand error for constructor ref [SPR-1015]","**[Ulrik Sandberg](https://jira.spring.io/secure/ViewProfile.jspa?name=ulsa)** opened **[SPR-1015](https://jira.spring.io/browse/SPR-1015?redirect=false)** and commented  On page 18 in section 3.3.3.1 ""Value and Ref shortcut forms"" in the PDF-version of the reference manual, there is an error in the description of the short-hand form of \ for constructors.  \  should probably be:  \   ---  **Affects:** 1.2.1","closed","type: bug,","spring-projects-issues","2005-06-04T21:21:49Z","2005-06-13T04:10:43Z"
"","4925","OpenSessionInViewFilter and SessionFactoryUtils and Transactions [SPR-194]","**[Tyson Norris](https://jira.spring.io/secure/ViewProfile.jspa?name=tysonnorris)** opened **[SPR-194](https://jira.spring.io/browse/SPR-194?redirect=false)** and commented  Currently OpenSessionInViewFilter and SessionFactoryUtils to not effectively isolate a Session that is used within a Transaction.  The problem is that when a transaction fails, the session initiated by OpenSessionInViewFilter should not be used.   ---  **Affects:** 1.0.2","closed","in: core,","spring-projects-issues","2004-06-28T05:18:27Z","2004-07-09T04:50:45Z"
"","4907","use CGLIB Factory to generate proxy instances after first instance [SPR-175]","**[Tyson Norris](https://jira.spring.io/secure/ViewProfile.jspa?name=tysonnorris)** opened **[SPR-175](https://jira.spring.io/browse/SPR-175?redirect=false)** and commented  When using CGLIB Enhancer to generate a proxy, the Enhancer is generated with each instantiation. Each proxy instance the Enhancer creates can be reused as a factory (see net.sf.cglib.proxy.Factory) to avoid recreating the Enhancer configuration with the same callbacks during the next instantiation.  Attached is a revised version of Cglib2AopProxy.java class file - note the only changed method is the getProxy(ClassLoader cl) method.   ---  **Affects:** 1.0.2  **Attachments:** - [Cglib2AopProxy.java](https://jira.spring.io/secure/attachment/10113/Cglib2AopProxy.java) (_14.99 kB_)","closed","in: core,","spring-projects-issues","2004-06-20T06:47:42Z","2004-07-01T06:21:25Z"
"","4906","Support private bean constructors [SPR-174]","**[Tyson Norris](https://jira.spring.io/secure/ViewProfile.jspa?name=tysonnorris)** opened **[SPR-174](https://jira.spring.io/browse/SPR-174?redirect=false)** and commented  I asked a while back on the users list about private constructor support, and would like to propose this change to BeanUtils.instantiateClass() methods (I cannot access CVS on sourceforge for some reason, so I did not generate a patch...)      /**      * Convenience method to instantiate a class using its no-arg constructor.      * As this method doesn't try to load classes by name, it should avoid class-loading issues.      * @param clazz class to instantiate      * @return the new instance      */     public static Object instantiateClass(Class clazz) throws BeansException {     	try {             Constructor ctor = clazz.getDeclaredConstructor(new Class[]{});             if ((!Modifier.isPublic(ctor.getModifiers())) || (!Modifier.isPublic(clazz.getModifiers()))) {     			ctor.setAccessible(true);     		}             return ctor.newInstance(new Object[]{});         }         catch (NoSuchMethodException ex) {             throw new FatalBeanException(""Could not instantiate class ["" + clazz.getName() +     																 ""]; No default constructor?"", ex);		}         catch (InvocationTargetException ex) {             throw new FatalBeanException(""Could not instantiate class ["" + clazz.getName() +                                                                  ""]; Constructorfailed ?"", ex);     	}     	catch (InstantiationException ex) {     		throw new FatalBeanException(""Could not instantiate class ["" + clazz.getName() +     																 ""]; Is it an interface or an abstract class? Does it have a no-arg constructor?"", ex);     	}     	catch (IllegalAccessException ex) {     		throw new FatalBeanException(""Could not instantiate class ["" + clazz.getName() +     																 ""]; has class definition changed? Is there a public no-arg constructor?"", ex);     	}     }          /**      * Convenience method to instantiate a class using the given constructor.      * As this method doesn't try to load classes by name, it should avoid class-loading issues.      * @param constructor constructor to instantiate      * @return the new instance      */     public static Object instantiateClass(Constructor constructor, Object[] arguments) throws BeansException {     	try {             if ((!Modifier.isPublic(constructor.getModifiers())) || (!Modifier.isPublic(constructor.getModifiers()))) {     			constructor.setAccessible(true);     		}     		return constructor.newInstance(arguments);     	}     	catch (IllegalArgumentException ex) {     		throw new FatalBeanException(""Illegal arguments when trying to instantiate constructor: "" + constructor, ex);     	}     	catch (InstantiationException ex) {     		throw new FatalBeanException(""Could not instantiate class ["" + constructor.getDeclaringClass().getName() +     		                             ""]; is it an interface or an abstract class?"", ex);     	}     	catch (IllegalAccessException ex) {     		throw new FatalBeanException(""Could not instantiate class ["" + constructor.getDeclaringClass().getName() +     		                             ""]; has class definition changed? Is there a public constructor?"", ex);     	}     	catch (InvocationTargetException ex) {     		throw new FatalBeanException(""Could not instantiate class ["" + constructor.getDeclaringClass().getName() +     		                             ""]; constructor threw exception"", ex.getTargetException());     	}     }    ---  **Affects:** 1.0.2  **Attachments:** - [BeanUtils.java](https://jira.spring.io/secure/attachment/10112/BeanUtils.java) (_8.81 kB_)","closed","type: enhancement,","spring-projects-issues","2004-06-18T06:19:22Z","2004-06-22T22:26:02Z"
"","5789","HibernateTemplate generates wrong/bad sql [SPR-1084]","**[Travis Meisenheimer](https://jira.spring.io/secure/ViewProfile.jspa?name=travism)** opened **[SPR-1084](https://jira.spring.io/browse/SPR-1084?redirect=false)*** and commented  I use a JNDI defined datasource and configured Hibernate/Spring to use WebSphere's JTA and LookupManager as well as do CMT.    I setup Spring to manage Hibernate for me and my DAOs implement the HibernateDaoSupport class.  I'm not doing anything that isn't in the webapp-typicial sample setup other than the WebSphere specific things to get JNDI working.  When calling getHibernateTemplate().find(some valid hibernate statement) the generated SQL is incorrect as it only queries for part of the object's data.  getHibernateTemplate.load(some.class, id) also only generates SQL which queries for part of the data.  An example would be:Hibernate: select areabo0_.AREA_ID as AREA1_ from FORM4248_AREA areabo0_ where areabo0_.AREA=? when the correct SQL would have been ""Hibernate: select area0_.AREA_ID as AREA_ID, area0_.AREA as AREA from FORM4248_AREA area0_ where (area0_.AREA=? )""  Tracing how HibernateDaoSupport and HibernateTemplate works, I literally copied and pasted the Hibernate code (from HibernateTemplate's find() ) it uses with my ""some valid hibernate statement"" and called that code outside of Spring's hibernate management (i.e. Manually operated Sessions and transactions) and everything worked as expected and generated the correct SQL code.  In short, if I try a Hibernate call though Spring, I get consistently the same lack of data being queried.  If I call the Hibernate code straight outside of Spring, the very same code Spring calls, and manage everything myself, everything works.  I admit to being new to Hibernate and Spring, but the configuration for Spring-Hibernate and plain Hibernate is just about exactly the same.  Since my Hibernate code and configs work just fine I'm thinking this could be an issue in the Spring Framework. I don't think I have a Spring mis-configuration because if that was the case then why would the SQL/calls only contain some of the values and not all of the object's values.  I haven't come across anything in the forms about this issue which leads me to submit this possible bug.  Please advise on what I can do to resolve this.  Thanks.   ---  **Affects:** 1.2.1","closed","","spring-projects-issues","2005-06-28T09:48:38Z","2019-01-11T18:37:24Z"
"","5557","DefaultXmlBeanDefinitionParser.getTextValue() does not support entity references [SPR-831]","**[Torsten Juergeleit](https://jira.spring.io/secure/ViewProfile.jspa?name=torsten)** opened **[SPR-831](https://jira.spring.io/browse/SPR-831?redirect=false)** and commented  DefaultXmlBeanDefinitionParser.getTextValue() only supports instances of org.w3c.dom.CharacterData. For entity references an exception is thrown.  For details refer to http://opensource.atlassian.com/projects/spring/browse/IDE-36  Suggested modification:  if (item instanceof org.w3c.dom.CharacterData || item instanceof org.w3c.dom.EntityReference) {    ---  **Affects:** 1.1.5","closed","in: core,","spring-projects-issues","2005-03-29T09:40:54Z","2005-03-29T15:33:30Z"
"","5254","Doc: Be more specific regarding circular dependencies in chapter 3 [SPR-525]","**[Torsten Juergeleit](https://jira.spring.io/secure/ViewProfile.jspa?name=torsten)** opened **[SPR-525](https://jira.spring.io/browse/SPR-525?redirect=false)** and commented  Regarding circular dependencies chapter 3 only states the following:  ""... You can generally trust Spring to do the right thing. It  will pick up configuration issues, including references to  non-existent beans and circular dependencies, at BeanFactory load-time. ...""  Reading through the code, e.g. AbstractAutowireCapableBeanFactory.createBean()  ""... // Eagerly cache singletons to be able to resolve circular references // even when triggered by lifecycle interfaces like BeanFactoryAware. if (allowEagerCaching && mergedBeanDefinition.isSingleton()) { addSingleton(beanName, bean); eagerlyCached = true; } ...""  or the forum, e.g. http://forum.springframework.org/viewtopic.php?t=1481 gives some hints.  Please add some lines how Spring handles / detects circular dependencies. Additionally some sugestions on how to omit / workaround  circular dependencies à la Andreas' sugesstion in http://forum.springframework.org/viewtopic.php?t=1481 would be great.   ---  **Affects:** 1.1.2","closed","type: enhancement,","spring-projects-issues","2004-12-06T09:29:58Z","2012-06-19T03:53:56Z"
"","5252","Doc: Devote inner beans a separate chapter in chapter 3 [SPR-523]","**[Torsten Juergeleit](https://jira.spring.io/secure/ViewProfile.jspa?name=torsten)** opened **[SPR-523](https://jira.spring.io/browse/SPR-523?redirect=false)** and commented  The mechanics of inner beans in Spring needs a more explicit description in chapter 3.  One has to read the DTD ""... As alternative to bean references, ""inner bean definitions"" can be used. Singleton flags of such inner bean definitions are effectively ignored: Inner beans are typically anonymous prototypes. ...""  or Javadoc, e.g. from AbstractAutowireCapableBeanFactory.resolveValueIfNecessary() ""... *  \A BeanDefinition, which leads to the creation of a corresponding * new bean instance. Singleton flags and names of such ""inner beans"" * are always ignored: Inner beans are anonymous prototypes.   ...""  or the code, e.g. AbstractAutowireCapableBeanFactory.resolveValueIfNecessary() ""... if (value instanceof BeanDefinitionHolder) { // Resolve BeanDefinitionHolder: contains BeanDefinition with name and aliases. BeanDefinitionHolder bdHolder = (BeanDefinitionHolder) value; return resolveInnerBeanDefinition(beanName, bdHolder.getBeanName(), bdHolder.getBeanDefinition()); } else if (value instanceof BeanDefinition) { // Resolve plain BeanDefinition, without contained name: use dummy name. BeanDefinition bd = (BeanDefinition) value; return resolveInnerBeanDefinition(beanName, ""(inner bean)"", bd); } ..""  to get the ""full"" picture.   ---  **Affects:** 1.1.2","closed","type: enhancement,","spring-projects-issues","2004-12-06T08:35:23Z","2005-06-29T23:54:52Z"
"","5127","Add toString() to BeanDefinitionHolder [SPR-397]","**[Torsten Juergeleit](https://jira.spring.io/secure/ViewProfile.jspa?name=torsten)** opened **[SPR-397](https://jira.spring.io/browse/SPR-397?redirect=false)** and commented  It would be great (for Spring IDE ;-) to have BeanDefinitionHolder equipped with an implementation of toString() in the same manner like RuntimeBeanReference. Here I would like to suggest the semantics of ""{InnerBeanName}"", e.g.      public String toString() {        return '{' + getBeanName() + '}';     }    ---  **Affects:** 1.1.1","closed","type: enhancement,","spring-projects-issues","2004-10-15T07:30:13Z","2004-10-19T05:17:42Z"
"","5116","ManagedMap does not implement toString() [SPR-386]","**[Torsten Juergeleit](https://jira.spring.io/secure/ViewProfile.jspa?name=torsten)** opened **[SPR-386](https://jira.spring.io/browse/SPR-386?redirect=false)** and commented  In org.springframework.beans.factory.support.ManagedMap an implementation of toString() which delegates to the wrapped (target) map's toString() is missing.   ---  **Affects:** 1.1.1","closed","in: core,","spring-projects-issues","2004-10-10T11:46:42Z","2004-10-11T05:19:21Z"
"","5022","Support for  events in DefaultXmlBeanDefinitionParser [SPR-292]","**[Torsten Juergeleit](https://jira.spring.io/secure/ViewProfile.jspa?name=torsten)** opened **[SPR-292](https://jira.spring.io/browse/SPR-292?redirect=false)** and commented  Within Spring IDE we need a way to handle certain events which are occuring during parsing a Spring beans XML config file, e.g. start of parsing a (maybe nested) bean, bean constructor arguments, bean properties.  Currently this is done by extending DefaultXmlBeanDefinitionParser and overwriting corresponding methods. With every modified version of DefaultXmlBeanDefinitionParser Spring IDE's extension has to be updated accordingly.  I would like to suggest to add a SAX-like event handler mechanism to DefaultXmlBeanDefinitionParser. This can be done by providing an optional event handler via DefaultXmlBeanDefinitionParser's constructor (may be null). Within specific methods of DefaultXmlBeanDefinitionParser the corresponding method of the event handler is called.  The interface of this event handler could be as follows:  public interface XmlBeanDefinitionParserEvents {  void startBean(Element element, boolean isNestedBean);  void registerConstructorArgument(Element element, int index, Object value, String type); void registerBeanProperty(Element element, String propertyName, PropertyValues pvs); void registerBean(BeanDefinitionHolder bdHolder, boolean isNestedBean); }  The parameter 'element' is necessary to retrieve the line number from the DOM element of the corresponding XML tag. The additional methods for indicating the start of a bean or nested bean are necessary to prepare the data structures where the constructor arguments and properties are stored. Additionally they are used to maintain a stack of nested beans.  Attached you will find Spring IDE's current implementation which extends DefaultXmlBeanDefinitionParser to introduce this kind of event handler.  Cheers, Torsten   ---  **Attachments:** - [EventBeanDefinitionParser.java](https://jira.spring.io/secure/attachment/10182/EventBeanDefinitionParser.java) (_5.92 kB_) - [EventBeanDefinitionReader.java](https://jira.spring.io/secure/attachment/10183/EventBeanDefinitionReader.java) (_4.17 kB_) - [IBeanDefinitionEvents.java](https://jira.spring.io/secure/attachment/10180/IBeanDefinitionEvents.java) (_1.25 kB_)","closed","type: enhancement,","spring-projects-issues","2004-08-29T03:01:22Z","2006-03-03T10:51:52Z"
"","4990","ConcurrentModificationException in AbstractApplicationContext.getBeansOfType() [SPR-259]","**[Torsten Juergeleit](https://jira.spring.io/secure/ViewProfile.jspa?name=torsten)** opened **[SPR-259](https://jira.spring.io/browse/SPR-259?redirect=false)** and commented  Concurrent calls from within different threads (servlets) to AbstractApplicationContext.getBeansOfType() leads to the following exception:  java.util.ConcurrentModificationException at java.util.HashMap$HashIterator.nextEntry(HashMap.java:782) at java.util.HashMap$KeyIterator.next(HashMap.java:818) at org.springframework.beans.factory.support.AbstractBeanFactory.getSingletonNames(AbstractBeanFactory.java:481) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:1 at org.springframework.context.support.AbstractApplicationContext.getBeansOfType(AbstractApplicationContext.java:468) at de.deka.techarch.spring.bean.BeanUtils.getFirstInterceptedBeanOfType(BeanUtils.java:67) at de.deka.dekanet.service.context.BusinessServiceFactory.getService(BusinessServiceFactory.java:86)  Our code which calls ListableBeanFactory.getBeansOfType() is as follows:      /**      * Returns the first bean from the {@link Map} returned by      * ListableBeanFactory.getBeansOfType(type, true, true)      * which is an instances of {@link java.lang.reflect.Proxy}.      */     public static final Object getFirstProxiedBeanOfType(     								ListableBeanFactory factory, Class type) {     	Map names = factory.getBeansOfType(type, true, true);     	Iterator iter = names.keySet().iterator();     	while (iter.hasNext()) {     		String name = (String)iter.next();     		Object bean = factory.getBean(name);     		if (bean instanceof Proxy) {     			return bean;     		}     	}     	return null;     }    ---  **Affects:** 1.1 RC1","closed","in: core,","spring-projects-issues","2004-08-12T00:51:22Z","2004-08-12T01:35:27Z"
"","5860","DTD simplification for  [SPR-1158]","**[Tor Tuga](https://jira.spring.io/secure/ViewProfile.jspa?name=tortuga)** opened **[SPR-1158](https://jira.spring.io/browse/SPR-1158?redirect=false)** and commented  Just as there was a simplification for:  \  \  \  aliased to  \  in the Spring Beans DTD, I would like to see  \  \  \  simplified to  \ since 'some.bean.class' is required for a \, this would make sense as the equivalent alias.   --- No further details from [SPR-1158](https://jira.spring.io/browse/SPR-1158?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-07-20T03:16:57Z","2019-01-11T19:33:45Z"
"","5368","AbstractEnterpriseBean depends on ejbRemove [SPR-640]","**[Tomasz Wysocki](https://jira.spring.io/secure/ViewProfile.jspa?name=tawek)** opened **[SPR-640](https://jira.spring.io/browse/SPR-640?redirect=false)*** and commented  According to ejb-2.1 specification ejb bean is simply discarded when it throws system exception. This means that ejbRemove will not be called when beans directly transits to ""non-existent"" state within ejb container.  Unfortunately unloadBeanFactory() is called in ejbRemove() which creates unreliable mechanism for unloading bean factories, because reference counting employed in singleton bean factory will not work correctly.  Possible solution is to choose WeakReference for automatic release of bean factories used in ejb.   ---  **Affects:** 1.1.3  **Attachments:** - [WeakReferenceMonitor.java](https://jira.spring.io/secure/attachment/10480/WeakReferenceMonitor.java) (_6.68 kB_)  1 votes, 1 watchers","closed","in: core,","spring-projects-issues","2005-01-19T01:25:51Z","2005-03-11T05:48:40Z"
"","5230","Doc: Hibernate session closed after transaction was commited. [SPR-501]","**[Tomasz Wysocki](https://jira.spring.io/secure/ViewProfile.jspa?name=tawek)** opened **[SPR-501](https://jira.spring.io/browse/SPR-501?redirect=false)** and commented  The spring's context contains JTATransactionManager set up with WebLogic's TM JNDI location, and of course a JNDI datasource. I also use weblogic's XA wrappers around plain Oracle (non-XA) connections.  Below is a fragment of a exception's stacktrace I got in weblogic jdbc.log (jdbc debug feature turned on). This exception seems to be swallowed by weblogic itself, as it does not appear in any other logs. I can't say if it affects how weblogic manages connections. Also weblogic connection profiling shows no leaked connections.  Classic ""dao"" approach is to close connection in the same method that it was obtained from datasource, within a ""finally"" block. And for sure within a transaction scope. Just wondering if it is allowable in J2EE environment to close connections after associated transaction has been finished (commited/rolledback).  Here goes an exception:  java.sql.SQLException: The transaction is no longer active - status: 'Committed'. No further JDBC access is allowed within this transaction. at weblogic.jdbc.wrapper.JTSConnection.checkIfRolledBack(JTSConnection.java:118) at weblogic.jdbc.wrapper.JTSConnection.checkConnection(JTSConnection.java:127) at weblogic.jdbc.wrapper.Connection.preInvocationHandler(Connection.java:70) at weblogic.jdbc.wrapper.JTSConnection_oracle_jdbc_driver_OracleConnection.getWarnings(Unknown Source) at net.sf.hibernate.impl.BatcherImpl.closeConnection(BatcherImpl.java:297) at net.sf.hibernate.impl.SessionImpl.disconnect(SessionImpl.java:3352) at net.sf.hibernate.impl.SessionImpl.close(SessionImpl.java:576) at org.springframework.orm.hibernate.SessionFactoryUtils.doClose(SessionFactoryUtils.java:651) at org.springframework.orm.hibernate.SessionFactoryUtils.closeSessionOrRegisterDeferredClose(SessionFactoryUtils.java:640) at org.springframework.orm.hibernate.SessionFactoryUtils.access$300(SessionFactoryUtils.java:86) at org.springframework.orm.hibernate.SessionFactoryUtils$SpringSessionSynchronization.afterCompletion(SessionFactoryUtils.java:804) at org.springframework.transaction.support.AbstractPlatformTransactionManager.triggerAfterCompletion(AbstractPlatformTransactionManager.java:547) at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:408) at org.springframework.transaction.interceptor.TransactionAspectSupport.doCommitTransactionAfterReturning(TransactionAspectSupport.java:242) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:66) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:143) at org.springframework.aop.interceptor.PerformanceMonitorInterceptor.invoke(PerformanceMonitorInterceptor.java:50) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:143) at   ---  **Affects:** 1.1.2","closed","type: enhancement,","spring-projects-issues","2004-11-29T19:33:51Z","2005-07-21T13:10:29Z"
"","5643","JPetStore sample hsqldb server.sh has DOS new-lines [SPR-920]","**[Tomas Zverina](https://jira.spring.io/secure/ViewProfile.jspa?name=tomucha)** opened **[SPR-920](https://jira.spring.io/browse/SPR-920?redirect=false)** and commented  Which on Linux causes HSQLDB to start database ""jpetstore\r"" and results with ""java.sql.SQLException: Table not found: CATEGORY in statement"".  Converting to UNIX new lines works fine.   ---  **Affects:** 1.2 RC2","closed","type: bug,","spring-projects-issues","2005-05-04T23:32:29Z","2005-05-12T07:12:47Z"
"","5635","introduce onBindOnNewForm method in AbstractFormController [SPR-910]","**[Tom Turelinckx](https://jira.spring.io/secure/ViewProfile.jspa?name=turelto)** opened **[SPR-910](https://jira.spring.io/browse/SPR-910?redirect=false)** and commented  Sometimes, I need to perform some initialization of the form backing object, that cannot be done in formBackingObject, because the initial binding on the new object should occur first. This initialization cannot be done in a custom property editor either, because it involves multiple properties. The logic is very similar to what you would implement in one of the onBind methods, but I need it for the initial binding on a new form backing object (where the onBind methods aren't called), and I want it only once, not on every bind. There's currently no easy way to do this, but it would be trivial to add an onBindOnNewForm method.  When extending AbstractWizardFormController, I currently abuse the getInitialPage method for this purpose, which works, but is not very elegant.   --- No further details from [SPR-910](https://jira.spring.io/browse/SPR-910?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-04-27T23:40:02Z","2012-06-19T03:54:31Z"
"","5065","expose null value in model [SPR-335]","**[Tom Turelinckx](https://jira.spring.io/secure/ViewProfile.jspa?name=turelto)** opened **[SPR-335](https://jira.spring.io/browse/SPR-335?redirect=false)** and commented  InternalResourceView's exposeModelAsRequestAttributes method exposes model values as request attributes only if they are not null. This makes it impossible to remove a request attribute.  I have a page that includes a same url several times, with different parameters. The included url is implemented as a controller with a JstlView. The same request attributes are thus reused several times during a single request. When a certain model value is not null for the first include, but is null for the second, the request attribute is not changed, and the same value is incorrectly displayed twice.  As I think this is a valid use of includes, maybe this behavior could be made configurable? For example, a boolean property ""exposeNullModelValue"" (false by default) could be added to InternalResourceView, and the check at line 112 could be changed to ""(modelValue != null || exposeNullModelValue)"". According to the javadoc for ServletRequest, setting a request attribute to null has the same effect as calling removeAttribute().   --- No further details from [SPR-335](https://jira.spring.io/browse/SPR-335?redirect=false)","closed","type: enhancement,","spring-projects-issues","2004-09-17T01:58:05Z","2004-09-23T09:02:52Z"
"","5039","add support for abstract bean definitions to PropertiesBeanDefinitionReader [SPR-309]","**[Tom Turelinckx](https://jira.spring.io/secure/ViewProfile.jspa?name=turelto)** opened **[SPR-309](https://jira.spring.io/browse/SPR-309?redirect=false)** and commented  Just so it's not forgotten:  http://article.gmane.org/gmane.comp.java.springframework.devel/5733  Looks like support for a virtual ""(abstract)"" property would be trivial to add.   --- No further details from [SPR-309](https://jira.spring.io/browse/SPR-309?redirect=false)","closed","type: enhancement,","spring-projects-issues","2004-09-02T23:20:26Z","2004-09-03T05:09:09Z"
"","5034","StringTrimmerEditor handles nulls inconsistently [SPR-304]","**[Tom Turelinckx](https://jira.spring.io/secure/ViewProfile.jspa?name=turelto)** opened **[SPR-304](https://jira.spring.io/browse/SPR-304?redirect=false)** and commented  This issue is probably related to #5004.  Even when emptyAsNull is true, StringTrimmerEditor's inherited getAsText method returns ""null"" for a null value.  This used to be no problem, as BindException.getFieldValue did not invoke getAsText for null values. But now getAsText is always invoked, even for null values (cf #5004), resulting in ""null"" being displayed in empty html form fields bound using StringTrimmerEditor.  StringTrimmerEditor should probably override getAsText to return an empty String for a null value when emptyAsNull is true.  ---  **Affects:** 1.1 final","closed","in: core,","spring-projects-issues","2004-09-01T02:39:19Z","2019-01-11T14:05:25Z"
"","5000","Introduce explicit ""abstract"" bean definition attribute [SPR-269]","**[Tom Turelinckx](https://jira.spring.io/secure/ViewProfile.jspa?name=turelto)** opened **[SPR-269](https://jira.spring.io/browse/SPR-269?redirect=false)** and commented  As suggested here:  http://article.gmane.org/gmane.comp.java.springframework.devel/5400  Is there any specific reason why such an ""abstract"" attribute wasn't added?  I still see value in it over (ab)using the lazy-init attribute, to prevent accidental instantiation of an incomplete parent bean definition that does have a class specified, such as concise proxy definitions or a default parent view definition.  Throwing an exception when trying to instantiate an abstract bean would reveal such a mistake early, where it might otherwise result in some strange error down the line...  Though the use for this feature is small, it would make configuration more explicit, and it looks like it would be easy to add...   --- No further details from [SPR-269](https://jira.spring.io/browse/SPR-269?redirect=false)","closed","type: enhancement,","spring-projects-issues","2004-08-18T03:52:57Z","2004-08-30T19:44:49Z"
"","4891","add sessionId and userPrincipal to RequestHandledEvent [SPR-159]","**[Tom Turelinckx](https://jira.spring.io/secure/ViewProfile.jspa?name=turelto)** opened **[SPR-159](https://jira.spring.io/browse/SPR-159?redirect=false)** and commented  We'd like to track user activity by listening to RequestHandledEvents.  I've already implemented an HttpSessionListener that ""forwards"" HttpSessionCreated and HttpSessionDestroyed events to the application context; now I'd like to associate individual RequestHandledEvents with a session and with a user to be able to draw up a list of currently active users, their idle time and the last page they visited.   ---  **Affects:** 1.0.2","closed","type: enhancement,","spring-projects-issues","2004-06-06T18:03:47Z","2004-06-06T20:38:21Z"
"","5857","property editor doesn't know existing property value when setting new value using BeanWrapperImpl [SPR-1155]","**[Tom Turelinckx](https://jira.spring.io/secure/ViewProfile.jspa?name=turelto)** opened **[SPR-1155](https://jira.spring.io/browse/SPR-1155?redirect=false)** and commented  When using BeanWrapperImpl to set the value of a property where a property editor is involved, doTypeConversionIfNecessary() calls setAsText() and then getValue() on the property editor, but it does not first call setValue() with the existing property value. Hence, you cannot use getValue() in the setAsText() method to get the existing property value...  I accidentally discovered this when trying to get MutableSortDefinition's toggleAscendingOnProperty functionality to work when binding a sortDefinition request parameter on a bean that is kept in the session. It doesn't work, because my property editor's setAsText() method never updates the existing MutableSortDefinition property value - getValue() is always null and a new instance is created every time.  Actually, I would really expect this to work... I have a lot of custom property editors where setAsText() performs a database lookup by primary key, but first performs a !getAsText().equals(text) check to verify the lookup is actually necessary. Probably, this doesn't work either, because getAsText() calls getValue() to transform the existing property value into a String representation...  In fact, when looking at BeanWrapperImpl's source, it turns out the oldValue parameter passed to doTypeConversionIfNecessary is explicitly specified as null everywhere the method is called, but the parameter is only used for creating property change events anyway.  I searched the forums and noticed there's already a ""discussion"" going on ;-)  http://forum.springframework.org/viewtopic.php?t=3440  I couldn't find a JIRA issue for this yet though.  Any chance this can be fixed?  Thanks, Tom.   ---  **Affects:** 1.2.2","closed","type: enhancement,","spring-projects-issues","2005-07-19T19:29:43Z","2005-07-20T04:22:35Z"
"","5843","in BindTag, don't blindly cast ""status"" attribute to BindStatus [SPR-1140]","**[Tom Turelinckx](https://jira.spring.io/secure/ViewProfile.jspa?name=turelto)** opened **[SPR-1140](https://jira.spring.io/browse/SPR-1140?redirect=false)** and commented  In BindTag, line 122, the STATUS_VARIABLE_NAME attribute from the pageContext is cast to BindStatus without any checks. Since STATUS_VARIABE_NAME is simply ""status"", it is definitely possible such an attribute already exists in the pageContext.  In my case, the Apache implementation of the JSTL c:forEach tag seems to leave an attribute of type LoopTagSupport in the pageContext when you specify varStatus (and I happened to call this variable ""status""), even after the closing forEach tag. Though this attribute should probably be removed by the closing forEach tag, having an attribute named ""status"" in the pageContext seems a valid use case in general, but results in a plain ClassCastException...  I would propose to either change STATUS_VARIABLE_NAME to something more unique (but this may have other side-effects), or just make previousStatus of type Object instead of BindStatus, and not perform any cast.  Tom.   ---  **Affects:** 1.2.2","closed","type: enhancement,","spring-projects-issues","2005-07-14T21:05:22Z","2005-07-19T07:08:11Z"
"","5804","add ""prefix"" & ""suffix"" properties to (Jamon)PerformanceMonitorInterceptor [SPR-1100]","**[Tom Turelinckx](https://jira.spring.io/secure/ViewProfile.jspa?name=turelto)** opened **[SPR-1100](https://jira.spring.io/browse/SPR-1100?redirect=false)** and commented  It would be useful to add optional ""prefix"" & ""suffix"" String properties to (Jamon)PerformanceMonitorInterceptor that would be placed around the ""name"" passed to the StopWatch constructor and MonitorFactory.start() method.  Especially in the case of Jamon, this allows to distinguish between different groups/types of monitoring.   ---  **Affects:** 1.2.2","closed","type: enhancement,","spring-projects-issues","2005-07-04T23:10:49Z","2012-06-19T03:54:38Z"
"","5101","Direct exposure of Spring-managed bean as Apache Axis service [SPR-371]","**[Tom Czarniecki](https://jira.spring.io/secure/ViewProfile.jspa?name=tomczarniecki)** opened **[SPR-371](https://jira.spring.io/browse/SPR-371?redirect=false)*** and commented  Currently, web services are integrated via the org.springframework.remoting.jaxrpc.ServletEndpointSupport class which requires you to know the bean names of your required dependencies. The attached code provides an alternative more Spring-centric method of dependency injection into axis web service end points. We created a SpringAxisServlet that simply extends AxisServlet and overrides the init() and destroy() methods to initialise and destroy a Spring WebApplicationContext for the AxisServlet. We used the same pattern, and code, as found in the ContextLoaderPlugIn, so you wind up with an axis-servlet.xml configuration file that describes the Spring beans that can be used as web service end points. We then created our own SpringBeanMsgProvider and SpringBeanRPCProvider classes to handle retrieval of Spring-managed end points.   ---  **Affects:** 1.0.2, 1.1 RC1, 1.1 RC2, 1.1 final, 1.1.1  **Attachments:** - [org.apache.axis.deployment.wsdd.Provider](https://jira.spring.io/secure/attachment/11378/org.apache.axis.deployment.wsdd.Provider) (_183 bytes_) - [p-BeanHandler.java](https://jira.spring.io/secure/attachment/11371/p-BeanHandler.java) (_3.94 kB_) - [p-SpringAxisServlet.java](https://jira.spring.io/secure/attachment/11372/p-SpringAxisServlet.java) (_11.45 kB_) - [p-SpringBeanMsgProvider.java](https://jira.spring.io/secure/attachment/11373/p-SpringBeanMsgProvider.java) (_3.22 kB_) - [p-SpringBeanProvider.java](https://jira.spring.io/secure/attachment/11374/p-SpringBeanProvider.java) (_2.39 kB_) - [p-SpringBeanRPCProvider.java](https://jira.spring.io/secure/attachment/11375/p-SpringBeanRPCProvider.java) (_3.08 kB_) - [p-WSDDSpringMsgProvider.java](https://jira.spring.io/secure/attachment/11376/p-WSDDSpringMsgProvider.java) (_1.39 kB_) - [p-WSDDSpringRPCProvider.java](https://jira.spring.io/secure/attachment/11377/p-WSDDSpringRPCProvider.java) (_1.39 kB_) - [SpringAxisServlet.java](https://jira.spring.io/secure/attachment/10267/SpringAxisServlet.java) (_11.55 kB_) - [SpringBeanMsgProvider.java](https://jira.spring.io/secure/attachment/10268/SpringBeanMsgProvider.java) (_3.02 kB_) - [SpringBeanProvider.java](https://jira.spring.io/secure/attachment/10269/SpringBeanProvider.java) (_3.01 kB_) - [SpringBeanProvider.java_jv_mod](https://jira.spring.io/secure/attachment/10319/SpringBeanProvider.java_jv_mod) (_3.64 kB_) - [SpringBeanRPCProvider.java](https://jira.spring.io/secure/attachment/10270/SpringBeanRPCProvider.java) (_3.03 kB_) - [SpringBeanRPCProvider.java_jv_mod](https://jira.spring.io/secure/attachment/10318/SpringBeanRPCProvider.java_jv_mod) (_4.85 kB_) - [store-web-context-in-engine.patch](https://jira.spring.io/secure/attachment/11256/store-web-context-in-engine.patch) (_7.23 kB_)  17 votes, 16 watchers","closed","has: votes-jira,","spring-projects-issues","2004-10-05T09:58:58Z","2019-01-11T14:01:09Z"
"","5519","Support For Event Listeners [SPR-792]","**[Todd Nine](https://jira.spring.io/secure/ViewProfile.jspa?name=tnine)** opened **[SPR-792](https://jira.spring.io/browse/SPR-792?redirect=false)** and commented  I have added support for the Hibernate event listener interceptors.  It is not the prettiest, since the only way to add the property in the Hibernate configuration is by the event name, then the intercepting class.  This simply uses a Properties object for the name value pair.  ---  **Affects:** 1.2 RC1  **Attachments:** - [LocalSessionFactory.zip](https://jira.spring.io/secure/attachment/10593/LocalSessionFactory.zip) (_10.77 kB_) - [LocalSessionFactory2.zip](https://jira.spring.io/secure/attachment/10594/LocalSessionFactory2.zip) (_10.80 kB_)  **Issue Links:** - #5560 No way to set listeners on the SessionFactory (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2005-03-16T04:58:55Z","2019-01-11T12:56:11Z"
"","5797","OpenSessionInViewFilter should be in spring-web.jar [SPR-1093]","**[Tim Shadel](https://jira.spring.io/secure/ViewProfile.jspa?name=shadeltd)** opened **[SPR-1093](https://jira.spring.io/browse/SPR-1093?redirect=false)** and commented  The spring-hibernate.jar and spring-web.jar files may be loaded in different classloaders in a container (spring-hibernate.jar at the EJB level, and spring-web.jar at the WAR level, or something similar).  In that scenario, OpenSessionInViewFilter can be referenced from the WAR (it's in the parent classloader) but then it extends OncePerRequestFilter which is only in the WAR classloader and therefore cannot be seen from the EJB level.  A couple solutions may work.  1) Simply package the OpenSessionInViewFilter in the spring-web.jar file instead, but keep its  package the same.  2) Change the package to reflect that OpenSessionInViewFilter has its primary reliance on web code, and a secondary one on hibernate (I haven't looked at the source, but all Spring related Hibernate classes should be accessible in the WAR -> EJB classloader scenario), perhaps org.springframework.web.filter.hibernate would be appropriate.  Placing the spring-hibernate.jar in a directory shared by multiple WARs in a servlet container (like Tomcat's shared\lib: see servlet spec 2.4, section 9.7.1) with spring-web.jar in a WAR also manifests the same problem.   ---  **Affects:** 1.2.1","closed","type: enhancement,","spring-projects-issues","2005-07-01T04:42:08Z","2005-07-03T17:50:42Z"
"","5399","import should support classpath: [SPR-671]","**[Tim Schafer](https://jira.spring.io/secure/ViewProfile.jspa?name=tschafer)** opened **[SPR-671](https://jira.spring.io/browse/SPR-671?redirect=false)** and commented  2005-01-31 13:58:49 StandardContext[/kls2]Loading root WebApplicationContext 2005-01-31 13:58:49 StandardContext[/kls2]Exception sending context initialized event to listener instance of class org.springframework.web.context.ContextLoaderListener org.springframework.beans.factory.BeanDefinitionStoreException: IOException parsing XML document from ServletContext resource [/WEB-INF/classpath:/database.beans.xml]; nested exception is java.io.FileNotFoundException: Could not open ServletContext resource [/WEB-INF/classpath:/database.beans.xml] java.io.FileNotFoundException: Could not open ServletContext resource [/WEB-INF/classpath:/database.beans.xml] at org.springframework.web.context.support.ServletContextResource.getInputStream(ServletContextResource.java:89) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:127) at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.importBeanDefinitionResource(DefaultXmlBeanDefinitionParser.java:226) at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.registerBeanDefinitions(DefaultXmlBeanDefinitionParser.java:180) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:170) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:129) at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:144) at org.springframework.context.support.AbstractXmlApplicationContext.refreshBeanFactory(AbstractXmlApplicationContext.java:79) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:249) at org.springframework.web.context.support.XmlWebApplicationContext.refresh(XmlWebApplicationContext.java:131) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:167) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:101) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:48) at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:3827) at org.apache.catalina.core.StandardContext.start(StandardContext.java:4343) at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:823) at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:807) at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:595) at org.apache.catalina.core.StandardHostDeployer.install(StandardHostDeployer.java:277) at org.apache.catalina.core.StandardHost.install(StandardHost.java:832) at org.apache.catalina.manager.ManagerServlet.deploy(ManagerServlet.java:922) at org.apache.catalina.manager.HTMLManagerServlet.deployInternal(HTMLManagerServlet.java:271) at org.apache.catalina.manager.HTMLManagerServlet.doGet(HTMLManagerServlet.java:95) at javax.servlet.http.HttpServlet.service(HttpServlet.java:689) at javax.servlet.http.HttpServlet.service(HttpServlet.java:802) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:237) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:157) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:214) at org.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:104) at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:520) at org.apache.catalina.core.StandardContextValve.invokeInternal(StandardContextValve.java:198) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:152) at org.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:104) at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:540) at org.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:102) at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:520) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:137) at org.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:104) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:117) at org.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:102) at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:520) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) at org.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:104) at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:520) at org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:929) at org.apache.coyote.tomcat5.CoyoteAdapter.service(CoyoteAdapter.java:160) at org.apache.jk.server.JkCoyoteHandler.invoke(JkCoyoteHandler.java:300) at org.apache.jk.common.HandlerRequest.invoke(HandlerRequest.java:374) at org.apache.jk.common.ChannelSocket.invoke(ChannelSocket.java:743) at org.apache.jk.common.ChannelSocket.processConnection(ChannelSocket.java:675) at org.apache.jk.common.SocketConnection.runIt(ChannelSocket.java:866) at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:683) at java.lang.Thread.run(Thread.java:534)   ---  **Affects:** 1.1.2  1 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2005-01-31T10:45:46Z","2005-02-21T04:34:01Z"
"","5264","Improve documentation on scheduling support [SPR-535]","**[Tim Nolan](https://jira.spring.io/secure/ViewProfile.jspa?name=katentim)** opened **[SPR-535](https://jira.spring.io/browse/SPR-535?redirect=false)** and commented  RCS file: /cvsroot/springframework/spring/docs/reference/src/scheduling.xml,v retrieving revision 1.5 diff -u -r1.5 scheduling.xml --- scheduling.xml	22 Nov 2004 16:31:31 -0000	1.5 +++ scheduling.xml	9 Dec 2004 11:37:57 -0000 @@ -5,12 +5,12 @@  \Introduction\ \ Spring features integration classes for scheduling support. Currently, Spring -------------------------------------------------------------------------------------------------------------------      supports the Timer, built in in the JDK since 1.3 and the Quartz Scheduler  +         supports the Timer, built in the JDK since 1.3 and the Quartz Scheduler       (). Both schedulers are set up  -         using a FactoryBean with optional references to Timers respectively Triggers.  +         using a FactoryBean with optional references to Timers or Triggers.       Furthermore, a convenience class for both the Quartz Scheduler and the Timer is  -         available that allows you to invoke a method an a target object you can specify  -         yourself (analogous to normal MethodInvokingFactoryBeans  +         available that allows you to invoke a method and a target object that you can  +         specify yourself (analogous to normal MethodInvokingFactoryBeans    \   \  @@ -29,8 +29,8 @@ \ \JobDetail\ objects contain all information needed to run a job. Spring provides a so-called \JobDetailBean\  ---      that makes the JobDetail more of an actual with sensible defaults.  -         Let's have a look at an example:  +         that makes the JobDetail more of an actual Spring JavaBean with sensible  +         defaults. Let's have a look at an example:        \ @@ -117,12 +117,12 @@ business object and wire up the detail object. \ \ -         By default, Quartz Jobs are stateless, resulting in the possibility of jobs interfering  -         with eachother. If you specify two triggers for the same JobDetail, it might be possible  +         By default, Quartz Jobs are stateless, resulting in the possibility of jobs interferring  +         with each other. If you specify two triggers for the same JobDetail, it might be possible       that before the first job has finished, the second one will start. If JobDetail objects       implement the Stateful interface, this won't happen. The second job will not start  -         before the first one has finished. To make jobs resulting from the MethodInvokingJobDetailFactoryBEan  -         non-concurrent set the \concurrent\ flag to \false\.  +         before the first one has finished. To make jobs resulting from the MethodInvokingJobDetailFactoryBean  +         non-concurrent, set the \concurrent\ flag to \false\.       \\ @@ -147,7 +147,7 @@ \ \ Triggers need to be scheduled. Spring offers a SchedulerFactoryBean exposing properties -         to set te triggers. The SchedulerFactoryBean schedules the actual triggers.  +              to set the triggers. The SchedulerFactoryBean schedules the actual triggers.       \       \            A couple of examples:  @@ -192,7 +192,7 @@ ]]>\ More properties are available for the SchedulerFactoryBean for you to set, such as the Calendars used by the job details, properties to customize Quartz with, etcetera. Have a look -         at the JavaDOC (\) for more information.  +              at the JavaDoc (\) for more information.       \    \   \	   @@ -260,7 +260,7 @@   \   \Using the MethodInvokingTimerTaskFactoryBean\   \  -         Just as the Quartz support, the Timer support also features a component that  +         Similar to the Quartz support, the Timer support also features a component that       allows you to periodically invoke a method:       \\\      Changing the reference of the above example in which the ScheduledTimerTask is mentioned to the  -         methodInvokingTask will result in this task to be executed.  +              methodInvokingTask will result in this task being executed.           \   \   \Wrapping up: setting up the tasks using the TimerFactoryBean\   \  -         The TimerFactoryBean is similar to the QuartzSchedulerFactoryBean in that is serves the same  +         The TimerFactoryBean is similar to the QuartzSchedulerFactoryBean in that it serves the same       purpose: setting up the actual scheduling. The TimerFactoryBean sets up an actual Timer and       schedules the tasks it has references to. You can specify whether or not daemon threads should       be used.  ---  No further details from [SPR-535](https://jira.spring.io/browse/SPR-535?redirect=false)","closed","type: enhancement,","spring-projects-issues","2004-12-08T21:44:12Z","2019-01-13T22:53:15Z"
"","5262","docpdf target broken [SPR-533]","**[Tim Nolan](https://jira.spring.io/secure/ViewProfile.jspa?name=katentim)** opened **[SPR-533](https://jira.spring.io/browse/SPR-533?redirect=false)** and commented  2 Problems 1) There are two ids of ""context-create"" 2) Running this target gives me OutOfMemoryError  Below are 2 patches. Solved prob. 2 by adding maxmemory of 256m - there may be a better way to do this.  Fix for problem1: RCS file: /cvsroot/springframework/spring/docs/reference/src/beans.xml,v retrieving revision 1.63 diff -u -r1.63 beans.xml --- beans.xml	9 Dec 2004 03:50:31 -0000	1.63 +++ beans.xml	9 Dec 2004 10:55:32 -0000 @@ -2496,7 +2496,7 @@ specified by setting the \args\ property.\ \  -   \ +   \ \Importing Bean Definitions from One File Into Another\  \It's often useful to split up container defintions into multiple XML  Fix for problem 2: RCS file: /cvsroot/springframework/spring/build.xml,v retrieving revision 1.94 diff -u -r1.94 build.xml --- build.xml	5 Dec 2004 23:44:33 -0000	1.94 +++ build.xml	9 Dec 2004 11:08:47 -0000 @@ -798,7 +798,7 @@ \ \  -           +                                                                    --- No further details from [SPR-533](https://jira.spring.io/browse/SPR-533?redirect=false)","closed","type: bug,","spring-projects-issues","2004-12-08T21:11:06Z","2004-12-08T22:04:09Z"
"","5170","Validation doco. patch [SPR-441]","**[Tim Nolan](https://jira.spring.io/secure/ViewProfile.jspa?name=katentim)** opened **[SPR-441](https://jira.spring.io/browse/SPR-441?redirect=false)** and commented  RCS file: /cvsroot/springframework/spring/docs/reference/src/validation.xml,v retrieving revision 1.11 diff -u -r1.11 validation.xml --- validation.xml	31 Oct 2004 19:04:01 -0000	1.11 +++ validation.xml	2 Nov 2004 03:53:29 -0000 @@ -60,7 +60,7 @@ \One quite important concept of the beans package is the \BeanWrapper\ interface and its corresponding implementation (\BeanWrapperImpl\). As quoted from the - JavaDoc, the BeanWrapper offers functionnality to set and get property  + JavaDoc, the BeanWrapper offers functionality to set and get property   values (individually or in bulk), get property descriptors and query the   readability and writability of properties. Also, the BeanWrapper offers   support for nested properties, enabling the setting of properties on   @@ -93,7 +93,7 @@   \   \  -           +                                                       @@ -292,7 +292,7 @@ \\CustomDateEditor\\      Customizable property editor for java.util.Date,  -         supporting a custom DateFormat. NOT registerd by default. Must  +           supporting a custom DateFormat. NOT registered by default. Must         be user registered as needed with appropriate format.         @@ -356,7 +356,7 @@ \\StringTrimmedEditor\\      Property editor that trims Strings. Optionally allows  -         transforming an empty string into a null value. NOT registerd  +           transforming an empty string into a null value. NOT registered         by default. Must be user registered as needed.           --- No further details from [SPR-441](https://jira.spring.io/browse/SPR-441?redirect=false)","closed","type: enhancement,","spring-projects-issues","2004-11-01T14:35:32Z","2004-11-09T01:13:58Z"
"","5151","Beans Documentation Patch [SPR-421]","**[Tim Nolan](https://jira.spring.io/secure/ViewProfile.jspa?name=katentim)** opened **[SPR-421](https://jira.spring.io/browse/SPR-421?redirect=false)** and commented  Fix for spelling and small grammatical errors.  RCS file: /cvsroot/springframework/spring/docs/reference/src/beans.xml,v retrieving revision 1.56 diff -u -r1.56 beans.xml --- beans.xml	20 Oct 2004 12:35:59 -0000	1.56 +++ beans.xml	24 Oct 2004 10:42:32 -0000 @@ -158,7 +158,7 @@ \\      The concepts listed above directly translate to a set of elements  -         the bean definition consists of. Some of these element groups are are  +         the bean definition consists of. Some of these element groups are       listed below, along with a link to further documentation about each of       them.            Bean definition explanation  @@ -323,7 +323,7 @@  \Bean creation via instance factory method\      Quite similar to using a static factory method to create a bean,  -         is the the use of an instance (non-static) factory method, where a  +         is the use of an instance (non-static) factory method, where a       factory method of an existing bean from the factory is called to       create the new bean.  @@ -413,7 +413,7 @@ class=""examples.ExampleBeanTwo"" singleton=""true""/>\\      Note: when deploying a bean in the prototype mode, the lifecycle  -         of the bean changes slightly. By definition, Spring can not manage the  +         of the bean changes slightly. By definition, Spring cannot manage the       complete lifecycle of a non-singleton/prototype bean, since after it is       created, it is given to the client and the container does not keep track       of it at all any longer. You can think of Spring's role when talking  @@ -471,13 +471,13 @@ calling a static factory method with specific arguments, to construct the bean, can be considered almost equivalent, and the rest of this text will consider arguments to a constructor and  ---      arguments to a static factory method similarily. Although Spring  +         arguments to a static factory method similarly. Although Spring       generally advocates usage of setter-based dependency injection for       most situations, it does fully support the constructor-based       approach as well, since you may wish to use it with pre-existing       beans which provide only multi-argument constructors, and no       setters. Additionally, for simpler beans, some people prefer the  -         constructor approach as a means of ensuring beans can not be  +             constructor approach as a means of ensuring beans cannot be           constructed in an invalid state.                  @@ -492,7 +492,7 @@ from one format to another. The actual values being passed around are done in the form of \PropertyValue\ objects. However, most users of Spring will not be dealing with these classes directly  ---      (i.e. programatically), but rather with an XML definition file which  +         (i.e. programmatically), but rather with an XML definition file which       will be converted internally into instances of these classes, and used       to load an entire BeanFactory or ApplicationContext.  @@ -567,7 +567,7 @@             You can generally trust Spring to do the right thing. It  -         will pick up configuraton issues, including references to  +         will pick up configuration issues, including references to       non-existent beans and circular dependencies, at BeanFactory       load-time. It will actually set properties and resolve       dependencies (i.e. create those dependencies if needed) as late as  @@ -583,7 +583,7 @@ you find out about configuration issues when the ApplicationContext is created, not later. If you wish, you can still override this default behavior and set any of these  ---      singleton beans to lazy-load (not be preinstantiated).  +             singleton beans to lazy-load (not be pre-instantiated).                  @@ -591,7 +591,7 @@      First, an example of using the BeanFactory for setter-based     dependency injection. Below is a small part of an  -         XmlBeanFactory config file specifying some bean  +         XmlBeanFactory configuration file specifying some bean       definitions. Following is the code for the actual main bean itself,       showing the appropriate setters declared. <bean id=""exampleBean"" class=""examples.ExampleBean"">    <property name=""beanOne""><ref bean=""anotherExampleBean""/></property>   @@ -750,7 +750,7 @@   \As mentioned in the previous section, bean properties and   constructor arguments can be defined as either references to other   managed beans (collaborators), or values defined inline. The  -         XmlBeanFactory supports a number of subelement types  +         XmlBeanFactory supports a number of sub-element types       within its property and       constructor-arg elements for this purpose.  @@ -863,7 +863,7 @@ <property name=""targetName""> <value>theTargetBean</value> </property> -</bean>\The main reason the first form is preferrable to +</bean>\The main reason the first form is preferable to the second is that using the \idref\ tag will allow Spring to validate at deployment time that the other bean actually exists. In the second variation, the class who's @@ -917,7 +917,7 @@ attribute allows a reference to be created to a bean which is in a parent BeanFactory (or ApplicationContext) of the current BeanFactory (or ApplicationContext). The value of the \parent\  ---      attribute may be ther same as either the id attribute  +         attribute may be the same as either the id attribute       of the target bean, or one of the values in the name       attribute of the target bean, and the target bean must be in a parent       BeanFactory or ApplicationContext to the current one. The main use of  @@ -949,7 +949,7 @@ implementing\ BeanFactoryAware\, and use programmatic means (as described \here\) to ask the container via a \getBean(""B"")\ call for (a new)  ---      bean B every time it needs it. This is generally not a desireable  +         bean B every time it needs it. This is generally not a desirable       solution since the bean code is then aware of and coupled to       Spring.  @@ -979,7 +979,7 @@ existing implementation. In the XmlBeanFactory case, you instruct Spring to inject/override this method to return a particular bean from the container, by using the \lookup-method\ element  ---      inside the bean definition. For example:<!-- a stateful bean deployed as a protype (non-singleton) -->  +         inside the bean definition. For example:<!-- a stateful bean deployed as a protoype (non-singleton) -->  <bean id=""singleShotHelper class=""..."" singleton=""false""> </bean>  @@ -1032,7 +1032,7 @@ \A class implementing the \org.springframework.beans.factory.support.MethodReplacer\ interface is needed to provide the new method  ---      defintion./** meant to be used to override the existing computeValue  +         definition./** meant to be used to override the existing computeValue    implementation in MyValueCalculator */   public class ReplacementComputeValue implements MethodReplacer {  @@ -1055,9 +1055,9 @@ </bean>\One or more contained \arg-type\ elements within the \replaced-method\ element may be used to indicate the  ---      method signature of the method being overriden. Note that the  +         method signature of the method being overridden. Note that the       signature for the arguments is actually only needed in the case that  -         the method is actually overloaded and there are mutliple variants  +         the method is actually overloaded and there are multiple variants       within the class. For convenience, the type string for an argument may       be a substring of the fully qualified type name. For example, all the       following would match  @@ -1091,7 +1091,7 @@ force one or more beans to be initialized before the bean using this element is initialized.\  -         Following is an example config:<bean id=""beanOne"" class=""ExampleBean"" depends-on=""manager"">  +         Following is an example configuration:<bean id=""beanOne"" class=""ExampleBean"" depends-on=""manager"">    <property name=""manager""><ref local=""manager""/></property>   </bean>  @@ -1319,7 +1319,7 @@      Note: generally, the use of the     InitializingBean marker interface can be avoided  -         (and is discouraged since it unecessarily couples the code to Spring).  +         (and is discouraged since it unnecessarily couples the code to Spring).       A bean definition provides support for a generic initialization method       to be specified. In the case of the XmlBeanFactory, this is done via       the init-method attribute. For example, the  @@ -1358,7 +1358,7 @@      Note: generally, the use of the     DisposableBean marker interface can be avoided (and  -         is discouraged since it unecessarily couples the code to Spring). A  +         is discouraged since it unnecessarily couples the code to Spring). A       bean definition provides support for a generic destroy method to be       specified. In the case of the XmlBeanFactory, this is done via the       destroy-method attribute. For example, the  @@ -1380,7 +1380,7 @@      Important note: when deploying a bean in the prototype     mode, the lifecycle of the bean changes slightly. By definition,  -         Spring can not manage the complete lifecycle of a  +         Spring cannot manage the complete lifecycle of a       non-singleton/prototype bean, since after it is created, it is given       to the client and the container does not keep track of it at all any       longer. You can think of Spring's role when talking about a  @@ -1533,9 +1533,9 @@ <!-- age should inherit value of 1 from parent --> </bean>\\  - \the parent bean can not get instantiated on its own since it is  + \the parent bean cannot get instantiated on its own since it is   incomplete, and it's also considered abstract. When a definition is  - considered abstract like this (explicitely or implicitly), it's usable  + considered abstract like this (explicitly or implicitly), it's usable   just as a pure template or abstract bean definition that will serve as   parent definition for child definitions. Trying to use such an abstract   parent bean on its own (by referring to it as a ref property of another   @@ -1586,7 +1586,7 @@   returned. A \BeansException\ will be thrown when   either the bean could not be found (in which case it'll be a   \NoSuchBeanDefinitionException\), or an exception  -         occured while instantiating and preparing the bean  +              occurred while instantiating and preparing the bean                             @@ -1638,7 +1638,7 @@ instance that is created by the BeanFactory, the post-processor will get a callback from the BeanFactory before any initialization methods (\afterPropertiesSet\ and any declared init method) are - called, and also afterwards.The post-processor is free to do what it  + called, and also afterwards. The post-processor is free to do what it   wishes with the bean, including ignoring the callback completely. A bean   post-processor will typically check for marker interfaces, or do something   such as wrap a bean with a proxy. Some Spring helper classes are   @@ -1653,7 +1653,7 @@   done other than deploying the post-processor in a similar fashion to any   other bean. On the other hand, when using plain BeanFactories, bean   post-processors have to manually be \explicitly\  - registerd, with a code sequence such as the following:\ConfigurableBeanFactory bf = new .....;     // create BeanFactory  + registered, with a code sequence such as the following:\ConfigurableBeanFactory bf = new .....;     // create BeanFactory   ...                       // now register some beans   // now register any needed BeanPostProcessors   MyBeanPostProcessor pp = new MyBeanPostProcessor();   @@ -1917,7 +1917,7 @@   \\String getMessage (String code, Object[] args,   Locale loc)\: essentially the same as the previous   method, but with one difference: no default message can be  -         specified; if the message can not be found, a  +           specified; if the message cannot be found, a         NoSuchMessageException is thrown.         @@ -1933,9 +1933,9 @@ \When an ApplicationContext gets loaded, it automatically searches for a MessageSource bean defined in the context. The bean has to have the name \messageSource\. If such a bean is found, all  ---      calls to the methods desribed above will be delegated to the message  +         calls to the methods described above will be delegated to the message       source that was found. If no message source was found, the  -         ApplicationContext inspects attempts to see if it has a parent  +         ApplicationContext attempts to see if it has a parent       containing a bean with the same name. If so, it uses that bean as the       MessageSource. If it can't find any source for messages, an empty       StaticMessageSource will be instantiated in order to  @@ -2155,7 +2155,7 @@ Based upon that String, Spring will automatically choose the right Resource implementation for you. When asking an ApplicationContext for a resource first of all Spring will inspect the resource location you're  ---      specifying and look for any prefixes. Depending on the implenentation of  +         specifying and look for any prefixes. Depending on the implementation of       the ApplicationContext more or less Resource implementations are       available. Resources can best be configured by using the ResourceEditor       and for example the XmlBeanFactory.  @@ -2248,7 +2248,7 @@ may be used to conveniently add support for additional PropertyEditors to an ApplicationContext.\  - \Consier a user class \ExoticType\, and another  + \Consider a user class \ExoticType\, and another   class \DependsOnExoticType\ which needs ExoticType set   as a property:\public class ExoticType {   private String name;   @@ -2343,7 +2343,7 @@   methods, MethodInvokingFactoryBean by default operates in a   \singleton\ fashion. The first request by the container   for the factory to produce an object will cause the specified method  - invocation, whose return value will cached and returned for the current  + invocation, whose return value will be cached and returned for the current   and subsequent requests. An internal \singleton\ property   of the factory may be set to false, to cause it to invoke the target   method each time it is asked for an object.\   @@ -2446,7 +2446,7 @@   web-apps at the top of the hierarchy, it is problematic to create an   ApplicationContext for each web-app which consists of mostly identical   bean definitions from lower layers, as there may be issues due to  - increased memory usage, issues with creating mutliple copies of beans  + increased memory usage, issues with creating multiple copies of beans   which take a long time to initialize (i.e. a Hibernate SessionFactory),   and possible issues due to side-effects. As an alternative, classes such   as \","closed","type: enhancement,","spring-projects-issues","2004-10-23T22:30:14Z","2019-01-13T22:53:32Z"
"","5134","Ambiguous constructor auto-wiring and inconsistent behaviour [SPR-404]","**[Tim Nolan](https://jira.spring.io/secure/ViewProfile.jspa?name=katentim)** opened **[SPR-404](https://jira.spring.io/browse/SPR-404?redirect=false)** and commented  This is actually two reports in one - packaged together for simplicity. Attached are some tests which are explained below:  Test support beans to go in package org.springframework.beans: SingleSimpleTypeConstructorBean DoubleBooleanConstructorBean  testAmbiguousAutowireFails This is the main test that demonstrates the ambigous matching. I know explicit dependencies override auto-wiring, but this behaviour is in conflict with explicit constructor arguments that must define an index. I haven't instructed Spring which argument I want resolved explicitly, and which by auto-wiring.  testConstructorArgWithSingleSimpleTypeMatch This is really an improvement, but a simple one to handle. No ambiguities. Please compare with testConstructorArgWithSingleMatch - why should this test work and not mine?  testConstructorArgWithSingleSimpleTypeMatch2 This is a slightly more complicated example than the one above, but covers the case where there is only one simple type to match amongst other arguments which can be resolved.   ---  **Attachments:** - [Spring-tests.tar.gz](https://jira.spring.io/secure/attachment/10288/Spring-tests.tar.gz) (_1.23 kB_)","closed","in: core,","spring-projects-issues","2004-10-16T12:29:07Z","2019-01-12T16:42:09Z"
"","5133","Spring-beans.dtd - misleading comments [SPR-403]","**[Tim Nolan](https://jira.spring.io/secure/ViewProfile.jspa?name=katentim)** opened **[SPR-403](https://jira.spring.io/browse/SPR-403?redirect=false)** and commented  Spring constructor-arg comments state:  ""NOTE: it is highly recommended to use the index attribute, in Spring up to and including 1.1. The constructor matcher is extremely greedy in matching args without an index, to the point of duplicating supplied args to fill in unspecified constructor args, if they are compatible (i.e. one single String arg will match a constructor with two String args, etc.). The matcher should be less agressive in a future version.""  This doesn't appear to be the case. This only occurs with autowiring. Here's a test case demonstating that a supplied argument isn't duplicated:  \ \\true\\ \ public class Test { public Test(Boolean b, Boolean b2) { System.out.println(""b='"" + b + ""'""); System.out.println(""b2='"" + b2 + ""'""); } }   --- No further details from [SPR-403](https://jira.spring.io/browse/SPR-403?redirect=false)","closed","in: core,","spring-projects-issues","2004-10-16T11:28:20Z","2004-10-18T23:51:09Z"
"","5131","Constructor Arg doco. contribution [SPR-401]","**[Tim Nolan](https://jira.spring.io/secure/ViewProfile.jspa?name=katentim)** opened **[SPR-401](https://jira.spring.io/browse/SPR-401?redirect=false)** and commented  Here's some documentation for the reference manual which I think is pretty important in terms of content. Cheers.  RCS file: /cvsroot/springframework/spring/docs/reference/src/beans.xml,v retrieving revision 1.51 diff -r1.51 beans.xml 696a697,744  > \ >  >> \Constructor Argument Resolution\ >> \Constructor argument resolution uses autowiring by default, matching on the >> argument's type. When another bean is referenced, the type is known, and autowiring >> can occur. When a simple type is used, such as \<value>true<value>\, >> Spring cannot determine the type of the value, and so cannot match by type without help. >> Consider the following class, which is used for the following two sections: >> \package examples;  public class ExampleBean {      private int years;             //No. of years to the calculate the Ultimate Answer     private String ultimateAnswer; //The Answer to Life, the Universe, and Everything          public ExampleBean(int years, String ultimateAnswer) {         this.years = years;         this.ultimateAnswer = ultimateAnswer;     }  }\\ \  \Constructor Argument Autowiring\ \The above scenario \can\ use autowiring with simple types by explicitly specifying the type of the constructor argument using the \type\ attribute. For example: \<bean id=""exampleBean"" class=""examples.ExampleBean""> <constructor-arg type=""int""><value>7500000</value></constructor-arg> <constructor-arg type=""java.lang.String""><value>42</value></constructor-arg> </bean> \ \ \ \ \Constructor Argument Index\ \Constructor arguments can have their index specified explicitly by use of the \index\ attribute. For example: \<bean id=""exampleBean"" class=""examples.ExampleBean""> <constructor-arg index=""0""><value>7500000</value></constructor-arg> <constructor-arg index=""1""><value>42</value></constructor-arg> </bean> \ As well as solving the ambiguity problem of multiple simple values, specifying an index also solves the problem of ambiguity where a constructor may have two arguments of the same type. Note that the \index is 0 based\. \ \Specifying a constructor argument index is the preferred way of performing constructor IoC.\ \ \  ---  **Attachments:** - [patch.txt](https://jira.spring.io/secure/attachment/10287/patch.txt) (_2.68 kB_) - [patch.txt](https://jira.spring.io/secure/attachment/10286/patch.txt) (_2.70 kB_)","closed","type: enhancement,","spring-projects-issues","2004-10-16T00:17:45Z","2019-01-13T22:53:38Z"
"","5124","Doco errors (beans.xml) [SPR-394]","**[Tim Nolan](https://jira.spring.io/secure/ViewProfile.jspa?name=katentim)** opened **[SPR-394](https://jira.spring.io/browse/SPR-394?redirect=false)** and commented  Code and spelling error.  RCS file: /cvsroot/springframework/spring/docs/reference/src/beans.xml,v retrieving revision 1.51 diff -r1.51 beans.xml 675c675 <     public static ExampleBean ExampleBean(AnotherBean anotherBean, —  > public static ExampleBean createInstance(AnotherBean anotherBean,  686c686 <       constructor had actually been used. These areguments are optional. Also, —  > constructor had actually been used. These arguments are optional. Also,    --- No further details from [SPR-394](https://jira.spring.io/browse/SPR-394?redirect=false)","closed","type: bug,","spring-projects-issues","2004-10-13T23:13:38Z","2004-10-19T00:04:07Z"
"","5115","Update Taglib documentation [SPR-385]","**[Tim Nolan](https://jira.spring.io/secure/ViewProfile.jspa?name=katentim)** opened **[SPR-385](https://jira.spring.io/browse/SPR-385?redirect=false)** and commented  Hi, this was posted to the developers list, but didn't seem to generate much interest (that's OK, documentation can be boring) - apologies if you are currently considering its use. I'm still keen to progress it if you are happy to go ahead...It needs polishing, and I am happy to alter it to incorporate existing documentation, and add missing documentation. Just let me know.  I've written an XSL stylesheet (and Ant target) which transforms the spring.tld file into a HTML frameset with menu. Un-pack the source and just run Ant. This generates menu.html and content.html which are the source pages of the frameset.  I thought this would achieve a couple of things: - Documentation is as up-to-date as the TLD - Documentation is sourced from TLD and XSL (and links to Javadocs) - Benefits of XSL (e.g. consistent and easy to change layout for all tags)  Extra tag comments can be added to the XSL file, but it should be more maintainable overall. See ""transformTag"" template of content.xsl for a sample. Much of this documentation can be moved to the TLD according to the TLD DTD (e.g. add ""attribute"" and ""variable"" descriptions). This is the best place for the documentation, as long as there isn't so much that file size becomes a concern. In that case the documentation can be moved to the style sheet.   ---  **Attachments:** - [spring-tld-doc.tar.gz](https://jira.spring.io/secure/attachment/10284/spring-tld-doc.tar.gz) (_6.36 kB_)","closed","type: enhancement,","spring-projects-issues","2004-10-08T22:42:59Z","2012-06-19T03:54:06Z"
"","5069","Default access class [SPR-339]","**[Tim Nolan](https://jira.spring.io/secure/ViewProfile.jspa?name=katentim)** opened **[SPR-339](https://jira.spring.io/browse/SPR-339?redirect=false)** and commented  Currently if you have default package access for a class (i.e. no class modifier), you can't instantiate it in Spring for general use. Can fix with following:  cvsroot/springframework/spring/src/org/springframework/beans/BeanUtils.java V1.22  Change line 68: if (!Modifier.isPublic(constructor.getModifiers())) { to if (!Modifier.isPublic(constructor.getDeclaringClass().getModifiers()) || !Modifier.isPublic(constructor.getModifiers())) {  There are probably other areas that have similar issues. Am currently looking at how to run non-public init methods.   --- No further details from [SPR-339](https://jira.spring.io/browse/SPR-339?redirect=false)","closed","type: enhancement,","spring-projects-issues","2004-09-20T16:00:03Z","2004-09-23T00:56:30Z"
"","5019","Can't proxy first prototype instance [SPR-288]","**[Tim Nolan](https://jira.spring.io/secure/ViewProfile.jspa?name=katentim)** opened **[SPR-288](https://jira.spring.io/browse/SPR-288?redirect=false)** and commented  If you have a target Bean with singleton=""false"" and ProxyFactoryBean as the proxy (regardless in sigleton property is true or false), you can't proxy the first instance.  It appears the first instance is made before a request for it is even made from the context. If it is a prototype, shouldn't creation be deferred until it is requested from the context.   ---  **Affects:** 1.1 RC2  **Attachments:** - [prototypeProxy.tar.gz](https://jira.spring.io/secure/attachment/10199/prototypeProxy.tar.gz) (_2.25 kB_) - [prototypeProxy.zip](https://jira.spring.io/secure/attachment/10190/prototypeProxy.zip) (_7.75 kB_)","closed","in: core,","spring-projects-issues","2004-08-25T23:58:35Z","2004-09-03T04:53:35Z"
"","4996","Countries sample in CVS not building [SPR-265]","**[Tim Nolan](https://jira.spring.io/secure/ViewProfile.jspa?name=katentim)** opened **[SPR-265](https://jira.spring.io/browse/SPR-265?redirect=false)** and commented  Can't build countries sample: BUILD FAILED C:\java\spring-framework-1.1\samples\countries\build.xml:113: No source files and no packages have been specified.  These (packagenames=""*"" private=""true"") seem to have disappeared from javadoc task in: /cvsroot/springframework/spring/samples/countries/build.xml Version: 1.14   --- No further details from [SPR-265](https://jira.spring.io/browse/SPR-265?redirect=false)","closed","type: bug,","spring-projects-issues","2004-08-13T18:10:12Z","2004-08-13T19:16:31Z"
"","4995","log4j.properties samples - error message in Tomcat [SPR-264]","**[Tim Nolan](https://jira.spring.io/secure/ViewProfile.jspa?name=katentim)** opened **[SPR-264](https://jira.spring.io/browse/SPR-264?redirect=false)** and commented  The samples JPetstore and Countries use a log4j file called log4j.properties in the class path, which is loaded by default by log4j. This initially shows an error in Tomcat because it cannot resolve references to the log file that includes a reference to the to the webAppRootKey, e.g.: ${countries.root}/WEB-INF/countries.log  This gives an error such as: INFO: Installing web application at context path /jpetstore from URL file:c:/java/jakarta-tomcat-5.0.27/webapps/jpetstore log4j:ERROR setFile(null,true) call failed. java.io.FileNotFoundException: \WEB-INF\petstore.log (The system cannot find the path specified) (NB to see this set logging to INFO)  While the log still works (as spring the resets the system property), it doesn't seem to be the right approach. I've a suggestion below, but if you decide to stick to the above approach, maybe a note can be added to the manual.  I have fixed this in my applications by using a name like log4j.props. Having done this I get errors about no appenders for org.apache.catalina.session.ManagerBase. Not sure how serious this is.  NB: Just a suggestion for the manual because I know you guys are big on testing which is great. When wanting to see logs when running in Ant-JUnit test run you need to set properties such as: \ \ where: target.war.classes=target/war/WEB-INF/classes target.war.dir=target/war  Cheers.   ---  **Affects:** 1.1 RC1","closed","type: enhancement,","spring-projects-issues","2004-08-13T18:00:03Z","2004-08-18T07:00:55Z"
"","4971","HibernateTemplate find method signature issue [SPR-240]","**[Tim Nolan](https://jira.spring.io/secure/ViewProfile.jspa?name=katentim)** opened **[SPR-240](https://jira.spring.io/browse/SPR-240?redirect=false)** and commented  The new 1.1-RC1 HibernateTemplate find methods seem to have highlighted  some inconsistencies with normal hibernate Session queries, and made some a valid scenario uncompileable.  The following code which compiled in 1.0.2: List empList = getHibernateTemplate().find(query, username, Hibernate.STRING);  now has a compile error: src\java\org\timnolan\springsample\dao\hibernate\EmployeeDAOImpl.java:37: reference to find is ambiguous, both method find(java.lang.String,java.lang.Object,net.sf.hibernate.type.Type) in org.springframework.orm.hibernate.HibernateTemplate and method find(java.lang.String,java.lang.String,java.lang.Object) in org.springframework.orm.hibernate.HibernateTemplate match List empList = getHibernateTemplate().find(query, username, Hibernate.STRING);   ---  **Affects:** 1.1 RC1","closed","type: bug,","spring-projects-issues","2004-08-02T23:42:22Z","2004-08-03T01:44:50Z"
"","4962","EventPublicationInterceptor test failing [SPR-231]","**[Tim Nolan](https://jira.spring.io/secure/ViewProfile.jspa?name=katentim)** opened **[SPR-231](https://jira.spring.io/browse/SPR-231?redirect=false)** and commented  org.springframework.context.event.EventPublicationInterceptor V1.5  This is causing it's corresponing unit test to fail: org.springframework.context.EventPublicationInterceptorTests  Throwing the exception has been deferred until afterPropertiesSet method. Not sure whether class or test needs fixing. Would normally like to throw Exceptions as soon as possible. In either case a runtime Exception should probably be documented in the Javadoc.  PS - Apologies if you're in the process of checking in, but I do re-check CVS after a half hour or so before adding a bug. Keep up the good work - Spring is fantastic. I hope I'm helping.  Test details below: testWithIncorrectRequiredProperties  Should have thrown IllegalStateException  junit.framework.AssertionFailedError: Should have thrown IllegalStateException at org.springframework.context.EventPublicationInterceptorTests.testWithIncorrectRequiredProperties(EventPublicationInterceptorTests.java:41) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)    ---  **Affects:** 1.0.2","closed","in: core,","spring-projects-issues","2004-07-24T00:48:20Z","2004-07-24T05:16:21Z"
"","4958","Broken Build - JmsTemplate Tests [SPR-227]","**[Tim Nolan](https://jira.spring.io/secure/ViewProfile.jspa?name=katentim)** opened **[SPR-227](https://jira.spring.io/browse/SPR-227?redirect=false)** and commented  JmsTemplate102Tests (V1.7) & JmsTemplate11Tests (V1.7) appear to be missing imports or in the wrong package.  Missing imports JmsTemplate102Tests: import org.springframework.jms.core.DefaultJmsAdmin; import org.springframework.jms.core.JmsTemplate; import org.springframework.jms.core.JmsTemplate102; import org.springframework.jms.core.MessageCreator; import org.springframework.jms.core.ProducerCallback; import org.springframework.jms.core.SessionCallback;  JmsTemplate11Tests import org.springframework.jms.core.DefaultJmsAdmin; import org.springframework.jms.core.JmsTemplate; import org.springframework.jms.core.JmsTemplate11; import org.springframework.jms.core.MessageCreator; import org.springframework.jms.core.ProducerCallback; import org.springframework.jms.core.SessionCallback;   ---  **Affects:** 1.1 RC1","closed","type: bug,","spring-projects-issues","2004-07-19T23:33:39Z","2004-07-21T22:22:42Z"
"","4940","More tags: Javascript Escape [SPR-209]","**[Tim Nolan](https://jira.spring.io/secure/ViewProfile.jspa?name=katentim)** opened **[SPR-209](https://jira.spring.io/browse/SPR-209?redirect=false)*** and commented  Attached is some code for some new tags. (I try to avoid tags but these would be useful I think). I'm really checking for initial thoughts. If this is OK I can add comments, possibly improve tests and possibly move Javascript escape code into a utility class. I can also add some documentation. Used http://devedge.netscape.com/library/manuals/2000/javascript/1.5/guide/ident.html#1011693 as my guide.  Below is a description and sample of usage:  htmlUnescape - To unencode HTML special characters javascriptEscape - to escape a string for use in Javascript  Sample below shows a common usage of Javascript to display a window status. Another example would to allow presentation to swap between HTML and Javascript messages (alerts) safely without affecting business logic.      jsName='';     Edit  Any thoughts on i18n problems?  Cheers.   ---  **Attachments:** - [tags.tar.gz](https://jira.spring.io/secure/attachment/10200/tags.tar.gz) (_1.89 kB_) - [tags.zip](https://jira.spring.io/secure/attachment/10131/tags.zip) (_4.67 kB_)","closed","type: enhancement,","spring-projects-issues","2004-07-08T23:25:51Z","2019-01-11T13:28:59Z"
"","4935","docpdf target broken [SPR-204]","**[Tim Nolan](https://jira.spring.io/secure/ViewProfile.jspa?name=katentim)** opened **[SPR-204](https://jira.spring.io/browse/SPR-204?redirect=false)** and commented  ant ""docpdf"" target is broken.  The beans.xml document has two id=""beans-factory-placeholderconfigurer"" entries.  docs\reference\src\beans.xml (V 1.38)  Cheers.  PS - I couldn't specify this as an unreleased version. PPS - There are also several other non-fatal erros and warnings:  [java] Error: no ID for constraint linkend: beans-factory-collaborators-propertyeditor. [java] Error: no ID for constraint linkend: beans-factory-postprocessor. [java] XRef to nonexistent id: beans-factory-postprocessor [java] Error: no ID for constraint linkend: beans-factoryimpl-xml. [java] XRef to nonexistent id: beans-factoryimpl-xml [java] Error: no ID for constraint linkend: beans-factory-customizing-factory-postprocessor. [java] Warning: multiple ""IDs"" for constraint linkend: beans-factory-placeholderconfigurer.   --- No further details from [SPR-204](https://jira.spring.io/browse/SPR-204?redirect=false)","closed","type: bug,","spring-projects-issues","2004-07-02T22:33:42Z","2004-07-06T23:25:59Z"
"","4916","RequestUtilsTestSuite - more coverage [SPR-184]","**[Tim Nolan](https://jira.spring.io/secure/ViewProfile.jspa?name=katentim)** opened **[SPR-184](https://jira.spring.io/browse/SPR-184?redirect=false)** and commented  Just had adding some more test coverage.   ---  **Affects:** 1.0.2  **Attachments:** - [RequestUtilsTestSuite.java](https://jira.spring.io/secure/attachment/10115/RequestUtilsTestSuite.java) (_8.30 kB_)","closed","type: task,","spring-projects-issues","2004-06-24T00:35:46Z","2004-06-24T08:55:49Z"
"","4913","spring:bind without the Errors instance [SPR-181]","**[Tim Nolan](https://jira.spring.io/secure/ViewProfile.jspa?name=katentim)** opened **[SPR-181](https://jira.spring.io/browse/SPR-181?redirect=false)** and commented  Summarised in thread: http://sourceforge.net/mailarchive/message.php?msg_id=8748282  It would be very useful to have a success view of a different form (than the one just submitted). However, the form requires spring:bind tags which requires an Errors instance.  Given that all the model data is available, a developer should be able to display a form.  Sorry, no patch code this time. I'm hoping there's a way to achieve this that I haven't discovered. Will look into it, but thought I should get a developers response.  Cheers.   ---  **Affects:** 1.0.2","closed","type: enhancement,","spring-projects-issues","2004-06-22T15:35:03Z","2004-07-25T19:23:45Z"
"","4893","ValidationUtils - add method to check for only whitespace [SPR-161]","**[Tim Nolan](https://jira.spring.io/secure/ViewProfile.jspa?name=katentim)** opened **[SPR-161](https://jira.spring.io/browse/SPR-161?redirect=false)** and commented  Motivation It would be useful to extend ValidatorUtils to reject fields if they contain only whitespace. I've also included some tests for this class.  PS - It would be nice to add a feature to trim whitespace of submitted data. Not sure where this would be best done. Didn't want to add another method to ValidationUtils rejecting values for leading/trailing whitespace though. Put this on developer mailing list?  PPS - Can't see ""attach file"" option so will paste code in here. There are 3 bits of code. File, version and line numbers (of existing file) are included.  Cheers.  src/org/springframework/validation/ValidationUtils.java VERS: 1.6 Line: 78 (at EOF) /** * Reject the given field with the given error code and message * if the value is empty or only whitespace. * `@param` errors Errors instance containing bound fields * `@param` field field name to check * `@param` errorCode to reject with * `@param` defaultMessage to reject with   */   public static void rejectIfEmptyOrWhitespace(Errors errors, String field, String errorCode, String defaultMessage) {   Object value = errors.getFieldValue(field);   if (value == null || value.toString().length() == 0 || isWhitespace(value.toString())) {   errors.rejectValue(field, errorCode, defaultMessage);   }   }  static boolean isWhitespace(String s) { for (int i=0; i < s.length(); i++) { if (!Character.isWhitespace(s.charAt(i))) { return false; } } return true; }  test/org/springframework/validation/ValidationTestSuite.java VERS: 1.16 Line 456 public void testValidationUtilsEmpty() throws Exception { //Test null TestBean tb = new TestBean(); Errors errors = new BindException(tb, ""tb""); Validator testValidator = new ValidatorUtilsEmptyValidator(); testValidator.validate(tb, errors); assertTrue(errors.hasFieldErrors(""name"")); assertEquals(""EMPTY"", errors.getFieldError(""name"").getCode());        //Test empty String     	tb.setName("""");     	errors = new BindException(tb, ""tb"");     	testValidator.validate(tb, errors);     	assertTrue(errors.hasFieldErrors(""name""));     	assertEquals(""EMPTY"", errors.getFieldError(""name"").getCode());            //Test OK1     	tb.setName(""   "");     	errors = new BindException(tb, ""tb"");     	testValidator.validate(tb, errors);     	assertFalse(errors.hasFieldErrors(""name""));            //Test OK2     	tb.setName(""Roddy"");     	errors = new BindException(tb, ""tb"");     	testValidator.validate(tb, errors);     	assertFalse(errors.hasFieldErrors(""name""));     }          public void testValidationUtilsEmptyOrWhitespace() throws Exception {       //Test null     	TestBean tb = new TestBean();     	Errors errors = new BindException(tb, ""tb"");     	Validator testValidator = new ValidatorUtilsEmptyOrWhitespaceValidator();     	testValidator.validate(tb, errors);     	assertTrue(errors.hasFieldErrors(""name""));     	assertEquals(""EMPTY_OR_WHITESPACE"", errors.getFieldError(""name"").getCode());            //Test empty String     	tb.setName("""");     	errors = new BindException(tb, ""tb"");     	testValidator.validate(tb, errors);     	assertTrue(errors.hasFieldErrors(""name""));     	assertEquals(""EMPTY_OR_WHITESPACE"", errors.getFieldError(""name"").getCode());                 //Test empty String     	tb.setName(""   "");     	errors = new BindException(tb, ""tb"");     	testValidator.validate(tb, errors);     	assertTrue(errors.hasFieldErrors(""name""));     	assertEquals(""EMPTY_OR_WHITESPACE"", errors.getFieldError(""name"").getCode());            //Test OK     	tb.setName(""Roddy"");     	errors = new BindException(tb, ""tb"");     	testValidator.validate(tb, errors);     	assertFalse(errors.hasFieldErrors(""name""));     }  test/org/springframework/validation/ValidationTestSuite.java VERS: 1.16 Line 498 (EOF) private static class ValidatorUtilsEmptyValidator implements Validator {      	public boolean supports(Class clazz) {     		return TestBean.class.isAssignableFrom(clazz);     	}          	public void validate(Object obj, Errors errors) {     		//TestBean tb = (TestBean) obj;     		ValidationUtils.rejectIfEmpty(errors, ""name"", ""EMPTY"", ""You must enter a name!"");     	}     }          private static class ValidatorUtilsEmptyOrWhitespaceValidator implements Validator {          	public boolean supports(Class clazz) {     		return TestBean.class.isAssignableFrom(clazz);     	}          	public void validate(Object obj, Errors errors) {     		//TestBean tb = (TestBean) obj;     	  ValidationUtils.rejectIfEmptyOrWhitespace(errors, ""name"", ""EMPTY_OR_WHITESPACE"", ""You must enter a name!"");     	}     }    ---  **Affects:** 1.0.2  **Attachments:** - [src.zip](https://jira.spring.io/secure/attachment/10110/src.zip) (_5.15 kB_)","closed","type: enhancement,","spring-projects-issues","2004-06-09T17:26:47Z","2004-06-10T21:04:49Z"
"","5868","Ant clover.html target broken [SPR-1166]","**[Tim Nolan](https://jira.spring.io/secure/ViewProfile.jspa?name=katentim)** opened **[SPR-1166](https://jira.spring.io/browse/SPR-1166?redirect=false)** and commented  I get a number of failed tests when running this target.  I can post more details later, but just wanted this on the radar.   --- No further details from [SPR-1166](https://jira.spring.io/browse/SPR-1166?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-07-21T23:11:24Z","2005-07-24T02:54:02Z"
"","5147","Modify SimpleMailMessage to implement equals() and hashCode() [SPR-417]","**[Tim Morrow](https://jira.spring.io/secure/ViewProfile.jspa?name=timmorrow)** opened **[SPR-417](https://jira.spring.io/browse/SPR-417?redirect=false)** and commented  It would be handy if org.springframework.mail.SimpleMailMessage implemented equals() and hashCode() for unit test assertions.  I'm creating this issue because I did this and intend to attach a patch.   ---  **Affects:** 1.1.1  **Attachments:** - [patch.zip](https://jira.spring.io/secure/attachment/10294/patch.zip) (_2.59 kB_)","closed","type: enhancement,","spring-projects-issues","2004-10-22T09:53:58Z","2004-10-23T01:22:53Z"
"","5091","Make the db vendor name and metadata accessible outside SQLErrorCodesFactory for util use [SPR-361]","**[Tim Kettering](https://jira.spring.io/secure/ViewProfile.jspa?name=timster)** opened **[SPR-361](https://jira.spring.io/browse/SPR-361?redirect=false)** and commented  This improvement is filed upon Colin's request in the forums.  http://forum.springframework.org/viewtopic.php?t=1058  here is a paste of my original forum post:  I noticed that Spring is able to obtain the database vendor info from the datasource for it's SQLException handling.  I looked around in the SQLErrorCodesFactory and I see that it calls JdbcUtils to extract the database meta data with a internal implementation of DatabaseMetaDataCallback.  I was looking to use this kind of functionality in my code, and I was wondering if I was missing someting. Is there a method I can call to obtain the database metadata, or do I need to re-implement the code used in the SQLErrorCodesFactory?  I would imagine that this could be a useful feature to have in the jdbc package. (obtaining database information from the datasource)   ---  **Affects:** 1.1 final","closed","type: enhancement,","spring-projects-issues","2004-09-30T06:26:36Z","2004-10-23T05:21:43Z"
"","5722","Can't run multiple-config junit tests from within Eclipse [SPR-1012]","**[Tim Diggins](https://jira.spring.io/secure/ViewProfile.jspa?name=tdiggins)** opened **[SPR-1012](https://jira.spring.io/browse/SPR-1012?redirect=false)** and commented  If you have multiple AbstractDependencyInjectionSpringContextTests which have DIFFERENT configLocations and you run these as part of a single testsuite within Eclipse's junit pane then an arbitrary error and traceback are given. However each AbstractDependencyInjectionSpringContextTests works ok when run on its own.  Furthermore, this is not just a problem with AbstractDependencyInjectionSpringContextTests. Similar problems occur if you embed an ApplicationContext within a regular junit TestCase (although the problem is worse then, because even the same configLocations give errors, because the applicationcontext is not cached.)  Tests run fine when as part of junit ant task (note that this by default does some magic (which I don't understand) with the classloader between testcases/classes...)  More info and sample tracebacks (FWIW) available at: http://forum.springframework.org/viewtopic.php?t=5962   ---  **Affects:** 1.1.5, 1.2 RC1, 1.2 final, 1.2.1","closed","type: bug,","spring-projects-issues","2005-06-04T02:18:18Z","2005-08-03T21:22:34Z"
"","5721","Static factory-method instantiated beans can break type-safety. [SPR-1011]","**[Tim Diggins](https://jira.spring.io/secure/ViewProfile.jspa?name=tdiggins)** opened **[SPR-1011](https://jira.spring.io/browse/SPR-1011?redirect=false)** and commented  1) Problem with static factory methods which create an object not of the same type (or subtype) as the factory.  e.g. given a bean definition:  \  If factory-method M returns an object whose type is NOT a subtype of class T, then Spring does not guess the type of N (based on return type of M) instead it just uses T.  So when you do:  applicationContext.getBeansOfType(T.class)  you retrieve a Map which is NOT of runtime-type Map but actually of type Map -- which is very surprising.  I believe Spring should either:  1) throw an exception when you try to create a bean using static factory-method which is EVIDENTLY not of same type/subtype as factory   class (could even check for this).  or  2) infer the type correctly from the return arguments  or  3) infer a type of ""Object"" if it (for some reason) can't infer the type.  Otherwise, type safety is really broken (in  fact I only discovered this because of a ClassCastException where there should have been none!).  - missing exception on startup? / failure to detect type of bean N based on return type of M. http://forum.springframework.org/viewtopic.php?t=5997   ---  **Attachments:** - [testStaticFactoryMethods.zip](https://jira.spring.io/secure/attachment/10764/testStaticFactoryMethods.zip) (_1.74 kB_)","closed","type: bug,","spring-projects-issues","2005-06-04T02:10:48Z","2005-06-26T19:06:32Z"
"","5720","Static Instance Factory initialised Beans not created. [SPR-1010]","**[Tim Diggins](https://jira.spring.io/secure/ViewProfile.jspa?name=tdiggins)** opened **[SPR-1010](https://jira.spring.io/browse/SPR-1010?redirect=false)** and commented  According to ""3.2.3.3. Bean creation via instance factory method""), beans should be able to be created with an instance factory method and behave as with a default (no-args) constructor, or sepecified constructor.  However, when  you define a bean, say:  \)  then factory-method M is NOT called on startup (unlike for STATIC factory method beans) and ISN'T included when you do getBeansOfType(Object.class) (unlike other beans - constructor-injection, setter-injection, and STATIC factory method beans).  The bean IS available when you do getBean(N) (and the method M only called when bean is requested by Name (each time...))  I have tried this with a return type (for M) of the same type as B and as a range of arbitrary other types...  Either the behaviour is wrong or 3.2.3.3 is wrong (or at least confusing).  Currently at least instance factory-method beans seem to be broken (yet this is true for 1.2.1, 1.2, 1.2RC1 and 1.1.5...  I think I can create a TestCase for this if helpful. (please request)    ---  **Affects:** 1.1.5, 1.2 RC1, 1.2 final, 1.2.1  **Attachments:** - [testInstanceFactoryMethods.zip](https://jira.spring.io/secure/attachment/10763/testInstanceFactoryMethods.zip) (_1.55 kB_) - [testInstanceFactoryMethods.zip](https://jira.spring.io/secure/attachment/10762/testInstanceFactoryMethods.zip) (_1.27 kB_)","closed","type: bug,","spring-projects-issues","2005-06-04T02:01:16Z","2005-06-26T17:55:43Z"
"","5711","Introspection of Enums types for static fields [SPR-1001]","**[Tim Diggins](https://jira.spring.io/secure/ViewProfile.jspa?name=tdiggins)** opened **[SPR-1001](https://jira.spring.io/browse/SPR-1001?redirect=false)** and commented  Currently org.springframework.beans.factory.config.FieldRetrievingFactoryBean doesn't seem to be able to introspect java 1.5 enumerations (for their static members). It would be great if it could...   --- No further details from [SPR-1001](https://jira.spring.io/browse/SPR-1001?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-06-01T10:33:47Z","2005-06-06T23:27:22Z"
"","4896","requiresSession will not work as expected with JAAS [SPR-164]","**[Tim Chen](https://jira.spring.io/secure/ViewProfile.jspa?name=gchen77)** opened **[SPR-164](https://jira.spring.io/browse/SPR-164?redirect=false)** and commented  If you use requiresSession when using JAAS. It will authenticate the user and then allow him to the page regardless. This might just be a side effect of JAAS but makes it hard to maintain a single entry point.  An alternative solution would be something like: set requiresSessionVariable true and then define the variable to check for.  So if you have a homepage that sets the user information then have that be the check instead of a simple request.getSession(false)   ---  **Affects:** 1.0.2","closed","type: enhancement,","spring-projects-issues","2004-06-10T03:15:11Z","2004-06-10T08:56:11Z"
"","4894","Javadocs for AbstractController incorrect [SPR-162]","**[Tim Chen](https://jira.spring.io/secure/ViewProfile.jspa?name=gchen77)** opened **[SPR-162](https://jira.spring.io/browse/SPR-162?redirect=false)** and commented  http://www.springframework.org/docs/api/org/springframework/web/servlet/mvc/AbstractController.html  requiresSession  whether a session should be required for requests to be able to be handled by this controller. This ensures, derived controller can - without fear of Nullpointers - call request.getSession() to retrieve a session. If no session can be found while processing the request, a ServletException will be thrown  That should be requireSession (no s after requires).   ---  **Affects:** 1.0.2","closed","type: bug,","spring-projects-issues","2004-06-10T00:35:20Z","2004-06-10T07:50:44Z"
"","5211","arch: Model usage thru Interceptor/ Controller phases [SPR-482]","**[Thomas Whitmore](https://jira.spring.io/secure/ViewProfile.jspa?name=thomasw)** opened **[SPR-482](https://jira.spring.io/browse/SPR-482?redirect=false)** and commented  Hi Juergen, Rod,  Have now found some number of examples where Model data is ideally supplied pre- the Controller, or pre- the controller's specific workflow methods.  This is an architecture issue and I don't see an easy way to instantiate the Model first up, then allow different phases of the Handler & Controller workflow to contribute into it.  But as my analysis goes, there are a good number of valid usecases where this would be correct; both in theory and practice.  From the current design the solution I could see, would be merging of Models from different phases. From a clean-slate design the solution would be to pass an initially empty Model into the handler chain and let all phases contribute.  Anyway, examples of this usage: - templated Logon Box handler; must change logon state before further handling, but model only accessible post handling - pre-success Pseudo-Validation in form controller  eg: 1) the general category of Templated features with State-Change behaviour; eg implemented as handler interceptors 2) the general category of behaviours which involve both Pre-Workflow and Result Messages; eg pseudo-validation  This is a tricky one, guys. I really can't see a perfectly clean solution or one which is highly compatible with existing code. But it does appear to be a valid design point.  Maybe for the Spring 2 architecture.  Cheers, Thomas   --- No further details from [SPR-482](https://jira.spring.io/browse/SPR-482?redirect=false)","closed","type: enhancement,","spring-projects-issues","2004-11-23T15:11:43Z","2012-06-19T09:37:25Z"
"","5205","Wizard Controller not calling processFinish() [SPR-476]","**[Thomas Whitmore](https://jira.spring.io/secure/ViewProfile.jspa?name=thomasw)** opened **[SPR-476](https://jira.spring.io/browse/SPR-476?redirect=false)** and commented  Hi Juergen, people,  I've got some post-processing (DB storage, emails etc) overriding the processFinish() method of AbstractWizardFormController.  While this has been executed several times, it now seems to be being bypassed. validatePage() is being called but I thought my 'success case' post-processing would be cleaner over in processFinish().  The on-finish view is being returned to the browser, yet the only reference to this is in processFinish(). I'm not sure if the controller or the browser might be caching here.  I've got 'sessionForm' set true. My final link, to complete the wizard and begin file download, is a link along the lines of Download.  Any suggestions ?  Cheers, Thomas   ---  **Affects:** 1.1 final","closed","type: bug,","spring-projects-issues","2004-11-18T16:56:51Z","2004-11-30T05:12:23Z"
"","5184","ModelAndView.addObject() no use when null model [SPR-455]","**[Thomas Whitmore](https://jira.spring.io/secure/ViewProfile.jspa?name=thomasw)** opened **[SPR-455](https://jira.spring.io/browse/SPR-455?redirect=false)** and commented  When building a HandlerInterceptor to provide common Model data across a templated site, it would seem that ModelAndView objects with a null Model do not provide for addObject() to add data.  Nor can ModelAndView.Model be set, as there is only a getter.  I'm implementing a common menu system across a templated site and using HandlerInterceptors would seem the best factoring in which to place this HTML generation. Tiles approaches seemed at first look not to get the 'current' request path needed to determine location within the menu.  Currently I'm overriding referenceData() in several AbstractWizardFormControllers. If not overridden these would return null maps and expose the insufficient writability of ModelAndView.Model.  —  I'm getting the feeling that HandlerInterceptors/ Adapters are really of key importance to site design, not just controllers.  When you consider control functionality common across the site, this would seem to factor to HandlerInterceptors. Up to 50% of the site's control could end up here. Menus, common logon/ search elements, restricted area control, advert/ subidiary displays, etc.  All the common/ templated elements, it would seem, should end up as HandlerInterceptors. So this could do with a comprehensive ability to edit/ replace the returned ModelAndView.  Cheers, Thomas   --- No further details from [SPR-455](https://jira.spring.io/browse/SPR-455?redirect=false)","closed","type: bug,","spring-projects-issues","2004-11-12T20:54:41Z","2004-11-13T01:03:06Z"
"","5321","Add new SqlReturnAnyResultSets parameter  [SPR-593]","**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[SPR-593](https://jira.spring.io/browse/SPR-593?redirect=false)** and commented  Add new SqlReturnAnyResultSets parameter that could handle any resultsets encountered. This parameter would have to be generic enough to handle the possible resultsets returned and in your case it could simply ignore them.  http://forum.springframework.org/viewtopic.php?t=2713   ---  **Affects:** 1.1.3  **Attachments:** - [MultiResultSetJdbcTemplate.java](https://jira.spring.io/secure/attachment/12359/MultiResultSetJdbcTemplate.java) (_2.74 kB_)  2 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2004-12-31T06:58:08Z","2012-06-19T03:54:19Z"
"","4888","Add support for passing in array/object types to callable statements [SPR-156]","**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[SPR-156](https://jira.spring.io/browse/SPR-156?redirect=false)** and commented  Suport for array/object types could be provided by enhancing the SqlParameter class.  One idea would be to add a ""TypeHandler"" class that would manege the creation and population of these types.  The TypeHandler would be modeled after the current LobHandler.   --- No further details from [SPR-156](https://jira.spring.io/browse/SPR-156?redirect=false)","closed","type: enhancement,","spring-projects-issues","2004-06-04T07:41:39Z","2004-06-24T23:15:45Z"
"","4887","Add support for retrieving auto generated keys using JDBC 3.0 [SPR-155]","**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[SPR-155](https://jira.spring.io/browse/SPR-155?redirect=false)** and commented  Add support to jdbc.core/jdbc.object for JDBC 3.0 method 'getGeneratedKeys()' and the parameter Statement.RETURN_GENERATED_KEYS.   --- No further details from [SPR-155](https://jira.spring.io/browse/SPR-155?redirect=false)","closed","type: enhancement,","spring-projects-issues","2004-06-04T07:30:58Z","2004-07-11T23:48:26Z"
"","5792","Bug in SchedulerFactoryBean; use of Arrays.asList [SPR-1087]","**[Thomas Meyhack](https://jira.spring.io/secure/ViewProfile.jspa?name=tom)** opened **[SPR-1087](https://jira.spring.io/browse/SPR-1087?redirect=false)** and commented  I'm trying to configure a SchedulerFactoryBean (SFB) that has a couple triggers and a couple job details defined (the job details don't initially have triggers associated with them).  In setJobDetails(JobDetail[]) in SFB, Arrays.asList() is used to build the private List jobDetails.  This results in a bug in the registerJobsAndTriggers method. When the triggers are processed, an UnsupportedOperationException is thrown when a job detail associated with a trigger is added to the jobDetails List.  That's because the List returned by Arrays.asList() is a private static class called ArrayList defined in the Arrays class. This class extends AbstractList, but it does not implement the add(int, Object) method. This is presumably because the List is meant to be a fixed-length and objects cannot be added.  This error does not occur if setJobDetails is not called, because a LinkedList is used instead.  I believe setJobDetails should be changed so that a new LinkedList is built, and the contents of the JobDetail[] are manually inserted. This will allow for more JobDetail's to be added to the list when the triggers are processed.  (see http://forum.springframework.org/viewtopic.php?t=2894 for the whole thread)   ---  **Affects:** 1.2.1","closed","in: core,","spring-projects-issues","2005-06-29T19:59:03Z","2005-07-03T16:47:14Z"
"","5225","Support for re-registering dependencies in sub-factories [SPR-496]","**[Thomas Dudziak](https://jira.spring.io/secure/ViewProfile.jspa?name=tomdz)** opened **[SPR-496](https://jira.spring.io/browse/SPR-496?redirect=false)** and commented  Currently, the bean factory where a specific bean definition has been registered, creates the bean for this definition. This makes it impossible to redefine dependencies that this bean has, in sub-factories. Such a feature would be useful e.g. for creating hierarchical configurable factories (backed by bean factories) where the root factory defines default types, and sub factories can redefine types for specific environments or as specified by the user.  The basic idea for implementing this feature is probably to let the bean factory where the bean has been requested (as opposed to the one where the definition has been registered) answer the request. E.g. a change of DefaultListableBeanFactory#getBeanDefinition(String) to  public BeanDefinition getBeanDefinition(String beanName) throws BeansException { BeanDefinition bd = (BeanDefinition)beanDefinitionMap.get(beanName);      if (bd == null)     {         BeanFactory parent = getParentBeanFactory();              while ((bd == null) && (parent != null))         {             if (parent instanceof ConfigurableListableBeanFactory)             {                 ConfigurableListableBeanFactory parentFactory =                    (ConfigurableListableBeanFactory)parent;                      try                 {                     bd = parentFactory.getBeanDefinition(beanName);                 }                 catch (NoSuchBeanDefinitionException ex)                 {                     parent = parentFactory.getParentBeanFactory();                 }             }             else             {                 break;             }         }     }     if (bd == null)     {         throw new NoSuchBeanDefinitionException(beanName, toString());     }     return bd;  }  nearly suffices, only 8 unit tests fail (spring from CVS from 2 days ago).  See also this thread:  http://forum.springframework.org/viewtopic.php?t=1936&highlight=   --- No further details from [SPR-496](https://jira.spring.io/browse/SPR-496?redirect=false)","closed","type: enhancement,","spring-projects-issues","2004-11-27T22:38:16Z","2012-06-19T09:37:31Z"
"","5532","AbstractWizardFormController not usable for a dynamic nr of pages [SPR-805]","**[Thomas Antlinger](https://jira.spring.io/secure/ViewProfile.jspa?name=atom)** opened **[SPR-805](https://jira.spring.io/browse/SPR-805?redirect=false)** and commented  AbstractWizardForm Controller is not usable for dynamic pages with a dynamic number of pages.  This is because all methods needed are final.  if the method show pages would use getPageCount instead of this.pages.length and getPageCount would not be final it would be possible to create a WizardFormController which can handle a dynamic number of pages.  Same for getPages()  If thoose would be not final someone could overwrite them and get the pages and nr of pages from the session or from elsewhere.   ---  **Affects:** 1.1.5","closed","type: enhancement,","spring-projects-issues","2005-03-22T02:19:42Z","2005-04-16T07:31:26Z"
"","4942","BeanWrappers and indexed properties changed at runtime [SPR-211]","**[Thomas Achleitner](https://jira.spring.io/secure/ViewProfile.jspa?name=tufelix)** opened **[SPR-211](https://jira.spring.io/browse/SPR-211?redirect=false)** and commented  I am having problems with BeanWrappers and runtime manipulation of application context beans. I have attached some classes and a test case that fails. The test case class should explain the problem.  Is this a bug or intended behaviour?  ---  public class IndexedPropertyTestCase extends TestCase { ClassPathXmlApplicationContext context;      protected void setUp() { context = new ClassPathXmlApplicationContext(""indexedPropertyTestCase.xml"");	}          public void testIt() {     	TestBean testBean = (TestBean) context.getBean(""testBean"");     	BeanWrapper bw = new BeanWrapperImpl(testBean);          	for (int i = 0; i < 3; i++) {	System.out.println(bw.getPropertyValue(""parameters["" + i + ""].name"")); }     	     	TestParameter[] newParameters = new TestParameter[2];     	newParameters[0] = (TestParameter) bw.getPropertyValue(""parameters[0]"");     	newParameters[1] = (TestParameter) bw.getPropertyValue(""parameters[2]"");     	     	// the following line makes the test case work  //		bw.setWrappedInstance(testBean);      	testBean.setParameters(newParameters);          	for (int i = 0; i < 2; i++) {	System.out.println(bw.getPropertyValue(""parameters["" + i + ""].name"")); }     	     	assertEquals(""param0"", bw.getPropertyValue(""parameters[0].name""));     	assertEquals(""param2"", bw.getPropertyValue(""parameters[1].name""));     }  }  ---  indexedPropertyTestCase.xml:  ---  ... \ \ \ \ \ \\param0\\ \ \ \\param1\\ \ \ \\param2\\ \ \ \ \ \  ---  public class TestBean { private TestParameter[] parameters;      public TestParameter[] getParameters() { return parameters;	}          public void setParameters(TestParameter[] parameters) {	this.parameters = parameters;	}  }  public class TestParameter { private String name;      public String getName() {	return name; }          public void setName(String name) { this.name = name; }  }  ---  **Affects:** 1.0.2  **Attachments:** - [test.zip](https://jira.spring.io/secure/attachment/10132/test.zip) (_1.74 kB_)","closed","in: core,","spring-projects-issues","2004-07-12T01:46:16Z","2019-01-13T22:54:41Z"
"","4883","Allow Property paths in BeanWrapperImpl like: mapname['key.name'].prop [SPR-151]","**[Thomas Achleitner](https://jira.spring.io/secure/ViewProfile.jspa?name=tufelix)** opened **[SPR-151](https://jira.spring.io/browse/SPR-151?redirect=false)** and commented  BeanWrapperImpl can not resolve property paths like: mapname['key.name'].prop  Keys of maps containing a . are not handled when navigating through the property path. Following exception is thrown:  No property 'mapname['key' in class ...  thomas   ---  **Affects:** 1.0.1","closed","type: enhancement,","spring-projects-issues","2004-05-31T20:22:14Z","2004-06-15T03:56:02Z"
"","5428","JSR 94 support [SPR-700]","**[Thierry Templier](https://jira.spring.io/secure/ViewProfile.jspa?name=templth)** opened **[SPR-700](https://jira.spring.io/browse/SPR-700?redirect=false)** and commented  The aim of this specification is to have a standard API for acquiring and using a rule engine (administration and execution of business rules). This support will provide a way to configure a RuleServiceProvider, a template to execute rules (in a stateless and stateful ways) and configure automatically rulesets. I have begun to work on this feature.   --- No further details from [SPR-700](https://jira.spring.io/browse/SPR-700?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-02-09T18:02:38Z","2006-03-13T09:09:17Z"
"","5878","Cannot use the RecordCreator when a connector doesn't support RecordFactory creation [SPR-1176]","**[Thierry Templier](https://jira.spring.io/secure/ViewProfile.jspa?name=templth)** opened **[SPR-1176](https://jira.spring.io/browse/SPR-1176?redirect=false)** and commented  It isn't possible to use the RecordCreator facility with the CciTemplate when the connector doesn't support RecordFactory creation. As a matter of the fact, the createRecord method of the CciTemplate catches the NotSupportedException on getConnectionFactory().getRecordFactory(), encapsulates it in a RecordTypeNotSupportException and throws it. So the creation of the record with the RecordCreator is never done... The CICS connectors work like this.  The workaround is to wrap the ConnectionFactory configured for the connector by a class that allows RecordFactory creation. This created proxy is a simple implementation that returns a RecordFactory which throws exceptions on the calls of its methods.  It would be interesting to integrate this feature directly in the CciTemplate. So the RecordCreator feature would be used even if the connector doesn't support RecordFactory.   ---  **Attachments:** - [proposal.zip](https://jira.spring.io/secure/attachment/11001/proposal.zip) (_4.92 kB_) - [workaround.zip](https://jira.spring.io/secure/attachment/11000/workaround.zip) (_1.81 kB_)","closed","type: bug,","spring-projects-issues","2005-07-26T22:49:29Z","2005-07-31T23:12:48Z"
"","5872","Injection on filters when the configuration of Spring is made by a Struts plugin [SPR-1170]","**[Thierry Templier](https://jira.spring.io/secure/ViewProfile.jspa?name=templth)** opened **[SPR-1170](https://jira.spring.io/browse/SPR-1170?redirect=false)** and commented  The classic class, DelegatingFilterProxy, to realize dependency injection on filter doesn't work when the application context of Spring is configured with the Struts plugin, ContextLoaderPlugIn. You can find in attachment a class to fix this feature.   ---  **Attachments:** - [DelegatingFilterProxy.java](https://jira.spring.io/secure/attachment/10972/DelegatingFilterProxy.java) (_2.70 kB_)","closed","type: enhancement,","spring-projects-issues","2005-07-25T02:30:36Z","2005-08-03T20:26:04Z"
"","5841","Support for association of ResourceAdapter and ConnectionManagedFactory (JCA 1.5) [SPR-1138]","**[Thierry Templier](https://jira.spring.io/secure/ViewProfile.jspa?name=templth)** opened **[SPR-1138](https://jira.spring.io/browse/SPR-1138?redirect=false)** and commented  When configuring a JCA 1.5 compliant connector with the LocalConnectionFactoryBean class, you need to inject the ResourceAdapter instance and associate it with the created ConnectionManagerFactory.   ---  **Attachments:** - [LocalConnectionFactoryBean.java](https://jira.spring.io/secure/attachment/10940/LocalConnectionFactoryBean.java) (_4.71 kB_)","closed","type: enhancement,","spring-projects-issues","2005-07-14T04:19:18Z","2005-08-21T20:32:50Z"
"","5840","Support for JCA 1.5 message endpoint management [SPR-1137]","**[Thierry Templier](https://jira.spring.io/secure/ViewProfile.jspa?name=templth)** opened **[SPR-1137](https://jira.spring.io/browse/SPR-1137?redirect=false)** and commented  Configuration of JCA ResourceAdapter and MessageEndpoint  ---  **Issue Links:** - #7752 JCA 1.5 WorkManager support with SchedulingTaskExecutor","closed","type: enhancement,","spring-projects-issues","2005-07-14T04:10:11Z","2019-01-11T19:34:27Z"
"","5293","NullPointerException when using DependencyInjectionInterceptor with a composite id [SPR-564]","**[Tareq Abedrabbo](https://jira.spring.io/secure/ViewProfile.jspa?name=tareq)** opened **[SPR-564](https://jira.spring.io/browse/SPR-564?redirect=false)** and commented  Using DependencyInjectionInterceptor for hibernate (from the sandbox) with a class which has a composite id causes a NullPointerException: NullPointerException at org.springframework.beans.BeanWrapperImpl.getNestedPropertySeparatorIndex(BeanWrapperImpl.java:423) at org.springframework.beans.BeanWrapperImpl.getBeanWrapperForPropertyPath(BeanWrapperImpl.java:458) at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:666) at org.springframework.orm.hibernate.support.ChainedInterceptorSupport.setIdOnNewEntity(ChainedInterceptorSupport.java:191) at org.springframework.orm.hibernate.support.DependencyInjectionInterceptorFactoryBean$DependencyInjectionInterceptor.instantiate(DependencyInjectionInterceptorFactoryBean.java:112) at net.sf.hibernate.impl.SessionImpl.instantiate(SessionImpl.java:1792) at net.sf.hibernate.impl.SessionImpl.instantiate(SessionImpl.java:1785) at net.sf.hibernate.loader.Loader.instanceNotYetLoaded(Loader.java:577) at net.sf.hibernate.loader.Loader.getRow(Loader.java:501) at net.sf.hibernate.loader.Loader.getRowFromResultSet(Loader.java:213) at net.sf.hibernate.loader.Loader.doQuery(Loader.java:281) at net.sf.hibernate.loader.Loader.doQueryAndInitializeNonLazyCollections(Loader.java:133) at net.sf.hibernate.loader.Loader.doList(Loader.java:1033) at net.sf.hibernate.loader.Loader.list(Loader.java:1024) at net.sf.hibernate.hql.QueryTranslator.list(QueryTranslator.java:854) at net.sf.hibernate.impl.SessionImpl.find(SessionImpl.java:1553) at net.sf.hibernate.impl.QueryImpl.list(QueryImpl.java:39) at org.springframework.orm.hibernate.HibernateTemplate$30.doInHibernate(HibernateTemplate.java:633) at org.springframework.orm.hibernate.HibernateTemplate.execute(HibernateTemplate.java:243) at org.springframework.orm.hibernate.HibernateTemplate.executeFind(HibernateTemplate.java:263) at org.springframework.orm.hibernate.HibernateTemplate.findByNamedQuery(HibernateTemplate.java:624) at org.springframework.orm.hibernate.HibernateTemplate.findByNamedQuery(HibernateTemplate.java:619) ...  I tracked the exception to setIdOnNewEntity in org.springframework.orm.hibernate.support.ChainedInterceptorSupport: wrapper.setPropertyValue(sessionFactory.getClassMetadata(persistentClass).getIdentifierPropertyName(), id); Calling sessionFactory.getClassMetadata(persistentClass).getIdentifierPropertyName() on class with a composite id gives null. The type of the identifier should be checked before calling getIdentifierPropertyName by calling getIdentifierType().   ---  **Affects:** 1.2 RC1  **Attachments:** - [ChainedInterceptorSupport.java](https://jira.spring.io/secure/attachment/10452/ChainedInterceptorSupport.java) (_6.78 kB_)","closed","status: declined,","spring-projects-issues","2004-12-16T22:37:11Z","2019-01-12T16:41:55Z"
"","5311","Provide a SimpleFormController variant with multi-action support [SPR-583]","**[Taras Tielkes](https://jira.spring.io/secure/ViewProfile.jspa?name=plethora)** opened **[SPR-583](https://jira.spring.io/browse/SPR-583?redirect=false)** and commented  This is a enhancement request for a ""MultiActionSimpleFormController"" convenience class.  This controller class should combine 1) The form processing workflow of SimpleFormController 2) The ability to have alternative submit flows, like MultiActionController    ---  **Affects:** 1.1.3  4 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2004-12-23T03:51:56Z","2008-01-07T23:16:56Z"
"","5281","Improve custom binding of String[] to collections [SPR-552]","**[Taras Tielkes](https://jira.spring.io/secure/ViewProfile.jspa?name=plethora)** opened **[SPR-552](https://jira.spring.io/browse/SPR-552?redirect=false)** and commented  Summary: A custom property editor for a collection property receives String[] values as a comma-delimited list. Provide functionality to allow such values to be processed as a String[].  An HTML ""select"" element marked ""multiple"" will cause property values of type String[] to be processed.  When registering a custom PropertyEditor for a collection type to store the submitted data, the input is passed to the editor as a comma-delimited string. This is inconventient for two reasons: 1) All such custom PropertyEditors have to split the input text on the delimiter. 2) It restricts the individial string representation of the individial elements to values not containing a comma.  Requested functionality: Call the setValue() of the custom PropertyEditor directly with the String[] as the argument. This will allow (but not require) the custom PropertyEditor to work directly with the array. Much more convenient and less error-prone.  The current BeanWrapperImpl contains similar convenience functionality for other binding scenarios. (See lines 943-954 of the 1.1.3 version of BeanWrapperImpl.java)  An example: --- command class --- class User { private Set roles; public Set getRoles() { return roles; } public void setRoles(Set roles) { this.roles = roles; } } --- controller class --- ... PropertyEditor pe = new RoleSetPropertyEditor());     binder.registerCustomEditor(Set.class, ""roles"", pe); ... --- RoleSetPropertyEditor --- ... public void setAsText(String text) throws IllegalArgumentException { // split string on comma // for each element, invoke RolePropertyEditor, add to new Set // invoke setValue(newSet) } ...   ---  **Affects:** 1.1.3","closed","type: enhancement,","spring-projects-issues","2004-12-14T06:36:35Z","2019-01-13T22:53:12Z"
"","5274","Improve processing of PropertyEditor exceptions [SPR-545]","**[Taras Tielkes](https://jira.spring.io/secure/ViewProfile.jspa?name=plethora)** opened **[SPR-545](https://jira.spring.io/browse/SPR-545?redirect=false)** and commented  Summary: Provide functionality to translate exceptions thrown from a PropertyEditor into user-friendly messages.  We use Spring MVC to bind forms to a rich domain model. (Using transitive persistence)  When binding command fields that are references to other domain entities, a PropertyEditor is used to bind primary key string values (e.g. coming from an HTML select) to actual entity instances. The PropertyEditor used is wired up to a lower-level DAO. In this setup the PropertyEditor#setAsText() acts as a bridge to a finder method provided by the DAO.  Retrieving a domain entity instance from a primary key string is an operation that has multiple failure paths. Some possible errors are: -type mismatch (""garbage input"") -domain instance not found -user has no permission to access instance x  The issue is that there is no clean way to map these distinct failures to distinct messages or message codes.  There are two ways to return error details from a PropertyEditor: 1) Use a nested cause for the declared IllegalAccessException (JDK 1.4+ only)  The current DataBinder code does not preserve nested causes when processing the combined PropertyAccessExceptionsException thrown by BeanWrapper#setPropertyValues(). The result is that all IllegalAccessExceptions are translated to ""typeMismatch"" error codes.  2) Throw an unchecked exception  Throwing a runtime exception will abort the binding process.  What I'm looking for is something like a strategy PropertyEditorExceptionTranslator interface that I can hook up to the data binding process.  Related discussion thread on forum: http://forum.springframework.org/viewtopic.php?t=2291   ---  **Affects:** 1.1.2","closed","type: enhancement,","spring-projects-issues","2004-12-12T00:48:40Z","2005-03-14T10:00:41Z"
"","5037","Incorrect spring.ftl in dist/spring.jar [SPR-307]","**[Tamas Perlaky](https://jira.spring.io/secure/ViewProfile.jspa?name=tamas)** opened **[SPR-307](https://jira.spring.io/browse/SPR-307?redirect=false)** and commented  The version of spring.ftl in /dist/spring.jar does not include the formXxxx, etc. macros. The version in /dist seems correct.   ---  **Affects:** 1.1 RC1, 1.1 RC2","closed","status: declined,","spring-projects-issues","2004-09-01T10:18:27Z","2019-01-12T16:42:17Z"
"","5595","SqlFunction causes ClassCastException [SPR-869]","**[Søren Larsen](https://jira.spring.io/secure/ViewProfile.jspa?name=sorenlarsen)** opened **[SPR-869](https://jira.spring.io/browse/SPR-869?redirect=false)** and commented  If an SqlFunction object is created ""bean style"" with the default constructor followed by calls to the appropriate setters, attempts to evaluate the function with run may lead to a ClassCastException.  The SQL expression used to produce the problem was  SELECT COUNT(*) FROM SOME_TABLE WHERE SOME_COL = ?  and the exception is thrown when the result is cast as an Integer.  Creating the object with a ""fat"" constructor works fine.  The culprit turns out to be this member variable declaration in SqlFunction:  /** The SQL return type of the function */ private int retType;  The variable is given the appropriate value, e.g. java.sql.Types.INTEGER in the fat constructors, but not in the default.  Furthermore, no accessors for the variable are defined.  The proposed solution is to initialize retType thusly:  private int retType = Types.INTEGER;  Incidentally, the default constructor doesn't call setRowsExpected(1), which the other constructors do, but that is somewhat less serious.  Cheers, Søren Larsen   ---  **Affects:** 1.1.5","closed","type: bug,","spring-projects-issues","2005-04-08T23:21:47Z","2005-08-04T00:58:07Z"
"","5162","springframework.org has old spring-beans.dtd [SPR-433]","**[Sulka Haro](https://jira.spring.io/secure/ViewProfile.jspa?name=sulka)** opened **[SPR-433](https://jira.spring.io/browse/SPR-433?redirect=false)** and commented  The official reference DTD in the documentation  http://www.springframework.org/docs/reference/springbeansdtd.html  contains newer version of the DTD than the hosted version at  http://www.springframework.org/dtd/spring-beans.dtd  This causes some valid Spring 1.1.1 bean definition xml files to fail validation.   --- No further details from [SPR-433](https://jira.spring.io/browse/SPR-433?redirect=false)","closed","type: bug,","spring-projects-issues","2004-10-27T00:59:21Z","2004-11-14T09:23:04Z"
"","5618","Log4J error with spring frame work. [SPR-891]","**[Sudhakar Tadepalli](https://jira.spring.io/secure/ViewProfile.jspa?name=sudhakartv)** opened **[SPR-891](https://jira.spring.io/browse/SPR-891?redirect=false)** and commented  Hi, I am not sure if it is a bug or something wrong with my configuration. I am trying Equinox example on WSAD and trying the example explaing in the chapter2. When i am runung the testcase using Junit i have the foloowing error in the concole. ""log4j:WARN No appenders could be found for logger (org.springframework.beans.factory.xml.XmlBeanDefinitionReader). log4j:WARN Please initialize the log4j system properly.""  I do have log4j.properties file in the class path. Could some one suggest what is wrong or gouid me to the appropriate site if this is the not proper site for help ?  Thanks Sudhakar   ---  **Attachments:** - [untitled.bmp](https://jira.spring.io/secure/attachment/10668/untitled.bmp) (_2.18 MB_)","closed","","spring-projects-issues","2005-04-19T10:23:17Z","2019-01-11T13:05:45Z"
"","5437","Add JDBC batch support for Statement's [SPR-709]","**[Stuart Zakon](https://jira.spring.io/secure/ViewProfile.jspa?name=zakons)** opened **[SPR-709](https://jira.spring.io/browse/SPR-709?redirect=false)** and commented  JdbcTemplate has support for batch updates provided by the batchUpdate method. There is also a JDBC operation class called BatchSqlUpdate that uses this method. However, this operation assumes that the batch updates are being done with a single PreparedStatement. It would be nice to have support for batch updates using JDBC Statement's. This would allow multiple different SQL commands to be batched together.  This functionality is useful in the scenario where you want to minimize round-trips to the database from an application server and you want to combine multiple updates together against different, but related tables (one object being saved, mapped to multiple tables). We are currently batching together as many as 8 to 12 SQL inserts and updates against 4 to 5 tables and need to resort to the plain JDBC API to perform this operation with high performance.   ---  **Affects:** 1.1.5","closed","type: enhancement,","spring-projects-issues","2005-02-13T14:48:57Z","2005-02-24T02:53:53Z"
"","5417","Proxied beans dependent on each other fail to initialize [SPR-689]","**[Steven Warren](https://jira.spring.io/secure/ViewProfile.jspa?name=steven.warren)** opened **[SPR-689](https://jira.spring.io/browse/SPR-689?redirect=false)** and commented  Hi, I have a case where 2 proxied beans (A and B) are injected to each other and I am getting the following error:  Quote: Cannot create AopProxy with no Advisors and no target source  If I comment out one side or the other of the dependency (by commenting out the setter method of one DAO class or the other), the proxies resolve fine (i.e. no error), here is my config snippet:  Code:  \  \  \  \  \  \  \stripAdvisor\  \  \  \  \  \  \  \  \  \  \stripAdvisor\  \  \  \  In ""A"" I define the method setBDAO(...) and in B I define the method setADAO(...).   ---  **Affects:** 1.1.3  9 votes, 5 watchers","closed","status: declined,","spring-projects-issues","2005-02-04T17:18:30Z","2019-01-12T16:41:45Z"
"","5416","Proxy interface order undefined [SPR-688]","**[Steven Warren](https://jira.spring.io/secure/ViewProfile.jspa?name=steven.warren)** opened **[SPR-688](https://jira.spring.io/browse/SPR-688?redirect=false)** and commented  Proxy receives a Class[] that contains the interfaces to be supported by the proxy. The order of classes in the array are significant to Proxy as it uses that ordering to resolve method signature conflicts.  AdvisedSupport returns an Array of interfaces supported, but the ordering is undefined. This can lead to unpredictable behaviour of the proxy class.   ---  **Affects:** 1.1.4","closed","type: bug,","spring-projects-issues","2005-02-04T09:12:46Z","2005-02-04T13:37:51Z"
"","5385","Last Bean in an interceptor list has to be in local context [SPR-657]","**[Steven Warren](https://jira.spring.io/secure/ViewProfile.jspa?name=steven.warren)** opened **[SPR-657](https://jira.spring.io/browse/SPR-657?redirect=false)** and commented  I have a ProxyFactoryBean defined with the following interceptors:                      parentViewAdvisor         applicationAdvisor              ""applicationAdvisor"" is defined in the current (child) context, ""parentViewAdvisor"" is defined in the parent context. This works fine.  However, if the name list is changed to:                      applicationAdvisor         parentViewAdvisor              The creation of the proxy bean fails because it cannot locate the ""parentViewAdvisor"" bean. Specifically:  ""No bean named 'parentViewAdvisor' is defined""  In other words, the last interceptor of a ProxyFactoryBean cannot be defined in a parent context.  Cheers Steve    ---  **Affects:** 1.1.3","closed","","spring-projects-issues","2005-01-25T15:16:55Z","2019-01-11T12:51:24Z"
"","5341","Same multicaster invoked more then once for single event [SPR-613]","**[Steven Warren](https://jira.spring.io/secure/ViewProfile.jspa?name=steven.warren)** opened **[SPR-613](https://jira.spring.io/browse/SPR-613?redirect=false)** and commented  If you override the default EventMulticaster by specifing a bean with an id of ""applicationEventMulticaster"" in a parent context, but do not do the override in a child contexts, events published on the child context are delivered twice to parent registered listeners.  This seems to be a defect as it does not deliver the events twice if you do not do the override in the parent context.   ---  **Affects:** 1.1.3","closed","type: bug,","spring-projects-issues","2005-01-12T03:03:20Z","2005-01-15T05:35:15Z"
"","5373","explain import tag in documentation. [SPR-645]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-645](https://jira.spring.io/browse/SPR-645?redirect=false)** and commented  From the forum:  It would be really useful to add documentation about \ to the reference on beans: http://www.springframework.org/docs/reference/beans.html.  Unless I missed it, I didn't see how to do this from the documentation.    ---  **Affects:** 1.2 RC1","closed","type: enhancement,","spring-projects-issues","2005-01-20T19:22:30Z","2005-01-27T03:12:57Z"
"","5327","use property editors for value elements in lists and maps [SPR-599]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-599](https://jira.spring.io/browse/SPR-599?redirect=false)** and commented  It would be nice if the property editors registered with BeanWrapperImpl are also used on value elements in lists and maps. Right now they are handled as strings and need to be handled by the classes that receive them. This leads to boilerplate code that could be avoided.  Using BeanWrapperImpl on list and map elements would be possible in my view since the destination type is Object. No default editors are registered for Object so none of them would be picked. This would allow users to register a custom editor for Object that would inject other types than strings.  Registering a custom editor with Object doesn't interfere with normal property handling as the default editors come first in the list.  ---  **Issue Links:** - #5271 Property editors support for indexed and mapped properties (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2005-01-06T07:24:50Z","2019-01-11T12:41:35Z"
"","5320","add quote from Juergen to remoting docs [SPR-592]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-592](https://jira.spring.io/browse/SPR-592?redirect=false)** and commented  I find this quote by Juergen very insightful. My question was if RemoteExporter could be changed to automatically export all interfaces implemented by the target.  Quote:  ""The main reason why we don't perform auto-detection of implemented interfaces there is to avoid opening too many doors. The target object might implement internal callback interfaces like InitializingBean, DisposableBean, etc which we wouldn't want to expose to callers.  Offering a proxy with all interfaces implemented by the target usually doesn't matter in the local case. But when exporting a remote service, you should expose a specific service interface, with specific operations intended for remote usage. Besides internal callback interfaces, the target might implement multiple business interfaces, with just one of them intended for remote exposure. For these reasons, we **require** such a service interface to be specified.  I guess it's a tradeoff between configuration convenience and the risk of accidental exposure of internal methods... IMO, always specifying a service interface is not too much effort, and puts you on the safe side regarding controlled exposure of specific methods.""   ---  **Affects:** 1.1.4  **Attachments:** - [fix-jira-spr592.patch](https://jira.spring.io/secure/attachment/10486/fix-jira-spr592.patch) (_1.82 kB_) - [fix-typos-in-ref-docs-readme.patch](https://jira.spring.io/secure/attachment/10487/fix-typos-in-ref-docs-readme.patch) (_876 bytes_)","closed","type: enhancement,","spring-projects-issues","2004-12-29T22:26:48Z","2019-01-11T12:41:32Z"
"","5313","explain order of interceptorNames on ProxyFactoryBean [SPR-585]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-585](https://jira.spring.io/browse/SPR-585?redirect=false)** and commented  Explain the order in which interceptors are invoked with regards to the interceptorNames property on ProxyFactoryBean.   ---  **Affects:** 1.1.3","closed","type: enhancement,","spring-projects-issues","2004-12-23T22:28:49Z","2012-06-19T03:54:10Z"
"","5245","Serializable class org.springframework.aop.support.DefaultIntroductionAdvisor has not serial version UID [SPR-516]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-516](https://jira.spring.io/browse/SPR-516?redirect=false)** and commented  Serializable class org.springframework.aop.support.DefaultIntroductionAdvisor has no serial version UID.   ---  **Affects:** 1.1.2","closed","type: enhancement,","spring-projects-issues","2004-12-03T09:33:29Z","2004-12-08T03:16:20Z"
"","5239","explain that event listeners receive events in same thread as publisher [SPR-510]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-510](https://jira.spring.io/browse/SPR-510?redirect=false)** and commented  Maybe it would be useful to mention in section 3.11.2 of the reference doc that event listeners receive events synchronously. This means the publishEvent() method blocks until all listeners have finished processing the event. Furthermore, when a listener receives an event it operates inside the transaction context of the publisher, if a transaction context is available.   ---  **Affects:** 1.1.3  **Attachments:** - [fix-jira-spr510.patch](https://jira.spring.io/secure/attachment/10489/fix-jira-spr510.patch) (_1.26 kB_)","closed","type: enhancement,","spring-projects-issues","2004-12-01T22:52:48Z","2005-02-03T06:55:55Z"
"","5231","Error in reference to transaction chapter [SPR-502]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-502](https://jira.spring.io/browse/SPR-502?redirect=false)** and commented  In section 14.3.2 of the reference doc the text reference to chapter 6 as being the chapter dealing with transaction management. This has however changed over time and in now chapter 7. Chapter 6 deals with AspectJ integration.   ---  **Affects:** 1.1.3","closed","type: bug,","spring-projects-issues","2004-11-29T20:27:10Z","2004-12-01T20:35:17Z"
"","5223","Update javadoc for Controllers [SPR-494]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-494](https://jira.spring.io/browse/SPR-494?redirect=false)** and commented  Maybe you could mention that HttpServletRequest and HttpServletResponse parameters can easily be mocked for testing purposes, which immediately clarifies the design.   --- No further details from [SPR-494](https://jira.spring.io/browse/SPR-494?redirect=false)","closed","type: enhancement,","spring-projects-issues","2004-11-26T10:15:37Z","2004-12-08T02:49:53Z"
"","5222","Updated javadoc in org.springframework.validation.ValidationUtils [SPR-493]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-493](https://jira.spring.io/browse/SPR-493?redirect=false)** and commented  In the javadoc of class org.springframework.validation.ValidationUtils you could mention that the Errors instances hold an internal reference to the object to be validated.   ---  **Affects:** 1.1.2","closed","type: enhancement,","spring-projects-issues","2004-11-26T10:13:18Z","2004-12-08T02:27:38Z"
"","5221","Some improvements in the reference doc [SPR-492]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-492](https://jira.spring.io/browse/SPR-492?redirect=false)** and commented  I've followed the Spring workshop in Belgium on 24-26 november 2004, led by Jurgen. There are a number of Spring features he mentioned during the workshop that are not or not clearly discussed in the reference documentation:  + In section 3.5 discussing parent/child bean definition, you could mention that there's an example of this setup in JPetStore.  + In section 7.2 read-only optimization for transactions in Hibernate is discussed, but there's not mention that this optimization means the session will not flush.  + In section 10.2 LobHandler and NativeJdbcExtractor are not discussed.  + OpenSessionInViewFilter is not discussed. This is a pretty useful feature.  + Defining the order in which view resolution is delegated to view resolvers is not discussed, nor is mentioned that there can be only one internal view resolver configured (not sure of the last remark).  + Defining views as beans is not discussed (I think).  And one bug:  + In section 18.2.2: in the concurrent example the concurrent property is not set.    ---  **Affects:** 1.1.2","closed","type: enhancement,","spring-projects-issues","2004-11-26T10:09:01Z","2012-06-19T03:53:56Z"
"","5769","Better error message when injecting string values as pre/post interceptors in TransactionProxyFactoryBean [SPR-1062]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-1062](https://jira.spring.io/browse/SPR-1062?redirect=false)** and commented  When a string value is injected as pre/post inteceptor in TransactionProxyFactoryBean this error message is thrown:  No adapter for Advice of class [java.lang.String]  This error is thrown because only advice instances are allowed as pre/post interceptors. I find this message a bit unclear so I added a method to test the instance type of the pre/post interceptors.   ---  **Affects:** 1.2.2  **Attachments:** - [TransactionProxyFactoryBean.patch](https://jira.spring.io/secure/attachment/10812/TransactionProxyFactoryBean.patch) (_1.57 kB_)","closed","type: enhancement,","spring-projects-issues","2005-06-19T21:41:46Z","2005-06-24T03:47:54Z"
"","5767","MethodInvokingFactoryBean rethrows InvocationTargetException [SPR-1060]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-1060](https://jira.spring.io/browse/SPR-1060?redirect=false)** and commented  MethodInvokingFactoryBean rethrows InvocationTargetException which is not very useful. AopUtils#invokeJointpointUsingReflection(Object,Method,Object[]) takes the target exception as rethrows that. I've created a patch that implements the same behavior and changed the exceptions in the method signatures accordingly.   ---  **Affects:** 1.2.2  **Attachments:** - [MethodInvokingFactoryBean.patch](https://jira.spring.io/secure/attachment/10811/MethodInvokingFactoryBean.patch) (_2.02 kB_)","closed","type: enhancement,","spring-projects-issues","2005-06-19T20:26:19Z","2005-06-20T07:18:12Z"
"","5715","Use configurable class loader for deserialization [SPR-1005]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-1005](https://jira.spring.io/browse/SPR-1005?redirect=false)** and commented  Use a configurable bean class loader (possibly from the from the bean definition reader) for deserialization. This is required for environments with special class loaders (Eclipse, Janino, ...).  org.apache.commons.io.input.ClassLoaderObjectInputStream could be used for this purpose, or by overwriting the resolveClass method of java.io.ObjectInputStream.   ---  1 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2005-06-02T21:55:38Z","2012-06-19T03:54:08Z"
"","5336","JmsTemplate.receiveAndConvert throws exception on timeout [SPR-608]","**[Steven Caswell](https://jira.spring.io/secure/ViewProfile.jspa?name=mungoknotwise)** opened **[SPR-608](https://jira.spring.io/browse/SPR-608?redirect=false)** and commented  The javadoc for JmsTemplate.receiveAndConvert defines the return value as ""the message produced for the consumer or null if the timeout expires"". However, it actually throws a MessageConversionException with the message ""Cannot convert JMS message [null] to object"". I need to be able to distinguish between a real problem converting and a timeout, which should not be treated as a MessageConversionException, which is what the javadoc indicates it should do.   ---  **Affects:** 1.1.3","closed","in: core,","spring-projects-issues","2005-01-10T23:57:04Z","2005-01-11T23:07:44Z"
"","5669","Actions no long wired with message sources [SPR-952]","**[Steven Bazyl](https://jira.spring.io/secure/ViewProfile.jspa?name=sqrrrl)** opened **[SPR-952](https://jira.spring.io/browse/SPR-952?redirect=false)** and commented  Autowiring of actions no longer wires up MessageSource.  This was working a little while ago, but the latest sync breaks it.  Stepping through the source shows MessageSource is explictly excluded from autowiring (handled separately by application context?)  Not sure what changed to break it, but something in the past 2 weeks or so...    --- No further details from [SPR-952](https://jira.spring.io/browse/SPR-952?redirect=false)","closed","in: core,","spring-projects-issues","2005-05-15T14:46:45Z","2005-05-18T19:57:45Z"
"","5608","Incorrect value from bind tag when returning from subflow [SPR-881]","**[Steven Bazyl](https://jira.spring.io/secure/ViewProfile.jspa?name=sqrrrl)** opened **[SPR-881](https://jira.spring.io/browse/SPR-881?redirect=false)** and commented  I found a somewhat odd error when working with a flow that spawns a subflow to itself.  The particular case is a detail form for a group object that has a link to create a child group using the same form/flow.  For the most part, everything works correctly.  However, when the view renders the bind tag looks for error instances in the request based on the form object name.  Since the request was submitted with the child group parameters, the errors instance in the request is, of course, that of the child and the bind tag displays the child's attributes, even though the view model contains the correct parent group instance.  It doesn't get reset when the subflow exits, nor is there really a chance for the parent flow to rebind/validate as the incomming request parameters are those of the child and the binding would be incorrect.  In other words... Request-> childFlow.bindAndValidate (inserts validation/errors into request) childFlow.save childFlow.end parentFlow.view render view -> bind attributes (pulls previously created child errors from request)  I'm not sure what the best fix is here.  I can probably hack around it by adding an action that executes after the child is saved that wipes the errors instance from the request, but that seems like an awful hack...   ---  **Affects:** 2.0 M1","closed","status: declined,","spring-projects-issues","2005-04-15T10:56:59Z","2019-01-12T16:41:28Z"
"","5493","Duplicate resources in PathMatchingResourcePatternResolver.findAllClassPathResources [SPR-765]","**[Steven Bazyl](https://jira.spring.io/secure/ViewProfile.jspa?name=sqrrrl)** opened **[SPR-765](https://jira.spring.io/browse/SPR-765?redirect=false)** and commented  I haven't yet narrowed down a simple test case, but we recently saw a problem where we're trying to load multiple spring bean definition files from jars packaged in an ear using a well-known filename approach (e.g. classpath*:beans.xml)  What we're seeing is that the same UrlResource is being returned multiple times.  While its harmless in that it only results in beans redefining themselves with the same definition, it does cause a lot of noise in the logs and increases our start up time just slightly.  We've also seen cases where the same URL is returned albeit with slightly different path represenatations ( /beans.xml vs. /./beans.xml)  It would be nice if findAllClassPathResources() ensured each unique resource is returned once and only once.  One simple change is just changing from List to Set to hold the resources while enumerating.  This fixes the first part (same path multiple times) and fixing the second part should just be a matter of normalizing the URL.   ---  **Affects:** 1.1.5","closed","in: core,","spring-projects-issues","2005-03-05T07:25:34Z","2005-03-16T01:33:05Z"
"","5362","Simple fix for avoiding exception when binding to empty collections [SPR-634]","**[Steven Bazyl](https://jira.spring.io/secure/ViewProfile.jspa?name=sqrrrl)** opened **[SPR-634](https://jira.spring.io/browse/SPR-634?redirect=false)** and commented  One problem frequently discussed in the forms is how to deal with the problem of binding to a collection of elements where new elements can be added dynamically.  In such cases, trying to bind to a collection element typically results in an IndexOutOfBoundsException.  Some folks have suggested pre-allocating the elements when creating the command object based on some hidden form element, but the solution seems a little hackish.  A simpler approach, IMHO, is simply to use a custom property editor to initialize each element.  This runs into problems, however, since the properties are not bound in the correct order.  A simple change of having PropertyValues sort the PropertyVaue array by name yields the correct results.  For example, I have a Query class that has a collection of Criterion elements.  The form allows the user to add new Criterion dynamically.  Using this approach, I can support dynamic addition of elements easily.  In the controller I'd simply have some code like:  protected void initBinder(HttpServletRequest request, ServletRequestDataBinder binder) throws Exception { super.initBinder( request, binder ); binder.registerCustomEditor( Integer.class, ""maxResults"", new CustomNumberEditor( Integer.class, true ) ); binder.registerCustomEditor( Criterion.class, ""criteria"", new CriterionEditor() ); } }  The custom editor is very simple - just create a new class: public class CriterionEditor extends PropertyEditorSupport { public void setAsText( String value ) { setValue( new Criterion() ); } }  As far as changes to the form goes, it does require adding one more form elmemnt per item.  Where previously I'd have something like:  criterion[0].field=xxx criterion[0].value=xxx criterion[n].field=xxx criterion[n].value=xxx  I'd now add one more field bound directly against the collection element itself:  criterion[0]=true criterion[0].field=xxx criterion[0].value=xxx criterion[n]=true criterion[n].field=xxx criterion[n].value=xxx  The particular value bound to the collection element doesn't really matter in this case, but it can be very useful.  For example, the value can be used to generate different types of collection elements - in this case we might specify the field type so we can instantiate the correct form of the criterion like StringCriterion, DateRangeCriterion, etc...  Anyway, its a trivial fix to enable this (again, just sort the array by property name and the natural sort order of the strings works out to be correct,) and I've already done some minor testing of the approach simply by subclassing ServletRequestDataBinder and overriding bind(PropertyValues values) to wrap the values and sort appropriately.    It works like a charm and is much simpler than some of the altnerative approaches.    ---  **Affects:** 1.1.2","closed","type: enhancement,","spring-projects-issues","2005-01-18T06:23:12Z","2005-01-31T02:52:31Z"
"","4915","PagedListHolder set dependencies on a Bind [SPR-183]","**[Steve Bendiola](https://jira.spring.io/secure/ViewProfile.jspa?name=bendiola)** opened **[SPR-183](https://jira.spring.io/browse/SPR-183?redirect=false)** and commented  This shows up when the PagedListHolder is not kept in the session but created and bound on every pagination request.  When you bind the request paramaters order is important for the setPage and setPageSize methods.  If setPage is called before setPageSize their is a possiblity that the desired page will be set to 0, getNrOfPages() is dependent on pageSize.  Solution is to move this logic to the gettter methods.  public void setPage(int page) { if(page >= this.getNrOfPages()) { this.page = this.getNrOfPages() - 1; } else { this.page = page; } }  public void setPageSize(int pageSize) { if(pageSize != this.pageSize) { this.pageSize = pageSize; this.page = 0; } }   ---  **Affects:** 1.0.2","closed","in: core,","spring-projects-issues","2004-06-23T02:19:02Z","2004-06-23T04:50:54Z"
"","5542","Implement Command Pattern for ApplicationEvent + ApplicationListener [SPR-815]","**[Stephen](https://jira.spring.io/secure/ViewProfile.jspa?name=stlum9495)** opened **[SPR-815](https://jira.spring.io/browse/SPR-815?redirect=false)** and commented  1. Currently in its present form, if I want to execute specific logic based on events / application events in Spring, I have to do the following:    a.  implement ApplicationListener    b.  override onApplicationEvent(ApplicationEvent event) { }  2. However if I do so, I'll be left with the following if statement / its equivalent when I implement:    MyActionListener implements ActionListener {    public void onApplicationEvent(ApplicationEvent event) {    if (event instanceof ContextClosedEvent)    System.out.println(""ContextClosedEvent called"");    else if (event instanceof ContextRefreshedEvent)    System.out.println(""ContextRefreshedEvent called"");    else if (event instanceof RequestHandledEvent)    System.out.println(""RequestHandledEvent called"");    }    }  3. I now have bad memories of early Swing code + actionPerformed().  Just imagine if I keep adding CustomEvents?  4. I suggest a small simple change to implement the command pattern(feel free to hack away at my naming conventions =)     a.  ApplicationEvent, RequestHandledEvent,   ContextRefreshedEvent,   ContextClosedEvent all implement interface Commandxxx    b.  interface Commandxxx defines one method, execute();    c.  all new Events extend ApplicationEvent and implement Commandxxx  5. I think my theory is a good idea, because making someone implement Commandxxx interface doesn't add to the problem...because  as soon as you create any CustomEvent in Spring, you are automatically dependent on the framework as you have to extend ApplicationEvent  6. If you want, I'd be happy to make the change myself.    ---  **Affects:** 1.2 RC1  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2005-03-23T19:22:52Z","2012-06-19T09:37:26Z"
"","5161","ArrayOutOfBoundsException thrown by DefaultListableBeanFactory when using abstract beans and Velocity views [SPR-432]","**[Stephen Baishya](https://jira.spring.io/secure/ViewProfile.jspa?name=sbaishya)** opened **[SPR-432](https://jira.spring.io/browse/SPR-432?redirect=false)** and commented  Trying to access a Velocity view results in the following log:  ---  12:02:30,207 ERROR [Engine] StandardWrapperValve[spring]: Servlet.service() forservlet spring threw exception java.lang.ArrayIndexOutOfBoundsException: 2 at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:196) at org.springframework.context.support.AbstractApplicationContext.getBeansOfType(AbstractApplicationContext.java:474) at org.springframework.beans.factory.BeanFactoryUtils.beansOfTypeIncludingAncestors(BeanFactoryUtils.java:108) at org.springframework.beans.factory.BeanFactoryUtils.beansOfTypeIncludingAncestors(BeanFactoryUtils.java:112) at org.springframework.beans.factory.BeanFactoryUtils.beanOfTypeIncludingAncestors(BeanFactoryUtils.java:141) at org.springframework.web.servlet.view.velocity.VelocityView.initApplicationContext(VelocityView.java:182) at org.springframework.context.support.ApplicationObjectSupport.setApplicationContext(ApplicationObjectSupport.java:79) at org.springframework.web.servlet.view.AbstractCachingViewResolver.loadAndConfigureView(AbstractCachingViewResolver.java:123) at org.springframework.web.servlet.view.AbstractCachingViewResolver.resolveViewName(AbstractCachingViewResolver.java:78) at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:663) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:562) at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:321) at javax.servlet.http.HttpServlet.service(HttpServlet.java:810) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:237) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:157) at uk.co.britannia.releasemanagement.logging.LogFilter.doFilter(LogFilter.java:25) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:186) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:157) at org.jboss.web.tomcat.filters.ReplyHeaderFilter.doFilter(ReplyHeaderFilter.java:75) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:186) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:157) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:214) at org.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:104) at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:520) at org.apache.catalina.core.StandardContextValve.invokeInternal(StandardContextValve.java:198) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:152) at org.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:104) at org.jboss.web.tomcat.security.CustomPrincipalValve.invoke(CustomPrincipalValve.java:44) at org.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:102) at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:462) at org.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:102) at org.jboss.web.tomcat.security.SecurityAssociationValve.invoke(SecurityAssociationValve.java:169) at org.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:102) at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:520) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:137) at org.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:104) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:118) at org.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:102) at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:520) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) at org.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:104) at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:520) at org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:929) at org.apache.coyote.tomcat5.CoyoteAdapter.service(CoyoteAdapter.java:160) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:799) at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.processConnection(Http11Protocol.java:705) at org.apache.tomcat.util.net.TcpWorkerThread.runIt(PoolTcpEndpoint.java:577) at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:683) at java.lang.Thread.run(Thread.java:534)  ---  Line 196 of DefaultListableBeanFactory.java reads  logger.debug(""Ignoring match to abstract bean definition '"" + beanNames[i] + ""'"");  However, since the block of code containing this is actually iterating through the array 'factoryNames', I suspect that line 196 should read  logger.debug(""Ignoring match to abstract bean definition '"" + factoryNames[i] + ""'"");  ---  **Affects:** 1.1.1","closed","in: core,","spring-projects-issues","2004-10-26T23:16:36Z","2019-01-13T22:53:29Z"
"","5735","Misleading property reference in documentation of MethodInvokingFactoryBean [SPR-1027]","**[Stephane Bailliez](https://jira.spring.io/secure/ViewProfile.jspa?name=sbailliez)** opened **[SPR-1027](https://jira.spring.io/browse/SPR-1027?redirect=false)** and commented  This is both concerning the JavaDoc and PDF documentation. In the sentence: 'Arguments for the method invocation may be specified by setting the args property'  'args property' should be replaced by 'arguments property' For the javadoc you should provide a link to setArguments(Object[]) as you do for targetMethod, targetClass, targetObject.  The same sentence should be fixed p. 37 (last sentence of the page) of the PDF documentation   ---  **Affects:** 1.2.1","closed","type: enhancement,","spring-projects-issues","2005-06-08T20:00:35Z","2005-06-13T03:41:33Z"
"","5168","session.flush executes sql that were rolled back [SPR-439]","**[Stefan Meyer](https://jira.spring.io/secure/ViewProfile.jspa?name=s.meyer)** opened **[SPR-439](https://jira.spring.io/browse/SPR-439?redirect=false)** and commented  situation: - a transaction is begun. - different objects are persisted or removed from the database. - the transaction is rolled back.  Problem: - The database operations are first put into hibernate's session cache. And they won't be executed/removed until session.flush() or session.clear() are called. The TransactionInterceptor only issues a rollback on the Transaction. Therefore flushing the session after the transaction is over will execute the database operations even though they should have been rolled back.  I have fixed these issues by making changes to HibernateTransactionManager, i.e. flushing the session and setting the sessionHolder.rollbackOnly to false before rollback.   ---  **Affects:** 1.0.2","closed","type: bug,","spring-projects-issues","2004-10-31T19:54:49Z","2004-11-02T01:39:16Z"
"","5167","problems with sessionHolder.rollbackOnly [SPR-438]","**[Stefan Meyer](https://jira.spring.io/secure/ViewProfile.jspa?name=s.meyer)** opened **[SPR-438](https://jira.spring.io/browse/SPR-438?redirect=false)** and commented  situation: - there is a thread bound hibernate session. - a method A is called and a transactionInterceptor begins a new Transaction on the thread bound session. - method A calls method B. The invocation is again intercepted by a TransactionInterceptor which behavior is PROPAGATION_REQUIRED. The existing transaction is reused. - An exception is thrown in the body of method B. - The TransactionInterceptor on method B catches the exception and calls sessionHolder.setRollbackOnly(). - The top-level TransactionInterceptor will find that sessionholder.rollbackOnly=true and rollback the transaction.  problem: sessionHolder.rollbackOnly is never reset although the transaction is over. Thus following transactions on this session will be rolled back as well.   ---  **Affects:** 1.0.2","closed","type: bug,","spring-projects-issues","2004-10-31T19:53:32Z","2004-11-01T04:03:26Z"
"","5551","Javadoc of CallableStatementCallback doesn't state whether you may/must close the statement [SPR-824]","**[Stefan Koch](https://jira.spring.io/secure/ViewProfile.jspa?name=schuski)** opened **[SPR-824](https://jira.spring.io/browse/SPR-824?redirect=false)** and commented  The javadoc of CallableStatementCallback doesn't state whether you may/must close the statement. We assumed that the statement is closed by Spring but found that cursors opened within the callback were no automatically closed leading to the conclusion that the statement isn't closed by Spring either. So if you work with a connection pool, statements and cursors can live forever. We now close the ResultSet ourself (as you shpuld do anyway) but I still don't know whether we have a memory leak in that callback.   ---  **Affects:** 1.1.5","closed","type: enhancement,","spring-projects-issues","2005-03-25T00:19:37Z","2005-03-25T00:31:35Z"
"","5662","Provide a suppressBinding to be able to suppress binding (and not only validation) [SPR-943]","**[Stefaan Destoop](https://jira.spring.io/secure/ViewProfile.jspa?name=sdestoop)** opened **[SPR-943](https://jira.spring.io/browse/SPR-943?redirect=false)** and commented  You can turn validation of by calling suppressValidation(), but if binding fails, you get an error, even if the user wants to cancel the action.  As a proposed solution, a method suppressBinding(request) would turn off binding if wanted just as you can turn off validation.  The #5516 and topic http://forum.springframework.org/viewtopic.php?t=4713 probably need this enhancements in order to work fully correct.  See for topic http://forum.springframework.org/viewtopic.php?t=5273 for a discussion on this.  Suggested patch (the if statement is new and the suppressBinding() method):      /**      * Bind the parameters of the given request to the given command object.      * @param request current HTTP request      * @param command the command to bind onto      * @return the ServletRequestDataBinder instance for additional custom validation      * @throws Exception in case of invalid state or arguments      */     protected final ServletRequestDataBinder bindAndValidate(HttpServletRequest request, Object command)             throws Exception {         ServletRequestDataBinder binder = createBinder(request, command);         if (!suppressBinding(request)) { // This is added             binder.bind(request);             onBind(request, command, binder.getErrors());             if (this.validators != null && isValidateOnBinding() && !suppressValidation(request)) {                 for (int i = 0; i < this.validators.length; i++) {                     ValidationUtils.invokeValidator(this.validators[i], command, binder.getErrors());                 }             }             onBindAndValidate(request, command, binder.getErrors());         } // This is added         return binder;     }          /**      * Return whether to suppress binding (and validation) for the given request.      * Default implementation always returns false. Can be overridden      * in subclasses to suppress binding, for example, if a special      * request parameter is set.      * @param request current HTTP request      * @return whether to suppress binding (and validation) for the given request      */     protected boolean suppressBinding(HttpServletRequest request) {         return false;     }  ---  **Affects:** 1.1.5, 1.2 RC1, 1.2 RC2","closed","type: enhancement,","spring-projects-issues","2005-05-12T09:26:30Z","2019-01-11T22:06:21Z"
"","5182","Be able to replace the single session instance with a new instance after a database exception [SPR-453]","**[Stefaan Destoop](https://jira.spring.io/secure/ViewProfile.jspa?name=sdestoop)** opened **[SPR-453](https://jira.spring.io/browse/SPR-453?redirect=false)** and commented  The single sesion mode in OpenSessionInViewFilter has a big disadvantage:  (taken from the JavaDOC): ""A single session per request allows for most efficient first-level caching, but can cause side effects, for example on saveOrUpdate or if continuing after a rolled-back transaction. ..."" In order to counter (some) side effects, I want to close the session and replace it with a new one.  From what I can read from the Hibernate forums, this is recommended by Hibernate after an exception.  Proposed solution: In the OpenSessionInViewFilter, we shouldn't use the local variable 'session' when closing the session.  Instead, we request it from the TransactionSynchronizationManager: (replace in the finally block in case of not participating and single session) SessionHolder sessionHolder = (SessionHolder)TransactionSynchronizationManager.unbindResource(sessionFactory); Session currentSession = sessionHolder.getSession(); logger.debug(""Closing single Hibernate session in OpenSessionInViewFilter""); closeSession(currentSession, sessionFactory);  In fact, the OpenSessionInViewInterceptor already does that as the create and close are in two seperate methods.  To call the replaceWithNewSingleSession, I have 4 posible solutions.  The problem is that we can't set a reference to the OpenSessionInViewFilter, because it isn't a singleton and it isn't set by spring but instead initialized from the web.xml. 1. Add a static method replaceWithNewSingleSession(SessionFactory) on the OpenSessionInViewFilter.    /**  * Replace the single session with a new instance. * This is extremely useful after a database error such as * DataIntegrityViolationException. * `@param` sessionFactory *         The session factoy in use.  */ public static void replaceWithNewSingleSession(SessionFactory sessionFactory) { SessionHolder sessionHolder = (SessionHolder)TransactionSynchronizationManager.unbindResource(sessionFactory); Session oldSession = sessionHolder.getSession(); if (oldSession != null) { SessionFactoryUtils.closeSessionIfNecessary( oldSession, sessionFactory); } Session newSession = SessionFactoryUtils.getSession(sessionFactory, true); TransactionSynchronizationManager.bindResource(sessionFactory, new SessionHolder(newSession)); newSession.setFlushMode(FlushMode.NEVER); } (The same code or better a direct call to this code could be set in the OpenSessionInViewInterceptor).  In the code of our controllers we need to have a new sessionFactory property set, so we can call: try { methodThatMightTrowException(); } catch(DataIntegrityViolationException dive) { errors.reject(""dataIntegrityViolation"", ""A data integrity exception occured""); replaceWithNewSingleSession(); } The replaceWithNewSingleSession and setSessionFactory could be put in the AbstractController, however, this would be confusing for people not using hibernate or not using the OpenSessionInViewFilter. /** * Switch from single session mode to deferred close (= ""multiple"" session mode).   */   protected void replaceWithNewSingleSession() {   if (sessionFactory != null) {   DynamicOpenSessionInViewFilter.replaceWithNewSingleSession(sessionFactory);   } else {   logger.error(""Cannot replace with a new session unless sessionFactory is set for this spring bean (class: ""+this.getClass().toString()+"")"");   }   }  2. We could have the sessionFactory kept static in the OpenSessionInViewFilter after it has been looked up us that static instance inside the replaceWithNewSingleSession.  This is my current solution.    private static SessionFactory sessionFactory;  /** * Look up the SessionFactory that this filter should use. *   \The default implementation looks for a bean with the specified name * in Spring's root application context. * `@return` the SessionFactory to use * `@see` #getSessionFactoryBeanName   */   protected SessionFactory lookupSessionFactory() {   // replace super.lookupSessionFactory with current code in OpenSessionInViewFilter.   sessionFactory = super.lookupSessionFactory();   return sessionFactory;   }  3. We could create a ThreadLocal object to keep the sessionFactory instance.  4. Only provide this functionality on the OpenSessionInViewInterceptor class as this one is referencable from the spring context.  The controllers then need to have a reference to the OpenSessionInViewInterceptor.    ---  **Affects:** 1.1.1","closed","type: enhancement,","spring-projects-issues","2004-11-11T21:16:44Z","2019-01-13T22:53:26Z"
"","5117","Provide next to successView a successRedirect and successForward [SPR-387]","**[Stefaan Destoop](https://jira.spring.io/secure/ViewProfile.jspa?name=sdestoop)** opened **[SPR-387](https://jira.spring.io/browse/SPR-387?redirect=false)** and commented  Currently, you can only specify a succes view in the SimpleFormController.  However, there are many occasions were you want to redirect or forward to another page when the form was processed successful.  With this solution, you need to specify in your Spring configuration  file one of the three possible properties; successView: view when the form has been processed successfully (such as  the case now) successForward: forward to the internal URL when the form has been  processed successfully. successRedirect: redirect to the URL when the form has been processed  successfully.  Patch for SimpleFormController: /** * A controller to forward to on success   \*/   private String successForward;   /**  * A valid url to redirect to on success   */   private String successRedirect;    /**    * Returns the successForward controller name.   * `@return` Returns the successForward controller name.     \*/     public String getSuccessForward() {     return successForward;     }     /**   * Sets the successForward controller name.   * `@param` successForward The successForward controller name to set.     */     public void setSuccessForward(String successForward) {     if (getSuccessView() != null) {     throw new ApplicationContextException(""Cannot set  successForward when successView already set""); } if (getSuccessRedirect() != null) { throw new ApplicationContextException(""Cannot set successForward when successRedirect already set""); } this.successForward = successForward; } /** * Returns the successRedirect URL. * `@return` Returns the successRedirect URL.   \*/   public String getSuccessRedirect() {   return successRedirect;   }   /** * Sets the successRedirect URL. * `@param` successRedirect The successRedirect URL to set.   */   public void setSuccessRedirect(String successRedirect) {   if (getSuccessView() != null) {   throw new ApplicationContextException(""Cannot set   successRedirect when successView already set"");   }   if (getSuccessForward() != null) {   throw new ApplicationContextException(""Cannot set   successRedirect when successForward already set"");   }   this.successRedirect = successRedirect;   }  // Replace the setSuccessView: /** * Sets the successView * `@param` successView The successView to set.   */   public void setSuccessView(String successView) {   if (getSuccessForward() != null) {   throw new ApplicationContextException(""Cannot set   successView when successForward already set"");   }   if (getSuccessRedirect() != null) {   throw new ApplicationContextException(""Cannot set   successView when successRedirect already set"");   }   super.setSuccessView(successView);   }   */  // replace the onSubmit: /** * Simpler onSubmit version. Called by the default implementation of   the onSubmit * version with all parameters. *   \Default implementation calls onSubmit(command), using the returned ModelAndView * if actually implemented in a subclass. Else, the default behavior   is applied: * rendering the success view if one is set with the command and   Errors instance as model OR * rendering the success forward if one is set with the command and   Errors instance as model OR * rendering the success redirect if one is set with the command and   Errors instance as model. *   \Subclasses can override this to provide custom submission handling that * does not need request and response. *   \Call \errors.getModel()\ to populate the ModelAndView model * with the command and the Errors instance, under the specified   command name, * as expected by the ""spring:bind"" tag. * `@param` command form object with request parameters bound onto it * `@param` errors Errors instance without errors * `@return` the prepared model and view, or null * `@throws` Exception in case of errors * `@see` #onSubmit(HttpServletRequest, HttpServletResponse, Object,   BindException) * `@see` #onSubmit(Object) * `@see` #setSuccessView * `@see` #setSuccessForward * `@see` #setSuccessRedirect * `@see` org.springframework.validation.Errors * `@see` org.springframework.validation.BindException#getModel   */   protected ModelAndView onSubmit(Object command, BindException   errors) throws Exception {   ModelAndView mv = onSubmit(command);   if (mv != null) {   // simplest onSubmit version implemented in custom subclass   return mv;   }   else {   // default behavior: render success view   if (getSuccessView() != null) {   return new ModelAndView(getSuccessView(),   errors.getModel());   }   else if (getSuccessForward() != null) {   return new ModelAndView(new   InternalResourceView(getSuccessForward()),   errors.getModel());   }   else if (getSuccessRedirect() != null) {   return new ModelAndView(new   RedirectView(getSuccessRedirect()), errors.getModel());   }   else {   throw new ServletException(""successView, successForward   or successRedirect isn't set"");   }   }   }    ---  **Affects:** 1.1.1  2 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2004-10-10T20:57:00Z","2019-01-11T14:01:44Z"
"","5107","Add velocity macro springMessage [SPR-377]","**[Stefaan Destoop](https://jira.spring.io/secure/ViewProfile.jspa?name=sdestoop)** opened **[SPR-377](https://jira.spring.io/browse/SPR-377?redirect=false)** and commented  There is no macro for translating a message with Velocity.  A similar macro to the JSTL tag message could be created.  Here is a fix:  Add to src\org\springframework\web\servlet\view\velocity\spring.vm:  #** * springMessage *  * Macro to translate messages.   *#   #macro( springMessage $code )   $springMacroRequestContext.getMessage($code)   #end  #** * springMessage *  * Macro to translate messages.   *#   #macro( springMessage $code $defaultMessage )   $springMacroRequestContext.getMessage($code, $defaultMessage)   #end    ---  **Affects:** 1.1.1","closed","type: enhancement,","spring-projects-issues","2004-10-06T19:51:23Z","2004-10-23T01:55:11Z"
"","5295","Injecting [singleton] beans into ServletContext [SPR-566]","**[Stasys Adiklis](https://jira.spring.io/secure/ViewProfile.jspa?name=stas)** opened **[SPR-566](https://jira.spring.io/browse/SPR-566?redirect=false)** and commented  It would be good if XmlWebApplicationContext could inject some beans into ServletContext automatically. Like this for example:  \ \   --- No further details from [SPR-566](https://jira.spring.io/browse/SPR-566?redirect=false)","closed","type: enhancement,","spring-projects-issues","2004-12-16T23:51:02Z","2019-01-11T12:41:58Z"
"","5294","Getting objects from ServletContext [SPR-565]","**[Stasys Adiklis](https://jira.spring.io/secure/ViewProfile.jspa?name=stas)** opened **[SPR-565](https://jira.spring.io/browse/SPR-565?redirect=false)** and commented  It would be good to have an ability to pull objects from ServletContext like this (via XmlWebApplicationContext):  \ \ \ \ \ \ \ \ \ \  Instead of cracking up things like this:  public class ValueListConfig extends AbstractRefreshableWebApplicationContext { protected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) throws IOException, BeansException { ServletContext scontext = getServletContext(); Map adapters = new HashMap();          adapters.put(""somethingDao"", scontext.getAttribute(""somethingDao""));              Class c;         try {             ClassLoader cl = Thread.currentThread().getContextClassLoader();             c = cl.loadClass(""net.mlw.vlh.DefaultValueListHandlerImpl"");         } catch (ClassNotFoundException ex) {             throw new RuntimeException(ex);         }         MutablePropertyValues pv = new MutablePropertyValues();         pv.addPropertyValue(""config.adapters"", adapters);         BeanDefinition beanDefinition = new RootBeanDefinition(c, null, pv);         beanFactory.registerBeanDefinition(""valueListHandler"", beanDefinition);     }  }   ---  **Affects:** 1.1.3","closed","type: enhancement,","spring-projects-issues","2004-12-16T23:37:13Z","2004-12-22T01:30:14Z"
"","5844","Small changes to PagedListHolder for subclassing [SPR-1141]","**[Stan Butler](https://jira.spring.io/secure/ViewProfile.jspa?name=butlersw3)** opened **[SPR-1141](https://jira.spring.io/browse/SPR-1141?redirect=false)** and commented  I am creating a subclass of PagedListHolder because I want to be able to set the page count to a number different than the source size.  The reason for this is for my implementation of searches in our system.  I run a quick count query based on filter criteria and then run the search based on the filter criteria plus pagination criteria.  Example:  Search for products using name Result:   5,000 products matching search, show 15 per page  I only want to retrieve the 15 for display purposes, but I want to indicate that there are 5,000 total matching the search.  I overloaded the getPageCount() method to return the size of the results.  However, the getLastLinkedPage() method of PagedListHolder uses the this.getPageCount() call, which bypasses my overloaded implementation.  Can the method implementations in PagedListHolder be changed to not specify this.xxxx calls to allow easier subclassing??  Most of them are done correctly, and only a few need to be changed.   ---  **Affects:** 1.2.2","closed","type: enhancement,","spring-projects-issues","2005-07-15T01:01:01Z","2005-07-19T06:50:52Z"
"","5873","BeanCreationException  unless spring.jar  is moved to server lib directory in jboss [SPR-1171]","**[Sripada Das](https://jira.spring.io/secure/ViewProfile.jspa?name=sripada_das)** opened **[SPR-1171](https://jira.spring.io/browse/SPR-1171?redirect=false)** and commented  Have the following applicationcontext.xml  \ 	\ 		\ 			\ejb/customerService\ 		\ 		\ 			\true\ 		\ 		\ 			\ 				com.sapient.mvne.poc.biz.common.CustomerService 			\ 		\ 	\ \  Get the following error during deployment:  ******Start of error ********************************************  18:11:52,764 ERROR [[/customerservice]] Servlet /customerservice threw load() exception org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'customerService' defined in resource [/WEB-INF/ejbApplicationContext.xml] of ServletContext: Error setting property values; nested exception is org.springframework.beans.PropertyAccessExceptionsException: PropertyAccessExceptionsException (1 errors); nested propertyAccessExceptions are: [org.springframework.beans.TypeMismatchException: Failed to convert property value of type [java.lang.String] to required type [java.lang.Class] for property 'businessInterface'; nested exception is java.lang.IllegalArgumentException: Invalid class name: com.sapient.mvne.poc.biz.common.CustomerService ] PropertyAccessExceptionsException (1 errors) org.springframework.beans.TypeMismatchException: Failed to convert property value of type [java.lang.String] to required type [java.lang.Class] for property 'businessInterface'; nested exception is java.lang.IllegalArgumentException: Invalid class name: com.sapient.mvne.poc.biz.common.CustomerService  java.lang.IllegalArgumentException: Invalid class name: com.sapient.mvne.poc.biz.common.CustomerService  **************End of error *******************************************  Get this error only if spring.jar is packaged in the application ear file.  This error does not occur if the spring.jar file is added to the server lib directory.    ---  **Affects:** 1.2.2","closed","in: core,","spring-projects-issues","2005-07-26T04:18:44Z","2019-01-11T19:35:08Z"
"","5174","Bean property binding multi dimentional array or collection error [SPR-445]","**[Srinivas Janakiraman](https://jira.spring.io/secure/ViewProfile.jspa?name=janaki_srini)** opened **[SPR-445](https://jira.spring.io/browse/SPR-445?redirect=false)** and commented  When I tried to bind properties for multi dimensional array or nested list, I get the following error.  BeanWrapperImpl does not support multi dimensional array/collection.  org.springframework.beans.NullValueInNestedPathException: Invalid property 'data[InvalidUserInfoException][4][newUser]' of bean class [com.vonage.ebt.service.smbUserManagement.AddSmbUserTest]: Value of nested property 'data[InvalidUserInfoException][4][newUser]' is null at org.springframework.beans.BeanWrapperImpl.getNestedBeanWrapper(BeanWrapperImpl.java:427) at org.springframework.beans.BeanWrapperImpl.getBeanWrapperForPropertyPath(BeanWrapperImpl.java:401) at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:580) at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:720) at org.springframework.beans.BeanWrapperImpl.setPropertyValues(BeanWrapperImpl.java:747) at org.springframework.validation.DataBinder.bind(DataBinder.java:240)   ---  **Affects:** 1.1 final  **Attachments:** - [BeanWrapperImpl changed methods.txt](https://jira.spring.io/secure/attachment/10304/BeanWrapperImpl+changed+methods.txt) (_8.93 kB_) - [PropBindTest.java](https://jira.spring.io/secure/attachment/10306/PropBindTest.java) (_2.22 kB_) - [sample.properties](https://jira.spring.io/secure/attachment/10307/sample.properties) (_89 bytes_) - [TestBean.java](https://jira.spring.io/secure/attachment/10305/TestBean.java) (_1.46 kB_)","closed","in: core,","spring-projects-issues","2004-11-04T04:09:51Z","2019-01-11T14:17:57Z"
"","5856","How to access resource i.e Beans accross projects? [SPR-1154]","**[soneey](https://jira.spring.io/secure/ViewProfile.jspa?name=soneey)** opened **[SPR-1154](https://jira.spring.io/browse/SPR-1154?redirect=false)** and commented  I have two projects configured in MyEclipse. Now i have my spring configuration files in Project A that defines the beans of Project B.  But at runtime it is not recognizing fully qualified class name as that class doesn't belong to the same project.  How will i access beans from other project in this project.  Please reply ASAP.  Soneey   ---  **Affects:** 1.2.2","closed","in: core,","spring-projects-issues","2005-07-19T15:36:19Z","2019-01-11T19:33:37Z"
"","5038","TopLink support [SPR-308]","**[Slavik Markovich](https://jira.spring.io/secure/ViewProfile.jspa?name=slavikm)** opened **[SPR-308](https://jira.spring.io/browse/SPR-308?redirect=false)** and commented  Basic support for TopLink under the orm package. Modeled after Hibernate support. The code also includes the petclinic sample used with TopLink on HSQL.   ---  **Affects:** 1.1 RC2  **Attachments:** - [SessionHolder.java](https://jira.spring.io/secure/attachment/10266/SessionHolder.java) (_1.97 kB_) - [spring-toplink.zip](https://jira.spring.io/secure/attachment/10198/spring-toplink.zip) (_3.96 MB_) - [ToplinkUtils.java](https://jira.spring.io/secure/attachment/10265/ToplinkUtils.java) (_17.36 kB_)  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2004-09-02T00:58:24Z","2005-05-02T10:46:50Z"
"","5874","A VelocityView that supports reuse of overall page layout [SPR-1172]","**[Simon Turner](https://jira.spring.io/secure/ViewProfile.jspa?name=simonturner)** opened **[SPR-1172](https://jira.spring.io/browse/SPR-1172?redirect=false)** and commented  The existing VelocityView allows a single ""url"" property which defines which template is used to build the page. This is fine if the referenced template is for a specific page, with any reusable templates being imported by that outer-most template via a #parse directive. However, the VelocityView does not work if the outer-most template is a reusable page-layout, and the included template(s) are page-specific. For example, if I have a layout-template like this:  \ \ \#springMessage(${titleKey})\ \ \ #parse(""${pageContents}"") \ \  This limitation can easily be overcome by allowing a ""tileMap"" Map property to be defined for the VelocityView, where keys are arbitrary Strings, and values are template-paths (""pageContents"" above) or messageResource keys (""titleKey"" above):  package org.springframework.web.servlet.view.velocity;  public class TiledVelocityView extends VelocityView {      private Map tileMap;          public Map getTileMap() {         return tileMap;     }     public void setTileMap(Map tileMap) {         this.tileMap = tileMap;     }          protected void renderMergedTemplateModel(Map model, HttpServletRequest request, HttpServletResponse response) throws Exception {         model.putAll(getTileMap());         super.renderMergedTemplateModel(model, request, response);     }  }  \ \\layouts/layout.vm\\ \ \ \\my.page.title.key\\ \\pages/mypage.vm\\ \ \ \\true\\ \   --- No further details from [SPR-1172](https://jira.spring.io/browse/SPR-1172?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-07-26T04:41:33Z","2006-03-13T09:11:22Z"
"","5237","JndiObjectFactoryBean does not implement InitializingBean [SPR-508]","**[Silvester van der Bijl](https://jira.spring.io/secure/ViewProfile.jspa?name=silvester)** opened **[SPR-508](https://jira.spring.io/browse/SPR-508?redirect=false)** and commented  AbstractJndiLocator implements InitializingBean. The new version of JndiObjectFactoryBean now extends from JndiObjectLocator, which does not implement this interface.  This caused problems for us when trying to use a JNDI configured datasource in an EJB environment. The JNDI object was never located, and so always returned null (without any log messages, just a PropertyAccessExceptionsException).  Once the problem was located, it was easily fixed by adding the interface, but i took a long time to track down.  Hope this helps, Silvester    ---  **Affects:** 1.2 RC1","closed","in: core,","spring-projects-issues","2004-12-01T18:34:56Z","2019-01-11T12:42:21Z"
"","5626","Spring frame work can not find constructor  [SPR-899]","**[Shravan  Reddy](https://jira.spring.io/secure/ViewProfile.jspa?name=dsrkreddi)** opened **[SPR-899](https://jira.spring.io/browse/SPR-899?redirect=false)** and commented  I have the following problem when I am using the Spring framework 1.1.5 and I do't have any problem when I use 1.1.2 version. The problem is, I have a following  class  JDBCObject as below.  /** * The JDBCObject allows uniform storage and processing of data of different types - all the JDBC supported types listed in java.sql.Types *  * `@copyright` 2004 UBS IB * `@version` $Revision: 1.0 $ *  * `@author` $Author: rmanol $ $Date: 2004/04/26 15:07:00 $   */   package com.ubs.tsna.commons.sql;  import java.text.ParseException;  import com.ubs.tsna.commons.configuration.BeanRegistry;  public class JDBCObject {      /**      * Zero-argument default constructor      */     public JDBCObject()     {     }          /**      * Constructor; takes a value and a data type as parameters      * @param value The JDBC value (one of the valid JDBC data types)      * @param javaSqlType An integer identifying the data type of the value passed in. One of the values enumerated in java.sql.Types      * @param decimals Number of decimals for this data type      */     public JDBCObject(Object value, int javaSqlType, int decimals)     {     	// Initialize the internal members     	this.javaSqlType = javaSqlType;     	this.value = value;     	this.numberOfDecimals = decimals;     }          /**      * Constructor; takes a value and a data type as parameters      * @param value The JDBC value (one of the valid JDBC data types)      * @param javaSqlType An integer identifying the data type of the value passed in. One of the values enumerated in java.sql.Types      */     public JDBCObject(Object value, int javaSqlType)     {     	// Initialize the internal members     	this.javaSqlType = javaSqlType;     //	this.value = toValue(value, javaSqlType);     	this.value = value;     }          /**      * Constructor; takes a string value and a data type as parameters      * @param value The JDBC value (one of the valid JDBC data types)      * @param javaSqlType An integer identifying the data type of the value passed in. One of the values enumerated in java.sql.Types      * @throws ParseException when a string value cannot be parsed into a date      */     public JDBCObject(String value, int javaSqlType) throws ParseException     {         // Initialize the internal members     	this.setJavaSqlType(javaSqlType);     	this.setValue(value, javaSqlType);     }          /**      * Constructor; takes a string value and a data type as parameters      * @param value The JDBC value (one of the valid JDBC data types)      * @param javaSqlType A string identifying the data type of the value passed in. One of the symbolic names enumerated in java.sql.Types      * @param decimals Number of decimals for this data type      * @throws ParseException when a string value cannot be parsed into a date      */     public JDBCObject(String value, String javaSqlTypeName, int decimals) throws ParseException     {         // Initialize the internal members     	int type = com.ubs.tsna.commons.sql.Types.getType(javaSqlTypeName);     	this.setJavaSqlType(type);     	this.setValue(toValue(value,type,decimals));     	this.numberOfDecimals = decimals;     }          /**      * Constructor; takes a string value and a data type as parameters      * @param value The JDBC value (one of the valid JDBC data types)      * @param javaSqlType A string identifying the data type of the value passed in. One of the symbolic names enumerated in java.sql.Types      * @param outParameter Indicates whether this object is used to represent an output parameter      * @param returnStatus Indicates whether this object is used to represent the return status of a stored procedure      * @throws ParseException when a string value cannot be parsed into a date      */     public JDBCObject(String value, String javaSqlTypeName, boolean outParameter, boolean returnStatus) throws ParseException     {         // Initialize the internal members     	this(value, javaSqlTypeName,0);     	this.outParameter = outParameter;     	this.returnStatus = returnStatus;     }          /**      * Constructor; takes a cursor and a column position as parameters      * @param resultSet An open cursor from which we can read a value      * @param columnIndex The index of the column we are trying to read (1..numberOfColumns)      * @exception java.sql.SQLException Thrown if the data can not be read from the cursor.      */     public JDBCObject(java.sql.ResultSet resultSet, int columnIndex) throws java.sql.SQLException     {     	// Get the metadata for the result set, in order to find the data type of the column     	java.sql.ResultSetMetaData metaData = resultSet.getMetaData();     	// Get the column's data type (one of the values in java.sql.Types)     	javaSqlType = metaData.getColumnType(columnIndex);     	// Get the value from the cursor and initialize the internal member     	switch (javaSqlType)     	{     		case java.sql.Types.ARRAY :     			value = resultSet.getArray(columnIndex);     			break;     		case java.sql.Types.BIGINT :     			value = new Long(resultSet.getLong(columnIndex));     			break;     		case java.sql.Types.BINARY :     			value = resultSet.getBinaryStream(columnIndex);     			break;     		case java.sql.Types.BIT :     			value = ""'?'"";     			break;     		case java.sql.Types.BLOB :     			value = ""'?'"";     			break;     		case java.sql.Types.CHAR :     			value = resultSet.getString(columnIndex);     			break;     		case java.sql.Types.CLOB :     			value = resultSet.getClob(columnIndex);     			break;     		case java.sql.Types.DATE :     			value = resultSet.getDate(columnIndex);     			break;     		case java.sql.Types.DECIMAL :     			if (numberOfDecimals==0)     			{     				value = new Long(resultSet.getLong(columnIndex));     			}     			else     			{     				value = new Double(resultSet.getDouble(columnIndex));     			}     			break;     		case java.sql.Types.DISTINCT :     			value = ""'?'"";     			break;     		case java.sql.Types.DOUBLE :     			value = new Double(resultSet.getDouble(columnIndex));     			break;     		case java.sql.Types.FLOAT :     			value = new Float(resultSet.getFloat(columnIndex));     			break;     		case java.sql.Types.INTEGER :     			value = new Integer(resultSet.getInt(columnIndex));     			break;     		case java.sql.Types.JAVA_OBJECT :     			value = resultSet.getObject(columnIndex);     			break;     		case java.sql.Types.LONGVARBINARY :     			value = ""'?'"";     			break;     		case java.sql.Types.LONGVARCHAR :     			value = resultSet.getString(columnIndex);     			break;     		case java.sql.Types.NULL :     			value = null;     			break;     		case java.sql.Types.NUMERIC :     			value = new Double(resultSet.getDouble(columnIndex));     			break;     		case java.sql.Types.OTHER :     			value = ""'?'"";     			break;     		case java.sql.Types.REAL :     			value = new Double(resultSet.getDouble(columnIndex));     			break;     		case java.sql.Types.REF :     			value = resultSet.getRef(columnIndex);     			break;     		case java.sql.Types.SMALLINT :     			value = new Short(resultSet.getShort(columnIndex));     			break;     		case java.sql.Types.STRUCT :     			value = ""'?'"";     			break;     		case java.sql.Types.TIME :     			value = resultSet.getDate(columnIndex);     			break;     		case java.sql.Types.TIMESTAMP :     			value = resultSet.getTimestamp(columnIndex);     			break;     		case java.sql.Types.TINYINT :     			value = new Byte(resultSet.getByte(columnIndex));     			break;     		case java.sql.Types.VARBINARY :     			value = ""'?'"";     			break;     		case java.sql.Types.VARCHAR :     			value = resultSet.getString(columnIndex);     			break;     	}     }          /**      * The value that is being read from or written to the database.      * The data must be of one of the types listed in java.sql.Types      */     private Object value;     /**      * Accessor method for the property value      * @return The value.      */     public Object getValue()     {     	return value;     }     /**      * Mutator method for the property value.      * @param value The value to be set in the property value.      */     public void setValue(Object value)     {     	this.value = value;     }          /**      * Mutator method for the property stringValue.      * @param stringValue The stringValue to be set in the property stringValue.      * @param dataType An integer identifying the data type of the value passed in. One of the values enumerated in java.sql.Types      * @throws ParseException when a string value cannot be converted to a date      */     public void setValue(String stringValue, int dataType) throws ParseException     {     	this.value = toValue(stringValue, dataType, numberOfDecimals);     }          /**      * Number of decimals for this data type (if applicable)      */     private int numberOfDecimals;     /**      * Accessor method for the property numberOfDecimals      * @return The numberOfDecimals.      */     public int getNumberOfDecimals()     {     	return numberOfDecimals;     }     /**      * Mutator method for the property numberOfDecimals.      * @param numberOfDecimals The value to be set in the property numberOfDecimals.      */     public void setNumberOfDecimals(int numberOfDecimals)     {     	this.numberOfDecimals = numberOfDecimals;     }          /**      * The data type of the value that is being read from or written to the database.      * The data type must be of one of the types listed in java.sql.Types      */     private int javaSqlType;     /**      * Accessor method for the property javaSqlType      * @return The javaSqlType.      */     public int getJavaSqlType()     {     	return javaSqlType;     }     /**      * Mutator method for the property javaSqlType.      * @param javaSqlType The value to be set in the property javaSqlType.      */     public void setJavaSqlType(int javaSqlType)     {     	this.javaSqlType = javaSqlType;     }          /**      * Tells whether this object corresponds to an output parameter in a stored procedure      */     private boolean outParameter;     /**      * Accessor method for the property outParameter      * @return The outParameter.      */     public boolean isOutParameter()     {     	return outParameter;     }     /**      * Mutator method for the property outParameter.      * @param outParameter The value to be set in the property outParameter.      */     public void setOutParameter(boolean outParameter)     {     	this.outParameter = outParameter;     }          /**      * Tells whether this object corresponds to the return status in a stored procedure      */     private boolean returnStatus;     /**      * Accessor method for the property returnStatus      * @return The returnStatus.      */     public boolean isReturnStatus()     {     	return returnStatus;     }     /**      * Mutator method for the property returnStatus.      * @param returnStatus The value to be set in the property returnStatus.      */     public void setReturnStatus(boolean returnStatus)     {     	this.returnStatus = returnStatus;     }          /**      * Sets a JDBC value as a parameter in a prepared statement.      * It is unusual to have an object set itself onto a target, but this design allows encapsulation of the ""switch"" statements that deal with the different data types in just one class.      * @param preparedStatement A prepared statement that needs parameters      * @param columnIndex The index of the column we are trying to set (1..numberOfColumns)      * @exception throws java.sql.SQLException Thrown if the data can not be written to the cursor.      */     public void setStatementParameter(java.sql.PreparedStatement preparedStatement, int columnIndex) throws java.sql.SQLException     {     	if (value==null)     	{     		preparedStatement.setNull(columnIndex,javaSqlType);     		return;     	}     	// Get the value from the cursor and initialise the internal member     	switch (javaSqlType)     	{     		case java.sql.Types.ARRAY :     			preparedStatement.setArray(columnIndex, (java.sql.Array) value);     			break;     		case java.sql.Types.BIGINT :     			preparedStatement.setBigDecimal(columnIndex, (java.math.BigDecimal) value);     			break;     		case java.sql.Types.BINARY :     			// What needs to ge here?     			break;     		case java.sql.Types.BIT :     			// What needs to ge here?     			break;     		case java.sql.Types.BLOB :     			preparedStatement.setBlob(columnIndex, (java.sql.Blob) value);     			break;     		case java.sql.Types.CHAR :     			preparedStatement.setString(columnIndex, (String) value);     			break;     		case java.sql.Types.CLOB :     			preparedStatement.setClob(columnIndex, (java.sql.Clob) value);     			break;     		case java.sql.Types.DATE :     			preparedStatement.setDate(columnIndex, (java.sql.Date) value);     			break;     		case java.sql.Types.DECIMAL :     			if (numberOfDecimals==0)     			{     				preparedStatement.setLong(columnIndex, ((Long) value).longValue());     			}     			else     			{     				preparedStatement.setDouble(columnIndex, ((Double) value).doubleValue());     			}     			break;     		case java.sql.Types.DISTINCT :     			// What needs to ge here?;     			break;     		case java.sql.Types.DOUBLE :     			preparedStatement.setDouble(columnIndex, ((Double) value).doubleValue());     			break;     		case java.sql.Types.FLOAT :     			preparedStatement.setFloat(columnIndex, ((Float) value).floatValue());     			break;     		case java.sql.Types.INTEGER :     			preparedStatement.setInt(columnIndex, ((Integer) value).intValue());     			break;     		case java.sql.Types.JAVA_OBJECT :     			preparedStatement.setObject(columnIndex, value);     			break;     		case java.sql.Types.LONGVARBINARY :     			// What needs to ge here?     			break;     		case java.sql.Types.LONGVARCHAR :     			preparedStatement.setString(columnIndex, (String) value);     			break;     		case java.sql.Types.NULL :     			preparedStatement.setNull(columnIndex,javaSqlType);     			break;     		case java.sql.Types.NUMERIC :     			preparedStatement.setDouble(columnIndex, ((Double) value).doubleValue());     			break;     		case java.sql.Types.OTHER :     			// What needs to ge here?     			break;     		case java.sql.Types.REAL :     			preparedStatement.setFloat(columnIndex, ((Float) value).floatValue());     			break;     		case java.sql.Types.REF :     			preparedStatement.setRef(columnIndex, (java.sql.Ref) value);     			break;     		case java.sql.Types.SMALLINT :     			preparedStatement.setShort(columnIndex, ((Short) value).shortValue());     			break;     		case java.sql.Types.STRUCT :     			// What needs to ge here?     			break;     		case java.sql.Types.TIME :     			preparedStatement.setDate(columnIndex, (java.sql.Date) value);     			break;     		case java.sql.Types.TIMESTAMP :     			preparedStatement.setTimestamp(columnIndex, (java.sql.Timestamp) value);     			break;     		case java.sql.Types.TINYINT :     			preparedStatement.setByte(columnIndex, ((Byte) value).byteValue());     			break;     		case java.sql.Types.VARBINARY :     			// What needs to ge here?     			break;     		case java.sql.Types.VARCHAR :     			preparedStatement.setString(columnIndex, (String) value);     			break;     	}     }          /**      * Returns the value of the JDBCObject as a string.      * Overrides Object.toString(), which returns a string that is not very useful.      * @return A string representation of this value.      * @exception throws java.sql.SQLException Thrown if the data can not be written to the cursor.      */     public String toString()     {     	String valueString = """";     	if (value==null)     	{     		return valueString;     	}     	switch (javaSqlType)     	{     		case java.sql.Types.ARRAY :     			valueString = ""'?'"";     			break;     		case java.sql.Types.BIGINT :     			valueString = value.toString();     			break;     		case java.sql.Types.BINARY :     			valueString = ""'?'"";     			break;     		case java.sql.Types.BIT :     			valueString = ""'?'"";     			break;     		case java.sql.Types.BLOB :     			valueString = ""'?'"";     			break;     		case java.sql.Types.CHAR :     			valueString = (String) value;     			break;     		case java.sql.Types.CLOB :     			valueString = value.toString();     			break;     		case java.sql.Types.DATE :     			valueString = value.toString();     			break;     		case java.sql.Types.DECIMAL :     			valueString = value.toString();     			break;     		case java.sql.Types.DISTINCT :     			valueString = ""'?'"";     			break;     		case java.sql.Types.DOUBLE :     			valueString = """" + ((Double) value).doubleValue();     			break;     		case java.sql.Types.FLOAT :     			valueString = """" + ((Float) value).floatValue();     			break;     		case java.sql.Types.INTEGER :     			valueString = """" + ((Integer) value).intValue();     			break;     		case java.sql.Types.JAVA_OBJECT :     			valueString = ""'?'"";     			break;     		case java.sql.Types.LONGVARBINARY :     			valueString = ""'?'"";     			break;     		case java.sql.Types.LONGVARCHAR :     			valueString = (String) value;     			break;     		case java.sql.Types.NULL :     			valueString = ""NULL"";     			break;     		case java.sql.Types.NUMERIC :     			valueString = """" + ((Double) value).doubleValue();     			break;     		case java.sql.Types.OTHER :     			valueString = ""'?'"";     			break;     		case java.sql.Types.REAL :     			valueString = """" + ((Double) value).doubleValue();     			break;     		case java.sql.Types.REF :     			valueString = ""'?'"";     			break;     		case java.sql.Types.SMALLINT :     			valueString = """" + ((Short) value).shortValue();     			break;     		case java.sql.Types.STRUCT :     			valueString = ""'?'"";     			break;     		case java.sql.Types.TIME :     			valueString = ((java.util.Date) value).toString();     			break;     		case java.sql.Types.TIMESTAMP :     			valueString = ((java.sql.Timestamp) value).toString();     			break;     		case java.sql.Types.TINYINT :     			valueString = """" + ((Byte) value).byteValue();     			break;     		case java.sql.Types.VARBINARY :     			valueString = ""'?'"";     			break;     		case java.sql.Types.VARCHAR :     			valueString = (String) value;     			break;     	}     	return valueString;     }          /**      * Converts the object's value (provided as a String) to the correct data type.      * @param stringValue The JDBC value, as a string      * @param javaSqlType An integer identifying the data type of the value passed in. One of the values enumerated in java.sql.Types      * @param decimals number of decimal positions for this data type      * @throws ParseException when a string value cannot be parsed into a date      */     public static Object toValue(String stringValue, int dataType, int decimals) throws ParseException     {         // A date formatter that formats dates in the ODBC format         java.text.SimpleDateFormat dateTimeFormatter = new java.text.SimpleDateFormat(""yyyy-MM-dd HH:mm:ss"");         java.text.SimpleDateFormat dateFormatter = new java.text.SimpleDateFormat(""yyyy-MM-dd"");                  if ((stringValue==null)||(stringValue.length()==0))         {         	return null;         }          	switch (dataType)     	{     		case java.sql.Types.ARRAY :     			return stringValue;     		case java.sql.Types.BIGINT :     			return new Long(stringValue);     		case java.sql.Types.BINARY :     			return stringValue;     		case java.sql.Types.BIT :     			return stringValue;     		case java.sql.Types.BLOB :     			return stringValue;     		case java.sql.Types.CHAR :     			return stringValue;     		case java.sql.Types.CLOB :     			return stringValue;     		case java.sql.Types.DATE :     			return dateFormatter.parse(stringValue);     		case java.sql.Types.DECIMAL :     			if (decimals==0)     			{     				return new Long(stringValue);     			}     			else     			{     				return new Double(stringValue);     			}     		case java.sql.Types.DISTINCT :     			return stringValue;     		case java.sql.Types.DOUBLE :     			return new Double(stringValue);     		case java.sql.Types.FLOAT :     			return new Float(stringValue);     		case java.sql.Types.INTEGER :     			return new Integer(stringValue);     		case java.sql.Types.JAVA_OBJECT :     			return stringValue;     		case java.sql.Types.LONGVARBINARY :     			return stringValue;     		case java.sql.Types.LONGVARCHAR :     			return stringValue;     		case java.sql.Types.NULL :     			return null;     		case java.sql.Types.NUMERIC :     			return new Double(stringValue);     		case java.sql.Types.OTHER :     			return stringValue;     		case java.sql.Types.REAL :     			return new Double(stringValue);     		case java.sql.Types.REF :     			return stringValue;     		case java.sql.Types.SMALLINT :     			return new Short(stringValue);     		case java.sql.Types.STRUCT :     			return stringValue;     		case java.sql.Types.TIME :     			return new java.sql.Time(dateTimeFormatter.parse(stringValue).getTime());     		case java.sql.Types.TIMESTAMP :     			return new java.sql.Timestamp(dateTimeFormatter.parse(stringValue).getTime());     		case java.sql.Types.TINYINT :     			return new Byte(stringValue);     		case java.sql.Types.VARBINARY :     			return stringValue;     		case java.sql.Types.VARCHAR :     			return stringValue;     	}     	     	return null;     }          /**      * Converts the object's value to the correct data type.      * @param value The JDBC value (one of the valid JDBC data types)      * @param javaSqlType An integer identifying the data type of the value passed in. One of the values enumerated in java.sql.Types      * @param decimals number of decimal positions for this data type      */     private Object toValue(Object value, int javaSqlType, int decimals)     {     	switch (javaSqlType)     	{     		case java.sql.Types.ARRAY :     			return (java.sql.Array) value;     		case java.sql.Types.BIGINT :     			return (Long) value;     		case java.sql.Types.BINARY :     			return value;     		case java.sql.Types.BIT :     			return value;     		case java.sql.Types.BLOB :     			return value;     		case java.sql.Types.CHAR :     			return value.toString();     		case java.sql.Types.CLOB :     			return value;     		case java.sql.Types.DATE :     			return new java.sql.Date(((java.util.Date) value).getTime());     		case java.sql.Types.DECIMAL :     			if (numberOfDecimals==0)     			{     				return (Long) value;     			}     			else     			{     				return (Double) value;     			}     		case java.sql.Types.DISTINCT :     			return value;     		case java.sql.Types.DOUBLE :     			return (Double) value;     		case java.sql.Types.FLOAT :     			return (Float) value;     		case java.sql.Types.INTEGER :     			return (Integer) value;     		case java.sql.Types.JAVA_OBJECT :     			return value;     		case java.sql.Types.LONGVARBINARY :     			return value;     		case java.sql.Types.LONGVARCHAR :     			return value;     		case java.sql.Types.NULL :     			return null;     		case java.sql.Types.NUMERIC :     			return (Double) value;     		case java.sql.Types.OTHER :     			return value;     		case java.sql.Types.REAL :     			return (Double) value;     		case java.sql.Types.REF :     			return value;     		case java.sql.Types.SMALLINT :     			return (Short) value;     		case java.sql.Types.STRUCT :     			return value;     		case java.sql.Types.TIME :     			return new java.sql.Date(((java.util.Date) value).getTime());     		case java.sql.Types.TIMESTAMP :     			return (java.sql.Timestamp) value;     		case java.sql.Types.TINYINT :     			return (Byte) value;     		case java.sql.Types.VARBINARY :     			return value;     		case java.sql.Types.VARCHAR :     			return value.toString();     	}     	return null;     }          /**      * Returns the value of the JDBCObject as a string.      * Overrides Object.toString(), which returns a string that is not very useful.      * @return A string representation of this value.      * @exception throws java.sql.SQLException Thrown if the data can not be written to the cursor.      */     public String toQuotedString()     {         // A date formatter that formats dates in the ODBC format         java.text.SimpleDateFormat dateTimeFormatter = new java.text.SimpleDateFormat(""yyyy-MM-dd HH:mm:ss"");         java.text.SimpleDateFormat dateFormatter = new java.text.SimpleDateFormat(""yyyy-MM-dd"");              	String valueString = """";     	switch (javaSqlType)     	{     		case java.sql.Types.ARRAY :     		case java.sql.Types.BIGINT :     		case java.sql.Types.BINARY :     		case java.sql.Types.BIT :     		case java.sql.Types.BLOB :     		case java.sql.Types.CLOB :     		case java.sql.Types.DECIMAL :     		case java.sql.Types.DISTINCT :     		case java.sql.Types.DOUBLE :     		case java.sql.Types.FLOAT :     		case java.sql.Types.INTEGER :     		case java.sql.Types.JAVA_OBJECT :     		case java.sql.Types.LONGVARBINARY :     		case java.sql.Types.LONGVARCHAR :     		case java.sql.Types.NULL :     		case java.sql.Types.NUMERIC :     		case java.sql.Types.OTHER :     		case java.sql.Types.REAL :     		case java.sql.Types.REF :     		case java.sql.Types.SMALLINT :     		case java.sql.Types.STRUCT :     		case java.sql.Types.TINYINT :     		case java.sql.Types.VARBINARY :     			valueString = toString();     			break;     			     		case java.sql.Types.DATE :     		case java.sql.Types.TIME :     			//	valueString = ""convert(DATE,'""+toString()+""')""; // Sybase     			valueString = ""TO_DATE('""+dateTimeFormatter.format((java.util.Date)value)+""','YYYY-MM-DD HH24:MI:SS')""; // Oracle     			break;     		case java.sql.Types.TIMESTAMP :     			valueString = ""TO_DATE('""+dateTimeFormatter.format((java.sql.Timestamp)value) +""','YYYY-MM-DD HH24:MI:SS')""; // Oracle     			break;     			     		case java.sql.Types.CHAR :     		case java.sql.Types.VARCHAR :     			valueString = ""'""+toString()+""'"";     			break;     	}     	return valueString;     }          /**      * Test method      * @param args Program arguments for the class: [0]: bean name from beans.xml      */     public static void main(String[] args)     {     	if (args.length","closed","","spring-projects-issues","2005-04-21T05:53:20Z","2019-01-11T13:05:50Z"
"","5609","Stack trace on during constructor autowiring [SPR-882]","**[Shishir K Singh](https://jira.spring.io/secure/ViewProfile.jspa?name=shishirksingh)** opened **[SPR-882](https://jira.spring.io/browse/SPR-882?redirect=false)** and commented  Class :AbstractAutowireCapableBeanFactory Method:autowireConstructor  Instead of the current piece of code:      catch (BeansException ex) {       if (logger.isDebugEnabled()) {           logger.debug(""Ignoring constructor ["" + constructors[i] + ""] of bean '"" + beanName +                   ""': could not satisfy dependencies"", ex);       }       if (i == constructors.length - 1 && constructorToUse == null) {           // all constructors tried               throw ex;          }          else {               // swallow and try next constructor          }     }  Does it makes sense to have it like this:      catch (BeansException ex) {          if (i == constructors.length - 1 && constructorToUse == null) {           if (logger.isDebugEnabled()) {               logger.debug(""Ignoring constructor ["" + constructors[i] + ""] of bean '"" + beanName +                       ""': could not satisfy dependencies"", ex);           }           // all constructors tried               throw ex;          }          else {               // swallow and try next constructor          }     }  Basically moved the debug within the if clause.  Thanks Shishir   ---  **Affects:** 1.2 RC2","closed","type: enhancement,","spring-projects-issues","2005-04-16T02:26:54Z","2005-04-16T10:17:59Z"
"","5400","Improvement to ServletContextPropertyPlaceholderConfigurer [SPR-672]","**[Shishir K Singh](https://jira.spring.io/secure/ViewProfile.jspa?name=shishirksingh)** opened **[SPR-672](https://jira.spring.io/browse/SPR-672?redirect=false)** and commented  Hi,  I would like to propose an enhancement to ServletContextPropertyPlaceholderConfigurer .  ---      private ServletContext servletContext;     private boolean searchContextAttribute = true;          public void setServletContext(ServletContext servletContext) {         this.servletContext = servletContext;     }          public void setSearchContextAttribute(boolean searchContextAttribute) {         this.searchContextAttribute = searchContextAttribute;     }               protected ServletContext getServletContext() {         return this.servletContext;     }          protected boolean isSearchContexAttribute() {         return this.searchContextAttribute;     }               protected String resolvePlaceholder(String placeholder, Properties props) {         String holderValue = super.resolvePlaceholder(placeholder, props);         if (null == holderValue && null != getServletContext()) {                         holderValue = getServletContext().getInitParameter(placeholder);             if (null == holderValue && isSearchContexAttribute()) {                 if (logger.isDebugEnabled()) {                     logger.debug(""Placeholder "" + placeholder + "" not found in initParameters. Looking in attributes"");                 }                 Object holderObject = getServletContext().getAttribute(placeholder);                 if (null != holderObject && holderObject instanceof String) {                     holderValue = (String) holderObject;                 }             }         }                  return holderValue;     }  ---  ---  **Affects:** 1.1.4, 1.1.5","closed","type: enhancement,","spring-projects-issues","2005-01-31T19:00:11Z","2019-01-13T22:52:45Z"
"","5152","HSSFWorkbook workbook variable in AbstractExcelView [SPR-422]","**[Shishir K Singh](https://jira.spring.io/secure/ViewProfile.jspa?name=shishirksingh)** opened **[SPR-422](https://jira.spring.io/browse/SPR-422?redirect=false)** and commented  Right now workbook is defined as a class variable. This  can lead to potential concurrent modification by different threads calling renderMergedOutputModel.  Can this be moved to renderMergedOutputModel method where it rightfully belongs.  Thanks Shishir   ---  **Affects:** 1.1.2","closed","in: core,","spring-projects-issues","2004-10-24T18:00:49Z","2004-10-24T22:24:52Z"
"","4947","change statup behavior of SchedulerFactoryBean [SPR-216]","**[Shishir K Singh](https://jira.spring.io/secure/ViewProfile.jspa?name=shishirksingh)** opened **[SPR-216](https://jira.spring.io/browse/SPR-216?redirect=false)** and commented  Right now, the default behavior of SchedulerFactoryBean is to start the scheduler when the framework comes up. The only way to change this would be subclass and having an empty method startScheduler{} in the subclass.  To avoid this, can a new attribute be added on  SchedulerFactoryBean  (say boolean startScheduler ) that has a default value = true. This way we won't have to subclass to change the startup behavior.  Thanks Shishir   ---  **Affects:** 1.1 RC1","closed","type: enhancement,","spring-projects-issues","2004-07-13T17:21:09Z","2004-07-19T07:14:08Z"
"","4945","Possible Bug in BeanDefinitionReaderUtils.java ?? [SPR-214]","**[Shishir K Singh](https://jira.spring.io/secure/ViewProfile.jspa?name=shishirksingh)** opened **[SPR-214](https://jira.spring.io/browse/SPR-214?redirect=false)** and commented  From the latest in CVS HEAD  BeanDefinitionReaderUtils.java  /****  53  if (parent == null) { 54    if (beanClass != null) { 55  	 return new RootBeanDefinition(beanClass, cargs, pvs); 56     } 57     else { 58  	 return new RootBeanDefinition(className, cargs, pvs); 59     } 60  } 61  else { 62   if (beanClass != null) { 63  	return new ChildBeanDefinition(parent, beanClass, cargs, pvs); 64   } 65   else { 66  	return new ChildBeanDefinition(parent, className, cargs, pvs); 67   } 68  }  *****/ According to the above,  When I have a default Parent view defined in the xml say ""parentView"" on  the ResourceBundleViewResolver and in the resource bundle, the definition is ""parentView.class=net...view.JstlView""  Line 63 gets executed with return type as ChildDefinition with the parent = the same as the default parent View  This  results in an exception being thrown in AbstractFactorBean.java in method  getMergedBeanDefinition , lines 546-557.  /** From AbstractFactorBean.java ****  546  else if (bd instanceof ChildBeanDefinition) { 547 	ChildBeanDefinition cbd = (ChildBeanDefinition) bd; 548 	RootBeanDefinition pbd = null; 549 	if (!beanName.equals(cbd.getParentName())) { 550 	  pbd = getMergedBeanDefinition(cbd.getParentName(), true); 551 	} 552 	else { 553 	  if (getParentBeanFactory() instanceof AbstractBeanFactory) { 554 	      pbd = ((AbstractBeanFactory) getParentBeanFactory()).getMergedBeanDefinition(cbd.getParentName(), true); 555 	  } 556 	  else { 557 		throw new NoSuchBeanDefinitionException(cbd.getParentName(), 558  ""Parent name '"" + cbd.getParentName() + 559  ""' is equal to bean name '"" + beanName + 560  ""' - cannot be resolved without an AbstractBeanFactory parent""); 561 	  } 562     }  ******/  Since ""parentView"" is a child definition. Line 549 will be true and 553 will be executed. Since the ParentBeanFactory is an instance of ApplicationContext, error is thrown at line 557 and the view is not rendered.  As a temp fix, I changed line 63 to return RootBeanDefinition and it works fine. However, a proper sol may be perhaps to indicate to BeanDefinitionReaderUtils that the concerned prefix is root as the class def is from the defaultParentView.  Thanks Shishir    ---  **Affects:** 1.1 RC1","closed","in: core,","spring-projects-issues","2004-07-12T19:49:46Z","2004-07-27T03:42:37Z"
"","4930","Trying to add a  Cutom Editor to a particular attribute of type array [SPR-199]","**[Shishir K Singh](https://jira.spring.io/secure/ViewProfile.jspa?name=shishirksingh)** opened **[SPR-199](https://jira.spring.io/browse/SPR-199?redirect=false)** and commented  Not sure if this is abug or I am doing something wrong:  public class TestForm  {      private Boolean testBoolean;        private String[] arrayOne;     private String[] arrayTwo;          public TestForm() {}          public String[] getArrayOne() {         return this.arrayOne;     }          public void setArrayOne(String[] arrayOne) {         this.arrayOne = arrayOne;     }          public String[] getArrayTwo() {         return this.arrayTwo;     }          public void setArrayTwo(String[] arrayTwo) {         this.arrayTwo = arrayTwo;     }          public Boolean getTestBoolean() {         return this.testBoolean;     }          public void setTestBoolean(Boolean testBoolean) {         this.testBoolean = testBoolean;     }  }  ---  And my test case is :  ---  public void testBindWithInitializer() throws ServletException {          ServletContext sc = new MockServletContext();         MockHttpServletRequest request = new MockHttpServletRequest(sc);                  request.addParameter(""testBoolean"", ""true"");         request.addParameter(""arrayTwo"", ""arraytwo_1,arraytwo_2"");              TestForm form = new TestForm();         Errors errors = BindUtils.bind(request,form, ""form"", new BindInitializer() {             public void initBinder(ServletRequest request, ServletRequestDataBinder binder) {                 binder.registerCustomEditor(String[].class,""arrayTwo"",new StringArrayPropertyEditor());             }         });                  assertTrue(""arraytwo length"", form.getArrayTwo().length == 2);              }  I get the following error :  Testcase: testBindWithInitializer took 0.12 sec Caused an ERROR Invalid property 'arrayTwo[0]' of bean class [com.test.TestForm]: Cannot access indexed value of property referenced in indexed property path 'arrayTwo[0]': returned null org.springframework.beans.NullValueInNestedPathException: Invalid property 'arrayTwo[0]' of bean class [com.test.TestForm]: Cannot access indexed value of property referenced in indexed property path 'arrayTwo[0]': returned null at org.springframework.beans.BeanWrapperImpl.getPropertyValue(BeanWrapperImpl.java:499) at org.springframework.beans.BeanWrapperImpl.getPropertyValue(BeanWrapperImpl.java:484) at org.springframework.beans.BeanWrapperImpl.getPropertyType(BeanWrapperImpl.java:917) at org.springframework.validation.BindException.resolveMessageCodes(BindException.java:162) at org.springframework.validation.DataBinder.bind(DataBinder.java:229) at org.springframework.web.bind.ServletRequestDataBinder.bind(ServletRequestDataBinder.java:92) at org.springframework.web.bind.BindUtils.bind(BindUtils.java:65) at com.test.TestMail.testBindWithInitializer(TestMail.java:82) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.eclipse.ant.internal.ui.antsupport.InternalAntRunner.run(InternalAntRunner.java:377) at org.eclipse.ant.internal.ui.antsupport.InternalAntRunner.main(InternalAntRunner.java:135)  ---  **Affects:** 1.0.2","closed","type: bug,","spring-projects-issues","2004-07-01T05:49:20Z","2019-01-13T22:54:46Z"
"","5692","inject Velocity tools into VelocityView [SPR-980]","**[Shinobu Kawai](https://jira.spring.io/secure/ViewProfile.jspa?name=shinobu)** opened **[SPR-980](https://jira.spring.io/browse/SPR-980?redirect=false)** and commented  It would be great if we could inject Velocity tools from the Spring context.  (As an alternative to VelocityToolboxView.)   ---  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2005-05-24T09:40:53Z","2007-07-21T11:37:22Z"
"","5691","VelocityToolboxView for VelocityTools 1.2 [SPR-979]","**[Shinobu Kawai](https://jira.spring.io/secure/ViewProfile.jspa?name=shinobu)** opened **[SPR-979](https://jira.spring.io/browse/SPR-979?redirect=false)** and commented  Apply following changes made in VelocityTools 1.2: - ToolboxContext is deprecated - ChainedContext contains the VelocityEngine  The attached patch will allow tools which use the engine (eg. ViewRenderTool) to work.  Note that VelocityTools 1.2 is still under development and this issue should not be committed to CVS until VelocityTools 1.2 has been released.  Until then, this should be treated as a hack for the impatient.  ;)   ---  **Attachments:** - [SPR-979.VelocityToolboxView.patch](https://jira.spring.io/secure/attachment/10747/SPR-979.VelocityToolboxView.patch) (_1.65 kB_)","closed","type: enhancement,","spring-projects-issues","2005-05-24T05:30:46Z","2012-06-19T03:54:12Z"
"","5663","#springBind by a BLOCK directive (velocity) [SPR-944]","**[Shinobu Kawai](https://jira.spring.io/secure/ViewProfile.jspa?name=shinobu)** opened **[SPR-944](https://jira.spring.io/browse/SPR-944?redirect=false)** and commented  #springBind in spring.vm is a macro, causing the velocity Context to be littered with a ""$status"" reference to BindStatus.  This can be avoided by using a BLOCK type directive instead, which can be used like this (part of the step-by-step doc for velocity): #springBind(""priceIncrease.percentage"")  \ \ \ \ \${status.errorMessage}\ \ #end This will introduce backward-incompatibility, though.  But I think it would be nice if it was integrated in future versions.   --- No further details from [SPR-944](https://jira.spring.io/browse/SPR-944?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-05-12T11:53:43Z","2019-01-11T22:06:19Z"
"","5660","VelocityToolboxViewResolver and VelocityLayoutViewResolver [SPR-941]","**[Shinobu Kawai](https://jira.spring.io/secure/ViewProfile.jspa?name=shinobu)** opened **[SPR-941](https://jira.spring.io/browse/SPR-941?redirect=false)** and commented  Currently, you can't inject a configured VelocityLayoutView into the VelocityViewResolver.  (Or can you?)  I created a VelocityToolboxViewResolver and a VelocityLayoutViewResolver to solve my problem.  The whole structure kind of smells, but it looks clean for now.  :)  For the VelocityToolboxViewResolver, you can add the ""toolboxConfigLocation"" property to specify your toolbox.xml as you would in VelocityToolboxView.  This causes some backward incompatability, as I moved the property down from VelocityViewResolver, but all you have to do is change the view resolver class name.  (And it was added in 1.2rc2 anyways.)  For the VelocityLayoutViewResolver, in addition to the toolbox stuff, you can add the ""layoutUrl"", ""layoutKey"" and ""screenContentKey"" properties in respect with the same properties of VelocityLayoutView.   ---  **Attachments:** - [SPR-941.VelocityViewResolver.patch](https://jira.spring.io/secure/attachment/10744/SPR-941.VelocityViewResolver.patch) (_2.17 kB_) - [SPR-941.VelocityViewResolver.patch](https://jira.spring.io/secure/attachment/10722/SPR-941.VelocityViewResolver.patch) (_2.08 kB_) - [VelocityLayoutViewResolver.java](https://jira.spring.io/secure/attachment/10746/VelocityLayoutViewResolver.java) (_3.95 kB_) - [VelocityLayoutViewResolver.java](https://jira.spring.io/secure/attachment/10724/VelocityLayoutViewResolver.java) (_4.00 kB_) - [VelocityToolboxViewResolver.java](https://jira.spring.io/secure/attachment/10745/VelocityToolboxViewResolver.java) (_2.97 kB_) - [VelocityToolboxViewResolver.java](https://jira.spring.io/secure/attachment/10723/VelocityToolboxViewResolver.java) (_3.02 kB_)  2 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2005-05-12T04:44:15Z","2012-06-19T03:54:41Z"
"","5309","Hibernate session closed after transaction was commited. [SPR-581]","**[Shauli Baror](https://jira.spring.io/secure/ViewProfile.jspa?name=sbaror)** opened **[SPR-581](https://jira.spring.io/browse/SPR-581?redirect=false)** and commented  I have the same problem exsactly as described in issue 'SPR-501': java.sql.SQLException: The transaction is no longer active - status: 'Committed'. No further JDBC access is allowed within this transaction. at weblogic.jdbc.wrapper.JTSConnection.checkIfRolledBack(JTSConnection.java:118) at weblogic.jdbc.wrapper.JTSConnection.checkConnection(JTSConnection.java:127) at weblogic.jdbc.wrapper.Connection.preInvocationHandler(Connection.java:70) . . .  I am not using hibernate.properties as I use registry.xml in the following way, as you can see I trued to specify a WebLogic-specific TransactionManagerLookup as you said but probably incorrectly.... Can you please advice what is wrong: my registry.xml file:  \ \ \                                                                                              TangoOracleDS                                                                                                                                                   net.sf.hibernate.dialect.OracleDialect                 0                 true                 3                                                   true                             \   ---  **Affects:** 1.1.2  **Attachments:** - [ctsa.log](https://jira.spring.io/secure/attachment/10398/ctsa.log) (_19.86 kB_) - [spring-hibernate.log](https://jira.spring.io/secure/attachment/10412/spring-hibernate.log) (_6.12 kB_)","closed","type: bug,","spring-projects-issues","2004-12-21T19:13:33Z","2005-01-27T00:53:34Z"
"","5702","ApplicationListener registration is broken [SPR-991]","**[Shaohua Ma](https://jira.spring.io/secure/ViewProfile.jspa?name=masn)** opened **[SPR-991](https://jira.spring.io/browse/SPR-991?redirect=false)** and commented  1. create an ApplicationListener.  public class BeanListener implements ApplicationListener { Object source; int count; static int allcount = 0;  public BeanListener() { super();      count = allcount++;     System.out.println(""instance created="" + count);  }  public void onApplicationEvent(ApplicationEvent arg0) { System.out.print("""" + arg0.getClass().getName() + "" event received by="" + count); // if this is null, the listener is created automatically System.out.println("", my master is="" + source); }  public Object getSource() { return source; }  public void setSource(Object source) { this.source = source; } }  2. config it in a context     \    \  3. use it    BeanListener bl= (BeanListener) SDSApplicationContextFactory.buildContext().getBean(""listener-a"");    // if listener's source is null, the listener is not from here    bl.setSource(main);    main.bean= bl;     TestEvent ev= new TestEvent("""");    try    {    Thread.currentThread().sleep(3000);    }    catch (InterruptedException ev1)    {    // TODO Auto-generated catch block    ev1.printStackTrace();    }     SDSApplicationContextFactory.buildContext().publishEvent(ev);  4. output    instance created=0    org.springframework.context.event.ContextRefreshedEvent event received by=0       my master is=null    instance created=1    applistener.TestEvent event received by=0       my master is=null  note the second instance(instance created=1)'s event handling method was never called. Is it registered with the context?   ---  **Affects:** 1.2 final","closed","in: core,","spring-projects-issues","2005-05-27T08:11:46Z","2019-01-12T16:41:16Z"
"","5753","User definable ""singleton"" [SPR-1046]","**[Shaohua Ma](https://jira.spring.io/secure/ViewProfile.jspa?name=masn)** opened **[SPR-1046](https://jira.spring.io/browse/SPR-1046?redirect=false)** and commented  Two types of beans can be constructed with the current spring configuration: singleton or prototype. A singleton is per jvm per session (start up/shutdown of the jvm). A prototype is always different. There is not way to get to the same object with a prototype configuration. This propose introduces a new type. This is how it works. A bean is configed with name ""abean"". when the user needs an instance of the bean, the user specifies the name, together with a user defined ""beanID"". the framework looks for a bean with ""abean"" and ""beanID"" as the key to find an instance. If one is found, return it. Otherwise, constructs one, put it in hash with ""abean"" and ""beanID"" as the key, and return the instace. The rational behind this request is that in many situations, same instance of a type is needed in different context of an application. The application could certainly maintain the hash, but the logic seems naturely belonging to the spring framework. Thus the request.   ---  **Affects:** 1.2.1","closed","type: enhancement,","spring-projects-issues","2005-06-15T10:03:41Z","2012-06-19T03:54:33Z"
"","5555","View Resolvers Should Use Prototypes [SPR-829]","**[Seth Ladd](https://jira.spring.io/secure/ViewProfile.jspa?name=sethladd)** opened **[SPR-829](https://jira.spring.io/browse/SPR-829?redirect=false)** and commented  While researching a problem, I ran across some odd code that just might be really old.  Of course, there could be a good reason for this, but I wanted to bring it up.  In AbstractCachingViewResolver.prepareView(), we manually check if the view class implements ApplicationContextAware, and if so, sets the application context.  This operation is provided by the ApplicationContext natively.  Why do it manually here?  Also, in UrlBasedViewResolver.loadView(), we instantiate a new instance of the view class using BeanUtils.instantiateClass().  That by itself is fine, but it bypasses any native dependency injection the application context would have provided by creating the bean.  I propose to add a 'prototypeName' property to the View Resolver.  This name would point to a prototype of the view defined in the context.  By letting the context create the view instance, we get all the benefits including automatic ApplicationContextAware, dependency injection, etc.  Code, like that of VelocityView.initApplicationContext(), would not have to exist.  That code is doing manual dependency pulling from the application context.  Seems unnecessary when we have the IoC facilities of the context.  I'd be happy to provide a patch that can clean this up and use the prototype facilities of the context.  I think it would remove a lot of code.  To maintain backwards compatibility, where the className of the view instance is specified, we could look in the context for any prototype of that class.  The problem would be to place an implicit prototype definition at runtime into the context if the prototype does not exist, as it wouldn't for old applications.   ---  **Affects:** 1.2 RC1","closed","type: enhancement,","spring-projects-issues","2005-03-29T03:58:04Z","2005-04-11T05:36:24Z"
"","5503","Return Number Bytes Copied in FileCopyUtils [SPR-776]","**[Seth Ladd](https://jira.spring.io/secure/ViewProfile.jspa?name=sethladd)** opened **[SPR-776](https://jira.spring.io/browse/SPR-776?redirect=false)** and commented  It would be really nice to have the number of bytes actually copied in the util methods found in FileCopyUtils returned.  Many times, the length of the InputStream is not known at copy time.  For example, handling a raw HttpServletRequest.getInputStream() can be of an unspecified length sometimes.  Returning the number of bytes copied would help methods that use this util class, such as the LobHandler impl's.  They can return number of bytes copied in their setBlobAsBinaryStream methods.  This would then let us know how much was written into the Blob.  Of course, we can always wrap the InputStream and provide a getNumberOfBytesRead() counter.  I propose the above improvement because it could be useful for other use cases.  If it's a good idea, I will supply the patch.  Mahalo!   ---  **Affects:** 1.1.5","closed","type: enhancement,","spring-projects-issues","2005-03-11T11:25:49Z","2005-03-14T04:34:17Z"
"","5501","RequiredDependencyCheckingPostProcessor [SPR-774]","**[Seth Ladd](https://jira.spring.io/secure/ViewProfile.jspa?name=sethladd)** opened **[SPR-774](https://jira.spring.io/browse/SPR-774?redirect=false)** and commented  Here's the first pass at the RequiredDependencyCheckingPostProcessor.  It attempts to handle all properties, either object references or primitives.  Not sure if we consider a primitive a Dependency to be set by the container, though.  I altered the built environment slightly.  I added a new directory to the compiletestattrs so our test bean can get attributed.  The RequiredDependencyCheckingPostProcessor takes one or more Attributes facades.  We can do this, or just make the user create a PostProcessor for each way attributes can be resolved.  Things might have gotten a little more interesting if the Rules package was out of sandbox.  But I didn't want this to become a full blown Validator on beans managed by the Container.  I think it's nice to keep it simple to just dependency checking.   ---  **Attachments:** - [patch.txt](https://jira.spring.io/secure/attachment/10581/patch.txt) (_31.58 kB_) - [patch.txt](https://jira.spring.io/secure/attachment/10580/patch.txt) (_20.48 kB_)","closed","type: enhancement,","spring-projects-issues","2005-03-10T14:17:14Z","2012-06-19T03:54:22Z"
"","5498","JmsConnectionFactoryBean Does Not Handle Null Usernames/Passwords [SPR-771]","**[Seth Ladd](https://jira.spring.io/secure/ViewProfile.jspa?name=sethladd)** opened **[SPR-771](https://jira.spring.io/browse/SPR-771?redirect=false)** and commented  There isn't a SpringJMS Component yet, so...  The JmsConnectionFactoryBean attempts to connect with a username and password.  If those two parameters are null, then it should use the no-arg version of createConnection.  Attached is the patch that handles this.   ---  **Affects:** 1.2 RC1  **Attachments:** - [patch.txt](https://jira.spring.io/secure/attachment/10572/patch.txt) (_1.14 kB_)","closed","type: bug,","spring-projects-issues","2005-03-09T11:10:32Z","2005-03-10T04:04:22Z"
"","5279","Javadoc Typo in DependencyInjectionInterceptorFactoryBean [SPR-550]","**[Seth Ladd](https://jira.spring.io/secure/ViewProfile.jspa?name=sethladd)** opened **[SPR-550](https://jira.spring.io/browse/SPR-550?redirect=false)** and commented  Minor typo in o.s.orm.hibernate.support.DependencyInjectionInterceptorFactoryBean (in the sandbox).  In the class javadoc, change:  Based on a constribution by  to  Based on a contribution by  Thanks! Seth   ---  **Affects:** 1.1.3","closed","type: enhancement,","spring-projects-issues","2004-12-13T12:09:39Z","2004-12-29T07:32:47Z"
"","5229","AbstractWizardController Doesn't Check Global Errors [SPR-500]","**[Seth Ladd](https://jira.spring.io/secure/ViewProfile.jspa?name=sethladd)** opened **[SPR-500](https://jira.spring.io/browse/SPR-500?redirect=false)** and commented  Hello,  I first brought up this issue in the forums:  http://forum.springframework.org/viewtopic.php?t=413&start=0  AbstractWizardController ignores GlobalErrors in validatePagesAndFinish.   It will redirect back to the form page if errors with the fields, but global errors don't redirect.  I consider this a bug.  If not, what is the reason here?  Thanks! Seth   ---  **Affects:** 1.1.2","closed","type: bug,","spring-projects-issues","2004-11-29T04:27:31Z","2004-11-30T04:49:26Z"
"","5216","Spring overwrites localizationContext Context Param in Webapps [SPR-487]","**[Seth Ladd](https://jira.spring.io/secure/ViewProfile.jspa?name=sethladd)** opened **[SPR-487](https://jira.spring.io/browse/SPR-487?redirect=false)** and commented  I have a webapp that uses JSTL and the  tag a lot.  I have setup default resource bundles using the context-param javax.servlet.jsp.jstl.fmt.localizationContext inside the web.xml.  Spring is setting that parameter to an instance of  org.springframework.context.support.MessageSourceResourceBundle.  Which might be OK if I specified one in my application context, but I didn't. :)  I'm sure I never set it, because I see this message in the log: INFO: Unable to locate MessageSource with name 'messageSource': using default [org.springframework.context.support.StaticMessageSource: {}]  Maybe if I set it in my appContext, it would override what I specify in my web.xml.  But if I never set it up, what I specify in web.xml should be the default.  As a workaround, I'll go ahead and set up a Message Source in Spring's App Context.  In the future, if one is not specified, it shouldn't attempt to set any context parameters.  Or, if so, be more explicit about it.  Thanks! Seth   ---  **Affects:** 1.1.2  **Issue Links:** - [SEC-631](https://jira.spring.io/browse/SEC-631) form-login page doesn't use spring messageSource for i18n translations","closed","type: bug,","spring-projects-issues","2004-11-24T06:11:07Z","2008-02-14T23:38:37Z"
"","5204","Convenience Class to Bind Objects into JNDI [SPR-475]","**[Seth Ladd](https://jira.spring.io/secure/ViewProfile.jspa?name=sethladd)** opened **[SPR-475](https://jira.spring.io/browse/SPR-475?redirect=false)** and commented  I saw the nice JNDI classes to easily get objects from JNDI.  I didn't see anything to help me bind an object into JNDI at startup and remove it on shutdown.  We had the requirement to share objects across webapps, and JNDI seemed like a logical way to do it.  Unfortunately, we then found out that Tomcat (our deployment container) didn't support a global, writable JNDI.  In anycase, this class helps to bind specified objects into JNDI on ApplicationContext refresh and unbind them on ApplicationContext shutdown.  Others might find it (or its principles) useful.   ---  **Affects:** 1.2 RC1  2 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2004-11-18T05:44:18Z","2012-06-19T09:37:40Z"
"","4983","spring:nestedPath Should Expose nestedPath into Request Scope [SPR-252]","**[Seth Ladd](https://jira.spring.io/secure/ViewProfile.jspa?name=sethladd)** opened **[SPR-252](https://jira.spring.io/browse/SPR-252?redirect=false)** and commented  The current implementation of  exposes the nestedPath variable as page scope only.  This minimizes the usefulness of the tag.  It should expose as request scope.  For instance, the spring:nestedPath tag is useful during situations such as the following:      The contents of some/url.jsp will have spring:bind tags, and will look for a nestedPath in page scope, and will fail.  Changing both spring:bind and spring:nestedPath to use the request scope for the nestedPath variable makes this possible again.  Other examples would include tag files, or any content that wishes to use the current nestedPath, but is not directly inside the page of the original spring:nestedPath call.  Arguably, the status variable of spring:bind should be request scope as well, but it's usefulness is not as great as a request scope nestedPath.   ---  **Affects:** 1.1 RC1  **Attachments:** - [patch.txt](https://jira.spring.io/secure/attachment/10161/patch.txt) (_2.89 kB_)","closed","type: enhancement,","spring-projects-issues","2004-08-09T19:02:49Z","2004-08-09T19:11:36Z"
"","4980","Add Overloaded Methods to ValidationUtils to Handle Message Params [SPR-249]","**[Seth Ladd](https://jira.spring.io/secure/ViewProfile.jspa?name=sethladd)** opened **[SPR-249](https://jira.spring.io/browse/SPR-249?redirect=false)** and commented  It would be really nice to have overloaded versions of the rejectIfEmpty and rejectIfEmptyOrWhitespace that took an array of Objects for the message parameters.  This would be similar to the different overloaded versions of rejectValue, for instance.  Thanks! Seth   ---  **Affects:** 1.1 RC1  **Attachments:** - [patch.txt](https://jira.spring.io/secure/attachment/10156/patch.txt) (_2.89 kB_)","closed","type: enhancement,","spring-projects-issues","2004-08-08T16:42:09Z","2004-08-08T19:39:15Z"
"","4951","New spring:nestedPath Tag [SPR-220]","**[Seth Ladd](https://jira.spring.io/secure/ViewProfile.jspa?name=sethladd)** opened **[SPR-220](https://jira.spring.io/browse/SPR-220?redirect=false)** and commented  For the form simplification macros, a new tag will be needed.  This new tag, , allows for simplification of creating JSTL pages.  It will allow for easy including of common JSP Fragments without knowledge of the actual bean, or child bean, that the properties are from.  For example, common elements such as Address fields, may be isolated inside a JSP Fragment.  This allows for any page to include the file and to display address fields.  The including page would wrap the include with a  tag to declare what bean, or child bean, the include's properties are from.  The  tag will need to be updated to optionally understand if it's being used inside the  tag to append the nestedPath variable to the field being bound.  The example below details a full JSP 2.0 Taglib implementation of  and the edited , plus a form simplication macro.  It's assumed that the final version of  would be a Java class, and the  modifications would be made to the Java class.  Example:  ---  address_include.jspf  \ \ \ \ \ \ \ \  ---  ---  new_account.jsp  \ \ \ \ \ \ \ \ \  ---  ---  text.tag (referenced from address_include.jspf)         ---  ---  springx:bind.tag  (understands the nestedPath if it exists)                  ---  ---  **Affects:** 1.1 RC2  **Attachments:** - [nested_tag_tests.patch](https://jira.spring.io/secure/attachment/10151/nested_tag_tests.patch) (_6.43 kB_) - [nested_tag.patch](https://jira.spring.io/secure/attachment/10150/nested_tag.patch) (_6.86 kB_)","closed","type: enhancement,","spring-projects-issues","2004-07-15T06:27:36Z","2019-01-13T22:54:38Z"
"","5871","Different exception class name matching in SimpleMappingExceptionResolver [SPR-1169]","**[Seth Ladd](https://jira.spring.io/secure/ViewProfile.jspa?name=sethladd)** opened **[SPR-1169](https://jira.spring.io/browse/SPR-1169?redirect=false)** and commented  I was investigating Exception Resolving for Spring MVC and didn't seen an explicit unit test for the class.  Attached is a unit test for the SimpleMappingExceptionResolver.  Thanks, Seth  ps This class's method for matching a substring to classname is a bit different than the way URL's are mapped.  Of course, the two tasks are quite different.  BUT... there's one way they /could/ be more in sync.  In this SimpleMappingExceptionResolver, the shortest substring wins.  In the AbstractUrlHandlerMapping class, the longest path wins.  I don't think there is a way to make both act the same without breaking backwards compatibilty for SimpleMappingExceptionResolver.  But thought I would bring it up. :)  I tend to like longest wins, as it's more specific.   ---  **Affects:** 1.2.2  **Attachments:** - [SimpleMappingExceptionResolverTests.java](https://jira.spring.io/secure/attachment/10970/SimpleMappingExceptionResolverTests.java) (_9.06 kB_)","closed","type: enhancement,","spring-projects-issues","2005-07-23T16:42:57Z","2005-09-08T21:56:00Z"
"","5867","Clarification JavaDocs to AbstractUrlHandler [SPR-1165]","**[Seth Ladd](https://jira.spring.io/secure/ViewProfile.jspa?name=sethladd)** opened **[SPR-1165](https://jira.spring.io/browse/SPR-1165?redirect=false)** and commented  Small patch to add clarification javadocs to AbstractUrlHandler.  The extra comments specify that a path is matched against the ""best match"" pattern, where ""best match"" is defined as longest path pattern.  Couldn't find this clarification or comment elsewhere.  Thanks, Seth   ---  **Affects:** 1.2.2  **Attachments:** - [patch.txt](https://jira.spring.io/secure/attachment/10964/patch.txt) (_1.39 kB_)","closed","type: enhancement,","spring-projects-issues","2005-07-21T19:01:59Z","2005-07-21T21:00:51Z"
"","5865","Ported DependencyInjectionInterceptorFactory to Hibernate 3 [SPR-1163]","**[Seth Ladd](https://jira.spring.io/secure/ViewProfile.jspa?name=sethladd)** opened **[SPR-1163](https://jira.spring.io/browse/SPR-1163?redirect=false)** and commented  There is a very handy class in the sandbox: DependencyInjectionInterceptorFactoryBean.  I've ported it to use Hibernate 3.  Mostly the package names changed, but a few new operations were added to the Hibernate interceptor interface.  Those have been added now.  This is just two classes.  Hopefully, this code will get promoted to the src directory soon.  We've been using it in production for a long time now and works great.  Thanks, Seth   ---  **Affects:** 1.2.2  **Attachments:** - [ChainedInterceptorSupport.java](https://jira.spring.io/secure/attachment/10962/ChainedInterceptorSupport.java) (_7.91 kB_) - [DependencyInjectionInterceptorFactoryBean.java](https://jira.spring.io/secure/attachment/10963/DependencyInjectionInterceptorFactoryBean.java) (_5.74 kB_)  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2005-07-21T11:45:02Z","2006-03-14T04:21:29Z"
"","5864","Convenience Constructor for DefaultMessageSourceResolvable [SPR-1162]","**[Seth Ladd](https://jira.spring.io/secure/ViewProfile.jspa?name=sethladd)** opened **[SPR-1162](https://jira.spring.io/browse/SPR-1162?redirect=false)** and commented  Validation code constantly creates error message, and error message arguments using DefaultMessageSourceResolvable.  It would be very helpful to have a convenience constructor that accepts a single String value for the code.  Because arguments for message sources are themselves resolvable, adding this constructor will help in creating the arguments, which themselves are often single strings.  Example:  MessageSourceResolvable resolvable = new DefaultMessageSourceResolvable(""code"");  Patch, with unit test, is included.  Thanks! Seth   ---  **Affects:** 1.2.2  **Attachments:** - [patch.txt](https://jira.spring.io/secure/attachment/10960/patch.txt) (_825 bytes_) - [patch-unittest.txt](https://jira.spring.io/secure/attachment/10961/patch-unittest.txt) (_1.13 kB_)","closed","type: enhancement,","spring-projects-issues","2005-07-21T07:14:04Z","2005-07-21T21:04:45Z"
"","5848","Refactor SimpleApplicationEventMulticaster for More Customization [SPR-1146]","**[Seth Ladd](https://jira.spring.io/secure/ViewProfile.jspa?name=sethladd)** opened **[SPR-1146](https://jira.spring.io/browse/SPR-1146?redirect=false)** and commented  Hello,  I'd like to suggest that we split the current SimpleApplicationEventMulticaster into a base abstract class and its current concrete class.  The code for managing the listener addition and removal should be pulled up into a base class.  The actual multicastEvent call should be the only thing left in SimpleApplicationEM.  This will allow for other subclasses to implement their own multicasting strategies.  Or, of course, create a new interface called MulticastingStrategy that is delegated to for actual event propogation.  The attached patch simply breaks the current class in two.  This allows for other subclasses to handle event multicasting.  There are other future enhancements possible for this class, but this is a good start.  Thanks, Seth   ---  **Affects:** 1.2.2  **Attachments:** - [patch.txt](https://jira.spring.io/secure/attachment/10941/patch.txt) (_4.06 kB_)","closed","type: enhancement,","spring-projects-issues","2005-07-15T11:07:50Z","2005-07-20T04:55:28Z"
"","5815","JdbcUtil's getResultSetValue hack for Oracle Timestamp Broken for 10g Driver [SPR-1111]","**[Seth Ladd](https://jira.spring.io/secure/ViewProfile.jspa?name=sethladd)** opened **[SPR-1111](https://jira.spring.io/browse/SPR-1111?redirect=false)** and commented  When using the 10g driver for oracle (specifically, oracle-jdbc-1.4-10.1.0.20.jar), getObject returns a java.util.Date for a column with a type of DATE.  This is correct.  However, the driver will return a Date with only year-month-day, even if the DATE column contains hours:minutes:seconds.  To get a full date, with both day and time info, you have to use getTimestamp.  The getResultSetValue() method attempts to detect if the object returned from getObject is a ""oracle.sql.TIMESTAMP"".  Unfortunately, with 10g drivers and a column of type DATE, getObject().getClass().getName() will return ""java.sql.Date"".  For instance:  System.out.println(rs.getObject(""date_created"") + "" "" + rs.getObject(""date_created"").getClass());  will print out:  2005-07-01 class java.sql.Date  Now, even with a queryForObject(""sql"", Timestamp.class) you will receive this error:  org.springframework.dao.TypeMismatchDataAccessException: Result object with column type 'DATE' and value [2005-07-01] is of type [java.sql.Timestamp] and could not be converted to required type [java.sql.Timestamp]    ---  **Affects:** 1.2.2","closed","type: bug,","spring-projects-issues","2005-07-07T07:39:34Z","2005-07-20T10:26:23Z"
"","5251","Missing support classes for JSP taglibs [SPR-522]","**[Seth Fitzsimmons](https://jira.spring.io/secure/ViewProfile.jspa?name=seth)** opened **[SPR-522](https://jira.spring.io/browse/SPR-522?redirect=false)** and commented  There are no Spring-aware support classes for writing JSP taglibs.   ---  **Affects:** 1.1.2  **Attachments:** - [BodyTagSupport.java](https://jira.spring.io/secure/attachment/10351/BodyTagSupport.java) (_3.89 kB_)","closed","type: enhancement,","spring-projects-issues","2004-12-06T03:03:17Z","2006-01-28T01:54:20Z"
"","5250","Missing support class for Struts MappingDispatchAction [SPR-521]","**[Seth Fitzsimmons](https://jira.spring.io/secure/ViewProfile.jspa?name=seth)** opened **[SPR-521](https://jira.spring.io/browse/SPR-521?redirect=false)** and commented  There is no Spring-aware support class for Struts' MappingDispatchAction.   ---  **Affects:** 1.1.2  **Attachments:** - [MappingDispatchActionSupport.java](https://jira.spring.io/secure/attachment/10350/MappingDispatchActionSupport.java) (_4.73 kB_)","closed","type: bug,","spring-projects-issues","2004-12-06T03:00:00Z","2004-12-06T22:42:07Z"
"","5553","@Transactional annotation needs to be @Inherited and @Documented [SPR-827]","**[Sergey Astakhov](https://jira.spring.io/secure/ViewProfile.jspa?name=sergeya)** opened **[SPR-827](https://jira.spring.io/browse/SPR-827?redirect=false)** and commented  In Spring version 1.2 rc1 there is introduced new annotation `@Transactional` for marking transactional attributes at source level. However this annotation is not marked as `@Inherited` and `@Documented`. `@Inherited` attribute is most important - it is allows to inherit transactional attributes in class hierarchy.   ---  **Affects:** 1.2 RC1","closed","type: enhancement,","spring-projects-issues","2005-03-28T21:41:14Z","2005-04-25T09:26:18Z"
"","5614","ServetRequestDataBinder.bind(ServletRequest) is written in non-flexable way [SPR-887]","**[Sergei Rogovskiy](https://jira.spring.io/secure/ViewProfile.jspa?name=sergey)** opened **[SPR-887](https://jira.spring.io/browse/SPR-887?redirect=false)** and commented  ServetRequestDataBinder.bind(ServletRequest) contains 2 blocks for support of special forms. First is to support checkboxes (fields prefixed with _ by default). Second is multipart files support. I would like to add another preprocessors. Like date binding from ""date_year"" ""date_month"" ""date_day"" request fields. But there is no way to extends ServletRequestData to add another preprocessor.  I see two options to fix that: a) add preprocessors to ServetRequestDataBinder like binder.addPreprocessor(Preprocessor p); binder.setPreprocessors(List p);  interface Preprocessor { void preprocess(MutablePropertyValues pvs) throws BindException; }  class FieldMarkerPreprocessor implements Preprocessor { ... }; class MultiPartPreprocessor implements Preprocessor { ... }; class CustomDatePreprocessor implements Preprocessor { ... };  This would be much more flexable and OOP.  b) add  protected createMutablePropertyValues(request) instead of  > // Bind normal HTTP parameters. > MutablePropertyValues pvs = new ServletRequestParameterPropertyValues(request); > so MyServletRequestDataBinder is able to overwrite this method and do some processing on mutable property values.    ---  **Affects:** 1.1.4, 1.1.5, 1.2 RC1","closed","type: enhancement,","spring-projects-issues","2005-04-18T23:15:24Z","2005-04-19T03:50:52Z"
"","5193","spring 1.1.2 breaks java 1.3 backward compatibility  [SPR-464]","**[Sean Brandt](https://jira.spring.io/secure/ViewProfile.jspa?name=seanbrandt)** opened **[SPR-464](https://jira.spring.io/browse/SPR-464?redirect=false)** and commented  org.springframework.core.io.AbstractPathResolvingPropertyEditor makes use of jdk 1.4 features. It depends on java.lang.StringBuffer.indexOf(String s) which is not available to jdk 1.3 VMs    ---  **Affects:** 1.1.2  **Attachments:** - [AbstractPathResolvingPropertyEditor.java.patch](https://jira.spring.io/secure/attachment/10313/AbstractPathResolvingPropertyEditor.java.patch) (_3.26 kB_)","closed","in: core,","spring-projects-issues","2004-11-15T03:03:17Z","2004-11-15T03:13:29Z"
"","5256","create a bean with interface as class gives confusing error [SPR-527]","**[Scott Segal](https://jira.spring.io/secure/ViewProfile.jspa?name=scott@voicetrak.com)** opened **[SPR-527](https://jira.spring.io/browse/SPR-527?redirect=false)** and commented  Attempting to create a bean with the class defined as an interface yields the somewhat less than helpful error of not able to find default constructor, not something like abstract method error or you are a dufus for trying to instaniate an interface!!!  Thanks.   --- No further details from [SPR-527](https://jira.spring.io/browse/SPR-527?redirect=false)","closed","type: enhancement,","spring-projects-issues","2004-12-07T05:55:15Z","2004-12-07T06:29:38Z"
"","5120","BeanFactory only destroys inner beans that implement DisposableBean [SPR-390]","**[Scott Haug](https://jira.spring.io/secure/ViewProfile.jspa?name=shaug)** opened **[SPR-390](https://jira.spring.io/browse/SPR-390?redirect=false)** and commented  It lookslike the AbstractAutowireCapableBeanFactory is only destroying inner beans if they implement DisposableBean. If they don't implement DisposableBean, but declare a ""destroy-method"", the destroy method is never getting called.  I ran into this with two beans that control external threads. The idioms used in these beans are identical. They both have a 'destroy-method' declared in the XML, which cause the thread to be interrupted and shutdown. One of these beans was declared at the top level with a name, the other was declared anonymously as an inner property definition in another bean. The top-level bean's destroy method is called at shutdown; the inner bean's was not.  This looks to have been been partially addressed in #4804, but it seems it's only honoring inner beans if they implement DisposableBean. But my understanding was that this isn't necessary, provided the 'destroy-method' is specified.  ---  **Affects:** 1.1.1","closed","type: bug,","spring-projects-issues","2004-10-12T06:03:50Z","2019-01-11T14:00:13Z"
"","5081","Custom editor config in applicationContext.xml not available in servlet config [SPR-351]","**[Scott Haug](https://jira.spring.io/secure/ViewProfile.jspa?name=shaug)** opened **[SPR-351](https://jira.spring.io/browse/SPR-351?redirect=false)** and commented  I was surprised to discover that the custom editors I had setup in my applicationContext.xml were not available in my servlet.xml config.  In applicationContext.xml, I have something like the following:  \ \ \ \ \ \ \ \ \ \  However, the beans in jobster-servlet.xml that accepted types defined in this mapping were not getting the values converted automatically. For example, if I had the following controller definition:  \ \ \[A-Za-z_]+\ \  It would result in the following exception at startup:  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myController' defined in resource [/WEB-INF/jobster-servlet.xml] of ServletContext: Error setting property values; nested exception is org.springframework.beans.PropertyAccessExceptionsException: PropertyAccessExceptionsException (1 errors); nested propertyAccessExceptions are: [org.springframework.beans.TypeMismatchException: Failed to convert property value of type [java.lang.String] to required type [java.util.regex.Pattern] for property 'nameRegex']  I was able to work around this by creating a servletCustomEditorConfigurer bean in the servlet config that used the standard customEditorConfigurer as its parent (**love** that feature!):  \ \  Is this limitation by design? If so, it sure confused me, as I was under the assumption that since all my applicationContext.xml beans were available in my servlet config, that the custom editors would be too.  It's not a huge issue, as the workaround is fairly simple and still only requires the custom editors to be added in one place. But I couldn't find any clarification of this point in the documentation, although I certainly could have missed it.   ---  **Affects:** 1.1 final","closed","in: core,","spring-projects-issues","2004-09-24T11:51:50Z","2019-01-12T16:42:12Z"
"","4965","CustomEditorConfigurer should support ""[]"" syntax for array types [SPR-234]","**[Scott Haug](https://jira.spring.io/secure/ViewProfile.jspa?name=shaug)** opened **[SPR-234](https://jira.spring.io/browse/SPR-234?redirect=false)** and commented  I was creating a PropertyEditor for javax.mail.internet.InternetAddress and arrays of such objects (btw, given that the parsing of such objects is already provided by InternetAddress.parse(), and spring provides its own mail support, I'm surprised this isn't a standard part of spring; but that's another issue...). When I went to configure these custom editors in my application, I was surprised to find the following syntax wasn't valid:  \ \ \ \ \ \ \false\ \ \ \ \ \ \ Given that the actual ClassEditor could parse ""Classname[]"" style syntax, I was surprised to find that CustomEditorConfigurer couldn't. While I could certainly use the ""[LClassname;"" syntax, I think it would be nice to have this feature consistent in Spring whenever a class name is specified as a String.   ---  **Affects:** 1.0.2, 1.1 RC1","closed","in: core,","spring-projects-issues","2004-07-30T03:19:26Z","2004-07-31T00:29:48Z"
"","5839","factory-bean not allowed on anonymous class [SPR-1136]","**[Scott Haug](https://jira.spring.io/secure/ViewProfile.jspa?name=shaug)** opened **[SPR-1136](https://jira.spring.io/browse/SPR-1136?redirect=false)** and commented  When setting a property with a factory-bean/factory-method -enabled inner bean, I'm prevented from keeping the bean anonymous. Consider the following:  ```                                    ```  Loading this config results in the following exception:  org.springframework.beans.factory.BeanDefinitionStoreException: Error registering bean with name '' defined in ServletContext resource [config.xml]: Unnamed bean definition specifies neither 'class' nor 'parent' - can't generate name at org.springframework.beans.factory.support.BeanDefinitionReaderUtils.generateBeanName(BeanDefinitionReaderUtils.java:102) at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.parseBeanDefinitionElement(DefaultXmlBeanDefinitionParser.java:331) at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.parsePropertySubElement(DefaultXmlBeanDefinitionParser.java:660) at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.parsePropertyValue(DefaultXmlBeanDefinitionParser.java:650) at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.parsePropertyElement(DefaultXmlBeanDefinitionParser.java:593) at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.parsePropertyElements(DefaultXmlBeanDefinitionParser.java:492) at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.parseBeanDefinitionElement(DefaultXmlBeanDefinitionParser.java:360) at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.parseBeanDefinitionElement(DefaultXmlBeanDefinitionParser.java:328) at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.parseBeanDefinitions(DefaultXmlBeanDefinitionParser.java:265) at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.registerBeanDefinitions(DefaultXmlBeanDefinitionParser.java:185) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:238) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:155) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:99) ...  Giving the inner bean an id is a sufficient workaround for the issue, but obviously it would be nice if this wasn't necessary.  ---  **Affects:** 1.2.2  **Issue Links:** - #5911 anonymous inner bean without class and parent attributes fails to load (_**""is duplicated by""**_)","closed","in: core,","spring-projects-issues","2005-07-14T02:43:40Z","2019-01-11T19:34:20Z"
"","5861","HibernateTemplate query methods that support UserTypes [SPR-1159]","**[Scott Clasen](https://jira.spring.io/secure/ViewProfile.jspa?name=ticktock)** opened **[SPR-1159](https://jira.spring.io/browse/SPR-1159?redirect=false)** and commented  Spring has no way of knowing what Hibernate Types to use in HibernateQueries, so if you attempt to use any of the find* methods in the template, and you are using a Hibernate UserType/CustomType(s) as query parameters, Spring/Hibernate will not be able to guess the type correctly.  It took me a while to figure out that you need to use a HibernateCallback to call the hibernate Query.setParamater(name, value, Type)  I would suggest adding some methods to the HibernateTemplate that support UserTypes, like..  findByNamedQuery(String queryName, Object value, org.hibernate.type.Type type)  findByNamedQuery(String queryName, Object[] values, org.hibernate.type.Type[] types)  Let me know if you would like me to submit a patch..   ---  **Affects:** 1.2.2","closed","type: enhancement,","spring-projects-issues","2005-07-20T06:05:34Z","2005-07-20T09:14:52Z"
"","5509","javax.management.MalformedObjectNameException: Missing ':' character in ObjectName exception.  [SPR-782]","**[Scott Battaglia](https://jira.spring.io/secure/ViewProfile.jspa?name=sbattaglia)** opened **[SPR-782](https://jira.spring.io/browse/SPR-782?redirect=false)** and commented  From an email I sent to Rob...","closed","in: core,","spring-projects-issues","2005-03-14T23:17:20Z","2019-01-11T12:56:26Z"
"","5668","update bean properties only if changed [SPR-950]","**[Sanjiv Jivan](https://jira.spring.io/secure/ViewProfile.jspa?name=sjivan)** opened **[SPR-950](https://jira.spring.io/browse/SPR-950?redirect=false)** and commented  Is there a way to have the spring binding mechanism update bean properties only if they are different from the current property value?  The problem I'm facing is the following :  I have an editable table in my JSP where I bind the rows to a POJO collection. I use Hibernate for persistence. When a user changes a couple of entries and hits save, in my controller I iterate over all objects in the collection and call Hibernates saveOrUpdate(o) through a service API.  The problem is that when my table size is 100 rows and the user edits just one row and clicks save, after Spring MCV binding, all objects are marked dirty and 100 update queries are issued by Hibernate instead of just one.  I could have sworn that in some earlier version of Spring/Hibernate  I was seeing the desired behaviour (where only modified objects are updated) but in Spring 1.2 w/ H3, all objects are updated and I incur a huge performance hit.  Thanks, Sanjiv   ---  **Affects:** 1.2 final","closed","type: enhancement,","spring-projects-issues","2005-05-15T13:19:49Z","2008-01-29T02:26:37Z"
"","5619","backward compatibility broken with 1.2 RC2 [SPR-892]","**[Sanjiv Jivan](https://jira.spring.io/secure/ViewProfile.jspa?name=sjivan)** opened **[SPR-892](https://jira.spring.io/browse/SPR-892?redirect=false)** and commented  I'm using Acegi 0.8.1 that uses the method  Code:  org.springframework.util.PathMatcher#match(String path, String url)  In versions of Spring 1.2 RC1 and below this was an abstract class with a static method but in Spring 1.2 RC2 this has been changed to an interface and as a result I get a runtime exception.  Code:   \ \ \","closed","type: bug,","spring-projects-issues","2005-04-19T18:07:02Z","2005-04-21T00:00:36Z"
"","5617","issue with query.setReadOnly(true) in H3 SessionFactoryUtils#applyTransactionTimeout [SPR-890]","**[Sanjiv Jivan](https://jira.spring.io/secure/ViewProfile.jspa?name=sjivan)** opened **[SPR-890](https://jira.spring.io/browse/SPR-890?redirect=false)** and commented  I just upgraded my web app to Spring 1.2 RC2 and Hibernate 3.0.1. I updated all spring references to the hibernate3 subpackage and followed the other migration steps.  When I ran my web app, I noticed a strange and severe issue. Several stateful web requests that were previously working were not persisting to the database after the upgrade.  I am using Spring MVC. My service API's that are called from the web controller are wrapped with the following transactional attributes.  \ \ \PROPAGATION_REQUIRED\ \PROPAGATION_REQUIRED\ \PROPAGATION_REQUIRED\ \PROPAGATION_REQUIRED,readOnly\ \ \  With Spring 1.1, Hibernate 2.1.8 the following worked fine in my setup :  1) user requests a page, edits some data and submits the form  2) in controller, I call myservice.find(...) [a readonly txn] in onBindAndValidate()/formBackingObject(). The find() method eventually calls getHibernateTemplate().find(..)  3) if errors present, errors are added by calling errors.reject(..) and Spring MVC framework redisplays the form the user with error messages. The invalid data that was bound to the object before the onBindAndValidate() call are discarded (because txn is readonly) and not saved to the DB.  4) if no errors are present, service method to save bound domain objects is called : myservice.save(myobj) [a non-readonly txn] which eventually calls getHibernateTemplate().saveOrUpdate(myobj) and the data is persisted to the database by Hibernate.  With Spring 1.2 RC2, Hibernate 3.0.1 I ran into problems. After running my app through a debugger here's what I found.  Basically what is happening with Spring 1.2 RC2/H3 is that in step 2) when getHibernateTemplate().find(..) is called, all objects returned by this query are marked are as org.hibernate.engine.Status.READ_ONLY query.setReadOnly(true) is called.  org.springframework.orm.hibernate3.HibernateTemplate#find(..) -->HibernateTemplate#prepareQuery(..) --->SessionFactoryUtils.applyTransactionTimeout(..) ---> if (TransactionSynchronizationManager.isCurrentTransactionReadOnly()) { query.setReadOnly(true); }  I noticed that the above code is new to the hibernate3 versions of the classes and did not exist in the ""classic"" H2 version.  Now when I reach step 4), getHibernateTemplate().saveOrUpdate(myobj) is eventually called via myservice.save(myobj). However since myobj was returned by myservice.find() is step 2) and marked as readonly, when saveOrUpdate is called on it, the changes are not persisted to the database.  Note that if I declare my service API txn attibutes as  \ \ \PROPAGATION_REQUIRED\ \ \  then the problem is that when invalid data is entered by users, onBindAndValidate does add to the errors instance and the form is redisplayed to the user with error messages but the changes to the bound domain object with bad data is persisted to the database. And this is not desirable.  Please let me know if I'm missing something.  Thanks, Sanjiv   ---  **Affects:** 1.2 RC1","closed","type: bug,","spring-projects-issues","2005-04-19T09:40:04Z","2005-04-21T04:46:26Z"
"","5556","upload snapshots to ibiblio [SPR-830]","**[Ryan Sonnek](https://jira.spring.io/secure/ViewProfile.jspa?name=wireframe)** opened **[SPR-830](https://jira.spring.io/browse/SPR-830?redirect=false)** and commented  would it be possible to distribute the snapshot releases (nightly builds) using ibiblio?  for those of us using the bleeding edge spring, it's slightly difficult to integrate into maven projects.  thanks.   --- No further details from [SPR-830](https://jira.spring.io/browse/SPR-830?redirect=false)","closed","status: declined,","spring-projects-issues","2005-03-29T04:06:51Z","2019-01-11T13:07:16Z"
"","5775","Provide better options to specify attributes on a redirect [SPR-1068]","**[Rusty Wright](https://jira.spring.io/secure/ViewProfile.jspa?name=lumpynose)** opened **[SPR-1068](https://jira.spring.io/browse/SPR-1068?redirect=false)** and commented  Spring needs a way to handle the ""redirect after post"" problem gracefully.  This keeps coming up on the forum.  http://forum.springframework.org/viewtopic.php?t=4200  ---  **Issue Links:** - #11130 Flash Scope  for Spring MVC (Without Spring Web Flow) (_**""is superseded by""**_)  28 votes, 25 watchers","closed","has: votes-jira,","spring-projects-issues","2005-06-22T01:33:12Z","2019-01-11T18:36:46Z"
"","5478","Proof read of chaper 12 of reference doc [SPR-750]","**[Russell Healy](https://jira.spring.io/secure/ViewProfile.jspa?name=russell.healy)** opened **[SPR-750](https://jira.spring.io/browse/SPR-750?redirect=false)** and commented  I have done a fairly extensive proof-read of the MVC chapter of the reference doc. I have emailed Juergen a copy of the changes.   ---  **Affects:** 1.1.4  **Attachments:** - [mvc.xml](https://jira.spring.io/secure/attachment/10558/mvc.xml) (_79.12 kB_)","closed","type: enhancement,","spring-projects-issues","2005-02-28T06:03:15Z","2012-06-19T03:54:14Z"
"","5567","LazyConnectionDataSourceProxy doesn't work with log level DEBUG [SPR-841]","**[Rurik Becker](https://jira.spring.io/secure/ViewProfile.jspa?name=epsilontik)** opened **[SPR-841](https://jira.spring.io/browse/SPR-841?redirect=false)** and commented  Inner class LazyConnectionInvocationHandler in class LazyConnectionDataSourceProxy does not handle method toString. Therefore the real connection is opened when toString is invoked on the proxy. Class DataSourceTransactionManager invokes toString on the connection in method doBegin.   ---  **Affects:** 1.1.5","closed","type: bug,","spring-projects-issues","2005-03-31T21:10:30Z","2005-04-02T01:58:31Z"
"","5838","Cache Properties in LocalSessionFactoryBean [SPR-1135]","**[Ruchi Ahuja](https://jira.spring.io/secure/ViewProfile.jspa?name=ruchiahuja10)** opened **[SPR-1135](https://jira.spring.io/browse/SPR-1135?redirect=false)** and commented  I am using hibernate 2.1.6. It provides support for \ and \ mappings in hibernate.cfg.xml.  I am specifying sessionFactory in applicationContext.xml. Need support for these properties in org.springframework.orm.hibernate.LocalSessionFactoryBean.   ---  **Affects:** 1.2.1","closed","","spring-projects-issues","2005-07-13T19:42:25Z","2019-01-11T19:34:18Z"
"","5601","Deadlock Issues with MSSQL when Multithreading [SPR-875]","**[Roshan Kadaramandalagi](https://jira.spring.io/secure/ViewProfile.jspa?name=roshank)** opened **[SPR-875](https://jira.spring.io/browse/SPR-875?redirect=false)** and commented  Hi  I am facing an issue when I run my application in a multithreaded environment. Specifically I am facing deadlock problems even with as few as 5 threads. The same application when run seems to run fine on a MySQL with as many as 60 threads. Any pointers on how to resolve this in MSSQL?  The scenario is something like this: I am trying to add an object called 'subscriber' with all the relevant details. The relationships are as follows.  There is a subscriber object(table) with many properties, subID being the primary key. This object has a one-to-one mapping with another object 'individual', foreign key relationships with two other tables 'AdBook' and 'SubRole' with 'subID' property being the binding property.  The 'individual' object has an 'indID' to be the primary key. This object has a many-to-one relationship with the 'subscriber' object (subID). Also has a many-to-one relationship with a 'contact' object with 'contactID' property being the binding one.  The 'SubRole' has a composite key.... key-many-to-one with 'subscriber' object (subID) and key-many-to-one with yet another object called 'role'  The 'AdBook' object has a many-to-one relationship with 'subscriber' object (subID) and a foreign key with respect to the object 'contact' with 'adID' as binding property.  The 'contact' object has a many-to-one with 'AdBook' with 'adID' property, a 'contactID' as primary key, and a one-to-one relation with the 'individual' object  When I try to add a subscriber with multiple threads, I'm facing deadlock issues.  I'm using HibernateTemplate (Hibernate 3.0final version, Spring1.2RC1)   ---  **Affects:** 1.2 RC1","closed","","spring-projects-issues","2005-04-10T23:58:42Z","2019-01-11T13:06:06Z"
"","5591","InstantiationException when there are circular dependencies [SPR-865]","**[Roshan Kadaramandalagi](https://jira.spring.io/secure/ViewProfile.jspa?name=roshank)** opened **[SPR-865](https://jira.spring.io/browse/SPR-865?redirect=false)** and commented  I am having an issue in my application where a bean is not getting instantiated. and it says something like this ""FactoryBean returned null object: probably not fully initialized (maybe due to circular bean reference)""  The funny thing is it was working well in Spring 1.1.1 and Hibernate 2.1  But when I'm trying to migrate to Spring1.2RC1/Hibernate3.0 Final, i am getting the above error.  The scenario is something like this  Bean A has a primary key pk1 Bean A is associated to Bean B The bean B has a foreign key relationship with pk1 of Bean A  In the hibernate mapping hbm xml, I have for Bean A a 'one-to-one' reference and similarly a one-to-one mapping in Bean B hbm xml.  In Bean B's empty public constructor, I'm trying to instantiate Bean A.  Any inputs on this?   ---  **Affects:** 1.2 RC2","closed","","spring-projects-issues","2005-04-07T20:43:48Z","2019-01-11T13:06:44Z"
"","5678","Typos in section 14.3 [SPR-964]","**[Ronald Holshausen](https://jira.spring.io/secure/ViewProfile.jspa?name=uglyog)** opened **[SPR-964](https://jira.spring.io/browse/SPR-964?redirect=false)** and commented  Two typos in section 14.3 of 1.2 docs:  14.3.1.1. DelegatingRequestProcessor  ---  ... Both of the following snippets will work:  \		 \  ---  The two snippets are identical. I assume the second should be: \ ??  14.3.1.2. DelegatingActionProxy  ""ach"" should be ""each""?  ---  Defining your Action in a context file enables you to use Spring's IoC features, as well as instantiate new Actions for ach request. ---------------------------------------------    ^^^  ---  **Affects:** 1.2 final","closed","type: enhancement,","spring-projects-issues","2005-05-18T21:03:38Z","2019-01-13T22:51:40Z"
"","5470","old version of  mysql driver bundled [SPR-742]","**[Ron Bodkin](https://jira.spring.io/secure/ViewProfile.jspa?name=rjbodkin)** opened **[SPR-742](https://jira.spring.io/browse/SPR-742?redirect=false)** and commented  The hibernate version of the petclinic doesn't work on mysql because an obselete version of the mysql jdbc driver (2.0.14) is bundled, which results in the following exception when trying to insert records  java.lang.AbstractMethodError: com.mysql.jdbc.jdbc2.Connection.prepareStatement  Suggested fix: bundle the latest 3.0.x mysql jdbc driver (this fixes the issue for me).   ---  **Affects:** 1.1.4","closed","type: bug,","spring-projects-issues","2005-02-27T07:55:14Z","2005-02-27T08:07:33Z"
"","5813","Add support for autostarting the RMI registry for JMX connector factories [SPR-1109]","**[Ron Bodkin](https://jira.spring.io/secure/ViewProfile.jspa?name=rjbodkin)** opened **[SPR-1109](https://jira.spring.io/browse/SPR-1109?redirect=false)** and commented  I wrote the following code to support using JMX remote with RMI without having to explicitly start an RMI registry. I thought you might like to incorporate this back into Spring JMX.  import java.net.MalformedURLException; import java.rmi.AccessException; import java.rmi.NotBoundException; import java.rmi.RemoteException; import java.rmi.registry.LocateRegistry; import java.rmi.registry.Registry; import java.rmi.server.RMISocketFactory;  import javax.management.remote.JMXServiceURL;  import org.springframework.beans.factory.DisposableBean; import org.springframework.jmx.support.ConnectorServerFactoryBean;  /** * this handy little guy lets us auto-start an RMI registry in process with a server, to simplify deploying the  * service in production and testing  *   * `@author` Ron Bodkin   */   // there's no public API to shut down the RMI registry, and this method is reentrant, i.e., if it's already running, we're   // fine, so long as everything that was registered with it is also unregistered!   public class AutostartRegistryConnectorFactoryBean extends ConnectorServerFactoryBean {   private static String JNDI_PREFIX = ""/jndi/rmi://localhost:"";   //private boolean startedRegistry = false;   //private Registry registry;    public void setServiceUrl(String serviceUrlStr) {   super.setServiceUrl(serviceUrlStr);   try {   afterSetServiceUrl(new JMXServiceURL(serviceUrlStr));   } catch (MalformedURLException e) {   throw new CantConnectException(""bad url"", e);   }   }    public void setServiceJmxUrl(JMXServiceURL serviceUrl) {   super.setServiceUrl(serviceUrl.toString());   afterSetServiceUrl(serviceUrl);   }    public void afterSetServiceUrl(JMXServiceURL serviceUrl) {   try {   if (isLocalJndi(serviceUrl)) {   int port = parsePort(serviceUrl);   if (!rmiRegistryExists(port)) {   System.out.println(""CrankJ starting RMI registry on port ""+port);   startRmiRegistry(port);   }   }               } catch (Throwable t) {   throw new CantConnectException(""bad news"", t);   }           }    /**    * `@return`     */     private int parsePort(JMXServiceURL url) {     int port;     int ps = JNDI_PREFIX.length();     int pe;     String path = url.getURLPath();     for (pe = ps; pe","closed","type: enhancement,","spring-projects-issues","2005-07-07T03:31:55Z","2012-06-19T03:54:14Z"
"","5337","Allow the HessianProxyFactory of HessianProxyFactoryBean to be injected [SPR-609]","**[Rolf Arne Corneliussen](https://jira.spring.io/secure/ViewProfile.jspa?name=rolfarne)** opened **[SPR-609](https://jira.spring.io/browse/SPR-609?redirect=false)** and commented  We want to customize the way the way Hessian works on the client side, for example we want to use headers, and we want to use a different http handling with custom socket factories.  We are able to achieve this by subclassing com.caucho.hessian.client.HessianProxyFactory, and using a different implementation of the InvocationHandler.  However, the HessianProxyFactory (com.caucho.hessian.client.HessianProxyFactory) used by HessianProxyFactoryBean is assigned to a final variable when the superclass, HessianClientInterceptor, is constructed:  private final HessianProxyFactory proxyFactory = new HessianProxyFactory();  We would like to be able to inject our subclass of HessianProxyFactory into HessianProxyFactoryBean as a constuctor argument (while keeping backwards compatible).  Proposed solution:  Add the following constructors to HessianProxyFactoryBean:  public HessianProxyFactoryBean() { super(); }  public HessianProxyFactoryBean(HessianProxyFactory proxyFactory) { super(proxyFactory); }  Also add the following constructors to HessianClientInterceptor:  public HessianClientInterceptor() { proxyFactory = new HessianProxyFactory(); }  public HessianClientInterceptor(HessianProxyFactory proxyFactory) { this.proxyFactory = proxyFactory; }  ...and remove the 'final' from the declaration of proxyFactory.   ---  **Affects:** 1.1.3","closed","type: enhancement,","spring-projects-issues","2005-01-11T02:45:21Z","2005-01-11T03:59:06Z"
"","5799","MetadataMBeanInfoAssembler: 'persistPolicy' for attributes doesn't fallback to MBean level [SPR-1095]","**[Roland Huss](https://jira.spring.io/secure/ViewProfile.jspa?name=roland.huss)** opened **[SPR-1095](https://jira.spring.io/browse/SPR-1095?redirect=false)** and commented  In MetadataMBeanInfoAssembler:  protected void populateAttributeDescriptor(....) { [...] String persistPolicy = resolveStringDescriptor( gma.getPersistPolicy(), sma.getPersistPolicy(), PERSIST_POLICY_NEVER);  desc.setField(FIELD_PERSIST_POLICY, persistPolicy); [...] }  If there is no 'persistPolicy' set on an JMX attribute via a ManagedAttribute annotation, the persistPolicy should be inherited from  the ManagedResource annotation and **not** set to PERSIST_POLICY_NEVER by  default as it is the case here. The solution is not to call 'desc.setField()' if no  persistPolicy is set for an attribute, since JMX will pick up the one provided for the MBean anyway.    ---  **Affects:** 1.2.2","closed","in: core,","spring-projects-issues","2005-07-01T06:48:45Z","2005-07-03T15:45:16Z"
"","5798","PropertyOverrideConfigurer doesn't work with bean names containing '.' [SPR-1094]","**[Roland Huss](https://jira.spring.io/secure/ViewProfile.jspa?name=roland.huss)** opened **[SPR-1094](https://jira.spring.io/browse/SPR-1094?redirect=false)** and commented  If a bean name contains dots (.), its properties cannot be overwritten with PropertyOverrideConfigurer.  This is due to the way how the bean is examined in PropertyOverrideConfigurer.processKey():  // .... int dotIndex = key.indexOf('.'); // ....  So only the first part of a dotted bean name is used and the rest as the property name which obiously doesn't work.  IMHO the better alternative is to use 'lastIndexOf()' since nested properties doesn't make sense in this context anyway.    ---  **Affects:** 1.2.1","closed","in: core,","spring-projects-issues","2005-07-01T06:38:22Z","2005-07-04T07:15:57Z"
"","5559","""Invalid property"" error for attribute name where the first letter is small and the second is capitalized [SPR-833]","**[Roger Backes](https://jira.spring.io/secure/ViewProfile.jspa?name=rbackes)** opened **[SPR-833](https://jira.spring.io/browse/SPR-833?redirect=false)** and commented  Let's have for example a attribute named ""jCode"" on a simple bean. Therefore the correct getter and setter names are getJCode and setJCode.  In the spring context the property can not be set like this           	     		Hello World     	       because spring expected the following setter name setjCode. In my mind this is wrong.   ---  **Affects:** 1.1.4, 1.1.5","closed","status: declined,","spring-projects-issues","2005-03-29T23:53:54Z","2019-01-12T16:41:30Z"
"","5640","AbstractXsltView issue on Resin [SPR-917]","**[Rogelio Nocom Jr.](https://jira.spring.io/secure/ViewProfile.jspa?name=nox)** opened **[SPR-917](https://jira.spring.io/browse/SPR-917?redirect=false)** and commented  i have a code that works fine on the 1.0.x series. but now am trying to use acegi for my app's authentication needs. acegi requires the Assert class only found on 1.2.x and 1.1.x series.  the problem is the transformations are now incorrect. for example my controller form at first load would be fine. when i try to push the button or perform the post the page doesnt change! the url indicates that is actually calling the result form but the actual page displayed is the original input form!  the debug messages actually indicate it was calling the correct xsl view but is displaying the previous view. really at a loss what's happening here.  any help would be greatly appreciated. are there any changes on 1.2.x series that affected the AbstractXsl views?  many thanks in advance!    ---  **Affects:** 1.1.5, 1.2 RC2","closed","status: declined,","spring-projects-issues","2005-05-04T20:10:03Z","2019-01-12T16:41:24Z"
"","5505","Not aplying interceptors when registering controllers with the CommonsPathMapHandlerMapping [SPR-778]","**[Rodrigo Urubatan Ferreira Jardim](https://jira.spring.io/secure/ViewProfile.jspa?name=urubatan)** opened **[SPR-778](https://jira.spring.io/browse/SPR-778?redirect=false)** and commented  when using CommonsPathMapHandlerMapping to register the web framework controllers, it was not calling the BeanPostProcessors that way the AOP interceptors ware not being aplyied to the attribute configured controllers.  my temporary solution for this problem was change the AbstractPathMapHandlerMapping.initApplicationContext method adding two more lines: 130:handler = beanFactory.applyBeanPostProcessorsBeforeInitialization(handler,handlerClass.getName());  and 136:handler = beanFactory.applyBeanPostProcessorsBeforeInitialization(handler,handlerClass.getName());  but this only works for the interceptors and post processors in the same beanFactory/ApplicationContext, I think the post processors should be inherited from the parent bean factory, like a call to the getBean method  with some thing like this: in the class org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory method applyBeanPostProcessorsAfterInitialization and method applyBeanPostProcessorsBeforeInitialization  some code like: if(getParentBeanFactory() instanceof AutowireCapableBeanFactory) ((AutowireCapableBeanFactory)getParentBeanFactory()).applyBeanPostProcessorsBeforeInitialization(bean,name);  for each one respectively.  for now I'm working with an costumized version of AbstractPathMapHandlerMapping, but I think this could help more people :D  Thanks. (and sorry for my terrible english)   ---  **Affects:** 1.1.3, 1.1.4, 1.1.5  **Attachments:** - [AbstractPathMapHandlerMapping.java](https://jira.spring.io/secure/attachment/10583/AbstractPathMapHandlerMapping.java) (_7.94 kB_)","closed","in: core,","spring-projects-issues","2005-03-14T03:48:14Z","2012-06-19T03:54:41Z"
"","5171","Type of autowire used in the AbstractPathMapHandlerMapping [SPR-442]","**[Rodrigo Urubatan Ferreira Jardim](https://jira.spring.io/secure/ViewProfile.jspa?name=urubatan)** opened **[SPR-442](https://jira.spring.io/browse/SPR-442?redirect=false)** and commented  is there a reason to ""autowire by type"" be used instead of ""autowire by name"" in the AbstractPathMapHandlerMapping/CommonsPathMapHandlerMapping? and it is verifying dependencies too, this is a problem if you want to map with attributes a MultiActionController and is a problem too, when like in the application I'm working on, I have just one dao implementation (using Hibernate and QBE) and just a property in this dao specifies what class it should work with.  I solved my problem for now, changing the line 78 of AbstractPathMapHandlerMapping to: Code:  Object handler = beanFactory.autowire(handlerClass, AutowireCapableBeanFactory.AUTOWIRE_BY_NAME, false);  what do you think about providing at least a configuration for this properties, so the user can choose the behavior of this class?   ---  **Affects:** 1.1.3  **Attachments:** - [AbstractPathMapHandlerMapping.java](https://jira.spring.io/secure/attachment/10297/AbstractPathMapHandlerMapping.java) (_5.41 kB_)","closed","type: enhancement,","spring-projects-issues","2004-11-01T23:09:52Z","2004-11-06T21:22:12Z"
"","5391","Jasper Reports support for adding new reports at runtime [SPR-663]","**[Rodney Gallart](https://jira.spring.io/secure/ViewProfile.jspa?name=rodney.gallart)** opened **[SPR-663](https://jira.spring.io/browse/SPR-663?redirect=false)** and commented  Rob told me to include this idea in the JIRA basically i'm trying to make a Controller, an implementation of JRDataSource and a Report class that have the parameters and HQL of the report (can populated from database or from applicationContext) permit to include new reports without modify the view.properties file and take a Set of objects obtained form an HQL query and populate the report with that, the code is in a very early stage and we are going to improve it.  Rodney   ---  **Affects:** 2.0 M1  **Attachments:** - [reports.rar](https://jira.spring.io/secure/attachment/10470/reports.rar) (_7.94 kB_)","closed","type: enhancement,","spring-projects-issues","2005-01-28T03:23:11Z","2012-06-19T03:54:29Z"
"","5148","Attribute-based transactions produce excessive memory usage when applied to prototypes [SPR-418]","**[Rod Johnson](https://jira.spring.io/secure/ViewProfile.jspa?name=rod.johnson)** opened **[SPR-418](https://jira.spring.io/browse/SPR-418?redirect=false)** and commented  The size of the attribute cache (keyed by method) grows without bound when applying attribute-driven transactions to prototypes.  See http://forum.springframework.org/viewtopic.php?t=1056.   ---  **Affects:** 1.1.2","closed","type: bug,","spring-projects-issues","2004-10-23T04:21:45Z","2012-06-19T03:53:55Z"
"","5129","Allow use of AspectJ pointcut expressions to target Spring advice [SPR-399]","**[Rod Johnson](https://jira.spring.io/secure/ViewProfile.jspa?name=rod.johnson)** opened **[SPR-399](https://jira.spring.io/browse/SPR-399?redirect=false)** and commented  Relies on repackaging of AspectJ pointcut code, and provision of a suitable API in AspectJ to base this on.   --- No further details from [SPR-399](https://jira.spring.io/browse/SPR-399?redirect=false)","closed","type: enhancement,","spring-projects-issues","2004-10-15T19:18:35Z","2012-06-19T03:54:28Z"
"","5121","Lookup method does not work with overloaded method when autoproxied [SPR-391]","**[Rod Johnson](https://jira.spring.io/secure/ViewProfile.jspa?name=rod.johnson)** opened **[SPR-391](https://jira.spring.io/browse/SPR-391?redirect=false)** and commented  Lookup method fails when a method is overloaded on the lookup class.  Only noticed when autoproxying--apparently with CGLIB only.  Reported in forums: http://forum.springframework.org/viewtopic.php?p=5290   ---  **Affects:** 1.1.1","closed","type: bug,","spring-projects-issues","2004-10-12T22:22:54Z","2012-06-19T03:54:41Z"
"","5089","Support Rickard Oberg's ""Abstract Schema"" concept for AOP [SPR-359]","**[Rod Johnson](https://jira.spring.io/secure/ViewProfile.jspa?name=rod.johnson)** opened **[SPR-359](https://jira.spring.io/browse/SPR-359?redirect=false)** and commented   --- No further details from [SPR-359](https://jira.spring.io/browse/SPR-359?redirect=false)","closed","type: enhancement,","spring-projects-issues","2004-09-28T22:11:16Z","2006-04-12T00:36:10Z"
"","5086","Objects using lookup methods or MethodReplacers are not Serializable [SPR-356]","**[Rod Johnson](https://jira.spring.io/secure/ViewProfile.jspa?name=rod.johnson)** opened **[SPR-356](https://jira.spring.io/browse/SPR-356?redirect=false)** and commented  Objects with MethodReplacer or Lookup methods (Method Injection) are not serializable.  See http://forum.springframework.com/viewtopic.php?t=591.  Need to resolve whether such an enhancement makes sense or is feasible.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8028eae786ff36ea58df9a385319bf045795fa77","closed","type: enhancement,","spring-projects-issues","2004-09-27T05:41:11Z","2006-01-28T05:13:34Z"
"","5067","Cannot autoproxy objects created by FactoryBeans [SPR-337]","**[Rod Johnson](https://jira.spring.io/secure/ViewProfile.jspa?name=rod.johnson)** opened **[SPR-337](https://jira.spring.io/browse/SPR-337?redirect=false)** and commented  From forum thread: http://forum.springframework.org/viewtopic.php?t=790  How can I proxy an object returned by a FactoryBean? Specifically, I want to put a DebugInterceptor around a RemoteStatelessSessionProxyFactoryBean. The problem is, it puts it around the FactoryBean, not what the FactoryBean returns (the proxy to the EJB)  Here's an example: Code: \ \ \userService,caseService,customerService,contactService\ \ \ \ \debugInterceptor\ \ \ \  \  \  \  \mypackage.UserService\  \  \  \UserServiceBean-v1.6.0.0\  \  \  \  \  \   What that produces is entries in my log of: Code: Debug interceptor: count=1 invocation=[Invocation: method=[public abstract java.lang.Object org.springframework.beans.factory.FactoryBean.getObject() throws java.lang.Exception] args=null] target is of class [org.springframework.ejb.access.SimpleRemoteStatelessSessionProxyFactoryBean]] Debug interceptor: next returned  ... which isn't very helpful.  Omar replied:  To proxy BeanFactory returned Object instead of BeanFactory itself you can apply your interceptors using ProxyFactoryBean: Code:  \  \  \  \  \mypackage.UserService\  \  \  \UserServiceBean-v1.6.0.0\  \  \  \  \  \  \  \  \  \debugInterceptor\  \  \  \    ---  4 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2004-09-18T23:16:46Z","2012-06-19T03:54:18Z"
"","5500","TransactionManagerName is not used when no userTransaction specified [SPR-773]","**[Robson Miranda](https://jira.spring.io/secure/ViewProfile.jspa?name=rpdmiranda)** opened **[SPR-773](https://jira.spring.io/browse/SPR-773?redirect=false)** and commented  If I want to specify only the TransactionManager, the transactionManagerName is not used to build the UserTransactionAdaptor.  The JtaTransactionManager class, method afterPropertiesSet() does not test if an transactionManagerName is specified, if the transactionManager attribute is empty.   ---  **Affects:** 1.1.5","closed","type: bug,","spring-projects-issues","2005-03-10T09:28:06Z","2005-03-20T05:10:03Z"
"","5259","Velocimacro springFormSingleSelect  doesn't recognize ""false"" value in options hashtable [SPR-530]","**[Roberto Cosenza](https://jira.spring.io/secure/ViewProfile.jspa?name=robcos)** opened **[SPR-530](https://jira.spring.io/browse/SPR-530?redirect=false)** and commented  See the following snaphost from the file spring.vm  #macro( springFormSingleSelect $path $options $attributes ) #springBind($path)  #foreach($option in $options.keySet())  \>            #if($status.value && $status.value == $option) selected=""true"" #end> ${options.get($option)} \ #end \ #end  If  $status.value contains the string ""false"", the condition is never evaluated. Note that the checkbox variant of the macro does not check the variable existence itself.    ---  **Affects:** 1.1.2","closed","type: bug,","spring-projects-issues","2004-12-08T01:35:24Z","2004-12-08T07:14:27Z"
"","5524","JavaMail implementation should set date. [SPR-797]","**[Robert Sanders](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.sanders@ipov.net)** opened **[SPR-797](https://jira.spring.io/browse/SPR-797?redirect=false)** and commented  This is something that has always bugged me about the JavaMail API; when I first started using Spring I was hopefull that Spring's JavaMail support would smooth out this rough edge, as it does so many others.  Basically, it revolves around the fact that you need to call: javax.mail.Message.setSentDate(new Date()) or the Date header on the message is never set, resulting in poor handeling by many email clients.  It seems to me it should be fairly trivial to add this as a boolean option to the JavaMail support so that the helper classes automatically set the date of a message if it is not set.   ---  **Affects:** 1.1.5","closed","type: enhancement,","spring-projects-issues","2005-03-19T09:42:14Z","2005-03-19T22:19:48Z"
"","5307","Request attributes snapshot and Tomcat 5.0 [SPR-579]","**[Robert Sanders](https://jira.spring.io/secure/ViewProfile.jspa?name=robert.sanders@ipov.net)** opened **[SPR-579](https://jira.spring.io/browse/SPR-579?redirect=false)** and commented  I am not sure if this is a Spring problem or a Tomcat problem; but I figured the Spring developers would want to know.  I had upgraded to Spring 1.1.3 and noticed the JSPs with jsp:include or c:import created an error; after looking at the Spring code it seems to be caused by an interaction with Tomcat's Request Attribute implementation and Spring's request attribute snapshot:  java.util.NoSuchElementException at org.apache.catalina.core.ApplicationHttpRequest$AttributeNamesEnumerator.nextElement(ApplicationHttpRequest.java:868) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:648) at org.springframework.web.servlet.FrameworkServlet.serviceWrapper(FrameworkServlet.java:368) at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:319) at javax.servlet.http.HttpServlet.service(HttpServlet.java:689) at javax.servlet.http.HttpServlet.service(HttpServlet.java:802) ...   ---  **Affects:** 1.1.3","closed","type: bug,","spring-projects-issues","2004-12-21T09:12:23Z","2004-12-21T18:38:02Z"
"","5001","Tidying of JdbcBeanDefinitionReaderTests [SPR-270]","**[Robert Newson](https://jira.spring.io/secure/ViewProfile.jspa?name=rnewson)** opened **[SPR-270](https://jira.spring.io/browse/SPR-270?redirect=false)** and commented  I'm investigating the JdbcBeanDefinitionReader class with a view to enhancing it.  A cursory glance at the tests suggested some improvements.  1) I find using the expectAndReturn() methods of EasyMock much more readable (and safe) than the current method used in this test case.  2) Given the above change, there's seems to need to put the mock data in an array, it's clearer if it's directly in the expectAndReturn call.  3) I've changed the assertTrue()'s to assertEquals()'s with appropriate failure messages.    ---  **Affects:** 1.1 RC1  **Attachments:** - [JdbcBeanDefinitionReaderTests.patch](https://jira.spring.io/secure/attachment/10166/JdbcBeanDefinitionReaderTests.patch) (_3.17 kB_)","closed","type: enhancement,","spring-projects-issues","2004-08-18T06:47:12Z","2004-08-29T02:55:42Z"
"","5333","JasperReports: Attempt to provide unified view for all export types [SPR-605]","**[Rob Moore](https://jira.spring.io/secure/ViewProfile.jspa?name=robmoore)** opened **[SPR-605](https://jira.spring.io/browse/SPR-605?redirect=false)** and commented  I needed to provide a single view which can output multiple export types (pdf, xls, etc). In the process of implementing a solution, I came up with something that may seem like a hack in some respects, but at least provides food for thought.  I've found some shortcomings to the current classes. I attempt to address these as well (which probably belong in another ticket...):  1. Need additional information required for Internet Explorer to properly handle content types. See http://www.lowagie.com/iText/faq.html#msie.  2. Need ability to specify report parameters.  3. Need to support for JRDataSourceProvider. This is a useful addition for those using JasperAssistant.  4. Need ability to specify content disposition on response (in part due to issue 1).  I attempt to resolve views by using the report name and the extension of the type I want to export. So views take the form of \.\ (that's the hackish part of this solution). So, for example, to resolve a view called myReport and export it to PDF, I pass in the view name ""myReport.pdf.""  I define the various view components using a parameters class that contains the unique aspects of each view-export type. See JasperReportsViewParameters for info.  I have attempted to use as much of the existing Jasper classes as possible, but I have had to override AbstractJasperReportsView extensively.  Here is the snippet from my *-servlet.xml:                            1                               /WEB-INF/jasper/                               .jasper                               reportDataSource                                                                     ../../images/spacer.gif?                                                                                                                                     inline; filename=report.html                 inline; filename=report.pdf                 inline; filename=report.xls                 inline; filename=report.xml                 attachment; filename=report.ser                             Please feel free to contact me with questions are clarifications.  Thanks,  Rob   ---  **Affects:** 1.1.3  **Attachments:** - [jasper.tar.gz](https://jira.spring.io/secure/attachment/10423/jasper.tar.gz) (_4.25 kB_)","closed","type: enhancement,","spring-projects-issues","2005-01-10T09:14:19Z","2019-01-11T12:51:41Z"
"","5200","incorrect html in spring.vm [SPR-471]","**[Rob Moore](https://jira.spring.io/secure/ViewProfile.jspa?name=robmoore)** opened **[SPR-471](https://jira.spring.io/browse/SPR-471?redirect=false)** and commented  In spring.vm, the springFormSingleSelect and springFormMultiSelect macros use selected=""true"" in the options element rather than selected=""selected"". The resulting html is invalid.  http://www.glasshaus.com/formsreference/select.htm   ---  **Affects:** 1.1.3","closed","type: bug,","spring-projects-issues","2004-11-17T05:15:38Z","2019-01-11T14:14:16Z"
"","5680","PropertyResourceConfigurer.convertPropertyValue never gets called [SPR-966]","**[Rob Hasselbaum](https://jira.spring.io/secure/ViewProfile.jspa?name=rhasselbaum)** opened **[SPR-966](https://jira.spring.io/browse/SPR-966?redirect=false)** and commented  API docs say that you can override convertPropertyValue(String) in subclasses of PropertyPlaceholderConfigurer to perform custom value conversions like decrypting an encrypted value.  Unfortunately, convertPropertyValue (or, more specifically, convertProperties) never gets called by Spring.   ---  **Affects:** 1.1.5","closed","in: core,","spring-projects-issues","2005-05-19T01:37:20Z","2005-05-19T05:36:28Z"
"","5686","JSF View Support [SPR-973]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-973](https://jira.spring.io/browse/SPR-973?redirect=false)** and commented  Support the use of JSF pages as a view with a Spring MVC controller.   ---  **Affects:** 2.0 M1  2 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2005-05-20T23:02:22Z","2012-06-19T02:28:24Z"
"","5685","Client API For Spring JMX [SPR-972]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-972](https://jira.spring.io/browse/SPR-972?redirect=false)** and commented  Improve the API of MBeanExporter to make it easier for MBeans to be exported to JMX at runtime by user code. Introduce an MBeanExporterOperations interface??   ---  **Affects:** 1.2 final  3 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2005-05-20T23:01:28Z","2012-06-19T03:54:03Z"
"","5684","Better AspectJ Integration [SPR-971]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-971](https://jira.spring.io/browse/SPR-971?redirect=false)** and commented  Support Spring-style configuration of any AspectJ aspect, irrespective of lifecycle.   --- No further details from [SPR-971](https://jira.spring.io/browse/SPR-971?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-05-20T23:00:20Z","2012-06-19T03:54:11Z"
"","5683","AspectJ-style Pointcuts [SPR-970]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-970](https://jira.spring.io/browse/SPR-970?redirect=false)** and commented  Support AspectJ-style pointcuts for Spring AOP   --- No further details from [SPR-970](https://jira.spring.io/browse/SPR-970?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-05-20T22:59:22Z","2006-01-05T04:28:58Z"
"","5645","Fix HTTPS handling for JasperReports in IE [SPR-922]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-922](https://jira.spring.io/browse/SPR-922?redirect=false)** and commented  Need to call response.reset() before rendering.  ---  **Affects:** 1.2 final  **Issue Links:** - #9004 CacheSeconds not working properly with jasper reports view","closed","type: bug,","spring-projects-issues","2005-05-05T00:54:16Z","2019-01-11T22:06:53Z"
"","5623","Incompatibility between @ManagedResource and @Transaction [SPR-896]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-896](https://jira.spring.io/browse/SPR-896?redirect=false)** and commented  See forum post: http://forum.springframework.org/viewtopic.php?t=4947   ---  **Affects:** 1.2 RC2","closed","in: core,","spring-projects-issues","2005-04-20T18:59:19Z","2005-05-05T00:53:29Z"
"","5596","JMX Documentation [SPR-870]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-870](https://jira.spring.io/browse/SPR-870?redirect=false)** and commented   ---  **Affects:** 1.2 RC2","closed","type: task,","spring-projects-issues","2005-04-09T22:51:18Z","2005-04-20T03:43:36Z"
"","5562","[JMX] Support for different attribute casing strategies [SPR-836]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-836](https://jira.spring.io/browse/SPR-836?redirect=false)** and commented  Attribute names are currently derived from JavaBean property names. It should be possible to change the casing behaviour such that a property with setter setFoo() gives attribute Foo instead of foo.  Applys to assemblers and interceptor.   ---  **Affects:** 1.2 RC1","closed","type: enhancement,","spring-projects-issues","2005-03-30T07:58:57Z","2005-03-30T23:33:25Z"
"","5540","ExporterParameters not working as expected in JasperReports. [SPR-813]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-813](https://jira.spring.io/browse/SPR-813?redirect=false)** and commented  See http://forum.springframework.org/viewtopic.php?t=4280   ---  **Affects:** 1.1.5","closed","type: bug,","spring-projects-issues","2005-03-23T03:37:32Z","2005-04-04T00:17:42Z"
"","5512","[JMX] - Metadata Support for Operation Parameters [SPR-785]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-785](https://jira.spring.io/browse/SPR-785?redirect=false)** and commented   --- No further details from [SPR-785](https://jira.spring.io/browse/SPR-785?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-03-15T05:31:47Z","2005-03-23T23:27:17Z"
"","5485","Support for JasperReports Applet Viewer [SPR-757]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-757](https://jira.spring.io/browse/SPR-757?redirect=false)** and commented  See forum post: http://forum.springframework.org/viewtopic.php?t=3795&highlight=   ---  **Affects:** 1.1.5","closed","type: enhancement,","spring-projects-issues","2005-03-01T09:13:04Z","2007-01-06T19:00:57Z"
"","5472","Detect proxies and look for attributes on superclass in MetadataModelMBeanInfoAssembler [SPR-744]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-744](https://jira.spring.io/browse/SPR-744?redirect=false)** and commented   --- No further details from [SPR-744](https://jira.spring.io/browse/SPR-744?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-02-27T19:30:45Z","2005-02-27T23:04:54Z"
"","5471","Change default JSR-160 protocol to RMI [SPR-743]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-743](https://jira.spring.io/browse/SPR-743?redirect=false)** and commented   --- No further details from [SPR-743](https://jira.spring.io/browse/SPR-743?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-02-27T19:30:05Z","2012-06-19T03:18:58Z"
"","5425","Support description metadata for operations in MetadataModelMBeanInfoAssembler [SPR-697]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-697](https://jira.spring.io/browse/SPR-697?redirect=false)** and commented  Extend the ManagedOperation attribute to allow descriptions to be specified for operations.   --- No further details from [SPR-697](https://jira.spring.io/browse/SPR-697?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-02-07T19:49:42Z","2005-02-27T22:30:48Z"
"","5411","[JMX] Autodetect User-Defined MBeans [SPR-683]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-683](https://jira.spring.io/browse/SPR-683?redirect=false)** and commented  Users should not have to map beans that are already valid MBeans to the MBeanExporter - instead MBeanExporter should detect these beans and add them to list of beans for registration using some generated name like spring:mbean=. If users require more control over the name then they can always register the bean manually.   --- No further details from [SPR-683](https://jira.spring.io/browse/SPR-683?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-02-03T09:56:27Z","2005-02-27T23:04:43Z"
"","5408","Notification Support in JMX [SPR-680]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-680](https://jira.spring.io/browse/SPR-680?redirect=false)** and commented  Spring JMX should support JMX notifications in two ways:  1. Registration of Notification Listeners using configuration 2. Spring beans should be able to send JMX notifications  Rob   ---  **Attachments:** - [SpringJMX_Notification_v1.1.zip](https://jira.spring.io/secure/attachment/11241/SpringJMX_Notification_v1.1.zip) (_74.15 kB_) - [SpringJMX_Notification.zip](https://jira.spring.io/secure/attachment/11235/SpringJMX_Notification.zip) (_73.50 kB_)  7 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2005-02-02T20:07:19Z","2012-06-19T03:54:36Z"
"","5406","Doc: Update JasperReports Documentation [SPR-678]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-678](https://jira.spring.io/browse/SPR-678?redirect=false)** and commented  Update the JasperReports docs to include all new features.   ---  **Affects:** 1.1.4","closed","type: enhancement,","spring-projects-issues","2005-02-02T07:43:14Z","2005-02-27T22:29:10Z"
"","5371","NullPointerException in HibernateTemplate [SPR-643]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-643](https://jira.spring.io/browse/SPR-643?redirect=false)** and commented  See forum post: http://forum.springframework.org/viewtopic.php?p=12248.  Essentially the two arg HibernateTemplate.iterate() method causes a NullPointerException in the three arg version by calling  iterate(x, y, (Type[])null) rather than iterate(x, y, new Type[]{})   ---  **Affects:** 1.1.3","closed","type: bug,","spring-projects-issues","2005-01-20T02:00:28Z","2005-01-23T23:35:25Z"
"","5364","Fix IE Rendering Problems with JasperReports Views [SPR-636]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-636](https://jira.spring.io/browse/SPR-636?redirect=false)** and commented   ---  **Affects:** 1.1.3","closed","type: bug,","spring-projects-issues","2005-01-18T09:28:08Z","2005-01-20T01:33:37Z"
"","5361","Extend InterfaceBasedModelMBeanInfoAssembler to Support Multiple Interface Sets [SPR-633]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-633](https://jira.spring.io/browse/SPR-633?redirect=false)** and commented   ---  **Affects:** 1.2 RC1","closed","type: enhancement,","spring-projects-issues","2005-01-18T04:04:10Z","2005-01-28T03:54:22Z"
"","5360","Improve MBean Detection Logic in MBeanExporter [SPR-632]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-632](https://jira.spring.io/browse/SPR-632?redirect=false)** and commented  Currently only DynamicMBeans are detected correctly. Any bean that follows the MBean naming conventions should also be detected.  Rob   ---  **Affects:** 1.2 RC1","closed","type: enhancement,","spring-projects-issues","2005-01-18T03:14:45Z","2005-02-02T03:48:32Z"
"","5326","Add Support for JasperReports Subreports to View Classes. [SPR-598]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-598](https://jira.spring.io/browse/SPR-598?redirect=false)** and commented   ---  **Affects:** 1.1.3","closed","type: enhancement,","spring-projects-issues","2005-01-05T22:37:40Z","2005-01-15T02:58:46Z"
"","5297","Janino Based Proxy Support [SPR-568]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-568](https://jira.spring.io/browse/SPR-568?redirect=false)** and commented  Add a new implementation of AopProxyFactory that uses Janino internally to create proxy class Java code on the fly. Java code templates should be abstracted using Velocity.   ---  **Affects:** 1.2 RC1","closed","type: enhancement,","spring-projects-issues","2004-12-17T02:32:19Z","2012-06-19T03:18:54Z"
"","5296","AspectWerkz Proxy Support [SPR-567]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-567](https://jira.spring.io/browse/SPR-567?redirect=false)** and commented  Add a new implementation of AopProxyFactory that uses AspectWerkz 2.0 Proxy class behind the scenes.   ---  **Affects:** 1.2 RC1","closed","type: enhancement,","spring-projects-issues","2004-12-17T02:14:55Z","2006-03-13T09:10:13Z"
"","5267","Modify Cglib2AopProxy to use ProxyRefDispatcher. [SPR-538]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-538](https://jira.spring.io/browse/SPR-538?redirect=false)** and commented  In certain cases, the Cglib2AopProxy falls back on using a Callback rather than a Dispatcher if the method being proxied can possibly return  this. Using a ProxyRefDispatcher this case can be handled better for unadvised methods, increasing the performance.    ---  **Affects:** 1.2 RC1","closed","type: enhancement,","spring-projects-issues","2004-12-09T20:00:37Z","2012-06-19T03:18:56Z"
"","5258","CGLIB proxy creation fails if unadvised target calls method during constructor. [SPR-529]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-529](https://jira.spring.io/browse/SPR-529?redirect=false)** and commented  When creating a proxy using CGLIB, creation will fail if creating a proxy of a class that calls methods during the constructor AND no advice chain is specified. This behavior does not manifest if the advice chain contains at least one advice.   ---  **Affects:** 1.1.3","closed","type: bug,","spring-projects-issues","2004-12-08T01:14:06Z","2004-12-08T01:19:43Z"
"","5228","Investigate HTTP Invoker Performance Problem [SPR-499]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-499](https://jira.spring.io/browse/SPR-499?redirect=false)** and commented  An issue has been raised on the forum regarding the performance of the HTTP Invoker remoting mechanism over relatively small amounts of invocations.  The issue can be found at: http://forum.springframework.org/viewtopic.php?p=9226#9226.  I have yet to recreate this problem and will post back when I do.  Rob   ---  **Affects:** 1.2 RC1","closed","in: core,","spring-projects-issues","2004-11-29T02:41:09Z","2019-01-11T14:13:31Z"
"","5227","Revised Metdata Model for Spring JMX [SPR-498]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-498](https://jira.spring.io/browse/SPR-498?redirect=false)** and commented  A third implementation of the ModelMBeanInfoAssembler interface is requried that allows for the management interface to be specified outside of the bean source code, such that multiple beans of different types can share the same interface and that beans of the same type can have different interfaces.  My initial thoughts on this are an XML-based descriptor but the semantics are up for discussion.   ---  **Affects:** 1.2 RC1  2 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2004-11-29T02:19:12Z","2008-10-22T01:45:47Z"
"","5191","JSR-175 Annotations Support for Spring JMX [SPR-462]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-462](https://jira.spring.io/browse/SPR-462?redirect=false)** and commented   ---  **Affects:** 1.2 RC1","closed","type: enhancement,","spring-projects-issues","2004-11-15T01:07:26Z","2004-12-02T21:15:38Z"
"","5190","JMX proxy does not work with located MBeanServer [SPR-461]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-461](https://jira.spring.io/browse/SPR-461?redirect=false)** and commented  JMX proxies require that the MBeanServer is passed in as a depdendency. When using JmxProxyFactoryBean there is no attempt to locate the current running MBeanServer if one is not set - as such it will not function correctly when running in environments such as JBoss.   ---  **Affects:** 1.2 RC1","closed","type: bug,","spring-projects-issues","2004-11-15T01:06:11Z","2004-11-16T01:28:33Z"
"","9097","Comprehensive REST Support [SPR-4419]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-4419](https://jira.spring.io/browse/SPR-4419?redirect=false)** and commented  ---  **Sub-tasks:** - #9925 URI Templates in `@RequestMapping` - #9926 Shallow ETag support - #9934 RestTemplate - #9940 Support for PUT and DELETE in spring:form tag - #10082 Support for PUTting and POSTing non-form data - #10125 Content negotiation - #10171 Support for matrix parameters  **Issue Links:** - #10156 Update Petclinic sample to showcase REST support - #9733 `@RequestMapping`: convention-based URL mapping at controller class level - #9602 Return 405 instead of 404 when HTTP method is not supported  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a1545e3f066feb51a1e3aa39498dff5c890d0487  38 votes, 51 watchers","closed","has: votes-jira,","spring-projects-issues","2005-05-23T01:56:06Z","2019-01-13T08:05:36Z"
"","5087","Error When Proxying PersistenceBrokerDaoSupport [SPR-357]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-357](https://jira.spring.io/browse/SPR-357?redirect=false)** and commented  When trying to proxy a subclass of PersistenceManagerDaoSupport the following error is generated when using CGLIB proxies:  net.sf.cglib.core.CodeGenerationException: java.lang.IllegalArgumentException-->Protected method: createPersistenceBrokerTemplate()Lorg/springframework/orm/ojb/PersistenceBrokerTemplate; at net.sf.cglib.core.ReflectUtils.newInstance(ReflectUtils.java:235) at net.sf.cglib.core.ReflectUtils.newInstance(ReflectUtils.java:220) at net.sf.cglib.core.ReflectUtils.newInstance(ReflectUtils.java:216) at net.sf.cglib.proxy.Enhancer.createUsingReflection(Enhancer.java:566) at net.sf.cglib.proxy.Enhancer.firstInstance(Enhancer.java:493) at net.sf.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:220) at net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:368) at net.sf.cglib.proxy.Enhancer.create(Enhancer.java:280) at org.springframework.aop.framework.Cglib2AopProxy.getProxy(Cglib2AopProxy.java:171) at org.springframework.aop.framework.Cglib2AopProxy.getProxy(Cglib2AopProxy.java:136) at org.springframework.aop.framework.ProxyFactory.getProxy(ProxyFactory.java:66) at com.apress.prospring.ch14.timer.Foo.main(Foo.java:25) Caused by: java.lang.IllegalArgumentException: Protected method: createPersistenceBrokerTemplate()Lorg/springframework/orm/ojb/PersistenceBrokerTemplate; at net.sf.cglib.proxy.MethodProxy$1.invoke(MethodProxy.java:55) at org.springframework.aop.framework.Cglib2AopProxy$MethodInvocationImpl.invokeJoinpoint(Cglib2AopProxy.java:884) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:116) at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:53) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:138) at org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor.intercept(Cglib2AopProxy.java:596) at com.apress.prospring.ch14.timer.Foo$$EnhancerByCGLIB$$de5c7548.createPersistenceBrokerTemplate(\) at org.springframework.orm.ojb.support.PersistenceBrokerDaoSupport.\(PersistenceBrokerDaoSupport.java:63) at com.apress.prospring.ch14.timer.Foo.\(Foo.java:15) at com.apress.prospring.ch14.timer.Foo$$EnhancerByCGLIB$$de5c7548.\(\) at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39) at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27) at java.lang.reflect.Constructor.newInstance(Constructor.java:274) at net.sf.cglib.core.ReflectUtils.newInstance(ReflectUtils.java:228)  This is due to a call to a protected method during object construction generating an exception in the underlying CGLIB library.   ---  **Affects:** 1.1 final","closed","in: core,","spring-projects-issues","2004-09-28T00:32:33Z","2012-06-19T03:54:15Z"
"","5853","CustomizableTraceInterceptor doesn't handle $ correctly in log output [SPR-1151]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-1151](https://jira.spring.io/browse/SPR-1151?redirect=false)** and commented  See forum post: http://forum.springframework.org/viewtopic.php?t=7226&highlight=   ---  **Affects:** 1.2.2","closed","in: core,","spring-projects-issues","2005-07-18T23:23:22Z","2012-06-19T03:54:13Z"
"","5834","Add 'environment' property to MBeanServerConnectionFactoryBean [SPR-1130]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-1130](https://jira.spring.io/browse/SPR-1130?redirect=false)** and commented   ---  **Affects:** 1.2.2","closed","type: enhancement,","spring-projects-issues","2005-07-13T05:39:46Z","2012-06-19T03:53:55Z"
"","5830","Allow MBeanServerFactoryBean to detect an already running MBeanServer [SPR-1126]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-1126](https://jira.spring.io/browse/SPR-1126?redirect=false)** and commented  Currently, MBeanServerFactoryBean will always create a new MBeanServer even if there is already one running in the VM. When deploying an application to many containers this is not desirable as some containers will provide an already running MBeanServer and some won't, meaning you have to maintain different configurations for the different containers.  Add a flag, useExistingServerIfPossible (default false), which when true will cause the MBeanServerFactoryBean to look for a running server first, before attempting to create one - only creating an MBeanServer if one cannot be found.   ---  **Affects:** 1.2.2","closed","type: enhancement,","spring-projects-issues","2005-07-12T20:27:27Z","2012-06-19T03:54:24Z"
"","5825","Add new configuration properties to CommonsPoolTargetSource [SPR-1121]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-1121](https://jira.spring.io/browse/SPR-1121?redirect=false)** and commented  Extend CommonsPoolTargetSource to reflect the coonfiguration parameters available on GenericObjectPool   ---  **Affects:** 1.2.2","closed","type: enhancement,","spring-projects-issues","2005-07-11T00:23:05Z","2012-06-19T03:54:06Z"
"","5823","Add a JmxTemplate [SPR-1119]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-1119](https://jira.spring.io/browse/SPR-1119?redirect=false)** and commented   ---  **Affects:** 1.2.2","closed","type: enhancement,","spring-projects-issues","2005-07-09T23:41:40Z","2012-06-19T03:18:56Z"
"","5764","Improved AOP Proxy [SPR-1057]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-1057](https://jira.spring.io/browse/SPR-1057?redirect=false)** and commented   --- No further details from [SPR-1057](https://jira.spring.io/browse/SPR-1057?redirect=false)","closed","in: core,","spring-projects-issues","2005-06-18T04:56:19Z","2019-01-11T18:37:02Z"
"","5831","Logged exceptions in AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod are confusing [SPR-1127]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-1127](https://jira.spring.io/browse/SPR-1127?redirect=false)** and commented  The AbstractAutowireCapableBeanFactory.createArgumentArray method is used for both factory method argument AND contructor argument resolution.  However, the UnsatisfiedDependencyException thrown in this method assumes that constructor arguments are being resolved. This is confusing when this exception is then caught in the try/catch block of the calling AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod method, which 'swallows' the UnsatisfiedDependencyException, but logs it first... the attendant log message contains references to constructor arguments when no constructor arguments are involved, which is confusing.  The following forum posting may be of interest...  http://forum.springframework.org/viewtopic.php?t=7042  Solutions? Change line ~482 of the AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod method to (remove second argument to Log.Debug method)... logger.debug(""Ignoring factory method ["" + factoryMethod + ""] of bean '"" + beanName +	""': could not satisfy dependencies."");  Alternatively, one could refactor the AbstractAutowireCapableBeanFactory.createArgumentArray method to have a better, context sensitive exception message.   ---  **Affects:** 1.2.3","closed","type: enhancement,","spring-projects-issues","2005-07-12T22:46:52Z","2005-07-19T00:08:14Z"
"","5800","Typo in DefaultListableBeanFactoryTests.testAutowireBeanByTypeWithNoDependencyCheck() [SPR-1096]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-1096](https://jira.spring.io/browse/SPR-1096?redirect=false)** and commented  The testAutowireBeanByTypeWithNoDependencyCheck method (line ~535) of the DefaultListableBeanFactoryTests unit test class uses AUTOWIRE_BY_NAME and not AUTOWIRE_BY_TYPE.  I believe this is a typo. Changing the constant reference to AUTOWIRE_BY_TYPE did not affect the outcome of the test.  TO wit, change...  public void testAutowireBeanByTypeWithNoDependencyCheck() { DefaultListableBeanFactory lbf = new DefaultListableBeanFactory(); DependenciesBean bean = (DependenciesBean) lbf.autowire(DependenciesBean.class, AutowireCapableBeanFactory.AUTOWIRE_BY_NAME, false); assertNull(bean.getSpouse()); }  ... to this...  public void testAutowireBeanByTypeWithNoDependencyCheck() { DefaultListableBeanFactory lbf = new DefaultListableBeanFactory(); DependenciesBean bean = (DependenciesBean) lbf.autowire(DependenciesBean.class, AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE, false); assertNull(bean.getSpouse()); }    ---  **Affects:** 1.2.1","closed","in: core,","spring-projects-issues","2005-07-01T21:51:21Z","2005-07-03T15:43:23Z"
"","5777","CommonsLogFactoryBean  [SPR-1070]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-1070](https://jira.spring.io/browse/SPR-1070?redirect=false)** and commented  It is possible to return a null Logger from a CommonsLogFactoryBean instance if you use the following XML configuration...  \  In the above snippet, the 'logName' property has NOT been set. The CommonsLogFactoryBean does not however implement the InitializingBean interface, and the value that it returns from it's getObject() implementation is only ever set after a call to the setLogName property... since a value is never being passed to the setLogName property, the Logger is never created.  The fix... have CommonsLogFactoryBean implement the InitializingBean interface and check for the setting of the required 'logName' property in this method. The Logger can be created here too, in preference to it being created in the setLogName property.  The following forum issue may be of interest...  http://forum.springframework.org/viewtopic.php?t=6546   ---  **Affects:** 1.2.1","closed","in: core,","spring-projects-issues","2005-06-23T00:10:46Z","2005-06-24T02:00:16Z"
"","5837","lazy JMX connection [SPR-1134]","**[Ricardo Trindade](https://jira.spring.io/secure/ViewProfile.jspa?name=rjst)** opened **[SPR-1134](https://jira.spring.io/browse/SPR-1134?redirect=false)** and commented  I'm using MBeanServerConnectionFactoryBean and MBeanProxyFactoryBean to access JMX MBeans from the client (like documented on chapter 20 of the manual)  My problem is that if the server isn't running, it fails with an exception. Is there any way to keep the configuration this way, but generate exceptions in runtime (when I want to call the proxy)  I had this same problem with the RMI exporter, but it had a lazy argument, I don't see one for the JMX setup.   ---  **Affects:** 1.2.1","closed","in: core,","spring-projects-issues","2005-07-13T19:28:38Z","2012-06-19T03:54:39Z"
"","5060","Cannot use SingleConnectionDataSource in ant task due to classloader problem [SPR-330]","**[Rhett Sutphin](https://jira.spring.io/secure/ViewProfile.jspa?name=rsutphin)** opened **[SPR-330](https://jira.spring.io/browse/SPR-330?redirect=false)** and commented  In version 1.1 of spring, it is not possible to use SingleConnectionDataSource in an ant task due to a classloader issue.  On construction of the SingleConnectionDataSource an IllegalArgumentException is thrown.  Example:  java.lang.IllegalArgumentException: interface org.springframework.jdbc.datasource.ConnectionProxy is not visible from class loader at java.lang.reflect.Proxy.getProxyClass(Proxy.java:331) at java.lang.reflect.Proxy.newProxyInstance(Proxy.java:552) at org.springframework.jdbc.datasource.SingleConnectionDataSource.getCloseSuppressingConnectionProxy(SingleConnectionDataSource.java:190) at org.springframework.jdbc.datasource.SingleConnectionDataSource.init(SingleConnectionDataSource.java:134) at org.springframework.jdbc.datasource.SingleConnectionDataSource.\(SingleConnectionDataSource.java:93) at ScdsProblem.\(ScdsProblem.java:17) at ScdsProblemTask.execute(ScdsProblemTask.java:10) at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:269) at org.apache.tools.ant.Task.perform(Task.java:364) at org.apache.tools.ant.Target.execute(Target.java:301) at org.apache.tools.ant.Target.performTasks(Target.java:328) at org.apache.tools.ant.Project.executeTarget(Project.java:1215) at org.apache.tools.ant.Project.executeTargets(Project.java:1063) at org.apache.tools.ant.Main.runBuild(Main.java:632) at org.apache.tools.ant.Main.startAnt(Main.java:183) at org.apache.tools.ant.launch.Launcher.run(Launcher.java:197) at org.apache.tools.ant.launch.Launcher.main(Launcher.java:56)  This does not occur in spring 1.0.2.  I will attach the code for the (simple, example) ant task from which this stacktrace is derived.   ---  **Affects:** 1.1 final  **Attachments:** - [scds-problem.tar.gz](https://jira.spring.io/secure/attachment/10214/scds-problem.tar.gz) (_1.38 kB_)","closed","type: bug,","spring-projects-issues","2004-09-12T05:48:28Z","2004-09-15T08:50:47Z"
"","5566","RemoteExporter.checkServiceInterface needs a more useful exception msg [SPR-840]","**[Rex Hoffman](https://jira.spring.io/secure/ViewProfile.jspa?name=madnessx)** opened **[SPR-840](https://jira.spring.io/browse/SPR-840?redirect=false)** and commented  currently if the service and serviceInterface are not assignment compatible only thsir Spring bean names are given.  I suggest adding the classes of each to the exceptions message.  this would be sufficient.  /** * Check whether a service reference has been set, * and whether it matches the specified service. * `@see` #setServiceInterface * `@see` #setService   */   protected void checkServiceInterface() throws IllegalArgumentException {   if (this.serviceInterface == null) {   throw new IllegalArgumentException(""serviceInterface is required"");   }   if (!this.serviceInterface.isInstance(this.service)) {   throw new IllegalArgumentException(   ""serviceInterface ["" + this.serviceInterface.getName() +   ""] needs to be implemented by service ["" + this.service + ""] ""+   ""Service Interface = ""+this.serviceInterface.getName()+"" ""+   ""Service = ""+this.service.getClass().getName());   }   }  On my first remote, that I got working to day.  I spent an hour ot two tracking down that I used a \ tag that set the service up as a string rather than the bean that the name indicated.  It was easy to see once I modified the RemoteExport.checkServiceInterface().    ---  **Affects:** 1.2 RC1","closed","type: enhancement,","spring-projects-issues","2005-03-31T01:42:31Z","2005-03-31T02:35:06Z"
"","5093","patch to allow VelocityView to use custom implementations of Velocity contexts [SPR-363]","**[Renaud Bruyeron](https://jira.spring.io/secure/ViewProfile.jspa?name=bruyeron)** opened **[SPR-363](https://jira.spring.io/browse/SPR-363?redirect=false)** and commented  It is not possible at the moment to use another implementation of org.apache.velocity.context.Context - the default (org.apache.velocity.VelocityContext) is hardcoded in VelocityView.  The following patch corrects this by allowing one to specify a factory for the contexts. The default behaviour is the current (1.1.1) behaviour, therefore compatibility should be preserved.  The patch adds the interface for the Context factory, as well as the default implementation. The modifications in VelocityViewResolver and VelocityView are trivial.   ---  **Affects:** 1.1.1  **Attachments:** - [patch.txt](https://jira.spring.io/secure/attachment/10260/patch.txt) (_6.05 kB_)","closed","type: enhancement,","spring-projects-issues","2004-10-01T03:12:52Z","2004-10-02T02:39:32Z"
"","4912","documentation bug for AOP RegexpMethodPointcutAdvisor [SPR-180]","**[Rebecca Berrigan](https://jira.spring.io/secure/ViewProfile.jspa?name=rebeccab)** opened **[SPR-180](https://jira.spring.io/browse/SPR-180?redirect=false)** and commented  I think there might be a bug in the documentation for Spring AOP, I have just implemented a RegexpMethodPointcutAdvisor and followed the example in section 5.2.3.1.1 (around line 400 in aop.xml for doc src)  The documentation advocates the use (in beans.xml) of a property named ""interceptor"" to instantiate the 'advisor bean' and register it with the RegexpMethodPointcutAdvisor. I kept getting the following error :  Property 'interceptor' is not writable in bean class [org.springframework.aop.support.RegexpMethodPointcutAdvisor]  When I checked the RegexpMethodPointcutAdvisor src and changed the property name to ""advice"" in beans.xml it was happy.  This is a very minor bug but also a very minor fix :-)  sorry if I have gone about the workaround the wrong way, and thankyou for Spring   --- No further details from [SPR-180](https://jira.spring.io/browse/SPR-180?redirect=false)","closed","type: bug,","spring-projects-issues","2004-06-22T12:24:38Z","2004-06-22T19:07:08Z"
"","5157","demote specific SqlErrorCodesFactory logging to debug level [SPR-427]","**[Ravi Brewster](https://jira.spring.io/secure/ViewProfile.jspa?name=rbrewster)** opened **[SPR-427](https://jira.spring.io/browse/SPR-427?redirect=false)** and commented  While I'm aware of the convention to log at ""info"" level at startup and ""debug"" @ runtime, I feel the following logging is excessive:  SQLErrorCodesFactory.getErrorCodes(197) | Looking up default SQLErrorCodes for DataSource  SQLErrorCodesFactory.getErrorCodes(202) | Database product name found in cache for DataSource [org.apache.commons.dbcp.BasicDataSource@ba17 5f]. Name is 'MySQL'.  These same messages are repeated for each of my Dao's (in my case, thats over a hundred)  Is there a chance these can be demoted to debug since they don't really provide any additional info?  http://forum.springframework.org/viewtopic.php?t=1569  -Ravi  ---  **Affects:** 1.1.1  **Issue Links:** - #5119 SQLErrorCodesFactory logger.info() spamming (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2004-10-25T11:46:33Z","2019-01-11T14:16:19Z"
"","5829","SellItem example not working in Preview 3 [SPR-1125]","**[Ramiya Iyer](https://jira.spring.io/secure/ViewProfile.jspa?name=ramiya)** opened **[SPR-1125](https://jira.spring.io/browse/SPR-1125?redirect=false)** and commented  Exception while executing the sellitem sample code  org.springframework.beans.NotReadablePropertyException: Invalid property 'flowScope.sale' of bean class [org.springframework.web.flow.execution.impl.StateContextImpl]: Bean property 'flowScope.sale' is not readable or has an invalid getter method: Does the return type of the getter match the parameter type of the setter? at org.springframework.beans.BeanWrapperImpl.getPropertyValue(BeanWrapperImpl.java:652) at org.springframework.beans.BeanWrapperImpl.getNestedBeanWrapper(BeanWrapperImpl.java:553) at org.springframework.beans.BeanWrapperImpl.getBeanWrapperForPropertyPath(BeanWrapperImpl.java:531) at org.springframework.beans.BeanWrapperImpl.getBeanWrapperForPropertyPath(BeanWrapperImpl.java:532) at org.springframework.beans.BeanWrapperImpl.getPropertyValue(BeanWrapperImpl.java:642) at org.springframework.binding.expression.support.BeanWrapperEvaluator.evaluate(BeanWrapperEvaluator.java:25) at org.springframework.web.flow.config.TextToTransitionCriteria$ExpressionTransitionCriteria.test(TextToTransitionCriteria.java:133) at org.springframework.web.flow.Transition.matches(Transition.java:228) at org.springframework.web.flow.TransitionableState.getTransition(TransitionableState.java:166) at org.springframework.web.flow.TransitionableState.getRequiredTransition(TransitionableState.java:179) at org.springframework.web.flow.DecisionState.doEnter(DecisionState.java:110) at org.springframework.web.flow.State.enter(State.java:164) at org.springframework.web.flow.Transition.execute(Transition.java:269) at org.springframework.web.flow.TransitionableState.onEvent(TransitionableState.java:202) at org.springframework.web.flow.execution.impl.FlowExecutionImpl.signalEvent(FlowExecutionImpl.java:317) at org.springframework.web.flow.execution.FlowExecutionManager.onEvent(FlowExecutionManager.java:289) at org.springframework.web.flow.execution.FlowExecutionManager.onEvent(FlowExecutionManager.java:245) at org.springframework.web.flow.execution.servlet.ServletFlowExecutionManager.handle(ServletFlowExecutionManager.java:77) at org.springframework.web.flow.mvc.FlowController.handleRequestInternal(FlowController.java:137)  Problem is with the syntax in sellItem-flow.xml - Line 29  It is: \  Instead of: \    ---  **Affects:** 1.2.2","closed","in: web,","spring-projects-issues","2005-07-12T07:41:17Z","2019-01-11T19:34:38Z"
"","5304","Delegating Interceptor/ProxyFactoryBean [SPR-575]","**[Ram Chidambaram](https://jira.spring.io/secure/ViewProfile.jspa?name=ram_2000)** opened **[SPR-575](https://jira.spring.io/browse/SPR-575?redirect=false)** and commented  I have a case where a business interface needs multiple implementation classes based on the invoked method. For example, i want to call EJBs for some methods, call POJO methods for a few and send an XML message via JMS for the rest.  I couldn't find a proxy/interceptor that can do this out-of-box.  I have built a DelegatingInterceptor and DelegatingProxyFactoryBean to this (will attach the code).  I'm wondering if this code can become part of the Spring Core.   ---  **Attachments:** - [DelegatingInterceptor.java](https://jira.spring.io/secure/attachment/10394/DelegatingInterceptor.java) (_3.28 kB_) - [DelegatingInterceptor.zip](https://jira.spring.io/secure/attachment/10392/DelegatingInterceptor.zip) (_3.10 kB_) - [DelegatingProxy.jar](https://jira.spring.io/secure/attachment/10393/DelegatingProxy.jar) (_3.55 kB_) - [DelegatingProxyFactoryBean.java](https://jira.spring.io/secure/attachment/10395/DelegatingProxyFactoryBean.java) (_1.23 kB_) - [springconfig.xml](https://jira.spring.io/secure/attachment/10396/springconfig.xml) (_1.13 kB_)","closed","type: enhancement,","spring-projects-issues","2004-12-20T05:36:05Z","2012-06-19T09:37:38Z"
"","5007","ThreadLocalTargetSource not threadsafe [SPR-276]","**[Ram Chidambaram](https://jira.spring.io/secure/ViewProfile.jspa?name=ram_2000)** opened **[SPR-276](https://jira.spring.io/browse/SPR-276?redirect=false)** and commented  The ""targetSet"" member variable in ThreadLocalTargetSource should be using a synchronized set instead of the regular HashSet.  Mutiple threads can call the getTarget() method (..which modifies the targetSet) at the same time.  Change the following :  private Set targetSet = new HashSet();  to :  private Set targetSet = Collections.synchronizedSet(new HashSet());   --- No further details from [SPR-276](https://jira.spring.io/browse/SPR-276?redirect=false)","closed","in: core,","spring-projects-issues","2004-08-21T07:46:52Z","2004-08-23T22:06:46Z"
"","5006","""apartment"" in the logger.info call in ThreadLocalTargetSource.getTarget() [SPR-275]","**[Ram Chidambaram](https://jira.spring.io/secure/ViewProfile.jspa?name=ram_2000)** opened **[SPR-275](https://jira.spring.io/browse/SPR-275?redirect=false)** and commented  The log message has ""apartment"".  (left over from JUnit Test case )  logger.info(""No target for apartment prototype '"" + getTargetBeanName() + ""' found in thread: creating one and binding it to thread '"" + Thread.currentThread().getName() + ""'"");   --- No further details from [SPR-275](https://jira.spring.io/browse/SPR-275?redirect=false)","closed","in: core,","spring-projects-issues","2004-08-21T07:16:43Z","2004-08-24T23:25:06Z"
"","5728","Log-category misplaced [SPR-1019]","**[R.F. Scholte](https://jira.spring.io/secure/ViewProfile.jspa?name=rfscholte)** opened **[SPR-1019](https://jira.spring.io/browse/SPR-1019?redirect=false)** and commented  Class org.springframework.test.AbstractSpringContextTests  The line protected final Log logger = LogFactory.getLog(getClass());  gives a wrong reference, when used in a subclass. I suggest this becomes  private final Log logger = LogFactory.getLog(AbstractSpringContextTests.class)   ---  **Affects:** 1.2 RC2, 1.2.1","closed","type: enhancement,","spring-projects-issues","2005-06-06T00:23:50Z","2005-09-09T00:18:17Z"
"","5008","new method JavaMailSender.createMessage(InputStream is) for easier templating [SPR-277]","**[Piotr Maj](https://jira.spring.io/secure/ViewProfile.jspa?name=ant)** opened **[SPR-277](https://jira.spring.io/browse/SPR-277?redirect=false)** and commented  I'm about to write e-mail templating code for my project using javamail + velocity. The easiest approach I could think of is to use full message templates which would hold message's headers and body in one single file per message. I could read this file, VelocityEngine would fill missing values and the plain text message with headers would be ready to send.  I'd like to make use of javamail's MimeMessage(Session, InputStream) contructor but the current JavaMailSender implementation doesn't support this. The only createMessage() method forces me either to write my own extention for JavaMailSenderImpl or to deal with the MimeMessage on my own (Neither the first nor the second solution make me happy). Addition of createMessage(InputStream is) method wouldn't break existing API and could be very useful for similar cases.  If you think it makes sens I can send a proper patch.  ---  ant  ---  **Affects:** 1.1 RC2  **Attachments:** - [JavamailSender.patch](https://jira.spring.io/secure/attachment/10169/JavamailSender.patch) (_2.67 kB_)","closed","type: enhancement,","spring-projects-issues","2004-08-22T00:36:54Z","2019-01-13T22:54:17Z"
"","5670","Url property is required for defaultParentView [SPR-956]","**[Pieter Coucke](https://jira.spring.io/secure/ViewProfile.jspa?name=pietercoucke)** opened **[SPR-956](https://jira.spring.io/browse/SPR-956?redirect=false)** and commented  The AbstractUrlBasedView class used afterPropertiesSet() until version 1.2-rc2.  In version 1.2, this is changed to initApplicationContext().  Because of this, defaultParentView in org.springframework.web.servlet.view.ResourceBundleViewResolver gives an error when the url property is not specified for the default view.  This was not the case in previous versions.  I added now something like  default.url=blablabla  in views.properties to fix this.  We don't have an url for the default parent view since we only use this to set the class and the requestContextAttribute.  Was this the intention of the change in the AbstractUrlBasedView class?   ---  **Affects:** 1.2 final","closed","type: enhancement,","spring-projects-issues","2005-05-16T21:05:23Z","2005-05-18T19:55:04Z"
"","5486","BeanUtils.copyProperties doesn't respect ignoreProperties [SPR-758]","**[Pieter Coucke](https://jira.spring.io/secure/ViewProfile.jspa?name=pietercoucke)** opened **[SPR-758](https://jira.spring.io/browse/SPR-758?redirect=false)** and commented  BeanUtils.copyProperties() throws an InvalidPropertyException when a property from the source does not exist in the target, even when this property is inside the ignoreProperties array.  When the code is changed so the ignoreProperties array is checked before the propertyDescriptor for the target is fetched, this does not occur.  PropertyDescriptor sourceDesc = sourceBw.getPropertyDescriptors()[i]; String name = sourceDesc.getName(); if (ignoreProperties != null && !ignoreList.contains(name)) { PropertyDescriptor targetDesc = targetBw.getPropertyDescriptor(name); if (targetDesc.getWriteMethod() != null && targetDesc.getReadMethod() != null) { values.addPropertyValue(new PropertyValue(name,     sourceBw.getPropertyValue(name))); } } }   ---  **Attachments:** - [BeanUtilsTest.java](https://jira.spring.io/secure/attachment/10560/BeanUtilsTest.java) (_2.81 kB_)","closed","in: core,","spring-projects-issues","2005-03-01T19:11:51Z","2005-03-25T03:35:13Z"
"","5319","JasperReportsPdfView doesn't set content size for IE [SPR-591]","**[Pieter Coucke](https://jira.spring.io/secure/ViewProfile.jspa?name=pietercoucke)** opened **[SPR-591](https://jira.spring.io/browse/SPR-591?redirect=false)** and commented  AbstractPdfView mentions the following in renderMergedOutputModel(), but I can't find this ""hack"" anywhere for JasperReportsPdfView.  // The following simple method doesn't work in IE, which // needs to know the content length.  // PdfWriter writer = PdfWriter.getInstance(document, response.getOutputStream()); // document.open(); // buildPdfDocument(model, document, writer, request, response); // document.close();  // See http://www.lowagie.com/iText/faq.html#msie // for an explanation of why we can't use the obvious form above.  Basically it means that response.setContentLength(baos.size()); should be called.  I tried to download a PDF generated with JasperReports and got a page with some binary data, instead of the PDF.  Probably this is related with this issue?  Since I need to do a release tomorrow, I changed to the AbstractPdfView for now, but I will certainly try/learn Jasper in the near future.  Maybe then I can provide a testcase for this.   ---  **Affects:** 1.1.3","closed","type: bug,","spring-projects-issues","2004-12-28T21:04:13Z","2004-12-29T07:21:21Z"
"","5255","Add Assert.propertyNotNull [SPR-526]","**[Pieter Coucke](https://jira.spring.io/secure/ViewProfile.jspa?name=pietercoucke)** opened **[SPR-526](https://jira.spring.io/browse/SPR-526?redirect=false)** and commented  Add two methods to the Assert class that assert that a property is not null (propertyNotNull(Object bean,String property)) and that all properties of an object are not null (propertiesNotNull(Object bean)).  If find these very helpful to use in InitializingBean.afterPropertiesSet() to make sure that all required properties are set, and still get a good error message.   ---  **Attachments:** - [Assert-patch.txt](https://jira.spring.io/secure/attachment/10354/Assert-patch.txt) (_2.08 kB_) - [AssertTest-patch.txt](https://jira.spring.io/secure/attachment/10355/AssertTest-patch.txt) (_2.20 kB_) - [AssertTest-patch2.txt](https://jira.spring.io/secure/attachment/10357/AssertTest-patch2.txt) (_2.47 kB_)","closed","type: enhancement,","spring-projects-issues","2004-12-07T00:14:42Z","2012-06-19T09:37:25Z"
"","5679","MethodInvokingFactoryBean does not support autowiring [SPR-965]","**[Pierre Fouché](https://jira.spring.io/secure/ViewProfile.jspa?name=pierre.fouche@hp.com)** opened **[SPR-965](https://jira.spring.io/browse/SPR-965?redirect=false)** and commented  Consider the following example, where System.err is redefined using MethodInvokingFactoryBean.  \ \ \ \c:/err1.txt\ \ \                            java.lang.System.setErr                                                                                                                   \  Create an Application context and write in System.err:  ApplicationContext bf = new ClassPathXmlApplicationContext(myConfFile); System.err.println(""Hello"");  It works just fine.  Now consider this second example, where the PrintStream is autowired:  \ \ \ \c:/err2.txt\ \ \                            java.lang.System.setErr                                               \  Spring throws a NullPointerException:  at org.springframework.beans.factory.config.MethodInvokingFactoryBean.getObjectType(MethodInvokingFactoryBean.java:126) at org.springframework.beans.factory.support.AbstractBeanFactory.getType(AbstractBeanFactory.java:348)  Looks like Spring, while trying to find a matching bean, calls getObjectType() in MethodInvokingFactoryBean before it is prepare()d.    ---  **Affects:** 1.1.3","closed","in: core,","spring-projects-issues","2005-05-18T23:27:23Z","2005-05-19T04:42:41Z"
"","5377","HibernateException not logged in SessionFactoryUtils.doClose() [SPR-649]","**[Pierre Fouché](https://jira.spring.io/secure/ViewProfile.jspa?name=pierre.fouche@hp.com)** opened **[SPR-649](https://jira.spring.io/browse/SPR-649?redirect=false)** and commented  HibernateExceptions thrown when closing a session are trapped, but ignored in the catch clause:  catch (HibernateException ex) { logger.error(""Could not close Hibernate session""); }  The original exception should be logged as well:      logger.error(""Could not close Hibernate session"", ex);    ---  **Affects:** 1.1.3","closed","type: enhancement,","spring-projects-issues","2005-01-24T06:24:20Z","2005-01-24T06:35:13Z"
"","5690","Configurer that resolves placeholders as environment entries [SPR-978]","**[Pierre Bittner](https://jira.spring.io/secure/ViewProfile.jspa?name=pierreb)** opened **[SPR-978](https://jira.spring.io/browse/SPR-978?redirect=false)*** and commented  We need a configurer that resolves placeholder as application's environment entries.  Our application is deployed on different environments (development, integration, production) and even in production we have the same application deployed many times.  We must build different web archives just to change few properties (mail server, reporting server, etc.).  In a J2EE application, such properties should be configured in application's environment entries (JNDI).  I'll attached a proposal for an EnvironmentEntryPropertyPlaceholderConfigurer.  See this thread for more infos: http://forum.springframework.org/viewtopic.php?t=5196  ---  **Attachments:** - [EnvironmentEntryPropertyPlaceholderConfigurer.java](https://jira.spring.io/secure/attachment/10742/EnvironmentEntryPropertyPlaceholderConfigurer.java) (_5.72 kB_) - [EnvironmentEntryPropertyPlaceholderConfigurerTests.java](https://jira.spring.io/secure/attachment/10743/EnvironmentEntryPropertyPlaceholderConfigurerTests.java) (_4.22 kB_)  **Issue Links:** - #7716 JNDI Property Placeholder Configurer (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2005-05-24T02:00:51Z","2019-01-11T22:06:10Z"
"","5855","Regression in FormAction.loadFormObject [SPR-1153]","**[phpsurf](https://jira.spring.io/secure/ViewProfile.jspa?name=phpsurf)** opened **[SPR-1153](https://jira.spring.io/browse/SPR-1153?redirect=false)** and commented  Spring WebFlow PR4 class org.springframework.webflow.action.FormAction method loadFormObject(RequestContext context)  This method changed its implementation to use the new method getFormObject(RequestContext context)  But that method calls FormObjectAccessor without passing the attribute formObjectName. So the method returns the current #formObject instead of returning the one associated to the Action.  Current method : protected Object getFormObject(RequestContext context) { return new FormObjectAccessor(context).getFormObject(); }  Proposed patch : protected Object getFormObject(RequestContext context) { return new FormObjectAccessor(context).getFormObject(this.getFormObjectName(), this.getFormObjectScope()); }    ---  **Affects:** 1.2.3","closed","in: web,","spring-projects-issues","2005-07-19T02:19:18Z","2019-01-11T19:33:34Z"
"","5273","Quartz not properly shutting down in tomcat. [SPR-544]","**[Philip Gatt](https://jira.spring.io/secure/ViewProfile.jspa?name=gattster)** opened **[SPR-544](https://jira.spring.io/browse/SPR-544?redirect=false)** and commented  I'm running quartz in a clustered environment. When shutting down tomcat, I am seeing ThreadDeath errors. It looks like these 2 threads are never shut down: - clusterManagementThread - misfireHandler  I believe I see the cause of the problem: I'm using LocalDataSourceJobStore, and the shutdown method has been overridden to do nothing. The javadoc comment is ""Do not perform the base class' DataSource shutdown here. A Spring-provided DataSource has its own lifecycle."" The problem is that this prevents this piece of code in org.quartz.impl.jdbcjobstore.JobStoreSupport:      public void shutdown() {         if (clusterManagementThread != null)                 clusterManagementThread.shutdown();              if (misfireHandler != null) misfireHandler.shutdown();  ...   ---  **Affects:** 1.1.2","closed","type: bug,","spring-projects-issues","2004-12-11T12:30:28Z","2004-12-12T05:11:41Z"
"","5637","MethodInvokeRunnable [SPR-914]","**[Peter Veentjer](https://jira.spring.io/secure/ViewProfile.jspa?name=alarmnummer)** opened **[SPR-914](https://jira.spring.io/browse/SPR-914?redirect=false)** and commented  Could the MethodInvokeRunnable be added to the Spring core? This makes it easy to register runnable`s based on method invocations with the ScheduledExecutorService. The ScheduledExecutorService is part of jdk 5.0 concurrency library, but there also is a backport available for 1.4. The ScheduledExecutorService is only one usage of this MethodInvokeRunnable.  [code] public final class MethodInvokeRunnable implements Runnable{      private final MethodInvoker _invoker;          public MethodInvokeRunnable(MethodInvoker invoker){     	if(invoker==null)     	    throw new NullPointerException(""invoker can`t be null"");     	_invoker = invoker;     }          public MethodInvoker getMethodInvoker(){     	return _invoker;     }          public void run() {     	try {     		_invoker.invoke();     	} catch (InvocationTargetException e) {     		throw new RuntimeException(e);     	} catch (IllegalAccessException e) {     		throw new RuntimeException(e);     	}     }  } [/code]   --- No further details from [SPR-914](https://jira.spring.io/browse/SPR-914?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-05-03T18:32:50Z","2012-06-19T03:54:24Z"
"","5511","Sequence of call with MethodInvokingJobDetailFactoryBean [SPR-784]","**[Peter Veentjer](https://jira.spring.io/secure/ViewProfile.jspa?name=alarmnummer)** opened **[SPR-784](https://jira.spring.io/browse/SPR-784?redirect=false)** and commented  At the moment it is possible to call a single method on a bean with the MethodInvokingJobDetailFactoryBean. I would like to see a new JobDetailFactoryBean that can do a sequence of calls. Without such a structure I must create a normal pojo just to chain the calls.  I took a look at the MethodInvokdingJobDetailFactoryBean and it wouldn`t be to hard to add such functionality.  [code] package org.springframework.scheduling.quartz;  import org.apache.commons.logging.Log; import org.apache.commons.logging.LogFactory; import org.quartz.*; import org.springframework.beans.factory.BeanNameAware; import org.springframework.beans.factory.FactoryBean; import org.springframework.beans.factory.InitializingBean; import org.springframework.util.MethodInvoker;  import java.lang.reflect.InvocationTargetException; import java.util.List;  public class MethodInvokingSequenceJobDetailFactoryBean implements FactoryBean, BeanNameAware, InitializingBean {      private String name;          private String group = Scheduler.DEFAULT_GROUP;          private boolean concurrent = true;          private String beanName;          private JobDetail jobDetail;     private List methodInvokerList;               /**      * Set the name of the job.      * Default is the bean name of this FactoryBean.      * @see org.quartz.JobDetail#setName      */     public void setName(String name) {     	this.name = name;     }          /**      * Set the group of the job.      * Default is the default group of the Scheduler.      * @see org.quartz.JobDetail#setGroup      * @see org.quartz.Scheduler#DEFAULT_GROUP      */     public void setGroup(String group) {     	this.group = group;     }          /**      * Specify whether or not multiple jobs should be run in a concurrent      * fashion. The behavior when one does not want concurrent jobs to be      * executed is realized through adding the {@link StatefulJob} interface.      * More information on stateful versus stateless jobs can be found      * here.      * The default setting is to run jobs concurrently.      * @param concurrent whether one wants to execute multiple jobs created      * by this bean concurrently      */     public void setConcurrent(boolean concurrent) {     	this.concurrent = concurrent;     }          public void setBeanName(String beanName) {     	this.beanName = beanName;     }               public void afterPropertiesSet() throws ClassNotFoundException, NoSuchMethodException {     //	prepare();          	// Use specific name if given, else fall back to bean name.     	String name = (this.name != null ? this.name : this.beanName);          	// Consider the concurrent flag to choose between stateful and stateless job.     	Class jobClass = (this.concurrent ? MethodInvokingJob.class : StatefulMethodInvokingJob.class);          	this.jobDetail = new JobDetail(name, this.group, jobClass);     	this.jobDetail.getJobDataMap().put(""methodInvokerList"", methodInvokerList);     	this.jobDetail.setVolatility(true);     }          public Object getObject() {     	return this.jobDetail;     }          public Class getObjectType() {     	return (this.jobDetail != null) ? this.jobDetail.getClass() : JobDetail.class;     }          public boolean isSingleton() {     	return true;     }          public void setMethodInvokerList(List methodInvokerList){     	if(methodInvokerList==null)     	    throw new NullPointerException(""methodInvokerList can`t be null"");     	this.methodInvokerList = methodInvokerList;     }          /**      * Quartz Job implementation that invokes a specified method.      * Automatically applied by MethodInvokingJobDetailFactoryBean.      */     public static class MethodInvokingJob extends QuartzJobBean {          	protected static final Log logger = LogFactory.getLog(MethodInvokingJob.class);          	private List methodInvokerList;          	/**     	 * Set the MethodInvoker to use.     	 */     	public void setMethodInvokerList(List  methodInvokerList) {     		this.methodInvokerList = methodInvokerList;     		     	}          	private String createErrorMsg(MethodInvoker methodInvoker){     		return ""Could not invoke method '"" + methodInvoker.getTargetMethod() +     				""' on target object ["" + methodInvoker.getTargetObject() + ""]"";     	}     	     	/**     	 * Invoke the method via the MethodInvoker.     	 */     	protected void executeInternal(JobExecutionContext context) throws JobExecutionException {     		MethodInvoker methodInvoker = null;     		try {     			for(int k=0;k","closed","type: enhancement,","spring-projects-issues","2005-03-15T04:18:20Z","2012-06-19T09:37:28Z"
"","5768","java.lang.ClassCastException in JSP [SPR-1061]","**[Peter Szanto](https://jira.spring.io/secure/ViewProfile.jspa?name=szantopeter)** opened **[SPR-1061](https://jira.spring.io/browse/SPR-1061?redirect=false)** and commented  Adding to the JSP page context, or session a variable named ""status"" breakes Spring framework and causing this error:  java.lang.ClassCastException at org.springframework.web.servlet.tags.BindTag.doStartTagInternal(BindTag.java:122)  The problem is that spring itself stores BindStatus under the name ""status"". Older versions of spring were able to cope with this, so maybe look at the old code.  Cheers  Péter   --- No further details from [SPR-1061](https://jira.spring.io/browse/SPR-1061?redirect=false)","closed","","spring-projects-issues","2005-06-19T20:48:53Z","2019-01-11T18:36:35Z"
"","5638","MethodInvoker not selecting correct overloaded methods [SPR-915]","**[Peter Smiley](https://jira.spring.io/secure/ViewProfile.jspa?name=psmiley)** opened **[SPR-915](https://jira.spring.io/browse/SPR-915?redirect=false)** and commented  Hi,  When trying to use a static method to create an object, I'm getting a NoSuchMethodException for the parameters i'm passing if the arguments are either a subtype or subclass of the required argument types.  I have updated the org.springframework.util.MethodInvoker prepare method, to accept this possibility. snippet below:      public void prepare() throws ClassNotFoundException, NoSuchMethodException {     	if (this.targetClass == null && this.targetObject == null) {     		throw new IllegalArgumentException(""Either targetClass or targetObject is required"");     	}     	if (this.targetMethod == null) {     		throw new IllegalArgumentException(""targetMethod is required"");     	}          	if (this.arguments == null) {     		this.arguments = new Object[0];     	}          	Class[] types = new Class[this.arguments.length];     	for (int i = 0; i < this.arguments.length; ++i) {     		if (this.arguments[i] != null) {     			types[i] = this.arguments[i].getClass();     		}     	}          	// try to get the exact method first     	Class targetClass = (this.targetObject != null) ? this.targetObject.getClass() : this.targetClass;     	try {		         		this.methodObject = targetClass.getMethod(this.targetMethod, types);			     	}     	catch (NoSuchMethodException ex) {     	    System.out.println(""caught the exception"");     	    // Get a list of the available methods     	    Method[] targetMethods = targetClass.getMethods();     	                 for(int i = 0; i < targetMethods.length; i++) {                 Method method = targetMethods[i];                                  if(method.getName().equalsIgnoreCase(targetMethod)) {                     Class[] methodTypes = method.getParameterTypes();                                          // Check if the inspected method has the same number of methods                     if(methodTypes.length == arguments.length) {                                                  int numberOfCorrectArguments = 0;                         for(int j = 0; j < types.length; j++) {                                                          // Verify that the supplied argument is assignable to the method argument type                             if(methodTypes[j].isAssignableFrom(arguments[j].getClass())) {                                                             numberOfCorrectArguments++;                             }                         }                         if(numberOfCorrectArguments == types.length) {                             this.methodObject = method;                             i = targetMethods.length;                         }                     }                 }             }     		// just rethrow exception if we can't get a match     		if (this.methodObject == null) {     			throw ex;     		}     	}          	if (this.targetObject == null && !Modifier.isStatic(this.methodObject.getModifiers())) {     		throw new IllegalArgumentException(""Target method must not be non-static without a target"");     	}     }    --- No further details from [SPR-915](https://jira.spring.io/browse/SPR-915?redirect=false)","closed","type: bug,","spring-projects-issues","2005-05-04T03:13:37Z","2005-05-20T05:38:29Z"
"","5370","Setting WebappRoot  prevents redeploying of the application [SPR-642]","**[Peter Reinhardt](https://jira.spring.io/secure/ViewProfile.jspa?name=szhrmp)** opened **[SPR-642](https://jira.spring.io/browse/SPR-642?redirect=false)** and commented  The Log4jConfigListener together with the WebUtils set the system property ""WebappRoot"". WebUtils has a safe guard that if the property is already defined for the same key then an exception is thrown.  Now my problem is that I cannot redeploy a new version of an application in Websphere with a different name. The old version is removed but the system property still stays around (until you shut down the server). So now I install the new version of the application (same webrootkey) and use a different name. Websphere unpacks the application under this new name and the startup will fail.  Hope this is clear. I recommend that on shutdown of Spring (Log4JConfig Servlet) the system property for the webapproot is removed.    ---  **Affects:** 1.1.3","closed","in: core,","spring-projects-issues","2005-01-19T19:04:11Z","2005-01-23T19:55:23Z"
"","5217","Log4JConfigurer should allow to initialize Log4J without FileWatchDog thread [SPR-488]","**[Peter Reinhardt](https://jira.spring.io/secure/ViewProfile.jspa?name=szhrmp)** opened **[SPR-488](https://jira.spring.io/browse/SPR-488?redirect=false)** and commented  The Log4JConfigurer uses DOMConfigurator.configureAndWatch which starts a FileWatchDog thread. this thread will never be terminated, which can will prevent a J2EE application to be restarted (i.e. in Websphere).  There should be a way to configure Log4J without using a File watch dog thread (i.e. just use DOMConfigurator.configure() ).   ---  **Affects:** 1.1.2","closed","type: enhancement,","spring-projects-issues","2004-11-24T21:11:07Z","2004-12-01T20:29:34Z"
"","5802","abstract=""true"" appears to have become mandatory for abstract beans without a class [SPR-1098]","**[Peter Haig](https://jira.spring.io/secure/ViewProfile.jspa?name=peter@mxgroup.net)** opened **[SPR-1098](https://jira.spring.io/browse/SPR-1098?redirect=false)** and commented  Installed Spring 1.2.2 and bean files fail instantiation when any abstract bean does not include the keyword abstract.  e.g. \ \ \  worked in 1.2 but fails in 1.2.2 where  \ \ \ is required   ---  **Affects:** 1.2.2","closed","in: core,","spring-projects-issues","2005-07-04T15:12:14Z","2019-01-12T16:41:06Z"
"","5743","Add new properties for UrlBasedRemoteAccessor [SPR-1035]","**[Peter Friese](https://jira.spring.io/secure/ViewProfile.jspa?name=freter)** opened **[SPR-1035](https://jira.spring.io/browse/SPR-1035?redirect=false)** and commented  The UrlBasedRemoteAccessor should support the following additional properties: - protocol - port - context  Reason: it is desireable to configure the remote URL of a service not only by providing a full URL string, but by providing the URL in little parts. Thus, it is possible to use a PropertyOverrideConfigurer to override certain parts of the service URL (which is needed to deploy a client to test / production environment without reuilding it).   --- No further details from [SPR-1035](https://jira.spring.io/browse/SPR-1035?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-06-13T01:10:26Z","2006-01-04T00:49:39Z"
"","4977","BindException.getFieldValue() fails when nested path set [SPR-246]","**[Peter den Haan](https://jira.spring.io/secure/ViewProfile.jspa?name=pdenhaan)** opened **[SPR-246](https://jira.spring.io/browse/SPR-246?redirect=false)** and commented  There is a bug in BindError.getFieldValue(String field) which causes it to operate incorrectly if (a) nestedPath is anything other than the empty string and (b) there is a field error.  The method starts with:      public Object getFieldValue(String field) {     	field = fixedField(field);     	FieldError fe = getFieldError(field);  But getFieldError() itself _also_ adds the nestedPath prefix:      public FieldError getFieldError(String field) {     	field = fixedField(field);  So when there is a nested path, field errors will be ignored (or in obscure cases, the wrong field error may be found). The simplest fix would be to swap the first two lines in getFieldValue.  I must say that this illustrates why the practice of modifying parameter values is frowned upon in some circles :)   ---  **Affects:** 1.1 RC1","closed","in: core,","spring-projects-issues","2004-08-05T20:59:34Z","2004-08-05T21:51:34Z"
"","4975","MessageTag does not support Object[] arguments [SPR-244]","**[Peter den Haan](https://jira.spring.io/secure/ViewProfile.jspa?name=pdenhaan)** opened **[SPR-244](https://jira.spring.io/browse/SPR-244?redirect=false)** and commented  See also issue #4833.  One of the use cases for providing arguments to the Spring message tag is to display an org.springframework.validation.ObjectError. The message arguments associated with an error come in an Object array. There is currently no straightforward way to convert this to the comma-delimited String that the current MessageTag expects.  As MessageSource.getMessage() uses an Object[] for the argument list, the MessageTag should really expose this. My suggested modification would be to modify MessageTag.setArguments() to take an Object, and test the argument by type to decide how to process it further: - a String would be parsed as it currently is, retaining full backwards compatibility; - an Object[] would be passed to MessageSource.getMessage() as-is; - otherwise treat the Object as a single-argument Object[].  I would be happy to submit a patch for this against the current CVS tree if desired.  ---  **Affects:** 1.1 RC1","closed","type: enhancement,","spring-projects-issues","2004-08-03T22:43:36Z","2019-01-11T13:28:55Z"
"","5653","Possibly xml parsing issue [SPR-930]","**[Peter Delahunty](https://jira.spring.io/secure/ViewProfile.jspa?name=pdelahun)** opened **[SPR-930](https://jira.spring.io/browse/SPR-930?redirect=false)** and commented  I have the flowing problem  I am trying to use the hessian service exporter. If i have this config:  \ \ \ \ \ \ sample.ConnectionTesterService \ \ \  Note the value com.ConnectionTesterService inside the \\ tags is surrounded by white space. A results of my xml formatter...  With this configuration i get the following error:  org.springframework.beans.factory.BeanCreationException: Error creating bean with name '/connectionTester' defined in resource [/WEB-INF/service-servlet.xml] of ServletContext: Error setting property values; nested exception is org.springframework.beans.PropertyAccessExceptionsException: PropertyAccessExceptionsException (1 errors); nested propertyAccessExceptions are: [org.springframework.beans.TypeMismatchException: Failed to convert property value of type [java.lang.String] to required type [java.lang.Class] for property 'serviceInterface'; nested exception is java.lang.IllegalArgumentException: Invalid class name: sample/ConnectionTesterService ] PropertyAccessExceptionsException (1 errors) org.springframework.beans.TypeMismatchException: Failed to convert property value of type [java.lang.String] to required type [java.lang.Class] for property 'serviceInterface'; nested exception is java.lang.IllegalArgumentException: Invalid class name: sample.ConnectionTesterService  java.lang.IllegalArgumentException: Invalid class name: sample/ConnectionTesterService      at org.springframework.beans.propertyeditors.ClassEditor.setAsText(ClassEditor.java:44)     at org.springframework.beans.BeanWrapperImpl.doTypeConversionIfNecessary(BeanWrapperImpl.java:837)     at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:673)     at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:588)     at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:720)     at org.springframework.beans.BeanWrapperImpl.setPropertyValues(BeanWrapperImpl.java:747)     at org.springframework.beans.BeanWrapperImpl.setPropertyValues(BeanWrapperImpl.java:736)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:840)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:662)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:270)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:205)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:136)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:236)     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:284)     at org.springframework.web.context.support.XmlWebApplicationContext.refresh(XmlWebApplicationContext.java:131)     at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:282)     at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:230)     at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:200)     at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:102)     at javax.servlet.GenericServlet.init(GenericServlet.java:211)     at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1029)     at org.apache.catalina.core.StandardWrapper.load(StandardWrapper.java:862)     at org.apache.catalina.core.StandardContext.loadOnStartup(StandardContext.java:4013)     at org.apache.catalina.core.StandardContext.start(StandardContext.java:4357)     at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:823)     at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:807)     at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:595)     at org.apache.catalina.core.StandardHostDeployer.install(StandardHostDeployer.java:277)     at org.apache.catalina.core.StandardHost.install(StandardHost.java:832)     at org.apache.catalina.startup.HostConfig.deployWARs(HostConfig.java:625)     at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:431)     at org.apache.catalina.startup.HostConfig.start(HostConfig.java:983)     at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:349)     at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)     at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1091)     at org.apache.catalina.core.StandardHost.start(StandardHost.java:789)     at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1083)     at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:478)     at org.apache.catalina.core.StandardService.start(StandardService.java:480)     at org.apache.catalina.core.StandardServer.start(StandardServer.java:2313)     at org.apache.catalina.startup.Catalina.start(Catalina.java:556)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)     at java.lang.reflect.Method.invoke(Method.java:324)     at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:287)     at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:425)  Basically it looks like this is trying to load the class using the whole string including the white space  If i have this config...  \ \ \ \ \ \sample.ConnectionTesterService\ \ \  It works fine...  I think a simple solution to solve this is to use the trim() method of string...    ---  **Affects:** 1.1.5","closed","in: core,","spring-projects-issues","2005-05-08T22:17:40Z","2005-05-08T23:56:45Z"
"","5455","setSingleton in AbstractFactoryBean [SPR-727]","**[Pavel Klinov](https://jira.spring.io/secure/ViewProfile.jspa?name=pklinov)** opened **[SPR-727](https://jira.spring.io/browse/SPR-727?redirect=false)** and commented  Hello 1. seems that setSingleton(..) is never called on AbstractFactoryBean so that my factory can produce only singletons. Is that true?  2. Having this:  \ \ \... \  I get this: Cannot find matching factory method 'getObject' on class [cern.ppt.egee.reminders.mailing.EgeeDebugMailSender]  So, it for some reasons consider the instance created in AbstractFactoryBean.createdInstance (EgeeDebugMailSender) as a factory which is wrong (factory's class is ConfigurableFactoryBean). It happens because AbstractAutowireCapableBeanFActory.instantiateUsingFactoryMethod(..) in the line 402 implicitly calls factory.getObject() trying to obtain the factory instance. But this shouldn't be so because instead it gets a cached singleton which is final product, not the factory! (or maybe i'm very stupid... i'm very-very sorry if so) Thanks    ---  **Affects:** 1.1.4","closed","in: core,","spring-projects-issues","2005-02-19T13:09:22Z","2019-01-12T16:41:39Z"
"","5656","Using SpringBind if property exists but setter is private no indication [SPR-936]","**[Paul Taylor](https://jira.spring.io/secure/ViewProfile.jspa?name=paultaylor)** opened **[SPR-936](https://jira.spring.io/browse/SPR-936?redirect=false)** and commented  I was using SpringBind with a SimpleFormController and a JSP and on submitting the form and validating I found one of values was being lost. It turned out that although the property existed in the Command Class and it had a getter and a setter the setter had been created as private and hence couldnt be accessed.  Is there anyway to report this to ais debugging.   ---  **Affects:** 1.2 final","closed","in: web,","spring-projects-issues","2005-05-11T03:17:59Z","2019-01-11T22:07:13Z"
"","5159","Inconsistent usage ""BeanDefinition"" -> ""beandefinition"" [SPR-429]","**[Paul Furbacher](https://jira.spring.io/secure/ViewProfile.jspa?name=pfurbacher)** opened **[SPR-429](https://jira.spring.io/browse/SPR-429?redirect=false)** and commented  Section 3.6, para 2, 1st - 4th bullet:  ""beandefinition"" is used inconsistently from prior uses.  Since one is referring to  org.springframework.beans.factory.config.BeanDefinition  the prior usage, BeanDefinition (section 3.2 ff.), should be maintained here and throughout.   Otherwise, it just looks like a run-on and does not give the reader a ready indication that an object in the framework is being referred to.  Example of inconsistent usage (bullet 4):  Reads: ""If the beandefinition corresponding to the given name ...""  For consistency with early usage, it probably should read:  ""If the BeanDefinition corresponding to the given name ....""    ---  **Affects:** 1.1.2","closed","type: bug,","spring-projects-issues","2004-10-25T16:14:48Z","2004-10-25T21:12:20Z"
"","5158","Spring Framework Reference 1.1.x: Punction error [SPR-428]","**[Paul Furbacher](https://jira.spring.io/secure/ViewProfile.jspa?name=pfurbacher)** opened **[SPR-428](https://jira.spring.io/browse/SPR-428?redirect=false)** and commented  Section 5.10.2, para 9 (not including bulleted sub-paragraphs in the section)  A comma should replace the period in mid-sentence, after ""shown above"", in the following:  ""... For example, the LockMixin introduction interceptor from the Spring test suite, shown above. could be used in conjunction with ...""  To find this error quickly, search the document for  ""shown above.""  (make sure to include the period ""."" in the search string)    ---  **Affects:** 1.1.2","closed","type: bug,","spring-projects-issues","2004-10-25T16:06:38Z","2004-10-25T21:07:03Z"
"","5150","Incorrect bean id in ref. man., section 5.10.2 -- ""advisor"" should be ""autoproxy""? [SPR-420]","**[Paul Furbacher](https://jira.spring.io/secure/ViewProfile.jspa?name=pfurbacher)** opened **[SPR-420](https://jira.spring.io/browse/SPR-420?redirect=false)** and commented  If I'm understanding things correctly, in section 5.10.2 of the reference manual  http://www.springframework.org/docs/reference/aop.html#aop-autoproxy-metadata  I believe the following phrase  ""The DefaultAdvisorAutoProxyCreator bean definition--called ""advisor"" in this case, but the name is not significant ...""  should read  ""The DefaultAdvisorAutoProxyCreator bean definition--called ""autoproxy"" in this case, but the name is not significant ...""  Or, in the quoted declaration, the XML should read","closed","type: bug,","spring-projects-issues","2004-10-23T16:35:12Z","2004-10-24T22:14:58Z"
"","5114","HibernateDaoSupport.load(Object,Serializable) [SPR-384]","**[Paul Barry](https://jira.spring.io/secure/ViewProfile.jspa?name=paul.barry)** opened **[SPR-384](https://jira.spring.io/browse/SPR-384?redirect=false)** and commented  HibernateDaoSupport does not have a load(Object,Serializable) method, only load(Class,Serializable).  Hibernate Session have both, so it seems like HibernateDaoSupport should have both.   --- No further details from [SPR-384](https://jira.spring.io/browse/SPR-384?redirect=false)","closed","type: bug,","spring-projects-issues","2004-10-08T02:33:07Z","2004-10-08T04:10:34Z"
"","5209","HibernateTransactionManager  and SQLExceptionTranslator [SPR-480]","**[Patrick Peralta](https://jira.spring.io/secure/ViewProfile.jspa?name=pperalta)** opened **[SPR-480](https://jira.spring.io/browse/SPR-480?redirect=false)** and commented  According to SQLErrorCodesFactory (http://www.springframework.org/docs/api/org/springframework/jdbc/support/SQLErrorCodesFactory.html), when sql-error-codes.xml is found in the classpath, the error codes defined in that file will be used to translate SQLExceptions.  However, it appears that HibernateTransactionManager has a bug that will prevent the use of this exception translator.  In the class definition, the getter method for SQLExceptionTranslator will create a SQLErrorCodeSQLExceptionTranslator if the HibernateTransactionManager is aware of a DataSource:  /** * Return the JDBC exception translator for this transaction manager. * Creates a default one for the specified SessionFactory if none set.   */   public SQLExceptionTranslator getJdbcExceptionTranslator() {   if (this.jdbcExceptionTranslator == null) {   if (getDataSource() != null) {   setJdbcExceptionTranslator(new   SQLErrorCodeSQLExceptionTranslator(getDataSource()));   }   else {   setJdbcExceptionTranslator(   SessionFactoryUtils.newJdbcExceptionTranslator(   getSessionFactory()));   }   }   return this.jdbcExceptionTranslator;   }  However, in the class definition the translator is initialized when the class is created:  private SQLExceptionTranslator jdbcExceptionTranslator = new SQLStateSQLExceptionTranslator();  Therefore, the setter never gets a chance to create a translator to use the defined error codes; instead it always falls back to SQLStateSQLExceptionTranslator.  I suspect that the fix for this bug is to simply initialize jdbcExceptionTranslator to null and let the getter method do its thing.  A workaround for now is to set jdbcExceptionTranslator to null in the xml configuration file so that it can be initialized correctly:  \  \ \ \ \\\ \   ---  **Affects:** 1.1.2","closed","type: bug,","spring-projects-issues","2004-11-23T01:19:48Z","2004-11-23T18:04:01Z"
"","5376","JtaTransactionManager should warn when no TransactionManager is available [SPR-648]","**[Patrick Burleson](https://jira.spring.io/secure/ViewProfile.jspa?name=pburleson)** opened **[SPR-648](https://jira.spring.io/browse/SPR-648?redirect=false)** and commented  I was using the JtaTransactionManager this weekend to do some tests, and found that it would be great if instead of using the ""info"" priority for notifying that transaction suspension isn't available because a TransactionManager hasn't been found, it should be elevated to ""warn"" since this might be a serious problem. This is around line number 329 in JtaTransactionManager in the method ""afterPropertiesSet"".   --- No further details from [SPR-648](https://jira.spring.io/browse/SPR-648?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-01-24T03:09:01Z","2005-03-12T21:08:21Z"
"","5046","Abstract Beans Causes Error With Velocity View [SPR-316]","**[Patrick Burleson](https://jira.spring.io/secure/ViewProfile.jspa?name=pburleson)** opened **[SPR-316](https://jira.spring.io/browse/SPR-316?redirect=false)** and commented  Using the cool new Abstract bean definition for defining common transaction attributes seems to cause a problem with the VelocityView class.  Adapting the config from the petclinic example to my app, only copying over the Transaction stuff to apply to my Hibernate Session Factory.  Before I added this, my Velocity config was working fine. Ever since adding this, I get the following error:  org.springframework.beans.factory.BeanIsAbstractException: Tried to instantiate abstract bean definition '&baseTransactionProxy' at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:177) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:136) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:177) at org.springframework.context.support.AbstractApplicationContext.getBeansOfType(AbstractApplicationContext.java:473) at org.springframework.beans.factory.BeanFactoryUtils.beansOfTypeIncludingAncestors(BeanFactoryUtils.java:108) at org.springframework.beans.factory.BeanFactoryUtils.beansOfTypeIncludingAncestors(BeanFactoryUtils.java:112) at org.springframework.beans.factory.BeanFactoryUtils.beanOfTypeIncludingAncestors(BeanFactoryUtils.java:141) at org.springframework.web.servlet.view.velocity.VelocityView.initApplicationContext(VelocityView.java:182) at org.springframework.context.support.ApplicationObjectSupport.setApplicationContext(ApplicationObjectSupport.java:79) at org.springframework.web.servlet.view.AbstractCachingViewResolver.loadAndConfigureView(AbstractCachingViewResolver.java:123) at org.springframework.web.servlet.view.AbstractCachingViewResolver.resolveViewName(AbstractCachingViewResolver.java:78) at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:629) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:535) at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:321) at javax.servlet.http.HttpServlet.service(HttpServlet.java:802) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:237) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:157) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:214) at org.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:104) at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:520) at org.apache.catalina.core.StandardContextValve.invokeInternal(StandardContextValve.java:198) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:152) at org.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:104) at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:520) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:137) at org.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:104) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:117) at org.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:102) at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:520) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) at org.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:104) at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:520) at org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:929) at org.apache.coyote.tomcat5.CoyoteAdapter.service(CoyoteAdapter.java:160) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:799) at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.processConnection(Http11Protocol.java:705) at org.apache.tomcat.util.net.TcpWorkerThread.runIt(PoolTcpEndpoint.java:577) at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:683) at java.lang.Thread.run(Thread.java:595)  The problem seems to be around line 182 of VelocityView.java in org.springframework.web.servlet.view.velocity when it uses BeanFactoryUtils.beanOfTypeIncludingAncestors() .  It also appears that this affects the Freemarker implementation as well (just eyeballing the code).  If you need them, I can profile my context configuration files.   ---  **Affects:** 1.1 final","closed","in: core,","spring-projects-issues","2004-09-07T14:00:31Z","2004-09-07T23:37:30Z"
"","5240","Type mismatch when using custom property editors with Spring JMX [SPR-511]","**[Pablo Pita Leira](https://jira.spring.io/secure/ViewProfile.jspa?name=pleira)** opened **[SPR-511](https://jira.spring.io/browse/SPR-511?redirect=false)** and commented  Imagine you have a class with a date field, so we use the CustomEditorConfigurer with the CustomDateEditor in the applicationContext.xml to enter the date property as a plain string. So far, so good.  Now, we like to export through JMX the bean methods by having a JmxAdapter bean around that bean. Now, the bean does not get initialised: there is a TypeMismatchException when setting the property.  ---  **Attachments:** - [testdate.zip](https://jira.spring.io/secure/attachment/10340/testdate.zip) (_2.56 kB_)  **Issue Links:** - #5207 JmxMBeanAdapter: conflict with PropertyPlaceholderConfigurer (_**""duplicates""**_)","closed","type: bug,","spring-projects-issues","2004-12-01T23:16:56Z","2019-01-11T12:42:27Z"
"","5550","ref-local and ref-bean [SPR-823]","**[Omar Irbouh](https://jira.spring.io/secure/ViewProfile.jspa?name=irbouho)** opened **[SPR-823](https://jira.spring.io/browse/SPR-823?redirect=false)** and commented  Actually, as of Spring 1.2-RC1, we can use:  \ \ \ \  This is really great. Is it possible to have two more specialized references : ref-local / ref-bean?        equivalent to \ \ \ and \ equivalent to \ \ \  Thank you.   --- No further details from [SPR-823](https://jira.spring.io/browse/SPR-823?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-03-24T23:51:48Z","2005-04-05T19:52:06Z"
"","5549","map/entry value [SPR-822]","**[Omar Irbouh](https://jira.spring.io/secure/ViewProfile.jspa?name=irbouho)** opened **[SPR-822](https://jira.spring.io/browse/SPR-822?redirect=false)** and commented  Is it possible to add a value attrivute the the map/entry element? This will allow to have configurations like:  \ \ \ \ \ \ \ \ \ which is really very compact.   ---  **Affects:** 1.2 RC2","closed","type: enhancement,","spring-projects-issues","2005-03-24T23:47:36Z","2005-04-06T00:28:07Z"
"","5220","AbstractJasperReportsView.getReportData [SPR-491]","**[Omar Irbouh](https://jira.spring.io/secure/ViewProfile.jspa?name=irbouho)** opened **[SPR-491](https://jira.spring.io/browse/SPR-491?redirect=false)** and commented  Hi all,  org.springframework.web.servlet.view.jasperreports#getReportData(java.util.Map) declares a local variable JRDataSource dataSource = null that is never affected, however there is a test done before the method returns:      if (dataSource == null) {       throw new IllegalArgumentException(""No JRDataSource supplied"");     }     return dataSource;  Omar Irbouh http://www.jroller.org/page/irbouh   ---  **Affects:** 1.1.3","closed","type: bug,","spring-projects-issues","2004-11-25T14:41:16Z","2004-11-25T20:02:59Z"
"","5056","getBeansOfType fails when abstract bean exist in the context [SPR-326]","**[Omar Irbouh](https://jira.spring.io/secure/ViewProfile.jspa?name=irbouho)** opened **[SPR-326](https://jira.spring.io/browse/SPR-326?redirect=false)** and commented  calling factory.getBeansOfType(MyBean.class) fails when the context contains a bean of class MyBean that is marked abstract.  Exception in thread ""main"" org.springframework.beans.factory.BeanIsAbstractExcep tion: Error creating bean with name '&template': Bean definition is abstract at org.springframework.beans.factory.support.AbstractBeanFactory.getBean (AbstractBeanFactory.java:177) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean (AbstractBeanFactory.java:136) at org.springframework.beans.factory.support.AbstractBeanFactory.isSingl eton(AbstractBeanFactory.java:268) at org.springframework.beans.factory.support.DefaultListableBeanFactory. getBeansOfType(DefaultListableBeanFactory.java:138) at Loader.main(Loader.java:18)  You can reproduce it easily:  applicationContext  ---  \ .... \  java code  ---  factory.getBeansOfType(MyBean.class, bool1, bool2);  ---  **Affects:** 1.1 final","closed","in: core,","spring-projects-issues","2004-09-09T13:08:05Z","2019-01-13T22:53:55Z"
"","4946","Using Query.setParameterList in HibernateTemplate [SPR-215]","**[Omar Irbouh](https://jira.spring.io/secure/ViewProfile.jspa?name=irbouho)** opened **[SPR-215](https://jira.spring.io/browse/SPR-215?redirect=false)** and commented  Hi everybody,  I updated HibernateOperations and HibernateTemplate to allow for using List parameters in Hibernate queries and named queries. added/updated methods are:      - public List find(final String queryString, final String paramName, final Object value)     - public List find(final String queryString, final String[] paramNames, final Object[] values)     - public List findByNamedQuery(final String queryName, final String paramName, final Object value)     - public List findByNamedQuery(final String queryName, final String[] paramNames, final Object[] values)  Could you please integrate this in spring framework 1.1?  Thank you, Omar Irbouh http://www.jroller.com/page/irbouho   ---  **Affects:** 1.1 RC1  **Attachments:** - [HibernateOperations.java](https://jira.spring.io/secure/attachment/10133/HibernateOperations.java) (_28.28 kB_) - [HibernateTemplate.java](https://jira.spring.io/secure/attachment/10134/HibernateTemplate.java) (_28.96 kB_)","closed","type: enhancement,","spring-projects-issues","2004-07-13T07:27:31Z","2004-07-24T03:45:08Z"
"","5071","jstl fmt:setLocale tag doesn't work with jstlview [SPR-341]","**[olorin](https://jira.spring.io/secure/ViewProfile.jspa?name=jdr)** opened **[SPR-341](https://jira.spring.io/browse/SPR-341?redirect=false)** and commented  JSP code:     if i use jstlview fmt:setlocale tags are not honoured, the date displays in my browser language (french)  If I switch to InternalResourceView in my servlet config file, the tag works OK and the date is displayed in dutch.   ---  **Affects:** 1.1 final","closed","status: declined,","spring-projects-issues","2004-09-22T05:51:01Z","2019-01-12T16:42:13Z"
"","4884","i18n message format type ResourceBundleMessageSource [SPR-152]","**[olorin](https://jira.spring.io/secure/ViewProfile.jspa?name=jdr)** opened **[SPR-152](https://jira.spring.io/browse/SPR-152?redirect=false)** and commented  Locale setting is not applied to type formatting in ResourceBundleMessageSource.getMessage()  message templates messages_nl: payroll.init=Toepassing geinitialiseerd door {0}  op {1,date,long} messages_fr: payroll.init=Application initialisée par {0} le {1,date,long}  code snippet: log.log(Level.WARNING, ctx.getMessage(""payroll.init"",new Object[]{""Guy"",new Date()},new Locale(""nl"",""BE""))); log.log(Level.WARNING, ctx.getMessage(""payroll.init"",new Object[]{""Elio"",new Date()},new Locale(""fr"",""FR"")));  output: WARNING: Toepassing geinitialiseerd door Guy  op 1 juni 2004 WARNING: Application initialisée par Elio le 1 juni 2004  -> french message is selected correctly but date is dutch formatted.  Doing messages manually:      MessageFormat formatter = new MessageFormat(""Application initialisée par {0} le {1,date,long}"",new Locale(""fr"",""FR""));     	log.log(Level.WARNING, formatter.format(new Object[]{""Louis"",new Date()}));  output OK: WARNING: Application initialisée par Louis le 1 juin 2004  bug or am i missing something?  tnx,  jan   ---  **Affects:** 1.0.1","closed","in: core,","spring-projects-issues","2004-06-01T02:41:30Z","2004-06-01T10:36:37Z"
"","5181","doOptions should be supported implicitely [SPR-452]","**[Olivier Jolly](https://jira.spring.io/secure/ViewProfile.jspa?name=ojolly)** opened **[SPR-452](https://jira.spring.io/browse/SPR-452?redirect=false)** and commented  The OPTIONS http verb, if not in the list of supported verbs for a given view will result in a cute stack trace in the logs. However, it is normal to provide a default implementation of it whatever the view underlying as an introspective method from the http client point of view. What do you think of it ?   --- No further details from [SPR-452](https://jira.spring.io/browse/SPR-452?redirect=false)","closed","type: enhancement,","spring-projects-issues","2004-11-10T08:18:15Z","2004-11-12T09:00:58Z"
"","5094","Jdbc backed MessageSource [SPR-364]","**[Olivier Jolly](https://jira.spring.io/secure/ViewProfile.jspa?name=ojolly)** opened **[SPR-364](https://jira.spring.io/browse/SPR-364?redirect=false)** and commented  As requested in the forum ( http://forum.springframework.org/viewtopic.php?t=1120 ), a jdbc based message source could be useful   ---  **Attachments:** - [JdbcMessageSource.java](https://jira.spring.io/secure/attachment/10261/JdbcMessageSource.java) (_5.21 kB_)  2 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2004-10-03T05:07:11Z","2008-01-07T03:50:40Z"
"","5092","Add DAO support for ldap [SPR-362]","**[Olivier Jolly](https://jira.spring.io/secure/ViewProfile.jspa?name=ojolly)** opened **[SPR-362](https://jira.spring.io/browse/SPR-362?redirect=false)** and commented  A patch for basic ldap operation with a LdapTemplate, a la JDBCTemplate, and context configuration with Ioc has been provided on the spring-dev mailing list. It lacks proper unit test, we can't rely on a local installation of ldap server. It could be worked around with a jndi/ldap provider mockup. There isn't yet much help in the domain of data alteration, it is mainly only for retrieving (but I have some ideas/bare code for the modification which I'll formalize if the base code is correct)   ---  **Attachments:** - [ldap_contribution_proposition_20040918.tgz](https://jira.spring.io/secure/attachment/10282/ldap_contribution_proposition_20040918.tgz) (_7.05 kB_) - [ldaptemplate_quickstart.pdf](https://jira.spring.io/secure/attachment/11442/ldaptemplate_quickstart.pdf) (_47.08 kB_)  19 votes, 18 watchers","closed","has: votes-jira,","spring-projects-issues","2004-10-01T01:47:19Z","2007-01-03T09:21:50Z"
"","5451","Transaction timeout not always enforced [SPR-723]","**[Oliver Hutchison](https://jira.spring.io/secure/ViewProfile.jspa?name=oliverhutchison)** opened **[SPR-723](https://jira.spring.io/browse/SPR-723?redirect=false)** and commented  When using DataSourceTransactionManager it appears that if a transaction times out while executing some user code, from then on, a queryTimeout of zero will be applied to any new JDBC Statements that are created. Unfortunately a zero queryTimeout means there is no timeout and obviously this means that the transaction will never timeout as DataSourceTransactionManager is relying on the JDBC data source to enforce timeouts.  Perhaps the code in DataSourceUtils.applyTransactionTimeout() should be modified to check for holder.getTimeToLiveInSeconds() == 0 and throw a TransactionTimeoutException?  This probably also applies to the equivalent applyTransactionTimeout methods for Hibernate etc.    ---  **Affects:** 1.1.4","closed","type: bug,","spring-projects-issues","2005-02-17T10:39:18Z","2005-02-28T02:35:16Z"
"","5198","Better path matching support in PathMatchingResourcePatternResolver  [SPR-469]","**[Oliver Hutchison](https://jira.spring.io/secure/ViewProfile.jspa?name=oliverhutchison)** opened **[SPR-469](https://jira.spring.io/browse/SPR-469?redirect=false)** and commented  It would be great if the path matching feature of PathMatchingResourcePatternResolver worked for all resources regardless of whether they are located on the file system or contained in jars.  For instance I'd love to be able to use the following kinds pattern even when my mapping files are packaged into jars:  classpath:/mappings/**/\*.hbm.xml classpath*:/mappings/**/*.hbm.xml   ---  **Affects:** 1.1.2  **Attachments:** - [PathMatchingResourcePatternResolverImprovment.patch](https://jira.spring.io/secure/attachment/10317/PathMatchingResourcePatternResolverImprovment.patch) (_17.80 kB_)","closed","type: enhancement,","spring-projects-issues","2004-11-16T11:26:26Z","2004-11-18T18:56:41Z"
"","5112","Circular dependency in  DependencyInjectionInterceptorFactoryBean [SPR-382]","**[Oliver Hutchison](https://jira.spring.io/secure/ViewProfile.jspa?name=oliverhutchison)** opened **[SPR-382](https://jira.spring.io/browse/SPR-382?redirect=false)** and commented  When using LocalSessionFactoryBean and DependencyInjectionInterceptorFactoryBean a circular dependency exists as DependencyInjectionInterceptorFactoryBean needs the session factory bean and the LocalSessionFactoryBean needs the interceptor bean.  Also DependencyInjectionInterceptorFactoryBean lacks a method for providing a chained interceptor even though DependencyInjectionInterceptor does support this.   ---  **Affects:** 1.1.2  **Attachments:** - [fix.zip](https://jira.spring.io/secure/attachment/10283/fix.zip) (_1.81 kB_)","closed","in: core,","spring-projects-issues","2004-10-07T16:59:45Z","2019-01-11T14:01:28Z"
"","5875","Add getter for sortDefinition field to PropertyComparator [SPR-1173]","**[Oliver Hutchison](https://jira.spring.io/secure/ViewProfile.jspa?name=oliverhutchison)** opened **[SPR-1173](https://jira.spring.io/browse/SPR-1173?redirect=false)** and commented  In a couple of unit tests I need to assert that the property being compared by a PropertyComparator is correct but unfortunately the ""sortDefinition"" field is private so I've been forced to use reflection to retrieve it's value.  A simple getter for this field would make such tests much cleaner.  /** * Returns the sort SortDefinition used by this Comparator.   */   public SortDefinition getSortDefinition() {   return sortDefinition;   }    ---  **Affects:** 1.2.3","closed","type: enhancement,","spring-projects-issues","2005-07-26T09:43:31Z","2005-07-31T19:59:55Z"
"","5786","Add ""required"" assertion [SPR-1081]","**[Oliver Hutchison](https://jira.spring.io/secure/ViewProfile.jspa?name=oliverhutchison)** opened **[SPR-1081](https://jira.spring.io/browse/SPR-1081?redirect=false)** and commented  Throughout SpringRich (and Spring) I often use/see the following code fragment for validation of required parameters:  if (param == null) { throw new IllegalArgumentException(""param is required""); }  or  Assert.notNull(param , ""param is required"");  To keep code more concise it would nice if there was another method on Assert so that you need only specify the name of the parameter:      /**      * Assert that an object required; that is, it is not null.      *       * required(clazz, ""class"");      * @param object the object to check      * @param name the name of the object being checked      * @throws IllegalArgumentException if the object is null      */     public static void required(Object object, String name) {         if (object == null) {             throw new IllegalArgumentException(name + "" is required; it cannot be null"");         }             }    --- No further details from [SPR-1081](https://jira.spring.io/browse/SPR-1081?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-06-27T19:54:59Z","2012-06-19T09:37:44Z"
"","5504","Extend HibernateTemplate for entityName methods [SPR-777]","**[Oliver Geisser](https://jira.spring.io/secure/ViewProfile.jspa?name=ogeisser)** opened **[SPR-777](https://jira.spring.io/browse/SPR-777?redirect=false)** and commented  With Hibernate 3 you can map Entities by name and not only by class. To make this work there are a number of new methods in the Hibernate Session API. For every old method which uses a ""Class clazz"" parameter there is a new method which uses a ""String entityName"" parameter.  For example ""Session.get(Class clazz, Serializable id)"" and Session.get(String entityName, Serializable id)"". This issue requests support for this new methods in HibernateTemplate. This way one can use Entities mapped by name or Entites mapped by class with HibernateTemplate.   ---  **Affects:** 1.2 RC1","closed","type: enhancement,","spring-projects-issues","2005-03-12T23:08:21Z","2005-03-14T08:49:39Z"
"","4970","WebContentGenerator should throw SessionRequiredException [SPR-239]","**[Oliver Flege](https://jira.spring.io/secure/ViewProfile.jspa?name=oliverf)** opened **[SPR-239](https://jira.spring.io/browse/SPR-239?redirect=false)** and commented  The checkAndPrepare method in WebContentGenerator should throw a SessionRequiredException if no session is available although one is required (instead of a plain ServletException as it does right now).   ---  **Affects:** 1.1 RC1","closed","type: enhancement,","spring-projects-issues","2004-08-02T16:58:19Z","2004-08-02T19:42:35Z"
"","5393","ContextLoader Problem in Oracle 9ias/OC4J [SPR-665]","**[Norm Deane](https://jira.spring.io/secure/ViewProfile.jspa?name=deanen)** opened **[SPR-665](https://jira.spring.io/browse/SPR-665?redirect=false)** and commented  It doesn't appear that the 'classpath*:/META-INF/beans.xml' notation for the contextConfigLocation parameter is working in OC4J. Using the following configuration only the WEB-INF/applicationContext.xml is loaded. I have 2 jar files in my web application, each jar file contains a META-INF/beans.xml.  \ \contextConfigLocation\ \ /WEB-INF/applicationContext.xml, classpath*:/META-INF/beans.xml\ \  Furthermore, using the 'classpath:/META-INF/bean*.xml' notation does not work as well. It yields...  [INFO] ServletContextResourcePatternResolver - Resolved location pattern [classp ath:/META-INF/bean*.xml] to resources []  If I take the same war file and deploy it in tomcat it successfully loads the applicationContext.xml and both META-INF/beans.xml files.  If I change the configuration to the following it loads one of the beans.xml files from one of the jar files.  \ \contextConfigLocation\ \ /WEB-INF/applicationContext.xml, classpath:/META-INF/beans.xml\ \   ---  **Affects:** 1.1.3","closed","in: core,","spring-projects-issues","2005-01-29T05:26:40Z","2019-01-12T16:41:47Z"
"","5869","DataBinder WARN log messages inappropriate [SPR-1167]","**[Noa Resare](https://jira.spring.io/secure/ViewProfile.jspa?name=noa)** opened **[SPR-1167](https://jira.spring.io/browse/SPR-1167?redirect=false)** and commented  I'm working with the spring webflow prerelease and using the DataBinder. Since the webflow uses hidden form parameters to identify flow state i get a lot of  17:20:10,532  WARN DataBinder:338 - Field [PropertyValue: name='_flowExecutionId', value=[ABDCFBF3-4B81-06D8-9D82-37FB74B0011A]] has been removed from PropertyValues and will not be bound, because it has not been found in the list of allowed fields [childCount, adultCount]  in my logfile. IMHO the correct thing to do would be to change the message to log level DEBUG or completely remove it. log level INFO should also be an improvement.   ---  **Affects:** 1.2.2","closed","type: enhancement,","spring-projects-issues","2005-07-22T02:14:14Z","2005-07-24T07:23:17Z"
"","5059","deepCopy in BlobByteArrayType throws NPE [SPR-329]","**[Nitzan Niv](https://jira.spring.io/secure/ViewProfile.jspa?name=nitzann)** opened **[SPR-329](https://jira.spring.io/browse/SPR-329?redirect=false)** and commented  BlobByteArrayType.deepCopy throws NullPointerException in line 79 if the passed value is null. Should add a check for null value.   ---  **Affects:** 1.1 final","closed","type: bug,","spring-projects-issues","2004-09-11T22:04:20Z","2004-09-15T09:00:01Z"
"","4989","BlobBinaryType for Blob usage with Hibernate [SPR-258]","**[Nitzan Niv](https://jira.spring.io/secure/ViewProfile.jspa?name=nitzann)** opened **[SPR-258](https://jira.spring.io/browse/SPR-258?redirect=false)** and commented  Hibernate UserType implementation for byte[] that gets mapped to BLOB. Based on Spring's StringClobType.  ---  public class BlobBinaryType implements UserType {      protected final LobHandler lobHandler;          public BlobBinaryType() {     	this.lobHandler = LocalSessionFactoryBean.getConfigTimeLobHandler();     }     public int[] sqlTypes() {     	return new int[] {Types.BLOB};     }     public Class returnedClass() {     	return byte[].class;     }     public boolean equals(Object x, Object y) {         return (x == y) ||            	   (x != null && y != null && java.util.Arrays.equals((byte[]) x, (byte[]) y));      }     public Object nullSafeGet(ResultSet rs, String[] names, Object owner) throws SQLException {     	if (this.lobHandler == null) {     		throw new IllegalStateException(""No LobHandler found for configuration - lobHandler property must be set on LocalSessionFactoryBean"");     	}     	return this.lobHandler.getBlobAsBytes(rs, rs.findColumn(names[0]));     }     public void nullSafeSet(PreparedStatement st, Object value, int index) throws SQLException {         if (this.lobHandler == null) {     		throw new IllegalStateException(""No LobHandler found for configuration - lobHandler property must be set on LocalSessionFactoryBean"");     	}     	if (!TransactionSynchronizationManager.isSynchronizationActive()) {     		throw new IllegalStateException(""BlobBinaryType requires active transaction synchronization"");     	}     	LobCreator lobCreator = this.lobHandler.getLobCreator();     	lobCreator.setBlobAsBytes(st, index, (byte[]) value);     	TransactionSynchronizationManager.registerSynchronization(new LobCreatorSynchronization(lobCreator));     }     public Object deepCopy(Object value) {         // check: create new byte[]?     	return value;     }     public boolean isMutable() {     	return false;     }	          /**      * Callback for resource cleanup at the end of a transaction.      * Invokes LobCreator.close to clean up temporary LOBs that might have been created.      * @see org.springframework.jdbc.support.lob.LobCreator#close      */     private static class LobCreatorSynchronization extends TransactionSynchronizationAdapter {              private final LobCreator lobCreator;          	private LobCreatorSynchronization(LobCreator lobCreator) {     		this.lobCreator = lobCreator;     	}          	public void beforeCompletion() {     		this.lobCreator.close();     	}     }  }  ---  No further details from [SPR-258](https://jira.spring.io/browse/SPR-258?redirect=false)","closed","type: enhancement,","spring-projects-issues","2004-08-11T20:26:37Z","2019-01-13T22:54:24Z"
"","4988","ConcurrentModificationException in Transaction Synchronization [SPR-257]","**[Nitzan Niv](https://jira.spring.io/secure/ViewProfile.jspa?name=nitzann)** opened **[SPR-257](https://jira.spring.io/browse/SPR-257?redirect=false)** and commented  I have a Hibernate-mapped class that uses the ClobStringType class to map Oracle CLOB to String. When a Clob is updated and the Hibernate session completes I get ConcurrentModificationException at AbstractPlatformTransactionManager.triggerBeforeCommit().  IMO this is related to the addition of a Synchronization to the transaction by ClobStringType: When the transaction completes, beforeCompletion() iterates over TransactionSynchronizationManager.getSynchronizations() elements. It calls TransactionSynchronizationManager.unbindResource() in SessionFactoryUtils.beforeCompletion(). The second Synchronization (from the Lob Handler) means that the iterator's next() is called after the collection was modified.  Suggested workaround: flush() the Hibernate session after setting the value of the CLOB.  Suggested fix: in triggerBeforeCommit(), copy the Synchronization collection before the iteration.  ---  2004-08-11 14:54:35,116 DEBUG [net.sf.hibernate.impl.BatcherImpl http-0.0.0.0-8080-Processor21] Executing batch size: 1 2004-08-11 14:54:35,116 DEBUG [net.sf.hibernate.impl.BatcherImpl http-0.0.0.0-8080-Processor21] success of batch update unknown: 0 2004-08-11 14:54:35,116 DEBUG [net.sf.hibernate.impl.BatcherImpl http-0.0.0.0-8080-Processor21] done closing: 0 open PreparedStatements, 0 open ResultSets 2004-08-11 14:54:35,116 DEBUG [net.sf.hibernate.impl.BatcherImpl http-0.0.0.0-8080-Processor21] closing statement 2004-08-11 14:54:35,116 DEBUG [net.sf.hibernate.impl.SessionImpl http-0.0.0.0-8080-Processor21] post flush 2004-08-11 14:54:35,116 DEBUG [org.springframework.transaction.jta.JtaTransactionManager http-0.0.0.0-8080-Processor21] Triggering beforeCompletion synchronization 2004-08-11 14:54:35,116 DEBUG [org.springframework.transaction.support.TransactionSynchronizationManager http-0.0.0.0-8080-Processor21] Removed value [org.springframework.orm.hibernate.SessionHolder@307c44] for key [net.sf.hibernate.impl.SessionFactoryImpl@10704e1] from thread [http-0.0.0.0-8080-Processor21] 2004-08-11 14:54:35,116 DEBUG [org.springframework.transaction.jta.JtaTransactionManager http-0.0.0.0-8080-Processor21] Initiating transaction rollback on commit exception java.util.ConcurrentModificationException at java.util.AbstractList$Itr.checkForComodification(AbstractList.java:448) at java.util.AbstractList$Itr.next(AbstractList.java:419) at java.util.Collections$1.next(Collections.java:996) at org.springframework.transaction.support.AbstractPlatformTransactionManager.triggerBeforeCommit(AbstractPlatformTransactionManager.java:434) at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:311) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:211) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:138) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:148) at $Proxy43.setCV(Unknown Source) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:324) at org.springframework.aop.framework.AopProxyUtils.invokeJoinpointUsingReflection(AopProxyUtils.java:59) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:138) at $Proxy43.setCV(Unknown Source) at com.cashu.sample.test.UserDAOTest.testUserCV(UserDAOTest.java:73) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:324) at junit.framework.TestCase.runTest(TestCase.java:154) at junit.framework.TestCase.runBare(TestCase.java:127) at org.apache.cactus.internal.AbstractCactusTestCase.runBareServer(AbstractCactusTestCase.java:149) at org.apache.cactus.internal.server.AbstractWebTestCaller.doTest(AbstractWebTestCaller.java:119) at org.apache.cactus.internal.server.AbstractWebTestController.handleRequest_aroundBody0(AbstractWebTestController.java:93) at org.apache.cactus.internal.server.AbstractWebTestController.handleRequest_aroundBody1$advice(AbstractWebTestController.java:124) at org.apache.cactus.internal.server.AbstractWebTestController.handleRequest(AbstractWebTestController.java) at org.apache.cactus.server.ServletTestRedirector.doPost_aroundBody2(ServletTestRedirector.java:101) at org.apache.cactus.server.ServletTestRedirector.doPost_aroundBody3$advice(ServletTestRedirector.java:124) at org.apache.cactus.server.ServletTestRedirector.doPost(ServletTestRedirector.java) at org.apache.cactus.server.ServletTestRedirector.doGet_aroundBody0(ServletTestRedirector.java:72) at org.apache.cactus.server.ServletTestRedirector.doGet_aroundBody1$advice(ServletTestRedirector.java:124) at org.apache.cactus.server.ServletTestRedirector.doGet(ServletTestRedirector.java) at javax.servlet.http.HttpServlet.service(HttpServlet.java:697) at javax.servlet.http.HttpServlet.service(HttpServlet.java:810) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:237) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:157) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:214) at org.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:104) at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:520) at org.apache.catalina.core.StandardContextValve.invokeInternal(StandardContextValve.java:198) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:152) at org.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:104) at org.jboss.web.tomcat.security.SecurityAssociationValve.invoke(SecurityAssociationValve.java:72) at org.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:102) at org.jboss.web.tomcat.security.JBossSecurityMgrRealm.invoke(JBossSecurityMgrRealm.java:275) at org.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:102) at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:520) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:137) at org.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:104) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:117) at org.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:102) at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:520) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) at org.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:104) at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:520) at org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:929) at org.apache.coyote.tomcat5.CoyoteAdapter.service(CoyoteAdapter.java:160) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:799) at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.processConnection(Http11Protocol.java:705) at org.apache.tomcat.util.net.TcpWorkerThread.runIt(PoolTcpEndpoint.java:577) at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:683) at java.lang.Thread.run(Thread.java:534) 2004-08-11 14:54:35,116 DEBUG [org.springframework.transaction.jta.JtaTransactionManager http-0.0.0.0-8080-Processor21] Rolling back JTA transaction [org.jboss.tm.usertx.client.ServerVMClientUserTransaction@779959] 2004-08-11 14:54:35,116 DEBUG [org.springframework.transaction.jta.JtaTransactionManager http-0.0.0.0-8080-Processor21] Triggering afterCompletion synchronization  ---  **Affects:** 1.0.2","closed","type: bug,","spring-projects-issues","2004-08-10T22:39:09Z","2019-01-13T22:54:26Z"
"","4917","Lose content for BinaryStream data getting from resultset by using SpringJdbc [SPR-185]","**[ning liu](https://jira.spring.io/secure/ViewProfile.jspa?name=liuningok)** opened **[SPR-185](https://jira.spring.io/browse/SPR-185?redirect=false)** and commented  We use SpringJdbc to retrieve a binary data from Oracle database table. During the processRow()/mapRow(), the data is correct. However, when the callback class is finished, the data lost content for some reason. According to my debug, I believe the data was screwed up somewhere inside the SpringJdbc framework.   ---  **Affects:** 1.0.2","closed","in: core,","spring-projects-issues","2004-06-25T03:40:10Z","2019-01-12T16:30:13Z"
"","4890","Error using JaxRpcPortProxyFactoryBean with an interceptor [SPR-158]","**[Nils-Helge Garli](https://jira.spring.io/secure/ViewProfile.jspa?name=nilsga)** opened **[SPR-158](https://jira.spring.io/browse/SPR-158?redirect=false)** and commented  When using an interceptor with the JaxRpcPortProxyFactoryBean, an exception is thrown during initialization of the Spring Context. It appears that somewhere in the initialization, the toString method of the interceptor is invoked, which in turn will invoke toString on the JaxRpcPortProxy, which in turn attempts to invoke a toString operation on the web service that it proxies.  The stack trace (plus some debug info) is:  4632 [main] INFO  org.springframework.beans.factory.support.DefaultListableBeanFactory  - Destroying singletons in factory {org.springframework.beans.factory.support.DefaultListableBeanFactory defining beans [debugInterceptor,amazon,debugAdvisor,amazonTarget]; Root of BeanFactory hierarchy} 4633 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory  - Retrieving depending beans for bean 'debugAdvisor' 4633 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory  - Applying DestructionAwareBeanPostProcessors to bean with name 'debugAdvisor' 4634 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory  - Retrieving depending beans for bean 'debugInterceptor' 4635 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory  - Applying DestructionAwareBeanPostProcessors to bean with name 'debugInterceptor' 4635 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory  - Retrieving depending beans for bean 'amazonTarget' 4635 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory  - Applying DestructionAwareBeanPostProcessors to bean with name 'amazonTarget' org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'amazon' defined in class path resource [applicationContext-spring-test.xml]: Initialization of bean failed; nested exception is javax.xml.rpc.JAXRPCException: Cannot find operation:  toString - none defined javax.xml.rpc.JAXRPCException: Cannot find operation:  toString - none defined at org.apache.axis.client.Call.setOperation(Call.java:1309) at org.apache.axis.client.AxisClientProxy.invoke(AxisClientProxy.java:154) at $Proxy0.toString(Unknown Source) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:324) at org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor.invoke(JaxRpcPortClientInterceptor.java:294) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:138) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:148) at $Proxy1.toString(Unknown Source) at java.lang.String.valueOf(String.java:2131) at java.lang.StringBuffer.append(StringBuffer.java:370) at org.springframework.aop.target.SingletonTargetSource.toString(SingletonTargetSource.java:50) at java.lang.String.valueOf(String.java:2131) at java.lang.StringBuffer.append(StringBuffer.java:370) at org.springframework.aop.framework.AdvisedSupport.toString(AdvisedSupport.java:478) at java.lang.String.valueOf(String.java:2131) at java.lang.StringBuffer.append(StringBuffer.java:370) at org.springframework.aop.framework.ProxyFactoryBean.setBeanFactory(ProxyFactoryBean.java:174) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:245) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:177) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:159) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:177) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:268) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:58) at spring.bug.SpringBugTest.testAmazonService(SpringBugTest.java:23) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:324) at junit.framework.TestCase.runTest(TestCase.java:154) at junit.framework.TestCase.runBare(TestCase.java:127) at junit.framework.TestResult$1.protect(TestResult.java:106) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.framework.TestResult.run(TestResult.java:109) at junit.framework.TestCase.run(TestCase.java:118) at junit.framework.TestSuite.runTest(TestSuite.java:208) at junit.framework.TestSuite.run(TestSuite.java:203)   ---  **Affects:** 1.0.1, 1.0.2  **Attachments:** - [applicationContext-spring-test.xml](https://jira.spring.io/secure/attachment/10106/applicationContext-spring-test.xml) (_1.80 kB_) - [test.tar](https://jira.spring.io/secure/attachment/10107/test.tar) (_10.00 kB_) - [test.tar](https://jira.spring.io/secure/attachment/10105/test.tar) (_10.00 kB_)","closed","in: core,","spring-projects-issues","2004-06-06T01:39:04Z","2004-06-06T08:44:57Z"
"","5218","Call to System.out.println in static initializer of HtmlUtils [SPR-489]","**[Nils Tegtmeier](https://jira.spring.io/secure/ViewProfile.jspa?name=arsenjew)** opened **[SPR-489](https://jira.spring.io/browse/SPR-489?redirect=false)** and commented  HtmlUtils contains a static initializer where the ENTITIES Map ist filled. The last line of this block is a call to System.out.println that might have been forgotten. Of course this is not a bug in itself; but if you print out the encodings of characters to the console yourself, it can be somewhat puzzling (what character might be this ""252""? ;-)   ---  **Affects:** 1.1.1","closed","type: bug,","spring-projects-issues","2004-11-25T04:07:48Z","2004-11-25T18:23:05Z"
"","5096","Taglib documentation for errors.globalErrors is incorrect [SPR-366]","**[Nilesh Kapadia](https://jira.spring.io/secure/ViewProfile.jspa?name=nilesh)** opened **[SPR-366](https://jira.spring.io/browse/SPR-366?redirect=false)** and commented  The taglib documentation here:  http://www.springframework.org/docs/taglib/  says ""errors.allGlobalErrors"" which should read ""errors.globalErrors""   --- No further details from [SPR-366](https://jira.spring.io/browse/SPR-366?redirect=false)","closed","type: bug,","spring-projects-issues","2004-10-04T03:33:59Z","2004-10-04T20:08:08Z"
"","5784","Adding a new attribute to bean element - ""depends-on-after-created"" [SPR-1078]","**[Nigel Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=nigelpsmith)** opened **[SPR-1078](https://jira.spring.io/browse/SPR-1078?redirect=false)** and commented  I have coded a small change to spring to allow for the following of dependencies after a bean is created. I needed a way to express a dependency that a bean has on something like a factory method or a method invoker, but could find no easy way of doing it.  I'm not that attached to the naming I have used, so please feel free to fiddle with it if you'd like.  If you don't feel that this is an appropriate modelling or usage for Spring, please let me know. I'm interested in doing something like this, and would appreciate some expert advice on how it should be done in the event that there is a better way of doing it.  Please find attached my code below. You can apply the patch to the released 1.2.1 source.  diff -r src-1.2.1/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java src-modified/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java 366a367,374  > // Now that this bean is instantiated, find the beans that this one depends on, but marked > // as to be retrieved after this bean has been created (through the depends-on-after-created attribute) > if (mergedBeanDefinition.getDependsOnAfterCreated() != null) { > for (int i = 0; i < mergedBeanDefinition.getDependsOnAfterCreated().length; i++) { > getBean(mergedBeanDefinition.getDependsOnAfterCreated()[i]); > } > }  diff -r src-1.2.1/org/springframework/beans/factory/support/AbstractBeanDefinition.java src-modified/org/springframework/beans/factory/support/AbstractBeanDefinition.java 89a90,91  > private String[] dependsOnAfterCreated;  130a133  > setDependsOnAfterCreated(original.getDependsOnAfterCreated());  176a180  > setDependsOnAfterCreated(other.getDependsOnAfterCreated());  485c489,510 < 	/** —  > /** > * The names of the beans that this bean depends on being initialized, after this > * bean has been created. The bean factory guarantees that these beans get > * initialized after this bean is created. This is especially helpful for > * expressing dependencies that involve this bean having been created first. > *  > * Note that dependencies are normally expressed through bean properties or > * constructor arguments. >   */ >   public void setDependsOnAfterCreated(String[] dependsOnAfterCreated) { >   this.dependsOnAfterCreated = dependsOnAfterCreated; >   } >  > /** > * Return the bean names that this bean expects to be created after this bean is > * instantiated >   */ >   public String[] getDependsOnAfterCreated() { >   return dependsOnAfterCreated; >   } >  > /** > diff -r src-1.2.1/org/springframework/beans/factory/support/AbstractBeanFactory.java src-modified/org/springframework/beans/factory/support/AbstractBeanFactory.java > 125d124 > < > diff -r src-1.2.1/org/springframework/beans/factory/xml/DefaultXmlBeanDefinitionParser.java src-modified/org/springframework/beans/factory/xml/DefaultXmlBeanDefinitionParser.java > 115c115,116 > < 	public static final String INIT_METHOD_ATTRIBUTE = ""init-method""; > — > public static final String DEPENDS_ON__AFTER_CREATED_ATTRIBUTE = ""depends-on-after-created""; > public static final String INIT_METHOD_ATTRIBUTE = ""init-method""; > 335,337c336,338 > < 			if (ele.hasAttribute(DEPENDS_ON_ATTRIBUTE)) { > < 				String dependsOn = ele.getAttribute(DEPENDS_ON_ATTRIBUTE); > < 				bd.setDependsOn(StringUtils.tokenizeToStringArray(dependsOn, BEAN_NAME_DELIMITERS)); > — > if (ele.hasAttribute(DEPENDS_ON__AFTER_CREATED_ATTRIBUTE)) { > String dependsOnAfterCreated = ele.getAttribute(DEPENDS_ON__AFTER_CREATED_ATTRIBUTE); > bd.setDependsOnAfterCreated(StringUtils.tokenizeToStringArray(dependsOnAfterCreated, BEAN_NAME_DELIMITERS)); > 339a341,345 > if (ele.hasAttribute(DEPENDS_ON_ATTRIBUTE)) { > String dependsOn = ele.getAttribute(DEPENDS_ON_ATTRIBUTE); > bd.setDependsOn(StringUtils.tokenizeToStringArray(dependsOn, BEAN_NAME_DELIMITERS)); > }  diff -r src-1.2.1/org/springframework/beans/factory/xml/spring-beans.dtd src-modified/org/springframework/beans/factory/xml/spring-beans.dtd 237a238,248  > The names of the beans that this bean depends on being initialized, after this > bean has been created. The bean factory guarantees that these beans get > initialized after this bean is created. This is especially helpful for > expressing dependencies that involve this bean having been created first. >  > Note that dependencies are normally expressed through bean properties or > constructor arguments. > --> >  > \ >  > \    ---  **Affects:** 1.2.1  **Attachments:** - [changes.txt](https://jira.spring.io/secure/attachment/10851/changes.txt) (_3.87 kB_)","closed","type: enhancement,","spring-projects-issues","2005-06-26T13:46:03Z","2012-06-19T09:37:37Z"
"","5078","NotWritablePropertyException when registering a Component class [SPR-348]","**[Niels Bech Nielsen](https://jira.spring.io/secure/ViewProfile.jspa?name=nbn)** opened **[SPR-348](https://jira.spring.io/browse/SPR-348?redirect=false)** and commented  As described in the topic, the XmlBeanFactory fails when trying to set an integer value on an object named Component.  If I use the name Component2, the same situation succeeds.  It is the same if I use string parameters, using constructors or setters alike.  If I cannot upload the example, it exists at: http://www.javaekspert.dk/files/ToSpring.tgz   ---  **Attachments:** - [ToSpring.tgz](https://jira.spring.io/secure/attachment/10229/ToSpring.tgz) (_441.50 kB_)","closed","in: core,","spring-projects-issues","2004-09-24T05:23:20Z","2019-01-11T14:03:29Z"
"","5706","extract ""Reloadable"" aspect from ReloadableResourceBundleMessageSource for reuse [SPR-995]","**[nicolas de loof](https://jira.spring.io/secure/ViewProfile.jspa?name=ndeloof)** opened **[SPR-995](https://jira.spring.io/browse/SPR-995?redirect=false)** and commented  ReloadableResourceBundleMessageSource is great to access messages and automagicaly reload bundles.  ... but Bundles are properties files and properties are usefull for lot's of other things, like application configuration. I would find great to have the same behaviour and use something like a ""ReloadablePropertiesConfiguration"" to access application properties (it also may be associated with commons-configuration...)  It may be great to isolate property files handling (reload, caching...) into a more generic and reusable ReloadablePropertiesManager, that may be used by ReloadableResourceBundleMessageSource as a PropertiesHolder source. Converting and caching properties to MessageFormat may stay in ReloadableResourceBundleMessageSource.   ---  **Affects:** 1.2.2","closed","type: enhancement,","spring-projects-issues","2005-05-31T02:06:12Z","2008-01-07T03:54:43Z"
"","5703","broken link for reference-libraries.zip [SPR-992]","**[nicolas de loof](https://jira.spring.io/secure/ViewProfile.jspa?name=ndeloof)** opened **[SPR-992](https://jira.spring.io/browse/SPR-992?redirect=false)** and commented  in CVS doc/reference/readme.txt gives a link to required libs to build docs: http://www.jteam.nl/spring/reference-libraries.zip  This link is broken   ---  **Affects:** 1.2.2","closed","type: bug,","spring-projects-issues","2005-05-29T18:21:34Z","2005-06-01T23:05:38Z"
"","5488","ReloadableResourceBundleMessageSource requires cacheSeconds to be refreshable [SPR-760]","**[nicolas de loof](https://jira.spring.io/secure/ViewProfile.jspa?name=ndeloof)** opened **[SPR-760](https://jira.spring.io/browse/SPR-760?redirect=false)** and commented  I'm using ReloadableResourceBundleMessageSource for application messages. It is required to be able to refresh them at runtime (hot reload), so I'm using a JMX invoke on clearCacheIncludingAncestors. This method runs fine ONLY if cacheSeconds is not set to -1 (disabled).  Not beeing a problem, I set it to 36000 and run my app. Now, refreshProperties fails because one of my property files is in a jar in WEB-INF/lib (not readable form filesystem).  auto-refresh should not fail if resource.getFile() throws IOException. In current version it return an empty PropertiesHolder (line 455). It may try to load the properties (separate cacheMillis check try/catch from properties loading try/catch). It may also be possible to programmatically refresh messageSource with autorefresh disabled.   ---  **Affects:** 1.1.5  **Attachments:** - [patch.txt](https://jira.spring.io/secure/attachment/10563/patch.txt) (_3.03 kB_)","closed","in: core,","spring-projects-issues","2005-03-03T01:07:54Z","2005-03-25T02:36:39Z"
"","5403","StringUtils.trimLeadingWhitespace causes ""String index out of range"" [SPR-675]","**[nicolas de loof](https://jira.spring.io/secure/ViewProfile.jspa?name=ndeloof)** opened **[SPR-675](https://jira.spring.io/browse/SPR-675?redirect=false)** and commented  StringUtils.trimLeadingWhitespace doesn't check for empty String that have no ""charAt(0)"" value. If result on a StringIndexOutOfBoundsException: String index out of range: 0  This appears when Spring is used to access some .properties resources that have blank lines.   ---  **Affects:** 1.1.4","closed","in: core,","spring-projects-issues","2005-02-01T21:13:15Z","2019-01-13T22:52:44Z"
"","5727","support ""add""-style List injection [SPR-1018]","**[nicolas de loof](https://jira.spring.io/secure/ViewProfile.jspa?name=ndeloof)** opened **[SPR-1018](https://jira.spring.io/browse/SPR-1018?redirect=false)** and commented  Some classes don't expose a plublic setter for internal list (as an example, commons-configuration CompositeConfiguration) bue some addXXX(item) method.  As suggested in http://forum.springframework.org/viewtopic.php?t=3617 a beanPostProcessor can be used to setup a bean from a List using iterative call to the add method.  ---  **Affects:** 1.2.2  **Attachments:** - [patch_spring.txt](https://jira.spring.io/secure/attachment/10770/patch_spring.txt) (_4.60 kB_)  **Issue Links:** - #4961 Please improve BeanFactory support for containers & collections (_**""duplicates""**_)  5 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2005-06-05T23:22:22Z","2019-01-11T18:35:47Z"
"","5726","DefaultListableBeanFactory failed to find bean, which should be there according to the error message [SPR-1017]","**[Nico De Groote](https://jira.spring.io/secure/ViewProfile.jspa?name=ndgroote)** opened **[SPR-1017](https://jira.spring.io/browse/SPR-1017?redirect=false)** and commented  org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'aServiceTarget""' is defined: org.springframework.beans.factory.support.DefaultListableBeanFactory defining beans [traceInterceptor,tracePointCutAdvisor,aService,aSessionFactory,dataSource,connection,transactionAdvisor,transactionInterceptor,transactionAttributeSource,transactionManager,aServiceTarget]; root of BeanFactory hierarchy  I suppose the problem is in the DefaultListableBeanFactory in which the beanDefinitionNames still contains the name of the bean that i'm looking for. It looks like the bean is lookup up in the beanDefinitionMap. One of those two are incossistent. Should'nt these be in sync with each other.   ---  **Affects:** 1.2.1","closed","","spring-projects-issues","2005-06-05T20:57:03Z","2019-01-11T18:35:52Z"
"","5047","Portlet Framework should support Spring Taglibs [SPR-317]","**[Nick Lothian](https://jira.spring.io/secure/ViewProfile.jspa?name=nicklothian)** opened **[SPR-317](https://jira.spring.io/browse/SPR-317?redirect=false)** and commented  The portlet framework in the Spring Sandbox currently does not support the use of the Spring tag library. It would be useful if it did.   ---  **Affects:** 1.1 final  **Attachments:** - [PortletSample.zip](https://jira.spring.io/secure/attachment/10210/PortletSample.zip) (_2.02 MB_) - [PortletSupportPatch.txt](https://jira.spring.io/secure/attachment/10209/PortletSupportPatch.txt) (_21.33 kB_)  3 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2004-09-07T22:11:37Z","2012-06-19T03:54:26Z"
"","4997","Allow Bean Configuration After Creation [SPR-266]","**[Nicholas Lesiecki](https://jira.spring.io/secure/ViewProfile.jspa?name=ndlesiecki)** opened **[SPR-266](https://jira.spring.io/browse/SPR-266?redirect=false)** and commented  Basically I'd like Spring to be able to configure beans whose lifecycle it does not/cannot control. (Usually objects instantiated by 3rd party frameworks: Hibernate objects, Tapestry Pages, etc.).  My original post to the support forum:  ---  I'm investigating whether I can use Spring to configure a bean after its creation. I'm using Tapestry, and the creation of my Page object is controlled by the framework. I'd like to be able to add a call to something like:  beanFactory.populate(thisPage, idOfPageInFactory);  during the pageBeginRender callback method. Then I'd like to ""deconfigure"" it during the pageEndRender method.  I found something similar, AutowireCapableBeanFactory.autowireBeanProperties()  which is exactly what I want (I think). However, it only allows autowiring, not explicit wiring. —  Colin Sampaleanu's Reply:  ---  Your use case, which I can't really recall having been requested by anybody, sounds fairly useful, and is not incredibly hard to do either, but the call would obviously have to provide some indication to the container as to which bean definition to use (which could be implicit if there is only one def for a class of that type). It's really just a version of the existing getBean() method, with the bean construction pre-handled. Implicit in this is I think the assumption that the bean is a prototype as far as the Spring container is concerned, i.e. it does not try to manage its lifecylce as it would for non-prototoype beans.  The best thing to do is probably to file a feature request in JIRA. I don't think that Juergen, Rod or I would have a problem adding this for the 1.2 timeframe. —  ---  No further details from [SPR-266](https://jira.spring.io/browse/SPR-266?redirect=false)","closed","type: enhancement,","spring-projects-issues","2004-08-16T16:12:00Z","2019-01-13T22:54:21Z"
"","5165","MultiActionController [SPR-436]","**[net guard](https://jira.spring.io/secure/ViewProfile.jspa?name=netv)** opened **[SPR-436](https://jira.spring.io/browse/SPR-436?redirect=false)** and commented  In setDelegate(Object delegate) implementation of MultiActionController, first finds method with signature : ModelAndView anyMeaningfulName(HttpServletRequest request, HttpServletResponse response); which has two parameters, and match the condition : if (params.length >= 2 && params[0].equals(HttpServletRequest.class) && params[1].equals(HttpServletResponse.class)) { ... } , and then it finds method with signature : long anyMeaningfulNameLastModified(HttpServletRequest request); which has only one parameter, but still enclosed with the above condition! I think this will not find the LastModified method for ever. Line in MultiActionController is between 209 and 230.   ---  **Affects:** 1.1.1","closed","in: web,","spring-projects-issues","2004-10-30T02:08:29Z","2019-01-11T14:17:08Z"
"","5757","MessageProducers never closed in JmsTemplate [SPR-1050]","**[Neil Clayton](https://jira.spring.io/secure/ViewProfile.jspa?name=scornflake)** opened **[SPR-1050](https://jira.spring.io/browse/SPR-1050?redirect=false)** and commented  I've got an app that I've been profiling, that is slowly using lots of memory. I've now reproduced what I **think** is the problem, using a simple test that sends loads of msgs over JMS.  The test replicates the way in which the JmsTemplate sends messages- by using a message producer. It uses memory at quite a rate (40MB in about 1m).  I took a look at the JmsTemplate codeand see the following: Code:  protected void doSend(Session session, Destination destination, MessageCreator messageCreator) throws JMSException {      MessageProducer producer = createProducer(session, destination);      Message message = messageCreator.createMessage(session);      if (logger.isDebugEnabled()) {         logger.debug(""Sending created message ["" + message + ""]"");      }      doSend(producer, message);      // Check commit - avoid commit call within a JTA transaction.      if (session.getTransacted() && isSessionTransacted() &&            !TransactionSynchronizationManager.hasResource(getConnectionFactory())) {         // Transacted session created by this template -> commit.         commitIfNecessary(session);      }   }  Should not the producer that is created be closed? If I replicate this method in a test case, and run it repeatedly, I run out of memory quite quickly. If I close the producer, things seems stable.  Here is my 'test case equivalent': Code:      public void testActiveMQMemoryUsage() throws JMSException, InterruptedException {          ActiveMQ activeMQ = new ActiveMQ();          activeMQ.setPersistenceAdapter(new VMPersistenceAdapter());          activeMQ.start();               // Get a connection/topic, start firing messages at it          ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory();          TopicConnection topicConnection = factory.createTopicConnection();               TopicSession topicSession = topicConnection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);          Topic topic = topicSession.createTopic(""testTopic"");          TopicPublisher topicPublisher = topicSession.createPublisher(topic);               topicConnection.start();               int msgCount = 0;          Runtime runtime = Runtime.getRuntime();          while (true) {              MessageProducer producer = topicSession.createProducer(topic);              TextMessage message = topicSession.createTextMessage(""The time is now "" + System.currentTimeMillis());              producer.send(message, DeliveryMode.NON_PERSISTENT, 5, 1000);              msgCount++;              if (msgCount % 1000 == 0) {                  monitorMemory();              }              producer.close();          }      }           private void monitorMemory() throws InterruptedException {          Runtime runtime = Runtime.getRuntime();          System.out.println(""Free: "" + runtime.freeMemory() / 1024 / 1024 + ""MB, total: "" + runtime.totalMemory() / 1024              / 1024 + ""MB, max: "" + runtime.maxMemory() / 1024 / 1024 + ""MB"");          Thread.sleep(1000);      }   With the producer.close() commented out, I see: Quote: Free: 1MB, total: 4MB, max: 63MB Free: 0MB, total: 4MB, max: 63MB Free: 1MB, total: 6MB, max: 63MB Free: 0MB, total: 6MB, max: 63MB Free: 3MB, total: 10MB, max: 63MB Free: 0MB, total: 10MB, max: 63MB Free: 2MB, total: 14MB, max: 63MB Free: 6MB, total: 16MB, max: 63MB  With it in there, I see: Quote:  Free: 0MB, total: 2MB, max: 63MB Free: 0MB, total: 2MB, max: 63MB Free: 0MB, total: 2MB, max: 63MB Free: 1MB, total: 2MB, max: 63MB Free: 1MB, total: 2MB, max: 63MB Free: 1MB, total: 2MB, max: 63MB Free: 1MB, total: 2MB, max: 63MB    ---  **Affects:** 1.2.1","closed","type: bug,","spring-projects-issues","2005-06-16T18:49:29Z","2005-06-22T21:46:30Z"
"","5742","Java doc error [SPR-1034]","**[Neeraj Kumar](https://jira.spring.io/secure/ViewProfile.jspa?name=neeraj_cmu)** opened **[SPR-1034](https://jira.spring.io/browse/SPR-1034?redirect=false)** and commented  The doc for AbstractTraceInterceptor says that \ Setting the \useDynamicLog\ bean property to \true\ causes all log messages to be written to the \Log\ for the target class being intercepted. \  It should say 'useDynamicLogger' instead of 'useDynamicLog'.   ---  **Affects:** 1.2.1","closed","in: core,","spring-projects-issues","2005-06-13T00:23:58Z","2005-06-13T03:30:39Z"
"","5401","iBatis batch API  [SPR-673]","**[mou](https://jira.spring.io/secure/ViewProfile.jspa?name=mou)** opened **[SPR-673](https://jira.spring.io/browse/SPR-673?redirect=false)** and commented  I am using org.springframework.orm.ibatis.SqlMapClientTemplate, but the iBatis batch API is not exposed. How do you invoke the underlying Ibatis API batch methods from Spring?   ---  **Affects:** 1.1.3","closed","status: declined,","spring-projects-issues","2005-02-01T13:50:46Z","2019-01-12T16:41:46Z"
"","5018","Enable setting of PDF document meta data in AbstractPdfView [SPR-287]","**[Moses Hohman](https://jira.spring.io/secure/ViewProfile.jspa?name=mmhohman)** opened **[SPR-287](https://jira.spring.io/browse/SPR-287?redirect=false)** and commented  Right now there's no way to populate the meta information (e.g. title, creator, author, etc.) on a PDF document generated by org.springframework.web.servlet.view.document.AbstractPdfView. You can't populate it in getDocument(), because the PdfWriter hasn't been associated with the Document yet. And you can't populate it in buildPdfDocument(), because document.open() has already been called.  Patch was submitted to springframework-developer mailing list by Moses Hohman on August 24th.   ---  **Affects:** 1.1 RC2  **Attachments:** - [patchAbstractPdfView.txt](https://jira.spring.io/secure/attachment/10171/patchAbstractPdfView.txt) (_1.45 kB_)","closed","type: enhancement,","spring-projects-issues","2004-08-25T09:09:54Z","2004-08-25T18:03:35Z"
"","4938","AbstractFormController does not handle bind errors [SPR-207]","**[Mojahedul Hoque Abul Hasanat](https://jira.spring.io/secure/ViewProfile.jspa?name=masum)** opened **[SPR-207](https://jira.spring.io/browse/SPR-207?redirect=false)** and commented  AbstractFormController does not call ""showForm"" if binding errors occur.  The javadoc documentation of the class clearly states that it will call showForm on binding errors.  SimpleFormController works around this bug by calling showForm from its implementation of processFormSubmission.  Proposed solution: Add a check for binding errors in AbstractFormController.handRequestInternal and remove the call to showForm in SimpleFormController.processFormSubmission.  Alternatively, the javadoc should be modified.   ---  **Affects:** 1.0.2","closed","type: bug,","spring-projects-issues","2004-07-08T00:55:07Z","2004-07-08T01:15:46Z"
"","5289","Incorrect code example in Reference manual [SPR-560]","**[Miro Adamy](https://jira.spring.io/secure/ViewProfile.jspa?name=radegast)** opened **[SPR-560](https://jira.spring.io/browse/SPR-560?redirect=false)** and commented  The XML in section 3.3.1 example says: \ \\\ \\\ \\1\\ \  Should be either:  \ \\\ \\\ \\1\\ \  or \ \\\ \\\ \\1\\ \  The same goes for static factory example. The section (3.3.2) mentions  the details of argument resolution, but the XML in 3.3.1 as is leads to exception.   ---  **Affects:** 1.1.3","closed","type: enhancement,","spring-projects-issues","2004-12-15T04:04:54Z","2004-12-19T07:03:47Z"
"","5708","Wrong Spring Framework Forum Index  	Spring Framework Spring Framework Support Forums   Wrong Javadoc for JTATransactionManager on Resin [SPR-997]","**[Mircea Crisan](https://jira.spring.io/secure/ViewProfile.jspa?name=croco)** opened **[SPR-997](https://jira.spring.io/browse/SPR-997?redirect=false)** and commented  I have noticed something wrong in the javadocs commnets for JtaTransactionManager. I was trying to do a PROPAGATION_REQUIRES_NEW transaction with a JTA transaction manager on Resin 3.0.13. As the documentation says, the location for the transaction manager should be: ""java:comp/UserTransaction"". But for Resin 3.0.13 actually it seems to be: ""java:/TransactionManager"". I did not checked with an older version of Resin, maybe it has changed in the meanwhile. If I try to use ""java:comp/UserTransaction"" I get an exception: javax.naming.NamingException: Object [UserTransactionProxy[]] available at JNDI location [java:comp/UserTransaction] does not implement [javax.transaction.TransactionManager] ...   ---  **Affects:** 1.2 final","closed","type: enhancement,","spring-projects-issues","2005-05-31T18:29:39Z","2005-06-01T00:49:30Z"
"","4999","Incorrect content type outputted by AbstractXsltView [SPR-268]","**[Miles Barr](https://jira.spring.io/secure/ViewProfile.jspa?name=mbarr)** opened **[SPR-268](https://jira.spring.io/browse/SPR-268?redirect=false)** and commented  The doTransform method of AbstractXsltView does not match up the content types of the HTTP response stream and the output of the transformer.  By default it appears the HTTP response stream will set it's charset to 'ISO-8859-1' while the XSLT transformer will output 'UTF-8'. This leads to HTTP responses like:  HTTP/1.1 200 OK Content-Type: text/html;charset=ISO-8859-1 Content-Language: en-GB Date: Tue, 17 Aug 2004 14:40:11 GMT Server: Apache-Coyote/1.1 Connection: close  \ \ \  The transformer should match the response:  trans.setOutputProperty(OutputKeys.ENCODING), response.getCharacterEncoding());    ---  **Affects:** 1.0.2","closed","type: bug,","spring-projects-issues","2004-08-17T03:37:37Z","2004-08-18T06:33:21Z"
"","4998","Incorrect directory only path matching in PathMatcher [SPR-267]","**[Miles Barr](https://jira.spring.io/secure/ViewProfile.jspa?name=mbarr)** opened **[SPR-267](https://jira.spring.io/browse/SPR-267?redirect=false)** and commented  The problem is in org.springframework.util.PathMatcher. It does not correctly match patterns without a trailing file name. e.g. I have the following two patterns:  /admin/**/ /admin/**/detail/*.html  Basically the first pattern should match any URL's under 'admin' that do not have a filename, and the second should catch all URL's that go to an HTML file under the directory 'detail'. This is not the case, e.g.  /admin/site/detail/site1.html gets matched by the first pattern.  From the Javadoc of PathMatcher:  ""** matches zero or more 'directories' in a path""  In this case '**' has also match the file name, not just the directories. The match should have failed when it found a filename.   ---  **Affects:** 1.0.2","closed","in: core,","spring-projects-issues","2004-08-16T21:07:27Z","2019-01-12T16:42:23Z"
"","5521","invalid doSubmit method executed for SimpleFormController [SPR-794]","**[Mike Zupper](https://jira.spring.io/secure/ViewProfile.jspa?name=mzupper@boscovs.com)** opened **[SPR-794](https://jira.spring.io/browse/SPR-794?redirect=false)** and commented  Here is the scenerio:  - MyAccountForm extends SimpleFormController - MyAccountValidator implements Validator  Within MyAccountForm I override the following method:  protected ModelAndView onSubmit(HttpServletRequest request, HttpServletResponse response, Object command, BindException errors) throws Exception  with proper validation and no errors, The framework should call the ""onSubmit"" method with the defined signature but it does not. If  I override, the following method:  protected ModelAndView onSubmit(Object command) throws Exception  ---  it calls the ""onSubmit"" method properly.  I need to access the HTTP request to set session data.  I used my IDE's debugger to trace it down and I could not find any reason why that above onSubmit method does not work... Any Ideas????  Please see issue# #5420 for similar problem.  Thanks,  Mike Zupper (mzupper@boscovs.com)  ---  **Affects:** 1.1.3, 1.1.4, 1.1.5  **Attachments:** - [SimpleFormController.java](https://jira.spring.io/secure/attachment/10595/SimpleFormController.java) (_16.39 kB_)  **Issue Links:** - #5420 After a successfull validation Spring does not call the onSubmit method with signature of (request, response,object, bindexception) (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2005-03-17T07:09:51Z","2019-01-13T22:52:22Z"
"","5388","ReloadableResourceBundleMessageSource.calculateAllFilenames returns duplicate filenames [SPR-660]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-660](https://jira.spring.io/browse/SPR-660?redirect=false)** and commented  When ""fallbackToSystemLocale"" is true and the System Locale == en_US and the requested Locale == en then ReloadableResourceBundleMessageSource.calculateAllFilenames() returns 2 basename_en filenames which means that basename_en is checked twice for a message.  Mike   ---  **Affects:** 1.1.4","closed","type: enhancement,","spring-projects-issues","2005-01-26T10:19:18Z","2005-01-27T04:27:24Z"
"","5363","Make select RelaodableResourceBundleMessageSource.PropertiesHolder methods public [SPR-635]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-635](https://jira.spring.io/browse/SPR-635?redirect=false)** and commented  I'm attempting to extend ReloadableResourceBundleMessageSource to provide some custom functionality but am being hampered by the protected methods in RelaodableResourceBundleMessageSource.PropertiesHolder.  It would be nice if at a minimum.  RelaodableResourceBundleMessageSource.PropertiesHolder.getMessageFormat()  was public.  It may be useful for a few of the other methods to be public as well.  If this is approved could we possibly get this fix into 1.1.4?  Thanks, Mike   ---  **Affects:** 1.1.3","closed","type: enhancement,","spring-projects-issues","2005-01-18T08:10:25Z","2005-01-23T22:33:25Z"
"","5197","Support Nested Dependency Injection for readonly property. [SPR-468]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-468](https://jira.spring.io/browse/SPR-468?redirect=false)** and commented  If I have a class structure like this:  Code:  public class Test { private InnerTest innerTest; public InnerTest getInnerTest() { if(innerTest == null) { innerTest = new InnerTest(); } return innerTest; } }  public class InnerTest { private String name; public String getName() { return name; } public void setName(String name) { this.name = name; } }  It would be nice to be able to set the attributes of an InnerTest instance that exists in side of Test without using spring to create and set InnerTest.  So basicly the enhancement would be if a property is readonly then have spring attempt to continue setting nested beans and properties with the value returned from the readonly property.  If the readonly property returns a null value then throw an error just like spring would normally as if there were no setter.  What would be even nicer is if class were also optional attribute for the nested bean definitions allowing spring to set properties without knowing the class in case the root class wished to instantiate a polymorphic version of the class not known at config time.  I realize this might not support the type of OO design Spring pushes but it would come in handy for me and my work with some legacy classes I'm using.  here is an example bean definition for the setting of a readonly property:           	     		      			Test Rate Schedule     		     	       Mike   --- No further details from [SPR-468](https://jira.spring.io/browse/SPR-468?redirect=false)","closed","type: enhancement,","spring-projects-issues","2004-11-16T07:54:10Z","2019-01-11T14:16:16Z"
"","5138","Add select Hibernate.class methods to HibernateOperations [SPR-408]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-408](https://jira.spring.io/browse/SPR-408?redirect=false)** and commented  I think it would be good to add Hibernate.initialize() and Hibernate.close() to HibernateOperations.  They seem to be operations that I do enough that I would like to be able to execute them easily without always doing them either inside of a callback or inside a HibernateException try, catch.  Sure they require the object and Iterator to have an already open session but I believe there are plenty of other HibernateOperations that are fairly useless with an immediate Template scoped opened and closed session.  I'd just like to be able to execute them with runtime exception handling within the scope of an already existing session.  Regards, Mike   ---  **Affects:** 1.1.1","closed","type: enhancement,","spring-projects-issues","2004-10-18T07:28:13Z","2004-10-22T06:48:39Z"
"","4908","Add support for contains(Object) method to HibernateOperations [SPR-176]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-176](https://jira.spring.io/browse/SPR-176?redirect=false)** and commented  I was wondering if support for the hibernate Session.contains(Object) method could be added to HibernateOpersions.  It has evict(Object) but not contains(Object).  Having this method in HibernateOpersions would be useful to me.   ---  **Affects:** 1.0.2","closed","type: enhancement,","spring-projects-issues","2004-06-21T07:00:35Z","2004-06-21T07:39:23Z"
"","5812","Autoproxy problems upgrading from 1.2.1 to 1.2.2 [SPR-1108]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-1108](https://jira.spring.io/browse/SPR-1108?redirect=false)** and commented  I attempted to upgrade from Spring 1.2.1 to 1.2.2 and with 1.2.2 a lot more of my beans are displaying:  ""Bean 'XXXXX' is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying""  I attempted to step through the code and it appears that many more beans are being initialized at the same time my AutoProxy instance is initialized and added as a post processor.  If I downgrade back to 1.2.1 everything works fine again.  Any ideas? Or do you need more information.  Mike  ---  **Affects:** 1.2.2  **Issue Links:** - #5820 AbstractBeanFactory.getType change dramatically alters bean instantiation order (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2005-07-07T02:26:15Z","2019-01-12T16:52:26Z"
"","5045","Exception to iterate prepare() needed before invoke() on MethodInvoker [SPR-315]","**[Mike Rudolph](https://jira.spring.io/secure/ViewProfile.jspa?name=fallofrome)** opened **[SPR-315](https://jira.spring.io/browse/SPR-315?redirect=false)** and commented  Would be nice if invoke() checked to see if prepare() was called on MethodInvoker, and if not threw an IllegalAccessException or something instead of a NullPointerException...  - snip --  public Object invoke() throws InvocationTargetException, IllegalAccessException {  if (this.methodObject == null) throw new IllegalAccessException( ""prepare() must be called prior to invoke() on MethodInvoker"" );      // in the static case, target will just be null     Object result = this.methodObject.invoke(this.targetObject, this.arguments);     return (result == null ? VOID : result);  }   ---  **Affects:** 1.1 final","closed","type: enhancement,","spring-projects-issues","2004-09-07T10:59:25Z","2004-09-07T11:11:48Z"
"","5749","Support for ""override address"" configuration [SPR-1042]","**[mike perham](https://jira.spring.io/secure/ViewProfile.jspa?name=mperham)** opened **[SPR-1042](https://jira.spring.io/browse/SPR-1042?redirect=false)** and commented  I would like to see Spring better support the slightly different modes of operation inherent when running on a developer's machine vs testing, staging and production.  To this end, the ability to configure an override email address which overrides any other To, Cc or Bcc would be useful when testing in general.  Imagine working on a webapp where you can create an account for ""anybody@anywhere.com"" but configure Spring to always send email to ""me@myco.com"" so that you would always receive the new user email.  This way you would not be limited to which email addresses you can use when testing and you do not have to worry about a real person (aside from yourself) seeing ANY email output from your development environment.  Currently we use a PropertyPlaceholderConfigurer to import an environment-specific properties file which contains the developer's email in dev, the qa group's email in test and nothing in staging or production.  This property is set on our wrapper around the Spring javamail package so it can control the To address.  It's a little ugly and I'd love to see support move into Spring itself so we can shrink the number of ""hacks"" we need to support.   --- No further details from [SPR-1042](https://jira.spring.io/browse/SPR-1042?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-06-14T07:46:51Z","2012-06-19T09:37:32Z"
"","4920","JavaDoc typo for AbstractController [SPR-188]","**[Mike L.](https://jira.spring.io/secure/ViewProfile.jspa?name=javaexpert)** opened **[SPR-188](https://jira.spring.io/browse/SPR-188?redirect=false)** and commented  there's a typo in Javadoc for org.springframework.web.servlet.mvc.AbstractController.  The property ""requiresSession"" should be ""requireSession"".  This same typo might appear somewhere else too.    ---  **Affects:** 1.0.2","closed","type: bug,","spring-projects-issues","2004-06-25T11:45:07Z","2004-06-25T21:43:24Z"
"","5687","Hibernate 3 typedef support does not add typedefs early enough [SPR-974]","**[Mike Dillon](https://jira.spring.io/secure/ViewProfile.jspa?name=md5)** opened **[SPR-974](https://jira.spring.io/browse/SPR-974?redirect=false)** and commented  The recent addition of Hibernate 3 typedef support in LocalSessionFactoryBean does not add the typedefs to the configuration early enough for Hibernate's binder to actually use the definitions. Also, if there are no parameters defined (in which case the Properties instance remains null), Hibernate's Mappings.addTypeDef throws a NullPointerException.  I am attaching a patch against 1.2final that fixes these two issues.  The first is fixed by moving the processing of typeDefinitions in LocalSessionFactoryBean before the processing of configLocation. This makes the typedefs that Spring adds available to Hibernate at bind time (Hibernate binds the type eagerly while loading the class' definition in the mapping document).  The second is fixed by giving the parameters field in TypeDefinitionBean a default initialization of ""new Properties()"".   ---  **Affects:** 1.2 final  **Attachments:** - [typedefs.diff](https://jira.spring.io/secure/attachment/10731/typedefs.diff) (_2.27 kB_)","closed","type: bug,","spring-projects-issues","2005-05-21T15:25:56Z","2005-05-26T18:12:50Z"
"","5700","core.io.ClassPathResource falsely assumes every Thread has a ContextClassLoader [SPR-989]","**[Michiel Pelt](https://jira.spring.io/secure/ViewProfile.jspa?name=michiel)** opened **[SPR-989](https://jira.spring.io/browse/SPR-989?redirect=false)** and commented  The problem occurs on a standalone Swing application. Instead of a properly translated database exception I get a NullPointerException. The exception is thrown in core.io.ClassPathResource at line 144: cl is null. This happens because the Thread does not have a ContextClassLoader, so Thread.getContextClassLoader() returns null ..   ---  **Affects:** 1.2 final","closed","in: core,","spring-projects-issues","2005-05-27T00:01:51Z","2005-06-01T07:22:07Z"
"","5632","ConcurrentModificationException in HibernateTransactionManager.doGetTransaction [SPR-907]","**[Michal Jastak](https://jira.spring.io/secure/ViewProfile.jspa?name=warlock)** opened **[SPR-907](https://jira.spring.io/browse/SPR-907?redirect=false)** and commented  I'm getting java.util.ConcurrentModificationException in HibernateTransactionManager.doGetTransaction method, see below:  java.util.ConcurrentModificationException at java.util.HashMap$HashIterator.nextEntry(HashMap.java:782) at java.util.HashMap$EntryIterator.next(HashMap.java:824) at java.util.AbstractMap.toString(AbstractMap.java:586) at java.lang.String.valueOf(String.java:2131) at java.lang.StringBuffer.append(StringBuffer.java:370) at org.hibernate.engine.PersistenceContext.toString(PersistenceContext.java:976) at java.lang.String.valueOf(String.java:2131) at java.lang.StringBuffer.append(StringBuffer.java:370) at org.hibernate.impl.SessionImpl.toString(SessionImpl.java:1427) at java.lang.String.valueOf(String.java:2131) at java.lang.StringBuffer.append(StringBuffer.java:370) at org.springframework.orm.hibernate3.HibernateTransactionManager.doGetTransaction(HibernateTransactionManager.java:359) at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:199) at org.springframework.transaction.interceptor.TransactionAspectSupport.createTransactionIfNecessary(TransactionAspectSupport.java:217) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:50) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:144) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:174) at $Proxy5.loadBoardAssociation(Unknown Source)   ---  **Affects:** 1.2 RC2  1 votes, 4 watchers","closed","type: bug,","spring-projects-issues","2005-04-26T18:26:53Z","2005-06-05T03:39:02Z"
"","5441","ClassUtils.forName should trim whitespace [SPR-713]","**[Michael Schuerig](https://jira.spring.io/secure/ViewProfile.jspa?name=mschuerig)** opened **[SPR-713](https://jira.spring.io/browse/SPR-713?redirect=false)** and commented  After automatically reformatting some of my application context XML files, I was bitten by ClassNotFoundExceptions afterward. The cause was that the XML had come to look like this  \ \ some.package.MyClass \ \  Now, when the surrounding whitespace is ignored, the class does indeed exists; but with the whitespace included, there is no such class, of course.  I think either org.springframework.util.ClassUtils#forName() or org.springframework.beans.propertyeditors.ClassEditor should be more lenient and trim surrounding whitespace. As I can't think of any case where such whitespace is significant I think the former, more general change is appropriate.  Michael   ---  **Affects:** 1.1.5","closed","type: enhancement,","spring-projects-issues","2005-02-14T05:37:39Z","2005-02-14T05:56:33Z"
"","5332","AbstractFactoryBean#afterPropertiesSet(): only create an instance for singletons [SPR-604]","**[Michael Schuerig](https://jira.spring.io/secure/ViewProfile.jspa?name=mschuerig)** opened **[SPR-604](https://jira.spring.io/browse/SPR-604?redirect=false)** and commented  Currently, AbstractFactoryBean creates a singletonInstance even when it is going to create a fresh instance for each call to getObject().  Thus, instead of  public final void afterPropertiesSet() throws Exception { if (singletonInstance == null) { this.singletonInstance = createInstance(); } }  it should be  public final void afterPropertiesSet() throws Exception { if (singleton && singletonInstance == null) { this.singletonInstance = createInstance(); } }  Michael   --- No further details from [SPR-604](https://jira.spring.io/browse/SPR-604?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-01-10T07:51:39Z","2005-01-10T08:02:42Z"
"","5066","URLEditor: resolve relative URLs using WebApplicationContext [SPR-336]","**[Michael Schuerig](https://jira.spring.io/secure/ViewProfile.jspa?name=mschuerig)** opened **[SPR-336](https://jira.spring.io/browse/SPR-336?redirect=false)** and commented  Here is a slightly enhanced version of the original URLEditor that uses a WebApplicationContext, if available, to resolve relative URLs.  Michael  package org.springframework.beans.propertyeditors;  import java.beans.PropertyEditorSupport; import java.io.IOException; import java.net.MalformedURLException; import java.net.URL;  import org.springframework.context.ApplicationContext; import org.springframework.context.ApplicationContextAware; import org.springframework.core.io.Resource; import org.springframework.web.context.WebApplicationContext;  public class URLEditor extends PropertyEditorSupport implements ApplicationContextAware {      WebApplicationContext _ctx;            public void setApplicationContext(ApplicationContext ctx) {         if (ctx instanceof WebApplicationContext)         _ctx = (WebApplicationContext)ctx;      }           public void setAsText(String text) {         try {             if (_ctx != null) {                 Resource res = _ctx.getResource(text);                 setValue(res.getURL());             } else {                 setValue(new URL(text));             }         } catch (MalformedURLException ex) {             throw new IllegalArgumentException(""Malformed URL: "" ex.getMessage());         } catch (IOException ex) {             throw new IllegalArgumentException(e);         }     }           public String getAsText() {         return ((URL) getValue()).toExternalForm();     }  }   ---  **Affects:** 1.1 final","closed","type: enhancement,","spring-projects-issues","2004-09-18T18:38:54Z","2008-06-10T23:57:01Z"
"","5733","PetClinig build.bat not space in path friendly. [SPR-1025]","**[Michael Rimov](https://jira.spring.io/secure/ViewProfile.jspa?name=rimovm)** opened **[SPR-1025](https://jira.spring.io/browse/SPR-1025?redirect=false)** and commented  By default Java installs into ""program files"", which gives the batch file headaches.  A fix seems to be to wrap it all in quotes:  ""%JAVA_HOME%/bin/java"" -cp ""../../lib/ant/ant.jar"";""../../lib/ant/ant-launcher.jar"";""../../lib/ant/ant-junit.jar"";""../../lib/junit/junit.jar"";""%JAVA_HOME%/lib/tools.jar"" org.apache.tools.ant.Main %1  HTH! -Mike   ---  **Affects:** 1.2.1  **Attachments:** - [spr1025-petClinic-build.bat.patch](https://jira.spring.io/secure/attachment/10795/spr1025-petClinic-build.bat.patch) (_1.02 kB_)","closed","type: bug,","spring-projects-issues","2005-06-08T04:09:12Z","2005-07-19T02:31:13Z"
"","4943","Tests fail on ServletContext [SPR-212]","**[Michael Labhard](https://jira.spring.io/secure/ViewProfile.jspa?name=sheepdog)** opened **[SPR-212](https://jira.spring.io/browse/SPR-212?redirect=false)** and commented      [junit] Testcase: testContextLoaderListenerWithDefaultContext took 0.597 sec     [junit]     Caused an ERROR     [junit] Line 3 in XML document from resource [/org/springframework/web/context/WEB-INF/applicationContext.xml] of ServletContext is invalid; nested exception is org.xml.sax.SAXParseException: Relative URI ""org/springframework/web/context/WEB-INF/contextInclude.xml""; can not be resolved without a base URI.     [junit] org.springframework.beans.factory.BeanDefinitionStoreException: Line 3 in XML document from resource [/org/springframework/web/context/WEB-INF/applicationContext.xml] of ServletContext is invalid; nested exception is org.xml.sax.SAXParseException: Relative URI ""org/springframework/web/context/WEB-INF/contextInclude.xml""; can not be resolved without a base URI.     [junit] org.xml.sax.SAXParseException: Relative URI ""org/springframework/web/context/WEB-INF/contextInclude.xml""; can not be resolved without a base URI.     [junit]     at org.apache.crimson.parser.Parser2.fatal(Parser2.java:3339)     [junit]     at org.apache.crimson.parser.Parser2.fatal(Parser2.java:3333)     [junit]     at org.apache.crimson.parser.Parser2.resolveURI(Parser2.java:2915)     [junit]     at org.apache.crimson.parser.Parser2.maybeExternalID(Parser2.java:2887)     [junit]     at org.apache.crimson.parser.Parser2.maybeEntityDecl(Parser2.java:2789)     [junit]     at org.apache.crimson.parser.Parser2.maybeMarkupDecl(Parser2.java:1357)     [junit]     at org.apache.crimson.parser.Parser2.maybeDoctypeDecl(Parser2.java:1291)     [junit]     at org.apache.crimson.parser.Parser2.parseInternal(Parser2.java:623)     [junit]     at org.apache.crimson.parser.Parser2.parse(Parser2.java:333)     [junit]     at org.apache.crimson.parser.XMLReaderImpl.parse(XMLReaderImpl.java:448)     [junit]     at org.apache.crimson.jaxp.DocumentBuilderImpl.parse(DocumentBuilderImpl.java:185)     [junit]     at javax.xml.parsers.DocumentBuilder.parse(DocumentBuilder.java:76)     [junit]     at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:126)     [junit]     at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:125)     [junit]     at org.springframework.context.support.AbstractXmlApplicationContext.refreshBeanFactory(AbstractXmlApplicationContext.java:65)     [junit]     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:226)     [junit]     at org.springframework.web.context.support.XmlWebApplicationContext.refresh(XmlWebApplicationContext.java:131)     [junit]     at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:156)     [junit]     at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:97)     [junit]     at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:48)     [junit]     at org.springframework.web.context.ContextLoaderTestSuite.testContextLoaderListenerWithDefaultContext(ContextLoaderTestSuite.java:56)     [junit]     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     [junit]     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)     [junit]     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)    ---  **Affects:** 1.0.2","closed","status: declined,","spring-projects-issues","2004-07-12T03:00:07Z","2019-01-12T16:30:11Z"
"","5791","information about  under ""shortcut forms"" which should be in main paragraph. [SPR-1086]","**[Michael Kaye](https://jira.spring.io/secure/ViewProfile.jspa?name=delph)** opened **[SPR-1086](https://jira.spring.io/browse/SPR-1086?redirect=false)** and commented  in the reference documentation linked on the site just below http://www.springframework.org/docs/reference/beans.html#beans-basics  \ \ \just some string\ \ \ \ \ \  This example suggests that \ \ \ is the default (long) form.  In actual fact the long form seems to be \ \\yup an entry\\ \just some string\ \  and using key=""..."" is a short form in the same way as key-ref=""..."" is a short form for \\\  The example outside of the ""short form"" paragraph should use the full form, and the example inside the ""short form"" paragraph should use the shortened form (which it does).  Since the shorterned form is used in the example, it's hard to realise that you can set beans as keys whereas using the long form would make it obvious you could replace a \ with a \   --- No further details from [SPR-1086](https://jira.spring.io/browse/SPR-1086?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-06-29T10:52:08Z","2005-07-03T17:41:32Z"
"","5051","Enable setting of bean properties using a database [SPR-321]","**[Michael Harhen](https://jira.spring.io/secure/ViewProfile.jspa?name=mharhen)** opened **[SPR-321](https://jira.spring.io/browse/SPR-321?redirect=false)** and commented  I have written code to enable initialization of a bean using initialization parameters from a database table. I would be happy to submit the code to the Spring project.  In summary, a FactoryBean is specified in an ApplicationContext xml file creates the bean. The bean's properties values are read from a database table. Properties can be reinitialized at any time, using the current values in the database table.  The preliminary code can be downloaded from:  http://members.cox.net/jwebutil/InitParameters.zip  I have posted information on how to use it is available on the Spring forum at: http://forum.springframework.org/viewtopic.php?t=87    ---  **Attachments:** - [InitParameters.zip](https://jira.spring.io/secure/attachment/10212/InitParameters.zip) (_145.76 kB_) - [InitParameters.zip](https://jira.spring.io/secure/attachment/10211/InitParameters.zip) (_129.53 kB_)  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2004-09-08T13:25:30Z","2019-01-11T14:04:36Z"
"","4964","Reflection problem instantiating bean [SPR-233]","**[Michael Brown](https://jira.spring.io/secure/ViewProfile.jspa?name=mikegb92121)** opened **[SPR-233](https://jira.spring.io/browse/SPR-233?redirect=false)** and commented  I'm trying to wire up an application using netty 1.5.0(http://gleamynode.net/dev/projects/netty2) and getting an exception when I put the following bean in my application context xml file:                            1                The exception I get is:  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'eventDispatcher' defined in file [V:\dev\projects\sumup\config\serverContext.xml]: Error setting property values; nested exception is org.springframework.beans.PropertyAccessExceptionsException: PropertyAccessExceptionsException (1 errors); nested propertyAccessExceptions are: [org.springframework.beans.MethodInvocationException: Property 'threadPoolSize' threw exception; nested exception is java.lang.IllegalAccessException: Class org.springframework.beans.BeanWrapperImpl can not access a member of class net.gleamynode.netty2.AbstractThreadPooledEventDispatcher with modifiers ""public synchronized""] PropertyAccessExceptionsException (1 errors) org.springframework.beans.MethodInvocationException: Property 'threadPoolSize' threw exception; nested exception is java.lang.IllegalAccessException: Class org.springframework.beans.BeanWrapperImpl can not access a member of class net.gleamynode.netty2.AbstractThreadPooledEventDispatcher with modifiers ""public synchronized"" java.lang.IllegalAccessException: Class org.springframework.beans.BeanWrapperImpl can not access a member of class net.gleamynode.netty2.AbstractThreadPooledEventDispatcher with modifiers ""public synchronized"" at sun.reflect.Reflection.ensureMemberAccess(Reflection.java:57) at java.lang.reflect.Method.invoke(Method.java:317) at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:718) at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:624) at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:755) at org.springframework.beans.BeanWrapperImpl.setPropertyValues(BeanWrapperImpl.java:782) at org.springframework.beans.BeanWrapperImpl.setPropertyValues(BeanWrapperImpl.java:771) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:763) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:604) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:267) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:204) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:136) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:209) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:279) at org.springframework.context.support.FileSystemXmlApplicationContext.\(FileSystemXmlApplicationContext.java:83) at org.springframework.context.support.FileSystemXmlApplicationContext.\(FileSystemXmlApplicationContext.java:68) at org.springframework.context.support.FileSystemXmlApplicationContext.\(FileSystemXmlApplicationContext.java:59) at com.baesystems.etss.etpg.listener.Server.main(Server.java:27) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:324)  This was working with netty 1.4.0. The only difference that I can see is that the method setThreadPoolSize has been moved to an abstract base class.   ---  **Affects:** 1.1 RC1","closed","type: bug,","spring-projects-issues","2004-07-29T02:47:41Z","2004-07-29T03:35:23Z"
"","5224","CookieLocaleResolver save cookie false with Tomcat 5.5.4 [SPR-495]","**[Matthias Koch](https://jira.spring.io/secure/ViewProfile.jspa?name=gideon)** opened **[SPR-495](https://jira.spring.io/browse/SPR-495?redirect=false)** and commented  When using CookieLocaleResolver with a Application running on Tomcat 5.5.4 the saved cookie is false.  The right format should be: de_DE or en_US   but in Tomcat 5.5.4 the cookie will be saved like this: ""de_DE_"" or ""en_US_""  the quotation mark and the last blank are false.  I have this Problem with my own application and with the countries sample only on Tomcat 5.5.4 (other 5.5 versions was not tested).  mfg Matthias   ---  **Affects:** 1.1.1, 1.1.2","closed","type: bug,","spring-projects-issues","2004-11-27T01:20:39Z","2004-12-07T05:10:31Z"
"","5647","make ServletContextResource properties public ? [SPR-924]","**[matthias ernst](https://jira.spring.io/secure/ViewProfile.jspa?name=mernst)** opened **[SPR-924](https://jira.spring.io/browse/SPR-924?redirect=false)** and commented  I have a case where I receive a ServletContextResource and I'd like to get a request dispatcher for it. However, SCR's #getServletContext and #getPath are not public.  Is there a specific reason for that? I see the same for other resource types. Do you specifically not want me to use these classes?  Thanks Matthias   ---  **Affects:** 1.2 RC2","closed","type: enhancement,","spring-projects-issues","2005-05-05T22:31:39Z","2005-05-05T22:43:00Z"
"","5644","URLBasedViewResolver should use InitializingBean lifecycle interface [SPR-921]","**[matthias ernst](https://jira.spring.io/secure/ViewProfile.jspa?name=mernst)** opened **[SPR-921](https://jira.spring.io/browse/SPR-921?redirect=false)** and commented  URLBasedViewResolver instantiates View implementations via BeanUtils.instantiate, sets a few properties and caches the result.  Template technologies typically require to parse the template and save the parsed representation. The best time to do that is at instantiation time, after the properties have been set.  Spring offers a lifecycle interface for this purpose: InitializingBean#afterPropertiesSet. URLBasedViewResolver should honor that to be consistent.  VelocityView uses ApplicationObjectSupport#initApplicationContext for this purpose. I don't quite see the purpose of having a different mechanism here.   ---  **Affects:** 1.2 RC2","closed","type: enhancement,","spring-projects-issues","2005-05-04T23:37:09Z","2005-05-13T00:26:53Z"
"","5641","ModelAndView constructors have it backwards [SPR-918]","**[matthias ernst](https://jira.spring.io/secure/ViewProfile.jspa?name=mernst)** opened **[SPR-918](https://jira.spring.io/browse/SPR-918?redirect=false)** and commented  I just stumbled over a minor inconsistency: while the class is named Model_and_View, its constructors take _View_and_Model_.  To be consistent, you could deprecate and add the following replacements:  public ModelAndView(View, Map) => (Map, View) public ModelAndView(String, Map) => (Map, String) public ModelAndView(View, String, Object) => (String, Object, View) public ModelAndView(String, String, Object) => (String, Object, String)  Cheers Matthias   ---  **Affects:** 1.2 RC2","closed","type: enhancement,","spring-projects-issues","2005-05-04T22:57:16Z","2005-05-12T06:51:41Z"
"","5631","AutowireCapableBeanFactory should be able to initialize existing bean completely [SPR-906]","**[matthias ernst](https://jira.spring.io/secure/ViewProfile.jspa?name=mernst)** opened **[SPR-906](https://jira.spring.io/browse/SPR-906?redirect=false)** and commented  AutowireCapableBeanFactory already sports a number of methods that allow to apply bean factory processing to an existing bean:  #autowireBeanProperties #applyBeanPropertyValues #applyBeanPostProcessorsBeforeInitialization #applyBeanPostProcessorsAfterInitialization  This list is not quite enough, however, to apply the same steps the factory takes on #getBean(name): I don't know which autowire-mode is specified for that bean and #invokeInitMethods is not public.  What I have is an instance of a spring-managed bean. Now I want to initialize an instance of a dynamically generated subclass that bean's class and have it initialized exactly the same way as the original instance - basically a ""clone-but-use-subclass"".  I would propose pulling AbstractAutowireCapableBeanFactory:323-344 (the block ""// Initialize the bean instance"" into an own method and make it accessible through the AutowireCapableBeanFactory interface:  public Object initializeExistingBean(Object existingBean, String beanName) { RootBeanDefinition bd = getMergedBeanDefinition(beanName, true); BeanWrapper beanWrapper = createBeanWrapper(existingBean);      try {       return initializeExistingBean(existingBean, beanName, bd, beanWrapper);     } catch (Throwable throwable) {       throw new BeanCreationException(     	      bd.getResourceDescription(), beanName, ""Initialization of bean failed"", throwable);     }  }  protected Object initializeExistingBean(Object bean, String beanName, RootBeanDefinition mergedBeanDefinition, BeanWrapper instanceWrapper) throws Throwable { populateBean(beanName, mergedBeanDefinition, instanceWrapper);      if (bean instanceof BeanNameAware) {         if (logger.isDebugEnabled()) {     	    logger.debug(""Invoking setBeanName on BeanNameAware bean '"" + beanName + ""'"");         }         ((BeanNameAware) bean).setBeanName(beanName);     }          if (bean instanceof BeanFactoryAware) {         if (logger.isDebugEnabled()) {     	    logger.debug(""Invoking setBeanFactory on BeanFactoryAware bean '"" + beanName + ""'"");         }         ((BeanFactoryAware) bean).setBeanFactory(this);     }          bean = applyBeanPostProcessorsBeforeInitialization(bean, beanName, mergedBeanDefinition);     invokeInitMethods(beanName, bean, mergedBeanDefinition);     bean = applyBeanPostProcessorsAfterInitialization(bean, beanName, mergedBeanDefinition);     return bean;  }      protected Object createBean(     		String beanName, RootBeanDefinition mergedBeanDefinition, Object[] args, boolean allowEagerCaching)     		throws BeansException {          	if (logger.isDebugEnabled()) {     		logger.debug(""Creating instance of bean '"" + beanName +     				""' with merged definition ["" + mergedBeanDefinition + ""]"");     	}          	if (mergedBeanDefinition.getDependsOn() != null) {     		for (int i = 0; i < mergedBeanDefinition.getDependsOn().length; i++) {     			// Guarantee initialization of beans that the current one depends on.     			getBean(mergedBeanDefinition.getDependsOn()[i]);     		}     	}          	BeanWrapper instanceWrapper = null;     	Object bean = null;     	Object originalBean = null;     	String errorMessage = null;     	boolean eagerlyCached = false;          	try {     		// Instantiate the bean.     		errorMessage = ""Instantiation of bean failed"";          		if (mergedBeanDefinition.getFactoryMethodName() != null)  {     			instanceWrapper = instantiateUsingFactoryMethod(beanName, mergedBeanDefinition, args);     		}     		else if (mergedBeanDefinition.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR ||     				mergedBeanDefinition.hasConstructorArgumentValues() )  {     			instanceWrapper = autowireConstructor(beanName, mergedBeanDefinition);     		}     		else {     			// No special handling: simply use no-arg constructor.     			Object beanInstance = this.instantiationStrategy.instantiate(mergedBeanDefinition, beanName, this);     			instanceWrapper = createBeanWrapper(beanInstance);     			initBeanWrapper(instanceWrapper);     		}     		bean = instanceWrapper.getWrappedInstance();          		// Eagerly cache singletons to be able to resolve circular references     		// even when triggered by lifecycle interfaces like BeanFactoryAware.     		if (allowEagerCaching && mergedBeanDefinition.isSingleton()) {     			addSingleton(beanName, bean);     			eagerlyCached = true;     		}          	  // Initialize the bean instance.     	  originalBean = bean;     	  errorMessage = ""Initialization of bean failed"";          	  bean = initializeExistingBean(bean, beanName, mergedBeanDefinition, instanceWrapper);          	}     	catch (BeanCreationException ex) {     		if (eagerlyCached) {     			removeSingleton(beanName);     		}     		throw ex;     	}     	catch (Throwable ex) {     		if (eagerlyCached) {     			removeSingleton(beanName);     		}     		throw new BeanCreationException(     				mergedBeanDefinition.getResourceDescription(), beanName, errorMessage, ex);     	}          	// Register bean as disposable, and also as dependent on specified ""dependsOn"" beans.     	registerDisposableBeanIfNecessary(beanName, originalBean, mergedBeanDefinition);          	return bean;     }    ---  **Affects:** 1.1.5  **Attachments:** - [AbstractAutowireCapableBeanFactory.java](https://jira.spring.io/secure/attachment/10682/AbstractAutowireCapableBeanFactory.java) (_46.96 kB_) - [AutowireCapableBeanFactory.java](https://jira.spring.io/secure/attachment/10683/AutowireCapableBeanFactory.java) (_6.40 kB_)","closed","type: enhancement,","spring-projects-issues","2005-04-25T20:21:17Z","2012-06-19T03:54:24Z"
"","5473","Enable HandlerInterceptor to interrupt request in postHandle [SPR-745]","**[matthias ernst](https://jira.spring.io/secure/ViewProfile.jspa?name=mernst)** opened **[SPR-745](https://jira.spring.io/browse/SPR-745?redirect=false)** and commented  A Controller can declare ""Don't render, I've handled that myself"" by returning null from its handleRequest method. It would be nice if a HandlerInterceptor could do the same from postHandle. This would require a change in the result type from void to ModelAndView.  We're trying to hinder a controller from rendering a certain result and would like to redirect somewhere else instead. We could modify the ModelAndView, but we cannot set it to null.  Workaround: create a plugin interface for the controller itself.    ---  **Affects:** 1.1.5","closed","type: enhancement,","spring-projects-issues","2005-02-27T23:58:59Z","2005-02-28T03:25:12Z"
"","5452","Small DispatcherServlet refactoring [SPR-724]","**[matthias ernst](https://jira.spring.io/secure/ViewProfile.jspa?name=mernst)** opened **[SPR-724](https://jira.spring.io/browse/SPR-724?redirect=false)** and commented  Hi, I'm trying to extend the ViewResolver mechanism. Unfortunately the DispatcherServlet is a litte hard to extend since most interesting stuff is in private methods.  I would need to extract a protected method #resolveView from within #render. I'll attach a diff against the current CVS. Please consider.  Thanks Matthias    ---  **Affects:** 1.1.2  **Attachments:** - [diff.txt](https://jira.spring.io/secure/attachment/10524/diff.txt) (_1.87 kB_)","closed","type: enhancement,","spring-projects-issues","2005-02-18T01:45:30Z","2005-02-22T03:15:08Z"
"","5128","Reference Documentation on method injection misguiding [SPR-398]","**[matthias ernst](https://jira.spring.io/secure/ViewProfile.jspa?name=mernst)** opened **[SPR-398](https://jira.spring.io/browse/SPR-398?redirect=false)** and commented  Hi, I hope this is the appropriate place to file documentation glitches.  The Spring Reference Guide states:  ""Lookup method injection refers to the ability of the container to override abstract or concrete methods on managed beans in the container, to return the result of looking up another named bean in the container. The lookup will typically be of a non-singleton bean as per the scenario described above (although it can also be a singleton). Spring implements this by performing bytecode modification on the client class, using the CGLIB library.""  ""override"" in combination with ""bytecode modification"" leads to the impression that the class will somehow have its method replaced --- that makes it appear even scarier for the unexperienced :-)  I propose: ""Spring implements this through a dynamically generated subclass overriding the method, using bytecode generation via the CGLIB library"".  Best Matthias   --- No further details from [SPR-398](https://jira.spring.io/browse/SPR-398?redirect=false)","closed","type: enhancement,","spring-projects-issues","2004-10-15T18:27:15Z","2004-10-19T01:24:34Z"
"","5109","Simplify typical xml setup syntax [SPR-379]","**[matthias ernst](https://jira.spring.io/secure/ViewProfile.jspa?name=mernst)** opened **[SPR-379](https://jira.spring.io/browse/SPR-379?redirect=false)** and commented  Hi,  [this is pretty basic and might already have been beaten to death but I couldn't find a trace of that]. While being orthogonal, Springs DTD often makes context definitions just a little verbose. I would propose adding two optional attributes to the property element:  \ \ \ \  and maybe  \ \  That would make things just a little easier:  \ \ \ \ Thanks Matthias   ---  **Affects:** 1.1 final  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2004-10-07T00:30:25Z","2005-03-22T21:43:07Z"
"","5073","ref's to beans' properties [SPR-343]","**[matthias ernst](https://jira.spring.io/secure/ViewProfile.jspa?name=mernst)** opened **[SPR-343](https://jira.spring.io/browse/SPR-343?redirect=false)** and commented  Every once in a while, I define a bean A in my context which exposes a property P. I want to define a second bean B that I'd like to wire up with the value of A.P. I would like to express this in spring:  \ \\\ \  What I do instead now, is to define P itself through a factory bean:  \ \\\ \ \ \\\ \  How about a \ or something similar ?  BTW: if P were a dependency of A, I would create P as the toplevel and inject it into A and B but this is not possible here.  Thanks Matthias    ---  **Affects:** 1.1 final","closed","type: enhancement,","spring-projects-issues","2004-09-22T20:02:14Z","2004-10-04T03:14:54Z"
"","5068","debug-logging should always be checked first [SPR-338]","**[matthias ernst](https://jira.spring.io/secure/ViewProfile.jspa?name=mernst)** opened **[SPR-338](https://jira.spring.io/browse/SPR-338?redirect=false)** and commented  Several locations in Spring, including high-traffic ones, log debugging information without checking whether debug logging is turned on. This puts a lot of pressure on the GC and limits throughput.  Examples: DispatcherServlet#doService(445) DispatcherServlet#getHandlerAdapter(608) AbstractView#addStaticAttribute(200)   ---  **Affects:** 1.1 final","closed","type: enhancement,","spring-projects-issues","2004-09-20T04:13:52Z","2004-09-22T19:21:14Z"
"","5054","BeanFactory does not take bean-refs into account for destruction order [SPR-324]","**[matthias ernst](https://jira.spring.io/secure/ViewProfile.jspa?name=mernst)** opened **[SPR-324](https://jira.spring.io/browse/SPR-324?redirect=false)** and commented  Consider two bean definitions as follows:  \ \\\ \ \  Clearly, B depends on A and Spring makes sure that A is initialized when handed to B. However, on destruction, it does not consider this dependency but only explicit 'depends-on'. So, if A and B are DisposableBeans they are destroyed in random order - thus B cannot bet on A being available anymore.  I suggest extending DefaultListableBeanFactory#getDependingBeanNames to include the names of beans that have a \ to the bean in question.   ---  **Affects:** 1.1 RC2","closed","in: core,","spring-projects-issues","2004-09-09T01:33:25Z","2005-02-23T06:04:47Z"
"","5693","Cannot configure CustomizableTraceInterceptor in spring-beans file [SPR-981]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-981](https://jira.spring.io/browse/SPR-981?redirect=false)** and commented  The definition below does not work with the PropertyPlaceholderConfigurer because the PropertyPlaceholderConfigurer attempts to resolve the placeholders itself rather than leaving them to be resolved by the interceptor.  \ \ \ \  The exception message is:  ERROR (DispatcherServlet:initServletBean) - Context initialization failed org.springframework.beans.factory.BeanDefinitionStoreException: Error registering bean with name 'loggingInterceptor' defined in ServletContext resource [/WEB-INF/applicationContext.xml]: Could not resolve placeholder 'targetClassShortName' at org.springframework.beans.factory.config.PropertyPlaceholderConfigurer.processProperties(PropertyPlaceholderConfigurer.java:223) at org.springframework.beans.factory.config.PropertyResourceConfigurer.postProcessBeanFactory(PropertyResourceConfigurer.java:184) at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:366) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:292) at org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.refresh(AbstractRefreshableWebApplicationContext.java:133) at com.spider.scoreboard.framework.springx.ScoreboardApplicationContext.refresh(ScoreboardApplicationContext.java:73) at com.spider.scoreboard.framework.springx.ScoreboardContextLoaderServlet.loadContext(ScoreboardContextLoaderServlet.java:294) at com.spider.scoreboard.framework.springx.ScoreboardContextLoaderServlet.startupOrRestart(ScoreboardContextLoaderServlet.java:129) at com.spider.scoreboard.framework.springx.ScoreboardContextLoaderServlet.init(ScoreboardContextLoaderServlet.java:84) at javax.servlet.GenericServlet.init(GenericServlet.java:211) at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1091) at org.apache.catalina.core.StandardWrapper.load(StandardWrapper.java:925) at org.apache.catalina.core.StandardContext.loadOnStartup(StandardContext.java:3857) at org.apache.catalina.core.StandardContext.start(StandardContext.java:4118) at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:759) at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:739) at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:524) at org.apache.catalina.startup.HostConfig.deployDescriptor(HostConfig.java:589) at org.apache.catalina.startup.HostConfig.deployDescriptors(HostConfig.java:536) at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:471) at org.apache.catalina.startup.HostConfig.start(HostConfig.java:1102) at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:311) at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1020) at org.apache.catalina.core.StandardHost.start(StandardHost.java:718) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1012) at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:442) at org.apache.catalina.core.StandardService.sart(StandardService.java:450) at org.apache.catalina.core.StandardServer.start(StandardServer.java:683) at org.apache.catalina.startup.Catalina.start(Catalina.java:537) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:271) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:409)  I think the CustomizableTraceInterceptor should be modified so that $targetClassShortName is treated the same as ${targetClassShortName}   ---  **Affects:** 1.2 final","closed","in: core,","spring-projects-issues","2005-05-25T02:36:58Z","2005-05-30T19:43:49Z"
"","5639","Inherited inner bean definition requires name [SPR-916]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-916](https://jira.spring.io/browse/SPR-916?redirect=false)** and commented  I tried to create an anonymous inner bean in my Spring configuration that inherited properties from a parent bean, but Spring would not allow it.  Spring insisted that a bean name was required, even though it typically is not required for inner beans.  Here is the configuration that caused the error:  \ \ \ \ \ \ \ \ \  Here is the error:  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'groupPermissionsUpgradeTask' defined in file [c:\eclipse\workspace\Scoreboard 1.5\web\WEB-INF\applicationContext-upgrade.xml]: Initialization of bean failed; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'rowMapResultSetExtractor' is defined: Parent name 'rowMapResultSetExtractor' is equal to bean name 'rowMapResultSetExtractor' - cannot be resolved without an AbstractBeanFactory parent org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'rowMapResultSetExtractor' is defined: Parent name 'rowMapResultSetExtractor' is equal to bean name 'rowMapResultSetExtractor' - cannot be resolved without an AbstractBeanFactory parent at org.springframework.beans.factory.support.AbstractBeanFactory.getMergedBeanDefinition(AbstractBeanFactory.java:672) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBeanDefinition(BeanDefinitionValueResolver.java:146) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:96) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:891) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:707) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:316) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:222) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:146) at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:534) at com.spider.scoreboard.framework.Launcher.launch(Launcher.java:71) at com.spider.scoreboard.framework.Launcher.launch(Launcher.java:47) at com.spider.scoreboard.framework.upgrade.upgrades.GroupPermissionsUpgradeTask.main(GroupPermissionsUpgradeTask.java:83)  The workaround is simple, just give the inner bean a name.  Here is a configuration that works:  \ \ \ \ \ \ \ \ \   ---  **Affects:** 1.2 RC1","closed","in: core,","spring-projects-issues","2005-05-04T06:18:20Z","2005-07-18T06:13:05Z"
"","5616","Dependency checking doesn't work for beans using method injection [SPR-889]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-889](https://jira.spring.io/browse/SPR-889?redirect=false)** and commented  I just tested with Spring 1.2 RC2 and this continues to be an issue as described on the Spring user's list.  Here is the relevant discussion thread:  Here is my bean definition:                      This uses method injection, so the callsbacks property is coming from the CGLIB proxy that is generated for the bean.  By AbstractAutowireCapableBeanFactory.createBean:320, the instanceWrapper has been set to a BeanWrapper that wraps the CGLIB proxy.  Then the bean is populated and its dependencies are checked **using the BeanWrapper**. The BeanWrapper wraps the CGLIB proxy, so the missing callbacks property is detected and an error message is thrown.  Matt  PS, here is the stack trace right before the exception gets thrown  Thread [main] (Suspended) DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).dependencyCheck(String, RootBeanDefinition, BeanWrapper, PropertyValues) line: 855 DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).populateBean(String, RootBeanDefinition, BeanWrapper) line: 713 DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).createBean(String, RootBeanDefinition, Object[], boolean) line: 331 DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).createBean(String, RootBeanDefinition, Object[]) line: 257 DefaultListableBeanFactory(AbstractBeanFactory).getBean(String, Class, Object[]) line: 223 DefaultListableBeanFactory(AbstractBeanFactory).getBean(String) line: 147 ScoreboardApplicationContext(AbstractApplicationContext).getBean(String) line: 531 Launcher.launch(Launchable) line: 56 CalendarIndependentDataModelUpgradeTask.main(String[]) line: 85  ---  **Affects:** 1.2 RC2  **Attachments:** - [stack.txt](https://jira.spring.io/secure/attachment/10667/stack.txt) (_5.33 kB_)  **Issue Links:** - #5611 Unsatisfied dependency error in property 'callbacks' error when using lookup-method injection with dependency check with cglib 2.1 (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2005-04-19T03:45:42Z","2019-01-11T13:05:43Z"
"","5607","Make ConfigurableFileTypeMap the default in JavaMailSenderImpl [SPR-880]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-880](https://jira.spring.io/browse/SPR-880?redirect=false)** and commented  The new ConfigurableFileTypeMap provides Spring users with many more mappings of file extension to mime type.  This immensly useful feature should be made the default in JavaMailSenderImpl.  This is a minor incompatability with Spring 1.1, but I doubt it will cause serious heartache for anyone.  I know we discussed at length whether we should override the default settings mime message settings.  Although we are changing the default behavior of applications that use Spring, we are leaving the behavior of other applications running in the same JVM that depend on the JAF unchanged.  I think this is a perfectly reasonable change to do in Spring 1.2.  Note that a file type map is also specified in MimeMessageHelper.  I'm not sure I understand how these two ""defaults"" work together, but I think that I want the default changed in MimeMessageHelper as well.   ---  **Affects:** 1.2 RC1","closed","type: enhancement,","spring-projects-issues","2005-04-15T00:56:32Z","2005-04-18T00:59:15Z"
"","5606","WARN when beans are ineligible for autoproxying [SPR-879]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-879](https://jira.spring.io/browse/SPR-879?redirect=false)** and commented  Sometimes beans must be created early in the application startup process  and are thus not eligible for autoproxying.  This can lead to bugs that are very hard to debug.  Please add a logging message at WARN level when a bean is created early and thus will not be eligible for autoproxying.   ---  **Affects:** 1.2 RC2","closed","type: enhancement,","spring-projects-issues","2005-04-13T09:23:40Z","2005-05-23T02:51:40Z"
"","5592","Add Attachment abstraction to the Mail package [SPR-866]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-866](https://jira.spring.io/browse/SPR-866?redirect=false)** and commented  The MimeMessagePreparator interface is great if you need to do something fancy with the JavaMail API.  However, the programming model is cumbersome with an email that has attachments or includes HTML.  For a user that's new to Spring, we should only need three solid abstractions: MailMessage, MailSender, and Attachment.  I think the vast majority of users need to avoid MimeMessageHelper and MimeMessagePreparator.  This is similar to how you can easily avoid the PreparedStatementCreator, CallableStatementCallback or even a RowMapper interfaces and instead just use queryForList, queryForObject and queryForMap methods.  Here is what I have in mind:  Attachment attachment1 = new InputStreamSourceAttachment(new ClassPathResource(""path/to/my/resource.txt"")); Attachment[] attachments = new Attachment[] { attachment1 };  MailMessage email = new SimpleMailMessage(); email.setTo(""to_address@nowhere.com""); email.setAttachments(attachments);  MailSender emailSender = new JavaMailSenderImpl(); emailSender.send(email);  Everyone knows the components in an email: to, cc, bcc, subject, body and attachments.  I think we need to add an attachment notion to Spring.  I understand not all mail transport mechanisms support attachments.  Still, intuitively we all know an email has attachments.  If someone tries to send an email with attachments using a tool that doesn't support attachments, we can simply throw an exception.  So, the change I'm proposing is - Add an Attachment[] attachments property to the MailMessage interface. - Add an Attachment[] inlineAttachments property to the JavaMailMessage interface. - Create an Attachment interface (and corresponding basic implementation) as follows:  public interface Attachment { public String getName(); public InputStreamSource getContents(); }  - Implement a InputStreamSourceAttachment class that implements the Attachment interface above  Also, to ease the creation of messages that are either HTML or a mix of text and HTML, I think we should add an html property to the MailMessage interface.  Again, if the underlying mail implementation doesn't support HTML or mixing text and HTML, we throw an exception.   ---  **Affects:** 1.2 RC2  **Attachments:** - [Attachment.java](https://jira.spring.io/secure/attachment/11369/Attachment.java) (_2.07 kB_) - [IAttachment.java](https://jira.spring.io/secure/attachment/11368/IAttachment.java) (_294 bytes_)  2 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2005-04-08T06:09:40Z","2015-09-22T17:34:37Z"
"","5590","Strip CGLIB classname suffixes in ClassUtils.getShortName [SPR-864]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-864](https://jira.spring.io/browse/SPR-864?redirect=false)** and commented  I have a service class proxied by CGLIB that has a full class name of  com.spider.scoreboard.service.impl.ScorecardTreeServiceImpl$$EnhancerByCGLIB$$1a16806e  The ClassUtils.getShortName method returns  ScorecardTreeServiceImpl..EnhancerByCGLIB..1a16806e  I think it would be better if it simply returned  ScorecardTreeServiceImpl  I'd be happy to submit a patch to the method and its test case if you approve of this change.   ---  **Affects:** 1.2 RC1","closed","type: enhancement,","spring-projects-issues","2005-04-07T09:21:22Z","2005-04-07T17:57:23Z"
"","5587","[PATCH] Improved documentation of CustomEditorConfigurer [SPR-861]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-861](https://jira.spring.io/browse/SPR-861?redirect=false)** and commented  The CustomEditorConfigurer allows property editors to be specified for primitive types, but doesn't specify the String representation of the primitive class (e.g. - ""boolean"") that is needed to map a primitive to a PropertyEditor.  The attached patch explicitly mentions the format.   ---  **Attachments:** - [CustomEditorConfigurerPatch.txt](https://jira.spring.io/secure/attachment/10635/CustomEditorConfigurerPatch.txt) (_855 bytes_)","closed","type: enhancement,","spring-projects-issues","2005-04-06T07:56:47Z","2005-04-07T18:31:33Z"
"","5586","[PATCH] Enhancements to TraceInterceptor [SPR-860]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-860](https://jira.spring.io/browse/SPR-860?redirect=false)** and commented  I want to be able to see the arguments to and return values of the methods in my service and DAO objects.  The TraceInterceptor did not support this functionality, so I wrote it and prepared a patch for potential inclusion in Spring.  With no configuration parameters specified, log messages will appear as they did in Spring 1.0.2.  The new enterMessageTemplate and exitMessageTemplate properties allow for customization.  In my application I set my enterMessageTemplate to ""Entering $unqualifiedTargetClassName.$methodName($arguments)"" and my exitMessageTemplate to ""$unqualifiedTargetClassName.$methodName($arguments) returned $returnValue"".  This results in log output such as:  DEBUG (TraceInterceptor:invoke) - Entering OwnerUpdaterServiceImpl.getOwnerMetricsByUser(39,-1,5,database1110394538812,org.apache.catalina.session.StandardSessionFacade@1dbe1c9) DEBUG (TraceInterceptor:invoke) - Entering OwnerUpdaterDAOImpl.getOwnerMetricsByUser(39,-1,5,database1110394538812) DEBUG (JdbcTemplate:query) - Executing SQL query [select mc.metricid, mc.scorecardnodeid, mc.updatetype, mc.datatype, mc.aggregationtype, mc.equation, mc.lastreminded, mc.calendarid, sn.scorecardnodename, sn.scorecardrootnodeid, mc.calendarperiodid, ms.score, mv.actualvalue, sn.weighting, mv.goal, mc.goal as mgoal, mv.base, mc.base as mbase, mv.metricvalueid, s.organizationnodeid, mc.periodalias, mc.startdate, mc.enddate, cal.calendarname from ((((((select m.*, cp1.calendarperiodid, cp1.startdate, cp1.enddate, cp1.periodalias from metrics m, calendarperiods cp1, calendarperiods cp2 where m.calendarid = cp1.calendarid and cp2.calendarperiodid=? and ( (cp1.startdate >= cp2.startdate and cp1.startdate = cp2.startdate and cp1.enddate  cp2.enddate) ) ) mc left outer join metricvalues mv on (mc.metricid = mv.metricid and mc.calendarperiodid = mv.calendarperiodid)) left outer join metricscores ms on (mc.metricid = ms.metricid and mc.calendarperiodid = ms.calendarperiodid)) left join scorecardnodes sn on (mc.scorecardnodeid = sn.scorecardnodeid)) left join scorecards s on (sn.scorecardrootnodeid = s.scorecardrootnodeid)) left join scorecardnodeownerusers sou on (mc.scorecardnodeid = sou.scorecardnodeid)) left join calendars cal on (mc.calendarid = cal.calendarid) where sou.userid = ? order by sn.scorecardnodename] DEBUG (StatementCreatorUtils:setParameterValue) - Setting SQL statement parameter value: columnIndex 1, parameter value [39], valueClass [java.lang.Integer], sqlType unknown DEBUG (StatementCreatorUtils:setParameterValue) - Setting SQL statement parameter value: columnIndex 2, parameter value [-1], valueClass [java.lang.Integer], sqlType unknown DEBUG (TraceInterceptor:invoke) - OwnerUpdaterDAOImpl.getOwnerMetricsByUser(39,-1,5,database1110394538812) returned [] DEBUG (TraceInterceptor:invoke) - OwnerUpdaterServiceImpl.getOwnerMetricsByUser(39,-1,5,database1110394538812,org.apache.catalina.session.StandardSessionFacade@1dbe1c9) returned []  PS - I know service objects shouldn't have HttpSessions passed to them, I just haven't had time to factor that out of the code at my new company yet!  ---  **Affects:** 1.2 RC1  **Attachments:** - [TraceInterceptorPatch.txt](https://jira.spring.io/secure/attachment/10636/TraceInterceptorPatch.txt) (_7.07 kB_)  **Issue Links:** - #5329 TraceInterceptor enhancements (_**""duplicates""**_)  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2005-04-06T07:52:37Z","2019-01-11T13:06:41Z"
"","5585","Add dependency-check=""smart"" [SPR-859]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-859](https://jira.spring.io/browse/SPR-859?redirect=false)** and commented  Many objects I work with have configuration properties that I expose which have sensible defaults which are written into the class.  A good example of this is the AbstractAutoProxyCreator, which sets advisorAdapterRegistry = GlobalAdvisorAdapterRegistry.getInstance().  With dependency-check=""object"", if I don't override this default my application will fail to start up.  However, the property is non-null so to me it's clear that a sensible default has been provided by the class author.  Could we add a dependency-check=""null"", ""objectWithoutDefault"", ""smart"" or something option that checks to make sure non-primitive properties have a value supplied, but does not require that property to be explicitly stated in the application context?  I think wrappers for primitive objects should also be checked.  The way I choose whether to expose a property as a primitive or as a wrapper goes like this: - If the value is required and has a sensible default, use a primitive - If the value is required but has no sensible default, use a wrapper so that the property can have a null value which indicates the class is improperly configured - If the value is optional use a wrapper  I think most Spring classes follow this convention as well, so for the majority of Spring apps I would imagine setting dependency-check=""smart"" would make dependency checking work seamlessly and in a very intuitive way.   ---  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2005-04-06T05:54:07Z","2012-06-19T09:37:37Z"
"","5574","Include stack trace in warnings in MethodInvokingJobDetailFactoryBean [SPR-848]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-848](https://jira.spring.io/browse/SPR-848?redirect=false)** and commented  In MethodInvokingJobDetailFactoryBean$MethodInvokingJob.executeInternal, when error messages are logged they do not include stack trace information.  Please add the exception to the WARNing that goes to the log file.  The reason I'm requesting this is I am using Quartz to schedule email reminders to go out to system users every night.  The emails are failing, and the message written to the log is just ""could not invoke method"", which isn't particularly helpful with diagnosing the problem.   ---  **Affects:** 1.1.5","closed","type: enhancement,","spring-projects-issues","2005-04-04T07:38:50Z","2005-04-04T07:46:03Z"
"","5565","SingleColumnRowMapper does not expose JavaBeans properties [SPR-839]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-839](https://jira.spring.io/browse/SPR-839?redirect=false)** and commented  SingeColumnRowMapper needs a public no-arg constructor and it needs to expose the requiredType member variable as a JavaBeans property.  Use case: I need to use a SingleColumnRowMapper in my implementation of a ResultSetExtractor.  I have all my row mappers and result set extractors configured in my application context.  The SingleColumnRowMapper(Class) constructor is appropriate for programmatic use, but for declaration in an application context I would like to be able to use property injection rather than constructor injection.   --- No further details from [SPR-839](https://jira.spring.io/browse/SPR-839?redirect=false)","closed","type: bug,","spring-projects-issues","2005-03-31T01:05:54Z","2005-04-03T23:59:53Z"
"","5546","Add JdbcTemplate.queryForColumn and JdbcTemplate.queryForRow [SPR-819]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-819](https://jira.spring.io/browse/SPR-819?redirect=false)** and commented  JdbcTemplate.queryForList returns a List of Maps.  It would be nice if there was a queryForColumn method that returned a List of plain old objects, like a List of Integer IDs.  It would also be nice to be able to retrieve a single Map if a result set is only expected to have a single row.  For consistency's sake, queryForColumn should throw InvalidResultSizeDataAccessException if there are too many columns (there can't be too few, because query would have InvalidGrammar) and queryForRow should throw InvalidResultSizeDataAccessException if there is not exactly one row.   ---  **Affects:** 1.1.5","closed","type: enhancement,","spring-projects-issues","2005-03-24T09:49:43Z","2005-03-28T05:13:15Z"
"","5544","Make JdbcTemplate.queryForList return a List of CaseInsensitiveMaps [SPR-817]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-817](https://jira.spring.io/browse/SPR-817?redirect=false)** and commented  The JdbcTemplate.queryForList method behaves slightly differently on different databases because Oracle returns column names as all caps and other databases keep column names as entered (MySQL on non-Windows machines, I believe) or as all lowercase (MySQL on Windows, I believe).  To make these databases behave more similarly, I think that instead of returning a List of HashMaps, a List of CaseInsenstiveMaps should be returned.  This would (1) make the queryForList method behave consistently on different databases and (2) allow for column names to be entered in any case, which is what makes sense in the first place since SQL is not supposed to be case sensitive.  Commons Collections 3.0 includes a CaseInsensitiveMap implementation.   ---  **Affects:** 1.1.5","closed","type: enhancement,","spring-projects-issues","2005-03-24T06:22:03Z","2005-03-28T05:51:31Z"
"","5537","RequestContextAwareTag: improve logged error messages [SPR-810]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-810](https://jira.spring.io/browse/SPR-810?redirect=false)** and commented  I just tried to use the  tag with a key that did not exist and a JspException was thrown and an error written to the log file (as I would expect).  However, the error message written to the log file was a bit cryptic:  ERROR (MessageTag:doStartTag) - Exception in RequestContextAwareTag javax.servlet.jsp.JspTagException: No message found under code 'nav.about' for locale 'en_US'. at org.springframework.web.servlet.tags.MessageTag.doStartTagInternal(MessageTag.java:183) at org.springframework.web.servlet.tags.RequestContextAwareTag.doStartTag(RequestContextAwareTag.java:70) at org.apache.jsp.administration_nav_jsp._jspx_meth_spring_message_14(administration_nav_jsp.java:1153) at org.apache.jsp.administration_nav_jsp._jspService(administration_nav_jsp.java:469) at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:92) at javax.servlet.http.HttpServlet.service(HttpServlet.java:853) at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:162) at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:240) at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:187) at javax.servlet.http.HttpServlet.service(HttpServlet.java:853) at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:627) at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:382) at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:306) at org.apache.struts.action.RequestProcessor.doForward(RequestProcessor.java:1069) at org.apache.struts.action.RequestProcessor.processForwardConfig(RequestProcessor.java:455) at com.spider.scoreboard.framework.strutsx.ScoreboardRequestProcessor.processForwardConfig(ScoreboardRequestProcessor.java:413) at org.apache.struts.action.RequestProcessor.process(RequestProcessor.java:279) at org.apache.struts.action.ActionServlet.process(ActionServlet.java:1482) at org.apache.struts.action.ActionServlet.doGet(ActionServlet.java:507) at javax.servlet.http.HttpServlet.service(HttpServlet.java:740) at javax.servlet.http.HttpServlet.service(HttpServlet.java:853) at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:627) at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:382) at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:306) at org.apache.struts.action.RequestProcessor.doForward(RequestProcessor.java:1069) at org.apache.struts.action.RequestProcessor.processForwardConfig(RequestProcessor.java:455) at com.spider.scoreboard.framework.strutsx.ScoreboardRequestProcessor.processForwardConfig(ScoreboardRequestProcessor.java:413) at org.apache.struts.action.RequestProcessor.process(RequestProcessor.java:279) at org.apache.struts.action.ActionServlet.process(ActionServlet.java:1482) at org.apache.struts.action.ActionServlet.doGet(ActionServlet.java:507) at javax.servlet.http.HttpServlet.service(HttpServlet.java:740) at javax.servlet.http.HttpServlet.service(HttpServlet.java:853) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:200) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:146) at com.spider.scoreboard.framework.gzipfilter.CompressionFilter.doFilter(CompressionFilter.java:152) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:166) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:146) at net.sf.morph.web.MorphFilter.doFilter(MorphFilter.java:43) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:166) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:146) at com.spider.scoreboard.framework.springx.ScoreboardOpenSessionInViewFilter.doFilterInternal(ScoreboardOpenSessionInViewFilter.java:81) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:166) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:146) at com.spider.scoreboard.framework.RequestLogFilter.doFilter(RequestLogFilter.java:34) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:166) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:146) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:209) at org.apache.catalina.core.StandardPipeline$StandardPipelineValveContext.invokeNext(StandardPipeline.java:596) at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:433) at org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:948) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:144) at org.apache.catalina.core.StandardPipeline$StandardPipelineValveContext.invokeNext(StandardPipeline.java:596) at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:433) at org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:948) at org.apache.catalina.core.StandardContext.invoke(StandardContext.java:2358) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:133) at org.apache.catalina.core.StandardPipeline$StandardPipelineValveContext.invokeNext(StandardPipeline.java:596) at org.apache.catalina.valves.ErrorDispatcherValve.invoke(ErrorDispatcherValve.java:118) at org.apache.catalina.core.StandardPipeline$StandardPipelineValveContext.invokeNext(StandardPipeline.java:594) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:116) at org.apache.catalina.core.StandardPipeline$StandardPipelineValveContext.invokeNext(StandardPipeline.java:594) at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:433) at org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:948) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:127) at org.apache.catalina.core.StandardPipeline$StandardPipelineValveContext.invokeNext(StandardPipeline.java:596) at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:433) at org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:948) at org.apache.coyote.tomcat4.CoyoteAdapter.service(CoyoteAdapter.java:152) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:799) at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.processConnection(Http11Protocol.java:705) at org.apache.tomcat.util.net.TcpWorkerThread.runIt(PoolTcpEndpoint.java:577) at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:683) at java.lang.Thread.run(Thread.java:534)  First of all, I don't like the message ""Exception in RequestContextAwareTag"".  I think it should be renamed ""Exception in "" + getClass().getName() or something like that, since the error didn't really occur in RequestContextAwareTag at all: it occurred in a subclass.  Second, I think if a subclass of RequestContextAwareTag goes to all the trouble of throwing a JspException (rather than just letting a RuntimeException propagate up the call stack) that the JspException should be simply rethrown: hopefully the class that threw the error surely something more useful to say than simply the name of the class in which the error occurred!  In this case, the error message I would have seen would have been ""No message found under code"" rather than the cryptic ""Exception in ___"" message.   ---  **Affects:** 1.1.5","closed","type: enhancement,","spring-projects-issues","2005-03-22T07:48:19Z","2005-03-22T08:49:24Z"
"","5535","HessianServiceExporter: improve logging of error messages [SPR-808]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-808](https://jira.spring.io/browse/SPR-808?redirect=false)** and commented  Hessian automatically swallows errors and their stack traces, serializes the information, and sends it to the client.  This makes it very difficult to tell whether an error is occuring on the server or on the remote client.  The only solution I can think of to this problem is instead of passing the service specified by the user of the HessianServiceExporter unchanged to Hessian, pass a proxy that intercepts exceptions and logs them.  Do you have any other ideas?  Just to give you an idea of how insane it is to try to debug when Hessian swallows error messages, here is an example that cost me a few hours today:  Exception reported in client applet:  Error editing strategy map - net.sf.morph.transform.TransformationException: Unable to perform graph transformation net.sf.morph.transform.TransformationException: Unable to perform graph transformation at net.sf.morph.transform.transformers.DelegatingTransformer.transformGraph(DelegatingTransformer.java:383) at net.sf.morph.transform.copiers.PropertyNameMatchingCopier.copyImpl(PropertyNameMatchingCopier.java:85) at net.sf.morph.transform.transformers.BaseTransformer.copy(BaseTransformer.java:322) at net.sf.morph.transform.transformers.DelegatingTransformer.convertImpl(DelegatingTransformer.java:175) at net.sf.morph.transform.transformers.BaseTransformer.convert(BaseTransformer.java:225) at net.sf.morph.transform.transformers.BaseTransformer.convert(BaseTransformer.java:237) at com.spider.scoreboard.remote.RMIStrategyMapImpl.getPerformanceChart(RMIStrategyMapImpl.java:99) at com.spider.scoreboard.remote.RMIStrategyMapImpl$$FastClassByCGLIB$$95e564a5.invoke(\) at net.sf.cglib.proxy.MethodProxy.invoke(MethodProxy.java:149) at org.springframework.aop.framework.Cglib2AopProxy$CglibMethodInvocation.invokeJoinpoint(Cglib2AopProxy.java:661) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:122) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:56) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:144) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:56) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:144) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:56) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:144) at org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor.intercept(Cglib2AopProxy.java:606) at com.spider.scoreboard.remote.RMIStrategyMapImpl$$EnhancerByCGLIB$$f90bf109.getPerformanceChart(\) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:324) at com.caucho.hessian.server.HessianSkeleton.invoke(HessianSkeleton.java:141) at org.springframework.remoting.caucho.HessianServiceExporter.handleRequest(HessianServiceExporter.java:87) at com.spider.scoreboard.framework.ScoreboardServiceExporter.handleRequest(ScoreboardServiceExporter.java:18) at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:44) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:675) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:623) at org.springframework.web.servlet.FrameworkServlet.serviceWrapper(FrameworkServlet.java:384) at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:353) at javax.servlet.http.HttpServlet.service(HttpServlet.java:709) at javax.servlet.http.HttpServlet.service(HttpServlet.java:802) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:237) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:157) at com.spider.scoreboard.framework.springx.ScoreboardOpenSessionInViewFilter.doFilterInternal(ScoreboardOpenSessionInViewFilter.java:67) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:186) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:157) at net.sf.morph.web.MorphFilter.doFilter(MorphFilter.java:43) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:186) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:157) at com.spider.scoreboard.framework.RequestLogFilter.doFilter(RequestLogFilter.java:34) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:186) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:157) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:214) at org.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:104) at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:520) at org.apache.catalina.core.StandardContextValve.invokeInternal(StandardContextValve.java:198) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:152) at org.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:104) at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:520) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:137) at org.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:104) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:118) at org.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:102) at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:520) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) at org.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:104) at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:520) at org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:929) at org.apache.coyote.tomcat5.CoyoteAdapter.service(CoyoteAdapter.java:160) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:799) at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.processConnection(Http11Protocol.java:705) at org.apache.tomcat.util.net.TcpWorkerThread.runIt(PoolTcpEndpoint.java:577) at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:683) at java.lang.Thread.run(Thread.java:534) Caused by: net.sf.morph.transform.TransformationException: Unable to perform graph transformation ... 67 more Caused by: net.sf.morph.transform.TransformationException: Unable to perform graph transformation ... 67 more Caused by: net.sf.morph.transform.TransformationException: Unable to perform graph transformation ... 67 more Caused by: net.sf.morph.transform.TransformationException: Unable to perform graph transformation ... 67 more Caused by: net.sf.morph.transform.TransformationException: Unable to perform graph transformation ... 67 more Caused by: net.sf.morph.transform.TransformationException: Unable to perform graph transformation ... 67 more Caused by: net.sf.morph.transform.TransformationException: Unable to perform graph transformation ... 67 more Caused by: net.sf.morph.transform.TransformationException: Unable to perform graph transformation ... 67 more Caused by: net.sf.morph.transform.TransformationException: Unable to perform graph transformation ... 67 more Caused by: net.sf.morph.transform.TransformationException: Unable to perform graph transformation ... 67 more Caused by: net.sf.morph.transform.TransformationException: Unable to perform graph transformation ... 67 more Caused by: net.sf.morph.transform.TransformationException: Unable to perform graph transformation ... 67 more Caused by: net.sf.morph.transform.TransformationException: Unable to perform graph transformation ... 67 more Caused by: net.sf.morph.transform.TransformationException: Unable to perform graph transformation ... 67 more Caused by: net.sf.morph.transform.TransformationException: Unable to perform graph transformation ... 67 more Caused by: net.sf.morph.transform.TransformationException: Unable to perform graph transformation ... 67 more Caused by: net.sf.morph.transform.TransformationException: Unable to perform graph transformation ... 67 more Caused by: net.sf.morph.transform.TransformationException: Unable to perform graph transformationjava.lang.StackOverflowError  Here is the actual exception which happens when the code is run locally and not exported by Hessian:  net.sf.morph.transform.TransformationException: Unable to perform graph transformation at net.sf.morph.transform.transformers.DelegatingTransformer.transformGraph(DelegatingTransformer.java:337) at net.sf.morph.transform.copiers.PropertyNameMatchingCopier.copyImpl(PropertyNameMatchingCopier.java:86) at net.sf.morph.transform.transformers.BaseTransformer.copy(BaseTransformer.java:345) at net.sf.morph.transform.transformers.DelegatingTransformer.convertImpl(DelegatingTransformer.java:178) at net.sf.morph.transform.transformers.BaseTransformer.convert(BaseTransformer.java:248) at net.sf.morph.transform.transformers.BaseTransformer.convert(BaseTransformer.java:260) at com.spider.scoreboard.remote.RMIStrategyMapImpl.getPerformanceChart(RMIStrategyMapImpl.java:96) at com.spider.scoreboard.remote.RMIStrategyMapImpl$$FastClassByCGLIB$$95e564a5.invoke(\) at net.sf.cglib.proxy.MethodProxy.invoke(MethodProxy.java:149) at org.springframework.aop.framework.Cglib2AopProxy$CglibMethodInvocation.invokeJoinpoint(Cglib2AopProxy.java:661) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:122) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:57) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:144) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:57) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:144) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:57) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:144) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:57) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:144) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:57) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:144) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:57) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:144) at org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor.intercept(Cglib2AopProxy.java:606) at com.spider.scoreboard.remote.RMIStrategyMapImpl$$EnhancerByCGLIB$$72777564.getPerformanceChart(\) at com.spider.scoreboard.ScoreboardCommandlineLauncher.main(ScoreboardCommandlineLauncher.java:63) at com.spider.scoreboard.ScoreboardCommandlineLauncher$$FastClassByCGLIB$$fcbd33cd.invoke(\) at net.sf.cglib.proxy.MethodProxy.invoke(MethodProxy.java:149) at org.springframework.aop.framework.Cglib2AopProxy$CglibMethodInvocation.invokeJoinpoint(Cglib2AopProxy.java:661) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:122) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:57) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:144) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:57) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:144) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:57) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:144) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:57) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:144) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:57) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:144) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:57) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:144) at org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor.intercept(Cglib2AopProxy.java:606) at com.spider.scoreboard.ScoreboardCommandlineLauncher$$EnhancerByCGLIB$$474f134c.main(\) at com.spider.scoreboard.framework.Launcher.launch(Launcher.java:58) at com.spider.scoreboard.ScoreboardCommandlineLauncher.main(ScoreboardCommandlineLauncher.java:67) Caused by: net.sf.morph.transform.TransformationException: Unable to perform graph transformation at net.sf.morph.transform.transformers.DelegatingTransformer.transformGraph(DelegatingTransformer.java:337) at net.sf.morph.transform.copiers.ContainerCopier.put(ContainerCopier.java:141) at net.sf.morph.transform.copiers.ContainerCopier.copyImpl(ContainerCopier.java:194) at net.sf.morph.transform.transformers.BaseTransformer.copy(BaseTransformer.java:345) at net.sf.morph.transform.transformers.DelegatingTransformer.convertImpl(DelegatingTransformer.java:178) at net.sf.morph.transform.transformers.DelegatingTransformer.transformGraph(DelegatingTransformer.java:334) ... 45 more Caused by: net.sf.morph.transform.TransformationException: Error copying source com.spider.scoreboard.hdao.impl.PerformanceChartEdgeHDao@198046 (class com.spider.scoreboard.hdao.impl.PerformanceChartEdgeHDao) to destination com.spider.scoreboard.hdao.impl.PerformanceChartEdgeHDao@1af1915 (class com.spider.scoreboard.hdao.impl.PerformanceChartEdgeHDao) at net.sf.morph.transform.transformers.BaseTransformer.copy(BaseTransformer.java:351) at net.sf.morph.transform.transformers.DelegatingTransformer.convertImpl(DelegatingTransformer.java:178) at net.sf.morph.transform.transformers.DelegatingTransformer.transformGraph(DelegatingTransformer.java:334) ... 50 more Caused by: net.sf.hibernate.LazyInitializationException: Exception initializing proxy: [com.spider.scoreboard.hdao.impl.PerformanceChartNodeHDao#6] at net.sf.hibernate.proxy.LazyInitializer.initializeWrapExceptions(LazyInitializer.java:64) at net.sf.hibernate.proxy.LazyInitializer.getImplementation(LazyInitializer.java:164) at net.sf.hibernate.proxy.CGLIBLazyInitializer.intercept(CGLIBLazyInitializer.java:108) at com.spider.scoreboard.hdao.IPerformanceChartNode$$EnhancerByCGLIB$$d8424119.toString(\) at java.lang.String.valueOf(String.java:2131) at java.lang.StringBuffer.append(StringBuffer.java:370) at net.sf.composite.util.ObjectUtils.getObjectDescription(ObjectUtils.java:37) at net.sf.morph.transform.transformers.DelegatingTransformer.transformGraph(DelegatingTransformer.java:329) at net.sf.morph.transform.copiers.PropertyNameMatchingCopier.copyImpl(PropertyNameMatchingCopier.java:86) at net.sf.morph.transform.transformers.BaseTransformer.copy(BaseTransformer.java:345) ... 52 more Caused by: net.sf.hibernate.ObjectNotFoundException: No row with the given identifier exists: 6, of class: com.spider.scoreboard.hdao.impl.PerformanceChartNodeHDao at net.sf.hibernate.ObjectNotFoundException.throwIfNull(ObjectNotFoundException.java:24) at net.sf.hibernate.impl.SessionImpl.immediateLoad(SessionImpl.java:1946) at net.sf.hibernate.proxy.LazyInitializer.initialize(LazyInitializer.java:53) at net.sf.hibernate.proxy.LazyInitializer.initializeWrapExceptions(LazyInitializer.java:60) ... 61 more  I have no idea how Hessian managed to do a StackOverflow, but as you can see, the two error messages don't seem to have any relation to each other.  Confusing!!!   ---  **Affects:** 1.1.5","closed","type: enhancement,","spring-projects-issues","2005-03-22T07:22:40Z","2005-04-05T02:59:04Z"
"","5528","Add JdbcTemplate.queryForObject methods which accept a RowMapper [SPR-801]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-801](https://jira.spring.io/browse/SPR-801?redirect=false)** and commented  I am converting legacy code to using JdbcTemplate, and I ran across a method that was best refactored into a RowMapper object.  I went ahead and did this, but then I realized I just need to retrieve one of the object, not a whole List of them.  I would like to be able to easily use the same RowMapper to retrieve a List that I can use to retrieve a single object.  To this end, could we add the following methods to JdbcTemplate?  queryForObject(String sql, RowMapper rowMapper) queryForObject(String sql, Object[] args, RowMapper rowMapper)   ---  **Affects:** 1.1.5","closed","type: enhancement,","spring-projects-issues","2005-03-21T02:39:38Z","2005-03-21T08:18:57Z"
"","5515","Request log filter [SPR-788]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-788](https://jira.spring.io/browse/SPR-788?redirect=false)** and commented  Web applications that are built using logging have the potential to create lots of good logging output, but it's often difficult to tell which parts of the log output pertain to which requests.  Setting up a simple filter to log the beginning and end of each request, along with the request's URL, provides a simple yet enormously helpful way to see which log output pertains to which request.  I wrote a simple filter that provides this functionality.  I've included it here for you to look at.  The code can be used directly by the Spring team; the company I work for is a strong supporter of open source technology.   ---  **Affects:** 1.1.5  **Attachments:** - [RequestLogFilter.java](https://jira.spring.io/secure/attachment/10590/RequestLogFilter.java) (_1.16 kB_)  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2005-03-16T00:00:01Z","2012-06-19T03:54:08Z"
"","5514","GZIP compression filter [SPR-787]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-787](https://jira.spring.io/browse/SPR-787?redirect=false)** and commented  GZIP compression filters are one of the best examples of a great application of Filter technologies in the Servlet API.  There are plenty of examples on the web, but they don't seem to have found a home in any open source frameworks.  Since Spring's goal is to make working with J2EE APIs easier, I think Spring would be a perfect home for a GZIP compression filter.  A compression filter is a conceptually simple application of GZIP APIs (streams, compression, Servlet API, etc) yet is surprisingly difficult to implement.  Finding a home at Spring would create a standard implementation of this common feature for all to benefit.  One of the Tomcat 4.0 examples is a GZIP compression filter.  However, the Tomcat team is not interested in clearly not interested in mainting it and making sure it's production-ready across application servers (else, why would they bundle it with their examples instead of giving them a proper package name, etc.).  I propose we adapt the code for Spring.  Please let me know any way in which I can assist in bringing this to fruition.  ---  **Affects:** 1.1.5  **Issue Links:** - #16336 gzip compression in DispatcherServlet  4 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2005-03-15T23:47:02Z","2019-01-11T12:56:30Z"
"","5494","[PATCH] Add logging statements to LazyConnectionDataSourceProxy [SPR-767]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-767](https://jira.spring.io/browse/SPR-767?redirect=false)** and commented  While working with the LazyConnectionDataSourceProxy, I wanted to assure myself that connections to the database were not being created when certain operations were performed.  To enable this, I added some logging statements to LazyConnectionDataSourceProxy.  Attached is a patch in CVS Unified format that adds the logging statements.   ---  **Affects:** 1.2 RC1  **Attachments:** - [LazyConnectionDataSourceProxy.patch](https://jira.spring.io/secure/attachment/10570/LazyConnectionDataSourceProxy.patch) (_1.95 kB_)","closed","type: enhancement,","spring-projects-issues","2005-03-08T02:27:00Z","2005-03-08T04:44:32Z"
"","5477","Extend 'util' namespace to support 'map', 'set' and 'list'. [SPR-749]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-749](https://jira.spring.io/browse/SPR-749?redirect=false)** and commented  There are three small improvements I'd like to see in the XML bean definition format for Spring that would be 100% backward compatible and introduce no new elements or attributes:  1) Allow \ and \ objects to be top-level, not just nested within bean definitions. 2) Allow \ and \ elements to have names so they can be referenced just like other Spring beans 3) Add the parent attribute to \ elements, so that a map with additional mappings can be easily specified  1 & 2 can be easily simulated now with code like this (somewhat cumbersome syntax)  \ \ \ \\muValue\\ \ \ \ 3 would be great because then I could reuse Maps across bean definitions.  For example, in the Morph framework, Map and List properties of Transformers are used to customize the behavior of those Transformers.  A basic set of Maps and Lists meet most needs, but sometimes one particular map entry needs to be overwritten.  It'd be nice if, similar to \ elements having parents that can have their properties overwritten, \ elements could have parents with their keys overwritten.   ---  **Affects:** 1.1.4  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2005-02-28T03:43:01Z","2019-01-11T12:56:47Z"
"","5453","Make OpenSessionInViewFilter more extensible [SPR-725]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-725](https://jira.spring.io/browse/SPR-725?redirect=false)** and commented  The OpenSessionInViewFilter.lookupSessionFactory method allows for custom strategies for determining the SessionFactory that should be open during the request.  However, it does not allow for the strategy to be dependent on the request itself.  For the app I'm working on, I need to examine the request in order to determine which database the user is connecting to.  It would be nice to introduce a new lookupSessionFactory(request) method that simply delegates to the current lookupSessionFactory() method.  This will retain backward compatability and also allow for more sophisticated SessionFactory lookup strategies to be implemented.   ---  **Affects:** 1.1.4","closed","type: enhancement,","spring-projects-issues","2005-02-18T02:09:57Z","2005-02-21T06:05:40Z"
"","5409","LocalSessionFactoryBean violates contract of the FactoryBean interface [SPR-681]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-681](https://jira.spring.io/browse/SPR-681?redirect=false)** and commented  There are actually a number of related issues I'm dealing with, but the biggie that I **know** is a bug is that LocalSessionFactoryBean.getObject() returns null if the afterPropertiesSet method is never called.  This is a violation of the FactoryBean interface, which explicitly states that getObject() should never return null.  Let me go through how I figured this out, because there are actually a couple of issues here.  In my app, I am programmatically registering a singleton Hibernate LocalSessionFactoryBeans in a BeanFactoryPostProcessor using ConfigurableBeanFactory.registerSingleton.  The first problem is, when I do so, the afterPropertiesSet method is not automatically called.  This may be the desired behavior, but if so I feel this should be explicitly documented in the registerSingleton method's JavaDoc.  The second problem is, I get the stack trace below, which isn't exactly an intuitive error message.  The third problem is what I already mentioned, that the getObject() method is returning null when in fact it should not be.  Fixing the third problem should take care of fixing the second problem.  The solution to problem #3 will of course be either to A) have LocalSessionFactoryBean.getObject() throw an exception if afterPropertiesSet is not called or the solution I prefer, B) automatically call afterPropertiesSet if getObject is called and this.sessionFactory == null.  So, to summarize, I recommend 1) the documentation of ConfigurableBeanFactory.registerSingleton be updated to explicitly state that beans registered programmatically in this way do not receive bean lifecycle callbacks, and  2) Change LocalSessionFactoryBean.getObject() to read as follows:     public Object getObject() {    // if afterPropertiesSet has not been called as expected    if (this.sessionFactory == null) {    // call it automatically for the user, rather than throw an    // exception.  if the configuration of the returned sessionFactory    // is deficient for some reason (e.g. the properties haven't been    // all set yet), the user will certainly get an error when they    // attempt to use the sessionFactory, and it will probably be more    // informative than any error we could throw here anyway    if (logger.isWarnEnabled()) {    logger.warn(""The "" + LocalSessionFactoryBean.getClass().getName() +    "".afterPropertiesSet method was not manually called to properly "" +    ""initialize this bean.  The method has been called automatically, "" +    ""but the fact that the afterPropertiesSet method was not called "" +    ""may indicate a problem with the way this bean was accessed"");    }    try {    afterPropertiesSet();    }    catch (Exception e) {    throw new BeanCreationException(""Unable to create Hibernate SessionFactory.  "" +    ""Were all the properties of the "" +    LocalSessionFactoryBean.getClass().getName() +    "" set correctly?"";    }    }    return this.sessionFactory;    }    --- No further details from [SPR-681](https://jira.spring.io/browse/SPR-681?redirect=false)","closed","in: core,","spring-projects-issues","2005-02-03T04:46:12Z","2005-02-27T22:55:09Z"
"","5365","Register additional mime types in mail package [SPR-637]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-637](https://jira.spring.io/browse/SPR-637?redirect=false)** and commented  I recently went on a little odyssey fixing a bug that ended up giving me much more insight into the JavaMail framework than I ever wanted ;)  To make a long story short, I think we should include additional file extension to mime type mappings in Spring.  I think this is in line with Spring's goal of simplifying J2EE APIs, because providing mappings for these simple file types will alleviate reading up on the Java Activation Framework when you just want to send an email :)  Now the whole story:  JavaMail (and Spring... good work!) use the Java Activation Framework to resolve filename extensions to mime types.  The default mime types built into the framework are defined in activation.jar\META-INF\mimetypes.default.  They are rather meager, and don't even include types in widespread use such as PNG and CSS.  Here are the types that are included in the Java Activation Framework version 1.0.2:  text/html		html htm HTML HTM text/plain		txt text TXT TEXT java c c++ pl cc h image/gif		gif GIF image/ief		ief image/jpeg		jpeg jpg jpe JPG image/tiff		tiff tif image/x-xwindowdump	xwd application/postscript	ai eps ps application/rtf		rtf application/x-tex	tex application/x-texinfo	texinfo texi application/x-troff	t tr roff audio/basic		au audio/midi		midi mid audio/x-aifc		aifc audio/x-aiff            aif aiff audio/x-mpeg		mpeg mpg audio/x-wav             wav video/mpeg		mpeg mpg mpe video/quicktime		qt mov video/x-msvideo		avi  Fortunately, there is a simple mechanism to extend the list of file types.  Just drop a mime.types file in your META-INF folder.  (See http://java.sun.com/j2ee/sdk_1.3/techdocs/api/javax/activation/MimetypesFileTypeMap.html for more information).  Attached is such a file, based on the types listed at http://www.utoronto.ca/webdocs/HTMLdocs/Book/Book-3ed/appb/mimetype.html.  I used my discretion to remove some of the types listed, but hopefully the attached mime.types file will work for most use cases.  In terms of packaging this file with Spring, I'm not really sure the best approach.  Here are two thoughts: * Place the file in dist/META-INF * Include the file in spring.jar/META-INF    ---  **Attachments:** - [mime.types](https://jira.spring.io/secure/attachment/10460/mime.types) (_7.11 kB_) - [mime.types](https://jira.spring.io/secure/attachment/10435/mime.types) (_7.60 kB_)","closed","type: enhancement,","spring-projects-issues","2005-01-18T16:34:39Z","2005-04-08T05:54:29Z"
"","5342","AbstractAutoProxyCreator.postProcessAfterInitialization shouldn't call log.info [SPR-614]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-614](https://jira.spring.io/browse/SPR-614?redirect=false)** and commented  AbstractAutoProxyCreator.postProcessAfterInitialization has this logging statement in it:  logger.info( ""Creating implicit proxy for bean '"" +  beanName + ""' with "" + nrOfCommonInterceptors + "" common interceptors and "" + nrOfSpecificInterceptors + "" specific interceptors"");  The method is only called when the context is refreshed, but when an app first starts up, if there are a non-trivial number of beans that require, say, declarative transaction management, logging at INFO becomes quite a nuisance.  Since postProcessAfterInitialization is applied to every bean in the bean factory it's in a loop, and whenever I'm writing out log messages in a loop I like to stick with DEBUG.  Let's say I have 12 services and 12 DAOs that need declarative transaction management.  Do I really want 24 log messages at the INFO level to let me know that?  Just a thought... feel free to ignore me :)   ---  **Affects:** 1.1.3","closed","type: enhancement,","spring-projects-issues","2005-01-12T06:16:34Z","2005-01-12T06:46:36Z"
"","5334","Struts ContextLoaderPlugIn has no easy way to retrieve application context [SPR-606]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-606](https://jira.spring.io/browse/SPR-606?redirect=false)** and commented  There's no easy way to access a context of Struts beans defined using the ContextLoaderPlugIn except from Struts actions.  I'd like to be able to get a reference fo the application context from a Servlet instead.  I can do servletContext.getAttribute but that exposes me to the internals of the ContextLoaderPlugIn.  I can think of a couple different solutions - Provide a non-static getWebApplicationContext() method.  This would allow access to the web application context that was loaded by the current instance of the ContextLoaderPlugIn.  I think this approach would probably be kind of pointless, because now we've just switched the problem to, ""How can I get a reference to the ContextLoaderPlugIn for module X""?  so we haven't really solved anything :)  Perhaps this approach could be combined with a static getPlugInForModule(String module) method. - Provide a static getWebApplicationContext(String module) method.  The disadvantage of this approach is that the method is static, and so it can't be overwritten.  My use case is that I would like to be able to reload the context so that my Struts actions are re-wired after an administrator changes my application's configuration.  PS - In the JavaDoc it says, ""A special usage of this PlugIn is to define Struts Actions themselves as beans, typically wiring them with middle tier components defined in the root context. Such Actions will then be delegated to by proxy definitions in the Struts configuration, using the DelegatingActionProxy class or the DelegatingRequestProcessor."" but I would argue that this should be the preferred way to use the PlugIn :)  Not only does this bring Dependency Injection to Struts, it allows us to do neat things with AOP.  For example, usually we want transactions to span a single request for performance reasons (and because it would be confusing to have them span multiple requests).  Thus, we can feed our Struts actions to the BeanNameAutoProxyCreator or TransactionAutoProxyCreator and have automatic transaction management with no fuss :)   ---  **Affects:** 1.1.3","closed","type: enhancement,","spring-projects-issues","2005-01-10T09:31:15Z","2005-01-30T22:39:20Z"
"","5324","Initialize BeanFactoryPostProcessors as lazily as possible [SPR-596]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-596](https://jira.spring.io/browse/SPR-596?redirect=false)** and commented  I was going to post a question about this on the user list, but after further testing I'm convinced this is a bug and not me being stupid :)  The PropertyPlaceHolderConfigurer is working fine for most of my beans, but is not working for the special ""messageSource"" bean which, as you know, has special meaning in the Spring framework.  Before I get started, a little background: I am using the ReloadableResourceBundleMessageSource which I have subclassed and added a boolean property called ""development"" to.  If the value is set to true, each request to the resource bundle will go to the hard drive.  If set to false, the bundle is cached in memory.  Now that we have some background, let me describe how to reproduce the error.  First, I setup a simple test class called ScoreboardCommandlineLauncher that was configured like this (see attached file for source):  \ \ \${development}\ \ \  \ \ \ \file:c:/eclipse/workspace/scoreboard/web/WEB-INF/ScoreboardDefaults\ \file:c:/eclipse/workspace/scoreboard/web/WEB-INF/ScoreboardImageResources\ \file:c:/eclipse/workspace/scoreboard/web/WEB-INF/ScoreboardMessageResources\ \ \ \ \true\  \        \  I use the launcher to launch the application, and then invoke itself with all of Spring's autowiring, etc.  In the Java source, you will see I just do System.out.println(getDevelopment()); which prints out ""true"" as expected.  Now I remove the hardcoded ""true"" value to use the PropertyPlaceholderConfigurer just like the scoreboardCommandlineLauncher bean so my context looks like this:  \ \ \${development}\ \ \  \ \ \ \file:c:/eclipse/workspace/scoreboard/web/WEB-INF/ScoreboardDefaults\ \file:c:/eclipse/workspace/scoreboard/web/WEB-INF/ScoreboardImageResources\ \file:c:/eclipse/workspace/scoreboard/web/WEB-INF/ScoreboardMessageResources\ \ \ \  \          ${development}       \  Now I get an exception:  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'messageSource' defined in URL [file:c:/eclipse/workspace/Scoreboard/web/WEB-INF/commandlineContext.xml]: Error setting property values; nested exception is org.springframework.beans.PropertyAccessExceptionsException: PropertyAccessExceptionsException (1 errors); nested propertyAccessExceptions are: [org.springframework.beans.TypeMismatchException: Failed to convert property value of type [java.lang.String] to required type [boolean] for property 'development'; nested exception is java.lang.IllegalArgumentException: ${development}] PropertyAccessExceptionsException (1 errors) org.springframework.beans.TypeMismatchException: Failed to convert property value of type [java.lang.String] to required type [boolean] for property 'development'; nested exception is java.lang.IllegalArgumentException: ${development} java.lang.IllegalArgumentException: ${development} at sun.beans.editors.BoolEditor.setAsText(BoolEditor.java:43) at org.springframework.beans.BeanWrapperImpl.doTypeConversionIfNecessary(BeanWrapperImpl.java:874) at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:711) at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:617) at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:758) at org.springframework.beans.BeanWrapperImpl.setPropertyValues(BeanWrapperImpl.java:785) at org.springframework.beans.BeanWrapperImpl.setPropertyValues(BeanWrapperImpl.java:774) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:784) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:601) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:258) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:193) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:240) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:163) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByName(AbstractAutowireCapableBeanFactory.java:621) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:589) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:258) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:193) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:240) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:163) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByName(AbstractAutowireCapableBeanFactory.java:621) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:589) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:258) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:193) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:240) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:163) at org.springframework.beans.factory.support.DefaultListableBeanFactory.addBeanToResultMap(DefaultListableBeanFactory.java:204) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:163) at org.springframework.context.support.AbstractApplicationContext.getBeansOfType(AbstractApplicationContext.java:526) at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:338) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:286) at org.springframework.web.context.support.XmlWebApplicationContext.refresh(XmlWebApplicationContext.java:131) at com.spider.scoreboard.configuration.ScoreboardApplicationContext.refresh(ScoreboardApplicationContext.java:71) at com.spider.scoreboard.framework.Launcher.launch(Launcher.java:25) at com.spider.scoreboard.ScoreboardCommandlineLauncher.main(ScoreboardCommandlineLauncher.java:31)  As you can see, the post processors are trying to be invoked... but as part of that invocation they're instantiating the special messageSource bean, but that depends on the post processors... oh boy.  FYI, below is my definition of the PropertyPlaceholderConfigurer.  The home: prefix is for the location is a special Resource type I defined, but as I demonstrated earlier, the PropertyPlaceholderConfigurer is definitely able to get to that Resource, because I was able to successfully print out ""true"" in my example.  \ \ \ \home:conf/scoreboardconfig.properties\ \ \  \ \ \1\ \ \ To make things more interesting, I'm using autowiring by name in some contexts and not in others, and I have about 3 or 4 contexts.  If you need more info or more of my context definitions let me know.   ---  **Affects:** 1.1.3  **Attachments:** - [ScoreboardCommandlineLauncher.java](https://jira.spring.io/secure/attachment/10420/ScoreboardCommandlineLauncher.java) (_1.21 kB_)","closed","type: enhancement,","spring-projects-issues","2005-01-05T12:40:06Z","2005-04-08T22:12:31Z"
"","5312","MockPageContext.getAttributeNames returning values instead [SPR-584]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-584](https://jira.spring.io/browse/SPR-584?redirect=false)** and commented  I don't know if I'm just tierd and looking at this the wrong way, but I think MockPageContext.getAttributeNames() is broken.  I believe the test code below should print ""test1"" but it prints ""hello"" instead.  MockPageContext context = new MockPageContext(); context.setAttribute(""test1"", ""hello""); Enumeration attributeNames = context.getAttributeNames(); while (attributeNames.hasMoreElements()) { System.out.println(attributeNames.nextElement()); }  The implementation of MockPageContext.getAttributeNames() is      public Enumeration getAttributeNames() {     	return this.attributes.elements();     }  I think it should be      public Enumeration getAttributeNames() {     	return this.attributes.keys();     }    ---  **Affects:** 1.1.3","closed","type: bug,","spring-projects-issues","2004-12-23T11:04:26Z","2004-12-23T22:07:24Z"
"","5308","MockHttpServletRequest.setAttribute throwing NPE [SPR-580]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-580](https://jira.spring.io/browse/SPR-580?redirect=false)** and commented  MockHttpServletRequest.setAttribute(""attribute"", null); throws a NPE but this is not the correct behavior according to the Servlet API:  http://java.sun.com/products/servlet/2.3/javadoc/javax/servlet/ServletRequest.html#setAttribute(java.lang.String,%20java.lang.Object)  I think the problem should be easily fixed by converting the internal representation from using a Hashtable to using a HashMap.  Matt   ---  **Affects:** 1.1.2","closed","type: bug,","spring-projects-issues","2004-12-21T11:46:46Z","2004-12-21T18:50:32Z"
"","5305","Upgrade to JDOM 1.0 [SPR-577]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-577](https://jira.spring.io/browse/SPR-577?redirect=false)** and commented  Would it be possible to update Spring to use JDOM 1.0?  I'm getting java.lang.VerifyErrors because my project is trying to use JDOM 1.0 and Spring is using JDOM beta 9.  Matt   ---  **Affects:** 1.1.3","closed","type: enhancement,","spring-projects-issues","2004-12-20T22:37:11Z","2004-12-22T00:37:01Z"
"","5303","TransactionAutoProxyCreator [SPR-574]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-574](https://jira.spring.io/browse/SPR-574?redirect=false)** and commented  This bug is dependent on SPR 572, and may make sense to introduce at the same time as SPR 573.  The BeanNameAutoProxyCreator is a great way to get setup with Spring's declarative transaction management quickly, but I think we can do even better.  To accomplish this, I envision introducing a new TransactionAutoProxyCreator that extends the BeanNameAutoProxyCreator.  Rather than requiring interceptor names to be specified, the TransactionAutoProxyCreator scans the application context for DataSources, SessionFactories, etc. and automatically create the appropriate transaction interceptor with PROPOGATION_REQUIRED.  Also, the MatchAlwaysTransactionAttributeSource is provided by default, but can be changed using the transactionAttributeSource property of the TransactionAutoProxyCreator.  I envision this being a solution when JTA is not required only, but maybe it could be expanded for use with JTA, I don't know :)  Attached is a (partial) example that works only for DataSources (hence its name, AllDataSourcesTransactionAutProxyCreator).  I would have implemented the TransactionAutoProxyCreator described above instead, but I'm not comfortable that I really understand all the interactions between Spring's various TransactionManagers and would know how to pick the correct ones.  If you do implement this, I can update the user's guide if you'd like.   ---  **Affects:** 1.1.2  **Attachments:** - [AllDataSourcesTransactionAutoProxyCreator.java](https://jira.spring.io/secure/attachment/10391/AllDataSourcesTransactionAutoProxyCreator.java) (_4.70 kB_)","closed","type: enhancement,","spring-projects-issues","2004-12-20T02:12:34Z","2012-06-19T09:37:45Z"
"","5302","Doc: TransactionAwareDataSourceProxy [SPR-573]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-573](https://jira.spring.io/browse/SPR-573?redirect=false)** and commented  Have you considered providing a TransactionalDataSource class that wraps a DataSource so that calling code can simply call the DataSource methods they are used to, rather than migrating to calls on DataSourceUtils?  I set this up for the app I'm working on, and it works quite nicely.  I will attach the (messy!  i didn't write it!) source code for informational purposes.  Here are the main issues I recall for implementing this: 1) There will be two beans in the application context, one being the underlying data source, and one being the transactional data source.  Legacy code should access the transactional data source, while Spring code (e.g. - JdbcTemplate) should access the underlying DataSource directly.  (In attached source the TransactionalDataSource is called ConnectionPool) 2) Connections returned by the TransactionalDataSource will need to be wrapped so that calls to the close() method on the connection can be ignored.  (In attached source, this is done by the ManagedConnection class)  There may be other tricks I had to throw in there to get this working, but I can't recall them off the top of my head.  As always, I'm willing to provide an implementation of this if you would like.  I can also update the user's guide if you'd like.   ---  **Affects:** 1.1.2  **Attachments:** - [pool.zip](https://jira.spring.io/secure/attachment/10390/pool.zip) (_8.73 kB_)","closed","type: enhancement,","spring-projects-issues","2004-12-20T02:01:48Z","2005-07-04T10:54:38Z"
"","5301","Lazy transaction creation [SPR-572]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-572](https://jira.spring.io/browse/SPR-572?redirect=false)** and commented  Currently in the TransactionInterceptor, a transaction is created before proceeding with the method invocation on the proxied object.  That certainly works, but might result in unnecessary communications with transactional resources.  I think it would be better to delay transaction creation to the point where transactional resources are actually enlisted to perform some work.  With this approach, if a proxied object has declarative transaction management applied to it but does not request any information from transactional resources, the performance penalty of connecting to the database and creating a transaction is eliminated.  This would be especially handy in the case of a bunch of beans with declarative transaction management applied via, for example, the BeanNameAutoProxyCreator.  If a method does not actually need transactional services, performance penalties for applying the transaction interceptor will be minimized since no communications will be necessary with the target transactional resource.  In my application this is causing me problems in 2 different ways.  One is a functional concern, and one is a performance concern  FUNCTIONAL CONCERN I am trying to setup my app so that if it fails to communicate with the database, it launches in a diagnostic mode so the sys admin can fix the app's configuration.  The administrator will need to supply their username/password, which is stored outside a DB so that it is available even if there is a problem with the database.  Unfortunately, when the administrator tries to log in, even though I'm not requesting any information from the database, Spring is attempting to create a transaction around my authentication service, and the login is failing.  The workaround is ugly: Make my authentication service no longer auto-proxied and refactor my authentication method into two separate methods: one that does not have transactional resources applied (when it's just the admin logging into the app in diagnostic mode) and a second that does enlist transactional resources (a normal user is logging in, so need to lookup username/password in the DB).  PERFORMANCE CONCERN The app I'm working on allows the user to connect to any of several different databases when he or she logs in.  The database picked at login time is kept throughout the user's session.  All lookups and modifications of transactional data will only be to the one database that the user logs into at the start of the app.  There is no need for JTA in this scenario, since transactions do not need to span multiple transactional resources.  So, to setup declarative transaction mgmt via Spring AOP, I've simply applied transaction interceptors for each database to each business object.  Unfortunately, I now realize that this means if there are 10 databases setup, every time the user issues a request he/she will have to wait for transactions to be created on 10 different databases!  Ouch!  I'm glad I figured this problem out before we went to production :)   ---  **Affects:** 1.1.2","closed","type: enhancement,","spring-projects-issues","2004-12-20T01:21:28Z","2005-01-10T05:02:42Z"
"","5299","Making constructor arguments of BeanCreationException available [SPR-570]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-570](https://jira.spring.io/browse/SPR-570?redirect=false)** and commented  Would it be possible to expose beanName and resourceDescription properties of the BeanCreationException?  This would allow the name of the offending bean to be retrieved without parsing the exceptions message directly :)  It might also be good to consider deprecating or removing the BeanCreationException(msg) and BeanCreationException(msg, ex) methods.  I will submit a patch if you would like   --- No further details from [SPR-570](https://jira.spring.io/browse/SPR-570?redirect=false)","closed","type: enhancement,","spring-projects-issues","2004-12-17T05:57:29Z","2004-12-19T06:37:17Z"
"","5236","Log4jConfigurerBean [SPR-507]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-507](https://jira.spring.io/browse/SPR-507?redirect=false)** and commented  The Log4jConfigurer offers only static methods... how come it's not configurable in an application context? :)  Please see attached example, which does work in my environment (although logging only starts up after the application context is loaded, of course).  Maybe it would be better if the methods were added directly to Log4jConfigurer.  I can submit a patch if you like.   ---  **Affects:** 1.1.2  **Attachments:** - [Log4jConfigurerBean.java](https://jira.spring.io/secure/attachment/10335/Log4jConfigurerBean.java) (_1.22 kB_)  2 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2004-12-01T13:43:20Z","2012-06-19T09:37:39Z"
"","5194","tag does not work without DispatcherServlet [SPR-465]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-465](https://jira.spring.io/browse/SPR-465?redirect=false)** and commented  The  tag does not work when using Struts as the web tier instead of Spring.  Basically, the MessageTag extends the RequestContextAwareTag, which delegates to RequestContextUtils.  RequestContextUtils looks up items stored in the request by the DispatcherServlet.  So, if you're coming from some other servlet (your own, Struts, etc) you are out of luck.  I think the best solution would probably be to move some methods in RequestContextUtils to WebApplicationContext (e.g. - getLocaleResolver, getLocale).  This approach seems reasonable considering the WebApplicationContext interface already implements the ThemeSource interface.  I was going to try to submit a patch but it looks like the needed changes are a little more involved than I initially supposed, and it looks like there are several potential implementation strategies.  ---  **Affects:** 1.1.2  **Issue Links:** - #5350 spring:* tags are not usable outside a dispatcher servlet request (_**""duplicates""**_)","closed","type: bug,","spring-projects-issues","2004-11-15T03:39:42Z","2019-01-11T14:16:11Z"
"","5186","Dependency checking not happening correctly in XmlWebApplicationContext [SPR-457]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-457](https://jira.spring.io/browse/SPR-457?redirect=false)** and commented  Autowiring is not correctly checking dependencies in my application context in Spring 1.1.1.  I have dependency checking by object and autowire by name turned on at the global \ level.  Below are examples of things that work and things that don't.  IMHO, all examples should be equivalent in terms of Spring's behavior.  Basically, emailSenderDelegate is dependent on ScoreboardUtil, and the application context isn't filling in this dependency automatically for me.  \  \                            ${smtp.host}                               ${smtp.port}                               ${smtp.username}                               ${smtp.password}                          \ \  \                            ${smtp.host}                               ${smtp.port}                               ${smtp.username}                               ${smtp.password}                          \ \  \                            ${smtp.host}                               ${smtp.port}                               ${smtp.username}                               ${smtp.password}                                                         \ \  \                                                           ${smtp.host}                               ${smtp.port}                               ${smtp.username}                               ${smtp.password}                          \   ---  **Affects:** 1.1.1","closed","in: core,","spring-projects-issues","2004-11-13T06:13:24Z","2019-01-12T16:41:59Z"
"","5180","NullPointerExceptions in MimeMessageHelper [SPR-451]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-451](https://jira.spring.io/browse/SPR-451?redirect=false)** and commented  MimeMessageHelper.setCc(null) throws a NullPointerException rather than throwing a MappedException simply ignoring the call.  I think it would be best to just ignore the call.  If you agree, I'd be happy to supply a patch.  Of course setTo and setBcc behave the same, and looking at the code it appears that addTo will throw a NPE when in validation mode.  Here's my stack trace...  org.springframework.mail.MailPreparationException: Could not prepare mail: null; nested exception is java.lang.NullPointerException: null java.lang.NullPointerException at org.springframework.mail.javamail.MimeMessageHelper.validateAddresses(MimeMessageHelper.java:243) at org.springframework.mail.javamail.MimeMessageHelper.setCc(MimeMessageHelper.java:323) at com.spider.scoreboard.email.SmtpEmailSender$SmtpMessagePreparator.prepare(SmtpEmailSender.java:59)  Matt   ---  **Affects:** 1.1.1","closed","in: core,","spring-projects-issues","2004-11-10T05:35:07Z","2004-11-12T08:15:56Z"
"","5177","Patch to allow MimeMessageHelper to easily create multipart/alternative message [SPR-448]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-448](https://jira.spring.io/browse/SPR-448?redirect=false)** and commented  The CVS HEAD version of MimeMessageHelper already supports text messages and html messages, but does not easily support multipart/alternative message bodies.  This support would allow for a user to specify both a text and an HTML version of an email message, thus assuring that an email renders correctly in all email clients.  I created a patch to add this functionality using Eclipse.  The patch is in ""Unified"" format, which Eclipse says is the format required by the Apply Patch wizard.  The main addition is a new setText(String text, String html) method that works only for multipart messages (a friendly MessageException is raised telling what went wrong if the message is called on a non-multipart message).  Other changes are just to support that new method and to make sure the documentation in the class is updated.  I hope you adopt this patch!  I wouldn't ever consider sending out an HTML version of an email without a text version.  I don't think modern email clients do that.   ---  **Affects:** 1.1.1  **Attachments:** - [inline.txt](https://jira.spring.io/secure/attachment/10302/inline.txt) (_8.32 kB_) - [noinline.txt](https://jira.spring.io/secure/attachment/10303/noinline.txt) (_1018 bytes_) - [patch.txt](https://jira.spring.io/secure/attachment/10301/patch.txt) (_6.61 kB_)","closed","type: enhancement,","spring-projects-issues","2004-11-05T08:21:11Z","2004-11-08T02:50:43Z"
"","5137","Documentation Fix for ObjectFactoryCreatingFactoryBean [SPR-407]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-407](https://jira.spring.io/browse/SPR-407?redirect=false)** and commented  I think the documentation for ObjectFactoryCreatingFactoryBean is incorrect because for the targetBeanName attribute the documentation supplies an \ instead of a \.  I would expect a \ to be supplies that is the bean's name.  This does seem to be correct in my project.  I will attach a CVS patch in Standard format.  Let me know if Unified format (for Eclipse?) or Context format would be better.   ---  **Affects:** 1.1.1  **Attachments:** - [patch.txt](https://jira.spring.io/secure/attachment/10290/patch.txt) (_514 bytes_)","closed","in: core,","spring-projects-issues","2004-10-18T06:17:34Z","2019-01-12T16:42:07Z"
"","5031","Automatically bind java.util.Date and java.util.Calendar [SPR-301]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-301](https://jira.spring.io/browse/SPR-301?redirect=false)** and commented  It would be nice if when calling methods like JdbcUtils.update(String, Object[]) if java.util.Date and java.util.Calendar were automatically converted to java.sql.Date.  The code that does the actual PreparedStatement.setObject call is in org.springframework.jdbc.core.StatementCreatorUtils.  That class already converts java.util.Date into java.sql.Date if java.sql.Types.Date is specified in methods like JdbcUtils.update(String, Object[], int[]), where the JDBC types are explicitly stated.  This enhancement request is 2-fold: 1) When no JDBC type is specified, automatically convert java.util.Date and java.util.Calendar to java.sql.Date. 2) (I don't feel as strongly about this one) When the JDBC type is specified as java.sql.Types.Date (and maybe other types too), automatically convert java.util.Calendar to the appropriate date type.  Currently, only java.util.Date is supported, but that class is deprecated.    ---  **Affects:** 1.1 RC2","closed","type: enhancement,","spring-projects-issues","2004-08-31T00:51:03Z","2004-08-31T02:46:14Z"
"","5027","Exception when nulls encountered in JdbcTemplate.update(String, Object[]) [SPR-297]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-297](https://jira.spring.io/browse/SPR-297?redirect=false)** and commented  I think there are some issues with nulls when calling JdbcTemplate.update(String, Object[]).  I see some work was already done between 1.0.2 and 1.1 RC2 but I am still running into problems.  Specifically, I think JdbcTemplate.update(String, Object[], int[]) would probably work, but I'm working in framework code that doesn't want to have to figure out the types for itself.  First, a stack trace (including Spring log messages):  DEBUG [main] (JdbcTemplate.java:489) - Executing SQL update [update waiver rec set staffing_ind_cd = ?, waiver_status_nm = ?, start_dt = ?, commenter_dt = ?, staffer_dt = ?, commenter_extension_dt = ? where rec.waiver_id_cd = ?] DEBUG [main] (StatementCreatorUtils.java:78) - Setting SQL statement parameter value; columnIndex=1, parameter value='Y', valueClass=java.lang.String, sqlType=-2147483648 DEBUG [main] (StatementCreatorUtils.java:78) - Setting SQL statement parameter value; columnIndex=2, parameter value='Staffing', valueClass=java.lang.String, sqlType=-2147483648 DEBUG [main] (StatementCreatorUtils.java:78) - Setting SQL statement parameter value; columnIndex=3, parameter value='null', valueClass=null, sqlType=-2147483648 org.springframework.jdbc.UncategorizedSQLException: (executing PreparedStatementCallback [org.springframework.jdbc.core.JdbcTemplate$SimplePreparedStatementCreator@4ec78d]): encountered SQLException [Invalid column type]; nested exception is java.sql.SQLException: Invalid column type at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.translate(SQLStateSQLExceptionTranslator.java:94) at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.translate(SQLErrorCodeSQLExceptionTranslator.java:281) at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:340) at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:491) at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:543) at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:551) at com.bah.krm.util.JdbcTemplateSqlUtils.execute(JdbcTemplateSqlUtils.java:466) at com.bah.krm.ql.sql.impl.ExecutableOperation.execute(ExecutableOperation.java:37) at com.bah.imako.staffing.StaffingService.staff(StaffingService.java:99) at Test.main(Test.java:42) at Test$$FastClassByCGLIB$$27b8b2.invoke(\) at net.sf.cglib.proxy.MethodProxy.invoke(MethodProxy.java:149) at org.springframework.aop.framework.Cglib2AopProxy$MethodInvocationImpl.invokeJoinpoint(Cglib2AopProxy.java:912) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:119) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:56) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:139) at org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor.intercept(Cglib2AopProxy.java:627) at Test$$EnhancerByCGLIB$$18959700.main(\) at Test.main(Test.java:54)  I believe the line of code to fix is org.springframework.core.StatementCreatorUtils.java:89.  This is where Spring is dealing with null values when setting substitutions in a JDBC PreparedStatement.  Here is the line of code with some context around it.  I included what I think the line should be in a comment like this //!!!  public static void setParameterValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName, Object inValue) throws SQLException { if (logger.isDebugEnabled()) { logger.debug(""Setting SQL statement parameter value; columnIndex="" + paramIndex + "", parameter value='"" + inValue + ""', valueClass="" + (inValue != null ? inValue.getClass().getName() : ""null"") + "", sqlType="" + sqlType); }      if (inValue == null) {     	if (typeName != null) {     		ps.setNull(paramIndex, sqlType, typeName);     	}     	else if (sqlType == SqlTypeValue.TYPE_UNKNOWN) {     		//!!! ps.setNull(paramIndex, Types.VARCHAR);     		ps.setObject(paramIndex, inValue);     	}     	else {     		ps.setNull(paramIndex, sqlType);     	}     }  Now the weird thing is that I would expect this to be a cleaner fix:  ps.setNull(paramIndex, Types.NULL); //NULL instead of VARCHAR  However, that doesn't work for me using Oracle.  I don't know if all DBs are like this, but in Oracle null is just null, it doesn't have a type.  So specifying a random type, like VARCHAR is OK even though in my particular example the column I was setting to null was a Date.  I guess this might be a bug in Oracle's JDBC implementation, but what are the chances they'll prepare a fix within the next few years?  I'm not sure if this fix would break things on other DBs or if the change would need to be isolated for Oracle somehow...   ---  **Affects:** 1.1 RC2","closed","status: declined,","spring-projects-issues","2004-08-30T07:25:46Z","2019-01-12T16:42:18Z"
"","5026","java.lang.IllegalStateException: Unknown callback class org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor [SPR-296]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-296](https://jira.spring.io/browse/SPR-296?redirect=false)** and commented  I tried to upgrade from Spring 1.0.2 to Spring 1.1 RC2 and it appears the two releases aren't 100% compatible.  I changed nothing in my application context but now it won't load.  It looks like the problem is with some of the AOP magic that I don't understand, but I should know enough to include the information you need to diagnose the problem.  Let me know if you need more info; I will be checking email.  First, the error:  ERROR [main] (SpringInitializer.java:146) - Unable to load Spring application context java.lang.IllegalStateException: Unknown callback class org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor at net.sf.cglib.proxy.CallbackUtils.getGenerator(CallbackUtils.java:102) at net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:298) at net.sf.cglib.proxy.Enhancer.create(Enhancer.java:246) at org.springframework.aop.framework.Cglib2AopProxy.getProxy(Cglib2AopProxy.java:175) at org.springframework.aop.framework.Cglib2AopProxy.getProxy(Cglib2AopProxy.java:138) at org.springframework.aop.framework.ProxyFactory.getProxy(ProxyFactory.java:66) at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization(AbstractAutoProxyCreator.java:260) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:182) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:285) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:204) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:198) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:135) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:223) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:284) at org.springframework.context.support.FileSystemXmlApplicationContext.\(FileSystemXmlApplicationContext.java:114) at org.springframework.context.support.FileSystemXmlApplicationContext.\(FileSystemXmlApplicationContext.java:96) at com.bah.krm.core.SpringInitializer.initForDb(SpringInitializer.java:140)  Here is where I use AOP (taken straight from the user's manual):  \ \\\ \  \ \\\ \\\ \  \ \ \true\ \ \ \ \matchAllTxInterceptor\ \ \ \ \ \test\ \ \ \  \   ---  **Affects:** 1.1 RC2","closed","in: core,","spring-projects-issues","2004-08-30T05:36:47Z","2019-01-12T16:42:19Z"
"","5852","Make JdbcTemplate automatically treat StringBuffers as Strings [SPR-1150]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-1150](https://jira.spring.io/browse/SPR-1150?redirect=false)** and commented  In StatementCreatorUtils.setParameterValue, there's already code that detects java.util.Date and java.util.Calendar objects and ensures that they are properly set as Timestamps.  Could we also add code that extracts the String data from a StringBuffer and saves that to the DB?  Just a thought.  Matt   ---  **Affects:** 1.2 final","closed","type: enhancement,","spring-projects-issues","2005-07-18T06:07:11Z","2005-07-19T06:36:41Z"
"","5755","SingleColumnRowMapper does not handle CLOBs correctly for jTDS/SQL Server [SPR-1048]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-1048](https://jira.spring.io/browse/SPR-1048?redirect=false)** and commented  In SingleColumnRowMapper.mapRow the following code appears:  ResultSetMetaData rsmd = rs.getMetaData(); int nrOfColumns = rsmd.getColumnCount(); if (nrOfColumns != 1) { throw new IncorrectResultSizeDataAccessException( ""Expected single column but found "" + nrOfColumns, 1, nrOfColumns); } Object result = getColumnValue(rs, 1); if (result != null && this.requiredType != null && !this.requiredType.isInstance(result)) { if (String.class.equals(this.requiredType)) { result = result.toString(); }  ...  result.toString() works in the majority of cases but when reading information from a CLOB using the jTDS driver to connect to SQL Server, the toString method returns something like net.sourceforge.jtds.jdbc.ClobImpl@10aeb17 instead of the contents of the CLOB.   ---  **Affects:** 1.2.1","closed","type: bug,","spring-projects-issues","2005-06-16T06:35:34Z","2005-07-19T22:29:14Z"
"","5748","Hibernate Schema Update not working well on SQL Server [SPR-1041]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-1041](https://jira.spring.io/browse/SPR-1041?redirect=false)** and commented  I'm using LocalSessionFactoryBean.updateDatabaseSchema and it's not working very well on SQL Server.  Basically, if there are errors in the upgrade scripts generated by Hibernate, the update does not go through.  I'm not sure exactly why this is happening but perhaps some log output and a couple fixes to the problem will help illustrate what's going on.  Here is some log output:  DEBUG (LocalSessionFactoryBean:executeSchemaScript) - Executing schema statement: create table usergrouppermissions (usergroupid int not null, permissionid int not null, primary key (usergroupid, permissionid)) DEBUG (LocalSessionFactoryBean:executeSchemaScript) - Executing schema statement: alter table files add constraint FK5CEBA778EB197A2 foreign key (createdbyuserid) references users WARN (LocalSessionFactoryBean:executeSchemaScript) - Unsuccessful schema statement: alter table files add constraint FK5CEBA778EB197A2 foreign key (createdbyuserid) references users java.sql.SQLException: Cannot alter table 'files' because this table does not exist in database 'tester'. at net.sourceforge.jtds.jdbc.SQLDiagnostic.addDiagnostic(SQLDiagnostic.java:364) at net.sourceforge.jtds.jdbc.TdsCore.tdsErrorToken(TdsCore.java:2778) at net.sourceforge.jtds.jdbc.TdsCore.nextToken(TdsCore.java:2214) at net.sourceforge.jtds.jdbc.TdsCore.getMoreResults(TdsCore.java:597) at net.sourceforge.jtds.jdbc.JtdsStatement.processResults(JtdsStatement.java:465) at net.sourceforge.jtds.jdbc.JtdsStatement.executeSQL(JtdsStatement.java:427) at net.sourceforge.jtds.jdbc.JtdsStatement.executeUpdate(JtdsStatement.java:1000) at net.sourceforge.jtds.jdbc.JtdsStatement.executeUpdate(JtdsStatement.java:906)  Then, later on in the log file....  WARN (LocalSessionFactoryBean:executeSchemaScript) - Unsuccessful schema statement: alter table usergrouppermissions add constraint FK11713E7042F124D0 foreign key (usergroupid) references usergroups java.sql.SQLException: Cannot alter table 'usergrouppermissions' because this table does not exist in database 'tester'. at net.sourceforge.jtds.jdbc.SQLDiagnostic.addDiagnostic(SQLDiagnostic.java:364) at net.sourceforge.jtds.jdbc.TdsCore.tdsErrorToken(TdsCore.java:2778) at net.sourceforge.jtds.jdbc.TdsCore.nextToken(TdsCore.java:2214) at net.sourceforge.jtds.jdbc.TdsCore.getMoreResults(TdsCore.java:597) at net.sourceforge.jtds.jdbc.JtdsStatement.processResults(JtdsStatement.java:465) at net.sourceforge.jtds.jdbc.JtdsStatement.executeSQL(JtdsStatement.java:427) at net.sourceforge.jtds.jdbc.JtdsStatement.executeUpdate(JtdsStatement.java:1000) at net.sourceforge.jtds.jdbc.JtdsStatement.executeUpdate(JtdsStatement.java:906) at org.apache.commons.dbcp.DelegatingStatement.executeUpdate(DelegatingStatement.java:225) at org.springframework.orm.hibernate3.LocalSessionFactoryBean.executeSchemaScript(LocalSessionFactoryBean.java:888) at org.springframework.orm.hibernate3.LocalSessionFactoryBean$3.doInHibernate(LocalSessionFactoryBean.java:864) at org.springframework.orm.hibernate3.HibernateTemplate.execute(HibernateTemplate.java:311) at org.springframework.orm.hibernate3.HibernateTemplate.execute(HibernateTemplate.java:288) at org.springframework.orm.hibernate3.LocalSessionFactoryBean.updateDatabaseSchema(LocalSessionFactoryBean.java:857) at org.springframework.orm.hibernate3.LocalSessionFactoryBean.afterPropertiesSet(LocalSessionFactoryBean.java:715)  I'm not exactly clear why this is happening, but there are two possible solutions to the issue.  Ideally, I would like for either of these solutions to be adopted as a chance to LocalSessionFactoryBean.  If you don't like either of the changes, it would be at nice to at least introduce a configuration variable so that subclassing LocalSessionFactoryBean isn't needed just to make the updateDatabaseSchema method work on SQL Server.  One solution is to set the flush mode on HibernateTemplate to EAGER in the updateDatabaseSchema method.  The other solution is to setAutoCommit(true) in executeSchemaScript.  I honestly think either or both solution should be OK, because most databases I've worked with (Oracle, MySQL) automatically commit DDL statements anyway, even if the statement appears in a transaction which is later rolled back.  It looks like SQL Server doesn't though.   ---  **Affects:** 1.2.1","closed","type: enhancement,","spring-projects-issues","2005-06-14T02:34:41Z","2005-07-21T05:22:54Z"
"","5710","Only Maven.xml (not Build.xml) includes JNDI classes into spring-jdbc.jar [SPR-1000]","**[Matthew McCullough](https://jira.spring.io/secure/ViewProfile.jspa?name=programr)** opened **[SPR-1000](https://jira.spring.io/browse/SPR-1000?redirect=false)** and commented  In the ""spring-framework-1.2.1-with-dependencies"" distribution, the spring.jar in the ""dist"" directory includes the org.springframework.jndi.* classes.  However, the spring-jdbc.jar does not include the jndi classes.  No other ""modular"" jar appears to contain the JNDI classes.  The maven.xml file specifies that the org.springframework.jndi.* classes should be included in the spring-jdbc.jar.  But, the build.xml file does not include the jndi classes in the spring-jdbc.jar.  I would think that there probably shouldn't be a discrepancy in the jars that the build.xml and the maven.xml produce.  If there is supposed to be a discrepancy in the jdbc jar that each of the build processes produce, can the org.springframework.jndi.* classes be included in one of the ""modular"" jars rather than only in the master 1.6mb distribution spring.jar?  MAVEN.XML ---> \ \ \ \ \ \ \  \ \ \ \ \ \  BUILD.XML ---> \ \  \ \ \ \ \ \ \ \   --- No further details from [SPR-1000](https://jira.spring.io/browse/SPR-1000?redirect=false)","closed","type: bug,","spring-projects-issues","2005-06-01T08:08:17Z","2007-02-19T08:42:15Z"
"","5612","No way to add hibernate type definitions to a LocalSessionFactoryBean [SPR-885]","**[matthew inger](https://jira.spring.io/secure/ViewProfile.jspa?name=mattinger)** opened **[SPR-885](https://jira.spring.io/browse/SPR-885?redirect=false)** and commented  There is currently no way to add a TypeDef instance to a LocalSessionFactory bean.  I am including a patch which will allow the addition of TypeDef objects.  There will be a ""typeDefinitions"" property on the LocalSessionFactoryBean:  public void setTypeDefinitions(TypeDefinitionBean typeDefinitions[]);  The ""TypeDefinitionBean"" class contains the name, type class, and parameters for the type definition:  \ \\myType\\ \\MyTypeFQCN\\  \   ---  **Affects:** 1.2 RC2  **Attachments:** - [LocalSessionFactoryBean.java.diff](https://jira.spring.io/secure/attachment/10664/LocalSessionFactoryBean.java.diff) (_2.30 kB_) - [LocalSessionFactoryBean.java.diff](https://jira.spring.io/secure/attachment/10662/LocalSessionFactoryBean.java.diff) (_2.30 kB_) - [LocalSessionFactoryBean.java.diff](https://jira.spring.io/secure/attachment/10660/LocalSessionFactoryBean.java.diff) (_2.31 kB_) - [TypeDefinitionBean.java](https://jira.spring.io/secure/attachment/10663/TypeDefinitionBean.java) (_1.76 kB_) - [TypeDefinitionBean.java](https://jira.spring.io/secure/attachment/10661/TypeDefinitionBean.java) (_1.76 kB_)","closed","type: enhancement,","spring-projects-issues","2005-04-18T08:37:14Z","2005-04-19T06:25:09Z"
"","5576","No Tiger specific jar file [SPR-850]","**[matthew inger](https://jira.spring.io/secure/ViewProfile.jspa?name=mattinger)** opened **[SPR-850](https://jira.spring.io/browse/SPR-850?redirect=false)** and commented  Currently, there is no way to seperate the ""tiger"" specific features from the rest of spring.  If the tiger jvm is being used to run ant/maven, then it simply compiles the tiger classes and includes them in spring.jar.  This prevents users who want a 1.4 version from using the same jar file which contains the tiger code.  Ideally, the majority of the code should be compiled with source/target of 1.4, and packaged up, and the tiger code should be compiled with 1.5, and put in it's own jar file.  I'm not sure what implications this has on spring.jar, since alot of users will simply want a single jar that has everything in it.  But i think it's worth re-examining, and at least creating two versions of spring.jar:  spring-full-1.2.jar (contains all spring 1.4 compatible classes) spring-full-tiger-1.2.jar (contains all spring classes)  and having a tiger specific jar file (much like spring-aop, etc..)  spring-tiger-1.2.jar   ---  **Affects:** 1.2 RC1","closed","type: enhancement,","spring-projects-issues","2005-04-05T01:08:39Z","2005-04-05T01:54:46Z"
"","5560","No way to set listeners on the SessionFactory [SPR-834]","**[matthew inger](https://jira.spring.io/secure/ViewProfile.jspa?name=mattinger)** opened **[SPR-834](https://jira.spring.io/browse/SPR-834?redirect=false)** and commented  The LocalSessionFactory bean currently has no way to set listeners on the SessionFactory (via the Configuration.setListener) method.  This should as simple as accepting a map as a property of the LocalSessionFactoryBean, and when building the Configuration object, iterating through it, and calling Configuration.setListener on each iteration.  ---  **Affects:** 1.2 RC1  **Attachments:** - [LocalSessionFactoryBean.patch](https://jira.spring.io/secure/attachment/10623/LocalSessionFactoryBean.patch) (_2.93 kB_)  **Issue Links:** - #5519 Support For Event Listeners (_**""is duplicated by""**_)","closed","type: bug,","spring-projects-issues","2005-03-30T03:49:38Z","2019-01-11T13:07:22Z"
"","5533","Missing the ability to add FilterDefinitions to a SessionFactoryBean [SPR-806]","**[matthew inger](https://jira.spring.io/secure/ViewProfile.jspa?name=mattinger)** opened **[SPR-806](https://jira.spring.io/browse/SPR-806?redirect=false)** and commented  There is currently no way to add a filter definition to a LocalSessionFactoryBean wihtout specifying it directly in a hibernate mapping file.  For globally used filters, it does not make sense to define it in a class mapping file.  IMHO, the best place for it to go is when you are defining the Configuration object, which for Spring-Hibernate integration is in the LocalSessionFactoryBean class.  I have created a class:  public class FilterDefinitionBean implements FactoryBean { private String name; private Map parameters;      public void setName(String name) {         this.name = name;     }          public void setParameters(Map parameters) {         this.parameters = parameters;     }          ...  }  which constructions a hibernate3 FilterDefinition object.  I have also modifed the LocalSessionFactoryBean to accept a new property ""filterDefs"" which is an array of FilterDefinition instances. So, a user can now do the following:  \ ... \ \ \ \\FilterName\\ \ \\\string\\ \ \ \ \ \  I'm of course making an assumption here that the order of the parameters does not matter, since they are named.  Given that assumption, the values stored in the map are hibernate type names, and retrieved using TypeFactory.heuristicType(typeName) method.  Attached you will find the FilterDefinitionBean, and the diffs for LocalSessionFactoryBean.    ---  **Affects:** 1.2 RC1  **Attachments:** - [FilterDefinitionBean.java](https://jira.spring.io/secure/attachment/10616/FilterDefinitionBean.java) (_2.03 kB_) - [LocalSessionFactoryBean.java.diff](https://jira.spring.io/secure/attachment/10617/LocalSessionFactoryBean.java.diff) (_1.76 kB_)","closed","type: enhancement,","spring-projects-issues","2005-03-22T02:53:32Z","2005-04-04T02:22:06Z"
"","5534","TokenBasedRememberMeServices int overflow [SPR-807]","**[Matthew Fleming](https://jira.spring.io/secure/ViewProfile.jspa?name=matthewdfleming)** opened **[SPR-807](https://jira.spring.io/browse/SPR-807?redirect=false)** and commented  The TokenBasedRememberMeServices class currently has a parameter tokenValiditySeconds which is an int.  This parm determines how long a remember me cookie is valid.  I didn't figure out what the max time was before an overflow happened but if you set the seconds to say 5 years, an overflow happens.  To remedy change the instance variable to a long and change the getter and setter.   --- No further details from [SPR-807](https://jira.spring.io/browse/SPR-807?redirect=false)","closed","status: declined,","spring-projects-issues","2005-03-22T03:35:30Z","2019-01-12T16:41:34Z"
"","5139","Allow contextConfigLocation with wildcard syntax to load from WAR [SPR-409]","**[Matt Raible](https://jira.spring.io/secure/ViewProfile.jspa?name=mraible)** opened **[SPR-409](https://jira.spring.io/browse/SPR-409?redirect=false)** and commented  If I use the following contextConfigLocation in web.xml, I get an error from the ContextLoaderListener:               contextConfigLocation                      /WEB-INF/applicationContext-*.xml                Error:  [appfuse] ERROR [main] ContextLoader.initWebApplicationContext(108) | Context initialization failed org.springframework.context.ApplicationContextException: I/O error parsing XML document for application context [Root XmlWebApplicationContext]; nested exception is java.io.FileNotFoundException: resource [/WEB-INF] of ServletContext cannot be resolved to absolute file path - web application archive not expanded? java.io.FileNotFoundException: resource [/WEB-INF] of ServletContext cannot be resolved to absolute file path - web application archive not expanded? at org.springframework.web.context.support.ServletContextResource.getFile(ServletContextResource.java:97)  I can fix this by using explicit paths to each of my files:               contextConfigLocation                      /WEB-INF/applicationContext-resources.xml,             /WEB-INF/applicationContext-hibernate.xml,             /WEB-INF/applicationContext-service.xml                It'd be nice if the first syntax would work when loading context files from non-expanded WAR files.   ---  **Affects:** 1.1.1","closed","type: enhancement,","spring-projects-issues","2004-10-19T02:08:10Z","2004-10-22T08:50:27Z"
"","5044","Allow unit tests to call controller.getCommandName() [SPR-314]","**[Matt Raible](https://jira.spring.io/secure/ViewProfile.jspa?name=mraible)** opened **[SPR-314](https://jira.spring.io/browse/SPR-314?redirect=false)** and commented  In the current BaseCommandController, getCommandName() is protected.  This means only subclasses can access it, and not unit tests.  It would be nice if I could do something like the following:      request = new MockHttpServletRequest(""GET"", ""/editUser.html"");     request.addParameter(""id"", ""1"");     mv = c.handleRequest(request, new MockHttpServletResponse());     assertEquals(""userForm"", mv.getViewName());     User editUser = (User) mv.getModel().get(c.getCommandName());                                              ^^^ this method is not visible  An easy workaround is to add a method to my controller to retrieve the value:      public String getFormName() {         return getCommandName();     }    ---  **Affects:** 1.1 final","closed","type: enhancement,","spring-projects-issues","2004-09-07T07:24:11Z","2004-09-07T11:31:50Z"
"","4969","JavascriptValidatorTag only works when validator defined in main app context [SPR-238]","**[Matt Raible](https://jira.spring.io/secure/ViewProfile.jspa?name=mraible)** opened **[SPR-238](https://jira.spring.io/browse/SPR-238?redirect=false)** and commented  The current implementation of JavascriptValidatorTag will only work if the validator beans are defined in an application context loaded by the ContextLoaderListener.  It seems cleaner that these beans should be defined in **-servlet.xml since they have /WEB-INF/**.xml in their path names.  I'll attach a patch that looks in the servlet.xml file first, and then in the main webapp.  Tested with AppFuse.   ---  **Affects:** 1.1 RC1  **Attachments:** - [JavascriptValidatorTag.diff](https://jira.spring.io/secure/attachment/10155/JavascriptValidatorTag.diff) (_2.95 kB_)","closed","type: enhancement,","spring-projects-issues","2004-08-02T15:53:33Z","2019-01-13T08:59:37Z"
"","4956","build process doesn't include spring.vm for Velocity macros [SPR-225]","**[Matt Raible](https://jira.spring.io/secure/ViewProfile.jspa?name=mraible)** opened **[SPR-225](https://jira.spring.io/browse/SPR-225?redirect=false)** and commented  I checked out the latest code from CVS tonight in order to use the new Velocity macros for forms.  I found that spring.vm wasn't include in the created JAR, and therefore the macros didn't work.  Modifying build.xml fixed the problem.  I'll try to attach a patch.   ---  **Affects:** 1.1 RC1  **Attachments:** - [build.xml.patch](https://jira.spring.io/secure/attachment/10152/build.xml.patch) (_469 bytes_)","closed","type: bug,","spring-projects-issues","2004-07-18T18:37:25Z","2004-07-20T17:21:24Z"
"","4939","Link to J2EE Design and Development is invalid [SPR-208]","**[Matt Raible](https://jira.spring.io/secure/ViewProfile.jspa?name=mraible)** opened **[SPR-208](https://jira.spring.io/browse/SPR-208?redirect=false)** and commented  I don't know if these types of things should go in JIRA or should be sent to the mailing list.  I'll try this method first.  http://www.springframework.org/statement.html  The link to J2EE Design and Development (http://www.wrox.com/books/1861007841.htm) goes to a Page Not Found page at Wrox.   --- No further details from [SPR-208](https://jira.spring.io/browse/SPR-208?redirect=false)","closed","","spring-projects-issues","2004-07-08T16:54:23Z","2019-01-11T13:29:00Z"
"","4911","CommonsMultipartResolver results in NPE when using MockServletContext [SPR-179]","**[Matt Raible](https://jira.spring.io/secure/ViewProfile.jspa?name=mraible)** opened **[SPR-179](https://jira.spring.io/browse/SPR-179?redirect=false)** and commented  When I use a MockServletContext and an XmlWebApplicationContext to initialize an ApplicationContext in a JUnit tests - the CommonsMultipartResolver pukes:      [junit] org.springframework.beans.factory.BeanCreationException: Error creat  ing bean with name 'multipartResolver' defined in resource [/WEB-INF/action-servlet.xml] of ServletContext: Initialization of bean failed; nested exception is j ava.lang.NullPointerException: null [junit] java.lang.NullPointerException [junit]     at org.springframework.web.multipart.commons.CommonsMultipartRes olver.setServletContext(CommonsMultipartResolver.java:174) [junit]     at org.springframework.web.context.support.ServletContextAwarePr ocessor.postProcessBeforeInitialization(ServletContextAwareProcessor.java:59)  Line 74 is: this.fileUpload.setRepositoryPath(WebUtils.getTempDir(servletContext).getAbsolutePath());  So it looks like a temporary directory has not been assigned to the servletContext.  I could do this in my unit test - or set it manually on the context, but it would be nice if it was created transparently.   ---  **Affects:** 1.0.2","closed","type: bug,","spring-projects-issues","2004-06-22T03:30:36Z","2004-06-22T04:41:37Z"
"","5459","Default XSLT view resolver to simplify using XSLT views [SPR-731]","**[Matt Magoffin](https://jira.spring.io/secure/ViewProfile.jspa?name=msqr)** opened **[SPR-731](https://jira.spring.io/browse/SPR-731?redirect=false)** and commented  While using XSLT views in an application, the view configuration can be greatly simplified by using an XSLT-specific view resolver. This view resolver would eliminate the need to define view definitions for ""normal"" view situations, and can be quite helpful for applications using a large number of views.  The idea is to resolve view names to XSLT resources by applying a configurable prefix and suffix to view names to translate, for example, the view name ""home"" to ""/WEB-INF/xsl/home.xsl"".  The view resolver can build on top of the existing AbstractXsltView view class by resolving XSLT views and setting the 'stylesheetLocation' property of the view to the translated view resource (e.g. /WEB-INF/xsl/home.xsl).   ---  **Affects:** 1.1.4  **Attachments:** - [config.xml](https://jira.spring.io/secure/attachment/10536/config.xml) (_1.82 kB_) - [DefaultXsltViewResolver.java](https://jira.spring.io/secure/attachment/10535/DefaultXsltViewResolver.java) (_5.33 kB_) - [WarXsltUriResolver.java](https://jira.spring.io/secure/attachment/10552/WarXsltUriResolver.java) (_2.78 kB_)  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2005-02-21T14:01:39Z","2012-06-19T03:54:25Z"
"","5458","Refactor AbstractXsltView to use Source instead of DOM [SPR-730]","**[Matt Magoffin](https://jira.spring.io/secure/ViewProfile.jspa?name=msqr)** opened **[SPR-730](https://jira.spring.io/browse/SPR-730?redirect=false)** and commented  As noted at  http://forum.springframework.org/viewtopic.php?p=14448  I ran into some issues with the AbstractXsltView class that could be easily solved by allowing extending classes to return a javax.xml.transform.Source object instead of a org.w3c.dom.Node object. The reason for the change is to allow more flexibility in the XML source for the XSLT transform. For example in my situation I'm transforming JAXB objects, so the ability to use a JAXBSource directly for the XSLT transform means eliminating the step of first creating a DOM before performing the transformation.   ---  **Affects:** 1.1.4  **Attachments:** - [AbstractXsltView-patch.txt](https://jira.spring.io/secure/attachment/10533/AbstractXsltView-patch.txt) (_4.17 kB_) - [AbstractXsltView-patch-2.txt](https://jira.spring.io/secure/attachment/10534/AbstractXsltView-patch-2.txt) (_6.53 kB_)","closed","type: enhancement,","spring-projects-issues","2005-02-21T13:13:26Z","2005-03-11T08:51:37Z"
"","5404","Fail to read property file indexed property keys with dots [SPR-676]","**[Matt Magoffin](https://jira.spring.io/secure/ViewProfile.jspa?name=msqr)** opened **[SPR-676](https://jira.spring.io/browse/SPR-676?redirect=false)** and commented  If an indexed (map) key contains a period (dot) the PropertiesBeanDefinitionReader gets tricked into trying to create an illegal bean instead of setting the property on an existing bean. See  http://forum.springframework.org/viewtopic.php?t=3293  For example, the properties  dotkey.class=TestDotKeys dotkey.props[com.sun.xml.bind.namespacePrefixMapper]=jaxbNamespacePrefixMapper  will fail to populate the TestDotKeys Map property 'props' with a key 'com.sun.xml.bind.namespacePrefixMapper' and value 'jaxbNamespacePrefixMapper' as expected   ---  **Affects:** 1.1.4  **Attachments:** - [patch.txt](https://jira.spring.io/secure/attachment/10485/patch.txt) (_1.49 kB_) - [TestDotKeys.java](https://jira.spring.io/secure/attachment/10483/TestDotKeys.java) (_2.93 kB_) - [testdotkeys.properties](https://jira.spring.io/secure/attachment/10484/testdotkeys.properties) (_104 bytes_)","closed","in: core,","spring-projects-issues","2005-02-02T03:31:55Z","2005-02-28T02:28:10Z"
"","4992","Add XSLT system ID to support realitive xsl:import paths [SPR-261]","**[Matt Magoffin](https://jira.spring.io/secure/ViewProfile.jspa?name=msqr)** opened **[SPR-261](https://jira.spring.io/browse/SPR-261?redirect=false)*** and commented  I'm using the AbstractXsltView and I'd like to use relative paths in my xsl:import. In the past I've accomplished this by setting a system ID to StreamSource objects upon their construction.  I'm attaching a patch to AbstractXsltView that accomplishes this (I've only tested running within a web container (Tomcat)).   ---  **Affects:** 1.1 RC2  **Attachments:** - [AbstractXsltView.patch](https://jira.spring.io/secure/attachment/10163/AbstractXsltView.patch) (_1.16 kB_)","closed","type: enhancement,","spring-projects-issues","2004-08-12T02:31:31Z","2004-08-22T10:40:27Z"
"","5765","Another autowire option that allows for autowiring by name if by type is ambiguous [SPR-1058]","**[Matt Burns](https://jira.spring.io/secure/ViewProfile.jspa?name=matt%20burns)** opened **[SPR-1058](https://jira.spring.io/browse/SPR-1058?redirect=false)** and commented  Autowiring the app context by type is obviously tidier than by name but there is the (quite common) problem when faced with object type ambiguity within the bean definitions. I would like another option for a smarter autowiring method that tried to wire by type, then resorted to name for lookup when faced with ambiguity.   ---  **Affects:** 2.0 final  3 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2005-06-19T06:12:03Z","2008-01-07T23:00:46Z"
"","5808","BaseCommandController Javadoc link text spells AbstractCommandController as AbstractcommandController [SPR-1104]","**[Matt Benson](https://jira.spring.io/secure/ViewProfile.jspa?name=mbenson)** opened **[SPR-1104](https://jira.spring.io/browse/SPR-1104?redirect=false)** and commented  Offending text (with 2 lines of context):  * actual workflow. Implementing classes like * {`@link` AbstractFormController AbstractFormController}, * {`@link` AbstractCommandController AbstractcommandController},  from CVS HEAD.   --- No further details from [SPR-1104](https://jira.spring.io/browse/SPR-1104?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-07-06T09:08:40Z","2005-07-11T01:35:17Z"
"","5793","RedirectView s/.e./i.e./ in main Javadoc comment [SPR-1088]","**[Matt Benson](https://jira.spring.io/secure/ViewProfile.jspa?name=mbenson)** opened **[SPR-1088](https://jira.spring.io/browse/SPR-1088?redirect=false)** and commented  I believe the line:  *   \A URL for this view is supposed to be a HTTP redirect URL, .e.  should be:  *   \A URL for this view is supposed to be a HTTP redirect URL, i.e. This applies in HEAD, etc.   --- No further details from [SPR-1088](https://jira.spring.io/browse/SPR-1088?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-06-30T02:21:40Z","2005-07-03T15:50:24Z"
"","5778","Web-MVC manpage incorrectly lists UrlFilenameViewController as FilenameViewController [SPR-1072]","**[Matt Benson](https://jira.spring.io/secure/ViewProfile.jspa?name=mbenson)** opened **[SPR-1072](https://jira.spring.io/browse/SPR-1072?redirect=false)** and commented  ""Misspelled"" classname may cause minor headaches.  Thanks!   --- No further details from [SPR-1072](https://jira.spring.io/browse/SPR-1072?redirect=false)","closed","type: bug,","spring-projects-issues","2005-06-23T08:40:10Z","2005-06-27T01:01:21Z"
"","5253","move creation of BeanWrapper instance to separate methods [SPR-524]","**[Matt Albrecht](https://jira.spring.io/secure/ViewProfile.jspa?name=groboclown)** opened **[SPR-524](https://jira.spring.io/browse/SPR-524?redirect=false)** and commented  Currently, there isn't a way to substitue the default bean property introspection with a custom technique without rewriting (or cut-n-paste) of much of the current Spring core code.  I've created a patch for the AbstractAutowireCapableBeanFactory.java file which moves the creation of the BeanWrapperImpl into new protected methods.   ---  **Attachments:** - [AbstractAutowireCapableBeanFactory.patch](https://jira.spring.io/secure/attachment/10353/AbstractAutowireCapableBeanFactory.patch) (_3.47 kB_)","closed","type: enhancement,","spring-projects-issues","2004-12-06T08:44:06Z","2004-12-06T21:48:27Z"
"","5642","Parsing map entry with null key value fails [SPR-919]","**[Matjaz Smolej](https://jira.spring.io/secure/ViewProfile.jspa?name=matjaz)** opened **[SPR-919](https://jira.spring.io/browse/SPR-919?redirect=false)** and commented  \ \ \ \ \ \ \ \  DefaultXmlBeanDefinitionParser.parseMapElement() throws an exception here:  if (key == null || !(hasValueAttribute || hasValueRefAttribute || subElement != null)) { throw new BeanDefinitionStoreException( this.resource, beanName, ""\ must specify a key and a value""); }   ---  **Affects:** 1.2 RC2  1 votes, 0 watchers","closed","in: core,","spring-projects-issues","2005-05-04T23:32:21Z","2005-05-12T07:33:13Z"
"","5665","Spring genearated validations message localization [SPR-967]","**[Mathieu Poumeyrol](https://jira.spring.io/secure/ViewProfile.jspa?name=kali)** opened **[SPR-967](https://jira.spring.io/browse/SPR-967?redirect=false)** and commented  As far as I understand spring code, it is not possible to localize messages generated internaly by spring when the user submits a form.  For instance, in org/springframework/beans/TypeMismatchException.java line:52, the message displayed by the application when it can not be translated to the target language.  Unless I am missing something somewhere... (newbie warning)   ---  **Affects:** 1.2 RC2","closed","type: enhancement,","spring-projects-issues","2005-05-20T00:37:35Z","2005-05-21T22:07:22Z"
"","5548","LocalDataSourceJobStore setting a TX datasource for nonManagedTXDataSource [SPR-821]","**[Mathias Bogaert](https://jira.spring.io/secure/ViewProfile.jspa?name=pathos)** opened **[SPR-821](https://jira.spring.io/browse/SPR-821?redirect=false)** and commented  Quartz requires a non managed TX datasource to be set (nonManagedTXDataSource) when using JobStoreCMT. Spring uses the same datasource for the managed and non-managed transactional datasources. This causes Quartz to fail upon init using strict XADataSource drivers (WebLogic/WebSphere).  Exception: org.quartz.JobPersistenceException: Failed to obtain DB connection from data source 'springNonTxDataSource': java.sql.SQLException: SQL operations are not allowed with no global transaction by default for XA drivers. If the XA driver supports performing SQL operations with no global transaction, explicitly allow it by setting ""SupportsLocalTransaction"" JDBC connection pool property to true. In this case, also remember to complete the local transaction before using the connection again for global transaction, else a XAER_OUTSIDE XAException may result. To complete a local transaction, you can either set auto commit to true or call Connection.commit() or Connection.rollback(). [See nested exception: java.sql.SQLException: SQL operations are not allowed with no global transaction by default for XA drivers. If the XA driver supports performing SQL operations with no global transaction, explicitly allow it by setting ""SupportsLocalTransaction"" JDBC connection pool property to true. In this case, also remember to complete the local transaction before using the connection again for global transaction, else a XAER_OUTSIDE XAException may result. To complete a local transaction, you can either set auto commit to true or call Connection.commit() or Connection.rollback().] at org.quartz.impl.jdbcjobstore.JobStoreCMT.getNonManagedTXConnection(JobStoreCMT.java:1402) at org.quartz.impl.jdbcjobstore.JobStoreCMT.cleanVolatileTriggerAndJobs(JobStoreCMT.java:216) at org.quartz.impl.jdbcjobstore.JobStoreSupport.initialize(JobStoreSupport.java:501) at org.quartz.impl.jdbcjobstore.JobStoreCMT.initialize(JobStoreCMT.java:150) at org.springframework.scheduling.quartz.LocalDataSourceJobStore.initialize(LocalDataSourceJobStore.java:118) at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:915) at org.quartz.impl.StdSchedulerFactory.getScheduler(StdSchedulerFactory.java:1047) at org.springframework.scheduling.quartz.SchedulerFactoryBean.createScheduler(SchedulerFactoryBean.java:543) at org.springframework.scheduling.quartz.SchedulerFactoryBean.afterPropertiesSet(SchedulerFactoryBean.java:494)  More info, see: http://wiki.opensymphony.com/display/QRTZ1/ConfigJobStoreCMT   ---  **Affects:** 1.2 RC1","closed","type: bug,","spring-projects-issues","2005-03-24T19:37:24Z","2005-03-24T21:17:48Z"
"","5414","getSession() in HibernateTemplate is protected?? [SPR-686]","**[Mathias Bogaert](https://jira.spring.io/secure/ViewProfile.jspa?name=pathos)** opened **[SPR-686](https://jira.spring.io/browse/SPR-686?redirect=false)** and commented  Some methods in HibernateTemplate are deprecated (createQuery, getNamedQuery, etc), and their javadoc says to use 'session.createQuery'. I take this as calling getSession() on HibernateTemplate, but this method is protected and thus cannot be called from classes extending HibernateDaoSupport. So I guess you mean the getSession() method of HibernateDaoSupport, but there the javadoc says to use HibernateTemplate for this. I'm kinda lost what I should do, so please clarify the javadoc.   ---  **Affects:** 1.1.5","closed","type: enhancement,","spring-projects-issues","2005-02-03T20:29:14Z","2005-02-04T07:55:48Z"
"","5380","ApplicationEventFilter [SPR-652]","**[Mathias Bogaert](https://jira.spring.io/secure/ViewProfile.jspa?name=pathos)** opened **[SPR-652](https://jira.spring.io/browse/SPR-652?redirect=false)** and commented  As written on the mailinglist http://article.gmane.org/gmane.comp.java.springframework.devel/5093/match=applicationlistener :  > Have we considered adding support for application event > filters, to allow registered listeners to filter events of > interest?  I think that would be a nice feature, and would > be simplify listener handing code, as well as improve > performance. >  > So for example, we could define the following interface: >  > public interface ApplicationEventFilter { > public boolean isEventOfInterest(ApplicationEvent e); > } >  > public class LifecycleApplicationEventFilter { > public boolean isEventOfInterest(ApplicationEvent e) { > return (e instanceof LifecycleApplicationEvent); > } > } >  > public interface ApplicationEventMulticaster { > public void addApplicationListener(ApplicationListener > listener, ApplicationEventFilter filter); > } >  > public class SimpleApplicationEventMulticaster { >      >     public void addApplicationListener >  > (ApplicationListener listener, ApplicationEventFilter > filter) { > this.applicationEventSubscriptions.add(new > ApplicationEventSubscription(listener, filter)); > } >      >     public void multicastEvent(ApplicationEvent event) { >         Iterator it =  >  > this.applicationEventSubscriptions.iterator(); > while (it.hasNext()) { > ApplicationEventSubscription subscription = > (ApplicationEventSubscription) it.next(); > if (subscription.isEventOfInterest(event)) { > subscription.broadcast(event); > }            > } > } > } >  > This is analagous to JMX's > NotificationListener/NotificationFilter constructs    ---  **Affects:** 1.1.4  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2005-01-24T19:48:11Z","2012-06-19T09:37:36Z"
"","5002","JMS package structure is not aligned [SPR-271]","**[Mathias Bogaert](https://jira.spring.io/secure/ViewProfile.jspa?name=pathos)** opened **[SPR-271](https://jira.spring.io/browse/SPR-271?redirect=false)** and commented  IMO the JMS packages and classes are not too nice. E.g. HibernateTemplate lives in org.springframework.orm.hibernate while JmsTemplate lives in org.springframework.jms.core   ---  **Affects:** 1.1 RC2","closed","type: enhancement,","spring-projects-issues","2004-08-18T21:38:39Z","2004-09-02T21:39:11Z"
"","4944","Add getter for timer in TimerFactoryBean [SPR-213]","**[Mathias Bogaert](https://jira.spring.io/secure/ViewProfile.jspa?name=pathos)** opened **[SPR-213](https://jira.spring.io/browse/SPR-213?redirect=false)** and commented  Next to wanting the application to fire the tasks upon startup, we also want to be able to fire the tasks manually through a WebWork2 action.  Code would look something like:  public class ImportCsvAction extends ActionSupport { private TimerFactoryBean timerFactory; private ImportCsvTask importCsvTask;      public String execute() throws Exception {         timerFactory.getTimer().schedule(importCsvTask, 0); // zero delay!         return SUCCESS;     }          public void setTimerFactory(TimerFactoryBean timerFactory) {         this.timerFactory = timerFactory;     }          public void setImportCsvTask(ImportCsvTask importCsvTask) {         this.importCsvTask = importCsvTask;     }  }   --- No further details from [SPR-213](https://jira.spring.io/browse/SPR-213?redirect=false)","closed","type: enhancement,","spring-projects-issues","2004-07-12T03:36:35Z","2004-07-19T07:06:30Z"
"","4919","Add HtmlEmailer support [SPR-187]","**[Mathias Bogaert](https://jira.spring.io/secure/ViewProfile.jspa?name=pathos)** opened **[SPR-187](https://jira.spring.io/browse/SPR-187?redirect=false)** and commented  http://java.sun.com/developer/EJTechTips/2004/tt0625.html#1  Would be cool if we could have this functionality directly in Spring.   ---  **Affects:** 1.1 RC1","closed","type: enhancement,","spring-projects-issues","2004-06-25T10:22:58Z","2004-08-05T21:55:15Z"
"","4900","Add queryCaching to HibernateDaoSupport [SPR-168]","**[Mathias Bogaert](https://jira.spring.io/secure/ViewProfile.jspa?name=pathos)** opened **[SPR-168](https://jira.spring.io/browse/SPR-168?redirect=false)** and commented  It would be very usefuly to be able to enable query caching on all DAO's that extend HibernateDaoSupport. Add a boolean cacheQueries to HibernateTemplate, and evaluate it in createQuery. Then add a setter to HibernateDaoSupport which calls the setter on HibernateTemplate.   --- No further details from [SPR-168](https://jira.spring.io/browse/SPR-168?redirect=false)","closed","type: enhancement,","spring-projects-issues","2004-06-16T00:21:17Z","2004-10-25T03:08:45Z"
"","4899","Make contextLoader in ContextLoaderServlet protected [SPR-167]","**[Mathias Bogaert](https://jira.spring.io/secure/ViewProfile.jspa?name=pathos)** opened **[SPR-167](https://jira.spring.io/browse/SPR-167?redirect=false)** and commented  In order to get an application running in Resin (development, supports listeners) and WLS (deployment, doesn't support listeners), we  need to use the ContextLoaderServlet. But we also have custom init code, so we extended ContextLoaderServlet with StartupServlet, and it would be handy to be able to access the contextLoader instance.   ---  **Affects:** 1.1 RC1","closed","type: enhancement,","spring-projects-issues","2004-06-13T22:12:29Z","2004-06-16T00:19:13Z"
"","4897","requiredUniqueResult in DataAccessUtils returns (!!) IncorrectResultSizeDataAccessException [SPR-165]","**[Mathias Bogaert](https://jira.spring.io/secure/ViewProfile.jspa?name=pathos)** opened **[SPR-165](https://jira.spring.io/browse/SPR-165?redirect=false)** and commented  Typical 'tired developer and rapid release'-type of bug: instead of throwing the exception, returning the instance: return new IncorrectResultSizeDataAccessException(1, 0);. This breaks the requiredUniqueResult method.   --- No further details from [SPR-165](https://jira.spring.io/browse/SPR-165?redirect=false)","closed","in: core,","spring-projects-issues","2004-06-11T02:07:27Z","2004-06-11T02:12:15Z"
"","4886","Make log event ""Initiating transaction commit"" DEBUG [SPR-154]","**[Mathias Bogaert](https://jira.spring.io/secure/ViewProfile.jspa?name=pathos)** opened **[SPR-154](https://jira.spring.io/browse/SPR-154?redirect=false)** and commented  I'm having a lot of read transactions (e.g. checking security multiple times on the same JSP using WebWork2 OGNL), and for each one of them, I get ""INFO  [tcpConnection-8080-3] (orm.hibernate.HibernateTransactionManager:315) - Initiating transaction commit"". This result in up to 15 log lines per request!   ---  **Affects:** 1.0.2","closed","type: enhancement,","spring-projects-issues","2004-06-02T19:38:27Z","2004-06-30T02:01:56Z"
"","5780","ClassCastException when obtaining LocalSessionFactoryBean [SPR-1074]","**[Mathias Bogaert](https://jira.spring.io/secure/ViewProfile.jspa?name=pathos)** opened **[SPR-1074](https://jira.spring.io/browse/SPR-1074?redirect=false)** and commented  ERROR - Could not execute action java.lang.ClassCastException at eu.cec.regio.sysaudit.web.action.FlushCacheAction.execute(FlushCacheAction.java:21)  Code: LocalSessionFactoryBean lsfb = (LocalSessionFactoryBean) applicationContext.getBean(""&sessionFactory"");  A System.out.println of lsfb gives: org.springframework.orm.hibernate3.LocalSessionFactoryBean@6f564a  Defined in applicationContext.xml as: \ \ \ \ ...   ---  **Affects:** 1.2.2","closed","in: core,","spring-projects-issues","2005-06-23T20:13:50Z","2019-01-11T18:36:31Z"
"","5747","Upgrade to Commons Lang 2.1 [SPR-1040]","**[Mathias Bogaert](https://jira.spring.io/secure/ViewProfile.jspa?name=pathos)** opened **[SPR-1040](https://jira.spring.io/browse/SPR-1040?redirect=false)** and commented  Dunno if Spring still uses Commons Lang, but upgrade the one in the lib directory please.   ---  **Affects:** 1.2.2","closed","type: enhancement,","spring-projects-issues","2005-06-13T22:12:14Z","2005-06-22T21:56:57Z"
"","5846","Same behaviour for config locations in  as in application context. [SPR-1143]","**[Martin Zeltner](https://jira.spring.io/secure/ViewProfile.jspa?name=swisswheel)** opened **[SPR-1143](https://jira.spring.io/browse/SPR-1143?redirect=false)** and commented  I'd like to be able to use the same config locations, as I use in application contexts, in xml bean files too.  Example:  clientStartupConfig.xml: \ \ \ \  The appliaction context must only know the file ""clientStartupConfig.xml"" to getting started. Today this is only possible if the application context has ""classpath*:common/**.xml"" and ""classpath**:mandatory/*.xml"" as config locations.  Thanks, Martin    ---  **Affects:** 1.2.1","closed","type: enhancement,","spring-projects-issues","2005-07-15T02:27:00Z","2005-07-19T18:27:11Z"
"","5845","Load files in  only once [SPR-1142]","**[Martin Zeltner](https://jira.spring.io/secure/ViewProfile.jspa?name=swisswheel)** opened **[SPR-1142](https://jira.spring.io/browse/SPR-1142?redirect=false)** and commented  Example:  file1.xml: \ \ ... \  file2.xml: \ \ ... \  If I load now an application context which has ""file1.xml"" and ""file2.xml"" as config locations, the file ""common-config.xml"" will be loaded twice. I suggest to remember the url of already loaded config files.  Thanks, Martin  ---  **Affects:** 1.2.1  **Attachments:** - [SPR-1142-xml-application-context-import-once-2010-01-05.patch](https://jira.spring.io/secure/attachment/16066/SPR-1142-xml-application-context-import-once-2010-01-05.patch) (_17.65 kB_)  **Issue Links:** - #14160 Ignore duplicated import files or property-placeholder files - #12263 When a bean definition is overridden, detect whether the definition has changed and log accordingly  67 votes, 52 watchers","closed","status: bulk-closed,","spring-projects-issues","2005-07-15T02:13:24Z","2019-01-12T03:51:25Z"
"","5584","Exception logged when DEBUG set in Log4J [SPR-858]","**[Martin Thompson](https://jira.spring.io/secure/ViewProfile.jspa?name=martin@stimpy.demon.co.uk)** opened **[SPR-858](https://jira.spring.io/browse/SPR-858?redirect=false)** and commented  Exception gets logged causing confusion when running logging at DEBUG level for matching String constructor injection.  Below is an example.  \ \ \testValue\ \ \      [java] 2005-04-06 17:07:06,515 [main] DEBUG org.springframework.beans.factory.xml.XmlBeanFactory - Ignoring constructor [public java.lang.String(byte[],int,int,int)] of bean 'testId': could not satisfy dependencies     [java] org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'testId' defined in class path resource [spring.xml]: Unsatisfied dependency expressed through constructor argument with index 0 of type [[B]: Did you specify the correct bean references as generic constructor arguments?     [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createArgumentArray(AbstractAutowireCapableBeanFactory.java:622)     [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:495)     [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:306)     [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:260)     [java] 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:221)     [java] 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:145)     [java] 	at TestStringBean.main(TestStringBean.java:11)     [java] 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     [java] 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)     [java] 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)     [java] 	at java.lang.reflect.Method.invoke(Method.java:585)     [java] 	at org.apache.tools.ant.taskdefs.ExecuteJava.run(ExecuteJava.java:193)     [java] 	at org.apache.tools.ant.taskdefs.ExecuteJava.execute(ExecuteJava.java:130)     [java] 	at org.apache.tools.ant.taskdefs.Java.run(Java.java:705)     [java] 	at org.apache.tools.ant.taskdefs.Java.executeJava(Java.java:177)     [java] 	at org.apache.tools.ant.taskdefs.Java.execute(Java.java:83)     [java] 	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:275)     [java] 	at org.apache.tools.ant.Task.perform(Task.java:364)     [java] 	at org.apache.tools.ant.Target.execute(Target.java:341)     [java] 	at org.apache.tools.ant.Target.performTasks(Target.java:369)     [java] 	at org.apache.tools.ant.Project.executeTarget(Project.java:1214)     [java] 	at org.apache.tools.ant.Project.executeTargets(Project.java:1062)     [java] 	at org.apache.tools.ant.Main.runBuild(Main.java:673)     [java] 	at org.apache.tools.ant.Main.startAnt(Main.java:188)     [java] 	at org.apache.tools.ant.launch.Launcher.run(Launcher.java:196)     [java] 	at org.apache.tools.ant.launch.Launcher.main(Launcher.java:55)    ---  **Affects:** 1.1.5","closed","type: enhancement,","spring-projects-issues","2005-04-06T03:25:46Z","2005-04-07T18:27:07Z"
"","5573","Cannot resolve constuctor to call on a String object for constructor based injection [SPR-847]","**[Martin Thompson](https://jira.spring.io/secure/ViewProfile.jspa?name=martin@stimpy.demon.co.uk)** opened **[SPR-847](https://jira.spring.io/browse/SPR-847?redirect=false)** and commented  I cannot create a bean which is a simple String because it cannot resolve which constructor to call.  Simple test as follows:  \ \ \testValue\ \ \  Results in the following exception:  org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'testId' defined in class path resource [ehcache-spring-ac.xml]: Unsatisfied dependency expressed through constructor argument with index 0 of type [[B]: Did you specify the correct bean references as generic constructor arguments?  I've have tried various combinations of type and index to resolve the constructor but have not got it working.  Regards, Martin...   ---  **Affects:** 1.1.5","closed","in: core,","spring-projects-issues","2005-04-03T21:06:00Z","2019-01-11T13:06:33Z"
"","5659","HtmlUtils [SPR-940]","**[Martin Kersten](https://jira.spring.io/secure/ViewProfile.jspa?name=martin%20kersten)** opened **[SPR-940](https://jira.spring.io/browse/SPR-940?redirect=false)** and commented  I took some free time to investigate into the HtmlUtils related encoding and decoding of html related character sets including the character entity references.  I got some things, I would like to claim being an improvement.  First of all, the solution uses a properties file to store all the entity references in a readable fashion, so the code is freed from lots of repeating lines.  Also I used a comprehensive unit-test of the class called CharacterEntityReferences testing all supported character entity references by referring to the DTD provided with the Html 4.0 specification. So according to the test it is sure, none of the entity references is left out (or I did the same fault twice or even trice...).  Since the initialization code is now neat and simple, I also added a mapping for converting a special character into the corresponding character entity reference. A string being encoded this way, is far more human readable, I guess also it has a smaller memory and performance footprint.  For the decoding part, I tried a lookAhead approach using additional knowledge provided by the string being decoded, I was able to speed up the processing of longer strings (longer then 4 chars) by a factor between two and four. Also this approach creates far less String objects and therefore has a nicer memory footprint.  I have attached a simple pdf summary of some measurement I undertook (neat and plain, but I think it is quite useful).  Also before I committed my spare freetime to this, I took a walk around to find a 3rd party replacement. But I only saw quite a lot solutions doing appearently the same, but often either supported not the full character set or where quite limited in style, function or performance. There is appearently a chance that a small, highly focused library can add some improvement to the general html string processing. I talked with one of the HtmlParser devs for instance and he was open minded about it.  Since I would expect the Html 4.0 character entity reference specification as being final (per definition), I wouldn't expect such a library to change in terms of compatibility over time. So the question goes, if Spring for example would make use of such a small but highly focused library.  Also I mostly did this work, because I wanted to recap some text pattern related basic theoretical knowledge. So I am quite pleased that I have undertaken these effords.  Anyway, the files are attached, if you have questions (or I screwed things up and committed the wrong files), feel free to ask. Use what ever you like and feel is suiteable for the framework.  Cheers,  Martin (Kersten)  PS: Also the bug is solved, I have reported once. Now � till 	 are processed correctly.  PSS: I have some problems with some of the methods and some of the naming, anyway. This code wasn't reviewed but me. So again, feel free to adapt and scrap anything the way you like.   ---  **Attachments:** - [performance-testing.pdf](https://jira.spring.io/secure/attachment/10721/performance-testing.pdf) (_81.03 kB_) - [webutils.zip](https://jira.spring.io/secure/attachment/10720/webutils.zip) (_16.61 kB_)","closed","type: enhancement,","spring-projects-issues","2005-05-12T01:44:57Z","2005-05-23T00:14:13Z"
"","5814","update docus to indicate Tiles works with Struts 1.2 [SPR-1110]","**[markus](https://jira.spring.io/secure/ViewProfile.jspa?name=markuskhouri)** opened **[SPR-1110](https://jira.spring.io/browse/SPR-1110?redirect=false)** and commented  The documentation for working with Tiles (DelegatingTilesRequestProcessor) indicates it only works with Struts 1.1.  See the URLs below for examples.  The request of this task is to update the documentation to indicate that Tiles support is provided with Struts 1.2.  NOTE: I am assuming that Tiles is supported in Spring 1.2.2 with Struts 1.2.  http://www.springframework.org/docs/reference/view.html#view-tiles-dependencies  http://www.springframework.org/docs/api/org/springframework/web/struts/DelegatingTilesRequestProcessor.html  thanks, -markus    --- No further details from [SPR-1110](https://jira.spring.io/browse/SPR-1110?redirect=false)","closed","type: documentation,","spring-projects-issues","2005-07-07T06:01:05Z","2005-07-11T01:15:37Z"
"","5043","Setting wrong PageContext scope in NestedPathTag.java [SPR-313]","**[Markus Kehle](https://jira.spring.io/secure/ViewProfile.jspa?name=m_kehle)** opened **[SPR-313](https://jira.spring.io/browse/SPR-313?redirect=false)** and commented  A NotReadablePropertyException is thrown because of a wrong nestedPath. When you have more nestedPath tags in your jsp, the previosNestedPath will not properly set.  See also: http://forum.springframework.org/viewtopic.php?t=623  Class: NestedPathTag.java Method: doEndTag()  The call pageContext.setAttribute(...) (line 97) should be pageContext.setAttribute(..., PageContext.REQUEST_SCOPE).  NestedPathTag.java:  public int doStartTag() throws JspException { String resolvedPath = ExpressionEvaluationUtils.evaluateString(""path"", getPath(), pageContext); String nestedPath = (String) pageContext.getAttribute(NESTED_PATH_VARIABLE_NAME, PageContext.REQUEST_SCOPE); if (nestedPath != null) { this.previousNestedPath = nestedPath; nestedPath = nestedPath + resolvedPath; } else { nestedPath = resolvedPath; } this.pageContext.setAttribute(NESTED_PATH_VARIABLE_NAME, nestedPath, PageContext.REQUEST_SCOPE); return EVAL_BODY_INCLUDE; }      /**      * Reset any previous nestedPath value.      */     public int doEndTag() {     	if (this.previousNestedPath != null) {     		pageContext.setAttribute(NESTED_PATH_VARIABLE_NAME, this.previousNestedPath);     	}     	else {     		pageContext.removeAttribute(NESTED_PATH_VARIABLE_NAME);     	}     	return EVAL_PAGE;     }    ---  **Affects:** 1.1 final","closed","type: bug,","spring-projects-issues","2004-09-07T01:32:17Z","2004-09-07T10:20:17Z"
"","5826","SPR1116 Continued [SPR-1122]","**[Mark Vickers](https://jira.spring.io/secure/ViewProfile.jspa?name=markjvickers)** opened **[SPR-1122](https://jira.spring.io/browse/SPR-1122?redirect=false)** and commented  This is an extension to issue #5820. I'm starting a new issue because I can't put an attachment on a closed issue.  Juergen,  the underlying issue remains for me.  All Bean defs that contain the factory-method attribute are being created the first time a bean is created via autowiring.  I've attached a zip containing a basic unit test outlining the behaviour i was expecting.  I realize that this behaviour may be 'as designed', but it is a departure from how the same bean defs were treated under 1.2rc1 (where AbstractBeanFactory.getType() calls did not result in those beans being created).  ---  **Affects:** 1.2.2  **Attachments:** - [SPR-1116.zip](https://jira.spring.io/secure/attachment/10921/SPR-1116.zip) (_2.18 kB_)","closed","in: core,","spring-projects-issues","2005-07-11T09:09:44Z","2019-01-12T16:41:00Z"
"","5820","AbstractBeanFactory.getType change dramatically alters bean instantiation order [SPR-1116]","**[Mark Vickers](https://jira.spring.io/secure/ViewProfile.jspa?name=markjvickers)** opened **[SPR-1116](https://jira.spring.io/browse/SPR-1116?redirect=false)** and commented  Recent change to AbstractBeanFactory getType() causes all beans of the form \ to be instantiated as soon as the container encounters a bean using autowiring.  This leads to an unpredictable (or at least, unexpected) order of bean instantiation.  Applications working under 1.2rc1 may fail under 1.2.2.  Just want to make sure the implications of this change to the getType() method are fully thought through.  Those of us using factory-method to make legacy code amenable to IOC could have a tough time with this change.  Is the run-time type returned by the factory-method really necessary here?  Couldn't we reflectively get at the return type of factory-method instead, and wouldn't that be good enough?  Or, could we not overload the class attribute of the bean?  More details at: http://forum.springframework.org/viewtopic.php?t=6937  Note: #5819 outlines a (somewhat) related concern.  ---  **Affects:** 1.2.2  **Issue Links:** - #5812 Autoproxy problems upgrading from 1.2.1 to 1.2.2 (_**""is duplicated by""**_) - #5833 Property expansion broken by 1.2.2 (_**""is duplicated by""**_)","closed","in: core,","spring-projects-issues","2005-07-08T07:37:05Z","2019-01-11T19:32:29Z"
"","5208","DB2SequenceMaxValueIncrementer [SPR-479]","**[Mark MacMahon](https://jira.spring.io/secure/ViewProfile.jspa?name=markmacm)** opened **[SPR-479](https://jira.spring.io/browse/SPR-479?redirect=false)** and commented  I posted this to the Spring forumn but was advised to re-post it here.  I notice there is no support for a DB2SequenceMaxValueIncrementer  The implementation should be nearly identical to that of OracleSequenceMaxValueIncrementer  package org.springframework.jdbc.support.incrementer;  public class DB2SequenceMaxValueIncrementer   extends AbstractSequenceMaxValueIncrementer      protected String getSequenceQuery() {           return ""values nextval for ""+getIncrementerName();      }     --- No further details from [SPR-479](https://jira.spring.io/browse/SPR-479?redirect=false)","closed","type: enhancement,","spring-projects-issues","2004-11-23T01:01:42Z","2004-11-23T18:17:37Z"
"","4914","HibernateTransactionManager infinite loop when updating/inserting to many-to-many [SPR-182]","**[Mark Lowe](https://jira.spring.io/secure/ViewProfile.jspa?name=marklowe)** opened **[SPR-182](https://jira.spring.io/browse/SPR-182?redirect=false)** and commented  When i attempt to add to an underlying many-to-many the transaction manager keeps running and commiting the initial finds/selects and never gets as far as the saveOrUpdate in my Dao imlementation.  Hotel --- one-to-many ---> Room  --- many-to-many ---> RoomType  hotel.addRoom(Room room)  this causes the problem regardless whether i try and modify the roomType before or not.  Its not a hibernate issue as i can do this using a standard thread local session. And its not a JDBC issue as i've tried with autocommit=false with a jndi datasource setup.   --- No further details from [SPR-182](https://jira.spring.io/browse/SPR-182?redirect=false)","closed","status: declined,","spring-projects-issues","2004-06-23T00:38:27Z","2019-01-12T16:30:14Z"
"","5579","wrong package name in doc: org.springframework.mvc [SPR-853]","**[Marius Scurtescu](https://jira.spring.io/secure/ViewProfile.jspa?name=mariuss)** opened **[SPR-853](https://jira.spring.io/browse/SPR-853?redirect=false)** and commented  The section ""12.3. Controllers"" of the Reference Documentation mentions the org.springframework.mvc.Controller class.  There is no such class though, the right one seems to be org.springframework.web.servlet.mvc.Controller   ---  **Affects:** 1.2 RC1","closed","type: bug,","spring-projects-issues","2005-04-05T04:41:31Z","2005-04-05T05:22:56Z"
"","5346","SqlErrorCodesFactory should merge custom definitions instead of replacing them [SPR-618]","**[Marcus Brito](https://jira.spring.io/secure/ViewProfile.jspa?name=mbrito)** opened **[SPR-618](https://jira.spring.io/browse/SPR-618?redirect=false)** and commented  SQLErrorCodesFactory could merge custom error codes definitions where there's a custom sql-error-codes.xml file instead of replacing the default definitions. This way, users can just define ""extra"" mappings in a custom file, and don't lose the ones already defined.   --- No further details from [SPR-618](https://jira.spring.io/browse/SPR-618?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-01-13T00:06:15Z","2005-01-23T22:58:29Z"
"","5249","[sandbox] Spring-JMX: don't instantiate beans on autodetection [SPR-520]","**[Marcus Brito](https://jira.spring.io/secure/ViewProfile.jspa?name=mbrito)** opened **[SPR-520](https://jira.spring.io/browse/SPR-520?redirect=false)** and commented  JMX beans autodetection on JmxMBeanAdapter.autodetectBeans() should NOT instantiate beans (i.e., call ApplicationContext.getBean()), as this may interfere with purposefully left out lazy-init'ed beans.  Here's my scenario, so you can have some background: I have multiple implementations of the same interface, all of them declared as beans in the spring application context. The correct implementation will be decided at startup, based on a configuration value. These multiple implementations are declared as lazy-init=true, so only the required implementation will be instantiated.  Proposal: MBeanInfoAssemblers should be able to assemble all the required info based solely on static information, not requiring the bean instantiation: the BeanDefinition should provide everything the assembler needs to get this information.   ---  **Affects:** 1.2 RC1","closed","type: enhancement,","spring-projects-issues","2004-12-06T00:31:08Z","2004-12-07T22:10:35Z"
"","5248","[sandbox] Spring-JMX: interface based ModelMBeanInfoAssembler [SPR-519]","**[Marcus Brito](https://jira.spring.io/secure/ViewProfile.jspa?name=mbrito)** opened **[SPR-519](https://jira.spring.io/browse/SPR-519?redirect=false)** and commented  This is a refinement of #5247. The attached ModelMBeanAssembler only exposes attributes and operations declared in an interface; this should be a nicer default for managed beans than the current ReflectionBasedModelMBeanAssembler  ---  **Attachments:** - [InterfaceBasedModelMBeanInfoAssembler.java](https://jira.spring.io/secure/attachment/10349/InterfaceBasedModelMBeanInfoAssembler.java) (_2.68 kB_)","closed","type: enhancement,","spring-projects-issues","2004-12-05T23:36:43Z","2019-01-11T12:42:30Z"
"","5247","[sandbox] Spring-JMX: don't expose non-public members/operations [SPR-518]","**[Marcus Brito](https://jira.spring.io/secure/ViewProfile.jspa?name=mbrito)** opened **[SPR-518](https://jira.spring.io/browse/SPR-518?redirect=false)** and commented  Currently, the ReflectionBasedModelMBeanInfoAssembler will expose all attributes and operations for a given class, including package/protected/private ones -- this clutter the management interface with uneccessary information.   --- No further details from [SPR-518](https://jira.spring.io/browse/SPR-518?redirect=false)","closed","type: enhancement,","spring-projects-issues","2004-12-05T23:35:11Z","2004-12-06T04:31:00Z"
"","5246","[sandbox] Spring-JMX: start connector servers on a daemon thread [SPR-517]","**[Marcus Brito](https://jira.spring.io/secure/ViewProfile.jspa?name=mbrito)** opened **[SPR-517](https://jira.spring.io/browse/SPR-517?redirect=false)** and commented  I'm not sure if I'm supposed to open issues on sandbox components, but I couldn't find any other place to do that. Anyways...  org.springframework.jmx.remote.ConnectorServerMBean starts a JMX connector with a user-specified service URL. The problem is, if you're on a multithreaded application, this connector will be started on a non-deaemon thread, preventing the application to shutdown when all other threads are already terminated.  Of course, calling JMXConnectorServer.stop() would stop the connector thread, but find a proper hook in your application to shutdown the connection isn't always clear, and takes away the non-intrusiveness of the Spring JMX integration.  So, I'm proposing that ConnectorServerMBean starts the connector on a separate, daemon thread. This way the application will be able to shutdown when all user threads are gone.   --- No further details from [SPR-517](https://jira.spring.io/browse/SPR-517?redirect=false)","closed","type: enhancement,","spring-projects-issues","2004-12-05T23:32:54Z","2004-12-06T21:54:59Z"
"","5215","RdbmsOperation shouldn't log as it's subclasses [SPR-486]","**[Marcus Brito](https://jira.spring.io/secure/ViewProfile.jspa?name=mbrito)** opened **[SPR-486](https://jira.spring.io/browse/SPR-486?redirect=false)** and commented  Why should RdbmsOperation log SQL issues as it's subclasses? I have hundreds (literally) of SQL operations in my project, and they always spit out ""SQL Statement [...] compiled"" during the system startup.  Since the operations are distributed among many modules, packages and (inner) classes, turning off SQL logging is way too cumbersome. IMHO, RdbmsOperation should log SQL statements in it's own categary, not in it's subclasses category.  This is arguable, I know -- one can say ""oh, but what if I can see the log for one statement and not for the other?"", but my experience tells that you usually want SQL logging for all your application, or don't want SQL logging at all -- this would be way easier to do if all logging was on a single category.  ALTERNATIVE: leave RdbmsOperation as it is today (i.e., logging on it's subclasses categories), but at least log SQL statements as DEBUG, not INFO.   ---  **Affects:** 1.1 final","closed","type: bug,","spring-projects-issues","2004-11-23T23:21:20Z","2004-12-01T21:26:05Z"
"","5154","Constructor autowire fails if there's at least one abstract bean in context [SPR-424]","**[Marcus Brito](https://jira.spring.io/secure/ViewProfile.jspa?name=mbrito)** opened **[SPR-424](https://jira.spring.io/browse/SPR-424?redirect=false)** and commented  Constructor autowiring will always fail if there's at least one abstract bean in context, specially if this is the first defined bean. The problem here is that DefaultListableBeanFactory.findMatchingBeans() will try to instantiate abstract beans, which will always fail.  Attached goes an example applicationContext.xml and a fairly detailed debug output (and stack trace).   ---  **Affects:** 1.1 final  **Attachments:** - [spring-autowire-trace.txt](https://jira.spring.io/secure/attachment/10296/spring-autowire-trace.txt) (_18.37 kB_)","closed","in: core,","spring-projects-issues","2004-10-25T02:14:09Z","2004-10-25T02:21:16Z"
"","4936","Handle Text, Comment and CDATA sections in bean values [SPR-205]","**[Marcus Brito](https://jira.spring.io/secure/ViewProfile.jspa?name=mbrito)** opened **[SPR-205](https://jira.spring.io/browse/SPR-205?redirect=false)** and commented  As discussed in this thread  http://article.gmane.org/gmane.comp.java.springframework.user/2878  Spring's XML parser should properly handle Text, Comment and CDATA nodes while parsing the configuration file. The patch (which should be applied to spring's top level directory) corrects this issue.   ---  **Affects:** 1.0.2  **Attachments:** - [comments-cdata.diff](https://jira.spring.io/secure/attachment/10124/comments-cdata.diff) (_4.01 kB_)","closed","type: enhancement,","spring-projects-issues","2004-07-04T22:55:08Z","2004-07-08T08:46:48Z"
"","4924","Documentation Patch [SPR-192]","**[Marc Portier](https://jira.spring.io/secure/ViewProfile.jspa?name=mpo@outerthought.org)** opened **[SPR-192](https://jira.spring.io/browse/SPR-192?redirect=false)** and commented  Given the additional support for reading map-entries through the BeanWrapperImpl it seems fair to add the following to the reference-documentation:  Index: docs/reference/src/validation.xml  ---  RCS file: /cvsroot/springframework/spring/docs/reference/src/validation.xml,v retrieving revision 1.7 diff -u -r1.7 validation.xml --- docs/reference/src/validation.xml   1 Apr 2004 21:40:41 -0000       1.7 +++ docs/reference/src/validation.xml   28 Jun 2004 13:09:39 -0000 @@ -131,6 +131,14 @@ \list\ or other \naturally ordered\ collection\ \ + +        +         account[company.name]  +   +         Indicates the value of the map-entry indexed by the key  +         company.name of the  +         Map property account.   +                                            ---  **Affects:** 1.1 RC1","closed","type: enhancement,","spring-projects-issues","2004-06-28T00:29:20Z","2019-01-13T22:54:48Z"
"","4923","BeanWrapperImpl marks readable properties as 'unradable' (inside array's and java.util.Properties) [SPR-191]","**[Marc Portier](https://jira.spring.io/secure/ViewProfile.jspa?name=mpo@outerthought.org)** opened **[SPR-191](https://jira.spring.io/browse/SPR-191?redirect=false)** and commented  I've just made a simple bean with  setStringArray(String[] arr); setProperties(Properties props);  in combination with   \ \one,two,three,four\ \ \ \ 1. inline properties file:    test.one = yes    test.two = no    \  \ \  then I wrapped the configured bean in a BeanWrapperImpl and found the following to be counter-intuitive:  1/ wrapper.getPropertyValue(""stringArray[2]"") returns ""three"" (no surprise) BUT: wrapper.isReadable(""stringArrray[2]"") returns false?  2/ wrapper.getPropertyValue(""properties[test.two]"") returns ""no"" (no surprise) BUT: wrapper.isReadable(""properties[test.two]"") returns false?  briefly browsing the cvs the reason for the mismatch between the two methods seems to come from how they lookup their propertyDescriptor.  line 993: PropertyDescriptor pd = getPropertyDescriptorInternal(propertyName);  versus lines 531-538: public Object getPropertyValue(String propertyName) throws ...{ BeanWrapperImpl nestedBw = ... String[] tokens = getPropertyNameTokens(getFinalPath(nestedBw, propertyName)); return nestedBw.getPropertyValue(tokens[0], tokens[1], tokens[2]); }  protected Object getPropertyValue(String propertyName, String actualName, String key) throws BeansException {      PropertyDescriptor pd = getPropertyDescriptorInternal(actualName);     ...  notice how actualName is used here and not propertyName!  it's probably fair to suspect an equal mismatch between isWritableProperty(...) and setPropertyValue(...)?   --- No further details from [SPR-191](https://jira.spring.io/browse/SPR-191?redirect=false)","closed","in: core,","spring-projects-issues","2004-06-28T00:14:02Z","2004-07-06T20:05:11Z"
"","5539","ManagedAttribute currencyTimeLimit has no effect [SPR-812]","**[Magnus Heino](https://jira.spring.io/secure/ViewProfile.jspa?name=magnus)** opened **[SPR-812](https://jira.spring.io/browse/SPR-812?redirect=false)** and commented  currencyTimeLimit=-1 below has no effect since it doesn't override the default currencyTimeLimit=0 provided by ManagedResource. AFAIK from the spec I should be able to override currencyTimeLimit for each managed attribute?  `@ManagedResource`(objectName=""Scheduler"", description=""The scheduler is responsible for running jobs"") public class SchedulerImpl extends java.lang.Thread implements ApplicationListener, ApplicationContextAware, InitializingBean, BeanNameAware, Scheduler {      @ManagedAttribute(description=""Number of works in the queue waiting to be executed"", currencyTimeLimit=-1)     public String getNow() {     	return new Date().toString();     }  }   ---  **Affects:** 1.2 RC1","closed","type: bug,","spring-projects-issues","2005-03-22T23:54:55Z","2005-03-25T01:01:33Z"
"","5355","Missing dependencies in project.xml and project.properties [SPR-627]","**[Magnus Heino](https://jira.spring.io/secure/ViewProfile.jspa?name=magnus)** opened **[SPR-627](https://jira.spring.io/browse/SPR-627?redirect=false)** and commented  Index: project.properties  ---  RCS file: /cvsroot/springframework/spring/project.properties,v retrieving revision 1.65 diff -u -r1.65 project.properties --- project.properties	20 Dec 2004 12:06:59 -0000	1.65 +++ project.properties	15 Jan 2005 12:23:57 -0000 @@ -172,11 +172,10 @@ maven.jar.concurrent = ${basedir}/lib/concurrent/concurrent-1.3.4.jar maven.jar.cos = ${basedir}/lib/cos/cos.jar maven.jar.freemarker = ${basedir}/lib/freemarker/freemarker.jar -maven.jar.ibatis-common = ${basedir}/lib/ibatis/ibatis-common.jar maven.jar.ibatis-sqlmap = ${basedir}/lib/ibatis/ibatis-sqlmap.jar maven.jar.ibatis-sqlmap-2 = ${basedir}/lib/ibatis/ibatis-sqlmap-2.jar -maven.jar.itext = ${basedir}/lib/itext/itext-1.02b.jar -maven.jar.jasperreports = ${basedir}/lib/jasperreports/jasperreports-0.6.2.jar +maven.jar.itext = ${basedir}/lib/itext/itext-1.1.4.jar +maven.jar.jasperreports = ${basedir}/lib/jasperreports/jasperreports-0.6.3.jar maven.jar.jdo = ${basedir}/lib/jdo/jdo.jar maven.jar.jms = ${basedir}/lib/j2ee/jms.jar maven.jar.ehcache = ${basedir}/lib/ehcache/ehcache-1.0.jar @@ -187,7 +186,7 @@ maven.jar.j2ee-management = ${basedir}/lib/j2ee/j2ee-management.jar maven.jar.jsf = ${basedir}/lib/jsf/jsf-api.jar maven.jar.jotm = ${basedir}/lib/jotm/jotm.jar -maven.jar.db-ojb = ${basedir}/lib/ojb/db-ojb-1.0.0.jar +maven.jar.db-ojb = ${basedir}/lib/ojb/db-ojb-1.0.1.jar maven.jar.quartz = ${basedir}/lib/quartz/quartz.jar maven.jar.xapool = ${basedir}/lib/jotm/xapool.jar maven.jar.jaxrpc = ${basedir}/lib/j2ee/jaxrpc.jar Index: project.xml  ---  RCS file: /cvsroot/springframework/spring/project.xml,v retrieving revision 1.57 diff -u -r1.57 project.xml --- project.xml	19 Dec 2004 21:11:06 -0000	1.57 +++ project.xml	15 Jan 2005 12:23:57 -0000 @@ -341,11 +341,6 @@ \ \ \ibatis\  ---      ibatis-common  -         1.3.1  -           -           -              ibatis            ibatis-sqlmap            1.3.1         @@ -356,7 +351,7 @@ \ \ \itext\  ---      1.02b  +              1.1.4                          jamon  @@ -366,7 +361,7 @@ \ \jasperreports\ \jasperreports\  ---      0.6.2  +              0.6.3                          jdom  ---  **Affects:** 1.1.4","closed","type: bug,","spring-projects-issues","2005-01-14T22:30:08Z","2019-01-13T22:52:54Z"
"","5754","Annotation to validate required bean attributes [SPR-1047]","**[Magnus Heino](https://jira.spring.io/secure/ViewProfile.jspa?name=magnus)** opened **[SPR-1047](https://jira.spring.io/browse/SPR-1047?redirect=false)** and commented  Bean definitions are required to provide a value for bean attributes defined as required using jdk1.5 annotation.  This provides a check to validate that values are not ""forgotten"" when  creating new bean definitions. Values that are not properly set in the  bean definition and are not be used immediately after bean instantiation will not be found otherwise.  package se.lantmateriet.jollen.bryggan.support;  import java.lang.annotation.Documented; import java.lang.annotation.ElementType; import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; import java.lang.annotation.Target;  /** * JDK 1.5+ method-level annotation that indicates that the value * is required to be non-null. *  * `@author` Magnus Heino   */   `@Target`(ElementType.FIELD)   `@Retention`(RetentionPolicy.RUNTIME)   `@Documented`   public `@interface` RequiredAttribute {   }  /** * */ package se.lantmateriet.jollen.bryggan.support;  import java.lang.reflect.Field;  import org.springframework.beans.BeansException; import org.springframework.beans.MutablePropertyValues; import org.springframework.beans.factory.config.BeanDefinition; import org.springframework.beans.factory.config.BeanFactoryPostProcessor; import org.springframework.beans.factory.config.ConfigurableListableBeanFactory; import org.springframework.beans.factory.support.BeanDefinitionValidationException;  /** * `@author` maghei *   */ public class RequiredAttributeValidator implements BeanFactoryPostProcessor {      /* (non-Javadoc)      * @see org.springframework.beans.factory.config.BeanFactoryPostProcessor#postProcessBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)      */     public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {          	for(String beanName: beanFactory.getBeanDefinitionNames()) {     		BeanDefinition beanDefinition = beanFactory.getBeanDefinition(beanName);     		     		if(beanDefinition.isAbstract()) {     			continue;     		}     		     		MutablePropertyValues beanProperties = beanDefinition.getPropertyValues();     					     		for(Field field: beanFactory.getType(beanName).getDeclaredFields()) {     			RequiredAttribute requiredAttribute = field.getAnnotation(RequiredAttribute.class);     			if(requiredAttribute != null) {     				Object value = beanProperties.getPropertyValue(field.getName());     				if(value == null) {						     					throw new BeanDefinitionValidationException(""Required attribute '"" + field.getName() + ""' of class '"" + beanDefinition.getClass().getName() + ""' defined in bean '"" + beanName + ""' in file '"" + beanDefinition.getResourceDescription() + ""' is  null."");     				}      			}     		}		     		     	}     	     }  }  ---  **Attachments:** - [RequiredPropertyValidator.java](https://jira.spring.io/secure/attachment/11395/RequiredPropertyValidator.java) (_9.67 kB_) - [RequiredPropertyValidator.java](https://jira.spring.io/secure/attachment/11187/RequiredPropertyValidator.java) (_8.82 kB_)  **Issue Links:** - #6119 Annotations for dependency checking (_**""is duplicated by""**_)","closed","type: enhancement,","spring-projects-issues","2005-06-15T19:20:45Z","2019-01-11T18:37:12Z"
"","5359","MultipartRequest doesn't work with a wizard controller [SPR-631]","**[Maarten Donders](https://jira.spring.io/secure/ViewProfile.jspa?name=mdond)** opened **[SPR-631](https://jira.spring.io/browse/SPR-631?redirect=false)** and commented  CommonsMultipartResolver doesn't work with a wizard controller. The wizard-parameters of the request (i.e. _target, _finish, _cancel) get lost in CommonsMultipartResolver and therefore the wizard can't target the right page/action.  It is easy to fix the bug. Just copy the parameters of the request and add them to the extracted parameters right before creating the DefaultMultipartHttpServletRequest:  public MultipartHttpServletRequest resolveMultipart (HttpServletRequest request) throws MultipartException { DiskFileUpload fileUpload = this.fileUpload; String enc = determineEncoding(request);  // copy parameters		 Map requestParameters = request.getParameterMap();  ...  // before creating the Request add the copied parameters parameters.putAll(requestParameters); return new DefaultMultipartHttpServletRequest(request,   multipartFiles, parameters); ... }   ---  **Affects:** 1.1.3","closed","type: bug,","spring-projects-issues","2005-01-18T00:13:45Z","2005-03-20T05:14:32Z"
"","5523","LobHandler : adding getXXX methods taking columnName  [SPR-796]","**[Maarten Bosteels](https://jira.spring.io/secure/ViewProfile.jspa?name=maarten)** opened **[SPR-796](https://jira.spring.io/browse/SPR-796?redirect=false)** and commented  Would be nice if LobHandler supported specifying the column by name. The implementation is of course trivial (and attached).    ---  **Affects:** 1.1.5  **Attachments:** - [DefaultLobHandler.java](https://jira.spring.io/secure/attachment/10601/DefaultLobHandler.java) (_5.71 kB_) - [LobHandler.java](https://jira.spring.io/secure/attachment/10600/LobHandler.java) (_8.20 kB_) - [OracleLobHandler.java](https://jira.spring.io/secure/attachment/10602/OracleLobHandler.java) (_16.97 kB_)","closed","type: enhancement,","spring-projects-issues","2005-03-19T06:30:54Z","2005-03-20T03:52:01Z"
"","5510","VelocityLayoutView analogous to VelocityLayoutServlet (in velocity-tools) [SPR-783]","**[Maarten Bosteels](https://jira.spring.io/secure/ViewProfile.jspa?name=maarten)** opened **[SPR-783](https://jira.spring.io/browse/SPR-783?redirect=false)** and commented  It would be nice if Spring had support for layout templates, analogous to org.apache.velocity.tools.view.servlet.VelocityLayoutServlet.  I'll attach an implementation. Unlike VelocityLayoutServlet, it does not support setting the layout template through a request parameter.   ---  **Attachments:** - [VelocityLayoutView.java](https://jira.spring.io/secure/attachment/10587/VelocityLayoutView.java) (_2.84 kB_)","closed","type: enhancement,","spring-projects-issues","2005-03-15T00:41:00Z","2005-03-18T06:16:58Z"
"","5858","Switching implementation with PropertyPlaceholderConfigurer [SPR-1156]","**[lw](https://jira.spring.io/secure/ViewProfile.jspa?name=larry)** opened **[SPR-1156](https://jira.spring.io/browse/SPR-1156?redirect=false)** and commented  The org.springframework.beans.factory.config.PropertyPlaceholderConfigurer does not work with the class attribute on a bean.  I wan't to switch implementations of a bean by changing a property file:  I have for example in production: \  In the dev environment I cannot use the same implementation so I have: \  Instead of manually changing the file (I cannot override it, I'm using a dispatcher servlet with Spring MVC) I would like to have: \  And in a configuration file I would have: implementation.login=com.xyz.LoginImpl or whatever I like.    ---  **Affects:** 1.2.3","closed","type: enhancement,","spring-projects-issues","2005-07-19T22:37:50Z","2005-07-20T04:54:09Z"
"","5344","Jakarta commons-logging classloader issue on session close [SPR-616]","**[Lou Sacco](https://jira.spring.io/secure/ViewProfile.jspa?name=lousacco)** opened **[SPR-616](https://jira.spring.io/browse/SPR-616?redirect=false)** and commented  We seem to be experiencing an intermittent classloader issue related to Jakarta commons-logging. We have two have two separate EARs loaded in our cluster as applications. One application calls the other application to perform some persistence activity through Spring/Hibernate.  Eventually we see the error below if we have the commons-logging jar in each of the app-inf/lib directories for each application.  If I move the jar up to the system classpath this issue goes away, but then I start seeing Class NoDef errors relating to some of the underlying Spring/Hibernate classes.  Ultimately, then I have to move all JOS jars up to the system classpath to resolve these issues.  This is obviously undesired because we may want to be able to update to a different version of the jars in one app but maybe not the other.  After reading this article (http://www.qos.ch/logging/thinkAgain.jsp), I am starting to suspect the way commons-logging wraps the classloaders because presumably it does this as an automatic discovery process to determine which underlying logging tool is on my classpath.  Could this be of concern?  Is there some further configuration I could do to avoid this to allow me to keep the jars in the app-inf/lib?  Please let me know if you need additional information.  Note: it is consistently this stacktrace I see when the failure does happen.  #### \ \ \  \   \ \ #### \ \ \  \   \  #### \ \ \  \   \  #### \ \ \  \   \  #### \ \ \  \   \  #### \ \ \  \   \  #### \ \ \  \   \  #### \ \ \  \   \  #### \ \ \  \   \  #### \ \ \  \   \  #### \ \ \     \  #### \ \ \     \  #### \ \ \  \   \ \ #### \ \ \     \","closed","in: core,","spring-projects-issues","2005-01-12T12:07:47Z","2019-01-12T16:41:51Z"
"","5261","Spring JtaSessionSynchronizer not able to close session when used across Weblogic Domains [SPR-532]","**[Lou Sacco](https://jira.spring.io/secure/ViewProfile.jspa?name=lousacco)** opened **[SPR-532](https://jira.spring.io/browse/SPR-532?redirect=false)** and commented  Spring Team,  I have noticed that Spring will not close sessions when running an XA transaction between separate weblogic domain instances.  In the one domain, there exists a WLI Business Process that initiates a transaction.  It then makes a remote call to an EJB in a separate process in another domain.  This EJB uses Spring's HibernateTemplate to store information to one database and uses CMT Required to join the existing transaction.  Once it returns, the WLI business process calls some of its own EJBs (w/ CMT Required too) that wrap calls to underlying Spring/Hibernate DAOs to persist data into a separate database.  Upon completion, we see the transaction commit, but in the log we see an IllegalStateException saying it can't find the session (see below).  This is strange to us, because it found the bound session when flushing, just not when closing.  This in turn causes all sorts of unexplainable problems like NoSuchElementExceptions, etc.  When I move the JPD to the same server that is running the EJB, I no longer see this error and I see a corresponding close for each session opened.   Keep in mind, I do no special handling of sessions, as I expect HibernateTemplate will take care of this for me (i.e., no SessionFactoryUtil calls).  Please let me know your opinion on this issue.  My original post can be found here showing more details: http://forum.springframework.org/viewtopic.php?t=2411  Thanks, Lou  [code] #### \ \ \ \    \","closed","type: bug,","spring-projects-issues","2004-12-08T15:58:54Z","2004-12-18T21:32:13Z"
"","5035","shell scripts in samples should not have DOS line delimiters [SPR-305]","**[Loren Rosen](https://jira.spring.io/secure/ViewProfile.jspa?name=loren%20rosen)** opened **[SPR-305](https://jira.spring.io/browse/SPR-305?redirect=false)** and commented  The shell scripts in samples/jpetstore/db/hsqldb has DOS line delimiters instead of Unix delimiters. This can cause attempts to run this sample application to fail.  What happens is that, when you start up the database via server.sh, the shell sees the end of the command as '-database jpetstore\c', where by \c I mean the carriage return character. Then when the sample code itself attempts to query the database, it gets an error since the database jpetstore (with no terminating carriage return) doesn't exist:  org.springframework.jdbc.BadSqlGrammarException: Bad SQL grammar [(mapped statement)] in task 'SqlMapTemplate'; nested exception is java.sql.SQLException: Table not found: CATEGORY in statement [select CATID, NAME, DESCN from CATEGORY where CATID = 'CATS'] org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.translate(SQLErrorCodeSQLExceptionTranslator.java:254) org.springframework.orm.ibatis.SqlMapTemplate.execute(SqlMapTemplate.java:116) org.springframework.orm.ibatis.SqlMapTemplate.executeQueryForObject(SqlMapTemplate.java:152) org.springframework.samples.jpetstore.dao.ibatis.SqlMapCategoryDao.getCategory(SqlMapCategoryDao.java:17) org.springframework.samples.jpetstore.domain.logic.PetStoreImpl.getCategory(PetStoreImpl.java:124) sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) java.lang.reflect.Method.invoke(Method.java:324) org.springframework.aop.framework.AopProxyUtils.invokeJoinpointUsingReflection(AopProxyUtils.java:60) org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:150) org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:119) org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:56) org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:139) org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:152) $Proxy0.getCategory(Unknown Source) org.springframework.samples.jpetstore.web.spring.ViewCategoryController.handleRequest(ViewCategoryController.java:31) org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:44) org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:495) org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:321) javax.servlet.http.HttpServlet.service(HttpServlet.java:810)  To the beginning user it simply appears that the samples are broken. Some beginning users might even jump to the conclusion that spring itself doesn't work, since here even the sample code gets errors about bad SQL grammar. It took me most of a morning to figure out the problem.  Presumably the problem occurs with the scripts in the petclinic sample as well, though I haven't tried them.  Note also that it's possible some Unix shells could treat DOS line delimiters the same as Unix delimiters, and so not exhibit this bug. Here I'm using GNU bash, version 2.05b.0(1)-release (powerpc-apple-darwin7.0)  ---  **Affects:** 1.1 RC2  **Issue Links:** - #7861 DOS chars in sample app shell scripts (_**""is duplicated by""**_)","closed","type: bug,","spring-projects-issues","2004-09-01T04:51:04Z","2019-01-11T14:03:36Z"
"","5828","JasperReportsHtmlView does not reflect the encoding of the JasperReports output in the response [SPR-1124]","**[Lok Chan](https://jira.spring.io/secure/ViewProfile.jspa?name=commandos)** opened **[SPR-1124](https://jira.spring.io/browse/SPR-1124?redirect=false)** and commented  JasperReportsHtmlView can't correctly encode the output HTML as defined exporter parameter. I suspect that JasperReportsCsvView does have the same issue.   ---  **Affects:** 1.2 RC2","closed","type: bug,","spring-projects-issues","2005-07-12T03:00:48Z","2012-06-19T03:54:20Z"
"","5266","Iterator returned in PersistenceBrokerTemplate unusable since broker is closed [SPR-537]","**[Liang Cheng](https://jira.spring.io/secure/ViewProfile.jspa?name=lcheng)** opened **[SPR-537](https://jira.spring.io/browse/SPR-537?redirect=false)** and commented  All iterators returned from iterator-based queries in PersistenceBrokerTemplate are more or less unusable due to the fact the returned iterator implementation requires an open db connection. PersistenceBrokerTemplate closes the broker instance before returning the result, when calling iterator.next() a ResourceClosedException will be thrown.  Affected methods are:  -getIteratorByQuery() -getReportQueryIteratorByQuery()  Possible workaround:  Putting all iterator elements in a disconnected collection before returning. Below is a short snippet:  public Iterator getReportQueryIteratorByQuery(final Query query) { return (Iterator) execute(new PersistenceBrokerCallback() { public Object doInPersistenceBroker(PersistenceBroker pb) throws PersistenceBrokerException { ArrayList list = new ArrayList(); Iterator iter = pb.getReportQueryIteratorByQuery(query); while (iter.hasNext()) list.add(iter.next()); return list.iterator(); } }); }    --- No further details from [SPR-537](https://jira.spring.io/browse/SPR-537?redirect=false)","closed","status: declined,","spring-projects-issues","2004-12-09T00:44:34Z","2019-01-12T16:41:58Z"
"","5298","As discussed on JavaPolis MessageSelectors on the JMSTemplate and JMSTemplate102 [SPR-569]","**[Leo de Blaauw](https://jira.spring.io/secure/ViewProfile.jspa?name=ldblaauw)** opened **[SPR-569](https://jira.spring.io/browse/SPR-569?redirect=false)** and commented  Hey,  Thanks for the help with my JMSTemplate stuff and the callback to use JMS MessageSelector from within the Spring JMSTemplate !!  We allready discussed this could be a good feature but I will enter it here also :  - Exposing of the JMS MessageSelectors on the JMSTemplate so the   messagereceive functions can use this to select on the queues.  Sincere greetz Leo de Blaauw   --- No further details from [SPR-569](https://jira.spring.io/browse/SPR-569?redirect=false)","closed","type: enhancement,","spring-projects-issues","2004-12-17T04:04:37Z","2004-12-20T09:14:41Z"
"","5622","hibernate LocalSessionFactoryBean mappingDirectoryLocations doen't resolve classpath*: [SPR-895]","**[Lenny Marks](https://jira.spring.io/secure/ViewProfile.jspa?name=lenny)** opened **[SPR-895](https://jira.spring.io/browse/SPR-895?redirect=false)** and commented  When I run unit tests(dbunit) I have a slighltly modified version of my real mapping files in a separate directory structure than my class files, both of which are included in the classpath. If I use classpath:/org/aps/eop/model, the mappingDirectoryLocations are only found if I make sure the path with the mapping files occurs first in the classpath. If I understand correctly, I would normally use classpath*: paths to look for all matching resources in classpath, but this is not working either.  ex.  beans = new ClassPathXmlApplicationContext(new String[] { ""integration-test-beans.xml"" });  ---  integration-test-beans.xml  \ \ \ \xxx\ \xxx\ \org.hibernate.dialect.Oracle9Dialect\ \xxxxx\ \oracle.jdbc.driver.OracleDriver\ \ \ \ \\classpath*:/org/aps/eop/model\\ \ \  ---  Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sessionFactory' defined in class path resource [integration-test-beans.xml]: Initialization of bean failed; nested exception is java.io.FileNotFoundException: class path resource [classpath*:/org/aps/eop/model] cannot be resolved to URL because it does not exist at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:362) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:257) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:222) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:146) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:285) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:317) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:80) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:65) at org.aps.eop.util.BaseIntegrationTestCase.\(BaseIntegrationTestCase.java:100) ... 11 more Caused by: java.io.FileNotFoundException: class path resource [classpath*:/org/aps/eop/model] cannot be resolved to URL because it does not exist at org.springframework.core.io.ClassPathResource.getURL(ClassPathResource.java:147) at org.springframework.core.io.ClassPathResource.getFile(ClassPathResource.java:154) at org.springframework.orm.hibernate3.LocalSessionFactoryBean.afterPropertiesSet(LocalSessionFactoryBean.java:487) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1075) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:349) ... 19 more  ---  **Affects:** 1.2 final","closed","in: core,","spring-projects-issues","2005-04-20T14:27:29Z","2019-01-13T22:51:57Z"
"","5674","Hibernate aggressive release and read-only/read-write transactions [SPR-960]","**[Lawrence Ho](https://jira.spring.io/secure/ViewProfile.jspa?name=lawrenceho)** opened **[SPR-960](https://jira.spring.io/browse/SPR-960?redirect=false)** and commented  Since there is no reply (as of writing) to my forum post, I decide to bring it here, as the out-of-the-box quality of Spring is affected:  http://forum.springframework.org/viewtopic.php?t=5583  Summary: The read-only flag of JDBC connections (from underlying connection pool) may not be properly reset when using ""after_transaction"" Hibernate release mode (Spring 1.2 default). Subsequent read-write transaction will result in a SQLException, if the connection pool decides to give it the connection which is not properly reset after previous use.  For my configuration, the exception encountered is: org.springframework.jdbc.UncategorizedSQLException: (HibernateTransactionManager): encountered SQLException [ERROR: transaction is read-only]; nested exception is java.sql.SQLException: ERROR: transaction is read-only  Possible solutions may include the choosing of less aggressive ""on_close"" as the default Hibernate release mode for Spring, or the addition of some kinds of mechanism to ensure the read-only flag of JDBC connections are reset properly when they are being closed in different situations, in this case, org.springframework.orm.hibernate3.LocalDataSourceConnectionProvider.   ---  **Affects:** 1.2 final","closed","type: bug,","spring-projects-issues","2005-05-17T13:31:40Z","2005-05-22T20:35:28Z"
"","5306","HibernateTemplate Javadoc mistake [SPR-578]","**[Lawrence Ho](https://jira.spring.io/secure/ViewProfile.jspa?name=lawrenceho)** opened **[SPR-578](https://jira.spring.io/browse/SPR-578?redirect=false)** and commented  For the Javadoc of createCriteria,  public void Object doInHibernate(Session session) throws HibernateException {  should be  public Object doInHibernate(Session session) throws HibernateException {   ---  **Affects:** 1.1.3","closed","type: bug,","spring-projects-issues","2004-12-21T02:00:21Z","2004-12-21T03:23:54Z"
"","4979","Minor mistake in documentation chapter 3 [SPR-248]","**[Lawrence Ho](https://jira.spring.io/secure/ViewProfile.jspa?name=lawrenceho)** opened **[SPR-248](https://jira.spring.io/browse/SPR-248?redirect=false)** and commented  In section 3.1, the last sentence of the second paragraph is:  ""...and behavior should be considered to applly to ApplicationContexts as well.""  applly should be apply.   ---  **Affects:** 1.1 RC2","closed","in: core,","spring-projects-issues","2004-08-07T01:49:53Z","2004-08-07T21:20:36Z"
"","5785","Support wild-card action paths in Struts integration classes [SPR-1080]","**[Laurie Harper](https://jira.spring.io/secure/ViewProfile.jspa?name=laurie)** opened **[SPR-1080](https://jira.spring.io/browse/SPR-1080?redirect=false)** and commented  Struts 1.2 introduced support for wild-cards in action mapping paths. Unfortunately, DelegatingActionProxy is unable to lookup beans based on such paths as it uses the expanded path (i.e. what the wild-card path matched.  DelegatingActionProxy, and possibly DelegatingRequestProcessor, DelegatingTilesRequestProcessor and DelegatingActionUtils, need to support the same wild-card rules as Strut's ActionMapping in order to interoperate with this type of configuration.  See http://struts.apache.org/userGuide/building_controller.html#action_mapping_wildcards for details on Struts' wild-card matching rules.   --- No further details from [SPR-1080](https://jira.spring.io/browse/SPR-1080?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-06-27T10:15:40Z","2012-06-19T09:37:32Z"
"","5013","Dynamic Language Support [SPR-282]","**[larry williams](https://jira.spring.io/secure/ViewProfile.jspa?name=larrywilliams)** opened **[SPR-282](https://jira.spring.io/browse/SPR-282?redirect=false)** and commented  Support for beans written in dynamic scripting languages like Groovy and Jython.  This is already in the sandbox http://cvs.sourceforge.net/viewcvs.py/springframework/spring/sandbox/src/org/springframework/beans/factory/  But when will it be released?  See: http://www.almaer.com/blog/archives/000356.html   ---  3 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2004-08-23T23:03:28Z","2012-06-19T03:54:02Z"
"","5582","Make use of TransactionAwareDataSourceProxy transparent [SPR-856]","**[Lance Eason](https://jira.spring.io/secure/ViewProfile.jspa?name=leason)** opened **[SPR-856](https://jira.spring.io/browse/SPR-856?redirect=false)** and commented  Declarative transaction management appears to work when DataSourceTransactionManager is handed a datasource that's wrapped by a TransactionAwareDataSourceProxy but in reality all transactional semantics are lost.  I'd be equally satisfied with any of the following three improvements: 1) This was clearly documented 2) An exception, e.g. IllegalStateException, was thrown with this configuration 3) It worked  From the mailing list:  From: Matt Sgarlata [mailto:sgarlatm@users.sourceforge.net] Sent: Tuesday, April 05, 2005 3:18 PM To: springframework-user@lists.sourceforge.net Subject: [Springframework-user] Re: limitation with TransactionAwareDataSourceProxy  Hi Lance,  TransactionManagers were written with the intent that they would be passed the raw underlying datasource.  However, I think you have a good point: TransactionManagers should be able to work with either the TransactionalAwareDataSourceProxy or with the raw underlying DataSource.  The TransactionalAwareDataSourceProxy is a Spring class, after all. Perhaps you can enter this as an enhancement request in JIRA?  Matt  Lance Eason wrote:  > Hi, newbie to Spring and trying to get declarative transactions > working. > I spent the morning debugging an issue related to > TransactionAwareDataSourceProxy so I thought I'd call attention to it > and hopefully save the next guy some time. >  > I've got legacy data access classes (converting over from EJB) that I > don't want to have to re-write immediately to be Spring transaction > friendly.  From the documentation I learned that Spring will support > this, I can just wrap my DataSource with a > TransactionalAwareDataSourceProxy and when my classes call > DataSource.getConnection() they'll get the transaction's connection > and > be none the wiser.  So I took a stab at it and found I wasn't getting > transactional behavior.  My mapping file looked like this: >  >  > \ > \ > \ > \${jdbc.driver.name}\ > \ > \ > \${jdbc.bmi.server.url}\ > \ > \ > \${jdbc.bmi.username}\ > \ > \ > \${jdbc.bmi.password}\ > \ > \ > \ > \ >  >  \ >  >> \ >> \  \ \  > \ >    \ > \  \  I have a DBCP BasicDataSoure wrapped by a TransactionAwareDataSourceProxy and that datasource is being injected into my legacy JDBC class as well as the transaction manager.  The legacy JDBC class is called by a higher level class wrapped with a TransactionProxyFactoryBean (omitted).  So theoretically my transaction manager will start a transaction when it hits my higher level class and the following line in my legacy JDBC class will find the connection associated with the transaction via the magic of the proxy:  Connection connection = dataSource.getConnection();  As it turns out theory didn't hold, I wasn't getting transactional behavior.  Adding debugging to my JDBC class revealed I was getting a different connection where autocommit was set to true:  Connection connection = dataSource.getConnection(); System.err.println(""using connection: "" + connection); System.err.println(""auto? "" + connection.getAutoCommit());  Connection connection2 = DataSourceUtils.getConnection(dataSource); System.err.println(""util connection: "" + connection2); System.err.println(""auto? "" + connection2.getAutoCommit());  with the output:  using connection: org.apache.commons.dbcp.PoolableConnection@fe1904 auto? true util connection: org.apache.commons.dbcp.PoolableConnection@adb1d4 auto? false  Turns out the problem is with passing the TransactionAwareDataSourceProxy to the transaction manager, specifically with this stacktrace:  at  org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(Data  > SourceUtils.java:177) > at  org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy.getC  > onnection(TransactionAwareDataSourceProxy.java:79) > at  org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(Data  > SourceUtils.java:177) > at  org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSo  > urceUtils.java:152) > at  org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin  > (TestTransactionManager.java:101) >  > The transaction manager is starting a new transaction so it's calling > DataSourceUtils.getConnection/doGetConnection to get a connection for > the the transaction.  The datasource is really a proxy that turns > around > and calls DataSourceUtils.doGetConnection a second nested time. > Something in the nesting screws things up. >  > Splitting up my bean definition for my datasource into two bean > definitions, one for the raw datasource and one for the proxied data > source, and passing the raw datasource to the transaction manager > fixes > the problem: >  > \ class=""org.apache.commons.dbcp.BasicDataSource""> > \ > \${jdbc.driver.name}\ > \ > \ > \${jdbc.bmi.server.url}\ > \ > \ > \${jdbc.bmi.username}\ > \ > \ > \${jdbc.bmi.password}\ > \ > \ >  >  > \ > \ > \ > \ >  >  \ >  >> \ >> \  \ \  > \ >    \ > \  \  ---  **Affects:** 1.1.2","closed","type: enhancement,","spring-projects-issues","2005-04-05T18:44:07Z","2019-01-13T22:52:05Z"
"","5578","Cannot load Context with JDK 1.3.0, fails when try to log information. [SPR-852]","**[Kunal](https://jira.spring.io/secure/ViewProfile.jspa?name=shahkun3)** opened **[SPR-852](https://jira.spring.io/browse/SPR-852?redirect=false)** and commented  When Spring tries to load the context it fails using JDK 1.3.0  Here is the spring code where it fails in XmlBeanDefinitionReader, Code:  if (logger.isInfoEnabled()) { logger.info(""Loading XML bean definitions from "" + resource + """"); }  java.lang.ArrayStoreException at java.lang.System.arraycopy(Native Method) at java.lang.String.getChars(String.java:552) at java.lang.StringBuffer.append(StringBuffer.java:402) at java.lang.StringBuffer.append(StringBuffer.java:370) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:119) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:83) at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:101) at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:69) at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:87) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:262) at org.springframework.context.support.FileSystemXmlApplicationContext.\(FileSystemXmlApplicationContext.java:82) at org.springframework.context.support.FileSystemXmlApplicationContext.\(FileSystemXmlApplicationContext.java:67)  Example to create the simplest context: import org.springframework.context.ApplicationContext; import org.springframework.context.support.FileSystemXmlApplicationContext;  public class TestContext { private static ApplicationContext ctx= null; static String[] paths = {""applicationContext.xml""};      public static void setContext() {     try {     	ctx = new FileSystemXmlApplicationContext(paths);     }     catch (Exception e){     	e.printStackTrace();     }     }     public TestContext() {}          public static void main(String args[]) {         TestContext test = new TestContext();         test.setContext();     }  } Or Simple code which directly calls and try to log instance of ""Resource""  import org.springframework.core.io.Resource; import org.springframework.core.io.AbstractResource; import org.springframework.core.io.ClassPathResource; import org.apache.log4j.Logger; import java.util.ArrayList;  public class TestContext { public TestContext() {}      public static void main(String args[]) {        TestContext test = new TestContext();        Logger logger = Logger.getLogger(test.getClass());        ArrayList a = new ArrayList();        logger.info(""Logging ArrayList To: "" + a);        Resource ar = new ClassPathResource(""applicationContext.xml"");             logger.info(""Loading XML bean definitions from "" + ar);  } }  javac -classpath .;lib\spring.jar;lib\commons-logging.jar;lib\xerces.jar;lib\log4j.jar TestContext.java  java -classpath .;lib\spring.jar;lib\commons-logging.jar;lib\xerces.jar;lib\log4j.jar TestContext  The example can log ArrayList object but fails when logging Resource!  Didn't get a chance to look into other object's behaviour other than Resource.  Thanks, Kunal   --- No further details from [SPR-852](https://jira.spring.io/browse/SPR-852?redirect=false)","closed","in: core,","spring-projects-issues","2005-04-05T04:06:37Z","2005-04-12T04:38:52Z"
"","5682","use locale of spring for jasperreports i18n [SPR-969]","**[Kuisong Tong](https://jira.spring.io/secure/ViewProfile.jspa?name=kuisong.tong)** opened **[SPR-969](https://jira.spring.io/browse/SPR-969?redirect=false)** and commented   ---  **Affects:** 1.2 final","closed","type: bug,","spring-projects-issues","2005-05-20T14:22:18Z","2005-05-20T21:14:53Z"
"","4909","PropertyPlaceholderConfigurer does not recognize default properties [SPR-177]","**[Krishnan Anantheswaran](https://jira.spring.io/secure/ViewProfile.jspa?name=krishnan_anantheswaran@yahoo.com)** opened **[SPR-177](https://jira.spring.io/browse/SPR-177?redirect=false)** and commented  PropertyPlaceholderConfigurer correctly substitutes explcit properties of a Properties object but does not recignize default properties if those exist.  Junit test case is attached.   ---  **Affects:** 1.0.2  **Attachments:** - [ExposePpcBug.java](https://jira.spring.io/secure/attachment/10114/ExposePpcBug.java) (_1.93 kB_)","closed","in: core,","spring-projects-issues","2004-06-21T08:22:56Z","2004-06-22T03:35:57Z"
"","4901","Bug in property replacement using PropertyPlaceholderConfigurer [SPR-169]","**[Krishnan Anantheswaran](https://jira.spring.io/secure/ViewProfile.jspa?name=krishnan_anantheswaran@yahoo.com)** opened **[SPR-169](https://jira.spring.io/browse/SPR-169?redirect=false)** and commented  There is a circular dependency check in PropertyPlaceholderConfigurer that is incorrect.  Given  1) a bean:  public class PropertyBugBean {      public PropertyBugBean() {     }          public void setJewels(String jewels) {         this.jewels = jewels;     }          public String getJewels() {                  return jewels;     }          private String jewels;  }  2) am XML configuration  \ \  \\${jewel} ${jewel}\\ \ \  3) and a Property binding: jewel=bling  I expect to see the jewels property for firstBean to be ""bling bling"". However, PropertyPlaceholderConfigurer tells me it is a circular reference which is clearly not the case - the second instance of ${jewel} is not PRODUCED by the replacement of the first instance. I expect BOTH instances to be correctly replaced.  Don't ask me why I need such a monster substitution in the first place - that's a long convoluted story :)  By the way - great product - love it more and more every day!    ---  **Affects:** 1.0 final","closed","in: core,","spring-projects-issues","2004-06-16T11:49:42Z","2004-06-20T08:25:38Z"
"","5020","Specify bean IDs as FQN. [SPR-289]","**[Kirill Maximov](https://jira.spring.io/secure/ViewProfile.jspa?name=maxkir)** opened **[SPR-289](https://jira.spring.io/browse/SPR-289?redirect=false)** and commented  I think it can be useful to be able to specify beanId in configuration file as FQName of public static final String variable of some class.  package a.b.c; interface FooBean { String ID; }  In XML file: \  So, we can use the same constant in xml file and in Java code and keep them in sync.   ---  **Affects:** 1.2 RC1  **Attachments:** - [constant_id.patch](https://jira.spring.io/secure/attachment/10226/constant_id.patch) (_3.63 kB_) - [identifier-constant.xml](https://jira.spring.io/secure/attachment/10227/identifier-constant.xml) (_307 bytes_)","closed","type: enhancement,","spring-projects-issues","2004-08-27T04:28:49Z","2012-06-19T09:37:40Z"
"","5476","Binding to a Long complains when the value is null. [SPR-748]","**[Kevin Richards](https://jira.spring.io/secure/ViewProfile.jspa?name=krichards)** opened **[SPR-748](https://jira.spring.io/browse/SPR-748?redirect=false)** and commented  I have a Command which has an optional Long field, but the Binding complains when the form is submitted with the field left blank.  I have a work around which suits me because the field is  supposed to be hidden anyway but other people can't work around it.  http://forum.springframework.org/viewtopic.php?t=3740  Kev   ---  **Affects:** 1.1.4","closed","status: declined,","spring-projects-issues","2005-02-28T03:30:00Z","2019-01-12T16:41:37Z"
"","5698","Use of implementation class instead of interface [SPR-1020]","**[Ken Sonoda](https://jira.spring.io/secure/ViewProfile.jspa?name=kenson1)** opened **[SPR-1020](https://jira.spring.io/browse/SPR-1020?redirect=false)** and commented  In org.springframework.web.flow.execution.impl.FlowExecutionImpl.java there are a number of references to FlowSessionImpl and StateContextImpl. This means you can't use different implementation classes by overriding createStateContext() and createFlowSession()   ---  **Affects:** 2.0 M1","closed","status: declined,","spring-projects-issues","2005-06-06T11:00:33Z","2019-01-12T16:41:17Z"
"","5369","Set custom ExceptionTranslator in SqlMapClientFactoryBean [SPR-641]","**[Keith Hyland](https://jira.spring.io/secure/ViewProfile.jspa?name=khylo)** opened **[SPR-641](https://jira.spring.io/browse/SPR-641?redirect=false)** and commented  I'm using Spring DAO and Ibatis.  I wish to supply a custom ExceptionTranslator for handling specific error codes returned from the DB.  Is there an easy way to do this?  I am extending SqlMapClientDaoSupport, and explicitly setting the ExceptionTranslator in the SqlMapClientTemplate. (Also since afterPropertiesSet is a final in SqlMapClientDaoSupport, it means I have to have extra code in the set, rather than been able to extend the afterProperiesSet method.)  public void setCustomExceptionTranslator(SQLErrorCodeSQLExceptionTranslator customExceptionTranslator) { this.customExceptionTranslator = customExceptionTranslator; SqlMapClientTemplate client = getSqlMapClientTemplate(); client.setExceptionTranslator(customExceptionTranslator); setSqlMapClientTemplate(client); }  I was hoping for a cleaner solution, maybe something like been able to send the ExceptionTranslator to the SqlMapClientFactoryBean, and thus it would be set for all DAO objects in future.  Cheers, Keith   ---  **Affects:** 1.1.2","closed","type: enhancement,","spring-projects-issues","2005-01-19T02:19:35Z","2005-01-27T01:57:29Z"
"","5654","Want to bind input in some attribute source to a backing form object? You want to be able to take into account multiple attribute sources in a configurable order? [SPR-934]","**[Keith Garry Boyce](https://jira.spring.io/secure/ViewProfile.jspa?name=garpinc)** opened **[SPR-934](https://jira.spring.io/browse/SPR-934?redirect=false)** and commented  Now what I want is as follows. Attributes exist in session which apply to an object that may or may not exists in the scope I want. Similar to above I want the object of the specified class to be created if it doesn't exist in the scope I want and it's values to be populated from the session rather than request. Better yet rather than it explicitly being populated from request as above I would like something like:  Code: \ \ \ \ \ \ \ \ \  See \  That way it will try to populate from request first and then from session or in what ever order I specify with the first in the order taking precedent if it exists in both places.  Then  Code: PhoneBookQuery query = (PhoneBookQuery)context.getFlowScope().getAttribute(""query"");  ---  Here is the code I have so far to do resolution. It should be pretty easy to use reflection to bind objects using getObject to resolve object (BTW: maybe it should be renamed to resolveObject). Hopefully it will get the ball rolling...  package org.springframework.web.flow.action;  import org.springframework.web.flow.RequestContext;  public interface AttributeResolver { Object getObject(String objectName, RequestContext context);      void setAttributeSourceChain(String attributeSourceChain);  }  ---  package org.springframework.web.flow.action;  import java.util.HashMap; import java.util.Map;  import org.springframework.beans.factory.InitializingBean; import org.springframework.web.flow.RequestContext;  public class MultiActionExtended extends MultiAction implements InitializingBean { private String attributeSourceChain; private Map attributeResolvers = new HashMap(); private AttributeResolver DEFAULT_ATTRIBUTE_RESOLVER = new DefaultAttributeResolverImpl();      /**      * @param attributeResolvers The attributeResolvers to set.      */     public void setAttributeResolvers(Map attributeResolvers) {     	this.attributeResolvers = attributeResolvers;     }     /**      * @param attributeSourceChain The attributeSourceChain to set.      */     public void setAttributeSourceChain(String attributeSourceChain) {     	this.attributeSourceChain = attributeSourceChain;     }     public Object getObject(String objectName, RequestContext context)  {     	Object attributeResolverObj = attributeResolvers.get(objectName);     	if (attributeResolverObj != null) {     		AttributeResolver attributeResolver;     		if (attributeResolverObj instanceof String) {     			try {     				attributeResolver = (AttributeResolver) Class.forName((String) attributeResolverObj).newInstance();     			} catch (InstantiationException e) {     				throw new RuntimeException(""TODO: decide how to handle this:"" + e.toString());     			} catch (IllegalAccessException e) {     				throw new RuntimeException(""TODO: decide how to handle this:"" + e.toString());     			} catch (ClassNotFoundException e) {     				throw new RuntimeException(""TODO: decide how to handle this:"" + e.toString());     			}     		} else {     			attributeResolver = (AttributeResolver) attributeResolverObj;     		}          		return attributeResolver.getObject(objectName,context);     	} else {     		return DEFAULT_ATTRIBUTE_RESOLVER.getObject(objectName,context);     	}     	     	     }          public void afterPropertiesSet() {     	super.afterPropertiesSet();     	if (attributeSourceChain != null) {     		DEFAULT_ATTRIBUTE_RESOLVER.setAttributeSourceChain(attributeSourceChain);     	}     }  }  ---  package org.springframework.web.flow.action;  import org.springframework.util.StringUtils; import org.springframework.web.flow.RequestContext; import org.springframework.web.flow.execution.portlet.PortletRequestEvent; import org.springframework.web.portlet.context.support.PortletWebApplicationContextUtils;  public class DefaultAttributeResolverImpl implements AttributeResolver { private String attributeSourceChain = ""parameter,request,flow,session,context""; private static final Object SESSION = ""session""; private static final Object REQUEST = ""request""; private static final String FLOW = ""flow""; private static final Object PARAMETER = ""parameter""; private static final Object CONTEXT = ""context"";      /**      * @param attributeSourceChain The attributeSourceChain to set.      */     public void setAttributeSourceChain(String attributeSourceChain) {     	this.attributeSourceChain = attributeSourceChain;     }          public Object getObject(String objectName, RequestContext context) {     	String[] attributeSourceChainSet = StringUtils.commaDelimitedListToStringArray(attributeSourceChain);     	PortletRequestEvent event = (PortletRequestEvent)context.getOriginatingEvent();     	for (int i = 0; i < attributeSourceChainSet.length; i++) {     		String attributeSource = attributeSourceChainSet[i];     		     		//TODO: should use typesafe enum from ScopeType     		Object obj;     		if (attributeSource.equals(SESSION)) {     	        obj = event.getRequest().getPortletSession().getAttribute(objectName);     		} else if (attributeSource.equals(REQUEST)) {     			obj = context.getRequestScope().getAttribute(objectName);     		} else if (attributeSource.equals(FLOW)) {     			obj = context.getFlowScope().getAttribute(objectName);     		} else if (attributeSource.equals(PARAMETER)) {     			obj = event.getParameter(objectName);     		} else if (attributeSource.equals(CONTEXT)) {     			obj = PortletWebApplicationContextUtils.getWebApplicationContext(event.getRequest().getPortletSession().getPortletContext()).getBean(objectName);     		} else {     			throw new RuntimeException(""TODO: What should happen if scope is invalid"");     		}     		if (obj != null) {     			return obj;     		}     		     	}     	throw new RuntimeException(""TODO: determine what happens if you don't find object in any scope"");     	     }  }  ---  **Affects:** 2.0 M1","closed","type: enhancement,","spring-projects-issues","2005-05-10T04:08:51Z","2019-01-13T22:51:45Z"
"","5169","Transactions don't commit per request [SPR-440]","**[Keith Garry Boyce](https://jira.spring.io/secure/ViewProfile.jspa?name=garpinc)** opened **[SPR-440](https://jira.spring.io/browse/SPR-440?redirect=false)** and commented  I have a scenario where in a struts action I make 2 calls to spring service layer.  //call 1 getOptionService().save(domainObj1); //call 2 getOptionService().save(domainObj2);  It seems call 1 commits so if there is a problem with call 2 it does not rollback. I thought the transactions is tied to localthread. i.e the request so in a request all is commited or none. This doesn't seem to work correctly. See wiring snippets below.  \ \\\ ....  \ \ \ \ \  \ 		\ 		\ 		\ \ \ \ \ \ ... \ \ \ \ \ \ \ \ \ \ PROPAGATION_REQUIRED \ ...   ---  **Affects:** 1.1.1","closed","in: core,","spring-projects-issues","2004-11-01T14:25:27Z","2019-01-13T08:59:07Z"
"","5142","URLPathHelper raising index out of bounds exception [SPR-412]","**[Keith Garry Boyce](https://jira.spring.io/secure/ViewProfile.jspa?name=garpinc)** opened **[SPR-412](https://jira.spring.io/browse/SPR-412?redirect=false)** and commented  When the below function is called with a ServletWrappingController I get an index out of bounds when called from a Struts forward. So for example if I'm doing action chaining action1 -> action2 then the context root is not on the request when passing through the wrapping controller so there is no need to take it off again. Please propose a solution.      public String getPathWithinApplication(HttpServletRequest request) {     	return getRequestUri(request).substring(getContextPath(request).length());     }    ---  **Affects:** 1.1.1","closed","in: core,","spring-projects-issues","2004-10-20T12:51:03Z","2019-01-11T14:18:49Z"
"","5082","Use org.apache.commons.collections.map.LinkedMap instead of LinkedHashMap for added jdk1.3 functionality [SPR-352]","**[Keith Garry Boyce](https://jira.spring.io/secure/ViewProfile.jspa?name=garpinc)** opened **[SPR-352](https://jira.spring.io/browse/SPR-352?redirect=false)** and commented  Can spring be changed to use org.apache.commons.collections.map.LinkedMap instead of LinkedHashMap so as not to lose ordering functionality in jdk 1.3. If you use LinkedMap instead then I will have all the functionality that is lost in jdk 1.3 with respect to ordering etc.   ---  **Affects:** 1.1 final","closed","type: enhancement,","spring-projects-issues","2004-09-25T06:27:11Z","2004-09-27T13:45:21Z"
"","5080","Unable to use Lazy loaded collections in servlet 2.2 container without filter support [SPR-350]","**[Keith Garry Boyce](https://jira.spring.io/secure/ViewProfile.jspa?name=garpinc)** opened **[SPR-350](https://jira.spring.io/browse/SPR-350?redirect=false)** and commented  Unable to use Lazy loaded collections in servlet 2.2 container without filter support. This needs to be addressed in a different way for servlet 2.2 containers   ---  **Affects:** 1.1 final  **Attachments:** - [ServletWrappingController.java](https://jira.spring.io/secure/attachment/10240/ServletWrappingController.java) (_7.23 kB_)","closed","type: enhancement,","spring-projects-issues","2004-09-24T08:20:39Z","2019-01-11T14:02:15Z"
"","5782","AbstractApplicationContext shouldn't eagerly instantiate all BeanFactoryPostProcessors [SPR-1076]","**[Keith Garry Boyce](https://jira.spring.io/secure/ViewProfile.jspa?name=garpinc)** opened **[SPR-1076](https://jira.spring.io/browse/SPR-1076?redirect=false)** and commented  The call to getBean(factoryProcessorNames[i]) is flawed because it then must go out to get dependencies just to do  ordering.. Below is an example where I had a problem. And below is a work around.. I think rather than implement order perhaps you might want to add an attribute to bean definition i.e: order= and use that instead.  What was happening is that to find the order of ConfigurationPlaceholderProcessor it had to satisfy dependency jconfigBean. The placeholder in that bean was supposed to be replaced first by propertyPlaceholderConfigurer so even though it gets the order for ConfigurationPlaceholderProcessor it's then to late to instantiate jconfigBean with appropriate placeholder from the propertyPlaceholderConfigurer since it had already been instantiated.  --------- flawed code -------  for (int i = 0; i < factoryProcessorNames.length; i++) { if (Ordered.class.isAssignableFrom(getType(factoryProcessorNames[i]))) { orderedFactoryProcessors.add(getBean(factoryProcessorNames[i])); } else { nonOrderedFactoryProcessorNames.add(factoryProcessorNames[i]); } }  ------------- Here is where I had problem ------------                                                                                                                                                    ${config.filename}                               jmxConfig                                       	jmxConfig                                                                                                                                                              	2                                                             dev_config.xml                                                     SYSTEM_PROPERTIES_MODE_OVERRIDE                            	1                  ------------- Here is possible (not ultimate) fix ----------- for (int i = 0; i < factoryProcessorNames.length; i++) { if (Ordered.class.isAssignableFrom(getType(factoryProcessorNames[i]))) { MutablePropertyValues values = getBeanFactory().getBeanDefinition(factoryProcessorNames[i]).getPropertyValues(); int order = Integer.MAX_VALUE; if (values != null) { PropertyValue orderValue = values.getPropertyValue(""order""); if (orderValue != null) { String orderInt = (String) orderValue.getValue(); if (orderInt != null) { order = new Integer(orderInt).intValue(); } } } OrderedFactoryHolder factoryProcessorHolder = new OrderedFactoryHolder(factoryProcessorNames[i],order); orderedFactoryProcessorHolders.add(factoryProcessorHolder); } else { nonOrderedFactoryProcessorNames.add(factoryProcessorNames[i]); } }      private class OrderedFactoryHolder implements Ordered {                           /**          * @param factoryName          * @param order          */         public OrderedFactoryHolder(String factoryProcessorName, int order) {             this.factoryProcessorName = factoryProcessorName;             this.order = order;         }         private String factoryProcessorName;         private int order;                                /**          * @return Returns the factoryProcessorName.          */         public String getFactoryProcessorName() {             return factoryProcessorName;         }         /* (non-Javadoc)          * @see org.springframework.core.Ordered#getOrder()          */         public int getOrder() {             return order;         }              }  ---  **Affects:** 1.2.1  **Attachments:** - [AbstractApplicationContext.java](https://jira.spring.io/secure/attachment/10840/AbstractApplicationContext.java) (_29.74 kB_) - [EagerPropertyPlaceholderConfigurer.java](https://jira.spring.io/secure/attachment/11845/EagerPropertyPlaceholderConfigurer.java) (_3.85 kB_) - [PlaceHolderOrderTest.zip](https://jira.spring.io/secure/attachment/11887/PlaceHolderOrderTest.zip) (_1.72 kB_)  **Issue Links:** - #6019 One BeanFactoryPostProcessor can't modify definition of a 2nd that has yet to run (_**""is duplicated by""**_)  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2005-06-24T13:15:02Z","2019-01-11T18:36:29Z"
"","5738","Portlet User Attributes (from PortletRequest.USER_INFO) not supported correctly [SPR-1030]","**[Keith Garry Boyce](https://jira.spring.io/secure/ViewProfile.jspa?name=garpinc)** opened **[SPR-1030](https://jira.spring.io/browse/SPR-1030?redirect=false)** and commented  User attribute are retreived in portlets by the following command:  [code]Map userInfo = (Map)request.getAttribute(PortletRequest.USER_INFO);[/code]  Because webflow copies the request attributes into the request rather than using the PortletRequest directly there is a problem (at least with jetspeed2)  The problem is that when above command is executed it executes special code. There is no actual request attribute in the request.  So a workaround needs to be found for this.  perhaps a method on requestContext that will determine if the actual request is a portlet and call the getAttribute on that instead. Maybe there it a completely better way of course...   ---  **Affects:** 1.2.1","closed","status: declined,","spring-projects-issues","2005-06-10T14:12:59Z","2019-01-12T16:41:13Z"
"","5450","Application listeners that are prototypes aren't auto-added when instantiated [SPR-722]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-722](https://jira.spring.io/browse/SPR-722?redirect=false)** and commented  When I use lookup-method to get at a prototype that is a ApplicationListener, the listener instance isn't automatically added.  Actually, it may be the case _no prototype_ listeners are added at all -- and I think I've noted this before, now that I think about it.  In any case, this behaivior is confusing and inconsistent -- why shouldn't prototypes be treated differently than singletons?   ---  **Affects:** 1.1.5","closed","in: core,","spring-projects-issues","2005-02-17T03:45:04Z","2007-11-06T13:41:17Z"
"","5434","Inner bean definition exception messages could be improved [SPR-706]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-706](https://jira.spring.io/browse/SPR-706?redirect=false)** and commented  For example, if a inner bean class not found exception is thrown, you get this message:  org.springframework.beans.factory.BeanDefinitionStoreException: Error registering bean with name '' defined in class path resource [....xml]: Bean class [...MyClass] not found; nested exception is java.lang.ClassNotFoundException: uk.co.myapp.web.flow.approval.RestartableFlow java.lang.ClassNotFoundException: uk.co.myapp.web.flow.approval.RestartableFlow at java.net.URLClassLoader$1.run(URLClassLoader.java:200) at java.security.AccessController.doPrivileged(Native Method) at java.net.URLClassLoader.findClass(URLClassLoader.java:188) at java.lang.ClassLoader.loadClass(ClassLoader.java:306) at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:268) at java.lang.ClassLoader.loadClass(ClassLoader.java:251) at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:319) at java.lang.Class.forName0(Native Method) at java.lang.Class.forName(Class.java:242) at org.springframework.beans.factory.support.BeanDefinitionReaderUtils.createBeanDefinition(BeanDefinitionReaderUtils.java:60) at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.parseBeanDefinition(DefaultXmlBeanDefinitionParser.java:293) at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.parseBeanDefinition(DefaultXmlBeanDefinitionParser.java:261) at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.parsePropertySubelement(DefaultXmlBeanDefinitionParser.java:517) at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.getPropertyValue(DefaultXmlBeanDefinitionParser.java:508) at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.parsePropertyElement(DefaultXmlBeanDefinitionParser.java:478) at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.getPropertyValueSubElements(DefaultXmlBeanDefinitionParser.java:386) at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.parseBeanDefinition(DefaultXmlBeanDefinitionParser.java:291) at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.parseBeanDefinition(DefaultXmlBeanDefinitionParser.java:261) at org.springframework.beans.factory.xml.DefaultXmlBeanDefinitionParser.registerBeanDefinitions(DefaultXmlBeanDefinitionParser.java:184) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:173) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:131) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:83) at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:101) at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:69) at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:87) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:262) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:80) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:65) at org.springframework.test.AbstractSpringContextTests.loadContextLocations(AbstractSpringContextTests.java:113) at org.springframework.test.AbstractDependencyInjectionSpringContextTests.loadContextLocations(AbstractDependencyInjectionSpringContextTests.java:147) at org.springframework.test.AbstractSpringContextTests.getContext(AbstractSpringContextTests.java:95) at org.springframework.test.AbstractDependencyInjectionSpringContextTests.setUp(AbstractDependencyInjectionSpringContextTests.java:114) at junit.framework.TestCase.runBare(TestCase.java:125) at junit.framework.TestResult$1.protect(TestResult.java:106) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.framework.TestResult.run(TestResult.java:109) at junit.framework.TestCase.run(TestCase.java:118) at junit.framework.TestSuite.runTest(TestSuite.java:208) at junit.framework.TestSuite.run(TestSuite.java:203) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:421) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:305) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:186)  It'd be cool if it told you the bean name of the top-level bean that wraps the inner.   ---  **Affects:** 1.1.5","closed","type: enhancement,","spring-projects-issues","2005-02-11T11:57:59Z","2012-06-19T03:54:35Z"
"","5419","Improve strongly-typed service lookup capability [SPR-691]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-691](https://jira.spring.io/browse/SPR-691?redirect=false)** and commented  Currently the service locator factory bean introduced in 1.1.4 allows users to create type-safe service lookup interfaces that are decoupled from the Spring container, while still being able to leverage the container as the lookup implementation provider.  With a few additional improvements, this feature could offer users strongly-typed service lookup fully decoupled from the backing Spring container.  These include:  - The ability to lookup service implementations by type.  This is in addition to the currently provided lookup by service ID.  For example:  ServiceInterface getService(ServiceImplementation.class);  - The ability to map generic container-specific service lookup exceptions, like BeansException, to strongly-typed lookup exceptions that are not coupled with Spring.  For example:  ServiceInterface getService(ServiceImplementation.class) throws MyServiceLookupException;  Currently, if you want to recover from lookup failures, you must catch BeansException, which forces a Spring-container-specific dependency on calling client code.  With the ability to define a custom exception mapping, client code can handle exceptions that are not dependent on Spring in any fashion.  Now you'll be able to have dependency lookup as well as dependency injection with no coupling with the Spring container!   ---  **Affects:** 1.1.4  **Attachments:** - [ServiceLocatorFactoryBean.patch](https://jira.spring.io/secure/attachment/10610/ServiceLocatorFactoryBean.patch) (_8.34 kB_) - [ServiceLocatorFactoryBeanTests.patch](https://jira.spring.io/secure/attachment/10611/ServiceLocatorFactoryBeanTests.patch) (_20.13 kB_) - [TestServiceLocatorException.java](https://jira.spring.io/secure/attachment/10612/TestServiceLocatorException.java) (_1.13 kB_) - [TestServiceLocatorRuntimeException.java](https://jira.spring.io/secure/attachment/10613/TestServiceLocatorRuntimeException.java) (_1.19 kB_)","closed","type: enhancement,","spring-projects-issues","2005-02-05T07:30:51Z","2005-04-18T12:54:48Z"
"","5389","Provide better support for java-bean based value formatting in web report-style views [SPR-661]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-661](https://jira.spring.io/browse/SPR-661?redirect=false)** and commented  Currently there is no convenient mechanism in place to take advantage of the BeanWrapper's property access and type conversion capabilities for the purposes of reporting on arbitrary model objects from within a view such as a jsp.  The existing spring:* tags are very ""form object centric"", implying there is a single single root form object that needs to-string type conversion capabilities.  For example, I'd like to be able to iterate over a collection of abritary objects for display, delegating to the beanwrapper to format the display values for each object in the colletion for me.  This would provide flexibility and allow centralization of property editor conversion policies.   --- No further details from [SPR-661](https://jira.spring.io/browse/SPR-661?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-01-27T03:16:51Z","2006-01-06T09:26:25Z"
"","5350","spring:* tags are not usable outside a dispatcher servlet request [SPR-622]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-622](https://jira.spring.io/browse/SPR-622?redirect=false)** and commented  It'd be great if spring:bind, spring:message, spring:nestedPath, etc. tags could be used outside of a dispatcher servlet request environment.  Currently they depend on a dispatcher servlet web application context.  ---  **Issue Links:** - #5194  tag does not work without DispatcherServlet (_**""is duplicated by""**_)","closed","type: enhancement,","spring-projects-issues","2005-01-13T05:59:57Z","2019-01-11T12:51:51Z"
"","5349","CustomBooleanEditor could be more robust [SPR-621]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-621](https://jira.spring.io/browse/SPR-621?redirect=false)** and commented  Currently custom boolean editor only supports parsing true/false and displaying ""true"" or ""false"" -- configurable support for yes/no, on/off, etc. would be an improvement.   ---  **Affects:** 1.1.4","closed","type: enhancement,","spring-projects-issues","2005-01-13T05:58:45Z","2005-01-13T07:17:41Z"
"","5275","load() don't throws the HibernateObjectRetrievalFailureException [SPR-546]","**[Katleen Smedts](https://jira.spring.io/secure/ViewProfile.jspa?name=smedts)** opened **[SPR-546](https://jira.spring.io/browse/SPR-546?redirect=false)** and commented  getHibernateTemplate().load(Class, Serializable) doesn't throws the HibernateObjectRetrievalFailureException in Spring when the object doesn't exists, but a LazyInitializationException. The object has a hashmap with lazy is false.   --- No further details from [SPR-546](https://jira.spring.io/browse/SPR-546?redirect=false)","closed","","spring-projects-issues","2004-12-12T18:06:01Z","2019-01-11T12:42:16Z"
"","5625","Difference between classpath: and classpath*: [SPR-898]","**[Karim Qazi](https://jira.spring.io/secure/ViewProfile.jspa?name=kqazi)** opened **[SPR-898](https://jira.spring.io/browse/SPR-898?redirect=false)** and commented  Could someone explain the difference between using classpath: and classpath*: when performing resource lookup using the class: org.springframework.core.io.support.PathMatchingResourcePatternResolver  Thanks.   ---  **Affects:** 1.1.5","closed","in: core,","spring-projects-issues","2005-04-21T03:23:55Z","2019-01-11T13:05:48Z"
"","5588","Problem with ClassPathXmlApplicationContext using patterns for configLocations [SPR-862]","**[Karim Qazi](https://jira.spring.io/secure/ViewProfile.jspa?name=kqazi)** opened **[SPR-862](https://jira.spring.io/browse/SPR-862?redirect=false)** and commented  I am trying to use the ClassPathXmlApplicationContext to load up a bean config file using pattern matching as explained in 'PathMatchingResourcePatternResolver'.  I have a test set up and have a 'resources' folder visible in my classpath but for some reason I cant seem to load this config file up.  However if I supply the absolute file name it works fine.  I have tried many different varations of the configLocation (""**-applicationContext.xml"", ""classpath:**-applicationContext.xml"",etc) but none seem to work either.  Any help is greatly appreciated.  Thanks.  Here is sample code: //------------------------------------------------- String[] configLocations = ""classpath*:resources/*-applicationContext.xml""  ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(configLocations);  MyBean bean = (MyBean) context.getBean(""myBean"");  //-----------------------------------------------   ---  **Affects:** 1.1.1  **Attachments:** - [local-applicationContext.xml](https://jira.spring.io/secure/attachment/10637/local-applicationContext.xml) (_2.01 kB_)","closed","in: core,","spring-projects-issues","2005-04-06T10:16:45Z","2005-08-03T21:25:54Z"
"","5017","typo: 'idential' should be 'identical' [SPR-286]","**[Karel Vervaeke](https://jira.spring.io/secure/ViewProfile.jspa?name=karel1980)** opened **[SPR-286](https://jira.spring.io/browse/SPR-286?redirect=false)** and commented  Found this typo while scrolling through http://www.springframework.org/docs/spring-reference.pdf Last paragraph of 3.3.1:  ""... would be used in an essentially idential fashion"" should be ""... would be used in an essentially identical fashion""   ---  **Affects:** 1.1 RC2","closed","type: documentation,","spring-projects-issues","2004-08-25T08:03:40Z","2004-08-25T08:09:30Z"
"","5011","RmiClientInterceptor - protected Remote rmiProxy and use of getRmiProxy() instead of direct access to this.rmiProxy [SPR-280]","**[Karel Miarka](https://jira.spring.io/secure/ViewProfile.jspa?name=kajism)** opened **[SPR-280](https://jira.spring.io/browse/SPR-280?redirect=false)** and commented  I have quite unsafe network environment and I need to invoke a remote method once per hour (and if fails just try in another hour). So I prefere to do a new RMI lookup each time to avoid problems (RMI server restart, recovery from unavailability and so on). So I have created such subclass of RmiProxyFactoryBean:  public class PrototypeRmiProxyFactoryBean extends RmiProxyFactoryBean { protected Remote createRmiProxy() throws IOException, NotBoundException { return null; // I don't want RMI lookup to be called when app.context is created, because failure would block my app. start }  protected Remote getRmiProxy() { rmiProxy = null; try { rmiProxy = super.createRmiProxy(); } catch (IOException e) { throw new RemoteAccessException(e.getMessage(), e); } catch (NotBoundException e) { throw new RemoteAccessException(e.getMessage(), e); } return rmiProxy; } }  For this to work it is necessary to use getRmiProxy() instead of this.rmiProxy access in RmiClientInterceptor. Could you make such a change?  TIA, Karel   ---  **Affects:** 1.0.2, 1.1 RC2","closed","type: enhancement,","spring-projects-issues","2004-08-22T17:19:22Z","2004-08-26T19:42:39Z"
"","5132","alwaysUseFullPath is missing from the documentation for SimpleUrlHandlerMapping [SPR-402]","**[Kaj Hejer](https://jira.spring.io/secure/ViewProfile.jspa?name=kajh)** opened **[SPR-402](https://jira.spring.io/browse/SPR-402?redirect=false)** and commented  alwaysUseFullPath is missing from the documentation for SimpleUrlHandlerMapping.    --- No further details from [SPR-402](https://jira.spring.io/browse/SPR-402?redirect=false)","closed","type: enhancement,","spring-projects-issues","2004-10-16T06:08:26Z","2012-06-19T03:54:12Z"
"","5759","Support for jsp taglibs in freemarker templates [SPR-1052]","**[Kaj Hejer](https://jira.spring.io/secure/ViewProfile.jspa?name=kajh)** opened **[SPR-1052](https://jira.spring.io/browse/SPR-1052?redirect=false)** and commented  It would be nice if Spring had support for jsp taglibs like f.x.    as decribed on http://fmpp.sourceforge.net/freemarker/pgui_misc_servlet.html (see the heading ""Using JSP custom tags in FTL"")    ---  **Attachments:** - [TaglibFreeMarkerView.zip](https://jira.spring.io/secure/attachment/10881/TaglibFreeMarkerView.zip) (_3.32 kB_)  4 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2005-06-17T05:16:20Z","2012-06-19T03:54:12Z"
"","5741","Typing error on http://www.springframework.org/docs/reference/mvc.html [SPR-1033]","**[Kaj Hejer](https://jira.spring.io/secure/ViewProfile.jspa?name=kajh)** opened **[SPR-1033](https://jira.spring.io/browse/SPR-1033?redirect=false)** and commented  On http://www.springframework.org/docs/reference/mvc.html there is a missing "">"" in the following line:      120","closed","type: bug,","spring-projects-issues","2005-06-12T21:51:48Z","2005-06-13T03:36:33Z"
"","5739","It should be possible to set default encoding for a FreeMarkerView [SPR-1031]","**[Kaj Hejer](https://jira.spring.io/secure/ViewProfile.jspa?name=kajh)** opened **[SPR-1031](https://jira.spring.io/browse/SPR-1031?redirect=false)** and commented  It should be possible to set default encoding for FreeMarkerView beans like you can with exposeHelpers in FreeMarkerViewResolver.  Today we have to define encoding for each FreeMarkerView bean:           	     		search.ftl     	     	     		ISO-8859-1     	         ---  **Affects:** 1.2.1","closed","type: enhancement,","spring-projects-issues","2005-06-11T02:05:25Z","2012-06-19T03:54:04Z"
"","5696","How to use UserTransaction in struts [SPR-984]","**[kailas vilas kore](https://jira.spring.io/secure/ViewProfile.jspa?name=kailasvilaskore)** opened **[SPR-984](https://jira.spring.io/browse/SPR-984?redirect=false)** and commented  Hello guys, I am a user of spring from last 1 year, we peoples r developinga an application in struts. But i am not able to declare, implement the user transaction in my application using spring framework. Can anybody tell me how to use it. Thanks in advance. Bye Kailas Kore   --- No further details from [SPR-984](https://jira.spring.io/browse/SPR-984?redirect=false)","closed","in: core,","spring-projects-issues","2005-05-25T21:56:35Z","2019-01-11T22:06:15Z"
"","5667","TypeMismatchException when there are multiple setters that differ only by parameter type [SPR-948]","**[Jānis Rukšāns](https://jira.spring.io/secure/ViewProfile.jspa?name=d0gf)** opened **[SPR-948](https://jira.spring.io/browse/SPR-948?redirect=false)** and commented  I have an object with two setter methods that differ only by their parameter type, one takes String as an argument, the other one - java.util.regex.Pattern. The following cofiguration results in TypeMismatchException  \ \\.remove\ \  org.springframework.beans.TypeMismatchException: Failed to convert property value of type [java.lang.String] to required type [java.util.regex.Pattern] for property 'commandPattern' at org.springframework.beans.BeanWrapperImpl.doTypeConversionIfNecessary(BeanWrapperImpl.java:1015) at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:778) at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:684) at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:825) at org.springframework.beans.BeanWrapperImpl.setPropertyValues(BeanWrapperImpl.java:852) at org.springframework.beans.BeanWrapperImpl.setPropertyValues(BeanWrapperImpl.java:841) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:863) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:680) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:325) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.resolveInnerBeanDefinition(AbstractAutowireCapableBeanFactory.java:941) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.resolveValueIfNecessary(AbstractAutowireCapableBeanFactory.java:902) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.resolveManagedList(AbstractAutowireCapableBeanFactory.java:993) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.resolveValueIfNecessary(AbstractAutowireCapableBeanFactory.java:915) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:852) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:680) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:325) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:260) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:221) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:145) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.resolveReference(AbstractAutowireCapableBeanFactory.java:973) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.resolveValueIfNecessary(AbstractAutowireCapableBeanFactory.java:911) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:852) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:680) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:325) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:260) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:221) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:145) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.resolveReference(AbstractAutowireCapableBeanFactory.java:973) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.resolveValueIfNecessary(AbstractAutowireCapableBeanFactory.java:911) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.resolveManagedMap(AbstractAutowireCapableBeanFactory.java:1033) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.resolveValueIfNecessary(AbstractAutowireCapableBeanFactory.java:923) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:852) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:680) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:325) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:260) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:221) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:145) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:282) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:317) at org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.refresh(AbstractRefreshableWebApplicationContext.java:131) at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:303) at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:250) at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:219) at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:111) at javax.servlet.GenericServlet.init(GenericServlet.java:211) at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1068) at org.apache.catalina.core.StandardWrapper.allocate(StandardWrapper.java:725) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:131) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:178) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:126) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:105) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:107) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:148) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:825) at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.processConnection(Http11Protocol.java:738) at org.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:526) at org.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(LeaderFollowerWorkerThread.java:80) at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:684) at java.lang.Thread.run(Thread.java:595)  However, the configuration with a Pattern object as an argument works fine:  \ \ \ \\.remove\ \ \ \ I'm using Spring 1.1.4 but I guess there are similar issues in other Spring releases.   ---  **Affects:** 1.1.4","closed","in: core,","spring-projects-issues","2005-05-14T12:02:57Z","2019-01-12T16:41:20Z"
"","4959","Can't build Spring with Ant 1.6.2 and JDK 1.5 [SPR-228]","**[Jérôme BERNARD](https://jira.spring.io/secure/ViewProfile.jspa?name=jeje)** opened **[SPR-228](https://jira.spring.io/browse/SPR-228?redirect=false)** and commented  By default when using the ""javac"" ant task, if the ""source"" attribute is not specified, the one of the current JVM is used. This causes some problems with JDK 1.5.   ---  **Affects:** 1.1 RC1  **Attachments:** - [build-jdk15.patch](https://jira.spring.io/secure/attachment/10153/build-jdk15.patch) (_1.45 kB_)","closed","type: bug,","spring-projects-issues","2004-07-20T05:41:21Z","2004-07-23T00:22:51Z"
"","5676","Use PropertyEditors in XML bean definitions [SPR-962]","**[Juho Yli-Krekola](https://jira.spring.io/secure/ViewProfile.jspa?name=jylikrek)** opened **[SPR-962](https://jira.spring.io/browse/SPR-962?redirect=false)** and commented  I would like to create new beans using the same kind of PropertyEditor system that is used in setting bean property values.  Let's say we have class com.foo.Size that can be created using string ""20x30x60"" (i.e. there is a PropertyEditor that can create com.foo.Size from ""20x30x60""):  \ \ \ \  What if a want to create a new com.foo.Size bean? I guess the only way is currently:  \ \ \ \ \  This would become much shorter if I could do it like this:  \20x30x60\  - - - -  If this feature is implemented may be also the following cases would work:  1) Create Strings, String arrays, Integers...:  \123\ \foobar\ \foo,bar\  instead of e.g:  \ \ \ \ \ \ 2) Use the new format in list,set and map:","closed","type: enhancement,","spring-projects-issues","2005-05-17T22:21:41Z","2012-06-19T09:37:21Z"
"","5029","Consider using status of 303 instead of 302 in RedirectView [SPR-299]","**[Juha Komulainen](https://jira.spring.io/secure/ViewProfile.jspa?name=komu)** opened **[SPR-299](https://jira.spring.io/browse/SPR-299?redirect=false)** and commented  Most of the uses for RedirectView seem to be redirecting to another page after form submission in order to avoid refresh-issues. RedirectView uses HttpServletResponse.sendRedirect(url), which is equivalent to:  response.setStatus(302); response.setHeader(""Location"", url);  Servlet specification probably requires usage of 302 code to be compliant with HTTP/1.0 user agents. Usage of 302 is however invalid when doing a redirect after POST request; see http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.3 for details. However, as the spec says, most the user agents treat 302 as 303, therefore maintaining the illusion that response.sendRedirect() actually works. I just recently learned that in some environments it actually does not work.  The correct status to send on these redirects is actually sending a status of 303 with ""Location"" header. This works even with POSTs reliably. Therefore I suggests that RedirectView should perform:  response.setStatus(303); response.setHeader(""Location"", url);  instead of of calling response.sendRedirect(url).   ---  **Affects:** 1.0.2","closed","type: enhancement,","spring-projects-issues","2004-08-30T21:38:37Z","2004-09-03T08:18:00Z"
"","5699","Support for async JMS message listeners [SPR-988]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-988](https://jira.spring.io/browse/SPR-988?redirect=false)** and commented  Spring 1.3 will ship with a sophisticated JMS listener solution: properly supporting concurrent reception, possibly also transactional reception. Long planned, now finally in JIRA :-)  The relationship to ActiveMQ's JCA container stuff needs to be clarified. It seems that generic support for MessageListeners, backed by pooled JMS Sessions, is not too extensive and thus remains a candidate for Spring core.  As a bonus, Spring 1.3 will also ship with a JMS-based remoting strategy, consistent with Spring's remoting abstraction. This requires an async JMS listener on the server, hence it has been kept in the sandbox for the time being.  Juergen   ---  **Affects:** 1.1 final  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2005-05-26T08:06:49Z","2012-06-19T03:54:27Z"
"","5646","Update overview diagram [SPR-923]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-923](https://jira.spring.io/browse/SPR-923?redirect=false)** and commented  As reported on the user mailing list:  The diagram ""Overview of the the Spring Framework "" in the reference document should be updated because there are new modules in Spring 1.2RC2 (i.e. spring-support (JMX))  Thanks, Thai    ---  **Affects:** 1.2 final","closed","type: enhancement,","spring-projects-issues","2005-05-05T18:54:01Z","2012-06-19T03:54:31Z"
"","5272","BLOB/CLOB type handlers for iBATIS SQL Maps [SPR-543]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-543](https://jira.spring.io/browse/SPR-543?redirect=false)** and commented  We should provide a ClobStringTypeHandler, a BlobByteArrayTypeHandler and a BlobSerializableTypeHandler in Spring 1.1.4 - analogous to our current custom types for Hibernate.  Note that custom type handlers were introduced as recently as in iBATIS SQL Maps 2.0.7, so we couldn't have provided such BLOB/CLOB handlers earlier.  Juergen   ---  **Affects:** 1.1.2","closed","type: enhancement,","spring-projects-issues","2004-12-11T05:08:56Z","2005-02-27T05:12:15Z"
"","5040","Form simplification tags for JSP [SPR-310]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-310](https://jira.spring.io/browse/SPR-310?redirect=false)** and commented  1.1 final ships with form simplification macros for Velocity and FreeMarker. We still need analogous form simplification tags for JSP.  The obvious solution for JSP 2.0 are JSP tag files, as they allow for direct modification of the HTML (if necessary). We could also add corresponding Java-coded tags for JSP 1.2.  Juergen   ---  **Affects:** 1.1 final  **Attachments:** - [form.zip](https://jira.spring.io/secure/attachment/10411/form.zip) (_3.42 kB_) - [html-tagfiles-20050328.zip](https://jira.spring.io/secure/attachment/10619/html-tagfiles-20050328.zip) (_8.01 kB_) - [html-tagfiles-examples-20050328.zip](https://jira.spring.io/secure/attachment/10620/html-tagfiles-examples-20050328.zip) (_2.56 kB_) - [preliminary springform.tld](https://jira.spring.io/secure/attachment/10711/preliminary+springform.tld) (_15.93 kB_) - [tags_20050119.zip](https://jira.spring.io/secure/attachment/10437/tags_20050119.zip) (_6.24 kB_) - [tags_20050119.zip](https://jira.spring.io/secure/attachment/10436/tags_20050119.zip) (_6.22 kB_) - [tags.zip](https://jira.spring.io/secure/attachment/10201/tags.zip) (_5.59 kB_)  32 votes, 37 watchers","closed","has: votes-jira,","spring-projects-issues","2004-09-03T22:44:44Z","2012-06-19T03:54:37Z"
"","4881","Open up AbstractApplicationContext's event publishing [SPR-149]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-149](https://jira.spring.io/browse/SPR-149?redirect=false)** and commented  Open up AbstractApplicationContext's event publishing infrastructure to allow for integrating third-party event handlers. Concrete use case is Ross Mason's Mule project.  Juergen   ---  **Affects:** 1.0.1","closed","type: enhancement,","spring-projects-issues","2004-05-31T04:05:00Z","2004-06-21T22:03:42Z"
"","4880","add BatchSqlUpdate to jdbc.object [SPR-148]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-148](https://jira.spring.io/browse/SPR-148?redirect=false)** and commented  Integrate Keith's BatchSqlUpdate class from the sandbox into the main codebase.   ---  **Affects:** 1.0.1","closed","type: enhancement,","spring-projects-issues","2004-05-31T04:02:10Z","2004-06-06T20:39:18Z"
"","5723","TopLink section in reference docs [SPR-1014]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-1014](https://jira.spring.io/browse/SPR-1014?redirect=false)** and commented  A TopLink section in the reference docs needs to be added. While the javadocs of the TopLink support are reasonably complete, we also need a proper introduction in the reference manual.   --- No further details from [SPR-1014](https://jira.spring.io/browse/SPR-1014?redirect=false)","closed","type: task,","spring-projects-issues","2005-06-04T06:12:16Z","2005-06-12T03:03:39Z"
"","5714","JDO section in reference docs [SPR-1004]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-1004](https://jira.spring.io/browse/SPR-1004?redirect=false)** and commented  A JDO section in the reference docs is overdue. While the javadocs of the JDO support are reasonably complete, we also need a proper introduction in the reference manual.   --- No further details from [SPR-1004](https://jira.spring.io/browse/SPR-1004?redirect=false)","closed","type: task,","spring-projects-issues","2005-06-02T19:05:46Z","2005-06-12T03:02:57Z"
"","5378","Problem bind boolean values on freemarker [SPR-650]","**[Juan Gil](https://jira.spring.io/secure/ViewProfile.jspa?name=delphiero50)** opened **[SPR-650](https://jira.spring.io/browse/SPR-650?redirect=false)** and commented  I'm trying to bind a boolean attribute in a freemarker template.        	  	           	${spring.status.value}  direccionAsistida is a boolean attribute of the form backed object.  Here is the error :  Expecting a string, date or number here, Expression spring.status.value is instead a freemarker.template.TemplateBooleanModel$1 The problematic instruction ---------- ==> ${spring.status.value}  It also happens trying to bind the attribute on a formInput, ....    --- No further details from [SPR-650](https://jira.spring.io/browse/SPR-650?redirect=false)","closed","type: bug,","spring-projects-issues","2005-01-24T09:08:02Z","2005-01-25T23:23:29Z"
"","4994","problem bean of type java.io.File with single constructor-arg [SPR-263]","**[Joshua Vickery](https://jira.spring.io/secure/ViewProfile.jspa?name=vickeryj)** opened **[SPR-263](https://jira.spring.io/browse/SPR-263?redirect=false)** and commented  I am having trouble creating a bean of type java.io.File with a single constructor-arg.  The problem is that the bean that is instantiated seems to ""double"" its argument value.  Application Context:  ---  \ \ \ \\test\\ \ \  Test code:  ---  import java.io.File; import org.springframework.context.ApplicationContext; import org.springframework.context.support.FileSystemXmlApplicationContext;  public class Test { public static void main(String[] args) throws Exception { File f1 = new File(""test""); System.out.println(f1.getAbsolutePath()); ApplicationContext ac = new FileSystemXmlApplicationContext(""applicationContext.xml""); File f2 = (File)ac.getBean(""dir""); System.out.println(f2.getAbsolutePath());      }  }  Abbreviated Output from code:  ---  run: [java] /home/vickeryj/temp/springTest/test  ...      [java] /home/vickeryj/temp/springTest/test/test  In short it seems to me that both println statements should be the same, however the bean retrieved from the application context has a path of ""test/test"" rather than the value of ""test"" which I passed in.  Can anyone recreate this?  ---  **Affects:** 1.0.2","closed","in: core,","spring-projects-issues","2004-08-13T08:33:11Z","2019-01-13T22:54:22Z"
"","5280","NPE initializing factory bean [SPR-551]","**[Joshua Spiewak](https://jira.spring.io/secure/ViewProfile.jspa?name=jss)** opened **[SPR-551](https://jira.spring.io/browse/SPR-551?redirect=false)** and commented  These beans were working with 1.1.2, but after updating to 1.1.3 this morning, I get a NPE.  I noticed that AbstractAutowireCapableBeanFactory and AbstractBeanFactory underwent some several changes between versions.  Let me know if I can provide more information to help track down the issue, or whether I am abusing Spring somehow.  \ \\\ \  \ \\0\\ \  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'mBeanServer' defined in URL [file:/D:/opt/jonas-3.3.9/webapps/jonas/edith/WEB-INF/classes/beanOverrides.xml]: Instantiation of bean failed; nested exception is java.lang.NullPointerException: null java.lang.NullPointerException at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:381) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:264) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:223) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:236) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:159) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.resolveReference(AbstractAutowireCapableBeanFactory.java:945) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.resolveValueIfNecessary(AbstractAutowireCapableBeanFactory.java:879) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.resolveConstructorArguments(AbstractAutowireCapableBeanFactory.java:526) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:358) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:264) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:223) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:236) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:159) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:261) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:317) at org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.refresh(AbstractRefreshableWebApplicationContext.java:131) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:177) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:105) at org.springframework.web.context.ContextLoaderServlet.init(ContextLoaderServlet.java:81) at javax.servlet.GenericServlet.init(GenericServlet.java:256)   ---  **Affects:** 1.1.3","closed","in: core,","spring-projects-issues","2004-12-14T02:50:12Z","2004-12-20T07:07:57Z"
"","5153","Ability to set cache region for Hibernate queries [SPR-423]","**[Joshua Spiewak](https://jira.spring.io/secure/ViewProfile.jspa?name=jss)** opened **[SPR-423](https://jira.spring.io/browse/SPR-423?redirect=false)** and commented  Please add HibernateTemplate.setCacheRegion(String) to work in conjunction with HibernateTemplate.setCacheable(boolean).  The workaround is to revert to using a HibernateCallback in which a Query is created, and then setting the cache region directly, but this means all of the find methods of HibernateTemplate cannot be used.   ---  **Affects:** 1.1.1","closed","type: enhancement,","spring-projects-issues","2004-10-25T02:07:13Z","2019-01-11T14:19:16Z"
"","5811","Documentation on Chaining ViewResolvers out of sync with InternalResourceViewResolver [SPR-1107]","**[Joshua Spiewak](https://jira.spring.io/secure/ViewProfile.jspa?name=jss)** opened **[SPR-1107](https://jira.spring.io/browse/SPR-1107?redirect=false)** and commented  Section 12.5.2 Chaining ViewResolvers indicates that InternalResourceViewResolver has an order property.  However, IRVR does not implement Ordered, and according to Juergen, will always be positioned as the last resolver in the chain.  The documentaion needs to be updated to reflect the implementation.  See #5795  ---  **Affects:** 1.2.1","closed","type: bug,","spring-projects-issues","2005-07-07T00:34:14Z","2019-01-11T19:32:51Z"
"","5805","Expand data binding strategies [SPR-1101]","**[Joshua Spiewak](https://jira.spring.io/secure/ViewProfile.jspa?name=jss)** opened **[SPR-1101](https://jira.spring.io/browse/SPR-1101?redirect=false)** and commented  Hibernate allows one to specify ""property"" or ""field"" (or even a custom PropertyAccessor) as the access method of the POJOs it maps.  Even when choosing ""property"", the getter/setter methods do not have to be public.  If I choose to use ""field"" access, and would like to also use the POJO as a Spring MVC command instance, I am a bit stuck as the DataBinder is hardwired to use BeanWrapperImpl which seems to only work with a JavaBean where the getter/setter methods are public.  It would be great if Spring could allow a similar level of flexibility in choosing the accessibility of methods.  After looking at the source a bit, I am not sure whether expanding BeanWrapperImpl to allow this flexibility or creating a more pluggable mechanism at the DataBinder level would be a better strategy for implemenation.   ---  **Affects:** 1.2.1","closed","type: enhancement,","spring-projects-issues","2005-07-05T05:11:03Z","2012-06-19T03:54:22Z"
"","5795","InternalResourceViewResolver is not Ordered [SPR-1091]","**[Joshua Spiewak](https://jira.spring.io/secure/ViewProfile.jspa?name=jss)** opened **[SPR-1091](https://jira.spring.io/browse/SPR-1091?redirect=false)** and commented   ---  **Affects:** 1.2.1","closed","status: declined,","spring-projects-issues","2005-06-30T11:03:04Z","2019-01-12T16:41:09Z"
"","5824","spring-framework-1.2.1 fails to generate javadoc [SPR-1120]","**[Joshua Nichols](https://jira.spring.io/secure/ViewProfile.jspa?name=nichoj)** opened **[SPR-1120](https://jira.spring.io/browse/SPR-1120?redirect=false)** and commented  When I try to run 'ant javadoc14', I get the following:  javadoc14: [mkdir] Created dir: /home/nichoj/testing/spring-framework-1.2.1/docs/api [javadoc] Generating Javadoc [javadoc] Javadoc execution [javadoc] javadoc: Illegal package name: """" [javadoc] javadoc: Illegal package name: """" [javadoc] Loading source files for package org.springframework.aop... [javadoc] Loading source files for package org.springframework.aop.framework... [javadoc] Loading source files for package org.springframework.aop.framework.adapter... [javadoc] Loading source files for package org.springframework.aop.framework.autoproxy... [javadoc] Loading source files for package org.springframework.aop.framework.autoproxy.metadata... [javadoc] Loading source files for package org.springframework.aop.framework.autoproxy.target... [javadoc] Loading source files for package org.springframework.aop.interceptor... [javadoc] Loading source files for package org.springframework.aop.support... [javadoc] Loading source files for package org.springframework.aop.target... [javadoc] Loading source files for package org.springframework.beans... [javadoc] Loading source files for package org.springframework.beans.factory... [javadoc] Loading source files for package org.springframework.beans.factory.access... [javadoc] Loading source files for package org.springframework.beans.factory.config... [javadoc] Loading source files for package org.springframework.beans.factory.support... [javadoc] Loading source files for package org.springframework.beans.factory.xml... [javadoc] Loading source files for package org.springframework.beans.propertyeditors... [javadoc] Loading source files for package org.springframework.beans.support... [javadoc] Loading source files for package org.springframework.cache.ehcache... [javadoc] Loading source files for package org.springframework.context... [javadoc] Loading source files for package org.springframework.context.access... [javadoc] Loading source files for package org.springframework.context.event... [javadoc] Loading source files for package org.springframework.context.i18n... [javadoc] Loading source files for package org.springframework.context.support... [javadoc] Loading source files for package org.springframework.core... [javadoc] Loading source files for package org.springframework.core.io... [javadoc] Loading source files for package org.springframework.core.io.support... [javadoc] Loading source files for package org.springframework.dao... [javadoc] Loading source files for package org.springframework.dao.support... [javadoc] Loading source files for package org.springframework.ejb.access... [javadoc] Loading source files for package org.springframework.ejb.support... [javadoc] Loading source files for package org.springframework.jca.cci... [javadoc] Loading source files for package org.springframework.jca.cci.connection... [javadoc] Loading source files for package org.springframework.jca.cci.core... [javadoc] Loading source files for package org.springframework.jca.cci.core.support... [javadoc] Loading source files for package org.springframework.jca.cci.object... [javadoc] Loading source files for package org.springframework.jca.support... [javadoc] Loading source files for package org.springframework.jdbc... [javadoc] Loading source files for package org.springframework.jdbc.core... [javadoc] Loading source files for package org.springframework.jdbc.core.support... [javadoc] Loading source files for package org.springframework.jdbc.datasource... [javadoc] Loading source files for package org.springframework.jdbc.object... [javadoc] Loading source files for package org.springframework.jdbc.support... [javadoc] Loading source files for package org.springframework.jdbc.support.incrementer... [javadoc] Loading source files for package org.springframework.jdbc.support.lob... [javadoc] Loading source files for package org.springframework.jdbc.support.nativejdbc... [javadoc] Loading source files for package org.springframework.jdbc.support.rowset... [javadoc] Loading source files for package org.springframework.jms... [javadoc] Loading source files for package org.springframework.jms.connection... [javadoc] Loading source files for package org.springframework.jms.core... [javadoc] Loading source files for package org.springframework.jms.core.support... [javadoc] Loading source files for package org.springframework.jms.support... [javadoc] Loading source files for package org.springframework.jms.support.converter... [javadoc] Loading source files for package org.springframework.jms.support.destination... [javadoc] Loading source files for package org.springframework.jmx... [javadoc] Loading source files for package org.springframework.jmx.access... [javadoc] Loading source files for package org.springframework.jmx.export... [javadoc] Loading source files for package org.springframework.jmx.export.assembler... [javadoc] Loading source files for package org.springframework.jmx.export.metadata... [javadoc] Loading source files for package org.springframework.jmx.export.naming... [javadoc] Loading source files for package org.springframework.jmx.support... [javadoc] Loading source files for package org.springframework.jndi... [javadoc] Loading source files for package org.springframework.mail... [javadoc] Loading source files for package org.springframework.mail.cos... [javadoc] Loading source files for package org.springframework.mail.javamail... [javadoc] Loading source files for package org.springframework.metadata... [javadoc] Loading source files for package org.springframework.metadata.commons... [javadoc] Loading source files for package org.springframework.orm... [javadoc] Loading source files for package org.springframework.orm.hibernate... [javadoc] Loading source files for package org.springframework.orm.hibernate.support... [javadoc] Loading source files for package org.springframework.orm.hibernate3... [javadoc] Loading source files for package org.springframework.orm.hibernate3.support... [javadoc] Loading source files for package org.springframework.orm.ibatis... [javadoc] Loading source files for package org.springframework.orm.ibatis.support... [javadoc] Loading source files for package org.springframework.orm.jdo... [javadoc] Loading source files for package org.springframework.orm.jdo.support... [javadoc] Loading source files for package org.springframework.orm.ojb... [javadoc] Loading source files for package org.springframework.orm.ojb.support... [javadoc] Loading source files for package org.springframework.orm.toplink... [javadoc] Loading source files for package org.springframework.orm.toplink.support... [javadoc] Loading source files for package org.springframework.remoting... [javadoc] Loading source files for package org.springframework.remoting.caucho... [javadoc] Loading source files for package org.springframework.remoting.httpinvoker... [javadoc] Loading source files for package org.springframework.remoting.jaxrpc... [javadoc] Loading source files for package org.springframework.remoting.rmi... [javadoc] Loading source files for package org.springframework.remoting.support... [javadoc] Loading source files for package org.springframework.scheduling.quartz... [javadoc] Loading source files for package org.springframework.scheduling.timer... [javadoc] Loading source files for package org.springframework.transaction... [javadoc] Loading source files for package org.springframework.transaction.interceptor... [javadoc] Loading source files for package org.springframework.transaction.jta... [javadoc] Loading source files for package org.springframework.transaction.support... [javadoc] Loading source files for package org.springframework.ui.context... [javadoc] Loading source files for package org.springframework.ui.context.support... [javadoc] Loading source files for package org.springframework.ui.freemarker... [javadoc] Loading source files for package org.springframework.ui.jasperreports... [javadoc] Loading source files for package org.springframework.ui.velocity... [javadoc] Loading source files for package org.springframework.util... [javadoc] Loading source files for package org.springframework.util.xml... [javadoc] Loading source files for package org.springframework.validation... [javadoc] Loading source files for package org.springframework.web.bind... [javadoc] Loading source files for package org.springframework.web.context... [javadoc] Loading source files for package org.springframework.web.context.support... [javadoc] Loading source files for package org.springframework.web.filter... [javadoc] Loading source files for package org.springframework.web.jsf... [javadoc] Loading source files for package org.springframework.web.multipart... [javadoc] Loading source files for package org.springframework.web.multipart.commons... [javadoc] Loading source files for package org.springframework.web.multipart.cos... [javadoc] Loading source files for package org.springframework.web.multipart.support... [javadoc] Loading source files for package org.springframework.web.servlet... [javadoc] Loading source files for package org.springframework.web.servlet.handler... [javadoc] Loading source files for package org.springframework.web.servlet.handler.metadata... [javadoc] Loading source files for package org.springframework.web.servlet.i18n... [javadoc] Loading source files for package org.springframework.web.servlet.mvc... [javadoc] Loading source files for package org.springframework.web.servlet.mvc.multiaction... [javadoc] Loading source files for package org.springframework.web.servlet.mvc.throwaway... [javadoc] Loading source files for package org.springframework.web.servlet.support... [javadoc] Loading source files for package org.springframework.web.servlet.tags... [javadoc] Loading source files for package org.springframework.web.servlet.theme... [javadoc] Loading source files for package org.springframework.web.servlet.view... [javadoc] Loading source files for package org.springframework.web.servlet.view.document... [javadoc] Loading source files for package org.springframework.web.servlet.view.freemarker... [javadoc] Loading source files for package org.springframework.web.servlet.view.jasperreports... [javadoc] Loading source files for package org.springframework.web.servlet.view.tiles... [javadoc] Loading source files for package org.springframework.web.servlet.view.velocity... [javadoc] Loading source files for package org.springframework.web.servlet.view.xslt... [javadoc] Loading source files for package org.springframework.web.struts... [javadoc] Loading source files for package org.springframework.web.util... [javadoc] Loading source files for package org.springframework.mock.jndi... [javadoc] Loading source files for package org.springframework.mock.web... [javadoc] Loading source files for package org.springframework.test... [javadoc] 2 errors  BUILD SUCCESSFUL Total time: 2 seconds  Depsite the build thinking it was successful, javadocs aren't actually generated.   --- No further details from [SPR-1120](https://jira.spring.io/browse/SPR-1120?redirect=false)","closed","","spring-projects-issues","2005-07-10T02:07:42Z","2019-01-11T19:34:30Z"
"","5801","spring-framework-1.2.1 fails to compile with Jikes [SPR-1097]","**[Joshua Nichols](https://jira.spring.io/secure/ViewProfile.jspa?name=nichoj)** opened **[SPR-1097](https://jira.spring.io/browse/SPR-1097?redirect=false)** and commented  I'm attempting to compile spring-framework with the jikes compiler, and I get one error and numerous warnings. The warnings from jikes in general are faily pedantic, so they're not the main concern.  Here are the logs from running 'ant -Dbuild.compiler=jikes build' ( with ##### surround the error to help it stand out): [javac] Issued 1 semantic warning compiling ""/home/nichoj/testing/spring-framework-1.2.1/src/org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator.java"":      [javac]     94.         protected final Log logger = LogFactory.getLog(getClass());     [javac]                                     ^----^     [javac] *** Semantic Warning: Field ""logger"" shadows a field of the same name in ""org.springframework.aop.framework.ProxyConfig"".          [javac] Issued 1 semantic warning compiling ""/home/nichoj/testing/spring-framework-1.2.1/src/org/springframework/beans/BeanWrapperImpl.java"":          [javac]    512.                         String nestedPath = propertyPath.substring(pos + 1);     [javac]                                        ^--------^     [javac] *** Semantic Warning: Local ""nestedPath"" shadows a field of the same name in ""org.springframework.beans.BeanWrapperImpl"".          [javac] Issued 1 semantic warning compiling ""/home/nichoj/testing/spring-framework-1.2.1/src/org/springframework/core/io/support/ResourcePatternResolver.java"":          [javac]     59.         String CLASSPATH_URL_PREFIX = ""classpath*:"";     [javac]                        ^------------------^     [javac] *** Semantic Warning: Field ""CLASSPATH_URL_PREFIX"" shadows a field of the same name in ""org.springframework.core.io.ResourceLoader"".  ##################################################################### [javac] Found 1 semantic error compiling ""/home/nichoj/testing/spring-framework-1.2.1/src/org/springframework/aop/interceptor/JamonPerformanceMonitorInterceptor.java"":      [javac]     20. import com.jamonapi.MonitorFactory;     [javac]                             ^------------^     [javac] *** Semantic Error: The class file ""MonitorFactory.class"" in ""/home/nichoj/testing/spring-framework-1.2.1/lib/jamon/JAMon.jar/com/jamonapi"" has an invalid format (ConstantValue attribute without final).  #####################################################################      [javac] Issued 1 semantic warning compiling ""/home/nichoj/testing/spring-framework-1.2.1/src/org/springframework/beans/factory/config/FieldRetrievingFactoryBean.java"":          [javac]    173.                 Class targetClass = (this.targetObject != null) ? this.targetObject.getClass() : this.targetClass;     [javac]                               ^---------^     [javac] *** Semantic Warning: Local ""targetClass"" shadows a field of the same name in ""org.springframework.beans.factory.config.FieldRetrievingFactoryBean"".          [javac] Issued 1 semantic warning compiling ""/home/nichoj/testing/spring-framework-1.2.1/src/org/springframework/context/support/AbstractRefreshableApplicationContext.java"":          [javac]     86.                         DefaultListableBeanFactory beanFactory = createBeanFactory();     [javac]                                                            ^---------^     [javac] *** Semantic Warning: Local ""beanFactory"" shadows a field of the same name in ""org.springframework.context.support.AbstractRefreshableApplicationContext"".          [javac] Issued 1 semantic warning compiling ""/home/nichoj/testing/spring-framework-1.2.1/src/org/springframework/context/access/ContextSingletonBeanFactoryLocator.java"":          [javac]     49.         public static final String BEANS_REFS_XML_NAME = ""classpath*:beanRefContext.xml"";     [javac]                                            ^-----------------^     [javac] *** Semantic Warning: Field ""BEANS_REFS_XML_NAME"" shadows a field of the same name in ""org.springframework.beans.factory.access.SingletonBeanFactoryLocator"".          [javac] Issued 1 semantic warning compiling ""/home/nichoj/testing/spring-framework-1.2.1/src/org/springframework/jca/cci/connection/SingleConnectionFactory.java"":          [javac]    112.                 Connection target = doCreateConnection();     [javac]                                    ^----^     [javac] *** Semantic Warning: Local ""target"" shadows a field of the same name in ""org.springframework.jca.cci.connection.SingleConnectionFactory"".          [javac] Issued 1 semantic warning compiling ""/home/nichoj/testing/spring-framework-1.2.1/src/org/springframework/jms/connection/SingleConnectionFactory.java"":          [javac]    136.                 Connection target = doCreateConnection();     [javac]                                    ^----^     [javac] *** Semantic Warning: Local ""target"" shadows a field of the same name in ""org.springframework.jms.connection.SingleConnectionFactory"".          [javac] Issued 1 semantic warning compiling ""/home/nichoj/testing/spring-framework-1.2.1/src/org/springframework/jdbc/support/JdbcAccessor.java"":          [javac]     94.                         DataSource dataSource = getDataSource();     [javac]                                            ^--------^     [javac] *** Semantic Warning: Local ""dataSource"" shadows a field of the same name in ""org.springframework.jdbc.support.JdbcAccessor"".          [javac] Issued 1 semantic warning compiling ""/home/nichoj/testing/spring-framework-1.2.1/src/org/springframework/jdbc/object/BatchSqlUpdate.java"":          [javac]    164.                 int[] rowsAffected = getJdbcTemplate().batchUpdate(     [javac]                               ^----------^     [javac] *** Semantic Warning: Local ""rowsAffected"" shadows a field of the same name in ""org.springframework.jdbc.object.BatchSqlUpdate"".          [javac] Issued 1 semantic warning compiling ""/home/nichoj/testing/spring-framework-1.2.1/src/org/springframework/mail/javamail/ConfigurableMimeFileTypeMap.java"":          [javac]    142.                 MimetypesFileTypeMap fileTypeMap = (mappingLocation != null) ?     [javac]                                              ^---------^     [javac] *** Semantic Warning: Local ""fileTypeMap"" shadows a field of the same name in ""org.springframework.mail.javamail.ConfigurableMimeFileTypeMap"".          [javac] Issued 3 semantic warnings compiling ""/home/nichoj/testing/spring-framework-1.2.1/src/org/springframework/mail/javamail/MimeMessageHelper.java"":          [javac]    280.                         FileTypeMap fileTypeMap = ((SmartMimeMessage) mimeMessage).getDefaultFileTypeMap();     [javac]                                             ^---------^     [javac] *** Semantic Warning: Local ""fileTypeMap"" shadows a field of the same name in ""org.springframework.mail.javamail.MimeMessageHelper"".               [javac]    285.                 ConfigurableMimeFileTypeMap fileTypeMap = new ConfigurableMimeFileTypeMap();     [javac]                                                     ^---------^     [javac] *** Semantic Warning: Local ""fileTypeMap"" shadows a field of the same name in ""org.springframework.mail.javamail.MimeMessageHelper"".               [javac]    627.                 MimeMultipart mimeMultipart = getMimeMultipart();     [javac]                                       ^-----------^     [javac] *** Semantic Warning: Local ""mimeMultipart"" shadows a field of the same name in ""org.springframework.mail.javamail.MimeMessageHelper"".          [javac] Issued 2 semantic warnings compiling ""/home/nichoj/testing/spring-framework-1.2.1/src/org/springframework/orm/hibernate3/HibernateAccessor.java"":          [javac]    304.                 String[] filterNames = getFilterNames();     [javac]                                  ^---------^     [javac] *** Semantic Warning: Local ""filterNames"" shadows a field of the same name in ""org.springframework.orm.hibernate3.HibernateAccessor"".               [javac]    319.                 String[] filterNames = getFilterNames();     [javac]                                  ^---------^     [javac] *** Semantic Warning: Local ""filterNames"" shadows a field of the same name in ""org.springframework.orm.hibernate3.HibernateAccessor"".          [javac] Issued 1 semantic warning compiling ""/home/nichoj/testing/spring-framework-1.2.1/src/org/springframework/orm/hibernate/HibernateTransactionManager.java"":          [javac]    394.                                 Interceptor entityInterceptor = getEntityInterceptor();     [javac]                                                     ^---------------^     [javac] *** Semantic Warning: Local ""entityInterceptor"" shadows a field of the same name in ""org.springframework.orm.hibernate.HibernateTransactionManager"".          [javac] Issued 1 semantic warning compiling ""/home/nichoj/testing/spring-framework-1.2.1/src/org/springframework/orm/hibernate3/HibernateTransactionManager.java"":          [javac]    392.                                 Interceptor entityInterceptor = getEntityInterceptor();     [javac]                                                     ^---------------^     [javac] *** Semantic Warning: Local ""entityInterceptor"" shadows a field of the same name in ""org.springframework.orm.hibernate3.HibernateTransactionManager"".          [javac] Issued 1 semantic warning compiling ""/home/nichoj/testing/spring-framework-1.2.1/src/org/springframework/remoting/jaxrpc/JaxRpcPortClientInterceptor.java"":          [javac]    479.                 QName portQName = getPortQName();     [javac]                               ^-------^     [javac] *** Semantic Warning: Local ""portQName"" shadows a field of the same name in ""org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor"".          [javac] Issued 1 semantic warning compiling ""/home/nichoj/testing/spring-framework-1.2.1/src/org/springframework/scheduling/quartz/MethodInvokingJobDetailFactoryBean.java"":          [javac]    116.                 String name = (this.name != null ? this.name : this.beanName);     [javac]                                ^--^     [javac] *** Semantic Warning: Local ""name"" shadows a field of the same name in ""org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"".          [javac] Issued 2 semantic warnings compiling ""/home/nichoj/testing/spring-framework-1.2.1/src/org/springframework/validation/DataBinder.java"":          [javac]    359.                         String[] allowedFields = getAllowedFields();     [javac]                                          ^-----------^     [javac] *** Semantic Warning: Local ""allowedFields"" shadows a field of the same name in ""org.springframework.validation.DataBinder"".               [javac]    382.                         String[] requiredFields = getRequiredFields();     [javac]                                          ^------------^     [javac] *** Semantic Warning: Local ""requiredFields"" shadows a field of the same name in ""org.springframework.validation.DataBinder"".          [javac] Issued 1 semantic warning compiling ""/home/nichoj/testing/spring-framework-1.2.1/src/org/springframework/web/bind/WebDataBinder.java"":          [javac]    127.                         String fieldMarkerPrefix = getFieldMarkerPrefix();     [javac]                                        ^---------------^     [javac] *** Semantic Warning: Local ""fieldMarkerPrefix"" shadows a field of the same name in ""org.springframework.web.bind.WebDataBinder"".          [javac] Issued 1 semantic warning compiling ""/home/nichoj/testing/spring-framework-1.2.1/src/org/springframework/web/filter/DelegatingFilterProxy.java"":          [javac]    162.                 Filter delegate = (Filter) wac.getBean(getTargetBeanName(), Filter.class);     [javac]                                ^------^     [javac] *** Semantic Warning: Local ""delegate"" shadows a field of the same name in ""org.springframework.web.filter.DelegatingFilterProxy"".          [javac] Issued 1 semantic warning compiling ""/home/nichoj/testing/spring-framework-1.2.1/src/org/springframework/web/multipart/commons/CommonsMultipartResolver.java"":          [javac]    184.                 DiskFileUpload fileUpload = this.fileUpload;     [javac]                                        ^--------^     [javac] *** Semantic Warning: Local ""fileUpload"" shadows a field of the same name in ""org.springframework.web.multipart.commons.CommonsMultipartResolver"".          [javac] Issued 1 semantic warning compiling ""/home/nichoj/testing/spring-framework-1.2.1/src/org/springframework/web/servlet/handler/AbstractHandlerMapping.java"":          [javac]     42.         protected final Log logger = LogFactory.getLog(getClass());     [javac]                                     ^----^     [javac] *** Semantic Warning: Field ""logger"" shadows a field of the same name in ""org.springframework.context.support.ApplicationObjectSupport"".          [javac] Issued 1 semantic warning compiling ""/home/nichoj/testing/spring-framework-1.2.1/src/org/springframework/web/servlet/support/RequestContext.java"":          [javac]    240.                 Locale locale = (Locale) getRequest().getAttribute(JSTL_LOCALE_ATTRIBUTE);     [javac]                                ^----^     [javac] *** Semantic Warning: Local ""locale"" shadows a field of the same name in ""org.springframework.web.servlet.support.RequestContext"".          [javac] Issued 1 lexical warning in ""/home/nichoj/testing/spring-framework-1.2.1/target/generated-commons-attributes-src/org/springframework/web/servlet/handler/metadata/PathMap$__attributeRepository.java"":          [javac]      2. public class PathMap$__attributeRepository implements org.apache.commons.attributes.AttributeRepositoryClass {     [javac]                      ^---------------------------^     [javac] *** Lexical Warning: The use of ""$"" in an identifier, while legal, is strongly discouraged, since it can conflict with compiler-generated names. If you are trying to access a nested type, use ""."" instead of ""$"".    ---  **Affects:** 1.2.1","closed","status: declined,","spring-projects-issues","2005-07-03T15:48:30Z","2019-01-12T16:41:08Z"
"","5771","Add cacheableMappingResources to LocalSessionFactoryBean to speed development [SPR-1064]","**[Josh Moore](https://jira.spring.io/secure/ViewProfile.jspa?name=joshmoore)** opened **[SPR-1064](https://jira.spring.io/browse/SPR-1064?redirect=false)** and commented  Building a Hibernate SessionFactory is a long process making testing time consuming. http://hibernate.org/194.html suggests using Configuration.addCacheableFile()  see also:   http://www.hibernate.org/hib_docs/v3/api/org/hibernate/cfg/Configuration.html#addCacheableFile(java.io.File)  By adding a ""setCacheableMappingResources(Resources[])"" method to LocalSessionFactorBean parsed hbm.xml files can be serialized for later use. In ""afterPropertiesSet()"" calls can be made to add the files:  config.addCacheableFile(this.cachedMappingResources[i].getFile());  It's also possible to design a subclass of LocalSessionFactoryBean using ""postProcessConfiguration"" (attachment to follow).  Note: a limitation is that the Hibernate mapping files cannot be in a jar.    ---  **Attachments:** - [CachingSessionFactoryBean.java](https://jira.spring.io/secure/attachment/10813/CachingSessionFactoryBean.java) (_2.05 kB_)","closed","type: enhancement,","spring-projects-issues","2005-06-21T00:33:00Z","2005-06-24T02:41:43Z"
"","5202","Reference doc section 18.2.2 [SPR-473]","**[Jose Nyimi](https://jira.spring.io/secure/ViewProfile.jspa?name=josenyimi)** opened **[SPR-473](https://jira.spring.io/browse/SPR-473?redirect=false)** and commented  In section 18.2.2 it is written the following: ""To make jobs resulting from the MethodInvokingJobDetailFactoryBEan non-concurrent set the concurrent flag to false.""  I was expecting to see this flag shown in the code that follow above setence but it's not the case. It seems that the author pasted the same code shown some lines before.  \ \\\ \\doIt\\ \  Regards, José.   ---  **Affects:** 1.1.2","closed","type: task,","spring-projects-issues","2004-11-17T07:42:40Z","2004-11-21T23:22:39Z"
"","4978","JAXM Support [SPR-247]","**[Jose Nyimi](https://jira.spring.io/secure/ViewProfile.jspa?name=josenyimi)** opened **[SPR-247](https://jira.spring.io/browse/SPR-247?redirect=false)** and commented  JAXM (Java API for XML Messaging) is promizing ...  I would like to see Spring providing support to it like it already the case for other Java technologies like JMS, JAX-RPC etc ...  Some reference: http://java.sun.com/xml/jaxm/ http://www.onjava.com/lpt/a/3653  José.   ---  1 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2004-08-06T01:00:34Z","2007-01-03T21:00:22Z"
"","5100","ORM - Making the templates generic [SPR-370]","**[Jonas Van Poucke](https://jira.spring.io/secure/ViewProfile.jspa?name=jvpoucke)** opened **[SPR-370](https://jira.spring.io/browse/SPR-370?redirect=false)** and commented  I like the Object/Relational mapping in Spring, especially the fact that more than one solution is supported. However, when looking at the JavaDocs, there is no common super-interface for e.g. the templates. I would have expected and interface with the basic CRUD operations, something like:  interface ORMTemplate { void save(Object entity); void delete(Object entity); void deleteAll(Collection entities); Collection findByID(Object id); ... }  and let HibernateTemplate, SqlMapInterface and the likes extends this super-interface. The advantage would be that I can switch from onbe ORM technology to another if I only use the Basic CRUD operations. (Also provide a generic DAOHelper). Do you see fit for such an interface?    --- No further details from [SPR-370](https://jira.spring.io/browse/SPR-370?redirect=false)","closed","type: enhancement,","spring-projects-issues","2004-10-04T21:51:57Z","2005-02-28T02:30:06Z"
"","4984","Typo in documentation [SPR-253]","**[Jonas Van Poucke](https://jira.spring.io/secure/ViewProfile.jspa?name=jvpoucke)** opened **[SPR-253](https://jira.spring.io/browse/SPR-253?redirect=false)** and commented  In the online documentation, section 16.4, there is a remark on RMI: serialization of Hibernate objects (loaded lazily) and sessions might pose a problem when using RMI. However, the doc mentions: ""If you have such a data model, consider using RMI instead of Hessian."" This should be the inverse, I think: ""If you have such a data model, consider using Hessian instead of RMI.""   --- No further details from [SPR-253](https://jira.spring.io/browse/SPR-253?redirect=false)","closed","type: enhancement,","spring-projects-issues","2004-08-09T21:44:53Z","2004-08-16T05:49:12Z"
"","5207","JmxMBeanAdapter: conflict with PropertyPlaceholderConfigurer [SPR-478]","**[Jonas Kilian](https://jira.spring.io/secure/ViewProfile.jspa?name=jonaskilian)** opened **[SPR-478](https://jira.spring.io/browse/SPR-478?redirect=false)** and commented  When binding my beans to the JmxMBeanAdapter, I found that they're exported (and therefore instantiated) BEFORE PropertyPlaceholderConfigurer has done its work.  E.g. for my datasource, this leads to errors like:  Cannot instantiate driver, caused by ClassNotFoundException: ${db.driver}  and the like..  ---  **Issue Links:** - #5240 Type mismatch when using custom property editors with Spring JMX (_**""is duplicated by""**_)","closed","type: bug,","spring-projects-issues","2004-11-21T22:44:32Z","2019-01-11T14:14:28Z"
"","5099","Restrict visibility of beans in app context [SPR-369]","**[Jonas Kilian](https://jira.spring.io/secure/ViewProfile.jspa?name=jonaskilian)** opened **[SPR-369](https://jira.spring.io/browse/SPR-369?redirect=false)** and commented  I'd like to have the possiblity, not to make lowlevel spring beans like ""dataSource"", ""hibernateSessionFactory"" etc. visible to /any/ application code.  Of course, they should be accessible by other beans via \ but right now, one can always access every single bean using MyAppContext.getBean(..)  This is also an issue for my DAOs, which in turn should not just be usable by ""anybody"" but rather only by my BusinessLogicBeans etc.  The goal is to ensure some kind of proper design and layers just by keeping an eye on my (ideally visualized) application context descriptors and how \ constructs are used.  somehow related to  #5069 #4906  ---  **Affects:** 1.1 final  **Issue Links:** - #8410 Add visibility to beans (_**""is duplicated by""**_)  11 votes, 7 watchers","closed","has: votes-jira,","spring-projects-issues","2004-10-04T20:21:16Z","2019-01-11T14:02:35Z"
"","5620","Allow multiple configuration resources for Hibernate3 LocalSessionBeanFactory [SPR-893]","**[Jon Skeet](https://jira.spring.io/secure/ViewProfile.jspa?name=jskeet)** opened **[SPR-893](https://jira.spring.io/browse/SPR-893?redirect=false)** and commented  Currently LocalSessionBeanFactory accepts a single configuration file (via the configLocation property).  In certain circumstances it would be useful to be able to specify multiple configuration files. Hibernate itself allows this, using the Configuration.addFile/addURL methods. It would be nice if Spring could expose this functionality, e.g. by having a configLocations property in the same way as it already has things like setMappingJarLocations.   ---  **Affects:** 1.2 RC2","closed","type: enhancement,","spring-projects-issues","2005-04-20T02:24:47Z","2005-04-20T18:42:35Z"
"","5423","Add FactoryBean that generates a factory that can provide initialization values [SPR-695]","**[Jon Bodner](https://jira.spring.io/secure/ViewProfile.jspa?name=bodnej)** opened **[SPR-695](https://jira.spring.io/browse/SPR-695?redirect=false)** and commented  The ServiceLocatorFactoryBean introduced in 1.1.4 provides a way to automatically create a factory, given an interface that describes the factory.  There is one drawback, though: the bean returned by the factory must be populated by Spring.  It is not possible to provide dynamic parameters, either for a non-zero-arg constructor or for an init method.  It would be very helpful if Spring provided a way to create factories from interfaces that can supply initialization values at run time rather than design time.  For example:  public interface MyFactory { MyBean createOne(int initParam1, int initParam2); }  public interface MyBean { public int getSum(); }  public class MyBean1 implements MyBean { private int _sum;      public MyBean1(int initParam1, int initParam2) {         _sum = initParam1 + initParam2;      }            public int getSum() {           return _sum;       }   }  Simply returning an empty bean and relying on the client code to call setters is not a good solution.  I don't want to save the state that's being passed in; it's only used to create state that I do care about. Using setters would mean that I would (1) have to store values I don't need or want and (2) have to add another method to actually do the work after all the setters have been invoked, and add error checking to make sure that all of them have been invoked (boolean guard flags around each setter variable? A count to keep track of how many my set-up setters have been called?).  A trivial example of a case where this functionality would be helpful is a servlet that uses the aforementioned classes to return the sum of any two numbers entered into a form on a web page and returns the sum.   ---  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2005-02-07T14:03:33Z","2019-01-11T12:50:59Z"
"","4918","Nested Validators and Error paths [SPR-186]","**[Jon Anderson](https://jira.spring.io/secure/ViewProfile.jspa?name=janders)** opened **[SPR-186](https://jira.spring.io/browse/SPR-186?redirect=false)** and commented  Attached is patch to Errors, EscapedErrors, and BindException that allows the nested path used for validation to be manipulated like a stack with a popNestedPath and a pushNestedPath methods.  Being able to nest forms together can save a lot of time and development effort.  Nesting validators has the same effect.  However, it's difficult to nest validators because the path used in errors needs to be set absolutely. So if a Validator makes use of a SubValidator for a portion of it's work, it might need to modify the nestedPath and return it to it's previous state before leaving the validate() method.  For example.  A PersonForm has a AddressForm, and is validated with a PersonValidator that makes use of a AddressValidator.  The validate method for PersonValidator would be as follows:  public void validate() { //other field validation here. pushNestedPath(""address""); addressValidator().validate(); popNestedPath(); }  This way the PersonForm can be nested into other forms, such as CompanyForm,  ApplicationForm, etc, without code changes.    ---  **Attachments:** - [nestedPath.patch](https://jira.spring.io/secure/attachment/10116/nestedPath.patch) (_2.86 kB_)","closed","type: enhancement,","spring-projects-issues","2004-06-25T04:29:08Z","2004-07-31T07:35:20Z"
"","5737","Transaction participator should not make the decision to roll back transaction [SPR-1029]","**[John Zhang](https://jira.spring.io/secure/ViewProfile.jspa?name=johnzhang)** opened **[SPR-1029](https://jira.spring.io/browse/SPR-1029?redirect=false)** and commented  please refer to this thread for more detail: http://forum.springframework.org/viewtopic.php?t=5650  The major point is: only the transaction originator can commit or roll back a transaction. Transaction participator should not do that because they don't know if the originator can handle the exception or not.  Currently if I have a transaction that contains insert, update and findBy, the failure of findBy will roll back the whole transaction, which is usually not desired.   ---  **Affects:** 1.2 final","closed","type: bug,","spring-projects-issues","2005-06-10T01:56:03Z","2005-07-25T00:25:57Z"
"","5156","Session grabbing in the wizardformcontroller [SPR-426]","**[John Kwon](https://jira.spring.io/secure/ViewProfile.jspa?name=jtkwon)** opened **[SPR-426](https://jira.spring.io/browse/SPR-426?redirect=false)** and commented  If you do not have cookies enabled on a client, the session id is encoded automatically by Tomcat into the url.  Get to a page controlled by the wizard controller, and cut and paste the url (including the session id) to another machine's browser.  The same page you have up on one machine will now be up on another.  The controller is unable to distinguish between one machine and another.  Grabbing the request IP doesn't work if the client's have to cross a firewall to get to the Tomcat server - Tomcat sees all as having the same IP address.  Any ideas?  Hidden variables get encoded into the URL as well...   ---  **Affects:** 1.1.1","closed","status: declined,","spring-projects-issues","2004-10-25T07:00:21Z","2019-01-12T16:42:04Z"
"","5140","Misrouting of page views in wizard controller [SPR-410]","**[John Kwon](https://jira.spring.io/secure/ViewProfile.jspa?name=jtkwon)** opened **[SPR-410](https://jira.spring.io/browse/SPR-410?redirect=false)** and commented  Here is an excerpt from the log file.  The getTargetPage is definitely returning a value of 5, and yet the wizard is taking me to page 0.  In other parts of getTargetPage, we successfully can route to pages 0 to 6 (but not 5).  Any ideas on what I'm missing?  [org.pcaob.dms.inset.web.RegistrantWizardFormController] - \ [org.pcaob.dms.inset.web.RegistrantWizardFormController] -  [org.pcaob.dms.inset.web.RegistrantWizardFormController] - \ [org.pcaob.dms.inset.web.RegistrantWizardFormController] - \ [org.springframework.beans.BeanWrapperImpl] -  [org.springframework.beans.BeanWrapperImpl] -  [org.springframework.beans.BeanWrapperImpl] -  [org.pcaob.dms.inset.web.RegistrantWizardFormController] - \ [org.pcaob.dms.inset.web.RegistrantWizardFormController] -  [org.pcaob.dms.inset.web.RegistrantWizardFormController] - \ [org.pcaob.dms.inset.web.RegistrantWizardFormController] -  [org.pcaob.dms.inset.web.RegistrantWizardFormController] -  [org.pcaob.dms.inset.web.RegistrantWizardFormController] -    ---  **Affects:** 1.1.1","closed","in: web,","spring-projects-issues","2004-10-20T01:08:15Z","2019-01-11T14:18:47Z"
"","5111","ClassCastException  [SPR-381]","**[John Kwon](https://jira.spring.io/secure/ViewProfile.jspa?name=jtkwon)** opened **[SPR-381](https://jira.spring.io/browse/SPR-381?redirect=false)** and commented  I didn't change any of my code - just upgraded from 1.0.2 to 1.1.1, and I get this after I recompiled everything and attempted to run the application (which worked before).  root cause  java.lang.ClassCastException org.apache.jsp.WEB_002dINF.jsp.login_jsp._jspService(login_jsp.java:133) org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:94) javax.servlet.http.HttpServlet.service(HttpServlet.java:802) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:324) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:292) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:236) javax.servlet.http.HttpServlet.service(HttpServlet.java:802) org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:87) org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:219) org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:527) org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:427) org.springframework.web.servlet.FrameworkServlet.serviceWrapper(FrameworkServlet.java:342) org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:318) javax.servlet.http.HttpServlet.service(HttpServlet.java:689) javax.servlet.http.HttpServlet.service(HttpServlet.java:802) org.pcaob.dms.inset.web.LoginFilter.doFilter(LoginFilter.java:87)    ---  **Affects:** 1.1.1","closed","status: declined,","spring-projects-issues","2004-10-07T02:06:45Z","2019-01-12T16:42:10Z"
"","5055","CustomDateEditor date/string conversion problem [SPR-325]","**[John Kwon](https://jira.spring.io/secure/ViewProfile.jspa?name=jtkwon)** opened **[SPR-325](https://jira.spring.io/browse/SPR-325?redirect=false)** and commented  When I type in a date such as 12/32/2004, the string gets converted to 1/1/2005.  Is this normal?   ---  **Affects:** 1.0.2","closed","status: declined,","spring-projects-issues","2004-09-09T05:45:41Z","2019-01-12T16:42:15Z"
"","4960","Tomcat 5.0.27 context loading problem [SPR-229]","**[John Kwon](https://jira.spring.io/secure/ViewProfile.jspa?name=jtkwon)** opened **[SPR-229](https://jira.spring.io/browse/SPR-229?redirect=false)** and commented  I have four context xml files, and if I leave them in the WEB-INF directory, one of them is loaded and the next one is not - it can't find the file because it's now looking in another directory - the bin directory off of CATALINA_HOME.  I can't get my app to load unless I put the context XML files in that directory as well.  Maybe I just have something misconfigured...  Here's some of the stack: 2004-07-20 08:52:52 StandardContext[/balancer]org.apache.webapp.balancer.BalancerFilter: init(): ruleChain: [org.apache.webapp.balancer.RuleChain: [org.apache.webapp.balancer.rules.URLStringMatchRule: Target string: News / Redirect URL: http://www.cnn.com], [org.apache.webapp.balancer.rules.RequestParameterRule: Target param name: paramName / Target param value: paramValue / Redirect URL: http://www.yahoo.com], [org.apache.webapp.balancer.rules.AcceptEverythingRule: Redirect URL: http://jakarta.apache.org]] 2004-07-20 08:52:52 StandardContext[/jsp-examples]ContextListener: contextInitialized() 2004-07-20 08:52:52 StandardContext[/jsp-examples]SessionListener: contextInitialized() 2004-07-20 08:52:53 StandardContext[/servlets-examples]ContextListener: contextInitialized() 2004-07-20 08:52:53 StandardContext[/servlets-examples]SessionListener: contextInitialized() 2004-07-20 08:52:58 StandardContext[/servlets-examples]SessionListener: contextDestroyed() 2004-07-20 08:52:58 StandardContext[/servlets-examples]ContextListener: contextDestroyed() 2004-07-20 08:52:58 StandardContext[/jsp-examples]SessionListener: contextDestroyed() 2004-07-20 08:52:58 StandardContext[/jsp-examples]ContextListener: contextDestroyed() 2004-07-20 09:43:35 StandardContext[/balancer]org.apache.webapp.balancer.BalancerFilter: init(): ruleChain: [org.apache.webapp.balancer.RuleChain: [org.apache.webapp.balancer.rules.URLStringMatchRule: Target string: News / Redirect URL: http://www.cnn.com], [org.apache.webapp.balancer.rules.RequestParameterRule: Target param name: paramName / Target param value: paramValue / Redirect URL: http://www.yahoo.com], [org.apache.webapp.balancer.rules.AcceptEverythingRule: Redirect URL: http://jakarta.apache.org]] 2004-07-20 09:43:36 StandardContext[/jsp-examples]ContextListener: contextInitialized() 2004-07-20 09:43:36 StandardContext[/jsp-examples]SessionListener: contextInitialized() 2004-07-20 09:43:36 StandardContext[/servlets-examples]ContextListener: contextInitialized() 2004-07-20 09:43:36 StandardContext[/servlets-examples]SessionListener: contextInitialized() 2004-07-20 09:43:52 StandardContext[/servlets-examples]SessionListener: contextDestroyed() 2004-07-20 09:43:52 StandardContext[/servlets-examples]ContextListener: contextDestroyed() 2004-07-20 09:43:52 StandardContext[/jsp-examples]SessionListener: contextDestroyed() 2004-07-20 09:43:52 StandardContext[/jsp-examples]ContextListener: contextDestroyed() 2004-07-20 09:54:27 StandardContext[/balancer]org.apache.webapp.balancer.BalancerFilter: init(): ruleChain: [org.apache.webapp.balancer.RuleChain: [org.apache.webapp.balancer.rules.URLStringMatchRule: Target string: News / Redirect URL: http://www.cnn.com], [org.apache.webapp.balancer.rules.RequestParameterRule: Target param name: paramName / Target param value: paramValue / Redirect URL: http://www.yahoo.com], [org.apache.webapp.balancer.rules.AcceptEverythingRule: Redirect URL: http://jakarta.apache.org]] 2004-07-20 09:54:29 StandardContext[/wait]Initializing WebApplicationContext for servlet 'wait' 2004-07-20 09:54:30 StandardContext[/wait]StandardWrapper.Throwable org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'registrantWizardForm' defined in resource [/WEB-INF/wait-servlet.xml] of ServletContext: Instantiation of bean failed; nested exception is org.springframework.beans.factory.BeanDefinitionStoreException: IOException parsing XML document from file [C:\jakarta-tomcat-5.0.27\bin\wait-applicationContext.xml]; nested exception is java.io.FileNotFoundException: wait-applicationContext.xml (The system cannot find the file specified) org.springframework.beans.factory.BeanDefinitionStoreException: IOException parsing XML document from file [C:\jakarta-tomcat-5.0.27\bin\wait-applicationContext.xml]; nested exception is java.io.FileNotFoundException: wait-applicationContext.xml (The system cannot find the file specified) java.io.FileNotFoundException: wait-applicationContext.xml (The system cannot find the file specified) at java.io.FileInputStream.open(Native Method) at java.io.FileInputStream.\(FileInputStream.java:106) at org.springframework.core.io.FileSystemResource.getInputStream(FileSystemResource.java:57) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:125) at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:125) at org.springframework.context.support.AbstractXmlApplicationContext.refreshBeanFactory(AbstractXmlApplicationContext.java:65) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:226) at org.springframework.context.support.FileSystemXmlApplicationContext.\(FileSystemXmlApplicationContext.java:60) at org.pcaob.dms.wait.web.RegistrantWizardFormController.\(RegistrantWizardFormController.java:135) at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39) at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27) at java.lang.reflect.Constructor.newInstance(Constructor.java:274) at java.lang.Class.newInstance0(Class.java:308) at java.lang.Class.newInstance(Class.java:261) at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:46) at org.springframework.beans.BeanWrapperImpl.\(BeanWrapperImpl.java:171) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:217) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:177) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:159) at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:399) at org.springframework.web.servlet.handler.AbstractUrlHandlerMapping.registerHandler(AbstractUrlHandlerMapping.java:161) at org.springframework.web.servlet.handler.SimpleUrlHandlerMapping.initApplicationContext(SimpleUrlHandlerMapping.java:96) at org.springframework.context.support.ApplicationObjectSupport.setApplicationContext(ApplicationObjectSupport.java:79) at org.springframework.context.support.ApplicationContextAwareProcessor.postProcessBeforeInitialization(ApplicationContextAwareProcessor.java:65) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:138) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:248) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:177) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:159) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:183) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:268) at org.springframework.web.context.support.XmlWebApplicationContext.refresh(XmlWebApplicationContext.java:131) at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:281) at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:229) at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:199) at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:102) at javax.servlet.GenericServlet.init(GenericServlet.java:211) at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1029) at org.apache.catalina.core.StandardWrapper.load(StandardWrapper.java:862) at org.apache.catalina.core.StandardContext.loadOnStartup(StandardContext.java:4013) at org.apache.catalina.core.StandardContext.start(StandardContext.java:4357) at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:823) at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:807) at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:595) at org.apache.catalina.core.StandardHostDeployer.install(StandardHostDeployer.java:277) at org.apache.catalina.core.StandardHost.install(StandardHost.java:832) at org.apache.catalina.startup.HostConfig.deployWARs(HostConfig.java:617) at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:431) at org.apache.catalina.startup.HostConfig.start(HostConfig.java:968) at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:349) at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1091) at org.apache.catalina.core.StandardHost.start(StandardHost.java:789) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1083) at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:478) at org.apache.catalina.core.StandardService.start(StandardService.java:480) at org.apache.catalina.core.StandardServer.start(StandardServer.java:2313) at org.apache.catalina.startup.Catalina.start(Catalina.java:556) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:324) at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:284) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:422)   ---  **Affects:** 1.0.2","closed","in: core,","spring-projects-issues","2004-07-20T07:58:40Z","2019-01-12T16:42:25Z"
"","5164","spring.tld incompatible with JRun's tag handling (which has a bug) [SPR-435]","**[John Casey](https://jira.spring.io/secure/ViewProfile.jspa?name=jdcasey)** opened **[SPR-435](https://jira.spring.io/browse/SPR-435?redirect=false)** and commented  Macromedia JRun has a bug in it's handling of tag libraries. Essentially, they mishandle the default value of \ inside the TLD \ element (XPath: /taglib/tag/variable)...this default value SHOULD BE true, but in JRun, it's set to false. It is not entirely clear to me how this causes the problem, but the result is that JSP code like:      will result in a JRun error that states something to the effect of:  \ Variable ""status"" cannot be found. \  I have found a Macromedia forum entry for this error:  http://tinyurl.com/6axfb  Basically, the workaround is for the spring.tld to be more explicit. Simply adding \true\ to any \ element section will make the TLD compatible with this version of JRun.  By looking at:  http://forum.springframework.org/viewtopic.php?p=6728#6728  I see that this is still a problem with the TLD in Spring-1.1.x, so I suggest that it be fixed in both versions...    ---  **Affects:** 1.0.2","closed","type: bug,","spring-projects-issues","2004-10-29T04:26:58Z","2004-10-29T05:07:17Z"
"","5776","An error in the ""Spring-MVC-step-by-step"" guide [SPR-1069]","**[John Brännström](https://jira.spring.io/secure/ViewProfile.jspa?name=johbra)** opened **[SPR-1069](https://jira.spring.io/browse/SPR-1069?redirect=false)** and commented  I were just using the ""Spring-MVC-step-by-step-Part"" when i hink i encountered an error in the guide. When i got to step ""Step 8 - Create your Controller"" and pasted in the code for "" SpringappController.java"" i got some errors. It couldn't find the import ""javax.servlet.ServletException"" and it also complained about ""The type javax.servlet.http.HttpServletRequest cannot be resolved. It is indirectly referenced from required .class files"". I managed to correct the error thopugh by adding ALL the jars from spring :-) to my library. Seems like the guide is missing a jar...? I'm using Eclipse 3.0.2 development plattform.   --- No further details from [SPR-1069](https://jira.spring.io/browse/SPR-1069?redirect=false)","closed","status: declined,","spring-projects-issues","2005-06-03T21:03:06Z","2019-01-12T16:41:10Z"
"","4926","Provide PropertyEditor for Date and Date[] [SPR-195]","**[John Atwood](https://jira.spring.io/secure/ViewProfile.jspa?name=johndoekyrgyz)** opened **[SPR-195](https://jira.spring.io/browse/SPR-195?redirect=false)** and commented  I would like to populate beans with Date and Date[] properties from an xml file using the FileSystemXmlApplicationContext class. Unfortunately neither the Java platform itself or spring provides a default property editor for the types Date and Date[]. This would also be helpful for those users who would like to have date properties on their command beans in SpringMVC. This has been mentioned several times in the spring forumn on sourceforge.   ---  **Attachments:** - [applicationContext.xml](https://jira.spring.io/secure/attachment/10118/applicationContext.xml) (_15.88 kB_) - [DateArrayPropertyEditor.java](https://jira.spring.io/secure/attachment/10119/DateArrayPropertyEditor.java) (_1.49 kB_)","closed","type: enhancement,","spring-projects-issues","2004-06-28T13:43:26Z","2004-07-19T07:05:31Z"
"","5854","quartz.SchedulerFactoryBean doesn't like id-less JobDetails [SPR-1152]","**[Johan](https://jira.spring.io/secure/ViewProfile.jspa?name=johan)** opened **[SPR-1152](https://jira.spring.io/browse/SPR-1152?redirect=false)** and commented  The following configuration will lead to the exportTrigger.doExport() being called twice per minute instead of exportTrigger.doExport() and importTrigger.doImport() being called once per minute each.  \ \ \ \ \ \ \ \ \ \ \ 	\\\ \\doImport\\ \ \ \\0 * * * * ?\\ \ \ \ \ 	\\\ \\doImport\\ \ \ \\0 * * * * ?\\ \  When I add different id tags to the MethodInvokingJobDetailFactoryBean beans it works ok.  As a resolution a) throw an error when initiating the application context about a missing id tag for the job details, or b) support id-less Job Detail beans as shown in the scenario above.  thank you, johan   ---  **Affects:** 1.2.2","closed","in: core,","spring-projects-issues","2005-07-18T23:48:50Z","2012-06-19T03:54:05Z"
"","5497","JDBCAccessor forces JDBC connection to be created during initialization [SPR-770]","**[Johan Eltes](https://jira.spring.io/secure/ViewProfile.jspa?name=johaneltes)** opened **[SPR-770](https://jira.spring.io/browse/SPR-770?redirect=false)** and commented  JDBCAccessor forces JDBC connection to be created during initialization:      public void afterPropertiesSet() {              if (getDataSource() == null) {                  throw new IllegalArgumentException(""dataSource is required"");              }              getExceptionTranslator();          }  getExceptionTranslator() is the trigger of a call-chain that down the call stack creates a connection to get metadata from the database (in order to determine database vendor, required to select the appropriate exception translator implementation).  WebSphere 5.1.1 and potentially other application servers don't allow XA connections used in local transactions to be mixed with XA connections created within a JTA transaction if all are created by the same DataSource.  Since bean context initialization occurs before start of a JTA transaction, the JDBCTemplate class cannot be wired (or implicitly wired through use of JdbcDaoSupport, that creates a JDBCTemplate in response to injection of a datasource) by Spring, when WebSphere 5 and XA datasources are used.   --- No further details from [SPR-770](https://jira.spring.io/browse/SPR-770?redirect=false)","closed","type: bug,","spring-projects-issues","2005-03-09T07:50:38Z","2005-03-10T08:02:23Z"
"","5095","Seamless switching between XA and non-XA DataSource [SPR-365]","**[Johan Eltes](https://jira.spring.io/secure/ViewProfile.jspa?name=johaneltes)** opened **[SPR-365](https://jira.spring.io/browse/SPR-365?redirect=false)** and commented  Using JDBC connection provided by an XA datasource outside the context of a JTA transaction is not allowed by spec. This is however a problem when you need to optimize read operations to occur outside of a JTA transaction. The application logic needs to know about two configured datasources - an XA and a none-XA datasource and test for active transaction (using the UserTransaction), to determine which one to use. This is a request for Spring to provide a datasource proxy that can be configured to reference two datasources - one XA and one none-XA. The proxyhandler would test for active transaction, and chose datasource based on the outcome of the test.   ---  **Affects:** 1.2 RC1","closed","type: enhancement,","spring-projects-issues","2004-10-03T09:30:17Z","2004-10-28T20:08:07Z"
"","5716","Improve BeanFactoryPostProcessor and BeanPostProcessor documentation [SPR-1006]","**[Joern Barthel](https://jira.spring.io/secure/ViewProfile.jspa?name=jbar)** opened **[SPR-1006](https://jira.spring.io/browse/SPR-1006?redirect=false)** and commented  Document more clearly why (in an ApplicationContext) a BeanPostProcessor is not recognized in inner bean definitions and why BeanPostProcessor's and BeanFactories won't play together (that is: a BeanFactory won't postprocess beans when implementing the BeanPostProcessor interface).  ---  **Affects:** 1.2.1  **Issue Links:** - #6908 PropertyPlaceholderConfigurer doesn't work with default-lazy-init=""true"" (_**""is depended on by""**_)","closed","type: enhancement,","spring-projects-issues","2005-06-02T22:29:39Z","2019-01-11T18:36:23Z"
"","5821","Use of this.getClass() in logging causing innacurate error logs [SPR-1117]","**[Joe Witt](https://jira.spring.io/secure/ViewProfile.jspa?name=joe.witt)** opened **[SPR-1117](https://jira.spring.io/browse/SPR-1117?redirect=false)** and commented  As an example -  org.springframework.test.AbstractSpringContextTests uses 	protected final Log logger = LogFactory.getLog(getClass());  When used in an inheritence hierarchy, which was the point for those test classes, the logger reports the name of the hierarchies run-time type instead of the class AbstractSpringContextTests.  As an alternative, using protected static final Log logger = LogFactory.getLog(AbstractSpringContextTests.class) will result in the correct log output.  There seems to be an inconsistent usage of LogFactory in the source.  Regardless, thanks for providing an excellent product :)    ---  **Affects:** 1.2.2","closed","status: declined,","spring-projects-issues","2005-07-09T10:37:42Z","2019-01-12T16:41:02Z"
"","5323","only call resultSet.getMetaData when needed [SPR-595]","**[Joe Shomphe](https://jira.spring.io/secure/ViewProfile.jspa?name=jshomphe)** opened **[SPR-595](https://jira.spring.io/browse/SPR-595?redirect=false)** and commented  In a few places rs.getMetaData is being called when it may not need to be:  For example in ListResultSetExtractor:  ResultSetMetaData rsmd = rs.getMetaData(); int numberOfColumns = rsmd.getColumnCount(); List listOfRows = new ArrayList(); while (rs.next()) { Map mapOfColValues =   CollectionFactory.createLinkedMapIfPossible(numberOfColumns); for (int i = 1; i","closed","type: enhancement,","spring-projects-issues","2005-01-05T03:45:17Z","2005-01-06T01:51:24Z"
"","5290","Oracle SQLException during jdbcTemplate.queryForList with null values [SPR-561]","**[Joe Shomphe](https://jira.spring.io/secure/ViewProfile.jspa?name=jshomphe)** opened **[SPR-561](https://jira.spring.io/browse/SPR-561?redirect=false)** and commented  When calling jdbcTemplate.queryForList(query, args[]) on oracle, an exception will be thrown if one of the args is a null object.  The following exception will be raised:  java.sql.SQLException: Invalid column type  Oracle expects a setNull to be used rather than setString(null)  This seems to be a similar bug to #4784  http://opensource.atlassian.com/projects/spring/browse/SPR-50?page=history  That was already fixed for callable statements and oracle  ---  **Affects:** 1.1.1, 1.1.2","closed","type: bug,","spring-projects-issues","2004-12-16T02:17:11Z","2019-01-11T12:41:49Z"
"","5761","Deadlock issue with single connection in connection pool [SPR-1054]","**[Joe Shomphe](https://jira.spring.io/secure/ViewProfile.jspa?name=jshomphe)** opened **[SPR-1054](https://jira.spring.io/browse/SPR-1054?redirect=false)** and commented  I think this is a bug....  Given the following conditions:  1) A Commons Connection pool with max and min connections set to 1 2) A Sql Call that will throw an error  A deadlock situation can happen around line 776 of JdbcTemplate.  try { Connection conToUse = con; if (this.nativeJdbcExtractor != null && this.nativeJdbcExtractor.isNativeConnectionNecessaryForNativeCallableStatements()) { conToUse = this.nativeJdbcExtractor.getNativeConnection(con); } cs = csc.createCallableStatement(conToUse); DataSourceUtils.applyTransactionTimeout(cs, getDataSource()); CallableStatement csToUse = cs; if (this.nativeJdbcExtractor != null) { csToUse = this.nativeJdbcExtractor.getNativeCallableStatement(cs); } Object result = action.doInCallableStatement(csToUse); SQLWarning warning = cs.getWarnings(); throwExceptionOnWarningIfNotIgnoringWarnings(warning); return result; } catch (SQLException ex) { throw getExceptionTranslator().translate(""executing CallableStatementCallback"", getSql(csc), ex); } finally { if (csc instanceof ParameterDisposer) { ((ParameterDisposer) csc).cleanupParameters(); } JdbcUtils.closeStatement(cs); DataSourceUtils.releaseConnection(con, getDataSource());  If we assume that Connection conToUse = con; Use one connection (pool is now empty)  and the execution of the Callable statement throws a sql exception,  throw getExceptionTranslator().translate(""executing CallableStatementCallback"", getSql(csc), ex);  Will be called.  This will result in an additional connection being requested from the pool.  The first connection should first be closed!!!  }   ---  **Affects:** 1.2.1","closed","type: bug,","spring-projects-issues","2005-06-17T08:30:06Z","2005-06-24T04:07:42Z"
"","5464","cayenne-1.1.jar in CVS includes old version of some apache classes [SPR-736]","**[Joe Kelly](https://jira.spring.io/secure/ViewProfile.jspa?name=cyboc)** opened **[SPR-736](https://jira.spring.io/browse/SPR-736?redirect=false)** and commented  I'm using the current version of Spring Framework that is in your CVS repository. When I tried to compile my app today, I got this compiler error:  isAssignmentCompatible(java.lang.Class,java.lang.Class) has protected access in org.apache.commons.beanutils.MethodUtils  ---  MethodUtils.class is in the jar file ""commons-beanutils.jar"" in your CVS repository. I opened that jar up and checked the isAssignmentCompatible() method -- it is PUBLIC, not protected, as the compiler stated.  Now I know that isAssignmentCompatible() USED TO be protected in earlier versions of commons-beanutils so I suspected that some other jar file must include the older version of that class. Sure enough, I did a search and the old version was in the jar ""cayenne-1.1.jar"" in your CVS repository. In that old version, the method was protected. And the compiler was loading the cayenne jar before the beanutils jar.  Perhaps your CVS repository should include the ""no dep"" version of the cayenne jar (i.e. cayenne-nodeps.jar) instead of the one you are using?  For more info, see this bug report on Cayenne's site: http://www.objectstyle.org/jira/secure/ViewIssue.jspa?key=CAY-163  ---  On a related note, I also noticed that cayenne-1.1.jar is stamped with the ""release-1-1-4"" tag in CVS but it is NOT actually included in the official ""spring-framework-1.1.4-with-dependencies.zip"" release file that I downloaded from Sourceforge. I thought that was a bit inconsistent.  ---  **Affects:** 1.1.4","closed","","spring-projects-issues","2005-02-22T07:16:17Z","2019-01-13T22:52:33Z"
"","5463","Old version of jasperreports library jar still in CVS [SPR-735]","**[Joe Kelly](https://jira.spring.io/secure/ViewProfile.jspa?name=cyboc)** opened **[SPR-735](https://jira.spring.io/browse/SPR-735?redirect=false)** and commented  Hi, I wasn't sure whether to report this here or in the support forums. Anyway, here it is...  I noticed today that Spring Framework release 1.1.4 now ships with ""jasperreports-0.6.4.jar"". However, the ""spring"" CVS repository on Sourceforge has both ""jasperreports-0.6.4.jar"" as well as the older ""jasperreports-0.6.3.jar"". Shouldn't ""jasperreports-0.6.3.jar"" be removed from CVS if it is no longer required?  Cheers, Joe   ---  **Affects:** 1.1.4","closed","","spring-projects-issues","2005-02-22T05:02:27Z","2019-01-11T12:57:38Z"
"","5118","Schema Setting DataSource [SPR-388]","**[Joe Kelly](https://jira.spring.io/secure/ViewProfile.jspa?name=cyboc)** opened **[SPR-388](https://jira.spring.io/browse/SPR-388?redirect=false)** and commented  Hi,  Can you please add a ""schema setting"" DataSource to the Spring Framework. This DataSource will allow you to dynamically set the database schema to be used every time DataSource.getConnection() is called. Furthermore, this ""schema setting"" should be able to work transparently with any vendor's database.  Please see this forum discussion for more details and background:  http://forum.springframework.org/viewtopic.php?t=1213  Following is my stupid, simplistic, hackish implementation. Perhaps you can improve upon it; it works for me. Anyway, the basic idea is that I use a derived DelegatingDataSource to proxy the real DataSource. After I obtain the connection from the real DataSource, I execute a vendor-specific SQL query to set the connection's default schema. To obtain the Database vendor's name, I use your SQLErrorCodeFactory like this: SQLErrorCodesFactory.getInstance().getErrorCodes(target) .getDatabaseProductName()  For now, my code only works with DB2 and Oracle, but it should be easy to add support for other vendors. The cool thing is, I do NOT have to hard-code the vendor's name into the config for the DelegatingDataSource.  Here's the code:  ------code start -------------------------- package com.cbconstantini.spring.locationapp.util;  import java.sql.Connection; import java.sql.SQLException; import java.text.MessageFormat;  import javax.sql.DataSource;  import org.springframework.jdbc.core.JdbcTemplate; import org.springframework.jdbc.datasource.DelegatingDataSource; import org.springframework.jdbc.datasource.SingleConnectionDataSource; import org.springframework.jdbc.support.SQLErrorCodesFactory;  /** * Proxies a target DataSource's getConnection methods so that the returned * Connection's schema can be set. * `@author` jkelly   */   public class SchemaSettingDataSourceProxy extends DelegatingDataSource   {   private String schema;   private String schemaTemplateSql = ""{0}"";   private String schemaSql;   private JdbcTemplate jdbcTemplate;  // regular expression constants for matching database product names private static final String DB2_NAME_PATTERN = ""DB2""; private static final String ORACLE_NAME_PATTERN = ""ORACLE""; private static final String DB2_SCHEMA_TEMPLATE = ""set current schema = {0}""; private static final String ORACLE_SCHEMA_TEMPLATE = ""alter session set current_schema = {0}"";  public SchemaSettingDataSourceProxy() { // Create jdbcTemplate once and cache it so that you only // fetch DatabaseMetaData once. jdbcTemplate = new JdbcTemplate();     }  public Connection getConnection() throws SQLException { Connection con = super.getConnection(); setSchemaOnConnection(con); return con; }  public Connection getConnection(String username, String password) throws SQLException { Connection con = super.getConnection(username, password); setSchemaOnConnection(con); return con; }  public String getSchema() { return schema; }  public void setSchema(String schema) { this.schema = schema; buildSchemaSql(); }  public String getSchemaTemplateSql() { return schemaTemplateSql; }  public void setTargetDataSource(DataSource ds) { super.setTargetDataSource(ds); afterSetTargetDataSource(ds); }  private void setSchemaOnConnection(Connection con) { SingleConnectionDataSource ds = new SingleConnectionDataSource(con, true); jdbcTemplate.setDataSource(ds); jdbcTemplate.execute(schemaSql); }  private void afterSetTargetDataSource(DataSource target) { // set schemaSql String databaseProductName = getDatabaseProductName(target); if (databaseProductName.toUpperCase().indexOf( DB2_NAME_PATTERN.toUpperCase()) != -1) { schemaTemplateSql = DB2_SCHEMA_TEMPLATE; } else if (databaseProductName.toUpperCase().indexOf( ORACLE_NAME_PATTERN.toUpperCase()) != -1) { schemaTemplateSql = ORACLE_NAME_PATTERN; } else { throw new RuntimeException(""Unsupported database product '"" + databaseProductName + ""'"");   }   buildSchemaSql();   }  private String getDatabaseProductName(DataSource target) { // Hack to easily get DatabaseProductName return SQLErrorCodesFactory.getInstance().getErrorCodes(target) .getDatabaseProductName(); }  private void buildSchemaSql() { schemaSql = MessageFormat.format(schemaTemplateSql, new Object[] { schema }); } } ------code stop--------------------------  Here's a snippet from my bean configuration:  ------bean config start------------------ \ \\\ \\COMPANY_1\\ \  \ \ \COM.ibm.db2.jdbc.app.DB2Driver\ \ \ \jdbc:db2:dev\ \ \ \SOME_USER\ \ \ \SOME_PASSWORD\ \ \ \true\ \ 		 \ ------bean config stop--------------   ---  **Affects:** 1.1.1  **Attachments:** - [HibernateDemo.rar](https://jira.spring.io/secure/attachment/11440/HibernateDemo.rar) (_294.23 kB_) - [readme.txt](https://jira.spring.io/secure/attachment/11441/readme.txt) (_1.24 kB_)  4 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2004-10-12T04:53:26Z","2006-03-09T02:48:42Z"
"","5564","Weird freemarker behavior with spring.ftl [SPR-838]","**[Jo Størset](https://jira.spring.io/secure/ViewProfile.jspa?name=storset)** opened **[SPR-838](https://jira.spring.io/browse/SPR-838?redirect=false)** and commented  in certain cases i get this freemarker exception:  Expression spring is undefined on line 81, column 44 in spring.ftl. The problematic instruction: ---------- ==> assignment: stringStatusValue=spring.status.value?default("""") [on line 81, column 17 in spring.ftl]  in user-directive spring.bind  In short, the case that is causing problems is:  my template main.ftl includes other templates, located in the subdirectory components. If main.ftl doesn't, but several of the components import spring.ftl, the error occurs.  Sadly, I don't have enough time to throw at this to track down the exact freemarker problem. But regardless it highligts what seems to be an unnecessary and unwanted reference to the spring variable in spring.ftl.  From what I can see, spring.ftl doesn't assign or need the spring variable, and therefore shouldn't reference it. In addition to the error I get, this reference unnecessarily forces users to assign spring.ftl to the spring variable/hash, doesn't it?  Am I missing something?   ---  **Affects:** 1.2 RC1  **Attachments:** - [spring.ftl.patch](https://jira.spring.io/secure/attachment/10622/spring.ftl.patch) (_4.33 kB_)","closed","type: bug,","spring-projects-issues","2005-03-30T23:35:42Z","2005-04-11T22:01:41Z"
"","5594","FieldRetrievingFactoryBean's handling of whitespace. [SPR-868]","**[jmwap](https://jira.spring.io/secure/ViewProfile.jspa?name=jmwap)** opened **[SPR-868](https://jira.spring.io/browse/SPR-868?redirect=false)** and commented  \ \ \ net.sf.acegisecurity.acl.basic.SimpleAclEntry.READ \ \ \  That xml throws a not found exception, cause tabs and spaces are not trimmed from inside the \  http://forum.springframework.org/viewtopic.php?t=4491 http://forum.springframework.org/viewtopic.php?t=4487  thanks,   ---  **Affects:** 1.2 RC2","closed","type: bug,","spring-projects-issues","2005-04-08T19:19:35Z","2005-04-08T19:24:16Z"
"","5575","Make rejectIf* methods return a boolean [SPR-849]","**[Jing Xue](https://jira.spring.io/secure/ViewProfile.jspa?name=manifoldronin)** opened **[SPR-849](https://jira.spring.io/browse/SPR-849?redirect=false)** and commented  Currently ValidationUtils.rejectIf* methods return void. It'd be more convenient if they return a boolean indicating if there was a rejection. This would help avoid duplicated logic in cases like: ValidationUtils.rejectIfEmptyOrWhitespace(errors, ""email"", ""required""); if ((account.getEmail() != null) && !account.getEmail().isValidEmail()) { errors.reject(""invalidEmailAddr""); }   ---  **Affects:** 1.2 RC1","closed","type: enhancement,","spring-projects-issues","2005-04-04T08:41:21Z","2005-04-04T09:19:36Z"
"","5189","some sandbox src uses 'enum' for var names [SPR-460]","**[Jing Xue](https://jira.spring.io/secure/ViewProfile.jspa?name=manifoldronin)** opened **[SPR-460](https://jira.spring.io/browse/SPR-460?redirect=false)** and commented  I posted this on the forum and someone told me to create a JIRA issue, so here it goes(although I'm not sure it's really an issue as this is only happening in the sandbox) - basically a few classes from various packages in the sandbox are using 'enum' for variable names, which causes these classes fail to compile with javac 1.5.   ---  **Affects:** 1.1.3","closed","in: core,","spring-projects-issues","2004-11-14T15:56:20Z","2004-12-30T08:25:34Z"
"","5178","NullPointerException thrown when StaticApplicationContext becomes parent [SPR-449]","**[Jing Xue](https://jira.spring.io/secure/ViewProfile.jspa?name=manifoldronin)** opened **[SPR-449](https://jira.spring.io/browse/SPR-449?redirect=false)** and commented  I have a ClassPathXmlApplicationContext instantiated as: context_ = new ClassPathXmlApplicationContext( configLocations, true, staticContext); where staticContext is a StaticApplicationContext instantiated earlier.  When I try to run the code, I get this exception: \java.lang.NullPointerException at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:202) at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:204) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:286) at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:111) at com.mypackage.AppContextTestCase.setUp(AppContextTestCase.java:34) at com.mypackage.DBTestCase.setUp(DBTestCase.java:66) at org.jmock.core.VerifyingTestCase.runBare(Unknown Source) \  I went ahead and looked at AbstractApplicationContext in CVS.  Looks like StaticApplicationContext does not have its applicationEventMulticaster properly initiated, but does get called on that when it is the parent of another AbstractApplicationContext.   ---  **Affects:** 1.1.1","closed","in: core,","spring-projects-issues","2004-11-06T12:19:56Z","2004-11-06T22:01:26Z"
"","5849","Incorrect exception logging while resolving overloaded factory methods [SPR-1147]","**[Jing Xue](https://jira.spring.io/secure/ViewProfile.jspa?name=manifoldronin)** opened **[SPR-1147](https://jira.spring.io/browse/SPR-1147?redirect=false)** and commented  I have:  \ \ \SHA-1\ \ \  And got this log:  00:20:29,890 INFO  Pre-instantiating singletons in factory [org.springframework.beans.factory.support.DefaultListableBeanFactory defining beans [messageDigest]; root of BeanFactory hierarchy] 00:20:29,890 INFO  Creating shared instance of singleton bean 'messageDigest' 00:20:29,890 DEBUG Creating instance of bean 'messageDigest' with merged definition [Root bean with class [java.security.MessageDigest] defined in file [E:\java\factory-method\services-context.xml]] 00:20:29,890 DEBUG Invoking BeanPostProcessors before instantiation of bean 'messageDigest' 00:20:29,921 DEBUG Ignoring factory method [public static java.security.MessageDigest java.security.MessageDigest.getInstance(java.lang.String,java.lang.String) throws java.security.NoSuchAlgorithmException,java.security.NoSuchProviderException] of bean 'messageDigest': could not satisfy dependencies org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'messageDigest' defined in file [E:\java\factory-method\services-context.xml]: Unsatisfied dependency expressed through constructor argument with index 1 of type [java.lang.String]: Ambiguous constructor argument types - did you specify the correct bean references as generic constructor arguments? at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createArgumentArray(AbstractAutowireCapableBeanFactory.java:667) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:442) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:314) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:223) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:147) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:277) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:312) at org.springframework.context.support.FileSystemXmlApplicationContext.\(FileSystemXmlApplicationContext.java:82) at org.springframework.context.support.FileSystemXmlApplicationContext.\(FileSystemXmlApplicationContext.java:67) at org.springframework.context.support.FileSystemXmlApplicationContext.\(FileSystemXmlApplicationContext.java:58) at Main.main(Main.java:7) 00:20:29,937 DEBUG Ignoring factory method [public static java.security.MessageDigest java.security.MessageDigest.getInstance(java.lang.String,java.security.Provider) throws java.security.NoSuchAlgorithmException] of bean 'messageDigest': could not satisfy dependencies org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'messageDigest' defined in file [E:\java\factory-method\services-context.xml]: Unsatisfied dependency expressed through constructor argument with index 1 of type [java.security.Provider]: Ambiguous constructor argument types - did you specify the correct bean references as generic constructor arguments? at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createArgumentArray(AbstractAutowireCapableBeanFactory.java:667) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:442) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:314) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:223) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:147) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:277) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:312) at org.springframework.context.support.FileSystemXmlApplicationContext.\(FileSystemXmlApplicationContext.java:82) at org.springframework.context.support.FileSystemXmlApplicationContext.\(FileSystemXmlApplicationContext.java:67) at org.springframework.context.support.FileSystemXmlApplicationContext.\(FileSystemXmlApplicationContext.java:58) at Main.main(Main.java:7) 00:20:29,937 DEBUG Getting BeanInfo for class [java.security.MessageDigest$Delegate] 00:20:29,953 DEBUG Caching PropertyDescriptors for class [java.security.MessageDigest$Delegate] 00:20:29,953 DEBUG Found property 'algorithm' of type [java.lang.String] 00:20:29,953 DEBUG Found property 'class' of type [java.lang.Class] 00:20:29,953 DEBUG Found property 'digestLength' of type [int] 00:20:29,953 DEBUG Found property 'provider' of type [java.security.Provider] 00:20:29,953 DEBUG Class [java.security.MessageDigest$Delegate] is cache-safe 00:20:29,953 DEBUG Bean 'messageDigest' instantiated via factory method 'public static java.security.MessageDigest java.security.MessageDigest.getInstance(java.lang.String) throws java.security.NoSuchAlgorithmException' 00:20:29,953 DEBUG Invoking BeanPostProcessors before initialization of bean 'messageDigest' 00:20:29,953 DEBUG Invoking BeanPostProcessors after initialization of bean 'messageDigest'  While the correct factory method was indeed located and used, an exception was thrown and logged for each of the previous unmatching cases.  This also happens with 1.2.1.  I have a minimal application to reproduce this if you need it.  This might also explain #5781.  ---  **Affects:** 1.2.2","closed","in: core,","spring-projects-issues","2005-07-16T15:26:28Z","2019-01-12T16:40:59Z"
"","4921","Make attributesMap property of the AbstractView readable (and modifiable) [SPR-189]","**[Jim Rao](https://jira.spring.io/secure/ViewProfile.jspa?name=jimjxr)** opened **[SPR-189](https://jira.spring.io/browse/SPR-189?redirect=false)** and commented  I would like to set the static attributes of an AbstractView in the following way:           	/images/home.gif     	home     	/WEB-INF/jsp/pages/home.jsp       Currently this does not work since attributesMap is not readable. The staticAttributes property is readable, but it's not modifiable. Since the staticAttributes variable is private, there's not easy way to add this behavior in subclasses.   ---  **Affects:** 1.0.2","closed","type: enhancement,","spring-projects-issues","2004-06-27T11:35:47Z","2004-06-27T22:16:42Z"
"","5707","undocumented: how to register custom editor for property below nested property [SPR-996]","**[Jim Newsham](https://jira.spring.io/secure/ViewProfile.jspa?name=jimn)** opened **[SPR-996](https://jira.spring.io/browse/SPR-996?redirect=false)** and commented  The javadoc documentation (or other documentation that I'm aware of) does not describe how to register custom editor for properties nested below indexed properties.  For example, I wanted to register an editor for ""items[n].quantity"" (for all values n).  The javadoc on DataBinder and BeanWrapper don't describe how this is done -- it only describes the case where the collection is the leaf property in the path.  So I tried ""quantity"", ""items[*].quantity"", ""items.*.quantity"", ""items[].quantity"", before finally consulting the source and discovering that ""items.quantity"" would work.  This should be documented; consider including an example for clarity.   ---  **Affects:** 1.2 final","closed","type: enhancement,","spring-projects-issues","2005-05-31T09:08:28Z","2012-06-19T03:53:59Z"
"","5772","param->attribute servlet filter broken for some config settings [SPR-1065]","**[Jim Newsham](https://jira.spring.io/secure/ViewProfile.jspa?name=jimn)** opened **[SPR-1065](https://jira.spring.io/browse/SPR-1065?redirect=false)** and commented  This is reported against SWF Preview 3, for class RequestParamNameToRequestAttributeFilter.  The filter searches for a name prefix from the beginning of the string.  It then searches for a value prefix from the beginning of the string (instead of the end of the prefix, as it should).  This can cause a problem if the value prefix is also contained within the name prefix (a trivial case of this is when you wish the value prefix to be empty -- """").  Here is the trivial fix.  Change:  int pvaluePrefixIndex = nameIn.indexOf(inputValuePrefix);  to:  int pvaluePrefixIndex = nameIn.indexOf(inputValuePrefix, inputNamePrefix.length());   ---  **Affects:** 2.0 M1","closed","type: bug,","spring-projects-issues","2005-06-21T07:28:27Z","2005-07-19T10:33:52Z"
"","5629","Enhance .validator.Errors interface with support for named global errors [SPR-904]","**[Jim Hazen](https://jira.spring.io/secure/ViewProfile.jspa?name=jhazen)** opened **[SPR-904](https://jira.spring.io/browse/SPR-904?redirect=false)** and commented  Add rejectGlobal(**) methods to org.springframework.validation.Errors, similar to rejectValue(**) only with global scope.  Enhance  support.  ---  The org.springframework.validation.Errors allows for the binding of field level errors and the setting of global errors.  The global errors however are unnamed and only available via the:  List getGlobalErrors()  interface.  This makes it a bit of a pain to work with global errors in the view layer.  Taking special action on a particular global means using complicated JSP logic to find the global in the list.  I would propose a _global_ namespace for global errors.  Thus:   \\\   could be used within a JSP.  Sure these things aren't technically ""validation"" errors, but the bind tag is such a convenient mechanism for communicating these types of the errors to the View, and limited global support is already there.  ---  **Affects:** 1.2 RC2","closed","type: enhancement,","spring-projects-issues","2005-04-24T20:28:35Z","2019-01-13T22:51:52Z"
"","5613","Enhance WebContentGenerator.setCacheSeconds to support FireFox no-store [SPR-886]","**[Jim Hazen](https://jira.spring.io/secure/ViewProfile.jspa?name=jhazen)** opened **[SPR-886](https://jira.spring.io/browse/SPR-886?redirect=false)** and commented  In addition to the current cache controls.  Please include: response.addHeader(""Cache-Control"", ""no-store"");  no-store prevents later FireFox versions from caching (I've verified this).  Firefox seems to ignore all other cache controls.   ---  **Affects:** 1.2 RC1, 1.2 RC2","closed","type: bug,","spring-projects-issues","2005-04-18T18:28:57Z","2005-04-18T19:12:17Z"
"","5396","Change Logging Level In SqlCall [SPR-668]","**[Jim Curry](https://jira.spring.io/secure/ViewProfile.jspa?name=jcurry)** opened **[SPR-668](https://jira.spring.io/browse/SPR-668?redirect=false)** and commented  Change the INFO message ""logger.info(""Compiled stored procedure. Call string is ["" + getCallString() + ""]"");"" in SqlCall to a debug message? This is currently kind of annoying in that when you extend a class from StoredProcedure this message gets reported under your applications messaging hierarchy instead of Spring's, making it pretty hard to suppress if you want to log info messages out of your application.   --- No further details from [SPR-668](https://jira.spring.io/browse/SPR-668?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-01-31T00:09:37Z","2005-01-31T01:01:30Z"
"","5529","Backward compatibility broken in Spring 1.1.5 regarding default MessageSource in ApplicationContext [SPR-802]","**[Jerome Lacoste](https://jira.spring.io/secure/ViewProfile.jspa?name=lacostej)** opened **[SPR-802](https://jira.spring.io/browse/SPR-802?redirect=false)** and commented  A change between Spring 1.1.4 and 1.1.5 broke backward compatibility in the handling of MessageSource.  I am not specifying a default message source in my application context and was using the inbuilt StaticMessageSource instead.  In the following change:  http://cvs.sourceforge.net/viewcvs.py/springframework/spring/src/org/springframework/context/support/AbstractApplicationContext.java?r1=1.58&r2=1.61  it was removed. This broke my application.  I think this can be fixed by using:  getInternalParentMessageSource(getInternalParentMessageSource() == null ? new StaticMessageSource() : getInternalParentMessageSource());  instead of  dms.setParentMessageSource(getInternalParentMessageSource());  As a workaround one can define a messageSource bean in the application context.  Details of the issue can be found here: http://forum.springframework.org/viewtopic.php?t=4221   ---  **Affects:** 1.1.5","closed","in: core,","spring-projects-issues","2005-03-21T03:42:44Z","2005-03-21T04:09:29Z"
"","5525","BindException.getFieldValue(String) uses PropertyEditor.getAsText() instead of getValue() [SPR-798]","**[Jerome Lacoste](https://jira.spring.io/secure/ViewProfile.jspa?name=lacostej)** opened **[SPR-798](https://jira.spring.io/browse/SPR-798?redirect=false)** and commented  In one of my beans, I return a Set of Longs. I use this set to populate a multiple select box on a Web.  I registered an Editor to the field. When doing status.value I expected to get a Set, but I am getting a String. BindStatus reuses the following code from BindException:      public Object getFieldValue(String field) {             FieldError fe = getFieldError(field);             String fixedField = fixedField(field);             // use rejected value in case of error, current bean property value else             Object value = (fe != null) ? fe.getRejectedValue() : getBeanWrapper().getPropertyValue(fixedField);             // apply custom editor, but not on binding failures like type mismatches             if (fe == null || !fe.isBindingFailure()) {                     PropertyEditor customEditor = getCustomEditor(fixedField);                     if (customEditor != null) {                             customEditor.setValue(value);                             return customEditor.getAsText();                     }             }             return value;     }   Here one can see that the customEditor is used but the method getAsText() is used, not the getValue().  I don't understand this choice. It breaks symetry between displaying and submitting my form.  Someone else reported the same issue on the devel list back in September 2004. http://news.gmane.org/find-root.php?message_id=%3c41378671.1090307%40pcedev.com%3e  Workaround is to respecify my field using its path. Ugly.  Not sure how to fix that. Fixing it would break existing code. Introducing an interface like proposed in the mail in -devel would makes things complex for what is supposed to be normal case to me.   ---  **Affects:** 1.1.5","closed","in: core,","spring-projects-issues","2005-03-21T00:33:57Z","2019-01-13T22:52:20Z"
"","5234","BeanCurrentlyInCreationException possibly due to TransactionProxyFactoryBean [SPR-505]","**[Jeppe Cramon](https://jira.spring.io/secure/ViewProfile.jspa?name=ski_bum)** opened **[SPR-505](https://jira.spring.io/browse/SPR-505?redirect=false)** and commented  I've created a fairly simple test setup which can replication the problem we're experiencing in our system.  We have a facade (called TestFacade here) which is made transactional using the TransactionProxyFactoryBean. The facade has a setter property to the CompanyDao. The CompanyDao finally has a constructor which takes a Hibernate SessionFactory as argument (autowire=constructor).  Configuration file:  \ \ \ 	\ 		\\com.mysql.jdbc.Driver\\ 		\\jdbc:mysql://localhost/ModelTestDB\\ 		\\root\\ 		\\root\\ 	\           	                                   	     		     	                    	     		     	     	     		     	     	     		     			PROPAGATION_REQUIRED     		     	                    	     		     		     	     	     		     			net.sf.hibernate.dialect.MySQLDialect     		     	     	     		     	       \  When the configuration only contains the Dao, everything works nicely (with the dao). When the facade and the TransactionProxyFactoryBean gets added to the mix we get the following exception:  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'testFacade' defined in class path resource [org/test/application-context.xml]: Can't resolve reference to bean 'testFacadeTarget' while setting property 'target'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'testFacadeTarget' defined in class path resource [org/test/application-context.xml]: Can't resolve reference to bean 'companyDao' while setting property 'companyDao'; nested exception is org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name 'companyDao': Requested bean is already currently in creation org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'testFacadeTarget' defined in class path resource [org/test/application-context.xml]: Can't resolve reference to bean 'companyDao' while setting property 'companyDao'; nested exception is org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name 'companyDao': Requested bean is already currently in creation org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name 'companyDao': Requested bean is already currently in creation at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:163) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.resolveReference(AbstractAutowireCapableBeanFactory.java:898) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.resolveValueIfNecessary(AbstractAutowireCapableBeanFactory.java:832) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:773) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:601) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:258) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:193) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:240) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:163) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.resolveReference(AbstractAutowireCapableBeanFactory.java:898) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.resolveValueIfNecessary(AbstractAutowireCapableBeanFactory.java:832) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:773) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:601) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:258) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:193) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:240) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:163) at org.springframework.beans.factory.support.AbstractBeanFactory.getType(AbstractBeanFactory.java:345) at org.springframework.beans.factory.support.DefaultListableBeanFactory.isBeanTypeMatch(DefaultListableBeanFactory.java:193) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:157) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:144) at org.springframework.beans.factory.BeanFactoryUtils.beansOfTypeIncludingAncestors(BeanFactoryUtils.java:160) at org.springframework.beans.factory.support.DefaultListableBeanFactory.findMatchingBeans(DefaultListableBeanFactory.java:313) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createArgumentArray(AbstractAutowireCapableBeanFactory.java:547) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:433) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:238) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:193) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:240) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:163) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:236) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:304) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:80) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:65) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:56) at org.test.TestFacadeTest.testCreateNewCompany(TestFacadeTest.java:13) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) at java.lang.reflect.Method.invoke(Unknown Source) at junit.framework.TestCase.runTest(TestCase.java:154) at junit.framework.TestCase.runBare(TestCase.java:127) at junit.framework.TestResult$1.protect(TestResult.java:106) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.framework.TestResult.run(TestResult.java:109) at junit.framework.TestCase.run(TestCase.java:118) at junit.framework.TestSuite.runTest(TestSuite.java:208) at junit.framework.TestSuite.run(TestSuite.java:203) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:421) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:305) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:186)    ---  **Affects:** 1.1.1, 1.1.2  **Attachments:** - [TestProject.zip](https://jira.spring.io/secure/attachment/10333/TestProject.zip) (_4.98 kB_)","closed","in: core,","spring-projects-issues","2004-12-01T03:51:48Z","2019-01-11T12:42:19Z"
"","5070","Improve BeanFactory(s) to allow easy validation of configuration files without needing instantiation [SPR-340]","**[Jeppe Cramon](https://jira.spring.io/secure/ViewProfile.jspa?name=ski_bum)** opened **[SPR-340](https://jira.spring.io/browse/SPR-340?redirect=false)** and commented  It would be nice during development to be able to validate your Spring configuration files (application context files, etc.) without having to fire up an environment and actually instantiate beans. We would e.g. need to extend AbstractAutowireCapableBeanFactory with more strategies for the various parts of autowiring, bean creation and instantiation. Some work has already been done, but it's not adequate for true reuse of the autowiring and dependency checking code in other components.  If we do this it will allow us to for instance create an Ant task that as a part of our build script, can validate our configuration files. We could also allow the eclipse plugin to perform true validation and not just validation of what's been explicitly specified in the files. Taking to the extreme the dependency check and lookup code could also be reused for for instance autocompletion in the Eclipse plugin (if we created an editor for SPring config files). It's of course a question of how much we can allow to be split out without suffering runtime performance.  /Jeppe   ---  2 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2004-09-20T21:28:32Z","2012-06-19T09:37:36Z"
"","4948","Get singleton object even with singleton=""false"" [SPR-217]","**[Jens Alm](https://jira.spring.io/secure/ViewProfile.jspa?name=jens)** opened **[SPR-217](https://jira.spring.io/browse/SPR-217?redirect=false)** and commented  I am using Spring to configure my actions for WebWork 2 using xwork-optional. When the action is called the first time it works fine but when it is called the second time it gets the same instance with some fields already populated, and since webwork assumes that all actions are new it has no method to clear/reset the action like Struts does. Below is an excerpt of my action configuration:  \ \ \ \transactionInterceptor,hockeySearchActionTarget\ \ \  In xwork.xml I have the following (excerpt):  \ \/jsp/search.jsp\ \jsp/search_error.jsp\ \/jsp/search_result.jsp\ \   ---  **Affects:** 1.0.2","closed","in: core,","spring-projects-issues","2004-07-14T04:01:36Z","2019-01-11T13:29:25Z"
"","5072","MethodInvokingJobDetailFactoryBean breaks [SPR-342]","**[Jelmer Kuperus](https://jira.spring.io/secure/ViewProfile.jspa?name=jelmer)** opened **[SPR-342](https://jira.spring.io/browse/SPR-342?redirect=false)** and commented  I have a facade object with several transaction annotations  When I add an MethodInvokingJobDetailFactoryBean to the context like this:  \ 	\\\ 	\\myMethod\\ \ It no longer aplies the transaction interceptor   ---  **Affects:** 1.1.1  **Attachments:** - [minimal.zip](https://jira.spring.io/secure/attachment/10228/minimal.zip) (_4.02 MB_) - [minmal.tar.gz](https://jira.spring.io/secure/attachment/10230/minmal.tar.gz) (_4.49 MB_)","closed","","spring-projects-issues","2004-09-22T12:43:54Z","2019-01-11T14:03:12Z"
"","5694","Spring RMI does not support passing of remote objects as parameters [SPR-982]","**[Jeff Moszuti](https://jira.spring.io/secure/ViewProfile.jspa?name=moszutij)** opened **[SPR-982](https://jira.spring.io/browse/SPR-982?redirect=false)** and commented  In order to pass a remote object as a parameter to a remote method, RmiProxyFactoryBean (or more precisely RemoteAccessor perhaps) needs to be made serializable. The scenerio where a remote object is required to be passed in a parameter to a remote method is discussed in http://forum.springframework.org/viewtopic.php?t=5290   ---  **Affects:** 1.2 RC2  **Attachments:** - [test-spr-rmi.tgz](https://jira.spring.io/secure/attachment/20561/test-spr-rmi.tgz) (_2.82 kB_)  8 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2005-05-25T09:10:29Z","2015-09-22T18:55:03Z"
"","5536","Jasper Reports, update to allow DataSource to be supplied, for reports containing their own SQL Query. [SPR-809]","**[Jeff Crowder](https://jira.spring.io/secure/ViewProfile.jspa?name=jcrowder)** opened **[SPR-809](https://jira.spring.io/browse/SPR-809?redirect=false)** and commented  When using the JasperAssistant eclipse plugin, is is very simple to create a jrxml, in-place that contains embedded SQL  For this to work at runtime, the overloaded method ""fillReport"" in JasperFillManager can be used to fill a report from a java.sql.Connection.  This patch is a quick hack to allow a javax.sql.DataSource to be injected into the AbstractJasperReportsView (and derivations, thereof).  If supplied, an alternate path is used to in renderMergedOutput, that fills the report using a java.sql.Connection that is provided by the dependent javax.sql.DataSource.    ---  **Attachments:** - [jasper-reports-connection-patch.txt](https://jira.spring.io/secure/attachment/10618/jasper-reports-connection-patch.txt) (_8.31 kB_)","closed","type: enhancement,","spring-projects-issues","2005-03-22T07:28:51Z","2005-04-04T00:11:42Z"
"","5842","Equals and HashCode for org.springframework.core.io.InputStreamResource [SPR-1139]","**[Jeelani Shaik](https://jira.spring.io/secure/ViewProfile.jspa?name=sjeelani)** opened **[SPR-1139](https://jira.spring.io/browse/SPR-1139?redirect=false)** and commented  InputStream is1 = getStream(""source1""); InputStream is2 = getStream(""source2"");  InputStreamResource source1 = new InputStreamResource(is1); InputStreamResource source2 = new InputStreamResource(is2);  source1.equals(source2) results in true since the equals && hashcode method(s) compare the description. This is because of inheriting the implemenation of super class AbstractResource.  And the description is hardcoded to ""resource loaded through InputStream"" in the constructor for InputStreamResource:  public InputStreamResource(InputStream inputStream) { this(inputStream, ""resource loaded through InputStream""); }  Is this the desired behaviour?  Thanks, Jeelani   ---  **Affects:** 1.2.2","closed","in: core,","spring-projects-issues","2005-07-14T04:48:19Z","2005-07-19T07:04:53Z"
"","5745","The documentation and the method implemenation for org.springframework.core.Constants are not compatible [SPR-1038]","**[Jeelani Shaik](https://jira.spring.io/secure/ViewProfile.jspa?name=sjeelani)** opened **[SPR-1038](https://jira.spring.io/browse/SPR-1038?redirect=false)*** and commented  In the class ""org.springframework.core.Constants"", the method ropertyToConstantNamePrefix(String propertyName) is not insync with its Java Documentation.  The Java Doc says that  ""Uses a common naming idiom: turning all lower case characters to upper case, and prepending upper case characters with an underscore. *  \Example: ""imageSize"" -> ""IMAGE_SIZE"".""  Where as the when I execute the method with the following values, the output is as shown below:  Input parameter     Return Value test                TEST Test                _TEST tEst                T_EST TEST                _T_E_S_T  Thanks, Jeelani   ---  **Affects:** 1.2.1","closed","type: enhancement,","spring-projects-issues","2005-06-13T03:01:50Z","2005-07-21T05:37:23Z"
"","5744","Java Doc comments for NestedCheckedException [SPR-1036]","**[Jeelani Shaik](https://jira.spring.io/secure/ViewProfile.jspa?name=sjeelani)** opened **[SPR-1036](https://jira.spring.io/browse/SPR-1036?redirect=false)** and commented  The java documentation for the class org.springframework.core.NestedCheckedException reads  ""The similarity between this class and the NestedCheckedException class is unavoidable"".  This should be  ""The similarity between this class and the NestedRuntimeException class is unavoidable"".  I think this might be a result of cut-and-paste of comments for classes NestedRuntimeException and NestedCheckedException.  Thanks, Jeelani   ---  **Affects:** 1.2 final","closed","type: enhancement,","spring-projects-issues","2005-06-13T01:50:44Z","2005-06-13T03:32:50Z"
"","4937","SessionFactoryUtils doesn't handle EJB CMT RequiresNew correctly [SPR-206]","**[Jean-Baptiste Nizet](https://jira.spring.io/secure/ViewProfile.jspa?name=jnizet)** opened **[SPR-206](https://jira.spring.io/browse/SPR-206?redirect=false)** and commented  I'm trying to just use the SessionFactoryUtils class in order to have a single session instance per transaction. Note that SessionFactoryUtils is the only thing I use from Spring, so I've perhaps missed something important. Everything works well until I use several transactions: SessionFactoryUtils returns a hibernate session; it returns the same session if a second call to getSession is made, and it flushes and closes the session at the end of the transaction. However, it doesn't work as I would expect if several transactions are used.  Consider this scenario:  FirstSessionBean has a method foo() marked as ""Requires"" SecondSessionBean has a method bar() marked as ""RequiresNew"" The foo method gets a session from SessionFactoryUtils The foo method then calls bar() The bar method gets a session from SessionFactoryUtils  In this case, the session returned by SessionFactoryUtils in bar() is the same as the one returned in foo(). The session is flushed and closed only at the end of the foo transaction. So everything works as if bar was marked as ""Requires"" rather than ""RequiresNew"". This seems incorrect to me. Indeed, suppose I'm doing some updates in the database in bar(), using the hibernate session. At the end of the bar transaction, these changes should be committed. Then, if the foo transaction rolls back, the changes made in bar should still be visible in the database, since bar has its own transaction. In other words, a different session should be created and synchronied with the JTA transaction for each JTA transaction, and not for each thread as it's the case now.  Am I missing something?   ---  **Affects:** 1.0.2","closed","type: bug,","spring-projects-issues","2004-07-06T19:35:27Z","2004-07-08T08:36:28Z"
"","5356","[sandbox] Spring-JMX:  [SPR-628]","**[Jean Carriere](https://jira.spring.io/secure/ViewProfile.jspa?name=jcarriere)** opened **[SPR-628](https://jira.spring.io/browse/SPR-628?redirect=false)** and commented  I've tried to use the jmx package, the MetadataModelMBeanInfoAssembler, which is in the sandbox, with jboss.  My spring context is the following: \ \   \ >  >> \ >> \ >> \ >> \ >> \ >> \ >  > \ class=""org.springframework.jmx.assemblers.metadata.MetadataModelMBeanInfoAssembler""> > \ > \ > \ > \ >  > \ class=""org.springframework.jmx.naming.MetadataNamingStrategy""> > \ > \ > \ > \ >  > \ class=""org.springframework.jmx.metadata.support.commons.CommonsAttributesJmxAttributeSource""/> >  > My bean is > * > * @`@org`.springframework.jmx.metadata.support.ManagedResource(...) >   */ >   public class EHCacheMonitoring implements EHCacheMonitoringMBean >   { >  > /** > * @`@org`.springframework.jmx.metadata.support.ManagedOperation(...) >   */ >   public String showCachesInfo() throws CacheException >   { >   ..... >   } >  > } >  > The exception is > 10:01:59,859 ERROR [ContextLoader] Context initialization failed > org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'jmxAdapter' defined in ServletContext resource [/WEB-INF/classes/serviceContext.xml]: Initialization of bean failed; nested exception is org.springframework.jmx.exceptions.MBeanAssemblyException: A JMX error occured when trying to assemble the management interface metadata.; nested exception is javax.management.MBeanRegistrationException: preRegister() failed [ObjectName='spring:bean=EHCacheMonitoring', Class=javax.management.modelmbean.RequiredModelMBean (javax.management.modelmbean.RequiredModelMBean@f1b95f)] > org.springframework.jmx.exceptions.MBeanAssemblyException: A JMX error occured when trying to assemble the management interface metadata.; nested exception is javax.management.MBeanRegistrationException: preRegister() failed [ObjectName='spring:bean=EHCacheMonitoring', Class=javax.management.modelmbean.RequiredModelMBean (javax.management.modelmbean.RequiredModelMBean@f1b95f)] > MBeanException: preRegister() failed [ObjectName='spring:bean=EHCacheMonitoring', Class=javax.management.modelmbean.RequiredModelMBean (javax.management.modelmbean.RequiredModelMBean@f1b95f)] > Cause: java.lang.ClassCastException > at org.jboss.mx.server.registry.BasicMBeanRegistry.registerMBean(BasicMBeanRegistry.java:160) > at sun.reflect.GeneratedMethodAccessor1.invoke(Unknown Source) > at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) > at java.lang.reflect.Method.invoke(Method.java:324) > at org.jboss.mx.capability.ReflectedMBeanDispatcher.invoke(ReflectedMBeanDispatcher.java:284) > at org.jboss.mx.interceptor.ObjectReferenceInterceptor.invoke(ObjectReferenceInterceptor.java:59) > at org.jboss.mx.interceptor.MBeanAttributeInterceptor.invoke(MBeanAttributeInterceptor.java:43) > at org.jboss.mx.interceptor.PersistenceInterceptor2.invoke(PersistenceInterceptor2.java:93) > at org.jboss.mx.server.MBeanInvoker.invoke(MBeanInvoker.java:76) > at javax.management.modelmbean.RequiredModelMBean.invoke(RequiredModelMBean.java:144) > at org.jboss.mx.server.MBeanServerImpl.invoke(MBeanServerImpl.java:546) > at org.jboss.mx.server.MBeanServerImpl.registerMBean(MBeanServerImpl.java:997) > at org.jboss.mx.server.MBeanServerImpl.registerMBean(MBeanServerImpl.java:327) > at org.springframework.jmx.JmxMBeanAdapter.registerSimpleBean(JmxMBeanAdapter.java:295) > at org.springframework.jmx.JmxMBeanAdapter.registerBean(JmxMBeanAdapter.java:272) > at org.springframework.jmx.JmxMBeanAdapter.registerBeans(JmxMBeanAdapter.java:218) > at org.springframework.jmx.JmxMBeanAdapter.afterPropertiesSet(JmxMBeanAdapter.java:117) > at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1037) > at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:305) > at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:223) > at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:236) > at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:159) > at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:261) > at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:317) > at org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.refresh(AbstractRefreshableWebApplicationContext.java:131) > at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:177) > at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:105) > at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:4 > at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:3270) > at org.apache.catalina.core.StandardContext.start(StandardContext.java:3599) > at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:821) > at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:807) > at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:579) > at org.jboss.web.tomcat.tc4.EmbeddedTomcatService.createWebContext(EmbeddedTomcatService.java:530) > at org.jboss.web.tomcat.tc4.EmbeddedTomcatService.performDeploy(EmbeddedTomcatService.java:309) > at org.jboss.web.AbstractWebContainer.start(AbstractWebContainer.java:428) > at org.jboss.deployment.MainDeployer.start(MainDeployer.java:832) > at org.jboss.deployment.MainDeployer.deploy(MainDeployer.java:642) > at org.jboss.deployment.MainDeployer.deploy(MainDeployer.java:605) > at sun.reflect.GeneratedMethodAccessor22.invoke(Unknown Source) > at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) > at java.lang.reflect.Method.invoke(Method.java:324) > at org.jboss.mx.capability.ReflectedMBeanDispatcher.invoke(ReflectedMBeanDispatcher.java:284) > at org.jboss.mx.server.MBeanServerImpl.invoke(MBeanServerImpl.java:546) > at org.jboss.jmx.adaptor.control.Server.invokeOpByName(Server.java:229) > at org.jboss.jmx.adaptor.html.HtmlAdaptorServlet.invokeOpByName(HtmlAdaptorServlet.java:266) > at org.jboss.jmx.adaptor.html.HtmlAdaptorServlet.processRequest(HtmlAdaptorServlet.java:81) > at org.jboss.jmx.adaptor.html.HtmlAdaptorServlet.doGet(HtmlAdaptorServlet.java:56) > at javax.servlet.http.HttpServlet.service(HttpServlet.java:740) > at javax.servlet.http.HttpServlet.service(HttpServlet.java:853) > at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:247) > at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:193) > at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:256) > at org.apache.catalina.core.StandardPipeline$StandardPipelineValveContext.invokeNext(StandardPipeline.java:643) > at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:480) > at org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:995) > at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191) > at org.apache.catalina.core.StandardPipeline$StandardPipelineValveContext.invokeNext(StandardPipeline.java:643) > at org.jboss.web.tomcat.security.JBossSecurityMgrRealm.invoke(JBossSecurityMgrRealm.java:220) > at org.apache.catalina.core.StandardPipeline$StandardPipelineValveContext.invokeNext(StandardPipeline.java:641) > at org.apache.catalina.valves.CertificatesValve.invoke(CertificatesValve.java:246) > at org.apache.catalina.core.StandardPipeline$StandardPipelineValveContext.invokeNext(StandardPipeline.java:641) > at org.jboss.web.tomcat.tc4.statistics.ContainerStatsValve.invoke(ContainerStatsValve.java:76) > at org.apache.catalina.core.StandardPipeline$StandardPipelineValveContext.invokeNext(StandardPipeline.java:641) > at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:480) > at org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:995) > at org.apache.catalina.core.StandardContext.invoke(StandardContext.java:2416) > at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:180) > at org.apache.catalina.core.StandardPipeline$StandardPipelineValveContext.invokeNext(StandardPipeline.java:643) > at org.apache.catalina.valves.ErrorDispatcherValve.invoke(ErrorDispatcherValve.java:171) > at org.apache.catalina.core.StandardPipeline$StandardPipelineValveContext.invokeNext(StandardPipeline.java:641) > at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:172) > at org.apache.catalina.core.StandardPipeline$StandardPipelineValveContext.invokeNext(StandardPipeline.java:641) > at org.jboss.web.tomcat.security.SecurityAssociationValve.invoke(SecurityAssociationValve.java:65) > at org.apache.catalina.core.StandardPipeline$StandardPipelineValveContext.invokeNext(StandardPipeline.java:641) > at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:577) > at org.apache.catalina.core.StandardPipeline$StandardPipelineValveContext.invokeNext(StandardPipeline.java:641) > at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:480) > at org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:995) > at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:174) > at org.apache.catalina.core.StandardPipeline$StandardPipelineValveContext.invokeNext(StandardPipeline.java:643) > at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:480) > at org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:995) > at org.apache.coyote.tomcat4.CoyoteAdapter.service(CoyoteAdapter.java:223) > at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:601) > at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.processConnection(Http11Protocol.java:392) > at org.apache.tomcat.util.net.TcpWorkerThread.runIt(PoolTcpEndpoint.java:565) > at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:619) > at java.lang.Thread.run(Thread.java:534) >  > nb: I've checked out the sandbox on 2005/12/01  ---  **Affects:** 1.2 RC1","closed","in: core,","spring-projects-issues","2005-01-17T03:57:29Z","2019-01-13T08:58:41Z"
"","5457","Allow Non-Bean Dependency Injection [SPR-729]","**[Jave Virual](https://jira.spring.io/secure/ViewProfile.jspa?name=vjave)** opened **[SPR-729](https://jira.spring.io/browse/SPR-729?redirect=false)** and commented  Spring cannot provide dependency injection to classes with non-bean APIs.  The simplest example is a class with this interface  public interface User { String getFirstName(); String getLastName(); void setNames(String firstName, String lastName); }  If this interface had broken up the setter into two methods, Spring would work fine with this, but Spring shouldn't place a limitation on the types of ""beans"" that we want to inject and wire.  A more complex example is dependency injections into a ""typed collection"" api that has a very complicated way of ""setting the list"".  public interface AttributeList { void addAttribute(Attribute a, boolean isSignificant); Attribute getAttribute(int index); int getAttributesCount(); boolean isAttributeSignificant(int index); }  This would be trivial if the api had a method ""setListOfAttribute(List)"" but again, this is a limitation imposed by Spring, and if we want to work with existing APIs (which we can't rewrite in order to get Spring to work with them), then we're out of luck, or have to write ""workaround"" code.   --- No further details from [SPR-729](https://jira.spring.io/browse/SPR-729?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-02-21T02:07:55Z","2012-06-19T09:37:22Z"
"","5672","Wrong method matched with null parameter (despite explict type) [SPR-958]","**[Jasper Rosenberg](https://jira.spring.io/secure/ViewProfile.jspa?name=perfnorm)** opened **[SPR-958](https://jira.spring.io/browse/SPR-958?redirect=false)** and commented  1.2 final appears to have broken matching the correct constructor signature for factory methods with a null argument.  Class org.jboss.mx.util.MBeanProxy has two methods that differ only by their last argument: public static Object get(Class intrface, ObjectName name, String agentID) throws MBeanProxyCreationException; public static Object get(Class intrface, ObjectName name, MBeanServer server)  throws MBeanProxyCreationException;  In 1.2RC2 and before, the following bean definition would correctly invoke the method taking an agentID.  In 1.2 final, it is instead invoking the method that expects a MBean Server.  It looks like it now is ignoring the explict type on the final constructor-arg.                            com.myco.myapp.services.jmx.MyAppConfigMBean                                                myco.myapp:service=MyAppConfig                                       ---  **Affects:** 1.2 final","closed","in: core,","spring-projects-issues","2005-05-17T00:51:40Z","2005-06-01T07:42:37Z"
"","5833","Property expansion broken by 1.2.2 [SPR-1129]","**[Jasper Rosenberg](https://jira.spring.io/secure/ViewProfile.jspa?name=perfnorm)** opened **[SPR-1129](https://jira.spring.io/browse/SPR-1129?redirect=false)** and commented  The problem is that if you have a bean A that has a constructor argument that expects to be expanded by a PropertyPlaceholderConfigurer, but use A as a factory bean to create bean B, A appears to be constructed before the PropertyPlaceholderConfigurer ever gets a chance to expand A's constructor parameters.  The attached simple unit test demonstrates the problem.  It works against 1.2.1 but not 1.2.2  ---  **Affects:** 1.2.2  **Attachments:** - [spring-ut.zip](https://jira.spring.io/secure/attachment/10931/spring-ut.zip) (_1.24 kB_)  **Issue Links:** - #5820 AbstractBeanFactory.getType change dramatically alters bean instantiation order (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2005-07-13T03:29:10Z","2019-01-12T16:52:24Z"
"","5758","init-method/destroy-method not consistently invoked [SPR-1051]","**[Jasper Rosenberg](https://jira.spring.io/secure/ViewProfile.jspa?name=perfnorm)** opened **[SPR-1051](https://jira.spring.io/browse/SPR-1051?redirect=false)** and commented  This example uses oscache, but presumably it is not oscache related.  The problem is that clear() never gets called on the osCachePersistenceListener bean despite being declared as both a destroy-method and init-method.  It gets even stranger though.  When I uncomment the osCachePersistenceListenerClear bean declaration which explicitly invokes clear() on the osCachePersistenceListener, clear() actually gets called three times, at init time, by the explicit invocation, and finally when the bean is destroyed (in that order).  That is, all of a sudden, the destroy-method and init-method on osCachePersistenceListener are obeyed.  Here is the example applicationContext.xml:                                                                     true                 1                 true                 com.opensymphony.oscache.plugins.diskpersistence.HashDiskPersistenceListener                 $sys{java.io.tmpdir}/oscache                 true                                                      \   ---  **Affects:** 1.2.1  **Attachments:** - [applicationContext-test.xml](https://jira.spring.io/secure/attachment/10891/applicationContext-test.xml) (_421 bytes_) - [InitTest.java](https://jira.spring.io/secure/attachment/10892/InitTest.java) (_849 bytes_)","closed","in: core,","spring-projects-issues","2005-06-17T00:53:16Z","2019-01-13T22:51:25Z"
"","5701","Documentation version reference for AspectJ [SPR-990]","**[Jason Poley](https://jira.spring.io/secure/ViewProfile.jspa?name=jpoley)** opened **[SPR-990](https://jira.spring.io/browse/SPR-990?redirect=false)** and commented  the language on this page http://static.springframework.org/spring/docs/1.2/reference/ch06.html speaks as if spring 1.2 wasn't released and just needs to reflect what is in 1.2 now (and what isn't).    --- No further details from [SPR-990](https://jira.spring.io/browse/SPR-990?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-05-27T06:36:22Z","2005-06-01T00:59:17Z"
"","5624","documentation  [SPR-897]","**[Jason Poley](https://jira.spring.io/secure/ViewProfile.jspa?name=jpoley)** opened **[SPR-897](https://jira.spring.io/browse/SPR-897?redirect=false)** and commented  pg 86 of docs says  ""Source-level metadata was introduced to the mainstream with the release of Microsoft's .NET platform, which uses source-level attributes to control transactions, pooling and other behaviour.""  this is very misleading because xdoclet had introduced it prior to .nets release, not saying .net didn't help popularize it... but they didn't pioneer this idea.    --- No further details from [SPR-897](https://jira.spring.io/browse/SPR-897?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-04-20T21:24:53Z","2005-05-04T05:16:09Z"
"","4955","Dynamic AOP [SPR-224]","**[Jason Poley](https://jira.spring.io/secure/ViewProfile.jspa?name=jpoley)** opened **[SPR-224](https://jira.spring.io/browse/SPR-224?redirect=false)** and commented  add support for dynamic AOP.  The ability to have run time based AOP within spring AOP. Two points of comparison are JBoss AOP and Aspectwerkz.   ---  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2004-07-16T18:11:16Z","2004-07-22T22:30:36Z"
"","5339","JRun 4 java.lang.NullPointerException [SPR-611]","**[Janani](https://jira.spring.io/secure/ViewProfile.jspa?name=janani)** opened **[SPR-611](https://jira.spring.io/browse/SPR-611?redirect=false)** and commented  Get this from Jrun4 console when using Spring 1.1.3  java.lang.NullPointerException at jrun.servlet.http.WebEndpoint.getRemoteAddr(WebEndpoint.java:244) at javax.servlet.ServletRequestWrapper.getRemoteAddr(ServletRequestWrapper.java:305) at javax.servlet.ServletRequestWrapper.getRemoteAddr(ServletRequestWrapper.java:305) at org.springframework.web.servlet.FrameworkServlet.serviceWrapper(FrameworkServlet.java:371) at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:318) at javax.servlet.http.HttpServlet.service(HttpServlet.java:740) at javax.servlet.http.HttpServlet.service(HttpServlet.java:853) at jrun.servlet.FilterChain.doFilter(FilterChain.java:86) at com.spring.Filter.MessagesFilter.doFilter(MessagesFilter.java:35) at jrun.servlet.FilterChain.doFilter(FilterChain.java:94) at jrun.servlet.FilterChain.service(FilterChain.java:101) at jrun.servlet.ServletInvoker.invoke(ServletInvoker.java:106) at jrun.servlet.JRunInvokerChain.invokeNext(JRunInvokerChain.java:42) at jrun.servlet.JRunRequestDispatcher.invoke(JRunRequestDispatcher.java:241) at jrun.servlet.ServletEngineService.dispatch(ServletEngineService.java:527) at jrun.servlet.http.WebService.invokeRunnable(WebService.java:172) at jrunx.scheduler.ThreadPool$DownstreamMetrics.invokeRunnable(ThreadPool.java:348) at jrunx.scheduler.ThreadPool$ThreadThrottle.invokeRunnable(ThreadPool.java:451) at jrunx.scheduler.ThreadPool$UpstreamMetrics.invokeRunnable(ThreadPool.java:294) at jrunx.scheduler.WorkerThread.run(WorkerThread.java:66)   ---  **Affects:** 1.1.3","closed","type: bug,","spring-projects-issues","2005-01-11T05:42:39Z","2005-01-15T06:51:45Z"
"","5818","FileSystemXmlApplicationContext don't close jar file with definition [SPR-1114]","**[Jan Topinski](https://jira.spring.io/secure/ViewProfile.jspa?name=simcha)** opened **[SPR-1114](https://jira.spring.io/browse/SPR-1114?redirect=false)** and commented  FileSystemXmlApplicationContext is opening and loading configuration file properly from URL of form ""jar:file/myJarFile.jar!myConfFile.xml"". But unlike regular ""file:/"" URL jar file remains open after context creation. This is causeing file to be uneditable while application is running.  Example: public void testFile(){ //to run test you need test.jar containing test.xml context definition File file = new File(""test.jar""); String url = ""jar:file://""+file.getAbsolutePath()+""!/test.xml""; ConfigurableApplicationContext appcontext = new FileSystemXmlApplicationContext(url);  //to check that file is open Thread.sleep(10000); //on windows: //try to open file //on linux run: //fuser test.jar    ---  **Affects:** 1.2.2  **Attachments:** - [TestSpring.zip](https://jira.spring.io/secure/attachment/10900/TestSpring.zip) (_5.39 kB_)","closed","in: core,","spring-projects-issues","2005-07-07T22:52:30Z","2019-01-12T16:41:04Z"
"","5474","Configurable Transaction Synchronization [SPR-746]","**[Jan Simovec](https://jira.spring.io/secure/ViewProfile.jspa?name=jan.simovec)** opened **[SPR-746](https://jira.spring.io/browse/SPR-746?redirect=false)** and commented  In project, I am working on, we do need to switch between multiple open Hibernate sessions. Unfortunately, actual Spring codebase does use hardwired strategy Session-per-thread, which does not fullfill our requirements. I propose to make TransactionSynchronizationManager a full featured strategy bean instead of being a bag of static methods.  This for example will allow: - hold Hibernate session open throughout multiple HTTP requests (long sessions/long transactions) (see JIRA issue SPR679) - different strategies for different Factories - manage more sessions in one thread (our case)  Solution: 1) define TransactionSynchronizationStrategy interface 2) provide default ""class ThreadLocalTransactionSynchronization implements TransactionSynchronizationStrategy"" 3) modify appropriate SessionFactoryUtils/DataSourceUtils/OjbFactoryUtils/... static methods to accept additional parameter of type TransactionSynchronizationStrategy 4) make HibernateDaoSupport/AbstractPlatformTransactionManager/PersistenceBrokerDaoSupport/... configurable to use TransactionSynchronizationManager bean. 5) modify all methods using SessionFactoryUtils/... methods to pass the additional ThreadLocalTransactionSynchronization bean  Problem: This extension will break backward compatibility with external code directly using SessionFactoryUtils/... To cope with this, we must probably leave old interface of SessionFactoryUtils/... and fallback to use old hardwired TransactionSynchronizationManager. Mix of the old and new configurable/harwired-thread-local strategies will be not possible, but can hold compatibility with external code.  Any suggestions?  NOTE: Deferred-close handling in SessionFactoryUtils is also using hardwired xxx-per-thread strategy, this must be modified too and somehow tied to the configurable TransactionSynchronizationStrategy bean.  This is relatively large modification, so i can volunteer on it.  Regards, Jan Simovec   ---  3 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2005-02-28T00:35:12Z","2007-12-02T11:58:33Z"
"","5395","Autowiring Struts Request Processor [SPR-667]","**[James Estes](https://jira.spring.io/secure/ViewProfile.jspa?name=james.estes)** opened **[SPR-667](https://jira.spring.io/browse/SPR-667?redirect=false)** and commented  I have used the DelegatingTilesRequestProcessor a lot on my team.  I quite regularly get developers getting NPEs when trying to access their service object...invariably it is because they forgot to put their bean definition for their action in the context.  I figured it would be easy to create a RequestProcessor that would autowire the actions (similar to the base unit tests) and negate the need for the actions in the xml file all together.  So, I created an 'AutowiringRequestProcessor' and 'AutowiringTilesRequesProcessor' that will load an action and autowire it by name.  From the javadoc for them:  A custom Struts RequestProcessor that will load and autowire actions using autowire-by-name against beans defined in the ContextLoaderPlugIn's WebApplicationContext.  The actions are also cached by class name so that Action instances will be shared across action mappings.  Given the stateless nature of the Actions, this is typically the desired behavior.  With this processor and the ContextLoaderPlugin in place, all the developer needs to do to express a dependency is add a setter for that dependency on the Action. For example, if there is a bean in the context whose id is 'fooService' and an action requires that service, it simply needs to have a 'setFooService' method.  The RequestProcessor will inject the dependency when the Action is loaded.  When autowire-by-name is not appropriate for a few of the actions, then those actions can be explicitly wired up by placing a bean in the context for the action.  The Action's 'name' attribute is the same as the action mapping (the way it is done in the DelegatingTilesRequestProcessor).  These actions will still be cached by classname, so if 2 action mapping point to the same Action class, the RequestProcessor will return the same instance.   ---  **Affects:** 1.1.4  **Attachments:** - [request_processors_src_1.1.4.zip](https://jira.spring.io/secure/attachment/10481/request_processors_src_1.1.4.zip) (_4.10 kB_) - [request_processors_src.zip](https://jira.spring.io/secure/attachment/10476/request_processors_src.zip) (_4.06 kB_)  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2005-01-31T00:08:31Z","2012-06-19T03:54:39Z"
"","5315","GenericFilterBean.shouldNotFailOnInvalidProperty [SPR-587]","**[James Estes](https://jira.spring.io/secure/ViewProfile.jspa?name=james.estes)** opened **[SPR-587](https://jira.spring.io/browse/SPR-587?redirect=false)** and commented  Posted in Spring Forum: http://forum.springframework.org/viewtopic.php?t=2708  I have a Filter that delegates to a spring-managed filter (similar to ACEGI's FilterToBeanProxy). The Filter I am delegating to is a 3rd party filter that requires all initialization parameters be set via the FilterConfig (i.e. no accessor methods exist).  My Filter (the one that does the delegation) is a subclass of OncePerRequestFilter, and takes advantage of both the once-per-request and should-not-filter features. During initFilterBean, my filter just wants to call the init method of the target filter, passing it getFilterConfig, which means that the parameters required by the target filter are present in the web.xml file. However, the GenericFilterBean will throw exceptions if a property it is attempting to set is not writable on the subclass.  Would it be possible/proper to add a protected shouldNotFailOnInvalidProperty (or similar) method to the GenericFilterBean that returns false by default? If subclasses overwrite it to return true, then the NotWritablePropertyExceptions would be swallowed. This would allow for cases like mine, where the property is not directly on the subclass, but is meant to be passed along to a target filter.    ---  **Affects:** 1.1.4","closed","type: enhancement,","spring-projects-issues","2004-12-27T03:57:55Z","2004-12-27T04:26:50Z"
"","5033","Allow Named Bind Parameters in PreparedStatementCreatorFactory [SPR-303]","**[James Estes](https://jira.spring.io/secure/ViewProfile.jspa?name=james.estes)** opened **[SPR-303](https://jira.spring.io/browse/SPR-303?redirect=false)** and commented  As mentioned in the forum: http://forum.springframework.org/viewtopic.php?t=428  When I first started using the SqlQuery objects, I noticed that the SqlParameter object has a name property.  This made me think that maybe spring supports named bind variables.  So I tried it: [code] select * from employees where   (firstName=:name OR lastname=:name) and :refDate between startdate and enddate [/code] ...no dice.  So, since the support was not there, I added it (I will post the diff to JIRA). Following is a description of the changes I made.  To start out with, I added a SqlParameterValue class that basically wraps an object and gives it a name.  This is the name of the declared parameter that the object corresponds to.  I then modified PreparedStatementCreatorFactory to check for values of this type and upon seeing them, re-orders the input parameter list to match the order their names appear in the declared parameter list.  At this point, I could create a sql query that declares parameters with names and then calls execute with SqlParameterValues with names:  [code] super(ds, ""select * ""+ ""from employees ""+ ""where         (firstname=? ""+ ""                      or lastname=?) ""+ ""                      and ? between startdate and enddate"" ); declareParameter(new SqlParameter(""firstname"", SqlTypes.VARCHAR)); declareParameter(new SqlParameter(""lastname"", SqlTypes.VARCHAR)); declareParameter(new SqlParameter(""refdate"", SqlTypes.DATE)); compile(); [/code] and execute it with: [code] query.execute(new Object[]{ new SqlParameterValue(""lastname"", commandBean.getLastName()), new SqlParameterValue(""firstname"", commandBean.getFirstName()), new SqlParameterValue(""refdate"", commandBean.getRefDate()) ); [/code]  ...notice I can pass the parameters in any order...they will be reorganized by the PreparedStatementCreatorFactory.  Then, stepping back and looking at the result, I thought it would be really nice if i could just pass my bean to the execute method and have spring pull out the parameters from the properties of the bean. I added this support by adding a method to the RdbmsOperation class that pulls the properties from the bean, then added ""*fromBean"" methods (updateFromBean, executeFromBean, and findObjectFromBean) to the SqlUpdate and SqlQuery classes.  Now I can execute my query with: [code] query.executeFromBean( commandBean ); [/code]  I still wanted to be able to have named bind variables within the actual sql string and not have to be sure and declare the parameters in the order they appear in the sql.  I also wanted to be able to reference a declared parameter multiple times in the same sql (in my query the firstname and lastname on the command bean are actually the same value....the query is finding an employee who was known to be employed on a given date and first or last name was the given value).  So I modified PreparedStatementCreatorFactory to have a usingNamedBinds property that would be set to true when using a sql query that contained named bind variables.  When this 'mode' is on, the factory will pull the placeholders from the sql and reorder the declared parameters and the input parameters (when called) to match the order they appear in the sql.  I then modified SqlOperation to also have a usingNamedBinds property that would be passed through to the PreparedStatementCreatorFactory.  Once finished, this allowed me to declare and execute my query as:  [code] super(ds, ""select * ""+ ""from employees ""+ ""where         (firstname=:name ""+ ""                      or lastname=:name) ""+ ""                      and :refDate between startdate and enddate"" ); setUsingNamedBinds(true); declareParameter(new SqlParameter(""refDate"", SqlTypes.DATE)); declareParameter(new SqlParameter(""name"", SqlTypes.VARCHAR)); compile(); [/code] and execute it with: [code] //order MUST match declared order query.execute(new Object[]{ commandBean.getRefDate(), commandBean.getName() ); [/code] OR [code] //order need not match declared order query.execute(new Object[]{ new SqlParameterValue(""name"", commandBean.getName()), new SqlParameterValue(""refDate"", commandBean.getRefDate()) ); [/code] OR [code] query.executeFromBean(commandBean); [/code] ...and we have what I originally wanted.  So, I hope you'll find this useful enough to include into spring.  I know it has greatly simplified my daos.   ---  **Affects:** 1.1 final  **Attachments:** - [NamedBindParameters.zip](https://jira.spring.io/secure/attachment/10196/NamedBindParameters.zip) (_17.02 kB_) - [NamedParameterSqlQuery-DynamicSqlQuery-2004-09-06.zip](https://jira.spring.io/secure/attachment/10202/NamedParameterSqlQuery-DynamicSqlQuery-2004-09-06.zip) (_5.64 kB_)  2 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2004-08-31T04:40:47Z","2012-06-19T03:54:21Z"
"","4991","PlaceholderConfigurer [SPR-260]","**[James Estes](https://jira.spring.io/secure/ViewProfile.jspa?name=james.estes)** opened **[SPR-260](https://jira.spring.io/browse/SPR-260?redirect=false)*** and commented  - Added a PlaceholderConfigurer that does what PropertyPlaceholderConfigurer does to search the BeanFactory for placeholders.  Leaves the actual resolving of placeholder replacements to subclasses.  - Added a DelegatingPlaceholderConfigurer that delegates to a PlaceholderResolver (interface) to resolve the placeholder replacement (useful for classes that want to take advantage of the functionality but already have a set concrete heirarchy)  - Modified PropertyPlaceholderConfigurer to use the DelegatingPlaceholderConfigurer.  - Added a FileResourcePlaceholderConfigurer that resolves a placeholder (default prefix of '${file:') to the full file system path to the resource as found by the getResource method of the current ApplicationContext.  - Added a UrlResourcePlaceholderConfigurer that resolves a placeholder (default prefix of '${url:') to a url that points to the resource as found by the getResource method of the current ApplicationContext  - Added a ClasspathResourcePlaceholderConfigurer that resolves a placeholder (default prefix of '${classpath:') to a url that points to the resource as found by getClass().getResource()  Will attach files.   ---  **Affects:** 1.1 RC1  **Attachments:** - [placeholder_configurer_changes.zip](https://jira.spring.io/secure/attachment/10162/placeholder_configurer_changes.zip) (_11.01 kB_) - [PlaceholderConfigurer.diff](https://jira.spring.io/secure/attachment/10164/PlaceholderConfigurer.diff) (_36.79 kB_)  1 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2004-08-12T01:04:44Z","2011-03-10T07:48:04Z"
"","4953","Allow ContextLoaderPlugIn to work from Struts Modules [SPR-222]","**[James Estes](https://jira.spring.io/secure/ViewProfile.jspa?name=james.estes)** opened **[SPR-222](https://jira.spring.io/browse/SPR-222?redirect=false)** and commented  The ContextLoaderPlugIn in version 1.0.2 does not work properly when used in multiple Struts modules.  The problem was that the plugin is cached in a specific place in the ServletContext without regard to the ModuleConfig.  So when you have multiple modules that use ""spring-loaded"" actions, only the first webApplicationContext for the plugin will be loaded/used.  I've made changes to the plugin to store it in the ServletContext at a location that includes the ModulePrefix (if one exists) and updated all the Delegating* classes that made reference to it. Probably the most negatively affected code is the DelegatingActionProxy class.  Not sure how to attach files to the issue here.   ---  **Affects:** 1.0.2  **Attachments:** - [struts_plugin_with_module_support.zip](https://jira.spring.io/secure/attachment/10140/struts_plugin_with_module_support.zip) (_12.56 kB_)","closed","type: enhancement,","spring-projects-issues","2004-07-16T07:17:17Z","2004-07-25T17:58:51Z"
"","5483","Sending mail to a server requiring authentication [SPR-755]","**[James Cook](https://jira.spring.io/secure/ViewProfile.jspa?name=oravecz)** opened **[SPR-755](https://jira.spring.io/browse/SPR-755?redirect=false)** and commented  JavaMailSenderImpl has parameters for username and password in order to communicate with SMTP servers that require authentication. I had expected that I would be able to successfully authenticate against my server by simply providing these parameters, however it was not enough.  In addition, I had to provide the property, 'mail.smtp.auth=""true""'. It wasn't that bad because the setJavaMailProperties(properties) method already exists on the JavaMailSenderImpl. (I didn't have to create my own mail session and wire it up.)  I post this to be sure this is added to documentation.  Although it would be convenient, I'm not sure if it is appropriate in all cases for Spring to automatically set this property when it detects a 'username' property? I'm assuming that there are cases where a username is supplied and auth=false since the Java Mail API doesn't set this property automatically.   ---  **Affects:** 1.1.3  1 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2005-03-01T00:35:41Z","2005-03-20T04:43:58Z"
"","5310","Autowire-by-type conflicts with abstract bean pattern [SPR-582]","**[James Cook](https://jira.spring.io/secure/ViewProfile.jspa?name=oravecz)** opened **[SPR-582](https://jira.spring.io/browse/SPR-582?redirect=false)** and commented  I'm using the abstract bean pattern to declare a bean that requires transactional control.  \ \ \True\ \ \ \ \ \ \ \ \ \ \ \ \ \  I'm using the AbstractDependencyInjectionSpringContextTests base class that performs an autowire by type, however in order to perform this function it seems that it has to instatiate the beans in the context.  However, when it gets to the parent class (TXTemplate) it attempts to instantiate it and ends up executing afterPropertiesSet. At this point target is not set and the exception occurs.  Is there a workaround? Or is it time for an abstract=""true"" property.   ---  **Affects:** 1.1.2","closed","type: enhancement,","spring-projects-issues","2004-12-22T13:40:45Z","2004-12-23T02:22:27Z"
"","5283","Add an alias attribute to bean definition [SPR-554]","**[James Cook](https://jira.spring.io/secure/ViewProfile.jspa?name=oravecz)** opened **[SPR-554](https://jira.spring.io/browse/SPR-554?redirect=false)** and commented  In Spring you can give a bean multiple names (or aliases) by separating them with a space.  i.e.   However, in an effort to componentize my Spring development, I do not always (or at least easily) have access to the initial declaration of a bean. In these cases, I would like some way of giving a bean that is identified in another XML file (perhaps in a jar file) a new alias.  i.e. Bean defined in    Bean defined in a local and accessible context:    In my loaded context, if I call getBean(""newbean1""), I would actually get a reference to ""somebean"". It would be really cool if I could advise ""newbean1"" differently than ""newbean2"" also, but that wasn't my main purpose for making this request.  For examples of the componentizing I refer to, look to http://opensource.atlassian.com/confluence/spring/x/ZQM    ---  **Affects:** 1.1.2","closed","type: enhancement,","spring-projects-issues","2004-12-14T06:54:19Z","2005-04-09T00:36:34Z"
"","5282","NPE in HibernateTemplate using Iterator [SPR-553]","**[James Cook](https://jira.spring.io/secure/ViewProfile.jspa?name=oravecz)** opened **[SPR-553](https://jira.spring.io/browse/SPR-553?redirect=false)** and commented  Here's some code from HibernateTemplate.java:  public Iterator iterate(String queryString, Object[] values) throws DataAccessException { return iterate(queryString, values, (Type[]) null); }  public Iterator iterate(final String queryString, final Object[] values, final Type[] types) throws DataAccessException { if (values.length != types.length) {","closed","in: core,","spring-projects-issues","2004-12-14T06:45:39Z","2004-12-18T21:33:35Z"
"","5752","Thread local singletons [SPR-1045]","**[Jacques Morel](https://jira.spring.io/secure/ViewProfile.jspa?name=jacmorel)** opened **[SPR-1045](https://jira.spring.io/browse/SPR-1045?redirect=false)** and commented  At the present time we can only define beans as prototypes or global singletons. Unfortunately in multi-user environment we often need singletons in the scope of a single thread. This would allow to remove the ThreadLocal statics off of our applications (aren't they in fact evil disguised singletons too ;-) ) and make our beans even more decoupled and testable.  HiveHind supports this already in a very elegant way (http://jakarta.apache.org/hivemind/services.html#Threaded+Service+Model). . I suppose one other way is to have a thread specific bean factory/context inheriting global contexts but that sounds too heavy-weight to me. In addition this proxy based wiring could be easily extended to do other things like allowing ""templatized bean configuration"" (similar to a Method Template pattern for bean graphs) or bean hot-swapping or allowing cycles in constructor based injection (like in picocontainer)...  As Howard says in this old TSS post (http://www.theserverside.com/news/thread.tss?thread_id=28937#139334), this makes a lot of thread-safety issues very transparent to the bean implementation.   --- No further details from [SPR-1045](https://jira.spring.io/browse/SPR-1045?redirect=false)","closed","in: core,","spring-projects-issues","2005-06-15T09:59:56Z","2019-01-11T18:37:16Z"
"","5522","Add startBatch() and executeBatch() methods to iBATIS SqlMapClientOperations (and SqlMapClientTemplate) [SPR-795]","**[Isaac Arias](https://jira.spring.io/secure/ViewProfile.jspa?name=ikester)** opened **[SPR-795](https://jira.spring.io/browse/SPR-795?redirect=false)** and commented  The startBatch() and executeBatch() methods are missing from the SqlMapClientOperations interface (and therefore SqlMapClientTemplate) for iBATIS support.  The only way to accomplish batches with iBATIS now, as far as I can tell, is to get the underlying SqlMapClient and call these methods directly. However, this negates the benefits of the generic non-checked data access exceptions.  I'm not sure if this was purposefully left out for technical reasons or if it was simply overlooked.   ---  **Affects:** 1.1.5, 1.2 RC1, 1.2 RC2","closed","type: enhancement,","spring-projects-issues","2005-03-18T03:22:30Z","2005-03-25T02:01:55Z"
"","5859","Integration with Spring Framework  [SPR-1157]","**[Iman Rahmatizadeh](https://jira.spring.io/secure/ViewProfile.jspa?name=iman.rahmatizadeh)** opened **[SPR-1157](https://jira.spring.io/browse/SPR-1157?redirect=false)** and commented  Wicket is out and everybody (i guess) has  already heard about it. Despite its simple and elegant design I guess a major drawback is there's no spring support for it. They have a project defined to integrate spring into it but by reading the source code It's obvious they've chosen the wrong way. (Using spring  controllers to instantiate WicketServlet's is an example).  I think having good & powerful support for component-based web framework's like Wicket or Tapestry would be a good idea, especially considering wicket's POJO approach to web.    --- No further details from [SPR-1157](https://jira.spring.io/browse/SPR-1157?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-07-20T01:05:04Z","2005-07-20T04:48:15Z"
"","5102","""enum"" is a keyword as of JDK 5.0 [SPR-372]","**[Igor Fedorenko](https://jira.spring.io/secure/ViewProfile.jspa?name=ifedorenko)** opened **[SPR-372](https://jira.spring.io/browse/SPR-372?redirect=false)** and commented  Spring (from CVS as of this morning) does not compile using JDK 1.5 (actually, it's Eclipse with 1.5 compatibility turn on) because there are few variables with name ""enum"". I'll attach patch in a second.   ---  **Attachments:** - [spring_enum.diff](https://jira.spring.io/secure/attachment/10271/spring_enum.diff) (_23.36 kB_)","closed","type: bug,","spring-projects-issues","2004-10-06T02:32:23Z","2004-10-06T03:23:31Z"
"","5213","AbstractPathResolvingPropertyEditor is incompatible with jdk1.3 (StringBuffer usage) [SPR-484]","**[Ian Blizard](https://jira.spring.io/secure/ViewProfile.jspa?name=ianblizard)** opened **[SPR-484](https://jira.spring.io/browse/SPR-484?redirect=false)** and commented  While using ResourceEditor under jdk 1.3, this occurred upon a call to setValue.  I believe this class has been changed to look for property placeholders: ${thing} and makes calls to StringBuffer.indexOf(String str), which is unavailable.  Trace:  java.lang.NoSuchMethodError: java.lang.StringBuffer: method indexOf(Ljava/lang/String;)I not found at org.springframework.core.io.AbstractPathResolvingPropertyEditor.resolvePath(AbstractPathResolvingPropertyEditor.java:55) at org.springframework.core.io.ResourceEditor.setAsText(ResourceEditor.java:59)   ---  **Affects:** 1.1.2","closed","in: core,","spring-projects-issues","2004-11-23T21:28:52Z","2004-11-24T18:39:13Z"
"","5288","it would be nice if StaticMethodMatcherPointcut could be configured with a ClassFilter [SPR-559]","**[Hunter Kelly](https://jira.spring.io/secure/ViewProfile.jspa?name=retnuh)** opened **[SPR-559](https://jira.spring.io/browse/SPR-559?redirect=false)** and commented  StaticMethodMatcherPointcut always returns ClassFilter.TRUE. It would be nice if this were a configurable property that defaulted to ClassFilter.TRUE.  This would make a lot of these advisors much more flexible - in particular, the regexp and NameMatchMethodPointcutAdvisors, etc, would instantly become much more flexible.  For example, a user could easily define a RootClassFilter in the appContext.xml, set that as a property on whatever StaticMethodMatcherPointcut subclass they are using, and have a nice, efficient advisor.  This would have great benefit, for example, with the DefaultAdvisorAutoProxyCreator.   ---  **Affects:** 1.1.1  **Attachments:** - [spring.StaticMethodMatchPointcut.diff](https://jira.spring.io/secure/attachment/10378/spring.StaticMethodMatchPointcut.diff) (_1.16 kB_)","closed","type: enhancement,","spring-projects-issues","2004-12-15T02:53:39Z","2004-12-23T07:07:11Z"
"","5287","AbstractAdvisorAutoProxyCreator is pretty inefficient [SPR-558]","**[Hunter Kelly](https://jira.spring.io/secure/ViewProfile.jspa?name=retnuh)** opened **[SPR-558](https://jira.spring.io/browse/SPR-558?redirect=false)** and commented  Looking at AbstractAdvisorAutoProxyCreator/DefaultAdvisorAutoProxyCreator, the following methods are fairly inefficient:  protected Object[] getAdvicesAndAdvisorsForBean(Object bean, String name, TargetSource targetSource) { List advisors = findEligibleAdvisors(bean.getClass()); if (advisors.isEmpty()) { return DO_NOT_PROXY; } advisors = sortAdvisors(advisors); return advisors.toArray(); }  protected List findEligibleAdvisors(Class clazz) { List candidateAdvisors = findCandidateAdvisors(); List eligibleAdvisors = new LinkedList(); for (int i = 0; i < candidateAdvisors.size(); i++) { // Sun, give me generics, please! Advisor candidate = (Advisor) candidateAdvisors.get(i); if (AopUtils.canApply(candidate, clazz, null)) { eligibleAdvisors.add(candidate); if (logger.isInfoEnabled()) { logger.info(""Candidate advisor ["" + candidate + ""] accepted for class ["" + clazz.getName() + ""]""); } } else { if (logger.isInfoEnabled()) { logger.info(""Candidate advisor ["" + candidate + ""] rejected for class ["" + clazz.getName() + ""]""); } } } return eligibleAdvisors; }  Basically, if there is any type of AbstractAdvisorAutoProxyCreator configured, _every_ time a bean is retrieved from the appContext, the method findCandidateAdvisors will get called - which in the case of the DefaultAdvisorAutoProxyCreator, lists all the beans in the factory that are of type Advisor.  I think there are two obvious performance increases here: A) Cache the results of findCandidateAdvisors B) Cache the results of findEligibleAdvisors(Class clazz) - the returned list of advisors could very easily be cached with   a simple wek hash map keyed on the classname.  I think the combination of one or both of these would have an immediate performance boost for users of these classes.  I'd whip up a patch, but I don't don't regularly build Spring from source/run the tests/etc, so I thought I would post this first, and then whip up a patch if requested.   ---  **Affects:** 1.1.1","closed","type: enhancement,","spring-projects-issues","2004-12-15T02:34:18Z","2012-06-19T09:37:36Z"
"","5015","PropertyResourceConfigurer doesn't handle Properties with defaults properly [SPR-284]","**[Hunter Kelly](https://jira.spring.io/secure/ViewProfile.jspa?name=retnuh)** opened **[SPR-284](https://jira.spring.io/browse/SPR-284?redirect=false)** and commented  In PropertyResourceConfigurer, if properties have been set, the following code is to resolve the properties:      public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {     	Properties props = new Properties();          	if (this.properties != null) {     		if (logger.isDebugEnabled()) {     			logger.debug(""Applying directly specified properties ["" + this.properties + ""]"");     		}     		props.putAll(this.properties);     	}                 ...         }  However, this doesn't take into account Properties objects that were created with a default set of Properties for fallback stuff.  Annoyingly, putAll doesn't do the right thing wrt Properties objects, but, hey, what can you do.  As a workaround I think that instead of props.putAll(this.properties), it should be more like:  Enumeration e = this.properties.getPropertyNames(); while (e.hasMoreElements()) { String key = (String)e.nextElement(); props.setProperty(key, this.properties.getProperty(key)); }  This will allow people that have fairly rich Properties classes/subclasses to use the PropertyResourceConfigurer in a useful way.  As a side note, I had to file a similar bug with the Quartz scheduler project last year  :)    ---  **Affects:** 1.0.2","closed","in: core,","spring-projects-issues","2004-08-24T23:16:40Z","2004-08-24T23:21:01Z"
"","4892","MethodInvokingFactoryBean doesn't convert arguements. [SPR-160]","**[Hunter Kelly](https://jira.spring.io/secure/ViewProfile.jspa?name=retnuh)** opened **[SPR-160](https://jira.spring.io/browse/SPR-160?redirect=false)** and commented  I was fairly confused for awhile when using MethodInvokingFactoryBean, and found out that the fancy conversions you use when defining properties on beans don't happen to the arguments passed into the MethodInvokingFactoryBean.  I thought this was rather un-Spring like, personally, but assumed it was an oversight, or hadn't been needed, or whatever.  I whipped up the following subclass that sorts things out nicely.  It's a bit naive, and it doesn't find any registered PropertyEditors defined in the context or anything, but it works for the bare bones stuff.  As a side note, I found that there really isn't any API support for finding registered custom property editors in the context - the only thing that was available to use was AbstractBeanFactory.getCustomEditors().  I was thinking that it would be handy for _some_ interface to expose this - possibly ConfigurableBeanFactory, where registerCustomEditor is defined.  Anyway, here's the class.  I just slapped it into my project, I've never set up a build of spring on my local box (I haven't had to - it works great :) so I haven't tried to make it official, written tests, or anything like that.  Maybe this is something that could get included, or maybe the functionality folded in MethodInvokingFactoryBean?  H  ---  public class TypeConvertingMethodInvokingFactoryBean extends MethodInvokingFactoryBean { public void prepare() throws ClassNotFoundException, NoSuchMethodException { super.prepare(); BeanWrapperImpl wrapper = new BeanWrapperImpl(); Object[] args = getArguments(); Method method = getPreparedMethod(); Class[] requiredTypes = method.getParameterTypes(); for (int i=0; i < args.length; i++) args[i] = wrapper.doTypeConversionIfNecessary(args[i], requiredTypes[i]); setArguments(args); }  }  ---  **Affects:** 1.0 final","closed","type: enhancement,","spring-projects-issues","2004-06-07T20:20:53Z","2019-01-13T22:54:53Z"
"","4927","Non immutable SchedulerFactoryBean [SPR-196]","**[Hugues L](https://jira.spring.io/secure/ViewProfile.jspa?name=hglz)** opened **[SPR-196](https://jira.spring.io/browse/SPR-196?redirect=false)** and commented  This is a minor adition to the SchedulerFactoryBean class. For the sake of our project, we need to register programatically Quartz triggers, calendars and jobDetails to an existing scheduler.  As we maintain a central scheduler with Spring, wrapped in a Spring managed SchedulerFactoryBean instance, we are proposing a patch to add individual triggers, calendars and jobDetails to the ones managed by SchedulerFactoryBean.  Maybe we are not using the correct way of doing things (maybe we should not use SchedulerFactoryBean?), but as we want to leverage all the benefits of Spring, this what we thought we could use.  Thanks for reviewing, and congratulations for the nice framework,  Hugues.  I copy the aded code below :      /**      * Add a single job to the underlying scheduler. This method allows the      * programmatic addition of JobDetail s after the initial      * population of the JobDetail s list has been perfomed by      * the Spring factory.      *       * @param jobDetail      *            the JobDetail to add      */     public void addJobDetail(JobDetail jobDetail) throws SchedulerException {     	this.jobDetails.add(jobDetail);     	this.scheduler.addJob(jobDetail, true);     }          /**      * Add a single Quartz Calendar object to the underlying scheduler. This      * method allows the programmatic addition of Calendar s      * after the initial population of the Calendar s map has      * been perfomed by the Spring factory.      *       * @param calendarName      *            the name of the calendar      * @param calendar      *            the Calendar to add      */     public void addCalendar(String calendarName, Calendar calendar)     		throws SchedulerException {     	if (this.calendars != null)     		this.calendars = new HashMap();     	this.scheduler.addCalendar(calendarName, calendar, true);     }          /**      * Add a single Quartz Trigger object to the underlying scheduler. This      * method allows the programmatic addition of Trigger s after      * the initial population of the Trigger s list has been      * perfomed by the Spring factory.      *       * If the Trigger determines the corresponding JobDetail itself, the job      * will be automatically registered with the Scheduler.      *       * @param trigger      *            the Trigger to add      */     public void addTrigger(Trigger trigger) throws SchedulerException {     	if (this.triggers != null)     		this.triggers = new ArrayList();          	if (trigger instanceof JobDetailAwareTrigger) {     		JobDetail jobDetail = ((JobDetailAwareTrigger) trigger)     				.getJobDetail();     		if (!this.jobDetails.contains(jobDetail)) {     			// automatically register the JobDetail too     			this.jobDetails.add(jobDetail);     			this.scheduler.addJob(jobDetail, true);     		}     	}     	this.scheduler.scheduleJob(trigger);     }    ---  **Affects:** 1.0.2","closed","type: enhancement,","spring-projects-issues","2004-06-28T21:59:01Z","2004-07-19T07:03:32Z"
"","5600","collection properties to support union of values defined in parent bean definitions [SPR-874]","**[Hugh Madden](https://jira.spring.io/secure/ViewProfile.jspa?name=hughmadden)** opened **[SPR-874](https://jira.spring.io/browse/SPR-874?redirect=false)** and commented  It would sometimes be useful for bean collection properties in parent/ child bean configurations to set the union of all defined properties (from the child up to the topmost parent).  A suggestion for this would be a union attribute on collection values, for example: \ \ \ \propertyA\ \propertyB\ \ \ \  \ \ \ \propertyC\ \ \ \   \ \ \ \propertyD\ \ \ \    In this example, instantiated beans would have a collectionProperty that looks like:  defaults: {propertyA, propertyB} child1: {propertyC} (union = false) child2: {propertyC,propertyD} (union = true but union stops at parent with union = false)  The forum topic that discusses a need for this feature can be found at: http://forum.springframework.org/viewtopic.php?t=4689  Potentially union is not the correct name for the attribute as not all collections are sets.   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework-issues/commit/a27a3812f71cdc48015bea59dd7ebb15358035f4","closed","type: enhancement,","spring-projects-issues","2005-04-10T23:13:26Z","2012-06-19T03:54:23Z"
"","5366","SessionFactoryUtils.getSession(..) before PROPAGATION_REQUIRED [SPR-638]","**[Holger Engels](https://jira.spring.io/secure/ViewProfile.jspa?name=hengels)** opened **[SPR-638](https://jira.spring.io/browse/SPR-638?redirect=false)** and commented  ""GenerateLetters.java:42"" calls SessionFactoryUtils.getSession(), before the adviced method ""ProfileBuilderLogicSupport.java:542"" is called. Problem: SessionFactoryUtils looks up the Session with SessionHolder.DEFAULT_KEY, though the Session is stored with the current transaction as key.  java.lang.NullPointerException at org.springframework.orm.hibernate.HibernateTemplate.createQuery(HibernateTemplate.java:836) at org.springframework.orm.hibernate.HibernateTemplate$25.doInHibernate(HibernateTemplate.java:469) at org.springframework.orm.hibernate.HibernateTemplate.execute(HibernateTemplate.java:200) at org.springframework.orm.hibernate.HibernateTemplate.executeFind(HibernateTemplate.java:220) at org.springframework.orm.hibernate.HibernateTemplate.find(HibernateTemplate.java:467) at wilken.openshop.modules.eprofiler.dao.support.hibernate.EProfilerDaoSupport.getFavoritAttributesForBp(EProfilerDaoSupport.java:103) at wilken.openshop.modules.eprofiler.logic.support.ProfileBuilderLogicSupport.getAllFavoriteAttributes(ProfileBuilderLogicSupport.java:691) at wilken.openshop.modules.eprofiler.logic.support.ProfileBuilderLogicSupport.getEmptyFavoriteTree(ProfileBuilderLogicSupport.java:527) at wilken.openshop.modules.eprofiler.logic.support.ProfileBuilderLogicSupport.getFilledFavoriteTree(ProfileBuilderLogicSupport.java:542) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:324) at org.springframework.aop.framework.AopProxyUtils.invokeJoinpointUsingReflection(AopProxyUtils.java:61) at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:149) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:116) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:56) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:138) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:152) at $Proxy4.getFilledFavoriteTree(Unknown Source) at wilken.openshop.modules.ecampaign.logic.support.CampaignContentBuilderSupport.getFavoriteTree(CampaignContentBuilderSupport.java:384) at wilken.openshop.modules.ecampaign.logic.support.CampaignContentBuilderSupport.buildContent(CampaignContentBuilderSupport.java:236) at wilken.openshop.modules.ecampaign.campaign.GenerateLetters.getLocalizedContentItems(GenerateLetters.java:74) at wilken.openshop.modules.ecampaign.campaign.GenerateLetters.createNewsletter(GenerateLetters.java:65) at wilken.openshop.modules.ecampaign.campaign.GenerateLetters.execute(GenerateLetters.java:42) at org.concern.controller.Controller.execute(Controller.java:725) at org.concern.controller.Controller.process(Controller.java:642) at org.concern.controller.Controller.process(Controller.java:608) at org.concern.controller.Controller.timeout(Controller.java:198) at org.concern.controller.Controller$TimeoutTask.run(Controller.java:1131) at java.util.TimerThread.mainLoop(Timer.java:432) at java.util.TimerThread.run(Timer.java:382)  ---  **Affects:** 1.1.1  **Issue Links:** - #5382 HibernateTemplate.checkWriteOperationAllowed > NullPointerException (_**""is duplicated by""**_)","closed","type: bug,","spring-projects-issues","2005-01-18T19:04:02Z","2019-01-11T12:51:36Z"
"","5075","spring:message tag produces incorrect results when passwd variables contain comma [SPR-345]","**[Henryk Paluch](https://jira.spring.io/secure/ViewProfile.jspa?name=hpaluch)** opened **[SPR-345](https://jira.spring.io/browse/SPR-345?redirect=false)** and commented  The  tag produces incorrect results when argument's variables contain commas. How to reproduce: 1. Add this line to messages.properties (you may use petclinic example):    oops_msg = He said: ''{0}''  2. Add this code to jsp (welcome.jsp in petclinic):          3. Invoke that page:    http://localhost:8080/petclinic/welcome.htm  It produces: He said: 'Ooops'  whis is incorrect. Desired message is: He said: 'Ooops, It does not work!'  The problem is caused probably by incorrect order of arguments processing in MessageTag.java. Currently it looks like: String resolvedArguments = ExpressionEvaluationUtils.evaluateString(""arguments"", this.arguments, pageContext); String[] argumentsArray = StringUtils.commaDelimitedListToStringArray(resolvedArguments);  These lines should be rather swapped, e.g. call commaDelimitedListToStringArray() and than call evaluateString() for each delimited argument. But if some expression shall contain comma (is it possible?) this approach will introduce new bug...    ---  **Affects:** 1.1 final","closed","type: bug,","spring-projects-issues","2004-09-23T19:05:57Z","2005-11-08T07:28:40Z"
"","5074","JPetStore sample - user registration does not handle duplicate User ID [SPR-344]","**[Henryk Paluch](https://jira.spring.io/secure/ViewProfile.jspa?name=hpaluch)** opened **[SPR-344](https://jira.spring.io/browse/SPR-344?redirect=false)** and commented  There is an problem in JPetStore application. When a new user attempts to registers itself on: http://localhost:8080/jpetstore/shop/newAccount.do there is not handled the case, when entered user id already exists. For example for User ID: j2ee on submit error is displayed:  ---  org.springframework.dao.DataIntegrityViolationException: SqlMapTemplate: Violation of unique index: PK_ACCOUNT in statement [insert into ACCOUNT (EMAIL, FIRSTNAME, LASTNAME, STATUS, ADDR1, ADDR2, CITY, STATE, ZIP, COUNTRY, PHONE, USERID) values ('asdf', 'asdf', 'asdf', 'OK', 'asdf', 'asdf', 'asdf', 'asdf', 'asdf', 'asdf', 'asdf', 'j2ee')]; nested exception is java.sql.SQLException: Violation of unique index: PK_ACCOUNT in statement [insert into ACCOUNT (EMAIL, FIRSTNAME, LASTNAME, STATUS, ADDR1, ADDR2, CITY, STATE, ZIP, COUNTRY, PHONE, USERID) values ('asdf', 'asdf', 'asdf', 'OK', 'asdf', 'asdf', 'asdf', 'asdf', 'asdf', 'asdf', 'asdf', 'j2ee')] java.sql.SQLException: Violation of unique index: PK_ACCOUNT in statement [insert into ACCOUNT (EMAIL, FIRSTNAME, LASTNAME, STATUS, ADDR1, ADDR2, CITY, STATE, ZIP, COUNTRY, PHONE, USERID) values ('asdf', 'asdf', 'asdf', 'OK', 'asdf', 'asdf', 'asdf', 'asdf', 'asdf', 'asdf', 'asdf', 'j2ee')] at com.ibatis.db.sqlmap.MappedStatement.executeUpdate(Unknown Source) at org.springframework.orm.ibatis.SqlMapTemplate$8.doInMappedStatement(SqlMapTemplate.java:218) at org.springframework.orm.ibatis.SqlMapTemplate.execute(SqlMapTemplate.java:111) at org.springframework.orm.ibatis.SqlMapTemplate.executeUpdate(SqlMapTemplate.java:216) at org.springframework.samples.jpetstore.dao.ibatis.SqlMapAccountDao.insertAccount(SqlMapAccountDao.java:24) at org.springframework.samples.jpetstore.domain.logic.PetStoreImpl.insertAccount(PetStoreImpl.java:74)  ---  Please note, that it is very common problem on user registration. It would be nice to fix this sample to have nice reference implementation.  I like to provide fix, but have no idea, how to make custom errors in onSubmit() method of AccountFormController (it is not obvious how to do this).  ---  **Affects:** 1.0.2","closed","type: bug,","spring-projects-issues","2004-09-22T21:12:32Z","2019-01-13T22:53:50Z"
"","5666","Lazy loading fails in spite of Hibernate OpenSessionInViewFilter when using Struts plugin [SPR-947]","**[Heiko Seeberger](https://jira.spring.io/secure/ViewProfile.jspa?name=heiko.seeberger)** opened **[SPR-947](https://jira.spring.io/browse/SPR-947?redirect=false)** and commented  After reading a lot of documentation and discussion forum postings I thought I found the solution for lazy loading of Collection attributes of objects loaded by Hibernate: The OpenSessionInViewFilter.  But even after applying that I received the same odd exception stating that lazy loading was not possible because the Hibernate Session was already closed :-(  After spending hours of debugging and scanning the discussion forums I finally found a posting about problems with OpenSessionInViewFilter in combination with the Spring plugin for Struts. And that showed to be the same problem as mine.  OpenSessionInViewFilter does not work when using the Spring plugin for Struts! Then no configuration trick gets it running, neither using singleSession false, nor using transactions. But when I removed the Spring plugin form struts-config.xml everything was fine, either way with or without transactions or either singleSession setting.  As I had to spend hours to idintify the problem (first I was going to half the source code for the ...orm.hibernate3.* packages) I did not go on looking for the reason of this bug. Thus I would like to give it into your hands ...   ---  **Affects:** 1.2 final","closed","","spring-projects-issues","2005-05-14T06:04:57Z","2019-01-11T22:06:25Z"
"","5195","PropertyPlaceholderConfigurer incompatible with J2SE 1.3 [SPR-466]","**[Harry Wambolt](https://jira.spring.io/secure/ViewProfile.jspa?name=hwambolt)** opened **[SPR-466](https://jira.spring.io/browse/SPR-466?redirect=false)** and commented  java.lang.NoSuchMethodError: java.lang.StringBuffer: method indexOf(Ljava/lang/String;)I not found at org.springframework.beans.factory.config.PropertyPlaceholderConfigurer.parseString(PropertyPlaceholderConfigurer.java:359)   ---  **Affects:** 1.1.2","closed","in: core,","spring-projects-issues","2004-11-15T07:07:29Z","2004-11-15T07:18:24Z"
"","5277","Bean property not able to resolve correct method to use when being instantiated [SPR-548]","**[Harold Neiper](https://jira.spring.io/secure/ViewProfile.jspa?name=hneiper)** opened **[SPR-548](https://jira.spring.io/browse/SPR-548?redirect=false)** and commented  In my application context I was originally passing in properties to to a bean where the setter was setMessageBusProperties(Properties props); and using the config immediately below:  \ \ \ \framework.messaging.impl.tibco.Channel\ \ framework.messaging.impl.tibco.Bus\			\framework.messaging.impl.tibco.Message\	\ \ \  Well, given this did not take full advantage of spring I instead changed the \ to a \ and passed in beans set in a map.   Anyhow, I just overloaded the above setter method with this signature setMessageBusProperties(Map map); and using the config immediately below:  \ \ \ \\ \ \\ \ \\ \ \ \ \	  Now I am assuming that given the types (Properties vs Map) are different that it would pick up the appropriate setter method given the appropriate type (i.e. If I pass a Map it would use the setter method that accepts a Map, and so on).  But this is not the case.  Instead I found that it does not matter what the type is and it appears to just use the first method it finds.  And in my case it always used the method whose signature was setMessageBusProperties(Properties props); instead of finding the method whose signature accepted a Map.    ---  **Affects:** 1.1.2","closed","status: declined,","spring-projects-issues","2004-12-13T03:12:16Z","2019-01-12T16:41:56Z"
"","5375","Add getHeaders to MockHttpServletRepsonse [SPR-647]","**[Hans Donner](https://jira.spring.io/secure/ViewProfile.jspa?name=jhdonner)** opened **[SPR-647](https://jira.spring.io/browse/SPR-647?redirect=false)** and commented  The Mock response object does not provide access to all set headers.   ---  **Attachments:** - [patch-spring-mockservletresponse.txt](https://jira.spring.io/secure/attachment/10451/patch-spring-mockservletresponse.txt) (_1.21 kB_) - [patch-spring-mockservletresponse.txt](https://jira.spring.io/secure/attachment/10450/patch-spring-mockservletresponse.txt) (_847 bytes_)","closed","type: enhancement,","spring-projects-issues","2005-01-21T06:45:06Z","2005-01-24T00:25:31Z"
"","5628","resolving xml entities [SPR-903]","**[Hamster](https://jira.spring.io/secure/ViewProfile.jspa?name=hamster)** opened **[SPR-903](https://jira.spring.io/browse/SPR-903?redirect=false)** and commented  It is common approach to use multiple xml config files. I often includes entities from one global file:  [..]  \ \ [..]  It works fine with files which are included in `contextConfigLocation' servlet init param.  Problem is when I file is not direct parsed by spring, here is example:  application-servlet.xml: [..] \ \ \0\ \  \views.xml\ \ \ [..]  When views.xml has line like ""\"" it do not parse.  Problem is that it (XmlViewResolver) uses BeansDtdResolver and classpath: prefix properly resolved by ResourceEntityResolver.   ---  **Affects:** 1.1.3, 1.1.4, 1.1.5","closed","in: core,","spring-projects-issues","2005-04-24T05:35:48Z","2005-10-12T08:18:24Z"
"","5183","BeanUtils.copyProperties will only work for same concrete instances [SPR-454]","**[Greg](https://jira.spring.io/secure/ViewProfile.jspa?name=gslonim)** opened **[SPR-454](https://jira.spring.io/browse/SPR-454?redirect=false)** and commented  org.springframework.beans.BeanUtils.copyProperties immediately checks whether arriving source object is an instance of the target object type.  This way the interfaces are not supported. If you have CommonInterface and you have One and Two implementing it, declaring CommonInterface one = new One() and CommonInterface two = new Two() and passing them into the copyProperties will obviously not work since method immediately does  source.getClass().isInstance(target) thereby inquiring on the concrete class instances. This reduces flexibility of using interface types and two different implementation (having same accessors and mutators, but mapped to 2 different tables in the database, for instance). We are forced to use commons BeanUtils.copyProperties instead, even though we love Spring. Please advise.    --- No further details from [SPR-454](https://jira.spring.io/browse/SPR-454?redirect=false)","closed","type: enhancement,","spring-projects-issues","2004-11-12T04:20:29Z","2004-11-12T08:19:51Z"
"","5387","Prevent proxied objects being injected into other objects [SPR-659]","**[Greg Matthews](https://jira.spring.io/secure/ViewProfile.jspa?name=gmatthews)** opened **[SPR-659](https://jira.spring.io/browse/SPR-659?redirect=false)** and commented  There seems to be several forum issues relating to people injecting the base object instead of the proxy into beans, which causes problems,  e.g. if you inject the non-proxied data access object instead of the transaction wrapped one then you don't get proper transaction handling.  It would be good if there was a way to generate warning messages on startup if you'd injected an object but there also existed a proxy for that object.  e.g.  ""WARNING: Object MyBeanBase injected into OtherBean, where proxy bean MyBean exists"".    --- No further details from [SPR-659](https://jira.spring.io/browse/SPR-659?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-01-26T07:42:58Z","2006-03-03T11:18:29Z"
"","5357","Email attachments don't appear in Lotus Notes [SPR-629]","**[Greg Matthews](https://jira.spring.io/secure/ViewProfile.jspa?name=gmatthews)** opened **[SPR-629](https://jira.spring.io/browse/SPR-629?redirect=false)** and commented  Email attachments not working in Lotus Notes.  Using the org.springframework.mail.javamail.MimeMessageHelper to create an email with a text part and a file attachment results in the file attachment not being visible when viewing the email in Lotus Notes. The attachments seem correctly viewable in other mail client programs, e.g. browser mail clients.  The problem seems (?) to be related to how the text part of the email is added to the mail message.  If you use the code below, the attachment (added later) does not appear when the email is viewed.  // where msg is a MimeMessageHelper msg.setText(someText, true);  If you do the following workaround, the email message received does **not** have the paperclip symbol but **does** have an attachment icon within the email message when you open the email.  // where msg is a MimeMessageHelper MimeBodyPart mbp = new MimeBodyPart(); mbp.setText(someText); msg.getMimeMultipart().addBodyPart(mbp);  We're using the following MimeMessageHelper method to add the attachment.  msg.addAttachment(someFileName, dataSource);  I found the following which may be some help with this.  http://chris-linfoot.net/d6plinks/CWLT-5VZD4Y  I am also happy to try out any possible fixes if you don't have access to Lotus Notes (lucky you).  Cheers, Greg   ---  **Affects:** 1.1.3","closed","type: bug,","spring-projects-issues","2005-01-17T08:47:15Z","2005-08-19T07:00:19Z"
"","5627","Upgade Spring to 1.2 RC2 and Hibernate to hibernate3, causes issues [SPR-900]","**[Gopal Koratana](https://jira.spring.io/secure/ViewProfile.jspa?name=kgopalrao)** opened **[SPR-900](https://jira.spring.io/browse/SPR-900?redirect=false)** and commented  I was using Spring 1.0 with Hibernate2 for my DAO layer. Xdoclet is used to generate hibernate mapping.  Spring among other thing is also used to manage transaction (declarative). This is working perfectly.  I decided to upgrade to Hiebernate3 and hence Spring 1.2 RC2. Had to upgrade couple of hibernate and spring jar's. Figured out some of the methods in hibernate temple are gone but overall the migration was seamless. The systems build and deployes.  BUT When I deploy the webapp (in Tomcat 5.0 and JDK 1.4.2), and make a DAO call and get the entity and try to access some property within the entity I am getting this exception  Any Suggestions. Looks like I am missing some kind of configuration.  Thanks Gopal  ---  org.hibernate.LazyInitializationException: could not initialize proxy - the owning Session was closed at org.hibernate.proxy.AbstractLazyInitializer.initialize(AbstractLazyInitializer.java:53) at org.hibernate.proxy.AbstractLazyInitializer.getImplementation(AbstractLazyInitializer.java:80) at org.hibernate.proxy.CGLIBLazyInitializer.intercept(CGLIBLazyInitializer.java:134) at com.manheim.dms.entity.security.vo.Role$$EnhancerByCGLIB$$4ad14d28.getActive(\) at com.manheim.dms.system.SecurityManager.buildProfile(SecurityManager.java:85) at com.manheim.dms.handler.AdminHandler.authenticate(AdminHandler.java:147) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:324) at com.cysive.framework.servlet.controller.ProxyRequestHandler.processRequest(ProxyRequestHandler.java:104) at com.cysive.framework.servlet.controller.Dispatcher.processAction(Dispatcher.java:1040) at com.cysive.framework.servlet.controller.Dispatcher.processRequest(Dispatcher.java:1081) at com.cysive.framework.servlet.controller.Dispatcher.doPost(Dispatcher.java:305) at javax.servlet.http.HttpServlet.service(HttpServlet.java:709) at javax.servlet.http.HttpServlet.service(HttpServlet.java:802) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:252) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:214) at org.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:104) at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:520) at org.apache.catalina.core.StandardContextValve.invokeInternal(StandardContextValve.java:198) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:152) at org.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:104) at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:520) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:137) at org.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:104) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:118) at org.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:102) at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:520) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) at org.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:104) at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:520) at org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:929) at org.apache.coyote.tomcat5.CoyoteAdapter.service(CoyoteAdapter.java:160) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:799) at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.processConnection(Http11Protocol.java:705) at org.apache.tomcat.util.net.TcpWorkerThread.runIt(PoolTcpEndpoint.java:577)  ---  ---  **Affects:** 1.2 RC2","closed","status: declined,","spring-projects-issues","2005-04-21T06:59:17Z","2019-01-13T22:51:55Z"
"","5449","referenceData() in AbstractFormController is never called. [SPR-721]","**[Frode Halvorsen](https://jira.spring.io/secure/ViewProfile.jspa?name=frodeh)** opened **[SPR-721](https://jira.spring.io/browse/SPR-721?redirect=false)** and commented  When using a controller based on AbstractFormController i would expect that the referenceData() method should be called right after the showForm() (as stated in the API-docs), but it doesn't seem to be called at all.   ---  **Affects:** 1.1.3","closed","status: declined,","spring-projects-issues","2005-02-16T21:08:56Z","2019-01-12T16:41:40Z"
"","5448","formBackingObject created even if sessionForm is set to true. [SPR-720]","**[Frode Halvorsen](https://jira.spring.io/secure/ViewProfile.jspa?name=frodeh)** opened **[SPR-720](https://jira.spring.io/browse/SPR-720?redirect=false)** and commented  When using a class based on SimpleFormController both to get the new form, and to handle the input. I log that the formBackingObject() is called every time I submit the form even if I have set the sessionForm to true.  like this :               no.song.polka.business.Portation         portation         p_26         true                  p_26       is the workflow-description not correct (for AbstractFormController) ?   ---  **Affects:** 1.1.3","closed","in: web,","spring-projects-issues","2005-02-16T20:37:08Z","2019-01-11T12:59:50Z"
"","5187","Potential NPE in UrlBasedViewResolver [SPR-458]","**[François Beausoleil](https://jira.spring.io/secure/ViewProfile.jspa?name=fbos)** opened **[SPR-458](https://jira.spring.io/browse/SPR-458?redirect=false)** and commented  Hi !  In setViewClass(), if the viewClass is null, an NPE will be thrown instead of the expected IllegalArgumentException.  End result is the same - context won't start.  But, the information will not be the same.  Attached is a test case + a fix.  I would have liked to make a patch against CVS HEAD, but CVS is down, so I can't.  This is against Spring 1.1.1.  Bye ! François   ---  **Affects:** 1.1.1  **Attachments:** - [UrlBasedViewResolver.java](https://jira.spring.io/secure/attachment/10312/UrlBasedViewResolver.java) (_5.12 kB_) - [UrlBasedViewResolverTests.java](https://jira.spring.io/secure/attachment/10311/UrlBasedViewResolverTests.java) (_523 bytes_)","closed","type: bug,","spring-projects-issues","2004-11-13T14:25:49Z","2004-11-13T20:01:48Z"
"","5446","AbstractWizardController should check for valid pages or at least report an error [SPR-718]","**[Francisco Hernandez](https://jira.spring.io/secure/ViewProfile.jspa?name=lagcisco)** opened **[SPR-718](https://jira.spring.io/browse/SPR-718?redirect=false)** and commented  if a page is in-correctly defined in pages[] there should be an error reported somewhere, currently I believe that task is left up to the RequestDispatcher to handle the page not found   ---  **Affects:** 1.1.4","closed","status: declined,","spring-projects-issues","2005-02-16T05:10:44Z","2019-01-12T16:41:41Z"
"","5520","AbstractWizardFormController with sessionForm=false NPE [SPR-793]","**[Francesco Marsoni](https://jira.spring.io/secure/ViewProfile.jspa?name=monsterjoe)** opened **[SPR-793](https://jira.spring.io/browse/SPR-793?redirect=false)** and commented  I know it's suggested to use AbstractWizardFormController with sessionForm=false. But sometimes I prefer to use it with sessionForm=false to avoid problems like sharing http session between 2 browser windows (really not a common problem) I updated recently from 1.1.1 to 1.1.5 and got a NPE. The problem is in this code fragment taken from method ModelAndView showPage(HttpServletRequest request, BindException errors, int page):  String pageAttrName = getPageSessionAttributeName(request);  call to function getPageSessionAttributeName(request) returns null with sessionForm=false:  protected String getPageSessionAttributeName() { return isSessionForm() ? getClass().getName() + "".PAGE."" + getCommandName() : null; }  So:  if (isSessionForm()) { request.getSession().setAttribute(pageAttrName, pageInteger); } request.setAttribute(pageAttrName, pageInteger);  at this line will be called setAttribute with pageAttrName=null. To fix this I just rebuilt spring with a modified of function getPageSessionAttribute:  protected String getPageSessionAttributeName() { return  getClass().getName() + "".PAGE."" + getCommandName(); }   ---  **Affects:** 1.1.5","closed","type: bug,","spring-projects-issues","2005-03-16T23:31:16Z","2005-03-25T01:40:59Z"
"","5126","JMX sandbox component supports only one bean per JmxMBeanAdapter [SPR-396]","**[Florin Duroiu](https://jira.spring.io/secure/ViewProfile.jspa?name=florin)** opened **[SPR-396](https://jira.spring.io/browse/SPR-396?redirect=false)** and commented  I am trying to expose spring beans using JMX. I am using the JmxBeanAdapter and the ""beans"" property to add individual beans to the map. Adding a single bean works fine but as soon as I add more than one, I start getting exceptions when browsing the JMX beans using a JMX browser. I believe that the issue is related to comment #2 here: http://opensource.atlassian.com/confluence/spring/display/DOC/Exposing+your+Beans  I have a work around this by adding one bean per adapter but I think this is not the desired behaviour.  florin   ---  **Affects:** 1.0.2","closed","type: bug,","spring-projects-issues","2004-10-15T01:27:29Z","2012-06-19T03:54:02Z"
"","5432","LocaleChangeInterceptor executing a redudant instruction if there is no parameter [SPR-704]","**[Fernando Martins](https://jira.spring.io/secure/ViewProfile.jspa?name=fmar)** opened **[SPR-704](https://jira.spring.io/browse/SPR-704?redirect=false)** and commented  I've just noticed the following code on LocaleChangeInterceptor:  LocaleResolver localeResolver = RequestContextUtils.getLocaleResolver(request); String newLocale = request.getParameter(this.paramName); if (newLocale != null) { LocaleEditor localeEditor = new LocaleEditor(); localeEditor.setAsText(newLocale); localeResolver.setLocale(request, response, (Locale) localeEditor.getValue()); }  That means that RequestContextUtils.getLocaleResolver(request) is being executed on EACH REQUEST (if you're using this interceptor of course), even tough it is only necessary when in fact there is a parameter for changing locale. Shouldn't it be inside the `if` ?   ---  **Affects:** 1.1.4","closed","type: enhancement,","spring-projects-issues","2005-02-10T23:55:26Z","2005-02-15T00:20:04Z"
"","5374","CookieLocaleResolver has no support for setting domain on Cookies [SPR-646]","**[Fernando Martins](https://jira.spring.io/secure/ViewProfile.jspa?name=fmar)** opened **[SPR-646](https://jira.spring.io/browse/SPR-646?redirect=false)** and commented  I have a usecase where I need to set domain on Cookies, so it would be helpfull if CookieLocaleResolver would have a settable property domain which than gets set on the cookies, when domain is not null.   ---  **Affects:** 1.1.3  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2005-01-20T23:23:46Z","2005-01-23T21:31:22Z"
"","5495","Cyclic references via ProxyFactoryBean throw an BeanCreationException [SPR-768]","**[Felix von Delius](https://jira.spring.io/secure/ViewProfile.jspa?name=fvdelius)** opened **[SPR-768](https://jira.spring.io/browse/SPR-768?redirect=false)** and commented  If You have a cyclic dependency between two components which are intercepted with a ProxyFactoryBean, an BeanCreationException is thrown. Without interceptors, the wireing works.  Here's an example of such a wireing:  \ \ \ \\\\ \ \ \\wireing.Bla\\ \ \ \loggingAdvice\ \ \ \  \ \ \ \\\\ \ \ \\wireing.Fasl\\ \ \ \loggingAdvice\ \ \ \  A workaround for this issue is to use the \ instead of the property-tag for the dependency.   ---  **Affects:** 1.1.5","closed","type: enhancement,","spring-projects-issues","2005-03-09T01:00:47Z","2012-06-19T03:54:03Z"
"","5482","Clarify UnsatisfiedDependencyException text for ambiguous constructor injection parameters [SPR-754]","**[Felix von Delius](https://jira.spring.io/secure/ViewProfile.jspa?name=fvdelius)** opened **[SPR-754](https://jira.spring.io/browse/SPR-754?redirect=false)** and commented  The exception text ""Did you specify the correct bean references as generic constructor arguments?"" does not clearly express, that the reason for the UnsatisfiedDependencyException is an ambiguousity of constructor parameters.  Probably it would be a good idea to prefix it with something like ""Ambiguous constructor argument types - did you specify the correct bean references as generic constructor arguments?"" (or something shorter)   ---  **Affects:** 1.1.4","closed","type: enhancement,","spring-projects-issues","2005-02-28T21:41:16Z","2005-03-03T21:54:51Z"
"","5655","getAsText not called in PropertyEditor after onSubmit invocation [SPR-935]","**[Fabrizio Giustina](https://jira.spring.io/secure/ViewProfile.jspa?name=fgiust)** opened **[SPR-935](https://jira.spring.io/browse/SPR-935?redirect=false)** and commented  Non sure if this is a bug or if I am doing something wrong, but I couldn't find anything on the documentation and I can't find any reason for this strange behaviour...  Using a FormController, with a custom property editor registered in initBinder(), the getAsText() method is not called if the onSubmit method returns to the same page.  Example:  - given a form page with a field mapped to a javabean, getAsTest() is initially called when the form is shown.  In my custom property editor a javabean is ""transformed"" and its id is returned, so the input box displays ""1"". Ok.  - I submit the form, and there are errors during validation:    - the setAsText() method is called before validation    - validation is performed (errors found)    - the getFormView() is used as destination    - the getAsText() method is called while displaying the form    - my input field still contains ""1"".    -> Ok, that's what I expected  - I submit the form, this time without errors:    - the setAsText() method is called before validation    - validation is performed (no errors found)    - the getSuccessView() is used as destination, getSuccessView() directs to the same page as getFormView() (I just want to display the form back with a message, allowing addictional modifications)    - the getAsText() method is NOT called while displaying the form    - my input field now contains ""org.something.Bean@1234343[1]"" (the toString representation of the bean).  This is absolutely not what I expected to see. The propertyEditor is registered but only the setAsText() method is used.  The status.value property, when no errors are found, just displays the object toString() and ignores the property editor. Since the property editor is correctly used when an error is found this seems pretty strange, but I couldn't find any way to make the form work as desired.  Is there any reason for this behavior? Can the use of property editor tweaked in some way or this is really a bug in the current (1.2-rc2) version?    ---  **Affects:** 1.2 RC2","closed","status: declined,","spring-projects-issues","2005-05-11T01:25:46Z","2019-01-12T16:41:22Z"
"","5552","Oracle 10g Jdbc thin driver  [SPR-826]","**[Fabio Grassi](https://jira.spring.io/secure/ViewProfile.jspa?name=fabio)** opened **[SPR-826](https://jira.spring.io/browse/SPR-826?redirect=false)** and commented  In version 10g of the Oracle thin driver, after calling a stored procedure that updates or insert some record, JdbcTemplate enters an endless loop.  Apparently the problem is that the callable statement getUpdateCount() returns the number of rows effected; at this point JdbcTemplate tries to extract result sets and enters an endless loop in the method retrieveResultSets.  This behaviour doesn't show up with previous version of the Oracle driver.   ---  **Affects:** 1.1.5","closed","status: declined,","spring-projects-issues","2005-03-28T02:01:42Z","2019-01-12T16:41:33Z"
"","5353","SqlReturnResultSet not thread safe and not reusable [SPR-625]","**[Fabio Grassi](https://jira.spring.io/secure/ViewProfile.jspa?name=fabio)** opened **[SPR-625](https://jira.spring.io/browse/SPR-625?redirect=false)** and commented  I have an Oracle stored procedure which returns a result set (ref cursor). I tried to access it through a StoredProcedure object with a parameter of class SqlReturnResultSet.  As the mapping between the result set columns and my POJO is not entirely trivial, I can't rely on the constructors based on a RowMapper so I use the one that takes a RowCallbackHandler as a parameter.  As the RowCallbackHandler is stateful and kept in an instance variable it turns out that the StoredProcedure is no more thread safe and, even worse, not reusable because result accumulate.  One things that would help to alleviate both problems would be a SqlReturnResultSet constructor that takes a factory of RowCallbackHandler (the constructor that takes a RowMapper in fact let the parameter itself behave like a factory).  Bye, Fabio   ---  **Affects:** 1.1.4","closed","type: enhancement,","spring-projects-issues","2005-01-14T00:22:54Z","2005-01-23T22:56:25Z"
"","5621","AbstractRefreshableTargetSource.getTargetClass() does not call getTarget() [SPR-894]","**[Fabian Gonzales](https://jira.spring.io/secure/ViewProfile.jspa?name=fabgo)** opened **[SPR-894](https://jira.spring.io/browse/SPR-894?redirect=false)** and commented  The getTargetClass() method of the org.springframework.beans.factory.dynamic.AbstractRefreshableTargetSource class accesses the ""currentTarget"" member variable directly, instead of calling getTarget().  ""currentTarget"" is initialized upon refresh only. When subclassing AbstractRefreshableTargetSource and calling markModified() to trigger a refresh upon initialization, getTargetClass() will still return null, because it doesn't trigger a refresh.  getTargetClass() is called by the Cglib2AopProxy constructor, which fails when it encounters the null value.  It is possible to work around this issue by subclassing getTargetClass() or explicitly calling refresh() after initialization, but I thought the behavior still qualifies as a minor bug.   ---  **Affects:** 2.0 M1","closed","in: core,","spring-projects-issues","2005-04-20T10:51:45Z","2005-04-20T18:47:41Z"
"","5480","AbstractBeanFactory.getType() ignores exceptions [SPR-752]","**[Fabian Gonzales](https://jira.spring.io/secure/ViewProfile.jspa?name=fabgo)** opened **[SPR-752](https://jira.spring.io/browse/SPR-752?redirect=false)** and commented  AbstractBeanFactory.getType() catches BeanCreationException, but does nothing except log a debug message.  This behavior completely hid an exception that occured in one of our bean factories in the afterPropertiesSet() method.  (We use a bean factory post processor to add TX support to our startup bean. The post processor issues a call to configurableListableBeanFactory.getBeansOfType(), causing the bean factories to be initialized, in order to do type checking.)   ---  **Affects:** 1.1.5","closed","in: core,","spring-projects-issues","2005-02-28T10:45:16Z","2005-03-21T00:25:16Z"
"","5284","MockHttpServletRequest add parameter uses hashtable - cannot multi params [SPR-555]","**[Evan Eustace](https://jira.spring.io/secure/ViewProfile.jspa?name=thepooka)** opened **[SPR-555](https://jira.spring.io/browse/SPR-555?redirect=false)** and commented  When creating a mock test with the web mock jar, using the class org.springframework.mock.web.MockHttpServletRequest, I found that the following does not have the expected result:  request.addParameter(""item"", ""val1""); request.addParameter(""item"", ""val2"");  A hashtable is being used in the source to hold the params, so the second one overwrites the first. The expected result was that request.getParameterValues(""item"") should return a String[] array with the two values that were added.  This prevents binding of String[] command params in the test code.  Forgive me if I am missing something.  Thanks.   ---  **Affects:** 1.1 RC2","closed","type: bug,","spring-projects-issues","2004-12-14T08:25:01Z","2004-12-18T22:30:16Z"
"","5125","freemarker macros don't support Hash options param [SPR-395]","**[Evan Eustace](https://jira.spring.io/secure/ViewProfile.jspa?name=thepooka)** opened **[SPR-395](https://jira.spring.io/browse/SPR-395?redirect=false)** and commented  I am using the ""formMultiSelect"" macro, and the docs in chapter 13 of the documentation suggest that you can pass a map object as the options parameter to the macro:  (http://www.springframework.org/docs/reference/view.html) 13.4.5.3. form input generation macros:  options: a Map of all the available values that can be selected from in the input field. The keys to the map represent the values that will be POSTed back from the form and bound to the command object. Map objects stored against the keys are the labels displayed on the form to the user and may be different from the corresponding values posted back by the form. Usually such a map is supplied as reference data by the controller. Any Map implementation can be used depending on required behaviour. For strictly sorted maps, a SortedMap such as a TreeMap with a suitable Comparator may be used and for arbitrary Maps that should return values in insertion order, use a LinkedHashMap or a LinkedMap from commons-collections.  In fact the options parameter to the formMultiSelect macro (and the other macros in spring.ftl) is treated as a sequence, and you get an error if you pass a hash type object to it.  I have overridden the formMultiSelect macro in my own template to support the options parameter as a map:       \ ${options[optionKey]}\ > \ > \ > \  ---  **Affects:** 1.1 RC2","closed","in: web,","spring-projects-issues","2004-10-14T07:08:29Z","2019-01-13T08:59:14Z"
"","4982","JtaTransactionManager don't resume EJB transaction marked for rollback [SPR-251]","**[Eugene Kuleshov](https://jira.spring.io/secure/ViewProfile.jspa?name=euxx)** opened **[SPR-251](https://jira.spring.io/browse/SPR-251?redirect=false)** and commented  Transaction resume exception on return from POJO wrapped with Spring's TransactionProxyFactoryBean with REQUIRES_NEW transaction attribute when original transaction marked for rollback. See sources attached.  Here is the stack trace for execution of the TxTestImpl session bean.  ---  doSomething() begin rollback=false increment()  \ \","closed","type: bug,","spring-projects-issues","2004-08-09T09:34:24Z","2019-01-13T22:54:30Z"
"","5832","PostBeanFactoryProcessor to find illegal singleton/prototype beans [SPR-1128]","**[Etienne Studer](https://jira.spring.io/secure/ViewProfile.jspa?name=etienne)** opened **[SPR-1128](https://jira.spring.io/browse/SPR-1128?redirect=false)** and commented  The SingletonCheckPostBeanFactoryProcessor class allows to find beans based on their interfaces they implement and classes they extend and to check whether some of these beans are 'falsely' defined as singletons/prototypes. This allows to detect 'wrong' bean declarations, which is helpful in projects with hundreds of beans being defined.  Sample Usage:  \ \ \ \sample.Foo\ \sample.Bar\ \ \ \ \ \sample.IXyz\ \ \ \   ---  **Affects:** 1.2.1  **Attachments:** - [SingletonCheckPostBeanFactoryProcessor.java](https://jira.spring.io/secure/attachment/10930/SingletonCheckPostBeanFactoryProcessor.java) (_4.18 kB_)","closed","type: enhancement,","spring-projects-issues","2005-07-13T01:55:51Z","2012-06-19T09:37:21Z"
"","5440","MockHttpServletRequest.getSession(true) does not always create a session [SPR-712]","**[Erwin Vervaet](https://jira.spring.io/secure/ViewProfile.jspa?name=klr8)** opened **[SPR-712](https://jira.spring.io/browse/SPR-712?redirect=false)** and commented  Try this code:  org.springframework.mock.web.MockHttpServletRequest request=new org.springframework.mock.web.MockHttpServletRequest();  javax.servlet.http.HttpSession session=request.getSession(true); session.invalidate();  System.out.println(request.getSession(true));  Erwin   ---  **Affects:** 1.1.4","closed","type: bug,","spring-projects-issues","2005-02-13T23:09:55Z","2005-02-14T00:03:10Z"
"","5405","Improve AbstractWizardFormController code so that validation can be prevented [SPR-677]","**[Erwin Vervaet](https://jira.spring.io/secure/ViewProfile.jspa?name=klr8)** opened **[SPR-677](https://jira.spring.io/browse/SPR-677?redirect=false)** and commented  Some people have run into problems trying to prevent the AbstractWizardFormController from validating certain requests. See for instance the follow forum post:  http://forum.springframework.org/viewtopic.php?t=3212  Although is is already possible to implement a working solution, you have to jump through some hoops to get there and end up with unelegant code.  The BaseCommandController has a suppressValidation() method to do exactly this kind of check, but it is never called by the AbstractWizardFormController since it sets validateOnBinding to ""false"".  I suggest the AbstractWizardFormController.processFormSubmission() method is changed so that it calls suppressValidation() to see if validation is necessary.  Erwin   ---  **Affects:** 1.1.3","closed","type: enhancement,","spring-projects-issues","2005-02-02T06:24:27Z","2005-02-21T00:02:29Z"
"","5219","Need to have a wrapper command when binding request values in the model [SPR-490]","**[Erwin Vervaet](https://jira.spring.io/secure/ViewProfile.jspa?name=klr8)** opened **[SPR-490](https://jira.spring.io/browse/SPR-490?redirect=false)** and commented  See http://forum.springframework.org/viewtopic.php?p=9062 for a discussion.  Erwin   ---  **Affects:** 1.1.2","closed","type: enhancement,","spring-projects-issues","2004-11-25T05:49:17Z","2005-07-19T20:33:53Z"
"","5201","Issue SPR-368 (AOP proxy creation breaks property initialisation) not fixed in 1.1.2  [SPR-472]","**[Erwin Vervaet](https://jira.spring.io/secure/ViewProfile.jspa?name=klr8)** opened **[SPR-472](https://jira.spring.io/browse/SPR-472?redirect=false)** and commented  See issue #5098, which should be reopened.  Erwin  ---  **Affects:** 1.1.2","closed","in: core,","spring-projects-issues","2004-11-17T06:19:49Z","2019-01-12T16:52:28Z"
"","5145","JavaDoc for ParameterizableViewController has lots of typos [SPR-415]","**[Erwin Vervaet](https://jira.spring.io/secure/ViewProfile.jspa?name=klr8)** opened **[SPR-415](https://jira.spring.io/browse/SPR-415?redirect=false)** and commented  The JavaDoc for the ParameterizableViewController has a lot of typos:  ""The advantage here is, that you're decoupling the controller and the view, letter the some the configuration determine (instead of the controller) the viewtechnology."" ????  ""An alternative to the ParameterizableViewController is of the MultiAction controllers, some of which allow the same behavior, but then for more views at in one controller.""  ????  Erwin   ---  **Affects:** 1.1.1","closed","type: enhancement,","spring-projects-issues","2004-10-20T23:32:58Z","2004-10-22T09:02:47Z"
"","5144","Binding problem with ServletRequestDataBinder [SPR-414]","**[Erwin Vervaet](https://jira.spring.io/secure/ViewProfile.jspa?name=klr8)** opened **[SPR-414](https://jira.spring.io/browse/SPR-414?redirect=false)** and commented  I noticed the following strange behaviour with the ServletRequestDataBinder: I have an object with a property called ""hTech"" of type ""HTech"". The HTech class has a String property called ""channel"". So you could do:  myObject.getHTech().setChannel(""foo"");  However, a request parameter named ""hTech.channel"" will not be mapped correctly. If you use a request parameter ""HTech.channel"", everything works like exprected.  Erwin   ---  **Affects:** 1.1.1","closed","status: declined,","spring-projects-issues","2004-10-20T23:25:24Z","2019-01-12T16:42:05Z"
"","5098","AOP proxy creation breaks property initialisation [SPR-368]","**[Erwin Vervaet](https://jira.spring.io/secure/ViewProfile.jspa?name=klr8)** opened **[SPR-368](https://jira.spring.io/browse/SPR-368?redirect=false)** and commented  Creation of a simple AOP proxy using the auto-proxy-creator breaks property initialisation for a bean where one constructor calls another constructor to set a member to a default value.  Check the attached source code for an example.  Erwin   ---  **Affects:** 1.1 final, 1.1.1  **Attachments:** - [bug.zip](https://jira.spring.io/secure/attachment/10264/bug.zip) (_1.52 kB_)  1 votes, 3 watchers","closed","in: core,","spring-projects-issues","2004-10-04T06:29:46Z","2005-02-02T20:53:09Z"
"","5084","JavaDoc out of sync with code in org.springframework.aop.target package [SPR-354]","**[Erwin Vervaet](https://jira.spring.io/secure/ViewProfile.jspa?name=klr8)** opened **[SPR-354](https://jira.spring.io/browse/SPR-354?redirect=false)** and commented  In the org.springframework.aop.target package, some JavaDoc is out of sync with the source code because of some class renaming. E.g.:  * CommonsPoolTargetSource class: JavaDoc says ""Jakarta Commons pooling implementation extending AbstractPoolingInvokerInterceptor"", which should be ""..AbstractPoolingTargetSource""  * PoolingConfig interface: JavaDoc says ""Config interface for a pooling invoker."", which should be ""..for a target source.""  ...  Erwin   ---  **Affects:** 1.1 final","closed","type: enhancement,","spring-projects-issues","2004-09-26T17:38:45Z","2004-09-27T01:02:44Z"
"","5572","Make AbstractSessionBean and method getSessionContext public [SPR-846]","**[Erwin Bolwidt](https://jira.spring.io/secure/ViewProfile.jspa?name=erwinb)** opened **[SPR-846](https://jira.spring.io/browse/SPR-846?redirect=false)** and commented  For use with acegi security, I'm writing a component that needs to access the SessionContext of a session bean from an aspect.  Preferably, this would work for both Stateless and Stateful session beans, so it makes most sense to target the class AbstractSessionBean. (I cannot use the interface javax.ejb.SessionBean, since it doesn't define getSessionContext, only setSessionContext.)  I can't target Spring's AbstractSessionBean though, because it is a package-only class. I can't think of a reason why this must be so, so I'm suggesting to make that class public.  Secondly, I need to call getSessionContext from a class that's not a subclass nor in the same package as Abstract(Stateless|Stateful|)SessionBean, nor a subclass of it. But getSessionContext is 'protected' (and 'final' as well, so subclasses can't make the method more visible).  I don't see a problem with making getSessionContext public; the classes in question is an EJB implementation class, so it is hidden from the caller of the EJB through the remote interface and container-generated stubs. Making it public is very useful for security-related aspects.    ---  **Affects:** 1.1.5","closed","type: enhancement,","spring-projects-issues","2005-04-03T21:00:58Z","2005-04-04T00:40:29Z"
"","5517","'prefix' and 'suffix' properties for InternalPathMethodNameResolver [SPR-790]","**[Erwin Bolwidt](https://jira.spring.io/secure/ViewProfile.jspa?name=erwinb)** opened **[SPR-790](https://jira.spring.io/browse/SPR-790?redirect=false)** and commented  The InternalPathMethodNameResolver is suitable in many circumstances IMO (especially RAD/prototyping), but I have a problem with the one-to-one translation of the path to a method name; I prefer all methods that can be invoked on a controller to have their name end in ""Handler"".  Generalizing this a bit, I added 'prefix' and 'suffix' properties to InternalPathMethodNameResolver. When these properties are not provided, the resolver works exactly as before.  Example:  \ \ \Handler\ \ \  The source code of the modified InternalPathMethodNameResolver.java is attached to this issue.    ---  **Affects:** 1.1.5  **Attachments:** - [InternalPathMethodNameResolver.java](https://jira.spring.io/secure/attachment/10592/InternalPathMethodNameResolver.java) (_2.86 kB_)","closed","type: enhancement,","spring-projects-issues","2005-03-16T02:23:54Z","2005-03-20T19:28:03Z"
"","5516","Add a cancelView to SimpleFormController [SPR-789]","**[Erwin Bolwidt](https://jira.spring.io/secure/ViewProfile.jspa?name=erwinb)** opened **[SPR-789](https://jira.spring.io/browse/SPR-789?redirect=false)** and commented  In a CRUD application, most simple forms don't need complicated workflow, but they do need a cancel button to abort the suggested operation. (where the suggested operation is something like 'update' or 'new').  I think it would make sense to add this functionality to the SimpleFormController.  In addition to the 'formView' and 'successView', it would have a 'cancelView'. When the 'cancel' button (a submit button named ""_cancel"", the same name as in the AbstractWizardFormController) is pressed, validation doesn't take place, and the cancelView is shown.  It would be an error to have a ""_cancel"" submit button in a form and no 'cancelView' property in the form controller.  I have implemented this functionality and am attaching the modified SimpleFormController.java to this issue.   ---  **Affects:** 1.1.5  **Attachments:** - [jira-spr789-add-cancelView-to-SimpleFormController.patch](https://jira.spring.io/secure/attachment/10792/jira-spr789-add-cancelView-to-SimpleFormController.patch) (_4.88 kB_) - [SimpleFormController.java](https://jira.spring.io/secure/attachment/10591/SimpleFormController.java) (_19.08 kB_)  6 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2005-03-16T01:59:45Z","2012-06-19T03:53:55Z"
"","5426","HEAD request support [SPR-698]","**[Erik Wiersma](https://jira.spring.io/secure/ViewProfile.jspa?name=erikw)** opened **[SPR-698](https://jira.spring.io/browse/SPR-698?redirect=false)** and commented  As observed by a forum user called f_kasper, a HEAD request is not supported by Spring.  The forum post can be found here: http://forum.springframework.org/viewtopic.php?t=2315&highlight=head    ---  **Affects:** 1.1.4  **Attachments:** - [HEAD_request_patch.txt](https://jira.spring.io/secure/attachment/10505/HEAD_request_patch.txt) (_6.38 kB_)","closed","type: enhancement,","spring-projects-issues","2005-02-08T06:55:07Z","2005-02-13T22:21:22Z"
"","5285","MockHttpServletResponse should flush the writer before getContentAsByteArray() and getContentAsString() [SPR-556]","**[Erik Jõgi](https://jira.spring.io/secure/ViewProfile.jspa?name=erik.jogi)** opened **[SPR-556](https://jira.spring.io/browse/SPR-556?redirect=false)** and commented  class: org.springframework.mock.web.MockHttpServletResponse  The methods getContentAsByteArray() and getContentAsString() assume that this.content contains all data. This is incorrect as the getWriter() method wraps this.content in a OutputStreamWriter and PrintWriter and either of those could be buffering.  I think the best way to fix it is to add this in the beginning of getContentAsByteArray() and getContentAsString(): if (this.writer != null) { this.writer.flush(); }    ---  **Affects:** 1.1.3","closed","type: bug,","spring-projects-issues","2004-12-14T17:18:05Z","2004-12-19T07:01:20Z"
"","5630","BeanWrapper : support for mapped properties of type ""map(key)"" [SPR-905]","**[Eric Ballet Baz](https://jira.spring.io/secure/ViewProfile.jspa?name=ericbb)** opened **[SPR-905](https://jira.spring.io/browse/SPR-905?redirect=false)** and commented  BeanWrapper currently support syntaxe of type ""map[key1]"" to access a mapped property. Please add support of syntaxe of type ""map(key)"" (for more compatibility with Struts)  To clarify my demand, I include an update of your tests, that should succeed :  package org.springframework.beans;  public class BeanWrapperTests extends TestCase { ... public void testReadableAndWritableForIndexedProperties() { ...  assertTrue(bw.isReadableProperty(""map(key1)"")); assertTrue(bw.isReadableProperty(""map(key1).name""));  assertTrue(bw.isWritableProperty(""map(key1)"")); assertTrue(bw.isWritableProperty(""map(key1).name"")); }  Thx for your great great work !   ---  **Affects:** 1.2 RC1  **Attachments:** - [spr905-BeanWrapperImpl.txt](https://jira.spring.io/secure/attachment/10690/spr905-BeanWrapperImpl.txt) (_2.62 kB_) - [spr905-BeanWrapperTests.txt](https://jira.spring.io/secure/attachment/10691/spr905-BeanWrapperTests.txt) (_14.55 kB_) - [spr905-PropertyAccessor.txt](https://jira.spring.io/secure/attachment/10692/spr905-PropertyAccessor.txt) (_868 bytes_)  2 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2005-04-25T19:31:41Z","2019-01-13T22:51:51Z"
"","5583","DelegatingRequestProcessor delegate exceptions handing [SPR-857]","**[Eric Ballet Baz](https://jira.spring.io/secure/ViewProfile.jspa?name=ericbb)** opened **[SPR-857](https://jira.spring.io/browse/SPR-857?redirect=false)** and commented  For the Struts extension, it would be nice if the DelegatingRequestProcessor and the DelegatingTilesRequestProcessor delegate exceptions handling to a bean (instance of org.apache.struts.action.ExceptionHandler) provided by the Spring Context. (Similar to Struts Action with DelegatingActionProxy)  It would add the possibility to proxy this ExceptionHandler, providing functionnality like tracing exceptions, sending mails on exception, retry etc ... without impacting application code !  I propose to include the following code in DelegatingRequestProcessor and the DelegatingTilesRequestProcessor :  /** * Override this method to delegate the exception handling to a bean  * provided by SRING  *   * `@see` org.apache.struts.action.RequestProcessor#processException(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, java.lang.Exception, org.apache.struts.action.ActionForm, org.apache.struts.action.ActionMapping)   */   protected ActionForward processException(HttpServletRequest request,   HttpServletResponse response,   Exception exception,   ActionForm form,   ActionMapping mapping)   throws IOException, ServletException {    // Is there a defined handler for this exception?   ExceptionConfig config = mapping.findException(exception.getClass());   if (config == null) {   log.warn(getInternal().getMessage(""unhandledException"", exception.getClass()));   if (exception instanceof IOException) {   throw (IOException) exception;   } else if (exception instanceof ServletException) {   throw (ServletException) exception;   } else {   throw new ServletException(exception);   }   }    // Use the configured exception handling   try {   // Patch to retrieve exception handler from SPRING   ExceptionHandler handler = getExceptionHandler(config);   return (handler.execute(exception, config, mapping, form, request, response));    } catch (Exception e) {   throw new ServletException(e);   }   }  /** * Return the delegate ExceptionHandler for the given config. The default * implementation determines a bean name from the given ExceptionConfig and * looks up the corresponding bean in the WebApplicationContext. * `@see` #determineExceptionHandlerBeanName *  * `@param` config the Struts ExceptionConfig * `@return` the delegate ExceptionHandler * `@throws` BeansException if thrown by WebApplicationContext methods   */   protected ExceptionHandler getExceptionHandler(ExceptionConfig config) throws BeansException {   WebApplicationContext wac = getWebApplicationContext();   String beanName = determineExceptionHandlerBeanName(config);   return (ExceptionHandler) wac.getBean(beanName, ExceptionHandler.class);   }  /** * Determine the name of the ExceptionHandler bean, to be looked up in * the WebApplicationContext. The default implementation takes the type of * the exception *  * `@param` config the Struts ExceptionConfig   */   protected String determineExceptionHandlerBeanName(ExceptionConfig config) {   return config.getType();   }  Then simply modify your struts-config.xml like this :  \ \ \  and add a bean in your action-servlet.xml  \  \  Then you can have implementation for this ExceptionHandler that build an error message using keys, the same ways DefaultBindingErrorProcessor does ! and so have a default message for each exception and the ability to refine the message ...  java.lang.Throwable = Defaul  message java.lang.Exception = Functionnal exception java.lang.RuntimeException = Technical exception java.lang.ClassNotFoundException = Configuration exception message org.springframework.dao.DataAccessException = Pb with the db  etc ...    ---  **Affects:** 1.2 RC1","closed","type: enhancement,","spring-projects-issues","2005-04-05T19:20:10Z","2007-03-30T05:10:15Z"
"","5502","DataBinder tries to bind required fields with null value resulting in two errors [SPR-775]","**[Eric Ballet Baz](https://jira.spring.io/secure/ViewProfile.jspa?name=ericbb)** opened **[SPR-775](https://jira.spring.io/browse/SPR-775?redirect=false)** and commented  DataBinder tries to bind required fields with null value resulting in two FieldError .  For exemple :  public class TargetBean { private Character _character = null;      public Character getCharacter() {         return _character;     }          public void setCharacter(Character character) {         _character = character;     }  }  If we try to bind a request where character=null then two FieldError will be generated : one of type 'required' and one of type 'typeMismatch'  Same problem for example with Boolean, Byte ...  In the DataBinder code, it would be nice if required fields with null value were removed from the list of properties to bind.    ---  **Affects:** 1.1.5","closed","type: enhancement,","spring-projects-issues","2005-03-11T01:28:46Z","2005-03-20T04:13:31Z"
"","5206","Not compatible with JDK 1.3 [SPR-477]","**[Eric Ballet Baz](https://jira.spring.io/secure/ViewProfile.jspa?name=ericbb)** opened **[SPR-477](https://jira.spring.io/browse/SPR-477?redirect=false)** and commented  Class org.springframework.core.io.AbstractPathResolvingPropertyEditor is not compatible with JDK 1.3, because it use method StringBuffer.indexOf at line 55, which is a method only available in JDK 1.4   ---  **Affects:** 1.1.2","closed","in: core,","spring-projects-issues","2004-11-19T02:50:24Z","2004-11-20T01:25:17Z"
"","5787","AbstractSpringContextTests : setDirty must close context before removing it [SPR-1082]","**[Eric Ballet Baz](https://jira.spring.io/secure/ViewProfile.jspa?name=ericbb)** opened **[SPR-1082](https://jira.spring.io/browse/SPR-1082?redirect=false)** and commented  In class org.springframework.test.AbstractSpringContextTests, method setDirty must close context before removing it from the Map to avoid heavy resources usage and potential lack of them : connexion pool, memory ...  Updated code could look like this :  protected void setDirty(String[] locations) { ConfigurableApplicationContext ctx = (ConfigurableApplicationContext) contextKeyToContextMap.get(contextKeyString(locations)); if (ctx != null) { ctx.close(); } contextKeyToContextMap.remove(contextKeyString(locations)); }  Thanks Eric Ballet Baz   ---  **Affects:** 1.1.2","closed","type: enhancement,","spring-projects-issues","2005-06-27T19:55:55Z","2005-06-29T05:21:46Z"
"","5382","HibernateTemplate.checkWriteOperationAllowed > NullPointerException [SPR-654]","**[Emmanuel Boudrant](https://jira.spring.io/secure/ViewProfile.jspa?name=eboudrant)** opened **[SPR-654](https://jira.spring.io/browse/SPR-654?redirect=false)** and commented  I have this exception when I try to update an entity, it seem the session object passed in the HibernateCallback is null :  java.lang.NullPointerException at org.springframework.orm.hibernate.HibernateTemplate.checkWriteOperationAllowed(Lnet.sf.hibernate.Session;)V(HibernateTemplate.java:954) at org.springframework.orm.hibernate.HibernateTemplate$15.doInHibernate(Lnet.sf.hibernate.Session;)Ljava.lang.Object;(HibernateTemplate.java:362) at org.springframework.orm.hibernate.HibernateTemplate.execute(Lorg.springframework.orm.hibernate.HibernateCallback;)Ljava.lang.Object;(HibernateTemplate.java:200) at org.springframework.orm.hibernate.HibernateTemplate.update(Ljava.lang.Object;)V(HibernateTemplate.java:360) at com.monitoring.dao.impl.BsContractDaoImpl.update(Lcom.monitoring.BsContract;)V(BsContractDaoImpl.java:286)  Here the JTA configuration :                                                                 ---  **Affects:** 1.1.1  **Issue Links:** - #5366 SessionFactoryUtils.getSession(..) before PROPAGATION_REQUIRED (_**""duplicates""**_)","closed","type: bug,","spring-projects-issues","2005-01-25T03:30:23Z","2019-01-11T12:51:19Z"
"","4985","*.hibernate.LocalSessionFactoryBean doesn't trim spaces for props [SPR-254]","**[Emmanuel Boudrant](https://jira.spring.io/secure/ViewProfile.jspa?name=eboudrant)** opened **[SPR-254](https://jira.spring.io/browse/SPR-254?redirect=false)** and commented  Like the issue #4823, trim the props values when the context is know (here this is some filenames).           	     		     			     				com/foo/BsContract.hbm.xml     			     			     				com/foo/BsBook.hbm.xml     			     			     				com/foo/MurexContract.hbm.xml     			     		     	     	     		     			     				net.sf.hibernate.dialect.OracleDialect     			     		     	     	     		     	       In this case we have the exception :  java.io.FileNotFoundException: Could not open class path resource [ com/foo/BsContract.hbm.xml ]  Thx, -emmanuel  ---  **Affects:** 1.0.2","closed","type: bug,","spring-projects-issues","2004-08-10T03:21:37Z","2019-01-11T13:27:16Z"
"","5383","Upgrade the Spring Mock servlet API to Servlet Spec 2.4 [SPR-655]","**[Emil Marceta](https://jira.spring.io/secure/ViewProfile.jspa?name=emil)** opened **[SPR-655](https://jira.spring.io/browse/SPR-655?redirect=false)** and commented  It should be easy to upgrade the existing spring servlet mock and maintain the vertical compatibility.  The change will then synch the Servlet API with Tomcat5, Jetty and others.  Servlet API 2.3 - 2.4 diff  The ServletRequest interface (and the ServletRequestWrapper class) adds four new methods in Servlet 2.4: - getRemotePort(): Returns the IP source port of the client or last proxy that sent the request - getLocalName(): Returns the host name of the IP interface on which the request was received - getLocalAddr(): Returns the IP address of the interface on which the request was received - getLocalPort(): Returns the IP port number of the interface on which the request was received  Thanks, Emil   ---  **Affects:** 1.1.3","closed","type: enhancement,","spring-projects-issues","2005-01-25T05:12:52Z","2005-02-15T22:55:02Z"
"","5340","Allow specifying registry socket factories in RmiServiceExporter and RmiProxyFactoryBean [SPR-612]","**[Emil Marceta](https://jira.spring.io/secure/ViewProfile.jspa?name=emil)** opened **[SPR-612](https://jira.spring.io/browse/SPR-612?redirect=false)** and commented  In addition to specifying client and server socket factories the registry socket factories should be allowed to be set in the RmiServiceExporter and RmiProxyFactoryBean. This is an important property, and without it it is not possible to set the same TCP listen ports for the registry and the service to be exported (the RMI registry is basically a well known service).  Currently the workaround I'm using is to extend RmiServiceExporter and RmiProxyFactoryBean to allow specifying the ssl socket factories over the same port for the registry and the services.  Refer to the JDK class LocateRegistry and its methods:  public static Registry getRegistry(String host, int port, RMIClientSocketFactory csf) throws RemoteException and  public static Registry createRegistry(int port, RMIClientSocketFactory csf, RMIServerSocketFactory ssf) throws RemoteException  Thanks, em   ---  **Affects:** 1.1.3","closed","type: enhancement,","spring-projects-issues","2005-01-11T16:08:53Z","2006-05-30T20:39:12Z"
"","5338","NPE in MockHttpServletRequest#getHeaders [SPR-610]","**[Emil Marceta](https://jira.spring.io/secure/ViewProfile.jspa?name=emil)** opened **[SPR-610](https://jira.spring.io/browse/SPR-610?redirect=false)** and commented  MockHttpServletRequest#getHeaders(String name) NPEs if the given header has not been set previously. The emtpy enumeraiton should have been returned instead.   ---  **Affects:** 1.1.3","closed","type: bug,","spring-projects-issues","2005-01-11T05:28:03Z","2005-01-11T06:58:27Z"
"","5330","BeanNameAutoProxyCreator silent when referencing non-existent bean [SPR-602]","**[Emil Marceta](https://jira.spring.io/secure/ViewProfile.jspa?name=emil)** opened **[SPR-602](https://jira.spring.io/browse/SPR-602?redirect=false)** and commented  If the BeanNameAutoProxyCreator references a non existent bean in its 'beanNames' list, it silently ignores it.  Throwing the NoSuchBeanDefinitionException in such case is probably what the BeanNameAutoProxyCreator should have done.  Best,  emil   ---  **Affects:** 1.1.3","closed","status: declined,","spring-projects-issues","2005-01-08T08:14:01Z","2019-01-12T16:41:53Z"
"","5103","ClassCastException with ProxyFactoryBean that implemets ApplicationListener [SPR-373]","**[Emil Marceta](https://jira.spring.io/secure/ViewProfile.jspa?name=emil)** opened **[SPR-373](https://jira.spring.io/browse/SPR-373?redirect=false)** and commented  A bean definition that implements FactoryBean and the ApplicationListener interfaces results in the ClassCastException during initialization.  The ClassCastException is triggered by the AbstractApplicationContext#refreshListeners() where the getBeansOfType(ApplicationListener.class, true, false) is requested. That query should filter out the FactoryBean beans (third parameter 'false') but the FactoryBean implementations get returned.  This looks it is caused by the code in the DefaultListableBeanFactory# getBeansOfType(Class type, boolean includePrototypes, boolean includeFactoryBeans) where the code below does not check if the FactoryBean instances are excluded.  String[] beanNames = getBeanDefinitionNames(type); Map result = new HashMap(); for (int i = 0; i < beanNames.length; i++) { if (includePrototypes || isSingleton(beanNames[i])) { try { result.put(beanNames[i], getBean(beanNames[i])); }...  Best Regards, Emil Marceta   ---  **Affects:** 1.1.1","closed","in: core,","spring-projects-issues","2004-10-06T06:38:54Z","2004-10-09T20:56:15Z"
"","5048","NullPointerException thrown by AbstractSlsbInvokerInterceptor.create [SPR-318]","**[Elroy Parkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=parks_za)** opened **[SPR-318](https://jira.spring.io/browse/SPR-318?redirect=false)** and commented  I'm using SimpleRemoteStatelessSessionProxyFactoryBeanto access a SLSB in a different EAR on Websphere 5.1. Due to an issue with caching homes when using WebSphere, I have the following setting (new in Spring 1.1, I believe) in my spring config file for the SimpleRemoteStatelessSessionProxyFactoryBean:  \ 	\false\ \  When calling a method on the proxy, Spring succesfully looks up the home interface in JNDI, but a NullPointerException is thrown when spring tries to create the bean.  The offending code is listed below (from the 1.1 findal distro) - my comments in ###'s.  AbstractSlsbInvokerInterceptor.java lines 166-179:  protected Object create() throws NamingException, InvocationTargetException { try { Object home = getHome(); Method createMethod = this.createMethod; if (createMethod == null) { createMethod = getCreateMethod(home); 1. Need: this.createMethod = createMethod here...###    }    // invoke cached EJB home object 2. Otherwise we get NullPointerException at this line...###    return this.createMethod.invoke(home, null);    }    catch (IllegalAccessException ex) {    throw new AspectException(""Could not access EJB home create()method"", ex);    }    }    ---  **Affects:** 1.1 final","closed","in: core,","spring-projects-issues","2004-09-08T00:55:28Z","2004-09-17T01:17:39Z"
"","4950","postProcessBeforePopulation [SPR-219]","**[Eike Stepper](https://jira.spring.io/secure/ViewProfile.jspa?name=stepper)** opened **[SPR-219](https://jira.spring.io/browse/SPR-219?redirect=false)** and commented  it would be helpful to have an additional postProcess method to BeanPostProcessor that is run before calling the bean setters in populateBean():  Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException;  i assume, that such a method would, for example, allow the AppCtx to be passed in and used in a setter's code.    ---  2 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2004-07-14T15:46:41Z","2008-01-07T23:04:32Z"
"","4949","non-refreshing ApplicationContext ctor [SPR-218]","**[Eike Stepper](https://jira.spring.io/secure/ViewProfile.jspa?name=stepper)** opened **[SPR-218](https://jira.spring.io/browse/SPR-218?redirect=false)** and commented  it would be very helpful to have an additional ctor on ApplicationContext, that doesn't automatically refresh.  that would enable derived classes to introduce customized behaviour before beans are created. i need it to give the context a name that beans might query during initialization and don't like to modify the spring sources after each update.  currently i help myself with:  public FileSystemXmlApplicationContext( String[] configLocations, ApplicationContext parent, boolean withRefresh) throws BeansException { super(parent); this.configLocations = configLocations; if (withRefresh) refresh(); }    ---  2 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2004-07-14T15:42:51Z","2004-07-19T07:23:00Z"
"","5866","HibernateTemplate.load does not throw ObjectRetrievalFailureException [SPR-1164]","**[Eduardo Rocha](https://jira.spring.io/secure/ViewProfile.jspa?name=eduardorocha)** opened **[SPR-1164](https://jira.spring.io/browse/SPR-1164?redirect=false)** and commented  I have a test similar with HibernateTemplateTests, but not using mocks for Hibernate classes, but concrete classes. I have this test:  1 try { 2    Piloto piloto = dao.findById(1); 3    fail(""piloto obtido=["" + piloto.toString() + ""]""); 4 } catch (ObjectRetrievalFailureException e) { 5     assertEquals(1, e.getIdentifier()); 6     assertEquals(Piloto.class, e.getPersistentClass()); 7 }  for the code:  public Piloto findById(int id) { return (Piloto) getHibernateTemplate().load(Piloto.class, id); }  The database is empty.  The test fails AFTER findByid (#2), because the dao seems to use lazy loading, and an exception is throw when a call is made to ""piloto.toString()"" (#3):  org.hibernate.ObjectNotFoundException: No row with the given identifier exists: [dominio.Piloto#1] at org.hibernate.ObjectNotFoundException.throwIfNull(ObjectNotFoundException.java:27) at org.hibernate.event.def.DefaultLoadEventListener.load(DefaultLoadEventListener.java:121) at org.hibernate.event.def.DefaultLoadEventListener.onLoad(DefaultLoadEventListener.java:78) at org.hibernate.impl.SessionImpl.immediateLoad(SessionImpl.java:649) at org.hibernate.proxy.AbstractLazyInitializer.initialize(AbstractLazyInitializer.java:60) at org.hibernate.proxy.AbstractLazyInitializer.getImplementation(AbstractLazyInitializer.java:85) at org.hibernate.proxy.CGLIBLazyInitializer.intercept(CGLIBLazyInitializer.java:131) at br.com.erocha.formula.dominio.Piloto$$EnhancerByCGLIB$$4514e186.toString(\) at br.com.erocha.formula.infraestrutura.dao.hibernate.HibernatePilotoDaoImplTest.testFindByIdPilotoInexistente(HibernatePilotoDaoImplTest.java:113) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) at java.lang.reflect.Method.invoke(Unknown Source) at junit.framework.TestCase.runTest(TestCase.java:154) at junit.framework.TestCase.runBare(TestCase.java:127) at junit.framework.TestResult$1.protect(TestResult.java:106) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.framework.TestResult.run(TestResult.java:109) at junit.framework.TestCase.run(TestCase.java:118) at junit.framework.TestSuite.runTest(TestSuite.java:208) at junit.framework.TestSuite.run(TestSuite.java:203) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)    ---  **Affects:** 1.2.1","closed","in: core,","spring-projects-issues","2005-07-21T14:03:39Z","2019-01-12T16:40:58Z"
"","4986","java.lang.NoClassDefFoundError on redeploy [SPR-255]","**[Dustin Woods](https://jira.spring.io/secure/ViewProfile.jspa?name=mickeys6)** opened **[SPR-255](https://jira.spring.io/browse/SPR-255?redirect=false)** and commented  Was using 1.1rc1 and was getting NoClassDefFoundError in AbstractAutowireCapableBeanFactory extends AbstractBeanFactory but found that this was fixed in the current CVS version.  After building what's in CVS I get one more NoClassDefFoundError in AbstractApplicationContext which went away with similar code.      static {     	ContextClosedEvent.class.getName();     }    ---  **Affects:** 1.1 RC1","closed","in: core,","spring-projects-issues","2004-08-10T13:45:16Z","2004-08-11T03:07:57Z"
"","4929","DB2 UDB for AS/400 Not Detected As DB2 in SQLErrorCodesFactory [SPR-198]","**[Dustin Bruzenak](https://jira.spring.io/secure/ViewProfile.jspa?name=dbruzenak)** opened **[SPR-198](https://jira.spring.io/browse/SPR-198?redirect=false)** and commented  When connecting to an iSeries using the IBM DB2 drivers, the SQLErrorCodes object in SQLErrorCodesFactory is not detected as a version of DB2 and is set to null.  This appears to be because the version 6 drivers return ""DB2 UDB for AS/400"" on the dbmdInfo.get(""DatabaseProductName"") call (SQLErrorCodesFactory, line 190). The check on line 193 of the same file references responses beginning with ""DB2/"" as DB2 and thus ignores this response.   ---  **Affects:** 1.0.2","closed","type: bug,","spring-projects-issues","2004-06-29T08:38:06Z","2004-07-23T00:56:25Z"
"","5709","Hardcoded locations in Petclinic /db/build.xml [SPR-998]","**[Duncan Mills](https://jira.spring.io/secure/ViewProfile.jspa?name=drmills)** opened **[SPR-998](https://jira.spring.io/browse/SPR-998?redirect=false)** and commented  The main ant build file for the PetClinic demo externalises the location of the spring.root making it relitivley simple to build a version of Petclinic outside of samples directory and the full Spring Source tree. However, the petclinic/db/build.xml which is called from the main setupDB task does not repect the spring.root and always assumes that the  HSQL or MySQL drivers will be found at the relative location of ""../../../lib"" to the /db directory which may not be the case if the sample has been cloned to a separate location.   ---  **Affects:** 1.2.1","closed","type: bug,","spring-projects-issues","2005-05-31T23:29:28Z","2019-01-13T22:51:35Z"
"","5730","ServletRequestBindingException in PetClinic [SPR-1022]","**[Duncan Mills](https://jira.spring.io/secure/ViewProfile.jspa?name=drmills)** opened **[SPR-1022](https://jira.spring.io/browse/SPR-1022?redirect=false)** and commented  From the Owner Information Screen the various buttons all raise variants of the error: Required int parameter 'ownerId' is not present org.springframework.web.bind.ServletRequestBindingException: Required int parameter 'ownerId' is not present at org.springframework.web.bind.RequestUtils$ParameterParser.validateRequiredParameter(RequestUtils.java:521)  When in fact the parameter is visible on the URL. To reproduce: 1) Download an build the 1.2.1 distro. 2) Run> build warfile from the petclinic directory and deploy that to your container. 3) Start the HSQL server    4)Run the PetClinic start page    5)Choose Find Owner from the menu    6)enter Coleman into the Last Name field & press Find Owners    You'll then get one error:    org.springframework.orm.ObjectRetrievalFailureException: Object of class [org.springframework.samples.petclinic.Owner] with identifier [0]    even though the URL above has ?ownerId=6 4) Or if you just press Find Owners with no parameters in the above screen, then drill down to any owner to get to the owner.htm screen 5) Press ""Edit Owner"" here and you get:    * Root cause is: Required int parameter 'ownerId' is not present org.springframework.web.bind.ServletRequestBindingException: Required int parameter 'ownerId' is not present at org.springframework.web.bind.RequestUtils$ParameterParser.validateRequiredParameter(RequestUtils.java:521)    Again with the selected OwnerId visible on the URL.  I've tested this with the TopLink and JDBC impls and it's the same    ---  **Affects:** 1.2.1","closed","","spring-projects-issues","2005-06-06T23:12:59Z","2019-01-11T18:35:09Z"
"","5732","How do i translate korean Spring reference document..? [SPR-1024]","**[DongGuk Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=fromm0)** opened **[SPR-1024](https://jira.spring.io/browse/SPR-1024?redirect=false)** and commented  Hi.. My name is DongGuk Lee korean java developer and Spring framework user  I want to translate spring framework reference into korean Do you have translating document format..? or Do you use translating document management system..?   --- No further details from [SPR-1024](https://jira.spring.io/browse/SPR-1024?redirect=false)","closed","","spring-projects-issues","2005-06-07T12:27:26Z","2019-01-11T18:35:23Z"
"","5568","Custom property editor from parent factory is ignored in child factory [SPR-842]","**[Dominik Roblek](https://jira.spring.io/secure/ViewProfile.jspa?name=dominikr)** opened **[SPR-842](https://jira.spring.io/browse/SPR-842?redirect=false)** and commented  In an XML resource I registered a custom property editor using bean CustomEditorConfigurer. This custom editor is available in registered with an instance of ClassPathXmlApplicationContext bean factory and it works correctly for beans defined in the same bean factory.  The problem appears when I define a new XmlBeanFactory bean factory, which has ClassPathXmlApplicationContext bean factory set as the parent. The customer editor registered with parent bean factory is not available for beans defined in this new XmlBeanFactory and for this reason the creation of new XmlBeanFactory fails.  I think there is something wrong with the situation since by my opinion custom editors should be inherited, too.   ---  **Affects:** 1.2 RC1","closed","type: enhancement,","spring-projects-issues","2005-03-31T21:34:54Z","2005-03-31T23:24:15Z"
"","5518","""global forwards"" for Spring framework [SPR-791]","**[Dolan Halbrook](https://jira.spring.io/secure/ViewProfile.jspa?name=dhalbrook)** opened **[SPR-791](https://jira.spring.io/browse/SPR-791?redirect=false)** and commented  Originally posted here: http://forum.springframework.org/viewtopic.php?p=16224#16224  I've been converting an app from Struts to Sping MVC since I'm using Spring for everything else anyways Smile One thing I miss from Struts is ""global forwards"". From what i've read, there are others that miss this too. So, I whipped up this little class which extends SimpleUrlHandlerMapping. Feel free to use it and/or improve it.  Basically it allows any view beans associated with a given ViewResolver (I happen to use XmlViewResolver, so in my case any view beans defined on views.xml) to be substituted for path names, and those view names will be exposed in an ""aliasMap"" with the associated urls from these views. In this manner, one simply has to access the ""aliasMap"" in the views (either by exposing the Context, then the HandlerMapping, then the Map, or pass it along in the model, or export it directly to the app context. I'm still weighing which one I'll end up using.  The existing functionality of SimpleUrlHandlerMapping works fine for existing paths, so you can mix and match. Code is below:  Enjoy, Dolan  \ public class AliasHandlerMapping extends AbstractUrlHandlerMapping implements InitializingBean { private final Map aliasMap = new HashMap(); private final Map urlMap = new HashMap(); private ViewResolver viewResolver; public void afterPropertiesSet() throws ClassNotFoundException { if (viewResolver == null) throw new ClassNotFoundException(""ViewResolver is null""); } /** * Set a Map with URL paths as keys and handler beans as values. * Convenient for population with bean references. * \Supports direct URL matches and Ant-style pattern matches. * For syntax details, see the PathMatcher class. *  * `@param` urlMap map with URLs as keys and beans as values * `@see` org.springframework.util.PathMatcher   */   public void setUrlMap(Map urlMap) {   this.urlMap.putAll(urlMap);   }   /** * Map URL paths to handler bean names. * This the typical way of configuring this HandlerMapping. * \Supports direct URL matches and Ant-style pattern matches. * For syntax details, see the PathMatcher class. *  * `@param` mappings properties with URLs as keys and bean names as values * `@see` org.springframework.util.PathMatcher   */   public void setMappings(Properties mappings) {   this.urlMap.putAll(mappings);   }   /** * This view resolver is used to resolve the ""alias"" views. *  * `@param` viewResolver   */   public void setViewResolver(ViewResolver viewResolver) {   this.viewResolver = viewResolver;   }   /** * Expose alias map so application can use ""global forwards"" in view. *  * `@return`   */   public Map getAliasMap() {   return aliasMap;   }   public void initApplicationContext() throws BeansException {   if (this.urlMap.isEmpty()) {   logger.info(""Neither 'urlMap' nor 'mappings' set on SimpleUrlHandlerMapping"");   } else {   Iterator itr = new LinkedHashSet(this.urlMap.keySet()).iterator();   while (itr.hasNext()) {   String url = (String) itr.next();   try {   View view = viewResolver.resolveViewName(url, Locale.getDefault());   if (view != null && view instanceof AbstractUrlBasedView) {   url = ((AbstractUrlBasedView) view).getUrl();   String alias = ((AbstractUrlBasedView) view).getBeanName();   this.aliasMap.put(alias, url);   this.urlMap.put(url, this.urlMap.remove(alias));   }   } catch (Exception e) {   logger.warn(""Couldn't resolve view"");   }   Object handler = this.urlMap.get(url);   // prepend with slash if it's not present   if (!url.startsWith(""/"")) {   url = ""/"" + url;   }   registerHandler(url, handler);   }   }   }   }   \  From views.xml:  \ \ \ \ \ \/index.html\ \ \ \  From spring-servlet.xml:  \ \ \ \ \ \ \ \eventsController\ \eventsController\ \eventsController\ \ \ \ \ PS: this is not yet internationalized (locale-aware). I'll leave it up to someone else to handle that issue...  ---  No further details from [SPR-791](https://jira.spring.io/browse/SPR-791?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-03-16T03:20:46Z","2019-01-13T08:58:18Z"
"","5322","Create Axis-specific JaxRpcServicePostProcessor for auto bean mapping registration [SPR-594]","**[Dmitriy Kopylenko](https://jira.spring.io/secure/ViewProfile.jspa?name=dmitriy)** opened **[SPR-594](https://jira.spring.io/browse/SPR-594?redirect=false)** and commented  Axis-specific JaxRpcServicePostProcessor that attempts to detect the JavaBeans it needs to register by inspecting the service interface's return types and parameter types for each method. Nested version attempts to find beans nested within JavaBeans and register them also. It is currently designed to ignore any java.* or javax.* class. It also assumes that the types are JavaBeans. It does not actually check. A more sophisticated version would be able to check if a class was a valid JavaBean and only register valid JavaBeans.  Also allows you to specify a list of JavaBeans to register manually.  This needs to be here in case one of the parameters to a method is an interface and you need to register the implementing class.   ---  **Affects:** 1.1.4  **Attachments:** - [NestedJavaBeanMappingServicePostProcessor.java](https://jira.spring.io/secure/attachment/10413/NestedJavaBeanMappingServicePostProcessor.java) (_4.34 kB_)  2 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2005-01-05T00:34:17Z","2012-06-19T03:54:06Z"
"","4895","Create a notion of ""Warnings"" [SPR-163]","**[Dmitriy Kopylenko](https://jira.spring.io/secure/ViewProfile.jspa?name=dmitriy)** opened **[SPR-163](https://jira.spring.io/browse/SPR-163?redirect=false)** and commented  There is a notion of Errors , so during validation there might be some property values rejected. We treat Errors as critical e.g. in Controllers after validation we check Errors collection and if not empty we **DO NOT** proceed (invoke the middle tier). There are some use cases however that state - some validations should be treated as **WARNINGS** e.g. if the rule is not satisfied, just display a warning message to the user, but still proceed with the workflow.  I'm not sure if that's been solved already, but in any case, would be nice to create a Warnings  to distinguish between those to concepts (Errors -> do not proceed, Warnings -> still proceed)  - Dmitriy.  ---  **Affects:** 1.1 RC1  **Issue Links:** - #6123 Expand Errors object to be a Messages object (_**""is duplicated by""**_)  22 votes, 15 watchers","closed","has: votes-jira,","spring-projects-issues","2004-06-10T02:56:21Z","2019-01-11T13:12:21Z"
"","5036","JtaTransactionManager and UserTransaction [SPR-306]","**[Dmitri Maximovich](https://jira.spring.io/secure/ViewProfile.jspa?name=maximdim)** opened **[SPR-306](https://jira.spring.io/browse/SPR-306?redirect=false)*** and commented  In current implementation of org.springframework.transaction.jta.JtaTransactionManager in afterPropertiesSet() method there is a code to check of UserTransaction  object also implements TransactionManager. I think that this check should be either removed or made conditional (say dependant on another property 'useTransactionManager' or similar). Current behaviour is undesired in containers where UserTransaction object also implements TransactionManager and JTA TransactionManager implementation is broken (for example suspend/resume issues in WLS 7 as described in #4982). In such case it would be beneficial instead of injecting TransactionManager inject UserTransaction to willingly make doResume() and doSuspend() methods throw exception rather than 'auto discovering' TransactionManager through UserTransaction and using it.  The result will be more clean, 'fail-fast' approach that prevents application from using (broken) resume/suspend functionality where this is the case.  ---  **Affects:** 1.1 RC2","closed","type: enhancement,","spring-projects-issues","2004-09-01T06:01:24Z","2019-01-11T14:03:33Z"
"","5149","Must define id for bean that has a parent attribute. [SPR-419]","**[Dino](https://jira.spring.io/secure/ViewProfile.jspa?name=hucmuc)** opened **[SPR-419](https://jira.spring.io/browse/SPR-419?redirect=false)** and commented  Should not need to define an id for a bean if it has a parent attribute (if the parent attribute is not used then the bean does not require the id attribute). Here is the xml file:  \ \ \ \        \ \  \   \ \   \ \   \  \ \ \ \ \ \ \ \   ---  **Affects:** 1.1.1","closed","type: bug,","spring-projects-issues","2004-10-23T10:54:15Z","2004-10-24T22:06:32Z"
"","4954","Add method to access current view name in AbstractWizardFormController [SPR-223]","**[Dickerns Israel](https://jira.spring.io/secure/ViewProfile.jspa?name=springdoctor@yahoo.com)** opened **[SPR-223](https://jira.spring.io/browse/SPR-223?redirect=false)** and commented  Adding a getCurrentViewName() would make the the controller more flexible.  In my current spring application, I have subclassed SimpleFormController and MultiActionController to create base controller classes for my application.  One of the important functionality that the newly created classes provide is to expose page-specific help information.  The help informatin can easily be optained knowing the view name since I have a service bean which retrieves that information for the page based on the view name. For my two base classes which extend SimpleFormController and MultiActionController, I can easily determine the view name and therefore developers who extend them do not have to worry about the page-specific information in their controller class.  My problem is I would like to create a base controller class for AbstractWizardFormController but, I cannot provide the provide the page-specific information when the controller is in 'form view' mode for, I do not have access to the view names.  For SimpleFormController, I can call getFormView() and then override referenData to provide the page-specific information.  However, there is no such functionality in AbstractWizardFormController.  I need a way to determine the view name of the current page.  I could do this if there a getPages() method or a very simple getCurrentViewName() in AbstractWizardFormController.  Can you add getCurrentViewName() to the controller.  That would simplify my life!!!  See the following thread: http://sourceforge.net/forum/forum.php?thread_id=1111323&forum_id=250340  Thanks, SpringDoctor   ---  **Affects:** 1.1 RC1","closed","type: enhancement,","spring-projects-issues","2004-07-16T13:04:20Z","2004-07-19T06:45:16Z"
"","5633","Simplify Mapping Definition for MultiActionController reported by j2eeguru on 4/26/2005 [SPR-908]","**[Dickerns Israel](https://jira.spring.io/secure/ViewProfile.jspa?name=disrael)** opened **[SPR-908](https://jira.spring.io/browse/SPR-908?redirect=false)** and commented  Assuming a MulitAction class has methods showA and showB.","closed","type: enhancement,","spring-projects-issues","2005-04-27T01:50:59Z","2012-06-19T09:37:30Z"
"","5475","AbstractXsltView doesn't set an ErrorListener on the TransformerFactory [SPR-747]","**[Derek Alexander](https://jira.spring.io/secure/ViewProfile.jspa?name=derek)** opened **[SPR-747](https://jira.spring.io/browse/SPR-747?redirect=false)** and commented  The default xslt transformer with JDK 1.5 (Xalan XSLTC) doesn't provide details of the cause in the TransformerConfigurationException when stylesheet compilation fails.  If an ErrorListener has been set on the TransformerFactory, details are sent there, otherwise they only go to System.err.  AbstractXsltView doesn't set an ErrorListener on the TransformerFactory itself and doesn't expose this attribute so the user can't do this.  Output to System.err isn't very useful when one is using logging. In my setup the details ended up in catalina.out rather than the application's log.  A simple improvement would be for AbstracXsltView to include an  javax.xml.transform.ErrorListener implementation that writes details of any errors reported to the logger, e.g.:  protected final void initApplicationContext() throws ApplicationContextException { this.transformerFactory = TransformerFactory.newInstance(); this.transformerFactory.setErrorListener( new javax.xml.transform.ErrorListener() { public void warning(TransformerException exception) throws TransformerException { logger.warn("""",exception); }              public void error(TransformerException exception)                 throws TransformerException             {                 logger.error("""",exception);             }                  public void fatalError(TransformerException exception)                 throws TransformerException             {                 logger.fatal("""",exception);             }         }     );     ...  }    ---  **Affects:** 1.1.4","closed","type: enhancement,","spring-projects-issues","2005-02-28T00:48:04Z","2005-03-11T01:32:41Z"
"","5467","Step-by-step tutorial broken with HSQLDB 1.7.2+ [SPR-739]","**[Derek Alexander](https://jira.spring.io/secure/ViewProfile.jspa?name=derek)** opened **[SPR-739](https://jira.spring.io/browse/SPR-739?redirect=false)** and commented  HSQLDB 1.7.2+ requires even an inprocess database to be explicitly shutdown.  Without doing this, the TestProductManagerDaoJdbc.java unit test fails.  I resolved it by adding a shutdown task and making it the final dependency for the junit task as follows.              ...                                                            SHUTDOWN;                       --- No further details from [SPR-739](https://jira.spring.io/browse/SPR-739?redirect=false)","closed","type: bug,","spring-projects-issues","2005-02-23T01:08:34Z","2005-04-24T13:05:53Z"
"","5345","sql-error-codes.xml for ASE [SPR-617]","**[Dejan Predovic](https://jira.spring.io/secure/ViewProfile.jspa?name=dpredovic)** opened **[SPR-617](https://jira.spring.io/browse/SPR-617?redirect=false)** and commented  It would be very nice if Spring would support error codes for newer jConnect drivers out of the box. They return 'Adaptive Server Enterprise' and not 'Sybase SQL Server' as the database product name.   ---  **Affects:** 1.1.3","closed","type: enhancement,","spring-projects-issues","2005-01-12T19:23:34Z","2005-01-12T23:58:17Z"
"","5827","AbstractTransactionalSpringContextTests onSetUpOutOfTransaction support [SPR-1123]","**[Dejan Predovic](https://jira.spring.io/secure/ViewProfile.jspa?name=dpredovic)** opened **[SPR-1123](https://jira.spring.io/browse/SPR-1123?redirect=false)** and commented  AbstractTransactionalSpringContextTests, by making onSetUp() final,  practically disallows running a part of the test case initialization out of the transaction context. (Background is - we want to execute some ddls at setup time and get sql exceptions when we try it in the transaction.)   --- No further details from [SPR-1123](https://jira.spring.io/browse/SPR-1123?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-07-11T20:42:54Z","2005-07-19T03:09:15Z"
"","5318","Integration of EJB CMT with Spring Framework [SPR-590]","**[Deepak Kalra](https://jira.spring.io/secure/ViewProfile.jspa?name=kalradeepak)** opened **[SPR-590](https://jira.spring.io/browse/SPR-590?redirect=false)** and commented  Hi  I am working on integration of EJB CMT with Spring Framework.  Case 1. Client is direct calling spring managed pojo with PROPAGATION_REQUIRED. Case 2. Client is calling Remote Bean method demarcated as RequiresNew.Inside the method a spring managed pojo is called with PROPAGATION_REQUIRED.  I am getting the error in Case 2 as Its not able to find JTA UserTransaction  Case 1 I am able to run the case 1 without any error and data is getting inserted As its getting the JTA UserTransaction  /////////////////////////////////////////////////////// INFO: Creating shared instance of singleton bean 'platformTransactionManager' Dec 29, 2004 7:21:18 AM org.springframework.transaction.jta.JtaTransactionManager lookupUserTransaction INFO: Using JTA UserTransaction [com.ibm.ws.Transaction.JTA.UserTransactionImpl@2e5e28db] from JNDI location [jta/usertransaction] ///////////////////////////////////////////////////////  Pls see EventTestClient for the same.  Case 2 I am getting the error. Pls see EJBSpringClient for the same. Somehow Its not able to find JTA UserTransaction but in case 1 Its able to find. Only difference is client is calling the EJB where as in case 1 does not -~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~- Error creating bean with name 'platformTransactionManager' defined in class path resource [com/atomic/springjndi/applicationContext.xml]: Initialization of bean failed; nested exception is org.springframework.transaction.TransactionSystemException: JTA UserTransaction is not available at JNDI location [jta/usertransaction]; nested exception is com.ibm.websphere.naming.CannotInstantiateObjectException: Exception occurred while the JNDI NamingManager was processing a javax.naming.Reference object. -~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-  This is my applicationContext.xml file  -~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-  \ \ \           	     		jdbc/atomicDB     	                         	     		     	     	     		     			net.sf.hibernate.dialect.OracleDialect     		     	     	     		     			com/atomic/springjndi/Event.hbm.xml     		     	                    	     		     	                    	     		     	                                        	     		     	     	     		jta/usertransaction     	                              	     		     	     	     		     	     	     		     			PROPAGATION_SUPPORTS     			PROPAGATION_SUPPORTS     		     	            \ -~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-  Complete Error for Case 2  ////////////////////////////////////////////////////////////////// InitialContext javax.naming.InitialContext@4ee0ec52 EJBSpringTransactionHome IOR:0000000000000043524d493a636f6d2e61746f6d69632e656a62737072696e672e454a42537072696e675472616e73616374696f6e486f6d653a303030303030303030303030303030300000000000010000000000000130000102000000000a6c6f63616c686f73740010c8000000a64a4d4249000000124773e3aa37643062633737336533616166633334000000240000008249454a5002008e629f84077365727665723103454a4200000068acac0002000100290000005f5f686f6d654f66486f6d6573235f5f686f6d654f66486f6d6573235f5f686f6d654f66486f6d65730870726f6a656374454a42537072696e6723656a624d6f64756c652e6a617223454a42537072696e675472616e73616374696f6e0000000000070000000100000014000000000501000100000000000101000000000049424d0a00000008000000011420000100000026000000020002000049424d040000000500050101020000000000001f0000000400000003000000200000000400000001000000250000000400000003 EJBSpringTransaction 1 IOR:000000000000003f524d493a636f6d2e61746f6d69632e656a62737072696e672e454a42537072696e675472616e73616374696f6e3a303030303030303030303030303030300000000000010000000000000104000102000000000a6c6f63616c686f73740010c80000007c4a4d4249000000124773e3aa37643062633737336533616166633334000000240000005849454a500200eb53a395077365727665723103454a420000003eacac00020001013300000070726f6a656374454a42537072696e6723656a624d6f64756c652e6a617223454a42537072696e675472616e73616374696f6e000000070000000100000014000000000501000100000000000101000000000049424d0a00000008000000011420000100000026000000020002000049424d040000000500050101020000000000001f0000000400000003000000200000000400000001000000250000000400000003 EJBSpringTransaction RemoteException java.rmi.ServerException: RemoteException occurred in server thread; nested exception is: java.rmi.RemoteException:  Trace from server: 1198777258 at host localhost >> java.rmi.RemoteException: ; nested exception is: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'platformTransactionManager' defined in class path resource [com/atomic/springjndi/applicationContext.xml]: Initialization of bean failed; nested exception is org.springframework.transaction.TransactionSystemException: JTA UserTransaction is not available at JNDI location [jta/usertransaction]; nested exception is com.ibm.websphere.naming.CannotInstantiateObjectException: Exception occurred while the JNDI NamingManager was processing a javax.naming.Reference object. at com.ibm.ejs.container.RemoteExceptionMappingStrategy.setUncheckedException(RemoteExceptionMappingStrategy.java:196) at com.ibm.ejs.container.EJSDeployedSupport.setUncheckedException(EJSDeployedSupport.java:296) at com.atomic.ejbspring.EJSRemoteStatelessEJBSpringTransaction_f9c64424.springServiceLayer(EJSRemoteStatelessEJBSpringTransaction_f9c64424.java:41) at com.atomic.ejbspring._EJSRemoteStatelessEJBSpringTransaction_f9c64424_Tie.springServiceLayer(_EJSRemoteStatelessEJBSpringTransaction_f9c64424_Tie.java:154) at com.atomic.ejbspring._EJSRemoteStatelessEJBSpringTransaction_f9c64424_Tie._invoke(_EJSRemoteStatelessEJBSpringTransaction_f9c64424_Tie.java:98) at com.ibm.CORBA.iiop.ServerDelegate.dispatchInvokeHandler(ServerDelegate.java:608) at com.ibm.CORBA.iiop.ServerDelegate.dispatch(ServerDelegate.java:461) at com.ibm.rmi.iiop.ORB.process(ORB.java:432) at com.ibm.CORBA.iiop.ORB.process(ORB.java:1728) at com.ibm.rmi.iiop.Connection.doWork(Connection.java:2227) at com.ibm.rmi.iiop.WorkUnitImpl.doWork(WorkUnitImpl.java:65) at com.ibm.ejs.oa.pool.PooledThread.run(ThreadPool.java:95) at com.ibm.ws.util.ThreadPool$Worker.run(ThreadPool.java:912) Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'platformTransactionManager' defined in class path resource [com/atomic/springjndi/applicationContext.xml]: Initialization of bean failed; nested exception is org.springframework.transaction.TransactionSystemException: JTA UserTransaction is not available at JNDI location [jta/usertransaction]; nested exception is com.ibm.websphere.naming.CannotInstantiateObjectException: Exception occurred while the JNDI NamingManager was processing a javax.naming.Reference object. at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:318) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:223) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:236) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:159) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:261) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:317) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:80) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:65) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:56) at com.atomic.ejbspring.EJBSpringTransactionBean.springServiceLayer(EJBSpringTransactionBean.java:53) at com.atomic.ejbspring.EJSRemoteStatelessEJBSpringTransaction_f9c64424.springServiceLayer(EJSRemoteStatelessEJBSpringTransaction_f9c64424.java:35) ... 10 more Caused by: org.springframework.transaction.TransactionSystemException: JTA UserTransaction is not available at JNDI location [jta/usertransaction]; nested exception is com.ibm.websphere.naming.CannotInstantiateObjectException: Exception occurred while the JNDI NamingManager was processing a javax.naming.Reference object. at org.springframework.transaction.jta.JtaTransactionManager.lookupUserTransaction(JtaTransactionManager.java:359) at org.springframework.transaction.jta.JtaTransactionManager.afterPropertiesSet(JtaTransactionManager.java:312) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1037) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:305) ... 20 more Caused by: com.ibm.websphere.naming.CannotInstantiateObjectException: Exception occurred while the JNDI NamingManager was processing a javax.naming.Reference object. [Root exception is javax.naming.ConfigurationException] at com.ibm.ws.naming.util.Helpers.processSerializedObjectForLookupExt(Helpers.java:931) at com.ibm.ws.naming.util.Helpers.processSerializedObjectForLookup(Helpers.java:680) at com.ibm.ws.naming.jndicos.CNContextImpl.processResolveResults(CNContextImpl.java:1712) at com.ibm.ws.naming.jndicos.CNContextImpl.doLookup(CNContextImpl.java:1567) at com.ibm.ws.naming.jndicos.CNContextImpl.doLookup(CNContextImpl.java:1480) at com.ibm.ws.naming.jndicos.CNContextImpl.lookupExt(CNContextImpl.java:1187) at com.ibm.ws.naming.jndicos.CNContextImpl.lookup(CNContextImpl.java:1067) at com.ibm.ws.naming.util.WsnInitCtx.lookup(WsnInitCtx.java:144) at javax.naming.InitialContext.lookup(InitialContext.java:361) at org.springframework.jndi.JndiTemplate$1.doInContext(JndiTemplate.java:123) at org.springframework.jndi.JndiTemplate.execute(JndiTemplate.java:85) at org.springframework.jndi.JndiTemplate.lookup(JndiTemplate.java:121) at org.springframework.transaction.jta.JtaTransactionManager.lookupUserTransaction(JtaTransactionManager.java:347) ... 23 more","closed","in: data,","spring-projects-issues","2004-12-28T17:26:10Z","2019-01-11T12:41:30Z"
"","5316","LocalSession Factory does not work with JndiObjectFactoryBean [SPR-588]","**[Deepak Kalra](https://jira.spring.io/secure/ViewProfile.jspa?name=kalradeepak)** opened **[SPR-588](https://jira.spring.io/browse/SPR-588?redirect=false)** and commented  Hi  I am trying to run the simple example. I am getting the datasource from JNDI and passing it to the Local Session Factory and I am getting this error. It seems the LocalSessionFactory does not have the corresponding method for JndiObjectFactoryBean.  -~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~- Error creating bean with name 'mySessionFactory' defined in class path resource [com/atomic/springjndi/applicationContext.xml]: Error setting property values; nested exception is org.springframework.beans.PropertyAccessExceptionsException: PropertyAccessExceptionsException (1 errors); nested propertyAccessExceptions are: [org.springframework.beans.TypeMismatchException: Failed to convert property value of type [javax.naming.Reference] to required type [javax.sql.DataSource] for property 'dataSource']  -~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-  -~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-  My application context file is  \ \ \ \      	     		     			     				jdbc/atomicDB     			     		     	          	     		     			com/atomic/springjndi/Event.hbm.xml     		     	                    	     		     	       \ -~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-  Full Error shows as below  ---  Client [INFO] XmlBeanDefinitionReader - Loading XML bean definitions from class path resource [com/atomic/springjndi/applicationContext.xml] [INFO] ClassPathXmlApplicationContext - Bean factory for application context [org.springframework.context.support.ClassPathXmlApplicationContext;hashCode=573960176]: org.springframework.beans.factory.support.DefaultListableBeanFactory defining beans [mySessionFactory,myEventDAO]; root of BeanFactory hierarchy [INFO] ClassPathXmlApplicationContext - 2 beans defined in application context [org.springframework.context.support.ClassPathXmlApplicationContext;hashCode=573960176] [INFO] ClassPathXmlApplicationContext - Unable to locate MessageSource with name 'messageSource': using default [org.springframework.context.support.StaticMessageSource: {}] [INFO] ClassPathXmlApplicationContext - Unable to locate ApplicationEventMulticaster with name 'applicationEventMulticaster': using default [org.springframework.context.event.SimpleApplicationEventMulticaster@39ccaff3] [INFO] ClassPathXmlApplicationContext - Refreshing listeners [INFO] DefaultListableBeanFactory - Pre-instantiating singletons in factory [org.springframework.beans.factory.support.DefaultListableBeanFactory defining beans [mySessionFactory,myEventDAO]; root of BeanFactory hierarchy] [INFO] DefaultListableBeanFactory - Creating shared instance of singleton bean 'mySessionFactory' [INFO] JndiObjectFactoryBean - Located object with JNDI name [jdbc/atomicDB]: value=[Reference Class Name: atomicDB Type: connectorName Content: atomicDB Type: recoveryClasspath Content: C:\Program Files\IBM\WebSphere Studio\Application Developer IE\v5.1.1\runtimes\ee_v51/lib/rsadapter.rar Type: FactoryJndiName Content: jdbc/atomicDB Address Type: dd AddressContents: ffffffac ffffffed 0 5 73 72 0 25 63 6f 6d 2e 69 62 6d 2e 65 6a 73 2e 6a 32 63 2e 52 65 73 6f 75 72 63 65  ... Address Type: poolProps AddressContents: ffffffac ffffffed 0 5 73 72 0 27 63 6f 6d 2e 69 62 6d 2e 65 6a 73 2e 6a 32 63 2e 43 6f 6e 6e 65 63 74 6f  ... Address Type: configProps AddressContents: ffffffac ffffffed 0 5 73 72 0 23 63 6f 6d 2e 69 62 6d 2e 65 6a 73 2e 6a 32 63 2e 43 6f 6e 6e 65 63 74 6f  ... Address Type: mmProps AddressContents: ffffffac ffffffed 0 5 73 72 0 14 6a 61 76 61 2e 75 74 69 6c 2e 50 72 6f 70 65 72 74 69 65 73 39 12 ffffffd0 7a  ... Address Type: dsProps AddressContents: ffffffac ffffffed 0 5 73 72 0 14 6a 61 76 61 2e 75 74 69 6c 2e 50 72 6f 70 65 72 74 69 65 73 39 12 ffffffd0 7a  ... Address Type: mcfProps AddressContents: ffffffac ffffffed 0 5 73 72 0 2d 63 6f 6d 2e 69 62 6d 2e 65 6a 73 2e 6a 32 63 2e 4d 61 6e 61 67 65 64 43  ... Address Type: mbeanProps AddressContents: ffffffac ffffffed 0 5 73 72 0 1a 63 6f 6d 2e 69 62 6d 2e 65 6a 73 2e 6a 32 63 2e 4d 42 65 61 6e 50 72 6f  ... ] [INFO] DefaultListableBeanFactory - Destroying singletons in factory {org.springframework.beans.factory.support.DefaultListableBeanFactory defining beans [mySessionFactory,myEventDAO]; root of BeanFactory hierarchy} [INFO] DefaultListableBeanFactory - Destroying inner beans in factory {org.springframework.beans.factory.support.DefaultListableBeanFactory defining beans [mySessionFactory,myEventDAO]; root of BeanFactory hierarchy} org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'mySessionFactory' defined in class path resource [com/atomic/springjndi/applicationContext.xml]: Error setting property values; nested exception is org.springframework.beans.PropertyAccessExceptionsException: PropertyAccessExceptionsException (1 errors); nested propertyAccessExceptions are: [org.springframework.beans.TypeMismatchException: Failed to convert property value of type [javax.naming.Reference] to required type [javax.sql.DataSource] for property 'dataSource'] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:840) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:648) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:288) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:223) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:236) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:159) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:255) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:317) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:80) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:65) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:56) at com.atomic.springjndi.EventTestClient.main(EventTestClient.java:27) Exception in thread ""P=417141:O=0:CT""  ---  ---  **Affects:** 1.1.3  1 votes, 0 watchers","closed","status: declined,","spring-projects-issues","2004-12-27T16:07:39Z","2019-01-13T22:53:05Z"
"","5314","EJB initiating the Tansaction CMT [SPR-586]","**[Deepak Kalra](https://jira.spring.io/secure/ViewProfile.jspa?name=kalradeepak)** opened **[SPR-586](https://jira.spring.io/browse/SPR-586?redirect=false)** and commented  Hi,  I am in the process of designing the architecture using Spring Framwork. We are looking for the solution as follows  Client calls the EJB Layer and EJB Layer initiates the transaction management i.e. Stateless Session Bean with CMT. Stateless Session Bean in turn calls the Spring Service Layer Which in turn calls the POJO i.e. Hibernate.  My Question is If I will set the Session Beam Transaction as REQUIRES_NEW i.e. JTA Application Server and Service Layer of Spring Framework will be using JTATransaction and method is having PROPAGATION as Required Transaction.  \ \\jdbc/jpetstore\\ \ \ \\\ \ \org/springframework/samples/petclinic/hibernate/petclinic.hbm.xml\ \ \ \ \${hibernate.dialect}\ \ \ \  \  Will this work  architecture work. As EJB has initiated the transaction. Will it possible that POJO method works in the same transaction or Not. I will appreciate If you guys can help me out.  Kind Regards Deepak  ---  **Issue Links:** - #5318 Integration of EJB CMT with Spring Framework (_**""duplicates""**_)","closed","","spring-projects-issues","2004-12-26T19:57:06Z","2019-01-11T12:41:43Z"
"","5531","UrlPathHelper.getPathWithinApplication broken for Resin 2.1.11 [SPR-804]","**[Dean Holdren](https://jira.spring.io/secure/ViewProfile.jspa?name=deanholdren)** opened **[SPR-804](https://jira.spring.io/browse/SPR-804?redirect=false)** and commented  Using a web-application name with capitalized characters poses a problem in Spring's UrlPathHelper.getPathWithinApplication if using Resin 2 (at least in Windows XP).  Given a web.xml: ... \ \phoneBook\ \org.springframework.web.servlet.DispatcherServlet\ \2\ \ \ \bar\ \/bar/*\ \ ... And a request url of: http://127.0.0.1:8080/Foo/bar/start  request.getContextPath() returns ""foo"" (lowercase in Resin, Tomcat returns ""Foo"") request.getRequestUri() returns ""Foo/bar/start"" And therefore requestUri.startsWith(contextPath) returns false, when it should return true.   ---  **Affects:** 1.1.4","closed","type: bug,","spring-projects-issues","2005-03-22T01:57:13Z","2005-03-22T02:25:38Z"
"","5431","Make Controller aware of the url mapping [SPR-703]","**[Davor Cengija](https://jira.spring.io/secure/ViewProfile.jspa?name=dcengija)** opened **[SPR-703](https://jira.spring.io/browse/SPR-703?redirect=false)** and commented  See the discussion here:  http://forum.springframework.org/viewtopic.php?t=1546&highlight=  Some copy/pastes:  dcengija New User  Joined: 30 Sep 2004 Posts: 9 Location: Zagreb, Croatia  PostPosted: Sun Oct 24, 2004 4:31 pm    Post subject: Discovering controller's mapping name within controller? 	Reply with quote Edit/Delete this post If I have an URL which looks like http://mydomain/myapp/action/proxy/perform/some/path/blabla, and myapp is my application, action is DispatcherServlet's mapping and /proxy/perform/** is a simple url mapping, how can I discover within the controller that that particular request is triggered by resolving /proxy/perform mapping, and that /some/path/blabla is actually a parameter?  This is my current configuration and I'm a little bit stuck here. Basically, my proxy controller maps itself to a file system (local or remote), or maybe carries a set of variable-length parameters, which must be represented as shown above. I'm having troubles discovering where the parameters start, or more preciselly, where spring ends and the parameters start.  So, in short Smile How to discover the current mapping of the controller within its handleRequest method? Is there some already available Controller implementation which provides me with that information?  Thanks.  I stumbled again on this problem, so I thought it would be interesting to have it solved in Spring itself.  Some solutions are already offered so it could help the developers.  ---  **Affects:** 1.1.5  **Attachments:** - [ExampleBlogArchiveController.java](https://jira.spring.io/secure/attachment/11451/ExampleBlogArchiveController.java) (_1.49 kB_) - [ParametersMarker.java](https://jira.spring.io/secure/attachment/11452/ParametersMarker.java) (_921 bytes_) - [RegexUrlHandlerMapping.java](https://jira.spring.io/secure/attachment/11453/RegexUrlHandlerMapping.java) (_3.84 kB_) - [RegexUrlHandlerMapping.java](https://jira.spring.io/secure/attachment/10633/RegexUrlHandlerMapping.java) (_4.94 kB_) - [RegexUrlHandlerMappingTest.java](https://jira.spring.io/secure/attachment/11454/RegexUrlHandlerMappingTest.java) (_1.77 kB_) - [RegexUrlHandlerMappingTest.java](https://jira.spring.io/secure/attachment/10634/RegexUrlHandlerMappingTest.java) (_1.78 kB_)  **Issue Links:** - #6061 UrlFilenameViewController does not allow for nested view files (_**""is depended on by""**_)  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2005-02-10T19:04:35Z","2019-01-11T12:58:26Z"
"","5427","Hibernate Query by example support [SPR-699]","**[Davor Cengija](https://jira.spring.io/secure/ViewProfile.jspa?name=dcengija)** opened **[SPR-699](https://jira.spring.io/browse/SPR-699?redirect=false)** and commented  getHibernateTemplate().findByExample(exampleObject) would be quite helpful.  So far I'm using my own implementation, but I'm not tested it deeply.      public List findByExample(Object exampleObject) {         Session session = SessionFactoryUtils.getSession(getSessionFactory(), true);         Criteria criteria = session.createCriteria(exampleObject.getClass());                  criteria.add(Example.create(exampleObject).excludeZeroes());                  try {             return criteria.list();         }         catch (HibernateException he) {             throw SessionFactoryUtils.convertHibernateAccessException(he);         }         finally {             SessionFactoryUtils.closeSessionIfNecessary(session, getSessionFactory());         }     }  See the discussion here:  http://forum.springframework.org/viewtopic.php?t=3422   ---  **Affects:** 1.1.5  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2005-02-08T18:49:10Z","2005-03-25T03:44:02Z"
"","5610","NullPointerException when using replaced-method with typed parameters [SPR-883]","**[Davide Baroncelli](https://jira.spring.io/secure/ViewProfile.jspa?name=baroncelli)** opened **[SPR-883](https://jira.spring.io/browse/SPR-883?redirect=false)** and commented  I think I've found a spring 1.2rc1 bug in the method replacement feature. The bug occurs in some cases when using type matching on overloaded methods. The problem lies in the code that creates the cglib proxy when the bean is initialized: this code uses a simple algorithm in order to decide if the method is overloaded: if it has already met it, then it considers the method overloaded. The problem is that upon the first time the method is met, it is always treated as if it was not overloaded, so - even if the first method is not the one that is intended to be treated by the following typed method replacement - at bean creation it is considered as to be replaced (because it is not seen as overloaded, and then the type matching is not done). When executing the method that should not be replaced, nevertheless, the cglib created proxy thinks the method is replaced, passes it to the replacer, but the matching code does reject the method because at this point type matching is performed: no MethodReplacement is returned and a NullPointerException returns.  \ java.lang.NullPointerException 	at org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy$CglibSubclassCreator$ReplaceOverrideMethodInterceptor.intercept(CglibSubclassingInstantiationStrategy.java:168) 	at it.stratosfera.java.spring.A$$EnhancerByCGLIB$$52d52fd4.a(\) 	at it.stratosfera.java.spring.TestSpringBug.testSpringBug(TestSpringBug.java:21) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 	at com.intellij.rt.execution.junit2.JUnitStarter.main(JUnitStarter.java:31) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:86) \ The attached test case shows the bug.   ---  **Affects:** 1.2 RC1  **Attachments:** - [test-spring-bug.zip](https://jira.spring.io/secure/attachment/10658/test-spring-bug.zip) (_2.18 kB_)","closed","in: core,","spring-projects-issues","2005-04-16T03:49:54Z","2005-04-16T06:13:12Z"
"","5110","inner ""bean"" element with ""parent"" attribute is forced to have an ""id"" [SPR-380]","**[Davide Baroncelli](https://jira.spring.io/secure/ViewProfile.jspa?name=baroncelli)** opened **[SPR-380](https://jira.spring.io/browse/SPR-380?redirect=false)** and commented  I tried using an inner bean definition with a ""parent"" definition, as in what follows:  \ \ \ ...blahblahblah... \ \ \ \ ...blahblah... \  but this fails with an error: ""Error registering bean with name '' defined in class path resource [applicationContext.xml]: Child bean definition has neither 'id' nor 'name'"".  I think this should be allowed, isn't it? Anyway, adding an ""id"" property to the inner bean seems to be a suitable workaround.   ---  **Affects:** 1.1.1  **Issue Links:** - [SWF-381](https://jira.spring.io/browse/SWF-381) Make it easier to assign a flow definition an identifier when registering it in a registry","closed","in: core,","spring-projects-issues","2004-10-07T01:38:44Z","2007-08-19T23:34:49Z"
"","5238","add new property to SqlMapClientFactoryBean to use internal Ibatis transaction manager [SPR-509]","**[David](https://jira.spring.io/secure/ViewProfile.jspa?name=drosenstark)** opened **[SPR-509](https://jira.spring.io/browse/SPR-509?redirect=false)** and commented  I have run into a problem in trying to use Ibatis+DBCP+Spring. For some reason i cannot get commits to happen no matter what i do, even if I set autocommit. There seems to be an issue with using the external transaction manager of Ibatis. To get around this problem, i would like to add a property to the SqlMapClientFactoryBean to instruct the class to use the internal Ibatis transaction manager.   ---  **Affects:** 1.1 final","closed","type: enhancement,","spring-projects-issues","2004-12-01T20:57:34Z","2005-03-02T23:15:47Z"
"","4885","The ""reply-to"" field was not supported via SimpleMailMessage and JavaMailSenderImpl [SPR-153]","**[David Thexton](https://jira.spring.io/secure/ViewProfile.jspa?name=david@consultants.co.nz)** opened **[SPR-153](https://jira.spring.io/browse/SPR-153?redirect=false)** and commented  There was no means to set the ""reply-to"" field via SimpleMailMessage and JavaMailSenderImpl was missing the logic to populate the underlying Java Mail Message with the field.  I additionally updated some tests in MailTestSuite and added a comment explaining that CosMailSenderImpl doesn't support ""reply-to"" if set.  The MailTestSuite tests still pass (applied to CVS head today).  Although the changes are all fairly trivial we require the ""reply-to"" field and I'd prefer to use the Spring wrapper than write directly to the Java mail classes.  If someone could guide the patch I produced with ""cvs diff -U3"" I'd be very appreciative.  I'd be keen not to have to continue using a modified version.  Thanks!   ---  **Affects:** 1.0.1  **Attachments:** - [patch.txt](https://jira.spring.io/secure/attachment/10104/patch.txt) (_7.34 kB_)  2 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2004-06-01T04:32:40Z","2004-06-05T01:19:07Z"
"","5175","FieldRetrievingFactoryBean doesn't work with instance fields [SPR-446]","**[David Solis](https://jira.spring.io/secure/ViewProfile.jspa?name=dsolis)** opened **[SPR-446](https://jira.spring.io/browse/SPR-446?redirect=false)** and commented  It seems to me FieldRetrievingFactoryBean doesn't work with instance field. At this moment is just for static fields.   ---  **Affects:** 1.1.1","closed","in: core,","spring-projects-issues","2004-11-04T11:49:20Z","2019-01-12T16:42:01Z"
"","5062","Fix SpringBind Error [SPR-332]","**[David Mitchell](https://jira.spring.io/secure/ViewProfile.jspa?name=davidmitchell)** opened **[SPR-332](https://jira.spring.io/browse/SPR-332?redirect=false)** and commented  I've spent way too much time trying to figure out what was going on with the following error:  Could not find Errors instance for bean [command] in request:  When trying to do the following from within a velocity template:  \ \Login\ \ #springBind(""command"") \ \  I finally figured out how to fix this, but it seems that something like this fix should be in the SimpleFormController already.  I created the following class to fix this problem.  ********************************************  public class BaseFormController extends SimpleFormController {      protected ModelAndView showForm(HttpServletRequest request, HttpServletResponse response, BindException errors)     throws java.lang.Exception {     	     	ModelAndView view = super.showForm(request,response, errors);     	view.getModel().putAll(errors.getModel());     	return view;     }  }    --- No further details from [SPR-332](https://jira.spring.io/browse/SPR-332?redirect=false)","closed","type: enhancement,","spring-projects-issues","2004-09-14T08:30:22Z","2004-10-05T04:14:10Z"
"","4974","PropertyEditor not invoked when setter throws an Exception [SPR-243]","**[David Hewitt](https://jira.spring.io/secure/ViewProfile.jspa?name=dhewitt)** opened **[SPR-243](https://jira.spring.io/browse/SPR-243?redirect=false)** and commented  It appears that if an exception is thrown by a property setter method on a command bean, the value that was being set is not converted using  a property editor before being being re-bound to the model.  To illustrate, we had the following code:  * A Form object with a property of type Foo * A property editor FooPropertyEditor that converted Long values into instances of Foo * A select box on a jsp that displayed a list of Foo instances to select from.  The option values corresponded to a Long id property on Foo (retrieved using ${foo.id}), and were compared with the value of the property on Form using the spring:bind tag to determine which was selected (ie ${status.value == foo.id}).  This is all pretty standard so far.  However, a bug in our code threw up a what looks like a bug in Spring. It appears that if a setter method throws an exception, any custom property editor for that type will not be invoked when exposing the property value in the model.  What we observed was that, when our setter method threw an exception, our jsp threw the following exception:  javax.servlet.ServletException: javax.servlet.jsp.JspException: Attempt to coerce a value of type ""Foo"" to type ""java.lang.Long""  It looks like, after failing to set the selected Foo on our form object (because setFoo threw an exception), Foo iself was bound to the model, rather than the result of FooPropertyEditor.getAsText().   ---  **Affects:** 1.1 RC1","closed","type: bug,","spring-projects-issues","2004-08-03T21:35:25Z","2019-01-11T13:28:52Z"
"","5781","factory-method fails matching overloaded methods with different parameters [SPR-1075]","**[David Erickson](https://jira.spring.io/secure/ViewProfile.jspa?name=halcyon)** opened **[SPR-1075](https://jira.spring.io/browse/SPR-1075?redirect=false)** and commented  Here is the bean definition:  \  \  \  \true\  \\  \\  \\  \\  \  \  \   getDefaultInstance signatures: public static Session getDefaultInstance(java.util.Properties props) public static Session getDefaultInstance(java.util.Properties props, Authenticator authenticator)  I also tried specifiying the index=""0"" and type=""java.util.properties"" to the constructor arg, however i received the same error:  2005-06-24 16:00:58,203 [DEBUG] support.DefaultListableBeanFactory - Ignoring factory method [public static javax.mail.Session javax.mail.Session.getDefaultInstance(java.util.Properties,javax.mail.Authenticator)] of bean 'javaMailSession': could not satisfy dependencies org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'javaMailSession' defined in ServletContext resource [/WEB-INF/spring/tecas.xml]: Unsatisfied dependency expressed through constructor argument with index 1 of type [javax.mail.Authenticator]: Ambiguous constructor argument types - did you specify the correct bean references as generic constructor arguments?  I ended up having to use the below, which is less than ideal: \ \\javax.mail.Session\\ \\getDefaultInstance\\ \ \ \ \true\ \\ \\ \\ \\ \ \ \ \   ---  **Affects:** 1.2.1","closed","in: core,","spring-projects-issues","2005-06-24T09:58:25Z","2019-01-11T18:36:33Z"
"","5291","project.xml needs to be updated for velocity-tools (generic and view) [SPR-562]","**[David Castro](https://jira.spring.io/secure/ViewProfile.jspa?name=arimus)** opened **[SPR-562](https://jira.spring.io/browse/SPR-562?redirect=false)** and commented  Seems the groupId needs to be changed from velocity to velocity tools...maybe they recently moved where these tools are in the repository?  I was running the 'maven jar:jar' goal.  Diff below fixed my problem.  --- project.xml.old     2004-12-16 14:02:07.632003312 -0800 +++ project.xml 2004-12-16 14:01:35.832837520 -0800 @@ -426,12 +426,12 @@ \1.4\ \ \  ---      velocity  +                 velocity-tools               velocity-tools-generic               1.1                -         velocity  +                 velocity-tools               velocity-tools-view               1.1         ---  **Affects:** 1.1.3","closed","type: bug,","spring-projects-issues","2004-12-16T08:05:37Z","2019-01-13T22:53:09Z"
"","5636","HTML escaping in view [SPR-912]","**[David Barri](https://jira.spring.io/secure/ViewProfile.jspa?name=golly)** opened **[SPR-912](https://jira.spring.io/browse/SPR-912?redirect=false)** and commented  AFAIK there is no current way to ensure that all model data passed to views are HTML safe. There are instances where HTML escaping can be provided (velocity macro #springBind for example) but AFAIK there is no way of escaping other data.  There should be some way to enable this declaratively.  See: http://forum.springframework.org/viewtopic.php?t=1423   ---  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2005-05-02T04:10:25Z","2012-06-19T09:37:26Z"
"","5460","[PATCH] Remove map lookup when iterating [SPR-732]","**[Dave Brosius](https://jira.spring.io/secure/ViewProfile.jspa?name=dbrosius)** opened **[SPR-732](https://jira.spring.io/browse/SPR-732?redirect=false)** and commented  When iterating maps, there's never a need to do a map lookup on that map if you use the right iterator. This patch fixes places where lookups where still occurring.   ---  **Affects:** 1.1.5  **Attachments:** - [map_fixes.patch](https://jira.spring.io/secure/attachment/10540/map_fixes.patch) (_12.40 kB_)","closed","type: enhancement,","spring-projects-issues","2005-02-21T17:31:23Z","2005-02-21T18:39:25Z"
"","5456","[Patch] simple fixes found [SPR-728]","**[Dave Brosius](https://jira.spring.io/secure/ViewProfile.jspa?name=dbrosius)** opened **[SPR-728](https://jira.spring.io/browse/SPR-728?redirect=false)** and commented  This patch fixes some simple things found while perusing the code.   ---  **Affects:** 1.1.5  **Attachments:** - [simple_spring_fixes.patch](https://jira.spring.io/secure/attachment/10532/simple_spring_fixes.patch) (_2.73 kB_)","closed","type: enhancement,","spring-projects-issues","2005-02-20T14:34:04Z","2005-02-20T20:54:09Z"
"","5226","Improve default implementation of DataBinder's isAllowed() [SPR-497]","**[Darryl Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=dwsmith75)** opened **[SPR-497](https://jira.spring.io/browse/SPR-497?redirect=false)** and commented  From DataBinder's isAllowed():  ""The default implementation checks for ""xxx*"" and ""*xxx"" matches. Can be overridden in subclasses""  The only problem with this is there is no good place to override this.  The default implementation should accept the same syntax as: public void registerCustomEditor(Class requiredType,                               String field,PropertyEditor propertyEditor) in regards to the field parameter.  The field parameter accept syntax as:  http://www.springframework.org/docs/reference/validation.html#beans-beans-conventions  see also:  http://forum.springframework.org/viewtopic.php?t=1308    ---  **Affects:** 1.1.2  3 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2004-11-27T23:51:17Z","2015-09-22T17:34:39Z"
"","5123","Improve logging in the DataBinder [SPR-393]","**[Darren Davison](https://jira.spring.io/secure/ViewProfile.jspa?name=darren.davison)** opened **[SPR-393](https://jira.spring.io/browse/SPR-393?redirect=false)** and commented  The DataBinder permits a list of allowed fields that it will process.  There are potential security implications in not doing so where command objects may be domain objects with nested dependencies whose values could be modified by a malicious remote user.  In the case that the application developer chooses not to set a list of allowed fields, it would be useful to log a WARNing level entry when the binder is instantiated.  Should a form POST contain fields that are not in the isAllowed() list, the binder should also log a WARNing that it is ignoring such fields.  See forum thread http://forum.springframework.org/viewtopic.php?t=1308 for info.   ---  **Affects:** 1.1.1  **Attachments:** - [DataBinder.patch](https://jira.spring.io/secure/attachment/10295/DataBinder.patch) (_2.92 kB_) - [DataBinder.patch](https://jira.spring.io/secure/attachment/10289/DataBinder.patch) (_2.73 kB_)","closed","type: enhancement,","spring-projects-issues","2004-10-13T21:51:27Z","2004-10-23T08:20:37Z"
"","5010","FreeMarker exception handling is erroneous for parsing errors [SPR-279]","**[Darren Davison](https://jira.spring.io/secure/ViewProfile.jspa?name=darren.davison)** opened **[SPR-279](https://jira.spring.io/browse/SPR-279?redirect=false)** and commented  Initial parsing and loading of templates with parsing errors causes Spring to swallow or wrap the exception, reporting instead a generic template loading exception.  If template is fixed and then re-broken, Spring reports the correct FreeMarker exception.  The issue causes problems for debugging of faulty FTL files.   ---  **Affects:** 1.1 RC2","closed","type: bug,","spring-projects-issues","2004-08-22T05:09:59Z","2004-08-22T07:03:47Z"
"","5790","User metadata/annotations for configuring HandlerMappings [SPR-1085]","**[Daniel Campagnoli](https://jira.spring.io/secure/ViewProfile.jspa?name=campers)** opened **[SPR-1085](https://jira.spring.io/browse/SPR-1085?redirect=false)** and commented  I have developed a BeanFactoryPostProcessor that uses annotations to add controllers to the mappings of SimpleUrlHandlerMapping beans. As I like to set the commandName, commandClass, formView etc in the constructor of my controller classes, I was also wanting to also be able to configure the URL for the controller within the source file so I could have all the configuration in one place.  While in some cases it may be preferable to use the xml configuration, this is a good alternative when all your controllers and mappings are straight forward.  Usage is as follows  `@UrlHandlerMapping`(mappingUrl=""/register.html"", urlHandlerBean=""public"") public class RegisterUserController extends SimpleFormController { ... }  In your spring-servlet.xml you would have a bean for your controller and a SimpleUrlHandlerMapping bean with the name 'public'. The urlHandlerBean field of the attribute is the bean name of the SimpleUrlHandlerMapping that the controller should be added to the mappings. So you might have a 'user' and 'admin' SimpleUrlHandlerMapping beans that have the appropriate interceptors   ---  **Affects:** 2.0 M1  **Attachments:** - [src.zip](https://jira.spring.io/secure/attachment/10870/src.zip) (_2.49 kB_)","closed","type: enhancement,","spring-projects-issues","2005-06-29T02:42:46Z","2012-06-19T09:37:24Z"
"","4903","Generate 1.0.2 MAVEN IBIBLIO files [SPR-171]","**[Dan Washusen](https://jira.spring.io/secure/ViewProfile.jspa?name=dan)** opened **[SPR-171](https://jira.spring.io/browse/SPR-171?redirect=false)** and commented  As per http://maven.apache.org/repository-upload.html.  Cheers, Dan   ---  **Affects:** 1.0.2","closed","","spring-projects-issues","2004-06-17T10:27:55Z","2019-01-11T13:10:51Z"
"","5122","Allow  keys that are not strings [SPR-392]","**[Damon Maria](https://jira.spring.io/secure/ViewProfile.jspa?name=machine)** opened **[SPR-392](https://jira.spring.io/browse/SPR-392?redirect=false)** and commented  Currently the keys of \s declared in XML files can only be strings. Being able to have keys of other types would be very useful - I even have situations where I need keys that are references to other beans.  This AFAIK is the only place in XML collection definitions where there's a restriction on what can be specified.   ---  **Affects:** 1.1.1  **Attachments:** - [mapsWithObjectKeys_proposition.patch](https://jira.spring.io/secure/attachment/10291/mapsWithObjectKeys_proposition.patch) (_5.29 kB_) - [spr392application-context.xml](https://jira.spring.io/secure/attachment/10293/spr392application-context.xml) (_1.55 kB_) - [SPR392NonStringEntryForMapTests.java](https://jira.spring.io/secure/attachment/10292/SPR392NonStringEntryForMapTests.java) (_2.29 kB_)  4 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2004-10-13T19:13:55Z","2005-03-22T23:09:46Z"
"","4957","More than one BeanNameAutoProxyCreator without an id doesn't work [SPR-226]","**[Damon Maria](https://jira.spring.io/secure/ViewProfile.jspa?name=machine)** opened **[SPR-226](https://jira.spring.io/browse/SPR-226?redirect=false)** and commented  If more than one BeanNameAutoProxyCreator is defined without an id (which makes sense as they are never referred to by anythnig else) then only the one defined last gets called.  This may apply to all AbstractAutoProxyCreator's or BeanPostProcessor's, but I've only observed it with BeanNameAutoProxyCreator.   ---  **Affects:** 1.0.2","closed","in: core,","spring-projects-issues","2004-07-19T12:46:45Z","2004-07-27T12:46:45Z"
"","4934","Create beans in two phases, first constructs with constructor-arg, second sets properties [SPR-203]","**[Damon Maria](https://jira.spring.io/secure/ViewProfile.jspa?name=machine)** opened **[SPR-203](https://jira.spring.io/browse/SPR-203?redirect=false)** and commented  At the moment something like this below cannot work, even tho' it should be possible.  \ \ \ \\\ \ \ \ \ \\\ \   If bean creation ran in two phases, the first constructing the new objects (with constructor-arg's), the second setting properties then this would work.  b would be constructed a would be constructed passing in b c would be constructed passing in a property d of b would be set   ---  **Affects:** 1.0.2","closed","type: enhancement,","spring-projects-issues","2004-07-02T18:41:34Z","2009-12-07T06:52:45Z"
"","4933","FieldFactoryBean to get value of feilds [SPR-202]","**[Damon Maria](https://jira.spring.io/secure/ViewProfile.jspa?name=machine)** opened **[SPR-202](https://jira.spring.io/browse/SPR-202?redirect=false)*** and commented  Similar to MethodInvokingFactoryBean.  The main use I can see for this would be accessing public static final constants.   ---  **Affects:** 1.0.2  **Attachments:** - [fieldFactory-20040727.patch](https://jira.spring.io/secure/attachment/10154/fieldFactory-20040727.patch) (_12.61 kB_) - [test-fw](https://jira.spring.io/secure/attachment/10130/test-fw) (_31.64 kB_)  3 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2004-07-02T17:16:27Z","2019-01-11T13:31:31Z"
"","4932","constructor-arg's should use order specified in XML file [SPR-201]","**[Damon Maria](https://jira.spring.io/secure/ViewProfile.jspa?name=machine)** opened **[SPR-201](https://jira.spring.io/browse/SPR-201?redirect=false)** and commented  If two constructor-arg's are of the same type, and neither specify an index then Spring doesn't seem to use the order they were defined in as the default index order.  This leads to unnecessarily having to specify the index.   ---  **Affects:** 1.0.2","closed","type: enhancement,","spring-projects-issues","2004-07-02T17:13:14Z","2005-04-18T23:35:53Z"
"","4931","autowire=""constructor"" on FactoryBean causes infinte loop [SPR-200]","**[Damon Maria](https://jira.spring.io/secure/ViewProfile.jspa?name=machine)** opened **[SPR-200](https://jira.spring.io/browse/SPR-200?redirect=false)** and commented  autowire=""constructor"" causes Spring to go looking for beans by type to fill in the constructor arguments. This ends up calling DefaultListableBeanFactory.getBeansOfType with includeFactoryBeans=true. This will in turn call getBean(FACTORY_BEAN_PREFIX + factoryNames[i]) on all FactoryBean's.  But this getBean call will find itself if the bean being autowired is a FactoryBean. And so we end up in an infinite loop.   ---  **Affects:** 1.0.2","closed","in: core,","spring-projects-issues","2004-07-02T15:43:12Z","2004-07-26T08:31:54Z"
"","4898","and  can refer to bean parent factory if bean named same in local [SPR-166]","**[Damon Maria](https://jira.spring.io/secure/ViewProfile.jspa?name=machine)** opened **[SPR-166](https://jira.spring.io/browse/SPR-166?redirect=false)** and commented  Probably easiest if I explain my situation. I have a factory from 'beans.xml' that defines all my business beans. I then have multiple web application context(s) 'applicationContext.xml' with a single instance of the beans.xml factory as their parent.  I want to be able to create proxies for caching in applicationContext.xml of beans in beans.xml with the same name they have in beans.xml. This is because each web context may have different caching requirements and I want the caching to be transparent (i.e. use the same bean name).  Currently (I think) with the satandard classes there is no way to do this. A ProxyFactoryBean doesn't work because when it refers target it will pickup itself rather than the bean in the parent factory (they have the same name rememebr). BeanNameAutoProxyCreator doesn't work because it can only process beans in the current factory (well, that's how it appeared to work to me).  My proposed solution is to add a new attribute (in addition to local="""" and bean="""") to the \ and \ tags. This attribute would only look for the bean in the _parent_ context. As for what this attribute would be called I'm not sure (and don't really care), possibilities would be parent/inherited/external.   --- No further details from [SPR-166](https://jira.spring.io/browse/SPR-166?redirect=false)","closed","type: enhancement,","spring-projects-issues","2004-06-11T15:31:28Z","2004-06-20T08:06:43Z"
"","4889","MethodInvokingFactoryBean if refered to by pre-instantiated singleton isn't prepare()d [SPR-157]","**[Damon Maria](https://jira.spring.io/secure/ViewProfile.jspa?name=machine)** opened **[SPR-157](https://jira.spring.io/browse/SPR-157?redirect=false)** and commented  \ \ \nz.co.ontap.StandardLookup.processLookupMapper\ \ \ \ \ \ \ \  If a bean that refers to lookupMapper is instantiated from preInstantiateSingletons() then it's afterPropertiesSet() hasn't called and therefore MethodInvoker.prepare() isn't called before MethodInvoker.invoke() - causing a NPE.  If lookupMapper isn't referred to by any other beans then there is no problem, it is created properly.   ---  **Affects:** 1.0.2","closed","in: core,","spring-projects-issues","2004-06-05T15:43:25Z","2004-06-06T18:39:18Z"
"","5271","Property editors support for indexed and mapped properties [SPR-542]","**[Damir Murat](https://jira.spring.io/secure/ViewProfile.jspa?name=dmurat)** opened **[SPR-542](https://jira.spring.io/browse/SPR-542?redirect=false)** and commented  Hi,  Is it possible to add property editor support for indexed and mapped properties specified through \ element in configuration? I.e. if one have configuration like this  \ \ \ \10\ \testing.MyBean\ \ \ \  than all elements in list will be String instances. I will like a mechanism here which enables specification of list type, which will result in usage of registered property editors. This type can maybe be specified as an attribute of value element (i.e. \10\) or maybe as a special prefix of concrete value (i.e. \(java.lang.Long)10\). I am aware that above example can be configured differently to achieve same result (using factory class and method as one possibility) but it seems to me that usage of property editors will be more elegant.  Of course, such functionally maybe already exists in Spring, but I'm not aware of it and couldn't find any reference to it (including asking on forums). If this is the case, any help will be great.  Thanks, Damir Murat  ---  **Affects:** 1.1.3  **Issue Links:** - #5327 use property editors for value elements in lists and maps (_**""is duplicated by""**_)","closed","type: enhancement,","spring-projects-issues","2004-12-10T20:50:42Z","2019-01-11T12:42:13Z"
"","5270","Refactoring of struts.ContextLoaderPlugIn class [SPR-541]","**[Damir Murat](https://jira.spring.io/secure/ViewProfile.jspa?name=dmurat)** opened **[SPR-541](https://jira.spring.io/browse/SPR-541?redirect=false)** and commented  Hi, I am trying to extend org.springframework.web.struts.ContextLoaderPlugIn class via overriding initWebApplicationContext() method. What I miss here are ActionServlet and ModuleConfig parameters originally passed to init() method. Is it possible to change initWebApplicationContext() method so that it includes those params?  Thanks, Damir Murat   ---  **Affects:** 1.1.3","closed","type: enhancement,","spring-projects-issues","2004-12-10T20:17:49Z","2004-12-10T22:21:29Z"
"","5244","CustomDateEditor improwement to disallow date overflowing [SPR-515]","**[Damir Murat](https://jira.spring.io/secure/ViewProfile.jspa?name=dmurat)** opened **[SPR-515](https://jira.spring.io/browse/SPR-515?redirect=false)** and commented  Hi  I have a suggestion for improvement of CustomDateEditor. Currently CustomDateEditor allows date 'overflowing' (i.e. date '32.01.2004' will be accepted and interpreted as '01.02.2004'). I think that there should be constructor flag in CustomDateEditor which disallow this. Even better, disallowing of date overflowing should be default.  Here is an example of proposed change in CustomDateEditor:  public class CustomDateEditor extends PropertyEditorSupport { private final DateFormat m_dateFormat; private final boolean m_allowEmpty; private final boolean m_allowOverflowing;  public CustomDateEditor (final DateFormat p_dateFormat) { this(p_dateFormat, false, false); }  public CustomDateEditor ( final DateFormat p_dateFormat, final boolean p_allowEmpty) { this(p_dateFormat, p_allowEmpty, false); }  public CustomDateEditor ( final DateFormat p_dateFormat, final boolean p_allowEmpty, final boolean p_allowOverflowing) { m_dateFormat = p_dateFormat; m_allowEmpty = p_allowEmpty; m_allowOverflowing = p_allowOverflowing; }  public void setAsText(final String p_text) { if (m_allowEmpty && !StringUtils.hasText(p_text)) { // treat empty String as null value setValue(null); } else { Date date = null; try { date = m_dateFormat.parse(p_text); } catch (ParseException ex) { throw new IllegalArgumentException( ""Could not parse date: "" + ex.getMessage()); }        if (!m_allowOverflowing) {         String newText = m_dateFormat.format(date);         if (!p_text.equals(newText)) {           String msg = ""String '"" + p_text + ""' is not a date."";           throw new IllegalArgumentException(msg);         }       }            setValue(date);     }  }  public String getAsText() { if (getValue() == null) { return """"; } else { return m_dateFormat.format((Date) getValue()); } } }  Regards, Damir Murat   ---  **Affects:** 1.1.2","closed","type: enhancement,","spring-projects-issues","2004-12-03T08:33:59Z","2004-12-04T10:06:35Z"
"","5210","Support for changing 'ignore unknown properties' mode in DataBinder. [SPR-481]","**[Damir Murat](https://jira.spring.io/secure/ViewProfile.jspa?name=dmurat)** opened **[SPR-481](https://jira.spring.io/browse/SPR-481?redirect=false)** and commented  During binding of PropertyValues instance (bind() method of DataBinder), on underlying BeanWrapperImpl instance DataBinder invokes method setPropertyValues(pvs, true) which ignores unknown properties from PropertyValues instance. There is some situations where this is undesired behavior. So, I think there is a need for setIgnoreUnknownProperties(boolean) method on DataBinder which can enable to change 'ignore' mode.  Regards, Damir Murat   --- No further details from [SPR-481](https://jira.spring.io/browse/SPR-481?redirect=false)","closed","type: enhancement,","spring-projects-issues","2004-11-23T07:09:21Z","2004-11-25T17:43:02Z"
"","5188","NullPointerException in BeanWrapperImpl when handling property editors for map elements [SPR-459]","**[Damir Murat](https://jira.spring.io/secure/ViewProfile.jspa?name=dmurat)** opened **[SPR-459](https://jira.spring.io/browse/SPR-459?redirect=false)** and commented  I think that I found a bug in BeanWrapperImpl class. Here is a description.  If you register custom property editor for element of map property (i.e. myMap[date]), and if you try to put, say, String (instead of Date) to that element, then NullPointerException will pop up from TypeMismatchException constructor. Problem lies in line 878 of BeanWrapperImpl which tries to construct TypeMismatchException with parameter requiredType set to null. Then, during creation of his error message, TypeMismatchException will call requiredType.getName() which will produce NPE.  If you need I can provide some simple examples which verify this.  Regards, Damir Murat   ---  **Affects:** 1.1.1","closed","in: core,","spring-projects-issues","2004-11-14T09:54:44Z","2004-11-14T19:09:04Z"
"","5009","BeanWrapperImpl registration of editors for nested paths with null values [SPR-278]","**[Damir Murat](https://jira.spring.io/secure/ViewProfile.jspa?name=dmurat)** opened **[SPR-278](https://jira.spring.io/browse/SPR-278?redirect=false)** and commented  Juergen, recent changes on BeanWrapperImpl implementation are what I'm hoping for and I'm very happy with that. Indeed there is no support for mixing editors for maps/lists and their elements, but I can live with that (it is not really that important).  Still, there are some problems left, so I open this issue again (please accept apologies for my impatience :) ).  Here is a first problem: Current version of findCustomEditor() method doesn't work for lists because an InvalidPropertyException with IndexOutOfBoundsException cause is thrown. (I think that same apply on sets and arrays). Problem lies in getPropertyType() method which tries to determine property type based on property value (line 921 of your latest source). But if that value is not in list yet, an IndexOutOfBoundException will emerge. I suppose it could be easily solved by putting line 283 in try/catch block which will ignore InvalidPropertyException. Here is a small example which demonstrates this (exception will be thrown at line 6):  1. SimpleDateFormat dateFormatEur = new SimpleDateFormat(""dd.MM.yyyy""); 2. CustomDateEditor dateEditorEur = new CustomDateEditor(dateFormatEur, false); 3. BeanWrapperImpl bw = new BeanWrapperImpl(new Person()); 4. bw.registerCustomEditor(null, ""friends.birthDate"", dateEditorEur); 5. bw.setPropertyValue(""friends"", new ArrayList()); 6. bw.setPropertyValue(""friends[0]"", new Person());         // InvalidPropertyException 7. bw.setPropertyValue(""friends[0].birthDate"", ""10.10.1980"");  And a second one: Even with above changes implemented, findCustomEditor() method still won't work as expected. Suppose that you register some property editor for property path 'employees.person.birthDate'. If you later try to retrieve it via findCutomEditor() with property path 'employees[id1].person.birthDate ' (note a key), a null will be returned instead of editor registered under path 'employees.person.birthDate'. I think this is wrong behavior.  In attachment can be found a simple tester which demonstrates described problems, and my proposal for findCustomEditor() method implementation which (I hope) fixes it. Also note that I didn't run this implementation against spring's test suite.  Best regards, Damir Murat   ---  **Affects:** 1.1 final  **Attachments:** - [sources.zip](https://jira.spring.io/secure/attachment/10168/sources.zip) (_4.18 kB_)","closed","in: core,","spring-projects-issues","2004-08-22T02:08:32Z","2004-08-23T08:56:15Z"
"","5005","BeanWrapper support for registration of editors for nested paths containing null values [SPR-274]","**[Damir Murat](https://jira.spring.io/secure/ViewProfile.jspa?name=dmurat)** opened **[SPR-274](https://jira.spring.io/browse/SPR-274?redirect=false)** and commented  I've posted some comments on spring forum about this issue. Here there are:  first post  ---  It seems that registration of custom editors in BeanWrapperImpl doesn't work as expected (or I'm missing some important point). Consider the following example:  Code:  1. SimpleDateFormat dateFormat = new SimpleDateFormat(""dd.MM.yyyy"");  2. CustomDateEditor dateEditor = new CustomDateEditor(dateFormat, false);  3. Company company = new Company();  4. BeanWrapperImpl bw = new BeanWrapperImpl(company);  5. bw.registerCustomEditor(null, ""employees.birthDate"", dateEditor);  6. bw.setPropertyValue(""employees"", new HashMap());  7. bw.setPropertyValue(""employees[id1]"", new Person());  8. bw.setPropertyValue(""employees[id1].birthDate"", ""10.10.1990"");  In this example, in line 5 NullPointerException is thrown (probably wrong exception, but this is not important for my point). After some Spring code inspection, it seems to me that editor registration is available only on maps (and list) already filled with elements, which means that you can not define editors upfront. Furthermore, it seems that even if you setup maps/lists before registration of editors, and after registration add some more elements, newly added elements will not be edited via property editors. Can anybody comment, please? Is there some workaround maybe?  Regards Damir Murat  ---  second post:  ---  Since my last post, I've done some code patching on original BeanWrapperImpl to make him satisfy my needs. Here is list of features that I need, and original BeanWrapperImpl doesn't seem to supports it (or I'm using it in very wrong way :) ) - It is impossible to register property specific custom property editors   if properties are in nested path which contains null elements. This   effectively disables complex upfront registration of custom property editors. - On newly added elements to map/list property editor configuration doesn't   apply. I.e. if you configure property editor for all map elements, it will   be applied to all current map members, but if you latter add new elements   they will not have a corresponding property editor. - You can not mix configuration for map and their elements.  It would be very nice that BeanWrapperImpl supports those (I hope it will in future). Meanwhile, I managed to implement patch which does (at least I believe so). I also run it through unit tests in 'org.springframework.beans' package without problems.  Unfortunately, attachments can't be posted here, so if anyone is interested, I will be more than happy to send code via email or something.  Regards Damir  ---  ---  **Affects:** 1.1 RC2  **Attachments:** - [patch.zip](https://jira.spring.io/secure/attachment/10167/patch.zip) (_14.61 kB_)","closed","type: enhancement,","spring-projects-issues","2004-08-20T01:30:36Z","2019-01-13T22:54:18Z"
"","5751","DataBinder to remember rejected 'not allowed' fields. [SPR-1044]","**[Damir Murat](https://jira.spring.io/secure/ViewProfile.jspa?name=dmurat)** opened **[SPR-1044](https://jira.spring.io/browse/SPR-1044?redirect=false)** and commented  Besides simple warning logging, DataBinder should remember which fields were rejected because they are not allowed. In web environment this will enable additional processing of such potential security attack such as session invalidation and user logoff. Maybe some flag could be added which will configure DataBainder to remember, or not, those fields.  Tnx   ---  **Affects:** 1.2.1  **Attachments:** - [BaseCommandController.java](https://jira.spring.io/secure/attachment/11145/BaseCommandController.java) (_16.69 kB_) - [DataBinder.java](https://jira.spring.io/secure/attachment/11144/DataBinder.java) (_17.58 kB_)  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2005-06-15T08:36:34Z","2019-01-11T18:37:06Z"
"","5750","Custom Property Editor not applied to ""typed"" values in map [SPR-1043]","**[Dallas Hopewell](https://jira.spring.io/secure/ViewProfile.jspa?name=dallas)** opened **[SPR-1043](https://jira.spring.io/browse/SPR-1043?redirect=false)** and commented  I want to configure a \ element in my applicationContext.xml where the entry values have to be converted to a specific type  \ \ \ \ \2005-01-01\ \ \ \ \  I have declared a CustomDateEditor for the java.util.Date type in the application context via the CustomEditorConfigurer.  However, when the application context is loaded I get the following exception: -  Exception in thread ""main"" org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'map' defined in class path resource [applicationContext.xml]: Error converting typed String value for sourceMap[myDate]; nested exception is org.springframework.beans.TypeMismatchException: Failed to convert property value of type [java.lang.String] to required type [java.util.Date] org.springframework.beans.TypeMismatchException: Failed to convert property value of type [java.lang.String] to required type [java.util.Date] at org.springframework.beans.BeanWrapperImpl.doTypeConversionIfNecessary(BeanWrapperImpl.java:1040) at org.springframework.beans.BeanWrapperImpl.doTypeConversionIfNecessary(BeanWrapperImpl.java:917) at org.springframework.beans.factory.support.AbstractBeanFactory.doTypeConversionIfNecessary(AbstractBeanFactory.java:601) at org.springframework.beans.factory.support.AbstractBeanFactory.doTypeConversionIfNecessary(AbstractBeanFactory.java:581) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:123) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveManagedMap(BeanDefinitionValueResolver.java:225) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:117) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:891) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:707) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:316) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:222) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:146) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:271) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:310) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:80) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:65) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:56)[/code]  Spring is only applying the default property editors when converting the ""TypedStringValue"".  e.g. line 123 of BeanDefinitionValueResolver.java invokes the 2 parameter version of AbstractBeanFactory.doTypeConversionIfNecessary, which creates a new BeanWrapperImpl but does not register the customEditors previously setup in the bean factory.   ---  **Affects:** 1.2.1  **Attachments:** - [applicationContext.xml](https://jira.spring.io/secure/attachment/10796/applicationContext.xml) (_1.26 kB_)  2 votes, 3 watchers","closed","in: core,","spring-projects-issues","2005-06-14T19:36:29Z","2005-06-27T12:54:58Z"
"","4904","The closeConnectionIfNecessary method hides real exception [SPR-172]","**[daikei mou](https://jira.spring.io/secure/ViewProfile.jspa?name=moudaikei)** opened **[SPR-172](https://jira.spring.io/browse/SPR-172?redirect=false)** and commented  I think there is a problem in the closeConnectionIfNecessary method of DataSourceUtils class. The following is the code snippet.      try {          con.close();     }     catch (SQLException ex) {          throw new CannotCloseJdbcConnectionException(""Could not close JDBC connection"", ex);     }  You know a SQLException occured by "" con.close() "" will hide the real exception because this method is always used in a finally block. I think you can solve this problem just like you did in the closeStatement method  of  JdbcUtils class.  Best regards,  daikei mou   ---  **Affects:** 1.0.2","closed","type: enhancement,","spring-projects-issues","2004-06-17T18:31:08Z","2004-06-20T08:12:37Z"
"","5760","Hibernate Connection Pool configuration [SPR-1053]","**[Cyrille Mach](https://jira.spring.io/secure/ViewProfile.jspa?name=cyrmach)** opened **[SPR-1053](https://jira.spring.io/browse/SPR-1053?redirect=false)** and commented  It seems that the connection pool configuration for hibernate/C3P0 or hibernate/DBCP is ignored when placed in applicationConfig.xml. However it is not ignored when placed in hibernate.properties  This doesn't work: \ \\\ \ \ \something.hbm.xml\ \ \ \ \ \net.sf.hibernate.dialect.DerbyDialect\ \100\                  2                 12000                 10                 true                 true                 on_close                             this works: \ \ \hibernate.properties\ \ \                                          brod.hbm.xml                                                        with hibernate.properties: hibernate.connection.driver_class=com.ibm.db2.jcc.DB2Driver hibernate.connection.url=rieveMessagesFromServerOnGetMessage=true hibernate.connection.username= hibernate.connection.password=  hibernate.connection.release_mode=on_close hibernate.dialect=net.sf.hibernate.dialect.DerbyDialect hibernate.show_sql=true hibernate.cglib.use_reflection_optimizer=true  hibernate.max_fetch_depth = 3 hibernate.cache.provider_class=net.sf.hibernate.cache.EhCacheProvider hibernate.cache.use_query_cache = true hibernate.statement_cache.size=50 hibernate.query.substitutions=true=1,false=0 hibernate.jdbc.use_streams_for_binary=true hibernate.connection.readOnly=false  hibernate.dbcp.maxActive = 100 hibernate.dbcp.defaultAutoCommit=false hibernate.dbcp.whenExhaustedAction = 2 hibernate.dbcp.maxWait = 12000 hibernate.dbcp.maxIdle = 10  1. cache for prepared statements very important    hibernate.dbcp.ps.maxActive = 100    hibernate.dbcp.ps.whenExhaustedAction = 1    hibernate.dbcp.ps.maxWait = 12000    hibernate.dbcp.ps.maxIdle = 5    ---  **Affects:** 1.2.1","closed","status: declined,","spring-projects-issues","2005-06-17T07:10:57Z","2019-01-12T16:41:12Z"
"","5430","org.springframework.util.StringUtils#tokenizeToStringArray not honoring ignoreEmptyTokens parameter [SPR-702]","**[Curtis Light](https://jira.spring.io/secure/ViewProfile.jspa?name=clight)** opened **[SPR-702](https://jira.spring.io/browse/SPR-702?redirect=false)** and commented  I noticed that the org.springframework.util.StringUtils#tokenizeToStringArray method does not honor the ignoreEmptyTokens parameter (at least as I think it would).  For example, I have the following code in my application:  String[] tokens = StringUtils.tokenizeToStringArray(lineText, "","", true, false);  if (tokens.length < CSV_TOKEN_COUNT) { parseViolations.add(new ParseViolation(lineNumber, ""Ensure that this line contains "" + CSV_TOKEN_COUNT + "" fields. Only "" + tokens.length + "" fields were found.""));   return null;   }  If I provide a string that looks like:  a,,b,c,d,,e,f,g,h,,  and CSV_TOKEN_COUNT is 12, then I get:  ""Ensure that this line contains 12 fields. Only 8 fields were found.""  This is not the behavior I expected with setting ignoreEmptyTokens to ""false.""  This occurs in Spring 1.1.3, and from looking at CVS, I assume it would still be a problem in the current revision.  I ran into this problem with java.util.StringTokenizer when I was working on something similar before.  My solution was to use http://ostermiller.org/utils/StringTokenizer.html, which handles the empty tokens appropriately.  What action should be taken with this issue?  I could provide a patch that uses com.Ostermiller.util.StringTokenizer, but I don't know if this would cause license problems for Spring (as the com.Ostermiller.util libraries are GPL).   ---  **Affects:** 1.1.3, 1.1.4, 1.1.5","closed","in: core,","spring-projects-issues","2005-02-10T06:33:32Z","2019-01-12T16:41:43Z"
"","5756","CustomDateEditor is too lenient.  We would like to force a 4 digit year. [SPR-1049]","**[CT](https://jira.spring.io/secure/ViewProfile.jspa?name=ct)** opened **[SPR-1049](https://jira.spring.io/browse/SPR-1049?redirect=false)** and commented  My company is developing a web application that accepts dates.  We would like to force users to enter a 4 digit year.  Right now our SimpleDateFormat is setup using ""MM/dd/yyyy"", but a 2 digit year can still be entered.  I have created a new constructor for CustomDateEditor which accepts a new parameter, an integer ""exactDateLength"".  The ""exactDateLength"" parameter states; if the date string does not exactly match the length specified, that IllegalArgumentException gets thrown.  This is because SimpleDateFormat does not enforce this, even with setLenient(false).  Without exactDateLength the string 01/01/05 gets parsed to 01/01/0005 not 01/01/2005.      String df = ""MM/dd/yyyy"";     SimpleDateFormat dateFormat = new SimpleDateFormat(df);     dateFormat.setLenient(false);     CustomDateEditor de = new CustomDateEditor(dateFormat, true, df.length());  See: http://java.sun.com/j2se/1.4.2/docs/api/java/text/SimpleDateFormat.html Year:  For formatting, if the number of pattern letters is 2, the year is truncated to 2 digits; otherwise it is interpreted as a number.  For parsing, if the number of pattern letters is more than 2, the year is interpreted literally, regardless of the number of digits. So using the pattern ""MM/dd/yyyy"", ""01/11/12"" parses to Jan 11, 12 A.D.  For parsing with the abbreviated year pattern (""y"" or ""yy""), SimpleDateFormat must interpret the abbreviated year relative to some century. It does this by adjusting dates to be within 80 years before and 20 years after the time the SimpleDateFormat instance is created. For example, using a pattern of ""MM/dd/yy"" and a SimpleDateFormat instance created on Jan 1, 1997, the string ""01/11/12"" would be interpreted as Jan 11, 2012 while the string ""05/04/64"" would be interpreted as May 4, 1964. During parsing, only strings consisting of exactly two digits, as defined by Character.isDigit(char), will be parsed into the default century. Any other numeric string, such as a one digit string, a three or more digit string, or a two digit string that isn't all digits (for example, ""-1""), is interpreted literally. So ""01/02/3"" or ""01/02/003"" are parsed, using the same pattern, as Jan 2, 3 AD. Likewise, ""01/02/-3"" is parsed as Jan 2, 4 BC.   ---  **Affects:** 1.2.2  **Attachments:** - [fix-dateformat-error.patch](https://jira.spring.io/secure/attachment/10800/fix-dateformat-error.patch) (_6.99 kB_)","closed","type: enhancement,","spring-projects-issues","2005-06-16T11:47:52Z","2005-08-02T01:06:01Z"
"","5689","update for JMX remote connectors [SPR-977]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-977](https://jira.spring.io/browse/SPR-977?redirect=false)** and commented  I have updated the JSR-160 connectors from the JMX documentation. Unfortunatelly I don't know how to generate a valid docbook document so I attached the initial word document along with the exported XML.   ---  **Affects:** 1.2 final  **Attachments:** - [springjmx-connectors.doc](https://jira.spring.io/secure/attachment/10740/springjmx-connectors.doc) (_50.00 kB_) - [springjmx-connectors.xml](https://jira.spring.io/secure/attachment/10741/springjmx-connectors.xml) (_27.62 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/da97547f001aa16e4dbf240e329389859b8549ee","closed","type: enhancement,","spring-projects-issues","2005-05-23T20:15:47Z","2012-06-19T03:53:59Z"
"","5372","saveOrUpdateAll method added into Hibernateoperations and HibernateTemplate [SPR-644]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-644](https://jira.spring.io/browse/SPR-644?redirect=false)** and commented  Hello.  I was saw that HiberanteOperations (and thus HibernateTemplate) contains deleteAll, findAll but no saveOrUpdateAll. I personally use it as my application requires a lot of computations to be made and the result involves more than one entity.  The improvement would mean to add saveOrUpdate, saveAll, updateAll methods to HibernateOperations interface (and it's implementations).  Also in regard to flushing related to collections: wouldn't be more effective to save flush mode before doing, change it into FlushMode.NEVER druing the deleting/saving operation and then turn it back on (with the initial value)?  (http://forum.springframework.org/viewtopic.php?t=3067)   ---  **Affects:** 1.1.3  **Attachments:** - [HibernateOperations.java](https://jira.spring.io/secure/attachment/10441/HibernateOperations.java) (_35.51 kB_) - [HibernateTemplate.java](https://jira.spring.io/secure/attachment/10440/HibernateTemplate.java) (_45.11 kB_)","closed","type: enhancement,","spring-projects-issues","2005-01-20T18:15:10Z","2005-01-24T00:24:43Z"
"","4905","Add Accessors in JavaMailSenderImpl [SPR-173]","**[Cory Hacking](https://jira.spring.io/secure/ViewProfile.jspa?name=coryhacking)** opened **[SPR-173](https://jira.spring.io/browse/SPR-173?redirect=false)** and commented  Add accessors for session, protocol, host, username, and password so that they can be used by classes that extend JavaMailSenderImpl.   ---  **Affects:** 1.0.2","closed","type: enhancement,","spring-projects-issues","2004-06-17T18:42:00Z","2004-06-17T22:10:21Z"
"","5160","Apply DependencyInjectionInterceptorFactoryBean Functionality to Newly Created Instances [SPR-431]","**[Corby Page](https://jira.spring.io/secure/ViewProfile.jspa?name=cepage)** opened **[SPR-431](https://jira.spring.io/browse/SPR-431?redirect=false)** and commented  Currently, the DependencyInjectionInterceptorFactoryBean will apply DI functionality to objects that are instantiated and hydrated by Hibernate through API's such as session.find()  However, this functionality is not available to beans that I instantiate and persist through a call to session.save(). For example, in integration tests I may create a number of Hibernate-persisted objects, perform operations on them, and then rollback my transaction to clean the database. In this scenario, dependency injection will never be performed on my Hibernate objects.  I can wire the obejcts manually on create, but this is a little bit awkward since I need access to the application context. It would be nice if there were some sort of construct that applied DependencyInjectionAspectSupport to my persistent objects on calls to session.save(), just like I currently can with calls to session.find()   ---  **Affects:** 1.2 RC1  3 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2004-10-26T05:55:34Z","2006-03-09T03:14:56Z"
"","5794","AbstractWizardFormController needs post-validation method [SPR-1090]","**[Connor Barry](https://jira.spring.io/secure/ViewProfile.jspa?name=trekmbikes)** opened **[SPR-1090](https://jira.spring.io/browse/SPR-1090?redirect=false)** and commented  I am extending the AbstractWizardFormController in my application, and my wizard has two pages. My command object needs to be updated between page 1 and 2; that is, the elements displayed on page 2 are dependent on the page 1 user choices.  To change the command object, I need to extend some function. Currently there is no protected, non-final method that is called after the page is validated:  - isFinish is only called after page 2 is submitted - onBindAndValidate is called after binding, but before the validatePage method - processFormSubmission is declared final  My workaround is to implement validatePage() as expected and manually call my change method if we're on the first page, finish is false and there were no errors added to the errors object.   ---  **Affects:** 1.2.1","closed","type: enhancement,","spring-projects-issues","2005-06-30T09:53:26Z","2005-07-04T08:52:59Z"
"","5651","java.lang.NoClassDefFoundError: javax/transaction/TransactionManager [SPR-928]","**[Colly Myers](https://jira.spring.io/secure/ViewProfile.jspa?name=colly)** opened **[SPR-928](https://jira.spring.io/browse/SPR-928?redirect=false)** and commented  With the application context below I get the java.lang.NoClassDefFoundError: javax/transaction/TransactionManager error and the stack traceback as below. I can't find a javax.transaction package anywhere in the j2sdk1.4.2_08 release and guess that it must come from j2EE somehow. The reference to javax/transaction/TransactionManager is from org.springframework.orm.hibernate3.LocalSessionFactoryBean where it has a configuration property for a JTA transaction manager. I have hibernate3.jat and spring.jar in the classpath. Any help appreciated.  \ \\com.mysql.jdbc.Driver\\ \\jdbc:mysql://sv2.issuebits.com/test_knowledge_v03\\ \\kesuser\\ \\4iUNlUchIajLeq9e\\ \ \ \ \\\ \ \ \person.hbm.xml\ \ \ \ \ \org.hibernate.dialect.MySQLInnoDBDialect\ \true\ \false\ \ \ \ \ \\\ \  I get the following stack trace:  C:\Borland\JBuilder2005\j2sdk1.4.2_08\bin\javaw -classpath ""C:\development\tks2.0\test\tknowledge\classes;C:\Borland\JBuilder2005\thirdparty\junit3.8\junit.jar;C:\Borland\JBuilder2005\lib\unittest.jar;C:\development\tks2.0\test\tutil\classes;C:\Borland\JBuilder2005\lib\commons-collections.jar;C:\Borland\JBuilder2005\lib\commons-dbcp.jar;C:\Borland\JBuilder2005\lib\commons-logging.jar;C:\Borland\JBuilder2005\lib\commons-pool.jar;C:\Borland\JBuilder2005\lib\aopalliance.jar;C:\Borland\JBuilder2005\thirdparty\hibernate-3.0\lib\dom4j-1.6.jar;C:\Borland\JBuilder2005\thirdparty\MySql\mysql-connector-java-3.1.8-bin.jar;C:\Borland\JBuilder2005\thirdparty\hibernate-3.0\hibernate3.jar;C:\Borland\JBuilder2005\thirdparty\spring-framework-1.2-rc2\dist\spring.jar;C:\development\tks2.0\tks\classes;C:\Borland\JBuilder2005\lib\log4j-1.2.9.jar;C:\development\tks2.0\util\classes;C:\Borland\JBuilder2005\j2sdk1.4.2_08\demo\jfc\Java2D\Java2Demo.jar;C:\Borland\JBuilder2005\j2sdk1.4.2_08\demo\plugin\jfc\Java2D\Java2Demo.jar;C:\Borland\JBuilder2005\j2sdk1.4.2_08\jre\javaws\javaws.jar;C:\Borland\JBuilder2005\j2sdk1.4.2_08\jre\lib\charsets.jar;C:\Borland\JBuilder2005\j2sdk1.4.2_08\jre\lib\ext\dnsns.jar;C:\Borland\JBuilder2005\j2sdk1.4.2_08\jre\lib\ext\ldapsec.jar;C:\Borland\JBuilder2005\j2sdk1.4.2_08\jre\lib\ext\localedata.jar;C:\Borland\JBuilder2005\j2sdk1.4.2_08\jre\lib\ext\sunjce_provider.jar;C:\Borland\JBuilder2005\j2sdk1.4.2_08\jre\lib\im\indicim.jar;C:\Borland\JBuilder2005\j2sdk1.4.2_08\jre\lib\im\thaiim.jar;C:\Borland\JBuilder2005\j2sdk1.4.2_08\jre\lib\jce.jar;C:\Borland\JBuilder2005\j2sdk1.4.2_08\jre\lib\jsse.jar;C:\Borland\JBuilder2005\j2sdk1.4.2_08\jre\lib\plugin.jar;C:\Borland\JBuilder2005\j2sdk1.4.2_08\jre\lib\rt.jar;C:\Borland\JBuilder2005\j2sdk1.4.2_08\jre\lib\sunrsasign.jar;C:\Borland\JBuilder2005\j2sdk1.4.2_08\lib\dt.jar;C:\Borland\JBuilder2005\j2sdk1.4.2_08\lib\htmlconverter.jar;C:\Borland\JBuilder2005\j2sdk1.4.2_08\lib\tools.jar""  com.borland.jbuilder.unittest.JBTestRunner -socket COLLYADVENT:3356 com.issuebits.tks.test.tknowledge.TestSuiteTks 2005-05-08 18:01:45,734 INFO [com.issuebits.tks.tutil.KTHarness] - Logger configured from [log4j.properties]  2005-05-08 18:01:45,812 INFO [org.springframework.beans.factory.xml.XmlBeanDefinitionReader] - Loading XML bean definitions from class path resource [applicationcontext-hibernate.xml]  2005-05-08 18:01:46,046 INFO [org.springframework.context.support.ClassPathXmlApplicationContext] - Bean factory for application context [org.springframework.context.support.ClassPathXmlApplicationContext;hashCode=13582581]: org.springframework.beans.factory.support.DefaultListableBeanFactory defining beans [theKnowledgeDataSource,thePersonnelDataSource,theRankingDataSource,theSmsDataSource,thePersonnelSessionFactory,theKnowledgeTransactionManager,thePersonnelTransactionManager,theRankingTransactionManager,theSmsTransactionManager,theSystemOperator,theTestOperator,thePromotionOperator,theSmsService,theKeywordDao,theRankingService,thePersonManager,thePersonDao,theResearcherDao,basePersonnelTransactionProxy,thePersonnelService,thePersonnelServiceTarget,theKnowledgeServiceConfiguration,theDispatchManager,theAnswerCache,theCustomerCache,theQuestionCache,theAnswerDao,theCustomerDao,theDispatchDao,theQuestionDao,theSystemDao,theTextMessageHistoryDao,baseKnowledgeTransactionProxy,theKnowledgeService,theKnowledgeServiceTarget]; root of BeanFactory hierarchy  2005-05-08 18:01:46,109 INFO [org.springframework.context.support.ClassPathXmlApplicationContext] - 35 beans defined in application context [org.springframework.context.support.ClassPathXmlApplicationContext;hashCode=13582581]  2005-05-08 18:01:46,109 INFO [org.springframework.core.CollectionFactory] - JDK 1.4+ collections available  2005-05-08 18:01:46,125 INFO [org.springframework.core.CollectionFactory] - Commons Collections 3.x available  2005-05-08 18:01:46,140 INFO [org.springframework.context.support.ClassPathXmlApplicationContext] - Unable to locate MessageSource with name 'messageSource': using default [org.springframework.context.support.DelegatingMessageSource@1d009b4]  2005-05-08 18:01:46,140 INFO [org.springframework.context.support.ClassPathXmlApplicationContext] - Unable to locate ApplicationEventMulticaster with name 'applicationEventMulticaster': using default [org.springframework.context.event.SimpleApplicationEventMulticaster@e91f5d]  2005-05-08 18:01:46,140 INFO [org.springframework.beans.factory.support.DefaultListableBeanFactory] - Pre-instantiating singletons in factory [org.springframework.beans.factory.support.DefaultListableBeanFactory defining beans [theKnowledgeDataSource,thePersonnelDataSource,theRankingDataSource,theSmsDataSource,thePersonnelSessionFactory,theKnowledgeTransactionManager,thePersonnelTransactionManager,theRankingTransactionManager,theSmsTransactionManager,theSystemOperator,theTestOperator,thePromotionOperator,theSmsService,theKeywordDao,theRankingService,thePersonManager,thePersonDao,theResearcherDao,basePersonnelTransactionProxy,thePersonnelService,thePersonnelServiceTarget,theKnowledgeServiceConfiguration,theDispatchManager,theAnswerCache,theCustomerCache,theQuestionCache,theAnswerDao,theCustomerDao,theDispatchDao,theQuestionDao,theSystemDao,theTextMessageHistoryDao,baseKnowledgeTransactionProxy,theKnowledgeService,theKnowledgeServiceTarget]; root of BeanFactory hierarchy]  2005-05-08 18:01:46,156 INFO [org.springframework.beans.factory.support.DefaultListableBeanFactory] - Creating shared instance of singleton bean 'theKnowledgeDataSource'  2005-05-08 18:01:46,187 INFO [org.springframework.beans.factory.support.DefaultListableBeanFactory] - Creating shared instance of singleton bean 'thePersonnelDataSource'  2005-05-08 18:01:46,187 INFO [org.springframework.beans.factory.support.DefaultListableBeanFactory] - Creating shared instance of singleton bean 'theRankingDataSource'  2005-05-08 18:01:46,187 INFO [org.springframework.beans.factory.support.DefaultListableBeanFactory] - Creating shared instance of singleton bean 'theSmsDataSource'  2005-05-08 18:01:46,187 INFO [org.springframework.beans.factory.support.DefaultListableBeanFactory] - Creating shared instance of singleton bean 'thePersonnelSessionFactory'  2005-05-08 18:01:46,203 INFO [org.springframework.beans.factory.support.DefaultListableBeanFactory] - Destroying singletons in factory {org.springframework.beans.factory.support.DefaultListableBeanFactory defining beans [theKnowledgeDataSource,thePersonnelDataSource,theRankingDataSource,theSmsDataSource,thePersonnelSessionFactory,theKnowledgeTransactionManager,thePersonnelTransactionManager,theRankingTransactionManager,theSmsTransactionManager,theSystemOperator,theTestOperator,thePromotionOperator,theSmsService,theKeywordDao,theRankingService,thePersonManager,thePersonDao,theResearcherDao,basePersonnelTransactionProxy,thePersonnelService,thePersonnelServiceTarget,theKnowledgeServiceConfiguration,theDispatchManager,theAnswerCache,theCustomerCache,theQuestionCache,theAnswerDao,theCustomerDao,theDispatchDao,theQuestionDao,theSystemDao,theTextMessageHistoryDao,baseKnowledgeTransactionProxy,theKnowledgeService,theKnowledgeServiceTarget]; root of BeanFactory hierarchy}  Sun, 08 May 2005 18:01:46 : TUHarness()  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'thePersonnelSessionFactory' defined in class path resource [applicationcontext-hibernate.xml]: Instantiation of bean failed; nested exception is java.lang.NoClassDefFoundError: javax/transaction/TransactionManager  java.lang.NoClassDefFoundError: javax/transaction/TransactionManager      at java.lang.Class.getDeclaredMethods0(Native Method)          at java.lang.Class.privateGetDeclaredMethods(Class.java:1655)          at java.lang.Class.getDeclaredMethods(Class.java:1139)          at java.beans.Introspector$1.run(Introspector.java:1266)          at java.security.AccessController.doPrivileged(Native Method)          at java.beans.Introspector.getPublicDeclaredMethods(Introspector.java:1264)          at java.beans.Introspector.getTargetMethodInfo(Introspector.java:1129)          at java.beans.Introspector.getBeanInfo(Introspector.java:379)          at java.beans.Introspector.getBeanInfo(Introspector.java:153)          at org.springframework.beans.CachedIntrospectionResults.(CachedIntrospectionResults.java:140)          at org.springframework.beans.CachedIntrospectionResults.forClass(CachedIntrospectionResults.java:82)          at org.springframework.beans.BeanWrapperImpl.setIntrospectionClass(BeanWrapperImpl.java:310)          at org.springframework.beans.BeanWrapperImpl.setWrappedInstance(BeanWrapperImpl.java:268)          at org.springframework.beans.BeanWrapperImpl.setWrappedInstance(BeanWrapperImpl.java:250)          at org.springframework.beans.BeanWrapperImpl.(BeanWrapperImpl.java:203)          at org.springframework.beans.factory.support.AbstractBeanFactory.createBeanWrapper(AbstractBeanFactory.java:558)          at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:317)          at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:257)          at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:223)          at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:147)          at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:271)          at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:319)          at org.springframework.context.support.ClassPathXmlApplicationContext.(ClassPathXmlApplicationContext.java:80)          at org.springframework.context.support.ClassPathXmlApplicationContext.(ClassPathXmlApplicationContext.java:65)          at org.springframework.context.support.ClassPathXmlApplicationContext.(ClassPathXmlApplicationContext.java:56)          at com.issuebits.tks.tutil.KTHarness.initialise(KTHarness.java:63)          at com.issuebits.tks.tutil.KTHarness.(KTHarness.java:53)          at com.issuebits.tks.test.tknowledge.TestSuiteTks.suite(TestSuiteTks.java:22)          at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)          at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)          at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)          at java.lang.reflect.Method.invoke(Method.java:324)          at com.borland.jbuilder.unittest.JBTestRunner.constructTest(Unknown Source)          at com.borland.jbuilder.unittest.JBTestRunner.setTest(Unknown Source)          at com.borland.jbuilder.unittest.JBTestRunner.initiateTest(Unknown Source)          at com.borland.jbuilder.unittest.JBTestRunner.main(Unknown Source)    ---  **Affects:** 1.2 RC2","closed","in: core,","spring-projects-issues","2005-05-08T04:22:01Z","2019-01-12T16:41:23Z"
"","5354","Allow 'exclude me from being autowire target' attribute for beans [SPR-626]","**[Colin Sampaleanu](https://jira.spring.io/secure/ViewProfile.jspa?name=colin.sampaleanu)** opened **[SPR-626](https://jira.spring.io/browse/SPR-626?redirect=false)** and commented  Autowiring is pretty nice for some situations, but it breaks down when there are two instances of a certain type. For example, you may have the service target, and the tx wrapped service target, and both are needed as separate beans for some reason.  Autowiring will fail in this case, with two matching beans. What would be nice is the ability to add an attribute (false by default for backwards compatibility) to a bean definition which says, ""do not consider me as a candidate value for autowiring another bean"". This bean could of course still be used to autowire another bean by name, or via an explicit \ tag.   ---  **Affects:** 1.1.4  **Attachments:** - [autowiringCandidatePatch.zip](https://jira.spring.io/secure/attachment/10894/autowiringCandidatePatch.zip) (_41.50 kB_) - [autowiringCandidatePatch.zip](https://jira.spring.io/secure/attachment/10893/autowiringCandidatePatch.zip) (_41.50 kB_)  2 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2005-01-14T04:53:48Z","2019-01-11T12:51:30Z"
"","5268","no messagesource in context means parent context message source not used [SPR-539]","**[Colin Sampaleanu](https://jira.spring.io/secure/ViewProfile.jspa?name=colin.sampaleanu)** opened **[SPR-539](https://jira.spring.io/browse/SPR-539?redirect=false)** and commented  When an application context does not contain a MessageSource bean under the special ""messageSource"" name, then Spring creates an empty, static, message source which is used just so it can handle calls on the MessageSource interface. But in this case, no delegation is done to any parent context message source, as it would if the context did have a declared message soruce.  I don't think this is correct; delegation should happen with or without a message source declared in the child.   ---  **Affects:** 1.1.3","closed","in: core,","spring-projects-issues","2004-12-10T05:26:31Z","2004-12-10T05:37:16Z"
"","5214","Allow locale binding to threadlocal for use by MessageSourceAccessor [SPR-485]","**[Colin Sampaleanu](https://jira.spring.io/secure/ViewProfile.jspa?name=colin.sampaleanu)** opened **[SPR-485](https://jira.spring.io/browse/SPR-485?redirect=false)** and commented  Allow MessageSourceAccessor to get current locale from a thread-bound variable somehow, for use by lower layer code that doesn't have access to ServletContext. See forum thread: http://forum.springframework.org/viewtopic.php?t=1108 That doesn't have to mean that messagesource accessor itself necssarily needs to be updated (although it makes sense), but at least there is a built-in interceptor which can do the binding, and class to look it up too...   ---  **Affects:** 1.1.2  2 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2004-11-23T22:09:26Z","2005-04-07T18:16:33Z"
"","5192","JndiObjectFactoryBean really needs as lookupOnStartup property [SPR-463]","**[Colin Sampaleanu](https://jira.spring.io/secure/ViewProfile.jspa?name=colin.sampaleanu)** opened **[SPR-463](https://jira.spring.io/browse/SPR-463?redirect=false)** and commented  JndiObjectFactoryBean really needs as lookupOnStartup property...  If somebody is not happy with the default JndiObjectFactoryBean behaviour of looking up the object on startup (looking up EJB homes is one of the prime candidates, as they are often not available yet when the webapp is already going), then this:           	SimpleWithCmtAndNoSpringTx       becomes  \ \ \ \\SimpleWithCmtAndNoSpringTx\\ \\false\\ \ \ \ \org.springframework.autobuilds.ejbtest.simple.ejb.SimpleHomeRemote\ \ \ That's way too much work, in my opinion...   ---  **Affects:** 1.1.2","closed","type: enhancement,","spring-projects-issues","2004-11-15T02:55:25Z","2004-11-15T07:23:35Z"
"","5163","ProxyFactoryBean getObjectType broken for prototypes in some cases [SPR-434]","**[Colin Sampaleanu](https://jira.spring.io/secure/ViewProfile.jspa?name=colin.sampaleanu)** opened **[SPR-434](https://jira.spring.io/browse/SPR-434?redirect=false)** and commented  See this forum thread: http://forum.springframework.org/viewtopic.php?t=1166  In ProxyFactoryBean, if you proxy a prototype by feeding the proxy factory a PrototypeTargetSource yourself, the getObjectType() method will work fine, as it will query the PrototypeTargetSource instance. On the other hand, if you rely on instead feeding the target bean name as the last name in the list of interceptors, the logic is broken. In the prototype case, only on demand (when getObject is called) is a _SingletonTargetSource_ created to wrap the target. This means that getObjectType() will throw a NullPointerException, as the targetsource will not have been created yet.  The solution is to either from the beginning create a PrototypeTargetSource even if the target is passed in as the name, or alternately create a PrototypeTargetSource on demand for either method (it would have to be synchronize though to do this obviously), which would save creating these PrototypeTargetSources if the proxy was never used, in the same vein as there is code to avoid creating the advisor chain earlier then it has to, for prototypes.   ---  **Affects:** 1.1.1","closed","in: core,","spring-projects-issues","2004-10-28T14:05:36Z","2004-10-31T21:23:25Z"
"","5141","OpenSessionInViewFilter plus CMT not handled propertly by SessionFactoryUtils for existing trans [SPR-411]","**[Colin Sampaleanu](https://jira.spring.io/secure/ViewProfile.jspa?name=colin.sampaleanu)** opened **[SPR-411](https://jira.spring.io/browse/SPR-411?redirect=false)** and commented  Juergen,  Can you see this:  http://forum.springframework.org/viewtopic.php?t=1406  Looking at the current implementation of getJtaSynchronizedSession in SessionFactoryUtils, unless I'm mistaken the code is wrong, as it can not handle the case of an existing thread-bound session (as would come from the OSIV filter). In this case, the check for an active tx will match, but there won't be a session bound to the tx key, so the function will return null, not the existing session, and a new session will end up being created...  As I read this code now, it will work fine for the case that a new Session needs to be created and bound to the JTA tx, and it will work fine for the case that a subsequent session request is able to pick up this session bound to the tx, so the only issue is for an existing session created outside of the JTA tx...   ---  **Affects:** 1.1.1","closed","type: bug,","spring-projects-issues","2004-10-20T02:47:34Z","2004-10-21T03:52:07Z"
"","5136","JSF-Spring 2.6 incompatible with current CVS head [SPR-406]","**[Colin Sampaleanu](https://jira.spring.io/secure/ViewProfile.jspa?name=colin.sampaleanu)** opened **[SPR-406](https://jira.spring.io/browse/SPR-406?redirect=false)** and commented  This is sandbox code I believe...  From the forums: http://forum.springframework.org/viewtopic.php?t=1388  Hi,  I've just freshed my local Spring source and find that JSF-Spring won't compile. The problems are in the FacesSpringVariableResolver:  1. the transformedBeanName method of the super class has been turned to private, thus not accessible the the subclass. 2. isFactoryDereference has seemed to be factored out to the BeanFactoryUtils. (This is trivial to fix though)  I'm wondering if the future version of the AbstractBeanFactory.transformedBeanName can still keep its protected signature.  Any ideas?  Thanks!  Bing Ran  to follow up,  I also had to modify the getPropertyValue method in the FacesConfigXmlBeanDefinitionParser class in the JSF-Spring package to make them work together:  Here is the change I needed to make:  from:  return new RuntimeBeanReference(value);  to:  return new RuntimeBeanReference(value.substring(2, value.indexOf(""}"")));   ---  **Affects:** 1.1.1","closed","type: bug,","spring-projects-issues","2004-10-18T02:46:41Z","2019-01-11T14:18:18Z"
"","5135","SingletonBeanFactoryLocator createDefinition can throw exception without nested 'cause' detail exception [SPR-405]","**[Colin Sampaleanu](https://jira.spring.io/secure/ViewProfile.jspa?name=colin.sampaleanu)** opened **[SPR-405](https://jira.spring.io/browse/SPR-405?redirect=false)** and commented  1.1.1 refactoring allowed a FatalBeanException to be thrown on erorr, which inadvertantly did not include the 'cause' Exception which was caught, making debugging pretty much harder. Fixed for 1.1.2.   ---  **Affects:** 1.1.1","closed","in: core,","spring-projects-issues","2004-10-17T03:06:42Z","2004-10-17T03:08:54Z"
"","4967","Allow regex discriminator for view resolver [SPR-236]","**[Colin Sampaleanu](https://jira.spring.io/secure/ViewProfile.jspa?name=colin.sampaleanu)** opened **[SPR-236](https://jira.spring.io/browse/SPR-236?redirect=false)** and commented  To allow better view resolver chaining, add pluggable 'view discriminator' support, including regex implementation, so that view resolvers can be made to apply (configured by the user) on some sort of basis. Regex discriminator would apply a regex pattern to the view name, and if the regex doesn't match, would return null, allowing the next view resolver in the chain to give it a go.  This would allow chaining two instances of InternalResourceViewResolver, for example.  The discriminator interface should also allow transforming the view name, so that a prefix could be the selector, but it would be stripped off before being used as the view name.    ---  **Affects:** 1.1 RC2","closed","type: enhancement,","spring-projects-issues","2004-07-31T15:04:14Z","2012-06-19T03:54:23Z"
"","5435","Log4jConfigurer to support classpath: location [SPR-707]","**[Claus Ibsen](https://jira.spring.io/secure/ViewProfile.jspa?name=davsclaus)** opened **[SPR-707](https://jira.spring.io/browse/SPR-707?redirect=false)** and commented  I had a case where I have a standalone application running on AS/400 using Spring. I couldn't control the setup of the classpath 100% and thus my log4j.properties wasn't picked first in the classpath. So I had to configure Log4j manually at startup to use mylog4j.properties located  in my 'conf' folder in the classpath.  Spring's org.springframework.util.Log4jConfigurer does not support classpath resolving of the log4j config file.  So now I created a patch with this support.    ---  **Affects:** 1.1.4  **Attachments:** - [Log4jConfigurer.java](https://jira.spring.io/secure/attachment/10509/Log4jConfigurer.java) (_7.62 kB_) - [patch.txt](https://jira.spring.io/secure/attachment/10508/patch.txt) (_5.72 kB_)","closed","type: enhancement,","spring-projects-issues","2005-02-13T03:03:27Z","2019-01-11T12:58:47Z"
"","5390","java.lang.Secuirty Settings Logger [SPR-662]","**[Claus Ibsen](https://jira.spring.io/secure/ViewProfile.jspa?name=davsclaus)** opened **[SPR-662](https://jira.spring.io/browse/SPR-662?redirect=false)** and commented  My current project involves SSL communication between two different OS's/JDK's. This was more problematic than as such.  Server 1: Sun Solaris with SUN JDK 1.4 Server 2 (= Client): AS/400 with IBM JDK 1.4  We got this error: Caused by: javax.net.ssl.SSLHandshakeException: No compatible cipher suite available between SSL end points.  For the client I created some code that outputs the installed Providers and other security related information to the logger. But as we dont have such access to the running server we cant optain such information but only rely on the security.properties file from the JDK.  What would have been nice was that both the server and client could log their security settings, so we could cross-check if they should match.  So I created a Spring Bean that you can add to the .xml file and it will output security settings when Spring initializes.  If I run it on my local computer with both a SUN JDK and IBM JDK I get different output.  Example SUN: [java] main 27 jan 2005 20:26:06 INFO  dk.webfragt.access.security.SecuritySettingsLogger - Security Provider [com.sun.net.ssl.internal.ssl.Provider] v1.42 - Sun JSSE provider(implements RSA Signatures, PKCS12, SunX509 key/trust factories, SSLv3, TLSv1) [java] main 27 jan 2005 20:26:06 INFO  dk.webfragt.access.security.SecuritySettingsLogger - Security Algorithms for Cipher service [PBEWITHMD5ANDTRIPLEDES, DESEDE, AES, PBEWITHMD5ANDDES, BLOWFISH, DES]  Example IBM: [java] main 27 jan 2005 20:27:11 INFO  dk.webfragt.access.security.SecuritySettingsLogger - Security Provider [com.ibm.security.jgss.IBMJGSSProvider] v1.01 - IBMJGSSProvider supports Kerberos V5 Mechanism [java] main 27 jan 2005 20:27:11 INFO  dk.webfragt.access.security.SecuritySettingsLogger - Security Algorithms for Cipher service [PBEWITHSHAAND40BITRC4, PBEWITHMD2ANDTRIPLEDES, DESEDE, PBEWITHSHAAND128BITRC4, PBEWITHMD2ANDRC2, RSAWITHNOPAD, RSA,  Currently it onlt outputs:  - Providers - Algorithms for KeyStore, Signature, MessageDigest, Cipher & Mac  In Spring .xml you just add this line of code:  \   ---  **Attachments:** - [SecuritySettingsLogger.java](https://jira.spring.io/secure/attachment/10463/SecuritySettingsLogger.java) (_2.40 kB_)","closed","type: enhancement,","spring-projects-issues","2005-01-27T05:39:51Z","2012-06-19T09:37:34Z"
"","5386","cosmetic: javadoc missing end tag for bold text (AbstractApplicationContext) [SPR-658]","**[Claus Ibsen](https://jira.spring.io/secure/ViewProfile.jspa?name=davsclaus)** opened **[SPR-658](https://jira.spring.io/browse/SPR-658?redirect=false)** and commented  And end \ tag is missing in the java doc for this method:  org.springframework.context.support.AbstractApplicationContext.getResourcePatternResolver()      * Do not call this when needing to resolve a location pattern.     * Call the context's getResources method instead, which     * will delegate to the ResourcePatternResolver.    ---  **Affects:** 1.1.3","closed","in: core,","spring-projects-issues","2005-01-25T21:15:32Z","2005-01-27T01:53:36Z"
"","5358","Doc : Web Service JAX-RPC chapter [SPR-630]","**[Claus Ibsen](https://jira.spring.io/secure/ViewProfile.jspa?name=davsclaus)** opened **[SPR-630](https://jira.spring.io/browse/SPR-630?redirect=false)** and commented  Hi  I have worked with Spring JAX-RPC support for a few weeks now and also discovered that there wasn't any documentation for this in the reference doc.  So I dig something together - See attachments.   ---  **Affects:** 1.1.3  **Attachments:** - [jira-630-convert-to-patch.patch](https://jira.spring.io/secure/attachment/10488/jira-630-convert-to-patch.patch) (_11.54 kB_) - [remoting.xml](https://jira.spring.io/secure/attachment/10430/remoting.xml) (_28.60 kB_)","closed","type: enhancement,","spring-projects-issues","2005-01-17T18:45:01Z","2005-02-03T06:56:16Z"
"","5352","o.s.web.util.Log4jConfigListener - able to load log4j config file from file system [SPR-624]","**[Claus Ibsen](https://jira.spring.io/secure/ViewProfile.jspa?name=davsclaus)** opened **[SPR-624](https://jira.spring.io/browse/SPR-624?redirect=false)** and commented  My use case requries me to have my log4j.properties located on a AS/400 server and Tomcat running on a Win2003 box.  Tomcat must be able to use the log4j.properties located on the AS/400 file system.  I am using Spring to setup log4j in web.xml such as:           	org.springframework.web.util.Log4jConfigListener                    	log4jRefreshInterval     	60000                     	log4jConfigLocation     	/WEB-INF/log4j.properties       In Spring 1.1.3 it is not possible to specify the location of log4j.properties outside the web application archive. Okay yes it is possible if you do not have the defined log4jConfigLocation in the web.xml file then it would default to locate the log4j.properties in the classpath.  I do not want to alter the CLASSPATH of TOMCAT or whatever web container we are using. I want to be able to specify the location of the log4j.properties file in the web.xml file. So I modified the Log4jWebConfigurer to be able to do this. Now I can set the location of the log4j.properties in web.xml such as:           	log4jConfigLocation     	file:/C:/mylog4j.properties       And it would get the file from the file system. I am using Springs own code to locate the file (PathMatchingResourcePatternResolver).  I failed to make SF CVS work so I downloaded the nightly snapshot and modified the java file.  I have attached my modified java file to this JIRA.  /Claus   ---  **Affects:** 1.1.3  **Attachments:** - [Log4jWebConfigurer.java](https://jira.spring.io/secure/attachment/10429/Log4jWebConfigurer.java) (_6.92 kB_)","closed","type: enhancement,","spring-projects-issues","2005-01-13T20:16:32Z","2005-01-28T03:00:16Z"
"","5331","A default toString() is missing from Spring JAX-RPC [SPR-603]","**[Claus Ibsen](https://jira.spring.io/secure/ViewProfile.jspa?name=davsclaus)** opened **[SPR-603](https://jira.spring.io/browse/SPR-603?redirect=false)** and commented  I am playing with Spring's webservice support. See forum: http://forum.springframework.org/viewtopic.php?p=11579#11579  I was outputting debug information and I stumpled on an exception.  First the stack-trace: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'ediDao' defined in ServletConte eptionsException: PropertyAccessExceptionsException (1 errors); nested propertyAccessExceptions are: [org.springframewo ion:  toString - none defined] PropertyAccessExceptionsException (1 errors) org.springframework.beans.MethodInvocationException: Property 'service' threw exception; nested exception is javax.xml. javax.xml.rpc.JAXRPCException: Cannot find operation:  toString - none defined at org.apache.axis.client.Call.setOperation(Call.java:1253) at org.apache.axis.client.AxisClientProxy.invoke(AxisClientProxy.java:184) at $Proxy0.toString(Unknown Source) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:324) at org.springframework.remoting.rmi.RmiClientInterceptorUtils.doInvoke(RmiClientInterceptorUtils.java:98) at org.springframework.remoting.rmi.RmiClientInterceptorUtils.invoke(RmiClientInterceptorUtils.java:67) at org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor.invoke(JaxRpcPortClientInterceptor.java:341) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:144) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:174) at $Proxy1.toString(Unknown Source) at dk.webfragt.access.edi.EDIDao.setService(EDIDao.java:49) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:324) at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:779)  And my spring.xml file \ \ \dk.webfragt.access.edi.Version\ \ \ \http://localhost:8181/axis/services/Version?wsdl\ \ \ \http://localhost:8181/axis/services/Version\ \ \ \VersionService\ \ \ \Version\ \ \  And the code that causes this error      public void setService(Version v) {     	logger.debug(""Setting service: "" + v);     	this.ver = v;     }  The problem:  Using Spring JAX-RPC will throw an exception if using toString() on the service interface. In my code above I log to debug the service interface (Version). If I remove the debug code line it works fine.  Since Version is an interface I can not implemenet a toString method.  I think Spring should have a default toString() that output the  JAX-RPC Service/Port name.   ---  **Affects:** 1.1.3","closed","type: bug,","spring-projects-issues","2005-01-10T00:06:48Z","2005-01-14T00:35:30Z"
"","5329","TraceInterceptor enhancements [SPR-601]","**[Claus Ibsen](https://jira.spring.io/secure/ViewProfile.jspa?name=davsclaus)** opened **[SPR-601](https://jira.spring.io/browse/SPR-601?redirect=false)** and commented  I forked the org.springframework.aop.interceptors.TraceInterceptor as I needed several added functionality. I ended up adding a few more features and made it customizable so I could contribute it back to the Spring team.  I have attached a modified version of the TraceInterceptor.java with these enhancements:  - possible to customize output formating of ENTER and EXIT messages - possible to output elapsed time - possible to output method arguments - possible to use dynamic logger name (using the classname of the method invocation = just as if you had written to log code in the class itself. See example)  Using the dynamic logname makes it possible to output logs as:  http8080-Processor4 07 jan 2005 11:22:58 DEBUG dk.netfragt.pbs.NetfragtPBSWebService - ENTER - accepterFaktura dk.netfragt.pbs.NetfragtPBSWebService - EXIT  - accepterFaktura. Time = 1656 msec.  Instead of the default:  http8080-Processor4 07 jan 2005 11:19:43 DEBUG org.springframework.aop.interceptor.TraceInterceptor - Entering method accepterFaktura in class [dk.netfragt.pbs.NetfragtPBSWebService]  And with the method arguments you can see what has been passed in as arguments (in this example 77777):  http8080-Processor4 07 jan 2005 11:19:43 DEBUG org.springframework.aop.interceptor.TraceInterceptor - Entering method accepterFaktura(77777) in class [dk.netfragt.pbs.NetfragtPBSWebService]  And you can change the formatting of the message using java.text.Format with {0} placeholders. The defaults are:      private String enterMessage = ""Entering method {1}{2} in class [{0}]"";     private String exitMessage = ""Exiting method {1}{2} in class [{0}]"";  You can customize this in the spring .xml configuration:           	true     	true     	true     	ENTER - {1}{2}     	EXIT  - {1}{2}       Using the above will output:  http8080-Processor4 07 jan 2005 11:22:58 DEBUG dk.netfragt.pbs.NetfragtPBSWebService - ENTER - accepterFaktura(676767) http8080-Processor4 07 jan 2005 11:23:00 DEBUG dk.netfragt.pbs.NetfragtPBSWebService - EXIT  - accepterFaktura(676767). Time = 1656 msec.  As the example above illustrates that using dynamicLogName and customizing the log message it is possible to change it radically.  I hope the Spring team could accept these changes as the default version is the same as the existing one.  ---  **Affects:** 1.1.3  **Attachments:** - [TraceInterceptor.java](https://jira.spring.io/secure/attachment/10632/TraceInterceptor.java) (_7.50 kB_) - [TraceInterceptor.java](https://jira.spring.io/secure/attachment/10421/TraceInterceptor.java) (_5.55 kB_)  **Issue Links:** - #5586 [PATCH] Enhancements to TraceInterceptor (_**""is duplicated by""**_)","closed","type: enhancement,","spring-projects-issues","2005-01-06T21:43:21Z","2019-01-11T12:52:30Z"
"","5300","TimerFactoryBean support for one time job executions [SPR-571]","**[Claus Ibsen](https://jira.spring.io/secure/ViewProfile.jspa?name=davsclaus)** opened **[SPR-571](https://jira.spring.io/browse/SPR-571?redirect=false)** and commented  I have a use-case where I should execute a method one time when the web server has started.  The TimerFactoryBean in Spring let me do this for a job to be scheduled for execution several times.  As my job should only be exected at server startup and thus only once I craeated a patch for this.  I don't know if it could be useful for Spring.  If I set the period property to 0 (default) then I get an Exception from java.util.Timer that this value has to be a positive integer. This is also what is documented in ScheduledTimerTask in Spring.  So my patch uses the java.util.Timer.schedule() method that takes 2 arguments and doesn't require a period. Then the job will only be executed once.  I will submit my patch to JIRA and I will work on a unit test-case to be submitted also.  If there is a more simple way running a job once I would like to know. But using TimerFactoryBean the job also works in non web environments. I could have created a Startup Servlet and execute my code.   ---  **Affects:** 1.1.3  **Attachments:** - [onetimejob.patch](https://jira.spring.io/secure/attachment/10388/onetimejob.patch) (_2.17 kB_) - [onetimertest.patch](https://jira.spring.io/secure/attachment/10389/onetimertest.patch) (_2.20 kB_)","closed","type: enhancement,","spring-projects-issues","2004-12-20T00:03:12Z","2004-12-20T02:37:50Z"
"","5265","OpenSessionInViewInterceptor that can be used by ProxyFactoryBean [SPR-536]","**[Claus Ibsen](https://jira.spring.io/secure/ViewProfile.jspa?name=davsclaus)** opened **[SPR-536](https://jira.spring.io/browse/SPR-536?redirect=false)** and commented  In relation to this thread in the forum http://forum.springframework.org/viewtopic.php?t=1213&start=30  I need a Hibernate SessionInViewInterceptor that can be used by Spring AOP ProxyFactoryBean.  The existing ones in org.springframework.orm.hibernate.support is tied to the web tier = (servlet filter, or spring web framework).  I need a non web realted one that I can used in my ejb tier. The reason is in short to support multiple schemas for Hibernate. Read the forum to understand the problem more.  My workaround was to copy the code from org.springframework.orm.hibernate.support.OpenSessionInViewFilter and remove the web related.  I have attached the source file I am using.  And this is the relevant part from my spring .xml file                	com.bmd.selfserviceejb.dao.SaldoOversigtDAO2     	     	         	             	hibernateSessionInViewInterceptor                  		               	                    	         ---  **Affects:** 1.1.2  **Attachments:** - [HibernateSessionInViewInterceptor.java](https://jira.spring.io/secure/attachment/10360/HibernateSessionInViewInterceptor.java) (_4.29 kB_)","closed","type: enhancement,","spring-projects-issues","2004-12-08T23:58:37Z","2019-01-11T12:42:06Z"
"","5263","JdbcUtils.closeConnection [SPR-534]","**[Claus Ibsen](https://jira.spring.io/secure/ViewProfile.jspa?name=davsclaus)** opened **[SPR-534](https://jira.spring.io/browse/SPR-534?redirect=false)** and commented  I am doing some plain JDBC and are closing the JDBC related resources in a finally block. The reason is I am not using Spring JdbcTemplate is that I dont have the DataSource but the java.sql.Connection. JdbcTemplate only works if you provide a DataSource.  I am closing the JDBC resources in a finally block.      JdbcUtils.closeResultSet(rs);     JdbcUtils.closeStatement(stmt);     con.close();  There is no method to close a Connection.  I could use a JdbcUtils.closeConnection(con); that ignores any exceptions as the other does.    ---  **Affects:** 1.1.2","closed","type: enhancement,","spring-projects-issues","2004-12-08T21:22:50Z","2004-12-08T21:51:42Z"
"","5212","javadoc link error in org.springframework.orm.hibernate.SessionFactoryUtils [SPR-483]","**[Claus Ibsen](https://jira.spring.io/secure/ViewProfile.jspa?name=davsclaus)** opened **[SPR-483](https://jira.spring.io/browse/SPR-483?redirect=false)** and commented  See: http://www.springframework.org/docs/api/org/springframework/orm/hibernate/SessionFactoryUtils.html  The class org.springframework.orm.hibernate.SessionFactoryUtils has a method getTransactionManager(xxx) that returns an instance of javax.transaction.TransactionManager  that is linked to the URL: http://java.sun.com/j2se/1.4.2/docs/api/javax/transaction/TransactionManager.html  But this page is not found on SUN's web page. The correct link to use is from the J2EE 1.4 API: http://java.sun.com/j2ee/1.4/docs/api/javax/transaction/TransactionManager.html   ---  **Affects:** 1.1.2","closed","type: bug,","spring-projects-issues","2004-11-23T19:49:10Z","2004-12-01T20:55:04Z"
"","5203","javadoc missing for ...aop.AfterReturningAdvisor.afterReturning [SPR-474]","**[Claus Ibsen](https://jira.spring.io/secure/ViewProfile.jspa?name=davsclaus)** opened **[SPR-474](https://jira.spring.io/browse/SPR-474?redirect=false)** and commented  I am playing with the AOP stuff and it's really powerful.  I was using the AfterReturningAdvisor to do the trivial logging of what method a given user has performed for a kind of audit log.  There is no javadoc for the method itself on the interface and I am a bit confused what would happend if I thron an exception.  See the javadoc for MethodBeforeAdvice it has full javadoc.  Will the same thing happend if an exception is thrown?  Throwable - if this object wishes to abort the call. Any exception thrown will be returned to the caller if it's allowed by the method signature. Otherwise the exception will be wrapped as a runtime exception.  Hope it's easy to fix for Rod ;)   ---  **Affects:** 1.1.2","closed","in: core,","spring-projects-issues","2004-11-18T00:57:35Z","2004-12-08T03:04:19Z"
"","5113","NPE in JDBCTemplate if no datasource set [SPR-383]","**[Claus Ibsen](https://jira.spring.io/secure/ViewProfile.jspa?name=davsclaus)** opened **[SPR-383](https://jira.spring.io/browse/SPR-383?redirect=false)** and commented  I am playing with the JdbcTemplate and have the following code:  JdbcTemplate jdbc = new JdbcTemplate(); String[] s = (String[]) jdbc.queryForObject(SELECT_SQL, new Object[]{new Long(id)}, java.lang.String[].class);  As I do not pass in a datasource to JdbcTemplate and does not call setDataSource on it I get the following NPE.  Maybe a check in the code and to throw a propper exception stating somekind of error text that a datasource is not set on the template would be nice instead of a NPE.  Just to add to Jurgens/Thomas list of silly TODO's instead of cool new features.  java.lang.NullPointerException at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:173) at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:152) at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:128) at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:319) at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:374) at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:410) at org.springframework.jdbc.core.JdbcTemplate.queryForObject(JdbcTemplate.java:469) at com.bmd.selfservice.dao.KundeHibernateDAO.loadKundeEmail(KundeHibernateDAO.java:55) at com.bmd.selfservice.KundeBusiness.getKundeEmail(KundeBusiness.java:40) at com.bmd.selfservice.demo.KundeDemo.email(KundeDemo.java:55) at com.bmd.selfservice.demo.KundeDemo.main(KundeDemo.java:62)   ---  **Affects:** 1.1.1","closed","type: bug,","spring-projects-issues","2004-10-08T00:14:20Z","2004-10-09T21:04:41Z"
"","5725","Chapter 20 - JMX - minor misspellings etc. [SPR-1016]","**[Claus Ibsen](https://jira.spring.io/secure/ViewProfile.jspa?name=davsclaus)** opened **[SPR-1016](https://jira.spring.io/browse/SPR-1016?redirect=false)** and commented  20.2 text: and registering them the JMX MBeanServer problem: there is a 'to' missing  text: This behaviour can be changed as described in section XXX. problem: XXX is to be replaced with the correct section (I guess it's 20.4)  20.2.1 text: MBeanExporter will not attempt to locate a running. problem: there sentence should end with 'server'  20.2.3 text: already valid MBeans are registed as is problem: registed should be 'registered'  text: This behavior can be overridden as detailed in section XXX problem: XXX is to be replaced with the correct section (I guess it's 20.4)  20.3 text: To solve this proble, problem: proble should be 'problem'  20.3.2 text: that you show earlier marked probklem: show should be 'saw'  20.6 Isn't the last example missing a 'server' property for the proxy bean?   ---  **Affects:** 1.2.1  **Attachments:** - [spr-1016.patch](https://jira.spring.io/secure/attachment/10793/spr-1016.patch) (_3.52 kB_)","closed","type: bug,","spring-projects-issues","2005-06-05T00:52:21Z","2005-06-19T01:13:24Z"
"","5028","Missing QuartzStatefulJobBean [SPR-298]","**[Christophe Roudet](https://jira.spring.io/secure/ViewProfile.jspa?name=croudet)** opened **[SPR-298](https://jira.spring.io/browse/SPR-298?redirect=false)** and commented  Quartz scheduling.  As there is a QuartzJobBean for the Job interface, there should be a QuartzStatefulJobBean for the StatefulJob interface.  Christophe   ---  **Affects:** 1.1 RC2  **Attachments:** - [QuartzStatefulJobBean.java](https://jira.spring.io/secure/attachment/10189/QuartzStatefulJobBean.java) (_3.11 kB_)","closed","type: enhancement,","spring-projects-issues","2004-08-30T10:35:08Z","2004-08-30T19:32:51Z"
"","5489","Nested Property Editor / Transformer for Collections [SPR-761]","**[Christian Nelson](https://jira.spring.io/secure/ViewProfile.jspa?name=cnelson)** opened **[SPR-761](https://jira.spring.io/browse/SPR-761?redirect=false)** and commented  Given: A posted form variable of { ""100"", ""200"", ""300"" }, and a command:  public class Command { public Set getIds() { return ids; } public void setIds(Set ids) { this.ids = ids; } private Set ids; // Contains **only** Integers }  CustomCollectionEditor (view BeanWrapperImpl) does a great job of converting arrays when a form is submitted to Collections of Strings, but doesn't seem to support converting to Collections of non-Strings.  It'd be great if spring supported specifying a nested property editor, or some other means for transforming each String in the incoming array to its **real** type on the command.  In my example above, the array itself is converted by CustomCollectionEditor to a Set, and then \ converts each element to Integer.  I've attached my TransformingCollectionEditor.java code.  It's a carbon-copy of spring's CustomCollectionEditor with a few minor enhancements.  I don't really like the way this code works, but it does the trick in my application.  Maybe something like this can be added to spring?  In initBinder(), you would see this for the above example:  binder.registerCustomEditor(Set.class, new TransformingCollectionEditor(Set.class, new Transformer() { public Object transform(Object arg) { return (arg == null ? null : new Integer(arg.toString())); } }));  Note: I have no idea why transform() gets called with null, but it does sometimes, so I have that tertiary in there to handle it.  There's a somewhat related forum thread too: http://forum.springframework.org/viewtopic.php?t=2160   ---  **Affects:** 1.1.5  **Attachments:** - [TransformingCollectionEditor.java](https://jira.spring.io/secure/attachment/10561/TransformingCollectionEditor.java) (_3.24 kB_)","closed","type: enhancement,","spring-projects-issues","2005-03-03T04:26:45Z","2005-03-22T10:47:15Z"
"","5292","Sitemesh Support [SPR-563]","**[Christian Nelson](https://jira.spring.io/secure/ViewProfile.jspa?name=cnelson)** opened **[SPR-563](https://jira.spring.io/browse/SPR-563?redirect=false)** and commented  I'm using Spring (including Spring's Web and MVC components) along with Sitemesh.  I've run into a problem where if I use , I get this error:  SEVERE: Exception in RequestContextAwareTag java.lang.IllegalStateException: No WebApplicationContext found: not in a DispatcherServlet request? org.springframework.web.servlet.support.RequestContextUtils.getWebApplicationContext(RequestContextUtils.java:79) ... com.opensymphony.module.sitemesh.filter.PageFilter.applyDecorator(PageFilter.java:156) com.opensymphony.module.sitemesh.filter.PageFilter.doFilter(PageFilter.java:59)  Spring's web application context in not available when sitemesh is in the loop.  This makes sense because how would sitemesh know about spring's web application context?  I found this from Bex Alex, the man behind Acegi Security: http://wiki.opensymphony.com/display/SM/Integration+with+Spring  (Note: I haven't yet tried it, but expect it'll do the trick.)  Is there any plan to include support like this in the spring distribution?  It would be nice if one could just use sitemesh out of the box with spring (as they can hibernate, ibatis, struts, tiles, etc etc).  It seems like a nice and powerful combination.   ---  **Affects:** 1.1.3","closed","type: enhancement,","spring-projects-issues","2004-12-16T09:53:28Z","2019-01-11T12:41:55Z"
"","5729","Add support for processing form change requests [SPR-1021]","**[Christian Nelson](https://jira.spring.io/secure/ViewProfile.jspa?name=cnelson)** opened **[SPR-1021](https://jira.spring.io/browse/SPR-1021?redirect=false)** and commented  SimpleFormController.isFormChangeRequest(...) let's one indicate whether or not a request is a form change request (versus a submit).  In an ideal world, there would also be a hook for actually making changes to the form/command object as well.  The main issue is that there's no direct way to get the command object in the call isFormChangeRequest().  Adding a new element to a collection, removing one, or perhaps reordering elements generally requires the comman object.  [See http://forum.springframework.org/viewtopic.php?t=2135 for a related discussion.]  I would like to see this method stub defined in SimpleFormController:  protected void processFormChangeRequest(HttpServletRequest request, HttpServletResponse response, Object command, BindException errors) throws Exception { }  It could be overridden as necessary in a subclass, and it would be invoked if isFormSubmission(...) returns true.  SimpleFormController.processFormSubmission(...) could be updated to do this:  protected ModelAndView processFormSubmission(HttpServletRequest request, HttpServletResponse response, Object command, BindException errors) throws Exception { if (errors.hasErrors()) { if (logger.isDebugEnabled()) { logger.debug(""Data binding errors: "" + errors.getErrorCount()); } return showForm(request, response, errors); } else if (isFormChangeRequest(request)) { processFormChangeRequest(request, response, command, errors); return showForm(request, response, errors); } else { logger.debug(""No errors -> processing submit""); return onSubmit(request, response, command, errors); } }  I have attached my version of SimpleFormController which implements this behavior as well as ""Cancellable"" behavior (as per #5516).  Perhaps these could both be implemented in one fell swoop?  A concreate example of how this would be used might look like this:  protected void processFormChangeRequest(HttpServletRequest request, HttpServletResponse response, Object command, BindException errors) throws Exception { MemberIncExcPatternFilter filter = (MemberIncExcPatternFilter) command;      String action = request.getParameter(ACTION_PARAM);     int index = Integer.parseInt(request.getParameter(INDEX_PARAM));          if (PARAM_ADD.equals(action)) {         filter.getEntries().add(new MemberIncExcPatternEntry());     }     else if (PARAM_DELETE.equals(action)) {         filter.getEntries().remove(index);     }     else if (PARAM_MOVE_UP.equals(action)) {         if (index != 0)             Collections.swap(filter.getEntries(), index, index - 1);     }     else if (PARAM_MOVE_DOWN.equals(action)) {         if (index != (filter.getEntries().size() - 1))             Collections.swap(filter.getEntries(), index, index + 1);     }     else {         if (logger.isInfoEnabled())             logger.info(""Unexpected form change action '"" + action + ""'."");     }  }  ---  **Affects:** 1.2.1  **Attachments:** - [CancellableFormController.java](https://jira.spring.io/secure/attachment/10771/CancellableFormController.java) (_2.52 kB_)","closed","type: enhancement,","spring-projects-issues","2005-06-06T13:56:22Z","2019-01-11T18:35:05Z"
"","5402","Another Improvement to ServletContextPropertyPlaceholderConfigurer [SPR-674]","**[Chris Wood](https://jira.spring.io/secure/ViewProfile.jspa?name=swamp_ig)** opened **[SPR-674](https://jira.spring.io/browse/SPR-674?redirect=false)** and commented  Can't attach file to #5400 since it's closed, here's the comment and the modified file:  I've got a further improvement to this class.  This improvement allows the override level to be set, both for the servlet context init parameters, and the context attributes.  This is handy in some situations. For example having the ability to use context attributes and init parameters before the properties file allows for using the tomcat context.xml file to taylor an application to it's local deployment without having to modify the contents of a war file.  The proliferation of XXX_MODE_XX constants is a little annoying. It may be worth while renaming the constants in PropertyPlaceholderConfigurer to MODE_XXX.  The modified file is attached.  ---  **Affects:** 1.1.4  **Attachments:** - [ServletContextPropertyPlaceholderConfigurer.java](https://jira.spring.io/secure/attachment/10482/ServletContextPropertyPlaceholderConfigurer.java) (_7.82 kB_)","closed","type: enhancement,","spring-projects-issues","2005-02-01T17:07:46Z","2019-01-11T12:51:06Z"
"","5278","Meta-data driven interceptor for Hibernate [SPR-549]","**[Chris Wood](https://jira.spring.io/secure/ViewProfile.jspa?name=swamp_ig)** opened **[SPR-549](https://jira.spring.io/browse/SPR-549?redirect=false)** and commented  It would be nice if there was a meta-data driven hibernate interceptor. When using meta-data driven transaction management and the hibernate interceptor this is not required, because the hibernate transaction creates a session automaticaly, but it is a little inconvenient for read-only operations.  What I'd like to have would be a HibernateSessionAttribute, which would take a flushMode parameter.  The question is what to do when there is an existing session and the new flush mode is NEVER. Either we use the existing session regardless (probably a sensible default) or we create a new read-only session. Fortunatly if a new session is required then we should be able to set the propogation flag to REQUIRES_NEW and everything will be alright.   ---  **Affects:** 1.1.2  **Attachments:** - [interceptmeta.tar.gz](https://jira.spring.io/secure/attachment/10373/interceptmeta.tar.gz) (_6.05 kB_)","closed","type: enhancement,","spring-projects-issues","2004-12-13T12:01:49Z","2012-06-19T09:37:33Z"
"","5673","javadoc target fails in build.xml when behind firewall with proxy [SPR-959]","**[Chris Wolf](https://jira.spring.io/secure/ViewProfile.jspa?name=cwolf127)** opened **[SPR-959](https://jira.spring.io/browse/SPR-959?redirect=false)** and commented  When running ""javadoc"" tag of the Ant build script, this target fails when attempting to resolve external link references when the build machine is inside a firewall with an http proxy.  The solution is to modify the ""javadoc"" task invocation by adding parameters for the proxy-host proxy-port, which can be configured in the build.properties file.   ---  **Affects:** 1.1.5, 1.2 final  **Attachments:** - [build.xml.udiff.1.1.5](https://jira.spring.io/secure/attachment/10727/build.xml.udiff.1.1.5) (_791 bytes_) - [build.xml.udiff.1.2](https://jira.spring.io/secure/attachment/10728/build.xml.udiff.1.2) (_1.68 kB_)","closed","type: bug,","spring-projects-issues","2005-05-17T08:43:00Z","2005-05-18T05:03:45Z"
"","5863","Syntax error in docs for iBATIS SqlMapClientDaoSupport [SPR-1161]","**[Chris Winters](https://jira.spring.io/secure/ViewProfile.jspa?name=cwinters)** opened **[SPR-1161](https://jira.spring.io/browse/SPR-1161?redirect=false)** and commented  Very minor -- the 1.2.2 PDF says on page 135:  \ \ \  But there is no 'sqlMap' property; instead it should be:  \ \ \   ---  **Affects:** 1.2.2","closed","type: bug,","spring-projects-issues","2005-07-20T09:06:34Z","2005-07-20T09:16:11Z"
"","5806","Problem with PropertyPlaceholderConfigurer since refactoring of PropertyResourceConfigurer [SPR-1102]","**[Chris Widhelm](https://jira.spring.io/secure/ViewProfile.jspa?name=cwidhelm)** opened **[SPR-1102](https://jira.spring.io/browse/SPR-1102?redirect=false)** and commented  Previously in the PropertyResourceConfigurer  InputStream is = location.getInputStream();  was insde the try/catch block.  Now it is outside the try/catch block in PropertiesLoaderSupport which is causing FileNotFoundException when using a config like this:                                                                                /my.properties                                  /WEB-INF/my.properties                               ---  **Affects:** 1.2.2","closed","in: core,","spring-projects-issues","2005-07-05T05:45:35Z","2005-07-05T11:55:32Z"
"","5058","ProxyFactoryBean does not work with prototype advisors/interceptors [SPR-328]","**[Chris Eldredge](https://jira.spring.io/secure/ViewProfile.jspa?name=lordtrumpet)** opened **[SPR-328](https://jira.spring.io/browse/SPR-328?redirect=false)** and commented  There are several issues in the ProxyFactoryBean which prevent it from correctly creating beans with prototype advisors:  -Cannot create proxy when using prototype advisor when singleton=false -Cannot create proxy when using prototype interceptor when singletone=false -Cannot create proxy when using singleton target and singleton=false (ie, to use a prototype advisor on a singleton target)  Essentially, at the moment the only part of a prototype ProxyFactoryBean which may be a prototype is the target bean.  When trying to use a prototype the following exception is thrown:  BeanCreationException: Error creating bean with name 'prototypeTestBeanProxySingletonTarget' defined in class path resource [proxyFactoryTests.xml]: Initialization of bean failed; nested exception is org.springframework.aop.framework.AopConfigException: TargetSource specified more than once: Specify in targetSource property or at the END of the interceptorNames list ...  Note that in targetSource is not actually specified more than once.  The main defect is that when the factory is initialized, it avoids loading prototype beans which appear in the interceptorNames property in order to improve performance. Instead it substitutes a null value.  When this null value is later examined, it cannot be determined whether the bean was supposed to be a target or an advisor.   ---  **Affects:** 1.1.1  **Attachments:** - [ProxyFactoryBean.patch](https://jira.spring.io/secure/attachment/10220/ProxyFactoryBean.patch) (_9.10 kB_) - [ProxyFactoryBean.patch](https://jira.spring.io/secure/attachment/10213/ProxyFactoryBean.patch) (_10.40 kB_)","closed","in: core,","spring-projects-issues","2004-09-11T17:01:15Z","2004-09-20T03:10:32Z"
"","5041","MetadataModelMBeanInfoAssembler assumes a ManagedAttribute has both get and set methods [SPR-311]","**[Chris Borrill](https://jira.spring.io/secure/ViewProfile.jspa?name=chrisborrill)** opened **[SPR-311](https://jira.spring.io/browse/SPR-311?redirect=false)** and commented  For a ManagedAttribute as follows:  /** * @`@org`.springframework.jmx.metadata.support.ManagedAttribute( * description=""Active HTTP Sessions"")   */   public synchronized int getSessionCount()   {   return activeSessions;   }  The following code in MetadataModelMBeanInfoAssembler gives an NPE if the ManagedAttribute only has a get method (as above):      private String getDescription(PropertyDescriptor pd) {                  ManagedAttribute getter = MetadataReader.getManagedAttribute(attributes, pd.getReadMethod());         ManagedAttribute setter = MetadataReader.getManagedAttribute(attributes, pd.getWriteMethod());                  StringBuffer sb = new StringBuffer();                  if((getter.getDescription() != null) && (getter.getDescription().length() > 0)) {             return getter.getDescription();         } else if((setter.getDescription() != null) && (setter.getDescription().length() > 0)) {             return setter.getDescription();         } else {             return pd.getDisplayName();         }     }  I modified the code as follows to get this working:      private String getDescription(PropertyDescriptor pd) {         ManagedAttribute getter = null;         ManagedAttribute setter = null;                  if (pd.getReadMethod() != null) {             getter = MetadataReader.getManagedAttribute(attributes, pd.getReadMethod());         }                  if (pd.getWriteMethod() != null) {             setter = MetadataReader.getManagedAttribute(attributes, pd.getWriteMethod());         }                  StringBuffer sb = new StringBuffer();                  if((getter != null) && (getter.getDescription() != null) && (getter.getDescription().length() > 0)) {             return getter.getDescription();         } else if((setter != null) && (setter.getDescription() != null) && (setter.getDescription().length() > 0)) {             return setter.getDescription();         } else {             return pd.getDisplayName();         }     }    --- No further details from [SPR-311](https://jira.spring.io/browse/SPR-311?redirect=false)","closed","in: core,","spring-projects-issues","2004-09-06T16:33:37Z","2019-01-11T14:03:57Z"
"","5817","CustomEditor getAsText() not called in MultiActionController [SPR-1113]","**[Choon Whee](https://jira.spring.io/secure/ViewProfile.jspa?name=chunhui)** opened **[SPR-1113](https://jira.spring.io/browse/SPR-1113?redirect=false)** and commented  I have a problem in which when I register a CustomDateEditor in initBinder() method in MultiActionController (Works perfectly in SimpleFormController), when the Date is not converted to the specified String format.  my code is as follows briefly:  protected void initBinder(ServletRequest servletRequest, ServletRequestDataBinder binder) { CustomDateEditor cde = new CustomDateEditor(new SimpleDateFormat ('dd/MM/yyyy'), true); binder.registerCustomEditor(java.util.Date.class, cde); }  and my jsp binding code:      I later tried to test this by writting a method that extends CustomDateEditor and overwrites getAsText() and setAsText() as such:  ... String getAsText(String s){ text = super.getAsText(s); logger.info(""getAsText():"" + text); return text; }  when I tried it out, I found that setAsText() was called when I do a submission. but when I load the page, getAsText() is never called.  To make sure I did not write my code and configuration wrongly, I converted my MultiActionController to SimpleFormController with the essential code intact and it worked perfectly as expected.  another issue thats connected... in the MultiActionController, when I submit a wrongly formatted date, I get shown the exception page with the BindException.  I have this in my message.properties: typeMismatch=Invalid data. typeMismatch.java.util.Date=Invalid date format.  Again, I tried out in SimpleFormController and it works perfectly. I tried out the codes in Spring 1.2.1 and later 1.2.2. Same results.  I looked through the forums and realised a few ppl have the same problems. but nobody did solve their problems. All their final verdict was it should work and nobody really was able to help further and no one solved their problem.  They didn't mention the controllers they are using, so I suppose those who reply should work is using FormControllers while those who encountered problem are using MultiActionController? So I think this may fit the puzzle why some ppl can work and some can't.   ---  **Affects:** 1.2.1, 1.2.2","closed","status: declined,","spring-projects-issues","2005-07-07T21:13:31Z","2019-01-12T16:41:05Z"
"","5108","NamingStrategy should be specifiy before config.configure() [SPR-378]","**[chenggn](https://jira.spring.io/secure/ViewProfile.jspa?name=chenggn)** opened **[SPR-378](https://jira.spring.io/browse/SPR-378?redirect=false)** and commented  Hibernate Reference Documentation 2.1.6  3.7. Implementing a NamingStrategy ....  You may specify a different strategy by calling Configuration.setNamingStrategy() before adding mappings:  ---  Spring 1.1.1 LocalSessionFactoryBean Source specifiy namingStrategy after config.configure, so it does not works.  // create Configuration instance Configuration config = newConfiguration(); if (this.configLocation != null) { // load Hibernate configuration from given location config.configure(this.configLocation.getURL()); } ... if (this.namingStrategy != null) { // pass given naming strategy to Hibernate Configuration config.setNamingStrategy(this.namingStrategy); }  ---  **Affects:** 1.1.1","closed","type: bug,","spring-projects-issues","2004-10-06T20:07:20Z","2019-01-13T22:53:42Z"
"","5688","Transactional annotation on interface method doesn't work with cglib [SPR-975]","**[Charles Blaxland](https://jira.spring.io/secure/ViewProfile.jspa?name=charlesb)** opened **[SPR-975](https://jira.spring.io/browse/SPR-975?redirect=false)** and commented  It appears that if you add an `@Transaction` annotation to the declaration of a method in an interface and use CGLIB proxies, then the transactional advice is not honoured.  This works, however, if you use JDK proxies instead of CGLIB, or if you put the annotation on the actual implementation of the method.  Also see http://forum.springframework.org/viewtopic.php?p=21043#21059   ---  **Affects:** 1.2 final","closed","in: core,","spring-projects-issues","2005-05-22T12:55:03Z","2019-01-12T16:41:18Z"
"","5105","provide a way to ignore unresolved placeholders in the list of locations for PropertyPlaceholderConfigurer. [SPR-375]","**[Chad Woolley](https://jira.spring.io/secure/ViewProfile.jspa?name=thewoolleyman)** opened **[SPR-375](https://jira.spring.io/browse/SPR-375?redirect=false)** and commented  This is copied from the comments of the closed bug http://opensource.atlassian.com/projects/spring/browse/SPR-374  It would also be convenient if there was a way to ignore unresolved placeholders in the list of locations for PropertyPlaceholderConfigurer.  We are using this to set up a flexible mechanism to override property file locations on multiple locations, or accept the default, in a consistent way across multiple applications.  Unfortunately, Spring will fail if a placeholder in a property location contains an undefined placeholder.  For example:  \ \ \ \ \appname-${appname.runmode}.properties\ \","closed","type: enhancement,","spring-projects-issues","2004-10-06T11:03:06Z","2004-10-07T02:48:57Z"
"","5104","ResourceEditor.resolvePath(String) should loop through ALL placeholders, not just first [SPR-374]","**[Chad Woolley](https://jira.spring.io/secure/ViewProfile.jspa?name=thewoolleyman)** opened **[SPR-374](https://jira.spring.io/browse/SPR-374?redirect=false)** and commented  org.springframework.core.io.ResourceEditor.resolvePath(String)  Should loop through and replace all placeholders, NOT just the FIRST one...  This is apparent when using org.springframework.beans.factory.config.PropertyPlaceholderConfigurer locations property, and it only allows you to substitute one placeholder.  The second placeholder is unused.   ---  **Affects:** 1.1 final","closed","in: core,","spring-projects-issues","2004-10-06T09:05:44Z","2019-01-11T14:01:15Z"
"","5348","pass multiple datasources to jasper sub report [SPR-620]","**[Ch Zh](https://jira.spring.io/secure/ViewProfile.jspa?name=zcauto)** opened **[SPR-620](https://jira.spring.io/browse/SPR-620?redirect=false)** and commented  For Rob Harrop's new jasper demo with subreport:  I downloaded the source from CVS and made it work. Glad to see there are some improvements.  Here are several my questions/suggestions:  1) the demo only has a subReportParent.jrxml with one subReportChild.jrxml. I would like to know if we can have more than one sub report to config in jrtest-servlet.xml. The means one master report with more than one subreports.  2) in the demo, the sub list (""SubReportData"") only loops once for the first item (city: Manchester) in parent list ""dataSource"". My understanding is that it should loops for each of the item in parent list. In this demo, sub datasource (""SubReportData"") should loop for ""Manchester"", then under ""London"", then ""Manchester"" again, then ""London"", ...  Is this all right or I misunderstood?  3) another small issue is that ""subReport"" view in ReportController.java didn't specified in views.properties, instead it is in jrtest-servlet.xml. But all the other views are defined in views.properties. This is a bit inconsistent.  I think No. 3) is not a big issue and I can stay with it. Please clarify 1) and 2).  Again, thank you very much and look forward to hearing from you!   --- No further details from [SPR-620](https://jira.spring.io/browse/SPR-620?redirect=false)","closed","in: web,","spring-projects-issues","2005-01-13T03:53:14Z","2019-01-11T12:51:49Z"
"","5570","spring beans configuration not loaded on JRockit 1.4.2_05 JVM [SPR-844]","**[Cees van Wieringen](https://jira.spring.io/secure/ViewProfile.jspa?name=ceasaro)** opened **[SPR-844](https://jira.spring.io/browse/SPR-844?redirect=false)** and commented  In the org.springframework.core.io.support.PathMatchingResourcePatternResolver class method 'protected List doFindPathMatchingJarResources(Resource rootDirResource, String subPattern) throws IOException' on line 292 is the following line of code located. { String rootEntryPath = jarCon.getJarEntry().getName(); } On my system and environment it returns a rootEntryPath with a '/' suffix as when I run (debug) it on the same machine but use the SUN jdk 1.4.2_06 it returns a rootEntryPath without the '/' suffix. Maybe this is a bug of JRockit but I hope you can solve it inside the springframework.  If the rootEntryPath is returned with a '/' suffix the next check { PathMatcher.match(subPattern, entryPath.substring(rootEntryPath.length()))) } never returns true and the resource will never be added.  I just started to use you're framework cause I heard promising stories and when I look at it, it fullfills and exceeds my expectations I hope you can find a solutions for this bug or maybe it isn't a bug anymore anyway please let my know about any possible solutions. Otherwise I will have to switch back to the SUN jvm.  kind regard's Cees van Wieringen. keep up the promising work.   ---  **Affects:** 1.2 RC1","closed","in: core,","spring-projects-issues","2005-04-02T03:29:27Z","2005-04-08T07:45:30Z"
"","5677","JdbcTemplate.queryForRowSet only works with Java 1.5 [SPR-963]","**[Cary Mader](https://jira.spring.io/secure/ViewProfile.jspa?name=sundoggie)** opened **[SPR-963](https://jira.spring.io/browse/SPR-963?redirect=false)** and commented  When executing JdbcTemplate queryForRowSet method, a NoClassDefFoundError excpetion is thrown for javax.sql.rowset.CachedRowSet, which is part of Java 1.5.  The javadoc for the method states that results will be mapped to an SqlRowSet which is a wrapper class for javax.sql.RowSet.  However, it also implies that it could possibly wrap javax.sql.rowset.CachedRowSet, which seems to be the case.  java.lang.NoClassDefFoundError: javax/sql/rowset/CachedRowSet at org.springframework.jdbc.core.JdbcTemplate.queryForRowSet(JdbcTemplate.java:365) at org.pirate.spring.jdbc.PirateDAO.getFlagsRecentlyUpdated(PirateDAO.java:282) at org.pirate.delegate.BusinessDelegate.getFlagsRecentlyUpdated(BusinessDelegate.java:137) at org.pirate.action.WelcomeAction.execute(WelcomeAction.java:72) at org.apache.struts.action.RequestProcessor.processActionPerform(RequestProcessor.java:421) at org.apache.struts.action.RequestProcessor.process(RequestProcessor.java:226) at org.apache.struts.action.ActionServlet.process(ActionServlet.java:1164) at org.apache.struts.action.ActionServlet.doGet(ActionServlet.java:397) at javax.servlet.http.HttpServlet.service(HttpServlet.java:689) at javax.servlet.http.HttpServlet.service(HttpServlet.java:802) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:237) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:157) at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:704) at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:474) at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:409) at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312) at org.apache.jasper.runtime.PageContextImpl.doForward(PageContextImpl.java:670) at org.apache.jasper.runtime.PageContextImpl.forward(PageContextImpl.java:637) at org.apache.struts.taglib.logic.ForwardTag.doForward(ForwardTag.java:123) at org.apache.struts.taglib.logic.ForwardTag.doEndTag(ForwardTag.java:107) at org.apache.jsp.index_jsp._jspx_meth_logic_forward_0(index_jsp.java:85) at org.apache.jsp.index_jsp._jspService(index_jsp.java:59) at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:94) at javax.servlet.http.HttpServlet.service(HttpServlet.java:802) at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:324) at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:292) at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:236) at javax.servlet.http.HttpServlet.service(HttpServlet.java:802) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:237) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:157) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:214) at org.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:104) at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:520) at org.apache.catalina.core.StandardContextValve.invokeInternal(StandardContextValve.java:198) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:152) at org.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:104) at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:462) at org.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:102) at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:520) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:137) at org.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:104) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:118) at org.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:102) at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:520) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) at org.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:104) at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:520) at org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:929) at org.apache.coyote.tomcat5.CoyoteAdapter.service(CoyoteAdapter.java:160) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:799) at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.processConnection(Http11Protocol.java:705) at org.apache.tomcat.util.net.TcpWorkerThread.runIt(PoolTcpEndpoint.java:577) at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:683) at java.lang.Thread.run(Thread.java:534)   ---  **Affects:** 1.2 final","closed","type: bug,","spring-projects-issues","2005-05-18T04:00:18Z","2005-05-18T04:25:14Z"
"","5681","Missing property in JMX reference doc [SPR-968]","**[Carlos Sanchez](https://jira.spring.io/secure/ViewProfile.jspa?name=carlos)** opened **[SPR-968](https://jira.spring.io/browse/SPR-968?redirect=false)** and commented  autodetect property is not set in Section 20.3.5. The AutodetectCapableMBeanInfoAssembler Interface, so the sample doesn't work   ---  **Affects:** 1.2 final  **Attachments:** - [spring.patch](https://jira.spring.io/secure/attachment/10730/spring.patch) (_777 bytes_)","closed","type: bug,","spring-projects-issues","2005-05-20T10:17:22Z","2005-06-19T01:13:42Z"
"","5506","iBatis 2 reference guide patch [SPR-779]","**[Carlos Sanchez](https://jira.spring.io/secure/ViewProfile.jspa?name=carlos)** opened **[SPR-779](https://jira.spring.io/browse/SPR-779?redirect=false)** and commented  A patch to complete the iBATIS section with iBATIS 2.x documentation.  I have used a docbook editor, that's why the patch includes some formatting differences.   ---  **Attachments:** - [orm.patch](https://jira.spring.io/secure/attachment/10584/orm.patch) (_16.56 kB_)","closed","type: enhancement,","spring-projects-issues","2005-03-14T05:30:45Z","2005-03-21T01:40:51Z"
"","5384","Wrong value in Quartz Cron job [SPR-656]","**[Carlos Sanchez](https://jira.spring.io/secure/ViewProfile.jspa?name=carlos)** opened **[SPR-656](https://jira.spring.io/browse/SPR-656?redirect=false)** and commented  Sorry, value in #5381 is wrong, should be \0 0 6 * * ?\ to run at 6 a.m.  ---  No further details from [SPR-656](https://jira.spring.io/browse/SPR-656?redirect=false)","closed","type: bug,","spring-projects-issues","2005-01-25T07:46:03Z","2019-01-11T12:51:22Z"
"","5381","Wrong quartz CronTriggerBean sample  [SPR-653]","**[Carlos Sanchez](https://jira.spring.io/secure/ViewProfile.jspa?name=carlos)** opened **[SPR-653](https://jira.spring.io/browse/SPR-653?redirect=false)** and commented  In section 18.2.3. Wiring up jobs using triggers and the SchedulerFactoryBean  \ \ \ \ \ \ \0 6 * * 1\ \ \  Missing seconds field, fails with Quartz 1.4.0 http://www.opensymphony.com/quartz/tutorial.html#cronTriggers  Value should be \0 0 6 * * 1\    --- No further details from [SPR-653](https://jira.spring.io/browse/SPR-653?redirect=false)","closed","type: bug,","spring-projects-issues","2005-01-24T21:40:06Z","2005-01-25T04:00:57Z"
"","5260","Error in spring mail reference documentation [SPR-531]","**[Carlos Sanchez](https://jira.spring.io/secure/ViewProfile.jspa?name=carlos)** opened **[SPR-531](https://jira.spring.io/browse/SPR-531?redirect=false)** and commented  MimeMessage is used instead of MimeMessageHelper   ---  **Affects:** 1.1.3  **Attachments:** - [patch.txt](https://jira.spring.io/secure/attachment/10358/patch.txt) (_1023 bytes_)","closed","type: bug,","spring-projects-issues","2004-12-08T07:16:03Z","2004-12-08T07:26:06Z"
"","5876","Wrong version of commons-beanutils jar in readme file [SPR-1174]","**[Carlos Sanchez](https://jira.spring.io/secure/ViewProfile.jspa?name=carlos)** opened **[SPR-1174](https://jira.spring.io/browse/SPR-1174?redirect=false)** and commented  Although the commons-beanutils.jar manifest version says 1.6 the actual version is 1.7.0  See related bug report in apache  http://issues.apache.org/bugzilla/show_bug.cgi?id=35883   ---  **Affects:** 1.2.3  **Attachments:** - [patch.txt](https://jira.spring.io/secure/attachment/10985/patch.txt) (_689 bytes_)","closed","type: bug,","spring-projects-issues","2005-07-26T11:35:02Z","2005-07-31T19:59:55Z"
"","5418","New cglib-nodep-2.1-dev.jar breaks sandbox build [SPR-690]","**[Carlos Augusto de Oliveira](https://jira.spring.io/secure/ViewProfile.jspa?name=carloca)** opened **[SPR-690](https://jira.spring.io/browse/SPR-690?redirect=false)** and commented      New cglib jar don't haves org.objectweb.asm classes and breaks sandbox build.          If this is not the best place for posts it's,  sorry by inconvenience.  Best regards to all, Carlos.    --- No further details from [SPR-690](https://jira.spring.io/browse/SPR-690?redirect=false)","closed","type: bug,","spring-projects-issues","2005-02-04T21:24:18Z","2005-02-12T23:31:28Z"
"","5429","XMLC View [SPR-701]","**[Cameron Taggart](https://jira.spring.io/secure/ViewProfile.jspa?name=ctaggart)** opened **[SPR-701](https://jira.spring.io/browse/SPR-701?redirect=false)** and commented  Please add XMLC view support to the Spring MVC.  I posted some comments in the Spring Forum: http://forum.springframework.org/viewtopic.php?t=3456   ---  **Affects:** 1.1.4","closed","type: enhancement,","spring-projects-issues","2005-02-10T05:05:43Z","2012-06-19T03:18:57Z"
"","5783","Memory Leak in AbstractBeanFactory.registerDependentBean() [SPR-1077]","**[Cameron Taggart](https://jira.spring.io/secure/ViewProfile.jspa?name=ctaggart)** opened **[SPR-1077](https://jira.spring.io/browse/SPR-1077?redirect=false)** and commented  I posted this issue to the forum on June 16th, but JIRA is a more appropriate place for it.  http://forum.springframework.org/viewtopic.php?t=6377  (copy and paste:)  We ran into a memory leak with how we were using Spring MVC in Spring v1.1.5. I'm not entirely sure if it is a bug in Spring or is just incorrect use of it. We just added a simple if() statement to resolve our memory leak. The leak showed up when we used Spring MVC and definied non-singleton ""prototype"" controllers. Their dependent beans would register themselves over and over.  AbstractBeanFactory in CVS: http://cvs.sourceforge.net/viewcvs.py/springframework/spring/src/org/springframework/beans/factory/support/AbstractBeanFactory.java?view=markup  Our patch was this:  if (dependencies.contains(dependentBeanName) == false) {  in:  /** * Register a dependent bean for the given bean, * to be destroyed before the given bean is destroyed. * `@param` beanName the name of the bean * `@param` dependentBeanName the name of the dependent bean   */   protected void registerDependentBean(String beanName, String dependentBeanName) {   synchronized (this.dependentBeanMap) {   List dependencies = (List) this.dependentBeanMap.get(beanName);   if (dependencies == null) {   dependencies = new LinkedList();   this.dependentBeanMap.put(beanName, dependencies);   }   if (dependencies.contains(dependentBeanName) == false) {   if (logger.isDebugEnabled()) {   logger.debug(""registering dependent bean = "" + beanName + "", with dependent = "" + dependentBeanName);   }   dependencies.add(dependentBeanName);   }   }   }  Hopefully, someone from the Spring team can verify if this is a bug or not.  Thanks, Cameron   ---  **Affects:** 1.1.5, 1.2 RC1, 1.2 RC2, 1.2 final, 1.2.1","closed","type: bug,","spring-projects-issues","2005-06-26T05:16:50Z","2005-06-26T06:01:14Z"
"","5422","OpenSessionInViewFilter with JTA Transactions [SPR-694]","**[Cameron Jones](https://jira.spring.io/secure/ViewProfile.jspa?name=cameronjones)** opened **[SPR-694](https://jira.spring.io/browse/SPR-694?redirect=false)** and commented  It is currently not possible to use JTA transactions with the OpenSessionInViewFilter, this is because the JTATransactionManager does not (and can not) set the flush mode of the Hibernate session away from FlushMode.NEVER - as a result an InvalidDataAccessApiUsageException is thrown from the HibernateTemplate when non-read-only transactions are attempted.  I am unsure as to the solution to this problem however i thought i should bring it to your attention. One thing that confuses me is that in the javadoc for OpenSessionInViewFilter it states:  ""This filter works similar to the AOP HibernateInterceptor: It just makes Hibernate Sessions available via the thread. It is suitable for non-transactional execution but also for middle tier transactions via HibernateTransactionManager or JtaTransactionManager. In the latter case, Sessions pre-bound by this filter will automatically be used for the transactions and flushed accordingly. ""  ...which leads me to assume that the ability to use the filter with JTA transactions was ment to be included however that this functionality has not been implemented.   ---  **Affects:** 1.0 RC1, 1.0 RC2, 1.0 final, 1.0.1, 1.0.2, 1.1 RC1, 1.1 RC2, 1.1 final, 1.1.1, 1.1.2, 1.1.3, 1.1.4","closed","type: bug,","spring-projects-issues","2005-02-07T11:13:18Z","2005-02-15T19:28:33Z"
"","5634","formSingleSelect and formMultiSelect don't work for ref data Maps with numeric keys [SPR-909]","**[Bubba Puryear](https://jira.spring.io/secure/ViewProfile.jspa?name=bubbapuryear)** opened **[SPR-909](https://jira.spring.io/browse/SPR-909?redirect=false)** and commented  The FreeMarker macros in spring.ftl for drop downs and selection lists do not handle processing Maps from the model that contain numeric keys. Specifically, the line:      selected=""selected"">${options[value]}  blows up if stringStatusValue happens to be a number. (ie: the current control is bound to a numeric property). The following patch solves this issue for me locally (although I haven't tested it terribly much):  --- src.old/org/springframework/web/servlet/view/freemarker/spring.ftl  2005-04-27 17:32:59.471162128 -0400 +++ src/org/springframework/web/servlet/view/freemarker/spring.ftl      2005-04-27 17:38:27.247332576 -0400 @@ -175,12 +175,12 @@     ---      ${options[value]}  +                 ${options[value]}                          +   >  + + + +      selected=""selected""  +         selected=""selected""  +  ---  **Affects:** 1.2 RC2","closed","type: bug,","spring-projects-issues","2005-04-27T09:49:44Z","2019-01-13T08:58:02Z"
"","5335","Spring transaction manager behavior problem when a JTA transaction timed out [SPR-607]","**[Bryan Shaw](https://jira.spring.io/secure/ViewProfile.jspa?name=silverhoof)** opened **[SPR-607](https://jira.spring.io/browse/SPR-607?redirect=false)** and commented  The issue happened when I use spring transaction intercepter and hibernate inteceptor together to control transaction boundaries and ORM respectivly.  When I have a very big transaction inside my JTA transaction boundary and it timed out, I got no exception to indicate the transaction is not commited and is rolled back. My code just continue running after exit the declared transaction boundary and leave the database unchange as if the transaction is successfully finished.   ---  **Affects:** 1.1.3","closed","in: data,","spring-projects-issues","2005-01-10T19:04:36Z","2019-01-11T12:51:43Z"
"","4981","Quartz: Setting flag to overwrite existing jobs doesn't update triggers [SPR-250]","**[Bryan Keller](https://jira.spring.io/secure/ViewProfile.jspa?name=bryanck)** opened **[SPR-250](https://jira.spring.io/browse/SPR-250?redirect=false)** and commented  This applies to the Quartz scheduler support.  When setting the overwriteExistingJobs flag on the org.springframework.scheduling.quartz.SchedulerFactoryBean, any triggers that have been updated since the last startup time will not be overwritten. If you change the trigger's criteria, and are persisting the schedules via the dataSource property, the trigger will not be updated when your server is restarted. Te old trigger criteria remain in effect.  An example:  Create a persistence schedule using something similar to the following applicationContext.xml snippet (see bottom). Now stop your server, change the trigger params (e.g. cronExpression), and restart the server. The original trigger's cronExpression remains in effect - the new values are not used.  Solution:  Call scheduler.rescheduleJob(trigger) to reschedule the trigger on startup.  From SchedulerFactoryBean.java.registerJobsAndTriggers()      // register Triggers     if (this.triggers != null) {          for (Iterator it = this.triggers.iterator(); it.hasNext();) {               Trigger trigger = (Trigger) it.next();               if (this.scheduler.getTrigger(trigger.getName(), trigger.getGroup()) == null) {                        // check if the Trigger is aware of an associated JobDetail                        if (trigger instanceof JobDetailAwareTrigger) {                                 JobDetail jobDetail = ((JobDetailAwareTrigger) trigger).getJobDetail();                                 // automatically register the JobDetail too                                 if (!this.jobDetails.contains(jobDetail) && addJobToScheduler(jobDetail)) {                                          this.jobDetails.add(jobDetail);                                 }                        }                        this.scheduler.scheduleJob(trigger);               } else if (this.overwriteExistingJobs) {                        this.scheduler.rescheduleJob(                            trigger.getName(), trigger.getGroup(), trigger                        );               }          }     }  snippet from applicationContext.xml:                     	     	true     	appContext     	     		     			     		     	                              	     	0 0 6 * * ?                         	     		com.airprism.service.msg.impl.CleanupJob     	         ---  **Affects:** 1.1 RC1","closed","in: core,","spring-projects-issues","2004-08-09T07:57:02Z","2019-01-11T13:27:06Z"
"","5317","The spring-beans.dtd does not allow the use of both constructor-based and setter-based injection in the same bean [SPR-589]","**[Brian Stansberry](https://jira.spring.io/secure/ViewProfile.jspa?name=bstansberry)** opened **[SPR-589](https://jira.spring.io/browse/SPR-589?redirect=false)** and commented  The spring-beans.dtd seems to disallow the use of both constructor-based and setter-based injection in the same bean, i.e  \  Not knowing about this restriction, I created a couple beans that mixed both approaches and they worked fine.  Both the c'tor args and the properties were set.  This was using Spring 1.1.2; don't know about other versions.  The application context was loaded via the ContextLoaderListener and XmlWebApplicationContext.  If Spring can definitely support mixing injections styles, I recommend the DTD be changed to:  \  I list this as an improvement because a number of XML validators (XMLSpy, a couple on-line ones) did not complain about my configuration file even though it mixed constructor-args and properties.  Perhaps my understanding of DTD is faulty (quite likely).  But, in any case, a co-worker's Eclipse 3.1M2 installation with Spring IDE installed did complain about the config file.  When we switched to Eclipse 3.1M3 the complaints went away.  The downside to the above recommendation is that if XMLSpy is correct and mixing constructor-args and properties is legal under the current DTD, my proposed change will make it illegal to mix the two types in random order -- they would have to be grouped.  This may break existing applications.  So, perhaps a simple comment in the DTD noting that mixing the two types is valid will suffice.   ---  **Affects:** 1.1.2","closed","type: enhancement,","spring-projects-issues","2004-12-28T09:41:24Z","2004-12-29T07:27:46Z"
"","5328","TraceInterceptor logger in DEBUG mode check. [SPR-600]","**[Brian Lang](https://jira.spring.io/secure/ViewProfile.jspa?name=flyingwedge)** opened **[SPR-600](https://jira.spring.io/browse/SPR-600?redirect=false)** and commented  Juergen,  For your tracking purposes, as you have already remedied and notified me via email.  Thanks,  Brian  FW: ------------------------------------------------------------------- We make extensive use of the TraceInterceptor to trace method entry and exits in our objects. I've noticed in the 1.1.3 source code that there is a check to see if the logger is in DEBUG mode before logging the message before method invocation. However, this if check is missing from the finally block that outputs the exit trace.   ---  **Affects:** 1.1.3","closed","type: enhancement,","spring-projects-issues","2005-01-06T11:48:30Z","2005-01-06T19:29:45Z"
"","5822","Add propertyeditor for javax.mail.internet.InternetAddress [SPR-1118]","**[Brian Hanafee](https://jira.spring.io/secure/ViewProfile.jspa?name=bhanafee)** opened **[SPR-1118](https://jira.spring.io/browse/SPR-1118?redirect=false)** and commented  It would be useful to have a propertyeditor for javax.mail.internet.InternetAddress.   ---  **Attachments:** - [InternetAddressEditor.java](https://jira.spring.io/secure/attachment/10911/InternetAddressEditor.java) (_1.59 kB_) - [InternetAddressEditorTest.java](https://jira.spring.io/secure/attachment/10912/InternetAddressEditorTest.java) (_1.96 kB_)","closed","type: enhancement,","spring-projects-issues","2005-07-09T11:13:18Z","2005-07-11T00:33:30Z"
"","5325","JmsTemplate not working with JTA [SPR-597]","**[Branimir Wetzstein](https://jira.spring.io/secure/ViewProfile.jspa?name=brawetz)** opened **[SPR-597](https://jira.spring.io/browse/SPR-597?redirect=false)** and commented  As stated in the topics ""Can JTA and JMS work together ?"" and ""WebSphere + JMS + XA"" in the Spring Forum ""Remoting and JMS"" there is a problem when using JmsTemplate within a global transaction. In JmsTemplate doSend() line 608:  if (session.getTransacted() && !TransactionSynchronizationManager.hasResource(getConnectionFactory())) { // transacted session created by this template -> commit session.commit(); }  The second condition always returns true because TransactionSynchronizationManager.bind() is not called anywhere. Therefore the session is committed locally which throws an IllegalStateException: ""Method not permitted in global transaction"" under WebSphere MQ. Similar problem in doReceive().   ---  **Affects:** 1.1.3","closed","type: bug,","spring-projects-issues","2005-01-05T21:09:13Z","2005-01-06T06:01:24Z"
"","5499","Multiple schedulers [SPR-772]","**[Bram Smeets](https://jira.spring.io/secure/ViewProfile.jspa?name=bram)** opened **[SPR-772](https://jira.spring.io/browse/SPR-772?redirect=false)** and commented  There is a problem with multiple schedulers. It is impossible to get two schedulers using the SchedulerFactoryBean. The main problem is that a NullPointerException occurs while initializing the SchedulerFactoryBean when the schedulerName property has been set.  More information: http://forum.springframework.org/viewtopic.php?t=3089  ---  **Affects:** 1.1.5  **Issue Links:** - #5569 quartz scheduler factory cannot produce multiple schedulers (_**""is duplicated by""**_) - #21423 SchedulerFactoryBean should not override explicit ""org.quartz.scheduler.instanceName"" setting with bean name","closed","in: core,","spring-projects-issues","2005-03-09T18:27:46Z","2019-01-11T12:56:21Z"
"","5746","More specific exception on update [SPR-1039]","**[Bram Smeets](https://jira.spring.io/secure/ViewProfile.jspa?name=bram)** opened **[SPR-1039](https://jira.spring.io/browse/SPR-1039?redirect=false)** and commented  When using the Hibernate 3 'getHibernateTemplate.update' method, and the object does not already exist, sping will throw a HibernateSystemException. This should be a technlogy independent exception like 'ObjectRetrievalFailureException'.  Details: org.springframework.orm.hibernate3.HibernateSystemException: Unexpected row count: 0 expected: 1; nested exception is....  ..  org.springframework.orm.hibernate3.HibernateTemplate.execute(HibernateTemplate.java:311)   ---  **Affects:** 1.2.1  **Attachments:** - [Document.zip](https://jira.spring.io/secure/attachment/10834/Document.zip) (_138.34 kB_)  1 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2005-06-13T21:43:24Z","2005-08-03T20:29:07Z"
"","5850","JavaDoc for AbstractTransactionalSpringContextTests is not correct for onSetUp and onTearDown methods [SPR-1148]","**[Brad Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=brad%20smith)** opened **[SPR-1148](https://jira.spring.io/browse/SPR-1148?redirect=false)** and commented  The JavaDoc comments for onTearDown and onSetUp methods incorrectly advise the developer to override these methods in subclasses. These methods are final. The comment should direct developers to override the onSetUpInTransaction and onTearDownInTransaction methods.   ---  **Affects:** 1.2.2","closed","type: bug,","spring-projects-issues","2005-07-17T09:06:33Z","2005-07-19T06:40:40Z"
"","5543","ReloadableResourceBundleMessageSource not reloadable [SPR-816]","**[bob manc](https://jira.spring.io/secure/ViewProfile.jspa?name=bobmanc)** opened **[SPR-816](https://jira.spring.io/browse/SPR-816?redirect=false)** and commented  ReloadableResourceBundleMessageSource res = (ReloadableResourceBundleMessageSource)getApplicationContext().getBean(""messageSource""); res.clearCache();  messageSource is defined in applicationContext.xml with the cache seconds set to -1. The properties file was changed correctly. The code does bring back the messageSource bean correctly. The clearCache method is called. The jsp page uses the spring:message tag.  The message values don't change.   ---  **Affects:** 1.1.5","closed","type: bug,","spring-projects-issues","2005-03-23T23:49:17Z","2019-01-11T13:08:32Z"
"","5063","Already value for key bound to thread [SPR-333]","**[Bob Johnson](https://jira.spring.io/secure/ViewProfile.jspa?name=pojo)** opened **[SPR-333](https://jira.spring.io/browse/SPR-333?redirect=false)** and commented  There appears to be a problem with release 1.1. I have a declarative transaction management configuration that works correctly in release 1.0.2, but crashes using release 1.1! The exception I am getting is:  ---  Could not create Hibernate transaction; nested exception is java.lang.IllegalStateException: Already value [org.springframework.jdbc.datasource.ConnectionHolder@14e9851] for key [org.apache.commons.dbcp.BasicDataSource@4dd1b] bound to thread [main]  ---  This exception appears as soon as I introduce a TransactionProxyFactoryBean for a POJO class (see applicationContext.xml snippet below).  This exception is discussed in #5003 which discusses patches to release 1.1 RC2. I have verified that release 1.1 does indeed contain these patches in the source. Is it possible that these patches are somehow related to the failure I am experiencing in 1.1 ???  NOTE: The POJO (""JobService"") is a simple delegate that dispatches to an underlying DAO.  I have the following bean definitions (among others):  ---  \                            oracle.jdbc.driver.OracleDriver                               jdbc:oracle:thin:@XEM02DEV:1527:XEM02DEV                               ******                               *********                                    false         	               	     	     		          			conf/hibernate/JobDto.hbm.xml          		     	     	     		     			net.sf.hibernate.dialect.Oracle9Dialect     			     		     	                           	                      	              		                                    	                                     	     	     	     		     			PROPAGATION_REQUIRED     		     	       \  ---  When I added the Transactional Proxy (TransactionProxyFactoryBean show above), the unit test for a class using the JobDoa fails with the following error:  ---  Testsuite: com.xcel.flipper.persist.dao.ActivityExecutionLogDaoTest Tests run: 1, Failures: 0, Errors: 1, Time elapsed: 7.187 sec  Testcase: testActivityExectionLogCLOBField(com.xcel.flipper.persist.dao.ActivityExecutionLogDaoTest):	Caused an ERROR Could not create Hibernate transaction; nested exception is java.lang.IllegalStateException: Already value [org.springframework.jdbc.datasource.ConnectionHolder@14e9851] for key [org.apache.commons.dbcp.BasicDataSource@4dd1b] bound to thread [main] org.springframework.transaction.CannotCreateTransactionException: Could not create Hibernate transaction; nested exception is java.lang.IllegalStateException: Already value [org.springframework.jdbc.datasource.ConnectionHolder@14e9851] for key [org.apache.commons.dbcp.BasicDataSource@4dd1b] bound to thread [main] java.lang.IllegalStateException: Already value [org.springframework.jdbc.datasource.ConnectionHolder@14e9851] for key [org.apache.commons.dbcp.BasicDataSource@4dd1b] bound to thread [main] at org.springframework.transaction.support.TransactionSynchronizationManager.bindResource(TransactionSynchronizationManager.java:137) at org.springframework.orm.hibernate.HibernateTransactionManager.doBegin(HibernateTransactionManager.java:412) at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:269) at org.springframework.transaction.interceptor.TransactionAspectSupport.createTransactionIfNecessary(TransactionAspectSupport.java:200) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:49) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:138) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:152) at $Proxy0.create(Unknown Source) at com.xcel.flipper.persist.dao.ActivityExecutionLogTestService.createJob(ActivityExecutionLogTestService.java:84) at com.xcel.flipper.persist.dao.ActivityExecutionLogTestService.initialize(ActivityExecutionLogTestService.java:55) at com.xcel.flipper.persist.dao.ActivityExecutionLogTestService.runTest(ActivityExecutionLogTestService.java:139) at com.xcel.flipper.persist.dao.ActivityExecutionLogTestService$$FastClassByCGLIB$$73e1c0c5.invoke(\) at net.sf.cglib.proxy.MethodProxy.invoke(MethodProxy.java:149) at org.springframework.aop.framework.Cglib2AopProxy$MethodInvocationImpl.invokeJoinpoint(Cglib2AopProxy.java:878) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:116) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:56) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:138) at org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor.intercept(Cglib2AopProxy.java:596) at com.xcel.flipper.persist.dao.ActivityExecutionLogTestService$$EnhancerByCGLIB$$35ec6769.runTest(\) at com.xcel.flipper.persist.dao.ActivityExecutionLogDaoTest.testActivityExectionLogCLOBField(ActivityExecutionLogDaoTest.java:63) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.commons.jelly.tags.ant.AntTag.doTag(AntTag.java:232) ..........  ---  ---  **Affects:** 1.1 final","closed","in: core,","spring-projects-issues","2004-09-14T12:13:14Z","2019-01-13T22:53:52Z"
"","5719","Simple auto deployment if tomcat present [SPR-1009]","**[Bill Barnhill](https://jira.spring.io/secure/ViewProfile.jspa?name=billbarnhill)** opened **[SPR-1009](https://jira.spring.io/browse/SPR-1009?redirect=false)** and commented  For me at least this modification has been very helpful in experimenting with the examples. It's only made for Tomcat, and could use support for Jetty, JBoss, and Weblogic.  Goal: Have webapp files for web app with name of ${name} be updated if and only if (a) CATALINA_HOME env var set, and (b) the a webapps subdirectory exists within the location specified by CATALINA_HOME.  Steps to achieve for a specific example or app: 1. Add the following at the end of the initial property declarations at the beginning of the build file:                   2. (formatting modified for easier reading) Modify target start element for warfile target    from     to    >  name=""warfile""    > depends=""build,docs,deploy""    > description=""Build the web application archive""     > 3. Add the following somewhere in the build file    >        name=""deploy""    >    if=""deploy.dir""    >    description=""Copy war files to webapp dir""    >        >    >     >    > >>    >     > >>    >               todir=""${deploy.dir}""     >    > >>    >               preservelastmodified=""true""    >    > >>    >               >    >    > >>    >          >    > >>    >               >    > >>    >               >    > >>    >               >    > >>    >               >    > >>    >               >    > >>    >               >    > >>    >               >    > >>    >          >    > >>    >     >        >    \    >     > End of steps    >     > If you've set CATALINA_HOME correctly then the web app directory will be updated properly when you build the war file. If CATALINA_HOME not set it will just skip the deploy target.    >     > Some possible enhancements to this:    > 1. Support for Jetty, Jboss, Weblogic    > 2. Extract fileset into property and use in both warfile and deploy    > 3. Add a target that gives CATALINA_HOME instructions, make warfile depend on it, and give the instruction target a unless=""${env.CATALINA_HOME}  ---  No further details from [SPR-1009](https://jira.spring.io/browse/SPR-1009?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-06-04T01:32:53Z","2019-01-13T22:51:33Z"
"","5740","Constructor does not take & [SPR-1032]","**[Bernard Patteeuw](https://jira.spring.io/secure/ViewProfile.jspa?name=bernard.patteeuw)** opened **[SPR-1032](https://jira.spring.io/browse/SPR-1032?redirect=false)** and commented  I needed a bean that took a &sessionFactory as constructor argument. But this apparently does not work. I created thus a simple property setter and getter and this does work.  So I think this check is missing in the contructor.  Kind regards, B.   --- No further details from [SPR-1032](https://jira.spring.io/browse/SPR-1032?redirect=false)","closed","","spring-projects-issues","2005-06-12T20:04:38Z","2019-01-11T18:34:47Z"
"","5444","Documentation Code Error [SPR-716]","**[Ben Poweski](https://jira.spring.io/secure/ViewProfile.jspa?name=bpoweski)** opened **[SPR-716](https://jira.spring.io/browse/SPR-716?redirect=false)** and commented  Under section [12.5.2. Chaining ViewResolvers]  The sample code has an error, the \ tag is not well formed for:  \\org.springframework.web.servlet.view.JstlView\ \    --- No further details from [SPR-716](https://jira.spring.io/browse/SPR-716?redirect=false)","closed","type: bug,","spring-projects-issues","2005-02-15T15:03:43Z","2005-02-15T19:25:47Z"
"","4961","Please improve BeanFactory support for containers & collections [SPR-230]","**[Ben Hutchison](https://jira.spring.io/secure/ViewProfile.jspa?name=ben_hutchison)** opened **[SPR-230](https://jira.spring.io/browse/SPR-230?redirect=false)*** and commented  Objects that contain other objects (common examples include Swing Containers and the Collections classes) frequently cannot have their initial state specified through setting javabeans properties alone.  This is a request for the spring core to include extensions to the syntax of the applicationContext.xml to allow such objects to be setup completely from XML. Some reasonably conveinient syntax is needed that allows methods like ""add()"" to be invoked on the bean at construction time. Ideally, I think the syntax should allow any arbritrary methods to be called on a bean during preparation.  There is a clear precendent to be found in the design of the java.beans.XMLEncoder/Decoder classes, designed to support long term bean perisstence. Consider the extract below generated by XML-serializing a List:  \ \ \ \ \item\ \ \ \  Evidently, it was recognized as an important feature as its present from the first release of the peristence mechanism.  Consider what is **not** readily doable from XML without this feature: * Cannot create any Swing component heirarchies. * Cannot initialize custom collections (ie anything not a vanilla set/map/list impl), unless it provides a copy-constructor. * Cannot init arbritrary state on objects which do not observe the get/setXXX convention (and legacy code is littered with them).  ---  **Affects:** 1.0.2  **Attachments:** - [SPR-230.patch](https://jira.spring.io/secure/attachment/15243/SPR-230.patch) (_137.30 kB_)  **Issue Links:** - #7195 Allow setting of properties without a javabean setter (_**""is duplicated by""**_) - #7222 Support JavaBean Eventing methods in Spring (_**""is duplicated by""**_) - #7488 ""adder"" injection in addition to ""setter"" (invoke addXX() instead of setXX()) (_**""is duplicated by""**_) - #5727 support ""add""-style List injection (_**""is duplicated by""**_)  32 votes, 28 watchers","closed","has: votes-jira,","spring-projects-issues","2004-07-20T15:54:01Z","2019-01-13T22:54:35Z"
"","4922","Please allow lists & maps at top-level of applicationContext.xml [SPR-190]","**[Ben Hutchison](https://jira.spring.io/secure/ViewProfile.jspa?name=ben_hutchison)** opened **[SPR-190](https://jira.spring.io/browse/SPR-190?redirect=false)** and commented  Please provide a way to specifiy lists and maps at the top-level of the app context XML file; ie so that they can be got directly from the bean factory rather than needing to be a property of another bean.  Why?  * Very common to need them for simple config, esp. Maps * They are JavaBeans as is * Doesnt seem like a hard change  right now, Im having to do a silly hack:  \ \\...put my mapping here...   ---  **Affects:** 1.1 RC1","closed","type: enhancement,","spring-projects-issues","2004-06-27T15:37:09Z","2004-06-29T02:32:55Z"
"","5810","set values for hibernate filter parameters [SPR-1106]","**[Beat Aeschlimann](https://jira.spring.io/secure/ViewProfile.jspa?name=nospinout)** opened **[SPR-1106](https://jira.spring.io/browse/SPR-1106?redirect=false)** and commented  i can set filter over FilterDefinitionFactoryBean an enable filter with setFilterName. How can i set the value of a filter parameter?   ---  **Affects:** 1.2 RC2","closed","","spring-projects-issues","2005-07-06T20:35:42Z","2019-01-11T19:32:46Z"
"","5053","EJB's that reference other beans cannot use Dependency Injection [SPR-323]","**[Barry Lagerweij](https://jira.spring.io/secure/ViewProfile.jspa?name=barryl)** opened **[SPR-323](https://jira.spring.io/browse/SPR-323?redirect=false)** and commented  EJB's that depend on other beans cannot use Dependency Injection. Instead, they must use code like  ProductDAO dao = super.getBeanFactory().getBean(""ProductDAO"");  It would be a huge improvement if EJB's could have something like:  ProductDAO getProductDAO () { return this.productDAO; } void setProductDAO ( ProductDAO dao) { this.productDAO = dao; }  For this to work, it would be nice if Spring would support a marker interface (like BeanNameAware), so that Spring could determine a EJB's name, and inject dependant objects.  Spring already provides an AbstractStatelessSessionBean base-class. This class needs to be improved.  For example:  AbstractStatelessSessionBean { void ejbCreate() { if (this instanceof BeanNameAware) { String name = ((BeanNameAware)this).getName(); XXXUtils.injectDependencies(getBeanFactory(),name,this); } } }  ---  **Affects:** 1.1 final  **Issue Links:** - #6115 Allow declarative dependency injection for EJB components (_**""is duplicated by""**_)  3 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2004-09-08T22:50:15Z","2019-01-11T14:04:38Z"
"","5052","SingletonBeanFactoryLocator uses URL *Strings* instead of object-references for resources [SPR-322]","**[Barry Lagerweij](https://jira.spring.io/secure/ViewProfile.jspa?name=barryl)** opened **[SPR-322](https://jira.spring.io/browse/SPR-322?redirect=false)** and commented  Spring's BeanFactory uses the UrlResource to reference a resource. It does this by using the String representation of a resource (instead of the URL object returned by Class.getResource()).  Orion ApplicationServer (but other appserver may experience the same behaviour) returns a jndi://.. String, which it cannot interpret later on.  The offending line: resources[i] = url.toExternalForm();  Proposed solution: use object-references (instead of Strings) to locate resources.  Stacktrace: org.springframework.beans.factory.BeanDefinitionStoreException: Bad URL when loading definition; nested exception is java.net.MalformedURLException: unknown protocol: jndi java.net.MalformedURLException: unknown protocol: jndi at java.net.URL.\(URL.java:544) at java.net.URL.\(URL.java:434) at java.net.URL.\(URL.java:383) at org.springframework.core.io.UrlResource.\(UrlResource.java:54) at org.springframework.beans.factory.access.SingletonBeanFactoryLocator.createDefinition(SingletonBeanFactoryLocator.java:477) at org.springframework.beans.factory.access.SingletonBeanFactoryLocator.useBeanFactory(SingletonBeanFactoryLocator.java:385)   ---  1 votes, 0 watchers","closed","in: core,","spring-projects-issues","2004-09-08T22:38:40Z","2004-09-26T09:23:19Z"
"","5571","Conflict between advice and jmx [SPR-845]","**[Barry Kaplan](https://jira.spring.io/secure/ViewProfile.jspa?name=memelet)** opened **[SPR-845](https://jira.spring.io/browse/SPR-845?redirect=false)** and commented  I am exporting beans as mbeans and accessign them via jconsole. However, if I also advise the same bean (eg, with around advice) then the mbean attribute access fails with an error indicating ""Target method not found"".  Attached is a psuedo test case, since I don't yet know how to use spring on the jmx client side. But also since the problem I am seeing is via jconsole.  One thing to note is that the jmx attributes are /not/ defined on any interface, only the bean itself.  Also, this is running on jdk 1.5 using '-Dcom.sun.management.jmxremote' to allow jconsole to connect.  Hopefully the psuedo test will be enough allow for repoducing the problem. If not, please let me know. In the mean time I will try to dig deeper to determine the cause of this problem.   ---  **Affects:** 1.2 RC1  **Attachments:** - [proxiedMbeanContext.xml](https://jira.spring.io/secure/attachment/10630/proxiedMbeanContext.xml) (_1.27 kB_) - [ProxiedMbeanTests.java](https://jira.spring.io/secure/attachment/10631/ProxiedMbeanTests.java) (_3.32 kB_)","closed","in: core,","spring-projects-issues","2005-04-03T06:06:44Z","2019-01-13T22:52:09Z"
"","5547","MBeanExporter incorrectly handles AOP proxies [SPR-820]","**[Barry Kaplan](https://jira.spring.io/secure/ViewProfile.jspa?name=memelet)** opened **[SPR-820](https://jira.spring.io/browse/SPR-820?redirect=false)** and commented  In the method registerSimpleBean there is a check to see if the mbean to register is an aop-proxy:      Class beanClass = (AopUtils.isAopProxy(bean)          ? bean.getClass().getSuperclass() : bean.getClass());  This check statement does not yield the target bean.  I have created around advice for a bean. The bean's class (in the above statement) is $Proxy9 containing a JdkDynamicAopProxy.  Here is the complete bean config (sorry, jira is going to mangle this  bad):  \  \ \ \ \ \  public class ModelShutdownExceptionHandler extends StaticMethodMatcherPointcutAdvisor implements InitializingBean {      private static final Logger log = Logger.getLogger(ModelShutdownExceptionHandler.class);          private Model model;          public void setModel(Model model) {         this.model = model;     }          @Override     public void setAdvice(Advice advice) {         throw new UnsupportedOperationException();     }          public void afterPropertiesSet() throws Exception {         if (model == null) {             throw new IllegalArgumentException(""Model not set"");         }         super.setAdvice(new ShutdownModelAdvice());     }          public boolean matches(Method method, Class targetClass) {         return matchesEventListenerOnEvent(method, targetClass);     }          private boolean matchesEventListenerOnEvent(Method method, Class targetClass) {         return EventListener.class.isAssignableFrom(targetClass)                 && method.getName().equals(""onEvent"");     }          private class ShutdownModelAdvice implements MethodInterceptor {              public Object invoke(MethodInvocation invocation) throws Throwable {             try {                 invocation.proceed();             } catch (Throwable t) {                 log.fatal(""Unandled exception, closing model"", t);                 model.close();             }             return null;         }     }  }    ---  **Affects:** 1.2 RC1","closed","in: core,","spring-projects-issues","2005-03-24T11:45:51Z","2005-03-24T17:38:44Z"
"","5545","JmsConsumerFactoryBean single property incorrect [SPR-818]","**[Barry Kaplan](https://jira.spring.io/secure/ViewProfile.jspa?name=memelet)** opened **[SPR-818](https://jira.spring.io/browse/SPR-818?redirect=false)** and commented  org.springframework.jms.JmsConsumerFactoryBean returns false for isSingleton, but has singleton behavior.  Same goes for org.springframework.jms.JmsProducerFactoryBean.   ---  **Affects:** 1.2 RC1","closed","type: bug,","spring-projects-issues","2005-03-24T07:57:25Z","2005-03-24T21:33:43Z"
"","5541","currencyTimeLimit should only be set of positive [SPR-814]","**[Barry Kaplan](https://jira.spring.io/secure/ViewProfile.jspa?name=memelet)** opened **[SPR-814](https://jira.spring.io/browse/SPR-814?redirect=false)** and commented  Please see http://forum.springframework.org/viewtopic.php?p=17027#17027   ---  **Affects:** 1.2 RC1","closed","in: core,","spring-projects-issues","2005-03-23T09:14:10Z","2005-03-23T22:08:24Z"
"","5538","Allow default for @ManagedResource.beanName property [SPR-811]","**[Barry Kaplan](https://jira.spring.io/secure/ViewProfile.jspa?name=memelet)** opened **[SPR-811](https://jira.spring.io/browse/SPR-811?redirect=false)** and commented  Currently annotation the property 'objectName' on org.springframework.jmx.export.annotation.ManagedResource is required (ie, has no default value).  Since springs provides other strategies for obtaining the objectName, the property on ManagedResource should be optional.  See http://forum.springframework.org/viewtopic.php?t=4259 for context description.   ---  **Affects:** 1.2 RC1","closed","type: enhancement,","spring-projects-issues","2005-03-22T11:05:44Z","2005-03-22T22:57:19Z"
"","5851","Allow FactoryBean to implement post processors [SPR-1149]","**[Barry Kaplan](https://jira.spring.io/secure/ViewProfile.jspa?name=memelet)** opened **[SPR-1149](https://jira.spring.io/browse/SPR-1149?redirect=false)** and commented  FactoryBean's are excluded from implementing a whole host of post processor interfaces (due to the fact that getBeansOfType et all exclude FactoryBeans from their results). When building a set of spring beans for an existing product/library the use of FactoryBean is often required. Also it is often required to perform post processing for these library beans.  A concrete example is drools-spring. The class WorkingMemoryFactoryBean constructs a drools WorkingMemory instance. This /must/ be done via FactoryBean due to restrictions on the drools api. Drools defines an interface WorkingMemoryListener. I would like for WorkingMemoryFactoryBean to declare a property 'autoAddListeners' which will scan the BeanFactory for instances of WorkingMemoryListener and add it the WorkingMemory created by the FactoryBean.  The above is not possible with 1.2.2 or 1.2.3-dev, because WorkingMemoryFactoryBean cannot implement any post processor interfaces (not BeanPostProcessor, BeanFactoryPostProcessor, nor ApplicationListener). This requires a seperate bean to be defined in the context just to search for WorkingMemory beans. This is noise. The cleanest and most encapsulated place for this behavior is in the WorkingMemoryFactoryBean.  There are lots of other examples. I having a similar troubles with my spring integration for the quickfixj project.  I can't see any technical reason why FactoryBean's need to be excluded in this way. Maybe it was because at some in the past creating the FactoryBean instance always trigger the call of getObject. But this does not seem to be the case anywmore. Is there some reason I am not aware of?  ---  **Affects:** 1.2.2  **Issue Links:** - #5847 Allow for getBeanNameOfType to return FacotryBeans (_**""is duplicated by""**_)","closed","type: enhancement,","spring-projects-issues","2005-07-17T12:47:34Z","2019-01-11T19:34:08Z"
"","5847","Allow for getBeanNameOfType to return FacotryBeans [SPR-1144]","**[Barry Kaplan](https://jira.spring.io/secure/ViewProfile.jspa?name=memelet)** opened **[SPR-1144](https://jira.spring.io/browse/SPR-1144?redirect=false)** and commented  When invoking getBeanNameOfType/getBeansOfType(Foo.class, false, true) I was expecting that if a FactoryBean implemented Foo I would  get the actual FactoryBean name/instance. It seems that with the current impl there is not set of arguments that will allow obtaining FactoryBeans that implement a specified interface. The result is I must duplicate these methods in my application.  ---  **Affects:** 1.2.2  **Issue Links:** - #5851 Allow FactoryBean to implement post processors (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2005-07-15T07:08:14Z","2019-01-11T19:34:02Z"
"","5836","Allow programmatic adding of ApplicationListeners [SPR-1133]","**[Barry Kaplan](https://jira.spring.io/secure/ViewProfile.jspa?name=memelet)** opened **[SPR-1133](https://jira.spring.io/browse/SPR-1133?redirect=false)** and commented  Currently the only ways to add an ApplicationListener is via the context file or by subclassing AbstractApplicationListener. It would very nice to allow beans to register themselves as an ApplicationListener. Maybe this is implemented by making AbstractApplicationContext.addListener public instead of protected.  Retional: I use FactoryBeans to add framework-like capabilities for drools-spring. When a WorkingMemoryFactoryBean is used, not only is a WorkingMemory instance created, but all WorkingMemoryListeners in the context can optionally get added to the newly created WorkingMemory.  With the current impl of spring, the above seems to be impossible. A FactoryBean cannot be a context post processor of any kind, since it they are excluded from all calls to 'getBeanNamesForType'. Why this is so I don't yet grok. Changing this behavior would be an aternative (or addition) to changing the scope on addListener.   ---  **Affects:** 1.2.2","closed","type: enhancement,","spring-projects-issues","2005-07-13T14:03:32Z","2005-07-20T06:26:40Z"
"","5819","AbstractBeanFactory should not create lazy-init beans to determine their type [SPR-1115]","**[Barry Kaplan](https://jira.spring.io/secure/ViewProfile.jspa?name=memelet)** opened **[SPR-1115](https://jira.spring.io/browse/SPR-1115?redirect=false)** and commented  Please see http://forum.springframework.org/viewtopic.php?t=6933.  (While I do not feel I have the right to assign this a priority of blocker, it is a blocker for my use of 1.2.2. Which is too bad, since 1.2.2 had implemented several of my suggestions.)   ---  **Affects:** 1.2.2","closed","in: core,","spring-projects-issues","2005-07-08T04:21:19Z","2019-01-12T16:41:03Z"
"","5774","PropertyResourceConfigurer should allow properties to override locations [SPR-1067]","**[Barry Kaplan](https://jira.spring.io/secure/ViewProfile.jspa?name=memelet)** opened **[SPR-1067](https://jira.spring.io/browse/SPR-1067?redirect=false)** and commented  PropertyResourceConfigurer.postProcessBeanFactory always overwrites the 'properties' values with the 'location' values. I have a particular component that needs to override the properties in the files with specific values.  The PropertyResourceConfigurer should be configurable to allow either 'properties' or 'location(s)' to be overridden.  (Rational: In this situation, an application context is being created for each component being created. The components are defined in the top-level context, and when start() is invoked the create a child context specific for the component. While creating the child context, the component creates a PropertyResourceConfigurer and adds it via addBeanFactoryPostProcessor() to the child context. The child context is then refreshed. The properties defined in the properties files (ie, 'location') are the component defaults. The properties defined in the 'properties' are the overrides. PropertyResourceConfigurer behaves just the opposite.)   ---  **Affects:** 1.2.1","closed","type: enhancement,","spring-projects-issues","2005-06-21T16:00:48Z","2005-06-24T03:36:43Z"
"","5734","Support for excludeBeans on MBeanExporter [SPR-1026]","**[Barry Kaplan](https://jira.spring.io/secure/ViewProfile.jspa?name=memelet)** opened **[SPR-1026](https://jira.spring.io/browse/SPR-1026?redirect=false)** and commented  I have some DynamicMBean's that can't be registered until the ContextRefreshedEvent, and hence register themselves with the server. In one of the context where one of these beans is used, MBeanExporter is configured for auto discovery. This causes a conflict, as the DynamicMBean will [attempt to] get registred twice.  An 'excludeBeans' property on MBeanExporter would resolve this particular issue.   ---  **Affects:** 1.2.1","closed","type: enhancement,","spring-projects-issues","2005-06-08T06:36:18Z","2012-06-19T03:54:38Z"
"","5731","Move AbstractMBeanInfoAssembler.getTargetClass to AopUtils [SPR-1023]","**[Barry Kaplan](https://jira.spring.io/secure/ViewProfile.jspa?name=memelet)** opened **[SPR-1023](https://jira.spring.io/browse/SPR-1023?redirect=false)** and commented  It is common for code that uses reflection to check if the class has been subclassed by cglib or proxied. In my code I use AopUtils.isAopProxy/isCglibProxy/etc to detect the condition. However, once we know its an aop-proxy, AopUtils does not contain any methods to obtain the ""real"" class.  The method org.springframework.jmx.export.assembler.AbstractMBeanInfoAssembler.getTargetClass() does just that. This method should be moved into AopUtils so it does need to be copied all over the place.   ---  **Affects:** 1.2.1","closed","type: enhancement,","spring-projects-issues","2005-06-07T10:27:15Z","2005-06-13T04:10:38Z"
"","5611","Unsatisfied dependency error in property 'callbacks' error when using lookup-method injection with dependency check with cglib 2.1 [SPR-884]","**[Balázs Szabó](https://jira.spring.io/secure/ViewProfile.jspa?name=dlux)** opened **[SPR-884](https://jira.spring.io/browse/SPR-884?redirect=false)** and commented  When a proxy is created with the lookup-method injection, and dependency checking is switched on, then it complains for a previously non-existing property called 'callbacks'.  I figured out that it is because cglib proxies automatically implements the Factory interface which has this property exposed.  To fix this, please use the latest cglib and use the setUseFactory(false) on the enhancer instance of the instantiator.  ---  **Affects:** 1.2 final  **Issue Links:** - #5616 Dependency checking doesn't work for beans using method injection (_**""is duplicated by""**_)","closed","in: core,","spring-projects-issues","2005-04-17T05:53:43Z","2019-01-11T13:06:29Z"
"","5461","Spring doesn't recognize MySQL deadlock exceptions [SPR-733]","**[Attila Szegedi](https://jira.spring.io/secure/ViewProfile.jspa?name=szegedia)** opened **[SPR-733](https://jira.spring.io/browse/SPR-733?redirect=false)** and commented  A SQL Exception thrown by MySQL with SQLState '41000' and errorCode '1213' and message [Deadlock found when trying to get lock; Try restarting transaction message from server: ""Deadlock found when trying to get lock; Try restarting transaction""]  will result in:  org.springframework.jdbc.UncategorizedSQLException: (HibernateTemplate): encountered SQLException [Deadlock found when trying to get lock; Try restarting transaction message from server: ""Deadlock found when trying to get lock; Try restarting transaction""]; nested exception is java.sql.SQLException: Deadlock found when trying to get lock; Try restarting transaction message from server: ""Deadlock found when trying to get lock; Try restarting transaction""  I believe it should instead result in org.springframework.dao.CannotAcquireLockException, which could be achieved by adding  \\1213\\  to the MySQL bean in sql-error-codes.xml   ---  **Affects:** 1.1.5","closed","type: bug,","spring-projects-issues","2005-02-21T21:20:56Z","2005-03-20T03:49:50Z"
"","5351","id attribute ignored on beans in a list [SPR-623]","**[Attila Szegedi](https://jira.spring.io/secure/ViewProfile.jspa?name=szegedia)** opened **[SPR-623](https://jira.spring.io/browse/SPR-623?redirect=false)** and commented  Consider this example:  \ \ \ \ \ \ \  When requesting bean ""foo"" from the factory, it says there's no such bean. Temporary workaround is to promote it to a top-level bean:  \ \ \ \ \ \ \ \   ---  **Affects:** 1.1.3","closed","in: core,","spring-projects-issues","2005-01-13T19:52:08Z","2019-01-12T16:41:49Z"
"","5199","destroySingletons() not taking dependencies between top-level singletons into account [SPR-470]","**[Attila Szegedi](https://jira.spring.io/secure/ViewProfile.jspa?name=szegedia)** opened **[SPR-470](https://jira.spring.io/browse/SPR-470?redirect=false)** and commented  AbstractBeanFactory.destroySingletons() won't destroy singletons in any particular order - the code looks like this:      Set singletonCacheKeys = new HashSet(this.singletonCache.keySet());     for (Iterator it = singletonCacheKeys.iterator(); it.hasNext();) {     	destroySingleton((String) it.next());     }  that is, they'll be destroyed in whatever order their names come out of a hash set. This is problematic as I have a factory with several top-level singletons (i.e. coming from \-ed shared definitions, and they're referenced by further singletons), and I'd really need to have a correct destruction order guarantee.  I.e. if I have  \ ... \ \ \\\ ... \ Currently nothing guarantees ""b"" is destructed before ""a"" in a destroySingletons() call.   ---  **Affects:** 1.1.2","closed","in: core,","spring-projects-issues","2004-11-17T04:29:48Z","2019-01-11T14:14:04Z"
"","5779","Support for post-mortem singleton destruction in AbstractBeanFactory [SPR-1073]","**[Attila Szegedi](https://jira.spring.io/secure/ViewProfile.jspa?name=szegedia)** opened **[SPR-1073](https://jira.spring.io/browse/SPR-1073?redirect=false)** and commented  It'd be nice if AbstractBeanFactory (or even ConfigurableBeanFactory) had a method  public Runnable getSingletonsDestructor()  that'd return a Runnable that when run, acts the same as destroySingletons() method. That Runnable would however hold strong references only to the minimal set of objects required to perform its duty. That way, the bean factory itself together with all beans not needing disposal and not being involved in disposal of other beans would be garbage collectable, and singleton destruction could be implemented post-morted by client code using a subclass of java.lang.ref.PhantomReference holding a reference to the said Runnable, a reference queue, and some process that processes the phantom references enqueued to the said queue.  The significance of this is that I have a system where bean factories are reproducible from an XML file, and while it's important to have them around cached for practical performance reasons, it is not as important as making sure we're never getting an OOME. Therefore, I hold them (actually, an object containing them) with a soft reference so garbage collector can at its discretion discard them, in which case I reload them as needed.  However, because I don't control the contents of the bean factory, there might be some beans in it that need destruction, and I must defensively allow for it. Right now, I have to strongly reference the whole bean factory in order to invoke the destroySingletons() on it in the post-mortem cleanup phase for its container object. If I had the said Runnable, I would need to strongly reference only that, which'd allow for more memory to be reclaimed when the GC clears soft references -- namely, the bean factory object and all beans not affected by singleton destruction could be cleared immediately, because that Runnable would be implemented so that it doesn't reference any object it doesn't need in its run() method.   ---  **Affects:** 1.2.1","closed","type: enhancement,","spring-projects-issues","2005-06-23T18:46:05Z","2012-06-19T09:37:24Z"
"","5241","SimpleMappingExceptionResolver not iterating Exception Mappings in user-determined order [SPR-512]","**[Assaf Urieli](https://jira.spring.io/secure/ViewProfile.jspa?name=assaf)** opened **[SPR-512](https://jira.spring.io/browse/SPR-512?redirect=false)** and commented  In class SimpleMappingExceptionResolver, the Exception mappings are iterated in a random order, so that if the user maps first sub-classes and then superclasses, the superclass may be hit first.  Example: \ \ \oops\ \error\ \ \ If com.blah.MyException is thrown, java.lang.Exception is hit before com.blah.MyException, so that the view ""error"" is returned instead of ""oops"".  Probable fix: this.exceptionMappings = new HashMap(mappings.size()); Should be: this.exceptionMappings = new LinkedHashMap(mappings.size());   ---  **Affects:** 1.1.2","closed","type: bug,","spring-projects-issues","2004-12-02T00:39:23Z","2004-12-04T03:08:32Z"
"","5233","SimpleMappingExceptionResolver defaultErrorView ignores mappedHandlers [SPR-504]","**[Assaf Urieli](https://jira.spring.io/secure/ViewProfile.jspa?name=assaf)** opened **[SPR-504](https://jira.spring.io/browse/SPR-504?redirect=false)** and commented  If you create two different SimpleMappingExceptionResolvers for different handlers, the first resolver's defaultView will be returned regardless of the handlers actually mapped to it.  Context where this gives unexpected behaviour: one ExceptionResolver for handlers delivering frame content (shows an error view inside a frame) one ExceptionResolver for handlers delivering content with no frames   ---  **Affects:** 1.1.2","closed","type: bug,","spring-projects-issues","2004-11-30T03:01:22Z","2004-11-30T03:37:33Z"
"","5763","XmlBeanFactory hasn't got constructor with FileInputStream parameter [SPR-1056]","**[Artur Wronski](https://jira.spring.io/secure/ViewProfile.jspa?name=a_wronski)** opened **[SPR-1056](https://jira.spring.io/browse/SPR-1056?redirect=false)** and commented  In the manual (page 17) there is example:  InputStream is = new FileInputStream(""beans.xml""); XmlBeanFactory factory = new XmlBeanFactory(is);  There isn't such constructor for XmlBeanFactory. It should look like that:  InputStream is = new FileInputStream(""beans.xml""); XmlBeanFactory factory=new XmlBeanFactory(new InputStreamResource(is));   ---  **Affects:** 1.2.1","closed","type: bug,","spring-projects-issues","2005-06-17T20:34:49Z","2008-02-14T23:16:06Z"
"","5615","Add way to enable Session filter for Hibernate 3.0 suport [SPR-888]","**[Artur Karazniewicz](https://jira.spring.io/secure/ViewProfile.jspa?name=karaznie)** opened **[SPR-888](https://jira.spring.io/browse/SPR-888?redirect=false)** and commented  It would be usefull iw we had some easy way to enableFilters on Hibernate 3.0 session (ie. Session.enableFilter(String)). Now we can configure filters - but cannot find any easy way to oneble filters on Spring managed Session (in HibernateTempate, for instance). Would be nice to have some sort of convinient methods supporting this new HB3.0 feature.   ---  **Affects:** 1.2 final  1 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2005-04-19T02:02:52Z","2005-05-20T10:34:43Z"
"","5097","allow bean* instead of  bean+ in apring-beans.dtd [SPR-367]","**[Artur Karazniewicz](https://jira.spring.io/secure/ViewProfile.jspa?name=karaznie)** opened **[SPR-367](https://jira.spring.io/browse/SPR-367?redirect=false)** and commented  Since spring 1.1.1 there is import directive in spring context. Common usage is to keep trivial applicaionContext which only includes other -logically dependent - contexts. But currently it is impossible since context is forced to have at least one ""bean"" clause. So it's impossible to have applicationContext.xml like this:  \ \ \ ... \ \   --- No further details from [SPR-367](https://jira.spring.io/browse/SPR-367?redirect=false)","closed","type: enhancement,","spring-projects-issues","2004-10-04T05:36:43Z","2004-10-04T08:00:42Z"
"","5030","Support for hibernate3 in sandbox [SPR-300]","**[Artur Karazniewicz](https://jira.spring.io/secure/ViewProfile.jspa?name=karaznie)** opened **[SPR-300](https://jira.spring.io/browse/SPR-300?redirect=false)** and commented  Hello,  Last few days I worked on support for hibernate3 in spring sandbox. I created new packages in sandbox and refactored org.springframework.orm.hibernate (and support) packages into org.springframework.orm.hibernate3 in sandbox. The task was quite easy, there are minor problems though:  * hibernate package changed to org.hibernate, * hibernate team split Session into two pieces org.hibernate.Session and   org.hibernate.classic.Session (extends Session) - where some deprecated methods live. SessionFactory returns now ""classic"" session, but I decided to use org.hibernate.Session everywhere, * hibernate team changed exceptions to unchecked and changed method signature for getPersistentClass() it returns String now (instead of Class), * saveOrUpdateCopy(..) and int delete(...) dissapeard (in fact these methods are moved into ""classic"" session), so I removed them   from HibernateTemplate * I ported complete test suite from spring hibernate packages, all tests passed (with minor changes, though)  Currently i didn't implemented new methods from Session yet, but will do it ASAP. This project uses this - two new jars must be added into project: hibernate3.jar and antlr-2.7.4.jar.  This project must be compiled against CVS HEAD, since it needs some changes done by Juergen recently.  Hope it'll help people interested in new hibernate support in spring.  Artur   ---  **Attachments:** - [hibernate3-annotations.zip](https://jira.spring.io/secure/attachment/10506/hibernate3-annotations.zip) (_92.13 kB_) - [hibernate3Spring.zip](https://jira.spring.io/secure/attachment/10438/hibernate3Spring.zip) (_59.69 kB_) - [hibernate-patch.tgz](https://jira.spring.io/secure/attachment/10425/hibernate-patch.tgz) (_37.91 kB_) - [LocalAnnotationSessionFactoryBean.java](https://jira.spring.io/secure/attachment/10562/LocalAnnotationSessionFactoryBean.java) (_3.02 kB_) - [spring-hibernate3.tar.gz](https://jira.spring.io/secure/attachment/10194/spring-hibernate3.tar.gz) (_49.96 kB_) - [spring-hibernate3.tgz](https://jira.spring.io/secure/attachment/10191/spring-hibernate3.tgz) (_49.94 kB_) - [spring-hibernate3-1.tar.gz](https://jira.spring.io/secure/attachment/10195/spring-hibernate3-1.tar.gz) (_49.96 kB_) - [spring-hibernate3-final.tgz](https://jira.spring.io/secure/attachment/10197/spring-hibernate3-final.tgz) (_51.76 kB_) - [spring-hibernate3-upd.zip](https://jira.spring.io/secure/attachment/10559/spring-hibernate3-upd.zip) (_136.95 kB_)  14 votes, 10 watchers","closed","has: votes-jira,","spring-projects-issues","2004-08-31T00:06:53Z","2005-03-26T07:25:57Z"
"","4966","Mistake in documentation regarding AOP [SPR-235]","**[Artur Karazniewicz](https://jira.spring.io/secure/ViewProfile.jspa?name=karaznie)** opened **[SPR-235](https://jira.spring.io/browse/SPR-235?redirect=false)** and commented  There is a little mistake in AOP chapter of spring documentation. In example regarding org.springframework.aop.support.RegexpMethodPointcutAdvisor there is line: \ should be \   --- No further details from [SPR-235](https://jira.spring.io/browse/SPR-235?redirect=false)","closed","type: enhancement,","spring-projects-issues","2004-07-31T05:44:48Z","2004-07-31T06:30:03Z"
"","5593","prepareQuery method in HibernateTemplate should be made public [SPR-867]","**[Artem Grigoryan](https://jira.spring.io/secure/ViewProfile.jspa?name=artemg)** opened **[SPR-867](https://jira.spring.io/browse/SPR-867?redirect=false)** and commented  I want to apply cache settings and transaction timeouts to my query, and I would like to use prepareQuery method found in HibernateTemplate.  I am aware that the workaround for it would be to implements the same functionality found in the method, but it's inconsistent.  Can you please make prepareQuery method in HibernateTemplate class public?  It is actually inconsistent with JDOHibernate implementation, where prepareQuery method is public.   ---  **Affects:** 1.1.4","closed","status: declined,","spring-projects-issues","2005-04-08T08:53:42Z","2019-01-12T16:41:29Z"
"","5697","Introduce generic mechanism to propagate properties from ViewResolver to View [SPR-986]","**[Arie van Wijngaarden](https://jira.spring.io/secure/ViewProfile.jspa?name=vanwijngaarden)** opened **[SPR-986](https://jira.spring.io/browse/SPR-986?redirect=false)** and commented  Issue: Currently, various ViewResolvers (AbstractTemplate, Velocity) have properties they propagate transparently to the Views they create. Because the solution to do the propagation is not genericly set-up, as soon as a new type of View is introduced with additional properties, there is also need for a new type of ViewResolver.  Solution: Use the Bean functionalities from Spring to do the propagation of properties to created views in a generic way. This could in practice lead to a reduction of the number of ViewResolvers around. See example (ViewSetterViewResolver.java) for a working solution.  Remarks: 1. Alternative is to include the functionality immediately into the UrlBasedViewResolver class. 2. One could argue that the functionality should be made available at a higher level in the inheritance tree. However, the UrlBasedViewResolver is designed to create views using a generic template, so usage of the functionality is most likely there.    ---  **Affects:** 1.2.2  **Attachments:** - [ViewSetterViewResolver.java](https://jira.spring.io/secure/attachment/10750/ViewSetterViewResolver.java) (_2.81 kB_)","closed","type: enhancement,","spring-projects-issues","2005-05-26T02:38:34Z","2006-03-10T02:52:08Z"
"","5661","Extend BeanFactoryLocator to allow iteration [SPR-942]","**[Archie Cobbs](https://jira.spring.io/secure/ViewProfile.jspa?name=archie172)** opened **[SPR-942](https://jira.spring.io/browse/SPR-942?redirect=false)** and commented  Motivation:  We use ContextSingletonBeanFactoryLocator to start our application, which basically consists of a bunch of application contexts, some of which refer to others as their parent, etc.  All that's required to start the whole thing is:  BeanFactoryLocator bfl = SingletonBeanFactoryLocator.getInstance(); BeanFactoryReference bf = bfl.useBeanFactory(""com.mycompany.myapp"");  So far, life is good, though it's slightly curious that although we are actually using several bean factories in our application, we only had to ""use"" one of them (see below).  Now, when we want to gracefully stop the application, it's not possible. We can release the reference on ""com.mycompany.myapp"", but that only closes that one application context. The others remain alive.  Moreover, there's no way for us to get at the others or know what their names are in order to shut them down as well.  In other words, while we say useBeanFactory(""com.mycompany.myapp"") what we really mean in some sense is useBeanFactory(""*"").  Suggestion:  Create a new interface ListableBeanFactoryLocator which extends BeanFactoryLocator and provides a method to get a list of all the bean factory locators in it's ""scope"", e.g.:  public List getBeanFactoryNames();  // returns List of Strings  Then have SingletonBeanFactoryLocator.getInstance() return a ListableBeanFactoryLocator instead of a BeanFactoryLocator.    ---  **Affects:** 1.1.4","closed","type: enhancement,","spring-projects-issues","2005-05-12T09:04:31Z","2012-06-19T09:37:36Z"
"","5605","[PATCH] XSLTFactoryBean [SPR-878]","**[Archie Cobbs](https://jira.spring.io/secure/ViewProfile.jspa?name=archie172)** opened **[SPR-878](https://jira.spring.io/browse/SPR-878?redirect=false)** and commented  XSLTFactoryBean contribution, described here:  http://sourceforge.net/mailarchive/message.php?msg_id=11342188  From XSLTFactoryBean.java:  /** * Spring factory bean that processes XSLT transforms at runtime * to produce a {`@link` Resource Resource} usable by other beans. *  *   \ * This a \singleton\ factory bean, i.e., it only performs the * XSLT transformation once to create the output XML. However, the * resulting {`@link` Resource Resource} can be opened multiple times: * each time a new input stream reading from the same underlying * XML data is created.   */  From XMLSourcePropertyEditor.java:  /** * Property editor that converts a {`@link` Resource Resource} descriptor * into an XML transform {`@link` StreamSource StreamSource}. *  * `@see` ResourceEditor   */  From ByteArrayResource.java:  /** * Resource wrapping a read-only byte array.   */    ---  **Affects:** 1.2 RC1","closed","type: enhancement,","spring-projects-issues","2005-04-13T02:25:34Z","2012-06-19T09:37:35Z"
"","5561","Doc: Recursive property names in bean XML [SPR-835]","**[Archie Cobbs](https://jira.spring.io/secure/ViewProfile.jspa?name=archie172)** opened **[SPR-835](https://jira.spring.io/browse/SPR-835?redirect=false)** and commented  It would be handy sometimes if you could do this:  \ \ \123\ \ \  where ""fred"" is a non-primitive property of ""foo"", ""bob"" is a non-primitive property of ""foo.fred"", etc.  I.e., make the ""name"" attribute of \ elements be able to hop through multiple objects.   ---  **Affects:** 1.1.4","closed","type: enhancement,","spring-projects-issues","2005-03-30T07:14:39Z","2005-06-29T14:35:01Z"
"","5496","PropertyOverrideConfigurer should log unknown beans at lower level [SPR-769]","**[Archie Cobbs](https://jira.spring.io/secure/ViewProfile.jspa?name=archie172)** opened **[SPR-769](https://jira.spring.io/browse/SPR-769?redirect=false)** and commented  If you use a PropertyOverrideConfigurer, and also setIgnoreInvalidKeys(true), you still get these messages logged as WARNING level messages:  Could not process key [internalAuthService.enabled] in PropertyOverrideConfigurer: No bean named 'internalAuthService' is defined: ...  My guess is that most people setIgnoreInvalidKeys(true) because they are consolidating all their override properties into a single properties file that applies to multiple application contexts, as we are doing.  When you do this, you get a zillion of these warnings, even though it's perfectly normal to have the beans from a different context not be found in some other context.  Note that the number of warnings is O(n^2), i.e., with N properties and M application contexts you basically get N x M spurious warnings. These really clutter up the logs.  So this is a request that when setIngoreInvalidKeys(true), these messages are logged at DEBUG level instead of WARNING level, or not logged at all. After all, we did say **IGNORE** didn't we? Etc.    ---  **Affects:** 1.1.4","closed","type: enhancement,","spring-projects-issues","2005-03-09T05:17:09Z","2005-03-09T19:57:07Z"
"","5447","SingletonBeanFactoryLocator recursion problem [SPR-719]","**[Archie Cobbs](https://jira.spring.io/secure/ViewProfile.jspa?name=archie172)** opened **[SPR-719](https://jira.spring.io/browse/SPR-719?redirect=false)** and commented  I am trying to wire up an application using embedded Jetty web server. In order to make the service beans available to the Jetty servlets, I am using ContextLoader.loadParentContext() to set a parent context for the root web context, e.g.:               locatorFactorySelector         classpath*:com/awarix/trak/server/**/beanRefFactory.xml                   parentContextKey         com.awarix.trak.server                   org.springframework.web.context.ContextLoaderListener       My application is also started using an ""AppLauncher"" class that I wrote that does something like this:      // Start application     try {         ContextSingletonBeanFactoryLocator           .getInstance(getSelector(pname)).useBeanFactory(pname);     } catch (BeansException e) {         LOG.error(""failed to launch application"", e);         e.printStackTrace(System.err);         System.exit(1);     }  The servlet context is configured to use the same selector and context key as is used by the above code (not shown), to ensure that the ContextLoader finds the same application context for its parent as is used by the rest of the application.  The problem is that recursion occurs in the SingletonBeanFactoryLocator.useBeanFactory() method:              else {                 // this group definition doesn't exist, we need to try to load it                 if (logger.isDebugEnabled()) {                     logger.debug(""Factory group with resource name ["" + this.resourceName                             + ""] requested. Creating new instance."");                 }                      BeanFactory groupContext = createDefinition(this.resourceName, factoryKey);                                                                                                                                                                   bfg = new BeanFactoryGroup();                 bfg.definition = groupContext;                 bfg.refCount = 1;                 this.bfgInstancesByKey.put(this.resourceName, bfg);                 this.bfgInstancesByObj.put(groupContext, bfg);             }  Note that the 'bfg' is not added to bfgInstancesByKey until after createDefinition() is invoked. This causes the second (reentrant) invocation of useBeanFactory() (the one from the web context) to fail to find the beans that are trying to be created in the first invocation (the one from the app launcher).  I.e., here is the sequence of events:  - AppLauncher invokes useBeanFactory() - This invokes createDefinition() - This causes all the application beanRefFactory.xml files   to be processed. - One of these files creates a org.mortbay.jetty.Server bean. - That bean tries to create the servlet context. - The ContextLoaderListener fires, causing the ContextLoader   to search for the application beans. - ContextLoader (reentrantly) invokes useBeanFactory() to   find the parent context for the web context, i.e., the   application context. - The application context has not yet been registered in   bfgInstancesByKey and so is not found. - All hell breaks loose as Spring tries to create all the   (already created) application beans yet again, etc.  I don't know if this is a Spring bug or if what I'm doing is ""out of spec"". In any case the behavior is not intuitive.  It may be possible to fix SingletonBeanFactoryLocator to handle the reentrancy (e.g., register the key in bfgInstancesByKey first, then create the definition).  Otherwise, I'd like to know the ""right"" way to do what I'm trying to do, which is simply get Jetty working as an embedded web server and give it access to my (singleton) application service beans.    ---  **Affects:** 1.1.4  **Attachments:** - [SPR-719.patch](https://jira.spring.io/secure/attachment/10521/SPR-719.patch) (_4.50 kB_)","closed","in: core,","spring-projects-issues","2005-02-16T09:44:24Z","2012-06-19T03:54:08Z"
"","5705","ResourceUtils.getFile(java.net.URL, java.lang.String) throws FileNotFoundException if the URL has protocol of jar [SPR-994]","**[Antony Sohal](https://jira.spring.io/secure/ViewProfile.jspa?name=aasohal)** opened **[SPR-994](https://jira.spring.io/browse/SPR-994?redirect=false)** and commented  I think this is a bug because when this method is called, if the URL object does not have a protocol of file, it throws an FileNotFoundException. In my instance, my URL object was a location of a jar file within an EAR. After some debugging, i found that it would be better to check that the URL string start with file:// rather then check the protcol.  I came across this bug, when I was trying to add Mapping Jar Locations to a org.springframework.orm.hibernate.LocalSessionFactoryBean. My hibernate config files are in the jar files.      public static File getFile(URL resourceUrl, String description) throws FileNotFoundException {     	if (!URL_PROTOCOL_FILE.equals(resourceUrl.getProtocol())) {     		throw new FileNotFoundException(     				description + "" cannot be resolved to absolute file path "" +     				""because it does not reside in the file system: "" + resourceUrl);     	}     	return new File(URLDecoder.decode(resourceUrl.getFile()));     }  Antony   ---  **Affects:** 1.1.5","closed","status: declined,","spring-projects-issues","2005-05-30T23:00:16Z","2019-01-12T16:41:15Z"
"","5392","NoClassDefFoundError:  Cglib2AopProxy$StaticUnadvisedExposedInterceptor [SPR-664]","**[Antonio W. Lagnada](https://jira.spring.io/secure/ViewProfile.jspa?name=awlagnada)** opened **[SPR-664](https://jira.spring.io/browse/SPR-664?redirect=false)** and commented  I am trying to test out an email advice and I followed the JPetstore demo for intercepting transactions and I keep running into this error. Cglib2AopProxy is in my classpath and I don't understand why it's not seeing it.  I will attached the config and log files you may need to look at.  ---  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'springDemo' defined in ServletContext resource [/WEB-INF/applicationContext.xml]: Initialization of bean failed; nested exception is java.lang.NoClassDefFoundError: org/springframework/aop/framework/Cglib2AopProxy$StaticUnadvisedExposedInterceptor java.lang.NoClassDefFoundError: org/springframework/aop/framework/Cglib2AopProxy$StaticUnadvisedExposedInterceptor  ---  ---  **Affects:** 1.1.3  **Attachments:** - [boot.log.save](https://jira.spring.io/secure/attachment/10471/boot.log.save) (_50.43 kB_) - [server.log.save](https://jira.spring.io/secure/attachment/10472/server.log.save) (_666.64 kB_) - [spring-demo.zip](https://jira.spring.io/secure/attachment/10473/spring-demo.zip) (_4.17 MB_)","closed","in: core,","spring-projects-issues","2005-01-28T05:46:03Z","2019-01-13T22:52:48Z"
"","5773","Unable to suspend transaction in TransactionSynchronization.afterCompletion() in certain cases [SPR-1066]","**[Andy DePue](https://jira.spring.io/secure/ViewProfile.jspa?name=adepue)** opened **[SPR-1066](https://jira.spring.io/browse/SPR-1066?redirect=false)** and commented  org.springframework.orm.hibernate3.SessionFactoryUtils has an inner class, ""SpringSessionSynchronization"", that is instantiated and registered against the current transaction when using Spring for session management.  During transaction suspend and resume, this implementation will **always** call TransactionSynchronizationManager.unbindResource(this.sessionFactory) and TransactionSynchronizationManager.bindResource(this.sessionFactory, this.sessionHolder), respectively.  When Spring performs a commit, it calls synchronization methods in this order: 1. beforeCommit 2. beforeCompletion 3. afterCompletion  In beforeCompletion, SpringSessionSynchronization will unbindResource(this.sessionFactory), and sometimes close the Hibernate Session.  However, SpringSessionSynchronization will not reflect this in its internal state in any way.  Now imagine that a TransactionSynchronization implementation suspends the transaction in afterCompletion.  SessionFactoryUtils.SpringSessionSynchronization will have its suspend method called, which will attempt to unbindResource(this.sessionFactory), causing an exception since it has already been unbound.  Moreover, even if it performed a check and did not unbind the resource, resume() would still attempt to rebind the resource (whose Hibernate Session was most likely closed in beforeCompletion), leaving that closed resource bound to the current thread even after the main transaction has been committed.  Basically, SpringSessionSynchronization needs to be modified to handle this call sequence: 1. beforeCommit 2. beforeCompletion 3. suspend 4. resume 5. afterCompletion    Which it does not now support (though this was working in older versions of Spring).    Much more detail can be found in the related developer list thread: http://news.gmane.org/find-root.php?message_id=%3c200506201528.08175.andy%40marathon%2dman.com%3e    ---  **Affects:** 1.2.1  **Attachments:** - [SessionFactoryUtils.java.patch](https://jira.spring.io/secure/attachment/10820/SessionFactoryUtils.java.patch) (_1.81 kB_)","closed","type: bug,","spring-projects-issues","2005-06-21T09:42:42Z","2005-06-22T20:18:58Z"
"","5064","Dynamic Bean Arguments [SPR-334]","**[Andy Britz](https://jira.spring.io/secure/ViewProfile.jspa?name=andy.britz)** opened **[SPR-334](https://jira.spring.io/browse/SPR-334?redirect=false)** and commented  It would be really useful if spring bean container added the ability to use dynamic constructor or setter arguments.  I would like to propose the inclusion of two new methods to the BeanFactory       Object instanciateBean(String name,BeanArguments[] arguments) throws BeansException;            Object instanciateBean(String name, Class requiredType, BeanArguments[] arguments) throws BeansException;   and one new interface to the Beans package that has the following signature.       public interface BeanArguments {                 boolean isConstructorArguments();                 int getArgumentCount();                 Object getArgument(int index);                 String getMethodName();                 Class getArgumentType(int index);       }   This would also require a lot of coding to retrofit the existing BeanFactories to use the new constructs. A review of the code indicates that these changes would be quite extensive, and will impact many of the core container classes. Some clarification in the method level contracts such as getBeansOfType will also need to be performed. From a philosophical point of view this should not encroach on the general spring approach as all the other lifecycle methods should still come into play and you should be able to mix and match statically defined and dynamic arguments.   ---  14 votes, 12 watchers","closed","has: votes-jira,","spring-projects-issues","2004-09-16T02:35:04Z","2019-01-11T14:03:00Z"
"","5347","Cayenne Support  [SPR-619]","**[Andrus Adamchik](https://jira.spring.io/secure/ViewProfile.jspa?name=andrus)** opened **[SPR-619](https://jira.spring.io/browse/SPR-619?redirect=false)** and commented  Integration of Cayenne ORM support classes into Spring. Initial suggested implementation is already checked in to sandbox on HEAD.   ---  **Affects:** 1.2 RC1  1 votes, 1 watchers","closed","status: declined,","spring-projects-issues","2005-01-13T01:05:09Z","2005-07-11T01:55:30Z"
"","5796","Spring Tags not clearing references to instance variables [SPR-1092]","**[Andrew Wertkin](https://jira.spring.io/secure/ViewProfile.jspa?name=awertkin)** opened **[SPR-1092](https://jira.spring.io/browse/SPR-1092?redirect=false)** and commented  BindTag and BindErrorTag do not override doFinally, and are left with references to the BindStatus objects and Errors object respectively.  These references do not allow GC of the status and errors objects.  They remain in the heap until the specific Controller is used again, at which point the references change to the new status and errors and the original are GC'd.  We do have some ""large"" Command objects and many controllers leading to unnecessary memory usage between requests.  We suggest:  1. org.springframework.web.servlet.tags.BindTag:  public void doFinally() { super.doFinally(); this.status = null; this.previousStatus = null; }  2. org.springframework.web.servlet.tags.BindErrorTag:  public void doFinally() { super.doFinally(); this.errors = null; }   ---  **Affects:** 1.1.5, 1.2.1, 1.2.2","closed","type: bug,","spring-projects-issues","2005-07-01T00:31:33Z","2019-01-11T18:37:20Z"
"","5704","Suppress final separator in Freemarker ""showErrors"" macro [SPR-993]","**[Andrew Swan](https://jira.spring.io/secure/ViewProfile.jspa?name=aswan)** opened **[SPR-993](https://jira.spring.io/browse/SPR-993?redirect=false)** and commented  The dist/spring.ftl file contains useful Freemarker macros. One of them, ""showErrors"", iterates through a list of errors and displays them as HTML, inserting a nominated separator between each one. However, it would be better if no separator was shown after the final error. To fix this, replace:      ${separator}  With:           	${separator}       In the ""showErrors"" macro.   ---  **Affects:** 1.2.1","closed","type: enhancement,","spring-projects-issues","2005-05-30T10:35:45Z","2005-06-04T06:20:30Z"
"","5243","Instance factory method usage causes double factory creation [SPR-514]","**[Andrew H. Barkley](https://jira.spring.io/secure/ViewProfile.jspa?name=andrew.barkley)** opened **[SPR-514](https://jira.spring.io/browse/SPR-514?redirect=false)** and commented  A line class AbstractAutowireCapableBeanFactory (line 342) causes a referenced factory bean to be created, when only its class is needed.  The factory is created and used automatically later on (line 372).  This only seems to matter if the factory method is an instance method, rather than a static such that no bean would be loaded.  This effects springframework/spring/src/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java Revision 1.42  FILE COMPARISON Produced: 12/3/2004 9:14:22 AM  Left file: C:\development\libtools\spring-framework-1.1.2\src\org\springframework\beans\factory\support\AbstractAutowireCapableBeanFactory.java     Right file: C:\development\projects\focis\main\focis\eq_platform\src\java\org\springframework\beans\factory\support\AbstractAutowireCapableBeanFactory.java 342c342 < 			factoryClass = getBean(mergedBeanDefinition.getFactoryBeanName()).getClass(); —  > factoryClass = getBeanDefinition(mergedBeanDefinition.getFactoryBeanName()).getBeanClass();    ---  **Affects:** 1.1.2  1 votes, 1 watchers","closed","type: bug,","spring-projects-issues","2004-12-03T01:20:31Z","2004-12-14T00:16:07Z"
"","4993","Bean does not inherit parent properties when class name is also provided [SPR-262]","**[Andrew Byala](https://jira.spring.io/secure/ViewProfile.jspa?name=abyala)** opened **[SPR-262](https://jira.spring.io/browse/SPR-262?redirect=false)** and commented  I have two xml files which are loaded using XmlBeanFactories, the former being the parent to the latter.  The first file defines a single POJO with two String properties.  \ \ \\Top-Level\\ \\Root\\ \  The second file inherits the first file's definition, defines a new class name (subclass of the parent's class), and overrides one definition.  \ \ \\Child\\ \  When I test this code, the sub object does not inherit its parent's definition of ""owner.""  However, if I remove the new class definition, as seen below, then the new bean correctly inherits the parent's definition of ""owner"" and uses its definition of ""name.""  \ \ \\Child\\ \   ---  **Affects:** 1.0.2","closed","in: core,","spring-projects-issues","2004-08-13T07:28:05Z","2004-08-13T19:33:03Z"
"","5835","Transaction Annotations don't work for interfaces/classes with more than one method using AOP to apply them [SPR-1132]","**[Andrew Berman](https://jira.spring.io/secure/ViewProfile.jspa?name=atberman)** opened **[SPR-1132](https://jira.spring.io/browse/SPR-1132?redirect=false)*** and commented  If you define an interface/class with more than one method to be transactional, the interface/class is never processed by the TransactionInterceptor when using AOP to apply the transactions.  An interface/class with one method works.  Here is a snippet of my context file:  \	 \ \ \ \ \	 \ \ \ \ \ \ \ \  \ ... (just a bunch of properties) \  ItemServiceImpl implements ItemService which looks like:  `@Transactional`(readOnly = true) public interface ItemService { ... (14 method definitions with 3 overriding the default for the interface) }  I reverted to Spring 1.2.1 and everything works again, which is why I figured it must be a bug in version 1.2.2.   ---  **Affects:** 1.2.2","closed","type: bug,","spring-projects-issues","2005-07-13T10:20:30Z","2005-07-25T09:39:02Z"
"","5599","JMX Lifecycle Support [SPR-873]","**[Andrew Barnes](https://jira.spring.io/secure/ViewProfile.jspa?name=andy999)** opened **[SPR-873](https://jira.spring.io/browse/SPR-873?redirect=false)** and commented  Would like the ability for any exposed lifecycle methods of an MBean (eg start()) to be invoked after registration of the mbean to the JMX server.   ---  **Affects:** 1.2 final  2 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2005-04-10T16:01:54Z","2019-01-11T13:06:04Z"
"","5597","Generic Controller that handlers many requests [SPR-871]","**[Andres March](https://jira.spring.io/secure/ViewProfile.jspa?name=dres)** opened **[SPR-871](https://jira.spring.io/browse/SPR-871?redirect=false)** and commented  I have been playing with some code that makes it easier to manage a large site with many requests that simply call some service layer methods and sticks the returned data into the model.  I feel the controller per page paradigm and even the multi action controller leads to an excessively large code base when dealing with a site that has a large amount of http GET requests.  Every time I have developed a large web app I have implemented something similar to a single controller that reads a site map and dispatches the request to multiple service methods.  The controller logic is simply interpreting the site map, dispatching to the service layer, and populating the model with the returned data.  It would be nice if Spring could provide a generic multi request controller like this.  The code I will attach will hopefully lead to a discussion of this possibility and maybe an implementation that can be included in a future release.  The main issues I see at the moment are: - requiring a contract between the controller and service api.  I think this can be avoided by configuring the message class in the app context. - the message object tends to be weakly typed in order to be reused for many types of requests.  I have come to accept this as it allows greater reuse and simpler configuration. - the configuration of the rules to bind the http request params to the message object is overly verbose.  this is a common issue and will hopefully be resolved in 1.3 but maybe there is a way around this in the short term, like a property editor that alleviates some of this.  Of course, the case could be made that this functionality is not even necessary or overly complex.  But I have found it incredibly useful in sites with over 100 pages.   ---  **Affects:** 1.2 RC2  **Attachments:** - [multirequest.zip](https://jira.spring.io/secure/attachment/10640/multirequest.zip) (_6.20 kB_)  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2005-04-10T04:56:51Z","2012-06-19T09:37:27Z"
"","5530","OSCache support [SPR-803]","**[Andres March](https://jira.spring.io/secure/ViewProfile.jspa?name=dres)** opened **[SPR-803](https://jira.spring.io/browse/SPR-803?redirect=false)** and commented  Attached is a patch to add OSCache support.  Hope you guys are interested.  You just need the 2.1 release of oscache.  Just ignore the version in the .classpath.   ---  **Affects:** 1.1.5  **Attachments:** - [oscache-support-patch.txt](https://jira.spring.io/secure/attachment/10614/oscache-support-patch.txt) (_7.76 kB_)  2 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2005-03-21T09:43:27Z","2012-06-19T03:18:56Z"
"","5675","JCA documentation [SPR-961]","**[Andreas Senft](https://jira.spring.io/secure/ViewProfile.jspa?name=asenft)** opened **[SPR-961](https://jira.spring.io/browse/SPR-961?redirect=false)** and commented  I appreciate the addition of JCA support in the spring framework. However, as I see, it is not mentioned anywhere in the reference documentation. A short description (maybe with example) would be nice.   ---  **Affects:** 1.2 final","closed","type: documentation,","spring-projects-issues","2005-05-17T21:42:24Z","2005-07-05T00:39:55Z"
"","5671","Keep ORM specific error messages on exception translation [SPR-957]","**[Andreas Senft](https://jira.spring.io/secure/ViewProfile.jspa?name=asenft)** opened **[SPR-957](https://jira.spring.io/browse/SPR-957?redirect=false)** and commented  I'm using springs data access layer to access hibernate (HibernateTemplate). When executing a query I got an exception ""SQL statement not properly ended"" encapsulated in a BadSqlGrammarException. However, on debugging, I found out that the surrounding exception from hibernate stated that I tried an invalid operation in combination with scrolling.  From the hibernate error the issue is understandable. Unfortunately that hibernate exception message got lost in exception transaltion and the underlying SQLException is somewhat vague.  So would it be possible to include the hibernate exception message (or more generally: ORM specific error messages) within the translated spring exception? That could be really helpful for tracking down errors.    ---  **Affects:** 1.2 final","closed","type: enhancement,","spring-projects-issues","2005-05-16T22:05:23Z","2005-05-20T05:13:54Z"
"","5563","Misleading exception message on EJBHome lookup failure [SPR-837]","**[Andreas Senft](https://jira.spring.io/secure/ViewProfile.jspa?name=asenft)** opened **[SPR-837](https://jira.spring.io/browse/SPR-837?redirect=false)** and commented  I just had a look at AbstractSlsbInvokerInterceptor#getCreateMethod and found an issue concerning the thrown exception.  If the catch block is executed, the cached EJB-Home will be output as contextual information. However, if caching is disabled, this message will show up ""null"" as EJBHome instance, which is misleading.  Regards, Andreas   ---  **Affects:** 1.1.5","closed","in: core,","spring-projects-issues","2005-03-30T15:12:16Z","2005-03-31T02:21:01Z"
"","5487","AopUtils#getAllInterfacesForClassAsList might yield duplicates [SPR-759]","**[Andreas Senft](https://jira.spring.io/secure/ViewProfile.jspa?name=asenft)** opened **[SPR-759](https://jira.spring.io/browse/SPR-759?redirect=false)** and commented  I just had a look at the implementation of AopUtils#getAllInterfacesForClassAsList.  I remember that I usually implemented similar methods using a Set. If multiple classes in a hierarchy implement the same interfaces the resulting list would yield duplicate entries.  Beside the cosmetic effect it could also affect performance when operations on the returned interfaces will be performed multiple times.  Maybe it's not a too common case, but I see it from time to time. So I would suggest to use a Set here.  Regards, Andreas   ---  **Affects:** 1.1.5","closed","in: core,","spring-projects-issues","2005-03-02T20:52:39Z","2005-03-03T21:52:01Z"
"","5424","Remote EJB access lacks narrowing [SPR-696]","**[Andreas Senft](https://jira.spring.io/secure/ViewProfile.jspa?name=asenft)** opened **[SPR-696](https://jira.spring.io/browse/SPR-696?redirect=false)** and commented  The access to the remote home interface via spring lacks the required narrowing. See forum thread http://forum.springframework.org/viewtopic.php?t=3380  I propose the following patch in AbstractSlsbInvokerInterceptor:  protected Object getHome() throws NamingException { if (!this.cacheHome || (this.lookupHomeOnStartup && !isHomeRefreshable())) { return (this.cachedHome != null ? this.cachedHome: lookup()); } else { synchronized (this) { if (this.cachedHome == null) { EJBHome ejbHome = (EJBHome)    PortableRemoteObject.narrow(lookup(), EJBHome.class); Class homeClass = ejbHome.getEJBMetaData().getHomeInterfaceClass(); this.cachedHome = PortableRemoteObject.narrow(ejbHome, homeClass);            this.createMethod = getCreateMethod(this.cachedHome);         }         return this.cachedHome;       }     }  }  Regards, Andreas   --- No further details from [SPR-696](https://jira.spring.io/browse/SPR-696?redirect=false)","closed","in: core,","spring-projects-issues","2005-02-07T19:31:46Z","2006-11-14T17:50:19Z"
"","5146","Lookup problem in ClassPathXmlApplicationContext [SPR-416]","**[Andreas Senft](https://jira.spring.io/secure/ViewProfile.jspa?name=asenft)** opened **[SPR-416](https://jira.spring.io/browse/SPR-416?redirect=false)** and commented  It seems like the lookup of configuration files via the classpath using ClasspathXmlApplicationContext does not work properly.  From the forum: http://forum.springframework.org/viewtopic.php?t=1489  Regards, Andreas   ---  **Affects:** 1.1.1","closed","in: core,","spring-projects-issues","2004-10-21T04:22:24Z","2004-10-21T05:43:51Z"
"","5143","ref local does not consider name attribute [SPR-413]","**[Andreas Senft](https://jira.spring.io/secure/ViewProfile.jspa?name=asenft)** opened **[SPR-413](https://jira.spring.io/browse/SPR-413?redirect=false)** and commented  I just found out that there is a difference on using \ or \, when accessing beans within the same configuration file.  If the referenced bean has only a name attribute and no id attribute it can be referenced via ref bean, but not via ref local.  Failing Example:  \ \ \ \ \ \ \ \  org.springframework.beans.factory.BeanDefinitionStoreException: Line 35 in XML document from class path resource [test.xml] is invalid; nested exception is org.xml.sax.SAXParseException: An element with the identifier ""Foo"" must appear in the document. org.xml.sax.SAXParseException: An element with the identifier ""Foo"" must appear in the document. at org.apache.xerces.parsers.DOMParser.parse(Unknown Source) at org.apache.xerces.jaxp.DocumentBuilderImpl.parse(Unknown Source) at javax.xml.parsers.DocumentBuilder.parse(DocumentBuilder.java:76) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:127) at test.SpringTest.main(SpringTest.java:29)    ---  **Affects:** 1.1.1","closed","in: core,","spring-projects-issues","2004-10-20T20:31:03Z","2019-01-12T16:42:06Z"
"","5061","Transparently propagate context information on invocation [SPR-331]","**[Andreas Senft](https://jira.spring.io/secure/ViewProfile.jspa?name=asenft)** opened **[SPR-331](https://jira.spring.io/browse/SPR-331?redirect=false)** and commented  It would be a great thing if one could transparently propagate contextual information using AOP.  In a concrete case that might be used to transparently transmit a session id or security information on invoking a method on a proxy instance.  As I saw in AOP alliance's javadocs, there exist get/setResource methods  in the Invocation interface. Maybe that (assumedly new) mechanism can be used for that purpose?  For spring we would need an interceptor to populate a context (client side) and an interceptor to extract the context again. Since population and extraction would be application-specific, they should be abstract base classes. Of cource the existing proxy invocation code has to be retrofitted to allow for context propagation.    --- No further details from [SPR-331](https://jira.spring.io/browse/SPR-331?redirect=false)","closed","type: enhancement,","spring-projects-issues","2004-09-12T18:58:32Z","2004-09-29T03:21:03Z"
"","5057","Javadoc: Missing javadoc for ejb base classes [SPR-327]","**[Andreas Senft](https://jira.spring.io/secure/ViewProfile.jspa?name=asenft)** opened **[SPR-327](https://jira.spring.io/browse/SPR-327?redirect=false)** and commented  I found out that the current javadoc lacks the description of (at least) two classes:  org.springframework.ejb.support.AbstractSessionBean and org.springframework.ejb.support.AbstractEnterpriseBean  Regards, Andreas   --- No further details from [SPR-327](https://jira.spring.io/browse/SPR-327?redirect=false)","closed","in: core,","spring-projects-issues","2004-09-10T00:09:32Z","2004-09-17T01:37:16Z"
"","4963","Bean definition without class specification does not work [SPR-232]","**[Andreas Senft](https://jira.spring.io/secure/ViewProfile.jspa?name=asenft)** opened **[SPR-232](https://jira.spring.io/browse/SPR-232?redirect=false)** and commented  When I tried to use the new feature of defining child beans, I encountered the following exception:  java.lang.IllegalStateException: Bean definition does not carry a resolved bean class at org.springframework.beans.factory.support.AbstractBeanDefinition.getBeanClass(AbstractBeanDefinition.java:182) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanDefinitionNames(DefaultListableBeanFactory.java:106) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:120)  What I did was similar to the example described in the reference documentation (chapter 3.5). I created a bean without class or parent specification to be used as a template for others. The exception is thrown upon existence of such a bean, independent of its usage. If I specify a class, everything works fine.  Besides that: the exception thrown should be somewhat more verbose about which definition actually has a problem.  Regards, Andreas   ---  **Affects:** 1.1 RC1","closed","in: core,","spring-projects-issues","2004-07-28T18:26:42Z","2004-07-28T19:56:16Z"
"","5877","Reading old value from BeanWrapperImpl can cause compatibility problems [SPR-1175]","**[Andreas Senft](https://jira.spring.io/secure/ViewProfile.jspa?name=asenft)** opened **[SPR-1175](https://jira.spring.io/browse/SPR-1175?redirect=false)** and commented  In the new Version 1.2.3 there has been a change in BeanWrapperImpl (as indicated in the changelog) that BeanWrapperImpl will pass along the old value to setAsText().  Currently I have the situation that I require the setter being invoked, before accessing the value. So I throw an exception if the property is not set on use. Since setting the value now invokes the getter first, the code breaks (it's a central thing and not easily changed).  Some sort of ""compatibility mode"" with the old behaviour would be nice.   ---  **Affects:** 1.2.3","closed","in: core,","spring-projects-issues","2005-07-26T18:27:14Z","2005-07-31T21:50:14Z"
"","5809","Constructor resolution fault [SPR-1105]","**[Andreas Senft](https://jira.spring.io/secure/ViewProfile.jspa?name=asenft)** opened **[SPR-1105](https://jira.spring.io/browse/SPR-1105?redirect=false)** and commented  I encountered a weird issue concerning constructors.  I have a bean with four constructors with following signatures (Set), (Set, Set), (Map), (Map, Set).  The bean specification in the application context provides a single argument like that:  \ \ \","closed","type: bug,","spring-projects-issues","2005-07-06T18:08:57Z","2005-07-19T02:14:29Z"
"","5603","Provide retrying in deadlock victim situations [SPR-911]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-911](https://jira.spring.io/browse/SPR-911?redirect=false)** and commented  If you use locking on databases, you always have to provide for the situation that your transaction rolls backe because of being selected as a deadlock victim.  The usual behaviour to deal with this situation is to retry some time later (e.g. 1s).  I think this is something that could be handled by a framework like Spring. If the method that has the transaction facade does not have any side effects (like modifying the input parameters or modifying some entity that is not part of the transaction), a proxy (or perhaps the TransactionInterceptor) could just call the same method again and again - until the transaction succeeds, rolls back because of another reason than deadlock victim, or a configurable timeout elapses.   ---  **Affects:** 1.2 RC2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3e81482760f742d078e71b166cc0f7c3c2eb6abb  8 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2005-04-28T12:22:49Z","2018-12-27T10:55:23Z"
"","5602","reduce log file flooding (patch included) [SPR-876]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-876](https://jira.spring.io/browse/SPR-876?redirect=false)** and commented  Please keep in mind that log level ""info"" is meant to be displayed at the console in the default server configuration.  Index: AbstractUrlHandlerMapping.java  ---  RCS file: /cvsroot/springframework/spring/src/org/springframework/web/servlet/handler/AbstractUrlHandlerMapping.java,v retrieving revision 1.18 diff -r1.18 AbstractUrlHandlerMapping.java 188,189c188,189 < 			if (logger.isInfoEnabled()) { < 				logger.info(""Mapped URL path ["" + urlPath + ""] onto handler ["" + handler + ""]""); —  > if (logger.isDebugEnabled()) { > logger.debug(""Mapped URL path ["" + urlPath + ""] onto handler ["" + handler + ""]"");  ---  **Affects:** 1.2 RC1","closed","type: enhancement,","spring-projects-issues","2005-04-12T01:28:04Z","2019-01-13T22:52:00Z"
"","5598","LocalSessionFactoryBean: missing Hibernate3 SessionFactory configuration options [SPR-872]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-872](https://jira.spring.io/browse/SPR-872?redirect=false)** and commented  Similar to #5560, there are two new configuration items in Hibernate3 for hibernate.cfg.xml, which LocalSessionFactoryBean cannot handle:  \ \ (those are for providing a central configuration for the 2nd level cache, so you can keep that information out of your mapping config)  ---  **Affects:** 1.2 RC1  **Attachments:** - [LocalSessionFactoryBean.patch](https://jira.spring.io/secure/attachment/10641/LocalSessionFactoryBean.patch) (_3.30 kB_)","closed","type: enhancement,","spring-projects-issues","2005-04-10T09:02:43Z","2019-01-11T13:06:01Z"
"","5527","""classpath:"" syntax does not work inside JAR files [SPR-800]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-800](https://jira.spring.io/browse/SPR-800?redirect=false)** and commented  When I use the ""classpath:"" syntax, for example in  \ \ \ \classpath:/com/my/data\ \ \ \  the following exception is raised when I run the application from the jar (e.g. deploy it to JBoss as EAR):  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sessionFacto ry' defined in ServletContext resource [/WEB-INF/classes/com/bmw/tw2/server/hibernateContext.xml]: I nitialization of bean failed; nested exception is java.io.FileNotFoundException: class path resource [com/my/data] cannot be resolved to absolute file path because it does not r eside in the file system: jar:file:/C:/jboss-4.0.1sp1/server/default/tmp/deploy/tmp13967my .ear-contents/my-server.jar!/com/my/data java.io.FileNotFoundException: class path resource [com/my/data] cannot be re solved to absolute file path because it does not reside in the file system: jar:file:/C:/jboss-4.0.1 sp1/server/default/tmp/deploy/tmp13967my.ear-contents/my-server.jar!/com/my/data at org.springframework.util.ResourceUtils.getFile(ResourceUtils.java:172) at org.springframework.core.io.ClassPathResource.getFile(ClassPathResource.java:154) at org.springframework.orm.hibernate3.LocalSessionFactoryBean.afterPropertiesSet(LocalSessio nFactoryBean.java:487) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMe thods(AbstractAutowireCapableBeanFactory.java:1077) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(A bstractAutowireCapableBeanFactory.java:347) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(A bstractAutowireCapableBeanFactory.java:255) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory .java:221) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory .java:145) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingle tons(DefaultListableBeanFactory.java:285) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicatio nContext.java:317) at org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.refresh( AbstractRefreshableWebApplicationContext.java:131) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.j ava:224) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.jav a:150) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderLis tener.java:48) at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:3827) at org.apache.catalina.core.StandardContext.start(StandardContext.java:4343)  I can't see why this should not work, as classpaths can point inside JAR files AFAIK.   ---  **Affects:** 1.1.5","closed","status: declined,","spring-projects-issues","2005-03-21T01:45:12Z","2019-01-12T16:41:35Z"
"","5526","consider supporting anchors in RedirectViews [SPR-799]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-799](https://jira.spring.io/browse/SPR-799?redirect=false)** and commented  There does not seem to exist a way to include an anchor in the URL which a RedirectView redirects to. If I just append the anchor to the URL attribute, any URL parameters are appended after the anchor which is incorrect (anchors come after the URL).  There should be solutions for both configuring a RedirectView and for the shorthand ""redirect:url"" syntax.   ---  **Affects:** 1.1.5  **Attachments:** - [RedirectView.java.patch](https://jira.spring.io/secure/attachment/11215/RedirectView.java.patch) (_434 bytes_)  2 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2005-03-21T01:37:22Z","2012-06-19T03:54:13Z"
"","5513","serializing proxy for simulating call-by-value [SPR-786]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-786](https://jira.spring.io/browse/SPR-786?redirect=false)** and commented  I am currently playing around with Springs ability to abstract from the remoting technology used. One problem (that is also mentioned in the docs) is that all remote calls (be it EJB or whatever) are call-by-value, but if I replace the remote proxy directly by the POJO implementation of the business interface I always have call-by-reference.  In order to simulate call-by-value for all cases (even the local one), what about a Proxy that does nothing else than serializing all parameter and ""de-serialize"" them again afterwards?  This can be easily done by something like:  ByteArrayOutputStream bos = new ByteArrayOutputStream(); new ObjectOutputStream(bos).writeObject(original); ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray()); #Class# copy = (#Class#) new ObjectInputStream(bis).readObject();  Of course, the return value (if any) and potential exception also would have to be handled accordingly.  With this proxy, it would be possible to be as close as possible to the remote call situation without actually need to tie to a remote technology (with all the hassle of configuration). As a nice side-effect, the correct serialization of all value objects would be tested, so there will be less surprises when actually switching to remote calls.  Negative side-effect would be less performance. Since this proxy would probably be only used in situations where remote calls are at least planned, this should not be that much of a problem. Remote interfaces are usually coarse grained.   ---  **Affects:** 1.1.5","closed","type: enhancement,","spring-projects-issues","2005-03-15T18:35:40Z","2012-06-19T09:37:33Z"
"","5491","IllegalAccessException/InvalidPropertyException in AbstractWizardFormController [SPR-763]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-763](https://jira.spring.io/browse/SPR-763?redirect=false)** and commented  I've got a problem with AbstractWizardFormController. Every now and then, sometimes on the first invokation (like in this example), sometimes after flipping some pages forward and back again, I get an IllegalAccessException wrapped into an InvalidPropertyException.  Have a look at the message text:  Class org.springframework.beans.BeanWrapperImpl can not access a member of class de.schildbach.game.presentation.forming.CreateGameController$Command with modifiers ""public""  Why is it not possible to access a public method? Should be accessible from anywhere, does it? (I'm not using any SecurityManagers)  Why is it only happening now and then? How would you suggest me to debug?  —  04.03.2005 22:56:17 org.springframework.web.servlet.mvc.AbstractFormController showNewForm FEIN: Displaying new form  04.03.2005 22:56:17 org.springframework.web.servlet.mvc.AbstractWizardFormController showPage FEIN: Showing wizard page 0 for form bean 'command'  04.03.2005 22:56:20 org.springframework.beans.BeanWrapperImpl getPropertyValue FEIN: About to invoke read method [public de.schildbach.game.business.bo.CreateGameCommand de.schildbach.game.presentation.forming.CreateGameController$Command.getRemote()] on object of class [de.schildbach.game.presentation.forming.CreateGameController$Command]  04.03.2005 22:56:20 org.springframework.web.servlet.tags.RequestContextAwareTag doStartTag SCHWERWIEGEND: Exception in RequestContextAwareTag org.springframework.beans.InvalidPropertyException: Invalid property 'remote' of bean class [de.schildbach.game.presentation.forming.CreateGameController$Command]: Illegal attempt to get property 'remote' threw exception; nested exception is java.lang.IllegalAccessException: Class org.springframework.beans.BeanWrapperImpl can not access a member of class de.schildbach.game.presentation.forming.CreateGameController$Command with modifiers ""public"" java.lang.IllegalAccessException: Class org.springframework.beans.BeanWrapperImpl can not access a member of class de.schildbach.game.presentation.forming.CreateGameController$Command with modifiers ""public"" at sun.reflect.Reflection.ensureMemberAccess(Reflection.java:65) at java.lang.reflect.Method.invoke(Method.java:578) at org.springframework.beans.BeanWrapperImpl.getPropertyValue(BeanWrapperImpl.java:601) at org.springframework.beans.BeanWrapperImpl.getNestedBeanWrapper(BeanWrapperImpl.java:496) at org.springframework.beans.BeanWrapperImpl.getBeanWrapperForPropertyPath(BeanWrapperImpl.java:474) at org.springframework.beans.BeanWrapperImpl.getPropertyValue(BeanWrapperImpl.java:585) at org.springframework.validation.BindException.getFieldValue(BindException.java:309) at org.springframework.web.servlet.support.BindStatus.\(BindStatus.java:114) at org.springframework.web.servlet.tags.BindStatus.\(BindStatus.java:38) at org.springframework.web.servlet.tags.BindTag.doStartTagInternal(BindTag.java:105) at org.springframework.web.servlet.tags.RequestContextAwareTag.doStartTag(RequestContextAwareTag.java:70) at org.apache.jsp.game.forming.create_005fgame_005fform_005fbasic_jspx._jspService(create_005fgame_005fform_005fbasic_jspx.java:126)   ---  **Affects:** 1.1.5","closed","status: declined,","spring-projects-issues","2005-03-04T08:05:22Z","2019-01-12T16:41:36Z"
"","5484","Log Message Swamping: MultiActionController (patch included) [SPR-756]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-756](https://jira.spring.io/browse/SPR-756?redirect=false)** and commented  With the default java.util.logging-configuration, my logfile/console gets swamped with messages by MultiActionController (""Found action method""). What do you think about reducing these messages loglevel to debug/fine (patch included)? Remember, loglevel info is meant to be always displayed on the console (by default).  Index: MultiActionController.java  ---  RCS file: /cvsroot/springframework/spring/src/org/springframework/web/servlet/mvc/multiaction/MultiActionController.java,v retrieving revision 1.12 diff -u -r1.12 MultiActionController.java --- MultiActionController.java	4 Aug 2004 08:50:25 -0000	1.12 +++ MultiActionController.java	1 Mar 2005 19:21:22 -0000 @@ -209,8 +209,8 @@ if (params.length >= 2 && params[0].equals(HttpServletRequest.class) && params[1].equals(HttpServletResponse.class)) { // we're in business  ---      if (logger.isInfoEnabled()) {  -         logger.info(""Found action method ["" + methods[i] + ""]"");  +         if (logger.isDebugEnabled()) {  +                  logger.debug(""Found action method ["" + methods[i] + ""]"");       }       this.methodHash.put(methods[i].getName(), methods[i]);  @@ -220,8 +220,8 @@ new Class[] { HttpServletRequest.class } ); // put in cache, keyed by handler method name this.lastModifiedMethodHash.put(methods[i].getName(), lastModifiedMethod);  ---      if (logger.isInfoEnabled()) {  -         logger.info(""Found last modified method for action method ["" + methods[i] + ""]"");  +         if (logger.isDebugEnabled()) {  +                           logger.debug(""Found last modified method for action method ["" + methods[i] + ""]"");                }       }       catch (NoSuchMethodException ex) {  @@ -249,8 +249,8 @@ ) { // Have an exception handler this.exceptionHandlerHash.put(params[2], methods[i]);  ---      if (logger.isInfoEnabled()) {  -         logger.info(""Found exception handler method ["" + methods[i] + ""]"");  +         if (logger.isDebugEnabled()) {  +                                logger.debug(""Found exception handler method ["" + methods[i] + ""]"");                     }            }       }  ---  **Affects:** 1.1.5","closed","type: enhancement,","spring-projects-issues","2005-03-01T05:26:40Z","2019-01-13T22:52:27Z"
"","5479","Logging Session Changes (patch included) [SPR-751]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-751](https://jira.spring.io/browse/SPR-751?redirect=false)** and commented  While trying to hunt down a form object problem, I figured out it might be a good idea to log changes to the session (setAttribute/removeAttribute). Patch for AbstractFormController, against current CVS:  Index: AbstractFormController.java  ---  RCS file: /cvsroot/springframework/spring/src/org/springframework/web/servlet/mvc/AbstractFormController.java,v retrieving revision 1.25 diff -u -r1.25 AbstractFormController.java --- AbstractFormController.java	28 Feb 2005 15:53:48 -0000	1.25 +++ AbstractFormController.java	1 Mar 2005 00:16:04 -0000 @@ -352,6 +352,7 @@ if (sessionFormObject == null) { throw new ServletException(""Form object not found in session (in session-form mode)""); } +      logger.debug(""Removing form session attribute "" + formAttrName);     session.removeAttribute(formAttrName);     return sessionFormObject;  } @@ -443,7 +444,11 @@ HttpServletRequest request, BindException errors, String viewName, Map controlModel) throws Exception {      if (isSessionForm()) {  -         request.getSession().setAttribute(getFormSessionAttributeName(request), errors.getTarget());  +         String formAttrName = getFormSessionAttributeName(request);  +         Object sessionFormObject = errors.getTarget();  +         if(logger.isDebugEnabled())  +         logger.debug(""Setting form session attribute "" + formAttrName + "" to "" + sessionFormObject);  +              request.getSession().setAttribute(formAttrName, sessionFormObject);       }       Map model = errors.getModel();       Map referenceData = referenceData(request, errors.getTarget(), errors);  ---  **Affects:** 1.1.4","closed","type: enhancement,","spring-projects-issues","2005-02-28T10:19:44Z","2019-01-13T22:52:30Z"
"","5468","consider adding varStatus attribute to spring:bind [SPR-740]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-740](https://jira.spring.io/browse/SPR-740?redirect=false)** and commented  Is there any reason for the name of the status variable is hardcoded to ""status""?  In the case of nested spring:bind-tags, this can be essential.  I propose to add an attribute varStatus (similar to JSTL c:forEach) to the bind-tag, defining the name for the status variable.   ---  **Affects:** 1.1.4","closed","type: enhancement,","spring-projects-issues","2005-02-25T01:08:09Z","2005-06-16T04:18:10Z"
"","5466","let Hibernate LocalSessionFactoryBean use the contexts EhCache [SPR-738]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-738](https://jira.spring.io/browse/SPR-738?redirect=false)** and commented  Spring allows to define an EhCache (and possibly in the future other caches also?) in the context. Unfortunately, Hibernate LocalSessionFactoryBean can't make use of that context EhCache: You have to define ""hibernate.cache.provider_class"" as a hibernateProperties entry.  My suggestion is to add a property named something like ""cache"" which somehow references to a cache contained in the context (I am aware that probably an adapter would be needed, mapping between the Hibernate CacheProvider interface and the Spring cache interface).   ---  **Affects:** 1.1.4","closed","type: enhancement,","spring-projects-issues","2005-02-22T07:34:40Z","2005-07-21T05:34:05Z"
"","5465","Configuring EhCacheManagerFactoryBean in same XML [SPR-737]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-737](https://jira.spring.io/browse/SPR-737?redirect=false)** and commented  Rather than specifying a configLocation, it would be useful to configure EhCacheManagerFactoryBean by value properties in the same XML as the bean declaration, similar to the Hibernate LocalSessionFactoryBean.  ---  **Affects:** 1.1.4  **Issue Links:** - #6145 EHCacheManagerFactoryBean should support local configuration without ehcache.xml (_**""is duplicated by""**_)","closed","type: enhancement,","spring-projects-issues","2005-02-22T07:24:54Z","2019-01-11T12:57:45Z"
"","5462","SimpleMappingExceptionResolver could have an option to NOT log specific exceptions [SPR-734]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-734](https://jira.spring.io/browse/SPR-734?redirect=false)** and commented  Just an idea: Perhaps you don't want to log specific exceptions (or log them at different levels). This granularity is not possible with the usual java.util.logging or Log4J configuration.   ---  **Affects:** 1.1.4","closed","type: enhancement,","spring-projects-issues","2005-02-22T02:04:39Z","2019-01-11T12:57:44Z"
"","5454","BindException calls setValue() with toString'ed() version of Object [SPR-726]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-726](https://jira.spring.io/browse/SPR-726?redirect=false)** and commented  I have written my own PropertyEditor that converts JDK 1.5 style Enums to Strings and back. I am using that editor in the following context:        Unfortunately, the spring:transform tag yields the following Exception:  java.lang.ClassCastException: java.lang.String EnumEditor.getAsText(EnumEditor.java:26)  It seems as if some part of Spring uses setValue() on my EnumEditor to set a String (the toString()ed Enum to be exact). Of course, it is expecting an Enum class.  In the example I will upload shortly I have overridden my Enums (InvitationType) toString() to return ""0xdeadbeef"", and my PropertyEditors (EnumEditor) setValue() to throw an UnsupportedOperationException with the parameter as message.  The following exception is thrown:  java.lang.UnsupportedOperationException: value: 0xdeadbeef EnumEditor.setValue(EnumEditor.java:36) org.springframework.validation.BindException.getFieldValue(BindException.java:306) org.springframework.web.servlet.support.BindStatus.\(BindStatus.java:114) org.springframework.web.servlet.tags.BindStatus.\(BindStatus.java:38) org.springframework.web.servlet.tags.BindTag.doStartTagInternal(BindTag.java:105) org.springframework.web.servlet.tags.RequestContextAwareTag.doStartTag(RequestContextAwareTag.java:71) org.apache.jsp.demo_jspx._jspService(demo_jspx.java:67)  Why does this BindException call setValue() with a toString'ed() version of my Enum? Shouldn't it use the object itself?? I suspect there is something very wrong here.  I will upload a complete demonstration shortly.   ---  **Affects:** 1.1.4  **Attachments:** - [bugdemo.zip](https://jira.spring.io/secure/attachment/10530/bugdemo.zip) (_9.35 kB_)","closed","type: bug,","spring-projects-issues","2005-02-18T04:48:05Z","2005-02-28T00:18:38Z"
"","5436","ClassCastException with MethodMapTransactionAttributeSource [SPR-708]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-708](https://jira.spring.io/browse/SPR-708?redirect=false)** and commented  Here is my bean (adapted from an example in Spring in Action):  \ \ \ \\PROPAGATION_REQUIRED\\ \ \ \  I am always getting the exception:  [...] org.springframework.beans.TypeMismatchException: Failed to convert property value of type [java.util.LinkedHashMap] to required type [java.util.Map] for property 'methodMap'; nested exception is java.lang.ClassCastException: java.lang.String java.lang.ClassCastException: java.lang.String at org.springframework.transaction.interceptor.MethodMapTransactionAttributeSource.setMethodMap(MethodMapTransactionAttributeSource.java:58) [...]  Line 58 of MethodMapTransactionAttributeSource.java says:  TransactionAttribute attr = (TransactionAttribute) methodMap.get(name);  No wonder the Exception happens, but why is there an instance of TransactionAttribute expected? Since there is no official documentation of MethodMapTransactionAttributeSource available and it is not used in the Spring samples, I consider this class somewhat untested and this particular problem a bug.   ---  **Affects:** 1.1.4","closed","type: bug,","spring-projects-issues","2005-02-13T04:31:42Z","2005-02-13T18:03:40Z"
"","5421","StringTrimmerEditor to support trimming of CR/LF [SPR-693]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-693](https://jira.spring.io/browse/SPR-693?redirect=false)** and commented  Currently, the StringTrimmerEditor does not trim CR or LF characters.  For HTML textarea's (or corresponding multi-line-edit fields in GUI), this would be rather useful.  What do you think about adding an option to also trim CR and LF?   ---  **Affects:** 1.1.4  **Attachments:** - [StringTrimmerEditor.java](https://jira.spring.io/secure/attachment/10519/StringTrimmerEditor.java) (_2.26 kB_)","closed","type: enhancement,","spring-projects-issues","2005-02-07T00:11:45Z","2005-02-27T18:36:43Z"
"","5412","org.springframework.validation.BindException: provide reject* methods without default message [SPR-684]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-684](https://jira.spring.io/browse/SPR-684?redirect=false)** and commented  Do we always need a default message?  In my case, I use the errorCode for looking up a message with JSTLs fmt:message tag, which happens to provide its own default if the message could not be resolved.  I tried to set the defaultMessage to null, but the resulting behaviour is unexpected.  I think those classes would be affected:  org.springframework.validation.BindException org.springframework.web.bind.EscapedErrors org.springframework.validation.ValidationUtils   ---  **Affects:** 1.1.4","closed","type: enhancement,","spring-projects-issues","2005-02-03T11:30:10Z","2005-09-14T18:13:02Z"
"","5410","RequestUtils: provide alternative getters for optional parameters [SPR-682]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-682](https://jira.spring.io/browse/SPR-682?redirect=false)** and commented  What about having a  Integer getIntegerParameter(request, name);  returning null if the parameter is not present? Using getIntParameter(request, name, defaultVal) for this purpose is just a hack, because theoretically every defaultVal I choose could be a valid value.  Likewise:  Boolean getBooleanParameter(request, name), Double getDoubleParameter(request, name)  and so on.  I would use this very often.   ---  **Affects:** 1.1.5","closed","type: enhancement,","spring-projects-issues","2005-02-03T08:17:49Z","2005-02-28T04:22:47Z"
"","5397","Provide macro support for password fields and hidden fields [SPR-669]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-669](https://jira.spring.io/browse/SPR-669?redirect=false)** and commented  I'm quoting Darren Davison:  I'd suggest adding formPasswordInput and formHiddenInput to both macro libs, additionally overloading formInput for FreeMarker usage as an added convenience using the extra 'type' param.   ---  **Affects:** 1.1.3","closed","type: enhancement,","spring-projects-issues","2005-01-31T01:44:11Z","2005-01-31T02:33:22Z"
"","5394","FreeMarker macro spring.url dodumented but not implemented [SPR-666]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-666](https://jira.spring.io/browse/SPR-666?redirect=false)** and commented  The reference documentation mentions the spring.url tag for FreeMarker. Unfortunately, this tag does not seem to be implemented in spring.ftl (but is in spring.vl).   ---  **Affects:** 1.1.3","closed","type: bug,","spring-projects-issues","2005-01-29T22:01:54Z","2005-01-30T06:31:34Z"
"","5173","Spring/XmlWebApplicationContext/DTD does not allow an empty context [SPR-444]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-444](https://jira.spring.io/browse/SPR-444?redirect=false)** and commented  The following context.xml yields an ""org.xml.sax.SAXParseException: Element ""beans"" erfordert zusΣtzliche Elemente."":  \ \ \ \ As there is nothing wrong with an empty context IMHO and Spring aims to be unintrusive, empty contexts should be allowed. Maybe I want to add beans by hand later? Maybe I want an empty child (e.g. servlet) context, because I put everything in the parent?   ---  **Affects:** 1.1.1","closed","type: enhancement,","spring-projects-issues","2004-11-02T19:12:23Z","2004-11-06T05:52:57Z"
"","5012","StringArrayOutOfBoundsException when accessing Spring via Welcome File [SPR-281]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-281](https://jira.spring.io/browse/SPR-281?redirect=false)** and commented  I have configured the following welcome file:  \ \index.do\ \  and this servlet mapping:  \ \springDispatcherServlet\ \/index.do\ \REQUEST\ \FORWARD\ \INCLUDE\ \ERROR\ \  When I try to access my application with just ""http://server/\/"", I get the following exception:  java.lang.StringIndexOutOfBoundsException: String index out of range: -8 at java.lang.String.substring(String.java:1444) at java.lang.String.substring(String.java:1411) at org.springframework.web.util.UrlPathHelper.getPathWithinServletMapping(UrlPathHelper.java:148) at org.springframework.web.util.UrlPathHelper.getLookupPathForRequest(UrlPathHelper.java:127) at org.springframework.web.servlet.handler.AbstractUrlHandlerMapping.getHandlerInternal(AbstractUrlHandlerMapping.java:113) at org.springframework.web.servlet.handler.AbstractHandlerMapping.getHandler(AbstractHandlerMapping.java:95) at org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java:578) at org.springframework.web.servlet.DispatcherServlet.getLastModified(DispatcherServlet.java:549) at javax.servlet.http.HttpServlet.service(HttpServlet.java:685) at javax.servlet.http.HttpServlet.service(HttpServlet.java:802) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:237) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:157) at de.schildbach.presentation.XsltFilter.doFilter(XsltFilter.java:110) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:186) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:157) at de.schildbach.presentation.ResponseHeaderFilter.doFilter(ResponseHeaderFilter.java:33) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:186) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:157) at de.schildbach.user.presentation.AuthenticationFilter.doFilter(AuthenticationFilter.java:88) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:186) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:157) at org.springframework.orm.hibernate.support.OpenSessionInViewFilter.doFilterInternal(OpenSessionInViewFilter.java:117) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:73) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:186) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:157) at de.schildbach.presentation.ReferrerFilter.doFilter(ReferrerFilter.java:83) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:186) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:157) at de.schildbach.presentation.URLRewritingFilter.doFilter(URLRewritingFilter.java:33) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:186) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:157) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:214) at org.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:104) at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:520) at org.apache.catalina.core.StandardContextValve.invokeInternal(StandardContextValve.java:198) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:152) at org.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:104) at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:535) at org.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:102) at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:520) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:137) at org.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:104) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:117) at org.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:102) at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:520) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) at org.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:104) at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:520) at org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:929) at org.apache.coyote.tomcat5.CoyoteAdapter.service(CoyoteAdapter.java:160) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:799) at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.processConnection(Http11Protocol.java:705) at org.apache.tomcat.util.net.TcpWorkerThread.runIt(PoolTcpEndpoint.java:577) at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:683) at java.lang.Thread.run(Thread.java:534)   ---  **Affects:** 1.0.2","closed","type: bug,","spring-projects-issues","2004-08-23T04:11:29Z","2004-08-24T20:49:09Z"
"","4976","Spring logging is not configurable via -Djava.util.logging.config.file option, seems to init own config [SPR-245]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-245](https://jira.spring.io/browse/SPR-245?redirect=false)** and commented  I discovered that Spring uses java.util.logging for its logging output. Unfortunately, I was not able to alter the logging configuration (log levels etc.) by supplying the -Djava.util.logging.config.file option.  Spring seems to programmatically initialize its own configuration. In my opinion this is not the responsibility of the framework.  In my Tomcat case, I copied the JRE supplied file logging.properties and supplied -Djava.util.logging.config.file to point to that file. Then I edited the line "".level = WARNING"". This supresses all INFO logging from my own application. It does not supress however, the INFO messages from Spring. Example:  05.08.2004 11:54:42 org.springframework.web.servlet.mvc.multiaction.MultiActionController setDelegate INFO: Found action method [public org.springframework.web.servlet.ModelAndView de.schildbach.game.presentation.controller.GameDemoController.undo_move(javax.servlet.http.HttpServletRequest,javax.servlet.http.Ht... 05.08.2004 11:54:42 org.springframework.web.servlet.mvc.multiaction.MultiActionController setDelegate INFO: Found action method [public final org.springframework.web.servlet.ModelAndView org.springframework.web.servlet.mvc.AbstractController.handleRequest(javax.servlet.http.HttpServletRequest,javax.servlet.http...   ---  **Affects:** 1.0.2","closed","type: enhancement,","spring-projects-issues","2004-08-04T21:22:57Z","2004-08-10T00:23:42Z"
"","4968","MultiActionController to generate HTTP 404 on non-existing method [SPR-237]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-237](https://jira.spring.io/browse/SPR-237?redirect=false)** and commented  A non-existing method should result in a HTTP 404 error response (or use the Servlet error page mechanism for customizing the error response). This would be consistent with the rest of the framework (non existing handler in general results in a 404).  Any NoSuchRequestHandlingMethodException should be hidden from the user.   ---  **Affects:** 1.0.2","closed","type: enhancement,","spring-projects-issues","2004-08-02T06:40:01Z","2004-08-03T21:12:00Z"
"","5717","support new class declarations in latest Hibernate Annotations preview [SPR-1007]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-1007](https://jira.spring.io/browse/SPR-1007?redirect=false)** and commented  The new preview release of the Hibernate Annotations (beta 2) provides a more friedly way to declare annotated classes. Please have a look at the party printed in bold, documentation chapter 1.2 ""Setup and Configuration"":  http://www.hibernate.org/hib_docs/annotations/reference/en/html/ch01.html#d0e48  Unfortunately, it does not seem to be possible to declare mapped classes using the Spring context, only the mapping files itself (which are not present any more if you use annotations instead).  What do you think of enhancing the LocalSessionFactoryBean in that direction?   ---  **Affects:** 1.2.1","closed","type: enhancement,","spring-projects-issues","2005-06-03T03:10:00Z","2005-06-04T05:02:44Z"
"","5770","XmlWebApplicationContext.setConfigLocations() does not correctly implement comments from spring-beans.dtd [SPR-1063]","**[Andreas Schack](https://jira.spring.io/secure/ViewProfile.jspa?name=anderl)** opened **[SPR-1063](https://jira.spring.io/browse/SPR-1063?redirect=false)** and commented  Hi! A pretty long description of what i all tried and make me think i found a bug: In spring-beans.dtd you find  this comment for the attlist of \: The relative resource location of the XML bean definition file to import, for example ""myImport.xml"" or ""includes/myImport.xml or ""../myImport.xml"" I think the meaning of 'relative' is relative to this file. If not i am perhaps in the wrong component. But it should be right, because i find xml-Files in the same Directory without any path. The Problem is the ""../myImport.xml"":      String[] paths = {""/bam-servlet.xml""};      ctx = new XmlWebApplicationContext();     ctx.setConfigLocations(paths);  finds bam-servlet.xml in the classes-directory (what isn't the place where i want to have it by the way).  WEB-INF/classes/bam-servlet.xml:  \ \ \ \ \  result: OException parsing XML document from ServletContext resource [/../bam-servlet.xml]; nested exception is java.io.FileNotFoundException: Could not open ServletContext resource [/../bam-servlet.xml] org.springframework.beans.factory.BeanDefinitionStoreException: IOException parsing XML document from ServletContext resource [/../bam-servlet.xml]; nested exception is java.io.FileNotFoundException: Could not open ServletContext resource [/../bam-servlet.xml]  but the file is in '..': schack@PC230:~/java/bam/build/web/WEB-INF/classes> ls bam-servlet_1.xml  bam-servlet.xml  bsz  log4j.properties schack@PC230:~/java/bam/build/web/WEB-INF/classes> cd .. schack@PC230:~/java/bam/build/web/WEB-INF> ls bam-servlet.xml  classes  jsp  lib  tlds  web.xml schack@PC230:~/java/bam/build/web/WEB-INF>  WEB-INF/classes/bam-servlet.xml:  \ \ \ \ \ \ \ \Orgel\ \ \ \ \ \ \/WEB-INF/jsp/\ \ \ \.jsp\ \ \ \  ... and the DTD explicitly says ""../myImport.xml"" is the correct syntax.  if i change WEB-INF/classes/bam-servlet.xml in the following way it works (but does not help at all):  \ \ \ \ \  ---  So i really think i'm describing a bug - perhaps only in the comments of the DTD - but a bug. There is a more general problem related with this: It is really difficult in spring to get the config-files from both: the web application and the unit tests. Live would be much easier if it would be possible to use absolute paths in unit tests - everywhere where paths are needed.  Thanx and Bye Andreas  ---  **Affects:** 1.2 final","closed","status: declined,","spring-projects-issues","2005-06-20T00:58:20Z","2019-01-13T22:51:22Z"
"","5276","Provide possibility to wire internal beans [SPR-547]","**[Andreas Prohaska](https://jira.spring.io/secure/ViewProfile.jspa?name=prohaska)** opened **[SPR-547](https://jira.spring.io/browse/SPR-547?redirect=false)** and commented  I'd like to request a feature that allows wiring internal beans (bean tags that occur within a property tag). I've posted this topic in the forum, but no solution was found. Eventually it's a feature that you consider useful.  The solution I think of would allow the developer to assign an ""id"" attribute to internal beans that is only valid within the scope of the nearest parent bean that is not internal. Additionally it should be possible to reference the one instance of the internal bean with the standard ""ref"" tag.  An example use case could be the definition of an UI dialog in a String BeanFactory. Typically this dialog would be a prototype and would be defined with all elements (input fields, scrollbars, labels, etc.) in the ApplicationContext.xml. This makes it actually very easy to maintain the structure. The problem arises when you want to add EventListeners that ""link"" to elements, since there is no possibility to get a reference to the already created instances.  The forum topic can be found here: http://forum.springframework.org/viewtopic.php?t=2435   --- No further details from [SPR-547](https://jira.spring.io/browse/SPR-547?redirect=false)","closed","type: enhancement,","spring-projects-issues","2004-12-13T02:33:04Z","2006-04-11T05:07:52Z"
"","5664","Suggestion: Code improvement for LocalSlsbInvokerInterceptor [SPR-946]","**[Andreas Loew](https://jira.spring.io/secure/ViewProfile.jspa?name=aloew)** opened **[SPR-946](https://jira.spring.io/browse/SPR-946?redirect=false)** and commented  Please see http://forum.springframework.org/viewtopic.php?t=5219  I would like to suggest a code improvement for org.springframework.ejb.access.LocalSlsbInvokerInterceptor which would fix the problem already several people (including myself) have run into when trying to use the LocalStatelessSessionProxy on local EJB interfaces (e.g. generated by XDoclet) that happen NOT to implement the POJO business interface directly:  http://forum.springframework.org/viewtopic.php?t=4943 http://forum.springframework.org/viewtopic.php?p=2071 http://forum.springframework.org/viewtopic.php?p=569 http://sourceforge.net/mailarchive/message.php?msg_id=7104648  My suggestion is to use the same detection mechanism as already implemented (but only for Remote objects) in org.springframework.remoting.rmi.RmiClientInterceptorUtils.doInvoke(MethodInvocation invocation, Remote stub):  This means changing the ""try"" block in LocalSlsbInvokerInterceptor.invoke(MethodInvocation invocation) to read like the following:      try {          ejb = getSessionBeanInstance();              Method method = invocation.getMethod();          if (method.getDeclaringClass().isInstance(ejb)) {              // directly implemented              return method.invoke(ejb, invocation.getArguments());          } else {              // not directly implemented              Method ejbMethod = ejb.getClass().getMethod(method.getName(), method.getParameterTypes());              return ejbMethod.invoke(ejb, invocation.getArguments());          }      }   This will make all these problems go away (of course at the expense of the additional test ""method.getDeclaringClass().isInstance(ejb)"").  Thanks & best regards,  Andreas   ---  **Affects:** 1.1.5, 1.2 final","closed","type: enhancement,","spring-projects-issues","2005-05-14T02:04:49Z","2005-05-18T06:49:38Z"
"","5042","Problems with Apache Commons DBCP [SPR-312]","**[Andreas Eriksson](https://jira.spring.io/secure/ViewProfile.jspa?name=andreas_developer)** opened **[SPR-312](https://jira.spring.io/browse/SPR-312?redirect=false)*** and commented  Exception org.apache.commons.dbcp.SQLNestedException gets thrown when creating a new org.springframework.context.support.ClassPathXmlApplicationContext with a applicationContext.xml looking like this:  \ \ \ \ \  \ \ \ \ \ \  You might want to get the bean ""testDataSource"" from the application context and configure it programmatically and not inside the applicationContext.xml with the \ tags.   ---  **Affects:** 1.1 final  **Attachments:** - [appCtx.xml](https://jira.spring.io/secure/attachment/10208/appCtx.xml) (_519 bytes_) - [README.TXT](https://jira.spring.io/secure/attachment/10207/README.TXT) (_507 bytes_) - [spring bug.zip](https://jira.spring.io/secure/attachment/10204/spring+bug.zip) (_2.94 kB_) - [spring bug.zip](https://jira.spring.io/secure/attachment/10203/spring+bug.zip) (_2.94 kB_) - [SpringClient.java](https://jira.spring.io/secure/attachment/10205/SpringClient.java) (_400 bytes_) - [stacktrace.txt](https://jira.spring.io/secure/attachment/10206/stacktrace.txt) (_7.42 kB_)","closed","in: core,","spring-projects-issues","2004-09-06T20:43:08Z","2019-01-12T16:42:16Z"
"","5712","Config attribute for indention in AbstractXsltView doTransform() [SPR-1002]","**[Andreas Brenk](https://jira.spring.io/secure/ViewProfile.jspa?name=abrenk)** opened **[SPR-1002](https://jira.spring.io/browse/SPR-1002?redirect=false)** and commented  Instead of unconditionally setting  trans.setOutputProperty(OutputKeys.INDENT, ""yes"");  in AbstractXsltView I propose to introduce a property ""indent"" with default value ""true"" (to keep the current behaviour) and wrap the above statement in an if(indent) {} block.  Unconditional indention could be disabled this way and rather set directly in the stylesheet using xsl:output.   ---  **Affects:** 1.2.2","closed","type: enhancement,","spring-projects-issues","2005-06-01T22:36:15Z","2006-12-01T22:02:55Z"
"","5652","Allow HttpServletResponse to be available in the FreeMarker model [SPR-929]","**[Andreas Aderhold](https://jira.spring.io/secure/ViewProfile.jspa?name=thyrell)** opened **[SPR-929](https://jira.spring.io/browse/SPR-929?redirect=false)** and commented  Sometimes it is handy to encode URLs using HttpServletResponse.encodeURL. I use this ins JSP all the time to satisfy the non-cookie users and servlet filters that operate on the response stream as well (in the concrete case: http://tuckey.org/urlrewrite/manual/guide.html#urlabs).  Anyway, I sublcassed FreeMarkerView to putting the response on the model. Nevertheless I think it's a more common thing and a no-brainer. Would be nice to have in the original FreeMarkerView support this.  Here's the code: /* @(#)FreeMarkerView.java    5/9/2005 * * Free to the world for use/change/deleted.   */   package com.thyrell.cdb.ui.support;  import java.util.Map; import java.io.IOException;  import javax.servlet.http.HttpServletResponse;  import freemarker.template.Template; import freemarker.template.TemplateException;  /** * A subclass of {`@link` org.springframework.web.servlet.view.freemarker.FreeMarkerView}  * that supports having the HttpServletRespone stream available in the model.  *   *   \This is quite handy if you have servlet filters processing not only * the request stream but also the response stream to alter i.e. URL encoding.  * In the concrete case, we need this to support outbount URL rewriting.  *   * `@author`  Andreas Aderhold, andi@threll.com  * `@version` $Id$   */   public class FreeMarkerView extends org.springframework.web.servlet.view.freemarker.FreeMarkerView {    private String responseAttribute;    public void setResponseAttribute(String responseAttribute) {   this.responseAttribute = responseAttribute;   }    /**    * Add servlet response to model to support response.encodeURL();   * `@param` template   * `@param` map   * `@param` httpServletResponse   * `@throws` IOException   * `@throws` TemplateException     */     protected void processTemplate(Template template, Map map, HttpServletResponse httpServletResponse) throws IOException, TemplateException {     if (responseAttribute != null && !responseAttribute.equals("""")) {     map.put(responseAttribute, httpServletResponse);     }     super.processTemplate(template, map, httpServletResponse); 	}     }    ---  **Attachments:** - [FreeMarkerView.java](https://jira.spring.io/secure/attachment/10710/FreeMarkerView.java) (_1.84 kB_)  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2005-05-08T20:59:43Z","2012-06-19T09:37:34Z"
"","5650","Support TMX ResourceBundles [SPR-927]","**[Andreas Aderhold](https://jira.spring.io/secure/ViewProfile.jspa?name=thyrell)** opened **[SPR-927](https://jira.spring.io/browse/SPR-927?redirect=false)** and commented  Support TMX ResourceBundles for internationalizing content (like messages, notes, etc.). TMX is a industry standard for translations. The TMX file format is a XML format.  Article (overview): http://www.lisa.org/tmx/m_itagaki.html  TMX Website http://www.lisa.org/tmx/  A concrete, already existing, TMXResourceBundle implementation: http://tmxjavabridge.sourceforge.net/  In Spring it would be very nice to have a (or more) TMX message source(s).  ---  **Issue Links:** - #5649 Support TMX ResourceBundles (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2005-05-07T04:00:59Z","2019-01-11T22:06:58Z"
"","5649","Support TMX ResourceBundles [SPR-926]","**[Andreas Aderhold](https://jira.spring.io/secure/ViewProfile.jspa?name=thyrell)** opened **[SPR-926](https://jira.spring.io/browse/SPR-926?redirect=false)** and commented  Support TMX ResourceBundles for internationalizing content (like messages, notes, etc.). TMX is a industry standard for translations. The TMX file format is a XML format.  Article (overview): http://www.lisa.org/tmx/m_itagaki.html  TMX Website http://www.lisa.org/tmx/  A concrete, already existing, TMXResourceBundle implementation: http://tmxjavabridge.sourceforge.net/  In Spring it would be very nice to have a (or more) TMX message source(s).  ---  **Issue Links:** - #5650 Support TMX ResourceBundles (_**""is duplicated by""**_)","closed","type: enhancement,","spring-projects-issues","2005-05-07T03:59:08Z","2019-01-11T22:06:56Z"
"","5648","Make PropertyBeanFactory/ResourceBundleMessageSource support XML Property Files [SPR-925]","**[Andreas Aderhold](https://jira.spring.io/secure/ViewProfile.jspa?name=thyrell)** opened **[SPR-925](https://jira.spring.io/browse/SPR-925?redirect=false)** and commented  Since JDK 5.0 the Properties class supports loading properies from XML files. See:  http://java.sun.com/j2se/1.5.0/docs/api/java/util/Properties.html  It would be nice having this support in Spring too (optionally). Maybe have the factory beans check for the ending .properties/.xml and use the appropriate parsing method.  It would be especially nice to have ResourceBundles for messages support the XML format.    --- No further details from [SPR-925](https://jira.spring.io/browse/SPR-925?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-05-06T06:44:05Z","2005-06-04T08:46:46Z"
"","5736","dropDatabaseSchema does not work with Postgres [SPR-1028]","**[Andrea Aime](https://jira.spring.io/secure/ViewProfile.jspa?name=aaime)** opened **[SPR-1028](https://jira.spring.io/browse/SPR-1028?redirect=false)** and commented  LocalSessionFactoryBean.dropDatabaseSchema() does not work with Postgresql if the schema is already there and you change a name in the table names. This happens because once a command fails postgres won't process further commands in the same transaction.  As a workaround, simply use autocommit=true in executeSchemaScript.  There are other problems tought. For example, if you change a foreign key name in the mapping file, dropping won't work because the old foreign key won't be removed (and thus the tables won't be removed). I guess this is a Hibernate problem, thought, that should generate a DROP TABLE xxx CASCADE instead of a simple DROP TABLE xxx   ---  **Affects:** 1.1.4","closed","type: bug,","spring-projects-issues","2005-06-10T01:48:15Z","2005-06-13T05:38:21Z"
"","5658","implementing different types of advices in the same class does not work [SPR-938]","**[Alexei Guevara](https://jira.spring.io/secure/ViewProfile.jspa?name=alexguev)** opened **[SPR-938](https://jira.spring.io/browse/SPR-938?redirect=false)** and commented  when implementing more than one advice interface (AfterReturningAdvice, ThrowsAdvice or MethodBeforeAdvice) only one of the hook method gets invoked.   ---  **Affects:** 1.2 RC2  **Attachments:** - [multiadvicetest.zip](https://jira.spring.io/secure/attachment/10725/multiadvicetest.zip) (_6.31 kB_)  1 votes, 1 watchers","closed","in: core,","spring-projects-issues","2005-05-11T06:03:17Z","2012-06-19T03:54:02Z"
"","5242","DefaultListableBeanFactory.getBeansOfType() returns no results when a proxied class is specified [SPR-513]","**[Alex Wolfe](https://jira.spring.io/secure/ViewProfile.jspa?name=alexkwolfe)** opened **[SPR-513](https://jira.spring.io/browse/SPR-513?redirect=false)** and commented  The DefaultListableBeanFactory.isBeanTypeMatch() method only considers the value returned bean.getClass() when determining whether the bean type matches the type specified.  Callers of this method must consider that a bean may be a proxied class (like the HttpInvokerProxyFactoryBean) in which case the call to getClass() will return the Proxy instead of the implementing class.  Since the getBeansOfType method relies on isBeanTypeMatch to determine if a bean is of the specfied type, it must handle the case where a bean is actually a Proxy.  The following implementation illustrates a potential solution.  If the call to getBeanTypeMatch() returns false and the RootBeanDefinition of the bean being checked for the specified type is assignable from the specified type, then that bean is included in the result.  public Map getBeansOfType(Class type, boolean includePrototypes, boolean includeFactoryBeans) throws BeansException { Map result = new HashMap(); Iterator it = beanDefinitionNames.iterator(); do { if (!it.hasNext()) break; String beanName = (String) it.next(); RootBeanDefinition rbd = getMergedBeanDefinition(beanName, false); if (!rbd.isAbstract() && rbd.hasBeanClass() && (includePrototypes || rbd.isSingleton())) if ((org.springframework.beans.factory.FactoryBean.class).isAssignableFrom(rbd.getBeanClass())) { if (includeFactoryBeans && (includePrototypes || isSingleton(beanName)) && (isBeanTypeMatch(beanName, type) || (type.isAssignableFrom(rbd.getBeanClass())))) addBeanToResultMap(beanName, result); } else if (type == null || type.isAssignableFrom(rbd.getBeanClass())) addBeanToResultMap(beanName, result); } while (true); String singletonNames[] = getSingletonNames(); for (int i = 0; i < singletonNames.length; i++) { String beanName = singletonNames[i]; RootBeanDefinition rbd = getMergedBeanDefinition(beanName, false); if (!containsBeanDefinition(beanName) && isSingleton(beanName) && (isBeanTypeMatch(beanName, type) || (type.isAssignableFrom(rbd.getBeanClass())) && (includeFactoryBeans || !isFactoryBean(beanName)))) addBeanToResultMap(beanName, result); }      return result;  }   ---  **Affects:** 1.1.2","closed","in: core,","spring-projects-issues","2004-12-02T16:53:08Z","2004-12-07T01:35:40Z"
"","5469","Creation of beans.xml from pre-populated object graph... [SPR-741]","**[Alex Lorbeer](https://jira.spring.io/secure/ViewProfile.jspa?name=lorbeer)** opened **[SPR-741](https://jira.spring.io/browse/SPR-741?redirect=false)** and commented  Hi,  I'd like to use Spring's ""beans.xml"" file almost as a configuration file that instantiates, populates, and ""wires together"" beans for later use within an application. This is easily done. However, I also need the ability to do the INVERSE of this. Within an application, a graph of objects is created though some means, and I would like to save the state of this object graph as a ""beans.xml"" file, so that at some other time, I could recreate the graph, with the possibility of ""by hand"" modifying some values in the xml.  I know this sounds similar to an xml marshalling/unmarshalling framework (XStream, XMLBeans, etc.), but really it's more powerful... for the same reason we choose to ""wire"" objects via Spring over ""unmarshalling"" via some other framework.  I would say the idea is more similar to the way Apache Ant tasks work... a graph of objects is created, so that an application can later execute a given task, which is all setup and ready to go. However, Ant doesn't offer the ability to do the inverse either.  Now, before Spring came out (or became popular), I wrote a framework that would do what I need. I have been using it for years, and it works great. The problem is, I finally found the need to revisit some things in order to implement a few new features. However, Spring as a whole, offers so much more than my framework does, and unfortunately the xml is incompatible. So I find myself in the situation where I want to CLONE the way Spring wires together objects, and then implement the ""inverse"" as well. I feel like that this is replicating a lot of work, and furthermore, would require me to ""upkeep"" the framework to ensure Spring compatibility in the future.  I hate to make such a request, but I feel that the developers of the Spring framework could implement this quicker than I could because they are already familiar with the internals of the code. The pattern is really just to inverse the way the object graph is populated from the xml. The only thing to really worry about is when objects aren't instantiated using a ""default"" no-argument constructor, but this is something that could be solved very nicely using Spring AOP... by creating a MethodInterceptor that keeps track of objects that are instantiated via non-default constructors, or static/non-static bean factories.  I think this would also tie in very nicely with the [hopefully] up and coming feature of hot-deployment. Imagine being able to write out an already existing object graph, edit a few values that were perhaps erroneous or needed to be modified for testing purposes, and then having the changes in the graph occur... all during runtime!  Do any of the current Spring developers think that this could be a possibility in the future?  Thank you.   ---  **Affects:** 1.1.5","closed","type: enhancement,","spring-projects-issues","2005-02-27T06:11:04Z","2012-06-19T09:37:45Z"
"","5695","BeanWrapper defaultEditors allowEmpty optional [SPR-983]","**[Ales Justin](https://jira.spring.io/secure/ViewProfile.jspa?name=alesj)** opened **[SPR-983](https://jira.spring.io/browse/SPR-983?redirect=false)** and commented  Having an option to set allowEmpty on registration of Custom(Number|Boolean|Character)Editor in BeanWrapperImpl.registerDefaultEditors() would be necessary.  When editing a (already persistant) bean in web interface, trying to set its number property to null (before it wasn't null), you have to override (over-register) all those number editors. Instead of simply saying allowEmpty in BeanWrapperImpl (even better would be an option to set this also in DataBinder and its subclasses). Without over-registration it leavs out that property (it stays the same as before) - it silently adds error to BindException.    ---  **Affects:** 1.2.1  2 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2005-05-25T21:03:28Z","2008-01-07T22:35:34Z"
"","5445","Still too early connection closing when using OSIVI [SPR-717]","**[Ales Justin](https://jira.spring.io/secure/ViewProfile.jspa?name=alesj)** opened **[SPR-717](https://jira.spring.io/browse/SPR-717?redirect=false)** and commented  The connection is still closed to early when using OpenSessionInViewInterceptor and TransactionAwareDSP (#5438).  When we call it from transaction aware DAO, we first register SpringSessionSynchronization, so ConnectionSynchronization gets registered as well (allowSynchronization && TransactionSynchronizationManager.isSynchronizationActive()) on getting a Connection for Session object (Session.connection() and  TADSP.getConnection()). So when transaction commits, it calls ConnectionSynchronization.afterCompletion() which closes connection. And OSIVI also tries to close already closed connection.  There is another issue to consider when applying transaction aware DS. If I use session before DAO, for example in my web interceptor to lock in versionable objects set as attributes in http session, this doesn't register any synchronization, therefore underlying connection (the one belonging to transactional session) doesn't get registered in transaction manager. So when using some other JDBC framework than Hibernate, being transactional on underlying connection, we wouldn't get the same connection as used in current session - since it wasn't registered. But ofcourse we would always get the same already opened (with opened connection) session.  ---  **Affects:** 1.1.5  **Attachments:** - [SessionAwareDataSourceProxy.java](https://jira.spring.io/secure/attachment/10520/SessionAwareDataSourceProxy.java) (_5.89 kB_)","closed","status: declined,","spring-projects-issues","2005-02-15T22:52:35Z","2019-01-12T16:41:42Z"
"","5439","DefaultPropertiesPersister exception on zero length line [SPR-711]","**[Ales Justin](https://jira.spring.io/secure/ViewProfile.jspa?name=alesj)** opened **[SPR-711](https://jira.spring.io/browse/SPR-711?redirect=false)** and commented  If resources file contains zero length line this code fails, since StringUtils.trimLeadingWhitespace expects at least one char.      String line = in.readLine();     if (line == null) {          return;     }     line = StringUtils.trimLeadingWhitespace(line);     if (line.length() > 0) {    ---  **Affects:** 1.1.4","closed","in: core,","spring-projects-issues","2005-02-13T20:57:23Z","2005-02-13T21:01:35Z"
"","5438","Double closing connection with Hibernate [SPR-710]","**[Ales Justin](https://jira.spring.io/secure/ViewProfile.jspa?name=alesj)** opened **[SPR-710](https://jira.spring.io/browse/SPR-710?redirect=false)** and commented  The same thing as #5433 happens while using Hibernate.  Since TADSP registers Connection via DataSourceUtils - ConnectionSynchronization object - beforeCompletion closes used connection. And so does SpringSessionSynchronization beforeCompletion - closeSessionOrRegisterDeferredClose (via LocalDataSourceConnectionProvider closeConnection).  Ok, as you said, closing already a closed connection isn't an error by the JDBC API, but that stack trace doesn't look good :-(.  ---  **Affects:** 1.1.4","closed","type: bug,","spring-projects-issues","2005-02-13T20:41:57Z","2019-01-11T12:58:58Z"
"","5433","TransactionAwareDSP with iBatis duplicates ConnectionSynchronization in TransactionManager [SPR-705]","**[Ales Justin](https://jira.spring.io/secure/ViewProfile.jspa?name=alesj)** opened **[SPR-705](https://jira.spring.io/browse/SPR-705?redirect=false)** and commented  When using iBatis with TransactionAwareDataSourceProxy (TADS), DataSource resource gets registered twice (different instances - same underlying datasource). First with SqlMapClientTemplat on actual TADSP and then yet again with  TADSP's getConnection() method. So when it is cleaning up the transaction on APTransactionManager's triggerBeforeCompletion method, it gets already closed connection.  My fix (currently is working ok :-):  from SqlMapClientTemplate.java      public Object execute(SqlMapClientCallback action) throws DataAccessException {         Assert.notNull(getSqlMapClient(), ""No SqlMapClient specified"");         SqlMapSession session = this.getSqlMapClient().openSession();         try {             DataSource dataSource = getDataSource();             if (dataSource instanceof TransactionAwareDataSourceProxy) {                 dataSource = ((TransactionAwareDataSourceProxy)dataSource).getTargetDataSource();             }             Connection con = DataSourceUtils.getConnection(dataSource);             try {                 session.setUserConnection(con);                 return action.doInSqlMapClient(session);             }             catch (SQLException ex) {                 throw getExceptionTranslator().translate(""SqlMapClient operation"", null, ex);             }             finally {                 DataSourceUtils.closeConnectionIfNecessary(con, dataSource);             }         }         finally {             session.close();         }     }    ---  **Affects:** 1.1.4","closed","type: bug,","spring-projects-issues","2005-02-11T01:47:34Z","2005-02-12T21:53:21Z"
"","5807","BeanFactoryPostProcessor processing [SPR-1103]","**[Ales Justin](https://jira.spring.io/secure/ViewProfile.jspa?name=alesj)** opened **[SPR-1103](https://jira.spring.io/browse/SPR-1103?redirect=false)** and commented  I get an exception when trying to initialize this context: Code:                              1         /WEB-INF/ecos.properties                             WEB-INF/messages         Windows-1250                                       ${jdbc.driverClassName}         ${jdbc.url}         ${jdbc.username}         ${jdbc.password}         ${jdbc.validationQuery}                                                     false                                             ${sms.jar}                                                        classpath:/com/generalynx                                                           ${hibernate.show_sql}                 ${hibernate.dialect}                 ${hibernate.connection.release_mode}                 ${hibernate.cache.provider_class}                 ${hibernate.cache.use_query_cache}                 ${hibernate.query.substitutions}                 ${hibernate.jdbc.use_scrollable_resultset}                 ${hibernate.jdbc.batch_size}                 ${hibernate.jdbc.batch_versioned_data}                 ${hibernate.generate_statistics}                                                                                                                                          It breaks since DefaultListableBeanFactory.getBeanNamesForType() calls isBeanTypeMatch() and this eventually calls this line  Code:      if (mergedBeanDefinition.getFactoryMethodName() != null && mergedBeanDefinition.isSingleton()) {        return getBean(name).getClass();     }  in AbstractBeanFactory.getType(String name) method. Since 'configuration' bean is method made it is picked up. And this tries to initialize DataSource bean before PropertyPlaceholderConfigurer bean.  This worked in previous version 1.2.1.  Rgds, Ales  ---  exception stack trace: Code:  org.apache.commons.dbcp.SQLNestedException: Cannot load JDBC driver class '${jdbc.driverClassName}' at org.apache.commons.dbcp.BasicDataSource.createDataSource(BasicDataSource.java:766) at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:540) at org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy.afterPropertiesSet(LazyConnectionDataSourceProxy.java:137) at org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy.\(LazyConnectionDataSourceProxy.java:103) at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39) at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27) at java.lang.reflect.Constructor.newInstance(Constructor.java:274) at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:100) at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:75) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:579) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:322) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:226) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:147) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:176) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:105) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:920) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:731) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:340) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:226) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:147) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:414) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:318) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:226) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:147) at org.springframework.beans.factory.support.AbstractBeanFactory.getType(AbstractBeanFactory.java:329) at org.springframework.beans.factory.support.DefaultListableBeanFactory.isBeanTypeMatch(DefaultListableBeanFactory.java:250) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:156) at org.springframework.context.support.AbstractApplicationContext.getBeanNamesForType(AbstractApplicationContext.java:585) at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:353) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:294) at org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.refresh(AbstractRefreshableWebApplicationContext.java:134) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:230) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:156) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:48) at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:3212) at org.apache.catalina.core.StandardContext.start(StandardContext.java:3554) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1141) at org.apache.catalina.core.StandardHost.start(StandardHost.java:707) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1141) at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:316) at org.apache.catalina.core.StandardService.start(StandardService.java:450) at org.apache.catalina.core.StandardServer.start(StandardServer.java:2143) at org.apache.catalina.startup.Catalina.start(Catalina.java:463) at org.apache.catalina.startup.Catalina.execute(Catalina.java:350) at org.apache.catalina.startup.Catalina.process(Catalina.java:129) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:324) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:156)  ---  **Affects:** 1.2.2","closed","in: core,","spring-projects-issues","2005-07-05T21:48:51Z","2019-01-13T22:51:17Z"
"","5581","Improve documentation on default validation messages [SPR-855]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-855](https://jira.spring.io/browse/SPR-855?redirect=false)** and commented  http://forum.springframework.org/viewtopic.php?p=18061   ---  **Affects:** 1.2 RC1","closed","type: enhancement,","spring-projects-issues","2005-04-05T08:28:50Z","2012-06-19T03:54:21Z"
"","5580","Fix MethodInvoker to return NULL if the invocation returns null (instead of VoidType) [SPR-854]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-854](https://jira.spring.io/browse/SPR-854?redirect=false)** and commented  See this forum post. Adding an issue to keep track of things.   ---  **Affects:** 1.2 RC1","closed","type: bug,","spring-projects-issues","2005-04-05T08:08:07Z","2005-04-09T04:35:34Z"
"","5492","Correct doco wrt to ordering view resolvers [SPR-764]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-764](https://jira.spring.io/browse/SPR-764?redirect=false)** and commented  Ordered interface is not implemented by all view resolver. There are mistakes wrt this in the docs (examples) http://forum.springframework.org/viewtopic.php?p=15345#15345   ---  **Affects:** 1.1.5","closed","type: enhancement,","spring-projects-issues","2005-03-05T04:11:24Z","2012-06-19T03:53:59Z"
"","5490","Add ThreadLocal example to doco [SPR-762]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-762](https://jira.spring.io/browse/SPR-762?redirect=false)** and commented  The following came from the forum. I'll include this somewhere in the docs:  \  \ \ \com.eduction.deduction.BenefitPayPeriodsResource\ \ \ \false\ \ \ \ \\benefitPayPeriodsResourceTarget\\ \ \ \  \ \ \ \    \ \100\ \    \ \400\ \    \   --- No further details from [SPR-762](https://jira.spring.io/browse/SPR-762?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-03-03T04:32:27Z","2012-06-19T03:54:10Z"
"","5413","More extensive doco on integration with other web frameworks [SPR-685]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-685](https://jira.spring.io/browse/SPR-685?redirect=false)** and commented  Include more extensive documentation for integration with other web frameworks.   ---  **Affects:** 1.1.4  **Attachments:** - [webintegration.xml.patch](https://jira.spring.io/secure/attachment/10557/webintegration.xml.patch) (_34.79 kB_)","closed","type: enhancement,","spring-projects-issues","2005-02-03T19:37:31Z","2012-06-19T03:54:04Z"
"","5379","Investigate possible improvement in error messaging ClassPathXmlApplicationContext [SPR-651]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-651](https://jira.spring.io/browse/SPR-651?redirect=false)** and commented  Max' problem...   ---  **Affects:** 1.1.4","closed","type: enhancement,","spring-projects-issues","2005-01-24T18:58:38Z","2012-06-19T03:54:26Z"
"","5286","Make BindException serializable [SPR-557]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-557](https://jira.spring.io/browse/SPR-557?redirect=false)** and commented  As per our discussion, we need the BeanWrapper to be serializable, since we're serializing the BindException to a fat client to do communication of error messages.  Thanks!   ---  **Affects:** 1.1.3","closed","type: enhancement,","spring-projects-issues","2004-12-15T00:27:14Z","2005-01-10T19:40:00Z"
"","5257","Investigate possible error messaging when defining multiple beans with same url when using BeanNameUHM [SPR-528]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-528](https://jira.spring.io/browse/SPR-528?redirect=false)** and commented  When defining multiple beans with the same URL in combination with the BeanNameUrlHandlerMapping, no error message is displayed or whatsoever... This might be up for improvement.  Juergen, I probably won't have time to fix this before 1.1.3 or my holiday, if you have time, that'd be great, otherwise, I'll fix it in 1.2 (or 1.1.4 if that's coming).   ---  **Affects:** 1.1 final, 1.1.1, 1.1.2","closed","type: enhancement,","spring-projects-issues","2004-12-07T19:23:24Z","2005-01-15T22:49:37Z"
"","5232","Confusing error messages in BeanWrapper when retrieving non-existing nested properties [SPR-503]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-503](https://jira.spring.io/browse/SPR-503?redirect=false)** and commented  When asking for a non-existing nested property, the error message in the exception contains the child classname instead of the parent classname.  Example:  class Parent { Child get/setChild(); }  class Child { }  asking for child.bla results in an error message with error message  Invalid property 'child.bla' of bean class [Child]  while I think it could better be 'of bean class [Parent]   ---  **Affects:** 1.1 final, 1.1.1, 1.1.2","closed","in: core,","spring-projects-issues","2004-11-30T00:16:04Z","2004-11-30T01:04:54Z"
"","5185","Improve HandlerInterceptor management and configuration [SPR-456]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-456](https://jira.spring.io/browse/SPR-456?redirect=false)** and commented  It would be great if we could add more advanced management of HandlerInterceptors. Large applications specifically, would greatly benefit from the ability to configure interceptors in somewhat the same way as we currently use HandlerMappings (binding interecptors to specific URLs, etc.).   --- No further details from [SPR-456](https://jira.spring.io/browse/SPR-456?redirect=false)","closed","type: enhancement,","spring-projects-issues","2004-11-13T00:24:00Z","2005-09-08T21:55:00Z"
"","5179","Setting ProxyFactoryBean to frozen is NOT possible anymore [SPR-450]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-450](https://jira.spring.io/browse/SPR-450?redirect=false)** and commented  Rod,  I was toying around with the aop benchmark last night and I couldn't set the ProxyFactoryBean.frozen property anymore. Initialization of the context throws an exception. So setting the frozen flag now doesn't allow you to add advisors anymore, even not when constructing the context in the first place ;-).  I've added a test ('ProxyFactoryBeanTests.java' line 656 and 'frozenProxyFactoryBean.xml'). It's commented out for the moment.  EXCEPTiON:  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'frozen' defined in class path resource [wrongProxyFactoryTests.xml]: Initialization of bean failed; nested exception is org.springframework.aop.framework.AopConfigException: Cannot add advisor: config is frozen org.springframework.aop.framework.AopConfigException: Cannot add advisor: config is frozen at org.springframework.aop.framework.AdvisedSupport.addAdvisorInternal(AdvisedSupport.java:414)   ---  **Affects:** 1.1.1","closed","type: bug,","spring-projects-issues","2004-11-07T17:50:01Z","2004-11-30T01:12:47Z"
"","5172","Investigate lags HttpInvoker [SPR-443]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-443](https://jira.spring.io/browse/SPR-443?redirect=false)** and commented  Just to keep track of it myself (or in case somebody else knows the answer already), I need to have a look at a major lag in the HttpInvoker infrastructure I was encountering lately. When switching over to Hessian, it was gone...    --- No further details from [SPR-443](https://jira.spring.io/browse/SPR-443?redirect=false)","closed","in: web,","spring-projects-issues","2004-11-02T02:04:04Z","2019-01-11T14:17:53Z"
"","5166","Delegating to HttpSessionListeners in a WebApplicationContext [SPR-437]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-437](https://jira.spring.io/browse/SPR-437?redirect=false)** and commented  I've added a WebApplicationContextSessionListener to the sandbox. Could someone have a look at this and see if this could be up for addition. I think it's nice to have support for this. A user on the forum asked for it and I've also had a use case for this once. At the time I implemented my own hacky solution but I think it's good to have this included somehow (probably 1.2).  If so, we could also add support for attribute listeners and activation listeners (although I believe the latter are completely useless ;-).  It's not tested yet, and there's an issue with error handling (see SRV.10.6 for more info on the unclear subject of errorhandlnig and listeners that are not in the call stack of an http servlet request).  http://forum.springframework.com/viewtopic.php?t=1675   ---  4 votes, 9 watchers","closed","type: enhancement,","spring-projects-issues","2004-10-31T06:55:22Z","2015-09-22T17:34:36Z"
"","5155","NoSuchObjectException should be translated to RemoteConnectFailureException iso RemoteAccessFailureException [SPR-425]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-425](https://jira.spring.io/browse/SPR-425?redirect=false)** and commented  Juergen,  could you have a look at the following forum post:  http://forum.springframework.com/viewtopic.php?t=1556&sid=852a646adf993d88df8aeb85a02d479a  thanx,  Alef   ---  **Affects:** 1.1 final, 1.1.1","closed","type: bug,","spring-projects-issues","2004-10-25T02:37:26Z","2004-10-25T06:04:14Z"
"","5130","Include integration code for jExcelApi [SPR-400]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-400](https://jira.spring.io/browse/SPR-400?redirect=false)** and commented  - introduction of AbstractPoiExcelView as opposed to AbstractExcelView. - introduction of AbstractJExcelView (extending AbstractExcelView).  jExcelApi is an alternative to POI for creating Excel files. It differs a bit from POI, but the main advantage is that jExcelApi handles images a bit better than POI.  Will introduce a minor backward-compatability issue however.   --- No further details from [SPR-400](https://jira.spring.io/browse/SPR-400?redirect=false)","closed","type: enhancement,","spring-projects-issues","2004-10-15T22:33:00Z","2012-06-19T03:53:56Z"
"","5083","(jpetstore) Uppercase table names incompatible with certain unix distro's [SPR-353]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-353](https://jira.spring.io/browse/SPR-353?redirect=false)** and commented  From the forum:  I had a problem with the aforementioned configuration. It seems that mySQL on linux is case sensitive on certain platforms.  see  http://dev.mysql.com/doc/mysql/en/Name_case_sensitivity.html  The table and column names in the DB schema and dataload are UPPER case; this is incompatible with the code (for Unix systems).  jake  (BTW I am extremely impressed with the overall design quality of Spring)   ---  **Affects:** 1.0 final, 1.0.1, 1.0.2, 1.1 RC1, 1.1 RC2, 1.1 final","closed","type: bug,","spring-projects-issues","2004-09-26T10:06:49Z","2006-12-29T22:22:04Z"
"","5032","PropertyPlaceholderConfigurer does not work for inner beans as constructor args [SPR-302]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-302](https://jira.spring.io/browse/SPR-302?redirect=false)** and commented  More info: http://forum.springframework.org/viewtopic.php?t=476   ---  **Affects:** 1.0.2  **Attachments:** - [test.xml](https://jira.spring.io/secure/attachment/10192/test.xml) (_619 bytes_) - [TestBean.java](https://jira.spring.io/secure/attachment/10193/TestBean.java) (_5.37 kB_)","closed","in: core,","spring-projects-issues","2004-08-31T02:02:41Z","2012-06-19T03:54:08Z"
"","5023","Add logical view name resolving to RedirectView [SPR-293]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-293](https://jira.spring.io/browse/SPR-293?redirect=false)** and commented  When issuing a Redirect using the RedirectView we have to use the fully qualified URL. It would be nice if w would be able to mention a logical view name instead and let the view itself somehow resolve it. Mentioning URL in controller shouldn't be done.   --- No further details from [SPR-293](https://jira.spring.io/browse/SPR-293?redirect=false)","closed","type: enhancement,","spring-projects-issues","2004-08-29T19:33:39Z","2012-06-19T02:28:08Z"
"","5004","Remove check for null when finding custom editors [SPR-273]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-273](https://jira.spring.io/browse/SPR-273?redirect=false)** and commented  Juergen,  have a look at the following forum post:  http://forum.springframework.org/viewtopic.php?t=131&start=0&postdays=0&postorder=asc&highlight=  I think this is a reasonable request. Any chance on getting this into 1.1 (if too much impact, no problem).  Alef   ---  **Affects:** 1.1 RC2","closed","type: enhancement,","spring-projects-issues","2004-08-20T00:25:13Z","2004-08-20T05:13:33Z"
"","5079","status.value in spring:bind does not call PropertyEditors for objects [SPR-349]","**[Alec Bourque](https://jira.spring.io/secure/ViewProfile.jspa?name=uze)** opened **[SPR-349](https://jira.spring.io/browse/SPR-349?redirect=false)** and commented  In a JSP, when trying to access a model's property of type object by using  in a , the binded propertyEditor's getAsText() method is not called and instead the class name and java id is returned ie:  com.ba.reo.logic.User@af60af6  instead of  77993 for example  The workaround is to use a full declaration like:    userid being a simple type (int)   ---  **Affects:** 1.1.1  1 votes, 0 watchers","closed","in: web,","spring-projects-issues","2004-09-24T08:00:29Z","2019-01-11T14:01:48Z"
"","5788","JavaDoc of VelocityEngineFactoryBean [SPR-1083]","**[Aldo De Vleeschauwer](https://jira.spring.io/secure/ViewProfile.jspa?name=aadvlees)** opened **[SPR-1083](https://jira.spring.io/browse/SPR-1083?redirect=false)** and commented  I had an issue with configuring org.springframework.ui.velocity.VelocityEngineFactoryBean, property ""resourceLoaderPath"".  If I configure it as the example in the JavaDoc says, Velocity does not find the templates.  \ \file:/WEB-INF/velocity/\ \  The file: prefix makes it look for an absolute path. I replaced it with  \ \/WEB-INF/velocity/\ \ and this makes the path start from the Web Application root path.   ---  **Affects:** 1.2.1","closed","type: bug,","spring-projects-issues","2005-06-28T00:02:36Z","2005-06-29T05:16:37Z"
"","5481","DataSourceUtils.doCloseConnectionIfNecessary '==' not sufficient. [SPR-753]","**[Alan McSherry](https://jira.spring.io/secure/ViewProfile.jspa?name=alanmcsherry)** opened **[SPR-753](https://jira.spring.io/browse/SPR-753?redirect=false)** and commented  Currently (1.1.5) )doCloseConnectionIfNecessary reads like this ...  ConnectionHolder conHolder = (ConnectionHolder) TransactionSynchronizationManager.getResource(dataSource); if (conHolder != null && con == conHolder.getConnection()) { // It's the transactional Connection: Don't close it. conHolder.released(); return; }  But there are cases where the connection passed in as a parameter no longer has the wrapper Connection (named PoolGuardxxxx...)  surrounding it, however the conHolder.getConnection() still references the wrapper. In this case the ID's of the objects will not match, but the wrapper implementation of equals uses it's actual connection to perform the comparision.  Changing the 1.1.4 code to ....  ConnectionHolder conHolder = (ConnectionHolder) TransactionSynchronizationManager.getResource(dataSource);  if (conHolder != null && conHolder.getConnection().equals(con)) { // It's the transactional Connection: Don't close it. return; }  .. has solved a Connection 'leak' for me, whereby Connections which were not involved in transactions were not getting closed.  I appreciate there may not be enough detail in this, if this is the case I would be glad to expand.  Alan.    ---  **Affects:** 1.1.4, 1.1.5  **Attachments:** - [Example.java](https://jira.spring.io/secure/attachment/10582/Example.java) (_1.60 kB_)","closed","in: core,","spring-projects-issues","2005-02-28T21:18:52Z","2005-03-20T04:32:01Z"
"","5016","Cannot proxy classes lacking no-arg constructor using CGLIB [SPR-285]","**[Akbar Zamir](https://jira.spring.io/secure/ViewProfile.jspa?name=zamira)** opened **[SPR-285](https://jira.spring.io/browse/SPR-285?redirect=false)** and commented  I've tried to use a ProxyFactoryBean to proxy a class without an interface.  The class lacks a no-arg constructor, and at startup time the system exits when attempting to create the ApplicationContext, with the following exception:  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'proxy' defined in class path resource [beans.xml]: Initialization of bean failed; nested exception is org.aopalliance.aop.AspectException: null  The Spring 1.1RC1 reference manual makes no mention of this restriction under section 5.5.4 (Proxying Classes), so I assume it is a bug.   ---  **Affects:** 1.1 RC1","closed","in: core,","spring-projects-issues","2004-08-25T04:03:28Z","2019-01-13T22:54:13Z"
"","5554","Documentation has missing information on Hessian remoting [SPR-828]","**[Ahmet Akin](https://jira.spring.io/secure/ViewProfile.jspa?name=ahmetaa)** opened **[SPR-828](https://jira.spring.io/browse/SPR-828?redirect=false)** and commented  i tried to implement a Hessian service following the documentation, however there is a problem. in the ""web.xml"" it points that you should write this:  \ 	\remote\ 	\org.springframework.web.servlet.DispatcherServlet\ 	\1\ \  However, in the application if you do not write a servlet mapper system does not work. Stg like this.               remote         /       i thing it would be nice to add this info to the documentation   --- No further details from [SPR-828](https://jira.spring.io/browse/SPR-828?redirect=false)","closed","type: enhancement,","spring-projects-issues","2005-03-28T23:30:28Z","2005-04-04T00:02:23Z"
"","5577","more map/entry syntactic sugar (please) [SPR-851]","**[Adam Doppelt](https://jira.spring.io/secure/ViewProfile.jspa?name=amd)** opened **[SPR-851](https://jira.spring.io/browse/SPR-851?redirect=false)** and commented  I like the property syntactic sugar that was added in 1.2-rc1. Can we have some for map/entry? For example, our config file contains several hundred entries that look like this:  \ \ \  It'd be great if we could use this instead:  \ Thanks!   ---  **Affects:** 1.2 RC2","closed","type: enhancement,","spring-projects-issues","2005-04-05T04:01:09Z","2005-04-05T19:49:40Z"
"","4902","Make AbstractXsltView slightly more reusable [SPR-170]","**[Aaron Hamid](https://jira.spring.io/secure/ViewProfile.jspa?name=aaron)** opened **[SPR-170](https://jira.spring.io/browse/SPR-170?redirect=false)** and commented  I have another small AbstractXsltView suggestion.  In Spring, all views render to the HttpResponse output stream.  That is normal and expected.  However, I find myself having to migrate to a portal environment where output is rendered DIRECTLY into a SAX ContentHandler (and then the portal itself merges together all the output of various channels).  Now because I wrote my app with Spring (and because I chose XML/XSLT as my view), I am going to be able to leverage the vast majority of it with very few if any changes.  That is a great thing.  The only remaining issue is that my XsltView will still attempt to write to the HttpResponse output stream.  I suggest the following minor modification to allow subclasses to specify the destination SAX Result object:  --- AbstractXsltView.java       2004-02-17 12:55:24.924000000 -0500 +++ AbstractXsltView.java.new   2004-06-17 14:54:04.248500000 -0400 @@ -206,7 +206,7 @@      Map params = getParameters(model, (docRoot == null) ? this.root : docRoot, request, response);  - doTransform(response, dom, params);  + doTransform(model, request, response, dom, params);   }  /** @@ -247,7 +247,14 @@ /** * Use TrAX to perform the transform.   */  - protected void doTransform(HttpServletResponse response, Node dom, Map parameters) throws ServletException, IOException {  + protected void doTransform(Map model, HttpServletRequest, HttpServletResponse response, Node dom, Map parameters) throws ServletException, IOException { + doTransform(response, parameters, new StreamResult(new BufferedOutputStream(response.getOutputStream()))); + } +  + /** + * Use TrAX to perform the transform. + */ + protected void doTransform(HttpServletResponse response, Node dom, Map parameters, Result result) throws ServletException, IOException {   try {   Transformer trans = (this.templates != null) ?   this.templates.newTransformer() : // we have a stylesheet   @@ -265,7 +272,7 @@   trans.setOutputProperty(OutputKeys.INDENT, ""yes"");   // Xalan-specific, but won't do any harm in other XSLT engines   trans.setOutputProperty(""{http://xml.apache.org/xslt}indent-amount"", ""2"");  -         trans.transform(new DOMSource(dom), new StreamResult(new BufferedOutputStream(response.getOutputStream())));  +          trans.transform(new DOMSource(dom), result);               logger.debug(""XSLT transformed OK with stylesheet '"" + this.stylesheetLocation + ""'"");    }  (I have a slightly modified personal copy because I haven't updated to 1.0.2 yet, so the line numbers might be off).  This allows a subclass to override the new doTransform with one that can inspect the model/request/response/etc. and supply a custom Result.  Yes, this is somewhat contorting the intent of the Spring View, but I think one of the initial propositions of Spring is to foremost be practical and utilitarian, and a minor change like this would allow this to cleanly happen in environments where the output does NOT go directly to the response stream.   ---  **Affects:** 1.0.2","closed","type: enhancement,","spring-projects-issues","2004-06-17T06:15:24Z","2004-06-28T23:25:39Z"